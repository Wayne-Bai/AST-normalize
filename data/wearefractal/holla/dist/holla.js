// Generated by CoffeeScript 1.6.2
(function() {
  var Call, ProtoSock, client, holla, shims;

  Call = require('./Call');

  shims = require('./shims');

  ProtoSock = require('protosock');

  client = {
    options: {
      namespace: 'holla',
      resource: 'default',
      debug: false
    },
    register: function(name, cb) {
      var _this = this;

      this.ssocket.write({
        type: "register",
        args: {
          name: name
        }
      });
      return this.once("register", function(worked) {
        if (worked) {
          _this.user = name;
          _this.emit("authorized");
        }
        _this.authorized = worked;
        return typeof cb === "function" ? cb(worked) : void 0;
      });
    },
    call: function(user) {
      return new Call(this, user, true);
    },
    chat: function(user, msg) {
      this.ssocket.write({
        type: "chat",
        to: user,
        args: {
          message: msg
        }
      });
      return this;
    },
    ready: function(fn) {
      if (this.authorized) {
        fn();
      } else {
        this.once('authorized', fn);
      }
      return this;
    },
    validate: function(socket, msg, done) {
      if (this.options.debug) {
        console.log(msg);
      }
      if (typeof msg !== 'object') {
        return done(false);
      }
      if (typeof msg.type !== 'string') {
        return done(false);
      }
      if (msg.type === "register") {
        if (typeof msg.args !== 'object') {
          return done(false);
        }
        if (typeof msg.args.result !== 'boolean') {
          return done(false);
        }
      } else if (msg.type === "offer") {
        if (typeof msg.from !== 'string') {
          return done(false);
        }
      } else if (msg.type === "answer") {
        if (typeof msg.args !== 'object') {
          return done(false);
        }
        if (typeof msg.from !== 'string') {
          return done(false);
        }
        if (typeof msg.args.accepted !== 'boolean') {
          return done(false);
        }
      } else if (msg.type === "sdp") {
        if (typeof msg.args !== 'object') {
          return done(false);
        }
        if (typeof msg.from !== 'string') {
          return done(false);
        }
        if (!msg.args.sdp) {
          return done(false);
        }
        if (!msg.args.type) {
          return done(false);
        }
      } else if (msg.type === "candidate") {
        if (typeof msg.args !== 'object') {
          return done(false);
        }
        if (typeof msg.from !== 'string') {
          return done(false);
        }
        if (typeof msg.args.candidate !== 'object') {
          return done(false);
        }
      } else if (msg.type === "chat") {
        if (typeof msg.args !== 'object') {
          return done(false);
        }
        if (typeof msg.from !== 'string') {
          return done(false);
        }
        if (typeof msg.args.message !== 'string') {
          return done(false);
        }
      } else if (msg.type === "hangup") {
        if (typeof msg.from !== 'string') {
          return done(false);
        }
      } else if (msg.type === "presence") {
        if (typeof msg.args !== 'object') {
          return done(false);
        }
        if (typeof msg.args.name !== 'string') {
          return done(false);
        }
        if (typeof msg.args.online !== 'boolean') {
          return done(false);
        }
      } else {
        return done(false);
      }
      return done(true);
    },
    error: function(socket, err) {
      return this.emit('error', err, socket);
    },
    message: function(socket, msg) {
      var c;

      switch (msg.type) {
        case "register":
          return this.emit("register", msg.args.result);
        case "offer":
          c = new Call(this, msg.from, false);
          return this.emit("call", c);
        case "presence":
          this.emit("presence", msg.args);
          return this.emit("presence." + msg.args.name, msg.args.online);
        case "chat":
          this.emit("chat", {
            from: msg.from,
            message: msg.args.message
          });
          return this.emit("chat." + msg.from, msg.args.message);
        case "hangup":
          this.emit("hangup", {
            from: msg.from
          });
          return this.emit("hangup." + msg.from);
        case "answer":
          this.emit("answer", {
            from: msg.from,
            accepted: msg.args.accepted
          });
          return this.emit("answer." + msg.from, msg.args.accepted);
        case "candidate":
          this.emit("candidate", {
            from: msg.from,
            candidate: msg.args.candidate
          });
          return this.emit("candidate." + msg.from, msg.args.candidate);
        case "sdp":
          this.emit("sdp", {
            from: msg.from,
            sdp: msg.args.sdp,
            type: msg.args.type
          });
          return this.emit("sdp." + msg.from, msg.args);
      }
    }
  };

  holla = {
    createClient: ProtoSock.createClientWrapper(client),
    Call: Call,
    supported: shims.supported,
    config: shims.PeerConnConfig,
    streamToBlob: function(s) {
      return shims.URL.createObjectURL(s);
    },
    pipe: function(stream, el) {
      var uri;

      uri = holla.streamToBlob(stream);
      return shims.attachStream(uri, el);
    },
    record: shims.recordVideo,
    createStream: function(opt, cb) {
      var err, succ;

      if (shims.getUserMedia == null) {
        return cb("Missing getUserMedia");
      }
      err = cb;
      succ = function(s) {
        return cb(null, s);
      };
      shims.getUserMedia(opt, succ, err);
      return holla;
    },
    createFullStream: function(cb) {
      return holla.createStream({
        video: true,
        audio: true
      }, cb);
    },
    createVideoStream: function(cb) {
      return holla.createStream({
        video: true,
        audio: false
      }, cb);
    },
    createAudioStream: function(cb) {
      return holla.createStream({
        video: false,
        audio: true
      }, cb);
    }
  };

  module.exports = holla;

}).call(this);
