var exports = (typeof(exports) === "undefined" ? this : exports);
exports.parser = (function () {
    /*
     * Generated by PEG.js 0.7.0.
     *
     * http://pegjs.majda.cz/
     */

    function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         *
         * For portability, we also escape escape all control and non-ASCII
         * characters. Note that "\0" and "\v" escape sequences are not used
         * because JSHint does not like the first and IE the second.
         */
        return '"' + s
            .replace(/\\/g, '\\\\')  // backslash
            .replace(/"/g, '\\"')    // closing quote character
            .replace(/\x08/g, '\\b') // backspace
            .replace(/\t/g, '\\t')   // horizontal tab
            .replace(/\n/g, '\\n')   // line feed
            .replace(/\f/g, '\\f')   // form feed
            .replace(/\r/g, '\\r')   // carriage return
            .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
            + '"';
    }

    var result = {
        /*
         * Parses the input with a generated parser. If the parsing is successfull,
         * returns a value explicitly or implicitly specified by the grammar from
         * which the parser was generated (see |PEG.buildParser|). If the parsing is
         * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
         */
        parse: function (input, startRule) {
            var parseFunctions = {
                "and": parse_and,
                "operator": parse_operator,
                "callOperator": parse_callOperator,
                "argument": parse_argument,
                "value": parse_value,
                "typedValue": parse_typedValue,
                "array": parse_array,
                "name": parse_name,
                "comparator": parse_comparator,
                "comparison": parse_comparison,
                "group": parse_group,
                "or": parse_or,
                "not": parse_not,
                "nchar": parse_nchar,
                "pctEncoded": parse_pctEncoded,
                "HEXDIG": parse_HEXDIG,
                "unreserved": parse_unreserved
            };

            if (startRule !== undefined) {
                if (parseFunctions[startRule] === undefined) {
                    throw new Error("Invalid rule name: " + quote(startRule) + ".");
                }
            } else {
                startRule = "and";
            }

            var pos = 0;
            var reportFailures = 0;
            var rightmostFailuresPos = 0;
            var rightmostFailuresExpected = [];

            function padLeft(input, padding, length) {
                var result = input;

                var padLength = length - input.length;
                for (var i = 0; i < padLength; i++) {
                    result = padding + result;
                }

                return result;
            }

            function escape(ch) {
                var charCode = ch.charCodeAt(0);
                var escapeChar;
                var length;

                if (charCode <= 0xFF) {
                    escapeChar = 'x';
                    length = 2;
                } else {
                    escapeChar = 'u';
                    length = 4;
                }

                return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
            }

            function matchFailed(failure) {
                if (pos < rightmostFailuresPos) {
                    return;
                }

                if (pos > rightmostFailuresPos) {
                    rightmostFailuresPos = pos;
                    rightmostFailuresExpected = [];
                }

                rightmostFailuresExpected.push(failure);
            }

            function parse_and() {
                var result0, result1, result2, result3;
                var pos0, pos1, pos2, pos3;

                pos0 = pos;
                pos1 = pos;
                result0 = parse_operator();
                if (result0 !== null) {
                    result1 = [];
                    pos2 = pos;
                    pos3 = pos;
                    if (input.substr(pos, 5) === " and ") {
                        result2 = " and ";
                        pos += 5;
                    } else {
                        result2 = null;
                        if (reportFailures === 0) {
                            matchFailed("\" and \"");
                        }
                    }
                    if (result2 !== null) {
                        result3 = parse_operator();
                        if (result3 !== null) {
                            result2 = [result2, result3];
                        } else {
                            result2 = null;
                            pos = pos3;
                        }
                    } else {
                        result2 = null;
                        pos = pos3;
                    }
                    if (result2 !== null) {
                        result2 = (function (offset, o) {
                            return o;
                        })(pos2, result2[1]);
                    }
                    if (result2 === null) {
                        pos = pos2;
                    }
                    while (result2 !== null) {
                        result1.push(result2);
                        pos2 = pos;
                        pos3 = pos;
                        if (input.substr(pos, 5) === " and ") {
                            result2 = " and ";
                            pos += 5;
                        } else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\" and \"");
                            }
                        }
                        if (result2 !== null) {
                            result3 = parse_operator();
                            if (result3 !== null) {
                                result2 = [result2, result3];
                            } else {
                                result2 = null;
                                pos = pos3;
                            }
                        } else {
                            result2 = null;
                            pos = pos3;
                        }
                        if (result2 !== null) {
                            result2 = (function (offset, o) {
                                return o;
                            })(pos2, result2[1]);
                        }
                        if (result2 === null) {
                            pos = pos2;
                        }
                    }
                    if (result1 !== null) {
                        result0 = [result0, result1];
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                } else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, o, rp) {
                        return o ? { type: "group", name: "and", args: [o].concat(rp) } : null;
                    })(pos0, result0[0], result0[1]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                return result0;
            }

            function parse_operator() {
                var result0;

                result0 = parse_not();
                if (result0 === null) {
                    result0 = parse_comparison();
                    if (result0 === null) {
                        result0 = parse_callOperator();
                        if (result0 === null) {
                            result0 = parse_group();
                        }
                    }
                }
                return result0;
            }

            function parse_callOperator() {
                var result0, result1, result2, result3, result4, result5;
                var pos0, pos1, pos2, pos3, pos4, pos5;

                pos0 = pos;
                pos1 = pos;
                result0 = parse_name();
                if (result0 !== null) {
                    if (input.charCodeAt(pos) === 40) {
                        result1 = "(";
                        pos++;
                    } else {
                        result1 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"(\"");
                        }
                    }
                    if (result1 !== null) {
                        pos2 = pos;
                        pos3 = pos;
                        result2 = parse_argument();
                        if (result2 !== null) {
                            result3 = [];
                            pos4 = pos;
                            pos5 = pos;
                            if (input.charCodeAt(pos) === 44) {
                                result4 = ",";
                                pos++;
                            } else {
                                result4 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\",\"");
                                }
                            }
                            if (result4 !== null) {
                                result5 = parse_argument();
                                if (result5 !== null) {
                                    result4 = [result4, result5];
                                } else {
                                    result4 = null;
                                    pos = pos5;
                                }
                            } else {
                                result4 = null;
                                pos = pos5;
                            }
                            if (result4 !== null) {
                                result4 = (function (offset, a) {
                                    return a
                                })(pos4, result4[1]);
                            }
                            if (result4 === null) {
                                pos = pos4;
                            }
                            while (result4 !== null) {
                                result3.push(result4);
                                pos4 = pos;
                                pos5 = pos;
                                if (input.charCodeAt(pos) === 44) {
                                    result4 = ",";
                                    pos++;
                                } else {
                                    result4 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("\",\"");
                                    }
                                }
                                if (result4 !== null) {
                                    result5 = parse_argument();
                                    if (result5 !== null) {
                                        result4 = [result4, result5];
                                    } else {
                                        result4 = null;
                                        pos = pos5;
                                    }
                                } else {
                                    result4 = null;
                                    pos = pos5;
                                }
                                if (result4 !== null) {
                                    result4 = (function (offset, a) {
                                        return a
                                    })(pos4, result4[1]);
                                }
                                if (result4 === null) {
                                    pos = pos4;
                                }
                            }
                            if (result3 !== null) {
                                result2 = [result2, result3];
                            } else {
                                result2 = null;
                                pos = pos3;
                            }
                        } else {
                            result2 = null;
                            pos = pos3;
                        }
                        if (result2 !== null) {
                            result2 = (function (offset, a, rp) {
                                return [a].concat(rp)
                            })(pos2, result2[0], result2[1]);
                        }
                        if (result2 === null) {
                            pos = pos2;
                        }
                        result2 = result2 !== null ? result2 : "";
                        if (result2 !== null) {
                            if (input.charCodeAt(pos) === 41) {
                                result3 = ")";
                                pos++;
                            } else {
                                result3 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\")\"");
                                }
                            }
                            if (result3 !== null) {
                                result0 = [result0, result1, result2, result3];
                            } else {
                                result0 = null;
                                pos = pos1;
                            }
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                } else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, n, args) {
                        return { name: n, args: args };
                    })(pos0, result0[0], result0[2]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                return result0;
            }

            function parse_argument() {
                var result0;

                result0 = parse_callOperator();
                if (result0 === null) {
                    result0 = parse_value();
                }
                return result0;
            }

            function parse_value() {
                var result0, result1;
                var pos0;

                result0 = parse_typedValue();
                if (result0 === null) {
                    pos0 = pos;
                    result1 = parse_nchar();
                    if (result1 !== null) {
                        result0 = [];
                        while (result1 !== null) {
                            result0.push(result1);
                            result1 = parse_nchar();
                        }
                    } else {
                        result0 = null;
                    }
                    if (result0 !== null) {
                        result0 = (function (offset, n) {
                            return n.join("");
                        })(pos0, result0);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    if (result0 === null) {
                        result0 = parse_array();
                    }
                }
                return result0;
            }

            function parse_typedValue() {
                var result0, result1, result2, result3;
                var pos0, pos1;

                pos0 = pos;
                pos1 = pos;
                result1 = parse_nchar();
                if (result1 !== null) {
                    result0 = [];
                    while (result1 !== null) {
                        result0.push(result1);
                        result1 = parse_nchar();
                    }
                } else {
                    result0 = null;
                }
                if (result0 !== null) {
                    if (input.charCodeAt(pos) === 58) {
                        result1 = ":";
                        pos++;
                    } else {
                        result1 = null;
                        if (reportFailures === 0) {
                            matchFailed("\":\"");
                        }
                    }
                    if (result1 !== null) {
                        result3 = parse_nchar();
                        if (result3 !== null) {
                            result2 = [];
                            while (result3 !== null) {
                                result2.push(result3);
                                result3 = parse_nchar();
                            }
                        } else {
                            result2 = null;
                        }
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                } else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, c, v) {
                        return { type: c.join(""), value: v.join("") }
                    })(pos0, result0[0], result0[2]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                return result0;
            }

            function parse_array() {
                var result0, result1, result2, result3, result4;
                var pos0, pos1, pos2, pos3;

                pos0 = pos;
                pos1 = pos;
                if (input.charCodeAt(pos) === 40) {
                    result0 = "(";
                    pos++;
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"(\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_value();
                    if (result1 !== null) {
                        result2 = [];
                        pos2 = pos;
                        pos3 = pos;
                        if (input.charCodeAt(pos) === 44) {
                            result3 = ",";
                            pos++;
                        } else {
                            result3 = null;
                            if (reportFailures === 0) {
                                matchFailed("\",\"");
                            }
                        }
                        if (result3 !== null) {
                            result4 = parse_value();
                            if (result4 !== null) {
                                result3 = [result3, result4];
                            } else {
                                result3 = null;
                                pos = pos3;
                            }
                        } else {
                            result3 = null;
                            pos = pos3;
                        }
                        if (result3 !== null) {
                            result3 = (function (offset, iv) {
                                return iv;
                            })(pos2, result3[1]);
                        }
                        if (result3 === null) {
                            pos = pos2;
                        }
                        while (result3 !== null) {
                            result2.push(result3);
                            pos2 = pos;
                            pos3 = pos;
                            if (input.charCodeAt(pos) === 44) {
                                result3 = ",";
                                pos++;
                            } else {
                                result3 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\",\"");
                                }
                            }
                            if (result3 !== null) {
                                result4 = parse_value();
                                if (result4 !== null) {
                                    result3 = [result3, result4];
                                } else {
                                    result3 = null;
                                    pos = pos3;
                                }
                            } else {
                                result3 = null;
                                pos = pos3;
                            }
                            if (result3 !== null) {
                                result3 = (function (offset, iv) {
                                    return iv;
                                })(pos2, result3[1]);
                            }
                            if (result3 === null) {
                                pos = pos2;
                            }
                        }
                        if (result2 !== null) {
                            if (input.charCodeAt(pos) === 41) {
                                result3 = ")";
                                pos++;
                            } else {
                                result3 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\")\"");
                                }
                            }
                            if (result3 !== null) {
                                result0 = [result0, result1, result2, result3];
                            } else {
                                result0 = null;
                                pos = pos1;
                            }
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                } else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, v, rv) {
                        return [v].concat(rv);
                    })(pos0, result0[1], result0[2]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                return result0;
            }

            function parse_name() {
                var result0, result1;
                var pos0;

                pos0 = pos;
                result1 = parse_nchar();
                if (result1 !== null) {
                    result0 = [];
                    while (result1 !== null) {
                        result0.push(result1);
                        result1 = parse_nchar();
                    }
                } else {
                    result0 = null;
                }
                if (result0 !== null) {
                    result0 = (function (offset, r) {
                        return r.join("");
                    })(pos0, result0);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                return result0;
            }

            function parse_comparator() {
                var result0;
                var pos0;

                pos0 = pos;
                if (input.charCodeAt(pos) === 61) {
                    result0 = "=";
                    pos++;
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"=\"");
                    }
                }
                if (result0 !== null) {
                    result0 = (function (offset) {
                        return "eql";
                    })(pos0);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                if (result0 === null) {
                    pos0 = pos;
                    if (input.substr(pos, 2) === ">=") {
                        result0 = ">=";
                        pos += 2;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\">=\"");
                        }
                    }
                    if (result0 !== null) {
                        result0 = (function (offset) {
                            return "gte";
                        })(pos0);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    if (result0 === null) {
                        pos0 = pos;
                        if (input.substr(pos, 2) === "<=") {
                            result0 = "<=";
                            pos += 2;
                        } else {
                            result0 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"<=\"");
                            }
                        }
                        if (result0 !== null) {
                            result0 = (function (offset) {
                                return "lte"
                            })(pos0);
                        }
                        if (result0 === null) {
                            pos = pos0;
                        }
                        if (result0 === null) {
                            pos0 = pos;
                            if (input.charCodeAt(pos) === 62) {
                                result0 = ">";
                                pos++;
                            } else {
                                result0 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\">\"");
                                }
                            }
                            if (result0 !== null) {
                                result0 = (function (offset) {
                                    return "gt"
                                })(pos0);
                            }
                            if (result0 === null) {
                                pos = pos0;
                            }
                            if (result0 === null) {
                                pos0 = pos;
                                if (input.charCodeAt(pos) === 60) {
                                    result0 = "<";
                                    pos++;
                                } else {
                                    result0 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("\"<\"");
                                    }
                                }
                                if (result0 !== null) {
                                    result0 = (function (offset) {
                                        return "lt"
                                    })(pos0);
                                }
                                if (result0 === null) {
                                    pos = pos0;
                                }
                            }
                        }
                    }
                }
                return result0;
            }

            function parse_comparison() {
                var result0, result1, result2;
                var pos0, pos1;

                pos0 = pos;
                pos1 = pos;
                result0 = parse_name();
                if (result0 !== null) {
                    result1 = parse_comparator();
                    if (result1 !== null) {
                        result2 = parse_value();
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                } else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, n, c, v) {
                        return {name: c, args: [n, v] };
                    })(pos0, result0[0], result0[1], result0[2]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                return result0;
            }

            function parse_group() {
                var result0, result1, result2;
                var pos0, pos1;

                pos0 = pos;
                pos1 = pos;
                if (input.charCodeAt(pos) === 40) {
                    result0 = "(";
                    pos++;
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"(\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_or();
                    if (result1 === null) {
                        result1 = parse_and();
                    }
                    if (result1 !== null) {
                        if (input.charCodeAt(pos) === 41) {
                            result2 = ")";
                            pos++;
                        } else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\")\"");
                            }
                        }
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                } else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, op) {
                        return op;
                    })(pos0, result0[1]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                return result0;
            }

            function parse_or() {
                var result0, result1, result2, result3;
                var pos0, pos1, pos2, pos3;

                pos0 = pos;
                pos1 = pos;
                result0 = parse_operator();
                if (result0 !== null) {
                    pos2 = pos;
                    pos3 = pos;
                    if (input.substr(pos, 4) === " or ") {
                        result2 = " or ";
                        pos += 4;
                    } else {
                        result2 = null;
                        if (reportFailures === 0) {
                            matchFailed("\" or \"");
                        }
                    }
                    if (result2 !== null) {
                        result3 = parse_operator();
                        if (result3 !== null) {
                            result2 = [result2, result3];
                        } else {
                            result2 = null;
                            pos = pos3;
                        }
                    } else {
                        result2 = null;
                        pos = pos3;
                    }
                    if (result2 !== null) {
                        result2 = (function (offset, o) {
                            return o;
                        })(pos2, result2[1]);
                    }
                    if (result2 === null) {
                        pos = pos2;
                    }
                    if (result2 !== null) {
                        result1 = [];
                        while (result2 !== null) {
                            result1.push(result2);
                            pos2 = pos;
                            pos3 = pos;
                            if (input.substr(pos, 4) === " or ") {
                                result2 = " or ";
                                pos += 4;
                            } else {
                                result2 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\" or \"");
                                }
                            }
                            if (result2 !== null) {
                                result3 = parse_operator();
                                if (result3 !== null) {
                                    result2 = [result2, result3];
                                } else {
                                    result2 = null;
                                    pos = pos3;
                                }
                            } else {
                                result2 = null;
                                pos = pos3;
                            }
                            if (result2 !== null) {
                                result2 = (function (offset, o) {
                                    return o;
                                })(pos2, result2[1]);
                            }
                            if (result2 === null) {
                                pos = pos2;
                            }
                        }
                    } else {
                        result1 = null;
                    }
                    if (result1 !== null) {
                        result0 = [result0, result1];
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                } else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, o, rp) {
                        return o ? { type: "group", name: "or", args: [o].concat(rp) } : null;
                    })(pos0, result0[0], result0[1]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                return result0;
            }

            function parse_not() {
                var result0, result1;
                var pos0, pos1;

                pos0 = pos;
                pos1 = pos;
                if (input.substr(pos, 3) === "not") {
                    result0 = "not";
                    pos += 3;
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"not\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_group();
                    if (result1 !== null) {
                        result0 = [result0, result1];
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                } else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, g) {
                        return { name: "not", args: [g] };
                    })(pos0, result0[1]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                return result0;
            }

            function parse_nchar() {
                var result0;

                result0 = parse_unreserved();
                if (result0 === null) {
                    if (input.charCodeAt(pos) === 42) {
                        result0 = "*";
                        pos++;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"*\"");
                        }
                    }
                    if (result0 === null) {
                        if (input.charCodeAt(pos) === 43) {
                            result0 = "+";
                            pos++;
                        } else {
                            result0 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"+\"");
                            }
                        }
                    }
                }
                return result0;
            }

            function parse_pctEncoded() {
                var result0, result1, result2;
                var pos0;

                pos0 = pos;
                if (input.charCodeAt(pos) === 37) {
                    result0 = "%";
                    pos++;
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"%\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_HEXDIG();
                    if (result1 !== null) {
                        result2 = parse_HEXDIG();
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        } else {
                            result0 = null;
                            pos = pos0;
                        }
                    } else {
                        result0 = null;
                        pos = pos0;
                    }
                } else {
                    result0 = null;
                    pos = pos0;
                }
                return result0;
            }

            function parse_HEXDIG() {
                var result0;

                if (/^[a-fA-F0-9]/.test(input.charAt(pos))) {
                    result0 = input.charAt(pos);
                    pos++;
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("[a-fA-F0-9]");
                    }
                }
                return result0;
            }

            function parse_unreserved() {
                var result0;

                if (/^[^+{}()<>=, ]/.test(input.charAt(pos))) {
                    result0 = input.charAt(pos);
                    pos++;
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("[^+{}()<>=, ]");
                    }
                }
                return result0;
            }


            function cleanupExpected(expected) {
                expected.sort();

                var lastExpected = null;
                var cleanExpected = [];
                for (var i = 0; i < expected.length; i++) {
                    if (expected[i] !== lastExpected) {
                        cleanExpected.push(expected[i]);
                        lastExpected = expected[i];
                    }
                }
                return cleanExpected;
            }

            function computeErrorPosition() {
                /*
                 * The first idea was to use |String.split| to break the input up to the
                 * error position along newlines and derive the line and column from
                 * there. However IE's |split| implementation is so broken that it was
                 * enough to prevent it.
                 */

                var line = 1;
                var column = 1;
                var seenCR = false;

                for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {
                    var ch = input.charAt(i);
                    if (ch === "\n") {
                        if (!seenCR) {
                            line++;
                        }
                        column = 1;
                        seenCR = false;
                    } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
                        line++;
                        column = 1;
                        seenCR = true;
                    } else {
                        column++;
                        seenCR = false;
                    }
                }

                return { line: line, column: column };
            }


            var result = parseFunctions[startRule]();

            /*
             * The parser is now in one of the following three states:
             *
             * 1. The parser successfully parsed the whole input.
             *
             *    - |result !== null|
             *    - |pos === input.length|
             *    - |rightmostFailuresExpected| may or may not contain something
             *
             * 2. The parser successfully parsed only a part of the input.
             *
             *    - |result !== null|
             *    - |pos < input.length|
             *    - |rightmostFailuresExpected| may or may not contain something
             *
             * 3. The parser did not successfully parse any part of the input.
             *
             *   - |result === null|
             *   - |pos === 0|
             *   - |rightmostFailuresExpected| contains at least one failure
             *
             * All code following this comment (including called functions) must
             * handle these states.
             */
            if (result === null || pos !== input.length) {
                var offset = Math.max(pos, rightmostFailuresPos);
                var found = offset < input.length ? input.charAt(offset) : null;
                var errorPosition = computeErrorPosition();

                throw new this.SyntaxError(
                    cleanupExpected(rightmostFailuresExpected),
                    found,
                    offset,
                    errorPosition.line,
                    errorPosition.column
                );
            }

            return result;
        },

        /* Returns the parser source code. */
        toSource: function () {
            return this._source;
        }
    };

    /* Thrown when a parser encounters a syntax error. */

    result.SyntaxError = function (expected, found, offset, line, column) {
        function buildMessage(expected, found) {
            var expectedHumanized, foundHumanized;

            switch (expected.length) {
                case 0:
                    expectedHumanized = "end of input";
                    break;
                case 1:
                    expectedHumanized = expected[0];
                    break;
                default:
                    expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
                        + " or "
                        + expected[expected.length - 1];
            }

            foundHumanized = found ? quote(found) : "end of input";

            return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
        }

        this.name = "SyntaxError";
        this.expected = expected;
        this.found = found;
        this.message = buildMessage(expected, found);
        this.offset = offset;
        this.line = line;
        this.column = column;
    };

    result.SyntaxError.prototype = Error.prototype;

    return result;
})();
