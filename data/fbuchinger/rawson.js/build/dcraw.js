
(function() {
    var root;
    root = (typeof exports !== "undefined" && exports !== null) ? exports : this;

(function() {
    var root;
    root = (typeof exports !== "undefined" && exports !== null) ? exports : this;

(function() {
    var root;
    root = (typeof exports !== "undefined" && exports !== null) ? exports : this;

(function() {
    var root;
    root = (typeof exports !== "undefined" && exports !== null) ? exports : this;

(function() {
    var root;
    root = (typeof exports !== "undefined" && exports !== null) ? exports : this;

(function() {
    var root;
    root = (typeof exports !== "undefined" && exports !== null) ? exports : this;

(function() {
    var root;
    root = (typeof exports !== "undefined" && exports !== null) ? exports : this;

(function() {
    var root;
    root = (typeof exports !== "undefined" && exports !== null) ? exports : this;

(function() {
    var root;
    root = (typeof exports !== "undefined" && exports !== null) ? exports : this;

(function() {
    var root;
    root = (typeof exports !== "undefined" && exports !== null) ? exports : this;
// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.
try {
  this['Module'] = Module;
} catch(e) {
  this['Module'] = Module = {};
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  Module['print'] = function(x) {
    process['stdout'].write(x + '\n');
  };
  Module['printErr'] = function(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function(filename) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename).toString();
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename).toString();
    }
    return ret;
  };

  Module['load'] = function(f) {
    globalEval(read(f));
  };

  if (!Module['arguments']) {
    Module['arguments'] = process['argv'].slice(2);
  }
}

if (ENVIRONMENT_IS_SHELL) {
  Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  // Polyfill over SpiderMonkey/V8 differences
  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function(f) { snarf(f) };
  }

  if (!Module['arguments']) {
    if (typeof scriptArgs != 'undefined') {
      Module['arguments'] = scriptArgs;
    } else if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
}

if (ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER) {
  if (!Module['print']) {
    Module['print'] = function(x) {
      console.log(x);
    };
  }

  if (!Module['printErr']) {
    Module['printErr'] = function(x) {
      console.log(x);
    };
  }
}

if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (!Module['arguments']) {
    if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
}

if (ENVIRONMENT_IS_WORKER) {
  // We can do very little here...
  var TRY_USE_DUMP = false;
  if (!Module['print']) {
    Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  Module['load'] = importScripts;
}

if (!ENVIRONMENT_IS_WORKER && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_SHELL) {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
if (!Module['preRun']) Module['preRun'] = [];
if (!Module['postRun']) Module['postRun'] = [];

  
// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      var logg = log2(quantum);
      return '((((' +target + ')+' + (quantum-1) + ')>>' + logg + ')<<' + logg + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (/^\[\d+\ x\ (.*)\]/.test(type)) return true; // [15 x ?] blocks. Like structs
  if (/<?{ ?[^}]* ?}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  BITSHIFT64_SHL: 0,
  BITSHIFT64_ASHR: 1,
  BITSHIFT64_LSHR: 2,
  bitshift64: function (low, high, op, bits) {
    var ret;
    var ander = Math.pow(2, bits)-1;
    if (bits < 32) {
      switch (op) {
        case Runtime.BITSHIFT64_SHL:
          ret = [low << bits, (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits))];
          break;
        case Runtime.BITSHIFT64_ASHR:
          ret = [(((low >>> bits ) | ((high&ander) << (32 - bits))) >> 0) >>> 0, (high >> bits) >>> 0];
          break;
        case Runtime.BITSHIFT64_LSHR:
          ret = [((low >>> bits) | ((high&ander) << (32 - bits))) >>> 0, high >>> bits];
          break;
      }
    } else if (bits == 32) {
      switch (op) {
        case Runtime.BITSHIFT64_SHL:
          ret = [0, low];
          break;
        case Runtime.BITSHIFT64_ASHR:
          ret = [high, (high|0) < 0 ? ander : 0];
          break;
        case Runtime.BITSHIFT64_LSHR:
          ret = [high, 0];
          break;
      }
    } else { // bits > 32
      switch (op) {
        case Runtime.BITSHIFT64_SHL:
          ret = [0, low << (bits - 32)];
          break;
        case Runtime.BITSHIFT64_ASHR:
          ret = [(high >> (bits - 32)) >>> 0, (high|0) < 0 ? ander : 0];
          break;
        case Runtime.BITSHIFT64_LSHR:
          ret = [high >>>  (bits - 32) , 0];
          break;
      }
    }
    HEAP32[tempDoublePtr>>2] = ret[0]; // cannot use utility functions since we are in runtime itself
    HEAP32[tempDoublePtr+4>>2] = ret[1];
  },
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type, quantumSize) {
    if (Runtime.QUANTUM_SIZE == 1) return 1;
    var size = {
      '%i1': 1,
      '%i8': 1,
      '%i16': 2,
      '%i32': 4,
      '%i64': 8,
      "%float": 4,
      "%double": 8
    }['%'+type]; // add '%' since float and double confuse Closure compiler as keys, and also spidermonkey as a compiler will remove 's from '_i8' etc
    if (!size) {
      if (type.charAt(type.length-1) == '*') {
        size = Runtime.QUANTUM_SIZE; // A pointer
      } else if (type[0] == 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 == 0);
        size = bits/8;
      }
    }
    return size;
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    type.flatIndexes = type.fields.map(function(field) {
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = size;
      } else if (Runtime.isStructType(field)) {
        size = Types.types[field].flatSize;
        alignSize = Types.types[field].alignSize;
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else {
        throw 'Unclear type in struct: ' + field + ', in ' + type.name_ + ' :: ' + dump(Types.types[type.name_]);
      }
      alignSize = type.packed ? 1 : Math.min(alignSize, Runtime.QUANTUM_SIZE);
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      return FUNCTION_TABLE[ptr].apply(null, args);
    } else {
      return FUNCTION_TABLE[ptr]();
    }
  },
  addFunction: function (func, sig) {
    assert(sig);
    var table = FUNCTION_TABLE; // TODO: support asm
    var ret = table.length;
    table.push(func);
    table.push(0);
    return ret;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function() {
        Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xff;
      if (needed) {
        buffer.push(code);
        needed--;
      }
      if (buffer.length == 0) {
        if (code < 128) return String.fromCharCode(code);
        buffer.push(code);
        if (code > 191 && code < 224) {
          needed = 1;
        } else {
          needed = 2;
        }
        return '';
      }
      if (needed > 0) return '';
      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var ret;
      if (c1 > 191 && c1 < 224) {
        ret = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
      } else {
        ret = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function(string) {
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  stackAlloc: function stackAlloc(size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2); return ret; },
  staticAlloc: function staticAlloc(size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = ((((STATICTOP)+3)>>2)<<2); if (STATICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function alignMemory(size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 4))*(quantum ? quantum : 4); return ret; },
  makeBigInt: function makeBigInt(low,high,unsigned) { var ret = (unsigned ? (((low)>>>0)+(((high)>>>0)*4294967296)) : (((low)>>>0)+(((high)|0)*4294967296))); return ret; },
  QUANTUM_SIZE: 4,
  __dummy__: 0
}




var CorrectionsMonitor = {
  MAX_ALLOWED: 0, // XXX
  corrections: 0,
  sigs: {},

  note: function(type, succeed, sig) {
    if (!succeed) {
      this.corrections++;
      if (this.corrections >= this.MAX_ALLOWED) abort('\n\nToo many corrections!');
    }
  },

  print: function() {
  }
};





//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.
var setjmpId = 1; // Used in setjmp/longjmp
var setjmpLabels = {};

var ABORT = false;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function abort(text) {
  Module.print(text + ':\n' + (new Error).stack);
  ABORT = true;
  throw "Assertion: " + text;
}

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = eval('_' + ident);
  } catch(e) {
    try {
      func = globalScope['Module']['_' + ident]; // closure exported function
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length+1);
      writeStringToMemory(value, ret);
      return ret;
    } else if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}

// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,Math.min(Math.floor((value)/4294967296), 4294967295)>>>0],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': (HEAPF64[(tempDoublePtr)>>3]=value,HEAP32[((ptr)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((ptr)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]); break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return (HEAP32[((tempDoublePtr)>>2)]=HEAP32[((ptr)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((ptr)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_NONE = 3; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// Simple unoptimized memset - necessary during startup
var _memset = function(ptr, value, num) {
  var stop = ptr + num;
  while (ptr < stop) {
    HEAP8[(ptr++)]=value;
  }
}

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    _memset(ret, 0, size);
    return ret;
  }

  if (singleType === 'i8') {
    HEAPU8.set(new Uint8Array(slab), ret);
    return ret;
  }

  var i = 0, type;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);
    i += Runtime.getNativeTypeSize(type);
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  var utf8 = new Runtime.UTF8Processor();
  var nullTerminated = typeof(length) == "undefined";
  var ret = "";
  var i = 0;
  var t;
  while (1) {
    t = HEAPU8[((ptr)+(i))];
    if (nullTerminated && t == 0) break;
    ret += utf8.processCChar(t);
    i += 1;
    if (!nullTerminated && i == length) break;
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

function Array_stringify(array) {
  var ret = "";
  for (var i = 0; i < array.length; i++) {
    ret += String.fromCharCode(array[i]);
  }
  return ret;
}
Module['Array_stringify'] = Array_stringify;

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return ((x+4095)>>12)<<12;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STACK_ROOT, STACKTOP, STACK_MAX;
var STATICTOP;
function enlargeMemory() {
  // TOTAL_MEMORY is the current size of the actual array, and STATICTOP is the new top.
  while (TOTAL_MEMORY <= STATICTOP) { // Simple heuristic. Override enlargeMemory() if your program has something more optimal for it
    TOTAL_MEMORY = alignMemoryPage(2*TOTAL_MEMORY);
  }
  var oldHEAP8 = HEAP8;
  var buffer = new ArrayBuffer(TOTAL_MEMORY);
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
  HEAP8.set(oldHEAP8);
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
  assert(!!Int32Array && !!Float64Array && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
         'Cannot fallback to non-typed array case: Code is too specialized');

  var buffer = new ArrayBuffer(TOTAL_MEMORY);
  HEAP8 = new Int8Array(buffer);
  HEAP16 = new Int16Array(buffer);
  HEAP32 = new Int32Array(buffer);
  HEAPU8 = new Uint8Array(buffer);
  HEAPU16 = new Uint16Array(buffer);
  HEAPU32 = new Uint32Array(buffer);
  HEAPF32 = new Float32Array(buffer);
  HEAPF64 = new Float64Array(buffer);

  // Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 255;
  assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

STACK_ROOT = STACKTOP = Runtime.alignMemory(1);
STACK_MAX = TOTAL_STACK; // we lose a little stack here, but TOTAL_STACK is nice and round so use that as the max

var tempDoublePtr = Runtime.alignMemory(allocate(12, 'i8', ALLOC_STACK), 8);
assert(tempDoublePtr % 8 == 0);
function copyTempFloat(ptr) { // functions, because inlining this code is increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}
function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}

STATICTOP = STACK_MAX;
assert(STATICTOP < TOTAL_MEMORY); // Stack must fit in TOTAL_MEMORY; allocations from here on may enlarge TOTAL_MEMORY

var nullString = allocate(intArrayFromString('(null)'), 'i8', ALLOC_STACK);

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATINIT__ = []; // functions called during startup
var __ATMAIN__ = []; // functions called when main() is to be run
var __ATEXIT__ = []; // functions called during shutdown

function initRuntime() {
  callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);

  // Print summary of correction activity
  CorrectionsMonitor.print();
}

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[((buffer)+(i))]=chr
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer)+(i))]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
  // TODO: clean up previous line
}
function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyTracking = {};
var calledRun = false;
var runDependencyWatcher = null;
function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 6000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    } 
    // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
    if (!calledRun && shouldRunNow) run();
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data

// === Body ===



assert(STATICTOP == STACK_MAX); assert(STACK_MAX == TOTAL_STACK);

STATICTOP += 345184;

assert(STATICTOP < TOTAL_MEMORY);



































var _stdout;
var _stdin;
var _stderr;


























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































allocate(4, "i8", ALLOC_NONE, 5242880);
allocate(4, "i8", ALLOC_NONE, 5242884);
allocate([13,198,136,68,161,101,218,63,24,9,109,57,151,226,214,63,88,29,57,210,25,24,199,63,246,95,231,166,205,56,203,63,24,9,109,57,151,226,230,63,85,247,200,230,170,121,178,63,75,175,205,198,74,204,147,63,56,129,233,180,110,131,190,63,145,214,24,116,66,104,238,63], "i8", ALLOC_NONE, 5242888);
allocate(4, "i8", ALLOC_NONE, 5242960);
allocate(4, "i8", ALLOC_NONE, 5242964);
allocate(128, "i8", ALLOC_NONE, 5242968);
allocate([232,217,76,63,49,8,140,62,107,43,246,61,178,157,111,61,32,99,238,60,108,9,121,60,111,18,3,60,224,45,144,59], "i8", ALLOC_NONE, 5243096);
allocate([254,254,0,255,0,1,254,254,0,0,1,1,254,255,255,0,0,1,254,255,0,255,0,2,254,255,0,0,0,3,254,255,0,1,1,1,254,0,0,255,0,6,254,0,0,0,1,2,254,0,0,1,0,3,254,1,255,0,0,4,254,1,0,255,1,4,254,1,0,0,0,6,254,1,0,1,0,2,254,2,0,0,1,4,254,2,0,1,0,4,255,254,255,0,0,128,255,254,0,255,0,1,255,254,1,255,0,1,255,254,1,0,1,1,255,255,255,1,0,136,255,255,1,254,0,64,255,255,1,255,0,34,255,255,1,0,0,51,255,255,1,1,1,17,255,0,255,2,0,8,255,0,0,255,0,68,255,0,0,1,0,17,255,0,1,254,1,64,255,0,1,255,0,102,255,0,1,0,1,34,255,0,1,1,0,51,255,0,1,2,1,16,255,1,1,255,1,68,255,1,1,0,0,102,255,1,1,1,0,34,255,1,1,2,0,16,255,2,0,1,0,4,255,2,1,0,1,4,255,2,1,1,0,4,0,254,0,0,1,128,0,255,0,1,1,136,0,255,1,254,0,64,0,255,1,0,0,17,0,255,2,254,0,64,0,255,2,255,0,32,0,255,2,0,0,48,0,255,2,1,1,16,0,0,0,2,1,8,0,0,2,254,1,64,0,0,2,255,0,96,0,0,2,0,1,32,0,0,2,1,0,48,0,0,2,2,1,16,0,1,1,0,0,68,0,1,1,2,0,16,0,1,2,255,1,64,0,1,2,0,0,96,0,1,2,1,0,32,0,1,2,2,0,16,1,254,1,0,0,128,1,255,1,1,0,136,1,0,1,2,0,8,1,0,2,255,0,64,1,0,2,1,0,16] /* \FE\FE\00\FF\00\01\F */, "i8", ALLOC_NONE, 5243128);
allocate(4, "i8", ALLOC_NONE, 5243512);
allocate([255,255,255,0,255,1,0,1,1,1,1,0,1,255,0,255] /* \FF\FF\FF\00\FF\01\0 */, "i8", ALLOC_NONE, 5243516);
allocate(4, "i8", ALLOC_NONE, 5243532);
allocate(16, "i8", ALLOC_NONE, 5243536);
allocate(4, "i8", ALLOC_NONE, 5243552);
allocate(4, "i8", ALLOC_NONE, 5243556);
allocate(4, "i8", ALLOC_NONE, 5243560);
allocate(4, "i8", ALLOC_NONE, 5243564);
allocate(4, "i8", ALLOC_NONE, 5243568);
allocate(4, "i8", ALLOC_NONE, 5243572);
allocate(4, "i8", ALLOC_NONE, 5243576);
allocate(4, "i8", ALLOC_NONE, 5243580);
allocate(4, "i8", ALLOC_NONE, 5243584);
allocate(440, "i8", ALLOC_NONE, 5243588);
allocate(4, "i8", ALLOC_NONE, 5244028);
allocate(4, "i8", ALLOC_NONE, 5244032);
allocate(4, "i8", ALLOC_NONE, 5244036);
allocate(4, "i8", ALLOC_NONE, 5244040);
allocate(4, "i8", ALLOC_NONE, 5244044);
allocate(4, "i8", ALLOC_NONE, 5244048);
allocate(4, "i8", ALLOC_NONE, 5244052);
allocate(4, "i8", ALLOC_NONE, 5244056);
allocate(4, "i8", ALLOC_NONE, 5244060);
allocate(4, "i8", ALLOC_NONE, 5244064);
allocate(4, "i8", ALLOC_NONE, 5244068);
allocate([10,98,121,32,68,97,118,101,32,67,111,102,102,105,110,44,32,100,99,111,102,102,105,110,32,97,32,99,121,98,101,114,99,111,109,32,111,32,110,101,116,0] /* \0Aby Dave Coffin, d */, "i8", ALLOC_NONE, 5244072);
allocate(4, "i8", ALLOC_NONE, 5244116);
allocate(4, "i8", ALLOC_NONE, 5244120);
allocate(4, "i8", ALLOC_NONE, 5244124);
allocate(512, "i8", ALLOC_NONE, 5244128);
allocate(4, "i8", ALLOC_NONE, 5244640);
allocate([17,15,16,15,15,14,14,13,13,12,12,11,11,10,10,9,9,8,8,7,7,6,6,5,5,4,4,3,3,3,0,3,2,2,1,2], "i8", ALLOC_NONE, 5244644);
allocate([7,7,0,0,63,55,47,39,31,23,15,7,0,7,7,0,0,63,55,47,39,31,23,15,7,0,3,3,0,0,63,47,31,15,0,0,0,0,0], "i8", ALLOC_NONE, 5244680);
allocate([15,156,179,63,84,116,100,190,169,19,208,189,153,187,6,191,18,165,189,63,150,67,139,60,52,128,55,188,226,233,149,60,245,74,105,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,0,0,64,63,0,0,224,191,0,0,128,190,0,0,128,190,0,0,64,63,0,0,64,63,0,0,128,190,0,0,128,190,0,0,224,191,0,0,64,63,0,0,16,64,211,77,242,63,25,4,214,190,70,182,243,190,164,112,253,190,170,241,226,63,4,86,142,190,14,45,130,191,20,174,39,191,12,2,43,64,0,0,0,0,0,0,0,0,0,0,0,0,6,216,247,191,235,116,230,63,253,103,185,191,144,101,37,64,0,227,179,63,115,99,6,191,155,3,148,190,129,62,209,62,75,60,154,191,240,136,138,63,91,63,60,64,83,203,232,191], "i8", ALLOC_NONE, 5244720);
allocate(4, "i8", ALLOC_NONE, 5244912);
allocate(4, "i8", ALLOC_NONE, 5244916);
allocate(4, "i8", ALLOC_NONE, 5244920);
allocate(4, "i8", ALLOC_NONE, 5244924);
allocate([56,48,2,64,50,56,58,191,111,16,157,190,110,77,106,190,76,169,157,63,6,127,63,187,55,84,12,188,153,243,28,190,36,183,148,63], "i8", ALLOC_NONE, 5244928);
allocate(48, "i8", ALLOC_NONE, 5244964);
allocate([255,255,255,0,255,1,0,1,1,1,1,0,1,255,0,255], "i8", ALLOC_NONE, 5245012);
allocate(4, "i8", ALLOC_NONE, 5245028);
allocate(4, "i8", ALLOC_NONE, 5245032);
allocate(4, "i8", ALLOC_NONE, 5245036);
allocate(4, "i8", ALLOC_NONE, 5245040);
allocate([253,255,255,255,1,0,3,0,251,255,255,255,1,0,5,0,248,255,254,255,2,0,8,0,243,255,253,255,3,0,13,0,237,255,252,255,4,0,19,0,228,255,250,255,6,0,28,0], "i8", ALLOC_NONE, 5245044);
allocate([167,255,196,255,212,255,224,255,234,255,241,255,248,255,254,255,2,0,8,0,15,0,22,0,32,0,44,0,60,0,89,0], "i8", ALLOC_NONE, 5245092);
allocate([0,0,1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,27,0,28,0,29,0,30,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,40,0,41,0,42,0,43,0,44,0,45,0,46,0,47,0,48,0,49,0,50,0,51,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,61,0,62,0,63,0,64,0,65,0,66,0,67,0,68,0,69,0,70,0,71,0,72,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,84,0,86,0,88,0,90,0,92,0,94,0,97,0,99,0,101,0,103,0,105,0,107,0,110,0,112,0,114,0,116,0,118,0,120,0,123,0,125,0,127,0,129,0,131,0,134,0,136,0,138,0,140,0,142,0,144,0,147,0,149,0,151,0,153,0,155,0,158,0,160,0,162,0,164,0,166,0,168,0,171,0,173,0,175,0,177,0,179,0,181,0,184,0,186,0,188,0,190,0,192,0,195,0,197,0,199,0,201,0,203,0,205,0,208,0,210,0,212,0,214,0,216,0,218,0,221,0,223,0,226,0,230,0,235,0,239,0,244,0,248,0,252,0,1,1,5,1,9,1,14,1,18,1,22,1,27,1,31,1,35,1,40,1,44,1,49,1,53,1,57,1,62,1,66,1,70,1,75,1,79,1,83,1,88,1,92,1,96,1,101,1,105,1,109,1,114,1,118,1,123,1,127,1,131,1,136,1,140,1,144,1,149,1,153,1,157,1,162,1,166,1,170,1,175,1,179,1,184,1,188,1,192,1,197,1,201,1,205,1,210,1,214,1,218,1,223,1,227,1,231,1,236,1,240,1,244,1,252,1,7,2,19,2,30,2,41,2,52,2,63,2,75,2,86,2,97,2,108,2,119,2,131,2,142,2,153,2,164,2,175,2,186,2,198,2,209,2,220,2,231,2,242,2,254,2,9,3,20,3,31,3,42,3,54,3,65,3,76,3,87,3,98,3,110,3,121,3,132,3,143,3,154,3,165,3,177,3,188,3,199,3,210,3,221,3,233,3,244,3,255,3], "i8", ALLOC_NONE, 5245124);
allocate(4, "i8", ALLOC_NONE, 5245636);
allocate(16, "i8", ALLOC_NONE, 5245640);
allocate(8, "i8", ALLOC_NONE, 5245656);
allocate([8,0,0,0,7,0,0,0,6,0,0,0,9,0,0,0,11,0,0,0,10,0,0,0,5,0,0,0,12,0,0,0,14,0,0,0,13,0,0,0], "i8", ALLOC_NONE, 5245664);
allocate([255,255,255,1,1,255,1,1,254,0,0,254,0,2,2,0,254,254,254,2,2,254,2,2], "i8", ALLOC_NONE, 5245704);
allocate(4, "i8", ALLOC_NONE, 5245728);
allocate(8, "i8", ALLOC_NONE, 5245732);
allocate(28, "i8", ALLOC_NONE, 5245740);
allocate([0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63], "i8", ALLOC_NONE, 5245768);
allocate([74,97,110,0,70,101,98,0,77,97,114,0,65,112,114,0,77,97,121,0,74,117,110,0,74,117,108,0,65,117,103,0,83,101,112,0,79,99,116,0,78,111,118,0,68,101,99,0], "i8", ALLOC_NONE, 5245800);
allocate(156, "i8", ALLOC_NONE, 5245848);
allocate([193,191,109,13,89,197,19,157,131,97,107,79,199,127,61,61,83,89,227,199,233,47,149,167,149,31,223,127,43,41,199,13,223,7,239,113,137,61,19,61,59,19,251,13,137,193,101,31,179,13,107,41,227,251,239,163,107,71,127,149,53,167,71,79,199,241,89,149,53,17,41,97,241,61,179,43,13,67,137,193,157,157,137,101,241,233,223,191,61,127,83,151,229,233,149,23,29,61,139,251,199,227,103,167,7,241,113,167,83,181,41,137,229,43,167,23,41,233,79,197,101,109,107,239,13,137,73,47,179,67,83,101,29,73,163,19,137,89,239,107,239,101,29,11,89,19,227,79,157,179,41,67,43,7,29,149,89,89,71,251,229,233,97,71,47,53,127,23,127,239,127,149,149,113,211,163,11,113,163,173,11,59,181,251,163,191,79,131,29,173,233,47,113,101,163,229,7,53,61,13,181,233,229,71,59,157,239,53,163,191,179,223,83,211,151,83,73,113,7,53,97,113,47,67,47,17,223,23,151,251,149,59,127,107,211,37,191,173,199,197,197,181,139,239,47,211,7,107,37,73,149,37,73,109,113,199,167,188,201,173,145,223,133,229,212,120,213,23,70,124,41,76,77,3,233,37,104,17,134,179,189,247,111,97,34,162,38,52,42,190,30,70,20,104,157,68,24,194,64,244,126,95,27,173,11,148,182,103,180,11,225,234,149,156,102,220,231,93,108,5,218,213,223,122,239,246,219,31,130,76,192,104,71,161,189,238,57,80,86,74,221,223,165,248,198,218,202,144,202,1,66,157,139,12,115,67,117,5,148,222,36,179,128,52,229,44,220,155,63,202,51,69,208,219,95,245,82,195,33,218,226,34,114,107,62,208,91,168,135,140,6,93,15,221,9,25,147,208,185,252,139,15,132,96,51,28,155,69,241,240,163,148,58,18,119,51,77,68,120,40,60,158,253,101,87,22,148,107,251,89,208,200,34,54,219,210,99,152,67,161,4,135,134,247,166,38,187,214,89,77,191,106,46,170,43,239,230,120,182,78,224,47,220,124,190,87,25,50,126,42,208,184,186,41,0,60,82,125,168,73,59,45,235,37,73,250,163,170,57,167,197,167,80,17,54,251,198,103,74,245,165,18,101,126,176,223,175,78,179,97,127,47], "i8", ALLOC_NONE, 5246004);
allocate([37,250,0,0,40,250,0,0,39,250,0,0,41,250,0,0,255,255,255,255,255,255,255,255,42,250,0,0], "i8", ALLOC_NONE, 5246516);
allocate(4, "i8", ALLOC_NONE, 5246544);
allocate(16384, "i8", ALLOC_NONE, 5246548);
allocate(4, "i8", ALLOC_NONE, 5262932);
allocate([1,0,0,0], "i8", ALLOC_NONE, 5262936);
allocate(4, "i8", ALLOC_NONE, 5262940);
allocate(4, "i8", ALLOC_NONE, 5262944);
allocate(4, "i8", ALLOC_NONE, 5262948);
allocate(4, "i8", ALLOC_NONE, 5262952);
allocate(4, "i8", ALLOC_NONE, 5262956);
allocate([0,1,5,1,1,1,1,1,1,2,0,0,0,0,0,0,5,4,3,6,2,7,1,0,8,9,11,10,12,0,0,0,0,1,5,1,1,1,1,1,1,2,0,0,0,0,0,0,57,90,56,39,22,5,4,3,2,1,0,11,12,12,0,0,0,1,4,2,3,1,2,0,0,0,0,0,0,0,0,0,5,4,6,3,7,2,8,1,9,0,10,11,12,0,0,0,0,1,4,3,1,1,1,1,1,2,0,0,0,0,0,0,5,6,4,7,8,3,9,2,1,0,10,11,12,13,14,0,0,1,5,1,1,1,1,1,1,1,2,0,0,0,0,0,8,92,75,58,41,7,6,5,4,3,2,1,0,13,14,0,0,1,4,2,2,3,1,2,0,0,0,0,0,0,0,0,7,6,8,5,9,4,10,3,11,12,2,0,1,13,14,0], "i8", ALLOC_NONE, 5262960);
allocate([0,85,170,255] /* \00U\AA\FF */, "i8", ALLOC_NONE, 5263152);
allocate([0,0,0,0,80,69,78,84,65,88,0,0,0,0,0,0,79,112,116,105,111,32,51,51,87,82,0,0,0,0,0,0,3,0,0,0,78,73,75,79,78,0,0,0,0,0,0,0,69,51,50,48,48,0,0,0,0,0,0,0,0,0,0,0,50,0,0,0,78,73,75,79,78,0,0,0,0,0,0,0,69,51,55,48,48,0,0,0,0,0,0,0,0,0,0,0,51,0,0,0,79,76,89,77,80,85,83,0,0,0,0,0,67,55,52,48,85,90,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 5263156);
allocate(24, "i8", ALLOC_NONE, 5263284);
allocate(64, "i8", ALLOC_NONE, 5263308);
allocate(64, "i8", ALLOC_NONE, 5263372);
allocate(4, "i8", ALLOC_NONE, 5263436);
allocate(4, "i8", ALLOC_NONE, 5263440);
allocate(4, "i8", ALLOC_NONE, 5263444);
allocate(4, "i8", ALLOC_NONE, 5263448);
allocate([1,2,4,5,7,8,0,1,3,4,6,7,1,2,4,5,7,8,0,3,5,8,4,7,3,6,1,4,2,5,4,7,4,2,6,4,4,2] /* \01\02\04\05\07\08\0 */, "i8", ALLOC_NONE, 5263452);
allocate(4, "i8", ALLOC_NONE, 5263492);
allocate(4, "i8", ALLOC_NONE, 5263496);
allocate(128, "i8", ALLOC_NONE, 5263500);
allocate(64, "i8", ALLOC_NONE, 5263628);
allocate(4, "i8", ALLOC_NONE, 5263692);
allocate(4, "i8", ALLOC_NONE, 5263696);
allocate(4, "i8", ALLOC_NONE, 5263700);
allocate([48,49,50,0,49,48,50,0], "i8", ALLOC_NONE, 5263704);
allocate([1,1,2,3,3,4,4,2,5,7,6,5,7,6,7,8,1,0,2,1,3,3,4,4,5,2,6,7,7,6,8,5,8,8,2,1,2,3,3,0,3,2,3,4,4,6,5,5,6,7,6,8,2,0,2,1,2,3,3,2,4,4,5,6,6,7,7,5,7,8,2,1,2,4,3,0,3,2,3,3,4,7,5,5,6,6,6,8,2,3,3,1,3,2,3,4,3,5,3,6,4,7,5,0,5,8,2,3,2,6,3,0,3,1,4,4,4,5,4,7,5,2,5,8,2,4,2,7,3,3,3,6,4,1,4,2,4,5,5,0,5,8,2,6,3,1,3,3,3,5,3,7,3,8,4,0,5,2,5,4,2,0,2,1,3,2,3,3,4,4,4,5,5,6,5,7,4,8,1,0,2,2,2,254,1,253,1,3,2,239,2,251,2,5,2,17,2,249,2,2,2,9,2,18,2,238,2,247,2,254,2,7,2,228,2,28,3,207,3,247,3,9,4,49,5,177,5,79,2,255,2,13,2,26,3,39,4,240,5,55,6,219,6,76,2,230,2,243,2,1,3,217,4,16,5,201,6,180,6,37] /* \01\01\02\03\03\04\0 */, "i8", ALLOC_NONE, 5263712);
allocate([0,0,0,0,0,5,64,5,16,9,32,14,0,13,64,31,255,15,255,63,255,255,255,63], "i8", ALLOC_NONE, 5263972);
allocate([16,0,16,0,16,0], "i8", ALLOC_NONE, 5263996);
allocate([162,0,0,0,192,0,0,0,187,0,0,0,92,0,0,0], "i8", ALLOC_NONE, 5264004);
allocate([0,0,0,0,124,2,0,0,168,1,0,0,212,0,0,0], "i8", ALLOC_NONE, 5264020);
allocate(4, "i8", ALLOC_NONE, 5264036);
allocate([0,1,5,1,1,2,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,0,3,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9], "i8", ALLOC_NONE, 5264040);
allocate(4, "i8", ALLOC_NONE, 5264092);
allocate(4, "i8", ALLOC_NONE, 5264096);
allocate(4, "i8", ALLOC_NONE, 5264100);
allocate(4, "i8", ALLOC_NONE, 5264104);
allocate(4, "i8", ALLOC_NONE, 5264108);
allocate(4, "i8", ALLOC_NONE, 5264112);
allocate(4, "i8", ALLOC_NONE, 5264116);
allocate(4, "i8", ALLOC_NONE, 5264120);
allocate([0,244,0,0,75,111,100,97,107,0,0,0,0,0,0,0,68,67,50,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,1,0,75,111,100,97,107,0,0,0,0,0,0,0,68,67,50,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,25,0,75,111,100,97,107,0,0,0,0,0,0,0,68,67,83,50,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,119,63,0,75,111,100,97,107,0,0,0,0,0,0,0,67,51,51,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,158,131,63,0,75,111,100,97,107,0,0,0,0,0,0,0,67,51,51,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,7,0,75,111,100,97,107,0,0,0,0,0,0,0,67,54,48,51,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,9,0,75,111,100,97,107,0,0,0,0,0,0,0,67,54,48,51,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,11,94,0,75,111,100,97,107,0,0,0,0,0,0,0,67,54,48,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,23,94,0,75,111,100,97,107,0,0,0,0,0,0,0,67,54,48,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,27,139,0,75,111,100,97,107,0,0,0,0,0,0,0,67,54,48,51,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,193,4,0,83,84,32,77,105,99,114,111,0,0,0,0,83,84,86,54,56,48,32,86,71,65,0,0,0,0,0,0,0,0,0,0,0,4,12,0,67,114,101,97,116,105,118,101,0,0,0,0,80,67,45,67,65,77,32,54,48,48,0,0,0,0,0,0,0,0,0,0,0,96,17,0,77,105,110,111,108,116,97,0,0,0,0,0,82,68,49,55,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,58,0,70,111,99,117,108,117,115,0,0,0,0,0,53,51,49,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,4,0,71,101,110,101,114,105,99,0,0,0,0,0,54,52,48,120,52,56,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,65,86,84,0,0,0,0,0,0,0,0,0,70,45,48,56,48,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,22,0,65,86,84,0,0,0,0,0,0,0,0,0,70,45,49,52,53,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,29,0,65,86,84,0,0,0,0,0,0,0,0,0,70,45,50,48,49,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,82,77,0,65,86,84,0,0,0,0,0,0,0,0,0,70,45,53,49,48,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,82,77,0,65,86,84,0,0,0,0,0,0,0,0,0,70,45,53,49,48,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,164,154,0,65,86,84,0,0,0,0,0,0,0,0,0,70,45,53,49,48,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,92,164,154,0,65,86,84,0,0,0,0,0,0,0,0,0,70,45,53,49,48,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,137,246,0,65,86,84,0,0,0,0,0,0,0,0,0,70,45,56,49,48,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,21,0,83,111,110,121,0,0,0,0,0,0,0,0,88,67,68,45,83,88,57,49,48,67,82,0,0,0,0,0,0,0,0,0,0,0,43,0,83,111,110,121,0,0,0,0,0,0,0,0,88,67,68,45,83,88,57,49,48,67,82,0,0,0,0,0,0,0,0,0,128,71,59,0,77,105,99,114,111,110,0,0,0,0,0,0,50,48,49,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,101,0,80,105,120,101,108,105,110,107,0,0,0,0,65,55,56,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,202,0,80,105,120,101,108,105,110,107,0,0,0,0,65,55,56,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,0,82,111,118,101,114,83,104,111,116,0,0,0,51,51,50,48,65,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,255,99,0,67,97,110,111,110,0,0,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,52,54,48,0,0,0,0,0,0,96,133,101,0,67,97,110,111,110,0,0,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,53,51,48,0,0,0,0,0,0,64,76,100,0,67,97,110,111,110,0,0,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,54,49,48,0,0,0,0,0,0,16,174,140,0,67,97,110,111,110,0,0,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,54,50,48,0,0,0,0,0,0,104,10,141,0,67,97,110,111,110,0,0,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,52,55,48,0,0,0,0,0,0,224,204,157,0,67,97,110,111,110,0,0,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,55,50,48,32,73,83,0,0,0,16,111,158,0,67,97,110,111,110,0,0,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,54,51,48,0,0,0,0,0,0,88,135,197,0,67,97,110,111,110,0,0,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,54,52,48,0,0,0,0,0,0,16,151,238,0,67,97,110,111,110,0,0,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,54,53,48,0,0,0,0,0,0,80,215,80,0,67,97,110,111,110,0,0,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,83,68,51,48,48,0,0,0,0,0,240,168,117,0,67,97,110,111,110,0,0,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,83,51,32,73,83,0,0,0,0,0,240,4,236,0,67,97,110,111,110,0,0,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,83,88,49,49,48,32,73,83,0,0,240,9,237,0,67,97,110,111,110,0,0,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,83,88,49,50,48,32,73,83,0,0,64,162,28,1,67,97,110,111,110,0,0,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,83,88,50,48,32,73,83,0,0,0,240,234,35,1,67,97,110,111,110,0,0,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,83,88,50,50,48,32,72,83,0,0,224,183,78,1,67,97,110,111,110,0,0,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,83,88,51,48,32,73,83,0,0,0,0,160,90,0,79,76,89,77,80,85,83,0,0,0,0,0,67,55,55,48,85,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,32,24,0,78,73,75,79,78,0,0,0,0,0,0,0,69,57,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,160,37,0,78,73,75,79,78,0,0,0,0,0,0,0,69,57,53,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,224,44,0,78,73,75,79,78,0,0,0,0,0,0,0,69,50,49,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,208,72,0,78,73,75,79,78,0,0,0,0,0,0,0,69,57,57,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,224,72,0,78,73,75,79,78,0,0,0,0,0,0,0,69,51,55,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,144,89,0,78,73,75,79,78,0,0,0,0,0,0,0,69,52,51,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,128,89,0,78,73,75,79,78,0,0,0,0,0,0,0,69,52,53,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,128,113,0,78,73,75,79,78,0,0,0,0,0,0,0,69,53,48,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,80,137,0,78,73,75,79,78,0,0,0,0,0,0,0,67,79,79,76,80,73,88,32,83,54,0,0,0,0,0,0,0,0,0,1,32,40,30,0,67,65,83,73,79,0,0,0,0,0,0,0,81,86,45,50,48,48,48,85,88,0,0,0,0,0,0,0,0,0,0,1,96,25,49,0,67,65,83,73,79,0,0,0,0,0,0,0,81,86,45,51,42,48,48,69,88,0,0,0,0,0,0,0,0,0,0,1,128,226,94,0,67,65,83,73,79,0,0,0,0,0,0,0,81,86,45,53,55,48,48,0,0,0,0,0,0,0,0,0,0,0,0,1,0,98,92,0,67,65,83,73,79,0,0,0,0,0,0,0,81,86,45,82,52,49,0,0,0,0,0,0,0,0,0,0,0,0,0,1,64,233,114,0,67,65,83,73,79,0,0,0,0,0,0,0,81,86,45,82,53,49,0,0,0,0,0,0,0,0,0,0,0,0,0,1,160,63,117,0,67,65,83,73,79,0,0,0,0,0,0,0,81,86,45,52,48,48,48,0,0,0,0,0,0,0,0,0,0,0,0,1,0,212,44,0,67,65,83,73,79,0,0,0,0,0,0,0,69,88,45,83,50,48,0,0,0,0,0,0,0,0,0,0,0,0,0,1,128,130,75,0,67,65,83,73,79,0,0,0,0,0,0,0,69,88,45,83,49,48,48,0,0,0,0,0,0,0,0,0,0,0,0,1,0,23,115,0,67,65,83,73,79,0,0,0,0,0,0,0,69,88,45,90,53,48,0,0,0,0,0,0,0,0,0,0,0,0,0,1,64,99,115,0,67,65,83,73,79,0,0,0,0,0,0,0,69,88,45,90,53,48,48,0,0,0,0,0,0,0,0,0,0,0,0,1,128,78,118,0,67,65,83,73,79,0,0,0,0,0,0,0,69,88,45,90,53,53,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,70,119,0,67,65,83,73,79,0,0,0,0,0,0,0,69,88,45,90,54,48,0,0,0,0,0,0,0,0,0,0,0,0,0,1,64,118,165,0,67,65,83,73,79,0,0,0,0,0,0,0,69,88,45,90,55,53,0,0,0,0,0,0,0,0,0,0,0,0,0,1,192,81,165,0,67,65,83,73,79,0,0,0,0,0,0,0,69,88,45,90,55,53,48,0,0,0,0,0,0,0,0,0,0,0,0,1,128,214,187,0,67,65,83,73,79,0,0,0,0,0,0,0,69,88,45,90,56,53,48,0,0,0,0,0,0,0,0,0,0,0,0,1,0,149,190,0,67,65,83,73,79,0,0,0,0,0,0,0,69,88,45,90,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,128,236,0,67,65,83,73,79,0,0,0,0,0,0,0,69,88,45,90,49,48,53,48,0,0,0,0,0,0,0,0,0,0,0,1,0,96,29,1,67,65,83,73,79,0,0,0,0,0,0,0,69,88,45,90,82,49,48,48,0,0,0,0,0,0,0,0,0,0,0,1,96,82,113,0,67,65,83,73,79,0,0,0,0,0,0,0,69,88,45,80,53,48,53,0,0,0,0,0,0,0,0,0,0,0,0,1,0,29,142,0,67,65,83,73,79,0,0,0,0,0,0,0,69,88,45,80,54,48,48,0,0,0,0,0,0,0,0,0,0,0,0,1,128,135,167,0,67,65,83,73,79,0,0,0,0,0,0,0,69,88,45,80,55,48,48,0,0,0,0,0,0,0,0,0,0,0,0,1,64,128,48,0,80,69,78,84,65,88,0,0,0,0,0,0,79,112,116,105,111,32,83,0,0,0,0,0,0,0,0,0,0,0,0,1,0,226,73,0,80,69,78,84,65,88,0,0,0,0,0,0,79,112,116,105,111,32,83,0,0,0,0,0,0,0,0,0,0,0,0,1,192,75,93,0,80,69,78,84,65,88,0,0,0,0,0,0,79,112,116,105,111,32,83,52,0,0,0,0,0,0,0,0,0,0,0,1,0,80,163,0,80,69,78,84,65,88,0,0,0,0,0,0,79,112,116,105,111,32,55,53,48,90,0,0,0,0,0,0,0,0,0,1,0,216,243,0,65,71,70,65,80,72,79,84,79,0,0,0,68,67,45,56,51,51,109,0,0,0,0,0,0,0,0,0,0,0,0,1,0,163,245,0,83,65,77,83,85,78,71,0,0,0,0,0,83,56,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,110,247,0,83,65,77,83,85,78,71,0,0,0,0,0,83,56,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,156,56,1,83,65,77,83,85,78,71,0,0,0,0,0,87,66,53,53,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,54,110,1,83,65,77,83,85,78,71,0,0,0,0,0,87,66,53,53,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,68,0,192,0,83,105,110,97,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,2,252,1,83,105,110,97,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,88,165,2,83,105,110,97,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 5264124);
allocate([58,12,207,6,4,0,0,0,250,255,0,0,58,12,7,8,4,0,0,0,250,255,0,0,58,12,15,9,4,0,0,0,250,255,0,0,98,12,55,8,18,0,0,0,214,255,20,0,98,12,63,9,18,0,13,0,214,255,235,255,105,12,63,9,0,0,0,0,255,255,0,0,232,12,154,9,0,0,0,0,255,255,0,0,2,13,159,9,9,0,0,0,251,255,0,0,2,13,175,9,9,0,0,0,239,255,4,0,42,13,107,7,15,0,0,0,212,255,20,0,42,13,187,8,15,0,0,0,212,255,20,0,42,13,207,9,15,0,10,0,212,255,235,255,106,14,191,10,3,0,0,0,248,255,253,255,126,14,191,10,0,0,0,0,253,255,0,0,140,14,146,9,0,0,0,0,0,0,254,255,186,14,183,9,17,0,0,0,212,255,19,0,186,14,239,10,17,0,15,0,212,255,237,255,40,15,122,8,6,0,0,0,250,255,0,0,220,15,202,11,0,0,0,0,0,0,254,255,194,16,87,9,3,0,0,0,248,255,255,255,234,16,135,9,17,0,15,0,212,255,237,255,156,17,146,11,0,0,0,0,253,255,252,255,156,17,2,13,0,0,0,0,253,255,250,255], "i8", ALLOC_NONE, 5267292);
allocate(68, "i8", ALLOC_NONE, 5267568);
allocate(131072, "i8", ALLOC_NONE, 5267636);
allocate(4, "i8", ALLOC_NONE, 5398708);
allocate(4, "i8", ALLOC_NONE, 5398712);
allocate(4, "i8", ALLOC_NONE, 5398716);
allocate([255,255,255,255], "i8", ALLOC_NONE, 5398720);
allocate([255,255,255,255], "i8", ALLOC_NONE, 5398724);
allocate(4, "i8", ALLOC_NONE, 5398728);
allocate(4, "i8", ALLOC_NONE, 5398732);
allocate(128, "i8", ALLOC_NONE, 5398736);
allocate(4, "i8", ALLOC_NONE, 5398864);
allocate(4, "i8", ALLOC_NONE, 5398868);
allocate(4, "i8", ALLOC_NONE, 5398872);
allocate(8, "i8", ALLOC_NONE, 5398876);
allocate([0,0,0,0,0,0,18,64], "i8", ALLOC_NONE, 5398884);
allocate([205,204,204,204,204,204,220,63], "i8", ALLOC_NONE, 5398892);
allocate(4, "i8", ALLOC_NONE, 5398900);
allocate(4, "i8", ALLOC_NONE, 5398904);
allocate(4, "i8", ALLOC_NONE, 5398908);
allocate([255,255,255,255,255,255,0,0,255,255,1,0,0,0,255,255,0,0,1,0,1,0,255,255,1,0,0,0,1,0,1,0], "i8", ALLOC_NONE, 5398912);
allocate(4096, "i8", ALLOC_NONE, 5398944);
allocate(4, "i8", ALLOC_NONE, 5403040);
allocate(4, "i8", ALLOC_NONE, 5403044);
allocate(4, "i8", ALLOC_NONE, 5403048);
allocate(4, "i8", ALLOC_NONE, 5403052);
allocate(24576, "i8", ALLOC_NONE, 5403056);
allocate(4, "i8", ALLOC_NONE, 5427632);
allocate([1,1,0,1,1,2,1,1,2,1,1,0,2,0,1,0,2,1,1,1,2,1,1,0,1,1,0,1,1,2,0,2,1,2,0,1], "i8", ALLOC_NONE, 5427636);
allocate([2,1,1,3,2,3,2,0,3,2,3,0,1,2,1,0,0,3,0,2,0,1,3,1,0,1,1,2,0,3,3,2,2,3,3,2,3,1,1,3,3,1,2,1,2,0,0,3,0,1,0,1,0,2,0,2,2,0,3,0,1,3,2,1,3,1,1,2,0,1,0,2,1,3,1,3,0,1,3,0,2,0,0,3,3,2,3,1,2,0,2,0,3,2,2,1,2,3,3,1,2,1,2,1,2,1,1,2,3,0,0,1,1,0,0,2,3,0,0,3,0,3,0,3,2,1,2,3,2,3,3,1,1,2,1,0,3,2,3,0,2,3,1,3,1,0,2,0,3,0,3,2,0,1,1,2,0,1,0,2,0,1,1,3,3,2,2,1,1,3,3,0,2,1,3,2,2,3,2,0,0,1,3,0,2,0,1,2,3,0,1,0,1,3,1,2,3,2,3,2,0,2,0,1,1,0,3,0,0,2,0,3,1,0,0,1,1,3,3,2,3,2,2,1,2,1,3,2,3,1,2,1,0,3,0,2,0,2,0,2,0,3,1,0,0,2,0,3,2,1,3,1,1,3,1,3], "i8", ALLOC_NONE, 5427672);
allocate(40, "i8", ALLOC_NONE, 5427928);
allocate(4, "i8", ALLOC_NONE, 5427968);
allocate(4, "i8", ALLOC_NONE, 5427972);
allocate(4, "i8", ALLOC_NONE, 5427976);
allocate(512, "i8", ALLOC_NONE, 5427980);
allocate(4, "i8", ALLOC_NONE, 5428492);
allocate(4, "i8", ALLOC_NONE, 5428496);
allocate(131072, "i8", ALLOC_NONE, 5428500);
allocate([0,2,2,2,1,4,2,1,2,5,1,1,0,0,0,139,3,4,2,5,1,6,7,8,18,19,17,20,9,21,34,0,33,22,10,240,35,23,36,49,50,24,25,51,37,65,52,66,53,81,54,55,56,41,121,38,26,57,86,87,40,39,82,85,88,67,118,89,119,84,97,249,113,120,117,150,151,73,183,83,215,116,182,152,71,72,149,105,153,145,250,184,104,181,185,214,247,216,103,70,69,148,137,248,129,213,246,180,136,177,42,68,114,217,135,102,212,245,58,167,115,169,168,134,98,199,101,200,201,161,244,209,233,90,146,133,166,231,147,232,193,198,122,100,225,74,106,230,179,241,211,165,138,178,154,186,132,164,99,229,197,243,210,196,130,170,218,228,242,202,131,163,162,195,234,194,226,227,255,255,0,2,2,1,4,1,4,1,3,3,1,0,0,0,0,140,2,3,1,4,5,18,17,6,19,7,8,20,34,9,33,0,35,21,49,50,10,22,240,36,51,65,66,25,23,37,24,81,52,67,82,41,53,97,57,113,98,54,83,38,56,26,55,129,39,145,121,85,69,40,114,89,161,177,68,105,84,88,209,250,87,225,241,185,73,71,99,106,249,86,70,168,42,74,120,153,58,117,116,134,101,193,118,182,150,214,137,133,201,245,149,180,199,247,138,151,184,115,183,216,217,135,167,122,72,130,132,234,244,166,197,90,148,164,198,146,195,104,181,200,228,229,230,233,162,163,227,194,102,103,147,170,212,213,231,248,136,154,215,119,196,100,226,152,165,202,218,232,243,246,169,178,179,242,210,131,186,211,255,255,0,0,6,2,1,3,3,2,5,1,2,2,8,10,0,117,4,5,3,6,2,7,1,8,9,18,19,20,17,21,10,22,23,240,0,34,33,24,35,25,36,50,49,37,51,56,55,52,53,54,57,121,87,88,89,40,86,120,39,65,41,119,38,66,118,153,26,85,152,151,249,72,84,150,137,71,183,73,250,117,104,182,103,105,185,184,216,82,215,136,181,116,81,70,217,248,58,214,135,69,122,149,213,246,134,180,169,148,83,42,168,67,245,247,212,102,167,90,68,138,201,232,200,231,154,106,115,74,97,199,244,198,101,233,114,230,113,145,147,166,218,146,133,98,243,197,178,164,132,186,100,165,179,210,129,229,211,170,196,202,242,177,228,209,131,99,234,195,226,130,241,163,194,161,193,227,162,225,255,255], "i8", ALLOC_NONE, 5559572);
allocate([0,1,4,2,3,1,2,0,0,0,0,0,0,0,0,0,4,3,5,6,2,7,1,8,9,0,10,11,255,0,2,2,3,1,1,1,1,2,0,0,0,0,0,0,0,3,2,4,1,5,0,6,7,9,8,10,11,255,0,0,6,3,1,1,2,0,0,0,0,0,0,0,0,0,6,5,7,4,8,3,9,2,0,10,1,11,255], "i8", ALLOC_NONE, 5560112);
allocate(6, "i8", ALLOC_NONE, 5560200);
allocate([64,220,213,171,200,232,219,63,99,183,207,42,51,165,216,63,114,191,67,81,160,79,194,63,248,198,16,0,28,123,204,63,152,162,92,26,191,240,230,63,225,126,192,3,3,8,175,63,129,91,119,243,84,135,140,63,145,42,138,87,89,219,184,63,1,252,83,170,68,217,230,63], "i8", ALLOC_NONE, 5560208);
allocate([27,217,149,150,145,250,226,63,102,78,151,197,196,230,217,63,161,246,91,59,81,18,98,63,210,253,156,130,252,108,184,63,157,246,148,156,19,251,234,63,253,219,101,191,238,116,175,63,68,20,147,55,192,204,135,63,239,171,114,161,242,175,177,63,49,94,243,170,206,106,237,63], "i8", ALLOC_NONE, 5560280);
allocate([0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63], "i8", ALLOC_NONE, 5560352);
allocate([81,243,0,0,0,0,1,0,204,22,1,0], "i8", ALLOC_NONE, 5560424);
allocate([74,240,134,52,42,240,224,63,119,245,42,50,58,32,213,63,218,226,26,159,201,254,193,63,207,17,249,46,165,46,185,63,165,107,38,223,108,243,235,63,224,73,11,151,85,216,156,63,167,236,244,131,186,72,145,63,235,1,243,144,41,31,190,63,71,4,227,224,210,177,235,63], "i8", ALLOC_NONE, 5560436);
allocate([0,4,0,0,0,0,0,0,0,0,16,2,114,116,110,109,32,66,71,82,32,90,89,88,0,0,0,0,0,0,0,0,0,0,0,0,112,115,99,97,0,0,0,0,0,0,0,0,101,110,111,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,214,246,0,0,0,0,1,0,45,211,0,0], "i8", ALLOC_NONE, 5560508);
allocate([118,114,117,99,0,0,0,0,1,0,0,0,0,0,0,1], "i8", ALLOC_NONE, 5560588);
allocate([10,0,0,0,116,114,112,99,0,0,0,0,36,0,0,0,99,115,101,100,0,0,0,0,40,0,0,0,116,112,116,119,0,0,0,0,20,0,0,0,116,112,107,98,0,0,0,0,20,0,0,0,67,82,84,114,0,0,0,0,14,0,0,0,67,82,84,103,0,0,0,0,14,0,0,0,67,82,84,98,0,0,0,0,14,0,0,0,90,89,88,114,0,0,0,0,20,0,0,0,90,89,88,103,0,0,0,0,20,0,0,0,90,89,88,98,0,0,0,0,20,0,0,0], "i8", ALLOC_NONE, 5560604);
allocate(20, "i8", ALLOC_NONE, 5560728);
allocate(20, "i8", ALLOC_NONE, 5560748);
allocate([217,175,59,221,121,226,230,63,168,112,4,169,20,59,210,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,187,13,106,191,181,19,165,63,150,35,100,32,207,174,238,63], "i8", ALLOC_NONE, 5560768);
allocate(4, "i8", ALLOC_NONE, 5560840);
allocate(48, "i8", ALLOC_NONE, 5560844);
allocate([16,4,243,69], "i8", ALLOC_NONE, 5560892);
allocate(5, "i8", ALLOC_NONE, 5560896);
allocate(16, "i8", ALLOC_NONE, 5560904);
allocate(4, "i8", ALLOC_NONE, 5560920);
allocate([155,2,102,1,141,1,53,2,196,1,219,2,134,1,111,1,243,1,5,2,95,4,140,1,92,1,192,1,25,2,119,5,229,1,175,1,252,1,176,2], "i8", ALLOC_NONE, 5560924);
allocate([117,4,121,4,104,4,85,4,154,4,125,4,104,4,85,4], "i8", ALLOC_NONE, 5560964);
allocate([66,255,190,2,170,248,86,9,69,7,187,250,137,3,119,254,80,254,176,3,57,10,199,247,77,251,179,6,144,251,112,6,108,5,148,252,11,1,245,0,151,249,105,8,81,15,175,242,153,253,103,4,229,249,27,8,157,5,99,252,253,1,3,0,12,253,244,4,215,9,41,248,66,255,190,2,162,248,94,9,105,8,151,249,251,2,5,255,60,254,196,3,224,11,32,246,66,255,190,2,170,248,86,9,69,7,187,250,137,3,119,254,80,254,176,3,57,10,199,247,217,252,39,5,7,249,249,8,108,5,148,252,1,3,255,254,26,255,230,2,19,8,237,249], "i8", ALLOC_NONE, 5560980);
allocate(16, "i8", ALLOC_NONE, 5561124);
allocate([0,0,128,63], "i8", ALLOC_NONE, 5561140);
allocate([0,0,128,63,0,0,128,63,0,0,128,63,0,0,0,0,215,179,221,63,215,179,221,191,0,0,0,0,0,0,0,0,0,0,128,191,0,0,128,191,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,191,0,0,128,63,0,0,128,191,0,0,128,63,0,0,128,63,0,0,128,191,0,0,128,191,0,0,128,63,0,0,128,191,0,0,128,191,0,0,128,63], "i8", ALLOC_NONE, 5561144);
allocate([0,0,128,63,215,179,93,63,0,0,0,191,0,0,0,0,0,0,128,63,215,179,93,191,0,0,0,191,0,0,0,0,0,0,128,63,0,0,0,0,0,0,128,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,191,0,0,128,63,0,0,128,191,0,0,128,63,0,0,128,63,0,0,128,191,0,0,128,191,0,0,128,63,0,0,128,191,0,0,128,191,0,0,128,63], "i8", ALLOC_NONE, 5561272);
allocate(4, "i8", ALLOC_NONE, 5561400);
allocate(64, "i8", ALLOC_NONE, 5561404);
allocate(4, "i8", ALLOC_NONE, 5561468);
allocate([0,0,0,0,0,0,0,0,174,44,78,241,165,251,151,246,186,38,193,9,53,251,247,8,180,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,83,235,233,231,242,102,9,74,31,97,254,254,27,147,5,30,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,222,95,148,213,183,242,46,250,106,44,215,254,42,11,163,253,153,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,80,252,227,203,243,247,251,170,40,227,254,238,9,226,0,64,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,38,127,245,224,250,85,233,8,51,252,11,122,246,3,12,71,34,0,0,0,0,0,0,0,0,0,0,0,0,160,15,44,24,195,250,134,252,0,228,153,56,121,11,176,245,156,12,35,33,0,0,0,0,0,0,0,0,0,0,0,0,128,60,66,26,133,253,61,252,65,239,172,48,236,7,116,252,114,8,36,22,0,0,0,0,0,0,0,0,0,0,0,0,240,60,108,18,91,2,194,252,138,225,114,60,176,9,40,250,145,7,251,25,0,0,0,0,0,0,0,0,0,0,0,0,108,14,203,24,33,254,52,252,151,223,82,62,176,9,80,248,83,8,225,29,0,0,0,0,0,0,0,0,0,0,0,0,130,60,122,27,220,252,10,252,188,238,20,49,10,8,173,252,202,7,126,22,0,0,0,0,0,0,0,0,0,0,0,0,16,53,188,26,28,252,168,252,220,240,241,45,92,9,175,253,236,6,54,24,0,0,0,0,0,0,0,0,0,0,0,0,160,15,5,32,48,248,162,251,198,229,255,55,32,10,24,246,106,12,74,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,55,55,236,154,250,106,230,41,57,247,7,169,249,32,7,161,25,0,0,0,0,0,0,0,0,0,0,0,0,255,15,199,25,231,253,133,252,121,224,167,61,120,9,65,248,186,8,38,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,113,24,209,254,24,252,56,225,5,61,92,9,78,249,112,7,134,27,0,0,0,0,0,0,0,0,0,0,0,0,96,63,183,23,21,253,168,252,27,226,5,60,137,9,23,248,249,9,147,28,0,0,0,0,0,0,0,0,0,0,0,0,147,61,56,19,104,2,175,253,163,230,140,54,224,10,18,249,106,12,93,27,0,0,0,0,0,0,0,0,0,0,0,0,247,47,63,26,30,252,99,252,200,238,138,48,163,8,137,252,81,8,163,23,0,0,0,0,0,0,0,0,0,0,0,0,160,15,5,32,48,248,162,251,198,229,255,55,32,10,24,246,106,12,74,32,0,0,0,0,0,0,0,0,0,0,0,0,255,15,130,23,151,253,59,252,59,222,9,62,159,11,6,250,183,6,218,29,0,0,0,0,0,0,0,0,0,0,0,0,142,14,142,27,35,250,34,252,36,224,184,60,252,10,2,251,134,5,116,30,0,0,0,0,0,0,0,0,0,0,0,0,13,57,152,22,250,254,203,252,141,226,216,58,112,10,66,248,121,10,3,29,0,0,0,0,0,0,0,0,0,0,0,0,121,52,155,18,200,2,122,253,91,229,63,56,80,10,127,248,204,12,161,25,0,0,0,0,0,0,0,0,0,0,0,0,215,61,29,27,116,251,167,252,15,241,77,45,230,9,96,254,4,6,151,23,0,0,0,0,0,0,0,0,0,0,0,0,16,53,61,25,117,252,142,252,52,239,152,47,74,9,205,252,152,7,43,23,0,0,0,0,0,0,0,0,0,0,0,0,77,53,202,25,183,252,85,252,136,238,170,48,199,8,49,252,247,7,4,24,0,0,0,0,0,0,0,0,0,0,0,0,67,14,115,26,141,251,47,252,118,225,19,59,112,11,36,251,157,5,109,29,0,0,0,0,0,0,0,0,0,0,0,0,16,53,44,25,120,252,131,252,45,238,20,48,231,9,121,252,224,7,72,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,202,25,183,252,85,252,136,238,170,48,199,8,49,252,247,7,4,24,0,0,0,0,0,0,0,0,0,0,0,0,176,59,227,22,45,255,94,252,193,223,145,62,49,9,60,249,95,7,24,29,0,0,0,0,0,0,0,0,0,0,0,0,128,14,117,25,166,253,157,252,12,224,54,62,74,9,174,249,235,6,209,29,0,0,0,0,0,0,0,0,0,0,0,0,176,59,126,23,36,255,229,252,243,239,238,46,57,9,207,253,32,7,155,22,0,0,0,0,0,0,0,0,0,0,0,0,176,59,147,24,228,253,48,252,98,223,17,63,7,9,78,249,66,7,158,28,0,0,0,0,0,0,0,0,0,0,0,0,128,14,96,24,46,254,202,252,12,224,209,61,196,9,247,248,146,7,106,31,0,0,0,0,0,0,0,0,0,0,0,0,128,14,120,24,186,253,44,253,136,223,76,62,200,9,48,249,127,7,216,33,0,0,0,0,0,0,0,0,0,0,0,0,32,14,22,17,47,14,49,249,160,226,108,59,168,9,180,244,48,14,225,31,0,0,0,0,0,0,0,0,0,0,0,0,78,60,191,26,154,253,10,252,195,237,193,49,91,8,83,251,184,9,190,26,0,0,0,0,0,0,0,0,0,0,0,0,32,14,150,26,77,255,4,252,95,224,31,64,151,6,61,243,140,16,10,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,32,48,248,162,251,198,229,255,55,32,10,24,246,106,12,74,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,235,118,38,240,6,108,13,172,2,99,15,92,234,151,38,56,24,132,250,167,43,217,0,0,0,0,0,0,0,0,0,63,237,3,37,160,7,110,11,75,6,254,15,117,235,180,39,59,23,238,249,131,42,35,2,0,0,0,0,0,0,0,0,85,43,190,240,252,251,73,236,204,48,63,11,21,252,214,6,185,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,145,47,47,237,211,251,180,249,136,38,1,8,158,255,82,3,119,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,188,51,131,234,32,251,28,250,130,38,143,7,242,254,59,4,14,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,29,3,247,201,253,40,240,192,44,159,11,34,255,204,2,85,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,210,28,25,251,237,251,8,240,219,47,0,8,148,252,154,7,173,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,237,251,36,124,8,135,18,139,251,248,16,230,235,180,38,189,23,226,249,43,43,45,2,0,0,0,0,0,0,0,0,127,35,123,245,231,251,197,229,46,56,233,9,13,247,3,11,110,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,35,35,245,207,251,83,230,109,55,45,10,4,247,28,11,240,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,38,200,244,91,252,172,232,37,54,253,8,170,249,24,9,44,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,149,38,65,241,153,252,67,226,215,57,0,12,88,250,25,5,61,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,28,163,247,170,253,11,234,198,51,65,10,118,250,160,6,111,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,39,62,242,25,252,37,226,13,59,170,10,3,253,49,3,155,28,0,0,0,0,0,0,0,0,0,0,34,0,0,0,197,239,90,38,249,5,99,15,231,255,170,17,111,234,142,38,210,25,66,247,121,42,62,5,0,0,0,0,0,0,0,0,157,236,168,38,187,8,34,18,37,252,198,16,214,235,27,39,227,22,22,249,222,43,65,2,0,0,0,0,0,0,0,0,70,41,188,241,151,251,104,230,70,57,214,7,107,247,21,10,246,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,33,73,246,84,252,43,229,151,55,84,11,242,246,13,11,53,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,227,31,227,246,69,252,230,229,94,55,191,10,227,247,37,10,105,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,178,34,245,245,161,252,52,231,154,55,240,8,20,250,124,8,169,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,91,34,78,246,227,252,132,225,43,60,13,10,114,250,204,7,170,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,38,30,241,192,252,53,228,127,56,90,11,123,252,221,3,209,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,48,104,236,231,251,115,249,174,38,30,8,173,255,84,3,75,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,52,248,232,1,251,44,251,126,37,139,7,76,255,233,3,43,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,31,251,245,132,253,199,244,201,41,209,9,180,0,155,2,115,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,31,173,245,114,253,57,241,222,43,114,11,50,255,178,2,98,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,178,25,253,254,10,254,170,232,230,50,237,12,204,254,34,4,106,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,48,111,237,33,251,194,247,195,41,93,6,100,254,87,6,62,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,225,48,201,238,38,251,136,245,36,40,101,9,146,252,167,8,126,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,60,254,230,200,249,11,235,142,51,120,8,236,250,32,7,211,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,161,59,207,231,234,249,227,239,84,47,218,7,136,252,103,6,100,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,121,55,68,235,35,249,57,232,136,56,81,6,113,247,33,12,228,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,51,47,235,146,250,238,241,138,45,152,7,180,249,47,11,21,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,211,36,36,244,65,252,235,245,175,41,119,7,241,251,190,7,78,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,237,56,150,234,246,249,14,251,71,38,188,5,240,251,120,7,226,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,238,54,177,235,90,250,152,237,182,48,195,8,250,250,236,7,228,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,55,56,234,9,250,57,248,223,41,249,4,122,251,137,7,253,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,54,44,236,89,250,131,250,125,39,17,5,12,255,68,7,103,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,45,172,240,152,251,152,236,154,50,223,7,204,249,88,10,38,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,42,223,240,181,251,217,236,162,53,151,4,37,249,167,14,24,18,0,0,0,0,0,0,0,0,0,0,128,0,255,15,62,38,246,242,165,253,239,246,238,39,51,8,168,254,249,4,191,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,13,224,1,12,254,224,252,26,14,84,1,218,253,32,9,168,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,13,224,1,12,254,224,252,26,14,84,1,218,253,32,9,168,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,215,78,57,239,89,254,156,240,226,59,145,15,232,254,6,19,72,38,0,0,0,0,0,0,0,0,0,0,0,0,30,15,97,30,5,5,227,251,192,219,159,64,100,11,163,241,47,22,148,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,26,170,248,36,253,19,223,140,62,4,10,64,253,80,2,233,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,43,208,240,160,251,176,227,64,59,160,8,5,250,229,8,133,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,223,35,34,246,202,251,219,226,223,58,14,10,26,248,136,9,191,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,53,18,235,62,250,215,242,80,45,206,7,124,255,18,6,43,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,53,18,235,62,250,215,242,80,45,206,7,124,255,18,6,43,17,0,0,0,0,0,0,0,0,0,0,0,0,233,15,122,53,18,235,62,250,215,242,80,45,206,7,124,255,18,6,43,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,39,109,243,79,251,132,228,199,58,59,8,185,248,5,10,56,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,53,18,235,62,250,215,242,80,45,206,7,124,255,18,6,43,17,0,0,0,0,0,0,0,0,0,0,2,2,0,0,1,45,253,238,215,251,132,230,199,53,242,11,70,250,192,7,157,23,0,0,0,0,0,0,0,0,0,0,0,2,255,63,137,44,110,238,224,250,32,236,207,49,53,10,186,252,32,6,53,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,39,109,243,79,251,132,228,199,58,59,8,185,248,5,10,56,30,0,0,0,0,0,0,0,0,0,0,128,0,0,0,204,48,174,237,134,250,135,228,63,60,111,6,29,250,63,8,17,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,46,252,237,242,250,33,221,72,66,196,7,184,247,181,10,70,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,48,10,236,232,250,99,220,247,66,206,7,101,248,144,9,164,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,34,84,245,5,252,220,227,221,58,228,8,90,249,30,9,70,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,46,177,238,25,251,146,229,92,56,238,9,31,252,141,4,253,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,46,177,238,25,251,146,229,92,56,238,9,31,252,141,4,253,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,37,12,245,36,252,238,226,192,58,29,10,245,248,7,9,173,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,37,12,245,36,252,238,226,192,58,29,10,245,248,7,9,173,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,49,233,236,135,250,51,229,148,58,170,7,106,247,222,10,179,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,206,39,78,242,224,250,15,228,203,58,190,8,45,248,95,9,81,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,40,161,242,135,251,39,227,179,58,234,9,239,248,227,8,244,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,40,161,242,135,251,39,227,179,58,234,9,239,248,227,8,244,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,48,93,238,251,250,3,228,51,58,131,9,153,248,192,9,96,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,48,93,238,251,250,3,228,51,58,131,9,153,248,192,9,96,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,83,201,213,95,250,228,246,103,41,207,7,33,1,107,3,23,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,48,10,236,232,250,99,220,247,66,206,7,101,248,144,9,164,31,0,0,0,0,0,0,0,0,0,0,0,0,104,15,152,48,142,240,97,251,157,251,202,37,172,6,173,255,78,6,246,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,53,18,235,62,250,215,242,80,45,206,7,124,255,18,6,43,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,53,18,235,62,250,215,242,80,45,206,7,124,255,18,6,43,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,129,47,151,238,211,251,86,236,74,50,96,9,229,252,188,6,248,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,197,52,201,231,26,251,178,238,189,49,73,7,181,254,161,5,158,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,173,40,100,240,31,252,119,241,120,45,57,9,35,253,4,6,123,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,173,40,100,240,31,252,119,241,120,45,57,9,35,253,4,6,123,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,197,52,201,231,26,251,178,238,189,49,73,7,181,254,161,5,158,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,197,52,201,231,26,251,178,238,189,49,73,7,181,254,161,5,158,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,113,27,121,250,64,253,188,235,197,53,144,5,32,251,182,10,150,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,54,89,232,221,252,47,254,191,38,130,2,73,8,82,0,11,5,0,0,0,0,0,0,0,0,0,0,8,0,0,0,115,68,37,237,50,246,244,2,98,33,119,255,225,23,113,6,202,8,0,0,0,0,0,0,0,0,0,0,8,0,0,0,140,80,108,226,15,245,153,255,89,39,116,254,223,13,23,255,172,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,42,196,248,124,253,255,249,75,43,228,1,39,9,116,2,168,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,41,98,247,57,252,104,248,165,45,230,0,158,8,158,2,249,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,41,98,247,57,252,104,248,165,45,230,0,158,8,158,2,249,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,38,116,245,84,252,82,246,187,47,206,0,193,7,122,2,7,4,0,0,0,0,0,0,0,0,0,0,178,0,0,0,222,95,148,213,183,242,46,250,106,44,215,254,42,11,163,253,153,12,0,0,0,0,0,0,0,0,0,0,177,0,0,0,2,80,252,227,203,243,247,251,170,40,227,254,238,9,226,0,64,12,0,0,0,0,0,0,0,0,0,0,177,0,0,0,65,92,65,216,179,243,250,247,229,45,240,254,26,10,23,254,125,13,0,0,0,0,0,0,0,0,0,0,176,0,0,0,39,51,169,231,154,0,189,47,235,255,167,247,127,3,250,17,210,8,0,0,0,0,0,0,0,0,0,0,173,0,0,0,68,71,49,231,77,245,233,252,185,43,247,253,127,14,127,255,242,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,45,4,233,182,3,84,37,54,7,250,250,5,252,77,24,168,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,239,64,91,231,125,250,8,239,99,54,67,1,237,8,18,1,110,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,118,21,89,9,24,255,229,230,26,54,30,11,172,248,157,15,69,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,118,21,89,9,24,255,229,230,26,54,30,11,172,248,157,15,69,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,111,30,56,12,248,252,116,222,74,64,247,7,105,246,166,15,54,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,64,84,232,66,250,29,242,237,50,217,1,241,9,122,0,84,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,187,82,132,223,154,244,109,252,11,43,91,255,149,13,76,255,114,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,186,37,14,243,201,252,213,235,151,49,208,10,194,250,51,7,156,23,0,0,0,0,0,0,0,0,0,0,0,0,124,15,15,41,4,241,178,251,222,228,251,56,254,9,55,250,0,7,102,24,0,0,0,0,0,0,0,0,0,0,0,0,255,15,5,50,202,237,160,250,200,226,163,59,56,9,166,249,146,8,224,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,44,25,242,179,251,203,240,115,46,209,8,66,251,94,9,44,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,185,49,147,237,92,251,169,250,227,35,22,10,18,1,92,3,59,17,0,0,0,0,0,0,0,0,0,0,0,0,237,15,229,45,48,240,227,250,181,248,76,41,209,5,118,255,169,5,170,17,0,0,0,0,0,0,0,0,0,0,0,0,241,14,1,44,66,239,32,252,170,237,55,48,87,10,190,251,243,5,71,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,15,141,8,193,1,211,229,249,56,227,8,72,238,181,28,136,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,15,141,8,193,1,211,229,249,56,227,8,72,238,181,28,136,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,32,210,6,222,250,197,223,81,62,124,9,167,241,154,22,139,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,234,30,134,5,90,251,183,221,198,64,232,8,5,245,253,17,186,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,234,30,134,5,90,251,183,221,198,64,232,8,5,245,253,17,186,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,32,210,6,222,250,197,223,81,62,124,9,167,241,154,22,139,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,221,29,19,10,173,250,15,222,77,65,223,7,128,241,53,23,73,23,0,0,0,0,0,0,0,0,0,0,110,0,0,0,55,65,79,241,153,247,155,0,210,37,163,0,105,13,183,3,40,19,0,0,0,0,0,0,0,0,0,0,0,0,125,15,23,35,130,244,61,252,100,230,140,56,189,8,134,246,71,11,78,31,0,0,0,0,0,0,0,0,0,0,0,0,125,15,104,44,202,240,38,251,135,230,22,56,35,9,85,246,240,11,117,28,0,0,0,0,0,0,0,0,0,0,0,0,125,15,184,35,39,245,26,252,236,229,220,56,233,8,90,246,203,11,64,30,0,0,0,0,0,0,0,0,0,0,0,0,139,15,58,36,13,246,113,251,228,223,195,63,151,7,31,247,160,10,148,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,33,73,246,38,252,80,224,175,60,211,10,71,251,44,5,63,30,0,0,0,0,0,0,0,0,0,0,0,0,143,15,137,35,90,245,227,251,119,224,146,60,202,10,58,252,213,3,83,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,44,20,242,166,250,209,237,86,48,234,8,113,250,120,8,20,21,0,0,0,0,0,0,0,0,0,0,0,0,251,15,44,40,45,243,194,251,235,224,146,61,12,9,195,252,114,3,244,25,0,0,0,0,0,0,0,0,0,0,0,0,251,15,255,39,224,243,181,251,155,224,111,61,147,9,97,252,157,3,215,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,194,34,35,252,247,251,36,243,99,45,138,6,107,253,106,12,96,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,23,91,252,242,252,233,220,79,65,50,9,134,250,175,5,64,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,153,29,138,247,98,252,226,226,232,60,142,7,183,246,248,10,158,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,30,59,247,49,252,102,220,90,67,83,7,137,245,239,11,73,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,65,138,237,163,247,69,226,97,61,180,7,226,244,166,13,49,37,0,0,0,0,0,0,0,0,0,0,0,0,188,15,175,32,56,247,5,253,202,221,63,64,118,9,9,250,14,6,117,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,22,123,252,153,253,110,222,233,64,232,7,97,244,24,16,174,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,247,39,47,245,25,251,147,223,28,62,248,9,227,252,168,2,236,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,34,102,246,89,252,141,220,254,65,203,8,182,250,218,4,71,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,30,137,247,211,252,49,235,94,51,104,9,248,250,179,9,32,31,0,0,0,0,0,0,0,0,0,0,0,0,185,15,101,27,128,250,133,253,108,235,102,50,80,10,66,250,241,10,211,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,35,56,248,53,253,239,222,174,63,207,8,127,245,145,12,133,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,28,62,248,120,253,107,224,195,60,158,10,134,247,208,9,33,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,34,154,246,74,253,246,236,59,49,237,9,108,253,229,5,163,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,203,31,133,247,105,253,213,221,157,64,247,8,123,248,216,7,157,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,34,17,246,113,252,191,220,32,66,103,8,207,250,189,4,1,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,27,124,249,218,252,54,224,132,61,239,9,150,252,82,3,217,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,150,33,224,244,167,252,14,234,38,53,147,8,22,252,237,6,225,27,0,0,0,0,0,0,0,0,0,0,0,0,0,15,141,28,133,250,249,253,230,222,136,62,62,10,127,246,10,11,128,31,0,0,0,0,0,0,0,0,0,0,0,0,230,61,6,32,65,247,44,253,249,236,101,48,238,10,237,251,2,8,13,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,30,138,246,235,252,210,223,12,62,194,9,165,252,15,3,162,28,0,0,0,0,0,0,0,0,0,0,0,0,7,62,242,31,59,247,159,253,7,237,106,48,216,10,73,251,38,8,130,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,34,102,246,89,252,141,220,254,65,203,8,182,250,218,4,71,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,32,65,247,44,253,249,236,101,48,238,10,237,251,2,8,13,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,203,31,133,247,105,253,213,221,157,64,247,8,123,248,216,7,157,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,30,138,246,235,252,210,223,12,62,194,9,165,252,15,3,162,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,186,30,196,247,213,253,251,236,195,48,121,10,104,251,21,8,77,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,181,33,150,246,141,252,161,220,44,66,123,8,46,250,83,5,72,33,0,0,0,0,0,0,0,0,0,0,0,0,0,15,141,28,133,250,249,253,230,222,136,62,62,10,126,246,10,11,128,31,0,0,0,0,0,0,0,0,0,0,0,0,221,3,94,241,115,41,129,6,149,37,58,249,66,8,171,246,170,27,248,11,78,13,228,23,12,255,0,0,0,0,0,0,0,0,85,234,242,45,141,8,182,22,210,253,14,13,196,236,112,38,61,23,176,2,123,35,96,0,0,0,0,0,0,0,0,0,86,51,200,239,196,249,209,237,86,48,234,8,23,249,136,10,55,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,234,242,45,141,8,182,22,210,253,14,13,196,236,112,38,61,23,176,2,123,35,96,0,0,0,0,0,0,0,0,0,118,38,219,247,5,252,50,243,101,43,122,8,250,252,86,8,113,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,44,20,242,166,250,209,237,86,48,234,8,113,250,120,8,20,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,234,242,45,141,8,182,22,210,253,14,13,196,236,112,38,61,23,176,2,123,35,96,0,0,0,0,0,0,0,0,0,85,234,242,45,141,8,182,22,210,253,14,13,196,236,112,38,61,23,176,2,123,35,96,0,0,0,0,0,0,0,0,0,133,36,85,244,23,252,17,225,150,61,218,8,206,247,120,10,183,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,235,214,44,64,9,161,21,143,255,76,12,151,236,37,39,150,22,10,3,68,35,211,0,0,0,0,0,0,0,0,0,162,30,240,246,32,252,38,224,102,61,39,10,182,251,62,5,136,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,33,233,245,244,251,141,224,223,60,83,10,229,250,127,5,186,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,31,246,246,111,252,253,222,146,61,78,11,94,250,240,5,186,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,226,37,217,242,110,252,158,237,40,49,64,9,187,252,200,3,169,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,44,161,241,169,251,159,243,231,43,154,8,233,252,100,5,103,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,43,83,239,0,252,72,248,198,39,40,8,242,253,239,4,117,17,0,0,0,0,0,0,0,0,0,0,200,0,0,0,81,40,176,240,93,252,66,245,138,43,32,7,70,254,9,6,163,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,188,25,231,250,75,253,51,243,235,42,74,10,157,254,224,7,242,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,35,149,245,159,252,14,238,36,48,248,9,69,253,250,6,116,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,41,204,243,7,251,65,232,214,55,109,7,139,249,2,9,93,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,40,222,242,229,250,18,226,74,61,10,8,145,251,152,4,178,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,40,53,242,185,251,54,228,2,58,132,9,85,250,187,6,221,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,42,49,241,134,251,182,226,73,59,184,9,146,250,41,6,153,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,158,33,51,246,10,252,210,223,98,61,143,10,82,252,211,3,80,30,0,0,0,0,0,0,0,0,0,0,0,0,252,15,201,49,108,238,120,250,82,232,206,56,44,6,114,248,208,8,203,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,46,97,237,79,252,141,228,6,62,65,4,117,245,26,16,119,32,0,0,0,0,0,0,0,0,0,0,0,0,252,15,117,51,132,237,37,250,81,233,212,54,103,7,3,248,148,9,230,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,30,31,249,164,254,100,233,247,54,38,7,219,244,166,17,157,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,35,87,246,196,251,213,224,118,62,19,8,241,246,219,11,57,32,0,0,0,0,0,0,0,0,0,0,0,0,188,15,208,31,187,248,169,251,173,225,22,62,137,7,183,248,238,9,183,29,0,0,0,0,0,0,0,0,0,0,0,0,153,15,15,37,197,244,165,251,147,226,246,60,218,7,174,249,52,8,221,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,24,53,250,235,255,61,228,169,57,232,9,168,244,252,13,120,33,0,0,0,0,0,0,0,0,0,0,0,0,106,15,152,34,234,245,254,251,175,225,150,61,34,8,39,248,15,10,45,29,0,0,0,0,0,0,0,0,0,0,0,0,215,15,42,34,135,246,185,251,86,226,252,60,25,8,12,249,5,9,248,28,0,0,0,0,0,0,0,0,0,0,0,0,210,15,41,34,135,246,185,251,86,226,253,60,25,8,12,249,5,9,248,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,31,80,248,213,254,151,234,174,53,79,7,4,246,109,16,230,25,0,0,0,0,0,0,0,0,0,0,0,0,106,15,81,34,31,246,247,251,41,226,8,61,64,8,9,249,252,8,137,30,0,0,0,0,0,0,0,0,0,0,0,0,210,15,152,32,238,246,4,252,84,226,19,61,0,8,44,249,221,8,119,28,0,0,0,0,0,0,0,0,0,0,0,0,236,14,192,43,57,241,211,250,32,238,49,49,158,8,73,253,206,6,80,29,0,0,0,0,0,0,0,0,0,0,0,0,175,15,5,33,106,247,188,251,71,226,65,61,216,7,67,249,33,9,144,30,0,0,0,0,0,0,0,0,0,0,0,0,175,15,5,33,106,247,188,251,71,226,65,61,216,7,67,249,33,9,144,30,0,0,0,0,0,0,0,0,0,0,0,0,253,15,151,32,254,247,3,252,221,225,89,61,55,8,217,248,76,9,43,32,0,0,0,0,0,0,0,0,0,0,0,0,253,15,151,32,254,247,3,252,221,225,89,61,55,8,217,248,76,9,43,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,151,29,145,247,197,253,118,241,77,44,165,10,102,250,3,11,127,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,145,44,224,240,143,250,36,238,213,49,211,7,59,253,18,7,247,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,44,63,239,65,251,66,239,97,48,70,8,125,254,187,5,107,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,182,58,80,234,242,248,109,240,99,48,231,6,176,253,134,6,111,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,151,29,145,247,197,253,118,241,77,44,165,10,102,250,3,11,127,24,0,0,0,0,0,0,0,0,0,0,0,0,203,15,188,32,186,245,129,253,185,244,229,41,192,9,141,253,147,5,62,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,151,29,145,247,197,253,118,241,77,44,165,10,102,250,3,11,127,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,188,32,186,245,129,253,185,244,229,41,192,9,141,253,147,5,62,21,0,0,0,0,0,0,0,0,0,0,0,0,225,15,188,32,186,245,129,253,185,244,229,41,192,9,141,253,147,5,62,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,47,28,237,211,251,241,229,226,55,18,10,238,252,171,3,250,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,45,163,238,213,251,11,229,85,56,147,10,251,251,193,4,148,29,0,0,0,0,0,0,0,0,0,0,0,0,255,15,21,37,169,242,102,253,165,235,46,48,188,12,244,249,214,8,82,25,0,0,0,0,0,0,0,0,0,0,0,0,254,15,97,41,233,241,14,252,7,233,71,51,12,12,80,251,13,7,65,26,0,0,0,0,0,0,0,0,0,0,0,0,254,15,77,45,90,240,231,251,200,234,255,49,141,11,251,251,214,6,116,25,0,0,0,0,0,0,0,0,0,0,0,0,249,15,163,42,163,241,42,252,45,234,186,50,95,11,112,251,176,7,79,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,45,52,240,134,251,128,237,140,47,88,11,36,252,37,7,151,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,149,42,1,240,206,251,139,251,248,35,245,8,194,255,137,5,38,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,38,101,242,99,252,186,244,33,44,8,7,166,253,127,6,14,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,41,122,246,91,251,101,222,79,63,227,9,2,252,95,3,210,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,42,234,244,165,251,109,223,201,61,136,10,187,252,168,2,163,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,41,122,246,91,251,101,222,79,63,227,9,2,252,95,3,210,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,131,40,227,246,74,251,16,222,103,63,42,10,50,251,92,4,18,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,37,245,247,91,251,79,221,128,64,183,9,76,250,65,5,191,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,94,37,209,244,221,252,254,227,68,59,64,8,206,252,35,3,233,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,87,43,171,243,212,250,71,223,218,61,160,10,172,251,179,3,168,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,211,36,102,245,156,252,187,226,220,62,93,5,105,247,192,12,12,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,226,35,138,245,117,252,11,222,133,64,212,8,151,251,70,4,76,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,43,236,241,125,251,224,235,246,50,25,9,230,254,119,1,168,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,43,236,241,125,251,224,235,246,50,25,9,230,254,119,1,168,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,139,34,235,244,143,253,95,236,100,49,108,10,101,254,210,4,242,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,167,38,251,243,174,252,72,235,235,50,217,9,141,252,232,6,24,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,234,31,91,245,129,253,168,238,241,46,184,10,253,252,185,5,199,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,34,239,244,25,253,10,239,124,46,212,10,46,253,7,6,103,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,182,35,125,244,90,253,56,222,71,66,127,6,80,247,82,11,167,33,0,0,0,0,0,0,0,0,0,0,0,0,0,62,150,41,247,241,122,251,255,242,179,45,39,7,101,253,58,11,143,24,0,0,0,0,0,0,0,0,0,0,0,0,127,15,26,35,61,245,222,252,59,231,7,53,5,12,60,250,96,8,235,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,38,12,244,89,252,79,233,19,52,193,10,13,251,107,8,199,21,0,0,0,0,0,0,0,0,0,0,15,0,150,15,125,39,96,242,31,252,220,234,12,50,100,11,231,250,92,8,167,21,0,0,0,0,0,0,0,0,0,0,0,0,148,15,224,42,67,240,139,251,18,225,131,60,40,10,122,249,23,8,54,32,0,0,0,0,0,0,0,0,0,0,143,0,0,0,210,38,36,245,134,252,4,238,105,48,176,9,163,251,0,9,12,18,0,0,0,0,0,0,0,0,0,0,143,0,0,0,71,53,97,234,165,250,94,249,161,37,126,9,60,1,128,4,12,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,226,30,107,245,174,253,169,231,39,52,148,12,126,248,71,10,137,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,226,30,107,245,174,253,169,231,39,52,148,12,126,248,71,10,137,25,0,0,0,0,0,0,0,0,0,0,15,0,150,15,89,31,106,248,230,251,16,225,32,62,52,8,104,246,189,11,127,27,0,0,0,0,0,0,0,0,0,0,0,0,127,15,118,31,163,248,255,251,99,223,239,63,248,7,11,245,214,13,205,29,0,0,0,0,0,0,0,0,0,0,0,0,127,15,118,31,163,248,255,251,99,223,239,63,248,7,11,245,214,13,205,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,44,27,240,5,251,125,226,162,59,144,9,112,244,98,13,5,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,44,27,240,5,251,125,226,162,59,144,9,112,244,98,13,5,30,0,0,0,0,0,0,0,0,0,0,0,0,127,15,208,41,165,239,50,251,134,223,80,62,197,9,104,252,177,3,223,34,0,0,0,0,0,0,0,0,0,0,0,0,127,15,208,41,165,239,50,251,134,223,80,62,197,9,104,252,177,3,223,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,31,6,245,145,253,206,230,207,52,200,12,92,249,98,8,137,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,31,6,245,145,253,206,230,207,52,200,12,92,249,98,8,137,27,0,0,0,0,0,0,0,0,0,0,15,0,0,0,192,31,148,245,113,253,10,232,251,51,89,12,10,249,8,10,195,23,0,0,0,0,0,0,0,0,0,0,15,0,0,0,192,31,148,245,113,253,10,232,251,51,89,12,10,249,8,10,195,23,0,0,0,0,0,0,0,0,0,0,143,0,0,0,157,42,57,239,76,252,203,250,90,36,95,9,22,0,202,6,230,17,0,0,0,0,0,0,0,0,0,0,143,0,0,0,157,42,57,239,76,252,203,250,90,36,95,9,22,0,202,6,230,17,0,0,0,0,0,0,0,0,0,0,143,0,0,0,164,39,97,241,33,252,235,244,102,44,123,6,67,253,101,7,35,19,0,0,0,0,0,0,0,0,0,0,143,0,0,0,164,39,97,241,33,252,235,244,102,44,123,6,67,253,101,7,35,19,0,0,0,0,0,0,0,0,0,0,143,0,255,15,69,63,254,231,31,249,167,246,13,42,77,7,110,1,190,8,128,20,0,0,0,0,0,0,0,0,0,0,143,0,255,15,69,63,254,231,31,249,167,246,13,42,77,7,110,1,190,8,128,20,0,0,0,0,0,0,0,0,0,0,143,0,255,15,128,46,67,238,91,251,205,246,147,42,126,6,216,254,50,6,193,16,0,0,0,0,0,0,0,0,0,0,143,0,255,15,128,46,67,238,91,251,205,246,147,42,126,6,216,254,50,6,193,16,0,0,0,0,0,0,0,0,0,0,143,0,255,15,176,31,253,245,28,253,110,241,8,46,149,8,83,252,27,8,69,19,0,0,0,0,0,0,0,0,0,0,143,0,255,15,176,31,253,245,28,253,110,241,8,46,149,8,83,252,27,8,69,19,0,0,0,0,0,0,0,0,0,0,15,0,255,15,122,35,165,244,99,252,25,232,65,52,242,11,251,248,81,10,233,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,129,39,184,242,166,251,99,237,139,49,13,9,135,254,157,5,54,26,0,0,0,0,0,0,0,0,0,0,15,0,148,15,7,32,239,247,224,251,68,224,28,63,241,7,102,246,206,11,52,28,0,0,0,0,0,0,0,0,0,0,15,0,60,15,129,39,184,242,166,251,99,237,139,49,13,9,135,254,157,5,54,26,0,0,0,0,0,0,0,0,0,0,143,0,255,15,107,26,129,248,161,252,228,240,251,44,124,10,64,251,83,9,247,22,0,0,0,0,0,0,0,0,0,0,143,0,255,15,118,30,254,245,28,253,217,240,64,45,53,10,225,251,200,8,58,21,0,0,0,0,0,0,0,0,0,0,15,0,146,15,208,30,146,248,13,252,86,224,213,62,51,8,207,246,50,11,162,28,0,0,0,0,0,0,0,0,0,0,143,0,255,15,208,30,146,248,13,252,86,224,213,62,51,8,207,246,50,11,162,28,0,0,0,0,0,0,0,0,0,0,143,0,255,15,91,35,92,246,76,251,164,235,220,51,73,8,83,251,206,9,234,26,0,0,0,0,0,0,0,0,0,0,143,0,255,15,36,32,127,244,108,253,158,240,16,46,126,9,186,251,230,8,161,22,0,0,0,0,0,0,0,0,0,0,15,0,146,15,155,24,70,250,236,253,121,230,28,54,153,11,229,246,40,12,96,23,0,0,0,0,0,0,0,0,0,0,15,0,149,15,100,30,150,246,218,252,183,240,204,45,180,9,6,252,86,9,178,20,0,0,0,0,0,0,0,0,0,0,144,0,0,0,159,25,40,249,21,254,168,241,143,44,26,10,62,252,83,7,10,20,0,0,0,0,0,0,0,0,0,0,143,0,0,0,107,26,129,248,161,252,228,240,251,44,124,10,64,251,83,9,247,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,5,63,7,147,255,197,229,36,62,40,3,185,254,48,7,132,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,89,11,220,2,19,255,58,224,242,64,196,5,34,244,157,16,93,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,89,11,220,2,19,255,58,224,242,64,196,5,34,244,157,16,93,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,17,11,255,219,255,148,228,128,58,125,8,122,243,63,18,175,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,189,19,232,255,139,255,204,233,252,54,166,6,197,245,140,17,217,22,0,0,0,0,0,0].concat([0,0,0,0,0,0,0,0,99,31,179,1,62,252,143,232,48,54,16,9,121,251,249,11,58,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,31,179,1,62,252,143,232,48,54,16,9,121,251,249,11,58,21,0,0,0,0,0,0,0,0,0,0,192,2,255,255,22,82,45,225,203,245,16,244,169,47,88,3,101,247,5,20,106,31,0,0,0,0,0,0,0,0,0,0,0,0,0,62,194,34,62,246,30,252,184,243,64,44,18,8,8,253,101,5,224,17,0,0,0,0,0,0,0,0,0,0,0,0,255,7,152,41,199,240,225,251,26,248,77,41,132,6,20,254,75,6,134,18,0,0,0,0,0,0,0,0,0,0,0,0,255,15,21,27,36,247,15,253,199,236,75,52,111,6,221,252,105,6,208,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,27,36,247,15,253,199,236,75,52,111,6,221,252,105,6,208,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,92,40,94,243,112,251,33,232,47,57,240,5,184,250,87,10,139,32,0,0,0,0,0,0,0,0,0,0,0,0,255,15,61,47,27,242,125,251,24,252,62,37,197,6,234,255,251,6,224,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,41,122,246,91,251,101,222,79,63,227,9,2,252,95,3,210,47,0,0,0,0,0,0,0,0,0,0,0,0,255,255,109,46,128,240,63,250,138,239,11,48,124,7,189,252,119,6,173,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,64,116,244,138,246,195,244,96,47,238,2,144,251,178,23,207,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,244,30,138,248,247,252,222,223,99,60,182,11,19,250,151,8,162,26,182,227,137,44,153,13,0,0,0,0,0,2,0,0,64,33,175,245,74,253,150,224,54,61,222,9,227,248,69,8,246,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,87,29,245,245,76,253,42,225,240,58,244,11,76,252,87,4,192,31,0,0,0,0,0,0,0,0,0,0,200,0,0,0,203,33,62,245,223,251,120,242,175,47,93,5,200,253,118,5,82,17,0,0,0,0,0,0,0,0,0,0,128,0,0,0,200,24,180,249,50,254,1,237,189,48,121,10,159,252,250,6,243,26,0,0,0,0,0,0,0,0,0,0,0,0,235,15,221,36,5,245,250,252,43,223,87,63,242,8,58,253,84,2,13,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,150,23,52,250,189,253,71,220,106,65,208,9,149,252,234,2,50,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,119,38,237,243,96,252,219,222,217,63,177,8,53,253,83,2,191,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,119,38,237,243,96,252,219,222,217,63,177,8,53,253,83,2,191,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,119,38,237,243,95,252,219,222,218,63,177,8,54,253,83,2,191,27,0,0,0,0,0,0,0,0,0,0,0,0,252,15,150,23,52,250,190,253,70,220,106,65,209,9,149,252,234,2,49,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,150,23,52,250,189,253,71,220,106,65,208,9,149,252,234,2,50,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,150,23,52,250,189,253,71,220,106,65,208,9,149,252,234,2,50,28,0,0,0,0,0,0,0,0,0,0,128,0,235,15,86,19,188,253,153,255,148,235,254,48,213,11,59,253,155,5,203,28,0,0,0,0,0,0,0,0,0,0,128,0,235,15,44,23,44,250,101,254,51,237,253,47,40,11,27,253,244,5,83,26,0,0,0,0,0,0,0,0,0,0,128,0,235,15,86,19,188,253,153,255,148,235,254,48,213,11,59,253,155,5,203,28,0,0,0,0,0,0,0,0,0,0,126,0,0,0,143,22,219,252,153,254,130,222,167,63,87,9,105,248,37,9,81,28,0,0,0,0,0,0,0,0,0,0,128,0,0,0,37,21,118,251,147,254,223,233,42,51,50,11,160,253,155,4,248,32,0,0,0,0,0,0,0,0,0,0,128,0,0,0,89,20,208,251,115,254,115,221,248,62,103,11,174,249,11,7,206,33,0,0,0,0,0,0,0,0,0,0,128,0,0,0,103,23,80,250,57,254,100,237,103,47,164,11,61,253,145,5,45,26,0,0,0,0,0,0,0,0,0,0,128,0,0,0,241,23,247,249,94,254,190,236,202,48,183,10,47,252,157,6,215,25,0,0,0,0,0,0,0,0,0,0,138,0,0,0,251,26,24,251,123,253,180,236,77,49,16,9,82,249,21,10,86,24,0,0,0,0,0,0,0,0,0,0,116,0,0,0,151,26,186,250,170,254,136,239,129,45,7,10,191,251,209,7,20,25,0,0,0,0,0,0,0,0,0,0,128,0,0,0,149,25,242,249,76,254,240,236,147,48,193,10,170,252,76,7,64,27,0,0,0,0,0,0,0,0,0,0,128,0,0,0,149,25,242,249,76,254,240,236,147,48,193,10,170,252,76,7,64,27,0,0,0,0,0,0,0,0,0,0,128,0,0,0,241,23,247,249,94,254,190,236,202,48,183,10,47,252,157,6,215,25,0,0,0,0,0,0,0,0,0,0,128,0,0,0,115,21,88,251,149,254,169,236,54,48,132,11,113,252,186,6,24,28,0,0,0,0,0,0,0,0,0,0,128,0,0,0,103,23,80,250,57,254,100,237,103,47,164,11,61,253,145,5,45,26,0,0,0,0,0,0,0,0,0,0,128,0,0,0,181,23,59,251,146,254,155,235,235,49,174,10,0,252,18,8,178,26,0,0,0,0,0,0,0,0,0,0,128,0,0,0,98,23,174,249,97,254,51,238,44,46,48,12,87,253,124,5,59,27,0,0,0,0,0,0,0,0,0,0,128,0,0,0,103,23,80,250,57,254,100,237,103,47,164,11,61,253,145,5,45,26,0,0,0,0,0,0,0,0,0,0,128,0,0,0,44,23,44,250,101,254,51,237,253,47,40,11,27,253,244,5,83,26,0,0,0,0,0,0,0,0,0,0,128,0,0,0,103,23,80,250,57,254,100,237,103,47,164,11,61,253,145,5,45,26,0,0,0,0,0,0,0,0,0,0,128,0,0,0,115,21,88,251,149,254,169,236,54,48,132,11,113,252,186,6,24,28,0,0,0,0,0,0,0,0,0,0,128,0,0,0,115,21,88,251,149,254,169,236,54,48,132,11,113,252,186,6,24,28,0,0,0,0,0,0,0,0,0,0,128,0,0,0,200,24,180,249,50,254,1,237,189,48,121,10,159,252,250,6,243,26,0,0,0,0,0,0]), "i8", ALLOC_NONE, 5561472);
allocate([0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63], "i8", ALLOC_NONE, 5573248);
allocate([65,79,67,0] /* AOC\00 */, "i8", ALLOC_NONE, 5573280);
allocate([69,80,83,79,78,0] /* EPSON\00 */, "i8", ALLOC_NONE, 5573284);
allocate([82,105,99,111,104,0] /* Ricoh\00 */, "i8", ALLOC_NONE, 5573292);
allocate([76,69,73,67,65,0] /* LEICA\00 */, "i8", ALLOC_NONE, 5573300);
allocate([79,76,89,77,80,0] /* OLYMP\00 */, "i8", ALLOC_NONE, 5573308);
allocate([70,85,74,73,70,73,76,77,0] /* FUJIFILM\00 */, "i8", ALLOC_NONE, 5573316);
allocate([80,97,110,97,115,111,110,105,99,0] /* Panasonic\00 */, "i8", ALLOC_NONE, 5573328);
allocate([83,79,78,89,0] /* SONY\00 */, "i8", ALLOC_NONE, 5573340);
allocate([79,76,89,77,80,85,83,0] /* OLYMPUS\00 */, "i8", ALLOC_NONE, 5573348);
allocate([87,114,105,116,105,110,103,32,100,97,116,97,32,116,111,32,37,115,32,46,46,46,10,0] /* Writing data to %s . */, "i8", ALLOC_NONE, 5573356);
allocate([119,98,0] /* wb\00 */, "i8", ALLOC_NONE, 5573380);
allocate([46,116,104,117,109,98,0] /* .thumb\00 */, "i8", ALLOC_NONE, 5573384);
allocate([95,37,48,42,100,0] /* _%0_d\00 */, "i8", ALLOC_NONE, 5573392);
allocate([115,116,97,110,100,97,114,100,32,111,117,116,112,117,116,0] /* standard output\00 */, "i8", ALLOC_NONE, 5573400);
allocate([46,112,103,109,0,46,112,112,109,0,46,112,112,109,0,46,112,97,109,0] /* .pgm\00.ppm\00.ppm\0 */, "i8", ALLOC_NONE, 5573416);
allocate([46,116,105,102,102,0] /* .tiff\00 */, "i8", ALLOC_NONE, 5573436);
allocate([37,115,58,32,34,45,115,32,37,100,34,32,114,101,113,117,101,115,116,115,32,97,32,110,111,110,101,120,105,115,116,101,110,116,32,105,109,97,103,101,33,10,0] /* %s: \22-s %d\22 requ */, "i8", ALLOC_NONE, 5573444);
allocate([78,105,107,111,110,0] /* Nikon\00 */, "i8", ALLOC_NONE, 5573488);
allocate([80,54,10,37,100,32,37,100,10,50,53,53,10,0] /* P6\0A%d %d\0A255\0A\ */, "i8", ALLOC_NONE, 5573496);
allocate([76,111,97,100,105,110,103,32,37,115,32,37,115,32,105,109,97,103,101,32,102,114,111,109,32,37,115,32,46,46,46,10,0] /* Loading %s %s image  */, "i8", ALLOC_NONE, 5573512);
allocate([109,97,105,110,40,41,0] /* main()\00 */, "i8", ALLOC_NONE, 5573548);
allocate([37,115,32,105,115,32,97,32,37,115,32,37,115,32,105,109,97,103,101,46,10,0] /* %s is a %s %s image. */, "i8", ALLOC_NONE, 5573556);
allocate([10,67,97,109,101,114,97,32,109,117,108,116,105,112,108,105,101,114,115,58,0] /* \0ACamera multiplier */, "i8", ALLOC_NONE, 5573580);
allocate([10,68,97,121,108,105,103,104,116,32,109,117,108,116,105,112,108,105,101,114,115,58,0] /* \0ADaylight multipli */, "i8", ALLOC_NONE, 5573604);
allocate([10,70,105,108,116,101,114,32,112,97,116,116,101,114,110,58,32,0] /* \0AFilter pattern: \ */, "i8", ALLOC_NONE, 5573628);
allocate([82,97,119,32,99,111,108,111,114,115,58,32,37,100,0] /* Raw colors: %d\00 */, "i8", ALLOC_NONE, 5573648);
allocate([79,117,116,112,117,116,32,115,105,122,101,58,32,37,52,100,32,120,32,37,100,10,0] /* Output size: %4d x % */, "i8", ALLOC_NONE, 5573664);
allocate([73,109,97,103,101,32,115,105,122,101,58,32,32,37,52,100,32,120,32,37,100,10,0] /* Image size:  %4d x % */, "i8", ALLOC_NONE, 5573688);
allocate([67,97,110,110,111,116,32,100,101,99,111,100,101,32,102,105,108,101,32,37,115,10,0] /* Cannot decode file % */, "i8", ALLOC_NONE, 5573712);
allocate([77,76,89,0] /* MLY\00 */, "i8", ALLOC_NONE, 5573736);
allocate([70,117,108,108,32,115,105,122,101,58,32,32,32,37,52,100,32,120,32,37,100,10,0] /* Full size:   %4d x % */, "i8", ALLOC_NONE, 5573740);
allocate([84,104,117,109,98,32,115,105,122,101,58,32,32,37,52,100,32,120,32,37,100,10,0] /* Thumb size:  %4d x % */, "i8", ALLOC_NONE, 5573764);
allocate([80,105,120,101,108,32,65,115,112,101,99,116,32,82,97,116,105,111,58,32,37,48,46,54,102,10,0] /* Pixel Aspect Ratio:  */, "i8", ALLOC_NONE, 5573788);
allocate([78,117,109,98,101,114,32,111,102,32,114,97,119,32,105,109,97,103,101,115,58,32,37,100,10,0] /* Number of raw images */, "i8", ALLOC_NONE, 5573816);
allocate([110,111,0] /* no\00 */, "i8", ALLOC_NONE, 5573844);
allocate([121,101,115,0] /* yes\00 */, "i8", ALLOC_NONE, 5573848);
allocate([69,109,98,101,100,100,101,100,32,73,67,67,32,112,114,111,102,105,108,101,58,32,37,115,10,0] /* Embedded ICC profile */, "i8", ALLOC_NONE, 5573852);
allocate([70,111,99,97,108,32,108,101,110,103,116,104,58,32,37,48,46,49,102,32,109,109,10,0] /* Focal length: %0.1f  */, "i8", ALLOC_NONE, 5573880);
allocate([65,112,101,114,116,117,114,101,58,32,102,47,37,48,46,49,102,10,0] /* Aperture: f/%0.1f\0A */, "i8", ALLOC_NONE, 5573904);
allocate([37,48,46,49,102,32,115,101,99,10,0] /* %0.1f sec\0A\00 */, "i8", ALLOC_NONE, 5573924);
allocate([75,67,0] /* KC\00 */, "i8", ALLOC_NONE, 5573936);
allocate([49,47,0] /* 1/\00 */, "i8", ALLOC_NONE, 5573940);
allocate([83,104,117,116,116,101,114,58,32,0] /* Shutter: \00 */, "i8", ALLOC_NONE, 5573944);
allocate([73,83,79,32,115,112,101,101,100,58,32,37,100,10,0] /* ISO speed: %d\0A\00 */, "i8", ALLOC_NONE, 5573956);
allocate([37,100,37,99,0] /* %d%c\00 */, "i8", ALLOC_NONE, 5573972);
allocate([68,78,71,32,86,101,114,115,105,111,110,58,32,0] /* DNG Version: \00 */, "i8", ALLOC_NONE, 5573980);
allocate([79,119,110,101,114,58,32,37,115,10,0] /* Owner: %s\0A\00 */, "i8", ALLOC_NONE, 5573996);
allocate([67,97,109,101,114,97,58,32,37,115,32,37,115,10,0] /* Camera: %s %s\0A\00 */, "i8", ALLOC_NONE, 5574008);
allocate([84,105,109,101,115,116,97,109,112,58,32,37,115,0] /* Timestamp: %s\00 */, "i8", ALLOC_NONE, 5574024);
allocate([10,70,105,108,101,110,97,109,101,58,32,37,115,10,0] /* \0AFilename: %s\0A\0 */, "i8", ALLOC_NONE, 5574040);
allocate([37,115,32,104,97,115,32,110,111,32,116,104,117,109,98,110,97,105,108,46,10,0] /* %s has no thumbnail. */, "i8", ALLOC_NONE, 5574056);
allocate([77,77,77,77,0] /* MMMM\00 */, "i8", ALLOC_NONE, 5574080);
allocate([37,115,32,116,105,109,101,32,115,101,116,32,116,111,32,37,100,46,10,0] /* %s time set to %d.\0 */, "i8", ALLOC_NONE, 5574088);
allocate([37,49,48,108,100,37,49,48,100,32,37,115,10,0] /* %10ld%10d %s\0A\00 */, "i8", ALLOC_NONE, 5574108);
allocate([37,115,32,104,97,115,32,110,111,32,116,105,109,101,115,116,97,109,112,46,10,0] /* %s has no timestamp. */, "i8", ALLOC_NONE, 5574124);
allocate([87,105,108,108,32,110,111,116,32,119,114,105,116,101,32,97,110,32,105,109,97,103,101,32,116,111,32,116,104,101,32,116,101,114,109,105,110,97,108,33,10,0] /* Will not write an im */, "i8", ALLOC_NONE, 5574148);
allocate([78,111,32,102,105,108,101,115,32,116,111,32,112,114,111,99,101,115,115,46,10,0] /* No files to process. */, "i8", ALLOC_NONE, 5574192);
allocate([85,110,107,110,111,119,110,32,111,112,116,105,111,110,32,34,45,37,99,34,46,10,0] /* Unknown option \22-% */, "i8", ALLOC_NONE, 5574216);
allocate([97,108,108,0] /* all\00 */, "i8", ALLOC_NONE, 5574240);
allocate([78,111,110,45,110,117,109,101,114,105,99,32,97,114,103,117,109,101,110,116,32,116,111,32,34,45,37,99,34,10,0] /* Non-numeric argument */, "i8", ALLOC_NONE, 5574244);
allocate([49,49,52,49,49,49,49,49,49,52,50,50,0] /* 114111111422\00 */, "i8", ALLOC_NONE, 5574276);
allocate([110,98,114,107,83,116,113,109,72,65,67,103,0] /* nbrkStqmHACg\00 */, "i8", ALLOC_NONE, 5574292);
allocate([73,73,73,73,0] /* IIII\00 */, "i8", ALLOC_NONE, 5574308);
allocate([45,84,32,32,32,32,32,32,32,32,87,114,105,116,101,32,84,73,70,70,32,105,110,115,116,101,97,100,32,111,102,32,80,80,77,0] /* -T        Write TIFF */, "i8", ALLOC_NONE, 5574316);
allocate([45,52,32,32,32,32,32,32,32,32,76,105,110,101,97,114,32,49,54,45,98,105,116,44,32,115,97,109,101,32,97,115,32,34,45,54,32,45,87,32,45,103,32,49,32,49,34,0] /* -4        Linear 16- */, "i8", ALLOC_NONE, 5574352);
allocate([45,54,32,32,32,32,32,32,32,32,87,114,105,116,101,32,49,54,45,98,105,116,32,105,110,115,116,101,97,100,32,111,102,32,56,45,98,105,116,0] /* -6        Write 16-b */, "i8", ALLOC_NONE, 5574400);
allocate([45,115,32,91,48,46,46,78,45,49,93,32,83,101,108,101,99,116,32,111,110,101,32,114,97,119,32,105,109,97,103,101,32,111,114,32,34,97,108,108,34,32,102,114,111,109,32,101,97,99,104,32,102,105,108,101,0] /* -s [0..N-1] Select o */, "i8", ALLOC_NONE, 5574440);
allocate([45,109,32,60,110,117,109,62,32,32,65,112,112,108,121,32,97,32,51,120,51,32,109,101,100,105,97,110,32,102,105,108,116,101,114,32,116,111,32,82,45,71,32,97,110,100,32,66,45,71,0] /* -m _num_  Apply a 3x */, "i8", ALLOC_NONE, 5574500);
allocate([45,102,32,32,32,32,32,32,32,32,73,110,116,101,114,112,111,108,97,116,101,32,82,71,71,66,32,97,115,32,102,111,117,114,32,99,111,108,111,114,115,0] /* -f        Interpolat */, "i8", ALLOC_NONE, 5574552);
allocate([45,104,32,32,32,32,32,32,32,32,72,97,108,102,45,115,105,122,101,32,99,111,108,111,114,32,105,109,97,103,101,32,40,116,119,105,99,101,32,97,115,32,102,97,115,116,32,97,115,32,34,45,113,32,48,34,41,0] /* -h        Half-size  */, "i8", ALLOC_NONE, 5574596);
allocate([45,113,32,91,48,45,51,93,32,32,83,101,116,32,116,104,101,32,105,110,116,101,114,112,111,108,97,116,105,111,110,32,113,117,97,108,105,116,121,0] /* -q [0-3]  Set the in */, "i8", ALLOC_NONE, 5574656);
allocate([45,103,32,60,112,32,116,115,62,32,83,101,116,32,99,117,115,116,111,109,32,103,97,109,109,97,32,99,117,114,118,101,32,40,100,101,102,97,117,108,116,32,61,32,50,46,50,50,50,32,52,46,53,41,0] /* -g _p ts_ Set custom */, "i8", ALLOC_NONE, 5574696);
allocate([45,98,32,60,110,117,109,62,32,32,65,100,106,117,115,116,32,98,114,105,103,104,116,110,101,115,115,32,40,100,101,102,97,117,108,116,32,61,32,49,46,48,41,0] /* -b _num_  Adjust bri */, "i8", ALLOC_NONE, 5574752);
allocate([86,69,82,0] /* VER\00 */, "i8", ALLOC_NONE, 5574796);
allocate([45,87,32,32,32,32,32,32,32,32,68,111,110,39,116,32,97,117,116,111,109,97,116,105,99,97,108,108,121,32,98,114,105,103,104,116,101,110,32,116,104,101,32,105,109,97,103,101,0] /* -W        Don't auto */, "i8", ALLOC_NONE, 5574800);
allocate([45,106,32,32,32,32,32,32,32,32,68,111,110,39,116,32,115,116,114,101,116,99,104,32,111,114,32,114,111,116,97,116,101,32,114,97,119,32,112,105,120,101,108,115,0] /* -j        Don't stre */, "i8", ALLOC_NONE, 5574852);
allocate([45,68,32,32,32,32,32,32,32,32,68,111,99,117,109,101,110,116,32,109,111,100,101,32,119,105,116,104,111,117,116,32,115,99,97,108,105,110,103,32,40,116,111,116,97,108,108,121,32,114,97,119,41,0] /* -D        Document m */, "i8", ALLOC_NONE, 5574900);
allocate([45,100,32,32,32,32,32,32,32,32,68,111,99,117,109,101,110,116,32,109,111,100,101,32,40,110,111,32,99,111,108,111,114,44,32,110,111,32,105,110,116,101,114,112,111,108,97,116,105,111,110,41,0] /* -d        Document m */, "i8", ALLOC_NONE, 5574956);
allocate([45,111,32,91,48,45,53,93,32,32,79,117,116,112,117,116,32,99,111,108,111,114,115,112,97,99,101,32,40,114,97,119,44,115,82,71,66,44,65,100,111,98,101,44,87,105,100,101,44,80,114,111,80,104,111,116,111,44,88,89,90,41,0] /* -o [0-5]  Output col */, "i8", ALLOC_NONE, 5575012);
allocate([45,116,32,91,48,45,55,93,32,32,70,108,105,112,32,105,109,97,103,101,32,40,48,61,110,111,110,101,44,32,51,61,49,56,48,44,32,53,61,57,48,67,67,87,44,32,54,61,57,48,67,87,41,0] /* -t [0-7]  Flip image */, "i8", ALLOC_NONE, 5575076);
allocate([45,72,32,91,48,45,57,93,32,32,72,105,103,104,108,105,103,104,116,32,109,111,100,101,32,40,48,61,99,108,105,112,44,32,49,61,117,110,99,108,105,112,44,32,50,61,98,108,101,110,100,44,32,51,43,61,114,101,98,117,105,108,100,41,0] /* -H [0-9]  Highlight  */, "i8", ALLOC_NONE, 5575132);
allocate([45,110,32,60,110,117,109,62,32,32,83,101,116,32,116,104,114,101,115,104,111,108,100,32,102,111,114,32,119,97,118,101,108,101,116,32,100,101,110,111,105,115,105,110,103,0] /* -n _num_  Set thresh */, "i8", ALLOC_NONE, 5575200);
allocate([45,83,32,60,110,117,109,62,32,32,83,101,116,32,116,104,101,32,115,97,116,117,114,97,116,105,111,110,32,108,101,118,101,108,0] /* -S _num_  Set the sa */, "i8", ALLOC_NONE, 5575248);
allocate([45,107,32,60,110,117,109,62,32,32,83,101,116,32,116,104,101,32,100,97,114,107,110,101,115,115,32,108,101,118,101,108,0] /* -k _num_  Set the da */, "i8", ALLOC_NONE, 5575284);
allocate([75,68,75,0] /* KDK\00 */, "i8", ALLOC_NONE, 5575320);
allocate([45,75,32,60,102,105,108,101,62,32,83,117,98,116,114,97,99,116,32,100,97,114,107,32,102,114,97,109,101,32,40,49,54,45,98,105,116,32,114,97,119,32,80,71,77,41,0] /* -K _file_ Subtract d */, "i8", ALLOC_NONE, 5575324);
allocate([45,80,32,60,102,105,108,101,62,32,70,105,120,32,116,104,101,32,100,101,97,100,32,112,105,120,101,108,115,32,108,105,115,116,101,100,32,105,110,32,116,104,105,115,32,102,105,108,101,0] /* -P _file_ Fix the de */, "i8", ALLOC_NONE, 5575372);
allocate([45,67,32,60,114,32,98,62,32,32,67,111,114,114,101,99,116,32,99,104,114,111,109,97,116,105,99,32,97,98,101,114,114,97,116,105,111,110,0] /* -C _r b_  Correct ch */, "i8", ALLOC_NONE, 5575424);
allocate([43,77,47,45,77,32,32,32,32,32,85,115,101,47,100,111,110,39,116,32,117,115,101,32,97,110,32,101,109,98,101,100,100,101,100,32,99,111,108,111,114,32,109,97,116,114,105,120,0] /* +M/-M     Use/don't  */, "i8", ALLOC_NONE, 5575464);
allocate([45,114,32,60,114,32,103,32,98,32,103,62,32,83,101,116,32,99,117,115,116,111,109,32,119,104,105,116,101,32,98,97,108,97,110,99,101,0] /* -r _r g b g_ Set cus */, "i8", ALLOC_NONE, 5575516);
allocate([45,65,32,60,120,32,121,32,119,32,104,62,32,65,118,101,114,97,103,101,32,97,32,103,114,101,121,32,98,111,120,32,102,111,114,32,119,104,105,116,101,32,98,97,108,97,110,99,101,0] /* -A _x y w h_ Average */, "i8", ALLOC_NONE, 5575556);
allocate([45,97,32,32,32,32,32,32,32,32,65,118,101,114,97,103,101,32,116,104,101,32,119,104,111,108,101,32,105,109,97,103,101,32,102,111,114,32,119,104,105,116,101,32,98,97,108,97,110,99,101,0] /* -a        Average th */, "i8", ALLOC_NONE, 5575608);
allocate([45,119,32,32,32,32,32,32,32,32,85,115,101,32,99,97,109,101,114,97,32,119,104,105,116,101,32,98,97,108,97,110,99,101,44,32,105,102,32,112,111,115,115,105,98,108,101,0] /* -w        Use camera */, "i8", ALLOC_NONE, 5575660);
allocate([45,122,32,32,32,32,32,32,32,32,67,104,97,110,103,101,32,102,105,108,101,32,100,97,116,101,115,32,116,111,32,99,97,109,101,114,97,32,116,105,109,101,115,116,97,109,112,0] /* -z        Change fil */, "i8", ALLOC_NONE, 5575708);
allocate([45,105,32,45,118,32,32,32,32,32,73,100,101,110,116,105,102,121,32,102,105,108,101,115,32,97,110,100,32,115,104,111,119,32,109,101,116,97,100,97,116,97,0] /* -i -v     Identify f */, "i8", ALLOC_NONE, 5575756);
allocate([78,111,107,105,97,0] /* Nokia\00 */, "i8", ALLOC_NONE, 5575800);
allocate([45,105,32,32,32,32,32,32,32,32,73,100,101,110,116,105,102,121,32,102,105,108,101,115,32,119,105,116,104,111,117,116,32,100,101,99,111,100,105,110,103,32,116,104,101,109,0] /* -i        Identify f */, "i8", ALLOC_NONE, 5575808);
allocate([45,101,32,32,32,32,32,32,32,32,69,120,116,114,97,99,116,32,101,109,98,101,100,100,101,100,32,116,104,117,109,98,110,97,105,108,32,105,109,97,103,101,0] /* -e        Extract em */, "i8", ALLOC_NONE, 5575856);
allocate([45,99,32,32,32,32,32,32,32,32,87,114,105,116,101,32,105,109,97,103,101,32,100,97,116,97,32,116,111,32,115,116,97,110,100,97,114,100,32,111,117,116,112,117,116,0] /* -c        Write imag */, "i8", ALLOC_NONE, 5575900);
allocate([45,118,32,32,32,32,32,32,32,32,80,114,105,110,116,32,118,101,114,98,111,115,101,32,109,101,115,115,97,103,101,115,0] /* -v        Print verb */, "i8", ALLOC_NONE, 5575948);
allocate([10,85,115,97,103,101,58,32,32,37,115,32,91,79,80,84,73,79,78,93,46,46,46,32,91,70,73,76,69,93,46,46,46,10,10,0] /* \0AUsage:  %s [OPTIO */, "i8", ALLOC_NONE, 5575984);
allocate([57,46,49,55,0] /* 9.17\00 */, "i8", ALLOC_NONE, 5576020);
allocate([10,82,97,119,32,112,104,111,116,111,32,100,101,99,111,100,101,114,32,34,100,99,114,97,119,34,32,118,37,115,0] /* \0ARaw photo decoder */, "i8", ALLOC_NONE, 5576028);
allocate([84,90,61,85,84,67,0] /* TZ=UTC\00 */, "i8", ALLOC_NONE, 5576060);
allocate([80,37,100,10,37,100,32,37,100,10,37,100,10,0] /* P%d\0A%d %d\0A%d\0A\ */, "i8", ALLOC_NONE, 5576068);
allocate([49,49,49,50,52,56,49,49,50,52,56,52,56,56,0] /* 11124811248488\00 */, "i8", ALLOC_NONE, 5576084);
allocate([80,55,10,87,73,68,84,72,32,37,100,10,72,69,73,71,72,84,32,37,100,10,68,69,80,84,72,32,37,100,10,77,65,88,86,65,76,32,37,100,10,84,85,80,76,84,89,80,69,32,37,115,10,69,78,68,72,68,82,10,0] /* P7\0AWIDTH %d\0AHEIG */, "i8", ALLOC_NONE, 5576100);
allocate([119,114,105,116,101,95,112,112,109,95,116,105,102,102,40,41,0] /* write_ppm_tiff()\00 */, "i8", ALLOC_NONE, 5576164);
allocate([255,225,32,32,69,120,105,102,0,0,0] /* \FF\E1  Exif\00\00\0 */, "i8", ALLOC_NONE, 5576184);
allocate([106,112,101,103,95,116,104,117,109,98,40,41,0] /* jpeg_thumb()\00 */, "i8", ALLOC_NONE, 5576196);
allocate([37,48,52,100,58,37,48,50,100,58,37,48,50,100,32,37,48,50,100,58,37,48,50,100,58,37,48,50,100,0] /* %04d:%02d:%02d %02d: */, "i8", ALLOC_NONE, 5576212);
allocate([100,99,114,97,119,32,118,57,46,49,55,0] /* dcraw v9.17\00 */, "i8", ALLOC_NONE, 5576244);
allocate([49,50,52,51,53,56,54,55,0] /* 12435867\00 */, "i8", ALLOC_NONE, 5576256);
allocate([115,116,114,101,116,99,104,40,41,0] /* stretch()\00 */, "i8", ALLOC_NONE, 5576268);
allocate([83,116,114,101,116,99,104,105,110,103,32,116,104,101,32,105,109,97,103,101,46,46,46,10,0] /* Stretching the image */, "i8", ALLOC_NONE, 5576280);
allocate([102,117,106,105,95,114,111,116,97,116,101,40,41,0] /* fuji_rotate()\00 */, "i8", ALLOC_NONE, 5576308);
allocate([114,101,99,111,118,101,114,95,104,105,103,104,108,105,103,104,116,115,40,41,0] /* recover_highlights() */, "i8", ALLOC_NONE, 5576324);
allocate([82,111,116,97,116,105,110,103,32,105,109,97,103,101,32,52,53,32,100,101,103,114,101,101,115,46,46,46,10,0] /* Rotating image 45 de */, "i8", ALLOC_NONE, 5576348);
allocate([67,111,110,118,101,114,116,105,110,103,32,116,111,32,37,115,32,99,111,108,111,114,115,112,97,99,101,46,46,46,10,0] /* Converting to %s col */, "i8", ALLOC_NONE, 5576380);
allocate([66,117,105,108,100,105,110,103,32,104,105,115,116,111,103,114,97,109,115,46,46,46,10,0] /* Building histograms. */, "i8", ALLOC_NONE, 5576412);
allocate([97,117,116,111,45,103,101,110,101,114,97,116,101,100,32,98,121,32,100,99,114,97,119,0] /* auto-generated by dc */, "i8", ALLOC_NONE, 5576436);
allocate([99,111,110,118,101,114,116,95,116,111,95,114,103,98,40,41,0] /* convert_to_rgb()\00 */, "i8", ALLOC_NONE, 5576460);
allocate([88,89,90,0] /* XYZ\00 */, "i8", ALLOC_NONE, 5576480);
allocate([80,114,111,80,104,111,116,111,32,68,54,53,0] /* ProPhoto D65\00 */, "i8", ALLOC_NONE, 5576484);
allocate([87,105,100,101,71,97,109,117,116,32,68,54,53,0] /* WideGamut D65\00 */, "i8", ALLOC_NONE, 5576500);
allocate([65,100,111,98,101,32,82,71,66,32,40,49,57,57,56,41,0] /* Adobe RGB (1998)\00 */, "i8", ALLOC_NONE, 5576516);
allocate([115,82,71,66,0] /* sRGB\00 */, "i8", ALLOC_NONE, 5576536);
allocate([82,101,98,117,105,108,100,105,110,103,32,104,105,103,104,108,105,103,104,116,115,46,46,46,10,0] /* Rebuilding highlight */, "i8", ALLOC_NONE, 5576544);
allocate([112,112,109,95,116,104,117,109,98,40,41,0] /* ppm_thumb()\00 */, "i8", ALLOC_NONE, 5576572);
allocate([71,77,67,89,0] /* GMCY\00 */, "i8", ALLOC_NONE, 5576584);
allocate([82,71,66,71,0] /* RGBG\00 */, "i8", ALLOC_NONE, 5576592);
allocate([108,105,98,106,112,101,103,0] /* libjpeg\00 */, "i8", ALLOC_NONE, 5576600);
allocate([108,105,98,106,97,115,112,101,114,0] /* libjasper\00 */, "i8", ALLOC_NONE, 5576608);
allocate([37,115,58,32,89,111,117,32,109,117,115,116,32,108,105,110,107,32,100,99,114,97,119,32,119,105,116,104,32,37,115,33,33,10,0] /* %s: You must link dc */, "i8", ALLOC_NONE, 5576620);
allocate([81,117,105,99,107,116,97,107,101,0] /* Quicktake\00 */, "i8", ALLOC_NONE, 5576656);
allocate([37,100,120,37,100,0] /* %dx%d\00 */, "i8", ALLOC_NONE, 5576668);
allocate([69,88,45,80,55,48,48,0] /* EX-P700\00 */, "i8", ALLOC_NONE, 5576676);
allocate([69,88,45,80,53,48,53,0] /* EX-P505\00 */, "i8", ALLOC_NONE, 5576684);
allocate([69,88,45,90,82,49,48,48,0] /* EX-ZR100\00 */, "i8", ALLOC_NONE, 5576692);
allocate([66,108,101,110,100,105,110,103,32,104,105,103,104,108,105,103,104,116,115,46,46,46,10,0] /* Blending highlights. */, "i8", ALLOC_NONE, 5576704);
allocate([69,88,45,90,56,0] /* EX-Z8\00 */, "i8", ALLOC_NONE, 5576728);
allocate([69,88,45,90,56,53,48,0] /* EX-Z850\00 */, "i8", ALLOC_NONE, 5576736);
allocate([69,88,45,90,55,53,48,0] /* EX-Z750\00 */, "i8", ALLOC_NONE, 5576744);
allocate([69,88,45,90,55,53,0] /* EX-Z75\00 */, "i8", ALLOC_NONE, 5576752);
allocate([69,88,45,90,54,48,0] /* EX-Z60\00 */, "i8", ALLOC_NONE, 5576760);
allocate([69,88,45,90,53,53,0] /* EX-Z55\00 */, "i8", ALLOC_NONE, 5576768);
allocate([69,88,45,90,53,48,48,0] /* EX-Z500\00 */, "i8", ALLOC_NONE, 5576776);
allocate([69,88,45,90,53,48,0] /* EX-Z50\00 */, "i8", ALLOC_NONE, 5576784);
allocate([69,88,45,83,49,48,48,0] /* EX-S100\00 */, "i8", ALLOC_NONE, 5576792);
allocate([69,88,45,83,50,48,0] /* EX-S20\00 */, "i8", ALLOC_NONE, 5576800);
allocate([77,101,100,105,97,110,32,102,105,108,116,101,114,32,112,97,115,115,32,37,100,46,46,46,10,0] /* Median filter pass % */, "i8", ALLOC_NONE, 5576808);
allocate([81,86,45,82,53,49,0] /* QV-R51\00 */, "i8", ALLOC_NONE, 5576836);
allocate([81,86,45,82,52,49,0] /* QV-R41\00 */, "i8", ALLOC_NONE, 5576844);
allocate([81,86,45,53,55,48,48,0] /* QV-5700\00 */, "i8", ALLOC_NONE, 5576852);
allocate([81,86,45,52,48,48,48,0] /* QV-4000\00 */, "i8", ALLOC_NONE, 5576860);
allocate([81,86,45,50,48,48,48,85,88,0] /* QV-2000UX\00 */, "i8", ALLOC_NONE, 5576868);
allocate([80,67,45,67,65,77,32,54,48,48,0] /* PC-CAM 600\00 */, "i8", ALLOC_NONE, 5576880);
allocate([81,117,105,99,107,84,97,107,101,0] /* QuickTake\00 */, "i8", ALLOC_NONE, 5576892);
allocate([68,67,83,50,48,48,0] /* DCS200\00 */, "i8", ALLOC_NONE, 5576904);
allocate([68,67,49,50,48,0] /* DC120\00 */, "i8", ALLOC_NONE, 5576912);
allocate([97,104,100,95,105,110,116,101,114,112,111,108,97,116,101,40,41,0] /* ahd_interpolate()\00 */, "i8", ALLOC_NONE, 5576920);
allocate([68,67,53,48,0] /* DC50\00 */, "i8", ALLOC_NONE, 5576940);
allocate([68,67,52,48,0] /* DC40\00 */, "i8", ALLOC_NONE, 5576948);
allocate([52,48,0] /* 40\00 */, "i8", ALLOC_NONE, 5576956);
allocate([68,67,50,53,0] /* DC25\00 */, "i8", ALLOC_NONE, 5576960);
allocate([77,89,67,89,0] /* MYCY\00 */, "i8", ALLOC_NONE, 5576968);
allocate([50,48,88,0] /* 20X\00 */, "i8", ALLOC_NONE, 5576976);
allocate([68,67,83,55,54,48,77,0] /* DCS760M\00 */, "i8", ALLOC_NONE, 5576980);
allocate([68,67,83,54,54,48,77,0] /* DCS660M\00 */, "i8", ALLOC_NONE, 5576988);
allocate([68,67,83,52,54,48,65,0] /* DCS460A\00 */, "i8", ALLOC_NONE, 5576996);
allocate([68,67,83,52,54,48,32,0] /* DCS460 \00 */, "i8", ALLOC_NONE, 5577004);
allocate([65,72,68,32,105,110,116,101,114,112,111,108,97,116,105,111,110,46,46,46,10,0] /* AHD interpolation... */, "i8", ALLOC_NONE, 5577012);
allocate([68,67,83,52,50,48,0] /* DCS420\00 */, "i8", ALLOC_NONE, 5577036);
allocate([69,79,83,68,67,83,49,0] /* EOSDCS1\00 */, "i8", ALLOC_NONE, 5577044);
allocate([69,79,83,68,67,83,51,66,0] /* EOSDCS3B\00 */, "i8", ALLOC_NONE, 5577052);
allocate([78,67,50,48,48,48,0] /* NC2000\00 */, "i8", ALLOC_NONE, 5577064);
allocate([69,97,115,121,83,104,97,114,101,0] /* EasyShare\00 */, "i8", ALLOC_NONE, 5577072);
allocate([67,51,51,48,0] /* C330\00 */, "i8", ALLOC_NONE, 5577084);
allocate([67,54,48,51,0] /* C603\00 */, "i8", ALLOC_NONE, 5577092);
allocate([67,54,48,51,121,0] /* C603y\00 */, "i8", ALLOC_NONE, 5577100);
allocate([75,65,73,45,48,51,52,48,0] /* KAI-0340\00 */, "i8", ALLOC_NONE, 5577108);
allocate([67,54,48,51,118,0] /* C603v\00 */, "i8", ALLOC_NONE, 5577120);
allocate([80,80,71,32,105,110,116,101,114,112,111,108,97,116,105,111,110,46,46,46,10,0] /* PPG interpolation... */, "i8", ALLOC_NONE, 5577128);
allocate([80,73,88,76,0] /* PIXL\00 */, "i8", ALLOC_NONE, 5577152);
allocate([68,83,76,82,45,65,51,53,48,0] /* DSLR-A350\00 */, "i8", ALLOC_NONE, 5577160);
allocate([68,83,67,45,82,49,0] /* DSC-R1\00 */, "i8", ALLOC_NONE, 5577172);
allocate([68,83,67,45,86,51,0] /* DSC-V3\00 */, "i8", ALLOC_NONE, 5577180);
allocate([82,71,66,69,0] /* RGBE\00 */, "i8", ALLOC_NONE, 5577188);
allocate([68,83,67,45,70,56,50,56,0] /* DSC-F828\00 */, "i8", ALLOC_NONE, 5577196);
allocate([88,90,45,50,0] /* XZ-2\00 */, "i8", ALLOC_NONE, 5577208);
allocate([83,80,53,53,48,85,90,0] /* SP550UZ\00 */, "i8", ALLOC_NONE, 5577216);
allocate([69,45,51,51,48,0] /* E-330\00 */, "i8", ALLOC_NONE, 5577224);
allocate([69,45,53,48,48,0] /* E-500\00 */, "i8", ALLOC_NONE, 5577232);
allocate([118,110,103,95,105,110,116,101,114,112,111,108,97,116,101,40,41,0] /* vng_interpolate()\00 */, "i8", ALLOC_NONE, 5577240);
allocate([69,45,51,48,48,0] /* E-300\00 */, "i8", ALLOC_NONE, 5577260);
allocate([67,55,55,48,85,90,0] /* C770UZ\00 */, "i8", ALLOC_NONE, 5577268);
allocate([148,97,73,22,0] /* \94aI\16\00 */, "i8", ALLOC_NONE, 5577276);
allocate([67,97,116,99,104,76,105,103,104,116,0] /* CatchLight\00 */, "i8", ALLOC_NONE, 5577284);
allocate([82,66,84,71,0] /* RBTG\00 */, "i8", ALLOC_NONE, 5577296);
allocate([56,66,80,83,0] /* 8BPS\00 */, "i8", ALLOC_NONE, 5577304);
allocate([86,57,54,67,0] /* V96C\00 */, "i8", ALLOC_NONE, 5577312);
allocate([51,51,50,48,65,70,0] /* 3320AF\00 */, "i8", ALLOC_NONE, 5577320);
allocate([65,55,56,50,0] /* A782\00 */, "i8", ALLOC_NONE, 5577328);
allocate([86,78,71,32,105,110,116,101,114,112,111,108,97,116,105,111,110,46,46,46,10,0] /* VNG interpolation... */, "i8", ALLOC_NONE, 5577336);
allocate([50,48,49,48,0] /* 2010\00 */, "i8", ALLOC_NONE, 5577360);
allocate([88,67,68,45,83,88,57,49,48,67,82,0] /* XCD-SX910CR\00 */, "i8", ALLOC_NONE, 5577368);
allocate([70,45,56,49,48,67,0] /* F-810C\00 */, "i8", ALLOC_NONE, 5577380);
allocate([70,45,53,49,48,67,0] /* F-510C\00 */, "i8", ALLOC_NONE, 5577388);
allocate([70,45,50,48,49,67,0] /* F-201C\00 */, "i8", ALLOC_NONE, 5577396);
allocate([70,45,49,52,53,67,0] /* F-145C\00 */, "i8", ALLOC_NONE, 5577404);
allocate([70,45,48,56,48,67,0] /* F-080C\00 */, "i8", ALLOC_NONE, 5577412);
allocate([54,52,48,120,52,56,48,0] /* 640x480\00 */, "i8", ALLOC_NONE, 5577420);
allocate([53,51,49,67,0] /* 531C\00 */, "i8", ALLOC_NONE, 5577428);
allocate([78,57,53,0] /* N95\00 */, "i8", ALLOC_NONE, 5577436);
allocate([66,105,108,105,110,101,97,114,32,105,110,116,101,114,112,111,108,97,116,105,111,110,46,46,46,10,0] /* Bilinear interpolati */, "i8", ALLOC_NONE, 5577440);
allocate([83,84,86,54,56,48,32,86,71,65,0] /* STV680 VGA\00 */, "i8", ALLOC_NONE, 5577468);
allocate([69,88,50,70,0] /* EX2F\00 */, "i8", ALLOC_NONE, 5577480);
allocate([87,66,53,53,48,0] /* WB550\00 */, "i8", ALLOC_NONE, 5577488);
allocate([87,66,50,48,48,48,0] /* WB2000\00 */, "i8", ALLOC_NONE, 5577496);
allocate([69,88,49,0] /* EX1\00 */, "i8", ALLOC_NONE, 5577504);
allocate([83,56,53,0] /* S85\00 */, "i8", ALLOC_NONE, 5577508);
allocate([68,67,45,56,51,51,109,0] /* DC-833m\00 */, "i8", ALLOC_NONE, 5577512);
allocate([79,112,116,105,111,32,55,53,48,90,0] /* Optio 750Z\00 */, "i8", ALLOC_NONE, 5577520);
allocate([79,112,116,105,111,32,83,0] /* Optio S\00 */, "i8", ALLOC_NONE, 5577532);
allocate([42,105,115,116,32,68,83,0] /* _ist DS\00 */, "i8", ALLOC_NONE, 5577540);
allocate([112,114,101,95,105,110,116,101,114,112,111,108,97,116,101,40,41,0] /* pre_interpolate()\00 */, "i8", ALLOC_NONE, 5577548);
allocate([42,105,115,116,32,68,0] /* _ist D\00 */, "i8", ALLOC_NONE, 5577568);
allocate([68,105,77,65,71,69,32,71,0] /* DiMAGE G\00 */, "i8", ALLOC_NONE, 5577576);
allocate([68,89,78,65,88,32,37,45,49,48,115,0] /* DYNAX %-10s\00 */, "i8", ALLOC_NONE, 5577588);
allocate([77,65,88,88,85,77,0] /* MAXXUM\00 */, "i8", ALLOC_NONE, 5577600);
allocate([68,89,78,65,88,0] /* DYNAX\00 */, "i8", ALLOC_NONE, 5577608);
allocate([65,76,80,72,65,0] /* ALPHA\00 */, "i8", ALLOC_NONE, 5577616);
allocate([68,105,77,65,71,69,32,65,0] /* DiMAGE A\00 */, "i8", ALLOC_NONE, 5577624);
allocate([75,68,45,53,49,48,90,0] /* KD-510Z\00 */, "i8", ALLOC_NONE, 5577636);
allocate([75,68,45,52,48,48,90,0] /* KD-400Z\00 */, "i8", ALLOC_NONE, 5577644);
allocate([82,68,49,55,53,0] /* RD175\00 */, "i8", ALLOC_NONE, 5577652);
allocate([115,99,97,108,101,95,99,111,108,111,114,115,40,41,0] /* scale_colors()\00 */, "i8", ALLOC_NONE, 5577660);
allocate([112,97,99,107,101,100,95,100,110,103,95,108,111,97,100,95,114,97,119,40,41,0] /* packed_dng_load_raw( */, "i8", ALLOC_NONE, 5577676);
allocate([83,50,80,114,111,0] /* S2Pro\00 */, "i8", ALLOC_NONE, 5577700);
allocate([69,52,53,48,48,0] /* E4500\00 */, "i8", ALLOC_NONE, 5577708);
allocate([68,105,77,65,71,69,32,90,50,0] /* DiMAGE Z2\00 */, "i8", ALLOC_NONE, 5577716);
allocate([79,112,116,105,111,32,51,51,87,82,0] /* Optio 33WR\00 */, "i8", ALLOC_NONE, 5577728);
allocate([69,50,53,48,48,0] /* E2500\00 */, "i8", ALLOC_NONE, 5577740);
allocate([69,50,49,48,48,0] /* E2100\00 */, "i8", ALLOC_NONE, 5577748);
allocate([69,57,57,53,0] /* E995\00 */, "i8", ALLOC_NONE, 5577756);
allocate([69,57,53,48,0] /* E950\00 */, "i8", ALLOC_NONE, 5577764);
allocate([49,32,0] /* 1 \00 */, "i8", ALLOC_NONE, 5577772);
allocate([67,79,79,76,80,73,88,32,80,0] /* COOLPIX P\00 */, "i8", ALLOC_NONE, 5577776);
allocate([67,111,114,114,101,99,116,105,110,103,32,99,104,114,111,109,97,116,105,99,32,97,98,101,114,114,97,116,105,111,110,46,46,46,10,0] /* Correcting chromatic */, "i8", ALLOC_NONE, 5577788);
allocate([67,79,79,76,80,73,88,32,80,55,55,48,48,0] /* COOLPIX P7700\00 */, "i8", ALLOC_NONE, 5577824);
allocate([68,51,48,48,0] /* D300\00 */, "i8", ALLOC_NONE, 5577840);
allocate([68,50,88,0] /* D2X\00 */, "i8", ALLOC_NONE, 5577848);
allocate([68,50,72,0] /* D2H\00 */, "i8", ALLOC_NONE, 5577852);
allocate([68,50,48,48,0] /* D200\00 */, "i8", ALLOC_NONE, 5577856);
allocate([68,49,48,48,0] /* D100\00 */, "i8", ALLOC_NONE, 5577864);
allocate([68,55,48,0] /* D70\00 */, "i8", ALLOC_NONE, 5577872);
allocate([68,53,48,0] /* D50\00 */, "i8", ALLOC_NONE, 5577876);
allocate([68,52,48,0] /* D40\00 */, "i8", ALLOC_NONE, 5577880);
allocate([68,52,0] /* D4\00 */, "i8", ALLOC_NONE, 5577884);
allocate([32,37,102,0] /*  %f\00 */, "i8", ALLOC_NONE, 5577888);
allocate([68,56,48,48,0] /* D800\00 */, "i8", ALLOC_NONE, 5577892);
allocate([68,54,48,48,0] /* D600\00 */, "i8", ALLOC_NONE, 5577900);
allocate([68,51,50,48,48,0] /* D3200\00 */, "i8", ALLOC_NONE, 5577908);
allocate([68,55,48,48,48,0] /* D7000\00 */, "i8", ALLOC_NONE, 5577916);
allocate([68,53,49,48,48,0] /* D5100\00 */, "i8", ALLOC_NONE, 5577924);
allocate([68,57,48,0] /* D90\00 */, "i8", ALLOC_NONE, 5577932);
allocate([68,53,48,48,48,0] /* D5000\00 */, "i8", ALLOC_NONE, 5577936);
allocate([68,51,49,48,48,0] /* D3100\00 */, "i8", ALLOC_NONE, 5577944);
allocate([68,55,48,48,0] /* D700\00 */, "i8", ALLOC_NONE, 5577952);
allocate([68,51,83,0] /* D3S\00 */, "i8", ALLOC_NONE, 5577960);
allocate([83,99,97,108,105,110,103,32,119,105,116,104,32,100,97,114,107,110,101,115,115,32,37,100,44,32,115,97,116,117,114,97,116,105,111,110,32,37,100,44,32,97,110,100,10,109,117,108,116,105,112,108,105,101,114,115,0] /* Scaling with darknes */, "i8", ALLOC_NONE, 5577964);
allocate([68,51,0] /* D3\00 */, "i8", ALLOC_NONE, 5578024);
allocate([68,51,48,48,48,0] /* D3000\00 */, "i8", ALLOC_NONE, 5578028);
allocate([68,56,48,0] /* D80\00 */, "i8", ALLOC_NONE, 5578036);
allocate([68,54,48,0] /* D60\00 */, "i8", ALLOC_NONE, 5578040);
allocate([68,52,48,88,0] /* D40X\00 */, "i8", ALLOC_NONE, 5578044);
allocate([68,49,88,0] /* D1X\00 */, "i8", ALLOC_NONE, 5578052);
allocate([68,49,0] /* D1\00 */, "i8", ALLOC_NONE, 5578056);
allocate([69,79,83,32,54,48,48,68,0] /* EOS 600D\00 */, "i8", ALLOC_NONE, 5578060);
allocate([69,79,83,32,53,53,48,68,0] /* EOS 550D\00 */, "i8", ALLOC_NONE, 5578072);
allocate([69,79,83,45,49,68,32,88,0] /* EOS-1D X\00 */, "i8", ALLOC_NONE, 5578084);
allocate([37,115,58,32,67,97,110,110,111,116,32,117,115,101,32,99,97,109,101,114,97,32,119,104,105,116,101,32,98,97,108,97,110,99,101,46,10,0] /* %s: Cannot use camer */, "i8", ALLOC_NONE, 5578096);
allocate([69,79,83,32,54,53,48,68,0] /* EOS 650D\00 */, "i8", ALLOC_NONE, 5578136);
allocate([69,79,83,32,53,48,48,68,0] /* EOS 500D\00 */, "i8", ALLOC_NONE, 5578148);
allocate([69,79,83,32,49,49,48,48,68,0] /* EOS 1100D\00 */, "i8", ALLOC_NONE, 5578160);
allocate([69,79,83,32,52,53,48,68,0] /* EOS 450D\00 */, "i8", ALLOC_NONE, 5578172);
allocate([69,79,83,32,49,48,48,48,68,0] /* EOS 1000D\00 */, "i8", ALLOC_NONE, 5578184);
allocate([69,79,83,32,52,48,48,68,0] /* EOS 400D\00 */, "i8", ALLOC_NONE, 5578196);
allocate([69,79,83,32,51,53,48,68,0] /* EOS 350D\00 */, "i8", ALLOC_NONE, 5578208);
allocate([69,79,83,32,68,50,48,48,48,67,0] /* EOS D2000C\00 */, "i8", ALLOC_NONE, 5578220);
allocate([69,79,83,32,51,48,48,68,0] /* EOS 300D\00 */, "i8", ALLOC_NONE, 5578232);
allocate([80,111,119,101,114,83,104,111,116,32,71,49,0] /* PowerShot G1\00 */, "i8", ALLOC_NONE, 5578244);
allocate([119,97,118,101,108,101,116,95,100,101,110,111,105,115,101,40,41,0] /* wavelet_denoise()\00 */, "i8", ALLOC_NONE, 5578260);
allocate([80,111,119,101,114,83,104,111,116,32,80,114,111,57,48,32,73,83,0] /* PowerShot Pro90 IS\0 */, "i8", ALLOC_NONE, 5578280);
allocate([80,111,119,101,114,83,104,111,116,32,83,88,51,48,32,73,83,0] /* PowerShot SX30 IS\00 */, "i8", ALLOC_NONE, 5578300);
allocate([80,111,119,101,114,83,104,111,116,32,83,88,50,50,48,32,72,83,0] /* PowerShot SX220 HS\0 */, "i8", ALLOC_NONE, 5578320);
allocate([80,111,119,101,114,83,104,111,116,32,83,88,50,48,32,73,83,0] /* PowerShot SX20 IS\00 */, "i8", ALLOC_NONE, 5578340);
allocate([80,111,119,101,114,83,104,111,116,32,83,88,49,50,48,32,73,83,0] /* PowerShot SX120 IS\0 */, "i8", ALLOC_NONE, 5578360);
allocate([80,111,119,101,114,83,104,111,116,32,83,88,49,49,48,32,73,83,0] /* PowerShot SX110 IS\0 */, "i8", ALLOC_NONE, 5578380);
allocate([80,111,119,101,114,83,104,111,116,32,83,51,32,73,83,0] /* PowerShot S3 IS\00 */, "i8", ALLOC_NONE, 5578400);
allocate([80,111,119,101,114,83,104,111,116,32,65,54,53,48,0] /* PowerShot A650\00 */, "i8", ALLOC_NONE, 5578416);
allocate([80,111,119,101,114,83,104,111,116,32,65,54,52,48,0] /* PowerShot A640\00 */, "i8", ALLOC_NONE, 5578432);
allocate([80,111,119,101,114,83,104,111,116,32,65,54,51,48,0] /* PowerShot A630\00 */, "i8", ALLOC_NONE, 5578448);
allocate([87,97,118,101,108,101,116,32,100,101,110,111,105,115,105,110,103,46,46,46,10,0] /* Wavelet denoising... */, "i8", ALLOC_NONE, 5578464);
allocate([80,111,119,101,114,83,104,111,116,32,65,55,50,48,32,73,83,0] /* PowerShot A720 IS\00 */, "i8", ALLOC_NONE, 5578488);
allocate([80,111,119,101,114,83,104,111,116,32,65,52,55,48,0] /* PowerShot A470\00 */, "i8", ALLOC_NONE, 5578508);
allocate([80,111,119,101,114,83,104,111,116,32,65,54,50,48,0] /* PowerShot A620\00 */, "i8", ALLOC_NONE, 5578524);
allocate([83,50,32,73,83,0] /* S2 IS\00 */, "i8", ALLOC_NONE, 5578540);
allocate([80,111,119,101,114,83,104,111,116,32,65,54,49,48,0] /* PowerShot A610\00 */, "i8", ALLOC_NONE, 5578548);
allocate([80,111,119,101,114,83,104,111,116,32,65,53,51,48,0] /* PowerShot A530\00 */, "i8", ALLOC_NONE, 5578564);
allocate([80,111,119,101,114,83,104,111,116,32,65,52,54,48,0] /* PowerShot A460\00 */, "i8", ALLOC_NONE, 5578580);
allocate([80,111,119,101,114,83,104,111,116,32,83,68,51,48,48,0] /* PowerShot SD300\00 */, "i8", ALLOC_NONE, 5578596);
allocate([80,111,119,101,114,83,104,111,116,32,80,114,111,55,48,0] /* PowerShot Pro70\00 */, "i8", ALLOC_NONE, 5578612);
allocate([80,111,119,101,114,83,104,111,116,32,65,53,48,0] /* PowerShot A50\00 */, "i8", ALLOC_NONE, 5578628);
allocate([115,117,98,116,114,97,99,116,40,41,0] /* subtract()\00 */, "i8", ALLOC_NONE, 5578644);
allocate([80,111,119,101,114,83,104,111,116,32,65,53,32,90,111,111,109,0] /* PowerShot A5 Zoom\00 */, "i8", ALLOC_NONE, 5578656);
allocate([80,111,119,101,114,83,104,111,116,32,65,53,0] /* PowerShot A5\00 */, "i8", ALLOC_NONE, 5578676);
allocate([80,111,119,101,114,83,104,111,116,32,54,48,48,0] /* PowerShot 600\00 */, "i8", ALLOC_NONE, 5578692);
allocate([54,52,53,68,0] /* 645D\00 */, "i8", ALLOC_NONE, 5578708);
allocate([75,45,55,0] /* K-7\00 */, "i8", ALLOC_NONE, 5578716);
allocate([75,45,53,0] /* K-5\00 */, "i8", ALLOC_NONE, 5578720);
allocate([75,45,120,0] /* K-x\00 */, "i8", ALLOC_NONE, 5578724);
allocate([75,45,114,0] /* K-r\00 */, "i8", ALLOC_NONE, 5578728);
allocate([68,105,103,105,116,97,108,32,67,97,109,101,114,97,32,0] /* Digital Camera \00 */, "i8", ALLOC_NONE, 5578732);
allocate([70,105,110,101,80,105,120,32,0] /* FinePix \00 */, "i8", ALLOC_NONE, 5578748);
allocate([37,115,32,104,97,115,32,116,104,101,32,119,114,111,110,103,32,100,105,109,101,110,115,105,111,110,115,33,10,0] /* %s has the wrong dim */, "i8", ALLOC_NONE, 5578760);
allocate([70,73,76,69,32,86,69,82,83,73,79,78,0] /* FILE VERSION\00 */, "i8", ALLOC_NONE, 5578792);
allocate([32,68,105,103,105,116,97,108,32,67,97,109,101,114,97,0] /*  Digital Camera\00 */, "i8", ALLOC_NONE, 5578808);
allocate([32,68,73,71,73,84,65,76,32,67,65,77,69,82,65,0] /*  DIGITAL CAMERA\00 */, "i8", ALLOC_NONE, 5578824);
allocate([67,73,0] /* CI\00 */, "i8", ALLOC_NONE, 5578840);
allocate([70,79,86,98,0] /* FOVb\00 */, "i8", ALLOC_NONE, 5578844);
allocate([0,77,82,77,0] /* \00MRM\00 */, "i8", ALLOC_NONE, 5578852);
allocate([80,87,65,68,0] /* PWAD\00 */, "i8", ALLOC_NONE, 5578860);
allocate([68,83,67,45,73,109,97,103,101,0] /* DSC-Image\00 */, "i8", ALLOC_NONE, 5578868);
allocate([37,115,32,105,115,32,110,111,116,32,97,32,118,97,108,105,100,32,80,71,77,32,102,105,108,101,33,10,0] /* %s is not a valid PG */, "i8", ALLOC_NONE, 5578880);
allocate([82,69,68,49,0] /* RED1\00 */, "i8", ALLOC_NONE, 5578912);
allocate([65,82,82,73,0] /* ARRI\00 */, "i8", ALLOC_NONE, 5578920);
allocate([88,50,0] /* X2\00 */, "i8", ALLOC_NONE, 5578928);
allocate([78,79,75,73,65,0] /* NOKIA\00 */, "i8", ALLOC_NONE, 5578932);
allocate([78,79,75,73,65,82,65,87,0] /* NOKIARAW\00 */, "i8", ALLOC_NONE, 5578940);
allocate([0,1,0,1,0,64,0] /* \00\01\00\01\00@\00 */, "i8", ALLOC_NONE, 5578952);
allocate([81,117,105,99,107,84,97,107,101,32,49,53,48,0] /* QuickTake 150\00 */, "i8", ALLOC_NONE, 5578960);
allocate([113,107,116,110,0] /* qktn\00 */, "i8", ALLOC_NONE, 5578976);
allocate([81,117,105,99,107,84,97,107,101,32,49,48,48,0] /* QuickTake 100\00 */, "i8", ALLOC_NONE, 5578984);
allocate([65,112,112,108,101,0] /* Apple\00 */, "i8", ALLOC_NONE, 5579000);
allocate([114,98,0] /* rb\00 */, "i8", ALLOC_NONE, 5579008);
allocate([37,100,46,37,100,46,37,100,0] /* %d.%d.%d\00 */, "i8", ALLOC_NONE, 5579012);
allocate([113,107,116,107,0] /* qktk\00 */, "i8", ALLOC_NONE, 5579024);
allocate([70,111,116,111,109,97,110,32,80,105,120,116,117,114,97,0] /* Fotoman Pixtura\00 */, "i8", ALLOC_NONE, 5579032);
allocate([76,111,103,105,116,101,99,104,0] /* Logitech\00 */, "i8", ALLOC_NONE, 5579048);
allocate([80,88,78,0] /* PXN\00 */, "i8", ALLOC_NONE, 5579060);
allocate([78,32,68,105,103,105,116,97,108,0] /* N Digital\00 */, "i8", ALLOC_NONE, 5579064);
allocate([67,111,110,116,97,120,0] /* Contax\00 */, "i8", ALLOC_NONE, 5579076);
allocate([65,82,69,67,79,89,75,0] /* ARECOYK\00 */, "i8", ALLOC_NONE, 5579084);
allocate([69,120,105,102,0] /* Exif\00 */, "i8", ALLOC_NONE, 5579092);
allocate([255,216,255,225,0] /* \FF\D8\FF\E1\00 */, "i8", ALLOC_NONE, 5579100);
allocate([72,69,65,80,67,67,68,82,0] /* HEAPCCDR\00 */, "i8", ALLOC_NONE, 5579108);
allocate([32,37,100,44,37,100,0] /*  %d,%d\00 */, "i8", ALLOC_NONE, 5579120);
allocate([77,79,84,79,82,79,76,65,0] /* MOTOROLA\00 */, "i8", ALLOC_NONE, 5579128);
allocate([77,97,109,105,121,97,0] /* Mamiya\00 */, "i8", ALLOC_NONE, 5579140);
allocate([67,65,83,73,79,0] /* CASIO\00 */, "i8", ALLOC_NONE, 5579148);
allocate([75,111,110,105,99,97,0] /* Konica\00 */, "i8", ALLOC_NONE, 5579156);
allocate([77,105,110,111,108,116,97,0] /* Minolta\00 */, "i8", ALLOC_NONE, 5579164);
allocate([77,73,78,79,76,84,65,0] /* MINOLTA\00 */, "i8", ALLOC_NONE, 5579172);
allocate([37,115,32,37,115,0] /* %s %s\00 */, "i8", ALLOC_NONE, 5579180);
allocate([83,79,78,89,32,83,76,84,45,65,57,57,0] /* SONY SLT-A99\00 */, "i8", ALLOC_NONE, 5579188);
allocate([83,79,78,89,32,83,76,84,45,65,55,55,0] /* SONY SLT-A77\00 */, "i8", ALLOC_NONE, 5579204);
allocate([83,79,78,89,32,83,76,84,45,65,54,53,0] /* SONY SLT-A65\00 */, "i8", ALLOC_NONE, 5579220);
allocate([70,105,120,101,100,32,100,101,97,100,32,112,105,120,101,108,115,32,97,116,58,0] /* Fixed dead pixels at */, "i8", ALLOC_NONE, 5579236);
allocate([83,79,78,89,32,83,76,84,45,65,53,55,0] /* SONY SLT-A57\00 */, "i8", ALLOC_NONE, 5579260);
allocate([83,79,78,89,32,83,76,84,45,65,53,53,0] /* SONY SLT-A55\00 */, "i8", ALLOC_NONE, 5579276);
allocate([83,79,78,89,32,83,76,84,45,65,51,55,0] /* SONY SLT-A37\00 */, "i8", ALLOC_NONE, 5579292);
allocate([83,79,78,89,32,83,76,84,45,65,51,53,0] /* SONY SLT-A35\00 */, "i8", ALLOC_NONE, 5579308);
allocate([83,79,78,89,32,83,76,84,45,65,51,51,0] /* SONY SLT-A33\00 */, "i8", ALLOC_NONE, 5579324);
allocate([83,79,78,89,32,78,69,88,0] /* SONY NEX\00 */, "i8", ALLOC_NONE, 5579340);
allocate([83,79,78,89,32,78,69,88,45,55,0] /* SONY NEX-7\00 */, "i8", ALLOC_NONE, 5579352);
allocate([83,79,78,89,32,78,69,88,45,54,0] /* SONY NEX-6\00 */, "i8", ALLOC_NONE, 5579364);
allocate([83,79,78,89,32,78,69,88,45,53,0] /* SONY NEX-5\00 */, "i8", ALLOC_NONE, 5579376);
allocate([83,79,78,89,32,78,69,88,45,51,0] /* SONY NEX-3\00 */, "i8", ALLOC_NONE, 5579388);
allocate([37,100,32,37,100,32,37,100,0] /* %d %d %d\00 */, "i8", ALLOC_NONE, 5579400);
allocate([83,79,78,89,32,78,69,88,45,53,82,0] /* SONY NEX-5R\00 */, "i8", ALLOC_NONE, 5579412);
allocate([83,79,78,89,32,78,69,88,45,53,78,0] /* SONY NEX-5N\00 */, "i8", ALLOC_NONE, 5579424);
allocate([83,79,78,89,32,68,83,76,82,45,65,57,48,48,0] /* SONY DSLR-A900\00 */, "i8", ALLOC_NONE, 5579436);
allocate([83,79,78,89,32,68,83,76,82,45,65,56,53,48,0] /* SONY DSLR-A850\00 */, "i8", ALLOC_NONE, 5579452);
allocate([83,79,78,89,32,68,83,76,82,45,65,55,48,48,0] /* SONY DSLR-A700\00 */, "i8", ALLOC_NONE, 5579468);
allocate([83,79,78,89,32,68,83,76,82,45,65,53,0] /* SONY DSLR-A5\00 */, "i8", ALLOC_NONE, 5579484);
allocate([83,79,78,89,32,68,83,76,82,45,65,53,56,48,0] /* SONY DSLR-A580\00 */, "i8", ALLOC_NONE, 5579500);
allocate([83,79,78,89,32,68,83,76,82,45,65,52,53,48,0] /* SONY DSLR-A450\00 */, "i8", ALLOC_NONE, 5579516);
allocate([83,79,78,89,32,68,83,76,82,45,65,51,57,48,0] /* SONY DSLR-A390\00 */, "i8", ALLOC_NONE, 5579532);
allocate([83,79,78,89,32,68,83,76,82,45,65,51,56,48,0] /* SONY DSLR-A380\00 */, "i8", ALLOC_NONE, 5579548);
allocate([47,46,98,97,100,112,105,120,101,108,115,0] /* /.badpixels\00 */, "i8", ALLOC_NONE, 5579564);
allocate([83,79,78,89,32,68,83,76,82,45,65,51,53,48,0] /* SONY DSLR-A350\00 */, "i8", ALLOC_NONE, 5579576);
allocate([83,79,78,89,32,68,83,76,82,45,65,51,51,48,0] /* SONY DSLR-A330\00 */, "i8", ALLOC_NONE, 5579592);
allocate([83,79,78,89,32,68,83,76,82,45,65,51,48,48,0] /* SONY DSLR-A300\00 */, "i8", ALLOC_NONE, 5579608);
allocate([83,79,78,89,32,68,83,76,82,45,65,50,0] /* SONY DSLR-A2\00 */, "i8", ALLOC_NONE, 5579624);
allocate([83,79,78,89,32,68,83,76,82,45,65,50,57,48,0] /* SONY DSLR-A290\00 */, "i8", ALLOC_NONE, 5579640);
allocate([83,79,78,89,32,68,83,76,82,45,65,49,48,48,0] /* SONY DSLR-A100\00 */, "i8", ALLOC_NONE, 5579656);
allocate([83,79,78,89,32,68,83,67,45,82,88,49,0] /* SONY DSC-RX1\00 */, "i8", ALLOC_NONE, 5579672);
allocate([83,79,78,89,32,68,83,67,45,82,88,49,48,48,0] /* SONY DSC-RX100\00 */, "i8", ALLOC_NONE, 5579688);
allocate([83,79,78,89,32,68,83,67,45,86,51,0] /* SONY DSC-V3\00 */, "i8", ALLOC_NONE, 5579704);
allocate([83,79,78,89,32,68,83,67,45,82,49,0] /* SONY DSC-R1\00 */, "i8", ALLOC_NONE, 5579716);
allocate([114,0] /* r\00 */, "i8", ALLOC_NONE, 5579728);
allocate([83,79,78,89,32,68,83,67,45,70,56,50,56,0] /* SONY DSC-F828\00 */, "i8", ALLOC_NONE, 5579732);
allocate([83,105,110,97,114,0] /* Sinar\00 */, "i8", ALLOC_NONE, 5579748);
allocate([83,65,77,83,85,78,71,32,83,56,53,0] /* SAMSUNG S85\00 */, "i8", ALLOC_NONE, 5579756);
allocate([83,65,77,83,85,78,71,32,71,88,45,49,0] /* SAMSUNG GX-1\00 */, "i8", ALLOC_NONE, 5579768);
allocate([83,65,77,83,85,78,71,32,87,66,50,48,48,48,0] /* SAMSUNG WB2000\00 */, "i8", ALLOC_NONE, 5579784);
allocate([83,65,77,83,85,78,71,32,78,88,0] /* SAMSUNG NX\00 */, "i8", ALLOC_NONE, 5579800);
allocate([83,65,77,83,85,78,71,32,78,88,49,48,48,48,0] /* SAMSUNG NX1000\00 */, "i8", ALLOC_NONE, 5579812);
allocate([83,65,77,83,85,78,71,32,78,88,50,0] /* SAMSUNG NX2\00 */, "i8", ALLOC_NONE, 5579828);
allocate([83,65,77,83,85,78,71,32,69,88,50,70,0] /* SAMSUNG EX2F\00 */, "i8", ALLOC_NONE, 5579840);
allocate([83,65,77,83,85,78,71,32,69,88,49,0] /* SAMSUNG EX1\00 */, "i8", ALLOC_NONE, 5579856);
allocate([68,67,50,0] /* DC2\00 */, "i8", ALLOC_NONE, 5579868);
allocate([82,69,68,32,79,78,69,0] /* RED ONE\00 */, "i8", ALLOC_NONE, 5579872);
allocate([80,104,97,115,101,32,79,110,101,32,80,54,53,0] /* Phase One P65\00 */, "i8", ALLOC_NONE, 5579880);
allocate([80,104,97,115,101,32,79,110,101,32,80,52,48,0] /* Phase One P40\00 */, "i8", ALLOC_NONE, 5579896);
allocate([80,104,97,115,101,32,79,110,101,32,80,32,52,53,0] /* Phase One P 45\00 */, "i8", ALLOC_NONE, 5579912);
allocate([80,104,97,115,101,32,79,110,101,32,80,32,51,48,0] /* Phase One P 30\00 */, "i8", ALLOC_NONE, 5579928);
allocate([80,104,97,115,101,32,79,110,101,32,80,32,50,0] /* Phase One P 2\00 */, "i8", ALLOC_NONE, 5579944);
allocate([80,104,97,115,101,32,79,110,101,32,72,32,50,53,0] /* Phase One H 25\00 */, "i8", ALLOC_NONE, 5579960);
allocate([80,104,97,115,101,32,79,110,101,32,72,32,50,48,0] /* Phase One H 20\00 */, "i8", ALLOC_NONE, 5579976);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,88,49,0] /* Panasonic DMC-GX1\00 */, "i8", ALLOC_NONE, 5579992);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,72,51,0] /* Panasonic DMC-GH3\00 */, "i8", ALLOC_NONE, 5580012);
allocate([102,111,118,101,111,110,95,105,110,116,101,114,112,111,108,97,116,101,40,41,0] /* foveon_interpolate() */, "i8", ALLOC_NONE, 5580032);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,72,50,0] /* Panasonic DMC-GH2\00 */, "i8", ALLOC_NONE, 5580056);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,72,49,0] /* Panasonic DMC-GH1\00 */, "i8", ALLOC_NONE, 5580076);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,70,53,0] /* Panasonic DMC-GF5\00 */, "i8", ALLOC_NONE, 5580096);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,70,51,0] /* Panasonic DMC-GF3\00 */, "i8", ALLOC_NONE, 5580116);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,70,50,0] /* Panasonic DMC-GF2\00 */, "i8", ALLOC_NONE, 5580136);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,70,49,0] /* Panasonic DMC-GF1\00 */, "i8", ALLOC_NONE, 5580156);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,53,0] /* Panasonic DMC-G5\00 */, "i8", ALLOC_NONE, 5580176);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,51,0] /* Panasonic DMC-G3\00 */, "i8", ALLOC_NONE, 5580196);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,50,0] /* Panasonic DMC-G2\00 */, "i8", ALLOC_NONE, 5580216);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,49,0] /* Panasonic DMC-G1\00 */, "i8", ALLOC_NONE, 5580236);
allocate([66,97,100,80,105,120,101,108,115,0] /* BadPixels\00 */, "i8", ALLOC_NONE, 5580256);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,49,48,0] /* Panasonic DMC-G10\00 */, "i8", ALLOC_NONE, 5580268);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,88,49,53,48,0] /* Panasonic DMC-FX150\ */, "i8", ALLOC_NONE, 5580288);
allocate([76,69,73,67,65,32,86,45,76,85,88,32,52,0] /* LEICA V-LUX 4\00 */, "i8", ALLOC_NONE, 5580308);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,50,48,48,0] /* Panasonic DMC-FZ200\ */, "i8", ALLOC_NONE, 5580324);
allocate([76,69,73,67,65,32,86,45,76,85,88,32,51,0] /* LEICA V-LUX 3\00 */, "i8", ALLOC_NONE, 5580344);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,49,53,48,0] /* Panasonic DMC-FZ150\ */, "i8", ALLOC_NONE, 5580360);
allocate([76,69,73,67,65,32,86,45,76,85,88,32,50,0] /* LEICA V-LUX 2\00 */, "i8", ALLOC_NONE, 5580380);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,49,48,48,0] /* Panasonic DMC-FZ100\ */, "i8", ALLOC_NONE, 5580396);
allocate([76,69,73,67,65,32,68,45,76,85,88,32,54,0] /* LEICA D-LUX 6\00 */, "i8", ALLOC_NONE, 5580416);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,88,55,0] /* Panasonic DMC-LX7\00 */, "i8", ALLOC_NONE, 5580432);
allocate([83,112,97,116,105,97,108,71,97,105,110,0] /* SpatialGain\00 */, "i8", ALLOC_NONE, 5580452);
allocate([76,69,73,67,65,32,68,45,76,85,88,32,53,0] /* LEICA D-LUX 5\00 */, "i8", ALLOC_NONE, 5580464);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,88,53,0] /* Panasonic DMC-LX5\00 */, "i8", ALLOC_NONE, 5580480);
allocate([76,69,73,67,65,32,68,45,76,85,88,32,52,0] /* LEICA D-LUX 4\00 */, "i8", ALLOC_NONE, 5580500);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,88,51,0] /* Panasonic DMC-LX3\00 */, "i8", ALLOC_NONE, 5580516);
allocate([76,69,73,67,65,32,68,45,76,85,88,51,0] /* LEICA D-LUX3\00 */, "i8", ALLOC_NONE, 5580536);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,88,50,0] /* Panasonic DMC-LX2\00 */, "i8", ALLOC_NONE, 5580552);
allocate([76,69,73,67,65,32,68,45,76,85,88,50,0] /* LEICA D-LUX2\00 */, "i8", ALLOC_NONE, 5580572);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,88,49,0] /* Panasonic DMC-LX1\00 */, "i8", ALLOC_NONE, 5580588);
allocate([76,69,73,67,65,32,68,73,71,73,76,85,88,32,50,0] /* LEICA DIGILUX 2\00 */, "i8", ALLOC_NONE, 5580608);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,67,49,0] /* Panasonic DMC-LC1\00 */, "i8", ALLOC_NONE, 5580624);
allocate([37,115,82,71,66,78,101,117,116,114,97,108,0] /* %sRGBNeutral\00 */, "i8", ALLOC_NONE, 5580644);
allocate([108,106,112,101,103,95,115,116,97,114,116,40,41,0] /* ljpeg_start()\00 */, "i8", ALLOC_NONE, 5580660);
allocate([76,69,73,67,65,32,68,73,71,73,76,85,88,32,51,0] /* LEICA DIGILUX 3\00 */, "i8", ALLOC_NONE, 5580676);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,49,0] /* Panasonic DMC-L1\00 */, "i8", ALLOC_NONE, 5580692);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,49,48,0] /* Panasonic DMC-L10\00 */, "i8", ALLOC_NONE, 5580712);
allocate([76,69,73,67,65,32,86,45,76,85,88,49,0] /* LEICA V-LUX1\00 */, "i8", ALLOC_NONE, 5580732);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,53,48,0] /* Panasonic DMC-FZ50\0 */, "i8", ALLOC_NONE, 5580748);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,52,0] /* Panasonic DMC-FZ4\00 */, "i8", ALLOC_NONE, 5580768);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,51,0] /* Panasonic DMC-FZ3\00 */, "i8", ALLOC_NONE, 5580788);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,51,48,0] /* Panasonic DMC-FZ30\0 */, "i8", ALLOC_NONE, 5580808);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,50,56,0] /* Panasonic DMC-FZ28\0 */, "i8", ALLOC_NONE, 5580828);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,49,56,0] /* Panasonic DMC-FZ18\0 */, "i8", ALLOC_NONE, 5580848);
allocate([87,104,105,116,101,66,97,108,97,110,99,101,67,111,114,114,101,99,116,105,111,110,115,0] /* WhiteBalanceCorrecti */, "i8", ALLOC_NONE, 5580868);
allocate([80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,56,0] /* Panasonic DMC-FZ8\00 */, "i8", ALLOC_NONE, 5580892);
allocate([80,69,78,84,65,88,32,54,52,53,68,0] /* PENTAX 645D\00 */, "i8", ALLOC_NONE, 5580912);
allocate([80,69,78,84,65,88,32,75,45,55,0] /* PENTAX K-7\00 */, "i8", ALLOC_NONE, 5580924);
allocate([80,69,78,84,65,88,32,75,45,53,0] /* PENTAX K-5\00 */, "i8", ALLOC_NONE, 5580936);
allocate([80,69,78,84,65,88,32,75,45,53,32,73,73,0] /* PENTAX K-5 II\00 */, "i8", ALLOC_NONE, 5580948);
allocate([80,69,78,84,65,88,32,75,45,114,0] /* PENTAX K-r\00 */, "i8", ALLOC_NONE, 5580964);
allocate([80,69,78,84,65,88,32,75,45,120,0] /* PENTAX K-x\00 */, "i8", ALLOC_NONE, 5580976);
allocate([80,69,78,84,65,88,32,75,45,109,0] /* PENTAX K-m\00 */, "i8", ALLOC_NONE, 5580988);
allocate([80,69,78,84,65,88,32,75,50,48,48,48,0] /* PENTAX K2000\00 */, "i8", ALLOC_NONE, 5581000);
allocate([80,69,78,84,65,88,32,75,50,48,48,68,0] /* PENTAX K200D\00 */, "i8", ALLOC_NONE, 5581016);
allocate([37,115,58,32,73,110,118,97,108,105,100,32,119,104,105,116,101,32,98,97,108,97,110,99,101,32,34,37,115,34,10,0] /* %s: Invalid white ba */, "i8", ALLOC_NONE, 5581032);
allocate([80,69,78,84,65,88,32,75,50,48,68,0] /* PENTAX K20D\00 */, "i8", ALLOC_NONE, 5581064);
allocate([80,69,78,84,65,88,32,75,49,0] /* PENTAX K1\00 */, "i8", ALLOC_NONE, 5581076);
allocate([80,69,78,84,65,88,32,75,49,48,68,0] /* PENTAX K10D\00 */, "i8", ALLOC_NONE, 5581088);
allocate([80,69,78,84,65,88,32,42,105,115,116,32,68,0] /* PENTAX _ist D\00 */, "i8", ALLOC_NONE, 5581100);
allocate([80,69,78,84,65,88,32,42,105,115,116,32,68,83,0] /* PENTAX _ist DS\00 */, "i8", ALLOC_NONE, 5581116);
allocate([80,69,78,84,65,88,32,42,105,115,116,32,68,83,50,0] /* PENTAX _ist DS2\00 */, "i8", ALLOC_NONE, 5581132);
allocate([80,69,78,84,65,88,32,42,105,115,116,32,68,76,0] /* PENTAX _ist DL\00 */, "i8", ALLOC_NONE, 5581148);
allocate([80,69,78,84,65,88,32,42,105,115,116,32,68,76,50,0] /* PENTAX _ist DL2\00 */, "i8", ALLOC_NONE, 5581164);
allocate([79,76,89,77,80,85,83,32,88,90,45,50,0] /* OLYMPUS XZ-2\00 */, "i8", ALLOC_NONE, 5581180);
allocate([79,76,89,77,80,85,83,32,88,90,45,49,0] /* OLYMPUS XZ-1\00 */, "i8", ALLOC_NONE, 5581196);
allocate([87,104,105,116,101,66,97,108,97,110,99,101,73,108,108,117,109,105,110,97,110,116,115,0] /* WhiteBalanceIllumina */, "i8", ALLOC_NONE, 5581212);
allocate([79,76,89,77,80,85,83,32,83,80,53,55,48,85,90,0] /* OLYMPUS SP570UZ\00 */, "i8", ALLOC_NONE, 5581236);
allocate([79,76,89,77,80,85,83,32,83,80,53,54,48,85,90,0] /* OLYMPUS SP560UZ\00 */, "i8", ALLOC_NONE, 5581252);
allocate([79,76,89,77,80,85,83,32,83,80,53,53,48,85,90,0] /* OLYMPUS SP550UZ\00 */, "i8", ALLOC_NONE, 5581268);
allocate([79,76,89,77,80,85,83,32,83,80,53,49,48,85,90,0] /* OLYMPUS SP510UZ\00 */, "i8", ALLOC_NONE, 5581284);
allocate([79,76,89,77,80,85,83,32,83,80,53,48,48,85,90,0] /* OLYMPUS SP500UZ\00 */, "i8", ALLOC_NONE, 5581300);
allocate([79,76,89,77,80,85,83,32,83,80,51,0] /* OLYMPUS SP3\00 */, "i8", ALLOC_NONE, 5581316);
allocate([79,76,89,77,80,85,83,32,83,80,51,53,48,0] /* OLYMPUS SP350\00 */, "i8", ALLOC_NONE, 5581328);
allocate([79,76,89,77,80,85,83,32,69,45,77,53,0] /* OLYMPUS E-M5\00 */, "i8", ALLOC_NONE, 5581344);
allocate([79,76,89,77,80,85,83,32,69,45,80,77,50,0] /* OLYMPUS E-PM2\00 */, "i8", ALLOC_NONE, 5581360);
allocate([79,76,89,77,80,85,83,32,69,45,80,77,49,0] /* OLYMPUS E-PM1\00 */, "i8", ALLOC_NONE, 5581376);
allocate([68,97,114,107,83,104,105,101,108,100,84,111,112,0] /* DarkShieldTop\00 */, "i8", ALLOC_NONE, 5581392);
allocate([79,76,89,77,80,85,83,32,69,45,80,76,53,0] /* OLYMPUS E-PL5\00 */, "i8", ALLOC_NONE, 5581408);
allocate([79,76,89,77,80,85,83,32,69,45,80,76,51,0] /* OLYMPUS E-PL3\00 */, "i8", ALLOC_NONE, 5581424);
allocate([79,76,89,77,80,85,83,32,69,45,80,76,50,0] /* OLYMPUS E-PL2\00 */, "i8", ALLOC_NONE, 5581440);
allocate([79,76,89,77,80,85,83,32,69,45,80,76,49,0] /* OLYMPUS E-PL1\00 */, "i8", ALLOC_NONE, 5581456);
allocate([79,76,89,77,80,85,83,32,69,45,80,76,49,115,0] /* OLYMPUS E-PL1s\00 */, "i8", ALLOC_NONE, 5581472);
allocate([79,76,89,77,80,85,83,32,69,45,80,51,0] /* OLYMPUS E-P3\00 */, "i8", ALLOC_NONE, 5581488);
allocate([79,76,89,77,80,85,83,32,69,45,80,50,0] /* OLYMPUS E-P2\00 */, "i8", ALLOC_NONE, 5581504);
allocate([79,76,89,77,80,85,83,32,69,45,80,49,0] /* OLYMPUS E-P1\00 */, "i8", ALLOC_NONE, 5581520);
allocate([79,76,89,77,80,85,83,32,69,45,54,50,48,0] /* OLYMPUS E-620\00 */, "i8", ALLOC_NONE, 5581536);
allocate([79,76,89,77,80,85,83,32,69,45,54,48,48,0] /* OLYMPUS E-600\00 */, "i8", ALLOC_NONE, 5581552);
allocate([68,97,114,107,83,104,105,101,108,100,66,111,116,116,111,109,0] /* DarkShieldBottom\00 */, "i8", ALLOC_NONE, 5581568);
allocate([79,76,89,77,80,85,83,32,69,45,53,0] /* OLYMPUS E-5\00 */, "i8", ALLOC_NONE, 5581588);
allocate([79,76,89,77,80,85,83,32,69,45,53,50,48,0] /* OLYMPUS E-520\00 */, "i8", ALLOC_NONE, 5581600);
allocate([79,76,89,77,80,85,83,32,69,45,53,49,48,0] /* OLYMPUS E-510\00 */, "i8", ALLOC_NONE, 5581616);
allocate([79,76,89,77,80,85,83,32,69,45,53,48,48,0] /* OLYMPUS E-500\00 */, "i8", ALLOC_NONE, 5581632);
allocate([79,76,89,77,80,85,83,32,69,45,52,53,48,0] /* OLYMPUS E-450\00 */, "i8", ALLOC_NONE, 5581648);
allocate([79,76,89,77,80,85,83,32,69,45,52,50,48,0] /* OLYMPUS E-420\00 */, "i8", ALLOC_NONE, 5581664);
allocate([79,76,89,77,80,85,83,32,69,45,52,49,48,0] /* OLYMPUS E-410\00 */, "i8", ALLOC_NONE, 5581680);
allocate([79,76,89,77,80,85,83,32,69,45,52,48,48,0] /* OLYMPUS E-400\00 */, "i8", ALLOC_NONE, 5581696);
allocate([79,76,89,77,80,85,83,32,69,45,51,0] /* OLYMPUS E-3\00 */, "i8", ALLOC_NONE, 5581712);
allocate([79,76,89,77,80,85,83,32,69,45,51,48,0] /* OLYMPUS E-30\00 */, "i8", ALLOC_NONE, 5581724);
allocate([68,97,114,107,68,114,105,102,116,0] /* DarkDrift\00 */, "i8", ALLOC_NONE, 5581740);
allocate([79,76,89,77,80,85,83,32,69,45,51,51,48,0] /* OLYMPUS E-330\00 */, "i8", ALLOC_NONE, 5581752);
allocate([79,76,89,77,80,85,83,32,69,45,51,48,48,0] /* OLYMPUS E-300\00 */, "i8", ALLOC_NONE, 5581768);
allocate([79,76,89,77,80,85,83,32,69,45,50,48,0] /* OLYMPUS E-20\00 */, "i8", ALLOC_NONE, 5581784);
allocate([79,76,89,77,80,85,83,32,69,45,49,0] /* OLYMPUS E-1\00 */, "i8", ALLOC_NONE, 5581800);
allocate([79,76,89,77,80,85,83,32,69,45,49,48,0] /* OLYMPUS E-10\00 */, "i8", ALLOC_NONE, 5581812);
allocate([79,76,89,77,80,85,83,32,67,56,48,0] /* OLYMPUS C80\00 */, "i8", ALLOC_NONE, 5581828);
allocate([79,76,89,77,80,85,83,32,67,55,48,0] /* OLYMPUS C70\00 */, "i8", ALLOC_NONE, 5581840);
allocate([79,76,89,77,80,85,83,32,67,55,48,55,48,0] /* OLYMPUS C7070\00 */, "i8", ALLOC_NONE, 5581852);
allocate([79,76,89,77,80,85,83,32,67,53,48,54,48,0] /* OLYMPUS C5060\00 */, "i8", ALLOC_NONE, 5581868);
allocate([79,76,89,77,80,85,83,32,67,53,48,53,48,0] /* OLYMPUS C5050\00 */, "i8", ALLOC_NONE, 5581884);
allocate([67,111,108,117,109,110,70,105,108,116,101,114,0] /* ColumnFilter\00 */, "i8", ALLOC_NONE, 5581900);
allocate([78,73,75,79,78,32,49,32,0] /* NIKON 1 \00 */, "i8", ALLOC_NONE, 5581916);
allocate([78,73,75,79,78,32,49,32,86,50,0] /* NIKON 1 V2\00 */, "i8", ALLOC_NONE, 5581928);
allocate([78,73,75,79,78,32,67,79,79,76,80,73,88,32,80,55,55,48,48,0] /* NIKON COOLPIX P7700\ */, "i8", ALLOC_NONE, 5581940);
allocate([78,73,75,79,78,32,67,79,79,76,80,73,88,32,80,55,49,48,48,0] /* NIKON COOLPIX P7100\ */, "i8", ALLOC_NONE, 5581960);
allocate([78,73,75,79,78,32,67,79,79,76,80,73,88,32,80,55,48,48,48,0] /* NIKON COOLPIX P7000\ */, "i8", ALLOC_NONE, 5581980);
allocate([78,73,75,79,78,32,67,79,79,76,80,73,88,32,80,54,48,48,48,0] /* NIKON COOLPIX P6000\ */, "i8", ALLOC_NONE, 5582000);
allocate([78,73,75,79,78,32,69,56,56,48,48,0] /* NIKON E8800\00 */, "i8", ALLOC_NONE, 5582020);
allocate([78,73,75,79,78,32,69,56,55,48,48,0] /* NIKON E8700\00 */, "i8", ALLOC_NONE, 5582032);
allocate([78,73,75,79,78,32,69,56,52,48,48,0] /* NIKON E8400\00 */, "i8", ALLOC_NONE, 5582044);
allocate([78,73,75,79,78,32,69,53,55,48,48,0] /* NIKON E5700\00 */, "i8", ALLOC_NONE, 5582056);
allocate([67,111,108,111,114,68,81,67,97,109,82,71,66,0] /* ColorDQCamRGB\00 */, "i8", ALLOC_NONE, 5582068);
allocate([78,73,75,79,78,32,69,53,52,48,48,0] /* NIKON E5400\00 */, "i8", ALLOC_NONE, 5582084);
allocate([78,73,75,79,78,32,69,53,48,48,48,0] /* NIKON E5000\00 */, "i8", ALLOC_NONE, 5582096);
allocate([78,73,75,79,78,32,69,52,53,48,48,0] /* NIKON E4500\00 */, "i8", ALLOC_NONE, 5582108);
allocate([78,73,75,79,78,32,69,52,51,48,48,0] /* NIKON E4300\00 */, "i8", ALLOC_NONE, 5582120);
allocate([78,73,75,79,78,32,69,51,50,48,48,0] /* NIKON E3200\00 */, "i8", ALLOC_NONE, 5582132);
allocate([78,73,75,79,78,32,69,50,53,48,48,0] /* NIKON E2500\00 */, "i8", ALLOC_NONE, 5582144);
allocate([78,73,75,79,78,32,69,50,49,48,48,0] /* NIKON E2100\00 */, "i8", ALLOC_NONE, 5582156);
allocate([78,73,75,79,78,32,69,57,57,53,0] /* NIKON E995\00 */, "i8", ALLOC_NONE, 5582168);
allocate([78,73,75,79,78,32,69,57,53,48,0] /* NIKON E950\00 */, "i8", ALLOC_NONE, 5582180);
allocate([78,73,75,79,78,32,68,57,48,0] /* NIKON D90\00 */, "i8", ALLOC_NONE, 5582192);
allocate([67,111,108,111,114,68,81,0] /* ColorDQ\00 */, "i8", ALLOC_NONE, 5582204);
allocate([78,73,75,79,78,32,68,56,48,0] /* NIKON D80\00 */, "i8", ALLOC_NONE, 5582212);
allocate([78,73,75,79,78,32,68,56,48,48,0] /* NIKON D800\00 */, "i8", ALLOC_NONE, 5582224);
allocate([78,73,75,79,78,32,68,55,48,0] /* NIKON D70\00 */, "i8", ALLOC_NONE, 5582236);
allocate([78,73,75,79,78,32,68,55,48,48,0] /* NIKON D700\00 */, "i8", ALLOC_NONE, 5582248);
allocate([78,73,75,79,78,32,68,55,48,48,48,0] /* NIKON D7000\00 */, "i8", ALLOC_NONE, 5582260);
allocate([78,73,75,79,78,32,68,54,48,0] /* NIKON D60\00 */, "i8", ALLOC_NONE, 5582272);
allocate([78,73,75,79,78,32,68,54,48,48,0] /* NIKON D600\00 */, "i8", ALLOC_NONE, 5582284);
allocate([78,73,75,79,78,32,68,53,48,0] /* NIKON D50\00 */, "i8", ALLOC_NONE, 5582296);
allocate([78,73,75,79,78,32,68,53,49,48,48,0] /* NIKON D5100\00 */, "i8", ALLOC_NONE, 5582308);
allocate([78,73,75,79,78,32,68,53,48,48,48,0] /* NIKON D5000\00 */, "i8", ALLOC_NONE, 5582320);
allocate([73,110,99,108,117,100,101,66,108,111,99,107,115,0] /* IncludeBlocks\00 */, "i8", ALLOC_NONE, 5582332);
allocate([109,97,107,101,95,100,101,99,111,100,101,114,40,41,0] /* make_decoder()\00 */, "i8", ALLOC_NONE, 5582348);
allocate([78,73,75,79,78,32,68,52,0] /* NIKON D4\00 */, "i8", ALLOC_NONE, 5582364);
allocate([78,73,75,79,78,32,68,52,48,0] /* NIKON D40\00 */, "i8", ALLOC_NONE, 5582376);
allocate([78,73,75,79,78,32,68,52,48,88,0] /* NIKON D40X\00 */, "i8", ALLOC_NONE, 5582388);
allocate([78,73,75,79,78,32,68,51,0] /* NIKON D3\00 */, "i8", ALLOC_NONE, 5582400);
allocate([78,73,75,79,78,32,68,51,83,0] /* NIKON D3S\00 */, "i8", ALLOC_NONE, 5582412);
allocate([78,73,75,79,78,32,68,51,88,0] /* NIKON D3X\00 */, "i8", ALLOC_NONE, 5582424);
allocate([78,73,75,79,78,32,68,51,48,48,0] /* NIKON D300\00 */, "i8", ALLOC_NONE, 5582436);
allocate([78,73,75,79,78,32,68,51,50,48,48,0] /* NIKON D3200\00 */, "i8", ALLOC_NONE, 5582448);
allocate([78,73,75,79,78,32,68,51,49,48,48,0] /* NIKON D3100\00 */, "i8", ALLOC_NONE, 5582460);
allocate([78,73,75,79,78,32,68,51,48,48,48,0] /* NIKON D3000\00 */, "i8", ALLOC_NONE, 5582472);
allocate([67,104,114,111,109,97,68,81,0] /* ChromaDQ\00 */, "i8", ALLOC_NONE, 5582484);
allocate([78,73,75,79,78,32,68,50,88,0] /* NIKON D2X\00 */, "i8", ALLOC_NONE, 5582496);
allocate([78,73,75,79,78,32,68,50,72,0] /* NIKON D2H\00 */, "i8", ALLOC_NONE, 5582508);
allocate([78,73,75,79,78,32,68,50,48,48,0] /* NIKON D200\00 */, "i8", ALLOC_NONE, 5582520);
allocate([78,73,75,79,78,32,68,49,0] /* NIKON D1\00 */, "i8", ALLOC_NONE, 5582532);
allocate([78,73,75,79,78,32,68,49,88,0] /* NIKON D1X\00 */, "i8", ALLOC_NONE, 5582544);
allocate([78,73,75,79,78,32,68,49,72,0] /* NIKON D1H\00 */, "i8", ALLOC_NONE, 5582556);
allocate([78,73,75,79,78,32,68,49,48,48,0] /* NIKON D100\00 */, "i8", ALLOC_NONE, 5582568);
allocate([77,79,84,79,82,79,76,65,32,80,73,88,76,0] /* MOTOROLA PIXL\00 */, "i8", ALLOC_NONE, 5582580);
allocate([77,73,78,79,76,84,65,32,68,89,78,65,88,32,55,0] /* MINOLTA DYNAX 7\00 */, "i8", ALLOC_NONE, 5582596);
allocate([77,73,78,79,76,84,65,32,68,89,78,65,88,32,53,0] /* MINOLTA DYNAX 5\00 */, "i8", ALLOC_NONE, 5582612);
allocate([65,99,116,105,118,101,73,109,97,103,101,65,114,101,97,0] /* ActiveImageArea\00 */, "i8", ALLOC_NONE, 5582628);
allocate([77,105,110,111,108,116,97,32,68,105,77,65,71,69,32,90,50,0] /* Minolta DiMAGE Z2\00 */, "i8", ALLOC_NONE, 5582644);
allocate([77,105,110,111,108,116,97,32,68,105,77,65,71,69,32,65,50,0] /* Minolta DiMAGE A2\00 */, "i8", ALLOC_NONE, 5582664);
allocate([77,73,78,79,76,84,65,32,68,105,77,65,71,69,32,65,50,48,48,0] /* MINOLTA DiMAGE A200\ */, "i8", ALLOC_NONE, 5582684);
allocate([77,105,110,111,108,116,97,32,68,105,77,65,71,69,32,65,49,0] /* Minolta DiMAGE A1\00 */, "i8", ALLOC_NONE, 5582704);
allocate([77,105,110,111,108,116,97,32,68,105,77,65,71,69,32,55,0] /* Minolta DiMAGE 7\00 */, "i8", ALLOC_NONE, 5582724);
allocate([77,105,110,111,108,116,97,32,68,105,77,65,71,69,32,55,72,105,0] /* Minolta DiMAGE 7Hi\0 */, "i8", ALLOC_NONE, 5582744);
allocate([77,105,110,111,108,116,97,32,68,105,77,65,71,69,32,53,0] /* Minolta DiMAGE 5\00 */, "i8", ALLOC_NONE, 5582764);
allocate([77,105,99,114,111,110,32,50,48,49,48,0] /* Micron 2010\00 */, "i8", ALLOC_NONE, 5582784);
allocate([77,97,109,105,121,97,32,90,68,0] /* Mamiya ZD\00 */, "i8", ALLOC_NONE, 5582796);
allocate([76,101,97,102,32,65,112,116,117,115,32,55,53,0] /* Leaf Aptus 75\00 */, "i8", ALLOC_NONE, 5582808);
allocate([75,101,101,112,73,109,97,103,101,65,114,101,97,0] /* KeepImageArea\00 */, "i8", ALLOC_NONE, 5582824);
allocate([76,101,97,102,32,65,112,116,117,115,32,54,53,0] /* Leaf Aptus 65\00 */, "i8", ALLOC_NONE, 5582840);
allocate([76,101,97,102,32,65,112,116,117,115,32,53,52,83,0] /* Leaf Aptus 54S\00 */, "i8", ALLOC_NONE, 5582856);
allocate([76,101,97,102,32,86,97,108,101,111,32,54,0] /* Leaf Valeo 6\00 */, "i8", ALLOC_NONE, 5582872);
allocate([76,101,97,102,32,67,77,111,115,116,0] /* Leaf CMost\00 */, "i8", ALLOC_NONE, 5582888);
allocate([75,79,68,65,75,32,69,65,83,89,83,72,65,82,69,32,90,49,48,49,53,0] /* KODAK EASYSHARE Z101 */, "i8", ALLOC_NONE, 5582900);
allocate([75,79,68,65,75,32,69,97,115,121,83,104,97,114,101,32,90,57,57,48,0] /* KODAK EasyShare Z990 */, "i8", ALLOC_NONE, 5582924);
allocate([75,79,68,65,75,32,69,97,115,121,83,104,97,114,101,32,90,57,56,49,0] /* KODAK EasyShare Z981 */, "i8", ALLOC_NONE, 5582948);
allocate([75,79,68,65,75,32,69,97,115,121,83,104,97,114,101,32,90,57,56,48,0] /* KODAK EasyShare Z980 */, "i8", ALLOC_NONE, 5582972);
allocate([75,79,68,65,75,32,80,56,56,48,0] /* KODAK P880\00 */, "i8", ALLOC_NONE, 5582996);
allocate([75,79,68,65,75,32,80,56,53,48,0] /* KODAK P850\00 */, "i8", ALLOC_NONE, 5583008);
allocate([83,97,116,117,114,97,116,105,111,110,76,101,118,101,108,0] /* SaturationLevel\00 */, "i8", ALLOC_NONE, 5583020);
allocate([75,79,68,65,75,32,80,55,49,50,0] /* KODAK P712\00 */, "i8", ALLOC_NONE, 5583036);
allocate([75,111,100,97,107,32,80,114,111,66,97,99,107,0] /* Kodak ProBack\00 */, "i8", ALLOC_NONE, 5583048);
allocate([75,111,100,97,107,32,80,114,111,66,97,99,107,54,52,53,0] /* Kodak ProBack645\00 */, "i8", ALLOC_NONE, 5583064);
allocate([75,111,100,97,107,32,68,67,83,32,80,114,111,32,49,52,0] /* Kodak DCS Pro 14\00 */, "i8", ALLOC_NONE, 5583084);
allocate([75,111,100,97,107,32,68,67,83,32,80,114,111,32,49,52,110,120,0] /* Kodak DCS Pro 14nx\0 */, "i8", ALLOC_NONE, 5583104);
allocate([75,111,100,97,107,32,68,67,83,32,80,114,111,32,83,76,82,0] /* Kodak DCS Pro SLR\00 */, "i8", ALLOC_NONE, 5583124);
allocate([75,111,100,97,107,32,68,67,83,55,54,48,67,0] /* Kodak DCS760C\00 */, "i8", ALLOC_NONE, 5583144);
allocate([75,111,100,97,107,32,68,67,83,55,50,48,88,0] /* Kodak DCS720X\00 */, "i8", ALLOC_NONE, 5583160);
allocate([75,111,100,97,107,32,68,67,83,54,54,48,67,0] /* Kodak DCS660C\00 */, "i8", ALLOC_NONE, 5583176);
allocate([75,111,100,97,107,32,68,67,83,54,50,48,88,0] /* Kodak DCS620X\00 */, "i8", ALLOC_NONE, 5583192);
allocate([80,111,115,116,80,111,108,121,77,97,116,114,105,120,0] /* PostPolyMatrix\00 */, "i8", ALLOC_NONE, 5583208);
allocate([75,111,100,97,107,32,68,67,83,54,50,48,67,0] /* Kodak DCS620C\00 */, "i8", ALLOC_NONE, 5583224);
allocate([75,111,100,97,107,32,68,67,83,53,54,48,67,0] /* Kodak DCS560C\00 */, "i8", ALLOC_NONE, 5583240);
allocate([75,111,100,97,107,32,68,67,83,53,50,48,67,0] /* Kodak DCS520C\00 */, "i8", ALLOC_NONE, 5583256);
allocate([75,79,68,65,75,32,69,79,83,68,67,83,51,66,0] /* KODAK EOSDCS3B\00 */, "i8", ALLOC_NONE, 5583272);
allocate([75,79,68,65,75,32,69,79,83,68,67,83,49,0] /* KODAK EOSDCS1\00 */, "i8", ALLOC_NONE, 5583288);
allocate([75,79,68,65,75,32,68,67,83,52,54,48,0] /* KODAK DCS460\00 */, "i8", ALLOC_NONE, 5583304);
allocate([75,79,68,65,75,32,68,67,83,52,50,48,0] /* KODAK DCS420\00 */, "i8", ALLOC_NONE, 5583320);
allocate([75,111,100,97,107,32,68,67,83,51,51,48,67,0] /* Kodak DCS330C\00 */, "i8", ALLOC_NONE, 5583336);
allocate([75,111,100,97,107,32,68,67,83,51,49,53,67,0] /* Kodak DCS315C\00 */, "i8", ALLOC_NONE, 5583352);
allocate([75,79,68,65,75,32,78,67,50,48,48,48,0] /* KODAK NC2000\00 */, "i8", ALLOC_NONE, 5583368);
allocate([68,97,114,107,83,104,105,101,108,100,67,111,108,82,97,110,103,101,0] /* DarkShieldColRange\0 */, "i8", ALLOC_NONE, 5583384);
allocate([73,109,97,99,111,110,32,73,120,112,114,101,115,115,0] /* Imacon Ixpress\00 */, "i8", ALLOC_NONE, 5583404);
allocate([70,85,74,73,70,73,76,77,32,88,45,83,49,0] /* FUJIFILM X-S1\00 */, "i8", ALLOC_NONE, 5583420);
allocate([70,85,74,73,70,73,76,77,32,88,70,49,0] /* FUJIFILM XF1\00 */, "i8", ALLOC_NONE, 5583436);
allocate([70,85,74,73,70,73,76,77,32,88,45,69,49,0] /* FUJIFILM X-E1\00 */, "i8", ALLOC_NONE, 5583452);
allocate([70,85,74,73,70,73,76,77,32,88,45,80,114,111,49,0] /* FUJIFILM X-Pro1\00 */, "i8", ALLOC_NONE, 5583468);
allocate([70,85,74,73,70,73,76,77,32,88,49,48,0] /* FUJIFILM X10\00 */, "i8", ALLOC_NONE, 5583484);
allocate([70,85,74,73,70,73,76,77,32,88,49,48,48,0] /* FUJIFILM X100\00 */, "i8", ALLOC_NONE, 5583500);
allocate([70,85,74,73,70,73,76,77,32,72,83,51,0] /* FUJIFILM HS3\00 */, "i8", ALLOC_NONE, 5583516);
allocate([70,85,74,73,70,73,76,77,32,72,83,50,48,69,88,82,0] /* FUJIFILM HS20EXR\00 */, "i8", ALLOC_NONE, 5583532);
allocate([70,85,74,73,70,73,76,77,32,72,83,49,48,32,72,83,49,49,0] /* FUJIFILM HS10 HS11\0 */, "i8", ALLOC_NONE, 5583552);
allocate([70,111,118,101,111,110,32,105,110,116,101,114,112,111,108,97,116,105,111,110,46,46,46,10,0] /* Foveon interpolation */, "i8", ALLOC_NONE, 5583572);
allocate([70,85,74,73,70,73,76,77,32,73,83,32,80,114,111,0] /* FUJIFILM IS Pro\00 */, "i8", ALLOC_NONE, 5583600);
allocate([70,85,74,73,70,73,76,77,32,73,83,45,49,0] /* FUJIFILM IS-1\00 */, "i8", ALLOC_NONE, 5583616);
allocate([70,85,74,73,70,73,76,77,32,83,57,54,48,48,0] /* FUJIFILM S9600\00 */, "i8", ALLOC_NONE, 5583632);
allocate([70,85,74,73,70,73,76,77,32,83,57,49,48,48,0] /* FUJIFILM S9100\00 */, "i8", ALLOC_NONE, 5583648);
allocate([70,85,74,73,70,73,76,77,32,83,57,53,48,48,0] /* FUJIFILM S9500\00 */, "i8", ALLOC_NONE, 5583664);
allocate([70,85,74,73,70,73,76,77,32,83,57,48,48,48,0] /* FUJIFILM S9000\00 */, "i8", ALLOC_NONE, 5583680);
allocate([70,85,74,73,70,73,76,77,32,83,55,48,48,48,0] /* FUJIFILM S7000\00 */, "i8", ALLOC_NONE, 5583696);
allocate([70,85,74,73,70,73,76,77,32,83,54,0] /* FUJIFILM S6\00 */, "i8", ALLOC_NONE, 5583712);
allocate([70,85,74,73,70,73,76,77,32,83,53,54,48,48,0] /* FUJIFILM S5600\00 */, "i8", ALLOC_NONE, 5583724);
allocate([70,85,74,73,70,73,76,77,32,83,53,50,48,48,0] /* FUJIFILM S5200\00 */, "i8", ALLOC_NONE, 5583740);
allocate([102,111,118,101,111,110,95,109,97,107,101,95,99,117,114,118,101,40,41,0] /* foveon_make_curve()\ */, "i8", ALLOC_NONE, 5583756);
allocate([70,85,74,73,70,73,76,77,32,83,53,53,48,48,0] /* FUJIFILM S5500\00 */, "i8", ALLOC_NONE, 5583776);
allocate([70,85,74,73,70,73,76,77,32,83,53,49,48,48,0] /* FUJIFILM S5100\00 */, "i8", ALLOC_NONE, 5583792);
allocate([70,85,74,73,70,73,76,77,32,83,53,48,48,48,0] /* FUJIFILM S5000\00 */, "i8", ALLOC_NONE, 5583808);
allocate([70,85,74,73,70,73,76,77,32,83,53,80,114,111,0] /* FUJIFILM S5Pro\00 */, "i8", ALLOC_NONE, 5583824);
allocate([70,85,74,73,70,73,76,77,32,83,51,80,114,111,0] /* FUJIFILM S3Pro\00 */, "i8", ALLOC_NONE, 5583840);
allocate([70,85,74,73,70,73,76,77,32,83,50,80,114,111,0] /* FUJIFILM S2Pro\00 */, "i8", ALLOC_NONE, 5583856);
allocate([70,85,74,73,70,73,76,77,32,83,50,48,80,114,111,0] /* FUJIFILM S20Pro\00 */, "i8", ALLOC_NONE, 5583872);
allocate([70,85,74,73,70,73,76,77,32,83,50,48,48,69,88,82,0] /* FUJIFILM S200EXR\00 */, "i8", ALLOC_NONE, 5583888);
allocate([70,85,74,73,70,73,76,77,32,83,49,48,48,70,83,0] /* FUJIFILM S100FS\00 */, "i8", ALLOC_NONE, 5583908);
allocate([70,85,74,73,70,73,76,77,32,70,56,0] /* FUJIFILM F8\00 */, "i8", ALLOC_NONE, 5583924);
allocate([37,115,58,32,34,37,115,34,32,109,97,116,114,105,120,32,110,111,116,32,102,111,117,110,100,33,10,0] /* %s: \22%s\22 matrix  */, "i8", ALLOC_NONE, 5583936);
allocate([70,85,74,73,70,73,76,77,32,70,55,0] /* FUJIFILM F7\00 */, "i8", ALLOC_NONE, 5583964);
allocate([70,85,74,73,70,73,76,77,32,70,55,55,0] /* FUJIFILM F77\00 */, "i8", ALLOC_NONE, 5583976);
allocate([70,85,74,73,70,73,76,77,32,70,54,0] /* FUJIFILM F6\00 */, "i8", ALLOC_NONE, 5583992);
allocate([70,85,74,73,70,73,76,77,32,70,53,0] /* FUJIFILM F5\00 */, "i8", ALLOC_NONE, 5584004);
allocate([70,85,74,73,70,73,76,77,32,69,57,48,48,0] /* FUJIFILM E900\00 */, "i8", ALLOC_NONE, 5584016);
allocate([70,85,74,73,70,73,76,77,32,69,53,53,48,0] /* FUJIFILM E550\00 */, "i8", ALLOC_NONE, 5584032);
allocate([69,80,83,79,78,32,82,45,68,49,0] /* EPSON R-D1\00 */, "i8", ALLOC_NONE, 5584048);
allocate([67,111,110,116,97,120,32,78,32,68,105,103,105,116,97,108,0] /* Contax N Digital\00 */, "i8", ALLOC_NONE, 5584060);
allocate([67,73,78,69,32,54,54,48,0] /* CINE 660\00 */, "i8", ALLOC_NONE, 5584080);
allocate([67,73,78,69,32,54,53,48,0] /* CINE 650\00 */, "i8", ALLOC_NONE, 5584092);
allocate([102,111,118,101,111,110,95,99,97,109,102,95,109,97,116,114,105,120,40,41,0] /* foveon_camf_matrix() */, "i8", ALLOC_NONE, 5584104);
allocate([67,111,114,114,117,112,116,32,100,97,116,97,32,110,101,97,114,32,48,120,37,108,108,120,10,0] /* Corrupt data near 0x */, "i8", ALLOC_NONE, 5584128);
allocate([67,65,83,73,79,32,69,88,45,90,49,48,0] /* CASIO EX-Z10\00 */, "i8", ALLOC_NONE, 5584156);
allocate([67,65,83,73,79,32,69,88,45,90,55,53,48,0] /* CASIO EX-Z750\00 */, "i8", ALLOC_NONE, 5584172);
allocate([67,65,83,73,79,32,69,88,45,83,50,48,0] /* CASIO EX-S20\00 */, "i8", ALLOC_NONE, 5584188);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,88,50,50,48,0] /* Canon PowerShot SX22 */, "i8", ALLOC_NONE, 5584204);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,88,49,49,48,32,73,83,0] /* Canon PowerShot SX11 */, "i8", ALLOC_NONE, 5584228);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,51,32,73,83,0] /* Canon PowerShot S3 I */, "i8", ALLOC_NONE, 5584256);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,55,50,48,0] /* Canon PowerShot A720 */, "i8", ALLOC_NONE, 5584280);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,54,53,48,0] /* Canon PowerShot A650 */, "i8", ALLOC_NONE, 5584304);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,54,52,48,0] /* Canon PowerShot A640 */, "i8", ALLOC_NONE, 5584328);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,54,51,48,0] /* Canon PowerShot A630 */, "i8", ALLOC_NONE, 5584352);
allocate([67,77,98,0] /* CMb\00 */, "i8", ALLOC_NONE, 5584376);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,54,50,48,0] /* Canon PowerShot A620 */, "i8", ALLOC_NONE, 5584380);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,54,49,48,0] /* Canon PowerShot A610 */, "i8", ALLOC_NONE, 5584404);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,52,55,48,0] /* Canon PowerShot A470 */, "i8", ALLOC_NONE, 5584428);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,88,53,48,32,72,83,0] /* Canon PowerShot SX50 */, "i8", ALLOC_NONE, 5584452);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,88,49,32,73,83,0] /* Canon PowerShot SX1  */, "i8", ALLOC_NONE, 5584476);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,49,49,48,0] /* Canon PowerShot S110 */, "i8", ALLOC_NONE, 5584500);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,49,48,48,0] /* Canon PowerShot S100 */, "i8", ALLOC_NONE, 5584524);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,57,53,0] /* Canon PowerShot S95\ */, "i8", ALLOC_NONE, 5584548);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,57,48,0] /* Canon PowerShot S90\ */, "i8", ALLOC_NONE, 5584568);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,55,48,0] /* Canon PowerShot S70\ */, "i8", ALLOC_NONE, 5584588);
allocate([37,115,32,104,97,115,32,117,110,107,110,111,119,110,32,67,65,77,70,32,116,121,112,101,32,37,100,46,10,0] /* %s has unknown CAMF  */, "i8", ALLOC_NONE, 5584608);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,54,48,0] /* Canon PowerShot S60\ */, "i8", ALLOC_NONE, 5584640);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,53,48,0] /* Canon PowerShot S50\ */, "i8", ALLOC_NONE, 5584660);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,52,53,0] /* Canon PowerShot S45\ */, "i8", ALLOC_NONE, 5584680);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,52,48,0] /* Canon PowerShot S40\ */, "i8", ALLOC_NONE, 5584700);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,51,48,0] /* Canon PowerShot S30\ */, "i8", ALLOC_NONE, 5584720);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,80,114,111,57,48,0] /* Canon PowerShot Pro9 */, "i8", ALLOC_NONE, 5584740);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,80,114,111,55,48,0] /* Canon PowerShot Pro7 */, "i8", ALLOC_NONE, 5584764);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,80,114,111,49,0] /* Canon PowerShot Pro1 */, "i8", ALLOC_NONE, 5584788);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,57,0] /* Canon PowerShot G9\0 */, "i8", ALLOC_NONE, 5584812);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,54,0] /* Canon PowerShot G6\0 */, "i8", ALLOC_NONE, 5584832);
allocate([102,111,118,101,111,110,95,108,111,97,100,95,99,97,109,102,40,41,0] /* foveon_load_camf()\0 */, "i8", ALLOC_NONE, 5584852);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,53,0] /* Canon PowerShot G5\0 */, "i8", ALLOC_NONE, 5584872);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,51,0] /* Canon PowerShot G3\0 */, "i8", ALLOC_NONE, 5584892);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,50,0] /* Canon PowerShot G2\0 */, "i8", ALLOC_NONE, 5584912);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,49,0] /* Canon PowerShot G1\0 */, "i8", ALLOC_NONE, 5584932);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,49,32,88,0] /* Canon PowerShot G1 X */, "i8", ALLOC_NONE, 5584952);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,49,53,0] /* Canon PowerShot G15\ */, "i8", ALLOC_NONE, 5584976);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,49,50,0] /* Canon PowerShot G12\ */, "i8", ALLOC_NONE, 5584996);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,49,49,0] /* Canon PowerShot G11\ */, "i8", ALLOC_NONE, 5585016);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,49,48,0] /* Canon PowerShot G10\ */, "i8", ALLOC_NONE, 5585036);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,53,0] /* Canon PowerShot A5\0 */, "i8", ALLOC_NONE, 5585056);
allocate([102,111,118,101,111,110,95,116,104,117,109,98,40,41,0] /* foveon_thumb()\00 */, "i8", ALLOC_NONE, 5585076);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,53,48,0] /* Canon PowerShot A50\ */, "i8", ALLOC_NONE, 5585092);
allocate([67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,53,51,48,0] /* Canon PowerShot A530 */, "i8", ALLOC_NONE, 5585112);
allocate([67,97,110,111,110,32,69,79,83,0] /* Canon EOS\00 */, "i8", ALLOC_NONE, 5585136);
allocate([67,97,110,111,110,32,69,79,83,45,49,68,0] /* Canon EOS-1D\00 */, "i8", ALLOC_NONE, 5585148);
allocate([67,97,110,111,110,32,69,79,83,45,49,68,32,88,0] /* Canon EOS-1D X\00 */, "i8", ALLOC_NONE, 5585164);
allocate([67,97,110,111,110,32,69,79,83,45,49,68,83,0] /* Canon EOS-1DS\00 */, "i8", ALLOC_NONE, 5585180);
allocate([67,97,110,111,110,32,69,79,83,45,49,68,32,77,97,114,107,32,73,73,0] /* Canon EOS-1D Mark II */, "i8", ALLOC_NONE, 5585196);
allocate([67,97,110,111,110,32,69,79,83,45,49,68,32,77,97,114,107,32,73,73,32,78,0] /* Canon EOS-1D Mark II */, "i8", ALLOC_NONE, 5585220);
allocate([67,97,110,111,110,32,69,79,83,45,49,68,32,77,97,114,107,32,73,73,73,0] /* Canon EOS-1D Mark II */, "i8", ALLOC_NONE, 5585244);
allocate([67,97,110,111,110,32,69,79,83,45,49,68,32,77,97,114,107,32,73,86,0] /* Canon EOS-1D Mark IV */, "i8", ALLOC_NONE, 5585268);
allocate([37,115,58,32,100,101,99,111,100,101,114,32,116,97,98,108,101,32,111,118,101,114,102,108,111,119,10,0] /* %s: decoder table ov */, "i8", ALLOC_NONE, 5585292);
allocate([67,97,110,111,110,32,69,79,83,45,49,68,115,32,77,97,114,107,32,73,73,0] /* Canon EOS-1Ds Mark I */, "i8", ALLOC_NONE, 5585320);
allocate([67,97,110,111,110,32,69,79,83,45,49,68,115,32,77,97,114,107,32,73,73,73,0] /* Canon EOS-1Ds Mark I */, "i8", ALLOC_NONE, 5585344);
allocate([67,97,110,111,110,32,69,79,83,32,77,0] /* Canon EOS M\00 */, "i8", ALLOC_NONE, 5585368);
allocate([67,97,110,111,110,32,69,79,83,32,49,49,48,48,68,0] /* Canon EOS 1100D\00 */, "i8", ALLOC_NONE, 5585380);
allocate([67,97,110,111,110,32,69,79,83,32,49,48,48,48,68,0] /* Canon EOS 1000D\00 */, "i8", ALLOC_NONE, 5585396);
allocate([67,97,110,111,110,32,69,79,83,32,54,53,48,68,0] /* Canon EOS 650D\00 */, "i8", ALLOC_NONE, 5585412);
allocate([67,97,110,111,110,32,69,79,83,32,54,48,48,68,0] /* Canon EOS 600D\00 */, "i8", ALLOC_NONE, 5585428);
allocate([67,97,110,111,110,32,69,79,83,32,53,53,48,68,0] /* Canon EOS 550D\00 */, "i8", ALLOC_NONE, 5585444);
allocate([67,97,110,111,110,32,69,79,83,32,53,48,48,68,0] /* Canon EOS 500D\00 */, "i8", ALLOC_NONE, 5585460);
allocate([67,97,110,111,110,32,69,79,83,32,52,53,48,68,0] /* Canon EOS 450D\00 */, "i8", ALLOC_NONE, 5585476);
allocate([115,111,110,121,95,97,114,119,50,95,108,111,97,100,95,114,97,119,40,41,0] /* sony_arw2_load_raw() */, "i8", ALLOC_NONE, 5585492);
allocate([67,97,110,111,110,32,69,79,83,32,52,48,48,68,0] /* Canon EOS 400D\00 */, "i8", ALLOC_NONE, 5585516);
allocate([67,97,110,111,110,32,69,79,83,32,51,53,48,68,0] /* Canon EOS 350D\00 */, "i8", ALLOC_NONE, 5585532);
allocate([67,97,110,111,110,32,69,79,83,32,51,48,48,68,0] /* Canon EOS 300D\00 */, "i8", ALLOC_NONE, 5585548);
allocate([67,97,110,111,110,32,69,79,83,32,54,48,68,0] /* Canon EOS 60D\00 */, "i8", ALLOC_NONE, 5585564);
allocate([67,97,110,111,110,32,69,79,83,32,53,48,68,0] /* Canon EOS 50D\00 */, "i8", ALLOC_NONE, 5585580);
allocate([67,97,110,111,110,32,69,79,83,32,52,48,68,0] /* Canon EOS 40D\00 */, "i8", ALLOC_NONE, 5585596);
allocate([67,97,110,111,110,32,69,79,83,32,51,48,68,0] /* Canon EOS 30D\00 */, "i8", ALLOC_NONE, 5585612);
allocate([67,97,110,111,110,32,69,79,83,32,50,48,68,0] /* Canon EOS 20D\00 */, "i8", ALLOC_NONE, 5585628);
allocate([67,97,110,111,110,32,69,79,83,32,50,48,68,97,0] /* Canon EOS 20Da\00 */, "i8", ALLOC_NONE, 5585644);
allocate([67,97,110,111,110,32,69,79,83,32,49,48,68,0] /* Canon EOS 10D\00 */, "i8", ALLOC_NONE, 5585660);
allocate([107,111,100,97,107,95,50,54,50,95,108,111,97,100,95,114,97,119,40,41,0] /* kodak_262_load_raw() */, "i8", ALLOC_NONE, 5585676);
allocate([67,97,110,111,110,32,69,79,83,32,55,68,0] /* Canon EOS 7D\00 */, "i8", ALLOC_NONE, 5585700);
allocate([67,97,110,111,110,32,69,79,83,32,54,68,0] /* Canon EOS 6D\00 */, "i8", ALLOC_NONE, 5585716);
allocate([67,97,110,111,110,32,69,79,83,32,53,68,0] /* Canon EOS 5D\00 */, "i8", ALLOC_NONE, 5585732);
allocate([67,97,110,111,110,32,69,79,83,32,53,68,32,77,97,114,107,32,73,73,0] /* Canon EOS 5D Mark II */, "i8", ALLOC_NONE, 5585748);
allocate([67,97,110,111,110,32,69,79,83,32,53,68,32,77,97,114,107,32,73,73,73,0] /* Canon EOS 5D Mark II */, "i8", ALLOC_NONE, 5585772);
allocate([67,97,110,111,110,32,69,79,83,32,68,54,48,0] /* Canon EOS D60\00 */, "i8", ALLOC_NONE, 5585796);
allocate([67,97,110,111,110,32,69,79,83,32,68,51,48,0] /* Canon EOS D30\00 */, "i8", ALLOC_NONE, 5585812);
allocate([67,97,110,111,110,32,69,79,83,32,68,54,48,48,48,0] /* Canon EOS D6000\00 */, "i8", ALLOC_NONE, 5585828);
allocate([67,97,110,111,110,32,69,79,83,32,68,50,48,48,48,0] /* Canon EOS D2000\00 */, "i8", ALLOC_NONE, 5585844);
allocate([65,112,112,108,101,32,81,117,105,99,107,84,97,107,101,0] /* Apple QuickTake\00 */, "i8", ALLOC_NONE, 5585860);
allocate([107,111,100,97,107,95,121,114,103,98,95,108,111,97,100,95,114,97,119,40,41,0] /* kodak_yrgb_load_raw( */, "i8", ALLOC_NONE, 5585876);
allocate([65,71,70,65,80,72,79,84,79,32,68,67,45,56,51,51,109,0] /* AGFAPHOTO DC-833m\00 */, "i8", ALLOC_NONE, 5585900);
allocate([70,76,69,78,71,84,72,0] /* FLENGTH\00 */, "i8", ALLOC_NONE, 5585920);
allocate([65,80,69,82,84,85,82,69,0] /* APERTURE\00 */, "i8", ALLOC_NONE, 5585928);
allocate([69,88,80,84,73,77,69,0] /* EXPTIME\00 */, "i8", ALLOC_NONE, 5585940);
allocate([84,73,77,69,0] /* TIME\00 */, "i8", ALLOC_NONE, 5585948);
allocate([87,66,95,68,69,83,67,0] /* WB_DESC\00 */, "i8", ALLOC_NONE, 5585956);
allocate([67,65,77,77,79,68,69,76,0] /* CAMMODEL\00 */, "i8", ALLOC_NONE, 5585964);
allocate([67,65,77,77,65,78,85,70,0] /* CAMMANUF\00 */, "i8", ALLOC_NONE, 5585976);
allocate([73,83,79,0] /* ISO\00 */, "i8", ALLOC_NONE, 5585988);
allocate([37,115,58,32,84,97,105,108,32,105,115,32,109,105,115,115,105,110,103,44,32,112,97,114,115,105,110,103,32,102,114,111,109,32,104,101,97,100,46,46,46,10,0] /* %s: Tail is missing, */, "i8", ALLOC_NONE, 5585992);
allocate([101,105,103,104,116,95,98,105,116,95,108,111,97,100,95,114,97,119,40,41,0] /* eight_bit_load_raw() */, "i8", ALLOC_NONE, 5586036);
allocate([67,73,78,69,0] /* CINE\00 */, "i8", ALLOC_NONE, 5586060);
allocate([118,37,100,32,37,100,120,37,100,0] /* v%d %dx%d\00 */, "i8", ALLOC_NONE, 5586068);
allocate([83,77,97,76,0] /* SMaL\00 */, "i8", ALLOC_NONE, 5586080);
allocate([37,42,115,32,37,115,32,37,100,32,37,100,58,37,100,58,37,100,32,37,100,0] /* %_s %s %d %d:%d:%d % */, "i8", ALLOC_NONE, 5586088);
allocate([73,68,73,84,0] /* IDIT\00 */, "i8", ALLOC_NONE, 5586112);
allocate([110,99,116,103,0] /* nctg\00 */, "i8", ALLOC_NONE, 5586120);
allocate([76,73,83,84,0] /* LIST\00 */, "i8", ALLOC_NONE, 5586128);
allocate([82,73,70,70,0] /* RIFF\00 */, "i8", ALLOC_NONE, 5586136);
allocate([72,32,50,53,0] /* H 25\00 */, "i8", ALLOC_NONE, 5586144);
allocate([72,32,50,48,0] /* H 20\00 */, "i8", ALLOC_NONE, 5586152);
allocate([110,111,107,105,97,95,108,111,97,100,95,114,97,119,40,41,0] /* nokia_load_raw()\00 */, "i8", ALLOC_NONE, 5586160);
allocate([85,110,101,120,112,101,99,116,101,100,32,101,110,100,32,111,102,32,102,105,108,101,10,0] /* Unexpected end of fi */, "i8", ALLOC_NONE, 5586180);
allocate([72,32,49,48,0] /* H 10\00 */, "i8", ALLOC_NONE, 5586204);
allocate([76,105,103,104,116,80,104,97,115,101,0] /* LightPhase\00 */, "i8", ALLOC_NONE, 5586212);
allocate([80,104,97,115,101,32,79,110,101,0] /* Phase One\00 */, "i8", ALLOC_NONE, 5586224);
allocate([32,99,97,109,101,114,97,0] /*  camera\00 */, "i8", ALLOC_NONE, 5586236);
allocate([48,54,53,51,0] /* 0653\00 */, "i8", ALLOC_NONE, 5586244);
allocate([82,65,87,48,0] /* RAW0\00 */, "i8", ALLOC_NONE, 5586252);
allocate([84,72,85,77,66,0] /* THUMB\00 */, "i8", ALLOC_NONE, 5586260);
allocate([77,69,84,65,0] /* META\00 */, "i8", ALLOC_NONE, 5586268);
allocate([100,53,51,48,102,108,101,120,0] /* d530flex\00 */, "i8", ALLOC_NONE, 5586276);
allocate([82,111,108,108,101,105,0] /* Rollei\00 */, "i8", ALLOC_NONE, 5586288);
allocate([115,105,110,97,114,95,52,115,104,111,116,95,108,111,97,100,95,114,97,119,40,41,0] /* sinar_4shot_load_raw */, "i8", ALLOC_NONE, 5586296);
allocate([69,79,72,68,0] /* EOHD\00 */, "i8", ALLOC_NONE, 5586320);
allocate([84,89,32,0] /* TY \00 */, "i8", ALLOC_NONE, 5586328);
allocate([84,88,32,0] /* TX \00 */, "i8", ALLOC_NONE, 5586332);
allocate([89,32,32,0] /* Y  \00 */, "i8", ALLOC_NONE, 5586336);
allocate([88,32,32,0] /* X  \00 */, "i8", ALLOC_NONE, 5586340);
allocate([72,68,82,0] /* HDR\00 */, "i8", ALLOC_NONE, 5586344);
allocate([37,100,58,37,100,58,37,100,0] /* %d:%d:%d\00 */, "i8", ALLOC_NONE, 5586348);
allocate([84,73,77,0] /* TIM\00 */, "i8", ALLOC_NONE, 5586360);
allocate([68,65,84,0] /* DAT\00 */, "i8", ALLOC_NONE, 5586364);
allocate([48,49,51,52,53,54,55,48,50,56,0] /* 0134567028\00 */, "i8", ALLOC_NONE, 5586368);
allocate([108,101,97,102,95,104,100,114,95,108,111,97,100,95,114,97,119,40,41,0] /* leaf_hdr_load_raw()\ */, "i8", ALLOC_NONE, 5586380);
allocate([48,50,51,52,53,55,48,48,48,48,48,48,48,48,54,48,48,48,0] /* 023457000000006000\0 */, "i8", ALLOC_NONE, 5586400);
allocate([48,49,51,52,53,58,48,48,48,48,48,48,48,48,54,48,48,56,0] /* 01345:000000006008\0 */, "i8", ALLOC_NONE, 5586420);
allocate([48,49,50,51,52,54,48,48,48,48,48,48,48,48,48,48,48,48,0] /* 012346000000000000\0 */, "i8", ALLOC_NONE, 5586440);
allocate([80,114,111,49,0] /* Pro1\00 */, "i8", ALLOC_NONE, 5586460);
allocate([70,97,105,108,101,100,32,116,111,32,114,101,97,100,32,109,101,116,97,100,97,116,97,32,102,114,111,109,32,37,115,10,0] /* Failed to read metad */, "i8", ALLOC_NONE, 5586468);
allocate([82,101,97,100,105,110,103,32,109,101,116,97,100,97,116,97,32,102,114,111,109,32,37,115,32,46,46,46,10,0] /* Reading metadata fro */, "i8", ALLOC_NONE, 5586504);
allocate([46,74,80,71,0] /* .JPG\00 */, "i8", ALLOC_NONE, 5586536);
allocate([46,106,112,103,0] /* .jpg\00 */, "i8", ALLOC_NONE, 5586544);
allocate([112,97,114,115,101,95,101,120,116,101,114,110,97,108,95,106,112,101,103,40,41,0] /* parse_external_jpeg( */, "i8", ALLOC_NONE, 5586552);
allocate([68,105,77,65,71,69,32,65,50,48,48,0] /* DiMAGE A200\00 */, "i8", ALLOC_NONE, 5586576);
allocate([112,104,97,115,101,95,111,110,101,95,108,111,97,100,95,114,97,119,95,99,40,41,0] /* phase_one_load_raw_c */, "i8", ALLOC_NONE, 5586588);
allocate([68,69,66,85,71,32,82,65,87,0] /* DEBUG RAW\00 */, "i8", ALLOC_NONE, 5586612);
allocate([75,111,100,97,107,0] /* Kodak\00 */, "i8", ALLOC_NONE, 5586624);
allocate([75,79,68,65,75,0] /* KODAK\00 */, "i8", ALLOC_NONE, 5586632);
allocate([72,97,115,115,101,108,98,108,97,100,0] /* Hasselblad\00 */, "i8", ALLOC_NONE, 5586640);
allocate([37,102,32,37,102,32,37,102,0] /* %f %f %f\00 */, "i8", ALLOC_NONE, 5586652);
allocate([78,101,117,116,114,97,108,32,0] /* Neutral \00 */, "i8", ALLOC_NONE, 5586664);
allocate([73,120,112,114,101,115,115,32,37,100,45,77,112,0] /* Ixpress %d-Mp\00 */, "i8", ALLOC_NONE, 5586676);
allocate([73,109,97,99,111,110,0] /* Imacon\00 */, "i8", ALLOC_NONE, 5586692);
allocate([76,101,97,102,0] /* Leaf\00 */, "i8", ALLOC_NONE, 5586700);
allocate([112,104,97,115,101,95,111,110,101,95,99,111,114,114,101,99,116,40,41,0] /* phase_one_correct()\ */, "i8", ALLOC_NONE, 5586708);
allocate([77,65,84,82,73,88,0] /* MATRIX\00 */, "i8", ALLOC_NONE, 5586728);
allocate([3,4,5,0] /* \03\04\05\00 */, "i8", ALLOC_NONE, 5586736);
allocate([68,83,76,82,45,65,49,48,48,0] /* DSLR-A100\00 */, "i8", ALLOC_NONE, 5586740);
allocate([68,105,103,105,116,97,108,32,80,104,111,116,111,32,80,114,111,102,101,115,115,105,111,110,97,108,0] /* Digital Photo Profes */, "i8", ALLOC_NONE, 5586752);
allocate([78,105,107,111,110,32,83,99,97,110,0] /* Nikon Scan\00 */, "i8", ALLOC_NONE, 5586780);
allocate([66,105,98,98,108,101,0] /* Bibble\00 */, "i8", ALLOC_NONE, 5586792);
allocate([85,70,82,97,119,0] /* UFRaw\00 */, "i8", ALLOC_NONE, 5586800);
allocate([100,99,114,97,119,0] /* dcraw\00 */, "i8", ALLOC_NONE, 5586808);
allocate([80,104,97,115,101,32,79,110,101,32,99,111,114,114,101,99,116,105,111,110,46,46,46,10,0] /* Phase One correction */, "i8", ALLOC_NONE, 5586816);
allocate([65,100,111,98,101,0] /* Adobe\00 */, "i8", ALLOC_NONE, 5586844);
allocate([53,48,49,51,50,52,54,55,0] /* 50132467\00 */, "i8", ALLOC_NONE, 5586852);
allocate([148,97,22,73,0] /* \94a\16I\00 */, "i8", ALLOC_NONE, 5586864);
allocate([82,111,119,115,95,100,97,116,97,0] /* Rows_data\00 */, "i8", ALLOC_NONE, 5586872);
allocate([78,101,117,116,79,98,106,95,110,101,117,116,114,97,108,115,0] /* NeutObj_neutrals\00 */, "i8", ALLOC_NONE, 5586884);
allocate([73,109,103,80,114,111,102,95,114,111,116,97,116,105,111,110,95,97,110,103,108,101,0] /* ImgProf_rotation_ang */, "i8", ALLOC_NONE, 5586904);
allocate([67,97,112,116,80,114,111,102,95,109,111,115,97,105,99,95,112,97,116,116,101,114,110,0] /* CaptProf_mosaic_patt */, "i8", ALLOC_NONE, 5586928);
allocate([67,97,112,116,80,114,111,102,95,114,97,119,95,100,97,116,97,95,114,111,116,97,116,105,111,110,0] /* CaptProf_raw_data_ro */, "i8", ALLOC_NONE, 5586952);
allocate([67,97,112,116,80,114,111,102,95,110,117,109,98,101,114,95,111,102,95,112,108,97,110,101,115,0] /* CaptProf_number_of_p */, "i8", ALLOC_NONE, 5586980);
allocate([37,102,0] /* %f\00 */, "i8", ALLOC_NONE, 5587008);
allocate([112,104,97,115,101,95,111,110,101,95,102,108,97,116,95,102,105,101,108,100,40,41,0] /* phase_one_flat_field */, "i8", ALLOC_NONE, 5587012);
allocate([67,97,112,116,80,114,111,102,95,99,111,108,111,114,95,109,97,116,114,105,120,0] /* CaptProf_color_matri */, "i8", ALLOC_NONE, 5587036);
allocate([105,99,99,95,99,97,109,101,114,97,95,116,111,95,116,111,110,101,95,109,97,116,114,105,120,0] /* icc_camera_to_tone_m */, "i8", ALLOC_NONE, 5587060);
allocate([37,100,0] /* %d\00 */, "i8", ALLOC_NONE, 5587088);
allocate([83,104,111,111,116,79,98,106,95,98,97,99,107,95,116,121,112,101,0] /* ShootObj_back_type\0 */, "i8", ALLOC_NONE, 5587092);
allocate([105,99,99,95,99,97,109,101,114,97,95,112,114,111,102,105,108,101,0] /* icc_camera_profile\0 */, "i8", ALLOC_NONE, 5587112);
allocate([74,80,69,71,95,112,114,101,118,105,101,119,95,100,97,116,97,0] /* JPEG_preview_data\00 */, "i8", ALLOC_NONE, 5587132);
allocate([65,70,105,45,73,73,32,49,50,0] /* AFi-II 12\00 */, "i8", ALLOC_NONE, 5587152);
allocate([65,70,105,32,55,0] /* AFi 7\00 */, "i8", ALLOC_NONE, 5587164);
allocate([65,70,105,32,54,0] /* AFi 6\00 */, "i8", ALLOC_NONE, 5587172);
allocate([65,70,105,32,53,0] /* AFi 5\00 */, "i8", ALLOC_NONE, 5587180);
allocate([114,111,108,108,101,105,95,116,104,117,109,98,40,41,0] /* rollei_thumb()\00 */, "i8", ALLOC_NONE, 5587188);
allocate([65,112,116,117,115,32,55,53,83,0] /* Aptus 75S\00 */, "i8", ALLOC_NONE, 5587204);
allocate([65,112,116,117,115,32,54,53,83,0] /* Aptus 65S\00 */, "i8", ALLOC_NONE, 5587216);
allocate([65,112,116,117,115,32,53,52,83,0] /* Aptus 54S\00 */, "i8", ALLOC_NONE, 5587228);
allocate([65,112,116,117,115,32,54,53,0] /* Aptus 65\00 */, "i8", ALLOC_NONE, 5587240);
allocate([65,112,116,117,115,32,55,53,0] /* Aptus 75\00 */, "i8", ALLOC_NONE, 5587252);
allocate([65,112,116,117,115,32,50,50,0] /* Aptus 22\00 */, "i8", ALLOC_NONE, 5587264);
allocate([65,112,116,117,115,32,49,55,0] /* Aptus 17\00 */, "i8", ALLOC_NONE, 5587276);
allocate([86,97,108,101,111,32,49,55,0] /* Valeo 17\00 */, "i8", ALLOC_NONE, 5587288);
allocate([86,97,108,101,111,32,49,49,112,0] /* Valeo 11p\00 */, "i8", ALLOC_NONE, 5587300);
allocate([86,97,108,101,111,32,50,50,0] /* Valeo 22\00 */, "i8", ALLOC_NONE, 5587312);
allocate([80,37,100,10,37,100,32,37,100,10,50,53,53,10,0] /* P%d\0A%d %d\0A255\0A */, "i8", ALLOC_NONE, 5587324);
allocate([86,97,108,101,111,32,49,49,0] /* Valeo 11\00 */, "i8", ALLOC_NONE, 5587340);
allocate([86,97,108,101,111,32,54,0] /* Valeo 6\00 */, "i8", ALLOC_NONE, 5587352);
allocate([67,77,111,115,116,0] /* CMost\00 */, "i8", ALLOC_NONE, 5587360);
allocate([67,97,110,116,97,114,101,0] /* Cantare\00 */, "i8", ALLOC_NONE, 5587368);
allocate([86,111,108,97,114,101,0] /* Volare\00 */, "i8", ALLOC_NONE, 5587376);
allocate([68,67,66,50,0] /* DCB2\00 */, "i8", ALLOC_NONE, 5587384);
allocate(1, "i8", ALLOC_NONE, 5587392);
allocate([69,65,83,84,77,65,78,0] /* EASTMAN\00 */, "i8", ALLOC_NONE, 5587396);
allocate([37,100,58,37,100,58,37,100,32,37,100,58,37,100,58,37,100,0] /* %d:%d:%d %d:%d:%d\00 */, "i8", ALLOC_NONE, 5587404);
allocate([54,54,54,54,54,62,54,54,54,59,54,65,59,58,59,53,53,0] /* 66666_666;6A;:;55\00 */, "i8", ALLOC_NONE, 5587424);
allocate([108,97,121,101,114,95,116,104,117,109,98,40,41,0] /* layer_thumb()\00 */, "i8", ALLOC_NONE, 5587444);
allocate([48,49,50,51,52,55,56,48,48,48,48,48,48,48,53,56,57,54,0] /* 012347800000005896\0 */, "i8", ALLOC_NONE, 5587460);
allocate([80,69,78,84,65,88,0] /* PENTAX\00 */, "i8", ALLOC_NONE, 5587480);
allocate([48,49,48,48,0] /* 0100\00 */, "i8", ALLOC_NONE, 5587488);
allocate([78,82,87,32,0] /* NRW \00 */, "i8", ALLOC_NONE, 5587496);
allocate([48,54,53,0] /* 065\00 */, "i8", ALLOC_NONE, 5587504);
allocate([67,97,110,111,110,0] /* Canon\00 */, "i8", ALLOC_NONE, 5587508);
allocate([75,79,78,73,67,65,0] /* KONICA\00 */, "i8", ALLOC_NONE, 5587516);
allocate([78,73,75,79,78,0] /* NIKON\00 */, "i8", ALLOC_NONE, 5587524);
allocate([83,65,77,83,85,78,71,0] /* SAMSUNG\00 */, "i8", ALLOC_NONE, 5587532);
allocate([81,86,67,0] /* QVC\00 */, "i8", ALLOC_NONE, 5587540);
allocate([112,112,109,49,54,95,116,104,117,109,98,40,41,0] /* ppm16_thumb()\00 */, "i8", ALLOC_NONE, 5587544);
allocate([37,115,58,32,0] /* %s: \00 */, "i8", ALLOC_NONE, 5587560);
allocate([37,115,58,32,79,117,116,32,111,102,32,109,101,109,111,114,121,32,105,110,32,37,115,10,0] /* %s: Out of memory in */, "i8", ALLOC_NONE, 5587568);
allocate(468, "i8", ALLOC_NONE, 5587596);
HEAP32[((5245848)>>2)]=((5587392)|0);
HEAP32[((5245852)>>2)]=((5587384)|0);
HEAP32[((5245856)>>2)]=((5587376)|0);
HEAP32[((5245860)>>2)]=((5587368)|0);
HEAP32[((5245864)>>2)]=((5587360)|0);
HEAP32[((5245868)>>2)]=((5587352)|0);
HEAP32[((5245872)>>2)]=((5587340)|0);
HEAP32[((5245876)>>2)]=((5587312)|0);
HEAP32[((5245880)>>2)]=((5587300)|0);
HEAP32[((5245884)>>2)]=((5587288)|0);
HEAP32[((5245888)>>2)]=((5587392)|0);
HEAP32[((5245892)>>2)]=((5587276)|0);
HEAP32[((5245896)>>2)]=((5587264)|0);
HEAP32[((5245900)>>2)]=((5587252)|0);
HEAP32[((5245904)>>2)]=((5587240)|0);
HEAP32[((5245908)>>2)]=((5587228)|0);
HEAP32[((5245912)>>2)]=((5587216)|0);
HEAP32[((5245916)>>2)]=((5587204)|0);
HEAP32[((5245920)>>2)]=((5587180)|0);
HEAP32[((5245924)>>2)]=((5587172)|0);
HEAP32[((5245928)>>2)]=((5587164)|0);
HEAP32[((5245932)>>2)]=((5587392)|0);
HEAP32[((5245936)>>2)]=((5587392)|0);
HEAP32[((5245940)>>2)]=((5587392)|0);
HEAP32[((5245944)>>2)]=((5587392)|0);
HEAP32[((5245948)>>2)]=((5587392)|0);
HEAP32[((5245952)>>2)]=((5587392)|0);
HEAP32[((5245956)>>2)]=((5587392)|0);
HEAP32[((5245960)>>2)]=((5587392)|0);
HEAP32[((5245964)>>2)]=((5587392)|0);
HEAP32[((5245968)>>2)]=((5587392)|0);
HEAP32[((5245972)>>2)]=((5587392)|0);
HEAP32[((5245976)>>2)]=((5587392)|0);
HEAP32[((5245980)>>2)]=((5587392)|0);
HEAP32[((5245984)>>2)]=((5587392)|0);
HEAP32[((5245988)>>2)]=((5587392)|0);
HEAP32[((5245992)>>2)]=((5587392)|0);
HEAP32[((5245996)>>2)]=((5587392)|0);
HEAP32[((5246000)>>2)]=((5587152)|0);
HEAP32[((5267568)>>2)]=((5587508)|0);
HEAP32[((5267572)>>2)]=((5587524)|0);
HEAP32[((5267576)>>2)]=((5573284)|0);
HEAP32[((5267580)>>2)]=((5586632)|0);
HEAP32[((5267584)>>2)]=((5586624)|0);
HEAP32[((5267588)>>2)]=((5573348)|0);
HEAP32[((5267592)>>2)]=((5587480)|0);
HEAP32[((5267596)>>2)]=((5579172)|0);
HEAP32[((5267600)>>2)]=((5579164)|0);
HEAP32[((5267604)>>2)]=((5579156)|0);
HEAP32[((5267608)>>2)]=((5579148)|0);
HEAP32[((5267612)>>2)]=((5579748)|0);
HEAP32[((5267616)>>2)]=((5586224)|0);
HEAP32[((5267620)>>2)]=((5587532)|0);
HEAP32[((5267624)>>2)]=((5579140)|0);
HEAP32[((5267628)>>2)]=((5579128)|0);
HEAP32[((5267632)>>2)]=((5573300)|0);
HEAP32[((5560728)>>2)]=((5560352)|0);
HEAP32[((5560732)>>2)]=((5560768)|0);
HEAP32[((5560736)>>2)]=((5560280)|0);
HEAP32[((5560740)>>2)]=((5560436)|0);
HEAP32[((5560744)>>2)]=((5242888)|0);
HEAP32[((5560748)>>2)]=((5576536)|0);
HEAP32[((5560752)>>2)]=((5576516)|0);
HEAP32[((5560756)>>2)]=((5576500)|0);
HEAP32[((5560760)>>2)]=((5576484)|0);
HEAP32[((5560764)>>2)]=((5576480)|0);
HEAP32[((5561472)>>2)]=((5585900)|0);
HEAP32[((5561504)>>2)]=((5585860)|0);
HEAP32[((5561536)>>2)]=((5585844)|0);
HEAP32[((5561568)>>2)]=((5585828)|0);
HEAP32[((5561600)>>2)]=((5585812)|0);
HEAP32[((5561632)>>2)]=((5585796)|0);
HEAP32[((5561664)>>2)]=((5585772)|0);
HEAP32[((5561696)>>2)]=((5585748)|0);
HEAP32[((5561728)>>2)]=((5585732)|0);
HEAP32[((5561760)>>2)]=((5585716)|0);
HEAP32[((5561792)>>2)]=((5585700)|0);
HEAP32[((5561824)>>2)]=((5585660)|0);
HEAP32[((5561856)>>2)]=((5585644)|0);
HEAP32[((5561888)>>2)]=((5585628)|0);
HEAP32[((5561920)>>2)]=((5585612)|0);
HEAP32[((5561952)>>2)]=((5585596)|0);
HEAP32[((5561984)>>2)]=((5585580)|0);
HEAP32[((5562016)>>2)]=((5585564)|0);
HEAP32[((5562048)>>2)]=((5585548)|0);
HEAP32[((5562080)>>2)]=((5585532)|0);
HEAP32[((5562112)>>2)]=((5585516)|0);
HEAP32[((5562144)>>2)]=((5585476)|0);
HEAP32[((5562176)>>2)]=((5585460)|0);
HEAP32[((5562208)>>2)]=((5585444)|0);
HEAP32[((5562240)>>2)]=((5585428)|0);
HEAP32[((5562272)>>2)]=((5585412)|0);
HEAP32[((5562304)>>2)]=((5585396)|0);
HEAP32[((5562336)>>2)]=((5585380)|0);
HEAP32[((5562368)>>2)]=((5585368)|0);
HEAP32[((5562400)>>2)]=((5585344)|0);
HEAP32[((5562432)>>2)]=((5585320)|0);
HEAP32[((5562464)>>2)]=((5585268)|0);
HEAP32[((5562496)>>2)]=((5585244)|0);
HEAP32[((5562528)>>2)]=((5585220)|0);
HEAP32[((5562560)>>2)]=((5585196)|0);
HEAP32[((5562592)>>2)]=((5585180)|0);
HEAP32[((5562624)>>2)]=((5585164)|0);
HEAP32[((5562656)>>2)]=((5585148)|0);
HEAP32[((5562688)>>2)]=((5585136)|0);
HEAP32[((5562720)>>2)]=((5585112)|0);
HEAP32[((5562752)>>2)]=((5585092)|0);
HEAP32[((5562784)>>2)]=((5585056)|0);
HEAP32[((5562816)>>2)]=((5585036)|0);
HEAP32[((5562848)>>2)]=((5585016)|0);
HEAP32[((5562880)>>2)]=((5584996)|0);
HEAP32[((5562912)>>2)]=((5584976)|0);
HEAP32[((5562944)>>2)]=((5584952)|0);
HEAP32[((5562976)>>2)]=((5584932)|0);
HEAP32[((5563008)>>2)]=((5584912)|0);
HEAP32[((5563040)>>2)]=((5584892)|0);
HEAP32[((5563072)>>2)]=((5584872)|0);
HEAP32[((5563104)>>2)]=((5584832)|0);
HEAP32[((5563136)>>2)]=((5584812)|0);
HEAP32[((5563168)>>2)]=((5584788)|0);
HEAP32[((5563200)>>2)]=((5584764)|0);
HEAP32[((5563232)>>2)]=((5584740)|0);
HEAP32[((5563264)>>2)]=((5584720)|0);
HEAP32[((5563296)>>2)]=((5584700)|0);
HEAP32[((5563328)>>2)]=((5584680)|0);
HEAP32[((5563360)>>2)]=((5584660)|0);
HEAP32[((5563392)>>2)]=((5584640)|0);
HEAP32[((5563424)>>2)]=((5584588)|0);
HEAP32[((5563456)>>2)]=((5584568)|0);
HEAP32[((5563488)>>2)]=((5584548)|0);
HEAP32[((5563520)>>2)]=((5584524)|0);
HEAP32[((5563552)>>2)]=((5584500)|0);
HEAP32[((5563584)>>2)]=((5584476)|0);
HEAP32[((5563616)>>2)]=((5584452)|0);
HEAP32[((5563648)>>2)]=((5584428)|0);
HEAP32[((5563680)>>2)]=((5584404)|0);
HEAP32[((5563712)>>2)]=((5584380)|0);
HEAP32[((5563744)>>2)]=((5584352)|0);
HEAP32[((5563776)>>2)]=((5584328)|0);
HEAP32[((5563808)>>2)]=((5584304)|0);
HEAP32[((5563840)>>2)]=((5584280)|0);
HEAP32[((5563872)>>2)]=((5584256)|0);
HEAP32[((5563904)>>2)]=((5584228)|0);
HEAP32[((5563936)>>2)]=((5584204)|0);
HEAP32[((5563968)>>2)]=((5584188)|0);
HEAP32[((5564000)>>2)]=((5584172)|0);
HEAP32[((5564032)>>2)]=((5584156)|0);
HEAP32[((5564064)>>2)]=((5584092)|0);
HEAP32[((5564096)>>2)]=((5584080)|0);
HEAP32[((5564128)>>2)]=((5586060)|0);
HEAP32[((5564160)>>2)]=((5584060)|0);
HEAP32[((5564192)>>2)]=((5584048)|0);
HEAP32[((5564224)>>2)]=((5584032)|0);
HEAP32[((5564256)>>2)]=((5584016)|0);
HEAP32[((5564288)>>2)]=((5584004)|0);
HEAP32[((5564320)>>2)]=((5583992)|0);
HEAP32[((5564352)>>2)]=((5583976)|0);
HEAP32[((5564384)>>2)]=((5583964)|0);
HEAP32[((5564416)>>2)]=((5583924)|0);
HEAP32[((5564448)>>2)]=((5583908)|0);
HEAP32[((5564480)>>2)]=((5583888)|0);
HEAP32[((5564512)>>2)]=((5583872)|0);
HEAP32[((5564544)>>2)]=((5583856)|0);
HEAP32[((5564576)>>2)]=((5583840)|0);
HEAP32[((5564608)>>2)]=((5583824)|0);
HEAP32[((5564640)>>2)]=((5583808)|0);
HEAP32[((5564672)>>2)]=((5583792)|0);
HEAP32[((5564704)>>2)]=((5583776)|0);
HEAP32[((5564736)>>2)]=((5583740)|0);
HEAP32[((5564768)>>2)]=((5583724)|0);
HEAP32[((5564800)>>2)]=((5583712)|0);
HEAP32[((5564832)>>2)]=((5583696)|0);
HEAP32[((5564864)>>2)]=((5583680)|0);
HEAP32[((5564896)>>2)]=((5583664)|0);
HEAP32[((5564928)>>2)]=((5583648)|0);
HEAP32[((5564960)>>2)]=((5583632)|0);
HEAP32[((5564992)>>2)]=((5583616)|0);
HEAP32[((5565024)>>2)]=((5583600)|0);
HEAP32[((5565056)>>2)]=((5583552)|0);
HEAP32[((5565088)>>2)]=((5583532)|0);
HEAP32[((5565120)>>2)]=((5583516)|0);
HEAP32[((5565152)>>2)]=((5583500)|0);
HEAP32[((5565184)>>2)]=((5583484)|0);
HEAP32[((5565216)>>2)]=((5583468)|0);
HEAP32[((5565248)>>2)]=((5583452)|0);
HEAP32[((5565280)>>2)]=((5583436)|0);
HEAP32[((5565312)>>2)]=((5583420)|0);
HEAP32[((5565344)>>2)]=((5583404)|0);
HEAP32[((5565376)>>2)]=((5583368)|0);
HEAP32[((5565408)>>2)]=((5583352)|0);
HEAP32[((5565440)>>2)]=((5583336)|0);
HEAP32[((5565472)>>2)]=((5583320)|0);
HEAP32[((5565504)>>2)]=((5583304)|0);
HEAP32[((5565536)>>2)]=((5583288)|0);
HEAP32[((5565568)>>2)]=((5583272)|0);
HEAP32[((5565600)>>2)]=((5583256)|0);
HEAP32[((5565632)>>2)]=((5583240)|0);
HEAP32[((5565664)>>2)]=((5583224)|0);
HEAP32[((5565696)>>2)]=((5583192)|0);
HEAP32[((5565728)>>2)]=((5583176)|0);
HEAP32[((5565760)>>2)]=((5583160)|0);
HEAP32[((5565792)>>2)]=((5583144)|0);
HEAP32[((5565824)>>2)]=((5583124)|0);
HEAP32[((5565856)>>2)]=((5583104)|0);
HEAP32[((5565888)>>2)]=((5583084)|0);
HEAP32[((5565920)>>2)]=((5583064)|0);
HEAP32[((5565952)>>2)]=((5583048)|0);
HEAP32[((5565984)>>2)]=((5583036)|0);
HEAP32[((5566016)>>2)]=((5583008)|0);
HEAP32[((5566048)>>2)]=((5582996)|0);
HEAP32[((5566080)>>2)]=((5582972)|0);
HEAP32[((5566112)>>2)]=((5582948)|0);
HEAP32[((5566144)>>2)]=((5582924)|0);
HEAP32[((5566176)>>2)]=((5582900)|0);
HEAP32[((5566208)>>2)]=((5582888)|0);
HEAP32[((5566240)>>2)]=((5582872)|0);
HEAP32[((5566272)>>2)]=((5582856)|0);
HEAP32[((5566304)>>2)]=((5582840)|0);
HEAP32[((5566336)>>2)]=((5582808)|0);
HEAP32[((5566368)>>2)]=((5586700)|0);
HEAP32[((5566400)>>2)]=((5582796)|0);
HEAP32[((5566432)>>2)]=((5582784)|0);
HEAP32[((5566464)>>2)]=((5582764)|0);
HEAP32[((5566496)>>2)]=((5582744)|0);
HEAP32[((5566528)>>2)]=((5582724)|0);
HEAP32[((5566560)>>2)]=((5582704)|0);
HEAP32[((5566592)>>2)]=((5582684)|0);
HEAP32[((5566624)>>2)]=((5582664)|0);
HEAP32[((5566656)>>2)]=((5582644)|0);
HEAP32[((5566688)>>2)]=((5582612)|0);
HEAP32[((5566720)>>2)]=((5582596)|0);
HEAP32[((5566752)>>2)]=((5582580)|0);
HEAP32[((5566784)>>2)]=((5582568)|0);
HEAP32[((5566816)>>2)]=((5582556)|0);
HEAP32[((5566848)>>2)]=((5582544)|0);
HEAP32[((5566880)>>2)]=((5582532)|0);
HEAP32[((5566912)>>2)]=((5582520)|0);
HEAP32[((5566944)>>2)]=((5582508)|0);
HEAP32[((5566976)>>2)]=((5582496)|0);
HEAP32[((5567008)>>2)]=((5582472)|0);
HEAP32[((5567040)>>2)]=((5582460)|0);
HEAP32[((5567072)>>2)]=((5582448)|0);
HEAP32[((5567104)>>2)]=((5582436)|0);
HEAP32[((5567136)>>2)]=((5582424)|0);
HEAP32[((5567168)>>2)]=((5582412)|0);
HEAP32[((5567200)>>2)]=((5582400)|0);
HEAP32[((5567232)>>2)]=((5582388)|0);
HEAP32[((5567264)>>2)]=((5582376)|0);
HEAP32[((5567296)>>2)]=((5582364)|0);
HEAP32[((5567328)>>2)]=((5582320)|0);
HEAP32[((5567360)>>2)]=((5582308)|0);
HEAP32[((5567392)>>2)]=((5582296)|0);
HEAP32[((5567424)>>2)]=((5582284)|0);
HEAP32[((5567456)>>2)]=((5582272)|0);
HEAP32[((5567488)>>2)]=((5582260)|0);
HEAP32[((5567520)>>2)]=((5582248)|0);
HEAP32[((5567552)>>2)]=((5582236)|0);
HEAP32[((5567584)>>2)]=((5582224)|0);
HEAP32[((5567616)>>2)]=((5582212)|0);
HEAP32[((5567648)>>2)]=((5582192)|0);
HEAP32[((5567680)>>2)]=((5582180)|0);
HEAP32[((5567712)>>2)]=((5582168)|0);
HEAP32[((5567744)>>2)]=((5582156)|0);
HEAP32[((5567776)>>2)]=((5582144)|0);
HEAP32[((5567808)>>2)]=((5582132)|0);
HEAP32[((5567840)>>2)]=((5582120)|0);
HEAP32[((5567872)>>2)]=((5582108)|0);
HEAP32[((5567904)>>2)]=((5582096)|0);
HEAP32[((5567936)>>2)]=((5582084)|0);
HEAP32[((5567968)>>2)]=((5582056)|0);
HEAP32[((5568000)>>2)]=((5582044)|0);
HEAP32[((5568032)>>2)]=((5582032)|0);
HEAP32[((5568064)>>2)]=((5582020)|0);
HEAP32[((5568096)>>2)]=((5582000)|0);
HEAP32[((5568128)>>2)]=((5581980)|0);
HEAP32[((5568160)>>2)]=((5581960)|0);
HEAP32[((5568192)>>2)]=((5581940)|0);
HEAP32[((5568224)>>2)]=((5581928)|0);
HEAP32[((5568256)>>2)]=((5581916)|0);
HEAP32[((5568288)>>2)]=((5581884)|0);
HEAP32[((5568320)>>2)]=((5581868)|0);
HEAP32[((5568352)>>2)]=((5581852)|0);
HEAP32[((5568384)>>2)]=((5581840)|0);
HEAP32[((5568416)>>2)]=((5581828)|0);
HEAP32[((5568448)>>2)]=((5581812)|0);
HEAP32[((5568480)>>2)]=((5581800)|0);
HEAP32[((5568512)>>2)]=((5581784)|0);
HEAP32[((5568544)>>2)]=((5581768)|0);
HEAP32[((5568576)>>2)]=((5581752)|0);
HEAP32[((5568608)>>2)]=((5581724)|0);
HEAP32[((5568640)>>2)]=((5581712)|0);
HEAP32[((5568672)>>2)]=((5581696)|0);
HEAP32[((5568704)>>2)]=((5581680)|0);
HEAP32[((5568736)>>2)]=((5581664)|0);
HEAP32[((5568768)>>2)]=((5581648)|0);
HEAP32[((5568800)>>2)]=((5581632)|0);
HEAP32[((5568832)>>2)]=((5581616)|0);
HEAP32[((5568864)>>2)]=((5581600)|0);
HEAP32[((5568896)>>2)]=((5581588)|0);
HEAP32[((5568928)>>2)]=((5581552)|0);
HEAP32[((5568960)>>2)]=((5581536)|0);
HEAP32[((5568992)>>2)]=((5581520)|0);
HEAP32[((5569024)>>2)]=((5581504)|0);
HEAP32[((5569056)>>2)]=((5581488)|0);
HEAP32[((5569088)>>2)]=((5581472)|0);
HEAP32[((5569120)>>2)]=((5581456)|0);
HEAP32[((5569152)>>2)]=((5581440)|0);
HEAP32[((5569184)>>2)]=((5581424)|0);
HEAP32[((5569216)>>2)]=((5581408)|0);
HEAP32[((5569248)>>2)]=((5581376)|0);
HEAP32[((5569280)>>2)]=((5581360)|0);
HEAP32[((5569312)>>2)]=((5581344)|0);
HEAP32[((5569344)>>2)]=((5581328)|0);
HEAP32[((5569376)>>2)]=((5581316)|0);
HEAP32[((5569408)>>2)]=((5581300)|0);
HEAP32[((5569440)>>2)]=((5581284)|0);
HEAP32[((5569472)>>2)]=((5581268)|0);
HEAP32[((5569504)>>2)]=((5581252)|0);
HEAP32[((5569536)>>2)]=((5581236)|0);
HEAP32[((5569568)>>2)]=((5581196)|0);
HEAP32[((5569600)>>2)]=((5581180)|0);
HEAP32[((5569632)>>2)]=((5581164)|0);
HEAP32[((5569664)>>2)]=((5581148)|0);
HEAP32[((5569696)>>2)]=((5581132)|0);
HEAP32[((5569728)>>2)]=((5581116)|0);
HEAP32[((5569760)>>2)]=((5581100)|0);
HEAP32[((5569792)>>2)]=((5581088)|0);
HEAP32[((5569824)>>2)]=((5581076)|0);
HEAP32[((5569856)>>2)]=((5581064)|0);
HEAP32[((5569888)>>2)]=((5581016)|0);
HEAP32[((5569920)>>2)]=((5581000)|0);
HEAP32[((5569952)>>2)]=((5580988)|0);
HEAP32[((5569984)>>2)]=((5580976)|0);
HEAP32[((5570016)>>2)]=((5580964)|0);
HEAP32[((5570048)>>2)]=((5580948)|0);
HEAP32[((5570080)>>2)]=((5580936)|0);
HEAP32[((5570112)>>2)]=((5580924)|0);
HEAP32[((5570144)>>2)]=((5580912)|0);
HEAP32[((5570176)>>2)]=((5580892)|0);
HEAP32[((5570208)>>2)]=((5580848)|0);
HEAP32[((5570240)>>2)]=((5580828)|0);
HEAP32[((5570272)>>2)]=((5580808)|0);
HEAP32[((5570304)>>2)]=((5580788)|0);
HEAP32[((5570336)>>2)]=((5580768)|0);
HEAP32[((5570368)>>2)]=((5580748)|0);
HEAP32[((5570400)>>2)]=((5580732)|0);
HEAP32[((5570432)>>2)]=((5580712)|0);
HEAP32[((5570464)>>2)]=((5580692)|0);
HEAP32[((5570496)>>2)]=((5580676)|0);
HEAP32[((5570528)>>2)]=((5580624)|0);
HEAP32[((5570560)>>2)]=((5580608)|0);
HEAP32[((5570592)>>2)]=((5580588)|0);
HEAP32[((5570624)>>2)]=((5580572)|0);
HEAP32[((5570656)>>2)]=((5580552)|0);
HEAP32[((5570688)>>2)]=((5580536)|0);
HEAP32[((5570720)>>2)]=((5580516)|0);
HEAP32[((5570752)>>2)]=((5580500)|0);
HEAP32[((5570784)>>2)]=((5580480)|0);
HEAP32[((5570816)>>2)]=((5580464)|0);
HEAP32[((5570848)>>2)]=((5580432)|0);
HEAP32[((5570880)>>2)]=((5580416)|0);
HEAP32[((5570912)>>2)]=((5580396)|0);
HEAP32[((5570944)>>2)]=((5580380)|0);
HEAP32[((5570976)>>2)]=((5580360)|0);
HEAP32[((5571008)>>2)]=((5580344)|0);
HEAP32[((5571040)>>2)]=((5580324)|0);
HEAP32[((5571072)>>2)]=((5580308)|0);
HEAP32[((5571104)>>2)]=((5580288)|0);
HEAP32[((5571136)>>2)]=((5580268)|0);
HEAP32[((5571168)>>2)]=((5580236)|0);
HEAP32[((5571200)>>2)]=((5580216)|0);
HEAP32[((5571232)>>2)]=((5580196)|0);
HEAP32[((5571264)>>2)]=((5580176)|0);
HEAP32[((5571296)>>2)]=((5580156)|0);
HEAP32[((5571328)>>2)]=((5580136)|0);
HEAP32[((5571360)>>2)]=((5580116)|0);
HEAP32[((5571392)>>2)]=((5580096)|0);
HEAP32[((5571424)>>2)]=((5580076)|0);
HEAP32[((5571456)>>2)]=((5580056)|0);
HEAP32[((5571488)>>2)]=((5580012)|0);
HEAP32[((5571520)>>2)]=((5579992)|0);
HEAP32[((5571552)>>2)]=((5579976)|0);
HEAP32[((5571584)>>2)]=((5579960)|0);
HEAP32[((5571616)>>2)]=((5579944)|0);
HEAP32[((5571648)>>2)]=((5579928)|0);
HEAP32[((5571680)>>2)]=((5579912)|0);
HEAP32[((5571712)>>2)]=((5579896)|0);
HEAP32[((5571744)>>2)]=((5579880)|0);
HEAP32[((5571776)>>2)]=((5579872)|0);
HEAP32[((5571808)>>2)]=((5579856)|0);
HEAP32[((5571840)>>2)]=((5579840)|0);
HEAP32[((5571872)>>2)]=((5579828)|0);
HEAP32[((5571904)>>2)]=((5579812)|0);
HEAP32[((5571936)>>2)]=((5579800)|0);
HEAP32[((5571968)>>2)]=((5579784)|0);
HEAP32[((5572000)>>2)]=((5579768)|0);
HEAP32[((5572032)>>2)]=((5579756)|0);
HEAP32[((5572064)>>2)]=((5579748)|0);
HEAP32[((5572096)>>2)]=((5579732)|0);
HEAP32[((5572128)>>2)]=((5579716)|0);
HEAP32[((5572160)>>2)]=((5579704)|0);
HEAP32[((5572192)>>2)]=((5579688)|0);
HEAP32[((5572224)>>2)]=((5579672)|0);
HEAP32[((5572256)>>2)]=((5579656)|0);
HEAP32[((5572288)>>2)]=((5579640)|0);
HEAP32[((5572320)>>2)]=((5579624)|0);
HEAP32[((5572352)>>2)]=((5579608)|0);
HEAP32[((5572384)>>2)]=((5579592)|0);
HEAP32[((5572416)>>2)]=((5579576)|0);
HEAP32[((5572448)>>2)]=((5579548)|0);
HEAP32[((5572480)>>2)]=((5579532)|0);
HEAP32[((5572512)>>2)]=((5579516)|0);
HEAP32[((5572544)>>2)]=((5579500)|0);
HEAP32[((5572576)>>2)]=((5579484)|0);
HEAP32[((5572608)>>2)]=((5579468)|0);
HEAP32[((5572640)>>2)]=((5579452)|0);
HEAP32[((5572672)>>2)]=((5579436)|0);
HEAP32[((5572704)>>2)]=((5579424)|0);
HEAP32[((5572736)>>2)]=((5579412)|0);
HEAP32[((5572768)>>2)]=((5579388)|0);
HEAP32[((5572800)>>2)]=((5579376)|0);
HEAP32[((5572832)>>2)]=((5579388)|0);
HEAP32[((5572864)>>2)]=((5579376)|0);
HEAP32[((5572896)>>2)]=((5579364)|0);
HEAP32[((5572928)>>2)]=((5579352)|0);
HEAP32[((5572960)>>2)]=((5579340)|0);
HEAP32[((5572992)>>2)]=((5579324)|0);
HEAP32[((5573024)>>2)]=((5579308)|0);
HEAP32[((5573056)>>2)]=((5579292)|0);
HEAP32[((5573088)>>2)]=((5579276)|0);
HEAP32[((5573120)>>2)]=((5579260)|0);
HEAP32[((5573152)>>2)]=((5579220)|0);
HEAP32[((5573184)>>2)]=((5579204)|0);
HEAP32[((5573216)>>2)]=((5579188)|0);
var _llvm_dbg_declare; // stub for _llvm_dbg_declare

  function _memcmp(p1, p2, num) {
      for (var i = 0; i < num; i++) {
        var v1 = HEAPU8[((p1)+(i))];
        var v2 = HEAPU8[((p2)+(i))];
        if (v1 != v2) return v1 > v2 ? 1 : -1;
      }
      return 0;
    }

  
  
  
  var ERRNO_CODES={E2BIG:7,EACCES:13,EADDRINUSE:98,EADDRNOTAVAIL:99,EAFNOSUPPORT:97,EAGAIN:11,EALREADY:114,EBADF:9,EBADMSG:74,EBUSY:16,ECANCELED:125,ECHILD:10,ECONNABORTED:103,ECONNREFUSED:111,ECONNRESET:104,EDEADLK:35,EDESTADDRREQ:89,EDOM:33,EDQUOT:122,EEXIST:17,EFAULT:14,EFBIG:27,EHOSTUNREACH:113,EIDRM:43,EILSEQ:84,EINPROGRESS:115,EINTR:4,EINVAL:22,EIO:5,EISCONN:106,EISDIR:21,ELOOP:40,EMFILE:24,EMLINK:31,EMSGSIZE:90,EMULTIHOP:72,ENAMETOOLONG:36,ENETDOWN:100,ENETRESET:102,ENETUNREACH:101,ENFILE:23,ENOBUFS:105,ENODATA:61,ENODEV:19,ENOENT:2,ENOEXEC:8,ENOLCK:37,ENOLINK:67,ENOMEM:12,ENOMSG:42,ENOPROTOOPT:92,ENOSPC:28,ENOSR:63,ENOSTR:60,ENOSYS:38,ENOTCONN:107,ENOTDIR:20,ENOTEMPTY:39,ENOTRECOVERABLE:131,ENOTSOCK:88,ENOTSUP:95,ENOTTY:25,ENXIO:6,EOVERFLOW:75,EOWNERDEAD:130,EPERM:1,EPIPE:32,EPROTO:71,EPROTONOSUPPORT:93,EPROTOTYPE:91,ERANGE:34,EROFS:30,ESPIPE:29,ESRCH:3,ESTALE:116,ETIME:62,ETIMEDOUT:110,ETXTBSY:26,EWOULDBLOCK:11,EXDEV:18};
  
  function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      if (!___setErrNo.ret) ___setErrNo.ret = allocate([0], 'i32', ALLOC_STATIC);
      HEAP32[((___setErrNo.ret)>>2)]=value
      return value;
    }
  
  var _stdin=allocate(1, "i32*", ALLOC_STACK);
  
  var _stdout=allocate(1, "i32*", ALLOC_STACK);
  
  var _stderr=allocate(1, "i32*", ALLOC_STACK);
  
  var __impure_ptr=allocate(1, "i32*", ALLOC_STACK);var FS={currentPath:"/",nextInode:2,streams:[null],ignorePermissions:true,joinPath:function (parts, forceRelative) {
        var ret = parts[0];
        for (var i = 1; i < parts.length; i++) {
          if (ret[ret.length-1] != '/') ret += '/';
          ret += parts[i];
        }
        if (forceRelative && ret[0] == '/') ret = ret.substr(1);
        return ret;
      },absolutePath:function (relative, base) {
        if (typeof relative !== 'string') return null;
        if (base === undefined) base = FS.currentPath;
        if (relative && relative[0] == '/') base = '';
        var full = base + '/' + relative;
        var parts = full.split('/').reverse();
        var absolute = [''];
        while (parts.length) {
          var part = parts.pop();
          if (part == '' || part == '.') {
            // Nothing.
          } else if (part == '..') {
            if (absolute.length > 1) absolute.pop();
          } else {
            absolute.push(part);
          }
        }
        return absolute.length == 1 ? '/' : absolute.join('/');
      },analyzePath:function (path, dontResolveLastLink, linksVisited) {
        var ret = {
          isRoot: false,
          exists: false,
          error: 0,
          name: null,
          path: null,
          object: null,
          parentExists: false,
          parentPath: null,
          parentObject: null
        };
        path = FS.absolutePath(path);
        if (path == '/') {
          ret.isRoot = true;
          ret.exists = ret.parentExists = true;
          ret.name = '/';
          ret.path = ret.parentPath = '/';
          ret.object = ret.parentObject = FS.root;
        } else if (path !== null) {
          linksVisited = linksVisited || 0;
          path = path.slice(1).split('/');
          var current = FS.root;
          var traversed = [''];
          while (path.length) {
            if (path.length == 1 && current.isFolder) {
              ret.parentExists = true;
              ret.parentPath = traversed.length == 1 ? '/' : traversed.join('/');
              ret.parentObject = current;
              ret.name = path[0];
            }
            var target = path.shift();
            if (!current.isFolder) {
              ret.error = ERRNO_CODES.ENOTDIR;
              break;
            } else if (!current.read) {
              ret.error = ERRNO_CODES.EACCES;
              break;
            } else if (!current.contents.hasOwnProperty(target)) {
              ret.error = ERRNO_CODES.ENOENT;
              break;
            }
            current = current.contents[target];
            if (current.link && !(dontResolveLastLink && path.length == 0)) {
              if (linksVisited > 40) { // Usual Linux SYMLOOP_MAX.
                ret.error = ERRNO_CODES.ELOOP;
                break;
              }
              var link = FS.absolutePath(current.link, traversed.join('/'));
              ret = FS.analyzePath([link].concat(path).join('/'),
                                   dontResolveLastLink, linksVisited + 1);
              return ret;
            }
            traversed.push(target);
            if (path.length == 0) {
              ret.exists = true;
              ret.path = traversed.join('/');
              ret.object = current;
            }
          }
        }
        return ret;
      },findObject:function (path, dontResolveLastLink) {
        FS.ensureRoot();
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },createObject:function (parent, name, properties, canRead, canWrite) {
        if (!parent) parent = '/';
        if (typeof parent === 'string') parent = FS.findObject(parent);
  
        if (!parent) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent path must exist.');
        }
        if (!parent.isFolder) {
          ___setErrNo(ERRNO_CODES.ENOTDIR);
          throw new Error('Parent must be a folder.');
        }
        if (!parent.write && !FS.ignorePermissions) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent folder must be writeable.');
        }
        if (!name || name == '.' || name == '..') {
          ___setErrNo(ERRNO_CODES.ENOENT);
          throw new Error('Name must not be empty.');
        }
        if (parent.contents.hasOwnProperty(name)) {
          ___setErrNo(ERRNO_CODES.EEXIST);
          throw new Error("Can't overwrite object.");
        }
  
        parent.contents[name] = {
          read: canRead === undefined ? true : canRead,
          write: canWrite === undefined ? false : canWrite,
          timestamp: Date.now(),
          inodeNumber: FS.nextInode++
        };
        for (var key in properties) {
          if (properties.hasOwnProperty(key)) {
            parent.contents[name][key] = properties[key];
          }
        }
  
        return parent.contents[name];
      },createFolder:function (parent, name, canRead, canWrite) {
        var properties = {isFolder: true, isDevice: false, contents: {}};
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createPath:function (parent, path, canRead, canWrite) {
        var current = FS.findObject(parent);
        if (current === null) throw new Error('Invalid parent.');
        path = path.split('/').reverse();
        while (path.length) {
          var part = path.pop();
          if (!part) continue;
          if (!current.contents.hasOwnProperty(part)) {
            FS.createFolder(current, part, canRead, canWrite);
          }
          current = current.contents[part];
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        properties.isFolder = false;
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createDataFile:function (parent, name, data, canRead, canWrite) {
        if (typeof data === 'string') {
          var dataArray = new Array(data.length);
          for (var i = 0, len = data.length; i < len; ++i) dataArray[i] = data.charCodeAt(i);
          data = dataArray;
        }
        var properties = {
          isDevice: false,
          contents: data.subarray ? data.subarray(0) : data // as an optimization, create a new array wrapper (not buffer) here, to help JS engines understand this object
        };
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
  
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
          var LazyUint8Array = function(chunkSize, length) {
            this.length = length;
            this.chunkSize = chunkSize;
            this.chunks = []; // Loaded chunks. Index is the chunk number
          }
          LazyUint8Array.prototype.get = function(idx) {
            if (idx > this.length-1 || idx < 0) {
              return undefined;
            }
            var chunkOffset = idx % chunkSize;
            var chunkNum = Math.floor(idx / chunkSize);
            return this.getter(chunkNum)[chunkOffset];
          }
          LazyUint8Array.prototype.setDataGetter = function(getter) {
            this.getter = getter;
          }
    
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
          if (!hasByteServing) chunkSize = datalength;
    
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
    
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
    
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
    
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
    
          var lazyArray = new LazyUint8Array(chunkSize, datalength);
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * lazyArray.chunkSize;
            var end = (chunkNum+1) * lazyArray.chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile) {
        Browser.ensureObjects();
        var fullname = FS.joinPath([parent, name], true);
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },createLink:function (parent, name, target, canRead, canWrite) {
        var properties = {isDevice: false, link: target};
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createDevice:function (parent, name, input, output) {
        if (!(input || output)) {
          throw new Error('A device must have at least one callback defined.');
        }
        var ops = {isDevice: true, input: input, output: output};
        return FS.createFile(parent, name, ops, Boolean(input), Boolean(output));
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },ensureRoot:function () {
        if (FS.root) return;
        // The main file system tree. All the contents are inside this.
        FS.root = {
          read: true,
          write: true,
          isFolder: true,
          isDevice: false,
          timestamp: Date.now(),
          inodeNumber: 1,
          contents: {}
        };
      },init:function (input, output, error) {
        // Make sure we initialize only once.
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureRoot();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        input = input || Module['stdin'];
        output = output || Module['stdout'];
        error = error || Module['stderr'];
  
        // Default handlers.
        var stdinOverridden = true, stdoutOverridden = true, stderrOverridden = true;
        if (!input) {
          stdinOverridden = false;
          input = function() {
            if (!input.cache || !input.cache.length) {
              var result;
              if (typeof window != 'undefined' &&
                  typeof window.prompt == 'function') {
                // Browser.
                result = window.prompt('Input: ');
                if (result === null) result = String.fromCharCode(0); // cancel ==> EOF
              } else if (typeof readline == 'function') {
                // Command line.
                result = readline();
              }
              if (!result) result = '';
              input.cache = intArrayFromString(result + '\n', true);
            }
            return input.cache.shift();
          };
        }
        var utf8 = new Runtime.UTF8Processor();
        function simpleOutput(val) {
          if (val === null || val === '\n'.charCodeAt(0)) {
            output.printer(output.buffer.join(''));
            output.buffer = [];
          } else {
            output.buffer.push(utf8.processCChar(val));
          }
        }
        if (!output) {
          stdoutOverridden = false;
          output = simpleOutput;
        }
        if (!output.printer) output.printer = Module['print'];
        if (!output.buffer) output.buffer = [];
        if (!error) {
          stderrOverridden = false;
          error = simpleOutput;
        }
        if (!error.printer) error.printer = Module['print'];
        if (!error.buffer) error.buffer = [];
  
        // Create the temporary folder, if not already created
        try {
          FS.createFolder('/', 'tmp', true, true);
        } catch(e) {}
  
        // Create the I/O devices.
        var devFolder = FS.createFolder('/', 'dev', true, true);
        var stdin = FS.createDevice(devFolder, 'stdin', input);
        var stdout = FS.createDevice(devFolder, 'stdout', null, output);
        var stderr = FS.createDevice(devFolder, 'stderr', null, error);
        FS.createDevice(devFolder, 'tty', input, output);
  
        // Create default streams.
        FS.streams[1] = {
          path: '/dev/stdin',
          object: stdin,
          position: 0,
          isRead: true,
          isWrite: false,
          isAppend: false,
          isTerminal: !stdinOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[2] = {
          path: '/dev/stdout',
          object: stdout,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          isTerminal: !stdoutOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[3] = {
          path: '/dev/stderr',
          object: stderr,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          isTerminal: !stderrOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        assert(Math.max(_stdin, _stdout, _stderr) < 128); // make sure these are low, we flatten arrays with these
        HEAP32[((_stdin)>>2)]=1;
        HEAP32[((_stdout)>>2)]=2;
        HEAP32[((_stderr)>>2)]=3;
  
        // Other system paths
        FS.createPath('/', 'dev/shm/tmp', true, true); // temp files
  
        // Newlib initialization
        for (var i = FS.streams.length; i < Math.max(_stdin, _stdout, _stderr) + 4; i++) {
          FS.streams[i] = null; // Make sure to keep FS.streams dense
        }
        FS.streams[_stdin] = FS.streams[1];
        FS.streams[_stdout] = FS.streams[2];
        FS.streams[_stderr] = FS.streams[3];
        allocate([ allocate(
          [0, 0, 0, 0, _stdin, 0, 0, 0, _stdout, 0, 0, 0, _stderr, 0, 0, 0],
          'void*', ALLOC_STATIC) ], 'void*', ALLOC_NONE, __impure_ptr);
      },quit:function () {
        if (!FS.init.initialized) return;
        // Flush any partially-printed lines in stdout and stderr. Careful, they may have been closed
        if (FS.streams[2] && FS.streams[2].object.output.buffer.length > 0) FS.streams[2].object.output('\n'.charCodeAt(0));
        if (FS.streams[3] && FS.streams[3].object.output.buffer.length > 0) FS.streams[3].object.output('\n'.charCodeAt(0));
      },standardizePath:function (path) {
        if (path.substr(0, 2) == './') path = path.substr(2);
        return path;
      },deleteFile:function (path) {
        path = FS.analyzePath(path);
        if (!path.parentExists || !path.exists) {
          throw 'Invalid path ' + path;
        }
        delete path.parentObject.contents[path.name];
      }};
  
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream || stream.object.isDevice) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (stream.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (nbyte < 0 || offset < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var contents = stream.object.contents;
        while (contents.length < offset) contents.push(0);
        for (var i = 0; i < nbyte; i++) {
          contents[offset + i] = HEAPU8[((buf)+(i))];
        }
        stream.object.timestamp = Date.now();
        return i;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (nbyte < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        if (stream.object.isDevice) {
          if (stream.object.output) {
            for (var i = 0; i < nbyte; i++) {
              try {
                stream.object.output(HEAP8[((buf)+(i))]);
              } catch (e) {
                ___setErrNo(ERRNO_CODES.EIO);
                return -1;
              }
            }
            stream.object.timestamp = Date.now();
            return i;
          } else {
            ___setErrNo(ERRNO_CODES.ENXIO);
            return -1;
          }
        } else {
          var bytesWritten = _pwrite(fildes, buf, nbyte, stream.position);
          if (bytesWritten != -1) stream.position += bytesWritten;
          return bytesWritten;
        }
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var bytesWritten = _write(stream, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        if (FS.streams[stream]) FS.streams[stream].error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }
  
  
  function _strlen(ptr) {
      ptr = ptr|0;
      var curr = 0;
      curr = ptr;
      while (HEAP8[(curr)]|0 != 0) {
        curr = (curr + 1)|0;
      }
      return (curr - ptr)|0;
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],HEAPF64[(tempDoublePtr)>>3]);
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[(textIndex+1)];
        if (curr == '%'.charCodeAt(0)) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          flagsLoop: while (1) {
            switch (next) {
              case '+'.charCodeAt(0):
                flagAlwaysSigned = true;
                break;
              case '-'.charCodeAt(0):
                flagLeftAlign = true;
                break;
              case '#'.charCodeAt(0):
                flagAlternative = true;
                break;
              case '0'.charCodeAt(0):
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[(textIndex+1)];
          }
  
          // Handle width.
          var width = 0;
          if (next == '*'.charCodeAt(0)) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[(textIndex+1)];
          } else {
            while (next >= '0'.charCodeAt(0) && next <= '9'.charCodeAt(0)) {
              width = width * 10 + (next - '0'.charCodeAt(0));
              textIndex++;
              next = HEAP8[(textIndex+1)];
            }
          }
  
          // Handle precision.
          var precisionSet = false;
          if (next == '.'.charCodeAt(0)) {
            var precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[(textIndex+1)];
            if (next == '*'.charCodeAt(0)) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[(textIndex+1)];
                if (precisionChr < '0'.charCodeAt(0) ||
                    precisionChr > '9'.charCodeAt(0)) break;
                precision = precision * 10 + (precisionChr - '0'.charCodeAt(0));
                textIndex++;
              }
            }
            next = HEAP8[(textIndex+1)];
          } else {
            var precision = 6; // Standard default.
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[(textIndex+2)];
              if (nextNext == 'h'.charCodeAt(0)) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[(textIndex+2)];
              if (nextNext == 'l'.charCodeAt(0)) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[(textIndex+1)];
  
          // Handle type specifier.
          if (['d', 'i', 'u', 'o', 'x', 'X', 'p'].indexOf(String.fromCharCode(next)) != -1) {
            // Integer.
            var signed = next == 'd'.charCodeAt(0) || next == 'i'.charCodeAt(0);
            argSize = argSize || 4;
            var currArg = getNextArg('i' + (argSize * 8));
            var origArg = currArg;
            var argText;
            // Flatten i64-1 [low, high] into a (slightly rounded) double
            if (argSize == 8) {
              currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 'u'.charCodeAt(0));
            }
            // Truncate to requested size.
            if (argSize <= 4) {
              var limit = Math.pow(256, argSize) - 1;
              currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
            }
            // Format the number.
            var currAbsArg = Math.abs(currArg);
            var prefix = '';
            if (next == 'd'.charCodeAt(0) || next == 'i'.charCodeAt(0)) {
              if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
              argText = reSign(currArg, 8 * argSize, 1).toString(10);
            } else if (next == 'u'.charCodeAt(0)) {
              if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
              argText = unSign(currArg, 8 * argSize, 1).toString(10);
              currArg = Math.abs(currArg);
            } else if (next == 'o'.charCodeAt(0)) {
              argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
            } else if (next == 'x'.charCodeAt(0) || next == 'X'.charCodeAt(0)) {
              prefix = flagAlternative ? '0x' : '';
              if (argSize == 8 && i64Math) argText = (origArg[1]>>>0).toString(16) + (origArg[0]>>>0).toString(16); else
              if (currArg < 0) {
                // Represent negative numbers in hex as 2's complement.
                currArg = -currArg;
                argText = (currAbsArg - 1).toString(16);
                var buffer = [];
                for (var i = 0; i < argText.length; i++) {
                  buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                }
                argText = buffer.join('');
                while (argText.length < argSize * 2) argText = 'f' + argText;
              } else {
                argText = currAbsArg.toString(16);
              }
              if (next == 'X'.charCodeAt(0)) {
                prefix = prefix.toUpperCase();
                argText = argText.toUpperCase();
              }
            } else if (next == 'p'.charCodeAt(0)) {
              if (currAbsArg === 0) {
                argText = '(nil)';
              } else {
                prefix = '0x';
                argText = currAbsArg.toString(16);
              }
            }
            if (precisionSet) {
              while (argText.length < precision) {
                argText = '0' + argText;
              }
            }
  
            // Add sign if needed
            if (flagAlwaysSigned) {
              if (currArg < 0) {
                prefix = '-' + prefix;
              } else {
                prefix = '+' + prefix;
              }
            }
  
            // Add padding.
            while (prefix.length + argText.length < width) {
              if (flagLeftAlign) {
                argText += ' ';
              } else {
                if (flagZeroPad) {
                  argText = '0' + argText;
                } else {
                  prefix = ' ' + prefix;
                }
              }
            }
  
            // Insert the result into the buffer.
            argText = prefix + argText;
            argText.split('').forEach(function(chr) {
              ret.push(chr.charCodeAt(0));
            });
          } else if (['f', 'F', 'e', 'E', 'g', 'G'].indexOf(String.fromCharCode(next)) != -1) {
            // Float.
            var currArg = getNextArg('double');
            var argText;
  
            if (isNaN(currArg)) {
              argText = 'nan';
              flagZeroPad = false;
            } else if (!isFinite(currArg)) {
              argText = (currArg < 0 ? '-' : '') + 'inf';
              flagZeroPad = false;
            } else {
              var isGeneral = false;
              var effectivePrecision = Math.min(precision, 20);
  
              // Convert g/G to f/F or e/E, as per:
              // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
              if (next == 'g'.charCodeAt(0) || next == 'G'.charCodeAt(0)) {
                isGeneral = true;
                precision = precision || 1;
                var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                if (precision > exponent && exponent >= -4) {
                  next = ((next == 'g'.charCodeAt(0)) ? 'f' : 'F').charCodeAt(0);
                  precision -= exponent + 1;
                } else {
                  next = ((next == 'g'.charCodeAt(0)) ? 'e' : 'E').charCodeAt(0);
                  precision--;
                }
                effectivePrecision = Math.min(precision, 20);
              }
  
              if (next == 'e'.charCodeAt(0) || next == 'E'.charCodeAt(0)) {
                argText = currArg.toExponential(effectivePrecision);
                // Make sure the exponent has at least 2 digits.
                if (/[eE][-+]\d$/.test(argText)) {
                  argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                }
              } else if (next == 'f'.charCodeAt(0) || next == 'F'.charCodeAt(0)) {
                argText = currArg.toFixed(effectivePrecision);
              }
  
              var parts = argText.split('e');
              if (isGeneral && !flagAlternative) {
                // Discard trailing zeros and periods.
                while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                       (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                  parts[0] = parts[0].slice(0, -1);
                }
              } else {
                // Make sure we have a period in alternative mode.
                if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                // Zero pad until required precision.
                while (precision > effectivePrecision++) parts[0] += '0';
              }
              argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
              // Capitalize 'E' if needed.
              if (next == 'E'.charCodeAt(0)) argText = argText.toUpperCase();
  
              // Add sign.
              if (flagAlwaysSigned && currArg >= 0) {
                argText = '+' + argText;
              }
            }
  
            // Add padding.
            while (argText.length < width) {
              if (flagLeftAlign) {
                argText += ' ';
              } else {
                if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                  argText = argText[0] + '0' + argText.slice(1);
                } else {
                  argText = (flagZeroPad ? '0' : ' ') + argText;
                }
              }
            }
  
            // Adjust case.
            if (next < 'a'.charCodeAt(0)) argText = argText.toUpperCase();
  
            // Insert the result into the buffer.
            argText.split('').forEach(function(chr) {
              ret.push(chr.charCodeAt(0));
            });
          } else if (next == 's'.charCodeAt(0)) {
            // String.
            var arg = getNextArg('i8*') || nullString;
            var argLength = _strlen(arg);
            if (precisionSet) argLength = Math.min(argLength, precision);
            if (!flagLeftAlign) {
              while (argLength < width--) {
                ret.push(' '.charCodeAt(0));
              }
            }
            for (var i = 0; i < argLength; i++) {
              ret.push(HEAPU8[(arg++)]);
            }
            if (flagLeftAlign) {
              while (argLength < width--) {
                ret.push(' '.charCodeAt(0));
              }
            }
          } else if (next == 'c'.charCodeAt(0)) {
            // Character.
            if (flagLeftAlign) ret.push(getNextArg('i8'));
            while (--width > 0) {
              ret.push(' '.charCodeAt(0));
            }
            if (!flagLeftAlign) ret.push(getNextArg('i8'));
          } else if (next == 'n'.charCodeAt(0)) {
            // Write the length written so far to the next parameter.
            var ptr = getNextArg('i32*');
            HEAP32[((ptr)>>2)]=ret.length
          } else if (next == '%'.charCodeAt(0)) {
            // Literal percent sign.
            ret.push(curr);
          } else {
            // Unknown specifiers remain untouched.
            for (var i = startTextIndex; i < textIndex + 2; i++) {
              ret.push(HEAP8[(i)]);
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }

  function _longjmp(env, value) {
      throw { longjmp: true, id: HEAP32[((env)>>2)], value: value || 1 };
    }

  function _feof(stream) {
      // int feof(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/feof.html
      return Number(FS.streams[stream] && FS.streams[stream].eof);
    }

  
  function _ftell(stream) {
      // long ftell(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftell.html
      if (FS.streams[stream]) {
        stream = FS.streams[stream];
        if (stream.object.isDevice) {
          ___setErrNo(ERRNO_CODES.ESPIPE);
          return -1;
        } else {
          return stream.position;
        }
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }var _ftello;

  
  function _memcpy(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      var ret = 0;
      ret = dest|0;
      if ((dest&3) == (src&3)) {
        while (dest & 3) {
          if ((num|0) == 0) return ret|0;
          HEAP8[(dest)]=HEAP8[(src)];
          dest = (dest+1)|0;
          src = (src+1)|0;
          num = (num-1)|0;
        }
        while ((num|0) >= 4) {
          HEAP32[((dest)>>2)]=HEAP32[((src)>>2)];
          dest = (dest+4)|0;
          src = (src+4)|0;
          num = (num-4)|0;
        }
      }
      while ((num|0) > 0) {
        HEAP8[(dest)]=HEAP8[(src)];
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      return ret|0;
    }var _llvm_memcpy_p0i8_p0i8_i32;

  
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.streams[fildes];
      if (!stream || stream.object.isDevice) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isRead) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (stream.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (nbyte < 0 || offset < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var bytesRead = 0;
        while (stream.ungotten.length && nbyte > 0) {
          HEAP8[(buf++)]=stream.ungotten.pop()
          nbyte--;
          bytesRead++;
        }
        var contents = stream.object.contents;
        var size = Math.min(contents.length - offset, nbyte);
        if (contents.subarray || contents.slice) { // typed array or normal array
          for (var i = 0; i < size; i++) {
            HEAP8[((buf)+(i))]=contents[offset + i]
          }
        } else {
          for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
            HEAP8[((buf)+(i))]=contents.get(offset + i)
          }
        }
        bytesRead += size;
        return bytesRead;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.streams[fildes];
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isRead) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (nbyte < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var bytesRead;
        if (stream.object.isDevice) {
          if (stream.object.input) {
            bytesRead = 0;
            while (stream.ungotten.length && nbyte > 0) {
              HEAP8[(buf++)]=stream.ungotten.pop()
              nbyte--;
              bytesRead++;
            }
            for (var i = 0; i < nbyte; i++) {
              try {
                var result = stream.object.input();
              } catch (e) {
                ___setErrNo(ERRNO_CODES.EIO);
                return -1;
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              HEAP8[((buf)+(i))]=result
            }
            return bytesRead;
          } else {
            ___setErrNo(ERRNO_CODES.ENXIO);
            return -1;
          }
        } else {
          var ungotSize = stream.ungotten.length;
          bytesRead = _pread(fildes, buf, nbyte, stream.position);
          if (bytesRead != -1) {
            stream.position += (stream.ungotten.length - ungotSize) + bytesRead;
          }
          return bytesRead;
        }
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) return 0;
      var bytesRead = _read(stream, ptr, bytesToRead);
      var streamObj = FS.streams[stream];
      if (bytesRead == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        if (bytesRead < bytesToRead) streamObj.eof = true;
        return Math.floor(bytesRead / size);
      }
    }

  
  function _htons(value) {
      return ((value & 0xff) << 8) + ((value & 0xff00) >> 8);
    }var _ntohs;

  
  function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      if (!FS.streams[stream]) return -1;
      var streamObj = FS.streams[stream];
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _read(stream, _fgetc.ret, 1);
      if (ret == 0) {
        streamObj.eof = true;
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[(_fgetc.ret)];
      }
    }var _getc_unlocked;

  function _swab(src, dest, nbytes) {
      // void swab(const void *restrict src, void *restrict dest, ssize_t nbytes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/swab.html
      if (nbytes < 0) return;
      nbytes -= nbytes % 2;
      for (var i = 0; i < nbytes; i += 2) {
        var first = HEAP8[((src)+(i))];
        var second = HEAP8[((src)+(i + 1))];
        HEAP8[((dest)+(i))]=second
        HEAP8[((dest)+(i + 1))]=first
      }
    }

  
  function _memset(ptr, value, num) {
      ptr = ptr|0; value = value|0; num = num|0;
      var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
      stop = (ptr + num)|0;
      if (num|0 >= 20) {
        // This is unaligned, but quite large, so work hard to get to aligned settings
        unaligned = ptr & 3;
        value4 = value | (value << 8) | (value << 16) | (value << 24);
        stop4 = stop & ~3;
        if (unaligned) {
          unaligned = (ptr + 4 - unaligned)|0;
          while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
            HEAP8[(ptr)]=value;
            ptr = (ptr+1)|0;
          }
        }
        while ((ptr|0) < (stop4|0)) {
          HEAP32[((ptr)>>2)]=value4;
          ptr = (ptr+4)|0;
        }
      }
      while ((ptr|0) < (stop|0)) {
        HEAP8[(ptr)]=value;
        ptr = (ptr+1)|0;
      }
    }var _llvm_memset_p0i8_i32;

  
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      if (FS.streams[fildes] && !FS.streams[fildes].object.isDevice) {
        var stream = FS.streams[fildes];
        var position = offset;
        if (whence === 1) {  // SEEK_CUR.
          position += stream.position;
        } else if (whence === 2) {  // SEEK_END.
          position += stream.object.contents.length;
        }
        if (position < 0) {
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        } else {
          stream.ungotten = [];
          stream.position = position;
          return position;
        }
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var ret = _lseek(stream, offset, whence);
      if (ret == -1) {
        return -1;
      } else {
        FS.streams[stream].eof = false;
        return 0;
      }
    }

  var _getc;


  
  
  function __isFloat(text) {
      return !!(/^[+-]?[0-9]*\.?[0-9]+([eE][+-]?[0-9]+)?$/.exec(text));
    }function __scanString(format, get, unget, varargs) {
      if (!__scanString.whiteSpace) {
        __scanString.whiteSpace = {};
        __scanString.whiteSpace[' '.charCodeAt(0)] = 1;
        __scanString.whiteSpace['\t'.charCodeAt(0)] = 1;
        __scanString.whiteSpace['\n'.charCodeAt(0)] = 1;
        __scanString.whiteSpace[' '] = 1;
        __scanString.whiteSpace['\t'] = 1;
        __scanString.whiteSpace['\n'] = 1;
      }
      // Supports %x, %4x, %d.%d, %lld, %s, %f, %lf.
      // TODO: Support all format specifiers.
      format = Pointer_stringify(format);
      var soFar = 0;
      if (format.indexOf('%n') >= 0) {
        // need to track soFar
        var _get = get;
        get = function() {
          soFar++;
          return _get();
        }
        var _unget = unget;
        unget = function() {
          soFar--;
          return _unget();
        }
      }
      var formatIndex = 0;
      var argsi = 0;
      var fields = 0;
      var argIndex = 0;
      var next;
  
      mainLoop:
      for (var formatIndex = 0; formatIndex < format.length;) {
        if (format[formatIndex] === '%' && format[formatIndex+1] == 'n') {
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getNativeFieldSize('void*');
          HEAP32[((argPtr)>>2)]=soFar;
          formatIndex += 2;
          continue;
        }
  
        // remove whitespace
        while (1) {
          next = get();
          if (next == 0) return fields;
          if (!(next in __scanString.whiteSpace)) break;
        }
        unget();
  
        if (format[formatIndex] === '%') {
          formatIndex++;
          var maxSpecifierStart = formatIndex;
          while (format[formatIndex].charCodeAt(0) >= '0'.charCodeAt(0) &&
                 format[formatIndex].charCodeAt(0) <= '9'.charCodeAt(0)) {
            formatIndex++;
          }
          var max_;
          if (formatIndex != maxSpecifierStart) {
            max_ = parseInt(format.slice(maxSpecifierStart, formatIndex), 10);
          }
          var long_ = false;
          var half = false;
          var longLong = false;
          if (format[formatIndex] == 'l') {
            long_ = true;
            formatIndex++;
            if(format[formatIndex] == 'l') {
              longLong = true;
              formatIndex++;
            }
          } else if (format[formatIndex] == 'h') {
            half = true;
            formatIndex++;
          }
          var type = format[formatIndex];
          formatIndex++;
          var curr = 0;
          var buffer = [];
          // Read characters according to the format. floats are trickier, they may be in an unfloat state in the middle, then be a valid float later
          if (type == 'f' || type == 'e' || type == 'g' || type == 'E') {
            var last = 0;
            next = get();
            while (next > 0) {
              buffer.push(String.fromCharCode(next));
              if (__isFloat(buffer.join(''))) {
                last = buffer.length;
              }
              next = get();
            }
            for (var i = 0; i < buffer.length - last + 1; i++) {
              unget();
            }
            buffer.length = last;
          } else {
            next = get();
            var first = true;
            while ((curr < max_ || isNaN(max_)) && next > 0) {
              if (!(next in __scanString.whiteSpace) && // stop on whitespace
                  (type == 's' ||
                   ((type === 'd' || type == 'u' || type == 'i') && ((next >= '0'.charCodeAt(0) && next <= '9'.charCodeAt(0)) ||
                                                                     (first && next == '-'.charCodeAt(0)))) ||
                   (type === 'x' && (next >= '0'.charCodeAt(0) && next <= '9'.charCodeAt(0) ||
                                     next >= 'a'.charCodeAt(0) && next <= 'f'.charCodeAt(0) ||
                                     next >= 'A'.charCodeAt(0) && next <= 'F'.charCodeAt(0)))) &&
                  (formatIndex >= format.length || next !== format[formatIndex].charCodeAt(0))) { // Stop when we read something that is coming up
                buffer.push(String.fromCharCode(next));
                next = get();
                curr++;
                first = false;
              } else {
                break;
              }
            }
            unget();
          }
          if (buffer.length === 0) return 0;  // Failure.
          var text = buffer.join('');
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getNativeFieldSize('void*');
          switch (type) {
            case 'd': case 'u': case 'i':
              if (half) {
                HEAP16[((argPtr)>>1)]=parseInt(text, 10);
              } else if(longLong) {
                (tempI64 = [parseInt(text, 10)>>>0,Math.min(Math.floor((parseInt(text, 10))/4294967296), 4294967295)>>>0],HEAP32[((argPtr)>>2)]=tempI64[0],HEAP32[(((argPtr)+(4))>>2)]=tempI64[1]);
              } else {
                HEAP32[((argPtr)>>2)]=parseInt(text, 10);
              }
              break;
            case 'x':
              HEAP32[((argPtr)>>2)]=parseInt(text, 16)
              break;
            case 'f':
            case 'e':
            case 'g':
            case 'E':
              // fallthrough intended
              if (long_) {
                (HEAPF64[(tempDoublePtr)>>3]=parseFloat(text),HEAP32[((argPtr)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((argPtr)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)])
              } else {
                HEAPF32[((argPtr)>>2)]=parseFloat(text)
              }
              break;
            case 's':
              var array = intArrayFromString(text);
              for (var j = 0; j < array.length; j++) {
                HEAP8[((argPtr)+(j))]=array[j]
              }
              break;
          }
          fields++;
        } else if (format[formatIndex] in __scanString.whiteSpace) {
          next = get();
          while (next in __scanString.whiteSpace) {
            if (next <= 0) break mainLoop;  // End of input.
            next = get();
          }
          unget(next);
          formatIndex++;
        } else {
          // Not a specifier.
          next = get();
          if (format[formatIndex].charCodeAt(0) !== next) {
            unget(next);
            break mainLoop;
          }
          formatIndex++;
        }
      }
      return fields;
    }function _sscanf(s, format, varargs) {
      // int sscanf(const char *restrict s, const char *restrict format, ... );
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/scanf.html
      var index = 0;
      var get = function() { return HEAP8[((s)+(index++))]; };
      var unget = function() { index--; };
      return __scanString(format, get, unget, varargs);
    }

  function _strcpy(pdest, psrc) {
      var i = 0;
      do {
        HEAP8[(pdest+i)]=HEAP8[(psrc+i)];
        i ++;
      } while (HEAP8[((psrc)+(i-1))] != 0);
      return pdest;
    }


  
  function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[(_fputc.ret)]=chr
      var ret = _write(stream, _fputc.ret, 1);
      if (ret == -1) {
        if (FS.streams[stream]) FS.streams[stream].error = true;
        return -1;
      } else {
        return chr;
      }
    }var _putc;

  function _htonl(value) {
      return ((value & 0xff) << 24) + ((value & 0xff00) << 8) +
             ((value & 0xff0000) >>> 8) + ((value & 0xff000000) >>> 24);
    }


  
  
  
  function _isspace(chr) {
      return chr in { 32: 0, 9: 0, 10: 0, 11: 0, 12: 0, 13: 0 };
    }function __parseInt(str, endptr, base, min, max, bits, unsign) {
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
  
      // Check for a plus/minus sign.
      var multiplier = 1;
      if (HEAP8[(str)] == '-'.charCodeAt(0)) {
        multiplier = -1;
        str++;
      } else if (HEAP8[(str)] == '+'.charCodeAt(0)) {
        str++;
      }
  
      // Find base.
      var finalBase = base;
      if (!finalBase) {
        if (HEAP8[(str)] == '0'.charCodeAt(0)) {
          if (HEAP8[(str+1)] == 'x'.charCodeAt(0) ||
              HEAP8[(str+1)] == 'X'.charCodeAt(0)) {
            finalBase = 16;
            str += 2;
          } else {
            finalBase = 8;
            str++;
          }
        }
      }
      if (!finalBase) finalBase = 10;
  
      // Get digits.
      var chr;
      var ret = 0;
      while ((chr = HEAP8[(str)]) != 0) {
        var digit = parseInt(String.fromCharCode(chr), finalBase);
        if (isNaN(digit)) {
          break;
        } else {
          ret = ret * finalBase + digit;
          str++;
        }
      }
  
      // Apply sign.
      ret *= multiplier;
  
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str
      }
  
      // Unsign if needed.
      if (unsign) {
        if (Math.abs(ret) > max) {
          ret = max;
          ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          ret = unSign(ret, bits);
        }
      }
  
      // Validate range.
      if (ret > max || ret < min) {
        ret = ret > max ? max : min;
        ___setErrNo(ERRNO_CODES.ERANGE);
      }
  
      if (bits == 64) {
        return (tempRet0 = Math.min(Math.floor((ret)/4294967296), 4294967295)>>>0,ret>>>0);
      }
  
      return ret;
    }function _strtol(str, endptr, base) {
      return __parseInt(str, endptr, base, -2147483648, 2147483647, 32);  // LONG_MIN, LONG_MAX.
    }function _atoi(ptr) {
      return _strtol(ptr, null, 10);
    }

  function _strncmp(px, py, n) {
      var i = 0;
      while (i < n) {
        var x = HEAPU8[((px)+(i))];
        var y = HEAPU8[((py)+(i))];
        if (x == y && x == 0) return 0;
        if (x == 0) return -1;
        if (y == 0) return 1;
        if (x == y) {
          i ++;
          continue;
        } else {
          return x > y ? 1 : -1;
        }
      }
      return 0;
    }

  function _strcmp(px, py) {
      return _strncmp(px, py, TOTAL_MEMORY);
    }

  var _cos=Math.cos;

  
  function _sinh(x) {
      var p = Math.pow(Math.E, x);
      return (p - (1 / p)) / 2;
    }
  
  function _cosh(x) {
      var p = Math.pow(Math.E, x);
      return (p + (1 / p)) / 2;
    }function _tanh(x) {
      return _sinh(x) / _cosh(x);
    }

  
  function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, Math.max(n - 1, 0));
      if (s < 0) {
        s = -s;
        var buf = _malloc(limit+1);
        HEAP32[((s)>>2)]=buf;
        s = buf;
      }
      for (var i = 0; i < limit; i++) {
        HEAP8[((s)+(i))]=result[i];
      }
      if (limit < n || (n === undefined)) HEAP8[((s)+(i))]=0;
      return result.length;
    }function _sprintf(s, format, varargs) {
      // int sprintf(char *restrict s, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      return _snprintf(s, undefined, format, varargs);
    }

  
  function _memmove(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
        // Unlikely case: Copy backwards in a safe manner
        src = (src + num)|0;
        dest = (dest + num)|0;
        while ((num|0) > 0) {
          dest = (dest - 1)|0;
          src = (src - 1)|0;
          num = (num - 1)|0;
          HEAP8[(dest)]=HEAP8[(src)];
        }
      } else {
        _memcpy(dest, src, num);
      }
    }var _llvm_memmove_p0i8_p0i8_i32;

  var _exp=Math.exp;

  var _floor=Math.floor;

  
  
  var ___dirent_struct_layout={__size__:1040,d_ino:0,d_name:4,d_off:1028,d_reclen:1032,d_type:1036};function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      // NOTE: This implementation tries to mimic glibc rather than strictly
      // following the POSIX standard.
  
      var mode = HEAP32[((varargs)>>2)];
  
      // Simplify flags.
      var accessMode = oflag & 3;
      var isWrite = accessMode != 0;
      var isRead = accessMode != 1;
      var isCreate = Boolean(oflag & 512);
      var isExistCheck = Boolean(oflag & 2048);
      var isTruncate = Boolean(oflag & 1024);
      var isAppend = Boolean(oflag & 8);
  
      // Verify path.
      var origPath = path;
      path = FS.analyzePath(Pointer_stringify(path));
      if (!path.parentExists) {
        ___setErrNo(path.error);
        return -1;
      }
      var target = path.object || null;
      var finalPath;
  
      // Verify the file exists, create if needed and allowed.
      if (target) {
        if (isCreate && isExistCheck) {
          ___setErrNo(ERRNO_CODES.EEXIST);
          return -1;
        }
        if ((isWrite || isCreate || isTruncate) && target.isFolder) {
          ___setErrNo(ERRNO_CODES.EISDIR);
          return -1;
        }
        if (isRead && !target.read || isWrite && !target.write) {
          ___setErrNo(ERRNO_CODES.EACCES);
          return -1;
        }
        if (isTruncate && !target.isDevice) {
          target.contents = [];
        } else {
          if (!FS.forceLoadFile(target)) {
            ___setErrNo(ERRNO_CODES.EIO);
            return -1;
          }
        }
        finalPath = path.path;
      } else {
        if (!isCreate) {
          ___setErrNo(ERRNO_CODES.ENOENT);
          return -1;
        }
        if (!path.parentObject.write) {
          ___setErrNo(ERRNO_CODES.EACCES);
          return -1;
        }
        target = FS.createDataFile(path.parentObject, path.name, [],
                                   mode & 0x100, mode & 0x80);  // S_IRUSR, S_IWUSR.
        finalPath = path.parentPath + '/' + path.name;
      }
      // Actually create an open stream.
      var id = FS.streams.length; // Keep dense
      if (target.isFolder) {
        var entryBuffer = 0;
        if (___dirent_struct_layout) {
          entryBuffer = _malloc(___dirent_struct_layout.__size__);
        }
        var contents = [];
        for (var key in target.contents) contents.push(key);
        FS.streams[id] = {
          path: finalPath,
          object: target,
          // An index into contents. Special values: -2 is ".", -1 is "..".
          position: -2,
          isRead: true,
          isWrite: false,
          isAppend: false,
          error: false,
          eof: false,
          ungotten: [],
          // Folder-specific properties:
          // Remember the contents at the time of opening in an array, so we can
          // seek between them relying on a single order.
          contents: contents,
          // Each stream has its own area for readdir() returns.
          currentEntry: entryBuffer
        };
      } else {
        FS.streams[id] = {
          path: finalPath,
          object: target,
          position: 0,
          isRead: isRead,
          isWrite: isWrite,
          isAppend: isAppend,
          error: false,
          eof: false,
          ungotten: []
        };
      }
      return id;
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 512;
        flags |= 1024;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 512;
        flags |= 8;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var ret = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return (ret == -1) ? 0 : ret;
    }

  function _getcwd(buf, size) {
      // char *getcwd(char *buf, size_t size);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/getcwd.html
      if (size == 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      } else if (size < FS.currentPath.length + 1) {
        ___setErrNo(ERRNO_CODES.ERANGE);
        return 0;
      } else {
        for (var i = 0; i < FS.currentPath.length; i++) {
          HEAP8[((buf)+(i))]=FS.currentPath.charCodeAt(i)
        }
        HEAP8[((buf)+(i))]=0
        return buf;
      }
    }

  
  function ___errno_location() {
      return ___setErrNo.ret;
    }var ___errno;


  function _fgets(s, n, stream) {
      // char *fgets(char *restrict s, int n, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgets.html
      if (!FS.streams[stream]) return 0;
      var streamObj = FS.streams[stream];
      if (streamObj.error || streamObj.eof) return 0;
      var byte_;
      for (var i = 0; i < n - 1 && byte_ != '\n'.charCodeAt(0); i++) {
        byte_ = _fgetc(stream);
        if (byte_ == -1) {
          if (streamObj.error) return 0;
          else if (streamObj.eof) break;
        }
        HEAP8[((s)+(i))]=byte_
      }
      HEAP8[((s)+(i))]=0
      return s;
    }

  function _strchr(ptr, chr) {
      ptr--;
      do {
        ptr++;
        var val = HEAP8[(ptr)];
        if (val == chr) return ptr;
      } while (val);
      return 0;
    }

  
  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      if (FS.streams[fildes]) {
        if (FS.streams[fildes].currentEntry) {
          _free(FS.streams[fildes].currentEntry);
        }
        FS.streams[fildes] = null;
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }
  
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      if (FS.streams[fildes]) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      _fsync(stream);
      return _close(stream);
    }

  
  
  function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      return _write(stream, s, _strlen(s));
    }function _puts(s) {
      // int puts(const char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/puts.html
      // NOTE: puts() always writes an extra newline.
      var stdout = HEAP32[((_stdout)>>2)];
      var ret = _fputs(s, stdout);
      if (ret < 0) {
        return ret;
      } else {
        var newlineRet = _fputc('\n'.charCodeAt(0), stdout);
        return (newlineRet < 0) ? -1 : ret + 1;
      }
    }
  
  
  
  var ERRNO_MESSAGES={1:"Operation not permitted",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"Input/output error",6:"No such device or address",8:"Exec format error",9:"Bad file descriptor",10:"No child processes",11:"Resource temporarily unavailable",12:"Cannot allocate memory",13:"Permission denied",14:"Bad address",16:"Device or resource busy",17:"File exists",18:"Invalid cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Inappropriate ioctl for device",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read-only file system",31:"Too many links",32:"Broken pipe",33:"Numerical argument out of domain",34:"Numerical result out of range",35:"Resource deadlock avoided",36:"File name too long",37:"No locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many levels of symbolic links",42:"No message of desired type",43:"Identifier removed",60:"Device not a stream",61:"No data available",62:"Timer expired",63:"Out of streams resources",67:"Link has been severed",71:"Protocol error",72:"Multihop attempted",74:"Bad message",75:"Value too large for defined data type",84:"Invalid or incomplete multibyte or wide character",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Protocol not supported",95:"Operation not supported",97:"Address family not supported by protocol",98:"Address already in use",99:"Cannot assign requested address",100:"Network is down",101:"Network is unreachable",102:"Network dropped connection on reset",103:"Software caused connection abort",104:"Connection reset by peer",105:"No buffer space available",106:"Transport endpoint is already connected",107:"Transport endpoint is not connected",110:"Connection timed out",111:"Connection refused",113:"No route to host",114:"Operation already in progress",115:"Operation now in progress",116:"Stale NFS file handle",122:"Disk quota exceeded",125:"Operation canceled",130:"Owner died",131:"State not recoverable"};function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          for (var i = 0; i < msg.length; i++) {
            HEAP8[((strerrbuf)+(i))]=msg.charCodeAt(i)
          }
          HEAP8[((strerrbuf)+(i))]=0
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }function _perror(s) {
      // void perror(const char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/perror.html
      if (s) {
        _puts(s);
        _putc(':'.charCodeAt(0));
        _putc(' '.charCodeAt(0));
      }
      var errnum = HEAP32[((___errno_location())>>2)];
      _puts(_strerror(errnum));
    }


  var _llvm_pow_f64=Math.pow;

  var _log=Math.log;

  var _sqrt=Math.sqrt;

  function _strstr(ptr1, ptr2) {
      var check = 0, start;
      do {
        if (!check) {
          start = ptr1;
          check = ptr2;
        }
        var curr1 = HEAP8[(ptr1++)];
        var curr2 = HEAP8[(check++)];
        if (curr2 == 0) return start;
        if (curr2 != curr1) {
          // rewind to one character after start, to find ez in eeez
          ptr1 = start + 1;
          check = 0;
        }
      } while (curr1);
      return 0;
    }

  
  var ___tm_struct_layout={__size__:44,tm_sec:0,tm_min:4,tm_hour:8,tm_mday:12,tm_mon:16,tm_year:20,tm_wday:24,tm_yday:28,tm_isdst:32,tm_gmtoff:36,tm_zone:40};
  
  
  var __tzname=allocate(8, "i32*", ALLOC_STACK);
  
  var __daylight=allocate(1, "i32*", ALLOC_STACK);
  
  var __timezone=allocate(1, "i32*", ALLOC_STACK);function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
  
      HEAP32[((__timezone)>>2)]=-(new Date()).getTimezoneOffset() * 60
  
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP32[((__daylight)>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset())
  
      var winterName = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | "UTC";
      var summerName = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | "UTC";
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      HEAP32[((__tzname)>>2)]=winterNamePtr
      HEAP32[(((__tzname)+(4))>>2)]=summerNamePtr
    }function _mktime(tmPtr) {
      _tzset();
      var offsets = ___tm_struct_layout;
      var year = HEAP32[(((tmPtr)+(offsets.tm_year))>>2)];
      var timestamp = new Date(year >= 1900 ? year : year + 1900,
                               HEAP32[(((tmPtr)+(offsets.tm_mon))>>2)],
                               HEAP32[(((tmPtr)+(offsets.tm_mday))>>2)],
                               HEAP32[(((tmPtr)+(offsets.tm_hour))>>2)],
                               HEAP32[(((tmPtr)+(offsets.tm_min))>>2)],
                               HEAP32[(((tmPtr)+(offsets.tm_sec))>>2)],
                               0).getTime() / 1000;
      HEAP32[(((tmPtr)+(offsets.tm_wday))>>2)]=new Date(timestamp).getDay()
      var yday = Math.round((timestamp - (new Date(year, 0, 1)).getTime()) / (1000 * 60 * 60 * 24));
      HEAP32[(((tmPtr)+(offsets.tm_yday))>>2)]=yday
      return timestamp;
    }

  
  function _ungetc(c, stream) {
      // int ungetc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ungetc.html
      if (FS.streams[stream]) {
        c = unSign(c & 0xFF);
        FS.streams[stream].ungotten.push(c);
        return c;
      } else {
        return -1;
      }
    }function _fscanf(stream, format, varargs) {
      // int fscanf(FILE *restrict stream, const char *restrict format, ... );
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/scanf.html
      if (FS.streams[stream]) {
        var stack = [];
        var get = function() { var ret = _fgetc(stream); stack.push(ret); return ret };
        var unget = function(c) { return _ungetc(stack.pop(), stream) };
        return __scanString(format, get, unget, varargs);
      } else {
        return -1;
      }
    }

  
  function _tmpnam(s, dir, prefix) {
      // char *tmpnam(char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/tmpnam.html
      // NOTE: The dir and prefix arguments are for internal use only.
      var folder = FS.findObject(dir || '/tmp');
      if (!folder || !folder.isFolder) {
        dir = '/tmp';
        folder = FS.findObject(dir);
        if (!folder || !folder.isFolder) return 0;
      }
      var name = prefix || 'file';
      do {
        name += String.fromCharCode(65 + Math.floor(Math.random() * 25));
      } while (name in folder.contents);
      var result = dir + '/' + name;
      if (!_tmpnam.buffer) _tmpnam.buffer = _malloc(256);
      if (!s) s = _tmpnam.buffer;
      for (var i = 0; i < result.length; i++) {
        HEAP8[((s)+(i))]=result.charCodeAt(i);
      }
      HEAP8[((s)+(i))]=0;
      return s;
    }function _tmpfile() {
      // FILE *tmpfile(void);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/tmpfile.html
      // TODO: Delete the created file on closing.
      if (_tmpfile.mode) {
        _tmpfile.mode = allocate(intArrayFromString('w+'), 'i8', ALLOC_NORMAL);
      }
      return _fopen(_tmpnam(0), _tmpfile.mode);
    }

  function _strrchr(ptr, chr) {
      var ptr2 = ptr + _strlen(ptr);
      do {
        if (HEAP8[(ptr2)] == chr) return ptr2;
        ptr2--;
      } while (ptr2 >= ptr);
      return 0;
    }

  
  
  function _tolower(chr) {
      if (chr >= 'A'.charCodeAt(0) && chr <= 'Z'.charCodeAt(0)) {
        return chr - 'A'.charCodeAt(0) + 'a'.charCodeAt(0);
      } else {
        return chr;
      }
    }function _strncasecmp(px, py, n) {
      var i = 0;
      while (i < n) {
        var x = _tolower(HEAPU8[((px)+(i))]);
        var y = _tolower(HEAPU8[((py)+(i))]);
        if (x == y && x == 0) return 0;
        if (x == 0) return -1;
        if (y == 0) return 1;
        if (x == y) {
          i ++;
          continue;
        } else {
          return x > y ? 1 : -1;
        }
      }
      return 0;
    }function _strcasecmp(px, py) {
      return _strncasecmp(px, py, TOTAL_MEMORY);
    }

  function _isupper(chr) {
      return chr >= 'A'.charCodeAt(0) && chr <= 'Z'.charCodeAt(0);
    }

  var _fseeko;

  
  
  function _isdigit(chr) {
      return chr >= '0'.charCodeAt(0) && chr <= '9'.charCodeAt(0);
    }function _strtod(str, endptr) {
      var origin = str;
  
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
  
      // Check for a plus/minus sign.
      var multiplier = 1;
      if (HEAP8[(str)] == '-'.charCodeAt(0)) {
        multiplier = -1;
        str++;
      } else if (HEAP8[(str)] == '+'.charCodeAt(0)) {
        str++;
      }
  
      var chr;
      var ret = 0;
  
      // Get whole part.
      var whole = false;
      while(1) {
        chr = HEAP8[(str)];
        if (!_isdigit(chr)) break;
        whole = true;
        ret = ret*10 + chr - '0'.charCodeAt(0);
        str++;
      }
  
      // Get fractional part.
      var fraction = false;
      if (HEAP8[(str)] == '.'.charCodeAt(0)) {
        str++;
        var mul = 1/10;
        while(1) {
          chr = HEAP8[(str)];
          if (!_isdigit(chr)) break;
          fraction = true;
          ret += mul*(chr - '0'.charCodeAt(0));
          mul /= 10;
          str++;
        }
      }
  
      if (!whole && !fraction) {
        if (endptr) {
          HEAP32[((endptr)>>2)]=origin
        }
        return 0;
      }
  
      // Get exponent part.
      chr = HEAP8[(str)];
      if (chr == 'e'.charCodeAt(0) || chr == 'E'.charCodeAt(0)) {
        str++;
        var exponent = 0;
        var expNegative = false;
        chr = HEAP8[(str)];
        if (chr == '-'.charCodeAt(0)) {
          expNegative = true;
          str++;
        } else if (chr == '+'.charCodeAt(0)) {
          str++;
        }
        chr = HEAP8[(str)];
        while(1) {
          if (!_isdigit(chr)) break;
          exponent = exponent*10 + chr - '0'.charCodeAt(0);
          str++;
          chr = HEAP8[(str)];
        }
        if (expNegative) exponent = -exponent;
        ret *= Math.pow(10, exponent);
      }
  
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str
      }
  
      return ret * multiplier;
    }function _atof(ptr) {
      return _strtod(ptr, null);
    }


  var _ntohl;

  function _strncpy(pdest, psrc, num) {
      var padding = false, curr;
      for (var i = 0; i < num; i++) {
        curr = padding ? 0 : HEAP8[((psrc)+(i))];
        HEAP8[((pdest)+(i))]=curr
        padding = padding || HEAP8[((psrc)+(i))] == 0;
      }
      return pdest;
    }

  
  var ___tm_current=allocate(4*26, "i8", ALLOC_STACK);
  
  
  var ___tm_timezones={};function _localtime_r(time, tmPtr) {
      _tzset();
      var offsets = ___tm_struct_layout;
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[(((tmPtr)+(offsets.tm_sec))>>2)]=date.getSeconds()
      HEAP32[(((tmPtr)+(offsets.tm_min))>>2)]=date.getMinutes()
      HEAP32[(((tmPtr)+(offsets.tm_hour))>>2)]=date.getHours()
      HEAP32[(((tmPtr)+(offsets.tm_mday))>>2)]=date.getDate()
      HEAP32[(((tmPtr)+(offsets.tm_mon))>>2)]=date.getMonth()
      HEAP32[(((tmPtr)+(offsets.tm_year))>>2)]=date.getFullYear()-1900
      HEAP32[(((tmPtr)+(offsets.tm_wday))>>2)]=date.getDay()
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = Math.floor((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24));
      HEAP32[(((tmPtr)+(offsets.tm_yday))>>2)]=yday
      HEAP32[(((tmPtr)+(offsets.tm_gmtoff))>>2)]=start.getTimezoneOffset() * 60
  
      var dst = Number(start.getTimezoneOffset() != date.getTimezoneOffset());
      HEAP32[(((tmPtr)+(offsets.tm_isdst))>>2)]=dst
  
      var timezone = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | "UTC";
      if (!(timezone in ___tm_timezones)) {
        ___tm_timezones[timezone] = allocate(intArrayFromString(timezone), 'i8', ALLOC_NORMAL);
      }
      HEAP32[(((tmPtr)+(offsets.tm_zone))>>2)]=___tm_timezones[timezone]
  
      return tmPtr;
    }function _localtime(time) {
      return _localtime_r(time, ___tm_current);
    }


  
  
  
  
  var _environ=allocate(1, "i32*", ALLOC_STACK);var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = 'root';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/emscripten';
        ENV['LANG'] = 'en_US.UTF-8';
        ENV['_'] = './this.program';
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        for (var j = 0; j < line.length; j++) {
          HEAP8[((poolPtr)+(j))]=line.charCodeAt(j);
        }
        HEAP8[((poolPtr)+(j))]=0;
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _putenv(string) {
      // int putenv(char *string);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/putenv.html
      // WARNING: According to the standard (and the glibc implementation), the
      //          string is taken by reference so future changes are reflected.
      //          We copy it instead, possibly breaking some uses.
      if (string === 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      string = Pointer_stringify(string);
      var splitPoint = string.indexOf('=')
      if (string === '' || string.indexOf('=') === -1) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      var name = string.slice(0, splitPoint);
      var value = string.slice(splitPoint + 1);
      if (!(name in ENV) || ENV[name] !== value) {
        ENV[name] = value;
        ___buildEnvironment(ENV);
      }
      return 0;
    }

  function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }


  function _isatty(fildes) {
      // int isatty(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/isatty.html
      if (!FS.streams[fildes]) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      if (FS.streams[fildes].isTerminal) return 1;
      ___setErrNo(ERRNO_CODES.ENOTTY);
      return 0;
    }
var _setjmp; // stub for _setjmp

  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      // We use file descriptor numbers and FILE* streams interchangeably.
      return stream;
    }

  
  var ___utimbuf_struct_layout={__size__:8,actime:0,modtime:4};function _utime(path, times) {
      // int utime(const char *path, const struct utimbuf *times);
      // http://pubs.opengroup.org/onlinepubs/009695399/basedefs/utime.h.html
      var time;
      if (times) {
        // NOTE: We don't keep track of access timestamps.
        var offset = ___utimbuf_struct_layout.modtime;
        time = HEAP32[(((times)+(offset))>>2)]
        time *= 1000;
      } else {
        time = Date.now();
      }
      var file = FS.findObject(Pointer_stringify(path));
      if (file === null) return -1;
      if (!file.write) {
        ___setErrNo(ERRNO_CODES.EPERM);
        return -1;
      }
      file.timestamp = time;
      return 0;
    }

  
  
  var ___tm_formatted=allocate(4*26, "i8", ALLOC_STACK);
  
  function _asctime_r(tmPtr, buf) {
      var date = new Date(_mktime(tmPtr)*1000);
      var formatted = date.toString();
      var datePart = formatted.replace(/\d{4}.*/, '').replace(/ 0/, '  ');
      var timePart = formatted.match(/\d{2}:\d{2}:\d{2}/)[0];
      formatted = datePart + timePart + ' ' + date.getFullYear() + '\n';
      formatted.split('').forEach(function(chr, index) {
        HEAP8[((buf)+(index))]=chr.charCodeAt(0)
      });
      HEAP8[((buf)+(25))]=0
      return buf;
    }function _asctime(tmPtr) {
      return _asctime_r(tmPtr, ___tm_formatted);
    }function _ctime(timer) {
      return _asctime(_localtime(timer));
    }


  function _strcat(pdest, psrc) {
      var len = _strlen(pdest);
      var i = 0;
      do {
        HEAP8[(pdest+len+i)]=HEAP8[(psrc+i)];
        i ++;
      } while (HEAP8[((psrc)+(i-1))] != 0);
      return pdest;
    }

  function _abort() {
      ABORT = true;
      throw 'abort() at ' + (new Error().stack);
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 8: return PAGE_SIZE;
        case 54:
        case 56:
        case 21:
        case 61:
        case 63:
        case 22:
        case 67:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 69:
        case 28:
        case 101:
        case 70:
        case 71:
        case 29:
        case 30:
        case 199:
        case 75:
        case 76:
        case 32:
        case 43:
        case 44:
        case 80:
        case 46:
        case 47:
        case 45:
        case 48:
        case 49:
        case 42:
        case 82:
        case 33:
        case 7:
        case 108:
        case 109:
        case 107:
        case 112:
        case 119:
        case 121:
          return 200809;
        case 13:
        case 104:
        case 94:
        case 95:
        case 34:
        case 35:
        case 77:
        case 81:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 94:
        case 95:
        case 110:
        case 111:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 120:
        case 40:
        case 16:
        case 79:
        case 19:
          return -1;
        case 92:
        case 93:
        case 5:
        case 72:
        case 6:
        case 74:
        case 92:
        case 93:
        case 96:
        case 97:
        case 98:
        case 99:
        case 102:
        case 103:
        case 105:
          return 1;
        case 38:
        case 66:
        case 50:
        case 51:
        case 4:
          return 1024;
        case 15:
        case 64:
        case 41:
          return 32;
        case 55:
        case 37:
        case 17:
          return 2147483647;
        case 18:
        case 1:
          return 47839;
        case 59:
        case 57:
          return 99;
        case 68:
        case 58:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 14: return 32768;
        case 73: return 32767;
        case 39: return 16384;
        case 60: return 1000;
        case 106: return 700;
        case 52: return 256;
        case 62: return 255;
        case 2: return 100;
        case 65: return 64;
        case 36: return 20;
        case 100: return 16;
        case 20: return 6;
        case 53: return 4;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret
      }
      return ret;
    }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
  
      // We need to make sure no one else allocates unfreeable memory!
      // We must control this entirely. So we don't even need to do
      // unfreeable allocations - the HEAP is ours, from STATICTOP up.
      // TODO: We could in theory slice off the top of the HEAP when
      //       sbrk gets a negative increment in |bytes|...
      var self = _sbrk;
      if (!self.called) {
        STATICTOP = alignMemoryPage(STATICTOP); // make sure we start out aligned
        self.called = true;
        _sbrk.DYNAMIC_START = STATICTOP;
      }
      var ret = STATICTOP;
      if (bytes != 0) Runtime.staticAlloc(bytes);
      return ret;  // Previous break location.
    }
var _llvm_dbg_value; // stub for _llvm_dbg_value

  var _sqrtf=Math.sqrt;

  function _memchr(ptr, chr, num) {
      chr = unSign(chr);
      for (var i = 0; i < num; i++) {
        if (HEAP8[(ptr)] == chr) return ptr;
        ptr++;
      }
      return 0;
    }

  var _floorf=Math.floor;

  function _exp2(x) {
      return Math.pow(2, x);
    }

  function _ldexp(x, exp_) {
      return x * Math.pow(2, exp_);
    }

  var _llvm_memset_p0i8_i64;

  function _putchar(c) {
      // int putchar(int c);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/putchar.html
      return _fputc(c, HEAP32[((_stdout)>>2)]);
    }





  var Browser={mainLoop:{scheduler:null,shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],ensureObjects:function () {
        if (Browser.ensured) return;
        Browser.ensured = true;
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : console.log("warning: cannot create object URLs");
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        function getMimetype(name) {
          return {
            'jpg': 'image/jpeg',
            'jpeg': 'image/jpeg',
            'png': 'image/png',
            'bmp': 'image/bmp',
            'ogg': 'audio/ogg',
            'wav': 'audio/wav',
            'mp3': 'audio/mpeg'
          }[name.substr(-3)];
          return ret;
        }
  
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = [];
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/.exec(name);
        };
        imagePlugin['handle'] = function(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: getMimetype(name) });
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            setTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
      },createContext:function (canvas, useWebGL, setInModule) {
        var ctx;
        try {
          if (useWebGL) {
            ctx = canvas.getContext('experimental-webgl', { alpha: false });
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas - ' + e);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
  
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
        }
        return ctx;
      },requestFullScreen:function () {
        var canvas = Module['canvas'];
        function fullScreenChange() {
          var isFullScreen = false;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement']) === canvas) {
            canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                        canvas['mozRequestPointerLock'] ||
                                        canvas['webkitRequestPointerLock'];
            canvas.requestPointerLock();
            isFullScreen = true;
          }
          if (Module['onFullScreen']) Module['onFullScreen'](isFullScreen);
        }
  
        document.addEventListener('fullscreenchange', fullScreenChange, false);
        document.addEventListener('mozfullscreenchange', fullScreenChange, false);
        document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas;
        }
  
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
  
        canvas.requestFullScreen = canvas['requestFullScreen'] ||
                                   canvas['mozRequestFullScreen'] ||
                                   (canvas['webkitRequestFullScreen'] ? function() { canvas['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvas.requestFullScreen(); 
      },requestAnimationFrame:function (func) {
        if (!window.requestAnimationFrame) {
          window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                         window['mozRequestAnimationFrame'] ||
                                         window['webkitRequestAnimationFrame'] ||
                                         window['msRequestAnimationFrame'] ||
                                         window['oRequestAnimationFrame'] ||
                                         window['setTimeout'];
        }
        window.requestAnimationFrame(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function() {
          if (xhr.status == 200) {
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        canvas.width = width;
        canvas.height = height;
        if (!noUpdates) Browser.updateResizeListeners();
      }};
__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___setErrNo(0);
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
___buildEnvironment(ENV);
Module["requestFullScreen"] = function() { Browser.requestFullScreen() };
  Module["requestAnimationFrame"] = function(func) { Browser.requestAnimationFrame(func) };
  Module["pauseMainLoop"] = function() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function() { Browser.mainLoop.resume() };
  


var FUNCTION_TABLE = [0,0,_lossless_dng_load_raw,0,_unpacked_load_raw,0,_foveon_sd_load_raw,0,_kodak_ycbcr_load_raw,0,_canon_600_load_raw,0,_smal_v9_load_raw,0,_leaf_hdr_load_raw,0,_nikon_load_raw,0,_kodak_jpeg_load_raw,0,_canon_sraw_load_raw,0,_minolta_rd175_load_raw,0,_sony_arw_load_raw,0,_sony_load_raw,0,_kodak_thumb_load_raw,0,_sinar_4shot_load_raw,0,_quicktake_100_load_raw,0,_kodak_262_load_raw,0,_packed_load_raw,0,_sony_arw2_load_raw,0,_panasonic_load_raw,0,_canon_load_raw,0,_redcine_load_raw,0,_lossless_jpeg_load_raw,0,_foveon_thumb,0,_layer_thumb,0,_kodak_yrgb_load_raw,0,_kodak_65000_load_raw,0,_rollei_thumb,0,_kodak_radc_load_raw,0,_jpeg_thumb,0,_olympus_load_raw,0,_phase_one_load_raw,0,_nokia_load_raw,0,_ppm_thumb,0,_rollei_load_raw,0,_imacon_full_load_raw,0,_smal_v6_load_raw,0,_packed_dng_load_raw,0,_ppm16_thumb,0,_kodak_dc120_load_raw,0,_eight_bit_load_raw,0,_write_ppm_tiff,0,_phase_one_load_raw_c,0,_pentax_load_raw,0,_kodak_rgb_load_raw,0,_foveon_dp_load_raw,0,_lossy_dng_load_raw,0,_hasselblad_load_raw,0];

function _int_to_float($i) {
  return HEAP32[tempDoublePtr >> 2] = $i, HEAPF32[tempDoublePtr >> 2];
}
function _fcol($row, $col) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5427632 >> 2];
    if (($0 | 0) == 1) {
      label = 3;
      break;
    } else if (($0 | 0) == 2) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 3:
    var $1 = HEAP16[5263700 >> 1];
    var $conv = $1 & 65535;
    var $add = $conv + $col | 0;
    var $and = $add & 15;
    var $2 = HEAP16[5243564 >> 1];
    var $conv1 = $2 & 65535;
    var $add2 = $conv1 + $row | 0;
    var $and3 = $add2 & 15;
    var $arrayidx4 = 5427672 + ($and3 << 4) + $and | 0;
    var $3 = HEAP8[$arrayidx4];
    var $conv5 = $3 << 24 >> 24;
    var $retval_0 = $conv5;
    label = 6;
    break;
   case 4:
    var $add9 = $col + 6 | 0;
    var $rem = ($add9 | 0) % 6;
    var $add10 = $row + 6 | 0;
    var $rem11 = ($add10 | 0) % 6;
    var $arrayidx13 = 5427636 + $rem11 * 6 + $rem | 0;
    var $4 = HEAP8[$arrayidx13];
    var $conv14 = $4 << 24 >> 24;
    var $retval_0 = $conv14;
    label = 6;
    break;
   case 5:
    var $shl = $row << 1;
    var $and16 = $shl & 14;
    var $and17 = $col & 1;
    var $add18 = $and16 | $and17;
    var $shl19 = $add18 << 1;
    var $shr = $0 >>> ($shl19 >>> 0);
    var $and20 = $shr & 3;
    var $retval_0 = $and20;
    label = 6;
    break;
   case 6:
    var $retval_0;
    return $retval_0;
  }
}
function _sget2($s) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP16[5262944 >> 1];
    var $cmp = $0 << 16 >> 16 == 18761;
    var $1 = HEAP8[$s];
    var $conv2 = $1 & 255;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    var $arrayidx3 = $s + 1 | 0;
    var $2 = HEAP8[$arrayidx3];
    var $conv4 = $2 & 255;
    var $shl = $conv4 << 8;
    var $or = $shl | $conv2;
    var $retval_0_in = $or;
    label = 5;
    break;
   case 4:
    var $shl8 = $conv2 << 8;
    var $arrayidx9 = $s + 1 | 0;
    var $3 = HEAP8[$arrayidx9];
    var $conv10 = $3 & 255;
    var $or11 = $conv10 | $shl8;
    var $retval_0_in = $or11;
    label = 5;
    break;
   case 5:
    var $retval_0_in;
    var $retval_0 = $retval_0_in & 65535;
    return $retval_0;
  }
}
function _sget4($s) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP16[5262944 >> 1];
    var $cmp = $0 << 16 >> 16 == 18761;
    var $1 = HEAP8[$s];
    var $conv2 = $1 & 255;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    var $arrayidx3 = $s + 1 | 0;
    var $2 = HEAP8[$arrayidx3];
    var $conv4 = $2 & 255;
    var $shl = $conv4 << 8;
    var $or = $shl | $conv2;
    var $arrayidx5 = $s + 2 | 0;
    var $3 = HEAP8[$arrayidx5];
    var $conv6 = $3 & 255;
    var $shl7 = $conv6 << 16;
    var $or8 = $or | $shl7;
    var $arrayidx9 = $s + 3 | 0;
    var $4 = HEAP8[$arrayidx9];
    var $conv10 = $4 & 255;
    var $shl11 = $conv10 << 24;
    var $or12 = $or8 | $shl11;
    var $retval_0 = $or12;
    label = 5;
    break;
   case 4:
    var $shl15 = $conv2 << 24;
    var $arrayidx16 = $s + 1 | 0;
    var $5 = HEAP8[$arrayidx16];
    var $conv17 = $5 & 255;
    var $shl18 = $conv17 << 16;
    var $or19 = $shl18 | $shl15;
    var $arrayidx20 = $s + 2 | 0;
    var $6 = HEAP8[$arrayidx20];
    var $conv21 = $6 & 255;
    var $shl22 = $conv21 << 8;
    var $or23 = $or19 | $shl22;
    var $arrayidx24 = $s + 3 | 0;
    var $7 = HEAP8[$arrayidx24];
    var $conv25 = $7 & 255;
    var $or26 = $or23 | $conv25;
    var $retval_0 = $or26;
    label = 5;
    break;
   case 5:
    var $retval_0;
    return $retval_0;
  }
}
function _canon_600_fixed_wb() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $lo_0 = 3;
    label = 3;
    break;
   case 3:
    var $lo_0;
    var $cmp = ($lo_0 | 0) == 3;
    if ($cmp) {
      var $lo_0 = 2;
      label = 3;
      break;
    } else {
      var $hi_0 = 0;
      label = 4;
      break;
    }
   case 4:
    var $hi_0;
    var $cmp3 = ($hi_0 | 0) < 3;
    if ($cmp3) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    var $inc = $hi_0 + 1 | 0;
    var $hi_0 = $inc;
    label = 4;
    break;
   case 6:
    var $cmp14 = ($lo_0 | 0) == ($hi_0 | 0);
    if ($cmp14) {
      var $frac_0 = 0;
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $arraydecay18 = 5560924 + $lo_0 * 10 | 0;
    var $0 = HEAP16[$arraydecay18 >> 1];
    var $conv19 = $0 << 16 >> 16;
    var $sub = 1311 - $conv19 | 0;
    var $conv20 = $sub | 0;
    var $arraydecay22 = 5560924 + $hi_0 * 10 | 0;
    var $1 = HEAP16[$arraydecay22 >> 1];
    var $conv23 = $1 << 16 >> 16;
    var $sub27 = $conv23 - $conv19 | 0;
    var $conv28 = $sub27 | 0;
    var $div = $conv20 / $conv28;
    var $frac_0 = $div;
    label = 8;
    break;
   case 8:
    var $frac_0;
    var $sub38 = 1 - $frac_0;
    var $arrayidx35 = 5560926 + $hi_0 * 10 | 0;
    var $2 = HEAP16[$arrayidx35 >> 1];
    var $conv37 = $2 << 16 >> 16;
    var $mul = $frac_0 * $conv37;
    var $arrayidx40 = 5560926 + $lo_0 * 10 | 0;
    var $3 = HEAP16[$arrayidx40 >> 1];
    var $conv42 = $3 << 16 >> 16;
    var $mul43 = $sub38 * $conv42;
    var $add = $mul + $mul43;
    var $div44 = 1 / $add;
    HEAPF32[5245640 >> 2] = $div44;
    var $arrayidx35_1 = 5560928 + $hi_0 * 10 | 0;
    var $4 = HEAP16[$arrayidx35_1 >> 1];
    var $conv37_1 = $4 << 16 >> 16;
    var $mul_1 = $frac_0 * $conv37_1;
    var $arrayidx40_1 = 5560928 + $lo_0 * 10 | 0;
    var $5 = HEAP16[$arrayidx40_1 >> 1];
    var $conv42_1 = $5 << 16 >> 16;
    var $mul43_1 = $sub38 * $conv42_1;
    var $add_1 = $mul_1 + $mul43_1;
    var $div44_1 = 1 / $add_1;
    HEAPF32[5245644 >> 2] = $div44_1;
    var $arrayidx35_2 = 5560930 + $hi_0 * 10 | 0;
    var $6 = HEAP16[$arrayidx35_2 >> 1];
    var $conv37_2 = $6 << 16 >> 16;
    var $mul_2 = $frac_0 * $conv37_2;
    var $arrayidx40_2 = 5560930 + $lo_0 * 10 | 0;
    var $7 = HEAP16[$arrayidx40_2 >> 1];
    var $conv42_2 = $7 << 16 >> 16;
    var $mul43_2 = $sub38 * $conv42_2;
    var $add_2 = $mul_2 + $mul43_2;
    var $div44_2 = 1 / $add_2;
    HEAPF32[5245648 >> 2] = $div44_2;
    var $arrayidx35_3 = 5560932 + $hi_0 * 10 | 0;
    var $8 = HEAP16[$arrayidx35_3 >> 1];
    var $conv37_3 = $8 << 16 >> 16;
    var $mul_3 = $frac_0 * $conv37_3;
    var $arrayidx40_3 = 5560932 + $lo_0 * 10 | 0;
    var $9 = HEAP16[$arrayidx40_3 >> 1];
    var $conv42_3 = $9 << 16 >> 16;
    var $mul43_3 = $sub38 * $conv42_3;
    var $add_3 = $mul_3 + $mul43_3;
    var $div44_3 = 1 / $add_3;
    HEAPF32[5245652 >> 2] = $div44_3;
    return;
  }
}
_canon_600_fixed_wb["X"] = 1;
function _canon_600_color($ratio, $mar) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAPF32[5403052 >> 2];
    var $tobool = $0 != 0;
    var $arrayidx = $ratio + 4 | 0;
    var $1 = HEAP32[$arrayidx >> 2];
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 7;
      break;
    }
   case 3:
    var $cmp = ($1 | 0) < -104;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    HEAP32[$arrayidx >> 2] = -104;
    var $4 = -104;
    var $clipped_22 = 1;
    label = 13;
    break;
   case 5:
    var $cmp4 = ($1 | 0) > 12;
    if ($cmp4) {
      label = 6;
      break;
    } else {
      var $clipped_2 = 0;
      var $3 = $1;
      label = 12;
      break;
    }
   case 6:
    HEAP32[$arrayidx >> 2] = 12;
    var $clipped_2 = 1;
    var $3 = 12;
    label = 12;
    break;
   case 7:
    var $_off = $1 + 264 | 0;
    var $2 = $_off >>> 0 > 725;
    if ($2) {
      var $retval_0 = 2;
      label = 18;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $cmp15 = ($1 | 0) < -50;
    if ($cmp15) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    HEAP32[$arrayidx >> 2] = -50;
    var $clipped_2 = 1;
    var $3 = -50;
    label = 12;
    break;
   case 10:
    var $cmp20 = ($1 | 0) > 307;
    if ($cmp20) {
      label = 11;
      break;
    } else {
      var $clipped_2 = 0;
      var $3 = $1;
      label = 12;
      break;
    }
   case 11:
    HEAP32[$arrayidx >> 2] = 307;
    var $clipped_2 = 1;
    var $3 = 307;
    label = 12;
    break;
   case 12:
    var $3;
    var $clipped_2;
    var $cmp28 = ($3 | 0) < 197;
    var $or_cond = $tobool | $cmp28;
    if ($or_cond) {
      var $4 = $3;
      var $clipped_22 = $clipped_2;
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    var $clipped_22;
    var $4;
    var $mul = $4 * 398 & -1;
    var $shr = $mul >> 10;
    var $sub = -38 - $shr | 0;
    var $cond = $sub;
    var $clipped_21 = $clipped_22;
    label = 15;
    break;
   case 14:
    var $mul31 = $3 * 48 & -1;
    var $shr32 = $mul31 >> 10;
    var $add = $shr32 - 123 | 0;
    var $cond = $add;
    var $clipped_21 = $clipped_2;
    label = 15;
    break;
   case 15:
    var $clipped_21;
    var $cond;
    var $sub33 = $cond - $mar | 0;
    var $5 = HEAP32[$ratio >> 2];
    var $add36 = $cond + 20 | 0;
    var $notlhs = ($sub33 | 0) <= ($5 | 0);
    var $notrhs = ($add36 | 0) >= ($5 | 0);
    var $or_cond25_not = $notrhs & $notlhs;
    var $tobool40 = ($clipped_21 | 0) == 0;
    var $or_cond26 = $or_cond25_not & $tobool40;
    if ($or_cond26) {
      var $retval_0 = 0;
      label = 18;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $sub44 = $cond - $5 | 0;
    var $ispos = ($sub44 | 0) > -1;
    var $neg = -$sub44 | 0;
    var $call = $ispos ? $sub44 : $neg;
    var $mul45 = $mar << 2;
    var $cmp46 = ($call | 0) < ($mul45 | 0);
    if ($cmp46) {
      label = 17;
      break;
    } else {
      var $retval_0 = 2;
      label = 18;
      break;
    }
   case 17:
    var $cmp49 = ($sub44 | 0) < -20;
    var $_sub44 = $cmp49 ? -20 : $sub44;
    var $cmp52 = ($_sub44 | 0) > ($mar | 0);
    var $miss_1 = $cmp52 ? $mar : $_sub44;
    var $sub55 = $cond - $miss_1 | 0;
    HEAP32[$ratio >> 2] = $sub55;
    var $retval_0 = 1;
    label = 18;
    break;
   case 18:
    var $retval_0;
    return $retval_0;
  }
}
_canon_600_color["X"] = 1;
function _my_memmem($haystack, $needle) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $add_ptr1 = $haystack + 28 | 0;
    var $c_0 = $haystack;
    label = 3;
    break;
   case 3:
    var $c_0;
    var $cmp = $c_0 >>> 0 > $add_ptr1 >>> 0;
    if ($cmp) {
      var $retval_0 = 0;
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $call = _memcmp($c_0, $needle, 4);
    var $tobool = ($call | 0) == 0;
    var $incdec_ptr = $c_0 + 1 | 0;
    if ($tobool) {
      var $retval_0 = $c_0;
      label = 5;
      break;
    } else {
      var $c_0 = $incdec_ptr;
      label = 3;
      break;
    }
   case 5:
    var $retval_0;
    return $retval_0;
  }
}
function _derror() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5428496 >> 2];
    var $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 6;
      break;
    }
   case 3:
    var $1 = HEAP32[_stderr >> 2];
    var $2 = HEAP32[5264120 >> 2];
    var $call = _fprintf($1, 5587560, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $2, tempInt));
    var $3 = HEAP32[5264116 >> 2];
    var $call1 = _feof($3);
    var $tobool2 = ($call1 | 0) == 0;
    var $4 = HEAP32[_stderr >> 2];
    if ($tobool2) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $5 = _fwrite(5586180, 23, 1, $4);
    label = 6;
    break;
   case 5:
    var $6 = HEAP32[5264116 >> 2];
    var $call5 = _ftell($6);
    var $conv$0 = $call5;
    var $conv$1 = ($call5 | 0) < 0 ? -1 : 0;
    var $$etemp$0 = 5584128;
    var $call6 = _fprintf($4, $$etemp$0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $conv$0, HEAP32[tempInt + 4 >> 2] = $conv$1, tempInt));
    label = 6;
    break;
   case 6:
    var $7 = HEAP32[5428496 >> 2];
    var $inc = $7 + 1 | 0;
    HEAP32[5428496 >> 2] = $inc;
    STACKTOP = __stackBase__;
    return;
  }
}
function _get2() {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $str = __stackBase__;
  HEAP16[$str >> 1] = -1;
  var $arraydecay = $str;
  _fread($arraydecay, 1, 2, HEAP32[5264116 >> 2]);
  var $call2 = _sget2($arraydecay);
  STACKTOP = __stackBase__;
  return $call2;
}
function _get4() {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $str = __stackBase__;
  HEAP32[$str >> 2] = -1;
  var $arraydecay = $str;
  _fread($arraydecay, 1, 4, HEAP32[5264116 >> 2]);
  var $call2 = _sget4($arraydecay);
  STACKTOP = __stackBase__;
  return $call2;
}
function _getint($type) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $cmp = ($type | 0) == 3;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    var $call = _get2();
    var $conv = $call & 65535;
    var $cond = $conv;
    label = 5;
    break;
   case 4:
    var $call1 = _get4();
    var $cond = $call1;
    label = 5;
    break;
   case 5:
    var $cond;
    return $cond;
  }
}
function _getreal($type) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $u = __stackBase__;
    if (($type | 0) == 3) {
      label = 3;
      break;
    } else if (($type | 0) == 4) {
      label = 4;
      break;
    } else if (($type | 0) == 5) {
      label = 5;
      break;
    } else if (($type | 0) == 8) {
      label = 6;
      break;
    } else if (($type | 0) == 9) {
      label = 7;
      break;
    } else if (($type | 0) == 10) {
      label = 8;
      break;
    } else if (($type | 0) == 11) {
      label = 9;
      break;
    } else if (($type | 0) == 12) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 3:
    var $call = _get2();
    var $conv = $call & 65535;
    var $retval_0 = $conv;
    label = 12;
    break;
   case 4:
    var $call2 = _get4();
    var $conv3 = $call2 >>> 0;
    var $retval_0 = $conv3;
    label = 12;
    break;
   case 5:
    var $call5 = _get4();
    var $conv6 = $call5 >>> 0;
    var $d = $u | 0;
    HEAPF64[tempDoublePtr >> 3] = $conv6, HEAP32[$d >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$d + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $call8 = _get4();
    var $conv9 = $call8 >>> 0;
    var $div = $conv6 / $conv9;
    var $retval_0 = $div;
    label = 12;
    break;
   case 6:
    var $call11 = _get2();
    var $conv12 = $call11 << 16 >> 16;
    var $retval_0 = $conv12;
    label = 12;
    break;
   case 7:
    var $call14 = _get4();
    var $conv15 = $call14 | 0;
    var $retval_0 = $conv15;
    label = 12;
    break;
   case 8:
    var $call17 = _get4();
    var $conv18 = $call17 | 0;
    var $d19 = $u | 0;
    HEAPF64[tempDoublePtr >> 3] = $conv18, HEAP32[$d19 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$d19 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $call21 = _get4();
    var $conv22 = $call21 | 0;
    var $div23 = $conv18 / $conv22;
    var $retval_0 = $div23;
    label = 12;
    break;
   case 9:
    var $call25 = _get4();
    var $call26 = _int_to_float($call25);
    var $conv27 = $call26;
    var $retval_0 = $conv27;
    label = 12;
    break;
   case 10:
    var $0 = HEAP16[5262944 >> 1];
    var $cmp = $0 << 16 >> 16 == 18761;
    var $call31 = _htons(4660);
    var $cmp32 = ($call31 | 0) == 4660;
    var $cmp34tmp = $cmp ^ $cmp32;
    var $1 = $cmp34tmp & 1;
    var $conv35 = $1 ^ 1;
    var $2 = -$conv35 | 0;
    var $mul = $2 & 7;
    var $c = $u;
    var $3 = HEAP32[5264116 >> 2];
    var $call38 = _fgetc($3);
    var $conv39 = $call38 & 255;
    var $arrayidx = $c + $mul | 0;
    HEAP8[$arrayidx] = $conv39;
    var $4 = HEAP32[5264116 >> 2];
    var $call38_1 = _fgetc($4);
    var $conv39_1 = $call38_1 & 255;
    var $xor_1 = $mul ^ 1;
    var $arrayidx_1 = $c + $xor_1 | 0;
    HEAP8[$arrayidx_1] = $conv39_1;
    var $5 = HEAP32[5264116 >> 2];
    var $call38_2 = _fgetc($5);
    var $conv39_2 = $call38_2 & 255;
    var $xor_2 = $mul ^ 2;
    var $arrayidx_2 = $c + $xor_2 | 0;
    HEAP8[$arrayidx_2] = $conv39_2;
    var $6 = HEAP32[5264116 >> 2];
    var $call38_3 = _fgetc($6);
    var $conv39_3 = $call38_3 & 255;
    var $xor_3 = $mul ^ 3;
    var $arrayidx_3 = $c + $xor_3 | 0;
    HEAP8[$arrayidx_3] = $conv39_3;
    var $7 = HEAP32[5264116 >> 2];
    var $call38_4 = _fgetc($7);
    var $conv39_4 = $call38_4 & 255;
    var $xor_4 = $mul ^ 4;
    var $arrayidx_4 = $c + $xor_4 | 0;
    HEAP8[$arrayidx_4] = $conv39_4;
    var $8 = HEAP32[5264116 >> 2];
    var $call38_5 = _fgetc($8);
    var $conv39_5 = $call38_5 & 255;
    var $xor_5 = $mul ^ 5;
    var $arrayidx_5 = $c + $xor_5 | 0;
    HEAP8[$arrayidx_5] = $conv39_5;
    var $9 = HEAP32[5264116 >> 2];
    var $call38_6 = _fgetc($9);
    var $conv39_6 = $call38_6 & 255;
    var $xor_6 = $mul ^ 6;
    var $arrayidx_6 = $c + $xor_6 | 0;
    HEAP8[$arrayidx_6] = $conv39_6;
    var $10 = HEAP32[5264116 >> 2];
    var $call38_7 = _fgetc($10);
    var $conv39_7 = $call38_7 & 255;
    var $xor_7 = $mul ^ 7;
    var $arrayidx_7 = $c + $xor_7 | 0;
    HEAP8[$arrayidx_7] = $conv39_7;
    var $d40 = $u | 0;
    var $11 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$d40 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$d40 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $retval_0 = $11;
    label = 12;
    break;
   case 11:
    var $12 = HEAP32[5264116 >> 2];
    var $call41 = _fgetc($12);
    var $conv42 = $call41 | 0;
    var $retval_0 = $conv42;
    label = 12;
    break;
   case 12:
    var $retval_0;
    STACKTOP = __stackBase__;
    return $retval_0;
  }
}
_getreal["X"] = 1;
function _read_shorts($pixel, $count) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = $pixel;
    var $1 = HEAP32[5264116 >> 2];
    var $call = _fread($0, 2, $count, $1);
    var $cmp = $call >>> 0 < $count >>> 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _derror();
    label = 4;
    break;
   case 4:
    var $2 = HEAP16[5262944 >> 1];
    var $cmp1 = $2 << 16 >> 16 == 18761;
    var $call3 = _htons(4660);
    var $cmp4 = ($call3 | 0) == 4660;
    var $cmp6tmp = $cmp1 ^ $cmp4;
    if ($cmp6tmp) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $mul = $count << 1;
    _swab($0, $0, $mul);
    label = 6;
    break;
   case 6:
    return;
  }
}
function _canon_600_auto_wb() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 120 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $count = __stackBase__;
    var $test = __stackBase__ + 8;
    var $total = __stackBase__ + 40;
    var $ratio = __stackBase__ + 104;
    var $0 = $count;
    var $$etemp$0$0 = 0;
    var $$etemp$0$1 = 0;
    var $st$7$0 = $0 | 0;
    HEAP32[$st$7$0 >> 2] = $$etemp$0$0;
    var $st$7$1 = $0 + 4 | 0;
    HEAP32[$st$7$1 >> 2] = $$etemp$0$1;
    var $1 = $total;
    for (var $$dest = $1 >> 2, $$stop = $$dest + 16; $$dest < $$stop; $$dest++) {
      HEAP32[$$dest] = 0;
    }
    var $2 = HEAPF32[5560920 >> 2];
    var $conv = $2;
    var $add = $conv + .5;
    var $conv1 = $add & -1;
    var $cmp = ($conv1 | 0) < 10;
    if ($cmp) {
      var $mar_0 = 150;
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $cmp3 = ($conv1 | 0) > 12;
    if ($cmp3) {
      var $mar_0 = 20;
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $3 = $conv1 * -20 & -1;
    var $sub = $3 + 280 | 0;
    var $mar_0 = $sub;
    label = 5;
    break;
   case 5:
    var $mar_0;
    var $4 = HEAPF32[5403052 >> 2];
    var $tobool = $4 != 0;
    var $mar_1 = $tobool ? 80 : $mar_0;
    var $5 = HEAP16[5398712 >> 1];
    var $conv1077 = $5 & 65535;
    var $sub1178 = $conv1077 - 14 | 0;
    var $cmp1279 = ($sub1178 | 0) > 14;
    if ($cmp1279) {
      label = 6;
      break;
    } else {
      var $27 = 0;
      var $26 = 0;
      label = 22;
      break;
    }
   case 6:
    var $arrayidx99 = $test + 4 | 0;
    var $arrayidx102 = $test | 0;
    var $arrayidx110 = $ratio | 0;
    var $arrayidx99_1 = $test + 12 | 0;
    var $arrayidx102_1 = $test + 8 | 0;
    var $arrayidx110_1 = $ratio + 4 | 0;
    var $arrayidx99_184 = $test + 20 | 0;
    var $arrayidx102_185 = $test + 16 | 0;
    var $arrayidx110_189 = $ratio + 8 | 0;
    var $arrayidx99_1_1 = $test + 28 | 0;
    var $arrayidx102_1_1 = $test + 24 | 0;
    var $arrayidx110_1_1 = $ratio + 12 | 0;
    var $_pre = HEAP16[5242964 >> 1];
    var $row_080 = 14;
    label = 7;
    break;
   case 7:
    var $row_080;
    var $cmp1675 = ($_pre & 65535) > 10;
    if ($cmp1675) {
      label = 8;
      break;
    } else {
      label = 20;
      break;
    }
   case 8:
    var $_pre5 = HEAP32[5427632 >> 2];
    var $_pre6 = HEAP16[5244916 >> 1];
    var $_pre7 = HEAP16[5264092 >> 1];
    var $_pre8 = HEAP32[5264108 >> 2];
    var $col_076 = 10;
    label = 9;
    break;
   case 9:
    var $col_076;
    var $conv33 = $_pre6 & 65535;
    var $conv35 = $_pre7 & 65535;
    var $i_066 = 0;
    label = 10;
    break;
   case 10:
    var $i_066;
    var $shr = $i_066 >> 1;
    var $add23 = $shr + $row_080 | 0;
    var $shl = $add23 << 1;
    var $and = $shl & 14;
    var $and24 = $i_066 & 1;
    var $add25 = $and24 | $col_076;
    var $add27 = $and | $and24;
    var $shl28 = $add27 << 1;
    var $shr29 = $_pre5 >>> ($shl28 >>> 0);
    var $and30 = $shr29 & 3;
    var $shr34 = $add23 >> $conv33;
    var $mul36 = $shr34 * $conv35 & -1;
    var $shr40 = $add25 >> $conv33;
    var $add41 = $mul36 + $shr40 | 0;
    var $arrayidx42 = $_pre8 + ($add41 << 3) + ($and30 << 1) | 0;
    var $6 = HEAP16[$arrayidx42 >> 1];
    var $conv43 = $6 & 65535;
    var $and44 = $i_066 & 4;
    var $add56 = $and30 | $and44;
    var $arrayidx57 = $test + ($add56 << 2) | 0;
    HEAP32[$arrayidx57 >> 2] = $conv43;
    var $inc = $i_066 + 1 | 0;
    var $exitcond = ($inc | 0) == 8;
    if ($exitcond) {
      var $i_1 = 0;
      label = 11;
      break;
    } else {
      var $i_066 = $inc;
      label = 10;
      break;
    }
   case 11:
    var $i_1;
    var $cmp59 = ($i_1 | 0) < 8;
    if ($cmp59) {
      label = 12;
      break;
    } else {
      var $i_2 = 0;
      label = 13;
      break;
    }
   case 12:
    var $arrayidx62 = $test + ($i_1 << 2) | 0;
    var $7 = HEAP32[$arrayidx62 >> 2];
    var $_off = $7 - 150 | 0;
    var $8 = $_off >>> 0 > 1350;
    var $inc71 = $i_1 + 1 | 0;
    if ($8) {
      label = 19;
      break;
    } else {
      var $i_1 = $inc71;
      label = 11;
      break;
    }
   case 13:
    var $i_2;
    var $cmp74 = ($i_2 | 0) < 4;
    if ($cmp74) {
      label = 14;
      break;
    } else {
      label = 25;
      break;
    }
   case 14:
    var $arrayidx77 = $test + ($i_2 << 2) | 0;
    var $9 = HEAP32[$arrayidx77 >> 2];
    var $add78 = $i_2 + 4 | 0;
    var $arrayidx79 = $test + ($add78 << 2) | 0;
    var $10 = HEAP32[$arrayidx79 >> 2];
    var $sub80 = $9 - $10 | 0;
    var $ispos = ($sub80 | 0) > -1;
    var $neg = -$sub80 | 0;
    var $call = $ispos ? $sub80 : $neg;
    var $cmp81 = ($call | 0) > 50;
    var $inc86 = $i_2 + 1 | 0;
    if ($cmp81) {
      label = 19;
      break;
    } else {
      var $i_2 = $inc86;
      label = 13;
      break;
    }
   case 15:
    var $tobool131 = ($call115 | 0) == 0;
    if ($tobool131) {
      var $14 = $36;
      var $13 = $38;
      label = 17;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $11 = HEAP32[$arrayidx110 >> 2];
    var $add143 = $11 + 1024 | 0;
    var $mul144 = $add143 * $37 & -1;
    var $shr145 = $mul144 >> 10;
    HEAP32[$arrayidx99 >> 2] = $shr145;
    var $12 = HEAP32[$arrayidx110_1 >> 2];
    var $add143_1 = $12 + 1024 | 0;
    var $mul144_1 = $add143_1 * $39 & -1;
    var $shr145_1 = $mul144_1 >> 10;
    HEAP32[$arrayidx99_1 >> 2] = $shr145_1;
    var $14 = $shr145;
    var $13 = $shr145_1;
    label = 17;
    break;
   case 17:
    var $13;
    var $14;
    var $tobool131_1 = ($call115_1 | 0) == 0;
    if ($tobool131_1) {
      var $16 = $40;
      var $15 = $42;
      label = 18;
      break;
    } else {
      label = 26;
      break;
    }
   case 18:
    var $15;
    var $16;
    var $arrayidx164 = $total + ($or << 5) | 0;
    var $17 = HEAP32[$arrayidx164 >> 2];
    var $add165 = $17 + $37 | 0;
    HEAP32[$arrayidx164 >> 2] = $add165;
    var $arrayidx164_1 = $total + ($or << 5) + 4 | 0;
    var $18 = HEAP32[$arrayidx164_1 >> 2];
    var $add165_1 = $18 + $14 | 0;
    HEAP32[$arrayidx164_1 >> 2] = $add165_1;
    var $arrayidx164_2 = $total + ($or << 5) + 8 | 0;
    var $19 = HEAP32[$arrayidx164_2 >> 2];
    var $add165_2 = $19 + $39 | 0;
    HEAP32[$arrayidx164_2 >> 2] = $add165_2;
    var $arrayidx164_3 = $total + ($or << 5) + 12 | 0;
    var $20 = HEAP32[$arrayidx164_3 >> 2];
    var $add165_3 = $20 + $13 | 0;
    HEAP32[$arrayidx164_3 >> 2] = $add165_3;
    var $arrayidx164_4 = $total + ($or << 5) + 16 | 0;
    var $21 = HEAP32[$arrayidx164_4 >> 2];
    var $add165_4 = $21 + $41 | 0;
    HEAP32[$arrayidx164_4 >> 2] = $add165_4;
    var $arrayidx164_5 = $total + ($or << 5) + 20 | 0;
    var $22 = HEAP32[$arrayidx164_5 >> 2];
    var $add165_5 = $22 + $16 | 0;
    HEAP32[$arrayidx164_5 >> 2] = $add165_5;
    var $arrayidx164_6 = $total + ($or << 5) + 24 | 0;
    var $23 = HEAP32[$arrayidx164_6 >> 2];
    var $add165_6 = $23 + $43 | 0;
    HEAP32[$arrayidx164_6 >> 2] = $add165_6;
    var $arrayidx164_7 = $total + ($or << 5) + 28 | 0;
    var $24 = HEAP32[$arrayidx164_7 >> 2];
    var $add165_7 = $24 + $15 | 0;
    HEAP32[$arrayidx164_7 >> 2] = $add165_7;
    var $arrayidx169 = $count + ($or << 2) | 0;
    var $25 = HEAP32[$arrayidx169 >> 2];
    var $inc170 = $25 + 1 | 0;
    HEAP32[$arrayidx169 >> 2] = $inc170;
    label = 19;
    break;
   case 19:
    var $add172 = $col_076 + 2 | 0;
    var $conv15 = $_pre & 65535;
    var $cmp16 = ($add172 | 0) < ($conv15 | 0);
    if ($cmp16) {
      var $col_076 = $add172;
      label = 9;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    var $add175 = $row_080 + 4 | 0;
    var $cmp12 = ($add175 | 0) < ($sub1178 | 0);
    if ($cmp12) {
      var $row_080 = $add175;
      label = 7;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    var $arrayidx177_phi_trans_insert = $count | 0;
    var $_pre3 = HEAP32[$arrayidx177_phi_trans_insert >> 2];
    var $arrayidx178_phi_trans_insert = $count + 4 | 0;
    var $_pre4 = HEAP32[$arrayidx178_phi_trans_insert >> 2];
    var $27 = $_pre3;
    var $26 = $_pre4;
    label = 22;
    break;
   case 22:
    var $26;
    var $27;
    var $or179 = $26 | $27;
    var $tobool180 = ($or179 | 0) == 0;
    if ($tobool180) {
      label = 24;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    var $mul183 = $27 * 200 & -1;
    var $cmp185 = ($mul183 | 0) < ($26 | 0);
    var $conv186 = $cmp185 & 1;
    var $arrayidx192 = $total + ($conv186 << 5) | 0;
    var $28 = HEAP32[$arrayidx192 >> 2];
    var $arrayidx195 = $total + ($conv186 << 5) + 16 | 0;
    var $29 = HEAP32[$arrayidx195 >> 2];
    var $add196 = $29 + $28 | 0;
    var $conv197 = $add196 | 0;
    var $div198 = 1 / $conv197;
    var $conv199 = $div198;
    HEAPF32[5245640 >> 2] = $conv199;
    var $arrayidx192_1 = $total + ($conv186 << 5) + 4 | 0;
    var $30 = HEAP32[$arrayidx192_1 >> 2];
    var $arrayidx195_1 = $total + ($conv186 << 5) + 20 | 0;
    var $31 = HEAP32[$arrayidx195_1 >> 2];
    var $add196_1 = $31 + $30 | 0;
    var $conv197_1 = $add196_1 | 0;
    var $div198_1 = 1 / $conv197_1;
    var $conv199_1 = $div198_1;
    HEAPF32[5245644 >> 2] = $conv199_1;
    var $arrayidx192_2 = $total + ($conv186 << 5) + 8 | 0;
    var $32 = HEAP32[$arrayidx192_2 >> 2];
    var $arrayidx195_2 = $total + ($conv186 << 5) + 24 | 0;
    var $33 = HEAP32[$arrayidx195_2 >> 2];
    var $add196_2 = $33 + $32 | 0;
    var $conv197_2 = $add196_2 | 0;
    var $div198_2 = 1 / $conv197_2;
    var $conv199_2 = $div198_2;
    HEAPF32[5245648 >> 2] = $conv199_2;
    var $arrayidx192_3 = $total + ($conv186 << 5) + 12 | 0;
    var $34 = HEAP32[$arrayidx192_3 >> 2];
    var $arrayidx195_3 = $total + ($conv186 << 5) + 28 | 0;
    var $35 = HEAP32[$arrayidx195_3 >> 2];
    var $add196_3 = $35 + $34 | 0;
    var $conv197_3 = $add196_3 | 0;
    var $div198_3 = 1 / $conv197_3;
    var $conv199_3 = $div198_3;
    HEAPF32[5245652 >> 2] = $conv199_3;
    label = 24;
    break;
   case 24:
    STACKTOP = __stackBase__;
    return;
   case 25:
    var $36 = HEAP32[$arrayidx99 >> 2];
    var $37 = HEAP32[$arrayidx102 >> 2];
    var $sub103 = $36 - $37 | 0;
    var $shl104 = $sub103 << 10;
    var $div = ($shl104 | 0) / ($37 | 0) & -1;
    HEAP32[$arrayidx110 >> 2] = $div;
    var $38 = HEAP32[$arrayidx99_1 >> 2];
    var $39 = HEAP32[$arrayidx102_1 >> 2];
    var $sub103_1 = $38 - $39 | 0;
    var $shl104_1 = $sub103_1 << 10;
    var $div_1 = ($shl104_1 | 0) / ($39 | 0) & -1;
    HEAP32[$arrayidx110_1 >> 2] = $div_1;
    var $call115 = _canon_600_color($arrayidx110, $mar_1);
    var $40 = HEAP32[$arrayidx99_184 >> 2];
    var $41 = HEAP32[$arrayidx102_185 >> 2];
    var $sub103_186 = $40 - $41 | 0;
    var $shl104_187 = $sub103_186 << 10;
    var $div_188 = ($shl104_187 | 0) / ($41 | 0) & -1;
    HEAP32[$arrayidx110_189 >> 2] = $div_188;
    var $42 = HEAP32[$arrayidx99_1_1 >> 2];
    var $43 = HEAP32[$arrayidx102_1_1 >> 2];
    var $sub103_1_1 = $42 - $43 | 0;
    var $shl104_1_1 = $sub103_1_1 << 10;
    var $div_1_1 = ($shl104_1_1 | 0) / ($43 | 0) & -1;
    HEAP32[$arrayidx110_1_1 >> 2] = $div_1_1;
    var $call115_1 = _canon_600_color($arrayidx110_189, $mar_1);
    var $or = $call115_1 | $call115;
    var $cmp122 = ($or | 0) > 1;
    if ($cmp122) {
      label = 19;
      break;
    } else {
      label = 15;
      break;
    }
   case 26:
    var $44 = HEAP32[$arrayidx110_189 >> 2];
    var $add143_194 = $44 + 1024 | 0;
    var $mul144_195 = $add143_194 * $41 & -1;
    var $shr145_196 = $mul144_195 >> 10;
    HEAP32[$arrayidx99_184 >> 2] = $shr145_196;
    var $45 = HEAP32[$arrayidx110_1_1 >> 2];
    var $add143_1_1 = $45 + 1024 | 0;
    var $mul144_1_1 = $add143_1_1 * $43 & -1;
    var $shr145_1_1 = $mul144_1_1 >> 10;
    HEAP32[$arrayidx99_1_1 >> 2] = $shr145_1_1;
    var $16 = $shr145_196;
    var $15 = $shr145_1_1;
    label = 18;
    break;
  }
}
_canon_600_auto_wb["X"] = 1;
function _merror($ptr, $where) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $tobool = ($ptr | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    STACKTOP = __stackBase__;
    return;
   case 4:
    var $0 = HEAP32[_stderr >> 2];
    var $1 = HEAP32[5264120 >> 2];
    var $call = _fprintf($0, 5587568, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $1, HEAP32[tempInt + 4 >> 2] = $where, tempInt));
    _longjmp(5427928, 1);
  }
}
function _canon_600_coeff() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAPF32[5245644 >> 2];
    var $1 = HEAPF32[5245648 >> 2];
    var $div = $0 / $1;
    var $2 = HEAPF32[5245652 >> 2];
    var $div1 = $2 / $1;
    var $cmp = $div <= 1;
    var $conv = $div;
    var $cmp2 = $conv > 1.28;
    var $or_cond11 = $cmp | $cmp2;
    if ($or_cond11) {
      var $t_0 = 0;
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $conv5 = $div1;
    var $cmp6 = $conv5 < .8789;
    if ($cmp6) {
      label = 4;
      break;
    } else {
      var $t_0 = 0;
      label = 5;
      break;
    }
   case 4:
    var $t_0 = 1;
    label = 5;
    break;
   case 5:
    var $t_0;
    var $cmp9 = $conv > 1.28;
    var $cmp12 = $div <= 2;
    var $or_cond = $cmp9 & $cmp12;
    if ($or_cond) {
      label = 6;
      break;
    } else {
      var $t_1 = $t_0;
      label = 9;
      break;
    }
   case 6:
    var $conv15 = $div1;
    var $cmp16 = $conv15 < .8789;
    if ($cmp16) {
      var $t_1 = 3;
      label = 9;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $cmp19 = $div1 > 2;
    if ($cmp19) {
      var $t_1 = $t_0;
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $t_1 = 4;
    label = 9;
    break;
   case 9:
    var $t_1;
    var $3 = HEAPF32[5403052 >> 2];
    var $tobool = $3 != 0;
    var $t_2 = $tobool ? 5 : $t_1;
    HEAP32[5245040 >> 2] = 0;
    var $4 = HEAP32[5560840 >> 2];
    var $cmp3012 = ($4 | 0) > 0;
    if ($cmp3012) {
      var $c_013 = 0;
      label = 10;
      break;
    } else {
      label = 13;
      break;
    }
   case 10:
    var $c_013;
    var $arrayidx33 = 5560980 + $t_2 * 24 + ($c_013 << 1) | 0;
    var $5 = HEAP16[$arrayidx33 >> 1];
    var $conv35 = $5 << 16 >> 16;
    var $div36 = $conv35 * .0009765625;
    var $conv37 = $div36;
    var $arrayidx39 = 5244964 + ($c_013 << 2) | 0;
    HEAPF32[$arrayidx39 >> 2] = $conv37;
    var $inc = $c_013 + 1 | 0;
    var $exitcond = ($inc | 0) == ($4 | 0);
    if ($exitcond) {
      var $c_013_1 = 0;
      label = 11;
      break;
    } else {
      var $c_013 = $inc;
      label = 10;
      break;
    }
   case 11:
    var $c_013_1;
    var $add_1 = $c_013_1 + 4 | 0;
    var $arrayidx33_1 = 5560980 + $t_2 * 24 + ($add_1 << 1) | 0;
    var $6 = HEAP16[$arrayidx33_1 >> 1];
    var $conv35_1 = $6 << 16 >> 16;
    var $div36_1 = $conv35_1 * .0009765625;
    var $conv37_1 = $div36_1;
    var $arrayidx39_1 = 5244980 + ($c_013_1 << 2) | 0;
    HEAPF32[$arrayidx39_1 >> 2] = $conv37_1;
    var $inc_1 = $c_013_1 + 1 | 0;
    var $exitcond_1 = ($inc_1 | 0) == ($4 | 0);
    if ($exitcond_1) {
      var $c_013_2 = 0;
      label = 12;
      break;
    } else {
      var $c_013_1 = $inc_1;
      label = 11;
      break;
    }
   case 12:
    var $c_013_2;
    var $add_2 = $c_013_2 + 8 | 0;
    var $arrayidx33_2 = 5560980 + $t_2 * 24 + ($add_2 << 1) | 0;
    var $7 = HEAP16[$arrayidx33_2 >> 1];
    var $conv35_2 = $7 << 16 >> 16;
    var $div36_2 = $conv35_2 * .0009765625;
    var $conv37_2 = $div36_2;
    var $arrayidx39_2 = 5244996 + ($c_013_2 << 2) | 0;
    HEAPF32[$arrayidx39_2 >> 2] = $conv37_2;
    var $inc_2 = $c_013_2 + 1 | 0;
    var $exitcond_2 = ($inc_2 | 0) == ($4 | 0);
    if ($exitcond_2) {
      label = 13;
      break;
    } else {
      var $c_013_2 = $inc_2;
      label = 12;
      break;
    }
   case 13:
    return;
  }
}
_canon_600_coeff["X"] = 1;
function _canon_600_load_raw() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 1120 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $data = __stackBase__;
    var $0 = HEAP16[5398712 >> 1];
    var $cmp39 = $0 << 16 >> 16 == 0;
    if ($cmp39) {
      label = 9;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $arraydecay = $data | 0;
    var $add_ptr8 = $data + 1120 | 0;
    var $irow_040 = 0;
    var $row_041 = 0;
    label = 4;
    break;
   case 4:
    var $row_041;
    var $irow_040;
    var $1 = HEAP32[5264116 >> 2];
    var $call = _fread($arraydecay, 1, 1120, $1);
    var $cmp2 = $call >>> 0 < 1120;
    if ($cmp2) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    _derror();
    label = 6;
    break;
   case 6:
    var $2 = HEAP16[5245028 >> 1];
    var $conv4 = $2 & 65535;
    var $mul = $conv4 * $row_041 & -1;
    var $3 = HEAP32[5245032 >> 2];
    var $add_ptr = $3 + ($mul << 1) | 0;
    var $dp_035 = $arraydecay;
    var $pix_036 = $add_ptr;
    label = 7;
    break;
   case 7:
    var $pix_036;
    var $dp_035;
    var $4 = HEAP8[$dp_035];
    var $conv12 = $4 & 255;
    var $shl = $conv12 << 2;
    var $arrayidx13 = $dp_035 + 1 | 0;
    var $5 = HEAP8[$arrayidx13];
    var $conv14 = $5 & 255;
    var $shr28 = ($conv14 & 65535) >>> 6;
    var $add = $shr28 | $shl;
    HEAP16[$pix_036 >> 1] = $add;
    var $arrayidx17 = $dp_035 + 2 | 0;
    var $6 = HEAP8[$arrayidx17];
    var $conv18 = $6 & 255;
    var $shl19 = $conv18 << 2;
    var $7 = HEAP8[$arrayidx13];
    var $conv21 = $7 & 255;
    var $shr2229 = ($conv21 & 65535) >>> 4;
    var $and = $shr2229 & 3;
    var $add23 = $and | $shl19;
    var $arrayidx25 = $pix_036 + 2 | 0;
    HEAP16[$arrayidx25 >> 1] = $add23;
    var $arrayidx26 = $dp_035 + 3 | 0;
    var $8 = HEAP8[$arrayidx26];
    var $conv27 = $8 & 255;
    var $shl28 = $conv27 << 2;
    var $9 = HEAP8[$arrayidx13];
    var $conv30 = $9 & 255;
    var $shr3130 = ($conv30 & 65535) >>> 2;
    var $and32 = $shr3130 & 3;
    var $add33 = $and32 | $shl28;
    var $arrayidx35 = $pix_036 + 4 | 0;
    HEAP16[$arrayidx35 >> 1] = $add33;
    var $arrayidx36 = $dp_035 + 4 | 0;
    var $10 = HEAP8[$arrayidx36];
    var $conv37 = $10 & 255;
    var $shl38 = $conv37 << 2;
    var $11 = HEAP8[$arrayidx13];
    var $conv40 = $11 & 255;
    var $and41 = $conv40 & 3;
    var $add42 = $and41 | $shl38;
    var $arrayidx44 = $pix_036 + 6 | 0;
    HEAP16[$arrayidx44 >> 1] = $add42;
    var $arrayidx45 = $dp_035 + 5 | 0;
    var $12 = HEAP8[$arrayidx45];
    var $conv46 = $12 & 255;
    var $shl47 = $conv46 << 2;
    var $arrayidx48 = $dp_035 + 9 | 0;
    var $13 = HEAP8[$arrayidx48];
    var $conv49 = $13 & 255;
    var $and50 = $conv49 & 3;
    var $add51 = $and50 | $shl47;
    var $arrayidx53 = $pix_036 + 8 | 0;
    HEAP16[$arrayidx53 >> 1] = $add51;
    var $arrayidx54 = $dp_035 + 6 | 0;
    var $14 = HEAP8[$arrayidx54];
    var $conv55 = $14 & 255;
    var $shl56 = $conv55 << 2;
    var $15 = HEAP8[$arrayidx48];
    var $conv58 = $15 & 255;
    var $shr5931 = ($conv58 & 65535) >>> 2;
    var $and60 = $shr5931 & 3;
    var $add61 = $and60 | $shl56;
    var $arrayidx63 = $pix_036 + 10 | 0;
    HEAP16[$arrayidx63 >> 1] = $add61;
    var $arrayidx64 = $dp_035 + 7 | 0;
    var $16 = HEAP8[$arrayidx64];
    var $conv65 = $16 & 255;
    var $shl66 = $conv65 << 2;
    var $17 = HEAP8[$arrayidx48];
    var $conv68 = $17 & 255;
    var $shr6932 = ($conv68 & 65535) >>> 4;
    var $and70 = $shr6932 & 3;
    var $add71 = $and70 | $shl66;
    var $arrayidx73 = $pix_036 + 12 | 0;
    HEAP16[$arrayidx73 >> 1] = $add71;
    var $arrayidx74 = $dp_035 + 8 | 0;
    var $18 = HEAP8[$arrayidx74];
    var $conv75 = $18 & 255;
    var $shl76 = $conv75 << 2;
    var $19 = HEAP8[$arrayidx48];
    var $conv78 = $19 & 255;
    var $shr7933 = ($conv78 & 65535) >>> 6;
    var $add80 = $shr7933 | $shl76;
    var $arrayidx82 = $pix_036 + 14 | 0;
    HEAP16[$arrayidx82 >> 1] = $add80;
    var $add_ptr83 = $dp_035 + 10 | 0;
    var $add_ptr84 = $pix_036 + 16 | 0;
    var $cmp9 = $add_ptr83 >>> 0 < $add_ptr8 >>> 0;
    if ($cmp9) {
      var $dp_035 = $add_ptr83;
      var $pix_036 = $add_ptr84;
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $add85 = $row_041 + 2 | 0;
    var $20 = HEAP16[5398712 >> 1];
    var $conv86 = $20 & 65535;
    var $cmp87 = ($add85 | 0) > ($conv86 | 0);
    var $_add85 = $cmp87 ? 1 : $add85;
    var $inc = $irow_040 + 1 | 0;
    var $cmp = ($inc | 0) < ($conv86 | 0);
    if ($cmp) {
      var $irow_040 = $inc;
      var $row_041 = $_add85;
      label = 4;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    STACKTOP = __stackBase__;
    return;
  }
}
_canon_600_load_raw["X"] = 1;
function _canon_600_correct() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP16[5398712 >> 1];
    var $cmp19 = $0 << 16 >> 16 == 0;
    if ($cmp19) {
      label = 8;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $_pre = HEAP16[5242964 >> 1];
    var $row_020 = 0;
    var $1 = $_pre;
    label = 4;
    break;
   case 4:
    var $1;
    var $row_020;
    var $cmp416 = $1 << 16 >> 16 == 0;
    if ($cmp416) {
      var $4 = 0;
      label = 7;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $shl = $row_020 << 1;
    var $and = $shl & 14;
    var $and21 = $row_020 & 3;
    var $_pre1 = HEAP32[5427632 >> 2];
    var $_pre2 = HEAP16[5244916 >> 1];
    var $_pre3 = HEAP16[5264092 >> 1];
    var $_pre4 = HEAP32[5264108 >> 2];
    var $_pre5 = HEAP32[5561400 >> 2];
    var $col_017 = 0;
    label = 6;
    break;
   case 6:
    var $col_017;
    var $and7 = $col_017 & 1;
    var $add = $and7 | $and;
    var $shl8 = $add << 1;
    var $shr = $_pre1 >>> ($shl8 >>> 0);
    var $and9 = $shr & 3;
    var $conv10 = $_pre2 & 65535;
    var $shr11 = $row_020 >> $conv10;
    var $conv12 = $_pre3 & 65535;
    var $mul = $shr11 * $conv12 & -1;
    var $shr14 = $col_017 >> $conv10;
    var $add15 = $mul + $shr14 | 0;
    var $arrayidx16 = $_pre4 + ($add15 << 3) + ($and9 << 1) | 0;
    var $2 = HEAP16[$arrayidx16 >> 1];
    var $conv17 = $2 & 65535;
    var $sub = $conv17 - $_pre5 | 0;
    var $cmp18 = ($sub | 0) < 0;
    var $_sub = $cmp18 ? 0 : $sub;
    var $arrayidx23 = 5560964 + ($and21 << 2) + ($and7 << 1) | 0;
    var $3 = HEAP16[$arrayidx23 >> 1];
    var $conv24 = $3 << 16 >> 16;
    var $mul25 = $_sub * $conv24 & -1;
    var $shr2614 = $mul25 >>> 9;
    var $conv27 = $shr2614 & 65535;
    HEAP16[$arrayidx16 >> 1] = $conv27;
    var $inc = $col_017 + 1 | 0;
    var $conv3 = $_pre & 65535;
    var $cmp4 = ($inc | 0) < ($conv3 | 0);
    if ($cmp4) {
      var $col_017 = $inc;
      label = 6;
      break;
    } else {
      var $4 = $_pre;
      label = 7;
      break;
    }
   case 7:
    var $4;
    var $inc45 = $row_020 + 1 | 0;
    var $conv = $0 & 65535;
    var $cmp = ($inc45 | 0) < ($conv | 0);
    if ($cmp) {
      var $row_020 = $inc45;
      var $1 = $4;
      label = 4;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    _canon_600_fixed_wb();
    _canon_600_auto_wb();
    _canon_600_coeff();
    var $5 = HEAP32[5561400 >> 2];
    var $sub47 = 1023 - $5 | 0;
    var $mul48 = $sub47 * 1109 & -1;
    var $shr49 = $mul48 >>> 9;
    HEAP32[5263496 >> 2] = $shr49;
    HEAP32[5561400 >> 2] = 0;
    return;
  }
}
_canon_600_correct["X"] = 1;
function _canon_s2is() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $row_0 = 0;
    label = 3;
    break;
   case 3:
    var $row_0;
    var $cmp = $row_0 >>> 0 < 100;
    if ($cmp) {
      label = 4;
      break;
    } else {
      var $retval_0 = 0;
      label = 5;
      break;
    }
   case 4:
    var $0 = HEAP32[5264116 >> 2];
    var $mul = $row_0 * 3340 & -1;
    var $add = $mul + 3284 | 0;
    var $call = _fseek($0, $add, 0);
    var $1 = HEAP32[5264116 >> 2];
    var $call1 = _fgetc($1);
    var $cmp2 = ($call1 | 0) > 15;
    var $inc = $row_0 + 1 | 0;
    if ($cmp2) {
      var $retval_0 = 1;
      label = 5;
      break;
    } else {
      var $row_0 = $inc;
      label = 3;
      break;
    }
   case 5:
    var $retval_0;
    return $retval_0;
  }
}
function _getbithuff($nbits, $huff) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $cmp = ($nbits | 0) == -1;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    HEAP32[5398868 >> 2] = 0;
    HEAP32[5398864 >> 2] = 0;
    HEAP32[5398872 >> 2] = 0;
    var $retval_0 = 0;
    label = 17;
    break;
   case 4:
    var $cmp1 = ($nbits | 0) == 0;
    var $0 = HEAP32[5398864 >> 2];
    var $cmp2 = ($0 | 0) < 0;
    var $or_cond = $cmp1 | $cmp2;
    if ($or_cond) {
      var $retval_0 = 0;
      label = 17;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $1 = HEAP32[5398868 >> 2];
    var $tobool17 = ($1 | 0) == 0;
    var $cmp518 = ($0 | 0) < ($nbits | 0);
    var $or_cond1219 = $tobool17 & $cmp518;
    if ($or_cond1219) {
      label = 6;
      break;
    } else {
      label = 9;
      break;
    }
   case 6:
    var $2 = HEAP32[5264116 >> 2];
    var $call = _fgetc($2);
    var $cmp7 = ($call | 0) == -1;
    if ($cmp7) {
      label = 9;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $_b = HEAP8[5242884];
    var $cmp10 = ($call | 0) == 255;
    var $or_cond13 = $_b & $cmp10;
    if ($or_cond13) {
      label = 10;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    HEAP32[5398868 >> 2] = 0;
    var $3 = HEAP32[5398872 >> 2];
    var $8 = $3;
    var $7 = 0;
    label = 11;
    break;
   case 9:
    var $4 = HEAP32[5398872 >> 2];
    var $10 = $4;
    label = 12;
    break;
   case 10:
    var $5 = HEAP32[5264116 >> 2];
    var $call12 = _fgetc($5);
    var $tobool13 = ($call12 | 0) != 0;
    var $land_ext = $tobool13 & 1;
    HEAP32[5398868 >> 2] = $land_ext;
    var $6 = HEAP32[5398872 >> 2];
    if ($tobool13) {
      var $10 = $6;
      label = 12;
      break;
    } else {
      var $8 = $6;
      var $7 = $land_ext;
      label = 11;
      break;
    }
   case 11:
    var $7;
    var $8;
    var $shl = $8 << 8;
    var $conv16 = $call & 255;
    var $add = $shl | $conv16;
    HEAP32[5398872 >> 2] = $add;
    var $9 = HEAP32[5398864 >> 2];
    var $add17 = $9 + 8 | 0;
    HEAP32[5398864 >> 2] = $add17;
    var $tobool = ($7 | 0) == 0;
    var $cmp5 = ($add17 | 0) < ($nbits | 0);
    var $or_cond12 = $tobool & $cmp5;
    if ($or_cond12) {
      label = 6;
      break;
    } else {
      label = 9;
      break;
    }
   case 12:
    var $10;
    var $11 = HEAP32[5398864 >> 2];
    var $sub = 32 - $11 | 0;
    var $shl18 = $10 << $sub;
    var $sub19 = 32 - $nbits | 0;
    var $shr = $shl18 >>> ($sub19 >>> 0);
    var $tobool20 = ($huff | 0) == 0;
    if ($tobool20) {
      label = 14;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $arrayidx = $huff + ($shr << 1) | 0;
    var $12 = HEAP16[$arrayidx >> 1];
    var $conv22 = $12 & 65535;
    var $shr2311 = $conv22 >>> 8;
    var $sub24 = $11 - $shr2311 | 0;
    HEAP32[5398864 >> 2] = $sub24;
    var $conv27 = $conv22 & 255;
    var $c_2 = $conv27;
    var $13 = $sub24;
    label = 15;
    break;
   case 14:
    var $sub28 = $11 - $nbits | 0;
    HEAP32[5398864 >> 2] = $sub28;
    var $c_2 = $shr;
    var $13 = $sub28;
    label = 15;
    break;
   case 15:
    var $13;
    var $c_2;
    var $cmp30 = ($13 | 0) < 0;
    if ($cmp30) {
      label = 16;
      break;
    } else {
      var $retval_0 = $c_2;
      label = 17;
      break;
    }
   case 16:
    _derror();
    var $retval_0 = $c_2;
    label = 17;
    break;
   case 17:
    var $retval_0;
    return $retval_0;
  }
}
_getbithuff["X"] = 1;
function _make_decoder_ref($source) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[$source >> 2];
    var $add_ptr = $0 + 16 | 0;
    HEAP32[$source >> 2] = $add_ptr;
    var $max_0 = 16;
    label = 3;
    break;
   case 3:
    var $max_0;
    var $tobool = ($max_0 | 0) == 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $add_ptr1_sum21 = $max_0 - 1 | 0;
    var $arrayidx = $0 + $add_ptr1_sum21 | 0;
    var $1 = HEAP8[$arrayidx];
    var $lnot = $1 << 24 >> 24 == 0;
    if ($lnot) {
      var $max_0 = $add_ptr1_sum21;
      label = 3;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $shl = 1 << $max_0;
    var $add = $shl + 1 | 0;
    var $call = _calloc($add, 2);
    var $2 = $call;
    _merror($call, 5582348);
    var $conv = $max_0 & 65535;
    HEAP16[$2 >> 1] = $conv;
    var $cmp30 = ($max_0 | 0) < 1;
    if ($cmp30) {
      label = 14;
      break;
    } else {
      var $h_031 = 1;
      var $len_032 = 1;
      label = 6;
      break;
    }
   case 6:
    var $len_032;
    var $h_031;
    var $add_ptr1_sum = $len_032 - 1 | 0;
    var $arrayidx8 = $0 + $add_ptr1_sum | 0;
    var $3 = HEAP8[$arrayidx8];
    var $cmp1026 = $3 << 24 >> 24 == 0;
    if ($cmp1026) {
      var $h_1_lcssa = $h_031;
      label = 13;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $sub = $max_0 - $len_032 | 0;
    var $shl14 = 1 << $sub;
    var $cmp1522 = ($shl14 | 0) > 0;
    var $shl21 = $len_032 << 8;
    var $h_127 = $h_031;
    var $i_028 = 0;
    label = 8;
    break;
   case 8:
    var $i_028;
    var $h_127;
    if ($cmp1522) {
      var $h_223 = $h_127;
      var $j_024 = 0;
      label = 9;
      break;
    } else {
      var $h_2_lcssa = $h_127;
      label = 12;
      break;
    }
   case 9:
    var $j_024;
    var $h_223;
    var $cmp19 = ($h_223 | 0) > ($shl | 0);
    if ($cmp19) {
      var $h_3 = $h_223;
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $4 = HEAP32[$source >> 2];
    var $5 = HEAP8[$4];
    var $conv22 = $5 & 255;
    var $or = $conv22 | $shl21;
    var $conv23 = $or & 65535;
    var $inc = $h_223 + 1 | 0;
    var $arrayidx24 = $2 + ($h_223 << 1) | 0;
    HEAP16[$arrayidx24 >> 1] = $conv23;
    var $h_3 = $inc;
    label = 11;
    break;
   case 11:
    var $h_3;
    var $inc26 = $j_024 + 1 | 0;
    var $exitcond = ($inc26 | 0) == ($shl14 | 0);
    if ($exitcond) {
      var $h_2_lcssa = $h_3;
      label = 12;
      break;
    } else {
      var $h_223 = $h_3;
      var $j_024 = $inc26;
      label = 9;
      break;
    }
   case 12:
    var $h_2_lcssa;
    var $inc29 = $i_028 + 1 | 0;
    var $6 = HEAP32[$source >> 2];
    var $incdec_ptr = $6 + 1 | 0;
    HEAP32[$source >> 2] = $incdec_ptr;
    var $7 = HEAP8[$arrayidx8];
    var $conv9 = $7 & 255;
    var $cmp10 = ($inc29 | 0) < ($conv9 | 0);
    if ($cmp10) {
      var $h_127 = $h_2_lcssa;
      var $i_028 = $inc29;
      label = 8;
      break;
    } else {
      var $h_1_lcssa = $h_2_lcssa;
      label = 13;
      break;
    }
   case 13:
    var $h_1_lcssa;
    var $inc32 = $len_032 + 1 | 0;
    var $cmp = ($inc32 | 0) > ($max_0 | 0);
    if ($cmp) {
      label = 14;
      break;
    } else {
      var $h_031 = $h_1_lcssa;
      var $len_032 = $inc32;
      label = 6;
      break;
    }
   case 14:
    return $2;
  }
}
_make_decoder_ref["X"] = 1;
function _make_decoder($source) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $source_addr = __stackBase__;
  HEAP32[$source_addr >> 2] = $source;
  var $call = _make_decoder_ref($source_addr);
  STACKTOP = __stackBase__;
  return $call;
}
function _crw_init_tables($table, $huff) {
  var $_table = $table >>> 0 > 2 ? 2 : $table;
  var $call = _make_decoder(5560112 + $_table * 29 | 0);
  HEAP32[$huff >> 2] = $call;
  var $call4 = _make_decoder(5559572 + $_table * 180 | 0);
  HEAP32[$huff + 4 >> 2] = $call4;
  return;
}
function _canon_has_lowbits() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16384 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $test = __stackBase__;
    var $0 = HEAP32[5264116 >> 2];
    var $call = _fseek($0, 0, 0);
    var $arraydecay = $test | 0;
    var $1 = HEAP32[5264116 >> 2];
    var $call1 = _fread($arraydecay, 1, 16384, $1);
    var $ret_04 = 1;
    var $i_05 = 540;
    label = 3;
    break;
   case 3:
    var $i_05;
    var $ret_04;
    var $arrayidx = $test + $i_05 | 0;
    var $2 = HEAP8[$arrayidx];
    var $cmp2 = $2 << 24 >> 24 == -1;
    var $add = $i_05 + 1 | 0;
    if ($cmp2) {
      label = 4;
      break;
    } else {
      var $ret_1 = $ret_04;
      var $inc_pre_phi = $add;
      label = 5;
      break;
    }
   case 4:
    var $arrayidx4 = $test + $add | 0;
    var $3 = HEAP8[$arrayidx4];
    var $tobool = $3 << 24 >> 24 == 0;
    if ($tobool) {
      var $ret_1 = 0;
      var $inc_pre_phi = $add;
      label = 5;
      break;
    } else {
      var $retval_0 = 1;
      label = 6;
      break;
    }
   case 5:
    var $inc_pre_phi;
    var $ret_1;
    var $cmp = $inc_pre_phi >>> 0 < 16383;
    if ($cmp) {
      var $ret_04 = $ret_1;
      var $i_05 = $inc_pre_phi;
      label = 3;
      break;
    } else {
      var $retval_0 = $ret_1;
      label = 6;
      break;
    }
   case 6:
    var $retval_0;
    STACKTOP = __stackBase__;
    return $retval_0;
  }
}
function _canon_load_raw() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 272 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $huff = __stackBase__;
    var $diffbuf = __stackBase__ + 8;
    var $base = __stackBase__ + 264;
    var $0 = HEAP32[5244032 >> 2];
    var $arraydecay = $huff | 0;
    _crw_init_tables($0, $arraydecay);
    var $call = _canon_has_lowbits();
    var $tobool = ($call | 0) != 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    HEAP32[5263496 >> 2] = 1023;
    label = 4;
    break;
   case 4:
    var $1 = HEAP32[5264116 >> 2];
    var $2 = HEAP16[5245036 >> 1];
    var $conv = $2 & 65535;
    var $mul = $conv * $call & -1;
    var $3 = HEAP16[5245028 >> 1];
    var $conv1 = $3 & 65535;
    var $mul2 = $mul * $conv1 & -1;
    var $div = ($mul2 | 0) / 4 & -1;
    var $add = $div + 540 | 0;
    var $call3 = _fseek($1, $add, 0);
    HEAP8[5242884] = 1;
    var $call4 = _getbithuff(-1, 0);
    var $4 = HEAP16[5245036 >> 1];
    var $cmp62 = $4 << 16 >> 16 == 0;
    if ($cmp62) {
      label = 30;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $conv561 = $4 & 65535;
    var $5 = $diffbuf;
    var $arrayidx62 = $diffbuf | 0;
    var $arrayidx74 = $base + 4 | 0;
    var $arrayidx75 = $base | 0;
    var $row_063 = 0;
    var $carry_064 = 0;
    var $pnum_065 = 0;
    var $conv566 = $conv561;
    label = 6;
    break;
   case 6:
    var $conv566;
    var $pnum_065;
    var $carry_064;
    var $row_063;
    var $6 = HEAP32[5245032 >> 2];
    var $7 = HEAP16[5245028 >> 1];
    var $conv7 = $7 & 65535;
    var $mul8 = $conv7 * $row_063 & -1;
    var $add_ptr = $6 + ($mul8 << 1) | 0;
    var $sub = $conv566 - $row_063 | 0;
    var $cmp10 = ($sub | 0) > 8;
    var $_sub = $cmp10 ? 8 : $sub;
    var $mul15 = $conv7 * $_sub & -1;
    var $shr = $mul15 >> 6;
    var $cmp1748 = ($shr | 0) > 0;
    if ($cmp1748) {
      label = 7;
      break;
    } else {
      var $carry_1_lcssa = $carry_064;
      var $pnum_1_lcssa = $pnum_065;
      label = 25;
      break;
    }
   case 7:
    var $8 = $shr << 6;
    var $block_049 = 0;
    var $carry_150 = $carry_064;
    var $pnum_151 = $pnum_065;
    label = 8;
    break;
   case 8:
    var $pnum_151;
    var $carry_150;
    var $block_049;
    for (var $$dest = $5 >> 2, $$stop = $$dest + 64; $$dest < $$stop; $$dest++) {
      HEAP32[$$dest] = 0;
    }
    var $i_045 = 0;
    label = 9;
    break;
   case 9:
    var $i_045;
    var $cmp24 = ($i_045 | 0) > 0;
    var $conv25 = $cmp24 & 1;
    var $arrayidx = $huff + ($conv25 << 2) | 0;
    var $9 = HEAP32[$arrayidx >> 2];
    var $10 = HEAP16[$9 >> 1];
    var $conv26 = $10 & 65535;
    var $add_ptr30 = $9 + 2 | 0;
    var $call31 = _getbithuff($conv26, $add_ptr30);
    var $cmp32 = ($call31 | 0) != 0;
    var $tobool34 = ($i_045 | 0) == 0;
    var $or_cond = $cmp32 | $tobool34;
    if ($or_cond) {
      label = 10;
      break;
    } else {
      label = 17;
      break;
    }
   case 10:
    var $cmp37 = ($call31 | 0) == 255;
    if ($cmp37) {
      var $i_1 = $i_045;
      label = 16;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $shr41 = $call31 >> 4;
    var $add42 = $shr41 + $i_045 | 0;
    var $and = $call31 & 15;
    var $cmp43 = ($and | 0) == 0;
    if ($cmp43) {
      var $i_1 = $add42;
      label = 16;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $call47 = _getbithuff($and, 0);
    var $sub48 = $and - 1 | 0;
    var $shl = 1 << $sub48;
    var $and49 = $call47 & $shl;
    var $cmp50 = ($and49 | 0) == 0;
    if ($cmp50) {
      label = 13;
      break;
    } else {
      var $diff_0 = $call47;
      label = 14;
      break;
    }
   case 13:
    var $shl53_neg = -1 << $and;
    var $sub54_neg = $shl53_neg + 1 | 0;
    var $sub55 = $sub54_neg + $call47 | 0;
    var $diff_0 = $sub55;
    label = 14;
    break;
   case 14:
    var $diff_0;
    var $cmp57 = ($add42 | 0) < 64;
    if ($cmp57) {
      label = 15;
      break;
    } else {
      var $i_1 = $add42;
      label = 16;
      break;
    }
   case 15:
    var $arrayidx60 = $diffbuf + ($add42 << 2) | 0;
    HEAP32[$arrayidx60 >> 2] = $diff_0;
    var $i_1 = $add42;
    label = 16;
    break;
   case 16:
    var $i_1;
    var $inc = $i_1 + 1 | 0;
    var $cmp21 = ($inc | 0) < 64;
    if ($cmp21) {
      var $i_045 = $inc;
      label = 9;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    var $11 = HEAP32[$arrayidx62 >> 2];
    var $add63 = $11 + $carry_150 | 0;
    HEAP32[$arrayidx62 >> 2] = $add63;
    var $shl82 = $block_049 << 6;
    var $add83 = $shl82 + $mul8 | 0;
    var $i_246 = 0;
    var $pnum_247 = $pnum_151;
    label = 18;
    break;
   case 18:
    var $pnum_247;
    var $i_246;
    var $inc69 = $pnum_247 + 1 | 0;
    var $12 = HEAP16[5245028 >> 1];
    var $conv70 = $12 & 65535;
    var $rem = ($pnum_247 | 0) % ($conv70 | 0);
    var $cmp71 = ($rem | 0) == 0;
    if ($cmp71) {
      label = 19;
      break;
    } else {
      label = 20;
      break;
    }
   case 19:
    HEAP32[$arrayidx74 >> 2] = 512;
    HEAP32[$arrayidx75 >> 2] = 512;
    label = 20;
    break;
   case 20:
    var $arrayidx77 = $diffbuf + ($i_246 << 2) | 0;
    var $13 = HEAP32[$arrayidx77 >> 2];
    var $and78 = $i_246 & 1;
    var $arrayidx79 = $base + ($and78 << 2) | 0;
    var $14 = HEAP32[$arrayidx79 >> 2];
    var $add80 = $14 + $13 | 0;
    HEAP32[$arrayidx79 >> 2] = $add80;
    var $conv81 = $add80 & 65535;
    var $add_ptr_sum = $add83 + $i_246 | 0;
    var $arrayidx84 = $6 + ($add_ptr_sum << 1) | 0;
    HEAP16[$arrayidx84 >> 1] = $conv81;
    var $shr8642 = $add80 & 64512;
    var $tobool87 = ($shr8642 | 0) == 0;
    if ($tobool87) {
      label = 22;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    _derror();
    label = 22;
    break;
   case 22:
    var $inc91 = $i_246 + 1 | 0;
    var $exitcond = ($inc91 | 0) == 64;
    if ($exitcond) {
      label = 23;
      break;
    } else {
      var $i_246 = $inc91;
      var $pnum_247 = $inc69;
      label = 18;
      break;
    }
   case 23:
    var $15 = $pnum_151 + 64 | 0;
    var $inc94 = $block_049 + 1 | 0;
    var $exitcond68 = ($inc94 | 0) == ($shr | 0);
    if ($exitcond68) {
      label = 24;
      break;
    } else {
      var $block_049 = $inc94;
      var $carry_150 = $add63;
      var $pnum_151 = $15;
      label = 8;
      break;
    }
   case 24:
    var $16 = $pnum_065 + $8 | 0;
    var $carry_1_lcssa = $add63;
    var $pnum_1_lcssa = $16;
    label = 25;
    break;
   case 25:
    var $pnum_1_lcssa;
    var $carry_1_lcssa;
    if ($tobool) {
      label = 26;
      break;
    } else {
      label = 29;
      break;
    }
   case 26:
    var $17 = HEAP32[5264116 >> 2];
    var $call98 = _ftell($17);
    var $18 = HEAP32[5264116 >> 2];
    var $19 = HEAP16[5245028 >> 1];
    var $conv99 = $19 & 65535;
    var $mul100 = $conv99 * $row_063 & -1;
    var $div101 = ($mul100 | 0) / 4 & -1;
    var $add102 = $div101 + 26 | 0;
    var $call103 = _fseek($18, $add102, 0);
    var $20 = HEAP16[5245028 >> 1];
    var $cmp10757 = $20 << 16 >> 16 == 0;
    var $21 = HEAP32[5264116 >> 2];
    if ($cmp10757) {
      var $_lcssa = $21;
      label = 28;
      break;
    } else {
      var $i_358 = 0;
      var $prow_059 = $add_ptr;
      var $22 = $21;
      label = 27;
      break;
    }
   case 27:
    var $22;
    var $prow_059;
    var $i_358;
    var $call110 = _fgetc($22);
    var $23 = HEAP16[$prow_059 >> 1];
    var $conv115 = $23 & 65535;
    var $shl116 = $conv115 << 2;
    var $and118 = $call110 & 3;
    var $add119 = $shl116 | $and118;
    var $24 = HEAP16[5245028 >> 1];
    var $cmp121 = $24 << 16 >> 16 == 2672;
    var $cmp124 = $add119 >>> 0 < 512;
    var $or_cond43 = $cmp121 & $cmp124;
    var $add127 = $add119 + 2 | 0;
    var $val_0 = $or_cond43 ? $add127 : $add119;
    var $conv129 = $val_0 & 65535;
    HEAP16[$prow_059 >> 1] = $conv129;
    var $incdec_ptr = $prow_059 + 2 | 0;
    var $25 = HEAP16[$incdec_ptr >> 1];
    var $conv115_1 = $25 & 65535;
    var $shl116_1 = $conv115_1 << 2;
    var $shr117_170 = $call110 >>> 2;
    var $and118_1 = $shr117_170 & 3;
    var $add119_1 = $shl116_1 | $and118_1;
    var $cmp124_1 = $add119_1 >>> 0 < 512;
    var $or_cond43_1 = $cmp121 & $cmp124_1;
    var $add127_1 = $add119_1 + 2 | 0;
    var $val_0_1 = $or_cond43_1 ? $add127_1 : $add119_1;
    var $conv129_1 = $val_0_1 & 65535;
    HEAP16[$incdec_ptr >> 1] = $conv129_1;
    var $incdec_ptr_1 = $prow_059 + 4 | 0;
    var $26 = HEAP16[$incdec_ptr_1 >> 1];
    var $conv115_2 = $26 & 65535;
    var $shl116_2 = $conv115_2 << 2;
    var $shr117_271 = $call110 >>> 4;
    var $and118_2 = $shr117_271 & 3;
    var $add119_2 = $shl116_2 | $and118_2;
    var $cmp124_2 = $add119_2 >>> 0 < 512;
    var $or_cond43_2 = $cmp121 & $cmp124_2;
    var $add127_2 = $add119_2 + 2 | 0;
    var $val_0_2 = $or_cond43_2 ? $add127_2 : $add119_2;
    var $conv129_2 = $val_0_2 & 65535;
    HEAP16[$incdec_ptr_1 >> 1] = $conv129_2;
    var $incdec_ptr_2 = $prow_059 + 6 | 0;
    var $27 = HEAP16[$incdec_ptr_2 >> 1];
    var $conv115_3 = $27 & 65535;
    var $shl116_3 = $conv115_3 << 2;
    var $shr117_372 = $call110 >>> 6;
    var $and118_3 = $shr117_372 & 3;
    var $add119_3 = $shl116_3 | $and118_3;
    var $cmp124_3 = $add119_3 >>> 0 < 512;
    var $or_cond43_3 = $cmp121 & $cmp124_3;
    var $add127_3 = $add119_3 + 2 | 0;
    var $val_0_3 = $or_cond43_3 ? $add127_3 : $add119_3;
    var $conv129_3 = $val_0_3 & 65535;
    HEAP16[$incdec_ptr_2 >> 1] = $conv129_3;
    var $scevgep = $prow_059 + 8 | 0;
    var $inc134 = $i_358 + 1 | 0;
    var $conv105 = $24 & 65535;
    var $mul106 = $conv105 << 1;
    var $cmp107 = ($inc134 | 0) < ($mul106 | 0);
    var $28 = HEAP32[5264116 >> 2];
    if ($cmp107) {
      var $i_358 = $inc134;
      var $prow_059 = $scevgep;
      var $22 = $28;
      label = 27;
      break;
    } else {
      var $_lcssa = $28;
      label = 28;
      break;
    }
   case 28:
    var $_lcssa;
    var $call136 = _fseek($_lcssa, $call98, 0);
    label = 29;
    break;
   case 29:
    var $add139 = $row_063 + 8 | 0;
    var $29 = HEAP16[5245036 >> 1];
    var $conv5 = $29 & 65535;
    var $cmp = ($add139 | 0) < ($conv5 | 0);
    if ($cmp) {
      var $row_063 = $add139;
      var $carry_064 = $carry_1_lcssa;
      var $pnum_065 = $pnum_1_lcssa;
      var $conv566 = $conv5;
      label = 6;
      break;
    } else {
      label = 30;
      break;
    }
   case 30:
    var $30 = HEAP32[$arraydecay >> 2];
    var $31 = $30;
    _free($31);
    var $arrayidx145_1 = $huff + 4 | 0;
    var $32 = HEAP32[$arrayidx145_1 >> 2];
    var $33 = $32;
    _free($33);
    STACKTOP = __stackBase__;
    return;
  }
}
_canon_load_raw["X"] = 1;
function _ljpeg_start($jh, $info_only) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 65540 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $data = __stackBase__;
    var $dp = __stackBase__ + 65536;
    var $0 = $jh;
    for (var $$dest = $0 >> 2, $$stop = $$dest + 24; $$dest < $$stop; $$dest++) {
      HEAP32[$$dest] = 0;
    }
    var $restart = $jh + 24 | 0;
    HEAP32[$restart >> 2] = 2147483647;
    var $arraydecay = $data | 0;
    var $1 = HEAP32[5264116 >> 2];
    var $call = _fread($arraydecay, 2, 1, $1);
    var $arrayidx = $data + 1 | 0;
    var $2 = HEAP8[$arrayidx];
    var $cmp = $2 << 24 >> 24 == -40;
    if ($cmp) {
      label = 3;
      break;
    } else {
      var $retval_0 = 0;
      label = 26;
      break;
    }
   case 3:
    var $arrayidx8 = $data + 2 | 0;
    var $arrayidx11 = $data + 3 | 0;
    var $arrayidx20 = $data + 7 | 0;
    var $sraw = $jh + 16 | 0;
    var $bits = $jh | 0;
    var $high = $jh + 4 | 0;
    var $arrayidx38 = $data + 4 | 0;
    var $wide = $jh + 8 | 0;
    var $arrayidx41 = $data + 5 | 0;
    var $clrs = $jh + 12 | 0;
    var $tobool50 = ($info_only | 0) == 0;
    label = 4;
    break;
   case 4:
    var $3 = HEAP32[5264116 >> 2];
    var $call3 = _fread($arraydecay, 2, 2, $3);
    var $4 = HEAP8[$arraydecay];
    var $conv5 = $4 & 255;
    var $shl = $conv5 << 8;
    var $5 = HEAP8[$arrayidx];
    var $conv7 = $5 & 255;
    var $or = $shl | $conv7;
    var $6 = HEAP8[$arrayidx8];
    var $conv9 = $6 & 255;
    var $shl10 = $conv9 << 8;
    var $7 = HEAP8[$arrayidx11];
    var $conv12 = $7 & 255;
    var $or13 = $shl10 | $conv12;
    var $sub = $or13 - 2 | 0;
    var $cmp14 = $or >>> 0 < 65281;
    if ($cmp14) {
      var $retval_0 = 0;
      label = 26;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $8 = HEAP32[5264116 >> 2];
    var $call19 = _fread($arraydecay, 1, $sub, $8);
    if (($or | 0) == 65472) {
      label = 6;
      break;
    } else if (($or | 0) == 65475) {
      label = 7;
      break;
    } else if (($or | 0) == 65476) {
      label = 10;
      break;
    } else if (($or | 0) == 65498) {
      label = 14;
      break;
    } else if (($or | 0) == 65501) {
      label = 15;
      break;
    } else {
      label = 4;
      break;
    }
   case 6:
    var $_pre = HEAP32[$sraw >> 2];
    var $10 = $_pre;
    label = 8;
    break;
   case 7:
    var $9 = HEAP8[$arrayidx20];
    var $conv21 = $9 & 255;
    var $shr44 = $conv21 >>> 4;
    var $and = $conv21 & 15;
    var $mul = $shr44 * $and & -1;
    var $sub24 = $mul + 3 | 0;
    var $and25 = $sub24 & 3;
    HEAP32[$sraw >> 2] = $and25;
    var $10 = $and25;
    label = 8;
    break;
   case 8:
    var $10;
    var $11 = HEAP8[$arraydecay];
    var $conv28 = $11 & 255;
    HEAP32[$bits >> 2] = $conv28;
    var $12 = HEAP8[$arrayidx];
    var $conv30 = $12 & 255;
    var $shl31 = $conv30 << 8;
    var $13 = HEAP8[$arrayidx8];
    var $conv33 = $13 & 255;
    var $or34 = $shl31 | $conv33;
    HEAP32[$high >> 2] = $or34;
    var $14 = HEAP8[$arrayidx11];
    var $conv36 = $14 & 255;
    var $shl37 = $conv36 << 8;
    var $15 = HEAP8[$arrayidx38];
    var $conv39 = $15 & 255;
    var $or40 = $shl37 | $conv39;
    HEAP32[$wide >> 2] = $or40;
    var $16 = HEAP8[$arrayidx41];
    var $conv42 = $16 & 255;
    var $add = $conv42 + $10 | 0;
    HEAP32[$clrs >> 2] = $add;
    var $cmp44 = ($sub | 0) != 9;
    var $17 = HEAP32[5427976 >> 2];
    var $tobool = ($17 | 0) != 0;
    var $or_cond = $cmp44 | $tobool;
    if ($or_cond) {
      label = 16;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $18 = HEAP32[5264116 >> 2];
    var $call47 = _fgetc($18);
    label = 16;
    break;
   case 10:
    if ($tobool50) {
      label = 11;
      break;
    } else {
      label = 4;
      break;
    }
   case 11:
    HEAP32[$dp >> 2] = $arraydecay;
    var $add_ptr = $data + $sub | 0;
    var $cmp5552 = ($sub | 0) > 0;
    if ($cmp5552) {
      var $19 = $arraydecay;
      label = 12;
      break;
    } else {
      label = 16;
      break;
    }
   case 12:
    var $19;
    var $incdec_ptr = $19 + 1 | 0;
    HEAP32[$dp >> 2] = $incdec_ptr;
    var $20 = HEAP8[$19];
    var $conv57 = $20 & 255;
    var $cmp58 = ($20 & 255) < 4;
    if ($cmp58) {
      label = 13;
      break;
    } else {
      label = 16;
      break;
    }
   case 13:
    var $call60 = _make_decoder_ref($dp);
    var $arrayidx61 = $jh + 52 + ($conv57 << 2) | 0;
    HEAP32[$arrayidx61 >> 2] = $call60;
    var $arrayidx62 = $jh + 76 + ($conv57 << 2) | 0;
    HEAP32[$arrayidx62 >> 2] = $call60;
    var $21 = HEAP32[$dp >> 2];
    var $cmp55 = $21 >>> 0 < $add_ptr >>> 0;
    if ($cmp55) {
      var $19 = $21;
      label = 12;
      break;
    } else {
      label = 16;
      break;
    }
   case 14:
    var $22 = HEAP8[$arraydecay];
    var $conv65 = $22 & 255;
    var $mul66 = $conv65 << 1;
    var $add6743 = $mul66 | 1;
    var $arrayidx68 = $data + $add6743 | 0;
    var $23 = HEAP8[$arrayidx68];
    var $conv69 = $23 & 255;
    var $psv = $jh + 20 | 0;
    HEAP32[$psv >> 2] = $conv69;
    var $add73 = $mul66 + 3 | 0;
    var $arrayidx74 = $data + $add73 | 0;
    var $24 = HEAP8[$arrayidx74];
    var $conv75 = $24 & 255;
    var $and76 = $conv75 & 15;
    var $25 = HEAP32[$bits >> 2];
    var $sub78 = $25 - $and76 | 0;
    HEAP32[$bits >> 2] = $sub78;
    label = 17;
    break;
   case 15:
    var $26 = HEAP8[$arraydecay];
    var $conv81 = $26 & 255;
    var $shl82 = $conv81 << 8;
    var $27 = HEAP8[$arrayidx];
    var $conv84 = $27 & 255;
    var $or85 = $shl82 | $conv84;
    HEAP32[$restart >> 2] = $or85;
    label = 4;
    break;
   case 16:
    var $cmp87 = ($or | 0) == 65498;
    if ($cmp87) {
      label = 17;
      break;
    } else {
      label = 4;
      break;
    }
   case 17:
    if ($tobool50) {
      label = 18;
      break;
    } else {
      var $retval_0 = 1;
      label = 26;
      break;
    }
   case 18:
    var $arrayidx98 = $jh + 56 | 0;
    var $28 = HEAP32[$arrayidx98 >> 2];
    var $tobool99 = ($28 | 0) == 0;
    if ($tobool99) {
      label = 20;
      break;
    } else {
      var $29 = $28;
      label = 19;
      break;
    }
   case 19:
    var $29;
    var $arrayidx98_1 = $jh + 60 | 0;
    var $30 = HEAP32[$arrayidx98_1 >> 2];
    var $tobool99_1 = ($30 | 0) == 0;
    if ($tobool99_1) {
      label = 27;
      break;
    } else {
      var $37 = $30;
      label = 28;
      break;
    }
   case 20:
    var $arrayidx102 = $jh + 52 | 0;
    var $31 = HEAP32[$arrayidx102 >> 2];
    HEAP32[$arrayidx98 >> 2] = $31;
    var $29 = $31;
    label = 19;
    break;
   case 21:
    var $arrayidx129 = $jh + 52 | 0;
    var $c_249 = 1;
    label = 23;
    break;
   case 22:
    HEAP32[$arrayidx98_1 >> 2] = $29;
    HEAP32[$arrayidx98_2 >> 2] = $29;
    HEAP32[$arrayidx98_3 >> 2] = $29;
    HEAP32[$arrayidx98_4 >> 2] = $29;
    var $cmp12548 = ($43 | 0) > 0;
    if ($cmp12548) {
      label = 21;
      break;
    } else {
      label = 25;
      break;
    }
   case 23:
    var $c_249;
    var $32 = HEAP32[$arrayidx129 >> 2];
    var $arrayidx132 = $jh + 52 + ($c_249 << 2) | 0;
    HEAP32[$arrayidx132 >> 2] = $32;
    var $33 = HEAP32[$sraw >> 2];
    var $cmp125 = ($c_249 | 0) < ($33 | 0);
    if ($cmp125) {
      label = 24;
      break;
    } else {
      label = 25;
      break;
    }
   case 24:
    var $phitmp = $c_249 + 1 | 0;
    var $c_249 = $phitmp;
    label = 23;
    break;
   case 25:
    var $34 = HEAP32[$wide >> 2];
    var $35 = HEAP32[$clrs >> 2];
    var $mul139 = $35 * $34 & -1;
    var $call140 = _calloc($mul139, 4);
    var $36 = $call140;
    var $row = $jh + 92 | 0;
    HEAP32[$row >> 2] = $36;
    _merror($call140, 5580660);
    HEAP8[5242884] = 1;
    var $retval_0 = 1;
    label = 26;
    break;
   case 26:
    var $retval_0;
    STACKTOP = __stackBase__;
    return $retval_0;
   case 27:
    HEAP32[$arrayidx98_1 >> 2] = $29;
    var $37 = $29;
    label = 28;
    break;
   case 28:
    var $37;
    var $arrayidx98_2 = $jh + 64 | 0;
    var $38 = HEAP32[$arrayidx98_2 >> 2];
    var $tobool99_2 = ($38 | 0) == 0;
    if ($tobool99_2) {
      label = 29;
      break;
    } else {
      var $39 = $38;
      label = 30;
      break;
    }
   case 29:
    HEAP32[$arrayidx98_2 >> 2] = $37;
    var $39 = $37;
    label = 30;
    break;
   case 30:
    var $39;
    var $arrayidx98_3 = $jh + 68 | 0;
    var $40 = HEAP32[$arrayidx98_3 >> 2];
    var $tobool99_3 = ($40 | 0) == 0;
    if ($tobool99_3) {
      label = 31;
      break;
    } else {
      var $41 = $40;
      label = 32;
      break;
    }
   case 31:
    HEAP32[$arrayidx98_3 >> 2] = $39;
    var $41 = $39;
    label = 32;
    break;
   case 32:
    var $41;
    var $arrayidx98_4 = $jh + 72 | 0;
    var $42 = HEAP32[$arrayidx98_4 >> 2];
    var $tobool99_4 = ($42 | 0) == 0;
    if ($tobool99_4) {
      label = 33;
      break;
    } else {
      label = 34;
      break;
    }
   case 33:
    HEAP32[$arrayidx98_4 >> 2] = $41;
    label = 34;
    break;
   case 34:
    var $43 = HEAP32[$sraw >> 2];
    var $tobool109 = ($43 | 0) == 0;
    if ($tobool109) {
      label = 25;
      break;
    } else {
      label = 22;
      break;
    }
  }
}
_ljpeg_start["X"] = 1;
function _ljpeg_end($jh) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $arrayidx = $jh + 76 | 0;
    var $0 = HEAP32[$arrayidx >> 2];
    var $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $1 = $0;
    _free($1);
    label = 4;
    break;
   case 4:
    var $arrayidx_1 = $jh + 80 | 0;
    var $2 = HEAP32[$arrayidx_1 >> 2];
    var $tobool_1 = ($2 | 0) == 0;
    if ($tobool_1) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $3 = $2;
    _free($3);
    label = 6;
    break;
   case 6:
    var $arrayidx_2 = $jh + 84 | 0;
    var $4 = HEAP32[$arrayidx_2 >> 2];
    var $tobool_2 = ($4 | 0) == 0;
    if ($tobool_2) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $5 = $4;
    _free($5);
    label = 8;
    break;
   case 8:
    var $arrayidx_3 = $jh + 88 | 0;
    var $6 = HEAP32[$arrayidx_3 >> 2];
    var $tobool_3 = ($6 | 0) == 0;
    if ($tobool_3) {
      label = 10;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $7 = $6;
    _free($7);
    label = 10;
    break;
   case 10:
    var $row = $jh + 92 | 0;
    var $8 = HEAP32[$row >> 2];
    var $9 = $8;
    _free($9);
    return;
  }
}
function _ljpeg_diff($huff) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP16[$huff >> 1];
    var $conv = $0 & 65535;
    var $add_ptr = $huff + 2 | 0;
    var $call = _getbithuff($conv, $add_ptr);
    var $cmp = ($call | 0) == 16;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    var $1 = HEAP32[5427976 >> 2];
    var $tobool = ($1 | 0) == 0;
    var $cmp2 = $1 >>> 0 > 16842751;
    var $or_cond = $tobool | $cmp2;
    if ($or_cond) {
      var $retval_0 = -32768;
      label = 6;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $call4 = _getbithuff($call, 0);
    var $sub = $call - 1 | 0;
    var $shl = 1 << $sub;
    var $and = $call4 & $shl;
    var $cmp5 = ($and | 0) == 0;
    if ($cmp5) {
      label = 5;
      break;
    } else {
      var $retval_0 = $call4;
      label = 6;
      break;
    }
   case 5:
    var $shl8_neg = -1 << $call;
    var $sub9_neg = $shl8_neg + 1 | 0;
    var $sub10 = $sub9_neg + $call4 | 0;
    var $retval_0 = $sub10;
    label = 6;
    break;
   case 6:
    var $retval_0;
    return $retval_0;
  }
}
function _ljpeg_row($jrow, $jh) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $wide = $jh + 8 | 0;
    var $0 = HEAP32[$wide >> 2];
    var $mul = $0 * $jrow & -1;
    var $restart = $jh + 24 | 0;
    var $1 = HEAP32[$restart >> 2];
    var $rem = ($mul | 0) % ($1 | 0);
    var $cmp = ($rem | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      var $6 = $0;
      label = 9;
      break;
    }
   case 3:
    var $bits = $jh | 0;
    var $2 = HEAP32[$bits >> 2];
    var $sub = $2 - 1 | 0;
    var $shl = 1 << $sub;
    var $arrayidx = $jh + 28 | 0;
    HEAP32[$arrayidx >> 2] = $shl;
    var $arrayidx_1 = $jh + 32 | 0;
    HEAP32[$arrayidx_1 >> 2] = $shl;
    var $arrayidx_2 = $jh + 36 | 0;
    HEAP32[$arrayidx_2 >> 2] = $shl;
    var $arrayidx_3 = $jh + 40 | 0;
    HEAP32[$arrayidx_3 >> 2] = $shl;
    var $arrayidx_4 = $jh + 44 | 0;
    HEAP32[$arrayidx_4 >> 2] = $shl;
    var $arrayidx_5 = $jh + 48 | 0;
    HEAP32[$arrayidx_5 >> 2] = $shl;
    var $tobool = ($jrow | 0) == 0;
    if ($tobool) {
      label = 7;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $3 = HEAP32[5264116 >> 2];
    var $call = _fseek($3, -2, 1);
    var $mark_0 = 0;
    label = 5;
    break;
   case 5:
    var $mark_0;
    var $conv = $mark_0 << 8;
    var $shl3 = $conv & 16776960;
    var $4 = HEAP32[5264116 >> 2];
    var $call4 = _fgetc($4);
    var $add = $shl3 + $call4 | 0;
    var $cmp6 = ($call4 | 0) == -1;
    if ($cmp6) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $shr49 = $add & 65520;
    var $cmp9 = ($shr49 | 0) == 65488;
    if ($cmp9) {
      label = 7;
      break;
    } else {
      var $mark_0 = $add;
      label = 5;
      break;
    }
   case 7:
    var $call11 = _getbithuff(-1, 0);
    var $_pre = HEAP32[$wide >> 2];
    var $6 = $_pre;
    label = 9;
    break;
   case 8:
    var $and_1 = $and ^ 1;
    var $5 = -$and_1 | 0;
    var $mul21_1 = $mul19 & $5;
    var $add_ptr_1 = $7 + ($mul21_1 << 1) | 0;
    var $sraw = $jh + 16 | 0;
    var $bits118 = $jh | 0;
    var $tobool59 = ($jrow | 0) == 0;
    var $psv = $jh + 20 | 0;
    var $col_060 = 0;
    var $spred_062 = 0;
    var $row_sroa_0_0 = $add_ptr;
    var $row_sroa_1_0 = $add_ptr_1;
    var $11 = $8;
    var $10 = $6;
    label = 10;
    break;
   case 9:
    var $6;
    var $row17 = $jh + 92 | 0;
    var $7 = HEAP32[$row17 >> 2];
    var $clrs = $jh + 12 | 0;
    var $8 = HEAP32[$clrs >> 2];
    var $mul19 = $8 * $6 & -1;
    var $and = $jrow & 1;
    var $9 = -$and | 0;
    var $mul21 = $mul19 & $9;
    var $add_ptr = $7 + ($mul21 << 1) | 0;
    var $cmp2859 = ($6 | 0) > 0;
    if ($cmp2859) {
      label = 8;
      break;
    } else {
      label = 33;
      break;
    }
   case 10:
    var $10;
    var $11;
    var $row_sroa_1_0;
    var $row_sroa_0_0;
    var $spred_062;
    var $col_060;
    var $cmp3354 = ($11 | 0) > 0;
    if ($cmp3354) {
      label = 11;
      break;
    } else {
      var $spred_1_lcssa = $spred_062;
      var $row_sroa_0_1 = $row_sroa_0_0;
      var $row_sroa_1_1 = $row_sroa_1_0;
      var $38 = $11;
      var $37 = $10;
      label = 32;
      break;
    }
   case 11:
    var $tobool45 = ($col_060 | 0) == 0;
    var $or_cond50 = $tobool59 | $tobool45;
    var $c_255 = 0;
    var $spred_158 = $spred_062;
    var $13 = $row_sroa_0_0;
    var $12 = $row_sroa_1_0;
    label = 12;
    break;
   case 12:
    var $12;
    var $13;
    var $spred_158;
    var $c_255;
    var $arrayidx36 = $jh + 52 + ($c_255 << 2) | 0;
    var $14 = HEAP32[$arrayidx36 >> 2];
    var $call37 = _ljpeg_diff($14);
    var $15 = HEAP32[$sraw >> 2];
    var $tobool38 = ($15 | 0) == 0;
    var $cmp40 = ($c_255 | 0) > ($15 | 0);
    var $or_cond = $tobool38 | $cmp40;
    if ($or_cond) {
      label = 14;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $or = $c_255 | $col_060;
    var $tobool43 = ($or | 0) == 0;
    if ($tobool43) {
      label = 14;
      break;
    } else {
      var $pred_0 = $spred_158;
      label = 17;
      break;
    }
   case 14:
    if ($tobool45) {
      label = 16;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $16 = HEAP32[$clrs >> 2];
    var $sub48 = -$16 | 0;
    var $arrayidx50 = $13 + ($sub48 << 1) | 0;
    var $17 = HEAP16[$arrayidx50 >> 1];
    var $conv51 = $17 & 65535;
    var $pred_0 = $conv51;
    label = 17;
    break;
   case 16:
    var $arrayidx54 = $jh + 28 + ($c_255 << 2) | 0;
    var $18 = HEAP32[$arrayidx54 >> 2];
    var $add55 = $18 + $call37 | 0;
    HEAP32[$arrayidx54 >> 2] = $add55;
    var $pred_1 = $18;
    label = 26;
    break;
   case 17:
    var $pred_0;
    if ($or_cond50) {
      var $pred_1 = $pred_0;
      label = 26;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    var $19 = HEAP32[$psv >> 2];
    if (($19 | 0) == 2) {
      label = 19;
      break;
    } else if (($19 | 0) == 3) {
      label = 20;
      break;
    } else if (($19 | 0) == 4) {
      label = 21;
      break;
    } else if (($19 | 0) == 5) {
      label = 22;
      break;
    } else if (($19 | 0) == 6) {
      label = 23;
      break;
    } else if (($19 | 0) == 7) {
      label = 24;
      break;
    } else if (($19 | 0) == 1) {
      var $pred_1 = $pred_0;
      label = 26;
      break;
    } else {
      label = 25;
      break;
    }
   case 19:
    var $20 = HEAP16[$12 >> 1];
    var $conv66 = $20 & 65535;
    var $pred_1 = $conv66;
    label = 26;
    break;
   case 20:
    var $21 = HEAP32[$clrs >> 2];
    var $sub69 = -$21 | 0;
    var $arrayidx71 = $12 + ($sub69 << 1) | 0;
    var $22 = HEAP16[$arrayidx71 >> 1];
    var $conv72 = $22 & 65535;
    var $pred_1 = $conv72;
    label = 26;
    break;
   case 21:
    var $23 = HEAP16[$12 >> 1];
    var $conv76 = $23 & 65535;
    var $add77 = $conv76 + $pred_0 | 0;
    var $24 = HEAP32[$clrs >> 2];
    var $sub79 = -$24 | 0;
    var $arrayidx81 = $12 + ($sub79 << 1) | 0;
    var $25 = HEAP16[$arrayidx81 >> 1];
    var $conv82 = $25 & 65535;
    var $sub83 = $add77 - $conv82 | 0;
    var $pred_1 = $sub83;
    label = 26;
    break;
   case 22:
    var $26 = HEAP16[$12 >> 1];
    var $conv87 = $26 & 65535;
    var $27 = HEAP32[$clrs >> 2];
    var $sub89 = -$27 | 0;
    var $arrayidx91 = $12 + ($sub89 << 1) | 0;
    var $28 = HEAP16[$arrayidx91 >> 1];
    var $conv92 = $28 & 65535;
    var $sub93 = $conv87 - $conv92 | 0;
    var $shr94 = $sub93 >> 1;
    var $add95 = $shr94 + $pred_0 | 0;
    var $pred_1 = $add95;
    label = 26;
    break;
   case 23:
    var $29 = HEAP16[$12 >> 1];
    var $conv99 = $29 & 65535;
    var $30 = HEAP32[$clrs >> 2];
    var $sub101 = -$30 | 0;
    var $arrayidx103 = $12 + ($sub101 << 1) | 0;
    var $31 = HEAP16[$arrayidx103 >> 1];
    var $conv104 = $31 & 65535;
    var $sub105 = $pred_0 - $conv104 | 0;
    var $shr106 = $sub105 >> 1;
    var $add107 = $shr106 + $conv99 | 0;
    var $pred_1 = $add107;
    label = 26;
    break;
   case 24:
    var $32 = HEAP16[$12 >> 1];
    var $conv111 = $32 & 65535;
    var $add112 = $conv111 + $pred_0 | 0;
    var $shr113 = $add112 >> 1;
    var $pred_1 = $shr113;
    label = 26;
    break;
   case 25:
    var $pred_1 = 0;
    label = 26;
    break;
   case 26:
    var $pred_1;
    var $add115 = $pred_1 + $call37 | 0;
    var $conv116 = $add115 & 65535;
    HEAP16[$13 >> 1] = $conv116;
    var $conv117 = $add115 & 65535;
    var $33 = HEAP32[$bits118 >> 2];
    var $shr119 = $conv117 >>> ($33 >>> 0);
    var $tobool120 = ($shr119 | 0) == 0;
    if ($tobool120) {
      label = 28;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    _derror();
    label = 28;
    break;
   case 28:
    var $34 = HEAP32[$sraw >> 2];
    var $cmp124 = ($c_255 | 0) > ($34 | 0);
    if ($cmp124) {
      var $spred_2 = $spred_158;
      label = 30;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    var $35 = HEAP16[$13 >> 1];
    var $conv128 = $35 & 65535;
    var $spred_2 = $conv128;
    label = 30;
    break;
   case 30:
    var $spred_2;
    var $incdec_ptr = $13 + 2 | 0;
    var $incdec_ptr132 = $12 + 2 | 0;
    var $inc134 = $c_255 + 1 | 0;
    var $36 = HEAP32[$clrs >> 2];
    var $cmp33 = ($inc134 | 0) < ($36 | 0);
    if ($cmp33) {
      var $c_255 = $inc134;
      var $spred_158 = $spred_2;
      var $13 = $incdec_ptr;
      var $12 = $incdec_ptr132;
      label = 12;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    var $_pre1 = HEAP32[$wide >> 2];
    var $spred_1_lcssa = $spred_2;
    var $row_sroa_0_1 = $incdec_ptr;
    var $row_sroa_1_1 = $incdec_ptr132;
    var $38 = $36;
    var $37 = $_pre1;
    label = 32;
    break;
   case 32:
    var $37;
    var $38;
    var $row_sroa_1_1;
    var $row_sroa_0_1;
    var $spred_1_lcssa;
    var $inc137 = $col_060 + 1 | 0;
    var $cmp28 = ($inc137 | 0) < ($37 | 0);
    if ($cmp28) {
      var $col_060 = $inc137;
      var $spred_062 = $spred_1_lcssa;
      var $row_sroa_0_0 = $row_sroa_0_1;
      var $row_sroa_1_0 = $row_sroa_1_1;
      var $11 = $38;
      var $10 = $37;
      label = 10;
      break;
    } else {
      label = 33;
      break;
    }
   case 33:
    return $add_ptr;
  }
}
_ljpeg_row["X"] = 1;
function _lossless_jpeg_load_raw() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 96 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $jh = __stackBase__;
    var $call = _ljpeg_start($jh, 0);
    var $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 21;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $wide = $jh + 8 | 0;
    var $0 = HEAP32[$wide >> 2];
    var $clrs = $jh + 12 | 0;
    var $1 = HEAP32[$clrs >> 2];
    var $mul = $1 * $0 & -1;
    var $high = $jh + 4 | 0;
    var $2 = HEAP32[$high >> 2];
    var $cmp28 = ($2 | 0) > 0;
    if ($cmp28) {
      label = 4;
      break;
    } else {
      label = 20;
      break;
    }
   case 4:
    var $cmp1022 = ($mul | 0) > 0;
    var $jrow_029 = 0;
    var $row_030 = 0;
    var $col_031 = 0;
    label = 5;
    break;
   case 5:
    var $col_031;
    var $row_030;
    var $jrow_029;
    var $call1 = _ljpeg_row($jrow_029, $jh);
    var $3 = HEAP32[5263696 >> 2];
    var $and = $3 & 1;
    var $tobool2 = ($and | 0) == 0;
    if ($tobool2) {
      var $row_2_ph = $row_030;
      label = 9;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $and4 = $jrow_029 & 1;
    var $tobool5 = ($and4 | 0) == 0;
    if ($tobool5) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $4 = HEAP16[5398712 >> 1];
    var $conv = $4 & 65535;
    var $sub = $conv - 1 | 0;
    var $div_neg = ($jrow_029 | 0) / -2 & -1;
    var $sub6 = $sub + $div_neg | 0;
    var $row_2_ph = $sub6;
    label = 9;
    break;
   case 8:
    var $div7 = ($jrow_029 | 0) / 2 & -1;
    var $row_2_ph = $div7;
    label = 9;
    break;
   case 9:
    var $row_2_ph;
    if ($cmp1022) {
      label = 10;
      break;
    } else {
      var $row_2_lcssa = $row_2_ph;
      var $col_1_lcssa = $col_031;
      label = 19;
      break;
    }
   case 10:
    var $mul16 = $jrow_029 * $mul & -1;
    var $jcol_023 = 0;
    var $row_224 = $row_2_ph;
    var $col_125 = $col_031;
    var $rp_026 = $call1;
    label = 11;
    break;
   case 11:
    var $rp_026;
    var $col_125;
    var $row_224;
    var $jcol_023;
    var $incdec_ptr = $rp_026 + 2 | 0;
    var $5 = HEAP16[$rp_026 >> 1];
    var $idxprom = $5 & 65535;
    var $arrayidx = 5428500 + ($idxprom << 1) | 0;
    var $6 = HEAP16[$arrayidx >> 1];
    var $7 = HEAP16[5560200 >> 1];
    var $tobool14 = $7 << 16 >> 16 == 0;
    if ($tobool14) {
      var $col_2 = $col_125;
      var $row_3 = $row_224;
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $add = $jcol_023 + $mul16 | 0;
    var $8 = HEAP16[5560202 >> 1];
    var $conv17 = $8 & 65535;
    var $9 = HEAP32[$high >> 2];
    var $mul19 = $conv17 * $9 & -1;
    var $div20 = ($add | 0) / ($mul19 | 0) & -1;
    var $conv21 = $7 & 65535;
    var $cmp22 = ($div20 | 0) >= ($conv21 | 0);
    var $conv21_div20 = $cmp22 ? $conv21 : $div20;
    var $mul30 = $conv21_div20 * $mul19 & -1;
    var $sub31 = $add - $mul30 | 0;
    var $add32 = $cmp22 ? 2 : 1;
    var $arrayidx33 = 5560200 + ($add32 << 1) | 0;
    var $10 = HEAP16[$arrayidx33 >> 1];
    var $conv34 = $10 & 65535;
    var $div35 = ($sub31 | 0) / ($conv34 | 0) & -1;
    var $rem = ($sub31 | 0) % ($conv34 | 0);
    var $mul40 = $conv21_div20 * $conv17 & -1;
    var $add41 = $rem + $mul40 | 0;
    var $col_2 = $add41;
    var $row_3 = $div35;
    label = 13;
    break;
   case 13:
    var $row_3;
    var $col_2;
    var $11 = HEAP16[5245028 >> 1];
    var $conv43 = $11 & 65535;
    var $cmp44 = $11 << 16 >> 16 == 3984;
    if ($cmp44) {
      label = 14;
      break;
    } else {
      var $col_3 = $col_2;
      var $row_4 = $row_3;
      label = 16;
      break;
    }
   case 14:
    var $sub46 = $col_2 - 2 | 0;
    var $cmp47 = ($sub46 | 0) < 0;
    if ($cmp47) {
      label = 15;
      break;
    } else {
      var $col_3 = $sub46;
      var $row_4 = $row_3;
      label = 16;
      break;
    }
   case 15:
    var $dec = $row_3 - 1 | 0;
    var $add51 = $conv43 + $sub46 | 0;
    var $col_3 = $add51;
    var $row_4 = $dec;
    label = 16;
    break;
   case 16:
    var $row_4;
    var $col_3;
    var $cmp53 = ($row_4 | 0) > -1;
    if ($cmp53) {
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 17:
    var $mul58 = $conv43 * $row_4 & -1;
    var $add59 = $mul58 + $col_3 | 0;
    var $12 = HEAP32[5245032 >> 2];
    var $arrayidx60 = $12 + ($add59 << 1) | 0;
    HEAP16[$arrayidx60 >> 1] = $6;
    label = 18;
    break;
   case 18:
    var $inc = $col_3 + 1 | 0;
    var $cmp63 = ($inc | 0) < ($conv43 | 0);
    var $13 = $cmp63 & 1;
    var $inc66 = $13 ^ 1;
    var $row_4_inc66 = $inc66 + $row_4 | 0;
    var $inc_ = $cmp63 ? $inc : 0;
    var $inc68 = $jcol_023 + 1 | 0;
    var $exitcond = ($inc68 | 0) == ($mul | 0);
    if ($exitcond) {
      var $row_2_lcssa = $row_4_inc66;
      var $col_1_lcssa = $inc_;
      label = 19;
      break;
    } else {
      var $jcol_023 = $inc68;
      var $row_224 = $row_4_inc66;
      var $col_125 = $inc_;
      var $rp_026 = $incdec_ptr;
      label = 11;
      break;
    }
   case 19:
    var $col_1_lcssa;
    var $row_2_lcssa;
    var $inc70 = $jrow_029 + 1 | 0;
    var $14 = HEAP32[$high >> 2];
    var $cmp = ($inc70 | 0) < ($14 | 0);
    if ($cmp) {
      var $jrow_029 = $inc70;
      var $row_030 = $row_2_lcssa;
      var $col_031 = $col_1_lcssa;
      label = 5;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    _ljpeg_end($jh);
    label = 21;
    break;
   case 21:
    STACKTOP = __stackBase__;
    return;
  }
}
_lossless_jpeg_load_raw["X"] = 1;
function _adobe_copy_pixel($row, $col, $rp) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5264100 >> 2];
    var $cmp = ($0 | 0) == 2;
    var $1 = HEAP32[5244920 >> 2];
    var $tobool = ($1 | 0) != 0;
    var $or_cond = $cmp & $tobool;
    if ($or_cond) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    var $2 = HEAP32[$rp >> 2];
    var $incdec_ptr = $2 + 2 | 0;
    HEAP32[$rp >> 2] = $incdec_ptr;
    label = 4;
    break;
   case 4:
    var $3 = HEAP32[5245032 >> 2];
    var $tobool1 = ($3 | 0) == 0;
    if ($tobool1) {
      label = 9;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $4 = HEAP16[5245036 >> 1];
    var $conv = $4 & 65535;
    var $cmp3 = $conv >>> 0 > $row >>> 0;
    if ($cmp3) {
      label = 6;
      break;
    } else {
      label = 8;
      break;
    }
   case 6:
    var $5 = HEAP16[5245028 >> 1];
    var $conv6 = $5 & 65535;
    var $cmp7 = $conv6 >>> 0 > $col >>> 0;
    if ($cmp7) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    var $6 = HEAP32[$rp >> 2];
    var $7 = HEAP16[$6 >> 1];
    var $idxprom = $7 & 65535;
    var $arrayidx = 5428500 + ($idxprom << 1) | 0;
    var $8 = HEAP16[$arrayidx >> 1];
    var $mul = $conv6 * $row & -1;
    var $add = $mul + $col | 0;
    var $arrayidx11 = $3 + ($add << 1) | 0;
    HEAP16[$arrayidx11 >> 1] = $8;
    label = 8;
    break;
   case 8:
    var $9 = HEAP32[$rp >> 2];
    var $add_ptr = $9 + ($0 << 1) | 0;
    var $storemerge = $add_ptr;
    label = 15;
    break;
   case 9:
    var $10 = HEAP16[5398712 >> 1];
    var $conv13 = $10 & 65535;
    var $cmp14 = $conv13 >>> 0 > $row >>> 0;
    if ($cmp14) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $_pre1 = HEAP32[5243580 >> 2];
    var $16 = $_pre1;
    label = 14;
    break;
   case 11:
    var $11 = HEAP16[5242964 >> 1];
    var $conv17 = $11 & 65535;
    var $cmp18 = $conv17 >>> 0 <= $col >>> 0;
    var $12 = HEAP32[5243580 >> 2];
    var $cmp2115 = ($12 | 0) == 0;
    var $or_cond17 = $cmp18 | $cmp2115;
    if ($or_cond17) {
      var $16 = $12;
      label = 14;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $_pre = HEAP32[5264108 >> 2];
    var $c_016 = 0;
    label = 13;
    break;
   case 13:
    var $c_016;
    var $13 = HEAP32[$rp >> 2];
    var $arrayidx23 = $13 + ($c_016 << 1) | 0;
    var $14 = HEAP16[$arrayidx23 >> 1];
    var $idxprom24 = $14 & 65535;
    var $arrayidx25 = 5428500 + ($idxprom24 << 1) | 0;
    var $15 = HEAP16[$arrayidx25 >> 1];
    var $mul27 = $conv17 * $row & -1;
    var $add28 = $mul27 + $col | 0;
    var $arrayidx30 = $_pre + ($add28 << 3) + ($c_016 << 1) | 0;
    HEAP16[$arrayidx30 >> 1] = $15;
    var $inc = $c_016 + 1 | 0;
    var $cmp21 = $inc >>> 0 < $12 >>> 0;
    if ($cmp21) {
      var $c_016 = $inc;
      label = 13;
      break;
    } else {
      var $16 = $12;
      label = 14;
      break;
    }
   case 14:
    var $16;
    var $17 = HEAP32[$rp >> 2];
    var $add_ptr32 = $17 + ($16 << 1) | 0;
    var $storemerge = $add_ptr32;
    label = 15;
    break;
   case 15:
    var $storemerge;
    var $incdec_ptr39 = $storemerge - 2 | 0;
    var $storemerge2 = $or_cond ? $incdec_ptr39 : $storemerge;
    HEAP32[$rp >> 2] = $storemerge2;
    return;
  }
}
_adobe_copy_pixel["X"] = 1;
function _canon_sraw_load_raw() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 108 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $jh = __stackBase__;
    var $v = __stackBase__ + 96;
    var $0 = $v;
    HEAP32[$0 >> 2] = 0;
    HEAP32[$0 + 4 >> 2] = 0;
    HEAP32[$0 + 8 >> 2] = 0;
    var $call = _ljpeg_start($jh, 0);
    var $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 51;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $wide = $jh + 8 | 0;
    var $1 = HEAP32[$wide >> 2];
    var $shr = $1 >> 1;
    HEAP32[$wide >> 2] = $shr;
    var $clrs = $jh + 12 | 0;
    var $2 = HEAP32[$clrs >> 2];
    var $mul = $shr * $2 & -1;
    var $3 = HEAP16[5560200 >> 1];
    var $slice_0155 = 1;
    var $ecol_0156 = 0;
    var $jrow_0157 = 0;
    var $jcol_0158 = 0;
    var $rp_0159 = 0;
    var $5 = $3;
    var $4 = $2;
    label = 4;
    break;
   case 4:
    var $4;
    var $5;
    var $rp_0159;
    var $jcol_0158;
    var $jrow_0157;
    var $ecol_0156;
    var $slice_0155;
    var $6 = HEAP16[5560202 >> 1];
    var $conv2 = $6 & 65535;
    var $mul3 = $conv2 << 1;
    var $div = ($mul3 | 0) / ($4 | 0) & -1;
    var $add = $div + $ecol_0156 | 0;
    var $tobool5 = $5 << 16 >> 16 == 0;
    var $_pre9 = HEAP16[5245028 >> 1];
    if ($tobool5) {
      var $7 = $_pre9;
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $conv6 = $_pre9 & 65535;
    var $sub = $conv6 - 1 | 0;
    var $cmp7 = ($add | 0) > ($sub | 0);
    if ($cmp7) {
      var $7 = $_pre9;
      label = 6;
      break;
    } else {
      var $ecol_1 = $add;
      label = 7;
      break;
    }
   case 6:
    var $7;
    var $conv10 = $7 & 65535;
    var $and = $conv10 & 65534;
    var $ecol_1 = $and;
    label = 7;
    break;
   case 7:
    var $ecol_1;
    var $8 = HEAP16[5398712 >> 1];
    var $cmp14146 = $8 << 16 >> 16 == 0;
    if ($cmp14146) {
      var $jrow_1_lcssa = $jrow_0157;
      var $jcol_1_lcssa = $jcol_0158;
      var $rp_1_lcssa = $rp_0159;
      var $26 = $4;
      var $25 = $5;
      label = 20;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $cmp20136 = ($ecol_0156 | 0) < ($ecol_1 | 0);
    var $_pre3 = HEAP16[5242964 >> 1];
    var $row_0147 = 0;
    var $jrow_1148 = $jrow_0157;
    var $jcol_1149 = $jcol_0158;
    var $rp_1150 = $rp_0159;
    var $11 = $_pre3;
    var $10 = $4;
    var $9 = $8;
    label = 9;
    break;
   case 9:
    var $9;
    var $10;
    var $11;
    var $rp_1150;
    var $jcol_1149;
    var $jrow_1148;
    var $row_0147;
    var $12 = HEAP32[5264108 >> 2];
    var $conv17 = $11 & 65535;
    var $mul18 = $conv17 * $row_0147 & -1;
    if ($cmp20136) {
      var $col_0137 = $ecol_0156;
      var $jrow_2139 = $jrow_1148;
      var $jcol_2140 = $jcol_1149;
      var $rp_2141 = $rp_1150;
      var $13 = $11;
      label = 10;
      break;
    } else {
      var $jrow_2_lcssa = $jrow_1148;
      var $jcol_2_lcssa = $jcol_1149;
      var $rp_2_lcssa = $rp_1150;
      var $24 = $11;
      var $23 = $10;
      var $22 = $9;
      label = 18;
      break;
    }
   case 10:
    var $13;
    var $rp_2141;
    var $jcol_2140;
    var $jrow_2139;
    var $col_0137;
    var $rem = ($jcol_2140 | 0) % ($mul | 0);
    var $cmp23 = ($rem | 0) == 0;
    if ($cmp23) {
      label = 11;
      break;
    } else {
      var $rp_3 = $rp_2141;
      var $jrow_3 = $jrow_2139;
      var $14 = $13;
      label = 12;
      break;
    }
   case 11:
    var $inc = $jrow_2139 + 1 | 0;
    var $call26 = _ljpeg_row($jrow_2139, $jh);
    var $_pre4 = HEAP16[5242964 >> 1];
    var $rp_3 = $call26;
    var $jrow_3 = $inc;
    var $14 = $_pre4;
    label = 12;
    break;
   case 12:
    var $14;
    var $jrow_3;
    var $rp_3;
    var $conv28 = $14 & 65535;
    var $cmp29 = ($col_0137 | 0) < ($conv28 | 0);
    if ($cmp29) {
      label = 13;
      break;
    } else {
      label = 16;
      break;
    }
   case 13:
    var $15 = HEAP32[$clrs >> 2];
    var $sub35132 = $15 - 2 | 0;
    var $cmp36133 = ($sub35132 | 0) > 0;
    var $add43 = $col_0137 + $mul18 | 0;
    if ($cmp36133) {
      var $c_0134 = 0;
      label = 14;
      break;
    } else {
      var $_lcssa = $15;
      var $add_ptr_sum_pre_phi = $add43;
      label = 15;
      break;
    }
   case 14:
    var $c_0134;
    var $add39 = $c_0134 + $rem | 0;
    var $arrayidx = $rp_3 + ($add39 << 1) | 0;
    var $16 = HEAP16[$arrayidx >> 1];
    var $shr40 = $c_0134 >> 1;
    var $mul42 = $conv28 * $shr40 & -1;
    var $and44 = $c_0134 & 1;
    var $add45 = $add43 + $and44 | 0;
    var $add_ptr_sum110 = $add45 + $mul42 | 0;
    var $arrayidx47 = $12 + ($add_ptr_sum110 << 3) | 0;
    HEAP16[$arrayidx47 >> 1] = $16;
    var $inc48 = $c_0134 + 1 | 0;
    var $17 = HEAP32[$clrs >> 2];
    var $sub35 = $17 - 2 | 0;
    var $cmp36 = ($inc48 | 0) < ($sub35 | 0);
    if ($cmp36) {
      var $c_0134 = $inc48;
      label = 14;
      break;
    } else {
      var $_lcssa = $17;
      var $add_ptr_sum_pre_phi = $add43;
      label = 15;
      break;
    }
   case 15:
    var $add_ptr_sum_pre_phi;
    var $_lcssa;
    var $add50 = $rem - 2 | 0;
    var $sub51 = $add50 + $_lcssa | 0;
    var $arrayidx52 = $rp_3 + ($sub51 << 1) | 0;
    var $18 = HEAP16[$arrayidx52 >> 1];
    var $sub54 = $18 - 16384 & 65535;
    var $arrayidx57 = $12 + ($add_ptr_sum_pre_phi << 3) + 2 | 0;
    HEAP16[$arrayidx57 >> 1] = $sub54;
    var $19 = HEAP32[$clrs >> 2];
    var $add59 = $rem - 1 | 0;
    var $sub60 = $add59 + $19 | 0;
    var $arrayidx61 = $rp_3 + ($sub60 << 1) | 0;
    var $20 = HEAP16[$arrayidx61 >> 1];
    var $sub63 = $20 - 16384 & 65535;
    var $arrayidx66 = $12 + ($add_ptr_sum_pre_phi << 3) + 4 | 0;
    HEAP16[$arrayidx66 >> 1] = $sub63;
    label = 16;
    break;
   case 16:
    var $add68 = $col_0137 + 2 | 0;
    var $21 = HEAP32[$clrs >> 2];
    var $add70 = $21 + $rem | 0;
    var $cmp20 = ($add68 | 0) < ($ecol_1 | 0);
    if ($cmp20) {
      var $col_0137 = $add68;
      var $jrow_2139 = $jrow_3;
      var $jcol_2140 = $add70;
      var $rp_2141 = $rp_3;
      var $13 = $14;
      label = 10;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    var $_pre8 = HEAP16[5398712 >> 1];
    var $jrow_2_lcssa = $jrow_3;
    var $jcol_2_lcssa = $add70;
    var $rp_2_lcssa = $rp_3;
    var $24 = $14;
    var $23 = $21;
    var $22 = $_pre8;
    label = 18;
    break;
   case 18:
    var $22;
    var $23;
    var $24;
    var $rp_2_lcssa;
    var $jcol_2_lcssa;
    var $jrow_2_lcssa;
    var $shr74 = $23 >> 1;
    var $sub75 = $row_0147 - 1 | 0;
    var $add76 = $sub75 + $shr74 | 0;
    var $conv13 = $22 & 65535;
    var $cmp14 = ($add76 | 0) < ($conv13 | 0);
    if ($cmp14) {
      var $row_0147 = $add76;
      var $jrow_1148 = $jrow_2_lcssa;
      var $jcol_1149 = $jcol_2_lcssa;
      var $rp_1150 = $rp_2_lcssa;
      var $11 = $24;
      var $10 = $23;
      var $9 = $22;
      label = 9;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $_pre = HEAP16[5560200 >> 1];
    var $jrow_1_lcssa = $jrow_2_lcssa;
    var $jcol_1_lcssa = $jcol_2_lcssa;
    var $rp_1_lcssa = $rp_2_lcssa;
    var $26 = $23;
    var $25 = $_pre;
    label = 20;
    break;
   case 20:
    var $25;
    var $26;
    var $rp_1_lcssa;
    var $jcol_1_lcssa;
    var $jrow_1_lcssa;
    var $conv = $25 & 65535;
    var $cmp = ($slice_0155 | 0) > ($conv | 0);
    if ($cmp) {
      var $cp_0 = 5263308;
      label = 22;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    var $phitmp10 = $slice_0155 + 1 | 0;
    var $slice_0155 = $phitmp10;
    var $ecol_0156 = $ecol_1;
    var $jrow_0157 = $jrow_1_lcssa;
    var $jcol_0158 = $jcol_1_lcssa;
    var $rp_0159 = $rp_1_lcssa;
    var $5 = $25;
    var $4 = $26;
    label = 4;
    break;
   case 22:
    var $cp_0;
    var $27 = HEAP8[$cp_0];
    var $tobool83 = $27 << 24 >> 24 == 0;
    if ($tobool83) {
      label = 24;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    var $conv82 = $27 << 24 >> 24;
    var $isdigittmp = $conv82 - 48 | 0;
    var $isdigit = $isdigittmp >>> 0 < 10;
    var $incdec_ptr = $cp_0 + 1 | 0;
    if ($isdigit) {
      label = 24;
      break;
    } else {
      var $cp_0 = $incdec_ptr;
      label = 22;
      break;
    }
   case 24:
    var $arraydecay = $v | 0;
    var $add_ptr91 = $v + 4 | 0;
    var $add_ptr93 = $v + 8 | 0;
    var $call94 = _sscanf($cp_0, 5579012, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $arraydecay, HEAP32[tempInt + 4 >> 2] = $add_ptr91, HEAP32[tempInt + 8 >> 2] = $add_ptr93, tempInt));
    var $sraw = $jh + 16 | 0;
    var $28 = HEAP32[5243560 >> 2];
    var $cmp103 = $28 >>> 0 > 2147484288;
    if ($cmp103) {
      label = 25;
      break;
    } else {
      label = 26;
      break;
    }
   case 25:
    var $_pre5 = HEAP32[$sraw >> 2];
    var $33 = $_pre5;
    label = 27;
    break;
   case 26:
    var $29 = HEAP32[$arraydecay >> 2];
    var $30 = HEAP32[$add_ptr91 >> 2];
    var $mul96 = $29 * 1e3 & -1;
    var $31 = HEAP32[$sraw >> 2];
    var $add98 = $mul96 + $30 | 0;
    var $add102 = $31 << 2;
    var $32 = HEAP32[$add_ptr93 >> 2];
    var $mul99 = $add98 * 1e3 & -1;
    var $shl = $add102 + 4 | 0;
    var $add101 = $mul99 + $32 | 0;
    var $cmp106 = ($28 | 0) == -2147483112;
    var $cmp108 = ($add101 | 0) > 1000006;
    var $or_cond111 = $cmp106 & $cmp108;
    if ($or_cond111) {
      var $33 = $31;
      label = 27;
      break;
    } else {
      var $hue_0 = $shl;
      var $34 = $31;
      label = 28;
      break;
    }
   case 27:
    var $33;
    var $shl112 = $33 << 1;
    var $hue_0 = $shl112;
    var $34 = $33;
    label = 28;
    break;
   case 28:
    var $34;
    var $hue_0;
    var $35 = HEAP32[5264108 >> 2];
    var $arraydecay115 = $35 | 0;
    var $36 = HEAP16[5398712 >> 1];
    var $cmp118125 = $36 << 16 >> 16 == 0;
    if ($cmp118125) {
      var $ip_0_lcssa = $35;
      label = 30;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    var $_pr_pre = HEAP16[5242964 >> 1];
    var $ip_0126 = $35;
    var $row_1130 = 0;
    var $_pr = $_pr_pre;
    var $37 = $34;
    label = 31;
    break;
   case 30:
    var $ip_0_lcssa;
    var $arraydecay218 = $ip_0_lcssa | 0;
    var $cmp219113 = ($35 | 0) < ($ip_0_lcssa | 0);
    if ($cmp219113) {
      var $rp_4114 = $arraydecay115;
      label = 42;
      break;
    } else {
      label = 50;
      break;
    }
   case 31:
    var $37;
    var $_pr;
    var $row_1130;
    var $ip_0126;
    var $shr122 = $37 >> 1;
    var $and123 = $shr122 & $row_1130;
    var $tobool124 = ($and123 | 0) == 0;
    if ($tobool124) {
      var $43 = $_pr;
      label = 36;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    var $cmp128118 = $_pr << 16 >> 16 == 0;
    if ($cmp128118) {
      var $conv171_lcssa = 0;
      var $_pr1 = 0;
      label = 40;
      break;
    } else {
      var $col_1119 = 0;
      label = 33;
      break;
    }
   case 33:
    var $col_1119;
    var $conv135 = $36 & 65535;
    var $sub136 = $conv135 - 1 | 0;
    var $cmp137 = ($row_1130 | 0) == ($sub136 | 0);
    var $conv140 = $_pr_pre & 65535;
    var $sub141 = $col_1119 - $conv140 | 0;
    var $arrayidx143 = $ip_0126 + ($sub141 << 3) + 2 | 0;
    var $38 = HEAP16[$arrayidx143 >> 1];
    if ($cmp137) {
      label = 34;
      break;
    } else {
      label = 35;
      break;
    }
   case 34:
    var $arrayidx145 = $ip_0126 + ($col_1119 << 3) + 2 | 0;
    HEAP16[$arrayidx145 >> 1] = $38;
    var $arrayidx143_113 = $ip_0126 + ($sub141 << 3) + 4 | 0;
    var $39 = HEAP16[$arrayidx143_113 >> 1];
    var $arrayidx145_1 = $ip_0126 + ($col_1119 << 3) + 4 | 0;
    HEAP16[$arrayidx145_1 >> 1] = $39;
    label = 56;
    break;
   case 35:
    var $conv150 = $38 << 16 >> 16;
    var $add152 = $conv140 + $col_1119 | 0;
    var $arrayidx154 = $ip_0126 + ($add152 << 3) + 2 | 0;
    var $40 = HEAP16[$arrayidx154 >> 1];
    var $conv155 = $40 << 16 >> 16;
    var $add156 = $conv150 + 1 | 0;
    var $add157 = $add156 + $conv155 | 0;
    var $shr158107 = $add157 >>> 1;
    var $conv159 = $shr158107 & 65535;
    var $arrayidx161 = $ip_0126 + ($col_1119 << 3) + 2 | 0;
    HEAP16[$arrayidx161 >> 1] = $conv159;
    var $arrayidx143_1 = $ip_0126 + ($sub141 << 3) + 4 | 0;
    var $41 = HEAP16[$arrayidx143_1 >> 1];
    var $conv150_1 = $41 << 16 >> 16;
    var $add152_1 = $conv140 + $col_1119 | 0;
    var $arrayidx154_1 = $ip_0126 + ($add152_1 << 3) + 4 | 0;
    var $42 = HEAP16[$arrayidx154_1 >> 1];
    var $conv155_1 = $42 << 16 >> 16;
    var $add156_1 = $conv150_1 + 1 | 0;
    var $add157_1 = $add156_1 + $conv155_1 | 0;
    var $shr158107_1 = $add157_1 >>> 1;
    var $conv159_1 = $shr158107_1 & 65535;
    var $arrayidx161_1 = $ip_0126 + ($col_1119 << 3) + 4 | 0;
    HEAP16[$arrayidx161_1 >> 1] = $conv159_1;
    label = 56;
    break;
   case 36:
    var $43;
    var $conv171121 = $43 & 65535;
    var $cmp172122 = ($43 & 65535) > 1;
    if ($cmp172122) {
      var $col_2123 = 1;
      label = 37;
      break;
    } else {
      var $conv171_lcssa = $conv171121;
      var $_pr1 = $43;
      label = 40;
      break;
    }
   case 37:
    var $col_2123;
    var $sub184 = $col_2123 - 1 | 0;
    var $add194 = $col_2123 + 1 | 0;
    var $sub180 = $conv171121 - 1 | 0;
    var $cmp181 = ($col_2123 | 0) == ($sub180 | 0);
    var $arrayidx186 = $ip_0126 + ($sub184 << 3) + 2 | 0;
    var $44 = HEAP16[$arrayidx186 >> 1];
    if ($cmp181) {
      label = 38;
      break;
    } else {
      label = 39;
      break;
    }
   case 38:
    var $arrayidx188 = $ip_0126 + ($col_2123 << 3) + 2 | 0;
    HEAP16[$arrayidx188 >> 1] = $44;
    var $arrayidx186_114 = $ip_0126 + ($sub184 << 3) + 4 | 0;
    var $45 = HEAP16[$arrayidx186_114 >> 1];
    var $arrayidx188_1 = $ip_0126 + ($col_2123 << 3) + 4 | 0;
    HEAP16[$arrayidx188_1 >> 1] = $45;
    label = 57;
    break;
   case 39:
    var $conv193 = $44 << 16 >> 16;
    var $arrayidx196 = $ip_0126 + ($add194 << 3) + 2 | 0;
    var $46 = HEAP16[$arrayidx196 >> 1];
    var $conv197 = $46 << 16 >> 16;
    var $add198 = $conv193 + 1 | 0;
    var $add199 = $add198 + $conv197 | 0;
    var $shr200106 = $add199 >>> 1;
    var $conv201 = $shr200106 & 65535;
    var $arrayidx203 = $ip_0126 + ($col_2123 << 3) + 2 | 0;
    HEAP16[$arrayidx203 >> 1] = $conv201;
    var $arrayidx186_1 = $ip_0126 + ($sub184 << 3) + 4 | 0;
    var $47 = HEAP16[$arrayidx186_1 >> 1];
    var $conv193_1 = $47 << 16 >> 16;
    var $arrayidx196_1 = $ip_0126 + ($add194 << 3) + 4 | 0;
    var $48 = HEAP16[$arrayidx196_1 >> 1];
    var $conv197_1 = $48 << 16 >> 16;
    var $add198_1 = $conv193_1 + 1 | 0;
    var $add199_1 = $add198_1 + $conv197_1 | 0;
    var $shr200106_1 = $add199_1 >>> 1;
    var $conv201_1 = $shr200106_1 & 65535;
    var $arrayidx203_1 = $ip_0126 + ($col_2123 << 3) + 4 | 0;
    HEAP16[$arrayidx203_1 >> 1] = $conv201_1;
    label = 57;
    break;
   case 40:
    var $_pr1;
    var $conv171_lcssa;
    var $inc212 = $row_1130 + 1 | 0;
    var $add_ptr214 = $ip_0126 + ($conv171_lcssa << 3) | 0;
    var $conv117 = $36 & 65535;
    var $cmp118 = ($inc212 | 0) < ($conv117 | 0);
    if ($cmp118) {
      label = 41;
      break;
    } else {
      var $ip_0_lcssa = $add_ptr214;
      label = 30;
      break;
    }
   case 41:
    var $_pre7 = HEAP32[$sraw >> 2];
    var $ip_0126 = $add_ptr214;
    var $row_1130 = $inc212;
    var $_pr = $_pr1;
    var $37 = $_pre7;
    label = 31;
    break;
   case 42:
    var $rp_4114;
    if (($28 | 0) == -2147483001 | ($28 | 0) == -2147483007 | ($28 | 0) == -2147483039 | ($28 | 0) == -2147483056 | ($28 | 0) == -2147483112) {
      label = 43;
      break;
    } else {
      label = 44;
      break;
    }
   case 43:
    var $arrayidx237 = $rp_4114 + 2 | 0;
    var $49 = HEAP16[$arrayidx237 >> 1];
    var $conv238 = $49 << 16 >> 16;
    var $shl239 = $conv238 << 2;
    var $add240 = $shl239 + $hue_0 | 0;
    var $conv241 = $add240 & 65535;
    HEAP16[$arrayidx237 >> 1] = $conv241;
    var $arrayidx243 = $rp_4114 + 4 | 0;
    var $50 = HEAP16[$arrayidx243 >> 1];
    var $conv244 = $50 << 16 >> 16;
    var $shl245 = $conv244 << 2;
    var $add246 = $shl245 + $hue_0 | 0;
    var $conv247 = $add246 & 65535;
    HEAP16[$arrayidx243 >> 1] = $conv247;
    var $51 = HEAP16[$rp_4114 >> 1];
    var $conv250 = $51 << 16 >> 16;
    var $sext11 = $add240 << 16;
    var $conv252 = $sext11 >> 16;
    var $mul253 = $conv252 * 50 & -1;
    var $sext = $add246 << 16;
    var $conv255 = $sext >> 16;
    var $mul256 = $conv255 * 22929 & -1;
    var $add257 = $mul256 + $mul253 | 0;
    var $shr258 = $add257 >> 14;
    var $add259 = $shr258 + $conv250 | 0;
    var $mul265 = $conv252 * -5640 & -1;
    var $sext12 = $add246 << 16;
    var $conv267 = $sext12 >> 16;
    var $52 = $conv267 * -11751 & -1;
    var $sub269 = $52 + $mul265 | 0;
    var $shr270 = $sub269 >> 14;
    var $add271 = $shr270 + $conv250 | 0;
    var $mul277 = $conv252 * 29040 & -1;
    var $53 = $conv267 * -101 & -1;
    var $sub281 = $53 + $mul277 | 0;
    var $shr282 = $sub281 >> 14;
    var $add283 = $shr282 + $conv250 | 0;
    var $pix_sroa_0_0 = $add259;
    var $pix_sroa_1_0 = $add271;
    var $pix_sroa_2_0 = $add283;
    label = 47;
    break;
   case 44:
    var $cmp286 = $28 >>> 0 < 2147484184;
    var $54 = HEAP16[$rp_4114 >> 1];
    if ($cmp286) {
      label = 45;
      break;
    } else {
      var $55 = $54;
      label = 46;
      break;
    }
   case 45:
    var $sub291 = $54 - 512 & 65535;
    HEAP16[$rp_4114 >> 1] = $sub291;
    var $55 = $sub291;
    label = 46;
    break;
   case 46:
    var $55;
    var $conv295 = $55 << 16 >> 16;
    var $arrayidx296 = $rp_4114 + 4 | 0;
    var $56 = HEAP16[$arrayidx296 >> 1];
    var $conv297 = $56 << 16 >> 16;
    var $add298 = $conv297 + $conv295 | 0;
    var $arrayidx302 = $rp_4114 + 2 | 0;
    var $57 = HEAP16[$arrayidx302 >> 1];
    var $conv303 = $57 << 16 >> 16;
    var $add304 = $conv303 + $conv295 | 0;
    var $mul310 = $conv303 * -778 & -1;
    var $shl313 = $conv297 << 11;
    var $sub314 = $mul310 - $shl313 | 0;
    var $shr315 = $sub314 >> 12;
    var $add316 = $shr315 + $conv295 | 0;
    var $pix_sroa_0_0 = $add298;
    var $pix_sroa_1_0 = $add316;
    var $pix_sroa_2_0 = $add304;
    label = 47;
    break;
   case 47:
    var $pix_sroa_2_0;
    var $pix_sroa_1_0;
    var $pix_sroa_0_0;
    var $58 = HEAP16[5244124 >> 1];
    var $conv325 = $58 & 65535;
    var $mul326 = $conv325 * $pix_sroa_0_0 & -1;
    var $shr327 = $mul326 >> 10;
    var $phitmp = ($shr327 | 0) < 0;
    if ($phitmp) {
      var $cond356 = 0;
      label = 49;
      break;
    } else {
      label = 48;
      break;
    }
   case 48:
    var $cmp328 = ($shr327 | 0) < 65535;
    var $phitmp104 = $shr327 & 65535;
    var $phitmp104_ = $cmp328 ? $phitmp104 : -1;
    var $cond356 = $phitmp104_;
    label = 49;
    break;
   case 49:
    var $cond356;
    HEAP16[$rp_4114 >> 1] = $cond356;
    var $59 = HEAP16[5244120 >> 1];
    var $conv325_1 = $59 & 65535;
    var $mul326_1 = $conv325_1 * $pix_sroa_1_0 & -1;
    var $shr327_1 = $mul326_1 >> 10;
    var $phitmp_1 = ($shr327_1 | 0) < 0;
    if ($phitmp_1) {
      var $cond356_1 = 0;
      label = 53;
      break;
    } else {
      label = 52;
      break;
    }
   case 50:
    _ljpeg_end($jh);
    HEAP32[5263496 >> 2] = 16383;
    label = 51;
    break;
   case 51:
    STACKTOP = __stackBase__;
    return;
   case 52:
    var $cmp328_1 = ($shr327_1 | 0) < 65535;
    var $phitmp104_1 = $shr327_1 & 65535;
    var $phitmp104__1 = $cmp328_1 ? $phitmp104_1 : -1;
    var $cond356_1 = $phitmp104__1;
    label = 53;
    break;
   case 53:
    var $cond356_1;
    var $arrayidx358_1 = $rp_4114 + 2 | 0;
    HEAP16[$arrayidx358_1 >> 1] = $cond356_1;
    var $60 = HEAP16[5244116 >> 1];
    var $conv325_2 = $60 & 65535;
    var $mul326_2 = $conv325_2 * $pix_sroa_2_0 & -1;
    var $shr327_2 = $mul326_2 >> 10;
    var $phitmp_2 = ($shr327_2 | 0) < 0;
    if ($phitmp_2) {
      var $cond356_2 = 0;
      label = 55;
      break;
    } else {
      label = 54;
      break;
    }
   case 54:
    var $cmp328_2 = ($shr327_2 | 0) < 65535;
    var $phitmp104_2 = $shr327_2 & 65535;
    var $phitmp104__2 = $cmp328_2 ? $phitmp104_2 : -1;
    var $cond356_2 = $phitmp104__2;
    label = 55;
    break;
   case 55:
    var $cond356_2;
    var $arrayidx358_2 = $rp_4114 + 4 | 0;
    HEAP16[$arrayidx358_2 >> 1] = $cond356_2;
    var $add_ptr363 = $rp_4114 + 8 | 0;
    var $cmp219 = $add_ptr363 >>> 0 < $arraydecay218 >>> 0;
    if ($cmp219) {
      var $rp_4114 = $add_ptr363;
      label = 42;
      break;
    } else {
      label = 50;
      break;
    }
   case 56:
    var $add167 = $col_1119 + 2 | 0;
    var $cmp128 = ($add167 | 0) < ($conv140 | 0);
    if ($cmp128) {
      var $col_1119 = $add167;
      label = 33;
      break;
    } else {
      var $43 = $_pr_pre;
      label = 36;
      break;
    }
   case 57:
    var $add209 = $col_2123 + 2 | 0;
    var $cmp172 = ($add209 | 0) < ($conv171121 | 0);
    if ($cmp172) {
      var $col_2123 = $add209;
      label = 37;
      break;
    } else {
      var $conv171_lcssa = $conv171121;
      var $_pr1 = $43;
      label = 40;
      break;
    }
  }
}
_canon_sraw_load_raw["X"] = 1;
function _lossless_dng_load_raw() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 100 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $jh = __stackBase__;
    var $rp = __stackBase__ + 96;
    var $0 = HEAP16[5245036 >> 1];
    var $cmp22 = $0 << 16 >> 16 == 0;
    if ($cmp22) {
      label = 21;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $wide = $jh + 8 | 0;
    var $high = $jh + 4 | 0;
    var $clrs = $jh + 12 | 0;
    var $trow_023 = 0;
    var $tcol_024 = 0;
    label = 4;
    break;
   case 4:
    var $tcol_024;
    var $trow_023;
    var $1 = HEAP32[5264116 >> 2];
    var $call = _ftell($1);
    var $2 = HEAP32[5243576 >> 2];
    var $cmp2 = $2 >>> 0 < 2147483647;
    if ($cmp2) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    var $3 = HEAP32[5264116 >> 2];
    var $call4 = _get4();
    var $call5 = _fseek($3, $call4, 0);
    label = 6;
    break;
   case 6:
    var $call6 = _ljpeg_start($jh, 0);
    var $tobool = ($call6 | 0) == 0;
    if ($tobool) {
      label = 21;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $4 = HEAP32[$wide >> 2];
    var $5 = HEAP32[5427632 >> 2];
    var $tobool9 = ($5 | 0) == 0;
    if ($tobool9) {
      var $jwide_0 = $4;
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $6 = HEAP32[$clrs >> 2];
    var $mul = $6 * $4 & -1;
    var $jwide_0 = $mul;
    label = 9;
    break;
   case 9:
    var $jwide_0;
    var $7 = HEAP32[5264100 >> 2];
    var $div = Math.floor(($jwide_0 >>> 0) / ($7 >>> 0));
    var $8 = HEAP32[$high >> 2];
    var $cmp1217 = ($8 | 0) == 0;
    if ($cmp1217) {
      label = 18;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $cmp1612 = ($div | 0) == 0;
    var $jrow_018 = 0;
    var $row_019 = 0;
    var $col_020 = 0;
    label = 11;
    break;
   case 11:
    var $col_020;
    var $row_019;
    var $jrow_018;
    var $call14 = _ljpeg_row($jrow_018, $jh);
    HEAP32[$rp >> 2] = $call14;
    if ($cmp1612) {
      var $row_1_lcssa = $row_019;
      var $col_1_lcssa = $col_020;
      label = 17;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $_pre = HEAP32[5243572 >> 2];
    var $jcol_013 = 0;
    var $row_114 = $row_019;
    var $col_115 = $col_020;
    label = 13;
    break;
   case 13:
    var $col_115;
    var $row_114;
    var $jcol_013;
    var $add = $row_114 + $trow_023 | 0;
    var $add19 = $col_115 + $tcol_024 | 0;
    _adobe_copy_pixel($add, $add19, $rp);
    var $inc = $col_115 + 1 | 0;
    var $cmp20 = $inc >>> 0 < $_pre >>> 0;
    if ($cmp20) {
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 14:
    var $9 = HEAP16[5245028 >> 1];
    var $conv22 = $9 & 65535;
    var $cmp23 = $inc >>> 0 < $conv22 >>> 0;
    if ($cmp23) {
      var $col_2 = $inc;
      var $row_2 = $row_114;
      label = 16;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $add26 = $row_114 + 1 | 0;
    var $col_2 = 0;
    var $row_2 = $add26;
    label = 16;
    break;
   case 16:
    var $row_2;
    var $col_2;
    var $inc28 = $jcol_013 + 1 | 0;
    var $cmp16 = $inc28 >>> 0 < $div >>> 0;
    if ($cmp16) {
      var $jcol_013 = $inc28;
      var $row_114 = $row_2;
      var $col_115 = $col_2;
      label = 13;
      break;
    } else {
      var $row_1_lcssa = $row_2;
      var $col_1_lcssa = $col_2;
      label = 17;
      break;
    }
   case 17:
    var $col_1_lcssa;
    var $row_1_lcssa;
    var $inc30 = $jrow_018 + 1 | 0;
    var $10 = HEAP32[$high >> 2];
    var $cmp12 = $inc30 >>> 0 < $10 >>> 0;
    if ($cmp12) {
      var $jrow_018 = $inc30;
      var $row_019 = $row_1_lcssa;
      var $col_020 = $col_1_lcssa;
      label = 11;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    var $11 = HEAP32[5264116 >> 2];
    var $add32 = $call + 4 | 0;
    var $call33 = _fseek($11, $add32, 0);
    var $12 = HEAP32[5243572 >> 2];
    var $add34 = $12 + $tcol_024 | 0;
    var $13 = HEAP16[5245028 >> 1];
    var $conv35 = $13 & 65535;
    var $cmp36 = $add34 >>> 0 < $conv35 >>> 0;
    if ($cmp36) {
      var $tcol_1 = $add34;
      var $trow_1 = $trow_023;
      label = 20;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $14 = HEAP32[5243576 >> 2];
    var $add40 = $14 + $trow_023 | 0;
    var $tcol_1 = 0;
    var $trow_1 = $add40;
    label = 20;
    break;
   case 20:
    var $trow_1;
    var $tcol_1;
    _ljpeg_end($jh);
    var $15 = HEAP16[5245036 >> 1];
    var $conv = $15 & 65535;
    var $cmp = $trow_1 >>> 0 < $conv >>> 0;
    if ($cmp) {
      var $trow_023 = $trow_1;
      var $tcol_024 = $tcol_1;
      label = 4;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    STACKTOP = __stackBase__;
    return;
  }
}
_lossless_dng_load_raw["X"] = 1;
function _packed_dng_load_raw() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $rp = __stackBase__;
    var $0 = HEAP16[5245028 >> 1];
    var $conv = $0 & 65535;
    var $1 = HEAP32[5243580 >> 2];
    var $mul = $conv * $1 & -1;
    var $call = _calloc($mul, 2);
    var $2 = $call;
    _merror($call, 5577676);
    var $3 = HEAP16[5245036 >> 1];
    var $cmp19 = $3 << 16 >> 16 == 0;
    if ($cmp19) {
      label = 10;
      break;
    } else {
      var $row_020 = 0;
      label = 3;
      break;
    }
   case 3:
    var $row_020;
    var $4 = HEAP32[5244036 >> 2];
    var $cmp3 = ($4 | 0) == 16;
    if ($cmp3) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    var $5 = HEAP16[5245028 >> 1];
    var $conv5 = $5 & 65535;
    var $6 = HEAP32[5243580 >> 2];
    var $mul6 = $conv5 * $6 & -1;
    _read_shorts($2, $mul6);
    var $_pr = HEAP16[5245028 >> 1];
    var $12 = $_pr;
    label = 7;
    break;
   case 5:
    var $call7 = _getbithuff(-1, 0);
    var $7 = HEAP16[5245028 >> 1];
    var $conv911 = $7 & 65535;
    var $8 = HEAP32[5243580 >> 2];
    var $mul1012 = $conv911 * $8 & -1;
    var $cmp1113 = ($mul1012 | 0) == 0;
    if ($cmp1113) {
      var $12 = $7;
      label = 7;
      break;
    } else {
      var $col_014 = 0;
      label = 6;
      break;
    }
   case 6:
    var $col_014;
    var $9 = HEAP32[5244036 >> 2];
    var $call14 = _getbithuff($9, 0);
    var $conv15 = $call14 & 65535;
    var $arrayidx = $2 + ($col_014 << 1) | 0;
    HEAP16[$arrayidx >> 1] = $conv15;
    var $inc = $col_014 + 1 | 0;
    var $10 = HEAP16[5245028 >> 1];
    var $conv9 = $10 & 65535;
    var $11 = HEAP32[5243580 >> 2];
    var $mul10 = $conv9 * $11 & -1;
    var $cmp11 = $inc >>> 0 < $mul10 >>> 0;
    if ($cmp11) {
      var $col_014 = $inc;
      label = 6;
      break;
    } else {
      var $12 = $10;
      label = 7;
      break;
    }
   case 7:
    var $12;
    HEAP32[$rp >> 2] = $2;
    var $cmp1816 = $12 << 16 >> 16 == 0;
    if ($cmp1816) {
      label = 9;
      break;
    } else {
      var $col_117 = 0;
      label = 8;
      break;
    }
   case 8:
    var $col_117;
    _adobe_copy_pixel($row_020, $col_117, $rp);
    var $inc22 = $col_117 + 1 | 0;
    var $conv17 = $12 & 65535;
    var $cmp18 = ($inc22 | 0) < ($conv17 | 0);
    if ($cmp18) {
      var $col_117 = $inc22;
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $inc25 = $row_020 + 1 | 0;
    var $13 = HEAP16[5245036 >> 1];
    var $conv1 = $13 & 65535;
    var $cmp = ($inc25 | 0) < ($conv1 | 0);
    if ($cmp) {
      var $row_020 = $inc25;
      label = 3;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    _free($call);
    STACKTOP = __stackBase__;
    return;
  }
}
_packed_dng_load_raw["X"] = 1;
function _pentax_load_raw() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8264 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $bit = __stackBase__;
    var $huff = __stackBase__ + 60;
    var $vpred = __stackBase__ + 8256;
    var $tmpcast = $vpred;
    var $hpred = STACKTOP;
    STACKTOP = STACKTOP + 4 | 0;
    var $$etemp$0$0 = 0;
    var $$etemp$0$1 = 0;
    var $st$7$0 = $vpred | 0;
    HEAP32[$st$7$0 >> 2] = $$etemp$0$0;
    var $st$7$1 = $vpred + 4 | 0;
    HEAP32[$st$7$1 >> 2] = $$etemp$0$1;
    var $0 = HEAP32[5264116 >> 2];
    var $1 = HEAP32[5263440 >> 2];
    var $call = _fseek($0, $1, 0);
    var $call1 = _get2();
    var $conv = $call1 & 65535;
    var $add = $conv + 12 | 0;
    var $and = $add & 15;
    var $2 = HEAP32[5264116 >> 2];
    var $call2 = _fseek($2, 12, 1);
    var $cmp46 = ($and | 0) == 0;
    if ($cmp46) {
      label = 8;
      break;
    } else {
      var $c_047 = 0;
      label = 3;
      break;
    }
   case 3:
    var $c_047;
    var $call4 = _get2();
    var $arrayidx5 = $bit + ($c_047 << 1) | 0;
    HEAP16[$arrayidx5 >> 1] = $call4;
    var $inc = $c_047 + 1 | 0;
    var $cmp = ($inc | 0) < ($and | 0);
    if ($cmp) {
      var $c_047 = $inc;
      label = 3;
      break;
    } else {
      var $c_145 = 0;
      label = 4;
      break;
    }
   case 4:
    var $c_145;
    var $3 = HEAP32[5264116 >> 2];
    var $call10 = _fgetc($3);
    var $conv11 = $call10 & 65535;
    var $arrayidx13 = $bit + 30 + ($c_145 << 1) | 0;
    HEAP16[$arrayidx13 >> 1] = $conv11;
    var $inc15 = $c_145 + 1 | 0;
    var $cmp7 = ($inc15 | 0) < ($and | 0);
    if ($cmp7) {
      var $c_145 = $inc15;
      label = 4;
      break;
    } else {
      var $c_242 = 0;
      label = 5;
      break;
    }
   case 5:
    var $c_242;
    var $arrayidx22 = $bit + ($c_242 << 1) | 0;
    var $4 = HEAP16[$arrayidx22 >> 1];
    var $conv23 = $4 & 65535;
    var $arrayidx29 = $bit + 30 + ($c_242 << 1) | 0;
    var $5 = HEAP16[$arrayidx29 >> 1];
    var $conv3033 = $5 & 65535;
    var $shr34 = 4096 >>> ($conv3033 >>> 0);
    var $add3135 = $conv23 + 4095 | 0;
    var $sub36 = $add3135 + $shr34 | 0;
    var $and3237 = $sub36 & 4095;
    var $cmp3338 = $conv23 >>> 0 > $and3237 >>> 0;
    if ($cmp3338) {
      label = 7;
      break;
    } else {
      var $i_039 = $conv23;
      label = 6;
      break;
    }
   case 6:
    var $i_039;
    var $shl = $conv3033 << 8;
    var $or = $shl | $c_242;
    var $conv39 = $or & 65535;
    var $inc40 = $i_039 + 1 | 0;
    var $arrayidx41 = $huff + ($inc40 << 1) | 0;
    HEAP16[$arrayidx41 >> 1] = $conv39;
    var $cmp33 = ($inc40 | 0) > ($and3237 | 0);
    if ($cmp33) {
      label = 7;
      break;
    } else {
      var $i_039 = $inc40;
      label = 6;
      break;
    }
   case 7:
    var $inc44 = $c_242 + 1 | 0;
    var $cmp18 = ($inc44 | 0) < ($and | 0);
    if ($cmp18) {
      var $c_242 = $inc44;
      label = 5;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $arrayidx46 = $huff | 0;
    HEAP16[$arrayidx46 >> 1] = 12;
    var $6 = HEAP32[5264116 >> 2];
    var $7 = HEAP32[5428492 >> 2];
    var $call47 = _fseek($6, $7, 0);
    var $call48 = _getbithuff(-1, 0);
    var $8 = HEAP16[5245036 >> 1];
    var $cmp5129 = $8 << 16 >> 16 == 0;
    if ($cmp5129) {
      label = 20;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $_pre = HEAP16[5245028 >> 1];
    var $row_030 = 0;
    var $10 = $_pre;
    var $9 = $8;
    label = 10;
    break;
   case 10:
    var $9;
    var $10;
    var $row_030;
    var $cmp5626 = $10 << 16 >> 16 == 0;
    if ($cmp5626) {
      var $19 = 0;
      var $18 = $9;
      label = 19;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $and62 = $row_030 & 1;
    var $col_027 = 0;
    label = 12;
    break;
   case 12:
    var $col_027;
    var $call59 = _ljpeg_diff($arrayidx46);
    var $cmp60 = ($col_027 | 0) < 2;
    if ($cmp60) {
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    var $arrayidx64 = $tmpcast + ($and62 << 2) + ($col_027 << 1) | 0;
    var $11 = HEAP16[$arrayidx64 >> 1];
    var $conv65 = $11 & 65535;
    var $add66 = $conv65 + $call59 | 0;
    var $conv67 = $add66 & 65535;
    HEAP16[$arrayidx64 >> 1] = $conv67;
    var $arrayidx68 = $hpred + ($col_027 << 1) | 0;
    HEAP16[$arrayidx68 >> 1] = $conv67;
    var $and74_pre = $col_027 & 1;
    var $arrayidx75_pre = $hpred + ($and74_pre << 1) | 0;
    var $arrayidx75_pre_phi = $arrayidx75_pre;
    label = 15;
    break;
   case 14:
    var $and69 = $col_027 & 1;
    var $arrayidx70 = $hpred + ($and69 << 1) | 0;
    var $12 = HEAP16[$arrayidx70 >> 1];
    var $conv71 = $12 & 65535;
    var $add72 = $conv71 + $call59 | 0;
    var $conv73 = $add72 & 65535;
    HEAP16[$arrayidx70 >> 1] = $conv73;
    var $arrayidx75_pre_phi = $arrayidx70;
    label = 15;
    break;
   case 15:
    var $arrayidx75_pre_phi;
    var $13 = HEAP16[$arrayidx75_pre_phi >> 1];
    var $14 = HEAP16[5245028 >> 1];
    var $conv76 = $14 & 65535;
    var $mul = $conv76 * $row_030 & -1;
    var $add77 = $mul + $col_027 | 0;
    var $15 = HEAP32[5245032 >> 2];
    var $arrayidx78 = $15 + ($add77 << 1) | 0;
    HEAP16[$arrayidx78 >> 1] = $13;
    var $conv81 = $13 & 65535;
    var $16 = HEAP32[5244036 >> 2];
    var $shr82 = $conv81 >>> ($16 >>> 0);
    var $tobool = ($shr82 | 0) == 0;
    if ($tobool) {
      var $17 = $14;
      label = 17;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    _derror();
    var $_pre2 = HEAP16[5245028 >> 1];
    var $17 = $_pre2;
    label = 17;
    break;
   case 17:
    var $17;
    var $inc86 = $col_027 + 1 | 0;
    var $conv55 = $17 & 65535;
    var $cmp56 = ($inc86 | 0) < ($conv55 | 0);
    if ($cmp56) {
      var $col_027 = $inc86;
      label = 12;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    var $_pre1 = HEAP16[5245036 >> 1];
    var $19 = $17;
    var $18 = $_pre1;
    label = 19;
    break;
   case 19:
    var $18;
    var $19;
    var $inc89 = $row_030 + 1 | 0;
    var $conv50 = $18 & 65535;
    var $cmp51 = ($inc89 | 0) < ($conv50 | 0);
    if ($cmp51) {
      var $row_030 = $inc89;
      var $10 = $19;
      var $9 = $18;
      label = 10;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    STACKTOP = __stackBase__;
    return;
  }
}
_pentax_load_raw["X"] = 1;
function _nikon_load_raw() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $vpred = __stackBase__;
    var $hpred = __stackBase__ + 8;
    var $0 = HEAP32[5264116 >> 2];
    var $1 = HEAP32[5263440 >> 2];
    var $call = _fseek($0, $1, 0);
    var $2 = HEAP32[5264116 >> 2];
    var $call1 = _fgetc($2);
    var $3 = HEAP32[5264116 >> 2];
    var $call2 = _fgetc($3);
    var $conv4 = $call1 & 65535;
    var $cmp = ($conv4 | 0) == 73;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $conv6 = $call2 & 65535;
    var $cmp7 = ($conv6 | 0) == 88;
    if ($cmp7) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    var $4 = HEAP32[5264116 >> 2];
    var $call9 = _fseek($4, 2110, 1);
    label = 5;
    break;
   case 5:
    var $cmp11 = ($conv4 | 0) == 70;
    var $_ = $cmp11 ? 2 : 0;
    var $5 = HEAP32[5244036 >> 2];
    var $cmp15 = ($5 | 0) == 14;
    var $add = $_ + 3 | 0;
    var $tree_1 = $cmp15 ? $add : $_;
    var $arraydecay = $vpred | 0;
    _read_shorts($arraydecay, 4);
    var $6 = HEAP32[5244036 >> 2];
    var $shl19 = 1 << $6;
    var $and = $shl19 & 32767;
    var $call20 = _get2();
    var $conv21 = $call20 & 65535;
    var $cmp22 = ($call20 & 65535) > 1;
    if ($cmp22) {
      label = 6;
      break;
    } else {
      var $step_0 = 0;
      label = 7;
      break;
    }
   case 6:
    var $sub = $conv21 - 1 | 0;
    var $div = ($and | 0) / ($sub | 0) & -1;
    var $step_0 = $div;
    label = 7;
    break;
   case 7:
    var $step_0;
    if (($conv4 | 0) == 68) {
      label = 8;
      break;
    } else if (($conv4 | 0) == 70) {
      var $split_0_ph = 0;
      var $max_0_ph = $and;
      label = 17;
      break;
    } else {
      label = 15;
      break;
    }
   case 8:
    var $conv30 = $call2 & 65535;
    var $cmp31 = ($conv30 | 0) == 32;
    var $cmp34 = ($step_0 | 0) > 0;
    var $or_cond = $cmp31 & $cmp34;
    if ($or_cond) {
      label = 9;
      break;
    } else {
      label = 14;
      break;
    }
   case 9:
    var $cmp3877 = $call20 << 16 >> 16 == 0;
    if ($cmp3877) {
      label = 10;
      break;
    } else {
      var $i_078 = 0;
      label = 11;
      break;
    }
   case 10:
    var $cmp4375 = ($and | 0) == 0;
    if ($cmp4375) {
      label = 13;
      break;
    } else {
      var $i_176 = 0;
      label = 12;
      break;
    }
   case 11:
    var $i_078;
    var $call40 = _get2();
    var $mul = $i_078 * $step_0 & -1;
    var $arrayidx41 = 5428500 + ($mul << 1) | 0;
    HEAP16[$arrayidx41 >> 1] = $call40;
    var $inc = $i_078 + 1 | 0;
    var $cmp38 = ($inc | 0) < ($conv21 | 0);
    if ($cmp38) {
      var $i_078 = $inc;
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 12:
    var $i_176;
    var $rem = ($i_176 | 0) % ($step_0 | 0);
    var $sub46 = $i_176 - $rem | 0;
    var $arrayidx47 = 5428500 + ($sub46 << 1) | 0;
    var $7 = HEAP16[$arrayidx47 >> 1];
    var $conv48 = $7 & 65535;
    var $sub50 = $step_0 - $rem | 0;
    var $mul51 = $conv48 * $sub50 & -1;
    var $add54 = $sub46 + $step_0 | 0;
    var $arrayidx55 = 5428500 + ($add54 << 1) | 0;
    var $8 = HEAP16[$arrayidx55 >> 1];
    var $conv56 = $8 & 65535;
    var $mul58 = $conv56 * $rem & -1;
    var $add59 = $mul58 + $mul51 | 0;
    var $div60 = ($add59 | 0) / ($step_0 | 0) & -1;
    var $conv61 = $div60 & 65535;
    var $arrayidx62 = 5428500 + ($i_176 << 1) | 0;
    HEAP16[$arrayidx62 >> 1] = $conv61;
    var $inc64 = $i_176 + 1 | 0;
    var $cmp43 = ($inc64 | 0) < ($and | 0);
    if ($cmp43) {
      var $i_176 = $inc64;
      label = 12;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $9 = HEAP32[5264116 >> 2];
    var $10 = HEAP32[5263440 >> 2];
    var $add66 = $10 + 562 | 0;
    var $call67 = _fseek($9, $add66, 0);
    var $call68 = _get2();
    var $conv69 = $call68 & 65535;
    var $split_0_ph = $conv69;
    var $max_0_ph = $and;
    label = 17;
    break;
   case 14:
    var $cmp75 = ($call20 & 65535) < 16386;
    if ($cmp75) {
      label = 16;
      break;
    } else {
      var $split_0_ph = 0;
      var $max_0_ph = $and;
      label = 17;
      break;
    }
   case 15:
    var $cmp75_old = ($call20 & 65535) < 16386;
    if ($cmp75_old) {
      label = 16;
      break;
    } else {
      var $split_0_ph = 0;
      var $max_0_ph = $and;
      label = 17;
      break;
    }
   case 16:
    _read_shorts(5428500, $conv21);
    var $split_0_ph = 0;
    var $max_0_ph = $conv21;
    label = 17;
    break;
   case 17:
    var $max_0_ph;
    var $split_0_ph;
    var $max_0 = $max_0_ph;
    label = 18;
    break;
   case 18:
    var $max_0;
    var $sub81 = $max_0 - 2 | 0;
    var $arrayidx82 = 5428500 + ($sub81 << 1) | 0;
    var $11 = HEAP16[$arrayidx82 >> 1];
    var $sub84 = $max_0 - 1 | 0;
    var $arrayidx85 = 5428500 + ($sub84 << 1) | 0;
    var $12 = HEAP16[$arrayidx85 >> 1];
    var $cmp87 = $11 << 16 >> 16 == $12 << 16 >> 16;
    if ($cmp87) {
      var $max_0 = $sub84;
      label = 18;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $arraydecay90 = 5262960 + ($tree_1 << 5) | 0;
    var $call91 = _make_decoder($arraydecay90);
    var $13 = HEAP32[5264116 >> 2];
    var $14 = HEAP32[5428492 >> 2];
    var $call92 = _fseek($13, $14, 0);
    var $call93 = _getbithuff(-1, 0);
    var $15 = HEAP16[5398712 >> 1];
    var $cmp9669 = $15 << 16 >> 16 == 0;
    if ($cmp9669) {
      var $huff_0_lcssa = $call91;
      label = 36;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    var $tobool = ($split_0_ph | 0) != 0;
    var $add103 = $tree_1 + 1 | 0;
    var $arraydecay105 = 5262960 + ($add103 << 5) | 0;
    var $min_070 = 0;
    var $max_171 = $max_0;
    var $row_072 = 0;
    var $huff_074 = $call91;
    label = 21;
    break;
   case 21:
    var $huff_074;
    var $row_072;
    var $max_171;
    var $min_070;
    var $cmp100 = ($row_072 | 0) == ($split_0_ph | 0);
    var $or_cond64 = $tobool & $cmp100;
    if ($or_cond64) {
      label = 22;
      break;
    } else {
      var $huff_1 = $huff_074;
      var $max_2 = $max_171;
      var $min_1 = $min_070;
      label = 23;
      break;
    }
   case 22:
    var $16 = $huff_074;
    _free($16);
    var $call106 = _make_decoder($arraydecay105);
    var $add107 = $max_171 + 32 | 0;
    var $huff_1 = $call106;
    var $max_2 = $add107;
    var $min_1 = 16;
    label = 23;
    break;
   case 23:
    var $min_1;
    var $max_2;
    var $huff_1;
    var $17 = HEAP16[5245028 >> 1];
    var $cmp11166 = $17 << 16 >> 16 == 0;
    if ($cmp11166) {
      label = 35;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    var $add_ptr = $huff_1 + 2 | 0;
    var $and137 = $row_072 & 1;
    var $col_067 = 0;
    label = 25;
    break;
   case 25:
    var $col_067;
    var $18 = HEAP16[$huff_1 >> 1];
    var $conv114 = $18 & 65535;
    var $call115 = _getbithuff($conv114, $add_ptr);
    var $and116 = $call115 & 15;
    var $shr = $call115 >> 4;
    var $sub117 = $and116 - $shr | 0;
    var $call118 = _getbithuff($sub117, 0);
    var $shl119 = $call118 << 1;
    var $add12061 = $shl119 | 1;
    var $shl121 = $add12061 << $shr;
    var $shr122 = $shl121 >>> 1;
    var $sub123 = $and116 - 1 | 0;
    var $shl124 = 1 << $sub123;
    var $and125 = $shr122 & $shl124;
    var $cmp126 = ($and125 | 0) == 0;
    if ($cmp126) {
      label = 26;
      break;
    } else {
      var $diff_0 = $shr122;
      label = 27;
      break;
    }
   case 26:
    var $lnot = ($shr | 0) == 0;
    var $lnot_ext = $lnot & 1;
    var $shl129_neg = -1 << $and116;
    var $sub13162 = $lnot_ext + $shl129_neg | 0;
    var $sub132 = $sub13162 + $shr122 | 0;
    var $diff_0 = $sub132;
    label = 27;
    break;
   case 27:
    var $diff_0;
    var $cmp134 = ($col_067 | 0) < 2;
    if ($cmp134) {
      label = 28;
      break;
    } else {
      label = 29;
      break;
    }
   case 28:
    var $arrayidx139 = $vpred + ($and137 << 2) + ($col_067 << 1) | 0;
    var $19 = HEAP16[$arrayidx139 >> 1];
    var $conv140 = $19 & 65535;
    var $add141 = $conv140 + $diff_0 | 0;
    var $conv142 = $add141 & 65535;
    HEAP16[$arrayidx139 >> 1] = $conv142;
    var $arrayidx143 = $hpred + ($col_067 << 1) | 0;
    HEAP16[$arrayidx143 >> 1] = $conv142;
    var $and151_pre = $col_067 & 1;
    var $arrayidx152_pre = $hpred + ($and151_pre << 1) | 0;
    var $arrayidx152_pre_phi = $arrayidx152_pre;
    label = 30;
    break;
   case 29:
    var $and145 = $col_067 & 1;
    var $arrayidx146 = $hpred + ($and145 << 1) | 0;
    var $20 = HEAP16[$arrayidx146 >> 1];
    var $conv147 = $20 & 65535;
    var $add148 = $conv147 + $diff_0 | 0;
    var $conv149 = $add148 & 65535;
    HEAP16[$arrayidx146 >> 1] = $conv149;
    var $arrayidx152_pre_phi = $arrayidx146;
    label = 30;
    break;
   case 30:
    var $arrayidx152_pre_phi;
    var $21 = HEAP16[$arrayidx152_pre_phi >> 1];
    var $conv153 = $21 & 65535;
    var $add154 = $conv153 + $min_1 | 0;
    var $conv156 = $add154 & 65535;
    var $cmp157 = ($conv156 | 0) < ($max_2 | 0);
    if ($cmp157) {
      label = 32;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    _derror();
    label = 32;
    break;
   case 32:
    var $phitmp = $21 << 16 >> 16 < 0;
    if ($phitmp) {
      var $cond186 = 0;
      label = 34;
      break;
    } else {
      label = 33;
      break;
    }
   case 33:
    var $cmp164 = $21 << 16 >> 16 < 16383;
    var $conv175 = $21 << 16 >> 16;
    var $conv175_ = $cmp164 ? $conv175 : 16383;
    var $cond186 = $conv175_;
    label = 34;
    break;
   case 34:
    var $cond186;
    var $arrayidx187 = 5428500 + ($cond186 << 1) | 0;
    var $22 = HEAP16[$arrayidx187 >> 1];
    var $23 = HEAP16[5245028 >> 1];
    var $conv188 = $23 & 65535;
    var $mul189 = $conv188 * $row_072 & -1;
    var $add190 = $mul189 + $col_067 | 0;
    var $24 = HEAP32[5245032 >> 2];
    var $arrayidx191 = $24 + ($add190 << 1) | 0;
    HEAP16[$arrayidx191 >> 1] = $22;
    var $inc193 = $col_067 + 1 | 0;
    var $cmp111 = ($inc193 | 0) < ($conv188 | 0);
    if ($cmp111) {
      var $col_067 = $inc193;
      label = 25;
      break;
    } else {
      label = 35;
      break;
    }
   case 35:
    var $inc196 = $row_072 + 1 | 0;
    var $25 = HEAP16[5398712 >> 1];
    var $conv95 = $25 & 65535;
    var $cmp96 = ($inc196 | 0) < ($conv95 | 0);
    if ($cmp96) {
      var $min_070 = $min_1;
      var $max_171 = $max_2;
      var $row_072 = $inc196;
      var $huff_074 = $huff_1;
      label = 21;
      break;
    } else {
      var $huff_0_lcssa = $huff_1;
      label = 36;
      break;
    }
   case 36:
    var $huff_0_lcssa;
    var $26 = $huff_0_lcssa;
    _free($26);
    STACKTOP = __stackBase__;
    return;
  }
}
_nikon_load_raw["X"] = 1;
function _nikon_e995() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 1024 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $histo = __stackBase__;
    var $0 = $histo;
    for (var $$dest = $0 >> 2, $$stop = $$dest + 256; $$dest < $$stop; $$dest++) {
      HEAP32[$$dest] = 0;
    }
    var $1 = HEAP32[5264116 >> 2];
    var $call = _fseek($1, -2e3, 2);
    var $i_05 = 0;
    label = 3;
    break;
   case 3:
    var $i_05;
    var $2 = HEAP32[5264116 >> 2];
    var $call1 = _fgetc($2);
    var $arrayidx = $histo + ($call1 << 2) | 0;
    var $3 = HEAP32[$arrayidx >> 2];
    var $inc = $3 + 1 | 0;
    HEAP32[$arrayidx >> 2] = $inc;
    var $inc2 = $i_05 + 1 | 0;
    var $exitcond = ($inc2 | 0) == 2e3;
    if ($exitcond) {
      var $i_1 = 0;
      label = 4;
      break;
    } else {
      var $i_05 = $inc2;
      label = 3;
      break;
    }
   case 4:
    var $i_1;
    var $cmp4 = ($i_1 | 0) < 4;
    if ($cmp4) {
      label = 5;
      break;
    } else {
      var $retval_0 = 1;
      label = 6;
      break;
    }
   case 5:
    var $arrayidx6 = $i_1 + 5263152 | 0;
    var $4 = HEAP8[$arrayidx6];
    var $idxprom = $4 & 255;
    var $arrayidx7 = $histo + ($idxprom << 2) | 0;
    var $5 = HEAP32[$arrayidx7 >> 2];
    var $cmp8 = ($5 | 0) < 200;
    var $inc10 = $i_1 + 1 | 0;
    if ($cmp8) {
      var $retval_0 = 0;
      label = 6;
      break;
    } else {
      var $i_1 = $inc10;
      label = 4;
      break;
    }
   case 6:
    var $retval_0;
    STACKTOP = __stackBase__;
    return $retval_0;
  }
}
function _nikon_e2100() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $t = __stackBase__;
    var $0 = HEAP32[5264116 >> 2];
    var $call = _fseek($0, 0, 0);
    var $arraydecay = $t | 0;
    var $arrayidx = $t + 2 | 0;
    var $arrayidx2 = $t + 4 | 0;
    var $arrayidx4 = $t + 7 | 0;
    var $arrayidx7 = $t + 9 | 0;
    var $arrayidx10 = $t + 1 | 0;
    var $arrayidx13 = $t + 6 | 0;
    var $arrayidx16 = $t + 8 | 0;
    var $arrayidx19 = $t + 11 | 0;
    var $i_0 = 0;
    label = 3;
    break;
   case 3:
    var $i_0;
    var $cmp = ($i_0 | 0) < 1024;
    if ($cmp) {
      label = 4;
      break;
    } else {
      var $retval_0 = 1;
      label = 5;
      break;
    }
   case 4:
    var $1 = HEAP32[5264116 >> 2];
    var $call1 = _fread($arraydecay, 1, 12, $1);
    var $2 = HEAP8[$arrayidx];
    var $3 = HEAP8[$arrayidx2];
    var $and2 = $3 & $2;
    var $4 = HEAP8[$arrayidx4];
    var $and63 = $and2 & $4;
    var $5 = HEAP8[$arrayidx7];
    var $and94 = $and63 & $5;
    var $and9 = $and94 & 255;
    var $shr5 = $and9 >>> 4;
    var $6 = HEAP8[$arrayidx10];
    var $conv11 = $6 & 255;
    var $7 = HEAP8[$arrayidx13];
    var $conv14 = $7 & 255;
    var $8 = HEAP8[$arrayidx16];
    var $conv17 = $8 & 255;
    var $9 = HEAP8[$arrayidx19];
    var $conv20 = $9 & 255;
    var $and12 = $conv11 & 3;
    var $and15 = $and12 & $shr5;
    var $and18 = $and15 & $conv14;
    var $and21 = $and18 & $conv17;
    var $and22 = $and21 & $conv20;
    var $cmp23 = ($and22 | 0) == 3;
    var $inc = $i_0 + 1 | 0;
    if ($cmp23) {
      var $i_0 = $inc;
      label = 3;
      break;
    } else {
      var $retval_0 = 0;
      label = 5;
      break;
    }
   case 5:
    var $retval_0;
    STACKTOP = __stackBase__;
    return $retval_0;
  }
}
function _nikon_3700() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $dp = __stackBase__;
    var $0 = HEAP32[5264116 >> 2];
    var $call = _fseek($0, 3072, 0);
    var $arraydecay = $dp | 0;
    var $1 = HEAP32[5264116 >> 2];
    var $call1 = _fread($arraydecay, 1, 24, $1);
    var $arrayidx = $dp + 8 | 0;
    var $2 = HEAP8[$arrayidx];
    var $conv = $2 & 255;
    var $and = $conv << 4;
    var $shl = $and & 48;
    var $arrayidx2 = $dp + 20 | 0;
    var $3 = HEAP8[$arrayidx2];
    var $conv3 = $3 & 255;
    var $and4 = $conv3 & 3;
    var $or = $shl | $and4;
    if (($or | 0) == 0) {
      label = 3;
      break;
    } else if (($or | 0) == 3) {
      label = 4;
      break;
    } else if (($or | 0) == 50) {
      label = 5;
      break;
    } else if (($or | 0) == 51) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 3:
    var $call12 = _strcpy(5263628, 5263160);
    var $call15 = _strcpy(5263372, 5263172);
    label = 7;
    break;
   case 4:
    var $call12_1 = _strcpy(5263628, 5263192);
    var $call15_1 = _strcpy(5263372, 5263204);
    label = 7;
    break;
   case 5:
    var $call12_2 = _strcpy(5263628, 5263224);
    var $call15_2 = _strcpy(5263372, 5263236);
    label = 7;
    break;
   case 6:
    var $call12_3 = _strcpy(5263628, 5263256);
    var $call15_3 = _strcpy(5263372, 5263268);
    label = 7;
    break;
   case 7:
    STACKTOP = __stackBase__;
    return;
  }
}
function _minolta_z2() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 424 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $tail = __stackBase__;
    var $0 = HEAP32[5264116 >> 2];
    var $call = _fseek($0, -424, 2);
    var $arraydecay = $tail | 0;
    var $1 = HEAP32[5264116 >> 2];
    var $call1 = _fread($arraydecay, 1, 424, $1);
    var $i_04 = 0;
    var $nz_05 = 0;
    label = 3;
    break;
   case 3:
    var $nz_05;
    var $i_04;
    var $arrayidx = $tail + $i_04 | 0;
    var $2 = HEAP8[$arrayidx];
    var $not_tobool = $2 << 24 >> 24 != 0;
    var $inc = $not_tobool & 1;
    var $nz_0_inc = $inc + $nz_05 | 0;
    var $inc2 = $i_04 + 1 | 0;
    var $exitcond = ($inc2 | 0) == 424;
    if ($exitcond) {
      label = 4;
      break;
    } else {
      var $i_04 = $inc2;
      var $nz_05 = $nz_0_inc;
      label = 3;
      break;
    }
   case 4:
    var $cmp3 = ($nz_0_inc | 0) > 20;
    var $conv = $cmp3 & 1;
    STACKTOP = __stackBase__;
    return $conv;
  }
}
function _ppm_thumb() {
  var __stackBase__ = STACKTOP;
  var $mul2 = (HEAPU16[5244040 >> 1] * 3 & -1) * HEAPU16[5244060 >> 1] & -1;
  HEAP32[5244056 >> 2] = $mul2;
  var $call = _malloc($mul2);
  _merror($call, 5576572);
  var $conv4 = HEAPU16[5244060 >> 1];
  _fprintf(HEAP32[5262952 >> 2], 5573496, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = HEAPU16[5244040 >> 1], HEAP32[tempInt + 4 >> 2] = $conv4, tempInt));
  _fread($call, 1, HEAP32[5244056 >> 2], HEAP32[5264116 >> 2]);
  _fwrite($call, 1, HEAP32[5244056 >> 2], HEAP32[5262952 >> 2]);
  _free($call);
  STACKTOP = __stackBase__;
  return;
}
function _ppm16_thumb() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP16[5244040 >> 1];
    var $conv = $0 & 65535;
    var $1 = HEAP16[5244060 >> 1];
    var $conv1 = $1 & 65535;
    var $mul = $conv * 3 & -1;
    var $mul2 = $mul * $conv1 & -1;
    HEAP32[5244056 >> 2] = $mul2;
    var $call = _calloc($mul2, 2);
    _merror($call, 5587544);
    var $2 = $call;
    var $3 = HEAP32[5244056 >> 2];
    _read_shorts($2, $3);
    var $4 = HEAP32[5244056 >> 2];
    var $cmp10 = ($4 | 0) == 0;
    if ($cmp10) {
      label = 4;
      break;
    } else {
      var $i_011 = 0;
      label = 3;
      break;
    }
   case 3:
    var $i_011;
    var $arrayidx = $2 + ($i_011 << 1) | 0;
    var $5 = HEAP16[$arrayidx >> 1];
    var $shr9 = ($5 & 65535) >>> 8;
    var $conv5 = $shr9 & 255;
    var $arrayidx6 = $call + $i_011 | 0;
    HEAP8[$arrayidx6] = $conv5;
    var $inc = $i_011 + 1 | 0;
    var $cmp = $inc >>> 0 < $4 >>> 0;
    if ($cmp) {
      var $i_011 = $inc;
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $6 = HEAP32[5262952 >> 2];
    var $7 = HEAP16[5244040 >> 1];
    var $conv7 = $7 & 65535;
    var $8 = HEAP16[5244060 >> 1];
    var $conv8 = $8 & 65535;
    var $call9 = _fprintf($6, 5573496, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $conv7, HEAP32[tempInt + 4 >> 2] = $conv8, tempInt));
    var $9 = HEAP32[5244056 >> 2];
    var $10 = HEAP32[5262952 >> 2];
    var $call10 = _fwrite($call, 1, $9, $10);
    _free($call);
    STACKTOP = __stackBase__;
    return;
  }
}
function _layer_thumb() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5244048 >> 2];
    var $shr = $0 >>> 5;
    var $and = $shr & 7;
    HEAP32[5560840 >> 2] = $and;
    var $1 = HEAP16[5244040 >> 1];
    var $conv = $1 & 65535;
    var $2 = HEAP16[5244060 >> 1];
    var $conv1 = $2 & 65535;
    var $mul = $conv1 * $conv & -1;
    HEAP32[5244056 >> 2] = $mul;
    var $call = _calloc($and, $mul);
    _merror($call, 5587444);
    var $3 = HEAP32[5262952 >> 2];
    var $4 = HEAP32[5560840 >> 2];
    var $shr2 = $4 >> 1;
    var $add = $shr2 + 5 | 0;
    var $5 = HEAP16[5244040 >> 1];
    var $conv3 = $5 & 65535;
    var $6 = HEAP16[5244060 >> 1];
    var $conv4 = $6 & 65535;
    var $call5 = _fprintf($3, 5587324, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $add, HEAP32[tempInt + 4 >> 2] = $conv3, HEAP32[tempInt + 8 >> 2] = $conv4, tempInt));
    var $7 = HEAP32[5244056 >> 2];
    var $8 = HEAP32[5560840 >> 2];
    var $9 = HEAP32[5264116 >> 2];
    var $call6 = _fread($call, $7, $8, $9);
    var $10 = HEAP32[5244056 >> 2];
    var $cmp10 = ($10 | 0) == 0;
    if ($cmp10) {
      label = 7;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $_pre = HEAP32[5560840 >> 2];
    var $i_011 = 0;
    var $12 = $_pre;
    var $11 = $10;
    label = 4;
    break;
   case 4:
    var $11;
    var $12;
    var $i_011;
    var $cmp97 = ($12 | 0) > 0;
    if ($cmp97) {
      var $c_08 = 0;
      var $13 = $11;
      label = 5;
      break;
    } else {
      var $20 = $12;
      var $19 = $11;
      label = 6;
      break;
    }
   case 5:
    var $13;
    var $c_08;
    var $14 = HEAP32[5244048 >> 2];
    var $shr12 = $14 >>> 8;
    var $arrayidx13 = 5263704 + ($shr12 << 2) + $c_08 | 0;
    var $15 = HEAP8[$arrayidx13];
    var $conv14 = $15 << 24 >> 24;
    var $sub = $conv14 - 48 | 0;
    var $mul15 = $sub * $13 & -1;
    var $add16 = $mul15 + $i_011 | 0;
    var $arrayidx17 = $call + $add16 | 0;
    var $16 = HEAP8[$arrayidx17];
    var $conv18 = $16 << 24 >> 24;
    var $17 = HEAP32[5262952 >> 2];
    var $call19 = _fputc($conv18, $17);
    var $inc = $c_08 + 1 | 0;
    var $18 = HEAP32[5560840 >> 2];
    var $cmp9 = ($inc | 0) < ($18 | 0);
    var $_pre2 = HEAP32[5244056 >> 2];
    if ($cmp9) {
      var $c_08 = $inc;
      var $13 = $_pre2;
      label = 5;
      break;
    } else {
      var $20 = $18;
      var $19 = $_pre2;
      label = 6;
      break;
    }
   case 6:
    var $19;
    var $20;
    var $inc21 = $i_011 + 1 | 0;
    var $cmp = $inc21 >>> 0 < $19 >>> 0;
    if ($cmp) {
      var $i_011 = $inc21;
      var $12 = $20;
      var $11 = $19;
      label = 4;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    _free($call);
    STACKTOP = __stackBase__;
    return;
  }
}
_layer_thumb["X"] = 1;
function _rollei_thumb() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP16[5244040 >> 1];
    var $conv = $0 & 65535;
    var $1 = HEAP16[5244060 >> 1];
    var $conv1 = $1 & 65535;
    var $mul = $conv1 * $conv & -1;
    HEAP32[5244056 >> 2] = $mul;
    var $call = _calloc($mul, 2);
    var $2 = $call;
    _merror($call, 5587188);
    var $3 = HEAP32[5262952 >> 2];
    var $4 = HEAP16[5244040 >> 1];
    var $conv2 = $4 & 65535;
    var $5 = HEAP16[5244060 >> 1];
    var $conv3 = $5 & 65535;
    var $call4 = _fprintf($3, 5573496, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $conv2, HEAP32[tempInt + 4 >> 2] = $conv3, tempInt));
    var $6 = HEAP32[5244056 >> 2];
    _read_shorts($2, $6);
    var $7 = HEAP32[5244056 >> 2];
    var $cmp12 = ($7 | 0) == 0;
    if ($cmp12) {
      label = 4;
      break;
    } else {
      var $i_013 = 0;
      label = 3;
      break;
    }
   case 3:
    var $i_013;
    var $arrayidx = $2 + ($i_013 << 1) | 0;
    var $8 = HEAP16[$arrayidx >> 1];
    var $conv6 = $8 & 65535;
    var $shl = $conv6 << 3;
    var $9 = HEAP32[5262952 >> 2];
    var $call7 = _fputc($shl, $9);
    var $10 = HEAP16[$arrayidx >> 1];
    var $conv9 = $10 & 65535;
    var $shr10 = $conv9 >>> 5;
    var $shl10 = $shr10 << 2;
    var $11 = HEAP32[5262952 >> 2];
    var $call11 = _fputc($shl10, $11);
    var $12 = HEAP16[$arrayidx >> 1];
    var $conv13 = $12 & 65535;
    var $shr1411 = $conv13 >>> 11;
    var $shl15 = $shr1411 << 3;
    var $13 = HEAP32[5262952 >> 2];
    var $call16 = _fputc($shl15, $13);
    var $inc = $i_013 + 1 | 0;
    var $14 = HEAP32[5244056 >> 2];
    var $cmp = $inc >>> 0 < $14 >>> 0;
    if ($cmp) {
      var $i_013 = $inc;
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    _free($call);
    STACKTOP = __stackBase__;
    return;
  }
}
function _raw($row, $col) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP16[5245036 >> 1];
    var $conv = $0 & 65535;
    var $cmp = $conv >>> 0 > $row >>> 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      var $cond = 0;
      label = 5;
      break;
    }
   case 3:
    var $1 = HEAP16[5245028 >> 1];
    var $conv2 = $1 & 65535;
    var $cmp3 = $conv2 >>> 0 > $col >>> 0;
    if ($cmp3) {
      label = 4;
      break;
    } else {
      var $cond = 0;
      label = 5;
      break;
    }
   case 4:
    var $mul = $conv2 * $row & -1;
    var $add = $mul + $col | 0;
    var $2 = HEAP32[5245032 >> 2];
    var $arrayidx = $2 + ($add << 1) | 0;
    var $3 = HEAP16[$arrayidx >> 1];
    var $conv6 = $3 & 65535;
    var $cond = $conv6;
    label = 5;
    break;
   case 5:
    var $cond;
    return $cond;
  }
}
function _rollei_load_raw() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $pixel = __stackBase__;
    var $0 = HEAP16[5245028 >> 1];
    var $1 = HEAP16[5245036 >> 1];
    var $arraydecay = $pixel | 0;
    var $2 = HEAP32[5264116 >> 2];
    var $call28 = _fread($arraydecay, 1, 10, $2);
    var $cmp29 = ($call28 | 0) == 10;
    if ($cmp29) {
      label = 3;
      break;
    } else {
      label = 5;
      break;
    }
   case 3:
    var $conv = $0 & 65535;
    var $mul = $conv * 5 & -1;
    var $conv1 = $1 & 65535;
    var $mul2 = $mul * $conv1 & -1;
    var $div = $mul2 >>> 3;
    var $arrayidx8 = $pixel + 1 | 0;
    var $arrayidx6_1 = $pixel + 2 | 0;
    var $arrayidx8_1 = $pixel + 3 | 0;
    var $arrayidx6_2 = $pixel + 4 | 0;
    var $arrayidx8_2 = $pixel + 5 | 0;
    var $arrayidx6_3 = $pixel + 6 | 0;
    var $arrayidx8_3 = $pixel + 7 | 0;
    var $arrayidx6_4 = $pixel + 8 | 0;
    var $arrayidx8_4 = $pixel + 9 | 0;
    var $iten_030 = 0;
    var $isix_031 = $div;
    var $buffer_032 = 0;
    label = 4;
    break;
   case 4:
    var $buffer_032;
    var $isix_031;
    var $iten_030;
    var $inc = $iten_030 + 1 | 0;
    var $3 = HEAP8[$arraydecay];
    var $conv7 = $3 & 255;
    var $shl = $conv7 << 8;
    var $4 = HEAP8[$arrayidx8];
    var $conv9 = $4 & 255;
    var $or = $shl | $conv9;
    var $shr20 = $conv7 >>> 2;
    var $shl14 = $buffer_032 << 6;
    var $or15 = $shr20 | $shl14;
    var $inc_1 = $iten_030 + 2 | 0;
    var $5 = HEAP8[$arrayidx6_1];
    var $conv7_1 = $5 & 255;
    var $shl_1 = $conv7_1 << 8;
    var $6 = HEAP8[$arrayidx8_1];
    var $conv9_1 = $6 & 255;
    var $or_1 = $shl_1 | $conv9_1;
    var $shr20_1 = $conv7_1 >>> 2;
    var $shl14_1 = $or15 << 6;
    var $or15_1 = $shr20_1 | $shl14_1;
    var $inc_2 = $iten_030 + 3 | 0;
    var $7 = HEAP8[$arrayidx6_2];
    var $conv7_2 = $7 & 255;
    var $shl_2 = $conv7_2 << 8;
    var $8 = HEAP8[$arrayidx8_2];
    var $conv9_2 = $8 & 255;
    var $or_2 = $shl_2 | $conv9_2;
    var $shr20_2 = $conv7_2 >>> 2;
    var $shl14_2 = $or15_1 << 6;
    var $or15_2 = $shr20_2 | $shl14_2;
    var $inc_3 = $iten_030 + 4 | 0;
    var $9 = HEAP8[$arrayidx6_3];
    var $conv7_3 = $9 & 255;
    var $shl_3 = $conv7_3 << 8;
    var $10 = HEAP8[$arrayidx8_3];
    var $conv9_3 = $10 & 255;
    var $or_3 = $shl_3 | $conv9_3;
    var $shr20_3 = $conv7_3 >>> 2;
    var $shl14_3 = $or15_2 << 6;
    var $or15_3 = $shr20_3 | $shl14_3;
    var $11 = HEAP8[$arrayidx6_4];
    var $conv7_4 = $11 & 255;
    var $shl_4 = $conv7_4 << 8;
    var $12 = HEAP8[$arrayidx8_4];
    var $conv9_4 = $12 & 255;
    var $or_4 = $shl_4 | $conv9_4;
    var $shr20_4 = $conv7_4 >>> 2;
    var $shl14_4 = $or15_3 << 6;
    var $or15_4 = $shr20_4 | $shl14_4;
    var $13 = $iten_030 + 5 | 0;
    var $inc21 = $isix_031 + 1 | 0;
    var $14 = $or15_1 >>> 2;
    var $inc21_1 = $isix_031 + 2 | 0;
    var $15 = $or15_3 >>> 4;
    var $16 = $isix_031 + 3 | 0;
    var $_tr = $or & 65535;
    var $conv36 = $_tr & 1023;
    var $17 = HEAP32[5245032 >> 2];
    var $arrayidx38 = $17 + ($iten_030 << 1) | 0;
    HEAP16[$arrayidx38 >> 1] = $conv36;
    var $_tr_1 = $or_1 & 65535;
    var $conv36_1 = $_tr_1 & 1023;
    var $arrayidx38_1 = $17 + ($inc << 1) | 0;
    HEAP16[$arrayidx38_1 >> 1] = $conv36_1;
    var $_tr_2 = $or_2 & 65535;
    var $conv36_2 = $_tr_2 & 1023;
    var $arrayidx38_2 = $17 + ($inc_1 << 1) | 0;
    HEAP16[$arrayidx38_2 >> 1] = $conv36_2;
    var $_tr_3 = $or_3 & 65535;
    var $conv36_3 = $_tr_3 & 1023;
    var $arrayidx38_3 = $17 + ($inc_2 << 1) | 0;
    HEAP16[$arrayidx38_3 >> 1] = $conv36_3;
    var $_tr_4 = $or_4 & 65535;
    var $conv36_4 = $_tr_4 & 1023;
    var $arrayidx38_4 = $17 + ($inc_3 << 1) | 0;
    HEAP16[$arrayidx38_4 >> 1] = $conv36_4;
    var $_tr1 = $14 & 65535;
    var $conv36_5 = $_tr1 & 1023;
    var $arrayidx38_5 = $17 + ($isix_031 << 1) | 0;
    HEAP16[$arrayidx38_5 >> 1] = $conv36_5;
    var $_tr_6 = $15 & 65535;
    var $conv36_6 = $_tr_6 & 1023;
    var $arrayidx38_6 = $17 + ($inc21 << 1) | 0;
    HEAP16[$arrayidx38_6 >> 1] = $conv36_6;
    var $_tr_7 = $or15_4 & 65535;
    var $conv36_7 = $_tr_7 & 1023;
    var $arrayidx38_7 = $17 + ($inc21_1 << 1) | 0;
    HEAP16[$arrayidx38_7 >> 1] = $conv36_7;
    var $18 = HEAP32[5264116 >> 2];
    var $call = _fread($arraydecay, 1, 10, $18);
    var $cmp = ($call | 0) == 10;
    if ($cmp) {
      var $iten_030 = $13;
      var $isix_031 = $16;
      var $buffer_032 = $or15_4;
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    HEAP32[5263496 >> 2] = 1023;
    STACKTOP = __stackBase__;
    return;
  }
}
_rollei_load_raw["X"] = 1;
function _phase_one_flat_field($is_float, $nc) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $head = __stackBase__;
    var $mult = __stackBase__ + 16;
    var $arraydecay = $head | 0;
    _read_shorts($arraydecay, 8);
    var $arrayidx = $head + 4 | 0;
    var $0 = HEAP16[$arrayidx >> 1];
    var $arrayidx1 = $head + 8 | 0;
    var $1 = HEAP16[$arrayidx1 >> 1];
    var $div74 = Math.floor(($0 & 65535) / ($1 & 65535));
    var $div = $div74 & 65535;
    var $mul = $div * $nc & -1;
    var $call = _calloc($mul, 4);
    var $2 = $call;
    _merror($call, 5587012);
    var $arrayidx3 = $head + 6 | 0;
    var $3 = HEAP16[$arrayidx3 >> 1];
    var $arrayidx5 = $head + 10 | 0;
    var $4 = HEAP16[$arrayidx5 >> 1];
    var $div75110 = Math.floor(($3 & 65535) / ($4 & 65535));
    var $cmp112 = $div75110 << 16 >> 16 == 0;
    if ($cmp112) {
      label = 36;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $cmp1086 = $div74 << 16 >> 16 == 0;
    var $arrayidx45 = $head + 2 | 0;
    var $cmp6298 = ($div74 & 65535) > 1;
    var $cmp178100 = ($nc | 0) == 0;
    var $cmp106 = ($nc | 0) > 2;
    var $tobool = ($is_float | 0) == 0;
    var $y_0113 = 0;
    label = 4;
    break;
   case 4:
    var $y_0113;
    if ($cmp1086) {
      label = 15;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $cmp23 = ($y_0113 | 0) == 0;
    var $x_087 = 0;
    label = 6;
    break;
   case 6:
    var $x_087;
    if ($cmp178100) {
      label = 14;
      break;
    } else {
      var $c_085 = 0;
      label = 7;
      break;
    }
   case 7:
    var $c_085;
    if ($tobool) {
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $call17 = _getreal(11);
    var $cond = $call17;
    label = 10;
    break;
   case 9:
    var $call18 = _get2();
    var $conv19 = $call18 & 65535;
    var $conv20 = $conv19 | 0;
    var $div21 = $conv20 * 30517578125e-15;
    var $cond = $div21;
    label = 10;
    break;
   case 10:
    var $cond;
    var $conv22 = $cond;
    var $mul25 = $c_085 * $div & -1;
    var $add = $mul25 + $x_087 | 0;
    var $arrayidx26 = $2 + ($add << 2) | 0;
    if ($cmp23) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    HEAPF32[$arrayidx26 >> 2] = $conv22;
    label = 13;
    break;
   case 12:
    var $5 = HEAPF32[$arrayidx26 >> 2];
    var $sub = $conv22 - $5;
    var $6 = HEAP16[$arrayidx5 >> 1];
    var $conv31 = $6 & 65535;
    var $conv32 = $conv31 | 0;
    var $div33 = $sub / $conv32;
    var $add3479 = $c_085 | 1;
    var $mul35 = $add3479 * $div & -1;
    var $add36 = $mul35 + $x_087 | 0;
    var $arrayidx37 = $2 + ($add36 << 2) | 0;
    HEAPF32[$arrayidx37 >> 2] = $div33;
    label = 13;
    break;
   case 13:
    var $add38 = $c_085 + 2 | 0;
    var $cmp14 = $add38 >>> 0 < $nc >>> 0;
    if ($cmp14) {
      var $c_085 = $add38;
      label = 7;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $inc = $x_087 + 1 | 0;
    var $exitcond = ($inc | 0) == ($div | 0);
    if ($exitcond) {
      label = 15;
      break;
    } else {
      var $x_087 = $inc;
      label = 6;
      break;
    }
   case 15:
    var $cmp41 = ($y_0113 | 0) == 0;
    if ($cmp41) {
      label = 35;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $7 = HEAP16[$arrayidx45 >> 1];
    var $conv46 = $7 & 65535;
    var $8 = HEAP16[$arrayidx5 >> 1];
    var $conv48 = $8 & 65535;
    var $mul49 = $conv48 * $y_0113 & -1;
    var $add50 = $mul49 + $conv46 | 0;
    var $sub53 = $add50 - $conv48 | 0;
    var $9 = HEAP16[5245036 >> 1];
    var $conv55104 = $9 & 65535;
    var $cmp56105 = $sub53 >>> 0 < $conv55104 >>> 0;
    var $cmp58106 = $sub53 >>> 0 < $add50 >>> 0;
    var $or_cond107 = $cmp56105 & $cmp58106;
    if ($or_cond107) {
      var $row_0108 = $sub53;
      label = 17;
      break;
    } else {
      label = 35;
      break;
    }
   case 17:
    var $row_0108;
    if ($cmp6298) {
      var $x_199 = 1;
      label = 18;
      break;
    } else {
      label = 30;
      break;
    }
   case 18:
    var $x_199;
    var $_pre = HEAP16[$arrayidx1 >> 1];
    if ($cmp178100) {
      var $12 = $_pre;
      label = 21;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $conv80 = $_pre & 65535;
    var $conv81 = $conv80 | 0;
    var $c_189 = 0;
    label = 20;
    break;
   case 20:
    var $c_189;
    var $mul69 = $c_189 * $div & -1;
    var $add70 = $mul69 + $x_199 | 0;
    var $sub71 = $add70 - 1 | 0;
    var $arrayidx72 = $2 + ($sub71 << 2) | 0;
    var $10 = HEAPF32[$arrayidx72 >> 2];
    var $arrayidx73 = $mult + ($c_189 << 2) | 0;
    HEAPF32[$arrayidx73 >> 2] = $10;
    var $arrayidx76 = $2 + ($add70 << 2) | 0;
    var $11 = HEAPF32[$arrayidx76 >> 2];
    var $sub78 = $11 - $10;
    var $div82 = $sub78 / $conv81;
    var $add8378 = $c_189 | 1;
    var $arrayidx84 = $mult + ($add8378 << 2) | 0;
    HEAPF32[$arrayidx84 >> 2] = $div82;
    var $add86 = $c_189 + 2 | 0;
    var $cmp66 = $add86 >>> 0 < $nc >>> 0;
    if ($cmp66) {
      var $c_189 = $add86;
      label = 20;
      break;
    } else {
      var $12 = $_pre;
      label = 21;
      break;
    }
   case 21:
    var $12;
    var $13 = HEAP16[$arraydecay >> 1];
    var $conv89 = $13 & 65535;
    var $conv91 = $12 & 65535;
    var $mul92 = $conv91 * $x_199 & -1;
    var $add93 = $mul92 + $conv89 | 0;
    var $sub96 = $add93 - $conv91 | 0;
    var $14 = HEAP16[5245028 >> 1];
    var $conv9892 = $14 & 65535;
    var $cmp9993 = $sub96 >>> 0 < $conv9892 >>> 0;
    var $cmp10294 = $sub96 >>> 0 < $add93 >>> 0;
    var $or_cond8095 = $cmp9993 & $cmp10294;
    if ($or_cond8095) {
      var $col_096 = $sub96;
      label = 22;
      break;
    } else {
      label = 29;
      break;
    }
   case 22:
    var $col_096;
    if ($cmp106) {
      label = 23;
      break;
    } else {
      var $cond11983 = 0;
      label = 25;
      break;
    }
   case 23:
    var $15 = HEAP32[5427632 >> 2];
    var $16 = HEAP16[5243564 >> 1];
    var $conv109 = $16 & 65535;
    var $sub110 = $row_0108 - $conv109 | 0;
    var $shl = $sub110 << 1;
    var $and = $shl & 14;
    var $17 = HEAP16[5263700 >> 1];
    var $conv111 = $17 & 65535;
    var $sub112 = $col_096 - $conv111 | 0;
    var $and113 = $sub112 & 1;
    var $add114 = $and | $and113;
    var $shl115 = $add114 << 1;
    var $shr = $15 >>> ($shl115 >>> 0);
    var $and120 = $shr & 1;
    var $tobool121 = ($and120 | 0) == 0;
    if ($tobool121) {
      label = 24;
      break;
    } else {
      label = 26;
      break;
    }
   case 24:
    var $and116 = $shr & 3;
    var $cond11983 = $and116;
    label = 25;
    break;
   case 25:
    var $cond11983;
    var $mul124 = $conv9892 * $row_0108 & -1;
    var $add125 = $mul124 + $col_096 | 0;
    var $18 = HEAP32[5245032 >> 2];
    var $arrayidx126 = $18 + ($add125 << 1) | 0;
    var $19 = HEAP16[$arrayidx126 >> 1];
    var $conv127 = $19 & 65535;
    var $conv128 = $conv127 | 0;
    var $arrayidx129 = $mult + ($cond11983 << 2) | 0;
    var $20 = HEAPF32[$arrayidx129 >> 2];
    var $mul130 = $20 * $conv128;
    var $conv131 = $mul130 >= 0 ? Math.floor($mul130) : Math.ceil($mul130);
    var $cmp132 = $conv131 >>> 0 < 65535;
    var $21 = $conv131 & 65535;
    var $phitmp = $cmp132 ? $21 : -1;
    HEAP16[$arrayidx126 >> 1] = $phitmp;
    label = 26;
    break;
   case 26:
    if ($cmp178100) {
      label = 28;
      break;
    } else {
      var $c_291 = 0;
      label = 27;
      break;
    }
   case 27:
    var $c_291;
    var $add16077 = $c_291 | 1;
    var $arrayidx161 = $mult + ($add16077 << 2) | 0;
    var $22 = HEAPF32[$arrayidx161 >> 2];
    var $arrayidx162 = $mult + ($c_291 << 2) | 0;
    var $23 = HEAPF32[$arrayidx162 >> 2];
    var $add163 = $22 + $23;
    HEAPF32[$arrayidx162 >> 2] = $add163;
    var $add165 = $c_291 + 2 | 0;
    var $cmp157 = $add165 >>> 0 < $nc >>> 0;
    if ($cmp157) {
      var $c_291 = $add165;
      label = 27;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    var $inc168 = $col_096 + 1 | 0;
    var $cmp99 = $inc168 >>> 0 < $conv9892 >>> 0;
    var $cmp102 = $inc168 >>> 0 < $add93 >>> 0;
    var $or_cond80 = $cmp99 & $cmp102;
    if ($or_cond80) {
      var $col_096 = $inc168;
      label = 22;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    var $inc171 = $x_199 + 1 | 0;
    var $exitcond114 = ($inc171 | 0) == ($div | 0);
    if ($exitcond114) {
      label = 30;
      break;
    } else {
      var $x_199 = $inc171;
      label = 18;
      break;
    }
   case 30:
    if ($cmp1086) {
      label = 34;
      break;
    } else {
      var $x_2103 = 0;
      label = 31;
      break;
    }
   case 31:
    var $x_2103;
    if ($cmp178100) {
      label = 33;
      break;
    } else {
      var $c_3101 = 0;
      label = 32;
      break;
    }
   case 32:
    var $c_3101;
    var $add18176 = $c_3101 | 1;
    var $mul182 = $add18176 * $div & -1;
    var $add183 = $mul182 + $x_2103 | 0;
    var $arrayidx184 = $2 + ($add183 << 2) | 0;
    var $24 = HEAPF32[$arrayidx184 >> 2];
    var $mul185 = $c_3101 * $div & -1;
    var $add186 = $mul185 + $x_2103 | 0;
    var $arrayidx187 = $2 + ($add186 << 2) | 0;
    var $25 = HEAPF32[$arrayidx187 >> 2];
    var $add188 = $24 + $25;
    HEAPF32[$arrayidx187 >> 2] = $add188;
    var $add190 = $c_3101 + 2 | 0;
    var $cmp178 = $add190 >>> 0 < $nc >>> 0;
    if ($cmp178) {
      var $c_3101 = $add190;
      label = 32;
      break;
    } else {
      label = 33;
      break;
    }
   case 33:
    var $inc193 = $x_2103 + 1 | 0;
    var $exitcond115 = ($inc193 | 0) == ($div | 0);
    if ($exitcond115) {
      label = 34;
      break;
    } else {
      var $x_2103 = $inc193;
      label = 31;
      break;
    }
   case 34:
    var $inc196 = $row_0108 + 1 | 0;
    var $cmp56 = $inc196 >>> 0 < $conv55104 >>> 0;
    var $cmp58 = $inc196 >>> 0 < $add50 >>> 0;
    var $or_cond = $cmp56 & $cmp58;
    if ($or_cond) {
      var $row_0108 = $inc196;
      label = 17;
      break;
    } else {
      label = 35;
      break;
    }
   case 35:
    var $inc199 = $y_0113 + 1 | 0;
    var $26 = HEAP16[$arrayidx3 >> 1];
    var $27 = HEAP16[$arrayidx5 >> 1];
    var $div75 = Math.floor(($26 & 65535) / ($27 & 65535));
    var $div7 = $div75 & 65535;
    var $cmp = $inc199 >>> 0 < $div7 >>> 0;
    if ($cmp) {
      var $y_0113 = $inc199;
      label = 4;
      break;
    } else {
      label = 36;
      break;
    }
   case 36:
    _free($call);
    STACKTOP = __stackBase__;
    return;
  }
}
_phase_one_flat_field["X"] = 1;
function _phase_one_correct() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 40 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $val = __stackBase__;
    var $dev = __stackBase__ + 16;
    var $mult = __stackBase__ + 32;
    var $_b = HEAP8[5398716];
    var $tobool = $_b ^ 1;
    var $0 = HEAP32[5263444 >> 2];
    var $tobool1 = ($0 | 0) != 0;
    var $or_cond = $tobool1 & $tobool;
    if ($or_cond) {
      label = 3;
      break;
    } else {
      label = 64;
      break;
    }
   case 3:
    var $_b1 = HEAP8[5243532];
    if ($_b1) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    var $1 = HEAP32[_stderr >> 2];
    var $2 = _fwrite(5586816, 24, 1, $1);
    label = 5;
    break;
   case 5:
    var $3 = HEAP32[5264116 >> 2];
    var $4 = HEAP32[5263440 >> 2];
    var $call5 = _fseek($3, $4, 0);
    var $call6 = _get2();
    HEAP16[5262944 >> 1] = $call6;
    var $5 = HEAP32[5264116 >> 2];
    var $call7 = _fseek($5, 6, 1);
    var $6 = HEAP32[5264116 >> 2];
    var $7 = HEAP32[5263440 >> 2];
    var $call8 = _get4();
    var $add = $call8 + $7 | 0;
    var $call9 = _fseek($6, $add, 0);
    var $call10 = _get4();
    var $call11 = _get4();
    var $tobool12210 = ($call10 | 0) == 0;
    if ($tobool12210) {
      label = 64;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $arrayidx197 = $val | 0;
    var $arrayidx197_1 = $val + 4 | 0;
    var $arrayidx197_2 = $val + 8 | 0;
    var $arrayidx197_3 = $val + 12 | 0;
    var $arrayidx210 = $dev | 0;
    var $arrayidx210_1 = $dev + 4 | 0;
    var $arrayidx210_2 = $dev + 8 | 0;
    var $arrayidx210_3 = $dev + 12 | 0;
    var $mindiff_0211 = 2147483647;
    var $off_412_0212 = 0;
    var $dec213_in = $call10;
    label = 7;
    break;
   case 7:
    var $dec213_in;
    var $off_412_0212;
    var $mindiff_0211;
    var $dec213 = $dec213_in - 1 | 0;
    var $call13 = _get4();
    var $call14 = _get4();
    var $call15 = _get4();
    var $8 = HEAP32[5264116 >> 2];
    var $call16 = _ftell($8);
    var $9 = HEAP32[5264116 >> 2];
    var $10 = HEAP32[5263440 >> 2];
    var $add17 = $10 + $call15 | 0;
    var $call18 = _fseek($9, $add17, 0);
    if (($call13 | 0) == 1024) {
      label = 8;
      break;
    } else if (($call13 | 0) == 1049) {
      label = 9;
      break;
    } else if (($call13 | 0) == 1050) {
      label = 13;
      break;
    } else if (($call13 | 0) == 1025) {
      label = 37;
      break;
    } else if (($call13 | 0) == 1046 | ($call13 | 0) == 1040) {
      label = 38;
      break;
    } else if (($call13 | 0) == 1035) {
      label = 39;
      break;
    } else if (($call13 | 0) == 1042) {
      label = 40;
      break;
    } else {
      var $off_412_1 = $off_412_0212;
      var $mindiff_1 = $mindiff_0211;
      label = 42;
      break;
    }
   case 8:
    var $sub148190 = $call14 - 8 | 0;
    var $cmp149191 = ($sub148190 | 0) > -1;
    if ($cmp149191) {
      var $sub148192 = $sub148190;
      label = 24;
      break;
    } else {
      var $off_412_1 = $off_412_0212;
      var $mindiff_1 = $mindiff_0211;
      label = 42;
      break;
    }
   case 9:
    var $call20 = _get4();
    var $call22 = _getreal(11);
    var $call22_1 = _getreal(11);
    var $conv_1 = $call22_1;
    var $call22_2 = _getreal(11);
    var $call22_3 = _getreal(11);
    var $conv_3 = $call22_3;
    var $call22_4 = _getreal(11);
    var $call22_5 = _getreal(11);
    var $conv_5 = $call22_5;
    var $call22_6 = _getreal(11);
    var $conv_6 = $call22_6;
    var $call22_7 = _getreal(11);
    var $conv_7 = $call22_7;
    var $11 = HEAPF32[5245764 >> 2];
    var $sub = $11 - $conv_7;
    var $mul = $sub * $conv_6;
    var $add25 = $mul + 1;
    var $add27 = $conv_3 + $add25;
    var $i_1199 = 0;
    label = 10;
    break;
   case 10:
    var $i_1199;
    var $conv33 = $i_1199 | 0;
    var $mul34 = $conv33 * $conv_5;
    var $add36 = $mul34 + $add27;
    var $mul38 = $conv33 * $add36;
    var $add40 = $conv_1 + $mul38;
    var $cmp41 = $add40 < 65535;
    var $cond = $cmp41 ? $add40 : 65535;
    var $cmp43 = $cond < 0;
    if ($cmp43) {
      var $cond54 = 0;
      label = 12;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $phitmp154 = $cond >= 0 ? Math.floor($cond) : Math.ceil($cond);
    var $cond54 = $phitmp154;
    label = 12;
    break;
   case 12:
    var $cond54;
    var $arrayidx56 = 5428500 + ($i_1199 << 1) | 0;
    HEAP16[$arrayidx56 >> 1] = $cond54;
    var $inc58 = $i_1199 + 1 | 0;
    var $exitcond219 = ($inc58 | 0) == 65536;
    if ($exitcond219) {
      label = 18;
      break;
    } else {
      var $i_1199 = $inc58;
      label = 10;
      break;
    }
   case 13:
    var $call67 = _getreal(11);
    var $conv68 = $call67;
    var $call67_1 = _getreal(11);
    var $conv68_1 = $call67_1;
    var $call67_2 = _getreal(11);
    var $conv68_2 = $call67_2;
    var $call67_3 = _getreal(11);
    var $conv68_3 = $call67_3;
    var $i_3196 = 0;
    label = 14;
    break;
   case 14:
    var $i_3196;
    var $conv81 = $i_3196 | 0;
    var $mul82 = 0;
    var $add84 = $mul82 + $conv68_3;
    var $mul82_1 = $conv81 * $add84;
    var $add84_1 = $mul82_1 + $conv68_2;
    var $mul82_2 = $conv81 * $add84_1;
    var $add84_2 = $mul82_2 + $conv68_1;
    var $mul82_3 = $conv81 * $add84_2;
    var $add84_3 = $mul82_3 + $conv68;
    var $add87 = $conv81 + $add84_3;
    var $cmp88 = $add87 < 65535;
    if ($cmp88) {
      label = 15;
      break;
    } else {
      var $cond111 = -1;
      label = 17;
      break;
    }
   case 15:
    var $phitmp152 = $add87 < 0;
    var $not_phitmp152 = $phitmp152 ^ 1;
    var $_mux = $not_phitmp152 << 31 >> 31;
    if ($phitmp152) {
      var $cond111 = $_mux;
      label = 17;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $phitmp153 = $add87 >= 0 ? Math.floor($add87) : Math.ceil($add87);
    var $cond111 = $phitmp153;
    label = 17;
    break;
   case 17:
    var $cond111;
    var $arrayidx113 = 5428500 + ($i_3196 << 1) | 0;
    HEAP16[$arrayidx113 >> 1] = $cond111;
    var $inc115 = $i_3196 + 1 | 0;
    var $exitcond = ($inc115 | 0) == 65536;
    if ($exitcond) {
      label = 18;
      break;
    } else {
      var $i_3196 = $inc115;
      label = 14;
      break;
    }
   case 18:
    var $12 = HEAP16[5245036 >> 1];
    var $cmp119206 = $12 << 16 >> 16 == 0;
    if ($cmp119206) {
      var $off_412_1 = $off_412_0212;
      var $mindiff_1 = $mindiff_0211;
      label = 42;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $and = $call13 & 1;
    var $13 = -$and | 0;
    var $_pre35 = HEAP16[5245028 >> 1];
    var $row_0207 = 0;
    label = 20;
    break;
   case 20:
    var $row_0207;
    var $14 = HEAP32[5245756 >> 2];
    var $mul122 = $14 & $13;
    var $conv124200 = $_pre35 & 65535;
    var $cmp125201 = $mul122 >>> 0 < $conv124200 >>> 0;
    if ($cmp125201) {
      label = 21;
      break;
    } else {
      label = 23;
      break;
    }
   case 21:
    var $_pre39 = HEAP32[5245032 >> 2];
    var $col_0202 = $mul122;
    label = 22;
    break;
   case 22:
    var $col_0202;
    var $mul129 = $conv124200 * $row_0207 & -1;
    var $add130 = $mul129 + $col_0202 | 0;
    var $arrayidx131 = $_pre39 + ($add130 << 1) | 0;
    var $15 = HEAP16[$arrayidx131 >> 1];
    var $idxprom = $15 & 65535;
    var $arrayidx132 = 5428500 + ($idxprom << 1) | 0;
    var $16 = HEAP16[$arrayidx132 >> 1];
    HEAP16[$arrayidx131 >> 1] = $16;
    var $inc138 = $col_0202 + 1 | 0;
    var $cmp125 = $inc138 >>> 0 < $conv124200 >>> 0;
    if ($cmp125) {
      var $col_0202 = $inc138;
      label = 22;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    var $inc141 = $row_0207 + 1 | 0;
    var $conv118 = $12 & 65535;
    var $cmp119 = $inc141 >>> 0 < $conv118 >>> 0;
    if ($cmp119) {
      var $row_0207 = $inc141;
      label = 20;
      break;
    } else {
      var $off_412_1 = $off_412_0212;
      var $mindiff_1 = $mindiff_0211;
      label = 42;
      break;
    }
   case 24:
    var $sub148192;
    var $call152 = _get2();
    var $conv153 = $call152 & 65535;
    var $call154 = _get2();
    var $conv155 = $call154 & 65535;
    var $call156 = _get2();
    var $call158 = _get2();
    var $17 = HEAP16[5245028 >> 1];
    var $cmp160 = ($call152 & 65535) < ($17 & 65535);
    if ($cmp160) {
      label = 25;
      break;
    } else {
      label = 36;
      break;
    }
   case 25:
    if ($call156 << 16 >> 16 == 131) {
      label = 26;
      break;
    } else if ($call156 << 16 >> 16 == 129) {
      label = 32;
      break;
    } else {
      label = 36;
      break;
    }
   case 26:
    var $18 = HEAP16[5245036 >> 1];
    var $cmp169187 = $18 << 16 >> 16 == 0;
    if ($cmp169187) {
      label = 36;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    var $sub250 = $conv153 - 2 | 0;
    var $add252 = $conv153 + 2 | 0;
    var $add195 = $conv153 - 1 | 0;
    var $add195_1 = $conv153 + 1 | 0;
    var $_pre36 = HEAP32[5427632 >> 2];
    var $_pre37 = HEAP16[5243564 >> 1];
    var $_pre38 = HEAP16[5263700 >> 1];
    var $row_1188 = 0;
    label = 28;
    break;
   case 28:
    var $row_1188;
    var $conv172 = $_pre37 & 65535;
    var $sub173 = $row_1188 - $conv172 | 0;
    var $shl = $sub173 << 1;
    var $and174 = $shl & 14;
    var $conv175 = $_pre38 & 65535;
    var $sub176 = $conv153 - $conv175 | 0;
    var $and177 = $sub176 & 1;
    var $add178 = $and174 | $and177;
    var $shl179 = $add178 << 1;
    var $shr = $_pre36 >>> ($shl179 >>> 0);
    var $and180 = $shr & 3;
    var $cmp181 = ($and180 | 0) == 1;
    if ($cmp181) {
      label = 29;
      break;
    } else {
      label = 30;
      break;
    }
   case 29:
    var $add191 = $row_1188 - 1 | 0;
    var $call196 = _raw($add191, $add195);
    HEAP32[$arrayidx197 >> 2] = $call196;
    var $call196_1 = _raw($add191, $add195_1);
    HEAP32[$arrayidx197_1 >> 2] = $call196_1;
    var $add198_1 = $call196_1 + $call196 | 0;
    var $add191_2 = $row_1188 + 1 | 0;
    var $call196_2 = _raw($add191_2, $add195);
    HEAP32[$arrayidx197_2 >> 2] = $call196_2;
    var $add198_2 = $call196_2 + $add198_1 | 0;
    var $call196_3 = _raw($add191_2, $add195_1);
    HEAP32[$arrayidx197_3 >> 2] = $call196_3;
    var $add198_3 = $call196_3 + $add198_2 | 0;
    var $shl207 = $call196 << 2;
    var $sub208 = $shl207 - $add198_3 | 0;
    var $ispos = ($sub208 | 0) > -1;
    var $neg = -$sub208 | 0;
    var $call209 = $ispos ? $sub208 : $neg;
    HEAP32[$arrayidx210 >> 2] = $call209;
    var $shl207_1 = $call196_1 << 2;
    var $sub208_1 = $shl207_1 - $add198_3 | 0;
    var $ispos_1 = ($sub208_1 | 0) > -1;
    var $neg_1 = -$sub208_1 | 0;
    var $call209_1 = $ispos_1 ? $sub208_1 : $neg_1;
    HEAP32[$arrayidx210_1 >> 2] = $call209_1;
    var $cmp213_1 = ($call209 | 0) < ($call209_1 | 0);
    var $i_5_max_0_1 = $cmp213_1 & 1;
    var $shl207_2 = $call196_2 << 2;
    var $sub208_2 = $shl207_2 - $add198_3 | 0;
    var $ispos_2 = ($sub208_2 | 0) > -1;
    var $neg_2 = -$sub208_2 | 0;
    var $call209_2 = $ispos_2 ? $sub208_2 : $neg_2;
    HEAP32[$arrayidx210_2 >> 2] = $call209_2;
    var $arrayidx211_2 = $dev + ($i_5_max_0_1 << 2) | 0;
    var $19 = HEAP32[$arrayidx211_2 >> 2];
    var $cmp213_2 = ($19 | 0) < ($call209_2 | 0);
    var $i_5_max_0_2 = $cmp213_2 ? 2 : $i_5_max_0_1;
    var $shl207_3 = $call196_3 << 2;
    var $sub208_3 = $shl207_3 - $add198_3 | 0;
    var $ispos_3 = ($sub208_3 | 0) > -1;
    var $neg_3 = -$sub208_3 | 0;
    var $call209_3 = $ispos_3 ? $sub208_3 : $neg_3;
    HEAP32[$arrayidx210_3 >> 2] = $call209_3;
    var $arrayidx211_3 = $dev + ($i_5_max_0_2 << 2) | 0;
    var $20 = HEAP32[$arrayidx211_3 >> 2];
    var $cmp213_3 = ($20 | 0) < ($call209_3 | 0);
    var $i_5_max_0_3 = $cmp213_3 ? 3 : $i_5_max_0_2;
    var $arrayidx220 = $val + ($i_5_max_0_3 << 2) | 0;
    var $21 = HEAP32[$arrayidx220 >> 2];
    var $sub221 = $add198_3 - $21 | 0;
    var $conv222 = $sub221 | 0;
    var $div = $conv222 / 3;
    var $add223 = $div + .5;
    var $conv224 = $add223 >= 0 ? Math.floor($add223) : Math.ceil($add223);
    var $conv225 = $17 & 65535;
    var $mul226 = $conv225 * $row_1188 & -1;
    var $add227 = $mul226 + $conv153 | 0;
    var $22 = HEAP32[5245032 >> 2];
    var $arrayidx228 = $22 + ($add227 << 1) | 0;
    HEAP16[$arrayidx228 >> 1] = $conv224;
    var $inc265_pre_phi = $add191_2;
    label = 31;
    break;
   case 30:
    var $add237 = $row_1188 - 2 | 0;
    var $call242 = _raw($add237, $sub250);
    var $call242_1 = _raw($add237, $add252);
    var $add243_1 = $call242_1 + $call242 | 0;
    var $add237_2 = $row_1188 + 2 | 0;
    var $call242_2 = _raw($add237_2, $sub250);
    var $add243_2 = $call242_2 + $add243_1 | 0;
    var $call242_3 = _raw($add237_2, $add252);
    var $add243_3 = $call242_3 + $add243_2 | 0;
    var $conv247 = $add243_3 | 0;
    var $mul248 = $conv247 * .0732233;
    var $add249 = $mul248 + .5;
    var $call251 = _raw($row_1188, $sub250);
    var $call253 = _raw($row_1188, $add252);
    var $add254 = $call253 + $call251 | 0;
    var $conv255 = $add254 | 0;
    var $mul256 = $conv255 * .3535534;
    var $add257 = $add249 + $mul256;
    var $conv258 = $add257 >= 0 ? Math.floor($add257) : Math.ceil($add257);
    var $conv259 = $17 & 65535;
    var $mul260 = $conv259 * $row_1188 & -1;
    var $add261 = $mul260 + $conv153 | 0;
    var $23 = HEAP32[5245032 >> 2];
    var $arrayidx262 = $23 + ($add261 << 1) | 0;
    HEAP16[$arrayidx262 >> 1] = $conv258;
    var $inc265_pre = $row_1188 + 1 | 0;
    var $inc265_pre_phi = $inc265_pre;
    label = 31;
    break;
   case 31:
    var $inc265_pre_phi;
    var $conv168 = $18 & 65535;
    var $cmp169 = $inc265_pre_phi >>> 0 < $conv168 >>> 0;
    if ($cmp169) {
      var $row_1188 = $inc265_pre_phi;
      label = 28;
      break;
    } else {
      label = 36;
      break;
    }
   case 32:
    var $24 = HEAP16[5245036 >> 1];
    var $cmp272 = ($call154 & 65535) < ($24 & 65535);
    if ($cmp272) {
      label = 33;
      break;
    } else {
      label = 36;
      break;
    }
   case 33:
    var $25 = HEAP32[5427632 >> 2];
    var $26 = HEAP16[5243564 >> 1];
    var $conv276 = $26 & 65535;
    var $sub277 = $conv155 - $conv276 | 0;
    var $shl278 = $sub277 << 1;
    var $and279 = $shl278 & 14;
    var $27 = HEAP16[5263700 >> 1];
    var $conv280 = $27 & 65535;
    var $sub281 = $conv153 - $conv280 | 0;
    var $and282 = $sub281 & 1;
    var $add283 = $and279 | $and282;
    var $shl284 = $add283 << 1;
    var $shr285 = $25 >>> ($shl284 >>> 0);
    var $and286 = $shr285 & 3;
    var $cmp287 = ($and286 | 0) != 1;
    var $conv288 = $cmp287 & 1;
    var $mul289 = $conv288 << 2;
    var $add291150 = $mul289 | 8;
    var $i_7177 = $mul289;
    var $sum_2178 = 0;
    label = 34;
    break;
   case 34:
    var $sum_2178;
    var $i_7177;
    var $arrayidx296 = 5245704 + ($i_7177 << 1) | 0;
    var $28 = HEAP8[$arrayidx296];
    var $conv297 = $28 << 24 >> 24;
    var $add298 = $conv297 + $conv155 | 0;
    var $arrayidx300 = 5245705 + ($i_7177 << 1) | 0;
    var $29 = HEAP8[$arrayidx300];
    var $conv301 = $29 << 24 >> 24;
    var $add302 = $conv301 + $conv153 | 0;
    var $call303 = _raw($add298, $add302);
    var $add304 = $call303 + $sum_2178 | 0;
    var $inc306 = $i_7177 + 1 | 0;
    var $cmp292 = ($inc306 | 0) < ($add291150 | 0);
    if ($cmp292) {
      var $i_7177 = $inc306;
      var $sum_2178 = $add304;
      label = 34;
      break;
    } else {
      label = 35;
      break;
    }
   case 35:
    var $phitmp215 = $add304 + 4 | 0;
    var $phitmp216 = $phitmp215 >>> 3;
    var $phitmp217 = $phitmp216 & 65535;
    var $conv311 = $17 & 65535;
    var $mul312 = $conv311 * $conv155 & -1;
    var $add313 = $mul312 + $conv153 | 0;
    var $30 = HEAP32[5245032 >> 2];
    var $arrayidx314 = $30 + ($add313 << 1) | 0;
    HEAP16[$arrayidx314 >> 1] = $phitmp217;
    label = 36;
    break;
   case 36:
    var $sub148 = $sub148192 - 8 | 0;
    var $cmp149 = ($sub148 | 0) > -1;
    if ($cmp149) {
      var $sub148192 = $sub148;
      label = 24;
      break;
    } else {
      var $off_412_1 = $off_412_0212;
      var $mindiff_1 = $mindiff_0211;
      label = 42;
      break;
    }
   case 37:
    _phase_one_flat_field(1, 2);
    var $off_412_1 = $off_412_0212;
    var $mindiff_1 = $mindiff_0211;
    label = 42;
    break;
   case 38:
    _phase_one_flat_field(0, 2);
    var $off_412_1 = $off_412_0212;
    var $mindiff_1 = $mindiff_0211;
    label = 42;
    break;
   case 39:
    _phase_one_flat_field(0, 4);
    var $off_412_1 = $off_412_0212;
    var $mindiff_1 = $mindiff_0211;
    label = 42;
    break;
   case 40:
    var $31 = HEAP32[5264116 >> 2];
    var $call336 = _fseek($31, 36, 1);
    var $call337 = _get2();
    var $conv338 = $call337 & 65535;
    var $32 = HEAP32[5245760 >> 2];
    var $sub339 = $conv338 - $32 | 0;
    var $ispos155 = ($sub339 | 0) > -1;
    var $neg156 = -$sub339 | 0;
    var $call340 = $ispos155 ? $sub339 : $neg156;
    var $cmp341 = ($mindiff_0211 | 0) > ($call340 | 0);
    if ($cmp341) {
      label = 41;
      break;
    } else {
      var $off_412_1 = $off_412_0212;
      var $mindiff_1 = $mindiff_0211;
      label = 42;
      break;
    }
   case 41:
    var $33 = HEAP32[5264116 >> 2];
    var $call344 = _ftell($33);
    var $sub345 = $call344 - 38 | 0;
    var $off_412_1 = $sub345;
    var $mindiff_1 = $call340;
    label = 42;
    break;
   case 42:
    var $mindiff_1;
    var $off_412_1;
    var $34 = HEAP32[5264116 >> 2];
    var $call354 = _fseek($34, $call16, 0);
    var $tobool12 = ($dec213 | 0) == 0;
    if ($tobool12) {
      label = 43;
      break;
    } else {
      var $mindiff_0211 = $mindiff_1;
      var $off_412_0212 = $off_412_1;
      var $dec213_in = $dec213;
      label = 7;
      break;
    }
   case 43:
    var $tobool356 = ($off_412_1 | 0) == 0;
    if ($tobool356) {
      label = 64;
      break;
    } else {
      label = 45;
      break;
    }
   case 44:
    var $cmp407171_1 = ($mul374 | 0) != 0;
    if ($cmp407171_1) {
      var $j_1172_1 = 0;
      label = 67;
      break;
    } else {
      label = 48;
      break;
    }
   case 45:
    var $35 = HEAP32[5264116 >> 2];
    var $call358 = _fseek($35, $off_412_1, 0);
    var $call363 = _get4();
    var $call363_1 = _get4();
    var $and364_1 = $call363_1 & 32767;
    var $call363_2 = _get4();
    var $and364_2 = $call363_2 & 32767;
    var $call363_3 = _get4();
    var $and364_3 = $call363_3 & 32767;
    var $call363_4 = _get4();
    var $and364_4 = $call363_4 & 32767;
    var $call363_5 = _get4();
    var $call363_6 = _get4();
    var $call363_7 = _get4();
    var $call363_8 = _get4();
    var $mul371 = $and364_3 * $and364_1 & -1;
    var $mul374 = $and364_4 * $and364_2 & -1;
    var $add375 = $mul374 + $mul371 | 0;
    var $call376 = _calloc($add375, 6);
    var $36 = $call376;
    _merror($call376, 5586708);
    var $add_ptr388 = $36 + ($add375 << 2) | 0;
    var $37 = $add_ptr388;
    var $call396 = _get2();
    var $cmp407171 = ($mul371 | 0) != 0;
    if ($cmp407171) {
      var $j_1172 = 0;
      label = 46;
      break;
    } else {
      label = 44;
      break;
    }
   case 46:
    var $j_1172;
    var $call410 = _getreal(11);
    var $conv411 = $call410;
    var $arrayidx413 = $36 + ($j_1172 << 2) | 0;
    HEAPF32[$arrayidx413 >> 2] = $conv411;
    var $inc415 = $j_1172 + 1 | 0;
    var $cmp407 = ($inc415 | 0) < ($mul371 | 0);
    if ($cmp407) {
      var $j_1172 = $inc415;
      label = 46;
      break;
    } else {
      label = 44;
      break;
    }
   case 47:
    if ($cmp407171_1) {
      var $j_2168_1 = 0;
      label = 65;
      break;
    } else {
      label = 66;
      break;
    }
   case 48:
    if ($cmp407171) {
      var $j_2168 = 0;
      label = 50;
      break;
    } else {
      label = 47;
      break;
    }
   case 49:
    var $conv454 = $and364_3 | 0;
    var $arrayidx533 = $mult | 0;
    var $arrayidx536 = $mult + 4 | 0;
    var $_pre = HEAP16[5245028 >> 1];
    var $row_2164 = 0;
    var $38 = $_pre;
    label = 51;
    break;
   case 50:
    var $j_2168;
    var $call433 = _get2();
    var $arrayidx435 = $37 + ($j_2168 << 1) | 0;
    HEAP16[$arrayidx435 >> 1] = $call433;
    var $inc437 = $j_2168 + 1 | 0;
    var $cmp430 = ($inc437 | 0) < ($mul371 | 0);
    if ($cmp430) {
      var $j_2168 = $inc437;
      label = 50;
      break;
    } else {
      label = 47;
      break;
    }
   case 51:
    var $38;
    var $row_2164;
    var $cmp449159 = $38 << 16 >> 16 == 0;
    if ($cmp449159) {
      var $47 = 0;
      label = 62;
      break;
    } else {
      label = 52;
      break;
    }
   case 52:
    var $conv448158 = $38 & 65535;
    var $conv539 = $row_2164 >>> 0;
    var $_pre34 = HEAP32[5245032 >> 2];
    var $col_1160 = 0;
    var $conv448161 = $conv448158;
    label = 53;
    break;
   case 53:
    var $conv448161;
    var $col_1160;
    var $conv452 = $col_1160 >>> 0;
    var $mul455 = $conv452 * $conv454;
    var $conv457 = $conv448161 | 0;
    var $div458 = $mul455 / $conv457;
    var $conv459 = $div458 & -1;
    var $conv460 = $conv459 | 0;
    var $mul463 = $conv448161 * $row_2164 & -1;
    var $add464 = $mul463 + $col_1160 | 0;
    var $arrayidx465 = $_pre34 + ($add464 << 1) | 0;
    var $39 = HEAP16[$arrayidx465 >> 1];
    var $conv466 = $39 & 65535;
    var $conv467 = $conv466 | 0;
    var $mul468 = $conv467 * .5;
    var $conv469 = $mul468;
    var $add471 = $conv459 + 2 | 0;
    var $i_11157 = $conv459;
    label = 54;
    break;
   case 54:
    var $i_11157;
    var $mul481 = $and364_1 * $i_11157 & -1;
    var $k_0 = 0;
    var $j_3 = 0;
    label = 55;
    break;
   case 55:
    var $j_3;
    var $k_0;
    var $cmp477 = ($j_3 | 0) < ($and364_1 | 0);
    if ($cmp477) {
      label = 56;
      break;
    } else {
      var $k_1 = $k_0;
      label = 57;
      break;
    }
   case 56:
    var $add482 = $mul481 + $j_3 | 0;
    var $arrayidx484 = $37 + ($add482 << 1) | 0;
    var $40 = HEAP16[$arrayidx484 >> 1];
    var $conv485 = $40 & 65535;
    var $conv486 = $conv485 | 0;
    var $cmp487 = $conv469 < $conv486;
    var $inc492 = $j_3 + 1 | 0;
    if ($cmp487) {
      var $k_1 = $add482;
      label = 57;
      break;
    } else {
      var $k_0 = $add482;
      var $j_3 = $inc492;
      label = 55;
      break;
    }
   case 57:
    var $k_1;
    var $cmp494 = ($j_3 | 0) == 0;
    var $cmp498 = ($j_3 | 0) == ($and364_1 | 0);
    var $or_cond221 = $cmp494 | $cmp498;
    if ($or_cond221) {
      label = 58;
      break;
    } else {
      label = 59;
      break;
    }
   case 58:
    var $sub519_pre = $k_1 - 1 | 0;
    var $cond518 = 0;
    var $sub519_pre_phi = $sub519_pre;
    label = 60;
    break;
   case 59:
    var $arrayidx503 = $37 + ($k_1 << 1) | 0;
    var $41 = HEAP16[$arrayidx503 >> 1];
    var $conv504 = $41 & 65535;
    var $conv505 = $conv504 | 0;
    var $sub506 = $conv505 - $conv469;
    var $sub510 = $k_1 - 1 | 0;
    var $arrayidx512 = $37 + ($sub510 << 1) | 0;
    var $42 = HEAP16[$arrayidx512 >> 1];
    var $conv513 = $42 & 65535;
    var $sub514 = $conv504 - $conv513 | 0;
    var $conv515 = $sub514 | 0;
    var $div516 = $sub506 / $conv515;
    var $cond518 = $div516;
    var $sub519_pre_phi = $sub510;
    label = 60;
    break;
   case 60:
    var $sub519_pre_phi;
    var $cond518;
    var $arrayidx521 = $36 + ($sub519_pre_phi << 2) | 0;
    var $43 = HEAPF32[$arrayidx521 >> 2];
    var $mul522 = $cond518 * $43;
    var $arrayidx524 = $36 + ($k_1 << 2) | 0;
    var $44 = HEAPF32[$arrayidx524 >> 2];
    var $sub525 = 1 - $cond518;
    var $mul526 = $sub525 * $44;
    var $add527 = $mul522 + $mul526;
    var $sub528 = $i_11157 - $conv459 | 0;
    var $arrayidx529 = $mult + ($sub528 << 2) | 0;
    HEAPF32[$arrayidx529 >> 2] = $add527;
    var $inc531 = $i_11157 + 1 | 0;
    var $cmp472 = ($inc531 | 0) < ($add471 | 0);
    if ($cmp472) {
      var $i_11157 = $inc531;
      label = 54;
      break;
    } else {
      label = 61;
      break;
    }
   case 61:
    var $sub461 = $div458 - $conv460;
    var $45 = HEAPF32[$arrayidx533 >> 2];
    var $sub534 = 1 - $sub461;
    var $mul535 = $sub534 * $45;
    var $46 = HEAPF32[$arrayidx536 >> 2];
    var $mul537 = $sub461 * $46;
    var $add538 = $mul535 + $mul537;
    var $mul540 = $conv539 * $add538;
    var $add541 = $conv469 + $mul540;
    var $mul542 = $add541 * 2;
    var $conv543 = $mul542 & -1;
    var $cmp544 = ($conv543 | 0) < 65535;
    var $cond549 = $cmp544 ? $conv543 : 65535;
    var $cmp550 = ($cond549 | 0) < 0;
    var $phitmp = $cond549 & 65535;
    var $cond561 = $cmp550 ? 0 : $phitmp;
    var $conv563 = $_pre & 65535;
    var $mul564 = $conv563 * $row_2164 & -1;
    var $add565 = $mul564 + $col_1160 | 0;
    var $arrayidx566 = $_pre34 + ($add565 << 1) | 0;
    HEAP16[$arrayidx566 >> 1] = $cond561;
    var $inc568 = $col_1160 + 1 | 0;
    var $cmp449 = $inc568 >>> 0 < $conv563 >>> 0;
    if ($cmp449) {
      var $col_1160 = $inc568;
      var $conv448161 = $conv563;
      label = 53;
      break;
    } else {
      var $47 = $_pre;
      label = 62;
      break;
    }
   case 62:
    var $47;
    var $inc571 = $row_2164 + 1 | 0;
    var $conv443 = $48 & 65535;
    var $cmp444 = $inc571 >>> 0 < $conv443 >>> 0;
    if ($cmp444) {
      var $row_2164 = $inc571;
      var $38 = $47;
      label = 51;
      break;
    } else {
      label = 63;
      break;
    }
   case 63:
    _free($call376);
    label = 64;
    break;
   case 64:
    STACKTOP = __stackBase__;
    return;
   case 65:
    var $j_2168_1;
    var $call433_1 = _get2();
    var $add_ptr394_sum = $mul371 + $j_2168_1 | 0;
    var $arrayidx435_1 = $37 + ($add_ptr394_sum << 1) | 0;
    HEAP16[$arrayidx435_1 >> 1] = $call433_1;
    var $inc437_1 = $j_2168_1 + 1 | 0;
    var $cmp430_1 = ($inc437_1 | 0) < ($mul374 | 0);
    if ($cmp430_1) {
      var $j_2168_1 = $inc437_1;
      label = 65;
      break;
    } else {
      label = 66;
      break;
    }
   case 66:
    var $48 = HEAP16[5245036 >> 1];
    var $cmp444163 = $48 << 16 >> 16 == 0;
    if ($cmp444163) {
      label = 63;
      break;
    } else {
      label = 49;
      break;
    }
   case 67:
    var $j_1172_1;
    var $call410_1 = _getreal(11);
    var $conv411_1 = $call410_1;
    var $add_ptr_sum = $mul371 + $j_1172_1 | 0;
    var $arrayidx413_1 = $36 + ($add_ptr_sum << 2) | 0;
    HEAPF32[$arrayidx413_1 >> 2] = $conv411_1;
    var $inc415_1 = $j_1172_1 + 1 | 0;
    var $cmp407_1 = ($inc415_1 | 0) < ($mul374 | 0);
    if ($cmp407_1) {
      var $j_1172_1 = $inc415_1;
      label = 67;
      break;
    } else {
      label = 48;
      break;
    }
  }
}
_phase_one_correct["X"] = 1;
function _phase_one_load_raw() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5264116 >> 2];
    var $1 = HEAP32[5245744 >> 2];
    var $call = _fseek($0, $1, 0);
    var $call1 = _get2();
    var $call2 = _get2();
    var $2 = HEAP32[5245740 >> 2];
    var $cmp = ($2 | 0) == 1;
    var $3 = HEAP32[5264116 >> 2];
    var $4 = HEAP32[5428492 >> 2];
    var $call3 = _fseek($3, $4, 0);
    var $5 = HEAP32[5245032 >> 2];
    var $6 = HEAP16[5245028 >> 1];
    var $conv4 = $6 & 65535;
    var $7 = HEAP16[5245036 >> 1];
    var $conv5 = $7 & 65535;
    var $mul = $conv5 * $conv4 & -1;
    _read_shorts($5, $mul);
    var $8 = HEAP32[5245740 >> 2];
    var $tobool = ($8 | 0) == 0;
    if ($tobool) {
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $9 = HEAP16[5245028 >> 1];
    var $conv614 = $9 & 65535;
    var $10 = HEAP16[5245036 >> 1];
    var $conv715 = $10 & 65535;
    var $mul816 = $conv715 * $conv614 & -1;
    var $cmp917 = ($mul816 | 0) == 0;
    if ($cmp917) {
      label = 6;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $conv18 = $cmp ? 21845 : 4948;
    var $neg = $conv18 ^ -1;
    var $_pre = HEAP32[5245032 >> 2];
    var $i_018 = 0;
    label = 5;
    break;
   case 5:
    var $i_018;
    var $arrayidx = $_pre + ($i_018 << 1) | 0;
    var $11 = HEAP16[$arrayidx >> 1];
    var $xor11 = $11 ^ $call1;
    var $xor = $xor11 & 65535;
    var $add1312 = $i_018 | 1;
    var $arrayidx14 = $_pre + ($add1312 << 1) | 0;
    var $12 = HEAP16[$arrayidx14 >> 1];
    var $xor1713 = $12 ^ $call2;
    var $xor17 = $xor1713 & 65535;
    var $and = $xor & $conv18;
    var $and20 = $xor17 & $neg;
    var $or = $and20 | $and;
    var $conv21 = $or & 65535;
    HEAP16[$arrayidx >> 1] = $conv21;
    var $and25 = $xor17 & $conv18;
    var $and28 = $xor & $neg;
    var $or29 = $and25 | $and28;
    var $conv30 = $or29 & 65535;
    HEAP16[$arrayidx14 >> 1] = $conv30;
    var $add33 = $i_018 + 2 | 0;
    var $cmp9 = ($add33 | 0) < ($mul816 | 0);
    if ($cmp9) {
      var $i_018 = $add33;
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    return;
  }
}
_phase_one_load_raw["X"] = 1;
function _ph1_bithuff($nbits, $huff) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    if (($nbits | 0) == -1) {
      label = 3;
      break;
    } else if (($nbits | 0) == 0) {
      var $retval_0 = 0;
      label = 9;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    HEAP32[5245728 >> 2] = 0;
    var $$etemp$0$0 = 0;
    var $$etemp$0$1 = 0;
    var $st$3$0 = 5245732;
    HEAP32[$st$3$0 >> 2] = $$etemp$0$0;
    var $st$3$1 = 5245736;
    HEAP32[$st$3$1 >> 2] = $$etemp$0$1;
    var $retval_0 = 0;
    label = 9;
    break;
   case 4:
    var $0 = HEAP32[5245728 >> 2];
    var $cmp4 = ($0 | 0) < ($nbits | 0);
    var $st$2$0 = 5245732;
    var $1$0 = HEAP32[$st$2$0 >> 2];
    var $st$2$1 = 5245736;
    var $1$1 = HEAP32[$st$2$1 >> 2];
    if ($cmp4) {
      label = 5;
      break;
    } else {
      var $4 = $0;
      var $3$1 = $1$1;
      var $3$0 = $1$0;
      label = 6;
      break;
    }
   case 5:
    var $shl$0 = 0;
    var $shl$1 = $1$0;
    var $call = _get4();
    var $conv$0 = $call;
    var $conv$1 = 0;
    var $or$0 = $conv$0 | $shl$0;
    var $or$1 = $conv$1 | $shl$1;
    var $st$7$0 = 5245732;
    HEAP32[$st$7$0 >> 2] = $or$0;
    var $st$7$1 = 5245736;
    HEAP32[$st$7$1 >> 2] = $or$1;
    var $2 = HEAP32[5245728 >> 2];
    var $add = $2 + 32 | 0;
    HEAP32[5245728 >> 2] = $add;
    var $4 = $add;
    var $3$1 = $or$1;
    var $3$0 = $or$0;
    label = 6;
    break;
   case 6:
    var $3$0;
    var $3$1;
    var $4;
    var $sub = 64 - $4 | 0;
    var $sh_prom$0 = $sub;
    Runtime.bitshift64($3$0, $3$1, 0, $sh_prom$0);
    var $shl7$0 = HEAP32[tempDoublePtr >> 2], $shl7$1 = HEAP32[tempDoublePtr + 4 >> 2];
    var $sub8 = 64 - $nbits | 0;
    var $sh_prom9$0 = $sub8;
    Runtime.bitshift64($shl7$0, $shl7$1, 2, $sh_prom9$0);
    var $shr$0 = HEAP32[tempDoublePtr >> 2];
    var $conv10$0 = $shr$0;
    var $conv10 = $conv10$0;
    var $tobool = ($huff | 0) == 0;
    if ($tobool) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $arrayidx = $huff + ($conv10 << 1) | 0;
    var $5 = HEAP16[$arrayidx >> 1];
    var $conv12 = $5 & 65535;
    var $shr139 = $conv12 >>> 8;
    var $sub14 = $4 - $shr139 | 0;
    HEAP32[5245728 >> 2] = $sub14;
    var $conv17 = $conv12 & 255;
    var $retval_0 = $conv17;
    label = 9;
    break;
   case 8:
    var $sub19 = $4 - $nbits | 0;
    HEAP32[5245728 >> 2] = $sub19;
    var $retval_0 = $conv10;
    label = 9;
    break;
   case 9:
    var $retval_0;
    return $retval_0;
  }
}
_ph1_bithuff["X"] = 1;
function _phase_one_load_raw_c() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $len = __stackBase__;
    var $pred = __stackBase__ + 8;
    var $0 = HEAP16[5245028 >> 1];
    var $conv = $0 & 65535;
    var $1 = HEAP16[5245036 >> 1];
    var $conv1 = $1 & 65535;
    var $mul = $conv1 << 2;
    var $add = $mul + $conv | 0;
    var $call = _calloc($add, 2);
    var $2 = $call;
    _merror($call, 5586588);
    var $3 = HEAP16[5245028 >> 1];
    var $conv2 = $3 & 65535;
    var $add_ptr = $2 + ($conv2 << 1) | 0;
    var $4 = $add_ptr;
    var $5 = HEAP32[5264116 >> 2];
    var $6 = HEAP32[5244068 >> 2];
    var $call3 = _fseek($5, $6, 0);
    var $7 = HEAP16[5245036 >> 1];
    var $conv467 = $7 & 65535;
    var $cmp68 = $7 << 16 >> 16 == 0;
    if ($cmp68) {
      var $conv4_lcssa = $conv467;
      label = 4;
      break;
    } else {
      var $row_069 = 0;
      label = 3;
      break;
    }
   case 3:
    var $row_069;
    var $call6 = _get4();
    var $arrayidx = $4 + ($row_069 << 2) | 0;
    HEAP32[$arrayidx >> 2] = $call6;
    var $inc = $row_069 + 1 | 0;
    var $8 = HEAP16[5245036 >> 1];
    var $conv4 = $8 & 65535;
    var $cmp = ($inc | 0) < ($conv4 | 0);
    if ($cmp) {
      var $row_069 = $inc;
      label = 3;
      break;
    } else {
      var $conv4_lcssa = $conv4;
      label = 4;
      break;
    }
   case 4:
    var $conv4_lcssa;
    var $9 = $add_ptr;
    var $10 = HEAP32[5264116 >> 2];
    var $11 = HEAP32[5245752 >> 2];
    var $call9 = _fseek($10, $11, 0);
    var $12 = HEAP32[5245752 >> 2];
    var $tobool = ($12 | 0) == 0;
    if ($tobool) {
      var $i_066 = 0;
      label = 8;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $arraydecay = $9 + ($conv4_lcssa << 2) | 0;
    var $13 = HEAP16[5245036 >> 1];
    var $conv11 = $13 & 65535;
    var $mul12 = $conv11 << 1;
    _read_shorts($arraydecay, $mul12);
    var $i_066 = 0;
    label = 8;
    break;
   case 6:
    var $14 = HEAP16[5245036 >> 1];
    var $cmp2763 = $14 << 16 >> 16 == 0;
    if ($cmp2763) {
      label = 33;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $arrayidx34 = $pred + 4 | 0;
    var $arrayidx35 = $pred | 0;
    var $arrayidx45 = $len + 4 | 0;
    var $arrayidx46 = $len | 0;
    var $row_164 = 0;
    label = 9;
    break;
   case 8:
    var $i_066;
    var $mul17 = $i_066 * $i_066 & -1;
    var $conv18 = $mul17 | 0;
    var $div = $conv18 / 3.969;
    var $add19 = $div + .5;
    var $conv20 = $add19 >= 0 ? Math.floor($add19) : Math.ceil($add19);
    var $arrayidx21 = 5428500 + ($i_066 << 1) | 0;
    HEAP16[$arrayidx21 >> 1] = $conv20;
    var $inc23 = $i_066 + 1 | 0;
    var $exitcond = ($inc23 | 0) == 256;
    if ($exitcond) {
      label = 6;
      break;
    } else {
      var $i_066 = $inc23;
      label = 8;
      break;
    }
   case 9:
    var $row_164;
    var $15 = HEAP32[5264116 >> 2];
    var $16 = HEAP32[5428492 >> 2];
    var $arrayidx30 = $4 + ($row_164 << 2) | 0;
    var $17 = HEAP32[$arrayidx30 >> 2];
    var $add31 = $17 + $16 | 0;
    var $call32 = _fseek($15, $add31, 0);
    var $call33 = _ph1_bithuff(-1, 0);
    HEAP32[$arrayidx34 >> 2] = 0;
    HEAP32[$arrayidx35 >> 2] = 0;
    var $18 = HEAP16[5245028 >> 1];
    var $cmp3855 = $18 << 16 >> 16 == 0;
    if ($cmp3855) {
      label = 32;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $conv3754 = $18 & 65535;
    var $col_056 = 0;
    var $conv3757 = $conv3754;
    label = 11;
    break;
   case 11:
    var $conv3757;
    var $col_056;
    var $and = $conv3757 & 65528;
    var $cmp42 = ($col_056 | 0) < ($and | 0);
    if ($cmp42) {
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    HEAP32[$arrayidx45 >> 2] = 14;
    HEAP32[$arrayidx46 >> 2] = 14;
    label = 18;
    break;
   case 13:
    var $and47 = $col_056 & 7;
    var $cmp48 = ($and47 | 0) == 0;
    if ($cmp48) {
      var $j_0 = 0;
      label = 14;
      break;
    } else {
      label = 18;
      break;
    }
   case 14:
    var $j_0;
    var $cmp56 = ($j_0 | 0) < 5;
    if ($cmp56) {
      label = 15;
      break;
    } else {
      label = 17;
      break;
    }
   case 15:
    var $call58 = _ph1_bithuff(1, 0);
    var $lnot = ($call58 | 0) == 0;
    var $inc62 = $j_0 + 1 | 0;
    if ($lnot) {
      var $j_0 = $inc62;
      label = 14;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $tobool64 = ($j_0 | 0) == 0;
    if ($tobool64) {
      var $j_0_1 = 0;
      label = 34;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    var $dec = $j_0 << 1;
    var $mul66 = $dec - 2 | 0;
    var $call67 = _ph1_bithuff(1, 0);
    var $add68 = $mul66 + $call67 | 0;
    var $arrayidx69 = 5245664 + ($add68 << 2) | 0;
    var $19 = HEAP32[$arrayidx69 >> 2];
    HEAP32[$arrayidx46 >> 2] = $19;
    var $j_0_1 = 0;
    label = 34;
    break;
   case 18:
    var $and77 = $col_056 & 1;
    var $arrayidx78 = $len + ($and77 << 2) | 0;
    var $20 = HEAP32[$arrayidx78 >> 2];
    var $cmp79 = ($20 | 0) == 14;
    if ($cmp79) {
      label = 19;
      break;
    } else {
      label = 20;
      break;
    }
   case 19:
    var $call82 = _ph1_bithuff(16, 0);
    var $arrayidx84 = $pred + ($and77 << 2) | 0;
    HEAP32[$arrayidx84 >> 2] = $call82;
    var $conv85 = $call82 & 65535;
    var $arrayidx86 = $2 + ($col_056 << 1) | 0;
    HEAP16[$arrayidx86 >> 1] = $conv85;
    var $22 = $call82;
    label = 21;
    break;
   case 20:
    var $call88 = _ph1_bithuff($20, 0);
    var $sub = $20 - 1 | 0;
    var $shl_neg = -1 << $sub;
    var $arrayidx92 = $pred + ($and77 << 2) | 0;
    var $21 = HEAP32[$arrayidx92 >> 2];
    var $add89 = $shl_neg + 1 | 0;
    var $sub90 = $add89 + $call88 | 0;
    var $add93 = $sub90 + $21 | 0;
    HEAP32[$arrayidx92 >> 2] = $add93;
    var $conv94 = $add93 & 65535;
    var $arrayidx95 = $2 + ($col_056 << 1) | 0;
    HEAP16[$arrayidx95 >> 1] = $conv94;
    var $22 = $add93;
    label = 21;
    break;
   case 21:
    var $22;
    var $tobool99 = $22 >>> 0 > 65535;
    if ($tobool99) {
      label = 22;
      break;
    } else {
      label = 23;
      break;
    }
   case 22:
    _derror();
    label = 23;
    break;
   case 23:
    var $23 = HEAP32[5245740 >> 2];
    var $cmp102 = ($23 | 0) == 5;
    if ($cmp102) {
      label = 24;
      break;
    } else {
      label = 26;
      break;
    }
   case 24:
    var $arrayidx104 = $2 + ($col_056 << 1) | 0;
    var $24 = HEAP16[$arrayidx104 >> 1];
    var $cmp106 = ($24 & 65535) < 256;
    if ($cmp106) {
      label = 25;
      break;
    } else {
      label = 26;
      break;
    }
   case 25:
    var $conv105 = $24 & 65535;
    var $arrayidx110 = 5428500 + ($conv105 << 1) | 0;
    var $25 = HEAP16[$arrayidx110 >> 1];
    HEAP16[$arrayidx104 >> 1] = $25;
    label = 26;
    break;
   case 26:
    var $inc114 = $col_056 + 1 | 0;
    var $26 = HEAP16[5245028 >> 1];
    var $conv37 = $26 & 65535;
    var $cmp38 = ($inc114 | 0) < ($conv37 | 0);
    if ($cmp38) {
      var $col_056 = $inc114;
      var $conv3757 = $conv37;
      label = 11;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    var $cmp11859 = $26 << 16 >> 16 == 0;
    if ($cmp11859) {
      label = 32;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    var $add_ptr8_sum = $row_164 + $conv4_lcssa | 0;
    var $col_160 = 0;
    label = 29;
    break;
   case 29:
    var $col_160;
    var $arrayidx121 = $2 + ($col_160 << 1) | 0;
    var $27 = HEAP16[$arrayidx121 >> 1];
    var $conv122 = $27 & 65535;
    var $shl123 = $conv122 << 2;
    var $28 = HEAP32[5245748 >> 2];
    var $sub124 = $shl123 - $28 | 0;
    var $29 = HEAP32[5245756 >> 2];
    var $cmp125 = ($col_160 | 0) >= ($29 | 0);
    var $conv126 = $cmp125 & 1;
    var $arrayidx128 = $9 + ($add_ptr8_sum << 2) + ($conv126 << 1) | 0;
    var $30 = HEAP16[$arrayidx128 >> 1];
    var $conv129 = $30 << 16 >> 16;
    var $add130 = $conv129 + $sub124 | 0;
    var $cmp131 = ($add130 | 0) > 0;
    if ($cmp131) {
      label = 30;
      break;
    } else {
      label = 31;
      break;
    }
   case 30:
    var $conv134 = $add130 & 65535;
    var $mul136 = $conv37 * $row_164 & -1;
    var $add137 = $mul136 + $col_160 | 0;
    var $31 = HEAP32[5245032 >> 2];
    var $arrayidx138 = $31 + ($add137 << 1) | 0;
    HEAP16[$arrayidx138 >> 1] = $conv134;
    label = 31;
    break;
   case 31:
    var $inc141 = $col_160 + 1 | 0;
    var $cmp118 = ($inc141 | 0) < ($conv37 | 0);
    if ($cmp118) {
      var $col_160 = $inc141;
      label = 29;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    var $inc144 = $row_164 + 1 | 0;
    var $32 = HEAP16[5245036 >> 1];
    var $conv26 = $32 & 65535;
    var $cmp27 = ($inc144 | 0) < ($conv26 | 0);
    if ($cmp27) {
      var $row_164 = $inc144;
      label = 9;
      break;
    } else {
      label = 33;
      break;
    }
   case 33:
    _free($call);
    var $33 = HEAP32[5245748 >> 2];
    var $sub146 = 65532 - $33 | 0;
    HEAP32[5263496 >> 2] = $sub146;
    STACKTOP = __stackBase__;
    return;
   case 34:
    var $j_0_1;
    var $cmp56_1 = ($j_0_1 | 0) < 5;
    if ($cmp56_1) {
      label = 35;
      break;
    } else {
      label = 37;
      break;
    }
   case 35:
    var $call58_1 = _ph1_bithuff(1, 0);
    var $lnot_1 = ($call58_1 | 0) == 0;
    var $inc62_1 = $j_0_1 + 1 | 0;
    if ($lnot_1) {
      var $j_0_1 = $inc62_1;
      label = 34;
      break;
    } else {
      label = 36;
      break;
    }
   case 36:
    var $tobool64_1 = ($j_0_1 | 0) == 0;
    if ($tobool64_1) {
      label = 18;
      break;
    } else {
      label = 37;
      break;
    }
   case 37:
    var $dec_1 = $j_0_1 << 1;
    var $mul66_1 = $dec_1 - 2 | 0;
    var $call67_1 = _ph1_bithuff(1, 0);
    var $add68_1 = $mul66_1 + $call67_1 | 0;
    var $arrayidx69_1 = 5245664 + ($add68_1 << 2) | 0;
    var $34 = HEAP32[$arrayidx69_1 >> 2];
    HEAP32[$arrayidx45 >> 2] = $34;
    label = 18;
    break;
  }
}
_phase_one_load_raw_c["X"] = 1;
function _hasselblad_load_raw() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 96 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $jh = __stackBase__;
    var $call = _ljpeg_start($jh, 0);
    var $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 12;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    HEAP16[5262944 >> 1] = 18761;
    var $call1 = _ph1_bithuff(-1, 0);
    var $0 = HEAP16[5245036 >> 1];
    var $cmp23 = $0 << 16 >> 16 == 0;
    if ($cmp23) {
      label = 11;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $arrayidx13 = $jh + 52 | 0;
    var $_pre = HEAP16[5245028 >> 1];
    var $row_024 = 0;
    var $2 = $_pre;
    var $1 = $0;
    label = 5;
    break;
   case 5:
    var $1;
    var $2;
    var $row_024;
    var $3 = HEAP32[5263696 >> 2];
    var $add = $3 + 32768 | 0;
    var $cmp620 = $2 << 16 >> 16 == 0;
    if ($cmp620) {
      var $11 = 0;
      var $10 = $1;
      label = 10;
      break;
    } else {
      var $col_021 = 0;
      var $pred_sroa_1_0 = $add;
      var $pred_sroa_0_0 = $add;
      label = 6;
      break;
    }
   case 6:
    var $pred_sroa_0_0;
    var $pred_sroa_1_0;
    var $col_021;
    var $4 = HEAP32[$arrayidx13 >> 2];
    var $5 = HEAP16[$4 >> 1];
    var $conv14 = $5 & 65535;
    var $add_ptr = $4 + 2 | 0;
    var $call17 = _ph1_bithuff($conv14, $add_ptr);
    var $6 = HEAP32[$arrayidx13 >> 2];
    var $7 = HEAP16[$6 >> 1];
    var $conv14_1 = $7 & 65535;
    var $add_ptr_1 = $6 + 2 | 0;
    var $call17_1 = _ph1_bithuff($conv14_1, $add_ptr_1);
    var $call24 = _ph1_bithuff($call17, 0);
    var $sub = $call17 - 1 | 0;
    var $shl = 1 << $sub;
    var $and = $shl & $call24;
    var $cmp26 = ($and | 0) == 0;
    if ($cmp26) {
      label = 7;
      break;
    } else {
      var $diff_0 = $call24;
      label = 8;
      break;
    }
   case 7:
    var $shl30_neg = -1 << $call17;
    var $sub31_neg = $call24 + 1 | 0;
    var $sub32 = $sub31_neg + $shl30_neg | 0;
    var $diff_0 = $sub32;
    label = 8;
    break;
   case 8:
    var $diff_0;
    var $cmp34 = ($diff_0 | 0) == 65535;
    var $_diff_0 = $cmp34 ? -32768 : $diff_0;
    var $add39 = $_diff_0 + $pred_sroa_0_0 | 0;
    var $conv40 = $add39 & 65535;
    var $8 = HEAP16[5245028 >> 1];
    var $conv41 = $8 & 65535;
    var $mul = $conv41 * $row_024 & -1;
    var $add43 = $col_021 + $mul | 0;
    var $9 = HEAP32[5245032 >> 2];
    var $arrayidx44 = $9 + ($add43 << 1) | 0;
    HEAP16[$arrayidx44 >> 1] = $conv40;
    var $call24_1 = _ph1_bithuff($call17_1, 0);
    var $sub_1 = $call17_1 - 1 | 0;
    var $shl_1 = 1 << $sub_1;
    var $and_1 = $shl_1 & $call24_1;
    var $cmp26_1 = ($and_1 | 0) == 0;
    if ($cmp26_1) {
      label = 13;
      break;
    } else {
      var $diff_0_1 = $call24_1;
      label = 14;
      break;
    }
   case 9:
    var $_pre3 = HEAP16[5245036 >> 1];
    var $11 = $12;
    var $10 = $_pre3;
    label = 10;
    break;
   case 10:
    var $10;
    var $11;
    var $inc52 = $row_024 + 1 | 0;
    var $conv = $10 & 65535;
    var $cmp = ($inc52 | 0) < ($conv | 0);
    if ($cmp) {
      var $row_024 = $inc52;
      var $2 = $11;
      var $1 = $10;
      label = 5;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    _ljpeg_end($jh);
    HEAP32[5263496 >> 2] = 65535;
    label = 12;
    break;
   case 12:
    STACKTOP = __stackBase__;
    return;
   case 13:
    var $shl30_neg_1 = -1 << $call17_1;
    var $sub31_neg_1 = $call24_1 + 1 | 0;
    var $sub32_1 = $sub31_neg_1 + $shl30_neg_1 | 0;
    var $diff_0_1 = $sub32_1;
    label = 14;
    break;
   case 14:
    var $diff_0_1;
    var $cmp34_1 = ($diff_0_1 | 0) == 65535;
    var $_diff_0_1 = $cmp34_1 ? -32768 : $diff_0_1;
    var $add39_1 = $_diff_0_1 + $pred_sroa_1_0 | 0;
    var $conv40_1 = $add39_1 & 65535;
    var $12 = HEAP16[5245028 >> 1];
    var $conv41_1 = $12 & 65535;
    var $mul_1 = $conv41_1 * $row_024 & -1;
    var $add42_126 = $col_021 | 1;
    var $add43_1 = $add42_126 + $mul_1 | 0;
    var $13 = HEAP32[5245032 >> 2];
    var $arrayidx44_1 = $13 + ($add43_1 << 1) | 0;
    HEAP16[$arrayidx44_1 >> 1] = $conv40_1;
    var $add49 = $col_021 + 2 | 0;
    var $cmp6 = ($add49 | 0) < ($conv41_1 | 0);
    if ($cmp6) {
      var $col_021 = $add49;
      var $pred_sroa_1_0 = $add39_1;
      var $pred_sroa_0_0 = $add39;
      label = 6;
      break;
    } else {
      label = 9;
      break;
    }
  }
}
_hasselblad_load_raw["X"] = 1;
function _leaf_hdr_load_raw() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5427632 >> 2];
    var $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      var $pixel_1_ph = 0;
      label = 4;
      break;
    }
   case 3:
    var $1 = HEAP16[5245028 >> 1];
    var $conv = $1 & 65535;
    var $call = _calloc($conv, 2);
    var $2 = $call;
    _merror($call, 5586380);
    var $pixel_1_ph = $2;
    label = 4;
    break;
   case 4:
    var $pixel_1_ph;
    var $3 = HEAP32[5243580 >> 2];
    var $cmp25 = ($3 | 0) == 0;
    if ($cmp25) {
      var $pixel_1_lcssa = $pixel_1_ph;
      label = 21;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $_pre = HEAP16[5245036 >> 1];
    var $tile_026 = 0;
    var $c_027 = 0;
    var $pixel_129 = $pixel_1_ph;
    var $5 = $_pre;
    var $4 = $3;
    label = 6;
    break;
   case 6:
    var $4;
    var $5;
    var $pixel_129;
    var $c_027;
    var $tile_026;
    var $cmp419 = $5 << 16 >> 16 == 0;
    if ($cmp419) {
      var $tile_1_lcssa = $tile_026;
      var $pixel_2_lcssa = $pixel_129;
      var $22 = 0;
      var $21 = $4;
      label = 20;
      break;
    } else {
      var $tile_120 = $tile_026;
      var $r_021 = 0;
      var $pixel_223 = $pixel_129;
      label = 7;
      break;
    }
   case 7:
    var $pixel_223;
    var $r_021;
    var $tile_120;
    var $6 = HEAP32[5243576 >> 2];
    var $rem = ($r_021 >>> 0) % ($6 >>> 0);
    var $cmp7 = ($rem | 0) == 0;
    if ($cmp7) {
      label = 8;
      break;
    } else {
      var $tile_2 = $tile_120;
      label = 9;
      break;
    }
   case 8:
    var $7 = HEAP32[5264116 >> 2];
    var $8 = HEAP32[5428492 >> 2];
    var $inc = $tile_120 + 1 | 0;
    var $mul = $tile_120 << 2;
    var $add = $8 + $mul | 0;
    var $call10 = _fseek($7, $add, 0);
    var $9 = HEAP32[5264116 >> 2];
    var $call11 = _get4();
    var $call12 = _fseek($9, $call11, 0);
    var $tile_2 = $inc;
    label = 9;
    break;
   case 9:
    var $tile_2;
    var $10 = HEAP32[5427632 >> 2];
    var $tobool14 = ($10 | 0) == 0;
    var $11 = HEAP32[5244920 >> 2];
    var $cmp15 = ($c_027 | 0) == ($11 | 0);
    var $or_cond = $tobool14 | $cmp15;
    if ($or_cond) {
      label = 10;
      break;
    } else {
      var $pixel_4 = $pixel_223;
      label = 18;
      break;
    }
   case 10:
    if ($tobool14) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    var $_pre4 = HEAP16[5245028 >> 1];
    var $pixel_3 = $pixel_223;
    var $14 = $_pre4;
    label = 13;
    break;
   case 12:
    var $12 = HEAP32[5245032 >> 2];
    var $13 = HEAP16[5245028 >> 1];
    var $conv21 = $13 & 65535;
    var $mul22 = $conv21 * $r_021 & -1;
    var $add_ptr = $12 + ($mul22 << 1) | 0;
    var $pixel_3 = $add_ptr;
    var $14 = $13;
    label = 13;
    break;
   case 13:
    var $14;
    var $pixel_3;
    var $conv24 = $14 & 65535;
    _read_shorts($pixel_3, $conv24);
    var $15 = HEAP32[5427632 >> 2];
    var $tobool25 = ($15 | 0) == 0;
    if ($tobool25) {
      label = 14;
      break;
    } else {
      var $pixel_4 = $pixel_3;
      label = 18;
      break;
    }
   case 14:
    var $16 = HEAP16[5243564 >> 1];
    var $conv27 = $16 & 65535;
    var $sub = $r_021 - $conv27 | 0;
    var $17 = HEAP16[5398712 >> 1];
    var $conv28 = $17 & 65535;
    var $cmp29 = $sub >>> 0 < $conv28 >>> 0;
    if ($cmp29) {
      label = 15;
      break;
    } else {
      var $pixel_4 = $pixel_3;
      label = 18;
      break;
    }
   case 15:
    var $18 = HEAP16[5242964 >> 1];
    var $cmp3415 = $18 << 16 >> 16 == 0;
    if ($cmp3415) {
      var $pixel_4 = $pixel_3;
      label = 18;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $conv3314 = $18 & 65535;
    var $_pre1 = HEAP16[5263700 >> 1];
    var $_pre2 = HEAP32[5264108 >> 2];
    var $col_016 = 0;
    label = 17;
    break;
   case 17:
    var $col_016;
    var $conv37 = $_pre1 & 65535;
    var $add38 = $conv37 + $col_016 | 0;
    var $arrayidx = $pixel_3 + ($add38 << 1) | 0;
    var $19 = HEAP16[$arrayidx >> 1];
    var $mul40 = $conv3314 * $sub & -1;
    var $add41 = $mul40 + $col_016 | 0;
    var $arrayidx43 = $_pre2 + ($add41 << 3) + ($c_027 << 1) | 0;
    HEAP16[$arrayidx43 >> 1] = $19;
    var $inc44 = $col_016 + 1 | 0;
    var $cmp34 = $inc44 >>> 0 < $conv3314 >>> 0;
    if ($cmp34) {
      var $col_016 = $inc44;
      label = 17;
      break;
    } else {
      var $pixel_4 = $pixel_3;
      label = 18;
      break;
    }
   case 18:
    var $pixel_4;
    var $inc47 = $r_021 + 1 | 0;
    var $20 = HEAP16[5245036 >> 1];
    var $conv3 = $20 & 65535;
    var $cmp4 = $inc47 >>> 0 < $conv3 >>> 0;
    if ($cmp4) {
      var $tile_120 = $tile_2;
      var $r_021 = $inc47;
      var $pixel_223 = $pixel_4;
      label = 7;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $_pre3 = HEAP32[5243580 >> 2];
    var $tile_1_lcssa = $tile_2;
    var $pixel_2_lcssa = $pixel_4;
    var $22 = $20;
    var $21 = $_pre3;
    label = 20;
    break;
   case 20:
    var $21;
    var $22;
    var $pixel_2_lcssa;
    var $tile_1_lcssa;
    var $inc50 = $c_027 + 1 | 0;
    var $cmp = $inc50 >>> 0 < $21 >>> 0;
    if ($cmp) {
      var $tile_026 = $tile_1_lcssa;
      var $c_027 = $inc50;
      var $pixel_129 = $pixel_2_lcssa;
      var $5 = $22;
      var $4 = $21;
      label = 6;
      break;
    } else {
      var $pixel_1_lcssa = $pixel_2_lcssa;
      label = 21;
      break;
    }
   case 21:
    var $pixel_1_lcssa;
    var $23 = HEAP32[5427632 >> 2];
    var $tobool52 = ($23 | 0) == 0;
    if ($tobool52) {
      label = 22;
      break;
    } else {
      label = 23;
      break;
    }
   case 22:
    HEAP32[5263496 >> 2] = 65535;
    HEAP32[5245040 >> 2] = 1;
    var $24 = $pixel_1_lcssa;
    _free($24);
    label = 23;
    break;
   case 23:
    return;
  }
}
_leaf_hdr_load_raw["X"] = 1;
function _unpacked_load_raw() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5263496 >> 2];
    var $bits_0 = 0;
    label = 3;
    break;
   case 3:
    var $bits_0;
    var $inc = $bits_0 + 1 | 0;
    var $shl = 1 << $inc;
    var $cmp = $shl >>> 0 < $0 >>> 0;
    if ($cmp) {
      var $bits_0 = $inc;
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $1 = HEAP32[5245032 >> 2];
    var $2 = HEAP16[5245028 >> 1];
    var $conv = $2 & 65535;
    var $3 = HEAP16[5245036 >> 1];
    var $conv1 = $3 & 65535;
    var $mul = $conv1 * $conv & -1;
    _read_shorts($1, $mul);
    var $4 = HEAP16[5245036 >> 1];
    var $cmp313 = $4 << 16 >> 16 == 0;
    if ($cmp313) {
      label = 15;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $_pre = HEAP16[5245028 >> 1];
    var $row_014 = 0;
    var $7 = $_pre;
    var $6 = $4;
    var $5 = $_pre;
    label = 6;
    break;
   case 6:
    var $5;
    var $6;
    var $7;
    var $row_014;
    var $cmp79 = $7 << 16 >> 16 == 0;
    if ($cmp79) {
      var $19 = 0;
      var $18 = $6;
      var $17 = $5;
      label = 14;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $conv68 = $7 & 65535;
    var $col_010 = 0;
    var $conv611 = $conv68;
    var $8 = $5;
    label = 8;
    break;
   case 8:
    var $8;
    var $conv611;
    var $col_010;
    var $9 = HEAP32[5263696 >> 2];
    var $mul11 = $conv611 * $row_014 & -1;
    var $add = $mul11 + $col_010 | 0;
    var $10 = HEAP32[5245032 >> 2];
    var $arrayidx = $10 + ($add << 1) | 0;
    var $11 = HEAP16[$arrayidx >> 1];
    var $conv12 = $11 & 65535;
    var $shr = $conv12 >>> ($9 >>> 0);
    var $conv13 = $shr & 65535;
    HEAP16[$arrayidx >> 1] = $conv13;
    var $conv14 = $shr & 65535;
    var $shr15 = $conv14 >>> ($inc >>> 0);
    var $tobool = ($shr15 | 0) == 0;
    if ($tobool) {
      var $16 = $8;
      label = 12;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $12 = HEAP16[5243564 >> 1];
    var $conv16 = $12 & 65535;
    var $sub = $row_014 - $conv16 | 0;
    var $13 = HEAP16[5398712 >> 1];
    var $conv17 = $13 & 65535;
    var $cmp18 = $sub >>> 0 < $conv17 >>> 0;
    if ($cmp18) {
      label = 10;
      break;
    } else {
      var $16 = $8;
      label = 12;
      break;
    }
   case 10:
    var $14 = HEAP16[5263700 >> 1];
    var $conv21 = $14 & 65535;
    var $sub22 = $col_010 - $conv21 | 0;
    var $15 = HEAP16[5242964 >> 1];
    var $conv23 = $15 & 65535;
    var $cmp24 = $sub22 >>> 0 < $conv23 >>> 0;
    if ($cmp24) {
      label = 11;
      break;
    } else {
      var $16 = $8;
      label = 12;
      break;
    }
   case 11:
    _derror();
    var $_pre2 = HEAP16[5245028 >> 1];
    var $16 = $_pre2;
    label = 12;
    break;
   case 12:
    var $16;
    var $inc26 = $col_010 + 1 | 0;
    var $conv6 = $16 & 65535;
    var $cmp7 = ($inc26 | 0) < ($conv6 | 0);
    if ($cmp7) {
      var $col_010 = $inc26;
      var $conv611 = $conv6;
      var $8 = $16;
      label = 8;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $_pre1 = HEAP16[5245036 >> 1];
    var $19 = $16;
    var $18 = $_pre1;
    var $17 = $16;
    label = 14;
    break;
   case 14:
    var $17;
    var $18;
    var $19;
    var $inc28 = $row_014 + 1 | 0;
    var $conv2 = $18 & 65535;
    var $cmp3 = ($inc28 | 0) < ($conv2 | 0);
    if ($cmp3) {
      var $row_014 = $inc28;
      var $7 = $19;
      var $6 = $18;
      var $5 = $17;
      label = 6;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    return;
  }
}
_unpacked_load_raw["X"] = 1;
function _sinar_4shot_load_raw() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5244920 >> 2];
    var $_b = HEAP8[5398716];
    var $1 = $_b & 1;
    var $2 = $1 | $0;
    var $3 = ($2 | 0) == 0;
    if ($3) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $tobool = ($0 | 0) == 0;
    var $dec = $0 - 1 | 0;
    var $_dec = $tobool ? 0 : $dec;
    var $cmp = $_dec >>> 0 > 3;
    var $4 = HEAP32[5264116 >> 2];
    var $5 = HEAP32[5428492 >> 2];
    var $_dec_op = $_dec << 2;
    var $mul = $cmp ? 12 : $_dec_op;
    var $add = $5 + $mul | 0;
    var $call = _fseek($4, $add, 0);
    var $6 = HEAP32[5264116 >> 2];
    var $call6 = _get4();
    var $call7 = _fseek($6, $call6, 0);
    _unpacked_load_raw();
    label = 15;
    break;
   case 4:
    var $7 = HEAP32[5245032 >> 2];
    var $8 = $7;
    _free($8);
    HEAP32[5245032 >> 2] = 0;
    var $9 = HEAP32[5264108 >> 2];
    var $10 = $9;
    _free($10);
    var $11 = HEAP16[5398712 >> 1];
    HEAP16[5264112 >> 1] = $11;
    var $conv = $11 & 65535;
    var $12 = HEAP16[5242964 >> 1];
    HEAP16[5264092 >> 1] = $12;
    var $conv9 = $12 & 65535;
    var $mul10 = $conv9 * $conv & -1;
    var $call11 = _calloc($mul10, 8);
    var $13 = $call11;
    HEAP32[5264108 >> 2] = $13;
    _merror($call11, 5586296);
    var $14 = HEAP16[5245028 >> 1];
    var $conv12 = $14 & 65535;
    var $call13 = _calloc($conv12, 2);
    var $15 = $call13;
    _merror($call13, 5586296);
    var $shot_225 = 0;
    label = 5;
    break;
   case 5:
    var $shot_225;
    var $16 = HEAP32[5264116 >> 2];
    var $17 = HEAP32[5428492 >> 2];
    var $mul16 = $shot_225 << 2;
    var $add17 = $17 + $mul16 | 0;
    var $call18 = _fseek($16, $add17, 0);
    var $18 = HEAP32[5264116 >> 2];
    var $call19 = _get4();
    var $call20 = _fseek($18, $call19, 0);
    var $19 = HEAP16[5245036 >> 1];
    var $cmp2323 = $19 << 16 >> 16 == 0;
    if ($cmp2323) {
      label = 13;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $shr = $shot_225 >>> 1;
    var $and = $shr & 1;
    var $and41 = $shot_225 & 1;
    var $_pre = HEAP16[5245028 >> 1];
    var $row_024 = 0;
    var $20 = $_pre;
    label = 7;
    break;
   case 7:
    var $20;
    var $row_024;
    var $conv26 = $20 & 65535;
    _read_shorts($15, $conv26);
    var $21 = HEAP16[5243564 >> 1];
    var $conv27 = $21 & 65535;
    var $sub = $row_024 - $conv27 | 0;
    var $sub28 = $sub - $and | 0;
    var $22 = HEAP16[5398712 >> 1];
    var $conv29 = $22 & 65535;
    var $cmp30 = $sub28 >>> 0 >= $conv29 >>> 0;
    var $23 = HEAP16[5245028 >> 1];
    var $cmp3620 = $23 << 16 >> 16 == 0;
    var $or_cond = $cmp30 | $cmp3620;
    if ($or_cond) {
      label = 12;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $shl = $row_024 << 1;
    var $and48 = $shl & 14;
    var $_pre1 = HEAP16[5263700 >> 1];
    var $_pre2 = HEAP16[5242964 >> 1];
    var $col_021 = 0;
    label = 9;
    break;
   case 9:
    var $col_021;
    var $conv39 = $_pre1 & 65535;
    var $sub40 = $col_021 - $conv39 | 0;
    var $sub42 = $sub40 - $and41 | 0;
    var $conv43 = $_pre2 & 65535;
    var $cmp44 = $sub42 >>> 0 < $conv43 >>> 0;
    if ($cmp44) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    var $arrayidx = $15 + ($col_021 << 1) | 0;
    var $24 = HEAP16[$arrayidx >> 1];
    var $25 = HEAP32[5427632 >> 2];
    var $and49 = $col_021 & 1;
    var $add50 = $and49 | $and48;
    var $shl51 = $add50 << 1;
    var $shr52 = $25 >>> ($shl51 >>> 0);
    var $and53 = $shr52 & 3;
    var $mul55 = $conv43 * $sub28 & -1;
    var $add56 = $mul55 + $sub42 | 0;
    var $26 = HEAP32[5264108 >> 2];
    var $arrayidx58 = $26 + ($add56 << 3) + ($and53 << 1) | 0;
    HEAP16[$arrayidx58 >> 1] = $24;
    label = 11;
    break;
   case 11:
    var $inc = $col_021 + 1 | 0;
    var $conv35 = $23 & 65535;
    var $cmp36 = $inc >>> 0 < $conv35 >>> 0;
    if ($cmp36) {
      var $col_021 = $inc;
      label = 9;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $inc60 = $row_024 + 1 | 0;
    var $27 = HEAP16[5245036 >> 1];
    var $conv22 = $27 & 65535;
    var $cmp23 = $inc60 >>> 0 < $conv22 >>> 0;
    if ($cmp23) {
      var $row_024 = $inc60;
      var $20 = $23;
      label = 7;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $inc63 = $shot_225 + 1 | 0;
    var $exitcond = ($inc63 | 0) == 4;
    if ($exitcond) {
      label = 14;
      break;
    } else {
      var $shot_225 = $inc63;
      label = 5;
      break;
    }
   case 14:
    _free($call13);
    HEAP32[5427632 >> 2] = 0;
    HEAP16[5244916 >> 1] = 0;
    label = 15;
    break;
   case 15:
    return;
  }
}
_sinar_4shot_load_raw["X"] = 1;
function _imacon_full_load_raw() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP16[5398712 >> 1];
    var $cmp9 = $0 << 16 >> 16 == 0;
    if ($cmp9) {
      label = 9;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $_pre = HEAP16[5242964 >> 1];
    var $row_010 = 0;
    var $2 = $_pre;
    var $1 = $0;
    label = 4;
    break;
   case 4:
    var $1;
    var $2;
    var $row_010;
    var $cmp45 = $2 << 16 >> 16 == 0;
    if ($cmp45) {
      var $6 = 0;
      var $5 = $1;
      label = 8;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $conv34 = $2 & 65535;
    var $col_06 = 0;
    var $conv37 = $conv34;
    label = 6;
    break;
   case 6:
    var $conv37;
    var $col_06;
    var $mul = $conv37 * $row_010 & -1;
    var $add = $mul + $col_06 | 0;
    var $3 = HEAP32[5264108 >> 2];
    var $arraydecay = $3 + ($add << 3) | 0;
    _read_shorts($arraydecay, 3);
    var $inc = $col_06 + 1 | 0;
    var $4 = HEAP16[5242964 >> 1];
    var $conv3 = $4 & 65535;
    var $cmp4 = ($inc | 0) < ($conv3 | 0);
    if ($cmp4) {
      var $col_06 = $inc;
      var $conv37 = $conv3;
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $_pre1 = HEAP16[5398712 >> 1];
    var $6 = $4;
    var $5 = $_pre1;
    label = 8;
    break;
   case 8:
    var $5;
    var $6;
    var $inc9 = $row_010 + 1 | 0;
    var $conv = $5 & 65535;
    var $cmp = ($inc9 | 0) < ($conv | 0);
    if ($cmp) {
      var $row_010 = $inc9;
      var $2 = $6;
      var $1 = $5;
      label = 4;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    return;
  }
}
function _packed_load_raw() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP16[5245028 >> 1];
    var $conv = $0 & 65535;
    var $mul = $conv << 3;
    var $1 = HEAP16[5242964 >> 1];
    var $conv1 = $1 & 65535;
    var $2 = HEAP32[5244036 >> 2];
    var $mul2 = $conv1 * $2 & -1;
    var $cmp = $mul >>> 0 < $mul2 >>> 0;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $div = Math.floor(($mul >>> 0) / ($2 >>> 0));
    var $bwide_0 = $conv;
    var $pwide_0 = $div;
    label = 5;
    break;
   case 4:
    var $mul7 = $2 * $conv & -1;
    var $div8 = $mul7 >>> 3;
    var $bwide_0 = $div8;
    var $pwide_0 = $conv;
    label = 5;
    break;
   case 5:
    var $pwide_0;
    var $bwide_0;
    var $mul9 = $bwide_0 << 3;
    var $mul10 = $2 * $pwide_0 & -1;
    var $3 = HEAP32[5263696 >> 2];
    var $and = $3 & 1;
    var $tobool = ($and | 0) == 0;
    if ($tobool) {
      var $bwide_1 = $bwide_0;
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $mul12 = $bwide_0 << 4;
    var $div13 = ($mul12 | 0) / 15 & -1;
    var $bwide_1 = $div13;
    label = 7;
    break;
   case 7:
    var $bwide_1;
    var $and15 = $3 & 24;
    var $add = $and15 + 8 | 0;
    var $4 = HEAP16[5245036 >> 1];
    var $conv16 = $4 & 65535;
    var $add17 = $conv16 + 1 | 0;
    var $shr24 = $add17 >>> 1;
    var $cmp1941 = $4 << 16 >> 16 == 0;
    if ($cmp1941) {
      label = 29;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $cmp4634 = ($pwide_0 | 0) > 0;
    var $sub25 = $mul10 - $mul9 | 0;
    var $sh_prom$0 = $add;
    var $sub34 = -$bwide_1 | 0;
    var $mul35 = $shr24 * $sub34 & -1;
    var $and36 = $mul35 & -2048;
    var $irow_042 = 0;
    var $vbits_043 = 0;
    var $bitbuf_044$1 = 0;
    var $bitbuf_044$0 = 0;
    var $5 = $3;
    label = 9;
    break;
   case 9:
    var $5;
    var $bitbuf_044$0;
    var $bitbuf_044$1;
    var $vbits_043;
    var $irow_042;
    var $and21 = $5 & 2;
    var $tobool22 = ($and21 | 0) == 0;
    if ($tobool22) {
      var $vbits_1 = $vbits_043;
      var $row_0 = $irow_042;
      label = 15;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $rem = ($irow_042 | 0) % ($shr24 | 0);
    var $mul23 = $rem << 1;
    var $div24 = ($irow_042 | 0) / ($shr24 | 0) & -1;
    var $add25 = $mul23 + $div24 | 0;
    var $cmp26 = ($add25 | 0) == 1;
    if ($cmp26) {
      label = 11;
      break;
    } else {
      var $vbits_1 = $vbits_043;
      var $row_0 = $add25;
      label = 15;
      break;
    }
   case 11:
    var $and29 = $5 & 4;
    var $tobool30 = ($and29 | 0) == 0;
    if ($tobool30) {
      var $vbits_1 = $vbits_043;
      var $row_0 = 1;
      label = 15;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $6 = HEAP32[5244032 >> 2];
    var $tobool32 = ($6 | 0) == 0;
    var $7 = HEAP32[5264116 >> 2];
    if ($tobool32) {
      label = 14;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $8 = HEAP32[5428492 >> 2];
    var $sub37 = $8 - $and36 | 0;
    var $call = _fseek($7, $sub37, 0);
    var $vbits_1 = 0;
    var $row_0 = 1;
    label = 15;
    break;
   case 14:
    var $call39 = _fseek($7, 0, 2);
    var $9 = HEAP32[5264116 >> 2];
    var $call40 = _ftell($9);
    var $shr41 = $call40 >> 3;
    var $shl = $shr41 << 2;
    var $call42 = _fseek($9, $shl, 0);
    var $vbits_1 = 0;
    var $row_0 = 1;
    label = 15;
    break;
   case 15:
    var $row_0;
    var $vbits_1;
    if ($cmp4634) {
      var $col_035 = 0;
      var $vbits_236 = $vbits_1;
      var $bitbuf_137$1 = $bitbuf_044$1;
      var $bitbuf_137$0 = $bitbuf_044$0;
      label = 16;
      break;
    } else {
      var $vbits_2_lcssa = $vbits_1;
      var $bitbuf_1_lcssa$1 = $bitbuf_044$1;
      var $bitbuf_1_lcssa$0 = $bitbuf_044$0;
      label = 27;
      break;
    }
   case 16:
    var $bitbuf_137$0;
    var $bitbuf_137$1;
    var $vbits_236;
    var $col_035;
    var $10 = HEAP32[5244036 >> 2];
    var $sub49 = $vbits_236 - $10 | 0;
    var $cmp5129 = ($sub49 | 0) < 0;
    if ($cmp5129) {
      var $vbits_330 = $sub49;
      var $bitbuf_231$1 = $bitbuf_137$1;
      var $bitbuf_231$0 = $bitbuf_137$0;
      label = 17;
      break;
    } else {
      var $vbits_3_lcssa = $sub49;
      var $bitbuf_2_lcssa$1 = $bitbuf_137$1;
      var $bitbuf_2_lcssa$0 = $bitbuf_137$0;
      var $12 = $10;
      label = 21;
      break;
    }
   case 17:
    var $bitbuf_231$0;
    var $bitbuf_231$1;
    var $vbits_330;
    Runtime.bitshift64($bitbuf_231$0, $bitbuf_231$1, 0, $sh_prom$0);
    var $shl54$0 = HEAP32[tempDoublePtr >> 2], $shl54$1 = HEAP32[tempDoublePtr + 4 >> 2];
    var $i_027 = 0;
    var $bitbuf_328$1 = $shl54$1;
    var $bitbuf_328$0 = $shl54$0;
    label = 18;
    break;
   case 18:
    var $bitbuf_328$0;
    var $bitbuf_328$1;
    var $i_027;
    var $11 = HEAP32[5264116 >> 2];
    var $call59 = _fgetc($11);
    var $shl60 = $call59 << $i_027;
    var $conv61$0 = $shl60;
    var $conv61$1 = 0;
    var $or$0 = $conv61$0 | $bitbuf_328$0;
    var $or$1 = $conv61$1 | $bitbuf_328$1;
    var $add62 = $i_027 + 8 | 0;
    var $cmp56 = ($add62 | 0) < ($add | 0);
    if ($cmp56) {
      var $i_027 = $add62;
      var $bitbuf_328$1 = $or$1;
      var $bitbuf_328$0 = $or$0;
      label = 18;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $add64 = $vbits_330 + $add | 0;
    var $cmp51 = ($add64 | 0) < 0;
    if ($cmp51) {
      var $vbits_330 = $add64;
      var $bitbuf_231$1 = $or$1;
      var $bitbuf_231$0 = $or$0;
      label = 17;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    var $_pre = HEAP32[5244036 >> 2];
    var $vbits_3_lcssa = $add64;
    var $bitbuf_2_lcssa$1 = $or$1;
    var $bitbuf_2_lcssa$0 = $or$0;
    var $12 = $_pre;
    label = 21;
    break;
   case 21:
    var $12;
    var $bitbuf_2_lcssa$0;
    var $bitbuf_2_lcssa$1;
    var $vbits_3_lcssa;
    var $sub66 = 64 - $12 | 0;
    var $sub67 = $sub66 - $vbits_3_lcssa | 0;
    var $sh_prom68$0 = $sub67;
    Runtime.bitshift64($bitbuf_2_lcssa$0, $bitbuf_2_lcssa$1, 0, $sh_prom68$0);
    var $shl69$0 = HEAP32[tempDoublePtr >> 2], $shl69$1 = HEAP32[tempDoublePtr + 4 >> 2];
    var $sh_prom71$0 = $sub66;
    Runtime.bitshift64($shl69$0, $shl69$1, 2, $sh_prom71$0);
    var $shr72$0 = HEAP32[tempDoublePtr >> 2];
    var $conv74$0 = $shr72$0;
    var $conv74 = $conv74$0 & 65535;
    var $13 = HEAP16[5245028 >> 1];
    var $conv75 = $13 & 65535;
    var $mul76 = $conv75 * $row_0 & -1;
    var $14 = HEAP32[5263696 >> 2];
    var $shr77 = $14 >>> 6;
    var $xor = $shr77 ^ $col_035;
    var $add78 = $xor + $mul76 | 0;
    var $15 = HEAP32[5245032 >> 2];
    var $arrayidx = $15 + ($add78 << 1) | 0;
    HEAP16[$arrayidx >> 1] = $conv74;
    var $and79 = $14 & 1;
    var $tobool80 = ($and79 | 0) == 0;
    if ($tobool80) {
      label = 26;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    var $rem82 = ($col_035 | 0) % 10;
    var $cmp83 = ($rem82 | 0) == 9;
    if ($cmp83) {
      label = 23;
      break;
    } else {
      label = 26;
      break;
    }
   case 23:
    var $16 = HEAP32[5264116 >> 2];
    var $call86 = _fgetc($16);
    var $tobool87 = ($call86 | 0) == 0;
    if ($tobool87) {
      label = 26;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    var $17 = HEAP16[5242964 >> 1];
    var $conv89 = $17 & 65535;
    var $18 = HEAP16[5263700 >> 1];
    var $conv90 = $18 & 65535;
    var $add91 = $conv90 + $conv89 | 0;
    var $cmp92 = ($col_035 | 0) < ($add91 | 0);
    if ($cmp92) {
      label = 25;
      break;
    } else {
      label = 26;
      break;
    }
   case 25:
    _derror();
    label = 26;
    break;
   case 26:
    var $inc = $col_035 + 1 | 0;
    var $exitcond = ($inc | 0) == ($pwide_0 | 0);
    if ($exitcond) {
      var $vbits_2_lcssa = $vbits_3_lcssa;
      var $bitbuf_1_lcssa$1 = $bitbuf_2_lcssa$1;
      var $bitbuf_1_lcssa$0 = $bitbuf_2_lcssa$0;
      label = 27;
      break;
    } else {
      var $col_035 = $inc;
      var $vbits_236 = $vbits_3_lcssa;
      var $bitbuf_137$1 = $bitbuf_2_lcssa$1;
      var $bitbuf_137$0 = $bitbuf_2_lcssa$0;
      label = 16;
      break;
    }
   case 27:
    var $bitbuf_1_lcssa$0;
    var $bitbuf_1_lcssa$1;
    var $vbits_2_lcssa;
    var $inc100 = $irow_042 + 1 | 0;
    var $19 = HEAP16[5245036 >> 1];
    var $conv18 = $19 & 65535;
    var $cmp19 = ($inc100 | 0) < ($conv18 | 0);
    if ($cmp19) {
      label = 28;
      break;
    } else {
      label = 29;
      break;
    }
   case 28:
    var $sub98 = $sub25 + $vbits_2_lcssa | 0;
    var $_pre1 = HEAP32[5263696 >> 2];
    var $irow_042 = $inc100;
    var $vbits_043 = $sub98;
    var $bitbuf_044$1 = $bitbuf_1_lcssa$1;
    var $bitbuf_044$0 = $bitbuf_1_lcssa$0;
    var $5 = $_pre1;
    label = 9;
    break;
   case 29:
    return;
  }
}
_packed_load_raw["X"] = 1;
function _nokia_load_raw() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP16[5262944 >> 1];
    var $cmp = $0 << 16 >> 16 == 18761;
    var $conv1 = $cmp & 1;
    var $1 = -$conv1 | 0;
    var $mul = $1 & 3;
    var $2 = HEAP16[5245028 >> 1];
    var $conv2 = $2 & 65535;
    var $mul3 = $conv2 * 5 & -1;
    var $div = $mul3 >>> 2;
    var $mul4 = $div << 1;
    var $call = _malloc($mul4);
    _merror($call, 5586160);
    var $3 = HEAP16[5245036 >> 1];
    var $cmp632 = $3 << 16 >> 16 == 0;
    if ($cmp632) {
      label = 12;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $add_ptr = $call + $div | 0;
    var $cmp1224 = ($div | 0) == 0;
    var $row_033 = 0;
    label = 4;
    break;
   case 4:
    var $row_033;
    var $4 = HEAP32[5264116 >> 2];
    var $call8 = _fread($add_ptr, 1, $div, $4);
    var $cmp9 = $call8 >>> 0 < $div >>> 0;
    if ($cmp9) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    _derror();
    label = 6;
    break;
   case 6:
    if ($cmp1224) {
      label = 8;
      break;
    } else {
      var $c_025 = 0;
      label = 7;
      break;
    }
   case 7:
    var $c_025;
    var $xor = $c_025 ^ $mul;
    var $add = $xor + $div | 0;
    var $arrayidx = $call + $add | 0;
    var $5 = HEAP8[$arrayidx];
    var $arrayidx15 = $call + $c_025 | 0;
    HEAP8[$arrayidx15] = $5;
    var $inc = $c_025 + 1 | 0;
    var $cmp12 = ($inc | 0) < ($div | 0);
    if ($cmp12) {
      var $c_025 = $inc;
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $6 = HEAP16[5245028 >> 1];
    var $cmp1828 = $6 << 16 >> 16 == 0;
    if ($cmp1828) {
      label = 11;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $_pre = HEAP32[5245032 >> 2];
    var $dp_029 = $call;
    var $col_030 = 0;
    label = 10;
    break;
   case 10:
    var $col_030;
    var $dp_029;
    var $arrayidx27 = $dp_029 + 4 | 0;
    var $7 = HEAP8[$dp_029];
    var $conv26 = $7 & 255;
    var $shl = $conv26 << 2;
    var $8 = HEAP8[$arrayidx27];
    var $conv28 = $8 & 255;
    var $and = $conv28 & 3;
    var $or = $and | $shl;
    var $conv31 = $6 & 65535;
    var $mul32 = $conv31 * $row_033 & -1;
    var $add34 = $col_030 + $mul32 | 0;
    var $arrayidx35 = $_pre + ($add34 << 1) | 0;
    HEAP16[$arrayidx35 >> 1] = $or;
    var $arrayidx25_1 = $dp_029 + 1 | 0;
    var $9 = HEAP8[$arrayidx25_1];
    var $conv26_1 = $9 & 255;
    var $shl_1 = $conv26_1 << 2;
    var $10 = HEAP8[$arrayidx27];
    var $conv28_1 = $10 & 255;
    var $shr_1 = ($conv28_1 & 65535) >>> 2;
    var $and_1 = $shr_1 & 3;
    var $or_1 = $and_1 | $shl_1;
    var $add33_135 = $col_030 | 1;
    var $add34_1 = $add33_135 + $mul32 | 0;
    var $arrayidx35_1 = $_pre + ($add34_1 << 1) | 0;
    HEAP16[$arrayidx35_1 >> 1] = $or_1;
    var $arrayidx25_2 = $dp_029 + 2 | 0;
    var $11 = HEAP8[$arrayidx25_2];
    var $conv26_2 = $11 & 255;
    var $shl_2 = $conv26_2 << 2;
    var $12 = HEAP8[$arrayidx27];
    var $conv28_2 = $12 & 255;
    var $shr_2 = ($conv28_2 & 65535) >>> 4;
    var $and_2 = $shr_2 & 3;
    var $or_2 = $and_2 | $shl_2;
    var $add33_236 = $col_030 | 2;
    var $add34_2 = $add33_236 + $mul32 | 0;
    var $arrayidx35_2 = $_pre + ($add34_2 << 1) | 0;
    HEAP16[$arrayidx35_2 >> 1] = $or_2;
    var $arrayidx25_3 = $dp_029 + 3 | 0;
    var $13 = HEAP8[$arrayidx25_3];
    var $conv26_3 = $13 & 255;
    var $shl_3 = $conv26_3 << 2;
    var $14 = HEAP8[$arrayidx27];
    var $conv28_3 = $14 & 255;
    var $shr_3 = ($conv28_3 & 65535) >>> 6;
    var $or_3 = $shr_3 | $shl_3;
    var $add33_337 = $col_030 | 3;
    var $add34_3 = $add33_337 + $mul32 | 0;
    var $arrayidx35_3 = $_pre + ($add34_3 << 1) | 0;
    HEAP16[$arrayidx35_3 >> 1] = $or_3;
    var $add_ptr40 = $dp_029 + 5 | 0;
    var $add41 = $col_030 + 4 | 0;
    var $cmp18 = ($add41 | 0) < ($conv31 | 0);
    if ($cmp18) {
      var $dp_029 = $add_ptr40;
      var $col_030 = $add41;
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $inc44 = $row_033 + 1 | 0;
    var $15 = HEAP16[5245036 >> 1];
    var $conv5 = $15 & 65535;
    var $cmp6 = ($inc44 | 0) < ($conv5 | 0);
    if ($cmp6) {
      var $row_033 = $inc44;
      label = 4;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    _free($call);
    HEAP32[5263496 >> 2] = 1023;
    return;
  }
}
_nokia_load_raw["X"] = 1;
function _pana_bits($nbits) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $tobool = ($nbits | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    HEAP32[5246544 >> 2] = 0;
    var $retval_0 = 0;
    label = 7;
    break;
   case 4:
    var $0 = HEAP32[5246544 >> 2];
    var $tobool1 = ($0 | 0) == 0;
    if ($tobool1) {
      label = 5;
      break;
    } else {
      var $5 = $0;
      label = 6;
      break;
    }
   case 5:
    var $1 = HEAP32[5263696 >> 2];
    var $add_ptr = $1 + 5246548 | 0;
    var $sub = 16384 - $1 | 0;
    var $2 = HEAP32[5264116 >> 2];
    var $call = _fread($add_ptr, 1, $sub, $2);
    var $3 = HEAP32[5263696 >> 2];
    var $4 = HEAP32[5264116 >> 2];
    var $call3 = _fread(5246548, 1, $3, $4);
    var $_pre = HEAP32[5246544 >> 2];
    var $5 = $_pre;
    label = 6;
    break;
   case 6:
    var $5;
    var $sub5 = $5 - $nbits | 0;
    var $and = $sub5 & 131071;
    HEAP32[5246544 >> 2] = $and;
    var $shr4 = $and >>> 3;
    var $xor = $shr4 ^ 16368;
    var $arrayidx = $xor + 5246548 | 0;
    var $6 = HEAP8[$arrayidx];
    var $conv = $6 & 255;
    var $add = $xor + 1 | 0;
    var $arrayidx6 = $add + 5246548 | 0;
    var $7 = HEAP8[$arrayidx6];
    var $conv7 = $7 & 255;
    var $shl = $conv7 << 8;
    var $or = $shl | $conv;
    var $and8 = $sub5 & 7;
    var $shr9 = $or >>> ($and8 >>> 0);
    var $shl10 = -1 << $nbits;
    var $neg = $shl10 ^ -1;
    var $and11 = $shr9 & $neg;
    var $retval_0 = $and11;
    label = 7;
    break;
   case 7:
    var $retval_0;
    return $retval_0;
  }
}
function _panasonic_load_raw() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $pred = __stackBase__;
    var $nonz = __stackBase__ + 8;
    var $call = _pana_bits(0);
    var $0 = HEAP16[5398712 >> 1];
    var $cmp27 = $0 << 16 >> 16 == 0;
    if ($cmp27) {
      label = 22;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $arrayidx = $nonz + 4 | 0;
    var $arrayidx9 = $nonz | 0;
    var $arrayidx10 = $pred + 4 | 0;
    var $arrayidx11 = $pred | 0;
    var $_pre = HEAP16[5245028 >> 1];
    var $row_028 = 0;
    var $sh_030 = 0;
    var $2 = $_pre;
    var $1 = $0;
    label = 4;
    break;
   case 4:
    var $1;
    var $2;
    var $sh_030;
    var $row_028;
    var $cmp423 = $2 << 16 >> 16 == 0;
    if ($cmp423) {
      var $sh_1_lcssa = $sh_030;
      var $11 = 0;
      var $10 = $1;
      label = 21;
      break;
    } else {
      var $col_024 = 0;
      var $sh_125 = $sh_030;
      label = 5;
      break;
    }
   case 5:
    var $sh_125;
    var $col_024;
    var $rem = ($col_024 | 0) % 14;
    var $cmp7 = ($rem | 0) == 0;
    if ($cmp7) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    HEAP32[$arrayidx >> 2] = 0;
    HEAP32[$arrayidx9 >> 2] = 0;
    HEAP32[$arrayidx10 >> 2] = 0;
    HEAP32[$arrayidx11 >> 2] = 0;
    var $sh_2 = $sh_125;
    label = 9;
    break;
   case 7:
    var $rem12 = ($rem | 0) % 3;
    var $cmp13 = ($rem12 | 0) == 2;
    if ($cmp13) {
      label = 8;
      break;
    } else {
      var $sh_2 = $sh_125;
      label = 9;
      break;
    }
   case 8:
    var $call16 = _pana_bits(2);
    var $sub = 3 - $call16 | 0;
    var $shr = 4 >>> ($sub >>> 0);
    var $sh_2 = $shr;
    label = 9;
    break;
   case 9:
    var $sh_2;
    var $and = $rem & 1;
    var $arrayidx18 = $nonz + ($and << 2) | 0;
    var $3 = HEAP32[$arrayidx18 >> 2];
    var $tobool = ($3 | 0) == 0;
    var $call20 = _pana_bits(8);
    if ($tobool) {
      label = 14;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $tobool21 = ($call20 | 0) == 0;
    if ($tobool21) {
      label = 16;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $shl = 128 << $sh_2;
    var $arrayidx24 = $pred + ($and << 2) | 0;
    var $4 = HEAP32[$arrayidx24 >> 2];
    var $sub25 = $4 - $shl | 0;
    var $cmp26 = ($sub25 | 0) < 0;
    var $cmp28 = ($sh_2 | 0) == 4;
    var $or_cond = $cmp26 | $cmp28;
    if ($or_cond) {
      label = 12;
      break;
    } else {
      var $storemerge = $sub25;
      label = 13;
      break;
    }
   case 12:
    var $shl31 = -1 << $sh_2;
    var $neg = $shl31 ^ -1;
    var $and34 = $sub25 & $neg;
    var $storemerge = $and34;
    label = 13;
    break;
   case 13:
    var $storemerge;
    var $shl36 = $call20 << $sh_2;
    var $add = $storemerge + $shl36 | 0;
    HEAP32[$arrayidx24 >> 2] = $add;
    label = 16;
    break;
   case 14:
    HEAP32[$arrayidx18 >> 2] = $call20;
    var $tobool43 = ($call20 | 0) != 0;
    var $cmp45 = ($rem | 0) > 11;
    var $or_cond19 = $tobool43 | $cmp45;
    if ($or_cond19) {
      label = 15;
      break;
    } else {
      label = 16;
      break;
    }
   case 15:
    var $shl50 = $call20 << 4;
    var $call51 = _pana_bits(4);
    var $or = $call51 | $shl50;
    var $arrayidx53 = $pred + ($and << 2) | 0;
    HEAP32[$arrayidx53 >> 2] = $or;
    label = 16;
    break;
   case 16:
    var $and56 = $col_024 & 1;
    var $arrayidx57 = $pred + ($and56 << 2) | 0;
    var $5 = HEAP32[$arrayidx57 >> 2];
    var $conv58 = $5 & 65535;
    var $6 = HEAP16[5245028 >> 1];
    var $conv59 = $6 & 65535;
    var $mul = $conv59 * $row_028 & -1;
    var $add60 = $mul + $col_024 | 0;
    var $7 = HEAP32[5245032 >> 2];
    var $arrayidx61 = $7 + ($add60 << 1) | 0;
    HEAP16[$arrayidx61 >> 1] = $conv58;
    var $conv62 = $5 & 65535;
    var $cmp63 = $conv62 >>> 0 > 4098;
    if ($cmp63) {
      label = 17;
      break;
    } else {
      var $9 = $6;
      label = 19;
      break;
    }
   case 17:
    var $8 = HEAP16[5242964 >> 1];
    var $conv65 = $8 & 65535;
    var $cmp66 = ($col_024 | 0) < ($conv65 | 0);
    if ($cmp66) {
      label = 18;
      break;
    } else {
      var $9 = $6;
      label = 19;
      break;
    }
   case 18:
    _derror();
    var $_pre2 = HEAP16[5245028 >> 1];
    var $9 = $_pre2;
    label = 19;
    break;
   case 19:
    var $9;
    var $inc = $col_024 + 1 | 0;
    var $conv3 = $9 & 65535;
    var $cmp4 = ($inc | 0) < ($conv3 | 0);
    if ($cmp4) {
      var $col_024 = $inc;
      var $sh_125 = $sh_2;
      label = 5;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    var $_pre1 = HEAP16[5398712 >> 1];
    var $sh_1_lcssa = $sh_2;
    var $11 = $9;
    var $10 = $_pre1;
    label = 21;
    break;
   case 21:
    var $10;
    var $11;
    var $sh_1_lcssa;
    var $inc71 = $row_028 + 1 | 0;
    var $conv = $10 & 65535;
    var $cmp = ($inc71 | 0) < ($conv | 0);
    if ($cmp) {
      var $row_028 = $inc71;
      var $sh_030 = $sh_1_lcssa;
      var $2 = $11;
      var $1 = $10;
      label = 4;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    STACKTOP = __stackBase__;
    return;
  }
}
_panasonic_load_raw["X"] = 1;
function _olympus_load_raw() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8216 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $huff = __stackBase__;
    var $acarry = __stackBase__ + 8192;
    var $arrayidx = $huff | 0;
    HEAP16[$arrayidx >> 1] = 3084;
    var $i_092 = 12;
    var $n_093 = 0;
    var $dec94 = 11;
    label = 5;
    break;
   case 3:
    var $0 = $n_093 + $shr | 0;
    var $n_1_lcssa = $0;
    label = 4;
    break;
   case 4:
    var $n_1_lcssa;
    var $dec = $dec94 - 1 | 0;
    var $tobool = ($dec94 | 0) == 0;
    if ($tobool) {
      label = 8;
      break;
    } else {
      var $i_092 = $dec94;
      var $n_093 = $n_1_lcssa;
      var $dec94 = $dec;
      label = 5;
      break;
    }
   case 5:
    var $dec94;
    var $n_093;
    var $i_092;
    var $shr = 2048 >>> ($dec94 >>> 0);
    var $cmp89 = ($shr | 0) > 0;
    if ($cmp89) {
      label = 6;
      break;
    } else {
      var $n_1_lcssa = $n_093;
      label = 4;
      break;
    }
   case 6:
    var $shl = $i_092 << 8;
    var $or = $shl | $dec94;
    var $conv = $or & 65535;
    var $c_090 = 0;
    var $n_191 = $n_093;
    label = 7;
    break;
   case 7:
    var $n_191;
    var $c_090;
    var $inc = $n_191 + 1 | 0;
    var $arrayidx3 = $huff + ($inc << 1) | 0;
    HEAP16[$arrayidx3 >> 1] = $conv;
    var $inc4 = $c_090 + 1 | 0;
    var $exitcond = ($inc4 | 0) == ($shr | 0);
    if ($exitcond) {
      label = 3;
      break;
    } else {
      var $c_090 = $inc4;
      var $n_191 = $inc;
      label = 7;
      break;
    }
   case 8:
    var $1 = HEAP32[5264116 >> 2];
    var $call = _fseek($1, 7, 1);
    var $call6 = _getbithuff(-1, 0);
    var $2 = HEAP16[5398712 >> 1];
    var $cmp986 = $2 << 16 >> 16 == 0;
    if ($cmp986) {
      label = 35;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $3 = $acarry;
    var $_pre = HEAP16[5245028 >> 1];
    var $row_087 = 0;
    var $5 = $_pre;
    var $4 = $2;
    label = 10;
    break;
   case 10:
    var $4;
    var $5;
    var $row_087;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    HEAP32[$3 + 12 >> 2] = 0;
    HEAP32[$3 + 16 >> 2] = 0;
    HEAP32[$3 + 20 >> 2] = 0;
    var $cmp1482 = $5 << 16 >> 16 == 0;
    if ($cmp1482) {
      var $22 = 0;
      var $21 = $4;
      label = 34;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $cmp66 = ($row_087 | 0) < 2;
    var $sub84 = $row_087 - 2 | 0;
    var $col_083 = 0;
    label = 12;
    break;
   case 12:
    var $col_083;
    var $and = $col_083 & 1;
    var $arraydecay = $acarry + $and * 12 | 0;
    var $arrayidx18 = $acarry + $and * 12 + 8 | 0;
    var $6 = HEAP32[$arrayidx18 >> 2];
    var $cmp19 = ($6 | 0) < 3;
    var $conv20 = $cmp19 & 1;
    var $mul = $conv20 << 1;
    var $add21 = $mul + 2 | 0;
    var $7 = HEAP32[$arraydecay >> 2];
    var $conv25 = $7 & 65535;
    var $nbits_0 = $add21;
    label = 13;
    break;
   case 13:
    var $nbits_0;
    var $add26 = $nbits_0 + $mul | 0;
    var $shr27 = $conv25 >>> ($add26 >>> 0);
    var $tobool28 = ($shr27 | 0) == 0;
    var $inc31 = $nbits_0 + 1 | 0;
    if ($tobool28) {
      label = 14;
      break;
    } else {
      var $nbits_0 = $inc31;
      label = 13;
      break;
    }
   case 14:
    var $call33 = _getbithuff(3, 0);
    var $and34 = $call33 & 3;
    var $shl35 = $call33 << 29;
    var $shr36 = $shl35 >> 31;
    var $call38 = _getbithuff(12, $arrayidx);
    var $cmp39 = ($call38 | 0) == 12;
    if ($cmp39) {
      label = 15;
      break;
    } else {
      var $high_0 = $call38;
      label = 16;
      break;
    }
   case 15:
    var $sub = 16 - $nbits_0 | 0;
    var $call41 = _getbithuff($sub, 0);
    var $shr42 = $call41 >>> 1;
    var $high_0 = $shr42;
    label = 16;
    break;
   case 16:
    var $high_0;
    var $shl43 = $high_0 << $nbits_0;
    var $call44 = _getbithuff($nbits_0, 0);
    var $or45 = $shl43 | $call44;
    HEAP32[$arraydecay >> 2] = $or45;
    var $xor = $or45 ^ $shr36;
    var $arrayidx48 = $acarry + $and * 12 + 4 | 0;
    var $8 = HEAP32[$arrayidx48 >> 2];
    var $add49 = $xor + $8 | 0;
    var $mul50 = $add49 * 3 & -1;
    var $add52 = $mul50 + $8 | 0;
    var $shr53 = $add52 >> 5;
    HEAP32[$arrayidx48 >> 2] = $shr53;
    var $cmp56 = ($or45 | 0) > 16;
    var $add59 = $6 + 1 | 0;
    var $_add59 = $cmp56 ? 0 : $add59;
    HEAP32[$arrayidx18 >> 2] = $_add59;
    var $9 = HEAP16[5242964 >> 1];
    var $conv61 = $9 & 65535;
    var $cmp62 = ($col_083 | 0) < ($conv61 | 0);
    if ($cmp62) {
      label = 17;
      break;
    } else {
      label = 32;
      break;
    }
   case 17:
    var $cmp68 = ($col_083 | 0) < 2;
    var $or_cond = $cmp66 & $cmp68;
    var $_pre2 = HEAP16[5245028 >> 1];
    if ($or_cond) {
      label = 18;
      break;
    } else {
      label = 19;
      break;
    }
   case 18:
    var $_pre3 = HEAP32[5245032 >> 2];
    var $pred_0 = 0;
    var $19 = $_pre2;
    var $18 = $_pre3;
    label = 30;
    break;
   case 19:
    var $conv74 = $_pre2 & 65535;
    if ($cmp66) {
      label = 20;
      break;
    } else {
      label = 21;
      break;
    }
   case 20:
    var $mul75 = $conv74 * $row_087 & -1;
    var $sub76 = $col_083 - 2 | 0;
    var $add77 = $sub76 + $mul75 | 0;
    var $10 = HEAP32[5245032 >> 2];
    var $arrayidx78 = $10 + ($add77 << 1) | 0;
    var $11 = HEAP16[$arrayidx78 >> 1];
    var $conv79 = $11 & 65535;
    var $pred_0 = $conv79;
    var $19 = $_pre2;
    var $18 = $10;
    label = 30;
    break;
   case 21:
    if ($cmp68) {
      label = 22;
      break;
    } else {
      label = 23;
      break;
    }
   case 22:
    var $mul86 = $conv74 * $sub84 & -1;
    var $add87 = $mul86 + $col_083 | 0;
    var $12 = HEAP32[5245032 >> 2];
    var $arrayidx88 = $12 + ($add87 << 1) | 0;
    var $13 = HEAP16[$arrayidx88 >> 1];
    var $conv89 = $13 & 65535;
    var $pred_0 = $conv89;
    var $19 = $_pre2;
    var $18 = $12;
    label = 30;
    break;
   case 23:
    var $mul92 = $conv74 * $row_087 & -1;
    var $sub93 = $col_083 - 2 | 0;
    var $add94 = $mul92 + $sub93 | 0;
    var $14 = HEAP32[5245032 >> 2];
    var $arrayidx95 = $14 + ($add94 << 1) | 0;
    var $15 = HEAP16[$arrayidx95 >> 1];
    var $conv96 = $15 & 65535;
    var $mul99 = $conv74 * $sub84 & -1;
    var $add100 = $mul99 + $col_083 | 0;
    var $arrayidx101 = $14 + ($add100 << 1) | 0;
    var $16 = HEAP16[$arrayidx101 >> 1];
    var $conv102 = $16 & 65535;
    var $add107 = $mul99 + $sub93 | 0;
    var $arrayidx108 = $14 + ($add107 << 1) | 0;
    var $17 = HEAP16[$arrayidx108 >> 1];
    var $conv109 = $17 & 65535;
    var $cmp110 = ($15 & 65535) < ($17 & 65535);
    var $cmp113 = ($17 & 65535) < ($16 & 65535);
    var $or_cond79 = $cmp110 & $cmp113;
    if ($or_cond79) {
      label = 25;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    var $cmp115 = ($16 & 65535) < ($17 & 65535);
    var $cmp118 = ($17 & 65535) < ($15 & 65535);
    var $or_cond80 = $cmp115 & $cmp118;
    if ($or_cond80) {
      label = 25;
      break;
    } else {
      label = 29;
      break;
    }
   case 25:
    var $sub121 = $conv96 - $conv109 | 0;
    var $shr123 = $sub121 >> 31;
    var $xor124 = $shr123 ^ $sub121;
    var $sub127 = $xor124 - $shr123 | 0;
    var $cmp128 = ($sub127 | 0) > 32;
    if ($cmp128) {
      label = 27;
      break;
    } else {
      label = 26;
      break;
    }
   case 26:
    var $sub131 = $conv102 - $conv109 | 0;
    var $shr133 = $sub131 >> 31;
    var $xor134 = $shr133 ^ $sub131;
    var $sub137 = $xor134 - $shr133 | 0;
    var $cmp138 = ($sub137 | 0) > 32;
    if ($cmp138) {
      label = 27;
      break;
    } else {
      label = 28;
      break;
    }
   case 27:
    var $add141 = $conv102 + $conv96 | 0;
    var $sub142 = $add141 - $conv109 | 0;
    var $pred_0 = $sub142;
    var $19 = $_pre2;
    var $18 = $14;
    label = 30;
    break;
   case 28:
    var $add144 = $conv102 + $conv96 | 0;
    var $shr145 = $add144 >>> 1;
    var $pred_0 = $shr145;
    var $19 = $_pre2;
    var $18 = $14;
    label = 30;
    break;
   case 29:
    var $sub148 = $conv96 - $conv109 | 0;
    var $shr150 = $sub148 >> 31;
    var $xor151 = $shr150 ^ $sub148;
    var $sub154 = $xor151 - $shr150 | 0;
    var $sub155 = $conv102 - $conv109 | 0;
    var $shr157 = $sub155 >> 31;
    var $xor158 = $shr157 ^ $sub155;
    var $sub161 = $xor158 - $shr157 | 0;
    var $cmp162 = ($sub154 | 0) > ($sub161 | 0);
    var $cond167 = $cmp162 ? $conv96 : $conv102;
    var $pred_0 = $cond167;
    var $19 = $_pre2;
    var $18 = $14;
    label = 30;
    break;
   case 30:
    var $18;
    var $19;
    var $pred_0;
    var $shl172 = $add49 << 2;
    var $or173 = $shl172 | $and34;
    var $add174 = $pred_0 + $or173 | 0;
    var $conv175 = $add174 & 65535;
    var $conv176 = $19 & 65535;
    var $mul177 = $conv176 * $row_087 & -1;
    var $add178 = $mul177 + $col_083 | 0;
    var $arrayidx179 = $18 + ($add178 << 1) | 0;
    HEAP16[$arrayidx179 >> 1] = $conv175;
    var $shr18178 = $add174 & 61440;
    var $tobool182 = ($shr18178 | 0) == 0;
    if ($tobool182) {
      label = 32;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    _derror();
    label = 32;
    break;
   case 32:
    var $inc186 = $col_083 + 1 | 0;
    var $20 = HEAP16[5245028 >> 1];
    var $conv13 = $20 & 65535;
    var $cmp14 = ($inc186 | 0) < ($conv13 | 0);
    if ($cmp14) {
      var $col_083 = $inc186;
      label = 12;
      break;
    } else {
      label = 33;
      break;
    }
   case 33:
    var $_pre1 = HEAP16[5398712 >> 1];
    var $22 = $20;
    var $21 = $_pre1;
    label = 34;
    break;
   case 34:
    var $21;
    var $22;
    var $inc189 = $row_087 + 1 | 0;
    var $conv8 = $21 & 65535;
    var $cmp9 = ($inc189 | 0) < ($conv8 | 0);
    if ($cmp9) {
      var $row_087 = $inc189;
      var $5 = $22;
      var $4 = $21;
      label = 10;
      break;
    } else {
      label = 35;
      break;
    }
   case 35:
    STACKTOP = __stackBase__;
    return;
  }
}
_olympus_load_raw["X"] = 1;
function _minolta_rd175_load_raw() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 768 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $pixel = __stackBase__;
    var $arraydecay = $pixel | 0;
    var $arrayidx37 = $pixel + 1 | 0;
    var $arrayidx45 = $pixel + 765 | 0;
    var $irow_027 = 0;
    label = 3;
    break;
   case 3:
    var $irow_027;
    var $0 = HEAP32[5264116 >> 2];
    var $call = _fread($arraydecay, 1, 768, $0);
    var $cmp1 = $call >>> 0 < 768;
    if ($cmp1) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    _derror();
    label = 5;
    break;
   case 5:
    var $div = Math.floor(($irow_027 >>> 0) / 82);
    var $rem = ($irow_027 >>> 0) % 82;
    var $mul = $rem * 12 & -1;
    var $cmp2 = $irow_027 >>> 0 < 984;
    if ($cmp2) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    var $or = $div | 1;
    var $cond = $or;
    label = 8;
    break;
   case 7:
    var $sub = $div << 1;
    var $mul3 = $sub - 24 | 0;
    var $cond = $mul3;
    label = 8;
    break;
   case 8:
    var $cond;
    var $add = $cond + $mul | 0;
    if (($irow_027 | 0) == 1476) {
      label = 9;
      break;
    } else if (($irow_027 | 0) == 1480) {
      label = 10;
      break;
    } else if (($irow_027 | 0) == 1478) {
      label = 11;
      break;
    } else if (($irow_027 | 0) == 1477 | ($irow_027 | 0) == 1479) {
      label = 22;
      break;
    } else {
      var $row_0 = $add;
      var $box_0 = $div;
      label = 12;
      break;
    }
   case 9:
    var $row_0 = 984;
    var $box_0 = $div;
    label = 12;
    break;
   case 10:
    var $row_0 = 985;
    var $box_0 = $div;
    label = 12;
    break;
   case 11:
    var $row_0 = 985;
    var $box_0 = 1;
    label = 12;
    break;
   case 12:
    var $box_0;
    var $row_0;
    var $cmp7 = $box_0 >>> 0 > 11;
    var $and = $box_0 & 1;
    var $tobool = ($and | 0) == 0;
    var $or_cond = $cmp7 | $tobool;
    if ($or_cond) {
      label = 20;
      break;
    } else {
      var $row_123 = $row_0;
      var $col_025 = 0;
      label = 13;
      break;
    }
   case 13:
    var $col_025;
    var $row_123;
    var $cmp12 = ($col_025 | 0) == 1;
    var $inc29 = $col_025 + 1 | 0;
    if ($cmp12) {
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 14:
    var $xor30 = $row_123 ^ 1;
    var $row_123 = $xor30;
    var $col_025 = $inc29;
    label = 13;
    break;
   case 15:
    var $and15 = $inc29 & 2;
    var $tobool16 = ($and15 | 0) == 0;
    var $div18 = $col_025 >>> 1;
    if ($tobool16) {
      label = 17;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $sub19 = $div18 - 1 | 0;
    var $arrayidx = $pixel + $sub19 | 0;
    var $1 = HEAP8[$arrayidx];
    var $conv = $1 & 255;
    var $add21 = $div18 + 1 | 0;
    var $arrayidx22 = $pixel + $add21 | 0;
    var $2 = HEAP8[$arrayidx22];
    var $conv23 = $2 & 255;
    var $add24 = $conv23 + $conv & 65535;
    var $cond30 = $add24;
    label = 18;
    break;
   case 17:
    var $arrayidx27 = $pixel + $div18 | 0;
    var $3 = HEAP8[$arrayidx27];
    var $conv28 = $3 & 255;
    var $shl = $conv28 << 1;
    var $cond30 = $shl;
    label = 18;
    break;
   case 18:
    var $cond30;
    var $4 = HEAP16[5245028 >> 1];
    var $conv32 = $4 & 65535;
    var $mul33 = $conv32 * $row_123 & -1;
    var $add34 = $mul33 + $col_025 | 0;
    var $5 = HEAP32[5245032 >> 2];
    var $arrayidx35 = $5 + ($add34 << 1) | 0;
    HEAP16[$arrayidx35 >> 1] = $cond30;
    var $xor = $row_123 ^ 1;
    var $exitcond = ($inc29 | 0) == 1533;
    if ($exitcond) {
      label = 19;
      break;
    } else {
      var $row_123 = $xor;
      var $col_025 = $inc29;
      label = 13;
      break;
    }
   case 19:
    var $6 = HEAP8[$arrayidx37];
    var $conv38 = $6 & 255;
    var $shl39 = $conv38 << 1;
    var $mul42 = $conv32 * $xor & -1;
    var $add43 = $mul42 + 1 | 0;
    var $arrayidx44 = $5 + ($add43 << 1) | 0;
    HEAP16[$arrayidx44 >> 1] = $shl39;
    var $7 = HEAP8[$arrayidx45];
    var $conv46 = $7 & 255;
    var $shl47 = $conv46 << 1;
    var $add51 = $mul42 + 1533 | 0;
    var $arrayidx52 = $5 + ($add51 << 1) | 0;
    HEAP16[$arrayidx52 >> 1] = $shl47;
    label = 22;
    break;
   case 20:
    var $and53 = $row_0 & 1;
    var $_pre = HEAP16[5245028 >> 1];
    var $_pre1 = HEAP32[5245032 >> 2];
    var $col_126 = $and53;
    label = 21;
    break;
   case 21:
    var $col_126;
    var $div58 = $col_126 >>> 1;
    var $arrayidx59 = $pixel + $div58 | 0;
    var $8 = HEAP8[$arrayidx59];
    var $conv60 = $8 & 255;
    var $shl61 = $conv60 << 1;
    var $conv63 = $_pre & 65535;
    var $mul64 = $conv63 * $row_0 & -1;
    var $add65 = $mul64 + $col_126 | 0;
    var $arrayidx66 = $_pre1 + ($add65 << 1) | 0;
    HEAP16[$arrayidx66 >> 1] = $shl61;
    var $add68 = $col_126 + 2 | 0;
    var $cmp55 = $add68 >>> 0 < 1534;
    if ($cmp55) {
      var $col_126 = $add68;
      label = 21;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    var $inc72 = $irow_027 + 1 | 0;
    var $exitcond28 = ($inc72 | 0) == 1481;
    if ($exitcond28) {
      label = 23;
      break;
    } else {
      var $irow_027 = $inc72;
      label = 3;
      break;
    }
   case 23:
    HEAP32[5263496 >> 2] = 510;
    STACKTOP = __stackBase__;
    return;
  }
}
_minolta_rd175_load_raw["X"] = 1;
function _quicktake_100_load_raw() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 311696 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $pixel = __stackBase__;
    var $call = _getbithuff(-1, 0);
    var $0 = $pixel | 0;
    _memset($0, -128, 311696);
    var $1 = HEAP16[5398712 >> 1];
    var $conv156 = $1 & 65535;
    var $add157 = $conv156 + 2 | 0;
    var $cmp158 = $add157 >>> 0 > 2;
    if ($cmp158) {
      label = 3;
      break;
    } else {
      var $rb_0150 = 0;
      var $11 = $1;
      label = 14;
      break;
    }
   case 3:
    var $_pre5 = HEAP16[5242964 >> 1];
    var $row_0159 = 2;
    var $val_0161 = 0;
    var $3 = $_pre5;
    var $2 = $1;
    label = 4;
    break;
   case 4:
    var $2;
    var $3;
    var $val_0161;
    var $row_0159;
    var $and = $row_0159 & 1;
    var $add2123 = $and | 2;
    var $conv4151 = $3 & 65535;
    var $add5152 = $conv4151 + 2 | 0;
    var $cmp6153 = $add2123 >>> 0 < $add5152 >>> 0;
    if ($cmp6153) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $inc_pre = $row_0159 + 1 | 0;
    var $col_0_lcssa = $add2123;
    var $val_1_lcssa = $val_0161;
    var $10 = $3;
    var $9 = $2;
    var $inc_pre_phi = $inc_pre;
    label = 13;
    break;
   case 6:
    var $sub9 = $row_0159 - 1 | 0;
    var $and47 = $and ^ 1;
    var $add48 = $row_0159 + 1 | 0;
    var $arrayidx50 = $pixel + $add48 * 644 + $and47 | 0;
    var $cmp54 = ($row_0159 | 0) == 2;
    var $col_0154 = $add2123;
    label = 7;
    break;
   case 7:
    var $col_0154;
    var $sub = $col_0154 - 1 | 0;
    var $arrayidx10 = $pixel + $sub9 * 644 + $sub | 0;
    var $4 = HEAP8[$arrayidx10];
    var $conv11 = $4 & 255;
    var $add12 = $col_0154 + 1 | 0;
    var $arrayidx15 = $pixel + $sub9 * 644 + $add12 | 0;
    var $5 = HEAP8[$arrayidx15];
    var $conv16 = $5 & 255;
    var $mul = $conv16 << 1;
    var $add17 = $mul + $conv11 | 0;
    var $sub18 = $col_0154 - 2 | 0;
    var $arrayidx20 = $pixel + $row_0159 * 644 + $sub18 | 0;
    var $6 = HEAP8[$arrayidx20];
    var $conv21 = $6 & 255;
    var $add22 = $add17 + $conv21 | 0;
    var $shr = $add22 >>> 2;
    var $call23 = _getbithuff(4, 0);
    var $arrayidx24 = 5245092 + ($call23 << 1) | 0;
    var $7 = HEAP16[$arrayidx24 >> 1];
    var $conv25 = $7 << 16 >> 16;
    var $add26 = $shr + $conv25 | 0;
    var $cmp27 = ($add26 | 0) < 255;
    var $cond = $cmp27 ? $add26 : 255;
    var $cmp29 = ($cond | 0) < 0;
    var $_cond = $cmp29 ? 0 : $cond;
    var $conv41 = $_cond & 255;
    var $arrayidx43 = $pixel + $row_0159 * 644 + $col_0154 | 0;
    HEAP8[$arrayidx43] = $conv41;
    var $cmp44 = ($col_0154 | 0) < 4;
    if ($cmp44) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    HEAP8[$arrayidx50] = $conv41;
    HEAP8[$arrayidx20] = $conv41;
    label = 9;
    break;
   case 9:
    if ($cmp54) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    var $add58 = $col_0154 + 3 | 0;
    var $arrayidx61 = $pixel + $sub9 * 644 + $add58 | 0;
    HEAP8[$arrayidx61] = $conv41;
    HEAP8[$arrayidx15] = $conv41;
    label = 11;
    break;
   case 11:
    var $add67 = $col_0154 + 2 | 0;
    var $8 = HEAP16[5242964 >> 1];
    var $conv4 = $8 & 65535;
    var $add5 = $conv4 + 2 | 0;
    var $cmp6 = ($add67 | 0) < ($add5 | 0);
    if ($cmp6) {
      var $col_0154 = $add67;
      label = 7;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $_pre6 = HEAP16[5398712 >> 1];
    var $col_0_lcssa = $add67;
    var $val_1_lcssa = $_cond;
    var $10 = $8;
    var $9 = $_pre6;
    var $inc_pre_phi = $add48;
    label = 13;
    break;
   case 13:
    var $inc_pre_phi;
    var $9;
    var $10;
    var $val_1_lcssa;
    var $col_0_lcssa;
    var $conv68 = $val_1_lcssa & 255;
    var $arrayidx70 = $pixel + $row_0159 * 644 + $col_0_lcssa | 0;
    HEAP8[$arrayidx70] = $conv68;
    var $conv = $9 & 65535;
    var $add = $conv + 2 | 0;
    var $cmp = ($inc_pre_phi | 0) < ($add | 0);
    if ($cmp) {
      var $row_0159 = $inc_pre_phi;
      var $val_0161 = $val_1_lcssa;
      var $3 = $10;
      var $2 = $9;
      label = 4;
      break;
    } else {
      var $rb_0150 = 0;
      var $11 = $9;
      label = 14;
      break;
    }
   case 14:
    var $11;
    var $rb_0150;
    var $row_1144 = $rb_0150 + 2 | 0;
    var $conv79145 = $11 & 65535;
    var $add80146 = $conv79145 + 2 | 0;
    var $cmp81147 = ($row_1144 | 0) < ($add80146 | 0);
    if ($cmp81147) {
      label = 15;
      break;
    } else {
      var $_pr = $11;
      label = 34;
      break;
    }
   case 15:
    var $_pre3 = HEAP16[5242964 >> 1];
    var $row_1_in148 = $rb_0150;
    var $row_1149 = $row_1144;
    var $16 = $_pre3;
    var $15 = $11;
    label = 20;
    break;
   case 16:
    var $conv289135 = $_pr & 65535;
    var $add290136 = $conv289135 + 2 | 0;
    var $cmp291137 = $add290136 >>> 0 > 2;
    if ($cmp291137) {
      label = 17;
      break;
    } else {
      label = 35;
      break;
    }
   case 17:
    var $12 = HEAP16[5242964 >> 1];
    var $conv297131 = $12 & 65535;
    var $add298132 = $conv297131 + 2 | 0;
    var $row_2138 = 2;
    label = 37;
    break;
   case 18:
    var $_pre4 = HEAP16[5398712 >> 1];
    var $14 = $23;
    var $13 = $_pre4;
    label = 19;
    break;
   case 19:
    var $13;
    var $14;
    var $row_1 = $row_1149 + 2 | 0;
    var $conv79 = $13 & 65535;
    var $add80 = $conv79 + 2 | 0;
    var $cmp81 = ($row_1 | 0) < ($add80 | 0);
    if ($cmp81) {
      var $row_1_in148 = $row_1149;
      var $row_1149 = $row_1;
      var $16 = $14;
      var $15 = $13;
      label = 20;
      break;
    } else {
      var $_pr = $13;
      label = 34;
      break;
    }
   case 20:
    var $15;
    var $16;
    var $row_1149;
    var $row_1_in148;
    var $and84 = $row_1149 & 1;
    var $17 = $and84 ^ 3;
    var $conv87140 = $16 & 65535;
    var $add88141 = $conv87140 + 2 | 0;
    var $cmp89142 = $17 >>> 0 < $add88141 >>> 0;
    if ($cmp89142) {
      label = 21;
      break;
    } else {
      var $14 = $16;
      var $13 = $15;
      label = 19;
      break;
    }
   case 21:
    var $cmp92 = ($row_1149 | 0) < 4;
    var $add275 = $row_1_in148 + 4 | 0;
    var $col_1143 = $17;
    label = 22;
    break;
   case 22:
    var $col_1143;
    var $cmp94 = ($col_1143 | 0) < 4;
    var $or_cond = $cmp92 | $cmp94;
    var $arrayidx227_phi_trans_insert = $pixel + $row_1_in148 * 644 + $col_1143 | 0;
    var $_pre7 = HEAP8[$arrayidx227_phi_trans_insert];
    if ($or_cond) {
      label = 23;
      break;
    } else {
      label = 24;
      break;
    }
   case 23:
    var $sub229_pre = $col_1143 - 2 | 0;
    var $arrayidx231_pre = $pixel + $row_1149 * 644 + $sub229_pre | 0;
    var $sharp_0 = 2;
    var $20 = $_pre7;
    var $sub229_pre_phi = $sub229_pre;
    var $arrayidx231_pre_phi = $arrayidx231_pre;
    label = 29;
    break;
   case 24:
    var $conv100 = $_pre7 & 255;
    var $sub101 = $col_1143 - 2 | 0;
    var $arrayidx103 = $pixel + $row_1149 * 644 + $sub101 | 0;
    var $18 = HEAP8[$arrayidx103];
    var $conv104 = $18 & 255;
    var $sub105 = $conv100 - $conv104 | 0;
    var $shr115 = $sub105 >> 31;
    var $xor = $shr115 ^ $sub105;
    var $shr115_neg = $sub105 >>> 31;
    var $arrayidx134 = $pixel + $row_1_in148 * 644 + $sub101 | 0;
    var $19 = HEAP8[$arrayidx134];
    var $conv135 = $19 & 255;
    var $sub136 = $conv100 - $conv135 | 0;
    var $shr147 = $sub136 >> 31;
    var $xor148 = $shr147 ^ $sub136;
    var $shr147_neg = $sub136 >>> 31;
    var $sub171 = $conv104 - $conv135 | 0;
    var $shr182 = $sub171 >> 31;
    var $xor183 = $shr182 ^ $sub171;
    var $sub195 = $xor183 - $shr182 | 0;
    var $sub160 = $xor + $shr115_neg | 0;
    var $sub126 = $sub160 + $shr147_neg | 0;
    var $add161 = $sub126 + $xor148 | 0;
    var $add196 = $add161 + $sub195 | 0;
    var $cmp197 = ($add196 | 0) < 4;
    if ($cmp197) {
      var $sharp_0 = 0;
      var $20 = $_pre7;
      var $sub229_pre_phi = $sub101;
      var $arrayidx231_pre_phi = $arrayidx103;
      label = 29;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    var $cmp201 = ($add196 | 0) < 8;
    if ($cmp201) {
      var $sharp_0 = 1;
      var $20 = $_pre7;
      var $sub229_pre_phi = $sub101;
      var $arrayidx231_pre_phi = $arrayidx103;
      label = 29;
      break;
    } else {
      label = 26;
      break;
    }
   case 26:
    var $cmp205 = ($add196 | 0) < 16;
    if ($cmp205) {
      var $sharp_0 = 2;
      var $20 = $_pre7;
      var $sub229_pre_phi = $sub101;
      var $arrayidx231_pre_phi = $arrayidx103;
      label = 29;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    var $cmp209 = ($add196 | 0) < 32;
    if ($cmp209) {
      var $sharp_0 = 3;
      var $20 = $_pre7;
      var $sub229_pre_phi = $sub101;
      var $arrayidx231_pre_phi = $arrayidx103;
      label = 29;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    var $cmp213 = ($add196 | 0) < 48;
    var $cond215 = $cmp213 ? 4 : 5;
    var $sharp_0 = $cond215;
    var $20 = $_pre7;
    var $sub229_pre_phi = $sub101;
    var $arrayidx231_pre_phi = $arrayidx103;
    label = 29;
    break;
   case 29:
    var $arrayidx231_pre_phi;
    var $sub229_pre_phi;
    var $20;
    var $sharp_0;
    var $conv228 = $20 & 255;
    var $21 = HEAP8[$arrayidx231_pre_phi];
    var $conv232 = $21 & 255;
    var $add233 = $conv232 + $conv228 | 0;
    var $shr234 = $add233 >>> 1;
    var $call235 = _getbithuff(2, 0);
    var $arrayidx237 = 5245044 + ($sharp_0 << 3) + ($call235 << 1) | 0;
    var $22 = HEAP16[$arrayidx237 >> 1];
    var $conv238 = $22 << 16 >> 16;
    var $add239 = $shr234 + $conv238 | 0;
    var $cmp240 = ($add239 | 0) < 255;
    var $cond245 = $cmp240 ? $add239 : 255;
    var $cmp246 = ($cond245 | 0) < 0;
    var $phitmp122 = $cond245 & 255;
    var $cond257 = $cmp246 ? 0 : $phitmp122;
    var $arrayidx260 = $pixel + $row_1149 * 644 + $col_1143 | 0;
    HEAP8[$arrayidx260] = $cond257;
    if ($cmp92) {
      label = 30;
      break;
    } else {
      label = 31;
      break;
    }
   case 30:
    var $add265 = $col_1143 + 2 | 0;
    var $arrayidx268 = $pixel + $row_1_in148 * 644 + $add265 | 0;
    HEAP8[$arrayidx268] = $cond257;
    label = 31;
    break;
   case 31:
    if ($cmp94) {
      label = 32;
      break;
    } else {
      label = 33;
      break;
    }
   case 32:
    var $arrayidx277 = $pixel + $add275 * 644 + $sub229_pre_phi | 0;
    HEAP8[$arrayidx277] = $cond257;
    label = 33;
    break;
   case 33:
    var $add280 = $col_1143 + 2 | 0;
    var $23 = HEAP16[5242964 >> 1];
    var $conv87 = $23 & 65535;
    var $add88 = $conv87 + 2 | 0;
    var $cmp89 = ($add280 | 0) < ($add88 | 0);
    if ($cmp89) {
      var $col_1143 = $add280;
      label = 22;
      break;
    } else {
      label = 18;
      break;
    }
   case 34:
    var $_pr;
    var $inc286 = $rb_0150 + 1 | 0;
    var $exitcond = ($inc286 | 0) == 2;
    if ($exitcond) {
      label = 16;
      break;
    } else {
      var $rb_0150 = $inc286;
      var $11 = $_pr;
      label = 14;
      break;
    }
   case 35:
    var $cmp346128 = $_pr << 16 >> 16 == 0;
    if ($cmp346128) {
      label = 44;
      break;
    } else {
      label = 36;
      break;
    }
   case 36:
    var $_pre = HEAP16[5242964 >> 1];
    var $row_3129 = 0;
    var $28 = $_pre;
    label = 40;
    break;
   case 37:
    var $row_2138;
    var $and294 = $row_2138 & 1;
    var $24 = $and294 ^ 3;
    var $cmp299133 = $24 >>> 0 < $add298132 >>> 0;
    if ($cmp299133) {
      var $col_2134 = $24;
      label = 38;
      break;
    } else {
      label = 39;
      break;
    }
   case 38:
    var $col_2134;
    var $sub302 = $col_2134 - 1 | 0;
    var $arrayidx304 = $pixel + $row_2138 * 644 + $sub302 | 0;
    var $25 = HEAP8[$arrayidx304];
    var $conv305 = $25 & 255;
    var $arrayidx307 = $pixel + $row_2138 * 644 + $col_2134 | 0;
    var $26 = HEAP8[$arrayidx307];
    var $conv308 = $26 & 255;
    var $shl = $conv308 << 2;
    var $add309 = $shl + $conv305 | 0;
    var $add310 = $col_2134 + 1 | 0;
    var $arrayidx312 = $pixel + $row_2138 * 644 + $add310 | 0;
    var $27 = HEAP8[$arrayidx312];
    var $conv313 = $27 & 255;
    var $add314 = $add309 + $conv313 | 0;
    var $shr315 = $add314 >>> 1;
    var $sub316 = $shr315 - 256 | 0;
    var $cmp317 = ($sub316 | 0) < 255;
    var $cond322 = $cmp317 ? $sub316 : 255;
    var $cmp323 = ($cond322 | 0) < 0;
    var $phitmp = $cond322 & 255;
    var $cond334 = $cmp323 ? 0 : $phitmp;
    HEAP8[$arrayidx307] = $cond334;
    var $add339 = $col_2134 + 2 | 0;
    var $cmp299 = ($add339 | 0) < ($add298132 | 0);
    if ($cmp299) {
      var $col_2134 = $add339;
      label = 38;
      break;
    } else {
      label = 39;
      break;
    }
   case 39:
    var $inc342 = $row_2138 + 1 | 0;
    var $cmp291 = ($inc342 | 0) < ($add290136 | 0);
    if ($cmp291) {
      var $row_2138 = $inc342;
      label = 37;
      break;
    } else {
      label = 35;
      break;
    }
   case 40:
    var $28;
    var $row_3129;
    var $cmp351125 = $28 << 16 >> 16 == 0;
    if ($cmp351125) {
      var $31 = 0;
      label = 43;
      break;
    } else {
      label = 41;
      break;
    }
   case 41:
    var $add355 = $row_3129 + 2 | 0;
    var $_pre1 = HEAP16[5245028 >> 1];
    var $_pre2 = HEAP32[5245032 >> 2];
    var $col_3126 = 0;
    label = 42;
    break;
   case 42:
    var $col_3126;
    var $add354 = $col_3126 + 2 | 0;
    var $arrayidx357 = $pixel + $add355 * 644 + $add354 | 0;
    var $29 = HEAP8[$arrayidx357];
    var $idxprom = $29 & 255;
    var $arrayidx358 = 5245124 + ($idxprom << 1) | 0;
    var $30 = HEAP16[$arrayidx358 >> 1];
    var $conv359 = $_pre1 & 65535;
    var $mul360 = $conv359 * $row_3129 & -1;
    var $add361 = $mul360 + $col_3126 | 0;
    var $arrayidx362 = $_pre2 + ($add361 << 1) | 0;
    HEAP16[$arrayidx362 >> 1] = $30;
    var $inc364 = $col_3126 + 1 | 0;
    var $conv350 = $_pre & 65535;
    var $cmp351 = ($inc364 | 0) < ($conv350 | 0);
    if ($cmp351) {
      var $col_3126 = $inc364;
      label = 42;
      break;
    } else {
      var $31 = $_pre;
      label = 43;
      break;
    }
   case 43:
    var $31;
    var $inc367 = $row_3129 + 1 | 0;
    var $cmp346 = ($inc367 | 0) < ($conv289135 | 0);
    if ($cmp346) {
      var $row_3129 = $inc367;
      var $28 = $31;
      label = 40;
      break;
    } else {
      label = 44;
      break;
    }
   case 44:
    HEAP32[5263496 >> 2] = 1023;
    STACKTOP = __stackBase__;
    return;
  }
}
_quicktake_100_load_raw["X"] = 1;
function _kodak_jpeg_load_raw() {
  return;
}
function _lossy_dng_load_raw() {
  return;
}
function _kodak_radc_load_raw() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 9736 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $huff = __stackBase__;
    var $last = __stackBase__ + 9728;
    var $0 = $last;
    var $mul = STACKTOP;
    STACKTOP = STACKTOP + 6 | 0;
    STACKTOP = STACKTOP + 3 >> 2 << 2;
    var $buf = STACKTOP;
    STACKTOP = STACKTOP + 6948 | 0;
    HEAP16[$0 >> 1] = HEAP16[5263996 >> 1];
    HEAP16[$0 + 2 >> 1] = HEAP16[5263998 >> 1];
    HEAP16[$0 + 4 >> 1] = HEAP16[5264e3 >> 1];
    var $i_0254 = 2;
    var $1 = 0;
    label = 3;
    break;
   case 3:
    var $1;
    var $i_0254;
    var $arrayidx2 = 5263972 + ($i_0254 << 1) | 0;
    var $2 = HEAP16[$arrayidx2 >> 1];
    var $cmp4251 = ($1 & 65535) > ($2 & 65535);
    if ($cmp4251) {
      label = 6;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $sub = $i_0254 - 2 | 0;
    var $arrayidx = 5263972 + ($sub << 1) | 0;
    var $conv = $1 & 65535;
    var $conv3250 = $2 & 65535;
    var $3 = HEAP16[$arrayidx >> 1];
    var $conv9 = $3 & 65535;
    var $add187 = $i_0254 | 1;
    var $arrayidx19 = 5263972 + ($add187 << 1) | 0;
    var $4 = HEAP16[$arrayidx19 >> 1];
    var $conv20 = $4 & 65535;
    var $sub21 = $i_0254 - 1 | 0;
    var $arrayidx22 = 5263972 + ($sub21 << 1) | 0;
    var $5 = HEAP16[$arrayidx22 >> 1];
    var $conv23 = $5 & 65535;
    var $sub24 = $conv20 - $conv23 | 0;
    var $conv25 = $sub24 | 0;
    var $conv30 = $conv23 | 0;
    var $c_0252 = $conv;
    label = 5;
    break;
   case 5:
    var $c_0252;
    var $sub10 = $c_0252 - $conv9 | 0;
    var $conv11 = $sub10 | 0;
    var $sub17 = $conv3250 - $conv9 | 0;
    var $conv18 = $sub17 | 0;
    var $div = $conv11 / $conv18;
    var $mul26 = $div * $conv25;
    var $add31 = $conv30 + $mul26;
    var $conv32 = $add31;
    var $add33 = $conv32 + .5;
    var $conv34 = $add33 >= 0 ? Math.floor($add33) : Math.ceil($add33);
    var $arrayidx35 = 5428500 + ($c_0252 << 1) | 0;
    HEAP16[$arrayidx35 >> 1] = $conv34;
    var $inc = $c_0252 + 1 | 0;
    var $cmp4 = ($inc | 0) > ($conv3250 | 0);
    if ($cmp4) {
      label = 6;
      break;
    } else {
      var $c_0252 = $inc;
      label = 5;
      break;
    }
   case 6:
    var $add37 = $i_0254 + 2 | 0;
    var $cmp = ($add37 | 0) < 12;
    if ($cmp) {
      var $i_0254 = $add37;
      var $1 = $2;
      label = 3;
      break;
    } else {
      var $i_1248 = 0;
      var $s_0249 = 0;
      label = 7;
      break;
    }
   case 7:
    var $s_0249;
    var $i_1248;
    var $arrayidx44 = $i_1248 + 5263712 | 0;
    var $6 = HEAP8[$arrayidx44];
    var $conv45241 = $6 << 24 >> 24;
    var $shr242 = 256 >>> ($conv45241 >>> 0);
    var $cmp46243 = ($shr242 | 0) > 0;
    if ($cmp46243) {
      label = 8;
      break;
    } else {
      var $s_1_lcssa = $s_0249;
      label = 11;
      break;
    }
   case 8:
    var $add51186 = $i_1248 | 1;
    var $arrayidx52 = $add51186 + 5263712 | 0;
    var $7 = HEAP8[$arrayidx52];
    var $conv53 = $7 & 255;
    var $8 = ($shr242 | 0) > 1;
    var $smax = $8 ? $shr242 : 1;
    var $c_1244 = 0;
    var $s_1245 = $s_0249;
    label = 9;
    break;
   case 9:
    var $s_1245;
    var $c_1244;
    var $shl = $conv45241 << 8;
    var $or = $conv53 | $shl;
    var $conv54 = $or & 65535;
    var $inc55 = $s_1245 + 1 | 0;
    var $arrayidx57 = $huff + ($s_1245 << 1) | 0;
    HEAP16[$arrayidx57 >> 1] = $conv54;
    var $inc59 = $c_1244 + 1 | 0;
    var $cmp46 = ($inc59 | 0) < ($shr242 | 0);
    if ($cmp46) {
      var $c_1244 = $inc59;
      var $s_1245 = $inc55;
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $9 = $s_0249 + $smax | 0;
    var $s_1_lcssa = $9;
    label = 11;
    break;
   case 11:
    var $s_1_lcssa;
    var $add62 = $i_1248 + 2 | 0;
    var $cmp40 = $add62 >>> 0 < 260;
    if ($cmp40) {
      var $i_1248 = $add62;
      var $s_0249 = $s_1_lcssa;
      label = 7;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $10 = HEAP32[5264036 >> 2];
    var $cmp64 = ($10 | 0) == 243;
    var $cond = $cmp64 ? 2 : 3;
    var $sub70 = 8 - $cond | 0;
    var $shl71 = $sub70 << 8;
    var $sub75 = $cond - 1 | 0;
    var $shl76 = 1 << $sub75;
    var $or74 = $shl76 | $shl71;
    var $c_2240 = 0;
    label = 13;
    break;
   case 13:
    var $c_2240;
    var $shr72 = $c_2240 >> $cond;
    var $shl73 = $shr72 << $cond;
    var $or77 = $or74 | $shl73;
    var $conv78 = $or77 & 65535;
    var $arrayidx80 = $huff + 9216 + ($c_2240 << 1) | 0;
    HEAP16[$arrayidx80 >> 1] = $conv78;
    var $inc82 = $c_2240 + 1 | 0;
    var $exitcond264 = ($inc82 | 0) == 256;
    if ($exitcond264) {
      label = 14;
      break;
    } else {
      var $c_2240 = $inc82;
      label = 13;
      break;
    }
   case 14:
    var $call = _getbithuff(-1, 0);
    var $i_2239 = 0;
    label = 18;
    break;
   case 15:
    var $11 = HEAP16[5398712 >> 1];
    var $cmp96237 = $11 << 16 >> 16 == 0;
    if ($cmp96237) {
      label = 16;
      break;
    } else {
      label = 17;
      break;
    }
   case 16:
    var $_pre = HEAP16[5242964 >> 1];
    var $14 = 0;
    var $13 = $_pre;
    label = 21;
    break;
   case 17:
    var $arraydecay191 = $huff + 9216 | 0;
    var $arraydecay273 = $huff + 4608 | 0;
    var $arraydecay349 = $huff + 5120 | 0;
    var $arrayidx105 = $mul | 0;
    var $arrayidx105_1 = $mul + 2 | 0;
    var $arrayidx105_2 = $mul + 4 | 0;
    var $row_0238 = 0;
    label = 23;
    break;
   case 18:
    var $i_2239;
    var $arrayidx90 = $buf + ($i_2239 << 1) | 0;
    HEAP16[$arrayidx90 >> 1] = 2048;
    var $inc92 = $i_2239 + 1 | 0;
    var $exitcond263 = ($inc92 | 0) == 3474;
    if ($exitcond263) {
      label = 15;
      break;
    } else {
      var $i_2239 = $inc92;
      label = 18;
      break;
    }
   case 19:
    var $12 = HEAP16[5398712 >> 1];
    var $conv95 = $12 & 65535;
    var $cmp96 = ($add458 | 0) < ($conv95 | 0);
    if ($cmp96) {
      var $row_0238 = $add458;
      label = 23;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    var $phitmp = $12 & 65535;
    var $14 = $phitmp;
    var $13 = $44;
    label = 21;
    break;
   case 21:
    var $13;
    var $14;
    var $conv529190 = $13 & 65535;
    var $mul530191 = $conv529190 * $14 & -1;
    var $cmp531192 = ($mul530191 | 0) == 0;
    if ($cmp531192) {
      label = 69;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    var $_pre5 = HEAP32[5245032 >> 2];
    var $i_4193 = 0;
    label = 68;
    break;
   case 23:
    var $row_0238;
    var $call103 = _getbithuff(6, 0);
    var $conv104 = $call103 & 65535;
    HEAP16[$arrayidx105 >> 1] = $conv104;
    var $call103_1 = _getbithuff(6, 0);
    var $conv104_1 = $call103_1 & 65535;
    HEAP16[$arrayidx105_1 >> 1] = $conv104_1;
    var $call103_2 = _getbithuff(6, 0);
    var $conv104_2 = $call103_2 & 65535;
    HEAP16[$arrayidx105_2 >> 1] = $conv104_2;
    var $add410 = $row_0238 - 1 | 0;
    var $c_4229 = 0;
    var $15 = $conv104;
    label = 24;
    break;
   case 24:
    var $15;
    var $c_4229;
    var $arrayidx113 = $last + ($c_4229 << 1) | 0;
    var $16 = HEAP16[$arrayidx113 >> 1];
    var $conv114 = $16 << 16 >> 16;
    var $div115 = 16777216 / ($conv114 | 0) & -1;
    var $add116 = $div115 + 2047 | 0;
    var $shr117 = $add116 >> 12;
    var $conv119 = $15 << 16 >> 16;
    var $mul120 = $shr117 * $conv119 & -1;
    var $cmp121 = ($mul120 | 0) > 65564;
    var $cond123 = $cmp121 ? 10 : 12;
    var $sub124 = $cond123 - 1 | 0;
    var $shl125 = -1 << $sub124;
    var $neg = $shl125 ^ -1;
    var $sub126 = 12 - $cond123 | 0;
    var $shl127 = $mul120 << $sub126;
    var $i_3195 = 0;
    label = 25;
    break;
   case 25:
    var $i_3195;
    var $arrayidx134 = $buf + $c_4229 * 2316 + ($i_3195 << 1) | 0;
    var $17 = HEAP16[$arrayidx134 >> 1];
    var $conv135 = $17 << 16 >> 16;
    var $mul136 = $conv135 * $shl127 & -1;
    var $add137 = $mul136 + $neg | 0;
    var $shr138 = $add137 >> $cond123;
    var $conv139 = $shr138 & 65535;
    HEAP16[$arrayidx134 >> 1] = $conv139;
    var $inc144 = $i_3195 + 1 | 0;
    var $exitcond = ($inc144 | 0) == 1158;
    if ($exitcond) {
      label = 26;
      break;
    } else {
      var $i_3195 = $inc144;
      label = 25;
      break;
    }
   case 26:
    HEAP16[$arrayidx113 >> 1] = $15;
    var $tobool = ($c_4229 | 0) != 0;
    var $18 = $tobool & 1;
    var $lnot_ext = $18 ^ 1;
    var $shl154 = $15 << 7;
    var $arrayidx159 = $buf + $c_4229 * 2316 + 1544 | 0;
    var $add411 = $add410 + $c_4229 | 0;
    var $add416 = 2 - $c_4229 | 0;
    var $add_ptr = $buf + $c_4229 * 2316 + ($lnot_ext << 1) | 0;
    var $19 = $add_ptr;
    var $20 = $arrayidx159;
    var $mul449 = $lnot_ext << 1;
    var $sub450 = 772 - $mul449 | 0;
    var $sub412_1 = $add411 + 2 | 0;
    var $_pre3 = HEAP16[5242964 >> 1];
    var $r_0228 = 0;
    var $23 = $_pre3;
    var $22 = $_pre3;
    var $21 = $_pre3;
    label = 27;
    break;
   case 27:
    var $21;
    var $22;
    var $23;
    var $r_0228;
    var $conv156 = $23 & 65535;
    var $div157 = $conv156 >>> 1;
    var $arrayidx160 = $buf + $c_4229 * 2316 + 1544 + ($div157 << 1) | 0;
    HEAP16[$arrayidx160 >> 1] = $shl154;
    var $arrayidx165 = $buf + $c_4229 * 2316 + 772 + ($div157 << 1) | 0;
    HEAP16[$arrayidx165 >> 1] = $shl154;
    var $cmp169218 = ($div157 | 0) == 0;
    if ($cmp169218) {
      var $46 = $23;
      var $45 = $22;
      var $44 = $21;
      label = 52;
      break;
    } else {
      var $tree_0219 = 1;
      var $col_0220 = $div157;
      label = 29;
      break;
    }
   case 28:
    var $col_0_be;
    var $cmp169 = ($col_0_be | 0) > 0;
    if ($cmp169) {
      var $tree_0219 = $conv175;
      var $col_0220 = $col_0_be;
      label = 29;
      break;
    } else {
      label = 51;
      break;
    }
   case 29:
    var $col_0220;
    var $tree_0219;
    var $arraydecay = $huff + ($tree_0219 << 9) | 0;
    var $call173 = _getbithuff(8, $arraydecay);
    var $sext = $call173 << 24;
    var $conv175 = $sext >> 24;
    var $tobool176 = ($conv175 | 0) == 0;
    if ($tobool176) {
      var $col_1 = $col_0220;
      label = 37;
      break;
    } else {
      label = 30;
      break;
    }
   case 30:
    var $sub177 = $col_0220 - 2 | 0;
    var $cmp178 = ($conv175 | 0) == 8;
    var $x_0200 = $col_0220 - 1 | 0;
    if ($cmp178) {
      var $x_0201 = $x_0200;
      label = 31;
      break;
    } else {
      label = 32;
      break;
    }
   case 31:
    var $x_0201;
    var $call192 = _getbithuff(8, $arraydecay191);
    var $conv194 = $call192 & 255;
    var $mul197 = $conv119 * $conv194 & -1;
    var $conv198 = $mul197 & 65535;
    var $arrayidx201 = $buf + $c_4229 * 2316 + 772 + ($x_0201 << 1) | 0;
    HEAP16[$arrayidx201 >> 1] = $conv198;
    var $x_0 = $x_0201 - 1 | 0;
    var $cmp187 = ($x_0 | 0) < ($sub177 | 0);
    if ($cmp187) {
      var $x_0201_1 = $x_0200;
      label = 74;
      break;
    } else {
      var $x_0201 = $x_0;
      label = 31;
      break;
    }
   case 32:
    var $add216 = $conv175 + 10 | 0;
    var $arraydecay218 = $huff + ($add216 << 9) | 0;
    var $x_1_in197 = $col_0220;
    var $x_1198 = $x_0200;
    label = 33;
    break;
   case 33:
    var $x_1198;
    var $x_1_in197;
    var $call219 = _getbithuff(8, $arraydecay218);
    var $sext185 = $call219 << 24;
    var $mul222 = $sext185 >> 20;
    if ($tobool) {
      label = 34;
      break;
    } else {
      label = 35;
      break;
    }
   case 34:
    var $arrayidx227 = $buf + $c_4229 * 2316 + ($x_1198 << 1) | 0;
    var $24 = HEAP16[$arrayidx227 >> 1];
    var $conv228 = $24 << 16 >> 16;
    var $arrayidx232 = $buf + $c_4229 * 2316 + 772 + ($x_1_in197 << 1) | 0;
    var $25 = HEAP16[$arrayidx232 >> 1];
    var $conv233 = $25 << 16 >> 16;
    var $add234 = $conv233 + $conv228 | 0;
    var $div235 = ($add234 | 0) / 2 & -1;
    var $cond256 = $div235;
    label = 36;
    break;
   case 35:
    var $arrayidx240 = $buf + ($x_1_in197 << 1) | 0;
    var $26 = HEAP16[$arrayidx240 >> 1];
    var $conv241 = $26 << 16 >> 16;
    var $arrayidx245 = $buf + ($x_1198 << 1) | 0;
    var $27 = HEAP16[$arrayidx245 >> 1];
    var $conv246 = $27 << 16 >> 16;
    var $mul247 = $conv246 << 1;
    var $add248 = $mul247 + $conv241 | 0;
    var $arrayidx252 = $buf + 772 + ($x_1_in197 << 1) | 0;
    var $28 = HEAP16[$arrayidx252 >> 1];
    var $conv253 = $28 << 16 >> 16;
    var $add254 = $add248 + $conv253 | 0;
    var $div255 = ($add254 | 0) / 4 & -1;
    var $cond256 = $div255;
    label = 36;
    break;
   case 36:
    var $cond256;
    var $add257 = $cond256 + $mul222 | 0;
    var $conv258 = $add257 & 65535;
    var $arrayidx261 = $buf + $c_4229 * 2316 + 772 + ($x_1198 << 1) | 0;
    HEAP16[$arrayidx261 >> 1] = $conv258;
    var $x_1 = $x_1198 - 1 | 0;
    var $cmp213 = ($x_1 | 0) < ($sub177 | 0);
    if ($cmp213) {
      var $x_1_in197_1 = $col_0220;
      var $x_1198_1 = $x_0200;
      label = 70;
      break;
    } else {
      var $x_1_in197 = $x_1198;
      var $x_1198 = $x_1;
      label = 33;
      break;
    }
   case 37:
    var $col_1;
    var $cmp269 = ($col_1 | 0) > 2;
    if ($cmp269) {
      label = 38;
      break;
    } else {
      var $cond280 = 1;
      label = 39;
      break;
    }
   case 38:
    var $call274 = _getbithuff(8, $arraydecay273);
    var $sext184 = $call274 << 24;
    var $conv276 = $sext184 >> 24;
    var $add277 = $conv276 + 1 | 0;
    var $cond280 = $add277;
    label = 39;
    break;
   case 39:
    var $cond280;
    var $cmp284211 = ($cond280 | 0) > 0;
    var $cmp286213 = ($col_1 | 0) > 0;
    var $or_cond188214 = $cmp284211 & $cmp286213;
    if ($or_cond188214) {
      label = 40;
      break;
    } else {
      var $col_2_lcssa = $col_1;
      label = 50;
      break;
    }
   case 40:
    var $29 = -$cond280 | 0;
    var $30 = $col_1 - 1 | 0;
    var $31 = $30 >>> 1;
    var $32 = $31 ^ -1;
    var $33 = $29 >>> 0 > $32 >>> 0;
    var $umax = $33 ? $29 : $32;
    var $34 = $umax >>> 0 > 4294967288;
    var $umax259 = $34 ? $umax : -8;
    var $35 = $umax259 << 1;
    var $36 = -$umax259 | 0;
    var $col_2215 = $col_1;
    var $rep_0216 = 0;
    label = 41;
    break;
   case 41:
    var $rep_0216;
    var $col_2215;
    var $sub289 = $col_2215 - 2 | 0;
    var $x_2204 = $col_2215 - 1 | 0;
    var $x_2_in205 = $col_2215;
    var $x_2206 = $x_2204;
    label = 42;
    break;
   case 42:
    var $x_2206;
    var $x_2_in205;
    if ($tobool) {
      label = 43;
      break;
    } else {
      label = 44;
      break;
    }
   case 43:
    var $arrayidx304 = $buf + $c_4229 * 2316 + ($x_2206 << 1) | 0;
    var $37 = HEAP16[$arrayidx304 >> 1];
    var $conv305 = $37 << 16 >> 16;
    var $arrayidx309 = $buf + $c_4229 * 2316 + 772 + ($x_2_in205 << 1) | 0;
    var $38 = HEAP16[$arrayidx309 >> 1];
    var $conv310 = $38 << 16 >> 16;
    var $add311 = $conv310 + $conv305 | 0;
    var $div312 = ($add311 | 0) / 2 & -1;
    var $cond335 = $div312;
    label = 45;
    break;
   case 44:
    var $arrayidx318 = $buf + ($x_2_in205 << 1) | 0;
    var $39 = HEAP16[$arrayidx318 >> 1];
    var $conv319 = $39 << 16 >> 16;
    var $arrayidx323 = $buf + ($x_2206 << 1) | 0;
    var $40 = HEAP16[$arrayidx323 >> 1];
    var $conv324 = $40 << 16 >> 16;
    var $mul325 = $conv324 << 1;
    var $add326 = $mul325 + $conv319 | 0;
    var $arrayidx330 = $buf + 772 + ($x_2_in205 << 1) | 0;
    var $41 = HEAP16[$arrayidx330 >> 1];
    var $conv331 = $41 << 16 >> 16;
    var $add332 = $add326 + $conv331 | 0;
    var $div333 = ($add332 | 0) / 4 & -1;
    var $cond335 = $div333;
    label = 45;
    break;
   case 45:
    var $cond335;
    var $conv336 = $cond335 & 65535;
    var $arrayidx339 = $buf + $c_4229 * 2316 + 772 + ($x_2206 << 1) | 0;
    HEAP16[$arrayidx339 >> 1] = $conv336;
    var $x_2 = $x_2206 - 1 | 0;
    var $cmp296 = ($x_2 | 0) < ($sub289 | 0);
    if ($cmp296) {
      var $x_2_in205_1 = $col_2215;
      var $x_2206_1 = $x_2204;
      label = 75;
      break;
    } else {
      var $x_2_in205 = $x_2206;
      var $x_2206 = $x_2;
      label = 42;
      break;
    }
   case 46:
    var $call350 = _getbithuff(8, $arraydecay349);
    var $sext182 = $call350 << 24;
    var $shl353 = $sext182 >> 20;
    var $x_3209 = $x_2204;
    label = 47;
    break;
   case 47:
    var $x_3209;
    var $arrayidx365 = $buf + $c_4229 * 2316 + 772 + ($x_3209 << 1) | 0;
    var $42 = HEAP16[$arrayidx365 >> 1];
    var $conv366183 = $42 & 65535;
    var $add367 = $conv366183 + $shl353 | 0;
    var $conv368 = $add367 & 65535;
    HEAP16[$arrayidx365 >> 1] = $conv368;
    var $x_3 = $x_3209 - 1 | 0;
    var $cmp360 = ($x_3 | 0) < ($sub289 | 0);
    if ($cmp360) {
      var $x_3209_1 = $x_2204;
      label = 80;
      break;
    } else {
      var $x_3209 = $x_3;
      label = 47;
      break;
    }
   case 48:
    var $inc377 = $rep_0216 + 1 | 0;
    var $exitcond260 = ($inc377 | 0) == ($36 | 0);
    if ($exitcond260) {
      label = 49;
      break;
    } else {
      var $col_2215 = $sub289;
      var $rep_0216 = $inc377;
      label = 41;
      break;
    }
   case 49:
    var $43 = $col_1 + $35 | 0;
    var $col_2_lcssa = $43;
    label = 50;
    break;
   case 50:
    var $col_2_lcssa;
    var $cmp379 = ($cond280 | 0) == 9;
    if ($cmp379) {
      var $col_1 = $col_2_lcssa;
      label = 37;
      break;
    } else {
      var $col_0_be = $col_2_lcssa;
      label = 28;
      break;
    }
   case 51:
    var $_pr = HEAP16[5242964 >> 1];
    var $46 = $_pr;
    var $45 = $_pr;
    var $44 = $_pr;
    label = 52;
    break;
   case 52:
    var $44;
    var $45;
    var $46;
    var $mul422 = $r_0228 << 1;
    var $add423 = $mul422 + $row_0238 | 0;
    var $cmp390224 = ($46 & 65535) > 1;
    if ($cmp390224) {
      label = 53;
      break;
    } else {
      var $75 = $46;
      label = 86;
      break;
    }
   case 53:
    var $_pre4 = HEAP16[5245028 >> 1];
    var $x_4225 = 0;
    label = 54;
    break;
   case 54:
    var $x_4225;
    var $arrayidx396 = $buf + $c_4229 * 2316 + 772 + ($x_4225 << 1) | 0;
    var $47 = HEAP16[$arrayidx396 >> 1];
    var $conv397 = $47 << 16 >> 16;
    var $shl398 = $conv397 << 4;
    var $div401 = ($shl398 | 0) / ($conv119 | 0) & -1;
    var $cmp402 = ($div401 | 0) < 0;
    var $48 = $div401 & 65535;
    var $conv408 = $cmp402 ? 0 : $48;
    var $conv413 = $_pre4 & 65535;
    if ($tobool) {
      label = 55;
      break;
    } else {
      label = 56;
      break;
    }
   case 55:
    var $mul414 = $conv413 * $add411 & -1;
    var $mul415 = $x_4225 << 1;
    var $sub417 = $add416 + $mul415 | 0;
    var $add418 = $sub417 + $mul414 | 0;
    var $49 = HEAP32[5245032 >> 2];
    var $arrayidx419 = $49 + ($add418 << 1) | 0;
    HEAP16[$arrayidx419 >> 1] = $conv408;
    var $51 = $49;
    label = 57;
    break;
   case 56:
    var $mul426 = $conv413 * $add423 & -1;
    var $mul427 = $x_4225 << 1;
    var $add429 = $mul427 + $mul426 | 0;
    var $50 = HEAP32[5245032 >> 2];
    var $arrayidx430 = $50 + ($add429 << 1) | 0;
    HEAP16[$arrayidx430 >> 1] = $conv408;
    var $51 = $50;
    label = 57;
    break;
   case 57:
    var $51;
    var $inc433 = $x_4225 + 1 | 0;
    var $conv388 = $46 & 65535;
    var $div389 = $conv388 >>> 1;
    var $cmp390 = ($inc433 | 0) < ($div389 | 0);
    if ($cmp390) {
      var $x_4225 = $inc433;
      label = 54;
      break;
    } else {
      label = 81;
      break;
    }
   case 58:
    var $inc455 = $c_4229 + 1 | 0;
    var $exitcond262 = ($inc455 | 0) == 3;
    if ($exitcond262) {
      label = 60;
      break;
    } else {
      label = 59;
      break;
    }
   case 59:
    var $arrayidx118_phi_trans_insert = $mul + ($inc455 << 1) | 0;
    var $_pre6 = HEAP16[$arrayidx118_phi_trans_insert >> 1];
    var $c_4229 = $inc455;
    var $15 = $_pre6;
    label = 24;
    break;
   case 60:
    var $add458 = $row_0238 + 4 | 0;
    var $y_5234 = $row_0238;
    var $52 = $44;
    label = 61;
    break;
   case 61:
    var $52;
    var $y_5234;
    var $cmp464231 = $52 << 16 >> 16 == 0;
    if ($cmp464231) {
      var $59 = 0;
      label = 67;
      break;
    } else {
      label = 62;
      break;
    }
   case 62:
    var $conv463230 = $52 & 65535;
    var $x_5232 = 0;
    var $conv463233 = $conv463230;
    label = 63;
    break;
   case 63:
    var $conv463233;
    var $x_5232;
    var $add467 = $x_5232 + $y_5234 | 0;
    var $and468 = $add467 & 1;
    var $tobool469 = ($and468 | 0) == 0;
    if ($tobool469) {
      label = 64;
      break;
    } else {
      label = 65;
      break;
    }
   case 64:
    var $inc519_pre = $x_5232 + 1 | 0;
    var $inc519_pre_phi = $inc519_pre;
    label = 66;
    break;
   case 65:
    var $tobool471 = ($x_5232 | 0) != 0;
    var $sub473 = $x_5232 - 1 | 0;
    var $add475 = $x_5232 + 1 | 0;
    var $cond477 = $tobool471 ? $sub473 : $add475;
    var $cmp480 = ($add475 | 0) < ($conv463233 | 0);
    var $cond487 = $cmp480 ? $add475 : $sub473;
    var $53 = HEAP16[5245028 >> 1];
    var $conv488 = $53 & 65535;
    var $mul489 = $conv488 * $y_5234 & -1;
    var $add490 = $mul489 + $x_5232 | 0;
    var $54 = HEAP32[5245032 >> 2];
    var $arrayidx491 = $54 + ($add490 << 1) | 0;
    var $55 = HEAP16[$arrayidx491 >> 1];
    var $conv492 = $55 & 65535;
    var $sub493 = $conv492 << 1;
    var $mul494 = $sub493 - 4096 | 0;
    var $add497 = $mul489 + $cond477 | 0;
    var $arrayidx498 = $54 + ($add497 << 1) | 0;
    var $56 = HEAP16[$arrayidx498 >> 1];
    var $conv499 = $56 & 65535;
    var $add502 = $mul489 + $cond487 | 0;
    var $arrayidx503 = $54 + ($add502 << 1) | 0;
    var $57 = HEAP16[$arrayidx503 >> 1];
    var $conv504 = $57 & 65535;
    var $add505 = $conv504 + $conv499 | 0;
    var $div506 = $add505 >>> 1;
    var $add507 = $mul494 + $div506 | 0;
    var $cmp508 = ($add507 | 0) < 0;
    var $58 = $add507 & 65535;
    var $conv512 = $cmp508 ? 0 : $58;
    HEAP16[$arrayidx491 >> 1] = $conv512;
    var $inc519_pre_phi = $add475;
    label = 66;
    break;
   case 66:
    var $inc519_pre_phi;
    var $conv463 = $44 & 65535;
    var $cmp464 = ($inc519_pre_phi | 0) < ($conv463 | 0);
    if ($cmp464) {
      var $x_5232 = $inc519_pre_phi;
      var $conv463233 = $conv463;
      label = 63;
      break;
    } else {
      var $59 = $44;
      label = 67;
      break;
    }
   case 67:
    var $59;
    var $inc522 = $y_5234 + 1 | 0;
    var $cmp459 = ($inc522 | 0) < ($add458 | 0);
    if ($cmp459) {
      var $y_5234 = $inc522;
      var $52 = $59;
      label = 61;
      break;
    } else {
      label = 19;
      break;
    }
   case 68:
    var $i_4193;
    var $arrayidx534 = $_pre5 + ($i_4193 << 1) | 0;
    var $60 = HEAP16[$arrayidx534 >> 1];
    var $idxprom = $60 & 65535;
    var $arrayidx535 = 5428500 + ($idxprom << 1) | 0;
    var $61 = HEAP16[$arrayidx535 >> 1];
    HEAP16[$arrayidx534 >> 1] = $61;
    var $inc538 = $i_4193 + 1 | 0;
    var $cmp531 = ($inc538 | 0) < ($mul530191 | 0);
    if ($cmp531) {
      var $i_4193 = $inc538;
      label = 68;
      break;
    } else {
      label = 69;
      break;
    }
   case 69:
    HEAP32[5263496 >> 2] = 16383;
    STACKTOP = __stackBase__;
    return;
   case 70:
    var $x_1198_1;
    var $x_1_in197_1;
    var $call219_1 = _getbithuff(8, $arraydecay218);
    var $sext185_1 = $call219_1 << 24;
    var $mul222_1 = $sext185_1 >> 20;
    if ($tobool) {
      label = 72;
      break;
    } else {
      label = 71;
      break;
    }
   case 71:
    var $arrayidx240_1 = $buf + 772 + ($x_1_in197_1 << 1) | 0;
    var $62 = HEAP16[$arrayidx240_1 >> 1];
    var $conv241_1 = $62 << 16 >> 16;
    var $arrayidx245_1 = $buf + 772 + ($x_1198_1 << 1) | 0;
    var $63 = HEAP16[$arrayidx245_1 >> 1];
    var $conv246_1 = $63 << 16 >> 16;
    var $mul247_1 = $conv246_1 << 1;
    var $add248_1 = $mul247_1 + $conv241_1 | 0;
    var $arrayidx252_1 = $buf + 1544 + ($x_1_in197_1 << 1) | 0;
    var $64 = HEAP16[$arrayidx252_1 >> 1];
    var $conv253_1 = $64 << 16 >> 16;
    var $add254_1 = $add248_1 + $conv253_1 | 0;
    var $div255_1 = ($add254_1 | 0) / 4 & -1;
    var $cond256_1 = $div255_1;
    label = 73;
    break;
   case 72:
    var $arrayidx227_1 = $buf + $c_4229 * 2316 + 772 + ($x_1198_1 << 1) | 0;
    var $65 = HEAP16[$arrayidx227_1 >> 1];
    var $conv228_1 = $65 << 16 >> 16;
    var $arrayidx232_1 = $buf + $c_4229 * 2316 + 1544 + ($x_1_in197_1 << 1) | 0;
    var $66 = HEAP16[$arrayidx232_1 >> 1];
    var $conv233_1 = $66 << 16 >> 16;
    var $add234_1 = $conv233_1 + $conv228_1 | 0;
    var $div235_1 = ($add234_1 | 0) / 2 & -1;
    var $cond256_1 = $div235_1;
    label = 73;
    break;
   case 73:
    var $cond256_1;
    var $add257_1 = $cond256_1 + $mul222_1 | 0;
    var $conv258_1 = $add257_1 & 65535;
    var $arrayidx261_1 = $buf + $c_4229 * 2316 + 1544 + ($x_1198_1 << 1) | 0;
    HEAP16[$arrayidx261_1 >> 1] = $conv258_1;
    var $x_1_1 = $x_1198_1 - 1 | 0;
    var $cmp213_1 = ($x_1_1 | 0) < ($sub177 | 0);
    if ($cmp213_1) {
      var $col_0_be = $sub177;
      label = 28;
      break;
    } else {
      var $x_1_in197_1 = $x_1198_1;
      var $x_1198_1 = $x_1_1;
      label = 70;
      break;
    }
   case 74:
    var $x_0201_1;
    var $call192_1 = _getbithuff(8, $arraydecay191);
    var $conv194_1 = $call192_1 & 255;
    var $mul197_1 = $conv119 * $conv194_1 & -1;
    var $conv198_1 = $mul197_1 & 65535;
    var $arrayidx201_1 = $buf + $c_4229 * 2316 + 1544 + ($x_0201_1 << 1) | 0;
    HEAP16[$arrayidx201_1 >> 1] = $conv198_1;
    var $x_0_1 = $x_0201_1 - 1 | 0;
    var $cmp187_1 = ($x_0_1 | 0) < ($sub177 | 0);
    if ($cmp187_1) {
      var $col_0_be = $sub177;
      label = 28;
      break;
    } else {
      var $x_0201_1 = $x_0_1;
      label = 74;
      break;
    }
   case 75:
    var $x_2206_1;
    var $x_2_in205_1;
    if ($tobool) {
      label = 77;
      break;
    } else {
      label = 76;
      break;
    }
   case 76:
    var $arrayidx318_1 = $buf + 772 + ($x_2_in205_1 << 1) | 0;
    var $67 = HEAP16[$arrayidx318_1 >> 1];
    var $conv319_1 = $67 << 16 >> 16;
    var $arrayidx323_1 = $buf + 772 + ($x_2206_1 << 1) | 0;
    var $68 = HEAP16[$arrayidx323_1 >> 1];
    var $conv324_1 = $68 << 16 >> 16;
    var $mul325_1 = $conv324_1 << 1;
    var $add326_1 = $mul325_1 + $conv319_1 | 0;
    var $arrayidx330_1 = $buf + 1544 + ($x_2_in205_1 << 1) | 0;
    var $69 = HEAP16[$arrayidx330_1 >> 1];
    var $conv331_1 = $69 << 16 >> 16;
    var $add332_1 = $add326_1 + $conv331_1 | 0;
    var $div333_1 = ($add332_1 | 0) / 4 & -1;
    var $cond335_1 = $div333_1;
    label = 78;
    break;
   case 77:
    var $arrayidx304_1 = $buf + $c_4229 * 2316 + 772 + ($x_2206_1 << 1) | 0;
    var $70 = HEAP16[$arrayidx304_1 >> 1];
    var $conv305_1 = $70 << 16 >> 16;
    var $arrayidx309_1 = $buf + $c_4229 * 2316 + 1544 + ($x_2_in205_1 << 1) | 0;
    var $71 = HEAP16[$arrayidx309_1 >> 1];
    var $conv310_1 = $71 << 16 >> 16;
    var $add311_1 = $conv310_1 + $conv305_1 | 0;
    var $div312_1 = ($add311_1 | 0) / 2 & -1;
    var $cond335_1 = $div312_1;
    label = 78;
    break;
   case 78:
    var $cond335_1;
    var $conv336_1 = $cond335_1 & 65535;
    var $arrayidx339_1 = $buf + $c_4229 * 2316 + 1544 + ($x_2206_1 << 1) | 0;
    HEAP16[$arrayidx339_1 >> 1] = $conv336_1;
    var $x_2_1 = $x_2206_1 - 1 | 0;
    var $cmp296_1 = ($x_2_1 | 0) < ($sub289 | 0);
    if ($cmp296_1) {
      label = 79;
      break;
    } else {
      var $x_2_in205_1 = $x_2206_1;
      var $x_2206_1 = $x_2_1;
      label = 75;
      break;
    }
   case 79:
    var $and = $rep_0216 & 1;
    var $tobool346 = ($and | 0) == 0;
    if ($tobool346) {
      label = 48;
      break;
    } else {
      label = 46;
      break;
    }
   case 80:
    var $x_3209_1;
    var $arrayidx365_1 = $buf + $c_4229 * 2316 + 1544 + ($x_3209_1 << 1) | 0;
    var $72 = HEAP16[$arrayidx365_1 >> 1];
    var $conv366183_1 = $72 & 65535;
    var $add367_1 = $conv366183_1 + $shl353 | 0;
    var $conv368_1 = $add367_1 & 65535;
    HEAP16[$arrayidx365_1 >> 1] = $conv368_1;
    var $x_3_1 = $x_3209_1 - 1 | 0;
    var $cmp360_1 = ($x_3_1 | 0) < ($sub289 | 0);
    if ($cmp360_1) {
      label = 48;
      break;
    } else {
      var $x_3209_1 = $x_3_1;
      label = 80;
      break;
    }
   case 81:
    var $add424_1265 = $add423 | 1;
    var $x_4225_1 = 0;
    label = 82;
    break;
   case 82:
    var $x_4225_1;
    var $arrayidx396_1 = $buf + $c_4229 * 2316 + 1544 + ($x_4225_1 << 1) | 0;
    var $73 = HEAP16[$arrayidx396_1 >> 1];
    var $conv397_1 = $73 << 16 >> 16;
    var $shl398_1 = $conv397_1 << 4;
    var $div401_1 = ($shl398_1 | 0) / ($conv119 | 0) & -1;
    var $cmp402_1 = ($div401_1 | 0) < 0;
    var $74 = $div401_1 & 65535;
    var $conv408_1 = $cmp402_1 ? 0 : $74;
    if ($tobool) {
      label = 84;
      break;
    } else {
      label = 83;
      break;
    }
   case 83:
    var $mul426_1 = $conv413 * $add424_1265 & -1;
    var $mul427_1 = $x_4225_1 << 1;
    var $add428_1266 = $mul427_1 | 1;
    var $add429_1 = $add428_1266 + $mul426_1 | 0;
    var $arrayidx430_1 = $51 + ($add429_1 << 1) | 0;
    HEAP16[$arrayidx430_1 >> 1] = $conv408_1;
    label = 85;
    break;
   case 84:
    var $mul414_1 = $conv413 * $sub412_1 & -1;
    var $mul415_1 = $x_4225_1 << 1;
    var $sub417_1 = $add416 + $mul415_1 | 0;
    var $add418_1 = $sub417_1 + $mul414_1 | 0;
    var $arrayidx419_1 = $51 + ($add418_1 << 1) | 0;
    HEAP16[$arrayidx419_1 >> 1] = $conv408_1;
    label = 85;
    break;
   case 85:
    var $inc433_1 = $x_4225_1 + 1 | 0;
    var $conv388_1 = $45 & 65535;
    var $div389_1 = $conv388_1 >>> 1;
    var $cmp390_1 = ($inc433_1 | 0) < ($div389_1 | 0);
    if ($cmp390_1) {
      var $x_4225_1 = $inc433_1;
      label = 82;
      break;
    } else {
      var $75 = $45;
      label = 86;
      break;
    }
   case 86:
    var $75;
    _memcpy($19, $20, $sub450);
    var $inc452 = $r_0228 + 1 | 0;
    var $cmp149 = ($inc452 | 0) > ($lnot_ext | 0);
    if ($cmp149) {
      label = 58;
      break;
    } else {
      var $r_0228 = $inc452;
      var $23 = $75;
      var $22 = $45;
      var $21 = $44;
      label = 27;
      break;
    }
  }
}
_kodak_radc_load_raw["X"] = 1;
function _kodak_dc120_load_raw() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 848 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $pixel = __stackBase__;
    var $0 = HEAP16[5398712 >> 1];
    var $cmp13 = $0 << 16 >> 16 == 0;
    if ($cmp13) {
      label = 10;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $arraydecay = $pixel | 0;
    var $row_014 = 0;
    label = 4;
    break;
   case 4:
    var $row_014;
    var $1 = HEAP32[5264116 >> 2];
    var $call = _fread($arraydecay, 1, 848, $1);
    var $cmp2 = $call >>> 0 < 848;
    if ($cmp2) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    _derror();
    label = 6;
    break;
   case 6:
    var $and = $row_014 & 3;
    var $arrayidx = 5264004 + ($and << 2) | 0;
    var $2 = HEAP32[$arrayidx >> 2];
    var $mul = $2 * $row_014 & -1;
    var $arrayidx5 = 5264020 + ($and << 2) | 0;
    var $3 = HEAP32[$arrayidx5 >> 2];
    var $add = $mul + $3 | 0;
    var $4 = HEAP16[5242964 >> 1];
    var $cmp810 = $4 << 16 >> 16 == 0;
    if ($cmp810) {
      label = 9;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $_pre = HEAP16[5245028 >> 1];
    var $_pre1 = HEAP32[5245032 >> 2];
    var $col_011 = 0;
    label = 8;
    break;
   case 8:
    var $col_011;
    var $add11 = $add + $col_011 | 0;
    var $rem = ($add11 | 0) % 848;
    var $arrayidx12 = $pixel + $rem | 0;
    var $5 = HEAP8[$arrayidx12];
    var $conv13 = $5 & 255;
    var $conv14 = $_pre & 65535;
    var $mul15 = $conv14 * $row_014 & -1;
    var $add16 = $mul15 + $col_011 | 0;
    var $arrayidx17 = $_pre1 + ($add16 << 1) | 0;
    HEAP16[$arrayidx17 >> 1] = $conv13;
    var $inc = $col_011 + 1 | 0;
    var $conv7 = $4 & 65535;
    var $cmp8 = ($inc | 0) < ($conv7 | 0);
    if ($cmp8) {
      var $col_011 = $inc;
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $inc19 = $row_014 + 1 | 0;
    var $6 = HEAP16[5398712 >> 1];
    var $conv = $6 & 65535;
    var $cmp = ($inc19 | 0) < ($conv | 0);
    if ($cmp) {
      var $row_014 = $inc19;
      label = 4;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    HEAP32[5263496 >> 2] = 255;
    STACKTOP = __stackBase__;
    return;
  }
}
function _eight_bit_load_raw() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP16[5245028 >> 1];
    var $conv = $0 & 65535;
    var $call = _calloc($conv, 1);
    _merror($call, 5586036);
    var $1 = HEAP16[5245036 >> 1];
    var $cmp13 = $1 << 16 >> 16 == 0;
    if ($cmp13) {
      label = 10;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $_pre = HEAP16[5245028 >> 1];
    var $row_014 = 0;
    var $2 = $_pre;
    label = 4;
    break;
   case 4:
    var $2;
    var $row_014;
    var $conv3 = $2 & 65535;
    var $3 = HEAP32[5264116 >> 2];
    var $call4 = _fread($call, 1, $conv3, $3);
    var $4 = HEAP16[5245028 >> 1];
    var $conv5 = $4 & 65535;
    var $cmp6 = $call4 >>> 0 < $conv5 >>> 0;
    if ($cmp6) {
      label = 5;
      break;
    } else {
      var $5 = $4;
      label = 6;
      break;
    }
   case 5:
    _derror();
    var $_pr = HEAP16[5245028 >> 1];
    var $5 = $_pr;
    label = 6;
    break;
   case 6:
    var $5;
    var $cmp109 = $5 << 16 >> 16 == 0;
    if ($cmp109) {
      var $8 = 0;
      label = 9;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $conv98 = $5 & 65535;
    var $_pre1 = HEAP32[5245032 >> 2];
    var $col_010 = 0;
    label = 8;
    break;
   case 8:
    var $col_010;
    var $arrayidx = $call + $col_010 | 0;
    var $6 = HEAP8[$arrayidx];
    var $idxprom = $6 & 255;
    var $arrayidx13 = 5428500 + ($idxprom << 1) | 0;
    var $7 = HEAP16[$arrayidx13 >> 1];
    var $mul = $conv98 * $row_014 & -1;
    var $add = $mul + $col_010 | 0;
    var $arrayidx15 = $_pre1 + ($add << 1) | 0;
    HEAP16[$arrayidx15 >> 1] = $7;
    var $inc = $col_010 + 1 | 0;
    var $cmp10 = $inc >>> 0 < $conv98 >>> 0;
    if ($cmp10) {
      var $col_010 = $inc;
      label = 8;
      break;
    } else {
      var $8 = $5;
      label = 9;
      break;
    }
   case 9:
    var $8;
    var $inc17 = $row_014 + 1 | 0;
    var $9 = HEAP16[5245036 >> 1];
    var $conv1 = $9 & 65535;
    var $cmp = $inc17 >>> 0 < $conv1 >>> 0;
    if ($cmp) {
      var $row_014 = $inc17;
      var $2 = $8;
      label = 4;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    _free($call);
    var $10 = HEAP16[5429010 >> 1];
    var $conv19 = $10 & 65535;
    HEAP32[5263496 >> 2] = $conv19;
    return;
  }
}
_eight_bit_load_raw["X"] = 1;
function _kodak_yrgb_load_raw() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP16[5245028 >> 1];
    var $conv = $0 & 65535;
    var $call = _calloc($conv, 3);
    _merror($call, 5585876);
    var $1 = HEAP16[5398712 >> 1];
    var $cmp28 = $1 << 16 >> 16 == 0;
    if ($cmp28) {
      label = 12;
      break;
    } else {
      var $row_029 = 0;
      label = 3;
      break;
    }
   case 3:
    var $row_029;
    var $neg = $row_029 & 1;
    var $tobool = ($neg | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 6;
      break;
    }
   case 4:
    var $2 = HEAP16[5245028 >> 1];
    var $conv3 = $2 & 65535;
    var $3 = HEAP32[5264116 >> 2];
    var $call4 = _fread($call, $conv3, 3, $3);
    var $cmp5 = $call4 >>> 0 < 3;
    if ($cmp5) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    _derror();
    label = 6;
    break;
   case 6:
    var $4 = HEAP16[5245028 >> 1];
    var $cmp1125 = $4 << 16 >> 16 == 0;
    if ($cmp1125) {
      label = 11;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $5 = -$neg | 0;
    var $_pre = HEAP16[5242964 >> 1];
    var $col_026 = 0;
    label = 8;
    break;
   case 8:
    var $col_026;
    var $conv14 = $_pre & 65535;
    var $mul = $conv14 << 1;
    var $mul16 = $mul & $5;
    var $add = $mul16 + $col_026 | 0;
    var $arrayidx = $call + $add | 0;
    var $6 = HEAP8[$arrayidx];
    var $conv17 = $6 & 255;
    var $and19 = $col_026 & -2;
    var $add20 = $conv14 + $and19 | 0;
    var $arrayidx21 = $call + $add20 | 0;
    var $7 = HEAP8[$arrayidx21];
    var $conv22 = $7 & 255;
    var $sub = $conv22 - 128 | 0;
    var $add26 = $add20 + 1 | 0;
    var $arrayidx27 = $call + $add26 | 0;
    var $8 = HEAP8[$arrayidx27];
    var $conv28 = $8 & 255;
    var $sub29 = $conv28 - 128 | 0;
    var $add30 = $conv22 - 126 | 0;
    var $add31 = $add30 + $sub29 | 0;
    var $shr = $add31 >> 2;
    var $sub32 = $conv17 - $shr | 0;
    var $add35 = $sub32 + $sub | 0;
    var $add38 = $sub29 + $sub32 | 0;
    var $phitmp = ($add38 | 0) < 0;
    if ($phitmp) {
      var $cond61 = 0;
      label = 10;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $cmp45 = ($add38 | 0) < 255;
    var $_ = $cmp45 ? $add38 : 255;
    var $cond61 = $_;
    label = 10;
    break;
   case 10:
    var $cond61;
    var $arrayidx62 = 5428500 + ($cond61 << 1) | 0;
    var $9 = HEAP16[$arrayidx62 >> 1];
    var $mul64 = $conv14 * $row_029 & -1;
    var $add65 = $mul64 + $col_026 | 0;
    var $10 = HEAP32[5264108 >> 2];
    var $arrayidx67 = $10 + ($add65 << 3) | 0;
    HEAP16[$arrayidx67 >> 1] = $9;
    var $phitmp_1 = ($sub32 | 0) < 0;
    if ($phitmp_1) {
      var $cond61_1 = 0;
      label = 14;
      break;
    } else {
      label = 13;
      break;
    }
   case 11:
    var $inc72 = $row_029 + 1 | 0;
    var $11 = HEAP16[5398712 >> 1];
    var $conv1 = $11 & 65535;
    var $cmp = ($inc72 | 0) < ($conv1 | 0);
    if ($cmp) {
      var $row_029 = $inc72;
      label = 3;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    _free($call);
    var $12 = HEAP16[5429010 >> 1];
    var $conv74 = $12 & 65535;
    HEAP32[5263496 >> 2] = $conv74;
    return;
   case 13:
    var $cmp45_1 = ($sub32 | 0) < 255;
    var $__1 = $cmp45_1 ? $sub32 : 255;
    var $cond61_1 = $__1;
    label = 14;
    break;
   case 14:
    var $cond61_1;
    var $arrayidx62_1 = 5428500 + ($cond61_1 << 1) | 0;
    var $13 = HEAP16[$arrayidx62_1 >> 1];
    var $arrayidx67_1 = $10 + ($add65 << 3) + 2 | 0;
    HEAP16[$arrayidx67_1 >> 1] = $13;
    var $phitmp_2 = ($add35 | 0) < 0;
    if ($phitmp_2) {
      var $cond61_2 = 0;
      label = 16;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $cmp45_2 = ($add35 | 0) < 255;
    var $__2 = $cmp45_2 ? $add35 : 255;
    var $cond61_2 = $__2;
    label = 16;
    break;
   case 16:
    var $cond61_2;
    var $arrayidx62_2 = 5428500 + ($cond61_2 << 1) | 0;
    var $14 = HEAP16[$arrayidx62_2 >> 1];
    var $arrayidx67_2 = $10 + ($add65 << 3) + 4 | 0;
    HEAP16[$arrayidx67_2 >> 1] = $14;
    var $inc69 = $col_026 + 1 | 0;
    var $conv10 = $4 & 65535;
    var $cmp11 = ($inc69 | 0) < ($conv10 | 0);
    if ($cmp11) {
      var $col_026 = $inc69;
      label = 8;
      break;
    } else {
      label = 11;
      break;
    }
  }
}
_kodak_yrgb_load_raw["X"] = 1;
function _kodak_262_load_raw() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $huff = __stackBase__;
    var $call = _make_decoder(5264040);
    var $arrayidx1 = $huff | 0;
    HEAP32[$arrayidx1 >> 2] = $call;
    var $call_1 = _make_decoder(5264066);
    var $arrayidx1_1 = $huff + 4 | 0;
    HEAP32[$arrayidx1_1 >> 2] = $call_1;
    var $0 = HEAP16[5245036 >> 1];
    var $conv = $0 & 65535;
    var $add = $conv + 63 | 0;
    var $shr41 = $add >>> 5;
    var $1 = HEAP16[5245028 >> 1];
    var $conv2 = $1 & 65535;
    var $mul = $conv2 << 5;
    var $mul3 = $shr41 << 2;
    var $add4 = $mul3 + $mul | 0;
    var $call5 = _malloc($add4);
    _merror($call5, 5585676);
    var $2 = HEAP16[5245028 >> 1];
    var $conv6 = $2 & 65535;
    var $mul7 = $conv6 << 5;
    var $add_ptr = $call5 + $mul7 | 0;
    var $3 = $add_ptr;
    HEAP16[5262944 >> 1] = 19789;
    var $cmp957 = ($shr41 | 0) == 0;
    if ($cmp957) {
      label = 3;
      break;
    } else {
      var $c_158 = 0;
      label = 4;
      break;
    }
   case 3:
    var $4 = HEAP16[5245036 >> 1];
    var $cmp1953 = $4 << 16 >> 16 == 0;
    if ($cmp1953) {
      label = 18;
      break;
    } else {
      var $row_054 = 0;
      var $pi_056 = 0;
      label = 5;
      break;
    }
   case 4:
    var $c_158;
    var $call12 = _get4();
    var $arrayidx13 = $3 + ($c_158 << 2) | 0;
    HEAP32[$arrayidx13 >> 2] = $call12;
    var $inc15 = $c_158 + 1 | 0;
    var $cmp9 = ($inc15 | 0) < ($shr41 | 0);
    if ($cmp9) {
      var $c_158 = $inc15;
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 5:
    var $pi_056;
    var $row_054;
    var $and = $row_054 & 31;
    var $cmp22 = ($and | 0) == 0;
    if ($cmp22) {
      label = 6;
      break;
    } else {
      var $pi_2_ph = $pi_056;
      label = 7;
      break;
    }
   case 6:
    var $5 = HEAP32[5264116 >> 2];
    var $shr24 = $row_054 >> 5;
    var $arrayidx25 = $3 + ($shr24 << 2) | 0;
    var $6 = HEAP32[$arrayidx25 >> 2];
    var $call26 = _fseek($5, $6, 0);
    var $call27 = _getbithuff(-1, 0);
    var $pi_2_ph = 0;
    label = 7;
    break;
   case 7:
    var $pi_2_ph;
    var $7 = HEAP16[5245028 >> 1];
    var $cmp3048 = $7 << 16 >> 16 == 0;
    if ($cmp3048) {
      var $pi_2_lcssa = $pi_2_ph;
      label = 17;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $conv2947 = $7 & 65535;
    var $col_049 = 0;
    var $pi_250 = $pi_2_ph;
    var $conv2951 = $conv2947;
    var $8 = $7;
    label = 9;
    break;
   case 9:
    var $8;
    var $conv2951;
    var $pi_250;
    var $col_049;
    var $add33 = $col_049 + $row_054 | 0;
    var $and34 = $add33 & 1;
    var $tobool = ($and34 | 0) == 0;
    if ($tobool) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $sub = $pi_250 - 2 | 0;
    var $conv4042 = $8 & 65535;
    var $mul41 = $conv4042 << 1;
    var $sub42 = $pi_250 - $mul41 | 0;
    var $cond48 = $sub42;
    var $cond43 = $sub;
    var $sub66_pre_phi = $sub;
    label = 12;
    break;
   case 11:
    var $sub36 = $pi_250 - 1 | 0;
    var $sub37 = $sub36 - $conv2951 | 0;
    var $conv40 = $8 & 65535;
    var $sub45 = $pi_250 + 1 | 0;
    var $add46 = $sub45 - $conv40 | 0;
    var $sub66_pre = $pi_250 - 2 | 0;
    var $cond48 = $add46;
    var $cond43 = $sub37;
    var $sub66_pre_phi = $sub66_pre;
    label = 12;
    break;
   case 12:
    var $sub66_pre_phi;
    var $cond43;
    var $cond48;
    var $cmp49 = ($col_049 | 0) > ($and34 | 0);
    var $cond_ = $cmp49 ? $cond43 : -1;
    var $cmp53 = ($cond_ | 0) < 0;
    var $pi1_1 = $cmp53 ? $cond48 : $cond_;
    var $cmp61 = ($pi1_1 | 0) < 0;
    var $cmp63 = ($col_049 | 0) > 1;
    var $or_cond = $cmp61 & $cmp63;
    var $pi1_2 = $or_cond ? $sub66_pre_phi : $pi1_1;
    var $cmp68 = ($pi1_2 | 0) < 0;
    if ($cmp68) {
      var $cond79 = 0;
      label = 14;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $cmp57 = ($cond48 | 0) < 0;
    var $pi1_1_cond48 = $cmp57 ? $pi1_1 : $cond48;
    var $pi2_1 = $or_cond ? $sub66_pre_phi : $pi1_1_cond48;
    var $arrayidx72 = $call5 + $pi1_2 | 0;
    var $9 = HEAP8[$arrayidx72];
    var $conv73 = $9 & 255;
    var $arrayidx74 = $call5 + $pi2_1 | 0;
    var $10 = HEAP8[$arrayidx74];
    var $conv75 = $10 & 255;
    var $add76 = $conv75 + $conv73 | 0;
    var $shr77 = $add76 >>> 1;
    var $cond79 = $shr77;
    label = 14;
    break;
   case 14:
    var $cond79;
    var $arrayidx80 = $huff + ($and34 << 2) | 0;
    var $11 = HEAP32[$arrayidx80 >> 2];
    var $call81 = _ljpeg_diff($11);
    var $add82 = $call81 + $cond79 | 0;
    var $conv83 = $add82 & 255;
    var $arrayidx84 = $call5 + $pi_250 | 0;
    HEAP8[$arrayidx84] = $conv83;
    var $tobool86 = $add82 >>> 0 > 255;
    if ($tobool86) {
      label = 15;
      break;
    } else {
      var $12 = $conv83;
      label = 16;
      break;
    }
   case 15:
    _derror();
    var $_pre = HEAP8[$arrayidx84];
    var $12 = $_pre;
    label = 16;
    break;
   case 16:
    var $12;
    var $inc89 = $pi_250 + 1 | 0;
    var $idxprom = $12 & 255;
    var $arrayidx91 = 5428500 + ($idxprom << 1) | 0;
    var $13 = HEAP16[$arrayidx91 >> 1];
    var $14 = HEAP16[5245028 >> 1];
    var $conv94 = $14 & 65535;
    var $mul95 = $conv94 * $row_054 & -1;
    var $add96 = $mul95 + $col_049 | 0;
    var $15 = HEAP32[5245032 >> 2];
    var $arrayidx97 = $15 + ($add96 << 1) | 0;
    HEAP16[$arrayidx97 >> 1] = $13;
    var $inc99 = $col_049 + 1 | 0;
    var $cmp30 = ($inc99 | 0) < ($conv94 | 0);
    if ($cmp30) {
      var $col_049 = $inc99;
      var $pi_250 = $inc89;
      var $conv2951 = $conv94;
      var $8 = $14;
      label = 9;
      break;
    } else {
      var $pi_2_lcssa = $inc89;
      label = 17;
      break;
    }
   case 17:
    var $pi_2_lcssa;
    var $inc102 = $row_054 + 1 | 0;
    var $16 = HEAP16[5245036 >> 1];
    var $conv18 = $16 & 65535;
    var $cmp19 = ($inc102 | 0) < ($conv18 | 0);
    if ($cmp19) {
      var $row_054 = $inc102;
      var $pi_056 = $pi_2_lcssa;
      label = 5;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    _free($call5);
    var $17 = $call;
    _free($17);
    var $18 = $call_1;
    _free($18);
    STACKTOP = __stackBase__;
    return;
  }
}
_kodak_262_load_raw["X"] = 1;
function _kodak_65000_decode($out, $bsize) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 780 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $blen = __stackBase__;
    var $raw = __stackBase__ + 768;
    var $0 = HEAP32[5264116 >> 2];
    var $call = _ftell($0);
    var $add = $bsize + 3 | 0;
    var $and = $add & -4;
    var $i_0 = 0;
    label = 3;
    break;
   case 3:
    var $i_0;
    var $cmp = ($i_0 | 0) < ($and | 0);
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 9;
      break;
    }
   case 4:
    var $1 = HEAP32[5264116 >> 2];
    var $call1 = _fgetc($1);
    var $call1_tr = $call1 & 255;
    var $conv4 = $call1_tr & 15;
    var $arrayidx = $blen + $i_0 | 0;
    HEAP8[$arrayidx] = $conv4;
    var $cmp6 = ($conv4 & 255) > 12;
    if ($cmp6) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $conv2 = $call1 >>> 4;
    var $conv2_tr = $conv2 & 255;
    var $conv9 = $conv2_tr & 15;
    var $add1042 = $i_0 | 1;
    var $arrayidx11 = $blen + $add1042 | 0;
    HEAP8[$arrayidx11] = $conv9;
    var $cmp13 = ($conv9 & 255) > 12;
    var $add64 = $i_0 + 2 | 0;
    if ($cmp13) {
      label = 6;
      break;
    } else {
      var $i_0 = $add64;
      label = 3;
      break;
    }
   case 6:
    var $2 = HEAP32[5264116 >> 2];
    var $call15 = _fseek($2, $call, 0);
    var $cmp1752 = ($and | 0) > 0;
    if ($cmp1752) {
      label = 7;
      break;
    } else {
      var $retval_0 = 1;
      label = 17;
      break;
    }
   case 7:
    var $arraydecay = $raw | 0;
    var $arrayidx23 = $raw + 4 | 0;
    var $arrayidx27 = $raw + 8 | 0;
    var $arrayidx33 = $raw + 2 | 0;
    var $arrayidx37 = $raw + 6 | 0;
    var $arrayidx42 = $raw + 10 | 0;
    var $i_153 = 0;
    label = 8;
    break;
   case 8:
    var $i_153;
    _read_shorts($arraydecay, 6);
    var $3 = HEAP16[$arraydecay >> 1];
    var $shr2243 = ($3 & 65535) >>> 12;
    var $shl = $shr2243 << 8;
    var $4 = HEAP16[$arrayidx23 >> 1];
    var $shr2544 = ($4 & 65535) >>> 12;
    var $shl26 = $shr2544 << 4;
    var $or = $shl26 | $shl;
    var $5 = HEAP16[$arrayidx27 >> 1];
    var $shr2945 = ($5 & 65535) >>> 12;
    var $or30 = $or | $shr2945;
    var $arrayidx32 = $out + ($i_153 << 1) | 0;
    HEAP16[$arrayidx32 >> 1] = $or30;
    var $6 = HEAP16[$arrayidx33 >> 1];
    var $shr3546 = ($6 & 65535) >>> 12;
    var $shl36 = $shr3546 << 8;
    var $7 = HEAP16[$arrayidx37 >> 1];
    var $shr3947 = ($7 & 65535) >>> 12;
    var $shl40 = $shr3947 << 4;
    var $or41 = $shl40 | $shl36;
    var $8 = HEAP16[$arrayidx42 >> 1];
    var $shr4448 = ($8 & 65535) >>> 12;
    var $or45 = $or41 | $shr4448;
    var $add4749 = $i_153 | 1;
    var $arrayidx48 = $out + ($add4749 << 1) | 0;
    HEAP16[$arrayidx48 >> 1] = $or45;
    var $add5750 = $i_153 | 2;
    var $and55 = $3 & 4095;
    var $arrayidx59 = $out + ($add5750 << 1) | 0;
    HEAP16[$arrayidx59 >> 1] = $and55;
    var $and55_1 = $6 & 4095;
    var $add58_161 = $i_153 | 3;
    var $arrayidx59_1 = $out + ($add58_161 << 1) | 0;
    HEAP16[$arrayidx59_1 >> 1] = $and55_1;
    var $and55_2 = $4 & 4095;
    var $add58_2 = $add5750 + 2 | 0;
    var $arrayidx59_2 = $out + ($add58_2 << 1) | 0;
    HEAP16[$arrayidx59_2 >> 1] = $and55_2;
    var $and55_3 = $7 & 4095;
    var $add58_3 = $add5750 + 3 | 0;
    var $arrayidx59_3 = $out + ($add58_3 << 1) | 0;
    HEAP16[$arrayidx59_3 >> 1] = $and55_3;
    var $and55_4 = $5 & 4095;
    var $add58_462 = $i_153 | 6;
    var $arrayidx59_4 = $out + ($add58_462 << 1) | 0;
    HEAP16[$arrayidx59_4 >> 1] = $and55_4;
    var $and55_5 = $8 & 4095;
    var $add58_563 = $i_153 | 7;
    var $arrayidx59_5 = $out + ($add58_563 << 1) | 0;
    HEAP16[$arrayidx59_5 >> 1] = $and55_5;
    var $add61 = $i_153 + 8 | 0;
    var $cmp17 = ($add61 | 0) < ($and | 0);
    if ($cmp17) {
      var $i_153 = $add61;
      label = 8;
      break;
    } else {
      var $retval_0 = 1;
      label = 17;
      break;
    }
   case 9:
    var $and66 = $add & 4;
    var $cmp67 = ($and66 | 0) == 0;
    if ($cmp67) {
      var $bits_1_ph = 0;
      var $bitbuf_1_ph$1 = 0;
      var $bitbuf_1_ph$0 = 0;
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $9 = HEAP32[5264116 >> 2];
    var $call70 = _fgetc($9);
    var $shl71 = $call70 << 8;
    var $conv72$0 = $shl71;
    var $conv72$1 = ($shl71 | 0) < 0 ? -1 : 0;
    var $10 = HEAP32[5264116 >> 2];
    var $call73 = _fgetc($10);
    var $conv74$0 = $call73;
    var $conv74$1 = ($call73 | 0) < 0 ? -1 : 0;
    var $add75$0 = (i64Math.add($conv74$0, $conv74$1, $conv72$0, $conv72$1), HEAP32[tempDoublePtr >> 2]);
    var $add75$1 = HEAP32[tempDoublePtr + 4 >> 2];
    var $bits_1_ph = 16;
    var $bitbuf_1_ph$1 = $add75$1;
    var $bitbuf_1_ph$0 = $add75$0;
    label = 11;
    break;
   case 11:
    var $bitbuf_1_ph$0;
    var $bitbuf_1_ph$1;
    var $bits_1_ph;
    var $cmp7857 = ($and | 0) > 0;
    if ($cmp7857) {
      var $bitbuf_158$1 = $bitbuf_1_ph$1;
      var $bitbuf_158$0 = $bitbuf_1_ph$0;
      var $bits_159 = $bits_1_ph;
      var $i_260 = 0;
      label = 12;
      break;
    } else {
      var $retval_0 = 0;
      label = 17;
      break;
    }
   case 12:
    var $i_260;
    var $bits_159;
    var $bitbuf_158$0;
    var $bitbuf_158$1;
    var $arrayidx81 = $blen + $i_260 | 0;
    var $11 = HEAP8[$arrayidx81];
    var $conv82 = $11 & 255;
    var $cmp83 = ($bits_159 | 0) < ($conv82 | 0);
    if ($cmp83) {
      label = 13;
      break;
    } else {
      var $bits_2 = $bits_159;
      var $bitbuf_3$1 = $bitbuf_158$1;
      var $bitbuf_3$0 = $bitbuf_158$0;
      label = 14;
      break;
    }
   case 13:
    var $12 = HEAP32[5264116 >> 2];
    var $call90 = _fgetc($12);
    var $conv91$0 = $call90;
    var $conv91$1 = ($call90 | 0) < 0 ? -1 : 0;
    var $add92 = $bits_159 + 8 | 0;
    var $sh_prom$0 = $add92;
    Runtime.bitshift64($conv91$0, $conv91$1, 0, $sh_prom$0);
    var $shl93$0 = HEAP32[tempDoublePtr >> 2], $shl93$1 = HEAP32[tempDoublePtr + 4 >> 2];
    var $add94$0 = (i64Math.add($shl93$0, $shl93$1, $bitbuf_158$0, $bitbuf_158$1), HEAP32[tempDoublePtr >> 2]);
    var $add94$1 = HEAP32[tempDoublePtr + 4 >> 2];
    var $13 = HEAP32[5264116 >> 2];
    var $call90_1 = _fgetc($13);
    var $conv91_1$0 = $call90_1;
    var $conv91_1$1 = ($call90_1 | 0) < 0 ? -1 : 0;
    var $sh_prom_1$0 = $bits_159;
    Runtime.bitshift64($conv91_1$0, $conv91_1$1, 0, $sh_prom_1$0);
    var $shl93_1$0 = HEAP32[tempDoublePtr >> 2], $shl93_1$1 = HEAP32[tempDoublePtr + 4 >> 2];
    var $add94_1$0 = (i64Math.add($shl93_1$0, $shl93_1$1, $add94$0, $add94$1), HEAP32[tempDoublePtr >> 2]);
    var $add94_1$1 = HEAP32[tempDoublePtr + 4 >> 2];
    var $14 = HEAP32[5264116 >> 2];
    var $call90_2 = _fgetc($14);
    var $conv91_2$0 = $call90_2;
    var $conv91_2$1 = ($call90_2 | 0) < 0 ? -1 : 0;
    var $add92_2 = $bits_159 + 24 | 0;
    var $sh_prom_2$0 = $add92_2;
    Runtime.bitshift64($conv91_2$0, $conv91_2$1, 0, $sh_prom_2$0);
    var $shl93_2$0 = HEAP32[tempDoublePtr >> 2], $shl93_2$1 = HEAP32[tempDoublePtr + 4 >> 2];
    var $add94_2$0 = (i64Math.add($shl93_2$0, $shl93_2$1, $add94_1$0, $add94_1$1), HEAP32[tempDoublePtr >> 2]);
    var $add94_2$1 = HEAP32[tempDoublePtr + 4 >> 2];
    var $15 = HEAP32[5264116 >> 2];
    var $call90_3 = _fgetc($15);
    var $conv91_3$0 = $call90_3;
    var $conv91_3$1 = ($call90_3 | 0) < 0 ? -1 : 0;
    var $add92_3 = $bits_159 + 16 | 0;
    var $sh_prom_3$0 = $add92_3;
    Runtime.bitshift64($conv91_3$0, $conv91_3$1, 0, $sh_prom_3$0);
    var $shl93_3$0 = HEAP32[tempDoublePtr >> 2], $shl93_3$1 = HEAP32[tempDoublePtr + 4 >> 2];
    var $add94_3$0 = (i64Math.add($shl93_3$0, $shl93_3$1, $add94_2$0, $add94_2$1), HEAP32[tempDoublePtr >> 2]);
    var $add94_3$1 = HEAP32[tempDoublePtr + 4 >> 2];
    var $add98 = $bits_159 + 32 | 0;
    var $bits_2 = $add98;
    var $bitbuf_3$1 = $add94_3$1;
    var $bitbuf_3$0 = $add94_3$0;
    label = 14;
    break;
   case 14:
    var $bitbuf_3$0;
    var $bitbuf_3$1;
    var $bits_2;
    var $sub = 16 - $conv82 | 0;
    var $shr100 = 65535 >>> ($sub >>> 0);
    var $conv10140$0 = $shr100;
    var $conv10140$1 = 0;
    var $and102$0 = $bitbuf_3$0 & $conv10140$0;
    var $conv103$0 = $and102$0;
    var $conv103 = $conv103$0;
    var $sh_prom104$0 = $11 & 255;
    Runtime.bitshift64($bitbuf_3$0, $bitbuf_3$1, 1, $sh_prom104$0);
    var $shr105$0 = HEAP32[tempDoublePtr >> 2], $shr105$1 = HEAP32[tempDoublePtr + 4 >> 2];
    var $sub106 = $bits_2 - $conv82 | 0;
    var $sub107 = $conv82 - 1 | 0;
    var $shl108 = 1 << $sub107;
    var $and109 = $conv103 & $shl108;
    var $cmp110 = ($and109 | 0) == 0;
    if ($cmp110) {
      label = 15;
      break;
    } else {
      var $diff_0 = $conv103;
      label = 16;
      break;
    }
   case 15:
    var $shl113_neg = -1 << $conv82;
    var $sub114_neg = $shl113_neg + 1 | 0;
    var $sub115 = $sub114_neg + $conv103 | 0;
    var $diff_0 = $sub115;
    label = 16;
    break;
   case 16:
    var $diff_0;
    var $conv117 = $diff_0 & 65535;
    var $arrayidx118 = $out + ($i_260 << 1) | 0;
    HEAP16[$arrayidx118 >> 1] = $conv117;
    var $inc120 = $i_260 + 1 | 0;
    var $exitcond = ($inc120 | 0) == ($and | 0);
    if ($exitcond) {
      var $retval_0 = 0;
      label = 17;
      break;
    } else {
      var $bitbuf_158$1 = $shr105$1;
      var $bitbuf_158$0 = $shr105$0;
      var $bits_159 = $sub106;
      var $i_260 = $inc120;
      label = 12;
      break;
    }
   case 17:
    var $retval_0;
    STACKTOP = __stackBase__;
    return $retval_0;
  }
}
_kodak_65000_decode["X"] = 1;
function _kodak_65000_load_raw() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 520 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $buf = __stackBase__;
    var $pred = __stackBase__ + 512;
    var $0 = HEAP16[5398712 >> 1];
    var $cmp21 = $0 << 16 >> 16 == 0;
    if ($cmp21) {
      label = 15;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $arrayidx = $pred + 4 | 0;
    var $arrayidx7 = $pred | 0;
    var $arraydecay = $buf | 0;
    var $_pre = HEAP16[5242964 >> 1];
    var $row_022 = 0;
    var $3 = $_pre;
    var $2 = $0;
    var $1 = $_pre;
    label = 4;
    break;
   case 4:
    var $1;
    var $2;
    var $3;
    var $row_022;
    var $cmp416 = $3 << 16 >> 16 == 0;
    if ($cmp416) {
      var $16 = 0;
      var $15 = $2;
      var $14 = $1;
      label = 14;
      break;
    } else {
      var $col_017 = 0;
      var $indvars_iv = -1;
      var $4 = $1;
      label = 5;
      break;
    }
   case 5:
    var $4;
    var $indvars_iv;
    var $col_017;
    HEAP32[$arrayidx >> 2] = 0;
    HEAP32[$arrayidx7 >> 2] = 0;
    var $conv8 = $4 & 65535;
    var $sub = $conv8 - $col_017 | 0;
    var $cmp9 = ($sub | 0) > 256;
    var $_sub = $cmp9 ? 256 : $sub;
    var $call = _kodak_65000_decode($arraydecay, $_sub);
    var $cmp1413 = ($_sub | 0) > 0;
    if ($cmp1413) {
      label = 6;
      break;
    } else {
      label = 12;
      break;
    }
   case 6:
    var $tobool = ($call | 0) == 0;
    var $5 = $indvars_iv - $conv8 | 0;
    var $6 = ($5 | 0) > -257;
    var $_op = $5 ^ -1;
    var $7 = $6 ? $_op : 256;
    var $i_014 = 0;
    label = 7;
    break;
   case 7:
    var $i_014;
    var $arrayidx18 = $buf + ($i_014 << 1) | 0;
    var $8 = HEAP16[$arrayidx18 >> 1];
    var $conv19 = $8 << 16 >> 16;
    if ($tobool) {
      label = 8;
      break;
    } else {
      var $cond25 = $conv19;
      label = 9;
      break;
    }
   case 8:
    var $and = $i_014 & 1;
    var $arrayidx23 = $pred + ($and << 2) | 0;
    var $9 = HEAP32[$arrayidx23 >> 2];
    var $add = $9 + $conv19 | 0;
    HEAP32[$arrayidx23 >> 2] = $add;
    var $cond25 = $add;
    label = 9;
    break;
   case 9:
    var $cond25;
    var $arrayidx26 = 5428500 + ($cond25 << 1) | 0;
    var $10 = HEAP16[$arrayidx26 >> 1];
    var $11 = HEAP16[5245028 >> 1];
    var $conv27 = $11 & 65535;
    var $mul = $conv27 * $row_022 & -1;
    var $add28 = $i_014 + $col_017 | 0;
    var $add29 = $add28 + $mul | 0;
    var $12 = HEAP32[5245032 >> 2];
    var $arrayidx30 = $12 + ($add29 << 1) | 0;
    HEAP16[$arrayidx30 >> 1] = $10;
    var $tobool32 = ($10 & 65535) > 4095;
    if ($tobool32) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    _derror();
    label = 11;
    break;
   case 11:
    var $inc = $i_014 + 1 | 0;
    var $exitcond = ($inc | 0) == ($7 | 0);
    if ($exitcond) {
      label = 12;
      break;
    } else {
      var $i_014 = $inc;
      label = 7;
      break;
    }
   case 12:
    var $add34 = $col_017 + 256 | 0;
    var $13 = HEAP16[5242964 >> 1];
    var $conv3 = $13 & 65535;
    var $cmp4 = ($add34 | 0) < ($conv3 | 0);
    var $indvars_iv_next = $indvars_iv + 256 | 0;
    if ($cmp4) {
      var $col_017 = $add34;
      var $indvars_iv = $indvars_iv_next;
      var $4 = $13;
      label = 5;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $_pre1 = HEAP16[5398712 >> 1];
    var $16 = $13;
    var $15 = $_pre1;
    var $14 = $13;
    label = 14;
    break;
   case 14:
    var $14;
    var $15;
    var $16;
    var $inc37 = $row_022 + 1 | 0;
    var $conv = $15 & 65535;
    var $cmp = ($inc37 | 0) < ($conv | 0);
    if ($cmp) {
      var $row_022 = $inc37;
      var $3 = $16;
      var $2 = $15;
      var $1 = $14;
      label = 4;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    STACKTOP = __stackBase__;
    return;
  }
}
_kodak_65000_load_raw["X"] = 1;
function _kodak_ycbcr_load_raw() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 784 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $buf = __stackBase__;
    var $y = __stackBase__ + 768;
    var $0 = HEAP16[5398712 >> 1];
    var $cmp53 = $0 << 16 >> 16 == 0;
    if ($cmp53) {
      label = 18;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $arraydecay = $buf | 0;
    var $arrayidx12 = $y + 12 | 0;
    var $arrayidx14 = $y + 4 | 0;
    var $_pre = HEAP16[5242964 >> 1];
    var $row_054 = 0;
    var $2 = $_pre;
    var $1 = $0;
    label = 4;
    break;
   case 4:
    var $1;
    var $2;
    var $row_054;
    var $cmp449 = $2 << 16 >> 16 == 0;
    if ($cmp449) {
      var $12 = 0;
      var $11 = $1;
      label = 17;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $conv348 = $2 & 65535;
    var $col_050 = 0;
    var $conv351 = $conv348;
    label = 6;
    break;
   case 6:
    var $conv351;
    var $col_050;
    var $sub = $conv351 - $col_050 | 0;
    var $cmp8 = ($sub | 0) > 128;
    var $_sub = $cmp8 ? 128 : $sub;
    var $mul = $_sub * 3 & -1;
    var $call = _kodak_65000_decode($arraydecay, $mul);
    HEAP32[$arrayidx12 >> 2] = 0;
    HEAP32[$arrayidx14 >> 2] = 0;
    var $cmp1743 = ($_sub | 0) > 0;
    if ($cmp1743) {
      var $i_044 = 0;
      var $cb_045 = 0;
      var $cr_046 = 0;
      var $bp_047 = $arraydecay;
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $_pre8 = HEAP16[5242964 >> 1];
    var $10 = $_pre8;
    label = 15;
    break;
   case 8:
    var $bp_047;
    var $cr_046;
    var $cb_045;
    var $i_044;
    var $arrayidx20 = $bp_047 + 8 | 0;
    var $3 = HEAP16[$arrayidx20 >> 1];
    var $conv21 = $3 << 16 >> 16;
    var $add = $conv21 + $cb_045 | 0;
    var $arrayidx22 = $bp_047 + 10 | 0;
    var $4 = HEAP16[$arrayidx22 >> 1];
    var $conv23 = $4 << 16 >> 16;
    var $add24 = $conv23 + $cr_046 | 0;
    var $add25 = $add + 2 | 0;
    var $add26 = $add25 + $add24 | 0;
    var $shr = $add26 >> 2;
    var $add30 = $add - $shr | 0;
    var $add33 = $add24 - $shr | 0;
    var $add53 = $i_044 + $col_050 | 0;
    var $add54_169 = $add53 | 1;
    var $j_041 = 0;
    var $bp_142 = $bp_047;
    label = 9;
    break;
   case 9:
    var $bp_142;
    var $j_041;
    var $add50 = $j_041 + $row_054 | 0;
    var $arrayidx44 = $y + ($j_041 << 3) + 4 | 0;
    var $5 = HEAP32[$arrayidx44 >> 2];
    var $incdec_ptr = $bp_142 + 2 | 0;
    var $6 = HEAP16[$bp_142 >> 1];
    var $conv45 = $6 << 16 >> 16;
    var $add46 = $conv45 + $5 | 0;
    var $arrayidx48 = $y + ($j_041 << 3) | 0;
    HEAP32[$arrayidx48 >> 2] = $add46;
    var $tobool = $add46 >>> 0 > 1023;
    if ($tobool) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    _derror();
    label = 11;
    break;
   case 11:
    var $7 = HEAP16[5242964 >> 1];
    var $conv51 = $7 & 65535;
    var $mul52 = $conv51 * $add50 & -1;
    var $add55 = $add53 + $mul52 | 0;
    var $8 = HEAP32[5264108 >> 2];
    var $add65 = $add33 + $add46 | 0;
    var $phitmp = ($add65 | 0) < 0;
    if ($phitmp) {
      var $cond95 = 0;
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $cmp66 = ($add65 | 0) < 4095;
    var $add83_ = $cmp66 ? $add65 : 4095;
    var $cond95 = $add83_;
    label = 13;
    break;
   case 13:
    var $cond95;
    var $arrayidx96 = 5428500 + ($cond95 << 1) | 0;
    var $9 = HEAP16[$arrayidx96 >> 1];
    var $arrayidx97 = $8 + ($add55 << 3) | 0;
    HEAP16[$arrayidx97 >> 1] = $9;
    var $add65_1 = $add46 - $shr | 0;
    var $phitmp_1 = ($add65_1 | 0) < 0;
    if ($phitmp_1) {
      var $cond95_1 = 0;
      label = 20;
      break;
    } else {
      label = 19;
      break;
    }
   case 14:
    var $add105 = $i_044 + 2 | 0;
    var $add_ptr = $bp_047 + 12 | 0;
    var $cmp17 = ($add105 | 0) < ($_sub | 0);
    if ($cmp17) {
      var $i_044 = $add105;
      var $cb_045 = $add;
      var $cr_046 = $add24;
      var $bp_047 = $add_ptr;
      label = 8;
      break;
    } else {
      var $10 = $17;
      label = 15;
      break;
    }
   case 15:
    var $10;
    var $add108 = $col_050 + 128 | 0;
    var $conv3 = $10 & 65535;
    var $cmp4 = ($add108 | 0) < ($conv3 | 0);
    if ($cmp4) {
      var $col_050 = $add108;
      var $conv351 = $conv3;
      label = 6;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $_pre5 = HEAP16[5398712 >> 1];
    var $12 = $10;
    var $11 = $_pre5;
    label = 17;
    break;
   case 17:
    var $11;
    var $12;
    var $add111 = $row_054 + 2 | 0;
    var $conv = $11 & 65535;
    var $cmp = ($add111 | 0) < ($conv | 0);
    if ($cmp) {
      var $row_054 = $add111;
      var $2 = $12;
      var $1 = $11;
      label = 4;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    STACKTOP = __stackBase__;
    return;
   case 19:
    var $cmp66_1 = ($add65_1 | 0) < 4095;
    var $add83__1 = $cmp66_1 ? $add65_1 : 4095;
    var $cond95_1 = $add83__1;
    label = 20;
    break;
   case 20:
    var $cond95_1;
    var $arrayidx96_1 = 5428500 + ($cond95_1 << 1) | 0;
    var $13 = HEAP16[$arrayidx96_1 >> 1];
    var $arrayidx97_1 = $8 + ($add55 << 3) + 2 | 0;
    HEAP16[$arrayidx97_1 >> 1] = $13;
    var $add65_2 = $add30 + $add46 | 0;
    var $phitmp_2 = ($add65_2 | 0) < 0;
    if ($phitmp_2) {
      var $cond95_2 = 0;
      label = 22;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    var $cmp66_2 = ($add65_2 | 0) < 4095;
    var $add83__2 = $cmp66_2 ? $add65_2 : 4095;
    var $cond95_2 = $add83__2;
    label = 22;
    break;
   case 22:
    var $cond95_2;
    var $arrayidx96_2 = 5428500 + ($cond95_2 << 1) | 0;
    var $14 = HEAP16[$arrayidx96_2 >> 1];
    var $arrayidx97_2 = $8 + ($add55 << 3) + 4 | 0;
    HEAP16[$arrayidx97_2 >> 1] = $14;
    var $15 = HEAP16[$incdec_ptr >> 1];
    var $conv45_1 = $15 << 16 >> 16;
    var $add46_1 = $conv45_1 + $add46 | 0;
    HEAP32[$arrayidx44 >> 2] = $add46_1;
    var $tobool_1 = $add46_1 >>> 0 > 1023;
    if ($tobool_1) {
      label = 23;
      break;
    } else {
      var $17 = $7;
      var $16 = $8;
      label = 24;
      break;
    }
   case 23:
    _derror();
    var $_pre6 = HEAP16[5242964 >> 1];
    var $_pre7 = HEAP32[5264108 >> 2];
    var $17 = $_pre6;
    var $16 = $_pre7;
    label = 24;
    break;
   case 24:
    var $16;
    var $17;
    var $conv51_1 = $17 & 65535;
    var $mul52_1 = $conv51_1 * $add50 & -1;
    var $add55_1 = $add54_169 + $mul52_1 | 0;
    var $add65_159 = $add33 + $add46_1 | 0;
    var $phitmp_160 = ($add65_159 | 0) < 0;
    if ($phitmp_160) {
      var $cond95_164 = 0;
      label = 26;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    var $cmp66_161 = ($add65_159 | 0) < 4095;
    var $add83__162 = $cmp66_161 ? $add65_159 : 4095;
    var $cond95_164 = $add83__162;
    label = 26;
    break;
   case 26:
    var $cond95_164;
    var $arrayidx96_165 = 5428500 + ($cond95_164 << 1) | 0;
    var $18 = HEAP16[$arrayidx96_165 >> 1];
    var $arrayidx97_166 = $16 + ($add55_1 << 3) | 0;
    HEAP16[$arrayidx97_166 >> 1] = $18;
    var $add65_1_1 = $add46_1 - $shr | 0;
    var $phitmp_1_1 = ($add65_1_1 | 0) < 0;
    if ($phitmp_1_1) {
      var $cond95_1_1 = 0;
      label = 28;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    var $cmp66_1_1 = ($add65_1_1 | 0) < 4095;
    var $add83__1_1 = $cmp66_1_1 ? $add65_1_1 : 4095;
    var $cond95_1_1 = $add83__1_1;
    label = 28;
    break;
   case 28:
    var $cond95_1_1;
    var $arrayidx96_1_1 = 5428500 + ($cond95_1_1 << 1) | 0;
    var $19 = HEAP16[$arrayidx96_1_1 >> 1];
    var $arrayidx97_1_1 = $16 + ($add55_1 << 3) + 2 | 0;
    HEAP16[$arrayidx97_1_1 >> 1] = $19;
    var $add65_2_1 = $add30 + $add46_1 | 0;
    var $phitmp_2_1 = ($add65_2_1 | 0) < 0;
    if ($phitmp_2_1) {
      var $cond95_2_1 = 0;
      label = 30;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    var $cmp66_2_1 = ($add65_2_1 | 0) < 4095;
    var $add83__2_1 = $cmp66_2_1 ? $add65_2_1 : 4095;
    var $cond95_2_1 = $add83__2_1;
    label = 30;
    break;
   case 30:
    var $cond95_2_1;
    var $arrayidx96_2_1 = 5428500 + ($cond95_2_1 << 1) | 0;
    var $20 = HEAP16[$arrayidx96_2_1 >> 1];
    var $arrayidx97_2_1 = $16 + ($add55_1 << 3) + 4 | 0;
    HEAP16[$arrayidx97_2_1 >> 1] = $20;
    var $inc102 = $j_041 + 1 | 0;
    var $exitcond = ($inc102 | 0) == 2;
    if ($exitcond) {
      label = 14;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    var $scevgep = $bp_142 + 4 | 0;
    var $j_041 = $inc102;
    var $bp_142 = $scevgep;
    label = 9;
    break;
  }
}
_kodak_ycbcr_load_raw["X"] = 1;
function _kodak_rgb_load_raw() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 1536 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $buf = __stackBase__;
    var $0 = HEAP32[5264108 >> 2];
    var $arraydecay = $0 | 0;
    var $1 = HEAP32[5245032 >> 2];
    var $tobool = ($1 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $2 = $1;
    _free($2);
    label = 4;
    break;
   case 4:
    HEAP32[5245032 >> 2] = 0;
    var $3 = HEAP16[5398712 >> 1];
    var $cmp26 = $3 << 16 >> 16 == 0;
    if ($cmp26) {
      label = 17;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $arraydecay12 = $buf | 0;
    var $_pre = HEAP16[5242964 >> 1];
    var $row_027 = 0;
    var $ip_028 = $arraydecay;
    var $5 = $_pre;
    var $4 = $3;
    label = 6;
    break;
   case 6:
    var $4;
    var $5;
    var $ip_028;
    var $row_027;
    var $cmp419 = $5 << 16 >> 16 == 0;
    if ($cmp419) {
      var $ip_1_lcssa = $ip_028;
      var $14 = 0;
      var $13 = $4;
      label = 16;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $conv318 = $5 & 65535;
    var $col_020 = 0;
    var $ip_121 = $ip_028;
    var $conv322 = $conv318;
    var $indvars_iv = -1;
    label = 8;
    break;
   case 8:
    var $indvars_iv;
    var $conv322;
    var $ip_121;
    var $col_020;
    var $sub = $conv322 - $col_020 | 0;
    var $cmp8 = ($sub | 0) > 256;
    var $_sub = $cmp8 ? 256 : $sub;
    var $mul = $_sub * 3 & -1;
    var $call = _kodak_65000_decode($arraydecay12, $mul);
    var $cmp1514 = ($_sub | 0) > 0;
    if ($cmp1514) {
      label = 9;
      break;
    } else {
      var $ip_2_lcssa = $ip_121;
      label = 14;
      break;
    }
   case 9:
    var $6 = $indvars_iv - $conv322 | 0;
    var $7 = ($6 | 0) > -257;
    var $smax = $7 ? $6 : -257;
    var $8 = $smax * -4 & -1;
    var $9 = $smax ^ -1;
    var $bp_015 = $arraydecay12;
    var $i_016 = 0;
    var $ip_217 = $ip_121;
    var $rgb_sroa_0_0 = 0;
    var $rgb_sroa_1_0 = 0;
    var $rgb_sroa_2_0 = 0;
    label = 10;
    break;
   case 10:
    var $rgb_sroa_2_0;
    var $rgb_sroa_1_0;
    var $rgb_sroa_0_0;
    var $ip_217;
    var $i_016;
    var $bp_015;
    var $incdec_ptr = $bp_015 + 2 | 0;
    var $10 = HEAP16[$bp_015 >> 1];
    var $conv22 = $10 << 16 >> 16;
    var $add = $rgb_sroa_0_0 + $conv22 | 0;
    var $conv24 = $add & 65535;
    HEAP16[$ip_217 >> 1] = $conv24;
    var $shr11 = $add & 61440;
    var $tobool27 = ($shr11 | 0) == 0;
    if ($tobool27) {
      label = 12;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    _derror();
    label = 12;
    break;
   case 12:
    var $incdec_ptr_1 = $bp_015 + 4 | 0;
    var $11 = HEAP16[$incdec_ptr >> 1];
    var $conv22_1 = $11 << 16 >> 16;
    var $add_1 = $rgb_sroa_1_0 + $conv22_1 | 0;
    var $conv24_1 = $add_1 & 65535;
    var $arrayidx25_1 = $ip_217 + 2 | 0;
    HEAP16[$arrayidx25_1 >> 1] = $conv24_1;
    var $shr11_1 = $add_1 & 61440;
    var $tobool27_1 = ($shr11_1 | 0) == 0;
    if ($tobool27_1) {
      label = 19;
      break;
    } else {
      label = 18;
      break;
    }
   case 13:
    var $scevgep29_sum = $8 - 4 | 0;
    var $scevgep30 = $ip_121 + ($scevgep29_sum << 1) | 0;
    var $ip_2_lcssa = $scevgep30;
    label = 14;
    break;
   case 14:
    var $ip_2_lcssa;
    var $add34 = $col_020 + 256 | 0;
    var $12 = HEAP16[5242964 >> 1];
    var $conv3 = $12 & 65535;
    var $cmp4 = ($add34 | 0) < ($conv3 | 0);
    var $indvars_iv_next = $indvars_iv + 256 | 0;
    if ($cmp4) {
      var $col_020 = $add34;
      var $ip_121 = $ip_2_lcssa;
      var $conv322 = $conv3;
      var $indvars_iv = $indvars_iv_next;
      label = 8;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $_pre1 = HEAP16[5398712 >> 1];
    var $ip_1_lcssa = $ip_2_lcssa;
    var $14 = $12;
    var $13 = $_pre1;
    label = 16;
    break;
   case 16:
    var $13;
    var $14;
    var $ip_1_lcssa;
    var $inc37 = $row_027 + 1 | 0;
    var $conv = $13 & 65535;
    var $cmp = ($inc37 | 0) < ($conv | 0);
    if ($cmp) {
      var $row_027 = $inc37;
      var $ip_028 = $ip_1_lcssa;
      var $5 = $14;
      var $4 = $13;
      label = 6;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    STACKTOP = __stackBase__;
    return;
   case 18:
    _derror();
    label = 19;
    break;
   case 19:
    var $15 = HEAP16[$incdec_ptr_1 >> 1];
    var $conv22_2 = $15 << 16 >> 16;
    var $add_2 = $rgb_sroa_2_0 + $conv22_2 | 0;
    var $conv24_2 = $add_2 & 65535;
    var $arrayidx25_2 = $ip_217 + 4 | 0;
    HEAP16[$arrayidx25_2 >> 1] = $conv24_2;
    var $shr11_2 = $add_2 & 61440;
    var $tobool27_2 = ($shr11_2 | 0) == 0;
    if ($tobool27_2) {
      label = 21;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    _derror();
    label = 21;
    break;
   case 21:
    var $scevgep = $bp_015 + 6 | 0;
    var $inc31 = $i_016 + 1 | 0;
    var $add_ptr = $ip_217 + 8 | 0;
    var $exitcond = ($inc31 | 0) == ($9 | 0);
    if ($exitcond) {
      label = 13;
      break;
    } else {
      var $bp_015 = $scevgep;
      var $i_016 = $inc31;
      var $ip_217 = $add_ptr;
      var $rgb_sroa_0_0 = $add;
      var $rgb_sroa_1_0 = $add_1;
      var $rgb_sroa_2_0 = $add_2;
      label = 10;
      break;
    }
  }
}
_kodak_rgb_load_raw["X"] = 1;
function _kodak_thumb_load_raw() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5244048 >> 2];
    var $shr = $0 >>> 5;
    HEAP32[5560840 >> 2] = $shr;
    var $1 = HEAP16[5398712 >> 1];
    var $cmp9 = $1 << 16 >> 16 == 0;
    if ($cmp9) {
      var $9 = $0;
      label = 10;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $_pre1 = HEAP16[5242964 >> 1];
    var $row_010 = 0;
    var $3 = $_pre1;
    var $2 = $1;
    label = 4;
    break;
   case 4:
    var $2;
    var $3;
    var $row_010;
    var $cmp45 = $3 << 16 >> 16 == 0;
    if ($cmp45) {
      var $8 = 0;
      var $7 = $2;
      label = 8;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $conv34 = $3 & 65535;
    var $col_06 = 0;
    var $conv37 = $conv34;
    label = 6;
    break;
   case 6:
    var $conv37;
    var $col_06;
    var $mul = $conv37 * $row_010 & -1;
    var $add = $mul + $col_06 | 0;
    var $4 = HEAP32[5264108 >> 2];
    var $arraydecay = $4 + ($add << 3) | 0;
    var $5 = HEAP32[5560840 >> 2];
    _read_shorts($arraydecay, $5);
    var $inc = $col_06 + 1 | 0;
    var $6 = HEAP16[5242964 >> 1];
    var $conv3 = $6 & 65535;
    var $cmp4 = ($inc | 0) < ($conv3 | 0);
    if ($cmp4) {
      var $col_06 = $inc;
      var $conv37 = $conv3;
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $_pre2 = HEAP16[5398712 >> 1];
    var $8 = $6;
    var $7 = $_pre2;
    label = 8;
    break;
   case 8:
    var $7;
    var $8;
    var $inc9 = $row_010 + 1 | 0;
    var $conv = $7 & 65535;
    var $cmp = ($inc9 | 0) < ($conv | 0);
    if ($cmp) {
      var $row_010 = $inc9;
      var $3 = $8;
      var $2 = $7;
      label = 4;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $_pre = HEAP32[5244048 >> 2];
    var $9 = $_pre;
    label = 10;
    break;
   case 10:
    var $9;
    var $and = $9 & 31;
    var $shl = 1 << $and;
    var $sub = $shl - 1 | 0;
    HEAP32[5263496 >> 2] = $sub;
    return;
  }
}
function _sony_decrypt($data, $len, $start, $key) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $tobool = ($start | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 5;
      break;
    }
   case 3:
    var $tobool283 = ($len | 0) == 0;
    if ($tobool283) {
      label = 11;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $_pre = HEAP32[5244640 >> 2];
    var $len_addr_04 = $len;
    var $data_addr_05 = $data;
    var $6 = $_pre;
    label = 10;
    break;
   case 5:
    var $mul = $key * 48828125 & -1;
    var $add = $mul + 1 | 0;
    HEAP32[5244128 >> 2] = $add;
    var $mul_1 = $add * 48828125 & -1;
    var $add_1 = $mul_1 + 1 | 0;
    HEAP32[5244132 >> 2] = $add_1;
    var $mul_2 = $add_1 * 48828125 & -1;
    var $add_2 = $mul_2 + 1 | 0;
    HEAP32[5244136 >> 2] = $add_2;
    var $add_3 = $add_2 * 97656250 & -1;
    var $shl = $add_3 + 2 | 0;
    var $xor = $add_2 ^ $add;
    var $shr = $xor >>> 31;
    var $or = $shr | $shl;
    HEAP32[5244140 >> 2] = $or;
    HEAP32[5244640 >> 2] = 4;
    var $inc188 = 4;
    var $3 = $add;
    var $2 = $add_2;
    var $1 = $or;
    var $0 = $add_1;
    label = 7;
    break;
   case 6:
    HEAP32[5244640 >> 2] = 0;
    var $storemerge26 = 0;
    label = 9;
    break;
   case 7:
    var $0;
    var $1;
    var $2;
    var $3;
    var $inc188;
    var $xor7 = $2 ^ $3;
    var $shl8 = $xor7 << 1;
    var $xor13 = $1 ^ $0;
    var $shr14 = $xor13 >>> 31;
    var $or15 = $shr14 | $shl8;
    var $arrayidx16 = 5244128 + ($inc188 << 2) | 0;
    HEAP32[$arrayidx16 >> 2] = $or15;
    var $inc18 = $inc188 + 1 | 0;
    var $exitcond = ($inc18 | 0) == 127;
    if ($exitcond) {
      label = 6;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $sub5 = $inc188 - 2 | 0;
    var $arrayidx6 = 5244128 + ($sub5 << 2) | 0;
    var $_pre1 = HEAP32[$arrayidx6 >> 2];
    var $inc188 = $inc18;
    var $3 = $0;
    var $2 = $1;
    var $1 = $or15;
    var $0 = $_pre1;
    label = 7;
    break;
   case 9:
    var $storemerge26;
    var $arrayidx23 = 5244128 + ($storemerge26 << 2) | 0;
    var $4 = HEAP32[$arrayidx23 >> 2];
    var $call = _htonl($4);
    var $5 = HEAP32[5244640 >> 2];
    var $arrayidx24 = 5244128 + ($5 << 2) | 0;
    HEAP32[$arrayidx24 >> 2] = $call;
    var $inc26 = $5 + 1 | 0;
    HEAP32[5244640 >> 2] = $inc26;
    var $cmp21 = $inc26 >>> 0 < 127;
    if ($cmp21) {
      var $storemerge26 = $inc26;
      label = 9;
      break;
    } else {
      label = 3;
      break;
    }
   case 10:
    var $6;
    var $data_addr_05;
    var $len_addr_04;
    var $dec = $len_addr_04 - 1 | 0;
    var $add29 = $6 + 1 | 0;
    var $and = $add29 & 127;
    var $arrayidx30 = 5244128 + ($and << 2) | 0;
    var $7 = HEAP32[$arrayidx30 >> 2];
    var $add31 = $6 + 65 | 0;
    var $and32 = $add31 & 127;
    var $arrayidx33 = 5244128 + ($and32 << 2) | 0;
    var $8 = HEAP32[$arrayidx33 >> 2];
    var $xor34 = $8 ^ $7;
    HEAP32[5244640 >> 2] = $add29;
    var $and36 = $6 & 127;
    var $arrayidx37 = 5244128 + ($and36 << 2) | 0;
    HEAP32[$arrayidx37 >> 2] = $xor34;
    var $incdec_ptr = $data_addr_05 + 4 | 0;
    var $9 = HEAP32[$data_addr_05 >> 2];
    var $xor38 = $9 ^ $xor34;
    HEAP32[$data_addr_05 >> 2] = $xor38;
    var $tobool28 = ($dec | 0) == 0;
    if ($tobool28) {
      label = 11;
      break;
    } else {
      var $len_addr_04 = $dec;
      var $data_addr_05 = $incdec_ptr;
      var $6 = $add29;
      label = 10;
      break;
    }
   case 11:
    return;
  }
}
_sony_decrypt["X"] = 1;
function _sony_load_raw() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 40 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $head13 = __stackBase__;
    var $head13_sub = $head13 | 0;
    var $tmpcast = $head13;
    var $0 = HEAP32[5264116 >> 2];
    var $call = _fseek($0, 200896, 0);
    var $1 = HEAP32[5264116 >> 2];
    var $call1 = _fgetc($1);
    var $mul = $call1 << 2;
    var $sub = $mul - 1 | 0;
    var $call2 = _fseek($1, $sub, 1);
    HEAP16[5262944 >> 1] = 19789;
    var $call3 = _get4();
    var $2 = HEAP32[5264116 >> 2];
    var $call4 = _fseek($2, 164600, 0);
    var $arraydecay = $head13;
    var $3 = HEAP32[5264116 >> 2];
    var $call5 = _fread($arraydecay, 1, 40, $3);
    _sony_decrypt($head13_sub, 10, 1, $call3);
    var $shl = $call3 << 8;
    var $arrayidx = $tmpcast + 25 | 0;
    var $4 = HEAP8[$arrayidx];
    var $conv = $4 & 255;
    var $or = $conv | $shl;
    var $shl_1 = $or << 8;
    var $arrayidx_1 = $head13 + 24 | 0;
    var $5 = $arrayidx_1;
    var $6 = HEAP8[$5];
    var $conv_1 = $6 & 255;
    var $or_1 = $conv_1 | $shl_1;
    var $shl_2 = $or_1 << 8;
    var $arrayidx_2 = $tmpcast + 23 | 0;
    var $7 = HEAP8[$arrayidx_2];
    var $conv_2 = $7 & 255;
    var $or_2 = $conv_2 | $shl_2;
    var $shl_3 = $or_2 << 8;
    var $arrayidx_3 = $tmpcast + 22 | 0;
    var $8 = HEAP8[$arrayidx_3];
    var $conv_3 = $8 & 255;
    var $or_3 = $conv_3 | $shl_3;
    var $9 = HEAP32[5264116 >> 2];
    var $10 = HEAP32[5428492 >> 2];
    var $call7 = _fseek($9, $10, 0);
    var $11 = HEAP16[5245036 >> 1];
    var $cmp1019 = $11 << 16 >> 16 == 0;
    if ($cmp1019) {
      label = 11;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $_pre = HEAP16[5245028 >> 1];
    var $row_020 = 0;
    var $12 = $_pre;
    label = 4;
    break;
   case 4:
    var $12;
    var $row_020;
    var $13 = HEAP32[5245032 >> 2];
    var $conv13 = $12 & 65535;
    var $mul14 = $conv13 * $row_020 & -1;
    var $add_ptr = $13 + ($mul14 << 1) | 0;
    var $14 = $add_ptr;
    var $15 = HEAP32[5264116 >> 2];
    var $call16 = _fread($14, 2, $conv13, $15);
    var $16 = HEAP16[5245028 >> 1];
    var $conv17 = $16 & 65535;
    var $cmp18 = $call16 >>> 0 < $conv17 >>> 0;
    if ($cmp18) {
      label = 5;
      break;
    } else {
      var $17 = $16;
      label = 6;
      break;
    }
   case 5:
    _derror();
    var $_pre1 = HEAP16[5245028 >> 1];
    var $17 = $_pre1;
    label = 6;
    break;
   case 6:
    var $17;
    var $18 = $add_ptr;
    var $conv20 = $17 & 65535;
    var $div = $conv20 >>> 1;
    var $lnot = ($row_020 | 0) == 0;
    var $lnot_ext = $lnot & 1;
    _sony_decrypt($18, $div, $lnot_ext, $or_3);
    var $19 = HEAP16[5245028 >> 1];
    var $cmp2316 = $19 << 16 >> 16 == 0;
    if ($cmp2316) {
      var $22 = 0;
      label = 10;
      break;
    } else {
      var $col_017 = 0;
      label = 7;
      break;
    }
   case 7:
    var $col_017;
    var $add_ptr_sum = $col_017 + $mul14 | 0;
    var $arrayidx26 = $13 + ($add_ptr_sum << 1) | 0;
    var $20 = HEAP16[$arrayidx26 >> 1];
    var $conv27 = $20 & 65535;
    var $call28 = _htons($conv27);
    var $conv29 = $call28 & 65535;
    HEAP16[$arrayidx26 >> 1] = $conv29;
    var $shr14 = $call28 & 49152;
    var $tobool32 = ($shr14 | 0) == 0;
    if ($tobool32) {
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    _derror();
    label = 9;
    break;
   case 9:
    var $inc = $col_017 + 1 | 0;
    var $21 = HEAP16[5245028 >> 1];
    var $conv22 = $21 & 65535;
    var $cmp23 = $inc >>> 0 < $conv22 >>> 0;
    if ($cmp23) {
      var $col_017 = $inc;
      label = 7;
      break;
    } else {
      var $22 = $21;
      label = 10;
      break;
    }
   case 10:
    var $22;
    var $inc37 = $row_020 + 1 | 0;
    var $23 = HEAP16[5245036 >> 1];
    var $conv9 = $23 & 65535;
    var $cmp10 = $inc37 >>> 0 < $conv9 >>> 0;
    if ($cmp10) {
      var $row_020 = $inc37;
      var $12 = $22;
      label = 4;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    HEAP32[5263496 >> 2] = 16368;
    STACKTOP = __stackBase__;
    return;
  }
}
_sony_load_raw["X"] = 1;
function _sony_arw_load_raw() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 65536 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $huff = __stackBase__;
    var $n_030 = 0;
    var $i_031 = 0;
    label = 3;
    break;
   case 3:
    var $i_031;
    var $n_030;
    var $arrayidx = 5244644 + ($i_031 << 1) | 0;
    var $0 = HEAP16[$arrayidx >> 1];
    var $conv24 = $0 & 65535;
    var $shr1425 = $conv24 >>> 8;
    var $shr226 = 32768 >>> ($shr1425 >>> 0);
    var $cmp327 = ($shr226 | 0) > 0;
    if ($cmp327) {
      label = 4;
      break;
    } else {
      var $n_1_lcssa = $n_030;
      label = 7;
      break;
    }
   case 4:
    var $1 = ($shr226 | 0) > 1;
    var $smax = $1 ? $shr226 : 1;
    var $c_028 = 0;
    var $n_129 = $n_030;
    label = 5;
    break;
   case 5:
    var $n_129;
    var $c_028;
    var $inc = $n_129 + 1 | 0;
    var $arrayidx7 = $huff + ($n_129 << 1) | 0;
    HEAP16[$arrayidx7 >> 1] = $0;
    var $inc8 = $c_028 + 1 | 0;
    var $cmp3 = ($inc8 | 0) < ($shr226 | 0);
    if ($cmp3) {
      var $c_028 = $inc8;
      var $n_129 = $inc;
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $2 = $n_030 + $smax | 0;
    var $n_1_lcssa = $2;
    label = 7;
    break;
   case 7:
    var $n_1_lcssa;
    var $inc10 = $i_031 + 1 | 0;
    var $exitcond = ($inc10 | 0) == 18;
    if ($exitcond) {
      label = 8;
      break;
    } else {
      var $n_030 = $n_1_lcssa;
      var $i_031 = $inc10;
      label = 3;
      break;
    }
   case 8:
    var $call = _getbithuff(-1, 0);
    var $3 = HEAP16[5245028 >> 1];
    var $tobool21 = $3 << 16 >> 16 == 0;
    if ($tobool21) {
      label = 19;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $conv12 = $3 & 65535;
    var $arraydecay = $huff | 0;
    var $_pre = HEAP16[5245036 >> 1];
    var $sum_022 = 0;
    var $dec23_in = $conv12;
    var $4 = $_pre;
    label = 11;
    break;
   case 10:
    var $tobool = ($dec23 | 0) == 0;
    if ($tobool) {
      label = 19;
      break;
    } else {
      var $sum_022 = $add32;
      var $dec23_in = $dec23;
      var $4 = $8;
      label = 11;
      break;
    }
   case 11:
    var $4;
    var $dec23_in;
    var $sum_022;
    var $dec23 = $dec23_in - 1 | 0;
    var $conv1615 = $4 & 65535;
    var $row_017 = 0;
    var $sum_118 = $sum_022;
    var $conv1619 = $conv1615;
    label = 12;
    break;
   case 12:
    var $conv1619;
    var $sum_118;
    var $row_017;
    var $cmp21 = ($row_017 | 0) == ($conv1619 | 0);
    var $_row_0 = $cmp21 ? 1 : $row_017;
    var $call23 = _getbithuff(15, $arraydecay);
    var $call24 = _getbithuff($call23, 0);
    var $sub = $call23 - 1 | 0;
    var $shl = 1 << $sub;
    var $and = $shl & $call24;
    var $cmp25 = ($and | 0) == 0;
    if ($cmp25) {
      label = 13;
      break;
    } else {
      var $diff_0 = $call24;
      label = 14;
      break;
    }
   case 13:
    var $shl28_neg = -1 << $call23;
    var $sub29_neg = $shl28_neg + 1 | 0;
    var $sub30 = $sub29_neg + $call24 | 0;
    var $diff_0 = $sub30;
    label = 14;
    break;
   case 14:
    var $diff_0;
    var $add32 = $diff_0 + $sum_118 | 0;
    var $tobool34 = $add32 >>> 0 > 4095;
    if ($tobool34) {
      label = 15;
      break;
    } else {
      label = 16;
      break;
    }
   case 15:
    _derror();
    label = 16;
    break;
   case 16:
    var $5 = HEAP16[5398712 >> 1];
    var $conv37 = $5 & 65535;
    var $cmp38 = ($_row_0 | 0) < ($conv37 | 0);
    if ($cmp38) {
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 17:
    var $conv41 = $add32 & 65535;
    var $6 = HEAP16[5245028 >> 1];
    var $conv42 = $6 & 65535;
    var $mul = $conv42 * $_row_0 & -1;
    var $add43 = $mul + $dec23 | 0;
    var $7 = HEAP32[5245032 >> 2];
    var $arrayidx44 = $7 + ($add43 << 1) | 0;
    HEAP16[$arrayidx44 >> 1] = $conv41;
    label = 18;
    break;
   case 18:
    var $add47 = $_row_0 + 2 | 0;
    var $8 = HEAP16[5245036 >> 1];
    var $conv16 = $8 & 65535;
    var $add = $conv16 + 1 | 0;
    var $cmp17 = ($add47 | 0) < ($add | 0);
    if ($cmp17) {
      var $row_017 = $add47;
      var $sum_118 = $add32;
      var $conv1619 = $conv16;
      label = 12;
      break;
    } else {
      label = 10;
      break;
    }
   case 19:
    STACKTOP = __stackBase__;
    return;
  }
}
_sony_arw_load_raw["X"] = 1;
function _sony_arw2_load_raw() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $pix = __stackBase__;
    var $0 = HEAP16[5245028 >> 1];
    var $conv = $0 & 65535;
    var $call = _malloc($conv);
    _merror($call, 5585492);
    var $1 = HEAP16[5398712 >> 1];
    var $cmp46 = $1 << 16 >> 16 == 0;
    if ($cmp46) {
      label = 20;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $_pre = HEAP16[5245028 >> 1];
    var $row_047 = 0;
    var $2 = $_pre;
    label = 4;
    break;
   case 4:
    var $2;
    var $row_047;
    var $conv3 = $2 & 65535;
    var $3 = HEAP32[5264116 >> 2];
    var $call4 = _fread($call, 1, $conv3, $3);
    var $4 = HEAP16[5245028 >> 1];
    var $conv640 = $4 & 65535;
    var $sub41 = $conv640 - 30 | 0;
    var $cmp742 = ($sub41 | 0) > 0;
    if ($cmp742) {
      var $col_043 = 0;
      var $dp_044 = $call;
      label = 5;
      break;
    } else {
      label = 19;
      break;
    }
   case 5:
    var $dp_044;
    var $col_043;
    var $call10 = _sget4($dp_044);
    var $and = $call10 & 2047;
    var $shr32 = $call10 >>> 11;
    var $and11 = $shr32 & 2047;
    var $shr1233 = $call10 >>> 22;
    var $and13 = $shr1233 & 15;
    var $shr1434 = $call10 >>> 26;
    var $and15 = $shr1434 & 15;
    var $sub19 = $and - $and11 | 0;
    var $sh_0 = 0;
    label = 6;
    break;
   case 6:
    var $sh_0;
    var $cmp17 = ($sh_0 | 0) < 4;
    if ($cmp17) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    var $shl = 128 << $sh_0;
    var $cmp20 = ($shl | 0) > ($sub19 | 0);
    var $inc = $sh_0 + 1 | 0;
    if ($cmp20) {
      label = 8;
      break;
    } else {
      var $sh_0 = $inc;
      label = 6;
      break;
    }
   case 8:
    var $conv29 = $and & 65535;
    var $conv33 = $and11 & 65535;
    var $bit_036 = 30;
    var $i_037 = 0;
    label = 9;
    break;
   case 9:
    var $i_037;
    var $bit_036;
    var $cmp27 = ($i_037 | 0) == ($and13 | 0);
    if ($cmp27) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    var $arrayidx = $pix + ($and13 << 1) | 0;
    HEAP16[$arrayidx >> 1] = $conv29;
    var $bit_1 = $bit_036;
    label = 14;
    break;
   case 11:
    var $cmp30 = ($i_037 | 0) == ($and15 | 0);
    if ($cmp30) {
      label = 12;
      break;
    } else {
      label = 13;
      break;
    }
   case 12:
    var $arrayidx34 = $pix + ($and15 << 1) | 0;
    HEAP16[$arrayidx34 >> 1] = $conv33;
    var $bit_1 = $bit_036;
    label = 14;
    break;
   case 13:
    var $shr36 = $bit_036 >> 3;
    var $add_ptr = $dp_044 + $shr36 | 0;
    var $call37 = _sget2($add_ptr);
    var $conv38 = $call37 & 65535;
    var $and39 = $bit_036 & 7;
    var $shr40 = $conv38 >>> ($and39 >>> 0);
    var $and41 = $shr40 & 127;
    var $shl42 = $and41 << $sh_0;
    var $add = $shl42 + $and11 | 0;
    var $conv43 = $add & 65535;
    var $arrayidx44 = $pix + ($i_037 << 1) | 0;
    var $conv46 = $add & 63488;
    var $cmp47 = $conv46 >>> 0 > 2047;
    var $_conv43 = $cmp47 ? 2047 : $conv43;
    HEAP16[$arrayidx44 >> 1] = $_conv43;
    var $add51 = $bit_036 + 7 | 0;
    var $bit_1 = $add51;
    label = 14;
    break;
   case 14:
    var $bit_1;
    var $inc55 = $i_037 + 1 | 0;
    var $exitcond = ($inc55 | 0) == 16;
    if ($exitcond) {
      label = 15;
      break;
    } else {
      var $bit_036 = $bit_1;
      var $i_037 = $inc55;
      label = 9;
      break;
    }
   case 15:
    var $_pre1 = HEAP32[5245032 >> 2];
    var $col_138 = $col_043;
    var $i_139 = 0;
    label = 16;
    break;
   case 16:
    var $i_139;
    var $col_138;
    var $arrayidx61 = $pix + ($i_139 << 1) | 0;
    var $5 = HEAP16[$arrayidx61 >> 1];
    var $conv62 = $5 & 65535;
    var $shl63 = $conv62 << 1;
    var $arrayidx64 = 5428500 + ($shl63 << 1) | 0;
    var $6 = HEAP16[$arrayidx64 >> 1];
    var $shr6635 = ($6 & 65535) >>> 2;
    var $mul = $conv640 * $row_047 & -1;
    var $add69 = $mul + $col_138 | 0;
    var $arrayidx70 = $_pre1 + ($add69 << 1) | 0;
    HEAP16[$arrayidx70 >> 1] = $shr6635;
    var $inc72 = $i_139 + 1 | 0;
    var $exitcond49 = ($inc72 | 0) == 16;
    if ($exitcond49) {
      label = 18;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    var $add73 = $col_138 + 2 | 0;
    var $col_138 = $add73;
    var $i_139 = $inc72;
    label = 16;
    break;
   case 18:
    var $7 = $col_043 + 32 | 0;
    var $and75 = $7 & 1;
    var $tobool = ($and75 | 0) != 0;
    var $cond = $tobool ? 1 : 31;
    var $sub76 = $7 - $cond | 0;
    var $add_ptr78 = $dp_044 + 16 | 0;
    var $cmp7 = ($sub76 | 0) < ($sub41 | 0);
    if ($cmp7) {
      var $col_043 = $sub76;
      var $dp_044 = $add_ptr78;
      label = 5;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $inc81 = $row_047 + 1 | 0;
    var $8 = HEAP16[5398712 >> 1];
    var $conv1 = $8 & 65535;
    var $cmp = ($inc81 | 0) < ($conv1 | 0);
    if ($cmp) {
      var $row_047 = $inc81;
      var $2 = $4;
      label = 4;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    _free($call);
    STACKTOP = __stackBase__;
    return;
  }
}
_sony_arw2_load_raw["X"] = 1;
function _redcine_load_raw() {
  return;
}
function _median4($p) {
  var $0 = HEAP32[$p >> 2];
  var $1 = HEAP32[$p + 4 >> 2];
  var $_min_0 = ($0 | 0) > ($1 | 0) ? $1 : $0;
  var $max_1 = ($0 | 0) < ($1 | 0) ? $1 : $0;
  var $2 = HEAP32[$p + 8 >> 2];
  var $_min_0_1 = ($_min_0 | 0) > ($2 | 0) ? $2 : $_min_0;
  var $max_1_1 = ($max_1 | 0) < ($2 | 0) ? $2 : $max_1;
  var $3 = HEAP32[$p + 12 >> 2];
  return $3 + ($2 + ($1 + $0)) - ((($max_1_1 | 0) < ($3 | 0) ? $3 : $max_1_1) + (($_min_0_1 | 0) > ($3 | 0) ? $3 : $_min_0_1)) >> 1;
}
function _smal_decode_segment($seg, $holes) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 56 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $hist = __stackBase__;
    var $sym = __stackBase__ + 40;
    var $pred = __stackBase__ + 52;
    var $tmpcast = $pred;
    var $0 = $hist | 0;
    _memcpy($0, 5244680, 39);
    HEAP16[$pred >> 1] = 0;
    var $1 = HEAP32[5264116 >> 2];
    var $arrayidx1 = $seg + 4 | 0;
    var $2 = HEAP32[$arrayidx1 >> 2];
    var $add = $2 + 1 | 0;
    var $call = _fseek($1, $add, 0);
    var $call2 = _getbithuff(-1, 0);
    var $arrayidx4 = $seg | 0;
    var $3 = HEAP32[$arrayidx4 >> 2];
    var $arrayidx6 = $seg + 8 | 0;
    var $4 = HEAP32[$arrayidx6 >> 2];
    var $cmp100 = $3 >>> 0 < $4 >>> 0;
    if ($cmp100) {
      label = 3;
      break;
    } else {
      label = 33;
      break;
    }
   case 3:
    var $arrayidx199 = $sym + 8 | 0;
    var $arrayidx201 = $sym + 4 | 0;
    var $arrayidx204 = $sym | 0;
    var $arrayidx225 = $seg + 12 | 0;
    var $carry_0101 = 0;
    var $nbits_0102 = 8;
    var $pix_0103 = $3;
    var $high_0104 = 255;
    var $data_0105 = 0;
    var $range_0106 = 0;
    label = 4;
    break;
   case 4:
    var $range_0106;
    var $data_0105;
    var $high_0104;
    var $pix_0103;
    var $nbits_0102;
    var $carry_0101;
    var $carry_191 = $carry_0101;
    var $nbits_192 = $nbits_0102;
    var $s_093 = 0;
    var $high_197 = $high_0104;
    var $data_198 = $data_0105;
    var $range_199 = $range_0106;
    label = 5;
    break;
   case 5:
    var $range_199;
    var $data_198;
    var $high_197;
    var $s_093;
    var $nbits_192;
    var $carry_191;
    var $conv = $data_198 & 65535;
    var $shl = $conv << $nbits_192;
    var $call10 = _getbithuff($nbits_192, 0);
    var $or = $call10 | $shl;
    var $cmp12 = ($carry_191 | 0) < 0;
    if ($cmp12) {
      label = 6;
      break;
    } else {
      var $nbits_2_ph = $nbits_192;
      var $carry_2_ph = $carry_191;
      label = 7;
      break;
    }
   case 6:
    var $add14 = $carry_191 + 1 | 0;
    var $add15 = $add14 + $nbits_192 | 0;
    var $cmp16 = ($add15 | 0) < 1;
    var $sub = $nbits_192 + $carry_191 | 0;
    var $sub_ = $cmp16 ? $sub : 0;
    var $nbits_2_ph = $add15;
    var $carry_2_ph = $sub_;
    label = 7;
    break;
   case 7:
    var $carry_2_ph;
    var $nbits_2_ph;
    var $conv20 = $or & 65535;
    var $nbits_2 = $nbits_2_ph;
    label = 8;
    break;
   case 8:
    var $nbits_2;
    var $dec = $nbits_2 - 1 | 0;
    var $cmp18 = ($nbits_2 | 0) > 0;
    if ($cmp18) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    var $shr = $conv20 >>> ($dec >>> 0);
    var $and = $shr & 255;
    var $cmp21 = ($and | 0) == 255;
    if ($cmp21) {
      label = 10;
      break;
    } else {
      var $nbits_2 = $dec;
      label = 8;
      break;
    }
   case 10:
    var $cmp25 = ($dec | 0) > 0;
    if ($cmp25) {
      label = 11;
      break;
    } else {
      var $data_2_in = $or;
      label = 12;
      break;
    }
   case 11:
    var $sub29 = $nbits_2 - 2 | 0;
    var $shl30 = 1 << $sub29;
    var $sub31 = $shl30 + 65535 | 0;
    var $and32 = $sub31 & $conv20;
    var $shl33 = $and32 << 1;
    var $and38 = $shl30 & $conv20;
    var $shl39 = $and38 << 1;
    var $add40 = $shl39 + $or | 0;
    var $shl41 = -1 << $dec;
    var $and42 = $add40 & $shl41;
    var $or43 = $and42 | $shl33;
    var $data_2_in = $or43;
    label = 12;
    break;
   case 12:
    var $data_2_in;
    if ($cmp18) {
      label = 13;
      break;
    } else {
      var $data_3_in = $data_2_in;
      var $carry_3 = $carry_2_ph;
      label = 14;
      break;
    }
   case 13:
    var $call49 = _getbithuff(1, 0);
    var $add51 = $call49 + $data_2_in | 0;
    var $sub53 = $nbits_2 - 9 | 0;
    var $data_3_in = $add51;
    var $carry_3 = $sub53;
    label = 14;
    break;
   case 14:
    var $carry_3;
    var $data_3_in;
    var $conv55 = $data_3_in & 65535;
    var $conv56 = $range_199 & 65535;
    var $sub57 = $conv55 - $conv56 | 0;
    var $add58 = $sub57 << 2;
    var $and59 = $add58 + 4 | 0;
    var $shl60 = $and59 & 262140;
    var $sub61 = $shl60 - 1 | 0;
    var $shr62 = $high_197 >> 4;
    var $div = ($sub61 | 0) / ($shr62 | 0) & -1;
    var $bin_0 = 0;
    label = 15;
    break;
   case 15:
    var $bin_0;
    var $add64 = $bin_0 + 5 | 0;
    var $arrayidx66 = $hist + $s_093 * 13 + $add64 | 0;
    var $5 = HEAP8[$arrayidx66];
    var $conv67 = $5 & 255;
    var $cmp68 = ($conv67 | 0) > ($div | 0);
    var $inc = $bin_0 + 1 | 0;
    if ($cmp68) {
      var $bin_0 = $inc;
      label = 15;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $mul = $conv67 * $shr62 & -1;
    var $shr76 = $mul >> 2;
    var $tobool = ($bin_0 | 0) == 0;
    if ($tobool) {
      var $high_2 = $high_197;
      label = 18;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    var $add78 = $bin_0 + 4 | 0;
    var $arrayidx80 = $hist + $s_093 * 13 + $add78 | 0;
    var $6 = HEAP8[$arrayidx80];
    var $conv81 = $6 & 255;
    var $mul83 = $conv81 * $shr62 & -1;
    var $shr84 = $mul83 >> 2;
    var $high_2 = $shr84;
    label = 18;
    break;
   case 18:
    var $high_2;
    var $sub86 = $high_2 - $shr76 | 0;
    var $nbits_3 = 0;
    label = 19;
    break;
   case 19:
    var $nbits_3;
    var $shl88 = $sub86 << $nbits_3;
    var $cmp89 = ($shl88 | 0) < 128;
    var $inc93 = $nbits_3 + 1 | 0;
    if ($cmp89) {
      var $nbits_3 = $inc93;
      label = 19;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    var $add96 = $shr76 + $conv56 | 0;
    var $shl97 = $add96 << $nbits_3;
    var $arrayidx101 = $hist + $s_093 * 13 + 1 | 0;
    var $7 = HEAP8[$arrayidx101];
    var $conv102 = $7 & 255;
    var $arrayidx104 = $hist + $s_093 * 13 + 2 | 0;
    var $8 = HEAP8[$arrayidx104];
    var $inc105 = $8 + 1 & 255;
    HEAP8[$arrayidx104] = $inc105;
    var $arrayidx108 = $hist + $s_093 * 13 + 3 | 0;
    var $9 = HEAP8[$arrayidx108];
    var $cmp110 = ($inc105 & 255) > ($9 & 255);
    if ($cmp110) {
      label = 21;
      break;
    } else {
      var $next_0 = $conv102;
      label = 22;
      break;
    }
   case 21:
    var $add113 = $conv102 + 1 | 0;
    var $arrayidx115 = $hist + $s_093 * 13 | 0;
    var $10 = HEAP8[$arrayidx115];
    var $conv116 = $10 & 255;
    var $and117 = $conv116 & $add113;
    var $add118 = $and117 + 4 | 0;
    var $arrayidx120 = $hist + $s_093 * 13 + $add118 | 0;
    var $11 = HEAP8[$arrayidx120];
    var $conv121 = $11 & 255;
    var $add122 = $and117 + 5 | 0;
    var $arrayidx124 = $hist + $s_093 * 13 + $add122 | 0;
    var $12 = HEAP8[$arrayidx124];
    var $conv125 = $12 & 255;
    var $sub126 = $conv121 - $conv125 | 0;
    var $shr12783 = $sub126 >>> 2;
    var $conv128 = $shr12783 & 255;
    HEAP8[$arrayidx108] = $conv128;
    HEAP8[$arrayidx104] = 1;
    var $next_0 = $and117;
    label = 22;
    break;
   case 22:
    var $next_0;
    var $add137 = $conv102 + 4 | 0;
    var $arrayidx139 = $hist + $s_093 * 13 + $add137 | 0;
    var $13 = HEAP8[$arrayidx139];
    var $conv140 = $13 & 255;
    var $add144 = $conv102 + 5 | 0;
    var $arrayidx146 = $hist + $s_093 * 13 + $add144 | 0;
    var $14 = HEAP8[$arrayidx146];
    var $conv147 = $14 & 255;
    var $sub148 = $conv140 - $conv147 | 0;
    var $cmp149 = ($sub148 | 0) > 1;
    if ($cmp149) {
      label = 23;
      break;
    } else {
      label = 27;
      break;
    }
   case 23:
    var $cmp155 = ($bin_0 | 0) < ($conv102 | 0);
    if ($cmp155) {
      var $i_090 = $bin_0;
      label = 24;
      break;
    } else {
      label = 25;
      break;
    }
   case 24:
    var $i_090;
    var $add165 = $i_090 + 5 | 0;
    var $arrayidx167 = $hist + $s_093 * 13 + $add165 | 0;
    var $15 = HEAP8[$arrayidx167];
    var $dec168 = $15 - 1 & 255;
    HEAP8[$arrayidx167] = $dec168;
    var $inc170 = $i_090 + 1 | 0;
    var $16 = HEAP8[$arrayidx101];
    var $conv161 = $16 & 255;
    var $cmp162 = ($inc170 | 0) < ($conv161 | 0);
    if ($cmp162) {
      var $i_090 = $inc170;
      label = 24;
      break;
    } else {
      label = 27;
      break;
    }
   case 25:
    var $cmp172 = ($next_0 | 0) <= ($bin_0 | 0);
    var $cmp17985 = ($conv102 | 0) < ($bin_0 | 0);
    var $or_cond = $cmp172 & $cmp17985;
    if ($or_cond) {
      var $i_186 = $conv102;
      label = 26;
      break;
    } else {
      label = 27;
      break;
    }
   case 26:
    var $i_186;
    var $add182 = $i_186 + 5 | 0;
    var $arrayidx184 = $hist + $s_093 * 13 + $add182 | 0;
    var $17 = HEAP8[$arrayidx184];
    var $inc185 = $17 + 1 & 255;
    HEAP8[$arrayidx184] = $inc185;
    var $inc187 = $i_186 + 1 | 0;
    var $exitcond = ($inc187 | 0) == ($bin_0 | 0);
    if ($exitcond) {
      label = 27;
      break;
    } else {
      var $i_186 = $inc187;
      label = 26;
      break;
    }
   case 27:
    var $conv192 = $next_0 & 255;
    HEAP8[$arrayidx101] = $conv192;
    var $arrayidx195 = $sym + ($s_093 << 2) | 0;
    HEAP32[$arrayidx195 >> 2] = $bin_0;
    var $inc197 = $s_093 + 1 | 0;
    var $exitcond107 = ($inc197 | 0) == 3;
    if ($exitcond107) {
      label = 28;
      break;
    } else {
      var $carry_191 = $carry_3;
      var $nbits_192 = $nbits_3;
      var $s_093 = $inc197;
      var $high_197 = $shl88;
      var $data_198 = $data_3_in;
      var $range_199 = $shl97;
      label = 5;
      break;
    }
   case 28:
    var $18 = HEAP32[$arrayidx199 >> 2];
    var $shl200 = $18 << 5;
    var $19 = HEAP32[$arrayidx201 >> 2];
    var $shl202 = $19 << 2;
    var $or203 = $shl202 | $shl200;
    var $20 = HEAP32[$arrayidx204 >> 2];
    var $and205 = $20 & 3;
    var $or206 = $or203 | $and205;
    var $and209 = $20 & 4;
    var $tobool210 = ($and209 | 0) == 0;
    if ($tobool210) {
      var $diff_0 = $or206;
      label = 30;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    var $conv212 = $or206 & 255;
    var $tobool213 = ($conv212 | 0) == 0;
    var $sub216 = -$conv212 | 0;
    var $_sub216 = $tobool213 ? 128 : $sub216;
    var $diff_0 = $_sub216;
    label = 30;
    break;
   case 30:
    var $diff_0;
    var $21 = HEAP32[5264116 >> 2];
    var $call222 = _ftell($21);
    var $add223 = $call222 + 12 | 0;
    var $22 = HEAP32[$arrayidx225 >> 2];
    var $cmp226 = $add223 >>> 0 < $22 >>> 0;
    var $diff_0_ = $cmp226 ? $diff_0 : 0;
    var $and231 = $pix_0103 & 1;
    var $arrayidx232 = $tmpcast + $and231 | 0;
    var $23 = HEAP8[$arrayidx232];
    var $conv233 = $23 & 255;
    var $add234 = $conv233 + $diff_0_ | 0;
    var $conv235 = $add234 & 255;
    HEAP8[$arrayidx232] = $conv235;
    var $24 = $add234 & 65535;
    var $conv236 = $24 & 255;
    var $25 = HEAP32[5245032 >> 2];
    var $arrayidx237 = $25 + ($pix_0103 << 1) | 0;
    HEAP16[$arrayidx237 >> 1] = $conv236;
    var $tobool239 = ($and231 | 0) == 0;
    if ($tobool239) {
      label = 31;
      break;
    } else {
      var $pix_1 = $pix_0103;
      label = 32;
      break;
    }
   case 31:
    var $26 = HEAP16[5245028 >> 1];
    var $conv240 = $26 & 65535;
    var $div241 = ($pix_0103 | 0) / ($conv240 | 0) & -1;
    var $27 = HEAP16[5245036 >> 1];
    var $conv242 = $27 & 65535;
    var $sub243 = $div241 - $conv242 | 0;
    var $and244 = $sub243 & 7;
    var $28 = 1 << $and244;
    var $and24682 = $28 & $holes;
    var $tobool247 = ($and24682 | 0) == 0;
    var $add249 = $pix_0103 + 2 | 0;
    var $pix_0_add249 = $tobool247 ? $pix_0103 : $add249;
    var $pix_1 = $pix_0_add249;
    label = 32;
    break;
   case 32:
    var $pix_1;
    var $inc252 = $pix_1 + 1 | 0;
    var $29 = HEAP32[$arrayidx6 >> 2];
    var $cmp = $inc252 >>> 0 < $29 >>> 0;
    if ($cmp) {
      var $carry_0101 = $carry_3;
      var $nbits_0102 = $nbits_3;
      var $pix_0103 = $inc252;
      var $high_0104 = $shl88;
      var $data_0105 = $data_3_in;
      var $range_0106 = $shl97;
      label = 4;
      break;
    } else {
      label = 33;
      break;
    }
   case 33:
    HEAP32[5263496 >> 2] = 255;
    STACKTOP = __stackBase__;
    return;
  }
}
_smal_decode_segment["X"] = 1;
function _smal_v6_load_raw() {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  var $seg = __stackBase__;
  _fseek(HEAP32[5264116 >> 2], 16, 0);
  HEAP32[$seg >> 2] = 0;
  var $conv = _get2() & 65535;
  HEAP32[$seg + 4 >> 2] = $conv;
  HEAP32[$seg + 8 >> 2] = HEAPU16[5245036 >> 1] * HEAPU16[5245028 >> 1] & -1;
  HEAP32[$seg + 12 >> 2] = 2147483647;
  _smal_decode_segment($seg | 0, 0);
  STACKTOP = __stackBase__;
  return;
}
function _fill_holes($holes) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $val = __stackBase__;
    var $0 = HEAP16[5398712 >> 1];
    var $conv51 = $0 & 65535;
    var $sub53 = $conv51 - 2 | 0;
    var $cmp54 = ($sub53 | 0) > 2;
    if ($cmp54) {
      label = 3;
      break;
    } else {
      label = 16;
      break;
    }
   case 3:
    var $arrayidx92 = $val | 0;
    var $arrayidx99 = $val + 4 | 0;
    var $arrayidx106 = $val + 8 | 0;
    var $arrayidx113 = $val + 12 | 0;
    var $_pre = HEAP16[5245036 >> 1];
    var $row_055 = 2;
    label = 4;
    break;
   case 4:
    var $row_055;
    var $conv2 = $_pre & 65535;
    var $sub3 = $row_055 - $conv2 | 0;
    var $and = $sub3 & 7;
    var $1 = 1 << $and;
    var $and437 = $1 & $holes;
    var $tobool = ($and437 | 0) == 0;
    if ($tobool) {
      label = 15;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $2 = HEAP16[5242964 >> 1];
    var $conv642 = $2 & 65535;
    var $sub743 = $conv642 - 1 | 0;
    var $cmp844 = ($sub743 | 0) > 1;
    if ($cmp844) {
      label = 6;
      break;
    } else {
      label = 8;
      break;
    }
   case 6:
    var $sub11 = $row_055 - 1 | 0;
    var $add24 = $row_055 + 1 | 0;
    var $_pre1 = HEAP16[5245028 >> 1];
    var $_pre2 = HEAP32[5245032 >> 2];
    var $col_045 = 1;
    label = 7;
    break;
   case 7:
    var $col_045;
    var $conv12 = $_pre1 & 65535;
    var $mul = $conv12 * $sub11 & -1;
    var $sub13 = $col_045 - 1 | 0;
    var $add = $mul + $sub13 | 0;
    var $arrayidx = $_pre2 + ($add << 1) | 0;
    var $3 = HEAP16[$arrayidx >> 1];
    var $conv14 = $3 & 65535;
    HEAP32[$arrayidx92 >> 2] = $conv14;
    var $add19 = $col_045 + 1 | 0;
    var $add20 = $mul + $add19 | 0;
    var $arrayidx21 = $_pre2 + ($add20 << 1) | 0;
    var $4 = HEAP16[$arrayidx21 >> 1];
    var $conv22 = $4 & 65535;
    HEAP32[$arrayidx99 >> 2] = $conv22;
    var $mul26 = $conv12 * $add24 & -1;
    var $add28 = $mul26 + $sub13 | 0;
    var $arrayidx29 = $_pre2 + ($add28 << 1) | 0;
    var $5 = HEAP16[$arrayidx29 >> 1];
    var $conv30 = $5 & 65535;
    HEAP32[$arrayidx106 >> 2] = $conv30;
    var $add36 = $mul26 + $add19 | 0;
    var $arrayidx37 = $_pre2 + ($add36 << 1) | 0;
    var $6 = HEAP16[$arrayidx37 >> 1];
    var $conv38 = $6 & 65535;
    HEAP32[$arrayidx113 >> 2] = $conv38;
    var $call = _median4($arrayidx92);
    var $conv40 = $call & 65535;
    var $mul42 = $conv12 * $row_055 & -1;
    var $add43 = $mul42 + $col_045 | 0;
    var $arrayidx44 = $_pre2 + ($add43 << 1) | 0;
    HEAP16[$arrayidx44 >> 1] = $conv40;
    var $add45 = $col_045 + 4 | 0;
    var $cmp8 = ($add45 | 0) < ($sub743 | 0);
    if ($cmp8) {
      var $col_045 = $add45;
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $sub4847 = $conv642 - 2 | 0;
    var $cmp4948 = ($sub4847 | 0) > 2;
    if ($cmp4948) {
      label = 9;
      break;
    } else {
      label = 15;
      break;
    }
   case 9:
    var $sub52 = $row_055 - 2 | 0;
    var $add59 = $row_055 + 2 | 0;
    var $col_149 = 2;
    label = 10;
    break;
   case 10:
    var $col_149;
    var $sub54 = $sub52 - $conv2 | 0;
    var $and55 = $sub54 & 7;
    var $7 = 1 << $and55;
    var $and5739 = $7 & $holes;
    var $tobool58 = ($and5739 | 0) == 0;
    if ($tobool58) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    var $sub61 = $add59 - $conv2 | 0;
    var $and62 = $sub61 & 7;
    var $8 = 1 << $and62;
    var $and6441 = $8 & $holes;
    var $tobool65 = ($and6441 | 0) == 0;
    if ($tobool65) {
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $9 = HEAP16[5245028 >> 1];
    var $conv67 = $9 & 65535;
    var $mul68 = $conv67 * $row_055 & -1;
    var $sub69 = $col_149 - 2 | 0;
    var $add70 = $sub69 + $mul68 | 0;
    var $10 = HEAP32[5245032 >> 2];
    var $arrayidx71 = $10 + ($add70 << 1) | 0;
    var $11 = HEAP16[$arrayidx71 >> 1];
    var $conv72 = $11 & 65535;
    var $add75 = $col_149 + 2 | 0;
    var $add76 = $add75 + $mul68 | 0;
    var $arrayidx77 = $10 + ($add76 << 1) | 0;
    var $12 = HEAP16[$arrayidx77 >> 1];
    var $conv78 = $12 & 65535;
    var $add79 = $conv78 + $conv72 | 0;
    var $shr80 = $add79 >>> 1;
    var $conv81 = $shr80 & 65535;
    var $add84 = $mul68 + $col_149 | 0;
    var $arrayidx85 = $10 + ($add84 << 1) | 0;
    HEAP16[$arrayidx85 >> 1] = $conv81;
    label = 14;
    break;
   case 13:
    var $13 = HEAP16[5245028 >> 1];
    var $conv86 = $13 & 65535;
    var $mul87 = $conv86 * $row_055 & -1;
    var $sub88 = $col_149 - 2 | 0;
    var $add89 = $sub88 + $mul87 | 0;
    var $14 = HEAP32[5245032 >> 2];
    var $arrayidx90 = $14 + ($add89 << 1) | 0;
    var $15 = HEAP16[$arrayidx90 >> 1];
    var $conv91 = $15 & 65535;
    HEAP32[$arrayidx92 >> 2] = $conv91;
    var $add95 = $col_149 + 2 | 0;
    var $add96 = $add95 + $mul87 | 0;
    var $arrayidx97 = $14 + ($add96 << 1) | 0;
    var $16 = HEAP16[$arrayidx97 >> 1];
    var $conv98 = $16 & 65535;
    HEAP32[$arrayidx99 >> 2] = $conv98;
    var $mul102 = $conv86 * $sub52 & -1;
    var $add103 = $mul102 + $col_149 | 0;
    var $arrayidx104 = $14 + ($add103 << 1) | 0;
    var $17 = HEAP16[$arrayidx104 >> 1];
    var $conv105 = $17 & 65535;
    HEAP32[$arrayidx106 >> 2] = $conv105;
    var $mul109 = $conv86 * $add59 & -1;
    var $add110 = $mul109 + $col_149 | 0;
    var $arrayidx111 = $14 + ($add110 << 1) | 0;
    var $18 = HEAP16[$arrayidx111 >> 1];
    var $conv112 = $18 & 65535;
    HEAP32[$arrayidx113 >> 2] = $conv112;
    var $call115 = _median4($arrayidx92);
    var $conv116 = $call115 & 65535;
    var $add119 = $mul87 + $col_149 | 0;
    var $arrayidx120 = $14 + ($add119 << 1) | 0;
    HEAP16[$arrayidx120 >> 1] = $conv116;
    label = 14;
    break;
   case 14:
    var $add123 = $col_149 + 4 | 0;
    var $cmp49 = ($add123 | 0) < ($sub4847 | 0);
    if ($cmp49) {
      var $col_149 = $add123;
      label = 10;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $inc = $row_055 + 1 | 0;
    var $cmp = ($inc | 0) < ($sub53 | 0);
    if ($cmp) {
      var $row_055 = $inc;
      label = 4;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    STACKTOP = __stackBase__;
    return;
  }
}
_fill_holes["X"] = 1;
function _smal_v9_load_raw() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 2048 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $seg = __stackBase__;
    var $0 = HEAP32[5264116 >> 2];
    var $call = _fseek($0, 67, 0);
    var $call1 = _get4();
    var $1 = HEAP32[5264116 >> 2];
    var $call2 = _fgetc($1);
    var $2 = HEAP32[5264116 >> 2];
    var $call3 = _fseek($2, $call1, 0);
    var $mul_mask = $call2 & 2147483647;
    var $cmp14 = ($mul_mask | 0) == 0;
    if ($cmp14) {
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $3 = $call2 << 1;
    var $i_015 = 0;
    label = 4;
    break;
   case 4:
    var $i_015;
    var $call4 = _get4();
    var $4 = HEAP32[5428492 >> 2];
    var $and = $i_015 & 1;
    var $5 = -$and | 0;
    var $mul5 = $4 & $5;
    var $add = $mul5 + $call4 | 0;
    var $arrayidx6 = $seg + ($i_015 << 2) | 0;
    HEAP32[$arrayidx6 >> 2] = $add;
    var $inc = $i_015 + 1 | 0;
    var $exitcond16 = ($inc | 0) == ($3 | 0);
    if ($exitcond16) {
      label = 5;
      break;
    } else {
      var $i_015 = $inc;
      label = 4;
      break;
    }
   case 5:
    var $6 = HEAP32[5264116 >> 2];
    var $call7 = _fseek($6, 78, 0);
    var $7 = HEAP32[5264116 >> 2];
    var $call8 = _fgetc($7);
    var $8 = HEAP32[5264116 >> 2];
    var $call9 = _fseek($8, 88, 0);
    var $9 = HEAP16[5245036 >> 1];
    var $conv = $9 & 65535;
    var $10 = HEAP16[5245028 >> 1];
    var $conv10 = $10 & 65535;
    var $mul11 = $conv10 * $conv & -1;
    var $arrayidx13 = $seg + ($call2 << 3) | 0;
    HEAP32[$arrayidx13 >> 2] = $mul11;
    var $call14 = _get4();
    var $11 = HEAP32[5428492 >> 2];
    var $add15 = $11 + $call14 | 0;
    var $arrayidx17 = $seg + ($call2 << 3) + 4 | 0;
    HEAP32[$arrayidx17 >> 2] = $add15;
    var $cmp1912 = ($call2 | 0) == 0;
    if ($cmp1912) {
      label = 7;
      break;
    } else {
      var $i_113 = 0;
      label = 6;
      break;
    }
   case 6:
    var $i_113;
    var $add_ptr = $seg + ($i_113 << 3) | 0;
    _smal_decode_segment($add_ptr, $call8);
    var $inc23 = $i_113 + 1 | 0;
    var $exitcond = ($inc23 | 0) == ($call2 | 0);
    if ($exitcond) {
      label = 7;
      break;
    } else {
      var $i_113 = $inc23;
      label = 6;
      break;
    }
   case 7:
    var $tobool = ($call8 | 0) == 0;
    if ($tobool) {
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    _fill_holes($call8);
    label = 9;
    break;
   case 9:
    STACKTOP = __stackBase__;
    return;
  }
}
_smal_v9_load_raw["X"] = 1;
function _foveon_thumb() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $pred = __stackBase__;
    var $call = _get4();
    var $0 = HEAP32[5262952 >> 2];
    var $1 = HEAP16[5244040 >> 1];
    var $conv = $1 & 65535;
    var $2 = HEAP16[5244060 >> 1];
    var $conv1 = $2 & 65535;
    var $call2 = _fprintf($0, 5573496, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $conv, HEAP32[tempInt + 4 >> 2] = $conv1, tempInt));
    var $cmp = ($call | 0) == 0;
    if ($cmp) {
      label = 7;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $3 = HEAP16[5244040 >> 1];
    var $conv4 = $3 & 65535;
    var $mul = $conv4 * 3 & -1;
    var $cmp5 = $call >>> 0 < $mul >>> 0;
    if ($cmp5) {
      label = 20;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $call8 = _malloc($call);
    _merror($call8, 5585076);
    var $4 = HEAP16[5244060 >> 1];
    var $cmp1044 = $4 << 16 >> 16 == 0;
    if ($cmp1044) {
      label = 6;
      break;
    } else {
      var $row_045 = 0;
      label = 5;
      break;
    }
   case 5:
    var $row_045;
    var $5 = HEAP32[5264116 >> 2];
    var $call12 = _fread($call8, 1, $call, $5);
    var $6 = HEAP16[5244040 >> 1];
    var $conv13 = $6 & 65535;
    var $7 = HEAP32[5262952 >> 2];
    var $call14 = _fwrite($call8, 3, $conv13, $7);
    var $inc = $row_045 + 1 | 0;
    var $8 = HEAP16[5244060 >> 1];
    var $conv9 = $8 & 65535;
    var $cmp10 = $inc >>> 0 < $conv9 >>> 0;
    if ($cmp10) {
      var $row_045 = $inc;
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    _free($call8);
    label = 20;
    break;
   case 7:
    _foveon_decoder(256, 0);
    var $9 = HEAP16[5244060 >> 1];
    var $cmp1839 = $9 << 16 >> 16 == 0;
    if ($cmp1839) {
      label = 20;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $10 = $pred;
    var $bitbuf_040 = 0;
    var $bit_041 = 1;
    var $row_142 = 0;
    label = 9;
    break;
   case 9:
    var $row_142;
    var $bit_041;
    var $bitbuf_040;
    HEAP16[$10 >> 1] = 0;
    HEAP16[$10 + 2 >> 1] = 0;
    HEAP16[$10 + 4 >> 1] = 0;
    var $tobool = ($bit_041 | 0) == 0;
    if ($tobool) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    var $call22 = _get4();
    label = 11;
    break;
   case 11:
    var $11 = HEAP16[5244040 >> 1];
    var $cmp2632 = $11 << 16 >> 16 == 0;
    if ($cmp2632) {
      var $bitbuf_1_lcssa = $bitbuf_040;
      var $bit_1_lcssa = 0;
      label = 19;
      break;
    } else {
      var $col_033 = 0;
      var $bitbuf_134 = $bitbuf_040;
      var $bit_135 = 0;
      label = 12;
      break;
    }
   case 12:
    var $bit_135;
    var $bitbuf_134;
    var $col_033;
    var $bitbuf_228 = $bitbuf_134;
    var $bit_229 = $bit_135;
    var $c_030 = 0;
    label = 13;
    break;
   case 13:
    var $c_030;
    var $bit_229;
    var $bitbuf_228;
    var $12 = HEAP32[5403056 >> 2];
    var $tobool3422 = ($12 | 0) == 0;
    if ($tobool3422) {
      var $bitbuf_3_lcssa = $bitbuf_228;
      var $bit_3_lcssa = $bit_229;
      var $dindex_0_lcssa = 5403056;
      label = 17;
      break;
    } else {
      var $bitbuf_323 = $bitbuf_228;
      var $bit_324 = $bit_229;
      var $dindex_025 = 5403056;
      label = 14;
      break;
    }
   case 14:
    var $dindex_025;
    var $bit_324;
    var $bitbuf_323;
    var $sub = $bit_324 + 31 | 0;
    var $and = $sub & 31;
    var $cmp36 = ($and | 0) == 31;
    if ($cmp36) {
      label = 15;
      break;
    } else {
      var $bitbuf_5 = $bitbuf_323;
      label = 16;
      break;
    }
   case 15:
    var $shl = $bitbuf_323 << 8;
    var $13 = HEAP32[5264116 >> 2];
    var $call43 = _fgetc($13);
    var $add = $call43 + $shl | 0;
    var $shl_1 = $add << 8;
    var $14 = HEAP32[5264116 >> 2];
    var $call43_1 = _fgetc($14);
    var $add_1 = $call43_1 + $shl_1 | 0;
    var $shl_2 = $add_1 << 8;
    var $15 = HEAP32[5264116 >> 2];
    var $call43_2 = _fgetc($15);
    var $add_2 = $call43_2 + $shl_2 | 0;
    var $shl_3 = $add_2 << 8;
    var $16 = HEAP32[5264116 >> 2];
    var $call43_3 = _fgetc($16);
    var $add_3 = $call43_3 + $shl_3 | 0;
    var $bitbuf_5 = $add_3;
    label = 16;
    break;
   case 16:
    var $bitbuf_5;
    var $shr = $bitbuf_5 >>> ($and >>> 0);
    var $and48 = $shr & 1;
    var $arrayidx50 = $dindex_025 + ($and48 << 2) | 0;
    var $17 = HEAP32[$arrayidx50 >> 2];
    var $arrayidx = $17 | 0;
    var $18 = HEAP32[$arrayidx >> 2];
    var $tobool34 = ($18 | 0) == 0;
    if ($tobool34) {
      var $bitbuf_3_lcssa = $bitbuf_5;
      var $bit_3_lcssa = $and;
      var $dindex_0_lcssa = $17;
      label = 17;
      break;
    } else {
      var $bitbuf_323 = $bitbuf_5;
      var $bit_324 = $and;
      var $dindex_025 = $17;
      label = 14;
      break;
    }
   case 17:
    var $dindex_0_lcssa;
    var $bit_3_lcssa;
    var $bitbuf_3_lcssa;
    var $leaf = $dindex_0_lcssa + 8 | 0;
    var $19 = HEAP32[$leaf >> 2];
    var $arrayidx52 = $pred + ($c_030 << 1) | 0;
    var $20 = HEAP16[$arrayidx52 >> 1];
    var $conv5319 = $20 & 65535;
    var $add54 = $conv5319 + $19 | 0;
    var $conv55 = $add54 & 65535;
    HEAP16[$arrayidx52 >> 1] = $conv55;
    var $sext = $add54 << 16;
    var $conv57 = $sext >> 16;
    var $21 = HEAP32[5262952 >> 2];
    var $call58 = _fputc($conv57, $21);
    var $inc60 = $c_030 + 1 | 0;
    var $exitcond = ($inc60 | 0) == 3;
    if ($exitcond) {
      label = 18;
      break;
    } else {
      var $bitbuf_228 = $bitbuf_3_lcssa;
      var $bit_229 = $bit_3_lcssa;
      var $c_030 = $inc60;
      label = 13;
      break;
    }
   case 18:
    var $inc63 = $col_033 + 1 | 0;
    var $22 = HEAP16[5244040 >> 1];
    var $conv25 = $22 & 65535;
    var $cmp26 = $inc63 >>> 0 < $conv25 >>> 0;
    if ($cmp26) {
      var $col_033 = $inc63;
      var $bitbuf_134 = $bitbuf_3_lcssa;
      var $bit_135 = $bit_3_lcssa;
      label = 12;
      break;
    } else {
      var $bitbuf_1_lcssa = $bitbuf_3_lcssa;
      var $bit_1_lcssa = $bit_3_lcssa;
      label = 19;
      break;
    }
   case 19:
    var $bit_1_lcssa;
    var $bitbuf_1_lcssa;
    var $inc66 = $row_142 + 1 | 0;
    var $23 = HEAP16[5244060 >> 1];
    var $conv17 = $23 & 65535;
    var $cmp18 = $inc66 >>> 0 < $conv17 >>> 0;
    if ($cmp18) {
      var $bitbuf_040 = $bitbuf_1_lcssa;
      var $bit_041 = $bit_1_lcssa;
      var $row_142 = $inc66;
      label = 9;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    STACKTOP = __stackBase__;
    return;
  }
}
_foveon_thumb["X"] = 1;
function _foveon_decoder($size, $code) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $cmp20 = ($size | 0) == 0;
    var $code_tr = $code;
    label = 3;
    break;
   case 3:
    var $code_tr;
    var $tobool = ($code_tr | 0) != 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    var $_pre = HEAP32[5398908 >> 2];
    var $0 = $_pre;
    label = 8;
    break;
   case 5:
    if ($cmp20) {
      label = 7;
      break;
    } else {
      var $i_021 = 0;
      label = 6;
      break;
    }
   case 6:
    var $i_021;
    var $call = _get4();
    var $arrayidx = 5398944 + ($i_021 << 2) | 0;
    HEAP32[$arrayidx >> 2] = $call;
    var $inc = $i_021 + 1 | 0;
    var $exitcond = ($inc | 0) == ($size | 0);
    if ($exitcond) {
      label = 7;
      break;
    } else {
      var $i_021 = $inc;
      label = 6;
      break;
    }
   case 7:
    for (var $$dest = 5403056 >> 2, $$stop = $$dest + 6144; $$dest < $$stop; $$dest++) {
      HEAP32[$$dest] = 0;
    }
    HEAP32[5398908 >> 2] = 5403056;
    var $0 = 5403056;
    label = 8;
    break;
   case 8:
    var $0;
    var $incdec_ptr = $0 + 12 | 0;
    HEAP32[5398908 >> 2] = $incdec_ptr;
    var $cmp1 = $incdec_ptr >>> 0 > 5427632 >>> 0;
    if ($cmp1) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    var $1 = HEAP32[_stderr >> 2];
    var $2 = HEAP32[5264120 >> 2];
    var $call3 = _fprintf($1, 5585292, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $2, tempInt));
    _longjmp(5427928, 2);
   case 10:
    if ($tobool) {
      var $i_1 = 0;
      label = 11;
      break;
    } else {
      label = 15;
      break;
    }
   case 11:
    var $i_1;
    var $cmp8 = $i_1 >>> 0 < $size >>> 0;
    if ($cmp8) {
      label = 12;
      break;
    } else {
      label = 14;
      break;
    }
   case 12:
    var $arrayidx10 = 5398944 + ($i_1 << 2) | 0;
    var $3 = HEAP32[$arrayidx10 >> 2];
    var $cmp11 = ($3 | 0) == ($code_tr | 0);
    var $inc15 = $i_1 + 1 | 0;
    if ($cmp11) {
      label = 13;
      break;
    } else {
      var $i_1 = $inc15;
      label = 11;
      break;
    }
   case 13:
    var $leaf = $0 + 8 | 0;
    HEAP32[$leaf >> 2] = $i_1;
    label = 16;
    break;
   case 14:
    var $cmp18 = $code_tr >>> 0 > 3623878655;
    if ($cmp18) {
      label = 16;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $shr17 = $code_tr + 134217728 | 0;
    var $shl = $shr17 & -134217728;
    var $and = $code_tr << 1;
    var $shl21 = $and & 134217726;
    var $or = $shl | $shl21;
    var $arrayidx22 = $0 | 0;
    HEAP32[$arrayidx22 >> 2] = $incdec_ptr;
    _foveon_decoder($size, $or);
    var $4 = HEAP32[5398908 >> 2];
    var $arrayidx24 = $0 + 4 | 0;
    HEAP32[$arrayidx24 >> 2] = $4;
    var $add2518 = $or | 1;
    var $code_tr = $add2518;
    label = 3;
    break;
   case 16:
    STACKTOP = __stackBase__;
    return;
  }
}
_foveon_decoder["X"] = 1;
function _foveon_avg($pix, $range_val, $range_1_val, $cfilt) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $cmp18 = ($range_val | 0) > ($range_1_val | 0);
    if ($cmp18) {
      var $min_0_lcssa = 3.4028234663852886e+38;
      var $max_0_lcssa = -3.4028234663852886e+38;
      var $sum_0_lcssa = 0;
      label = 4;
      break;
    } else {
      var $i_019 = $range_val;
      var $min_020 = 3.4028234663852886e+38;
      var $max_021 = -3.4028234663852886e+38;
      var $sum_022 = 0;
      label = 3;
      break;
    }
   case 3:
    var $sum_022;
    var $max_021;
    var $min_020;
    var $i_019;
    var $mul = $i_019 << 2;
    var $arrayidx2 = $pix + ($mul << 1) | 0;
    var $0 = HEAP16[$arrayidx2 >> 1];
    var $conv = $0 << 16 >> 16;
    var $conv3 = $0 << 16 >> 16;
    var $mul7 = $mul - 4 | 0;
    var $arrayidx8 = $pix + ($mul7 << 1) | 0;
    var $1 = HEAP16[$arrayidx8 >> 1];
    var $conv9 = $1 << 16 >> 16;
    var $sub10 = $conv - $conv9 | 0;
    var $conv11 = $sub10 | 0;
    var $mul12 = $conv11 * $cfilt;
    var $add = $conv3 + $mul12;
    var $add13 = $sum_022 + $add;
    var $cmp14 = $min_020 > $add;
    var $min_1 = $cmp14 ? $add : $min_020;
    var $cmp16 = $max_021 < $add;
    var $max_1 = $cmp16 ? $add : $max_021;
    var $inc = $i_019 + 1 | 0;
    var $cmp = ($inc | 0) > ($range_1_val | 0);
    if ($cmp) {
      var $min_0_lcssa = $min_1;
      var $max_0_lcssa = $max_1;
      var $sum_0_lcssa = $add13;
      label = 4;
      break;
    } else {
      var $i_019 = $inc;
      var $min_020 = $min_1;
      var $max_021 = $max_1;
      var $sum_022 = $add13;
      label = 3;
      break;
    }
   case 4:
    var $sum_0_lcssa;
    var $max_0_lcssa;
    var $min_0_lcssa;
    var $sub22 = $range_1_val - $range_val | 0;
    var $cmp23 = ($sub22 | 0) == 1;
    if ($cmp23) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    var $div = $sum_0_lcssa * .5;
    var $retval_0 = $div;
    label = 7;
    break;
   case 6:
    var $sub27 = $sum_0_lcssa - $min_0_lcssa;
    var $sub28 = $sub27 - $max_0_lcssa;
    var $sub32 = $sub22 - 1 | 0;
    var $conv33 = $sub32 | 0;
    var $div34 = $sub28 / $conv33;
    var $retval_0 = $div34;
    label = 7;
    break;
   case 7:
    var $retval_0;
    return $retval_0;
  }
}
function _foveon_sd_load_raw() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 2060 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $diff = __stackBase__;
    var $pred = __stackBase__ + 2048;
    var $arraydecay = $diff | 0;
    _read_shorts($arraydecay, 1024);
    var $0 = HEAP32[5263696 >> 2];
    var $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _foveon_decoder(1024, 0);
    label = 4;
    break;
   case 4:
    var $1 = HEAP16[5398712 >> 1];
    var $cmp46 = $1 << 16 >> 16 == 0;
    if ($cmp46) {
      label = 22;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $2 = $pred;
    var $arrayidx73 = $pred | 0;
    var $arrayidx73_1 = $pred + 4 | 0;
    var $arrayidx73_2 = $pred + 8 | 0;
    var $bitbuf_047 = 0;
    var $row_048 = 0;
    var $bit_050 = -1;
    label = 6;
    break;
   case 6:
    var $bit_050;
    var $row_048;
    var $bitbuf_047;
    HEAP32[$2 >> 2] = 0;
    HEAP32[$2 + 4 >> 2] = 0;
    HEAP32[$2 + 8 >> 2] = 0;
    var $3 = HEAP32[5263696 >> 2];
    var $4 = $3 | $bit_050;
    var $5 = ($4 | 0) == 0;
    if ($5) {
      label = 7;
      break;
    } else {
      label = 9;
      break;
    }
   case 7:
    var $call = _atoi(5263374);
    var $cmp5 = ($call | 0) < 14;
    if ($cmp5) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    var $call8 = _get4();
    label = 9;
    break;
   case 9:
    var $6 = HEAP16[5242964 >> 1];
    var $cmp1239 = $6 << 16 >> 16 == 0;
    if ($cmp1239) {
      var $bitbuf_1_lcssa = $bitbuf_047;
      var $bit_1_lcssa = 0;
      label = 21;
      break;
    } else {
      var $bitbuf_140 = $bitbuf_047;
      var $col_041 = 0;
      var $bit_142 = 0;
      var $9 = 0;
      var $8 = 0;
      var $7 = 0;
      label = 10;
      break;
    }
   case 10:
    var $7;
    var $8;
    var $9;
    var $bit_142;
    var $col_041;
    var $bitbuf_140;
    var $10 = HEAP32[5263696 >> 2];
    var $tobool15 = ($10 | 0) == 0;
    if ($tobool15) {
      var $bitbuf_234 = $bitbuf_140;
      var $bit_235 = $bit_142;
      var $c_136 = 0;
      label = 12;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $call17 = _get4();
    var $and = $call17 & 1023;
    var $arrayidx = $diff + ($and << 1) | 0;
    var $11 = HEAP16[$arrayidx >> 1];
    var $conv22 = $11 << 16 >> 16;
    var $add = $9 + $conv22 | 0;
    HEAP32[$arrayidx73_2 >> 2] = $add;
    var $shr_1 = $call17 >>> 10;
    var $and_1 = $shr_1 & 1023;
    var $arrayidx_1 = $diff + ($and_1 << 1) | 0;
    var $12 = HEAP16[$arrayidx_1 >> 1];
    var $conv22_1 = $12 << 16 >> 16;
    var $add_1 = $8 + $conv22_1 | 0;
    HEAP32[$arrayidx73_1 >> 2] = $add_1;
    var $shr_2 = $call17 >>> 20;
    var $and_2 = $shr_2 & 1023;
    var $arrayidx_2 = $diff + ($and_2 << 1) | 0;
    var $13 = HEAP16[$arrayidx_2 >> 1];
    var $conv22_2 = $13 << 16 >> 16;
    var $add_2 = $7 + $conv22_2 | 0;
    HEAP32[$arrayidx73 >> 2] = $add_2;
    var $bit_4 = $bit_142;
    var $bitbuf_6 = $call17;
    var $26 = $add_2;
    var $25 = $add_1;
    var $24 = $add;
    label = 20;
    break;
   case 12:
    var $c_136;
    var $bit_235;
    var $bitbuf_234;
    var $14 = HEAP32[5403056 >> 2];
    var $tobool3027 = ($14 | 0) == 0;
    if ($tobool3027) {
      var $dindex_0_lcssa = 5403056;
      var $bitbuf_3_lcssa = $bitbuf_234;
      var $bit_3_lcssa = $bit_235;
      label = 16;
      break;
    } else {
      var $dindex_028 = 5403056;
      var $bitbuf_329 = $bitbuf_234;
      var $bit_330 = $bit_235;
      label = 13;
      break;
    }
   case 13:
    var $bit_330;
    var $bitbuf_329;
    var $dindex_028;
    var $sub32 = $bit_330 + 31 | 0;
    var $and33 = $sub32 & 31;
    var $cmp34 = ($and33 | 0) == 31;
    if ($cmp34) {
      label = 14;
      break;
    } else {
      var $bitbuf_5 = $bitbuf_329;
      label = 15;
      break;
    }
   case 14:
    var $shl = $bitbuf_329 << 8;
    var $15 = HEAP32[5264116 >> 2];
    var $call41 = _fgetc($15);
    var $add42 = $call41 + $shl | 0;
    var $shl_1 = $add42 << 8;
    var $16 = HEAP32[5264116 >> 2];
    var $call41_1 = _fgetc($16);
    var $add42_1 = $call41_1 + $shl_1 | 0;
    var $shl_2 = $add42_1 << 8;
    var $17 = HEAP32[5264116 >> 2];
    var $call41_2 = _fgetc($17);
    var $add42_2 = $call41_2 + $shl_2 | 0;
    var $shl_3 = $add42_2 << 8;
    var $18 = HEAP32[5264116 >> 2];
    var $call41_3 = _fgetc($18);
    var $add42_3 = $call41_3 + $shl_3 | 0;
    var $bitbuf_5 = $add42_3;
    label = 15;
    break;
   case 15:
    var $bitbuf_5;
    var $shr47 = $bitbuf_5 >>> ($and33 >>> 0);
    var $and48 = $shr47 & 1;
    var $arrayidx50 = $dindex_028 + ($and48 << 2) | 0;
    var $19 = HEAP32[$arrayidx50 >> 2];
    var $arrayidx29 = $19 | 0;
    var $20 = HEAP32[$arrayidx29 >> 2];
    var $tobool30 = ($20 | 0) == 0;
    if ($tobool30) {
      var $dindex_0_lcssa = $19;
      var $bitbuf_3_lcssa = $bitbuf_5;
      var $bit_3_lcssa = $and33;
      label = 16;
      break;
    } else {
      var $dindex_028 = $19;
      var $bitbuf_329 = $bitbuf_5;
      var $bit_330 = $and33;
      label = 13;
      break;
    }
   case 16:
    var $bit_3_lcssa;
    var $bitbuf_3_lcssa;
    var $dindex_0_lcssa;
    var $leaf = $dindex_0_lcssa + 8 | 0;
    var $21 = HEAP32[$leaf >> 2];
    var $arrayidx52 = $diff + ($21 << 1) | 0;
    var $22 = HEAP16[$arrayidx52 >> 1];
    var $conv53 = $22 << 16 >> 16;
    var $arrayidx54 = $pred + ($c_136 << 2) | 0;
    var $23 = HEAP32[$arrayidx54 >> 2];
    var $add55 = $23 + $conv53 | 0;
    HEAP32[$arrayidx54 >> 2] = $add55;
    var $tobool58 = $add55 >>> 0 > 65535;
    var $neg = $add55 ^ -65536;
    var $tobool62 = $neg >>> 0 > 65535;
    var $or_cond = $tobool58 & $tobool62;
    if ($or_cond) {
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 17:
    _derror();
    label = 18;
    break;
   case 18:
    var $inc66 = $c_136 + 1 | 0;
    var $exitcond = ($inc66 | 0) == 3;
    if ($exitcond) {
      label = 19;
      break;
    } else {
      var $bitbuf_234 = $bitbuf_3_lcssa;
      var $bit_235 = $bit_3_lcssa;
      var $c_136 = $inc66;
      label = 12;
      break;
    }
   case 19:
    var $_pre = HEAP32[$arrayidx73 >> 2];
    var $_pre1 = HEAP32[$arrayidx73_1 >> 2];
    var $_pre2 = HEAP32[$arrayidx73_2 >> 2];
    var $bit_4 = $bit_3_lcssa;
    var $bitbuf_6 = $bitbuf_3_lcssa;
    var $26 = $_pre;
    var $25 = $_pre1;
    var $24 = $_pre2;
    label = 20;
    break;
   case 20:
    var $24;
    var $25;
    var $26;
    var $bitbuf_6;
    var $bit_4;
    var $conv74 = $26 & 65535;
    var $27 = HEAP16[5242964 >> 1];
    var $conv75 = $27 & 65535;
    var $mul76 = $conv75 * $row_048 & -1;
    var $add77 = $mul76 + $col_041 | 0;
    var $28 = HEAP32[5264108 >> 2];
    var $arrayidx79 = $28 + ($add77 << 3) | 0;
    HEAP16[$arrayidx79 >> 1] = $conv74;
    var $conv74_1 = $25 & 65535;
    var $arrayidx79_1 = $28 + ($add77 << 3) + 2 | 0;
    HEAP16[$arrayidx79_1 >> 1] = $conv74_1;
    var $conv74_2 = $24 & 65535;
    var $arrayidx79_2 = $28 + ($add77 << 3) + 4 | 0;
    HEAP16[$arrayidx79_2 >> 1] = $conv74_2;
    var $inc84 = $col_041 + 1 | 0;
    var $cmp12 = ($inc84 | 0) < ($conv75 | 0);
    if ($cmp12) {
      var $bitbuf_140 = $bitbuf_6;
      var $col_041 = $inc84;
      var $bit_142 = $bit_4;
      var $9 = $24;
      var $8 = $25;
      var $7 = $26;
      label = 10;
      break;
    } else {
      var $bitbuf_1_lcssa = $bitbuf_6;
      var $bit_1_lcssa = $bit_4;
      label = 21;
      break;
    }
   case 21:
    var $bit_1_lcssa;
    var $bitbuf_1_lcssa;
    var $inc87 = $row_048 + 1 | 0;
    var $29 = HEAP16[5398712 >> 1];
    var $conv = $29 & 65535;
    var $cmp = ($inc87 | 0) < ($conv | 0);
    if ($cmp) {
      var $bitbuf_047 = $bitbuf_1_lcssa;
      var $row_048 = $inc87;
      var $bit_050 = $bit_1_lcssa;
      label = 6;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    STACKTOP = __stackBase__;
    return;
  }
}
_foveon_sd_load_raw["X"] = 1;
function _foveon_huff($huff) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    HEAP16[$huff >> 1] = 8;
    var $i_08 = 0;
    label = 3;
    break;
   case 3:
    var $i_08;
    var $0 = HEAP32[5264116 >> 2];
    var $call = _fgetc($0);
    var $1 = HEAP32[5264116 >> 2];
    var $call1 = _fgetc($1);
    var $shr = 256 >>> ($call >>> 0);
    var $cmp36 = ($shr | 0) > 0;
    if ($cmp36) {
      label = 4;
      break;
    } else {
      label = 6;
      break;
    }
   case 4:
    var $shl = $call << 8;
    var $or = $shl | $i_08;
    var $conv = $or & 65535;
    var $j_07 = 0;
    label = 5;
    break;
   case 5:
    var $j_07;
    var $inc = $j_07 + 1 | 0;
    var $add = $inc + $call1 | 0;
    var $arrayidx5 = $huff + ($add << 1) | 0;
    HEAP16[$arrayidx5 >> 1] = $conv;
    var $exitcond = ($inc | 0) == ($shr | 0);
    if ($exitcond) {
      label = 6;
      break;
    } else {
      var $j_07 = $inc;
      label = 5;
      break;
    }
   case 6:
    var $inc6 = $i_08 + 1 | 0;
    var $exitcond9 = ($inc6 | 0) == 13;
    if ($exitcond9) {
      label = 7;
      break;
    } else {
      var $i_08 = $inc6;
      label = 3;
      break;
    }
   case 7:
    var $call8 = _get2();
    return;
  }
}
function _foveon_dp_load_raw() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 544 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $roff = __stackBase__;
    var $huff = __stackBase__ + 16;
    var $vpred = __stackBase__ + 532;
    var $hpred = __stackBase__ + 540;
    var $0 = HEAP32[5264116 >> 2];
    var $call = _fseek($0, 8, 1);
    var $arraydecay = $huff | 0;
    _foveon_huff($arraydecay);
    var $arrayidx = $roff | 0;
    HEAP32[$arrayidx >> 2] = 48;
    var $call2 = _get4();
    var $sub = -48 - $call2 | 0;
    var $and = $sub & -16;
    var $sub3 = -$and | 0;
    var $arrayidx5 = $roff + 4 | 0;
    HEAP32[$arrayidx5 >> 2] = $sub3;
    var $call2_1 = _get4();
    var $add_127 = $and - $call2_1 | 0;
    var $and_1 = $add_127 & -16;
    var $sub3_1 = -$and_1 | 0;
    var $arrayidx5_1 = $roff + 8 | 0;
    HEAP32[$arrayidx5_1 >> 2] = $sub3_1;
    var $call2_2 = _get4();
    var $add_228 = $and_1 - $call2_2 | 0;
    var $and_2 = $add_228 & -16;
    var $sub3_2 = -$and_2 | 0;
    var $arrayidx5_2 = $roff + 12 | 0;
    HEAP32[$arrayidx5_2 >> 2] = $sub3_2;
    var $arrayidx14 = $vpred + 6 | 0;
    var $arrayidx16 = $vpred + 4 | 0;
    var $arrayidx18 = $vpred + 2 | 0;
    var $arrayidx20 = $vpred | 0;
    var $c_124 = 0;
    var $1 = 48;
    label = 3;
    break;
   case 3:
    var $1;
    var $c_124;
    var $2 = HEAP32[5264116 >> 2];
    var $3 = HEAP32[5428492 >> 2];
    var $add10 = $1 + $3 | 0;
    var $call11 = _fseek($2, $add10, 0);
    var $call12 = _getbithuff(-1, 0);
    HEAP16[$arrayidx14 >> 1] = 512;
    HEAP16[$arrayidx16 >> 1] = 512;
    HEAP16[$arrayidx18 >> 1] = 512;
    HEAP16[$arrayidx20 >> 1] = 512;
    var $4 = HEAP16[5398712 >> 1];
    var $cmp2221 = $4 << 16 >> 16 == 0;
    if ($cmp2221) {
      label = 13;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $_pre = HEAP16[5242964 >> 1];
    var $row_022 = 0;
    var $6 = $_pre;
    var $5 = $4;
    label = 5;
    break;
   case 5:
    var $5;
    var $6;
    var $row_022;
    var $cmp2718 = $6 << 16 >> 16 == 0;
    if ($cmp2718) {
      var $13 = 0;
      var $12 = $5;
      label = 12;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $and34 = $row_022 & 1;
    var $col_019 = 0;
    label = 7;
    break;
   case 7:
    var $col_019;
    var $call31 = _ljpeg_diff($arraydecay);
    var $cmp32 = $col_019 >>> 0 < 2;
    if ($cmp32) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    var $arrayidx36 = $vpred + ($and34 << 2) + ($col_019 << 1) | 0;
    var $7 = HEAP16[$arrayidx36 >> 1];
    var $conv37 = $7 & 65535;
    var $add38 = $conv37 + $call31 | 0;
    var $conv39 = $add38 & 65535;
    HEAP16[$arrayidx36 >> 1] = $conv39;
    var $arrayidx40 = $hpred + ($col_019 << 1) | 0;
    HEAP16[$arrayidx40 >> 1] = $conv39;
    var $and46_pre = $col_019 & 1;
    var $arrayidx47_pre = $hpred + ($and46_pre << 1) | 0;
    var $arrayidx47_pre_phi = $arrayidx47_pre;
    label = 10;
    break;
   case 9:
    var $and41 = $col_019 & 1;
    var $arrayidx42 = $hpred + ($and41 << 1) | 0;
    var $8 = HEAP16[$arrayidx42 >> 1];
    var $conv43 = $8 & 65535;
    var $add44 = $conv43 + $call31 | 0;
    var $conv45 = $add44 & 65535;
    HEAP16[$arrayidx42 >> 1] = $conv45;
    var $arrayidx47_pre_phi = $arrayidx42;
    label = 10;
    break;
   case 10:
    var $arrayidx47_pre_phi;
    var $9 = HEAP16[$arrayidx47_pre_phi >> 1];
    var $10 = HEAP16[5242964 >> 1];
    var $conv48 = $10 & 65535;
    var $mul = $conv48 * $row_022 & -1;
    var $add49 = $mul + $col_019 | 0;
    var $11 = HEAP32[5264108 >> 2];
    var $arrayidx51 = $11 + ($add49 << 3) + ($c_124 << 1) | 0;
    HEAP16[$arrayidx51 >> 1] = $9;
    var $inc53 = $col_019 + 1 | 0;
    var $cmp27 = $inc53 >>> 0 < $conv48 >>> 0;
    if ($cmp27) {
      var $col_019 = $inc53;
      label = 7;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $_pre1 = HEAP16[5398712 >> 1];
    var $13 = $10;
    var $12 = $_pre1;
    label = 12;
    break;
   case 12:
    var $12;
    var $13;
    var $inc56 = $row_022 + 1 | 0;
    var $conv = $12 & 65535;
    var $cmp22 = $inc56 >>> 0 < $conv >>> 0;
    if ($cmp22) {
      var $row_022 = $inc56;
      var $6 = $13;
      var $5 = $12;
      label = 5;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $inc59 = $c_124 + 1 | 0;
    var $exitcond = ($inc59 | 0) == 3;
    if ($exitcond) {
      label = 15;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $arrayidx9_phi_trans_insert = $roff + ($inc59 << 2) | 0;
    var $_pre2 = HEAP32[$arrayidx9_phi_trans_insert >> 2];
    var $c_124 = $inc59;
    var $1 = $_pre2;
    label = 3;
    break;
   case 15:
    STACKTOP = __stackBase__;
    return;
  }
}
_foveon_dp_load_raw["X"] = 1;
function _foveon_load_camf() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 524 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $huff = __stackBase__;
    var $vpred = __stackBase__ + 516;
    var $tmpcast = $vpred;
    var $hpred = STACKTOP;
    STACKTOP = STACKTOP + 4 | 0;
    var $$etemp$0$0 = 33554944;
    var $$etemp$0$1 = 33554944;
    var $st$6$0 = $vpred | 0;
    HEAP32[$st$6$0 >> 2] = $$etemp$0$0;
    var $st$6$1 = $vpred + 4 | 0;
    HEAP32[$st$6$1 >> 2] = $$etemp$0$1;
    var $0 = HEAP32[5264116 >> 2];
    var $1 = HEAP32[5263440 >> 2];
    var $call = _fseek($0, $1, 0);
    var $call1 = _get4();
    var $call2 = _get4();
    var $call3 = _get4();
    var $call4 = _get4();
    var $call5 = _get4();
    if (($call1 | 0) == 2) {
      label = 3;
      break;
    } else if (($call1 | 0) == 4) {
      label = 6;
      break;
    } else {
      label = 17;
      break;
    }
   case 3:
    var $2 = HEAP32[5263448 >> 2];
    var $3 = HEAP32[5263444 >> 2];
    var $4 = HEAP32[5264116 >> 2];
    var $call6 = _fread($2, 1, $3, $4);
    var $5 = HEAP32[5263444 >> 2];
    var $cmp725 = ($5 | 0) == 0;
    if ($cmp725) {
      label = 18;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $_pre = HEAP32[5263448 >> 2];
    var $high_026 = $call5;
    var $i_027 = 0;
    label = 5;
    break;
   case 5:
    var $i_027;
    var $high_026;
    var $mul = $high_026 * 1597 & -1;
    var $add = $mul + 51749 | 0;
    var $rem = ($add >>> 0) % 244944;
    var $conv$0 = $rem;
    var $conv$1 = 0;
    var $$etemp$1$0 = 301593171;
    var $$etemp$1$1 = 0;
    var $mul8$0 = (i64Math.multiply($conv$0, $conv$1, $$etemp$1$0, $$etemp$1$1), HEAP32[tempDoublePtr >> 2]);
    var $mul8$1 = HEAP32[tempDoublePtr + 4 >> 2];
    var $shr23$0 = $mul8$0 >>> 24 | $mul8$1 << 8;
    var $conv9$0 = $shr23$0;
    var $conv9 = $conv9$0;
    var $shl = $rem << 8;
    var $sub = $shl - $conv9 | 0;
    var $shr10 = $sub >>> 1;
    var $add11 = $shr10 + $conv9 | 0;
    var $shr12 = $add11 >>> 17;
    var $arrayidx = $_pre + $i_027 | 0;
    var $6 = HEAP8[$arrayidx];
    var $conv1324 = $6 & 255;
    var $xor = $shr12 ^ $conv1324;
    var $conv14 = $xor & 255;
    HEAP8[$arrayidx] = $conv14;
    var $inc = $i_027 + 1 | 0;
    var $cmp7 = $inc >>> 0 < $5 >>> 0;
    if ($cmp7) {
      var $high_026 = $rem;
      var $i_027 = $inc;
      label = 5;
      break;
    } else {
      label = 18;
      break;
    }
   case 6:
    var $7 = HEAP32[5263448 >> 2];
    _free($7);
    var $mul18 = $call4 * 3 & -1;
    var $mul19 = $mul18 * $call5 & -1;
    var $div = $mul19 >>> 1;
    HEAP32[5263444 >> 2] = $div;
    var $call20 = _malloc($div);
    HEAP32[5263448 >> 2] = $call20;
    _merror($call20, 5584852);
    var $arraydecay = $huff | 0;
    _foveon_huff($arraydecay);
    var $call21 = _get4();
    var $call22 = _getbithuff(-1, 0);
    var $cmp2432 = ($call5 | 0) == 0;
    if ($cmp2432) {
      label = 18;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $cmp2828 = ($call4 | 0) == 0;
    var $arrayidx50 = $hpred | 0;
    var $arrayidx59 = $hpred + 2 | 0;
    var $j_033 = 0;
    var $row_034 = 0;
    label = 8;
    break;
   case 8:
    var $row_034;
    var $j_033;
    if ($cmp2828) {
      var $j_1_lcssa = $j_033;
      label = 16;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $and = $row_034 & 1;
    var $j_129 = $j_033;
    var $col_030 = 0;
    label = 10;
    break;
   case 10:
    var $col_030;
    var $j_129;
    var $call32 = _ljpeg_diff($arraydecay);
    var $cmp33 = $col_030 >>> 0 < 2;
    if ($cmp33) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    var $arrayidx37 = $tmpcast + ($and << 2) + ($col_030 << 1) | 0;
    var $8 = HEAP16[$arrayidx37 >> 1];
    var $conv38 = $8 & 65535;
    var $add39 = $conv38 + $call32 | 0;
    var $conv40 = $add39 & 65535;
    HEAP16[$arrayidx37 >> 1] = $conv40;
    var $arrayidx41 = $hpred + ($col_030 << 1) | 0;
    HEAP16[$arrayidx41 >> 1] = $conv40;
    var $and48_pre = $col_030 & 1;
    var $and48_pre_phi = $and48_pre;
    label = 13;
    break;
   case 12:
    var $and43 = $col_030 & 1;
    var $arrayidx44 = $hpred + ($and43 << 1) | 0;
    var $9 = HEAP16[$arrayidx44 >> 1];
    var $conv45 = $9 & 65535;
    var $add46 = $conv45 + $call32 | 0;
    var $conv47 = $add46 & 65535;
    HEAP16[$arrayidx44 >> 1] = $conv47;
    var $and48_pre_phi = $and43;
    label = 13;
    break;
   case 13:
    var $and48_pre_phi;
    var $tobool = ($and48_pre_phi | 0) == 0;
    if ($tobool) {
      var $j_2 = $j_129;
      label = 15;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $10 = HEAP16[$arrayidx50 >> 1];
    var $shr5221 = ($10 & 65535) >>> 4;
    var $conv53 = $shr5221 & 255;
    var $inc54 = $j_129 + 1 | 0;
    var $11 = HEAP32[5263448 >> 2];
    var $arrayidx55 = $11 + $j_129 | 0;
    HEAP8[$arrayidx55] = $conv53;
    var $conv57 = $10 & 65535;
    var $shl58 = $conv57 << 4;
    var $12 = HEAP16[$arrayidx59 >> 1];
    var $conv60 = $12 & 65535;
    var $shr6122 = $conv60 >>> 8;
    var $or = $shr6122 | $shl58;
    var $conv62 = $or & 255;
    var $inc63 = $j_129 + 2 | 0;
    var $arrayidx64 = $11 + $inc54 | 0;
    HEAP8[$arrayidx64] = $conv62;
    var $conv66 = $12 & 255;
    var $inc67 = $j_129 + 3 | 0;
    var $arrayidx68 = $11 + $inc63 | 0;
    HEAP8[$arrayidx68] = $conv66;
    var $j_2 = $inc67;
    label = 15;
    break;
   case 15:
    var $j_2;
    var $inc71 = $col_030 + 1 | 0;
    var $exitcond = ($inc71 | 0) == ($call4 | 0);
    if ($exitcond) {
      var $j_1_lcssa = $j_2;
      label = 16;
      break;
    } else {
      var $j_129 = $j_2;
      var $col_030 = $inc71;
      label = 10;
      break;
    }
   case 16:
    var $j_1_lcssa;
    var $inc74 = $row_034 + 1 | 0;
    var $exitcond35 = ($inc74 | 0) == ($call5 | 0);
    if ($exitcond35) {
      label = 18;
      break;
    } else {
      var $j_033 = $j_1_lcssa;
      var $row_034 = $inc74;
      label = 8;
      break;
    }
   case 17:
    var $13 = HEAP32[_stderr >> 2];
    var $14 = HEAP32[5264120 >> 2];
    var $call77 = _fprintf($13, 5584608, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $14, HEAP32[tempInt + 4 >> 2] = $call1, tempInt));
    label = 18;
    break;
   case 18:
    STACKTOP = __stackBase__;
    return;
  }
}
_foveon_load_camf["X"] = 1;
function _foveon_camf_param($block, $param) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5263444 >> 2];
    var $cmp23 = ($0 | 0) == 0;
    if ($cmp23) {
      var $retval_0 = 0;
      label = 12;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $1 = HEAP32[5263448 >> 2];
    var $idx_024 = 0;
    label = 4;
    break;
   case 4:
    var $idx_024;
    var $add_ptr = $1 + $idx_024 | 0;
    var $call = _strncmp($add_ptr, 5584376, 3);
    var $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      var $retval_0 = 0;
      label = 12;
      break;
    }
   case 5:
    var $add_ptr_sum = $idx_024 + 3 | 0;
    var $arrayidx = $1 + $add_ptr_sum | 0;
    var $2 = HEAP8[$arrayidx];
    var $cmp1 = $2 << 24 >> 24 == 80;
    if ($cmp1) {
      label = 6;
      break;
    } else {
      label = 11;
      break;
    }
   case 6:
    var $add_ptr_sum15 = $idx_024 + 12 | 0;
    var $add_ptr5 = $1 + $add_ptr_sum15 | 0;
    var $call6 = _sget4($add_ptr5);
    var $add_ptr_sum16 = $call6 + $idx_024 | 0;
    var $add_ptr7 = $1 + $add_ptr_sum16 | 0;
    var $call8 = _strcmp($block, $add_ptr7);
    var $tobool9 = ($call8 | 0) == 0;
    if ($tobool9) {
      label = 7;
      break;
    } else {
      label = 11;
      break;
    }
   case 7:
    var $add_ptr_sum17 = $idx_024 + 16 | 0;
    var $add_ptr12 = $1 + $add_ptr_sum17 | 0;
    var $call13 = _sget4($add_ptr12);
    var $add_ptr_sum18 = $call13 + $idx_024 | 0;
    var $add_ptr14 = $1 + $add_ptr_sum18 | 0;
    var $call15 = _sget4($add_ptr14);
    var $add_ptr14_sum = $add_ptr_sum18 + 4 | 0;
    var $add_ptr16 = $1 + $add_ptr14_sum | 0;
    var $call17 = _sget4($add_ptr16);
    var $add_ptr_sum19 = $call17 + $idx_024 | 0;
    var $cp_0 = $add_ptr14;
    var $num_0 = $call15;
    label = 8;
    break;
   case 8:
    var $num_0;
    var $cp_0;
    var $tobool19 = ($num_0 | 0) == 0;
    if ($tobool19) {
      label = 11;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $dec = $num_0 - 1 | 0;
    var $add_ptr20 = $cp_0 + 8 | 0;
    var $call21 = _sget4($add_ptr20);
    var $add_ptr18_sum = $call21 + $add_ptr_sum19 | 0;
    var $add_ptr22 = $1 + $add_ptr18_sum | 0;
    var $call23 = _strcmp($param, $add_ptr22);
    var $tobool24 = ($call23 | 0) == 0;
    if ($tobool24) {
      label = 10;
      break;
    } else {
      var $cp_0 = $add_ptr20;
      var $num_0 = $dec;
      label = 8;
      break;
    }
   case 10:
    var $add_ptr26 = $cp_0 + 12 | 0;
    var $call27 = _sget4($add_ptr26);
    var $add_ptr18_sum21 = $call27 + $add_ptr_sum19 | 0;
    var $add_ptr28 = $1 + $add_ptr18_sum21 | 0;
    var $retval_0 = $add_ptr28;
    label = 12;
    break;
   case 11:
    var $add_ptr_sum20 = $idx_024 + 8 | 0;
    var $add_ptr30 = $1 + $add_ptr_sum20 | 0;
    var $call31 = _sget4($add_ptr30);
    var $add = $call31 + $idx_024 | 0;
    var $cmp = $add >>> 0 < $0 >>> 0;
    if ($cmp) {
      var $idx_024 = $add;
      label = 4;
      break;
    } else {
      var $retval_0 = 0;
      label = 12;
      break;
    }
   case 12:
    var $retval_0;
    return $retval_0;
  }
}
_foveon_camf_param["X"] = 1;
function _foveon_camf_matrix($dim, $name) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5263444 >> 2];
    var $cmp47 = ($0 | 0) == 0;
    if ($cmp47) {
      label = 18;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $1 = HEAP32[5263448 >> 2];
    var $idx_048 = 0;
    label = 4;
    break;
   case 4:
    var $idx_048;
    var $add_ptr = $1 + $idx_048 | 0;
    var $call = _strncmp($add_ptr, 5584376, 3);
    var $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      label = 18;
      break;
    }
   case 5:
    var $add_ptr_sum = $idx_048 + 3 | 0;
    var $arrayidx = $1 + $add_ptr_sum | 0;
    var $2 = HEAP8[$arrayidx];
    var $cmp1 = $2 << 24 >> 24 == 77;
    if ($cmp1) {
      label = 6;
      break;
    } else {
      label = 17;
      break;
    }
   case 6:
    var $add_ptr_sum31 = $idx_048 + 12 | 0;
    var $add_ptr5 = $1 + $add_ptr_sum31 | 0;
    var $call6 = _sget4($add_ptr5);
    var $add_ptr_sum32 = $call6 + $idx_048 | 0;
    var $add_ptr7 = $1 + $add_ptr_sum32 | 0;
    var $call8 = _strcmp($name, $add_ptr7);
    var $tobool9 = ($call8 | 0) == 0;
    if ($tobool9) {
      label = 7;
      break;
    } else {
      label = 17;
      break;
    }
   case 7:
    var $arrayidx12 = $dim + 8 | 0;
    HEAP32[$arrayidx12 >> 2] = 1;
    var $arrayidx13 = $dim + 4 | 0;
    HEAP32[$arrayidx13 >> 2] = 1;
    HEAP32[$dim >> 2] = 1;
    var $add_ptr_sum33 = $idx_048 + 16 | 0;
    var $add_ptr15 = $1 + $add_ptr_sum33 | 0;
    var $call16 = _sget4($add_ptr15);
    var $add_ptr_sum34 = $call16 + $idx_048 | 0;
    var $add_ptr17 = $1 + $add_ptr_sum34 | 0;
    var $call18 = _sget4($add_ptr17);
    var $add_ptr17_sum = $add_ptr_sum34 + 4 | 0;
    var $add_ptr19 = $1 + $add_ptr17_sum | 0;
    var $call20 = _sget4($add_ptr19);
    var $cmp21 = $call20 >>> 0 > 3;
    if ($cmp21) {
      label = 18;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $add_ptr17_sum35 = $add_ptr_sum34 + 8 | 0;
    var $add_ptr25 = $1 + $add_ptr17_sum35 | 0;
    var $call26 = _sget4($add_ptr25);
    var $add_ptr_sum36 = $call26 + $idx_048 | 0;
    var $tobool2943 = ($call20 | 0) == 0;
    if ($tobool2943) {
      var $5 = 1;
      var $4 = 1;
      var $3 = 1;
      label = 11;
      break;
    } else {
      var $cp_044 = $add_ptr17;
      var $dec45_in = $call20;
      label = 9;
      break;
    }
   case 9:
    var $dec45_in;
    var $cp_044;
    var $dec45 = $dec45_in - 1 | 0;
    var $add_ptr31 = $cp_044 + 12 | 0;
    var $call32 = _sget4($add_ptr31);
    var $arrayidx33 = $dim + ($dec45 << 2) | 0;
    HEAP32[$arrayidx33 >> 2] = $call32;
    var $tobool29 = ($dec45 | 0) == 0;
    if ($tobool29) {
      label = 10;
      break;
    } else {
      var $cp_044 = $add_ptr31;
      var $dec45_in = $dec45;
      label = 9;
      break;
    }
   case 10:
    var $_pre = HEAP32[$dim >> 2];
    var $_pre1 = HEAP32[$arrayidx13 >> 2];
    var $_pre2 = HEAP32[$arrayidx12 >> 2];
    var $phitmp = $_pre >>> 0;
    var $phitmp3 = $_pre1 >>> 0;
    var $phitmp4 = $_pre2 >>> 0;
    var $5 = $phitmp;
    var $4 = $phitmp3;
    var $3 = $phitmp4;
    label = 11;
    break;
   case 11:
    var $3;
    var $4;
    var $5;
    var $mul = $5 * $4;
    var $mul40 = $mul * $3;
    var $div = $0 >>> 2;
    var $conv41 = $div >>> 0;
    var $cmp42 = $mul40 > $conv41;
    if ($cmp42) {
      label = 18;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $conv46 = $mul40 >= 0 ? Math.floor($mul40) : Math.ceil($mul40);
    var $mul47 = $conv46 << 2;
    var $call48 = _malloc($mul47);
    var $6 = $call48;
    _merror($call48, 5584104);
    var $cmp5039 = ($conv46 | 0) == 0;
    if ($cmp5039) {
      var $retval_0 = $call48;
      label = 19;
      break;
    } else {
      var $i_140 = 0;
      label = 13;
      break;
    }
   case 13:
    var $i_140;
    if (($call18 | 0) == 6 | ($call18 | 0) == 0) {
      label = 15;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $mul57 = $i_140 << 2;
    var $add_ptr27_sum37 = $mul57 + $add_ptr_sum36 | 0;
    var $add_ptr58 = $1 + $add_ptr27_sum37 | 0;
    var $call59 = _sget4($add_ptr58);
    var $arrayidx60 = $6 + ($i_140 << 2) | 0;
    HEAP32[$arrayidx60 >> 2] = $call59;
    label = 16;
    break;
   case 15:
    var $mul61 = $i_140 << 1;
    var $add_ptr27_sum = $mul61 + $add_ptr_sum36 | 0;
    var $add_ptr62 = $1 + $add_ptr27_sum | 0;
    var $call63 = _sget4($add_ptr62);
    var $and = $call63 & 65535;
    var $arrayidx64 = $6 + ($i_140 << 2) | 0;
    HEAP32[$arrayidx64 >> 2] = $and;
    label = 16;
    break;
   case 16:
    var $inc = $i_140 + 1 | 0;
    var $exitcond = ($inc | 0) == ($conv46 | 0);
    if ($exitcond) {
      var $retval_0 = $call48;
      label = 19;
      break;
    } else {
      var $i_140 = $inc;
      label = 13;
      break;
    }
   case 17:
    var $add_ptr_sum38 = $idx_048 + 8 | 0;
    var $add_ptr68 = $1 + $add_ptr_sum38 | 0;
    var $call69 = _sget4($add_ptr68);
    var $add = $call69 + $idx_048 | 0;
    var $cmp = $add >>> 0 < $0 >>> 0;
    if ($cmp) {
      var $idx_048 = $add;
      label = 4;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    var $7 = HEAP32[_stderr >> 2];
    var $8 = HEAP32[5264120 >> 2];
    var $call71 = _fprintf($7, 5583936, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $8, HEAP32[tempInt + 4 >> 2] = $name, tempInt));
    var $retval_0 = 0;
    label = 19;
    break;
   case 19:
    var $retval_0;
    STACKTOP = __stackBase__;
    return $retval_0;
  }
}
_foveon_camf_matrix["X"] = 1;
function _foveon_fixed($ptr, $size, $name) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $dim = __stackBase__;
    var $tobool = ($name | 0) == 0;
    if ($tobool) {
      var $retval_0 = 0;
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $arraydecay = $dim | 0;
    var $call = _foveon_camf_matrix($arraydecay, $name);
    var $tobool1 = ($call | 0) == 0;
    if ($tobool1) {
      var $retval_0 = 0;
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $mul = $size << 2;
    _memcpy($ptr, $call, $mul);
    _free($call);
    var $retval_0 = 1;
    label = 5;
    break;
   case 5:
    var $retval_0;
    STACKTOP = __stackBase__;
    return $retval_0;
  }
}
function _foveon_apply_curve($curve, $i) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $ispos = ($i | 0) > -1;
    var $neg = -$i | 0;
    var $call = $ispos ? $i : $neg;
    var $0 = HEAP16[$curve >> 1];
    var $conv = $0 << 16 >> 16;
    var $cmp = ($call | 0) < ($conv | 0);
    if ($cmp) {
      label = 3;
      break;
    } else {
      var $retval_0 = 0;
      label = 6;
      break;
    }
   case 3:
    var $cmp2 = ($i | 0) < 0;
    if ($cmp2) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    var $sub = 1 - $i | 0;
    var $arrayidx4 = $curve + ($sub << 1) | 0;
    var $1 = HEAP16[$arrayidx4 >> 1];
    var $conv5 = $1 << 16 >> 16;
    var $sub6 = -$conv5 | 0;
    var $retval_0 = $sub6;
    label = 6;
    break;
   case 5:
    var $add = $i + 1 | 0;
    var $arrayidx7 = $curve + ($add << 1) | 0;
    var $2 = HEAP16[$arrayidx7 >> 1];
    var $conv8 = $2 << 16 >> 16;
    var $retval_0 = $conv8;
    label = 6;
    break;
   case 6:
    var $retval_0;
    return $retval_0;
  }
}
function _foveon_make_curve($max, $mul, $filt) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $tobool = $filt != 0;
    var $filt_addr_0 = $tobool ? $filt : .8;
    var $mul1 = $max * 12.566370614359172;
    var $div = $mul1 / $filt_addr_0;
    var $conv = $div >= 0 ? Math.floor($div) : Math.ceil($div);
    var $cmp = ($conv | 0) == -1;
    var $dec = $cmp << 31 >> 31;
    var $size_0 = $dec + $conv | 0;
    var $add = $size_0 + 1 | 0;
    var $call = _calloc($add, 2);
    var $0 = $call;
    _merror($call, 5583756);
    var $conv5 = $size_0 & 65535;
    HEAP16[$0 >> 1] = $conv5;
    var $cmp617 = ($size_0 | 0) == 0;
    if ($cmp617) {
      label = 4;
      break;
    } else {
      var $i_018 = 0;
      label = 3;
      break;
    }
   case 3:
    var $i_018;
    var $conv8 = $i_018 >>> 0;
    var $mul9 = $filt_addr_0 * $conv8;
    var $div10 = $mul9 / $max;
    var $div11 = $div10 * .25;
    var $call12 = Math.cos($div11);
    var $add13 = $call12 + 1;
    var $div14 = $add13 * .5;
    var $div17 = $mul9 / $mul;
    var $call18 = _tanh($div17);
    var $mul19 = $div14 * $call18;
    var $mul20 = $mul19 * $mul;
    var $add21 = $mul20 + .5;
    var $conv22 = $add21 & -1;
    var $add23 = $i_018 + 1 | 0;
    var $arrayidx24 = $0 + ($add23 << 1) | 0;
    HEAP16[$arrayidx24 >> 1] = $conv22;
    var $exitcond = ($add23 | 0) == ($size_0 | 0);
    if ($exitcond) {
      label = 4;
      break;
    } else {
      var $i_018 = $add23;
      label = 3;
      break;
    }
   case 4:
    return $0;
  }
}
function _foveon_make_curves($curvep, $dq_val, $dq_1_val, $dq_2_val, $div_val, $div_1_val, $div_2_val, $filt) {
  var $div2 = $dq_val / $div_val;
  var $conv = $div2;
  var $conv_1 = $dq_1_val / $div_1_val;
  var $conv_2 = $dq_2_val / $div_2_val;
  var $max_1 = $div2 > 0 ? $conv : 0;
  var $max_1_1 = $max_1 < $conv_1 ? $conv_1 : $max_1;
  var $max_1_2 = $max_1_1 < $conv_2 ? $conv_2 : $max_1_1;
  var $conv20 = $filt;
  var $call = _foveon_make_curve($max_1_2, $conv, $conv20);
  HEAP32[$curvep >> 2] = $call;
  var $call_1 = _foveon_make_curve($max_1_2, $conv_1, $conv20);
  HEAP32[$curvep + 4 >> 2] = $call_1;
  var $call_2 = _foveon_make_curve($max_1_2, $conv_2, $conv20);
  HEAP32[$curvep + 8 >> 2] = $call_2;
  return;
}
function _foveon_interpolate() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 624 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $curve = __stackBase__;
    var $cfilt = __stackBase__ + 32;
    var $ddft = __stackBase__ + 36;
    var $ppm = __stackBase__ + 108;
    var $cam_xyz = __stackBase__ + 216;
    var $correct = __stackBase__ + 252;
    var $last = __stackBase__ + 288;
    var $trans = __stackBase__ + 324;
    var $chroma_dq = __stackBase__ + 360;
    var $color_dq = __stackBase__ + 372;
    var $div = __stackBase__ + 384;
    var $dscr = __stackBase__ + 396;
    var $dstb = __stackBase__ + 412;
    var $ipix = __stackBase__ + 428;
    var $satlev = __stackBase__ + 440;
    var $keep = __stackBase__ + 452;
    var $active = __stackBase__ + 468;
    var $dim = __stackBase__ + 484;
    var $str = __stackBase__ + 496;
    HEAPF32[$cfilt >> 2] = 0;
    var $_b = HEAP8[5243532];
    if ($_b) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    var $0 = HEAP32[_stderr >> 2];
    var $1 = _fwrite(5583572, 24, 1, $0);
    label = 4;
    break;
   case 4:
    _foveon_load_camf();
    var $2 = $dscr;
    var $call1 = _foveon_fixed($2, 4, 5583384);
    var $3 = $ppm;
    var $call4 = _foveon_fixed($3, 27, 5583208);
    var $4 = $satlev;
    var $call6 = _foveon_fixed($4, 3, 5583020);
    var $arraydecay7 = $keep | 0;
    var $5 = $keep;
    var $call8 = _foveon_fixed($5, 4, 5582824);
    var $arraydecay9 = $active | 0;
    var $6 = $active;
    var $call10 = _foveon_fixed($6, 4, 5582628);
    var $arraydecay11 = $chroma_dq | 0;
    var $7 = $chroma_dq;
    var $call12 = _foveon_fixed($7, 3, 5582484);
    var $arraydecay13 = $color_dq | 0;
    var $8 = $color_dq;
    var $call14 = _foveon_camf_param(5582332, 5582204);
    var $tobool15 = ($call14 | 0) != 0;
    var $cond = $tobool15 ? 5582204 : 5582068;
    var $call16 = _foveon_fixed($8, 3, $cond);
    var $call17 = _foveon_camf_param(5582332, 5581900);
    var $tobool18 = ($call17 | 0) == 0;
    if ($tobool18) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $9 = $cfilt;
    var $call20 = _foveon_fixed($9, 1, 5581900);
    label = 6;
    break;
   case 6:
    var $10 = $ddft;
    for (var $$dest = $10 >> 2, $$stop = $$dest + 18; $$dest < $$stop; $$dest++) {
      HEAP32[$$dest] = 0;
    }
    var $call22 = _foveon_camf_param(5582332, 5581740);
    var $tobool23 = ($call22 | 0) == 0;
    if ($tobool23) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $arraydecay26 = $ddft + 24 | 0;
    var $11 = $arraydecay26;
    var $call27 = _foveon_fixed($11, 12, 5581740);
    var $tobool28 = ($call27 | 0) == 0;
    if ($tobool28) {
      label = 8;
      break;
    } else {
      label = 17;
      break;
    }
   case 8:
    var $arraydecay30 = $dstb | 0;
    var $12 = $dstb;
    var $arrayidx34 = $dstb + 4 | 0;
    var $arrayidx36 = $dstb + 12 | 0;
    var $arrayidx69 = $dstb + 8 | 0;
    var $i_0932 = 0;
    label = 9;
    break;
   case 9:
    var $i_0932;
    var $tobool31 = ($i_0932 | 0) != 0;
    var $cond32 = $tobool31 ? 5581568 : 5581392;
    var $call33 = _foveon_fixed($12, 4, $cond32);
    var $13 = HEAP32[$arrayidx34 >> 2];
    var $14 = HEAP32[$arrayidx36 >> 2];
    var $cmp37928 = ($13 | 0) > ($14 | 0);
    if ($cmp37928) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    var $_pre142 = HEAP32[$arrayidx69 >> 2];
    var $_pre143 = HEAP32[$arraydecay30 >> 2];
    var $add75_pre = $i_0932 + 1 | 0;
    var $arrayidx78_pre = $ddft + $add75_pre * 24 + 4 | 0;
    var $arrayidx78_1_pre = $ddft + $add75_pre * 24 + 12 | 0;
    var $arrayidx78_2_pre = $ddft + $add75_pre * 24 + 20 | 0;
    var $26 = $_pre142;
    var $25 = $_pre143;
    var $add75_pre_phi = $add75_pre;
    var $arrayidx78_pre_phi = $arrayidx78_pre;
    var $arrayidx78_1_pre_phi = $arrayidx78_1_pre;
    var $arrayidx78_2_pre_phi = $arrayidx78_2_pre;
    label = 16;
    break;
   case 11:
    var $15 = HEAP32[$arraydecay30 >> 2];
    var $16 = HEAP32[$arrayidx69 >> 2];
    var $cmp42926 = ($15 | 0) > ($16 | 0);
    var $17 = HEAP16[5242964 >> 1];
    var $conv = $17 & 65535;
    var $18 = HEAP32[5264108 >> 2];
    var $add51 = $i_0932 + 1 | 0;
    var $arrayidx54 = $ddft + $add51 * 24 + 4 | 0;
    var $arrayidx54_1 = $ddft + $add51 * 24 + 12 | 0;
    var $arrayidx54_2 = $ddft + $add51 * 24 + 20 | 0;
    var $row_0929 = $13;
    label = 12;
    break;
   case 12:
    var $row_0929;
    if ($cmp42926) {
      label = 15;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $mul = $conv * $row_0929 & -1;
    var $_pre = HEAPF32[$arrayidx54 >> 2];
    var $_pre121 = HEAPF32[$arrayidx54_1 >> 2];
    var $_pre122 = HEAPF32[$arrayidx54_2 >> 2];
    var $col_0927 = $15;
    var $21 = $_pre;
    var $20 = $_pre121;
    var $19 = $_pre122;
    label = 14;
    break;
   case 14:
    var $19;
    var $20;
    var $21;
    var $col_0927;
    var $add = $mul + $col_0927 | 0;
    var $arrayidx48 = $18 + ($add << 3) | 0;
    var $22 = HEAP16[$arrayidx48 >> 1];
    var $conv50 = $22 << 16 >> 16;
    var $add55 = $21 + $conv50;
    HEAPF32[$arrayidx54 >> 2] = $add55;
    var $arrayidx48_1 = $18 + ($add << 3) + 2 | 0;
    var $23 = HEAP16[$arrayidx48_1 >> 1];
    var $conv50_1 = $23 << 16 >> 16;
    var $add55_1 = $20 + $conv50_1;
    HEAPF32[$arrayidx54_1 >> 2] = $add55_1;
    var $arrayidx48_2 = $18 + ($add << 3) + 4 | 0;
    var $24 = HEAP16[$arrayidx48_2 >> 1];
    var $conv50_2 = $24 << 16 >> 16;
    var $add55_2 = $19 + $conv50_2;
    HEAPF32[$arrayidx54_2 >> 2] = $add55_2;
    var $inc57 = $col_0927 + 1 | 0;
    var $cmp42 = ($inc57 | 0) > ($16 | 0);
    if ($cmp42) {
      label = 15;
      break;
    } else {
      var $col_0927 = $inc57;
      var $21 = $add55;
      var $20 = $add55_1;
      var $19 = $add55_2;
      label = 14;
      break;
    }
   case 15:
    var $inc60 = $row_0929 + 1 | 0;
    var $cmp37 = ($inc60 | 0) > ($14 | 0);
    if ($cmp37) {
      var $26 = $16;
      var $25 = $15;
      var $add75_pre_phi = $add51;
      var $arrayidx78_pre_phi = $arrayidx54;
      var $arrayidx78_1_pre_phi = $arrayidx54_1;
      var $arrayidx78_2_pre_phi = $arrayidx54_2;
      label = 16;
      break;
    } else {
      var $row_0929 = $inc60;
      label = 12;
      break;
    }
   case 16:
    var $arrayidx78_2_pre_phi;
    var $arrayidx78_1_pre_phi;
    var $arrayidx78_pre_phi;
    var $add75_pre_phi;
    var $25;
    var $26;
    var $sub = $14 + 1 | 0;
    var $add68 = $sub - $13 | 0;
    var $sub71 = $26 + 1 | 0;
    var $add72 = $sub71 - $25 | 0;
    var $mul73 = $add72 * $add68 & -1;
    var $conv74 = $mul73 | 0;
    var $27 = HEAPF32[$arrayidx78_pre_phi >> 2];
    var $div79 = $27 / $conv74;
    HEAPF32[$arrayidx78_pre_phi >> 2] = $div79;
    var $28 = HEAPF32[$arrayidx78_1_pre_phi >> 2];
    var $div79_1 = $28 / $conv74;
    HEAPF32[$arrayidx78_1_pre_phi >> 2] = $div79_1;
    var $29 = HEAPF32[$arrayidx78_2_pre_phi >> 2];
    var $div79_2 = $29 / $conv74;
    HEAPF32[$arrayidx78_2_pre_phi >> 2] = $div79_2;
    var $exitcond1085 = ($add75_pre_phi | 0) == 2;
    if ($exitcond1085) {
      label = 17;
      break;
    } else {
      var $i_0932 = $add75_pre_phi;
      label = 9;
      break;
    }
   case 17:
    var $call87 = _foveon_camf_param(5581212, 5263308);
    var $tobool88 = ($call87 | 0) == 0;
    if ($tobool88) {
      label = 18;
      break;
    } else {
      label = 19;
      break;
    }
   case 18:
    var $30 = HEAP32[_stderr >> 2];
    var $31 = HEAP32[5264120 >> 2];
    var $call90 = _fprintf($30, 5581032, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $31, HEAP32[tempInt + 4 >> 2] = 5263308, tempInt));
    label = 152;
    break;
   case 19:
    var $32 = $cam_xyz;
    var $call93 = _foveon_fixed($32, 9, $call87);
    var $33 = $correct;
    var $call95 = _foveon_camf_param(5580868, 5263308);
    var $call96 = _foveon_fixed($33, 9, $call95);
    var $34 = $last;
    for (var $$dest = $34 >> 2, $$stop = $$dest + 9; $$dest < $$stop; $$dest++) {
      HEAP32[$$dest] = 0;
    }
    var $arrayidx112 = $cam_xyz | 0;
    var $35 = HEAPF32[$arrayidx112 >> 2];
    var $arrayidx112_1 = $cam_xyz + 12 | 0;
    var $36 = HEAPF32[$arrayidx112_1 >> 2];
    var $arrayidx112_2 = $cam_xyz + 24 | 0;
    var $37 = HEAPF32[$arrayidx112_2 >> 2];
    var $arrayidx112_11076 = $cam_xyz + 4 | 0;
    var $38 = HEAPF32[$arrayidx112_11076 >> 2];
    var $arrayidx112_1_1 = $cam_xyz + 16 | 0;
    var $39 = HEAPF32[$arrayidx112_1_1 >> 2];
    var $arrayidx112_2_1 = $cam_xyz + 28 | 0;
    var $40 = HEAPF32[$arrayidx112_2_1 >> 2];
    var $arrayidx112_21079 = $cam_xyz + 8 | 0;
    var $41 = HEAPF32[$arrayidx112_21079 >> 2];
    var $arrayidx112_1_2 = $cam_xyz + 20 | 0;
    var $42 = HEAPF32[$arrayidx112_1_2 >> 2];
    var $arrayidx112_2_2 = $cam_xyz + 32 | 0;
    var $43 = HEAPF32[$arrayidx112_2_2 >> 2];
    var $i_1924 = 0;
    var $arrayidx115_promoted = 0;
    var $arrayidx115_promoted_1 = 0;
    var $arrayidx115_promoted_2 = 0;
    label = 173;
    break;
   case 20:
    var $arrayidx138 = $last + 16 | 0;
    var $44 = HEAPF32[$arrayidx138 >> 2];
    var $arrayidx144 = $last + 32 | 0;
    var $45 = HEAPF32[$arrayidx144 >> 2];
    var $mul145 = $44 * $45;
    var $arrayidx151 = $last + 20 | 0;
    var $46 = HEAPF32[$arrayidx151 >> 2];
    var $arrayidx157 = $last + 28 | 0;
    var $47 = HEAPF32[$arrayidx157 >> 2];
    var $mul158 = $46 * $47;
    var $sub159 = $mul145 - $mul158;
    var $arrayidx144_1 = $last + 24 | 0;
    var $48 = HEAPF32[$arrayidx144_1 >> 2];
    var $mul145_1 = $46 * $48;
    var $arrayidx151_1 = $last + 12 | 0;
    var $49 = HEAPF32[$arrayidx151_1 >> 2];
    var $mul158_1 = $49 * $45;
    var $sub159_1 = $mul145_1 - $mul158_1;
    var $mul145_2 = $49 * $47;
    var $mul158_2 = $44 * $48;
    var $sub159_2 = $mul145_2 - $mul158_2;
    var $arrayidx144_11059 = $last + 8 | 0;
    var $50 = HEAPF32[$arrayidx144_11059 >> 2];
    var $mul145_11060 = $47 * $50;
    var $arrayidx157_11062 = $last + 4 | 0;
    var $51 = HEAPF32[$arrayidx157_11062 >> 2];
    var $mul158_11063 = $45 * $51;
    var $sub159_11064 = $mul145_11060 - $mul158_11063;
    var $arrayidx144_1_1 = $last | 0;
    var $52 = HEAPF32[$arrayidx144_1_1 >> 2];
    var $mul145_1_1 = $45 * $52;
    var $mul158_1_1 = $48 * $50;
    var $sub159_1_1 = $mul145_1_1 - $mul158_1_1;
    var $mul145_2_1 = $48 * $51;
    var $mul158_2_1 = $47 * $52;
    var $sub159_2_1 = $mul145_2_1 - $mul158_2_1;
    var $mul145_21068 = $51 * $46;
    var $mul158_21071 = $50 * $44;
    var $sub159_21072 = $mul145_21068 - $mul158_21071;
    var $mul145_1_2 = $50 * $49;
    var $mul158_1_2 = $52 * $46;
    var $sub159_1_2 = $mul145_1_2 - $mul158_1_2;
    var $mul145_2_2 = $52 * $44;
    var $mul158_2_2 = $51 * $49;
    var $sub159_2_2 = $mul145_2_2 - $mul158_2_2;
    var $conv174 = $sub159;
    var $mul175 = $conv174 * .3127;
    var $conv178 = $sub159_11064;
    var $mul179 = $conv178 * .329;
    var $add180 = $mul175 + $mul179;
    var $conv183 = $sub159_21072;
    var $mul184 = $conv183 * .3583;
    var $add185 = $add180 + $mul184;
    var $conv186 = $add185;
    var $arrayidx187 = $div | 0;
    HEAPF32[$arrayidx187 >> 2] = $conv186;
    var $conv174_1 = $sub159_1;
    var $mul175_1 = $conv174_1 * .3127;
    var $conv178_1 = $sub159_1_1;
    var $mul179_1 = $conv178_1 * .329;
    var $add180_1 = $mul175_1 + $mul179_1;
    var $conv183_1 = $sub159_1_2;
    var $mul184_1 = $conv183_1 * .3583;
    var $add185_1 = $add180_1 + $mul184_1;
    var $conv186_1 = $add185_1;
    var $arrayidx187_1 = $div + 4 | 0;
    HEAPF32[$arrayidx187_1 >> 2] = $conv186_1;
    var $conv174_2 = $sub159_2;
    var $mul175_2 = $conv174_2 * .3127;
    var $conv178_2 = $sub159_2_1;
    var $mul179_2 = $conv178_2 * .329;
    var $add180_2 = $mul175_2 + $mul179_2;
    var $conv183_2 = $sub159_2_2;
    var $mul184_2 = $conv183_2 * .3583;
    var $add185_2 = $add180_2 + $mul184_2;
    var $conv186_2 = $add185_2;
    var $arrayidx187_2 = $div + 8 | 0;
    HEAPF32[$arrayidx187_2 >> 2] = $conv186_2;
    var $arraydecay191 = $str | 0;
    var $call192 = _sprintf($arraydecay191, 5580644, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5263308, tempInt));
    var $call194 = _foveon_camf_param(5582332, $arraydecay191);
    var $tobool195 = ($call194 | 0) == 0;
    if ($tobool195) {
      var $56 = $conv186;
      var $55 = $conv186_1;
      var $54 = $conv186_2;
      label = 22;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    var $53 = $div;
    var $call199 = _foveon_fixed($53, 3, $arraydecay191);
    var $_pre147 = HEAPF32[$arrayidx187 >> 2];
    var $_pre148 = HEAPF32[$arrayidx187_1 >> 2];
    var $_pre149 = HEAPF32[$arrayidx187_2 >> 2];
    var $56 = $_pre147;
    var $55 = $_pre148;
    var $54 = $_pre149;
    label = 22;
    break;
   case 22:
    var $54;
    var $55;
    var $56;
    var $cmp206 = $56 > 0;
    var $num_1 = $cmp206 ? $56 : 0;
    var $cmp206_1 = $num_1 < $55;
    var $num_1_1 = $cmp206_1 ? $55 : $num_1;
    var $cmp206_2 = $num_1_1 < $54;
    var $num_1_2 = $cmp206_2 ? $54 : $num_1_1;
    var $div219 = $56 / $num_1_2;
    HEAPF32[$arrayidx187 >> 2] = $div219;
    var $div219_1 = $55 / $num_1_2;
    HEAPF32[$arrayidx187_1 >> 2] = $div219_1;
    var $div219_2 = $54 / $num_1_2;
    HEAPF32[$arrayidx187_2 >> 2] = $div219_2;
    var $57 = $trans;
    for (var $$dest = $57 >> 2, $$stop = $$dest + 9; $$dest < $$stop; $$dest++) {
      HEAP32[$$dest] = 0;
    }
    var $i_3915 = 0;
    var $arrayidx243_promoted = 0;
    var $arrayidx243_promoted_1 = 0;
    var $arrayidx243_promoted_2 = 0;
    label = 171;
    break;
   case 23:
    var $arraydecay335 = $curve | 0;
    var $58 = HEAPF32[$cfilt >> 2];
    var $arraydecay13_val = HEAPF32[$arraydecay13 >> 2];
    var $arraydecay13_idx = $color_dq + 4 | 0;
    var $arraydecay13_idx_val = HEAPF32[$arraydecay13_idx >> 2];
    var $arraydecay13_idx3 = $color_dq + 8 | 0;
    var $arraydecay13_idx3_val = HEAPF32[$arraydecay13_idx3 >> 2];
    _foveon_make_curves($arraydecay335, $arraydecay13_val, $arraydecay13_idx_val, $arraydecay13_idx3_val, $div219, $div219_1, $div219_2, $58);
    var $59 = HEAPF32[$arraydecay11 >> 2];
    var $div343 = $59 / 3;
    HEAPF32[$arraydecay11 >> 2] = $div343;
    var $arrayidx342_1 = $chroma_dq + 4 | 0;
    var $60 = HEAPF32[$arrayidx342_1 >> 2];
    var $div343_1 = $60 / 3;
    HEAPF32[$arrayidx342_1 >> 2] = $div343_1;
    var $arrayidx342_2 = $chroma_dq + 8 | 0;
    var $61 = HEAPF32[$arrayidx342_2 >> 2];
    var $div343_2 = $61 / 3;
    HEAPF32[$arrayidx342_2 >> 2] = $div343_2;
    var $add_ptr = $curve + 12 | 0;
    _foveon_make_curves($add_ptr, $div343, $div343_1, $div343_2, $div219, $div219_1, $div219_2, $58);
    var $div356 = $div343 / $div219;
    var $conv357 = $div356;
    var $add358 = $div279 + $conv357;
    var $div356_1 = $div343_1 / $div219_1;
    var $conv357_1 = $div356_1;
    var $add358_1 = $add358 + $conv357_1;
    var $div356_2 = $div343_2 / $div219_2;
    var $conv357_2 = $div356_2;
    var $add358_2 = $add358_1 + $conv357_2;
    var $conv362 = $58;
    var $call363 = _foveon_make_curve($add358_2, $add358_2, $conv362);
    var $arrayidx364 = $curve + 24 | 0;
    HEAP32[$arrayidx364 >> 2] = $call363;
    var $mul365 = $add358_2 * 2;
    var $call368 = _foveon_make_curve($mul365, $mul365, $conv362);
    var $arrayidx369 = $curve + 28 | 0;
    HEAP32[$arrayidx369 >> 2] = $call368;
    var $arraydecay370 = $dim | 0;
    var $call371 = _foveon_camf_matrix($arraydecay370, 5580452);
    var $62 = $call371;
    var $tobool372 = ($call371 | 0) == 0;
    if ($tobool372) {
      label = 152;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    var $arrayidx375 = $dim + 4 | 0;
    var $63 = HEAP32[$arrayidx375 >> 2];
    var $call376 = _calloc($63, 12);
    var $64 = $call376;
    var $65 = HEAP16[5242964 >> 1];
    var $conv377 = $65 & 65535;
    var $add379 = $63 - 2 | 0;
    var $sub380 = $add379 + $conv377 | 0;
    var $sub382 = $63 - 1 | 0;
    var $div383 = Math.floor(($sub380 >>> 0) / ($sub382 >>> 0));
    var $66 = HEAP16[5398712 >> 1];
    var $conv384 = $66 & 65535;
    var $call385 = _calloc($conv384, 12);
    var $67 = $call385;
    var $68 = HEAP16[5398712 >> 1];
    var $cmp388902 = $68 << 16 >> 16 == 0;
    if ($cmp388902) {
      var $85 = 0;
      label = 27;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    var $arraydecay431 = $dscr | 0;
    var $arraydecay439 = $dscr + 8 | 0;
    var $arrayidx397 = $ddft + 24 | 0;
    var $arrayidx406 = $ddft + 48 | 0;
    var $arrayidx417 = $ddft | 0;
    var $arrayidx397_1 = $ddft + 28 | 0;
    var $arrayidx406_1 = $ddft + 52 | 0;
    var $arrayidx417_1 = $ddft + 4 | 0;
    var $arrayidx397_2 = $ddft + 32 | 0;
    var $arrayidx406_2 = $ddft + 56 | 0;
    var $arrayidx417_2 = $ddft + 8 | 0;
    var $arrayidx397_3 = $ddft + 36 | 0;
    var $arrayidx406_3 = $ddft + 60 | 0;
    var $arrayidx417_3 = $ddft + 12 | 0;
    var $arrayidx397_4 = $ddft + 40 | 0;
    var $arrayidx406_4 = $ddft + 64 | 0;
    var $arrayidx417_4 = $ddft + 16 | 0;
    var $arrayidx397_5 = $ddft + 44 | 0;
    var $arrayidx406_5 = $ddft + 68 | 0;
    var $arrayidx417_5 = $ddft + 20 | 0;
    var $arraydecay431_val13 = HEAP32[$arraydecay431 >> 2];
    var $arraydecay431_idx14 = $dscr + 4 | 0;
    var $arraydecay431_idx14_val = HEAP32[$arraydecay431_idx14 >> 2];
    var $arraydecay439_val11 = HEAP32[$arraydecay439 >> 2];
    var $arraydecay439_idx12 = $dscr + 12 | 0;
    var $arraydecay439_idx12_val = HEAP32[$arraydecay439_idx12 >> 2];
    var $arrayidx445_1 = $ddft + 8 | 0;
    var $arrayidx450_1 = $ddft + 12 | 0;
    var $arrayidx445_2 = $ddft + 16 | 0;
    var $arrayidx450_2 = $ddft + 20 | 0;
    var $_pre140 = HEAP16[5242964 >> 1];
    var $_pre141 = HEAP32[5264108 >> 2];
    var $row_1903 = 0;
    label = 26;
    break;
   case 26:
    var $row_1903;
    var $conv399 = $row_1903 | 0;
    var $conv400 = $68 & 65535;
    var $addconv698 = $conv400 - 1 | 0;
    var $sub402 = $addconv698 | 0;
    var $div403 = $conv399 / $sub402;
    var $69 = HEAPF32[$arrayidx397 >> 2];
    var $conv398 = $69;
    var $70 = HEAPF32[$arrayidx406 >> 2];
    var $sub410 = $70 - $69;
    var $conv411 = $sub410;
    var $mul412 = $div403 * $conv411;
    var $add413 = $conv398 + $mul412;
    var $conv414 = $add413;
    HEAPF32[$arrayidx417 >> 2] = $conv414;
    var $71 = HEAPF32[$arrayidx397_1 >> 2];
    var $conv398_1 = $71;
    var $72 = HEAPF32[$arrayidx406_1 >> 2];
    var $sub410_1 = $72 - $71;
    var $conv411_1 = $sub410_1;
    var $mul412_1 = $div403 * $conv411_1;
    var $add413_1 = $conv398_1 + $mul412_1;
    var $conv414_1 = $add413_1;
    HEAPF32[$arrayidx417_1 >> 2] = $conv414_1;
    var $73 = HEAPF32[$arrayidx397_2 >> 2];
    var $conv398_2 = $73;
    var $74 = HEAPF32[$arrayidx406_2 >> 2];
    var $sub410_2 = $74 - $73;
    var $conv411_2 = $sub410_2;
    var $mul412_2 = $div403 * $conv411_2;
    var $add413_2 = $conv398_2 + $mul412_2;
    var $conv414_2 = $add413_2;
    HEAPF32[$arrayidx417_2 >> 2] = $conv414_2;
    var $75 = HEAPF32[$arrayidx397_3 >> 2];
    var $conv398_3 = $75;
    var $76 = HEAPF32[$arrayidx406_3 >> 2];
    var $sub410_3 = $76 - $75;
    var $conv411_3 = $sub410_3;
    var $mul412_3 = $div403 * $conv411_3;
    var $add413_3 = $conv398_3 + $mul412_3;
    var $conv414_3 = $add413_3;
    HEAPF32[$arrayidx417_3 >> 2] = $conv414_3;
    var $77 = HEAPF32[$arrayidx397_4 >> 2];
    var $conv398_4 = $77;
    var $78 = HEAPF32[$arrayidx406_4 >> 2];
    var $sub410_4 = $78 - $77;
    var $conv411_4 = $sub410_4;
    var $mul412_4 = $div403 * $conv411_4;
    var $add413_4 = $conv398_4 + $mul412_4;
    var $conv414_4 = $add413_4;
    HEAPF32[$arrayidx417_4 >> 2] = $conv414_4;
    var $79 = HEAPF32[$arrayidx397_5 >> 2];
    var $conv398_5 = $79;
    var $80 = HEAPF32[$arrayidx406_5 >> 2];
    var $sub410_5 = $80 - $79;
    var $conv411_5 = $sub410_5;
    var $mul412_5 = $div403 * $conv411_5;
    var $add413_5 = $conv398_5 + $mul412_5;
    var $conv414_5 = $add413_5;
    HEAPF32[$arrayidx417_5 >> 2] = $conv414_5;
    var $conv425 = $_pre140 & 65535;
    var $mul426 = $conv425 * $row_1903 & -1;
    var $add_ptr429 = $_pre141 + ($mul426 << 3) | 0;
    var $call432 = _foveon_avg($add_ptr429, $arraydecay431_val13, $arraydecay431_idx14_val, $58);
    var $call440 = _foveon_avg($add_ptr429, $arraydecay439_val11, $arraydecay439_idx12_val, $58);
    var $mul441 = $call440 * 3;
    var $add442 = $call432 + $mul441;
    var $sub446 = $add442 - $conv414;
    var $div447 = $sub446 * .25;
    var $sub451 = $div447 - $conv414_1;
    var $arrayidx453 = $67 + $row_1903 * 12 | 0;
    HEAPF32[$arrayidx453 >> 2] = $sub451;
    var $add_ptr429_1 = $_pre141 + ($mul426 << 3) + 2 | 0;
    var $call432_1 = _foveon_avg($add_ptr429_1, $arraydecay431_val13, $arraydecay431_idx14_val, $58);
    var $call440_1 = _foveon_avg($add_ptr429_1, $arraydecay439_val11, $arraydecay439_idx12_val, $58);
    var $mul441_1 = $call440_1 * 3;
    var $add442_1 = $call432_1 + $mul441_1;
    var $81 = HEAPF32[$arrayidx445_1 >> 2];
    var $sub446_1 = $add442_1 - $81;
    var $div447_1 = $sub446_1 * .25;
    var $82 = HEAPF32[$arrayidx450_1 >> 2];
    var $sub451_1 = $div447_1 - $82;
    var $arrayidx453_1 = $67 + $row_1903 * 12 + 4 | 0;
    HEAPF32[$arrayidx453_1 >> 2] = $sub451_1;
    var $add_ptr429_2 = $_pre141 + ($mul426 << 3) + 4 | 0;
    var $call432_2 = _foveon_avg($add_ptr429_2, $arraydecay431_val13, $arraydecay431_idx14_val, $58);
    var $call440_2 = _foveon_avg($add_ptr429_2, $arraydecay439_val11, $arraydecay439_idx12_val, $58);
    var $mul441_2 = $call440_2 * 3;
    var $add442_2 = $call432_2 + $mul441_2;
    var $83 = HEAPF32[$arrayidx445_2 >> 2];
    var $sub446_2 = $add442_2 - $83;
    var $div447_2 = $sub446_2 * .25;
    var $84 = HEAPF32[$arrayidx450_2 >> 2];
    var $sub451_2 = $div447_2 - $84;
    var $arrayidx453_2 = $67 + $row_1903 * 12 + 8 | 0;
    HEAPF32[$arrayidx453_2 >> 2] = $sub451_2;
    var $inc458 = $row_1903 + 1 | 0;
    var $cmp388 = ($inc458 | 0) < ($conv400 | 0);
    if ($cmp388) {
      var $row_1903 = $inc458;
      label = 26;
      break;
    } else {
      var $85 = $68;
      label = 27;
      break;
    }
   case 27:
    var $85;
    var $add_ptr460 = $call385 + 96 | 0;
    for (var $$src = $add_ptr460 >> 2, $$dest = $call385 >> 2, $$stop = $$src + 24; $$src < $$stop; $$src++, $$dest++) {
      HEAP32[$$dest] = HEAP32[$$src];
    }
    var $conv461 = $85 & 65535;
    var $add_ptr462_sum = $conv461 - 11 | 0;
    var $add_ptr463 = $67 + $add_ptr462_sum * 12 | 0;
    var $86 = $add_ptr463;
    var $add_ptr462_sum683 = $conv461 - 22 | 0;
    var $add_ptr466 = $67 + $add_ptr462_sum683 * 12 | 0;
    var $87 = $add_ptr466;
    for (var $$src = $87 >> 2, $$dest = $86 >> 2, $$stop = $$src + 33; $$src < $$stop; $$src++, $$dest++) {
      HEAP32[$$dest] = HEAP32[$$src];
    }
    for (var $$src = $call385 >> 2, $$dest = $34 >> 2, $$stop = $$src + 9; $$src < $$stop; $$src++, $$dest++) {
      HEAP32[$$dest] = HEAP32[$$src];
    }
    var $sub469895 = $conv461 - 1 | 0;
    var $cmp470896 = ($sub469895 | 0) > 1;
    if ($cmp470896) {
      label = 28;
      break;
    } else {
      var $row_2_lcssa = 1;
      label = 35;
      break;
    }
   case 28:
    var $add_ptr534 = $last + 12 | 0;
    var $88 = $add_ptr534;
    var $arrayidx535 = $last + 24 | 0;
    var $89 = $arrayidx535;
    var $row_2897 = 1;
    label = 29;
    break;
   case 29:
    var $row_2897;
    var $90 = HEAPF32[$arrayidx151_1 >> 2];
    var $91 = HEAPF32[$arrayidx144_1_1 >> 2];
    var $cmp481 = $90 > $91;
    var $92 = HEAPF32[$arrayidx144_1 >> 2];
    if ($cmp481) {
      label = 30;
      break;
    } else {
      label = 32;
      break;
    }
   case 30:
    var $cmp488 = $90 > $92;
    if ($cmp488) {
      label = 31;
      break;
    } else {
      label = 34;
      break;
    }
   case 31:
    var $cmp495 = $91 > $92;
    var $_ = $cmp495 ? $91 : $92;
    var $arrayidx503 = $67 + $row_2897 * 12 | 0;
    HEAPF32[$arrayidx503 >> 2] = $_;
    label = 34;
    break;
   case 32:
    var $cmp509 = $90 < $92;
    if ($cmp509) {
      label = 33;
      break;
    } else {
      label = 34;
      break;
    }
   case 33:
    var $cmp516 = $91 < $92;
    var $_699 = $cmp516 ? $91 : $92;
    var $arrayidx527 = $67 + $row_2897 * 12 | 0;
    HEAPF32[$arrayidx527 >> 2] = $_699;
    label = 34;
    break;
   case 34:
    var $93 = HEAPF32[$arrayidx138 >> 2];
    var $94 = HEAPF32[$arrayidx157_11062 >> 2];
    var $cmp481_1 = $93 > $94;
    var $95 = HEAPF32[$arrayidx157 >> 2];
    if ($cmp481_1) {
      label = 160;
      break;
    } else {
      label = 158;
      break;
    }
   case 35:
    var $row_2_lcssa;
    var $96 = HEAPF32[$arrayidx144_1_1 >> 2];
    var $97 = HEAPF32[$arrayidx151_1 >> 2];
    var $add549 = $96 + $97;
    var $div550 = $add549 * .5;
    var $arrayidx552 = $67 + $row_2_lcssa * 12 | 0;
    HEAPF32[$arrayidx552 >> 2] = $div550;
    var $98 = HEAPF32[$arrayidx157_11062 >> 2];
    var $99 = HEAPF32[$arrayidx138 >> 2];
    var $add549_1 = $98 + $99;
    var $div550_1 = $add549_1 * .5;
    var $arrayidx552_1 = $67 + $row_2_lcssa * 12 + 4 | 0;
    HEAPF32[$arrayidx552_1 >> 2] = $div550_1;
    var $100 = HEAPF32[$arrayidx144_11059 >> 2];
    var $101 = HEAPF32[$arrayidx151 >> 2];
    var $add549_2 = $100 + $101;
    var $div550_2 = $add549_2 * .5;
    var $arrayidx552_2 = $67 + $row_2_lcssa * 12 + 8 | 0;
    HEAPF32[$arrayidx552_2 >> 2] = $div550_2;
    var $arrayidx562 = $call385 + 36 | 0;
    var $arrayidx560 = $call385 + 12 | 0;
    var $arrayidx561 = $arrayidx560;
    var $102 = HEAPF32[$arrayidx561 >> 2];
    var $arrayidx563 = $arrayidx562;
    var $103 = HEAPF32[$arrayidx563 >> 2];
    var $add564 = $102 + $103;
    var $div565 = $add564 * .5;
    var $arrayidx567 = $call385;
    HEAPF32[$arrayidx567 >> 2] = $div565;
    var $arrayidx561_1 = $call385 + 16 | 0;
    var $104 = $arrayidx561_1;
    var $105 = HEAPF32[$104 >> 2];
    var $arrayidx563_1 = $call385 + 40 | 0;
    var $106 = $arrayidx563_1;
    var $107 = HEAPF32[$106 >> 2];
    var $add564_1 = $105 + $107;
    var $div565_1 = $add564_1 * .5;
    var $arrayidx567_1 = $call385 + 4 | 0;
    var $108 = $arrayidx567_1;
    HEAPF32[$108 >> 2] = $div565_1;
    var $arrayidx561_2 = $call385 + 20 | 0;
    var $109 = $arrayidx561_2;
    var $110 = HEAPF32[$109 >> 2];
    var $arrayidx563_2 = $call385 + 44 | 0;
    var $111 = $arrayidx563_2;
    var $112 = HEAPF32[$111 >> 2];
    var $add564_2 = $110 + $112;
    var $div565_2 = $add564_2 * .5;
    var $arrayidx567_2 = $call385 + 8 | 0;
    var $113 = $arrayidx567_2;
    HEAPF32[$113 >> 2] = $div565_2;
    var $cmp576888 = ($85 & 65535) > 1;
    if ($cmp576888) {
      var $row_3889 = 1;
      var $fsum_sroa_2_0 = $div565_2;
      var $fsum_sroa_1_0 = $div565_1;
      var $fsum_sroa_0_0 = $div565;
      var $116 = $div565;
      var $115 = $div565_1;
      var $114 = $div565_2;
      label = 36;
      break;
    } else {
      var $fsum_sroa_2_1 = $div565_2;
      var $fsum_sroa_1_1 = $div565_1;
      var $fsum_sroa_0_1 = $div565;
      label = 37;
      break;
    }
   case 36:
    var $114;
    var $115;
    var $116;
    var $fsum_sroa_0_0;
    var $fsum_sroa_1_0;
    var $fsum_sroa_2_0;
    var $row_3889;
    var $arrayidx584 = $67 + $row_3889 * 12 | 0;
    var $117 = HEAPF32[$arrayidx584 >> 2];
    var $sub588 = $117 - $116;
    var $mul589 = $sub588 * .04081054404377937;
    var $add593 = $116 + $mul589;
    HEAPF32[$arrayidx584 >> 2] = $add593;
    var $add597 = $fsum_sroa_0_0 + $add593;
    var $arrayidx584_1 = $67 + $row_3889 * 12 + 4 | 0;
    var $118 = HEAPF32[$arrayidx584_1 >> 2];
    var $sub588_1 = $118 - $115;
    var $mul589_1 = $sub588_1 * .04081054404377937;
    var $add593_1 = $115 + $mul589_1;
    HEAPF32[$arrayidx584_1 >> 2] = $add593_1;
    var $add597_1 = $fsum_sroa_1_0 + $add593_1;
    var $arrayidx584_2 = $67 + $row_3889 * 12 + 8 | 0;
    var $119 = HEAPF32[$arrayidx584_2 >> 2];
    var $sub588_2 = $119 - $114;
    var $mul589_2 = $sub588_2 * .04081054404377937;
    var $add593_2 = $114 + $mul589_2;
    HEAPF32[$arrayidx584_2 >> 2] = $add593_2;
    var $add597_2 = $fsum_sroa_2_0 + $add593_2;
    var $inc602 = $row_3889 + 1 | 0;
    var $cmp576 = ($inc602 | 0) < ($conv461 | 0);
    if ($cmp576) {
      var $row_3889 = $inc602;
      var $fsum_sroa_2_0 = $add597_2;
      var $fsum_sroa_1_0 = $add597_1;
      var $fsum_sroa_0_0 = $add597;
      var $116 = $add593;
      var $115 = $add593_1;
      var $114 = $add593_2;
      label = 36;
      break;
    } else {
      var $fsum_sroa_2_1 = $add597_2;
      var $fsum_sroa_1_1 = $add597_1;
      var $fsum_sroa_0_1 = $add597;
      label = 37;
      break;
    }
   case 37:
    var $fsum_sroa_0_1;
    var $fsum_sroa_1_1;
    var $fsum_sroa_2_1;
    var $arrayidx607 = $67 + $sub469895 * 12 | 0;
    var $120 = $arrayidx607;
    HEAP32[$34 >> 2] = HEAP32[$120 >> 2];
    HEAP32[$34 + 4 >> 2] = HEAP32[$120 + 4 >> 2];
    HEAP32[$34 + 8 >> 2] = HEAP32[$120 + 8 >> 2];
    var $conv613 = $conv461 | 0;
    var $div615 = $fsum_sroa_0_1 / $conv613;
    var $div615_1 = $fsum_sroa_1_1 / $conv613;
    var $div615_2 = $fsum_sroa_2_1 / $conv613;
    var $tobool621881 = $85 << 16 >> 16 == 0;
    if ($tobool621881) {
      label = 61;
      break;
    } else {
      label = 38;
      break;
    }
   case 38:
    var $_pre134 = HEAPF32[$arrayidx144_1_1 >> 2];
    var $_pre135 = HEAPF32[$arrayidx157_11062 >> 2];
    var $_pre136 = HEAPF32[$arrayidx144_11059 >> 2];
    var $dec882_in = $conv461;
    var $123 = $_pre134;
    var $122 = $_pre135;
    var $121 = $_pre136;
    label = 39;
    break;
   case 39:
    var $121;
    var $122;
    var $123;
    var $dec882_in;
    var $dec882 = $dec882_in - 1 | 0;
    var $arrayidx628 = $67 + $dec882 * 12 | 0;
    var $124 = HEAPF32[$arrayidx628 >> 2];
    var $sub630 = $124 - $div615;
    var $sub633 = $sub630 - $123;
    var $mul634 = $sub633 * .04081054404377937;
    var $add637 = $123 + $mul634;
    HEAPF32[$arrayidx628 >> 2] = $add637;
    HEAPF32[$arrayidx144_1_1 >> 2] = $add637;
    var $arrayidx628_1 = $67 + $dec882 * 12 + 4 | 0;
    var $125 = HEAPF32[$arrayidx628_1 >> 2];
    var $sub630_1 = $125 - $div615_1;
    var $sub633_1 = $sub630_1 - $122;
    var $mul634_1 = $sub633_1 * .04081054404377937;
    var $add637_1 = $122 + $mul634_1;
    HEAPF32[$arrayidx628_1 >> 2] = $add637_1;
    HEAPF32[$arrayidx157_11062 >> 2] = $add637_1;
    var $arrayidx628_2 = $67 + $dec882 * 12 + 8 | 0;
    var $126 = HEAPF32[$arrayidx628_2 >> 2];
    var $sub630_2 = $126 - $div615_2;
    var $sub633_2 = $sub630_2 - $121;
    var $mul634_2 = $sub633_2 * .04081054404377937;
    var $add637_2 = $121 + $mul634_2;
    HEAPF32[$arrayidx628_2 >> 2] = $add637_2;
    HEAPF32[$arrayidx144_11059 >> 2] = $add637_2;
    var $tobool621 = ($dec882 | 0) == 0;
    if ($tobool621) {
      label = 40;
      break;
    } else {
      var $dec882_in = $dec882;
      var $123 = $add637;
      var $122 = $add637_1;
      var $121 = $add637_2;
      label = 39;
      break;
    }
   case 40:
    var $cmp648877 = ($85 & 65535) > 2;
    if ($cmp648877) {
      label = 41;
      break;
    } else {
      var $total_sroa_3_1 = 0;
      var $total_sroa_2_1 = 0;
      var $total_sroa_1_1 = 0;
      var $total_sroa_0_1 = 0;
      label = 44;
      break;
    }
   case 41:
    var $127 = HEAP16[5242964 >> 1];
    var $cmp653874 = ($127 & 65535) > 2;
    var $conv660 = $127 & 65535;
    var $128 = HEAP32[5264108 >> 2];
    var $row_5878 = 2;
    var $total_sroa_3_0 = 0;
    var $total_sroa_2_0 = 0;
    var $total_sroa_1_0 = 0;
    var $total_sroa_0_0 = 0;
    label = 42;
    break;
   case 42:
    var $total_sroa_0_0;
    var $total_sroa_1_0;
    var $total_sroa_2_0;
    var $total_sroa_3_0;
    var $row_5878;
    if ($cmp653874) {
      label = 43;
      break;
    } else {
      var $total_sroa_3_3 = $total_sroa_3_0;
      var $total_sroa_2_3 = $total_sroa_2_0;
      var $total_sroa_1_3 = $total_sroa_1_0;
      var $total_sroa_0_3 = $total_sroa_0_0;
      label = 47;
      break;
    }
   case 43:
    var $mul661 = $conv660 * $row_5878 & -1;
    var $col_1875 = 2;
    var $total_sroa_3_2 = $total_sroa_3_0;
    var $total_sroa_2_2 = $total_sroa_2_0;
    var $total_sroa_1_2 = $total_sroa_1_0;
    var $total_sroa_0_2 = $total_sroa_0_0;
    label = 46;
    break;
   case 44:
    var $total_sroa_0_1;
    var $total_sroa_1_1;
    var $total_sroa_2_1;
    var $total_sroa_3_1;
    if ($tobool621881) {
      label = 61;
      break;
    } else {
      label = 45;
      break;
    }
   case 45:
    var $conv694 = $total_sroa_3_1 | 0;
    var $mul695 = $conv694 * 100;
    var $div689 = $div615 * .5;
    var $conv690 = $div689;
    var $conv692 = $total_sroa_0_1 | 0;
    var $div696 = $conv692 / $mul695;
    var $add697 = $conv690 + $div696;
    var $div689_1 = $div615_1 * .5;
    var $conv690_1 = $div689_1;
    var $conv692_1 = $total_sroa_1_1 | 0;
    var $div696_1 = $conv692_1 / $mul695;
    var $add697_1 = $conv690_1 + $div696_1;
    var $div689_2 = $div615_2 * .5;
    var $conv690_2 = $div689_2;
    var $conv692_2 = $total_sroa_2_1 | 0;
    var $div696_2 = $conv692_2 / $mul695;
    var $add697_2 = $conv690_2 + $div696_2;
    var $row_6871 = 0;
    label = 50;
    break;
   case 46:
    var $total_sroa_0_2;
    var $total_sroa_1_2;
    var $total_sroa_2_2;
    var $total_sroa_3_2;
    var $col_1875;
    var $add662 = $mul661 + $col_1875 | 0;
    var $arrayidx664 = $128 + ($add662 << 3) | 0;
    var $129 = HEAP16[$arrayidx664 >> 1];
    var $conv665 = $129 << 16 >> 16;
    var $add667 = $total_sroa_0_2 + $conv665 | 0;
    var $arrayidx664_1 = $128 + ($add662 << 3) + 2 | 0;
    var $130 = HEAP16[$arrayidx664_1 >> 1];
    var $conv665_1 = $130 << 16 >> 16;
    var $add667_1 = $total_sroa_1_2 + $conv665_1 | 0;
    var $arrayidx664_2 = $128 + ($add662 << 3) + 4 | 0;
    var $131 = HEAP16[$arrayidx664_2 >> 1];
    var $conv665_2 = $131 << 16 >> 16;
    var $add667_2 = $total_sroa_2_2 + $conv665_2 | 0;
    var $inc672 = $total_sroa_3_2 + 1 | 0;
    var $add674 = $col_1875 + 4 | 0;
    var $cmp653 = ($add674 | 0) < ($conv660 | 0);
    if ($cmp653) {
      var $col_1875 = $add674;
      var $total_sroa_3_2 = $inc672;
      var $total_sroa_2_2 = $add667_2;
      var $total_sroa_1_2 = $add667_1;
      var $total_sroa_0_2 = $add667;
      label = 46;
      break;
    } else {
      var $total_sroa_3_3 = $inc672;
      var $total_sroa_2_3 = $add667_2;
      var $total_sroa_1_3 = $add667_1;
      var $total_sroa_0_3 = $add667;
      label = 47;
      break;
    }
   case 47:
    var $total_sroa_0_3;
    var $total_sroa_1_3;
    var $total_sroa_2_3;
    var $total_sroa_3_3;
    var $add677 = $row_5878 + 4 | 0;
    var $cmp648 = ($add677 | 0) < ($conv461 | 0);
    if ($cmp648) {
      var $row_5878 = $add677;
      var $total_sroa_3_0 = $total_sroa_3_3;
      var $total_sroa_2_0 = $total_sroa_2_3;
      var $total_sroa_1_0 = $total_sroa_1_3;
      var $total_sroa_0_0 = $total_sroa_0_3;
      label = 42;
      break;
    } else {
      var $total_sroa_3_1 = $total_sroa_3_3;
      var $total_sroa_2_1 = $total_sroa_2_3;
      var $total_sroa_1_1 = $total_sroa_1_3;
      var $total_sroa_0_1 = $total_sroa_0_3;
      label = 44;
      break;
    }
   case 48:
    var $132;
    var $cmp711865 = $132 << 16 >> 16 == 0;
    if ($cmp711865) {
      label = 61;
      break;
    } else {
      label = 49;
      break;
    }
   case 49:
    var $arrayidx753 = $dim + 8 | 0;
    var $conv930 = $div383 | 0;
    var $arrayidx720 = $ddft + 24 | 0;
    var $arrayidx729 = $ddft + 48 | 0;
    var $arrayidx740 = $ddft | 0;
    var $arrayidx720_1 = $ddft + 28 | 0;
    var $arrayidx729_1 = $ddft + 52 | 0;
    var $arrayidx740_1 = $ddft + 4 | 0;
    var $arrayidx720_2 = $ddft + 32 | 0;
    var $arrayidx729_2 = $ddft + 56 | 0;
    var $arrayidx740_2 = $ddft + 8 | 0;
    var $arrayidx720_3 = $ddft + 36 | 0;
    var $arrayidx729_3 = $ddft + 60 | 0;
    var $arrayidx740_3 = $ddft + 12 | 0;
    var $arrayidx720_4 = $ddft + 40 | 0;
    var $arrayidx729_4 = $ddft + 64 | 0;
    var $arrayidx740_4 = $ddft + 16 | 0;
    var $arrayidx720_5 = $ddft + 44 | 0;
    var $arrayidx729_5 = $ddft + 68 | 0;
    var $arrayidx740_5 = $ddft + 20 | 0;
    var $arrayidx847 = $ipix | 0;
    var $arrayidx825_1 = $ddft + 12 | 0;
    var $arrayidx830_1 = $ddft + 8 | 0;
    var $arrayidx847_1 = $ipix + 4 | 0;
    var $arrayidx825_2 = $ddft + 20 | 0;
    var $arrayidx830_2 = $ddft + 16 | 0;
    var $arrayidx847_2 = $ipix + 8 | 0;
    var $_pre132 = HEAP16[5242964 >> 1];
    var $_pre133 = HEAP32[5264108 >> 2];
    var $row_7866 = 0;
    var $137 = $_pre132;
    var $136 = $63;
    label = 51;
    break;
   case 50:
    var $row_6871;
    var $arrayidx699 = $67 + $row_6871 * 12 | 0;
    var $133 = HEAPF32[$arrayidx699 >> 2];
    var $conv700 = $133;
    var $add701 = $add697 + $conv700;
    var $conv702 = $add701;
    HEAPF32[$arrayidx699 >> 2] = $conv702;
    var $arrayidx699_1 = $67 + $row_6871 * 12 + 4 | 0;
    var $134 = HEAPF32[$arrayidx699_1 >> 2];
    var $conv700_1 = $134;
    var $add701_1 = $add697_1 + $conv700_1;
    var $conv702_1 = $add701_1;
    HEAPF32[$arrayidx699_1 >> 2] = $conv702_1;
    var $arrayidx699_2 = $67 + $row_6871 * 12 + 8 | 0;
    var $135 = HEAPF32[$arrayidx699_2 >> 2];
    var $conv700_2 = $135;
    var $add701_2 = $add697_2 + $conv700_2;
    var $conv702_2 = $add701_2;
    HEAPF32[$arrayidx699_2 >> 2] = $conv702_2;
    var $inc707 = $row_6871 + 1 | 0;
    var $cmp681 = ($inc707 | 0) < ($conv461 | 0);
    if ($cmp681) {
      var $row_6871 = $inc707;
      label = 50;
      break;
    } else {
      var $132 = $85;
      label = 48;
      break;
    }
   case 51:
    var $136;
    var $137;
    var $row_7866;
    var $conv722 = $row_7866 | 0;
    var $conv723 = $132 & 65535;
    var $addconv697 = $conv723 - 1 | 0;
    var $sub725 = $addconv697 | 0;
    var $div726 = $conv722 / $sub725;
    var $138 = HEAPF32[$arrayidx720 >> 2];
    var $conv721 = $138;
    var $139 = HEAPF32[$arrayidx729 >> 2];
    var $sub733 = $139 - $138;
    var $conv734 = $sub733;
    var $mul735 = $div726 * $conv734;
    var $add736 = $conv721 + $mul735;
    var $conv737 = $add736;
    HEAPF32[$arrayidx740 >> 2] = $conv737;
    var $140 = HEAPF32[$arrayidx720_1 >> 2];
    var $conv721_1 = $140;
    var $141 = HEAPF32[$arrayidx729_1 >> 2];
    var $sub733_1 = $141 - $140;
    var $conv734_1 = $sub733_1;
    var $mul735_1 = $div726 * $conv734_1;
    var $add736_1 = $conv721_1 + $mul735_1;
    var $conv737_1 = $add736_1;
    HEAPF32[$arrayidx740_1 >> 2] = $conv737_1;
    var $142 = HEAPF32[$arrayidx720_2 >> 2];
    var $conv721_2 = $142;
    var $143 = HEAPF32[$arrayidx729_2 >> 2];
    var $sub733_2 = $143 - $142;
    var $conv734_2 = $sub733_2;
    var $mul735_2 = $div726 * $conv734_2;
    var $add736_2 = $conv721_2 + $mul735_2;
    var $conv737_2 = $add736_2;
    HEAPF32[$arrayidx740_2 >> 2] = $conv737_2;
    var $144 = HEAPF32[$arrayidx720_3 >> 2];
    var $conv721_3 = $144;
    var $145 = HEAPF32[$arrayidx729_3 >> 2];
    var $sub733_3 = $145 - $144;
    var $conv734_3 = $sub733_3;
    var $mul735_3 = $div726 * $conv734_3;
    var $add736_3 = $conv721_3 + $mul735_3;
    var $conv737_3 = $add736_3;
    HEAPF32[$arrayidx740_3 >> 2] = $conv737_3;
    var $146 = HEAPF32[$arrayidx720_4 >> 2];
    var $conv721_4 = $146;
    var $147 = HEAPF32[$arrayidx729_4 >> 2];
    var $sub733_4 = $147 - $146;
    var $conv734_4 = $sub733_4;
    var $mul735_4 = $div726 * $conv734_4;
    var $add736_4 = $conv721_4 + $mul735_4;
    var $conv737_4 = $add736_4;
    HEAPF32[$arrayidx740_4 >> 2] = $conv737_4;
    var $148 = HEAPF32[$arrayidx720_5 >> 2];
    var $conv721_5 = $148;
    var $149 = HEAPF32[$arrayidx729_5 >> 2];
    var $sub733_5 = $149 - $148;
    var $conv734_5 = $sub733_5;
    var $mul735_5 = $div726 * $conv734_5;
    var $add736_5 = $conv721_5 + $mul735_5;
    var $conv737_5 = $add736_5;
    HEAPF32[$arrayidx740_5 >> 2] = $conv737_5;
    var $conv744 = $137 & 65535;
    var $mul745 = $conv744 * $row_7866 & -1;
    var $arraydecay747 = $_pre133 + ($mul745 << 3) | 0;
    var $prev_sroa_0_0_copyload = HEAP16[$arraydecay747 >> 1];
    var $prev_sroa_1_2__idx119 = $_pre133 + ($mul745 << 3) + 2 | 0;
    var $prev_sroa_1_2_copyload = HEAP16[$prev_sroa_1_2__idx119 >> 1];
    var $prev_sroa_2_4__idx120 = $_pre133 + ($mul745 << 3) + 4 | 0;
    var $prev_sroa_2_4_copyload = HEAP16[$prev_sroa_2_4__idx120 >> 1];
    var $150 = HEAP32[$arrayidx753 >> 2];
    var $sub754 = $150 - 1 | 0;
    var $conv755 = $sub754 >>> 0;
    var $mul756 = $div726 * $conv755;
    var $conv757 = $mul756;
    var $conv758 = $conv757 & -1;
    var $cmp761 = ($conv758 | 0) == ($sub754 | 0);
    var $dec764 = $cmp761 << 31 >> 31;
    var $irow_0 = $dec764 + $conv758 | 0;
    var $conv766 = $irow_0 | 0;
    var $sub767 = $conv757 - $conv766;
    var $cmp770851 = ($136 | 0) == 0;
    if ($cmp770851) {
      label = 54;
      break;
    } else {
      label = 52;
      break;
    }
   case 52:
    var $mul778 = $136 * $irow_0 & -1;
    var $sub782 = 1 - $sub767;
    var $add784 = $irow_0 + 1 | 0;
    var $mul786 = $136 * $add784 & -1;
    var $i_8852 = 0;
    label = 53;
    break;
   case 53:
    var $i_8852;
    var $add779 = $mul778 + $i_8852 | 0;
    var $add787 = $mul786 + $i_8852 | 0;
    var $arrayidx781 = $62 + $add779 * 12 | 0;
    var $151 = HEAPF32[$arrayidx781 >> 2];
    var $mul783 = $sub782 * $151;
    var $arrayidx789 = $62 + $add787 * 12 | 0;
    var $152 = HEAPF32[$arrayidx789 >> 2];
    var $mul790 = $sub767 * $152;
    var $add791 = $mul783 + $mul790;
    var $arrayidx793 = $64 + $i_8852 * 12 | 0;
    HEAPF32[$arrayidx793 >> 2] = $add791;
    var $arrayidx781_1 = $62 + $add779 * 12 + 4 | 0;
    var $153 = HEAPF32[$arrayidx781_1 >> 2];
    var $mul783_1 = $sub782 * $153;
    var $arrayidx789_1 = $62 + $add787 * 12 + 4 | 0;
    var $154 = HEAPF32[$arrayidx789_1 >> 2];
    var $mul790_1 = $sub767 * $154;
    var $add791_1 = $mul783_1 + $mul790_1;
    var $arrayidx793_1 = $64 + $i_8852 * 12 + 4 | 0;
    HEAPF32[$arrayidx793_1 >> 2] = $add791_1;
    var $arrayidx781_2 = $62 + $add779 * 12 + 8 | 0;
    var $155 = HEAPF32[$arrayidx781_2 >> 2];
    var $mul783_2 = $sub782 * $155;
    var $arrayidx789_2 = $62 + $add787 * 12 + 8 | 0;
    var $156 = HEAPF32[$arrayidx789_2 >> 2];
    var $mul790_2 = $sub767 * $156;
    var $add791_2 = $mul783_2 + $mul790_2;
    var $arrayidx793_2 = $64 + $i_8852 * 12 + 8 | 0;
    HEAPF32[$arrayidx793_2 >> 2] = $add791_2;
    var $inc798 = $i_8852 + 1 | 0;
    var $cmp770 = $inc798 >>> 0 < $136 >>> 0;
    if ($cmp770) {
      var $i_8852 = $inc798;
      label = 53;
      break;
    } else {
      label = 54;
      break;
    }
   case 54:
    var $cmp802861 = $137 << 16 >> 16 == 0;
    if ($cmp802861) {
      var $170 = 0;
      label = 59;
      break;
    } else {
      label = 55;
      break;
    }
   case 55:
    var $arrayidx841 = $67 + $row_7866 * 12 | 0;
    var $arrayidx841_1 = $67 + $row_7866 * 12 + 4 | 0;
    var $arrayidx841_2 = $67 + $row_7866 * 12 + 8 | 0;
    var $col_2862 = 0;
    var $pix_0863 = $arraydecay747;
    var $prev_sroa_2_0 = $prev_sroa_2_4_copyload;
    var $prev_sroa_1_0 = $prev_sroa_1_2_copyload;
    var $prev_sroa_0_0 = $prev_sroa_0_0_copyload;
    label = 56;
    break;
   case 56:
    var $prev_sroa_0_0;
    var $prev_sroa_1_0;
    var $prev_sroa_2_0;
    var $pix_0863;
    var $col_2862;
    var $conv832 = $col_2862 | 0;
    var $157 = HEAP16[$pix_0863 >> 1];
    var $conv810 = $157 << 16 >> 16;
    var $conv812 = $prev_sroa_0_0 << 16 >> 16;
    var $sub813 = $conv810 - $conv812 | 0;
    var $conv818 = $157 << 16 >> 16;
    var $mul819 = $sub813 * $sub813 & -1;
    var $shr696 = $mul819 >>> 14;
    var $add820 = $shr696 + $sub813 | 0;
    var $conv821 = $add820 | 0;
    var $158 = HEAPF32[$cfilt >> 2];
    var $mul822 = $158 * $conv821;
    var $159 = HEAPF32[$arrayidx740_1 >> 2];
    var $sub826 = $mul822 - $159;
    var $conv827 = $sub826;
    var $160 = HEAPF32[$arrayidx740 >> 2];
    var $conv831 = $160;
    var $conv833 = $_pre132 & 65535;
    var $conv834 = $conv833 | 0;
    var $div835 = $conv832 / $conv834;
    var $conv836 = $div835;
    var $sub837 = $conv836 - .5;
    var $mul838 = $conv831 * $sub837;
    var $sub839 = $conv827 - $mul838;
    var $161 = HEAPF32[$arrayidx841 >> 2];
    var $conv842 = $161;
    var $sub843 = $sub839 - $conv842;
    var $call844 = Math.floor($sub843);
    var $add845 = $conv818 + $call844;
    var $conv846 = $add845 & -1;
    HEAP32[$arrayidx847 >> 2] = $conv846;
    var $arrayidx809_1 = $pix_0863 + 2 | 0;
    var $162 = HEAP16[$arrayidx809_1 >> 1];
    var $conv810_1 = $162 << 16 >> 16;
    var $conv812_1 = $prev_sroa_1_0 << 16 >> 16;
    var $sub813_1 = $conv810_1 - $conv812_1 | 0;
    var $conv818_1 = $162 << 16 >> 16;
    var $mul819_1 = $sub813_1 * $sub813_1 & -1;
    var $shr696_1 = $mul819_1 >>> 14;
    var $add820_1 = $shr696_1 + $sub813_1 | 0;
    var $conv821_1 = $add820_1 | 0;
    var $mul822_1 = $158 * $conv821_1;
    var $163 = HEAPF32[$arrayidx825_1 >> 2];
    var $sub826_1 = $mul822_1 - $163;
    var $conv827_1 = $sub826_1;
    var $164 = HEAPF32[$arrayidx830_1 >> 2];
    var $conv831_1 = $164;
    var $mul838_1 = $conv831_1 * $sub837;
    var $sub839_1 = $conv827_1 - $mul838_1;
    var $165 = HEAPF32[$arrayidx841_1 >> 2];
    var $conv842_1 = $165;
    var $sub843_1 = $sub839_1 - $conv842_1;
    var $call844_1 = Math.floor($sub843_1);
    var $add845_1 = $conv818_1 + $call844_1;
    var $conv846_1 = $add845_1 & -1;
    HEAP32[$arrayidx847_1 >> 2] = $conv846_1;
    var $arrayidx809_2 = $pix_0863 + 4 | 0;
    var $166 = HEAP16[$arrayidx809_2 >> 1];
    var $conv810_2 = $166 << 16 >> 16;
    var $conv812_2 = $prev_sroa_2_0 << 16 >> 16;
    var $sub813_2 = $conv810_2 - $conv812_2 | 0;
    var $conv818_2 = $166 << 16 >> 16;
    var $mul819_2 = $sub813_2 * $sub813_2 & -1;
    var $shr696_2 = $mul819_2 >>> 14;
    var $add820_2 = $shr696_2 + $sub813_2 | 0;
    var $conv821_2 = $add820_2 | 0;
    var $mul822_2 = $158 * $conv821_2;
    var $167 = HEAPF32[$arrayidx825_2 >> 2];
    var $sub826_2 = $mul822_2 - $167;
    var $conv827_2 = $sub826_2;
    var $168 = HEAPF32[$arrayidx830_2 >> 2];
    var $conv831_2 = $168;
    var $mul838_2 = $conv831_2 * $sub837;
    var $sub839_2 = $conv827_2 - $mul838_2;
    var $169 = HEAPF32[$arrayidx841_2 >> 2];
    var $conv842_2 = $169;
    var $sub843_2 = $sub839_2 - $conv842_2;
    var $call844_2 = Math.floor($sub843_2);
    var $add845_2 = $conv818_2 + $call844_2;
    var $conv846_2 = $add845_2 & -1;
    HEAP32[$arrayidx847_2 >> 2] = $conv846_2;
    var $mul857 = $conv846 * $conv846 & -1;
    var $shr858695 = $mul857 >>> 14;
    var $mul864 = $shr858695 * $conv846 & -1;
    var $shr865 = $mul864 >> 14;
    var $mul874 = $conv846_2 * $conv846_1 & -1;
    var $shr875 = $mul874 >> 14;
    var $mul857_1 = $conv846_1 * $conv846_1 & -1;
    var $shr858695_1 = $mul857_1 >>> 14;
    var $mul864_1 = $shr858695_1 * $conv846_1 & -1;
    var $shr865_1 = $mul864_1 >> 14;
    var $mul874_1 = $conv846 * $conv846_2 & -1;
    var $shr875_1 = $mul874_1 >> 14;
    var $mul857_2 = $conv846_2 * $conv846_2 & -1;
    var $shr858695_2 = $mul857_2 >>> 14;
    var $mul864_2 = $shr858695_2 * $conv846_2 & -1;
    var $shr865_2 = $mul864_2 >> 14;
    var $mul874_2 = $conv846_1 * $conv846 & -1;
    var $shr875_2 = $mul874_2 >> 14;
    var $div913 = ($col_2862 | 0) / ($div383 | 0) & -1;
    var $rem916 = ($col_2862 | 0) % ($div383 | 0);
    var $sub917 = $div383 - $rem916 | 0;
    var $conv918 = $sub917 | 0;
    var $add921 = $div913 + 1 | 0;
    var $conv925 = $rem916 | 0;
    var $conv899 = $shr858695 | 0;
    var $conv899_1 = $shr858695_1 | 0;
    var $conv899_2 = $shr858695_2 | 0;
    var $conv899_1994 = $shr875_2 | 0;
    var $conv899_1_1 = $shr875_1 | 0;
    var $conv899_2_1 = $shr875 | 0;
    var $conv899_2999 = $shr865 | 0;
    var $conv899_1_2 = $shr865_1 | 0;
    var $conv899_2_2 = $shr865_2 | 0;
    var $c_25859 = 0;
    var $384 = $conv846;
    label = 156;
    break;
   case 57:
    var $inc952 = $col_2862 + 1 | 0;
    var $cmp802 = ($inc952 | 0) < ($conv833 | 0);
    if ($cmp802) {
      label = 58;
      break;
    } else {
      var $170 = $_pre132;
      label = 59;
      break;
    }
   case 58:
    var $add_ptr950 = $pix_0863 + 8 | 0;
    var $col_2862 = $inc952;
    var $pix_0863 = $add_ptr950;
    var $prev_sroa_2_0 = $166;
    var $prev_sroa_1_0 = $162;
    var $prev_sroa_0_0 = $157;
    label = 56;
    break;
   case 59:
    var $170;
    var $inc955 = $row_7866 + 1 | 0;
    var $cmp711 = ($inc955 | 0) < ($conv723 | 0);
    if ($cmp711) {
      label = 60;
      break;
    } else {
      label = 61;
      break;
    }
   case 60:
    var $_pre160 = HEAP32[$arrayidx375 >> 2];
    var $row_7866 = $inc955;
    var $137 = $170;
    var $136 = $_pre160;
    label = 51;
    break;
   case 61:
    _free($call385);
    _free($call376);
    _free($call371);
    var $call958 = _foveon_camf_matrix($arraydecay370, 5580256);
    var $171 = $call958;
    var $tobool959 = ($call958 | 0) == 0;
    if ($tobool959) {
      label = 74;
      break;
    } else {
      label = 62;
      break;
    }
   case 62:
    var $172 = HEAP32[$arraydecay370 >> 2];
    var $cmp963847 = ($172 | 0) == 0;
    if ($cmp963847) {
      label = 73;
      break;
    } else {
      label = 63;
      break;
    }
   case 63:
    var $173 = HEAP32[$arraydecay7 >> 2];
    var $arrayidx972 = $keep + 4 | 0;
    var $174 = HEAP32[$arrayidx972 >> 2];
    var $_pre131 = HEAP16[5398712 >> 1];
    var $i_10848 = 0;
    label = 64;
    break;
   case 64:
    var $i_10848;
    var $arrayidx966 = $171 + ($i_10848 << 2) | 0;
    var $175 = HEAP32[$arrayidx966 >> 2];
    var $shr967 = $175 >>> 8;
    var $and = $shr967 & 4095;
    var $sub969 = $and - $173 | 0;
    var $shr971 = $175 >>> 20;
    var $sub973 = $shr971 - $174 | 0;
    var $sub974 = $sub973 - 1 | 0;
    var $conv975 = $_pre131 & 65535;
    var $sub976 = $conv975 - 3 | 0;
    var $cmp977 = $sub974 >>> 0 > $sub976 >>> 0;
    if ($cmp977) {
      label = 72;
      break;
    } else {
      label = 65;
      break;
    }
   case 65:
    var $sub980 = $sub969 - 1 | 0;
    var $176 = HEAP16[5242964 >> 1];
    var $conv981 = $176 & 65535;
    var $sub982 = $conv981 - 3 | 0;
    var $cmp983 = $sub980 >>> 0 > $sub982 >>> 0;
    if ($cmp983) {
      label = 72;
      break;
    } else {
      label = 66;
      break;
    }
   case 66:
    var $177 = HEAP32[5264108 >> 2];
    var $j_4844 = 0;
    var $sum_0845 = 0;
    var $fsum_sroa_2_2 = 0;
    var $fsum_sroa_1_2 = 0;
    var $fsum_sroa_0_2 = 0;
    label = 67;
    break;
   case 67:
    var $fsum_sroa_0_2;
    var $fsum_sroa_1_2;
    var $fsum_sroa_2_2;
    var $sum_0845;
    var $j_4844;
    var $shl = 1 << $j_4844;
    var $and992 = $175 & $shl;
    var $tobool993 = ($and992 | 0) == 0;
    if ($tobool993) {
      var $sum_1 = $sum_0845;
      var $fsum_sroa_2_3 = $fsum_sroa_2_2;
      var $fsum_sroa_1_3 = $fsum_sroa_1_2;
      var $fsum_sroa_0_3 = $fsum_sroa_0_2;
      label = 69;
      break;
    } else {
      label = 68;
      break;
    }
   case 68:
    var $mul999 = $j_4844 << 1;
    var $arrayidx1000 = 5398912 + ($mul999 << 1) | 0;
    var $178 = HEAP16[$arrayidx1000 >> 1];
    var $conv1001 = $178 << 16 >> 16;
    var $add1002 = $conv1001 + $sub973 | 0;
    var $mul1004 = $add1002 * $conv981 & -1;
    var $add1005 = $mul1004 + $sub969 | 0;
    var $add1007694 = $mul999 | 1;
    var $arrayidx1008 = 5398912 + ($add1007694 << 1) | 0;
    var $179 = HEAP16[$arrayidx1008 >> 1];
    var $conv1009 = $179 << 16 >> 16;
    var $add1010 = $add1005 + $conv1009 | 0;
    var $arrayidx1012 = $177 + ($add1010 << 3) | 0;
    var $180 = HEAP16[$arrayidx1012 >> 1];
    var $conv1014 = $180 << 16 >> 16;
    var $add1016 = $fsum_sroa_0_2 + $conv1014;
    var $arrayidx1012_1 = $177 + ($add1010 << 3) + 2 | 0;
    var $181 = HEAP16[$arrayidx1012_1 >> 1];
    var $conv1014_1 = $181 << 16 >> 16;
    var $add1016_1 = $fsum_sroa_1_2 + $conv1014_1;
    var $arrayidx1012_2 = $177 + ($add1010 << 3) + 4 | 0;
    var $182 = HEAP16[$arrayidx1012_2 >> 1];
    var $conv1014_2 = $182 << 16 >> 16;
    var $add1016_2 = $fsum_sroa_2_2 + $conv1014_2;
    var $inc1020 = $sum_0845 + 1 | 0;
    var $sum_1 = $inc1020;
    var $fsum_sroa_2_3 = $add1016_2;
    var $fsum_sroa_1_3 = $add1016_1;
    var $fsum_sroa_0_3 = $add1016;
    label = 69;
    break;
   case 69:
    var $fsum_sroa_0_3;
    var $fsum_sroa_1_3;
    var $fsum_sroa_2_3;
    var $sum_1;
    var $inc1023 = $j_4844 + 1 | 0;
    var $exitcond984 = ($inc1023 | 0) == 8;
    if ($exitcond984) {
      label = 70;
      break;
    } else {
      var $j_4844 = $inc1023;
      var $sum_0845 = $sum_1;
      var $fsum_sroa_2_2 = $fsum_sroa_2_3;
      var $fsum_sroa_1_2 = $fsum_sroa_1_3;
      var $fsum_sroa_0_2 = $fsum_sroa_0_3;
      label = 67;
      break;
    }
   case 70:
    var $tobool1025 = ($sum_1 | 0) == 0;
    if ($tobool1025) {
      label = 72;
      break;
    } else {
      label = 71;
      break;
    }
   case 71:
    var $conv1032 = $sum_1 | 0;
    var $div1033 = $fsum_sroa_0_3 / $conv1032;
    var $conv1034 = $div1033 & -1;
    var $mul1036 = $conv981 * $sub973 & -1;
    var $add1037 = $mul1036 + $sub969 | 0;
    var $arrayidx1039 = $177 + ($add1037 << 3) | 0;
    HEAP16[$arrayidx1039 >> 1] = $conv1034;
    var $div1033_1 = $fsum_sroa_1_3 / $conv1032;
    var $conv1034_1 = $div1033_1 & -1;
    var $arrayidx1039_1 = $177 + ($add1037 << 3) + 2 | 0;
    HEAP16[$arrayidx1039_1 >> 1] = $conv1034_1;
    var $div1033_2 = $fsum_sroa_2_3 / $conv1032;
    var $conv1034_2 = $div1033_2 & -1;
    var $arrayidx1039_2 = $177 + ($add1037 << 3) + 4 | 0;
    HEAP16[$arrayidx1039_2 >> 1] = $conv1034_2;
    label = 72;
    break;
   case 72:
    var $inc1045 = $i_10848 + 1 | 0;
    var $cmp963 = $inc1045 >>> 0 < $172 >>> 0;
    if ($cmp963) {
      var $i_10848 = $inc1045;
      label = 64;
      break;
    } else {
      label = 73;
      break;
    }
   case 73:
    _free($call958);
    label = 74;
    break;
   case 74:
    var $183 = HEAP16[5242964 >> 1];
    var $conv1048 = $183 & 65535;
    var $mul1049 = $conv1048 * 5 & -1;
    var $call1050 = _calloc($mul1049, 12);
    var $184 = $call1050;
    _merror($call1050, 5580032);
    var $185 = HEAP16[5242964 >> 1];
    var $conv1058 = $185 & 65535;
    var $add_ptr1060_1 = $184 + $conv1058 * 12 | 0;
    var $mul1059_2 = $conv1058 << 1;
    var $add_ptr1060_2 = $184 + $mul1059_2 * 12 | 0;
    var $mul1059_3 = $conv1058 * 3 & -1;
    var $add_ptr1060_3 = $184 + $mul1059_3 * 12 | 0;
    var $mul1059_4 = $conv1058 << 2;
    var $add_ptr1060_4 = $184 + $mul1059_4 * 12 | 0;
    var $186 = HEAP16[5398712 >> 1];
    var $conv1066836 = $186 & 65535;
    var $sub1067837 = $conv1066836 - 2 | 0;
    var $cmp1068838 = ($sub1067837 | 0) > 2;
    if ($cmp1068838) {
      var $row_8839 = 2;
      var $smlast_0840 = -1;
      var $smred_p_0841 = 0;
      var $indvars_iv979 = 4;
      var $smrow_sroa_4_0 = $add_ptr1060_4;
      var $smrow_sroa_3_0 = $add_ptr1060_3;
      var $smrow_sroa_2_0 = $add_ptr1060_2;
      var $smrow_sroa_1_0 = $add_ptr1060_1;
      var $smrow_sroa_0_0 = $184;
      label = 75;
      break;
    } else {
      var $smrow_sroa_4_3 = $add_ptr1060_4;
      var $smrow_sroa_3_3 = $add_ptr1060_3;
      var $smrow_sroa_2_3 = $add_ptr1060_2;
      var $smrow_sroa_1_3 = $add_ptr1060_1;
      var $smrow_sroa_0_3 = $184;
      label = 84;
      break;
    }
   case 75:
    var $smrow_sroa_0_0;
    var $smrow_sroa_1_0;
    var $smrow_sroa_2_0;
    var $smrow_sroa_3_0;
    var $smrow_sroa_4_0;
    var $indvars_iv979;
    var $smred_p_0841;
    var $smlast_0840;
    var $row_8839;
    var $add1071 = $row_8839 + 2 | 0;
    var $cmp1072826 = ($smlast_0840 | 0) < ($add1071 | 0);
    if ($cmp1072826) {
      var $smlast_1827 = $smlast_0840;
      var $smrow_sroa_4_1 = $smrow_sroa_4_0;
      var $smrow_sroa_3_1 = $smrow_sroa_3_0;
      var $smrow_sroa_2_1 = $smrow_sroa_2_0;
      var $smrow_sroa_1_1 = $smrow_sroa_1_0;
      var $smrow_sroa_0_1 = $smrow_sroa_0_0;
      label = 77;
      break;
    } else {
      var $smlast_1_lcssa = $smlast_0840;
      var $smrow_sroa_4_2 = $smrow_sroa_4_0;
      var $smrow_sroa_3_2 = $smrow_sroa_3_0;
      var $smrow_sroa_2_2 = $smrow_sroa_2_0;
      var $smrow_sroa_1_2 = $smrow_sroa_1_0;
      var $smrow_sroa_0_2 = $smrow_sroa_0_0;
      label = 80;
      break;
    }
   case 76:
    var $exitcond981 = ($inc1085 | 0) == ($indvars_iv979 | 0);
    if ($exitcond981) {
      var $smlast_1_lcssa = $indvars_iv979;
      var $smrow_sroa_4_2 = $smrow_sroa_0_1;
      var $smrow_sroa_3_2 = $smrow_sroa_4_1;
      var $smrow_sroa_2_2 = $smrow_sroa_3_1;
      var $smrow_sroa_1_2 = $smrow_sroa_2_1;
      var $smrow_sroa_0_2 = $smrow_sroa_1_1;
      label = 80;
      break;
    } else {
      var $smrow_sroa_1_1 = $smrow_sroa_2_1;
      var $smrow_sroa_2_1 = $smrow_sroa_3_1;
      var $smrow_sroa_3_1 = $smrow_sroa_4_1;
      var $smrow_sroa_4_1 = $smrow_sroa_0_1;
      var $smlast_1827 = $inc1085;
      var $smrow_sroa_0_1 = $smrow_sroa_1_1;
      label = 77;
      break;
    }
   case 77:
    var $smrow_sroa_0_1;
    var $smrow_sroa_1_1;
    var $smrow_sroa_2_1;
    var $smrow_sroa_3_1;
    var $smrow_sroa_4_1;
    var $smlast_1827;
    var $inc1085 = $smlast_1827 + 1 | 0;
    var $sub1093822 = $conv1058 - 2 | 0;
    var $cmp1094823 = ($sub1093822 | 0) > 2;
    if ($cmp1094823) {
      label = 78;
      break;
    } else {
      label = 76;
      break;
    }
   case 78:
    var $mul1087 = $conv1058 * $inc1085 & -1;
    var $187 = HEAP32[5264108 >> 2];
    var $add1088 = $mul1087 + 2 | 0;
    var $arraydecay1090 = $187 + ($add1088 << 3) | 0;
    var $col_3824 = 2;
    var $pix_1825 = $arraydecay1090;
    label = 79;
    break;
   case 79:
    var $pix_1825;
    var $col_3824;
    var $188 = HEAP16[$pix_1825 >> 1];
    var $conv1098 = $188 << 16 >> 16;
    var $mul1099 = $conv1098 * 6 & -1;
    var $arrayidx1100 = $pix_1825 - 8 | 0;
    var $189 = HEAP16[$arrayidx1100 >> 1];
    var $conv1101 = $189 << 16 >> 16;
    var $arrayidx1102 = $pix_1825 + 8 | 0;
    var $190 = HEAP16[$arrayidx1102 >> 1];
    var $conv1103 = $190 << 16 >> 16;
    var $add1104 = $conv1103 + $conv1101 | 0;
    var $mul1105 = $add1104 << 2;
    var $arrayidx1107 = $pix_1825 - 16 | 0;
    var $191 = HEAP16[$arrayidx1107 >> 1];
    var $conv1108 = $191 << 16 >> 16;
    var $arrayidx1110 = $pix_1825 + 16 | 0;
    var $192 = HEAP16[$arrayidx1110 >> 1];
    var $conv1111 = $192 << 16 >> 16;
    var $add1106 = $mul1099 + 8 | 0;
    var $add1109 = $add1106 + $conv1108 | 0;
    var $add1112 = $add1109 + $mul1105 | 0;
    var $add1113 = $add1112 + $conv1111 | 0;
    var $shr1114 = $add1113 >> 4;
    var $arrayidx1117 = $smrow_sroa_0_1 + $col_3824 * 12 | 0;
    HEAP32[$arrayidx1117 >> 2] = $shr1114;
    var $inc1120 = $col_3824 + 1 | 0;
    var $cmp1094 = ($inc1120 | 0) < ($sub1093822 | 0);
    if ($cmp1094) {
      var $col_3824 = $inc1120;
      var $pix_1825 = $arrayidx1102;
      label = 79;
      break;
    } else {
      label = 76;
      break;
    }
   case 80:
    var $smrow_sroa_0_2;
    var $smrow_sroa_1_2;
    var $smrow_sroa_2_2;
    var $smrow_sroa_3_2;
    var $smrow_sroa_4_2;
    var $smlast_1_lcssa;
    var $conv1128829 = $185 & 65535;
    var $sub1129830 = $conv1128829 - 2 | 0;
    var $cmp1130831 = ($sub1129830 | 0) > 2;
    if ($cmp1130831) {
      label = 81;
      break;
    } else {
      var $smred_p_1_lcssa = $smred_p_0841;
      label = 83;
      break;
    }
   case 81:
    var $mul1123 = $conv1128829 * $row_8839 & -1;
    var $193 = HEAP32[5264108 >> 2];
    var $add1124 = $mul1123 + 2 | 0;
    var $arraydecay1126 = $193 + ($add1124 << 3) | 0;
    var $col_4832 = 2;
    var $smred_p_1833 = $smred_p_0841;
    var $pix_2834 = $arraydecay1126;
    label = 82;
    break;
   case 82:
    var $pix_2834;
    var $smred_p_1833;
    var $col_4832;
    var $arrayidx1135 = $smrow_sroa_2_2 + $col_4832 * 12 | 0;
    var $194 = HEAP32[$arrayidx1135 >> 2];
    var $mul1136 = $194 * 6 & -1;
    var $arrayidx1139 = $smrow_sroa_1_2 + $col_4832 * 12 | 0;
    var $195 = HEAP32[$arrayidx1139 >> 2];
    var $arrayidx1142 = $smrow_sroa_3_2 + $col_4832 * 12 | 0;
    var $196 = HEAP32[$arrayidx1142 >> 2];
    var $add1143 = $196 + $195 | 0;
    var $mul1144 = $add1143 << 2;
    var $arrayidx1148 = $smrow_sroa_0_2 + $col_4832 * 12 | 0;
    var $197 = HEAP32[$arrayidx1148 >> 2];
    var $arrayidx1152 = $smrow_sroa_4_2 + $col_4832 * 12 | 0;
    var $198 = HEAP32[$arrayidx1152 >> 2];
    var $add1145 = $mul1136 + 8 | 0;
    var $add1149 = $add1145 + $mul1144 | 0;
    var $add1153 = $add1149 + $197 | 0;
    var $add1154 = $add1153 + $198 | 0;
    var $shr1155 = $add1154 >> 4;
    var $cmp1156 = ($col_4832 | 0) == 2;
    var $shr1155_smred_p_1 = $cmp1156 ? $shr1155 : $smred_p_1833;
    var $199 = HEAP16[$pix_2834 >> 1];
    var $conv1161 = $199 << 16 >> 16;
    var $mul1164 = $shr1155 * 7 & -1;
    var $add1165 = $mul1164 + $shr1155_smred_p_1 | 0;
    var $shr1166 = $add1165 >> 3;
    var $sub1167 = $conv1161 - $shr1166 | 0;
    var $shr1168 = $sub1167 >> 3;
    var $add1169 = $shr1168 + $conv1161 | 0;
    var $cmp1170 = ($add1169 | 0) > 32e3;
    var $200 = $add1169 & 65535;
    var $conv1174 = $cmp1170 ? 32e3 : $200;
    HEAP16[$pix_2834 >> 1] = $conv1174;
    var $add_ptr1176 = $pix_2834 + 8 | 0;
    var $inc1178 = $col_4832 + 1 | 0;
    var $cmp1130 = ($inc1178 | 0) < ($sub1129830 | 0);
    if ($cmp1130) {
      var $col_4832 = $inc1178;
      var $smred_p_1833 = $shr1155;
      var $pix_2834 = $add_ptr1176;
      label = 82;
      break;
    } else {
      var $smred_p_1_lcssa = $shr1155;
      label = 83;
      break;
    }
   case 83:
    var $smred_p_1_lcssa;
    var $inc1181 = $row_8839 + 1 | 0;
    var $cmp1068 = ($inc1181 | 0) < ($sub1067837 | 0);
    var $indvars_iv_next980 = $indvars_iv979 + 1 | 0;
    if ($cmp1068) {
      var $row_8839 = $inc1181;
      var $smlast_0840 = $smlast_1_lcssa;
      var $smred_p_0841 = $smred_p_1_lcssa;
      var $indvars_iv979 = $indvars_iv_next980;
      var $smrow_sroa_4_0 = $smrow_sroa_4_2;
      var $smrow_sroa_3_0 = $smrow_sroa_3_2;
      var $smrow_sroa_2_0 = $smrow_sroa_2_2;
      var $smrow_sroa_1_0 = $smrow_sroa_1_2;
      var $smrow_sroa_0_0 = $smrow_sroa_0_2;
      label = 75;
      break;
    } else {
      var $smrow_sroa_4_3 = $smrow_sroa_4_2;
      var $smrow_sroa_3_3 = $smrow_sroa_3_2;
      var $smrow_sroa_2_3 = $smrow_sroa_2_2;
      var $smrow_sroa_1_3 = $smrow_sroa_1_2;
      var $smrow_sroa_0_3 = $smrow_sroa_0_2;
      label = 84;
      break;
    }
   case 84:
    var $smrow_sroa_0_3;
    var $smrow_sroa_1_3;
    var $smrow_sroa_2_3;
    var $smrow_sroa_3_3;
    var $smrow_sroa_4_3;
    var $arrayidx1187 = $satlev | 0;
    var $201 = HEAP32[$arrayidx1187 >> 2];
    var $conv1188 = $201 | 0;
    var $202 = HEAPF32[$arrayidx187 >> 2];
    var $div1190 = $conv1188 / $202;
    var $conv1191 = $div1190 & -1;
    var $cmp1192 = ($conv1191 | 0) < 65535;
    var $conv1191_min_0 = $cmp1192 ? $conv1191 : 65535;
    var $arrayidx1187_1 = $satlev + 4 | 0;
    var $203 = HEAP32[$arrayidx1187_1 >> 2];
    var $conv1188_1 = $203 | 0;
    var $204 = HEAPF32[$arrayidx187_1 >> 2];
    var $div1190_1 = $conv1188_1 / $204;
    var $conv1191_1 = $div1190_1 & -1;
    var $cmp1192_1 = ($conv1191_min_0 | 0) > ($conv1191_1 | 0);
    var $conv1191_min_0_1 = $cmp1192_1 ? $conv1191_1 : $conv1191_min_0;
    var $arrayidx1187_2 = $satlev + 8 | 0;
    var $205 = HEAP32[$arrayidx1187_2 >> 2];
    var $conv1188_2 = $205 | 0;
    var $206 = HEAPF32[$arrayidx187_2 >> 2];
    var $div1190_2 = $conv1188_2 / $206;
    var $conv1191_2 = $div1190_2 & -1;
    var $cmp1192_2 = ($conv1191_min_0_1 | 0) > ($conv1191_2 | 0);
    var $conv1191_min_0_2 = $cmp1192_2 ? $conv1191_2 : $conv1191_min_0_1;
    var $mul1199 = $conv1191_min_0_2 * 9 & -1;
    var $shr1200 = $mul1199 >> 4;
    var $207 = HEAP32[5264108 >> 2];
    var $arraydecay1202 = $207 | 0;
    var $mul1206813 = $conv1058 * $conv1066836 & -1;
    var $arraydecay1208814 = $207 + ($mul1206813 << 3) | 0;
    var $cmp1209815 = ($mul1206813 | 0) != 0;
    if ($cmp1209815) {
      label = 85;
      break;
    } else {
      label = 86;
      break;
    }
   case 85:
    var $mul1253 = $shr1200 << 1;
    var $pix_3816 = $arraydecay1202;
    label = 87;
    break;
   case 86:
    if ($cmp1068838) {
      var $row_9805 = 2;
      var $smlast_2806 = -1;
      var $indvars_iv970 = 4;
      var $smrow_sroa_4_4 = $smrow_sroa_4_3;
      var $smrow_sroa_3_4 = $smrow_sroa_3_3;
      var $smrow_sroa_2_4 = $smrow_sroa_2_3;
      var $smrow_sroa_1_4 = $smrow_sroa_1_3;
      var $smrow_sroa_0_4 = $smrow_sroa_0_3;
      label = 94;
      break;
    } else {
      var $smrow_sroa_2_11 = $smrow_sroa_2_3;
      var $smrow_sroa_1_11 = $smrow_sroa_1_3;
      var $smrow_sroa_0_11 = $smrow_sroa_0_3;
      label = 116;
      break;
    }
   case 87:
    var $pix_3816;
    var $208 = HEAP16[$pix_3816 >> 1];
    var $conv1213 = $208 << 16 >> 16;
    var $cmp1214 = ($conv1213 | 0) > ($shr1200 | 0);
    if ($cmp1214) {
      label = 88;
      break;
    } else {
      label = 93;
      break;
    }
   case 88:
    var $arrayidx1217 = $pix_3816 + 2 | 0;
    var $209 = HEAP16[$arrayidx1217 >> 1];
    var $conv1218 = $209 << 16 >> 16;
    var $cmp1219 = ($conv1218 | 0) > ($shr1200 | 0);
    if ($cmp1219) {
      label = 89;
      break;
    } else {
      label = 93;
      break;
    }
   case 89:
    var $arrayidx1222 = $pix_3816 + 4 | 0;
    var $210 = HEAP16[$arrayidx1222 >> 1];
    var $conv1223 = $210 << 16 >> 16;
    var $cmp1224 = ($conv1223 | 0) > ($shr1200 | 0);
    if ($cmp1224) {
      label = 90;
      break;
    } else {
      label = 93;
      break;
    }
   case 90:
    var $cmp1236 = ($conv1213 | 0) > ($conv1218 | 0);
    var $conv1235_min_2 = $cmp1236 ? $conv1218 : $conv1213;
    var $cmp1244 = ($conv1213 | 0) < ($conv1218 | 0);
    var $max_1 = $cmp1244 ? $conv1218 : $conv1213;
    var $cmp1236_1 = ($conv1235_min_2 | 0) > ($conv1223 | 0);
    var $conv1235_min_2_1 = $cmp1236_1 ? $conv1223 : $conv1235_min_2;
    var $cmp1244_1 = ($max_1 | 0) < ($conv1223 | 0);
    var $max_1_1 = $cmp1244_1 ? $conv1223 : $max_1;
    var $cmp1254 = ($conv1235_min_2_1 | 0) < ($mul1253 | 0);
    if ($cmp1254) {
      label = 92;
      break;
    } else {
      label = 91;
      break;
    }
   case 91:
    var $conv1257 = $max_1_1 & 65535;
    HEAP16[$arrayidx1222 >> 1] = $conv1257;
    HEAP16[$arrayidx1217 >> 1] = $conv1257;
    HEAP16[$pix_3816 >> 1] = $conv1257;
    label = 93;
    break;
   case 92:
    var $sub1262 = $conv1235_min_2_1 - $shr1200 | 0;
    var $shl1263 = $sub1262 << 14;
    var $div1264 = ($shl1263 | 0) / ($shr1200 | 0) & -1;
    var $sub1265 = 16384 - $div1264 | 0;
    var $mul1266 = $sub1265 * $sub1265 & -1;
    var $shr1267691 = $mul1266 >>> 14;
    var $sub1268 = 16384 - $shr1267691 | 0;
    var $mul1269 = $sub1268 * $sub1268 & -1;
    var $shr1270692 = $mul1269 >>> 14;
    var $sub1277 = $max_1_1 - $conv1213 | 0;
    var $mul1278 = $sub1277 * $shr1270692 & -1;
    var $shr1279693 = $mul1278 >>> 14;
    var $add1282 = $shr1279693 + $conv1213 | 0;
    var $conv1283 = $add1282 & 65535;
    HEAP16[$pix_3816 >> 1] = $conv1283;
    var $sub1277_1 = $max_1_1 - $conv1218 | 0;
    var $mul1278_1 = $sub1277_1 * $shr1270692 & -1;
    var $shr1279693_1 = $mul1278_1 >>> 14;
    var $add1282_1 = $shr1279693_1 + $conv1218 | 0;
    var $conv1283_1 = $add1282_1 & 65535;
    HEAP16[$arrayidx1217 >> 1] = $conv1283_1;
    var $sub1277_2 = $max_1_1 - $conv1223 | 0;
    var $mul1278_2 = $sub1277_2 * $shr1270692 & -1;
    var $shr1279693_2 = $mul1278_2 >>> 14;
    var $add1282_2 = $shr1279693_2 + $conv1223 | 0;
    var $conv1283_2 = $add1282_2 & 65535;
    HEAP16[$arrayidx1222 >> 1] = $conv1283_2;
    label = 93;
    break;
   case 93:
    var $add_ptr1289 = $pix_3816 + 8 | 0;
    var $cmp1209 = $add_ptr1289 >>> 0 < $arraydecay1208814 >>> 0;
    if ($cmp1209) {
      var $pix_3816 = $add_ptr1289;
      label = 87;
      break;
    } else {
      label = 86;
      break;
    }
   case 94:
    var $smrow_sroa_0_4;
    var $smrow_sroa_1_4;
    var $smrow_sroa_2_4;
    var $smrow_sroa_3_4;
    var $smrow_sroa_4_4;
    var $indvars_iv970;
    var $smlast_2806;
    var $row_9805;
    var $add1298 = $row_9805 + 2 | 0;
    var $cmp1299792 = ($smlast_2806 | 0) < ($add1298 | 0);
    if ($cmp1299792) {
      var $smlast_3793 = $smlast_2806;
      var $smrow_sroa_4_6 = $smrow_sroa_4_4;
      var $smrow_sroa_3_6 = $smrow_sroa_3_4;
      var $smrow_sroa_2_6 = $smrow_sroa_2_4;
      var $smrow_sroa_1_6 = $smrow_sroa_1_4;
      var $smrow_sroa_0_6 = $smrow_sroa_0_4;
      label = 97;
      break;
    } else {
      var $smlast_3_lcssa = $smlast_2806;
      var $smrow_sroa_4_7 = $smrow_sroa_4_4;
      var $smrow_sroa_3_7 = $smrow_sroa_3_4;
      var $smrow_sroa_2_7 = $smrow_sroa_2_4;
      var $smrow_sroa_1_7 = $smrow_sroa_1_4;
      var $smrow_sroa_0_7 = $smrow_sroa_0_4;
      label = 100;
      break;
    }
   case 95:
    var $smrow_sroa_0_5;
    var $smrow_sroa_1_5;
    var $smrow_sroa_2_5;
    var $smrow_sroa_3_5;
    var $smrow_sroa_4_5;
    if ($cmp1068838) {
      var $row_10783 = 2;
      var $smlast_4784 = -1;
      var $indvars_iv = 4;
      var $smrow_sroa_4_8 = $smrow_sroa_4_5;
      var $smrow_sroa_3_8 = $smrow_sroa_3_5;
      var $smrow_sroa_2_8 = $smrow_sroa_2_5;
      var $smrow_sroa_1_8 = $smrow_sroa_1_5;
      var $smrow_sroa_0_8 = $smrow_sroa_0_5;
      label = 105;
      break;
    } else {
      var $smrow_sroa_2_11 = $smrow_sroa_2_5;
      var $smrow_sroa_1_11 = $smrow_sroa_1_5;
      var $smrow_sroa_0_11 = $smrow_sroa_0_5;
      label = 116;
      break;
    }
   case 96:
    var $exitcond972 = ($inc1313 | 0) == ($indvars_iv970 | 0);
    if ($exitcond972) {
      var $smlast_3_lcssa = $indvars_iv970;
      var $smrow_sroa_4_7 = $smrow_sroa_0_6;
      var $smrow_sroa_3_7 = $smrow_sroa_4_6;
      var $smrow_sroa_2_7 = $smrow_sroa_3_6;
      var $smrow_sroa_1_7 = $smrow_sroa_2_6;
      var $smrow_sroa_0_7 = $smrow_sroa_1_6;
      label = 100;
      break;
    } else {
      var $smrow_sroa_1_6 = $smrow_sroa_2_6;
      var $smrow_sroa_2_6 = $smrow_sroa_3_6;
      var $smrow_sroa_3_6 = $smrow_sroa_4_6;
      var $smrow_sroa_4_6 = $smrow_sroa_0_6;
      var $smlast_3793 = $inc1313;
      var $smrow_sroa_0_6 = $smrow_sroa_1_6;
      label = 97;
      break;
    }
   case 97:
    var $smrow_sroa_0_6;
    var $smrow_sroa_1_6;
    var $smrow_sroa_2_6;
    var $smrow_sroa_3_6;
    var $smrow_sroa_4_6;
    var $smlast_3793;
    var $inc1313 = $smlast_3793 + 1 | 0;
    var $sub1321788 = $conv1058 - 2 | 0;
    var $cmp1322789 = ($sub1321788 | 0) > 2;
    if ($cmp1322789) {
      label = 98;
      break;
    } else {
      label = 96;
      break;
    }
   case 98:
    var $mul1315 = $conv1058 * $inc1313 & -1;
    var $add1316 = $mul1315 + 2 | 0;
    var $arraydecay1318 = $207 + ($add1316 << 3) | 0;
    var $col_5790 = 2;
    var $pix_4791 = $arraydecay1318;
    label = 99;
    break;
   case 99:
    var $pix_4791;
    var $col_5790;
    var $arrayidx1330 = $pix_4791 - 8 | 0;
    var $211 = HEAP16[$arrayidx1330 >> 1];
    var $conv1331 = $211 << 16 >> 16;
    var $212 = HEAP16[$pix_4791 >> 1];
    var $conv1333 = $212 << 16 >> 16;
    var $mul1334 = $conv1333 << 1;
    var $arrayidx1337 = $pix_4791 + 8 | 0;
    var $213 = HEAP16[$arrayidx1337 >> 1];
    var $conv1338 = $213 << 16 >> 16;
    var $add1335 = $conv1331 + 2 | 0;
    var $add1339 = $add1335 + $mul1334 | 0;
    var $add1340 = $add1339 + $conv1338 | 0;
    var $shr1341 = $add1340 >> 2;
    var $arrayidx1344 = $smrow_sroa_0_6 + $col_5790 * 12 | 0;
    HEAP32[$arrayidx1344 >> 2] = $shr1341;
    var $arrayidx1330_1 = $pix_4791 - 6 | 0;
    var $214 = HEAP16[$arrayidx1330_1 >> 1];
    var $conv1331_1 = $214 << 16 >> 16;
    var $arrayidx1332_1 = $pix_4791 + 2 | 0;
    var $215 = HEAP16[$arrayidx1332_1 >> 1];
    var $conv1333_1 = $215 << 16 >> 16;
    var $mul1334_1 = $conv1333_1 << 1;
    var $arrayidx1337_1 = $pix_4791 + 10 | 0;
    var $216 = HEAP16[$arrayidx1337_1 >> 1];
    var $conv1338_1 = $216 << 16 >> 16;
    var $add1335_1 = $conv1331_1 + 2 | 0;
    var $add1339_1 = $add1335_1 + $mul1334_1 | 0;
    var $add1340_1 = $add1339_1 + $conv1338_1 | 0;
    var $shr1341_1 = $add1340_1 >> 2;
    var $arrayidx1344_1 = $smrow_sroa_0_6 + $col_5790 * 12 + 4 | 0;
    HEAP32[$arrayidx1344_1 >> 2] = $shr1341_1;
    var $arrayidx1330_2 = $pix_4791 - 4 | 0;
    var $217 = HEAP16[$arrayidx1330_2 >> 1];
    var $conv1331_2 = $217 << 16 >> 16;
    var $arrayidx1332_2 = $pix_4791 + 4 | 0;
    var $218 = HEAP16[$arrayidx1332_2 >> 1];
    var $conv1333_2 = $218 << 16 >> 16;
    var $mul1334_2 = $conv1333_2 << 1;
    var $arrayidx1337_2 = $pix_4791 + 12 | 0;
    var $219 = HEAP16[$arrayidx1337_2 >> 1];
    var $conv1338_2 = $219 << 16 >> 16;
    var $add1335_2 = $conv1331_2 + 2 | 0;
    var $add1339_2 = $add1335_2 + $mul1334_2 | 0;
    var $add1340_2 = $add1339_2 + $conv1338_2 | 0;
    var $shr1341_2 = $add1340_2 >> 2;
    var $arrayidx1344_2 = $smrow_sroa_0_6 + $col_5790 * 12 + 8 | 0;
    HEAP32[$arrayidx1344_2 >> 2] = $shr1341_2;
    var $inc1350 = $col_5790 + 1 | 0;
    var $cmp1322 = ($inc1350 | 0) < ($sub1321788 | 0);
    if ($cmp1322) {
      var $col_5790 = $inc1350;
      var $pix_4791 = $arrayidx1337;
      label = 99;
      break;
    } else {
      label = 96;
      break;
    }
   case 100:
    var $smrow_sroa_0_7;
    var $smrow_sroa_1_7;
    var $smrow_sroa_2_7;
    var $smrow_sroa_3_7;
    var $smrow_sroa_4_7;
    var $smlast_3_lcssa;
    var $conv1359797 = $185 & 65535;
    var $sub1360798 = $conv1359797 - 2 | 0;
    var $cmp1361799 = ($sub1360798 | 0) > 2;
    if ($cmp1361799) {
      label = 101;
      break;
    } else {
      label = 104;
      break;
    }
   case 101:
    var $mul1354 = $conv1359797 * $row_9805 & -1;
    var $add1355 = $mul1354 + 2 | 0;
    var $arraydecay1357 = $207 + ($add1355 << 3) | 0;
    var $col_6800 = 2;
    var $pix_5801 = $arraydecay1357;
    label = 102;
    break;
   case 102:
    var $pix_5801;
    var $col_6800;
    var $220 = HEAP32[$arrayidx369 >> 2];
    var $221 = HEAP16[$pix_5801 >> 1];
    var $conv1370 = $221 << 16 >> 16;
    var $arrayidx1373 = $smrow_sroa_1_7 + $col_6800 * 12 | 0;
    var $222 = HEAP32[$arrayidx1373 >> 2];
    var $arrayidx1376 = $smrow_sroa_2_7 + $col_6800 * 12 | 0;
    var $223 = HEAP32[$arrayidx1376 >> 2];
    var $mul1377 = $223 << 1;
    var $add1378 = $mul1377 + $222 | 0;
    var $arrayidx1381 = $smrow_sroa_3_7 + $col_6800 * 12 | 0;
    var $224 = HEAP32[$arrayidx1381 >> 2];
    var $add1382 = $add1378 + $224 | 0;
    var $shr1383 = $add1382 >> 2;
    var $sub1384 = $conv1370 - $shr1383 | 0;
    var $call1385 = _foveon_apply_curve($220, $sub1384);
    var $sub1386 = -$call1385 | 0;
    var $arrayidx1369_1 = $pix_5801 + 2 | 0;
    var $225 = HEAP16[$arrayidx1369_1 >> 1];
    var $conv1370_1 = $225 << 16 >> 16;
    var $arrayidx1373_1 = $smrow_sroa_1_7 + $col_6800 * 12 + 4 | 0;
    var $226 = HEAP32[$arrayidx1373_1 >> 2];
    var $arrayidx1376_1 = $smrow_sroa_2_7 + $col_6800 * 12 + 4 | 0;
    var $227 = HEAP32[$arrayidx1376_1 >> 2];
    var $mul1377_1 = $227 << 1;
    var $add1378_1 = $mul1377_1 + $226 | 0;
    var $arrayidx1381_1 = $smrow_sroa_3_7 + $col_6800 * 12 + 4 | 0;
    var $228 = HEAP32[$arrayidx1381_1 >> 2];
    var $add1382_1 = $add1378_1 + $228 | 0;
    var $shr1383_1 = $add1382_1 >> 2;
    var $sub1384_1 = $conv1370_1 - $shr1383_1 | 0;
    var $call1385_1 = _foveon_apply_curve($220, $sub1384_1);
    var $sub1386_1 = -$call1385_1 | 0;
    var $arrayidx1369_2 = $pix_5801 + 4 | 0;
    var $229 = HEAP16[$arrayidx1369_2 >> 1];
    var $conv1370_2 = $229 << 16 >> 16;
    var $arrayidx1373_2 = $smrow_sroa_1_7 + $col_6800 * 12 + 8 | 0;
    var $230 = HEAP32[$arrayidx1373_2 >> 2];
    var $arrayidx1376_2 = $smrow_sroa_2_7 + $col_6800 * 12 + 8 | 0;
    var $231 = HEAP32[$arrayidx1376_2 >> 2];
    var $mul1377_2 = $231 << 1;
    var $add1378_2 = $mul1377_2 + $230 | 0;
    var $arrayidx1381_2 = $smrow_sroa_3_7 + $col_6800 * 12 + 8 | 0;
    var $232 = HEAP32[$arrayidx1381_2 >> 2];
    var $add1382_2 = $add1378_2 + $232 | 0;
    var $shr1383_2 = $add1382_2 >> 2;
    var $sub1384_2 = $conv1370_2 - $shr1383_2 | 0;
    var $call1385_2 = _foveon_apply_curve($220, $sub1384_2);
    var $sub1386_2 = -$call1385_2 | 0;
    var $sum = $call1385_1 + $call1385 | 0;
    var $add1393 = -$sum | 0;
    var $add1395 = $add1393 - $call1385_2 | 0;
    var $shr1396690 = $add1395 >>> 3;
    var $sub1402 = $sub1386 - $shr1396690 | 0;
    var $conv1404689 = $221 & 65535;
    var $add1405 = $sub1402 + $conv1404689 | 0;
    var $conv1406 = $add1405 & 65535;
    HEAP16[$pix_5801 >> 1] = $conv1406;
    var $sub1402_1 = $sub1386_1 - $shr1396690 | 0;
    var $conv1404689_1 = $225 & 65535;
    var $add1405_1 = $sub1402_1 + $conv1404689_1 | 0;
    var $conv1406_1 = $add1405_1 & 65535;
    HEAP16[$arrayidx1369_1 >> 1] = $conv1406_1;
    var $sub1402_2 = $sub1386_2 - $shr1396690 | 0;
    var $conv1404689_2 = $229 & 65535;
    var $add1405_2 = $sub1402_2 + $conv1404689_2 | 0;
    var $conv1406_2 = $add1405_2 & 65535;
    HEAP16[$arrayidx1369_2 >> 1] = $conv1406_2;
    var $inc1412 = $col_6800 + 1 | 0;
    var $cmp1361 = ($inc1412 | 0) < ($sub1360798 | 0);
    if ($cmp1361) {
      label = 103;
      break;
    } else {
      label = 104;
      break;
    }
   case 103:
    var $add_ptr1410 = $pix_5801 + 8 | 0;
    var $col_6800 = $inc1412;
    var $pix_5801 = $add_ptr1410;
    label = 102;
    break;
   case 104:
    var $inc1415 = $row_9805 + 1 | 0;
    var $cmp1294 = ($inc1415 | 0) < ($sub1067837 | 0);
    var $indvars_iv_next971 = $indvars_iv970 + 1 | 0;
    if ($cmp1294) {
      var $row_9805 = $inc1415;
      var $smlast_2806 = $smlast_3_lcssa;
      var $indvars_iv970 = $indvars_iv_next971;
      var $smrow_sroa_4_4 = $smrow_sroa_4_7;
      var $smrow_sroa_3_4 = $smrow_sroa_3_7;
      var $smrow_sroa_2_4 = $smrow_sroa_2_7;
      var $smrow_sroa_1_4 = $smrow_sroa_1_7;
      var $smrow_sroa_0_4 = $smrow_sroa_0_7;
      label = 94;
      break;
    } else {
      var $smrow_sroa_4_5 = $smrow_sroa_4_7;
      var $smrow_sroa_3_5 = $smrow_sroa_3_7;
      var $smrow_sroa_2_5 = $smrow_sroa_2_7;
      var $smrow_sroa_1_5 = $smrow_sroa_1_7;
      var $smrow_sroa_0_5 = $smrow_sroa_0_7;
      label = 95;
      break;
    }
   case 105:
    var $smrow_sroa_0_8;
    var $smrow_sroa_1_8;
    var $smrow_sroa_2_8;
    var $smrow_sroa_3_8;
    var $smrow_sroa_4_8;
    var $indvars_iv;
    var $smlast_4784;
    var $row_10783;
    var $add1424 = $row_10783 + 2 | 0;
    var $cmp1425768 = ($smlast_4784 | 0) < ($add1424 | 0);
    if ($cmp1425768) {
      var $smlast_5769 = $smlast_4784;
      var $smrow_sroa_4_9 = $smrow_sroa_4_8;
      var $smrow_sroa_3_9 = $smrow_sroa_3_8;
      var $smrow_sroa_2_9 = $smrow_sroa_2_8;
      var $smrow_sroa_1_9 = $smrow_sroa_1_8;
      var $smrow_sroa_0_9 = $smrow_sroa_0_8;
      label = 107;
      break;
    } else {
      var $smlast_5_lcssa = $smlast_4784;
      var $smrow_sroa_4_10 = $smrow_sroa_4_8;
      var $smrow_sroa_3_10 = $smrow_sroa_3_8;
      var $smrow_sroa_2_10 = $smrow_sroa_2_8;
      var $smrow_sroa_1_10 = $smrow_sroa_1_8;
      var $smrow_sroa_0_10 = $smrow_sroa_0_8;
      label = 110;
      break;
    }
   case 106:
    var $exitcond962 = ($inc1439 | 0) == ($indvars_iv | 0);
    if ($exitcond962) {
      var $smlast_5_lcssa = $indvars_iv;
      var $smrow_sroa_4_10 = $smrow_sroa_0_9;
      var $smrow_sroa_3_10 = $smrow_sroa_4_9;
      var $smrow_sroa_2_10 = $smrow_sroa_3_9;
      var $smrow_sroa_1_10 = $smrow_sroa_2_9;
      var $smrow_sroa_0_10 = $smrow_sroa_1_9;
      label = 110;
      break;
    } else {
      var $smrow_sroa_1_9 = $smrow_sroa_2_9;
      var $smrow_sroa_2_9 = $smrow_sroa_3_9;
      var $smrow_sroa_3_9 = $smrow_sroa_4_9;
      var $smrow_sroa_4_9 = $smrow_sroa_0_9;
      var $smlast_5769 = $inc1439;
      var $smrow_sroa_0_9 = $smrow_sroa_1_9;
      label = 107;
      break;
    }
   case 107:
    var $smrow_sroa_0_9;
    var $smrow_sroa_1_9;
    var $smrow_sroa_2_9;
    var $smrow_sroa_3_9;
    var $smrow_sroa_4_9;
    var $smlast_5769;
    var $inc1439 = $smlast_5769 + 1 | 0;
    var $sub1447764 = $conv1058 - 2 | 0;
    var $cmp1448765 = ($sub1447764 | 0) > 2;
    if ($cmp1448765) {
      label = 108;
      break;
    } else {
      label = 106;
      break;
    }
   case 108:
    var $mul1441 = $conv1058 * $inc1439 & -1;
    var $add1442 = $mul1441 + 2 | 0;
    var $arraydecay1444 = $207 + ($add1442 << 3) | 0;
    var $col_7766 = 2;
    var $pix_6767 = $arraydecay1444;
    label = 109;
    break;
   case 109:
    var $pix_6767;
    var $col_7766;
    var $arrayidx1456 = $pix_6767 - 16 | 0;
    var $233 = HEAP16[$arrayidx1456 >> 1];
    var $conv1457 = $233 << 16 >> 16;
    var $arrayidx1459 = $pix_6767 - 8 | 0;
    var $234 = HEAP16[$arrayidx1459 >> 1];
    var $conv1460 = $234 << 16 >> 16;
    var $235 = HEAP16[$pix_6767 >> 1];
    var $conv1463 = $235 << 16 >> 16;
    var $arrayidx1466 = $pix_6767 + 8 | 0;
    var $236 = HEAP16[$arrayidx1466 >> 1];
    var $conv1467 = $236 << 16 >> 16;
    var $arrayidx1470 = $pix_6767 + 16 | 0;
    var $237 = HEAP16[$arrayidx1470 >> 1];
    var $conv1471 = $237 << 16 >> 16;
    var $add1461 = $conv1457 + 2 | 0;
    var $add1464 = $add1461 + $conv1460 | 0;
    var $add1468 = $add1464 + $conv1463 | 0;
    var $add1472 = $add1468 + $conv1467 | 0;
    var $add1473 = $add1472 + $conv1471 | 0;
    var $shr1474 = $add1473 >> 2;
    var $arrayidx1477 = $smrow_sroa_0_9 + $col_7766 * 12 | 0;
    HEAP32[$arrayidx1477 >> 2] = $shr1474;
    var $arrayidx1456_1 = $pix_6767 - 14 | 0;
    var $238 = HEAP16[$arrayidx1456_1 >> 1];
    var $conv1457_1 = $238 << 16 >> 16;
    var $arrayidx1459_1 = $pix_6767 - 6 | 0;
    var $239 = HEAP16[$arrayidx1459_1 >> 1];
    var $conv1460_1 = $239 << 16 >> 16;
    var $arrayidx1462_1 = $pix_6767 + 2 | 0;
    var $240 = HEAP16[$arrayidx1462_1 >> 1];
    var $conv1463_1 = $240 << 16 >> 16;
    var $arrayidx1466_1 = $pix_6767 + 10 | 0;
    var $241 = HEAP16[$arrayidx1466_1 >> 1];
    var $conv1467_1 = $241 << 16 >> 16;
    var $arrayidx1470_1 = $pix_6767 + 18 | 0;
    var $242 = HEAP16[$arrayidx1470_1 >> 1];
    var $conv1471_1 = $242 << 16 >> 16;
    var $add1461_1 = $conv1457_1 + 2 | 0;
    var $add1464_1 = $add1461_1 + $conv1460_1 | 0;
    var $add1468_1 = $add1464_1 + $conv1463_1 | 0;
    var $add1472_1 = $add1468_1 + $conv1467_1 | 0;
    var $add1473_1 = $add1472_1 + $conv1471_1 | 0;
    var $shr1474_1 = $add1473_1 >> 2;
    var $arrayidx1477_1 = $smrow_sroa_0_9 + $col_7766 * 12 + 4 | 0;
    HEAP32[$arrayidx1477_1 >> 2] = $shr1474_1;
    var $arrayidx1456_2 = $pix_6767 - 12 | 0;
    var $243 = HEAP16[$arrayidx1456_2 >> 1];
    var $conv1457_2 = $243 << 16 >> 16;
    var $arrayidx1459_2 = $pix_6767 - 4 | 0;
    var $244 = HEAP16[$arrayidx1459_2 >> 1];
    var $conv1460_2 = $244 << 16 >> 16;
    var $arrayidx1462_2 = $pix_6767 + 4 | 0;
    var $245 = HEAP16[$arrayidx1462_2 >> 1];
    var $conv1463_2 = $245 << 16 >> 16;
    var $arrayidx1466_2 = $pix_6767 + 12 | 0;
    var $246 = HEAP16[$arrayidx1466_2 >> 1];
    var $conv1467_2 = $246 << 16 >> 16;
    var $arrayidx1470_2 = $pix_6767 + 20 | 0;
    var $247 = HEAP16[$arrayidx1470_2 >> 1];
    var $conv1471_2 = $247 << 16 >> 16;
    var $add1461_2 = $conv1457_2 + 2 | 0;
    var $add1464_2 = $add1461_2 + $conv1460_2 | 0;
    var $add1468_2 = $add1464_2 + $conv1463_2 | 0;
    var $add1472_2 = $add1468_2 + $conv1467_2 | 0;
    var $add1473_2 = $add1472_2 + $conv1471_2 | 0;
    var $shr1474_2 = $add1473_2 >> 2;
    var $arrayidx1477_2 = $smrow_sroa_0_9 + $col_7766 * 12 + 8 | 0;
    HEAP32[$arrayidx1477_2 >> 2] = $shr1474_2;
    var $inc1483 = $col_7766 + 1 | 0;
    var $cmp1448 = ($inc1483 | 0) < ($sub1447764 | 0);
    if ($cmp1448) {
      var $col_7766 = $inc1483;
      var $pix_6767 = $arrayidx1466;
      label = 109;
      break;
    } else {
      label = 106;
      break;
    }
   case 110:
    var $smrow_sroa_0_10;
    var $smrow_sroa_1_10;
    var $smrow_sroa_2_10;
    var $smrow_sroa_3_10;
    var $smrow_sroa_4_10;
    var $smlast_5_lcssa;
    var $conv1492775 = $185 & 65535;
    var $sub1493776 = $conv1492775 - 2 | 0;
    var $cmp1494777 = ($sub1493776 | 0) > 2;
    if ($cmp1494777) {
      label = 111;
      break;
    } else {
      label = 115;
      break;
    }
   case 111:
    var $mul1487 = $conv1492775 * $row_10783 & -1;
    var $add1488 = $mul1487 + 2 | 0;
    var $arraydecay1490 = $207 + ($add1488 << 3) | 0;
    var $col_8778 = 2;
    var $pix_7779 = $arraydecay1490;
    label = 155;
    break;
   case 112:
    var $shl1532 = $_sum_2 << 16;
    var $div1534 = ($shl1532 | 0) / ($add1517_2 | 0) & -1;
    var $cond1538 = $div1534;
    label = 114;
    break;
   case 113:
    var $mul1536 = $_sum_2 * 174 & -1;
    var $cond1538 = $mul1536;
    label = 114;
    break;
   case 114:
    var $cond1538;
    var $248 = HEAP32[$arrayidx364 >> 2];
    var $mul1545 = $add1511_4 * $cond1538 & -1;
    var $add1546 = $mul1545 + 32768 | 0;
    var $shr1547 = $add1546 >> 16;
    var $sub1550 = $shr1547 - $conv1519 | 0;
    var $call1551 = _foveon_apply_curve($248, $sub1550);
    var $conv1553688 = $371 & 65535;
    var $add1554 = $conv1553688 + $call1551 | 0;
    var $conv1555 = $add1554 & 65535;
    HEAP16[$pix_7779 >> 1] = $conv1555;
    var $249 = HEAP32[$arrayidx364 >> 2];
    var $mul1545_1 = $add1511_4_1 * $cond1538 & -1;
    var $add1546_1 = $mul1545_1 + 32768 | 0;
    var $shr1547_1 = $add1546_1 >> 16;
    var $sub1550_1 = $shr1547_1 - $conv1519_1 | 0;
    var $call1551_1 = _foveon_apply_curve($249, $sub1550_1);
    var $conv1553688_1 = $377 & 65535;
    var $add1554_1 = $conv1553688_1 + $call1551_1 | 0;
    var $conv1555_1 = $add1554_1 & 65535;
    HEAP16[$arrayidx1518_1 >> 1] = $conv1555_1;
    var $250 = HEAP32[$arrayidx364 >> 2];
    var $mul1545_2 = $add1511_4_2 * $cond1538 & -1;
    var $add1546_2 = $mul1545_2 + 32768 | 0;
    var $shr1547_2 = $add1546_2 >> 16;
    var $sub1550_2 = $shr1547_2 - $conv1519_2 | 0;
    var $call1551_2 = _foveon_apply_curve($250, $sub1550_2);
    var $conv1553688_2 = $383 & 65535;
    var $add1554_2 = $conv1553688_2 + $call1551_2 | 0;
    var $conv1555_2 = $add1554_2 & 65535;
    HEAP16[$arrayidx1518_2 >> 1] = $conv1555_2;
    var $add_ptr1559 = $pix_7779 + 8 | 0;
    var $inc1561 = $col_8778 + 1 | 0;
    var $cmp1494 = ($inc1561 | 0) < ($sub1493776 | 0);
    if ($cmp1494) {
      var $col_8778 = $inc1561;
      var $pix_7779 = $add_ptr1559;
      label = 155;
      break;
    } else {
      label = 115;
      break;
    }
   case 115:
    var $inc1564 = $row_10783 + 1 | 0;
    var $cmp1420 = ($inc1564 | 0) < ($sub1067837 | 0);
    var $indvars_iv_next = $indvars_iv + 1 | 0;
    if ($cmp1420) {
      var $row_10783 = $inc1564;
      var $smlast_4784 = $smlast_5_lcssa;
      var $indvars_iv = $indvars_iv_next;
      var $smrow_sroa_4_8 = $smrow_sroa_4_10;
      var $smrow_sroa_3_8 = $smrow_sroa_3_10;
      var $smrow_sroa_2_8 = $smrow_sroa_2_10;
      var $smrow_sroa_1_8 = $smrow_sroa_1_10;
      var $smrow_sroa_0_8 = $smrow_sroa_0_10;
      label = 105;
      break;
    } else {
      var $smrow_sroa_2_11 = $smrow_sroa_2_10;
      var $smrow_sroa_1_11 = $smrow_sroa_1_10;
      var $smrow_sroa_0_11 = $smrow_sroa_0_10;
      label = 116;
      break;
    }
   case 116:
    var $smrow_sroa_0_11;
    var $smrow_sroa_1_11;
    var $smrow_sroa_2_11;
    if ($cmp1209815) {
      label = 117;
      break;
    } else {
      label = 119;
      break;
    }
   case 117:
    var $arrayidx1657 = $ipix | 0;
    var $arrayidx1581_1 = $curve + 4 | 0;
    var $arrayidx1581_2 = $curve + 8 | 0;
    var $arrayidx1649_1 = $ipix + 4 | 0;
    var $arrayidx1649_2 = $ipix + 8 | 0;
    var $pix_8758 = $arraydecay1202;
    label = 118;
    break;
   case 118:
    var $pix_8758;
    var $251 = HEAP32[$arraydecay335 >> 2];
    var $252 = HEAP16[$pix_8758 >> 1];
    var $conv1583 = $252 << 16 >> 16;
    var $call1584 = _foveon_apply_curve($251, $conv1583);
    var $conv1586687 = $252 & 65535;
    var $sub1587 = $conv1586687 - $call1584 | 0;
    var $conv1588 = $sub1587 & 65535;
    HEAP16[$pix_8758 >> 1] = $conv1588;
    var $253 = HEAP32[$arrayidx1581_1 >> 2];
    var $arrayidx1582_1 = $pix_8758 + 2 | 0;
    var $254 = HEAP16[$arrayidx1582_1 >> 1];
    var $conv1583_1 = $254 << 16 >> 16;
    var $call1584_1 = _foveon_apply_curve($253, $conv1583_1);
    var $conv1586687_1 = $254 & 65535;
    var $sub1587_1 = $conv1586687_1 - $call1584_1 | 0;
    var $conv1588_1 = $sub1587_1 & 65535;
    HEAP16[$arrayidx1582_1 >> 1] = $conv1588_1;
    var $255 = HEAP32[$arrayidx1581_2 >> 2];
    var $arrayidx1582_2 = $pix_8758 + 4 | 0;
    var $256 = HEAP16[$arrayidx1582_2 >> 1];
    var $conv1583_2 = $256 << 16 >> 16;
    var $call1584_2 = _foveon_apply_curve($255, $conv1583_2);
    var $conv1586687_2 = $256 & 65535;
    var $sub1587_2 = $conv1586687_2 - $call1584_2 | 0;
    var $conv1588_2 = $sub1587_2 & 65535;
    HEAP16[$arrayidx1582_2 >> 1] = $conv1588_2;
    var $sext = $sub1587 << 16;
    var $conv1593 = $sext >> 16;
    var $sext165 = $sub1587_1 << 16;
    var $conv1595 = $sext165 >> 16;
    var $sext166 = $sub1587_2 << 16;
    var $conv1601 = $sext166 >> 16;
    var $factor = $sext165 >> 15;
    var $add1599 = $conv1601 + $conv1593 | 0;
    var $add1602 = $add1599 + $factor | 0;
    var $shr1603 = $add1602 >> 2;
    var $257 = HEAP32[$arraydecay335 >> 2];
    var $sub1611 = $conv1593 - $shr1603 | 0;
    var $call1612 = _foveon_apply_curve($257, $sub1611);
    var $sub1615 = $sub1587 - $call1612 | 0;
    var $conv1616 = $sub1615 & 65535;
    HEAP16[$pix_8758 >> 1] = $conv1616;
    var $258 = HEAP32[$arrayidx1581_1 >> 2];
    var $sub1611_1 = $conv1595 - $shr1603 | 0;
    var $call1612_1 = _foveon_apply_curve($258, $sub1611_1);
    var $sub1615_1 = $sub1587_1 - $call1612_1 | 0;
    var $conv1616_1 = $sub1615_1 & 65535;
    HEAP16[$arrayidx1582_1 >> 1] = $conv1616_1;
    var $259 = HEAP32[$arrayidx1581_2 >> 2];
    var $sub1611_2 = $conv1601 - $shr1603 | 0;
    var $call1612_2 = _foveon_apply_curve($259, $sub1611_2);
    var $sub1615_2 = $sub1587_2 - $call1612_2 | 0;
    var $conv1616_2 = $sub1615_2 & 65535;
    HEAP16[$arrayidx1582_2 >> 1] = $conv1616_2;
    var $260 = HEAPF32[$arrayidx259 >> 2];
    var $conv1632 = $conv1616 << 16 >> 16;
    var $mul1633 = $260 * $conv1632;
    var $conv1634 = $mul1633;
    var $add1635 = $conv1634;
    var $261 = HEAPF32[$arrayidx261 >> 2];
    var $conv1632_1 = $conv1616_1 << 16 >> 16;
    var $mul1633_1 = $261 * $conv1632_1;
    var $conv1634_1 = $mul1633_1;
    var $add1635_1 = $add1635 + $conv1634_1;
    var $262 = HEAPF32[$arrayidx264 >> 2];
    var $conv1632_2 = $conv1616_2 << 16 >> 16;
    var $mul1633_2 = $262 * $conv1632_2;
    var $conv1634_2 = $mul1633_2;
    var $add1635_2 = $add1635_1 + $conv1634_2;
    var $cmp1639 = $add1635_2 < 0;
    var $dsum_2 = $cmp1639 ? 0 : $add1635_2;
    var $cmp1643 = $dsum_2 > 24e3;
    var $dsum_3 = $cmp1643 ? 24e3 : $dsum_2;
    var $add1647 = $dsum_3 + .5;
    var $conv1648 = $add1647 & -1;
    HEAP32[$arrayidx1657 >> 2] = $conv1648;
    var $263 = HEAPF32[$arrayidx259_1 >> 2];
    var $264 = HEAP16[$pix_8758 >> 1];
    var $conv1632_1948 = $264 << 16 >> 16;
    var $mul1633_1949 = $263 * $conv1632_1948;
    var $conv1634_1950 = $mul1633_1949;
    var $add1635_1951 = $conv1634_1950;
    var $265 = HEAPF32[$arrayidx261_1 >> 2];
    var $266 = HEAP16[$arrayidx1582_1 >> 1];
    var $conv1632_1_1 = $266 << 16 >> 16;
    var $mul1633_1_1 = $265 * $conv1632_1_1;
    var $conv1634_1_1 = $mul1633_1_1;
    var $add1635_1_1 = $add1635_1951 + $conv1634_1_1;
    var $267 = HEAPF32[$arrayidx264_1 >> 2];
    var $268 = HEAP16[$arrayidx1582_2 >> 1];
    var $conv1632_2_1 = $268 << 16 >> 16;
    var $mul1633_2_1 = $267 * $conv1632_2_1;
    var $conv1634_2_1 = $mul1633_2_1;
    var $add1635_2_1 = $add1635_1_1 + $conv1634_2_1;
    var $cmp1639_1 = $add1635_2_1 < 0;
    var $dsum_2_1 = $cmp1639_1 ? 0 : $add1635_2_1;
    var $cmp1643_1 = $dsum_2_1 > 24e3;
    var $dsum_3_1 = $cmp1643_1 ? 24e3 : $dsum_2_1;
    var $add1647_1 = $dsum_3_1 + .5;
    var $conv1648_1 = $add1647_1 & -1;
    HEAP32[$arrayidx1649_1 >> 2] = $conv1648_1;
    var $269 = HEAPF32[$arrayidx259_2 >> 2];
    var $270 = HEAP16[$pix_8758 >> 1];
    var $conv1632_2953 = $270 << 16 >> 16;
    var $mul1633_2954 = $269 * $conv1632_2953;
    var $conv1634_2955 = $mul1633_2954;
    var $add1635_2956 = $conv1634_2955;
    var $271 = HEAPF32[$arrayidx261_2 >> 2];
    var $272 = HEAP16[$arrayidx1582_1 >> 1];
    var $conv1632_1_2 = $272 << 16 >> 16;
    var $mul1633_1_2 = $271 * $conv1632_1_2;
    var $conv1634_1_2 = $mul1633_1_2;
    var $add1635_1_2 = $add1635_2956 + $conv1634_1_2;
    var $273 = HEAPF32[$arrayidx264_2 >> 2];
    var $274 = HEAP16[$arrayidx1582_2 >> 1];
    var $conv1632_2_2 = $274 << 16 >> 16;
    var $mul1633_2_2 = $273 * $conv1632_2_2;
    var $conv1634_2_2 = $mul1633_2_2;
    var $add1635_2_2 = $add1635_1_2 + $conv1634_2_2;
    var $cmp1639_2 = $add1635_2_2 < 0;
    var $dsum_2_2 = $cmp1639_2 ? 0 : $add1635_2_2;
    var $cmp1643_2 = $dsum_2_2 > 24e3;
    var $dsum_3_2 = $cmp1643_2 ? 24e3 : $dsum_2_2;
    var $add1647_2 = $dsum_3_2 + .5;
    var $conv1648_2 = $add1647_2 & -1;
    HEAP32[$arrayidx1649_2 >> 2] = $conv1648_2;
    var $conv1658 = $conv1648 & 65535;
    HEAP16[$pix_8758 >> 1] = $conv1658;
    var $275 = HEAP32[$arrayidx1649_1 >> 2];
    var $conv1658_1 = $275 & 65535;
    HEAP16[$arrayidx1582_1 >> 1] = $conv1658_1;
    var $276 = HEAP32[$arrayidx1649_2 >> 2];
    var $conv1658_2 = $276 & 65535;
    HEAP16[$arrayidx1582_2 >> 1] = $conv1658_2;
    var $add_ptr1664 = $pix_8758 + 8 | 0;
    var $cmp1574 = $add_ptr1664 >>> 0 < $arraydecay1208814 >>> 0;
    if ($cmp1574) {
      var $pix_8758 = $add_ptr1664;
      label = 118;
      break;
    } else {
      label = 119;
      break;
    }
   case 119:
    var $div1667 = $conv1058 >>> 2;
    var $div1669 = $conv1066836 >>> 2;
    var $mul1670 = $div1667 * $div1669 & -1;
    var $call1671 = _calloc($mul1670, 6);
    var $277 = $call1671;
    _merror($call1671, 5580032);
    var $278 = HEAP16[5398712 >> 1];
    var $conv1672 = $278 & 65535;
    var $div1673 = $conv1672 >>> 2;
    var $tobool1676744 = ($div1673 | 0) == 0;
    if ($tobool1676744) {
      label = 124;
      break;
    } else {
      label = 120;
      break;
    }
   case 120:
    var $arrayidx1684 = $ipix + 8 | 0;
    var $arrayidx1685 = $ipix + 4 | 0;
    var $arrayidx1686 = $ipix | 0;
    var $_pre129 = HEAP16[5242964 >> 1];
    var $dec1675746_in = $div1673;
    label = 122;
    break;
   case 121:
    var $tobool1676 = ($dec1675746 | 0) == 0;
    if ($tobool1676) {
      label = 124;
      break;
    } else {
      var $dec1675746_in = $dec1675746;
      label = 122;
      break;
    }
   case 122:
    var $dec1675746_in;
    var $dec1675746 = $dec1675746_in - 1 | 0;
    var $cmp1681741 = ($_pre129 & 65535) > 3;
    if ($cmp1681741) {
      label = 123;
      break;
    } else {
      label = 121;
      break;
    }
   case 123:
    var $mul1699 = $dec1675746 << 2;
    var $add1724 = $dec1675746_in + 1 | 0;
    var $_pre130 = HEAP32[5264108 >> 2];
    var $col_9742 = 0;
    label = 127;
    break;
   case 124:
    var $cmp1772732 = ($278 & 65535) > 3;
    if ($cmp1772732) {
      label = 126;
      break;
    } else {
      label = 125;
      break;
    }
   case 125:
    var $arrayidx1977_4_pre = $curve + 16 | 0;
    var $arrayidx1977_5_pre = $curve + 20 | 0;
    var $arrayidx1977_4_pre_phi = $arrayidx1977_4_pre;
    var $arrayidx1977_5_pre_phi = $arrayidx1977_5_pre;
    label = 147;
    break;
   case 126:
    var $arrayidx1775 = $ipix + 8 | 0;
    var $arrayidx1776 = $ipix + 4 | 0;
    var $arrayidx1777 = $ipix | 0;
    var $279 = $smrow_sroa_2_11;
    var $280 = $smrow_sroa_1_11;
    var $arrayidx1918_1 = $curve + 16 | 0;
    var $arrayidx1918_2 = $curve + 20 | 0;
    var $row_12733 = 0;
    label = 131;
    break;
   case 127:
    var $col_9742;
    HEAP32[$arrayidx1684 >> 2] = 0;
    HEAP32[$arrayidx1685 >> 2] = 0;
    HEAP32[$arrayidx1686 >> 2] = 0;
    var $conv1701 = $_pre129 & 65535;
    var $mul1703 = $col_9742 << 2;
    var $add1704_31089 = $mul1703 | 3;
    var $add1704_11090 = $mul1703 | 1;
    var $add1704_21091 = $mul1703 | 2;
    var $i_18737 = 0;
    var $353 = 0;
    var $352 = 0;
    var $351 = 0;
    label = 153;
    break;
   case 128:
    var $cmp1727 = ($add1724 | 0) > ($div1673 | 0);
    if ($cmp1727) {
      label = 129;
      break;
    } else {
      label = 130;
      break;
    }
   case 129:
    var $shr1731685 = $add1710_3 >>> 4;
    var $conv1732 = $shr1731685 & 65535;
    var $div1734 = $conv1701 >>> 2;
    var $mul1735 = $div1734 * $dec1675746 & -1;
    var $add1736 = $mul1735 + $col_9742 | 0;
    var $arrayidx1738 = $277 + $add1736 * 6 | 0;
    HEAP16[$arrayidx1738 >> 1] = $conv1732;
    var $281 = HEAP32[$arrayidx1685 >> 2];
    var $shr1731685_1 = $281 >>> 4;
    var $conv1732_1 = $shr1731685_1 & 65535;
    var $conv1733_1 = $_pre129 & 65535;
    var $div1734_1 = $conv1733_1 >>> 2;
    var $mul1735_1 = $div1734_1 * $dec1675746 & -1;
    var $add1736_1 = $mul1735_1 + $col_9742 | 0;
    var $arrayidx1738_1 = $277 + $add1736_1 * 6 + 2 | 0;
    HEAP16[$arrayidx1738_1 >> 1] = $conv1732_1;
    var $282 = HEAP32[$arrayidx1684 >> 2];
    var $shr1731685_2 = $282 >>> 4;
    var $conv1732_2 = $shr1731685_2 & 65535;
    var $conv1733_2 = $_pre129 & 65535;
    var $div1734_2 = $conv1733_2 >>> 2;
    var $mul1735_2 = $div1734_2 * $dec1675746 & -1;
    var $add1736_2 = $mul1735_2 + $col_9742 | 0;
    var $arrayidx1738_2 = $277 + $add1736_2 * 6 + 4 | 0;
    HEAP16[$arrayidx1738_2 >> 1] = $conv1732_2;
    label = 154;
    break;
   case 130:
    var $conv1741 = $_pre129 & 65535;
    var $div1742 = $conv1741 >>> 2;
    var $mul1743 = $div1742 * $dec1675746_in & -1;
    var $add1744 = $mul1743 + $col_9742 | 0;
    var $arrayidx1746 = $277 + $add1744 * 6 | 0;
    var $283 = HEAP16[$arrayidx1746 >> 1];
    var $conv1747 = $283 << 16 >> 16;
    var $mul1748 = $conv1747 * 1840 & -1;
    var $mul1750 = $add1710_3 * 141 & -1;
    var $add1751 = $mul1750 + 2048 | 0;
    var $add1752 = $add1751 + $mul1748 | 0;
    var $shr1753684 = $add1752 >>> 12;
    var $conv1754 = $shr1753684 & 65535;
    var $mul1757 = $div1742 * $dec1675746 & -1;
    var $add1758 = $mul1757 + $col_9742 | 0;
    var $arrayidx1760 = $277 + $add1758 * 6 | 0;
    HEAP16[$arrayidx1760 >> 1] = $conv1754;
    var $conv1741_1 = $_pre129 & 65535;
    var $div1742_1 = $conv1741_1 >>> 2;
    var $mul1743_1 = $div1742_1 * $dec1675746_in & -1;
    var $add1744_1 = $mul1743_1 + $col_9742 | 0;
    var $arrayidx1746_1 = $277 + $add1744_1 * 6 + 2 | 0;
    var $284 = HEAP16[$arrayidx1746_1 >> 1];
    var $conv1747_1 = $284 << 16 >> 16;
    var $mul1748_1 = $conv1747_1 * 1840 & -1;
    var $285 = HEAP32[$arrayidx1685 >> 2];
    var $mul1750_1 = $285 * 141 & -1;
    var $add1751_1 = $mul1750_1 + 2048 | 0;
    var $add1752_1 = $add1751_1 + $mul1748_1 | 0;
    var $shr1753684_1 = $add1752_1 >>> 12;
    var $conv1754_1 = $shr1753684_1 & 65535;
    var $mul1757_1 = $div1742_1 * $dec1675746 & -1;
    var $add1758_1 = $mul1757_1 + $col_9742 | 0;
    var $arrayidx1760_1 = $277 + $add1758_1 * 6 + 2 | 0;
    HEAP16[$arrayidx1760_1 >> 1] = $conv1754_1;
    var $conv1741_2 = $_pre129 & 65535;
    var $div1742_2 = $conv1741_2 >>> 2;
    var $mul1743_2 = $div1742_2 * $dec1675746_in & -1;
    var $add1744_2 = $mul1743_2 + $col_9742 | 0;
    var $arrayidx1746_2 = $277 + $add1744_2 * 6 + 4 | 0;
    var $286 = HEAP16[$arrayidx1746_2 >> 1];
    var $conv1747_2 = $286 << 16 >> 16;
    var $mul1748_2 = $conv1747_2 * 1840 & -1;
    var $287 = HEAP32[$arrayidx1684 >> 2];
    var $mul1750_2 = $287 * 141 & -1;
    var $add1751_2 = $mul1750_2 + 2048 | 0;
    var $add1752_2 = $add1751_2 + $mul1748_2 | 0;
    var $shr1753684_2 = $add1752_2 >>> 12;
    var $conv1754_2 = $shr1753684_2 & 65535;
    var $mul1757_2 = $div1742_2 * $dec1675746 & -1;
    var $add1758_2 = $mul1757_2 + $col_9742 | 0;
    var $arrayidx1760_2 = $277 + $add1758_2 * 6 + 4 | 0;
    HEAP16[$arrayidx1760_2 >> 1] = $conv1754_2;
    label = 154;
    break;
   case 131:
    var $row_12733;
    HEAP32[$arrayidx1775 >> 2] = 0;
    HEAP32[$arrayidx1776 >> 2] = 0;
    HEAP32[$arrayidx1777 >> 2] = 0;
    var $and1778 = $row_12733 & 3;
    var $cmp1779 = ($and1778 | 0) == 0;
    var $288 = HEAP16[5242964 >> 1];
    if ($cmp1779) {
      label = 132;
      break;
    } else {
      var $295 = $288;
      label = 136;
      break;
    }
   case 132:
    var $conv1782 = $288 & 65535;
    var $and1783 = $conv1782 & 65532;
    var $tobool1786707 = ($and1783 | 0) == 0;
    if ($tobool1786707) {
      var $295 = $288;
      label = 136;
      break;
    } else {
      label = 133;
      break;
    }
   case 133:
    var $div1792 = ($row_12733 | 0) / 4 & -1;
    var $dec1785708_in = $and1783;
    var $289 = 4096;
    label = 134;
    break;
   case 134:
    var $289;
    var $dec1785708_in;
    var $dec1785708 = $dec1785708_in - 1 | 0;
    var $div1796 = ($dec1785708 | 0) / 4 & -1;
    var $div1794 = $conv1782 >>> 2;
    var $mul1795 = $div1794 * $div1792 & -1;
    var $add1797 = $mul1795 + $div1796 | 0;
    var $arrayidx1799 = $277 + $add1797 * 6 | 0;
    var $290 = HEAP16[$arrayidx1799 >> 1];
    var $conv1800 = $290 << 16 >> 16;
    var $mul1801 = $conv1800 * 1485 & -1;
    var $add1805 = $289 + $mul1801 | 0;
    var $shr1806 = $add1805 >> 13;
    HEAP32[$arrayidx1777 >> 2] = $shr1806;
    var $arrayidx1810 = $smrow_sroa_0_11 + $dec1785708 * 12 | 0;
    HEAP32[$arrayidx1810 >> 2] = $shr1806;
    var $arrayidx1799_1 = $277 + $add1797 * 6 + 2 | 0;
    var $291 = HEAP16[$arrayidx1799_1 >> 1];
    var $conv1800_1 = $291 << 16 >> 16;
    var $mul1801_1 = $conv1800_1 * 1485 & -1;
    var $292 = HEAP32[$arrayidx1776 >> 2];
    var $mul1803_1 = $292 * 6707 & -1;
    var $add1804_1 = $mul1803_1 + 4096 | 0;
    var $add1805_1 = $add1804_1 + $mul1801_1 | 0;
    var $shr1806_1 = $add1805_1 >> 13;
    HEAP32[$arrayidx1776 >> 2] = $shr1806_1;
    var $arrayidx1810_1 = $smrow_sroa_0_11 + $dec1785708 * 12 + 4 | 0;
    HEAP32[$arrayidx1810_1 >> 2] = $shr1806_1;
    var $arrayidx1799_2 = $277 + $add1797 * 6 + 4 | 0;
    var $293 = HEAP16[$arrayidx1799_2 >> 1];
    var $conv1800_2 = $293 << 16 >> 16;
    var $mul1801_2 = $conv1800_2 * 1485 & -1;
    var $294 = HEAP32[$arrayidx1775 >> 2];
    var $mul1803_2 = $294 * 6707 & -1;
    var $add1804_2 = $mul1803_2 + 4096 | 0;
    var $add1805_2 = $add1804_2 + $mul1801_2 | 0;
    var $shr1806_2 = $add1805_2 >> 13;
    HEAP32[$arrayidx1775 >> 2] = $shr1806_2;
    var $arrayidx1810_2 = $smrow_sroa_0_11 + $dec1785708 * 12 + 8 | 0;
    HEAP32[$arrayidx1810_2 >> 2] = $shr1806_2;
    var $tobool1786 = ($dec1785708 | 0) == 0;
    if ($tobool1786) {
      var $295 = $288;
      label = 136;
      break;
    } else {
      label = 135;
      break;
    }
   case 135:
    var $_pre156 = HEAP32[$arrayidx1777 >> 2];
    var $phitmp163 = $_pre156 * 6707 & -1;
    var $phitmp164 = $phitmp163 + 4096 | 0;
    var $dec1785708_in = $dec1785708;
    var $289 = $phitmp164;
    label = 134;
    break;
   case 136:
    var $295;
    HEAP32[$arrayidx1775 >> 2] = 0;
    HEAP32[$arrayidx1776 >> 2] = 0;
    HEAP32[$arrayidx1777 >> 2] = 0;
    var $conv1820710 = $295 & 65535;
    var $and1821711 = $conv1820710 & 65532;
    var $cmp1822712 = ($and1821711 | 0) == 0;
    if ($cmp1822712) {
      label = 139;
      break;
    } else {
      var $col_11713 = 0;
      var $296 = 0;
      label = 137;
      break;
    }
   case 137:
    var $296;
    var $col_11713;
    var $arrayidx1831 = $smrow_sroa_0_11 + $col_11713 * 12 | 0;
    var $297 = HEAP32[$arrayidx1831 >> 2];
    var $mul1832 = $297 * 1485 & -1;
    var $add1835 = $mul1832 + 4096 | 0;
    var $add1836 = $add1835 + $296 | 0;
    var $shr1837 = $add1836 >> 13;
    HEAP32[$arrayidx1777 >> 2] = $shr1837;
    var $arrayidx1841 = $smrow_sroa_1_11 + $col_11713 * 12 | 0;
    HEAP32[$arrayidx1841 >> 2] = $shr1837;
    var $arrayidx1831_1 = $smrow_sroa_0_11 + $col_11713 * 12 + 4 | 0;
    var $298 = HEAP32[$arrayidx1831_1 >> 2];
    var $mul1832_1 = $298 * 1485 & -1;
    var $299 = HEAP32[$arrayidx1776 >> 2];
    var $mul1834_1 = $299 * 6707 & -1;
    var $add1835_1 = $mul1832_1 + 4096 | 0;
    var $add1836_1 = $add1835_1 + $mul1834_1 | 0;
    var $shr1837_1 = $add1836_1 >> 13;
    HEAP32[$arrayidx1776 >> 2] = $shr1837_1;
    var $arrayidx1841_1 = $smrow_sroa_1_11 + $col_11713 * 12 + 4 | 0;
    HEAP32[$arrayidx1841_1 >> 2] = $shr1837_1;
    var $arrayidx1831_2 = $smrow_sroa_0_11 + $col_11713 * 12 + 8 | 0;
    var $300 = HEAP32[$arrayidx1831_2 >> 2];
    var $mul1832_2 = $300 * 1485 & -1;
    var $301 = HEAP32[$arrayidx1775 >> 2];
    var $mul1834_2 = $301 * 6707 & -1;
    var $add1835_2 = $mul1832_2 + 4096 | 0;
    var $add1836_2 = $add1835_2 + $mul1834_2 | 0;
    var $shr1837_2 = $add1836_2 >> 13;
    HEAP32[$arrayidx1775 >> 2] = $shr1837_2;
    var $arrayidx1841_2 = $smrow_sroa_1_11 + $col_11713 * 12 + 8 | 0;
    HEAP32[$arrayidx1841_2 >> 2] = $shr1837_2;
    var $inc1846 = $col_11713 + 1 | 0;
    var $cmp1822 = ($inc1846 | 0) < ($and1821711 | 0);
    if ($cmp1822) {
      label = 138;
      break;
    } else {
      label = 139;
      break;
    }
   case 138:
    var $_pre159 = HEAP32[$arrayidx1777 >> 2];
    var $phitmp162 = $_pre159 * 6707 & -1;
    var $col_11713 = $inc1846;
    var $296 = $phitmp162;
    label = 137;
    break;
   case 139:
    var $cmp1848 = ($row_12733 | 0) == 0;
    if ($cmp1848) {
      label = 141;
      break;
    } else {
      label = 140;
      break;
    }
   case 140:
    var $cmp1859718 = ($295 & 65535) > 3;
    if ($cmp1859718) {
      var $col_12719 = 0;
      label = 142;
      break;
    } else {
      label = 146;
      break;
    }
   case 141:
    var $mul1854 = $conv1820710 * 12 & -1;
    _memcpy($279, $280, $mul1854);
    label = 143;
    break;
   case 142:
    var $col_12719;
    var $arrayidx1868 = $smrow_sroa_2_11 + $col_12719 * 12 | 0;
    var $302 = HEAP32[$arrayidx1868 >> 2];
    var $mul1869 = $302 * 6707 & -1;
    var $arrayidx1872 = $smrow_sroa_1_11 + $col_12719 * 12 | 0;
    var $303 = HEAP32[$arrayidx1872 >> 2];
    var $mul1873 = $303 * 1485 & -1;
    var $add1874 = $mul1869 + 4096 | 0;
    var $add1875 = $add1874 + $mul1873 | 0;
    var $shr1876 = $add1875 >> 13;
    HEAP32[$arrayidx1868 >> 2] = $shr1876;
    var $arrayidx1868_1 = $smrow_sroa_2_11 + $col_12719 * 12 + 4 | 0;
    var $304 = HEAP32[$arrayidx1868_1 >> 2];
    var $mul1869_1 = $304 * 6707 & -1;
    var $arrayidx1872_1 = $smrow_sroa_1_11 + $col_12719 * 12 + 4 | 0;
    var $305 = HEAP32[$arrayidx1872_1 >> 2];
    var $mul1873_1 = $305 * 1485 & -1;
    var $add1874_1 = $mul1869_1 + 4096 | 0;
    var $add1875_1 = $add1874_1 + $mul1873_1 | 0;
    var $shr1876_1 = $add1875_1 >> 13;
    HEAP32[$arrayidx1868_1 >> 2] = $shr1876_1;
    var $arrayidx1868_2 = $smrow_sroa_2_11 + $col_12719 * 12 + 8 | 0;
    var $306 = HEAP32[$arrayidx1868_2 >> 2];
    var $mul1869_2 = $306 * 6707 & -1;
    var $arrayidx1872_2 = $smrow_sroa_1_11 + $col_12719 * 12 + 8 | 0;
    var $307 = HEAP32[$arrayidx1872_2 >> 2];
    var $mul1873_2 = $307 * 1485 & -1;
    var $add1874_2 = $mul1869_2 + 4096 | 0;
    var $add1875_2 = $add1874_2 + $mul1873_2 | 0;
    var $shr1876_2 = $add1875_2 >> 13;
    HEAP32[$arrayidx1868_2 >> 2] = $shr1876_2;
    var $inc1884 = $col_12719 + 1 | 0;
    var $cmp1859 = ($inc1884 | 0) < ($and1821711 | 0);
    if ($cmp1859) {
      var $col_12719 = $inc1884;
      label = 142;
      break;
    } else {
      label = 143;
      break;
    }
   case 143:
    var $cmp1890728 = ($295 & 65535) > 3;
    if ($cmp1890728) {
      label = 144;
      break;
    } else {
      label = 146;
      break;
    }
   case 144:
    var $_pre124 = HEAP32[$add_ptr >> 2];
    var $_pre125 = HEAP32[$arrayidx1918_1 >> 2];
    var $_pre126 = HEAP32[$arrayidx1918_2 >> 2];
    var $_pre158 = HEAP32[5264108 >> 2];
    var $col_13729 = 0;
    label = 145;
    break;
   case 145:
    var $col_13729;
    var $mul1902 = $conv1820710 * $row_12733 & -1;
    var $add1903 = $mul1902 + $col_13729 | 0;
    var $arrayidx1899 = $smrow_sroa_2_11 + $col_13729 * 12 | 0;
    var $308 = HEAP32[$arrayidx1899 >> 2];
    var $add1900 = $308 + 30 | 0;
    var $arrayidx1905 = $_pre158 + ($add1903 << 3) | 0;
    var $309 = HEAP16[$arrayidx1905 >> 1];
    var $conv19061088 = $309 & 65535;
    var $add1907 = $conv19061088 + 30 | 0;
    var $arrayidx1899_1 = $smrow_sroa_2_11 + $col_13729 * 12 + 4 | 0;
    var $310 = HEAP32[$arrayidx1899_1 >> 2];
    var $add1900_1 = $310 + $add1900 | 0;
    var $arrayidx1905_1 = $_pre158 + ($add1903 << 3) + 2 | 0;
    var $311 = HEAP16[$arrayidx1905_1 >> 1];
    var $conv1906_11087 = $311 & 65535;
    var $add1907_1 = $conv1906_11087 + $add1907 | 0;
    var $arrayidx1899_2 = $smrow_sroa_2_11 + $col_13729 * 12 + 8 | 0;
    var $312 = HEAP32[$arrayidx1899_2 >> 2];
    var $add1900_2 = $312 + $add1900_1 | 0;
    var $arrayidx1905_2 = $_pre158 + ($add1903 << 3) + 4 | 0;
    var $313 = HEAP16[$arrayidx1905_2 >> 1];
    var $conv1906_21086 = $313 & 65535;
    var $add1907_2 = $conv1906_21086 + $add1907_1 | 0;
    var $shl1911 = $add1907_2 << 16;
    var $div1912 = ($shl1911 | 0) / ($add1900_2 | 0) & -1;
    var $mul1922 = $308 * $div1912 & -1;
    var $add1923 = $mul1922 + 32768 | 0;
    var $shr1924 = $add1923 >> 16;
    var $conv1930 = $309 << 16 >> 16;
    var $sub1931 = $shr1924 - $conv1930 | 0;
    var $call1932 = _foveon_apply_curve($_pre124, $sub1931);
    HEAP32[$arrayidx1777 >> 2] = $call1932;
    var $314 = HEAP32[$arrayidx1899_1 >> 2];
    var $mul1922_1 = $314 * $div1912 & -1;
    var $add1923_1 = $mul1922_1 + 32768 | 0;
    var $shr1924_1 = $add1923_1 >> 16;
    var $315 = HEAP16[$arrayidx1905_1 >> 1];
    var $conv1930_1 = $315 << 16 >> 16;
    var $sub1931_1 = $shr1924_1 - $conv1930_1 | 0;
    var $call1932_1 = _foveon_apply_curve($_pre125, $sub1931_1);
    HEAP32[$arrayidx1776 >> 2] = $call1932_1;
    var $add1935_1 = $call1932_1 + $call1932 | 0;
    var $316 = HEAP32[$arrayidx1899_2 >> 2];
    var $mul1922_2 = $316 * $div1912 & -1;
    var $add1923_2 = $mul1922_2 + 32768 | 0;
    var $shr1924_2 = $add1923_2 >> 16;
    var $317 = HEAP16[$arrayidx1905_2 >> 1];
    var $conv1930_2 = $317 << 16 >> 16;
    var $sub1931_2 = $shr1924_2 - $conv1930_2 | 0;
    var $call1932_2 = _foveon_apply_curve($_pre126, $sub1931_2);
    HEAP32[$arrayidx1775 >> 2] = $call1932_2;
    var $add1935_2 = $call1932_2 + $add1935_1 | 0;
    var $shr1939 = $add1935_2 >> 3;
    var $318 = HEAP16[$arrayidx1905 >> 1];
    var $conv1949 = $318 << 16 >> 16;
    var $add1951 = $call1932 - $shr1939 | 0;
    var $sub1952 = $add1951 + $conv1949 | 0;
    var $cmp1953 = ($sub1952 | 0) < 0;
    var $319 = $sub1952 & 65535;
    var $conv1957 = $cmp1953 ? 0 : $319;
    HEAP16[$arrayidx1905 >> 1] = $conv1957;
    var $320 = HEAP16[$arrayidx1905_1 >> 1];
    var $conv1949_1 = $320 << 16 >> 16;
    var $321 = HEAP32[$arrayidx1776 >> 2];
    var $add1951_1 = $321 - $shr1939 | 0;
    var $sub1952_1 = $add1951_1 + $conv1949_1 | 0;
    var $cmp1953_1 = ($sub1952_1 | 0) < 0;
    var $322 = $sub1952_1 & 65535;
    var $conv1957_1 = $cmp1953_1 ? 0 : $322;
    HEAP16[$arrayidx1905_1 >> 1] = $conv1957_1;
    var $323 = HEAP16[$arrayidx1905_2 >> 1];
    var $conv1949_2 = $323 << 16 >> 16;
    var $324 = HEAP32[$arrayidx1775 >> 2];
    var $add1951_2 = $324 - $shr1939 | 0;
    var $sub1952_2 = $add1951_2 + $conv1949_2 | 0;
    var $cmp1953_2 = ($sub1952_2 | 0) < 0;
    var $325 = $sub1952_2 & 65535;
    var $conv1957_2 = $cmp1953_2 ? 0 : $325;
    HEAP16[$arrayidx1905_2 >> 1] = $conv1957_2;
    var $inc1967 = $col_13729 + 1 | 0;
    var $cmp1890 = ($inc1967 | 0) < ($and1821711 | 0);
    if ($cmp1890) {
      var $col_13729 = $inc1967;
      label = 145;
      break;
    } else {
      label = 146;
      break;
    }
   case 146:
    var $inc1970 = $row_12733 + 1 | 0;
    var $and1771 = $conv1672 & 65532;
    var $cmp1772 = ($inc1970 | 0) < ($and1771 | 0);
    if ($cmp1772) {
      var $row_12733 = $inc1970;
      label = 131;
      break;
    } else {
      var $arrayidx1977_4_pre_phi = $arrayidx1918_1;
      var $arrayidx1977_5_pre_phi = $arrayidx1918_2;
      label = 147;
      break;
    }
   case 147:
    var $arrayidx1977_5_pre_phi;
    var $arrayidx1977_4_pre_phi;
    _free($call1671);
    _free($call1050);
    var $326 = HEAP32[$arraydecay335 >> 2];
    var $327 = $326;
    _free($327);
    var $arrayidx1977_1 = $curve + 4 | 0;
    var $328 = HEAP32[$arrayidx1977_1 >> 2];
    var $329 = $328;
    _free($329);
    var $arrayidx1977_2 = $curve + 8 | 0;
    var $330 = HEAP32[$arrayidx1977_2 >> 2];
    var $331 = $330;
    _free($331);
    var $332 = HEAP32[$add_ptr >> 2];
    var $333 = $332;
    _free($333);
    var $334 = HEAP32[$arrayidx1977_4_pre_phi >> 2];
    var $335 = $334;
    _free($335);
    var $336 = HEAP32[$arrayidx1977_5_pre_phi >> 2];
    var $337 = $336;
    _free($337);
    var $338 = HEAP32[$arrayidx364 >> 2];
    var $339 = $338;
    _free($339);
    var $340 = HEAP32[$arrayidx369 >> 2];
    var $341 = $340;
    _free($341);
    var $arrayidx1981 = $keep + 4 | 0;
    var $342 = HEAP32[$arrayidx1981 >> 2];
    var $arrayidx1982 = $active + 4 | 0;
    var $343 = HEAP32[$arrayidx1982 >> 2];
    var $sub1983 = $343 - $342 | 0;
    HEAP32[$arrayidx1982 >> 2] = $sub1983;
    var $arrayidx1984 = $active + 12 | 0;
    var $344 = HEAP32[$arrayidx1984 >> 2];
    var $sub1985 = $344 - 2 | 0;
    HEAP32[$arrayidx1984 >> 2] = $sub1985;
    var $arrayidx1986 = $active + 8 | 0;
    var $345 = HEAP32[$arrayidx1986 >> 2];
    var $346 = HEAP32[$arraydecay9 >> 2];
    var $sub1988 = $345 - $346 | 0;
    var $sub1992701 = $sub1985 - $sub1983 | 0;
    var $cmp1993702 = ($sub1992701 | 0) > 0;
    if ($cmp1993702) {
      label = 148;
      break;
    } else {
      var $row_13_lcssa = 0;
      label = 151;
      break;
    }
   case 148:
    var $mul2005 = $sub1988 << 3;
    var $347 = ($sub1992701 | 0) > 1;
    var $_pre127 = HEAP32[5264108 >> 2];
    var $_pre128 = HEAP16[5242964 >> 1];
    var $row_13703 = 0;
    label = 149;
    break;
   case 149:
    var $row_13703;
    var $mul1996 = $row_13703 * $sub1988 & -1;
    var $arrayidx1997 = $_pre127 + ($mul1996 << 3) | 0;
    var $348 = $arrayidx1997;
    var $add1999 = $sub1983 + $row_13703 | 0;
    var $conv2000 = $_pre128 & 65535;
    var $mul2001 = $conv2000 * $add1999 & -1;
    var $add2003 = $mul2001 + $346 | 0;
    var $arrayidx2004 = $_pre127 + ($add2003 << 3) | 0;
    var $349 = $arrayidx2004;
    _memcpy($348, $349, $mul2005);
    var $inc2007 = $row_13703 + 1 | 0;
    var $cmp1993 = ($inc2007 | 0) < ($sub1992701 | 0);
    if ($cmp1993) {
      var $row_13703 = $inc2007;
      label = 149;
      break;
    } else {
      label = 150;
      break;
    }
   case 150:
    var $350 = $sub1992701 & 65535;
    var $phitmp = $347 ? $350 : 1;
    var $row_13_lcssa = $phitmp;
    label = 151;
    break;
   case 151:
    var $row_13_lcssa;
    var $conv2009 = $sub1988 & 65535;
    HEAP16[5242964 >> 1] = $conv2009;
    HEAP16[5398712 >> 1] = $row_13_lcssa;
    label = 152;
    break;
   case 152:
    STACKTOP = __stackBase__;
    return;
   case 153:
    var $351;
    var $352;
    var $353;
    var $i_18737;
    var $add1700 = $i_18737 + $mul1699 | 0;
    var $mul1702 = $conv1701 * $add1700 & -1;
    var $add1705 = $mul1703 + $mul1702 | 0;
    var $arrayidx1707 = $_pre130 + ($add1705 << 3) | 0;
    var $354 = HEAP16[$arrayidx1707 >> 1];
    var $conv1708 = $354 << 16 >> 16;
    var $add1710 = $353 + $conv1708 | 0;
    var $arrayidx1707_1 = $_pre130 + ($add1705 << 3) + 2 | 0;
    var $355 = HEAP16[$arrayidx1707_1 >> 1];
    var $conv1708_1 = $355 << 16 >> 16;
    var $add1710_1 = $352 + $conv1708_1 | 0;
    var $arrayidx1707_2 = $_pre130 + ($add1705 << 3) + 4 | 0;
    var $356 = HEAP16[$arrayidx1707_2 >> 1];
    var $conv1708_2 = $356 << 16 >> 16;
    var $add1710_2 = $351 + $conv1708_2 | 0;
    var $add1705_1 = $add1704_11090 + $mul1702 | 0;
    var $arrayidx1707_1934 = $_pre130 + ($add1705_1 << 3) | 0;
    var $357 = HEAP16[$arrayidx1707_1934 >> 1];
    var $conv1708_1935 = $357 << 16 >> 16;
    var $add1710_1937 = $add1710 + $conv1708_1935 | 0;
    var $arrayidx1707_1_1 = $_pre130 + ($add1705_1 << 3) + 2 | 0;
    var $358 = HEAP16[$arrayidx1707_1_1 >> 1];
    var $conv1708_1_1 = $358 << 16 >> 16;
    var $add1710_1_1 = $add1710_1 + $conv1708_1_1 | 0;
    var $arrayidx1707_2_1 = $_pre130 + ($add1705_1 << 3) + 4 | 0;
    var $359 = HEAP16[$arrayidx1707_2_1 >> 1];
    var $conv1708_2_1 = $359 << 16 >> 16;
    var $add1710_2_1 = $add1710_2 + $conv1708_2_1 | 0;
    var $add1705_2 = $add1704_21091 + $mul1702 | 0;
    var $arrayidx1707_2938 = $_pre130 + ($add1705_2 << 3) | 0;
    var $360 = HEAP16[$arrayidx1707_2938 >> 1];
    var $conv1708_2939 = $360 << 16 >> 16;
    var $add1710_2941 = $add1710_1937 + $conv1708_2939 | 0;
    var $arrayidx1707_1_2 = $_pre130 + ($add1705_2 << 3) + 2 | 0;
    var $361 = HEAP16[$arrayidx1707_1_2 >> 1];
    var $conv1708_1_2 = $361 << 16 >> 16;
    var $add1710_1_2 = $add1710_1_1 + $conv1708_1_2 | 0;
    var $arrayidx1707_2_2 = $_pre130 + ($add1705_2 << 3) + 4 | 0;
    var $362 = HEAP16[$arrayidx1707_2_2 >> 1];
    var $conv1708_2_2 = $362 << 16 >> 16;
    var $add1710_2_2 = $add1710_2_1 + $conv1708_2_2 | 0;
    var $add1705_3 = $add1704_31089 + $mul1702 | 0;
    var $arrayidx1707_3 = $_pre130 + ($add1705_3 << 3) | 0;
    var $363 = HEAP16[$arrayidx1707_3 >> 1];
    var $conv1708_3 = $363 << 16 >> 16;
    var $add1710_3 = $add1710_2941 + $conv1708_3 | 0;
    HEAP32[$arrayidx1686 >> 2] = $add1710_3;
    var $arrayidx1707_1_3 = $_pre130 + ($add1705_3 << 3) + 2 | 0;
    var $364 = HEAP16[$arrayidx1707_1_3 >> 1];
    var $conv1708_1_3 = $364 << 16 >> 16;
    var $add1710_1_3 = $add1710_1_2 + $conv1708_1_3 | 0;
    HEAP32[$arrayidx1685 >> 2] = $add1710_1_3;
    var $arrayidx1707_2_3 = $_pre130 + ($add1705_3 << 3) + 4 | 0;
    var $365 = HEAP16[$arrayidx1707_2_3 >> 1];
    var $conv1708_2_3 = $365 << 16 >> 16;
    var $add1710_2_3 = $add1710_2_2 + $conv1708_2_3 | 0;
    HEAP32[$arrayidx1684 >> 2] = $add1710_2_3;
    var $inc1718 = $i_18737 + 1 | 0;
    var $exitcond = ($inc1718 | 0) == 4;
    if ($exitcond) {
      label = 128;
      break;
    } else {
      var $i_18737 = $inc1718;
      var $353 = $add1710_3;
      var $352 = $add1710_1_3;
      var $351 = $add1710_2_3;
      label = 153;
      break;
    }
   case 154:
    var $inc1766 = $col_9742 + 1 | 0;
    var $conv1679 = $_pre129 & 65535;
    var $div1680 = $conv1679 >>> 2;
    var $cmp1681 = ($inc1766 | 0) < ($div1680 | 0);
    if ($cmp1681) {
      var $col_9742 = $inc1766;
      label = 127;
      break;
    } else {
      label = 121;
      break;
    }
   case 155:
    var $pix_7779;
    var $col_8778;
    var $arrayidx1509 = $smrow_sroa_0_10 + $col_8778 * 12 | 0;
    var $366 = HEAP32[$arrayidx1509 >> 2];
    var $arrayidx1509_1 = $smrow_sroa_1_10 + $col_8778 * 12 | 0;
    var $367 = HEAP32[$arrayidx1509_1 >> 2];
    var $add1511_1 = $366 + $367 | 0;
    var $arrayidx1509_2 = $smrow_sroa_2_10 + $col_8778 * 12 | 0;
    var $368 = HEAP32[$arrayidx1509_2 >> 2];
    var $add1511_2 = $add1511_1 + $368 | 0;
    var $arrayidx1509_3 = $smrow_sroa_3_10 + $col_8778 * 12 | 0;
    var $369 = HEAP32[$arrayidx1509_3 >> 2];
    var $add1511_3 = $add1511_2 + $369 | 0;
    var $arrayidx1509_4 = $smrow_sroa_4_10 + $col_8778 * 12 | 0;
    var $370 = HEAP32[$arrayidx1509_4 >> 2];
    var $add1511_4 = $add1511_3 + $370 | 0;
    var $add1517 = $add1511_4 + 375 | 0;
    var $371 = HEAP16[$pix_7779 >> 1];
    var $arrayidx1509_1965 = $smrow_sroa_0_10 + $col_8778 * 12 + 4 | 0;
    var $372 = HEAP32[$arrayidx1509_1965 >> 2];
    var $arrayidx1509_1_1 = $smrow_sroa_1_10 + $col_8778 * 12 + 4 | 0;
    var $373 = HEAP32[$arrayidx1509_1_1 >> 2];
    var $add1511_1_1 = $372 + $373 | 0;
    var $arrayidx1509_2_1 = $smrow_sroa_2_10 + $col_8778 * 12 + 4 | 0;
    var $374 = HEAP32[$arrayidx1509_2_1 >> 2];
    var $add1511_2_1 = $add1511_1_1 + $374 | 0;
    var $arrayidx1509_3_1 = $smrow_sroa_3_10 + $col_8778 * 12 + 4 | 0;
    var $375 = HEAP32[$arrayidx1509_3_1 >> 2];
    var $add1511_3_1 = $add1511_2_1 + $375 | 0;
    var $arrayidx1509_4_1 = $smrow_sroa_4_10 + $col_8778 * 12 + 4 | 0;
    var $376 = HEAP32[$arrayidx1509_4_1 >> 2];
    var $add1511_4_1 = $add1511_3_1 + $376 | 0;
    var $add1517_1 = $add1517 + $add1511_4_1 | 0;
    var $arrayidx1518_1 = $pix_7779 + 2 | 0;
    var $377 = HEAP16[$arrayidx1518_1 >> 1];
    var $conv1519 = $371 << 16 >> 16;
    var $conv1519_1 = $377 << 16 >> 16;
    var $add1520 = $conv1519 + 60 | 0;
    var $add1520_1 = $conv1519_1 + $add1520 | 0;
    var $arrayidx1509_2966 = $smrow_sroa_0_10 + $col_8778 * 12 + 8 | 0;
    var $378 = HEAP32[$arrayidx1509_2966 >> 2];
    var $arrayidx1509_1_2 = $smrow_sroa_1_10 + $col_8778 * 12 + 8 | 0;
    var $379 = HEAP32[$arrayidx1509_1_2 >> 2];
    var $add1511_1_2 = $378 + $379 | 0;
    var $arrayidx1509_2_2 = $smrow_sroa_2_10 + $col_8778 * 12 + 8 | 0;
    var $380 = HEAP32[$arrayidx1509_2_2 >> 2];
    var $add1511_2_2 = $add1511_1_2 + $380 | 0;
    var $arrayidx1509_3_2 = $smrow_sroa_3_10 + $col_8778 * 12 + 8 | 0;
    var $381 = HEAP32[$arrayidx1509_3_2 >> 2];
    var $add1511_3_2 = $add1511_2_2 + $381 | 0;
    var $arrayidx1509_4_2 = $smrow_sroa_4_10 + $col_8778 * 12 + 8 | 0;
    var $382 = HEAP32[$arrayidx1509_4_2 >> 2];
    var $add1511_4_2 = $add1511_3_2 + $382 | 0;
    var $add1517_2 = $add1517_1 + $add1511_4_2 | 0;
    var $arrayidx1518_2 = $pix_7779 + 4 | 0;
    var $383 = HEAP16[$arrayidx1518_2 >> 1];
    var $conv1519_2 = $383 << 16 >> 16;
    var $add1520_2 = $conv1519_2 + $add1520_1 | 0;
    var $cmp1524 = ($add1520_2 | 0) < 0;
    var $_sum_2 = $cmp1524 ? 0 : $add1520_2;
    var $cmp1529 = ($add1517_2 | 0) > 375;
    if ($cmp1529) {
      label = 112;
      break;
    } else {
      label = 113;
      break;
    }
   case 156:
    var $384;
    var $c_25859;
    var $arrayidx896 = $ppm + $c_25859 * 36 | 0;
    var $385 = HEAPF32[$arrayidx896 >> 2];
    var $arrayidx896_1 = $ppm + $c_25859 * 36 + 4 | 0;
    var $mul900 = $385 * $conv899;
    var $386 = HEAPF32[$arrayidx896_1 >> 2];
    var $arrayidx896_2 = $ppm + $c_25859 * 36 + 8 | 0;
    var $arrayidx896_1992 = $ppm + $c_25859 * 36 + 12 | 0;
    var $add901 = $mul900;
    var $mul900_1 = $386 * $conv899_1;
    var $387 = HEAPF32[$arrayidx896_2 >> 2];
    var $arrayidx896_1_1 = $ppm + $c_25859 * 36 + 16 | 0;
    var $388 = HEAPF32[$arrayidx896_1992 >> 2];
    var $add901_1 = $add901 + $mul900_1;
    var $mul900_2 = $387 * $conv899_2;
    var $arrayidx896_2_1 = $ppm + $c_25859 * 36 + 20 | 0;
    var $389 = HEAPF32[$arrayidx896_1_1 >> 2];
    var $mul900_1995 = $388 * $conv899_1994;
    var $add901_2 = $add901_1 + $mul900_2;
    var $390 = HEAPF32[$arrayidx896_2_1 >> 2];
    var $mul900_1_1 = $389 * $conv899_1_1;
    var $add901_1996 = $add901_2 + $mul900_1995;
    var $mul900_2_1 = $390 * $conv899_2_1;
    var $add901_1_1 = $add901_1996 + $mul900_1_1;
    var $add901_2_1 = $add901_1_1 + $mul900_2_1;
    var $arrayidx896_2997 = $ppm + $c_25859 * 36 + 24 | 0;
    var $391 = HEAPF32[$arrayidx896_2997 >> 2];
    var $mul900_21000 = $391 * $conv899_2999;
    var $add901_21001 = $add901_2_1 + $mul900_21000;
    var $arrayidx896_1_2 = $ppm + $c_25859 * 36 + 28 | 0;
    var $392 = HEAPF32[$arrayidx896_1_2 >> 2];
    var $mul900_1_2 = $392 * $conv899_1_2;
    var $add901_1_2 = $add901_21001 + $mul900_1_2;
    var $arrayidx896_2_2 = $ppm + $c_25859 * 36 + 32 | 0;
    var $393 = HEAPF32[$arrayidx896_2_2 >> 2];
    var $mul900_2_2 = $393 * $conv899_2_2;
    var $add901_2_2 = $add901_1_2 + $mul900_2_2;
    var $arrayidx908 = $ipix + ($c_25859 << 2) | 0;
    var $conv909 = $384 | 0;
    var $floorf = Math.floor($add901_2_2);
    var $call911 = $floorf;
    var $add912 = $conv909 + $call911;
    var $arrayidx915 = $64 + $div913 * 12 + ($c_25859 << 2) | 0;
    var $394 = HEAPF32[$arrayidx915 >> 2];
    var $mul919 = $394 * $conv918;
    var $arrayidx923 = $64 + $add921 * 12 + ($c_25859 << 2) | 0;
    var $395 = HEAPF32[$arrayidx923 >> 2];
    var $mul926 = $395 * $conv925;
    var $add927 = $mul926 + $mul919;
    var $conv928 = $add927;
    var $mul929 = $add912 * $conv928;
    var $div931 = $mul929 / $conv930;
    var $arrayidx932 = $div + ($c_25859 << 2) | 0;
    var $396 = HEAPF32[$arrayidx932 >> 2];
    var $conv933 = $396;
    var $div934 = $div931 / $conv933;
    var $call935 = Math.floor($div934);
    var $conv936 = $call935 & -1;
    var $cmp939 = ($conv936 | 0) > 32e3;
    var $_conv936 = $cmp939 ? 32e3 : $conv936;
    HEAP32[$arrayidx908 >> 2] = $_conv936;
    var $conv945 = $_conv936 & 65535;
    var $arrayidx946 = $pix_0863 + ($c_25859 << 1) | 0;
    HEAP16[$arrayidx946 >> 1] = $conv945;
    var $inc948 = $c_25859 + 1 | 0;
    var $exitcond1002 = ($inc948 | 0) == 3;
    if ($exitcond1002) {
      label = 57;
      break;
    } else {
      label = 157;
      break;
    }
   case 157:
    var $arrayidx908_phi_trans_insert = $ipix + ($inc948 << 2) | 0;
    var $_pre161 = HEAP32[$arrayidx908_phi_trans_insert >> 2];
    var $c_25859 = $inc948;
    var $384 = $_pre161;
    label = 156;
    break;
   case 158:
    var $cmp509_1 = $93 < $95;
    if ($cmp509_1) {
      label = 159;
      break;
    } else {
      label = 162;
      break;
    }
   case 159:
    var $cmp516_1 = $94 < $95;
    var $_699_1 = $cmp516_1 ? $94 : $95;
    var $arrayidx527_1 = $67 + $row_2897 * 12 + 4 | 0;
    HEAPF32[$arrayidx527_1 >> 2] = $_699_1;
    label = 162;
    break;
   case 160:
    var $cmp488_1 = $93 > $95;
    if ($cmp488_1) {
      label = 161;
      break;
    } else {
      label = 162;
      break;
    }
   case 161:
    var $cmp495_1 = $94 > $95;
    var $__1 = $cmp495_1 ? $94 : $95;
    var $arrayidx503_1 = $67 + $row_2897 * 12 + 4 | 0;
    HEAPF32[$arrayidx503_1 >> 2] = $__1;
    label = 162;
    break;
   case 162:
    var $397 = HEAPF32[$arrayidx151 >> 2];
    var $398 = HEAPF32[$arrayidx144_11059 >> 2];
    var $cmp481_2 = $397 > $398;
    var $399 = HEAPF32[$arrayidx144 >> 2];
    if ($cmp481_2) {
      label = 165;
      break;
    } else {
      label = 163;
      break;
    }
   case 163:
    var $cmp509_2 = $397 < $399;
    if ($cmp509_2) {
      label = 164;
      break;
    } else {
      label = 167;
      break;
    }
   case 164:
    var $cmp516_2 = $398 < $399;
    var $_699_2 = $cmp516_2 ? $398 : $399;
    var $arrayidx527_2 = $67 + $row_2897 * 12 + 8 | 0;
    HEAPF32[$arrayidx527_2 >> 2] = $_699_2;
    label = 167;
    break;
   case 165:
    var $cmp488_2 = $397 > $399;
    if ($cmp488_2) {
      label = 166;
      break;
    } else {
      label = 167;
      break;
    }
   case 166:
    var $cmp495_2 = $398 > $399;
    var $__2 = $cmp495_2 ? $398 : $399;
    var $arrayidx503_2 = $67 + $row_2897 * 12 + 8 | 0;
    HEAPF32[$arrayidx503_2 >> 2] = $__2;
    label = 167;
    break;
   case 167:
    _memmove($34, $88, 24, 4, 0);
    var $add536 = $row_2897 + 1 | 0;
    var $arrayidx537 = $67 + $add536 * 12 | 0;
    var $400 = $arrayidx537;
    HEAP32[$89 >> 2] = HEAP32[$400 >> 2];
    HEAP32[$89 + 4 >> 2] = HEAP32[$400 + 4 >> 2];
    HEAP32[$89 + 8 >> 2] = HEAP32[$400 + 8 >> 2];
    var $cmp470 = ($add536 | 0) < ($sub469895 | 0);
    if ($cmp470) {
      var $row_2897 = $add536;
      label = 29;
      break;
    } else {
      var $row_2_lcssa = $add536;
      label = 35;
      break;
    }
   case 168:
    var $arrayidx324_promoted_2;
    var $arrayidx324_promoted_1;
    var $arrayidx324_promoted;
    var $i_5909;
    var $cmp315 = ($i_5909 | 0) == 0;
    var $conv318 = $cmp315 ? 32 : -1;
    var $arrayidx324 = $trans + $i_5909 * 12 | 0;
    var $mul321 = $conv318 * $conv294;
    var $div322 = $mul321 / 30;
    var $add325 = $div322 + $arrayidx324_promoted;
    var $cmp315_1 = ($i_5909 | 0) == 1;
    var $conv318_1 = $cmp315_1 ? 32 : -1;
    var $mul321_1 = $conv318_1 * $conv294_11033;
    var $div322_1 = $mul321_1 / 30;
    var $add325_1 = $div322_1 + $add325;
    var $cmp315_2 = ($i_5909 | 0) == 2;
    var $conv318_2 = $cmp315_2 ? 32 : -1;
    var $mul321_2 = $conv318_2 * $conv294_21039;
    var $div322_2 = $mul321_2 / 30;
    var $add325_2 = $div322_2 + $add325_1;
    HEAPF32[$arrayidx324 >> 2] = $add325_2;
    var $arrayidx324_1 = $trans + $i_5909 * 12 + 4 | 0;
    var $mul321_11019 = $conv318 * $conv294_1;
    var $div322_11020 = $mul321_11019 / 30;
    var $add325_11021 = $div322_11020 + $arrayidx324_promoted_1;
    var $mul321_1_1 = $conv318_1 * $conv294_1_1;
    var $div322_1_1 = $mul321_1_1 / 30;
    var $add325_1_1 = $div322_1_1 + $add325_11021;
    var $mul321_2_1 = $conv318_2 * $conv294_1_2;
    var $div322_2_1 = $mul321_2_1 / 30;
    var $add325_2_1 = $div322_2_1 + $add325_1_1;
    HEAPF32[$arrayidx324_1 >> 2] = $add325_2_1;
    var $arrayidx324_2 = $trans + $i_5909 * 12 + 8 | 0;
    var $mul321_21023 = $conv318 * $conv294_2;
    var $div322_21024 = $mul321_21023 / 30;
    var $add325_21025 = $div322_21024 + $arrayidx324_promoted_2;
    var $mul321_1_2 = $conv318_1 * $conv294_2_1;
    var $div322_1_2 = $mul321_1_2 / 30;
    var $add325_1_2 = $div322_1_2 + $add325_21025;
    var $mul321_2_2 = $conv318_2 * $conv294_2_2;
    var $div322_2_2 = $mul321_2_2 / 30;
    var $add325_2_2 = $div322_2_2 + $add325_1_2;
    HEAPF32[$arrayidx324_2 >> 2] = $add325_2_2;
    var $inc333 = $i_5909 + 1 | 0;
    var $exitcond1026 = ($inc333 | 0) == 3;
    if ($exitcond1026) {
      label = 23;
      break;
    } else {
      label = 169;
      break;
    }
   case 169:
    var $arrayidx324_phi_trans_insert = $trans + $inc333 * 12 | 0;
    var $arrayidx324_promoted_pre = HEAPF32[$arrayidx324_phi_trans_insert >> 2];
    var $arrayidx324_1_phi_trans_insert = $trans + $inc333 * 12 + 4 | 0;
    var $arrayidx324_promoted_1_pre = HEAPF32[$arrayidx324_1_phi_trans_insert >> 2];
    var $arrayidx324_2_phi_trans_insert = $trans + $inc333 * 12 + 8 | 0;
    var $arrayidx324_promoted_2_pre = HEAPF32[$arrayidx324_2_phi_trans_insert >> 2];
    var $i_5909 = $inc333;
    var $arrayidx324_promoted = $arrayidx324_promoted_pre;
    var $arrayidx324_promoted_1 = $arrayidx324_promoted_1_pre;
    var $arrayidx324_promoted_2 = $arrayidx324_promoted_2_pre;
    label = 168;
    break;
   case 170:
    var $arrayidx259 = $trans | 0;
    var $401 = HEAPF32[$arrayidx259 >> 2];
    var $arrayidx261 = $trans + 4 | 0;
    var $402 = HEAPF32[$arrayidx261 >> 2];
    var $add262 = $401 + $402;
    var $arrayidx264 = $trans + 8 | 0;
    var $403 = HEAPF32[$arrayidx264 >> 2];
    var $add265 = $add262 + $403;
    var $conv266 = $add265;
    var $arrayidx259_1 = $trans + 12 | 0;
    var $404 = HEAPF32[$arrayidx259_1 >> 2];
    var $arrayidx261_1 = $trans + 16 | 0;
    var $405 = HEAPF32[$arrayidx261_1 >> 2];
    var $add262_1 = $404 + $405;
    var $arrayidx264_1 = $trans + 20 | 0;
    var $406 = HEAPF32[$arrayidx264_1 >> 2];
    var $add265_1 = $add262_1 + $406;
    var $conv266_1 = $add265_1;
    var $arrayidx259_2 = $trans + 24 | 0;
    var $407 = HEAPF32[$arrayidx259_2 >> 2];
    var $arrayidx261_2 = $trans + 28 | 0;
    var $408 = HEAPF32[$arrayidx261_2 >> 2];
    var $add262_2 = $407 + $408;
    var $arrayidx264_2 = $trans + 32 | 0;
    var $409 = HEAPF32[$arrayidx264_2 >> 2];
    var $add265_2 = $add262_2 + $409;
    var $conv266_2 = $add265_2;
    var $mul272 = $conv266 * 6;
    var $mul274 = $conv266_1 * 11;
    var $add275 = $mul272 + $mul274;
    var $mul277 = $conv266_2 * 3;
    var $add278 = $add275 + $mul277;
    var $div279 = $add278 / 20;
    var $conv290 = $401;
    var $mul291 = $div279 * $conv290;
    var $div293 = $mul291 / $conv266;
    var $conv294 = $div293;
    HEAPF32[$arrayidx144_1_1 >> 2] = $conv294;
    var $conv290_1 = $402;
    var $mul291_1 = $div279 * $conv290_1;
    var $div293_1 = $mul291_1 / $conv266;
    var $conv294_1 = $div293_1;
    HEAPF32[$arrayidx157_11062 >> 2] = $conv294_1;
    var $conv290_2 = $403;
    var $mul291_2 = $div279 * $conv290_2;
    var $div293_2 = $mul291_2 / $conv266;
    var $conv294_2 = $div293_2;
    HEAPF32[$arrayidx144_11059 >> 2] = $conv294_2;
    var $conv290_11030 = $404;
    var $mul291_11031 = $div279 * $conv290_11030;
    var $div293_11032 = $mul291_11031 / $conv266_1;
    var $conv294_11033 = $div293_11032;
    HEAPF32[$arrayidx151_1 >> 2] = $conv294_11033;
    var $conv290_1_1 = $405;
    var $mul291_1_1 = $div279 * $conv290_1_1;
    var $div293_1_1 = $mul291_1_1 / $conv266_1;
    var $conv294_1_1 = $div293_1_1;
    HEAPF32[$arrayidx138 >> 2] = $conv294_1_1;
    var $conv290_2_1 = $406;
    var $mul291_2_1 = $div279 * $conv290_2_1;
    var $div293_2_1 = $mul291_2_1 / $conv266_1;
    var $conv294_2_1 = $div293_2_1;
    HEAPF32[$arrayidx151 >> 2] = $conv294_2_1;
    var $conv290_21036 = $407;
    var $mul291_21037 = $div279 * $conv290_21036;
    var $div293_21038 = $mul291_21037 / $conv266_2;
    var $conv294_21039 = $div293_21038;
    HEAPF32[$arrayidx144_1 >> 2] = $conv294_21039;
    var $conv290_1_2 = $408;
    var $mul291_1_2 = $div279 * $conv290_1_2;
    var $div293_1_2 = $mul291_1_2 / $conv266_2;
    var $conv294_1_2 = $div293_1_2;
    HEAPF32[$arrayidx157 >> 2] = $conv294_1_2;
    var $conv290_2_2 = $409;
    var $mul291_2_2 = $div279 * $conv290_2_2;
    var $div293_2_2 = $mul291_2_2 / $conv266_2;
    var $conv294_2_2 = $div293_2_2;
    HEAPF32[$arrayidx144 >> 2] = $conv294_2_2;
    for (var $$dest = $57 >> 2, $$stop = $$dest + 9; $$dest < $$stop; $$dest++) {
      HEAP32[$$dest] = 0;
    }
    var $i_5909 = 0;
    var $arrayidx324_promoted = 0;
    var $arrayidx324_promoted_1 = 0;
    var $arrayidx324_promoted_2 = 0;
    label = 168;
    break;
   case 171:
    var $arrayidx243_promoted_2;
    var $arrayidx243_promoted_1;
    var $arrayidx243_promoted;
    var $i_3915;
    var $arrayidx236 = 5244964 + ($i_3915 << 4) | 0;
    var $arrayidx243 = $trans + $i_3915 * 12 | 0;
    var $410 = HEAPF32[$arrayidx236 >> 2];
    var $mul239 = $410 * $52;
    var $mul241 = $mul239 * $div219;
    var $add244 = $arrayidx243_promoted + $mul241;
    var $arrayidx236_1 = 5244968 + ($i_3915 << 4) | 0;
    var $411 = HEAPF32[$arrayidx236_1 >> 2];
    var $mul239_1 = $411 * $49;
    var $mul241_1 = $mul239_1 * $div219;
    var $add244_1 = $add244 + $mul241_1;
    var $arrayidx236_2 = 5244972 + ($i_3915 << 4) | 0;
    var $412 = HEAPF32[$arrayidx236_2 >> 2];
    var $mul239_2 = $412 * $48;
    var $mul241_2 = $mul239_2 * $div219;
    var $add244_2 = $add244_1 + $mul241_2;
    HEAPF32[$arrayidx243 >> 2] = $add244_2;
    var $arrayidx243_1 = $trans + $i_3915 * 12 + 4 | 0;
    var $mul239_11045 = $410 * $51;
    var $mul241_11046 = $mul239_11045 * $div219_1;
    var $add244_11047 = $arrayidx243_promoted_1 + $mul241_11046;
    var $mul239_1_1 = $411 * $44;
    var $mul241_1_1 = $mul239_1_1 * $div219_1;
    var $add244_1_1 = $add244_11047 + $mul241_1_1;
    var $mul239_2_1 = $412 * $47;
    var $mul241_2_1 = $mul239_2_1 * $div219_1;
    var $add244_2_1 = $add244_1_1 + $mul241_2_1;
    HEAPF32[$arrayidx243_1 >> 2] = $add244_2_1;
    var $arrayidx243_2 = $trans + $i_3915 * 12 + 8 | 0;
    var $mul239_21049 = $410 * $50;
    var $mul241_21050 = $mul239_21049 * $div219_2;
    var $add244_21051 = $arrayidx243_promoted_2 + $mul241_21050;
    var $mul239_1_2 = $411 * $46;
    var $mul241_1_2 = $mul239_1_2 * $div219_2;
    var $add244_1_2 = $add244_21051 + $mul241_1_2;
    var $mul239_2_2 = $412 * $45;
    var $mul241_2_2 = $mul239_2_2 * $div219_2;
    var $add244_2_2 = $add244_1_2 + $mul241_2_2;
    HEAPF32[$arrayidx243_2 >> 2] = $add244_2_2;
    var $inc252 = $i_3915 + 1 | 0;
    var $exitcond1052 = ($inc252 | 0) == 3;
    if ($exitcond1052) {
      label = 170;
      break;
    } else {
      label = 172;
      break;
    }
   case 172:
    var $arrayidx243_phi_trans_insert = $trans + $inc252 * 12 | 0;
    var $arrayidx243_promoted_pre = HEAPF32[$arrayidx243_phi_trans_insert >> 2];
    var $arrayidx243_1_phi_trans_insert = $trans + $inc252 * 12 + 4 | 0;
    var $arrayidx243_promoted_1_pre = HEAPF32[$arrayidx243_1_phi_trans_insert >> 2];
    var $arrayidx243_2_phi_trans_insert = $trans + $inc252 * 12 + 8 | 0;
    var $arrayidx243_promoted_2_pre = HEAPF32[$arrayidx243_2_phi_trans_insert >> 2];
    var $i_3915 = $inc252;
    var $arrayidx243_promoted = $arrayidx243_promoted_pre;
    var $arrayidx243_promoted_1 = $arrayidx243_promoted_1_pre;
    var $arrayidx243_promoted_2 = $arrayidx243_promoted_2_pre;
    label = 171;
    break;
   case 173:
    var $arrayidx115_promoted_2;
    var $arrayidx115_promoted_1;
    var $arrayidx115_promoted;
    var $i_1924;
    var $arrayidx110 = $correct + $i_1924 * 12 | 0;
    var $arrayidx115 = $last + $i_1924 * 12 | 0;
    var $413 = HEAPF32[$arrayidx110 >> 2];
    var $mul113 = $413 * $35;
    var $add116 = $arrayidx115_promoted + $mul113;
    var $arrayidx110_1 = $correct + $i_1924 * 12 + 4 | 0;
    var $414 = HEAPF32[$arrayidx110_1 >> 2];
    var $mul113_1 = $414 * $36;
    var $add116_1 = $add116 + $mul113_1;
    var $arrayidx110_2 = $correct + $i_1924 * 12 + 8 | 0;
    var $415 = HEAPF32[$arrayidx110_2 >> 2];
    var $mul113_2 = $415 * $37;
    var $add116_2 = $add116_1 + $mul113_2;
    HEAPF32[$arrayidx115 >> 2] = $add116_2;
    var $arrayidx115_1 = $last + $i_1924 * 12 + 4 | 0;
    var $mul113_11077 = $413 * $38;
    var $add116_11078 = $arrayidx115_promoted_1 + $mul113_11077;
    var $mul113_1_1 = $414 * $39;
    var $add116_1_1 = $add116_11078 + $mul113_1_1;
    var $mul113_2_1 = $415 * $40;
    var $add116_2_1 = $add116_1_1 + $mul113_2_1;
    HEAPF32[$arrayidx115_1 >> 2] = $add116_2_1;
    var $arrayidx115_2 = $last + $i_1924 * 12 + 8 | 0;
    var $mul113_21080 = $413 * $41;
    var $add116_21081 = $arrayidx115_promoted_2 + $mul113_21080;
    var $mul113_1_2 = $414 * $42;
    var $add116_1_2 = $add116_21081 + $mul113_1_2;
    var $mul113_2_2 = $415 * $43;
    var $add116_2_2 = $add116_1_2 + $mul113_2_2;
    HEAPF32[$arrayidx115_2 >> 2] = $add116_2_2;
    var $inc124 = $i_1924 + 1 | 0;
    var $exitcond1082 = ($inc124 | 0) == 3;
    if ($exitcond1082) {
      label = 20;
      break;
    } else {
      label = 174;
      break;
    }
   case 174:
    var $arrayidx115_phi_trans_insert = $last + $inc124 * 12 | 0;
    var $arrayidx115_promoted_pre = HEAPF32[$arrayidx115_phi_trans_insert >> 2];
    var $arrayidx115_1_phi_trans_insert = $last + $inc124 * 12 + 4 | 0;
    var $arrayidx115_promoted_1_pre = HEAPF32[$arrayidx115_1_phi_trans_insert >> 2];
    var $arrayidx115_2_phi_trans_insert = $last + $inc124 * 12 + 8 | 0;
    var $arrayidx115_promoted_2_pre = HEAPF32[$arrayidx115_2_phi_trans_insert >> 2];
    var $i_1924 = $inc124;
    var $arrayidx115_promoted = $arrayidx115_promoted_pre;
    var $arrayidx115_promoted_1 = $arrayidx115_promoted_1_pre;
    var $arrayidx115_promoted_2 = $arrayidx115_promoted_2_pre;
    label = 173;
    break;
  }
}
_foveon_interpolate["X"] = 1;
function _remove_zeroes() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP16[5398712 >> 1];
    var $cmp48 = $0 << 16 >> 16 == 0;
    if ($cmp48) {
      label = 21;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $_pre = HEAP16[5242964 >> 1];
    var $row_049 = 0;
    var $1 = $_pre;
    label = 4;
    break;
   case 4:
    var $1;
    var $row_049;
    var $cmp445 = $1 << 16 >> 16 == 0;
    if ($cmp445) {
      var $4 = 0;
      label = 20;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $shl = $row_049 << 1;
    var $and = $shl & 14;
    var $sub = $row_049 - 2 | 0;
    var $add21 = $row_049 + 2 | 0;
    var $cmp2238 = $sub >>> 0 > $add21 >>> 0;
    var $_pre1 = HEAP32[5427632 >> 2];
    var $_pre2 = HEAP16[5244916 >> 1];
    var $_pre3 = HEAP16[5264092 >> 1];
    var $_pre4 = HEAP32[5264108 >> 2];
    var $col_046 = 0;
    label = 6;
    break;
   case 6:
    var $col_046;
    var $and7 = $col_046 & 1;
    var $add = $and7 | $and;
    var $shl8 = $add << 1;
    var $shr = $_pre1 >>> ($shl8 >>> 0);
    var $and9 = $shr & 3;
    var $conv10 = $_pre2 & 65535;
    var $shr11 = $row_049 >>> ($conv10 >>> 0);
    var $conv12 = $_pre3 & 65535;
    var $mul = $shr11 * $conv12 & -1;
    var $shr14 = $col_046 >>> ($conv10 >>> 0);
    var $add15 = $mul + $shr14 | 0;
    var $arrayidx16 = $_pre4 + ($add15 << 3) + ($and9 << 1) | 0;
    var $2 = HEAP16[$arrayidx16 >> 1];
    var $cmp18_not = $2 << 16 >> 16 != 0;
    var $brmerge = $cmp18_not | $cmp2238;
    if ($brmerge) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    var $conv3_pre = $_pre & 65535;
    var $conv3_pre_phi = $conv3_pre;
    label = 19;
    break;
   case 8:
    var $sub25 = $col_046 - 2 | 0;
    var $add27 = $col_046 + 2 | 0;
    var $cmp2833 = $sub25 >>> 0 > $add27 >>> 0;
    var $conv31 = $0 & 65535;
    var $conv34 = $_pre & 65535;
    var $tot_039 = 0;
    var $n_040 = 0;
    var $r_041 = $sub;
    label = 9;
    break;
   case 9:
    var $r_041;
    var $n_040;
    var $tot_039;
    if ($cmp2833) {
      var $tot_1_lcssa = $tot_039;
      var $n_1_lcssa = $n_040;
      label = 16;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $cmp32 = $r_041 >>> 0 < $conv31 >>> 0;
    var $shl38 = $r_041 << 1;
    var $and39 = $shl38 & 14;
    var $shr63 = $r_041 >>> ($conv10 >>> 0);
    var $mul65 = $shr63 * $conv12 & -1;
    var $tot_134 = $tot_039;
    var $n_135 = $n_040;
    var $c_036 = $sub25;
    label = 11;
    break;
   case 11:
    var $c_036;
    var $n_135;
    var $tot_134;
    var $cmp35 = $c_036 >>> 0 < $conv34 >>> 0;
    var $or_cond = $cmp32 & $cmp35;
    if ($or_cond) {
      label = 12;
      break;
    } else {
      var $n_2 = $n_135;
      var $tot_2 = $tot_134;
      label = 15;
      break;
    }
   case 12:
    var $and40 = $c_036 & 1;
    var $add41 = $and40 | $and39;
    var $shl42 = $add41 << 1;
    var $shr43 = $_pre1 >>> ($shl42 >>> 0);
    var $and44 = $shr43 & 3;
    var $cmp52 = ($and44 | 0) == ($and9 | 0);
    if ($cmp52) {
      label = 13;
      break;
    } else {
      var $n_2 = $n_135;
      var $tot_2 = $tot_134;
      label = 15;
      break;
    }
   case 13:
    var $shr67 = $c_036 >>> ($conv10 >>> 0);
    var $add68 = $mul65 + $shr67 | 0;
    var $arrayidx70 = $_pre4 + ($add68 << 3) + ($and9 << 1) | 0;
    var $3 = HEAP16[$arrayidx70 >> 1];
    var $tobool = $3 << 16 >> 16 == 0;
    if ($tobool) {
      var $n_2 = $n_135;
      var $tot_2 = $tot_134;
      label = 15;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $conv71 = $3 & 65535;
    var $inc = $n_135 + 1 | 0;
    var $add90 = $conv71 + $tot_134 | 0;
    var $n_2 = $inc;
    var $tot_2 = $add90;
    label = 15;
    break;
   case 15:
    var $tot_2;
    var $n_2;
    var $inc91 = $c_036 + 1 | 0;
    var $cmp28 = $inc91 >>> 0 > $add27 >>> 0;
    if ($cmp28) {
      var $tot_1_lcssa = $tot_2;
      var $n_1_lcssa = $n_2;
      label = 16;
      break;
    } else {
      var $tot_134 = $tot_2;
      var $n_135 = $n_2;
      var $c_036 = $inc91;
      label = 11;
      break;
    }
   case 16:
    var $n_1_lcssa;
    var $tot_1_lcssa;
    var $inc93 = $r_041 + 1 | 0;
    var $cmp22 = $inc93 >>> 0 > $add21 >>> 0;
    if ($cmp22) {
      label = 17;
      break;
    } else {
      var $tot_039 = $tot_1_lcssa;
      var $n_040 = $n_1_lcssa;
      var $r_041 = $inc93;
      label = 9;
      break;
    }
   case 17:
    var $tobool95 = ($n_1_lcssa | 0) == 0;
    if ($tobool95) {
      var $conv3_pre_phi = $conv34;
      label = 19;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    var $div = Math.floor(($tot_1_lcssa >>> 0) / ($n_1_lcssa >>> 0));
    var $conv97 = $div & 65535;
    HEAP16[$arrayidx16 >> 1] = $conv97;
    var $conv3_pre_phi = $conv34;
    label = 19;
    break;
   case 19:
    var $conv3_pre_phi;
    var $inc117 = $col_046 + 1 | 0;
    var $cmp4 = $inc117 >>> 0 < $conv3_pre_phi >>> 0;
    if ($cmp4) {
      var $col_046 = $inc117;
      label = 6;
      break;
    } else {
      var $4 = $_pre;
      label = 20;
      break;
    }
   case 20:
    var $4;
    var $inc120 = $row_049 + 1 | 0;
    var $conv = $0 & 65535;
    var $cmp = $inc120 >>> 0 < $conv >>> 0;
    if ($cmp) {
      var $row_049 = $inc120;
      var $1 = $4;
      label = 4;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    return;
  }
}
_remove_zeroes["X"] = 1;
function _crop_masked_pixels() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $mblack = __stackBase__;
    var $0 = HEAP32[5263692 >> 2];
    var $cmp = ($0 | 0) == 64;
    var $cmp1 = ($0 | 0) == 86;
    var $or_cond = $cmp | $cmp1;
    if ($or_cond) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _phase_one_correct();
    label = 4;
    break;
   case 4:
    var $1 = HEAP16[5398900 >> 1];
    var $tobool = $1 << 16 >> 16 == 0;
    if ($tobool) {
      label = 7;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $2 = HEAP16[5245036 >> 1];
    var $conv76 = $2 & 65535;
    var $3 = HEAP16[5243564 >> 1];
    var $conv377 = $3 & 65535;
    var $mul78 = $conv377 << 1;
    var $sub79 = $conv76 - $mul78 | 0;
    var $cmp480 = ($sub79 | 0) > 0;
    if ($cmp480) {
      label = 6;
      break;
    } else {
      label = 24;
      break;
    }
   case 6:
    var $_pre11 = HEAP32[5398904 >> 2];
    var $row_081 = 0;
    label = 9;
    break;
   case 7:
    var $4 = HEAP16[5398712 >> 1];
    var $cmp6564 = $4 << 16 >> 16 == 0;
    if ($cmp6564) {
      label = 24;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $_pre = HEAP16[5242964 >> 1];
    var $row_165 = 0;
    var $16 = $_pre;
    label = 20;
    break;
   case 9:
    var $row_081;
    var $conv767 = $1 & 65535;
    var $tobool868 = ($_pre11 | 0) != 0;
    var $5 = $tobool868 & 1;
    var $lnot_ext69 = $5 ^ 1;
    var $shl70 = $conv767 << $lnot_ext69;
    var $cmp971 = ($shl70 | 0) > 0;
    if ($cmp971) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $inc60_pre = $row_081 + 1 | 0;
    var $inc60_pre_phi = $inc60_pre;
    label = 19;
    break;
   case 11:
    var $shr = $row_081 >> 1;
    var $add17 = $row_081 + 1 | 0;
    var $shr18 = $add17 >> 1;
    var $col_072 = 0;
    label = 12;
    break;
   case 12:
    var $col_072;
    var $sub15 = $conv767 - 1 | 0;
    if ($tobool868) {
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    var $sub16 = $shr - $col_072 | 0;
    var $add19 = $col_072 + $shr18 | 0;
    var $c_0 = $add19;
    var $sub16_pn = $sub16;
    label = 15;
    break;
   case 14:
    var $shr23 = $col_072 >> 1;
    var $add22 = $row_081 - $shr23 | 0;
    var $add25 = $col_072 + 1 | 0;
    var $shr26 = $add25 >> 1;
    var $add27 = $shr26 + $row_081 | 0;
    var $c_0 = $add27;
    var $sub16_pn = $add22;
    label = 15;
    break;
   case 15:
    var $sub16_pn;
    var $c_0;
    var $r_0 = $sub16_pn + $sub15 | 0;
    var $6 = HEAP16[5398712 >> 1];
    var $conv29 = $6 & 65535;
    var $cmp30 = $r_0 >>> 0 < $conv29 >>> 0;
    if ($cmp30) {
      label = 16;
      break;
    } else {
      label = 18;
      break;
    }
   case 16:
    var $7 = HEAP16[5242964 >> 1];
    var $conv32 = $7 & 65535;
    var $cmp33 = $c_0 >>> 0 < $conv32 >>> 0;
    if ($cmp33) {
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 17:
    var $add37 = $conv377 + $row_081 | 0;
    var $8 = HEAP16[5245028 >> 1];
    var $conv38 = $8 & 65535;
    var $mul39 = $add37 * $conv38 & -1;
    var $9 = HEAP16[5263700 >> 1];
    var $conv40 = $9 & 65535;
    var $add41 = $conv40 + $col_072 | 0;
    var $add42 = $add41 + $mul39 | 0;
    var $10 = HEAP32[5245032 >> 2];
    var $arrayidx = $10 + ($add42 << 1) | 0;
    var $11 = HEAP16[$arrayidx >> 1];
    var $12 = HEAP32[5427632 >> 2];
    var $shl43 = $r_0 << 1;
    var $and = $shl43 & 14;
    var $and44 = $c_0 & 1;
    var $add45 = $and | $and44;
    var $shl46 = $add45 << 1;
    var $shr47 = $12 >>> ($shl46 >>> 0);
    var $and48 = $shr47 & 3;
    var $13 = HEAP16[5244916 >> 1];
    var $conv49 = $13 & 65535;
    var $shr50 = $r_0 >>> ($conv49 >>> 0);
    var $14 = HEAP16[5264092 >> 1];
    var $conv51 = $14 & 65535;
    var $mul52 = $shr50 * $conv51 & -1;
    var $shr54 = $c_0 >>> ($conv49 >>> 0);
    var $add55 = $mul52 + $shr54 | 0;
    var $15 = HEAP32[5264108 >> 2];
    var $arrayidx57 = $15 + ($add55 << 3) + ($and48 << 1) | 0;
    HEAP16[$arrayidx57 >> 1] = $11;
    label = 18;
    break;
   case 18:
    var $inc = $col_072 + 1 | 0;
    var $cmp9 = ($inc | 0) < ($shl70 | 0);
    if ($cmp9) {
      var $col_072 = $inc;
      label = 12;
      break;
    } else {
      var $inc60_pre_phi = $add17;
      label = 19;
      break;
    }
   case 19:
    var $inc60_pre_phi;
    var $cmp4 = ($inc60_pre_phi | 0) < ($sub79 | 0);
    if ($cmp4) {
      var $row_081 = $inc60_pre_phi;
      label = 9;
      break;
    } else {
      label = 24;
      break;
    }
   case 20:
    var $16;
    var $row_165;
    var $cmp7061 = $16 << 16 >> 16 == 0;
    if ($cmp7061) {
      var $18 = 0;
      label = 23;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    var $_pre2 = HEAP16[5243564 >> 1];
    var $_pre3 = HEAP16[5245028 >> 1];
    var $_pre4 = HEAP16[5263700 >> 1];
    var $_pre5 = HEAP32[5245032 >> 2];
    var $_pre6 = HEAP16[5244916 >> 1];
    var $_pre7 = HEAP16[5264092 >> 1];
    var $_pre8 = HEAP32[5264108 >> 2];
    var $col_162 = 0;
    label = 22;
    break;
   case 22:
    var $col_162;
    var $conv73 = $_pre2 & 65535;
    var $add74 = $conv73 + $row_165 | 0;
    var $conv75 = $_pre3 & 65535;
    var $mul76 = $add74 * $conv75 & -1;
    var $conv77 = $_pre4 & 65535;
    var $add78 = $conv77 + $col_162 | 0;
    var $add79 = $add78 + $mul76 | 0;
    var $arrayidx80 = $_pre5 + ($add79 << 1) | 0;
    var $17 = HEAP16[$arrayidx80 >> 1];
    var $call = _fcol($row_165, $col_162);
    var $conv81 = $_pre6 & 65535;
    var $shr82 = $row_165 >> $conv81;
    var $conv83 = $_pre7 & 65535;
    var $mul84 = $shr82 * $conv83 & -1;
    var $shr86 = $col_162 >> $conv81;
    var $add87 = $mul84 + $shr86 | 0;
    var $arrayidx89 = $_pre8 + ($add87 << 3) + ($call << 1) | 0;
    HEAP16[$arrayidx89 >> 1] = $17;
    var $inc91 = $col_162 + 1 | 0;
    var $conv69 = $_pre & 65535;
    var $cmp70 = ($inc91 | 0) < ($conv69 | 0);
    if ($cmp70) {
      var $col_162 = $inc91;
      label = 22;
      break;
    } else {
      var $18 = $_pre;
      label = 23;
      break;
    }
   case 23:
    var $18;
    var $inc94 = $row_165 + 1 | 0;
    var $conv64 = $4 & 65535;
    var $cmp65 = ($inc94 | 0) < ($conv64 | 0);
    if ($cmp65) {
      var $row_165 = $inc94;
      var $16 = $18;
      label = 20;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    var $19 = HEAP32[5263512 >> 2];
    var $tobool97 = ($19 | 0) == 0;
    if ($tobool97) {
      label = 25;
      break;
    } else {
      label = 36;
      break;
    }
   case 25:
    var $20 = HEAP32[5263692 >> 2];
    var $cmp100 = ($20 | 0) == 42;
    var $cmp103 = ($20 | 0) == 46;
    var $or_cond1 = $cmp100 | $cmp103;
    if ($or_cond1) {
      label = 26;
      break;
    } else {
      label = 27;
      break;
    }
   case 26:
    HEAP32[5263520 >> 2] = 2;
    HEAP32[5263504 >> 2] = 2;
    HEAP32[5263512 >> 2] = -2;
    var $22 = -2;
    var $_pr9 = $20;
    label = 33;
    break;
   case 27:
    var $cmp107 = ($20 | 0) == 10;
    var $cmp110 = ($20 | 0) == 26;
    var $or_cond2 = $cmp107 | $cmp110;
    if ($or_cond2) {
      var $22 = 0;
      var $_pr9 = $20;
      label = 33;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    var $cmp113 = ($20 | 0) == 82;
    if ($cmp113) {
      label = 29;
      break;
    } else {
      label = 30;
      break;
    }
   case 29:
    var $call116 = _strncmp(5263372, 5579868, 3);
    var $tobool117 = ($call116 | 0) == 0;
    if ($tobool117) {
      label = 36;
      break;
    } else {
      var $22 = 0;
      var $_pr9 = 82;
      label = 33;
      break;
    }
   case 30:
    var $cmp119_old = ($20 | 0) == 34;
    if ($cmp119_old) {
      var $22 = 0;
      var $_pr9 = 34;
      label = 33;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    var $cmp122 = ($20 | 0) == 36;
    if ($cmp122) {
      label = 32;
      break;
    } else {
      var $30 = $20;
      label = 34;
      break;
    }
   case 32:
    var $21 = HEAP32[5263696 >> 2];
    var $and125 = $21 & 32;
    var $tobool126 = ($and125 | 0) == 0;
    if ($tobool126) {
      label = 36;
      break;
    } else {
      var $22 = 0;
      var $_pr9 = 36;
      label = 33;
      break;
    }
   case 33:
    var $_pr9;
    var $22;
    var $23 = HEAP16[5243564 >> 1];
    var $conv128 = $23 & 65535;
    HEAP32[5263516 >> 2] = $conv128;
    HEAP32[5263500 >> 2] = $conv128;
    var $24 = HEAP16[5398712 >> 1];
    var $conv130 = $24 & 65535;
    var $add131 = $conv130 + $conv128 | 0;
    HEAP32[5263524 >> 2] = $add131;
    HEAP32[5263508 >> 2] = $add131;
    var $25 = HEAP16[5263700 >> 1];
    var $conv132 = $25 & 65535;
    var $add133 = $22 + $conv132 | 0;
    HEAP32[5263512 >> 2] = $add133;
    var $26 = HEAP16[5242964 >> 1];
    var $conv135 = $26 & 65535;
    var $add136 = $conv135 + $conv132 | 0;
    var $27 = HEAP32[5263520 >> 2];
    var $add137 = $add136 + $27 | 0;
    HEAP32[5263520 >> 2] = $add137;
    var $28 = HEAP16[5245028 >> 1];
    var $conv138 = $28 & 65535;
    var $29 = HEAP32[5263528 >> 2];
    var $add139 = $29 + $conv138 | 0;
    HEAP32[5263528 >> 2] = $add139;
    var $30 = $_pr9;
    label = 34;
    break;
   case 34:
    var $30;
    var $cmp141 = ($30 | 0) == 66;
    if ($cmp141) {
      label = 35;
      break;
    } else {
      label = 36;
      break;
    }
   case 35:
    var $31 = HEAP16[5243564 >> 1];
    var $conv144 = $31 & 65535;
    HEAP32[5263508 >> 2] = $conv144;
    var $32 = HEAP16[5242964 >> 1];
    var $conv145 = $32 & 65535;
    HEAP32[5263512 >> 2] = $conv145;
    label = 36;
    break;
   case 36:
    var $33 = $mblack;
    HEAP32[$33 >> 2] = 0;
    HEAP32[$33 + 4 >> 2] = 0;
    HEAP32[$33 + 8 >> 2] = 0;
    HEAP32[$33 + 12 >> 2] = 0;
    HEAP32[$33 + 16 >> 2] = 0;
    HEAP32[$33 + 20 >> 2] = 0;
    HEAP32[$33 + 24 >> 2] = 0;
    HEAP32[$33 + 28 >> 2] = 0;
    var $34 = HEAP32[5427632 >> 2];
    var $35 = HEAP16[5243564 >> 1];
    var $conv167 = $35 & 65535;
    var $36 = HEAP16[5263700 >> 1];
    var $conv171 = $36 & 65535;
    var $37 = HEAP16[5245028 >> 1];
    var $conv178 = $37 & 65535;
    var $38 = HEAP32[5245032 >> 2];
    var $m_058 = 0;
    var $zero_059 = 0;
    label = 37;
    break;
   case 37:
    var $zero_059;
    var $m_058;
    var $arrayidx152 = 5263500 + ($m_058 << 4) | 0;
    var $39 = HEAP32[$arrayidx152 >> 2];
    var $arrayidx155 = 5263508 + ($m_058 << 4) | 0;
    var $40 = HEAP32[$arrayidx155 >> 2];
    var $cmp15654 = ($39 | 0) < ($40 | 0);
    if ($cmp15654) {
      label = 38;
      break;
    } else {
      var $zero_1_lcssa = $zero_059;
      label = 43;
      break;
    }
   case 38:
    var $arrayidx160 = 5263504 + ($m_058 << 4) | 0;
    var $41 = HEAP32[$arrayidx160 >> 2];
    var $arrayidx163 = 5263512 + ($m_058 << 4) | 0;
    var $42 = HEAP32[$arrayidx163 >> 2];
    var $cmp16451 = ($41 | 0) < ($42 | 0);
    var $zero_155 = $zero_059;
    var $row_256 = $39;
    label = 39;
    break;
   case 39:
    var $row_256;
    var $zero_155;
    if ($cmp16451) {
      label = 40;
      break;
    } else {
      var $zero_2_lcssa = $zero_155;
      label = 42;
      break;
    }
   case 40:
    var $sub168 = $row_256 - $conv167 | 0;
    var $shl169 = $sub168 << 1;
    var $and170 = $shl169 & 14;
    var $mul179 = $conv178 * $row_256 & -1;
    var $col_252 = $41;
    var $zero_253 = $zero_155;
    label = 41;
    break;
   case 41:
    var $zero_253;
    var $col_252;
    var $sub172 = $col_252 - $conv171 | 0;
    var $and173 = $sub172 & 1;
    var $add174 = $and170 | $and173;
    var $shl175 = $add174 << 1;
    var $shr176 = $34 >>> ($shl175 >>> 0);
    var $and177 = $shr176 & 3;
    var $add180 = $mul179 + $col_252 | 0;
    var $arrayidx181 = $38 + ($add180 << 1) | 0;
    var $43 = HEAP16[$arrayidx181 >> 1];
    var $conv182 = $43 & 65535;
    var $arrayidx183 = $mblack + ($and177 << 2) | 0;
    var $44 = HEAP32[$arrayidx183 >> 2];
    var $add184 = $44 + $conv182 | 0;
    HEAP32[$arrayidx183 >> 2] = $add184;
    var $add18549 = $and177 | 4;
    var $arrayidx186 = $mblack + ($add18549 << 2) | 0;
    var $45 = HEAP32[$arrayidx186 >> 2];
    var $inc187 = $45 + 1 | 0;
    HEAP32[$arrayidx186 >> 2] = $inc187;
    var $lnot189 = $43 << 16 >> 16 == 0;
    var $lnot_ext190 = $lnot189 & 1;
    var $add191 = $lnot_ext190 + $zero_253 | 0;
    var $inc193 = $col_252 + 1 | 0;
    var $cmp164 = ($inc193 | 0) < ($42 | 0);
    if ($cmp164) {
      var $col_252 = $inc193;
      var $zero_253 = $add191;
      label = 41;
      break;
    } else {
      var $zero_2_lcssa = $add191;
      label = 42;
      break;
    }
   case 42:
    var $zero_2_lcssa;
    var $inc196 = $row_256 + 1 | 0;
    var $cmp156 = ($inc196 | 0) < ($40 | 0);
    if ($cmp156) {
      var $zero_155 = $zero_2_lcssa;
      var $row_256 = $inc196;
      label = 39;
      break;
    } else {
      var $zero_1_lcssa = $zero_2_lcssa;
      label = 43;
      break;
    }
   case 43:
    var $zero_1_lcssa;
    var $inc199 = $m_058 + 1 | 0;
    var $exitcond = ($inc199 | 0) == 8;
    if ($exitcond) {
      label = 44;
      break;
    } else {
      var $m_058 = $inc199;
      var $zero_059 = $zero_1_lcssa;
      label = 37;
      break;
    }
   case 44:
    var $46 = HEAP32[5263692 >> 2];
    var $cmp201 = ($46 | 0) == 10;
    var $47 = HEAP16[5242964 >> 1];
    var $cmp206 = ($47 & 65535) < ($37 & 65535);
    var $or_cond14 = $cmp201 & $cmp206;
    if ($or_cond14) {
      label = 45;
      break;
    } else {
      label = 46;
      break;
    }
   case 45:
    var $arrayidx209 = $mblack | 0;
    var $48 = HEAP32[$arrayidx209 >> 2];
    var $arrayidx210 = $mblack + 4 | 0;
    var $49 = HEAP32[$arrayidx210 >> 2];
    var $add211 = $49 + $48 | 0;
    var $arrayidx212 = $mblack + 8 | 0;
    var $50 = HEAP32[$arrayidx212 >> 2];
    var $add213 = $add211 + $50 | 0;
    var $arrayidx214 = $mblack + 12 | 0;
    var $51 = HEAP32[$arrayidx214 >> 2];
    var $add215 = $add213 + $51 | 0;
    var $arrayidx216 = $mblack + 16 | 0;
    var $52 = HEAP32[$arrayidx216 >> 2];
    var $arrayidx217 = $mblack + 20 | 0;
    var $53 = HEAP32[$arrayidx217 >> 2];
    var $add218 = $53 + $52 | 0;
    var $arrayidx219 = $mblack + 24 | 0;
    var $54 = HEAP32[$arrayidx219 >> 2];
    var $add220 = $add218 + $54 | 0;
    var $arrayidx221 = $mblack + 28 | 0;
    var $55 = HEAP32[$arrayidx221 >> 2];
    var $add222 = $add220 + $55 | 0;
    var $div = Math.floor(($add215 >>> 0) / ($add222 >>> 0));
    var $sub223 = $div - 4 | 0;
    HEAP32[5561400 >> 2] = $sub223;
    _canon_600_correct();
    label = 51;
    break;
   case 46:
    var $arrayidx225 = $mblack + 16 | 0;
    var $56 = HEAP32[$arrayidx225 >> 2];
    var $cmp226 = $zero_1_lcssa >>> 0 < $56 >>> 0;
    if ($cmp226) {
      label = 47;
      break;
    } else {
      label = 51;
      break;
    }
   case 47:
    var $arrayidx229 = $mblack + 20 | 0;
    var $57 = HEAP32[$arrayidx229 >> 2];
    var $tobool230 = ($57 | 0) == 0;
    if ($tobool230) {
      label = 51;
      break;
    } else {
      label = 48;
      break;
    }
   case 48:
    var $arrayidx232 = $mblack + 24 | 0;
    var $58 = HEAP32[$arrayidx232 >> 2];
    var $tobool233 = ($58 | 0) == 0;
    if ($tobool233) {
      label = 51;
      break;
    } else {
      label = 49;
      break;
    }
   case 49:
    var $arrayidx235 = $mblack + 28 | 0;
    var $59 = HEAP32[$arrayidx235 >> 2];
    var $tobool236 = ($59 | 0) == 0;
    if ($tobool236) {
      label = 51;
      break;
    } else {
      label = 50;
      break;
    }
   case 50:
    var $arrayidx242 = $mblack | 0;
    var $60 = HEAP32[$arrayidx242 >> 2];
    var $div245 = Math.floor(($60 >>> 0) / ($56 >>> 0));
    HEAP32[5560904 >> 2] = $div245;
    var $arrayidx242_1 = $mblack + 4 | 0;
    var $61 = HEAP32[$arrayidx242_1 >> 2];
    var $div245_1 = Math.floor(($61 >>> 0) / ($57 >>> 0));
    HEAP32[5560908 >> 2] = $div245_1;
    var $arrayidx242_2 = $mblack + 8 | 0;
    var $62 = HEAP32[$arrayidx242_2 >> 2];
    var $div245_2 = Math.floor(($62 >>> 0) / ($58 >>> 0));
    HEAP32[5560912 >> 2] = $div245_2;
    var $arrayidx242_3 = $mblack + 12 | 0;
    var $63 = HEAP32[$arrayidx242_3 >> 2];
    var $div245_3 = Math.floor(($63 >>> 0) / ($59 >>> 0));
    HEAP32[5560916 >> 2] = $div245_3;
    label = 51;
    break;
   case 51:
    STACKTOP = __stackBase__;
    return;
  }
}
_crop_masked_pixels["X"] = 1;
function _bad_pixels($cfname) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 140 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $line = __stackBase__;
    var $time = __stackBase__ + 128;
    var $row = __stackBase__ + 132;
    var $col = __stackBase__ + 136;
    var $0 = HEAP32[5427632 >> 2];
    var $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 43;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $tobool1 = ($cfname | 0) == 0;
    if ($tobool1) {
      var $len_0 = 32;
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $call = _fopen($cfname, 5579728);
    var $fp_2 = $call;
    label = 14;
    break;
   case 5:
    var $len_0;
    var $call3 = _malloc($len_0);
    var $tobool4 = ($call3 | 0) == 0;
    if ($tobool4) {
      label = 43;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $sub = $len_0 - 16 | 0;
    var $call7 = _getcwd($call3, $sub);
    var $tobool8 = ($call7 | 0) == 0;
    if ($tobool8) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    _free($call3);
    var $call11 = ___errno_location();
    var $1 = HEAP32[$call11 >> 2];
    var $cmp = ($1 | 0) == 34;
    var $mul = $len_0 << 1;
    if ($cmp) {
      var $len_0 = $mul;
      label = 5;
      break;
    } else {
      label = 43;
      break;
    }
   case 8:
    var $call14 = _strlen($call3);
    var $add_ptr_sum = $call14 - 1 | 0;
    var $arrayidx = $call3 + $add_ptr_sum | 0;
    var $2 = HEAP8[$call3];
    var $cmp2060 = $2 << 24 >> 24 == 47;
    if ($cmp2060) {
      label = 9;
      break;
    } else {
      var $fp_1 = 0;
      label = 13;
      break;
    }
   case 9:
    var $3 = HEAP8[$arrayidx];
    var $cmp15 = $3 << 24 >> 24 == 47;
    var $add_ptr = $call3 + $call14 | 0;
    var $arrayidx_add_ptr = $cmp15 ? $arrayidx : $add_ptr;
    var $cp_061 = $arrayidx_add_ptr;
    label = 11;
    break;
   case 10:
    var $4 = HEAP8[$call3];
    var $cmp20 = $4 << 24 >> 24 == 47;
    if ($cmp20) {
      var $cp_061 = $incdec_ptr32;
      label = 11;
      break;
    } else {
      var $fp_1 = $call23;
      label = 13;
      break;
    }
   case 11:
    var $cp_061;
    for (var $$src = 5579564, $$dest = $cp_061, $$stop = $$src + 12; $$src < $$stop; $$src++, $$dest++) {
      HEAP8[$$dest] = HEAP8[$$src];
    }
    var $call23 = _fopen($call3, 5579728);
    var $tobool24 = ($call23 | 0) != 0;
    var $cmp27 = ($cp_061 | 0) == ($call3 | 0);
    var $or_cond = $tobool24 | $cmp27;
    if ($or_cond) {
      var $fp_1 = $call23;
      label = 13;
      break;
    } else {
      var $cp_1 = $cp_061;
      label = 12;
      break;
    }
   case 12:
    var $cp_1;
    var $incdec_ptr32 = $cp_1 - 1 | 0;
    var $5 = HEAP8[$incdec_ptr32];
    var $cmp34 = $5 << 24 >> 24 == 47;
    if ($cmp34) {
      label = 10;
      break;
    } else {
      var $cp_1 = $incdec_ptr32;
      label = 12;
      break;
    }
   case 13:
    var $fp_1;
    _free($call3);
    var $fp_2 = $fp_1;
    label = 14;
    break;
   case 14:
    var $fp_2;
    var $tobool39 = ($fp_2 | 0) == 0;
    if ($tobool39) {
      label = 43;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $arraydecay = $line | 0;
    var $call435867 = _fgets($arraydecay, 128, $fp_2);
    var $tobool445968 = ($call435867 | 0) == 0;
    if ($tobool445968) {
      label = 42;
      break;
    } else {
      var $fixed_0_ph69 = 0;
      label = 16;
      break;
    }
   case 16:
    var $fixed_0_ph69;
    label = 17;
    break;
   case 17:
    var $call47 = _strchr($arraydecay, 35);
    var $tobool48 = ($call47 | 0) == 0;
    if ($tobool48) {
      label = 19;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    HEAP8[$call47] = 0;
    label = 19;
    break;
   case 19:
    var $call52 = _sscanf($arraydecay, 5579400, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $col, HEAP32[tempInt + 4 >> 2] = $row, HEAP32[tempInt + 8 >> 2] = $time, tempInt));
    var $cmp53 = ($call52 | 0) == 3;
    if ($cmp53) {
      label = 20;
      break;
    } else {
      label = 23;
      break;
    }
   case 20:
    var $6 = HEAP32[$col >> 2];
    var $7 = HEAP16[5242964 >> 1];
    var $conv57 = $7 & 65535;
    var $cmp58 = $6 >>> 0 < $conv57 >>> 0;
    if ($cmp58) {
      label = 21;
      break;
    } else {
      label = 23;
      break;
    }
   case 21:
    var $8 = HEAP32[$row >> 2];
    var $9 = HEAP16[5398712 >> 1];
    var $conv60 = $9 & 65535;
    var $cmp61 = $8 >>> 0 < $conv60 >>> 0;
    if ($cmp61) {
      label = 22;
      break;
    } else {
      label = 23;
      break;
    }
   case 22:
    var $10 = HEAP32[$time >> 2];
    var $11 = HEAP32[5243568 >> 2];
    var $cmp65 = ($10 | 0) > ($11 | 0);
    if ($cmp65) {
      label = 23;
      break;
    } else {
      label = 24;
      break;
    }
   case 23:
    var $call43 = _fgets($arraydecay, 128, $fp_2);
    var $tobool44 = ($call43 | 0) == 0;
    if ($tobool44) {
      var $fixed_0_ph66 = $fixed_0_ph69;
      label = 40;
      break;
    } else {
      label = 17;
      break;
    }
   case 24:
    var $12 = HEAP16[5244916 >> 1];
    var $conv104 = $12 & 65535;
    var $13 = HEAP16[5264092 >> 1];
    var $conv105 = $13 & 65535;
    var $14 = HEAP32[5264108 >> 2];
    var $rad_055 = 1;
    var $tot_056 = 0;
    label = 25;
    break;
   case 25:
    var $tot_056;
    var $rad_055;
    var $sub74 = $8 - $rad_055 | 0;
    var $add47 = $8 + $rad_055 | 0;
    var $cmp7648 = ($sub74 | 0) > ($add47 | 0);
    if ($cmp7648) {
      var $tot_1_lcssa = $tot_056;
      var $n_1_lcssa = 0;
      label = 35;
      break;
    } else {
      label = 26;
      break;
    }
   case 26:
    var $sub79 = $6 - $rad_055 | 0;
    var $add8141 = $6 + $rad_055 | 0;
    var $cmp8242 = ($sub79 | 0) > ($add8141 | 0);
    var $r_049 = $sub74;
    var $tot_151 = $tot_056;
    var $n_152 = 0;
    label = 27;
    break;
   case 27:
    var $n_152;
    var $tot_151;
    var $r_049;
    if ($cmp8242) {
      var $tot_2_lcssa = $tot_151;
      var $n_2_lcssa = $n_152;
      label = 34;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    var $cmp86 = $r_049 >>> 0 < $conv60 >>> 0;
    var $cmp92 = ($r_049 | 0) == ($8 | 0);
    var $shr = $r_049 >> $conv104;
    var $mul106 = $shr * $conv105 & -1;
    var $c_043 = $sub79;
    var $tot_244 = $tot_151;
    var $n_245 = $n_152;
    label = 29;
    break;
   case 29:
    var $n_245;
    var $tot_244;
    var $c_043;
    var $cmp89 = $c_043 >>> 0 < $conv57 >>> 0;
    var $or_cond75 = $cmp86 & $cmp89;
    if ($or_cond75) {
      label = 30;
      break;
    } else {
      var $n_3 = $n_245;
      var $tot_3 = $tot_244;
      label = 33;
      break;
    }
   case 30:
    var $cmp95 = ($c_043 | 0) == ($6 | 0);
    var $or_cond40 = $cmp92 & $cmp95;
    if ($or_cond40) {
      var $n_3 = $n_245;
      var $tot_3 = $tot_244;
      label = 33;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    var $call98 = _fcol($r_049, $c_043);
    var $call99 = _fcol($8, $6);
    var $cmp100 = ($call98 | 0) == ($call99 | 0);
    if ($cmp100) {
      label = 32;
      break;
    } else {
      var $n_3 = $n_245;
      var $tot_3 = $tot_244;
      label = 33;
      break;
    }
   case 32:
    var $shr108 = $c_043 >> $conv104;
    var $add109 = $mul106 + $shr108 | 0;
    var $arrayidx111 = $14 + ($add109 << 3) + ($call98 << 1) | 0;
    var $15 = HEAP16[$arrayidx111 >> 1];
    var $conv112 = $15 & 65535;
    var $add113 = $conv112 + $tot_244 | 0;
    var $inc = $n_245 + 1 | 0;
    var $n_3 = $inc;
    var $tot_3 = $add113;
    label = 33;
    break;
   case 33:
    var $tot_3;
    var $n_3;
    var $inc116 = $c_043 + 1 | 0;
    var $cmp82 = ($inc116 | 0) > ($add8141 | 0);
    if ($cmp82) {
      var $tot_2_lcssa = $tot_3;
      var $n_2_lcssa = $n_3;
      label = 34;
      break;
    } else {
      var $c_043 = $inc116;
      var $tot_244 = $tot_3;
      var $n_245 = $n_3;
      label = 29;
      break;
    }
   case 34:
    var $n_2_lcssa;
    var $tot_2_lcssa;
    var $inc119 = $r_049 + 1 | 0;
    var $cmp76 = ($inc119 | 0) > ($add47 | 0);
    if ($cmp76) {
      var $tot_1_lcssa = $tot_2_lcssa;
      var $n_1_lcssa = $n_2_lcssa;
      label = 35;
      break;
    } else {
      var $r_049 = $inc119;
      var $tot_151 = $tot_2_lcssa;
      var $n_152 = $n_2_lcssa;
      label = 27;
      break;
    }
   case 35:
    var $n_1_lcssa;
    var $tot_1_lcssa;
    var $inc122 = $rad_055 + 1 | 0;
    var $cmp70 = ($inc122 | 0) < 3;
    var $cmp72 = ($n_1_lcssa | 0) == 0;
    var $or_cond39 = $cmp70 & $cmp72;
    if ($or_cond39) {
      var $rad_055 = $inc122;
      var $tot_056 = $tot_1_lcssa;
      label = 25;
      break;
    } else {
      label = 36;
      break;
    }
   case 36:
    var $div = ($tot_1_lcssa | 0) / ($n_1_lcssa | 0) & -1;
    var $conv124 = $div & 65535;
    var $call125 = _fcol($8, $6);
    var $shr127 = $8 >> $conv104;
    var $mul129 = $shr127 * $conv105 & -1;
    var $shr131 = $6 >> $conv104;
    var $add132 = $mul129 + $shr131 | 0;
    var $arrayidx134 = $14 + ($add132 << 3) + ($call125 << 1) | 0;
    HEAP16[$arrayidx134 >> 1] = $conv124;
    var $_b = HEAP8[5243532];
    if ($_b) {
      label = 37;
      break;
    } else {
      label = 23;
      break;
    }
   case 37:
    var $inc137 = $fixed_0_ph69 + 1 | 0;
    var $tobool138 = ($fixed_0_ph69 | 0) == 0;
    if ($tobool138) {
      label = 38;
      break;
    } else {
      label = 39;
      break;
    }
   case 38:
    var $16 = HEAP32[_stderr >> 2];
    var $17 = _fwrite(5579236, 21, 1, $16);
    label = 39;
    break;
   case 39:
    var $18 = HEAP32[_stderr >> 2];
    var $19 = HEAP32[$col >> 2];
    var $20 = HEAP32[$row >> 2];
    var $call142 = _fprintf($18, 5579120, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $19, HEAP32[tempInt + 4 >> 2] = $20, tempInt));
    var $call4358 = _fgets($arraydecay, 128, $fp_2);
    var $tobool4459 = ($call4358 | 0) == 0;
    if ($tobool4459) {
      var $fixed_0_ph66 = $inc137;
      label = 40;
      break;
    } else {
      var $fixed_0_ph69 = $inc137;
      label = 16;
      break;
    }
   case 40:
    var $fixed_0_ph66;
    var $tobool145 = ($fixed_0_ph66 | 0) == 0;
    if ($tobool145) {
      label = 42;
      break;
    } else {
      label = 41;
      break;
    }
   case 41:
    var $21 = HEAP32[_stderr >> 2];
    var $call147 = _fputc(10, $21);
    label = 42;
    break;
   case 42:
    var $call149 = _fclose($fp_2);
    label = 43;
    break;
   case 43:
    STACKTOP = __stackBase__;
    return;
  }
}
_bad_pixels["X"] = 1;
function _subtract($fname) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $dim = __stackBase__;
    var $0 = $dim;
    HEAP32[$0 >> 2] = 0;
    HEAP32[$0 + 4 >> 2] = 0;
    HEAP32[$0 + 8 >> 2] = 0;
    var $call = _fopen($fname, 5579008);
    var $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _perror($fname);
    label = 32;
    break;
   case 4:
    var $call1 = _fgetc($call);
    var $cmp = ($call1 | 0) == 80;
    if ($cmp) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    var $call2 = _fgetc($call);
    var $cmp3 = ($call2 | 0) == 53;
    if ($cmp3) {
      var $number_0_ph = 0;
      var $nd_0_ph = 0;
      var $error_0_ph49 = 0;
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $number_0_ph = 0;
    var $nd_0_ph = 0;
    var $error_0_ph49 = 1;
    label = 7;
    break;
   case 7:
    var $error_0_ph49;
    var $nd_0_ph;
    var $number_0_ph;
    var $tobool6 = ($error_0_ph49 | 0) != 0;
    var $tobool6_not = $tobool6 ^ 1;
    var $cmp7 = ($nd_0_ph | 0) < 3;
    var $or_cond = $cmp7 & $tobool6_not;
    var $arrayidx = $dim + ($nd_0_ph << 2) | 0;
    var $number_0_ph51 = $number_0_ph;
    label = 8;
    break;
   case 8:
    var $number_0_ph51;
    var $comment_0 = 0;
    label = 9;
    break;
   case 9:
    var $comment_0;
    if ($or_cond) {
      label = 10;
      break;
    } else {
      label = 17;
      break;
    }
   case 10:
    var $call8 = _fgetc($call);
    if (($call8 | 0) == 35) {
      label = 11;
      break;
    } else if (($call8 | 0) == -1) {
      label = 17;
      break;
    } else {
      var $comment_1 = $comment_0;
      label = 12;
      break;
    }
   case 11:
    var $comment_1 = 1;
    label = 12;
    break;
   case 12:
    var $comment_1;
    var $cmp13 = ($call8 | 0) == 10;
    var $_comment_1 = $cmp13 ? 0 : $comment_1;
    var $tobool16 = ($_comment_1 | 0) == 0;
    if ($tobool16) {
      label = 13;
      break;
    } else {
      var $comment_0 = $_comment_1;
      label = 9;
      break;
    }
   case 13:
    var $isdigittmp = $call8 - 48 | 0;
    var $isdigit = $isdigittmp >>> 0 < 10;
    var $number_0_ = $isdigit ? 1 : $number_0_ph51;
    var $tobool23 = ($number_0_ | 0) == 0;
    if ($tobool23) {
      var $number_0_ph51 = 0;
      label = 8;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    if ($isdigit) {
      label = 15;
      break;
    } else {
      label = 16;
      break;
    }
   case 15:
    var $1 = HEAP32[$arrayidx >> 2];
    var $mul = $1 * 10 & -1;
    var $sub = $isdigittmp + $mul | 0;
    HEAP32[$arrayidx >> 2] = $sub;
    var $number_0_ph51 = $number_0_;
    label = 8;
    break;
   case 16:
    var $call29 = _isspace($call8);
    var $tobool30 = ($call29 | 0) == 0;
    var $_error_0 = $tobool30 ? 1 : $error_0_ph49;
    var $2 = $tobool30 & 1;
    var $inc = $2 ^ 1;
    var $nd_0_inc = $inc + $nd_0_ph | 0;
    var $number_0__ = $tobool30 ? $number_0_ : 0;
    var $number_0_ph = $number_0__;
    var $nd_0_ph = $nd_0_inc;
    var $error_0_ph49 = $_error_0;
    label = 7;
    break;
   case 17:
    var $or_cond40 = $tobool6 | $cmp7;
    if ($or_cond40) {
      label = 18;
      break;
    } else {
      label = 19;
      break;
    }
   case 18:
    var $3 = HEAP32[_stderr >> 2];
    var $call40 = _fprintf($3, 5578880, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $fname, tempInt));
    var $call41 = _fclose($call);
    label = 32;
    break;
   case 19:
    var $arrayidx43 = $dim | 0;
    var $4 = HEAP32[$arrayidx43 >> 2];
    var $5 = HEAP16[5242964 >> 1];
    var $conv = $5 & 65535;
    var $cmp44 = ($4 | 0) == ($conv | 0);
    if ($cmp44) {
      label = 20;
      break;
    } else {
      label = 22;
      break;
    }
   case 20:
    var $arrayidx47 = $dim + 4 | 0;
    var $6 = HEAP32[$arrayidx47 >> 2];
    var $7 = HEAP16[5398712 >> 1];
    var $conv48 = $7 & 65535;
    var $cmp49 = ($6 | 0) == ($conv48 | 0);
    if ($cmp49) {
      label = 21;
      break;
    } else {
      label = 22;
      break;
    }
   case 21:
    var $arrayidx52 = $dim + 8 | 0;
    var $8 = HEAP32[$arrayidx52 >> 2];
    var $cmp53 = ($8 | 0) == 65535;
    if ($cmp53) {
      label = 23;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    var $9 = HEAP32[_stderr >> 2];
    var $call56 = _fprintf($9, 5578760, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $fname, tempInt));
    var $call57 = _fclose($call);
    label = 32;
    break;
   case 23:
    var $call61 = _calloc($4, 2);
    var $10 = $call61;
    _merror($call61, 5578644);
    var $11 = HEAP16[5398712 >> 1];
    var $cmp6347 = $11 << 16 >> 16 == 0;
    if ($cmp6347) {
      label = 31;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    var $_pre = HEAP16[5242964 >> 1];
    var $row_048 = 0;
    var $12 = $_pre;
    label = 25;
    break;
   case 25:
    var $12;
    var $row_048;
    var $conv65 = $12 & 65535;
    var $call66 = _fread($call61, 2, $conv65, $call);
    var $13 = HEAP16[5242964 >> 1];
    var $cmp6944 = $13 << 16 >> 16 == 0;
    if ($cmp6944) {
      var $31 = 0;
      label = 30;
      break;
    } else {
      label = 26;
      break;
    }
   case 26:
    var $shl = $row_048 << 1;
    var $and = $shl & 14;
    var $_pre1 = HEAP32[5427632 >> 2];
    var $_pre2 = HEAP16[5244916 >> 1];
    var $_pre3 = HEAP16[5264092 >> 1];
    var $_pre4 = HEAP32[5264108 >> 2];
    var $col_045 = 0;
    var $17 = $_pre1;
    var $16 = $_pre2;
    var $15 = $_pre3;
    var $14 = $_pre4;
    label = 27;
    break;
   case 27:
    var $14;
    var $15;
    var $16;
    var $17;
    var $col_045;
    var $and72 = $col_045 & 1;
    var $add73 = $and72 | $and;
    var $shl74 = $add73 << 1;
    var $shr = $17 >>> ($shl74 >>> 0);
    var $and75 = $shr & 3;
    var $conv76 = $16 & 65535;
    var $shr77 = $row_048 >> $conv76;
    var $conv78 = $15 & 65535;
    var $mul79 = $shr77 * $conv78 & -1;
    var $shr81 = $col_045 >> $conv76;
    var $add82 = $mul79 + $shr81 | 0;
    var $arrayidx84 = $14 + ($add82 << 3) + ($and75 << 1) | 0;
    var $18 = HEAP16[$arrayidx84 >> 1];
    var $conv85 = $18 & 65535;
    var $arrayidx86 = $10 + ($col_045 << 1) | 0;
    var $19 = HEAP16[$arrayidx86 >> 1];
    var $conv87 = $19 & 65535;
    var $call88 = _htons($conv87);
    var $sub89 = $conv85 - $call88 | 0;
    var $cmp90 = ($sub89 | 0) > 0;
    if ($cmp90) {
      label = 28;
      break;
    } else {
      var $cond = 0;
      label = 29;
      break;
    }
   case 28:
    var $20 = HEAP32[5427632 >> 2];
    var $shr97 = $20 >>> ($shl74 >>> 0);
    var $and98 = $shr97 & 3;
    var $21 = HEAP16[5244916 >> 1];
    var $conv99 = $21 & 65535;
    var $shr100 = $row_048 >> $conv99;
    var $22 = HEAP16[5264092 >> 1];
    var $conv101 = $22 & 65535;
    var $mul102 = $shr100 * $conv101 & -1;
    var $shr104 = $col_045 >> $conv99;
    var $add105 = $mul102 + $shr104 | 0;
    var $23 = HEAP32[5264108 >> 2];
    var $arrayidx107 = $23 + ($add105 << 3) + ($and98 << 1) | 0;
    var $24 = HEAP16[$arrayidx107 >> 1];
    var $conv108 = $24 & 65535;
    var $25 = HEAP16[$arrayidx86 >> 1];
    var $conv110 = $25 & 65535;
    var $call111 = _htons($conv110);
    var $sub112 = $conv108 - $call111 | 0;
    var $phitmp = $sub112 & 65535;
    var $cond = $phitmp;
    label = 29;
    break;
   case 29:
    var $cond;
    var $26 = HEAP32[5427632 >> 2];
    var $shr119 = $26 >>> ($shl74 >>> 0);
    var $and120 = $shr119 & 3;
    var $27 = HEAP16[5244916 >> 1];
    var $conv121 = $27 & 65535;
    var $shr122 = $row_048 >> $conv121;
    var $28 = HEAP16[5264092 >> 1];
    var $conv123 = $28 & 65535;
    var $mul124 = $shr122 * $conv123 & -1;
    var $shr126 = $col_045 >> $conv121;
    var $add127 = $mul124 + $shr126 | 0;
    var $29 = HEAP32[5264108 >> 2];
    var $arrayidx129 = $29 + ($add127 << 3) + ($and120 << 1) | 0;
    HEAP16[$arrayidx129 >> 1] = $cond;
    var $inc130 = $col_045 + 1 | 0;
    var $30 = HEAP16[5242964 >> 1];
    var $conv68 = $30 & 65535;
    var $cmp69 = ($inc130 | 0) < ($conv68 | 0);
    if ($cmp69) {
      var $col_045 = $inc130;
      var $17 = $26;
      var $16 = $27;
      var $15 = $28;
      var $14 = $29;
      label = 27;
      break;
    } else {
      var $31 = $30;
      label = 30;
      break;
    }
   case 30:
    var $31;
    var $inc132 = $row_048 + 1 | 0;
    var $32 = HEAP16[5398712 >> 1];
    var $conv62 = $32 & 65535;
    var $cmp63 = ($inc132 | 0) < ($conv62 | 0);
    if ($cmp63) {
      var $row_048 = $inc132;
      var $12 = $31;
      label = 25;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    _free($call61);
    var $call134 = _fclose($call);
    HEAP32[5560904 >> 2] = 0;
    HEAP32[5560908 >> 2] = 0;
    HEAP32[5560912 >> 2] = 0;
    HEAP32[5560916 >> 2] = 0;
    HEAP32[5561400 >> 2] = 0;
    label = 32;
    break;
   case 32:
    STACKTOP = __stackBase__;
    return;
  }
}
_subtract["X"] = 1;
function _gamma_curve($pwr, $ts, $mode, $imax) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $bnd = __stackBase__;
    var $0 = $bnd;
    HEAP32[$0 >> 2] = 0;
    HEAP32[$0 + 4 >> 2] = 0;
    HEAP32[$0 + 8 >> 2] = 0;
    HEAP32[$0 + 12 >> 2] = 0;
    var $cmp = $ts >= 1;
    var $conv = $cmp & 1;
    var $arrayidx6 = $bnd + ($conv << 3) | 0;
    HEAPF64[tempDoublePtr >> 3] = 1, HEAP32[$arrayidx6 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx6 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $tobool = $ts != 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      var $g_sroa_2_1 = 0;
      var $g_sroa_3_0 = 0;
      var $g_sroa_4_0 = 0;
      label = 11;
      break;
    }
   case 3:
    var $sub = $ts - 1;
    var $sub10 = $pwr - 1;
    var $mul = $sub10 * $sub;
    var $cmp11 = $mul > 0;
    if ($cmp11) {
      var $g_sroa_2_1 = 0;
      var $g_sroa_3_0 = 0;
      var $g_sroa_4_0 = 0;
      label = 11;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $arrayidx15 = $bnd | 0;
    var $arrayidx16 = $bnd + 8 | 0;
    var $tobool19 = $pwr != 0;
    var $sub26 = -$pwr;
    var $i_055 = 0;
    label = 5;
    break;
   case 5:
    var $i_055;
    var $1 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx15 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx15 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $2 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx16 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx16 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add = $1 + $2;
    var $div = $add * .5;
    if ($tobool19) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    var $div24 = $div / $ts;
    var $3 = Math.pow($div24, $sub26);
    var $sub27 = $3 - 1;
    var $div29 = $sub27 / $pwr;
    var $div31 = 1 / $div;
    var $sub32 = $div29 - $div31;
    var $cmp33 = $sub32 > -1;
    var $conv34 = $cmp33 & 1;
    var $arrayidx35 = $bnd + ($conv34 << 3) | 0;
    HEAPF64[tempDoublePtr >> 3] = $div, HEAP32[$arrayidx35 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx35 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 8;
    break;
   case 7:
    var $div39 = 1 / $div;
    var $sub40 = 1 - $div39;
    var $call = Math.exp($sub40);
    var $div41 = $div / $call;
    var $cmp43 = $div41 < $ts;
    var $conv44 = $cmp43 & 1;
    var $arrayidx45 = $bnd + ($conv44 << 3) | 0;
    HEAPF64[tempDoublePtr >> 3] = $div, HEAP32[$arrayidx45 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx45 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 8;
    break;
   case 8:
    var $inc = $i_055 + 1 | 0;
    var $exitcond56 = ($inc | 0) == 48;
    if ($exitcond56) {
      label = 9;
      break;
    } else {
      var $i_055 = $inc;
      label = 5;
      break;
    }
   case 9:
    var $div48 = $div / $ts;
    if ($tobool19) {
      label = 10;
      break;
    } else {
      var $g_sroa_2_1 = $div;
      var $g_sroa_3_0 = $div48;
      var $g_sroa_4_0 = 0;
      label = 11;
      break;
    }
   case 10:
    var $div55 = 1 / $pwr;
    var $sub56 = $div55 - 1;
    var $mul57 = $div * $sub56;
    var $g_sroa_2_1 = $div;
    var $g_sroa_3_0 = $div48;
    var $g_sroa_4_0 = $mul57;
    label = 11;
    break;
   case 11:
    var $g_sroa_4_0;
    var $g_sroa_3_0;
    var $g_sroa_2_1;
    var $tobool62 = $pwr != 0;
    var $mul67 = $g_sroa_3_0 * $g_sroa_3_0;
    var $mul68 = $mul67 * $ts;
    var $div69 = $mul68 * .5;
    if ($tobool62) {
      label = 12;
      break;
    } else {
      label = 13;
      break;
    }
   case 12:
    var $sub72 = 1 - $g_sroa_3_0;
    var $mul73 = $g_sroa_4_0 * $sub72;
    var $sub74 = $div69 - $mul73;
    var $add77 = $pwr + 1;
    var $4 = Math.pow($g_sroa_3_0, $add77);
    var $sub78 = 1 - $4;
    var $add80 = $g_sroa_4_0 + 1;
    var $mul81 = $add80 * $sub78;
    var $div84 = $mul81 / $add77;
    var $add85 = $sub74 + $div84;
    var $add85_pn = $add85;
    label = 14;
    break;
   case 13:
    var $add96 = $div69 + 1;
    var $sub98 = $add96 - $g_sroa_2_1;
    var $sub100 = $sub98 - $g_sroa_3_0;
    var $mul103 = $g_sroa_3_0 * $g_sroa_2_1;
    var $call105 = Math.log($g_sroa_3_0);
    var $sub106 = $call105 - 1;
    var $mul107 = $mul103 * $sub106;
    var $sub108 = $sub100 - $mul107;
    var $add85_pn = $sub108;
    label = 14;
    break;
   case 14:
    var $add85_pn;
    var $tobool113 = ($mode | 0) == 0;
    if ($tobool113) {
      label = 16;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $conv122 = $imax | 0;
    var $tobool127 = ($mode | 0) == 1;
    var $add164 = $g_sroa_4_0 + 1;
    var $div167 = 1 / $pwr;
    var $i_154 = 0;
    label = 17;
    break;
   case 16:
    var $g_sroa_5_0_in = 1 / $add85_pn;
    var $g_sroa_5_0 = $g_sroa_5_0_in - 1;
    HEAPF64[tempDoublePtr >> 3] = $pwr, HEAP32[5398892 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5398896 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    HEAPF64[tempDoublePtr >> 3] = $ts, HEAP32[5398884 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5398888 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    HEAPF64[tempDoublePtr >> 3] = $g_sroa_5_0, HEAP32[5398876 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5398880 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 31;
    break;
   case 17:
    var $i_154;
    var $arrayidx120 = 5428500 + ($i_154 << 1) | 0;
    HEAP16[$arrayidx120 >> 1] = -1;
    var $conv121 = $i_154 | 0;
    var $div123 = $conv121 / $conv122;
    var $cmp124 = $div123 < 1;
    if ($cmp124) {
      label = 18;
      break;
    } else {
      label = 30;
      break;
    }
   case 18:
    if ($tobool127) {
      label = 24;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $cmp129 = $div123 < $g_sroa_3_0;
    if ($cmp129) {
      label = 20;
      break;
    } else {
      label = 21;
      break;
    }
   case 20:
    var $mul133 = $div123 * $ts;
    var $cond178 = $mul133;
    label = 29;
    break;
   case 21:
    if ($tobool62) {
      label = 22;
      break;
    } else {
      label = 23;
      break;
    }
   case 22:
    var $5 = Math.pow($div123, $pwr);
    var $mul140 = $add164 * $5;
    var $sub142 = $mul140 - $g_sroa_4_0;
    var $cond178 = $sub142;
    label = 29;
    break;
   case 23:
    var $call144 = Math.log($div123);
    var $mul146 = $g_sroa_2_1 * $call144;
    var $add147 = $mul146 + 1;
    var $cond178 = $add147;
    label = 29;
    break;
   case 24:
    var $cmp152 = $div123 < $g_sroa_2_1;
    if ($cmp152) {
      label = 25;
      break;
    } else {
      label = 26;
      break;
    }
   case 25:
    var $div156 = $div123 / $ts;
    var $cond178 = $div156;
    label = 29;
    break;
   case 26:
    if ($tobool62) {
      label = 27;
      break;
    } else {
      label = 28;
      break;
    }
   case 27:
    var $add162 = $g_sroa_4_0 + $div123;
    var $div165 = $add162 / $add164;
    var $6 = Math.pow($div165, $div167);
    var $cond178 = $6;
    label = 29;
    break;
   case 28:
    var $sub169 = $div123 - 1;
    var $div171 = $sub169 / $g_sroa_2_1;
    var $call172 = Math.exp($div171);
    var $cond178 = $call172;
    label = 29;
    break;
   case 29:
    var $cond178;
    var $mul179 = $cond178 * 65536;
    var $conv180 = $mul179 >= 0 ? Math.floor($mul179) : Math.ceil($mul179);
    HEAP16[$arrayidx120 >> 1] = $conv180;
    label = 30;
    break;
   case 30:
    var $inc184 = $i_154 + 1 | 0;
    var $exitcond = ($inc184 | 0) == 65536;
    if ($exitcond) {
      label = 31;
      break;
    } else {
      var $i_154 = $inc184;
      label = 17;
      break;
    }
   case 31:
    STACKTOP = __stackBase__;
    return;
  }
}
_gamma_curve["X"] = 1;
function _pseudoinverse($in, $out, $size) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 144 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $work = __stackBase__;
    var $cmp1265 = ($size | 0) > 0;
    var $i_068 = 0;
    label = 3;
    break;
   case 3:
    var $i_068;
    var $add = $i_068 + 3 | 0;
    var $arrayidx6 = $work + $i_068 * 48 | 0;
    var $arrayidx6_1 = $work + $i_068 * 48 + 8 | 0;
    var $arrayidx6_2 = $work + $i_068 * 48 + 16 | 0;
    var $cmp4_3 = ($i_068 | 0) == 0;
    var $conv_3 = $cmp4_3 & 1;
    var $conv5_3 = $conv_3 | 0;
    var $arrayidx6_3 = $work + $i_068 * 48 + 24 | 0;
    var $0 = $arrayidx6;
    HEAP32[$0 >> 2] = 0;
    HEAP32[$0 + 4 >> 2] = 0;
    HEAP32[$0 + 8 >> 2] = 0;
    HEAP32[$0 + 12 >> 2] = 0;
    HEAP32[$0 + 16 >> 2] = 0;
    HEAP32[$0 + 20 >> 2] = 0;
    HEAPF64[tempDoublePtr >> 3] = $conv5_3, HEAP32[$arrayidx6_3 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx6_3 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $cmp4_4 = ($add | 0) == 4;
    var $conv_4 = $cmp4_4 & 1;
    var $conv5_4 = $conv_4 | 0;
    var $arrayidx6_4 = $work + $i_068 * 48 + 32 | 0;
    HEAPF64[tempDoublePtr >> 3] = $conv5_4, HEAP32[$arrayidx6_4 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx6_4 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $cmp4_5 = ($add | 0) == 5;
    var $conv_5 = $cmp4_5 & 1;
    var $conv5_5 = $conv_5 | 0;
    var $arrayidx6_5 = $work + $i_068 * 48 + 40 | 0;
    HEAPF64[tempDoublePtr >> 3] = $conv5_5, HEAP32[$arrayidx6_5 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx6_5 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    if ($cmp1265) {
      var $k_066 = 0;
      var $1 = 0;
      label = 4;
      break;
    } else {
      label = 19;
      break;
    }
   case 4:
    var $1;
    var $k_066;
    var $arrayidx16 = $in + $k_066 * 24 + ($i_068 << 3) | 0;
    var $2 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx16 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx16 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx18 = $in + $k_066 * 24 | 0;
    var $3 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx18 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx18 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul = $2 * $3;
    var $add21 = $1 + $mul;
    var $inc23 = $k_066 + 1 | 0;
    var $exitcond83 = ($inc23 | 0) == ($size | 0);
    if ($exitcond83) {
      label = 14;
      break;
    } else {
      var $k_066 = $inc23;
      var $1 = $add21;
      label = 4;
      break;
    }
   case 5:
    if ($cmp1265) {
      label = 6;
      break;
    } else {
      label = 12;
      break;
    }
   case 6:
    var $arrayidx88_274 = $work + 120 | 0;
    var $arrayidx88 = $work + 24 | 0;
    var $4 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx88 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx88 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx88_1 = $work + 32 | 0;
    var $5 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx88_1 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx88_1 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx88_2 = $work + 40 | 0;
    var $6 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx88_2 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx88_2 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx88_170 = $work + 72 | 0;
    var $7 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx88_170 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx88_170 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx88_1_1 = $work + 80 | 0;
    var $8 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx88_1_1 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx88_1_1 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx88_2_1 = $work + 88 | 0;
    var $9 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx88_2_1 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx88_2_1 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $10 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx88_274 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx88_274 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx88_1_2 = $work + 128 | 0;
    var $11 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx88_1_2 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx88_1_2 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx88_2_2 = $work + 136 | 0;
    var $12 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx88_2_2 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx88_2_2 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $i_258 = 0;
    label = 13;
    break;
   case 7:
    var $i_163;
    var $arrayidx36 = $work + $i_163 * 48 + ($i_163 << 3) | 0;
    var $13 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx36 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx36 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx42 = $work + $i_163 * 48 | 0;
    var $14 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx42 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx42 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $div = $14 / $13;
    HEAPF64[tempDoublePtr >> 3] = $div, HEAP32[$arrayidx42 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx42 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $arrayidx42_1 = $work + $i_163 * 48 + 8 | 0;
    var $15 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx42_1 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx42_1 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $div_1 = $15 / $13;
    HEAPF64[tempDoublePtr >> 3] = $div_1, HEAP32[$arrayidx42_1 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx42_1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $arrayidx42_2 = $work + $i_163 * 48 + 16 | 0;
    var $16 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx42_2 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx42_2 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $div_2 = $16 / $13;
    HEAPF64[tempDoublePtr >> 3] = $div_2, HEAP32[$arrayidx42_2 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx42_2 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $arrayidx42_3 = $work + $i_163 * 48 + 24 | 0;
    var $17 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx42_3 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx42_3 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $div_3 = $17 / $13;
    HEAPF64[tempDoublePtr >> 3] = $div_3, HEAP32[$arrayidx42_3 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx42_3 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $arrayidx42_4 = $work + $i_163 * 48 + 32 | 0;
    var $18 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx42_4 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx42_4 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $div_4 = $18 / $13;
    HEAPF64[tempDoublePtr >> 3] = $div_4, HEAP32[$arrayidx42_4 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx42_4 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $arrayidx42_5 = $work + $i_163 * 48 + 40 | 0;
    var $19 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx42_5 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx42_5 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $div_5 = $19 / $13;
    HEAPF64[tempDoublePtr >> 3] = $div_5, HEAP32[$arrayidx42_5 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx42_5 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $k_161 = 0;
    label = 8;
    break;
   case 8:
    var $k_161;
    var $cmp50 = ($k_161 | 0) == ($i_163 | 0);
    if ($cmp50) {
      label = 10;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $arrayidx53 = $work + $k_161 * 48 + ($i_163 << 3) | 0;
    var $20 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx53 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx53 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $21 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx42 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx42 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul60 = $20 * $21;
    var $arrayidx62 = $work + $k_161 * 48 | 0;
    var $22 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx62 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx62 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub = $22 - $mul60;
    HEAPF64[tempDoublePtr >> 3] = $sub, HEAP32[$arrayidx62 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx62 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $23 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx42_1 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx42_1 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul60_1 = $20 * $23;
    var $arrayidx62_1 = $work + $k_161 * 48 + 8 | 0;
    var $24 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx62_1 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx62_1 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub_1 = $24 - $mul60_1;
    HEAPF64[tempDoublePtr >> 3] = $sub_1, HEAP32[$arrayidx62_1 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx62_1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $25 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx42_2 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx42_2 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul60_2 = $20 * $25;
    var $arrayidx62_2 = $work + $k_161 * 48 + 16 | 0;
    var $26 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx62_2 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx62_2 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub_2 = $26 - $mul60_2;
    HEAPF64[tempDoublePtr >> 3] = $sub_2, HEAP32[$arrayidx62_2 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx62_2 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $27 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx42_3 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx42_3 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul60_3 = $20 * $27;
    var $arrayidx62_3 = $work + $k_161 * 48 + 24 | 0;
    var $28 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx62_3 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx62_3 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub_3 = $28 - $mul60_3;
    HEAPF64[tempDoublePtr >> 3] = $sub_3, HEAP32[$arrayidx62_3 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx62_3 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $29 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx42_4 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx42_4 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul60_4 = $20 * $29;
    var $arrayidx62_4 = $work + $k_161 * 48 + 32 | 0;
    var $30 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx62_4 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx62_4 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub_4 = $30 - $mul60_4;
    HEAPF64[tempDoublePtr >> 3] = $sub_4, HEAP32[$arrayidx62_4 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx62_4 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $31 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx42_5 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx42_5 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul60_5 = $20 * $31;
    var $arrayidx62_5 = $work + $k_161 * 48 + 40 | 0;
    var $32 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx62_5 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx62_5 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $sub_5 = $32 - $mul60_5;
    HEAPF64[tempDoublePtr >> 3] = $sub_5, HEAP32[$arrayidx62_5 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx62_5 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 10;
    break;
   case 10:
    var $inc67 = $k_161 + 1 | 0;
    var $exitcond80 = ($inc67 | 0) == 3;
    if ($exitcond80) {
      label = 11;
      break;
    } else {
      var $k_161 = $inc67;
      label = 8;
      break;
    }
   case 11:
    var $inc70 = $i_163 + 1 | 0;
    var $exitcond81 = ($inc70 | 0) == 3;
    if ($exitcond81) {
      label = 5;
      break;
    } else {
      var $i_163 = $inc70;
      label = 7;
      break;
    }
   case 12:
    STACKTOP = __stackBase__;
    return;
   case 13:
    var $i_258;
    var $arrayidx81 = $out + $i_258 * 24 | 0;
    HEAPF64[tempDoublePtr >> 3] = 0, HEAP32[$arrayidx81 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx81 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $arrayidx90 = $in + $i_258 * 24 | 0;
    var $33 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx90 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx90 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul91 = $4 * $33;
    var $add94 = $mul91;
    HEAPF64[tempDoublePtr >> 3] = $add94, HEAP32[$arrayidx81 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx81 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $arrayidx90_1 = $in + $i_258 * 24 + 8 | 0;
    var $34 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx90_1 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx90_1 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul91_1 = $5 * $34;
    var $add94_1 = $add94 + $mul91_1;
    HEAPF64[tempDoublePtr >> 3] = $add94_1, HEAP32[$arrayidx81 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx81 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $arrayidx90_2 = $in + $i_258 * 24 + 16 | 0;
    var $35 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx90_2 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx90_2 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul91_2 = $6 * $35;
    var $add94_2 = $add94_1 + $mul91_2;
    HEAPF64[tempDoublePtr >> 3] = $add94_2, HEAP32[$arrayidx81 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx81 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $arrayidx81_1 = $out + $i_258 * 24 + 8 | 0;
    HEAPF64[tempDoublePtr >> 3] = 0, HEAP32[$arrayidx81_1 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx81_1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $36 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx90 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx90 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul91_172 = $7 * $36;
    var $add94_173 = $mul91_172;
    HEAPF64[tempDoublePtr >> 3] = $add94_173, HEAP32[$arrayidx81_1 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx81_1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $37 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx90_1 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx90_1 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul91_1_1 = $8 * $37;
    var $add94_1_1 = $add94_173 + $mul91_1_1;
    HEAPF64[tempDoublePtr >> 3] = $add94_1_1, HEAP32[$arrayidx81_1 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx81_1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $38 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx90_2 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx90_2 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul91_2_1 = $9 * $38;
    var $add94_2_1 = $add94_1_1 + $mul91_2_1;
    HEAPF64[tempDoublePtr >> 3] = $add94_2_1, HEAP32[$arrayidx81_1 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx81_1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $arrayidx81_2 = $out + $i_258 * 24 + 16 | 0;
    HEAPF64[tempDoublePtr >> 3] = 0, HEAP32[$arrayidx81_2 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx81_2 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $39 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx90 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx90 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul91_276 = $10 * $39;
    var $add94_277 = $mul91_276;
    HEAPF64[tempDoublePtr >> 3] = $add94_277, HEAP32[$arrayidx81_2 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx81_2 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $40 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx90_1 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx90_1 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul91_1_2 = $11 * $40;
    var $add94_1_2 = $add94_277 + $mul91_1_2;
    HEAPF64[tempDoublePtr >> 3] = $add94_1_2, HEAP32[$arrayidx81_2 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx81_2 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $41 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx90_2 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx90_2 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul91_2_2 = $12 * $41;
    var $add94_2_2 = $add94_1_2 + $mul91_2_2;
    HEAPF64[tempDoublePtr >> 3] = $add94_2_2, HEAP32[$arrayidx81_2 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx81_2 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $inc102 = $i_258 + 1 | 0;
    var $exitcond = ($inc102 | 0) == ($size | 0);
    if ($exitcond) {
      label = 12;
      break;
    } else {
      var $i_258 = $inc102;
      label = 13;
      break;
    }
   case 14:
    HEAPF64[tempDoublePtr >> 3] = $add21, HEAP32[$arrayidx6 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx6 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $k_066_1 = 0;
    var $42 = 0;
    label = 15;
    break;
   case 15:
    var $42;
    var $k_066_1;
    var $arrayidx16_1 = $in + $k_066_1 * 24 + ($i_068 << 3) | 0;
    var $43 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx16_1 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx16_1 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx18_1 = $in + $k_066_1 * 24 + 8 | 0;
    var $44 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx18_1 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx18_1 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul_1 = $43 * $44;
    var $add21_1 = $42 + $mul_1;
    var $inc23_1 = $k_066_1 + 1 | 0;
    var $exitcond83_1 = ($inc23_1 | 0) == ($size | 0);
    if ($exitcond83_1) {
      label = 16;
      break;
    } else {
      var $k_066_1 = $inc23_1;
      var $42 = $add21_1;
      label = 15;
      break;
    }
   case 16:
    HEAPF64[tempDoublePtr >> 3] = $add21_1, HEAP32[$arrayidx6_1 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx6_1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $k_066_2 = 0;
    var $45 = 0;
    label = 17;
    break;
   case 17:
    var $45;
    var $k_066_2;
    var $arrayidx16_2 = $in + $k_066_2 * 24 + ($i_068 << 3) | 0;
    var $46 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx16_2 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx16_2 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx18_2 = $in + $k_066_2 * 24 + 16 | 0;
    var $47 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx18_2 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx18_2 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul_2 = $46 * $47;
    var $add21_2 = $45 + $mul_2;
    var $inc23_2 = $k_066_2 + 1 | 0;
    var $exitcond83_2 = ($inc23_2 | 0) == ($size | 0);
    if ($exitcond83_2) {
      label = 18;
      break;
    } else {
      var $k_066_2 = $inc23_2;
      var $45 = $add21_2;
      label = 17;
      break;
    }
   case 18:
    HEAPF64[tempDoublePtr >> 3] = $add21_2, HEAP32[$arrayidx6_2 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx6_2 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 19;
    break;
   case 19:
    var $inc29 = $i_068 + 1 | 0;
    var $exitcond85 = ($inc29 | 0) == 3;
    if ($exitcond85) {
      var $i_163 = 0;
      label = 7;
      break;
    } else {
      var $i_068 = $inc29;
      label = 3;
      break;
    }
  }
}
_pseudoinverse["X"] = 1;
function _cam_xyz_coeff($cam_xyz) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 192 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $cam_rgb = __stackBase__;
    var $inverse = __stackBase__ + 96;
    var $0 = HEAP32[5560840 >> 2];
    var $cmp43 = ($0 | 0) > 0;
    if ($cmp43) {
      var $i_044 = 0;
      label = 10;
      break;
    } else {
      label = 8;
      break;
    }
   case 3:
    var $i_139;
    var $arrayidx27 = $cam_rgb + $i_139 * 24 | 0;
    var $1 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx27 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx27 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add28 = $1;
    var $arrayidx27_1 = $cam_rgb + $i_139 * 24 + 8 | 0;
    var $2 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx27_1 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx27_1 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add28_1 = $add28 + $2;
    var $arrayidx27_2 = $cam_rgb + $i_139 * 24 + 16 | 0;
    var $3 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx27_2 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx27_2 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add28_2 = $add28_1 + $3;
    var $div = $1 / $add28_2;
    HEAPF64[tempDoublePtr >> 3] = $div, HEAP32[$arrayidx27 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx27 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $div_1 = $2 / $add28_2;
    HEAPF64[tempDoublePtr >> 3] = $div_1, HEAP32[$arrayidx27_1 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx27_1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $div_2 = $3 / $add28_2;
    HEAPF64[tempDoublePtr >> 3] = $div_2, HEAP32[$arrayidx27_2 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx27_2 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $div40 = 1 / $add28_2;
    var $conv = $div40;
    var $arrayidx41 = 5245640 + ($i_139 << 2) | 0;
    HEAPF32[$arrayidx41 >> 2] = $conv;
    var $inc43 = $i_139 + 1 | 0;
    var $cmp21 = ($inc43 | 0) < ($0 | 0);
    if ($cmp21) {
      var $i_139 = $inc43;
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $arraydecay = $cam_rgb | 0;
    var $arraydecay45 = $inverse | 0;
    _pseudoinverse($arraydecay, $arraydecay45, $0);
    HEAP32[5245040 >> 2] = 0;
    if ($cmp43) {
      var $j_332 = 0;
      label = 5;
      break;
    } else {
      label = 9;
      break;
    }
   case 5:
    var $j_332;
    var $arrayidx55 = $inverse + $j_332 * 24 | 0;
    var $4 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx55 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx55 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $conv56 = $4;
    var $arrayidx58 = 5244964 + ($j_332 << 2) | 0;
    HEAPF32[$arrayidx58 >> 2] = $conv56;
    var $inc60 = $j_332 + 1 | 0;
    var $exitcond = ($inc60 | 0) == ($0 | 0);
    if ($exitcond) {
      var $j_332_1 = 0;
      label = 6;
      break;
    } else {
      var $j_332 = $inc60;
      label = 5;
      break;
    }
   case 6:
    var $j_332_1;
    var $arrayidx55_1 = $inverse + $j_332_1 * 24 + 8 | 0;
    var $5 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx55_1 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx55_1 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $conv56_1 = $5;
    var $arrayidx58_1 = 5244980 + ($j_332_1 << 2) | 0;
    HEAPF32[$arrayidx58_1 >> 2] = $conv56_1;
    var $inc60_1 = $j_332_1 + 1 | 0;
    var $exitcond_1 = ($inc60_1 | 0) == ($0 | 0);
    if ($exitcond_1) {
      var $j_332_2 = 0;
      label = 7;
      break;
    } else {
      var $j_332_1 = $inc60_1;
      label = 6;
      break;
    }
   case 7:
    var $j_332_2;
    var $arrayidx55_2 = $inverse + $j_332_2 * 24 + 16 | 0;
    var $6 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx55_2 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx55_2 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $conv56_2 = $6;
    var $arrayidx58_2 = 5244996 + ($j_332_2 << 2) | 0;
    HEAPF32[$arrayidx58_2 >> 2] = $conv56_2;
    var $inc60_2 = $j_332_2 + 1 | 0;
    var $exitcond_2 = ($inc60_2 | 0) == ($0 | 0);
    if ($exitcond_2) {
      label = 9;
      break;
    } else {
      var $j_332_2 = $inc60_2;
      label = 7;
      break;
    }
   case 8:
    var $arraydecay_c = $cam_rgb | 0;
    var $arraydecay45_c = $inverse | 0;
    _pseudoinverse($arraydecay_c, $arraydecay45_c, $0);
    HEAP32[5245040 >> 2] = 0;
    label = 9;
    break;
   case 9:
    STACKTOP = __stackBase__;
    return;
   case 10:
    var $i_044;
    var $arrayidx9 = $cam_xyz + $i_044 * 24 | 0;
    var $arrayidx4 = $cam_rgb + $i_044 * 24 | 0;
    var $7 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx9 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx9 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul = $7 * .412453;
    var $add = $mul;
    var $arrayidx9_1 = $cam_xyz + $i_044 * 24 + 8 | 0;
    var $8 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx9_1 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx9_1 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul_1 = $8 * .212671;
    var $add_1 = $add + $mul_1;
    var $arrayidx9_2 = $cam_xyz + $i_044 * 24 + 16 | 0;
    var $9 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx9_2 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx9_2 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul_2 = $9 * .019334;
    var $add_2 = $add_1 + $mul_2;
    HEAPF64[tempDoublePtr >> 3] = $add_2, HEAP32[$arrayidx4 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx4 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $arrayidx4_1 = $cam_rgb + $i_044 * 24 + 8 | 0;
    var $mul_152 = $7 * .35758;
    var $add_153 = $mul_152;
    var $mul_1_1 = $8 * .71516;
    var $add_1_1 = $add_153 + $mul_1_1;
    var $mul_2_1 = $9 * .119193;
    var $add_2_1 = $add_1_1 + $mul_2_1;
    HEAPF64[tempDoublePtr >> 3] = $add_2_1, HEAP32[$arrayidx4_1 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx4_1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $arrayidx4_2 = $cam_rgb + $i_044 * 24 + 16 | 0;
    var $mul_255 = $7 * .180423;
    var $add_256 = $mul_255;
    var $mul_1_2 = $8 * .072169;
    var $add_1_2 = $add_256 + $mul_1_2;
    var $mul_2_2 = $9 * .950227;
    var $add_2_2 = $add_1_2 + $mul_2_2;
    HEAPF64[tempDoublePtr >> 3] = $add_2_2, HEAP32[$arrayidx4_2 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx4_2 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $inc18 = $i_044 + 1 | 0;
    var $cmp = ($inc18 | 0) < ($0 | 0);
    if ($cmp) {
      var $i_044 = $inc18;
      label = 10;
      break;
    } else {
      var $i_139 = 0;
      label = 3;
      break;
    }
  }
}
_cam_xyz_coeff["X"] = 1;
function _hat_transform($temp, $base, $st, $size, $sc) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $cmp51 = ($sc | 0) > 0;
    if ($cmp51) {
      var $i_052 = 0;
      label = 5;
      break;
    } else {
      var $i_0_lcssa = 0;
      label = 3;
      break;
    }
   case 3:
    var $i_0_lcssa;
    var $add1047 = $i_0_lcssa + $sc | 0;
    var $cmp1148 = ($add1047 | 0) < ($size | 0);
    if ($cmp1148) {
      label = 4;
      break;
    } else {
      var $i_1_lcssa = $i_0_lcssa;
      label = 6;
      break;
    }
   case 4:
    var $0 = $size - $sc | 0;
    var $i_149 = $i_0_lcssa;
    var $add1050 = $add1047;
    label = 8;
    break;
   case 5:
    var $i_052;
    var $mul = $i_052 * $st & -1;
    var $arrayidx = $base + ($mul << 2) | 0;
    var $1 = HEAPF32[$arrayidx >> 2];
    var $mul1 = $1 * 2;
    var $sub = $sc - $i_052 | 0;
    var $mul2 = $sub * $st & -1;
    var $arrayidx3 = $base + ($mul2 << 2) | 0;
    var $2 = HEAPF32[$arrayidx3 >> 2];
    var $add = $mul1 + $2;
    var $add4 = $i_052 + $sc | 0;
    var $mul5 = $add4 * $st & -1;
    var $arrayidx6 = $base + ($mul5 << 2) | 0;
    var $3 = HEAPF32[$arrayidx6 >> 2];
    var $add7 = $add + $3;
    var $arrayidx8 = $temp + ($i_052 << 2) | 0;
    HEAPF32[$arrayidx8 >> 2] = $add7;
    var $inc = $i_052 + 1 | 0;
    var $exitcond55 = ($inc | 0) == ($sc | 0);
    if ($exitcond55) {
      var $i_0_lcssa = $sc;
      label = 3;
      break;
    } else {
      var $i_052 = $inc;
      label = 5;
      break;
    }
   case 6:
    var $i_1_lcssa;
    var $cmp2945 = ($i_1_lcssa | 0) < ($size | 0);
    if ($cmp2945) {
      label = 7;
      break;
    } else {
      label = 10;
      break;
    }
   case 7:
    var $mul38 = $size << 1;
    var $add40_neg = $mul38 - 2 | 0;
    var $sub39 = $add40_neg - $sc | 0;
    var $i_246 = $i_1_lcssa;
    label = 9;
    break;
   case 8:
    var $add1050;
    var $i_149;
    var $mul13 = $i_149 * $st & -1;
    var $arrayidx14 = $base + ($mul13 << 2) | 0;
    var $4 = HEAPF32[$arrayidx14 >> 2];
    var $mul15 = $4 * 2;
    var $sub16 = $i_149 - $sc | 0;
    var $mul17 = $sub16 * $st & -1;
    var $arrayidx18 = $base + ($mul17 << 2) | 0;
    var $5 = HEAPF32[$arrayidx18 >> 2];
    var $add19 = $mul15 + $5;
    var $mul21 = $add1050 * $st & -1;
    var $arrayidx22 = $base + ($mul21 << 2) | 0;
    var $6 = HEAPF32[$arrayidx22 >> 2];
    var $add23 = $add19 + $6;
    var $arrayidx24 = $temp + ($i_149 << 2) | 0;
    HEAPF32[$arrayidx24 >> 2] = $add23;
    var $inc26 = $i_149 + 1 | 0;
    var $add10 = $inc26 + $sc | 0;
    var $exitcond54 = ($inc26 | 0) == ($0 | 0);
    if ($exitcond54) {
      var $i_1_lcssa = $0;
      label = 6;
      break;
    } else {
      var $i_149 = $inc26;
      var $add1050 = $add10;
      label = 8;
      break;
    }
   case 9:
    var $i_246;
    var $mul31 = $i_246 * $st & -1;
    var $arrayidx32 = $base + ($mul31 << 2) | 0;
    var $7 = HEAPF32[$arrayidx32 >> 2];
    var $mul33 = $7 * 2;
    var $sub34 = $i_246 - $sc | 0;
    var $mul35 = $sub34 * $st & -1;
    var $arrayidx36 = $base + ($mul35 << 2) | 0;
    var $8 = HEAPF32[$arrayidx36 >> 2];
    var $add37 = $mul33 + $8;
    var $sub41 = $sub39 - $i_246 | 0;
    var $mul42 = $sub41 * $st & -1;
    var $arrayidx43 = $base + ($mul42 << 2) | 0;
    var $9 = HEAPF32[$arrayidx43 >> 2];
    var $add44 = $add37 + $9;
    var $arrayidx45 = $temp + ($i_246 << 2) | 0;
    HEAPF32[$arrayidx45 >> 2] = $add44;
    var $inc47 = $i_246 + 1 | 0;
    var $exitcond = ($inc47 | 0) == ($size | 0);
    if ($exitcond) {
      label = 10;
      break;
    } else {
      var $i_246 = $inc47;
      label = 9;
      break;
    }
   case 10:
    return;
  }
}
_hat_transform["X"] = 1;
function _wavelet_denoise() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $mul = __stackBase__;
    var $blk = __stackBase__ + 8;
    var $_b = HEAP8[5243532];
    if ($_b) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    var $0 = HEAP32[_stderr >> 2];
    var $1 = _fwrite(5578464, 21, 1, $0);
    label = 4;
    break;
   case 4:
    var $2 = HEAP32[5263496 >> 2];
    var $scale_0 = 1;
    label = 5;
    break;
   case 5:
    var $scale_0;
    var $shl = $2 << $scale_0;
    var $cmp = $shl >>> 0 < 65536;
    var $inc = $scale_0 + 1 | 0;
    if ($cmp) {
      var $scale_0 = $inc;
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $dec = $scale_0 - 1 | 0;
    var $shl1 = $2 << $dec;
    HEAP32[5263496 >> 2] = $shl1;
    var $3 = HEAP32[5561400 >> 2];
    var $shl2 = $3 << $dec;
    HEAP32[5561400 >> 2] = $shl2;
    var $4 = HEAP32[5560904 >> 2];
    var $shl4 = $4 << $dec;
    HEAP32[5560904 >> 2] = $shl4;
    var $5 = HEAP32[5560908 >> 2];
    var $shl4_1 = $5 << $dec;
    HEAP32[5560908 >> 2] = $shl4_1;
    var $6 = HEAP32[5560912 >> 2];
    var $shl4_2 = $6 << $dec;
    HEAP32[5560912 >> 2] = $shl4_2;
    var $7 = HEAP32[5560916 >> 2];
    var $shl4_3 = $7 << $dec;
    HEAP32[5560916 >> 2] = $shl4_3;
    var $8 = HEAP16[5264112 >> 1];
    var $conv = $8 & 65535;
    var $9 = HEAP16[5264092 >> 1];
    var $conv6 = $9 & 65535;
    var $mul7 = $conv6 * $conv & -1;
    var $cmp8 = $mul7 >>> 0 < 357892096;
    var $mul11 = $mul7 * 3 & -1;
    if ($cmp8) {
      label = 7;
      break;
    } else {
      var $fimg_0 = 0;
      label = 8;
      break;
    }
   case 7:
    var $add = $conv6 + $conv | 0;
    var $add14 = $add + $mul11 | 0;
    var $mul15 = $add14 << 2;
    var $call16 = _malloc($mul15);
    var $10 = $call16;
    var $fimg_0 = $10;
    label = 8;
    break;
   case 8:
    var $fimg_0;
    var $11 = $fimg_0;
    _merror($11, 5578260);
    var $add_ptr = $fimg_0 + ($mul11 << 2) | 0;
    var $12 = HEAP32[5560840 >> 2];
    var $cmp19 = ($12 | 0) == 3;
    var $13 = HEAP32[5427632 >> 2];
    var $tobool21 = ($13 | 0) != 0;
    var $or_cond = $cmp19 & $tobool21;
    var $inc23 = $or_cond & 1;
    var $nc_0 = $inc23 + $12 | 0;
    var $cmp26249 = ($nc_0 | 0) > 0;
    if ($cmp26249) {
      label = 9;
      break;
    } else {
      label = 44;
      break;
    }
   case 9:
    var $cmp30226 = ($mul7 | 0) == 0;
    var $c_1250 = 0;
    label = 10;
    break;
   case 10:
    var $c_1250;
    if ($cmp30226) {
      label = 13;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $_pre9 = HEAP32[5264108 >> 2];
    var $i_0227 = 0;
    label = 12;
    break;
   case 12:
    var $i_0227;
    var $arrayidx34 = $_pre9 + ($i_0227 << 3) + ($c_1250 << 1) | 0;
    var $14 = HEAP16[$arrayidx34 >> 1];
    var $conv35 = $14 & 65535;
    var $shl36 = $conv35 << $dec;
    var $conv37 = $shl36 | 0;
    var $call38 = Math.sqrt($conv37);
    var $mul39 = $call38 * 256;
    var $conv40 = $mul39;
    var $arrayidx41 = $fimg_0 + ($i_0227 << 2) | 0;
    HEAPF32[$arrayidx41 >> 2] = $conv40;
    var $inc43 = $i_0227 + 1 | 0;
    var $cmp30 = ($inc43 | 0) < ($mul7 | 0);
    if ($cmp30) {
      var $i_0227 = $inc43;
      label = 12;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $_pre = HEAP16[5264112 >> 1];
    var $lev_0245 = 0;
    var $hpass_0246 = 0;
    var $16 = $_pre;
    var $15 = $_pre;
    label = 14;
    break;
   case 14:
    var $15;
    var $16;
    var $hpass_0246;
    var $lev_0245;
    var $and = $lev_0245 & 1;
    var $add49 = $and + 1 | 0;
    var $mul50 = $add49 * $mul7 & -1;
    var $cmp53233 = $16 << 16 >> 16 == 0;
    if ($cmp53233) {
      label = 15;
      break;
    } else {
      label = 16;
      break;
    }
   case 15:
    var $_pre10 = HEAP16[5264092 >> 1];
    var $22 = 0;
    var $21 = $15;
    var $20 = $_pre10;
    label = 21;
    break;
   case 16:
    var $shl61 = 1 << $lev_0245;
    var $_pre5 = HEAP16[5264092 >> 1];
    var $row_0234 = 0;
    var $17 = $_pre5;
    label = 17;
    break;
   case 17:
    var $17;
    var $row_0234;
    var $conv57 = $17 & 65535;
    var $mul58 = $conv57 * $row_0234 & -1;
    var $add_ptr56_sum = $mul58 + $hpass_0246 | 0;
    var $add_ptr59 = $fimg_0 + ($add_ptr56_sum << 2) | 0;
    _hat_transform($add_ptr, $add_ptr59, 1, $conv57, $shl61);
    var $cmp64229 = $17 << 16 >> 16 == 0;
    if ($cmp64229) {
      var $19 = 0;
      label = 20;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    var $conv63 = $_pre5 & 65535;
    var $col_0230 = 0;
    var $conv63231 = $conv57;
    label = 19;
    break;
   case 19:
    var $conv63231;
    var $col_0230;
    var $add_ptr_sum204 = $col_0230 + $mul11 | 0;
    var $arrayidx67 = $fimg_0 + ($add_ptr_sum204 << 2) | 0;
    var $18 = HEAPF32[$arrayidx67 >> 2];
    var $conv70 = $18 * .25;
    var $mul72 = $conv63231 * $row_0234 & -1;
    var $add73 = $col_0230 + $mul50 | 0;
    var $add74 = $add73 + $mul72 | 0;
    var $arrayidx75 = $fimg_0 + ($add74 << 2) | 0;
    HEAPF32[$arrayidx75 >> 2] = $conv70;
    var $inc77 = $col_0230 + 1 | 0;
    var $cmp64 = ($inc77 | 0) < ($conv63 | 0);
    if ($cmp64) {
      var $col_0230 = $inc77;
      var $conv63231 = $conv63;
      label = 19;
      break;
    } else {
      var $19 = $_pre5;
      label = 20;
      break;
    }
   case 20:
    var $19;
    var $inc80 = $row_0234 + 1 | 0;
    var $conv52 = $_pre & 65535;
    var $cmp53 = ($inc80 | 0) < ($conv52 | 0);
    if ($cmp53) {
      var $row_0234 = $inc80;
      var $17 = $19;
      label = 17;
      break;
    } else {
      var $22 = $_pre;
      var $21 = $_pre;
      var $20 = $_pre5;
      label = 21;
      break;
    }
   case 21:
    var $20;
    var $21;
    var $22;
    var $cmp84240 = $20 << 16 >> 16 == 0;
    if ($cmp84240) {
      var $27 = $22;
      var $26 = $21;
      label = 27;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    var $conv83239 = $20 & 65535;
    var $shl91 = 1 << $lev_0245;
    var $col_1241 = 0;
    var $23 = $21;
    label = 23;
    break;
   case 23:
    var $23;
    var $col_1241;
    var $add_ptr87_sum = $col_1241 + $mul50 | 0;
    var $add_ptr88 = $fimg_0 + ($add_ptr87_sum << 2) | 0;
    var $conv90 = $23 & 65535;
    _hat_transform($add_ptr, $add_ptr88, $conv83239, $conv90, $shl91);
    var $cmp94237 = $23 << 16 >> 16 == 0;
    if ($cmp94237) {
      var $25 = 0;
      label = 26;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    var $conv93 = $_pre & 65535;
    var $row_1238 = 0;
    label = 25;
    break;
   case 25:
    var $row_1238;
    var $add_ptr_sum = $row_1238 + $mul11 | 0;
    var $arrayidx97 = $fimg_0 + ($add_ptr_sum << 2) | 0;
    var $24 = HEAPF32[$arrayidx97 >> 2];
    var $conv100 = $24 * .25;
    var $mul102 = $conv83239 * $row_1238 & -1;
    var $add104 = $add_ptr87_sum + $mul102 | 0;
    var $arrayidx105 = $fimg_0 + ($add104 << 2) | 0;
    HEAPF32[$arrayidx105 >> 2] = $conv100;
    var $inc107 = $row_1238 + 1 | 0;
    var $cmp94 = ($inc107 | 0) < ($conv93 | 0);
    if ($cmp94) {
      var $row_1238 = $inc107;
      label = 25;
      break;
    } else {
      var $25 = $_pre;
      label = 26;
      break;
    }
   case 26:
    var $25;
    var $inc110 = $col_1241 + 1 | 0;
    var $cmp84 = ($inc110 | 0) < ($conv83239 | 0);
    if ($cmp84) {
      var $col_1241 = $inc110;
      var $23 = $25;
      label = 23;
      break;
    } else {
      var $27 = $25;
      var $26 = $25;
      label = 27;
      break;
    }
   case 27:
    var $26;
    var $27;
    var $28 = HEAPF32[5244064 >> 2];
    var $arrayidx112 = 5243096 + ($lev_0245 << 2) | 0;
    var $29 = HEAPF32[$arrayidx112 >> 2];
    var $mul113 = $28 * $29;
    if ($cmp30226) {
      label = 37;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    var $sub124 = -$mul113;
    var $tobool144 = ($hpass_0246 | 0) == 0;
    var $i_1244 = 0;
    label = 29;
    break;
   case 29:
    var $i_1244;
    var $add118 = $i_1244 + $mul50 | 0;
    var $arrayidx119 = $fimg_0 + ($add118 << 2) | 0;
    var $30 = HEAPF32[$arrayidx119 >> 2];
    var $add120 = $i_1244 + $hpass_0246 | 0;
    var $arrayidx121 = $fimg_0 + ($add120 << 2) | 0;
    var $31 = HEAPF32[$arrayidx121 >> 2];
    var $sub = $31 - $30;
    HEAPF32[$arrayidx121 >> 2] = $sub;
    var $cmp125 = $sub < $sub124;
    if ($cmp125) {
      label = 30;
      break;
    } else {
      label = 31;
      break;
    }
   case 30:
    var $add130 = $mul113 + $sub;
    HEAPF32[$arrayidx121 >> 2] = $add130;
    var $32 = $add130;
    label = 34;
    break;
   case 31:
    var $cmp133 = $sub > $mul113;
    if ($cmp133) {
      label = 32;
      break;
    } else {
      label = 33;
      break;
    }
   case 32:
    var $sub138 = $sub - $mul113;
    HEAPF32[$arrayidx121 >> 2] = $sub138;
    var $32 = $sub138;
    label = 34;
    break;
   case 33:
    HEAPF32[$arrayidx121 >> 2] = 0;
    var $32 = 0;
    label = 34;
    break;
   case 34:
    var $32;
    if ($tobool144) {
      label = 36;
      break;
    } else {
      label = 35;
      break;
    }
   case 35:
    var $arrayidx148 = $fimg_0 + ($i_1244 << 2) | 0;
    var $33 = HEAPF32[$arrayidx148 >> 2];
    var $add149 = $32 + $33;
    HEAPF32[$arrayidx148 >> 2] = $add149;
    label = 36;
    break;
   case 36:
    var $inc152 = $i_1244 + 1 | 0;
    var $cmp115 = ($inc152 | 0) < ($mul7 | 0);
    if ($cmp115) {
      var $i_1244 = $inc152;
      label = 29;
      break;
    } else {
      label = 37;
      break;
    }
   case 37:
    var $inc155 = $lev_0245 + 1 | 0;
    var $exitcond254 = ($inc155 | 0) == 5;
    if ($exitcond254) {
      label = 38;
      break;
    } else {
      var $lev_0245 = $inc155;
      var $hpass_0246 = $mul50;
      var $16 = $27;
      var $15 = $26;
      label = 14;
      break;
    }
   case 38:
    if ($cmp30226) {
      label = 43;
      break;
    } else {
      var $i_2248 = 0;
      label = 39;
      break;
    }
   case 39:
    var $i_2248;
    var $arrayidx161 = $fimg_0 + ($i_2248 << 2) | 0;
    var $34 = HEAPF32[$arrayidx161 >> 2];
    var $add162 = $i_2248 + $mul7 | 0;
    var $arrayidx163 = $fimg_0 + ($add162 << 2) | 0;
    var $35 = HEAPF32[$arrayidx163 >> 2];
    var $add164 = $34 + $35;
    var $mul169 = $add164 * $add164;
    var $div = $mul169 * 152587890625e-16;
    var $cmp170 = $div < 65535;
    var $phitmp202 = $div < 0;
    var $or_cond205 = $cmp170 & $phitmp202;
    var $cmp170_not = $cmp170 ^ 1;
    var $brmerge206 = $or_cond205 | $cmp170_not;
    if ($brmerge206) {
      label = 40;
      break;
    } else {
      label = 41;
      break;
    }
   case 40:
    var $not_or_cond205 = $or_cond205 ^ 1;
    var $_mux207 = $not_or_cond205 << 31 >> 31;
    var $cond213 = $_mux207;
    label = 42;
    break;
   case 41:
    var $phitmp203 = $div >= 0 ? Math.floor($div) : Math.ceil($div);
    var $cond213 = $phitmp203;
    label = 42;
    break;
   case 42:
    var $cond213;
    var $36 = HEAP32[5264108 >> 2];
    var $arrayidx216 = $36 + ($i_2248 << 3) + ($c_1250 << 1) | 0;
    HEAP16[$arrayidx216 >> 1] = $cond213;
    var $inc218 = $i_2248 + 1 | 0;
    var $cmp158 = ($inc218 | 0) < ($mul7 | 0);
    if ($cmp158) {
      var $i_2248 = $inc218;
      label = 39;
      break;
    } else {
      label = 43;
      break;
    }
   case 43:
    var $inc221 = $c_1250 + 1 | 0;
    var $exitcond255 = ($inc221 | 0) == ($nc_0 | 0);
    if ($exitcond255) {
      label = 44;
      break;
    } else {
      var $c_1250 = $inc221;
      label = 10;
      break;
    }
   case 44:
    if ($or_cond) {
      label = 46;
      break;
    } else {
      label = 65;
      break;
    }
   case 45:
    var $add_ptr271_2257 = $fimg_0 + ($conv269 << 2) | 0;
    var $add_ptr271_2 = $add_ptr271_2257;
    var $add_ptr271_1 = $42 + ($conv269 << 1) | 0;
    var $row_3222 = 1;
    var $wlast_0223 = -1;
    var $indvars_iv = 2;
    var $window_sroa_0_0 = $42;
    var $window_sroa_1_0 = $add_ptr271_1;
    var $window_sroa_2_0 = $add_ptr271_2;
    label = 48;
    break;
   case 46:
    var $shr = $13 >>> 4;
    var $and237 = $shr & 2;
    var $or = $and237 | 1;
    var $arrayidx238 = 5245640 + ($or << 2) | 0;
    var $37 = HEAPF32[$arrayidx238 >> 2];
    var $conv239 = $37;
    var $mul240 = $conv239 * .125;
    var $and246 = $13 & 2;
    var $or247 = $and246 | 1;
    var $arrayidx248 = 5245640 + ($or247 << 2) | 0;
    var $38 = HEAPF32[$arrayidx248 >> 2];
    var $conv249 = $38;
    var $div250 = $mul240 / $conv249;
    var $conv251 = $div250;
    var $arrayidx252 = $mul | 0;
    HEAPF32[$arrayidx252 >> 2] = $conv251;
    var $arrayidx260 = 5560904 + ($or247 << 2) | 0;
    var $39 = HEAP32[$arrayidx260 >> 2];
    var $arrayidx261 = $blk | 0;
    HEAP32[$arrayidx261 >> 2] = $39;
    var $shr_1 = $13 >>> 8;
    var $and237_1 = $shr_1 & 2;
    var $or_1 = $and237_1 | 1;
    var $arrayidx238_1 = 5245640 + ($or_1 << 2) | 0;
    var $40 = HEAPF32[$arrayidx238_1 >> 2];
    var $conv239_1 = $40;
    var $mul240_1 = $conv239_1 * .125;
    var $div250_1 = $mul240_1 / $conv239;
    var $conv251_1 = $div250_1;
    var $arrayidx252_1 = $mul + 4 | 0;
    HEAPF32[$arrayidx252_1 >> 2] = $conv251_1;
    var $arrayidx260_1 = 5560904 + ($or << 2) | 0;
    var $41 = HEAP32[$arrayidx260_1 >> 2];
    var $arrayidx261_1 = $blk + 4 | 0;
    HEAP32[$arrayidx261_1 >> 2] = $41;
    var $42 = $fimg_0;
    var $43 = HEAP16[5242964 >> 1];
    var $conv269 = $43 & 65535;
    var $44 = HEAP16[5398712 >> 1];
    var $conv277219 = $44 & 65535;
    var $sub278220 = $conv277219 - 1 | 0;
    var $cmp279221 = ($sub278220 | 0) > 1;
    if ($cmp279221) {
      label = 45;
      break;
    } else {
      label = 65;
      break;
    }
   case 47:
    var $cmp279 = ($add283 | 0) < ($sub278220 | 0);
    var $indvars_iv_next = $indvars_iv + 1 | 0;
    if ($cmp279) {
      var $row_3222 = $add283;
      var $wlast_0223 = $wlast_1_lcssa;
      var $indvars_iv = $indvars_iv_next;
      var $window_sroa_0_0 = $window_sroa_0_2;
      var $window_sroa_1_0 = $window_sroa_1_2;
      var $window_sroa_2_0 = $window_sroa_2_2;
      label = 48;
      break;
    } else {
      label = 65;
      break;
    }
   case 48:
    var $window_sroa_2_0;
    var $window_sroa_1_0;
    var $window_sroa_0_0;
    var $indvars_iv;
    var $wlast_0223;
    var $row_3222;
    var $add283 = $row_3222 + 1 | 0;
    var $cmp284212 = ($wlast_0223 | 0) < ($add283 | 0);
    if ($cmp284212) {
      var $wlast_1213 = $wlast_0223;
      var $window_sroa_0_1 = $window_sroa_0_0;
      var $window_sroa_1_1 = $window_sroa_1_0;
      var $window_sroa_2_1 = $window_sroa_2_0;
      label = 50;
      break;
    } else {
      var $wlast_1_lcssa = $wlast_0223;
      var $window_sroa_0_2 = $window_sroa_0_0;
      var $window_sroa_1_2 = $window_sroa_1_0;
      var $window_sroa_2_2 = $window_sroa_2_0;
      label = 53;
      break;
    }
   case 49:
    var $exitcond = ($inc287 | 0) == ($indvars_iv | 0);
    if ($exitcond) {
      var $wlast_1_lcssa = $indvars_iv;
      var $window_sroa_0_2 = $window_sroa_1_1;
      var $window_sroa_1_2 = $window_sroa_2_1;
      var $window_sroa_2_2 = $window_sroa_0_1;
      label = 53;
      break;
    } else {
      var $window_sroa_0_1 = $window_sroa_1_1;
      var $window_sroa_1_1 = $window_sroa_2_1;
      var $wlast_1213 = $inc287;
      var $window_sroa_2_1 = $window_sroa_0_1;
      label = 50;
      break;
    }
   case 50:
    var $window_sroa_2_1;
    var $window_sroa_1_1;
    var $window_sroa_0_1;
    var $wlast_1213;
    var $inc287 = $wlast_1213 + 1 | 0;
    var $shl299 = $inc287 << 1;
    var $and300 = $shl299 & 14;
    var $add301201 = $and300 << 1;
    var $shl302 = $add301201 | 2;
    var $shr303 = $13 >>> ($shl302 >>> 0);
    var $and305 = $shr303 & 1;
    var $cmp308210 = $and305 >>> 0 < $conv269 >>> 0;
    if ($cmp308210) {
      label = 51;
      break;
    } else {
      label = 49;
      break;
    }
   case 51:
    var $_pre6 = HEAP16[5244916 >> 1];
    var $_pre7 = HEAP16[5264092 >> 1];
    var $_pre8 = HEAP32[5264108 >> 2];
    var $col_2211 = $and305;
    label = 52;
    break;
   case 52:
    var $col_2211;
    var $and313 = $col_2211 & 1;
    var $add314 = $and313 | $and300;
    var $shl315 = $add314 << 1;
    var $shr316 = $13 >>> ($shl315 >>> 0);
    var $and317 = $shr316 & 3;
    var $conv318 = $_pre6 & 65535;
    var $shr319 = $inc287 >> $conv318;
    var $conv320 = $_pre7 & 65535;
    var $mul321 = $shr319 * $conv320 & -1;
    var $shr323 = $col_2211 >> $conv318;
    var $add324 = $mul321 + $shr323 | 0;
    var $arrayidx326 = $_pre8 + ($add324 << 3) + ($and317 << 1) | 0;
    var $45 = HEAP16[$arrayidx326 >> 1];
    var $arrayidx328 = $window_sroa_0_1 + ($col_2211 << 1) | 0;
    HEAP16[$arrayidx328 >> 1] = $45;
    var $add330 = $col_2211 + 2 | 0;
    var $cmp308 = ($add330 | 0) < ($conv269 | 0);
    if ($cmp308) {
      var $col_2211 = $add330;
      label = 52;
      break;
    } else {
      label = 49;
      break;
    }
   case 53:
    var $window_sroa_2_2;
    var $window_sroa_1_2;
    var $window_sroa_0_2;
    var $wlast_1_lcssa;
    var $46 = HEAPF32[5244064 >> 2];
    var $div333 = $46 * .001953125;
    var $shl334 = $row_3222 << 1;
    var $and335 = $shl334 & 14;
    var $shl337 = $and335 << 1;
    var $shr338 = $13 >>> ($shl337 >>> 0);
    var $and340 = $shr338 & 1;
    var $add341 = $and340 + 1 | 0;
    var $conv343215 = $43 & 65535;
    var $sub344216 = $conv343215 - 1 | 0;
    var $cmp345217 = ($add341 | 0) < ($sub344216 | 0);
    if ($cmp345217) {
      label = 54;
      break;
    } else {
      label = 47;
      break;
    }
   case 54:
    var $neg = $row_3222 & 1;
    var $and367 = $neg ^ 1;
    var $arrayidx368 = $blk + ($and367 << 2) | 0;
    var $47 = HEAP32[$arrayidx368 >> 2];
    var $mul369 = $47 << 2;
    var $arrayidx373 = $mul + ($neg << 2) | 0;
    var $48 = HEAPF32[$arrayidx373 >> 2];
    var $arrayidx380 = $blk + ($neg << 2) | 0;
    var $49 = HEAP32[$arrayidx380 >> 2];
    var $sub416 = -$div333;
    var $col_3218 = $add341;
    label = 55;
    break;
   case 55:
    var $col_3218;
    var $sub348 = $col_3218 - 1 | 0;
    var $arrayidx350 = $window_sroa_0_2 + ($sub348 << 1) | 0;
    var $50 = HEAP16[$arrayidx350 >> 1];
    var $conv351 = $50 & 65535;
    var $add352 = $col_3218 + 1 | 0;
    var $arrayidx354 = $window_sroa_0_2 + ($add352 << 1) | 0;
    var $51 = HEAP16[$arrayidx354 >> 1];
    var $conv355 = $51 & 65535;
    var $add356 = $conv355 + $conv351 | 0;
    var $arrayidx359 = $window_sroa_2_2 + ($sub348 << 1) | 0;
    var $52 = HEAP16[$arrayidx359 >> 1];
    var $conv360 = $52 & 65535;
    var $add361 = $add356 + $conv360 | 0;
    var $arrayidx364 = $window_sroa_2_2 + ($add352 << 1) | 0;
    var $53 = HEAP16[$arrayidx364 >> 1];
    var $conv365 = $53 & 65535;
    var $add366 = $add361 + $conv365 | 0;
    var $sub370 = $add366 - $mul369 | 0;
    var $conv371 = $sub370 | 0;
    var $mul374 = $48 * $conv371;
    var $conv375 = $mul374;
    var $arrayidx377 = $window_sroa_1_2 + ($col_3218 << 1) | 0;
    var $54 = HEAP16[$arrayidx377 >> 1];
    var $conv378 = $54 & 65535;
    var $add381 = $conv378 + $49 | 0;
    var $conv382 = $add381 | 0;
    var $mul383 = $conv382 * .5;
    var $add384 = $conv375 + $mul383;
    var $conv385 = $add384;
    var $cmp386 = $conv385 < 0;
    if ($cmp386) {
      var $cond393 = 0;
      label = 57;
      break;
    } else {
      label = 56;
      break;
    }
   case 56:
    var $phitmp = Math.sqrt($conv385);
    var $cond393 = $phitmp;
    label = 57;
    break;
   case 57:
    var $cond393;
    var $and397 = $col_3218 & 1;
    var $add398 = $and397 | $and335;
    var $shl399 = $add398 << 1;
    var $shr400 = $13 >>> ($shl399 >>> 0);
    var $and401 = $shr400 & 3;
    var $55 = HEAP16[5244916 >> 1];
    var $conv402 = $55 & 65535;
    var $shr403 = $row_3222 >> $conv402;
    var $56 = HEAP16[5264092 >> 1];
    var $conv404 = $56 & 65535;
    var $mul405 = $shr403 * $conv404 & -1;
    var $shr407 = $col_3218 >> $conv402;
    var $add408 = $mul405 + $shr407 | 0;
    var $57 = HEAP32[5264108 >> 2];
    var $arrayidx410 = $57 + ($add408 << 3) + ($and401 << 1) | 0;
    var $58 = HEAP16[$arrayidx410 >> 1];
    var $conv411 = $58 & 65535;
    var $call412 = Math.sqrt($conv411);
    var $conv413 = $cond393;
    var $sub414 = $call412 - $conv413;
    var $conv415 = $sub414;
    var $cmp417 = $conv415 < $sub416;
    if ($cmp417) {
      label = 58;
      break;
    } else {
      label = 59;
      break;
    }
   case 58:
    var $add420 = $div333 + $conv415;
    var $diff_0 = $add420;
    label = 61;
    break;
   case 59:
    var $cmp422 = $conv415 > $div333;
    if ($cmp422) {
      label = 60;
      break;
    } else {
      var $diff_0 = 0;
      label = 61;
      break;
    }
   case 60:
    var $sub425 = $conv415 - $div333;
    var $diff_0 = $sub425;
    label = 61;
    break;
   case 61:
    var $diff_0;
    var $add429 = $cond393 + $diff_0;
    var $mul431 = $add429 * $add429;
    var $conv432 = $mul431;
    var $add433 = $conv432 + .5;
    var $cmp434 = $add433 < 65535;
    if ($cmp434) {
      label = 62;
      break;
    } else {
      var $cond466 = -1;
      label = 64;
      break;
    }
   case 62:
    var $phitmp199 = $add433 < 0;
    var $not_phitmp199 = $phitmp199 ^ 1;
    var $_mux = $not_phitmp199 << 31 >> 31;
    if ($phitmp199) {
      var $cond466 = $_mux;
      label = 64;
      break;
    } else {
      label = 63;
      break;
    }
   case 63:
    var $phitmp200 = $add433 >= 0 ? Math.floor($add433) : Math.ceil($add433);
    var $cond466 = $phitmp200;
    label = 64;
    break;
   case 64:
    var $cond466;
    HEAP16[$arrayidx410 >> 1] = $cond466;
    var $add485 = $col_3218 + 2 | 0;
    var $cmp345 = ($add485 | 0) < ($sub344216 | 0);
    if ($cmp345) {
      var $col_3218 = $add485;
      label = 55;
      break;
    } else {
      label = 47;
      break;
    }
   case 65:
    _free($11);
    STACKTOP = __stackBase__;
    return;
  }
}



_wavelet_denoise["X"] = 1;
function _scale_colors() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 48 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $sum = __stackBase__;
    var $scale_mul = __stackBase__ + 32;
    var $0 = HEAPF32[5243536 >> 2];
    var $tobool = $0 != 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    HEAP32[5245640 >> 2] = HEAP32[5243536 >> 2];
    HEAP32[5245644 >> 2] = HEAP32[5243540 >> 2];
    HEAP32[5245648 >> 2] = HEAP32[5243544 >> 2];
    HEAP32[5245652 >> 2] = HEAP32[5243548 >> 2];
    label = 4;
    break;
   case 4:
    var $_b2 = HEAP8[5243556];
    if ($_b2) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $_b4 = HEAP8[5243552];
    var $1 = HEAPF32[5561124 >> 2];
    var $cmp = $1 == -1;
    var $or_cond = $_b4 & $cmp;
    if ($or_cond) {
      label = 6;
      break;
    } else {
      label = 30;
      break;
    }
   case 6:
    var $2 = HEAP32[5398728 >> 2];
    var $3 = HEAP32[5398720 >> 2];
    var $add = $3 + $2 | 0;
    var $4 = HEAP16[5398712 >> 1];
    var $conv = $4 & 65535;
    var $cmp4 = $add >>> 0 < $conv >>> 0;
    var $add_conv = $cmp4 ? $add : $conv;
    var $5 = HEAP32[5398732 >> 2];
    var $6 = HEAP32[5398724 >> 2];
    var $add8 = $6 + $5 | 0;
    var $7 = HEAP16[5242964 >> 1];
    var $conv9 = $7 & 65535;
    var $cmp10 = $add8 >>> 0 < $conv9 >>> 0;
    var $cond17 = $cmp10 ? $add8 : $conv9;
    var $cmp18168 = $2 >>> 0 < $add_conv >>> 0;
    if ($cmp18168) {
      label = 7;
      break;
    } else {
      label = 30;
      break;
    }
   case 7:
    var $cmp21164 = $5 >>> 0 < $cond17 >>> 0;
    var $8 = $sum;
    var $9 = HEAP32[5427632 >> 2];
    var $tobool44 = ($9 | 0) == 0;
    var $10 = HEAP32[5264108 >> 2];
    var $11 = HEAP32[5263496 >> 2];
    var $sub = $11 - 25 | 0;
    var $12 = HEAP16[5244916 >> 1];
    var $conv47 = $12 & 65535;
    var $13 = HEAP16[5264092 >> 1];
    var $conv48 = $13 & 65535;
    var $arrayidx89 = $sum | 0;
    var $arrayidx89_1 = $sum + 4 | 0;
    var $arrayidx89_2 = $sum + 8 | 0;
    var $arrayidx89_3 = $sum + 12 | 0;
    var $arrayidx89_4 = $sum + 16 | 0;
    var $arrayidx89_5 = $sum + 20 | 0;
    var $arrayidx89_6 = $sum + 24 | 0;
    var $arrayidx89_7 = $sum + 28 | 0;
    var $row_0169 = $2;
    var $dsum_sroa_0_0 = 0;
    var $dsum_sroa_1_0 = 0;
    var $dsum_sroa_2_0 = 0;
    var $dsum_sroa_3_0 = 0;
    var $dsum_sroa_4_0 = 0;
    var $dsum_sroa_5_0 = 0;
    var $dsum_sroa_6_0 = 0;
    var $dsum_sroa_7_0 = 0;
    label = 8;
    break;
   case 8:
    var $dsum_sroa_7_0;
    var $dsum_sroa_6_0;
    var $dsum_sroa_5_0;
    var $dsum_sroa_4_0;
    var $dsum_sroa_3_0;
    var $dsum_sroa_2_0;
    var $dsum_sroa_1_0;
    var $dsum_sroa_0_0;
    var $row_0169;
    var $add25 = $row_0169 + 8 | 0;
    if ($cmp21164) {
      label = 9;
      break;
    } else {
      var $dsum_sroa_0_3 = $dsum_sroa_0_0;
      var $dsum_sroa_1_3 = $dsum_sroa_1_0;
      var $dsum_sroa_2_3 = $dsum_sroa_2_0;
      var $dsum_sroa_3_3 = $dsum_sroa_3_0;
      var $dsum_sroa_4_3 = $dsum_sroa_4_0;
      var $dsum_sroa_5_3 = $dsum_sroa_5_0;
      var $dsum_sroa_6_3 = $dsum_sroa_6_0;
      var $dsum_sroa_7_3 = $dsum_sroa_7_0;
      var $add100_pre_phi = $add25;
      label = 26;
      break;
    }
   case 9:
    var $cmp26158 = $row_0169 >>> 0 < 4294967288;
    var $col_0165 = $5;
    var $dsum_sroa_0_1 = $dsum_sroa_0_0;
    var $dsum_sroa_1_1 = $dsum_sroa_1_0;
    var $dsum_sroa_2_1 = $dsum_sroa_2_0;
    var $dsum_sroa_3_1 = $dsum_sroa_3_0;
    var $dsum_sroa_4_1 = $dsum_sroa_4_0;
    var $dsum_sroa_5_1 = $dsum_sroa_5_0;
    var $dsum_sroa_6_1 = $dsum_sroa_6_0;
    var $dsum_sroa_7_1 = $dsum_sroa_7_0;
    label = 10;
    break;
   case 10:
    var $dsum_sroa_7_1;
    var $dsum_sroa_6_1;
    var $dsum_sroa_5_1;
    var $dsum_sroa_4_1;
    var $dsum_sroa_3_1;
    var $dsum_sroa_2_1;
    var $dsum_sroa_1_1;
    var $dsum_sroa_0_1;
    var $col_0165;
    HEAP32[$8 >> 2] = 0;
    HEAP32[$8 + 4 >> 2] = 0;
    HEAP32[$8 + 8 >> 2] = 0;
    HEAP32[$8 + 12 >> 2] = 0;
    HEAP32[$8 + 16 >> 2] = 0;
    HEAP32[$8 + 20 >> 2] = 0;
    HEAP32[$8 + 24 >> 2] = 0;
    HEAP32[$8 + 28 >> 2] = 0;
    var $add32 = $col_0165 + 8 | 0;
    if ($cmp26158) {
      label = 11;
      break;
    } else {
      var $24 = 0;
      var $23 = 0;
      var $22 = 0;
      var $21 = 0;
      var $20 = 0;
      var $19 = 0;
      var $18 = 0;
      var $17 = 0;
      var $add97_pre_pre_phi = $add32;
      label = 24;
      break;
    }
   case 11:
    var $cmp33154 = $col_0165 >>> 0 < 4294967288;
    var $y_0161 = $row_0169;
    label = 12;
    break;
   case 12:
    var $y_0161;
    if ($cmp33154) {
      label = 13;
      break;
    } else {
      label = 22;
      break;
    }
   case 13:
    var $mul55 = $conv9 * $y_0161 & -1;
    var $shr = $y_0161 >>> ($conv47 >>> 0);
    var $mul = $shr * $conv48 & -1;
    var $x_0157 = $col_0165;
    label = 14;
    break;
   case 14:
    var $x_0157;
    var $add56 = $mul55 + $x_0157 | 0;
    var $shr50 = $x_0157 >>> ($conv47 >>> 0);
    var $add51 = $mul + $shr50 | 0;
    var $c_0 = 0;
    label = 15;
    break;
   case 15:
    var $c_0;
    var $cmp41 = $c_0 >>> 0 < 4;
    if ($cmp41) {
      label = 16;
      break;
    } else {
      label = 21;
      break;
    }
   case 16:
    if ($tobool44) {
      label = 18;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    var $call = _fcol($y_0161, $x_0157);
    var $arrayidx52 = $10 + ($add51 << 3) + ($call << 1) | 0;
    var $val_0_in_in = $arrayidx52;
    var $c_1 = $call;
    label = 19;
    break;
   case 18:
    var $arrayidx58 = $10 + ($add56 << 3) + ($c_0 << 1) | 0;
    var $val_0_in_in = $arrayidx58;
    var $c_1 = $c_0;
    label = 19;
    break;
   case 19:
    var $c_1;
    var $val_0_in_in;
    var $val_0_in = HEAP16[$val_0_in_in >> 1];
    var $val_0 = $val_0_in & 65535;
    var $cmp61 = $val_0 >>> 0 > $sub >>> 0;
    if ($cmp61) {
      var $dsum_sroa_0_2 = $dsum_sroa_0_1;
      var $dsum_sroa_1_2 = $dsum_sroa_1_1;
      var $dsum_sroa_2_2 = $dsum_sroa_2_1;
      var $dsum_sroa_3_2 = $dsum_sroa_3_1;
      var $dsum_sroa_4_2 = $dsum_sroa_4_1;
      var $dsum_sroa_5_2 = $dsum_sroa_5_1;
      var $dsum_sroa_6_2 = $dsum_sroa_6_1;
      var $dsum_sroa_7_2 = $dsum_sroa_7_1;
      var $add97_pre_phi = $add32;
      label = 25;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    var $arrayidx65 = 5560904 + ($c_1 << 2) | 0;
    var $14 = HEAP32[$arrayidx65 >> 2];
    var $sub66 = $val_0 - $14 | 0;
    var $cmp67 = ($sub66 | 0) < 0;
    var $_sub66 = $cmp67 ? 0 : $sub66;
    var $arrayidx71 = $sum + ($c_1 << 2) | 0;
    var $15 = HEAP32[$arrayidx71 >> 2];
    var $add72 = $_sub66 + $15 | 0;
    HEAP32[$arrayidx71 >> 2] = $add72;
    var $add73 = $c_1 + 4 | 0;
    var $arrayidx74 = $sum + ($add73 << 2) | 0;
    var $16 = HEAP32[$arrayidx74 >> 2];
    var $inc = $16 + 1 | 0;
    HEAP32[$arrayidx74 >> 2] = $inc;
    var $inc78 = $c_1 + 1 | 0;
    if ($tobool44) {
      var $c_0 = $inc78;
      label = 15;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    var $inc80 = $x_0157 + 1 | 0;
    var $cmp33 = $inc80 >>> 0 < $add32 >>> 0;
    var $cmp36 = $inc80 >>> 0 < $cond17 >>> 0;
    var $or_cond127 = $cmp33 & $cmp36;
    if ($or_cond127) {
      var $x_0157 = $inc80;
      label = 14;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    var $inc83 = $y_0161 + 1 | 0;
    var $cmp26 = $inc83 >>> 0 < $add25 >>> 0;
    var $cmp28 = $inc83 >>> 0 < $add_conv >>> 0;
    var $or_cond126 = $cmp26 & $cmp28;
    if ($or_cond126) {
      var $y_0161 = $inc83;
      label = 12;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    var $_pre = HEAP32[$arrayidx89 >> 2];
    var $_pre13 = HEAP32[$arrayidx89_1 >> 2];
    var $_pre14 = HEAP32[$arrayidx89_2 >> 2];
    var $_pre15 = HEAP32[$arrayidx89_3 >> 2];
    var $_pre16 = HEAP32[$arrayidx89_4 >> 2];
    var $_pre17 = HEAP32[$arrayidx89_5 >> 2];
    var $_pre18 = HEAP32[$arrayidx89_6 >> 2];
    var $_pre19 = HEAP32[$arrayidx89_7 >> 2];
    var $phitmp26 = $_pre >>> 0;
    var $phitmp27 = $_pre13 >>> 0;
    var $phitmp28 = $_pre14 >>> 0;
    var $phitmp29 = $_pre15 >>> 0;
    var $phitmp30 = $_pre16 >>> 0;
    var $phitmp31 = $_pre17 >>> 0;
    var $phitmp32 = $_pre18 >>> 0;
    var $phitmp33 = $_pre19 >>> 0;
    var $24 = $phitmp26;
    var $23 = $phitmp27;
    var $22 = $phitmp28;
    var $21 = $phitmp29;
    var $20 = $phitmp30;
    var $19 = $phitmp31;
    var $18 = $phitmp32;
    var $17 = $phitmp33;
    var $add97_pre_pre_phi = $add32;
    label = 24;
    break;
   case 24:
    var $add97_pre_pre_phi;
    var $17;
    var $18;
    var $19;
    var $20;
    var $21;
    var $22;
    var $23;
    var $24;
    var $add92 = $dsum_sroa_0_1 + $24;
    var $add92_1 = $dsum_sroa_1_1 + $23;
    var $add92_2 = $dsum_sroa_2_1 + $22;
    var $add92_3 = $dsum_sroa_3_1 + $21;
    var $add92_4 = $dsum_sroa_4_1 + $20;
    var $add92_5 = $dsum_sroa_5_1 + $19;
    var $add92_6 = $dsum_sroa_6_1 + $18;
    var $add92_7 = $dsum_sroa_7_1 + $17;
    var $dsum_sroa_0_2 = $add92;
    var $dsum_sroa_1_2 = $add92_1;
    var $dsum_sroa_2_2 = $add92_2;
    var $dsum_sroa_3_2 = $add92_3;
    var $dsum_sroa_4_2 = $add92_4;
    var $dsum_sroa_5_2 = $add92_5;
    var $dsum_sroa_6_2 = $add92_6;
    var $dsum_sroa_7_2 = $add92_7;
    var $add97_pre_phi = $add97_pre_pre_phi;
    label = 25;
    break;
   case 25:
    var $add97_pre_phi;
    var $dsum_sroa_7_2;
    var $dsum_sroa_6_2;
    var $dsum_sroa_5_2;
    var $dsum_sroa_4_2;
    var $dsum_sroa_3_2;
    var $dsum_sroa_2_2;
    var $dsum_sroa_1_2;
    var $dsum_sroa_0_2;
    var $cmp21 = $add97_pre_phi >>> 0 < $cond17 >>> 0;
    if ($cmp21) {
      var $col_0165 = $add97_pre_phi;
      var $dsum_sroa_0_1 = $dsum_sroa_0_2;
      var $dsum_sroa_1_1 = $dsum_sroa_1_2;
      var $dsum_sroa_2_1 = $dsum_sroa_2_2;
      var $dsum_sroa_3_1 = $dsum_sroa_3_2;
      var $dsum_sroa_4_1 = $dsum_sroa_4_2;
      var $dsum_sroa_5_1 = $dsum_sroa_5_2;
      var $dsum_sroa_6_1 = $dsum_sroa_6_2;
      var $dsum_sroa_7_1 = $dsum_sroa_7_2;
      label = 10;
      break;
    } else {
      var $dsum_sroa_0_3 = $dsum_sroa_0_2;
      var $dsum_sroa_1_3 = $dsum_sroa_1_2;
      var $dsum_sroa_2_3 = $dsum_sroa_2_2;
      var $dsum_sroa_3_3 = $dsum_sroa_3_2;
      var $dsum_sroa_4_3 = $dsum_sroa_4_2;
      var $dsum_sroa_5_3 = $dsum_sroa_5_2;
      var $dsum_sroa_6_3 = $dsum_sroa_6_2;
      var $dsum_sroa_7_3 = $dsum_sroa_7_2;
      var $add100_pre_phi = $add25;
      label = 26;
      break;
    }
   case 26:
    var $add100_pre_phi;
    var $dsum_sroa_7_3;
    var $dsum_sroa_6_3;
    var $dsum_sroa_5_3;
    var $dsum_sroa_4_3;
    var $dsum_sroa_3_3;
    var $dsum_sroa_2_3;
    var $dsum_sroa_1_3;
    var $dsum_sroa_0_3;
    var $cmp18 = $add100_pre_phi >>> 0 < $add_conv >>> 0;
    if ($cmp18) {
      var $row_0169 = $add100_pre_phi;
      var $dsum_sroa_0_0 = $dsum_sroa_0_3;
      var $dsum_sroa_1_0 = $dsum_sroa_1_3;
      var $dsum_sroa_2_0 = $dsum_sroa_2_3;
      var $dsum_sroa_3_0 = $dsum_sroa_3_3;
      var $dsum_sroa_4_0 = $dsum_sroa_4_3;
      var $dsum_sroa_5_0 = $dsum_sroa_5_3;
      var $dsum_sroa_6_0 = $dsum_sroa_6_3;
      var $dsum_sroa_7_0 = $dsum_sroa_7_3;
      label = 8;
      break;
    } else {
      var $dsum_sroa_0_4 = $dsum_sroa_0_3;
      var $dsum_sroa_1_4 = $dsum_sroa_1_3;
      var $dsum_sroa_2_4 = $dsum_sroa_2_3;
      var $dsum_sroa_3_4 = $dsum_sroa_3_3;
      var $dsum_sroa_4_4 = $dsum_sroa_4_3;
      var $dsum_sroa_5_4 = $dsum_sroa_5_3;
      var $dsum_sroa_6_4 = $dsum_sroa_6_3;
      var $dsum_sroa_7_4 = $dsum_sroa_7_3;
      label = 27;
      break;
    }
   case 27:
    var $dsum_sroa_7_4;
    var $dsum_sroa_6_4;
    var $dsum_sroa_5_4;
    var $dsum_sroa_4_4;
    var $dsum_sroa_3_4;
    var $dsum_sroa_2_4;
    var $dsum_sroa_1_4;
    var $dsum_sroa_0_4;
    var $tobool107 = $dsum_sroa_0_4 != 0;
    if ($tobool107) {
      label = 28;
      break;
    } else {
      var $dsum_sroa_7_435 = $dsum_sroa_7_4;
      var $dsum_sroa_6_436 = $dsum_sroa_6_4;
      var $dsum_sroa_5_437 = $dsum_sroa_5_4;
      var $dsum_sroa_3_438 = $dsum_sroa_3_4;
      var $dsum_sroa_2_439 = $dsum_sroa_2_4;
      var $dsum_sroa_1_440 = $dsum_sroa_1_4;
      label = 29;
      break;
    }
   case 28:
    var $div = $dsum_sroa_4_4 / $dsum_sroa_0_4;
    var $conv112 = $div;
    HEAPF32[5245640 >> 2] = $conv112;
    var $dsum_sroa_7_435 = $dsum_sroa_7_4;
    var $dsum_sroa_6_436 = $dsum_sroa_6_4;
    var $dsum_sroa_5_437 = $dsum_sroa_5_4;
    var $dsum_sroa_3_438 = $dsum_sroa_3_4;
    var $dsum_sroa_2_439 = $dsum_sroa_2_4;
    var $dsum_sroa_1_440 = $dsum_sroa_1_4;
    label = 29;
    break;
   case 29:
    var $dsum_sroa_1_440;
    var $dsum_sroa_2_439;
    var $dsum_sroa_3_438;
    var $dsum_sroa_5_437;
    var $dsum_sroa_6_436;
    var $dsum_sroa_7_435;
    var $tobool107_1 = $dsum_sroa_1_440 != 0;
    if ($tobool107_1) {
      label = 77;
      break;
    } else {
      var $dsum_sroa_2_43942 = $dsum_sroa_2_439;
      var $dsum_sroa_3_43843 = $dsum_sroa_3_438;
      var $dsum_sroa_6_43644 = $dsum_sroa_6_436;
      var $dsum_sroa_7_43545 = $dsum_sroa_7_435;
      label = 78;
      break;
    }
   case 30:
    var $_b3 = HEAP8[5243552];
    var $25 = HEAPF32[5561124 >> 2];
    var $cmp121 = $25 != -1;
    var $or_cond1 = $_b3 & $cmp121;
    if ($or_cond1) {
      label = 31;
      break;
    } else {
      label = 45;
      break;
    }
   case 31:
    var $26 = $sum;
    HEAP32[$26 >> 2] = 0;
    HEAP32[$26 + 4 >> 2] = 0;
    HEAP32[$26 + 8 >> 2] = 0;
    HEAP32[$26 + 12 >> 2] = 0;
    HEAP32[$26 + 16 >> 2] = 0;
    HEAP32[$26 + 20 >> 2] = 0;
    HEAP32[$26 + 24 >> 2] = 0;
    HEAP32[$26 + 28 >> 2] = 0;
    var $27 = HEAP32[5427632 >> 2];
    var $row_1152 = 0;
    label = 32;
    break;
   case 32:
    var $row_1152;
    var $shl = $row_1152 << 1;
    var $col_1151 = 0;
    label = 33;
    break;
   case 33:
    var $col_1151;
    var $and132 = $col_1151 & 1;
    var $add133 = $and132 | $shl;
    var $shl134 = $add133 << 1;
    var $shr135 = $27 >>> ($shl134 >>> 0);
    var $and136 = $shr135 & 3;
    var $arrayidx138 = 5242968 + ($row_1152 << 4) + ($col_1151 << 1) | 0;
    var $28 = HEAP16[$arrayidx138 >> 1];
    var $conv139 = $28 & 65535;
    var $arrayidx140 = 5560904 + ($and136 << 2) | 0;
    var $29 = HEAP32[$arrayidx140 >> 2];
    var $sub141 = $conv139 - $29 | 0;
    var $cmp142 = ($sub141 | 0) > 0;
    if ($cmp142) {
      label = 34;
      break;
    } else {
      label = 35;
      break;
    }
   case 34:
    var $arrayidx145 = $sum + ($and136 << 2) | 0;
    var $30 = HEAP32[$arrayidx145 >> 2];
    var $add146 = $30 + $sub141 | 0;
    HEAP32[$arrayidx145 >> 2] = $add146;
    label = 35;
    break;
   case 35:
    var $add148125 = $and136 | 4;
    var $arrayidx149 = $sum + ($add148125 << 2) | 0;
    var $31 = HEAP32[$arrayidx149 >> 2];
    var $inc150 = $31 + 1 | 0;
    HEAP32[$arrayidx149 >> 2] = $inc150;
    var $inc152 = $col_1151 + 1 | 0;
    var $exitcond176 = ($inc152 | 0) == 8;
    if ($exitcond176) {
      label = 36;
      break;
    } else {
      var $col_1151 = $inc152;
      label = 33;
      break;
    }
   case 36:
    var $inc155 = $row_1152 + 1 | 0;
    var $exitcond177 = ($inc155 | 0) == 8;
    if ($exitcond177) {
      label = 37;
      break;
    } else {
      var $row_1152 = $inc155;
      label = 32;
      break;
    }
   case 37:
    var $arrayidx157 = $sum | 0;
    var $32 = HEAP32[$arrayidx157 >> 2];
    var $tobool158 = ($32 | 0) == 0;
    if ($tobool158) {
      label = 42;
      break;
    } else {
      label = 38;
      break;
    }
   case 38:
    var $arrayidx160 = $sum + 4 | 0;
    var $33 = HEAP32[$arrayidx160 >> 2];
    var $tobool161 = ($33 | 0) == 0;
    if ($tobool161) {
      label = 42;
      break;
    } else {
      label = 39;
      break;
    }
   case 39:
    var $arrayidx163 = $sum + 8 | 0;
    var $34 = HEAP32[$arrayidx163 >> 2];
    var $tobool164 = ($34 | 0) == 0;
    if ($tobool164) {
      label = 42;
      break;
    } else {
      label = 40;
      break;
    }
   case 40:
    var $arrayidx166 = $sum + 12 | 0;
    var $35 = HEAP32[$arrayidx166 >> 2];
    var $tobool167 = ($35 | 0) == 0;
    if ($tobool167) {
      label = 42;
      break;
    } else {
      label = 41;
      break;
    }
   case 41:
    var $arrayidx174 = $sum + 16 | 0;
    var $36 = HEAP32[$arrayidx174 >> 2];
    var $conv175 = $36 >>> 0;
    var $conv177 = $32 >>> 0;
    var $div178 = $conv175 / $conv177;
    HEAPF32[5245640 >> 2] = $div178;
    var $arrayidx174_1 = $sum + 20 | 0;
    var $37 = HEAP32[$arrayidx174_1 >> 2];
    var $conv175_1 = $37 >>> 0;
    var $conv177_1 = $33 >>> 0;
    var $div178_1 = $conv175_1 / $conv177_1;
    HEAPF32[5245644 >> 2] = $div178_1;
    var $arrayidx174_2 = $sum + 24 | 0;
    var $38 = HEAP32[$arrayidx174_2 >> 2];
    var $conv175_2 = $38 >>> 0;
    var $conv177_2 = $34 >>> 0;
    var $div178_2 = $conv175_2 / $conv177_2;
    HEAPF32[5245648 >> 2] = $div178_2;
    var $arrayidx174_3 = $sum + 28 | 0;
    var $39 = HEAP32[$arrayidx174_3 >> 2];
    var $conv175_3 = $39 >>> 0;
    var $conv177_3 = $35 >>> 0;
    var $div178_3 = $conv175_3 / $conv177_3;
    HEAPF32[5245652 >> 2] = $div178_3;
    var $43 = $div178_3;
    label = 46;
    break;
   case 42:
    var $tobool184 = $25 != 0;
    var $40 = HEAPF32[5561132 >> 2];
    var $tobool186 = $40 != 0;
    var $or_cond2 = $tobool184 & $tobool186;
    if ($or_cond2) {
      label = 43;
      break;
    } else {
      label = 44;
      break;
    }
   case 43:
    HEAP32[5245640 >> 2] = HEAP32[5561124 >> 2];
    HEAP32[5245644 >> 2] = HEAP32[5561128 >> 2];
    HEAP32[5245648 >> 2] = HEAP32[5561132 >> 2];
    HEAP32[5245652 >> 2] = HEAP32[5561136 >> 2];
    label = 45;
    break;
   case 44:
    var $41 = HEAP32[_stderr >> 2];
    var $42 = HEAP32[5264120 >> 2];
    var $call189 = _fprintf($41, 5578096, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $42, tempInt));
    label = 45;
    break;
   case 45:
    var $_pr = HEAPF32[5245652 >> 2];
    var $43 = $_pr;
    label = 46;
    break;
   case 46:
    var $43;
    var $cmp193 = $43 == 0;
    if ($cmp193) {
      label = 47;
      break;
    } else {
      var $46 = $43;
      label = 48;
      break;
    }
   case 47:
    var $44 = HEAP32[5560840 >> 2];
    var $cmp196 = ($44 | 0) < 4;
    var $45 = HEAPF32[5245644 >> 2];
    var $cond201 = $cmp196 ? $45 : 1;
    HEAPF32[5245652 >> 2] = $cond201;
    var $46 = $cond201;
    label = 48;
    break;
   case 48:
    var $46;
    var $47 = HEAP32[5561400 >> 2];
    var $48 = HEAP32[5263496 >> 2];
    var $49 = HEAPF32[5244064 >> 2];
    var $tobool203 = $49 != 0;
    if ($tobool203) {
      label = 49;
      break;
    } else {
      var $52 = $47;
      var $51 = $48;
      var $50 = $46;
      label = 50;
      break;
    }
   case 49:
    _wavelet_denoise();
    var $_pre20 = HEAP32[5561400 >> 2];
    var $_pre21 = HEAP32[5263496 >> 2];
    var $_pre22 = HEAPF32[5245652 >> 2];
    var $52 = $_pre20;
    var $51 = $_pre21;
    var $50 = $_pre22;
    label = 50;
    break;
   case 50:
    var $50;
    var $51;
    var $52;
    var $sub206 = $51 - $52 | 0;
    HEAP32[5263496 >> 2] = $sub206;
    var $53 = HEAPF32[5245640 >> 2];
    var $conv212 = $53;
    var $cmp213 = $conv212 < 1.7976931348623157e+308;
    var $dmin_1 = $cmp213 ? $conv212 : 1.7976931348623157e+308;
    var $cmp221 = $53 > 0;
    var $dmax_1 = $cmp221 ? $conv212 : 0;
    var $54 = HEAPF32[5245644 >> 2];
    var $conv212_1 = $54;
    var $cmp213_1 = $dmin_1 > $conv212_1;
    var $dmin_1_1 = $cmp213_1 ? $conv212_1 : $dmin_1;
    var $cmp221_1 = $dmax_1 < $conv212_1;
    var $dmax_1_1 = $cmp221_1 ? $conv212_1 : $dmax_1;
    var $55 = HEAPF32[5245648 >> 2];
    var $conv212_2 = $55;
    var $cmp213_2 = $dmin_1_1 > $conv212_2;
    var $dmin_1_2 = $cmp213_2 ? $conv212_2 : $dmin_1_1;
    var $cmp221_2 = $dmax_1_1 < $conv212_2;
    var $dmax_1_2 = $cmp221_2 ? $conv212_2 : $dmax_1_1;
    var $conv212_3 = $50;
    var $cmp213_3 = $dmin_1_2 > $conv212_3;
    var $dmin_1_3 = $cmp213_3 ? $conv212_3 : $dmin_1_2;
    var $cmp221_3 = $dmax_1_2 < $conv212_3;
    var $dmax_1_3 = $cmp221_3 ? $conv212_3 : $dmax_1_2;
    var $56 = HEAP32[5398708 >> 2];
    var $tobool230 = ($56 | 0) == 0;
    var $dmin_0_dmax_0 = $tobool230 ? $dmin_1_3 : $dmax_1_3;
    var $conv243 = $sub206 >>> 0;
    var $div239 = $conv212 / $dmin_0_dmax_0;
    var $conv240 = $div239;
    HEAPF32[5245640 >> 2] = $conv240;
    var $conv241 = $conv240;
    var $mul242 = $conv241 * 65535;
    var $div244 = $mul242 / $conv243;
    var $conv245 = $div244;
    var $arrayidx246 = $scale_mul | 0;
    HEAPF32[$arrayidx246 >> 2] = $conv245;
    var $div239_1 = $conv212_1 / $dmin_0_dmax_0;
    var $conv240_1 = $div239_1;
    HEAPF32[5245644 >> 2] = $conv240_1;
    var $conv241_1 = $conv240_1;
    var $mul242_1 = $conv241_1 * 65535;
    var $div244_1 = $mul242_1 / $conv243;
    var $conv245_1 = $div244_1;
    var $arrayidx246_1 = $scale_mul + 4 | 0;
    HEAPF32[$arrayidx246_1 >> 2] = $conv245_1;
    var $div239_2 = $conv212_2 / $dmin_0_dmax_0;
    var $conv240_2 = $div239_2;
    HEAPF32[5245648 >> 2] = $conv240_2;
    var $conv241_2 = $conv240_2;
    var $mul242_2 = $conv241_2 * 65535;
    var $div244_2 = $mul242_2 / $conv243;
    var $conv245_2 = $div244_2;
    var $arrayidx246_2 = $scale_mul + 8 | 0;
    HEAPF32[$arrayidx246_2 >> 2] = $conv245_2;
    var $div239_3 = $conv212_3 / $dmin_0_dmax_0;
    var $conv240_3 = $div239_3;
    HEAPF32[5245652 >> 2] = $conv240_3;
    var $conv241_3 = $conv240_3;
    var $mul242_3 = $conv241_3 * 65535;
    var $div244_3 = $mul242_3 / $conv243;
    var $conv245_3 = $div244_3;
    var $arrayidx246_3 = $scale_mul + 12 | 0;
    HEAPF32[$arrayidx246_3 >> 2] = $conv245_3;
    var $_b1 = HEAP8[5243532];
    if ($_b1) {
      label = 51;
      break;
    } else {
      label = 52;
      break;
    }
   case 51:
    var $57 = HEAP32[_stderr >> 2];
    var $call252 = _fprintf($57, 5577964, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $47, HEAP32[tempInt + 4 >> 2] = $48, tempInt));
    var $58 = HEAP32[_stderr >> 2];
    var $59 = HEAPF32[5245640 >> 2];
    var $conv258 = $59;
    var $call259 = _fprintf($58, 5577888, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAPF64[tempDoublePtr >> 3] = $conv258, HEAP32[tempInt >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[tempInt + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2], tempInt));
    var $60 = HEAP32[_stderr >> 2];
    var $61 = HEAPF32[5245644 >> 2];
    var $conv258_1 = $61;
    var $call259_1 = _fprintf($60, 5577888, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAPF64[tempDoublePtr >> 3] = $conv258_1, HEAP32[tempInt >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[tempInt + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2], tempInt));
    var $62 = HEAP32[_stderr >> 2];
    var $63 = HEAPF32[5245648 >> 2];
    var $conv258_2 = $63;
    var $call259_2 = _fprintf($62, 5577888, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAPF64[tempDoublePtr >> 3] = $conv258_2, HEAP32[tempInt >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[tempInt + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2], tempInt));
    var $64 = HEAP32[_stderr >> 2];
    var $65 = HEAPF32[5245652 >> 2];
    var $conv258_3 = $65;
    var $call259_3 = _fprintf($64, 5577888, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAPF64[tempDoublePtr >> 3] = $conv258_3, HEAP32[tempInt >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[tempInt + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2], tempInt));
    var $66 = HEAP32[_stderr >> 2];
    var $call263 = _fputc(10, $66);
    label = 52;
    break;
   case 52:
    var $67 = HEAP16[5264112 >> 1];
    var $conv265 = $67 & 65535;
    var $68 = HEAP16[5264092 >> 1];
    var $conv266 = $68 & 65535;
    var $mul267 = $conv266 * $conv265 & -1;
    var $mul269_mask = $mul267 & 1073741823;
    var $cmp270143 = ($mul269_mask | 0) == 0;
    if ($cmp270143) {
      label = 57;
      break;
    } else {
      label = 53;
      break;
    }
   case 53:
    var $69 = $mul267 << 2;
    var $_pre25 = HEAP32[5264108 >> 2];
    var $i_0144 = 0;
    label = 54;
    break;
   case 54:
    var $i_0144;
    var $arrayidx274 = $_pre25 + ($i_0144 << 1) | 0;
    var $70 = HEAP16[$arrayidx274 >> 1];
    var $tobool276 = $70 << 16 >> 16 == 0;
    if ($tobool276) {
      label = 56;
      break;
    } else {
      label = 55;
      break;
    }
   case 55:
    var $conv275 = $70 & 65535;
    var $and279 = $i_0144 & 3;
    var $arrayidx280 = 5560904 + ($and279 << 2) | 0;
    var $71 = HEAP32[$arrayidx280 >> 2];
    var $sub281 = $conv275 - $71 | 0;
    var $arrayidx283 = $scale_mul + ($and279 << 2) | 0;
    var $72 = HEAPF32[$arrayidx283 >> 2];
    var $conv284 = $sub281 | 0;
    var $mul285 = $72 * $conv284;
    var $conv286 = $mul285 & -1;
    var $cmp287 = ($conv286 | 0) < 65535;
    var $cond292 = $cmp287 ? $conv286 : 65535;
    var $cmp293 = ($cond292 | 0) < 0;
    var $phitmp = $cond292 & 65535;
    var $cond304 = $cmp293 ? 0 : $phitmp;
    HEAP16[$arrayidx274 >> 1] = $cond304;
    label = 56;
    break;
   case 56:
    var $inc309 = $i_0144 + 1 | 0;
    var $exitcond171 = ($inc309 | 0) == ($69 | 0);
    if ($exitcond171) {
      label = 57;
      break;
    } else {
      var $i_0144 = $inc309;
      label = 54;
      break;
    }
   case 57:
    var $73 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5573248 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5573252 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp311 = $73 != 1;
    var $74 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5573264 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5573268 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp314 = $74 != 1;
    var $or_cond3 = $cmp311 | $cmp314;
    var $75 = HEAP32[5560840 >> 2];
    var $cmp317 = ($75 | 0) == 3;
    var $or_cond4 = $or_cond3 & $cmp317;
    if ($or_cond4) {
      label = 58;
      break;
    } else {
      label = 76;
      break;
    }
   case 58:
    var $_b = HEAP8[5243532];
    if ($_b) {
      label = 59;
      break;
    } else {
      label = 60;
      break;
    }
   case 59:
    var $76 = HEAP32[_stderr >> 2];
    var $77 = _fwrite(5577788, 35, 1, $76);
    label = 60;
    break;
   case 60:
    var $mul333 = $mul267 << 1;
    var $cmp336128 = ($mul267 | 0) == 0;
    var $c_8140 = 0;
    label = 61;
    break;
   case 61:
    var $c_8140;
    var $arrayidx328 = 5573248 + ($c_8140 << 3) | 0;
    var $78 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx328 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx328 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp329 = $78 == 1;
    if ($cmp329) {
      label = 75;
      break;
    } else {
      label = 62;
      break;
    }
   case 62:
    var $call334 = _malloc($mul333);
    var $79 = $call334;
    _merror($call334, 5577660);
    if ($cmp336128) {
      label = 65;
      break;
    } else {
      label = 63;
      break;
    }
   case 63:
    var $_pre24 = HEAP32[5264108 >> 2];
    var $i_1129 = 0;
    label = 64;
    break;
   case 64:
    var $i_1129;
    var $arrayidx340 = $_pre24 + ($i_1129 << 3) + ($c_8140 << 1) | 0;
    var $80 = HEAP16[$arrayidx340 >> 1];
    var $arrayidx341 = $79 + ($i_1129 << 1) | 0;
    HEAP16[$arrayidx341 >> 1] = $80;
    var $inc343 = $i_1129 + 1 | 0;
    var $exitcond = ($inc343 | 0) == ($mul267 | 0);
    if ($exitcond) {
      label = 65;
      break;
    } else {
      var $i_1129 = $inc343;
      label = 64;
      break;
    }
   case 65:
    var $81 = HEAP16[5264112 >> 1];
    var $cmp347135 = $81 << 16 >> 16 == 0;
    if ($cmp347135) {
      label = 74;
      break;
    } else {
      label = 66;
      break;
    }
   case 66:
    var $conv346134 = $81 & 65535;
    var $_pre23 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx328 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx328 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $row_2136 = 0;
    label = 67;
    break;
   case 67:
    var $row_2136;
    var $conv350 = $row_2136 >>> 0;
    var $conv352 = $conv346134 | 0;
    var $mul353 = $conv352 * .5;
    var $sub354 = $conv350 - $mul353;
    var $mul356 = $sub354 * $_pre23;
    var $add360 = $mul353 + $mul356;
    var $conv361 = $add360;
    var $conv362 = $conv361 >= 0 ? Math.floor($conv361) : Math.ceil($conv361);
    var $sub364 = $conv346134 - 2 | 0;
    var $cmp365 = $conv362 >>> 0 > $sub364 >>> 0;
    if ($cmp365) {
      label = 73;
      break;
    } else {
      label = 68;
      break;
    }
   case 68:
    var $conv369 = $conv362 >>> 0;
    var $sub370 = $conv361 - $conv369;
    var $82 = HEAP16[5264092 >> 1];
    var $cmp373131 = $82 << 16 >> 16 == 0;
    if ($cmp373131) {
      label = 73;
      break;
    } else {
      label = 69;
      break;
    }
   case 69:
    var $conv372130 = $82 & 65535;
    var $sub410 = 1 - $sub370;
    var $col_2132 = 0;
    label = 70;
    break;
   case 70:
    var $col_2132;
    var $conv376 = $col_2132 >>> 0;
    var $conv378 = $conv372130 | 0;
    var $mul379 = $conv378 * .5;
    var $sub380 = $conv376 - $mul379;
    var $mul382 = $sub380 * $_pre23;
    var $add386 = $mul379 + $mul382;
    var $conv387 = $add386;
    var $conv388 = $conv387 >= 0 ? Math.floor($conv387) : Math.ceil($conv387);
    var $sub390 = $conv372130 - 2 | 0;
    var $cmp391 = $conv388 >>> 0 > $sub390 >>> 0;
    if ($cmp391) {
      label = 72;
      break;
    } else {
      label = 71;
      break;
    }
   case 71:
    var $conv395 = $conv388 >>> 0;
    var $sub396 = $conv387 - $conv395;
    var $mul398 = $conv372130 * $conv362 & -1;
    var $add_ptr_sum = $conv388 + $mul398 | 0;
    var $add_ptr399 = $79 + ($add_ptr_sum << 1) | 0;
    var $83 = HEAP16[$add_ptr399 >> 1];
    var $conv401 = $83 & 65535;
    var $conv402 = $conv401 | 0;
    var $sub403 = 1 - $sub396;
    var $mul404 = $sub403 * $conv402;
    var $add_ptr399_sum = $add_ptr_sum + 1 | 0;
    var $arrayidx405 = $79 + ($add_ptr399_sum << 1) | 0;
    var $84 = HEAP16[$arrayidx405 >> 1];
    var $conv406 = $84 & 65535;
    var $conv407 = $conv406 | 0;
    var $mul408 = $sub396 * $conv407;
    var $add409 = $mul404 + $mul408;
    var $mul411 = $sub410 * $add409;
    var $add_ptr399_sum123 = $add_ptr_sum + $conv372130 | 0;
    var $arrayidx412 = $79 + ($add_ptr399_sum123 << 1) | 0;
    var $85 = HEAP16[$arrayidx412 >> 1];
    var $conv413 = $85 & 65535;
    var $conv414 = $conv413 | 0;
    var $mul416 = $sub403 * $conv414;
    var $add418 = $conv372130 + 1 | 0;
    var $add_ptr399_sum124 = $add418 + $add_ptr_sum | 0;
    var $arrayidx419 = $79 + ($add_ptr399_sum124 << 1) | 0;
    var $86 = HEAP16[$arrayidx419 >> 1];
    var $conv420 = $86 & 65535;
    var $conv421 = $conv420 | 0;
    var $mul422 = $sub396 * $conv421;
    var $add423 = $mul416 + $mul422;
    var $mul424 = $sub370 * $add423;
    var $add425 = $mul411 + $mul424;
    var $conv426 = $add425 >= 0 ? Math.floor($add425) : Math.ceil($add425);
    var $mul428 = $conv372130 * $row_2136 & -1;
    var $add429 = $mul428 + $col_2132 | 0;
    var $87 = HEAP32[5264108 >> 2];
    var $arrayidx431 = $87 + ($add429 << 3) + ($c_8140 << 1) | 0;
    HEAP16[$arrayidx431 >> 1] = $conv426;
    label = 72;
    break;
   case 72:
    var $inc433 = $col_2132 + 1 | 0;
    var $cmp373 = $inc433 >>> 0 < $conv372130 >>> 0;
    if ($cmp373) {
      var $col_2132 = $inc433;
      label = 70;
      break;
    } else {
      label = 73;
      break;
    }
   case 73:
    var $inc436 = $row_2136 + 1 | 0;
    var $cmp347 = $inc436 >>> 0 < $conv346134 >>> 0;
    if ($cmp347) {
      var $row_2136 = $inc436;
      label = 67;
      break;
    } else {
      label = 74;
      break;
    }
   case 74:
    _free($call334);
    label = 75;
    break;
   case 75:
    var $add439 = $c_8140 + 2 | 0;
    var $cmp325 = $add439 >>> 0 < 4;
    if ($cmp325) {
      var $c_8140 = $add439;
      label = 61;
      break;
    } else {
      label = 76;
      break;
    }
   case 76:
    STACKTOP = __stackBase__;
    return;
   case 77:
    var $div_1 = $dsum_sroa_5_437 / $dsum_sroa_1_440;
    var $conv112_1 = $div_1;
    HEAPF32[5245644 >> 2] = $conv112_1;
    var $dsum_sroa_2_43942 = $dsum_sroa_2_439;
    var $dsum_sroa_3_43843 = $dsum_sroa_3_438;
    var $dsum_sroa_6_43644 = $dsum_sroa_6_436;
    var $dsum_sroa_7_43545 = $dsum_sroa_7_435;
    label = 78;
    break;
   case 78:
    var $dsum_sroa_7_43545;
    var $dsum_sroa_6_43644;
    var $dsum_sroa_3_43843;
    var $dsum_sroa_2_43942;
    var $tobool107_2 = $dsum_sroa_2_43942 != 0;
    if ($tobool107_2) {
      label = 79;
      break;
    } else {
      label = 80;
      break;
    }
   case 79:
    var $div_2 = $dsum_sroa_6_43644 / $dsum_sroa_2_43942;
    var $conv112_2 = $div_2;
    HEAPF32[5245648 >> 2] = $conv112_2;
    label = 80;
    break;
   case 80:
    var $tobool107_3 = $dsum_sroa_3_43843 != 0;
    if ($tobool107_3) {
      label = 81;
      break;
    } else {
      label = 30;
      break;
    }
   case 81:
    var $div_3 = $dsum_sroa_7_43545 / $dsum_sroa_3_43843;
    var $conv112_3 = $div_3;
    HEAPF32[5245652 >> 2] = $conv112_3;
    label = 30;
    break;
  }
}
_scale_colors["X"] = 1;
function _pre_interpolate() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP16[5244916 >> 1];
    var $tobool = $0 << 16 >> 16 == 0;
    if ($tobool) {
      label = 12;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $_b1 = HEAP8[5398716];
    if ($_b1) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    var $1 = HEAP16[5264112 >> 1];
    HEAP16[5398712 >> 1] = $1;
    var $2 = HEAP16[5264092 >> 1];
    HEAP16[5242964 >> 1] = $2;
    label = 12;
    break;
   case 5:
    var $3 = HEAP16[5398712 >> 1];
    var $conv = $3 & 65535;
    var $4 = HEAP16[5242964 >> 1];
    var $conv3 = $4 & 65535;
    var $mul = $conv3 * $conv & -1;
    var $call = _calloc($mul, 8);
    var $5 = $call;
    _merror($call, 5577548);
    var $6 = HEAP16[5398712 >> 1];
    var $cmp33 = $6 << 16 >> 16 == 0;
    if ($cmp33) {
      label = 11;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $_pre4 = HEAP16[5242964 >> 1];
    var $row_034 = 0;
    var $7 = $_pre4;
    label = 7;
    break;
   case 7:
    var $7;
    var $row_034;
    var $cmp829 = $7 << 16 >> 16 == 0;
    if ($cmp829) {
      var $9 = 0;
      label = 10;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $conv728 = $7 & 65535;
    var $shr = $row_034 >> 1;
    var $_pre5 = HEAP16[5264092 >> 1];
    var $_pre6 = HEAP32[5264108 >> 2];
    var $col_030 = 0;
    var $conv731 = $conv728;
    label = 9;
    break;
   case 9:
    var $conv731;
    var $col_030;
    var $call11 = _fcol($row_034, $col_030);
    var $conv12 = $_pre5 & 65535;
    var $mul13 = $conv12 * $shr & -1;
    var $shr14 = $col_030 >> 1;
    var $add = $mul13 + $shr14 | 0;
    var $arrayidx15 = $_pre6 + ($add << 3) + ($call11 << 1) | 0;
    var $8 = HEAP16[$arrayidx15 >> 1];
    var $mul17 = $conv731 * $row_034 & -1;
    var $add18 = $mul17 + $col_030 | 0;
    var $arrayidx20 = $5 + ($add18 << 3) + ($call11 << 1) | 0;
    HEAP16[$arrayidx20 >> 1] = $8;
    var $inc = $col_030 + 1 | 0;
    var $conv7 = $_pre4 & 65535;
    var $cmp8 = ($inc | 0) < ($conv7 | 0);
    if ($cmp8) {
      var $col_030 = $inc;
      var $conv731 = $conv7;
      label = 9;
      break;
    } else {
      var $9 = $_pre4;
      label = 10;
      break;
    }
   case 10:
    var $9;
    var $inc22 = $row_034 + 1 | 0;
    var $conv4 = $6 & 65535;
    var $cmp = ($inc22 | 0) < ($conv4 | 0);
    if ($cmp) {
      var $row_034 = $inc22;
      var $7 = $9;
      label = 7;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $10 = HEAP32[5264108 >> 2];
    var $11 = $10;
    _free($11);
    HEAP32[5264108 >> 2] = $5;
    HEAP16[5244916 >> 1] = 0;
    label = 12;
    break;
   case 12:
    var $12 = HEAP32[5427632 >> 2];
    var $cmp25 = $12 >>> 0 > 1e3;
    var $13 = HEAP32[5560840 >> 2];
    var $cmp27 = ($13 | 0) == 3;
    var $or_cond = $cmp25 & $cmp27;
    if ($or_cond) {
      label = 13;
      break;
    } else {
      label = 22;
      break;
    }
   case 13:
    var $_b2 = HEAP8[5403040];
    if ($_b2) {
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 14:
    HEAP32[5560840 >> 2] = 4;
    var $_b = HEAP8[5398716];
    var $14 = $_b & 1;
    var $lnot_ext = $14 ^ 1;
    HEAP32[5263436 >> 2] = $lnot_ext;
    var $17 = $14;
    label = 23;
    break;
   case 15:
    var $shr37 = $12 >>> 5;
    var $and = $shr37 & 1;
    var $15 = HEAP16[5398712 >> 1];
    var $conv4024 = $15 & 65535;
    var $cmp4125 = $and >>> 0 < $conv4024 >>> 0;
    if ($cmp4125) {
      label = 16;
      break;
    } else {
      label = 21;
      break;
    }
   case 16:
    var $_pre = HEAP16[5242964 >> 1];
    var $row_126 = $and;
    label = 17;
    break;
   case 17:
    var $row_126;
    var $shl = $row_126 << 2;
    var $and44 = $shl & 28;
    var $add4519 = $and44 | 2;
    var $shr47 = $12 >>> ($add4519 >>> 0);
    var $and49 = $shr47 & 1;
    var $conv5120 = $_pre & 65535;
    var $cmp5221 = $and49 >>> 0 < $conv5120 >>> 0;
    if ($cmp5221) {
      label = 18;
      break;
    } else {
      label = 20;
      break;
    }
   case 18:
    var $_pre3 = HEAP32[5264108 >> 2];
    var $col_122 = $and49;
    label = 19;
    break;
   case 19:
    var $col_122;
    var $mul56 = $conv5120 * $row_126 & -1;
    var $add57 = $mul56 + $col_122 | 0;
    var $arrayidx59 = $_pre3 + ($add57 << 3) + 6 | 0;
    var $16 = HEAP16[$arrayidx59 >> 1];
    var $arrayidx64 = $_pre3 + ($add57 << 3) + 2 | 0;
    HEAP16[$arrayidx64 >> 1] = $16;
    var $add66 = $col_122 + 2 | 0;
    var $cmp52 = ($add66 | 0) < ($conv5120 | 0);
    if ($cmp52) {
      var $col_122 = $add66;
      label = 19;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    var $add69 = $row_126 + 2 | 0;
    var $cmp41 = ($add69 | 0) < ($conv4024 | 0);
    if ($cmp41) {
      var $row_126 = $add69;
      label = 17;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    var $and71 = $12 << 1;
    var $and71_not = $and71 | 1431655765;
    var $neg = $and71_not ^ -1431655766;
    var $and73 = $neg & $12;
    HEAP32[5427632 >> 2] = $and73;
    label = 22;
    break;
   case 22:
    var $_pr_b = HEAP8[5398716];
    var $_pr = $_pr_b & 1;
    var $17 = $_pr;
    label = 23;
    break;
   case 23:
    var $17;
    var $tobool76 = ($17 | 0) == 0;
    if ($tobool76) {
      label = 25;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    HEAP32[5427632 >> 2] = 0;
    label = 25;
    break;
   case 25:
    return;
  }
}
_pre_interpolate["X"] = 1;
function _border_interpolate($border) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $sum = __stackBase__;
    var $0 = HEAP16[5398712 >> 1];
    var $cmp42 = $0 << 16 >> 16 == 0;
    if ($cmp42) {
      label = 20;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $1 = $sum;
    var $_pre = HEAP16[5242964 >> 1];
    var $row_043 = 0;
    var $2 = $_pre;
    label = 4;
    break;
   case 4:
    var $2;
    var $row_043;
    var $cmp438 = $2 << 16 >> 16 == 0;
    if ($cmp438) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    var $conv_pre = $0 & 65535;
    var $10 = 0;
    var $conv_pre_phi = $conv_pre;
    label = 19;
    break;
   case 6:
    var $conv337 = $2 & 65535;
    var $cmp9 = $row_043 >>> 0 < $border >>> 0;
    var $sub17 = $row_043 - 1 | 0;
    var $add = $row_043 + 2 | 0;
    var $col_039 = 0;
    var $conv340 = $conv337;
    label = 7;
    break;
   case 7:
    var $conv340;
    var $col_039;
    var $cmp7 = ($col_039 | 0) != ($border | 0);
    var $or_cond = $cmp7 | $cmp9;
    var $conv28_pre = $0 & 65535;
    if ($or_cond) {
      var $col_1 = $col_039;
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $sub = $conv28_pre - $border | 0;
    var $cmp13 = $row_043 >>> 0 < $sub >>> 0;
    var $sub16 = $conv340 - $border | 0;
    var $sub16_col_0 = $cmp13 ? $sub16 : $border;
    var $col_1 = $sub16_col_0;
    label = 9;
    break;
   case 9:
    var $col_1;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 0;
    HEAP32[$1 + 8 >> 2] = 0;
    HEAP32[$1 + 12 >> 2] = 0;
    HEAP32[$1 + 16 >> 2] = 0;
    HEAP32[$1 + 20 >> 2] = 0;
    HEAP32[$1 + 24 >> 2] = 0;
    HEAP32[$1 + 28 >> 2] = 0;
    var $sub22 = $col_1 - 1 | 0;
    var $conv32 = $_pre & 65535;
    var $3 = HEAP32[5264108 >> 2];
    var $cmp33 = $sub22 >>> 0 < $conv32 >>> 0;
    var $cmp33_1 = $col_1 >>> 0 < $conv32 >>> 0;
    var $inc45_147 = $col_1 + 1 | 0;
    var $cmp33_2 = $inc45_147 >>> 0 < $conv32 >>> 0;
    var $y_034 = $sub17;
    label = 10;
    break;
   case 10:
    var $y_034;
    var $cmp29 = $y_034 >>> 0 < $conv28_pre >>> 0;
    var $mul = $conv32 * $y_034 & -1;
    if ($cmp29) {
      label = 11;
      break;
    } else {
      label = 25;
      break;
    }
   case 11:
    if ($cmp33) {
      label = 12;
      break;
    } else {
      label = 21;
      break;
    }
   case 12:
    var $call = _fcol($y_034, $sub22);
    var $add37 = $mul + $sub22 | 0;
    var $arrayidx38 = $3 + ($add37 << 3) + ($call << 1) | 0;
    var $4 = HEAP16[$arrayidx38 >> 1];
    var $conv39 = $4 & 65535;
    var $arrayidx40 = $sum + ($call << 2) | 0;
    var $5 = HEAP32[$arrayidx40 >> 2];
    var $add41 = $5 + $conv39 | 0;
    HEAP32[$arrayidx40 >> 2] = $add41;
    var $add42 = $call + 4 | 0;
    var $arrayidx43 = $sum + ($add42 << 2) | 0;
    var $6 = HEAP32[$arrayidx43 >> 2];
    var $inc = $6 + 1 | 0;
    HEAP32[$arrayidx43 >> 2] = $inc;
    label = 21;
    break;
   case 13:
    var $call49 = _fcol($row_043, $col_1);
    var $7 = HEAP32[5560840 >> 2];
    var $cmp5135 = ($7 | 0) == 0;
    if ($cmp5135) {
      label = 18;
      break;
    } else {
      var $c_036 = 0;
      label = 14;
      break;
    }
   case 14:
    var $c_036;
    var $cmp54 = ($c_036 | 0) == ($call49 | 0);
    if ($cmp54) {
      label = 17;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $add57 = $c_036 + 4 | 0;
    var $arrayidx58 = $sum + ($add57 << 2) | 0;
    var $8 = HEAP32[$arrayidx58 >> 2];
    var $tobool = ($8 | 0) == 0;
    if ($tobool) {
      label = 17;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $arrayidx60 = $sum + ($c_036 << 2) | 0;
    var $9 = HEAP32[$arrayidx60 >> 2];
    var $div = Math.floor(($9 >>> 0) / ($8 >>> 0));
    var $conv63 = $div & 65535;
    var $mul65 = $conv32 * $row_043 & -1;
    var $add66 = $mul65 + $col_1 | 0;
    var $arrayidx68 = $3 + ($add66 << 3) + ($c_036 << 1) | 0;
    HEAP16[$arrayidx68 >> 1] = $conv63;
    label = 17;
    break;
   case 17:
    var $inc71 = $c_036 + 1 | 0;
    var $cmp51 = $inc71 >>> 0 < $7 >>> 0;
    if ($cmp51) {
      var $c_036 = $inc71;
      label = 14;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    if ($cmp33_2) {
      var $col_039 = $inc45_147;
      var $conv340 = $conv32;
      label = 7;
      break;
    } else {
      var $10 = $_pre;
      var $conv_pre_phi = $conv28_pre;
      label = 19;
      break;
    }
   case 19:
    var $conv_pre_phi;
    var $10;
    var $inc77 = $row_043 + 1 | 0;
    var $cmp = $inc77 >>> 0 < $conv_pre_phi >>> 0;
    if ($cmp) {
      var $row_043 = $inc77;
      var $2 = $10;
      label = 4;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    STACKTOP = __stackBase__;
    return;
   case 21:
    if ($cmp33_1) {
      label = 22;
      break;
    } else {
      label = 23;
      break;
    }
   case 22:
    var $call_1 = _fcol($y_034, $col_1);
    var $add37_1 = $mul + $col_1 | 0;
    var $arrayidx38_1 = $3 + ($add37_1 << 3) + ($call_1 << 1) | 0;
    var $11 = HEAP16[$arrayidx38_1 >> 1];
    var $conv39_1 = $11 & 65535;
    var $arrayidx40_1 = $sum + ($call_1 << 2) | 0;
    var $12 = HEAP32[$arrayidx40_1 >> 2];
    var $add41_1 = $12 + $conv39_1 | 0;
    HEAP32[$arrayidx40_1 >> 2] = $add41_1;
    var $add42_1 = $call_1 + 4 | 0;
    var $arrayidx43_1 = $sum + ($add42_1 << 2) | 0;
    var $13 = HEAP32[$arrayidx43_1 >> 2];
    var $inc_1 = $13 + 1 | 0;
    HEAP32[$arrayidx43_1 >> 2] = $inc_1;
    label = 23;
    break;
   case 23:
    if ($cmp33_2) {
      label = 24;
      break;
    } else {
      label = 25;
      break;
    }
   case 24:
    var $call_2 = _fcol($y_034, $inc45_147);
    var $add37_2 = $mul + $inc45_147 | 0;
    var $arrayidx38_2 = $3 + ($add37_2 << 3) + ($call_2 << 1) | 0;
    var $14 = HEAP16[$arrayidx38_2 >> 1];
    var $conv39_2 = $14 & 65535;
    var $arrayidx40_2 = $sum + ($call_2 << 2) | 0;
    var $15 = HEAP32[$arrayidx40_2 >> 2];
    var $add41_2 = $15 + $conv39_2 | 0;
    HEAP32[$arrayidx40_2 >> 2] = $add41_2;
    var $add42_2 = $call_2 + 4 | 0;
    var $arrayidx43_2 = $sum + ($add42_2 << 2) | 0;
    var $16 = HEAP32[$arrayidx43_2 >> 2];
    var $inc_2 = $16 + 1 | 0;
    HEAP32[$arrayidx43_2 >> 2] = $inc_2;
    label = 25;
    break;
   case 25:
    var $inc47 = $y_034 + 1 | 0;
    var $cmp19 = ($inc47 | 0) == ($add | 0);
    if ($cmp19) {
      label = 13;
      break;
    } else {
      var $y_034 = $inc47;
      label = 10;
      break;
    }
  }
}
_border_interpolate["X"] = 1;
function _lin_interpolate() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 32784 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $code = __stackBase__;
    var $sum = __stackBase__ + 32768;
    var $_b = HEAP8[5243532];
    if ($_b) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    var $0 = HEAP32[_stderr >> 2];
    var $1 = _fwrite(5577440, 26, 1, $0);
    label = 4;
    break;
   case 4:
    var $2 = HEAP32[5427632 >> 2];
    var $cmp = ($2 | 0) == 2;
    var $_ = $cmp ? 6 : 16;
    _border_interpolate(1);
    var $3 = $sum;
    var $row_081 = 0;
    label = 5;
    break;
   case 5:
    var $row_081;
    var $col_080 = 0;
    label = 8;
    break;
   case 6:
    var $4 = HEAP16[5398712 >> 1];
    var $conv6468 = $4 & 65535;
    var $sub69 = $conv6468 - 1 | 0;
    var $cmp6570 = ($sub69 | 0) > 1;
    if ($cmp6570) {
      label = 7;
      break;
    } else {
      label = 28;
      break;
    }
   case 7:
    var $_pre = HEAP16[5242964 >> 1];
    var $row_171 = 1;
    label = 18;
    break;
   case 8:
    var $col_080;
    var $add_ptr = $code + ($row_081 << 11) + ($col_080 << 7) + 4 | 0;
    var $call8 = _fcol($row_081, $col_080);
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    HEAP32[$3 + 12 >> 2] = 0;
    var $add19 = $col_080 - 1 | 0;
    var $add19_2 = $col_080 + 1 | 0;
    var $y_075 = -1;
    var $ip_076 = $add_ptr;
    label = 9;
    break;
   case 9:
    var $ip_076;
    var $y_075;
    var $cmp15 = ($y_075 | 0) == 0;
    var $conv = $cmp15 & 1;
    var $add18 = $y_075 + $row_081 | 0;
    var $call20 = _fcol($add18, $add19);
    var $cmp21 = ($call20 | 0) == ($call8 | 0);
    if ($cmp21) {
      var $ip_2 = $ip_076;
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $5 = HEAP16[5242964 >> 1];
    var $conv25 = $5 & 65535;
    var $mul = $conv25 * $y_075 & -1;
    var $add26 = $mul << 2;
    var $mul27 = $add26 - 4 | 0;
    var $add28 = $mul27 + $call20 | 0;
    var $incdec_ptr = $ip_076 + 4 | 0;
    HEAP32[$ip_076 >> 2] = $add28;
    var $incdec_ptr29 = $ip_076 + 8 | 0;
    HEAP32[$incdec_ptr >> 2] = $conv;
    var $incdec_ptr30 = $ip_076 + 12 | 0;
    HEAP32[$incdec_ptr29 >> 2] = $call20;
    var $shl = 1 << $conv;
    var $arrayidx31 = $sum + ($call20 << 2) | 0;
    var $6 = HEAP32[$arrayidx31 >> 2];
    var $add32 = $6 + $shl | 0;
    HEAP32[$arrayidx31 >> 2] = $add32;
    var $ip_2 = $incdec_ptr30;
    label = 11;
    break;
   case 11:
    var $ip_2;
    var $add_1 = $cmp15 ? 2 : 1;
    var $call20_1 = _fcol($add18, $col_080);
    var $cmp21_1 = ($call20_1 | 0) == ($call8 | 0);
    if ($cmp21_1) {
      var $ip_2_1 = $ip_2;
      label = 30;
      break;
    } else {
      label = 29;
      break;
    }
   case 12:
    var $arraydecay = $code + ($row_081 << 11) + ($col_080 << 7) | 0;
    var $sub_ptr_lhs_cast = $ip_2_2;
    var $sub_ptr_rhs_cast = $arraydecay;
    var $sub_ptr_sub = $sub_ptr_lhs_cast - $sub_ptr_rhs_cast | 0;
    var $sub_ptr_div = $sub_ptr_sub >> 2;
    var $div = ($sub_ptr_div | 0) / 3 & -1;
    HEAP32[$arraydecay >> 2] = $div;
    var $7 = HEAP32[5560840 >> 2];
    var $cmp4377 = ($7 | 0) > 0;
    if ($cmp4377) {
      var $c_078 = 0;
      var $ip_379 = $ip_2_2;
      label = 13;
      break;
    } else {
      label = 16;
      break;
    }
   case 13:
    var $ip_379;
    var $c_078;
    var $cmp46 = ($c_078 | 0) == ($call8 | 0);
    if ($cmp46) {
      var $ip_4 = $ip_379;
      label = 15;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $incdec_ptr49 = $ip_379 + 4 | 0;
    HEAP32[$ip_379 >> 2] = $c_078;
    var $arrayidx50 = $sum + ($c_078 << 2) | 0;
    var $8 = HEAP32[$arrayidx50 >> 2];
    var $div51 = 256 / ($8 | 0) & -1;
    var $incdec_ptr52 = $ip_379 + 8 | 0;
    HEAP32[$incdec_ptr49 >> 2] = $div51;
    var $ip_4 = $incdec_ptr52;
    label = 15;
    break;
   case 15:
    var $ip_4;
    var $inc55 = $c_078 + 1 | 0;
    var $cmp43 = ($inc55 | 0) < ($7 | 0);
    if ($cmp43) {
      var $c_078 = $inc55;
      var $ip_379 = $ip_4;
      label = 13;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $cmp5 = ($add19_2 | 0) < ($_ | 0);
    if ($cmp5) {
      var $col_080 = $add19_2;
      label = 8;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    var $inc61 = $row_081 + 1 | 0;
    var $cmp3 = ($inc61 | 0) < ($_ | 0);
    if ($cmp3) {
      var $row_081 = $inc61;
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 18:
    var $row_171;
    var $conv6963 = $_pre & 65535;
    var $sub7064 = $conv6963 - 1 | 0;
    var $cmp7165 = ($sub7064 | 0) > 1;
    if ($cmp7165) {
      label = 19;
      break;
    } else {
      label = 27;
      break;
    }
   case 19:
    var $rem79 = ($row_171 | 0) % ($_ | 0);
    var $9 = $rem79 << 9;
    var $scevgep_sum84 = $9 | 1;
    var $_pre1 = HEAP32[5264108 >> 2];
    var $col_166 = 1;
    label = 20;
    break;
   case 20:
    var $col_166;
    var $mul75 = $conv6963 * $row_171 & -1;
    var $add76 = $mul75 + $col_166 | 0;
    var $rem = ($col_166 | 0) % ($_ | 0);
    var $arraydecay82 = $code + ($rem79 << 11) + ($rem << 7) | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    HEAP32[$3 + 12 >> 2] = 0;
    var $incdec_ptr83 = $code + ($rem79 << 11) + ($rem << 7) + 4 | 0;
    var $10 = HEAP32[$arraydecay82 >> 2];
    var $tobool8556 = ($10 | 0) == 0;
    if ($tobool8556) {
      var $ip_5_lcssa = $incdec_ptr83;
      label = 24;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    var $11 = $rem << 5;
    var $12 = $10 * 3 & -1;
    var $13 = $11 + $12 | 0;
    var $i_057 = $10;
    var $ip_558 = $incdec_ptr83;
    label = 22;
    break;
   case 22:
    var $ip_558;
    var $i_057;
    var $dec = $i_057 - 1 | 0;
    var $14 = HEAP32[$ip_558 >> 2];
    var $arrayidx88 = $_pre1 + ($add76 << 3) + ($14 << 1) | 0;
    var $15 = HEAP16[$arrayidx88 >> 1];
    var $conv89 = $15 & 65535;
    var $arrayidx90 = $ip_558 + 4 | 0;
    var $16 = HEAP32[$arrayidx90 >> 2];
    var $shl91 = $conv89 << $16;
    var $arrayidx92 = $ip_558 + 8 | 0;
    var $17 = HEAP32[$arrayidx92 >> 2];
    var $arrayidx93 = $sum + ($17 << 2) | 0;
    var $18 = HEAP32[$arrayidx93 >> 2];
    var $add94 = $18 + $shl91 | 0;
    HEAP32[$arrayidx93 >> 2] = $add94;
    var $add_ptr96 = $ip_558 + 12 | 0;
    var $tobool85 = ($dec | 0) == 0;
    if ($tobool85) {
      label = 23;
      break;
    } else {
      var $i_057 = $dec;
      var $ip_558 = $add_ptr96;
      label = 22;
      break;
    }
   case 23:
    var $scevgep82_sum = $scevgep_sum84 + $13 | 0;
    var $scevgep83 = $code + ($scevgep82_sum << 2) | 0;
    var $ip_5_lcssa = $scevgep83;
    label = 24;
    break;
   case 24:
    var $ip_5_lcssa;
    var $dec9959 = $7 - 1 | 0;
    var $tobool10060 = ($dec9959 | 0) == 0;
    if ($tobool10060) {
      label = 26;
      break;
    } else {
      var $ip_661 = $ip_5_lcssa;
      var $dec9962 = $dec9959;
      label = 25;
      break;
    }
   case 25:
    var $dec9962;
    var $ip_661;
    var $19 = HEAP32[$ip_661 >> 2];
    var $arrayidx103 = $sum + ($19 << 2) | 0;
    var $20 = HEAP32[$arrayidx103 >> 2];
    var $arrayidx104 = $ip_661 + 4 | 0;
    var $21 = HEAP32[$arrayidx104 >> 2];
    var $mul105 = $21 * $20 & -1;
    var $shr55 = $mul105 >>> 8;
    var $conv106 = $shr55 & 65535;
    var $arrayidx108 = $_pre1 + ($add76 << 3) + ($19 << 1) | 0;
    HEAP16[$arrayidx108 >> 1] = $conv106;
    var $add_ptr110 = $ip_661 + 8 | 0;
    var $dec99 = $dec9962 - 1 | 0;
    var $tobool100 = ($dec99 | 0) == 0;
    if ($tobool100) {
      label = 26;
      break;
    } else {
      var $ip_661 = $add_ptr110;
      var $dec9962 = $dec99;
      label = 25;
      break;
    }
   case 26:
    var $inc113 = $col_166 + 1 | 0;
    var $cmp71 = ($inc113 | 0) < ($sub7064 | 0);
    if ($cmp71) {
      var $col_166 = $inc113;
      label = 20;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    var $inc116 = $row_171 + 1 | 0;
    var $cmp65 = ($inc116 | 0) < ($sub69 | 0);
    if ($cmp65) {
      var $row_171 = $inc116;
      label = 18;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    STACKTOP = __stackBase__;
    return;
   case 29:
    var $22 = HEAP16[5242964 >> 1];
    var $conv25_1 = $22 & 65535;
    var $mul_1 = $conv25_1 * $y_075 & -1;
    var $mul27_1 = $mul_1 << 2;
    var $add28_1 = $mul27_1 + $call20_1 | 0;
    var $incdec_ptr_1 = $ip_2 + 4 | 0;
    HEAP32[$ip_2 >> 2] = $add28_1;
    var $incdec_ptr29_1 = $ip_2 + 8 | 0;
    HEAP32[$incdec_ptr_1 >> 2] = $add_1;
    var $incdec_ptr30_1 = $ip_2 + 12 | 0;
    HEAP32[$incdec_ptr29_1 >> 2] = $call20_1;
    var $shl_1 = 1 << $add_1;
    var $arrayidx31_1 = $sum + ($call20_1 << 2) | 0;
    var $23 = HEAP32[$arrayidx31_1 >> 2];
    var $add32_1 = $23 + $shl_1 | 0;
    HEAP32[$arrayidx31_1 >> 2] = $add32_1;
    var $ip_2_1 = $incdec_ptr30_1;
    label = 30;
    break;
   case 30:
    var $ip_2_1;
    var $call20_2 = _fcol($add18, $add19_2);
    var $cmp21_2 = ($call20_2 | 0) == ($call8 | 0);
    if ($cmp21_2) {
      var $ip_2_2 = $ip_2_1;
      label = 32;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    var $24 = HEAP16[5242964 >> 1];
    var $conv25_2 = $24 & 65535;
    var $mul_2 = $conv25_2 * $y_075 & -1;
    var $add26_2 = $mul_2 << 2;
    var $mul27_2 = $add26_2 + 4 | 0;
    var $add28_2 = $mul27_2 + $call20_2 | 0;
    var $incdec_ptr_2 = $ip_2_1 + 4 | 0;
    HEAP32[$ip_2_1 >> 2] = $add28_2;
    var $incdec_ptr29_2 = $ip_2_1 + 8 | 0;
    HEAP32[$incdec_ptr_2 >> 2] = $conv;
    var $incdec_ptr30_2 = $ip_2_1 + 12 | 0;
    HEAP32[$incdec_ptr29_2 >> 2] = $call20_2;
    var $shl_2 = 1 << $conv;
    var $arrayidx31_2 = $sum + ($call20_2 << 2) | 0;
    var $25 = HEAP32[$arrayidx31_2 >> 2];
    var $add32_2 = $25 + $shl_2 | 0;
    HEAP32[$arrayidx31_2 >> 2] = $add32_2;
    var $ip_2_2 = $incdec_ptr30_2;
    label = 32;
    break;
   case 32:
    var $ip_2_2;
    var $inc34 = $y_075 + 1 | 0;
    var $exitcond = ($inc34 | 0) == 2;
    if ($exitcond) {
      label = 12;
      break;
    } else {
      var $y_075 = $inc34;
      var $ip_076 = $ip_2_2;
      label = 9;
      break;
    }
  }
}
_lin_interpolate["X"] = 1;
function _vng_interpolate() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 1072 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $code = __stackBase__;
    var $gval = __stackBase__ + 1024;
    var $sum = __stackBase__ + 1056;
    _lin_interpolate();
    var $_b = HEAP8[5243532];
    if ($_b) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    var $0 = HEAP32[_stderr >> 2];
    var $1 = _fwrite(5577336, 21, 1, $0);
    label = 4;
    break;
   case 4:
    var $2 = HEAP32[5427632 >> 2];
    var $cmp = ($2 | 0) == 1;
    var $_ = $cmp ? 16 : 2;
    var $_149 = $cmp ? 16 : 8;
    var $cmp3 = ($2 | 0) == 2;
    var $pcol_1 = $cmp3 ? 6 : $_;
    var $prow_1 = $cmp3 ? 6 : $_149;
    var $mul = $prow_1 * $pcol_1 & -1;
    var $call6 = _calloc($mul, 1280);
    var $3 = $call6;
    _merror($call6, 5577240);
    var $row_0195 = 0;
    var $ip_0196 = $3;
    label = 5;
    break;
   case 5:
    var $ip_0196;
    var $row_0195;
    var $add38 = $row_0195 + 1 | 0;
    var $col_0193 = 0;
    var $ip_1194 = $ip_0196;
    label = 6;
    break;
   case 6:
    var $ip_1194;
    var $col_0193;
    var $arrayidx11 = $code + ($row_0195 << 6) + ($col_0193 << 2) | 0;
    HEAP32[$arrayidx11 >> 2] = $ip_1194;
    HEAP32[5243512 >> 2] = 5243128;
    var $add34 = $col_0193 + 1 | 0;
    var $t_0189 = 0;
    var $ip_2190 = $ip_1194;
    var $4 = 5243128;
    label = 7;
    break;
   case 7:
    var $4;
    var $ip_2190;
    var $t_0189;
    var $incdec_ptr = $4 + 1 | 0;
    var $5 = HEAP8[$4];
    var $conv = $5 << 24 >> 24;
    var $incdec_ptr15 = $4 + 2 | 0;
    var $6 = HEAP8[$incdec_ptr];
    var $conv16 = $6 << 24 >> 24;
    var $incdec_ptr17 = $4 + 3 | 0;
    var $7 = HEAP8[$incdec_ptr15];
    var $conv18 = $7 << 24 >> 24;
    var $incdec_ptr19 = $4 + 4 | 0;
    var $8 = HEAP8[$incdec_ptr17];
    var $conv20 = $8 << 24 >> 24;
    var $incdec_ptr21 = $4 + 5 | 0;
    var $9 = HEAP8[$incdec_ptr19];
    var $conv22 = $9 << 24 >> 24;
    var $incdec_ptr23 = $4 + 6 | 0;
    HEAP32[5243512 >> 2] = $incdec_ptr23;
    var $10 = HEAP8[$incdec_ptr21];
    var $conv24 = $10 << 24 >> 24;
    var $add = $conv + $row_0195 | 0;
    var $add25 = $conv16 + $col_0193 | 0;
    var $call26 = _fcol($add, $add25);
    var $add27 = $conv18 + $row_0195 | 0;
    var $add28 = $conv20 + $col_0193 | 0;
    var $call29 = _fcol($add27, $add28);
    var $cmp30 = ($call29 | 0) == ($call26 | 0);
    if ($cmp30) {
      label = 8;
      break;
    } else {
      var $ip_5 = $ip_2190;
      label = 15;
      break;
    }
   case 8:
    var $call35 = _fcol($row_0195, $add34);
    var $cmp36 = ($call35 | 0) == ($call26 | 0);
    if ($cmp36) {
      label = 9;
      break;
    } else {
      var $11 = 1;
      label = 10;
      break;
    }
   case 9:
    var $call39 = _fcol($add38, $col_0193);
    var $cmp40 = ($call39 | 0) == ($call26 | 0);
    var $phitmp148 = $cmp40 ? 2 : 1;
    var $11 = $phitmp148;
    label = 10;
    break;
   case 10:
    var $11;
    var $sub = $conv - $conv18 | 0;
    var $ispos = ($sub | 0) > -1;
    var $neg = -$sub | 0;
    var $call42 = $ispos ? $sub : $neg;
    var $cmp43 = ($call42 | 0) == ($11 | 0);
    if ($cmp43) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    var $sub45 = $conv16 - $conv20 | 0;
    var $ispos150 = ($sub45 | 0) > -1;
    var $neg151 = -$sub45 | 0;
    var $call46 = $ispos150 ? $sub45 : $neg151;
    var $cmp47 = ($call46 | 0) == ($11 | 0);
    if ($cmp47) {
      var $ip_5 = $ip_2190;
      label = 15;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $12 = HEAP16[5242964 >> 1];
    var $conv51 = $12 & 65535;
    var $mul52 = $conv51 * $conv & -1;
    var $add53 = $mul52 + $conv16 | 0;
    var $mul54 = $add53 << 2;
    var $add55 = $mul54 + $call26 | 0;
    var $incdec_ptr56 = $ip_2190 + 4 | 0;
    HEAP32[$ip_2190 >> 2] = $add55;
    var $mul58 = $conv51 * $conv18 & -1;
    var $add59 = $mul58 + $conv20 | 0;
    var $mul60 = $add59 << 2;
    var $add61 = $mul60 + $call26 | 0;
    var $incdec_ptr62 = $ip_2190 + 8 | 0;
    HEAP32[$incdec_ptr56 >> 2] = $add61;
    var $incdec_ptr63 = $ip_2190 + 12 | 0;
    HEAP32[$incdec_ptr62 >> 2] = $conv22;
    var $and = $conv24 & 1;
    var $tobool68 = ($and | 0) == 0;
    if ($tobool68) {
      var $ip_4 = $incdec_ptr63;
      label = 14;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $incdec_ptr70 = $ip_2190 + 16 | 0;
    HEAP32[$incdec_ptr63 >> 2] = 0;
    var $ip_4 = $incdec_ptr70;
    label = 14;
    break;
   case 14:
    var $ip_4;
    var $and_1 = $conv24 & 2;
    var $tobool68_1 = ($and_1 | 0) == 0;
    if ($tobool68_1) {
      var $ip_4_1 = $ip_4;
      label = 58;
      break;
    } else {
      label = 57;
      break;
    }
   case 15:
    var $ip_5;
    var $inc74 = $t_0189 + 1 | 0;
    var $exitcond202 = ($inc74 | 0) == 64;
    if ($exitcond202) {
      label = 16;
      break;
    } else {
      var $t_0189 = $inc74;
      var $ip_2190 = $ip_5;
      var $4 = $incdec_ptr23;
      label = 7;
      break;
    }
   case 16:
    var $incdec_ptr76 = $ip_5 + 4 | 0;
    HEAP32[$ip_5 >> 2] = 2147483647;
    HEAP32[5243512 >> 2] = 5243516;
    var $_pre = HEAP16[5242964 >> 1];
    var $ip_6191 = $incdec_ptr76;
    var $g_1192 = 0;
    var $13 = 5243516;
    label = 17;
    break;
   case 17:
    var $13;
    var $g_1192;
    var $ip_6191;
    var $incdec_ptr81 = $13 + 1 | 0;
    var $14 = HEAP8[$13];
    var $conv82 = $14 << 24 >> 24;
    var $incdec_ptr83 = $13 + 2 | 0;
    HEAP32[5243512 >> 2] = $incdec_ptr83;
    var $15 = HEAP8[$incdec_ptr81];
    var $conv84 = $15 << 24 >> 24;
    var $conv85 = $_pre & 65535;
    var $mul86 = $conv85 * $conv82 & -1;
    var $add87 = $mul86 + $conv84 | 0;
    var $mul88 = $add87 << 2;
    var $incdec_ptr89 = $ip_6191 + 4 | 0;
    HEAP32[$ip_6191 >> 2] = $mul88;
    var $call90 = _fcol($row_0195, $col_0193);
    var $add91 = $conv82 + $row_0195 | 0;
    var $add92 = $conv84 + $col_0193 | 0;
    var $call93 = _fcol($add91, $add92);
    var $cmp94 = ($call93 | 0) == ($call90 | 0);
    if ($cmp94) {
      var $storemerge = 0;
      label = 20;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    var $mul97 = $conv82 << 1;
    var $add98 = $mul97 + $row_0195 | 0;
    var $mul99 = $conv84 << 1;
    var $add100 = $mul99 + $col_0193 | 0;
    var $call101 = _fcol($add98, $add100);
    var $cmp102 = ($call101 | 0) == ($call90 | 0);
    if ($cmp102) {
      label = 19;
      break;
    } else {
      var $storemerge = 0;
      label = 20;
      break;
    }
   case 19:
    var $mul108 = $add87 << 3;
    var $add109 = $mul108 + $call90 | 0;
    var $storemerge = $add109;
    label = 20;
    break;
   case 20:
    var $storemerge;
    var $ip_7 = $ip_6191 + 8 | 0;
    HEAP32[$incdec_ptr89 >> 2] = $storemerge;
    var $inc114 = $g_1192 + 1 | 0;
    var $exitcond203 = ($inc114 | 0) == 8;
    if ($exitcond203) {
      label = 21;
      break;
    } else {
      var $ip_6191 = $ip_7;
      var $g_1192 = $inc114;
      var $13 = $incdec_ptr83;
      label = 17;
      break;
    }
   case 21:
    var $scevgep = $ip_5 + 68 | 0;
    var $cmp9 = ($add34 | 0) < ($pcol_1 | 0);
    if ($cmp9) {
      var $col_0193 = $add34;
      var $ip_1194 = $scevgep;
      label = 6;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    var $cmp7 = ($add38 | 0) < ($prow_1 | 0);
    if ($cmp7) {
      var $row_0195 = $add38;
      var $ip_0196 = $scevgep;
      label = 5;
      break;
    } else {
      label = 24;
      break;
    }
   case 23:
    var $mul133_2 = $conv132 << 1;
    var $add_ptr_2 = $18 + ($mul133_2 << 3) | 0;
    var $16 = $gval;
    var $arrayidx202 = $gval | 0;
    var $17 = $sum;
    var $arrayidx207 = $gval + 4 | 0;
    var $arrayidx207_1 = $gval + 8 | 0;
    var $arrayidx207_2 = $gval + 12 | 0;
    var $arrayidx207_3 = $gval + 16 | 0;
    var $arrayidx207_4 = $gval + 20 | 0;
    var $arrayidx207_5 = $gval + 24 | 0;
    var $arrayidx207_6 = $gval + 28 | 0;
    var $row_2183 = 2;
    var $brow_sroa_0_0 = $18;
    var $brow_sroa_1_0 = $add_ptr_1;
    var $brow_sroa_2_0 = $add_ptr_2;
    label = 25;
    break;
   case 24:
    var $mul123 = $conv85 * 3 & -1;
    var $call124 = _calloc($mul123, 8);
    var $18 = $call124;
    _merror($call124, 5577240);
    var $19 = HEAP16[5242964 >> 1];
    var $conv132 = $19 & 65535;
    var $add_ptr_1 = $18 + ($conv132 << 3) | 0;
    var $20 = HEAP16[5398712 >> 1];
    var $conv139180 = $20 & 65535;
    var $sub140181 = $conv139180 - 2 | 0;
    var $cmp141182 = ($sub140181 | 0) > 2;
    if ($cmp141182) {
      label = 23;
      break;
    } else {
      var $row_2_lcssa = 2;
      var $brow_sroa_0_1 = $18;
      var $brow_sroa_1_1 = $add_ptr_1;
      label = 56;
      break;
    }
   case 25:
    var $brow_sroa_2_0;
    var $brow_sroa_1_0;
    var $brow_sroa_0_0;
    var $row_2183;
    var $sub146172 = $conv132 - 2 | 0;
    var $cmp147173 = ($sub146172 | 0) > 2;
    if ($cmp147173) {
      label = 26;
      break;
    } else {
      label = 53;
      break;
    }
   case 26:
    var $rem154 = ($row_2183 | 0) % ($prow_1 | 0);
    var $_pre9 = HEAP32[5264108 >> 2];
    var $col_1174 = 2;
    label = 27;
    break;
   case 27:
    var $col_1174;
    var $mul151 = $conv132 * $row_2183 & -1;
    var $add152 = $mul151 + $col_1174 | 0;
    var $arraydecay = $_pre9 + ($add152 << 3) | 0;
    var $rem = ($col_1174 | 0) % ($pcol_1 | 0);
    var $arrayidx156 = $code + ($rem154 << 6) + ($rem << 2) | 0;
    var $21 = HEAP32[$arrayidx156 >> 2];
    HEAP32[$16 >> 2] = 0;
    HEAP32[$16 + 4 >> 2] = 0;
    HEAP32[$16 + 8 >> 2] = 0;
    HEAP32[$16 + 12 >> 2] = 0;
    HEAP32[$16 + 16 >> 2] = 0;
    HEAP32[$16 + 20 >> 2] = 0;
    HEAP32[$16 + 24 >> 2] = 0;
    HEAP32[$16 + 28 >> 2] = 0;
    var $22 = HEAP32[$21 >> 2];
    var $cmp158155 = ($22 | 0) == 2147483647;
    if ($cmp158155) {
      var $ip_8_lcssa = $21;
      var $44 = 0;
      var $43 = 0;
      var $42 = 0;
      var $41 = 0;
      var $40 = 0;
      var $39 = 0;
      var $38 = 0;
      var $37 = 0;
      label = 33;
      break;
    } else {
      var $ip_8156 = $21;
      var $23 = $22;
      label = 28;
      break;
    }
   case 28:
    var $23;
    var $ip_8156;
    var $arrayidx160 = $_pre9 + ($add152 << 3) + ($23 << 1) | 0;
    var $24 = HEAP16[$arrayidx160 >> 1];
    var $conv161 = $24 & 65535;
    var $arrayidx162 = $ip_8156 + 4 | 0;
    var $25 = HEAP32[$arrayidx162 >> 2];
    var $arrayidx163 = $_pre9 + ($add152 << 3) + ($25 << 1) | 0;
    var $26 = HEAP16[$arrayidx163 >> 1];
    var $conv164 = $26 & 65535;
    var $sub165 = $conv161 - $conv164 | 0;
    var $shr = $sub165 >> 31;
    var $xor = $shr ^ $sub165;
    var $sub179 = $xor - $shr | 0;
    var $arrayidx180 = $ip_8156 + 8 | 0;
    var $27 = HEAP32[$arrayidx180 >> 2];
    var $shl181 = $sub179 << $27;
    var $arrayidx182 = $ip_8156 + 12 | 0;
    var $28 = HEAP32[$arrayidx182 >> 2];
    var $arrayidx183 = $gval + ($28 << 2) | 0;
    var $29 = HEAP32[$arrayidx183 >> 2];
    var $add184 = $shl181 + $29 | 0;
    HEAP32[$arrayidx183 >> 2] = $add184;
    var $add_ptr185 = $ip_8156 + 20 | 0;
    var $arrayidx186 = $ip_8156 + 16 | 0;
    var $30 = HEAP32[$arrayidx186 >> 2];
    var $cmp187 = ($30 | 0) == -1;
    if ($cmp187) {
      var $ip_8_be = $add_ptr185;
      label = 29;
      break;
    } else {
      label = 30;
      break;
    }
   case 29:
    var $ip_8_be;
    var $31 = HEAP32[$ip_8_be >> 2];
    var $cmp158 = ($31 | 0) == 2147483647;
    if ($cmp158) {
      label = 32;
      break;
    } else {
      var $ip_8156 = $ip_8_be;
      var $23 = $31;
      label = 28;
      break;
    }
   case 30:
    var $arrayidx191 = $gval + ($30 << 2) | 0;
    var $32 = HEAP32[$arrayidx191 >> 2];
    var $add192 = $32 + $shl181 | 0;
    HEAP32[$arrayidx191 >> 2] = $add192;
    var $incdec_ptr194152 = $ip_8156 + 24 | 0;
    var $33 = HEAP32[$add_ptr185 >> 2];
    var $cmp195153 = ($33 | 0) == -1;
    if ($cmp195153) {
      var $ip_8_be = $incdec_ptr194152;
      label = 29;
      break;
    } else {
      var $incdec_ptr194154 = $incdec_ptr194152;
      var $34 = $33;
      label = 31;
      break;
    }
   case 31:
    var $34;
    var $incdec_ptr194154;
    var $arrayidx198 = $gval + ($34 << 2) | 0;
    var $35 = HEAP32[$arrayidx198 >> 2];
    var $add199 = $35 + $shl181 | 0;
    HEAP32[$arrayidx198 >> 2] = $add199;
    var $incdec_ptr194 = $incdec_ptr194154 + 4 | 0;
    var $36 = HEAP32[$incdec_ptr194154 >> 2];
    var $cmp195 = ($36 | 0) == -1;
    if ($cmp195) {
      var $ip_8_be = $incdec_ptr194;
      label = 29;
      break;
    } else {
      var $incdec_ptr194154 = $incdec_ptr194;
      var $34 = $36;
      label = 31;
      break;
    }
   case 32:
    var $_pre10 = HEAP32[$arrayidx202 >> 2];
    var $_pre11 = HEAP32[$arrayidx207 >> 2];
    var $_pre12 = HEAP32[$arrayidx207_1 >> 2];
    var $_pre13 = HEAP32[$arrayidx207_2 >> 2];
    var $_pre14 = HEAP32[$arrayidx207_3 >> 2];
    var $_pre15 = HEAP32[$arrayidx207_4 >> 2];
    var $_pre16 = HEAP32[$arrayidx207_5 >> 2];
    var $_pre17 = HEAP32[$arrayidx207_6 >> 2];
    var $ip_8_lcssa = $ip_8_be;
    var $44 = $_pre10;
    var $43 = $_pre11;
    var $42 = $_pre12;
    var $41 = $_pre13;
    var $40 = $_pre14;
    var $39 = $_pre15;
    var $38 = $_pre16;
    var $37 = $_pre17;
    label = 33;
    break;
   case 33:
    var $37;
    var $38;
    var $39;
    var $40;
    var $41;
    var $42;
    var $43;
    var $44;
    var $ip_8_lcssa;
    var $cmp208 = ($44 | 0) > ($43 | 0);
    var $_gmin_0 = $cmp208 ? $43 : $44;
    var $cmp214 = ($44 | 0) < ($43 | 0);
    var $gmax_1 = $cmp214 ? $43 : $44;
    var $cmp208_1 = ($_gmin_0 | 0) > ($42 | 0);
    var $_gmin_0_1 = $cmp208_1 ? $42 : $_gmin_0;
    var $cmp214_1 = ($gmax_1 | 0) < ($42 | 0);
    var $gmax_1_1 = $cmp214_1 ? $42 : $gmax_1;
    var $cmp208_2 = ($_gmin_0_1 | 0) > ($41 | 0);
    var $_gmin_0_2 = $cmp208_2 ? $41 : $_gmin_0_1;
    var $cmp214_2 = ($gmax_1_1 | 0) < ($41 | 0);
    var $gmax_1_2 = $cmp214_2 ? $41 : $gmax_1_1;
    var $cmp208_3 = ($_gmin_0_2 | 0) > ($40 | 0);
    var $_gmin_0_3 = $cmp208_3 ? $40 : $_gmin_0_2;
    var $cmp214_3 = ($gmax_1_2 | 0) < ($40 | 0);
    var $gmax_1_3 = $cmp214_3 ? $40 : $gmax_1_2;
    var $cmp208_4 = ($_gmin_0_3 | 0) > ($39 | 0);
    var $_gmin_0_4 = $cmp208_4 ? $39 : $_gmin_0_3;
    var $cmp214_4 = ($gmax_1_3 | 0) < ($39 | 0);
    var $gmax_1_4 = $cmp214_4 ? $39 : $gmax_1_3;
    var $cmp208_5 = ($_gmin_0_4 | 0) > ($38 | 0);
    var $_gmin_0_5 = $cmp208_5 ? $38 : $_gmin_0_4;
    var $cmp214_5 = ($gmax_1_4 | 0) < ($38 | 0);
    var $gmax_1_5 = $cmp214_5 ? $38 : $gmax_1_4;
    var $cmp214_6 = ($gmax_1_5 | 0) < ($37 | 0);
    var $gmax_1_6 = $cmp214_6 ? $37 : $gmax_1_5;
    var $cmp222 = ($gmax_1_6 | 0) == 0;
    if ($cmp222) {
      label = 34;
      break;
    } else {
      label = 35;
      break;
    }
   case 34:
    var $arrayidx226 = $brow_sroa_2_0 + ($col_1174 << 3) | 0;
    var $45 = $arraydecay;
    var $46 = $arrayidx226;
    var $st$3$0 = $45 | 0;
    var $47$0 = HEAPU16[$st$3$0 >> 1] | HEAPU16[$st$3$0 + 2 >> 1] << 16;
    var $st$3$1 = $45 + 4 | 0;
    var $47$1 = HEAPU16[$st$3$1 >> 1] | HEAPU16[$st$3$1 + 2 >> 1] << 16;
    var $st$7$0 = $46 | 0;
    tempBigInt = $47$0;
    HEAP16[$st$7$0 >> 1] = tempBigInt & 65535;
    HEAP16[$st$7$0 + 2 >> 1] = tempBigInt >> 16;
    var $st$7$1 = $46 + 4 | 0;
    tempBigInt = $47$1;
    HEAP16[$st$7$1 >> 1] = tempBigInt & 65535;
    HEAP16[$st$7$1 + 2 >> 1] = tempBigInt >> 16;
    label = 52;
    break;
   case 35:
    var $cmp208_6 = ($_gmin_0_5 | 0) > ($37 | 0);
    var $incdec_ptr201 = $ip_8_lcssa + 4 | 0;
    var $_gmin_0_6 = $cmp208_6 ? $37 : $_gmin_0_5;
    var $shr228 = $gmax_1_6 >> 1;
    var $add229 = $_gmin_0_6 + $shr228 | 0;
    HEAP32[$17 >> 2] = 0;
    HEAP32[$17 + 4 >> 2] = 0;
    HEAP32[$17 + 8 >> 2] = 0;
    HEAP32[$17 + 12 >> 2] = 0;
    var $call230 = _fcol($row_2183, $col_1174);
    var $ip_10164 = $incdec_ptr201;
    var $g_3167 = 1;
    var $num_0168 = 0;
    var $48 = $44;
    label = 36;
    break;
   case 36:
    var $48;
    var $num_0168;
    var $g_3167;
    var $ip_10164;
    var $cmp236 = ($48 | 0) > ($add229 | 0);
    if ($cmp236) {
      var $num_1 = $num_0168;
      label = 45;
      break;
    } else {
      label = 37;
      break;
    }
   case 37:
    var $49 = HEAP32[5560840 >> 2];
    var $cmp240161 = ($49 | 0) > 0;
    if ($cmp240161) {
      label = 38;
      break;
    } else {
      label = 44;
      break;
    }
   case 38:
    var $arrayidx246 = $ip_10164 + 4 | 0;
    var $c_0162 = 0;
    label = 39;
    break;
   case 39:
    var $c_0162;
    var $cmp243 = ($c_0162 | 0) == ($call230 | 0);
    if ($cmp243) {
      label = 40;
      break;
    } else {
      label = 42;
      break;
    }
   case 40:
    var $50 = HEAP32[$arrayidx246 >> 2];
    var $tobool247 = ($50 | 0) == 0;
    if ($tobool247) {
      label = 42;
      break;
    } else {
      label = 41;
      break;
    }
   case 41:
    var $arrayidx249 = $_pre9 + ($add152 << 3) + ($call230 << 1) | 0;
    var $51 = HEAP16[$arrayidx249 >> 1];
    var $conv250 = $51 & 65535;
    var $arrayidx252 = $_pre9 + ($add152 << 3) + ($50 << 1) | 0;
    var $52 = HEAP16[$arrayidx252 >> 1];
    var $conv253 = $52 & 65535;
    var $add254 = $conv253 + $conv250 | 0;
    var $shr255 = $add254 >>> 1;
    var $arrayidx256 = $sum + ($call230 << 2) | 0;
    var $53 = HEAP32[$arrayidx256 >> 2];
    var $add257 = $shr255 + $53 | 0;
    HEAP32[$arrayidx256 >> 2] = $add257;
    label = 43;
    break;
   case 42:
    var $54 = HEAP32[$ip_10164 >> 2];
    var $add260 = $54 + $c_0162 | 0;
    var $arrayidx261 = $_pre9 + ($add152 << 3) + ($add260 << 1) | 0;
    var $55 = HEAP16[$arrayidx261 >> 1];
    var $conv262 = $55 & 65535;
    var $arrayidx263 = $sum + ($c_0162 << 2) | 0;
    var $56 = HEAP32[$arrayidx263 >> 2];
    var $add264 = $56 + $conv262 | 0;
    HEAP32[$arrayidx263 >> 2] = $add264;
    label = 43;
    break;
   case 43:
    var $inc267 = $c_0162 + 1 | 0;
    var $cmp240 = ($inc267 | 0) < ($49 | 0);
    if ($cmp240) {
      var $c_0162 = $inc267;
      label = 39;
      break;
    } else {
      label = 44;
      break;
    }
   case 44:
    var $inc269 = $num_0168 + 1 | 0;
    var $num_1 = $inc269;
    label = 45;
    break;
   case 45:
    var $num_1;
    var $exitcond = ($g_3167 | 0) == 8;
    if ($exitcond) {
      label = 47;
      break;
    } else {
      label = 46;
      break;
    }
   case 46:
    var $add_ptr273 = $ip_10164 + 8 | 0;
    var $arrayidx235_phi_trans_insert = $gval + ($g_3167 << 2) | 0;
    var $_pre18 = HEAP32[$arrayidx235_phi_trans_insert >> 2];
    var $phitmp19 = $g_3167 + 1 | 0;
    var $ip_10164 = $add_ptr273;
    var $g_3167 = $phitmp19;
    var $num_0168 = $num_1;
    var $48 = $_pre18;
    label = 36;
    break;
   case 47:
    var $57 = HEAP32[5560840 >> 2];
    var $cmp276169 = ($57 | 0) > 0;
    if ($cmp276169) {
      label = 48;
      break;
    } else {
      label = 52;
      break;
    }
   case 48:
    var $arrayidx279 = $_pre9 + ($add152 << 3) + ($call230 << 1) | 0;
    var $arrayidx285 = $sum + ($call230 << 2) | 0;
    var $c_1170 = 0;
    label = 49;
    break;
   case 49:
    var $c_1170;
    var $58 = HEAP16[$arrayidx279 >> 1];
    var $conv280 = $58 & 65535;
    var $cmp281 = ($c_1170 | 0) == ($call230 | 0);
    if ($cmp281) {
      var $t_1 = $conv280;
      label = 51;
      break;
    } else {
      label = 50;
      break;
    }
   case 50:
    var $arrayidx284 = $sum + ($c_1170 << 2) | 0;
    var $59 = HEAP32[$arrayidx284 >> 2];
    var $60 = HEAP32[$arrayidx285 >> 2];
    var $sub286 = $59 - $60 | 0;
    var $div = ($sub286 | 0) / ($num_1 | 0) & -1;
    var $add287 = $div + $conv280 | 0;
    var $t_1 = $add287;
    label = 51;
    break;
   case 51:
    var $t_1;
    var $cmp289 = ($t_1 | 0) < 65535;
    var $cond291 = $cmp289 ? $t_1 : 65535;
    var $cmp292 = ($cond291 | 0) < 0;
    var $phitmp = $cond291 & 65535;
    var $_phitmp = $cmp292 ? 0 : $phitmp;
    var $arrayidx307 = $brow_sroa_2_0 + ($col_1174 << 3) + ($c_1170 << 1) | 0;
    HEAP16[$arrayidx307 >> 1] = $_phitmp;
    var $inc309 = $c_1170 + 1 | 0;
    var $cmp276 = ($inc309 | 0) < ($57 | 0);
    if ($cmp276) {
      var $c_1170 = $inc309;
      label = 49;
      break;
    } else {
      label = 52;
      break;
    }
   case 52:
    var $inc312 = $col_1174 + 1 | 0;
    var $cmp147 = ($inc312 | 0) < ($sub146172 | 0);
    if ($cmp147) {
      var $col_1174 = $inc312;
      label = 27;
      break;
    } else {
      label = 53;
      break;
    }
   case 53:
    var $cmp314 = ($row_2183 | 0) > 3;
    if ($cmp314) {
      label = 54;
      break;
    } else {
      label = 55;
      break;
    }
   case 54:
    var $sub317 = $row_2183 - 2 | 0;
    var $mul319 = $conv132 * $sub317 & -1;
    var $add320 = $mul319 + 2 | 0;
    var $61 = HEAP32[5264108 >> 2];
    var $arrayidx321 = $61 + ($add320 << 3) | 0;
    var $62 = $arrayidx321;
    var $add_ptr323 = $brow_sroa_0_0 + 16 | 0;
    var $63 = $add_ptr323;
    var $sub325 = $conv132 << 3;
    var $mul326 = $sub325 - 32 | 0;
    _memcpy($62, $63, $mul326);
    label = 55;
    break;
   case 55:
    var $inc340 = $row_2183 + 1 | 0;
    var $cmp141 = ($inc340 | 0) < ($sub140181 | 0);
    if ($cmp141) {
      var $brow_sroa_0_0 = $brow_sroa_1_0;
      var $brow_sroa_1_0 = $brow_sroa_2_0;
      var $row_2183 = $inc340;
      var $brow_sroa_2_0 = $brow_sroa_0_0;
      label = 25;
      break;
    } else {
      var $row_2_lcssa = $inc340;
      var $brow_sroa_0_1 = $brow_sroa_1_0;
      var $brow_sroa_1_1 = $brow_sroa_2_0;
      label = 56;
      break;
    }
   case 56:
    var $brow_sroa_1_1;
    var $brow_sroa_0_1;
    var $row_2_lcssa;
    var $sub342 = $row_2_lcssa - 2 | 0;
    var $mul344 = $conv132 * $sub342 & -1;
    var $add345 = $mul344 + 2 | 0;
    var $64 = HEAP32[5264108 >> 2];
    var $arrayidx346 = $64 + ($add345 << 3) | 0;
    var $65 = $arrayidx346;
    var $add_ptr348 = $brow_sroa_0_1 + 16 | 0;
    var $66 = $add_ptr348;
    var $sub350 = $conv132 << 3;
    var $mul351 = $sub350 - 32 | 0;
    _memcpy($65, $66, $mul351);
    var $sub352 = $row_2_lcssa - 1 | 0;
    var $mul354 = $conv132 * $sub352 & -1;
    var $add355 = $mul354 + 2 | 0;
    var $arrayidx356 = $64 + ($add355 << 3) | 0;
    var $67 = $arrayidx356;
    var $add_ptr358 = $brow_sroa_1_1 + 16 | 0;
    var $68 = $add_ptr358;
    _memcpy($67, $68, $mul351);
    _free($call124);
    var $arrayidx364 = $code | 0;
    var $69 = HEAP32[$arrayidx364 >> 2];
    var $70 = $69;
    _free($70);
    STACKTOP = __stackBase__;
    return;
   case 57:
    var $incdec_ptr70_1 = $ip_4 + 4 | 0;
    HEAP32[$ip_4 >> 2] = 1;
    var $ip_4_1 = $incdec_ptr70_1;
    label = 58;
    break;
   case 58:
    var $ip_4_1;
    var $and_2 = $conv24 & 4;
    var $tobool68_2 = ($and_2 | 0) == 0;
    if ($tobool68_2) {
      var $ip_4_2 = $ip_4_1;
      label = 60;
      break;
    } else {
      label = 59;
      break;
    }
   case 59:
    var $incdec_ptr70_2 = $ip_4_1 + 4 | 0;
    HEAP32[$ip_4_1 >> 2] = 2;
    var $ip_4_2 = $incdec_ptr70_2;
    label = 60;
    break;
   case 60:
    var $ip_4_2;
    var $and_3 = $conv24 & 8;
    var $tobool68_3 = ($and_3 | 0) == 0;
    if ($tobool68_3) {
      var $ip_4_3 = $ip_4_2;
      label = 62;
      break;
    } else {
      label = 61;
      break;
    }
   case 61:
    var $incdec_ptr70_3 = $ip_4_2 + 4 | 0;
    HEAP32[$ip_4_2 >> 2] = 3;
    var $ip_4_3 = $incdec_ptr70_3;
    label = 62;
    break;
   case 62:
    var $ip_4_3;
    var $and_4 = $conv24 & 16;
    var $tobool68_4 = ($and_4 | 0) == 0;
    if ($tobool68_4) {
      var $ip_4_4 = $ip_4_3;
      label = 64;
      break;
    } else {
      label = 63;
      break;
    }
   case 63:
    var $incdec_ptr70_4 = $ip_4_3 + 4 | 0;
    HEAP32[$ip_4_3 >> 2] = 4;
    var $ip_4_4 = $incdec_ptr70_4;
    label = 64;
    break;
   case 64:
    var $ip_4_4;
    var $and_5 = $conv24 & 32;
    var $tobool68_5 = ($and_5 | 0) == 0;
    if ($tobool68_5) {
      var $ip_4_5 = $ip_4_4;
      label = 66;
      break;
    } else {
      label = 65;
      break;
    }
   case 65:
    var $incdec_ptr70_5 = $ip_4_4 + 4 | 0;
    HEAP32[$ip_4_4 >> 2] = 5;
    var $ip_4_5 = $incdec_ptr70_5;
    label = 66;
    break;
   case 66:
    var $ip_4_5;
    var $and_6 = $conv24 & 64;
    var $tobool68_6 = ($and_6 | 0) == 0;
    if ($tobool68_6) {
      var $ip_4_6 = $ip_4_5;
      label = 68;
      break;
    } else {
      label = 67;
      break;
    }
   case 67:
    var $incdec_ptr70_6 = $ip_4_5 + 4 | 0;
    HEAP32[$ip_4_5 >> 2] = 6;
    var $ip_4_6 = $incdec_ptr70_6;
    label = 68;
    break;
   case 68:
    var $ip_4_6;
    var $and_7 = $conv24 & 128;
    var $tobool68_7 = ($and_7 | 0) == 0;
    if ($tobool68_7) {
      var $ip_4_7 = $ip_4_6;
      label = 70;
      break;
    } else {
      label = 69;
      break;
    }
   case 69:
    var $incdec_ptr70_7 = $ip_4_6 + 4 | 0;
    HEAP32[$ip_4_6 >> 2] = 7;
    var $ip_4_7 = $incdec_ptr70_7;
    label = 70;
    break;
   case 70:
    var $ip_4_7;
    var $incdec_ptr72 = $ip_4_7 + 4 | 0;
    HEAP32[$ip_4_7 >> 2] = -1;
    var $ip_5 = $incdec_ptr72;
    label = 15;
    break;
  }
}
_vng_interpolate["X"] = 1;
function _ppg_interpolate() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 36 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $dir = __stackBase__;
    var $diff = __stackBase__ + 20;
    var $guess = __stackBase__ + 28;
    var $arrayinit_begin = $dir | 0;
    HEAP32[$arrayinit_begin >> 2] = 1;
    var $arrayinit_element = $dir + 4 | 0;
    var $0 = HEAP16[5242964 >> 1];
    var $conv = $0 & 65535;
    HEAP32[$arrayinit_element >> 2] = $conv;
    var $arrayinit_element1 = $dir + 8 | 0;
    HEAP32[$arrayinit_element1 >> 2] = -1;
    var $arrayinit_element2 = $dir + 12 | 0;
    var $sub = -$conv | 0;
    HEAP32[$arrayinit_element2 >> 2] = $sub;
    var $arrayinit_element4 = $dir + 16 | 0;
    HEAP32[$arrayinit_element4 >> 2] = 1;
    _border_interpolate(3);
    var $_b = HEAP8[5243532];
    if ($_b) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    var $1 = HEAP32[_stderr >> 2];
    var $2 = _fwrite(5577128, 21, 1, $1);
    label = 4;
    break;
   case 4:
    var $3 = HEAP16[5398712 >> 1];
    var $conv5303 = $3 & 65535;
    var $sub6304 = $conv5303 - 3 | 0;
    var $cmp305 = ($sub6304 | 0) > 3;
    if ($cmp305) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    var $arrayidx204 = $diff | 0;
    var $arrayidx205 = $diff + 4 | 0;
    var $_pre = HEAP32[5427632 >> 2];
    var $_pre1 = HEAP16[5242964 >> 1];
    var $row_0306 = 3;
    label = 8;
    break;
   case 6:
    var $4;
    var $5;
    var $sub323291 = $conv5303 - 1 | 0;
    var $cmp324292 = ($sub323291 | 0) > 1;
    if ($cmp324292) {
      label = 7;
      break;
    } else {
      label = 40;
      break;
    }
   case 7:
    var $_pre4 = HEAP32[5427632 >> 2];
    var $_pre5 = HEAP16[5242964 >> 1];
    var $row_1293 = 1;
    label = 19;
    break;
   case 8:
    var $6;
    var $7;
    var $row_0306;
    var $shl = $row_0306 << 1;
    var $8 = $shl & 14;
    var $add254 = $8 << 1;
    var $shl8 = $add254 | 2;
    var $shr = $_pre >>> ($shl8 >>> 0);
    var $and10 = $shr & 1;
    var $add11 = $and10 + 3 | 0;
    var $and = $and10 | $8;
    var $add15 = $and << 1;
    var $shl16 = $add15 ^ 2;
    var $shr17 = $_pre >>> ($shl16 >>> 0);
    var $and18 = $shr17 & 3;
    var $conv20298 = $_pre1 & 65535;
    var $sub21299 = $conv20298 - 3 | 0;
    var $cmp22300 = ($add11 | 0) < ($sub21299 | 0);
    if ($cmp22300) {
      label = 9;
      break;
    } else {
      var $25 = $7;
      var $24 = $6;
      label = 16;
      break;
    }
   case 9:
    var $_pre12 = HEAP32[5264108 >> 2];
    var $col_0301 = $add11;
    var $10 = $7;
    var $9 = $6;
    label = 10;
    break;
   case 10:
    var $9;
    var $10;
    var $col_0301;
    var $mul = $conv20298 * $row_0306 & -1;
    var $add_ptr_sum = $mul + $col_0301 | 0;
    var $arrayidx36 = $_pre12 + ($add_ptr_sum << 3) + ($and18 << 1) | 0;
    var $11 = HEAP16[$arrayidx36 >> 1];
    var $conv37 = $11 & 65535;
    var $i_0297 = 0;
    var $12 = 1;
    label = 11;
    break;
   case 11:
    var $12;
    var $i_0297;
    var $add_ptr26_sum257 = $add_ptr_sum - $12 | 0;
    var $arrayidx33 = $_pre12 + ($add_ptr26_sum257 << 3) + 2 | 0;
    var $13 = HEAP16[$arrayidx33 >> 1];
    var $conv34 = $13 & 65535;
    var $add38 = $conv37 + $conv34 | 0;
    var $add_ptr26_sum258 = $12 + $add_ptr_sum | 0;
    var $arrayidx40 = $_pre12 + ($add_ptr26_sum258 << 3) + 2 | 0;
    var $14 = HEAP16[$arrayidx40 >> 1];
    var $conv41 = $14 & 65535;
    var $add42 = $add38 + $conv41 | 0;
    var $mul43 = $add42 << 1;
    var $mul44 = $12 * -2 & -1;
    var $add_ptr26_sum259 = $mul44 + $add_ptr_sum | 0;
    var $arrayidx46 = $_pre12 + ($add_ptr26_sum259 << 3) + ($and18 << 1) | 0;
    var $15 = HEAP16[$arrayidx46 >> 1];
    var $conv47 = $15 & 65535;
    var $sub48 = $mul43 - $conv47 | 0;
    var $mul49 = $12 << 1;
    var $add_ptr26_sum260 = $mul49 + $add_ptr_sum | 0;
    var $arrayidx51 = $_pre12 + ($add_ptr26_sum260 << 3) + ($and18 << 1) | 0;
    var $16 = HEAP16[$arrayidx51 >> 1];
    var $conv52 = $16 & 65535;
    var $sub53 = $sub48 - $conv52 | 0;
    var $arrayidx54 = $guess + ($i_0297 << 2) | 0;
    HEAP32[$arrayidx54 >> 2] = $sub53;
    var $sub62 = $conv47 - $conv37 | 0;
    var $shr71 = $sub62 >> 31;
    var $xor = $shr71 ^ $sub62;
    var $shr71_neg = $sub62 >>> 31;
    var $sub89 = $conv52 - $conv37 | 0;
    var $shr98 = $sub89 >> 31;
    var $xor99 = $shr98 ^ $sub89;
    var $shr98_neg = $sub89 >>> 31;
    var $sub118 = $conv34 - $conv41 | 0;
    var $shr127 = $sub118 >> 31;
    var $xor128 = $shr127 ^ $sub118;
    var $shr127_neg = $sub118 >>> 31;
    var $sub138 = $xor + $shr71_neg | 0;
    var $sub109 = $sub138 + $shr98_neg | 0;
    var $sub81 = $sub109 + $xor99 | 0;
    var $add110 = $sub81 + $shr127_neg | 0;
    var $add139 = $add110 + $xor128 | 0;
    var $mul140 = $add139 * 3 & -1;
    var $mul141 = $12 * 3 & -1;
    var $add_ptr26_sum261 = $mul141 + $add_ptr_sum | 0;
    var $arrayidx143 = $_pre12 + ($add_ptr26_sum261 << 3) + 2 | 0;
    var $17 = HEAP16[$arrayidx143 >> 1];
    var $conv144 = $17 & 65535;
    var $sub148 = $conv144 - $conv41 | 0;
    var $shr157 = $sub148 >> 31;
    var $xor158 = $shr157 ^ $sub148;
    var $shr157_neg = $sub148 >>> 31;
    var $mul169 = $12 * -3 & -1;
    var $add_ptr26_sum262 = $mul169 + $add_ptr_sum | 0;
    var $arrayidx171 = $_pre12 + ($add_ptr26_sum262 << 3) + 2 | 0;
    var $18 = HEAP16[$arrayidx171 >> 1];
    var $conv172 = $18 & 65535;
    var $sub177 = $conv172 - $conv34 | 0;
    var $shr187 = $sub177 >> 31;
    var $xor188 = $shr187 ^ $sub177;
    var $shr187_neg = $sub177 >>> 31;
    var $sub199 = $xor158 + $shr157_neg | 0;
    var $sub168 = $sub199 + $shr187_neg | 0;
    var $add200 = $sub168 + $xor188 | 0;
    var $mul201 = $add200 << 1;
    var $add202 = $mul201 + $mul140 | 0;
    var $arrayidx203 = $diff + ($i_0297 << 2) | 0;
    HEAP32[$arrayidx203 >> 2] = $add202;
    var $inc = $i_0297 + 1 | 0;
    var $arrayidx = $dir + ($inc << 2) | 0;
    var $19 = HEAP32[$arrayidx >> 2];
    var $cmp28 = ($19 | 0) > 0;
    if ($cmp28) {
      var $i_0297 = $inc;
      var $12 = $19;
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $_pre2 = HEAP32[$arrayidx204 >> 2];
    var $_pre3 = HEAP32[$arrayidx205 >> 2];
    var $cmp206 = ($_pre2 | 0) > ($_pre3 | 0);
    var $conv207 = $cmp206 & 1;
    var $arrayidx208 = $dir + ($conv207 << 2) | 0;
    var $20 = HEAP32[$arrayidx208 >> 2];
    var $add_ptr26_sum = $20 + $add_ptr_sum | 0;
    var $arrayidx210 = $_pre12 + ($add_ptr26_sum << 3) + 2 | 0;
    var $21 = HEAP16[$arrayidx210 >> 1];
    var $conv211 = $21 & 65535;
    var $add_ptr26_sum256 = $add_ptr_sum - $20 | 0;
    var $arrayidx214 = $_pre12 + ($add_ptr26_sum256 << 3) + 2 | 0;
    var $22 = HEAP16[$arrayidx214 >> 1];
    var $conv215 = $22 & 65535;
    var $cmp216 = ($21 & 65535) < ($22 & 65535);
    var $arrayidx221 = $guess + ($conv207 << 2) | 0;
    var $23 = HEAP32[$arrayidx221 >> 2];
    var $shr222 = $23 >> 2;
    if ($cmp216) {
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    var $cmp227 = ($shr222 | 0) < ($conv215 | 0);
    var $shr222_conv215 = $cmp227 ? $shr222 : $conv215;
    var $cmp236 = ($conv211 | 0) > ($shr222_conv215 | 0);
    var $conv211_shr222_conv215 = $cmp236 ? $conv211 : $shr222_conv215;
    var $cond311 = $conv211_shr222_conv215;
    label = 15;
    break;
   case 14:
    var $cmp273 = ($shr222 | 0) < ($conv211 | 0);
    var $shr222_conv211 = $cmp273 ? $shr222 : $conv211;
    var $cmp284 = ($conv215 | 0) > ($shr222_conv211 | 0);
    var $conv215_shr222_conv211 = $cmp284 ? $conv215 : $shr222_conv211;
    var $cond311 = $conv215_shr222_conv211;
    label = 15;
    break;
   case 15:
    var $cond311;
    var $conv312 = $cond311 & 65535;
    var $arrayidx314 = $_pre12 + ($add_ptr_sum << 3) + 2 | 0;
    HEAP16[$arrayidx314 >> 1] = $conv312;
    var $add316 = $col_0301 + 2 | 0;
    var $cmp22 = ($add316 | 0) < ($sub21299 | 0);
    if ($cmp22) {
      var $col_0301 = $add316;
      var $10 = $_pre2;
      var $9 = $_pre3;
      label = 10;
      break;
    } else {
      var $25 = $_pre2;
      var $24 = $_pre3;
      label = 16;
      break;
    }
   case 16:
    var $24;
    var $25;
    var $inc319 = $row_0306 + 1 | 0;
    var $cmp = ($inc319 | 0) < ($sub6304 | 0);
    if ($cmp) {
      var $row_0306 = $inc319;
      var $7 = $25;
      var $6 = $24;
      label = 8;
      break;
    } else {
      var $5 = $25;
      var $4 = $24;
      label = 6;
      break;
    }
   case 17:
    if ($cmp324292) {
      label = 18;
      break;
    } else {
      label = 40;
      break;
    }
   case 18:
    var $add517265 = $conv + 1 | 0;
    var $arrayidx631 = $diff | 0;
    var $arrayidx632 = $diff + 4 | 0;
    var $arrayidx681 = $guess | 0;
    var $arrayidx682 = $guess + 4 | 0;
    var $_pre7 = HEAP32[5427632 >> 2];
    var $_pre8 = HEAP16[5242964 >> 1];
    var $row_2278 = 1;
    var $34 = $5;
    var $33 = $4;
    label = 27;
    break;
   case 19:
    var $row_1293;
    var $shl327 = $row_1293 << 1;
    var $and328 = $shl327 & 14;
    var $shl330 = $and328 << 1;
    var $shr331 = $_pre4 >>> ($shl330 >>> 0);
    var $and333 = $shr331 & 1;
    var $add334 = $and333 + 1 | 0;
    var $conv344284 = $_pre5 & 65535;
    var $sub345285 = $conv344284 - 1 | 0;
    var $cmp346286 = ($add334 | 0) < ($sub345285 | 0);
    if ($cmp346286) {
      label = 20;
      break;
    } else {
      label = 26;
      break;
    }
   case 20:
    var $add339 = $and333 | $and328;
    var $shl340 = $add339 << 1;
    var $shr341 = $_pre4 >>> ($shl340 >>> 0);
    var $and342 = $shr341 & 3;
    var $_pre6 = HEAP32[5264108 >> 2];
    var $col_1287 = $add334;
    var $c_0288 = $and342;
    label = 21;
    break;
   case 21:
    var $c_0288;
    var $col_1287;
    var $mul350 = $conv344284 * $row_1293 & -1;
    var $add_ptr351_sum = $mul350 + $col_1287 | 0;
    var $arrayidx367 = $_pre6 + ($add_ptr351_sum << 3) + 2 | 0;
    var $c_1282 = $c_0288;
    var $i_1283 = 0;
    var $26 = 1;
    label = 22;
    break;
   case 22:
    var $26;
    var $i_1283;
    var $c_1282;
    var $add_ptr352_sum = $add_ptr351_sum - $26 | 0;
    var $arrayidx360 = $_pre6 + ($add_ptr352_sum << 3) + ($c_1282 << 1) | 0;
    var $27 = HEAP16[$arrayidx360 >> 1];
    var $conv361 = $27 & 65535;
    var $add_ptr352_sum251 = $26 + $add_ptr351_sum | 0;
    var $arrayidx363 = $_pre6 + ($add_ptr352_sum251 << 3) + ($c_1282 << 1) | 0;
    var $28 = HEAP16[$arrayidx363 >> 1];
    var $conv364 = $28 & 65535;
    var $add365 = $conv364 + $conv361 | 0;
    var $29 = HEAP16[$arrayidx367 >> 1];
    var $conv368 = $29 & 65535;
    var $mul369 = $conv368 << 1;
    var $add370 = $add365 + $mul369 | 0;
    var $arrayidx373 = $_pre6 + ($add_ptr352_sum << 3) + 2 | 0;
    var $30 = HEAP16[$arrayidx373 >> 1];
    var $conv374 = $30 & 65535;
    var $sub375 = $add370 - $conv374 | 0;
    var $arrayidx377 = $_pre6 + ($add_ptr352_sum251 << 3) + 2 | 0;
    var $31 = HEAP16[$arrayidx377 >> 1];
    var $conv378 = $31 & 65535;
    var $sub379 = $sub375 - $conv378 | 0;
    var $shr380 = $sub379 >> 1;
    var $phitmp252 = ($shr380 | 0) < 0;
    if ($phitmp252) {
      var $cond467 = 0;
      label = 24;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    var $cmp381 = ($shr380 | 0) < 65535;
    var $phitmp253 = $shr380 & 65535;
    var $phitmp253_ = $cmp381 ? $phitmp253 : -1;
    var $cond467 = $phitmp253_;
    label = 24;
    break;
   case 24:
    var $cond467;
    var $arrayidx470 = $_pre6 + ($add_ptr351_sum << 3) + ($c_1282 << 1) | 0;
    HEAP16[$arrayidx470 >> 1] = $cond467;
    var $sub472 = 2 - $c_1282 | 0;
    var $inc473 = $i_1283 + 1 | 0;
    var $arrayidx354 = $dir + ($inc473 << 2) | 0;
    var $32 = HEAP32[$arrayidx354 >> 2];
    var $cmp355 = ($32 | 0) > 0;
    if ($cmp355) {
      var $c_1282 = $sub472;
      var $i_1283 = $inc473;
      var $26 = $32;
      label = 22;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    var $add476 = $col_1287 + 2 | 0;
    var $cmp346 = ($add476 | 0) < ($sub345285 | 0);
    if ($cmp346) {
      var $col_1287 = $add476;
      var $c_0288 = $sub472;
      label = 21;
      break;
    } else {
      label = 26;
      break;
    }
   case 26:
    var $inc479 = $row_1293 + 1 | 0;
    var $cmp324 = ($inc479 | 0) < ($sub323291 | 0);
    if ($cmp324) {
      var $row_1293 = $inc479;
      label = 19;
      break;
    } else {
      label = 17;
      break;
    }
   case 27:
    var $33;
    var $34;
    var $row_2278;
    var $shl487 = $row_2278 << 1;
    var $35 = $shl487 & 14;
    var $add489245 = $35 << 1;
    var $shl490 = $add489245 | 2;
    var $shr491 = $_pre7 >>> ($shl490 >>> 0);
    var $and493 = $shr491 & 1;
    var $add494 = $and493 + 1 | 0;
    var $and488 = $and493 | $35;
    var $add498 = $and488 << 1;
    var $shl499 = $add498 ^ 2;
    var $shr500 = $_pre7 >>> ($shl499 >>> 0);
    var $and501 = $shr500 & 3;
    var $sub502 = 2 - $and501 | 0;
    var $conv504270 = $_pre8 & 65535;
    var $sub505271 = $conv504270 - 1 | 0;
    var $cmp506272 = ($add494 | 0) < ($sub505271 | 0);
    if ($cmp506272) {
      label = 28;
      break;
    } else {
      var $49 = $34;
      var $48 = $33;
      label = 39;
      break;
    }
   case 28:
    var $_pre13 = HEAP32[5264108 >> 2];
    var $col_2273 = $add494;
    var $37 = $34;
    var $36 = $33;
    label = 29;
    break;
   case 29:
    var $36;
    var $37;
    var $col_2273;
    var $mul510 = $conv504270 * $row_2278 & -1;
    var $add_ptr511_sum = $mul510 + $col_2273 | 0;
    var $arrayidx554 = $_pre13 + ($add_ptr511_sum << 3) + 2 | 0;
    var $38 = HEAP16[$arrayidx554 >> 1];
    var $conv555 = $38 & 65535;
    var $mul616 = $conv555 << 1;
    var $_pre9 = HEAP32[$arrayinit_element >> 2];
    var $i_2267 = 0;
    var $add515268 = 1;
    var $add517269 = $add517265;
    var $39 = $_pre9;
    label = 30;
    break;
   case 30:
    var $39;
    var $add517269;
    var $add515268;
    var $i_2267;
    var $add_ptr512_sum = $add_ptr511_sum - $add517269 | 0;
    var $arrayidx523 = $_pre13 + ($add_ptr512_sum << 3) + ($sub502 << 1) | 0;
    var $40 = HEAP16[$arrayidx523 >> 1];
    var $conv524 = $40 & 65535;
    var $add_ptr512_sum249 = $add517269 + $add_ptr511_sum | 0;
    var $arrayidx526 = $_pre13 + ($add_ptr512_sum249 << 3) + ($sub502 << 1) | 0;
    var $41 = HEAP16[$arrayidx526 >> 1];
    var $conv527 = $41 & 65535;
    var $sub528 = $conv524 - $conv527 | 0;
    var $shr537 = $sub528 >> 31;
    var $xor538 = $shr537 ^ $sub528;
    var $shr537_neg = $sub528 >>> 31;
    var $arrayidx551 = $_pre13 + ($add_ptr512_sum << 3) + 2 | 0;
    var $42 = HEAP16[$arrayidx551 >> 1];
    var $conv552 = $42 & 65535;
    var $sub556 = $conv552 - $conv555 | 0;
    var $shr565 = $sub556 >> 31;
    var $xor566 = $shr565 ^ $sub556;
    var $shr565_neg = $sub556 >>> 31;
    var $arrayidx579 = $_pre13 + ($add_ptr512_sum249 << 3) + 2 | 0;
    var $43 = HEAP16[$arrayidx579 >> 1];
    var $conv580 = $43 & 65535;
    var $sub584 = $conv580 - $conv555 | 0;
    var $shr592 = $sub584 >> 31;
    var $xor593 = $shr592 ^ $sub584;
    var $shr592_neg = $sub584 >>> 31;
    var $sub602 = $xor538 + $shr537_neg | 0;
    var $sub576 = $sub602 + $shr565_neg | 0;
    var $sub548 = $sub576 + $xor566 | 0;
    var $add577 = $sub548 + $shr592_neg | 0;
    var $add603 = $add577 + $xor593 | 0;
    var $arrayidx604 = $diff + ($i_2267 << 2) | 0;
    HEAP32[$arrayidx604 >> 2] = $add603;
    var $add612 = $conv527 + $conv524 | 0;
    var $add617 = $add612 + $mul616 | 0;
    var $sub622 = $add617 - $conv552 | 0;
    var $sub626 = $sub622 - $conv580 | 0;
    var $arrayidx627 = $guess + ($i_2267 << 2) | 0;
    HEAP32[$arrayidx627 >> 2] = $sub626;
    var $add515 = $add515268 + 1 | 0;
    var $arrayidx516 = $dir + ($add515 << 2) | 0;
    var $44 = HEAP32[$arrayidx516 >> 2];
    var $add517 = $44 + $39 | 0;
    var $cmp518 = ($add517 | 0) > 0;
    if ($cmp518) {
      var $i_2267 = $add515268;
      var $add515268 = $add515;
      var $add517269 = $add517;
      var $39 = $44;
      label = 30;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    var $_pre10 = HEAP32[$arrayidx631 >> 2];
    var $_pre11 = HEAP32[$arrayidx632 >> 2];
    var $cmp633 = ($_pre10 | 0) == ($_pre11 | 0);
    if ($cmp633) {
      label = 35;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    var $cmp638 = ($_pre10 | 0) > ($_pre11 | 0);
    var $conv639 = $cmp638 & 1;
    var $arrayidx640 = $guess + ($conv639 << 2) | 0;
    var $45 = HEAP32[$arrayidx640 >> 2];
    var $shr641 = $45 >> 1;
    var $phitmp247 = ($shr641 | 0) < 0;
    if ($phitmp247) {
      var $cond677 = 0;
      label = 34;
      break;
    } else {
      label = 33;
      break;
    }
   case 33:
    var $cmp642 = ($shr641 | 0) < 65535;
    var $phitmp248 = $shr641 & 65535;
    var $phitmp248_ = $cmp642 ? $phitmp248 : -1;
    var $cond677 = $phitmp248_;
    label = 34;
    break;
   case 34:
    var $cond677;
    var $arrayidx680 = $_pre13 + ($add_ptr511_sum << 3) + ($sub502 << 1) | 0;
    HEAP16[$arrayidx680 >> 1] = $cond677;
    label = 38;
    break;
   case 35:
    var $46 = HEAP32[$arrayidx681 >> 2];
    var $47 = HEAP32[$arrayidx682 >> 2];
    var $add683 = $47 + $46 | 0;
    var $shr684 = $add683 >> 2;
    var $phitmp = ($shr684 | 0) < 0;
    if ($phitmp) {
      var $cond714 = 0;
      label = 37;
      break;
    } else {
      label = 36;
      break;
    }
   case 36:
    var $cmp685 = ($shr684 | 0) < 65535;
    var $phitmp246 = $shr684 & 65535;
    var $phitmp246_ = $cmp685 ? $phitmp246 : -1;
    var $cond714 = $phitmp246_;
    label = 37;
    break;
   case 37:
    var $cond714;
    var $arrayidx717 = $_pre13 + ($add_ptr511_sum << 3) + ($sub502 << 1) | 0;
    HEAP16[$arrayidx717 >> 1] = $cond714;
    label = 38;
    break;
   case 38:
    var $add720 = $col_2273 + 2 | 0;
    var $cmp506 = ($add720 | 0) < ($sub505271 | 0);
    if ($cmp506) {
      var $col_2273 = $add720;
      var $37 = $_pre10;
      var $36 = $_pre11;
      label = 29;
      break;
    } else {
      var $49 = $_pre10;
      var $48 = $_pre11;
      label = 39;
      break;
    }
   case 39:
    var $48;
    var $49;
    var $inc723 = $row_2278 + 1 | 0;
    var $cmp484 = ($inc723 | 0) < ($sub323291 | 0);
    if ($cmp484) {
      var $row_2278 = $inc723;
      var $34 = $49;
      var $33 = $48;
      label = 27;
      break;
    } else {
      label = 40;
      break;
    }
   case 40:
    STACKTOP = __stackBase__;
    return;
  }
}
_ppg_interpolate["X"] = 1;
function _ahd_interpolate() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 262256 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $ldiff = __stackBase__;
    var $abdiff = __stackBase__ + 32;
    var $cbrt = __stackBase__ + 64;
    var $xyz_cam = __stackBase__ + 262208;
    var $_b = HEAP8[5243532];
    if ($_b) {
      label = 3;
      break;
    } else {
      var $i_0402 = 0;
      label = 4;
      break;
    }
   case 3:
    var $0 = HEAP32[_stderr >> 2];
    var $1 = _fwrite(5577012, 21, 1, $0);
    var $i_0402 = 0;
    label = 4;
    break;
   case 4:
    var $i_0402;
    var $conv = $i_0402 | 0;
    var $div = $conv / 65535;
    var $conv1 = $div;
    var $conv2 = $conv1;
    var $cmp3 = $conv2 > .008856;
    if ($cmp3) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    var $2 = Math.pow($conv2, .3333333333333333);
    var $cond = $2;
    label = 7;
    break;
   case 6:
    var $mul = $conv2 * 7.787;
    var $add = $mul + .13793103448275862;
    var $cond = $add;
    label = 7;
    break;
   case 7:
    var $cond;
    var $conv7 = $cond;
    var $arrayidx = $cbrt + ($i_0402 << 2) | 0;
    HEAPF32[$arrayidx >> 2] = $conv7;
    var $inc = $i_0402 + 1 | 0;
    var $exitcond440 = ($inc | 0) == 65536;
    if ($exitcond440) {
      label = 8;
      break;
    } else {
      var $i_0402 = $inc;
      label = 4;
      break;
    }
   case 8:
    var $3 = HEAP32[5560840 >> 2];
    var $cmp13398 = ($3 | 0) > 0;
    if ($cmp13398) {
      var $j_0399 = 0;
      label = 9;
      break;
    } else {
      label = 95;
      break;
    }
   case 9:
    var $j_0399;
    var $arrayidx17 = $xyz_cam + ($j_0399 << 2) | 0;
    var $arrayidx25 = 5244964 + ($j_0399 << 2) | 0;
    var $4 = HEAPF32[$arrayidx25 >> 2];
    var $conv26 = $4;
    var $mul27 = $conv26 * .412453;
    var $div30 = $mul27 / .9504560232162476;
    var $add34 = $div30;
    var $conv35 = $add34;
    var $arrayidx25_1 = 5244980 + ($j_0399 << 2) | 0;
    var $5 = HEAPF32[$arrayidx25_1 >> 2];
    var $conv26_1 = $5;
    var $mul27_1 = $conv26_1 * .35758;
    var $div30_1 = $mul27_1 / .9504560232162476;
    var $conv33_1 = $conv35;
    var $add34_1 = $div30_1 + $conv33_1;
    var $conv35_1 = $add34_1;
    var $arrayidx25_2 = 5244996 + ($j_0399 << 2) | 0;
    var $6 = HEAPF32[$arrayidx25_2 >> 2];
    var $conv26_2 = $6;
    var $mul27_2 = $conv26_2 * .180423;
    var $div30_2 = $mul27_2 / .9504560232162476;
    var $conv33_2 = $conv35_1;
    var $add34_2 = $div30_2 + $conv33_2;
    var $conv35_2 = $add34_2;
    HEAPF32[$arrayidx17 >> 2] = $conv35_2;
    var $inc40 = $j_0399 + 1 | 0;
    var $exitcond423 = ($inc40 | 0) == ($3 | 0);
    if ($exitcond423) {
      var $j_0399_1 = 0;
      label = 93;
      break;
    } else {
      var $j_0399 = $inc40;
      label = 9;
      break;
    }
   case 10:
    var $arrayidx342 = $call45 + 393216 | 0;
    var $7 = $arrayidx342;
    var $arrayidx825 = $ldiff | 0;
    var $arrayidx827 = $ldiff + 4 | 0;
    var $arrayidx839 = $ldiff + 24 | 0;
    var $arrayidx841 = $ldiff + 28 | 0;
    var $arrayidx887 = $abdiff | 0;
    var $arrayidx889 = $abdiff + 4 | 0;
    var $arrayidx901 = $abdiff + 24 | 0;
    var $arrayidx903 = $abdiff + 28 | 0;
    var $arrayidx957_2 = $ldiff + 8 | 0;
    var $arrayidx957_3 = $ldiff + 12 | 0;
    var $arrayidx957_1410 = $ldiff + 16 | 0;
    var $arrayidx957_1_1 = $ldiff + 20 | 0;
    var $arrayidx961_1_1 = $abdiff + 20 | 0;
    var $arrayidx961_1412 = $abdiff + 16 | 0;
    var $arrayidx961_3 = $abdiff + 12 | 0;
    var $arrayidx961_2 = $abdiff + 8 | 0;
    var $_pre = HEAP16[5242964 >> 1];
    var $top_0394 = 2;
    label = 11;
    break;
   case 11:
    var $top_0394;
    var $conv53386 = $_pre & 65535;
    var $sub54387 = $conv53386 - 5 | 0;
    var $cmp55388 = ($sub54387 | 0) > 2;
    if ($cmp55388) {
      label = 12;
      break;
    } else {
      label = 69;
      break;
    }
   case 12:
    var $add59 = $top_0394 + 256 | 0;
    var $add356314 = $top_0394 | 1;
    var $sub359 = $top_0394 + 255 | 0;
    var $cmp360363 = ($add356314 | 0) < ($sub359 | 0);
    var $add713 = $top_0394 + 2 | 0;
    var $sub716 = $top_0394 + 254 | 0;
    var $add982 = $top_0394 + 3 | 0;
    var $sub985 = $top_0394 + 253 | 0;
    var $left_0389 = 2;
    label = 13;
    break;
   case 13:
    var $left_0389;
    var $add81 = $left_0389 + 256 | 0;
    var $row_0352 = $top_0394;
    label = 14;
    break;
   case 14:
    var $row_0352;
    var $conv62 = $113 & 65535;
    var $sub63 = $conv62 - 2 | 0;
    var $cmp64 = ($row_0352 | 0) < ($sub63 | 0);
    if ($cmp64) {
      label = 15;
      break;
    } else {
      label = 26;
      break;
    }
   case 15:
    var $8 = HEAP32[5427632 >> 2];
    var $shl = $row_0352 << 1;
    var $and = $shl & 14;
    var $shl69 = $and << 1;
    var $shr = $8 >>> ($shl69 >>> 0);
    var $and71 = $shr & 1;
    var $add72 = $and71 | $left_0389;
    var $add76 = $and71 | $and;
    var $shl77 = $add76 << 1;
    var $shr78 = $8 >>> ($shl77 >>> 0);
    var $and79 = $shr78 & 3;
    var $cmp82350 = ($add72 | 0) < ($add81 | 0);
    if ($cmp82350) {
      label = 16;
      break;
    } else {
      label = 25;
      break;
    }
   case 16:
    var $sub202 = $row_0352 - $top_0394 | 0;
    var $col_0351 = $add72;
    label = 17;
    break;
   case 17:
    var $col_0351;
    var $sub86 = $conv53386 - 2 | 0;
    var $cmp87 = ($col_0351 | 0) < ($sub86 | 0);
    if ($cmp87) {
      label = 18;
      break;
    } else {
      label = 25;
      break;
    }
   case 18:
    var $9 = HEAP32[5264108 >> 2];
    var $mul92 = $conv53386 * $row_0352 & -1;
    var $add_ptr93_sum = $mul92 + $col_0351 | 0;
    var $add_ptr94_sum = $add_ptr93_sum - 1 | 0;
    var $arrayidx96 = $9 + ($add_ptr94_sum << 3) + 2 | 0;
    var $10 = HEAP16[$arrayidx96 >> 1];
    var $conv97 = $10 & 65535;
    var $arrayidx99 = $9 + ($add_ptr93_sum << 3) + ($and79 << 1) | 0;
    var $11 = HEAP16[$arrayidx99 >> 1];
    var $conv100 = $11 & 65535;
    var $add101 = $conv100 + $conv97 | 0;
    var $add_ptr94_sum334 = $add_ptr93_sum + 1 | 0;
    var $arrayidx103 = $9 + ($add_ptr94_sum334 << 3) + 2 | 0;
    var $12 = HEAP16[$arrayidx103 >> 1];
    var $conv104 = $12 & 65535;
    var $add105 = $add101 + $conv104 | 0;
    var $mul106 = $add105 << 1;
    var $add_ptr94_sum335 = $add_ptr93_sum - 2 | 0;
    var $arrayidx108 = $9 + ($add_ptr94_sum335 << 3) + ($and79 << 1) | 0;
    var $13 = HEAP16[$arrayidx108 >> 1];
    var $conv109 = $13 & 65535;
    var $sub110 = $mul106 - $conv109 | 0;
    var $add_ptr94_sum336 = $add_ptr93_sum + 2 | 0;
    var $arrayidx112 = $9 + ($add_ptr94_sum336 << 3) + ($and79 << 1) | 0;
    var $14 = HEAP16[$arrayidx112 >> 1];
    var $conv113 = $14 & 65535;
    var $sub114 = $sub110 - $conv113 | 0;
    var $shr115 = $sub114 >> 2;
    var $cmp122 = ($10 & 65535) < ($12 & 65535);
    if ($cmp122) {
      label = 19;
      break;
    } else {
      label = 20;
      break;
    }
   case 19:
    var $cmp131 = ($shr115 | 0) < ($conv104 | 0);
    var $shr115_conv104 = $cmp131 ? $shr115 : $conv104;
    var $cmp140 = ($conv97 | 0) > ($shr115_conv104 | 0);
    var $conv97_shr115_conv104 = $cmp140 ? $conv97 : $shr115_conv104;
    var $cond199 = $conv97_shr115_conv104;
    label = 21;
    break;
   case 20:
    var $cmp168 = ($shr115 | 0) < ($conv97 | 0);
    var $shr115_conv97 = $cmp168 ? $shr115 : $conv97;
    var $cmp177 = ($conv104 | 0) > ($shr115_conv97 | 0);
    var $conv104_shr115_conv97 = $cmp177 ? $conv104 : $shr115_conv97;
    var $cond199 = $conv104_shr115_conv97;
    label = 21;
    break;
   case 21:
    var $cond199;
    var $conv200 = $cond199 & 65535;
    var $sub201 = $col_0351 - $left_0389 | 0;
    var $arrayidx206 = $110 + $sub202 * 1536 + $sub201 * 6 + 2 | 0;
    HEAP16[$arrayidx206 >> 1] = $conv200;
    var $add_ptr94_sum337 = $add_ptr93_sum - $conv53386 | 0;
    var $arrayidx210 = $9 + ($add_ptr94_sum337 << 3) + 2 | 0;
    var $15 = HEAP16[$arrayidx210 >> 1];
    var $conv211 = $15 & 65535;
    var $16 = HEAP16[$arrayidx99 >> 1];
    var $conv214 = $16 & 65535;
    var $add215 = $conv214 + $conv211 | 0;
    var $add_ptr94_sum338 = $conv53386 + $add_ptr93_sum | 0;
    var $arrayidx217 = $9 + ($add_ptr94_sum338 << 3) + 2 | 0;
    var $17 = HEAP16[$arrayidx217 >> 1];
    var $conv218 = $17 & 65535;
    var $add219 = $add215 + $conv218 | 0;
    var $mul220 = $add219 << 1;
    var $mul222 = $conv53386 * -2 & -1;
    var $add_ptr94_sum339 = $mul222 + $add_ptr93_sum | 0;
    var $arrayidx224 = $9 + ($add_ptr94_sum339 << 3) + ($and79 << 1) | 0;
    var $18 = HEAP16[$arrayidx224 >> 1];
    var $conv225 = $18 & 65535;
    var $sub226 = $mul220 - $conv225 | 0;
    var $mul228 = $conv53386 << 1;
    var $add_ptr94_sum340 = $mul228 + $add_ptr93_sum | 0;
    var $arrayidx230 = $9 + ($add_ptr94_sum340 << 3) + ($and79 << 1) | 0;
    var $19 = HEAP16[$arrayidx230 >> 1];
    var $conv231 = $19 & 65535;
    var $sub232 = $sub226 - $conv231 | 0;
    var $shr233 = $sub232 >> 2;
    var $cmp243 = ($15 & 65535) < ($17 & 65535);
    if ($cmp243) {
      label = 22;
      break;
    } else {
      label = 23;
      break;
    }
   case 22:
    var $cmp255 = ($shr233 | 0) < ($conv218 | 0);
    var $shr233_conv218 = $cmp255 ? $shr233 : $conv218;
    var $cmp265 = ($conv211 | 0) > ($shr233_conv218 | 0);
    var $conv211_shr233_conv218 = $cmp265 ? $conv211 : $shr233_conv218;
    var $cond338 = $conv211_shr233_conv218;
    label = 24;
    break;
   case 23:
    var $cmp300 = ($shr233 | 0) < ($conv211 | 0);
    var $shr233_conv211 = $cmp300 ? $shr233 : $conv211;
    var $cmp311 = ($conv218 | 0) > ($shr233_conv211 | 0);
    var $conv218_shr233_conv211 = $cmp311 ? $conv218 : $shr233_conv211;
    var $cond338 = $conv218_shr233_conv211;
    label = 24;
    break;
   case 24:
    var $cond338;
    var $conv339 = $cond338 & 65535;
    var $arrayidx345 = $7 + $sub202 * 1536 + $sub201 * 6 + 2 | 0;
    HEAP16[$arrayidx345 >> 1] = $conv339;
    var $add347 = $col_0351 + 2 | 0;
    var $cmp82 = ($add347 | 0) < ($add81 | 0);
    if ($cmp82) {
      var $col_0351 = $add347;
      label = 17;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    var $inc350 = $row_0352 + 1 | 0;
    var $cmp60 = ($inc350 | 0) < ($add59 | 0);
    if ($cmp60) {
      var $row_0352 = $inc350;
      label = 14;
      break;
    } else {
      label = 26;
      break;
    }
   case 26:
    var $add369315 = $left_0389 | 1;
    var $sub372 = $left_0389 + 255 | 0;
    var $cmp373361 = ($add369315 | 0) < ($sub372 | 0);
    var $d_0366 = 0;
    label = 27;
    break;
   case 27:
    var $d_0366;
    if ($cmp360363) {
      var $row_1364 = $add356314;
      label = 28;
      break;
    } else {
      label = 45;
      break;
    }
   case 28:
    var $row_1364;
    var $sub364 = $conv48391 - 3 | 0;
    var $cmp365 = ($row_1364 | 0) < ($sub364 | 0);
    if ($cmp365) {
      label = 29;
      break;
    } else {
      label = 45;
      break;
    }
   case 29:
    if ($cmp373361) {
      label = 30;
      break;
    } else {
      label = 44;
      break;
    }
   case 30:
    var $sub387 = $row_1364 - $top_0394 | 0;
    var $shl396 = $row_1364 << 1;
    var $and397 = $shl396 & 14;
    var $shl408 = $shl396 + 2 | 0;
    var $and409 = $shl408 & 14;
    var $col_1362 = $add369315;
    label = 31;
    break;
   case 31:
    var $col_1362;
    var $sub377 = $conv53386 - 3 | 0;
    var $cmp378 = ($col_1362 | 0) < ($sub377 | 0);
    if ($cmp378) {
      label = 32;
      break;
    } else {
      label = 44;
      break;
    }
   case 32:
    var $20 = HEAP32[5264108 >> 2];
    var $mul383 = $conv53386 * $row_1364 & -1;
    var $add_ptr384_sum = $mul383 + $col_1362 | 0;
    var $sub386 = $col_1362 - $left_0389 | 0;
    var $21 = HEAP32[5427632 >> 2];
    var $and398 = $col_1362 & 1;
    var $add399 = $and398 | $and397;
    var $shl400 = $add399 << 1;
    var $shr401 = $21 >>> ($shl400 >>> 0);
    var $and402 = $shr401 & 3;
    var $sub403 = 2 - $and402 | 0;
    var $cmp404 = ($sub403 | 0) == 1;
    if ($cmp404) {
      label = 33;
      break;
    } else {
      label = 34;
      break;
    }
   case 33:
    var $add411 = $and398 | $and409;
    var $shl412 = $add411 << 1;
    var $shr413 = $21 >>> ($shl412 >>> 0);
    var $and414 = $shr413 & 3;
    var $arrayidx416 = $20 + ($add_ptr384_sum << 3) + 2 | 0;
    var $22 = HEAP16[$arrayidx416 >> 1];
    var $conv417 = $22 & 65535;
    var $sub418 = 2 - $and414 | 0;
    var $add_ptr385_sum325 = $add_ptr384_sum - 1 | 0;
    var $arrayidx420 = $20 + ($add_ptr385_sum325 << 3) + ($sub418 << 1) | 0;
    var $23 = HEAP16[$arrayidx420 >> 1];
    var $conv421 = $23 & 65535;
    var $add_ptr385_sum326 = $add_ptr384_sum + 1 | 0;
    var $arrayidx424 = $20 + ($add_ptr385_sum326 << 3) + ($sub418 << 1) | 0;
    var $24 = HEAP16[$arrayidx424 >> 1];
    var $conv425 = $24 & 65535;
    var $add426 = $conv425 + $conv421 | 0;
    var $arrayidx390_sum327 = $sub386 - 1 | 0;
    var $arrayidx428 = $110 + $d_0366 * 393216 + $sub387 * 1536 + $arrayidx390_sum327 * 6 + 2 | 0;
    var $25 = HEAP16[$arrayidx428 >> 1];
    var $conv429 = $25 & 65535;
    var $sub430 = $add426 - $conv429 | 0;
    var $arrayidx390_sum328 = $sub386 + 1 | 0;
    var $arrayidx432 = $110 + $d_0366 * 393216 + $sub387 * 1536 + $arrayidx390_sum328 * 6 + 2 | 0;
    var $26 = HEAP16[$arrayidx432 >> 1];
    var $conv433 = $26 & 65535;
    var $sub434 = $sub430 - $conv433 | 0;
    var $shr435 = $sub434 >> 1;
    var $add436 = $shr435 + $conv417 | 0;
    var $cmp437 = ($add436 | 0) < 65535;
    var $cond442 = $cmp437 ? $add436 : 65535;
    var $cmp443 = ($cond442 | 0) < 0;
    var $phitmp329 = $cond442 & 65535;
    var $cond454 = $cmp443 ? 0 : $phitmp329;
    var $arrayidx458 = $110 + $d_0366 * 393216 + $sub387 * 1536 + $sub386 * 6 + ($sub418 << 1) | 0;
    HEAP16[$arrayidx458 >> 1] = $cond454;
    var $27 = HEAP16[$arrayidx416 >> 1];
    var $conv461 = $27 & 65535;
    var $add_ptr385_sum330 = $add_ptr384_sum - $conv53386 | 0;
    var $arrayidx465 = $20 + ($add_ptr385_sum330 << 3) + ($and414 << 1) | 0;
    var $28 = HEAP16[$arrayidx465 >> 1];
    var $conv466 = $28 & 65535;
    var $add_ptr385_sum331 = $conv53386 + $add_ptr384_sum | 0;
    var $arrayidx469 = $20 + ($add_ptr385_sum331 << 3) + ($and414 << 1) | 0;
    var $29 = HEAP16[$arrayidx469 >> 1];
    var $conv470 = $29 & 65535;
    var $add471 = $conv470 + $conv466 | 0;
    var $arrayidx390_sum332 = $sub386 - 256 | 0;
    var $arrayidx473 = $110 + $d_0366 * 393216 + $sub387 * 1536 + $arrayidx390_sum332 * 6 + 2 | 0;
    var $30 = HEAP16[$arrayidx473 >> 1];
    var $conv474 = $30 & 65535;
    var $sub475 = $add471 - $conv474 | 0;
    var $arrayidx390_sum333 = $sub386 + 256 | 0;
    var $arrayidx477 = $110 + $d_0366 * 393216 + $sub387 * 1536 + $arrayidx390_sum333 * 6 + 2 | 0;
    var $31 = HEAP16[$arrayidx477 >> 1];
    var $conv478 = $31 & 65535;
    var $sub479 = $sub475 - $conv478 | 0;
    var $shr480 = $sub479 >> 1;
    var $add481 = $shr480 + $conv461 | 0;
    var $val_0 = $add481;
    var $c_0 = $and414;
    label = 35;
    break;
   case 34:
    var $arrayidx483 = $110 + $d_0366 * 393216 + $sub387 * 1536 + $sub386 * 6 + 2 | 0;
    var $32 = HEAP16[$arrayidx483 >> 1];
    var $conv484 = $32 & 65535;
    var $sub487 = $conv53386 ^ -1;
    var $add_ptr385_sum = $add_ptr384_sum + $sub487 | 0;
    var $arrayidx489 = $20 + ($add_ptr385_sum << 3) + ($sub403 << 1) | 0;
    var $33 = HEAP16[$arrayidx489 >> 1];
    var $conv490 = $33 & 65535;
    var $add493 = 1 - $conv53386 | 0;
    var $add_ptr385_sum316 = $add493 + $add_ptr384_sum | 0;
    var $arrayidx495 = $20 + ($add_ptr385_sum316 << 3) + ($sub403 << 1) | 0;
    var $34 = HEAP16[$arrayidx495 >> 1];
    var $conv496 = $34 & 65535;
    var $sub499 = $conv53386 - 1 | 0;
    var $add_ptr385_sum317 = $sub499 + $add_ptr384_sum | 0;
    var $arrayidx501 = $20 + ($add_ptr385_sum317 << 3) + ($sub403 << 1) | 0;
    var $35 = HEAP16[$arrayidx501 >> 1];
    var $conv502 = $35 & 65535;
    var $add505 = $conv53386 + 1 | 0;
    var $add_ptr385_sum318 = $add505 + $add_ptr384_sum | 0;
    var $arrayidx507 = $20 + ($add_ptr385_sum318 << 3) + ($sub403 << 1) | 0;
    var $36 = HEAP16[$arrayidx507 >> 1];
    var $conv508 = $36 & 65535;
    var $arrayidx390_sum = $sub386 - 257 | 0;
    var $arrayidx511 = $110 + $d_0366 * 393216 + $sub387 * 1536 + $arrayidx390_sum * 6 + 2 | 0;
    var $37 = HEAP16[$arrayidx511 >> 1];
    var $conv512 = $37 & 65535;
    var $arrayidx390_sum319 = $sub386 - 255 | 0;
    var $arrayidx515 = $110 + $d_0366 * 393216 + $sub387 * 1536 + $arrayidx390_sum319 * 6 + 2 | 0;
    var $38 = HEAP16[$arrayidx515 >> 1];
    var $conv516 = $38 & 65535;
    var $arrayidx390_sum320 = $sub386 + 255 | 0;
    var $arrayidx519 = $110 + $d_0366 * 393216 + $sub387 * 1536 + $arrayidx390_sum320 * 6 + 2 | 0;
    var $39 = HEAP16[$arrayidx519 >> 1];
    var $conv520 = $39 & 65535;
    var $arrayidx390_sum321 = $sub386 + 257 | 0;
    var $arrayidx523 = $110 + $d_0366 * 393216 + $sub387 * 1536 + $arrayidx390_sum321 * 6 + 2 | 0;
    var $40 = HEAP16[$arrayidx523 >> 1];
    var $conv524 = $40 & 65535;
    var $add497 = $conv490 + 1 | 0;
    var $add503 = $add497 + $conv496 | 0;
    var $add509 = $add503 + $conv502 | 0;
    var $sub513 = $add509 + $conv508 | 0;
    var $sub517 = $sub513 - $conv512 | 0;
    var $sub521 = $sub517 - $conv516 | 0;
    var $sub525 = $sub521 - $conv520 | 0;
    var $add526 = $sub525 - $conv524 | 0;
    var $shr527 = $add526 >> 2;
    var $add528 = $shr527 + $conv484 | 0;
    var $val_0 = $add528;
    var $c_0 = $sub403;
    label = 35;
    break;
   case 35:
    var $c_0;
    var $val_0;
    var $cmp530 = ($val_0 | 0) < 65535;
    var $cond535 = $cmp530 ? $val_0 : 65535;
    var $cmp536 = ($cond535 | 0) < 0;
    var $phitmp = $cond535 & 65535;
    var $cond547 = $cmp536 ? 0 : $phitmp;
    var $arrayidx550 = $110 + $d_0366 * 393216 + $sub387 * 1536 + $sub386 * 6 + ($c_0 << 1) | 0;
    HEAP16[$arrayidx550 >> 1] = $cond547;
    var $arrayidx559 = $20 + ($add_ptr384_sum << 3) + ($and402 << 1) | 0;
    var $41 = HEAP16[$arrayidx559 >> 1];
    var $arrayidx561 = $110 + $d_0366 * 393216 + $sub387 * 1536 + $sub386 * 6 + ($and402 << 1) | 0;
    HEAP16[$arrayidx561 >> 1] = $41;
    var $42 = HEAP32[5560840 >> 2];
    var $cmp566354 = ($42 | 0) > 0;
    if ($cmp566354) {
      var $c_1355 = 0;
      var $xyz_sroa_2_0356 = .5;
      var $xyz_sroa_1_0357 = .5;
      var $xyz_sroa_0_0358 = .5;
      label = 36;
      break;
    } else {
      var $xyz_sroa_0_0_lcssa442 = 0;
      var $xyz_sroa_1_0_lcssa443 = 0;
      var $xyz_sroa_2_0_lcssa445 = 0;
      label = 38;
      break;
    }
   case 36:
    var $xyz_sroa_0_0358;
    var $xyz_sroa_1_0357;
    var $xyz_sroa_2_0356;
    var $c_1355;
    var $arrayidx570 = $xyz_cam + ($c_1355 << 2) | 0;
    var $43 = HEAPF32[$arrayidx570 >> 2];
    var $arrayidx572 = $110 + $d_0366 * 393216 + $sub387 * 1536 + $sub386 * 6 + ($c_1355 << 1) | 0;
    var $44 = HEAP16[$arrayidx572 >> 1];
    var $conv573 = $44 & 65535;
    var $conv574 = $conv573 | 0;
    var $mul575 = $43 * $conv574;
    var $add577 = $xyz_sroa_0_0358 + $mul575;
    var $arrayidx579 = $xyz_cam + 16 + ($c_1355 << 2) | 0;
    var $45 = HEAPF32[$arrayidx579 >> 2];
    var $mul584 = $45 * $conv574;
    var $add586 = $xyz_sroa_1_0357 + $mul584;
    var $arrayidx588 = $xyz_cam + 32 + ($c_1355 << 2) | 0;
    var $46 = HEAPF32[$arrayidx588 >> 2];
    var $mul593 = $46 * $conv574;
    var $add595 = $xyz_sroa_2_0356 + $mul593;
    var $inc597 = $c_1355 + 1 | 0;
    var $cmp566 = ($inc597 | 0) < ($42 | 0);
    if ($cmp566) {
      var $c_1355 = $inc597;
      var $xyz_sroa_2_0356 = $add595;
      var $xyz_sroa_1_0357 = $add586;
      var $xyz_sroa_0_0358 = $add577;
      label = 36;
      break;
    } else {
      label = 37;
      break;
    }
   case 37:
    var $phitmp403 = $add577 & -1;
    var $phitmp404 = $add586 & -1;
    var $phitmp405 = $add595 & -1;
    var $phitmp322 = ($phitmp403 | 0) < 0;
    if ($phitmp322) {
      var $cond624 = 0;
      var $xyz_sroa_1_0_lcssa444 = $phitmp404;
      var $xyz_sroa_2_0_lcssa446 = $phitmp405;
      label = 39;
      break;
    } else {
      var $xyz_sroa_0_0_lcssa442 = $phitmp403;
      var $xyz_sroa_1_0_lcssa443 = $phitmp404;
      var $xyz_sroa_2_0_lcssa445 = $phitmp405;
      label = 38;
      break;
    }
   case 38:
    var $xyz_sroa_2_0_lcssa445;
    var $xyz_sroa_1_0_lcssa443;
    var $xyz_sroa_0_0_lcssa442;
    var $cmp601 = ($xyz_sroa_0_0_lcssa442 | 0) < 65535;
    var $conv600_ = $cmp601 ? $xyz_sroa_0_0_lcssa442 : 65535;
    var $cond624 = $conv600_;
    var $xyz_sroa_1_0_lcssa444 = $xyz_sroa_1_0_lcssa443;
    var $xyz_sroa_2_0_lcssa446 = $xyz_sroa_2_0_lcssa445;
    label = 39;
    break;
   case 39:
    var $xyz_sroa_2_0_lcssa446;
    var $xyz_sroa_1_0_lcssa444;
    var $cond624;
    var $arrayidx625 = $cbrt + ($cond624 << 2) | 0;
    var $47 = HEAPF32[$arrayidx625 >> 2];
    var $phitmp323 = ($xyz_sroa_1_0_lcssa444 | 0) < 0;
    if ($phitmp323) {
      var $cond652 = 0;
      label = 41;
      break;
    } else {
      label = 40;
      break;
    }
   case 40:
    var $cmp629 = ($xyz_sroa_1_0_lcssa444 | 0) < 65535;
    var $conv628_ = $cmp629 ? $xyz_sroa_1_0_lcssa444 : 65535;
    var $cond652 = $conv628_;
    label = 41;
    break;
   case 41:
    var $cond652;
    var $arrayidx653 = $cbrt + ($cond652 << 2) | 0;
    var $48 = HEAPF32[$arrayidx653 >> 2];
    var $phitmp324 = ($xyz_sroa_2_0_lcssa446 | 0) < 0;
    if ($phitmp324) {
      var $cond680 = 0;
      label = 43;
      break;
    } else {
      label = 42;
      break;
    }
   case 42:
    var $cmp657 = ($xyz_sroa_2_0_lcssa446 | 0) < 65535;
    var $conv656_ = $cmp657 ? $xyz_sroa_2_0_lcssa446 : 65535;
    var $cond680 = $conv656_;
    label = 43;
    break;
   case 43:
    var $cond680;
    var $arrayidx681 = $cbrt + ($cond680 << 2) | 0;
    var $49 = HEAPF32[$arrayidx681 >> 2];
    var $mul684 = $48 * 116;
    var $sub685 = $mul684 - 16;
    var $mul686 = $sub685 * 64;
    var $conv687 = $mul686 & -1;
    var $arrayidx689 = $111 + $d_0366 * 393216 + $sub387 * 1536 + $sub386 * 6 | 0;
    HEAP16[$arrayidx689 >> 1] = $conv687;
    var $sub692 = $47 - $48;
    var $mul693 = $sub692 * 32e3;
    var $conv694 = $mul693 & -1;
    var $arrayidx696 = $111 + $d_0366 * 393216 + $sub387 * 1536 + $sub386 * 6 + 2 | 0;
    HEAP16[$arrayidx696 >> 1] = $conv694;
    var $sub699 = $48 - $49;
    var $mul700 = $sub699 * 12800;
    var $conv701 = $mul700 & -1;
    var $arrayidx703 = $111 + $d_0366 * 393216 + $sub387 * 1536 + $sub386 * 6 + 4 | 0;
    HEAP16[$arrayidx703 >> 1] = $conv701;
    var $inc705 = $col_1362 + 1 | 0;
    var $cmp373 = ($inc705 | 0) < ($sub372 | 0);
    if ($cmp373) {
      var $col_1362 = $inc705;
      label = 31;
      break;
    } else {
      label = 44;
      break;
    }
   case 44:
    var $inc708 = $row_1364 + 1 | 0;
    var $cmp360 = ($inc708 | 0) < ($sub359 | 0);
    if ($cmp360) {
      var $row_1364 = $inc708;
      label = 28;
      break;
    } else {
      label = 45;
      break;
    }
   case 45:
    var $inc711 = $d_0366 + 1 | 0;
    var $exitcond = ($inc711 | 0) == 2;
    if ($exitcond) {
      label = 46;
      break;
    } else {
      var $d_0366 = $inc711;
      label = 27;
      break;
    }
   case 46:
    _memset($add_ptr46, 0, 131072);
    var $add727 = $left_0389 + 2 | 0;
    var $sub730 = $left_0389 + 254 | 0;
    var $row_2373 = $add713;
    label = 47;
    break;
   case 47:
    var $row_2373;
    var $conv720 = $113 & 65535;
    var $sub721 = $conv720 - 4 | 0;
    var $cmp722 = ($row_2373 | 0) < ($sub721 | 0);
    if ($cmp722) {
      label = 48;
      break;
    } else {
      label = 56;
      break;
    }
   case 48:
    var $sub726 = $row_2373 - $top_0394 | 0;
    var $col_2372 = $add727;
    label = 49;
    break;
   case 49:
    var $col_2372;
    var $sub735 = $conv53386 - 4 | 0;
    var $cmp736 = ($col_2372 | 0) < ($sub735 | 0);
    if ($cmp736) {
      label = 50;
      break;
    } else {
      label = 55;
      break;
    }
   case 50:
    var $sub740 = $col_2372 - $left_0389 | 0;
    var $arrayidx747_sum = $sub740 - 1 | 0;
    var $arrayidx747_sum_1 = $sub740 + 1 | 0;
    var $arrayidx747_sum_2 = $sub740 - 256 | 0;
    var $arrayidx747_sum_3 = $sub740 + 256 | 0;
    var $d_1369 = 0;
    label = 51;
    break;
   case 51:
    var $d_1369;
    var $arrayidx753 = $111 + $d_1369 * 393216 + $sub726 * 1536 + $sub740 * 6 | 0;
    var $50 = HEAP16[$arrayidx753 >> 1];
    var $conv754 = $50 << 16 >> 16;
    var $arrayidx782 = $111 + $d_1369 * 393216 + $sub726 * 1536 + $sub740 * 6 + 2 | 0;
    var $51 = HEAP16[$arrayidx782 >> 1];
    var $conv783 = $51 << 16 >> 16;
    var $arrayidx799 = $111 + $d_1369 * 393216 + $sub726 * 1536 + $sub740 * 6 + 4 | 0;
    var $52 = HEAP16[$arrayidx799 >> 1];
    var $conv800 = $52 << 16 >> 16;
    var $arrayidx757 = $111 + $d_1369 * 393216 + $sub726 * 1536 + $arrayidx747_sum * 6 | 0;
    var $53 = HEAP16[$arrayidx757 >> 1];
    var $conv758 = $53 << 16 >> 16;
    var $sub759 = $conv754 - $conv758 | 0;
    var $shr768 = $sub759 >> 31;
    var $xor = $shr768 ^ $sub759;
    var $sub778 = $xor - $shr768 | 0;
    var $arrayidx780 = $ldiff + ($d_1369 << 4) | 0;
    HEAP32[$arrayidx780 >> 2] = $sub778;
    var $arrayidx786 = $111 + $d_1369 * 393216 + $sub726 * 1536 + $arrayidx747_sum * 6 + 2 | 0;
    var $54 = HEAP16[$arrayidx786 >> 1];
    var $conv787 = $54 << 16 >> 16;
    var $sub788 = $conv783 - $conv787 | 0;
    var $mul797 = $sub788 * $sub788 & -1;
    var $arrayidx803 = $111 + $d_1369 * 393216 + $sub726 * 1536 + $arrayidx747_sum * 6 + 4 | 0;
    var $55 = HEAP16[$arrayidx803 >> 1];
    var $conv804 = $55 << 16 >> 16;
    var $sub805 = $conv800 - $conv804 | 0;
    var $mul814 = $sub805 * $sub805 & -1;
    var $add815 = $mul814 + $mul797 | 0;
    var $arrayidx817 = $abdiff + ($d_1369 << 4) | 0;
    HEAP32[$arrayidx817 >> 2] = $add815;
    var $arrayidx757_1 = $111 + $d_1369 * 393216 + $sub726 * 1536 + $arrayidx747_sum_1 * 6 | 0;
    var $56 = HEAP16[$arrayidx757_1 >> 1];
    var $conv758_1 = $56 << 16 >> 16;
    var $sub759_1 = $conv754 - $conv758_1 | 0;
    var $shr768_1 = $sub759_1 >> 31;
    var $xor_1 = $shr768_1 ^ $sub759_1;
    var $sub778_1 = $xor_1 - $shr768_1 | 0;
    var $arrayidx780_1 = $ldiff + ($d_1369 << 4) + 4 | 0;
    HEAP32[$arrayidx780_1 >> 2] = $sub778_1;
    var $arrayidx786_1 = $111 + $d_1369 * 393216 + $sub726 * 1536 + $arrayidx747_sum_1 * 6 + 2 | 0;
    var $57 = HEAP16[$arrayidx786_1 >> 1];
    var $conv787_1 = $57 << 16 >> 16;
    var $sub788_1 = $conv783 - $conv787_1 | 0;
    var $mul797_1 = $sub788_1 * $sub788_1 & -1;
    var $arrayidx803_1 = $111 + $d_1369 * 393216 + $sub726 * 1536 + $arrayidx747_sum_1 * 6 + 4 | 0;
    var $58 = HEAP16[$arrayidx803_1 >> 1];
    var $conv804_1 = $58 << 16 >> 16;
    var $sub805_1 = $conv800 - $conv804_1 | 0;
    var $mul814_1 = $sub805_1 * $sub805_1 & -1;
    var $add815_1 = $mul814_1 + $mul797_1 | 0;
    var $arrayidx817_1 = $abdiff + ($d_1369 << 4) + 4 | 0;
    HEAP32[$arrayidx817_1 >> 2] = $add815_1;
    var $arrayidx757_2 = $111 + $d_1369 * 393216 + $sub726 * 1536 + $arrayidx747_sum_2 * 6 | 0;
    var $59 = HEAP16[$arrayidx757_2 >> 1];
    var $conv758_2 = $59 << 16 >> 16;
    var $sub759_2 = $conv754 - $conv758_2 | 0;
    var $shr768_2 = $sub759_2 >> 31;
    var $xor_2 = $shr768_2 ^ $sub759_2;
    var $sub778_2 = $xor_2 - $shr768_2 | 0;
    var $arrayidx780_2 = $ldiff + ($d_1369 << 4) + 8 | 0;
    HEAP32[$arrayidx780_2 >> 2] = $sub778_2;
    var $arrayidx786_2 = $111 + $d_1369 * 393216 + $sub726 * 1536 + $arrayidx747_sum_2 * 6 + 2 | 0;
    var $60 = HEAP16[$arrayidx786_2 >> 1];
    var $conv787_2 = $60 << 16 >> 16;
    var $sub788_2 = $conv783 - $conv787_2 | 0;
    var $mul797_2 = $sub788_2 * $sub788_2 & -1;
    var $arrayidx803_2 = $111 + $d_1369 * 393216 + $sub726 * 1536 + $arrayidx747_sum_2 * 6 + 4 | 0;
    var $61 = HEAP16[$arrayidx803_2 >> 1];
    var $conv804_2 = $61 << 16 >> 16;
    var $sub805_2 = $conv800 - $conv804_2 | 0;
    var $mul814_2 = $sub805_2 * $sub805_2 & -1;
    var $add815_2 = $mul814_2 + $mul797_2 | 0;
    var $arrayidx817_2 = $abdiff + ($d_1369 << 4) + 8 | 0;
    HEAP32[$arrayidx817_2 >> 2] = $add815_2;
    var $arrayidx757_3 = $111 + $d_1369 * 393216 + $sub726 * 1536 + $arrayidx747_sum_3 * 6 | 0;
    var $62 = HEAP16[$arrayidx757_3 >> 1];
    var $conv758_3 = $62 << 16 >> 16;
    var $sub759_3 = $conv754 - $conv758_3 | 0;
    var $shr768_3 = $sub759_3 >> 31;
    var $xor_3 = $shr768_3 ^ $sub759_3;
    var $sub778_3 = $xor_3 - $shr768_3 | 0;
    var $arrayidx780_3 = $ldiff + ($d_1369 << 4) + 12 | 0;
    HEAP32[$arrayidx780_3 >> 2] = $sub778_3;
    var $arrayidx786_3 = $111 + $d_1369 * 393216 + $sub726 * 1536 + $arrayidx747_sum_3 * 6 + 2 | 0;
    var $63 = HEAP16[$arrayidx786_3 >> 1];
    var $conv787_3 = $63 << 16 >> 16;
    var $sub788_3 = $conv783 - $conv787_3 | 0;
    var $mul797_3 = $sub788_3 * $sub788_3 & -1;
    var $arrayidx803_3 = $111 + $d_1369 * 393216 + $sub726 * 1536 + $arrayidx747_sum_3 * 6 + 4 | 0;
    var $64 = HEAP16[$arrayidx803_3 >> 1];
    var $conv804_3 = $64 << 16 >> 16;
    var $sub805_3 = $conv800 - $conv804_3 | 0;
    var $mul814_3 = $sub805_3 * $sub805_3 & -1;
    var $add815_3 = $mul814_3 + $mul797_3 | 0;
    var $arrayidx817_3 = $abdiff + ($d_1369 << 4) + 12 | 0;
    HEAP32[$arrayidx817_3 >> 2] = $add815_3;
    var $inc822 = $d_1369 + 1 | 0;
    var $exitcond407 = ($inc822 | 0) == 2;
    if ($exitcond407) {
      label = 52;
      break;
    } else {
      var $d_1369 = $inc822;
      label = 51;
      break;
    }
   case 52:
    var $65 = HEAP32[$arrayidx825 >> 2];
    var $66 = HEAP32[$arrayidx827 >> 2];
    var $cmp828 = $65 >>> 0 > $66 >>> 0;
    var $_ = $cmp828 ? $65 : $66;
    var $67 = HEAP32[$arrayidx839 >> 2];
    var $68 = HEAP32[$arrayidx841 >> 2];
    var $cmp842 = $67 >>> 0 > $68 >>> 0;
    var $cond851 = $cmp842 ? $67 : $68;
    var $cmp852 = $_ >>> 0 < $cond851 >>> 0;
    var $__cond851 = $cmp852 ? $_ : $cond851;
    var $69 = HEAP32[$arrayidx887 >> 2];
    var $70 = HEAP32[$arrayidx889 >> 2];
    var $cmp890 = $69 >>> 0 > $70 >>> 0;
    var $_347 = $cmp890 ? $69 : $70;
    var $71 = HEAP32[$arrayidx901 >> 2];
    var $72 = HEAP32[$arrayidx903 >> 2];
    var $cmp904 = $71 >>> 0 > $72 >>> 0;
    var $cond913 = $cmp904 ? $71 : $72;
    var $cmp914 = $_347 >>> 0 < $cond913 >>> 0;
    var $cond947 = $cmp914 ? $_347 : $cond913;
    var $arrayidx967 = $112 + ($sub726 << 8) + $sub740 | 0;
    var $cmp958 = $65 >>> 0 > $__cond851 >>> 0;
    var $cmp962 = $69 >>> 0 > $cond947 >>> 0;
    var $or_cond = $cmp958 | $cmp962;
    if ($or_cond) {
      label = 54;
      break;
    } else {
      label = 53;
      break;
    }
   case 53:
    var $73 = HEAP8[$arrayidx967];
    var $inc968 = $73 + 1 & 255;
    HEAP8[$arrayidx967] = $inc968;
    label = 54;
    break;
   case 54:
    var $cmp958_1 = $66 >>> 0 > $__cond851 >>> 0;
    var $cmp962_1 = $70 >>> 0 > $cond947 >>> 0;
    var $or_cond2 = $cmp958_1 | $cmp962_1;
    if ($or_cond2) {
      label = 72;
      break;
    } else {
      label = 71;
      break;
    }
   case 55:
    var $inc980 = $row_2373 + 1 | 0;
    var $cmp717 = ($inc980 | 0) < ($sub716 | 0);
    if ($cmp717) {
      var $row_2373 = $inc980;
      label = 47;
      break;
    } else {
      label = 56;
      break;
    }
   case 56:
    var $add996 = $left_0389 + 3 | 0;
    var $sub999 = $left_0389 + 253 | 0;
    var $row_3384 = $add982;
    label = 57;
    break;
   case 57:
    var $row_3384;
    var $sub990 = $conv720 - 5 | 0;
    var $cmp991 = ($row_3384 | 0) < ($sub990 | 0);
    if ($cmp991) {
      label = 58;
      break;
    } else {
      label = 68;
      break;
    }
   case 58:
    var $sub995 = $row_3384 - $top_0394 | 0;
    var $sub1015 = $sub995 - 1 | 0;
    var $add1017 = $sub995 + 1 | 0;
    var $col_3382 = $add996;
    label = 59;
    break;
   case 59:
    var $col_3382;
    var $cmp1005 = ($col_3382 | 0) < ($sub54387 | 0);
    if ($cmp1005) {
      label = 60;
      break;
    } else {
      label = 67;
      break;
    }
   case 60:
    var $sub1009 = $col_3382 - $left_0389 | 0;
    var $sub1021 = $sub1009 - 1 | 0;
    var $add1023 = $sub1009 + 1 | 0;
    var $i_4375 = $sub1015;
    var $add1032_lcssa377 = 0;
    label = 61;
    break;
   case 61:
    var $add1032_lcssa377;
    var $i_4375;
    var $j_1374 = $sub1021;
    var $74 = $add1032_lcssa377;
    label = 62;
    break;
   case 62:
    var $74;
    var $j_1374;
    var $arrayidx1029 = $112 + ($i_4375 << 8) + $j_1374 | 0;
    var $75 = HEAP8[$arrayidx1029];
    var $conv1030 = $75 << 24 >> 24;
    var $add1032 = $74 + $conv1030 | 0;
    var $inc1034 = $j_1374 + 1 | 0;
    var $cmp1024 = ($inc1034 | 0) > ($add1023 | 0);
    if ($cmp1024) {
      label = 63;
      break;
    } else {
      var $j_1374 = $inc1034;
      var $74 = $add1032;
      label = 62;
      break;
    }
   case 63:
    var $inc1037 = $i_4375 + 1 | 0;
    var $cmp1018 = ($inc1037 | 0) > ($add1017 | 0);
    if ($cmp1018) {
      var $i_4375_1 = $sub1015;
      var $add1032_lcssa377_1 = 0;
      label = 89;
      break;
    } else {
      var $i_4375 = $inc1037;
      var $add1032_lcssa377 = $add1032;
      label = 61;
      break;
    }
   case 64:
    var $cmp1053 = ($add1032_1 | 0) > ($add1032 | 0);
    var $conv1054 = $cmp1053 & 1;
    var $arrayidx1058 = $110 + $conv1054 * 393216 + $sub995 * 1536 + $sub1009 * 6 | 0;
    var $76 = HEAP16[$arrayidx1058 >> 1];
    var $mul1060 = $conv53386 * $row_3384 & -1;
    var $add1061 = $mul1060 + $col_3382 | 0;
    var $77 = HEAP32[5264108 >> 2];
    var $arrayidx1063 = $77 + ($add1061 << 3) | 0;
    HEAP16[$arrayidx1063 >> 1] = $76;
    var $arrayidx1058_1 = $110 + $conv1054 * 393216 + $sub995 * 1536 + $sub1009 * 6 + 2 | 0;
    var $78 = HEAP16[$arrayidx1058_1 >> 1];
    var $arrayidx1063_1 = $77 + ($add1061 << 3) + 2 | 0;
    HEAP16[$arrayidx1063_1 >> 1] = $78;
    var $arrayidx1058_2 = $110 + $conv1054 * 393216 + $sub995 * 1536 + $sub1009 * 6 + 4 | 0;
    var $79 = HEAP16[$arrayidx1058_2 >> 1];
    var $arrayidx1063_2 = $77 + ($add1061 << 3) + 4 | 0;
    HEAP16[$arrayidx1063_2 >> 1] = $79;
    label = 66;
    break;
   case 65:
    var $arrayidx1075 = $110 + $sub995 * 1536 + $sub1009 * 6 | 0;
    var $80 = HEAP16[$arrayidx1075 >> 1];
    var $conv1076 = $80 & 65535;
    var $arrayidx1080 = $7 + $sub995 * 1536 + $sub1009 * 6 | 0;
    var $81 = HEAP16[$arrayidx1080 >> 1];
    var $conv1081 = $81 & 65535;
    var $add1082 = $conv1081 + $conv1076 | 0;
    var $shr1083 = $add1082 >>> 1;
    var $conv1084 = $shr1083 & 65535;
    var $mul1086 = $conv53386 * $row_3384 & -1;
    var $add1087 = $mul1086 + $col_3382 | 0;
    var $82 = HEAP32[5264108 >> 2];
    var $arrayidx1089 = $82 + ($add1087 << 3) | 0;
    HEAP16[$arrayidx1089 >> 1] = $conv1084;
    var $arrayidx1075_1 = $110 + $sub995 * 1536 + $sub1009 * 6 + 2 | 0;
    var $83 = HEAP16[$arrayidx1075_1 >> 1];
    var $conv1076_1 = $83 & 65535;
    var $arrayidx1080_1 = $7 + $sub995 * 1536 + $sub1009 * 6 + 2 | 0;
    var $84 = HEAP16[$arrayidx1080_1 >> 1];
    var $conv1081_1 = $84 & 65535;
    var $add1082_1 = $conv1081_1 + $conv1076_1 | 0;
    var $shr1083_1 = $add1082_1 >>> 1;
    var $conv1084_1 = $shr1083_1 & 65535;
    var $arrayidx1089_1 = $82 + ($add1087 << 3) + 2 | 0;
    HEAP16[$arrayidx1089_1 >> 1] = $conv1084_1;
    var $arrayidx1075_2 = $110 + $sub995 * 1536 + $sub1009 * 6 + 4 | 0;
    var $85 = HEAP16[$arrayidx1075_2 >> 1];
    var $conv1076_2 = $85 & 65535;
    var $arrayidx1080_2 = $7 + $sub995 * 1536 + $sub1009 * 6 + 4 | 0;
    var $86 = HEAP16[$arrayidx1080_2 >> 1];
    var $conv1081_2 = $86 & 65535;
    var $add1082_2 = $conv1081_2 + $conv1076_2 | 0;
    var $shr1083_2 = $add1082_2 >>> 1;
    var $conv1084_2 = $shr1083_2 & 65535;
    var $arrayidx1089_2 = $82 + ($add1087 << 3) + 4 | 0;
    HEAP16[$arrayidx1089_2 >> 1] = $conv1084_2;
    label = 66;
    break;
   case 66:
    var $inc1095 = $col_3382 + 1 | 0;
    var $cmp1000 = ($inc1095 | 0) < ($sub999 | 0);
    if ($cmp1000) {
      var $col_3382 = $inc1095;
      label = 59;
      break;
    } else {
      label = 67;
      break;
    }
   case 67:
    var $inc1098 = $row_3384 + 1 | 0;
    var $cmp986 = ($inc1098 | 0) < ($sub985 | 0);
    if ($cmp986) {
      var $row_3384 = $inc1098;
      label = 57;
      break;
    } else {
      label = 68;
      break;
    }
   case 68:
    var $add1101 = $left_0389 + 250 | 0;
    var $cmp55 = ($add1101 | 0) < ($sub54387 | 0);
    if ($cmp55) {
      var $left_0389 = $add1101;
      label = 13;
      break;
    } else {
      label = 69;
      break;
    }
   case 69:
    var $add1104 = $top_0394 + 250 | 0;
    var $cmp49 = ($add1104 | 0) < ($sub392 | 0);
    if ($cmp49) {
      var $top_0394 = $add1104;
      label = 11;
      break;
    } else {
      label = 70;
      break;
    }
   case 70:
    _free($call45);
    STACKTOP = __stackBase__;
    return;
   case 71:
    var $87 = HEAP8[$arrayidx967];
    var $inc968_1 = $87 + 1 & 255;
    HEAP8[$arrayidx967] = $inc968_1;
    label = 72;
    break;
   case 72:
    var $88 = HEAP32[$arrayidx957_2 >> 2];
    var $cmp958_2 = $88 >>> 0 > $__cond851 >>> 0;
    if ($cmp958_2) {
      label = 75;
      break;
    } else {
      label = 73;
      break;
    }
   case 73:
    var $89 = HEAP32[$arrayidx961_2 >> 2];
    var $cmp962_2 = $89 >>> 0 > $cond947 >>> 0;
    if ($cmp962_2) {
      label = 75;
      break;
    } else {
      label = 74;
      break;
    }
   case 74:
    var $90 = HEAP8[$arrayidx967];
    var $inc968_2 = $90 + 1 & 255;
    HEAP8[$arrayidx967] = $inc968_2;
    label = 75;
    break;
   case 75:
    var $91 = HEAP32[$arrayidx957_3 >> 2];
    var $cmp958_3 = $91 >>> 0 > $__cond851 >>> 0;
    if ($cmp958_3) {
      label = 78;
      break;
    } else {
      label = 76;
      break;
    }
   case 76:
    var $92 = HEAP32[$arrayidx961_3 >> 2];
    var $cmp962_3 = $92 >>> 0 > $cond947 >>> 0;
    if ($cmp962_3) {
      label = 78;
      break;
    } else {
      label = 77;
      break;
    }
   case 77:
    var $93 = HEAP8[$arrayidx967];
    var $inc968_3 = $93 + 1 & 255;
    HEAP8[$arrayidx967] = $inc968_3;
    label = 78;
    break;
   case 78:
    var $arrayidx967_1 = $112 + 65536 + ($sub726 << 8) + $sub740 | 0;
    var $94 = HEAP32[$arrayidx957_1410 >> 2];
    var $cmp958_1411 = $94 >>> 0 > $__cond851 >>> 0;
    if ($cmp958_1411) {
      label = 81;
      break;
    } else {
      label = 79;
      break;
    }
   case 79:
    var $95 = HEAP32[$arrayidx961_1412 >> 2];
    var $cmp962_1413 = $95 >>> 0 > $cond947 >>> 0;
    if ($cmp962_1413) {
      label = 81;
      break;
    } else {
      label = 80;
      break;
    }
   case 80:
    var $96 = HEAP8[$arrayidx967_1];
    var $inc968_1415 = $96 + 1 & 255;
    HEAP8[$arrayidx967_1] = $inc968_1415;
    label = 81;
    break;
   case 81:
    var $97 = HEAP32[$arrayidx957_1_1 >> 2];
    var $cmp958_1_1 = $97 >>> 0 > $__cond851 >>> 0;
    if ($cmp958_1_1) {
      label = 84;
      break;
    } else {
      label = 82;
      break;
    }
   case 82:
    var $98 = HEAP32[$arrayidx961_1_1 >> 2];
    var $cmp962_1_1 = $98 >>> 0 > $cond947 >>> 0;
    if ($cmp962_1_1) {
      label = 84;
      break;
    } else {
      label = 83;
      break;
    }
   case 83:
    var $99 = HEAP8[$arrayidx967_1];
    var $inc968_1_1 = $99 + 1 & 255;
    HEAP8[$arrayidx967_1] = $inc968_1_1;
    label = 84;
    break;
   case 84:
    var $cmp958_2_1 = $67 >>> 0 > $__cond851 >>> 0;
    var $cmp962_2_1 = $71 >>> 0 > $cond947 >>> 0;
    var $or_cond3 = $cmp958_2_1 | $cmp962_2_1;
    if ($or_cond3) {
      label = 86;
      break;
    } else {
      label = 85;
      break;
    }
   case 85:
    var $100 = HEAP8[$arrayidx967_1];
    var $inc968_2_1 = $100 + 1 & 255;
    HEAP8[$arrayidx967_1] = $inc968_2_1;
    label = 86;
    break;
   case 86:
    var $cmp958_3_1 = $68 >>> 0 > $__cond851 >>> 0;
    var $cmp962_3_1 = $72 >>> 0 > $cond947 >>> 0;
    var $or_cond4 = $cmp958_3_1 | $cmp962_3_1;
    if ($or_cond4) {
      label = 88;
      break;
    } else {
      label = 87;
      break;
    }
   case 87:
    var $101 = HEAP8[$arrayidx967_1];
    var $inc968_3_1 = $101 + 1 & 255;
    HEAP8[$arrayidx967_1] = $inc968_3_1;
    label = 88;
    break;
   case 88:
    var $inc977 = $col_2372 + 1 | 0;
    var $cmp731 = ($inc977 | 0) < ($sub730 | 0);
    if ($cmp731) {
      var $col_2372 = $inc977;
      label = 49;
      break;
    } else {
      label = 55;
      break;
    }
   case 89:
    var $add1032_lcssa377_1;
    var $i_4375_1;
    var $j_1374_1 = $sub1021;
    var $102 = $add1032_lcssa377_1;
    label = 90;
    break;
   case 90:
    var $102;
    var $j_1374_1;
    var $arrayidx1029_1 = $112 + 65536 + ($i_4375_1 << 8) + $j_1374_1 | 0;
    var $103 = HEAP8[$arrayidx1029_1];
    var $conv1030_1 = $103 << 24 >> 24;
    var $add1032_1 = $102 + $conv1030_1 | 0;
    var $inc1034_1 = $j_1374_1 + 1 | 0;
    var $cmp1024_1 = ($inc1034_1 | 0) > ($add1023 | 0);
    if ($cmp1024_1) {
      label = 91;
      break;
    } else {
      var $j_1374_1 = $inc1034_1;
      var $102 = $add1032_1;
      label = 90;
      break;
    }
   case 91:
    var $inc1037_1 = $i_4375_1 + 1 | 0;
    var $cmp1018_1 = ($inc1037_1 | 0) > ($add1017 | 0);
    if ($cmp1018_1) {
      label = 92;
      break;
    } else {
      var $i_4375_1 = $inc1037_1;
      var $add1032_lcssa377_1 = $add1032_1;
      label = 89;
      break;
    }
   case 92:
    var $cmp1044 = ($add1032 | 0) == ($add1032_1 | 0);
    if ($cmp1044) {
      label = 65;
      break;
    } else {
      label = 64;
      break;
    }
   case 93:
    var $j_0399_1;
    var $arrayidx17_1 = $xyz_cam + 16 + ($j_0399_1 << 2) | 0;
    var $arrayidx25_1427 = 5244964 + ($j_0399_1 << 2) | 0;
    var $104 = HEAPF32[$arrayidx25_1427 >> 2];
    var $conv26_1428 = $104;
    var $mul27_1429 = $conv26_1428 * .212671;
    var $add34_1431 = $mul27_1429;
    var $conv35_1432 = $add34_1431;
    var $arrayidx25_1_1 = 5244980 + ($j_0399_1 << 2) | 0;
    var $105 = HEAPF32[$arrayidx25_1_1 >> 2];
    var $conv26_1_1 = $105;
    var $mul27_1_1 = $conv26_1_1 * .71516;
    var $conv33_1_1 = $conv35_1432;
    var $add34_1_1 = $mul27_1_1 + $conv33_1_1;
    var $conv35_1_1 = $add34_1_1;
    var $arrayidx25_2_1 = 5244996 + ($j_0399_1 << 2) | 0;
    var $106 = HEAPF32[$arrayidx25_2_1 >> 2];
    var $conv26_2_1 = $106;
    var $mul27_2_1 = $conv26_2_1 * .072169;
    var $conv33_2_1 = $conv35_1_1;
    var $add34_2_1 = $mul27_2_1 + $conv33_2_1;
    var $conv35_2_1 = $add34_2_1;
    HEAPF32[$arrayidx17_1 >> 2] = $conv35_2_1;
    var $inc40_1 = $j_0399_1 + 1 | 0;
    var $exitcond423_1 = ($inc40_1 | 0) == ($3 | 0);
    if ($exitcond423_1) {
      var $j_0399_2 = 0;
      label = 94;
      break;
    } else {
      var $j_0399_1 = $inc40_1;
      label = 93;
      break;
    }
   case 94:
    var $j_0399_2;
    var $arrayidx17_2 = $xyz_cam + 32 + ($j_0399_2 << 2) | 0;
    var $arrayidx25_2434 = 5244964 + ($j_0399_2 << 2) | 0;
    var $107 = HEAPF32[$arrayidx25_2434 >> 2];
    var $conv26_2435 = $107;
    var $mul27_2436 = $conv26_2435 * .019334;
    var $div30_2437 = $mul27_2436 / 1.0887540578842163;
    var $add34_2438 = $div30_2437;
    var $conv35_2439 = $add34_2438;
    var $arrayidx25_1_2 = 5244980 + ($j_0399_2 << 2) | 0;
    var $108 = HEAPF32[$arrayidx25_1_2 >> 2];
    var $conv26_1_2 = $108;
    var $mul27_1_2 = $conv26_1_2 * .119193;
    var $div30_1_2 = $mul27_1_2 / 1.0887540578842163;
    var $conv33_1_2 = $conv35_2439;
    var $add34_1_2 = $div30_1_2 + $conv33_1_2;
    var $conv35_1_2 = $add34_1_2;
    var $arrayidx25_2_2 = 5244996 + ($j_0399_2 << 2) | 0;
    var $109 = HEAPF32[$arrayidx25_2_2 >> 2];
    var $conv26_2_2 = $109;
    var $mul27_2_2 = $conv26_2_2 * .950227;
    var $div30_2_2 = $mul27_2_2 / 1.0887540578842163;
    var $conv33_2_2 = $conv35_1_2;
    var $add34_2_2 = $div30_2_2 + $conv33_2_2;
    var $conv35_2_2 = $add34_2_2;
    HEAPF32[$arrayidx17_2 >> 2] = $conv35_2_2;
    var $inc40_2 = $j_0399_2 + 1 | 0;
    var $exitcond423_2 = ($inc40_2 | 0) == ($3 | 0);
    if ($exitcond423_2) {
      label = 95;
      break;
    } else {
      var $j_0399_2 = $inc40_2;
      label = 94;
      break;
    }
   case 95:
    _border_interpolate(5);
    var $call45 = _malloc(1703936);
    _merror($call45, 5576920);
    var $110 = $call45;
    var $add_ptr = $call45 + 786432 | 0;
    var $111 = $add_ptr;
    var $add_ptr46 = $call45 + 1572864 | 0;
    var $112 = $add_ptr46;
    var $113 = HEAP16[5398712 >> 1];
    var $conv48391 = $113 & 65535;
    var $sub392 = $conv48391 - 5 | 0;
    var $cmp49393 = ($sub392 | 0) > 2;
    if ($cmp49393) {
      label = 10;
      break;
    } else {
      label = 70;
      break;
    }
  }
}
_ahd_interpolate["X"] = 1;
function _median_filter() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 36 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $med = __stackBase__;
    var $0 = HEAP32[5263492 >> 2];
    var $cmp66 = ($0 | 0) < 1;
    if ($cmp66) {
      label = 25;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $arrayidx106 = $med + 16 | 0;
    var $pass_067 = 1;
    label = 4;
    break;
   case 4:
    var $pass_067;
    var $_b = HEAP8[5243532];
    if ($_b) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    var $1 = HEAP32[_stderr >> 2];
    var $call = _fprintf($1, 5576808, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $pass_067, tempInt));
    label = 6;
    break;
   case 6:
    var $_pre = HEAP32[5264108 >> 2];
    var $_pre1 = HEAP16[5242964 >> 1];
    var $_pre2 = HEAP16[5398712 >> 1];
    var $c_064 = 0;
    label = 7;
    break;
   case 7:
    var $c_064;
    var $conv40 = $_pre1 & 65535;
    var $conv541 = $_pre2 & 65535;
    var $mul42 = $conv541 * $conv40 & -1;
    var $cmp644 = ($mul42 | 0) == 0;
    if ($cmp644) {
      var $conv_lcssa = $conv40;
      label = 9;
      break;
    } else {
      var $pix_045 = $_pre;
      label = 8;
      break;
    }
   case 8:
    var $pix_045;
    var $arrayidx9 = $pix_045 + ($c_064 << 1) | 0;
    var $2 = HEAP16[$arrayidx9 >> 1];
    var $arrayidx11 = $pix_045 + 6 | 0;
    HEAP16[$arrayidx11 >> 1] = $2;
    var $incdec_ptr = $pix_045 + 8 | 0;
    var $conv = $_pre1 & 65535;
    var $conv5 = $_pre2 & 65535;
    var $mul = $conv5 * $conv & -1;
    var $add_ptr = $_pre + ($mul << 3) | 0;
    var $cmp6 = $incdec_ptr >>> 0 < $add_ptr >>> 0;
    if ($cmp6) {
      var $pix_045 = $incdec_ptr;
      label = 8;
      break;
    } else {
      var $conv_lcssa = $conv;
      label = 9;
      break;
    }
   case 9:
    var $conv_lcssa;
    var $conv1554 = $_pre1 & 65535;
    var $conv1655 = $_pre2 & 65535;
    var $sub56 = $conv1655 - 1 | 0;
    var $mul1757 = $sub56 * $conv1554 & -1;
    var $add_ptr1858 = $_pre + ($mul1757 << 3) | 0;
    var $cmp1959 = ($conv_lcssa | 0) < ($mul1757 | 0);
    if ($cmp1959) {
      label = 10;
      break;
    } else {
      label = 23;
      break;
    }
   case 10:
    var $add_ptr13 = $_pre + ($conv_lcssa << 3) | 0;
    var $pix_160 = $add_ptr13;
    label = 11;
    break;
   case 11:
    var $pix_160;
    var $sub_ptr_lhs_cast = $pix_160;
    var $sub_ptr_rhs_cast = $_pre;
    var $sub_ptr_sub = $sub_ptr_lhs_cast - $sub_ptr_rhs_cast | 0;
    var $sub_ptr_div = $sub_ptr_sub >> 3;
    var $add = $sub_ptr_div + 1 | 0;
    var $rem = ($add | 0) % ($conv1554 | 0);
    var $cmp23 = ($rem | 0) < 2;
    if ($cmp23) {
      label = 22;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $sub28 = -$conv1554 | 0;
    var $cmp3150 = ($conv1554 | 0) < ($sub28 | 0);
    if ($cmp3150) {
      var $i_153 = 0;
      label = 16;
      break;
    } else {
      var $i_051 = $sub28;
      var $k_052 = 0;
      label = 13;
      break;
    }
   case 13:
    var $k_052;
    var $i_051;
    var $sub34 = $i_051 - 1 | 0;
    var $add36 = $i_051 + 1 | 0;
    var $j_047 = $sub34;
    var $k_148 = $k_052;
    label = 14;
    break;
   case 14:
    var $k_148;
    var $j_047;
    var $arrayidx41 = $pix_160 + ($j_047 << 3) + 6 | 0;
    var $3 = HEAP16[$arrayidx41 >> 1];
    var $conv42 = $3 & 65535;
    var $arrayidx44 = $pix_160 + ($j_047 << 3) + 2 | 0;
    var $4 = HEAP16[$arrayidx44 >> 1];
    var $conv45 = $4 & 65535;
    var $sub46 = $conv42 - $conv45 | 0;
    var $inc = $k_148 + 1 | 0;
    var $arrayidx47 = $med + ($k_148 << 2) | 0;
    HEAP32[$arrayidx47 >> 2] = $sub46;
    var $inc49 = $j_047 + 1 | 0;
    var $cmp37 = ($inc49 | 0) > ($add36 | 0);
    if ($cmp37) {
      label = 15;
      break;
    } else {
      var $j_047 = $inc49;
      var $k_148 = $inc;
      label = 14;
      break;
    }
   case 15:
    var $add53 = $conv1554 + $i_051 | 0;
    var $cmp31 = ($i_051 | 0) > 0;
    if ($cmp31) {
      var $i_153 = 0;
      label = 16;
      break;
    } else {
      var $i_051 = $add53;
      var $k_052 = $inc;
      label = 13;
      break;
    }
   case 16:
    var $i_153;
    var $arrayidx59 = $i_153 + 5263452 | 0;
    var $5 = HEAP8[$arrayidx59];
    var $idxprom = $5 & 255;
    var $arrayidx60 = $med + ($idxprom << 2) | 0;
    var $6 = HEAP32[$arrayidx60 >> 2];
    var $add6139 = $i_153 | 1;
    var $arrayidx62 = $add6139 + 5263452 | 0;
    var $7 = HEAP8[$arrayidx62];
    var $idxprom63 = $7 & 255;
    var $arrayidx64 = $med + ($idxprom63 << 2) | 0;
    var $8 = HEAP32[$arrayidx64 >> 2];
    var $cmp65 = ($6 | 0) > ($8 | 0);
    if ($cmp65) {
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 17:
    var $add75 = $8 + $6 | 0;
    HEAP32[$arrayidx60 >> 2] = $add75;
    var $9 = HEAP32[$arrayidx64 >> 2];
    var $sub86 = $add75 - $9 | 0;
    HEAP32[$arrayidx64 >> 2] = $sub86;
    var $10 = HEAP32[$arrayidx60 >> 2];
    var $sub98 = $10 - $sub86 | 0;
    HEAP32[$arrayidx60 >> 2] = $sub98;
    label = 18;
    break;
   case 18:
    var $add104 = $i_153 + 2 | 0;
    var $cmp56 = $add104 >>> 0 < 38;
    if ($cmp56) {
      var $i_153 = $add104;
      label = 16;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $11 = HEAP32[$arrayidx106 >> 2];
    var $arrayidx108 = $pix_160 + 2 | 0;
    var $12 = HEAP16[$arrayidx108 >> 1];
    var $conv109 = $12 & 65535;
    var $add110 = $conv109 + $11 | 0;
    var $phitmp = ($add110 | 0) < 0;
    if ($phitmp) {
      var $cond139 = 0;
      label = 21;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    var $cmp111 = ($add110 | 0) < 65535;
    var $phitmp38 = $add110 & 65535;
    var $phitmp38_ = $cmp111 ? $phitmp38 : -1;
    var $cond139 = $phitmp38_;
    label = 21;
    break;
   case 21:
    var $cond139;
    var $arrayidx142 = $pix_160 + ($c_064 << 1) | 0;
    HEAP16[$arrayidx142 >> 1] = $cond139;
    label = 22;
    break;
   case 22:
    var $incdec_ptr144 = $pix_160 + 8 | 0;
    var $cmp19 = $incdec_ptr144 >>> 0 < $add_ptr1858 >>> 0;
    if ($cmp19) {
      var $pix_160 = $incdec_ptr144;
      label = 11;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    var $add147 = $c_064 + 2 | 0;
    var $cmp2 = ($add147 | 0) < 3;
    if ($cmp2) {
      var $c_064 = $add147;
      label = 7;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    var $inc150 = $pass_067 + 1 | 0;
    var $13 = HEAP32[5263492 >> 2];
    var $cmp = ($inc150 | 0) > ($13 | 0);
    if ($cmp) {
      label = 25;
      break;
    } else {
      var $pass_067 = $inc150;
      label = 4;
      break;
    }
   case 25:
    STACKTOP = __stackBase__;
    return;
  }
}
_median_filter["X"] = 1;
function _blend_highlights() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 64 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $cam = __stackBase__;
    var $lab = __stackBase__ + 32;
    var $0 = HEAP32[5560840 >> 2];
    var $sub = $0 - 3 | 0;
    var $cmp = $sub >>> 0 > 1;
    if ($cmp) {
      label = 32;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $_b = HEAP8[5243532];
    if ($_b) {
      label = 4;
      break;
    } else {
      var $3 = $0;
      label = 5;
      break;
    }
   case 4:
    var $1 = HEAP32[_stderr >> 2];
    var $2 = _fwrite(5576704, 23, 1, $1);
    var $_pre = HEAP32[5560840 >> 2];
    var $3 = $_pre;
    label = 5;
    break;
   case 5:
    var $3;
    var $cmp394 = ($3 | 0) > 0;
    if ($cmp394) {
      var $c_095 = 0;
      var $clip_096 = 2147483647;
      label = 8;
      break;
    } else {
      var $clip_0_lcssa = 2147483647;
      label = 6;
      break;
    }
   case 6:
    var $clip_0_lcssa;
    var $4 = HEAP16[5398712 >> 1];
    var $cmp1091 = $4 << 16 >> 16 == 0;
    if ($cmp1091) {
      label = 32;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $conv52 = $clip_0_lcssa | 0;
    var $_pre5 = HEAP16[5242964 >> 1];
    var $row_092 = 0;
    var $7 = $_pre5;
    var $6 = $3;
    label = 9;
    break;
   case 8:
    var $clip_096;
    var $c_095;
    var $arrayidx = 5245640 + ($c_095 << 2) | 0;
    var $5 = HEAPF32[$arrayidx >> 2];
    var $mul = $5 * 65535;
    var $conv = $mul & -1;
    var $cmp4 = ($clip_096 | 0) > ($conv | 0);
    var $conv_clip_0 = $cmp4 ? $conv : $clip_096;
    var $inc = $c_095 + 1 | 0;
    var $cmp3 = ($inc | 0) < ($3 | 0);
    if ($cmp3) {
      var $c_095 = $inc;
      var $clip_096 = $conv_clip_0;
      label = 8;
      break;
    } else {
      var $clip_0_lcssa = $conv_clip_0;
      label = 6;
      break;
    }
   case 9:
    var $6;
    var $7;
    var $row_092;
    var $cmp1586 = $7 << 16 >> 16 == 0;
    if ($cmp1586) {
      var $21 = 0;
      var $20 = $6;
      label = 31;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $_pre8 = HEAP32[5264108 >> 2];
    var $col_087 = 0;
    var $8 = $6;
    label = 11;
    break;
   case 11:
    var $8;
    var $col_087;
    var $conv22 = $_pre5 & 65535;
    var $mul23 = $conv22 * $row_092 & -1;
    var $add = $mul23 + $col_087 | 0;
    var $c_1 = 0;
    label = 12;
    break;
   case 12:
    var $c_1;
    var $cmp19 = ($c_1 | 0) < ($8 | 0);
    if ($cmp19) {
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    var $arrayidx25 = $_pre8 + ($add << 3) + ($c_1 << 1) | 0;
    var $9 = HEAP16[$arrayidx25 >> 1];
    var $conv26 = $9 & 65535;
    var $cmp27 = ($conv26 | 0) > ($clip_0_lcssa | 0);
    var $inc32 = $c_1 + 1 | 0;
    if ($cmp27) {
      label = 14;
      break;
    } else {
      var $c_1 = $inc32;
      label = 12;
      break;
    }
   case 14:
    var $cmp34 = ($c_1 | 0) == ($8 | 0);
    var $cmp394_not = $cmp394 ^ 1;
    var $brmerge = $cmp34 | $cmp394_not;
    var $_mux = $cmp34 ? $8 : $3;
    if ($brmerge) {
      var $19 = $_mux;
      label = 30;
      break;
    } else {
      var $c_263 = 0;
      label = 15;
      break;
    }
   case 15:
    var $c_263;
    var $arrayidx46 = $_pre8 + ($add << 3) + ($c_263 << 1) | 0;
    var $10 = HEAP16[$arrayidx46 >> 1];
    var $conv47 = $10 & 65535;
    var $arrayidx49 = $cam + ($c_263 << 2) | 0;
    HEAPF32[$arrayidx49 >> 2] = $conv47;
    var $cmp53 = $conv47 < $conv52;
    var $conv47_conv52 = $cmp53 ? $conv47 : $conv52;
    var $arrayidx59 = $cam + 16 + ($c_263 << 2) | 0;
    HEAPF32[$arrayidx59 >> 2] = $conv47_conv52;
    var $inc61 = $c_263 + 1 | 0;
    var $cmp39 = ($inc61 | 0) < ($3 | 0);
    if ($cmp39) {
      var $c_263 = $inc61;
      label = 15;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $cmp9570 = ($3 | 0) > 1;
    var $sub77 = $3 - 3 | 0;
    var $c_368 = 0;
    label = 17;
    break;
   case 17:
    var $c_368;
    var $arrayidx72 = $lab + ($c_368 << 2) | 0;
    HEAPF32[$arrayidx72 >> 2] = 0;
    var $j_065 = 0;
    var $add8666 = 0;
    label = 18;
    break;
   case 18:
    var $add8666;
    var $j_065;
    var $arrayidx80 = 5561144 + ($sub77 << 6) + ($c_368 << 4) + ($j_065 << 2) | 0;
    var $11 = HEAPF32[$arrayidx80 >> 2];
    var $arrayidx82 = $cam + ($j_065 << 2) | 0;
    var $12 = HEAPF32[$arrayidx82 >> 2];
    var $mul83 = $11 * $12;
    var $add86 = $add8666 + $mul83;
    var $inc88 = $j_065 + 1 | 0;
    var $exitcond = ($inc88 | 0) == ($3 | 0);
    if ($exitcond) {
      label = 19;
      break;
    } else {
      var $j_065 = $inc88;
      var $add8666 = $add86;
      label = 18;
      break;
    }
   case 19:
    HEAPF32[$arrayidx72 >> 2] = $add86;
    var $inc91 = $c_368 + 1 | 0;
    var $exitcond97 = ($inc91 | 0) == ($3 | 0);
    if ($exitcond97) {
      label = 20;
      break;
    } else {
      var $c_368 = $inc91;
      label = 17;
      break;
    }
   case 20:
    if ($cmp9570) {
      var $c_471 = 1;
      var $13 = 0;
      label = 21;
      break;
    } else {
      var $cmp9570108113119 = 0;
      var $sum_sroa_0_1 = 0;
      label = 33;
      break;
    }
   case 21:
    var $13;
    var $c_471;
    var $arrayidx99 = $lab + ($c_471 << 2) | 0;
    var $14 = HEAPF32[$arrayidx99 >> 2];
    var $mul102 = $14 * $14;
    var $add104 = $13 + $mul102;
    var $inc106 = $c_471 + 1 | 0;
    var $exitcond99 = ($inc106 | 0) == ($3 | 0);
    if ($exitcond99) {
      var $cmp9570108113119 = 1;
      var $sum_sroa_0_1 = $add104;
      label = 33;
      break;
    } else {
      var $c_471 = $inc106;
      var $13 = $add104;
      label = 21;
      break;
    }
   case 22:
    var $c_576;
    var $arrayidx121 = $lab + ($c_576 << 2) | 0;
    var $15 = HEAPF32[$arrayidx121 >> 2];
    var $mul122 = $conv115 * $15;
    HEAPF32[$arrayidx121 >> 2] = $mul122;
    var $inc124 = $c_576 + 1 | 0;
    var $cmp117 = ($inc124 | 0) < ($3 | 0);
    if ($cmp117) {
      var $c_576 = $inc124;
      label = 22;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    if ($cmp394) {
      label = 24;
      break;
    } else {
      var $19 = $3;
      label = 30;
      break;
    }
   case 24:
    var $sub136 = $3 - 3 | 0;
    var $c_681 = 0;
    label = 25;
    break;
   case 25:
    var $c_681;
    var $arrayidx131 = $cam + ($c_681 << 2) | 0;
    HEAPF32[$arrayidx131 >> 2] = 0;
    var $j_178 = 0;
    var $add14579 = 0;
    label = 26;
    break;
   case 26:
    var $add14579;
    var $j_178;
    var $arrayidx139 = 5561272 + ($sub136 << 6) + ($c_681 << 4) + ($j_178 << 2) | 0;
    var $16 = HEAPF32[$arrayidx139 >> 2];
    var $arrayidx141 = $lab + ($j_178 << 2) | 0;
    var $17 = HEAPF32[$arrayidx141 >> 2];
    var $mul142 = $16 * $17;
    var $add145 = $add14579 + $mul142;
    var $inc147 = $j_178 + 1 | 0;
    var $exitcond102 = ($inc147 | 0) == ($3 | 0);
    if ($exitcond102) {
      label = 27;
      break;
    } else {
      var $j_178 = $inc147;
      var $add14579 = $add145;
      label = 26;
      break;
    }
   case 27:
    HEAPF32[$arrayidx131 >> 2] = $add145;
    var $inc150 = $c_681 + 1 | 0;
    var $cmp127 = ($inc150 | 0) < ($3 | 0);
    if ($cmp127) {
      var $c_681 = $inc150;
      label = 25;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    if ($cmp394) {
      var $c_784 = 0;
      label = 29;
      break;
    } else {
      var $19 = $3;
      label = 30;
      break;
    }
   case 29:
    var $c_784;
    var $arrayidx157 = $cam + ($c_784 << 2) | 0;
    var $18 = HEAPF32[$arrayidx157 >> 2];
    var $conv158 = $3 | 0;
    var $div159 = $18 / $conv158;
    var $conv160 = $div159 >= 0 ? Math.floor($div159) : Math.ceil($div159);
    var $conv161 = $_pre5 & 65535;
    var $mul162 = $conv161 * $row_092 & -1;
    var $add163 = $mul162 + $col_087 | 0;
    var $arrayidx165 = $_pre8 + ($add163 << 3) + ($c_784 << 1) | 0;
    HEAP16[$arrayidx165 >> 1] = $conv160;
    var $inc167 = $c_784 + 1 | 0;
    var $cmp153 = ($inc167 | 0) < ($3 | 0);
    if ($cmp153) {
      var $c_784 = $inc167;
      label = 29;
      break;
    } else {
      var $19 = $3;
      label = 30;
      break;
    }
   case 30:
    var $19;
    var $inc170 = $col_087 + 1 | 0;
    var $conv14 = $_pre5 & 65535;
    var $cmp15 = ($inc170 | 0) < ($conv14 | 0);
    if ($cmp15) {
      var $col_087 = $inc170;
      var $8 = $19;
      label = 11;
      break;
    } else {
      var $21 = $_pre5;
      var $20 = $19;
      label = 31;
      break;
    }
   case 31:
    var $20;
    var $21;
    var $inc173 = $row_092 + 1 | 0;
    var $conv9 = $4 & 65535;
    var $cmp10 = ($inc173 | 0) < ($conv9 | 0);
    if ($cmp10) {
      var $row_092 = $inc173;
      var $7 = $21;
      var $6 = $20;
      label = 9;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    STACKTOP = __stackBase__;
    return;
   case 33:
    var $sum_sroa_0_1;
    var $cmp9570108113119;
    var $sub77_1 = $3 - 3 | 0;
    var $c_368_1 = 0;
    label = 34;
    break;
   case 34:
    var $c_368_1;
    var $arrayidx72_1 = $lab + 16 + ($c_368_1 << 2) | 0;
    HEAPF32[$arrayidx72_1 >> 2] = 0;
    var $j_065_1 = 0;
    var $add8666_1 = 0;
    label = 35;
    break;
   case 35:
    var $add8666_1;
    var $j_065_1;
    var $arrayidx80_1 = 5561144 + ($sub77_1 << 6) + ($c_368_1 << 4) + ($j_065_1 << 2) | 0;
    var $22 = HEAPF32[$arrayidx80_1 >> 2];
    var $arrayidx82_1 = $cam + 16 + ($j_065_1 << 2) | 0;
    var $23 = HEAPF32[$arrayidx82_1 >> 2];
    var $mul83_1 = $22 * $23;
    var $add86_1 = $add8666_1 + $mul83_1;
    var $inc88_1 = $j_065_1 + 1 | 0;
    var $exitcond_1 = ($inc88_1 | 0) == ($3 | 0);
    if ($exitcond_1) {
      label = 36;
      break;
    } else {
      var $j_065_1 = $inc88_1;
      var $add8666_1 = $add86_1;
      label = 35;
      break;
    }
   case 36:
    HEAPF32[$arrayidx72_1 >> 2] = $add86_1;
    var $inc91_1 = $c_368_1 + 1 | 0;
    var $exitcond97_1 = ($inc91_1 | 0) == ($3 | 0);
    if ($exitcond97_1) {
      label = 37;
      break;
    } else {
      var $c_368_1 = $inc91_1;
      label = 34;
      break;
    }
   case 37:
    if ($cmp9570108113119) {
      var $c_471_1 = 1;
      var $24 = 0;
      label = 38;
      break;
    } else {
      var $sum_sroa_0_3 = $sum_sroa_0_1;
      var $sum_sroa_1_0_load = 0;
      label = 39;
      break;
    }
   case 38:
    var $24;
    var $c_471_1;
    var $arrayidx99_1 = $lab + 16 + ($c_471_1 << 2) | 0;
    var $25 = HEAPF32[$arrayidx99_1 >> 2];
    var $mul102_1 = $25 * $25;
    var $add104_1 = $24 + $mul102_1;
    var $inc106_1 = $c_471_1 + 1 | 0;
    var $exitcond99_1 = ($inc106_1 | 0) == ($3 | 0);
    if ($exitcond99_1) {
      var $sum_sroa_0_3 = $sum_sroa_0_1;
      var $sum_sroa_1_0_load = $add104_1;
      label = 39;
      break;
    } else {
      var $c_471_1 = $inc106_1;
      var $24 = $add104_1;
      label = 38;
      break;
    }
   case 39:
    var $sum_sroa_1_0_load;
    var $sum_sroa_0_3;
    var $div = $sum_sroa_1_0_load / $sum_sroa_0_3;
    var $conv115 = Math.sqrt($div);
    var $cmp11775 = ($3 | 0) > 1;
    if ($cmp11775) {
      var $c_576 = 1;
      label = 22;
      break;
    } else {
      label = 23;
      break;
    }
  }
}
_blend_highlights["X"] = 1;
function _recover_highlights() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $hsat = __stackBase__;
    var $_b = HEAP8[5243532];
    if ($_b) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    var $0 = HEAP32[_stderr >> 2];
    var $1 = _fwrite(5576544, 25, 1, $0);
    label = 4;
    break;
   case 4:
    var $2 = HEAP32[5398708 >> 2];
    var $sub = 4 - $2 | 0;
    var $exp2 = _ldexp(1, $sub);
    var $conv1 = $exp2;
    var $3 = HEAP32[5560840 >> 2];
    var $cmp196 = ($3 | 0) == 0;
    if ($cmp196) {
      var $kc_0_lcssa = 0;
      label = 8;
      break;
    } else {
      var $c_0197 = 0;
      label = 6;
      break;
    }
   case 5:
    var $cmp6192 = $3 >>> 0 > 1;
    if ($cmp6192) {
      var $kc_0193 = 0;
      var $c_1194 = 1;
      label = 7;
      break;
    } else {
      var $kc_0_lcssa = 0;
      label = 8;
      break;
    }
   case 6:
    var $c_0197;
    var $arrayidx = 5245640 + ($c_0197 << 2) | 0;
    var $4 = HEAPF32[$arrayidx >> 2];
    var $mul = $4 * 32e3;
    var $conv3 = $mul & -1;
    var $arrayidx4 = $hsat + ($c_0197 << 2) | 0;
    HEAP32[$arrayidx4 >> 2] = $conv3;
    var $inc = $c_0197 + 1 | 0;
    var $cmp = $inc >>> 0 < $3 >>> 0;
    if ($cmp) {
      var $c_0197 = $inc;
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 7:
    var $c_1194;
    var $kc_0193;
    var $arrayidx9 = 5245640 + ($kc_0193 << 2) | 0;
    var $5 = HEAPF32[$arrayidx9 >> 2];
    var $arrayidx10 = 5245640 + ($c_1194 << 2) | 0;
    var $6 = HEAPF32[$arrayidx10 >> 2];
    var $cmp11 = $5 < $6;
    var $kc_1 = $cmp11 ? $c_1194 : $kc_0193;
    var $inc16 = $c_1194 + 1 | 0;
    var $cmp6 = $inc16 >>> 0 < $3 >>> 0;
    if ($cmp6) {
      var $kc_0193 = $kc_1;
      var $c_1194 = $inc16;
      label = 7;
      break;
    } else {
      var $kc_0_lcssa = $kc_1;
      label = 8;
      break;
    }
   case 8:
    var $kc_0_lcssa;
    var $7 = HEAP16[5398712 >> 1];
    var $conv18 = $7 & 65535;
    var $8 = HEAP16[5244916 >> 1];
    var $conv19 = $8 & 65535;
    var $shr = 4 >>> ($conv19 >>> 0);
    var $div = ($conv18 | 0) / ($shr | 0) & -1;
    var $9 = HEAP16[5242964 >> 1];
    var $conv20 = $9 & 65535;
    var $div23 = ($conv20 | 0) / ($shr | 0) & -1;
    var $mul24 = $div23 * $div & -1;
    var $call25 = _calloc($mul24, 4);
    var $10 = $call25;
    _merror($call25, 5576324);
    var $11 = HEAP32[5560840 >> 2];
    var $cmp27187 = ($11 | 0) == 0;
    if ($cmp27187) {
      label = 66;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $mul34 = $mul24 << 2;
    var $cmp36151 = ($div | 0) == 0;
    var $div114 = 32 / $conv1;
    var $conv115 = $div114 & -1;
    var $cmp124157 = ($div23 | 0) == 0;
    var $cmp211167 = ($mul24 | 0) == 0;
    var $c_2188 = 0;
    label = 10;
    break;
   case 10:
    var $c_2188;
    var $cmp30 = ($c_2188 | 0) == ($kc_0_lcssa | 0);
    if ($cmp30) {
      label = 65;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    _memset($call25, 0, $mul34);
    if ($cmp36151) {
      var $spread_0 = $conv115;
      label = 28;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $arrayidx70 = $hsat + ($c_2188 << 2) | 0;
    var $mrow_0152 = 0;
    label = 13;
    break;
   case 13:
    var $mrow_0152;
    var $inc112_pre = $mrow_0152 + 1 | 0;
    if ($cmp124157) {
      var $inc112_pre_phi = $inc112_pre;
      label = 27;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $mul104 = $mrow_0152 * $div23 & -1;
    var $_pre = HEAP16[5244916 >> 1];
    var $mcol_0150 = 0;
    label = 15;
    break;
   case 15:
    var $mcol_0150;
    var $conv43 = $_pre & 65535;
    var $shr44 = 4 >>> ($conv43 >>> 0);
    var $mul45 = $shr44 * $mrow_0152 & -1;
    var $mul49138 = $shr44 * $inc112_pre & -1;
    var $cmp50139 = $mul45 >>> 0 < $mul49138 >>> 0;
    if ($cmp50139) {
      label = 16;
      break;
    } else {
      var $count_0_lcssa = 0;
      var $wgt_0_lcssa = 0;
      var $sum_0_lcssa = 0;
      label = 24;
      break;
    }
   case 16:
    var $add57 = $mcol_0150 + 1 | 0;
    var $mul60128 = $shr44 * $add57 & -1;
    var $12 = HEAP16[5242964 >> 1];
    var $conv64 = $12 & 65535;
    var $13 = HEAP32[5264108 >> 2];
    var $count_0140 = 0;
    var $row_0141 = $mul45;
    var $wgt_0142 = 0;
    var $sum_0143 = 0;
    label = 17;
    break;
   case 17:
    var $sum_0143;
    var $wgt_0142;
    var $row_0141;
    var $count_0140;
    var $mul55 = $shr44 * $mcol_0150 & -1;
    var $cmp61129 = $mul55 >>> 0 < $mul60128 >>> 0;
    if ($cmp61129) {
      label = 18;
      break;
    } else {
      var $count_1_lcssa = $count_0140;
      var $wgt_1_lcssa = $wgt_0142;
      var $sum_1_lcssa = $sum_0143;
      label = 23;
      break;
    }
   case 18:
    var $mul65 = $conv64 * $row_0141 & -1;
    var $14 = HEAP32[$arrayidx70 >> 2];
    var $count_1130 = $count_0140;
    var $col_0131 = $mul55;
    var $wgt_1132 = $wgt_0142;
    var $sum_1133 = $sum_0143;
    label = 19;
    break;
   case 19:
    var $sum_1133;
    var $wgt_1132;
    var $col_0131;
    var $count_1130;
    var $add66 = $mul65 + $col_0131 | 0;
    var $arrayidx68 = $13 + ($add66 << 3) + ($c_2188 << 1) | 0;
    var $15 = HEAP16[$arrayidx68 >> 1];
    var $conv69 = $15 & 65535;
    var $div71 = ($conv69 | 0) / ($14 | 0) & -1;
    var $cmp72 = ($div71 | 0) == 1;
    if ($cmp72) {
      label = 20;
      break;
    } else {
      var $sum_2 = $sum_1133;
      var $wgt_2 = $wgt_1132;
      var $count_2 = $count_1130;
      label = 22;
      break;
    }
   case 20:
    var $arrayidx74 = $13 + ($add66 << 3) + ($kc_0_lcssa << 1) | 0;
    var $16 = HEAP16[$arrayidx74 >> 1];
    var $cmp76 = ($16 & 65535) > 24e3;
    if ($cmp76) {
      label = 21;
      break;
    } else {
      var $sum_2 = $sum_1133;
      var $wgt_2 = $wgt_1132;
      var $count_2 = $count_1130;
      label = 22;
      break;
    }
   case 21:
    var $conv75 = $16 & 65535;
    var $conv81 = $conv69 | 0;
    var $add82 = $sum_1133 + $conv81;
    var $conv85 = $conv75 | 0;
    var $add86 = $wgt_1132 + $conv85;
    var $inc87 = $count_1130 + 1 | 0;
    var $sum_2 = $add82;
    var $wgt_2 = $add86;
    var $count_2 = $inc87;
    label = 22;
    break;
   case 22:
    var $count_2;
    var $wgt_2;
    var $sum_2;
    var $inc90 = $col_0131 + 1 | 0;
    var $cmp61 = $inc90 >>> 0 < $mul60128 >>> 0;
    if ($cmp61) {
      var $count_1130 = $count_2;
      var $col_0131 = $inc90;
      var $wgt_1132 = $wgt_2;
      var $sum_1133 = $sum_2;
      label = 19;
      break;
    } else {
      var $count_1_lcssa = $count_2;
      var $wgt_1_lcssa = $wgt_2;
      var $sum_1_lcssa = $sum_2;
      label = 23;
      break;
    }
   case 23:
    var $sum_1_lcssa;
    var $wgt_1_lcssa;
    var $count_1_lcssa;
    var $inc93 = $row_0141 + 1 | 0;
    var $cmp50 = $inc93 >>> 0 < $mul49138 >>> 0;
    if ($cmp50) {
      var $count_0140 = $count_1_lcssa;
      var $row_0141 = $inc93;
      var $wgt_0142 = $wgt_1_lcssa;
      var $sum_0143 = $sum_1_lcssa;
      label = 17;
      break;
    } else {
      var $count_0_lcssa = $count_1_lcssa;
      var $wgt_0_lcssa = $wgt_1_lcssa;
      var $sum_0_lcssa = $sum_1_lcssa;
      label = 24;
      break;
    }
   case 24:
    var $sum_0_lcssa;
    var $wgt_0_lcssa;
    var $count_0_lcssa;
    var $mul99 = $shr44 * $shr44 & -1;
    var $cmp100 = ($count_0_lcssa | 0) == ($mul99 | 0);
    if ($cmp100) {
      label = 25;
      break;
    } else {
      label = 26;
      break;
    }
   case 25:
    var $div103 = $sum_0_lcssa / $wgt_0_lcssa;
    var $add105 = $mcol_0150 + $mul104 | 0;
    var $arrayidx106 = $10 + ($add105 << 2) | 0;
    HEAPF32[$arrayidx106 >> 2] = $div103;
    label = 26;
    break;
   case 26:
    var $inc109 = $mcol_0150 + 1 | 0;
    var $exitcond = ($inc109 | 0) == ($div23 | 0);
    if ($exitcond) {
      var $inc112_pre_phi = $inc112_pre;
      label = 27;
      break;
    } else {
      var $mcol_0150 = $inc109;
      label = 15;
      break;
    }
   case 27:
    var $inc112_pre_phi;
    var $exitcond198 = ($inc112_pre_phi | 0) == ($div | 0);
    if ($exitcond198) {
      var $spread_0 = $conv115;
      label = 28;
      break;
    } else {
      var $mrow_0152 = $inc112_pre_phi;
      label = 13;
      break;
    }
   case 28:
    var $spread_0;
    var $dec = $spread_0 - 1 | 0;
    var $tobool117 = ($spread_0 | 0) == 0;
    if ($tobool117) {
      label = 46;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    if ($cmp36151) {
      label = 41;
      break;
    } else {
      var $mrow_1161 = 0;
      label = 30;
      break;
    }
   case 30:
    var $mrow_1161;
    if ($cmp124157) {
      label = 40;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    var $mul127 = $mrow_1161 * $div23 & -1;
    var $mcol_1158 = 0;
    label = 32;
    break;
   case 32:
    var $mcol_1158;
    var $add128 = $mcol_1158 + $mul127 | 0;
    var $arrayidx129 = $10 + ($add128 << 2) | 0;
    var $17 = HEAPF32[$arrayidx129 >> 2];
    var $tobool130 = $17 != 0;
    if ($tobool130) {
      label = 39;
      break;
    } else {
      var $count_3154 = 0;
      var $d_0155 = 0;
      var $sum_3156 = 0;
      label = 33;
      break;
    }
   case 33:
    var $sum_3156;
    var $d_0155;
    var $count_3154;
    var $arrayidx138 = 5245012 + ($d_0155 << 1) | 0;
    var $18 = HEAP8[$arrayidx138];
    var $conv139 = $18 << 24 >> 24;
    var $add140 = $conv139 + $mrow_1161 | 0;
    var $arrayidx142 = 5245013 + ($d_0155 << 1) | 0;
    var $19 = HEAP8[$arrayidx142];
    var $conv143 = $19 << 24 >> 24;
    var $add144 = $conv143 + $mcol_1158 | 0;
    var $cmp145 = $add140 >>> 0 < $div >>> 0;
    var $cmp148 = $add144 >>> 0 < $div23 >>> 0;
    var $or_cond = $cmp145 & $cmp148;
    if ($or_cond) {
      label = 34;
      break;
    } else {
      var $sum_4 = $sum_3156;
      var $count_4 = $count_3154;
      label = 36;
      break;
    }
   case 34:
    var $mul151 = $add140 * $div23 & -1;
    var $add152 = $mul151 + $add144 | 0;
    var $arrayidx153 = $10 + ($add152 << 2) | 0;
    var $20 = HEAPF32[$arrayidx153 >> 2];
    var $cmp154 = $20 > 0;
    if ($cmp154) {
      label = 35;
      break;
    } else {
      var $sum_4 = $sum_3156;
      var $count_4 = $count_3154;
      label = 36;
      break;
    }
   case 35:
    var $and = $d_0155 & 1;
    var $add157 = $and + 1 | 0;
    var $conv158 = $add157 >>> 0;
    var $mul162 = $conv158 * $20;
    var $add163 = $sum_3156 + $mul162;
    var $add166 = $add157 + $count_3154 | 0;
    var $sum_4 = $add163;
    var $count_4 = $add166;
    label = 36;
    break;
   case 36:
    var $count_4;
    var $sum_4;
    var $inc169 = $d_0155 + 1 | 0;
    var $exitcond199 = ($inc169 | 0) == 8;
    if ($exitcond199) {
      label = 37;
      break;
    } else {
      var $count_3154 = $count_4;
      var $d_0155 = $inc169;
      var $sum_3156 = $sum_4;
      label = 33;
      break;
    }
   case 37:
    var $cmp171 = ($count_4 | 0) > 3;
    if ($cmp171) {
      label = 38;
      break;
    } else {
      label = 39;
      break;
    }
   case 38:
    var $add174 = $conv1 + $sum_4;
    var $sub175 = -$add174;
    var $conv176 = $count_4 | 0;
    var $add177 = $conv1 + $conv176;
    var $div178 = $sub175 / $add177;
    HEAPF32[$arrayidx129 >> 2] = $div178;
    label = 39;
    break;
   case 39:
    var $inc184 = $mcol_1158 + 1 | 0;
    var $exitcond200 = ($inc184 | 0) == ($div23 | 0);
    if ($exitcond200) {
      label = 40;
      break;
    } else {
      var $mcol_1158 = $inc184;
      label = 32;
      break;
    }
   case 40:
    var $inc187 = $mrow_1161 + 1 | 0;
    var $exitcond201 = ($inc187 | 0) == ($div | 0);
    if ($exitcond201) {
      label = 41;
      break;
    } else {
      var $mrow_1161 = $inc187;
      label = 30;
      break;
    }
   case 41:
    if ($cmp211167) {
      label = 50;
      break;
    } else {
      var $change_0164 = 0;
      var $i_0165 = 0;
      label = 42;
      break;
    }
   case 42:
    var $i_0165;
    var $change_0164;
    var $arrayidx194 = $10 + ($i_0165 << 2) | 0;
    var $21 = HEAPF32[$arrayidx194 >> 2];
    var $cmp195 = $21 < 0;
    if ($cmp195) {
      label = 43;
      break;
    } else {
      var $change_1 = $change_0164;
      label = 44;
      break;
    }
   case 43:
    var $sub199 = -$21;
    HEAPF32[$arrayidx194 >> 2] = $sub199;
    var $change_1 = 1;
    label = 44;
    break;
   case 44:
    var $change_1;
    var $inc203 = $i_0165 + 1 | 0;
    var $exitcond202 = ($inc203 | 0) == ($mul24 | 0);
    if ($exitcond202) {
      label = 45;
      break;
    } else {
      var $change_0164 = $change_1;
      var $i_0165 = $inc203;
      label = 42;
      break;
    }
   case 45:
    var $tobool205 = ($change_1 | 0) == 0;
    if ($tobool205) {
      label = 46;
      break;
    } else {
      var $spread_0 = $dec;
      label = 28;
      break;
    }
   case 46:
    if ($cmp211167) {
      label = 50;
      break;
    } else {
      var $i_1168 = 0;
      label = 47;
      break;
    }
   case 47:
    var $i_1168;
    var $arrayidx214 = $10 + ($i_1168 << 2) | 0;
    var $22 = HEAPF32[$arrayidx214 >> 2];
    var $cmp215 = $22 == 0;
    if ($cmp215) {
      label = 48;
      break;
    } else {
      label = 49;
      break;
    }
   case 48:
    HEAPF32[$arrayidx214 >> 2] = 1;
    label = 49;
    break;
   case 49:
    var $inc221 = $i_1168 + 1 | 0;
    var $exitcond203 = ($inc221 | 0) == ($mul24 | 0);
    if ($exitcond203) {
      label = 50;
      break;
    } else {
      var $i_1168 = $inc221;
      label = 47;
      break;
    }
   case 50:
    if ($cmp36151) {
      label = 65;
      break;
    } else {
      label = 51;
      break;
    }
   case 51:
    var $arrayidx260 = $hsat + ($c_2188 << 2) | 0;
    var $mrow_2185 = 0;
    label = 52;
    break;
   case 52:
    var $mrow_2185;
    var $inc306_pre = $mrow_2185 + 1 | 0;
    if ($cmp124157) {
      var $inc306_pre_phi = $inc306_pre;
      label = 64;
      break;
    } else {
      label = 53;
      break;
    }
   case 53:
    var $mul268 = $mrow_2185 * $div23 & -1;
    var $_pre2 = HEAP16[5244916 >> 1];
    var $mcol_2182 = 0;
    label = 54;
    break;
   case 54:
    var $mcol_2182;
    var $conv231 = $_pre2 & 65535;
    var $shr232 = 4 >>> ($conv231 >>> 0);
    var $mul233 = $shr232 * $mrow_2185 & -1;
    var $mul238176 = $shr232 * $inc306_pre & -1;
    var $cmp239177 = $mul233 >>> 0 < $mul238176 >>> 0;
    var $add246 = $mcol_2182 + 1 | 0;
    if ($cmp239177) {
      label = 55;
      break;
    } else {
      var $inc303_pre_phi = $add246;
      label = 63;
      break;
    }
   case 55:
    var $add269 = $mcol_2182 + $mul268 | 0;
    var $arrayidx270 = $10 + ($add269 << 2) | 0;
    var $row_1178 = $mul233;
    label = 56;
    break;
   case 56:
    var $row_1178;
    var $mul244 = $shr232 * $mcol_2182 & -1;
    var $mul249171 = $shr232 * $add246 & -1;
    var $cmp250172 = $mul244 >>> 0 < $mul249171 >>> 0;
    if ($cmp250172) {
      label = 57;
      break;
    } else {
      label = 62;
      break;
    }
   case 57:
    var $23 = HEAP32[$arrayidx260 >> 2];
    var $_pre3 = HEAP16[5242964 >> 1];
    var $_pre4 = HEAP32[5264108 >> 2];
    var $col_1173 = $mul244;
    label = 58;
    break;
   case 58:
    var $col_1173;
    var $conv253 = $_pre3 & 65535;
    var $mul254 = $conv253 * $row_1178 & -1;
    var $add255 = $mul254 + $col_1173 | 0;
    var $arrayidx258 = $_pre4 + ($add255 << 3) + ($c_2188 << 1) | 0;
    var $24 = HEAP16[$arrayidx258 >> 1];
    var $conv259 = $24 & 65535;
    var $div261 = ($conv259 | 0) / ($23 | 0) & -1;
    var $cmp262 = ($div261 | 0) > 1;
    if ($cmp262) {
      label = 59;
      break;
    } else {
      label = 61;
      break;
    }
   case 59:
    var $arrayidx265 = $_pre4 + ($add255 << 3) + ($kc_0_lcssa << 1) | 0;
    var $25 = HEAP16[$arrayidx265 >> 1];
    var $conv266 = $25 & 65535;
    var $conv267 = $conv266 | 0;
    var $26 = HEAPF32[$arrayidx270 >> 2];
    var $mul271 = $26 * $conv267;
    var $conv272 = $mul271 & -1;
    var $cmp275 = ($conv259 | 0) < ($conv272 | 0);
    if ($cmp275) {
      label = 60;
      break;
    } else {
      label = 61;
      break;
    }
   case 60:
    var $cmp278 = ($conv272 | 0) < 65535;
    var $cond = $cmp278 ? $conv272 : 65535;
    var $cmp280 = ($cond | 0) < 0;
    var $phitmp = $cond & 65535;
    var $_phitmp = $cmp280 ? 0 : $phitmp;
    HEAP16[$arrayidx258 >> 1] = $_phitmp;
    label = 61;
    break;
   case 61:
    var $inc297 = $col_1173 + 1 | 0;
    var $cmp250 = $inc297 >>> 0 < $mul249171 >>> 0;
    if ($cmp250) {
      var $col_1173 = $inc297;
      label = 58;
      break;
    } else {
      label = 62;
      break;
    }
   case 62:
    var $inc300 = $row_1178 + 1 | 0;
    var $cmp239 = $inc300 >>> 0 < $mul238176 >>> 0;
    if ($cmp239) {
      var $row_1178 = $inc300;
      label = 56;
      break;
    } else {
      var $inc303_pre_phi = $add246;
      label = 63;
      break;
    }
   case 63:
    var $inc303_pre_phi;
    var $exitcond204 = ($inc303_pre_phi | 0) == ($div23 | 0);
    if ($exitcond204) {
      var $inc306_pre_phi = $inc306_pre;
      label = 64;
      break;
    } else {
      var $mcol_2182 = $inc303_pre_phi;
      label = 54;
      break;
    }
   case 64:
    var $inc306_pre_phi;
    var $exitcond205 = ($inc306_pre_phi | 0) == ($div | 0);
    if ($exitcond205) {
      label = 65;
      break;
    } else {
      var $mrow_2185 = $inc306_pre_phi;
      label = 52;
      break;
    }
   case 65:
    var $inc310 = $c_2188 + 1 | 0;
    var $cmp27 = $inc310 >>> 0 < $11 >>> 0;
    if ($cmp27) {
      var $c_2188 = $inc310;
      label = 10;
      break;
    } else {
      label = 66;
      break;
    }
   case 66:
    _free($call25);
    STACKTOP = __stackBase__;
    return;
  }
}
_recover_highlights["X"] = 1;
function _tiff_get($base, $tag, $type, $len, $save) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $call = _get2();
    var $conv = $call & 65535;
    HEAP32[$tag >> 2] = $conv;
    var $call1 = _get2();
    var $conv2 = $call1 & 65535;
    HEAP32[$type >> 2] = $conv2;
    var $call3 = _get4();
    HEAP32[$len >> 2] = $call3;
    var $0 = HEAP32[5264116 >> 2];
    var $call4 = _ftell($0);
    var $add = $call4 + 4 | 0;
    HEAP32[$save >> 2] = $add;
    var $1 = HEAP32[$len >> 2];
    var $2 = HEAP32[$type >> 2];
    var $cmp = $2 >>> 0 < 14;
    var $_ = $cmp ? $2 : 0;
    var $arrayidx = $_ + 5576084 | 0;
    var $3 = HEAP8[$arrayidx];
    var $conv6 = $3 << 24 >> 24;
    var $sub = $conv6 - 48 | 0;
    var $mul = $sub * $1 & -1;
    var $cmp7 = $mul >>> 0 > 4;
    if ($cmp7) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    var $4 = HEAP32[5264116 >> 2];
    var $call9 = _get4();
    var $add10 = $call9 + $base | 0;
    var $call11 = _fseek($4, $add10, 0);
    label = 4;
    break;
   case 4:
    return;
  }
}
function _parse_thumb_note($base, $toff, $tlen) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $tag = __stackBase__;
    var $type = __stackBase__ + 4;
    var $len = __stackBase__ + 8;
    var $save = __stackBase__ + 12;
    var $call = _get2();
    var $tobool3 = $call << 16 >> 16 == 0;
    if ($tobool3) {
      label = 9;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $conv = $call & 65535;
    var $dec4_in = $conv;
    label = 4;
    break;
   case 4:
    var $dec4_in;
    var $dec4 = $dec4_in - 1 | 0;
    _tiff_get($base, $tag, $type, $len, $save);
    var $0 = HEAP32[$tag >> 2];
    var $cmp = ($0 | 0) == ($toff | 0);
    if ($cmp) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    var $call2 = _get4();
    var $add = $call2 + $base | 0;
    HEAP32[5244044 >> 2] = $add;
    label = 6;
    break;
   case 6:
    var $cmp3 = ($0 | 0) == ($tlen | 0);
    if ($cmp3) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    var $call6 = _get4();
    HEAP32[5244056 >> 2] = $call6;
    label = 8;
    break;
   case 8:
    var $1 = HEAP32[5264116 >> 2];
    var $2 = HEAP32[$save >> 2];
    var $call8 = _fseek($1, $2, 0);
    var $tobool = ($dec4 | 0) == 0;
    if ($tobool) {
      label = 9;
      break;
    } else {
      var $dec4_in = $dec4;
      label = 4;
      break;
    }
   case 9:
    STACKTOP = __stackBase__;
    return;
  }
}
function _parse_makernote($base, $uptag) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 352 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $tag = __stackBase__;
    var $type = __stackBase__ + 4;
    var $len = __stackBase__ + 8;
    var $save = __stackBase__ + 12;
    var $buf97 = __stackBase__ + 16;
    var $buf = __stackBase__ + 340;
    var $0 = HEAP16[5262944 >> 1];
    var $call = _strcmp(5263628, 5575800);
    var $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 222;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $arraydecay = $buf | 0;
    var $1 = HEAP32[5264116 >> 2];
    var $call1 = _fread($arraydecay, 1, 10, $1);
    var $call3 = _strncmp($arraydecay, 5575320, 3);
    var $tobool4 = ($call3 | 0) == 0;
    if ($tobool4) {
      label = 222;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $call6 = _strncmp($arraydecay, 5574796, 3);
    var $tobool7 = ($call6 | 0) == 0;
    if ($tobool7) {
      label = 222;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $call10 = _strncmp($arraydecay, 5574308, 4);
    var $tobool11 = ($call10 | 0) == 0;
    if ($tobool11) {
      label = 222;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $call14 = _strncmp($arraydecay, 5574080, 4);
    var $tobool15 = ($call14 | 0) == 0;
    if ($tobool15) {
      label = 222;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $call19 = _strncmp($arraydecay, 5573936, 2);
    var $tobool20 = ($call19 | 0) == 0;
    if ($tobool20) {
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $call23 = _strncmp($arraydecay, 5573736, 3);
    var $tobool24 = ($call23 | 0) == 0;
    if ($tobool24) {
      label = 9;
      break;
    } else {
      label = 14;
      break;
    }
   case 9:
    HEAP16[5262944 >> 1] = 19789;
    var $2 = HEAP32[5264116 >> 2];
    var $call26231 = _ftell($2);
    var $3 = HEAP32[5428492 >> 2];
    var $cmp232 = $call26231 >>> 0 < $3 >>> 0;
    var $cmp27233 = $call26231 >>> 0 < 16384;
    var $or_cond117234 = $cmp232 & $cmp27233;
    if ($or_cond117234) {
      var $wb_sroa_1_0 = 0;
      var $wb_sroa_2_0 = 0;
      var $wb_sroa_3_0 = 0;
      label = 10;
      break;
    } else {
      label = 221;
      break;
    }
   case 10:
    var $wb_sroa_3_0;
    var $wb_sroa_2_0;
    var $wb_sroa_1_0;
    var $call33 = _get2();
    var $conv = $call33 & 65535;
    var $cmp36 = ($wb_sroa_3_0 | 0) == 256;
    var $cmp39 = $call33 << 16 >> 16 == 256;
    var $or_cond118 = $cmp36 & $cmp39;
    if ($or_cond118) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    var $_off228 = $wb_sroa_2_0 - 257 | 0;
    var $4 = $_off228 >>> 0 < 383;
    var $_off229 = $wb_sroa_1_0 - 257 | 0;
    var $5 = $_off229 >>> 0 < 383;
    var $or_cond247 = $4 & $5;
    if ($or_cond247) {
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $6 = HEAP32[5264116 >> 2];
    var $call26 = _ftell($6);
    var $7 = HEAP32[5428492 >> 2];
    var $cmp = $call26 >>> 0 < $7 >>> 0;
    var $cmp27 = $call26 >>> 0 < 16384;
    var $or_cond117 = $cmp & $cmp27;
    if ($or_cond117) {
      var $wb_sroa_2_0 = $wb_sroa_1_0;
      var $wb_sroa_1_0 = $wb_sroa_3_0;
      var $wb_sroa_3_0 = $conv;
      label = 10;
      break;
    } else {
      label = 221;
      break;
    }
   case 13:
    var $conv61 = $wb_sroa_2_0 >>> 0;
    HEAPF32[5561124 >> 2] = $conv61;
    HEAPF32[5561128 >> 2] = 256;
    var $conv61_2 = $wb_sroa_1_0 >>> 0;
    HEAPF32[5561132 >> 2] = $conv61_2;
    var $conv61_3 = $call33 & 65535;
    HEAPF32[5561136 >> 2] = $conv61_3;
    label = 12;
    break;
   case 14:
    var $call66 = _strcmp($arraydecay, 5573488);
    var $tobool67 = ($call66 | 0) == 0;
    if ($tobool67) {
      label = 15;
      break;
    } else {
      label = 17;
      break;
    }
   case 15:
    var $8 = HEAP32[5264116 >> 2];
    var $call69 = _ftell($8);
    var $call70 = _get2();
    HEAP16[5262944 >> 1] = $call70;
    var $call71 = _get2();
    var $cmp73 = $call71 << 16 >> 16 == 42;
    if ($cmp73) {
      label = 16;
      break;
    } else {
      label = 221;
      break;
    }
   case 16:
    var $call77 = _get4();
    var $9 = HEAP32[5264116 >> 2];
    var $sub = $call77 - 8 | 0;
    var $call78 = _fseek($9, $sub, 1);
    var $base_addr_1 = $call69;
    label = 34;
    break;
   case 17:
    var $call80 = _strcmp($arraydecay, 5573348);
    var $tobool81 = ($call80 | 0) == 0;
    if ($tobool81) {
      label = 18;
      break;
    } else {
      label = 19;
      break;
    }
   case 18:
    var $10 = HEAP32[5264116 >> 2];
    var $call83 = _ftell($10);
    var $sub84 = $call83 - 10 | 0;
    var $11 = HEAP32[5264116 >> 2];
    var $call85 = _fseek($11, -2, 1);
    var $call86 = _get2();
    HEAP16[5262944 >> 1] = $call86;
    var $call87 = _get2();
    var $base_addr_1 = $sub84;
    label = 34;
    break;
   case 19:
    var $call90 = _strncmp($arraydecay, 5573340, 4);
    var $tobool91 = ($call90 | 0) == 0;
    if ($tobool91) {
      var $base_addr_0 = $base;
      label = 23;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    var $call94 = _strcmp($arraydecay, 5573328);
    var $tobool95 = ($call94 | 0) == 0;
    if ($tobool95) {
      var $base_addr_0 = $base;
      label = 23;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    var $call99 = _strncmp($arraydecay, 5573316, 8);
    var $tobool100 = ($call99 | 0) == 0;
    if ($tobool100) {
      label = 22;
      break;
    } else {
      label = 24;
      break;
    }
   case 22:
    var $12 = HEAP32[5264116 >> 2];
    var $call102 = _ftell($12);
    var $sub103 = $call102 - 10 | 0;
    var $base_addr_0 = $sub103;
    label = 23;
    break;
   case 23:
    var $base_addr_0;
    HEAP16[5262944 >> 1] = 18761;
    var $13 = HEAP32[5264116 >> 2];
    var $call104 = _fseek($13, 2, 1);
    var $base_addr_1 = $base_addr_0;
    label = 34;
    break;
   case 24:
    var $call107 = _strcmp($arraydecay, 5573308);
    var $tobool108 = ($call107 | 0) == 0;
    if ($tobool108) {
      label = 28;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    var $call111 = _strcmp($arraydecay, 5573300);
    var $tobool112 = ($call111 | 0) == 0;
    if ($tobool112) {
      label = 28;
      break;
    } else {
      label = 26;
      break;
    }
   case 26:
    var $call115 = _strcmp($arraydecay, 5573292);
    var $tobool116 = ($call115 | 0) == 0;
    if ($tobool116) {
      label = 28;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    var $call119 = _strcmp($arraydecay, 5573284);
    var $tobool120 = ($call119 | 0) == 0;
    if ($tobool120) {
      label = 28;
      break;
    } else {
      label = 29;
      break;
    }
   case 28:
    var $14 = HEAP32[5264116 >> 2];
    var $call122 = _fseek($14, -2, 1);
    var $base_addr_1 = $base;
    label = 34;
    break;
   case 29:
    var $call125 = _strcmp($arraydecay, 5573280);
    var $tobool126 = ($call125 | 0) == 0;
    if ($tobool126) {
      label = 31;
      break;
    } else {
      label = 30;
      break;
    }
   case 30:
    var $call129 = _strcmp($arraydecay, 5587540);
    var $tobool130 = ($call129 | 0) == 0;
    if ($tobool130) {
      label = 31;
      break;
    } else {
      label = 32;
      break;
    }
   case 31:
    var $15 = HEAP32[5264116 >> 2];
    var $call132 = _fseek($15, -4, 1);
    var $base_addr_1 = $base;
    label = 34;
    break;
   case 32:
    var $16 = HEAP32[5264116 >> 2];
    var $call134 = _fseek($16, -10, 1);
    var $call135 = _strncmp(5263628, 5587532, 7);
    var $tobool136 = ($call135 | 0) == 0;
    if ($tobool136) {
      label = 33;
      break;
    } else {
      var $base_addr_1 = $base;
      label = 34;
      break;
    }
   case 33:
    var $17 = HEAP32[5264116 >> 2];
    var $call138 = _ftell($17);
    var $base_addr_1 = $call138;
    label = 34;
    break;
   case 34:
    var $base_addr_1;
    var $call146 = _get2();
    var $cmp148 = ($call146 & 65535) > 1e3;
    if ($cmp148) {
      label = 222;
      break;
    } else {
      label = 35;
      break;
    }
   case 35:
    var $18 = HEAP16[5262944 >> 1];
    var $tobool153266 = $call146 << 16 >> 16 == 0;
    if ($tobool153266) {
      label = 221;
      break;
    } else {
      label = 36;
      break;
    }
   case 36:
    var $conv147 = $call146 & 65535;
    var $shl = $uptag << 16;
    var $add_ptr = $buf + 4 | 0;
    var $arraydecay564 = $buf97 | 0;
    var $ver97_0267 = 0;
    var $serial_0268 = 0;
    var $wbi_0269 = 0;
    var $dec270_in = $conv147;
    label = 37;
    break;
   case 37:
    var $dec270_in;
    var $wbi_0269;
    var $serial_0268;
    var $ver97_0267;
    var $dec270 = $dec270_in - 1 | 0;
    HEAP16[5262944 >> 1] = $18;
    _tiff_get($base_addr_1, $tag, $type, $len, $save);
    var $19 = HEAP32[$tag >> 2];
    var $or = $19 | $shl;
    HEAP32[$tag >> 2] = $or;
    var $cmp155 = ($or | 0) == 2;
    if ($cmp155) {
      label = 38;
      break;
    } else {
      var $21 = $or;
      label = 40;
      break;
    }
   case 38:
    var $call158 = _strstr(5263628, 5587524);
    var $tobool159 = ($call158 | 0) == 0;
    var $20 = HEAPF32[5264096 >> 2];
    var $tobool161 = $20 != 0;
    var $or_cond = $tobool159 | $tobool161;
    if ($or_cond) {
      var $wbi_1384244475053 = $wbi_0269;
      label = 81;
      break;
    } else {
      label = 39;
      break;
    }
   case 39:
    var $call163 = _get2();
    var $call164 = _get2();
    var $conv165 = $call164 & 65535;
    HEAPF32[5264096 >> 2] = $conv165;
    var $_pr_pre = HEAP32[$tag >> 2];
    var $21 = $_pr_pre;
    label = 40;
    break;
   case 40:
    var $21;
    var $cmp167 = ($21 | 0) == 4;
    if ($cmp167) {
      label = 41;
      break;
    } else {
      var $wbi_1 = $wbi_0269;
      var $27 = $21;
      label = 49;
      break;
    }
   case 41:
    var $22 = HEAP32[$len >> 2];
    var $_off = $22 - 27 | 0;
    var $23 = $_off >>> 0 < 8;
    if ($23) {
      label = 42;
      break;
    } else {
      var $28 = 4;
      var $wbi_140 = $wbi_0269;
      label = 50;
      break;
    }
   case 42:
    var $call176 = _get4();
    var $call177 = _get2();
    var $cmp179 = $call177 << 16 >> 16 == 32767;
    var $24 = HEAPF32[5264096 >> 2];
    var $tobool182 = $24 != 0;
    var $or_cond2 = $cmp179 | $tobool182;
    if ($or_cond2) {
      label = 44;
      break;
    } else {
      label = 43;
      break;
    }
   case 43:
    var $conv184 = $call177 & 65535;
    var $div = $conv184 * .03125;
    var $sub185 = $div - 4;
    var $exp2 = _exp2($sub185);
    var $mul = $exp2 * 50;
    var $conv186 = $mul;
    HEAPF32[5264096 >> 2] = $conv186;
    label = 44;
    break;
   case 44:
    var $call188 = _get2();
    var $call189 = _get2();
    var $cmp191 = $call189 << 16 >> 16 == 32767;
    var $25 = HEAPF32[5561468 >> 2];
    var $tobool194 = $25 != 0;
    var $or_cond3 = $cmp191 | $tobool194;
    if ($or_cond3) {
      label = 46;
      break;
    } else {
      label = 45;
      break;
    }
   case 45:
    var $conv196 = $call189 & 65535;
    var $div197 = $conv196 * .015625;
    var $exp2121 = _exp2($div197);
    var $conv198 = $exp2121;
    HEAPF32[5561468 >> 2] = $conv198;
    label = 46;
    break;
   case 46:
    var $call200 = _get2();
    var $cmp202 = $call200 << 16 >> 16 == -1;
    var $26 = HEAPF32[5244912 >> 2];
    var $tobool205 = $26 != 0;
    var $or_cond4 = $cmp202 | $tobool205;
    if ($or_cond4) {
      label = 48;
      break;
    } else {
      label = 47;
      break;
    }
   case 47:
    var $conv209 = $call200 << 16 >> 16;
    var $div210 = $conv209 * -.03125;
    var $exp2122 = _exp2($div210);
    var $conv211 = $exp2122;
    HEAPF32[5244912 >> 2] = $conv211;
    label = 48;
    break;
   case 48:
    var $call213 = _get2();
    var $call214 = _get2();
    var $conv215 = $call214 & 65535;
    var $call216 = _get2();
    var $call217 = _get2();
    var $conv218 = $call217 & 65535;
    HEAP32[5244924 >> 2] = $conv218;
    var $_pre = HEAP32[$tag >> 2];
    var $wbi_1 = $conv215;
    var $27 = $_pre;
    label = 49;
    break;
   case 49:
    var $27;
    var $wbi_1;
    if (($27 | 0) == 276 | ($27 | 0) == 4) {
      var $28 = $27;
      var $wbi_140 = $wbi_1;
      label = 50;
      break;
    } else {
      var $30 = $27;
      var $wbi_138 = $wbi_1;
      label = 56;
      break;
    }
   case 50:
    var $wbi_140;
    var $28;
    var $call226 = _strncmp(5263628, 5587516, 6);
    var $tobool227 = ($call226 | 0) == 0;
    if ($tobool227) {
      label = 51;
      break;
    } else {
      label = 55;
      break;
    }
   case 51:
    var $29 = HEAP32[5264116 >> 2];
    var $cmp229 = ($28 | 0) == 4;
    var $cond = $cmp229 ? 140 : 160;
    var $call231 = _fseek($29, $cond, 1);
    var $call232 = _get2();
    var $conv233 = $call232 & 65535;
    if (($conv233 | 0) == 72) {
      label = 52;
      break;
    } else if (($conv233 | 0) == 76) {
      label = 53;
      break;
    } else if (($conv233 | 0) == 82) {
      label = 54;
      break;
    } else {
      label = 55;
      break;
    }
   case 52:
    HEAP32[5403048 >> 2] = 0;
    label = 55;
    break;
   case 53:
    HEAP32[5403048 >> 2] = 6;
    label = 55;
    break;
   case 54:
    HEAP32[5403048 >> 2] = 5;
    label = 55;
    break;
   case 55:
    var $_pr123 = HEAP32[$tag >> 2];
    var $30 = $_pr123;
    var $wbi_138 = $wbi_140;
    label = 56;
    break;
   case 56:
    var $wbi_138;
    var $30;
    var $cmp237 = ($30 | 0) == 7;
    if ($cmp237) {
      label = 57;
      break;
    } else {
      var $34 = $30;
      var $wbi_13842 = $wbi_138;
      label = 60;
      break;
    }
   case 57:
    var $31 = HEAP32[$type >> 2];
    var $cmp240 = ($31 | 0) == 2;
    if ($cmp240) {
      label = 58;
      break;
    } else {
      var $wbi_1384244475053 = $wbi_138;
      label = 81;
      break;
    }
   case 58:
    var $32 = HEAP32[$len >> 2];
    var $cmp243 = $32 >>> 0 > 20;
    if ($cmp243) {
      label = 59;
      break;
    } else {
      var $wbi_1384244475053 = $wbi_138;
      label = 81;
      break;
    }
   case 59:
    var $33 = HEAP32[5264116 >> 2];
    var $call246 = _fgets(5263308, 64, $33);
    var $_pre9 = HEAP32[$tag >> 2];
    var $34 = $_pre9;
    var $wbi_13842 = $wbi_138;
    label = 60;
    break;
   case 60:
    var $wbi_13842;
    var $34;
    var $cmp248 = ($34 | 0) == 8;
    if ($cmp248) {
      label = 61;
      break;
    } else {
      var $36 = $34;
      var $wbi_1384244 = $wbi_13842;
      label = 63;
      break;
    }
   case 61:
    var $35 = HEAP32[$type >> 2];
    var $cmp251 = ($35 | 0) == 4;
    if ($cmp251) {
      label = 62;
      break;
    } else {
      var $wbi_1384244475053 = $wbi_13842;
      label = 81;
      break;
    }
   case 62:
    var $call254 = _get4();
    HEAP32[5244924 >> 2] = $call254;
    var $_pr124_pre = HEAP32[$tag >> 2];
    var $36 = $_pr124_pre;
    var $wbi_1384244 = $wbi_13842;
    label = 63;
    break;
   case 63:
    var $wbi_1384244;
    var $36;
    var $cmp256 = ($36 | 0) == 9;
    if ($cmp256) {
      label = 64;
      break;
    } else {
      var $38 = $36;
      var $wbi_138424447 = $wbi_1384244;
      label = 66;
      break;
    }
   case 64:
    var $call259 = _strcmp(5263628, 5587508);
    var $tobool260 = ($call259 | 0) == 0;
    if ($tobool260) {
      label = 65;
      break;
    } else {
      var $wbi_1384244475053 = $wbi_1384244;
      label = 81;
      break;
    }
   case 65:
    var $37 = HEAP32[5264116 >> 2];
    var $call262 = _fread(5561404, 64, 1, $37);
    var $_pre11 = HEAP32[$tag >> 2];
    var $38 = $_pre11;
    var $wbi_138424447 = $wbi_1384244;
    label = 66;
    break;
   case 66:
    var $wbi_138424447;
    var $38;
    var $cmp264 = ($38 | 0) == 12;
    if ($cmp264) {
      label = 67;
      break;
    } else {
      var $42 = $38;
      var $wbi_13842444750 = $wbi_138424447;
      label = 69;
      break;
    }
   case 67:
    var $39 = HEAP32[$len >> 2];
    var $cmp267 = ($39 | 0) == 4;
    if ($cmp267) {
      label = 68;
      break;
    } else {
      var $wbi_1384244475053 = $wbi_138424447;
      label = 81;
      break;
    }
   case 68:
    var $40 = HEAP32[$type >> 2];
    var $call270 = _getreal($40);
    var $conv271 = $call270;
    HEAPF32[5561124 >> 2] = $conv271;
    var $41 = HEAP32[$type >> 2];
    var $call272 = _getreal($41);
    var $conv273 = $call272;
    HEAPF32[5561132 >> 2] = $conv273;
    var $_pr125_pre = HEAP32[$tag >> 2];
    var $42 = $_pr125_pre;
    var $wbi_13842444750 = $wbi_138424447;
    label = 69;
    break;
   case 69:
    var $wbi_13842444750;
    var $42;
    var $cmp275 = ($42 | 0) == 13;
    if ($cmp275) {
      label = 70;
      break;
    } else {
      var $wbi_1384244475053 = $wbi_13842444750;
      label = 81;
      break;
    }
   case 70:
    var $43 = HEAP32[$type >> 2];
    var $cmp278 = ($43 | 0) == 7;
    if ($cmp278) {
      label = 71;
      break;
    } else {
      var $wbi_1384244475053 = $wbi_13842444750;
      label = 81;
      break;
    }
   case 71:
    var $call281 = _get2();
    var $cmp283 = $call281 << 16 >> 16 == -21846;
    if ($cmp283) {
      var $c_1235 = 2;
      var $i_0236 = 2;
      label = 72;
      break;
    } else {
      var $wbi_1384244475053 = $wbi_13842444750;
      label = 81;
      break;
    }
   case 72:
    var $i_0236;
    var $c_1235;
    var $44 = HEAP32[$len >> 2];
    var $cmp292 = $i_0236 >>> 0 < $44 >>> 0;
    if ($cmp292) {
      label = 73;
      break;
    } else {
      var $i_0_lcssa = $i_0236;
      var $46 = $44;
      label = 75;
      break;
    }
   case 73:
    var $shl296 = $c_1235 << 8;
    var $45 = HEAP32[5264116 >> 2];
    var $call297 = _fgetc($45);
    var $or298 = $call297 | $shl296;
    var $inc300 = $i_0236 + 1 | 0;
    var $conv288 = $or298 & 65535;
    var $cmp289 = ($conv288 | 0) == 48059;
    if ($cmp289) {
      label = 74;
      break;
    } else {
      var $c_1235 = $or298;
      var $i_0236 = $inc300;
      label = 72;
      break;
    }
   case 74:
    var $_pre35 = HEAP32[$len >> 2];
    var $i_0_lcssa = $inc300;
    var $46 = $_pre35;
    label = 75;
    break;
   case 75:
    var $46;
    var $i_0_lcssa;
    var $add237 = $i_0_lcssa + 4 | 0;
    var $sub303238 = $46 - 5 | 0;
    var $cmp304239 = $add237 >>> 0 < $sub303238 >>> 0;
    if ($cmp304239) {
      var $add240 = $add237;
      label = 76;
      break;
    } else {
      var $wbi_1384244475053 = $wbi_13842444750;
      label = 81;
      break;
    }
   case 76:
    var $add240;
    var $call307 = _get4();
    var $cmp308 = ($call307 | 0) == 257;
    if ($cmp308) {
      label = 77;
      break;
    } else {
      var $i_1_be = $add240;
      label = 80;
      break;
    }
   case 77:
    var $47 = HEAP32[$len >> 2];
    var $tobool311 = ($47 | 0) == 0;
    if ($tobool311) {
      var $i_1_be = 0;
      label = 80;
      break;
    } else {
      label = 78;
      break;
    }
   case 78:
    var $call313 = _get4();
    var $48 = HEAP32[5264116 >> 2];
    var $call314 = _fgetc($48);
    var $cmp315 = $call314 >>> 0 < 3;
    if ($cmp315) {
      label = 79;
      break;
    } else {
      var $i_1_be = $47;
      label = 80;
      break;
    }
   case 79:
    var $arrayidx318 = $call314 + 5587504 | 0;
    var $49 = HEAP8[$arrayidx318];
    var $conv319 = $49 << 24 >> 24;
    var $sub320 = $conv319 - 48 | 0;
    HEAP32[5403048 >> 2] = $sub320;
    var $i_1_be = $47;
    label = 80;
    break;
   case 80:
    var $i_1_be;
    var $add = $i_1_be + 4 | 0;
    var $50 = HEAP32[$len >> 2];
    var $sub303 = $50 - 5 | 0;
    var $cmp304 = $add >>> 0 < $sub303 >>> 0;
    if ($cmp304) {
      var $add240 = $add;
      label = 76;
      break;
    } else {
      var $wbi_1384244475053 = $wbi_13842444750;
      label = 81;
      break;
    }
   case 81:
    var $wbi_1384244475053;
    var $51 = HEAP32[$tag >> 2];
    var $cmp324 = ($51 | 0) == 16;
    if ($cmp324) {
      label = 82;
      break;
    } else {
      var $53 = $51;
      label = 84;
      break;
    }
   case 82:
    var $52 = HEAP32[$type >> 2];
    var $cmp327 = ($52 | 0) == 4;
    if ($cmp327) {
      label = 83;
      break;
    } else {
      label = 93;
      break;
    }
   case 83:
    var $call330 = _get4();
    HEAP32[5243560 >> 2] = $call330;
    var $_pre13 = HEAP32[$tag >> 2];
    var $53 = $_pre13;
    label = 84;
    break;
   case 84:
    var $53;
    var $cmp332 = ($53 | 0) == 17;
    var $54 = HEAP32[5264100 >> 2];
    var $tobool335 = ($54 | 0) != 0;
    var $or_cond6 = $cmp332 & $tobool335;
    if ($or_cond6) {
      label = 85;
      break;
    } else {
      var $56 = $53;
      label = 87;
      break;
    }
   case 85:
    var $call337 = _strncmp(5263628, 5587524, 5);
    var $tobool338 = ($call337 | 0) == 0;
    if ($tobool338) {
      label = 86;
      break;
    } else {
      label = 93;
      break;
    }
   case 86:
    var $55 = HEAP32[5264116 >> 2];
    var $call340 = _get4();
    var $add341 = $call340 + $base_addr_1 | 0;
    var $call342 = _fseek($55, $add341, 0);
    var $call343 = _parse_tiff_ifd($base_addr_1);
    var $_pr126_pre = HEAP32[$tag >> 2];
    var $56 = $_pr126_pre;
    label = 87;
    break;
   case 87:
    var $56;
    var $cmp345 = ($56 | 0) == 20;
    if ($cmp345) {
      label = 88;
      break;
    } else {
      label = 93;
      break;
    }
   case 88:
    var $57 = HEAP32[$type >> 2];
    var $cmp348 = ($57 | 0) == 7;
    if ($cmp348) {
      label = 89;
      break;
    } else {
      label = 93;
      break;
    }
   case 89:
    var $58 = HEAP32[$len >> 2];
    var $cmp351 = ($58 | 0) == 2560;
    var $59 = HEAP32[5264116 >> 2];
    if ($cmp351) {
      label = 90;
      break;
    } else {
      label = 91;
      break;
    }
   case 90:
    var $call354 = _fseek($59, 1248, 1);
    var $serial_3 = $serial_0268;
    var $ver97_3 = $ver97_0267;
    label = 196;
    break;
   case 91:
    var $call357 = _fread($arraydecay, 1, 10, $59);
    var $call359 = _strncmp($arraydecay, 5587496, 4);
    var $tobool360 = ($call359 | 0) == 0;
    if ($tobool360) {
      label = 92;
      break;
    } else {
      label = 93;
      break;
    }
   case 92:
    var $60 = HEAP32[5264116 >> 2];
    var $call363 = _strcmp($add_ptr, 5587488);
    var $tobool364 = ($call363 | 0) != 0;
    var $cond365 = $tobool364 ? 46 : 1546;
    var $call366 = _fseek($60, $cond365, 1);
    var $call367 = _get4();
    var $shl368 = $call367 << 2;
    var $conv369 = $shl368 >>> 0;
    HEAPF32[5561124 >> 2] = $conv369;
    var $call370 = _get4();
    var $call371 = _get4();
    var $add372 = $call371 + $call370 | 0;
    var $conv373 = $add372 >>> 0;
    HEAPF32[5561128 >> 2] = $conv373;
    var $call374 = _get4();
    var $shl375 = $call374 << 2;
    var $conv376 = $shl375 >>> 0;
    HEAPF32[5561132 >> 2] = $conv376;
    label = 93;
    break;
   case 93:
    var $61 = HEAP32[$tag >> 2];
    var $cmp379 = ($61 | 0) == 21;
    if ($cmp379) {
      label = 94;
      break;
    } else {
      var $_pr128_pr_pr = $61;
      label = 96;
      break;
    }
   case 94:
    var $62 = HEAP32[$type >> 2];
    var $cmp382 = ($62 | 0) == 2;
    var $63 = HEAP32[5264100 >> 2];
    var $tobool385 = ($63 | 0) != 0;
    var $or_cond7 = $cmp382 & $tobool385;
    if ($or_cond7) {
      label = 95;
      break;
    } else {
      var $_pr128_pr_pr = 21;
      label = 96;
      break;
    }
   case 95:
    var $64 = HEAP32[5264116 >> 2];
    var $call387 = _fread(5263372, 64, 1, $64);
    var $_pr128_pr_pr_pr_pre = HEAP32[$tag >> 2];
    var $_pr128_pr_pr = $_pr128_pr_pr_pr_pre;
    label = 96;
    break;
   case 96:
    var $_pr128_pr_pr;
    var $call389 = _strstr(5263628, 5587480);
    var $tobool390 = ($call389 | 0) == 0;
    if ($tobool390) {
      label = 100;
      break;
    } else {
      label = 97;
      break;
    }
   case 97:
    if (($_pr128_pr_pr | 0) == 27) {
      label = 98;
      break;
    } else if (($_pr128_pr_pr | 0) == 28) {
      label = 99;
      break;
    } else if (($_pr128_pr_pr | 0) == 29) {
      var $serial_1 = $serial_0268;
      label = 101;
      break;
    } else {
      var $serial_2 = $serial_0268;
      var $66 = $_pr128_pr_pr;
      label = 106;
      break;
    }
   case 98:
    HEAP32[$tag >> 2] = 4120;
    var $serial_2150153155164166168170173177180184187191194198201205208214219223224 = $serial_0268;
    var $ver97_2174176181183188190195197202204209211220222226 = $ver97_0267;
    label = 193;
    break;
   case 99:
    HEAP32[$tag >> 2] = 4119;
    var $ver97_2_ph184216222 = $ver97_0267;
    var $serial_259616372117152223 = $serial_0268;
    label = 191;
    break;
   case 100:
    var $cmp401 = ($_pr128_pr_pr | 0) == 29;
    if ($cmp401) {
      var $serial_1 = $serial_0268;
      label = 101;
      break;
    } else {
      var $serial_2 = $serial_0268;
      var $66 = $_pr128_pr_pr;
      label = 106;
      break;
    }
   case 101:
    var $serial_1;
    var $65 = HEAP32[5264116 >> 2];
    var $call405 = _fgetc($65);
    if (($call405 | 0) == 0 | ($call405 | 0) == -1) {
      label = 105;
      break;
    } else {
      label = 102;
      break;
    }
   case 102:
    var $mul412 = $serial_1 * 10 & -1;
    var $isdigittmp = $call405 - 48 | 0;
    var $isdigit = $isdigittmp >>> 0 < 10;
    if ($isdigit) {
      var $cond416 = $isdigittmp;
      label = 104;
      break;
    } else {
      label = 103;
      break;
    }
   case 103:
    var $rem = ($call405 >>> 0) % 10;
    var $cond416 = $rem;
    label = 104;
    break;
   case 104:
    var $cond416;
    var $add417 = $cond416 + $mul412 | 0;
    var $serial_1 = $add417;
    label = 101;
    break;
   case 105:
    var $_pr130_pre = HEAP32[$tag >> 2];
    var $serial_2 = $serial_1;
    var $66 = $_pr130_pre;
    label = 106;
    break;
   case 106:
    var $66;
    var $serial_2;
    var $cmp420 = ($66 | 0) == 129;
    if ($cmp420) {
      label = 107;
      break;
    } else {
      var $_pr151 = $66;
      var $serial_259 = $serial_2;
      label = 109;
      break;
    }
   case 107:
    var $67 = HEAP32[$type >> 2];
    var $cmp423 = ($67 | 0) == 4;
    if ($cmp423) {
      label = 108;
      break;
    } else {
      var $serial_25961108 = $serial_2;
      var $72 = $67;
      label = 116;
      break;
    }
   case 108:
    var $call426 = _get4();
    HEAP32[5428492 >> 2] = $call426;
    var $68 = HEAP32[5264116 >> 2];
    var $add427 = $call426 + 41 | 0;
    var $call428 = _fseek($68, $add427, 0);
    var $call429 = _get2();
    var $mul431 = $call429 << 1;
    HEAP16[5245036 >> 1] = $mul431;
    var $call433 = _get2();
    HEAP16[5245028 >> 1] = $call433;
    HEAP32[5427632 >> 2] = 1633771873;
    var $_pr151_pre = HEAP32[$tag >> 2];
    var $_pr151 = $_pr151_pre;
    var $serial_259 = $serial_2;
    label = 109;
    break;
   case 109:
    var $serial_259;
    var $_pr151;
    var $cmp435 = ($_pr151 | 0) == 41;
    if ($cmp435) {
      label = 110;
      break;
    } else {
      var $_pr132 = $_pr151;
      var $serial_25961 = $serial_259;
      label = 114;
      break;
    }
   case 110:
    var $69 = HEAP32[$type >> 2];
    var $cmp438 = ($69 | 0) == 1;
    if ($cmp438) {
      label = 111;
      break;
    } else {
      var $ver97_2_ph_ph = $ver97_0267;
      var $serial_259616372115_ph = $serial_259;
      label = 141;
      break;
    }
   case 111:
    var $cmp441 = $wbi_1384244475053 >>> 0 < 18;
    if ($cmp441) {
      label = 112;
      break;
    } else {
      var $cond449 = 8;
      label = 113;
      break;
    }
   case 112:
    var $arrayidx444 = $wbi_1384244475053 + 5587460 | 0;
    var $70 = HEAP8[$arrayidx444];
    var $conv445 = $70 << 24 >> 24;
    var $sub446 = $conv445 << 5;
    var $phitmp = $sub446 - 1536 | 0;
    var $phitmp116 = $phitmp | 8;
    var $cond449 = $phitmp116;
    label = 113;
    break;
   case 113:
    var $cond449;
    var $71 = HEAP32[5264116 >> 2];
    var $call452 = _fseek($71, $cond449, 1);
    var $call457 = _get4();
    var $conv458 = $call457 >>> 0;
    HEAPF32[5561128 >> 2] = $conv458;
    var $call457_1 = _get4();
    var $conv458_1 = $call457_1 >>> 0;
    HEAPF32[5561124 >> 2] = $conv458_1;
    var $call457_2 = _get4();
    var $conv458_2 = $call457_2 >>> 0;
    HEAPF32[5561132 >> 2] = $conv458_2;
    var $call457_3 = _get4();
    var $conv458_3 = $call457_3 >>> 0;
    HEAPF32[5561136 >> 2] = $conv458_3;
    var $_pr131_pre = HEAP32[$tag >> 2];
    var $_pr132 = $_pr131_pre;
    var $serial_25961 = $serial_259;
    label = 114;
    break;
   case 114:
    var $serial_25961;
    var $_pr132;
    var $cmp465 = ($_pr132 | 0) == 129;
    if ($cmp465) {
      label = 115;
      break;
    } else {
      var $serial_2596165 = $serial_25961;
      var $_pr13266 = $_pr132;
      label = 117;
      break;
    }
   case 115:
    var $_pr147 = HEAP32[$type >> 2];
    var $serial_25961108 = $serial_25961;
    var $72 = $_pr147;
    label = 116;
    break;
   case 116:
    var $72;
    var $serial_25961108;
    var $cmp468 = ($72 | 0) == 7;
    if ($cmp468) {
      var $serial_2596164 = $serial_25961108;
      label = 121;
      break;
    } else {
      var $ver97_2_ph_ph = $ver97_0267;
      var $serial_259616372115_ph = $serial_25961108;
      label = 141;
      break;
    }
   case 117:
    var $_pr13266;
    var $serial_2596165;
    var $cmp471 = ($_pr13266 | 0) == 256;
    if ($cmp471) {
      label = 118;
      break;
    } else {
      var $_pr1326668 = $_pr13266;
      var $serial_259616569 = $serial_2596165;
      label = 119;
      break;
    }
   case 118:
    var $73 = HEAP32[$type >> 2];
    var $cmp474 = ($73 | 0) == 7;
    if ($cmp474) {
      var $serial_2596164 = $serial_2596165;
      label = 121;
      break;
    } else {
      var $ver97_2_ph_ph = $ver97_0267;
      var $serial_259616372115_ph = $serial_2596165;
      label = 141;
      break;
    }
   case 119:
    var $serial_259616569;
    var $_pr1326668;
    var $cmp477 = ($_pr1326668 | 0) == 640;
    if ($cmp477) {
      label = 120;
      break;
    } else {
      var $_pr162 = $_pr1326668;
      var $serial_2596163 = $serial_259616569;
      label = 122;
      break;
    }
   case 120:
    var $74 = HEAP32[$type >> 2];
    var $cmp480 = ($74 | 0) == 1;
    if ($cmp480) {
      var $serial_2596164 = $serial_259616569;
      label = 121;
      break;
    } else {
      var $ver97_2_ph_ph = $ver97_0267;
      var $serial_259616372115_ph = $serial_259616569;
      label = 141;
      break;
    }
   case 121:
    var $serial_2596164;
    var $75 = HEAP32[5264116 >> 2];
    var $call483 = _ftell($75);
    HEAP32[5244044 >> 2] = $call483;
    var $76 = HEAP32[$len >> 2];
    HEAP32[5244056 >> 2] = $76;
    var $_pr162_pre = HEAP32[$tag >> 2];
    var $_pr162 = $_pr162_pre;
    var $serial_2596163 = $serial_2596164;
    label = 122;
    break;
   case 122:
    var $serial_2596163;
    var $_pr162;
    var $cmp485 = ($_pr162 | 0) == 136;
    if ($cmp485) {
      label = 123;
      break;
    } else {
      var $78 = $_pr162;
      var $serial_259616372 = $serial_2596163;
      label = 127;
      break;
    }
   case 123:
    var $77 = HEAP32[$type >> 2];
    var $cmp488 = ($77 | 0) == 4;
    if ($cmp488) {
      label = 124;
      break;
    } else {
      label = 126;
      break;
    }
   case 124:
    var $call491 = _get4();
    HEAP32[5244044 >> 2] = $call491;
    var $tobool492 = ($call491 | 0) == 0;
    if ($tobool492) {
      label = 126;
      break;
    } else {
      label = 125;
      break;
    }
   case 125:
    var $add494 = $call491 + $base_addr_1 | 0;
    HEAP32[5244044 >> 2] = $add494;
    label = 126;
    break;
   case 126:
    var $_pr133 = HEAP32[$tag >> 2];
    var $78 = $_pr133;
    var $serial_259616372 = $serial_2596163;
    label = 127;
    break;
   case 127:
    var $serial_259616372;
    var $78;
    var $cmp496 = ($78 | 0) == 137;
    if ($cmp496) {
      label = 128;
      break;
    } else {
      var $_pr167 = $78;
      var $serial_259616372116 = $serial_259616372;
      label = 130;
      break;
    }
   case 128:
    var $79 = HEAP32[$type >> 2];
    var $cmp499 = ($79 | 0) == 4;
    if ($cmp499) {
      label = 129;
      break;
    } else {
      var $ver97_2_ph_ph = $ver97_0267;
      var $serial_259616372115_ph = $serial_259616372;
      label = 141;
      break;
    }
   case 129:
    var $call502 = _get4();
    HEAP32[5244056 >> 2] = $call502;
    var $_pr167_pre = HEAP32[$tag >> 2];
    var $_pr167 = $_pr167_pre;
    var $serial_259616372116 = $serial_259616372;
    label = 130;
    break;
   case 130:
    var $serial_259616372116;
    var $_pr167;
    if (($_pr167 | 0) == 150 | ($_pr167 | 0) == 140) {
      label = 131;
      break;
    } else {
      var $81 = $_pr167;
      var $serial_259616372116149 = $serial_259616372116;
      label = 132;
      break;
    }
   case 131:
    var $80 = HEAP32[5264116 >> 2];
    var $call510 = _ftell($80);
    HEAP32[5263440 >> 2] = $call510;
    var $_pr134 = HEAP32[$tag >> 2];
    var $81 = $_pr134;
    var $serial_259616372116149 = $serial_259616372116;
    label = 132;
    break;
   case 132:
    var $serial_259616372116149;
    var $81;
    var $cmp512 = ($81 | 0) == 151;
    if ($cmp512) {
      label = 133;
      break;
    } else {
      var $ver97_2_ph_ph = $ver97_0267;
      var $serial_259616372115_ph = $serial_259616372116149;
      label = 141;
      break;
    }
   case 133:
    var $mul519 = $ver97_0267 * 10 & -1;
    var $82 = HEAP32[5264116 >> 2];
    var $call520 = _fgetc($82);
    var $add521 = $mul519 - 48 | 0;
    var $sub522 = $add521 + $call520 | 0;
    var $mul519_1 = $sub522 * 10 & -1;
    var $83 = HEAP32[5264116 >> 2];
    var $call520_1 = _fgetc($83);
    var $add521_1 = $mul519_1 - 48 | 0;
    var $sub522_1 = $add521_1 + $call520_1 | 0;
    var $mul519_2 = $sub522_1 * 10 & -1;
    var $84 = HEAP32[5264116 >> 2];
    var $call520_2 = _fgetc($84);
    var $add521_2 = $mul519_2 - 48 | 0;
    var $sub522_2 = $add521_2 + $call520_2 | 0;
    var $mul519_3 = $sub522_2 * 10 & -1;
    var $85 = HEAP32[5264116 >> 2];
    var $call520_3 = _fgetc($85);
    var $add521_3 = $mul519_3 - 48 | 0;
    var $sub522_3 = $add521_3 + $call520_3 | 0;
    if (($sub522_3 | 0) == 100) {
      label = 134;
      break;
    } else if (($sub522_3 | 0) == 102) {
      label = 135;
      break;
    } else if (($sub522_3 | 0) == 103) {
      label = 136;
      break;
    } else {
      label = 137;
      break;
    }
   case 134:
    var $86 = HEAP32[5264116 >> 2];
    var $call527 = _fseek($86, 68, 1);
    var $call532 = _get2();
    var $conv533 = $call532 & 65535;
    HEAPF32[5561124 >> 2] = $conv533;
    var $call532_1 = _get2();
    var $conv533_1 = $call532_1 & 65535;
    HEAPF32[5561132 >> 2] = $conv533_1;
    var $call532_2 = _get2();
    var $conv533_2 = $call532_2 & 65535;
    HEAPF32[5561128 >> 2] = $conv533_2;
    var $call532_3 = _get2();
    var $conv533_3 = $call532_3 & 65535;
    HEAPF32[5561136 >> 2] = $conv533_3;
    var $ver97_2_ph_ph = 100;
    var $serial_259616372115_ph = $serial_259616372116149;
    label = 141;
    break;
   case 135:
    var $87 = HEAP32[5264116 >> 2];
    var $call542 = _fseek($87, 6, 1);
    var $serial_5 = $serial_259616372116149;
    var $ver97_5 = 102;
    label = 215;
    break;
   case 136:
    var $88 = HEAP32[5264116 >> 2];
    var $call544 = _fseek($88, 16, 1);
    var $call549 = _get2();
    var $conv550 = $call549 & 65535;
    HEAPF32[5561124 >> 2] = $conv550;
    var $call549_1 = _get2();
    var $conv550_1 = $call549_1 & 65535;
    HEAPF32[5561128 >> 2] = $conv550_1;
    var $call549_2 = _get2();
    var $conv550_2 = $call549_2 & 65535;
    HEAPF32[5561132 >> 2] = $conv550_2;
    var $call549_3 = _get2();
    var $conv550_3 = $call549_3 & 65535;
    HEAPF32[5561136 >> 2] = $conv550_3;
    var $ver97_2_ph_ph = 103;
    var $serial_259616372115_ph = $serial_259616372116149;
    label = 141;
    break;
   case 137:
    var $cmp556 = $sub522_3 >>> 0 > 199;
    if ($cmp556) {
      label = 138;
      break;
    } else {
      var $ver97_2_ph_ph = $sub522_3;
      var $serial_259616372115_ph = $serial_259616372116149;
      label = 141;
      break;
    }
   case 138:
    var $cmp559 = ($sub522_3 | 0) == 205;
    if ($cmp559) {
      label = 140;
      break;
    } else {
      label = 139;
      break;
    }
   case 139:
    var $89 = HEAP32[5264116 >> 2];
    var $call562 = _fseek($89, 280, 1);
    label = 140;
    break;
   case 140:
    var $90 = HEAP32[5264116 >> 2];
    var $call565 = _fread($arraydecay564, 324, 1, $90);
    var $ver97_2_ph_ph = $sub522_3;
    var $serial_259616372115_ph = $serial_259616372116149;
    label = 141;
    break;
   case 141:
    var $serial_259616372115_ph;
    var $ver97_2_ph_ph;
    var $_pr171_pr = HEAP32[$tag >> 2];
    var $cmp568 = ($_pr171_pr | 0) == 161;
    if ($cmp568) {
      label = 142;
      break;
    } else {
      var $93 = $_pr171_pr;
      var $serial_259616372115182 = $serial_259616372115_ph;
      var $ver97_2_ph183 = $ver97_2_ph_ph;
      label = 144;
      break;
    }
   case 142:
    var $91 = HEAP32[$type >> 2];
    var $cmp571 = ($91 | 0) == 7;
    if ($cmp571) {
      label = 143;
      break;
    } else {
      var $serial_7 = $serial_259616372115_ph;
      var $ver97_7 = $ver97_2_ph_ph;
      label = 220;
      break;
    }
   case 143:
    HEAP16[5262944 >> 1] = 18761;
    var $92 = HEAP32[5264116 >> 2];
    var $call574 = _fseek($92, 140, 1);
    var $call579 = _get4();
    var $conv580 = $call579 >>> 0;
    HEAPF32[5561124 >> 2] = $conv580;
    var $call579_1 = _get4();
    var $conv580_1 = $call579_1 >>> 0;
    HEAPF32[5561128 >> 2] = $conv580_1;
    var $call579_2 = _get4();
    var $conv580_2 = $call579_2 >>> 0;
    HEAPF32[5561132 >> 2] = $conv580_2;
    var $_pr135_pre = HEAP32[$tag >> 2];
    var $93 = $_pr135_pre;
    var $serial_259616372115182 = $serial_259616372115_ph;
    var $ver97_2_ph183 = $ver97_2_ph_ph;
    label = 144;
    break;
   case 144:
    var $ver97_2_ph183;
    var $serial_259616372115182;
    var $93;
    var $cmp586 = ($93 | 0) == 164;
    if ($cmp586) {
      label = 145;
      break;
    } else {
      var $_pr178 = $93;
      var $ver97_2_ph183190 = $ver97_2_ph183;
      var $serial_259616372115182191 = $serial_259616372115182;
      label = 147;
      break;
    }
   case 145:
    var $94 = HEAP32[$type >> 2];
    var $cmp589 = ($94 | 0) == 3;
    if ($cmp589) {
      label = 146;
      break;
    } else {
      var $serial_7 = $serial_259616372115182;
      var $ver97_7 = $ver97_2_ph183;
      label = 220;
      break;
    }
   case 146:
    var $95 = HEAP32[5264116 >> 2];
    var $mul592 = $wbi_1384244475053 * 48 & -1;
    var $call593 = _fseek($95, $mul592, 1);
    var $call598 = _get2();
    var $conv599 = $call598 & 65535;
    HEAPF32[5561124 >> 2] = $conv599;
    var $call598_1 = _get2();
    var $conv599_1 = $call598_1 & 65535;
    HEAPF32[5561128 >> 2] = $conv599_1;
    var $call598_2 = _get2();
    var $conv599_2 = $call598_2 & 65535;
    HEAPF32[5561132 >> 2] = $conv599_2;
    var $_pr178_pre = HEAP32[$tag >> 2];
    var $_pr178 = $_pr178_pre;
    var $ver97_2_ph183190 = $ver97_2_ph183;
    var $serial_259616372115182191 = $serial_259616372115182;
    label = 147;
    break;
   case 147:
    var $serial_259616372115182191;
    var $ver97_2_ph183190;
    var $_pr178;
    var $cmp605 = ($_pr178 | 0) == 167;
    if ($cmp605) {
      label = 148;
      break;
    } else {
      var $104 = $_pr178;
      var $serial_259616372115182191193 = $serial_259616372115182191;
      var $ver97_2_ph183190194 = $ver97_2_ph183190;
      label = 153;
      break;
    }
   case 148:
    var $sub608 = $ver97_2_ph183190 - 200 | 0;
    var $cmp609 = $sub608 >>> 0 < 17;
    if ($cmp609) {
      label = 149;
      break;
    } else {
      var $serial_7 = $serial_259616372115182191;
      var $ver97_7 = $ver97_2_ph183190;
      label = 220;
      break;
    }
   case 149:
    var $and612 = $serial_259616372115182191 & 255;
    var $arrayidx613 = $and612 + 5246004 | 0;
    var $96 = HEAP8[$arrayidx613];
    var $97 = HEAP32[5264116 >> 2];
    var $call614 = _fgetc($97);
    var $98 = HEAP32[5264116 >> 2];
    var $call615 = _fgetc($98);
    var $xor616 = $call615 ^ $call614;
    var $99 = HEAP32[5264116 >> 2];
    var $call617 = _fgetc($99);
    var $xor618 = $xor616 ^ $call617;
    var $100 = HEAP32[5264116 >> 2];
    var $call619 = _fgetc($100);
    var $xor620 = $xor618 ^ $call619;
    var $arrayidx621 = $xor620 + 5246260 | 0;
    var $101 = HEAP8[$arrayidx621];
    var $i_3249 = 0;
    var $cj_0250 = $101;
    var $ck_0251 = 96;
    label = 150;
    break;
   case 150:
    var $ck_0251;
    var $cj_0250;
    var $i_3249;
    var $mul629 = $ck_0251 * $96 & -1;
    var $add631 = $mul629 + $cj_0250 & 255;
    var $arrayidx634 = $buf97 + $i_3249 | 0;
    var $102 = HEAP8[$arrayidx634];
    var $xor636114 = $102 ^ $add631;
    HEAP8[$arrayidx634] = $xor636114;
    var $inc639 = $i_3249 + 1 | 0;
    var $exitcond = ($inc639 | 0) == 324;
    if ($exitcond) {
      label = 152;
      break;
    } else {
      label = 151;
      break;
    }
   case 151:
    var $inc627 = $ck_0251 + 1 & 255;
    var $i_3249 = $inc639;
    var $cj_0250 = $add631;
    var $ck_0251 = $inc627;
    label = 150;
    break;
   case 152:
    var $arrayidx642 = $sub608 + 5587424 | 0;
    var $103 = HEAP8[$arrayidx642];
    var $conv643 = $103 << 24 >> 24;
    var $sub644 = $conv643 - 48 | 0;
    var $and650 = $sub644 & -2;
    var $and658 = $sub644 & 1;
    var $add_ptr653 = $buf97 + $and650 | 0;
    var $call654 = _sget2($add_ptr653);
    var $conv655 = $call654 & 65535;
    var $arrayidx660 = 5561124 + ($and658 << 2) | 0;
    HEAPF32[$arrayidx660 >> 2] = $conv655;
    var $add_ptr651_sum_1 = $and650 + 2 | 0;
    var $add_ptr653_1 = $buf97 + $add_ptr651_sum_1 | 0;
    var $call654_1 = _sget2($add_ptr653_1);
    var $conv655_1 = $call654_1 & 65535;
    var $xor657_1 = $and658 ^ 1;
    var $arrayidx660_1 = 5561124 + ($xor657_1 << 2) | 0;
    HEAPF32[$arrayidx660_1 >> 2] = $conv655_1;
    var $add_ptr651_sum_2 = $and650 + 4 | 0;
    var $add_ptr653_2 = $buf97 + $add_ptr651_sum_2 | 0;
    var $call654_2 = _sget2($add_ptr653_2);
    var $conv655_2 = $call654_2 & 65535;
    var $xor659_2 = $and658 ^ 3;
    var $arrayidx660_2 = 5561124 + ($xor659_2 << 2) | 0;
    HEAPF32[$arrayidx660_2 >> 2] = $conv655_2;
    var $add_ptr651_sum_3 = $and650 + 6 | 0;
    var $add_ptr653_3 = $buf97 + $add_ptr651_sum_3 | 0;
    var $call654_3 = _sget2($add_ptr653_3);
    var $conv655_3 = $call654_3 & 65535;
    var $xor659_3292 = $and658 | 2;
    var $arrayidx660_3 = 5561124 + ($xor659_3292 << 2) | 0;
    HEAPF32[$arrayidx660_3 >> 2] = $conv655_3;
    var $_pr136_pre = HEAP32[$tag >> 2];
    var $104 = $_pr136_pre;
    var $serial_259616372115182191193 = $serial_259616372115182191;
    var $ver97_2_ph183190194 = $ver97_2_ph183190;
    label = 153;
    break;
   case 153:
    var $ver97_2_ph183190194;
    var $serial_259616372115182191193;
    var $104;
    var $cmp665 = ($104 | 0) == 512;
    if ($cmp665) {
      label = 154;
      break;
    } else {
      var $_pr192 = $104;
      var $serial_259616372125 = $serial_259616372115182191193;
      var $ver97_2_ph183190194196 = $ver97_2_ph183190194;
      label = 159;
      break;
    }
   case 154:
    var $105 = HEAP32[$len >> 2];
    var $cmp668 = ($105 | 0) == 3;
    if ($cmp668) {
      label = 155;
      break;
    } else {
      var $106 = $105;
      label = 157;
      break;
    }
   case 155:
    var $call671 = _get4();
    var $call672 = _get4();
    HEAP32[5244924 >> 2] = $call672;
    var $_pr185_pre = HEAP32[$tag >> 2];
    var $cmp674 = ($_pr185_pre | 0) == 512;
    if ($cmp674) {
      label = 156;
      break;
    } else {
      var $_pr192 = $_pr185_pre;
      var $serial_259616372125 = $serial_259616372115182191193;
      var $ver97_2_ph183190194196 = $ver97_2_ph183190194;
      label = 159;
      break;
    }
   case 156:
    var $_pr = HEAP32[$len >> 2];
    var $106 = $_pr;
    label = 157;
    break;
   case 157:
    var $106;
    var $cmp677 = ($106 | 0) == 4;
    if ($cmp677) {
      label = 158;
      break;
    } else {
      var $serial_7 = $serial_259616372115182191193;
      var $ver97_7 = $ver97_2_ph183190194;
      label = 220;
      break;
    }
   case 158:
    var $call684 = _get2();
    var $conv685 = $call684 & 65535;
    HEAP32[5560904 >> 2] = $conv685;
    var $call684_1 = _get2();
    var $conv685_1 = $call684_1 & 65535;
    HEAP32[5560908 >> 2] = $conv685_1;
    var $call684_2 = _get2();
    var $conv685_2 = $call684_2 & 65535;
    HEAP32[5560916 >> 2] = $conv685_2;
    var $call684_3 = _get2();
    var $conv685_3 = $call684_3 & 65535;
    HEAP32[5560912 >> 2] = $conv685_3;
    var $_pr137_pre = HEAP32[$tag >> 2];
    var $_pr192 = $_pr137_pre;
    var $serial_259616372125 = $serial_259616372115182191193;
    var $ver97_2_ph183190194196 = $ver97_2_ph183190194;
    label = 159;
    break;
   case 159:
    var $ver97_2_ph183190194196;
    var $serial_259616372125;
    var $_pr192;
    var $cmp693 = ($_pr192 | 0) == 513;
    if ($cmp693) {
      label = 160;
      break;
    } else {
      var $_pr19282 = $_pr192;
      var $serial_259616372125130 = $serial_259616372125;
      var $ver97_2_ph183190194196198 = $ver97_2_ph183190194196;
      label = 161;
      break;
    }
   case 160:
    var $107 = HEAP32[$len >> 2];
    var $cmp696 = ($107 | 0) == 4;
    if ($cmp696) {
      var $serial_5 = $serial_259616372125;
      var $ver97_5 = $ver97_2_ph183190194196;
      label = 215;
      break;
    } else {
      var $serial_7 = $serial_259616372125;
      var $ver97_7 = $ver97_2_ph183190194196;
      label = 220;
      break;
    }
   case 161:
    var $ver97_2_ph183190194196198;
    var $serial_259616372125130;
    var $_pr19282;
    var $cmp700 = ($_pr19282 | 0) == 544;
    if ($cmp700) {
      label = 162;
      break;
    } else {
      var $110 = $_pr19282;
      var $serial_259616372123 = $serial_259616372125130;
      var $ver97_2_ph183190194196198200 = $ver97_2_ph183190194196198;
      label = 164;
      break;
    }
   case 162:
    var $108 = HEAP32[$type >> 2];
    var $cmp703 = ($108 | 0) == 7;
    if ($cmp703) {
      label = 163;
      break;
    } else {
      var $serial_7 = $serial_259616372125130;
      var $ver97_7 = $ver97_2_ph183190194196198;
      label = 220;
      break;
    }
   case 163:
    var $109 = HEAP32[5264116 >> 2];
    var $call706 = _ftell($109);
    HEAP32[5263440 >> 2] = $call706;
    var $_pr138_pre = HEAP32[$tag >> 2];
    var $110 = $_pr138_pre;
    var $serial_259616372123 = $serial_259616372125130;
    var $ver97_2_ph183190194196198200 = $ver97_2_ph183190194196198;
    label = 164;
    break;
   case 164:
    var $ver97_2_ph183190194196198200;
    var $serial_259616372123;
    var $110;
    var $cmp708 = ($110 | 0) == 1025;
    if ($cmp708) {
      label = 165;
      break;
    } else {
      var $_pr199 = $110;
      var $serial_259616372123134 = $serial_259616372123;
      var $ver97_2_ph183190194196198200202 = $ver97_2_ph183190194196198200;
      label = 168;
      break;
    }
   case 165:
    var $111 = HEAP32[$type >> 2];
    var $cmp711 = ($111 | 0) == 4;
    if ($cmp711) {
      label = 166;
      break;
    } else {
      var $serial_7 = $serial_259616372123;
      var $ver97_7 = $ver97_2_ph183190194196198200;
      label = 220;
      break;
    }
   case 166:
    var $112 = HEAP32[$len >> 2];
    var $cmp714 = ($112 | 0) == 4;
    if ($cmp714) {
      label = 167;
      break;
    } else {
      var $serial_7 = $serial_259616372123;
      var $ver97_7 = $ver97_2_ph183190194196198200;
      label = 220;
      break;
    }
   case 167:
    var $call721 = _get4();
    HEAP32[5560904 >> 2] = $call721;
    var $call721_1 = _get4();
    HEAP32[5560908 >> 2] = $call721_1;
    var $call721_2 = _get4();
    HEAP32[5560916 >> 2] = $call721_2;
    var $call721_3 = _get4();
    HEAP32[5560912 >> 2] = $call721_3;
    var $_pr199_pre = HEAP32[$tag >> 2];
    var $_pr199 = $_pr199_pre;
    var $serial_259616372123134 = $serial_259616372123;
    var $ver97_2_ph183190194196198200202 = $ver97_2_ph183190194196198200;
    label = 168;
    break;
   case 168:
    var $ver97_2_ph183190194196198200202;
    var $serial_259616372123134;
    var $_pr199;
    var $cmp729 = ($_pr199 | 0) == 3585;
    if ($cmp729) {
      label = 169;
      break;
    } else {
      var $119 = $_pr199;
      var $serial_259616372123134151 = $serial_259616372123134;
      var $ver97_2_ph183190194196198200202204 = $ver97_2_ph183190194196198200202;
      label = 175;
      break;
    }
   case 169:
    HEAP16[5262944 >> 1] = 18761;
    var $113 = HEAP32[5264116 >> 2];
    var $call732 = _fseek($113, 22, 1);
    var $114 = HEAP32[$len >> 2];
    var $cmp735255 = $114 >>> 0 > 44;
    if ($cmp735255) {
      var $offset_0256 = 22;
      label = 170;
      break;
    } else {
      label = 174;
      break;
    }
   case 170:
    var $offset_0256;
    var $call738 = _get4();
    HEAP32[$tag >> 2] = $call738;
    var $115 = HEAP32[5264116 >> 2];
    var $call739 = _fseek($115, 14, 1);
    var $call740 = _get4();
    var $116 = HEAP32[$tag >> 2];
    var $cmp742 = ($116 | 0) == 1990472199;
    if ($cmp742) {
      label = 171;
      break;
    } else {
      label = 172;
      break;
    }
   case 171:
    var $call745 = _get2();
    var $conv746 = $call745 & 65535;
    HEAP32[5403048 >> 2] = $conv746;
    label = 173;
    break;
   case 172:
    var $sub741 = $call740 - 4 | 0;
    var $117 = HEAP32[5264116 >> 2];
    var $call748 = _fseek($117, $sub741, 1);
    label = 173;
    break;
   case 173:
    var $add751 = $offset_0256 + 18 | 0;
    var $add752 = $add751 + $call740 | 0;
    var $add734 = $add752 + 22 | 0;
    var $118 = HEAP32[$len >> 2];
    var $cmp735 = $add734 >>> 0 < $118 >>> 0;
    if ($cmp735) {
      var $offset_0256 = $add752;
      label = 170;
      break;
    } else {
      label = 174;
      break;
    }
   case 174:
    var $_pr139 = HEAP32[$tag >> 2];
    var $119 = $_pr139;
    var $serial_259616372123134151 = $serial_259616372123134;
    var $ver97_2_ph183190194196198200202204 = $ver97_2_ph183190194196198200202;
    label = 175;
    break;
   case 175:
    var $ver97_2_ph183190194196198200202204;
    var $serial_259616372123134151;
    var $119;
    var $cmp755 = ($119 | 0) == 3712;
    if ($cmp755) {
      label = 176;
      break;
    } else {
      var $_pr217 = $119;
      var $serial_259616372123134151163 = $serial_259616372123134151;
      var $ver97_2_ph183190194196198200202204206 = $ver97_2_ph183190194196198200202204;
      label = 179;
      break;
    }
   case 176:
    var $120 = HEAP32[$len >> 2];
    var $cmp758 = ($120 | 0) == 256;
    if ($cmp758) {
      label = 177;
      break;
    } else {
      var $serial_7 = $serial_259616372123134151;
      var $ver97_7 = $ver97_2_ph183190194196198200202204;
      label = 220;
      break;
    }
   case 177:
    var $121 = HEAP32[$type >> 2];
    var $cmp761 = ($121 | 0) == 7;
    if ($cmp761) {
      label = 178;
      break;
    } else {
      var $serial_7 = $serial_259616372123134151;
      var $ver97_7 = $ver97_2_ph183190194196198200202204;
      label = 220;
      break;
    }
   case 178:
    var $122 = HEAP32[5264116 >> 2];
    var $call764 = _fseek($122, 48, 1);
    var $call765 = _get2();
    var $conv766 = $call765 & 65535;
    var $mul767 = $conv766 * 508 & -1;
    var $conv768 = $mul767 | 0;
    var $mul769 = $conv768 * 1.078;
    var $div770 = $mul769 * 152587890625e-16;
    var $conv771 = $div770;
    HEAPF32[5561124 >> 2] = $conv771;
    var $call772 = _get2();
    var $conv773 = $call772 & 65535;
    var $mul774 = $conv773 * 382 & -1;
    var $conv775 = $mul774 | 0;
    var $mul776 = $conv775 * 1.173;
    var $div777 = $mul776 * 152587890625e-16;
    var $conv778 = $div777;
    HEAPF32[5561132 >> 2] = $conv778;
    var $_pr206_pre = HEAP32[$tag >> 2];
    var $_pr217 = $_pr206_pre;
    var $serial_259616372123134151163 = $serial_259616372123134151;
    var $ver97_2_ph183190194196198200202204206 = $ver97_2_ph183190194196198200202204;
    label = 179;
    break;
   case 179:
    var $ver97_2_ph183190194196198200202204206;
    var $serial_259616372123134151163;
    var $_pr217;
    var $cmp780 = ($_pr217 | 0) == 3840;
    if ($cmp780) {
      label = 180;
      break;
    } else {
      var $_pr21788 = $_pr217;
      var $serial_259616372123134151163169 = $serial_259616372123134151163;
      var $ver97_2_ph183190194196198200202204206208 = $ver97_2_ph183190194196198200202204206;
      label = 184;
      break;
    }
   case 180:
    var $123 = HEAP32[$type >> 2];
    var $cmp783 = ($123 | 0) == 7;
    if ($cmp783) {
      label = 181;
      break;
    } else {
      var $serial_7 = $serial_259616372123134151163;
      var $ver97_7 = $ver97_2_ph183190194196198200202204206;
      label = 220;
      break;
    }
   case 181:
    var $124 = HEAP32[$len >> 2];
    if (($124 | 0) == 614) {
      label = 182;
      break;
    } else if (($124 | 0) == 1502 | ($124 | 0) == 734) {
      label = 183;
      break;
    } else {
      var $serial_7 = $serial_259616372123134151163;
      var $ver97_7 = $ver97_2_ph183190194196198200202204206;
      label = 220;
      break;
    }
   case 182:
    var $125 = HEAP32[5264116 >> 2];
    var $call789 = _fseek($125, 176, 1);
    var $serial_3 = $serial_259616372123134151163;
    var $ver97_3 = $ver97_2_ph183190194196198200202204206;
    label = 196;
    break;
   case 183:
    var $126 = HEAP32[5264116 >> 2];
    var $call797 = _fseek($126, 148, 1);
    var $serial_3 = $serial_259616372123134151163;
    var $ver97_3 = $ver97_2_ph183190194196198200202204206;
    label = 196;
    break;
   case 184:
    var $ver97_2_ph183190194196198200202204206208;
    var $serial_259616372123134151163169;
    var $_pr21788;
    var $cmp802 = ($_pr21788 | 0) == 4113;
    if ($cmp802) {
      label = 185;
      break;
    } else {
      var $_pr2178890 = $_pr21788;
      var $serial_259616372119 = $serial_259616372123134151163169;
      var $ver97_2_ph186 = $ver97_2_ph183190194196198200202204206208;
      label = 186;
      break;
    }
   case 185:
    var $127 = HEAP32[$len >> 2];
    var $cmp805 = ($127 | 0) == 9;
    if ($cmp805) {
      var $serial_259616372118 = $serial_259616372123134151163169;
      var $ver97_2_ph185 = $ver97_2_ph183190194196198200202204206208;
      label = 223;
      break;
    } else {
      var $serial_7 = $serial_259616372123134151163169;
      var $ver97_7 = $ver97_2_ph183190194196198200202204206208;
      label = 220;
      break;
    }
   case 186:
    var $ver97_2_ph186;
    var $serial_259616372119;
    var $_pr2178890;
    var $cmp808 = ($_pr2178890 | 0) == 541065728;
    if ($cmp808) {
      var $serial_259616372118 = $serial_259616372119;
      var $ver97_2_ph185 = $ver97_2_ph186;
      label = 223;
      break;
    } else {
      var $128 = $_pr2178890;
      var $serial_259616372117 = $serial_259616372119;
      var $ver97_2_ph184 = $ver97_2_ph186;
      label = 187;
      break;
    }
   case 187:
    var $ver97_2_ph184;
    var $serial_259616372117;
    var $128;
    if (($128 | 0) == 541066752 | ($128 | 0) == 4114) {
      label = 188;
      break;
    } else {
      var $_pr221 = $128;
      var $serial_259616372117152 = $serial_259616372117;
      var $ver97_2_ph184216 = $ver97_2_ph184;
      label = 190;
      break;
    }
   case 188:
    var $129 = HEAP32[$len >> 2];
    var $cmp839 = ($129 | 0) == 4;
    if ($cmp839) {
      label = 189;
      break;
    } else {
      var $_pr221 = $128;
      var $serial_259616372117152 = $serial_259616372117;
      var $ver97_2_ph184216 = $ver97_2_ph184;
      label = 190;
      break;
    }
   case 189:
    var $call846 = _get2();
    var $conv847 = $call846 & 65535;
    HEAP32[5560904 >> 2] = $conv847;
    var $call846_1 = _get2();
    var $conv847_1 = $call846_1 & 65535;
    HEAP32[5560908 >> 2] = $conv847_1;
    var $call846_2 = _get2();
    var $conv847_2 = $call846_2 & 65535;
    HEAP32[5560916 >> 2] = $conv847_2;
    var $call846_3 = _get2();
    var $conv847_3 = $call846_3 & 65535;
    HEAP32[5560912 >> 2] = $conv847_3;
    var $_pr221_pre = HEAP32[$tag >> 2];
    var $_pr221 = $_pr221_pre;
    var $serial_259616372117152 = $serial_259616372117;
    var $ver97_2_ph184216 = $ver97_2_ph184;
    label = 190;
    break;
   case 190:
    var $ver97_2_ph184216;
    var $serial_259616372117152;
    var $_pr221;
    if (($_pr221 | 0) == 541065472 | ($_pr221 | 0) == 4119) {
      var $ver97_2_ph184216222 = $ver97_2_ph184216;
      var $serial_259616372117152223 = $serial_259616372117152;
      label = 191;
      break;
    } else {
      var $130 = $_pr221;
      var $serial_259616372117152164 = $serial_259616372117152;
      var $ver97_2_ph184216220 = $ver97_2_ph184216;
      label = 192;
      break;
    }
   case 191:
    var $serial_259616372117152223;
    var $ver97_2_ph184216222;
    var $call861 = _get2();
    var $conv862 = $call861 & 65535;
    var $conv863 = $conv862 | 0;
    var $div864 = $conv863 * .00390625;
    var $conv865 = $div864;
    HEAPF32[5561124 >> 2] = $conv865;
    var $_pr142 = HEAP32[$tag >> 2];
    var $130 = $_pr142;
    var $serial_259616372117152164 = $serial_259616372117152223;
    var $ver97_2_ph184216220 = $ver97_2_ph184216222;
    label = 192;
    break;
   case 192:
    var $ver97_2_ph184216220;
    var $serial_259616372117152164;
    var $130;
    if (($130 | 0) == 541065472 | ($130 | 0) == 4120) {
      var $serial_2150153155164166168170173177180184187191194198201205208214219223224 = $serial_259616372117152164;
      var $ver97_2174176181183188190195197202204209211220222226 = $ver97_2_ph184216220;
      label = 193;
      break;
    } else {
      var $serial_2150153155164166168170173177180184187191194198201205208214219223225 = $serial_259616372117152164;
      var $ver97_2174176181183188190195197202204209211220222227 = $ver97_2_ph184216220;
      var $131 = $130;
      label = 194;
      break;
    }
   case 193:
    var $ver97_2174176181183188190195197202204209211220222226;
    var $serial_2150153155164166168170173177180184187191194198201205208214219223224;
    var $call873 = _get2();
    var $conv874 = $call873 & 65535;
    var $conv875 = $conv874 | 0;
    var $div876 = $conv875 * .00390625;
    var $conv877 = $div876;
    HEAPF32[5561132 >> 2] = $conv877;
    var $_pre34 = HEAP32[$tag >> 2];
    var $serial_2150153155164166168170173177180184187191194198201205208214219223225 = $serial_2150153155164166168170173177180184187191194198201205208214219223224;
    var $ver97_2174176181183188190195197202204209211220222227 = $ver97_2174176181183188190195197202204209211220222226;
    var $131 = $_pre34;
    label = 194;
    break;
   case 194:
    var $131;
    var $ver97_2174176181183188190195197202204209211220222227;
    var $serial_2150153155164166168170173177180184187191194198201205208214219223225;
    var $cmp879 = ($131 | 0) == 8209;
    if ($cmp879) {
      label = 195;
      break;
    } else {
      var $serial_4 = $serial_2150153155164166168170173177180184187191194198201205208214219223225;
      var $ver97_4 = $ver97_2174176181183188190195197202204209211220222227;
      var $133 = $131;
      label = 197;
      break;
    }
   case 195:
    var $132 = HEAP32[$len >> 2];
    var $cmp882 = ($132 | 0) == 2;
    if ($cmp882) {
      var $serial_3 = $serial_2150153155164166168170173177180184187191194198201205208214219223225;
      var $ver97_3 = $ver97_2174176181183188190195197202204209211220222227;
      label = 196;
      break;
    } else {
      var $serial_7 = $serial_2150153155164166168170173177180184187191194198201205208214219223225;
      var $ver97_7 = $ver97_2174176181183188190195197202204209211220222227;
      label = 220;
      break;
    }
   case 196:
    var $ver97_3;
    var $serial_3;
    HEAP16[5262944 >> 1] = 19789;
    var $call885 = _get2();
    var $conv886 = $call885 & 65535;
    var $conv887 = $conv886 | 0;
    var $div888 = $conv887 * .00390625;
    var $conv889 = $div888;
    HEAPF32[5561124 >> 2] = $conv889;
    var $call890 = _get2();
    var $conv891 = $call890 & 65535;
    var $conv892 = $conv891 | 0;
    var $div893 = $conv892 * .00390625;
    var $conv894 = $div893;
    HEAPF32[5561132 >> 2] = $conv894;
    var $_pre15 = HEAP32[$tag >> 2];
    var $serial_4 = $serial_3;
    var $ver97_4 = $ver97_3;
    var $133 = $_pre15;
    label = 197;
    break;
   case 197:
    var $133;
    var $ver97_4;
    var $serial_4;
    var $or896 = $133 | 112;
    var $cmp897 = ($or896 | 0) == 8304;
    if ($cmp897) {
      label = 198;
      break;
    } else {
      var $136 = $133;
      var $ver97_497 = $ver97_4;
      var $serial_498 = $serial_4;
      label = 200;
      break;
    }
   case 198:
    var $134 = HEAP32[$type >> 2];
    var $cmp900 = ($134 | 0) == 4;
    if ($cmp900) {
      label = 199;
      break;
    } else {
      var $136 = $133;
      var $ver97_497 = $ver97_4;
      var $serial_498 = $serial_4;
      label = 200;
      break;
    }
   case 199:
    var $135 = HEAP32[5264116 >> 2];
    var $call903 = _get4();
    var $add904 = $call903 + $base_addr_1 | 0;
    var $call905 = _fseek($135, $add904, 0);
    var $_pr143_pre = HEAP32[$tag >> 2];
    var $136 = $_pr143_pre;
    var $ver97_497 = $ver97_4;
    var $serial_498 = $serial_4;
    label = 200;
    break;
   case 200:
    var $serial_498;
    var $ver97_497;
    var $136;
    var $cmp907 = ($136 | 0) == 8208;
    if ($cmp907) {
      label = 201;
      break;
    } else {
      var $serial_498138 = $serial_498;
      var $ver97_497140 = $ver97_497;
      var $138 = $136;
      label = 203;
      break;
    }
   case 201:
    var $137 = HEAP32[$type >> 2];
    var $cmp910 = ($137 | 0) == 7;
    if ($cmp910) {
      var $serial_7 = $serial_498;
      var $ver97_7 = $ver97_497;
      label = 220;
      break;
    } else {
      label = 202;
      break;
    }
   case 202:
    HEAP32[5263692 >> 2] = 62;
    var $serial_498138 = $serial_498;
    var $ver97_497140 = $ver97_497;
    var $138 = $136;
    label = 203;
    break;
   case 203:
    var $138;
    var $ver97_497140;
    var $serial_498138;
    var $cmp914 = ($138 | 0) == 8224;
    if ($cmp914) {
      label = 204;
      break;
    } else {
      var $139 = $138;
      label = 205;
      break;
    }
   case 204:
    _parse_thumb_note($base_addr_1, 257, 258);
    var $_pr144 = HEAP32[$tag >> 2];
    var $139 = $_pr144;
    label = 205;
    break;
   case 205:
    var $139;
    var $cmp918 = ($139 | 0) == 8256;
    if ($cmp918) {
      label = 206;
      break;
    } else {
      var $140 = $139;
      label = 207;
      break;
    }
   case 206:
    _parse_makernote($base_addr_1, 8256);
    var $_pre17 = HEAP32[$tag >> 2];
    var $140 = $_pre17;
    label = 207;
    break;
   case 207:
    var $140;
    var $cmp922 = ($140 | 0) == 45096;
    if ($cmp922) {
      label = 208;
      break;
    } else {
      var $142 = $140;
      label = 209;
      break;
    }
   case 208:
    var $141 = HEAP32[5264116 >> 2];
    var $call925 = _get4();
    var $add926 = $call925 + $base_addr_1 | 0;
    var $call927 = _fseek($141, $add926, 0);
    _parse_thumb_note($base_addr_1, 136, 137);
    var $_pr145 = HEAP32[$tag >> 2];
    var $142 = $_pr145;
    label = 209;
    break;
   case 209:
    var $142;
    var $cmp929 = ($142 | 0) == 16385;
    if ($cmp929) {
      label = 210;
      break;
    } else {
      var $serial_6 = $serial_498138;
      var $ver97_6 = $ver97_497140;
      var $147 = $142;
      label = 216;
      break;
    }
   case 210:
    var $143 = HEAP32[$len >> 2];
    var $cmp932 = $143 >>> 0 > 500;
    if ($cmp932) {
      label = 211;
      break;
    } else {
      var $serial_7 = $serial_498138;
      var $ver97_7 = $ver97_497140;
      label = 220;
      break;
    }
   case 211:
    var $cmp935 = ($143 | 0) == 582;
    if ($cmp935) {
      var $cond949 = 50;
      label = 214;
      break;
    } else {
      label = 212;
      break;
    }
   case 212:
    var $cmp939 = ($143 | 0) == 653;
    if ($cmp939) {
      var $cond949 = 68;
      label = 214;
      break;
    } else {
      label = 213;
      break;
    }
   case 213:
    var $cmp943 = ($143 | 0) == 5120;
    var $cond945 = $cmp943 ? 142 : 126;
    var $cond949 = $cond945;
    label = 214;
    break;
   case 214:
    var $cond949;
    var $144 = HEAP32[5264116 >> 2];
    var $call950 = _fseek($144, $cond949, 1);
    var $serial_5 = $serial_498138;
    var $ver97_5 = $ver97_497140;
    label = 215;
    break;
   case 215:
    var $ver97_5;
    var $serial_5;
    var $call955 = _get2();
    var $conv956 = $call955 & 65535;
    HEAPF32[5561124 >> 2] = $conv956;
    var $call955_1 = _get2();
    var $conv956_1 = $call955_1 & 65535;
    HEAPF32[5561128 >> 2] = $conv956_1;
    var $call955_2 = _get2();
    var $conv956_2 = $call955_2 & 65535;
    HEAPF32[5561136 >> 2] = $conv956_2;
    var $call955_3 = _get2();
    var $conv956_3 = $call955_3 & 65535;
    HEAPF32[5561132 >> 2] = $conv956_3;
    var $145 = HEAP32[$len >> 2];
    var $shr963_mask = $145 & -8;
    var $cmp964 = ($shr963_mask | 0) == 1312;
    var $cond966 = $cmp964 ? 112 : 22;
    var $146 = HEAP32[5264116 >> 2];
    var $call967 = _fseek($146, $cond966, 1);
    var $call972 = _get2();
    HEAP16[5244124 >> 1] = $call972;
    var $call972_1 = _get2();
    HEAP16[5244120 >> 1] = $call972_1;
    var $call972_2 = _get2();
    var $call972_3 = _get2();
    HEAP16[5244116 >> 1] = $call972_3;
    var $_pre18 = HEAP32[$tag >> 2];
    var $serial_6 = $serial_5;
    var $ver97_6 = $ver97_5;
    var $147 = $_pre18;
    label = 216;
    break;
   case 216:
    var $147;
    var $ver97_6;
    var $serial_6;
    var $cmp980 = ($147 | 0) == 40993;
    if ($cmp980) {
      label = 217;
      break;
    } else {
      var $148 = $147;
      label = 218;
      break;
    }
   case 217:
    var $call987 = _get4();
    var $conv988 = $call987 >>> 0;
    HEAPF32[5561124 >> 2] = $conv988;
    var $call987_1 = _get4();
    var $conv988_1 = $call987_1 >>> 0;
    HEAPF32[5561128 >> 2] = $conv988_1;
    var $call987_2 = _get4();
    var $conv988_2 = $call987_2 >>> 0;
    HEAPF32[5561136 >> 2] = $conv988_2;
    var $call987_3 = _get4();
    var $conv988_3 = $call987_3 >>> 0;
    HEAPF32[5561132 >> 2] = $conv988_3;
    var $_pr146 = HEAP32[$tag >> 2];
    var $148 = $_pr146;
    label = 218;
    break;
   case 218:
    var $148;
    var $cmp996 = ($148 | 0) == 41e3;
    if ($cmp996) {
      label = 219;
      break;
    } else {
      var $serial_7 = $serial_6;
      var $ver97_7 = $ver97_6;
      label = 220;
      break;
    }
   case 219:
    var $call1003 = _get4();
    var $conv1004 = $call1003 >>> 0;
    var $149 = HEAPF32[5561124 >> 2];
    var $sub1008 = $149 - $conv1004;
    HEAPF32[5561124 >> 2] = $sub1008;
    var $call1003_1 = _get4();
    var $conv1004_1 = $call1003_1 >>> 0;
    var $150 = HEAPF32[5561128 >> 2];
    var $sub1008_1 = $150 - $conv1004_1;
    HEAPF32[5561128 >> 2] = $sub1008_1;
    var $call1003_2 = _get4();
    var $conv1004_2 = $call1003_2 >>> 0;
    var $151 = HEAPF32[5561136 >> 2];
    var $sub1008_2 = $151 - $conv1004_2;
    HEAPF32[5561136 >> 2] = $sub1008_2;
    var $call1003_3 = _get4();
    var $conv1004_3 = $call1003_3 >>> 0;
    var $152 = HEAPF32[5561132 >> 2];
    var $sub1008_3 = $152 - $conv1004_3;
    HEAPF32[5561132 >> 2] = $sub1008_3;
    var $serial_7 = $serial_6;
    var $ver97_7 = $ver97_6;
    label = 220;
    break;
   case 220:
    var $ver97_7;
    var $serial_7;
    var $153 = HEAP32[5264116 >> 2];
    var $154 = HEAP32[$save >> 2];
    var $call1013 = _fseek($153, $154, 0);
    var $tobool153 = ($dec270 | 0) == 0;
    if ($tobool153) {
      label = 221;
      break;
    } else {
      var $ver97_0267 = $ver97_7;
      var $serial_0268 = $serial_7;
      var $wbi_0269 = $wbi_1384244475053;
      var $dec270_in = $dec270;
      label = 37;
      break;
    }
   case 221:
    HEAP16[5262944 >> 1] = $0;
    label = 222;
    break;
   case 222:
    STACKTOP = __stackBase__;
    return;
   case 223:
    var $ver97_2_ph185;
    var $serial_259616372118;
    var $call819 = _get2();
    var $conv821 = $call819 << 16 >> 16;
    var $div822 = $conv821 * .00390625;
    var $conv823 = $div822;
    HEAPF32[5560844 >> 2] = $conv823;
    var $call819_1 = _get2();
    var $conv821_1 = $call819_1 << 16 >> 16;
    var $div822_1 = $conv821_1 * .00390625;
    var $conv823_1 = $div822_1;
    HEAPF32[5560848 >> 2] = $conv823_1;
    var $call819_2 = _get2();
    var $conv821_2 = $call819_2 << 16 >> 16;
    var $div822_2 = $conv821_2 * .00390625;
    var $conv823_2 = $div822_2;
    HEAPF32[5560852 >> 2] = $conv823_2;
    var $call819_1276 = _get2();
    var $conv821_1277 = $call819_1276 << 16 >> 16;
    var $div822_1278 = $conv821_1277 * .00390625;
    var $conv823_1279 = $div822_1278;
    HEAPF32[5560860 >> 2] = $conv823_1279;
    var $call819_1_1 = _get2();
    var $conv821_1_1 = $call819_1_1 << 16 >> 16;
    var $div822_1_1 = $conv821_1_1 * .00390625;
    var $conv823_1_1 = $div822_1_1;
    HEAPF32[5560864 >> 2] = $conv823_1_1;
    var $call819_2_1 = _get2();
    var $conv821_2_1 = $call819_2_1 << 16 >> 16;
    var $div822_2_1 = $conv821_2_1 * .00390625;
    var $conv823_2_1 = $div822_2_1;
    HEAPF32[5560868 >> 2] = $conv823_2_1;
    var $call819_2281 = _get2();
    var $conv821_2282 = $call819_2281 << 16 >> 16;
    var $div822_2283 = $conv821_2282 * .00390625;
    var $conv823_2284 = $div822_2283;
    HEAPF32[5560876 >> 2] = $conv823_2284;
    var $call819_1_2 = _get2();
    var $conv821_1_2 = $call819_1_2 << 16 >> 16;
    var $div822_1_2 = $conv821_1_2 * .00390625;
    var $conv823_1_2 = $div822_1_2;
    HEAPF32[5560880 >> 2] = $conv823_1_2;
    var $call819_2_2 = _get2();
    var $conv821_2_2 = $call819_2_2 << 16 >> 16;
    var $div822_2_2 = $conv821_2_2 * .00390625;
    var $conv823_2_2 = $div822_2_2;
    HEAPF32[5560884 >> 2] = $conv823_2_2;
    var $_pr141 = HEAP32[$tag >> 2];
    var $128 = $_pr141;
    var $serial_259616372117 = $serial_259616372118;
    var $ver97_2_ph184 = $ver97_2_ph185;
    label = 187;
    break;
  }
}
_parse_makernote["X"] = 1;
function _parse_tiff_ifd($base) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 100 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $tag = __stackBase__;
    var $type = __stackBase__ + 4;
    var $len = __stackBase__ + 8;
    var $save = __stackBase__ + 12;
    var $software = __stackBase__ + 16;
    var $cfa_pat = __stackBase__ + 80;
    var $cfa_pc = __stackBase__ + 96;
    var $tmpcast = $cfa_pc;
    var $tab = STACKTOP;
    STACKTOP = STACKTOP + 256 | 0;
    var $cc = STACKTOP;
    STACKTOP = STACKTOP + 128 | 0;
    var $cm = STACKTOP;
    STACKTOP = STACKTOP + 96 | 0;
    var $cam_xyz = STACKTOP;
    STACKTOP = STACKTOP + 96 | 0;
    var $ab = STACKTOP;
    STACKTOP = STACKTOP + 32 | 0;
    var $asn = STACKTOP;
    STACKTOP = STACKTOP + 32 | 0;
    var $jh = STACKTOP;
    STACKTOP = STACKTOP + 96 | 0;
    var $0 = $cfa_pc;
    HEAP32[$cfa_pc >> 2] = 50462976;
    var $1 = $ab;
    HEAP32[$1 >> 2] = HEAP32[5245768 >> 2];
    HEAP32[$1 + 4 >> 2] = HEAP32[5245772 >> 2];
    HEAP32[$1 + 8 >> 2] = HEAP32[5245776 >> 2];
    HEAP32[$1 + 12 >> 2] = HEAP32[5245780 >> 2];
    HEAP32[$1 + 16 >> 2] = HEAP32[5245784 >> 2];
    HEAP32[$1 + 20 >> 2] = HEAP32[5245788 >> 2];
    HEAP32[$1 + 24 >> 2] = HEAP32[5245792 >> 2];
    HEAP32[$1 + 28 >> 2] = HEAP32[5245796 >> 2];
    var $2 = $asn;
    HEAP32[$2 >> 2] = 0;
    HEAP32[$2 + 4 >> 2] = 0;
    HEAP32[$2 + 8 >> 2] = 0;
    HEAP32[$2 + 12 >> 2] = 0;
    HEAP32[$2 + 16 >> 2] = 0;
    HEAP32[$2 + 20 >> 2] = 0;
    HEAP32[$2 + 24 >> 2] = 0;
    HEAP32[$2 + 28 >> 2] = 0;
    var $3 = HEAP32[5243584 >> 2];
    var $cmp = $3 >>> 0 > 9;
    if ($cmp) {
      var $retval_0 = 1;
      label = 208;
      break;
    } else {
      label = 226;
      break;
    }
   case 3:
    var $tobool309 = $call << 16 >> 16 == 0;
    if ($tobool309) {
      var $use_cm_0_lcssa370 = 0;
      var $xyz_sroa_0_2 = 1;
      var $xyz_sroa_1_2 = 1;
      var $xyz_sroa_2_2 = 1;
      label = 193;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $wide = $jh + 8 | 0;
    var $high = $jh + 4 | 0;
    var $bits = $jh | 0;
    var $clrs = $jh + 12 | 0;
    var $sraw = $jh + 16 | 0;
    var $arraydecay = $software | 0;
    var $arraydecay369 = $cfa_pat | 0;
    var $ifd_0310 = $3;
    var $use_cm_0311 = 0;
    var $ima_len_0312 = 0;
    var $blrr_0313 = 1;
    var $blrc_0314 = 1;
    var $plen_0315 = 16;
    var $sony_offset_0316 = 0;
    var $sony_length_0317 = 0;
    var $sony_key_0318 = 0;
    var $dec319_in = $conv12;
    var $xyz_sroa_0_0 = 1;
    var $xyz_sroa_1_0 = 1;
    var $xyz_sroa_2_0 = 1;
    label = 5;
    break;
   case 5:
    var $xyz_sroa_2_0;
    var $xyz_sroa_1_0;
    var $xyz_sroa_0_0;
    var $dec319_in;
    var $sony_key_0318;
    var $sony_length_0317;
    var $sony_offset_0316;
    var $plen_0315;
    var $blrc_0314;
    var $blrr_0313;
    var $ima_len_0312;
    var $use_cm_0311;
    var $ifd_0310;
    var $dec319 = $dec319_in - 1 | 0;
    _tiff_get($base, $tag, $type, $len, $save);
    var $4 = HEAP32[$tag >> 2];
    if (($4 | 0) == 50715 | ($4 | 0) == 50716) {
      label = 6;
      break;
    } else if (($4 | 0) == 50721 | ($4 | 0) == 50722) {
      label = 7;
      break;
    } else if (($4 | 0) == 50723 | ($4 | 0) == 50724) {
      label = 8;
      break;
    } else if (($4 | 0) == 50727) {
      label = 9;
      break;
    } else if (($4 | 0) == 50728) {
      label = 10;
      break;
    } else if (($4 | 0) == 50830) {
      label = 11;
      break;
    } else if (($4 | 0) == 5) {
      label = 12;
      break;
    } else if (($4 | 0) == 6) {
      label = 13;
      break;
    } else if (($4 | 0) == 7) {
      label = 14;
      break;
    } else if (($4 | 0) == 9) {
      label = 15;
      break;
    } else if (($4 | 0) == 17 | ($4 | 0) == 18) {
      label = 16;
      break;
    } else if (($4 | 0) == 23) {
      label = 19;
      break;
    } else if (($4 | 0) == 36 | ($4 | 0) == 37 | ($4 | 0) == 38) {
      label = 21;
      break;
    } else if (($4 | 0) == 39) {
      label = 22;
      break;
    } else if (($4 | 0) == 46) {
      label = 24;
      break;
    } else if (($4 | 0) == 61440) {
      label = 28;
      break;
    } else if (($4 | 0) == 2 | ($4 | 0) == 256 | ($4 | 0) == 61441) {
      label = 29;
      break;
    } else if (($4 | 0) == 3 | ($4 | 0) == 257 | ($4 | 0) == 61442) {
      label = 30;
      break;
    } else if (($4 | 0) == 258 | ($4 | 0) == 61443) {
      label = 31;
      break;
    } else if (($4 | 0) == 61446) {
      label = 32;
      break;
    } else if (($4 | 0) == 259) {
      label = 35;
      break;
    } else if (($4 | 0) == 262) {
      label = 36;
      break;
    } else if (($4 | 0) == 270) {
      label = 37;
      break;
    } else if (($4 | 0) == 271) {
      label = 38;
      break;
    } else if (($4 | 0) == 272) {
      label = 39;
      break;
    } else if (($4 | 0) == 280) {
      label = 40;
      break;
    } else if (($4 | 0) == 273 | ($4 | 0) == 513 | ($4 | 0) == 61447) {
      label = 42;
      break;
    } else if (($4 | 0) == 274) {
      label = 48;
      break;
    } else if (($4 | 0) == 277) {
      label = 49;
      break;
    } else if (($4 | 0) == 279 | ($4 | 0) == 514 | ($4 | 0) == 61448) {
      label = 50;
      break;
    } else if (($4 | 0) == 61454) {
      label = 51;
      break;
    } else if (($4 | 0) == 305 | ($4 | 0) == 11) {
      label = 52;
      break;
    } else if (($4 | 0) == 306) {
      label = 59;
      break;
    } else if (($4 | 0) == 315) {
      label = 60;
      break;
    } else if (($4 | 0) == 322) {
      label = 61;
      break;
    } else if (($4 | 0) == 323) {
      label = 62;
      break;
    } else if (($4 | 0) == 324) {
      label = 63;
      break;
    } else if (($4 | 0) == 330) {
      label = 68;
      break;
    } else if (($4 | 0) == 400) {
      label = 74;
      break;
    } else if (($4 | 0) == 28688) {
      label = 76;
      break;
    } else if (($4 | 0) == 29184) {
      label = 79;
      break;
    } else if (($4 | 0) == 29185) {
      label = 80;
      break;
    } else if (($4 | 0) == 29217) {
      label = 81;
      break;
    } else if (($4 | 0) == 29264) {
      label = 82;
      break;
    } else if (($4 | 0) == 29443) {
      label = 83;
      break;
    } else if (($4 | 0) == 29459) {
      label = 84;
      break;
    } else if (($4 | 0) == 33405) {
      label = 87;
      break;
    } else if (($4 | 0) == 33422 | ($4 | 0) == 64777) {
      label = 88;
      break;
    } else if (($4 | 0) == 33424 | ($4 | 0) == 65024) {
      label = 94;
      break;
    } else if (($4 | 0) == 33434) {
      label = 95;
      break;
    } else if (($4 | 0) == 33437) {
      label = 96;
      break;
    } else if (($4 | 0) == 34306) {
      label = 97;
      break;
    } else if (($4 | 0) == 34307) {
      label = 98;
      break;
    } else if (($4 | 0) == 34310) {
      label = 103;
      break;
    } else if (($4 | 0) == 34303) {
      label = 104;
      break;
    } else if (($4 | 0) == 34665) {
      label = 105;
      break;
    } else if (($4 | 0) == 34853) {
      label = 106;
      break;
    } else if (($4 | 0) == 34675 | ($4 | 0) == 50831) {
      label = 107;
      break;
    } else if (($4 | 0) == 37122) {
      label = 108;
      break;
    } else if (($4 | 0) == 37386) {
      label = 109;
      break;
    } else if (($4 | 0) == 37393) {
      label = 110;
      break;
    } else if (($4 | 0) == 46275) {
      label = 111;
      break;
    } else if (($4 | 0) == 46279) {
      label = 112;
      break;
    } else if (($4 | 0) == 46274) {
      label = 114;
      break;
    } else if (($4 | 0) == 50454 | ($4 | 0) == 50455) {
      label = 125;
      break;
    } else if (($4 | 0) == 50458) {
      label = 132;
      break;
    } else if (($4 | 0) == 50459) {
      label = 134;
      break;
    } else if (($4 | 0) == 50706) {
      label = 135;
      break;
    } else if (($4 | 0) == 50710) {
      label = 138;
      break;
    } else if (($4 | 0) == 50711) {
      label = 147;
      break;
    } else if (($4 | 0) == 291 | ($4 | 0) == 50712) {
      label = 149;
      break;
    } else if (($4 | 0) == 50713) {
      label = 150;
      break;
    } else if (($4 | 0) == 61450) {
      label = 151;
      break;
    } else if (($4 | 0) == 50714) {
      var $blrc_1 = $blrc_0314;
      var $blrr_1 = $blrr_0313;
      label = 152;
      break;
    } else if (($4 | 0) == 50717) {
      label = 166;
      break;
    } else if (($4 | 0) == 50718) {
      label = 167;
      break;
    } else if (($4 | 0) == 50729) {
      label = 174;
      break;
    } else if (($4 | 0) == 50740) {
      label = 175;
      break;
    } else if (($4 | 0) == 50752) {
      label = 177;
      break;
    } else if (($4 | 0) == 50829) {
      label = 178;
      break;
    } else if (($4 | 0) == 51009) {
      label = 181;
      break;
    } else if (($4 | 0) == 64772) {
      label = 182;
      break;
    } else if (($4 | 0) == 65026) {
      label = 184;
      break;
    } else if (($4 | 0) == 37400) {
      label = 214;
      break;
    } else {
      var $sony_key_1 = $sony_key_0318;
      var $sony_length_1 = $sony_length_0317;
      var $sony_offset_1 = $sony_offset_0316;
      var $plen_3 = $plen_0315;
      var $blrc_2 = $blrc_0314;
      var $blrr_2 = $blrr_0313;
      var $ima_len_1 = $ima_len_0312;
      var $use_cm_1 = $use_cm_0311;
      var $ifd_1 = $ifd_0310;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    }
   case 6:
    var $5 = HEAP32[$len >> 2];
    var $cmp775257 = ($5 | 0) == 0;
    if ($cmp775257) {
      var $num_1_lcssa = 0;
      var $_lcssa = 0;
      label = 165;
      break;
    } else {
      var $i_6258 = 0;
      var $num_1259 = 0;
      label = 163;
      break;
    }
   case 7:
    var $6 = HEAP32[5560840 >> 2];
    var $cmp797255 = ($6 | 0) > 0;
    if ($cmp797255) {
      var $c_14256 = 0;
      label = 168;
      break;
    } else {
      var $sony_key_1 = $sony_key_0318;
      var $sony_length_1 = $sony_length_0317;
      var $sony_offset_1 = $sony_offset_0316;
      var $plen_3 = $plen_0315;
      var $blrc_2 = $blrc_0314;
      var $blrr_2 = $blrr_0313;
      var $ima_len_1 = $ima_len_0312;
      var $use_cm_1 = 1;
      var $ifd_1 = $ifd_0310;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    }
   case 8:
    var $7 = HEAP32[5560840 >> 2];
    var $cmp815250 = ($7 | 0) > 0;
    if ($cmp815250) {
      var $i_7251 = 0;
      var $152 = $7;
      label = 169;
      break;
    } else {
      var $sony_key_1 = $sony_key_0318;
      var $sony_length_1 = $sony_length_0317;
      var $sony_offset_1 = $sony_offset_0316;
      var $plen_3 = $plen_0315;
      var $blrc_2 = $blrc_0314;
      var $blrr_2 = $blrr_0313;
      var $ima_len_1 = $ima_len_0312;
      var $use_cm_1 = $use_cm_0311;
      var $ifd_1 = $ifd_0310;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    }
   case 9:
    var $8 = HEAP32[5560840 >> 2];
    var $cmp833245 = ($8 | 0) > 0;
    if ($cmp833245) {
      var $c_16246 = 0;
      label = 172;
      break;
    } else {
      var $sony_key_1 = $sony_key_0318;
      var $sony_length_1 = $sony_length_0317;
      var $sony_offset_1 = $sony_offset_0316;
      var $plen_3 = $plen_0315;
      var $blrc_2 = $blrc_0314;
      var $blrr_2 = $blrr_0313;
      var $ima_len_1 = $ima_len_0312;
      var $use_cm_1 = $use_cm_0311;
      var $ifd_1 = $ifd_0310;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    }
   case 10:
    var $9 = HEAP32[5560840 >> 2];
    var $cmp843242 = ($9 | 0) > 0;
    if ($cmp843242) {
      var $c_17243 = 0;
      label = 173;
      break;
    } else {
      var $sony_key_1 = $sony_key_0318;
      var $sony_length_1 = $sony_length_0317;
      var $sony_offset_1 = $sony_offset_0316;
      var $plen_3 = $plen_0315;
      var $blrc_2 = $blrc_0314;
      var $blrr_2 = $blrr_0313;
      var $ima_len_1 = $ima_len_0312;
      var $use_cm_1 = $use_cm_0311;
      var $ifd_1 = $ifd_0310;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    }
   case 11:
    var $10 = HEAP32[$len >> 2];
    var $cmp896237 = ($10 | 0) == 0;
    if ($cmp896237) {
      label = 180;
      break;
    } else {
      var $i_8239 = 0;
      label = 179;
      break;
    }
   case 12:
    var $call17 = _get2();
    HEAP16[5242964 >> 1] = $call17;
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 13:
    var $call19 = _get2();
    HEAP16[5398712 >> 1] = $call19;
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 14:
    var $call21 = _get2();
    var $11 = HEAP16[5242964 >> 1];
    var $add = $11 + $call21 & 65535;
    HEAP16[5242964 >> 1] = $add;
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 15:
    var $call26 = _get2();
    var $conv27 = $call26 & 65535;
    HEAP32[5427632 >> 2] = $conv27;
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 16:
    var $12 = HEAP32[$type >> 2];
    var $cmp29 = ($12 | 0) == 3;
    if ($cmp29) {
      label = 17;
      break;
    } else {
      var $sony_key_1 = $sony_key_0318;
      var $sony_length_1 = $sony_length_0317;
      var $sony_offset_1 = $sony_offset_0316;
      var $plen_3 = $plen_0315;
      var $blrc_2 = $blrc_0314;
      var $blrr_2 = $blrr_0313;
      var $ima_len_1 = $ima_len_0312;
      var $use_cm_1 = $use_cm_0311;
      var $ifd_1 = $ifd_0310;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    }
   case 17:
    var $13 = HEAP32[$len >> 2];
    var $cmp31 = ($13 | 0) == 1;
    if ($cmp31) {
      label = 18;
      break;
    } else {
      var $sony_key_1 = $sony_key_0318;
      var $sony_length_1 = $sony_length_0317;
      var $sony_offset_1 = $sony_offset_0316;
      var $plen_3 = $plen_0315;
      var $blrc_2 = $blrc_0314;
      var $blrr_2 = $blrr_0313;
      var $ima_len_1 = $ima_len_0312;
      var $use_cm_1 = $use_cm_0311;
      var $ifd_1 = $ifd_0310;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    }
   case 18:
    var $call34 = _get2();
    var $conv35 = $call34 & 65535;
    var $conv36 = $conv35 | 0;
    var $div = $conv36 * .00390625;
    var $conv37 = $div;
    var $sub = $4 << 1;
    var $mul = $sub - 34 | 0;
    var $arrayidx38 = 5561124 + ($mul << 2) | 0;
    HEAPF32[$arrayidx38 >> 2] = $conv37;
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 19:
    var $14 = HEAP32[$type >> 2];
    var $cmp41 = ($14 | 0) == 3;
    if ($cmp41) {
      label = 20;
      break;
    } else {
      var $sony_key_1 = $sony_key_0318;
      var $sony_length_1 = $sony_length_0317;
      var $sony_offset_1 = $sony_offset_0316;
      var $plen_3 = $plen_0315;
      var $blrc_2 = $blrc_0314;
      var $blrr_2 = $blrr_0313;
      var $ima_len_1 = $ima_len_0312;
      var $use_cm_1 = $use_cm_0311;
      var $ifd_1 = $ifd_0310;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    }
   case 20:
    var $call44 = _get2();
    var $conv45 = $call44 & 65535;
    HEAPF32[5264096 >> 2] = $conv45;
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 21:
    var $call48 = _get2();
    var $conv49 = $call48 & 65535;
    var $sub50 = $4 - 36 | 0;
    var $arrayidx51 = 5561124 + ($sub50 << 2) | 0;
    HEAPF32[$arrayidx51 >> 2] = $conv49;
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 22:
    var $15 = HEAP32[$len >> 2];
    var $cmp53 = $15 >>> 0 < 50;
    var $16 = HEAPF32[5561124 >> 2];
    var $tobool55 = $16 != 0;
    var $or_cond = $cmp53 | $tobool55;
    if ($or_cond) {
      var $sony_key_1 = $sony_key_0318;
      var $sony_length_1 = $sony_length_0317;
      var $sony_offset_1 = $sony_offset_0316;
      var $plen_3 = $plen_0315;
      var $blrc_2 = $blrc_0314;
      var $blrr_2 = $blrr_0313;
      var $ima_len_1 = $ima_len_0312;
      var $use_cm_1 = $use_cm_0311;
      var $ifd_1 = $ifd_0310;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    var $17 = HEAP32[5264116 >> 2];
    var $call58 = _fseek($17, 12, 1);
    var $call63 = _get2();
    var $conv64 = $call63 & 65535;
    HEAPF32[5561124 >> 2] = $conv64;
    var $call63_1 = _get2();
    var $conv64_1 = $call63_1 & 65535;
    HEAPF32[5561128 >> 2] = $conv64_1;
    var $call63_2 = _get2();
    var $conv64_2 = $call63_2 & 65535;
    HEAPF32[5561132 >> 2] = $conv64_2;
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 24:
    var $18 = HEAP32[$type >> 2];
    var $cmp70 = ($18 | 0) == 7;
    if ($cmp70) {
      label = 25;
      break;
    } else {
      var $sony_key_1 = $sony_key_0318;
      var $sony_length_1 = $sony_length_0317;
      var $sony_offset_1 = $sony_offset_0316;
      var $plen_3 = $plen_0315;
      var $blrc_2 = $blrc_0314;
      var $blrr_2 = $blrr_0313;
      var $ima_len_1 = $ima_len_0312;
      var $use_cm_1 = $use_cm_0311;
      var $ifd_1 = $ifd_0310;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    }
   case 25:
    var $19 = HEAP32[5264116 >> 2];
    var $call73 = _fgetc($19);
    var $cmp74 = ($call73 | 0) == 255;
    if ($cmp74) {
      label = 26;
      break;
    } else {
      var $sony_key_1 = $sony_key_0318;
      var $sony_length_1 = $sony_length_0317;
      var $sony_offset_1 = $sony_offset_0316;
      var $plen_3 = $plen_0315;
      var $blrc_2 = $blrc_0314;
      var $blrr_2 = $blrr_0313;
      var $ima_len_1 = $ima_len_0312;
      var $use_cm_1 = $use_cm_0311;
      var $ifd_1 = $ifd_0310;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    }
   case 26:
    var $20 = HEAP32[5264116 >> 2];
    var $call77 = _fgetc($20);
    var $cmp78 = ($call77 | 0) == 216;
    if ($cmp78) {
      label = 27;
      break;
    } else {
      var $sony_key_1 = $sony_key_0318;
      var $sony_length_1 = $sony_length_0317;
      var $sony_offset_1 = $sony_offset_0316;
      var $plen_3 = $plen_0315;
      var $blrc_2 = $blrc_0314;
      var $blrr_2 = $blrr_0313;
      var $ima_len_1 = $ima_len_0312;
      var $use_cm_1 = $use_cm_0311;
      var $ifd_1 = $ifd_0310;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    }
   case 27:
    var $21 = HEAP32[5264116 >> 2];
    var $call82 = _ftell($21);
    var $sub83 = $call82 - 2 | 0;
    HEAP32[5244044 >> 2] = $sub83;
    var $22 = HEAP32[$len >> 2];
    HEAP32[5244056 >> 2] = $22;
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 28:
    var $call85 = _parse_tiff_ifd($base);
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 29:
    var $23 = HEAP32[$type >> 2];
    var $call87 = _getint($23);
    var $width = 5243588 + $ifd_0310 * 44 | 0;
    HEAP32[$width >> 2] = $call87;
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 30:
    var $24 = HEAP32[$type >> 2];
    var $call90 = _getint($24);
    var $height = 5243592 + $ifd_0310 * 44 | 0;
    HEAP32[$height >> 2] = $call90;
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 31:
    var $25 = HEAP32[$len >> 2];
    var $and = $25 & 7;
    var $samples = 5243616 + $ifd_0310 * 44 | 0;
    HEAP32[$samples >> 2] = $and;
    var $26 = HEAP32[$type >> 2];
    var $call94 = _getint($26);
    var $bps = 5243596 + $ifd_0310 * 44 | 0;
    HEAP32[$bps >> 2] = $call94;
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 32:
    HEAP16[5245036 >> 1] = 0;
    HEAP32[5263692 >> 2] = 36;
    var $call97 = _get4();
    var $tobool98 = ($call97 | 0) == 0;
    if ($tobool98) {
      var $27 = 80;
      label = 34;
      break;
    } else {
      label = 33;
      break;
    }
   case 33:
    HEAP32[5427632 >> 2] = 370546198;
    var $27 = 24;
    label = 34;
    break;
   case 34:
    var $27;
    HEAP32[5263696 >> 2] = $27;
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 35:
    var $28 = HEAP32[$type >> 2];
    var $call100 = _getint($28);
    var $comp = 5243600 + $ifd_0310 * 44 | 0;
    HEAP32[$comp >> 2] = $call100;
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 36:
    var $call103 = _get2();
    var $conv104 = $call103 & 65535;
    var $phint = 5243604 + $ifd_0310 * 44 | 0;
    HEAP32[$phint >> 2] = $conv104;
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 37:
    var $29 = HEAP32[5264116 >> 2];
    var $call107 = _fread(5427980, 512, 1, $29);
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 38:
    var $30 = HEAP32[5264116 >> 2];
    var $call109 = _fgets(5263628, 64, $30);
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 39:
    var $31 = HEAP32[5264116 >> 2];
    var $call111 = _fgets(5263372, 64, $31);
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 40:
    var $32 = HEAP32[$type >> 2];
    var $cmp113 = ($32 | 0) == 4;
    if ($cmp113) {
      label = 41;
      break;
    } else {
      var $sony_key_1 = $sony_key_0318;
      var $sony_length_1 = $sony_length_0317;
      var $sony_offset_1 = $sony_offset_0316;
      var $plen_3 = $plen_0315;
      var $blrc_2 = $blrc_0314;
      var $blrr_2 = $blrr_0313;
      var $ima_len_1 = $ima_len_0312;
      var $use_cm_1 = $use_cm_0311;
      var $ifd_1 = $ifd_0310;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    }
   case 41:
    HEAP32[5263692 >> 2] = 40;
    HEAP32[5263696 >> 2] = 8200;
    label = 42;
    break;
   case 42:
    var $call118 = _get4();
    var $add119 = $call118 + $base | 0;
    var $offset = 5243608 + $ifd_0310 * 44 | 0;
    HEAP32[$offset >> 2] = $add119;
    var $bps122 = 5243596 + $ifd_0310 * 44 | 0;
    var $33 = HEAP32[$bps122 >> 2];
    var $tobool123 = ($33 | 0) == 0;
    var $cmp127 = ($add119 | 0) > 0;
    var $or_cond215 = $tobool123 & $cmp127;
    if ($or_cond215) {
      label = 43;
      break;
    } else {
      var $sony_key_1 = $sony_key_0318;
      var $sony_length_1 = $sony_length_0317;
      var $sony_offset_1 = $sony_offset_0316;
      var $plen_3 = $plen_0315;
      var $blrc_2 = $blrc_0314;
      var $blrr_2 = $blrr_0313;
      var $ima_len_1 = $ima_len_0312;
      var $use_cm_1 = $use_cm_0311;
      var $ifd_1 = $ifd_0310;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    }
   case 43:
    var $34 = HEAP32[5264116 >> 2];
    var $call132 = _fseek($34, $add119, 0);
    var $call133 = _ljpeg_start($jh, 1);
    var $tobool134 = ($call133 | 0) == 0;
    if ($tobool134) {
      var $sony_key_1 = $sony_key_0318;
      var $sony_length_1 = $sony_length_0317;
      var $sony_offset_1 = $sony_offset_0316;
      var $plen_3 = $plen_0315;
      var $blrc_2 = $blrc_0314;
      var $blrr_2 = $blrr_0313;
      var $ima_len_1 = $ima_len_0312;
      var $use_cm_1 = $use_cm_0311;
      var $ifd_1 = $ifd_0310;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    } else {
      label = 44;
      break;
    }
   case 44:
    var $comp137 = 5243600 + $ifd_0310 * 44 | 0;
    HEAP32[$comp137 >> 2] = 6;
    var $35 = HEAP32[$wide >> 2];
    var $width139 = 5243588 + $ifd_0310 * 44 | 0;
    HEAP32[$width139 >> 2] = $35;
    var $36 = HEAP32[$high >> 2];
    var $height141 = 5243592 + $ifd_0310 * 44 | 0;
    HEAP32[$height141 >> 2] = $36;
    var $37 = HEAP32[$bits >> 2];
    HEAP32[$bps122 >> 2] = $37;
    var $38 = HEAP32[$clrs >> 2];
    var $samples145 = 5243616 + $ifd_0310 * 44 | 0;
    HEAP32[$samples145 >> 2] = $38;
    var $39 = HEAP32[$sraw >> 2];
    var $tobool146 = ($39 | 0) == 0;
    if ($tobool146) {
      label = 45;
      break;
    } else {
      label = 47;
      break;
    }
   case 45:
    var $and149 = $38 & 1;
    var $tobool150 = ($and149 | 0) == 0;
    if ($tobool150) {
      label = 46;
      break;
    } else {
      label = 47;
      break;
    }
   case 46:
    var $mul155 = $35 * $38 & -1;
    HEAP32[$width139 >> 2] = $mul155;
    label = 47;
    break;
   case 47:
    var $40 = HEAP16[5262944 >> 1];
    var $41 = HEAP32[$offset >> 2];
    var $add160 = $41 + 12 | 0;
    var $call161 = _parse_tiff($add160);
    HEAP16[5262944 >> 1] = $40;
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 48:
    var $call166 = _get2();
    var $conv167 = $call166 & 65535;
    var $and168 = $conv167 & 7;
    var $arrayidx169 = $and168 + 5586852 | 0;
    var $42 = HEAP8[$arrayidx169];
    var $conv170 = $42 << 24 >> 24;
    var $sub171 = $conv170 - 48 | 0;
    var $flip = 5243612 + $ifd_0310 * 44 | 0;
    HEAP32[$flip >> 2] = $sub171;
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 49:
    var $43 = HEAP32[$type >> 2];
    var $call174 = _getint($43);
    var $and175 = $call174 & 7;
    var $samples177 = 5243616 + $ifd_0310 * 44 | 0;
    HEAP32[$samples177 >> 2] = $and175;
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 50:
    var $call179 = _get4();
    var $bytes = 5243620 + $ifd_0310 * 44 | 0;
    HEAP32[$bytes >> 2] = $call179;
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 51:
    var $44 = HEAP32[$type >> 2];
    var $call186 = _getint($44);
    var $conv187 = $call186 >>> 0;
    HEAPF32[5561128 >> 2] = $conv187;
    var $45 = HEAP32[$type >> 2];
    var $call186_1 = _getint($45);
    var $conv187_1 = $call186_1 >>> 0;
    HEAPF32[5561124 >> 2] = $conv187_1;
    var $46 = HEAP32[$type >> 2];
    var $call186_2 = _getint($46);
    var $conv187_2 = $call186_2 >>> 0;
    HEAPF32[5561132 >> 2] = $conv187_2;
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 52:
    var $47 = HEAP32[5264116 >> 2];
    var $call194 = _fgets($arraydecay, 64, $47);
    var $call196 = _strncmp($arraydecay, 5586844, 5);
    var $tobool197 = ($call196 | 0) == 0;
    if ($tobool197) {
      label = 58;
      break;
    } else {
      label = 53;
      break;
    }
   case 53:
    var $call200 = _strncmp($arraydecay, 5586808, 5);
    var $tobool201 = ($call200 | 0) == 0;
    if ($tobool201) {
      label = 58;
      break;
    } else {
      label = 54;
      break;
    }
   case 54:
    var $call204 = _strncmp($arraydecay, 5586800, 5);
    var $tobool205 = ($call204 | 0) == 0;
    if ($tobool205) {
      label = 58;
      break;
    } else {
      label = 55;
      break;
    }
   case 55:
    var $call208 = _strncmp($arraydecay, 5586792, 6);
    var $tobool209 = ($call208 | 0) == 0;
    if ($tobool209) {
      label = 58;
      break;
    } else {
      label = 56;
      break;
    }
   case 56:
    var $call212 = _strncmp($arraydecay, 5586780, 10);
    var $tobool213 = ($call212 | 0) == 0;
    if ($tobool213) {
      label = 58;
      break;
    } else {
      label = 57;
      break;
    }
   case 57:
    var $call216 = _strcmp($arraydecay, 5586752);
    var $tobool217 = ($call216 | 0) == 0;
    if ($tobool217) {
      label = 58;
      break;
    } else {
      var $sony_key_1 = $sony_key_0318;
      var $sony_length_1 = $sony_length_0317;
      var $sony_offset_1 = $sony_offset_0316;
      var $plen_3 = $plen_0315;
      var $blrc_2 = $blrc_0314;
      var $blrr_2 = $blrr_0313;
      var $ima_len_1 = $ima_len_0312;
      var $use_cm_1 = $use_cm_0311;
      var $ifd_1 = $ifd_0310;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    }
   case 58:
    HEAP32[5264100 >> 2] = 0;
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 59:
    _get_timestamp(0);
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 60:
    var $48 = HEAP32[5264116 >> 2];
    var $call222 = _fread(5561404, 64, 1, $48);
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 61:
    var $49 = HEAP32[$type >> 2];
    var $call224 = _getint($49);
    var $tile_width = 5243624 + $ifd_0310 * 44 | 0;
    HEAP32[$tile_width >> 2] = $call224;
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 62:
    var $50 = HEAP32[$type >> 2];
    var $call227 = _getint($50);
    var $tile_length = 5243628 + $ifd_0310 * 44 | 0;
    HEAP32[$tile_length >> 2] = $call227;
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 63:
    var $51 = HEAP32[$len >> 2];
    var $cmp230 = $51 >>> 0 > 1;
    if ($cmp230) {
      label = 64;
      break;
    } else {
      label = 65;
      break;
    }
   case 64:
    var $52 = HEAP32[5264116 >> 2];
    var $call232 = _ftell($52);
    var $cond234 = $call232;
    label = 66;
    break;
   case 65:
    var $call233 = _get4();
    var $cond234 = $call233;
    label = 66;
    break;
   case 66:
    var $cond234;
    var $offset236 = 5243608 + $ifd_0310 * 44 | 0;
    HEAP32[$offset236 >> 2] = $cond234;
    var $53 = HEAP32[$len >> 2];
    var $cmp237 = ($53 | 0) == 4;
    if ($cmp237) {
      label = 67;
      break;
    } else {
      var $sony_key_1 = $sony_key_0318;
      var $sony_length_1 = $sony_length_0317;
      var $sony_offset_1 = $sony_offset_0316;
      var $plen_3 = $plen_0315;
      var $blrc_2 = $blrc_0314;
      var $blrr_2 = $blrr_0313;
      var $ima_len_1 = $ima_len_0312;
      var $use_cm_1 = $use_cm_0311;
      var $ifd_1 = $ifd_0310;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    }
   case 67:
    HEAP32[5263692 >> 2] = 30;
    HEAP32[5264100 >> 2] = 5;
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 68:
    var $call242 = _strcmp(5263372, 5586740);
    var $tobool243 = ($call242 | 0) == 0;
    if ($tobool243) {
      label = 70;
      break;
    } else {
      label = 69;
      break;
    }
   case 69:
    var $54 = HEAP32[$len >> 2];
    var $dec255302 = $54 - 1 | 0;
    HEAP32[$len >> 2] = $dec255302;
    var $tobool256303 = ($54 | 0) == 0;
    if ($tobool256303) {
      var $sony_key_1 = $sony_key_0318;
      var $sony_length_1 = $sony_length_0317;
      var $sony_offset_1 = $sony_offset_0316;
      var $plen_3 = $plen_0315;
      var $blrc_2 = $blrc_0314;
      var $blrr_2 = $blrr_0313;
      var $ima_len_1 = $ima_len_0312;
      var $use_cm_1 = $use_cm_0311;
      var $ifd_1 = $ifd_0310;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    } else {
      label = 72;
      break;
    }
   case 70:
    var $width246 = 5243588 + $ifd_0310 * 44 | 0;
    var $55 = HEAP32[$width246 >> 2];
    var $cmp247 = ($55 | 0) == 3872;
    if ($cmp247) {
      label = 71;
      break;
    } else {
      label = 69;
      break;
    }
   case 71:
    HEAP32[5263692 >> 2] = 24;
    var $call250 = _get4();
    var $add251 = $call250 + $base | 0;
    HEAP32[5428492 >> 2] = $add251;
    var $inc252 = $ifd_0310 + 1 | 0;
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $inc252;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 72:
    var $56 = HEAP32[5264116 >> 2];
    var $call258 = _ftell($56);
    var $57 = HEAP32[5264116 >> 2];
    var $call259 = _get4();
    var $add260 = $call259 + $base | 0;
    var $call261 = _fseek($57, $add260, 0);
    var $call262 = _parse_tiff_ifd($base);
    var $tobool263 = ($call262 | 0) == 0;
    if ($tobool263) {
      label = 73;
      break;
    } else {
      var $sony_key_1 = $sony_key_0318;
      var $sony_length_1 = $sony_length_0317;
      var $sony_offset_1 = $sony_offset_0316;
      var $plen_3 = $plen_0315;
      var $blrc_2 = $blrc_0314;
      var $blrr_2 = $blrr_0313;
      var $ima_len_1 = $ima_len_0312;
      var $use_cm_1 = $use_cm_0311;
      var $ifd_1 = $ifd_0310;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    }
   case 73:
    var $58 = HEAP32[5264116 >> 2];
    var $add266 = $call258 + 4 | 0;
    var $call267 = _fseek($58, $add266, 0);
    var $59 = HEAP32[$len >> 2];
    var $dec255 = $59 - 1 | 0;
    HEAP32[$len >> 2] = $dec255;
    var $tobool256 = ($59 | 0) == 0;
    if ($tobool256) {
      var $sony_key_1 = $sony_key_0318;
      var $sony_length_1 = $sony_length_0317;
      var $sony_offset_1 = $sony_offset_0316;
      var $plen_3 = $plen_0315;
      var $blrc_2 = $blrc_0314;
      var $blrr_2 = $blrr_0313;
      var $ima_len_1 = $ima_len_0312;
      var $use_cm_1 = $use_cm_0311;
      var $ifd_1 = $ifd_0310;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    } else {
      label = 72;
      break;
    }
   case 74:
    var $$etemp$1 = 5263628;
    var $$etemp$0$0 = 1852989779;
    var $$etemp$0$1 = 6710895;
    var $st$3$0 = $$etemp$1 | 0;
    HEAP32[$st$3$0 >> 2] = $$etemp$0$0;
    var $st$3$1 = $$etemp$1 + 4 | 0;
    HEAP32[$st$3$1 >> 2] = $$etemp$0$1;
    HEAP32[5263496 >> 2] = 4095;
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 75:
    var $j_1294_1 = $and277 + 1 | 0;
    var $cmp292295_1 = $j_1294_1 >>> 0 > $and277_1 >>> 0;
    if ($cmp292295_1) {
      label = 217;
      break;
    } else {
      label = 215;
      break;
    }
   case 76:
    var $call275 = _get2();
    var $conv276 = $call275 & 65535;
    var $shr214 = $conv276 >>> 2;
    var $and277 = $shr214 & 4095;
    var $call275_1 = _get2();
    var $conv276_1 = $call275_1 & 65535;
    var $shr214_1 = $conv276_1 >>> 2;
    var $and277_1 = $shr214_1 & 4095;
    var $call275_2 = _get2();
    var $conv276_2 = $call275_2 & 65535;
    var $shr214_2 = $conv276_2 >>> 2;
    var $and277_2 = $shr214_2 & 4095;
    var $call275_3 = _get2();
    var $conv276_3 = $call275_3 & 65535;
    var $shr214_3 = $conv276_3 >>> 2;
    var $and277_3 = $shr214_3 & 4095;
    var $cmp292295 = ($and277 | 0) == 0;
    if ($cmp292295) {
      label = 75;
      break;
    } else {
      label = 77;
      break;
    }
   case 77:
    var $_pre24 = HEAP16[5428500 >> 1];
    var $j_1297 = 1;
    var $60 = $_pre24;
    label = 78;
    break;
   case 78:
    var $60;
    var $j_1297;
    var $add298 = $60 + 1 & 65535;
    var $arrayidx300 = 5428500 + ($j_1297 << 1) | 0;
    HEAP16[$arrayidx300 >> 1] = $add298;
    var $j_1 = $j_1297 + 1 | 0;
    var $cmp292 = $j_1 >>> 0 > $and277 >>> 0;
    if ($cmp292) {
      label = 75;
      break;
    } else {
      var $j_1297 = $j_1;
      var $60 = $add298;
      label = 78;
      break;
    }
   case 79:
    var $call308 = _get4();
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $call308;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 80:
    var $call310 = _get4();
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $call310;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 81:
    var $call312 = _get4();
    var $sony_key_1 = $call312;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 82:
    var $61 = HEAP32[5264116 >> 2];
    var $call314 = _ftell($61);
    _parse_minolta($call314);
    HEAP16[5245028 >> 1] = 0;
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 83:
    var $call320 = _get2();
    var $conv321 = $call320 & 65535;
    HEAPF32[5561128 >> 2] = $conv321;
    var $call320_1 = _get2();
    var $conv321_1 = $call320_1 & 65535;
    HEAPF32[5561124 >> 2] = $conv321_1;
    var $call320_2 = _get2();
    var $conv321_2 = $call320_2 & 65535;
    HEAPF32[5561132 >> 2] = $conv321_2;
    var $call320_3 = _get2();
    var $conv321_3 = $call320_3 & 65535;
    HEAPF32[5561136 >> 2] = $conv321_3;
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 84:
    var $call333 = _get2();
    var $conv334 = $call333 & 65535;
    HEAPF32[5561124 >> 2] = $conv334;
    var $call333_1 = _get2();
    var $conv334_1 = $call333_1 & 65535;
    HEAPF32[5561128 >> 2] = $conv334_1;
    var $call333_2 = _get2();
    var $conv334_2 = $call333_2 & 65535;
    HEAPF32[5561132 >> 2] = $conv334_2;
    var $call333_3 = _get2();
    var $conv334_3 = $call333_3 & 65535;
    HEAPF32[5561136 >> 2] = $conv334_3;
    var $62 = HEAPF32[5561128 >> 2];
    var $cmp339 = $62 == 1024;
    if ($cmp339) {
      label = 85;
      break;
    } else {
      var $64 = 0;
      label = 86;
      break;
    }
   case 85:
    var $63 = HEAPF32[5561132 >> 2];
    var $cmp342 = $63 == 1024;
    var $64 = $cmp342;
    label = 86;
    break;
   case 86:
    var $64;
    var $land_ext = $64 & 1;
    var $shl345 = $land_ext << 1;
    var $arrayidx346 = 5561124 + ($shl345 << 2) | 0;
    var $65 = HEAPF32[$arrayidx346 >> 2];
    var $add347213 = $shl345 | 1;
    var $arrayidx348 = 5561124 + ($add347213 << 2) | 0;
    var $66 = HEAPF32[$arrayidx348 >> 2];
    var $add349 = $65 + $66;
    var $sub354 = $add349 - $66;
    HEAPF32[$arrayidx348 >> 2] = $sub354;
    var $sub360 = $add349 - $sub354;
    HEAPF32[$arrayidx346 >> 2] = $sub360;
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 87:
    var $67 = HEAP32[5264116 >> 2];
    var $call363 = _fgets(5263308, 64, $67);
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 88:
    var $68 = HEAP32[$len >> 2];
    var $cmp365 = $68 >>> 0 > 16;
    var $_ = $cmp365 ? 16 : $68;
    var $69 = HEAP32[5264116 >> 2];
    var $call370 = _fread($arraydecay369, 1, $_, $69);
    HEAP32[5560840 >> 2] = 0;
    var $cmp372278 = ($_ | 0) == 0;
    if ($cmp372278) {
      var $c_12_lcssa = 0;
      var $plen_229 = 0;
      label = 145;
      break;
    } else {
      label = 89;
      break;
    }
   case 89:
    var $70 = $68 >>> 0 < 16;
    var $71 = $70 ? $68 : 16;
    var $cfa_0279 = 0;
    var $i_2280 = 0;
    var $add380282 = 0;
    label = 90;
    break;
   case 90:
    var $add380282;
    var $i_2280;
    var $cfa_0279;
    var $arrayidx375 = $cfa_pat + $i_2280 | 0;
    var $72 = HEAP8[$arrayidx375];
    var $conv376 = $72 & 255;
    var $shl377 = 1 << $conv376;
    var $and378 = $shl377 & $cfa_0279;
    var $lnot = ($and378 | 0) == 0;
    var $lnot_ext = $lnot & 1;
    var $add380 = $lnot_ext + $add380282 | 0;
    var $or = $shl377 | $cfa_0279;
    var $inc385 = $i_2280 + 1 | 0;
    var $exitcond348 = ($inc385 | 0) == ($71 | 0);
    if ($exitcond348) {
      label = 91;
      break;
    } else {
      var $cfa_0279 = $or;
      var $i_2280 = $inc385;
      var $add380282 = $add380;
      label = 90;
      break;
    }
   case 91:
    HEAP32[5560840 >> 2] = $add380;
    if (($or | 0) == 56) {
      label = 92;
      break;
    } else if (($or | 0) == 58) {
      label = 93;
      break;
    } else {
      var $plen_2 = $_;
      var $127 = $add380;
      label = 141;
      break;
    }
   case 92:
    HEAP8[$0] = HEAP8[5586736];
    HEAP8[$0 + 1] = HEAP8[5586737];
    HEAP8[$0 + 2] = HEAP8[5586738];
    var $plen_2 = $_;
    var $127 = $add380;
    label = 141;
    break;
   case 93:
    HEAP32[$cfa_pc >> 2] = 17040133;
    var $plen_2 = $_;
    var $127 = $add380;
    label = 141;
    break;
   case 94:
    var $73 = HEAP32[5264116 >> 2];
    var $call396 = _get4();
    var $add397 = $call396 + $base | 0;
    var $call398 = _fseek($73, $add397, 0);
    _parse_kodak_ifd($base);
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 95:
    var $74 = HEAP32[$type >> 2];
    var $call400 = _getreal($74);
    var $conv401 = $call400;
    HEAPF32[5244912 >> 2] = $conv401;
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 96:
    var $75 = HEAP32[$type >> 2];
    var $call403 = _getreal($75);
    var $conv404 = $call403;
    HEAPF32[5561468 >> 2] = $conv404;
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 97:
    var $call410 = _get2();
    var $conv411 = $call410 & 65535;
    var $conv412 = $conv411 | 0;
    var $div413 = 4096 / $conv412;
    var $conv414 = $div413;
    HEAPF32[5561128 >> 2] = $conv414;
    var $call410_1 = _get2();
    var $conv411_1 = $call410_1 & 65535;
    var $conv412_1 = $conv411_1 | 0;
    var $div413_1 = 4096 / $conv412_1;
    var $conv414_1 = $div413_1;
    HEAPF32[5561124 >> 2] = $conv414_1;
    var $call410_2 = _get2();
    var $conv411_2 = $call410_2 & 65535;
    var $conv412_2 = $conv411_2 | 0;
    var $div413_2 = 4096 / $conv412_2;
    var $conv414_2 = $div413_2;
    HEAPF32[5561136 >> 2] = $conv414_2;
    var $call410_3 = _get2();
    var $conv411_3 = $call410_3 & 65535;
    var $conv412_3 = $conv411_3 | 0;
    var $div413_3 = 4096 / $conv412_3;
    var $conv414_3 = $div413_3;
    HEAPF32[5561132 >> 2] = $conv414_3;
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 98:
    var $76 = HEAP32[5264116 >> 2];
    var $call422 = _fread($arraydecay, 1, 7, $76);
    var $call424 = _strncmp($arraydecay, 5586728, 6);
    var $tobool425 = ($call424 | 0) == 0;
    if ($tobool425) {
      label = 99;
      break;
    } else {
      var $sony_key_1 = $sony_key_0318;
      var $sony_length_1 = $sony_length_0317;
      var $sony_offset_1 = $sony_offset_0316;
      var $plen_3 = $plen_0315;
      var $blrc_2 = $blrc_0314;
      var $blrr_2 = $blrr_0313;
      var $ima_len_1 = $ima_len_0312;
      var $use_cm_1 = $use_cm_0311;
      var $ifd_1 = $ifd_0310;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    }
   case 99:
    HEAP32[5560840 >> 2] = 4;
    HEAP32[5245040 >> 2] = 0;
    var $i_3274 = 0;
    label = 100;
    break;
   case 100:
    var $i_3274;
    var $77 = HEAP32[5264116 >> 2];
    var $arrayidx438 = 5244968 + ($i_3274 << 4) | 0;
    var $call439 = _fscanf($77, 5587008, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $arrayidx438, tempInt));
    var $78 = HEAP32[5264116 >> 2];
    var $arrayidx438_1 = 5244964 + ($i_3274 << 4) | 0;
    var $call439_1 = _fscanf($78, 5587008, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $arrayidx438_1, tempInt));
    var $79 = HEAP32[5264116 >> 2];
    var $arrayidx438_2 = 5244976 + ($i_3274 << 4) | 0;
    var $call439_2 = _fscanf($79, 5587008, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $arrayidx438_2, tempInt));
    var $80 = HEAP32[5264116 >> 2];
    var $arrayidx438_3 = 5244972 + ($i_3274 << 4) | 0;
    var $call439_3 = _fscanf($80, 5587008, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $arrayidx438_3, tempInt));
    var $_b = HEAP8[5243552];
    if ($_b) {
      label = 101;
      break;
    } else {
      label = 102;
      break;
    }
   case 101:
    var $81 = HEAPF32[$arrayidx438_1 >> 2];
    var $conv452 = $81;
    var $add453 = $conv452;
    var $82 = HEAPF32[$arrayidx438 >> 2];
    var $conv452_1 = $82;
    var $add453_1 = $add453 + $conv452_1;
    var $83 = HEAPF32[$arrayidx438_3 >> 2];
    var $conv452_2 = $83;
    var $add453_2 = $add453_1 + $conv452_2;
    var $84 = HEAPF32[$arrayidx438_2 >> 2];
    var $conv452_3 = $84;
    var $add453_3 = $add453_2 + $conv452_3;
    var $div464 = $conv452 / $add453_3;
    var $conv465 = $div464;
    HEAPF32[$arrayidx438_1 >> 2] = $conv465;
    var $div464_1 = $conv452_1 / $add453_3;
    var $conv465_1 = $div464_1;
    HEAPF32[$arrayidx438 >> 2] = $conv465_1;
    var $div464_2 = $conv452_2 / $add453_3;
    var $conv465_2 = $div464_2;
    HEAPF32[$arrayidx438_3 >> 2] = $conv465_2;
    var $div464_3 = $conv452_3 / $add453_3;
    var $conv465_3 = $div464_3;
    HEAPF32[$arrayidx438_2 >> 2] = $conv465_3;
    label = 102;
    break;
   case 102:
    var $inc470 = $i_3274 + 1 | 0;
    var $exitcond346 = ($inc470 | 0) == 3;
    if ($exitcond346) {
      var $sony_key_1 = $sony_key_0318;
      var $sony_length_1 = $sony_length_0317;
      var $sony_offset_1 = $sony_offset_0316;
      var $plen_3 = $plen_0315;
      var $blrc_2 = $blrc_0314;
      var $blrr_2 = $blrr_0313;
      var $ima_len_1 = $ima_len_0312;
      var $use_cm_1 = $use_cm_0311;
      var $ifd_1 = $ifd_0310;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    } else {
      var $i_3274 = $inc470;
      label = 100;
      break;
    }
   case 103:
    var $85 = HEAP32[5264116 >> 2];
    var $call473 = _ftell($85);
    _parse_mos($call473);
    label = 104;
    break;
   case 104:
    HEAP8[5263628] = HEAP8[5586700];
    HEAP8[5263629] = HEAP8[5586701];
    HEAP8[5263630] = HEAP8[5586702];
    HEAP8[5263631] = HEAP8[5586703];
    HEAP8[5263632] = HEAP8[5586704];
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 105:
    var $86 = HEAP32[5264116 >> 2];
    var $call477 = _get4();
    var $add478 = $call477 + $base | 0;
    var $call479 = _fseek($86, $add478, 0);
    _parse_exif($base);
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 106:
    var $87 = HEAP32[5264116 >> 2];
    var $call481 = _get4();
    var $add482 = $call481 + $base | 0;
    var $call483 = _fseek($87, $add482, 0);
    _parse_gps($base);
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 107:
    var $88 = HEAP32[5264116 >> 2];
    var $call485 = _ftell($88);
    var $89 = HEAP32[$len >> 2];
    HEAP32[5245636 >> 2] = $89;
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 108:
    var $call487 = _get4();
    HEAP32[5264036 >> 2] = $call487;
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 109:
    var $90 = HEAP32[$type >> 2];
    var $call489 = _getreal($90);
    var $conv490 = $call489;
    HEAPF32[5403044 >> 2] = $conv490;
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 110:
    var $91 = HEAP32[$type >> 2];
    var $call492 = _getint($91);
    HEAP32[5244924 >> 2] = $call492;
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 111:
    HEAP8[5263628] = HEAP8[5586692];
    HEAP8[5263629] = HEAP8[5586693];
    HEAP8[5263630] = HEAP8[5586694];
    HEAP8[5263631] = HEAP8[5586695];
    HEAP8[5263632] = HEAP8[5586696];
    HEAP8[5263633] = HEAP8[5586697];
    HEAP8[5263634] = HEAP8[5586698];
    var $92 = HEAP32[5264116 >> 2];
    var $call515 = _ftell($92);
    HEAP32[5428492 >> 2] = $call515;
    var $93 = HEAP32[$len >> 2];
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $93;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 112:
    var $tobool517 = ($ima_len_0312 | 0) == 0;
    if ($tobool517) {
      var $sony_key_1 = $sony_key_0318;
      var $sony_length_1 = $sony_length_0317;
      var $sony_offset_1 = $sony_offset_0316;
      var $plen_3 = $plen_0315;
      var $blrc_2 = $blrc_0314;
      var $blrr_2 = $blrr_0313;
      var $ima_len_1 = 0;
      var $use_cm_1 = $use_cm_0311;
      var $ifd_1 = $ifd_0310;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    } else {
      label = 113;
      break;
    }
   case 113:
    var $94 = HEAP32[5264116 >> 2];
    var $call520 = _fseek($94, 38, 1);
    label = 114;
    break;
   case 114:
    var $95 = HEAP32[5264116 >> 2];
    var $call522 = _fseek($95, 40, 1);
    var $call523 = _get4();
    var $conv524 = $call523 & 65535;
    HEAP16[5245028 >> 1] = $conv524;
    var $call525 = _get4();
    var $conv526 = $call525 & 65535;
    HEAP16[5245036 >> 1] = $conv526;
    var $call527 = _get4();
    var $call527_tr = $call527 & 65535;
    var $conv529 = $call527_tr & 7;
    HEAP16[5263700 >> 1] = $conv529;
    var $96 = HEAP16[5245028 >> 1];
    var $conv530 = $96 & 65535;
    var $conv531 = $conv529 & 65535;
    var $sub532 = $conv530 - $conv531 | 0;
    var $call533 = _get4();
    var $and534 = $call533 & 7;
    var $sub535 = $sub532 - $and534 | 0;
    var $conv536 = $sub535 & 65535;
    HEAP16[5242964 >> 1] = $conv536;
    var $call537 = _get4();
    var $call537_tr = $call537 & 65535;
    var $conv539 = $call537_tr & 7;
    HEAP16[5243564 >> 1] = $conv539;
    var $97 = HEAP16[5245036 >> 1];
    var $conv540 = $97 & 65535;
    var $conv541 = $conv539 & 65535;
    var $sub542 = $conv540 - $conv541 | 0;
    var $call543 = _get4();
    var $and544 = $call543 & 7;
    var $sub545 = $sub542 - $and544 | 0;
    var $conv546 = $sub545 & 65535;
    HEAP16[5398712 >> 1] = $conv546;
    var $98 = HEAP16[5245028 >> 1];
    var $cmp548 = $98 << 16 >> 16 == 7262;
    if ($cmp548) {
      label = 115;
      break;
    } else {
      label = 116;
      break;
    }
   case 115:
    HEAP16[5398712 >> 1] = 5444;
    HEAP16[5242964 >> 1] = 7244;
    HEAP16[5263700 >> 1] = 7;
    label = 116;
    break;
   case 116:
    var $99 = HEAP32[5264116 >> 2];
    var $call552 = _fseek($99, 52, 1);
    var $call557 = _getreal(11);
    var $conv558 = $call557;
    HEAPF32[5561124 >> 2] = $conv558;
    var $call557_1 = _getreal(11);
    var $conv558_1 = $call557_1;
    HEAPF32[5561128 >> 2] = $conv558_1;
    var $call557_2 = _getreal(11);
    var $conv558_2 = $call557_2;
    HEAPF32[5561132 >> 2] = $conv558_2;
    var $100 = HEAP32[5264116 >> 2];
    var $call563 = _fseek($100, 114, 1);
    var $call564 = _get2();
    var $conv565 = $call564 & 65535;
    var $shr566212 = $conv565 >>> 7;
    var $mul567 = $shr566212 * 90 & -1;
    HEAP32[5403048 >> 2] = $mul567;
    var $101 = HEAP16[5242964 >> 1];
    var $conv568 = $101 & 65535;
    var $102 = HEAP16[5398712 >> 1];
    var $conv569 = $102 & 65535;
    var $mul570 = $conv568 * 6 & -1;
    var $mul571 = $mul570 * $conv569 & -1;
    var $cmp572 = ($mul571 | 0) == ($ima_len_0312 | 0);
    if ($cmp572) {
      label = 117;
      break;
    } else {
      var $106 = $102;
      var $105 = $101;
      label = 120;
      break;
    }
   case 117:
    var $rem575 = ($mul567 >>> 0) % 180;
    var $cmp576 = ($rem575 | 0) == 90;
    if ($cmp576) {
      label = 118;
      break;
    } else {
      var $104 = $101;
      var $103 = $102;
      label = 119;
      break;
    }
   case 118:
    HEAP16[5398712 >> 1] = $101;
    HEAP16[5242964 >> 1] = $102;
    var $104 = $102;
    var $103 = $101;
    label = 119;
    break;
   case 119:
    var $103;
    var $104;
    HEAP16[5245028 >> 1] = $104;
    HEAP16[5245036 >> 1] = $103;
    HEAP32[5403048 >> 2] = 0;
    HEAP32[5427632 >> 2] = 0;
    HEAP16[5243564 >> 1] = 0;
    HEAP16[5263700 >> 1] = 0;
    var $106 = $103;
    var $105 = $104;
    label = 120;
    break;
   case 120:
    var $105;
    var $106;
    var $conv593 = $106 & 65535;
    var $conv594 = $105 & 65535;
    var $mul595 = $conv594 * $conv593 & -1;
    var $div596 = Math.floor(($mul595 >>> 0) / 1e6);
    var $call597 = _sprintf(5263372, 5586676, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $div596, tempInt));
    HEAP32[5263692 >> 2] = 72;
    var $107 = HEAP32[5427632 >> 2];
    var $tobool598 = ($107 | 0) == 0;
    if ($tobool598) {
      label = 124;
      break;
    } else {
      label = 121;
      break;
    }
   case 121:
    var $108 = HEAP16[5263700 >> 1];
    var $and601 = $108 & 1;
    var $tobool602 = $and601 << 16 >> 16 == 0;
    if ($tobool602) {
      label = 123;
      break;
    } else {
      label = 122;
      break;
    }
   case 122:
    HEAP32[5427632 >> 2] = 1633771873;
    label = 123;
    break;
   case 123:
    HEAP32[5263692 >> 2] = 4;
    label = 124;
    break;
   case 124:
    HEAP32[5263496 >> 2] = 65535;
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 125:
    var $109 = HEAP32[$len >> 2];
    var $call607 = _malloc($109);
    var $tobool608 = ($call607 | 0) == 0;
    if ($tobool608) {
      var $sony_key_1 = $sony_key_0318;
      var $sony_length_1 = $sony_length_0317;
      var $sony_offset_1 = $sony_offset_0316;
      var $plen_3 = $plen_0315;
      var $blrc_2 = $blrc_0314;
      var $blrr_2 = $blrr_0313;
      var $ima_len_1 = $ima_len_0312;
      var $use_cm_1 = $use_cm_0311;
      var $ifd_1 = $ifd_0310;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    } else {
      label = 126;
      break;
    }
   case 126:
    var $110 = HEAP32[$len >> 2];
    var $111 = HEAP32[5264116 >> 2];
    var $call611 = _fread($call607, 1, $110, $111);
    var $add_ptr = $call607 - 1 | 0;
    var $tobool613263 = ($add_ptr | 0) == 0;
    if ($tobool613263) {
      label = 131;
      break;
    } else {
      var $cp_0264 = $add_ptr;
      label = 127;
      break;
    }
   case 127:
    var $cp_0264;
    var $112 = HEAP32[$len >> 2];
    var $add_ptr615 = $call607 + $112 | 0;
    var $cmp616 = $cp_0264 >>> 0 < $add_ptr615 >>> 0;
    if ($cmp616) {
      label = 128;
      break;
    } else {
      label = 131;
      break;
    }
   case 128:
    var $incdec_ptr = $cp_0264 + 1 | 0;
    var $call621 = _strncmp($incdec_ptr, 5586664, 8);
    var $tobool622 = ($call621 | 0) == 0;
    if ($tobool622) {
      label = 129;
      break;
    } else {
      label = 130;
      break;
    }
   case 129:
    var $add_ptr624 = $cp_0264 + 9 | 0;
    var $call625 = _sscanf($add_ptr624, 5586652, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = 5561124, HEAP32[tempInt + 4 >> 2] = 5561128, HEAP32[tempInt + 8 >> 2] = 5561132, tempInt));
    label = 130;
    break;
   case 130:
    var $call628 = _strchr($incdec_ptr, 10);
    var $tobool613 = ($call628 | 0) == 0;
    if ($tobool613) {
      label = 131;
      break;
    } else {
      var $cp_0264 = $call628;
      label = 127;
      break;
    }
   case 131:
    _free($call607);
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 132:
    var $113 = HEAP8[5263628];
    var $tobool631 = $113 << 24 >> 24 == 0;
    if ($tobool631) {
      label = 133;
      break;
    } else {
      var $sony_key_1 = $sony_key_0318;
      var $sony_length_1 = $sony_length_0317;
      var $sony_offset_1 = $sony_offset_0316;
      var $plen_3 = $plen_0315;
      var $blrc_2 = $blrc_0314;
      var $blrr_2 = $blrr_0313;
      var $ima_len_1 = $ima_len_0312;
      var $use_cm_1 = $use_cm_0311;
      var $ifd_1 = $ifd_0310;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    }
   case 133:
    for (var $$src = 5586640, $$dest = 5263628, $$stop = $$src + 11; $$src < $$stop; $$src++, $$dest++) {
      HEAP8[$$dest] = HEAP8[$$src];
    }
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 134:
    var $114 = HEAP16[5262944 >> 1];
    var $115 = HEAP32[5264116 >> 2];
    var $call637 = _ftell($115);
    var $116 = HEAP32[5243584 >> 2];
    var $call638 = _get2();
    HEAP16[5262944 >> 1] = $call638;
    var $117 = HEAP32[5264116 >> 2];
    var $call639 = _get2();
    var $call640 = _get4();
    var $add641 = $call640 + $call637 | 0;
    var $call642 = _fseek($117, $add641, 0);
    var $call643 = _parse_tiff_ifd($call637);
    HEAP32[5263496 >> 2] = 65535;
    HEAP32[5243584 >> 2] = $116;
    HEAP16[5262944 >> 1] = $114;
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 135:
    var $118 = HEAP32[5427976 >> 2];
    var $shl650 = $118 << 8;
    var $119 = HEAP32[5264116 >> 2];
    var $call651 = _fgetc($119);
    var $add652 = $call651 + $shl650 | 0;
    HEAP32[5427976 >> 2] = $add652;
    var $shl650_1 = $add652 << 8;
    var $120 = HEAP32[5264116 >> 2];
    var $call651_1 = _fgetc($120);
    var $add652_1 = $call651_1 + $shl650_1 | 0;
    HEAP32[5427976 >> 2] = $add652_1;
    var $shl650_2 = $add652_1 << 8;
    var $121 = HEAP32[5264116 >> 2];
    var $call651_2 = _fgetc($121);
    var $add652_2 = $call651_2 + $shl650_2 | 0;
    HEAP32[5427976 >> 2] = $add652_2;
    var $shl650_3 = $add652_2 << 8;
    var $122 = HEAP32[5264116 >> 2];
    var $call651_3 = _fgetc($122);
    var $add652_3 = $call651_3 + $shl650_3 | 0;
    HEAP32[5427976 >> 2] = $add652_3;
    var $123 = HEAP8[5263628];
    var $tobool656 = $123 << 24 >> 24 == 0;
    if ($tobool656) {
      label = 136;
      break;
    } else {
      label = 137;
      break;
    }
   case 136:
    HEAP32[5263628 >> 2] = 4673092;
    label = 137;
    break;
   case 137:
    HEAP32[5264100 >> 2] = 1;
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 138:
    var $124 = HEAP32[$len >> 2];
    var $cmp661 = $124 >>> 0 > 4;
    if ($cmp661) {
      label = 139;
      break;
    } else {
      var $125 = $124;
      label = 140;
      break;
    }
   case 139:
    HEAP32[$len >> 2] = 4;
    var $125 = 4;
    label = 140;
    break;
   case 140:
    var $125;
    HEAP32[5560840 >> 2] = $125;
    var $126 = HEAP32[5264116 >> 2];
    var $call666 = _fread($0, 1, $125, $126);
    var $_pr_pre = HEAP32[5560840 >> 2];
    var $plen_2 = $plen_0315;
    var $127 = $_pr_pre;
    label = 141;
    break;
   case 141:
    var $127;
    var $plen_2;
    var $cmp668283 = ($127 | 0) > 0;
    if ($cmp668283) {
      label = 142;
      break;
    } else {
      var $c_12_lcssa = 0;
      var $plen_229 = $plen_2;
      label = 145;
      break;
    }
   case 142:
    var $128 = ($127 | 0) > 1;
    var $c_12284 = 0;
    label = 143;
    break;
   case 143:
    var $c_12284;
    var $conv671 = $c_12284 & 255;
    var $arrayidx672 = $tmpcast + $c_12284 | 0;
    var $129 = HEAP8[$arrayidx672];
    var $idxprom = $129 & 255;
    var $arrayidx673 = $tab + $idxprom | 0;
    HEAP8[$arrayidx673] = $conv671;
    var $inc675 = $c_12284 + 1 | 0;
    var $cmp668 = ($inc675 | 0) < ($127 | 0);
    if ($cmp668) {
      var $c_12284 = $inc675;
      label = 143;
      break;
    } else {
      label = 144;
      break;
    }
   case 144:
    var $smax = $128 ? $127 : 1;
    var $c_12_lcssa = $smax;
    var $plen_229 = $plen_2;
    label = 145;
    break;
   case 145:
    var $plen_229;
    var $c_12_lcssa;
    var $arrayidx677 = $c_12_lcssa + 5560896 | 0;
    HEAP8[$arrayidx677] = 0;
    var $filters_promoted = HEAP32[5427632 >> 2];
    var $dec679287 = 15;
    var $or688288 = $filters_promoted;
    label = 146;
    break;
   case 146:
    var $or688288;
    var $dec679287;
    var $shl682 = $or688288 << 2;
    var $rem683 = ($dec679287 >>> 0) % ($plen_229 >>> 0);
    var $arrayidx684 = $cfa_pat + $rem683 | 0;
    var $130 = HEAP8[$arrayidx684];
    var $idxprom685 = $130 & 255;
    var $arrayidx686 = $tab + $idxprom685 | 0;
    var $131 = HEAP8[$arrayidx686];
    var $conv687 = $131 & 255;
    var $or688 = $conv687 | $shl682;
    var $dec679 = $dec679287 - 1 | 0;
    var $tobool680 = ($dec679287 | 0) == 0;
    if ($tobool680) {
      label = 186;
      break;
    } else {
      var $dec679287 = $dec679;
      var $or688288 = $or688;
      label = 146;
      break;
    }
   case 147:
    var $call691 = _get2();
    var $cmp693 = $call691 << 16 >> 16 == 2;
    if ($cmp693) {
      label = 148;
      break;
    } else {
      var $sony_key_1 = $sony_key_0318;
      var $sony_length_1 = $sony_length_0317;
      var $sony_offset_1 = $sony_offset_0316;
      var $plen_3 = $plen_0315;
      var $blrc_2 = $blrc_0314;
      var $blrr_2 = $blrr_0313;
      var $ima_len_1 = $ima_len_0312;
      var $use_cm_1 = $use_cm_0311;
      var $ifd_1 = $ifd_0310;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    }
   case 148:
    HEAP16[5398900 >> 1] = 1;
    HEAP32[5427632 >> 2] = 1229539657;
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 149:
    var $132 = HEAP32[$len >> 2];
    _linear_table($132);
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 150:
    var $call699 = _get2();
    var $conv700 = $call699 & 65535;
    var $call701 = _get2();
    var $conv702 = $call701 & 65535;
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $conv702;
    var $blrr_2 = $conv700;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 151:
    var $blrc_1 = 2;
    var $blrr_1 = 2;
    label = 152;
    break;
   case 152:
    var $blrr_1;
    var $blrc_1;
    var $133 = HEAP32[$type >> 2];
    var $call705 = _getreal($133);
    var $conv706 = $call705 >= 0 ? Math.floor($call705) : Math.ceil($call705);
    HEAP32[5561400 >> 2] = $conv706;
    var $134 = HEAP32[5427632 >> 2];
    if (($134 | 0) == 0 | ($134 | 0) == -1) {
      var $sony_key_1 = $sony_key_0318;
      var $sony_length_1 = $sony_length_0317;
      var $sony_offset_1 = $sony_offset_0316;
      var $plen_3 = $plen_0315;
      var $blrc_2 = $blrc_1;
      var $blrr_2 = $blrr_1;
      var $ima_len_1 = $ima_len_0312;
      var $use_cm_1 = $use_cm_0311;
      var $ifd_1 = $ifd_0310;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    } else {
      label = 153;
      break;
    }
   case 153:
    var $cmp713 = ($blrc_1 | 0) == 2;
    if ($cmp713) {
      label = 154;
      break;
    } else {
      label = 155;
      break;
    }
   case 154:
    var $135 = HEAP32[$type >> 2];
    var $call716 = _getreal($135);
    var $cond721 = $call716;
    label = 156;
    break;
   case 155:
    var $conv719 = $conv706 | 0;
    var $cond721 = $conv719;
    label = 156;
    break;
   case 156:
    var $cond721;
    var $conv722 = $cond721 & -1;
    var $cmp724 = ($blrr_1 | 0) == 2;
    if ($cmp724) {
      label = 157;
      break;
    } else {
      var $dblack_sroa_2_0 = $conv706;
      label = 159;
      break;
    }
   case 157:
    var $136 = HEAP32[$type >> 2];
    var $call727 = _getreal($136);
    var $conv733 = $call727 & -1;
    if ($cmp713) {
      label = 158;
      break;
    } else {
      var $dblack_sroa_2_0 = $conv733;
      label = 159;
      break;
    }
   case 158:
    var $137 = HEAP32[$type >> 2];
    var $call741 = _getreal($137);
    var $cond746 = $call741;
    var $dblack_sroa_2_1 = $conv733;
    label = 160;
    break;
   case 159:
    var $dblack_sroa_2_0;
    var $conv744 = $conv722 | 0;
    var $cond746 = $conv744;
    var $dblack_sroa_2_1 = $dblack_sroa_2_0;
    label = 160;
    break;
   case 160:
    var $dblack_sroa_2_1;
    var $cond746;
    var $conv747 = $cond746 & -1;
    var $138 = HEAP32[5560840 >> 2];
    var $cmp749 = ($138 | 0) == 3;
    var $139 = HEAP32[5427632 >> 2];
    if ($cmp749) {
      label = 161;
      break;
    } else {
      var $140 = $139;
      label = 162;
      break;
    }
   case 161:
    var $shr752 = $139 >>> 2;
    var $and753 = $shr752 & 572662306;
    var $shl754 = $139 << 2;
    var $and755 = $shl754 & -2004318072;
    var $or756 = $and753 | $and755;
    var $shl757 = $139 << 1;
    var $and758 = $or756 & $shl757;
    var $or759 = $and758 | $139;
    HEAP32[5427632 >> 2] = $or759;
    var $140 = $or759;
    label = 162;
    break;
   case 162:
    var $140;
    var $and768 = $140 & 3;
    var $arrayidx769 = 5560904 + ($and768 << 2) | 0;
    HEAP32[$arrayidx769 >> 2] = $conv706;
    var $shr767_1 = $140 >>> 2;
    var $and768_1 = $shr767_1 & 3;
    var $arrayidx769_1 = 5560904 + ($and768_1 << 2) | 0;
    HEAP32[$arrayidx769_1 >> 2] = $conv722;
    var $shr767_2 = $140 >>> 4;
    var $and768_2 = $shr767_2 & 3;
    var $arrayidx769_2 = 5560904 + ($and768_2 << 2) | 0;
    HEAP32[$arrayidx769_2 >> 2] = $dblack_sroa_2_1;
    var $shr767_3 = $140 >>> 6;
    var $and768_3 = $shr767_3 & 3;
    var $arrayidx769_3 = 5560904 + ($and768_3 << 2) | 0;
    HEAP32[$arrayidx769_3 >> 2] = $conv747;
    HEAP32[5561400 >> 2] = 0;
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_1;
    var $blrr_2 = $blrr_1;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 163:
    var $num_1259;
    var $i_6258;
    var $141 = HEAP32[$type >> 2];
    var $call778 = _getreal($141);
    var $add779 = $num_1259 + $call778;
    var $inc781 = $i_6258 + 1 | 0;
    var $142 = HEAP32[$len >> 2];
    var $cmp775 = $inc781 >>> 0 < $142 >>> 0;
    if ($cmp775) {
      var $i_6258 = $inc781;
      var $num_1259 = $add779;
      label = 163;
      break;
    } else {
      label = 164;
      break;
    }
   case 164:
    var $phitmp = $142 >>> 0;
    var $num_1_lcssa = $add779;
    var $_lcssa = $phitmp;
    label = 165;
    break;
   case 165:
    var $_lcssa;
    var $num_1_lcssa;
    var $div784 = $num_1_lcssa / $_lcssa;
    var $add785 = $div784 + .5;
    var $143 = HEAP32[5561400 >> 2];
    var $conv786 = $143 >>> 0;
    var $add787 = $add785 + $conv786;
    var $conv788 = $add787 >= 0 ? Math.floor($add787) : Math.ceil($add787);
    HEAP32[5561400 >> 2] = $conv788;
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 166:
    var $144 = HEAP32[$type >> 2];
    var $call790 = _getint($144);
    HEAP32[5263496 >> 2] = $call790;
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 167:
    var $145 = HEAP32[$type >> 2];
    var $call792 = _getreal($145);
    HEAPF64[tempDoublePtr >> 3] = $call792, HEAP32[5245656 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5245660 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $146 = HEAP32[$type >> 2];
    var $call793 = _getreal($146);
    var $147 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5245656 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5245660 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $div794 = $147 / $call793;
    HEAPF64[tempDoublePtr >> 3] = $div794, HEAP32[5245656 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5245660 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 168:
    var $c_14256;
    var $148 = HEAP32[$type >> 2];
    var $call804 = _getreal($148);
    var $arrayidx806 = $cm + $c_14256 * 24 | 0;
    HEAPF64[tempDoublePtr >> 3] = $call804, HEAP32[$arrayidx806 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx806 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $149 = HEAP32[$type >> 2];
    var $call804_1 = _getreal($149);
    var $arrayidx806_1 = $cm + $c_14256 * 24 + 8 | 0;
    HEAPF64[tempDoublePtr >> 3] = $call804_1, HEAP32[$arrayidx806_1 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx806_1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $150 = HEAP32[$type >> 2];
    var $call804_2 = _getreal($150);
    var $arrayidx806_2 = $cm + $c_14256 * 24 + 16 | 0;
    HEAPF64[tempDoublePtr >> 3] = $call804_2, HEAP32[$arrayidx806_2 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx806_2 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $inc811 = $c_14256 + 1 | 0;
    var $151 = HEAP32[5560840 >> 2];
    var $cmp797 = ($inc811 | 0) < ($151 | 0);
    if ($cmp797) {
      var $c_14256 = $inc811;
      label = 168;
      break;
    } else {
      var $sony_key_1 = $sony_key_0318;
      var $sony_length_1 = $sony_length_0317;
      var $sony_offset_1 = $sony_offset_0316;
      var $plen_3 = $plen_0315;
      var $blrc_2 = $blrc_0314;
      var $blrr_2 = $blrr_0313;
      var $ima_len_1 = $ima_len_0312;
      var $use_cm_1 = 1;
      var $ifd_1 = $ifd_0310;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    }
   case 169:
    var $152;
    var $i_7251;
    var $cmp819247 = ($152 | 0) > 0;
    if ($cmp819247) {
      var $c_15248 = 0;
      label = 170;
      break;
    } else {
      var $155 = $152;
      label = 171;
      break;
    }
   case 170:
    var $c_15248;
    var $153 = HEAP32[$type >> 2];
    var $call822 = _getreal($153);
    var $arrayidx824 = $cc + ($i_7251 << 5) + ($c_15248 << 3) | 0;
    HEAPF64[tempDoublePtr >> 3] = $call822, HEAP32[$arrayidx824 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx824 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $inc826 = $c_15248 + 1 | 0;
    var $154 = HEAP32[5560840 >> 2];
    var $cmp819 = ($inc826 | 0) < ($154 | 0);
    if ($cmp819) {
      var $c_15248 = $inc826;
      label = 170;
      break;
    } else {
      var $155 = $154;
      label = 171;
      break;
    }
   case 171:
    var $155;
    var $inc829 = $i_7251 + 1 | 0;
    var $cmp815 = ($inc829 | 0) < ($155 | 0);
    if ($cmp815) {
      var $i_7251 = $inc829;
      var $152 = $155;
      label = 169;
      break;
    } else {
      var $sony_key_1 = $sony_key_0318;
      var $sony_length_1 = $sony_length_0317;
      var $sony_offset_1 = $sony_offset_0316;
      var $plen_3 = $plen_0315;
      var $blrc_2 = $blrc_0314;
      var $blrr_2 = $blrr_0313;
      var $ima_len_1 = $ima_len_0312;
      var $use_cm_1 = $use_cm_0311;
      var $ifd_1 = $ifd_0310;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    }
   case 172:
    var $c_16246;
    var $156 = HEAP32[$type >> 2];
    var $call836 = _getreal($156);
    var $arrayidx837 = $ab + ($c_16246 << 3) | 0;
    HEAPF64[tempDoublePtr >> 3] = $call836, HEAP32[$arrayidx837 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx837 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $inc839 = $c_16246 + 1 | 0;
    var $157 = HEAP32[5560840 >> 2];
    var $cmp833 = ($inc839 | 0) < ($157 | 0);
    if ($cmp833) {
      var $c_16246 = $inc839;
      label = 172;
      break;
    } else {
      var $sony_key_1 = $sony_key_0318;
      var $sony_length_1 = $sony_length_0317;
      var $sony_offset_1 = $sony_offset_0316;
      var $plen_3 = $plen_0315;
      var $blrc_2 = $blrc_0314;
      var $blrr_2 = $blrr_0313;
      var $ima_len_1 = $ima_len_0312;
      var $use_cm_1 = $use_cm_0311;
      var $ifd_1 = $ifd_0310;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    }
   case 173:
    var $c_17243;
    var $158 = HEAP32[$type >> 2];
    var $call846 = _getreal($158);
    var $arrayidx847 = $asn + ($c_17243 << 3) | 0;
    HEAPF64[tempDoublePtr >> 3] = $call846, HEAP32[$arrayidx847 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx847 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $inc849 = $c_17243 + 1 | 0;
    var $159 = HEAP32[5560840 >> 2];
    var $cmp843 = ($inc849 | 0) < ($159 | 0);
    if ($cmp843) {
      var $c_17243 = $inc849;
      label = 173;
      break;
    } else {
      var $sony_key_1 = $sony_key_0318;
      var $sony_length_1 = $sony_length_0317;
      var $sony_offset_1 = $sony_offset_0316;
      var $plen_3 = $plen_0315;
      var $blrc_2 = $blrc_0314;
      var $blrr_2 = $blrr_0313;
      var $ima_len_1 = $ima_len_0312;
      var $use_cm_1 = $use_cm_0311;
      var $ifd_1 = $ifd_0310;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    }
   case 174:
    var $160 = HEAP32[$type >> 2];
    var $call852 = _getreal($160);
    var $161 = HEAP32[$type >> 2];
    var $call854 = _getreal($161);
    var $sub857 = 1 - $call852;
    var $sub859 = $sub857 - $call854;
    var $div868 = $call852 / .9504560232162476;
    var $div868_2 = $sub859 / 1.0887540578842163;
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $div868;
    var $xyz_sroa_1_1 = $call854;
    var $xyz_sroa_2_1 = $div868_2;
    label = 187;
    break;
   case 175:
    var $162 = HEAP32[5427976 >> 2];
    var $tobool873 = ($162 | 0) == 0;
    if ($tobool873) {
      label = 176;
      break;
    } else {
      var $sony_key_1 = $sony_key_0318;
      var $sony_length_1 = $sony_length_0317;
      var $sony_offset_1 = $sony_offset_0316;
      var $plen_3 = $plen_0315;
      var $blrc_2 = $blrc_0314;
      var $blrr_2 = $blrr_0313;
      var $ima_len_1 = $ima_len_0312;
      var $use_cm_1 = $use_cm_0311;
      var $ifd_1 = $ifd_0310;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    }
   case 176:
    var $call876 = _get4();
    var $add877 = $call876 + $base | 0;
    _parse_minolta($add877);
    var $163 = HEAP32[5264116 >> 2];
    var $call878 = _fseek($163, $add877, 0);
    var $call879 = _parse_tiff_ifd($base);
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 177:
    _read_shorts(5560200, 3);
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 178:
    var $164 = HEAP32[$type >> 2];
    var $call882 = _getint($164);
    var $conv883 = $call882 & 65535;
    HEAP16[5243564 >> 1] = $conv883;
    var $165 = HEAP32[$type >> 2];
    var $call884 = _getint($165);
    var $conv885 = $call884 & 65535;
    HEAP16[5263700 >> 1] = $conv885;
    var $166 = HEAP32[$type >> 2];
    var $call886 = _getint($166);
    var $167 = HEAP16[5243564 >> 1];
    var $conv887 = $167 & 65535;
    var $sub888 = $call886 - $conv887 | 0;
    var $conv889 = $sub888 & 65535;
    HEAP16[5398712 >> 1] = $conv889;
    var $168 = HEAP32[$type >> 2];
    var $call890 = _getint($168);
    var $169 = HEAP16[5263700 >> 1];
    var $conv891 = $169 & 65535;
    var $sub892 = $call890 - $conv891 | 0;
    var $conv893 = $sub892 & 65535;
    HEAP16[5242964 >> 1] = $conv893;
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 179:
    var $i_8239;
    var $170 = HEAP32[$type >> 2];
    var $call904 = _getint($170);
    var $arrayidx905 = 5263500 + ($i_8239 << 2) | 0;
    HEAP32[$arrayidx905 >> 2] = $call904;
    var $inc907 = $i_8239 + 1 | 0;
    var $171 = HEAP32[$len >> 2];
    var $cmp896 = $inc907 >>> 0 < $171 >>> 0;
    var $cmp899 = ($inc907 | 0) < 32;
    var $or_cond1 = $cmp896 & $cmp899;
    if ($or_cond1) {
      var $i_8239 = $inc907;
      label = 179;
      break;
    } else {
      label = 180;
      break;
    }
   case 180:
    HEAP32[5561400 >> 2] = 0;
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 181:
    var $172 = HEAP32[5264116 >> 2];
    var $call910 = _ftell($172);
    HEAP32[5263440 >> 2] = $call910;
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 182:
    var $173 = HEAP32[$len >> 2];
    var $cmp912 = $173 >>> 0 < 13;
    if ($cmp912) {
      var $sony_key_1 = $sony_key_0318;
      var $sony_length_1 = $sony_length_0317;
      var $sony_offset_1 = $sony_offset_0316;
      var $plen_3 = $plen_0315;
      var $blrc_2 = $blrc_0314;
      var $blrr_2 = $blrr_0313;
      var $ima_len_1 = $ima_len_0312;
      var $use_cm_1 = $use_cm_0311;
      var $ifd_1 = $ifd_0310;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    } else {
      label = 183;
      break;
    }
   case 183:
    var $174 = HEAP32[5264116 >> 2];
    var $call916 = _fseek($174, 16, 1);
    var $call917 = _get4();
    HEAP32[5428492 >> 2] = $call917;
    var $175 = HEAP32[5264116 >> 2];
    var $call918 = _fseek($175, 28, 1);
    var $call919 = _get4();
    var $176 = HEAP32[5428492 >> 2];
    var $add920 = $176 + $call919 | 0;
    HEAP32[5428492 >> 2] = $add920;
    HEAP32[5263692 >> 2] = 36;
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 184:
    var $177 = HEAP32[$type >> 2];
    var $cmp922 = ($177 | 0) == 2;
    if ($cmp922) {
      label = 185;
      break;
    } else {
      var $sony_key_1 = $sony_key_0318;
      var $sony_length_1 = $sony_length_0317;
      var $sony_offset_1 = $sony_offset_0316;
      var $plen_3 = $plen_0315;
      var $blrc_2 = $blrc_0314;
      var $blrr_2 = $blrr_0313;
      var $ima_len_1 = $ima_len_0312;
      var $use_cm_1 = $use_cm_0311;
      var $ifd_1 = $ifd_0310;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    }
   case 185:
    var $178 = HEAP32[5264116 >> 2];
    var $call925 = _fgets(5263308, 64, $178);
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 186:
    HEAP32[5427632 >> 2] = $or688;
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_229;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 187:
    var $xyz_sroa_2_1;
    var $xyz_sroa_1_1;
    var $xyz_sroa_0_1;
    var $ifd_1;
    var $use_cm_1;
    var $ima_len_1;
    var $blrr_2;
    var $blrc_2;
    var $plen_3;
    var $sony_offset_1;
    var $sony_length_1;
    var $sony_key_1;
    var $179 = HEAP32[5264116 >> 2];
    var $180 = HEAP32[$save >> 2];
    var $call927 = _fseek($179, $180, 0);
    var $tobool = ($dec319 | 0) == 0;
    if ($tobool) {
      label = 188;
      break;
    } else {
      var $ifd_0310 = $ifd_1;
      var $use_cm_0311 = $use_cm_1;
      var $ima_len_0312 = $ima_len_1;
      var $blrr_0313 = $blrr_2;
      var $blrc_0314 = $blrc_2;
      var $plen_0315 = $plen_3;
      var $sony_offset_0316 = $sony_offset_1;
      var $sony_length_0317 = $sony_length_1;
      var $sony_key_0318 = $sony_key_1;
      var $dec319_in = $dec319;
      var $xyz_sroa_0_0 = $xyz_sroa_0_1;
      var $xyz_sroa_1_0 = $xyz_sroa_1_1;
      var $xyz_sroa_2_0 = $xyz_sroa_2_1;
      label = 5;
      break;
    }
   case 188:
    var $tobool929 = ($sony_length_1 | 0) == 0;
    if ($tobool929) {
      var $use_cm_0_lcssa370 = $use_cm_1;
      var $xyz_sroa_0_2 = $xyz_sroa_0_1;
      var $xyz_sroa_1_2 = $xyz_sroa_1_1;
      var $xyz_sroa_2_2 = $xyz_sroa_2_1;
      label = 193;
      break;
    } else {
      label = 189;
      break;
    }
   case 189:
    var $call931 = _malloc($sony_length_1);
    var $tobool932 = ($call931 | 0) == 0;
    if ($tobool932) {
      var $use_cm_0_lcssa370 = $use_cm_1;
      var $xyz_sroa_0_2 = $xyz_sroa_0_1;
      var $xyz_sroa_1_2 = $xyz_sroa_1_1;
      var $xyz_sroa_2_2 = $xyz_sroa_2_1;
      label = 193;
      break;
    } else {
      label = 190;
      break;
    }
   case 190:
    var $181 = $call931;
    var $182 = HEAP32[5264116 >> 2];
    var $call934 = _fseek($182, $sony_offset_1, 0);
    var $183 = HEAP32[5264116 >> 2];
    var $call935 = _fread($call931, $sony_length_1, 1, $183);
    var $div936 = $sony_length_1 >>> 2;
    _sony_decrypt($181, $div936, 1, $sony_key_1);
    var $184 = HEAP32[5264116 >> 2];
    var $call937 = _tmpfile();
    HEAP32[5264116 >> 2] = $call937;
    var $tobool938 = ($call937 | 0) == 0;
    if ($tobool938) {
      label = 192;
      break;
    } else {
      label = 191;
      break;
    }
   case 191:
    var $call940 = _fwrite($call931, $sony_length_1, 1, $call937);
    var $185 = HEAP32[5264116 >> 2];
    var $call941 = _fseek($185, 0, 0);
    var $sub942 = -$sony_offset_1 | 0;
    var $call943 = _parse_tiff_ifd($sub942);
    var $186 = HEAP32[5264116 >> 2];
    var $call944 = _fclose($186);
    label = 192;
    break;
   case 192:
    HEAP32[5264116 >> 2] = $184;
    _free($call931);
    var $use_cm_0_lcssa370 = $use_cm_1;
    var $xyz_sroa_0_2 = $xyz_sroa_0_1;
    var $xyz_sroa_1_2 = $xyz_sroa_1_1;
    var $xyz_sroa_2_2 = $xyz_sroa_2_1;
    label = 193;
    break;
   case 193:
    var $xyz_sroa_2_2;
    var $xyz_sroa_1_2;
    var $xyz_sroa_0_2;
    var $use_cm_0_lcssa370;
    var $187 = HEAP32[5560840 >> 2];
    var $cmp948234 = ($187 | 0) > 0;
    if ($cmp948234) {
      var $i_9235 = 0;
      label = 194;
      break;
    } else {
      label = 197;
      break;
    }
   case 194:
    var $i_9235;
    var $arrayidx955 = $ab + ($i_9235 << 3) | 0;
    var $188 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx955 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx955 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $c_19233 = 0;
    label = 195;
    break;
   case 195:
    var $c_19233;
    var $arrayidx957 = $cc + ($i_9235 << 5) + ($c_19233 << 3) | 0;
    var $189 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx957 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx957 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul958 = $188 * $189;
    HEAPF64[tempDoublePtr >> 3] = $mul958, HEAP32[$arrayidx957 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx957 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $inc960 = $c_19233 + 1 | 0;
    var $exitcond328 = ($inc960 | 0) == ($187 | 0);
    if ($exitcond328) {
      label = 196;
      break;
    } else {
      var $c_19233 = $inc960;
      label = 195;
      break;
    }
   case 196:
    var $inc963 = $i_9235 + 1 | 0;
    var $cmp948 = ($inc963 | 0) < ($187 | 0);
    if ($cmp948) {
      var $i_9235 = $inc963;
      label = 194;
      break;
    } else {
      label = 197;
      break;
    }
   case 197:
    var $tobool965 = ($use_cm_0_lcssa370 | 0) != 0;
    if ($tobool965) {
      label = 198;
      break;
    } else {
      label = 202;
      break;
    }
   case 198:
    if ($cmp948234) {
      var $c_20231 = 0;
      label = 199;
      break;
    } else {
      label = 201;
      break;
    }
   case 199:
    var $c_20231;
    var $arrayidx976 = $cam_xyz + $c_20231 * 24 | 0;
    HEAPF64[tempDoublePtr >> 3] = 0, HEAP32[$arrayidx976 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx976 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $j_3226 = 0;
    var $add990227 = 0;
    label = 200;
    break;
   case 200:
    var $add990227;
    var $j_3226;
    var $arrayidx982 = $cc + ($c_20231 << 5) + ($j_3226 << 3) | 0;
    var $190 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx982 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx982 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx984 = $cm + $j_3226 * 24 | 0;
    var $191 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx984 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx984 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul985 = $190 * $191;
    var $mul987 = $mul985 * $xyz_sroa_0_2;
    var $add990 = $add990227 + $mul987;
    var $inc992 = $j_3226 + 1 | 0;
    var $exitcond = ($inc992 | 0) == ($187 | 0);
    if ($exitcond) {
      label = 209;
      break;
    } else {
      var $j_3226 = $inc992;
      var $add990227 = $add990;
      label = 200;
      break;
    }
   case 201:
    var $arraydecay1000 = $cam_xyz | 0;
    _cam_xyz_coeff($arraydecay1000);
    label = 202;
    break;
   case 202:
    var $arrayidx1002 = $asn | 0;
    var $192 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx1002 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx1002 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $tobool1003 = $192 != 0;
    if ($tobool1003) {
      label = 203;
      break;
    } else {
      label = 206;
      break;
    }
   case 203:
    HEAPF32[5561136 >> 2] = 0;
    if ($cmp948234) {
      var $c_21224 = 0;
      var $193 = $192;
      label = 204;
      break;
    } else {
      var $retval_0 = 0;
      label = 208;
      break;
    }
   case 204:
    var $193;
    var $c_21224;
    var $div1010 = 1 / $193;
    var $conv1011 = $div1010;
    var $arrayidx1012 = 5561124 + ($c_21224 << 2) | 0;
    HEAPF32[$arrayidx1012 >> 2] = $conv1011;
    var $inc1014 = $c_21224 + 1 | 0;
    var $cmp1006 = ($inc1014 | 0) < ($187 | 0);
    if ($cmp1006) {
      label = 205;
      break;
    } else {
      label = 206;
      break;
    }
   case 205:
    var $arrayidx1009_phi_trans_insert = $asn + ($inc1014 << 3) | 0;
    var $_pre26 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx1009_phi_trans_insert >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx1009_phi_trans_insert + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $c_21224 = $inc1014;
    var $193 = $_pre26;
    label = 204;
    break;
   case 206:
    var $tobool965_not = $tobool965 ^ 1;
    var $or_cond373 = $cmp948234 & $tobool965_not;
    if ($or_cond373) {
      var $c_22222 = 0;
      label = 207;
      break;
    } else {
      var $retval_0 = 0;
      label = 208;
      break;
    }
   case 207:
    var $c_22222;
    var $arrayidx1024 = $cc + ($c_22222 << 5) + ($c_22222 << 3) | 0;
    var $194 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx1024 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx1024 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx1025 = 5245640 + ($c_22222 << 2) | 0;
    var $195 = HEAPF32[$arrayidx1025 >> 2];
    var $conv1026 = $195;
    var $div1027 = $conv1026 / $194;
    var $conv1028 = $div1027;
    HEAPF32[$arrayidx1025 >> 2] = $conv1028;
    var $inc1030 = $c_22222 + 1 | 0;
    var $cmp1020 = ($inc1030 | 0) < ($187 | 0);
    if ($cmp1020) {
      var $c_22222 = $inc1030;
      label = 207;
      break;
    } else {
      var $retval_0 = 0;
      label = 208;
      break;
    }
   case 208:
    var $retval_0;
    STACKTOP = __stackBase__;
    return $retval_0;
   case 209:
    HEAPF64[tempDoublePtr >> 3] = $add990, HEAP32[$arrayidx976 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx976 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $arrayidx976_1 = $cam_xyz + $c_20231 * 24 + 8 | 0;
    HEAPF64[tempDoublePtr >> 3] = 0, HEAP32[$arrayidx976_1 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx976_1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $j_3226_1 = 0;
    var $add990227_1 = 0;
    label = 210;
    break;
   case 210:
    var $add990227_1;
    var $j_3226_1;
    var $arrayidx982_1 = $cc + ($c_20231 << 5) + ($j_3226_1 << 3) | 0;
    var $196 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx982_1 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx982_1 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx984_1 = $cm + $j_3226_1 * 24 + 8 | 0;
    var $197 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx984_1 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx984_1 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul985_1 = $196 * $197;
    var $mul987_1 = $mul985_1 * $xyz_sroa_1_2;
    var $add990_1 = $add990227_1 + $mul987_1;
    var $inc992_1 = $j_3226_1 + 1 | 0;
    var $exitcond_1 = ($inc992_1 | 0) == ($187 | 0);
    if ($exitcond_1) {
      label = 211;
      break;
    } else {
      var $j_3226_1 = $inc992_1;
      var $add990227_1 = $add990_1;
      label = 210;
      break;
    }
   case 211:
    HEAPF64[tempDoublePtr >> 3] = $add990_1, HEAP32[$arrayidx976_1 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx976_1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $arrayidx976_2 = $cam_xyz + $c_20231 * 24 + 16 | 0;
    HEAPF64[tempDoublePtr >> 3] = 0, HEAP32[$arrayidx976_2 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx976_2 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $j_3226_2 = 0;
    var $add990227_2 = 0;
    label = 212;
    break;
   case 212:
    var $add990227_2;
    var $j_3226_2;
    var $arrayidx982_2 = $cc + ($c_20231 << 5) + ($j_3226_2 << 3) | 0;
    var $198 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx982_2 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx982_2 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx984_2 = $cm + $j_3226_2 * 24 + 16 | 0;
    var $199 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx984_2 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx984_2 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul985_2 = $198 * $199;
    var $mul987_2 = $mul985_2 * $xyz_sroa_2_2;
    var $add990_2 = $add990227_2 + $mul987_2;
    var $inc992_2 = $j_3226_2 + 1 | 0;
    var $exitcond_2 = ($inc992_2 | 0) == ($187 | 0);
    if ($exitcond_2) {
      label = 213;
      break;
    } else {
      var $j_3226_2 = $inc992_2;
      var $add990227_2 = $add990_2;
      label = 212;
      break;
    }
   case 213:
    HEAPF64[tempDoublePtr >> 3] = $add990_2, HEAP32[$arrayidx976_2 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx976_2 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $inc998 = $c_20231 + 1 | 0;
    var $cmp968 = ($inc998 | 0) < ($187 | 0);
    if ($cmp968) {
      var $c_20231 = $inc998;
      label = 199;
      break;
    } else {
      label = 201;
      break;
    }
   case 214:
    HEAP32[5245040 >> 2] = 0;
    var $200 = HEAP32[$type >> 2];
    var $call498 = _getreal($200);
    var $201 = HEAP32[$type >> 2];
    var $call503 = _getreal($201);
    var $conv504 = $call503;
    HEAPF32[5244964 >> 2] = $conv504;
    var $202 = HEAP32[$type >> 2];
    var $call503_1 = _getreal($202);
    var $conv504_1 = $call503_1;
    HEAPF32[5244968 >> 2] = $conv504_1;
    var $203 = HEAP32[$type >> 2];
    var $call503_2 = _getreal($203);
    var $conv504_2 = $call503_2;
    HEAPF32[5244972 >> 2] = $conv504_2;
    var $204 = HEAP32[$type >> 2];
    var $call498_1 = _getreal($204);
    var $205 = HEAP32[$type >> 2];
    var $call503_1337 = _getreal($205);
    var $conv504_1338 = $call503_1337;
    HEAPF32[5244980 >> 2] = $conv504_1338;
    var $206 = HEAP32[$type >> 2];
    var $call503_1_1 = _getreal($206);
    var $conv504_1_1 = $call503_1_1;
    HEAPF32[5244984 >> 2] = $conv504_1_1;
    var $207 = HEAP32[$type >> 2];
    var $call503_2_1 = _getreal($207);
    var $conv504_2_1 = $call503_2_1;
    HEAPF32[5244988 >> 2] = $conv504_2_1;
    var $208 = HEAP32[$type >> 2];
    var $call498_2 = _getreal($208);
    var $209 = HEAP32[$type >> 2];
    var $call503_2340 = _getreal($209);
    var $conv504_2341 = $call503_2340;
    HEAPF32[5244996 >> 2] = $conv504_2341;
    var $210 = HEAP32[$type >> 2];
    var $call503_1_2 = _getreal($210);
    var $conv504_1_2 = $call503_1_2;
    HEAPF32[5245e3 >> 2] = $conv504_1_2;
    var $211 = HEAP32[$type >> 2];
    var $call503_2_2 = _getreal($211);
    var $conv504_2_2 = $call503_2_2;
    HEAPF32[5245004 >> 2] = $conv504_2_2;
    var $sony_key_1 = $sony_key_0318;
    var $sony_length_1 = $sony_length_0317;
    var $sony_offset_1 = $sony_offset_0316;
    var $plen_3 = $plen_0315;
    var $blrc_2 = $blrc_0314;
    var $blrr_2 = $blrr_0313;
    var $ima_len_1 = $ima_len_0312;
    var $use_cm_1 = $use_cm_0311;
    var $ifd_1 = $ifd_0310;
    var $xyz_sroa_0_1 = $xyz_sroa_0_0;
    var $xyz_sroa_1_1 = $xyz_sroa_1_0;
    var $xyz_sroa_2_1 = $xyz_sroa_2_0;
    label = 187;
    break;
   case 215:
    var $arrayidx296_1_phi_trans_insert = 5428500 + ($and277 << 1) | 0;
    var $_pre23 = HEAP16[$arrayidx296_1_phi_trans_insert >> 1];
    var $j_1297_1 = $j_1294_1;
    var $212 = $_pre23;
    label = 216;
    break;
   case 216:
    var $212;
    var $j_1297_1;
    var $add298_1 = $212 + 2 & 65535;
    var $arrayidx300_1 = 5428500 + ($j_1297_1 << 1) | 0;
    HEAP16[$arrayidx300_1 >> 1] = $add298_1;
    var $j_1_1 = $j_1297_1 + 1 | 0;
    var $cmp292_1 = $j_1_1 >>> 0 > $and277_1 >>> 0;
    if ($cmp292_1) {
      label = 217;
      break;
    } else {
      var $j_1297_1 = $j_1_1;
      var $212 = $add298_1;
      label = 216;
      break;
    }
   case 217:
    var $j_1294_2 = $and277_1 + 1 | 0;
    var $cmp292295_2 = $j_1294_2 >>> 0 > $and277_2 >>> 0;
    if ($cmp292295_2) {
      label = 220;
      break;
    } else {
      label = 218;
      break;
    }
   case 218:
    var $arrayidx296_2_phi_trans_insert = 5428500 + ($and277_1 << 1) | 0;
    var $_pre22 = HEAP16[$arrayidx296_2_phi_trans_insert >> 1];
    var $j_1297_2 = $j_1294_2;
    var $213 = $_pre22;
    label = 219;
    break;
   case 219:
    var $213;
    var $j_1297_2;
    var $add298_2 = $213 + 4 & 65535;
    var $arrayidx300_2 = 5428500 + ($j_1297_2 << 1) | 0;
    HEAP16[$arrayidx300_2 >> 1] = $add298_2;
    var $j_1_2 = $j_1297_2 + 1 | 0;
    var $cmp292_2 = $j_1_2 >>> 0 > $and277_2 >>> 0;
    if ($cmp292_2) {
      label = 220;
      break;
    } else {
      var $j_1297_2 = $j_1_2;
      var $213 = $add298_2;
      label = 219;
      break;
    }
   case 220:
    var $j_1294_3 = $and277_2 + 1 | 0;
    var $cmp292295_3 = $j_1294_3 >>> 0 > $and277_3 >>> 0;
    if ($cmp292295_3) {
      label = 223;
      break;
    } else {
      label = 221;
      break;
    }
   case 221:
    var $arrayidx296_3_phi_trans_insert = 5428500 + ($and277_2 << 1) | 0;
    var $_pre21 = HEAP16[$arrayidx296_3_phi_trans_insert >> 1];
    var $j_1297_3 = $j_1294_3;
    var $214 = $_pre21;
    label = 222;
    break;
   case 222:
    var $214;
    var $j_1297_3;
    var $add298_3 = $214 + 8 & 65535;
    var $arrayidx300_3 = 5428500 + ($j_1297_3 << 1) | 0;
    HEAP16[$arrayidx300_3 >> 1] = $add298_3;
    var $j_1_3 = $j_1297_3 + 1 | 0;
    var $cmp292_3 = $j_1_3 >>> 0 > $and277_3 >>> 0;
    if ($cmp292_3) {
      label = 223;
      break;
    } else {
      var $j_1297_3 = $j_1_3;
      var $214 = $add298_3;
      label = 222;
      break;
    }
   case 223:
    var $j_1294_4 = $and277_3 + 1 | 0;
    var $cmp292295_4 = $j_1294_4 >>> 0 > 4095;
    if ($cmp292295_4) {
      var $sony_key_1 = $sony_key_0318;
      var $sony_length_1 = $sony_length_0317;
      var $sony_offset_1 = $sony_offset_0316;
      var $plen_3 = $plen_0315;
      var $blrc_2 = $blrc_0314;
      var $blrr_2 = $blrr_0313;
      var $ima_len_1 = $ima_len_0312;
      var $use_cm_1 = $use_cm_0311;
      var $ifd_1 = $ifd_0310;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    } else {
      label = 224;
      break;
    }
   case 224:
    var $arrayidx296_4_phi_trans_insert = 5428500 + ($and277_3 << 1) | 0;
    var $_pre = HEAP16[$arrayidx296_4_phi_trans_insert >> 1];
    var $j_1297_4 = $j_1294_4;
    var $215 = $_pre;
    label = 225;
    break;
   case 225:
    var $215;
    var $j_1297_4;
    var $add298_4 = $215 + 16 & 65535;
    var $arrayidx300_4 = 5428500 + ($j_1297_4 << 1) | 0;
    HEAP16[$arrayidx300_4 >> 1] = $add298_4;
    var $j_1_4 = $j_1297_4 + 1 | 0;
    var $cmp292_4 = $j_1_4 >>> 0 > 4095;
    if ($cmp292_4) {
      var $sony_key_1 = $sony_key_0318;
      var $sony_length_1 = $sony_length_0317;
      var $sony_offset_1 = $sony_offset_0316;
      var $plen_3 = $plen_0315;
      var $blrc_2 = $blrc_0314;
      var $blrr_2 = $blrr_0313;
      var $ima_len_1 = $ima_len_0312;
      var $use_cm_1 = $use_cm_0311;
      var $ifd_1 = $ifd_0310;
      var $xyz_sroa_0_1 = $xyz_sroa_0_0;
      var $xyz_sroa_1_1 = $xyz_sroa_1_0;
      var $xyz_sroa_2_1 = $xyz_sroa_2_0;
      label = 187;
      break;
    } else {
      var $j_1297_4 = $j_1_4;
      var $215 = $add298_4;
      label = 225;
      break;
    }
   case 226:
    var $inc = $3 + 1 | 0;
    HEAP32[5243584 >> 2] = $inc;
    var $arrayidx7 = $cc | 0;
    HEAPF64[tempDoublePtr >> 3] = 1, HEAP32[$arrayidx7 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx7 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $arrayidx7_1 = $cc + 8 | 0;
    var $arrayidx7_1_1 = $cc + 40 | 0;
    var $216 = $arrayidx7_1;
    HEAP32[$216 >> 2] = 0;
    HEAP32[$216 + 4 >> 2] = 0;
    HEAP32[$216 + 8 >> 2] = 0;
    HEAP32[$216 + 12 >> 2] = 0;
    HEAP32[$216 + 16 >> 2] = 0;
    HEAP32[$216 + 20 >> 2] = 0;
    HEAP32[$216 + 24 >> 2] = 0;
    HEAP32[$216 + 28 >> 2] = 0;
    HEAPF64[tempDoublePtr >> 3] = 1, HEAP32[$arrayidx7_1_1 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx7_1_1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $arrayidx7_2_1 = $cc + 48 | 0;
    var $arrayidx7_2_2 = $cc + 80 | 0;
    var $217 = $arrayidx7_2_1;
    HEAP32[$217 >> 2] = 0;
    HEAP32[$217 + 4 >> 2] = 0;
    HEAP32[$217 + 8 >> 2] = 0;
    HEAP32[$217 + 12 >> 2] = 0;
    HEAP32[$217 + 16 >> 2] = 0;
    HEAP32[$217 + 20 >> 2] = 0;
    HEAP32[$217 + 24 >> 2] = 0;
    HEAP32[$217 + 28 >> 2] = 0;
    HEAPF64[tempDoublePtr >> 3] = 1, HEAP32[$arrayidx7_2_2 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx7_2_2 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $arrayidx7_3_2 = $cc + 88 | 0;
    var $arrayidx7_3_3 = $cc + 120 | 0;
    var $218 = $arrayidx7_3_2;
    HEAP32[$218 >> 2] = 0;
    HEAP32[$218 + 4 >> 2] = 0;
    HEAP32[$218 + 8 >> 2] = 0;
    HEAP32[$218 + 12 >> 2] = 0;
    HEAP32[$218 + 16 >> 2] = 0;
    HEAP32[$218 + 20 >> 2] = 0;
    HEAP32[$218 + 24 >> 2] = 0;
    HEAP32[$218 + 28 >> 2] = 0;
    HEAPF64[tempDoublePtr >> 3] = 1, HEAP32[$arrayidx7_3_3 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx7_3_3 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $call = _get2();
    var $conv12 = $call & 65535;
    var $cmp13 = ($call & 65535) > 512;
    if ($cmp13) {
      var $retval_0 = 1;
      label = 208;
      break;
    } else {
      label = 3;
      break;
    }
  }
}
_parse_tiff_ifd["X"] = 1;
function _romm_coeff($romm_cam) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $arrayidx11 = $romm_cam | 0;
    var $arrayidx11_1 = $romm_cam + 12 | 0;
    var $arrayidx11_2 = $romm_cam + 24 | 0;
    var $arrayidx11_116 = $romm_cam + 4 | 0;
    var $arrayidx11_1_1 = $romm_cam + 16 | 0;
    var $arrayidx11_2_1 = $romm_cam + 28 | 0;
    var $arrayidx11_219 = $romm_cam + 8 | 0;
    var $arrayidx11_1_2 = $romm_cam + 20 | 0;
    var $arrayidx11_2_2 = $romm_cam + 32 | 0;
    var $i_014 = 0;
    label = 4;
    break;
   case 3:
    return;
   case 4:
    var $i_014;
    var $arrayidx9 = 5244928 + $i_014 * 12 | 0;
    var $arrayidx4 = 5560844 + ($i_014 << 4) | 0;
    HEAPF32[$arrayidx4 >> 2] = 0;
    var $0 = HEAPF32[$arrayidx9 >> 2];
    var $1 = HEAPF32[$arrayidx11 >> 2];
    var $mul = $0 * $1;
    var $add = $mul;
    HEAPF32[$arrayidx4 >> 2] = $add;
    var $arrayidx9_1 = 5244932 + $i_014 * 12 | 0;
    var $2 = HEAPF32[$arrayidx9_1 >> 2];
    var $3 = HEAPF32[$arrayidx11_1 >> 2];
    var $mul_1 = $2 * $3;
    var $add_1 = $add + $mul_1;
    HEAPF32[$arrayidx4 >> 2] = $add_1;
    var $arrayidx9_2 = 5244936 + $i_014 * 12 | 0;
    var $4 = HEAPF32[$arrayidx9_2 >> 2];
    var $5 = HEAPF32[$arrayidx11_2 >> 2];
    var $mul_2 = $4 * $5;
    var $add_2 = $add_1 + $mul_2;
    HEAPF32[$arrayidx4 >> 2] = $add_2;
    var $arrayidx4_1 = 5560848 + ($i_014 << 4) | 0;
    HEAPF32[$arrayidx4_1 >> 2] = 0;
    var $6 = HEAPF32[$arrayidx11_116 >> 2];
    var $mul_117 = $0 * $6;
    var $add_118 = $mul_117;
    HEAPF32[$arrayidx4_1 >> 2] = $add_118;
    var $7 = HEAPF32[$arrayidx11_1_1 >> 2];
    var $mul_1_1 = $2 * $7;
    var $add_1_1 = $add_118 + $mul_1_1;
    HEAPF32[$arrayidx4_1 >> 2] = $add_1_1;
    var $8 = HEAPF32[$arrayidx11_2_1 >> 2];
    var $mul_2_1 = $4 * $8;
    var $add_2_1 = $add_1_1 + $mul_2_1;
    HEAPF32[$arrayidx4_1 >> 2] = $add_2_1;
    var $arrayidx4_2 = 5560852 + ($i_014 << 4) | 0;
    HEAPF32[$arrayidx4_2 >> 2] = 0;
    var $9 = HEAPF32[$arrayidx11_219 >> 2];
    var $mul_220 = $0 * $9;
    var $add_221 = $mul_220;
    HEAPF32[$arrayidx4_2 >> 2] = $add_221;
    var $10 = HEAPF32[$arrayidx11_1_2 >> 2];
    var $mul_1_2 = $2 * $10;
    var $add_1_2 = $add_221 + $mul_1_2;
    HEAPF32[$arrayidx4_2 >> 2] = $add_1_2;
    var $11 = HEAPF32[$arrayidx11_2_2 >> 2];
    var $mul_2_2 = $4 * $11;
    var $add_2_2 = $add_1_2 + $mul_2_2;
    HEAPF32[$arrayidx4_2 >> 2] = $add_2_2;
    var $inc18 = $i_014 + 1 | 0;
    var $exitcond = ($inc18 | 0) == 3;
    if ($exitcond) {
      label = 3;
      break;
    } else {
      var $i_014 = $inc18;
      label = 4;
      break;
    }
  }
}
_romm_coeff["X"] = 1;
function _get_timestamp($reversed) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 64 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $t = __stackBase__;
    var $str = __stackBase__ + 44;
    var $arrayidx = $str + 19 | 0;
    HEAP8[$arrayidx] = 0;
    var $tobool = ($reversed | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      var $dec2 = 18;
      label = 3;
      break;
    }
   case 3:
    var $dec2;
    var $0 = HEAP32[5264116 >> 2];
    var $call = _fgetc($0);
    var $conv = $call & 255;
    var $arrayidx2 = $str + $dec2 | 0;
    HEAP8[$arrayidx2] = $conv;
    var $dec = $dec2 - 1 | 0;
    var $tobool1 = ($dec2 | 0) == 0;
    if ($tobool1) {
      label = 5;
      break;
    } else {
      var $dec2 = $dec;
      label = 3;
      break;
    }
   case 4:
    var $arraydecay = $str | 0;
    var $1 = HEAP32[5264116 >> 2];
    var $call3 = _fread($arraydecay, 19, 1, $1);
    var $arraydecay4_pre_phi = $arraydecay;
    label = 6;
    break;
   case 5:
    var $arraydecay4_pre = $str | 0;
    var $arraydecay4_pre_phi = $arraydecay4_pre;
    label = 6;
    break;
   case 6:
    var $arraydecay4_pre_phi;
    var $2 = $t;
    for (var $$dest = $2 >> 2, $$stop = $$dest + 11; $$dest < $$stop; $$dest++) {
      HEAP32[$$dest] = 0;
    }
    var $tm_year = $t + 20 | 0;
    var $tm_mon = $t + 16 | 0;
    var $tm_mday = $t + 12 | 0;
    var $tm_hour = $t + 8 | 0;
    var $tm_min = $t + 4 | 0;
    var $tm_sec = $t | 0;
    var $call5 = _sscanf($arraydecay4_pre_phi, 5587404, (tempInt = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempInt >> 2] = $tm_year, HEAP32[tempInt + 4 >> 2] = $tm_mon, HEAP32[tempInt + 8 >> 2] = $tm_mday, HEAP32[tempInt + 12 >> 2] = $tm_hour, HEAP32[tempInt + 16 >> 2] = $tm_min, HEAP32[tempInt + 20 >> 2] = $tm_sec, tempInt));
    var $cmp = ($call5 | 0) == 6;
    if ($cmp) {
      label = 7;
      break;
    } else {
      label = 9;
      break;
    }
   case 7:
    var $3 = HEAP32[$tm_year >> 2];
    var $sub = $3 - 1900 | 0;
    HEAP32[$tm_year >> 2] = $sub;
    var $4 = HEAP32[$tm_mon >> 2];
    var $sub11 = $4 - 1 | 0;
    HEAP32[$tm_mon >> 2] = $sub11;
    var $tm_isdst = $t + 32 | 0;
    HEAP32[$tm_isdst >> 2] = -1;
    var $call12 = _mktime($t);
    var $cmp13 = ($call12 | 0) > 0;
    if ($cmp13) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    var $call16 = _mktime($t);
    HEAP32[5243568 >> 2] = $call16;
    label = 9;
    break;
   case 9:
    STACKTOP = __stackBase__;
    return;
  }
}
function _parse_exif($base) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $tag = __stackBase__;
    var $type = __stackBase__ + 4;
    var $len = __stackBase__ + 8;
    var $save = __stackBase__ + 12;
    var $call = _strncmp(5263628, 5587396, 7);
    var $tobool = ($call | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      var $1 = 0;
      label = 4;
      break;
    }
   case 3:
    var $0 = HEAP32[5243584 >> 2];
    var $cmp = $0 >>> 0 < 3;
    var $1 = $cmp;
    label = 4;
    break;
   case 4:
    var $1;
    var $call1 = _get2();
    var $tobool28 = $call1 << 16 >> 16 == 0;
    if ($tobool28) {
      label = 23;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $conv = $call1 & 65535;
    var $dec9_in = $conv;
    label = 6;
    break;
   case 6:
    var $dec9_in;
    var $dec9 = $dec9_in - 1 | 0;
    _tiff_get($base, $tag, $type, $len, $save);
    var $2 = HEAP32[$tag >> 2];
    if (($2 | 0) == 33434) {
      label = 7;
      break;
    } else if (($2 | 0) == 33437) {
      label = 8;
      break;
    } else if (($2 | 0) == 34855) {
      label = 9;
      break;
    } else if (($2 | 0) == 36867 | ($2 | 0) == 36868) {
      label = 10;
      break;
    } else if (($2 | 0) == 37377) {
      label = 11;
      break;
    } else if (($2 | 0) == 37378) {
      label = 13;
      break;
    } else if (($2 | 0) == 37386) {
      label = 14;
      break;
    } else if (($2 | 0) == 37500) {
      label = 15;
      break;
    } else if (($2 | 0) == 40962) {
      label = 16;
      break;
    } else if (($2 | 0) == 40963) {
      label = 18;
      break;
    } else if (($2 | 0) == 41730) {
      label = 20;
      break;
    } else {
      label = 22;
      break;
    }
   case 7:
    var $3 = HEAP32[$type >> 2];
    var $call3 = _getreal($3);
    var $conv4 = $call3;
    HEAPF32[5244912 >> 2] = $conv4;
    label = 22;
    break;
   case 8:
    var $4 = HEAP32[$type >> 2];
    var $call6 = _getreal($4);
    var $conv7 = $call6;
    HEAPF32[5561468 >> 2] = $conv7;
    label = 22;
    break;
   case 9:
    var $call9 = _get2();
    var $conv10 = $call9 & 65535;
    HEAPF32[5264096 >> 2] = $conv10;
    label = 22;
    break;
   case 10:
    _get_timestamp(0);
    label = 22;
    break;
   case 11:
    var $5 = HEAP32[$type >> 2];
    var $call13 = _getreal($5);
    var $cmp14 = $call13 > -128;
    if ($cmp14) {
      label = 12;
      break;
    } else {
      label = 22;
      break;
    }
   case 12:
    var $sub = -$call13;
    var $exp2 = _exp2($sub);
    var $conv16 = $exp2;
    HEAPF32[5244912 >> 2] = $conv16;
    label = 22;
    break;
   case 13:
    var $6 = HEAP32[$type >> 2];
    var $call18 = _getreal($6);
    var $div = $call18 * .5;
    var $exp25 = _exp2($div);
    var $conv19 = $exp25;
    HEAPF32[5561468 >> 2] = $conv19;
    label = 22;
    break;
   case 14:
    var $7 = HEAP32[$type >> 2];
    var $call21 = _getreal($7);
    var $conv22 = $call21;
    HEAPF32[5403044 >> 2] = $conv22;
    label = 22;
    break;
   case 15:
    _parse_makernote($base, 0);
    label = 22;
    break;
   case 16:
    if ($1) {
      label = 17;
      break;
    } else {
      label = 22;
      break;
    }
   case 17:
    var $call27 = _get4();
    var $conv28 = $call27 & 65535;
    HEAP16[5245028 >> 1] = $conv28;
    label = 22;
    break;
   case 18:
    if ($1) {
      label = 19;
      break;
    } else {
      label = 22;
      break;
    }
   case 19:
    var $call33 = _get4();
    var $conv34 = $call33 & 65535;
    HEAP16[5245036 >> 1] = $conv34;
    label = 22;
    break;
   case 20:
    var $call37 = _get4();
    var $cmp38 = ($call37 | 0) == 131074;
    if ($cmp38) {
      label = 21;
      break;
    } else {
      label = 22;
      break;
    }
   case 21:
    HEAP32[5427968 >> 2] = 0;
    var $8 = HEAP32[5264116 >> 2];
    var $call43 = _fgetc($8);
    var $mul = $call43 * 16843009 & -1;
    var $9 = HEAP32[5427968 >> 2];
    var $or = $mul | $9;
    HEAP32[5427968 >> 2] = $or;
    var $10 = HEAP32[5264116 >> 2];
    var $call43_1 = _fgetc($10);
    var $shl_1 = $call43_1 * 67372036 & -1;
    var $11 = HEAP32[5427968 >> 2];
    var $or_1 = $shl_1 | $11;
    HEAP32[5427968 >> 2] = $or_1;
    var $12 = HEAP32[5264116 >> 2];
    var $call43_2 = _fgetc($12);
    var $shl_2 = $call43_2 * 269488144 & -1;
    var $13 = HEAP32[5427968 >> 2];
    var $or_2 = $shl_2 | $13;
    HEAP32[5427968 >> 2] = $or_2;
    var $14 = HEAP32[5264116 >> 2];
    var $call43_3 = _fgetc($14);
    var $shl_3 = $call43_3 * 1077952576 & -1;
    var $15 = HEAP32[5427968 >> 2];
    var $or_3 = $shl_3 | $15;
    HEAP32[5427968 >> 2] = $or_3;
    label = 22;
    break;
   case 22:
    var $16 = HEAP32[5264116 >> 2];
    var $17 = HEAP32[$save >> 2];
    var $call45 = _fseek($16, $17, 0);
    var $tobool2 = ($dec9 | 0) == 0;
    if ($tobool2) {
      label = 23;
      break;
    } else {
      var $dec9_in = $dec9;
      label = 6;
      break;
    }
   case 23:
    STACKTOP = __stackBase__;
    return;
  }
}
_parse_exif["X"] = 1;
function _parse_gps($base) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $tag = __stackBase__;
    var $type = __stackBase__ + 4;
    var $len = __stackBase__ + 8;
    var $save = __stackBase__ + 12;
    var $call = _get2();
    var $tobool10 = $call << 16 >> 16 == 0;
    if ($tobool10) {
      label = 10;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $conv = $call & 65535;
    var $dec11_in = $conv;
    label = 4;
    break;
   case 4:
    var $dec11_in;
    var $dec11 = $dec11_in - 1 | 0;
    _tiff_get($base, $tag, $type, $len, $save);
    var $0 = HEAP32[$tag >> 2];
    if (($0 | 0) == 1 | ($0 | 0) == 3 | ($0 | 0) == 5) {
      label = 5;
      break;
    } else if (($0 | 0) == 2 | ($0 | 0) == 4 | ($0 | 0) == 7) {
      label = 6;
      break;
    } else if (($0 | 0) == 6) {
      label = 7;
      break;
    } else if (($0 | 0) == 18 | ($0 | 0) == 29) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 5:
    var $1 = HEAP32[5264116 >> 2];
    var $call1 = _fgetc($1);
    var $div = $0 >>> 1;
    var $add = $div + 29 | 0;
    var $arrayidx = 5398736 + ($add << 2) | 0;
    HEAP32[$arrayidx >> 2] = $call1;
    label = 9;
    break;
   case 6:
    var $div5 = Math.floor(($0 >>> 0) / 3);
    var $mul = $div5 * 6 & -1;
    var $call4 = _get4();
    var $arrayidx7 = 5398736 + ($mul << 2) | 0;
    HEAP32[$arrayidx7 >> 2] = $call4;
    var $call4_1 = _get4();
    var $add6_112 = $mul | 1;
    var $arrayidx7_1 = 5398736 + ($add6_112 << 2) | 0;
    HEAP32[$arrayidx7_1 >> 2] = $call4_1;
    var $call4_2 = _get4();
    var $add6_2 = $mul + 2 | 0;
    var $arrayidx7_2 = 5398736 + ($add6_2 << 2) | 0;
    HEAP32[$arrayidx7_2 >> 2] = $call4_2;
    var $call4_3 = _get4();
    var $add6_3 = $mul + 3 | 0;
    var $arrayidx7_3 = 5398736 + ($add6_3 << 2) | 0;
    HEAP32[$arrayidx7_3 >> 2] = $call4_3;
    var $call4_4 = _get4();
    var $add6_4 = $mul + 4 | 0;
    var $arrayidx7_4 = 5398736 + ($add6_4 << 2) | 0;
    HEAP32[$arrayidx7_4 >> 2] = $call4_4;
    var $call4_5 = _get4();
    var $add6_5 = $mul + 5 | 0;
    var $arrayidx7_5 = 5398736 + ($add6_5 << 2) | 0;
    HEAP32[$arrayidx7_5 >> 2] = $call4_5;
    label = 9;
    break;
   case 7:
    var $call13 = _get4();
    HEAP32[5398808 >> 2] = $call13;
    var $call13_1 = _get4();
    HEAP32[5398812 >> 2] = $call13_1;
    label = 9;
    break;
   case 8:
    var $div20 = Math.floor(($0 >>> 0) / 3);
    var $_sum = $div20 + 14 | 0;
    var $add_ptr = 5398736 + ($_sum << 2) | 0;
    var $2 = $add_ptr;
    var $3 = HEAP32[$len >> 2];
    var $cmp21 = $3 >>> 0 < 12;
    var $cond = $cmp21 ? $3 : 12;
    var $4 = HEAP32[5264116 >> 2];
    var $call23 = _fgets($2, $cond, $4);
    label = 9;
    break;
   case 9:
    var $5 = HEAP32[5264116 >> 2];
    var $6 = HEAP32[$save >> 2];
    var $call24 = _fseek($5, $6, 0);
    var $tobool = ($dec11 | 0) == 0;
    if ($tobool) {
      label = 10;
      break;
    } else {
      var $dec11_in = $dec11;
      label = 4;
      break;
    }
   case 10:
    STACKTOP = __stackBase__;
    return;
  }
}
_parse_gps["X"] = 1;
function _parse_mos($offset) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 100 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $data = __stackBase__;
    var $i = __stackBase__ + 40;
    var $neut = __stackBase__ + 44;
    var $planes = __stackBase__ + 60;
    var $romm_cam = __stackBase__ + 64;
    HEAP32[$planes >> 2] = 0;
    var $0 = HEAP32[5264116 >> 2];
    var $call = _fseek($0, $offset, 0);
    var $call122 = _get4();
    var $cmp23 = ($call122 | 0) == 1347114067;
    if ($cmp23) {
      label = 3;
      break;
    } else {
      var $frot_0_lcssa = 0;
      label = 32;
      break;
    }
   case 3:
    var $arraydecay = $data | 0;
    var $arrayidx100 = $neut | 0;
    var $arraydecay49 = $romm_cam | 0;
    var $add_ptr_1 = $neut + 4 | 0;
    var $add_ptr_2 = $neut + 8 | 0;
    var $add_ptr_3 = $neut + 12 | 0;
    var $frot_024 = 0;
    label = 4;
    break;
   case 4:
    var $frot_024;
    var $call2 = _get4();
    var $1 = HEAP32[5264116 >> 2];
    var $call3 = _fread($arraydecay, 1, 40, $1);
    var $call4 = _get4();
    var $2 = HEAP32[5264116 >> 2];
    var $call5 = _ftell($2);
    var $call7 = _strcmp($arraydecay, 5587132);
    var $tobool = ($call7 | 0) == 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    HEAP32[5244044 >> 2] = $call5;
    HEAP32[5244056 >> 2] = $call4;
    label = 6;
    break;
   case 6:
    var $call11 = _strcmp($arraydecay, 5587112);
    var $tobool12 = ($call11 | 0) == 0;
    if ($tobool12) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    HEAP32[5245636 >> 2] = $call4;
    label = 8;
    break;
   case 8:
    var $call16 = _strcmp($arraydecay, 5587092);
    var $tobool17 = ($call16 | 0) == 0;
    if ($tobool17) {
      label = 9;
      break;
    } else {
      label = 11;
      break;
    }
   case 9:
    var $3 = HEAP32[5264116 >> 2];
    var $call19 = _fscanf($3, 5587088, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $i, tempInt));
    var $4 = HEAP32[$i >> 2];
    var $cmp20 = $4 >>> 0 < 39;
    if ($cmp20) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    var $arrayidx = 5245848 + ($4 << 2) | 0;
    var $5 = HEAP32[$arrayidx >> 2];
    var $call22 = _strcpy(5263372, $5);
    label = 11;
    break;
   case 11:
    var $call26 = _strcmp($arraydecay, 5587060);
    var $tobool27 = ($call26 | 0) == 0;
    if ($tobool27) {
      label = 12;
      break;
    } else {
      label = 15;
      break;
    }
   case 12:
    HEAP32[$i >> 2] = 0;
    label = 13;
    break;
   case 13:
    var $call30 = _get4();
    var $call31 = _int_to_float($call30);
    var $6 = HEAP32[$i >> 2];
    var $arrayidx33 = $romm_cam + ($6 << 2) | 0;
    HEAPF32[$arrayidx33 >> 2] = $call31;
    var $inc = $6 + 1 | 0;
    HEAP32[$i >> 2] = $inc;
    var $cmp29 = ($inc | 0) < 9;
    if ($cmp29) {
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    _romm_coeff($arraydecay49);
    label = 15;
    break;
   case 15:
    var $call37 = _strcmp($arraydecay, 5587036);
    var $tobool38 = ($call37 | 0) == 0;
    if ($tobool38) {
      label = 16;
      break;
    } else {
      label = 19;
      break;
    }
   case 16:
    HEAP32[$i >> 2] = 0;
    var $storemerge1617 = 0;
    label = 17;
    break;
   case 17:
    var $storemerge1617;
    var $7 = HEAP32[5264116 >> 2];
    var $arrayidx44 = $romm_cam + ($storemerge1617 << 2) | 0;
    var $call45 = _fscanf($7, 5587008, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $arrayidx44, tempInt));
    var $8 = HEAP32[$i >> 2];
    var $inc47 = $8 + 1 | 0;
    HEAP32[$i >> 2] = $inc47;
    var $cmp41 = ($inc47 | 0) < 9;
    if ($cmp41) {
      var $storemerge1617 = $inc47;
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    _romm_coeff($arraydecay49);
    label = 19;
    break;
   case 19:
    var $call52 = _strcmp($arraydecay, 5586980);
    var $tobool53 = ($call52 | 0) == 0;
    if ($tobool53) {
      label = 20;
      break;
    } else {
      label = 21;
      break;
    }
   case 20:
    var $9 = HEAP32[5264116 >> 2];
    var $call55 = _fscanf($9, 5587088, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $planes, tempInt));
    label = 21;
    break;
   case 21:
    var $call58 = _strcmp($arraydecay, 5586952);
    var $tobool59 = ($call58 | 0) == 0;
    if ($tobool59) {
      label = 22;
      break;
    } else {
      label = 23;
      break;
    }
   case 22:
    var $10 = HEAP32[5264116 >> 2];
    var $call61 = _fscanf($10, 5587088, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5403048, tempInt));
    label = 23;
    break;
   case 23:
    var $call64 = _strcmp($arraydecay, 5586928);
    var $tobool65 = ($call64 | 0) == 0;
    if ($tobool65) {
      label = 24;
      break;
    } else {
      var $frot_3 = $frot_024;
      label = 25;
      break;
    }
   case 24:
    var $11 = HEAP32[5264116 >> 2];
    var $call70 = _fscanf($11, 5587088, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $i, tempInt));
    var $12 = HEAP32[$i >> 2];
    var $cmp71 = ($12 | 0) == 1;
    var $_frot_024 = $cmp71 ? 0 : $frot_024;
    var $13 = HEAP32[5264116 >> 2];
    var $call70_1 = _fscanf($13, 5587088, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $i, tempInt));
    var $14 = HEAP32[$i >> 2];
    var $cmp71_1 = ($14 | 0) == 1;
    var $frot_2_1 = $cmp71_1 ? 1 : $_frot_024;
    var $15 = HEAP32[5264116 >> 2];
    var $call70_2 = _fscanf($15, 5587088, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $i, tempInt));
    var $16 = HEAP32[$i >> 2];
    var $cmp71_2 = ($16 | 0) == 1;
    var $_frot_2_1 = $cmp71_2 ? 3 : $frot_2_1;
    var $17 = HEAP32[5264116 >> 2];
    var $call70_3 = _fscanf($17, 5587088, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $i, tempInt));
    var $18 = HEAP32[$i >> 2];
    var $cmp71_3 = ($18 | 0) == 1;
    var $__frot_2_1 = $cmp71_3 ? 2 : $_frot_2_1;
    var $frot_3 = $__frot_2_1;
    label = 25;
    break;
   case 25:
    var $frot_3;
    var $call79 = _strcmp($arraydecay, 5586904);
    var $tobool80 = ($call79 | 0) == 0;
    if ($tobool80) {
      label = 26;
      break;
    } else {
      label = 27;
      break;
    }
   case 26:
    var $19 = HEAP32[5264116 >> 2];
    var $call82 = _fscanf($19, 5587088, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $i, tempInt));
    var $20 = HEAP32[$i >> 2];
    var $21 = HEAP32[5403048 >> 2];
    var $sub = $20 - $21 | 0;
    HEAP32[5403048 >> 2] = $sub;
    label = 27;
    break;
   case 27:
    var $call85 = _strcmp($arraydecay, 5586884);
    var $tobool86 = ($call85 | 0) != 0;
    var $22 = HEAPF32[5561124 >> 2];
    var $tobool87 = $22 != 0;
    var $or_cond = $tobool86 | $tobool87;
    if ($or_cond) {
      label = 29;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    var $23 = HEAP32[5264116 >> 2];
    var $call93 = _fscanf($23, 5587088, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $arrayidx100, tempInt));
    var $24 = HEAP32[5264116 >> 2];
    var $call93_1 = _fscanf($24, 5587088, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $add_ptr_1, tempInt));
    var $25 = HEAP32[5264116 >> 2];
    var $call93_2 = _fscanf($25, 5587088, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $add_ptr_2, tempInt));
    var $26 = HEAP32[5264116 >> 2];
    var $call93_3 = _fscanf($26, 5587088, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $add_ptr_3, tempInt));
    var $27 = HEAP32[$arrayidx100 >> 2];
    var $conv = $27 | 0;
    var $28 = HEAP32[$add_ptr_1 >> 2];
    var $conv102 = $28 | 0;
    var $div = $conv / $conv102;
    HEAPF32[5561124 >> 2] = $div;
    var $29 = HEAP32[$add_ptr_2 >> 2];
    var $conv102_1 = $29 | 0;
    var $div_1 = $conv / $conv102_1;
    HEAPF32[5561128 >> 2] = $div_1;
    var $30 = HEAP32[$add_ptr_3 >> 2];
    var $conv102_2 = $30 | 0;
    var $div_2 = $conv / $conv102_2;
    HEAPF32[5561132 >> 2] = $div_2;
    label = 29;
    break;
   case 29:
    var $call109 = _strcmp($arraydecay, 5586872);
    var $tobool110 = ($call109 | 0) == 0;
    if ($tobool110) {
      label = 30;
      break;
    } else {
      label = 31;
      break;
    }
   case 30:
    var $call112 = _get4();
    HEAP32[5263696 >> 2] = $call112;
    label = 31;
    break;
   case 31:
    _parse_mos($call5);
    var $31 = HEAP32[5264116 >> 2];
    var $add114 = $call5 + $call4 | 0;
    var $call115 = _fseek($31, $add114, 0);
    var $call1 = _get4();
    var $cmp = ($call1 | 0) == 1347114067;
    if ($cmp) {
      var $frot_024 = $frot_3;
      label = 4;
      break;
    } else {
      var $frot_0_lcssa = $frot_3;
      label = 32;
      break;
    }
   case 32:
    var $frot_0_lcssa;
    var $32 = HEAP32[$planes >> 2];
    var $tobool116 = ($32 | 0) == 0;
    if ($tobool116) {
      label = 34;
      break;
    } else {
      label = 33;
      break;
    }
   case 33:
    var $cmp118 = ($32 | 0) == 1;
    var $conv119 = $cmp118 & 1;
    var $33 = -$conv119 | 0;
    var $mul = $33 & 16843009;
    var $34 = HEAP32[5403048 >> 2];
    var $div120 = ($34 | 0) / 90 & -1;
    var $add121 = $div120 + $frot_0_lcssa | 0;
    var $and = $add121 & 3;
    var $arrayidx122 = $and + 5586864 | 0;
    var $35 = HEAP8[$arrayidx122];
    var $conv123 = $35 & 255;
    var $mul124 = $conv123 * $mul & -1;
    HEAP32[5427632 >> 2] = $mul124;
    label = 34;
    break;
   case 34:
    STACKTOP = __stackBase__;
    return;
  }
}
_parse_mos["X"] = 1;
function _linear_table($len) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $cmp = $len >>> 0 > 4096;
    var $_len = $cmp ? 4096 : $len;
    _read_shorts(5428500, $_len);
    var $cmp16 = ($_len | 0) < 4096;
    if ($cmp16) {
      var $i_07 = $_len;
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    var $i_07;
    var $sub = $i_07 - 1 | 0;
    var $arrayidx = 5428500 + ($sub << 1) | 0;
    var $0 = HEAP16[$arrayidx >> 1];
    var $arrayidx2 = 5428500 + ($i_07 << 1) | 0;
    HEAP16[$arrayidx2 >> 1] = $0;
    var $inc = $i_07 + 1 | 0;
    var $cmp1 = ($inc | 0) < 4096;
    if ($cmp1) {
      var $i_07 = $inc;
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $1 = HEAP16[5436690 >> 1];
    var $conv = $1 & 65535;
    HEAP32[5263496 >> 2] = $conv;
    return;
  }
}
function _parse_kodak_ifd($base) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $tag = __stackBase__;
    var $type = __stackBase__ + 4;
    var $len = __stackBase__ + 8;
    var $save = __stackBase__ + 12;
    var $call = _get2();
    var $cmp = ($call & 65535) > 1024;
    var $tobool31 = $call << 16 >> 16 == 0;
    var $or_cond43 = $cmp | $tobool31;
    if ($or_cond43) {
      label = 25;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $conv = $call & 65535;
    var $wbi_032 = -2;
    var $wbtemp_033 = 6500;
    var $dec34_in = $conv;
    var $mul_sroa_0_0 = 1;
    var $mul_sroa_1_0 = 1;
    var $mul_sroa_2_0 = 1;
    label = 4;
    break;
   case 4:
    var $mul_sroa_2_0;
    var $mul_sroa_1_0;
    var $mul_sroa_0_0;
    var $dec34_in;
    var $wbtemp_033;
    var $wbi_032;
    var $dec34 = $dec34_in - 1 | 0;
    _tiff_get($base, $tag, $type, $len, $save);
    var $0 = HEAP32[$tag >> 2];
    var $cmp2 = ($0 | 0) == 1020;
    if ($cmp2) {
      label = 5;
      break;
    } else {
      var $wbi_1 = $wbi_032;
      label = 6;
      break;
    }
   case 5:
    var $1 = HEAP32[$type >> 2];
    var $call5 = _getint($1);
    var $wbtemp_1 = $wbtemp_033;
    var $wbi_23 = $call5;
    label = 11;
    break;
   case 6:
    var $wbi_1;
    var $cmp7 = ($0 | 0) == 1021;
    if ($cmp7) {
      label = 7;
      break;
    } else {
      var $wbi_2 = $wbi_1;
      label = 9;
      break;
    }
   case 7:
    var $2 = HEAP32[$len >> 2];
    var $cmp9 = ($2 | 0) == 72;
    if ($cmp9) {
      label = 8;
      break;
    } else {
      var $wbtemp_1 = $wbtemp_033;
      var $wbi_23 = $wbi_1;
      label = 11;
      break;
    }
   case 8:
    var $3 = HEAP32[5264116 >> 2];
    var $call12 = _fseek($3, 40, 1);
    var $call15 = _get2();
    var $conv16 = $call15 & 65535;
    var $conv17 = $conv16 | 0;
    var $div = 2048 / $conv17;
    var $conv18 = $div;
    HEAPF32[5561124 >> 2] = $conv18;
    var $call15_1 = _get2();
    var $conv16_1 = $call15_1 & 65535;
    var $conv17_1 = $conv16_1 | 0;
    var $div_1 = 2048 / $conv17_1;
    var $conv18_1 = $div_1;
    HEAPF32[5561128 >> 2] = $conv18_1;
    var $call15_2 = _get2();
    var $conv16_2 = $call15_2 & 65535;
    var $conv17_2 = $conv16_2 | 0;
    var $div_2 = 2048 / $conv17_2;
    var $conv18_2 = $div_2;
    HEAPF32[5561132 >> 2] = $conv18_2;
    var $wbi_2 = -2;
    label = 9;
    break;
   case 9:
    var $wbi_2;
    var $cmp20 = ($0 | 0) == 2118;
    if ($cmp20) {
      label = 10;
      break;
    } else {
      var $wbtemp_1 = $wbtemp_033;
      var $wbi_23 = $wbi_2;
      label = 11;
      break;
    }
   case 10:
    var $4 = HEAP32[$type >> 2];
    var $call23 = _getint($4);
    var $wbtemp_1 = $call23;
    var $wbi_23 = $wbi_2;
    label = 11;
    break;
   case 11:
    var $wbi_23;
    var $wbtemp_1;
    var $add = $wbi_23 + 2130 | 0;
    var $cmp25 = ($0 | 0) == ($add | 0);
    if ($cmp25) {
      label = 12;
      break;
    } else {
      var $mul_sroa_0_1 = $mul_sroa_0_0;
      var $mul_sroa_1_1 = $mul_sroa_1_0;
      var $mul_sroa_2_1 = $mul_sroa_2_0;
      label = 13;
      break;
    }
   case 12:
    var $5 = HEAP32[$type >> 2];
    var $call32 = _getreal($5);
    var $conv33 = $call32;
    var $call32_1 = _getreal($5);
    var $conv33_1 = $call32_1;
    var $call32_2 = _getreal($5);
    var $conv33_2 = $call32_2;
    var $mul_sroa_0_1 = $conv33;
    var $mul_sroa_1_1 = $conv33_1;
    var $mul_sroa_2_1 = $conv33_2;
    label = 13;
    break;
   case 13:
    var $mul_sroa_2_1;
    var $mul_sroa_1_1;
    var $mul_sroa_0_1;
    var $add39 = $wbi_23 + 2140 | 0;
    var $cmp40 = ($0 | 0) == ($add39 | 0);
    var $cmp43 = ($wbi_23 | 0) > -1;
    var $or_cond = $cmp40 & $cmp43;
    if ($or_cond) {
      label = 26;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    if (($0 | 0) == 2317) {
      label = 15;
      break;
    } else if (($0 | 0) == 6020) {
      label = 16;
      break;
    } else if (($0 | 0) == 64013) {
      label = 17;
      break;
    } else {
      var $wbi_3 = $wbi_23;
      label = 18;
      break;
    }
   case 15:
    var $6 = HEAP32[$len >> 2];
    _linear_table($6);
    var $wbi_3 = $wbi_23;
    label = 18;
    break;
   case 16:
    var $7 = HEAP32[$type >> 2];
    var $call80 = _getint($7);
    var $conv81 = $call80 >>> 0;
    HEAPF32[5264096 >> 2] = $conv81;
    var $wbi_3 = $wbi_23;
    label = 18;
    break;
   case 17:
    var $8 = HEAP32[5264116 >> 2];
    var $call86 = _fgetc($8);
    var $wbi_3 = $call86;
    label = 18;
    break;
   case 18:
    var $wbi_3;
    var $cmp88 = $wbi_3 >>> 0 < 7;
    if ($cmp88) {
      label = 19;
      break;
    } else {
      label = 21;
      break;
    }
   case 19:
    var $arrayidx91 = 5246516 + ($wbi_3 << 2) | 0;
    var $9 = HEAP32[$arrayidx91 >> 2];
    var $cmp92 = ($0 | 0) == ($9 | 0);
    if ($cmp92) {
      label = 20;
      break;
    } else {
      label = 21;
      break;
    }
   case 20:
    var $call99 = _get4();
    var $conv100 = $call99 >>> 0;
    HEAPF32[5561124 >> 2] = $conv100;
    var $call99_1 = _get4();
    var $conv100_1 = $call99_1 >>> 0;
    HEAPF32[5561128 >> 2] = $conv100_1;
    var $call99_2 = _get4();
    var $conv100_2 = $call99_2 >>> 0;
    HEAPF32[5561132 >> 2] = $conv100_2;
    label = 21;
    break;
   case 21:
    if (($0 | 0) == 64019) {
      label = 22;
      break;
    } else if (($0 | 0) == 64020) {
      label = 23;
      break;
    } else {
      label = 24;
      break;
    }
   case 22:
    var $10 = HEAP32[$type >> 2];
    var $call109 = _getint($10);
    var $conv110 = $call109 & 65535;
    HEAP16[5242964 >> 1] = $conv110;
    label = 24;
    break;
   case 23:
    var $11 = HEAP32[$type >> 2];
    var $call115 = _getint($11);
    var $add116 = $call115 + 1 | 0;
    var $add116_tr = $add116 & 65535;
    var $conv117 = $add116_tr & -2;
    HEAP16[5398712 >> 1] = $conv117;
    label = 24;
    break;
   case 24:
    var $12 = HEAP32[5264116 >> 2];
    var $13 = HEAP32[$save >> 2];
    var $call119 = _fseek($12, $13, 0);
    var $tobool = ($dec34 | 0) == 0;
    if ($tobool) {
      label = 25;
      break;
    } else {
      var $wbi_032 = $wbi_3;
      var $wbtemp_033 = $wbtemp_1;
      var $dec34_in = $dec34;
      var $mul_sroa_0_0 = $mul_sroa_0_1;
      var $mul_sroa_1_0 = $mul_sroa_1_1;
      var $mul_sroa_2_0 = $mul_sroa_2_1;
      label = 4;
      break;
    }
   case 25:
    STACKTOP = __stackBase__;
    return;
   case 26:
    var $14 = HEAP32[$type >> 2];
    var $conv55 = $wbtemp_1 | 0;
    var $div56 = $conv55 / 100;
    var $call54 = _getreal($14);
    var $15 = Math.pow($div56, 0);
    var $mul58 = $call54 * $15;
    var $add60 = $mul58;
    var $conv61 = $add60;
    var $call54_1 = _getreal($14);
    var $16 = Math.pow($div56, 1);
    var $mul58_1 = $call54_1 * $16;
    var $conv59_1 = $conv61;
    var $add60_1 = $conv59_1 + $mul58_1;
    var $conv61_1 = $add60_1;
    var $call54_2 = _getreal($14);
    var $17 = Math.pow($div56, 2);
    var $mul58_2 = $call54_2 * $17;
    var $conv59_2 = $conv61_1;
    var $add60_2 = $conv59_2 + $mul58_2;
    var $conv61_2 = $add60_2;
    var $call54_3 = _getreal($14);
    var $18 = Math.pow($div56, 3);
    var $mul58_3 = $call54_3 * $18;
    var $conv59_3 = $conv61_2;
    var $add60_3 = $conv59_3 + $mul58_3;
    var $conv61_3 = $add60_3;
    var $mul66 = $conv61_3 * $mul_sroa_0_1;
    var $div67 = 2048 / $mul66;
    HEAPF32[5561124 >> 2] = $div67;
    var $call54_135 = _getreal($14);
    var $19 = Math.pow($div56, 0);
    var $mul58_136 = $call54_135 * $19;
    var $add60_137 = $mul58_136;
    var $conv61_138 = $add60_137;
    var $call54_1_1 = _getreal($14);
    var $20 = Math.pow($div56, 1);
    var $mul58_1_1 = $call54_1_1 * $20;
    var $conv59_1_1 = $conv61_138;
    var $add60_1_1 = $conv59_1_1 + $mul58_1_1;
    var $conv61_1_1 = $add60_1_1;
    var $call54_2_1 = _getreal($14);
    var $21 = Math.pow($div56, 2);
    var $mul58_2_1 = $call54_2_1 * $21;
    var $conv59_2_1 = $conv61_1_1;
    var $add60_2_1 = $conv59_2_1 + $mul58_2_1;
    var $conv61_2_1 = $add60_2_1;
    var $call54_3_1 = _getreal($14);
    var $22 = Math.pow($div56, 3);
    var $mul58_3_1 = $call54_3_1 * $22;
    var $conv59_3_1 = $conv61_2_1;
    var $add60_3_1 = $conv59_3_1 + $mul58_3_1;
    var $conv61_3_1 = $add60_3_1;
    var $mul66_1 = $conv61_3_1 * $mul_sroa_1_1;
    var $div67_1 = 2048 / $mul66_1;
    HEAPF32[5561128 >> 2] = $div67_1;
    var $call54_239 = _getreal($14);
    var $23 = Math.pow($div56, 0);
    var $mul58_240 = $call54_239 * $23;
    var $add60_241 = $mul58_240;
    var $conv61_242 = $add60_241;
    var $call54_1_2 = _getreal($14);
    var $24 = Math.pow($div56, 1);
    var $mul58_1_2 = $call54_1_2 * $24;
    var $conv59_1_2 = $conv61_242;
    var $add60_1_2 = $conv59_1_2 + $mul58_1_2;
    var $conv61_1_2 = $add60_1_2;
    var $call54_2_2 = _getreal($14);
    var $25 = Math.pow($div56, 2);
    var $mul58_2_2 = $call54_2_2 * $25;
    var $conv59_2_2 = $conv61_1_2;
    var $add60_2_2 = $conv59_2_2 + $mul58_2_2;
    var $conv61_2_2 = $add60_2_2;
    var $call54_3_2 = _getreal($14);
    var $26 = Math.pow($div56, 3);
    var $mul58_3_2 = $call54_3_2 * $26;
    var $conv59_3_2 = $conv61_2_2;
    var $add60_3_2 = $conv59_3_2 + $mul58_3_2;
    var $conv61_3_2 = $add60_3_2;
    var $mul66_2 = $conv61_3_2 * $mul_sroa_2_1;
    var $div67_2 = 2048 / $mul66_2;
    HEAPF32[5561132 >> 2] = $div67_2;
    label = 14;
    break;
  }
}
_parse_kodak_ifd["X"] = 1;
function _parse_tiff($base) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5264116 >> 2];
    var $call = _fseek($0, $base, 0);
    var $call1 = _get2();
    HEAP16[5262944 >> 1] = $call1;
    if ($call1 << 16 >> 16 == 18761 | $call1 << 16 >> 16 == 19789) {
      label = 3;
      break;
    } else {
      var $retval_0 = 0;
      label = 6;
      break;
    }
   case 3:
    var $call6 = _get2();
    label = 4;
    break;
   case 4:
    var $call7 = _get4();
    var $tobool = ($call7 | 0) == 0;
    if ($tobool) {
      var $retval_0 = 1;
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $1 = HEAP32[5264116 >> 2];
    var $add = $call7 + $base | 0;
    var $call8 = _fseek($1, $add, 0);
    var $call9 = _parse_tiff_ifd($base);
    var $tobool10 = ($call9 | 0) == 0;
    if ($tobool10) {
      label = 4;
      break;
    } else {
      var $retval_0 = 1;
      label = 6;
      break;
    }
   case 6:
    var $retval_0;
    return $retval_0;
  }
}
function _parse_minolta($base) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP16[5262944 >> 1];
    var $1 = HEAP32[5264116 >> 2];
    var $call = _fseek($1, $base, 0);
    var $2 = HEAP32[5264116 >> 2];
    var $call1 = _fgetc($2);
    var $tobool = ($call1 | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      label = 12;
      break;
    }
   case 3:
    var $3 = HEAP32[5264116 >> 2];
    var $call2 = _fgetc($3);
    var $tobool3 = ($call2 | 0) == 77;
    if ($tobool3) {
      label = 4;
      break;
    } else {
      label = 12;
      break;
    }
   case 4:
    var $4 = HEAP32[5264116 >> 2];
    var $call5 = _fgetc($4);
    var $tobool7 = ($call5 | 0) == 82;
    if ($tobool7) {
      label = 5;
      break;
    } else {
      label = 12;
      break;
    }
   case 5:
    var $5 = HEAP32[5264116 >> 2];
    var $call8 = _fgetc($5);
    var $mul = $call8 * 257 & -1;
    var $conv = $mul & 65535;
    HEAP16[5262944 >> 1] = $conv;
    var $call9 = _get4();
    var $add = $base + 8 | 0;
    var $add10 = $add + $call9 | 0;
    var $6 = HEAP32[5264116 >> 2];
    var $call1112 = _ftell($6);
    var $cmp14 = ($call1112 | 0) < ($add10 | 0);
    if ($cmp14) {
      var $high_015 = 0;
      var $wide_016 = 0;
      var $call1117 = $call1112;
      label = 6;
      break;
    } else {
      var $high_0_lcssa = 0;
      var $wide_0_lcssa = 0;
      label = 11;
      break;
    }
   case 6:
    var $call1117;
    var $wide_016;
    var $high_015;
    var $7 = HEAP32[5264116 >> 2];
    var $call15 = _fgetc($7);
    var $shl_1 = $call15 << 8;
    var $8 = HEAP32[5264116 >> 2];
    var $call15_1 = _fgetc($8);
    var $or_1 = $call15_1 | $shl_1;
    var $shl_2 = $or_1 << 8;
    var $9 = HEAP32[5264116 >> 2];
    var $call15_2 = _fgetc($9);
    var $or_2 = $call15_2 | $shl_2;
    var $shl_3 = $or_2 << 8;
    var $10 = HEAP32[5264116 >> 2];
    var $call15_3 = _fgetc($10);
    var $or_3 = $call15_3 | $shl_3;
    var $call16 = _get4();
    if (($or_3 | 0) == 5263940) {
      label = 7;
      break;
    } else if (($or_3 | 0) == 5718599) {
      label = 8;
      break;
    } else if (($or_3 | 0) == 5526615) {
      label = 9;
      break;
    } else {
      var $wide_1 = $wide_016;
      var $high_1 = $high_015;
      label = 10;
      break;
    }
   case 7:
    var $11 = HEAP32[5264116 >> 2];
    var $call17 = _fseek($11, 8, 1);
    var $call18 = _get2();
    var $conv19 = $call18 & 65535;
    var $call20 = _get2();
    var $conv21 = $call20 & 65535;
    var $wide_1 = $conv21;
    var $high_1 = $conv19;
    label = 10;
    break;
   case 8:
    var $call23 = _get4();
    var $call24 = _strcmp(5263372, 5586576);
    var $tobool25 = ($call24 | 0) != 0;
    var $cond = $tobool25 ? 0 : 3;
    var $call30 = _get2();
    var $conv31 = $call30 & 65535;
    var $arrayidx = 5561124 + ($cond << 2) | 0;
    HEAPF32[$arrayidx >> 2] = $conv31;
    var $call30_1 = _get2();
    var $conv31_1 = $call30_1 & 65535;
    var $xor_1 = $cond ^ 1;
    var $arrayidx_1 = 5561124 + ($xor_1 << 2) | 0;
    HEAPF32[$arrayidx_1 >> 2] = $conv31_1;
    var $call30_2 = _get2();
    var $conv31_2 = $call30_2 & 65535;
    var $xor32_2 = $cond ^ 3;
    var $arrayidx_2 = 5561124 + ($xor32_2 << 2) | 0;
    HEAPF32[$arrayidx_2 >> 2] = $conv31_2;
    var $call30_3 = _get2();
    var $conv31_3 = $call30_3 & 65535;
    var $xor32_3 = $cond ^ 2;
    var $arrayidx_3 = 5561124 + ($xor32_3 << 2) | 0;
    HEAPF32[$arrayidx_3 >> 2] = $conv31_3;
    var $wide_1 = $wide_016;
    var $high_1 = $high_015;
    label = 10;
    break;
   case 9:
    var $12 = HEAP32[5264116 >> 2];
    var $call37 = _ftell($12);
    var $call38 = _parse_tiff($call37);
    HEAP32[5428492 >> 2] = $add10;
    var $wide_1 = $wide_016;
    var $high_1 = $high_015;
    label = 10;
    break;
   case 10:
    var $high_1;
    var $wide_1;
    var $13 = HEAP32[5264116 >> 2];
    var $add39 = $call1117 + 8 | 0;
    var $add40 = $add39 + $call16 | 0;
    var $call41 = _fseek($13, $add40, 0);
    var $14 = HEAP32[5264116 >> 2];
    var $call11 = _ftell($14);
    var $cmp = ($call11 | 0) < ($add10 | 0);
    if ($cmp) {
      var $high_015 = $high_1;
      var $wide_016 = $wide_1;
      var $call1117 = $call11;
      label = 6;
      break;
    } else {
      var $high_0_lcssa = $high_1;
      var $wide_0_lcssa = $wide_1;
      label = 11;
      break;
    }
   case 11:
    var $wide_0_lcssa;
    var $high_0_lcssa;
    var $conv42 = $high_0_lcssa & 65535;
    HEAP16[5245036 >> 1] = $conv42;
    var $conv43 = $wide_0_lcssa & 65535;
    HEAP16[5245028 >> 1] = $conv43;
    HEAP16[5262944 >> 1] = $0;
    label = 12;
    break;
   case 12:
    return;
  }
}
_parse_minolta["X"] = 1;
function _apply_tiff() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 96 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $jh = __stackBase__;
    HEAP32[5244048 >> 2] = 16;
    var $0 = HEAP32[5244044 >> 2];
    var $tobool = ($0 | 0) == 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $1 = HEAP32[5264116 >> 2];
    var $call = _fseek($1, $0, 0);
    var $call1 = _ljpeg_start($jh, 1);
    var $tobool2 = ($call1 | 0) == 0;
    if ($tobool2) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $bits = $jh | 0;
    var $2 = HEAP32[$bits >> 2];
    HEAP32[5244048 >> 2] = $2;
    var $wide = $jh + 8 | 0;
    var $3 = HEAP32[$wide >> 2];
    var $conv = $3 & 65535;
    HEAP16[5244040 >> 1] = $conv;
    var $high = $jh + 4 | 0;
    var $4 = HEAP32[$high >> 2];
    var $conv4 = $4 & 65535;
    HEAP16[5244060 >> 1] = $conv4;
    label = 5;
    break;
   case 5:
    var $5 = HEAP32[5243584 >> 2];
    var $cmp65 = ($5 | 0) == 0;
    if ($cmp65) {
      var $max_samp_0_lcssa = 0;
      var $raw_0_lcssa = -1;
      var $17 = 0;
      label = 11;
      break;
    } else {
      var $max_samp_066 = 0;
      var $raw_067 = -1;
      var $i_068 = 0;
      label = 6;
      break;
    }
   case 6:
    var $i_068;
    var $raw_067;
    var $max_samp_066;
    var $samples = 5243616 + $i_068 * 44 | 0;
    var $6 = HEAP32[$samples >> 2];
    var $cmp7 = ($max_samp_066 | 0) < ($6 | 0);
    var $_max_samp_0 = $cmp7 ? $6 : $max_samp_066;
    var $cmp13 = ($_max_samp_0 | 0) > 3;
    var $max_samp_2 = $cmp13 ? 3 : $_max_samp_0;
    var $comp = 5243600 + $i_068 * 44 | 0;
    var $7 = HEAP32[$comp >> 2];
    var $cmp18 = ($7 | 0) == 6;
    var $cmp22 = ($6 | 0) == 3;
    var $or_cond57 = $cmp18 & $cmp22;
    if ($or_cond57) {
      var $raw_1 = $raw_067;
      label = 10;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $width = 5243588 + $i_068 * 44 | 0;
    var $8 = HEAP32[$width >> 2];
    var $height = 5243592 + $i_068 * 44 | 0;
    var $9 = HEAP32[$height >> 2];
    var $or = $9 | $8;
    var $cmp26 = ($or | 0) < 65536;
    if ($cmp26) {
      label = 8;
      break;
    } else {
      var $raw_1 = $raw_067;
      label = 10;
      break;
    }
   case 8:
    var $mul = $9 * $8 & -1;
    var $10 = HEAP16[5245028 >> 1];
    var $conv33 = $10 & 65535;
    var $11 = HEAP16[5245036 >> 1];
    var $conv34 = $11 & 65535;
    var $mul35 = $conv34 * $conv33 & -1;
    var $cmp36 = ($mul | 0) > ($mul35 | 0);
    if ($cmp36) {
      label = 9;
      break;
    } else {
      var $raw_1 = $raw_067;
      label = 10;
      break;
    }
   case 9:
    var $conv41 = $8 & 65535;
    HEAP16[5245028 >> 1] = $conv41;
    var $conv44 = $9 & 65535;
    HEAP16[5245036 >> 1] = $conv44;
    var $bps = 5243596 + $i_068 * 44 | 0;
    var $12 = HEAP32[$bps >> 2];
    HEAP32[5244036 >> 2] = $12;
    HEAP32[5244032 >> 2] = $7;
    var $offset = 5243608 + $i_068 * 44 | 0;
    var $13 = HEAP32[$offset >> 2];
    HEAP32[5428492 >> 2] = $13;
    var $flip = 5243612 + $i_068 * 44 | 0;
    var $14 = HEAP32[$flip >> 2];
    HEAP32[5244028 >> 2] = $14;
    HEAP32[5243580 >> 2] = $6;
    var $tile_width = 5243624 + $i_068 * 44 | 0;
    var $15 = HEAP32[$tile_width >> 2];
    HEAP32[5243572 >> 2] = $15;
    var $tile_length = 5243628 + $i_068 * 44 | 0;
    var $16 = HEAP32[$tile_length >> 2];
    HEAP32[5243576 >> 2] = $16;
    var $raw_1 = $i_068;
    label = 10;
    break;
   case 10:
    var $raw_1;
    var $inc = $i_068 + 1 | 0;
    var $cmp = $inc >>> 0 < $5 >>> 0;
    if ($cmp) {
      var $max_samp_066 = $max_samp_2;
      var $raw_067 = $raw_1;
      var $i_068 = $inc;
      label = 6;
      break;
    } else {
      var $max_samp_0_lcssa = $max_samp_2;
      var $raw_0_lcssa = $raw_1;
      var $17 = $5;
      label = 11;
      break;
    }
   case 11:
    var $17;
    var $raw_0_lcssa;
    var $max_samp_0_lcssa;
    var $18 = HEAP32[5243572 >> 2];
    var $tobool55 = ($18 | 0) == 0;
    if ($tobool55) {
      label = 12;
      break;
    } else {
      label = 13;
      break;
    }
   case 12:
    HEAP32[5243572 >> 2] = 2147483647;
    label = 13;
    break;
   case 13:
    var $19 = HEAP32[5243576 >> 2];
    var $tobool58 = ($19 | 0) == 0;
    if ($tobool58) {
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 14:
    HEAP32[5243576 >> 2] = 2147483647;
    label = 15;
    break;
   case 15:
    var $tobool6262 = ($17 | 0) == 0;
    if ($tobool6262) {
      label = 19;
      break;
    } else {
      var $dec63_in = $17;
      label = 16;
      break;
    }
   case 16:
    var $dec63_in;
    var $dec63 = $dec63_in - 1 | 0;
    var $flip65 = 5243612 + $dec63 * 44 | 0;
    var $20 = HEAP32[$flip65 >> 2];
    var $tobool66 = ($20 | 0) == 0;
    if ($tobool66) {
      label = 18;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    HEAP32[5244028 >> 2] = $20;
    label = 18;
    break;
   case 18:
    var $tobool62 = ($dec63 | 0) == 0;
    if ($tobool62) {
      label = 19;
      break;
    } else {
      var $dec63_in = $dec63;
      label = 16;
      break;
    }
   case 19:
    var $cmp72 = ($raw_0_lcssa | 0) < 0;
    var $21 = HEAP32[5263692 >> 2];
    var $tobool75 = ($21 | 0) != 0;
    var $or_cond = $cmp72 | $tobool75;
    if ($or_cond) {
      label = 51;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    var $22 = HEAP32[5244032 >> 2];
    if (($22 | 0) == 32769) {
      label = 21;
      break;
    } else if (($22 | 0) == 32767) {
      label = 22;
      break;
    } else if (($22 | 0) == 0 | ($22 | 0) == 1) {
      label = 28;
      break;
    } else if (($22 | 0) == 32770 | ($22 | 0) == 32773) {
      label = 30;
      break;
    } else if (($22 | 0) == 6 | ($22 | 0) == 7 | ($22 | 0) == 99) {
      label = 37;
      break;
    } else if (($22 | 0) == 262) {
      label = 38;
      break;
    } else if (($22 | 0) == 34713) {
      label = 39;
      break;
    } else if (($22 | 0) == 34892) {
      label = 44;
      break;
    } else if (($22 | 0) == 65535) {
      label = 45;
      break;
    } else if (($22 | 0) == 65e3) {
      label = 46;
      break;
    } else if (($22 | 0) == 32867) {
      label = 51;
      break;
    } else {
      label = 50;
      break;
    }
   case 21:
    var $_pre1 = HEAP32[5263696 >> 2];
    var $phitmp = $_pre1 + 1 | 0;
    var $27 = $phitmp;
    label = 27;
    break;
   case 22:
    var $bytes = 5243620 + $raw_0_lcssa * 44 | 0;
    var $23 = HEAP32[$bytes >> 2];
    var $24 = HEAP16[5245028 >> 1];
    var $conv78 = $24 & 65535;
    var $25 = HEAP16[5245036 >> 1];
    var $conv79 = $25 & 65535;
    var $mul80 = $conv79 * $conv78 & -1;
    var $cmp81 = ($23 | 0) == ($mul80 | 0);
    if ($cmp81) {
      label = 23;
      break;
    } else {
      label = 24;
      break;
    }
   case 23:
    HEAP32[5244036 >> 2] = 12;
    HEAP32[5263692 >> 2] = 38;
    label = 51;
    break;
   case 24:
    var $mul87 = $23 << 3;
    var $26 = HEAP32[5244036 >> 2];
    var $mul91 = $26 * $mul80 & -1;
    var $cmp92 = ($mul87 | 0) == ($mul91 | 0);
    if ($cmp92) {
      label = 26;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    var $add = $25 + 8 & 65535;
    HEAP16[5245036 >> 1] = $add;
    HEAP32[5263692 >> 2] = 24;
    label = 51;
    break;
   case 26:
    HEAP32[5263696 >> 2] = 79;
    var $27 = 80;
    label = 27;
    break;
   case 27:
    var $27;
    HEAP32[5263696 >> 2] = $27;
    label = 30;
    break;
   case 28:
    var $bytes103 = 5243620 + $raw_0_lcssa * 44 | 0;
    var $28 = HEAP32[$bytes103 >> 2];
    var $mul104 = $28 * 5 & -1;
    var $29 = HEAP16[5245028 >> 1];
    var $conv105 = $29 & 65535;
    var $30 = HEAP16[5245036 >> 1];
    var $conv106 = $30 & 65535;
    var $mul107 = $conv105 << 3;
    var $mul108 = $mul107 * $conv106 & -1;
    var $cmp109 = ($mul104 | 0) == ($mul108 | 0);
    if ($cmp109) {
      label = 29;
      break;
    } else {
      label = 30;
      break;
    }
   case 29:
    HEAP32[5263696 >> 2] = 81;
    HEAP32[5244036 >> 2] = 12;
    label = 32;
    break;
   case 30:
    var $_pr = HEAP32[5244036 >> 2];
    if (($_pr | 0) == 8) {
      label = 31;
      break;
    } else if (($_pr | 0) == 12) {
      label = 32;
      break;
    } else if (($_pr | 0) == 14) {
      label = 35;
      break;
    } else if (($_pr | 0) == 16) {
      label = 36;
      break;
    } else {
      label = 51;
      break;
    }
   case 31:
    HEAP32[5263692 >> 2] = 82;
    label = 51;
    break;
   case 32:
    var $phint = 5243604 + $raw_0_lcssa * 44 | 0;
    var $31 = HEAP32[$phint >> 2];
    var $cmp116 = ($31 | 0) == 2;
    if ($cmp116) {
      label = 33;
      break;
    } else {
      label = 34;
      break;
    }
   case 33:
    HEAP32[5263696 >> 2] = 6;
    label = 34;
    break;
   case 34:
    HEAP32[5263692 >> 2] = 36;
    label = 51;
    break;
   case 35:
    HEAP32[5263696 >> 2] = 0;
    label = 36;
    break;
   case 36:
    HEAP32[5263692 >> 2] = 4;
    label = 51;
    break;
   case 37:
    HEAP32[5263692 >> 2] = 46;
    label = 51;
    break;
   case 38:
    HEAP32[5263692 >> 2] = 34;
    label = 51;
    break;
   case 39:
    var $32 = HEAP16[5245028 >> 1];
    var $conv125 = $32 & 65535;
    var $add126 = $conv125 + 9 | 0;
    var $div = Math.floor(($add126 >>> 0) / 10);
    var $mul127 = $div << 4;
    var $33 = HEAP16[5245036 >> 1];
    var $conv128 = $33 & 65535;
    var $mul129 = $mul127 * $conv128 & -1;
    var $bytes131 = 5243620 + $raw_0_lcssa * 44 | 0;
    var $34 = HEAP32[$bytes131 >> 2];
    var $cmp132 = ($mul129 | 0) == ($34 | 0);
    if ($cmp132) {
      label = 40;
      break;
    } else {
      label = 41;
      break;
    }
   case 40:
    HEAP32[5263692 >> 2] = 36;
    HEAP32[5263696 >> 2] = 1;
    label = 51;
    break;
   case 41:
    var $mul137 = $conv125 << 1;
    var $mul138 = $mul137 * $conv128 & -1;
    var $cmp141 = ($mul138 | 0) == ($34 | 0);
    if ($cmp141) {
      label = 42;
      break;
    } else {
      label = 43;
      break;
    }
   case 42:
    HEAP32[5263692 >> 2] = 4;
    HEAP32[5263696 >> 2] = 4;
    HEAP16[5262944 >> 1] = 19789;
    label = 51;
    break;
   case 43:
    HEAP32[5263692 >> 2] = 16;
    label = 51;
    break;
   case 44:
    HEAP32[5263692 >> 2] = 94;
    label = 51;
    break;
   case 45:
    HEAP32[5263692 >> 2] = 88;
    label = 51;
    break;
   case 46:
    var $phint151 = 5243604 + $raw_0_lcssa * 44 | 0;
    var $35 = HEAP32[$phint151 >> 2];
    if (($35 | 0) == 2) {
      label = 47;
      break;
    } else if (($35 | 0) == 6) {
      label = 48;
      break;
    } else if (($35 | 0) == 32803) {
      label = 49;
      break;
    } else {
      label = 51;
      break;
    }
   case 47:
    HEAP32[5263692 >> 2] = 90;
    HEAP32[5427632 >> 2] = 0;
    label = 51;
    break;
   case 48:
    HEAP32[5263692 >> 2] = 8;
    HEAP32[5427632 >> 2] = 0;
    label = 51;
    break;
   case 49:
    HEAP32[5263692 >> 2] = 54;
    label = 51;
    break;
   case 50:
    HEAP32[5264100 >> 2] = 0;
    label = 51;
    break;
   case 51:
    var $36 = HEAP32[5427976 >> 2];
    var $tobool159 = ($36 | 0) == 0;
    if ($tobool159) {
      label = 52;
      break;
    } else {
      label = 60;
      break;
    }
   case 52:
    var $37 = HEAP32[5243580 >> 2];
    var $cmp161 = ($37 | 0) == 3;
    if ($cmp161) {
      label = 54;
      break;
    } else {
      label = 53;
      break;
    }
   case 53:
    var $_pre = HEAP32[5244036 >> 2];
    var $41 = $_pre;
    label = 55;
    break;
   case 54:
    var $bytes165 = 5243620 + $raw_0_lcssa * 44 | 0;
    var $38 = HEAP32[$bytes165 >> 2];
    var $tobool166 = ($38 | 0) != 0;
    var $39 = HEAP32[5244036 >> 2];
    var $cmp168 = ($39 | 0) != 14;
    var $or_cond1 = $tobool166 & $cmp168;
    var $cmp171 = ($39 | 0) != 2048;
    var $or_cond2 = $or_cond1 & $cmp171;
    var $40 = HEAP32[5244032 >> 2];
    var $cmp174 = ($40 | 0) != 32769;
    var $or_cond3 = $or_cond2 & $cmp174;
    var $cmp177 = ($40 | 0) != 32770;
    var $or_cond4 = $or_cond3 & $cmp177;
    if ($or_cond4) {
      label = 59;
      break;
    } else {
      var $41 = $39;
      label = 55;
      break;
    }
   case 55:
    var $41;
    var $cmp180 = ($41 | 0) == 8;
    if ($cmp180) {
      label = 56;
      break;
    } else {
      label = 60;
      break;
    }
   case 56:
    var $call183 = _strstr(5263628, 5586632);
    var $tobool184 = ($call183 | 0) == 0;
    if ($tobool184) {
      label = 57;
      break;
    } else {
      label = 60;
      break;
    }
   case 57:
    var $call186 = _strstr(5263628, 5586624);
    var $tobool187 = ($call186 | 0) == 0;
    if ($tobool187) {
      label = 58;
      break;
    } else {
      label = 60;
      break;
    }
   case 58:
    var $call189 = _strstr(5263308, 5586612);
    var $tobool190 = ($call189 | 0) == 0;
    if ($tobool190) {
      label = 59;
      break;
    } else {
      label = 60;
      break;
    }
   case 59:
    HEAP32[5264100 >> 2] = 0;
    label = 60;
    break;
   case 60:
    if ($tobool6262) {
      label = 76;
      break;
    } else {
      var $thm_059 = -1;
      var $i_260 = 0;
      label = 61;
      break;
    }
   case 61:
    var $i_260;
    var $thm_059;
    var $cmp198 = ($i_260 | 0) == ($raw_0_lcssa | 0);
    if ($cmp198) {
      var $thm_1 = $thm_059;
      label = 66;
      break;
    } else {
      label = 62;
      break;
    }
   case 62:
    var $samples202 = 5243616 + $i_260 * 44 | 0;
    var $42 = HEAP32[$samples202 >> 2];
    var $cmp203 = ($42 | 0) == ($max_samp_0_lcssa | 0);
    if ($cmp203) {
      label = 63;
      break;
    } else {
      var $thm_1 = $thm_059;
      label = 66;
      break;
    }
   case 63:
    var $width207 = 5243588 + $i_260 * 44 | 0;
    var $43 = HEAP32[$width207 >> 2];
    var $height209 = 5243592 + $i_260 * 44 | 0;
    var $44 = HEAP32[$height209 >> 2];
    var $mul210 = $44 * $43 & -1;
    var $bps212 = 5243596 + $i_260 * 44 | 0;
    var $45 = HEAP32[$bps212 >> 2];
    var $add213 = $45 + 1 | 0;
    var $mul217 = $add213 * $add213 & -1;
    var $div218 = ($mul210 | 0) / ($mul217 | 0) & -1;
    var $46 = HEAP16[5244040 >> 1];
    var $conv219 = $46 & 65535;
    var $47 = HEAP16[5244060 >> 1];
    var $conv220 = $47 & 65535;
    var $mul221 = $conv220 * $conv219 & -1;
    var $48 = HEAP32[5244048 >> 2];
    var $add222 = $48 + 1 | 0;
    var $mul224 = $add222 * $add222 & -1;
    var $div225 = Math.floor(($mul221 >>> 0) / ($mul224 >>> 0));
    var $cmp226 = $div218 >>> 0 > $div225 >>> 0;
    if ($cmp226) {
      label = 64;
      break;
    } else {
      var $thm_1 = $thm_059;
      label = 66;
      break;
    }
   case 64:
    var $comp230 = 5243600 + $i_260 * 44 | 0;
    var $49 = HEAP32[$comp230 >> 2];
    var $cmp231 = ($49 | 0) == 34892;
    if ($cmp231) {
      var $thm_1 = $thm_059;
      label = 66;
      break;
    } else {
      label = 65;
      break;
    }
   case 65:
    var $conv236 = $43 & 65535;
    HEAP16[5244040 >> 1] = $conv236;
    var $conv239 = $44 & 65535;
    HEAP16[5244060 >> 1] = $conv239;
    var $offset241 = 5243608 + $i_260 * 44 | 0;
    var $50 = HEAP32[$offset241 >> 2];
    HEAP32[5244044 >> 2] = $50;
    var $bytes243 = 5243620 + $i_260 * 44 | 0;
    var $51 = HEAP32[$bytes243 >> 2];
    HEAP32[5244056 >> 2] = $51;
    HEAP32[5244048 >> 2] = $45;
    var $thm_1 = $i_260;
    label = 66;
    break;
   case 66:
    var $thm_1;
    var $inc248 = $i_260 + 1 | 0;
    var $cmp195 = $inc248 >>> 0 < $17 >>> 0;
    if ($cmp195) {
      var $thm_059 = $thm_1;
      var $i_260 = $inc248;
      label = 61;
      break;
    } else {
      label = 67;
      break;
    }
   case 67:
    var $cmp250 = ($thm_1 | 0) > -1;
    if ($cmp250) {
      label = 68;
      break;
    } else {
      label = 76;
      break;
    }
   case 68:
    var $samples254 = 5243616 + $thm_1 * 44 | 0;
    var $52 = HEAP32[$samples254 >> 2];
    var $shl = $52 << 5;
    var $53 = HEAP32[5244048 >> 2];
    var $or255 = $53 | $shl;
    HEAP32[5244048 >> 2] = $or255;
    var $comp257 = 5243600 + $thm_1 * 44 | 0;
    var $54 = HEAP32[$comp257 >> 2];
    if (($54 | 0) == 0) {
      label = 69;
      break;
    } else if (($54 | 0) == 1) {
      label = 70;
      break;
    } else if (($54 | 0) == 65e3) {
      label = 75;
      break;
    } else {
      label = 76;
      break;
    }
   case 69:
    HEAP32[5242960 >> 2] = 50;
    label = 76;
    break;
   case 70:
    var $bps261 = 5243596 + $thm_1 * 44 | 0;
    var $55 = HEAP32[$bps261 >> 2];
    var $cmp262 = ($55 | 0) < 9;
    if ($cmp262) {
      label = 71;
      break;
    } else {
      label = 72;
      break;
    }
   case 71:
    HEAP32[5242960 >> 2] = 68;
    label = 76;
    break;
   case 72:
    var $call266 = _strcmp(5263628, 5586692);
    var $tobool267 = ($call266 | 0) == 0;
    if ($tobool267) {
      label = 73;
      break;
    } else {
      label = 74;
      break;
    }
   case 73:
    HEAP32[5242960 >> 2] = 78;
    label = 76;
    break;
   case 74:
    HEAP32[5244052 >> 2] = 28;
    label = 76;
    break;
   case 75:
    var $phint274 = 5243604 + $thm_1 * 44 | 0;
    var $56 = HEAP32[$phint274 >> 2];
    var $cmp275 = ($56 | 0) == 6;
    var $cond = $cmp275 ? 8 : 90;
    HEAP32[5244052 >> 2] = $cond;
    label = 76;
    break;
   case 76:
    STACKTOP = __stackBase__;
    return;
  }
}
_apply_tiff["X"] = 1;
function _parse_external_jpeg() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5264116 >> 2];
    var $1 = HEAP32[5264120 >> 2];
    var $call = _strrchr($1, 46);
    var $call1 = _strrchr($1, 47);
    var $tobool = ($call1 | 0) == 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      var $file_1 = $call1;
      label = 4;
      break;
    }
   case 3:
    var $call2 = _strrchr($1, 92);
    var $tobool3 = ($call2 | 0) == 0;
    var $add_ptr = $1 - 1 | 0;
    var $add_ptr_call2 = $tobool3 ? $add_ptr : $call2;
    var $file_1 = $add_ptr_call2;
    label = 4;
    break;
   case 4:
    var $file_1;
    var $incdec_ptr = $file_1 + 1 | 0;
    var $tobool6 = ($call | 0) == 0;
    if ($tobool6) {
      label = 22;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $call7 = _strlen($call);
    var $cmp = ($call7 | 0) == 4;
    if ($cmp) {
      label = 6;
      break;
    } else {
      label = 22;
      break;
    }
   case 6:
    var $sub_ptr_lhs_cast = $call;
    var $sub_ptr_rhs_cast = $incdec_ptr;
    var $sub_ptr_sub = $sub_ptr_lhs_cast - $sub_ptr_rhs_cast | 0;
    var $cmp9 = ($sub_ptr_sub | 0) == 8;
    if ($cmp9) {
      label = 7;
      break;
    } else {
      label = 22;
      break;
    }
   case 7:
    var $call12 = _strlen($1);
    var $add = $call12 + 1 | 0;
    var $call13 = _malloc($add);
    _merror($call13, 5586552);
    var $2 = HEAP32[5264120 >> 2];
    var $call14 = _strcpy($call13, $2);
    var $3 = HEAP32[5264120 >> 2];
    var $sub_ptr_rhs_cast16 = $3;
    var $sub_ptr_sub17 = $sub_ptr_rhs_cast - $sub_ptr_rhs_cast16 | 0;
    var $add_ptr18 = $call13 + $sub_ptr_sub17 | 0;
    var $sub_ptr_sub21 = $sub_ptr_lhs_cast - $sub_ptr_rhs_cast16 | 0;
    var $call23 = _strcasecmp($call, 5586544);
    var $tobool24 = ($call23 | 0) == 0;
    if ($tobool24) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    var $add_ptr22_sum = $sub_ptr_sub21 - 1 | 0;
    var $incdec_ptr3629 = $call13 + $add_ptr22_sum | 0;
    var $4 = HEAP8[$incdec_ptr3629];
    var $conv3730 = $4 << 24 >> 24;
    var $isdigittmp2531 = $conv3730 - 48 | 0;
    var $isdigit2632 = $isdigittmp2531 >>> 0 < 10;
    if ($isdigit2632) {
      var $incdec_ptr3633 = $incdec_ptr3629;
      var $13 = $4;
      label = 11;
      break;
    } else {
      label = 14;
      break;
    }
   case 9:
    var $add_ptr22 = $call13 + $sub_ptr_sub21 | 0;
    var $arrayidx = $call + 1 | 0;
    var $5 = HEAP8[$arrayidx];
    var $conv = $5 << 24 >> 24;
    var $call26 = _isupper($conv);
    var $tobool27 = ($call26 | 0) != 0;
    var $cond = $tobool27 ? 5586536 : 5586544;
    HEAP8[$add_ptr22] = HEAP8[$cond];
    HEAP8[$add_ptr22 + 1] = HEAP8[$cond + 1];
    HEAP8[$add_ptr22 + 2] = HEAP8[$cond + 2];
    HEAP8[$add_ptr22 + 3] = HEAP8[$cond + 3];
    HEAP8[$add_ptr22 + 4] = HEAP8[$cond + 4];
    var $6 = HEAP8[$incdec_ptr];
    var $conv29 = $6 << 24 >> 24;
    var $isdigittmp = $conv29 - 48 | 0;
    var $isdigit = $isdigittmp >>> 0 < 10;
    if ($isdigit) {
      label = 10;
      break;
    } else {
      label = 14;
      break;
    }
   case 10:
    var $add_ptr33 = $file_1 + 5 | 0;
    var $7 = $add_ptr33;
    var $8 = $add_ptr18;
    var $9 = HEAPU8[$7] | HEAPU8[$7 + 1] << 8 | HEAPU8[$7 + 2] << 16 | HEAPU8[$7 + 3] << 24 | 0;
    tempBigInt = $9;
    HEAP8[$8] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$8 + 1] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$8 + 2] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$8 + 3] = tempBigInt & 255;
    var $add_ptr18_sum = $sub_ptr_sub17 + 4 | 0;
    var $add_ptr34 = $call13 + $add_ptr18_sum | 0;
    var $10 = $incdec_ptr;
    var $11 = $add_ptr34;
    var $12 = HEAPU8[$10] | HEAPU8[$10 + 1] << 8 | HEAPU8[$10 + 2] << 16 | HEAPU8[$10 + 3] << 24 | 0;
    tempBigInt = $12;
    HEAP8[$11] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$11 + 1] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$11 + 2] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$11 + 3] = tempBigInt & 255;
    label = 14;
    break;
   case 11:
    var $13;
    var $incdec_ptr3633;
    var $cmp41 = $13 << 24 >> 24 == 57;
    if ($cmp41) {
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $inc = $13 + 1 & 255;
    HEAP8[$incdec_ptr3633] = $inc;
    label = 14;
    break;
   case 13:
    HEAP8[$incdec_ptr3633] = 48;
    var $incdec_ptr36 = $incdec_ptr3633 - 1 | 0;
    var $14 = HEAP8[$incdec_ptr36];
    var $conv37 = $14 << 24 >> 24;
    var $isdigittmp25 = $conv37 - 48 | 0;
    var $isdigit26 = $isdigittmp25 >>> 0 < 10;
    if ($isdigit26) {
      var $incdec_ptr3633 = $incdec_ptr36;
      var $13 = $14;
      label = 11;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $15 = HEAP32[5264120 >> 2];
    var $call46 = _strcmp($call13, $15);
    var $tobool47 = ($call46 | 0) == 0;
    if ($tobool47) {
      label = 19;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $call49 = _fopen($call13, 5579008);
    HEAP32[5264116 >> 2] = $call49;
    var $tobool50 = ($call49 | 0) == 0;
    if ($tobool50) {
      label = 19;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $_b = HEAP8[5243532];
    if ($_b) {
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 17:
    var $16 = HEAP32[_stderr >> 2];
    var $call54 = _fprintf($16, 5586504, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $call13, tempInt));
    label = 18;
    break;
   case 18:
    var $call56 = _parse_tiff(12);
    HEAP32[5244044 >> 2] = 0;
    HEAP32[5264100 >> 2] = 1;
    var $17 = HEAP32[5264116 >> 2];
    var $call57 = _fclose($17);
    label = 19;
    break;
   case 19:
    var $18 = HEAP32[5243568 >> 2];
    var $tobool60 = ($18 | 0) == 0;
    if ($tobool60) {
      label = 20;
      break;
    } else {
      label = 21;
      break;
    }
   case 20:
    var $19 = HEAP32[_stderr >> 2];
    var $call62 = _fprintf($19, 5586468, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $call13, tempInt));
    label = 21;
    break;
   case 21:
    _free($call13);
    HEAP32[5264116 >> 2] = $0;
    label = 22;
    break;
   case 22:
    STACKTOP = __stackBase__;
    return;
  }
}
_parse_external_jpeg["X"] = 1;
function _ciff_block_1030() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $call = _get2();
    var $call1 = _get4();
    var $cmp = ($call1 | 0) == 524296;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 11;
      break;
    }
   case 3:
    var $call2 = _get4();
    var $tobool = ($call2 | 0) == 0;
    if ($tobool) {
      label = 11;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $call3 = _get2();
    var $conv = $call3 & 65535;
    if ($call3 << 16 >> 16 == 12 | $call3 << 16 >> 16 == 10) {
      label = 5;
      break;
    } else {
      label = 11;
      break;
    }
   case 5:
    var $sub24 = 32 - $conv | 0;
    var $i_018 = 0;
    var $row_019 = 0;
    var $vbits_020 = 0;
    var $bitbuf_021 = 0;
    label = 6;
    break;
   case 6:
    var $bitbuf_021;
    var $vbits_020;
    var $row_019;
    var $i_018;
    var $i_114 = $i_018;
    var $col_015 = 0;
    var $vbits_116 = $vbits_020;
    var $bitbuf_117 = $bitbuf_021;
    label = 7;
    break;
   case 7:
    var $bitbuf_117;
    var $vbits_116;
    var $col_015;
    var $i_114;
    var $cmp16 = ($vbits_116 | 0) < ($conv | 0);
    if ($cmp16) {
      label = 8;
      break;
    } else {
      var $bitbuf_2 = $bitbuf_117;
      var $vbits_2 = $vbits_116;
      var $i_2 = $i_114;
      label = 9;
      break;
    }
   case 8:
    var $shl = $bitbuf_117 << 16;
    var $call19 = _get2();
    var $inc = $i_114 + 1 | 0;
    var $and = $i_114 & 1;
    var $arrayidx = 5560892 + ($and << 1) | 0;
    var $0 = HEAP16[$arrayidx >> 1];
    var $xor13 = $0 ^ $call19;
    var $xor = $xor13 & 65535;
    var $or = $xor | $shl;
    var $add = $vbits_116 + 16 | 0;
    var $bitbuf_2 = $or;
    var $vbits_2 = $add;
    var $i_2 = $inc;
    label = 9;
    break;
   case 9:
    var $i_2;
    var $vbits_2;
    var $bitbuf_2;
    var $sub = 32 - $vbits_2 | 0;
    var $shl23 = $bitbuf_2 << $sub;
    var $shr = $shl23 >>> ($sub24 >>> 0);
    var $conv25 = $shr & 65535;
    var $arrayidx27 = 5242968 + ($row_019 << 4) + ($col_015 << 1) | 0;
    HEAP16[$arrayidx27 >> 1] = $conv25;
    var $sub28 = $vbits_2 - $conv | 0;
    var $inc29 = $col_015 + 1 | 0;
    var $exitcond = ($inc29 | 0) == 8;
    if ($exitcond) {
      label = 10;
      break;
    } else {
      var $i_114 = $i_2;
      var $col_015 = $inc29;
      var $vbits_116 = $sub28;
      var $bitbuf_117 = $bitbuf_2;
      label = 7;
      break;
    }
   case 10:
    var $inc31 = $row_019 + 1 | 0;
    var $exitcond22 = ($inc31 | 0) == 8;
    if ($exitcond22) {
      label = 11;
      break;
    } else {
      var $i_018 = $i_2;
      var $row_019 = $inc31;
      var $vbits_020 = $sub28;
      var $bitbuf_021 = $bitbuf_2;
      label = 6;
      break;
    }
   case 11:
    return;
  }
}
_ciff_block_1030["X"] = 1;
function _parse_ciff($offset, $length) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5264116 >> 2];
    var $add = $offset - 4 | 0;
    var $sub = $add + $length | 0;
    var $call = _fseek($0, $sub, 0);
    var $call1 = _get4();
    var $add2 = $call1 + $offset | 0;
    var $1 = HEAP32[5264116 >> 2];
    var $call3 = _fseek($1, $add2, 0);
    var $call4 = _get2();
    var $cmp = ($call4 & 65535) > 100;
    var $tobool79 = $call4 << 16 >> 16 == 0;
    var $or_cond = $cmp | $tobool79;
    if ($or_cond) {
      label = 43;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $conv = $call4 & 65535;
    var $wbi_080 = -1;
    var $dec82_in = $conv;
    var $key_sroa_0_0 = 1040;
    var $key_sroa_1_0 = 17907;
    label = 4;
    break;
   case 4:
    var $key_sroa_1_0;
    var $key_sroa_0_0;
    var $dec82_in;
    var $wbi_080;
    var $dec82 = $dec82_in - 1 | 0;
    var $call6 = _get2();
    var $conv7 = $call6 & 65535;
    var $call8 = _get4();
    var $2 = HEAP32[5264116 >> 2];
    var $call9 = _ftell($2);
    var $add10 = $call9 + 4 | 0;
    var $3 = HEAP32[5264116 >> 2];
    var $call11 = _get4();
    var $add12 = $call11 + $offset | 0;
    var $call13 = _fseek($3, $add12, 0);
    var $shr59 = $conv7 >>> 8;
    var $add14 = $shr59 + 8 | 0;
    var $or = $add14 | 8;
    var $cmp15 = ($or | 0) == 56;
    if ($cmp15) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    var $4 = HEAP32[5264116 >> 2];
    var $call18 = _ftell($4);
    _parse_ciff($call18, $call8);
    label = 6;
    break;
   case 6:
    if ($call6 << 16 >> 16 == 2064) {
      label = 7;
      break;
    } else if ($call6 << 16 >> 16 == 2058) {
      label = 8;
      break;
    } else if ($call6 << 16 >> 16 == 6160) {
      label = 9;
      break;
    } else if ($call6 << 16 >> 16 == 6197) {
      label = 10;
      break;
    } else if ($call6 << 16 >> 16 == 8199) {
      label = 11;
      break;
    } else if ($call6 << 16 >> 16 == 6168) {
      label = 12;
      break;
    } else if ($call6 << 16 >> 16 == 4138) {
      label = 13;
      break;
    } else if ($call6 << 16 >> 16 == 4140) {
      label = 15;
      break;
    } else if ($call6 << 16 >> 16 == 50) {
      label = 18;
      break;
    } else if ($call6 << 16 >> 16 == 4265) {
      label = 27;
      break;
    } else {
      var $wbi_4 = $wbi_080;
      var $key_sroa_0_4 = $key_sroa_0_0;
      var $key_sroa_1_4 = $key_sroa_1_0;
      label = 30;
      break;
    }
   case 7:
    var $5 = HEAP32[5264116 >> 2];
    var $call23 = _fread(5561404, 64, 1, $5);
    var $wbi_469 = $wbi_080;
    var $key_sroa_0_5 = $key_sroa_0_0;
    var $key_sroa_1_5 = $key_sroa_1_0;
    label = 42;
    break;
   case 8:
    var $6 = HEAP32[5264116 >> 2];
    var $call28 = _fread(5263628, 64, 1, $6);
    var $7 = HEAP32[5264116 >> 2];
    var $call29 = _strlen(5263628);
    var $sub30 = $call29 - 63 | 0;
    var $call31 = _fseek($7, $sub30, 1);
    var $8 = HEAP32[5264116 >> 2];
    var $call32 = _fread(5263372, 64, 1, $8);
    var $wbi_469 = $wbi_080;
    var $key_sroa_0_5 = $key_sroa_0_0;
    var $key_sroa_1_5 = $key_sroa_1_0;
    label = 42;
    break;
   case 9:
    var $9 = HEAP32[5264116 >> 2];
    var $call37 = _fseek($9, 12, 1);
    var $call38 = _get4();
    HEAP32[5403048 >> 2] = $call38;
    var $wbi_469 = $wbi_080;
    var $key_sroa_0_5 = $key_sroa_0_0;
    var $key_sroa_1_5 = $key_sroa_1_0;
    label = 42;
    break;
   case 10:
    var $call43 = _get4();
    HEAP32[5244032 >> 2] = $call43;
    var $wbi_469 = $wbi_080;
    var $key_sroa_0_5 = $key_sroa_0_0;
    var $key_sroa_1_5 = $key_sroa_1_0;
    label = 42;
    break;
   case 11:
    var $10 = HEAP32[5264116 >> 2];
    var $call48 = _ftell($10);
    HEAP32[5244044 >> 2] = $call48;
    HEAP32[5244056 >> 2] = $call8;
    var $wbi_469 = $wbi_080;
    var $key_sroa_0_5 = $key_sroa_0_0;
    var $key_sroa_1_5 = $key_sroa_1_0;
    label = 42;
    break;
   case 12:
    var $call53 = _get4();
    var $call54 = _get4();
    var $call55 = _int_to_float($call54);
    var $sub56 = -$call55;
    var $conv57 = $sub56;
    var $exp2 = _exp2($conv57);
    var $conv58 = $exp2;
    HEAPF32[5244912 >> 2] = $conv58;
    var $call59 = _get4();
    var $call60 = _int_to_float($call59);
    var $div = $call60 * .5;
    var $conv61 = $div;
    var $exp262 = _exp2($conv61);
    var $conv62 = $exp262;
    HEAPF32[5561468 >> 2] = $conv62;
    var $wbi_469 = $wbi_080;
    var $key_sroa_0_5 = $key_sroa_0_0;
    var $key_sroa_1_5 = $key_sroa_1_0;
    label = 42;
    break;
   case 13:
    var $call67 = _get4();
    var $call68 = _get2();
    var $conv69 = $call68 & 65535;
    var $conv70 = $conv69 | 0;
    var $div71 = $conv70 * .03125;
    var $sub72 = $div71 - 4;
    var $exp263 = _exp2($sub72);
    var $mul = $exp263 * 50;
    var $conv73 = $mul;
    HEAPF32[5264096 >> 2] = $conv73;
    var $call74 = _get2();
    var $call75 = _get2();
    var $conv77 = $call75 << 16 >> 16;
    var $div78 = $conv77 * .015625;
    var $exp264 = _exp2($div78);
    var $conv79 = $exp264;
    HEAPF32[5561468 >> 2] = $conv79;
    var $call80 = _get2();
    var $conv81 = $call80 << 16 >> 16;
    var $sub82 = -$conv81 | 0;
    var $conv83 = $sub82 | 0;
    var $div84 = $conv83 * .03125;
    var $exp265 = _exp2($div84);
    var $conv85 = $exp265;
    HEAPF32[5244912 >> 2] = $conv85;
    var $call86 = _get2();
    var $call87 = _get2();
    var $conv88 = $call87 & 65535;
    var $cmp89 = ($call87 & 65535) > 17;
    var $_conv88 = $cmp89 ? 0 : $conv88;
    var $11 = HEAP32[5264116 >> 2];
    var $call93 = _fseek($11, 32, 1);
    var $12 = HEAPF32[5244912 >> 2];
    var $cmp95 = $12 > 1e6;
    if ($cmp95) {
      label = 14;
      break;
    } else {
      var $wbi_469 = $_conv88;
      var $key_sroa_0_5 = $key_sroa_0_0;
      var $key_sroa_1_5 = $key_sroa_1_0;
      label = 42;
      break;
    }
   case 14:
    var $call98 = _get2();
    var $conv99 = $call98 & 65535;
    var $conv100 = $conv99 | 0;
    var $div101 = $conv100 / 10;
    var $conv102 = $div101;
    HEAPF32[5244912 >> 2] = $conv102;
    var $wbi_469 = $_conv88;
    var $key_sroa_0_5 = $key_sroa_0_0;
    var $key_sroa_1_5 = $key_sroa_1_0;
    label = 42;
    break;
   case 15:
    var $call108 = _get2();
    var $cmp110 = ($call108 & 65535) > 512;
    var $13 = HEAP32[5264116 >> 2];
    if ($cmp110) {
      label = 17;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $call118 = _fseek($13, 98, 1);
    var $call123 = _get2();
    var $conv124 = $call123 & 65535;
    HEAPF32[5561128 >> 2] = $conv124;
    var $call123_1 = _get2();
    var $conv124_1 = $call123_1 & 65535;
    HEAPF32[5561124 >> 2] = $conv124_1;
    var $call123_2 = _get2();
    var $conv124_2 = $call123_2 & 65535;
    HEAPF32[5561132 >> 2] = $conv124_2;
    var $call123_3 = _get2();
    var $conv124_3 = $call123_3 & 65535;
    HEAPF32[5561136 >> 2] = $conv124_3;
    var $wbi_469 = $wbi_080;
    var $key_sroa_0_5 = $key_sroa_0_0;
    var $key_sroa_1_5 = $key_sroa_1_0;
    label = 42;
    break;
   case 17:
    var $call113 = _fseek($13, 118, 1);
    var $call116 = _get2();
    var $conv117 = $call116 & 65535;
    HEAPF32[5561132 >> 2] = $conv117;
    var $call116_1 = _get2();
    var $conv117_1 = $call116_1 & 65535;
    HEAPF32[5561136 >> 2] = $conv117_1;
    var $call116_2 = _get2();
    var $conv117_2 = $call116_2 & 65535;
    HEAPF32[5561124 >> 2] = $conv117_2;
    var $call116_3 = _get2();
    var $conv117_3 = $call116_3 & 65535;
    HEAPF32[5561128 >> 2] = $conv117_3;
    var $wbi_469 = $wbi_080;
    var $key_sroa_0_5 = $key_sroa_0_0;
    var $key_sroa_1_5 = $key_sroa_1_0;
    label = 42;
    break;
   case 18:
    var $cmp137 = ($call8 | 0) == 768;
    if ($cmp137) {
      label = 19;
      break;
    } else {
      label = 21;
      break;
    }
   case 19:
    var $14 = HEAP32[5264116 >> 2];
    var $call140 = _fseek($14, 72, 1);
    var $call145 = _get2();
    var $conv146 = $call145 & 65535;
    var $conv147 = $conv146 | 0;
    var $div148 = 1024 / $conv147;
    var $conv149 = $div148;
    HEAPF32[5561124 >> 2] = $conv149;
    var $call145_1 = _get2();
    var $conv146_1 = $call145_1 & 65535;
    var $conv147_1 = $conv146_1 | 0;
    var $div148_1 = 1024 / $conv147_1;
    var $conv149_1 = $div148_1;
    HEAPF32[5561128 >> 2] = $conv149_1;
    var $call145_2 = _get2();
    var $conv146_2 = $call145_2 & 65535;
    var $conv147_2 = $conv146_2 | 0;
    var $div148_2 = 1024 / $conv147_2;
    var $conv149_2 = $div148_2;
    HEAPF32[5561136 >> 2] = $conv149_2;
    var $call145_3 = _get2();
    var $conv146_3 = $call145_3 & 65535;
    var $conv147_3 = $conv146_3 | 0;
    var $div148_3 = 1024 / $conv147_3;
    var $conv149_3 = $div148_3;
    HEAPF32[5561132 >> 2] = $conv149_3;
    var $tobool156 = ($wbi_080 | 0) == 0;
    if ($tobool156) {
      label = 20;
      break;
    } else {
      var $wbi_469 = $wbi_080;
      var $key_sroa_0_5 = $key_sroa_0_0;
      var $key_sroa_1_5 = $key_sroa_1_0;
      label = 42;
      break;
    }
   case 20:
    HEAPF32[5561124 >> 2] = -1;
    var $wbi_4 = 0;
    var $key_sroa_0_4 = $key_sroa_0_0;
    var $key_sroa_1_4 = $key_sroa_1_0;
    label = 30;
    break;
   case 21:
    var $15 = HEAPF32[5561124 >> 2];
    var $tobool160 = $15 != 0;
    if ($tobool160) {
      var $wbi_469 = $wbi_080;
      var $key_sroa_0_5 = $key_sroa_0_0;
      var $key_sroa_1_5 = $key_sroa_1_0;
      label = 42;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    var $call162 = _get2();
    var $cmp166 = $call162 << 16 >> 16 == $key_sroa_0_0 << 16 >> 16;
    if ($cmp166) {
      label = 23;
      break;
    } else {
      label = 24;
      break;
    }
   case 23:
    var $call169 = _strstr(5263372, 5586460);
    var $tobool170 = ($call169 | 0) != 0;
    var $cond = $tobool170 ? 5586440 : 5586420;
    var $arrayidx171 = $cond + $wbi_080 | 0;
    var $16 = HEAP8[$arrayidx171];
    var $conv172 = $16 << 24 >> 24;
    var $add174 = $conv172 - 46 | 0;
    var $c_3 = $add174;
    var $key_sroa_0_1 = $key_sroa_0_0;
    var $key_sroa_1_1 = $key_sroa_1_0;
    label = 25;
    break;
   case 24:
    var $arrayidx176 = $wbi_080 + 5586400 | 0;
    var $17 = HEAP8[$arrayidx176];
    var $conv177 = $17 << 24 >> 24;
    var $sub178 = $conv177 - 48 | 0;
    var $c_3 = $sub178;
    var $key_sroa_0_1 = 0;
    var $key_sroa_1_1 = 0;
    label = 25;
    break;
   case 25:
    var $key_sroa_1_1;
    var $key_sroa_0_1;
    var $c_3;
    var $18 = HEAP32[5264116 >> 2];
    var $mul182 = $c_3 << 3;
    var $add183 = $mul182 + 78 | 0;
    var $call184 = _fseek($18, $add183, 1);
    var $call189 = _get2();
    var $xor19361 = $key_sroa_0_1 ^ $call189;
    var $xor193 = $xor19361 & 65535;
    var $conv194 = $xor193 | 0;
    HEAPF32[5561128 >> 2] = $conv194;
    var $call189_1 = _get2();
    var $xor19361_1 = $key_sroa_1_1 ^ $call189_1;
    var $xor193_1 = $xor19361_1 & 65535;
    var $conv194_1 = $xor193_1 | 0;
    HEAPF32[5561124 >> 2] = $conv194_1;
    var $call189_2 = _get2();
    var $xor19361_2 = $key_sroa_0_1 ^ $call189_2;
    var $xor193_2 = $xor19361_2 & 65535;
    var $conv194_2 = $xor193_2 | 0;
    HEAPF32[5561132 >> 2] = $conv194_2;
    var $call189_3 = _get2();
    var $xor19361_3 = $key_sroa_1_1 ^ $call189_3;
    var $xor193_3 = $xor19361_3 & 65535;
    var $conv194_3 = $xor193_3 | 0;
    HEAPF32[5561136 >> 2] = $conv194_3;
    var $tobool202 = ($wbi_080 | 0) == 0;
    if ($tobool202) {
      label = 26;
      break;
    } else {
      var $wbi_4 = $wbi_080;
      var $key_sroa_0_4 = $key_sroa_0_1;
      var $key_sroa_1_4 = $key_sroa_1_1;
      label = 30;
      break;
    }
   case 26:
    HEAPF32[5561124 >> 2] = -1;
    var $wbi_4 = 0;
    var $key_sroa_0_4 = $key_sroa_0_1;
    var $key_sroa_1_4 = $key_sroa_1_1;
    label = 30;
    break;
   case 27:
    var $cmp211 = ($call8 | 0) > 66;
    if ($cmp211) {
      label = 28;
      break;
    } else {
      var $wbi_3 = $wbi_080;
      label = 29;
      break;
    }
   case 28:
    var $arrayidx214 = $wbi_080 + 5586368 | 0;
    var $19 = HEAP8[$arrayidx214];
    var $conv215 = $19 << 24 >> 24;
    var $sub216 = $conv215 - 48 | 0;
    var $wbi_3 = $sub216;
    label = 29;
    break;
   case 29:
    var $wbi_3;
    var $20 = HEAP32[5264116 >> 2];
    var $mul218 = $wbi_3 << 3;
    var $add21960 = $mul218 | 2;
    var $call220 = _fseek($20, $add21960, 1);
    var $call225 = _get2();
    var $conv226 = $call225 & 65535;
    HEAPF32[5561124 >> 2] = $conv226;
    var $call225_1 = _get2();
    var $conv226_1 = $call225_1 & 65535;
    HEAPF32[5561128 >> 2] = $conv226_1;
    var $call225_2 = _get2();
    var $conv226_2 = $call225_2 & 65535;
    HEAPF32[5561136 >> 2] = $conv226_2;
    var $call225_3 = _get2();
    var $conv226_3 = $call225_3 & 65535;
    HEAPF32[5561132 >> 2] = $conv226_3;
    var $wbi_4 = $wbi_3;
    var $key_sroa_0_4 = $key_sroa_0_0;
    var $key_sroa_1_4 = $key_sroa_1_0;
    label = 30;
    break;
   case 30:
    var $key_sroa_1_4;
    var $key_sroa_0_4;
    var $wbi_4;
    if ($call6 << 16 >> 16 == 4144) {
      label = 31;
      break;
    } else if ($call6 << 16 >> 16 == 4145) {
      label = 33;
      break;
    } else if ($call6 << 16 >> 16 == 20521) {
      label = 34;
      break;
    } else if ($call6 << 16 >> 16 == 22547) {
      label = 36;
      break;
    } else if ($call6 << 16 >> 16 == 22548) {
      label = 37;
      break;
    } else if ($call6 << 16 >> 16 == 22551) {
      label = 38;
      break;
    } else if ($call6 << 16 >> 16 == 22580) {
      label = 39;
      break;
    } else if ($call6 << 16 >> 16 == 22542) {
      label = 40;
      break;
    } else if ($call6 << 16 >> 16 == 6158) {
      label = 41;
      break;
    } else {
      var $wbi_469 = $wbi_4;
      var $key_sroa_0_5 = $key_sroa_0_4;
      var $key_sroa_1_5 = $key_sroa_1_4;
      label = 42;
      break;
    }
   case 31:
    var $shr236 = 98368 >>> ($wbi_4 >>> 0);
    var $and237 = $shr236 & 1;
    var $tobool238 = ($and237 | 0) == 0;
    if ($tobool238) {
      var $wbi_469 = $wbi_4;
      var $key_sroa_0_5 = $key_sroa_0_4;
      var $key_sroa_1_5 = $key_sroa_1_4;
      label = 42;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    _ciff_block_1030();
    var $wbi_469 = $wbi_4;
    var $key_sroa_0_5 = $key_sroa_0_4;
    var $key_sroa_1_5 = $key_sroa_1_4;
    label = 42;
    break;
   case 33:
    var $call244 = _get2();
    var $call245 = _get2();
    HEAP16[5245028 >> 1] = $call245;
    var $call246 = _get2();
    HEAP16[5245036 >> 1] = $call246;
    var $wbi_469 = $wbi_4;
    var $key_sroa_0_5 = $key_sroa_0_4;
    var $key_sroa_1_5 = $key_sroa_1_4;
    label = 42;
    break;
   case 34:
    var $shr251 = $call8 >> 16;
    var $conv252 = $shr251 | 0;
    HEAPF32[5403044 >> 2] = $conv252;
    var $and253 = $call8 & 65535;
    var $cmp254 = ($and253 | 0) == 2;
    if ($cmp254) {
      label = 35;
      break;
    } else {
      var $wbi_469 = $wbi_4;
      var $key_sroa_0_5 = $key_sroa_0_4;
      var $key_sroa_1_5 = $key_sroa_1_4;
      label = 42;
      break;
    }
   case 35:
    var $div257 = $conv252 * .03125;
    HEAPF32[5403044 >> 2] = $div257;
    var $wbi_469 = $wbi_4;
    var $key_sroa_0_5 = $key_sroa_0_4;
    var $key_sroa_1_5 = $key_sroa_1_4;
    label = 42;
    break;
   case 36:
    var $call26370 = _int_to_float($call8);
    HEAPF32[5403052 >> 2] = $call26370;
    var $wbi_469 = $wbi_4;
    var $key_sroa_0_5 = $key_sroa_0_4;
    var $key_sroa_1_5 = $key_sroa_1_4;
    label = 42;
    break;
   case 37:
    var $call26871 = _int_to_float($call8);
    HEAPF32[5560920 >> 2] = $call26871;
    var $wbi_469 = $wbi_4;
    var $key_sroa_0_5 = $key_sroa_0_4;
    var $key_sroa_1_5 = $key_sroa_1_4;
    label = 42;
    break;
   case 38:
    HEAP32[5244924 >> 2] = $call8;
    var $wbi_469 = $wbi_4;
    var $key_sroa_0_5 = $key_sroa_0_4;
    var $key_sroa_1_5 = $key_sroa_1_4;
    label = 42;
    break;
   case 39:
    HEAP32[5243560 >> 2] = $call8;
    var $wbi_469 = $wbi_4;
    var $key_sroa_0_5 = $key_sroa_0_4;
    var $key_sroa_1_5 = $key_sroa_1_4;
    label = 42;
    break;
   case 40:
    HEAP32[5243568 >> 2] = $call8;
    var $wbi_469 = $wbi_4;
    var $key_sroa_0_5 = $key_sroa_0_4;
    var $key_sroa_1_5 = $key_sroa_1_4;
    label = 42;
    break;
   case 41:
    var $call285 = _get4();
    HEAP32[5243568 >> 2] = $call285;
    var $wbi_469 = $wbi_4;
    var $key_sroa_0_5 = $key_sroa_0_4;
    var $key_sroa_1_5 = $key_sroa_1_4;
    label = 42;
    break;
   case 42:
    var $key_sroa_1_5;
    var $key_sroa_0_5;
    var $wbi_469;
    var $21 = HEAP32[5264116 >> 2];
    var $call287 = _fseek($21, $add10, 0);
    var $tobool = ($dec82 | 0) == 0;
    if ($tobool) {
      label = 43;
      break;
    } else {
      var $wbi_080 = $wbi_469;
      var $dec82_in = $dec82;
      var $key_sroa_0_0 = $key_sroa_0_5;
      var $key_sroa_1_0 = $key_sroa_1_5;
      label = 4;
      break;
    }
   case 43:
    return;
  }
}
_parse_ciff["X"] = 1;
function _parse_rollei() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 172 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $line = __stackBase__;
    var $t = __stackBase__ + 128;
    var $0 = HEAP32[5264116 >> 2];
    var $call = _fseek($0, 0, 0);
    var $1 = $t;
    for (var $$dest = $1 >> 2, $$stop = $$dest + 11; $$dest < $$stop; $$dest++) {
      HEAP32[$$dest] = 0;
    }
    var $arraydecay = $line | 0;
    var $tm_mday = $t + 12 | 0;
    var $tm_mon = $t + 16 | 0;
    var $tm_year = $t + 20 | 0;
    var $tm_hour = $t + 8 | 0;
    var $tm_min = $t + 4 | 0;
    var $tm_sec = $t | 0;
    label = 3;
    break;
   case 3:
    var $2 = HEAP32[5264116 >> 2];
    var $call1 = _fgets($arraydecay, 128, $2);
    var $call3 = _strchr($arraydecay, 61);
    var $tobool = ($call3 | 0) == 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $incdec_ptr = $call3 + 1 | 0;
    HEAP8[$call3] = 0;
    var $val_0 = $incdec_ptr;
    label = 6;
    break;
   case 5:
    var $call6 = _strlen($arraydecay);
    var $add_ptr = $line + $call6 | 0;
    var $val_0 = $add_ptr;
    label = 6;
    break;
   case 6:
    var $val_0;
    var $call8 = _strcmp($arraydecay, 5586364);
    var $tobool9 = ($call8 | 0) == 0;
    if ($tobool9) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    var $call11 = _sscanf($val_0, 5579012, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $tm_mday, HEAP32[tempInt + 4 >> 2] = $tm_mon, HEAP32[tempInt + 8 >> 2] = $tm_year, tempInt));
    label = 8;
    break;
   case 8:
    var $call14 = _strcmp($arraydecay, 5586360);
    var $tobool15 = ($call14 | 0) == 0;
    if ($tobool15) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    var $call17 = _sscanf($val_0, 5586348, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $tm_hour, HEAP32[tempInt + 4 >> 2] = $tm_min, HEAP32[tempInt + 8 >> 2] = $tm_sec, tempInt));
    label = 10;
    break;
   case 10:
    var $call20 = _strcmp($arraydecay, 5586344);
    var $tobool21 = ($call20 | 0) == 0;
    if ($tobool21) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    var $call23 = _atoi($val_0);
    HEAP32[5244044 >> 2] = $call23;
    label = 12;
    break;
   case 12:
    var $call26 = _strcmp($arraydecay, 5586340);
    var $tobool27 = ($call26 | 0) == 0;
    if ($tobool27) {
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    var $call29 = _atoi($val_0);
    var $conv = $call29 & 65535;
    HEAP16[5245028 >> 1] = $conv;
    label = 14;
    break;
   case 14:
    var $call32 = _strcmp($arraydecay, 5586336);
    var $tobool33 = ($call32 | 0) == 0;
    if ($tobool33) {
      label = 15;
      break;
    } else {
      label = 16;
      break;
    }
   case 15:
    var $call35 = _atoi($val_0);
    var $conv36 = $call35 & 65535;
    HEAP16[5245036 >> 1] = $conv36;
    label = 16;
    break;
   case 16:
    var $call39 = _strcmp($arraydecay, 5586332);
    var $tobool40 = ($call39 | 0) == 0;
    if ($tobool40) {
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 17:
    var $call42 = _atoi($val_0);
    var $conv43 = $call42 & 65535;
    HEAP16[5244040 >> 1] = $conv43;
    label = 18;
    break;
   case 18:
    var $call46 = _strcmp($arraydecay, 5586328);
    var $tobool47 = ($call46 | 0) == 0;
    if ($tobool47) {
      label = 19;
      break;
    } else {
      label = 20;
      break;
    }
   case 19:
    var $call49 = _atoi($val_0);
    var $conv50 = $call49 & 65535;
    HEAP16[5244060 >> 1] = $conv50;
    label = 20;
    break;
   case 20:
    var $call53 = _strncmp($arraydecay, 5586320, 4);
    var $tobool54 = ($call53 | 0) == 0;
    if ($tobool54) {
      label = 21;
      break;
    } else {
      label = 3;
      break;
    }
   case 21:
    var $3 = HEAP32[5244044 >> 2];
    var $4 = HEAP16[5244040 >> 1];
    var $conv55 = $4 & 65535;
    var $5 = HEAP16[5244060 >> 1];
    var $conv56 = $5 & 65535;
    var $mul = $conv55 << 1;
    var $mul57 = $mul * $conv56 & -1;
    var $add = $mul57 + $3 | 0;
    HEAP32[5428492 >> 2] = $add;
    var $6 = HEAP32[$tm_year >> 2];
    var $sub = $6 - 1900 | 0;
    HEAP32[$tm_year >> 2] = $sub;
    var $7 = HEAP32[$tm_mon >> 2];
    var $sub60 = $7 - 1 | 0;
    HEAP32[$tm_mon >> 2] = $sub60;
    var $call61 = _mktime($t);
    var $cmp = ($call61 | 0) > 0;
    if ($cmp) {
      label = 22;
      break;
    } else {
      label = 23;
      break;
    }
   case 22:
    var $call64 = _mktime($t);
    HEAP32[5243568 >> 2] = $call64;
    label = 23;
    break;
   case 23:
    HEAP8[5263628] = HEAP8[5586288];
    HEAP8[5263629] = HEAP8[5586289];
    HEAP8[5263630] = HEAP8[5586290];
    HEAP8[5263631] = HEAP8[5586291];
    HEAP8[5263632] = HEAP8[5586292];
    HEAP8[5263633] = HEAP8[5586293];
    HEAP8[5263634] = HEAP8[5586294];
    for (var $$src = 5586276, $$dest = 5263372, $$stop = $$src + 9; $$src < $$stop; $$src++, $$dest++) {
      HEAP8[$$dest] = HEAP8[$$src];
    }
    HEAP32[5242960 >> 2] = 56;
    STACKTOP = __stackBase__;
    return;
  }
}
_parse_rollei["X"] = 1;
function _parse_sinar_ia() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $str = __stackBase__;
    HEAP16[5262944 >> 1] = 18761;
    var $0 = HEAP32[5264116 >> 2];
    var $call = _fseek($0, 4, 0);
    var $call1 = _get4();
    var $1 = HEAP32[5264116 >> 2];
    var $call2 = _get4();
    var $call3 = _fseek($1, $call2, 0);
    var $tobool5 = ($call1 | 0) == 0;
    if ($tobool5) {
      label = 11;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $arraydecay = $str | 0;
    var $dec6_in = $call1;
    label = 4;
    break;
   case 4:
    var $dec6_in;
    var $dec6 = $dec6_in - 1 | 0;
    var $call4 = _get4();
    var $call5 = _get4();
    var $2 = HEAP32[5264116 >> 2];
    var $call6 = _fread($arraydecay, 8, 1, $2);
    var $call8 = _strcmp($arraydecay, 5586268);
    var $tobool9 = ($call8 | 0) == 0;
    if ($tobool9) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    HEAP32[5263440 >> 2] = $call4;
    label = 6;
    break;
   case 6:
    var $call11 = _strcmp($arraydecay, 5586260);
    var $tobool12 = ($call11 | 0) == 0;
    if ($tobool12) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    HEAP32[5244044 >> 2] = $call4;
    label = 8;
    break;
   case 8:
    var $call16 = _strcmp($arraydecay, 5586252);
    var $tobool17 = ($call16 | 0) == 0;
    if ($tobool17) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    HEAP32[5428492 >> 2] = $call4;
    label = 10;
    break;
   case 10:
    var $tobool = ($dec6 | 0) == 0;
    if ($tobool) {
      label = 11;
      break;
    } else {
      var $dec6_in = $dec6;
      label = 4;
      break;
    }
   case 11:
    var $3 = HEAP32[5264116 >> 2];
    var $4 = HEAP32[5263440 >> 2];
    var $add = $4 + 20 | 0;
    var $call20 = _fseek($3, $add, 0);
    var $5 = HEAP32[5264116 >> 2];
    var $call21 = _fread(5263628, 64, 1, $5);
    HEAP8[5263691] = 0;
    var $call22 = _strchr(5263628, 32);
    var $tobool23 = ($call22 | 0) == 0;
    if ($tobool23) {
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $add_ptr = $call22 + 1 | 0;
    var $call25 = _strcpy(5263372, $add_ptr);
    HEAP8[$call22] = 0;
    label = 13;
    break;
   case 13:
    var $call27 = _get2();
    HEAP16[5245028 >> 1] = $call27;
    var $call28 = _get2();
    HEAP16[5245036 >> 1] = $call28;
    HEAP32[5263692 >> 2] = 4;
    var $call29 = _get4();
    var $call30 = _get2();
    HEAP16[5244040 >> 1] = $call30;
    var $call31 = _get2();
    HEAP16[5244060 >> 1] = $call31;
    HEAP32[5242960 >> 2] = 68;
    HEAP32[5263496 >> 2] = 16383;
    STACKTOP = __stackBase__;
    return;
  }
}
_parse_sinar_ia["X"] = 1;
function _parse_phase_one($base) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 36 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $romm_cam = __stackBase__;
    HEAP32[5245740 >> 2] = 0;
    HEAP32[5245744 >> 2] = 0;
    HEAP32[5245748 >> 2] = 0;
    HEAP32[5245752 >> 2] = 0;
    HEAP32[5245756 >> 2] = 0;
    HEAP32[5245760 >> 2] = 0;
    HEAP32[5245764 >> 2] = 0;
    var $0 = HEAP32[5264116 >> 2];
    var $call = _fseek($0, $base, 0);
    var $call1 = _get4();
    var $conv = $call1 & 65535;
    HEAP16[5262944 >> 1] = $conv;
    var $call2 = _get4();
    var $shr_mask = $call2 & -256;
    var $cmp = ($shr_mask | 0) == 1382119168;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 34;
      break;
    }
   case 3:
    var $1 = HEAP32[5264116 >> 2];
    var $call4 = _get4();
    var $add = $call4 + $base | 0;
    var $call5 = _fseek($1, $add, 0);
    var $call6 = _get4();
    var $call7 = _get4();
    var $tobool31 = ($call6 | 0) == 0;
    if ($tobool31) {
      label = 28;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $arraydecay = $romm_cam | 0;
    var $arrayidx23 = $romm_cam | 0;
    var $arrayidx23_1 = $romm_cam + 4 | 0;
    var $arrayidx23_2 = $romm_cam + 8 | 0;
    var $arrayidx23_3 = $romm_cam + 12 | 0;
    var $arrayidx23_4 = $romm_cam + 16 | 0;
    var $arrayidx23_5 = $romm_cam + 20 | 0;
    var $arrayidx23_6 = $romm_cam + 24 | 0;
    var $arrayidx23_7 = $romm_cam + 28 | 0;
    var $arrayidx23_8 = $romm_cam + 32 | 0;
    var $dec32_in = $call6;
    label = 5;
    break;
   case 5:
    var $dec32_in;
    var $dec32 = $dec32_in - 1 | 0;
    var $call8 = _get4();
    var $call9 = _get4();
    var $call10 = _get4();
    var $call11 = _get4();
    var $2 = HEAP32[5264116 >> 2];
    var $call12 = _ftell($2);
    var $3 = HEAP32[5264116 >> 2];
    var $add13 = $call11 + $base | 0;
    var $call14 = _fseek($3, $add13, 0);
    if (($call8 | 0) == 256) {
      label = 6;
      break;
    } else if (($call8 | 0) == 262) {
      label = 7;
      break;
    } else if (($call8 | 0) == 263) {
      label = 8;
      break;
    } else if (($call8 | 0) == 264) {
      label = 9;
      break;
    } else if (($call8 | 0) == 265) {
      label = 10;
      break;
    } else if (($call8 | 0) == 266) {
      label = 11;
      break;
    } else if (($call8 | 0) == 267) {
      label = 12;
      break;
    } else if (($call8 | 0) == 268) {
      label = 13;
      break;
    } else if (($call8 | 0) == 269) {
      label = 14;
      break;
    } else if (($call8 | 0) == 270) {
      label = 15;
      break;
    } else if (($call8 | 0) == 271) {
      label = 16;
      break;
    } else if (($call8 | 0) == 272) {
      label = 17;
      break;
    } else if (($call8 | 0) == 274) {
      label = 18;
      break;
    } else if (($call8 | 0) == 528) {
      label = 19;
      break;
    } else if (($call8 | 0) == 538) {
      label = 20;
      break;
    } else if (($call8 | 0) == 540) {
      label = 21;
      break;
    } else if (($call8 | 0) == 541) {
      label = 22;
      break;
    } else if (($call8 | 0) == 546) {
      label = 23;
      break;
    } else if (($call8 | 0) == 547) {
      label = 24;
      break;
    } else if (($call8 | 0) == 769) {
      label = 25;
      break;
    } else {
      label = 27;
      break;
    }
   case 6:
    var $and15 = $call11 & 3;
    var $arrayidx = $and15 + 5586244 | 0;
    var $4 = HEAP8[$arrayidx];
    var $conv16 = $4 << 24 >> 24;
    var $sub = $conv16 - 48 | 0;
    HEAP32[5403048 >> 2] = $sub;
    label = 27;
    break;
   case 7:
    var $call20 = _getreal(11);
    var $conv21 = $call20;
    HEAPF32[$arrayidx23 >> 2] = $conv21;
    var $call20_1 = _getreal(11);
    var $conv21_1 = $call20_1;
    HEAPF32[$arrayidx23_1 >> 2] = $conv21_1;
    var $call20_2 = _getreal(11);
    var $conv21_2 = $call20_2;
    HEAPF32[$arrayidx23_2 >> 2] = $conv21_2;
    var $call20_3 = _getreal(11);
    var $conv21_3 = $call20_3;
    HEAPF32[$arrayidx23_3 >> 2] = $conv21_3;
    var $call20_4 = _getreal(11);
    var $conv21_4 = $call20_4;
    HEAPF32[$arrayidx23_4 >> 2] = $conv21_4;
    var $call20_5 = _getreal(11);
    var $conv21_5 = $call20_5;
    HEAPF32[$arrayidx23_5 >> 2] = $conv21_5;
    var $call20_6 = _getreal(11);
    var $conv21_6 = $call20_6;
    HEAPF32[$arrayidx23_6 >> 2] = $conv21_6;
    var $call20_7 = _getreal(11);
    var $conv21_7 = $call20_7;
    HEAPF32[$arrayidx23_7 >> 2] = $conv21_7;
    var $call20_8 = _getreal(11);
    var $conv21_8 = $call20_8;
    HEAPF32[$arrayidx23_8 >> 2] = $conv21_8;
    _romm_coeff($arraydecay);
    label = 27;
    break;
   case 8:
    var $call29 = _getreal(11);
    var $conv30 = $call29;
    HEAPF32[5561124 >> 2] = $conv30;
    var $call29_1 = _getreal(11);
    var $conv30_1 = $call29_1;
    HEAPF32[5561128 >> 2] = $conv30_1;
    var $call29_2 = _getreal(11);
    var $conv30_2 = $call29_2;
    HEAPF32[5561132 >> 2] = $conv30_2;
    label = 27;
    break;
   case 9:
    var $conv36 = $call11 & 65535;
    HEAP16[5245028 >> 1] = $conv36;
    label = 27;
    break;
   case 10:
    var $conv38 = $call11 & 65535;
    HEAP16[5245036 >> 1] = $conv38;
    label = 27;
    break;
   case 11:
    var $conv40 = $call11 & 65535;
    HEAP16[5263700 >> 1] = $conv40;
    label = 27;
    break;
   case 12:
    var $conv42 = $call11 & 65535;
    HEAP16[5243564 >> 1] = $conv42;
    label = 27;
    break;
   case 13:
    var $conv44 = $call11 & 65535;
    HEAP16[5242964 >> 1] = $conv44;
    label = 27;
    break;
   case 14:
    var $conv46 = $call11 & 65535;
    HEAP16[5398712 >> 1] = $conv46;
    label = 27;
    break;
   case 15:
    HEAP32[5245740 >> 2] = $call11;
    label = 27;
    break;
   case 16:
    HEAP32[5428492 >> 2] = $add13;
    label = 27;
    break;
   case 17:
    HEAP32[5263440 >> 2] = $add13;
    HEAP32[5263444 >> 2] = $call10;
    label = 27;
    break;
   case 18:
    var $sub53 = $call12 - 4 | 0;
    HEAP32[5245744 >> 2] = $sub53;
    label = 27;
    break;
   case 19:
    var $call55 = _int_to_float($call11);
    HEAPF32[5245764 >> 2] = $call55;
    label = 27;
    break;
   case 20:
    HEAP32[5245760 >> 2] = $call11;
    label = 27;
    break;
   case 21:
    HEAP32[5244068 >> 2] = $add13;
    label = 27;
    break;
   case 22:
    HEAP32[5245748 >> 2] = $call11;
    label = 27;
    break;
   case 23:
    HEAP32[5245756 >> 2] = $call11;
    label = 27;
    break;
   case 24:
    HEAP32[5245752 >> 2] = $add13;
    label = 27;
    break;
   case 25:
    HEAP8[5263435] = 0;
    var $5 = HEAP32[5264116 >> 2];
    var $call64 = _fread(5263372, 1, 63, $5);
    var $call65 = _strstr(5263372, 5586236);
    var $tobool66 = ($call65 | 0) == 0;
    if ($tobool66) {
      label = 27;
      break;
    } else {
      label = 26;
      break;
    }
   case 26:
    HEAP8[$call65] = 0;
    label = 27;
    break;
   case 27:
    var $6 = HEAP32[5264116 >> 2];
    var $call69 = _fseek($6, $call12, 0);
    var $tobool = ($dec32 | 0) == 0;
    if ($tobool) {
      label = 28;
      break;
    } else {
      var $dec32_in = $dec32;
      label = 5;
      break;
    }
   case 28:
    var $7 = HEAP32[5245740 >> 2];
    var $cmp70 = ($7 | 0) < 3;
    var $cond = $cmp70 ? 64 : 86;
    HEAP32[5263692 >> 2] = $cond;
    HEAP32[5263496 >> 2] = 65535;
    for (var $$src = 5586224, $$dest = 5263628, $$stop = $$src + 10; $$src < $$stop; $$src++, $$dest++) {
      HEAP8[$$dest] = HEAP8[$$src];
    }
    var $8 = HEAP8[5263372];
    var $tobool73 = $8 << 24 >> 24 == 0;
    if ($tobool73) {
      label = 29;
      break;
    } else {
      label = 34;
      break;
    }
   case 29:
    var $9 = HEAP16[5245036 >> 1];
    var $conv76 = $9 & 65535;
    if (($conv76 | 0) == 2060) {
      label = 30;
      break;
    } else if (($conv76 | 0) == 2682) {
      label = 31;
      break;
    } else if (($conv76 | 0) == 4128) {
      label = 32;
      break;
    } else if (($conv76 | 0) == 5488) {
      label = 33;
      break;
    } else {
      label = 34;
      break;
    }
   case 30:
    for (var $$src = 5586212, $$dest = 5263372, $$stop = $$src + 11; $$src < $$stop; $$src++, $$dest++) {
      HEAP8[$$dest] = HEAP8[$$src];
    }
    label = 34;
    break;
   case 31:
    HEAP8[5263372] = HEAP8[5586204];
    HEAP8[5263373] = HEAP8[5586205];
    HEAP8[5263374] = HEAP8[5586206];
    HEAP8[5263375] = HEAP8[5586207];
    HEAP8[5263376] = HEAP8[5586208];
    label = 34;
    break;
   case 32:
    HEAP8[5263372] = HEAP8[5586152];
    HEAP8[5263373] = HEAP8[5586153];
    HEAP8[5263374] = HEAP8[5586154];
    HEAP8[5263375] = HEAP8[5586155];
    HEAP8[5263376] = HEAP8[5586156];
    label = 34;
    break;
   case 33:
    HEAP8[5263372] = HEAP8[5586144];
    HEAP8[5263373] = HEAP8[5586145];
    HEAP8[5263374] = HEAP8[5586146];
    HEAP8[5263375] = HEAP8[5586147];
    HEAP8[5263376] = HEAP8[5586148];
    label = 34;
    break;
   case 34:
    STACKTOP = __stackBase__;
    return;
  }
}
_parse_phase_one["X"] = 1;
function _parse_fuji($offset) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5264116 >> 2];
    var $call = _fseek($0, $offset, 0);
    var $call1 = _get4();
    var $cmp = $call1 >>> 0 > 255;
    if ($cmp) {
      label = 15;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $tobool11 = ($call1 | 0) == 0;
    if ($tobool11) {
      label = 14;
      break;
    } else {
      var $dec12_in = $call1;
      label = 4;
      break;
    }
   case 4:
    var $dec12_in;
    var $dec12 = $dec12_in - 1 | 0;
    var $call2 = _get2();
    var $call3 = _get2();
    var $conv4 = $call3 & 65535;
    var $1 = HEAP32[5264116 >> 2];
    var $call5 = _ftell($1);
    if ($call2 << 16 >> 16 == 256) {
      label = 5;
      break;
    } else if ($call2 << 16 >> 16 == 289) {
      label = 6;
      break;
    } else if ($call2 << 16 >> 16 == 304) {
      label = 8;
      break;
    } else if ($call2 << 16 >> 16 == 12272) {
      label = 9;
      break;
    } else if ($call2 << 16 >> 16 == -16384) {
      label = 10;
      break;
    } else {
      label = 13;
      break;
    }
   case 5:
    var $call9 = _get2();
    HEAP16[5245036 >> 1] = $call9;
    var $call10 = _get2();
    HEAP16[5245028 >> 1] = $call10;
    label = 13;
    break;
   case 6:
    var $call14 = _get2();
    HEAP16[5398712 >> 1] = $call14;
    var $call15 = _get2();
    HEAP16[5242964 >> 1] = $call15;
    var $cmp17 = $call15 << 16 >> 16 == 4284;
    if ($cmp17) {
      label = 7;
      break;
    } else {
      label = 13;
      break;
    }
   case 7:
    HEAP16[5242964 >> 1] = 4287;
    label = 13;
    break;
   case 8:
    var $2 = HEAP32[5264116 >> 2];
    var $call27 = _fgetc($2);
    var $shr = $call27 >> 7;
    HEAP32[5398904 >> 2] = $shr;
    var $3 = HEAP32[5264116 >> 2];
    var $call28 = _fgetc($3);
    var $and = $call28 >>> 3;
    var $and_lobit = $and & 1;
    var $4 = $and_lobit ^ 1;
    var $conv30 = $4 & 65535;
    HEAP16[5398900 >> 1] = $conv30;
    label = 13;
    break;
   case 9:
    var $call37 = _get2();
    var $conv38 = $call37 & 65535;
    HEAPF32[5561128 >> 2] = $conv38;
    var $call37_1 = _get2();
    var $conv38_1 = $call37_1 & 65535;
    HEAPF32[5561124 >> 2] = $conv38_1;
    var $call37_2 = _get2();
    var $conv38_2 = $call37_2 & 65535;
    HEAPF32[5561136 >> 2] = $conv38_2;
    var $call37_3 = _get2();
    var $conv38_3 = $call37_3 & 65535;
    HEAPF32[5561132 >> 2] = $conv38_3;
    label = 13;
    break;
   case 10:
    var $5 = HEAP16[5262944 >> 1];
    HEAP16[5262944 >> 1] = 18761;
    var $call44 = _get4();
    var $conv45 = $call44 & 65535;
    HEAP16[5242964 >> 1] = $conv45;
    var $conv46 = $call44 & 65535;
    var $cmp47 = $conv46 >>> 0 > 1e4;
    if ($cmp47) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    var $call50 = _get4();
    var $conv51 = $call50 & 65535;
    HEAP16[5242964 >> 1] = $conv51;
    label = 12;
    break;
   case 12:
    var $call53 = _get4();
    var $conv54 = $call53 & 65535;
    HEAP16[5398712 >> 1] = $conv54;
    HEAP16[5262944 >> 1] = $5;
    label = 13;
    break;
   case 13:
    var $6 = HEAP32[5264116 >> 2];
    var $add61 = $call5 + $conv4 | 0;
    var $call62 = _fseek($6, $add61, 0);
    var $tobool = ($dec12 | 0) == 0;
    if ($tobool) {
      label = 14;
      break;
    } else {
      var $dec12_in = $dec12;
      label = 4;
      break;
    }
   case 14:
    var $7 = HEAP32[5398904 >> 2];
    var $8 = HEAP16[5398712 >> 1];
    var $conv63 = $8 & 65535;
    var $shl = $conv63 << $7;
    var $conv64 = $shl & 65535;
    HEAP16[5398712 >> 1] = $conv64;
    var $9 = HEAP16[5242964 >> 1];
    var $conv65 = $9 & 65535;
    var $shr66 = $conv65 >>> ($7 >>> 0);
    var $conv67 = $shr66 & 65535;
    HEAP16[5242964 >> 1] = $conv67;
    label = 15;
    break;
   case 15:
    return;
  }
}
_parse_fuji["X"] = 1;
function _parse_jpeg() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5264116 >> 2];
    var $call = _fseek($0, 0, 0);
    var $1 = HEAP32[5264116 >> 2];
    var $call1 = _fgetc($1);
    var $cmp = ($call1 | 0) == 255;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 13;
      break;
    }
   case 3:
    var $2 = HEAP32[5264116 >> 2];
    var $call2 = _fgetc($2);
    var $cmp3 = ($call2 | 0) == 216;
    if ($cmp3) {
      label = 4;
      break;
    } else {
      label = 13;
      break;
    }
   case 4:
    var $3 = HEAP32[5264116 >> 2];
    var $call46 = _fgetc($3);
    var $cmp57 = ($call46 | 0) == 255;
    if ($cmp57) {
      label = 5;
      break;
    } else {
      label = 13;
      break;
    }
   case 5:
    var $4 = HEAP32[5264116 >> 2];
    var $call6 = _fgetc($4);
    var $cmp7 = ($call6 | 0) == 218;
    if ($cmp7) {
      label = 13;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    HEAP16[5262944 >> 1] = 19789;
    var $call8 = _get2();
    var $conv = $call8 & 65535;
    var $sub = $conv - 2 | 0;
    var $5 = HEAP32[5264116 >> 2];
    var $call9 = _ftell($5);
    if (($call6 | 0) == 195 | ($call6 | 0) == 192) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    var $6 = HEAP32[5264116 >> 2];
    var $call16 = _fgetc($6);
    var $call17 = _get2();
    HEAP16[5245036 >> 1] = $call17;
    var $call18 = _get2();
    HEAP16[5245028 >> 1] = $call18;
    label = 8;
    break;
   case 8:
    var $call20 = _get2();
    HEAP16[5262944 >> 1] = $call20;
    var $call21 = _get4();
    var $call22 = _get4();
    var $cmp23 = ($call22 | 0) == 1212498256;
    if ($cmp23) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    var $add = $call21 + $call9 | 0;
    var $sub26 = $sub - $call21 | 0;
    _parse_ciff($add, $sub26);
    label = 10;
    break;
   case 10:
    var $add28 = $call9 + 6 | 0;
    var $call29 = _parse_tiff($add28);
    var $tobool = ($call29 | 0) == 0;
    if ($tobool) {
      label = 12;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    _apply_tiff();
    label = 12;
    break;
   case 12:
    var $7 = HEAP32[5264116 >> 2];
    var $add32 = $call9 + $sub | 0;
    var $call33 = _fseek($7, $add32, 0);
    var $8 = HEAP32[5264116 >> 2];
    var $call4 = _fgetc($8);
    var $cmp5 = ($call4 | 0) == 255;
    if ($cmp5) {
      label = 5;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    return;
  }
}
_parse_jpeg["X"] = 1;
function _parse_riff() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 176 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $tag = __stackBase__;
    var $date = __stackBase__ + 4;
    var $month = __stackBase__ + 68;
    var $t = __stackBase__ + 132;
    HEAP16[5262944 >> 1] = 18761;
    var $arraydecay = $tag | 0;
    var $0 = HEAP32[5264116 >> 2];
    var $call = _fread($arraydecay, 4, 1, $0);
    var $call1 = _get4();
    var $1 = HEAP32[5264116 >> 2];
    var $call2 = _ftell($1);
    var $add = $call2 + $call1 | 0;
    var $call4 = _memcmp($arraydecay, 5586136, 4);
    var $tobool = ($call4 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $call6 = _memcmp($arraydecay, 5586128, 4);
    var $tobool7 = ($call6 | 0) == 0;
    if ($tobool7) {
      label = 4;
      break;
    } else {
      label = 6;
      break;
    }
   case 4:
    var $call8 = _get4();
    var $2 = HEAP32[5264116 >> 2];
    var $call912 = _ftell($2);
    var $add1013 = $call912 + 7 | 0;
    var $cmp14 = $add1013 >>> 0 < $add >>> 0;
    if ($cmp14) {
      label = 5;
      break;
    } else {
      label = 19;
      break;
    }
   case 5:
    _parse_riff();
    var $3 = HEAP32[5264116 >> 2];
    var $call9 = _ftell($3);
    var $add10 = $call9 + 7 | 0;
    var $cmp = $add10 >>> 0 < $add >>> 0;
    if ($cmp) {
      label = 5;
      break;
    } else {
      label = 19;
      break;
    }
   case 6:
    var $call12 = _memcmp($arraydecay, 5586120, 4);
    var $tobool13 = ($call12 | 0) == 0;
    if ($tobool13) {
      label = 7;
      break;
    } else {
      label = 12;
      break;
    }
   case 7:
    var $4 = HEAP32[5264116 >> 2];
    var $call1616 = _ftell($4);
    var $add1717 = $call1616 + 7 | 0;
    var $cmp1818 = $add1717 >>> 0 < $add >>> 0;
    if ($cmp1818) {
      label = 8;
      break;
    } else {
      label = 19;
      break;
    }
   case 8:
    var $call20 = _get2();
    var $conv = $call20 & 65535;
    var $call21 = _get2();
    var $add23 = $conv + 1 | 0;
    var $shr_mask = $add23 & 131070;
    var $cmp24 = ($shr_mask | 0) == 20;
    var $cmp26 = $call21 << 16 >> 16 == 20;
    var $or_cond = $cmp24 & $cmp26;
    if ($or_cond) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    _get_timestamp(0);
    label = 11;
    break;
   case 10:
    var $conv22 = $call21 & 65535;
    var $5 = HEAP32[5264116 >> 2];
    var $call30 = _fseek($5, $conv22, 1);
    label = 11;
    break;
   case 11:
    var $6 = HEAP32[5264116 >> 2];
    var $call16 = _ftell($6);
    var $add17 = $call16 + 7 | 0;
    var $cmp18 = $add17 >>> 0 < $add >>> 0;
    if ($cmp18) {
      label = 8;
      break;
    } else {
      label = 19;
      break;
    }
   case 12:
    var $call34 = _memcmp($arraydecay, 5586112, 4);
    var $tobool35 = ($call34 | 0) == 0;
    var $cmp37 = $call1 >>> 0 < 64;
    var $or_cond11 = $tobool35 & $cmp37;
    if ($or_cond11) {
      label = 13;
      break;
    } else {
      label = 18;
      break;
    }
   case 13:
    var $arraydecay40 = $date | 0;
    var $7 = HEAP32[5264116 >> 2];
    var $call41 = _fread($arraydecay40, 64, 1, $7);
    var $arrayidx = $date + $call1 | 0;
    HEAP8[$arrayidx] = 0;
    var $8 = $t;
    for (var $$dest = $8 >> 2, $$stop = $$dest + 11; $$dest < $$stop; $$dest++) {
      HEAP32[$$dest] = 0;
    }
    var $arraydecay43 = $month | 0;
    var $tm_mday = $t + 12 | 0;
    var $tm_hour = $t + 8 | 0;
    var $tm_min = $t + 4 | 0;
    var $tm_sec = $t | 0;
    var $tm_year = $t + 20 | 0;
    var $call44 = _sscanf($arraydecay40, 5586088, (tempInt = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempInt >> 2] = $arraydecay43, HEAP32[tempInt + 4 >> 2] = $tm_mday, HEAP32[tempInt + 8 >> 2] = $tm_hour, HEAP32[tempInt + 12 >> 2] = $tm_min, HEAP32[tempInt + 16 >> 2] = $tm_sec, HEAP32[tempInt + 20 >> 2] = $tm_year, tempInt));
    var $cmp45 = ($call44 | 0) == 6;
    if ($cmp45) {
      var $i_0 = 0;
      label = 14;
      break;
    } else {
      label = 19;
      break;
    }
   case 14:
    var $i_0;
    var $cmp48 = $i_0 >>> 0 < 12;
    if ($cmp48) {
      label = 15;
      break;
    } else {
      label = 16;
      break;
    }
   case 15:
    var $arraydecay51 = 5245800 + ($i_0 << 2) | 0;
    var $call53 = _strcasecmp($arraydecay51, $arraydecay43);
    var $tobool54 = ($call53 | 0) == 0;
    var $inc = $i_0 + 1 | 0;
    if ($tobool54) {
      label = 16;
      break;
    } else {
      var $i_0 = $inc;
      label = 14;
      break;
    }
   case 16:
    var $tm_mon = $t + 16 | 0;
    HEAP32[$tm_mon >> 2] = $i_0;
    var $9 = HEAP32[$tm_year >> 2];
    var $sub = $9 - 1900 | 0;
    HEAP32[$tm_year >> 2] = $sub;
    var $call56 = _mktime($t);
    var $cmp57 = ($call56 | 0) > 0;
    if ($cmp57) {
      label = 17;
      break;
    } else {
      label = 19;
      break;
    }
   case 17:
    var $call60 = _mktime($t);
    HEAP32[5243568 >> 2] = $call60;
    label = 19;
    break;
   case 18:
    var $10 = HEAP32[5264116 >> 2];
    var $call64 = _fseek($10, $call1, 1);
    label = 19;
    break;
   case 19:
    STACKTOP = __stackBase__;
    return;
  }
}
_parse_riff["X"] = 1;
function _parse_smal($fsize) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5264116 >> 2];
    var $call = _fseek($0, 2, 0);
    HEAP16[5262944 >> 1] = 18761;
    var $1 = HEAP32[5264116 >> 2];
    var $call1 = _fgetc($1);
    var $cmp = ($call1 | 0) == 6;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    var $2 = HEAP32[5264116 >> 2];
    var $call2 = _fseek($2, 5, 1);
    label = 4;
    break;
   case 4:
    var $call3 = _get4();
    var $cmp4 = ($call3 | 0) == ($fsize | 0);
    if ($cmp4) {
      label = 5;
      break;
    } else {
      label = 11;
      break;
    }
   case 5:
    var $cmp7 = ($call1 | 0) > 6;
    if ($cmp7) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    var $call9 = _get4();
    HEAP32[5428492 >> 2] = $call9;
    label = 7;
    break;
   case 7:
    var $call11 = _get2();
    HEAP16[5398712 >> 1] = $call11;
    HEAP16[5245036 >> 1] = $call11;
    var $call12 = _get2();
    HEAP16[5242964 >> 1] = $call12;
    HEAP16[5245028 >> 1] = $call12;
    HEAP8[5263628] = HEAP8[5586080];
    HEAP8[5263629] = HEAP8[5586081];
    HEAP8[5263630] = HEAP8[5586082];
    HEAP8[5263631] = HEAP8[5586083];
    HEAP8[5263632] = HEAP8[5586084];
    var $conv = $call12 & 65535;
    var $3 = HEAP16[5398712 >> 1];
    var $conv14 = $3 & 65535;
    var $call15 = _sprintf(5263372, 5586068, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $call1, HEAP32[tempInt + 4 >> 2] = $conv, HEAP32[tempInt + 8 >> 2] = $conv14, tempInt));
    if ($cmp) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    HEAP32[5263692 >> 2] = 74;
    label = 11;
    break;
   case 9:
    var $cmp20 = ($call1 | 0) == 9;
    if ($cmp20) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    HEAP32[5263692 >> 2] = 12;
    label = 11;
    break;
   case 11:
    STACKTOP = __stackBase__;
    return;
  }
}
function _parse_cine() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  label = 2;
  while (1) switch (label) {
   case 2:
    HEAP16[5262944 >> 1] = 18761;
    var $0 = HEAP32[5264116 >> 2];
    var $call = _fseek($0, 4, 0);
    var $call1 = _get2();
    var $cmp = $call1 << 16 >> 16 == 2;
    var $conv2 = $cmp & 1;
    HEAP32[5264100 >> 2] = $conv2;
    var $1 = HEAP32[5264116 >> 2];
    var $call3 = _fseek($1, 14, 1);
    var $call4 = _get4();
    var $2 = HEAP32[5264100 >> 2];
    var $mul = $2 * $call4 & -1;
    HEAP32[5264100 >> 2] = $mul;
    var $call5 = _get4();
    var $call6 = _get4();
    var $call7 = _get4();
    var $call8 = _get4();
    HEAP32[5243568 >> 2] = $call8;
    var $call9 = _get4();
    var $tobool = ($call9 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    HEAP32[5243568 >> 2] = $call9;
    label = 4;
    break;
   case 4:
    var $3 = HEAP32[5264116 >> 2];
    var $add = $call5 + 4 | 0;
    var $call10 = _fseek($3, $add, 0);
    var $call11 = _get4();
    var $conv12 = $call11 & 65535;
    HEAP16[5245028 >> 1] = $conv12;
    var $call13 = _get4();
    var $conv14 = $call13 & 65535;
    HEAP16[5245036 >> 1] = $conv14;
    var $call15 = _get2();
    var $call16 = _get2();
    var $conv17 = $call16 & 65535;
    if (($conv17 | 0) == 8) {
      label = 5;
      break;
    } else if (($conv17 | 0) == 16) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 5:
    HEAP32[5263692 >> 2] = 82;
    label = 7;
    break;
   case 6:
    HEAP32[5263692 >> 2] = 4;
    label = 7;
    break;
   case 7:
    var $4 = HEAP32[5264116 >> 2];
    var $add19 = $call6 + 792 | 0;
    var $call20 = _fseek($4, $add19, 0);
    HEAP8[5263628] = HEAP8[5586060];
    HEAP8[5263629] = HEAP8[5586061];
    HEAP8[5263630] = HEAP8[5586062];
    HEAP8[5263631] = HEAP8[5586063];
    HEAP8[5263632] = HEAP8[5586064];
    var $call22 = _get4();
    var $call23 = _sprintf(5263372, 5587088, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $call22, tempInt));
    var $5 = HEAP32[5264116 >> 2];
    var $call24 = _fseek($5, 12, 1);
    var $call25 = _get4();
    var $and = $call25 & 16777215;
    if (($and | 0) == 3) {
      label = 8;
      break;
    } else if (($and | 0) == 4) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 8:
    HEAP32[5427632 >> 2] = -1802201964;
    label = 11;
    break;
   case 9:
    HEAP32[5427632 >> 2] = 1229539657;
    label = 11;
    break;
   case 10:
    HEAP32[5264100 >> 2] = 0;
    label = 11;
    break;
   case 11:
    var $6 = HEAP32[5264116 >> 2];
    var $call29 = _fseek($6, 72, 1);
    var $call30 = _get4();
    var $add31 = $call30 + 3600 | 0;
    var $rem = ($add31 >>> 0) % 360;
    if (($rem | 0) == 270) {
      label = 12;
      break;
    } else if (($rem | 0) == 180) {
      label = 13;
      break;
    } else if (($rem | 0) == 90) {
      label = 14;
      break;
    } else if (($rem | 0) == 0) {
      label = 15;
      break;
    } else {
      label = 16;
      break;
    }
   case 12:
    HEAP32[5403048 >> 2] = 4;
    label = 16;
    break;
   case 13:
    HEAP32[5403048 >> 2] = 1;
    label = 16;
    break;
   case 14:
    HEAP32[5403048 >> 2] = 7;
    label = 16;
    break;
   case 15:
    HEAP32[5403048 >> 2] = 2;
    label = 16;
    break;
   case 16:
    var $call37 = _getreal(11);
    var $conv38 = $call37;
    HEAPF32[5561124 >> 2] = $conv38;
    var $call39 = _getreal(11);
    var $conv40 = $call39;
    HEAPF32[5561132 >> 2] = $conv40;
    var $call41 = _get4();
    var $shl = -1 << $call41;
    var $neg = $shl ^ -1;
    HEAP32[5263496 >> 2] = $neg;
    var $7 = HEAP32[5264116 >> 2];
    var $call42 = _fseek($7, 668, 1);
    var $call43 = _get4();
    var $conv44 = $call43 >>> 0;
    var $div = $conv44 / 1e9;
    var $conv45 = $div;
    HEAPF32[5244912 >> 2] = $conv45;
    var $8 = HEAP32[5264116 >> 2];
    var $call46 = _fseek($8, $call7, 0);
    var $9 = HEAP32[5244920 >> 2];
    var $10 = HEAP32[5264100 >> 2];
    var $cmp47 = $9 >>> 0 < $10 >>> 0;
    if ($cmp47) {
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 17:
    var $11 = HEAP32[5264116 >> 2];
    var $mul50 = $9 << 3;
    var $call51 = _fseek($11, $mul50, 1);
    label = 18;
    break;
   case 18:
    var $call53 = _get4();
    var $add55 = $call53 + 8 | 0;
    HEAP32[5428492 >> 2] = $add55;
    var $call57 = _get4();
    STACKTOP = __stackBase__;
    return;
  }
}
_parse_cine["X"] = 1;
function _parse_redcine() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  label = 2;
  while (1) switch (label) {
   case 2:
    HEAP16[5262944 >> 1] = 19789;
    HEAP32[5264100 >> 2] = 0;
    var $0 = HEAP32[5264116 >> 2];
    var $call = _fseek($0, 52, 0);
    var $call1 = _get4();
    var $conv = $call1 & 65535;
    HEAP16[5242964 >> 1] = $conv;
    var $call2 = _get4();
    var $conv3 = $call2 & 65535;
    HEAP16[5398712 >> 1] = $conv3;
    var $1 = HEAP32[5264116 >> 2];
    var $call4 = _fseek($1, 0, 2);
    var $2 = HEAP32[5264116 >> 2];
    var $call5 = _ftell($2);
    var $and = $call5 & 511;
    var $sub = -$and | 0;
    var $call6 = _fseek($2, $sub, 1);
    var $call7 = _get4();
    var $cmp = ($call7 | 0) == ($and | 0);
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    var $call9 = _get4();
    var $cmp10 = ($call9 | 0) == 1380273986;
    if ($cmp10) {
      label = 9;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $3 = HEAP32[_stderr >> 2];
    var $4 = HEAP32[5264120 >> 2];
    var $call12 = _fprintf($3, 5585992, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $4, tempInt));
    var $5 = HEAP32[5264116 >> 2];
    var $call13 = _fseek($5, 0, 0);
    var $call141 = _get4();
    var $cmp152 = ($call141 | 0) == -1;
    if ($cmp152) {
      label = 10;
      break;
    } else {
      var $call143 = $call141;
      label = 5;
      break;
    }
   case 5:
    var $call143;
    var $call17 = _get4();
    var $cmp18 = ($call17 | 0) == 1380271190;
    if ($cmp18) {
      label = 6;
      break;
    } else {
      label = 8;
      break;
    }
   case 6:
    var $6 = HEAP32[5264100 >> 2];
    var $inc = $6 + 1 | 0;
    HEAP32[5264100 >> 2] = $inc;
    var $7 = HEAP32[5244920 >> 2];
    var $cmp21 = ($6 | 0) == ($7 | 0);
    if ($cmp21) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    var $8 = HEAP32[5264116 >> 2];
    var $call24 = _ftell($8);
    var $sub25 = $call24 - 8 | 0;
    HEAP32[5428492 >> 2] = $sub25;
    label = 8;
    break;
   case 8:
    var $9 = HEAP32[5264116 >> 2];
    var $sub27 = $call143 - 8 | 0;
    var $call28 = _fseek($9, $sub27, 1);
    var $call14 = _get4();
    var $cmp15 = ($call14 | 0) == -1;
    if ($cmp15) {
      label = 10;
      break;
    } else {
      var $call143 = $call14;
      label = 5;
      break;
    }
   case 9:
    var $call29 = _get4();
    var $10 = HEAP32[5264116 >> 2];
    var $call30 = _fseek($10, 12, 1);
    var $call31 = _get4();
    HEAP32[5264100 >> 2] = $call31;
    var $11 = HEAP32[5264116 >> 2];
    var $add = $call29 + 8 | 0;
    var $12 = HEAP32[5244920 >> 2];
    var $mul = $12 << 2;
    var $add32 = $add + $mul | 0;
    var $call33 = _fseek($11, $add32, 0);
    var $call34 = _get4();
    HEAP32[5428492 >> 2] = $call34;
    label = 10;
    break;
   case 10:
    STACKTOP = __stackBase__;
    return;
  }
}
_parse_redcine["X"] = 1;
function _foveon_gets($offset, $str) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5264116 >> 2];
    var $call = _fseek($0, $offset, 0);
    var $i_0 = 0;
    label = 3;
    break;
   case 3:
    var $i_0;
    var $cmp = ($i_0 | 0) < 63;
    if ($cmp) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $arrayidx5_pre = $str + $i_0 | 0;
    var $arrayidx5_pre_phi = $arrayidx5_pre;
    label = 6;
    break;
   case 5:
    var $call1 = _get2();
    var $conv = $call1 & 255;
    var $arrayidx = $str + $i_0 | 0;
    HEAP8[$arrayidx] = $conv;
    var $cmp3 = $conv << 24 >> 24 == 0;
    var $inc = $i_0 + 1 | 0;
    if ($cmp3) {
      var $arrayidx5_pre_phi = $arrayidx;
      label = 6;
      break;
    } else {
      var $i_0 = $inc;
      label = 3;
      break;
    }
   case 6:
    var $arrayidx5_pre_phi;
    HEAP8[$arrayidx5_pre_phi] = 0;
    return;
  }
}
function _parse_foveon() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 2176 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $poff = __stackBase__;
    var $name = __stackBase__ + 2048;
    var $value = __stackBase__ + 2112;
    HEAP16[5262944 >> 1] = 18761;
    var $0 = HEAP32[5264116 >> 2];
    var $call = _fseek($0, 36, 0);
    var $call1 = _get4();
    HEAP32[5403048 >> 2] = $call1;
    var $1 = HEAP32[5264116 >> 2];
    var $call2 = _fseek($1, -4, 2);
    var $2 = HEAP32[5264116 >> 2];
    var $call3 = _get4();
    var $call4 = _fseek($2, $call3, 0);
    var $call5 = _get4();
    var $cmp = ($call5 | 0) == 1682130259;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 46;
      break;
    }
   case 3:
    var $call6 = _get4();
    var $call7 = _get4();
    var $tobool30 = ($call7 | 0) == 0;
    if ($tobool30) {
      label = 45;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $arraydecay = $name | 0;
    var $arraydecay88 = $value | 0;
    var $img_031 = 0;
    var $dec32_in = $call7;
    label = 5;
    break;
   case 5:
    var $dec32_in;
    var $img_031;
    var $dec32 = $dec32_in - 1 | 0;
    var $call8 = _get4();
    var $call9 = _get4();
    var $call10 = _get4();
    var $3 = HEAP32[5264116 >> 2];
    var $call11 = _ftell($3);
    var $4 = HEAP32[5264116 >> 2];
    var $call12 = _fseek($4, $call8, 0);
    var $call13 = _get4();
    var $shl = $call10 << 24;
    var $or = $shl | 541279571;
    var $cmp14 = ($call13 | 0) == ($or | 0);
    if ($cmp14) {
      label = 6;
      break;
    } else {
      label = 46;
      break;
    }
   case 6:
    if (($call10 | 0) == 1195461961 | ($call10 | 0) == 843140425) {
      label = 7;
      break;
    } else if (($call10 | 0) == 1179468099) {
      label = 21;
      break;
    } else if (($call10 | 0) == 1347375696) {
      label = 22;
      break;
    } else {
      var $img_1 = $img_031;
      label = 44;
      break;
    }
   case 7:
    var $5 = HEAP32[5264116 >> 2];
    var $call17 = _fseek($5, 8, 1);
    var $call18 = _get4();
    var $call19 = _get4();
    var $call20 = _get4();
    var $6 = HEAP16[5245028 >> 1];
    var $conv = $6 & 65535;
    var $cmp21 = ($call19 | 0) > ($conv | 0);
    if ($cmp21) {
      label = 8;
      break;
    } else {
      label = 15;
      break;
    }
   case 8:
    var $7 = HEAP16[5245036 >> 1];
    var $conv23 = $7 & 65535;
    var $cmp24 = ($call20 | 0) > ($conv23 | 0);
    if ($cmp24) {
      label = 9;
      break;
    } else {
      label = 15;
      break;
    }
   case 9:
    if (($call18 | 0) == 5) {
      label = 10;
      break;
    } else if (($call18 | 0) == 6) {
      label = 11;
      break;
    } else if (($call18 | 0) == 30) {
      label = 12;
      break;
    } else {
      label = 13;
      break;
    }
   case 10:
    HEAP32[5263696 >> 2] = 1;
    label = 11;
    break;
   case 11:
    HEAP32[5263692 >> 2] = 6;
    label = 14;
    break;
   case 12:
    HEAP32[5263692 >> 2] = 92;
    label = 14;
    break;
   case 13:
    HEAP32[5263692 >> 2] = 0;
    label = 14;
    break;
   case 14:
    var $conv30 = $call19 & 65535;
    HEAP16[5245028 >> 1] = $conv30;
    var $conv31 = $call20 & 65535;
    HEAP16[5245036 >> 1] = $conv31;
    var $add = $call8 + 28 | 0;
    HEAP32[5428492 >> 2] = $add;
    label = 15;
    break;
   case 15:
    var $8 = HEAP32[5264116 >> 2];
    var $add33 = $call8 + 28 | 0;
    var $call34 = _fseek($8, $add33, 0);
    var $9 = HEAP32[5264116 >> 2];
    var $call35 = _fgetc($9);
    var $cmp36 = ($call35 | 0) == 255;
    if ($cmp36) {
      label = 16;
      break;
    } else {
      label = 19;
      break;
    }
   case 16:
    var $10 = HEAP32[5264116 >> 2];
    var $call39 = _fgetc($10);
    var $cmp40 = ($call39 | 0) == 216;
    if ($cmp40) {
      label = 17;
      break;
    } else {
      label = 19;
      break;
    }
   case 17:
    var $11 = HEAP32[5244056 >> 2];
    var $sub = $call9 - 28 | 0;
    var $cmp43 = $11 >>> 0 < $sub >>> 0;
    if ($cmp43) {
      label = 18;
      break;
    } else {
      label = 19;
      break;
    }
   case 18:
    HEAP32[5244044 >> 2] = $add33;
    HEAP32[5244056 >> 2] = $sub;
    HEAP32[5242960 >> 2] = 60;
    label = 19;
    break;
   case 19:
    var $inc = $img_031 + 1 | 0;
    var $cmp49 = ($inc | 0) != 2;
    var $12 = HEAP32[5244056 >> 2];
    var $tobool52 = ($12 | 0) != 0;
    var $or_cond = $cmp49 | $tobool52;
    if ($or_cond) {
      var $img_1 = $inc;
      label = 44;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    var $add54 = $call8 + 24 | 0;
    HEAP32[5244044 >> 2] = $add54;
    var $conv55 = $call19 & 65535;
    HEAP16[5244040 >> 1] = $conv55;
    var $conv56 = $call20 & 65535;
    HEAP16[5244060 >> 1] = $conv56;
    HEAP32[5242960 >> 2] = 48;
    var $img_1 = 2;
    label = 44;
    break;
   case 21:
    var $add59 = $call8 + 8 | 0;
    HEAP32[5263440 >> 2] = $add59;
    var $sub60 = $call9 - 28 | 0;
    HEAP32[5263444 >> 2] = $sub60;
    var $img_1 = $img_031;
    label = 44;
    break;
   case 22:
    var $call62 = _get4();
    var $call63 = _get4();
    var $13 = HEAP32[5264116 >> 2];
    var $call64 = _fseek($13, 12, 1);
    var $cmp67 = $call63 >>> 0 > 256;
    var $_call63 = $cmp67 ? 256 : $call63;
    var $mul71 = $_call63 << 1;
    var $cmp7225 = ($mul71 | 0) > 0;
    if ($cmp7225) {
      label = 23;
      break;
    } else {
      label = 25;
      break;
    }
   case 23:
    var $mul = $call63 << 3;
    var $add65 = $call8 + 24 | 0;
    var $add66 = $add65 + $mul | 0;
    var $14 = $call63 >>> 0 < 256;
    var $15 = $call63 << 1;
    var $_op = $15 ^ -2;
    var $_op_op = -2 - $_op | 0;
    var $16 = $14 ? $_op_op : 512;
    var $i_026 = 0;
    label = 24;
    break;
   case 24:
    var $i_026;
    var $call74 = _get4();
    var $mul75 = $call74 << 1;
    var $add76 = $add66 + $mul75 | 0;
    var $arrayidx77 = $poff + ($i_026 << 2) | 0;
    HEAP32[$arrayidx77 >> 2] = $add76;
    var $inc78 = $i_026 + 1 | 0;
    var $exitcond = ($inc78 | 0) == ($16 | 0);
    if ($exitcond) {
      label = 25;
      break;
    } else {
      var $i_026 = $inc78;
      label = 24;
      break;
    }
   case 25:
    var $cmp8027 = ($_call63 | 0) > 0;
    if ($cmp8027) {
      label = 26;
      break;
    } else {
      var $img_1 = $img_031;
      label = 44;
      break;
    }
   case 26:
    var $17 = $call63 >>> 0 < 256;
    var $18 = $17 ? $call63 : 256;
    var $i_128 = 0;
    label = 27;
    break;
   case 27:
    var $i_128;
    var $arrayidx84 = $poff + ($i_128 << 3) | 0;
    var $19 = HEAP32[$arrayidx84 >> 2];
    _foveon_gets($19, $arraydecay);
    var $arrayidx87 = $poff + ($i_128 << 3) + 4 | 0;
    var $20 = HEAP32[$arrayidx87 >> 2];
    _foveon_gets($20, $arraydecay88);
    var $call91 = _strcmp($arraydecay, 5585988);
    var $tobool92 = ($call91 | 0) == 0;
    if ($tobool92) {
      label = 28;
      break;
    } else {
      label = 29;
      break;
    }
   case 28:
    var $call95 = _atoi($arraydecay88);
    var $conv96 = $call95 | 0;
    HEAPF32[5264096 >> 2] = $conv96;
    label = 29;
    break;
   case 29:
    var $call99 = _strcmp($arraydecay, 5585976);
    var $tobool100 = ($call99 | 0) == 0;
    if ($tobool100) {
      label = 30;
      break;
    } else {
      label = 31;
      break;
    }
   case 30:
    var $call103 = _strcpy(5263628, $arraydecay88);
    label = 31;
    break;
   case 31:
    var $call106 = _strcmp($arraydecay, 5585964);
    var $tobool107 = ($call106 | 0) == 0;
    if ($tobool107) {
      label = 32;
      break;
    } else {
      label = 33;
      break;
    }
   case 32:
    var $call110 = _strcpy(5263372, $arraydecay88);
    label = 33;
    break;
   case 33:
    var $call113 = _strcmp($arraydecay, 5585956);
    var $tobool114 = ($call113 | 0) == 0;
    if ($tobool114) {
      label = 34;
      break;
    } else {
      label = 35;
      break;
    }
   case 34:
    var $call117 = _strcpy(5263308, $arraydecay88);
    label = 35;
    break;
   case 35:
    var $call120 = _strcmp($arraydecay, 5585948);
    var $tobool121 = ($call120 | 0) == 0;
    if ($tobool121) {
      label = 36;
      break;
    } else {
      label = 37;
      break;
    }
   case 36:
    var $call124 = _atoi($arraydecay88);
    HEAP32[5243568 >> 2] = $call124;
    label = 37;
    break;
   case 37:
    var $call127 = _strcmp($arraydecay, 5585940);
    var $tobool128 = ($call127 | 0) == 0;
    if ($tobool128) {
      label = 38;
      break;
    } else {
      label = 39;
      break;
    }
   case 38:
    var $call131 = _atoi($arraydecay88);
    var $conv132 = $call131 | 0;
    var $div = $conv132 / 1e6;
    var $conv133 = $div;
    HEAPF32[5244912 >> 2] = $conv133;
    label = 39;
    break;
   case 39:
    var $call136 = _strcmp($arraydecay, 5585928);
    var $tobool137 = ($call136 | 0) == 0;
    if ($tobool137) {
      label = 40;
      break;
    } else {
      label = 41;
      break;
    }
   case 40:
    var $call140 = _atof($arraydecay88);
    var $conv141 = $call140;
    HEAPF32[5561468 >> 2] = $conv141;
    label = 41;
    break;
   case 41:
    var $call144 = _strcmp($arraydecay, 5585920);
    var $tobool145 = ($call144 | 0) == 0;
    if ($tobool145) {
      label = 42;
      break;
    } else {
      label = 43;
      break;
    }
   case 42:
    var $call148 = _atof($arraydecay88);
    var $conv149 = $call148;
    HEAPF32[5403044 >> 2] = $conv149;
    label = 43;
    break;
   case 43:
    var $inc152 = $i_128 + 1 | 0;
    var $exitcond34 = ($inc152 | 0) == ($18 | 0);
    if ($exitcond34) {
      var $img_1 = $img_031;
      label = 44;
      break;
    } else {
      var $i_128 = $inc152;
      label = 27;
      break;
    }
   case 44:
    var $img_1;
    var $21 = HEAP32[5264116 >> 2];
    var $call155 = _fseek($21, $call11, 0);
    var $tobool = ($dec32 | 0) == 0;
    if ($tobool) {
      label = 45;
      break;
    } else {
      var $img_031 = $img_1;
      var $dec32_in = $dec32;
      label = 5;
      break;
    }
   case 45:
    HEAP8[5264104] = 1;
    label = 46;
    break;
   case 46:
    STACKTOP = __stackBase__;
    return;
  }
}
_parse_foveon["X"] = 1;
function _adobe_coeff($make, $model) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 228 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $cam_xyz = __stackBase__;
    var $name = __stackBase__ + 96;
    var $arraydecay = $name | 0;
    var $call = _sprintf($arraydecay, 5579180, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $make, HEAP32[tempInt + 4 >> 2] = $model, tempInt));
    var $i_0 = 0;
    label = 3;
    break;
   case 3:
    var $i_0;
    var $cmp = $i_0 >>> 0 < 368;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 11;
      break;
    }
   case 4:
    var $prefix = 5561472 + ($i_0 << 5) | 0;
    var $0 = HEAP32[$prefix >> 2];
    var $call4 = _strlen($0);
    var $call5 = _strncmp($arraydecay, $0, $call4);
    var $tobool = ($call5 | 0) == 0;
    var $inc37 = $i_0 + 1 | 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      var $i_0 = $inc37;
      label = 3;
      break;
    }
   case 5:
    var $black = 5561476 + ($i_0 << 5) | 0;
    var $1 = HEAP16[$black >> 1];
    var $tobool7 = $1 << 16 >> 16 == 0;
    if ($tobool7) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $conv = $1 & 65535;
    HEAP32[5561400 >> 2] = $conv;
    label = 7;
    break;
   case 7:
    var $maximum = 5561478 + ($i_0 << 5) | 0;
    var $2 = HEAP16[$maximum >> 1];
    var $tobool12 = $2 << 16 >> 16 == 0;
    if ($tobool12) {
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $conv16 = $2 & 65535;
    HEAP32[5263496 >> 2] = $conv16;
    label = 9;
    break;
   case 9:
    var $tobool20 = ($i_0 | 0) == 39;
    if ($tobool20) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $arrayidx28 = 5561480 + ($i_0 << 5) | 0;
    var $3 = HEAP16[$arrayidx28 >> 1];
    var $conv30 = $3 << 16 >> 16;
    var $div = $conv30 / 1e4;
    var $arrayidx32 = $cam_xyz | 0;
    HEAPF64[tempDoublePtr >> 3] = $div, HEAP32[$arrayidx32 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx32 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $arrayidx28_1 = 5561482 + ($i_0 << 5) | 0;
    var $4 = HEAP16[$arrayidx28_1 >> 1];
    var $conv30_1 = $4 << 16 >> 16;
    var $div_1 = $conv30_1 / 1e4;
    var $arrayidx32_1 = $cam_xyz + 8 | 0;
    HEAPF64[tempDoublePtr >> 3] = $div_1, HEAP32[$arrayidx32_1 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx32_1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $arrayidx28_2 = 5561484 + ($i_0 << 5) | 0;
    var $5 = HEAP16[$arrayidx28_2 >> 1];
    var $conv30_2 = $5 << 16 >> 16;
    var $div_2 = $conv30_2 / 1e4;
    var $arrayidx32_2 = $cam_xyz + 16 | 0;
    HEAPF64[tempDoublePtr >> 3] = $div_2, HEAP32[$arrayidx32_2 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx32_2 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $arrayidx28_3 = 5561486 + ($i_0 << 5) | 0;
    var $6 = HEAP16[$arrayidx28_3 >> 1];
    var $conv30_3 = $6 << 16 >> 16;
    var $div_3 = $conv30_3 / 1e4;
    var $arrayidx32_3 = $cam_xyz + 24 | 0;
    HEAPF64[tempDoublePtr >> 3] = $div_3, HEAP32[$arrayidx32_3 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx32_3 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $arrayidx28_4 = 5561488 + ($i_0 << 5) | 0;
    var $7 = HEAP16[$arrayidx28_4 >> 1];
    var $conv30_4 = $7 << 16 >> 16;
    var $div_4 = $conv30_4 / 1e4;
    var $arrayidx32_4 = $cam_xyz + 32 | 0;
    HEAPF64[tempDoublePtr >> 3] = $div_4, HEAP32[$arrayidx32_4 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx32_4 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $arrayidx28_5 = 5561490 + ($i_0 << 5) | 0;
    var $8 = HEAP16[$arrayidx28_5 >> 1];
    var $conv30_5 = $8 << 16 >> 16;
    var $div_5 = $conv30_5 / 1e4;
    var $arrayidx32_5 = $cam_xyz + 40 | 0;
    HEAPF64[tempDoublePtr >> 3] = $div_5, HEAP32[$arrayidx32_5 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx32_5 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $arrayidx28_6 = 5561492 + ($i_0 << 5) | 0;
    var $9 = HEAP16[$arrayidx28_6 >> 1];
    var $conv30_6 = $9 << 16 >> 16;
    var $div_6 = $conv30_6 / 1e4;
    var $arrayidx32_6 = $cam_xyz + 48 | 0;
    HEAPF64[tempDoublePtr >> 3] = $div_6, HEAP32[$arrayidx32_6 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx32_6 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $arrayidx28_7 = 5561494 + ($i_0 << 5) | 0;
    var $10 = HEAP16[$arrayidx28_7 >> 1];
    var $conv30_7 = $10 << 16 >> 16;
    var $div_7 = $conv30_7 / 1e4;
    var $arrayidx32_7 = $cam_xyz + 56 | 0;
    HEAPF64[tempDoublePtr >> 3] = $div_7, HEAP32[$arrayidx32_7 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx32_7 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $arrayidx28_8 = 5561496 + ($i_0 << 5) | 0;
    var $11 = HEAP16[$arrayidx28_8 >> 1];
    var $conv30_8 = $11 << 16 >> 16;
    var $div_8 = $conv30_8 / 1e4;
    var $arrayidx32_8 = $cam_xyz + 64 | 0;
    HEAPF64[tempDoublePtr >> 3] = $div_8, HEAP32[$arrayidx32_8 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx32_8 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $arrayidx28_9 = 5561498 + ($i_0 << 5) | 0;
    var $12 = HEAP16[$arrayidx28_9 >> 1];
    var $conv30_9 = $12 << 16 >> 16;
    var $div_9 = $conv30_9 / 1e4;
    var $arrayidx32_9 = $cam_xyz + 72 | 0;
    HEAPF64[tempDoublePtr >> 3] = $div_9, HEAP32[$arrayidx32_9 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx32_9 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $arrayidx28_10 = 5561500 + ($i_0 << 5) | 0;
    var $13 = HEAP16[$arrayidx28_10 >> 1];
    var $conv30_10 = $13 << 16 >> 16;
    var $div_10 = $conv30_10 / 1e4;
    var $arrayidx32_10 = $cam_xyz + 80 | 0;
    HEAPF64[tempDoublePtr >> 3] = $div_10, HEAP32[$arrayidx32_10 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx32_10 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $arrayidx28_11 = 5561502 + ($i_0 << 5) | 0;
    var $14 = HEAP16[$arrayidx28_11 >> 1];
    var $conv30_11 = $14 << 16 >> 16;
    var $div_11 = $conv30_11 / 1e4;
    var $arrayidx32_11 = $cam_xyz + 88 | 0;
    HEAPF64[tempDoublePtr >> 3] = $div_11, HEAP32[$arrayidx32_11 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx32_11 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $arraydecay33 = $cam_xyz | 0;
    _cam_xyz_coeff($arraydecay33);
    label = 11;
    break;
   case 11:
    STACKTOP = __stackBase__;
    return;
  }
}
_adobe_coeff["X"] = 1;
function _simple_coeff($index) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    HEAP32[5245040 >> 2] = 0;
    var $0 = HEAP32[5560840 >> 2];
    var $cmp26 = ($0 | 0) > 0;
    var $1 = $0 << 2;
    if ($cmp26) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    var $scevgep11 = 5244720 + $index * 48 | 0;
    var $scevgep1112 = $scevgep11;
    _memcpy(5244964, $scevgep1112, $1);
    var $scevgep11_1 = 5244720 + $index * 48 + ($0 << 2) | 0;
    var $scevgep1112_1 = $scevgep11_1;
    _memcpy(5244980, $scevgep1112_1, $1);
    var $2 = $0 << 1;
    var $scevgep11_2 = 5244720 + $index * 48 + ($2 << 2) | 0;
    var $scevgep1112_2 = $scevgep11_2;
    _memcpy(5244996, $scevgep1112_2, $1);
    label = 4;
    break;
   case 4:
    return;
  }
}
function _guess_byte_order() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $test = __stackBase__;
    var $arraydecay = $test | 0;
    var $0 = HEAP32[5264116 >> 2];
    var $call = _fread($arraydecay, 2, 2, $0);
    var $t_017 = 2;
    var $dec18 = 65533;
    var $sum_sroa_0_0 = 0;
    var $sum_sroa_1_0 = 0;
    label = 3;
    break;
   case 3:
    var $sum_sroa_1_0;
    var $sum_sroa_0_0;
    var $dec18;
    var $t_017;
    var $arraydecay2 = $test + ($t_017 << 1) | 0;
    var $1 = HEAP32[5264116 >> 2];
    var $call3 = _fread($arraydecay2, 2, 1, $1);
    var $xor = $t_017 ^ 2;
    var $arrayidx7 = $test + ($xor << 1) | 0;
    var $2 = HEAP8[$arrayidx7];
    var $conv = $2 & 255;
    var $shl = $conv << 8;
    var $arrayidx11 = $test + ($xor << 1) + 1 | 0;
    var $3 = HEAP8[$arrayidx11];
    var $conv12 = $3 & 255;
    var $or = $shl | $conv12;
    var $4 = HEAP8[$arraydecay2];
    var $conv15 = $4 & 255;
    var $shl16 = $conv15 << 8;
    var $arrayidx21 = $test + ($t_017 << 1) + 1 | 0;
    var $5 = HEAP8[$arrayidx21];
    var $conv22 = $5 & 255;
    var $or23 = $shl16 | $conv22;
    var $sub24 = $or - $or23 | 0;
    var $conv25 = $sub24 | 0;
    var $mul = $conv25 * $conv25;
    var $add = $sum_sroa_0_0 + $mul;
    var $shl_1 = $conv12 << 8;
    var $or_1 = $shl_1 | $conv;
    var $shl16_1 = $conv22 << 8;
    var $or23_1 = $shl16_1 | $conv15;
    var $sub24_1 = $or_1 - $or23_1 | 0;
    var $conv25_1 = $sub24_1 | 0;
    var $mul_1 = $conv25_1 * $conv25_1;
    var $add_1 = $sum_sroa_1_0 + $mul_1;
    var $add27 = $t_017 + 1 | 0;
    var $and = $add27 & 3;
    var $dec = $dec18 - 1 | 0;
    var $tobool = ($dec18 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      var $t_017 = $and;
      var $dec18 = $dec;
      var $sum_sroa_0_0 = $add;
      var $sum_sroa_1_0 = $add_1;
      label = 3;
      break;
    }
   case 4:
    var $cmp31 = $add < $add_1;
    var $conv33 = $cmp31 ? 19789 : 18761;
    STACKTOP = __stackBase__;
    return $conv33;
  }
}
function _find_green($bps, $bite, $off0, $off1) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8272 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $img = __stackBase__;
    var $sum = __stackBase__ + 8256;
    var $0 = $sum;
    HEAP32[$0 >> 2] = 0;
    HEAP32[$0 + 4 >> 2] = 0;
    HEAP32[$0 + 8 >> 2] = 0;
    HEAP32[$0 + 12 >> 2] = 0;
    var $sub19 = 64 - $bps | 0;
    var $sh_prom24$0 = $sub19;
    var $sh_prom$0 = $bite;
    var $cmp1037 = ($bite | 0) > 0;
    var $1 = HEAP32[5264116 >> 2];
    var $call = _fseek($1, $off0, 0);
    var $2 = HEAP16[5242964 >> 1];
    var $cmp246 = $2 << 16 >> 16 == 0;
    if ($cmp246) {
      var $bitbuf_1_lcssa$1 = 0;
      var $bitbuf_1_lcssa$0 = 0;
      label = 10;
      break;
    } else {
      var $bitbuf_147$1 = 0;
      var $bitbuf_147$0 = 0;
      var $vbits_048 = 0;
      var $col_049 = 0;
      var $3 = $2;
      label = 4;
      break;
    }
   case 3:
    var $arrayidx39_phi_trans_insert = $img | 0;
    var $_pre = HEAP16[$arrayidx39_phi_trans_insert >> 1];
    var $arrayidx69_phi_trans_insert = $img + 4128 | 0;
    var $_pre1 = HEAP16[$arrayidx69_phi_trans_insert >> 1];
    var $c_136 = 0;
    var $9 = $_pre;
    var $8 = $_pre1;
    label = 11;
    break;
   case 4:
    var $3;
    var $col_049;
    var $vbits_048;
    var $bitbuf_147$0;
    var $bitbuf_147$1;
    var $sub = $vbits_048 - $bps | 0;
    var $cmp640 = ($sub | 0) < 0;
    if ($cmp640) {
      var $bitbuf_241$1 = $bitbuf_147$1;
      var $bitbuf_241$0 = $bitbuf_147$0;
      var $vbits_142 = $sub;
      label = 5;
      break;
    } else {
      var $bitbuf_2_lcssa$1 = $bitbuf_147$1;
      var $bitbuf_2_lcssa$0 = $bitbuf_147$0;
      var $vbits_1_lcssa = $sub;
      var $5 = $3;
      label = 9;
      break;
    }
   case 5:
    var $vbits_142;
    var $bitbuf_241$0;
    var $bitbuf_241$1;
    Runtime.bitshift64($bitbuf_241$0, $bitbuf_241$1, 0, $sh_prom$0);
    var $shl$0 = HEAP32[tempDoublePtr >> 2], $shl$1 = HEAP32[tempDoublePtr + 4 >> 2];
    if ($cmp1037) {
      var $bitbuf_338$1 = $shl$1;
      var $bitbuf_338$0 = $shl$0;
      var $i_039 = 0;
      label = 6;
      break;
    } else {
      var $bitbuf_3_lcssa$1 = $shl$1;
      var $bitbuf_3_lcssa$0 = $shl$0;
      label = 7;
      break;
    }
   case 6:
    var $i_039;
    var $bitbuf_338$0;
    var $bitbuf_338$1;
    var $4 = HEAP32[5264116 >> 2];
    var $call13 = _fgetc($4);
    var $shl14 = $call13 << $i_039;
    var $conv15$0 = $shl14;
    var $conv15$1 = 0;
    var $or$0 = $conv15$0 | $bitbuf_338$0;
    var $or$1 = $conv15$1 | $bitbuf_338$1;
    var $add = $i_039 + 8 | 0;
    var $cmp10 = ($add | 0) < ($bite | 0);
    if ($cmp10) {
      var $bitbuf_338$1 = $or$1;
      var $bitbuf_338$0 = $or$0;
      var $i_039 = $add;
      label = 6;
      break;
    } else {
      var $bitbuf_3_lcssa$1 = $or$1;
      var $bitbuf_3_lcssa$0 = $or$0;
      label = 7;
      break;
    }
   case 7:
    var $bitbuf_3_lcssa$0;
    var $bitbuf_3_lcssa$1;
    var $add17 = $vbits_142 + $bite | 0;
    var $cmp6 = ($add17 | 0) < 0;
    if ($cmp6) {
      var $bitbuf_241$1 = $bitbuf_3_lcssa$1;
      var $bitbuf_241$0 = $bitbuf_3_lcssa$0;
      var $vbits_142 = $add17;
      label = 5;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $_pre5 = HEAP16[5242964 >> 1];
    var $bitbuf_2_lcssa$1 = $bitbuf_3_lcssa$1;
    var $bitbuf_2_lcssa$0 = $bitbuf_3_lcssa$0;
    var $vbits_1_lcssa = $add17;
    var $5 = $_pre5;
    label = 9;
    break;
   case 9:
    var $5;
    var $vbits_1_lcssa;
    var $bitbuf_2_lcssa$0;
    var $bitbuf_2_lcssa$1;
    var $sub20 = $sub19 - $vbits_1_lcssa | 0;
    var $sh_prom21$0 = $sub20;
    Runtime.bitshift64($bitbuf_2_lcssa$0, $bitbuf_2_lcssa$1, 0, $sh_prom21$0);
    var $shl22$0 = HEAP32[tempDoublePtr >> 2], $shl22$1 = HEAP32[tempDoublePtr + 4 >> 2];
    Runtime.bitshift64($shl22$0, $shl22$1, 2, $sh_prom24$0);
    var $shr$0 = HEAP32[tempDoublePtr >> 2];
    var $conv25$0 = $shr$0;
    var $conv25 = $conv25$0 & 65535;
    var $arrayidx26 = $img + ($col_049 << 1) | 0;
    HEAP16[$arrayidx26 >> 1] = $conv25;
    var $inc = $col_049 + 1 | 0;
    var $conv = $5 & 65535;
    var $cmp2 = ($inc | 0) < ($conv | 0);
    if ($cmp2) {
      var $bitbuf_147$1 = $bitbuf_2_lcssa$1;
      var $bitbuf_147$0 = $bitbuf_2_lcssa$0;
      var $vbits_048 = $vbits_1_lcssa;
      var $col_049 = $inc;
      var $3 = $5;
      label = 4;
      break;
    } else {
      var $bitbuf_1_lcssa$1 = $bitbuf_2_lcssa$1;
      var $bitbuf_1_lcssa$0 = $bitbuf_2_lcssa$0;
      label = 10;
      break;
    }
   case 10:
    var $bitbuf_1_lcssa$0;
    var $bitbuf_1_lcssa$1;
    var $6 = HEAP32[5264116 >> 2];
    var $call_1 = _fseek($6, $off1, 0);
    var $7 = HEAP16[5242964 >> 1];
    var $cmp246_1 = $7 << 16 >> 16 == 0;
    if ($cmp246_1) {
      var $19 = 0;
      label = 20;
      break;
    } else {
      var $bitbuf_147_1$1 = $bitbuf_1_lcssa$1;
      var $bitbuf_147_1$0 = $bitbuf_1_lcssa$0;
      var $vbits_048_1 = 0;
      var $col_049_1 = 0;
      var $16 = $7;
      label = 14;
      break;
    }
   case 11:
    var $8;
    var $9;
    var $c_136;
    var $conv40 = $9 & 65535;
    var $add41 = $c_136 + 1 | 0;
    var $arrayidx43 = $img + 4128 + ($add41 << 1) | 0;
    var $10 = HEAP16[$arrayidx43 >> 1];
    var $conv44 = $10 & 65535;
    var $sub45 = $conv40 - $conv44 | 0;
    var $shr54 = $sub45 >> 31;
    var $xor = $shr54 ^ $sub45;
    var $sub64 = $xor - $shr54 | 0;
    var $conv65 = $sub64 | 0;
    var $and = $c_136 & 1;
    var $arrayidx66 = $sum + ($and << 3) | 0;
    var $11 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx66 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx66 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add67 = $11 + $conv65;
    HEAPF64[tempDoublePtr >> 3] = $add67, HEAP32[$arrayidx66 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx66 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $conv70 = $8 & 65535;
    var $arrayidx73 = $img + ($add41 << 1) | 0;
    var $12 = HEAP16[$arrayidx73 >> 1];
    var $conv74 = $12 & 65535;
    var $sub75 = $conv70 - $conv74 | 0;
    var $shr84 = $sub75 >> 31;
    var $xor85 = $shr84 ^ $sub75;
    var $sub95 = $xor85 - $shr84 | 0;
    var $conv96 = $sub95 | 0;
    var $and97 = $and ^ 1;
    var $arrayidx98 = $sum + ($and97 << 3) | 0;
    var $13 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx98 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx98 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add99 = $13 + $conv96;
    HEAPF64[tempDoublePtr >> 3] = $add99, HEAP32[$arrayidx98 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[$arrayidx98 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $cmp35 = ($add41 | 0) < ($sub3434 | 0);
    if ($cmp35) {
      var $c_136 = $add41;
      var $9 = $12;
      var $8 = $10;
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    var $arrayidx103_phi_trans_insert = $sum | 0;
    var $_pre2 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx103_phi_trans_insert >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx103_phi_trans_insert + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx104_phi_trans_insert = $sum + 8 | 0;
    var $_pre3 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx104_phi_trans_insert >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx104_phi_trans_insert + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $15 = $_pre2;
    var $14 = $_pre3;
    label = 13;
    break;
   case 13:
    var $14;
    var $15;
    var $div = $15 / $14;
    var $call105 = Math.log($div);
    var $mul = $call105 * 100;
    var $conv106 = $mul;
    STACKTOP = __stackBase__;
    return $conv106;
   case 14:
    var $16;
    var $col_049_1;
    var $vbits_048_1;
    var $bitbuf_147_1$0;
    var $bitbuf_147_1$1;
    var $sub_1 = $vbits_048_1 - $bps | 0;
    var $cmp640_1 = ($sub_1 | 0) < 0;
    if ($cmp640_1) {
      var $bitbuf_241_1$1 = $bitbuf_147_1$1;
      var $bitbuf_241_1$0 = $bitbuf_147_1$0;
      var $vbits_142_1 = $sub_1;
      label = 15;
      break;
    } else {
      var $bitbuf_2_lcssa_1$1 = $bitbuf_147_1$1;
      var $bitbuf_2_lcssa_1$0 = $bitbuf_147_1$0;
      var $vbits_1_lcssa_1 = $sub_1;
      var $18 = $16;
      label = 19;
      break;
    }
   case 15:
    var $vbits_142_1;
    var $bitbuf_241_1$0;
    var $bitbuf_241_1$1;
    Runtime.bitshift64($bitbuf_241_1$0, $bitbuf_241_1$1, 0, $sh_prom$0);
    var $shl_1$0 = HEAP32[tempDoublePtr >> 2], $shl_1$1 = HEAP32[tempDoublePtr + 4 >> 2];
    if ($cmp1037) {
      var $bitbuf_338_1$1 = $shl_1$1;
      var $bitbuf_338_1$0 = $shl_1$0;
      var $i_039_1 = 0;
      label = 16;
      break;
    } else {
      var $bitbuf_3_lcssa_1$1 = $shl_1$1;
      var $bitbuf_3_lcssa_1$0 = $shl_1$0;
      label = 17;
      break;
    }
   case 16:
    var $i_039_1;
    var $bitbuf_338_1$0;
    var $bitbuf_338_1$1;
    var $17 = HEAP32[5264116 >> 2];
    var $call13_1 = _fgetc($17);
    var $shl14_1 = $call13_1 << $i_039_1;
    var $conv15_1$0 = $shl14_1;
    var $conv15_1$1 = 0;
    var $or_1$0 = $conv15_1$0 | $bitbuf_338_1$0;
    var $or_1$1 = $conv15_1$1 | $bitbuf_338_1$1;
    var $add_1 = $i_039_1 + 8 | 0;
    var $cmp10_1 = ($add_1 | 0) < ($bite | 0);
    if ($cmp10_1) {
      var $bitbuf_338_1$1 = $or_1$1;
      var $bitbuf_338_1$0 = $or_1$0;
      var $i_039_1 = $add_1;
      label = 16;
      break;
    } else {
      var $bitbuf_3_lcssa_1$1 = $or_1$1;
      var $bitbuf_3_lcssa_1$0 = $or_1$0;
      label = 17;
      break;
    }
   case 17:
    var $bitbuf_3_lcssa_1$0;
    var $bitbuf_3_lcssa_1$1;
    var $add17_1 = $vbits_142_1 + $bite | 0;
    var $cmp6_1 = ($add17_1 | 0) < 0;
    if ($cmp6_1) {
      var $bitbuf_241_1$1 = $bitbuf_3_lcssa_1$1;
      var $bitbuf_241_1$0 = $bitbuf_3_lcssa_1$0;
      var $vbits_142_1 = $add17_1;
      label = 15;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    var $_pre4 = HEAP16[5242964 >> 1];
    var $bitbuf_2_lcssa_1$1 = $bitbuf_3_lcssa_1$1;
    var $bitbuf_2_lcssa_1$0 = $bitbuf_3_lcssa_1$0;
    var $vbits_1_lcssa_1 = $add17_1;
    var $18 = $_pre4;
    label = 19;
    break;
   case 19:
    var $18;
    var $vbits_1_lcssa_1;
    var $bitbuf_2_lcssa_1$0;
    var $bitbuf_2_lcssa_1$1;
    var $sub20_1 = $sub19 - $vbits_1_lcssa_1 | 0;
    var $sh_prom21_1$0 = $sub20_1;
    Runtime.bitshift64($bitbuf_2_lcssa_1$0, $bitbuf_2_lcssa_1$1, 0, $sh_prom21_1$0);
    var $shl22_1$0 = HEAP32[tempDoublePtr >> 2], $shl22_1$1 = HEAP32[tempDoublePtr + 4 >> 2];
    Runtime.bitshift64($shl22_1$0, $shl22_1$1, 2, $sh_prom24$0);
    var $shr_1$0 = HEAP32[tempDoublePtr >> 2];
    var $conv25_1$0 = $shr_1$0;
    var $conv25_1 = $conv25_1$0 & 65535;
    var $arrayidx26_1 = $img + 4128 + ($col_049_1 << 1) | 0;
    HEAP16[$arrayidx26_1 >> 1] = $conv25_1;
    var $inc_1 = $col_049_1 + 1 | 0;
    var $conv_1 = $18 & 65535;
    var $cmp2_1 = ($inc_1 | 0) < ($conv_1 | 0);
    if ($cmp2_1) {
      var $bitbuf_147_1$1 = $bitbuf_2_lcssa_1$1;
      var $bitbuf_147_1$0 = $bitbuf_2_lcssa_1$0;
      var $vbits_048_1 = $vbits_1_lcssa_1;
      var $col_049_1 = $inc_1;
      var $16 = $18;
      label = 14;
      break;
    } else {
      var $19 = $18;
      label = 20;
      break;
    }
   case 20:
    var $19;
    var $conv3333 = $19 & 65535;
    var $sub3434 = $conv3333 - 1 | 0;
    var $cmp3535 = ($sub3434 | 0) > 0;
    if ($cmp3535) {
      label = 3;
      break;
    } else {
      var $15 = 0;
      var $14 = 0;
      label = 13;
      break;
    }
  }
}
_find_green["X"] = 1;
function _identify() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 128 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $head = __stackBase__;
    var $jh = __stackBase__ + 32;
    HEAP32[5427632 >> 2] = -1;
    HEAP32[5403048 >> 2] = -1;
    HEAP32[5244028 >> 2] = -1;
    HEAP16[5560200 >> 1] = 0;
    HEAP32[5398904 >> 2] = 0;
    HEAP16[5398900 >> 1] = 0;
    HEAP16[5245028 >> 1] = 0;
    HEAP16[5245036 >> 1] = 0;
    HEAP16[5263700 >> 1] = 0;
    HEAP16[5243564 >> 1] = 0;
    HEAP16[5242964 >> 1] = 0;
    HEAP16[5398712 >> 1] = 0;
    HEAP32[5263496 >> 2] = 0;
    HEAP8[5263308] = 0;
    HEAP8[5263372] = 0;
    HEAP8[5263628] = 0;
    HEAP8[5561404] = 0;
    HEAP8[5427980] = 0;
    HEAP8[5560896] = 0;
    HEAP32[5243560 >> 2] = 0;
    HEAPF32[5403044 >> 2] = 0;
    HEAPF32[5561468 >> 2] = 0;
    HEAPF32[5244912 >> 2] = 0;
    HEAPF32[5264096 >> 2] = 0;
    HEAP32[5243584 >> 2] = 0;
    for (var $$dest = 5243588 >> 2, $$stop = $$dest + 110; $$dest < $$stop; $$dest++) {
      HEAP32[$$dest] = 0;
    }
    for (var $$dest = 5398736 >> 2, $$stop = $$dest + 32; $$dest < $$stop; $$dest++) {
      HEAP32[$$dest] = 0;
    }
    HEAP32[5560904 >> 2] = 0;
    HEAP32[5560908 >> 2] = 0;
    HEAP32[5560912 >> 2] = 0;
    HEAP32[5560916 >> 2] = 0;
    _memset(5242968, 0, 128);
    for (var $$dest = 5263500 >> 2, $$stop = $$dest + 32; $$dest < $$stop; $$dest++) {
      HEAP32[$$dest] = 0;
    }
    HEAP16[5244060 >> 1] = 0;
    HEAP16[5244040 >> 1] = 0;
    HEAP32[5244056 >> 2] = 0;
    HEAP32[5244044 >> 2] = 0;
    HEAP32[5244052 >> 2] = 0;
    HEAP32[5263692 >> 2] = 0;
    HEAP32[5242960 >> 2] = 60;
    HEAP32[5244032 >> 2] = 0;
    HEAP32[5244036 >> 2] = 0;
    HEAP32[5263444 >> 2] = 0;
    HEAP32[5428492 >> 2] = 0;
    HEAP32[5263696 >> 2] = 0;
    HEAP32[5427976 >> 2] = 0;
    HEAP8[5242884] = 0;
    HEAP32[5264036 >> 2] = 0;
    HEAP8[5264104] = 0;
    HEAP32[5561400 >> 2] = 0;
    HEAP32[5243580 >> 2] = 0;
    HEAP32[5244924 >> 2] = 0;
    HEAP32[5243568 >> 2] = 0;
    HEAP8[5242880] = 0;
    HEAP32[5428496 >> 2] = 0;
    HEAP32[5245636 >> 2] = 0;
    HEAP32[5263436 >> 2] = 0;
    HEAP32[5245040 >> 2] = 1;
    HEAP32[5264100 >> 2] = 1;
    HEAPF64[tempDoublePtr >> 3] = 1, HEAP32[5245656 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5245660 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    HEAP32[5243576 >> 2] = 0;
    HEAP32[5243572 >> 2] = 0;
    HEAPF32[5561124 >> 2] = 0;
    HEAPF32[5245640 >> 2] = 1;
    HEAPF32[5560844 >> 2] = 0;
    HEAPF32[5560860 >> 2] = 0;
    HEAPF32[5560876 >> 2] = 0;
    HEAPF32[5244964 >> 2] = 1;
    HEAPF32[5244980 >> 2] = 0;
    HEAPF32[5244996 >> 2] = 0;
    HEAPF32[5561128 >> 2] = 1;
    HEAPF32[5245644 >> 2] = 1;
    HEAPF32[5560848 >> 2] = 0;
    HEAPF32[5560864 >> 2] = 0;
    HEAPF32[5560880 >> 2] = 0;
    HEAPF32[5244968 >> 2] = 0;
    HEAPF32[5244984 >> 2] = 1;
    HEAPF32[5245e3 >> 2] = 0;
    HEAPF32[5561132 >> 2] = 0;
    HEAPF32[5245648 >> 2] = 1;
    HEAPF32[5560852 >> 2] = 0;
    HEAPF32[5560868 >> 2] = 0;
    HEAPF32[5560884 >> 2] = 0;
    HEAPF32[5244972 >> 2] = 0;
    HEAPF32[5244988 >> 2] = 0;
    HEAPF32[5245004 >> 2] = 1;
    HEAPF32[5561136 >> 2] = 0;
    HEAPF32[5245652 >> 2] = 0;
    HEAPF32[5560856 >> 2] = 0;
    HEAPF32[5560872 >> 2] = 0;
    HEAPF32[5560888 >> 2] = 0;
    HEAPF32[5244976 >> 2] = 0;
    HEAPF32[5244992 >> 2] = 0;
    HEAPF32[5245008 >> 2] = 0;
    HEAP32[5560840 >> 2] = 3;
    var $i_1231 = 0;
    label = 3;
    break;
   case 3:
    var $i_1231;
    var $conv32 = $i_1231 & 65535;
    var $arrayidx33 = 5428500 + ($i_1231 << 1) | 0;
    HEAP16[$arrayidx33 >> 1] = $conv32;
    var $inc35 = $i_1231 + 1 | 0;
    var $exitcond238 = ($inc35 | 0) == 65536;
    if ($exitcond238) {
      label = 4;
      break;
    } else {
      var $i_1231 = $inc35;
      label = 3;
      break;
    }
   case 4:
    var $call = _get2();
    HEAP16[5262944 >> 1] = $call;
    var $call37 = _get4();
    var $0 = HEAP32[5264116 >> 2];
    var $call38 = _fseek($0, 0, 0);
    var $arraydecay = $head | 0;
    var $1 = HEAP32[5264116 >> 2];
    var $call39 = _fread($arraydecay, 1, 32, $1);
    var $2 = HEAP32[5264116 >> 2];
    var $call40 = _fseek($2, 0, 2);
    var $3 = HEAP32[5264116 >> 2];
    var $call41 = _ftell($3);
    var $call43 = _my_memmem($arraydecay, 5574080);
    var $tobool = ($call43 | 0) == 0;
    if ($tobool) {
      label = 5;
      break;
    } else {
      var $cp_0 = $call43;
      label = 6;
      break;
    }
   case 5:
    var $call45 = _my_memmem($arraydecay, 5574308);
    var $tobool46 = ($call45 | 0) == 0;
    if ($tobool46) {
      label = 9;
      break;
    } else {
      var $cp_0 = $call45;
      label = 6;
      break;
    }
   case 6:
    var $cp_0;
    var $sub_ptr_lhs_cast = $cp_0;
    var $sub_ptr_rhs_cast = $head;
    var $sub_ptr_sub = $sub_ptr_lhs_cast - $sub_ptr_rhs_cast | 0;
    _parse_phase_one($sub_ptr_sub);
    var $tobool52 = ($cp_0 | 0) == ($arraydecay | 0);
    if ($tobool52) {
      var $zero_fsize_0 = 0;
      label = 56;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $call53 = _parse_tiff(0);
    var $tobool54 = ($call53 | 0) == 0;
    if ($tobool54) {
      var $zero_fsize_0 = 0;
      label = 56;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    _apply_tiff();
    var $zero_fsize_0 = 0;
    label = 56;
    break;
   case 9:
    var $4 = HEAP16[5262944 >> 1];
    if ($4 << 16 >> 16 == 18761 | $4 << 16 >> 16 == 19789) {
      label = 10;
      break;
    } else {
      label = 14;
      break;
    }
   case 10:
    var $add_ptr = $head + 6 | 0;
    var $call65 = _memcmp($add_ptr, 5579108, 8);
    var $tobool66 = ($call65 | 0) == 0;
    if ($tobool66) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    HEAP32[5428492 >> 2] = $call37;
    var $sub = $call41 - $call37 | 0;
    _parse_ciff($call37, $sub);
    var $zero_fsize_0 = 0;
    label = 56;
    break;
   case 12:
    var $call69 = _parse_tiff(0);
    var $tobool70 = ($call69 | 0) == 0;
    if ($tobool70) {
      var $zero_fsize_0 = 0;
      label = 56;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    _apply_tiff();
    var $zero_fsize_0 = 0;
    label = 56;
    break;
   case 14:
    var $call76 = _memcmp($arraydecay, 5579100, 4);
    var $tobool77 = ($call76 | 0) == 0;
    if ($tobool77) {
      label = 15;
      break;
    } else {
      label = 19;
      break;
    }
   case 15:
    var $add_ptr80 = $head + 6 | 0;
    var $call81 = _memcmp($add_ptr80, 5579092, 4);
    var $tobool82 = ($call81 | 0) == 0;
    if ($tobool82) {
      label = 16;
      break;
    } else {
      label = 19;
      break;
    }
   case 16:
    var $5 = HEAP32[5264116 >> 2];
    var $call84 = _fseek($5, 4, 0);
    var $call85 = _get2();
    var $conv86 = $call85 & 65535;
    var $add = $conv86 + 4 | 0;
    HEAP32[5428492 >> 2] = $add;
    var $6 = HEAP32[5264116 >> 2];
    var $call87 = _fseek($6, $add, 0);
    var $7 = HEAP32[5264116 >> 2];
    var $call88 = _fgetc($7);
    var $cmp89 = ($call88 | 0) == 255;
    if ($cmp89) {
      label = 18;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    var $call92 = _parse_tiff(12);
    label = 18;
    break;
   case 18:
    HEAP32[5244044 >> 2] = 0;
    var $zero_fsize_0 = 0;
    label = 56;
    break;
   case 19:
    var $add_ptr96 = $head + 25 | 0;
    var $call97 = _memcmp($add_ptr96, 5579084, 7);
    var $tobool98 = ($call97 | 0) == 0;
    if ($tobool98) {
      label = 20;
      break;
    } else {
      label = 21;
      break;
    }
   case 20:
    HEAP8[5263628] = HEAP8[5579076];
    HEAP8[5263629] = HEAP8[5579077];
    HEAP8[5263630] = HEAP8[5579078];
    HEAP8[5263631] = HEAP8[5579079];
    HEAP8[5263632] = HEAP8[5579080];
    HEAP8[5263633] = HEAP8[5579081];
    HEAP8[5263634] = HEAP8[5579082];
    for (var $$src = 5579064, $$dest = 5263372, $$stop = $$src + 10; $$src < $$stop; $$src++, $$dest++) {
      HEAP8[$$dest] = HEAP8[$$src];
    }
    var $8 = HEAP32[5264116 >> 2];
    var $call102 = _fseek($8, 33, 0);
    _get_timestamp(1);
    var $9 = HEAP32[5264116 >> 2];
    var $call103 = _fseek($9, 60, 0);
    var $call108 = _get4();
    var $conv109 = $call108 >>> 0;
    HEAPF32[5561124 >> 2] = $conv109;
    var $call108_1 = _get4();
    var $conv109_1 = $call108_1 >>> 0;
    HEAPF32[5561128 >> 2] = $conv109_1;
    var $call108_2 = _get4();
    var $conv109_2 = $call108_2 >>> 0;
    HEAPF32[5561136 >> 2] = $conv109_2;
    var $call108_3 = _get4();
    var $conv109_3 = $call108_3 >>> 0;
    HEAPF32[5561132 >> 2] = $conv109_3;
    var $zero_fsize_0 = 0;
    label = 56;
    break;
   case 21:
    var $call116 = _strcmp($arraydecay, 5579060);
    var $tobool117 = ($call116 | 0) == 0;
    if ($tobool117) {
      label = 22;
      break;
    } else {
      label = 23;
      break;
    }
   case 22:
    for (var $$src = 5579048, $$dest = 5263628, $$stop = $$src + 9; $$src < $$stop; $$src++, $$dest++) {
      HEAP8[$$dest] = HEAP8[$$src];
    }
    for (var $$src = 5579032, $$dest = 5263372, $$stop = $$src + 16; $$src < $$stop; $$src++, $$dest++) {
      HEAP8[$$dest] = HEAP8[$$src];
    }
    var $zero_fsize_0 = 0;
    label = 56;
    break;
   case 23:
    var $call123 = _strcmp($arraydecay, 5579024);
    var $tobool124 = ($call123 | 0) == 0;
    if ($tobool124) {
      label = 24;
      break;
    } else {
      label = 25;
      break;
    }
   case 24:
    HEAP8[5263628] = HEAP8[5579e3];
    HEAP8[5263629] = HEAP8[5579001];
    HEAP8[5263630] = HEAP8[5579002];
    HEAP8[5263631] = HEAP8[5579003];
    HEAP8[5263632] = HEAP8[5579004];
    HEAP8[5263633] = HEAP8[5579005];
    for (var $$src = 5578984, $$dest = 5263372, $$stop = $$src + 14; $$src < $$stop; $$src++, $$dest++) {
      HEAP8[$$dest] = HEAP8[$$src];
    }
    HEAP32[5263692 >> 2] = 32;
    var $zero_fsize_0 = 0;
    label = 56;
    break;
   case 25:
    var $call130 = _strcmp($arraydecay, 5578976);
    var $tobool131 = ($call130 | 0) == 0;
    if ($tobool131) {
      label = 26;
      break;
    } else {
      label = 27;
      break;
    }
   case 26:
    HEAP8[5263628] = HEAP8[5579e3];
    HEAP8[5263629] = HEAP8[5579001];
    HEAP8[5263630] = HEAP8[5579002];
    HEAP8[5263631] = HEAP8[5579003];
    HEAP8[5263632] = HEAP8[5579004];
    HEAP8[5263633] = HEAP8[5579005];
    for (var $$src = 5578960, $$dest = 5263372, $$stop = $$src + 14; $$src < $$stop; $$src++, $$dest++) {
      HEAP8[$$dest] = HEAP8[$$src];
    }
    HEAP32[5263692 >> 2] = 58;
    var $zero_fsize_0 = 0;
    label = 56;
    break;
   case 27:
    var $call137 = _memcmp($arraydecay, 5573316, 8);
    var $tobool138 = ($call137 | 0) == 0;
    if ($tobool138) {
      label = 28;
      break;
    } else {
      label = 32;
      break;
    }
   case 28:
    var $10 = HEAP32[5264116 >> 2];
    var $call140 = _fseek($10, 84, 0);
    var $call141 = _get4();
    HEAP32[5244044 >> 2] = $call141;
    var $call142 = _get4();
    HEAP32[5244056 >> 2] = $call142;
    var $11 = HEAP32[5264116 >> 2];
    var $call143 = _fseek($11, 92, 0);
    var $call144 = _get4();
    _parse_fuji($call144);
    var $12 = HEAP32[5244044 >> 2];
    var $cmp145 = ($12 | 0) > 120;
    if ($cmp145) {
      label = 29;
      break;
    } else {
      label = 31;
      break;
    }
   case 29:
    var $13 = HEAP32[5264116 >> 2];
    var $call148 = _fseek($13, 120, 0);
    var $call149 = _get4();
    var $tobool150 = ($call149 | 0) != 0;
    var $land_ext = $tobool150 & 1;
    var $14 = HEAP32[5264100 >> 2];
    var $add151 = $land_ext + $14 | 0;
    HEAP32[5264100 >> 2] = $add151;
    var $cmp152 = ($add151 | 0) == 2;
    var $15 = HEAP32[5244920 >> 2];
    var $tobool155 = ($15 | 0) != 0;
    var $or_cond = $cmp152 & $tobool155;
    if ($or_cond) {
      label = 30;
      break;
    } else {
      label = 31;
      break;
    }
   case 30:
    _parse_fuji($call149);
    label = 31;
    break;
   case 31:
    HEAP32[5263692 >> 2] = 4;
    var $16 = HEAP32[5264116 >> 2];
    var $17 = HEAP32[5244920 >> 2];
    var $cmp159 = ($17 | 0) != 0;
    var $conv160 = $cmp159 & 1;
    var $18 = -$conv160 | 0;
    var $mul = $18 & 28;
    var $add161 = $mul + 100 | 0;
    var $call162 = _fseek($16, $add161, 0);
    var $call163 = _get4();
    HEAP32[5428492 >> 2] = $call163;
    var $call164 = _parse_tiff($call163);
    var $19 = HEAP32[5244044 >> 2];
    var $add165 = $19 + 12 | 0;
    var $call166 = _parse_tiff($add165);
    _apply_tiff();
    var $zero_fsize_0 = 0;
    label = 56;
    break;
   case 32:
    var $call169 = _memcmp($arraydecay, 5586136, 4);
    var $tobool170 = ($call169 | 0) == 0;
    if ($tobool170) {
      label = 33;
      break;
    } else {
      label = 34;
      break;
    }
   case 33:
    var $20 = HEAP32[5264116 >> 2];
    var $call172 = _fseek($20, 0, 0);
    _parse_riff();
    var $zero_fsize_0 = 0;
    label = 56;
    break;
   case 34:
    var $call175 = _memcmp($arraydecay, 5578952, 6);
    var $tobool176 = ($call175 | 0) == 0;
    if ($tobool176) {
      label = 35;
      break;
    } else {
      label = 36;
      break;
    }
   case 35:
    var $21 = HEAP32[5264116 >> 2];
    var $call178 = _fseek($21, 6, 0);
    var $22 = HEAP32[5264116 >> 2];
    var $call179 = _fread(5263628, 1, 8, $22);
    var $23 = HEAP32[5264116 >> 2];
    var $call180 = _fread(5263372, 1, 8, $23);
    var $24 = HEAP32[5264116 >> 2];
    var $call181 = _fread(5263308, 1, 16, $24);
    var $call182 = _get2();
    var $conv183 = $call182 & 65535;
    HEAP32[5428492 >> 2] = $conv183;
    var $call184 = _get2();
    var $call185 = _get2();
    HEAP16[5245028 >> 1] = $call185;
    var $call186 = _get2();
    HEAP16[5245036 >> 1] = $call186;
    HEAP32[5263692 >> 2] = 66;
    HEAP32[5427632 >> 2] = 1633771873;
    var $zero_fsize_0 = 0;
    label = 56;
    break;
   case 36:
    var $call189 = _memcmp($arraydecay, 5578940, 8);
    var $tobool190 = ($call189 | 0) == 0;
    if ($tobool190) {
      label = 37;
      break;
    } else {
      label = 38;
      break;
    }
   case 37:
    HEAP8[5263628] = HEAP8[5578932];
    HEAP8[5263629] = HEAP8[5578933];
    HEAP8[5263630] = HEAP8[5578934];
    HEAP8[5263631] = HEAP8[5578935];
    HEAP8[5263632] = HEAP8[5578936];
    HEAP8[5263633] = HEAP8[5578937];
    HEAP8[5263372] = HEAP8[5578928];
    HEAP8[5263373] = HEAP8[5578929];
    HEAP8[5263374] = HEAP8[5578930];
    HEAP16[5262944 >> 1] = 18761;
    var $25 = HEAP32[5264116 >> 2];
    var $call194 = _fseek($25, 300, 0);
    var $call195 = _get4();
    HEAP32[5428492 >> 2] = $call195;
    var $call196 = _get4();
    var $call197 = _get2();
    HEAP16[5242964 >> 1] = $call197;
    var $call198 = _get2();
    HEAP16[5398712 >> 1] = $call198;
    var $26 = HEAP16[5242964 >> 1];
    var $conv199 = $26 & 65535;
    var $mul200 = $conv199 * 5 & -1;
    var $div = $mul200 >>> 2;
    var $conv201 = $call198 & 65535;
    var $mul202 = $div * $conv201 & -1;
    var $27 = HEAP32[5428492 >> 2];
    var $sub203 = $27 + $call196 | 0;
    var $add204 = $sub203 - $mul202 | 0;
    HEAP32[5428492 >> 2] = $add204;
    HEAP32[5263692 >> 2] = 66;
    HEAP32[5427632 >> 2] = 1633771873;
    var $zero_fsize_0 = 0;
    label = 56;
    break;
   case 38:
    var $call207 = _memcmp($arraydecay, 5578920, 4);
    var $tobool208 = ($call207 | 0) == 0;
    if ($tobool208) {
      label = 39;
      break;
    } else {
      label = 40;
      break;
    }
   case 39:
    HEAP16[5262944 >> 1] = 18761;
    var $28 = HEAP32[5264116 >> 2];
    var $call210 = _fseek($28, 20, 0);
    var $call211 = _get4();
    var $conv212 = $call211 & 65535;
    HEAP16[5242964 >> 1] = $conv212;
    var $call213 = _get4();
    var $conv214 = $call213 & 65535;
    HEAP16[5398712 >> 1] = $conv214;
    HEAP8[5263628] = HEAP8[5578920];
    HEAP8[5263629] = HEAP8[5578921];
    HEAP8[5263630] = HEAP8[5578922];
    HEAP8[5263631] = HEAP8[5578923];
    HEAP8[5263632] = HEAP8[5578924];
    var $29 = HEAP32[5264116 >> 2];
    var $call216 = _fseek($29, 668, 0);
    var $30 = HEAP32[5264116 >> 2];
    var $call217 = _fread(5263372, 1, 64, $30);
    HEAP32[5428492 >> 2] = 4096;
    HEAP32[5263692 >> 2] = 36;
    HEAP32[5263696 >> 2] = 88;
    HEAP32[5427632 >> 2] = 1633771873;
    var $zero_fsize_0 = 0;
    label = 56;
    break;
   case 40:
    var $add_ptr220 = $head + 4 | 0;
    var $call221 = _memcmp($add_ptr220, 5578912, 4);
    var $tobool222 = ($call221 | 0) == 0;
    if ($tobool222) {
      label = 41;
      break;
    } else {
      label = 42;
      break;
    }
   case 41:
    HEAP32[5263628 >> 2] = 4474194;
    HEAP32[5263372 >> 2] = 4542031;
    _parse_redcine();
    HEAP32[5263692 >> 2] = 44;
    _gamma_curve(.4166666666666667, 12.92, 1, 4095);
    HEAP32[5427632 >> 2] = 1229539657;
    var $zero_fsize_0 = 0;
    label = 56;
    break;
   case 42:
    var $call228 = _memcmp($arraydecay, 5578868, 9);
    var $tobool229 = ($call228 | 0) == 0;
    if ($tobool229) {
      label = 43;
      break;
    } else {
      label = 44;
      break;
    }
   case 43:
    _parse_rollei();
    var $zero_fsize_0 = 0;
    label = 56;
    break;
   case 44:
    var $call233 = _memcmp($arraydecay, 5578860, 4);
    var $tobool234 = ($call233 | 0) == 0;
    if ($tobool234) {
      label = 45;
      break;
    } else {
      label = 46;
      break;
    }
   case 45:
    _parse_sinar_ia();
    var $zero_fsize_0 = 0;
    label = 56;
    break;
   case 46:
    var $call238 = _memcmp($arraydecay, 5578852, 4);
    var $tobool239 = ($call238 | 0) == 0;
    if ($tobool239) {
      label = 47;
      break;
    } else {
      label = 48;
      break;
    }
   case 47:
    _parse_minolta(0);
    var $zero_fsize_0 = 0;
    label = 56;
    break;
   case 48:
    var $call243 = _memcmp($arraydecay, 5578844, 4);
    var $tobool244 = ($call243 | 0) == 0;
    if ($tobool244) {
      label = 49;
      break;
    } else {
      label = 50;
      break;
    }
   case 49:
    _parse_foveon();
    var $zero_fsize_0 = 0;
    label = 56;
    break;
   case 50:
    var $call248 = _memcmp($arraydecay, 5578840, 2);
    var $tobool249 = ($call248 | 0) == 0;
    if ($tobool249) {
      label = 51;
      break;
    } else {
      var $i_2230 = 0;
      label = 52;
      break;
    }
   case 51:
    _parse_cine();
    var $zero_fsize_0 = 0;
    label = 56;
    break;
   case 52:
    var $i_2230;
    var $fsize257 = 5264124 + $i_2230 * 36 | 0;
    var $31 = HEAP32[$fsize257 >> 2];
    var $cmp258 = ($call41 | 0) == ($31 | 0);
    if ($cmp258) {
      label = 53;
      break;
    } else {
      label = 55;
      break;
    }
   case 53:
    var $arraydecay262 = 5264128 + $i_2230 * 36 | 0;
    var $call263 = _strcpy(5263628, $arraydecay262);
    var $arraydecay265 = 5264140 + $i_2230 * 36 | 0;
    var $call266 = _strcpy(5263372, $arraydecay265);
    var $32 = $i_2230 - 46 | 0;
    var $tobool268 = $32 >>> 0 < 39;
    if ($tobool268) {
      label = 54;
      break;
    } else {
      label = 55;
      break;
    }
   case 54:
    _parse_external_jpeg();
    label = 55;
    break;
   case 55:
    var $inc273 = $i_2230 + 1 | 0;
    var $exitcond237 = ($inc273 | 0) == 88;
    if ($exitcond237) {
      var $zero_fsize_0 = $call41;
      label = 56;
      break;
    } else {
      var $i_2230 = $inc273;
      label = 52;
      break;
    }
   case 56:
    var $zero_fsize_0;
    var $33 = HEAP8[5263628];
    var $cmp297 = $33 << 24 >> 24 == 0;
    if ($cmp297) {
      label = 57;
      break;
    } else {
      var $i_3227 = 0;
      label = 59;
      break;
    }
   case 57:
    _parse_smal($call41);
    var $_pr = HEAP8[5263628];
    var $cmp302 = $_pr << 24 >> 24 == 0;
    if ($cmp302) {
      label = 58;
      break;
    } else {
      var $i_3227 = 0;
      label = 59;
      break;
    }
   case 58:
    HEAP32[5264100 >> 2] = 0;
    _parse_jpeg();
    var $i_3227 = 0;
    label = 59;
    break;
   case 59:
    var $i_3227;
    var $arrayidx311 = 5267568 + ($i_3227 << 2) | 0;
    var $34 = HEAP32[$arrayidx311 >> 2];
    var $call312 = _strstr(5263628, $34);
    var $tobool313 = ($call312 | 0) == 0;
    if ($tobool313) {
      label = 61;
      break;
    } else {
      label = 60;
      break;
    }
   case 60:
    var $call316 = _strcpy(5263628, $34);
    label = 61;
    break;
   case 61:
    var $inc319 = $i_3227 + 1 | 0;
    var $exitcond235 = ($inc319 | 0) == 17;
    if ($exitcond235) {
      label = 62;
      break;
    } else {
      var $i_3227 = $inc319;
      label = 59;
      break;
    }
   case 62:
    var $call321 = _strncmp(5263628, 5586632, 5);
    var $tobool322 = ($call321 | 0) == 0;
    if ($tobool322) {
      label = 63;
      break;
    } else {
      label = 67;
      break;
    }
   case 63:
    var $call324 = _strstr(5263372, 5578824);
    var $tobool325 = ($call324 | 0) == 0;
    if ($tobool325) {
      label = 64;
      break;
    } else {
      var $cp_1 = $call324;
      label = 66;
      break;
    }
   case 64:
    var $call327 = _strstr(5263372, 5578808);
    var $tobool328 = ($call327 | 0) == 0;
    if ($tobool328) {
      label = 65;
      break;
    } else {
      var $cp_1 = $call327;
      label = 66;
      break;
    }
   case 65:
    var $call330 = _strstr(5263372, 5578792);
    var $tobool331 = ($call330 | 0) == 0;
    if ($tobool331) {
      label = 67;
      break;
    } else {
      var $cp_1 = $call330;
      label = 66;
      break;
    }
   case 66:
    var $cp_1;
    HEAP8[$cp_1] = 0;
    label = 67;
    break;
   case 67:
    var $call334 = _strlen(5263628);
    var $add_ptr335_sum = $call334 - 1 | 0;
    var $incdec_ptr224 = $add_ptr335_sum + 5263628 | 0;
    var $35 = HEAP8[$incdec_ptr224];
    var $cmp337225 = $35 << 24 >> 24 == 32;
    if ($cmp337225) {
      var $incdec_ptr226 = $incdec_ptr224;
      label = 68;
      break;
    } else {
      label = 69;
      break;
    }
   case 68:
    var $incdec_ptr226;
    HEAP8[$incdec_ptr226] = 0;
    var $incdec_ptr = $incdec_ptr226 - 1 | 0;
    var $36 = HEAP8[$incdec_ptr];
    var $cmp337 = $36 << 24 >> 24 == 32;
    if ($cmp337) {
      var $incdec_ptr226 = $incdec_ptr;
      label = 68;
      break;
    } else {
      label = 69;
      break;
    }
   case 69:
    var $call339 = _strlen(5263372);
    var $add_ptr340_sum = $call339 - 1 | 0;
    var $incdec_ptr342221 = $add_ptr340_sum + 5263372 | 0;
    var $37 = HEAP8[$incdec_ptr342221];
    var $cmp344222 = $37 << 24 >> 24 == 32;
    if ($cmp344222) {
      var $incdec_ptr342223 = $incdec_ptr342221;
      label = 70;
      break;
    } else {
      label = 71;
      break;
    }
   case 70:
    var $incdec_ptr342223;
    HEAP8[$incdec_ptr342223] = 0;
    var $incdec_ptr342 = $incdec_ptr342223 - 1 | 0;
    var $38 = HEAP8[$incdec_ptr342];
    var $cmp344 = $38 << 24 >> 24 == 32;
    if ($cmp344) {
      var $incdec_ptr342223 = $incdec_ptr342;
      label = 70;
      break;
    } else {
      label = 71;
      break;
    }
   case 71:
    var $call348 = _strlen(5263628);
    var $call349 = _strncasecmp(5263372, 5263628, $call348);
    var $tobool350 = ($call349 | 0) == 0;
    if ($tobool350) {
      label = 72;
      break;
    } else {
      label = 74;
      break;
    }
   case 72:
    var $arrayidx353 = $call348 + 5263372 | 0;
    var $39 = HEAP8[$arrayidx353];
    var $cmp355 = $39 << 24 >> 24 == 32;
    if ($cmp355) {
      label = 73;
      break;
    } else {
      label = 74;
      break;
    }
   case 73:
    var $inc352 = $call348 + 1 | 0;
    var $add_ptr358 = $inc352 + 5263372 | 0;
    var $sub359 = 63 - $call348 | 0;
    _memmove(5263372, $add_ptr358, $sub359, 1, 0);
    label = 74;
    break;
   case 74:
    var $call361 = _strncmp(5263372, 5578748, 8);
    var $tobool362 = ($call361 | 0) == 0;
    if ($tobool362) {
      label = 75;
      break;
    } else {
      label = 76;
      break;
    }
   case 75:
    var $call364 = _strcpy(5263372, 5263380);
    label = 76;
    break;
   case 76:
    var $call366 = _strncmp(5263372, 5578732, 15);
    var $tobool367 = ($call366 | 0) == 0;
    if ($tobool367) {
      label = 77;
      break;
    } else {
      label = 78;
      break;
    }
   case 77:
    var $call369 = _strcpy(5263372, 5263387);
    label = 78;
    break;
   case 78:
    HEAP8[5263371] = 0;
    HEAP8[5263435] = 0;
    HEAP8[5263691] = 0;
    HEAP8[5561467] = 0;
    HEAP8[5428491] = 0;
    var $40 = HEAP32[5264100 >> 2];
    var $tobool371 = ($40 | 0) == 0;
    if ($tobool371) {
      label = 680;
      break;
    } else {
      label = 79;
      break;
    }
   case 79:
    var $41 = HEAP16[5398712 >> 1];
    var $tobool374 = $41 << 16 >> 16 == 0;
    if ($tobool374) {
      label = 80;
      break;
    } else {
      var $43 = $41;
      label = 81;
      break;
    }
   case 80:
    var $42 = HEAP16[5245036 >> 1];
    HEAP16[5398712 >> 1] = $42;
    var $43 = $42;
    label = 81;
    break;
   case 81:
    var $43;
    var $44 = HEAP16[5242964 >> 1];
    var $tobool377 = $44 << 16 >> 16 == 0;
    if ($tobool377) {
      label = 82;
      break;
    } else {
      var $_pr184_pr_pr = $44;
      label = 83;
      break;
    }
   case 82:
    var $45 = HEAP16[5245028 >> 1];
    HEAP16[5242964 >> 1] = $45;
    var $_pr184_pr_pr = $45;
    label = 83;
    break;
   case 83:
    var $_pr184_pr_pr;
    var $cmp381 = $43 << 16 >> 16 == 2624;
    var $cmp385 = $_pr184_pr_pr << 16 >> 16 == 3936;
    var $or_cond136 = $cmp381 & $cmp385;
    if ($or_cond136) {
      label = 84;
      break;
    } else {
      label = 85;
      break;
    }
   case 84:
    HEAP16[5398712 >> 1] = 2616;
    HEAP16[5242964 >> 1] = 3896;
    var $47 = 3896;
    var $46 = 2616;
    label = 102;
    break;
   case 85:
    var $cmp390 = $43 << 16 >> 16 == 3136;
    var $cmp394 = $_pr184_pr_pr << 16 >> 16 == 4864;
    var $or_cond137 = $cmp390 & $cmp394;
    if ($or_cond137) {
      label = 86;
      break;
    } else {
      label = 87;
      break;
    }
   case 86:
    HEAP16[5398712 >> 1] = 3124;
    HEAP16[5242964 >> 1] = 4688;
    HEAP32[5427632 >> 2] = 370546198;
    var $47 = 4688;
    var $46 = 3124;
    label = 102;
    break;
   case 87:
    var $cmp399 = $_pr184_pr_pr << 16 >> 16 == 4352;
    if ($cmp399) {
      label = 88;
      break;
    } else {
      label = 91;
      break;
    }
   case 88:
    var $call402 = _strcmp(5263372, 5578728);
    var $tobool403 = ($call402 | 0) == 0;
    if ($tobool403) {
      label = 90;
      break;
    } else {
      label = 89;
      break;
    }
   case 89:
    var $call405 = _strcmp(5263372, 5578724);
    var $tobool406 = ($call405 | 0) == 0;
    if ($tobool406) {
      label = 90;
      break;
    } else {
      label = 91;
      break;
    }
   case 90:
    HEAP16[5242964 >> 1] = 4309;
    HEAP32[5427632 >> 2] = 370546198;
    var $47 = 4309;
    var $46 = $43;
    label = 102;
    break;
   case 91:
    var $cmp410 = ($_pr184_pr_pr & 65535) > 4959;
    if ($cmp410) {
      label = 92;
      break;
    } else {
      var $_pr188_pr_pr_pr = $_pr184_pr_pr;
      label = 94;
      break;
    }
   case 92:
    var $call413 = _strncmp(5263372, 5578720, 3);
    var $tobool414 = ($call413 | 0) == 0;
    if ($tobool414) {
      label = 93;
      break;
    } else {
      var $_pr188_pr_pr_pr_ph = $_pr184_pr_pr;
      label = 97;
      break;
    }
   case 93:
    HEAP16[5263700 >> 1] = 10;
    HEAP16[5242964 >> 1] = 4950;
    HEAP32[5427632 >> 2] = 370546198;
    var $47 = 4950;
    var $46 = $43;
    label = 102;
    break;
   case 94:
    var $_pr188_pr_pr_pr;
    var $cmp418 = $_pr188_pr_pr_pr << 16 >> 16 == 4736;
    if ($cmp418) {
      label = 95;
      break;
    } else {
      label = 100;
      break;
    }
   case 95:
    var $call421 = _strcmp(5263372, 5578716);
    var $tobool422 = ($call421 | 0) == 0;
    if ($tobool422) {
      label = 96;
      break;
    } else {
      var $47 = $_pr188_pr_pr_pr;
      var $46 = $43;
      label = 102;
      break;
    }
   case 96:
    HEAP16[5398712 >> 1] = 3122;
    HEAP16[5242964 >> 1] = 4684;
    HEAP32[5427632 >> 2] = 370546198;
    HEAP16[5243564 >> 1] = 2;
    var $47 = 4684;
    var $46 = 3122;
    label = 102;
    break;
   case 97:
    var $_pr188_pr_pr_pr_ph;
    var $cmp426 = $_pr188_pr_pr_pr_ph << 16 >> 16 == 7424;
    if ($cmp426) {
      label = 98;
      break;
    } else {
      var $47 = $_pr188_pr_pr_pr_ph;
      var $46 = $43;
      label = 102;
      break;
    }
   case 98:
    var $call429 = _strcmp(5263372, 5578708);
    var $tobool430 = ($call429 | 0) == 0;
    if ($tobool430) {
      label = 99;
      break;
    } else {
      var $47 = 7424;
      var $46 = $43;
      label = 102;
      break;
    }
   case 99:
    HEAP16[5398712 >> 1] = 5502;
    HEAP16[5242964 >> 1] = 7328;
    HEAP32[5427632 >> 2] = 1633771873;
    HEAP16[5243564 >> 1] = 29;
    HEAP16[5263700 >> 1] = 48;
    var $47 = 7328;
    var $46 = 5502;
    label = 102;
    break;
   case 100:
    var $cmp434 = $43 << 16 >> 16 == 3014;
    var $cmp438 = $_pr188_pr_pr_pr << 16 >> 16 == 4096;
    var $or_cond138 = $cmp434 & $cmp438;
    if ($or_cond138) {
      label = 101;
      break;
    } else {
      var $47 = $_pr188_pr_pr_pr;
      var $46 = $43;
      label = 102;
      break;
    }
   case 101:
    HEAP16[5242964 >> 1] = 4014;
    var $47 = 4014;
    var $46 = $43;
    label = 102;
    break;
   case 102:
    var $46;
    var $47;
    var $48 = HEAP32[5427976 >> 2];
    var $tobool442 = ($48 | 0) == 0;
    if ($tobool442) {
      label = 111;
      break;
    } else {
      label = 103;
      break;
    }
   case 103:
    var $49 = HEAP32[5427632 >> 2];
    var $cmp444 = ($49 | 0) == -1;
    if ($cmp444) {
      label = 104;
      break;
    } else {
      label = 105;
      break;
    }
   case 104:
    HEAP32[5427632 >> 2] = 0;
    var $50 = HEAP32[5243580 >> 2];
    var $52 = $50;
    label = 107;
    break;
   case 105:
    var $tobool448 = ($49 | 0) == 0;
    var $51 = HEAP32[5243580 >> 2];
    if ($tobool448) {
      var $52 = $51;
      label = 107;
      break;
    } else {
      label = 106;
      break;
    }
   case 106:
    HEAP32[5264100 >> 2] = $51;
    label = 108;
    break;
   case 107:
    var $52;
    HEAP32[5560840 >> 2] = $52;
    label = 108;
    break;
   case 108:
    var $53 = HEAP32[5244032 >> 2];
    if (($53 | 0) == 1) {
      label = 109;
      break;
    } else if (($53 | 0) == 7) {
      label = 110;
      break;
    } else {
      label = 654;
      break;
    }
   case 109:
    HEAP32[5263692 >> 2] = 76;
    label = 654;
    break;
   case 110:
    HEAP32[5263692 >> 2] = 2;
    label = 654;
    break;
   case 111:
    var $call461 = _strcmp(5263628, 5587508);
    var $lnot = ($call461 | 0) == 0;
    if ($lnot) {
      label = 112;
      break;
    } else {
      label = 113;
      break;
    }
   case 112:
    var $add_ptr465 = $head + 6 | 0;
    var $call466 = _memcmp($add_ptr465, 5579108, 8);
    var $tobool467 = ($call466 | 0) != 0;
    var $cond = $tobool467 ? 46 : 42;
    HEAP32[5263692 >> 2] = $cond;
    label = 113;
    break;
   case 113:
    var $call469 = _strcmp(5263628, 5587524);
    var $tobool470 = ($call469 | 0) == 0;
    if ($tobool470) {
      label = 114;
      break;
    } else {
      label = 118;
      break;
    }
   case 114:
    var $54 = HEAP32[5263692 >> 2];
    var $tobool472 = ($54 | 0) == 0;
    if ($tobool472) {
      label = 115;
      break;
    } else {
      label = 116;
      break;
    }
   case 115:
    HEAP32[5263692 >> 2] = 36;
    label = 116;
    break;
   case 116:
    var $55 = HEAP8[5263372];
    var $cmp476 = $55 << 24 >> 24 == 69;
    if ($cmp476) {
      label = 117;
      break;
    } else {
      label = 118;
      break;
    }
   case 117:
    var $56 = HEAP32[5428492 >> 2];
    var $lnot480 = ($56 | 0) == 0;
    var $lnot_ext481 = $lnot480 & 1;
    var $shl = $lnot_ext481 << 2;
    var $57 = HEAP32[5263696 >> 2];
    var $or = $57 | $shl;
    var $or482 = $or | 2;
    HEAP32[5263696 >> 2] = $or482;
    label = 118;
    break;
   case 118:
    var $call485 = _strcmp(5263628, 5579148);
    var $tobool486 = ($call485 | 0) == 0;
    if ($tobool486) {
      label = 119;
      break;
    } else {
      label = 120;
      break;
    }
   case 119:
    HEAP32[5263692 >> 2] = 36;
    HEAP32[5263496 >> 2] = 3967;
    label = 120;
    break;
   case 120:
    var $_b = HEAP8[5264104];
    if ($_b) {
      label = 121;
      break;
    } else {
      label = 126;
      break;
    }
   case 121:
    var $conv491 = $46 & 65535;
    var $mul492 = $conv491 << 1;
    var $conv493 = $47 & 65535;
    var $cmp494 = $mul492 >>> 0 < $conv493 >>> 0;
    if ($cmp494) {
      label = 122;
      break;
    } else {
      label = 123;
      break;
    }
   case 122:
    HEAPF64[tempDoublePtr >> 3] = .5, HEAP32[5245656 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5245660 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 123;
    break;
   case 123:
    var $cmp500 = ($46 & 65535) > ($47 & 65535);
    if ($cmp500) {
      label = 124;
      break;
    } else {
      label = 125;
      break;
    }
   case 124:
    HEAPF64[tempDoublePtr >> 3] = 2, HEAP32[5245656 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5245660 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 125;
    break;
   case 125:
    HEAP32[5427632 >> 2] = 0;
    _simple_coeff(0);
    label = 643;
    break;
   case 126:
    var $58 = HEAP32[5244036 >> 2];
    var $cmp507 = ($58 | 0) == 15;
    var $or_cond1 = $lnot & $cmp507;
    if ($or_cond1) {
      label = 127;
      break;
    } else {
      label = 133;
      break;
    }
   case 127:
    var $conv510 = $47 & 65535;
    if (($conv510 | 0) == 3344) {
      label = 128;
      break;
    } else if (($conv510 | 0) == 3872) {
      var $59 = $47;
      label = 129;
      break;
    } else {
      var $60 = $47;
      label = 130;
      break;
    }
   case 128:
    var $sub512 = $47 - 66 & 65535;
    HEAP16[5242964 >> 1] = $sub512;
    var $59 = $sub512;
    label = 129;
    break;
   case 129:
    var $59;
    var $sub516 = $59 - 6 & 65535;
    HEAP16[5242964 >> 1] = $sub516;
    var $60 = $sub516;
    label = 130;
    break;
   case 130:
    var $60;
    var $cmp520 = ($46 & 65535) > ($60 & 65535);
    if ($cmp520) {
      label = 131;
      break;
    } else {
      label = 132;
      break;
    }
   case 131:
    HEAP16[5242964 >> 1] = $46;
    HEAP16[5398712 >> 1] = $60;
    label = 132;
    break;
   case 132:
    HEAP32[5427632 >> 2] = 0;
    HEAP32[5263692 >> 2] = 20;
    label = 643;
    break;
   case 133:
    var $call537 = _strcmp(5263372, 5578692);
    var $tobool538 = ($call537 | 0) == 0;
    if ($tobool538) {
      label = 134;
      break;
    } else {
      label = 135;
      break;
    }
   case 134:
    HEAP16[5398712 >> 1] = 613;
    HEAP16[5242964 >> 1] = 854;
    HEAP16[5245028 >> 1] = 896;
    HEAPF64[tempDoublePtr >> 3] = .9665605095541401, HEAP32[5245656 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5245660 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    HEAP32[5560840 >> 2] = 4;
    HEAP32[5427632 >> 2] = -505093660;
    HEAP32[5263692 >> 2] = 10;
    label = 643;
    break;
   case 135:
    var $call541 = _strcmp(5263372, 5578676);
    var $tobool542 = ($call541 | 0) == 0;
    if ($tobool542) {
      label = 137;
      break;
    } else {
      label = 136;
      break;
    }
   case 136:
    var $call544 = _strcmp(5263372, 5578656);
    var $tobool545 = ($call544 | 0) == 0;
    if ($tobool545) {
      label = 137;
      break;
    } else {
      label = 138;
      break;
    }
   case 137:
    HEAP16[5398712 >> 1] = 773;
    HEAP16[5242964 >> 1] = 960;
    HEAP16[5245028 >> 1] = 992;
    HEAPF64[tempDoublePtr >> 3] = 1.0893617021276596, HEAP32[5245656 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5245660 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $storemerge219 = 508436046;
    label = 166;
    break;
   case 138:
    var $call548 = _strcmp(5263372, 5578628);
    var $tobool549 = ($call548 | 0) == 0;
    if ($tobool549) {
      label = 139;
      break;
    } else {
      label = 140;
      break;
    }
   case 139:
    HEAP16[5398712 >> 1] = 968;
    HEAP16[5242964 >> 1] = 1290;
    HEAP16[5245028 >> 1] = 1320;
    var $storemerge219 = 458115870;
    label = 166;
    break;
   case 140:
    var $call552 = _strcmp(5263372, 5578612);
    var $tobool553 = ($call552 | 0) == 0;
    if ($tobool553) {
      label = 167;
      break;
    } else {
      label = 141;
      break;
    }
   case 141:
    var $call556 = _strcmp(5263372, 5578596);
    var $tobool557 = ($call556 | 0) == 0;
    if ($tobool557) {
      label = 142;
      break;
    } else {
      label = 143;
      break;
    }
   case 142:
    HEAP16[5398712 >> 1] = 1752;
    HEAP16[5242964 >> 1] = 2344;
    HEAP16[5245036 >> 1] = 1766;
    HEAP16[5245028 >> 1] = 2400;
    HEAP16[5243564 >> 1] = 12;
    HEAP16[5263700 >> 1] = 12;
    label = 165;
    break;
   case 143:
    var $call560 = _strcmp(5263372, 5578580);
    var $tobool561 = ($call560 | 0) == 0;
    if ($tobool561) {
      label = 144;
      break;
    } else {
      label = 145;
      break;
    }
   case 144:
    HEAP16[5398712 >> 1] = 1960;
    HEAP16[5242964 >> 1] = 2616;
    HEAP16[5245036 >> 1] = 1968;
    HEAP16[5245028 >> 1] = 2664;
    HEAP16[5243564 >> 1] = 4;
    HEAP16[5263700 >> 1] = 4;
    label = 165;
    break;
   case 145:
    var $call564 = _strcmp(5263372, 5578564);
    var $tobool565 = ($call564 | 0) == 0;
    if ($tobool565) {
      label = 146;
      break;
    } else {
      label = 147;
      break;
    }
   case 146:
    HEAP16[5398712 >> 1] = 1984;
    HEAP16[5242964 >> 1] = 2620;
    HEAP16[5245036 >> 1] = 1992;
    HEAP16[5245028 >> 1] = 2672;
    HEAP16[5243564 >> 1] = 6;
    HEAP16[5263700 >> 1] = 10;
    label = 165;
    break;
   case 147:
    var $call568 = _strcmp(5263372, 5578548);
    var $tobool569 = ($call568 | 0) == 0;
    if ($tobool569) {
      label = 148;
      break;
    } else {
      label = 151;
      break;
    }
   case 148:
    var $call571 = _canon_s2is();
    var $tobool572 = ($call571 | 0) == 0;
    if ($tobool572) {
      label = 150;
      break;
    } else {
      label = 149;
      break;
    }
   case 149:
    HEAP8[5263382] = HEAP8[5578540];
    HEAP8[5263383] = HEAP8[5578541];
    HEAP8[5263384] = HEAP8[5578542];
    HEAP8[5263385] = HEAP8[5578543];
    HEAP8[5263386] = HEAP8[5578544];
    HEAP8[5263387] = HEAP8[5578545];
    label = 150;
    break;
   case 150:
    HEAP16[5398712 >> 1] = 1960;
    HEAP16[5242964 >> 1] = 2616;
    HEAP16[5245036 >> 1] = 1968;
    HEAP16[5245028 >> 1] = 2672;
    HEAP16[5243564 >> 1] = 8;
    HEAP16[5263700 >> 1] = 12;
    label = 165;
    break;
   case 151:
    var $call577 = _strcmp(5263372, 5578524);
    var $tobool578 = ($call577 | 0) == 0;
    if ($tobool578) {
      label = 152;
      break;
    } else {
      label = 153;
      break;
    }
   case 152:
    HEAP16[5398712 >> 1] = 2328;
    HEAP16[5242964 >> 1] = 3112;
    HEAP16[5245036 >> 1] = 2340;
    HEAP16[5245028 >> 1] = 3152;
    HEAP16[5243564 >> 1] = 12;
    HEAP16[5263700 >> 1] = 36;
    label = 165;
    break;
   case 153:
    var $call581 = _strcmp(5263372, 5578508);
    var $tobool582 = ($call581 | 0) == 0;
    if ($tobool582) {
      label = 154;
      break;
    } else {
      label = 155;
      break;
    }
   case 154:
    HEAP16[5398712 >> 1] = 2328;
    HEAP16[5242964 >> 1] = 3096;
    HEAP16[5245036 >> 1] = 2346;
    HEAP16[5245028 >> 1] = 3152;
    HEAP16[5243564 >> 1] = 6;
    HEAP16[5263700 >> 1] = 12;
    label = 165;
    break;
   case 155:
    var $call585 = _strcmp(5263372, 5578488);
    var $tobool586 = ($call585 | 0) == 0;
    if ($tobool586) {
      label = 156;
      break;
    } else {
      label = 157;
      break;
    }
   case 156:
    HEAP16[5398712 >> 1] = 2472;
    HEAP16[5242964 >> 1] = 3298;
    HEAP16[5245036 >> 1] = 2480;
    HEAP16[5245028 >> 1] = 3336;
    HEAP16[5243564 >> 1] = 5;
    HEAP16[5263700 >> 1] = 6;
    label = 165;
    break;
   case 157:
    var $call589 = _strcmp(5263372, 5578448);
    var $tobool590 = ($call589 | 0) == 0;
    if ($tobool590) {
      label = 158;
      break;
    } else {
      label = 159;
      break;
    }
   case 158:
    HEAP16[5398712 >> 1] = 2472;
    HEAP16[5242964 >> 1] = 3288;
    HEAP16[5245036 >> 1] = 2484;
    HEAP16[5245028 >> 1] = 3344;
    HEAP16[5243564 >> 1] = 6;
    HEAP16[5263700 >> 1] = 12;
    label = 165;
    break;
   case 159:
    var $call593 = _strcmp(5263372, 5578432);
    var $tobool594 = ($call593 | 0) == 0;
    if ($tobool594) {
      label = 160;
      break;
    } else {
      label = 161;
      break;
    }
   case 160:
    HEAP16[5398712 >> 1] = 2760;
    HEAP16[5242964 >> 1] = 3672;
    HEAP16[5245036 >> 1] = 2772;
    HEAP16[5245028 >> 1] = 3736;
    HEAP16[5243564 >> 1] = 6;
    HEAP16[5263700 >> 1] = 12;
    label = 165;
    break;
   case 161:
    var $call597 = _strcmp(5263372, 5578416);
    var $tobool598 = ($call597 | 0) == 0;
    if ($tobool598) {
      label = 162;
      break;
    } else {
      label = 163;
      break;
    }
   case 162:
    HEAP16[5398712 >> 1] = 3024;
    HEAP16[5242964 >> 1] = 4032;
    HEAP16[5245036 >> 1] = 3048;
    HEAP16[5245028 >> 1] = 4104;
    HEAP16[5243564 >> 1] = 12;
    HEAP16[5263700 >> 1] = 48;
    label = 165;
    break;
   case 163:
    var $call601 = _strcmp(5263372, 5578400);
    var $tobool602 = ($call601 | 0) == 0;
    if ($tobool602) {
      label = 164;
      break;
    } else {
      label = 169;
      break;
    }
   case 164:
    HEAP16[5398712 >> 1] = 2128;
    HEAP16[5242964 >> 1] = 2840;
    HEAP16[5245036 >> 1] = 2136;
    HEAP16[5245028 >> 1] = 2888;
    HEAP16[5243564 >> 1] = 8;
    HEAP16[5263700 >> 1] = 44;
    label = 165;
    break;
   case 165:
    HEAP32[5244036 >> 2] = 10;
    HEAP32[5263692 >> 2] = 36;
    HEAP32[5263696 >> 2] = 40;
    label = 168;
    break;
   case 166:
    var $storemerge219;
    HEAP32[5560840 >> 2] = 4;
    HEAP32[5427632 >> 2] = $storemerge219;
    HEAP32[5244036 >> 2] = 10;
    HEAP32[5263692 >> 2] = 36;
    HEAP32[5263696 >> 2] = 40;
    label = 643;
    break;
   case 167:
    HEAP16[5398712 >> 1] = 1024;
    HEAP16[5242964 >> 1] = 1552;
    HEAP32[5560840 >> 2] = 4;
    HEAP32[5427632 >> 2] = 508251675;
    var $_pr192 = HEAP16[5245028 >> 1];
    HEAP32[5244036 >> 2] = 10;
    HEAP32[5263692 >> 2] = 36;
    HEAP32[5263696 >> 2] = 40;
    var $cmp605 = ($_pr192 & 65535) > 1600;
    if ($cmp605) {
      label = 168;
      break;
    } else {
      label = 643;
      break;
    }
   case 168:
    HEAP8[5242880] = 1;
    label = 643;
    break;
   case 169:
    var $call610 = _strcmp(5263372, 5578380);
    var $tobool611 = ($call610 | 0) == 0;
    if ($tobool611) {
      label = 170;
      break;
    } else {
      label = 171;
      break;
    }
   case 170:
    HEAP16[5398712 >> 1] = 2760;
    HEAP16[5242964 >> 1] = 3684;
    HEAP16[5245036 >> 1] = 2772;
    HEAP16[5245028 >> 1] = 3720;
    HEAP16[5243564 >> 1] = 12;
    HEAP16[5263700 >> 1] = 6;
    HEAP32[5263692 >> 2] = 36;
    HEAP32[5263696 >> 2] = 40;
    HEAP8[5242880] = 1;
    label = 643;
    break;
   case 171:
    var $call614 = _strcmp(5263372, 5578360);
    var $tobool615 = ($call614 | 0) == 0;
    if ($tobool615) {
      label = 172;
      break;
    } else {
      label = 173;
      break;
    }
   case 172:
    HEAP16[5398712 >> 1] = 2742;
    HEAP16[5242964 >> 1] = 3664;
    HEAP16[5245036 >> 1] = 2778;
    HEAP16[5245028 >> 1] = 3728;
    HEAP16[5243564 >> 1] = 18;
    HEAP16[5263700 >> 1] = 16;
    HEAP32[5427632 >> 2] = 1229539657;
    HEAP32[5263692 >> 2] = 36;
    HEAP32[5263696 >> 2] = 40;
    HEAP8[5242880] = 1;
    label = 643;
    break;
   case 173:
    var $call618 = _strcmp(5263372, 5578340);
    var $tobool619 = ($call618 | 0) == 0;
    if ($tobool619) {
      label = 174;
      break;
    } else {
      label = 175;
      break;
    }
   case 174:
    HEAP16[5398712 >> 1] = 3024;
    HEAP16[5242964 >> 1] = 4032;
    HEAP16[5245036 >> 1] = 3048;
    HEAP16[5245028 >> 1] = 4080;
    HEAP16[5243564 >> 1] = 12;
    HEAP16[5263700 >> 1] = 24;
    HEAP32[5263692 >> 2] = 36;
    HEAP32[5263696 >> 2] = 40;
    HEAP8[5242880] = 1;
    label = 643;
    break;
   case 175:
    var $call622 = _strcmp(5263372, 5578320);
    var $tobool623 = ($call622 | 0) == 0;
    if ($tobool623) {
      label = 176;
      break;
    } else {
      label = 177;
      break;
    }
   case 176:
    HEAP16[5398712 >> 1] = 3043;
    HEAP16[5242964 >> 1] = 4072;
    HEAP16[5245036 >> 1] = 3060;
    HEAP16[5245028 >> 1] = 4168;
    HEAP16[5243564 >> 1] = 16;
    HEAP32[5263500 >> 2] = 16;
    HEAP32[5263508 >> 2] = 3059;
    HEAP16[5263700 >> 1] = 92;
    HEAP32[5263512 >> 2] = 92;
    HEAP32[5263692 >> 2] = 36;
    HEAP32[5263696 >> 2] = 8;
    HEAP8[5242880] = 1;
    label = 643;
    break;
   case 177:
    var $call629 = _strcmp(5263372, 5578300);
    var $tobool630 = ($call629 | 0) == 0;
    if ($tobool630) {
      label = 178;
      break;
    } else {
      label = 179;
      break;
    }
   case 178:
    HEAP16[5398712 >> 1] = 3254;
    HEAP16[5242964 >> 1] = 4366;
    HEAP16[5245036 >> 1] = 3276;
    HEAP16[5245028 >> 1] = 4464;
    HEAP16[5243564 >> 1] = 10;
    HEAP16[5263700 >> 1] = 25;
    HEAP32[5427632 >> 2] = 370546198;
    HEAP32[5263692 >> 2] = 36;
    HEAP32[5263696 >> 2] = 40;
    HEAP8[5242880] = 1;
    label = 643;
    break;
   case 179:
    var $call633 = _strcmp(5263372, 5578280);
    var $tobool634 = ($call633 | 0) == 0;
    if ($tobool634) {
      label = 180;
      break;
    } else {
      label = 181;
      break;
    }
   case 180:
    HEAP16[5242964 >> 1] = 1896;
    HEAP32[5560840 >> 2] = 4;
    HEAP32[5427632 >> 2] = -1263225676;
    label = 643;
    break;
   case 181:
    var $61 = HEAP16[5245028 >> 1];
    var $cmp640 = $61 << 16 >> 16 == 2144;
    var $or_cond139 = $lnot & $cmp640;
    if ($or_cond139) {
      label = 182;
      break;
    } else {
      label = 184;
      break;
    }
   case 182:
    HEAP16[5398712 >> 1] = 1550;
    HEAP16[5242964 >> 1] = 2088;
    HEAP16[5243564 >> 1] = 8;
    HEAP16[5263700 >> 1] = 4;
    var $call643 = _strcmp(5263372, 5578244);
    var $tobool644 = ($call643 | 0) == 0;
    if ($tobool644) {
      label = 183;
      break;
    } else {
      label = 643;
      break;
    }
   case 183:
    HEAP32[5560840 >> 2] = 4;
    HEAP32[5427632 >> 2] = -1263225676;
    label = 643;
    break;
   case 184:
    var $cmp651 = $61 << 16 >> 16 == 2224;
    var $or_cond140 = $lnot & $cmp651;
    if ($or_cond140) {
      label = 185;
      break;
    } else {
      label = 186;
      break;
    }
   case 185:
    HEAP16[5398712 >> 1] = 1448;
    HEAP16[5242964 >> 1] = 2176;
    HEAP16[5243564 >> 1] = 6;
    HEAP16[5263700 >> 1] = 48;
    label = 643;
    break;
   case 186:
    var $cmp658 = $61 << 16 >> 16 == 2376;
    var $or_cond141 = $lnot & $cmp658;
    if ($or_cond141) {
      label = 187;
      break;
    } else {
      label = 188;
      break;
    }
   case 187:
    HEAP16[5398712 >> 1] = 1720;
    HEAP16[5242964 >> 1] = 2312;
    HEAP16[5243564 >> 1] = 6;
    HEAP16[5263700 >> 1] = 12;
    label = 643;
    break;
   case 188:
    var $cmp665 = $61 << 16 >> 16 == 2672;
    var $or_cond142 = $lnot & $cmp665;
    if ($or_cond142) {
      label = 189;
      break;
    } else {
      label = 190;
      break;
    }
   case 189:
    HEAP16[5398712 >> 1] = 1960;
    HEAP16[5242964 >> 1] = 2616;
    HEAP16[5243564 >> 1] = 6;
    HEAP16[5263700 >> 1] = 12;
    label = 643;
    break;
   case 190:
    var $cmp672 = $61 << 16 >> 16 == 3152;
    var $or_cond143 = $lnot & $cmp672;
    if ($or_cond143) {
      label = 191;
      break;
    } else {
      label = 193;
      break;
    }
   case 191:
    HEAP16[5398712 >> 1] = 2056;
    HEAP16[5242964 >> 1] = 3088;
    HEAP16[5243564 >> 1] = 12;
    HEAP16[5263700 >> 1] = 64;
    var $62 = HEAP32[5243560 >> 2];
    var $cmp675 = ($62 | 0) == -2147483280;
    if ($cmp675) {
      label = 192;
      break;
    } else {
      label = 643;
      break;
    }
   case 192:
    _adobe_coeff(5587508, 5578232);
    label = 643;
    break;
   case 193:
    var $cmp683 = $61 << 16 >> 16 == 3160;
    var $or_cond144 = $lnot & $cmp683;
    if ($or_cond144) {
      label = 194;
      break;
    } else {
      label = 195;
      break;
    }
   case 194:
    HEAP16[5398712 >> 1] = 2328;
    HEAP16[5242964 >> 1] = 3112;
    HEAP16[5243564 >> 1] = 12;
    HEAP16[5263700 >> 1] = 44;
    label = 643;
    break;
   case 195:
    var $cmp690 = $61 << 16 >> 16 == 3344;
    var $or_cond145 = $lnot & $cmp690;
    if ($or_cond145) {
      label = 196;
      break;
    } else {
      label = 197;
      break;
    }
   case 196:
    HEAP16[5398712 >> 1] = 2472;
    HEAP16[5242964 >> 1] = 3288;
    HEAP16[5243564 >> 1] = 6;
    HEAP16[5263700 >> 1] = 4;
    label = 643;
    break;
   case 197:
    var $call694 = _strcmp(5263372, 5578220);
    var $tobool695 = ($call694 | 0) == 0;
    if ($tobool695) {
      label = 198;
      break;
    } else {
      label = 199;
      break;
    }
   case 198:
    HEAP32[5427632 >> 2] = 1633771873;
    var $63 = HEAP16[5428900 >> 1];
    var $conv697 = $63 & 65535;
    HEAP32[5561400 >> 2] = $conv697;
    label = 643;
    break;
   case 199:
    var $cmp702 = $61 << 16 >> 16 == 3516;
    var $or_cond146 = $lnot & $cmp702;
    if ($or_cond146) {
      label = 200;
      break;
    } else {
      label = 202;
      break;
    }
   case 200:
    HEAP16[5243564 >> 1] = 14;
    HEAP16[5263700 >> 1] = 42;
    var $64 = HEAP32[5243560 >> 2];
    var $cmp705 = ($64 | 0) == -2147483255;
    if ($cmp705) {
      label = 201;
      break;
    } else {
      label = 261;
      break;
    }
   case 201:
    _adobe_coeff(5587508, 5578208);
    label = 261;
    break;
   case 202:
    var $cmp713 = $61 << 16 >> 16 == 3596;
    var $or_cond147 = $lnot & $cmp713;
    if ($or_cond147) {
      label = 203;
      break;
    } else {
      label = 204;
      break;
    }
   case 203:
    HEAP16[5243564 >> 1] = 12;
    HEAP16[5263700 >> 1] = 74;
    label = 261;
    break;
   case 204:
    var $cmp720 = $61 << 16 >> 16 == 3744;
    var $or_cond148 = $lnot & $cmp720;
    if ($or_cond148) {
      label = 205;
      break;
    } else {
      label = 207;
      break;
    }
   case 205:
    HEAP16[5398712 >> 1] = 2760;
    HEAP16[5242964 >> 1] = 3684;
    HEAP16[5243564 >> 1] = 16;
    HEAP16[5263700 >> 1] = 8;
    var $65 = HEAP32[5243560 >> 2];
    var $cmp723 = $65 >>> 0 > 41025536;
    if ($cmp723) {
      label = 206;
      break;
    } else {
      label = 643;
      break;
    }
   case 206:
    HEAP16[5243564 >> 1] = 12;
    HEAP16[5263700 >> 1] = 52;
    label = 643;
    break;
   case 207:
    var $cmp731 = $61 << 16 >> 16 == 3944;
    var $or_cond149 = $lnot & $cmp731;
    if ($or_cond149) {
      label = 208;
      break;
    } else {
      label = 209;
      break;
    }
   case 208:
    HEAP16[5398712 >> 1] = 2602;
    HEAP16[5242964 >> 1] = 3908;
    HEAP16[5243564 >> 1] = 18;
    HEAP16[5263700 >> 1] = 30;
    label = 643;
    break;
   case 209:
    var $cmp738 = $61 << 16 >> 16 == 3948;
    var $or_cond150 = $lnot & $cmp738;
    if ($or_cond150) {
      label = 210;
      break;
    } else {
      label = 214;
      break;
    }
   case 210:
    HEAP16[5243564 >> 1] = 18;
    HEAP16[5263700 >> 1] = 42;
    var $sub742 = $46 - 2 & 65535;
    HEAP16[5398712 >> 1] = $sub742;
    var $66 = HEAP32[5243560 >> 2];
    var $cmp744 = ($66 | 0) == -2147483082;
    if ($cmp744) {
      label = 211;
      break;
    } else {
      var $67 = $66;
      label = 212;
      break;
    }
   case 211:
    _adobe_coeff(5587508, 5578196);
    var $_pr198 = HEAP32[5243560 >> 2];
    var $67 = $_pr198;
    label = 212;
    break;
   case 212:
    var $67;
    var $cmp748 = ($67 | 0) == -2147483052;
    if ($cmp748) {
      label = 213;
      break;
    } else {
      label = 261;
      break;
    }
   case 213:
    _adobe_coeff(5587508, 5578184);
    label = 261;
    break;
   case 214:
    var $cmp756 = $61 << 16 >> 16 == 3984;
    var $or_cond151 = $lnot & $cmp756;
    if ($or_cond151) {
      label = 215;
      break;
    } else {
      label = 216;
      break;
    }
   case 215:
    HEAP16[5243564 >> 1] = 20;
    HEAP16[5263700 >> 1] = 76;
    var $sub760 = $46 - 2 & 65535;
    HEAP16[5398712 >> 1] = $sub760;
    label = 261;
    break;
   case 216:
    var $cmp766 = $61 << 16 >> 16 == 4104;
    var $or_cond152 = $lnot & $cmp766;
    if ($or_cond152) {
      label = 217;
      break;
    } else {
      label = 218;
      break;
    }
   case 217:
    HEAP16[5398712 >> 1] = 3024;
    HEAP16[5242964 >> 1] = 4032;
    HEAP16[5243564 >> 1] = 12;
    HEAP16[5263700 >> 1] = 48;
    label = 643;
    break;
   case 218:
    var $cmp773 = $61 << 16 >> 16 == 4152;
    var $or_cond153 = $lnot & $cmp773;
    if ($or_cond153) {
      label = 219;
      break;
    } else {
      label = 220;
      break;
    }
   case 219:
    HEAP16[5243564 >> 1] = 12;
    HEAP16[5263700 >> 1] = 192;
    label = 261;
    break;
   case 220:
    var $cmp780 = $61 << 16 >> 16 == 4160;
    var $or_cond154 = $lnot & $cmp780;
    if ($or_cond154) {
      label = 221;
      break;
    } else {
      label = 222;
      break;
    }
   case 221:
    HEAP16[5398712 >> 1] = 3048;
    HEAP16[5242964 >> 1] = 4048;
    HEAP16[5243564 >> 1] = 11;
    HEAP16[5263700 >> 1] = 104;
    label = 643;
    break;
   case 222:
    var $cmp787 = $61 << 16 >> 16 == 4176;
    var $or_cond155 = $lnot & $cmp787;
    if ($or_cond155) {
      label = 223;
      break;
    } else {
      label = 224;
      break;
    }
   case 223:
    HEAP16[5398712 >> 1] = 3045;
    HEAP16[5242964 >> 1] = 4072;
    HEAP16[5263700 >> 1] = 96;
    HEAP16[5243564 >> 1] = 17;
    HEAP32[5263500 >> 2] = 17;
    var $68 = HEAP16[5245036 >> 1];
    var $conv790 = $68 & 65535;
    HEAP32[5263508 >> 2] = $conv790;
    HEAP32[5263512 >> 2] = 80;
    HEAP32[5427632 >> 2] = 1229539657;
    label = 643;
    break;
   case 224:
    var $cmp795 = $61 << 16 >> 16 == 4312;
    var $or_cond156 = $lnot & $cmp795;
    if ($or_cond156) {
      label = 225;
      break;
    } else {
      label = 227;
      break;
    }
   case 225:
    HEAP16[5243564 >> 1] = 18;
    HEAP16[5263700 >> 1] = 22;
    var $sub799 = $46 - 2 & 65535;
    HEAP16[5398712 >> 1] = $sub799;
    var $69 = HEAP32[5243560 >> 2];
    var $cmp801 = ($69 | 0) == -2147483274;
    if ($cmp801) {
      label = 226;
      break;
    } else {
      label = 261;
      break;
    }
   case 226:
    _adobe_coeff(5587508, 5578172);
    label = 261;
    break;
   case 227:
    var $cmp809 = $61 << 16 >> 16 == 4352;
    var $or_cond157 = $lnot & $cmp809;
    if ($or_cond157) {
      label = 228;
      break;
    } else {
      label = 230;
      break;
    }
   case 228:
    HEAP16[5243564 >> 1] = 18;
    HEAP16[5263700 >> 1] = 62;
    var $70 = HEAP32[5243560 >> 2];
    var $cmp812 = ($70 | 0) == -2147483e3;
    if ($cmp812) {
      label = 229;
      break;
    } else {
      label = 261;
      break;
    }
   case 229:
    _adobe_coeff(5587508, 5578160);
    label = 261;
    break;
   case 230:
    var $cmp820 = $61 << 16 >> 16 == 4476;
    var $or_cond158 = $lnot & $cmp820;
    if ($or_cond158) {
      label = 231;
      break;
    } else {
      label = 232;
      break;
    }
   case 231:
    HEAP16[5243564 >> 1] = 34;
    HEAP16[5263700 >> 1] = 90;
    label = 261;
    break;
   case 232:
    var $cmp827 = $61 << 16 >> 16 == 4480;
    var $or_cond159 = $lnot & $cmp827;
    if ($or_cond159) {
      label = 233;
      break;
    } else {
      label = 234;
      break;
    }
   case 233:
    HEAP16[5398712 >> 1] = 3326;
    HEAP16[5242964 >> 1] = 4432;
    HEAP16[5243564 >> 1] = 10;
    HEAP16[5263700 >> 1] = 12;
    HEAP32[5427632 >> 2] = 1229539657;
    label = 643;
    break;
   case 234:
    var $cmp834 = $61 << 16 >> 16 == 4496;
    var $or_cond160 = $lnot & $cmp834;
    if ($or_cond160) {
      label = 235;
      break;
    } else {
      label = 236;
      break;
    }
   case 235:
    HEAP16[5398712 >> 1] = 3316;
    HEAP16[5242964 >> 1] = 4404;
    HEAP16[5243564 >> 1] = 50;
    HEAP16[5263700 >> 1] = 80;
    label = 643;
    break;
   case 236:
    var $cmp841 = $61 << 16 >> 16 == 4832;
    var $or_cond161 = $lnot & $cmp841;
    if ($or_cond161) {
      label = 237;
      break;
    } else {
      label = 239;
      break;
    }
   case 237:
    var $71 = HEAP32[5243560 >> 2];
    var $cmp844 = ($71 | 0) == -2147483039;
    var $conv847 = $cmp844 ? 51 : 26;
    HEAP16[5243564 >> 1] = $conv847;
    HEAP16[5263700 >> 1] = 62;
    var $cmp848 = ($71 | 0) == -2147483054;
    if ($cmp848) {
      label = 238;
      break;
    } else {
      label = 261;
      break;
    }
   case 238:
    _adobe_coeff(5587508, 5578148);
    label = 261;
    break;
   case 239:
    var $cmp856 = $61 << 16 >> 16 == 5108;
    var $or_cond162 = $lnot & $cmp856;
    if ($or_cond162) {
      label = 240;
      break;
    } else {
      label = 241;
      break;
    }
   case 240:
    HEAP16[5243564 >> 1] = 13;
    HEAP16[5263700 >> 1] = 98;
    label = 261;
    break;
   case 241:
    var $cmp863 = $61 << 16 >> 16 == 5120;
    var $or_cond163 = $lnot & $cmp863;
    if ($or_cond163) {
      label = 242;
      break;
    } else {
      label = 243;
      break;
    }
   case 242:
    HEAP16[5243564 >> 1] = 45;
    var $sub867 = $46 - 45 & 65535;
    HEAP16[5398712 >> 1] = $sub867;
    HEAP16[5263700 >> 1] = 142;
    HEAP16[5242964 >> 1] = 4916;
    label = 643;
    break;
   case 243:
    var $cmp873 = $61 << 16 >> 16 == 5280;
    var $or_cond164 = $lnot & $cmp873;
    if ($or_cond164) {
      label = 244;
      break;
    } else {
      label = 246;
      break;
    }
   case 244:
    HEAP16[5243564 >> 1] = 52;
    HEAP16[5263700 >> 1] = 72;
    var $72 = HEAP32[5243560 >> 2];
    var $cmp876 = ($72 | 0) == -2147482879;
    if ($cmp876) {
      label = 245;
      break;
    } else {
      label = 261;
      break;
    }
   case 245:
    _adobe_coeff(5587508, 5578136);
    label = 261;
    break;
   case 246:
    var $cmp884 = $61 << 16 >> 16 == 5344;
    var $or_cond165 = $lnot & $cmp884;
    if ($or_cond165) {
      label = 247;
      break;
    } else {
      label = 253;
      break;
    }
   case 247:
    HEAP16[5243564 >> 1] = 51;
    HEAP16[5263700 >> 1] = 142;
    var $73 = HEAP32[5243560 >> 2];
    var $cmp887 = ($73 | 0) == -2147483031;
    if ($cmp887) {
      label = 248;
      break;
    } else {
      var $74 = $73;
      label = 249;
      break;
    }
   case 248:
    HEAP16[5243564 >> 1] = 100;
    HEAP16[5263700 >> 1] = 126;
    var $sub891 = $46 - 2 & 65535;
    HEAP16[5398712 >> 1] = $sub891;
    _adobe_coeff(5587508, 5578084);
    var $_pr199 = HEAP32[5243560 >> 2];
    var $74 = $_pr199;
    label = 249;
    break;
   case 249:
    var $74;
    var $cmp894 = ($74 | 0) == -2147483024;
    if ($cmp894) {
      label = 250;
      break;
    } else {
      var $75 = $74;
      label = 251;
      break;
    }
   case 250:
    _adobe_coeff(5587508, 5578072);
    var $_pre1 = HEAP32[5243560 >> 2];
    var $75 = $_pre1;
    label = 251;
    break;
   case 251:
    var $75;
    var $cmp898 = ($75 | 0) == -2147483002;
    if ($cmp898) {
      label = 252;
      break;
    } else {
      label = 261;
      break;
    }
   case 252:
    _adobe_coeff(5587508, 5578060);
    label = 261;
    break;
   case 253:
    var $cmp906 = $61 << 16 >> 16 == 5360;
    var $or_cond166 = $lnot & $cmp906;
    if ($or_cond166) {
      label = 254;
      break;
    } else {
      label = 255;
      break;
    }
   case 254:
    HEAP16[5243564 >> 1] = 51;
    HEAP16[5263700 >> 1] = 158;
    label = 261;
    break;
   case 255:
    var $cmp913 = $61 << 16 >> 16 == 5568;
    var $or_cond167 = $lnot & $cmp913;
    if ($or_cond167) {
      label = 256;
      break;
    } else {
      label = 257;
      break;
    }
   case 256:
    HEAP16[5243564 >> 1] = 38;
    HEAP16[5263700 >> 1] = 72;
    label = 261;
    break;
   case 257:
    var $cmp920 = $61 << 16 >> 16 == 5712;
    var $or_cond168 = $lnot & $cmp920;
    if ($or_cond168) {
      label = 258;
      break;
    } else {
      label = 259;
      break;
    }
   case 258:
    HEAP16[5398712 >> 1] = 3752;
    HEAP16[5242964 >> 1] = 5640;
    HEAP16[5243564 >> 1] = 20;
    HEAP16[5263700 >> 1] = 62;
    label = 643;
    break;
   case 259:
    var $cmp927 = $61 << 16 >> 16 == 5792;
    var $or_cond169 = $lnot & $cmp927;
    if ($or_cond169) {
      label = 260;
      break;
    } else {
      label = 262;
      break;
    }
   case 260:
    HEAP16[5243564 >> 1] = 51;
    HEAP16[5263700 >> 1] = 158;
    label = 261;
    break;
   case 261:
    var $76 = HEAP16[5243564 >> 1];
    var $77 = HEAP16[5398712 >> 1];
    var $sub932 = $77 - $76 & 65535;
    HEAP16[5398712 >> 1] = $sub932;
    var $78 = HEAP16[5263700 >> 1];
    var $79 = HEAP16[5242964 >> 1];
    var $sub936 = $79 - $78 & 65535;
    HEAP16[5242964 >> 1] = $sub936;
    label = 643;
    break;
   case 262:
    var $cmp942 = $61 << 16 >> 16 == 5920;
    var $or_cond170 = $lnot & $cmp942;
    if ($or_cond170) {
      label = 263;
      break;
    } else {
      label = 264;
      break;
    }
   case 263:
    HEAP16[5398712 >> 1] = 3870;
    HEAP16[5242964 >> 1] = 5796;
    HEAP16[5243564 >> 1] = 80;
    HEAP16[5263700 >> 1] = 122;
    label = 643;
    break;
   case 264:
    var $call946 = _strcmp(5263372, 5578056);
    var $tobool947 = ($call946 | 0) == 0;
    if ($tobool947) {
      label = 265;
      break;
    } else {
      label = 266;
      break;
    }
   case 265:
    var $80 = HEAPF32[5561124 >> 2];
    var $conv949 = $80;
    var $mul950 = $conv949 * .4857685009487666;
    var $conv951 = $mul950;
    HEAPF32[5561124 >> 2] = $conv951;
    var $81 = HEAPF32[5561132 >> 2];
    var $conv952 = $81;
    var $mul953 = $conv952 * .807570977917981;
    var $conv954 = $mul953;
    HEAPF32[5561132 >> 2] = $conv954;
    label = 643;
    break;
   case 266:
    var $call956 = _strcmp(5263372, 5578052);
    var $tobool957 = ($call956 | 0) == 0;
    if ($tobool957) {
      label = 267;
      break;
    } else {
      label = 268;
      break;
    }
   case 267:
    var $sub960 = $47 - 4 & 65535;
    HEAP16[5242964 >> 1] = $sub960;
    HEAPF64[tempDoublePtr >> 3] = .5, HEAP32[5245656 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5245660 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    label = 643;
    break;
   case 268:
    var $call963 = _strcmp(5263372, 5578044);
    var $tobool964 = ($call963 | 0) == 0;
    if ($tobool964) {
      label = 272;
      break;
    } else {
      label = 269;
      break;
    }
   case 269:
    var $call966 = _strcmp(5263372, 5578040);
    var $tobool967 = ($call966 | 0) == 0;
    if ($tobool967) {
      label = 272;
      break;
    } else {
      label = 270;
      break;
    }
   case 270:
    var $call969 = _strcmp(5263372, 5578036);
    var $tobool970 = ($call969 | 0) == 0;
    if ($tobool970) {
      label = 272;
      break;
    } else {
      label = 271;
      break;
    }
   case 271:
    var $call972 = _strcmp(5263372, 5578028);
    var $tobool973 = ($call972 | 0) == 0;
    if ($tobool973) {
      label = 272;
      break;
    } else {
      label = 273;
      break;
    }
   case 272:
    var $sub976 = $46 - 3 & 65535;
    HEAP16[5398712 >> 1] = $sub976;
    var $sub979 = $47 - 4 & 65535;
    HEAP16[5242964 >> 1] = $sub979;
    label = 643;
    break;
   case 273:
    var $call982 = _strcmp(5263372, 5578024);
    var $tobool983 = ($call982 | 0) == 0;
    if ($tobool983) {
      label = 276;
      break;
    } else {
      label = 274;
      break;
    }
   case 274:
    var $call985 = _strcmp(5263372, 5577960);
    var $tobool986 = ($call985 | 0) == 0;
    if ($tobool986) {
      label = 276;
      break;
    } else {
      label = 275;
      break;
    }
   case 275:
    var $call988 = _strcmp(5263372, 5577952);
    var $tobool989 = ($call988 | 0) == 0;
    if ($tobool989) {
      label = 276;
      break;
    } else {
      label = 277;
      break;
    }
   case 276:
    var $sub992 = $47 - 4 & 65535;
    HEAP16[5242964 >> 1] = $sub992;
    HEAP16[5263700 >> 1] = 2;
    label = 643;
    break;
   case 277:
    var $call995 = _strcmp(5263372, 5577944);
    var $tobool996 = ($call995 | 0) == 0;
    if ($tobool996) {
      label = 278;
      break;
    } else {
      label = 279;
      break;
    }
   case 278:
    var $sub999 = $47 - 28 & 65535;
    HEAP16[5242964 >> 1] = $sub999;
    HEAP16[5263700 >> 1] = 6;
    label = 643;
    break;
   case 279:
    var $call1002 = _strcmp(5263372, 5577936);
    var $tobool1003 = ($call1002 | 0) == 0;
    if ($tobool1003) {
      label = 281;
      break;
    } else {
      label = 280;
      break;
    }
   case 280:
    var $call1005 = _strcmp(5263372, 5577932);
    var $tobool1006 = ($call1005 | 0) == 0;
    if ($tobool1006) {
      label = 281;
      break;
    } else {
      label = 282;
      break;
    }
   case 281:
    var $sub1009 = $47 - 42 & 65535;
    HEAP16[5242964 >> 1] = $sub1009;
    label = 643;
    break;
   case 282:
    var $call1012 = _strcmp(5263372, 5577924);
    var $tobool1013 = ($call1012 | 0) == 0;
    if ($tobool1013) {
      label = 284;
      break;
    } else {
      label = 283;
      break;
    }
   case 283:
    var $call1015 = _strcmp(5263372, 5577916);
    var $tobool1016 = ($call1015 | 0) == 0;
    if ($tobool1016) {
      label = 284;
      break;
    } else {
      label = 285;
      break;
    }
   case 284:
    var $sub1019 = $47 - 44 & 65535;
    HEAP16[5242964 >> 1] = $sub1019;
    label = 643;
    break;
   case 285:
    var $call1022 = _strcmp(5263372, 5577908);
    var $tobool1023 = ($call1022 | 0) == 0;
    if ($tobool1023) {
      label = 288;
      break;
    } else {
      label = 286;
      break;
    }
   case 286:
    var $call1025 = _strcmp(5263372, 5577900);
    var $tobool1026 = ($call1025 | 0) == 0;
    if ($tobool1026) {
      label = 288;
      break;
    } else {
      label = 287;
      break;
    }
   case 287:
    var $call1028 = _strcmp(5263372, 5577892);
    var $tobool1029 = ($call1028 | 0) == 0;
    if ($tobool1029) {
      label = 288;
      break;
    } else {
      label = 289;
      break;
    }
   case 288:
    var $sub1032 = $47 - 46 & 65535;
    HEAP16[5242964 >> 1] = $sub1032;
    label = 643;
    break;
   case 289:
    var $call1035 = _strcmp(5263372, 5577884);
    var $tobool1036 = ($call1035 | 0) == 0;
    if ($tobool1036) {
      label = 290;
      break;
    } else {
      label = 291;
      break;
    }
   case 290:
    var $sub1039 = $47 - 52 & 65535;
    HEAP16[5242964 >> 1] = $sub1039;
    HEAP16[5263700 >> 1] = 2;
    label = 643;
    break;
   case 291:
    var $call1042 = _strncmp(5263372, 5577880, 3);
    var $tobool1043 = ($call1042 | 0) == 0;
    if ($tobool1043) {
      label = 294;
      break;
    } else {
      label = 292;
      break;
    }
   case 292:
    var $call1045 = _strncmp(5263372, 5577876, 3);
    var $tobool1046 = ($call1045 | 0) == 0;
    if ($tobool1046) {
      label = 294;
      break;
    } else {
      label = 293;
      break;
    }
   case 293:
    var $call1048 = _strncmp(5263372, 5577872, 3);
    var $tobool1049 = ($call1048 | 0) == 0;
    if ($tobool1049) {
      label = 294;
      break;
    } else {
      label = 295;
      break;
    }
   case 294:
    var $dec = $47 - 1 & 65535;
    HEAP16[5242964 >> 1] = $dec;
    label = 643;
    break;
   case 295:
    var $call1052 = _strcmp(5263372, 5577864);
    var $tobool1053 = ($call1052 | 0) == 0;
    if ($tobool1053) {
      label = 296;
      break;
    } else {
      label = 298;
      break;
    }
   case 296:
    var $82 = HEAP32[5263696 >> 2];
    var $tobool1055 = ($82 | 0) == 0;
    if ($tobool1055) {
      label = 643;
      break;
    } else {
      label = 297;
      break;
    }
   case 297:
    var $add1058 = $47 + 3 & 65535;
    HEAP16[5242964 >> 1] = $add1058;
    var $add1061 = $47 + 6 & 65535;
    HEAP16[5245028 >> 1] = $add1061;
    label = 643;
    break;
   case 298:
    var $call1065 = _strcmp(5263372, 5577856);
    var $tobool1066 = ($call1065 | 0) == 0;
    if ($tobool1066) {
      label = 299;
      break;
    } else {
      label = 300;
      break;
    }
   case 299:
    HEAP16[5263700 >> 1] = 1;
    var $sub1069 = $47 - 4 & 65535;
    HEAP16[5242964 >> 1] = $sub1069;
    HEAP32[5427632 >> 2] = -1802201964;
    label = 643;
    break;
   case 300:
    var $call1072 = _strncmp(5263372, 5577852, 3);
    var $tobool1073 = ($call1072 | 0) == 0;
    if ($tobool1073) {
      label = 301;
      break;
    } else {
      label = 302;
      break;
    }
   case 301:
    HEAP16[5263700 >> 1] = 6;
    var $sub1076 = $47 - 14 & 65535;
    HEAP16[5242964 >> 1] = $sub1076;
    label = 643;
    break;
   case 302:
    var $call1079 = _strncmp(5263372, 5577848, 3);
    var $tobool1080 = ($call1079 | 0) == 0;
    if ($tobool1080) {
      label = 303;
      break;
    } else {
      label = 306;
      break;
    }
   case 303:
    var $cmp1083 = $47 << 16 >> 16 == 3264;
    if ($cmp1083) {
      label = 304;
      break;
    } else {
      label = 305;
      break;
    }
   case 304:
    HEAP16[5242964 >> 1] = 3232;
    label = 643;
    break;
   case 305:
    var $sub1091 = $47 - 8 & 65535;
    HEAP16[5242964 >> 1] = $sub1091;
    label = 643;
    break;
   case 306:
    var $call1095 = _strncmp(5263372, 5577840, 4);
    var $tobool1096 = ($call1095 | 0) == 0;
    if ($tobool1096) {
      label = 307;
      break;
    } else {
      label = 308;
      break;
    }
   case 307:
    var $sub1099 = $47 - 32 & 65535;
    HEAP16[5242964 >> 1] = $sub1099;
    label = 643;
    break;
   case 308:
    var $call1102 = _strcmp(5263628, 5587524);
    var $tobool1103 = ($call1102 | 0) == 0;
    var $cmp1106 = $61 << 16 >> 16 == 4032;
    var $or_cond171 = $tobool1103 & $cmp1106;
    if ($or_cond171) {
      label = 309;
      break;
    } else {
      label = 310;
      break;
    }
   case 309:
    _adobe_coeff(5587524, 5577824);
    label = 643;
    break;
   case 310:
    var $call1110 = _strncmp(5263372, 5577776, 9);
    var $tobool1111 = ($call1110 | 0) == 0;
    if ($tobool1111) {
      label = 311;
      break;
    } else {
      label = 313;
      break;
    }
   case 311:
    HEAP32[5263696 >> 2] = 24;
    HEAP32[5427632 >> 2] = -1802201964;
    var $83 = HEAP8[5263381];
    var $cmp1114 = $83 << 24 >> 24 == 55;
    var $84 = HEAPF32[5264096 >> 2];
    var $cmp1117 = $84 >= 400;
    var $or_cond2 = $cmp1114 & $cmp1117;
    if ($or_cond2) {
      label = 312;
      break;
    } else {
      label = 643;
      break;
    }
   case 312:
    HEAP32[5561400 >> 2] = 255;
    label = 643;
    break;
   case 313:
    var $call1122 = _strncmp(5263372, 5577772, 2);
    var $tobool1123 = ($call1122 | 0) == 0;
    if ($tobool1123) {
      label = 314;
      break;
    } else {
      label = 315;
      break;
    }
   case 314:
    var $sub1126 = $46 - 2 & 65535;
    HEAP16[5398712 >> 1] = $sub1126;
    label = 643;
    break;
   case 315:
    if (($zero_fsize_0 | 0) == 1581060) {
      label = 316;
      break;
    } else if (($zero_fsize_0 | 0) == 2465792) {
      label = 317;
      break;
    } else if (($zero_fsize_0 | 0) == 4771840) {
      label = 319;
      break;
    } else {
      label = 324;
      break;
    }
   case 316:
    HEAP16[5398712 >> 1] = 963;
    HEAP16[5242964 >> 1] = 1287;
    HEAP16[5245028 >> 1] = 1632;
    HEAP32[5263496 >> 2] = 1012;
    HEAP32[5560840 >> 2] = 4;
    HEAP32[5427632 >> 2] = 505290270;
    _simple_coeff(3);
    HEAPF32[5245640 >> 2] = 1.2085000276565552;
    HEAPF32[5245644 >> 2] = 1.0943000316619873;
    HEAPF32[5245652 >> 2] = 1.1102999448776245;
    label = 318;
    break;
   case 317:
    HEAP16[5398712 >> 1] = 1203;
    HEAP16[5242964 >> 1] = 1616;
    HEAP16[5245028 >> 1] = 2048;
    HEAP32[5560840 >> 2] = 4;
    HEAP32[5427632 >> 2] = 1263225675;
    _adobe_coeff(5587524, 5577764);
    label = 318;
    break;
   case 318:
    HEAP32[5244036 >> 2] = 10;
    HEAP32[5263692 >> 2] = 36;
    HEAP32[5263696 >> 2] = 6;
    label = 643;
    break;
   case 319:
    HEAP16[5398712 >> 1] = 1540;
    HEAP16[5242964 >> 1] = 2064;
    HEAP32[5560840 >> 2] = 4;
    HEAP32[5427632 >> 2] = -505290271;
    HEAP32[5263692 >> 2] = 36;
    HEAP32[5263696 >> 2] = 6;
    var $85 = HEAP32[5243568 >> 2];
    var $tobool1140 = ($85 | 0) == 0;
    if ($tobool1140) {
      label = 320;
      break;
    } else {
      label = 322;
      break;
    }
   case 320:
    var $call1142 = _nikon_e995();
    var $tobool1143 = ($call1142 | 0) == 0;
    if ($tobool1143) {
      label = 322;
      break;
    } else {
      label = 321;
      break;
    }
   case 321:
    HEAP8[5263372] = HEAP8[5577756];
    HEAP8[5263373] = HEAP8[5577757];
    HEAP8[5263374] = HEAP8[5577758];
    HEAP8[5263375] = HEAP8[5577759];
    HEAP8[5263376] = HEAP8[5577760];
    label = 322;
    break;
   case 322:
    var $call1147 = _strcmp(5263372, 5577756);
    var $tobool1148 = ($call1147 | 0) == 0;
    if ($tobool1148) {
      label = 643;
      break;
    } else {
      label = 323;
      break;
    }
   case 323:
    HEAP32[5427632 >> 2] = -1263225676;
    _simple_coeff(3);
    HEAPF32[5245640 >> 2] = 1.1959999799728394;
    HEAPF32[5245644 >> 2] = 1.246000051498413;
    HEAPF32[5245648 >> 2] = 1.0180000066757202;
    label = 643;
    break;
   case 324:
    var $call1152 = _strcmp(5263372, 5577748);
    var $tobool1153 = ($call1152 | 0) == 0;
    if ($tobool1153) {
      label = 325;
      break;
    } else {
      label = 328;
      break;
    }
   case 325:
    var $86 = HEAP32[5243568 >> 2];
    var $tobool1155 = ($86 | 0) == 0;
    if ($tobool1155) {
      label = 326;
      break;
    } else {
      label = 327;
      break;
    }
   case 326:
    var $call1157 = _nikon_e2100();
    var $tobool1158 = ($call1157 | 0) == 0;
    if ($tobool1158) {
      label = 329;
      break;
    } else {
      label = 327;
      break;
    }
   case 327:
    HEAP16[5398712 >> 1] = 1206;
    HEAP16[5242964 >> 1] = 1616;
    HEAP32[5263696 >> 2] = 30;
    label = 643;
    break;
   case 328:
    var $call1162 = _strcmp(5263372, 5577740);
    var $tobool1163 = ($call1162 | 0) == 0;
    if ($tobool1163) {
      label = 329;
      break;
    } else {
      label = 330;
      break;
    }
   case 329:
    HEAP8[5263372] = HEAP8[5577740];
    HEAP8[5263373] = HEAP8[5577741];
    HEAP8[5263374] = HEAP8[5577742];
    HEAP8[5263375] = HEAP8[5577743];
    HEAP8[5263376] = HEAP8[5577744];
    HEAP8[5263377] = HEAP8[5577745];
    HEAP16[5398712 >> 1] = 1204;
    HEAP16[5242964 >> 1] = 1616;
    HEAP32[5560840 >> 2] = 4;
    HEAP32[5427632 >> 2] = 1263225675;
    label = 643;
    break;
   case 330:
    if (($zero_fsize_0 | 0) == 4775936) {
      label = 331;
      break;
    } else if (($zero_fsize_0 | 0) == 5869568) {
      label = 343;
      break;
    } else {
      label = 347;
      break;
    }
   case 331:
    HEAP16[5398712 >> 1] = 1542;
    HEAP16[5242964 >> 1] = 2064;
    HEAP32[5263692 >> 2] = 36;
    HEAP32[5263696 >> 2] = 30;
    var $87 = HEAP32[5243568 >> 2];
    var $tobool1170 = ($87 | 0) == 0;
    if ($tobool1170) {
      label = 332;
      break;
    } else {
      label = 333;
      break;
    }
   case 332:
    _nikon_3700();
    label = 333;
    break;
   case 333:
    var $88 = HEAP8[5263372];
    var $cmp1174 = $88 << 24 >> 24 == 69;
    if ($cmp1174) {
      label = 334;
      break;
    } else {
      label = 336;
      break;
    }
   case 334:
    var $call1177 = _atoi(5263373);
    var $cmp1178 = ($call1177 | 0) < 3700;
    if ($cmp1178) {
      label = 335;
      break;
    } else {
      label = 336;
      break;
    }
   case 335:
    HEAP32[5427632 >> 2] = 1229539657;
    label = 336;
    break;
   case 336:
    var $call1182 = _strcmp(5263372, 5577728);
    var $tobool1183 = ($call1182 | 0) == 0;
    if ($tobool1183) {
      label = 337;
      break;
    } else {
      label = 338;
      break;
    }
   case 337:
    HEAP32[5403048 >> 2] = 1;
    HEAP32[5427632 >> 2] = 370546198;
    label = 338;
    break;
   case 338:
    var $89 = HEAP8[5263628];
    var $cmp1187 = $89 << 24 >> 24 == 79;
    if ($cmp1187) {
      label = 339;
      break;
    } else {
      label = 643;
      break;
    }
   case 339:
    var $call1190 = _find_green(12, 32, 1188864, 3576832);
    var $conv1191 = $call1190 & -1;
    var $call1192 = _find_green(12, 32, 2383920, 2387016);
    var $conv1193 = $call1192 & -1;
    var $ispos = ($conv1191 | 0) > -1;
    var $neg179 = -$conv1191 | 0;
    var $call1194 = $ispos ? $conv1191 : $neg179;
    var $ispos180 = ($conv1193 | 0) > -1;
    var $neg181 = -$conv1193 | 0;
    var $call1195 = $ispos180 ? $conv1193 : $neg181;
    var $cmp1196 = ($call1194 | 0) < ($call1195 | 0);
    if ($cmp1196) {
      label = 340;
      break;
    } else {
      var $i_4 = $conv1191;
      label = 341;
      break;
    }
   case 340:
    HEAP32[5263696 >> 2] = 24;
    var $i_4 = $conv1193;
    label = 341;
    break;
   case 341:
    var $i_4;
    var $cmp1203 = ($i_4 | 0) < 0;
    if ($cmp1203) {
      label = 342;
      break;
    } else {
      label = 643;
      break;
    }
   case 342:
    HEAP32[5427632 >> 2] = 1633771873;
    label = 643;
    break;
   case 343:
    HEAP16[5398712 >> 1] = 1710;
    HEAP16[5242964 >> 1] = 2288;
    HEAP32[5427632 >> 2] = 370546198;
    var $90 = HEAP32[5243568 >> 2];
    var $tobool1212 = ($90 | 0) == 0;
    if ($tobool1212) {
      label = 344;
      break;
    } else {
      label = 346;
      break;
    }
   case 344:
    var $call1214 = _minolta_z2();
    var $tobool1215 = ($call1214 | 0) == 0;
    if ($tobool1215) {
      label = 346;
      break;
    } else {
      label = 345;
      break;
    }
   case 345:
    var $$etemp$1 = 5263628;
    var $$etemp$0$0 = 1869506893;
    var $$etemp$0$1 = 6386796;
    var $st$3$0 = $$etemp$1 | 0;
    HEAP32[$st$3$0 >> 2] = $$etemp$0$0;
    var $st$3$1 = $$etemp$1 + 4 | 0;
    HEAP32[$st$3$1 >> 2] = $$etemp$0$1;
    for (var $$src = 5577716, $$dest = 5263372, $$stop = $$src + 10; $$src < $$stop; $$src++, $$dest++) {
      HEAP8[$$dest] = HEAP8[$$src];
    }
    label = 346;
    break;
   case 346:
    HEAP32[5263692 >> 2] = 36;
    var $91 = HEAP8[5263628];
    var $cmp1221 = $91 << 24 >> 24 == 77;
    var $conv1222 = $cmp1221 & 1;
    var $92 = -$conv1222 | 0;
    var $mul1223 = $92 & 24;
    var $add1224135 = $mul1223 | 6;
    HEAP32[5263696 >> 2] = $add1224135;
    label = 643;
    break;
   case 347:
    var $call1226 = _strcmp(5263372, 5577708);
    var $tobool1227 = ($call1226 | 0) == 0;
    if ($tobool1227) {
      label = 348;
      break;
    } else {
      label = 349;
      break;
    }
   case 348:
    HEAP16[5398712 >> 1] = 1708;
    HEAP16[5242964 >> 1] = 2288;
    HEAP32[5560840 >> 2] = 4;
    HEAP32[5427632 >> 2] = -1263225676;
    label = 643;
    break;
   case 349:
    if (($zero_fsize_0 | 0) == 7438336) {
      label = 350;
      break;
    } else if (($zero_fsize_0 | 0) == 8998912) {
      label = 351;
      break;
    } else {
      label = 352;
      break;
    }
   case 350:
    HEAP16[5398712 >> 1] = 1924;
    HEAP16[5242964 >> 1] = 2576;
    HEAP32[5560840 >> 2] = 4;
    HEAP32[5427632 >> 2] = -1263225676;
    label = 643;
    break;
   case 351:
    HEAP16[5398712 >> 1] = 2118;
    HEAP16[5242964 >> 1] = 2832;
    HEAP32[5263496 >> 2] = 3971;
    HEAP32[5263692 >> 2] = 36;
    HEAP32[5263696 >> 2] = 30;
    label = 643;
    break;
   case 352:
    var $call1238 = _strcmp(5263628, 5573316);
    var $tobool1239 = ($call1238 | 0) == 0;
    if ($tobool1239) {
      label = 353;
      break;
    } else {
      label = 365;
      break;
    }
   case 353:
    var $call1241 = _strcmp(5263379, 5577700);
    var $tobool1242 = ($call1241 | 0) == 0;
    if ($tobool1242) {
      label = 354;
      break;
    } else {
      label = 355;
      break;
    }
   case 354:
    HEAP8[5263372] = HEAP8[5577700];
    HEAP8[5263373] = HEAP8[5577701];
    HEAP8[5263374] = HEAP8[5577702];
    HEAP8[5263375] = HEAP8[5577703];
    HEAP8[5263376] = HEAP8[5577704];
    HEAP8[5263377] = HEAP8[5577705];
    HEAP16[5398712 >> 1] = 2144;
    HEAP16[5242964 >> 1] = 2880;
    HEAP32[5403048 >> 2] = 6;
    var $96 = 2144;
    var $_pr201 = 2880;
    label = 359;
    break;
   case 355:
    var $93 = HEAP32[5263692 >> 2];
    var $cmp1246 = ($93 | 0) == 36;
    if ($cmp1246) {
      var $96 = $46;
      var $_pr201 = $47;
      label = 359;
      break;
    } else {
      label = 356;
      break;
    }
   case 356:
    var $cmp1249 = ($40 | 0) == 2;
    if ($cmp1249) {
      label = 357;
      break;
    } else {
      var $95 = 15872;
      label = 358;
      break;
    }
   case 357:
    var $94 = HEAP32[5244920 >> 2];
    var $tobool1252 = ($94 | 0) != 0;
    var $phitmp = $tobool1252 ? 12032 : 15872;
    var $95 = $phitmp;
    label = 358;
    break;
   case 358:
    var $95;
    HEAP32[5263496 >> 2] = $95;
    var $96 = $46;
    var $_pr201 = $47;
    label = 359;
    break;
   case 359:
    var $_pr201;
    var $96;
    var $97 = HEAP16[5245036 >> 1];
    var $conv1258 = $97 & 65535;
    var $conv1259 = $96 & 65535;
    var $sub1260 = $conv1258 - $conv1259 | 0;
    var $shr1261 = $sub1260 >> 2;
    var $shl1262 = $shr1261 << 1;
    var $conv1263 = $shl1262 & 65535;
    HEAP16[5243564 >> 1] = $conv1263;
    var $conv1264 = $61 & 65535;
    var $conv1265 = $_pr201 & 65535;
    var $sub1266 = $conv1264 - $conv1265 | 0;
    var $shr1267 = $sub1266 >> 2;
    var $shl1268 = $shr1267 << 1;
    var $conv1269 = $shl1268 & 65535;
    HEAP16[5263700 >> 1] = $conv1269;
    if ($_pr201 << 16 >> 16 == 2848) {
      label = 360;
      break;
    } else if ($_pr201 << 16 >> 16 == 3328) {
      label = 361;
      break;
    } else if ($_pr201 << 16 >> 16 == 4952) {
      label = 362;
      break;
    } else {
      label = 363;
      break;
    }
   case 360:
    HEAP32[5427632 >> 2] = 370546198;
    label = 363;
    break;
   case 361:
    HEAP16[5242964 >> 1] = 3262;
    HEAP16[5263700 >> 1] = 34;
    label = 363;
    break;
   case 362:
    HEAP16[5263700 >> 1] = 0;
    HEAP32[5427632 >> 2] = 2;
    label = 363;
    break;
   case 363:
    var $98 = HEAP32[5398904 >> 2];
    var $tobool1285 = ($98 | 0) == 0;
    if ($tobool1285) {
      label = 643;
      break;
    } else {
      label = 364;
      break;
    }
   case 364:
    var $mul1288 = $conv1264 * $40 & -1;
    var $conv1289 = $mul1288 & 65535;
    HEAP16[5245028 >> 1] = $conv1289;
    label = 643;
    break;
   case 365:
    var $call1292 = _strcmp(5263372, 5577652);
    var $tobool1293 = ($call1292 | 0) == 0;
    if ($tobool1293) {
      label = 366;
      break;
    } else {
      label = 367;
      break;
    }
   case 366:
    HEAP16[5398712 >> 1] = 986;
    HEAP16[5242964 >> 1] = 1534;
    HEAP32[5428492 >> 2] = 513;
    HEAP32[5427632 >> 2] = 1633771873;
    HEAP32[5263692 >> 2] = 22;
    label = 643;
    break;
   case 367:
    var $call1296 = _strcmp(5263372, 5577644);
    var $tobool1297 = ($call1296 | 0) == 0;
    if ($tobool1297) {
      label = 368;
      break;
    } else {
      label = 369;
      break;
    }
   case 368:
    HEAP16[5398712 >> 1] = 1712;
    HEAP16[5242964 >> 1] = 2312;
    HEAP16[5245028 >> 1] = 2336;
    label = 385;
    break;
   case 369:
    var $call1300 = _strcmp(5263372, 5577636);
    var $tobool1301 = ($call1300 | 0) == 0;
    if ($tobool1301) {
      label = 382;
      break;
    } else {
      label = 370;
      break;
    }
   case 370:
    var $call1304 = _strcasecmp(5263628, 5579172);
    var $tobool1305 = ($call1304 | 0) == 0;
    if ($tobool1305) {
      label = 371;
      break;
    } else {
      label = 386;
      break;
    }
   case 371:
    HEAP32[5263692 >> 2] = 4;
    HEAP32[5263496 >> 2] = 4095;
    var $call1307 = _strncmp(5263372, 5577624, 8);
    var $tobool1308 = ($call1307 | 0) == 0;
    if ($tobool1308) {
      label = 372;
      break;
    } else {
      label = 375;
      break;
    }
   case 372:
    var $call1310 = _strcmp(5263372, 5586576);
    var $tobool1311 = ($call1310 | 0) == 0;
    if ($tobool1311) {
      label = 373;
      break;
    } else {
      label = 374;
      break;
    }
   case 373:
    HEAP32[5427632 >> 2] = 1229539657;
    label = 374;
    break;
   case 374:
    HEAP32[5244036 >> 2] = 12;
    HEAP32[5263692 >> 2] = 36;
    label = 643;
    break;
   case 375:
    var $call1315 = _strncmp(5263372, 5577616, 5);
    var $tobool1316 = ($call1315 | 0) == 0;
    if ($tobool1316) {
      label = 378;
      break;
    } else {
      label = 376;
      break;
    }
   case 376:
    var $call1318 = _strncmp(5263372, 5577608, 5);
    var $tobool1319 = ($call1318 | 0) == 0;
    if ($tobool1319) {
      label = 378;
      break;
    } else {
      label = 377;
      break;
    }
   case 377:
    var $call1321 = _strncmp(5263372, 5577600, 6);
    var $tobool1322 = ($call1321 | 0) == 0;
    if ($tobool1322) {
      label = 378;
      break;
    } else {
      label = 379;
      break;
    }
   case 378:
    var $99 = HEAP8[5263372];
    var $cmp1325 = $99 << 24 >> 24 == 77;
    var $conv1326 = $cmp1325 & 1;
    var $_sum128 = $conv1326 | 6;
    var $add_ptr1327 = $_sum128 + 5263372 | 0;
    var $call1328 = _sprintf(5263392, 5577588, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $add_ptr1327, tempInt));
    _adobe_coeff(5263628, 5263392);
    HEAP32[5263692 >> 2] = 36;
    label = 643;
    break;
   case 379:
    var $call1330 = _strncmp(5263372, 5577576, 8);
    var $tobool1331 = ($call1330 | 0) == 0;
    if ($tobool1331) {
      label = 380;
      break;
    } else {
      label = 643;
      break;
    }
   case 380:
    var $100 = HEAP8[5263380];
    if ($100 << 24 >> 24 == 52) {
      label = 381;
      break;
    } else if ($100 << 24 >> 24 == 53) {
      label = 382;
      break;
    } else if ($100 << 24 >> 24 == 54) {
      label = 383;
      break;
    } else {
      label = 384;
      break;
    }
   case 381:
    HEAP16[5398712 >> 1] = 1716;
    HEAP16[5242964 >> 1] = 2304;
    label = 384;
    break;
   case 382:
    HEAP16[5398712 >> 1] = 1956;
    HEAP16[5242964 >> 1] = 2607;
    HEAP16[5245028 >> 1] = 2624;
    label = 384;
    break;
   case 383:
    HEAP16[5398712 >> 1] = 2136;
    HEAP16[5242964 >> 1] = 2848;
    label = 384;
    break;
   case 384:
    var $101 = HEAP32[5428492 >> 2];
    var $add1350 = $101 + 14 | 0;
    HEAP32[5428492 >> 2] = $add1350;
    HEAP32[5427632 >> 2] = 1633771873;
    label = 385;
    break;
   case 385:
    HEAP32[5263692 >> 2] = 4;
    HEAP32[5263496 >> 2] = 991;
    HEAP16[5262944 >> 1] = 19789;
    label = 643;
    break;
   case 386:
    var $call1355 = _strcmp(5263372, 5577568);
    var $tobool1356 = ($call1355 | 0) == 0;
    if ($tobool1356) {
      label = 387;
      break;
    } else {
      label = 388;
      break;
    }
   case 387:
    HEAP32[5263692 >> 2] = 4;
    HEAP32[5428496 >> 2] = -1;
    label = 643;
    break;
   case 388:
    var $call1359 = _strcmp(5263372, 5577540);
    var $tobool1360 = ($call1359 | 0) == 0;
    if ($tobool1360) {
      label = 389;
      break;
    } else {
      label = 390;
      break;
    }
   case 389:
    var $sub1363 = $46 - 2 & 65535;
    HEAP16[5398712 >> 1] = $sub1363;
    label = 643;
    break;
   case 390:
    var $call1366 = _strcmp(5263372, 5577532);
    var $tobool1367 = ($call1366 | 0) == 0;
    if ($tobool1367) {
      label = 391;
      break;
    } else {
      label = 394;
      break;
    }
   case 391:
    var $cmp1369 = ($zero_fsize_0 | 0) == 3178560;
    if ($cmp1369) {
      label = 392;
      break;
    } else {
      label = 393;
      break;
    }
   case 392:
    HEAP16[5398712 >> 1] = 1540;
    HEAP16[5242964 >> 1] = 2064;
    HEAP32[5263692 >> 2] = 82;
    var $102 = HEAPF32[5561124 >> 2];
    var $mul1372 = $102 * 4;
    HEAPF32[5561124 >> 2] = $mul1372;
    var $103 = HEAPF32[5561132 >> 2];
    var $mul1373 = $103 * 4;
    HEAPF32[5561132 >> 2] = $mul1373;
    label = 643;
    break;
   case 393:
    HEAP16[5398712 >> 1] = 1544;
    HEAP16[5242964 >> 1] = 2068;
    HEAP16[5245028 >> 1] = 3136;
    HEAP32[5263692 >> 2] = 36;
    HEAP32[5263496 >> 2] = 3964;
    label = 643;
    break;
   case 394:
    var $cmp1377 = ($zero_fsize_0 | 0) == 6114240;
    if ($cmp1377) {
      label = 395;
      break;
    } else {
      label = 396;
      break;
    }
   case 395:
    HEAP16[5398712 >> 1] = 1737;
    HEAP16[5242964 >> 1] = 2324;
    HEAP16[5245028 >> 1] = 3520;
    HEAP32[5263692 >> 2] = 36;
    HEAP32[5263496 >> 2] = 3962;
    label = 643;
    break;
   case 396:
    var $call1381 = _strcmp(5263372, 5577520);
    var $tobool1382 = ($call1381 | 0) == 0;
    if ($tobool1382) {
      label = 397;
      break;
    } else {
      label = 398;
      break;
    }
   case 397:
    HEAP16[5398712 >> 1] = 2302;
    HEAP16[5242964 >> 1] = 3072;
    HEAP32[5263692 >> 2] = 36;
    HEAP32[5263696 >> 2] = 30;
    label = 643;
    break;
   case 398:
    var $call1385 = _strcmp(5263372, 5577512);
    var $tobool1386 = ($call1385 | 0) == 0;
    if ($tobool1386) {
      label = 399;
      break;
    } else {
      label = 400;
      break;
    }
   case 399:
    HEAP16[5398712 >> 1] = 2448;
    HEAP16[5242964 >> 1] = 3264;
    HEAP16[5262944 >> 1] = 18761;
    HEAP32[5427632 >> 2] = 1633771873;
    HEAP32[5263692 >> 2] = 4;
    HEAP32[5263496 >> 2] = 64512;
    label = 643;
    break;
   case 400:
    var $call1389 = _strncmp(5263372, 5577508, 3);
    var $tobool1390 = ($call1389 | 0) == 0;
    if ($tobool1390) {
      label = 401;
      break;
    } else {
      label = 402;
      break;
    }
   case 401:
    HEAP16[5398712 >> 1] = 2448;
    HEAP16[5242964 >> 1] = 3264;
    var $div1394 = ($zero_fsize_0 | 0) / 4896 & -1;
    var $conv1395 = $div1394 & 65535;
    HEAP16[5245028 >> 1] = $conv1395;
    HEAP16[5262944 >> 1] = 19789;
    HEAP32[5263692 >> 2] = 4;
    label = 643;
    break;
   case 402:
    var $call1397 = _strcmp(5263628, 5587532);
    var $tobool1398 = ($call1397 | 0) == 0;
    var $cmp1401 = $61 << 16 >> 16 == 4704;
    var $or_cond172 = $tobool1398 & $cmp1401;
    if ($or_cond172) {
      label = 403;
      break;
    } else {
      label = 404;
      break;
    }
   case 403:
    HEAP16[5243564 >> 1] = 8;
    var $sub1405 = $46 - 8 & 65535;
    HEAP16[5398712 >> 1] = $sub1405;
    HEAP16[5263700 >> 1] = 8;
    var $sub1408 = $47 - 16 & 65535;
    HEAP16[5242964 >> 1] = $sub1408;
    HEAP32[5263696 >> 2] = 32;
    label = 643;
    break;
   case 404:
    var $cmp1415 = $61 << 16 >> 16 == 5632;
    var $or_cond173 = $tobool1398 & $cmp1415;
    if ($or_cond173) {
      label = 405;
      break;
    } else {
      label = 407;
      break;
    }
   case 405:
    HEAP16[5262944 >> 1] = 18761;
    HEAP16[5398712 >> 1] = 3694;
    HEAP16[5243564 >> 1] = 2;
    var $add1418 = $58 + 32 | 0;
    var $conv1419 = $add1418 & 65535;
    HEAP16[5263700 >> 1] = $conv1419;
    var $sub1421 = 5542 - $58 | 0;
    var $conv1422 = $sub1421 & 65535;
    HEAP16[5242964 >> 1] = $conv1422;
    var $cmp1423 = ($58 | 0) == 12;
    if ($cmp1423) {
      label = 406;
      break;
    } else {
      label = 643;
      break;
    }
   case 406:
    HEAP32[5263696 >> 2] = 80;
    label = 643;
    break;
   case 407:
    var $call1428 = _strcmp(5263372, 5577504);
    var $tobool1429 = ($call1428 | 0) == 0;
    if ($tobool1429) {
      label = 408;
      break;
    } else {
      label = 410;
      break;
    }
   case 408:
    HEAP16[5262944 >> 1] = 18761;
    var $sub1432 = $46 - 20 & 65535;
    HEAP16[5398712 >> 1] = $sub1432;
    HEAP16[5243564 >> 1] = 2;
    var $sub1435 = $47 - 6 & 65535;
    HEAP16[5242964 >> 1] = $sub1435;
    var $cmp1438 = ($sub1435 & 65535) > 3682;
    if ($cmp1438) {
      label = 409;
      break;
    } else {
      label = 643;
      break;
    }
   case 409:
    var $sub1442 = $46 - 30 & 65535;
    HEAP16[5398712 >> 1] = $sub1442;
    var $sub1445 = $47 - 52 & 65535;
    HEAP16[5242964 >> 1] = $sub1445;
    HEAP16[5243564 >> 1] = 8;
    label = 643;
    break;
   case 410:
    var $call1449 = _strcmp(5263372, 5577496);
    var $tobool1450 = ($call1449 | 0) == 0;
    if ($tobool1450) {
      label = 411;
      break;
    } else {
      label = 413;
      break;
    }
   case 411:
    HEAP16[5262944 >> 1] = 18761;
    var $sub1453 = $46 - 3 & 65535;
    HEAP16[5398712 >> 1] = $sub1453;
    HEAP16[5243564 >> 1] = 2;
    var $sub1456 = $47 - 10 & 65535;
    HEAP16[5242964 >> 1] = $sub1456;
    var $cmp1459 = ($sub1456 & 65535) > 3718;
    if ($cmp1459) {
      label = 412;
      break;
    } else {
      label = 643;
      break;
    }
   case 412:
    var $sub1463 = $46 - 31 & 65535;
    HEAP16[5398712 >> 1] = $sub1463;
    var $sub1466 = $47 - 66 & 65535;
    HEAP16[5242964 >> 1] = $sub1466;
    HEAP16[5243564 >> 1] = 8;
    label = 643;
    break;
   case 413:
    if (($zero_fsize_0 | 0) == 24e6) {
      label = 414;
      break;
    } else if (($zero_fsize_0 | 0) == 20487168) {
      var $storemerge133 = 3648;
      var $storemerge134 = 2808;
      label = 415;
      break;
    } else {
      label = 416;
      break;
    }
   case 414:
    var $storemerge133 = 4e3;
    var $storemerge134 = 3e3;
    label = 415;
    break;
   case 415:
    var $storemerge134;
    var $storemerge133;
    HEAP16[5398712 >> 1] = $storemerge134;
    HEAP16[5242964 >> 1] = $storemerge133;
    HEAP8[5263372] = HEAP8[5577488];
    HEAP8[5263373] = HEAP8[5577489];
    HEAP8[5263374] = HEAP8[5577490];
    HEAP8[5263375] = HEAP8[5577491];
    HEAP8[5263376] = HEAP8[5577492];
    HEAP8[5263377] = HEAP8[5577493];
    HEAP16[5262944 >> 1] = 19789;
    HEAP32[5263692 >> 2] = 4;
    HEAP32[5263696 >> 2] = 6;
    HEAP32[5263496 >> 2] = 991;
    label = 643;
    break;
   case 416:
    var $call1479 = _strcmp(5263372, 5577480);
    var $tobool1480 = ($call1479 | 0) == 0;
    if ($tobool1480) {
      label = 417;
      break;
    } else {
      label = 418;
      break;
    }
   case 417:
    HEAP16[5398712 >> 1] = 3045;
    HEAP16[5242964 >> 1] = 4070;
    HEAP16[5243564 >> 1] = 3;
    HEAP16[5262944 >> 1] = 18761;
    HEAP32[5427632 >> 2] = 1229539657;
    HEAP32[5263692 >> 2] = 4;
    label = 643;
    break;
   case 418:
    var $call1483 = _strcmp(5263372, 5577468);
    var $tobool1484 = ($call1483 | 0) == 0;
    if ($tobool1484) {
      label = 419;
      break;
    } else {
      label = 420;
      break;
    }
   case 419:
    HEAP16[5398712 >> 1] = 484;
    HEAP16[5242964 >> 1] = 644;
    HEAP32[5263692 >> 2] = 82;
    HEAP32[5403048 >> 2] = 2;
    HEAP32[5427632 >> 2] = 370546198;
    HEAP32[5561400 >> 2] = 16;
    label = 643;
    break;
   case 420:
    var $call1487 = _strcmp(5263372, 5577436);
    var $tobool1488 = ($call1487 | 0) == 0;
    if ($tobool1488) {
      label = 421;
      break;
    } else {
      label = 422;
      break;
    }
   case 421:
    var $104 = HEAP16[5245036 >> 1];
    HEAP16[5243564 >> 1] = 2;
    var $sub1491 = $104 - 2 & 65535;
    HEAP16[5398712 >> 1] = $sub1491;
    label = 643;
    break;
   case 422:
    var $call1494 = _strcmp(5263372, 5577428);
    var $tobool1495 = ($call1494 | 0) == 0;
    if ($tobool1495) {
      label = 423;
      break;
    } else {
      label = 424;
      break;
    }
   case 423:
    HEAP16[5398712 >> 1] = 1200;
    HEAP16[5242964 >> 1] = 1600;
    HEAP32[5263692 >> 2] = 4;
    HEAP32[5427632 >> 2] = 1229539657;
    label = 643;
    break;
   case 424:
    var $call1498 = _strcmp(5263372, 5577420);
    var $tobool1499 = ($call1498 | 0) == 0;
    if ($tobool1499) {
      label = 425;
      break;
    } else {
      label = 426;
      break;
    }
   case 425:
    HEAP16[5398712 >> 1] = 480;
    HEAP16[5242964 >> 1] = 640;
    HEAP32[5263692 >> 2] = 82;
    _gamma_curve(.45, 4.5, 1, 255);
    label = 643;
    break;
   case 426:
    var $call1502 = _strcmp(5263372, 5577412);
    var $tobool1503 = ($call1502 | 0) == 0;
    if ($tobool1503) {
      label = 427;
      break;
    } else {
      label = 428;
      break;
    }
   case 427:
    HEAP16[5398712 >> 1] = 768;
    HEAP16[5242964 >> 1] = 1024;
    HEAP32[5263692 >> 2] = 82;
    label = 643;
    break;
   case 428:
    var $call1506 = _strcmp(5263372, 5577404);
    var $tobool1507 = ($call1506 | 0) == 0;
    if ($tobool1507) {
      label = 429;
      break;
    } else {
      label = 430;
      break;
    }
   case 429:
    HEAP16[5398712 >> 1] = 1040;
    HEAP16[5242964 >> 1] = 1392;
    HEAP32[5263692 >> 2] = 82;
    label = 643;
    break;
   case 430:
    var $call1510 = _strcmp(5263372, 5577396);
    var $tobool1511 = ($call1510 | 0) == 0;
    if ($tobool1511) {
      label = 431;
      break;
    } else {
      label = 432;
      break;
    }
   case 431:
    HEAP16[5398712 >> 1] = 1200;
    HEAP16[5242964 >> 1] = 1600;
    HEAP32[5263692 >> 2] = 82;
    label = 643;
    break;
   case 432:
    var $call1514 = _strcmp(5263372, 5577388);
    var $tobool1515 = ($call1514 | 0) == 0;
    if ($tobool1515) {
      label = 433;
      break;
    } else {
      label = 434;
      break;
    }
   case 433:
    HEAP16[5398712 >> 1] = 1958;
    HEAP16[5242964 >> 1] = 2588;
    var $cmp1517 = ($zero_fsize_0 | 0) < 75e5;
    var $cond1519 = $cmp1517 ? 82 : 4;
    HEAP32[5263692 >> 2] = $cond1519;
    var $shr1523 = $zero_fsize_0 >> 22;
    var $105 = $shr1523 * -5067304 & -1;
    var $sub1525 = $105 + $zero_fsize_0 | 0;
    HEAP32[5428492 >> 2] = $sub1525;
    HEAP32[5263496 >> 2] = 65520;
    label = 643;
    break;
   case 434:
    var $call1527 = _strcmp(5263372, 5577380);
    var $tobool1528 = ($call1527 | 0) == 0;
    if ($tobool1528) {
      label = 435;
      break;
    } else {
      label = 436;
      break;
    }
   case 435:
    HEAP16[5398712 >> 1] = 2469;
    HEAP16[5242964 >> 1] = 3272;
    HEAP32[5263692 >> 2] = 4;
    HEAP32[5263496 >> 2] = 65520;
    label = 643;
    break;
   case 436:
    var $call1531 = _strcmp(5263372, 5577368);
    var $tobool1532 = ($call1531 | 0) == 0;
    if ($tobool1532) {
      label = 437;
      break;
    } else {
      label = 438;
      break;
    }
   case 437:
    HEAP16[5398712 >> 1] = 1024;
    HEAP16[5242964 >> 1] = 1375;
    HEAP16[5245028 >> 1] = 1376;
    HEAP32[5427632 >> 2] = 1229539657;
    HEAP32[5263496 >> 2] = 1023;
    var $cmp1534 = ($zero_fsize_0 | 0) < 2e6;
    var $cond1536 = $cmp1534 ? 82 : 4;
    HEAP32[5263692 >> 2] = $cond1536;
    label = 643;
    break;
   case 438:
    var $call1538 = _strcmp(5263372, 5577360);
    var $tobool1539 = ($call1538 | 0) == 0;
    if ($tobool1539) {
      label = 439;
      break;
    } else {
      label = 440;
      break;
    }
   case 439:
    HEAP16[5398712 >> 1] = 1207;
    HEAP16[5242964 >> 1] = 1608;
    HEAP16[5262944 >> 1] = 18761;
    HEAP32[5427632 >> 2] = 370546198;
    HEAP32[5428492 >> 2] = 3212;
    HEAP32[5263496 >> 2] = 1023;
    HEAP32[5263692 >> 2] = 4;
    label = 643;
    break;
   case 440:
    var $call1542 = _strcmp(5263372, 5577328);
    var $tobool1543 = ($call1542 | 0) == 0;
    if ($tobool1543) {
      label = 441;
      break;
    } else {
      label = 442;
      break;
    }
   case 441:
    HEAP16[5398712 >> 1] = 3e3;
    HEAP16[5242964 >> 1] = 2208;
    HEAP32[5427632 >> 2] = 1633771873;
    var $cmp1545 = ($zero_fsize_0 | 0) < 1e7;
    var $cond1547 = $cmp1545 ? 82 : 4;
    HEAP32[5263692 >> 2] = $cond1547;
    HEAP32[5263496 >> 2] = 65472;
    label = 643;
    break;
   case 442:
    var $call1549 = _strcmp(5263372, 5577320);
    var $tobool1550 = ($call1549 | 0) == 0;
    if ($tobool1550) {
      label = 443;
      break;
    } else {
      label = 445;
      break;
    }
   case 443:
    HEAP16[5398712 >> 1] = 1536;
    HEAP16[5242964 >> 1] = 2048;
    HEAP16[5245028 >> 1] = 2048;
    HEAP32[5427632 >> 2] = 1633771873;
    HEAP32[5263692 >> 2] = 4;
    HEAP32[5263496 >> 2] = 1023;
    var $106 = HEAP32[5264116 >> 2];
    var $call1552 = _fseek($106, 3145728, 0);
    var $call1553 = _guess_byte_order();
    HEAP16[5262944 >> 1] = $call1553;
    var $cmp1555 = $call1553 << 16 >> 16 == 19789;
    if ($cmp1555) {
      label = 444;
      break;
    } else {
      label = 643;
      break;
    }
   case 444:
    HEAP16[5243564 >> 1] = 16;
    var $107 = HEAP16[5398712 >> 1];
    var $sub1559 = $107 - 16 & 65535;
    HEAP16[5398712 >> 1] = $sub1559;
    HEAP16[5263700 >> 1] = 28;
    var $108 = HEAP16[5242964 >> 1];
    var $sub1562 = $108 - 28 & 65535;
    HEAP16[5242964 >> 1] = $sub1562;
    HEAP32[5263496 >> 2] = 62912;
    HEAP32[5263628 >> 2] = 4674377;
    HEAP8[5263372] = 0;
    label = 644;
    break;
   case 445:
    var $call1567 = _strcmp(5263628, 5586640);
    var $tobool1568 = ($call1567 | 0) == 0;
    if ($tobool1568) {
      label = 446;
      break;
    } else {
      label = 453;
      break;
    }
   case 446:
    var $109 = HEAP32[5263692 >> 2];
    var $cmp1570 = ($109 | 0) == 46;
    if ($cmp1570) {
      label = 447;
      break;
    } else {
      label = 448;
      break;
    }
   case 447:
    HEAP32[5263692 >> 2] = 96;
    label = 448;
    break;
   case 448:
    if ($61 << 16 >> 16 == 7262) {
      label = 449;
      break;
    } else if ($61 << 16 >> 16 == 7410) {
      label = 450;
      break;
    } else if ($61 << 16 >> 16 == 9044) {
      label = 451;
      break;
    } else if ($61 << 16 >> 16 == 4090) {
      label = 452;
      break;
    } else {
      label = 643;
      break;
    }
   case 449:
    HEAP16[5398712 >> 1] = 5444;
    HEAP16[5242964 >> 1] = 7248;
    HEAP16[5243564 >> 1] = 4;
    HEAP16[5263700 >> 1] = 7;
    HEAP32[5427632 >> 2] = 1633771873;
    label = 643;
    break;
   case 450:
    HEAP16[5398712 >> 1] = 5502;
    HEAP16[5242964 >> 1] = 7328;
    HEAP16[5243564 >> 1] = 4;
    HEAP16[5263700 >> 1] = 41;
    HEAP32[5427632 >> 2] = 1633771873;
    label = 643;
    break;
   case 451:
    HEAP16[5398712 >> 1] = 6716;
    HEAP16[5242964 >> 1] = 8964;
    HEAP16[5243564 >> 1] = 8;
    HEAP16[5263700 >> 1] = 40;
    HEAP32[5263696 >> 2] = 256;
    var $110 = HEAP32[5561400 >> 2];
    var $add1588 = $110 + 256 | 0;
    HEAP32[5561400 >> 2] = $add1588;
    HEAP32[5263496 >> 2] = 33025;
    label = 643;
    break;
   case 452:
    HEAP8[5263372] = HEAP8[5577312];
    HEAP8[5263373] = HEAP8[5577313];
    HEAP8[5263374] = HEAP8[5577314];
    HEAP8[5263375] = HEAP8[5577315];
    HEAP8[5263376] = HEAP8[5577316];
    HEAP16[5243564 >> 1] = 6;
    var $sub1596 = $46 - 6 & 65535;
    HEAP16[5398712 >> 1] = $sub1596;
    HEAP16[5263700 >> 1] = 3;
    var $sub1599 = $47 - 10 & 65535;
    HEAP16[5242964 >> 1] = $sub1599;
    HEAP32[5427632 >> 2] = 1633771873;
    label = 643;
    break;
   case 453:
    var $call1606 = _strcmp(5263628, 5579748);
    var $tobool1607 = ($call1606 | 0) == 0;
    if ($tobool1607) {
      label = 454;
      break;
    } else {
      label = 459;
      break;
    }
   case 454:
    var $call1610 = _memcmp($arraydecay, 5577304, 4);
    var $tobool1611 = ($call1610 | 0) == 0;
    if ($tobool1611) {
      label = 455;
      break;
    } else {
      label = 456;
      break;
    }
   case 455:
    var $111 = HEAP32[5264116 >> 2];
    var $call1613 = _fseek($111, 14, 0);
    var $call1614 = _get4();
    var $conv1615 = $call1614 & 65535;
    HEAP16[5398712 >> 1] = $conv1615;
    var $call1616 = _get4();
    var $conv1617 = $call1616 & 65535;
    HEAP16[5242964 >> 1] = $conv1617;
    HEAP32[5427632 >> 2] = 1633771873;
    HEAP32[5428492 >> 2] = 68;
    label = 456;
    break;
   case 456:
    var $112 = HEAP32[5263692 >> 2];
    var $tobool1619 = ($112 | 0) == 0;
    if ($tobool1619) {
      label = 457;
      break;
    } else {
      label = 458;
      break;
    }
   case 457:
    HEAP32[5263692 >> 2] = 4;
    label = 458;
    break;
   case 458:
    HEAP32[5263496 >> 2] = 16383;
    label = 643;
    break;
   case 459:
    var $call1623 = _strcmp(5263628, 5586700);
    var $tobool1624 = ($call1623 | 0) == 0;
    if ($tobool1624) {
      label = 460;
      break;
    } else {
      label = 483;
      break;
    }
   case 460:
    HEAP32[5263496 >> 2] = 16383;
    var $113 = HEAP32[5264116 >> 2];
    var $114 = HEAP32[5428492 >> 2];
    var $call1626 = _fseek($113, $114, 0);
    var $call1627 = _ljpeg_start($jh, 1);
    var $tobool1628 = ($call1627 | 0) == 0;
    if ($tobool1628) {
      label = 463;
      break;
    } else {
      label = 461;
      break;
    }
   case 461:
    var $bits = $jh | 0;
    var $115 = HEAP32[$bits >> 2];
    var $cmp1630 = ($115 | 0) == 15;
    if ($cmp1630) {
      label = 462;
      break;
    } else {
      label = 463;
      break;
    }
   case 462:
    HEAP32[5263496 >> 2] = 8191;
    label = 463;
    break;
   case 463:
    var $116 = HEAP32[5243580 >> 2];
    var $cmp1634 = $116 >>> 0 > 1;
    if ($cmp1634) {
      label = 464;
      break;
    } else {
      label = 465;
      break;
    }
   case 464:
    HEAP32[5427632 >> 2] = 0;
    label = 466;
    break;
   case 465:
    var $117 = HEAP32[5243576 >> 2];
    var $118 = HEAP16[5245036 >> 1];
    var $conv1641 = $118 & 65535;
    var $cmp1642 = $117 >>> 0 < $conv1641 >>> 0;
    if ($cmp1642) {
      label = 466;
      break;
    } else {
      label = 467;
      break;
    }
   case 466:
    HEAP32[5263692 >> 2] = 14;
    var $119 = HEAP32[5243572 >> 2];
    var $conv1645 = $119 & 65535;
    HEAP16[5245028 >> 1] = $conv1645;
    label = 467;
    break;
   case 467:
    var $120 = HEAP16[5242964 >> 1];
    var $121 = HEAP16[5398712 >> 1];
    var $or1649129 = $121 | $120;
    var $cmp1650 = $or1649129 << 16 >> 16 == 2048;
    if ($cmp1650) {
      label = 468;
      break;
    } else {
      label = 471;
      break;
    }
   case 468:
    var $cmp1653 = ($116 | 0) == 1;
    if ($cmp1653) {
      label = 469;
      break;
    } else {
      label = 470;
      break;
    }
   case 469:
    HEAP32[5427632 >> 2] = 1;
    HEAP8[5560896] = HEAP8[5577296];
    HEAP8[5560897] = HEAP8[5577297];
    HEAP8[5560898] = HEAP8[5577298];
    HEAP8[5560899] = HEAP8[5577299];
    HEAP8[5560900] = HEAP8[5577300];
    for (var $$src = 5577284, $$dest = 5263372, $$stop = $$src + 11; $$src < $$stop; $$src++, $$dest++) {
      HEAP8[$$dest] = HEAP8[$$src];
    }
    HEAP16[5243564 >> 1] = 8;
    HEAP16[5263700 >> 1] = 18;
    HEAP16[5398712 >> 1] = 2032;
    HEAP16[5242964 >> 1] = 2016;
    label = 643;
    break;
   case 470:
    HEAP8[5263372] = HEAP8[5587384];
    HEAP8[5263373] = HEAP8[5587385];
    HEAP8[5263374] = HEAP8[5587386];
    HEAP8[5263375] = HEAP8[5587387];
    HEAP8[5263376] = HEAP8[5587388];
    HEAP16[5243564 >> 1] = 10;
    HEAP16[5263700 >> 1] = 16;
    HEAP16[5398712 >> 1] = 2028;
    HEAP16[5242964 >> 1] = 2022;
    label = 643;
    break;
   case 471:
    var $conv1647 = $120 & 65535;
    var $conv1648 = $121 & 65535;
    var $add1664 = $conv1648 + $conv1647 | 0;
    var $cmp1665 = ($add1664 | 0) == 5204;
    if ($cmp1665) {
      label = 472;
      break;
    } else {
      label = 480;
      break;
    }
   case 472:
    var $122 = HEAP8[5263372];
    var $tobool1668 = $122 << 24 >> 24 == 0;
    if ($tobool1668) {
      label = 473;
      break;
    } else {
      var $123 = $122;
      label = 474;
      break;
    }
   case 473:
    var $$etemp$3 = 5263372;
    var $$etemp$2$0 = 1953390915;
    var $$etemp$2$1 = 6648417;
    var $st$3$0 = $$etemp$3 | 0;
    HEAP32[$st$3$0 >> 2] = $$etemp$2$0;
    var $st$3$1 = $$etemp$3 + 4 | 0;
    HEAP32[$st$3$1 >> 2] = $$etemp$2$1;
    var $123 = 67;
    label = 474;
    break;
   case 474:
    var $123;
    var $cmp1674 = ($120 & 65535) > ($121 & 65535);
    if ($cmp1674) {
      label = 475;
      break;
    } else {
      label = 476;
      break;
    }
   case 475:
    HEAP16[5243564 >> 1] = 6;
    HEAP16[5263700 >> 1] = 32;
    HEAP16[5398712 >> 1] = 2048;
    HEAP16[5242964 >> 1] = 3072;
    var $storemerge = 1633771873;
    label = 477;
    break;
   case 476:
    HEAP16[5263700 >> 1] = 6;
    HEAP16[5243564 >> 1] = 32;
    HEAP16[5242964 >> 1] = 2048;
    HEAP16[5398712 >> 1] = 3072;
    var $storemerge = 370546198;
    label = 477;
    break;
   case 477:
    var $storemerge;
    HEAP32[5427632 >> 2] = $storemerge;
    var $124 = HEAPF32[5561124 >> 2];
    var $tobool1679 = $124 == 0;
    var $cmp1682 = $123 << 24 >> 24 == 86;
    var $or_cond174 = $tobool1679 | $cmp1682;
    if ($or_cond174) {
      label = 478;
      break;
    } else {
      label = 479;
      break;
    }
   case 478:
    HEAP32[5427632 >> 2] = 0;
    label = 643;
    break;
   case 479:
    HEAP32[5264100 >> 2] = $116;
    label = 643;
    break;
   case 480:
    if ($120 << 16 >> 16 == 2116) {
      label = 481;
      break;
    } else if ($120 << 16 >> 16 == 3171) {
      label = 482;
      break;
    } else {
      label = 643;
      break;
    }
   case 481:
    var $$etemp$5 = 5263372;
    var $$etemp$4$0 = 1701601622;
    var $$etemp$4$1 = 3547247;
    var $st$3$0 = $$etemp$5 | 0;
    HEAP32[$st$3$0 >> 2] = $$etemp$4$0;
    var $st$3$1 = $$etemp$5 + 4 | 0;
    HEAP32[$st$3$1 >> 2] = $$etemp$4$1;
    HEAP16[5243564 >> 1] = 30;
    var $sub1694 = $121 - 60 & 65535;
    HEAP16[5398712 >> 1] = $sub1694;
    HEAP16[5263700 >> 1] = 55;
    HEAP16[5242964 >> 1] = 2006;
    HEAP32[5427632 >> 2] = 1229539657;
    label = 643;
    break;
   case 482:
    var $$etemp$7 = 5263372;
    var $$etemp$6$0 = 1701601622;
    var $$etemp$6$1 = 3547247;
    var $st$3$0 = $$etemp$7 | 0;
    HEAP32[$st$3$0 >> 2] = $$etemp$6$0;
    var $st$3$1 = $$etemp$7 + 4 | 0;
    HEAP32[$st$3$1 >> 2] = $$etemp$6$1;
    HEAP16[5243564 >> 1] = 24;
    var $sub1706 = $121 - 48 & 65535;
    HEAP16[5398712 >> 1] = $sub1706;
    HEAP16[5263700 >> 1] = 24;
    HEAP16[5242964 >> 1] = 3123;
    HEAP32[5427632 >> 2] = 370546198;
    label = 643;
    break;
   case 483:
    var $call1716 = _strcmp(5263628, 5573300);
    var $tobool1717 = ($call1716 | 0) == 0;
    if ($tobool1717) {
      label = 485;
      break;
    } else {
      label = 484;
      break;
    }
   case 484:
    var $call1719 = _strcmp(5263628, 5573328);
    var $tobool1720 = ($call1719 | 0) == 0;
    if ($tobool1720) {
      label = 485;
      break;
    } else {
      label = 495;
      break;
    }
   case 485:
    var $125 = HEAP32[5428492 >> 2];
    var $sub1722 = $call41 - $125 | 0;
    var $conv1723 = $61 & 65535;
    var $mul1724 = $conv1723 << 3;
    var $div1725 = Math.floor(($mul1724 >>> 0) / 7);
    var $div1726 = ($sub1722 | 0) / ($div1725 | 0) & -1;
    var $126 = HEAP16[5245036 >> 1];
    var $conv1727 = $126 & 65535;
    var $cmp1728 = ($div1726 | 0) == ($conv1727 | 0);
    if ($cmp1728) {
      label = 486;
      break;
    } else {
      label = 487;
      break;
    }
   case 486:
    HEAP32[5263692 >> 2] = 40;
    label = 489;
    break;
   case 487:
    var $_pr205 = HEAP32[5263692 >> 2];
    var $tobool1732 = ($_pr205 | 0) == 0;
    if ($tobool1732) {
      label = 488;
      break;
    } else {
      label = 489;
      break;
    }
   case 488:
    HEAP32[5263692 >> 2] = 4;
    HEAP32[5263696 >> 2] = 4;
    label = 489;
    break;
   case 489:
    HEAP8[5242880] = 1;
    var $add1736 = $46 + 12 & 65535;
    var $cmp1740 = ($add1736 & 65535) > ($126 & 65535);
    var $_add1736 = $cmp1740 ? $126 : $add1736;
    HEAP16[5398712 >> 1] = $_add1736;
    var $i_5220 = 0;
    var $128 = $47;
    var $127 = $_add1736;
    label = 490;
    break;
   case 490:
    var $127;
    var $128;
    var $i_5220;
    var $arrayidx1750 = 5267292 + $i_5220 * 12 | 0;
    var $129 = HEAP16[$arrayidx1750 >> 1];
    var $conv1751 = $129 << 16 >> 16;
    var $cmp1752 = ($conv1723 | 0) == ($conv1751 | 0);
    if ($cmp1752) {
      label = 491;
      break;
    } else {
      var $136 = $128;
      var $135 = $127;
      label = 493;
      break;
    }
   case 491:
    var $arrayidx1757 = 5267294 + $i_5220 * 12 | 0;
    var $130 = HEAP16[$arrayidx1757 >> 1];
    var $conv1758 = $130 << 16 >> 16;
    var $cmp1759 = ($conv1727 | 0) == ($conv1758 | 0);
    if ($cmp1759) {
      label = 492;
      break;
    } else {
      var $136 = $128;
      var $135 = $127;
      label = 493;
      break;
    }
   case 492:
    var $arrayidx1763 = 5267296 + $i_5220 * 12 | 0;
    var $131 = HEAP16[$arrayidx1763 >> 1];
    HEAP16[5263700 >> 1] = $131;
    var $arrayidx1765 = 5267298 + $i_5220 * 12 | 0;
    var $132 = HEAP16[$arrayidx1765 >> 1];
    HEAP16[5243564 >> 1] = $132;
    var $arrayidx1767 = 5267300 + $i_5220 * 12 | 0;
    var $133 = HEAP16[$arrayidx1767 >> 1];
    var $add1770 = $128 + $133 & 65535;
    HEAP16[5242964 >> 1] = $add1770;
    var $arrayidx1773 = 5267302 + $i_5220 * 12 | 0;
    var $134 = HEAP16[$arrayidx1773 >> 1];
    var $add1776 = $127 + $134 & 65535;
    HEAP16[5398712 >> 1] = $add1776;
    var $136 = $add1770;
    var $135 = $add1776;
    label = 493;
    break;
   case 493:
    var $135;
    var $136;
    var $inc1780 = $i_5220 + 1 | 0;
    var $exitcond = ($inc1780 | 0) == 23;
    if ($exitcond) {
      label = 494;
      break;
    } else {
      var $i_5220 = $inc1780;
      var $128 = $136;
      var $127 = $135;
      label = 490;
      break;
    }
   case 494:
    var $137 = HEAP32[5427632 >> 2];
    var $sub1782 = $137 + 3 | 0;
    var $138 = HEAP16[5263700 >> 1];
    var $conv1783 = $138 & 65535;
    var $and = $conv1783 & 1;
    var $xor1784 = $and ^ $sub1782;
    var $139 = HEAP16[5243564 >> 1];
    var $conv1785 = $139 & 65535;
    var $shl1786 = $conv1785 << 1;
    var $xor1787 = $xor1784 ^ $shl1786;
    var $and1788 = $xor1787 & 3;
    var $arrayidx1789 = $and1788 + 5577276 | 0;
    var $140 = HEAP8[$arrayidx1789];
    var $conv1790 = $140 & 255;
    var $mul1791 = $conv1790 * 16843009 & -1;
    HEAP32[5427632 >> 2] = $mul1791;
    label = 643;
    break;
   case 495:
    var $call1793 = _strcmp(5263372, 5577268);
    var $tobool1794 = ($call1793 | 0) == 0;
    if ($tobool1794) {
      label = 496;
      break;
    } else {
      label = 497;
      break;
    }
   case 496:
    HEAP16[5398712 >> 1] = 1718;
    HEAP16[5242964 >> 1] = 2304;
    HEAP32[5427632 >> 2] = 370546198;
    HEAP32[5263692 >> 2] = 36;
    HEAP32[5263696 >> 2] = 30;
    label = 643;
    break;
   case 497:
    var $call1797 = _strcmp(5263628, 5573348);
    var $tobool1798 = ($call1797 | 0) == 0;
    if ($tobool1798) {
      label = 498;
      break;
    } else {
      label = 515;
      break;
    }
   case 498:
    var $and1801 = $46 & 1;
    var $add1803 = $and1801 + $46 & 65535;
    HEAP16[5398712 >> 1] = $add1803;
    var $141 = HEAP32[5427968 >> 2];
    HEAP32[5427632 >> 2] = $141;
    var $cmp1806 = $47 << 16 >> 16 == 4100;
    if ($cmp1806) {
      label = 499;
      break;
    } else {
      var $142 = $47;
      label = 500;
      break;
    }
   case 499:
    HEAP16[5242964 >> 1] = 4096;
    var $143 = 4096;
    label = 502;
    break;
   case 500:
    var $142;
    var $cmp1814 = $142 << 16 >> 16 == 4080;
    if ($cmp1814) {
      label = 501;
      break;
    } else {
      var $143 = $142;
      label = 502;
      break;
    }
   case 501:
    HEAP16[5242964 >> 1] = 4056;
    var $143 = 4056;
    label = 502;
    break;
   case 502:
    var $143;
    var $144 = HEAP32[5263692 >> 2];
    var $cmp1821 = ($144 | 0) == 4;
    if ($cmp1821) {
      label = 503;
      break;
    } else {
      label = 504;
      break;
    }
   case 503:
    HEAP32[5263696 >> 2] = 4;
    label = 504;
    break;
   case 504:
    HEAP32[5244036 >> 2] = 12;
    var $call1825 = _strcmp(5263372, 5577260);
    var $tobool1826 = ($call1825 | 0) == 0;
    if ($tobool1826) {
      label = 506;
      break;
    } else {
      label = 505;
      break;
    }
   case 505:
    var $call1828 = _strcmp(5263372, 5577232);
    var $tobool1829 = ($call1828 | 0) == 0;
    if ($tobool1829) {
      label = 506;
      break;
    } else {
      label = 508;
      break;
    }
   case 506:
    var $sub1832 = $143 - 20 & 65535;
    HEAP16[5242964 >> 1] = $sub1832;
    if ($cmp1821) {
      label = 507;
      break;
    } else {
      label = 643;
      break;
    }
   case 507:
    HEAP32[5263496 >> 2] = 4035;
    HEAP32[5560904 >> 2] = 0;
    HEAP32[5560908 >> 2] = 0;
    HEAP32[5560912 >> 2] = 0;
    HEAP32[5560916 >> 2] = 0;
    label = 643;
    break;
   case 508:
    var $call1839 = _strcmp(5263372, 5577224);
    var $tobool1840 = ($call1839 | 0) == 0;
    if ($tobool1840) {
      label = 509;
      break;
    } else {
      label = 511;
      break;
    }
   case 509:
    var $sub1843 = $143 - 30 & 65535;
    HEAP16[5242964 >> 1] = $sub1843;
    if ($cmp1821) {
      label = 510;
      break;
    } else {
      label = 643;
      break;
    }
   case 510:
    HEAP32[5263496 >> 2] = 3961;
    label = 643;
    break;
   case 511:
    var $call1850 = _strcmp(5263372, 5577216);
    var $tobool1851 = ($call1850 | 0) == 0;
    if ($tobool1851) {
      label = 512;
      break;
    } else {
      label = 513;
      break;
    }
   case 512:
    HEAP32[5244044 >> 2] = 10721280;
    var $sub1853 = $call41 - 10721280 | 0;
    HEAP32[5244056 >> 2] = $sub1853;
    HEAP16[5244060 >> 1] = 480;
    HEAP16[5244040 >> 1] = 640;
    label = 643;
    break;
   case 513:
    var $call1855 = _strcmp(5263372, 5577208);
    var $tobool1856 = ($call1855 | 0) == 0;
    if ($tobool1856) {
      label = 514;
      break;
    } else {
      label = 643;
      break;
    }
   case 514:
    HEAP32[5263692 >> 2] = 36;
    HEAP32[5263696 >> 2] = 24;
    label = 643;
    break;
   case 515:
    var $call1863 = _strcmp(5263372, 5579064);
    var $tobool1864 = ($call1863 | 0) == 0;
    if ($tobool1864) {
      label = 516;
      break;
    } else {
      label = 517;
      break;
    }
   case 516:
    HEAP16[5398712 >> 1] = 2047;
    HEAP16[5242964 >> 1] = 3072;
    HEAP32[5427632 >> 2] = 1633771873;
    HEAP32[5428492 >> 2] = 6656;
    HEAP32[5263692 >> 2] = 36;
    label = 643;
    break;
   case 517:
    var $call1867 = _strcmp(5263372, 5577196);
    var $tobool1868 = ($call1867 | 0) == 0;
    if ($tobool1868) {
      label = 518;
      break;
    } else {
      label = 519;
      break;
    }
   case 518:
    HEAP16[5242964 >> 1] = 3288;
    HEAP16[5263700 >> 1] = 5;
    HEAP32[5263528 >> 2] = -17;
    HEAP32[5428492 >> 2] = 862144;
    HEAP32[5263692 >> 2] = 26;
    HEAP32[5427632 >> 2] = -1667457892;
    HEAP32[5560840 >> 2] = 4;
    HEAP8[5560896] = HEAP8[5577188];
    HEAP8[5560897] = HEAP8[5577189];
    HEAP8[5560898] = HEAP8[5577190];
    HEAP8[5560899] = HEAP8[5577191];
    HEAP8[5560900] = HEAP8[5577192];
    label = 643;
    break;
   case 519:
    var $call1872 = _strcmp(5263372, 5577180);
    var $tobool1873 = ($call1872 | 0) == 0;
    if ($tobool1873) {
      label = 520;
      break;
    } else {
      label = 521;
      break;
    }
   case 520:
    HEAP16[5242964 >> 1] = 3109;
    HEAP16[5263700 >> 1] = 59;
    HEAP32[5263504 >> 2] = 9;
    HEAP32[5428492 >> 2] = 787392;
    HEAP32[5263692 >> 2] = 26;
    label = 643;
    break;
   case 521:
    var $call1876 = _strcmp(5263628, 5573340);
    var $tobool1877 = ($call1876 | 0) == 0;
    var $or_cond175 = $tobool1877 & $cmp756;
    if ($or_cond175) {
      label = 522;
      break;
    } else {
      label = 523;
      break;
    }
   case 522:
    _adobe_coeff(5573340, 5577172);
    HEAP16[5242964 >> 1] = 3925;
    HEAP16[5262944 >> 1] = 19789;
    label = 643;
    break;
   case 523:
    var $cmp1888 = $61 << 16 >> 16 == 5504;
    var $or_cond176 = $tobool1877 & $cmp1888;
    if ($or_cond176) {
      label = 524;
      break;
    } else {
      label = 525;
      break;
    }
   case 524:
    var $sub1892 = $47 - 8 & 65535;
    HEAP16[5242964 >> 1] = $sub1892;
    label = 643;
    break;
   case 525:
    var $cmp1899 = $61 << 16 >> 16 == 6048;
    var $or_cond177 = $tobool1877 & $cmp1899;
    if ($or_cond177) {
      label = 526;
      break;
    } else {
      label = 527;
      break;
    }
   case 526:
    var $sub1903 = $47 - 24 & 65535;
    HEAP16[5242964 >> 1] = $sub1903;
    label = 643;
    break;
   case 527:
    var $call1906 = _strcmp(5263372, 5586740);
    var $tobool1907 = ($call1906 | 0) == 0;
    if ($tobool1907) {
      label = 528;
      break;
    } else {
      label = 532;
      break;
    }
   case 528:
    var $cmp1910 = $47 << 16 >> 16 == 3880;
    if ($cmp1910) {
      label = 529;
      break;
    } else {
      label = 530;
      break;
    }
   case 529:
    var $dec1913 = $46 - 1 & 65535;
    HEAP16[5398712 >> 1] = $dec1913;
    var $inc1914 = $61 + 1 & 65535;
    HEAP16[5245028 >> 1] = $inc1914;
    HEAP16[5242964 >> 1] = $inc1914;
    label = 531;
    break;
   case 530:
    HEAP16[5262944 >> 1] = 19789;
    HEAP32[5263696 >> 2] = 2;
    label = 531;
    break;
   case 531:
    HEAP32[5427632 >> 2] = 1633771873;
    label = 643;
    break;
   case 532:
    var $call1918 = _strcmp(5263372, 5577160);
    var $tobool1919 = ($call1918 | 0) == 0;
    if ($tobool1919) {
      label = 533;
      break;
    } else {
      label = 534;
      break;
    }
   case 533:
    var $sub1922 = $46 - 4 & 65535;
    HEAP16[5398712 >> 1] = $sub1922;
    label = 643;
    break;
   case 534:
    var $call1925 = _strcmp(5263372, 5577152);
    var $tobool1926 = ($call1925 | 0) == 0;
    if ($tobool1926) {
      label = 535;
      break;
    } else {
      label = 536;
      break;
    }
   case 535:
    HEAP16[5243564 >> 1] = 4;
    var $sub1929 = $46 - 4 & 65535;
    HEAP16[5398712 >> 1] = $sub1929;
    HEAP16[5263700 >> 1] = 32;
    var $sub1932 = $47 - 32 & 65535;
    HEAP16[5242964 >> 1] = $sub1932;
    _gamma_curve(0, 7, 1, 255);
    label = 643;
    break;
   case 536:
    var $call1935 = _strcmp(5263372, 5577120);
    var $tobool1936 = ($call1935 | 0) == 0;
    if ($tobool1936) {
      label = 537;
      break;
    } else {
      label = 540;
      break;
    }
   case 537:
    HEAP16[5398712 >> 1] = 480;
    HEAP16[5242964 >> 1] = 640;
    var $cmp1938 = ($zero_fsize_0 | 0) < 614400;
    if ($cmp1938) {
      label = 542;
      break;
    } else {
      label = 538;
      break;
    }
   case 538:
    var $call1941 = _find_green(16, 16, 3840, 5120);
    var $cmp1942 = $call1941 < 25;
    if ($cmp1942) {
      label = 542;
      break;
    } else {
      label = 539;
      break;
    }
   case 539:
    for (var $$src = 5577108, $$dest = 5263372, $$stop = $$src + 9; $$src < $$stop; $$src++, $$dest++) {
      HEAP8[$$dest] = HEAP8[$$src];
    }
    var $145 = HEAP16[5398712 >> 1];
    var $sub1948 = $145 - 3 & 65535;
    HEAP16[5398712 >> 1] = $sub1948;
    HEAP32[5428492 >> 2] = 3840;
    HEAP16[5262944 >> 1] = 18761;
    HEAP32[5263692 >> 2] = 4;
    label = 643;
    break;
   case 540:
    var $call1951 = _strcmp(5263372, 5577100);
    var $tobool1952 = ($call1951 | 0) == 0;
    if ($tobool1952) {
      label = 541;
      break;
    } else {
      label = 543;
      break;
    }
   case 541:
    HEAP16[5398712 >> 1] = 2134;
    HEAP16[5242964 >> 1] = 2848;
    label = 542;
    break;
   case 542:
    HEAP32[5427632 >> 2] = 0;
    HEAP32[5263692 >> 2] = 52;
    _gamma_curve(0, 3.875, 1, 255);
    label = 643;
    break;
   case 543:
    var $call1955 = _strcmp(5263372, 5577092);
    var $tobool1956 = ($call1955 | 0) == 0;
    if ($tobool1956) {
      label = 544;
      break;
    } else {
      label = 545;
      break;
    }
   case 544:
    HEAP16[5398712 >> 1] = 2152;
    HEAP16[5245036 >> 1] = 2152;
    HEAP16[5242964 >> 1] = 2864;
    HEAP16[5245028 >> 1] = 2864;
    var $147 = 2152;
    var $146 = 2864;
    label = 547;
    break;
   case 545:
    var $call1959 = _strcmp(5263372, 5577084);
    var $tobool1960 = ($call1959 | 0) == 0;
    if ($tobool1960) {
      label = 546;
      break;
    } else {
      label = 551;
      break;
    }
   case 546:
    HEAP16[5398712 >> 1] = 1744;
    HEAP16[5242964 >> 1] = 2336;
    HEAP16[5245036 >> 1] = 1779;
    HEAP16[5245028 >> 1] = 2338;
    HEAP16[5243564 >> 1] = 33;
    HEAP16[5263700 >> 1] = 1;
    var $147 = 1779;
    var $146 = 2338;
    label = 547;
    break;
   case 547:
    var $146;
    var $147;
    HEAP16[5262944 >> 1] = 18761;
    var $mul1964 = $146 * $147 & -1;
    var $sub1965 = $zero_fsize_0 - $mul1964 | 0;
    HEAP32[5428492 >> 2] = $sub1965;
    var $tobool1966 = ($zero_fsize_0 | 0) == ($mul1964 | 0);
    if ($tobool1966) {
      label = 549;
      break;
    } else {
      label = 548;
      break;
    }
   case 548:
    var $148 = HEAP32[5264116 >> 2];
    var $call1968 = _fseek($148, 168, 0);
    _read_shorts(5428500, 256);
    label = 550;
    break;
   case 549:
    _gamma_curve(0, 3.875, 1, 255);
    label = 550;
    break;
   case 550:
    HEAP32[5263692 >> 2] = 82;
    label = 643;
    break;
   case 551:
    var $call1972 = _strncasecmp(5263372, 5577072, 9);
    var $tobool1973 = ($call1972 | 0) == 0;
    if ($tobool1973) {
      label = 552;
      break;
    } else {
      label = 553;
      break;
    }
   case 552:
    var $149 = HEAP32[5428492 >> 2];
    var $cmp1975 = ($149 | 0) < 86016;
    var $cond1977 = $cmp1975 ? 86016 : 94208;
    HEAP32[5428492 >> 2] = $cond1977;
    HEAP32[5263692 >> 2] = 36;
    label = 643;
    break;
   case 553:
    var $call1979 = _strcasecmp(5263628, 5586632);
    var $tobool1980 = ($call1979 | 0) == 0;
    if ($tobool1980) {
      label = 554;
      break;
    } else {
      label = 586;
      break;
    }
   case 554:
    var $150 = HEAP32[5427632 >> 2];
    var $cmp1982 = ($150 | 0) == -1;
    if ($cmp1982) {
      label = 555;
      break;
    } else {
      label = 556;
      break;
    }
   case 555:
    HEAP32[5427632 >> 2] = 1633771873;
    label = 556;
    break;
   case 556:
    var $call1986 = _strncmp(5263372, 5577064, 6);
    var $tobool1987 = ($call1986 | 0) == 0;
    if ($tobool1987) {
      label = 557;
      break;
    } else {
      label = 558;
      break;
    }
   case 557:
    var $sub1990 = $47 - 4 & 65535;
    HEAP16[5242964 >> 1] = $sub1990;
    HEAP16[5263700 >> 1] = 2;
    label = 572;
    break;
   case 558:
    var $call1993 = _strcmp(5263372, 5577052);
    var $tobool1994 = ($call1993 | 0) == 0;
    if ($tobool1994) {
      label = 559;
      break;
    } else {
      label = 560;
      break;
    }
   case 559:
    var $sub1997 = $47 - 4 & 65535;
    HEAP16[5242964 >> 1] = $sub1997;
    HEAP16[5263700 >> 1] = 2;
    label = 572;
    break;
   case 560:
    var $call2000 = _strcmp(5263372, 5577044);
    var $tobool2001 = ($call2000 | 0) == 0;
    if ($tobool2001) {
      label = 561;
      break;
    } else {
      label = 562;
      break;
    }
   case 561:
    var $sub2004 = $47 - 4 & 65535;
    HEAP16[5242964 >> 1] = $sub2004;
    HEAP16[5263700 >> 1] = 2;
    label = 572;
    break;
   case 562:
    var $call2007 = _strcmp(5263372, 5577036);
    var $tobool2008 = ($call2007 | 0) == 0;
    if ($tobool2008) {
      label = 563;
      break;
    } else {
      label = 564;
      break;
    }
   case 563:
    var $sub2011 = $47 - 4 & 65535;
    HEAP16[5242964 >> 1] = $sub2011;
    HEAP16[5263700 >> 1] = 2;
    label = 572;
    break;
   case 564:
    var $call2014 = _strncmp(5263372, 5577004, 7);
    var $tobool2015 = ($call2014 | 0) == 0;
    if ($tobool2015) {
      label = 565;
      break;
    } else {
      label = 566;
      break;
    }
   case 565:
    HEAP8[5263378] = 0;
    var $sub2018 = $47 - 4 & 65535;
    HEAP16[5242964 >> 1] = $sub2018;
    HEAP16[5263700 >> 1] = 2;
    label = 572;
    break;
   case 566:
    var $call2021 = _strcmp(5263372, 5576996);
    var $tobool2022 = ($call2021 | 0) == 0;
    if ($tobool2022) {
      label = 567;
      break;
    } else {
      label = 568;
      break;
    }
   case 567:
    var $sub2025 = $47 - 4 & 65535;
    HEAP16[5242964 >> 1] = $sub2025;
    HEAP16[5263700 >> 1] = 2;
    HEAP32[5560840 >> 2] = 1;
    HEAP32[5427632 >> 2] = 0;
    label = 572;
    break;
   case 568:
    var $call2028 = _strcmp(5263372, 5576988);
    var $tobool2029 = ($call2028 | 0) == 0;
    if ($tobool2029) {
      label = 569;
      break;
    } else {
      label = 570;
      break;
    }
   case 569:
    HEAP32[5561400 >> 2] = 214;
    HEAP32[5560840 >> 2] = 1;
    HEAP32[5427632 >> 2] = 0;
    label = 572;
    break;
   case 570:
    var $call2032 = _strcmp(5263372, 5576980);
    var $tobool2033 = ($call2032 | 0) == 0;
    if ($tobool2033) {
      label = 571;
      break;
    } else {
      label = 572;
      break;
    }
   case 571:
    HEAP32[5560840 >> 2] = 1;
    HEAP32[5427632 >> 2] = 0;
    label = 572;
    break;
   case 572:
    var $call2043 = _strcmp(5263376, 5576976);
    var $tobool2044 = ($call2043 | 0) == 0;
    if ($tobool2044) {
      label = 573;
      break;
    } else {
      label = 574;
      break;
    }
   case 573:
    HEAP8[5560896] = HEAP8[5576968];
    HEAP8[5560897] = HEAP8[5576969];
    HEAP8[5560898] = HEAP8[5576970];
    HEAP8[5560899] = HEAP8[5576971];
    HEAP8[5560900] = HEAP8[5576972];
    label = 574;
    break;
   case 574:
    var $call2048 = _strstr(5263372, 5576960);
    var $tobool2049 = ($call2048 | 0) == 0;
    if ($tobool2049) {
      label = 576;
      break;
    } else {
      label = 575;
      break;
    }
   case 575:
    HEAP8[5263372] = HEAP8[5576960];
    HEAP8[5263373] = HEAP8[5576961];
    HEAP8[5263374] = HEAP8[5576962];
    HEAP8[5263375] = HEAP8[5576963];
    HEAP8[5263376] = HEAP8[5576964];
    HEAP32[5428492 >> 2] = 15424;
    label = 576;
    break;
   case 576:
    var $call2053 = _strncmp(5263372, 5579868, 3);
    var $tobool2054 = ($call2053 | 0) == 0;
    if ($tobool2054) {
      label = 577;
      break;
    } else {
      label = 578;
      break;
    }
   case 577:
    HEAP16[5398712 >> 1] = 242;
    HEAP16[5245036 >> 1] = 242;
    var $cmp2056 = ($call41 | 0) < 1e5;
    var $_ = $cmp2056 ? 256 : 512;
    var $_30 = $cmp2056 ? 249 : 501;
    var $_31 = $cmp2056 ? 257 : 513;
    var $_32 = $cmp2056 ? 1.2958500669344042 : .6384335885869012;
    HEAP16[5245028 >> 1] = $_;
    HEAP16[5242964 >> 1] = $_30;
    HEAPF64[tempDoublePtr >> 3] = $_32, HEAP32[5245656 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5245660 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $151 = HEAP32[5428492 >> 2];
    var $add2077 = $_31 + $151 | 0;
    HEAP32[5428492 >> 2] = $add2077;
    HEAP32[5560840 >> 2] = 4;
    HEAP32[5427632 >> 2] = -1920103027;
    _simple_coeff(1);
    HEAPF32[5245644 >> 2] = 1.1790000200271606;
    HEAPF32[5245648 >> 2] = 1.2089999914169312;
    HEAPF32[5245652 >> 2] = 1.0360000133514404;
    HEAP32[5263692 >> 2] = 82;
    label = 643;
    break;
   case 578:
    var $call2079 = _strcmp(5263372, 5576956);
    var $tobool2080 = ($call2079 | 0) == 0;
    if ($tobool2080) {
      label = 579;
      break;
    } else {
      label = 580;
      break;
    }
   case 579:
    HEAP8[5263372] = HEAP8[5576948];
    HEAP8[5263373] = HEAP8[5576949];
    HEAP8[5263374] = HEAP8[5576950];
    HEAP8[5263375] = HEAP8[5576951];
    HEAP8[5263376] = HEAP8[5576952];
    HEAP16[5398712 >> 1] = 512;
    HEAP16[5242964 >> 1] = 768;
    HEAP32[5428492 >> 2] = 1152;
    HEAP32[5263692 >> 2] = 58;
    label = 643;
    break;
   case 580:
    var $call2084 = _strstr(5263372, 5576940);
    var $tobool2085 = ($call2084 | 0) == 0;
    if ($tobool2085) {
      label = 582;
      break;
    } else {
      label = 581;
      break;
    }
   case 581:
    HEAP8[5263372] = HEAP8[5576940];
    HEAP8[5263373] = HEAP8[5576941];
    HEAP8[5263374] = HEAP8[5576942];
    HEAP8[5263375] = HEAP8[5576943];
    HEAP8[5263376] = HEAP8[5576944];
    HEAP16[5398712 >> 1] = 512;
    HEAP16[5242964 >> 1] = 768;
    HEAP32[5428492 >> 2] = 19712;
    HEAP32[5263692 >> 2] = 58;
    label = 643;
    break;
   case 582:
    var $call2089 = _strstr(5263372, 5576912);
    var $tobool2090 = ($call2089 | 0) == 0;
    if ($tobool2090) {
      label = 584;
      break;
    } else {
      label = 583;
      break;
    }
   case 583:
    HEAP8[5263372] = HEAP8[5576912];
    HEAP8[5263373] = HEAP8[5576913];
    HEAP8[5263374] = HEAP8[5576914];
    HEAP8[5263375] = HEAP8[5576915];
    HEAP8[5263376] = HEAP8[5576916];
    HEAP8[5263377] = HEAP8[5576917];
    HEAP16[5398712 >> 1] = 976;
    HEAP16[5242964 >> 1] = 848;
    HEAPF64[tempDoublePtr >> 3] = 1.5345911949685533, HEAP32[5245656 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5245660 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $152 = HEAP32[5244032 >> 2];
    var $cmp2099 = ($152 | 0) == 7;
    var $cond2101 = $cmp2099 ? 18 : 80;
    HEAP32[5263692 >> 2] = $cond2101;
    label = 643;
    break;
   case 584:
    var $call2103 = _strcmp(5263372, 5576904);
    var $tobool2104 = ($call2103 | 0) == 0;
    if ($tobool2104) {
      label = 585;
      break;
    } else {
      label = 643;
      break;
    }
   case 585:
    HEAP16[5244060 >> 1] = 128;
    HEAP16[5244040 >> 1] = 192;
    HEAP32[5244044 >> 2] = 6144;
    HEAP32[5244048 >> 2] = 360;
    HEAP32[5242960 >> 2] = 50;
    HEAP16[5398712 >> 1] = 1024;
    HEAP16[5242964 >> 1] = 1536;
    HEAP32[5428492 >> 2] = 79872;
    HEAP32[5263692 >> 2] = 82;
    HEAP32[5561400 >> 2] = 17;
    label = 643;
    break;
   case 586:
    var $call2112 = _strcmp(5263372, 5579032);
    var $tobool2113 = ($call2112 | 0) == 0;
    if ($tobool2113) {
      label = 587;
      break;
    } else {
      label = 588;
      break;
    }
   case 587:
    HEAP16[5398712 >> 1] = 512;
    HEAP16[5242964 >> 1] = 768;
    HEAP32[5428492 >> 2] = 3632;
    HEAP32[5263692 >> 2] = 58;
    HEAP32[5427632 >> 2] = 1633771873;
    _simple_coeff(2);
    label = 643;
    break;
   case 588:
    var $call2116 = _strncmp(5263372, 5576892, 9);
    var $tobool2117 = ($call2116 | 0) == 0;
    if ($tobool2117) {
      label = 589;
      break;
    } else {
      label = 594;
      break;
    }
   case 589:
    var $arrayidx2119 = $head + 5 | 0;
    var $153 = HEAP8[$arrayidx2119];
    var $tobool2120 = $153 << 24 >> 24 == 0;
    if ($tobool2120) {
      label = 591;
      break;
    } else {
      label = 590;
      break;
    }
   case 590:
    tempBigInt = 3158066;
    HEAP16[5263382 >> 1] = tempBigInt & 65535;
    HEAP16[5263384 >> 1] = tempBigInt >> 16;
    label = 591;
    break;
   case 591:
    var $154 = HEAP32[5264116 >> 2];
    var $call2124 = _fseek($154, 544, 0);
    var $call2125 = _get2();
    HEAP16[5398712 >> 1] = $call2125;
    var $call2126 = _get2();
    HEAP16[5242964 >> 1] = $call2126;
    var $call2127 = _get4();
    var $call2128 = _get2();
    var $cmp2130 = $call2128 << 16 >> 16 == 30;
    var $cond2132 = $cmp2130 ? 738 : 736;
    HEAP32[5428492 >> 2] = $cond2132;
    var $155 = HEAP16[5398712 >> 1];
    var $156 = HEAP16[5242964 >> 1];
    var $cmp2135 = ($155 & 65535) > ($156 & 65535);
    if ($cmp2135) {
      label = 592;
      break;
    } else {
      label = 593;
      break;
    }
   case 592:
    HEAP16[5242964 >> 1] = $155;
    HEAP16[5398712 >> 1] = $156;
    var $157 = HEAP32[5264116 >> 2];
    var $sub2150 = $cond2132 - 6 | 0;
    var $call2151 = _fseek($157, $sub2150, 0);
    var $call2152 = _get2();
    var $neg = $call2152 & 3;
    var $tobool2155 = $neg << 16 >> 16 != 3;
    var $cond2156 = $tobool2155 ? 5 : 6;
    HEAP32[5403048 >> 2] = $cond2156;
    label = 593;
    break;
   case 593:
    HEAP32[5427632 >> 2] = 1633771873;
    label = 643;
    break;
   case 594:
    var $call2159 = _strcmp(5263628, 5586288);
    var $tobool2160 = ($call2159 | 0) != 0;
    var $158 = HEAP32[5263692 >> 2];
    var $tobool2162 = ($158 | 0) != 0;
    var $or_cond3 = $tobool2160 | $tobool2162;
    if ($or_cond3) {
      label = 599;
      break;
    } else {
      label = 595;
      break;
    }
   case 595:
    var $conv2164 = $61 & 65535;
    if (($conv2164 | 0) == 1316) {
      label = 596;
      break;
    } else if (($conv2164 | 0) == 2568) {
      label = 597;
      break;
    } else {
      label = 598;
      break;
    }
   case 596:
    HEAP16[5398712 >> 1] = 1030;
    HEAP16[5242964 >> 1] = 1300;
    HEAP16[5243564 >> 1] = 1;
    HEAP16[5263700 >> 1] = 6;
    label = 598;
    break;
   case 597:
    HEAP16[5398712 >> 1] = 1960;
    HEAP16[5242964 >> 1] = 2560;
    HEAP16[5243564 >> 1] = 2;
    HEAP16[5263700 >> 1] = 8;
    label = 598;
    break;
   case 598:
    HEAP32[5427632 >> 2] = 370546198;
    HEAP32[5263692 >> 2] = 70;
    label = 643;
    break;
   case 599:
    var $call2169 = _strcmp(5263372, 5576880);
    var $tobool2170 = ($call2169 | 0) == 0;
    if ($tobool2170) {
      label = 600;
      break;
    } else {
      label = 601;
      break;
    }
   case 600:
    HEAP16[5398712 >> 1] = 768;
    HEAP16[5242964 >> 1] = 1024;
    HEAP32[5428492 >> 2] = 1024;
    HEAP32[5427632 >> 2] = 1229539657;
    HEAP32[5263692 >> 2] = 82;
    label = 643;
    break;
   case 601:
    var $call2173 = _strcmp(5263372, 5576868);
    var $tobool2174 = ($call2173 | 0) == 0;
    if ($tobool2174) {
      label = 602;
      break;
    } else {
      label = 603;
      break;
    }
   case 602:
    HEAP16[5398712 >> 1] = 1208;
    HEAP16[5242964 >> 1] = 1632;
    HEAP32[5428492 >> 2] = 3264;
    HEAP32[5263692 >> 2] = 82;
    label = 643;
    break;
   case 603:
    var $cmp2179 = ($zero_fsize_0 | 0) == 3217760;
    if ($cmp2179) {
      label = 604;
      break;
    } else {
      label = 605;
      break;
    }
   case 604:
    HEAP16[5398712 >> 1] = 1546;
    HEAP16[5242964 >> 1] = 2070;
    HEAP16[5245028 >> 1] = 2080;
    HEAP32[5263692 >> 2] = 82;
    label = 643;
    break;
   case 605:
    var $call2183 = _strcmp(5263372, 5576860);
    var $tobool2184 = ($call2183 | 0) == 0;
    if ($tobool2184) {
      label = 606;
      break;
    } else {
      label = 607;
      break;
    }
   case 606:
    HEAP16[5398712 >> 1] = 1700;
    HEAP16[5242964 >> 1] = 2260;
    HEAP32[5263692 >> 2] = 4;
    HEAP32[5263496 >> 2] = 65535;
    label = 643;
    break;
   case 607:
    var $call2187 = _strcmp(5263372, 5576852);
    var $tobool2188 = ($call2187 | 0) == 0;
    if ($tobool2188) {
      label = 608;
      break;
    } else {
      label = 609;
      break;
    }
   case 608:
    HEAP16[5398712 >> 1] = 1924;
    HEAP16[5242964 >> 1] = 2576;
    HEAP16[5245028 >> 1] = 3232;
    HEAP32[5244036 >> 2] = 10;
    label = 643;
    break;
   case 609:
    var $call2191 = _strcmp(5263372, 5576844);
    var $tobool2192 = ($call2191 | 0) == 0;
    if ($tobool2192) {
      label = 610;
      break;
    } else {
      label = 611;
      break;
    }
   case 610:
    HEAP16[5398712 >> 1] = 1720;
    HEAP16[5242964 >> 1] = 2312;
    HEAP16[5245028 >> 1] = 3520;
    HEAP16[5263700 >> 1] = 2;
    label = 643;
    break;
   case 611:
    var $call2195 = _strcmp(5263372, 5576836);
    var $tobool2196 = ($call2195 | 0) == 0;
    if ($tobool2196) {
      label = 612;
      break;
    } else {
      label = 613;
      break;
    }
   case 612:
    HEAP16[5398712 >> 1] = 1926;
    HEAP16[5242964 >> 1] = 2580;
    HEAP16[5245028 >> 1] = 3904;
    label = 643;
    break;
   case 613:
    var $call2199 = _strcmp(5263372, 5576800);
    var $tobool2200 = ($call2199 | 0) == 0;
    if ($tobool2200) {
      label = 614;
      break;
    } else {
      label = 615;
      break;
    }
   case 614:
    HEAP16[5398712 >> 1] = 1208;
    HEAP16[5242964 >> 1] = 1620;
    HEAP16[5245028 >> 1] = 2432;
    HEAP32[5403048 >> 2] = 3;
    label = 643;
    break;
   case 615:
    var $call2203 = _strcmp(5263372, 5576792);
    var $tobool2204 = ($call2203 | 0) == 0;
    if ($tobool2204) {
      label = 616;
      break;
    } else {
      label = 617;
      break;
    }
   case 616:
    HEAP16[5398712 >> 1] = 1544;
    HEAP16[5242964 >> 1] = 2058;
    HEAP16[5245028 >> 1] = 3136;
    label = 643;
    break;
   case 617:
    var $call2207 = _strcmp(5263372, 5576784);
    var $tobool2208 = ($call2207 | 0) == 0;
    if ($tobool2208) {
      label = 618;
      break;
    } else {
      label = 619;
      break;
    }
   case 618:
    HEAP16[5398712 >> 1] = 1931;
    HEAP16[5242964 >> 1] = 2570;
    HEAP16[5245028 >> 1] = 3904;
    label = 643;
    break;
   case 619:
    var $call2211 = _strcmp(5263372, 5576776);
    var $tobool2212 = ($call2211 | 0) == 0;
    if ($tobool2212) {
      label = 620;
      break;
    } else {
      label = 621;
      break;
    }
   case 620:
    HEAP16[5398712 >> 1] = 1937;
    HEAP16[5242964 >> 1] = 2577;
    HEAP16[5245028 >> 1] = 3904;
    HEAP32[5427632 >> 2] = 370546198;
    label = 643;
    break;
   case 621:
    var $call2215 = _strcmp(5263372, 5576768);
    var $tobool2216 = ($call2215 | 0) == 0;
    if ($tobool2216) {
      label = 622;
      break;
    } else {
      label = 623;
      break;
    }
   case 622:
    HEAP16[5398712 >> 1] = 1960;
    HEAP16[5242964 >> 1] = 2570;
    HEAP16[5245028 >> 1] = 3904;
    label = 643;
    break;
   case 623:
    var $call2219 = _strcmp(5263372, 5576760);
    var $tobool2220 = ($call2219 | 0) == 0;
    if ($tobool2220) {
      label = 624;
      break;
    } else {
      label = 625;
      break;
    }
   case 624:
    HEAP16[5398712 >> 1] = 2145;
    HEAP16[5242964 >> 1] = 2833;
    HEAP16[5245028 >> 1] = 3584;
    HEAP32[5427632 >> 2] = 370546198;
    HEAP32[5244036 >> 2] = 10;
    label = 643;
    break;
   case 625:
    var $call2223 = _strcmp(5263372, 5576752);
    var $tobool2224 = ($call2223 | 0) == 0;
    if ($tobool2224) {
      label = 626;
      break;
    } else {
      label = 627;
      break;
    }
   case 626:
    HEAP16[5398712 >> 1] = 2321;
    HEAP16[5242964 >> 1] = 3089;
    HEAP16[5245028 >> 1] = 4672;
    HEAP32[5263496 >> 2] = 4095;
    label = 643;
    break;
   case 627:
    var $call2227 = _strcmp(5263372, 5576744);
    var $tobool2228 = ($call2227 | 0) == 0;
    if ($tobool2228) {
      label = 628;
      break;
    } else {
      label = 629;
      break;
    }
   case 628:
    HEAP16[5398712 >> 1] = 2319;
    HEAP16[5242964 >> 1] = 3087;
    HEAP16[5245028 >> 1] = 4672;
    HEAP32[5263496 >> 2] = 4095;
    label = 643;
    break;
   case 629:
    var $call2231 = _strcmp(5263372, 5576736);
    var $tobool2232 = ($call2231 | 0) == 0;
    if ($tobool2232) {
      label = 630;
      break;
    } else {
      label = 631;
      break;
    }
   case 630:
    HEAP16[5398712 >> 1] = 2468;
    HEAP16[5242964 >> 1] = 3279;
    HEAP16[5245028 >> 1] = 4928;
    HEAP32[5263496 >> 2] = 4095;
    label = 643;
    break;
   case 631:
    var $call2235 = _strcmp(5263372, 5576728);
    var $tobool2236 = ($call2235 | 0) == 0;
    if ($tobool2236) {
      label = 632;
      break;
    } else {
      label = 633;
      break;
    }
   case 632:
    HEAP16[5398712 >> 1] = 2467;
    HEAP16[5242964 >> 1] = 3281;
    HEAP16[5245036 >> 1] = 2502;
    HEAP16[5245028 >> 1] = 4992;
    HEAP32[5263496 >> 2] = 4095;
    label = 643;
    break;
   case 633:
    var $cmp2239 = ($zero_fsize_0 | 0) == 15499264;
    if ($cmp2239) {
      label = 634;
      break;
    } else {
      label = 635;
      break;
    }
   case 634:
    HEAP16[5398712 >> 1] = 2752;
    HEAP16[5242964 >> 1] = 3672;
    HEAP16[5245028 >> 1] = 5632;
    label = 643;
    break;
   case 635:
    var $call2243 = _strcmp(5263372, 5576692);
    var $tobool2244 = ($call2243 | 0) == 0;
    if ($tobool2244) {
      label = 636;
      break;
    } else {
      label = 637;
      break;
    }
   case 636:
    HEAP16[5398712 >> 1] = 3044;
    HEAP16[5242964 >> 1] = 4072;
    HEAP16[5245028 >> 1] = 4096;
    HEAP32[5263696 >> 2] = 80;
    label = 643;
    break;
   case 637:
    var $call2247 = _strcmp(5263372, 5576684);
    var $tobool2248 = ($call2247 | 0) == 0;
    if ($tobool2248) {
      label = 638;
      break;
    } else {
      label = 639;
      break;
    }
   case 638:
    HEAP16[5398712 >> 1] = 1928;
    HEAP16[5242964 >> 1] = 2568;
    HEAP16[5245028 >> 1] = 3852;
    HEAP32[5263496 >> 2] = 4095;
    label = 643;
    break;
   case 639:
    var $cmp2251 = ($zero_fsize_0 | 0) == 9313536;
    if ($cmp2251) {
      label = 640;
      break;
    } else {
      label = 641;
      break;
    }
   case 640:
    HEAP16[5398712 >> 1] = 2142;
    HEAP16[5242964 >> 1] = 2844;
    HEAP16[5245028 >> 1] = 4288;
    label = 643;
    break;
   case 641:
    var $call2255 = _strcmp(5263372, 5576676);
    var $tobool2256 = ($call2255 | 0) == 0;
    if ($tobool2256) {
      label = 642;
      break;
    } else {
      label = 643;
      break;
    }
   case 642:
    HEAP16[5398712 >> 1] = 2318;
    HEAP16[5242964 >> 1] = 3082;
    HEAP16[5245028 >> 1] = 4672;
    label = 643;
    break;
   case 643:
    var $_pr207 = HEAP8[5263372];
    var $tobool2420 = $_pr207 << 24 >> 24 == 0;
    if ($tobool2420) {
      label = 644;
      break;
    } else {
      label = 645;
      break;
    }
   case 644:
    var $159 = HEAP16[5242964 >> 1];
    var $conv2422 = $159 & 65535;
    var $160 = HEAP16[5398712 >> 1];
    var $conv2423 = $160 & 65535;
    var $call2424 = _sprintf(5263372, 5576668, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $conv2422, HEAP32[tempInt + 4 >> 2] = $conv2423, tempInt));
    label = 645;
    break;
   case 645:
    var $161 = HEAP32[5427632 >> 2];
    var $cmp2426 = ($161 | 0) == -1;
    if ($cmp2426) {
      label = 646;
      break;
    } else {
      label = 647;
      break;
    }
   case 646:
    HEAP32[5427632 >> 2] = -1802201964;
    label = 647;
    break;
   case 647:
    var $162 = HEAP32[5245040 >> 2];
    var $tobool2430 = ($162 | 0) == 0;
    if ($tobool2430) {
      label = 648;
      break;
    } else {
      label = 649;
      break;
    }
   case 648:
    var $163 = HEAP32[5263692 >> 2];
    label = 651;
    break;
   case 649:
    _adobe_coeff(5263628, 5263372);
    var $_pre = HEAP32[5245040 >> 2];
    var $phitmp4 = ($_pre | 0) != 0;
    var $164 = HEAP32[5263692 >> 2];
    var $cmp2433 = ($164 | 0) == 58;
    var $or_cond7 = $cmp2433 & $phitmp4;
    if ($or_cond7) {
      label = 650;
      break;
    } else {
      label = 651;
      break;
    }
   case 650:
    _adobe_coeff(5579e3, 5576656);
    label = 651;
    break;
   case 651:
    var $165 = HEAP32[5244044 >> 2];
    var $tobool2440 = ($165 | 0) == 0;
    var $166 = HEAP16[5244060 >> 1];
    var $tobool2442 = $166 << 16 >> 16 != 0;
    var $or_cond4 = $tobool2440 | $tobool2442;
    if ($or_cond4) {
      label = 654;
      break;
    } else {
      label = 652;
      break;
    }
   case 652:
    var $167 = HEAP32[5264116 >> 2];
    var $call2444 = _fseek($167, $165, 0);
    var $call2445 = _ljpeg_start($jh, 1);
    var $tobool2446 = ($call2445 | 0) == 0;
    if ($tobool2446) {
      label = 654;
      break;
    } else {
      label = 653;
      break;
    }
   case 653:
    var $wide = $jh + 8 | 0;
    var $168 = HEAP32[$wide >> 2];
    var $conv2448 = $168 & 65535;
    HEAP16[5244040 >> 1] = $conv2448;
    var $high = $jh + 4 | 0;
    var $169 = HEAP32[$high >> 2];
    var $conv2449 = $169 & 65535;
    HEAP16[5244060 >> 1] = $conv2449;
    label = 654;
    break;
   case 654:
    var $170 = HEAP16[5398900 >> 1];
    var $tobool2452 = $170 << 16 >> 16 == 0;
    if ($tobool2452) {
      label = 658;
      break;
    } else {
      label = 655;
      break;
    }
   case 655:
    var $171 = HEAP16[5242964 >> 1];
    var $conv2454 = $171 & 65535;
    var $172 = HEAP32[5398904 >> 2];
    var $lnot2456 = ($172 | 0) == 0;
    var $lnot_ext2457 = $lnot2456 & 1;
    var $shr2458 = $conv2454 >>> ($lnot_ext2457 >>> 0);
    var $conv2459 = $shr2458 & 65535;
    HEAP16[5398900 >> 1] = $conv2459;
    var $neg2461 = $shr2458 & 1;
    var $tobool2463 = ($neg2461 | 0) == 0;
    if ($tobool2463) {
      label = 656;
      break;
    } else {
      label = 657;
      break;
    }
   case 656:
    HEAP32[5427632 >> 2] = 1229539657;
    label = 657;
    break;
   case 657:
    var $173 = HEAP16[5398712 >> 1];
    var $conv2466 = $173 & 65535;
    var $shr2467 = $conv2466 >>> ($172 >>> 0);
    var $conv2468 = $shr2458 & 65535;
    var $add2469 = $conv2468 + $shr2467 | 0;
    var $conv2470 = $add2469 & 65535;
    HEAP16[5242964 >> 1] = $conv2470;
    var $sub2472 = $add2469 + 65535 | 0;
    var $conv2473 = $sub2472 & 65535;
    HEAP16[5398712 >> 1] = $conv2473;
    HEAPF64[tempDoublePtr >> 3] = 1, HEAP32[5245656 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5245660 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
    var $178 = $conv2473;
    label = 662;
    break;
   case 658:
    var $174 = HEAP16[5245036 >> 1];
    var $175 = HEAP16[5398712 >> 1];
    var $cmp2477 = ($174 & 65535) < ($175 & 65535);
    if ($cmp2477) {
      label = 659;
      break;
    } else {
      label = 660;
      break;
    }
   case 659:
    HEAP16[5245036 >> 1] = $175;
    label = 660;
    break;
   case 660:
    var $176 = HEAP16[5245028 >> 1];
    var $177 = HEAP16[5242964 >> 1];
    var $cmp2483 = ($176 & 65535) < ($177 & 65535);
    if ($cmp2483) {
      label = 661;
      break;
    } else {
      var $178 = $175;
      label = 662;
      break;
    }
   case 661:
    HEAP16[5245028 >> 1] = $177;
    var $178 = $175;
    label = 662;
    break;
   case 662:
    var $178;
    var $179 = HEAP32[5244036 >> 2];
    var $tobool2488 = ($179 | 0) == 0;
    if ($tobool2488) {
      label = 663;
      break;
    } else {
      var $180 = $179;
      label = 664;
      break;
    }
   case 663:
    HEAP32[5244036 >> 2] = 12;
    var $180 = 12;
    label = 664;
    break;
   case 664:
    var $180;
    var $181 = HEAP32[5263496 >> 2];
    var $tobool2491 = ($181 | 0) == 0;
    if ($tobool2491) {
      label = 665;
      break;
    } else {
      label = 666;
      break;
    }
   case 665:
    var $shl2493 = 1 << $180;
    var $sub2494 = $shl2493 - 1 | 0;
    HEAP32[5263496 >> 2] = $sub2494;
    label = 666;
    break;
   case 666:
    var $182 = HEAP32[5263692 >> 2];
    var $tobool2496 = ($182 | 0) == 0;
    var $cmp2499 = ($178 & 65535) < 22;
    var $or_cond178 = $tobool2496 | $cmp2499;
    if ($or_cond178) {
      label = 667;
      break;
    } else {
      label = 668;
      break;
    }
   case 667:
    HEAP32[5264100 >> 2] = 0;
    label = 668;
    break;
   case 668:
    var $cmp2503 = ($182 | 0) == 44;
    if ($cmp2503) {
      label = 669;
      break;
    } else {
      var $185 = $182;
      label = 670;
      break;
    }
   case 669:
    var $183 = HEAP32[_stderr >> 2];
    var $184 = HEAP32[5264120 >> 2];
    var $call2506 = _fprintf($183, 5576620, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $184, HEAP32[tempInt + 4 >> 2] = 5576608, tempInt));
    HEAP32[5264100 >> 2] = 0;
    var $_pre2 = HEAP32[5263692 >> 2];
    var $185 = $_pre2;
    label = 670;
    break;
   case 670:
    var $185;
    var $cmp2508 = ($185 | 0) == 18;
    var $cmp2511 = ($185 | 0) == 94;
    var $or_cond5 = $cmp2508 | $cmp2511;
    if ($or_cond5) {
      label = 671;
      break;
    } else {
      label = 672;
      break;
    }
   case 671:
    var $186 = HEAP32[_stderr >> 2];
    var $187 = HEAP32[5264120 >> 2];
    var $call2514 = _fprintf($186, 5576620, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $187, HEAP32[tempInt + 4 >> 2] = 5576600, tempInt));
    HEAP32[5264100 >> 2] = 0;
    label = 672;
    break;
   case 672:
    var $188 = HEAP8[5560896];
    var $tobool2516 = $188 << 24 >> 24 == 0;
    if ($tobool2516) {
      label = 673;
      break;
    } else {
      label = 674;
      break;
    }
   case 673:
    var $189 = HEAP32[5560840 >> 2];
    var $cmp2518 = ($189 | 0) == 3;
    var $cond2520 = $cmp2518 ? 5576592 : 5576584;
    HEAP8[5560896] = HEAP8[$cond2520];
    HEAP8[5560897] = HEAP8[$cond2520 + 1];
    HEAP8[5560898] = HEAP8[$cond2520 + 2];
    HEAP8[5560899] = HEAP8[$cond2520 + 3];
    HEAP8[5560900] = HEAP8[$cond2520 + 4];
    label = 674;
    break;
   case 674:
    var $190 = HEAP16[5245036 >> 1];
    var $tobool2523 = $190 << 16 >> 16 == 0;
    if ($tobool2523) {
      label = 675;
      break;
    } else {
      label = 676;
      break;
    }
   case 675:
    var $191 = HEAP16[5398712 >> 1];
    HEAP16[5245036 >> 1] = $191;
    label = 676;
    break;
   case 676:
    var $192 = HEAP16[5245028 >> 1];
    var $tobool2526 = $192 << 16 >> 16 == 0;
    if ($tobool2526) {
      label = 677;
      break;
    } else {
      label = 678;
      break;
    }
   case 677:
    var $193 = HEAP16[5242964 >> 1];
    HEAP16[5245028 >> 1] = $193;
    label = 678;
    break;
   case 678:
    var $194 = HEAP32[5427632 >> 2];
    var $tobool2529 = ($194 | 0) != 0;
    var $195 = HEAP32[5560840 >> 2];
    var $cmp2531 = ($195 | 0) == 3;
    var $or_cond6 = $tobool2529 & $cmp2531;
    if ($or_cond6) {
      label = 679;
      break;
    } else {
      label = 680;
      break;
    }
   case 679:
    var $shr2534 = $194 >>> 2;
    var $and2535 = $shr2534 & 572662306;
    var $shl2536 = $194 << 2;
    var $and2537 = $shl2536 & -2004318072;
    var $or2538 = $and2535 | $and2537;
    var $shl2539 = $194 << 1;
    var $and2540 = $or2538 & $shl2539;
    var $or2541 = $and2540 | $194;
    HEAP32[5427632 >> 2] = $or2541;
    label = 680;
    break;
   case 680:
    var $196 = HEAP32[5403048 >> 2];
    var $cmp2543 = ($196 | 0) == -1;
    if ($cmp2543) {
      label = 681;
      break;
    } else {
      label = 683;
      break;
    }
   case 681:
    var $197 = HEAP32[5244028 >> 2];
    HEAP32[5403048 >> 2] = $197;
    var $cmp2547 = ($197 | 0) == -1;
    if ($cmp2547) {
      label = 682;
      break;
    } else {
      label = 683;
      break;
    }
   case 682:
    HEAP32[5403048 >> 2] = 0;
    label = 683;
    break;
   case 683:
    STACKTOP = __stackBase__;
    return;
  }
}
_identify["X"] = 1;
function _convert_to_rgb() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 244 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $out_cam = __stackBase__;
    var $inverse = __stackBase__ + 48;
    var $pbody = __stackBase__ + 120;
    var $0 = $pbody;
    for (var $$src = 5560604 >> 2, $$dest = $0 >> 2, $$stop = $$src + 31; $$src < $$stop; $$src++, $$dest++) {
      HEAP32[$$dest] = HEAP32[$$src];
    }
    var $1 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5398892 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5398896 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $2 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5398884 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5398888 >> 2], HEAPF64[tempDoublePtr >> 3]);
    _gamma_curve($1, $2, 0, 0);
    var $3 = $out_cam;
    for (var $$src = 5244964 >> 2, $$dest = $3 >> 2, $$stop = $$src + 12; $$src < $$stop; $$src++, $$dest++) {
      HEAP32[$$dest] = HEAP32[$$src];
    }
    var $4 = HEAP32[5560840 >> 2];
    var $cmp = ($4 | 0) == 1;
    var $5 = HEAP32[5427972 >> 2];
    var $tobool = ($5 | 0) != 0;
    var $or_cond = $cmp | $tobool;
    var $6 = HEAP32[5262936 >> 2];
    var $cmp2 = ($6 | 0) < 1;
    var $or_cond1 = $or_cond | $cmp2;
    if ($or_cond1) {
      var $7 = 1;
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $cmp3 = ($6 | 0) > 5;
    var $7 = $cmp3;
    label = 4;
    break;
   case 4:
    var $7;
    var $lor_ext = $7 & 1;
    var $8 = HEAP32[5245040 >> 2];
    var $or = $8 | $lor_ext;
    HEAP32[5245040 >> 2] = $or;
    var $tobool4 = ($or | 0) == 0;
    if ($tobool4) {
      label = 5;
      break;
    } else {
      var $48 = $6;
      label = 16;
      break;
    }
   case 5:
    var $call = _calloc(1024, 1);
    var $9 = $call;
    HEAP32[5262948 >> 2] = $9;
    _merror($call, 5576460);
    var $10 = HEAP32[5262948 >> 2];
    var $11 = $10;
    for (var $$src = 5560508 >> 2, $$dest = $11 >> 2, $$stop = $$src + 20; $$src < $$stop; $$src++, $$dest++) {
      HEAP32[$$dest] = HEAP32[$$src];
    }
    var $12 = HEAP32[5262936 >> 2];
    var $cmp5 = ($12 | 0) == 5;
    if ($cmp5) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    var $arrayidx7 = $10 + 16 | 0;
    HEAP32[$arrayidx7 >> 2] = 1482250784;
    label = 7;
    break;
   case 7:
    var $arrayidx8 = $pbody | 0;
    HEAP32[$10 >> 2] = 252;
    var $i_0102 = 0;
    var $13 = 252;
    label = 8;
    break;
   case 8:
    var $13;
    var $i_0102;
    var $tobool12 = ($i_0102 | 0) == 0;
    if ($tobool12) {
      var $cond14 = 1952807028;
      label = 10;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $cmp13 = ($i_0102 | 0) > 1;
    var $cond = $cmp13 ? 1482250784 : 1684370275;
    var $cond14 = $cond;
    label = 10;
    break;
   case 10:
    var $cond14;
    var $div = $13 >>> 2;
    var $arrayidx16 = $10 + ($div << 2) | 0;
    HEAP32[$arrayidx16 >> 2] = $cond14;
    var $14 = HEAP32[$10 >> 2];
    var $mul18 = $i_0102 * 3 & -1;
    var $add19 = $mul18 + 2 | 0;
    var $arrayidx20 = $pbody + ($add19 << 2) | 0;
    HEAP32[$arrayidx20 >> 2] = $14;
    var $add22 = $mul18 + 3 | 0;
    var $arrayidx23 = $pbody + ($add22 << 2) | 0;
    var $15 = HEAP32[$arrayidx23 >> 2];
    var $add24 = $15 + 3 | 0;
    var $and = $add24 & -4;
    var $16 = HEAP32[$10 >> 2];
    var $add26 = $16 + $and | 0;
    HEAP32[$10 >> 2] = $add26;
    var $inc = $i_0102 + 1 | 0;
    var $17 = HEAP32[$arrayidx8 >> 2];
    var $cmp11 = $inc >>> 0 < $17 >>> 0;
    if ($cmp11) {
      var $i_0102 = $inc;
      var $13 = $add26;
      label = 8;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $arrayidx30_phi_trans_insert = $pbody + 20 | 0;
    var $_pre = HEAP32[$arrayidx30_phi_trans_insert >> 2];
    var $arrayidx34_phi_trans_insert = $pbody + 32 | 0;
    var $_pre4 = HEAP32[$arrayidx34_phi_trans_insert >> 2];
    var $arrayidx47_phi_trans_insert = $pbody + 56 | 0;
    var $_pre5 = HEAP32[$arrayidx47_phi_trans_insert >> 2];
    var $arrayidx47_1_phi_trans_insert = $pbody + 68 | 0;
    var $_pre6 = HEAP32[$arrayidx47_1_phi_trans_insert >> 2];
    var $arrayidx47_2_phi_trans_insert = $pbody + 80 | 0;
    var $_pre7 = HEAP32[$arrayidx47_2_phi_trans_insert >> 2];
    var $arrayidx80_phi_trans_insert = $pbody + 92 | 0;
    var $_pre8 = HEAP32[$arrayidx80_phi_trans_insert >> 2];
    var $arrayidx80_1_phi_trans_insert = $pbody + 104 | 0;
    var $_pre9 = HEAP32[$arrayidx80_1_phi_trans_insert >> 2];
    var $arrayidx80_2_phi_trans_insert = $pbody + 116 | 0;
    var $_pre10 = HEAP32[$arrayidx80_2_phi_trans_insert >> 2];
    var $phitmp16 = $_pre >>> 2;
    var $phitmp17 = $phitmp16 + 2 | 0;
    var $phitmp18 = $_pre4 + 8 | 0;
    var $phitmp19 = $_pre8 >>> 2;
    var $phitmp20 = $_pre9 >>> 2;
    var $phitmp21 = $_pre10 >>> 2;
    var $add_ptr = $10 + 128 | 0;
    var $18 = $add_ptr;
    for (var $$src = $0 >> 2, $$dest = $18 >> 2, $$stop = $$src + 31; $$src < $$stop; $$src++, $$dest++) {
      HEAP32[$$dest] = HEAP32[$$src];
    }
    var $sub = $12 - 1 | 0;
    var $arrayidx27 = 5560748 + ($sub << 2) | 0;
    var $19 = HEAP32[$arrayidx27 >> 2];
    var $call28 = _strlen($19);
    var $add29 = $call28 + 1 | 0;
    var $arrayidx33 = $10 + ($phitmp17 << 2) | 0;
    HEAP32[$arrayidx33 >> 2] = $add29;
    var $add_ptr36 = $11 + $phitmp18 | 0;
    for (var $$src = 5560424, $$dest = $add_ptr36, $$stop = $$src + 12; $$src < $$stop; $$src++, $$dest++) {
      HEAP8[$$dest] = HEAP8[$$src];
    }
    var $20 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5398876 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5398880 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $div37 = 256 / $20;
    var $add38 = $div37 + .5;
    var $conv = $add38 & -1;
    var $conv3972 = $conv & 65535;
    var $shl = $conv3972 << 16;
    var $add_ptr48 = $11 + $_pre5 | 0;
    for (var $$src = 5560588, $$dest = $add_ptr48, $$stop = $$src + 12; $$src < $$stop; $$src++, $$dest++) {
      HEAP8[$$dest] = HEAP8[$$src];
    }
    var $add_ptr48_sum = $_pre5 + 12 | 0;
    var $pcurve_sroa_1_12_add_ptr48_idx = $11 + $add_ptr48_sum | 0;
    var $pcurve_sroa_1_12_add_ptr48_cast = $pcurve_sroa_1_12_add_ptr48_idx;
    tempBigInt = $shl;
    HEAP8[$pcurve_sroa_1_12_add_ptr48_cast] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$pcurve_sroa_1_12_add_ptr48_cast + 1] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$pcurve_sroa_1_12_add_ptr48_cast + 2] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$pcurve_sroa_1_12_add_ptr48_cast + 3] = tempBigInt & 255;
    var $add_ptr48_1 = $11 + $_pre6 | 0;
    for (var $$src = 5560588, $$dest = $add_ptr48_1, $$stop = $$src + 12; $$src < $$stop; $$src++, $$dest++) {
      HEAP8[$$dest] = HEAP8[$$src];
    }
    var $add_ptr48_sum_1 = $_pre6 + 12 | 0;
    var $pcurve_sroa_1_12_add_ptr48_idx_1 = $11 + $add_ptr48_sum_1 | 0;
    var $pcurve_sroa_1_12_add_ptr48_cast_1 = $pcurve_sroa_1_12_add_ptr48_idx_1;
    tempBigInt = $shl;
    HEAP8[$pcurve_sroa_1_12_add_ptr48_cast_1] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$pcurve_sroa_1_12_add_ptr48_cast_1 + 1] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$pcurve_sroa_1_12_add_ptr48_cast_1 + 2] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$pcurve_sroa_1_12_add_ptr48_cast_1 + 3] = tempBigInt & 255;
    var $add_ptr48_2 = $11 + $_pre7 | 0;
    for (var $$src = 5560588, $$dest = $add_ptr48_2, $$stop = $$src + 12; $$src < $$stop; $$src++, $$dest++) {
      HEAP8[$$dest] = HEAP8[$$src];
    }
    var $add_ptr48_sum_2 = $_pre7 + 12 | 0;
    var $pcurve_sroa_1_12_add_ptr48_idx_2 = $11 + $add_ptr48_sum_2 | 0;
    var $pcurve_sroa_1_12_add_ptr48_cast_2 = $pcurve_sroa_1_12_add_ptr48_idx_2;
    tempBigInt = $shl;
    HEAP8[$pcurve_sroa_1_12_add_ptr48_cast_2] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$pcurve_sroa_1_12_add_ptr48_cast_2 + 1] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$pcurve_sroa_1_12_add_ptr48_cast_2 + 2] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$pcurve_sroa_1_12_add_ptr48_cast_2 + 3] = tempBigInt & 255;
    var $arrayidx53 = 5560728 + ($sub << 2) | 0;
    var $21 = HEAP32[$arrayidx53 >> 2];
    var $arraydecay = $inverse | 0;
    _pseudoinverse($21, $arraydecay, 3);
    var $arrayidx69 = $inverse | 0;
    var $22 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx69 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx69 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx69_1 = $inverse + 8 | 0;
    var $23 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx69_1 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx69_1 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx69_2 = $inverse + 16 | 0;
    var $24 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx69_2 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx69_2 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx69_1120 = $inverse + 24 | 0;
    var $25 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx69_1120 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx69_1120 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx69_1_1 = $inverse + 32 | 0;
    var $26 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx69_1_1 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx69_1_1 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx69_2_1 = $inverse + 40 | 0;
    var $27 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx69_2_1 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx69_2_1 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx69_2123 = $inverse + 48 | 0;
    var $28 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx69_2123 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx69_2123 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx69_1_2 = $inverse + 56 | 0;
    var $29 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx69_1_2 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx69_1_2 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx69_2_2 = $inverse + 64 | 0;
    var $30 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx69_2_2 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx69_2_2 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $i_299 = 0;
    label = 47;
    break;
   case 12:
    var $31;
    var $i_395;
    var $arrayidx96 = $31 + ($i_395 << 2) | 0;
    var $32 = HEAP32[$arrayidx96 >> 2];
    var $call97 = _htonl($32);
    var $33 = HEAP32[5262948 >> 2];
    var $arrayidx98 = $33 + ($i_395 << 2) | 0;
    HEAP32[$arrayidx98 >> 2] = $call97;
    var $inc100 = $i_395 + 1 | 0;
    var $exitcond117 = ($inc100 | 0) == 256;
    if ($exitcond117) {
      label = 13;
      break;
    } else {
      var $i_395 = $inc100;
      var $31 = $33;
      label = 12;
      break;
    }
   case 13:
    var $34 = $33;
    var $arrayidx102 = $pbody + 8 | 0;
    var $35 = HEAP32[$arrayidx102 >> 2];
    var $add_ptr103_sum = $35 + 8 | 0;
    var $add_ptr104 = $34 + $add_ptr103_sum | 0;
    _memcpy($add_ptr104, 5576436, 24);
    var $36 = HEAP32[$arrayidx30_phi_trans_insert >> 2];
    var $add_ptr107_sum = $36 + 12 | 0;
    var $add_ptr108 = $34 + $add_ptr107_sum | 0;
    var $37 = HEAP32[5262936 >> 2];
    var $sub109 = $37 - 1 | 0;
    var $arrayidx110 = 5560748 + ($sub109 << 2) | 0;
    var $38 = HEAP32[$arrayidx110 >> 2];
    var $call111 = _strcpy($add_ptr108, $38);
    var $39 = HEAP32[5560840 >> 2];
    var $cmp11791 = ($39 | 0) > 0;
    var $40 = HEAP32[5262936 >> 2];
    if ($cmp11791) {
      label = 14;
      break;
    } else {
      var $48 = $40;
      label = 16;
      break;
    }
   case 14:
    var $sub126 = $40 - 1 | 0;
    var $arrayidx127 = 5560728 + ($sub126 << 2) | 0;
    var $41 = HEAP32[$arrayidx127 >> 2];
    var $arrayidx129 = $41 | 0;
    var $42 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx129 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx129 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx129_1 = $41 + 8 | 0;
    var $43 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx129_1 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx129_1 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx129_2 = $41 + 16 | 0;
    var $44 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx129_2 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx129_2 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $j_192 = 0;
    label = 15;
    break;
   case 15:
    var $j_192;
    var $arrayidx121 = $out_cam + ($j_192 << 2) | 0;
    var $arrayidx131 = 5244964 + ($j_192 << 2) | 0;
    var $45 = HEAPF32[$arrayidx131 >> 2];
    var $conv132 = $45;
    var $mul133 = $42 * $conv132;
    var $add137 = $mul133;
    var $conv138 = $add137;
    var $arrayidx131_1 = 5244980 + ($j_192 << 2) | 0;
    var $46 = HEAPF32[$arrayidx131_1 >> 2];
    var $conv132_1 = $46;
    var $mul133_1 = $43 * $conv132_1;
    var $conv136_1 = $conv138;
    var $add137_1 = $conv136_1 + $mul133_1;
    var $conv138_1 = $add137_1;
    var $arrayidx131_2 = 5244996 + ($j_192 << 2) | 0;
    var $47 = HEAPF32[$arrayidx131_2 >> 2];
    var $conv132_2 = $47;
    var $mul133_2 = $44 * $conv132_2;
    var $conv136_2 = $conv138_1;
    var $add137_2 = $conv136_2 + $mul133_2;
    var $conv138_2 = $add137_2;
    HEAPF32[$arrayidx121 >> 2] = $conv138_2;
    var $inc143 = $j_192 + 1 | 0;
    var $exitcond = ($inc143 | 0) == ($39 | 0);
    if ($exitcond) {
      label = 43;
      break;
    } else {
      var $j_192 = $inc143;
      label = 15;
      break;
    }
   case 16:
    var $48;
    var $_b = HEAP8[5243532];
    if ($_b) {
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 17:
    var $49 = HEAP32[_stderr >> 2];
    var $50 = HEAP32[5245040 >> 2];
    var $tobool151 = ($50 | 0) != 0;
    var $cond152 = $tobool151 ? 5576412 : 5576380;
    var $sub153 = $48 - 1 | 0;
    var $arrayidx154 = 5560748 + ($sub153 << 2) | 0;
    var $51 = HEAP32[$arrayidx154 >> 2];
    var $call155 = _fprintf($49, $cond152, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $51, tempInt));
    label = 18;
    break;
   case 18:
    for (var $$dest = 5267636 >> 2, $$stop = $$dest + 32768; $$dest < $$stop; $$dest++) {
      HEAP32[$$dest] = 0;
    }
    var $52 = HEAP16[5398712 >> 1];
    var $cmp16186 = $52 << 16 >> 16 == 0;
    if ($cmp16186) {
      label = 34;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $53 = HEAP32[5264108 >> 2];
    var $arraydecay158 = $53 | 0;
    var $_pre11 = HEAP16[5242964 >> 1];
    var $row_087 = 0;
    var $img_088 = $arraydecay158;
    var $54 = $_pre11;
    label = 20;
    break;
   case 20:
    var $54;
    var $img_088;
    var $row_087;
    var $cmp16681 = $54 << 16 >> 16 == 0;
    if ($cmp16681) {
      var $img_1_lcssa = $img_088;
      var $65 = 0;
      label = 33;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    var $_pre12 = HEAP32[5245040 >> 2];
    var $col_082 = 0;
    var $img_183 = $img_088;
    label = 22;
    break;
   case 22:
    var $img_183;
    var $col_082;
    var $tobool169 = ($_pre12 | 0) == 0;
    if ($tobool169) {
      label = 23;
      break;
    } else {
      label = 28;
      break;
    }
   case 23:
    var $55 = HEAP32[5560840 >> 2];
    var $cmp17575 = ($55 | 0) > 0;
    if ($cmp17575) {
      var $c_076 = 0;
      var $out_sroa_0_0 = 0;
      var $out_sroa_1_0 = 0;
      var $out_sroa_2_0 = 0;
      label = 24;
      break;
    } else {
      var $out_sroa_2_123 = 0;
      var $out_sroa_1_125 = 0;
      var $out_sroa_0_127 = 0;
      label = 26;
      break;
    }
   case 24:
    var $out_sroa_2_0;
    var $out_sroa_1_0;
    var $out_sroa_0_0;
    var $c_076;
    var $arrayidx179 = $out_cam + ($c_076 << 2) | 0;
    var $56 = HEAPF32[$arrayidx179 >> 2];
    var $arrayidx180 = $img_183 + ($c_076 << 1) | 0;
    var $57 = HEAP16[$arrayidx180 >> 1];
    var $conv181 = $57 & 65535;
    var $conv182 = $conv181 | 0;
    var $mul183 = $56 * $conv182;
    var $add185 = $out_sroa_0_0 + $mul183;
    var $arrayidx187 = $out_cam + 16 + ($c_076 << 2) | 0;
    var $58 = HEAPF32[$arrayidx187 >> 2];
    var $mul191 = $58 * $conv182;
    var $add193 = $out_sroa_1_0 + $mul191;
    var $arrayidx195 = $out_cam + 32 + ($c_076 << 2) | 0;
    var $59 = HEAPF32[$arrayidx195 >> 2];
    var $mul199 = $59 * $conv182;
    var $add201 = $out_sroa_2_0 + $mul199;
    var $inc203 = $c_076 + 1 | 0;
    var $cmp175 = ($inc203 | 0) < ($55 | 0);
    if ($cmp175) {
      var $c_076 = $inc203;
      var $out_sroa_0_0 = $add185;
      var $out_sroa_1_0 = $add193;
      var $out_sroa_2_0 = $add201;
      label = 24;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    var $phitmp13 = $add185 & -1;
    var $phitmp14 = $add193 & -1;
    var $phitmp15 = $add201 & -1;
    var $phitmp = ($phitmp13 | 0) < 0;
    if ($phitmp) {
      var $cond234 = 0;
      var $out_sroa_2_124 = $phitmp15;
      var $out_sroa_1_126 = $phitmp14;
      label = 27;
      break;
    } else {
      var $out_sroa_2_123 = $phitmp15;
      var $out_sroa_1_125 = $phitmp14;
      var $out_sroa_0_127 = $phitmp13;
      label = 26;
      break;
    }
   case 26:
    var $out_sroa_0_127;
    var $out_sroa_1_125;
    var $out_sroa_2_123;
    var $cmp211 = ($out_sroa_0_127 | 0) < 65535;
    var $phitmp74 = $out_sroa_0_127 & 65535;
    var $phitmp74_ = $cmp211 ? $phitmp74 : -1;
    var $cond234 = $phitmp74_;
    var $out_sroa_2_124 = $out_sroa_2_123;
    var $out_sroa_1_126 = $out_sroa_1_125;
    label = 27;
    break;
   case 27:
    var $out_sroa_1_126;
    var $out_sroa_2_124;
    var $cond234;
    HEAP16[$img_183 >> 1] = $cond234;
    var $phitmp_1 = ($out_sroa_1_126 | 0) < 0;
    if ($phitmp_1) {
      var $cond234_1 = 0;
      label = 40;
      break;
    } else {
      label = 39;
      break;
    }
   case 28:
    var $60 = HEAP32[5427972 >> 2];
    var $tobool240 = ($60 | 0) == 0;
    if ($tobool240) {
      label = 30;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    var $call242 = _fcol($row_087, $col_082);
    var $arrayidx243 = $img_183 + ($call242 << 1) | 0;
    var $61 = HEAP16[$arrayidx243 >> 1];
    HEAP16[$img_183 >> 1] = $61;
    label = 30;
    break;
   case 30:
    var $62 = HEAP32[5560840 >> 2];
    var $cmp24878 = ($62 | 0) > 0;
    if ($cmp24878) {
      var $c_279 = 0;
      label = 31;
      break;
    } else {
      label = 32;
      break;
    }
   case 31:
    var $c_279;
    var $arrayidx251 = $img_183 + ($c_279 << 1) | 0;
    var $63 = HEAP16[$arrayidx251 >> 1];
    var $conv252 = $63 & 65535;
    var $shr73 = $conv252 >>> 3;
    var $arrayidx254 = 5267636 + ($c_279 << 15) + ($shr73 << 2) | 0;
    var $64 = HEAP32[$arrayidx254 >> 2];
    var $inc255 = $64 + 1 | 0;
    HEAP32[$arrayidx254 >> 2] = $inc255;
    var $inc257 = $c_279 + 1 | 0;
    var $cmp248 = ($inc257 | 0) < ($62 | 0);
    if ($cmp248) {
      var $c_279 = $inc257;
      label = 31;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    var $inc260 = $col_082 + 1 | 0;
    var $add_ptr261 = $img_183 + 8 | 0;
    var $conv165 = $_pre11 & 65535;
    var $cmp166 = ($inc260 | 0) < ($conv165 | 0);
    if ($cmp166) {
      var $col_082 = $inc260;
      var $img_183 = $add_ptr261;
      label = 22;
      break;
    } else {
      var $img_1_lcssa = $add_ptr261;
      var $65 = $_pre11;
      label = 33;
      break;
    }
   case 33:
    var $65;
    var $img_1_lcssa;
    var $inc264 = $row_087 + 1 | 0;
    var $conv160 = $52 & 65535;
    var $cmp161 = ($inc264 | 0) < ($conv160 | 0);
    if ($cmp161) {
      var $row_087 = $inc264;
      var $img_088 = $img_1_lcssa;
      var $54 = $65;
      label = 20;
      break;
    } else {
      label = 34;
      break;
    }
   case 34:
    var $66 = HEAP32[5560840 >> 2];
    var $cmp266 = ($66 | 0) == 4;
    var $67 = HEAP32[5262936 >> 2];
    var $tobool268 = ($67 | 0) != 0;
    var $or_cond2 = $cmp266 & $tobool268;
    if ($or_cond2) {
      label = 35;
      break;
    } else {
      label = 36;
      break;
    }
   case 35:
    HEAP32[5560840 >> 2] = 3;
    label = 36;
    break;
   case 36:
    var $68 = HEAP32[5427972 >> 2];
    var $tobool271 = ($68 | 0) != 0;
    var $69 = HEAP32[5427632 >> 2];
    var $tobool273 = ($69 | 0) != 0;
    var $or_cond3 = $tobool271 & $tobool273;
    if ($or_cond3) {
      label = 37;
      break;
    } else {
      label = 38;
      break;
    }
   case 37:
    HEAP32[5560840 >> 2] = 1;
    label = 38;
    break;
   case 38:
    STACKTOP = __stackBase__;
    return;
   case 39:
    var $cmp211_1 = ($out_sroa_1_126 | 0) < 65535;
    var $phitmp74_1 = $out_sroa_1_126 & 65535;
    var $phitmp74__1 = $cmp211_1 ? $phitmp74_1 : -1;
    var $cond234_1 = $phitmp74__1;
    label = 40;
    break;
   case 40:
    var $cond234_1;
    var $arrayidx236_1 = $img_183 + 2 | 0;
    HEAP16[$arrayidx236_1 >> 1] = $cond234_1;
    var $phitmp_2 = ($out_sroa_2_124 | 0) < 0;
    if ($phitmp_2) {
      var $cond234_2 = 0;
      label = 42;
      break;
    } else {
      label = 41;
      break;
    }
   case 41:
    var $cmp211_2 = ($out_sroa_2_124 | 0) < 65535;
    var $phitmp74_2 = $out_sroa_2_124 & 65535;
    var $phitmp74__2 = $cmp211_2 ? $phitmp74_2 : -1;
    var $cond234_2 = $phitmp74__2;
    label = 42;
    break;
   case 42:
    var $cond234_2;
    var $arrayidx236_2 = $img_183 + 4 | 0;
    HEAP16[$arrayidx236_2 >> 1] = $cond234_2;
    label = 30;
    break;
   case 43:
    var $arrayidx129_1105 = $41 + 24 | 0;
    var $70 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx129_1105 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx129_1105 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx129_1_1 = $41 + 32 | 0;
    var $71 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx129_1_1 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx129_1_1 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx129_2_1 = $41 + 40 | 0;
    var $72 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx129_2_1 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx129_2_1 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $j_192_1 = 0;
    label = 44;
    break;
   case 44:
    var $j_192_1;
    var $arrayidx121_1 = $out_cam + 16 + ($j_192_1 << 2) | 0;
    var $arrayidx131_1106 = 5244964 + ($j_192_1 << 2) | 0;
    var $73 = HEAPF32[$arrayidx131_1106 >> 2];
    var $conv132_1107 = $73;
    var $mul133_1108 = $70 * $conv132_1107;
    var $add137_1109 = $mul133_1108;
    var $conv138_1110 = $add137_1109;
    var $arrayidx131_1_1 = 5244980 + ($j_192_1 << 2) | 0;
    var $74 = HEAPF32[$arrayidx131_1_1 >> 2];
    var $conv132_1_1 = $74;
    var $mul133_1_1 = $71 * $conv132_1_1;
    var $conv136_1_1 = $conv138_1110;
    var $add137_1_1 = $conv136_1_1 + $mul133_1_1;
    var $conv138_1_1 = $add137_1_1;
    var $arrayidx131_2_1 = 5244996 + ($j_192_1 << 2) | 0;
    var $75 = HEAPF32[$arrayidx131_2_1 >> 2];
    var $conv132_2_1 = $75;
    var $mul133_2_1 = $72 * $conv132_2_1;
    var $conv136_2_1 = $conv138_1_1;
    var $add137_2_1 = $conv136_2_1 + $mul133_2_1;
    var $conv138_2_1 = $add137_2_1;
    HEAPF32[$arrayidx121_1 >> 2] = $conv138_2_1;
    var $inc143_1 = $j_192_1 + 1 | 0;
    var $exitcond_1 = ($inc143_1 | 0) == ($39 | 0);
    if ($exitcond_1) {
      label = 45;
      break;
    } else {
      var $j_192_1 = $inc143_1;
      label = 44;
      break;
    }
   case 45:
    var $arrayidx129_2111 = $41 + 48 | 0;
    var $76 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx129_2111 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx129_2111 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx129_1_2 = $41 + 56 | 0;
    var $77 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx129_1_2 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx129_1_2 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $arrayidx129_2_2 = $41 + 64 | 0;
    var $78 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx129_2_2 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx129_2_2 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $j_192_2 = 0;
    label = 46;
    break;
   case 46:
    var $j_192_2;
    var $arrayidx121_2 = $out_cam + 32 + ($j_192_2 << 2) | 0;
    var $arrayidx131_2112 = 5244964 + ($j_192_2 << 2) | 0;
    var $79 = HEAPF32[$arrayidx131_2112 >> 2];
    var $conv132_2113 = $79;
    var $mul133_2114 = $76 * $conv132_2113;
    var $add137_2115 = $mul133_2114;
    var $conv138_2116 = $add137_2115;
    var $arrayidx131_1_2 = 5244980 + ($j_192_2 << 2) | 0;
    var $80 = HEAPF32[$arrayidx131_1_2 >> 2];
    var $conv132_1_2 = $80;
    var $mul133_1_2 = $77 * $conv132_1_2;
    var $conv136_1_2 = $conv138_2116;
    var $add137_1_2 = $conv136_1_2 + $mul133_1_2;
    var $conv138_1_2 = $add137_1_2;
    var $arrayidx131_2_2 = 5244996 + ($j_192_2 << 2) | 0;
    var $81 = HEAPF32[$arrayidx131_2_2 >> 2];
    var $conv132_2_2 = $81;
    var $mul133_2_2 = $78 * $conv132_2_2;
    var $conv136_2_2 = $conv138_1_2;
    var $add137_2_2 = $conv136_2_2 + $mul133_2_2;
    var $conv138_2_2 = $add137_2_2;
    HEAPF32[$arrayidx121_2 >> 2] = $conv138_2_2;
    var $inc143_2 = $j_192_2 + 1 | 0;
    var $exitcond_2 = ($inc143_2 | 0) == ($39 | 0);
    if ($exitcond_2) {
      var $48 = $40;
      label = 16;
      break;
    } else {
      var $j_192_2 = $inc143_2;
      label = 46;
      break;
    }
   case 47:
    var $i_299;
    var $add82 = $i_299 + 2 | 0;
    var $arrayidx67 = 5560208 + $i_299 * 24 | 0;
    var $82 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx67 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx67 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul70 = $82 * $22;
    var $add71 = $mul70;
    var $arrayidx67_1 = 5560216 + $i_299 * 24 | 0;
    var $83 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx67_1 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx67_1 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul70_1 = $83 * $23;
    var $add71_1 = $add71 + $mul70_1;
    var $arrayidx67_2 = 5560224 + $i_299 * 24 | 0;
    var $84 = (HEAP32[tempDoublePtr >> 2] = HEAP32[$arrayidx67_2 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arrayidx67_2 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $mul70_2 = $84 * $24;
    var $add71_2 = $add71_1 + $mul70_2;
    var $mul75 = $add71_2 * 65536;
    var $add76 = $mul75 + .5;
    var $conv77 = $add76 >= 0 ? Math.floor($add76) : Math.ceil($add76);
    var $add83 = $add82 + $phitmp19 | 0;
    var $arrayidx84 = $10 + ($add83 << 2) | 0;
    HEAP32[$arrayidx84 >> 2] = $conv77;
    var $mul70_1121 = $82 * $25;
    var $add71_1122 = $mul70_1121;
    var $mul70_1_1 = $83 * $26;
    var $add71_1_1 = $add71_1122 + $mul70_1_1;
    var $mul70_2_1 = $84 * $27;
    var $add71_2_1 = $add71_1_1 + $mul70_2_1;
    var $mul75_1 = $add71_2_1 * 65536;
    var $add76_1 = $mul75_1 + .5;
    var $conv77_1 = $add76_1 >= 0 ? Math.floor($add76_1) : Math.ceil($add76_1);
    var $add83_1 = $add82 + $phitmp20 | 0;
    var $arrayidx84_1 = $10 + ($add83_1 << 2) | 0;
    HEAP32[$arrayidx84_1 >> 2] = $conv77_1;
    var $mul70_2124 = $82 * $28;
    var $add71_2125 = $mul70_2124;
    var $mul70_1_2 = $83 * $29;
    var $add71_1_2 = $add71_2125 + $mul70_1_2;
    var $mul70_2_2 = $84 * $30;
    var $add71_2_2 = $add71_1_2 + $mul70_2_2;
    var $mul75_2 = $add71_2_2 * 65536;
    var $add76_2 = $mul75_2 + .5;
    var $conv77_2 = $add76_2 >= 0 ? Math.floor($add76_2) : Math.ceil($add76_2);
    var $add83_2 = $add82 + $phitmp21 | 0;
    var $arrayidx84_2 = $10 + ($add83_2 << 2) | 0;
    HEAP32[$arrayidx84_2 >> 2] = $conv77_2;
    var $inc89 = $i_299 + 1 | 0;
    var $exitcond126 = ($inc89 | 0) == 3;
    if ($exitcond126) {
      var $i_395 = 0;
      var $31 = $10;
      label = 12;
      break;
    } else {
      var $i_299 = $inc89;
      label = 47;
      break;
    }
  }
}
_convert_to_rgb["X"] = 1;
function _fuji_rotate() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP16[5398900 >> 1];
    var $tobool = $0 << 16 >> 16 == 0;
    if ($tobool) {
      label = 17;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $_b = HEAP8[5243532];
    if ($_b) {
      label = 4;
      break;
    } else {
      var $3 = $0;
      label = 5;
      break;
    }
   case 4:
    var $1 = HEAP32[_stderr >> 2];
    var $2 = _fwrite(5576348, 29, 1, $1);
    var $_pre = HEAP16[5398900 >> 1];
    var $3 = $_pre;
    label = 5;
    break;
   case 5:
    var $3;
    var $conv = $3 & 65535;
    var $sub = $conv - 1 | 0;
    var $4 = HEAP16[5244916 >> 1];
    var $conv4 = $4 & 65535;
    var $add = $sub + $conv4 | 0;
    var $shr = $add >> $conv4;
    var $conv6 = $shr & 65535;
    HEAP16[5398900 >> 1] = $conv6;
    var $conv8 = $shr & 65535;
    var $conv9 = $conv8 | 0;
    var $div = $conv9 / .7071067811865476;
    var $conv10 = $div >= 0 ? Math.floor($div) : Math.ceil($div);
    var $5 = HEAP16[5398712 >> 1];
    var $conv11 = $5 & 65535;
    var $sub13 = $conv11 - $conv8 | 0;
    var $conv14 = $sub13 | 0;
    var $div15 = $conv14 / .7071067811865476;
    var $conv16 = $div15 >= 0 ? Math.floor($div15) : Math.ceil($div15);
    var $conv17 = $conv10 & 65535;
    var $conv18 = $conv16 & 65535;
    var $mul = $conv18 * $conv17 & -1;
    var $call19 = _calloc($mul, 8);
    var $6 = $call19;
    _merror($call19, 5576308);
    var $cmp43 = $conv16 << 16 >> 16 == 0;
    if ($cmp43) {
      label = 16;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $cmp2440 = $conv10 << 16 >> 16 == 0;
    var $row_044 = 0;
    label = 7;
    break;
   case 7:
    var $row_044;
    if ($cmp2440) {
      label = 15;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $mul92 = $row_044 * $conv17 & -1;
    var $_pre1 = HEAP16[5398900 >> 1];
    var $_pre2 = HEAP16[5398712 >> 1];
    var $col_041 = 0;
    label = 9;
    break;
   case 9:
    var $col_041;
    var $conv27 = $_pre1 & 65535;
    var $conv28 = $conv27 | 0;
    var $sub29 = $row_044 - $col_041 | 0;
    var $conv30 = $sub29 | 0;
    var $mul31 = $conv30 * .7071067811865476;
    var $add32 = $mul31 + $conv28;
    var $conv33 = $add32;
    var $conv34 = $conv33 >= 0 ? Math.floor($conv33) : Math.ceil($conv33);
    var $add35 = $col_041 + $row_044 | 0;
    var $conv36 = $add35 | 0;
    var $mul37 = $conv36 * .7071067811865476;
    var $conv38 = $mul37;
    var $conv39 = $conv38 >= 0 ? Math.floor($conv38) : Math.ceil($conv38);
    var $conv40 = $_pre2 & 65535;
    var $sub41 = $conv40 - 2 | 0;
    var $cmp42 = $conv34 >>> 0 > $sub41 >>> 0;
    if ($cmp42) {
      label = 14;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $7 = HEAP16[5242964 >> 1];
    var $conv44 = $7 & 65535;
    var $sub45 = $conv44 - 2 | 0;
    var $cmp46 = $conv39 >>> 0 > $sub45 >>> 0;
    if ($cmp46) {
      label = 14;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $conv50 = $conv34 >>> 0;
    var $sub51 = $conv33 - $conv50;
    var $conv52 = $conv39 >>> 0;
    var $sub53 = $conv38 - $conv52;
    var $8 = HEAP32[5264108 >> 2];
    var $mul55 = $conv44 * $conv34 & -1;
    var $add_ptr_sum = $mul55 + $conv39 | 0;
    var $9 = HEAP32[5560840 >> 2];
    var $cmp5838 = ($9 | 0) > 0;
    if ($cmp5838) {
      label = 12;
      break;
    } else {
      label = 14;
      break;
    }
   case 12:
    var $sub64 = 1 - $sub53;
    var $add_ptr56_sum = $add_ptr_sum + 1 | 0;
    var $sub72 = 1 - $sub51;
    var $add93 = $col_041 + $mul92 | 0;
    var $i_039 = 0;
    label = 13;
    break;
   case 13:
    var $i_039;
    var $arrayidx61 = $8 + ($add_ptr_sum << 3) + ($i_039 << 1) | 0;
    var $10 = HEAP16[$arrayidx61 >> 1];
    var $conv62 = $10 & 65535;
    var $conv63 = $conv62 | 0;
    var $mul65 = $sub64 * $conv63;
    var $arrayidx67 = $8 + ($add_ptr56_sum << 3) + ($i_039 << 1) | 0;
    var $11 = HEAP16[$arrayidx67 >> 1];
    var $conv68 = $11 & 65535;
    var $conv69 = $conv68 | 0;
    var $mul70 = $sub53 * $conv69;
    var $add71 = $mul65 + $mul70;
    var $mul73 = $sub72 * $add71;
    var $add_ptr56_sum36 = $conv44 + $add_ptr_sum | 0;
    var $arrayidx75 = $8 + ($add_ptr56_sum36 << 3) + ($i_039 << 1) | 0;
    var $12 = HEAP16[$arrayidx75 >> 1];
    var $conv76 = $12 & 65535;
    var $conv77 = $conv76 | 0;
    var $mul79 = $sub64 * $conv77;
    var $add_ptr56_sum37 = $add_ptr56_sum + $conv44 | 0;
    var $arrayidx83 = $8 + ($add_ptr56_sum37 << 3) + ($i_039 << 1) | 0;
    var $13 = HEAP16[$arrayidx83 >> 1];
    var $conv84 = $13 & 65535;
    var $conv85 = $conv84 | 0;
    var $mul86 = $sub53 * $conv85;
    var $add87 = $mul79 + $mul86;
    var $mul88 = $sub51 * $add87;
    var $add89 = $mul73 + $mul88;
    var $conv90 = $add89 >= 0 ? Math.floor($add89) : Math.ceil($add89);
    var $arrayidx95 = $6 + ($add93 << 3) + ($i_039 << 1) | 0;
    HEAP16[$arrayidx95 >> 1] = $conv90;
    var $inc = $i_039 + 1 | 0;
    var $cmp58 = ($inc | 0) < ($9 | 0);
    if ($cmp58) {
      var $i_039 = $inc;
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $inc97 = $col_041 + 1 | 0;
    var $cmp24 = ($inc97 | 0) < ($conv17 | 0);
    if ($cmp24) {
      var $col_041 = $inc97;
      label = 9;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $inc100 = $row_044 + 1 | 0;
    var $cmp = ($inc100 | 0) < ($conv18 | 0);
    if ($cmp) {
      var $row_044 = $inc100;
      label = 7;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $14 = HEAP32[5264108 >> 2];
    var $15 = $14;
    _free($15);
    HEAP16[5242964 >> 1] = $conv10;
    HEAP16[5398712 >> 1] = $conv16;
    HEAP32[5264108 >> 2] = $6;
    HEAP16[5398900 >> 1] = 0;
    label = 17;
    break;
   case 17:
    return;
  }
}
_fuji_rotate["X"] = 1;
function _flip_index($row, $col) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5403048 >> 2];
    var $and = $0 & 4;
    var $tobool = ($and | 0) == 0;
    var $row_col = $tobool ? $row : $col;
    var $col_row = $tobool ? $col : $row;
    var $and2 = $0 & 2;
    var $tobool3 = ($and2 | 0) == 0;
    if ($tobool3) {
      var $row_addr_1 = $row_col;
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $1 = HEAP16[5264112 >> 1];
    var $conv = $1 & 65535;
    var $sub5 = $row_col ^ -1;
    var $sub6 = $conv + $sub5 | 0;
    var $row_addr_1 = $sub6;
    label = 4;
    break;
   case 4:
    var $row_addr_1;
    var $and8 = $0 & 1;
    var $tobool9 = ($and8 | 0) == 0;
    var $_pre = HEAP16[5264092 >> 1];
    if ($tobool9) {
      var $col_addr_1 = $col_row;
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $conv11 = $_pre & 65535;
    var $sub12 = $col_row ^ -1;
    var $sub13 = $conv11 + $sub12 | 0;
    var $col_addr_1 = $sub13;
    label = 6;
    break;
   case 6:
    var $col_addr_1;
    var $conv15 = $_pre & 65535;
    var $mul = $conv15 * $row_addr_1 & -1;
    var $add16 = $mul + $col_addr_1 | 0;
    return $add16;
  }
}
function _tiff_set($ntag, $tag, $type, $count, $val) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $add_ptr = $ntag + 2 | 0;
    var $0 = $add_ptr;
    var $1 = HEAP16[$ntag >> 1];
    var $inc = $1 + 1 & 65535;
    HEAP16[$ntag >> 1] = $inc;
    var $conv = $1 & 65535;
    var $tag2 = $0 + $conv * 12 | 0;
    HEAP16[$tag2 >> 1] = $tag;
    var $type3 = $0 + $conv * 12 + 2 | 0;
    HEAP16[$type3 >> 1] = $type;
    var $count4 = $0 + $conv * 12 + 4 | 0;
    HEAP32[$count4 >> 2] = $count;
    var $cmp = ($type & 65535) < 3;
    var $cmp7 = ($count | 0) < 5;
    var $or_cond = $cmp & $cmp7;
    if ($or_cond) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    var $val12 = $0 + $conv * 12 + 8 | 0;
    var $c13 = $val12;
    var $conv11 = $val & 255;
    var $arrayidx = $val12;
    HEAP8[$arrayidx] = $conv11;
    var $shr_125 = $val >>> 8;
    var $conv11_1 = $shr_125 & 255;
    var $arrayidx_1 = $c13 + 1 | 0;
    HEAP8[$arrayidx_1] = $conv11_1;
    var $shr_226 = $val >>> 16;
    var $conv11_2 = $shr_226 & 255;
    var $arrayidx_2 = $c13 + 2 | 0;
    HEAP8[$arrayidx_2] = $conv11_2;
    var $shr_327 = $val >>> 24;
    var $conv11_3 = $shr_327 & 255;
    var $arrayidx_3 = $c13 + 3 | 0;
    HEAP8[$arrayidx_3] = $conv11_3;
    label = 7;
    break;
   case 4:
    var $cmp16 = $type << 16 >> 16 == 3;
    var $cmp19 = ($count | 0) < 3;
    var $or_cond20 = $cmp16 & $cmp19;
    if ($or_cond20) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    var $val29 = $0 + $conv * 12 + 8 | 0;
    var $s = $val29;
    var $conv28 = $val & 65535;
    var $arrayidx30 = $val29;
    HEAP16[$arrayidx30 >> 1] = $conv28;
    var $shr27_124 = $val >>> 16;
    var $conv28_1 = $shr27_124 & 65535;
    var $arrayidx30_1 = $s + 2 | 0;
    HEAP16[$arrayidx30_1 >> 1] = $conv28_1;
    label = 7;
    break;
   case 6:
    var $i = $0 + $conv * 12 + 8 | 0;
    HEAP32[$i >> 2] = $val;
    label = 7;
    break;
   case 7:
    return;
  }
}



_tiff_set["X"] = 1;
function _stretch() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5245656 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5245660 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $cmp = $0 == 1;
    if ($cmp) {
      label = 31;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $_b = HEAP8[5243532];
    if ($_b) {
      label = 4;
      break;
    } else {
      var $3 = $0;
      label = 5;
      break;
    }
   case 4:
    var $1 = HEAP32[_stderr >> 2];
    var $2 = _fwrite(5576280, 24, 1, $1);
    var $_pre = (HEAP32[tempDoublePtr >> 2] = HEAP32[5245656 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5245660 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $3 = $_pre;
    label = 5;
    break;
   case 5:
    var $3;
    var $cmp3 = $3 < 1;
    if ($cmp3) {
      label = 6;
      break;
    } else {
      label = 18;
      break;
    }
   case 6:
    var $4 = HEAP16[5398712 >> 1];
    var $conv = $4 & 65535;
    var $conv5 = $conv | 0;
    var $div = $conv5 / $3;
    var $add = $div + .5;
    var $conv6 = $add >= 0 ? Math.floor($add) : Math.ceil($add);
    var $5 = HEAP16[5242964 >> 1];
    var $conv7 = $5 & 65535;
    var $conv8 = $conv6 & 65535;
    var $mul = $conv8 * $conv7 & -1;
    var $call9 = _calloc($mul, 8);
    var $6 = $call9;
    _merror($call9, 5576268);
    var $cmp1157 = $conv6 << 16 >> 16 == 0;
    if ($cmp1157) {
      label = 17;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $_pre1 = HEAP16[5242964 >> 1];
    var $_pre2 = HEAP32[5264108 >> 2];
    var $_pre3 = HEAP16[5398712 >> 1];
    var $row_058 = 0;
    var $rc_060 = 0;
    var $7 = $_pre1;
    label = 8;
    break;
   case 8:
    var $7;
    var $rc_060;
    var $row_058;
    var $conv13 = $rc_060 & -1;
    var $conv14 = $conv13 | 0;
    var $sub = $rc_060 - $conv14;
    var $conv15 = $7 & 65535;
    var $mul16 = $conv15 * $conv13 & -1;
    var $arraydecay = $_pre2 + ($mul16 << 3) | 0;
    var $add17 = $conv13 + 1 | 0;
    var $conv18 = $_pre3 & 65535;
    var $cmp19 = ($add17 | 0) < ($conv18 | 0);
    if ($cmp19) {
      label = 9;
      break;
    } else {
      var $pix1_1_ph = $arraydecay;
      label = 10;
      break;
    }
   case 9:
    var $mul23 = $conv15 << 2;
    var $add_ptr = $_pre2 + ($mul16 << 3) + ($mul23 << 1) | 0;
    var $pix1_1_ph = $add_ptr;
    label = 10;
    break;
   case 10:
    var $pix1_1_ph;
    var $cmp2753 = $7 << 16 >> 16 == 0;
    if ($cmp2753) {
      var $10 = 0;
      label = 16;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    var $sub37 = 1 - $sub;
    var $_pre4 = HEAP32[5560840 >> 2];
    var $pix0_054 = $arraydecay;
    var $pix1_155 = $pix1_1_ph;
    var $col_056 = 0;
    label = 12;
    break;
   case 12:
    var $col_056;
    var $pix1_155;
    var $pix0_054;
    var $cmp3150 = ($_pre4 | 0) > 0;
    if ($cmp3150) {
      var $c_051 = 0;
      label = 14;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $conv26_pre = $_pre1 & 65535;
    var $conv26_pre_phi = $conv26_pre;
    label = 15;
    break;
   case 14:
    var $c_051;
    var $arrayidx34 = $pix0_054 + ($c_051 << 1) | 0;
    var $8 = HEAP16[$arrayidx34 >> 1];
    var $conv35 = $8 & 65535;
    var $conv36 = $conv35 | 0;
    var $mul38 = $sub37 * $conv36;
    var $arrayidx39 = $pix1_155 + ($c_051 << 1) | 0;
    var $9 = HEAP16[$arrayidx39 >> 1];
    var $conv40 = $9 & 65535;
    var $conv41 = $conv40 | 0;
    var $mul42 = $sub * $conv41;
    var $add43 = $mul38 + $mul42;
    var $add44 = $add43 + .5;
    var $conv45 = $add44 >= 0 ? Math.floor($add44) : Math.ceil($add44);
    var $conv46 = $_pre1 & 65535;
    var $mul47 = $conv46 * $row_058 & -1;
    var $add48 = $mul47 + $col_056 | 0;
    var $arrayidx50 = $6 + ($add48 << 3) + ($c_051 << 1) | 0;
    HEAP16[$arrayidx50 >> 1] = $conv45;
    var $inc = $c_051 + 1 | 0;
    var $cmp31 = ($inc | 0) < ($_pre4 | 0);
    if ($cmp31) {
      var $c_051 = $inc;
      label = 14;
      break;
    } else {
      var $conv26_pre_phi = $conv46;
      label = 15;
      break;
    }
   case 15:
    var $conv26_pre_phi;
    var $inc52 = $col_056 + 1 | 0;
    var $add_ptr53 = $pix0_054 + 8 | 0;
    var $add_ptr54 = $pix1_155 + 8 | 0;
    var $cmp27 = ($inc52 | 0) < ($conv26_pre_phi | 0);
    if ($cmp27) {
      var $pix0_054 = $add_ptr53;
      var $pix1_155 = $add_ptr54;
      var $col_056 = $inc52;
      label = 12;
      break;
    } else {
      var $10 = $_pre1;
      label = 16;
      break;
    }
   case 16:
    var $10;
    var $inc57 = $row_058 + 1 | 0;
    var $11 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5245656 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5245660 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $add58 = $rc_060 + $11;
    var $cmp11 = ($inc57 | 0) < ($conv8 | 0);
    if ($cmp11) {
      var $row_058 = $inc57;
      var $rc_060 = $add58;
      var $7 = $10;
      label = 8;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    HEAP16[5398712 >> 1] = $conv6;
    var $img_0 = $6;
    label = 30;
    break;
   case 18:
    var $12 = HEAP16[5242964 >> 1];
    var $conv60 = $12 & 65535;
    var $conv61 = $conv60 | 0;
    var $mul62 = $3 * $conv61;
    var $add63 = $mul62 + .5;
    var $conv64 = $add63 >= 0 ? Math.floor($add63) : Math.ceil($add63);
    var $13 = HEAP16[5398712 >> 1];
    var $conv65 = $13 & 65535;
    var $conv66 = $conv64 & 65535;
    var $mul67 = $conv66 * $conv65 & -1;
    var $call68 = _calloc($mul67, 8);
    var $14 = $call68;
    _merror($call68, 5576268);
    var $cmp7168 = $conv64 << 16 >> 16 == 0;
    if ($cmp7168) {
      label = 29;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $_pre5 = HEAP32[5264108 >> 2];
    var $_pre6 = HEAP16[5242964 >> 1];
    var $col_169 = 0;
    var $rc_170 = 0;
    label = 20;
    break;
   case 20:
    var $rc_170;
    var $col_169;
    var $conv74 = $rc_170 & -1;
    var $conv75 = $conv74 | 0;
    var $sub76 = $rc_170 - $conv75;
    var $arraydecay78 = $_pre5 + ($conv74 << 3) | 0;
    var $add79 = $conv74 + 1 | 0;
    var $conv80 = $_pre6 & 65535;
    var $cmp81 = ($add79 | 0) < ($conv80 | 0);
    if ($cmp81) {
      label = 21;
      break;
    } else {
      var $pix1_3_ph = $arraydecay78;
      label = 22;
      break;
    }
   case 21:
    var $add_ptr84 = $_pre5 + ($conv74 << 3) + 8 | 0;
    var $pix1_3_ph = $add_ptr84;
    label = 22;
    break;
   case 22:
    var $pix1_3_ph;
    var $15 = HEAP16[5398712 >> 1];
    var $cmp8864 = $15 << 16 >> 16 == 0;
    if ($cmp8864) {
      label = 28;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    var $sub98 = 1 - $sub76;
    var $_pre7 = HEAP32[5560840 >> 2];
    var $pix0_165 = $arraydecay78;
    var $pix1_366 = $pix1_3_ph;
    var $row_167 = 0;
    label = 24;
    break;
   case 24:
    var $row_167;
    var $pix1_366;
    var $pix0_165;
    var $cmp9261 = ($_pre7 | 0) > 0;
    if ($cmp9261) {
      label = 25;
      break;
    } else {
      label = 27;
      break;
    }
   case 25:
    var $mul108 = $row_167 * $conv66 & -1;
    var $add109 = $mul108 + $col_169 | 0;
    var $c_162 = 0;
    label = 26;
    break;
   case 26:
    var $c_162;
    var $arrayidx95 = $pix0_165 + ($c_162 << 1) | 0;
    var $16 = HEAP16[$arrayidx95 >> 1];
    var $conv96 = $16 & 65535;
    var $conv97 = $conv96 | 0;
    var $mul99 = $sub98 * $conv97;
    var $arrayidx100 = $pix1_366 + ($c_162 << 1) | 0;
    var $17 = HEAP16[$arrayidx100 >> 1];
    var $conv101 = $17 & 65535;
    var $conv102 = $conv101 | 0;
    var $mul103 = $sub76 * $conv102;
    var $add104 = $mul99 + $mul103;
    var $add105 = $add104 + .5;
    var $conv106 = $add105 >= 0 ? Math.floor($add105) : Math.ceil($add105);
    var $arrayidx111 = $14 + ($add109 << 3) + ($c_162 << 1) | 0;
    HEAP16[$arrayidx111 >> 1] = $conv106;
    var $inc113 = $c_162 + 1 | 0;
    var $cmp92 = ($inc113 | 0) < ($_pre7 | 0);
    if ($cmp92) {
      var $c_162 = $inc113;
      label = 26;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    var $inc116 = $row_167 + 1 | 0;
    var $mul118 = $conv80 << 2;
    var $add_ptr119 = $pix0_165 + ($mul118 << 1) | 0;
    var $add_ptr122 = $pix1_366 + ($mul118 << 1) | 0;
    var $conv87 = $15 & 65535;
    var $cmp88 = ($inc116 | 0) < ($conv87 | 0);
    if ($cmp88) {
      var $pix0_165 = $add_ptr119;
      var $pix1_366 = $add_ptr122;
      var $row_167 = $inc116;
      label = 24;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    var $inc125 = $col_169 + 1 | 0;
    var $18 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5245656 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5245660 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $div126 = 1 / $18;
    var $add127 = $rc_170 + $div126;
    var $cmp71 = ($inc125 | 0) < ($conv66 | 0);
    if ($cmp71) {
      var $col_169 = $inc125;
      var $rc_170 = $add127;
      label = 20;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    HEAP16[5242964 >> 1] = $conv64;
    var $img_0 = $14;
    label = 30;
    break;
   case 30:
    var $img_0;
    var $19 = HEAP32[5264108 >> 2];
    var $20 = $19;
    _free($20);
    HEAP32[5264108 >> 2] = $img_0;
    label = 31;
    break;
   case 31:
    return;
  }
}
_stretch["X"] = 1;
function _tiff_head($th, $full) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = $th;
    for (var $$dest = $0 >> 2, $$stop = $$dest + 344; $$dest < $$stop; $$dest++) {
      HEAP32[$$dest] = 0;
    }
    var $call = _htonl(1296910665);
    var $shr113 = $call >>> 16;
    var $conv = $shr113 & 65535;
    var $order = $th | 0;
    HEAP16[$order >> 1] = $conv;
    var $magic = $th + 2 | 0;
    HEAP16[$magic >> 1] = 42;
    var $ifd = $th + 4 | 0;
    HEAP32[$ifd >> 2] = 10;
    var $tobool = ($full | 0) != 0;
    var $ntag = $th + 10 | 0;
    if ($tobool) {
      label = 3;
      break;
    } else {
      var $ntag20_pre_phi = $ntag;
      label = 6;
      break;
    }
   case 3:
    _tiff_set($ntag, 254, 4, 1, 0);
    var $1 = HEAP16[5242964 >> 1];
    var $conv2 = $1 & 65535;
    _tiff_set($ntag, 256, 4, 1, $conv2);
    var $2 = HEAP16[5398712 >> 1];
    var $conv4 = $2 & 65535;
    _tiff_set($ntag, 257, 4, 1, $conv4);
    var $3 = HEAP32[5560840 >> 2];
    var $_b5 = HEAP8[5262940];
    var $4 = $_b5 ? 16 : 8;
    _tiff_set($ntag, 258, 3, $3, $4);
    var $cmp = ($3 | 0) > 2;
    if ($cmp) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    var $5 = HEAP16[$ntag >> 1];
    var $conv9 = $5 & 65535;
    var $sub = $conv9 - 1 | 0;
    var $i = $th + 12 + $sub * 12 + 8 | 0;
    HEAP32[$i >> 2] = 468;
    label = 5;
    break;
   case 5:
    var $conv12 = $_b5 ? 16 : 8;
    var $arrayidx14 = $th + 468 | 0;
    HEAP16[$arrayidx14 >> 1] = $conv12;
    var $arrayidx14_1 = $th + 470 | 0;
    HEAP16[$arrayidx14_1 >> 1] = $conv12;
    var $arrayidx14_2 = $th + 472 | 0;
    HEAP16[$arrayidx14_2 >> 1] = $conv12;
    var $arrayidx14_3 = $th + 474 | 0;
    HEAP16[$arrayidx14_3 >> 1] = $conv12;
    _tiff_set($ntag, 259, 3, 1, 1);
    var $cmp17 = ($3 | 0) > 1;
    var $add = $cmp17 ? 2 : 1;
    _tiff_set($ntag, 262, 3, 1, $add);
    var $ntag20_pre_phi = $ntag;
    label = 6;
    break;
   case 6:
    var $ntag20_pre_phi;
    _tiff_set($ntag20_pre_phi, 270, 2, 512, 620);
    _tiff_set($ntag20_pre_phi, 271, 2, 64, 1132);
    _tiff_set($ntag20_pre_phi, 272, 2, 64, 1196);
    if ($tobool) {
      label = 7;
      break;
    } else {
      label = 10;
      break;
    }
   case 7:
    var $6 = HEAP32[5262948 >> 2];
    var $tobool34 = ($6 | 0) == 0;
    if ($tobool34) {
      var $psize_0 = 0;
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $7 = HEAP32[$6 >> 2];
    var $call37 = _htonl($7);
    var $psize_0 = $call37;
    label = 9;
    break;
   case 9:
    var $psize_0;
    var $add40 = $psize_0 + 1376 | 0;
    _tiff_set($ntag20_pre_phi, 273, 4, 1, $add40);
    var $8 = HEAP32[5560840 >> 2];
    _tiff_set($ntag20_pre_phi, 277, 3, 1, $8);
    var $9 = HEAP16[5398712 >> 1];
    var $conv43 = $9 & 65535;
    _tiff_set($ntag20_pre_phi, 278, 4, 1, $conv43);
    var $10 = HEAP16[5242964 >> 1];
    var $conv46 = $10 & 65535;
    var $mul = $conv46 * $conv43 & -1;
    var $mul47 = $mul * $8 & -1;
    var $_b = HEAP8[5262940];
    var $11 = $_b ? 16 : 8;
    var $mul48 = $mul47 * $11 & -1;
    var $div = ($mul48 | 0) / 8 & -1;
    _tiff_set($ntag20_pre_phi, 279, 4, 1, $div);
    var $psize_1 = $psize_0;
    label = 11;
    break;
   case 10:
    var $12 = HEAP32[5403048 >> 2];
    var $arrayidx50 = $12 + 5576256 | 0;
    var $13 = HEAP8[$arrayidx50];
    var $conv51 = $13 << 24 >> 24;
    var $sub52 = $conv51 - 48 | 0;
    _tiff_set($ntag20_pre_phi, 274, 3, 1, $sub52);
    var $psize_1 = 0;
    label = 11;
    break;
   case 11:
    var $psize_1;
    var $arrayidx55 = $th + 476 | 0;
    _tiff_set($ntag20_pre_phi, 282, 5, 1, 476);
    var $arrayidx61 = $th + 484 | 0;
    _tiff_set($ntag20_pre_phi, 283, 5, 1, 484);
    _tiff_set($ntag20_pre_phi, 284, 3, 1, 1);
    _tiff_set($ntag20_pre_phi, 296, 3, 1, 2);
    _tiff_set($ntag20_pre_phi, 305, 2, 32, 1260);
    _tiff_set($ntag20_pre_phi, 306, 2, 20, 1292);
    _tiff_set($ntag20_pre_phi, 315, 2, 64, 1312);
    var $nexif = $th + 294 | 0;
    _tiff_set($ntag20_pre_phi, -30871, 4, 1, 294);
    var $tobool83 = ($psize_1 | 0) == 0;
    if ($tobool83) {
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    _tiff_set($ntag20_pre_phi, -30861, 7, $psize_1, 1376);
    label = 13;
    break;
   case 13:
    var $arrayidx89 = $th + 492 | 0;
    _tiff_set($nexif, -32102, 5, 1, 492);
    var $arrayidx95 = $th + 500 | 0;
    _tiff_set($nexif, -32099, 5, 1, 500);
    var $14 = HEAPF32[5264096 >> 2];
    var $conv100 = $14 & -1;
    _tiff_set($nexif, -30681, 3, 1, $conv100);
    var $arrayidx103 = $th + 508 | 0;
    _tiff_set($nexif, -28150, 5, 1, 508);
    var $15 = HEAP32[5398740 >> 2];
    var $tobool107 = ($15 | 0) == 0;
    if ($tobool107) {
      label = 15;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $ngps = $th + 346 | 0;
    _tiff_set($ntag20_pre_phi, -30683, 4, 1, 346);
    _tiff_set($ngps, 0, 1, 4, 514);
    var $16 = HEAP32[5398852 >> 2];
    _tiff_set($ngps, 1, 2, 2, $16);
    var $gps = $th + 516 | 0;
    _tiff_set($ngps, 2, 5, 3, 516);
    var $17 = HEAP32[5398856 >> 2];
    _tiff_set($ngps, 3, 2, 2, $17);
    _tiff_set($ngps, 4, 5, 3, 540);
    var $18 = HEAP32[5398860 >> 2];
    _tiff_set($ngps, 5, 1, 1, $18);
    _tiff_set($ngps, 6, 5, 1, 588);
    _tiff_set($ngps, 7, 5, 3, 564);
    _tiff_set($ngps, 18, 2, 12, 596);
    _tiff_set($ngps, 29, 2, 12, 608);
    var $19 = $gps;
    for (var $$src = 5398736 >> 2, $$dest = $19 >> 2, $$stop = $$src + 26; $$src < $$stop; $$src++, $$dest++) {
      HEAP32[$$dest] = HEAP32[$$src];
    }
    label = 15;
    break;
   case 15:
    HEAP32[$arrayidx61 >> 2] = 300;
    HEAP32[$arrayidx55 >> 2] = 300;
    var $arrayidx159 = $th + 488 | 0;
    HEAP32[$arrayidx159 >> 2] = 1;
    var $arrayidx161 = $th + 480 | 0;
    HEAP32[$arrayidx161 >> 2] = 1;
    var $arrayidx168_1 = $th + 496 | 0;
    HEAP32[$arrayidx168_1 >> 2] = 1e6;
    var $arrayidx168_3 = $th + 504 | 0;
    HEAP32[$arrayidx168_3 >> 2] = 1e6;
    var $arrayidx168_5 = $th + 512 | 0;
    HEAP32[$arrayidx168_5 >> 2] = 1e6;
    var $20 = HEAPF32[5244912 >> 2];
    var $mul175 = $20 * 1e6;
    var $conv176 = $mul175 & -1;
    HEAP32[$arrayidx89 >> 2] = $conv176;
    var $21 = HEAPF32[5561468 >> 2];
    var $mul180 = $21 * 1e6;
    var $conv181 = $mul180 & -1;
    HEAP32[$arrayidx95 >> 2] = $conv181;
    var $22 = HEAPF32[5403044 >> 2];
    var $mul185 = $22 * 1e6;
    var $conv186 = $mul185 & -1;
    HEAP32[$arrayidx103 >> 2] = $conv186;
    var $arraydecay = $th + 620 | 0;
    var $call188 = _strncpy($arraydecay, 5427980, 512);
    var $arraydecay190 = $th + 1132 | 0;
    var $call191 = _strncpy($arraydecay190, 5263628, 64);
    var $arraydecay193 = $th + 1196 | 0;
    var $call194 = _strncpy($arraydecay193, 5263372, 64);
    var $arraydecay196 = $th + 1260 | 0;
    for (var $$src = 5576244, $$dest = $arraydecay196, $$stop = $$src + 12; $$src < $$stop; $$src++, $$dest++) {
      HEAP8[$$dest] = HEAP8[$$src];
    }
    var $call198 = _localtime(5243568);
    var $arraydecay200 = $th + 1292 | 0;
    var $tm_year = $call198 + 20 | 0;
    var $23 = HEAP32[$tm_year >> 2];
    var $add201 = $23 + 1900 | 0;
    var $tm_mon = $call198 + 16 | 0;
    var $24 = HEAP32[$tm_mon >> 2];
    var $add202 = $24 + 1 | 0;
    var $tm_mday = $call198 + 12 | 0;
    var $25 = HEAP32[$tm_mday >> 2];
    var $tm_hour = $call198 + 8 | 0;
    var $26 = HEAP32[$tm_hour >> 2];
    var $tm_min = $call198 + 4 | 0;
    var $27 = HEAP32[$tm_min >> 2];
    var $tm_sec = $call198 | 0;
    var $28 = HEAP32[$tm_sec >> 2];
    var $call203 = _sprintf($arraydecay200, 5576212, (tempInt = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempInt >> 2] = $add201, HEAP32[tempInt + 4 >> 2] = $add202, HEAP32[tempInt + 8 >> 2] = $25, HEAP32[tempInt + 12 >> 2] = $26, HEAP32[tempInt + 16 >> 2] = $27, HEAP32[tempInt + 20 >> 2] = $28, tempInt));
    var $arraydecay205 = $th + 1312 | 0;
    var $call206 = _strncpy($arraydecay205, 5561404, 64);
    STACKTOP = __stackBase__;
    return;
  }
}
_tiff_head["X"] = 1;
function _jpeg_thumb() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 1388 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $exif = __stackBase__;
    var $th = __stackBase__ + 12;
    var $0 = HEAP32[5244056 >> 2];
    var $call = _malloc($0);
    _merror($call, 5576196);
    var $1 = HEAP32[5244056 >> 2];
    var $2 = HEAP32[5264116 >> 2];
    var $call1 = _fread($call, 1, $1, $2);
    var $3 = HEAP32[5262952 >> 2];
    var $call2 = _fputc(255, $3);
    var $4 = HEAP32[5262952 >> 2];
    var $call3 = _fputc(216, $4);
    var $add_ptr = $call + 6 | 0;
    var $call4 = _strcmp($add_ptr, 5579092);
    var $tobool = ($call4 | 0) == 0;
    if ($tobool) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $5 = $exif;
    for (var $$src = 5576184, $$dest = $5, $$stop = $$src + 10; $$src < $$stop; $$src++, $$dest++) {
      HEAP8[$$dest] = HEAP8[$$src];
    }
    var $call5 = _htons(1384);
    var $conv = $call5 & 65535;
    var $arrayidx = $exif + 2 | 0;
    HEAP16[$arrayidx >> 1] = $conv;
    var $6 = HEAP32[5262952 >> 2];
    var $call6 = _fwrite($5, 1, 10, $6);
    _tiff_head($th, 0);
    var $7 = $th;
    var $8 = HEAP32[5262952 >> 2];
    var $call7 = _fwrite($7, 1, 1376, $8);
    label = 4;
    break;
   case 4:
    var $add_ptr8 = $call + 2 | 0;
    var $9 = HEAP32[5244056 >> 2];
    var $sub = $9 - 2 | 0;
    var $10 = HEAP32[5262952 >> 2];
    var $call9 = _fwrite($add_ptr8, 1, $sub, $10);
    _free($call);
    STACKTOP = __stackBase__;
    return;
  }
}
function _write_ppm_tiff() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 1376 | 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $th = __stackBase__;
    var $0 = HEAP16[5242964 >> 1];
    var $conv = $0 & 65535;
    var $1 = HEAP16[5398712 >> 1];
    var $conv1 = $1 & 65535;
    var $mul = $conv1 * $conv & -1;
    var $conv2 = $mul | 0;
    var $mul3 = $conv2 * .01;
    var $conv4 = $mul3 & -1;
    var $2 = HEAP16[5398900 >> 1];
    var $tobool = $2 << 16 >> 16 == 0;
    if ($tobool) {
      var $perc_0 = $conv4;
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $div = ($conv4 | 0) / 2 & -1;
    var $perc_0 = $div;
    label = 4;
    break;
   case 4:
    var $perc_0;
    var $3 = HEAP32[5398708 >> 2];
    var $and = $3 & -3;
    var $_b8 = HEAP8[5262956];
    var $4 = $_b8 & 1;
    var $5 = $and | $4;
    var $6 = ($5 | 0) == 0;
    if ($6) {
      label = 5;
      break;
    } else {
      var $white_2 = 65536;
      label = 11;
      break;
    }
   case 5:
    var $7 = HEAP32[5560840 >> 2];
    var $cmp49 = ($7 | 0) > 0;
    if ($cmp49) {
      var $c_050 = 0;
      var $white_051 = 0;
      label = 6;
      break;
    } else {
      var $white_2 = 0;
      label = 11;
      break;
    }
   case 6:
    var $white_051;
    var $c_050;
    var $total_0 = 0;
    var $val_0 = 8192;
    label = 7;
    break;
   case 7:
    var $val_0;
    var $total_0;
    var $dec = $val_0 - 1 | 0;
    var $cmp10 = ($dec | 0) > 32;
    if ($cmp10) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    var $arrayidx13 = 5267636 + ($c_050 << 15) + ($dec << 2) | 0;
    var $8 = HEAP32[$arrayidx13 >> 2];
    var $add = $8 + $total_0 | 0;
    var $cmp14 = ($add | 0) > ($perc_0 | 0);
    if ($cmp14) {
      label = 9;
      break;
    } else {
      var $total_0 = $add;
      var $val_0 = $dec;
      label = 7;
      break;
    }
   case 9:
    var $cmp18 = ($white_051 | 0) < ($dec | 0);
    var $dec_white_0 = $cmp18 ? $dec : $white_051;
    var $inc = $c_050 + 1 | 0;
    var $cmp = ($inc | 0) < ($7 | 0);
    if ($cmp) {
      var $c_050 = $inc;
      var $white_051 = $dec_white_0;
      label = 6;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $phitmp = $dec_white_0 << 3;
    var $phitmp14 = $phitmp | 0;
    var $white_2 = $phitmp14;
    label = 11;
    break;
   case 11:
    var $white_2;
    var $9 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5398892 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5398896 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $10 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5398884 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5398888 >> 2], HEAPF64[tempDoublePtr >> 3]);
    var $11 = HEAPF32[5561140 >> 2];
    var $div25 = $white_2 / $11;
    var $conv26 = $div25 & -1;
    _gamma_curve($9, $10, 2, $conv26);
    HEAP16[5264112 >> 1] = $1;
    HEAP16[5264092 >> 1] = $0;
    var $12 = HEAP32[5403048 >> 2];
    var $and27 = $12 & 4;
    var $tobool28 = ($and27 | 0) == 0;
    if ($tobool28) {
      var $13 = $0;
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    HEAP16[5242964 >> 1] = $1;
    HEAP16[5398712 >> 1] = $0;
    var $13 = $1;
    label = 13;
    break;
   case 13:
    var $13;
    var $conv42 = $13 & 65535;
    var $14 = HEAP32[5560840 >> 2];
    var $_b5 = HEAP8[5262940];
    var $15 = $_b5 ? 16 : 8;
    var $mul43 = $15 * $14 & -1;
    var $div44 = ($mul43 | 0) / 8 & -1;
    var $call = _calloc($conv42, $div44);
    var $16 = $call;
    _merror($call, 5576164);
    var $_b7 = HEAP8[5262932];
    if ($_b7) {
      label = 14;
      break;
    } else {
      label = 16;
      break;
    }
   case 14:
    _tiff_head($th, 1);
    var $17 = $th;
    var $18 = HEAP32[5262952 >> 2];
    var $call47 = _fwrite($17, 1376, 1, $18);
    var $19 = HEAP32[5262948 >> 2];
    var $tobool48 = ($19 | 0) == 0;
    if ($tobool48) {
      label = 19;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $20 = $19;
    var $21 = HEAP32[$19 >> 2];
    var $call51 = _htonl($21);
    var $22 = HEAP32[5262952 >> 2];
    var $call52 = _fwrite($20, $call51, 1, $22);
    label = 19;
    break;
   case 16:
    var $23 = HEAP32[5560840 >> 2];
    var $cmp54 = ($23 | 0) > 3;
    var $24 = HEAP32[5262952 >> 2];
    if ($cmp54) {
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 17:
    var $25 = HEAP16[5242964 >> 1];
    var $conv57 = $25 & 65535;
    var $26 = HEAP16[5398712 >> 1];
    var $conv58 = $26 & 65535;
    var $_b4 = HEAP8[5262940];
    var $sub60 = $_b4 ? 65535 : 255;
    var $call61 = _fprintf($24, 5576100, (tempInt = STACKTOP, STACKTOP = STACKTOP + 20 | 0, HEAP32[tempInt >> 2] = $conv57, HEAP32[tempInt + 4 >> 2] = $conv58, HEAP32[tempInt + 8 >> 2] = $23, HEAP32[tempInt + 12 >> 2] = $sub60, HEAP32[tempInt + 16 >> 2] = 5560896, tempInt));
    label = 19;
    break;
   case 18:
    var $div63 = ($23 | 0) / 2 & -1;
    var $add64 = $div63 + 5 | 0;
    var $27 = HEAP16[5242964 >> 1];
    var $conv65 = $27 & 65535;
    var $28 = HEAP16[5398712 >> 1];
    var $conv66 = $28 & 65535;
    var $_b3 = HEAP8[5262940];
    var $sub68 = $_b3 ? 65535 : 255;
    var $call69 = _fprintf($24, 5576068, (tempInt = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempInt >> 2] = $add64, HEAP32[tempInt + 4 >> 2] = $conv65, HEAP32[tempInt + 8 >> 2] = $conv66, HEAP32[tempInt + 12 >> 2] = $sub68, tempInt));
    label = 19;
    break;
   case 19:
    var $call72 = _flip_index(0, 0);
    var $call73 = _flip_index(0, 1);
    var $sub74 = $call73 - $call72 | 0;
    var $call75 = _flip_index(1, 0);
    var $29 = HEAP16[5242964 >> 1];
    var $conv76 = $29 & 65535;
    var $call77 = _flip_index(0, $conv76);
    var $sub78 = $call75 - $call77 | 0;
    var $30 = HEAP16[5398712 >> 1];
    var $cmp8146 = $30 << 16 >> 16 == 0;
    if ($cmp8146) {
      label = 35;
      break;
    } else {
      var $soff_047 = $call72;
      var $row_048 = 1;
      var $31 = $29;
      label = 20;
      break;
    }
   case 20:
    var $31;
    var $row_048;
    var $soff_047;
    var $cmp8638 = $31 << 16 >> 16 == 0;
    var $_b2 = HEAP8[5262940];
    if ($cmp8638) {
      var $soff_1_lcssa = $soff_047;
      label = 30;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    var $_pre = HEAP32[5560840 >> 2];
    var $col_039 = 0;
    var $soff_143 = $soff_047;
    label = 22;
    break;
   case 22:
    var $soff_143;
    var $col_039;
    var $cmp9335 = ($_pre | 0) > 0;
    if ($_b2) {
      label = 25;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    if ($cmp9335) {
      label = 24;
      break;
    } else {
      label = 29;
      break;
    }
   case 24:
    var $_pre10 = HEAP32[5264108 >> 2];
    var $c_136 = 0;
    label = 27;
    break;
   case 25:
    if ($cmp9335) {
      label = 26;
      break;
    } else {
      label = 29;
      break;
    }
   case 26:
    var $_pre12 = HEAP32[5264108 >> 2];
    var $c_233 = 0;
    label = 28;
    break;
   case 27:
    var $c_136;
    var $arrayidx97 = $_pre10 + ($soff_143 << 3) + ($c_136 << 1) | 0;
    var $32 = HEAP16[$arrayidx97 >> 1];
    var $idxprom = $32 & 65535;
    var $arrayidx98 = 5428500 + ($idxprom << 1) | 0;
    var $33 = HEAP16[$arrayidx98 >> 1];
    var $shr31 = ($33 & 65535) >>> 8;
    var $conv100 = $shr31 & 255;
    var $mul101 = $_pre * $col_039 & -1;
    var $add102 = $mul101 + $c_136 | 0;
    var $arrayidx103 = $call + $add102 | 0;
    HEAP8[$arrayidx103] = $conv100;
    var $inc105 = $c_136 + 1 | 0;
    var $cmp93 = ($inc105 | 0) < ($_pre | 0);
    if ($cmp93) {
      var $c_136 = $inc105;
      label = 27;
      break;
    } else {
      label = 29;
      break;
    }
   case 28:
    var $c_233;
    var $arrayidx113 = $_pre12 + ($soff_143 << 3) + ($c_233 << 1) | 0;
    var $34 = HEAP16[$arrayidx113 >> 1];
    var $idxprom114 = $34 & 65535;
    var $arrayidx115 = 5428500 + ($idxprom114 << 1) | 0;
    var $35 = HEAP16[$arrayidx115 >> 1];
    var $mul116 = $_pre * $col_039 & -1;
    var $add117 = $mul116 + $c_233 | 0;
    var $arrayidx118 = $16 + ($add117 << 1) | 0;
    HEAP16[$arrayidx118 >> 1] = $35;
    var $inc120 = $c_233 + 1 | 0;
    var $cmp109 = ($inc120 | 0) < ($_pre | 0);
    if ($cmp109) {
      var $c_233 = $inc120;
      label = 28;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    var $inc124 = $col_039 + 1 | 0;
    var $add125 = $sub74 + $soff_143 | 0;
    var $conv85 = $31 & 65535;
    var $cmp86 = ($inc124 | 0) < ($conv85 | 0);
    if ($cmp86) {
      var $col_039 = $inc124;
      var $soff_143 = $add125;
      label = 22;
      break;
    } else {
      var $soff_1_lcssa = $add125;
      label = 30;
      break;
    }
   case 30:
    var $soff_1_lcssa;
    var $not__b215 = $_b2 ^ 1;
    var $_b6 = HEAP8[5262932];
    var $or_cond1 = $_b6 | $not__b215;
    if ($or_cond1) {
      label = 33;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    var $call131 = _htons(21930);
    var $cmp132 = ($call131 | 0) == 21930;
    if ($cmp132) {
      label = 33;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    var $36 = HEAP16[5242964 >> 1];
    var $conv135 = $36 & 65535;
    var $37 = HEAP32[5560840 >> 2];
    var $mul136 = $37 << 1;
    var $mul137 = $mul136 * $conv135 & -1;
    _swab($call, $call, $mul137);
    label = 33;
    break;
   case 33:
    var $38 = HEAP32[5560840 >> 2];
    var $_b = HEAP8[5262940];
    var $39 = $_b ? 16 : 8;
    var $mul139 = $39 * $38 & -1;
    var $div140 = ($mul139 | 0) / 8 & -1;
    var $40 = HEAP16[5242964 >> 1];
    var $conv141 = $40 & 65535;
    var $41 = HEAP32[5262952 >> 2];
    var $call142 = _fwrite($call, $div140, $conv141, $41);
    var $42 = HEAP16[5398712 >> 1];
    var $conv80 = $42 & 65535;
    var $cmp81 = ($row_048 | 0) < ($conv80 | 0);
    if ($cmp81) {
      label = 34;
      break;
    } else {
      label = 35;
      break;
    }
   case 34:
    var $add145 = $sub78 + $soff_1_lcssa | 0;
    var $_pre13 = HEAP16[5242964 >> 1];
    var $phitmp16 = $row_048 + 1 | 0;
    var $soff_047 = $add145;
    var $row_048 = $phitmp16;
    var $31 = $_pre13;
    label = 20;
    break;
   case 35:
    _free($call);
    STACKTOP = __stackBase__;
    return;
  }
}
_write_ppm_tiff["X"] = 1;
function _main($argc, $argv) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 2;
  var mySetjmpIds = {};
  var setjmpTable = {
    "60": (function(value) {
      label = 224;
      $call222 = value;
    }),
    dummy: 0
  };
  while (1) try {
    switch (label) {
     case 2:
      var $ut = __stackBase__;
      var $call = _putenv(5576060);
      var $cmp = ($argc | 0) == 1;
      if ($cmp) {
        label = 3;
        break;
      } else {
        label = 4;
        break;
      }
     case 3:
      var $call1 = _printf(5576028, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5576020, tempInt));
      var $puts = _puts(5244072);
      var $0 = HEAP32[$argv >> 2];
      var $call3 = _printf(5575984, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $0, tempInt));
      var $call4 = _puts(5575948);
      var $call5 = _puts(5575900);
      var $call6 = _puts(5575856);
      var $call7 = _puts(5575808);
      var $call8 = _puts(5575756);
      var $call9 = _puts(5575708);
      var $call10 = _puts(5575660);
      var $call11 = _puts(5575608);
      var $call12 = _puts(5575556);
      var $call13 = _puts(5575516);
      var $call14 = _puts(5575464);
      var $call15 = _puts(5575424);
      var $call16 = _puts(5575372);
      var $call17 = _puts(5575324);
      var $call18 = _puts(5575284);
      var $call19 = _puts(5575248);
      var $call20 = _puts(5575200);
      var $call21 = _puts(5575132);
      var $call22 = _puts(5575076);
      var $call23 = _puts(5575012);
      var $call24 = _puts(5574956);
      var $call25 = _puts(5574900);
      var $call26 = _puts(5574852);
      var $call27 = _puts(5574800);
      var $call28 = _puts(5574752);
      var $call29 = _puts(5574696);
      var $call30 = _puts(5574656);
      var $call31 = _puts(5574596);
      var $call32 = _puts(5574552);
      var $call33 = _puts(5574500);
      var $call34 = _puts(5574440);
      var $call35 = _puts(5574400);
      var $call36 = _puts(5574352);
      var $call37 = _puts(5574316);
      var $putchar = _putchar(10);
      var $retval_0 = 1;
      label = 223;
      break;
     case 4:
      var $arrayidx39 = $argv + ($argc << 2) | 0;
      HEAP32[$arrayidx39 >> 2] = 5587392;
      var $arrayidx40204 = $argv + 4 | 0;
      var $1 = HEAP32[$arrayidx40204 >> 2];
      var $2 = HEAP8[$1];
      var $conv205 = $2 << 24 >> 24;
      var $sub206 = $conv205 - 2 | 0;
      var $or207 = $sub206 | 2;
      var $cmp42208 = ($or207 | 0) == 43;
      if ($cmp42208) {
        var $timestamp_only_0209 = 0;
        var $thumbnail_only_0210 = 0;
        var $identify_only_0211 = 0;
        var $user_qual_0212 = -1;
        var $user_black_0213 = -1;
        var $user_sat_0214 = -1;
        var $user_flip_0215 = -1;
        var $use_fuji_rotate_0216 = 1;
        var $write_to_stdout_0217 = 0;
        var $read_from_stdin_0218 = 0;
        var $bpfile_0219 = 0;
        var $dark_frame_0220 = 0;
        var $arg_0221 = 1;
        var $4 = $1;
        var $3 = $2;
        var $multi_out_0 = 0;
        var $use_camera_matrix_0 = -1;
        label = 5;
        break;
      } else {
        var $multi_out_230 = 0;
        var $arg_0_lcssa32 = 1;
        var $dark_frame_0_lcssa34 = 0;
        var $bpfile_0_lcssa36 = 0;
        var $read_from_stdin_0_lcssa38 = 0;
        var $write_to_stdout_0_lcssa40 = 0;
        var $use_fuji_rotate_0_lcssa42 = 1;
        var $user_flip_0_lcssa44 = -1;
        var $user_sat_0_lcssa46 = -1;
        var $user_black_0_lcssa48 = -1;
        var $user_qual_0_lcssa50 = -1;
        var $identify_only_0_lcssa52 = 0;
        var $thumbnail_only_0_lcssa54 = 0;
        var $timestamp_only_0_lcssa56 = 0;
        label = 52;
        break;
      }
     case 5:
      var $use_camera_matrix_0;
      var $multi_out_0;
      var $3;
      var $4;
      var $arg_0221;
      var $dark_frame_0220;
      var $bpfile_0219;
      var $read_from_stdin_0218;
      var $write_to_stdout_0217;
      var $use_fuji_rotate_0216;
      var $user_flip_0215;
      var $user_sat_0214;
      var $user_black_0213;
      var $user_qual_0212;
      var $identify_only_0211;
      var $thumbnail_only_0210;
      var $timestamp_only_0209;
      var $inc = $arg_0221 + 1 | 0;
      var $arrayidx45 = $4 + 1 | 0;
      var $5 = HEAP8[$arrayidx45];
      var $conv46 = $5 << 24 >> 24;
      var $memchr = _memchr(5574292, $conv46, 13);
      var $tobool = ($memchr | 0) == 0;
      if ($tobool) {
        label = 10;
        break;
      } else {
        label = 6;
        break;
      }
     case 6:
      var $sub_ptr_lhs_cast = $memchr;
      var $sub_ptr_sub = $sub_ptr_lhs_cast - 5574292 | 0;
      var $arrayidx50 = $sub_ptr_sub + 5574276 | 0;
      var $6 = HEAP8[$arrayidx50];
      var $conv51 = $6 << 24 >> 24;
      var $sub52 = $conv51 - 48 | 0;
      var $i_0 = 0;
      label = 7;
      break;
     case 7:
      var $i_0;
      var $cmp53 = ($i_0 | 0) < ($sub52 | 0);
      if ($cmp53) {
        label = 8;
        break;
      } else {
        label = 10;
        break;
      }
     case 8:
      var $add = $i_0 + $inc | 0;
      var $arrayidx56 = $argv + ($add << 2) | 0;
      var $7 = HEAP32[$arrayidx56 >> 2];
      var $8 = HEAP8[$7];
      var $conv58 = $8 << 24 >> 24;
      var $isdigittmp = $conv58 - 48 | 0;
      var $isdigit = $isdigittmp >>> 0 < 10;
      var $inc65 = $i_0 + 1 | 0;
      if ($isdigit) {
        var $i_0 = $inc65;
        label = 7;
        break;
      } else {
        label = 9;
        break;
      }
     case 9:
      var $9 = HEAP32[_stderr >> 2];
      var $call63 = _fprintf($9, 5574244, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $conv46, tempInt));
      var $retval_0 = 1;
      label = 223;
      break;
     case 10:
      if (($conv46 | 0) == 100) {
        label = 11;
        break;
      } else if (($conv46 | 0) == 110) {
        label = 12;
        break;
      } else if (($conv46 | 0) == 98) {
        label = 13;
        break;
      } else if (($conv46 | 0) == 114) {
        label = 14;
        break;
      } else if (($conv46 | 0) == 67) {
        label = 15;
        break;
      } else if (($conv46 | 0) == 103) {
        label = 16;
        break;
      } else if (($conv46 | 0) == 107) {
        label = 18;
        break;
      } else if (($conv46 | 0) == 83) {
        label = 19;
        break;
      } else if (($conv46 | 0) == 116) {
        label = 20;
        break;
      } else if (($conv46 | 0) == 113) {
        label = 21;
        break;
      } else if (($conv46 | 0) == 109) {
        label = 22;
        break;
      } else if (($conv46 | 0) == 72) {
        label = 23;
        break;
      } else if (($conv46 | 0) == 115) {
        label = 24;
        break;
      } else if (($conv46 | 0) == 111) {
        label = 25;
        break;
      } else if (($conv46 | 0) == 122) {
        var $arg_0_be = $inc;
        var $dark_frame_0_be = $dark_frame_0220;
        var $bpfile_0_be = $bpfile_0219;
        var $read_from_stdin_0_be = $read_from_stdin_0218;
        var $write_to_stdout_0_be = $write_to_stdout_0217;
        var $use_fuji_rotate_0_be = $use_fuji_rotate_0216;
        var $user_flip_0_be = $user_flip_0215;
        var $user_sat_0_be = $user_sat_0214;
        var $user_black_0_be = $user_black_0213;
        var $user_qual_0_be = $user_qual_0212;
        var $identify_only_0_be = $identify_only_0211;
        var $thumbnail_only_0_be = $thumbnail_only_0210;
        var $timestamp_only_0_be = 1;
        var $multi_out_1 = $multi_out_0;
        var $use_camera_matrix_1 = $use_camera_matrix_0;
        label = 28;
        break;
      } else if (($conv46 | 0) == 80) {
        label = 29;
        break;
      } else if (($conv46 | 0) == 75) {
        label = 30;
        break;
      } else if (($conv46 | 0) == 101) {
        label = 31;
        break;
      } else if (($conv46 | 0) == 105) {
        label = 32;
        break;
      } else if (($conv46 | 0) == 99) {
        label = 33;
        break;
      } else if (($conv46 | 0) == 118) {
        label = 34;
        break;
      } else if (($conv46 | 0) == 104) {
        label = 35;
        break;
      } else if (($conv46 | 0) == 102) {
        label = 36;
        break;
      } else if (($conv46 | 0) == 65) {
        label = 37;
        break;
      } else if (($conv46 | 0) == 97) {
        var $arg_3 = $inc;
        label = 38;
        break;
      } else if (($conv46 | 0) == 119) {
        label = 39;
        break;
      } else if (($conv46 | 0) == 77) {
        label = 40;
        break;
      } else if (($conv46 | 0) == 73) {
        label = 41;
        break;
      } else if (($conv46 | 0) == 69) {
        label = 42;
        break;
      } else if (($conv46 | 0) == 68) {
        label = 43;
        break;
      } else if (($conv46 | 0) == 106) {
        label = 45;
        break;
      } else if (($conv46 | 0) == 87) {
        label = 46;
        break;
      } else if (($conv46 | 0) == 84) {
        label = 47;
        break;
      } else if (($conv46 | 0) == 52) {
        label = 48;
        break;
      } else if (($conv46 | 0) == 54) {
        label = 49;
        break;
      } else {
        label = 50;
        break;
      }
     case 11:
      var $_pre27 = HEAP32[5427972 >> 2];
      var $42 = $_pre27;
      label = 44;
      break;
     case 12:
      var $inc68 = $arg_0221 + 2 | 0;
      var $arrayidx69 = $argv + ($inc << 2) | 0;
      var $10 = HEAP32[$arrayidx69 >> 2];
      var $call70 = _atof($10);
      var $conv71 = $call70;
      HEAPF32[5244064 >> 2] = $conv71;
      var $arg_0_be = $inc68;
      var $dark_frame_0_be = $dark_frame_0220;
      var $bpfile_0_be = $bpfile_0219;
      var $read_from_stdin_0_be = $read_from_stdin_0218;
      var $write_to_stdout_0_be = $write_to_stdout_0217;
      var $use_fuji_rotate_0_be = $use_fuji_rotate_0216;
      var $user_flip_0_be = $user_flip_0215;
      var $user_sat_0_be = $user_sat_0214;
      var $user_black_0_be = $user_black_0213;
      var $user_qual_0_be = $user_qual_0212;
      var $identify_only_0_be = $identify_only_0211;
      var $thumbnail_only_0_be = $thumbnail_only_0210;
      var $timestamp_only_0_be = $timestamp_only_0209;
      var $multi_out_1 = $multi_out_0;
      var $use_camera_matrix_1 = $use_camera_matrix_0;
      label = 28;
      break;
     case 13:
      var $inc73 = $arg_0221 + 2 | 0;
      var $arrayidx74 = $argv + ($inc << 2) | 0;
      var $11 = HEAP32[$arrayidx74 >> 2];
      var $call75 = _atof($11);
      var $conv76 = $call75;
      HEAPF32[5561140 >> 2] = $conv76;
      var $arg_0_be = $inc73;
      var $dark_frame_0_be = $dark_frame_0220;
      var $bpfile_0_be = $bpfile_0219;
      var $read_from_stdin_0_be = $read_from_stdin_0218;
      var $write_to_stdout_0_be = $write_to_stdout_0217;
      var $use_fuji_rotate_0_be = $use_fuji_rotate_0216;
      var $user_flip_0_be = $user_flip_0215;
      var $user_sat_0_be = $user_sat_0214;
      var $user_black_0_be = $user_black_0213;
      var $user_qual_0_be = $user_qual_0212;
      var $identify_only_0_be = $identify_only_0211;
      var $thumbnail_only_0_be = $thumbnail_only_0210;
      var $timestamp_only_0_be = $timestamp_only_0209;
      var $multi_out_1 = $multi_out_0;
      var $use_camera_matrix_1 = $use_camera_matrix_0;
      label = 28;
      break;
     case 14:
      var $inc82 = $arg_0221 + 2 | 0;
      var $arrayidx83 = $argv + ($inc << 2) | 0;
      var $12 = HEAP32[$arrayidx83 >> 2];
      var $call84 = _atof($12);
      var $conv85 = $call84;
      HEAPF32[5243536 >> 2] = $conv85;
      var $inc82_1 = $arg_0221 + 3 | 0;
      var $arrayidx83_1 = $argv + ($inc82 << 2) | 0;
      var $13 = HEAP32[$arrayidx83_1 >> 2];
      var $call84_1 = _atof($13);
      var $conv85_1 = $call84_1;
      HEAPF32[5243540 >> 2] = $conv85_1;
      var $inc82_2 = $arg_0221 + 4 | 0;
      var $arrayidx83_2 = $argv + ($inc82_1 << 2) | 0;
      var $14 = HEAP32[$arrayidx83_2 >> 2];
      var $call84_2 = _atof($14);
      var $conv85_2 = $call84_2;
      HEAPF32[5243544 >> 2] = $conv85_2;
      var $arrayidx83_3 = $argv + ($inc82_2 << 2) | 0;
      var $15 = HEAP32[$arrayidx83_3 >> 2];
      var $call84_3 = _atof($15);
      var $conv85_3 = $call84_3;
      HEAPF32[5243548 >> 2] = $conv85_3;
      var $16 = $arg_0221 + 5 | 0;
      var $arg_0_be = $16;
      var $dark_frame_0_be = $dark_frame_0220;
      var $bpfile_0_be = $bpfile_0219;
      var $read_from_stdin_0_be = $read_from_stdin_0218;
      var $write_to_stdout_0_be = $write_to_stdout_0217;
      var $use_fuji_rotate_0_be = $use_fuji_rotate_0216;
      var $user_flip_0_be = $user_flip_0215;
      var $user_sat_0_be = $user_sat_0214;
      var $user_black_0_be = $user_black_0213;
      var $user_qual_0_be = $user_qual_0212;
      var $identify_only_0_be = $identify_only_0211;
      var $thumbnail_only_0_be = $thumbnail_only_0210;
      var $timestamp_only_0_be = $timestamp_only_0209;
      var $multi_out_1 = $multi_out_0;
      var $use_camera_matrix_1 = $use_camera_matrix_0;
      label = 28;
      break;
     case 15:
      var $inc91 = $arg_0221 + 2 | 0;
      var $arrayidx92 = $argv + ($inc << 2) | 0;
      var $17 = HEAP32[$arrayidx92 >> 2];
      var $call93 = _atof($17);
      var $div = 1 / $call93;
      HEAPF64[tempDoublePtr >> 3] = $div, HEAP32[5573248 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5573252 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
      var $inc94 = $arg_0221 + 3 | 0;
      var $arrayidx95 = $argv + ($inc91 << 2) | 0;
      var $18 = HEAP32[$arrayidx95 >> 2];
      var $call96 = _atof($18);
      var $div97 = 1 / $call96;
      HEAPF64[tempDoublePtr >> 3] = $div97, HEAP32[5573264 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5573268 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
      var $arg_0_be = $inc94;
      var $dark_frame_0_be = $dark_frame_0220;
      var $bpfile_0_be = $bpfile_0219;
      var $read_from_stdin_0_be = $read_from_stdin_0218;
      var $write_to_stdout_0_be = $write_to_stdout_0217;
      var $use_fuji_rotate_0_be = $use_fuji_rotate_0216;
      var $user_flip_0_be = $user_flip_0215;
      var $user_sat_0_be = $user_sat_0214;
      var $user_black_0_be = $user_black_0213;
      var $user_qual_0_be = $user_qual_0212;
      var $identify_only_0_be = $identify_only_0211;
      var $thumbnail_only_0_be = $thumbnail_only_0210;
      var $timestamp_only_0_be = $timestamp_only_0209;
      var $multi_out_1 = $multi_out_0;
      var $use_camera_matrix_1 = $use_camera_matrix_0;
      label = 28;
      break;
     case 16:
      var $inc99 = $arg_0221 + 2 | 0;
      var $arrayidx100 = $argv + ($inc << 2) | 0;
      var $19 = HEAP32[$arrayidx100 >> 2];
      var $call101 = _atof($19);
      HEAPF64[tempDoublePtr >> 3] = $call101, HEAP32[5398892 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5398896 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
      var $inc102 = $arg_0221 + 3 | 0;
      var $arrayidx103 = $argv + ($inc99 << 2) | 0;
      var $20 = HEAP32[$arrayidx103 >> 2];
      var $call104 = _atof($20);
      HEAPF64[tempDoublePtr >> 3] = $call104, HEAP32[5398884 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5398888 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
      var $tobool105 = $call101 != 0;
      if ($tobool105) {
        label = 17;
        break;
      } else {
        var $arg_0_be = $inc102;
        var $dark_frame_0_be = $dark_frame_0220;
        var $bpfile_0_be = $bpfile_0219;
        var $read_from_stdin_0_be = $read_from_stdin_0218;
        var $write_to_stdout_0_be = $write_to_stdout_0217;
        var $use_fuji_rotate_0_be = $use_fuji_rotate_0216;
        var $user_flip_0_be = $user_flip_0215;
        var $user_sat_0_be = $user_sat_0214;
        var $user_black_0_be = $user_black_0213;
        var $user_qual_0_be = $user_qual_0212;
        var $identify_only_0_be = $identify_only_0211;
        var $thumbnail_only_0_be = $thumbnail_only_0210;
        var $timestamp_only_0_be = $timestamp_only_0209;
        var $multi_out_1 = $multi_out_0;
        var $use_camera_matrix_1 = $use_camera_matrix_0;
        label = 28;
        break;
      }
     case 17:
      var $div107 = 1 / $call101;
      HEAPF64[tempDoublePtr >> 3] = $div107, HEAP32[5398892 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5398896 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
      var $arg_0_be = $inc102;
      var $dark_frame_0_be = $dark_frame_0220;
      var $bpfile_0_be = $bpfile_0219;
      var $read_from_stdin_0_be = $read_from_stdin_0218;
      var $write_to_stdout_0_be = $write_to_stdout_0217;
      var $use_fuji_rotate_0_be = $use_fuji_rotate_0216;
      var $user_flip_0_be = $user_flip_0215;
      var $user_sat_0_be = $user_sat_0214;
      var $user_black_0_be = $user_black_0213;
      var $user_qual_0_be = $user_qual_0212;
      var $identify_only_0_be = $identify_only_0211;
      var $thumbnail_only_0_be = $thumbnail_only_0210;
      var $timestamp_only_0_be = $timestamp_only_0209;
      var $multi_out_1 = $multi_out_0;
      var $use_camera_matrix_1 = $use_camera_matrix_0;
      label = 28;
      break;
     case 18:
      var $inc110 = $arg_0221 + 2 | 0;
      var $arrayidx111 = $argv + ($inc << 2) | 0;
      var $21 = HEAP32[$arrayidx111 >> 2];
      var $call112 = _atoi($21);
      var $arg_0_be = $inc110;
      var $dark_frame_0_be = $dark_frame_0220;
      var $bpfile_0_be = $bpfile_0219;
      var $read_from_stdin_0_be = $read_from_stdin_0218;
      var $write_to_stdout_0_be = $write_to_stdout_0217;
      var $use_fuji_rotate_0_be = $use_fuji_rotate_0216;
      var $user_flip_0_be = $user_flip_0215;
      var $user_sat_0_be = $user_sat_0214;
      var $user_black_0_be = $call112;
      var $user_qual_0_be = $user_qual_0212;
      var $identify_only_0_be = $identify_only_0211;
      var $thumbnail_only_0_be = $thumbnail_only_0210;
      var $timestamp_only_0_be = $timestamp_only_0209;
      var $multi_out_1 = $multi_out_0;
      var $use_camera_matrix_1 = $use_camera_matrix_0;
      label = 28;
      break;
     case 19:
      var $inc114 = $arg_0221 + 2 | 0;
      var $arrayidx115 = $argv + ($inc << 2) | 0;
      var $22 = HEAP32[$arrayidx115 >> 2];
      var $call116 = _atoi($22);
      var $arg_0_be = $inc114;
      var $dark_frame_0_be = $dark_frame_0220;
      var $bpfile_0_be = $bpfile_0219;
      var $read_from_stdin_0_be = $read_from_stdin_0218;
      var $write_to_stdout_0_be = $write_to_stdout_0217;
      var $use_fuji_rotate_0_be = $use_fuji_rotate_0216;
      var $user_flip_0_be = $user_flip_0215;
      var $user_sat_0_be = $call116;
      var $user_black_0_be = $user_black_0213;
      var $user_qual_0_be = $user_qual_0212;
      var $identify_only_0_be = $identify_only_0211;
      var $thumbnail_only_0_be = $thumbnail_only_0210;
      var $timestamp_only_0_be = $timestamp_only_0209;
      var $multi_out_1 = $multi_out_0;
      var $use_camera_matrix_1 = $use_camera_matrix_0;
      label = 28;
      break;
     case 20:
      var $inc118 = $arg_0221 + 2 | 0;
      var $arrayidx119 = $argv + ($inc << 2) | 0;
      var $23 = HEAP32[$arrayidx119 >> 2];
      var $call120 = _atoi($23);
      var $arg_0_be = $inc118;
      var $dark_frame_0_be = $dark_frame_0220;
      var $bpfile_0_be = $bpfile_0219;
      var $read_from_stdin_0_be = $read_from_stdin_0218;
      var $write_to_stdout_0_be = $write_to_stdout_0217;
      var $use_fuji_rotate_0_be = $use_fuji_rotate_0216;
      var $user_flip_0_be = $call120;
      var $user_sat_0_be = $user_sat_0214;
      var $user_black_0_be = $user_black_0213;
      var $user_qual_0_be = $user_qual_0212;
      var $identify_only_0_be = $identify_only_0211;
      var $thumbnail_only_0_be = $thumbnail_only_0210;
      var $timestamp_only_0_be = $timestamp_only_0209;
      var $multi_out_1 = $multi_out_0;
      var $use_camera_matrix_1 = $use_camera_matrix_0;
      label = 28;
      break;
     case 21:
      var $inc122 = $arg_0221 + 2 | 0;
      var $arrayidx123 = $argv + ($inc << 2) | 0;
      var $24 = HEAP32[$arrayidx123 >> 2];
      var $call124 = _atoi($24);
      var $arg_0_be = $inc122;
      var $dark_frame_0_be = $dark_frame_0220;
      var $bpfile_0_be = $bpfile_0219;
      var $read_from_stdin_0_be = $read_from_stdin_0218;
      var $write_to_stdout_0_be = $write_to_stdout_0217;
      var $use_fuji_rotate_0_be = $use_fuji_rotate_0216;
      var $user_flip_0_be = $user_flip_0215;
      var $user_sat_0_be = $user_sat_0214;
      var $user_black_0_be = $user_black_0213;
      var $user_qual_0_be = $call124;
      var $identify_only_0_be = $identify_only_0211;
      var $thumbnail_only_0_be = $thumbnail_only_0210;
      var $timestamp_only_0_be = $timestamp_only_0209;
      var $multi_out_1 = $multi_out_0;
      var $use_camera_matrix_1 = $use_camera_matrix_0;
      label = 28;
      break;
     case 22:
      var $inc126 = $arg_0221 + 2 | 0;
      var $arrayidx127 = $argv + ($inc << 2) | 0;
      var $25 = HEAP32[$arrayidx127 >> 2];
      var $call128 = _atoi($25);
      HEAP32[5263492 >> 2] = $call128;
      var $arg_0_be = $inc126;
      var $dark_frame_0_be = $dark_frame_0220;
      var $bpfile_0_be = $bpfile_0219;
      var $read_from_stdin_0_be = $read_from_stdin_0218;
      var $write_to_stdout_0_be = $write_to_stdout_0217;
      var $use_fuji_rotate_0_be = $use_fuji_rotate_0216;
      var $user_flip_0_be = $user_flip_0215;
      var $user_sat_0_be = $user_sat_0214;
      var $user_black_0_be = $user_black_0213;
      var $user_qual_0_be = $user_qual_0212;
      var $identify_only_0_be = $identify_only_0211;
      var $thumbnail_only_0_be = $thumbnail_only_0210;
      var $timestamp_only_0_be = $timestamp_only_0209;
      var $multi_out_1 = $multi_out_0;
      var $use_camera_matrix_1 = $use_camera_matrix_0;
      label = 28;
      break;
     case 23:
      var $inc130 = $arg_0221 + 2 | 0;
      var $arrayidx131 = $argv + ($inc << 2) | 0;
      var $26 = HEAP32[$arrayidx131 >> 2];
      var $call132 = _atoi($26);
      HEAP32[5398708 >> 2] = $call132;
      var $arg_0_be = $inc130;
      var $dark_frame_0_be = $dark_frame_0220;
      var $bpfile_0_be = $bpfile_0219;
      var $read_from_stdin_0_be = $read_from_stdin_0218;
      var $write_to_stdout_0_be = $write_to_stdout_0217;
      var $use_fuji_rotate_0_be = $use_fuji_rotate_0216;
      var $user_flip_0_be = $user_flip_0215;
      var $user_sat_0_be = $user_sat_0214;
      var $user_black_0_be = $user_black_0213;
      var $user_qual_0_be = $user_qual_0212;
      var $identify_only_0_be = $identify_only_0211;
      var $thumbnail_only_0_be = $thumbnail_only_0210;
      var $timestamp_only_0_be = $timestamp_only_0209;
      var $multi_out_1 = $multi_out_0;
      var $use_camera_matrix_1 = $use_camera_matrix_0;
      label = 28;
      break;
     case 24:
      var $arrayidx134 = $argv + ($inc << 2) | 0;
      var $27 = HEAP32[$arrayidx134 >> 2];
      var $call135 = _atoi($27);
      var $ispos = ($call135 | 0) > -1;
      var $neg = -$call135 | 0;
      var $call136 = $ispos ? $call135 : $neg;
      HEAP32[5244920 >> 2] = $call136;
      var $inc137 = $arg_0221 + 2 | 0;
      var $call139 = _strcmp($27, 5574240);
      var $lnot = ($call139 | 0) == 0;
      var $lnot_ext = $lnot & 1;
      var $arg_0_be = $inc137;
      var $dark_frame_0_be = $dark_frame_0220;
      var $bpfile_0_be = $bpfile_0219;
      var $read_from_stdin_0_be = $read_from_stdin_0218;
      var $write_to_stdout_0_be = $write_to_stdout_0217;
      var $use_fuji_rotate_0_be = $use_fuji_rotate_0216;
      var $user_flip_0_be = $user_flip_0215;
      var $user_sat_0_be = $user_sat_0214;
      var $user_black_0_be = $user_black_0213;
      var $user_qual_0_be = $user_qual_0212;
      var $identify_only_0_be = $identify_only_0211;
      var $thumbnail_only_0_be = $thumbnail_only_0210;
      var $timestamp_only_0_be = $timestamp_only_0209;
      var $multi_out_1 = $lnot_ext;
      var $use_camera_matrix_1 = $use_camera_matrix_0;
      label = 28;
      break;
     case 25:
      var $arrayidx142 = $argv + ($inc << 2) | 0;
      var $28 = HEAP32[$arrayidx142 >> 2];
      var $29 = HEAP8[$28];
      var $conv144 = $29 << 24 >> 24;
      var $isdigittmp144 = $conv144 - 48 | 0;
      var $isdigit145 = $isdigittmp144 >>> 0 < 10;
      if ($isdigit145) {
        label = 26;
        break;
      } else {
        var $arg_0_be = $inc;
        var $dark_frame_0_be = $dark_frame_0220;
        var $bpfile_0_be = $bpfile_0219;
        var $read_from_stdin_0_be = $read_from_stdin_0218;
        var $write_to_stdout_0_be = $write_to_stdout_0217;
        var $use_fuji_rotate_0_be = $use_fuji_rotate_0216;
        var $user_flip_0_be = $user_flip_0215;
        var $user_sat_0_be = $user_sat_0214;
        var $user_black_0_be = $user_black_0213;
        var $user_qual_0_be = $user_qual_0212;
        var $identify_only_0_be = $identify_only_0211;
        var $thumbnail_only_0_be = $thumbnail_only_0210;
        var $timestamp_only_0_be = $timestamp_only_0209;
        var $multi_out_1 = $multi_out_0;
        var $use_camera_matrix_1 = $use_camera_matrix_0;
        label = 28;
        break;
      }
     case 26:
      var $arrayidx148 = $28 + 1 | 0;
      var $30 = HEAP8[$arrayidx148];
      var $tobool149 = $30 << 24 >> 24 == 0;
      if ($tobool149) {
        label = 27;
        break;
      } else {
        var $arg_0_be = $inc;
        var $dark_frame_0_be = $dark_frame_0220;
        var $bpfile_0_be = $bpfile_0219;
        var $read_from_stdin_0_be = $read_from_stdin_0218;
        var $write_to_stdout_0_be = $write_to_stdout_0217;
        var $use_fuji_rotate_0_be = $use_fuji_rotate_0216;
        var $user_flip_0_be = $user_flip_0215;
        var $user_sat_0_be = $user_sat_0214;
        var $user_black_0_be = $user_black_0213;
        var $user_qual_0_be = $user_qual_0212;
        var $identify_only_0_be = $identify_only_0211;
        var $thumbnail_only_0_be = $thumbnail_only_0210;
        var $timestamp_only_0_be = $timestamp_only_0209;
        var $multi_out_1 = $multi_out_0;
        var $use_camera_matrix_1 = $use_camera_matrix_0;
        label = 28;
        break;
      }
     case 27:
      var $inc151 = $arg_0221 + 2 | 0;
      var $call153 = _atoi($28);
      HEAP32[5262936 >> 2] = $call153;
      var $arg_0_be = $inc151;
      var $dark_frame_0_be = $dark_frame_0220;
      var $bpfile_0_be = $bpfile_0219;
      var $read_from_stdin_0_be = $read_from_stdin_0218;
      var $write_to_stdout_0_be = $write_to_stdout_0217;
      var $use_fuji_rotate_0_be = $use_fuji_rotate_0216;
      var $user_flip_0_be = $user_flip_0215;
      var $user_sat_0_be = $user_sat_0214;
      var $user_black_0_be = $user_black_0213;
      var $user_qual_0_be = $user_qual_0212;
      var $identify_only_0_be = $identify_only_0211;
      var $thumbnail_only_0_be = $thumbnail_only_0210;
      var $timestamp_only_0_be = $timestamp_only_0209;
      var $multi_out_1 = $multi_out_0;
      var $use_camera_matrix_1 = $use_camera_matrix_0;
      label = 28;
      break;
     case 28:
      var $use_camera_matrix_1;
      var $multi_out_1;
      var $timestamp_only_0_be;
      var $thumbnail_only_0_be;
      var $identify_only_0_be;
      var $user_qual_0_be;
      var $user_black_0_be;
      var $user_sat_0_be;
      var $user_flip_0_be;
      var $use_fuji_rotate_0_be;
      var $write_to_stdout_0_be;
      var $read_from_stdin_0_be;
      var $bpfile_0_be;
      var $dark_frame_0_be;
      var $arg_0_be;
      var $arrayidx40 = $argv + ($arg_0_be << 2) | 0;
      var $31 = HEAP32[$arrayidx40 >> 2];
      var $32 = HEAP8[$31];
      var $conv = $32 << 24 >> 24;
      var $sub = $conv - 2 | 0;
      var $or = $sub | 2;
      var $cmp42 = ($or | 0) == 43;
      if ($cmp42) {
        var $timestamp_only_0209 = $timestamp_only_0_be;
        var $thumbnail_only_0210 = $thumbnail_only_0_be;
        var $identify_only_0211 = $identify_only_0_be;
        var $user_qual_0212 = $user_qual_0_be;
        var $user_black_0213 = $user_black_0_be;
        var $user_sat_0214 = $user_sat_0_be;
        var $user_flip_0215 = $user_flip_0_be;
        var $use_fuji_rotate_0216 = $use_fuji_rotate_0_be;
        var $write_to_stdout_0217 = $write_to_stdout_0_be;
        var $read_from_stdin_0218 = $read_from_stdin_0_be;
        var $bpfile_0219 = $bpfile_0_be;
        var $dark_frame_0220 = $dark_frame_0_be;
        var $arg_0221 = $arg_0_be;
        var $4 = $31;
        var $3 = $32;
        var $multi_out_0 = $multi_out_1;
        var $use_camera_matrix_0 = $use_camera_matrix_1;
        label = 5;
        break;
      } else {
        var $timestamp_only_0_lcssa = $timestamp_only_0_be;
        var $thumbnail_only_0_lcssa = $thumbnail_only_0_be;
        var $identify_only_0_lcssa = $identify_only_0_be;
        var $user_qual_0_lcssa = $user_qual_0_be;
        var $user_black_0_lcssa = $user_black_0_be;
        var $user_sat_0_lcssa = $user_sat_0_be;
        var $user_flip_0_lcssa = $user_flip_0_be;
        var $use_fuji_rotate_0_lcssa = $use_fuji_rotate_0_be;
        var $write_to_stdout_0_lcssa = $write_to_stdout_0_be;
        var $read_from_stdin_0_lcssa = $read_from_stdin_0_be;
        var $bpfile_0_lcssa = $bpfile_0_be;
        var $dark_frame_0_lcssa = $dark_frame_0_be;
        var $arg_0_lcssa = $arg_0_be;
        var $multi_out_2 = $multi_out_1;
        var $use_camera_matrix_2 = $use_camera_matrix_1;
        label = 51;
        break;
      }
     case 29:
      var $inc156 = $arg_0221 + 2 | 0;
      var $arrayidx157 = $argv + ($inc << 2) | 0;
      var $33 = HEAP32[$arrayidx157 >> 2];
      var $arg_0_be = $inc156;
      var $dark_frame_0_be = $dark_frame_0220;
      var $bpfile_0_be = $33;
      var $read_from_stdin_0_be = $read_from_stdin_0218;
      var $write_to_stdout_0_be = $write_to_stdout_0217;
      var $use_fuji_rotate_0_be = $use_fuji_rotate_0216;
      var $user_flip_0_be = $user_flip_0215;
      var $user_sat_0_be = $user_sat_0214;
      var $user_black_0_be = $user_black_0213;
      var $user_qual_0_be = $user_qual_0212;
      var $identify_only_0_be = $identify_only_0211;
      var $thumbnail_only_0_be = $thumbnail_only_0210;
      var $timestamp_only_0_be = $timestamp_only_0209;
      var $multi_out_1 = $multi_out_0;
      var $use_camera_matrix_1 = $use_camera_matrix_0;
      label = 28;
      break;
     case 30:
      var $inc159 = $arg_0221 + 2 | 0;
      var $arrayidx160 = $argv + ($inc << 2) | 0;
      var $34 = HEAP32[$arrayidx160 >> 2];
      var $arg_0_be = $inc159;
      var $dark_frame_0_be = $34;
      var $bpfile_0_be = $bpfile_0219;
      var $read_from_stdin_0_be = $read_from_stdin_0218;
      var $write_to_stdout_0_be = $write_to_stdout_0217;
      var $use_fuji_rotate_0_be = $use_fuji_rotate_0216;
      var $user_flip_0_be = $user_flip_0215;
      var $user_sat_0_be = $user_sat_0214;
      var $user_black_0_be = $user_black_0213;
      var $user_qual_0_be = $user_qual_0212;
      var $identify_only_0_be = $identify_only_0211;
      var $thumbnail_only_0_be = $thumbnail_only_0210;
      var $timestamp_only_0_be = $timestamp_only_0209;
      var $multi_out_1 = $multi_out_0;
      var $use_camera_matrix_1 = $use_camera_matrix_0;
      label = 28;
      break;
     case 31:
      var $arg_0_be = $inc;
      var $dark_frame_0_be = $dark_frame_0220;
      var $bpfile_0_be = $bpfile_0219;
      var $read_from_stdin_0_be = $read_from_stdin_0218;
      var $write_to_stdout_0_be = $write_to_stdout_0217;
      var $use_fuji_rotate_0_be = $use_fuji_rotate_0216;
      var $user_flip_0_be = $user_flip_0215;
      var $user_sat_0_be = $user_sat_0214;
      var $user_black_0_be = $user_black_0213;
      var $user_qual_0_be = $user_qual_0212;
      var $identify_only_0_be = $identify_only_0211;
      var $thumbnail_only_0_be = 1;
      var $timestamp_only_0_be = $timestamp_only_0209;
      var $multi_out_1 = $multi_out_0;
      var $use_camera_matrix_1 = $use_camera_matrix_0;
      label = 28;
      break;
     case 32:
      var $arg_0_be = $inc;
      var $dark_frame_0_be = $dark_frame_0220;
      var $bpfile_0_be = $bpfile_0219;
      var $read_from_stdin_0_be = $read_from_stdin_0218;
      var $write_to_stdout_0_be = $write_to_stdout_0217;
      var $use_fuji_rotate_0_be = $use_fuji_rotate_0216;
      var $user_flip_0_be = $user_flip_0215;
      var $user_sat_0_be = $user_sat_0214;
      var $user_black_0_be = $user_black_0213;
      var $user_qual_0_be = $user_qual_0212;
      var $identify_only_0_be = 1;
      var $thumbnail_only_0_be = $thumbnail_only_0210;
      var $timestamp_only_0_be = $timestamp_only_0209;
      var $multi_out_1 = $multi_out_0;
      var $use_camera_matrix_1 = $use_camera_matrix_0;
      label = 28;
      break;
     case 33:
      var $arg_0_be = $inc;
      var $dark_frame_0_be = $dark_frame_0220;
      var $bpfile_0_be = $bpfile_0219;
      var $read_from_stdin_0_be = $read_from_stdin_0218;
      var $write_to_stdout_0_be = 1;
      var $use_fuji_rotate_0_be = $use_fuji_rotate_0216;
      var $user_flip_0_be = $user_flip_0215;
      var $user_sat_0_be = $user_sat_0214;
      var $user_black_0_be = $user_black_0213;
      var $user_qual_0_be = $user_qual_0212;
      var $identify_only_0_be = $identify_only_0211;
      var $thumbnail_only_0_be = $thumbnail_only_0210;
      var $timestamp_only_0_be = $timestamp_only_0209;
      var $multi_out_1 = $multi_out_0;
      var $use_camera_matrix_1 = $use_camera_matrix_0;
      label = 28;
      break;
     case 34:
      HEAP8[5243532] = 1;
      var $arg_0_be = $inc;
      var $dark_frame_0_be = $dark_frame_0220;
      var $bpfile_0_be = $bpfile_0219;
      var $read_from_stdin_0_be = $read_from_stdin_0218;
      var $write_to_stdout_0_be = $write_to_stdout_0217;
      var $use_fuji_rotate_0_be = $use_fuji_rotate_0216;
      var $user_flip_0_be = $user_flip_0215;
      var $user_sat_0_be = $user_sat_0214;
      var $user_black_0_be = $user_black_0213;
      var $user_qual_0_be = $user_qual_0212;
      var $identify_only_0_be = $identify_only_0211;
      var $thumbnail_only_0_be = $thumbnail_only_0210;
      var $timestamp_only_0_be = $timestamp_only_0209;
      var $multi_out_1 = $multi_out_0;
      var $use_camera_matrix_1 = $use_camera_matrix_0;
      label = 28;
      break;
     case 35:
      HEAP8[5398716] = 1;
      label = 36;
      break;
     case 36:
      HEAP8[5403040] = 1;
      var $arg_0_be = $inc;
      var $dark_frame_0_be = $dark_frame_0220;
      var $bpfile_0_be = $bpfile_0219;
      var $read_from_stdin_0_be = $read_from_stdin_0218;
      var $write_to_stdout_0_be = $write_to_stdout_0217;
      var $use_fuji_rotate_0_be = $use_fuji_rotate_0216;
      var $user_flip_0_be = $user_flip_0215;
      var $user_sat_0_be = $user_sat_0214;
      var $user_black_0_be = $user_black_0213;
      var $user_qual_0_be = $user_qual_0212;
      var $identify_only_0_be = $identify_only_0211;
      var $thumbnail_only_0_be = $thumbnail_only_0210;
      var $timestamp_only_0_be = $timestamp_only_0209;
      var $multi_out_1 = $multi_out_0;
      var $use_camera_matrix_1 = $use_camera_matrix_0;
      label = 28;
      break;
     case 37:
      var $inc173 = $arg_0221 + 2 | 0;
      var $arrayidx174 = $argv + ($inc << 2) | 0;
      var $35 = HEAP32[$arrayidx174 >> 2];
      var $call175 = _atoi($35);
      HEAP32[5398732 >> 2] = $call175;
      var $inc173_1 = $arg_0221 + 3 | 0;
      var $arrayidx174_1 = $argv + ($inc173 << 2) | 0;
      var $36 = HEAP32[$arrayidx174_1 >> 2];
      var $call175_1 = _atoi($36);
      HEAP32[5398728 >> 2] = $call175_1;
      var $inc173_2 = $arg_0221 + 4 | 0;
      var $arrayidx174_2 = $argv + ($inc173_1 << 2) | 0;
      var $37 = HEAP32[$arrayidx174_2 >> 2];
      var $call175_2 = _atoi($37);
      HEAP32[5398724 >> 2] = $call175_2;
      var $arrayidx174_3 = $argv + ($inc173_2 << 2) | 0;
      var $38 = HEAP32[$arrayidx174_3 >> 2];
      var $call175_3 = _atoi($38);
      HEAP32[5398720 >> 2] = $call175_3;
      var $39 = $arg_0221 + 5 | 0;
      var $arg_3 = $39;
      label = 38;
      break;
     case 38:
      var $arg_3;
      HEAP8[5243556] = 1;
      var $arg_0_be = $arg_3;
      var $dark_frame_0_be = $dark_frame_0220;
      var $bpfile_0_be = $bpfile_0219;
      var $read_from_stdin_0_be = $read_from_stdin_0218;
      var $write_to_stdout_0_be = $write_to_stdout_0217;
      var $use_fuji_rotate_0_be = $use_fuji_rotate_0216;
      var $user_flip_0_be = $user_flip_0215;
      var $user_sat_0_be = $user_sat_0214;
      var $user_black_0_be = $user_black_0213;
      var $user_qual_0_be = $user_qual_0212;
      var $identify_only_0_be = $identify_only_0211;
      var $thumbnail_only_0_be = $thumbnail_only_0210;
      var $timestamp_only_0_be = $timestamp_only_0209;
      var $multi_out_1 = $multi_out_0;
      var $use_camera_matrix_1 = $use_camera_matrix_0;
      label = 28;
      break;
     case 39:
      HEAP8[5243552] = 1;
      var $arg_0_be = $inc;
      var $dark_frame_0_be = $dark_frame_0220;
      var $bpfile_0_be = $bpfile_0219;
      var $read_from_stdin_0_be = $read_from_stdin_0218;
      var $write_to_stdout_0_be = $write_to_stdout_0217;
      var $use_fuji_rotate_0_be = $use_fuji_rotate_0216;
      var $user_flip_0_be = $user_flip_0215;
      var $user_sat_0_be = $user_sat_0214;
      var $user_black_0_be = $user_black_0213;
      var $user_qual_0_be = $user_qual_0212;
      var $identify_only_0_be = $identify_only_0211;
      var $thumbnail_only_0_be = $thumbnail_only_0210;
      var $timestamp_only_0_be = $timestamp_only_0209;
      var $multi_out_1 = $multi_out_0;
      var $use_camera_matrix_1 = $use_camera_matrix_0;
      label = 28;
      break;
     case 40:
      var $cmp184 = $3 << 24 >> 24 == 43;
      var $conv185 = $cmp184 & 1;
      var $arg_0_be = $inc;
      var $dark_frame_0_be = $dark_frame_0220;
      var $bpfile_0_be = $bpfile_0219;
      var $read_from_stdin_0_be = $read_from_stdin_0218;
      var $write_to_stdout_0_be = $write_to_stdout_0217;
      var $use_fuji_rotate_0_be = $use_fuji_rotate_0216;
      var $user_flip_0_be = $user_flip_0215;
      var $user_sat_0_be = $user_sat_0214;
      var $user_black_0_be = $user_black_0213;
      var $user_qual_0_be = $user_qual_0212;
      var $identify_only_0_be = $identify_only_0211;
      var $thumbnail_only_0_be = $thumbnail_only_0210;
      var $timestamp_only_0_be = $timestamp_only_0209;
      var $multi_out_1 = $multi_out_0;
      var $use_camera_matrix_1 = $conv185;
      label = 28;
      break;
     case 41:
      var $arg_0_be = $inc;
      var $dark_frame_0_be = $dark_frame_0220;
      var $bpfile_0_be = $bpfile_0219;
      var $read_from_stdin_0_be = 1;
      var $write_to_stdout_0_be = $write_to_stdout_0217;
      var $use_fuji_rotate_0_be = $use_fuji_rotate_0216;
      var $user_flip_0_be = $user_flip_0215;
      var $user_sat_0_be = $user_sat_0214;
      var $user_black_0_be = $user_black_0213;
      var $user_qual_0_be = $user_qual_0212;
      var $identify_only_0_be = $identify_only_0211;
      var $thumbnail_only_0_be = $thumbnail_only_0210;
      var $timestamp_only_0_be = $timestamp_only_0209;
      var $multi_out_1 = $multi_out_0;
      var $use_camera_matrix_1 = $use_camera_matrix_0;
      label = 28;
      break;
     case 42:
      var $40 = HEAP32[5427972 >> 2];
      var $inc188 = $40 + 1 | 0;
      HEAP32[5427972 >> 2] = $inc188;
      label = 43;
      break;
     case 43:
      var $41 = HEAP32[5427972 >> 2];
      var $inc190 = $41 + 1 | 0;
      HEAP32[5427972 >> 2] = $inc190;
      var $42 = $inc190;
      label = 44;
      break;
     case 44:
      var $42;
      var $inc192 = $42 + 1 | 0;
      HEAP32[5427972 >> 2] = $inc192;
      label = 45;
      break;
     case 45:
      var $arg_0_be = $inc;
      var $dark_frame_0_be = $dark_frame_0220;
      var $bpfile_0_be = $bpfile_0219;
      var $read_from_stdin_0_be = $read_from_stdin_0218;
      var $write_to_stdout_0_be = $write_to_stdout_0217;
      var $use_fuji_rotate_0_be = 0;
      var $user_flip_0_be = $user_flip_0215;
      var $user_sat_0_be = $user_sat_0214;
      var $user_black_0_be = $user_black_0213;
      var $user_qual_0_be = $user_qual_0212;
      var $identify_only_0_be = $identify_only_0211;
      var $thumbnail_only_0_be = $thumbnail_only_0210;
      var $timestamp_only_0_be = $timestamp_only_0209;
      var $multi_out_1 = $multi_out_0;
      var $use_camera_matrix_1 = $use_camera_matrix_0;
      label = 28;
      break;
     case 46:
      HEAP8[5262956] = 1;
      var $arg_0_be = $inc;
      var $dark_frame_0_be = $dark_frame_0220;
      var $bpfile_0_be = $bpfile_0219;
      var $read_from_stdin_0_be = $read_from_stdin_0218;
      var $write_to_stdout_0_be = $write_to_stdout_0217;
      var $use_fuji_rotate_0_be = $use_fuji_rotate_0216;
      var $user_flip_0_be = $user_flip_0215;
      var $user_sat_0_be = $user_sat_0214;
      var $user_black_0_be = $user_black_0213;
      var $user_qual_0_be = $user_qual_0212;
      var $identify_only_0_be = $identify_only_0211;
      var $thumbnail_only_0_be = $thumbnail_only_0210;
      var $timestamp_only_0_be = $timestamp_only_0209;
      var $multi_out_1 = $multi_out_0;
      var $use_camera_matrix_1 = $use_camera_matrix_0;
      label = 28;
      break;
     case 47:
      HEAP8[5262932] = 1;
      var $arg_0_be = $inc;
      var $dark_frame_0_be = $dark_frame_0220;
      var $bpfile_0_be = $bpfile_0219;
      var $read_from_stdin_0_be = $read_from_stdin_0218;
      var $write_to_stdout_0_be = $write_to_stdout_0217;
      var $use_fuji_rotate_0_be = $use_fuji_rotate_0216;
      var $user_flip_0_be = $user_flip_0215;
      var $user_sat_0_be = $user_sat_0214;
      var $user_black_0_be = $user_black_0213;
      var $user_qual_0_be = $user_qual_0212;
      var $identify_only_0_be = $identify_only_0211;
      var $thumbnail_only_0_be = $thumbnail_only_0210;
      var $timestamp_only_0_be = $timestamp_only_0209;
      var $multi_out_1 = $multi_out_0;
      var $use_camera_matrix_1 = $use_camera_matrix_0;
      label = 28;
      break;
     case 48:
      HEAP8[5262956] = 1;
      HEAPF64[tempDoublePtr >> 3] = 1, HEAP32[5398884 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5398888 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
      HEAPF64[tempDoublePtr >> 3] = 1, HEAP32[5398892 >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[5398896 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
      label = 49;
      break;
     case 49:
      HEAP8[5262940] = 1;
      var $arg_0_be = $inc;
      var $dark_frame_0_be = $dark_frame_0220;
      var $bpfile_0_be = $bpfile_0219;
      var $read_from_stdin_0_be = $read_from_stdin_0218;
      var $write_to_stdout_0_be = $write_to_stdout_0217;
      var $use_fuji_rotate_0_be = $use_fuji_rotate_0216;
      var $user_flip_0_be = $user_flip_0215;
      var $user_sat_0_be = $user_sat_0214;
      var $user_black_0_be = $user_black_0213;
      var $user_qual_0_be = $user_qual_0212;
      var $identify_only_0_be = $identify_only_0211;
      var $thumbnail_only_0_be = $thumbnail_only_0210;
      var $timestamp_only_0_be = $timestamp_only_0209;
      var $multi_out_1 = $multi_out_0;
      var $use_camera_matrix_1 = $use_camera_matrix_0;
      label = 28;
      break;
     case 50:
      var $43 = HEAP32[_stderr >> 2];
      var $call199 = _fprintf($43, 5574216, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $conv46, tempInt));
      var $retval_0 = 1;
      label = 223;
      break;
     case 51:
      var $use_camera_matrix_2;
      var $multi_out_2;
      var $arg_0_lcssa;
      var $dark_frame_0_lcssa;
      var $bpfile_0_lcssa;
      var $read_from_stdin_0_lcssa;
      var $write_to_stdout_0_lcssa;
      var $use_fuji_rotate_0_lcssa;
      var $user_flip_0_lcssa;
      var $user_sat_0_lcssa;
      var $user_black_0_lcssa;
      var $user_qual_0_lcssa;
      var $identify_only_0_lcssa;
      var $thumbnail_only_0_lcssa;
      var $timestamp_only_0_lcssa;
      var $cmp201 = ($use_camera_matrix_2 | 0) < 0;
      if ($cmp201) {
        var $multi_out_230 = $multi_out_2;
        var $arg_0_lcssa32 = $arg_0_lcssa;
        var $dark_frame_0_lcssa34 = $dark_frame_0_lcssa;
        var $bpfile_0_lcssa36 = $bpfile_0_lcssa;
        var $read_from_stdin_0_lcssa38 = $read_from_stdin_0_lcssa;
        var $write_to_stdout_0_lcssa40 = $write_to_stdout_0_lcssa;
        var $use_fuji_rotate_0_lcssa42 = $use_fuji_rotate_0_lcssa;
        var $user_flip_0_lcssa44 = $user_flip_0_lcssa;
        var $user_sat_0_lcssa46 = $user_sat_0_lcssa;
        var $user_black_0_lcssa48 = $user_black_0_lcssa;
        var $user_qual_0_lcssa50 = $user_qual_0_lcssa;
        var $identify_only_0_lcssa52 = $identify_only_0_lcssa;
        var $thumbnail_only_0_lcssa54 = $thumbnail_only_0_lcssa;
        var $timestamp_only_0_lcssa56 = $timestamp_only_0_lcssa;
        label = 52;
        break;
      } else {
        var $use_camera_matrix_3 = $use_camera_matrix_2;
        var $multi_out_229 = $multi_out_2;
        var $arg_0_lcssa31 = $arg_0_lcssa;
        var $dark_frame_0_lcssa33 = $dark_frame_0_lcssa;
        var $bpfile_0_lcssa35 = $bpfile_0_lcssa;
        var $read_from_stdin_0_lcssa37 = $read_from_stdin_0_lcssa;
        var $write_to_stdout_0_lcssa39 = $write_to_stdout_0_lcssa;
        var $use_fuji_rotate_0_lcssa41 = $use_fuji_rotate_0_lcssa;
        var $user_flip_0_lcssa43 = $user_flip_0_lcssa;
        var $user_sat_0_lcssa45 = $user_sat_0_lcssa;
        var $user_black_0_lcssa47 = $user_black_0_lcssa;
        var $user_qual_0_lcssa49 = $user_qual_0_lcssa;
        var $identify_only_0_lcssa51 = $identify_only_0_lcssa;
        var $thumbnail_only_0_lcssa53 = $thumbnail_only_0_lcssa;
        var $timestamp_only_0_lcssa55 = $timestamp_only_0_lcssa;
        label = 53;
        break;
      }
     case 52:
      var $timestamp_only_0_lcssa56;
      var $thumbnail_only_0_lcssa54;
      var $identify_only_0_lcssa52;
      var $user_qual_0_lcssa50;
      var $user_black_0_lcssa48;
      var $user_sat_0_lcssa46;
      var $user_flip_0_lcssa44;
      var $use_fuji_rotate_0_lcssa42;
      var $write_to_stdout_0_lcssa40;
      var $read_from_stdin_0_lcssa38;
      var $bpfile_0_lcssa36;
      var $dark_frame_0_lcssa34;
      var $arg_0_lcssa32;
      var $multi_out_230;
      var $_b6 = HEAP8[5243552];
      var $44 = $_b6 & 1;
      var $use_camera_matrix_3 = $44;
      var $multi_out_229 = $multi_out_230;
      var $arg_0_lcssa31 = $arg_0_lcssa32;
      var $dark_frame_0_lcssa33 = $dark_frame_0_lcssa34;
      var $bpfile_0_lcssa35 = $bpfile_0_lcssa36;
      var $read_from_stdin_0_lcssa37 = $read_from_stdin_0_lcssa38;
      var $write_to_stdout_0_lcssa39 = $write_to_stdout_0_lcssa40;
      var $use_fuji_rotate_0_lcssa41 = $use_fuji_rotate_0_lcssa42;
      var $user_flip_0_lcssa43 = $user_flip_0_lcssa44;
      var $user_sat_0_lcssa45 = $user_sat_0_lcssa46;
      var $user_black_0_lcssa47 = $user_black_0_lcssa48;
      var $user_qual_0_lcssa49 = $user_qual_0_lcssa50;
      var $identify_only_0_lcssa51 = $identify_only_0_lcssa52;
      var $thumbnail_only_0_lcssa53 = $thumbnail_only_0_lcssa54;
      var $timestamp_only_0_lcssa55 = $timestamp_only_0_lcssa56;
      label = 53;
      break;
     case 53:
      var $timestamp_only_0_lcssa55;
      var $thumbnail_only_0_lcssa53;
      var $identify_only_0_lcssa51;
      var $user_qual_0_lcssa49;
      var $user_black_0_lcssa47;
      var $user_sat_0_lcssa45;
      var $user_flip_0_lcssa43;
      var $use_fuji_rotate_0_lcssa41;
      var $write_to_stdout_0_lcssa39;
      var $read_from_stdin_0_lcssa37;
      var $bpfile_0_lcssa35;
      var $dark_frame_0_lcssa33;
      var $arg_0_lcssa31;
      var $multi_out_229;
      var $use_camera_matrix_3;
      var $cmp205 = ($arg_0_lcssa31 | 0) == ($argc | 0);
      if ($cmp205) {
        label = 54;
        break;
      } else {
        label = 55;
        break;
      }
     case 54:
      var $45 = HEAP32[_stderr >> 2];
      var $46 = _fwrite(5574192, 21, 1, $45);
      var $retval_0 = 1;
      label = 223;
      break;
     case 55:
      var $tobool210 = ($write_to_stdout_0_lcssa39 | 0) != 0;
      if ($tobool210) {
        label = 56;
        break;
      } else {
        label = 57;
        break;
      }
     case 56:
      var $call212 = _isatty(1);
      var $tobool213 = ($call212 | 0) == 0;
      if ($tobool213) {
        label = 57;
        break;
      } else {
        label = 59;
        break;
      }
     case 57:
      var $cmp219169 = ($arg_0_lcssa31 | 0) < ($argc | 0);
      if ($cmp219169) {
        label = 58;
        break;
      } else {
        var $retval_0 = 0;
        label = 223;
        break;
      }
     case 58:
      var $cmp246 = ($user_flip_0_lcssa43 | 0) > -1;
      var $tobool255 = ($timestamp_only_0_lcssa55 | 0) == 0;
      var $tobool274 = ($thumbnail_only_0_lcssa53 | 0) != 0;
      var $tobool302 = ($identify_only_0_lcssa51 | 0) != 0;
      var $tobool433 = ($use_fuji_rotate_0_lcssa41 | 0) == 0;
      var $tobool588 = ($read_from_stdin_0_lcssa37 | 0) == 0;
      var $tobool635 = ($dark_frame_0_lcssa33 | 0) == 0;
      var $cmp642 = ($user_qual_0_lcssa49 | 0) > -1;
      var $cmp669 = ($user_black_0_lcssa47 | 0) > -1;
      var $cmp682 = ($user_sat_0_lcssa45 | 0) > 0;
      var $tobool262 = ($identify_only_0_lcssa51 | 0) == 0;
      var $modtime = $ut + 4 | 0;
      var $actime = $ut | 0;
      var $tobool821 = ($multi_out_229 | 0) == 0;
      var $tobool549 = ($use_camera_matrix_3 | 0) != 0;
      var $arg_4170 = $arg_0_lcssa31;
      label = 60;
      break;
     case 59:
      var $47 = HEAP32[_stderr >> 2];
      var $48 = _fwrite(5574148, 41, 1, $47);
      var $retval_0 = 1;
      label = 223;
      break;
     case 60:
      var $arg_4170;
      HEAP32[5245032 >> 2] = 0;
      HEAP32[5264108 >> 2] = 0;
      HEAP32[5262948 >> 2] = 0;
      HEAP32[5263448 >> 2] = 0;
      var $49 = HEAP32[_stdout >> 2];
      HEAP32[5262952 >> 2] = $49;
      var $call222 = (tempInt = setjmpId++, mySetjmpIds[tempInt] = 1, setjmpLabels[tempInt] = label, HEAP32[5427928 >> 2] = tempInt, 0);
      label = 224;
      break;
     case 224:
      var $tobool223 = ($call222 | 0) == 0;
      if ($tobool223) {
        label = 65;
        break;
      } else {
        label = 61;
        break;
      }
     case 61:
      var $50 = HEAP32[5264116 >> 2];
      var $call225 = _fileno($50);
      var $cmp226 = ($call225 | 0) > 2;
      if ($cmp226) {
        label = 62;
        break;
      } else {
        label = 63;
        break;
      }
     case 62:
      var $51 = HEAP32[5264116 >> 2];
      var $call229 = _fclose($51);
      label = 63;
      break;
     case 63:
      var $52 = HEAP32[5262952 >> 2];
      var $call231 = _fileno($52);
      var $cmp232 = ($call231 | 0) > 2;
      if ($cmp232) {
        label = 64;
        break;
      } else {
        var $ofname_0 = 0;
        var $status_4 = 1;
        label = 210;
        break;
      }
     case 64:
      var $53 = HEAP32[5262952 >> 2];
      var $call235 = _fclose($53);
      var $ofname_0 = 0;
      var $status_4 = 1;
      label = 210;
      break;
     case 65:
      var $arrayidx238 = $argv + ($arg_4170 << 2) | 0;
      var $54 = HEAP32[$arrayidx238 >> 2];
      HEAP32[5264120 >> 2] = $54;
      var $call239 = _fopen($54, 5579008);
      HEAP32[5264116 >> 2] = $call239;
      var $tobool240 = ($call239 | 0) == 0;
      if ($tobool240) {
        label = 66;
        break;
      } else {
        label = 67;
        break;
      }
     case 66:
      var $55 = HEAP32[5264120 >> 2];
      _perror($55);
      var $arg_5 = $arg_4170;
      var $status_5 = 1;
      label = 222;
      break;
     case 67:
      _identify();
      var $56 = HEAP32[5264100 >> 2];
      var $lnot244 = ($56 | 0) == 0;
      var $lnot_ext245 = $lnot244 & 1;
      if ($cmp246) {
        label = 69;
        break;
      } else {
        label = 68;
        break;
      }
     case 68:
      var $_pre22 = HEAP32[5403048 >> 2];
      var $57 = $_pre22;
      label = 70;
      break;
     case 69:
      HEAP32[5403048 >> 2] = $user_flip_0_lcssa43;
      var $57 = $user_flip_0_lcssa43;
      label = 70;
      break;
     case 70:
      var $57;
      var $add250 = $57 + 3600 | 0;
      var $rem = ($add250 | 0) % 360;
      if (($rem | 0) == 270) {
        label = 71;
        break;
      } else if (($rem | 0) == 180) {
        label = 72;
        break;
      } else if (($rem | 0) == 90) {
        label = 73;
        break;
      } else {
        label = 74;
        break;
      }
     case 71:
      HEAP32[5403048 >> 2] = 5;
      label = 74;
      break;
     case 72:
      HEAP32[5403048 >> 2] = 3;
      label = 74;
      break;
     case 73:
      HEAP32[5403048 >> 2] = 6;
      label = 74;
      break;
     case 74:
      if ($tobool255) {
        label = 82;
        break;
      } else {
        label = 75;
        break;
      }
     case 75:
      var $58 = HEAP32[5243568 >> 2];
      var $lnot258 = ($58 | 0) == 0;
      var $lnot_ext259 = $lnot258 & 1;
      if ($lnot258) {
        label = 76;
        break;
      } else {
        label = 77;
        break;
      }
     case 76:
      var $59 = HEAP32[_stderr >> 2];
      var $60 = HEAP32[5264120 >> 2];
      var $call261 = _fprintf($59, 5574124, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $60, tempInt));
      var $status_2 = $lnot_ext259;
      label = 133;
      break;
     case 77:
      if ($tobool262) {
        label = 79;
        break;
      } else {
        label = 78;
        break;
      }
     case 78:
      var $61 = HEAP32[5244924 >> 2];
      var $62 = HEAP32[5264120 >> 2];
      var $call264 = _printf(5574108, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $58, HEAP32[tempInt + 4 >> 2] = $61, HEAP32[tempInt + 8 >> 2] = $62, tempInt));
      var $status_2 = $lnot_ext259;
      label = 133;
      break;
     case 79:
      var $_b5 = HEAP8[5243532];
      if ($_b5) {
        label = 80;
        break;
      } else {
        var $65 = $58;
        label = 81;
        break;
      }
     case 80:
      var $63 = HEAP32[_stderr >> 2];
      var $64 = HEAP32[5264120 >> 2];
      var $call268 = _fprintf($63, 5574088, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $64, HEAP32[tempInt + 4 >> 2] = $58, tempInt));
      var $_pre21 = HEAP32[5243568 >> 2];
      var $65 = $_pre21;
      label = 81;
      break;
     case 81:
      var $65;
      HEAP32[$modtime >> 2] = $65;
      HEAP32[$actime >> 2] = $65;
      var $66 = HEAP32[5264120 >> 2];
      var $call270 = _utime($66, $ut);
      var $status_2 = $lnot_ext259;
      label = 133;
      break;
     case 82:
      if ($tobool274) {
        label = 84;
        break;
      } else {
        label = 83;
        break;
      }
     case 83:
      var $_pre23 = HEAP32[5263692 >> 2];
      var $status_1 = $lnot_ext245;
      var $73 = $_pre23;
      label = 88;
      break;
     case 84:
      var $67 = HEAP32[5244044 >> 2];
      var $lnot277 = ($67 | 0) == 0;
      var $lnot_ext278 = $lnot277 & 1;
      if ($lnot277) {
        label = 85;
        break;
      } else {
        label = 86;
        break;
      }
     case 85:
      var $68 = HEAP32[_stderr >> 2];
      var $69 = HEAP32[5264120 >> 2];
      var $call280 = _fprintf($68, 5574056, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $69, tempInt));
      var $status_2 = $lnot_ext278;
      label = 133;
      break;
     case 86:
      var $70 = HEAP32[5244052 >> 2];
      var $tobool282 = ($70 | 0) == 0;
      if ($tobool282) {
        label = 193;
        break;
      } else {
        label = 87;
        break;
      }
     case 87:
      HEAP32[5263692 >> 2] = $70;
      HEAP32[5428492 >> 2] = $67;
      var $71 = HEAP16[5244060 >> 1];
      HEAP16[5398712 >> 1] = $71;
      var $72 = HEAP16[5244040 >> 1];
      HEAP16[5242964 >> 1] = $72;
      HEAP32[5427632 >> 2] = 0;
      var $status_1 = $lnot_ext278;
      var $73 = $70;
      label = 88;
      break;
     case 88:
      var $73;
      var $status_1;
      var $cmp289 = ($73 | 0) == 8;
      if ($cmp289) {
        label = 89;
        break;
      } else {
        label = 90;
        break;
      }
     case 89:
      var $74 = HEAP16[5398712 >> 1];
      var $and = $74 & 1;
      var $add294 = $and + $74 & 65535;
      HEAP16[5398712 >> 1] = $add294;
      var $75 = HEAP16[5242964 >> 1];
      var $and297 = $75 & 1;
      var $add299 = $and297 + $75 & 65535;
      HEAP16[5242964 >> 1] = $add299;
      label = 90;
      break;
     case 90:
      var $_b4 = HEAP8[5243532];
      var $or_cond = $tobool302 & $_b4;
      var $or_cond_not = $or_cond ^ 1;
      var $76 = HEAP8[5263628];
      var $tobool307 = $76 << 24 >> 24 == 0;
      var $or_cond141 = $tobool307 | $or_cond_not;
      if ($or_cond141) {
        label = 102;
        break;
      } else {
        label = 91;
        break;
      }
     case 91:
      var $77 = HEAP32[5264120 >> 2];
      var $call309 = _printf(5574040, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $77, tempInt));
      var $call310 = _ctime(5243568);
      var $call311 = _printf(5574024, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $call310, tempInt));
      var $call312 = _printf(5574008, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = 5263628, HEAP32[tempInt + 4 >> 2] = 5263372, tempInt));
      var $78 = HEAP8[5561404];
      var $tobool313 = $78 << 24 >> 24 == 0;
      if ($tobool313) {
        label = 93;
        break;
      } else {
        label = 92;
        break;
      }
     case 92:
      var $call315 = _printf(5573996, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 5561404, tempInt));
      label = 93;
      break;
     case 93:
      var $79 = HEAP32[5427976 >> 2];
      var $tobool317 = ($79 | 0) == 0;
      if ($tobool317) {
        label = 95;
        break;
      } else {
        label = 94;
        break;
      }
     case 94:
      var $call319 = _printf(5573980, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
      var $80 = HEAP32[5427976 >> 2];
      var $shr = $80 >>> 24;
      var $call326 = _printf(5573972, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $shr, HEAP32[tempInt + 4 >> 2] = 46, tempInt));
      var $81 = HEAP32[5427976 >> 2];
      var $shr_1 = $81 >>> 16;
      var $and324_1 = $shr_1 & 255;
      var $call326_1 = _printf(5573972, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $and324_1, HEAP32[tempInt + 4 >> 2] = 46, tempInt));
      var $82 = HEAP32[5427976 >> 2];
      var $shr_2 = $82 >>> 8;
      var $and324_2 = $shr_2 & 255;
      var $call326_2 = _printf(5573972, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $and324_2, HEAP32[tempInt + 4 >> 2] = 46, tempInt));
      var $83 = HEAP32[5427976 >> 2];
      var $and324_3 = $83 & 255;
      var $call326_3 = _printf(5573972, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $and324_3, HEAP32[tempInt + 4 >> 2] = 10, tempInt));
      label = 95;
      break;
     case 95:
      var $84 = HEAPF32[5264096 >> 2];
      var $conv331 = $84 & -1;
      var $call332 = _printf(5573956, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $conv331, tempInt));
      var $call333 = _printf(5573944, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
      var $85 = HEAPF32[5244912 >> 2];
      var $cmp334 = $85 > 0;
      var $cmp337 = $85 < 1;
      var $or_cond1 = $cmp334 & $cmp337;
      if ($or_cond1) {
        label = 96;
        break;
      } else {
        var $87 = $85;
        label = 97;
        break;
      }
     case 96:
      var $call340 = _printf(5573940, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
      var $86 = HEAPF32[5244912 >> 2];
      var $div341 = 1 / $86;
      HEAPF32[5244912 >> 2] = $div341;
      var $87 = $div341;
      label = 97;
      break;
     case 97:
      var $87;
      var $conv343 = $87;
      var $call344 = _printf(5573924, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAPF64[tempDoublePtr >> 3] = $conv343, HEAP32[tempInt >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[tempInt + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2], tempInt));
      var $88 = HEAPF32[5561468 >> 2];
      var $conv345 = $88;
      var $call346 = _printf(5573904, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAPF64[tempDoublePtr >> 3] = $conv345, HEAP32[tempInt >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[tempInt + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2], tempInt));
      var $89 = HEAPF32[5403044 >> 2];
      var $conv347 = $89;
      var $call348 = _printf(5573880, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAPF64[tempDoublePtr >> 3] = $conv347, HEAP32[tempInt >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[tempInt + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2], tempInt));
      var $90 = HEAP32[5245636 >> 2];
      var $tobool349 = ($90 | 0) != 0;
      var $cond350 = $tobool349 ? 5573848 : 5573844;
      var $call351 = _printf(5573852, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $cond350, tempInt));
      var $91 = HEAP32[5264100 >> 2];
      var $call352 = _printf(5573816, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $91, tempInt));
      var $92 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5245656 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5245660 >> 2], HEAPF64[tempDoublePtr >> 3]);
      var $cmp353 = $92 != 1;
      if ($cmp353) {
        label = 98;
        break;
      } else {
        label = 99;
        break;
      }
     case 98:
      var $call356 = _printf(5573788, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAPF64[tempDoublePtr >> 3] = $92, HEAP32[tempInt >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[tempInt + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2], tempInt));
      label = 99;
      break;
     case 99:
      var $93 = HEAP32[5244044 >> 2];
      var $tobool358 = ($93 | 0) == 0;
      if ($tobool358) {
        label = 101;
        break;
      } else {
        label = 100;
        break;
      }
     case 100:
      var $94 = HEAP16[5244040 >> 1];
      var $conv360 = $94 & 65535;
      var $95 = HEAP16[5244060 >> 1];
      var $conv361 = $95 & 65535;
      var $call362 = _printf(5573764, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $conv360, HEAP32[tempInt + 4 >> 2] = $conv361, tempInt));
      label = 101;
      break;
     case 101:
      var $96 = HEAP16[5245028 >> 1];
      var $conv364 = $96 & 65535;
      var $97 = HEAP16[5245036 >> 1];
      var $conv365 = $97 & 65535;
      var $call366 = _printf(5573740, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $conv364, HEAP32[tempInt + 4 >> 2] = $conv365, tempInt));
      label = 104;
      break;
     case 102:
      if ($lnot244) {
        label = 103;
        break;
      } else {
        label = 105;
        break;
      }
     case 103:
      var $98 = HEAP32[_stderr >> 2];
      var $99 = HEAP32[5264120 >> 2];
      var $call370 = _fprintf($98, 5573712, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $99, tempInt));
      label = 104;
      break;
     case 104:
      var $_pr = HEAP32[5264100 >> 2];
      var $tobool373 = ($_pr | 0) == 0;
      if ($tobool373) {
        var $status_2 = $status_1;
        label = 133;
        break;
      } else {
        label = 105;
        break;
      }
     case 105:
      var $100 = HEAP32[5427632 >> 2];
      var $tobool376 = ($100 | 0) == 0;
      if ($tobool376) {
        var $107 = 0;
        label = 109;
        break;
      } else {
        label = 106;
        break;
      }
     case 106:
      var $_b = HEAP8[5398716];
      var $101 = $_b & 1;
      var $102 = $101 | $identify_only_0_lcssa51;
      var $103 = ($102 | 0) == 0;
      if ($103) {
        label = 107;
        break;
      } else {
        var $107 = $_b;
        label = 109;
        break;
      }
     case 107:
      var $104 = HEAPF32[5244064 >> 2];
      var $tobool380 = $104 != 0;
      var $105 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5573248 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5573252 >> 2], HEAPF64[tempDoublePtr >> 3]);
      var $cmp381 = $105 != 1;
      var $or_cond2 = $tobool380 | $cmp381;
      if ($or_cond2) {
        var $107 = 1;
        label = 109;
        break;
      } else {
        label = 108;
        break;
      }
     case 108:
      var $106 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5573264 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5573268 >> 2], HEAPF64[tempDoublePtr >> 3]);
      var $cmp384 = $106 != 1;
      var $107 = $cmp384;
      label = 109;
      break;
     case 109:
      var $107;
      var $conv388 = $107 & 1;
      HEAP16[5244916 >> 1] = $conv388;
      var $108 = HEAP16[5398712 >> 1];
      var $conv389 = $108 & 65535;
      var $conv390 = $107 & 1;
      var $add391 = $conv389 + $conv390 | 0;
      var $shr393 = $add391 >>> ($conv390 >>> 0);
      var $conv394 = $shr393 & 65535;
      HEAP16[5264112 >> 1] = $conv394;
      var $109 = HEAP16[5242964 >> 1];
      var $conv395 = $109 & 65535;
      var $conv396 = $107 & 1;
      var $add397 = $conv396 + $conv395 | 0;
      var $shr399 = $add397 >>> ($conv396 >>> 0);
      var $conv400 = $shr399 & 65535;
      HEAP16[5264092 >> 1] = $conv400;
      if ($tobool302) {
        label = 110;
        break;
      } else {
        label = 134;
        break;
      }
     case 110:
      var $_b3 = HEAP8[5243532];
      if ($_b3) {
        label = 111;
        break;
      } else {
        label = 132;
        break;
      }
     case 111:
      var $110 = HEAP32[5427972 >> 2];
      var $cmp405 = ($110 | 0) == 3;
      if ($cmp405) {
        label = 112;
        break;
      } else {
        var $115 = $108;
        var $114 = $109;
        label = 115;
        break;
      }
     case 112:
      HEAP16[5398900 >> 1] = 0;
      HEAP16[5263700 >> 1] = 0;
      HEAP16[5243564 >> 1] = 0;
      var $111 = HEAP16[5245036 >> 1];
      HEAP16[5398712 >> 1] = $111;
      var $112 = HEAP16[5245028 >> 1];
      var $conv409 = $112 & 65535;
      var $mul = $conv409 << 3;
      var $113 = HEAP32[5244036 >> 2];
      var $div410 = Math.floor(($mul >>> 0) / ($113 >>> 0));
      var $cmp411 = $conv395 >>> 0 > $div410 >>> 0;
      if ($cmp411) {
        label = 114;
        break;
      } else {
        label = 113;
        break;
      }
     case 113:
      var $conv417 = $div410 & 65535;
      HEAP16[5242964 >> 1] = $conv417;
      var $115 = $111;
      var $114 = $conv417;
      label = 115;
      break;
     case 114:
      HEAP16[5242964 >> 1] = $112;
      var $115 = $111;
      var $114 = $112;
      label = 115;
      break;
     case 115:
      var $114;
      var $115;
      var $conv421 = $115 & 65535;
      var $add423 = $conv396 + $conv421 | 0;
      var $shr425 = $add423 >>> ($conv396 >>> 0);
      var $conv426 = $shr425 & 65535;
      HEAP16[5264112 >> 1] = $conv426;
      var $conv427 = $114 & 65535;
      var $add429 = $conv396 + $conv427 | 0;
      var $shr431 = $add429 >>> ($conv396 >>> 0);
      var $conv432 = $shr431 & 65535;
      HEAP16[5264092 >> 1] = $conv432;
      if ($tobool433) {
        var $120 = $conv426;
        var $119 = $conv432;
        label = 122;
        break;
      } else {
        label = 116;
        break;
      }
     case 116:
      var $116 = HEAP16[5398900 >> 1];
      var $tobool435 = $116 << 16 >> 16 == 0;
      if ($tobool435) {
        label = 118;
        break;
      } else {
        label = 117;
        break;
      }
     case 117:
      var $conv437 = $116 & 65535;
      var $sub438 = $conv437 - 1 | 0;
      var $add440 = $sub438 + $conv396 | 0;
      var $shr442 = $add440 >> $conv396;
      var $conv443 = $shr442 & 65535;
      HEAP16[5398900 >> 1] = $conv443;
      var $conv444 = $shr442 & 65535;
      var $conv445 = $conv444 | 0;
      var $div447 = $conv445 / .7071067811865476;
      var $conv448 = $div447 >= 0 ? Math.floor($div447) : Math.ceil($div447);
      HEAP16[5264092 >> 1] = $conv448;
      var $conv449 = $shr425 & 65535;
      var $conv450 = $shr442 & 65535;
      var $sub451 = $conv449 - $conv450 | 0;
      var $conv452 = $sub451 | 0;
      var $div454 = $conv452 / .7071067811865476;
      var $conv455 = $div454 >= 0 ? Math.floor($div454) : Math.ceil($div454);
      HEAP16[5264112 >> 1] = $conv455;
      var $120 = $conv455;
      var $119 = $conv448;
      label = 122;
      break;
     case 118:
      var $117 = (HEAP32[tempDoublePtr >> 2] = HEAP32[5245656 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[5245660 >> 2], HEAPF64[tempDoublePtr >> 3]);
      var $cmp457 = $117 < 1;
      if ($cmp457) {
        label = 119;
        break;
      } else {
        var $118 = $conv426;
        label = 120;
        break;
      }
     case 119:
      var $conv460 = $shr425 & 65535;
      var $conv461 = $conv460 | 0;
      var $div462 = $conv461 / $117;
      var $add463 = $div462 + .5;
      var $conv464 = $add463 >= 0 ? Math.floor($add463) : Math.ceil($add463);
      HEAP16[5264112 >> 1] = $conv464;
      var $118 = $conv464;
      label = 120;
      break;
     case 120:
      var $118;
      var $cmp466 = $117 > 1;
      if ($cmp466) {
        label = 121;
        break;
      } else {
        var $120 = $118;
        var $119 = $conv432;
        label = 122;
        break;
      }
     case 121:
      var $conv469 = $shr431 & 65535;
      var $conv470 = $conv469 | 0;
      var $mul471 = $117 * $conv470;
      var $add472 = $mul471 + .5;
      var $conv473 = $add472 >= 0 ? Math.floor($add472) : Math.ceil($add472);
      HEAP16[5264092 >> 1] = $conv473;
      var $120 = $118;
      var $119 = $conv473;
      label = 122;
      break;
     case 122:
      var $119;
      var $120;
      var $121 = HEAP32[5403048 >> 2];
      var $and477 = $121 & 4;
      var $tobool478 = ($and477 | 0) == 0;
      if ($tobool478) {
        label = 124;
        break;
      } else {
        label = 123;
        break;
      }
     case 123:
      HEAP16[5264092 >> 1] = $120;
      HEAP16[5264112 >> 1] = $119;
      label = 124;
      break;
     case 124:
      var $call495 = _printf(5573688, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $conv427, HEAP32[tempInt + 4 >> 2] = $conv421, tempInt));
      var $122 = HEAP16[5264092 >> 1];
      var $conv496 = $122 & 65535;
      var $123 = HEAP16[5264112 >> 1];
      var $conv497 = $123 & 65535;
      var $call498 = _printf(5573664, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $conv496, HEAP32[tempInt + 4 >> 2] = $conv497, tempInt));
      var $124 = HEAP32[5560840 >> 2];
      var $call499 = _printf(5573648, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $124, tempInt));
      var $125 = HEAP32[5427632 >> 2];
      var $tobool500 = ($125 | 0) == 0;
      if ($tobool500) {
        label = 127;
        break;
      } else {
        label = 125;
        break;
      }
     case 125:
      var $call502 = _printf(5573628, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
      var $i_2165 = 0;
      label = 126;
      break;
     case 126:
      var $i_2165;
      var $shr507 = $i_2165 >> 1;
      var $and508 = $i_2165 & 1;
      var $call509 = _fcol($shr507, $and508);
      var $arrayidx510 = $call509 + 5560896 | 0;
      var $126 = HEAP8[$arrayidx510];
      var $conv511 = $126 << 24 >> 24;
      var $127 = HEAP32[_stdout >> 2];
      var $call512 = _fputc($conv511, $127);
      var $inc514 = $i_2165 + 1 | 0;
      var $exitcond = ($inc514 | 0) == 16;
      if ($exitcond) {
        label = 127;
        break;
      } else {
        var $i_2165 = $inc514;
        label = 126;
        break;
      }
     case 127:
      var $call517 = _printf(5573604, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
      var $128 = HEAP32[5560840 >> 2];
      var $cmp519166 = ($128 | 0) > 0;
      if ($cmp519166) {
        var $c_2167 = 0;
        label = 128;
        break;
      } else {
        label = 129;
        break;
      }
     case 128:
      var $c_2167;
      var $arrayidx522 = 5245640 + ($c_2167 << 2) | 0;
      var $129 = HEAPF32[$arrayidx522 >> 2];
      var $conv523 = $129;
      var $call524 = _printf(5577888, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAPF64[tempDoublePtr >> 3] = $conv523, HEAP32[tempInt >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[tempInt + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2], tempInt));
      var $inc526 = $c_2167 + 1 | 0;
      var $130 = HEAP32[5560840 >> 2];
      var $cmp519 = ($inc526 | 0) < ($130 | 0);
      if ($cmp519) {
        var $c_2167 = $inc526;
        label = 128;
        break;
      } else {
        label = 129;
        break;
      }
     case 129:
      var $131 = HEAPF32[5561124 >> 2];
      var $cmp528 = $131 > 0;
      if ($cmp528) {
        label = 130;
        break;
      } else {
        label = 131;
        break;
      }
     case 130:
      var $call531 = _printf(5573580, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
      var $132 = HEAPF32[5561124 >> 2];
      var $conv537 = $132;
      var $call538 = _printf(5577888, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAPF64[tempDoublePtr >> 3] = $conv537, HEAP32[tempInt >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[tempInt + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2], tempInt));
      var $133 = HEAPF32[5561128 >> 2];
      var $conv537_1 = $133;
      var $call538_1 = _printf(5577888, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAPF64[tempDoublePtr >> 3] = $conv537_1, HEAP32[tempInt >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[tempInt + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2], tempInt));
      var $134 = HEAPF32[5561132 >> 2];
      var $conv537_2 = $134;
      var $call538_2 = _printf(5577888, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAPF64[tempDoublePtr >> 3] = $conv537_2, HEAP32[tempInt >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[tempInt + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2], tempInt));
      var $135 = HEAPF32[5561136 >> 2];
      var $conv537_3 = $135;
      var $call538_3 = _printf(5577888, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAPF64[tempDoublePtr >> 3] = $conv537_3, HEAP32[tempInt >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[tempInt + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2], tempInt));
      label = 131;
      break;
     case 131:
      var $136 = HEAP32[_stdout >> 2];
      var $call543 = _fputc(10, $136);
      var $status_2 = $status_1;
      label = 133;
      break;
     case 132:
      var $137 = HEAP32[5264120 >> 2];
      var $call545 = _printf(5573556, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $137, HEAP32[tempInt + 4 >> 2] = 5263628, HEAP32[tempInt + 8 >> 2] = 5263372, tempInt));
      var $status_2 = $status_1;
      label = 133;
      break;
     case 133:
      var $status_2;
      var $138 = HEAP32[5264116 >> 2];
      var $call547 = _fclose($138);
      var $arg_5 = $arg_4170;
      var $status_5 = $status_2;
      label = 222;
      break;
     case 134:
      var $139 = HEAPF32[5560844 >> 2];
      var $cmp552 = $139 > .25;
      var $or_cond142 = $tobool549 & $cmp552;
      if ($or_cond142) {
        label = 135;
        break;
      } else {
        label = 136;
        break;
      }
     case 135:
      for (var $$src = 5560844 >> 2, $$dest = 5244964 >> 2, $$stop = $$src + 12; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src];
      }
      HEAP32[5245040 >> 2] = 0;
      label = 136;
      break;
     case 136:
      var $140 = HEAP32[5263444 >> 2];
      var $tobool556 = ($140 | 0) == 0;
      if ($tobool556) {
        var $141 = $100;
        label = 138;
        break;
      } else {
        label = 137;
        break;
      }
     case 137:
      var $call558 = _malloc($140);
      HEAP32[5263448 >> 2] = $call558;
      _merror($call558, 5573548);
      var $_pre = HEAP32[5427632 >> 2];
      var $141 = $_pre;
      label = 138;
      break;
     case 138:
      var $141;
      var $tobool560 = ($141 | 0) != 0;
      var $142 = HEAP32[5560840 >> 2];
      var $cmp562 = ($142 | 0) == 1;
      var $or_cond3 = $tobool560 | $cmp562;
      if ($or_cond3) {
        label = 139;
        break;
      } else {
        label = 140;
        break;
      }
     case 139:
      var $143 = HEAP16[5245036 >> 1];
      var $conv565 = $143 & 65535;
      var $add566 = $conv565 + 7 | 0;
      var $144 = HEAP16[5245028 >> 1];
      var $conv567 = $144 & 65535;
      var $mul568 = $add566 * $conv567 & -1;
      var $call569 = _calloc($mul568, 2);
      var $145 = $call569;
      HEAP32[5245032 >> 2] = $145;
      _merror($call569, 5573548);
      label = 141;
      break;
     case 140:
      var $146 = HEAP16[5264112 >> 1];
      var $conv571 = $146 & 65535;
      var $147 = HEAP16[5264092 >> 1];
      var $conv572 = $147 & 65535;
      var $mul573 = $conv572 * $conv571 & -1;
      var $call574 = _calloc($mul573, 8);
      var $148 = $call574;
      HEAP32[5264108 >> 2] = $148;
      _merror($call574, 5573548);
      label = 141;
      break;
     case 141:
      var $_b2 = HEAP8[5243532];
      if ($_b2) {
        label = 142;
        break;
      } else {
        label = 143;
        break;
      }
     case 142:
      var $149 = HEAP32[_stderr >> 2];
      var $150 = HEAP32[5264120 >> 2];
      var $call578 = _fprintf($149, 5573512, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = 5263628, HEAP32[tempInt + 4 >> 2] = 5263372, HEAP32[tempInt + 8 >> 2] = $150, tempInt));
      label = 143;
      break;
     case 143:
      var $151 = HEAP32[5244920 >> 2];
      var $152 = HEAP32[5264100 >> 2];
      var $cmp580 = $151 >>> 0 < $152 >>> 0;
      if ($cmp580) {
        label = 145;
        break;
      } else {
        label = 144;
        break;
      }
     case 144:
      var $153 = HEAP32[_stderr >> 2];
      var $154 = HEAP32[5264120 >> 2];
      var $call583 = _fprintf($153, 5573444, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $154, HEAP32[tempInt + 4 >> 2] = $151, tempInt));
      label = 145;
      break;
     case 145:
      var $155 = HEAP32[5264116 >> 2];
      var $156 = HEAP32[5428492 >> 2];
      var $call585 = _fseek($155, $156, 0);
      var $157 = HEAP32[5245032 >> 2];
      var $tobool586 = ($157 | 0) == 0;
      var $or_cond143 = $tobool586 | $tobool588;
      if ($or_cond143) {
        label = 147;
        break;
      } else {
        label = 146;
        break;
      }
     case 146:
      var $158 = $157;
      var $159 = HEAP16[5245036 >> 1];
      var $conv590 = $159 & 65535;
      var $160 = HEAP16[5245028 >> 1];
      var $conv591 = $160 & 65535;
      var $mul592 = $conv591 * $conv590 & -1;
      var $161 = HEAP32[_stdin >> 2];
      var $call593 = _fread($158, 2, $mul592, $161);
      label = 148;
      break;
     case 147:
      var $162 = HEAP32[5263692 >> 2];
      var $callee_knr_cast = $162;
      FUNCTION_TABLE[$callee_knr_cast]();
      label = 148;
      break;
     case 148:
      var $163 = HEAP32[5427972 >> 2];
      var $cmp596 = ($163 | 0) == 3;
      if ($cmp596) {
        label = 150;
        break;
      } else {
        label = 149;
        break;
      }
     case 149:
      var $_pre24 = HEAP16[5398712 >> 1];
      var $_pre25 = HEAP16[5242964 >> 1];
      var $169 = $_pre24;
      var $168 = $_pre25;
      label = 153;
      break;
     case 150:
      HEAP16[5398900 >> 1] = 0;
      HEAP16[5263700 >> 1] = 0;
      HEAP16[5243564 >> 1] = 0;
      var $164 = HEAP16[5245036 >> 1];
      HEAP16[5398712 >> 1] = $164;
      var $165 = HEAP16[5242964 >> 1];
      var $conv599 = $165 & 65535;
      var $166 = HEAP16[5245028 >> 1];
      var $conv600 = $166 & 65535;
      var $mul601 = $conv600 << 3;
      var $167 = HEAP32[5244036 >> 2];
      var $div602 = Math.floor(($mul601 >>> 0) / ($167 >>> 0));
      var $cmp603 = $conv599 >>> 0 > $div602 >>> 0;
      if ($cmp603) {
        label = 152;
        break;
      } else {
        label = 151;
        break;
      }
     case 151:
      var $conv609 = $div602 & 65535;
      HEAP16[5242964 >> 1] = $conv609;
      var $169 = $164;
      var $168 = $conv609;
      label = 153;
      break;
     case 152:
      HEAP16[5242964 >> 1] = $166;
      var $169 = $164;
      var $168 = $166;
      label = 153;
      break;
     case 153:
      var $168;
      var $169;
      var $conv613 = $169 & 65535;
      var $170 = HEAP16[5244916 >> 1];
      var $conv614 = $170 & 65535;
      var $add615 = $conv614 + $conv613 | 0;
      var $shr617 = $add615 >>> ($conv614 >>> 0);
      var $conv618 = $shr617 & 65535;
      HEAP16[5264112 >> 1] = $conv618;
      var $conv619 = $168 & 65535;
      var $add621 = $conv614 + $conv619 | 0;
      var $shr623 = $add621 >>> ($conv614 >>> 0);
      var $conv624 = $shr623 & 65535;
      HEAP16[5264092 >> 1] = $conv624;
      var $171 = HEAP32[5245032 >> 2];
      var $tobool625 = ($171 | 0) == 0;
      if ($tobool625) {
        label = 155;
        break;
      } else {
        label = 154;
        break;
      }
     case 154:
      var $conv627 = $shr617 & 65535;
      var $conv628 = $shr623 & 65535;
      var $mul629 = $conv627 * $conv628 & -1;
      var $call630 = _calloc($mul629, 8);
      var $172 = $call630;
      HEAP32[5264108 >> 2] = $172;
      _merror($call630, 5573548);
      _crop_masked_pixels();
      var $173 = HEAP32[5245032 >> 2];
      var $174 = $173;
      _free($174);
      label = 155;
      break;
     case 155:
      var $_b12 = HEAP8[5242880];
      if ($_b12) {
        label = 156;
        break;
      } else {
        label = 157;
        break;
      }
     case 156:
      _remove_zeroes();
      label = 157;
      break;
     case 157:
      _bad_pixels($bpfile_0_lcssa35);
      if ($tobool635) {
        label = 159;
        break;
      } else {
        label = 158;
        break;
      }
     case 158:
      _subtract($dark_frame_0_lcssa33);
      label = 159;
      break;
     case 159:
      var $175 = HEAP16[5398900 >> 1];
      var $lnot639 = $175 << 16 >> 16 == 0;
      var $lnot_ext640 = $lnot639 & 1;
      var $add641140 = $lnot_ext640 | 2;
      var $176 = HEAP32[5560916 >> 2];
      var $177 = HEAP32[5560904 >> 2];
      var $cmp651 = $176 >>> 0 > $177 >>> 0;
      var $_i_3 = $cmp651 ? $177 : $176;
      var $178 = HEAP32[5560908 >> 2];
      var $cmp651_1 = $_i_3 >>> 0 > $178 >>> 0;
      var $_i_3_1 = $cmp651_1 ? $178 : $_i_3;
      var $179 = HEAP32[5560912 >> 2];
      var $cmp651_2 = $_i_3_1 >>> 0 > $179 >>> 0;
      var $_i_3_2 = $cmp651_2 ? $179 : $_i_3_1;
      var $sub664 = $177 - $_i_3_2 | 0;
      var $sub664_1 = $178 - $_i_3_2 | 0;
      var $sub664_2 = $179 - $_i_3_2 | 0;
      var $sub664_3 = $176 - $_i_3_2 | 0;
      var $180 = HEAP32[5561400 >> 2];
      var $add668 = $180 + $_i_3_2 | 0;
      var $user_black_0_add668 = $cmp669 ? $user_black_0_lcssa47 : $add668;
      HEAP32[5561400 >> 2] = $user_black_0_add668;
      var $add678 = $sub664 + $user_black_0_add668 | 0;
      HEAP32[5560904 >> 2] = $add678;
      var $add678_1 = $sub664_1 + $user_black_0_add668 | 0;
      HEAP32[5560908 >> 2] = $add678_1;
      var $add678_2 = $sub664_2 + $user_black_0_add668 | 0;
      HEAP32[5560912 >> 2] = $add678_2;
      var $add678_3 = $sub664_3 + $user_black_0_add668 | 0;
      HEAP32[5560916 >> 2] = $add678_3;
      var $user_qual_0_add641140 = $cmp642 ? $user_qual_0_lcssa49 : $add641140;
      if ($cmp682) {
        label = 160;
        break;
      } else {
        label = 161;
        break;
      }
     case 160:
      HEAP32[5263496 >> 2] = $user_sat_0_lcssa45;
      label = 161;
      break;
     case 161:
      var $_b11 = HEAP8[5264104];
      var $181 = HEAP32[5427972 >> 2];
      if ($_b11) {
        label = 162;
        break;
      } else {
        label = 169;
        break;
      }
     case 162:
      var $tobool688 = ($181 | 0) != 0;
      var $182 = HEAP32[5263692 >> 2];
      var $cmp690 = ($182 | 0) == 92;
      var $or_cond4 = $tobool688 | $cmp690;
      if ($or_cond4) {
        label = 163;
        break;
      } else {
        label = 168;
        break;
      }
     case 163:
      var $183 = HEAP16[5398712 >> 1];
      var $conv694154 = $183 & 65535;
      var $184 = HEAP16[5242964 >> 1];
      var $conv695155 = $184 & 65535;
      var $mul696156 = $conv694154 << 2;
      var $mul697157 = $mul696156 * $conv695155 & -1;
      var $cmp698158 = ($mul697157 | 0) > 0;
      if ($cmp698158) {
        label = 164;
        break;
      } else {
        label = 171;
        break;
      }
     case 164:
      var $_pre16 = HEAP32[5264108 >> 2];
      var $i_5159 = 0;
      label = 165;
      break;
     case 165:
      var $i_5159;
      var $arrayidx702 = $_pre16 + ($i_5159 << 1) | 0;
      var $185 = HEAP16[$arrayidx702 >> 1];
      var $cmp704 = $185 << 16 >> 16 < 0;
      if ($cmp704) {
        label = 166;
        break;
      } else {
        label = 167;
        break;
      }
     case 166:
      HEAP16[$arrayidx702 >> 1] = 0;
      label = 167;
      break;
     case 167:
      var $inc711 = $i_5159 + 1 | 0;
      var $cmp698 = ($inc711 | 0) < ($mul697157 | 0);
      if ($cmp698) {
        var $i_5159 = $inc711;
        label = 165;
        break;
      } else {
        label = 171;
        break;
      }
     case 168:
      _foveon_interpolate();
      label = 171;
      break;
     case 169:
      var $cmp716 = ($181 | 0) < 2;
      if ($cmp716) {
        label = 170;
        break;
      } else {
        label = 171;
        break;
      }
     case 170:
      _scale_colors();
      label = 171;
      break;
     case 171:
      _pre_interpolate();
      var $186 = HEAP32[5427632 >> 2];
      var $tobool721 = ($186 | 0) == 0;
      var $187 = HEAP32[5427972 >> 2];
      var $tobool723 = ($187 | 0) != 0;
      var $or_cond5 = $tobool721 | $tobool723;
      if ($or_cond5) {
        label = 179;
        break;
      } else {
        label = 172;
        break;
      }
     case 172:
      var $cmp725 = ($user_qual_0_add641140 | 0) == 0;
      if ($cmp725) {
        label = 173;
        break;
      } else {
        label = 174;
        break;
      }
     case 173:
      _lin_interpolate();
      label = 179;
      break;
     case 174:
      var $cmp729 = ($user_qual_0_add641140 | 0) == 1;
      var $188 = HEAP32[5560840 >> 2];
      var $cmp732 = ($188 | 0) > 3;
      var $or_cond6 = $cmp729 | $cmp732;
      var $cmp735 = $186 >>> 0 < 1e3;
      var $or_cond7 = $or_cond6 | $cmp735;
      if ($or_cond7) {
        label = 175;
        break;
      } else {
        label = 176;
        break;
      }
     case 175:
      _vng_interpolate();
      label = 179;
      break;
     case 176:
      var $cmp739 = ($user_qual_0_add641140 | 0) == 2;
      if ($cmp739) {
        label = 177;
        break;
      } else {
        label = 178;
        break;
      }
     case 177:
      _ppg_interpolate();
      label = 179;
      break;
     case 178:
      _ahd_interpolate();
      label = 179;
      break;
     case 179:
      var $189 = HEAP32[5263436 >> 2];
      var $tobool747 = ($189 | 0) == 0;
      if ($tobool747) {
        label = 180;
        break;
      } else {
        label = 181;
        break;
      }
     case 180:
      var $_pre26 = HEAP32[5560840 >> 2];
      var $phitmp = ($_pre26 | 0) == 3;
      var $194 = $phitmp;
      label = 184;
      break;
     case 181:
      HEAP32[5560840 >> 2] = 3;
      var $190 = HEAP16[5398712 >> 1];
      var $conv750160 = $190 & 65535;
      var $191 = HEAP16[5242964 >> 1];
      var $conv751161 = $191 & 65535;
      var $mul752162 = $conv751161 * $conv750160 & -1;
      var $cmp753163 = ($mul752162 | 0) == 0;
      if ($cmp753163) {
        var $194 = 1;
        label = 184;
        break;
      } else {
        label = 182;
        break;
      }
     case 182:
      var $_pre20 = HEAP32[5264108 >> 2];
      var $i_6164 = 0;
      label = 183;
      break;
     case 183:
      var $i_6164;
      var $arrayidx757 = $_pre20 + ($i_6164 << 3) + 2 | 0;
      var $192 = HEAP16[$arrayidx757 >> 1];
      var $conv758 = $192 & 65535;
      var $arrayidx760 = $_pre20 + ($i_6164 << 3) + 6 | 0;
      var $193 = HEAP16[$arrayidx760 >> 1];
      var $conv761 = $193 & 65535;
      var $add762 = $conv761 + $conv758 | 0;
      var $shr763 = $add762 >>> 1;
      var $conv764 = $shr763 & 65535;
      HEAP16[$arrayidx757 >> 1] = $conv764;
      var $inc768 = $i_6164 + 1 | 0;
      var $cmp753 = ($inc768 | 0) < ($mul752162 | 0);
      if ($cmp753) {
        var $i_6164 = $inc768;
        label = 183;
        break;
      } else {
        var $194 = 1;
        label = 184;
        break;
      }
     case 184:
      var $194;
      var $_b10 = HEAP8[5264104];
      var $tobool771 = $_b10 ^ 1;
      var $or_cond8 = $194 & $tobool771;
      if ($or_cond8) {
        label = 185;
        break;
      } else {
        var $_b9 = $_b10;
        label = 186;
        break;
      }
     case 185:
      _median_filter();
      var $_b9_pre = HEAP8[5264104];
      var $_b9 = $_b9_pre;
      label = 186;
      break;
     case 186:
      var $_b9;
      var $tobool777 = $_b9 ^ 1;
      var $195 = HEAP32[5398708 >> 2];
      var $cmp779 = ($195 | 0) == 2;
      var $or_cond9 = $cmp779 & $tobool777;
      if ($or_cond9) {
        label = 187;
        break;
      } else {
        var $_b8 = $_b9;
        var $196 = $195;
        label = 188;
        break;
      }
     case 187:
      _blend_highlights();
      var $_b8_pre = HEAP8[5264104];
      var $_pre19 = HEAP32[5398708 >> 2];
      var $_b8 = $_b8_pre;
      var $196 = $_pre19;
      label = 188;
      break;
     case 188:
      var $196;
      var $_b8;
      var $tobool783 = $_b8 ^ 1;
      var $cmp785 = ($196 | 0) > 2;
      var $or_cond10 = $cmp785 & $tobool783;
      if ($or_cond10) {
        label = 189;
        break;
      } else {
        label = 190;
        break;
      }
     case 189:
      _recover_highlights();
      label = 190;
      break;
     case 190:
      if ($tobool433) {
        label = 192;
        break;
      } else {
        label = 191;
        break;
      }
     case 191:
      _fuji_rotate();
      _convert_to_rgb();
      _stretch();
      var $199 = 84;
      var $status_360 = $status_1;
      label = 194;
      break;
     case 192:
      _convert_to_rgb();
      var $199 = 84;
      var $status_360 = $status_1;
      label = 194;
      break;
     case 193:
      var $197 = HEAP32[5264116 >> 2];
      var $call285 = _fseek($197, $67, 0);
      var $198 = HEAP32[5242960 >> 2];
      var $cmp795 = ($198 | 0) == 60;
      if ($cmp795) {
        var $write_ext_0 = 5586544;
        var $write_fun_059 = $198;
        var $status_361 = $lnot_ext278;
        label = 196;
        break;
      } else {
        var $199 = $198;
        var $status_360 = $lnot_ext278;
        label = 194;
        break;
      }
     case 194:
      var $status_360;
      var $199;
      var $_b7 = HEAP8[5262932];
      var $cmp801 = ($199 | 0) == 84;
      var $or_cond11 = $_b7 & $cmp801;
      if ($or_cond11) {
        var $write_ext_0 = 5573436;
        var $write_fun_059 = $199;
        var $status_361 = $status_360;
        label = 196;
        break;
      } else {
        label = 195;
        break;
      }
     case 195:
      var $200 = HEAP32[5560840 >> 2];
      var $mul805 = $200 * 5 & -1;
      var $add_ptr_sum = $mul805 - 5 | 0;
      var $add_ptr806 = $add_ptr_sum + 5573416 | 0;
      var $write_ext_0 = $add_ptr806;
      var $write_fun_059 = $199;
      var $status_361 = $status_360;
      label = 196;
      break;
     case 196:
      var $status_361;
      var $write_fun_059;
      var $write_ext_0;
      var $201 = HEAP32[5264120 >> 2];
      var $call809 = _strlen($201);
      var $add810 = $call809 + 64 | 0;
      var $call811 = _malloc($add810);
      _merror($call811, 5573548);
      if ($tobool210) {
        label = 197;
        break;
      } else {
        label = 198;
        break;
      }
     case 197:
      for (var $$src = 5573400, $$dest = $call811, $$stop = $$src + 16; $$src < $$stop; $$src++, $$dest++) {
        HEAP8[$$dest] = HEAP8[$$src];
      }
      label = 206;
      break;
     case 198:
      var $202 = HEAP32[5264120 >> 2];
      var $call816 = _strcpy($call811, $202);
      var $call817 = _strrchr($call811, 46);
      var $tobool818 = ($call817 | 0) == 0;
      if ($tobool818) {
        label = 200;
        break;
      } else {
        label = 199;
        break;
      }
     case 199:
      HEAP8[$call817] = 0;
      label = 200;
      break;
     case 200:
      if ($tobool821) {
        label = 202;
        break;
      } else {
        label = 201;
        break;
      }
     case 201:
      var $call823 = _strlen($call811);
      var $add_ptr824 = $call811 + $call823 | 0;
      var $203 = HEAP32[5264100 >> 2];
      var $sub825 = $203 - 1 | 0;
      var $call826 = _snprintf(0, 0, 5587088, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $sub825, tempInt));
      var $204 = HEAP32[5244920 >> 2];
      var $call827 = _sprintf($add_ptr824, 5573392, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $call826, HEAP32[tempInt + 4 >> 2] = $204, tempInt));
      label = 202;
      break;
     case 202:
      if ($tobool274) {
        label = 203;
        break;
      } else {
        label = 204;
        break;
      }
     case 203:
      var $strlen = _strlen($call811);
      var $endptr = $call811 + $strlen | 0;
      HEAP8[$endptr] = HEAP8[5573384];
      HEAP8[$endptr + 1] = HEAP8[5573385];
      HEAP8[$endptr + 2] = HEAP8[5573386];
      HEAP8[$endptr + 3] = HEAP8[5573387];
      HEAP8[$endptr + 4] = HEAP8[5573388];
      HEAP8[$endptr + 5] = HEAP8[5573389];
      HEAP8[$endptr + 6] = HEAP8[5573390];
      label = 204;
      break;
     case 204:
      var $call833 = _strcat($call811, $write_ext_0);
      var $call834 = _fopen($call811, 5573380);
      HEAP32[5262952 >> 2] = $call834;
      var $tobool835 = ($call834 | 0) == 0;
      if ($tobool835) {
        label = 205;
        break;
      } else {
        label = 206;
        break;
      }
     case 205:
      _perror($call811);
      var $ofname_0 = $call811;
      var $status_4 = 1;
      label = 210;
      break;
     case 206:
      var $_b1 = HEAP8[5243532];
      if ($_b1) {
        label = 207;
        break;
      } else {
        label = 208;
        break;
      }
     case 207:
      var $205 = HEAP32[_stderr >> 2];
      var $call841 = _fprintf($205, 5573356, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $call811, tempInt));
      label = 208;
      break;
     case 208:
      var $callee_knr_cast843 = $write_fun_059;
      FUNCTION_TABLE[$callee_knr_cast843]();
      var $206 = HEAP32[5264116 >> 2];
      var $call844 = _fclose($206);
      var $207 = HEAP32[5262952 >> 2];
      var $208 = HEAP32[_stdout >> 2];
      var $cmp845 = ($207 | 0) == ($208 | 0);
      if ($cmp845) {
        var $ofname_0 = $call811;
        var $status_4 = $status_361;
        label = 210;
        break;
      } else {
        label = 209;
        break;
      }
     case 209:
      var $call848 = _fclose($207);
      var $ofname_0 = $call811;
      var $status_4 = $status_361;
      label = 210;
      break;
     case 210:
      var $status_4;
      var $ofname_0;
      var $209 = HEAP32[5263448 >> 2];
      var $tobool850 = ($209 | 0) == 0;
      if ($tobool850) {
        label = 212;
        break;
      } else {
        label = 211;
        break;
      }
     case 211:
      _free($209);
      label = 212;
      break;
     case 212:
      var $tobool853 = ($ofname_0 | 0) == 0;
      if ($tobool853) {
        label = 214;
        break;
      } else {
        label = 213;
        break;
      }
     case 213:
      _free($ofname_0);
      label = 214;
      break;
     case 214:
      var $210 = HEAP32[5262948 >> 2];
      var $tobool856 = ($210 | 0) == 0;
      if ($tobool856) {
        label = 216;
        break;
      } else {
        label = 215;
        break;
      }
     case 215:
      var $211 = $210;
      _free($211);
      label = 216;
      break;
     case 216:
      var $212 = HEAP32[5264108 >> 2];
      var $tobool859 = ($212 | 0) == 0;
      if ($tobool859) {
        label = 218;
        break;
      } else {
        label = 217;
        break;
      }
     case 217:
      var $213 = $212;
      _free($213);
      label = 218;
      break;
     case 218:
      if ($tobool821) {
        var $arg_5 = $arg_4170;
        var $status_5 = $status_4;
        label = 222;
        break;
      } else {
        label = 219;
        break;
      }
     case 219:
      var $214 = HEAP32[5244920 >> 2];
      var $inc864 = $214 + 1 | 0;
      HEAP32[5244920 >> 2] = $inc864;
      var $215 = HEAP32[5264100 >> 2];
      var $cmp865 = $inc864 >>> 0 < $215 >>> 0;
      if ($cmp865) {
        label = 220;
        break;
      } else {
        label = 221;
        break;
      }
     case 220:
      var $dec = $arg_4170 - 1 | 0;
      var $arg_5 = $dec;
      var $status_5 = $status_4;
      label = 222;
      break;
     case 221:
      HEAP32[5244920 >> 2] = 0;
      var $arg_5 = $arg_4170;
      var $status_5 = $status_4;
      label = 222;
      break;
     case 222:
      var $status_5;
      var $arg_5;
      var $inc872 = $arg_5 + 1 | 0;
      var $cmp219 = ($inc872 | 0) < ($argc | 0);
      if ($cmp219) {
        var $arg_4170 = $inc872;
        label = 60;
        break;
      } else {
        var $retval_0 = $status_5;
        label = 223;
        break;
      }
     case 223:
      var $retval_0;
      STACKTOP = __stackBase__;
      return $retval_0;
    }
  } catch (e) {
    if (!e.longjmp || !(e.id in mySetjmpIds)) throw e;
    setjmpTable[setjmpLabels[e.id]](e.value);
  }
}
Module["_main"] = _main;
_main["X"] = 1;
function _malloc($bytes) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $cmp = $bytes >>> 0 < 245;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 28;
      break;
    }
   case 3:
    var $cmp1 = $bytes >>> 0 < 11;
    if ($cmp1) {
      var $cond = 16;
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $add2 = $bytes + 11 | 0;
    var $and = $add2 & -8;
    var $cond = $and;
    label = 5;
    break;
   case 5:
    var $cond;
    var $shr = $cond >>> 3;
    var $0 = HEAP32[5587596 >> 2];
    var $shr3 = $0 >>> ($shr >>> 0);
    var $and4 = $shr3 & 3;
    var $cmp5 = ($and4 | 0) == 0;
    if ($cmp5) {
      label = 12;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $neg = $shr3 & 1;
    var $and7 = $neg ^ 1;
    var $add8 = $and7 + $shr | 0;
    var $shl = $add8 << 1;
    var $arrayidx = 5587636 + ($shl << 2) | 0;
    var $1 = $arrayidx;
    var $arrayidx_sum = $shl + 2 | 0;
    var $2 = 5587636 + ($arrayidx_sum << 2) | 0;
    var $3 = HEAP32[$2 >> 2];
    var $fd9 = $3 + 8 | 0;
    var $4 = HEAP32[$fd9 >> 2];
    var $cmp10 = ($1 | 0) == ($4 | 0);
    if ($cmp10) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    var $shl12 = 1 << $add8;
    var $neg13 = $shl12 ^ -1;
    var $and14 = $0 & $neg13;
    HEAP32[5587596 >> 2] = $and14;
    label = 11;
    break;
   case 8:
    var $5 = $4;
    var $6 = HEAP32[5587612 >> 2];
    var $cmp15 = $5 >>> 0 < $6 >>> 0;
    if ($cmp15) {
      label = 10;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    HEAP32[$2 >> 2] = $4;
    var $bk = $4 + 12 | 0;
    HEAP32[$bk >> 2] = $1;
    label = 11;
    break;
   case 10:
    _abort();
   case 11:
    var $shl20 = $add8 << 3;
    var $or21 = $shl20 | 3;
    var $head = $3 + 4 | 0;
    HEAP32[$head >> 2] = $or21;
    var $7 = $3;
    var $add_ptr_sum100 = $shl20 | 4;
    var $head23 = $7 + $add_ptr_sum100 | 0;
    var $8 = $head23;
    var $9 = HEAP32[$8 >> 2];
    var $or24 = $9 | 1;
    HEAP32[$8 >> 2] = $or24;
    var $10 = $fd9;
    var $mem_0 = $10;
    label = 39;
    break;
   case 12:
    var $11 = HEAP32[5587604 >> 2];
    var $cmp27 = $cond >>> 0 > $11 >>> 0;
    if ($cmp27) {
      label = 13;
      break;
    } else {
      var $nb_0 = $cond;
      label = 31;
      break;
    }
   case 13:
    var $cmp30 = ($shr3 | 0) == 0;
    if ($cmp30) {
      label = 26;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $shl35 = $shr3 << $shr;
    var $shl37 = 2 << $shr;
    var $sub = -$shl37 | 0;
    var $or40 = $shl37 | $sub;
    var $and41 = $shl35 & $or40;
    var $sub42 = -$and41 | 0;
    var $and43 = $and41 & $sub42;
    var $sub44 = $and43 - 1 | 0;
    var $shr45 = $sub44 >>> 12;
    var $and46 = $shr45 & 16;
    var $shr47 = $sub44 >>> ($and46 >>> 0);
    var $shr48 = $shr47 >>> 5;
    var $and49 = $shr48 & 8;
    var $add50 = $and49 | $and46;
    var $shr51 = $shr47 >>> ($and49 >>> 0);
    var $shr52 = $shr51 >>> 2;
    var $and53 = $shr52 & 4;
    var $add54 = $add50 | $and53;
    var $shr55 = $shr51 >>> ($and53 >>> 0);
    var $shr56 = $shr55 >>> 1;
    var $and57 = $shr56 & 2;
    var $add58 = $add54 | $and57;
    var $shr59 = $shr55 >>> ($and57 >>> 0);
    var $shr60 = $shr59 >>> 1;
    var $and61 = $shr60 & 1;
    var $add62 = $add58 | $and61;
    var $shr63 = $shr59 >>> ($and61 >>> 0);
    var $add64 = $add62 + $shr63 | 0;
    var $shl65 = $add64 << 1;
    var $arrayidx66 = 5587636 + ($shl65 << 2) | 0;
    var $12 = $arrayidx66;
    var $arrayidx66_sum = $shl65 + 2 | 0;
    var $13 = 5587636 + ($arrayidx66_sum << 2) | 0;
    var $14 = HEAP32[$13 >> 2];
    var $fd69 = $14 + 8 | 0;
    var $15 = HEAP32[$fd69 >> 2];
    var $cmp70 = ($12 | 0) == ($15 | 0);
    if ($cmp70) {
      label = 15;
      break;
    } else {
      label = 16;
      break;
    }
   case 15:
    var $shl73 = 1 << $add64;
    var $neg74 = $shl73 ^ -1;
    var $and75 = $0 & $neg74;
    HEAP32[5587596 >> 2] = $and75;
    label = 19;
    break;
   case 16:
    var $16 = $15;
    var $17 = HEAP32[5587612 >> 2];
    var $cmp77 = $16 >>> 0 < $17 >>> 0;
    if ($cmp77) {
      label = 18;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    HEAP32[$13 >> 2] = $15;
    var $bk83 = $15 + 12 | 0;
    HEAP32[$bk83 >> 2] = $12;
    label = 19;
    break;
   case 18:
    _abort();
   case 19:
    var $shl87 = $add64 << 3;
    var $sub88 = $shl87 - $cond | 0;
    var $or90 = $cond | 3;
    var $head91 = $14 + 4 | 0;
    HEAP32[$head91 >> 2] = $or90;
    var $18 = $14;
    var $add_ptr92 = $18 + $cond | 0;
    var $19 = $add_ptr92;
    var $or93 = $sub88 | 1;
    var $add_ptr92_sum98 = $cond | 4;
    var $head94 = $18 + $add_ptr92_sum98 | 0;
    var $20 = $head94;
    HEAP32[$20 >> 2] = $or93;
    var $add_ptr95 = $18 + $shl87 | 0;
    var $prev_foot = $add_ptr95;
    HEAP32[$prev_foot >> 2] = $sub88;
    var $21 = HEAP32[5587604 >> 2];
    var $cmp96 = ($21 | 0) == 0;
    if ($cmp96) {
      label = 25;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    var $22 = HEAP32[5587616 >> 2];
    var $shr99 = $21 >>> 3;
    var $shl100 = $shr99 << 1;
    var $arrayidx101 = 5587636 + ($shl100 << 2) | 0;
    var $23 = $arrayidx101;
    var $24 = HEAP32[5587596 >> 2];
    var $shl103 = 1 << $shr99;
    var $and104 = $24 & $shl103;
    var $tobool105 = ($and104 | 0) == 0;
    if ($tobool105) {
      label = 21;
      break;
    } else {
      label = 22;
      break;
    }
   case 21:
    var $or108 = $24 | $shl103;
    HEAP32[5587596 >> 2] = $or108;
    var $arrayidx101_sum_pre = $shl100 + 2 | 0;
    var $_pre = 5587636 + ($arrayidx101_sum_pre << 2) | 0;
    var $F102_0 = $23;
    var $_pre_phi = $_pre;
    label = 24;
    break;
   case 22:
    var $arrayidx101_sum99 = $shl100 + 2 | 0;
    var $25 = 5587636 + ($arrayidx101_sum99 << 2) | 0;
    var $26 = HEAP32[$25 >> 2];
    var $27 = $26;
    var $28 = HEAP32[5587612 >> 2];
    var $cmp111 = $27 >>> 0 < $28 >>> 0;
    if ($cmp111) {
      label = 23;
      break;
    } else {
      var $F102_0 = $26;
      var $_pre_phi = $25;
      label = 24;
      break;
    }
   case 23:
    _abort();
   case 24:
    var $_pre_phi;
    var $F102_0;
    HEAP32[$_pre_phi >> 2] = $22;
    var $bk121 = $F102_0 + 12 | 0;
    HEAP32[$bk121 >> 2] = $22;
    var $fd122 = $22 + 8 | 0;
    HEAP32[$fd122 >> 2] = $F102_0;
    var $bk123 = $22 + 12 | 0;
    HEAP32[$bk123 >> 2] = $23;
    label = 25;
    break;
   case 25:
    HEAP32[5587604 >> 2] = $sub88;
    HEAP32[5587616 >> 2] = $19;
    var $29 = $fd69;
    var $mem_0 = $29;
    label = 39;
    break;
   case 26:
    var $30 = HEAP32[5587600 >> 2];
    var $cmp127 = ($30 | 0) == 0;
    if ($cmp127) {
      var $nb_0 = $cond;
      label = 31;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    var $call = _tmalloc_small($cond);
    var $cmp129 = ($call | 0) == 0;
    if ($cmp129) {
      var $nb_0 = $cond;
      label = 31;
      break;
    } else {
      var $mem_0 = $call;
      label = 39;
      break;
    }
   case 28:
    var $cmp137 = $bytes >>> 0 > 4294967231;
    if ($cmp137) {
      var $nb_0 = -1;
      label = 31;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    var $add142 = $bytes + 11 | 0;
    var $and143 = $add142 & -8;
    var $31 = HEAP32[5587600 >> 2];
    var $cmp144 = ($31 | 0) == 0;
    if ($cmp144) {
      var $nb_0 = $and143;
      label = 31;
      break;
    } else {
      label = 30;
      break;
    }
   case 30:
    var $call147 = _tmalloc_large($and143);
    var $cmp148 = ($call147 | 0) == 0;
    if ($cmp148) {
      var $nb_0 = $and143;
      label = 31;
      break;
    } else {
      var $mem_0 = $call147;
      label = 39;
      break;
    }
   case 31:
    var $nb_0;
    var $32 = HEAP32[5587604 >> 2];
    var $cmp154 = $nb_0 >>> 0 > $32 >>> 0;
    if ($cmp154) {
      label = 36;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    var $sub158 = $32 - $nb_0 | 0;
    var $33 = HEAP32[5587616 >> 2];
    var $cmp160 = $sub158 >>> 0 > 15;
    if ($cmp160) {
      label = 33;
      break;
    } else {
      label = 34;
      break;
    }
   case 33:
    var $34 = $33;
    var $add_ptr164 = $34 + $nb_0 | 0;
    var $35 = $add_ptr164;
    HEAP32[5587616 >> 2] = $35;
    HEAP32[5587604 >> 2] = $sub158;
    var $or165 = $sub158 | 1;
    var $add_ptr164_sum = $nb_0 + 4 | 0;
    var $head166 = $34 + $add_ptr164_sum | 0;
    var $36 = $head166;
    HEAP32[$36 >> 2] = $or165;
    var $add_ptr167 = $34 + $32 | 0;
    var $prev_foot168 = $add_ptr167;
    HEAP32[$prev_foot168 >> 2] = $sub158;
    var $or170 = $nb_0 | 3;
    var $head171 = $33 + 4 | 0;
    HEAP32[$head171 >> 2] = $or170;
    label = 35;
    break;
   case 34:
    HEAP32[5587604 >> 2] = 0;
    HEAP32[5587616 >> 2] = 0;
    var $or174 = $32 | 3;
    var $head175 = $33 + 4 | 0;
    HEAP32[$head175 >> 2] = $or174;
    var $37 = $33;
    var $add_ptr176_sum = $32 + 4 | 0;
    var $head177 = $37 + $add_ptr176_sum | 0;
    var $38 = $head177;
    var $39 = HEAP32[$38 >> 2];
    var $or178 = $39 | 1;
    HEAP32[$38 >> 2] = $or178;
    label = 35;
    break;
   case 35:
    var $add_ptr180 = $33 + 8 | 0;
    var $40 = $add_ptr180;
    var $mem_0 = $40;
    label = 39;
    break;
   case 36:
    var $41 = HEAP32[5587608 >> 2];
    var $cmp182 = $nb_0 >>> 0 < $41 >>> 0;
    if ($cmp182) {
      label = 37;
      break;
    } else {
      label = 38;
      break;
    }
   case 37:
    var $sub186 = $41 - $nb_0 | 0;
    HEAP32[5587608 >> 2] = $sub186;
    var $42 = HEAP32[5587620 >> 2];
    var $43 = $42;
    var $add_ptr189 = $43 + $nb_0 | 0;
    var $44 = $add_ptr189;
    HEAP32[5587620 >> 2] = $44;
    var $or190 = $sub186 | 1;
    var $add_ptr189_sum = $nb_0 + 4 | 0;
    var $head191 = $43 + $add_ptr189_sum | 0;
    var $45 = $head191;
    HEAP32[$45 >> 2] = $or190;
    var $or193 = $nb_0 | 3;
    var $head194 = $42 + 4 | 0;
    HEAP32[$head194 >> 2] = $or193;
    var $add_ptr195 = $42 + 8 | 0;
    var $46 = $add_ptr195;
    var $mem_0 = $46;
    label = 39;
    break;
   case 38:
    var $call198 = _sys_alloc($nb_0);
    var $mem_0 = $call198;
    label = 39;
    break;
   case 39:
    var $mem_0;
    return $mem_0;
  }
}
_malloc["X"] = 1;
function _tmalloc_small($nb) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5587600 >> 2];
    var $sub = -$0 | 0;
    var $and = $0 & $sub;
    var $sub2 = $and - 1 | 0;
    var $shr = $sub2 >>> 12;
    var $and3 = $shr & 16;
    var $shr4 = $sub2 >>> ($and3 >>> 0);
    var $shr5 = $shr4 >>> 5;
    var $and6 = $shr5 & 8;
    var $add = $and6 | $and3;
    var $shr7 = $shr4 >>> ($and6 >>> 0);
    var $shr8 = $shr7 >>> 2;
    var $and9 = $shr8 & 4;
    var $add10 = $add | $and9;
    var $shr11 = $shr7 >>> ($and9 >>> 0);
    var $shr12 = $shr11 >>> 1;
    var $and13 = $shr12 & 2;
    var $add14 = $add10 | $and13;
    var $shr15 = $shr11 >>> ($and13 >>> 0);
    var $shr16 = $shr15 >>> 1;
    var $and17 = $shr16 & 1;
    var $add18 = $add14 | $and17;
    var $shr19 = $shr15 >>> ($and17 >>> 0);
    var $add20 = $add18 + $shr19 | 0;
    var $arrayidx = 5587900 + ($add20 << 2) | 0;
    var $1 = HEAP32[$arrayidx >> 2];
    var $head = $1 + 4 | 0;
    var $2 = HEAP32[$head >> 2];
    var $and21 = $2 & -8;
    var $sub22 = $and21 - $nb | 0;
    var $t_0 = $1;
    var $v_0 = $1;
    var $rsize_0 = $sub22;
    label = 3;
    break;
   case 3:
    var $rsize_0;
    var $v_0;
    var $t_0;
    var $arrayidx23 = $t_0 + 16 | 0;
    var $3 = HEAP32[$arrayidx23 >> 2];
    var $cmp = ($3 | 0) == 0;
    if ($cmp) {
      label = 4;
      break;
    } else {
      var $cond5 = $3;
      label = 5;
      break;
    }
   case 4:
    var $arrayidx27 = $t_0 + 20 | 0;
    var $4 = HEAP32[$arrayidx27 >> 2];
    var $cmp28 = ($4 | 0) == 0;
    if ($cmp28) {
      label = 6;
      break;
    } else {
      var $cond5 = $4;
      label = 5;
      break;
    }
   case 5:
    var $cond5;
    var $head29 = $cond5 + 4 | 0;
    var $5 = HEAP32[$head29 >> 2];
    var $and30 = $5 & -8;
    var $sub31 = $and30 - $nb | 0;
    var $cmp32 = $sub31 >>> 0 < $rsize_0 >>> 0;
    var $sub31_rsize_0 = $cmp32 ? $sub31 : $rsize_0;
    var $cond_v_0 = $cmp32 ? $cond5 : $v_0;
    var $t_0 = $cond5;
    var $v_0 = $cond_v_0;
    var $rsize_0 = $sub31_rsize_0;
    label = 3;
    break;
   case 6:
    var $6 = $v_0;
    var $7 = HEAP32[5587612 >> 2];
    var $cmp33 = $6 >>> 0 < $7 >>> 0;
    if ($cmp33) {
      label = 49;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $add_ptr = $6 + $nb | 0;
    var $8 = $add_ptr;
    var $cmp35 = $6 >>> 0 < $add_ptr >>> 0;
    if ($cmp35) {
      label = 8;
      break;
    } else {
      label = 49;
      break;
    }
   case 8:
    var $parent = $v_0 + 24 | 0;
    var $9 = HEAP32[$parent >> 2];
    var $bk = $v_0 + 12 | 0;
    var $10 = HEAP32[$bk >> 2];
    var $cmp40 = ($10 | 0) == ($v_0 | 0);
    if ($cmp40) {
      label = 12;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $fd = $v_0 + 8 | 0;
    var $11 = HEAP32[$fd >> 2];
    var $12 = $11;
    var $cmp45 = $12 >>> 0 < $7 >>> 0;
    if ($cmp45) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $bk50 = $11 + 12 | 0;
    HEAP32[$bk50 >> 2] = $10;
    var $fd51 = $10 + 8 | 0;
    HEAP32[$fd51 >> 2] = $11;
    var $R_1 = $10;
    label = 19;
    break;
   case 11:
    _abort();
   case 12:
    var $arrayidx55 = $v_0 + 20 | 0;
    var $13 = HEAP32[$arrayidx55 >> 2];
    var $cmp56 = ($13 | 0) == 0;
    if ($cmp56) {
      label = 13;
      break;
    } else {
      var $R_0 = $13;
      var $RP_0 = $arrayidx55;
      label = 14;
      break;
    }
   case 13:
    var $arrayidx59 = $v_0 + 16 | 0;
    var $14 = HEAP32[$arrayidx59 >> 2];
    var $cmp60 = ($14 | 0) == 0;
    if ($cmp60) {
      var $R_1 = 0;
      label = 19;
      break;
    } else {
      var $R_0 = $14;
      var $RP_0 = $arrayidx59;
      label = 14;
      break;
    }
   case 14:
    var $RP_0;
    var $R_0;
    var $arrayidx65 = $R_0 + 20 | 0;
    var $15 = HEAP32[$arrayidx65 >> 2];
    var $cmp66 = ($15 | 0) == 0;
    if ($cmp66) {
      label = 15;
      break;
    } else {
      var $R_0 = $15;
      var $RP_0 = $arrayidx65;
      label = 14;
      break;
    }
   case 15:
    var $arrayidx69 = $R_0 + 16 | 0;
    var $16 = HEAP32[$arrayidx69 >> 2];
    var $cmp70 = ($16 | 0) == 0;
    if ($cmp70) {
      label = 16;
      break;
    } else {
      var $R_0 = $16;
      var $RP_0 = $arrayidx69;
      label = 14;
      break;
    }
   case 16:
    var $17 = $RP_0;
    var $cmp75 = $17 >>> 0 < $7 >>> 0;
    if ($cmp75) {
      label = 18;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    HEAP32[$RP_0 >> 2] = 0;
    var $R_1 = $R_0;
    label = 19;
    break;
   case 18:
    _abort();
   case 19:
    var $R_1;
    var $cmp84 = ($9 | 0) == 0;
    if ($cmp84) {
      label = 39;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    var $index = $v_0 + 28 | 0;
    var $18 = HEAP32[$index >> 2];
    var $arrayidx88 = 5587900 + ($18 << 2) | 0;
    var $19 = HEAP32[$arrayidx88 >> 2];
    var $cmp89 = ($v_0 | 0) == ($19 | 0);
    if ($cmp89) {
      label = 21;
      break;
    } else {
      label = 23;
      break;
    }
   case 21:
    HEAP32[$arrayidx88 >> 2] = $R_1;
    var $cond3 = ($R_1 | 0) == 0;
    if ($cond3) {
      label = 22;
      break;
    } else {
      label = 29;
      break;
    }
   case 22:
    var $20 = HEAP32[$index >> 2];
    var $shl = 1 << $20;
    var $neg = $shl ^ -1;
    var $21 = HEAP32[5587600 >> 2];
    var $and97 = $21 & $neg;
    HEAP32[5587600 >> 2] = $and97;
    label = 39;
    break;
   case 23:
    var $22 = $9;
    var $23 = HEAP32[5587612 >> 2];
    var $cmp101 = $22 >>> 0 < $23 >>> 0;
    if ($cmp101) {
      label = 27;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    var $arrayidx107 = $9 + 16 | 0;
    var $24 = HEAP32[$arrayidx107 >> 2];
    var $cmp108 = ($24 | 0) == ($v_0 | 0);
    if ($cmp108) {
      label = 25;
      break;
    } else {
      label = 26;
      break;
    }
   case 25:
    HEAP32[$arrayidx107 >> 2] = $R_1;
    label = 28;
    break;
   case 26:
    var $arrayidx115 = $9 + 20 | 0;
    HEAP32[$arrayidx115 >> 2] = $R_1;
    label = 28;
    break;
   case 27:
    _abort();
   case 28:
    var $cmp120 = ($R_1 | 0) == 0;
    if ($cmp120) {
      label = 39;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    var $25 = $R_1;
    var $26 = HEAP32[5587612 >> 2];
    var $cmp124 = $25 >>> 0 < $26 >>> 0;
    if ($cmp124) {
      label = 38;
      break;
    } else {
      label = 30;
      break;
    }
   case 30:
    var $parent129 = $R_1 + 24 | 0;
    HEAP32[$parent129 >> 2] = $9;
    var $arrayidx131 = $v_0 + 16 | 0;
    var $27 = HEAP32[$arrayidx131 >> 2];
    var $cmp132 = ($27 | 0) == 0;
    if ($cmp132) {
      label = 34;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    var $28 = $27;
    var $29 = HEAP32[5587612 >> 2];
    var $cmp136 = $28 >>> 0 < $29 >>> 0;
    if ($cmp136) {
      label = 33;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    var $arrayidx142 = $R_1 + 16 | 0;
    HEAP32[$arrayidx142 >> 2] = $27;
    var $parent143 = $27 + 24 | 0;
    HEAP32[$parent143 >> 2] = $R_1;
    label = 34;
    break;
   case 33:
    _abort();
   case 34:
    var $arrayidx148 = $v_0 + 20 | 0;
    var $30 = HEAP32[$arrayidx148 >> 2];
    var $cmp149 = ($30 | 0) == 0;
    if ($cmp149) {
      label = 39;
      break;
    } else {
      label = 35;
      break;
    }
   case 35:
    var $31 = $30;
    var $32 = HEAP32[5587612 >> 2];
    var $cmp153 = $31 >>> 0 < $32 >>> 0;
    if ($cmp153) {
      label = 37;
      break;
    } else {
      label = 36;
      break;
    }
   case 36:
    var $arrayidx159 = $R_1 + 20 | 0;
    HEAP32[$arrayidx159 >> 2] = $30;
    var $parent160 = $30 + 24 | 0;
    HEAP32[$parent160 >> 2] = $R_1;
    label = 39;
    break;
   case 37:
    _abort();
   case 38:
    _abort();
   case 39:
    var $cmp168 = $rsize_0 >>> 0 < 16;
    if ($cmp168) {
      label = 40;
      break;
    } else {
      label = 41;
      break;
    }
   case 40:
    var $add171 = $rsize_0 + $nb | 0;
    var $or172 = $add171 | 3;
    var $head173 = $v_0 + 4 | 0;
    HEAP32[$head173 >> 2] = $or172;
    var $add_ptr175_sum = $add171 + 4 | 0;
    var $head176 = $6 + $add_ptr175_sum | 0;
    var $33 = $head176;
    var $34 = HEAP32[$33 >> 2];
    var $or177 = $34 | 1;
    HEAP32[$33 >> 2] = $or177;
    label = 48;
    break;
   case 41:
    var $or180 = $nb | 3;
    var $head181 = $v_0 + 4 | 0;
    HEAP32[$head181 >> 2] = $or180;
    var $or182 = $rsize_0 | 1;
    var $add_ptr_sum = $nb + 4 | 0;
    var $head183 = $6 + $add_ptr_sum | 0;
    var $35 = $head183;
    HEAP32[$35 >> 2] = $or182;
    var $add_ptr_sum1 = $rsize_0 + $nb | 0;
    var $add_ptr184 = $6 + $add_ptr_sum1 | 0;
    var $prev_foot = $add_ptr184;
    HEAP32[$prev_foot >> 2] = $rsize_0;
    var $36 = HEAP32[5587604 >> 2];
    var $cmp185 = ($36 | 0) == 0;
    if ($cmp185) {
      label = 47;
      break;
    } else {
      label = 42;
      break;
    }
   case 42:
    var $37 = HEAP32[5587616 >> 2];
    var $shr188 = $36 >>> 3;
    var $shl189 = $shr188 << 1;
    var $arrayidx190 = 5587636 + ($shl189 << 2) | 0;
    var $38 = $arrayidx190;
    var $39 = HEAP32[5587596 >> 2];
    var $shl192 = 1 << $shr188;
    var $and193 = $39 & $shl192;
    var $tobool194 = ($and193 | 0) == 0;
    if ($tobool194) {
      label = 43;
      break;
    } else {
      label = 44;
      break;
    }
   case 43:
    var $or198 = $39 | $shl192;
    HEAP32[5587596 >> 2] = $or198;
    var $arrayidx190_sum_pre = $shl189 + 2 | 0;
    var $_pre = 5587636 + ($arrayidx190_sum_pre << 2) | 0;
    var $F191_0 = $38;
    var $_pre_phi = $_pre;
    label = 46;
    break;
   case 44:
    var $arrayidx190_sum2 = $shl189 + 2 | 0;
    var $40 = 5587636 + ($arrayidx190_sum2 << 2) | 0;
    var $41 = HEAP32[$40 >> 2];
    var $42 = $41;
    var $43 = HEAP32[5587612 >> 2];
    var $cmp202 = $42 >>> 0 < $43 >>> 0;
    if ($cmp202) {
      label = 45;
      break;
    } else {
      var $F191_0 = $41;
      var $_pre_phi = $40;
      label = 46;
      break;
    }
   case 45:
    _abort();
   case 46:
    var $_pre_phi;
    var $F191_0;
    HEAP32[$_pre_phi >> 2] = $37;
    var $bk212 = $F191_0 + 12 | 0;
    HEAP32[$bk212 >> 2] = $37;
    var $fd213 = $37 + 8 | 0;
    HEAP32[$fd213 >> 2] = $F191_0;
    var $bk214 = $37 + 12 | 0;
    HEAP32[$bk214 >> 2] = $38;
    label = 47;
    break;
   case 47:
    HEAP32[5587604 >> 2] = $rsize_0;
    HEAP32[5587616 >> 2] = $8;
    label = 48;
    break;
   case 48:
    var $add_ptr219 = $v_0 + 8 | 0;
    var $44 = $add_ptr219;
    return $44;
   case 49:
    _abort();
  }
}
_tmalloc_small["X"] = 1;
function _sys_alloc($nb) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5263284 >> 2];
    var $cmp = ($0 | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _init_mparams();
    label = 4;
    break;
   case 4:
    var $1 = HEAP32[5588036 >> 2];
    var $and10 = $1 & 4;
    var $tobool11 = ($and10 | 0) == 0;
    if ($tobool11) {
      label = 5;
      break;
    } else {
      var $tsize_122 = 0;
      label = 24;
      break;
    }
   case 5:
    var $2 = HEAP32[5587620 >> 2];
    var $cmp13 = ($2 | 0) == 0;
    if ($cmp13) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $3 = $2;
    var $call15 = _segment_holding($3);
    var $cmp16 = ($call15 | 0) == 0;
    if ($cmp16) {
      label = 7;
      break;
    } else {
      label = 12;
      break;
    }
   case 7:
    var $call18 = _sbrk(0);
    var $cmp19 = ($call18 | 0) == -1;
    if ($cmp19) {
      var $tsize_091517_ph = 0;
      label = 22;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $4 = HEAP32[5263292 >> 2];
    var $sub = $nb + 47 | 0;
    var $add21 = $sub + $4 | 0;
    var $neg = -$4 | 0;
    var $and23 = $add21 & $neg;
    var $5 = $call18;
    var $6 = HEAP32[5263288 >> 2];
    var $sub24 = $6 - 1 | 0;
    var $and25 = $sub24 & $5;
    var $cmp26 = ($and25 | 0) == 0;
    if ($cmp26) {
      var $asize_0 = $and23;
      label = 10;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $add29 = $sub24 + $5 | 0;
    var $neg31 = -$6 | 0;
    var $and32 = $add29 & $neg31;
    var $sub33 = $and23 - $5 | 0;
    var $add34 = $sub33 + $and32 | 0;
    var $asize_0 = $add34;
    label = 10;
    break;
   case 10:
    var $asize_0;
    var $cmp36 = $asize_0 >>> 0 < 2147483647;
    if ($cmp36) {
      label = 11;
      break;
    } else {
      var $tsize_091517_ph = 0;
      label = 22;
      break;
    }
   case 11:
    var $call38 = _sbrk($asize_0);
    var $cmp39 = ($call38 | 0) == ($call18 | 0);
    var $asize_0_ = $cmp39 ? $asize_0 : 0;
    var $call18_ = $cmp39 ? $call18 : -1;
    var $tbase_0 = $call18_;
    var $tsize_0 = $asize_0_;
    var $br_0 = $call38;
    var $asize_1 = $asize_0;
    label = 14;
    break;
   case 12:
    var $7 = HEAP32[5587608 >> 2];
    var $8 = HEAP32[5263292 >> 2];
    var $sub44 = $nb + 47 | 0;
    var $sub46 = $sub44 - $7 | 0;
    var $add47 = $sub46 + $8 | 0;
    var $neg49 = -$8 | 0;
    var $and50 = $add47 & $neg49;
    var $cmp51 = $and50 >>> 0 < 2147483647;
    if ($cmp51) {
      label = 13;
      break;
    } else {
      var $tsize_091517_ph = 0;
      label = 22;
      break;
    }
   case 13:
    var $call53 = _sbrk($and50);
    var $base54 = $call15 | 0;
    var $9 = HEAP32[$base54 >> 2];
    var $size = $call15 + 4 | 0;
    var $10 = HEAP32[$size >> 2];
    var $add_ptr = $9 + $10 | 0;
    var $cmp55 = ($call53 | 0) == ($add_ptr | 0);
    var $and50_ = $cmp55 ? $and50 : 0;
    var $call53_ = $cmp55 ? $call53 : -1;
    var $tbase_0 = $call53_;
    var $tsize_0 = $and50_;
    var $br_0 = $call53;
    var $asize_1 = $and50;
    label = 14;
    break;
   case 14:
    var $asize_1;
    var $br_0;
    var $tsize_0;
    var $tbase_0;
    var $sub82 = -$asize_1 | 0;
    var $cmp59 = ($tbase_0 | 0) == -1;
    if ($cmp59) {
      label = 15;
      break;
    } else {
      var $tsize_227 = $tsize_0;
      var $tbase_228 = $tbase_0;
      label = 27;
      break;
    }
   case 15:
    var $cmp61 = ($br_0 | 0) != -1;
    var $cmp63 = $asize_1 >>> 0 < 2147483647;
    var $or_cond = $cmp61 & $cmp63;
    if ($or_cond) {
      label = 16;
      break;
    } else {
      var $asize_2 = $asize_1;
      label = 21;
      break;
    }
   case 16:
    var $add65 = $nb + 48 | 0;
    var $cmp66 = $asize_1 >>> 0 < $add65 >>> 0;
    if ($cmp66) {
      label = 17;
      break;
    } else {
      var $asize_2 = $asize_1;
      label = 21;
      break;
    }
   case 17:
    var $11 = HEAP32[5263292 >> 2];
    var $sub70 = $nb + 47 | 0;
    var $sub69 = $sub70 - $asize_1 | 0;
    var $add71 = $sub69 + $11 | 0;
    var $neg73 = -$11 | 0;
    var $and74 = $add71 & $neg73;
    var $cmp75 = $and74 >>> 0 < 2147483647;
    if ($cmp75) {
      label = 18;
      break;
    } else {
      var $asize_2 = $asize_1;
      label = 21;
      break;
    }
   case 18:
    var $call77 = _sbrk($and74);
    var $cmp78 = ($call77 | 0) == -1;
    if ($cmp78) {
      label = 20;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $add80 = $and74 + $asize_1 | 0;
    var $asize_2 = $add80;
    label = 21;
    break;
   case 20:
    var $call83 = _sbrk($sub82);
    var $tsize_091517_ph = $tsize_0;
    label = 22;
    break;
   case 21:
    var $asize_2;
    var $cmp88 = ($br_0 | 0) == -1;
    if ($cmp88) {
      label = 23;
      break;
    } else {
      var $tsize_227 = $asize_2;
      var $tbase_228 = $br_0;
      label = 27;
      break;
    }
   case 22:
    var $tsize_091517_ph;
    var $12 = HEAP32[5588036 >> 2];
    var $or29 = $12 | 4;
    HEAP32[5588036 >> 2] = $or29;
    var $tsize_122 = $tsize_091517_ph;
    label = 24;
    break;
   case 23:
    var $13 = HEAP32[5588036 >> 2];
    var $or = $13 | 4;
    HEAP32[5588036 >> 2] = $or;
    var $tsize_122 = $tsize_0;
    label = 24;
    break;
   case 24:
    var $tsize_122;
    var $14 = HEAP32[5263292 >> 2];
    var $sub99 = $nb + 47 | 0;
    var $add100 = $sub99 + $14 | 0;
    var $neg102 = -$14 | 0;
    var $and103 = $add100 & $neg102;
    var $cmp104 = $and103 >>> 0 < 2147483647;
    if ($cmp104) {
      label = 25;
      break;
    } else {
      label = 48;
      break;
    }
   case 25:
    var $call108 = _sbrk($and103);
    var $call109 = _sbrk(0);
    var $notlhs = ($call108 | 0) != -1;
    var $notrhs = ($call109 | 0) != -1;
    var $or_cond1_not = $notrhs & $notlhs;
    var $cmp114 = $call108 >>> 0 < $call109 >>> 0;
    var $or_cond2 = $or_cond1_not & $cmp114;
    if ($or_cond2) {
      label = 26;
      break;
    } else {
      label = 48;
      break;
    }
   case 26:
    var $sub_ptr_lhs_cast = $call109;
    var $sub_ptr_rhs_cast = $call108;
    var $sub_ptr_sub = $sub_ptr_lhs_cast - $sub_ptr_rhs_cast | 0;
    var $add116 = $nb + 40 | 0;
    var $cmp117 = $sub_ptr_sub >>> 0 > $add116 >>> 0;
    var $sub_ptr_sub_tsize_1 = $cmp117 ? $sub_ptr_sub : $tsize_122;
    var $call108_tbase_1 = $cmp117 ? $call108 : -1;
    var $cmp123 = ($call108_tbase_1 | 0) == -1;
    if ($cmp123) {
      label = 48;
      break;
    } else {
      var $tsize_227 = $sub_ptr_sub_tsize_1;
      var $tbase_228 = $call108_tbase_1;
      label = 27;
      break;
    }
   case 27:
    var $tbase_228;
    var $tsize_227;
    var $15 = HEAP32[5588028 >> 2];
    var $add125 = $15 + $tsize_227 | 0;
    HEAP32[5588028 >> 2] = $add125;
    var $16 = HEAP32[5588032 >> 2];
    var $cmp126 = $add125 >>> 0 > $16 >>> 0;
    if ($cmp126) {
      label = 28;
      break;
    } else {
      label = 29;
      break;
    }
   case 28:
    HEAP32[5588032 >> 2] = $add125;
    label = 29;
    break;
   case 29:
    var $17 = HEAP32[5587620 >> 2];
    var $cmp132 = ($17 | 0) == 0;
    if ($cmp132) {
      label = 30;
      break;
    } else {
      var $sp_039 = 5588040;
      label = 33;
      break;
    }
   case 30:
    var $18 = HEAP32[5587612 >> 2];
    var $cmp134 = ($18 | 0) == 0;
    var $cmp136 = $tbase_228 >>> 0 < $18 >>> 0;
    var $or_cond3 = $cmp134 | $cmp136;
    if ($or_cond3) {
      label = 31;
      break;
    } else {
      label = 32;
      break;
    }
   case 31:
    HEAP32[5587612 >> 2] = $tbase_228;
    label = 32;
    break;
   case 32:
    HEAP32[5588040 >> 2] = $tbase_228;
    HEAP32[5588044 >> 2] = $tsize_227;
    HEAP32[5588052 >> 2] = 0;
    var $19 = HEAP32[5263284 >> 2];
    HEAP32[5587632 >> 2] = $19;
    HEAP32[5587628 >> 2] = -1;
    _init_bins();
    var $20 = $tbase_228;
    var $sub146 = $tsize_227 - 40 | 0;
    _init_top($20, $sub146);
    label = 46;
    break;
   case 33:
    var $sp_039;
    var $base161 = $sp_039 | 0;
    var $21 = HEAP32[$base161 >> 2];
    var $size162 = $sp_039 + 4 | 0;
    var $22 = HEAP32[$size162 >> 2];
    var $add_ptr163 = $21 + $22 | 0;
    var $cmp164 = ($tbase_228 | 0) == ($add_ptr163 | 0);
    if ($cmp164) {
      label = 35;
      break;
    } else {
      label = 34;
      break;
    }
   case 34:
    var $next = $sp_039 + 8 | 0;
    var $23 = HEAP32[$next >> 2];
    var $cmp160 = ($23 | 0) == 0;
    if ($cmp160) {
      label = 38;
      break;
    } else {
      var $sp_039 = $23;
      label = 33;
      break;
    }
   case 35:
    var $sflags167 = $sp_039 + 12 | 0;
    var $24 = HEAP32[$sflags167 >> 2];
    var $and168 = $24 & 8;
    var $tobool169 = ($and168 | 0) == 0;
    if ($tobool169) {
      label = 36;
      break;
    } else {
      label = 38;
      break;
    }
   case 36:
    var $25 = $17;
    var $cmp177 = $25 >>> 0 >= $21 >>> 0;
    var $cmp183 = $25 >>> 0 < $tbase_228 >>> 0;
    var $or_cond32 = $cmp177 & $cmp183;
    if ($or_cond32) {
      label = 37;
      break;
    } else {
      label = 38;
      break;
    }
   case 37:
    var $add186 = $22 + $tsize_227 | 0;
    HEAP32[$size162 >> 2] = $add186;
    var $26 = HEAP32[5587620 >> 2];
    var $27 = HEAP32[5587608 >> 2];
    var $add189 = $27 + $tsize_227 | 0;
    _init_top($26, $add189);
    label = 46;
    break;
   case 38:
    var $28 = HEAP32[5587612 >> 2];
    var $cmp192 = $tbase_228 >>> 0 < $28 >>> 0;
    if ($cmp192) {
      label = 39;
      break;
    } else {
      label = 40;
      break;
    }
   case 39:
    HEAP32[5587612 >> 2] = $tbase_228;
    label = 40;
    break;
   case 40:
    var $add_ptr201 = $tbase_228 + $tsize_227 | 0;
    var $sp_135 = 5588040;
    label = 41;
    break;
   case 41:
    var $sp_135;
    var $base200 = $sp_135 | 0;
    var $29 = HEAP32[$base200 >> 2];
    var $cmp202 = ($29 | 0) == ($add_ptr201 | 0);
    if ($cmp202) {
      label = 43;
      break;
    } else {
      label = 42;
      break;
    }
   case 42:
    var $next205 = $sp_135 + 8 | 0;
    var $30 = HEAP32[$next205 >> 2];
    var $cmp198 = ($30 | 0) == 0;
    if ($cmp198) {
      label = 45;
      break;
    } else {
      var $sp_135 = $30;
      label = 41;
      break;
    }
   case 43:
    var $sflags209 = $sp_135 + 12 | 0;
    var $31 = HEAP32[$sflags209 >> 2];
    var $and210 = $31 & 8;
    var $tobool211 = ($and210 | 0) == 0;
    if ($tobool211) {
      label = 44;
      break;
    } else {
      label = 45;
      break;
    }
   case 44:
    HEAP32[$base200 >> 2] = $tbase_228;
    var $size219 = $sp_135 + 4 | 0;
    var $32 = HEAP32[$size219 >> 2];
    var $add220 = $32 + $tsize_227 | 0;
    HEAP32[$size219 >> 2] = $add220;
    var $call221 = _prepend_alloc($tbase_228, $add_ptr201, $nb);
    var $retval_0 = $call221;
    label = 49;
    break;
   case 45:
    _add_segment($tbase_228, $tsize_227);
    label = 46;
    break;
   case 46:
    var $33 = HEAP32[5587608 >> 2];
    var $cmp227 = $33 >>> 0 > $nb >>> 0;
    if ($cmp227) {
      label = 47;
      break;
    } else {
      label = 48;
      break;
    }
   case 47:
    var $sub230 = $33 - $nb | 0;
    HEAP32[5587608 >> 2] = $sub230;
    var $34 = HEAP32[5587620 >> 2];
    var $35 = $34;
    var $add_ptr232 = $35 + $nb | 0;
    var $36 = $add_ptr232;
    HEAP32[5587620 >> 2] = $36;
    var $or234 = $sub230 | 1;
    var $add_ptr232_sum = $nb + 4 | 0;
    var $head235 = $35 + $add_ptr232_sum | 0;
    var $37 = $head235;
    HEAP32[$37 >> 2] = $or234;
    var $or237 = $nb | 3;
    var $head238 = $34 + 4 | 0;
    HEAP32[$head238 >> 2] = $or237;
    var $add_ptr239 = $34 + 8 | 0;
    var $38 = $add_ptr239;
    var $retval_0 = $38;
    label = 49;
    break;
   case 48:
    var $call242 = ___errno_location();
    HEAP32[$call242 >> 2] = 12;
    var $retval_0 = 0;
    label = 49;
    break;
   case 49:
    var $retval_0;
    return $retval_0;
  }
}
_sys_alloc["X"] = 1;
function _tmalloc_large($nb) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $sub = -$nb | 0;
    var $shr = $nb >>> 8;
    var $cmp = ($shr | 0) == 0;
    if ($cmp) {
      var $idx_0 = 0;
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $cmp1 = $nb >>> 0 > 16777215;
    if ($cmp1) {
      var $idx_0 = 31;
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $sub4 = $shr + 1048320 | 0;
    var $shr5 = $sub4 >>> 16;
    var $and = $shr5 & 8;
    var $shl = $shr << $and;
    var $sub6 = $shl + 520192 | 0;
    var $shr7 = $sub6 >>> 16;
    var $and8 = $shr7 & 4;
    var $add = $and8 | $and;
    var $shl9 = $shl << $and8;
    var $sub10 = $shl9 + 245760 | 0;
    var $shr11 = $sub10 >>> 16;
    var $and12 = $shr11 & 2;
    var $add13 = $add | $and12;
    var $sub14 = 14 - $add13 | 0;
    var $shl15 = $shl9 << $and12;
    var $shr16 = $shl15 >>> 15;
    var $add17 = $sub14 + $shr16 | 0;
    var $shl18 = $add17 << 1;
    var $add19 = $add17 + 7 | 0;
    var $shr20 = $nb >>> ($add19 >>> 0);
    var $and21 = $shr20 & 1;
    var $add22 = $and21 | $shl18;
    var $idx_0 = $add22;
    label = 5;
    break;
   case 5:
    var $idx_0;
    var $arrayidx = 5587900 + ($idx_0 << 2) | 0;
    var $0 = HEAP32[$arrayidx >> 2];
    var $cmp24 = ($0 | 0) == 0;
    if ($cmp24) {
      var $v_2 = 0;
      var $rsize_2 = $sub;
      var $t_1 = 0;
      label = 12;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $cmp26 = ($idx_0 | 0) == 31;
    if ($cmp26) {
      var $cond = 0;
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $shr27 = $idx_0 >>> 1;
    var $sub30 = 25 - $shr27 | 0;
    var $cond = $sub30;
    label = 8;
    break;
   case 8:
    var $cond;
    var $shl31 = $nb << $cond;
    var $v_0 = 0;
    var $rsize_0 = $sub;
    var $t_0 = $0;
    var $sizebits_0 = $shl31;
    var $rst_0 = 0;
    label = 9;
    break;
   case 9:
    var $rst_0;
    var $sizebits_0;
    var $t_0;
    var $rsize_0;
    var $v_0;
    var $head = $t_0 + 4 | 0;
    var $1 = HEAP32[$head >> 2];
    var $and32 = $1 & -8;
    var $sub33 = $and32 - $nb | 0;
    var $cmp34 = $sub33 >>> 0 < $rsize_0 >>> 0;
    if ($cmp34) {
      label = 10;
      break;
    } else {
      var $v_1 = $v_0;
      var $rsize_1 = $rsize_0;
      label = 11;
      break;
    }
   case 10:
    var $cmp36 = ($and32 | 0) == ($nb | 0);
    if ($cmp36) {
      var $v_2 = $t_0;
      var $rsize_2 = $sub33;
      var $t_1 = $t_0;
      label = 12;
      break;
    } else {
      var $v_1 = $t_0;
      var $rsize_1 = $sub33;
      label = 11;
      break;
    }
   case 11:
    var $rsize_1;
    var $v_1;
    var $arrayidx40 = $t_0 + 20 | 0;
    var $2 = HEAP32[$arrayidx40 >> 2];
    var $shr41 = $sizebits_0 >>> 31;
    var $arrayidx44 = $t_0 + 16 + ($shr41 << 2) | 0;
    var $3 = HEAP32[$arrayidx44 >> 2];
    var $cmp45 = ($2 | 0) == 0;
    var $cmp46 = ($2 | 0) == ($3 | 0);
    var $or_cond = $cmp45 | $cmp46;
    var $rst_1 = $or_cond ? $rst_0 : $2;
    var $cmp49 = ($3 | 0) == 0;
    var $shl52 = $sizebits_0 << 1;
    if ($cmp49) {
      var $v_2 = $v_1;
      var $rsize_2 = $rsize_1;
      var $t_1 = $rst_1;
      label = 12;
      break;
    } else {
      var $v_0 = $v_1;
      var $rsize_0 = $rsize_1;
      var $t_0 = $3;
      var $sizebits_0 = $shl52;
      var $rst_0 = $rst_1;
      label = 9;
      break;
    }
   case 12:
    var $t_1;
    var $rsize_2;
    var $v_2;
    var $cmp54 = ($t_1 | 0) == 0;
    var $cmp56 = ($v_2 | 0) == 0;
    var $or_cond16 = $cmp54 & $cmp56;
    if ($or_cond16) {
      label = 13;
      break;
    } else {
      var $t_2_ph = $t_1;
      label = 15;
      break;
    }
   case 13:
    var $shl59 = 2 << $idx_0;
    var $sub62 = -$shl59 | 0;
    var $or = $shl59 | $sub62;
    var $4 = HEAP32[5587600 >> 2];
    var $and63 = $4 & $or;
    var $cmp64 = ($and63 | 0) == 0;
    if ($cmp64) {
      var $rsize_3_lcssa = $rsize_2;
      var $v_3_lcssa = $v_2;
      label = 18;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $sub66 = -$and63 | 0;
    var $and67 = $and63 & $sub66;
    var $sub69 = $and67 - 1 | 0;
    var $shr71 = $sub69 >>> 12;
    var $and72 = $shr71 & 16;
    var $shr74 = $sub69 >>> ($and72 >>> 0);
    var $shr75 = $shr74 >>> 5;
    var $and76 = $shr75 & 8;
    var $add77 = $and76 | $and72;
    var $shr78 = $shr74 >>> ($and76 >>> 0);
    var $shr79 = $shr78 >>> 2;
    var $and80 = $shr79 & 4;
    var $add81 = $add77 | $and80;
    var $shr82 = $shr78 >>> ($and80 >>> 0);
    var $shr83 = $shr82 >>> 1;
    var $and84 = $shr83 & 2;
    var $add85 = $add81 | $and84;
    var $shr86 = $shr82 >>> ($and84 >>> 0);
    var $shr87 = $shr86 >>> 1;
    var $and88 = $shr87 & 1;
    var $add89 = $add85 | $and88;
    var $shr90 = $shr86 >>> ($and88 >>> 0);
    var $add91 = $add89 + $shr90 | 0;
    var $arrayidx93 = 5587900 + ($add91 << 2) | 0;
    var $5 = HEAP32[$arrayidx93 >> 2];
    var $t_2_ph = $5;
    label = 15;
    break;
   case 15:
    var $t_2_ph;
    var $cmp9620 = ($t_2_ph | 0) == 0;
    if ($cmp9620) {
      var $rsize_3_lcssa = $rsize_2;
      var $v_3_lcssa = $v_2;
      label = 18;
      break;
    } else {
      var $t_221 = $t_2_ph;
      var $rsize_322 = $rsize_2;
      var $v_323 = $v_2;
      label = 16;
      break;
    }
   case 16:
    var $v_323;
    var $rsize_322;
    var $t_221;
    var $head98 = $t_221 + 4 | 0;
    var $6 = HEAP32[$head98 >> 2];
    var $and99 = $6 & -8;
    var $sub100 = $and99 - $nb | 0;
    var $cmp101 = $sub100 >>> 0 < $rsize_322 >>> 0;
    var $sub100_rsize_3 = $cmp101 ? $sub100 : $rsize_322;
    var $t_2_v_3 = $cmp101 ? $t_221 : $v_323;
    var $arrayidx105 = $t_221 + 16 | 0;
    var $7 = HEAP32[$arrayidx105 >> 2];
    var $cmp106 = ($7 | 0) == 0;
    if ($cmp106) {
      label = 17;
      break;
    } else {
      var $t_221 = $7;
      var $rsize_322 = $sub100_rsize_3;
      var $v_323 = $t_2_v_3;
      label = 16;
      break;
    }
   case 17:
    var $arrayidx112 = $t_221 + 20 | 0;
    var $8 = HEAP32[$arrayidx112 >> 2];
    var $cmp96 = ($8 | 0) == 0;
    if ($cmp96) {
      var $rsize_3_lcssa = $sub100_rsize_3;
      var $v_3_lcssa = $t_2_v_3;
      label = 18;
      break;
    } else {
      var $t_221 = $8;
      var $rsize_322 = $sub100_rsize_3;
      var $v_323 = $t_2_v_3;
      label = 16;
      break;
    }
   case 18:
    var $v_3_lcssa;
    var $rsize_3_lcssa;
    var $cmp115 = ($v_3_lcssa | 0) == 0;
    if ($cmp115) {
      var $retval_0 = 0;
      label = 80;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $9 = HEAP32[5587604 >> 2];
    var $sub117 = $9 - $nb | 0;
    var $cmp118 = $rsize_3_lcssa >>> 0 < $sub117 >>> 0;
    if ($cmp118) {
      label = 20;
      break;
    } else {
      var $retval_0 = 0;
      label = 80;
      break;
    }
   case 20:
    var $10 = $v_3_lcssa;
    var $11 = HEAP32[5587612 >> 2];
    var $cmp120 = $10 >>> 0 < $11 >>> 0;
    if ($cmp120) {
      label = 79;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    var $add_ptr = $10 + $nb | 0;
    var $12 = $add_ptr;
    var $cmp122 = $10 >>> 0 < $add_ptr >>> 0;
    if ($cmp122) {
      label = 22;
      break;
    } else {
      label = 79;
      break;
    }
   case 22:
    var $parent = $v_3_lcssa + 24 | 0;
    var $13 = HEAP32[$parent >> 2];
    var $bk = $v_3_lcssa + 12 | 0;
    var $14 = HEAP32[$bk >> 2];
    var $cmp127 = ($14 | 0) == ($v_3_lcssa | 0);
    if ($cmp127) {
      label = 26;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    var $fd = $v_3_lcssa + 8 | 0;
    var $15 = HEAP32[$fd >> 2];
    var $16 = $15;
    var $cmp132 = $16 >>> 0 < $11 >>> 0;
    if ($cmp132) {
      label = 25;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    var $bk137 = $15 + 12 | 0;
    HEAP32[$bk137 >> 2] = $14;
    var $fd138 = $14 + 8 | 0;
    HEAP32[$fd138 >> 2] = $15;
    var $R_1 = $14;
    label = 33;
    break;
   case 25:
    _abort();
   case 26:
    var $arrayidx143 = $v_3_lcssa + 20 | 0;
    var $17 = HEAP32[$arrayidx143 >> 2];
    var $cmp144 = ($17 | 0) == 0;
    if ($cmp144) {
      label = 27;
      break;
    } else {
      var $R_0 = $17;
      var $RP_0 = $arrayidx143;
      label = 28;
      break;
    }
   case 27:
    var $arrayidx147 = $v_3_lcssa + 16 | 0;
    var $18 = HEAP32[$arrayidx147 >> 2];
    var $cmp148 = ($18 | 0) == 0;
    if ($cmp148) {
      var $R_1 = 0;
      label = 33;
      break;
    } else {
      var $R_0 = $18;
      var $RP_0 = $arrayidx147;
      label = 28;
      break;
    }
   case 28:
    var $RP_0;
    var $R_0;
    var $arrayidx153 = $R_0 + 20 | 0;
    var $19 = HEAP32[$arrayidx153 >> 2];
    var $cmp154 = ($19 | 0) == 0;
    if ($cmp154) {
      label = 29;
      break;
    } else {
      var $R_0 = $19;
      var $RP_0 = $arrayidx153;
      label = 28;
      break;
    }
   case 29:
    var $arrayidx157 = $R_0 + 16 | 0;
    var $20 = HEAP32[$arrayidx157 >> 2];
    var $cmp158 = ($20 | 0) == 0;
    if ($cmp158) {
      label = 30;
      break;
    } else {
      var $R_0 = $20;
      var $RP_0 = $arrayidx157;
      label = 28;
      break;
    }
   case 30:
    var $21 = $RP_0;
    var $cmp163 = $21 >>> 0 < $11 >>> 0;
    if ($cmp163) {
      label = 32;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    HEAP32[$RP_0 >> 2] = 0;
    var $R_1 = $R_0;
    label = 33;
    break;
   case 32:
    _abort();
   case 33:
    var $R_1;
    var $cmp172 = ($13 | 0) == 0;
    if ($cmp172) {
      label = 53;
      break;
    } else {
      label = 34;
      break;
    }
   case 34:
    var $index = $v_3_lcssa + 28 | 0;
    var $22 = HEAP32[$index >> 2];
    var $arrayidx176 = 5587900 + ($22 << 2) | 0;
    var $23 = HEAP32[$arrayidx176 >> 2];
    var $cmp177 = ($v_3_lcssa | 0) == ($23 | 0);
    if ($cmp177) {
      label = 35;
      break;
    } else {
      label = 37;
      break;
    }
   case 35:
    HEAP32[$arrayidx176 >> 2] = $R_1;
    var $cond17 = ($R_1 | 0) == 0;
    if ($cond17) {
      label = 36;
      break;
    } else {
      label = 43;
      break;
    }
   case 36:
    var $24 = HEAP32[$index >> 2];
    var $shl184 = 1 << $24;
    var $neg = $shl184 ^ -1;
    var $25 = HEAP32[5587600 >> 2];
    var $and186 = $25 & $neg;
    HEAP32[5587600 >> 2] = $and186;
    label = 53;
    break;
   case 37:
    var $26 = $13;
    var $27 = HEAP32[5587612 >> 2];
    var $cmp190 = $26 >>> 0 < $27 >>> 0;
    if ($cmp190) {
      label = 41;
      break;
    } else {
      label = 38;
      break;
    }
   case 38:
    var $arrayidx196 = $13 + 16 | 0;
    var $28 = HEAP32[$arrayidx196 >> 2];
    var $cmp197 = ($28 | 0) == ($v_3_lcssa | 0);
    if ($cmp197) {
      label = 39;
      break;
    } else {
      label = 40;
      break;
    }
   case 39:
    HEAP32[$arrayidx196 >> 2] = $R_1;
    label = 42;
    break;
   case 40:
    var $arrayidx204 = $13 + 20 | 0;
    HEAP32[$arrayidx204 >> 2] = $R_1;
    label = 42;
    break;
   case 41:
    _abort();
   case 42:
    var $cmp209 = ($R_1 | 0) == 0;
    if ($cmp209) {
      label = 53;
      break;
    } else {
      label = 43;
      break;
    }
   case 43:
    var $29 = $R_1;
    var $30 = HEAP32[5587612 >> 2];
    var $cmp213 = $29 >>> 0 < $30 >>> 0;
    if ($cmp213) {
      label = 52;
      break;
    } else {
      label = 44;
      break;
    }
   case 44:
    var $parent218 = $R_1 + 24 | 0;
    HEAP32[$parent218 >> 2] = $13;
    var $arrayidx220 = $v_3_lcssa + 16 | 0;
    var $31 = HEAP32[$arrayidx220 >> 2];
    var $cmp221 = ($31 | 0) == 0;
    if ($cmp221) {
      label = 48;
      break;
    } else {
      label = 45;
      break;
    }
   case 45:
    var $32 = $31;
    var $33 = HEAP32[5587612 >> 2];
    var $cmp225 = $32 >>> 0 < $33 >>> 0;
    if ($cmp225) {
      label = 47;
      break;
    } else {
      label = 46;
      break;
    }
   case 46:
    var $arrayidx231 = $R_1 + 16 | 0;
    HEAP32[$arrayidx231 >> 2] = $31;
    var $parent232 = $31 + 24 | 0;
    HEAP32[$parent232 >> 2] = $R_1;
    label = 48;
    break;
   case 47:
    _abort();
   case 48:
    var $arrayidx237 = $v_3_lcssa + 20 | 0;
    var $34 = HEAP32[$arrayidx237 >> 2];
    var $cmp238 = ($34 | 0) == 0;
    if ($cmp238) {
      label = 53;
      break;
    } else {
      label = 49;
      break;
    }
   case 49:
    var $35 = $34;
    var $36 = HEAP32[5587612 >> 2];
    var $cmp242 = $35 >>> 0 < $36 >>> 0;
    if ($cmp242) {
      label = 51;
      break;
    } else {
      label = 50;
      break;
    }
   case 50:
    var $arrayidx248 = $R_1 + 20 | 0;
    HEAP32[$arrayidx248 >> 2] = $34;
    var $parent249 = $34 + 24 | 0;
    HEAP32[$parent249 >> 2] = $R_1;
    label = 53;
    break;
   case 51:
    _abort();
   case 52:
    _abort();
   case 53:
    var $cmp257 = $rsize_3_lcssa >>> 0 < 16;
    if ($cmp257) {
      label = 54;
      break;
    } else {
      label = 55;
      break;
    }
   case 54:
    var $add260 = $rsize_3_lcssa + $nb | 0;
    var $or262 = $add260 | 3;
    var $head263 = $v_3_lcssa + 4 | 0;
    HEAP32[$head263 >> 2] = $or262;
    var $add_ptr265_sum = $add260 + 4 | 0;
    var $head266 = $10 + $add_ptr265_sum | 0;
    var $37 = $head266;
    var $38 = HEAP32[$37 >> 2];
    var $or267 = $38 | 1;
    HEAP32[$37 >> 2] = $or267;
    label = 78;
    break;
   case 55:
    var $or270 = $nb | 3;
    var $head271 = $v_3_lcssa + 4 | 0;
    HEAP32[$head271 >> 2] = $or270;
    var $or272 = $rsize_3_lcssa | 1;
    var $add_ptr_sum = $nb + 4 | 0;
    var $head273 = $10 + $add_ptr_sum | 0;
    var $39 = $head273;
    HEAP32[$39 >> 2] = $or272;
    var $add_ptr_sum1 = $rsize_3_lcssa + $nb | 0;
    var $add_ptr274 = $10 + $add_ptr_sum1 | 0;
    var $prev_foot = $add_ptr274;
    HEAP32[$prev_foot >> 2] = $rsize_3_lcssa;
    var $shr275 = $rsize_3_lcssa >>> 3;
    var $cmp276 = $rsize_3_lcssa >>> 0 < 256;
    if ($cmp276) {
      label = 56;
      break;
    } else {
      label = 61;
      break;
    }
   case 56:
    var $shl280 = $shr275 << 1;
    var $arrayidx281 = 5587636 + ($shl280 << 2) | 0;
    var $40 = $arrayidx281;
    var $41 = HEAP32[5587596 >> 2];
    var $shl283 = 1 << $shr275;
    var $and284 = $41 & $shl283;
    var $tobool285 = ($and284 | 0) == 0;
    if ($tobool285) {
      label = 57;
      break;
    } else {
      label = 58;
      break;
    }
   case 57:
    var $or289 = $41 | $shl283;
    HEAP32[5587596 >> 2] = $or289;
    var $arrayidx281_sum_pre = $shl280 + 2 | 0;
    var $_pre = 5587636 + ($arrayidx281_sum_pre << 2) | 0;
    var $F282_0 = $40;
    var $_pre_phi = $_pre;
    label = 60;
    break;
   case 58:
    var $arrayidx281_sum15 = $shl280 + 2 | 0;
    var $42 = 5587636 + ($arrayidx281_sum15 << 2) | 0;
    var $43 = HEAP32[$42 >> 2];
    var $44 = $43;
    var $45 = HEAP32[5587612 >> 2];
    var $cmp293 = $44 >>> 0 < $45 >>> 0;
    if ($cmp293) {
      label = 59;
      break;
    } else {
      var $F282_0 = $43;
      var $_pre_phi = $42;
      label = 60;
      break;
    }
   case 59:
    _abort();
   case 60:
    var $_pre_phi;
    var $F282_0;
    HEAP32[$_pre_phi >> 2] = $12;
    var $bk303 = $F282_0 + 12 | 0;
    HEAP32[$bk303 >> 2] = $12;
    var $add_ptr_sum13 = $nb + 8 | 0;
    var $fd304 = $10 + $add_ptr_sum13 | 0;
    var $46 = $fd304;
    HEAP32[$46 >> 2] = $F282_0;
    var $add_ptr_sum14 = $nb + 12 | 0;
    var $bk305 = $10 + $add_ptr_sum14 | 0;
    var $47 = $bk305;
    HEAP32[$47 >> 2] = $40;
    label = 78;
    break;
   case 61:
    var $48 = $add_ptr;
    var $shr310 = $rsize_3_lcssa >>> 8;
    var $cmp311 = ($shr310 | 0) == 0;
    if ($cmp311) {
      var $I308_0 = 0;
      label = 64;
      break;
    } else {
      label = 62;
      break;
    }
   case 62:
    var $cmp315 = $rsize_3_lcssa >>> 0 > 16777215;
    if ($cmp315) {
      var $I308_0 = 31;
      label = 64;
      break;
    } else {
      label = 63;
      break;
    }
   case 63:
    var $sub321 = $shr310 + 1048320 | 0;
    var $shr322 = $sub321 >>> 16;
    var $and323 = $shr322 & 8;
    var $shl325 = $shr310 << $and323;
    var $sub326 = $shl325 + 520192 | 0;
    var $shr327 = $sub326 >>> 16;
    var $and328 = $shr327 & 4;
    var $add329 = $and328 | $and323;
    var $shl330 = $shl325 << $and328;
    var $sub331 = $shl330 + 245760 | 0;
    var $shr332 = $sub331 >>> 16;
    var $and333 = $shr332 & 2;
    var $add334 = $add329 | $and333;
    var $sub335 = 14 - $add334 | 0;
    var $shl336 = $shl330 << $and333;
    var $shr337 = $shl336 >>> 15;
    var $add338 = $sub335 + $shr337 | 0;
    var $shl339 = $add338 << 1;
    var $add340 = $add338 + 7 | 0;
    var $shr341 = $rsize_3_lcssa >>> ($add340 >>> 0);
    var $and342 = $shr341 & 1;
    var $add343 = $and342 | $shl339;
    var $I308_0 = $add343;
    label = 64;
    break;
   case 64:
    var $I308_0;
    var $arrayidx347 = 5587900 + ($I308_0 << 2) | 0;
    var $add_ptr_sum2 = $nb + 28 | 0;
    var $index348 = $10 + $add_ptr_sum2 | 0;
    var $49 = $index348;
    HEAP32[$49 >> 2] = $I308_0;
    var $add_ptr_sum3 = $nb + 16 | 0;
    var $child349 = $10 + $add_ptr_sum3 | 0;
    var $child349_sum = $nb + 20 | 0;
    var $arrayidx350 = $10 + $child349_sum | 0;
    var $50 = $arrayidx350;
    HEAP32[$50 >> 2] = 0;
    var $arrayidx352 = $child349;
    HEAP32[$arrayidx352 >> 2] = 0;
    var $51 = HEAP32[5587600 >> 2];
    var $shl354 = 1 << $I308_0;
    var $and355 = $51 & $shl354;
    var $tobool356 = ($and355 | 0) == 0;
    if ($tobool356) {
      label = 65;
      break;
    } else {
      label = 66;
      break;
    }
   case 65:
    var $or360 = $51 | $shl354;
    HEAP32[5587600 >> 2] = $or360;
    HEAP32[$arrayidx347 >> 2] = $48;
    var $52 = $arrayidx347;
    var $add_ptr_sum4 = $nb + 24 | 0;
    var $parent361 = $10 + $add_ptr_sum4 | 0;
    var $53 = $parent361;
    HEAP32[$53 >> 2] = $52;
    var $add_ptr_sum5 = $nb + 12 | 0;
    var $bk362 = $10 + $add_ptr_sum5 | 0;
    var $54 = $bk362;
    HEAP32[$54 >> 2] = $48;
    var $add_ptr_sum6 = $nb + 8 | 0;
    var $fd363 = $10 + $add_ptr_sum6 | 0;
    var $55 = $fd363;
    HEAP32[$55 >> 2] = $48;
    label = 78;
    break;
   case 66:
    var $56 = HEAP32[$arrayidx347 >> 2];
    var $cmp366 = ($I308_0 | 0) == 31;
    if ($cmp366) {
      var $cond375 = 0;
      label = 68;
      break;
    } else {
      label = 67;
      break;
    }
   case 67:
    var $shr370 = $I308_0 >>> 1;
    var $sub373 = 25 - $shr370 | 0;
    var $cond375 = $sub373;
    label = 68;
    break;
   case 68:
    var $cond375;
    var $shl376 = $rsize_3_lcssa << $cond375;
    var $K365_0 = $shl376;
    var $T_0 = $56;
    label = 69;
    break;
   case 69:
    var $T_0;
    var $K365_0;
    var $head378 = $T_0 + 4 | 0;
    var $57 = HEAP32[$head378 >> 2];
    var $and379 = $57 & -8;
    var $cmp380 = ($and379 | 0) == ($rsize_3_lcssa | 0);
    if ($cmp380) {
      label = 74;
      break;
    } else {
      label = 70;
      break;
    }
   case 70:
    var $shr383 = $K365_0 >>> 31;
    var $arrayidx386 = $T_0 + 16 + ($shr383 << 2) | 0;
    var $58 = HEAP32[$arrayidx386 >> 2];
    var $cmp388 = ($58 | 0) == 0;
    var $shl387 = $K365_0 << 1;
    if ($cmp388) {
      label = 71;
      break;
    } else {
      var $K365_0 = $shl387;
      var $T_0 = $58;
      label = 69;
      break;
    }
   case 71:
    var $59 = $arrayidx386;
    var $60 = HEAP32[5587612 >> 2];
    var $cmp393 = $59 >>> 0 < $60 >>> 0;
    if ($cmp393) {
      label = 73;
      break;
    } else {
      label = 72;
      break;
    }
   case 72:
    HEAP32[$arrayidx386 >> 2] = $48;
    var $add_ptr_sum10 = $nb + 24 | 0;
    var $parent398 = $10 + $add_ptr_sum10 | 0;
    var $61 = $parent398;
    HEAP32[$61 >> 2] = $T_0;
    var $add_ptr_sum11 = $nb + 12 | 0;
    var $bk399 = $10 + $add_ptr_sum11 | 0;
    var $62 = $bk399;
    HEAP32[$62 >> 2] = $48;
    var $add_ptr_sum12 = $nb + 8 | 0;
    var $fd400 = $10 + $add_ptr_sum12 | 0;
    var $63 = $fd400;
    HEAP32[$63 >> 2] = $48;
    label = 78;
    break;
   case 73:
    _abort();
   case 74:
    var $fd405 = $T_0 + 8 | 0;
    var $64 = HEAP32[$fd405 >> 2];
    var $65 = $T_0;
    var $66 = HEAP32[5587612 >> 2];
    var $cmp407 = $65 >>> 0 < $66 >>> 0;
    if ($cmp407) {
      label = 77;
      break;
    } else {
      label = 75;
      break;
    }
   case 75:
    var $67 = $64;
    var $cmp410 = $67 >>> 0 < $66 >>> 0;
    if ($cmp410) {
      label = 77;
      break;
    } else {
      label = 76;
      break;
    }
   case 76:
    var $bk415 = $64 + 12 | 0;
    HEAP32[$bk415 >> 2] = $48;
    HEAP32[$fd405 >> 2] = $48;
    var $add_ptr_sum7 = $nb + 8 | 0;
    var $fd417 = $10 + $add_ptr_sum7 | 0;
    var $68 = $fd417;
    HEAP32[$68 >> 2] = $64;
    var $add_ptr_sum8 = $nb + 12 | 0;
    var $bk418 = $10 + $add_ptr_sum8 | 0;
    var $69 = $bk418;
    HEAP32[$69 >> 2] = $T_0;
    var $add_ptr_sum9 = $nb + 24 | 0;
    var $parent419 = $10 + $add_ptr_sum9 | 0;
    var $70 = $parent419;
    HEAP32[$70 >> 2] = 0;
    label = 78;
    break;
   case 77:
    _abort();
   case 78:
    var $add_ptr426 = $v_3_lcssa + 8 | 0;
    var $71 = $add_ptr426;
    var $retval_0 = $71;
    label = 80;
    break;
   case 79:
    _abort();
   case 80:
    var $retval_0;
    return $retval_0;
  }
}
_tmalloc_large["X"] = 1;
function _release_unused_segments() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $sp_0_in = 5588048;
    label = 3;
    break;
   case 3:
    var $sp_0_in;
    var $sp_0 = HEAP32[$sp_0_in >> 2];
    var $cmp = ($sp_0 | 0) == 0;
    var $next4 = $sp_0 + 8 | 0;
    if ($cmp) {
      label = 4;
      break;
    } else {
      var $sp_0_in = $next4;
      label = 3;
      break;
    }
   case 4:
    HEAP32[5587628 >> 2] = -1;
    return;
  }
}
function _sys_trim() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5263284 >> 2];
    var $cmp = ($0 | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _init_mparams();
    label = 4;
    break;
   case 4:
    var $1 = HEAP32[5587620 >> 2];
    var $cmp2 = ($1 | 0) == 0;
    if ($cmp2) {
      label = 13;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $2 = HEAP32[5587608 >> 2];
    var $cmp3 = $2 >>> 0 > 40;
    if ($cmp3) {
      label = 6;
      break;
    } else {
      label = 11;
      break;
    }
   case 6:
    var $3 = HEAP32[5263292 >> 2];
    var $sub = $2 - 41 | 0;
    var $add7 = $sub + $3 | 0;
    var $div = Math.floor(($add7 >>> 0) / ($3 >>> 0));
    var $sub8 = $div - 1 | 0;
    var $mul = $sub8 * $3 & -1;
    var $4 = $1;
    var $call10 = _segment_holding($4);
    var $sflags = $call10 + 12 | 0;
    var $5 = HEAP32[$sflags >> 2];
    var $and = $5 & 8;
    var $tobool11 = ($and | 0) == 0;
    if ($tobool11) {
      label = 7;
      break;
    } else {
      label = 11;
      break;
    }
   case 7:
    var $call20 = _sbrk(0);
    var $base = $call10 | 0;
    var $6 = HEAP32[$base >> 2];
    var $size = $call10 + 4 | 0;
    var $7 = HEAP32[$size >> 2];
    var $add_ptr = $6 + $7 | 0;
    var $cmp21 = ($call20 | 0) == ($add_ptr | 0);
    if ($cmp21) {
      label = 8;
      break;
    } else {
      label = 11;
      break;
    }
   case 8:
    var $sub19 = -2147483648 - $3 | 0;
    var $cmp17 = $mul >>> 0 > 2147483646;
    var $sub19_mul = $cmp17 ? $sub19 : $mul;
    var $sub23 = -$sub19_mul | 0;
    var $call24 = _sbrk($sub23);
    var $call25 = _sbrk(0);
    var $cmp26 = ($call24 | 0) != -1;
    var $cmp28 = $call25 >>> 0 < $call20 >>> 0;
    var $or_cond = $cmp26 & $cmp28;
    if ($or_cond) {
      label = 9;
      break;
    } else {
      label = 11;
      break;
    }
   case 9:
    var $sub_ptr_lhs_cast = $call20;
    var $sub_ptr_rhs_cast = $call25;
    var $sub_ptr_sub = $sub_ptr_lhs_cast - $sub_ptr_rhs_cast | 0;
    var $cmp34 = ($call20 | 0) == ($call25 | 0);
    if ($cmp34) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    var $8 = HEAP32[$size >> 2];
    var $sub37 = $8 - $sub_ptr_sub | 0;
    HEAP32[$size >> 2] = $sub37;
    var $9 = HEAP32[5588028 >> 2];
    var $sub38 = $9 - $sub_ptr_sub | 0;
    HEAP32[5588028 >> 2] = $sub38;
    var $10 = HEAP32[5587620 >> 2];
    var $11 = HEAP32[5587608 >> 2];
    var $sub41 = $11 - $sub_ptr_sub | 0;
    _init_top($10, $sub41);
    label = 13;
    break;
   case 11:
    var $12 = HEAP32[5587608 >> 2];
    var $13 = HEAP32[5587624 >> 2];
    var $cmp47 = $12 >>> 0 > $13 >>> 0;
    if ($cmp47) {
      label = 12;
      break;
    } else {
      label = 13;
      break;
    }
   case 12:
    HEAP32[5587624 >> 2] = -1;
    label = 13;
    break;
   case 13:
    return;
  }
}
_sys_trim["X"] = 1;
function _free($mem) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $cmp = ($mem | 0) == 0;
    if ($cmp) {
      label = 128;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $add_ptr = $mem - 8 | 0;
    var $0 = $add_ptr;
    var $1 = HEAP32[5587612 >> 2];
    var $cmp1 = $add_ptr >>> 0 < $1 >>> 0;
    if ($cmp1) {
      label = 127;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $head = $mem - 4 | 0;
    var $2 = $head;
    var $3 = HEAP32[$2 >> 2];
    var $and = $3 & 3;
    var $cmp2 = ($and | 0) == 1;
    if ($cmp2) {
      label = 127;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $and5 = $3 & -8;
    var $add_ptr_sum = $and5 - 8 | 0;
    var $add_ptr6 = $mem + $add_ptr_sum | 0;
    var $4 = $add_ptr6;
    var $and8 = $3 & 1;
    var $tobool9 = ($and8 | 0) == 0;
    if ($tobool9) {
      label = 6;
      break;
    } else {
      var $p_0 = $0;
      var $psize_0 = $and5;
      label = 49;
      break;
    }
   case 6:
    var $prev_foot = $add_ptr;
    var $5 = HEAP32[$prev_foot >> 2];
    var $cmp13 = ($and | 0) == 0;
    if ($cmp13) {
      label = 128;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $add_ptr_sum215 = -8 - $5 | 0;
    var $add_ptr16 = $mem + $add_ptr_sum215 | 0;
    var $6 = $add_ptr16;
    var $add17 = $5 + $and5 | 0;
    var $cmp18 = $add_ptr16 >>> 0 < $1 >>> 0;
    if ($cmp18) {
      label = 127;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    var $7 = HEAP32[5587616 >> 2];
    var $cmp22 = ($6 | 0) == ($7 | 0);
    if ($cmp22) {
      label = 47;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    var $shr = $5 >>> 3;
    var $cmp25 = $5 >>> 0 < 256;
    if ($cmp25) {
      label = 10;
      break;
    } else {
      label = 16;
      break;
    }
   case 10:
    var $add_ptr16_sum242 = $add_ptr_sum215 + 8 | 0;
    var $fd = $mem + $add_ptr16_sum242 | 0;
    var $8 = $fd;
    var $9 = HEAP32[$8 >> 2];
    var $add_ptr16_sum243 = $add_ptr_sum215 + 12 | 0;
    var $bk = $mem + $add_ptr16_sum243 | 0;
    var $10 = $bk;
    var $11 = HEAP32[$10 >> 2];
    var $cmp29 = ($9 | 0) == ($11 | 0);
    if ($cmp29) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    var $shl = 1 << $shr;
    var $neg = $shl ^ -1;
    var $12 = HEAP32[5587596 >> 2];
    var $and32 = $12 & $neg;
    HEAP32[5587596 >> 2] = $and32;
    var $p_0 = $6;
    var $psize_0 = $add17;
    label = 49;
    break;
   case 12:
    var $shl34 = $shr << 1;
    var $arrayidx = 5587636 + ($shl34 << 2) | 0;
    var $13 = $arrayidx;
    var $cmp35 = ($9 | 0) != ($13 | 0);
    var $14 = $9;
    var $cmp37 = $14 >>> 0 < $1 >>> 0;
    var $or_cond = $cmp35 & $cmp37;
    if ($or_cond) {
      label = 15;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    var $cmp42 = ($11 | 0) == ($13 | 0);
    var $15 = $11;
    var $cmp44 = $15 >>> 0 >= $1 >>> 0;
    var $or_cond248 = $cmp42 | $cmp44;
    if ($or_cond248) {
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 14:
    var $bk51 = $9 + 12 | 0;
    HEAP32[$bk51 >> 2] = $11;
    var $fd52 = $11 + 8 | 0;
    HEAP32[$fd52 >> 2] = $9;
    var $p_0 = $6;
    var $psize_0 = $add17;
    label = 49;
    break;
   case 15:
    _abort();
   case 16:
    var $16 = $add_ptr16;
    var $add_ptr16_sum236 = $add_ptr_sum215 + 24 | 0;
    var $parent = $mem + $add_ptr16_sum236 | 0;
    var $17 = $parent;
    var $18 = HEAP32[$17 >> 2];
    var $add_ptr16_sum237 = $add_ptr_sum215 + 12 | 0;
    var $bk56 = $mem + $add_ptr16_sum237 | 0;
    var $19 = $bk56;
    var $20 = HEAP32[$19 >> 2];
    var $cmp57 = ($20 | 0) == ($16 | 0);
    if ($cmp57) {
      label = 20;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    var $add_ptr16_sum241 = $add_ptr_sum215 + 8 | 0;
    var $fd61 = $mem + $add_ptr16_sum241 | 0;
    var $21 = $fd61;
    var $22 = HEAP32[$21 >> 2];
    var $23 = $22;
    var $cmp63 = $23 >>> 0 < $1 >>> 0;
    if ($cmp63) {
      label = 19;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    var $bk68 = $22 + 12 | 0;
    HEAP32[$bk68 >> 2] = $20;
    var $fd69 = $20 + 8 | 0;
    HEAP32[$fd69 >> 2] = $22;
    var $R_1 = $20;
    label = 27;
    break;
   case 19:
    _abort();
   case 20:
    var $child_sum = $add_ptr_sum215 + 20 | 0;
    var $arrayidx73 = $mem + $child_sum | 0;
    var $24 = $arrayidx73;
    var $25 = HEAP32[$24 >> 2];
    var $cmp74 = ($25 | 0) == 0;
    if ($cmp74) {
      label = 21;
      break;
    } else {
      var $R_0 = $25;
      var $RP_0 = $24;
      label = 22;
      break;
    }
   case 21:
    var $add_ptr16_sum238 = $add_ptr_sum215 + 16 | 0;
    var $child = $mem + $add_ptr16_sum238 | 0;
    var $arrayidx78 = $child;
    var $26 = HEAP32[$arrayidx78 >> 2];
    var $cmp79 = ($26 | 0) == 0;
    if ($cmp79) {
      var $R_1 = 0;
      label = 27;
      break;
    } else {
      var $R_0 = $26;
      var $RP_0 = $arrayidx78;
      label = 22;
      break;
    }
   case 22:
    var $RP_0;
    var $R_0;
    var $arrayidx83 = $R_0 + 20 | 0;
    var $27 = HEAP32[$arrayidx83 >> 2];
    var $cmp84 = ($27 | 0) == 0;
    if ($cmp84) {
      label = 23;
      break;
    } else {
      var $R_0 = $27;
      var $RP_0 = $arrayidx83;
      label = 22;
      break;
    }
   case 23:
    var $arrayidx88 = $R_0 + 16 | 0;
    var $28 = HEAP32[$arrayidx88 >> 2];
    var $cmp89 = ($28 | 0) == 0;
    if ($cmp89) {
      label = 24;
      break;
    } else {
      var $R_0 = $28;
      var $RP_0 = $arrayidx88;
      label = 22;
      break;
    }
   case 24:
    var $29 = $RP_0;
    var $cmp92 = $29 >>> 0 < $1 >>> 0;
    if ($cmp92) {
      label = 26;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    HEAP32[$RP_0 >> 2] = 0;
    var $R_1 = $R_0;
    label = 27;
    break;
   case 26:
    _abort();
   case 27:
    var $R_1;
    var $cmp101 = ($18 | 0) == 0;
    if ($cmp101) {
      var $p_0 = $6;
      var $psize_0 = $add17;
      label = 49;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    var $add_ptr16_sum239 = $add_ptr_sum215 + 28 | 0;
    var $index = $mem + $add_ptr16_sum239 | 0;
    var $30 = $index;
    var $31 = HEAP32[$30 >> 2];
    var $arrayidx104 = 5587900 + ($31 << 2) | 0;
    var $32 = HEAP32[$arrayidx104 >> 2];
    var $cmp105 = ($16 | 0) == ($32 | 0);
    if ($cmp105) {
      label = 29;
      break;
    } else {
      label = 31;
      break;
    }
   case 29:
    HEAP32[$arrayidx104 >> 2] = $R_1;
    var $cond246 = ($R_1 | 0) == 0;
    if ($cond246) {
      label = 30;
      break;
    } else {
      label = 37;
      break;
    }
   case 30:
    var $33 = HEAP32[$30 >> 2];
    var $shl112 = 1 << $33;
    var $neg113 = $shl112 ^ -1;
    var $34 = HEAP32[5587600 >> 2];
    var $and114 = $34 & $neg113;
    HEAP32[5587600 >> 2] = $and114;
    var $p_0 = $6;
    var $psize_0 = $add17;
    label = 49;
    break;
   case 31:
    var $35 = $18;
    var $36 = HEAP32[5587612 >> 2];
    var $cmp117 = $35 >>> 0 < $36 >>> 0;
    if ($cmp117) {
      label = 35;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    var $arrayidx123 = $18 + 16 | 0;
    var $37 = HEAP32[$arrayidx123 >> 2];
    var $cmp124 = ($37 | 0) == ($16 | 0);
    if ($cmp124) {
      label = 33;
      break;
    } else {
      label = 34;
      break;
    }
   case 33:
    HEAP32[$arrayidx123 >> 2] = $R_1;
    label = 36;
    break;
   case 34:
    var $arrayidx131 = $18 + 20 | 0;
    HEAP32[$arrayidx131 >> 2] = $R_1;
    label = 36;
    break;
   case 35:
    _abort();
   case 36:
    var $cmp136 = ($R_1 | 0) == 0;
    if ($cmp136) {
      var $p_0 = $6;
      var $psize_0 = $add17;
      label = 49;
      break;
    } else {
      label = 37;
      break;
    }
   case 37:
    var $38 = $R_1;
    var $39 = HEAP32[5587612 >> 2];
    var $cmp139 = $38 >>> 0 < $39 >>> 0;
    if ($cmp139) {
      label = 46;
      break;
    } else {
      label = 38;
      break;
    }
   case 38:
    var $parent144 = $R_1 + 24 | 0;
    HEAP32[$parent144 >> 2] = $18;
    var $add_ptr16_sum240 = $add_ptr_sum215 + 16 | 0;
    var $child145 = $mem + $add_ptr16_sum240 | 0;
    var $arrayidx146 = $child145;
    var $40 = HEAP32[$arrayidx146 >> 2];
    var $cmp147 = ($40 | 0) == 0;
    if ($cmp147) {
      label = 42;
      break;
    } else {
      label = 39;
      break;
    }
   case 39:
    var $41 = $40;
    var $42 = HEAP32[5587612 >> 2];
    var $cmp150 = $41 >>> 0 < $42 >>> 0;
    if ($cmp150) {
      label = 41;
      break;
    } else {
      label = 40;
      break;
    }
   case 40:
    var $arrayidx156 = $R_1 + 16 | 0;
    HEAP32[$arrayidx156 >> 2] = $40;
    var $parent157 = $40 + 24 | 0;
    HEAP32[$parent157 >> 2] = $R_1;
    label = 42;
    break;
   case 41:
    _abort();
   case 42:
    var $child145_sum = $add_ptr_sum215 + 20 | 0;
    var $arrayidx162 = $mem + $child145_sum | 0;
    var $43 = $arrayidx162;
    var $44 = HEAP32[$43 >> 2];
    var $cmp163 = ($44 | 0) == 0;
    if ($cmp163) {
      var $p_0 = $6;
      var $psize_0 = $add17;
      label = 49;
      break;
    } else {
      label = 43;
      break;
    }
   case 43:
    var $45 = $44;
    var $46 = HEAP32[5587612 >> 2];
    var $cmp166 = $45 >>> 0 < $46 >>> 0;
    if ($cmp166) {
      label = 45;
      break;
    } else {
      label = 44;
      break;
    }
   case 44:
    var $arrayidx172 = $R_1 + 20 | 0;
    HEAP32[$arrayidx172 >> 2] = $44;
    var $parent173 = $44 + 24 | 0;
    HEAP32[$parent173 >> 2] = $R_1;
    var $p_0 = $6;
    var $psize_0 = $add17;
    label = 49;
    break;
   case 45:
    _abort();
   case 46:
    _abort();
   case 47:
    var $add_ptr6_sum = $and5 - 4 | 0;
    var $head183 = $mem + $add_ptr6_sum | 0;
    var $47 = $head183;
    var $48 = HEAP32[$47 >> 2];
    var $and184 = $48 & 3;
    var $cmp185 = ($and184 | 0) == 3;
    if ($cmp185) {
      label = 48;
      break;
    } else {
      var $p_0 = $6;
      var $psize_0 = $add17;
      label = 49;
      break;
    }
   case 48:
    HEAP32[5587604 >> 2] = $add17;
    var $49 = HEAP32[$47 >> 2];
    var $and189 = $49 & -2;
    HEAP32[$47 >> 2] = $and189;
    var $or = $add17 | 1;
    var $add_ptr16_sum = $add_ptr_sum215 + 4 | 0;
    var $head190 = $mem + $add_ptr16_sum | 0;
    var $50 = $head190;
    HEAP32[$50 >> 2] = $or;
    var $prev_foot192 = $add_ptr6;
    HEAP32[$prev_foot192 >> 2] = $add17;
    label = 128;
    break;
   case 49:
    var $psize_0;
    var $p_0;
    var $51 = $p_0;
    var $cmp199 = $51 >>> 0 < $add_ptr6 >>> 0;
    if ($cmp199) {
      label = 50;
      break;
    } else {
      label = 127;
      break;
    }
   case 50:
    var $add_ptr6_sum234 = $and5 - 4 | 0;
    var $head202 = $mem + $add_ptr6_sum234 | 0;
    var $52 = $head202;
    var $53 = HEAP32[$52 >> 2];
    var $and203 = $53 & 1;
    var $tobool204 = ($and203 | 0) == 0;
    if ($tobool204) {
      label = 127;
      break;
    } else {
      label = 51;
      break;
    }
   case 51:
    var $and211 = $53 & 2;
    var $tobool212 = ($and211 | 0) == 0;
    if ($tobool212) {
      label = 52;
      break;
    } else {
      label = 101;
      break;
    }
   case 52:
    var $54 = HEAP32[5587620 >> 2];
    var $cmp214 = ($4 | 0) == ($54 | 0);
    if ($cmp214) {
      label = 53;
      break;
    } else {
      label = 57;
      break;
    }
   case 53:
    var $55 = HEAP32[5587608 >> 2];
    var $add217 = $55 + $psize_0 | 0;
    HEAP32[5587608 >> 2] = $add217;
    HEAP32[5587620 >> 2] = $p_0;
    var $or218 = $add217 | 1;
    var $head219 = $p_0 + 4 | 0;
    HEAP32[$head219 >> 2] = $or218;
    var $56 = HEAP32[5587616 >> 2];
    var $cmp220 = ($p_0 | 0) == ($56 | 0);
    if ($cmp220) {
      label = 54;
      break;
    } else {
      label = 55;
      break;
    }
   case 54:
    HEAP32[5587616 >> 2] = 0;
    HEAP32[5587604 >> 2] = 0;
    label = 55;
    break;
   case 55:
    var $57 = HEAP32[5587624 >> 2];
    var $cmp224 = $add217 >>> 0 > $57 >>> 0;
    if ($cmp224) {
      label = 56;
      break;
    } else {
      label = 128;
      break;
    }
   case 56:
    _sys_trim();
    label = 128;
    break;
   case 57:
    var $58 = HEAP32[5587616 >> 2];
    var $cmp229 = ($4 | 0) == ($58 | 0);
    if ($cmp229) {
      label = 58;
      break;
    } else {
      label = 59;
      break;
    }
   case 58:
    var $59 = HEAP32[5587604 >> 2];
    var $add232 = $59 + $psize_0 | 0;
    HEAP32[5587604 >> 2] = $add232;
    HEAP32[5587616 >> 2] = $p_0;
    var $or233 = $add232 | 1;
    var $head234 = $p_0 + 4 | 0;
    HEAP32[$head234 >> 2] = $or233;
    var $add_ptr235 = $51 + $add232 | 0;
    var $prev_foot236 = $add_ptr235;
    HEAP32[$prev_foot236 >> 2] = $add232;
    label = 128;
    break;
   case 59:
    var $and239 = $53 & -8;
    var $add240 = $and239 + $psize_0 | 0;
    var $shr241 = $53 >>> 3;
    var $cmp242 = $53 >>> 0 < 256;
    if ($cmp242) {
      label = 60;
      break;
    } else {
      label = 68;
      break;
    }
   case 60:
    var $fd246 = $mem + $and5 | 0;
    var $60 = $fd246;
    var $61 = HEAP32[$60 >> 2];
    var $add_ptr6_sum232233 = $and5 | 4;
    var $bk248 = $mem + $add_ptr6_sum232233 | 0;
    var $62 = $bk248;
    var $63 = HEAP32[$62 >> 2];
    var $cmp251 = ($61 | 0) == ($63 | 0);
    if ($cmp251) {
      label = 61;
      break;
    } else {
      label = 62;
      break;
    }
   case 61:
    var $shl254 = 1 << $shr241;
    var $neg255 = $shl254 ^ -1;
    var $64 = HEAP32[5587596 >> 2];
    var $and256 = $64 & $neg255;
    HEAP32[5587596 >> 2] = $and256;
    label = 99;
    break;
   case 62:
    var $shl258 = $shr241 << 1;
    var $arrayidx259 = 5587636 + ($shl258 << 2) | 0;
    var $65 = $arrayidx259;
    var $cmp260 = ($61 | 0) == ($65 | 0);
    if ($cmp260) {
      label = 64;
      break;
    } else {
      label = 63;
      break;
    }
   case 63:
    var $66 = $61;
    var $67 = HEAP32[5587612 >> 2];
    var $cmp263 = $66 >>> 0 < $67 >>> 0;
    if ($cmp263) {
      label = 67;
      break;
    } else {
      label = 64;
      break;
    }
   case 64:
    var $cmp268 = ($63 | 0) == ($65 | 0);
    if ($cmp268) {
      label = 66;
      break;
    } else {
      label = 65;
      break;
    }
   case 65:
    var $68 = $63;
    var $69 = HEAP32[5587612 >> 2];
    var $cmp271 = $68 >>> 0 < $69 >>> 0;
    if ($cmp271) {
      label = 67;
      break;
    } else {
      label = 66;
      break;
    }
   case 66:
    var $bk279 = $61 + 12 | 0;
    HEAP32[$bk279 >> 2] = $63;
    var $fd280 = $63 + 8 | 0;
    HEAP32[$fd280 >> 2] = $61;
    label = 99;
    break;
   case 67:
    _abort();
   case 68:
    var $70 = $add_ptr6;
    var $add_ptr6_sum217 = $and5 + 16 | 0;
    var $parent287 = $mem + $add_ptr6_sum217 | 0;
    var $71 = $parent287;
    var $72 = HEAP32[$71 >> 2];
    var $add_ptr6_sum218219 = $and5 | 4;
    var $bk289 = $mem + $add_ptr6_sum218219 | 0;
    var $73 = $bk289;
    var $74 = HEAP32[$73 >> 2];
    var $cmp290 = ($74 | 0) == ($70 | 0);
    if ($cmp290) {
      label = 72;
      break;
    } else {
      label = 69;
      break;
    }
   case 69:
    var $fd294 = $mem + $and5 | 0;
    var $75 = $fd294;
    var $76 = HEAP32[$75 >> 2];
    var $77 = $76;
    var $78 = HEAP32[5587612 >> 2];
    var $cmp296 = $77 >>> 0 < $78 >>> 0;
    if ($cmp296) {
      label = 71;
      break;
    } else {
      label = 70;
      break;
    }
   case 70:
    var $bk301 = $76 + 12 | 0;
    HEAP32[$bk301 >> 2] = $74;
    var $fd302 = $74 + 8 | 0;
    HEAP32[$fd302 >> 2] = $76;
    var $R288_1 = $74;
    label = 79;
    break;
   case 71:
    _abort();
   case 72:
    var $child307_sum = $and5 + 12 | 0;
    var $arrayidx308 = $mem + $child307_sum | 0;
    var $79 = $arrayidx308;
    var $80 = HEAP32[$79 >> 2];
    var $cmp309 = ($80 | 0) == 0;
    if ($cmp309) {
      label = 73;
      break;
    } else {
      var $R288_0 = $80;
      var $RP306_0 = $79;
      label = 74;
      break;
    }
   case 73:
    var $add_ptr6_sum220 = $and5 + 8 | 0;
    var $child307 = $mem + $add_ptr6_sum220 | 0;
    var $arrayidx313 = $child307;
    var $81 = HEAP32[$arrayidx313 >> 2];
    var $cmp314 = ($81 | 0) == 0;
    if ($cmp314) {
      var $R288_1 = 0;
      label = 79;
      break;
    } else {
      var $R288_0 = $81;
      var $RP306_0 = $arrayidx313;
      label = 74;
      break;
    }
   case 74:
    var $RP306_0;
    var $R288_0;
    var $arrayidx320 = $R288_0 + 20 | 0;
    var $82 = HEAP32[$arrayidx320 >> 2];
    var $cmp321 = ($82 | 0) == 0;
    if ($cmp321) {
      label = 75;
      break;
    } else {
      var $R288_0 = $82;
      var $RP306_0 = $arrayidx320;
      label = 74;
      break;
    }
   case 75:
    var $arrayidx325 = $R288_0 + 16 | 0;
    var $83 = HEAP32[$arrayidx325 >> 2];
    var $cmp326 = ($83 | 0) == 0;
    if ($cmp326) {
      label = 76;
      break;
    } else {
      var $R288_0 = $83;
      var $RP306_0 = $arrayidx325;
      label = 74;
      break;
    }
   case 76:
    var $84 = $RP306_0;
    var $85 = HEAP32[5587612 >> 2];
    var $cmp331 = $84 >>> 0 < $85 >>> 0;
    if ($cmp331) {
      label = 78;
      break;
    } else {
      label = 77;
      break;
    }
   case 77:
    HEAP32[$RP306_0 >> 2] = 0;
    var $R288_1 = $R288_0;
    label = 79;
    break;
   case 78:
    _abort();
   case 79:
    var $R288_1;
    var $cmp340 = ($72 | 0) == 0;
    if ($cmp340) {
      label = 99;
      break;
    } else {
      label = 80;
      break;
    }
   case 80:
    var $add_ptr6_sum228 = $and5 + 20 | 0;
    var $index344 = $mem + $add_ptr6_sum228 | 0;
    var $86 = $index344;
    var $87 = HEAP32[$86 >> 2];
    var $arrayidx345 = 5587900 + ($87 << 2) | 0;
    var $88 = HEAP32[$arrayidx345 >> 2];
    var $cmp346 = ($70 | 0) == ($88 | 0);
    if ($cmp346) {
      label = 81;
      break;
    } else {
      label = 83;
      break;
    }
   case 81:
    HEAP32[$arrayidx345 >> 2] = $R288_1;
    var $cond247 = ($R288_1 | 0) == 0;
    if ($cond247) {
      label = 82;
      break;
    } else {
      label = 89;
      break;
    }
   case 82:
    var $89 = HEAP32[$86 >> 2];
    var $shl353 = 1 << $89;
    var $neg354 = $shl353 ^ -1;
    var $90 = HEAP32[5587600 >> 2];
    var $and355 = $90 & $neg354;
    HEAP32[5587600 >> 2] = $and355;
    label = 99;
    break;
   case 83:
    var $91 = $72;
    var $92 = HEAP32[5587612 >> 2];
    var $cmp358 = $91 >>> 0 < $92 >>> 0;
    if ($cmp358) {
      label = 87;
      break;
    } else {
      label = 84;
      break;
    }
   case 84:
    var $arrayidx364 = $72 + 16 | 0;
    var $93 = HEAP32[$arrayidx364 >> 2];
    var $cmp365 = ($93 | 0) == ($70 | 0);
    if ($cmp365) {
      label = 85;
      break;
    } else {
      label = 86;
      break;
    }
   case 85:
    HEAP32[$arrayidx364 >> 2] = $R288_1;
    label = 88;
    break;
   case 86:
    var $arrayidx372 = $72 + 20 | 0;
    HEAP32[$arrayidx372 >> 2] = $R288_1;
    label = 88;
    break;
   case 87:
    _abort();
   case 88:
    var $cmp377 = ($R288_1 | 0) == 0;
    if ($cmp377) {
      label = 99;
      break;
    } else {
      label = 89;
      break;
    }
   case 89:
    var $94 = $R288_1;
    var $95 = HEAP32[5587612 >> 2];
    var $cmp380 = $94 >>> 0 < $95 >>> 0;
    if ($cmp380) {
      label = 98;
      break;
    } else {
      label = 90;
      break;
    }
   case 90:
    var $parent387 = $R288_1 + 24 | 0;
    HEAP32[$parent387 >> 2] = $72;
    var $add_ptr6_sum229 = $and5 + 8 | 0;
    var $child388 = $mem + $add_ptr6_sum229 | 0;
    var $arrayidx389 = $child388;
    var $96 = HEAP32[$arrayidx389 >> 2];
    var $cmp390 = ($96 | 0) == 0;
    if ($cmp390) {
      label = 94;
      break;
    } else {
      label = 91;
      break;
    }
   case 91:
    var $97 = $96;
    var $98 = HEAP32[5587612 >> 2];
    var $cmp393 = $97 >>> 0 < $98 >>> 0;
    if ($cmp393) {
      label = 93;
      break;
    } else {
      label = 92;
      break;
    }
   case 92:
    var $arrayidx399 = $R288_1 + 16 | 0;
    HEAP32[$arrayidx399 >> 2] = $96;
    var $parent400 = $96 + 24 | 0;
    HEAP32[$parent400 >> 2] = $R288_1;
    label = 94;
    break;
   case 93:
    _abort();
   case 94:
    var $child388_sum = $and5 + 12 | 0;
    var $arrayidx405 = $mem + $child388_sum | 0;
    var $99 = $arrayidx405;
    var $100 = HEAP32[$99 >> 2];
    var $cmp406 = ($100 | 0) == 0;
    if ($cmp406) {
      label = 99;
      break;
    } else {
      label = 95;
      break;
    }
   case 95:
    var $101 = $100;
    var $102 = HEAP32[5587612 >> 2];
    var $cmp409 = $101 >>> 0 < $102 >>> 0;
    if ($cmp409) {
      label = 97;
      break;
    } else {
      label = 96;
      break;
    }
   case 96:
    var $arrayidx415 = $R288_1 + 20 | 0;
    HEAP32[$arrayidx415 >> 2] = $100;
    var $parent416 = $100 + 24 | 0;
    HEAP32[$parent416 >> 2] = $R288_1;
    label = 99;
    break;
   case 97:
    _abort();
   case 98:
    _abort();
   case 99:
    var $or425 = $add240 | 1;
    var $head426 = $p_0 + 4 | 0;
    HEAP32[$head426 >> 2] = $or425;
    var $add_ptr427 = $51 + $add240 | 0;
    var $prev_foot428 = $add_ptr427;
    HEAP32[$prev_foot428 >> 2] = $add240;
    var $103 = HEAP32[5587616 >> 2];
    var $cmp429 = ($p_0 | 0) == ($103 | 0);
    if ($cmp429) {
      label = 100;
      break;
    } else {
      var $psize_1 = $add240;
      label = 102;
      break;
    }
   case 100:
    HEAP32[5587604 >> 2] = $add240;
    label = 128;
    break;
   case 101:
    var $and437 = $53 & -2;
    HEAP32[$52 >> 2] = $and437;
    var $or438 = $psize_0 | 1;
    var $head439 = $p_0 + 4 | 0;
    HEAP32[$head439 >> 2] = $or438;
    var $add_ptr440 = $51 + $psize_0 | 0;
    var $prev_foot441 = $add_ptr440;
    HEAP32[$prev_foot441 >> 2] = $psize_0;
    var $psize_1 = $psize_0;
    label = 102;
    break;
   case 102:
    var $psize_1;
    var $shr443 = $psize_1 >>> 3;
    var $cmp444 = $psize_1 >>> 0 < 256;
    if ($cmp444) {
      label = 103;
      break;
    } else {
      label = 108;
      break;
    }
   case 103:
    var $shl450 = $shr443 << 1;
    var $arrayidx451 = 5587636 + ($shl450 << 2) | 0;
    var $104 = $arrayidx451;
    var $105 = HEAP32[5587596 >> 2];
    var $shl453 = 1 << $shr443;
    var $and454 = $105 & $shl453;
    var $tobool455 = ($and454 | 0) == 0;
    if ($tobool455) {
      label = 104;
      break;
    } else {
      label = 105;
      break;
    }
   case 104:
    var $or458 = $105 | $shl453;
    HEAP32[5587596 >> 2] = $or458;
    var $arrayidx451_sum_pre = $shl450 + 2 | 0;
    var $_pre = 5587636 + ($arrayidx451_sum_pre << 2) | 0;
    var $F452_0 = $104;
    var $_pre_phi = $_pre;
    label = 107;
    break;
   case 105:
    var $arrayidx451_sum227 = $shl450 + 2 | 0;
    var $106 = 5587636 + ($arrayidx451_sum227 << 2) | 0;
    var $107 = HEAP32[$106 >> 2];
    var $108 = $107;
    var $109 = HEAP32[5587612 >> 2];
    var $cmp461 = $108 >>> 0 < $109 >>> 0;
    if ($cmp461) {
      label = 106;
      break;
    } else {
      var $F452_0 = $107;
      var $_pre_phi = $106;
      label = 107;
      break;
    }
   case 106:
    _abort();
   case 107:
    var $_pre_phi;
    var $F452_0;
    HEAP32[$_pre_phi >> 2] = $p_0;
    var $bk471 = $F452_0 + 12 | 0;
    HEAP32[$bk471 >> 2] = $p_0;
    var $fd472 = $p_0 + 8 | 0;
    HEAP32[$fd472 >> 2] = $F452_0;
    var $bk473 = $p_0 + 12 | 0;
    HEAP32[$bk473 >> 2] = $104;
    label = 128;
    break;
   case 108:
    var $110 = $p_0;
    var $shr477 = $psize_1 >>> 8;
    var $cmp478 = ($shr477 | 0) == 0;
    if ($cmp478) {
      var $I476_0 = 0;
      label = 111;
      break;
    } else {
      label = 109;
      break;
    }
   case 109:
    var $cmp482 = $psize_1 >>> 0 > 16777215;
    if ($cmp482) {
      var $I476_0 = 31;
      label = 111;
      break;
    } else {
      label = 110;
      break;
    }
   case 110:
    var $sub = $shr477 + 1048320 | 0;
    var $shr486 = $sub >>> 16;
    var $and487 = $shr486 & 8;
    var $shl488 = $shr477 << $and487;
    var $sub489 = $shl488 + 520192 | 0;
    var $shr490 = $sub489 >>> 16;
    var $and491 = $shr490 & 4;
    var $add492 = $and491 | $and487;
    var $shl493 = $shl488 << $and491;
    var $sub494 = $shl493 + 245760 | 0;
    var $shr495 = $sub494 >>> 16;
    var $and496 = $shr495 & 2;
    var $add497 = $add492 | $and496;
    var $sub498 = 14 - $add497 | 0;
    var $shl499 = $shl493 << $and496;
    var $shr500 = $shl499 >>> 15;
    var $add501 = $sub498 + $shr500 | 0;
    var $shl502 = $add501 << 1;
    var $add503 = $add501 + 7 | 0;
    var $shr504 = $psize_1 >>> ($add503 >>> 0);
    var $and505 = $shr504 & 1;
    var $add506 = $and505 | $shl502;
    var $I476_0 = $add506;
    label = 111;
    break;
   case 111:
    var $I476_0;
    var $arrayidx509 = 5587900 + ($I476_0 << 2) | 0;
    var $index510 = $p_0 + 28 | 0;
    var $I476_0_c = $I476_0;
    HEAP32[$index510 >> 2] = $I476_0_c;
    var $arrayidx512 = $p_0 + 20 | 0;
    HEAP32[$arrayidx512 >> 2] = 0;
    var $111 = $p_0 + 16 | 0;
    HEAP32[$111 >> 2] = 0;
    var $112 = HEAP32[5587600 >> 2];
    var $shl515 = 1 << $I476_0;
    var $and516 = $112 & $shl515;
    var $tobool517 = ($and516 | 0) == 0;
    if ($tobool517) {
      label = 112;
      break;
    } else {
      label = 113;
      break;
    }
   case 112:
    var $or520 = $112 | $shl515;
    HEAP32[5587600 >> 2] = $or520;
    HEAP32[$arrayidx509 >> 2] = $110;
    var $parent521 = $p_0 + 24 | 0;
    var $_c = $arrayidx509;
    HEAP32[$parent521 >> 2] = $_c;
    var $bk522 = $p_0 + 12 | 0;
    HEAP32[$bk522 >> 2] = $p_0;
    var $fd523 = $p_0 + 8 | 0;
    HEAP32[$fd523 >> 2] = $p_0;
    label = 125;
    break;
   case 113:
    var $113 = HEAP32[$arrayidx509 >> 2];
    var $cmp526 = ($I476_0 | 0) == 31;
    if ($cmp526) {
      var $cond = 0;
      label = 115;
      break;
    } else {
      label = 114;
      break;
    }
   case 114:
    var $shr528 = $I476_0 >>> 1;
    var $sub531 = 25 - $shr528 | 0;
    var $cond = $sub531;
    label = 115;
    break;
   case 115:
    var $cond;
    var $shl532 = $psize_1 << $cond;
    var $K525_0 = $shl532;
    var $T_0 = $113;
    label = 116;
    break;
   case 116:
    var $T_0;
    var $K525_0;
    var $head533 = $T_0 + 4 | 0;
    var $114 = HEAP32[$head533 >> 2];
    var $and534 = $114 & -8;
    var $cmp535 = ($and534 | 0) == ($psize_1 | 0);
    if ($cmp535) {
      label = 121;
      break;
    } else {
      label = 117;
      break;
    }
   case 117:
    var $shr538 = $K525_0 >>> 31;
    var $arrayidx541 = $T_0 + 16 + ($shr538 << 2) | 0;
    var $115 = HEAP32[$arrayidx541 >> 2];
    var $cmp543 = ($115 | 0) == 0;
    var $shl542 = $K525_0 << 1;
    if ($cmp543) {
      label = 118;
      break;
    } else {
      var $K525_0 = $shl542;
      var $T_0 = $115;
      label = 116;
      break;
    }
   case 118:
    var $116 = $arrayidx541;
    var $117 = HEAP32[5587612 >> 2];
    var $cmp547 = $116 >>> 0 < $117 >>> 0;
    if ($cmp547) {
      label = 120;
      break;
    } else {
      label = 119;
      break;
    }
   case 119:
    HEAP32[$arrayidx541 >> 2] = $110;
    var $parent552 = $p_0 + 24 | 0;
    var $T_0_c224 = $T_0;
    HEAP32[$parent552 >> 2] = $T_0_c224;
    var $bk553 = $p_0 + 12 | 0;
    HEAP32[$bk553 >> 2] = $p_0;
    var $fd554 = $p_0 + 8 | 0;
    HEAP32[$fd554 >> 2] = $p_0;
    label = 125;
    break;
   case 120:
    _abort();
   case 121:
    var $fd559 = $T_0 + 8 | 0;
    var $118 = HEAP32[$fd559 >> 2];
    var $119 = $T_0;
    var $120 = HEAP32[5587612 >> 2];
    var $cmp560 = $119 >>> 0 < $120 >>> 0;
    if ($cmp560) {
      label = 124;
      break;
    } else {
      label = 122;
      break;
    }
   case 122:
    var $121 = $118;
    var $cmp563 = $121 >>> 0 < $120 >>> 0;
    if ($cmp563) {
      label = 124;
      break;
    } else {
      label = 123;
      break;
    }
   case 123:
    var $bk570 = $118 + 12 | 0;
    HEAP32[$bk570 >> 2] = $110;
    HEAP32[$fd559 >> 2] = $110;
    var $fd572 = $p_0 + 8 | 0;
    var $_c223 = $118;
    HEAP32[$fd572 >> 2] = $_c223;
    var $bk573 = $p_0 + 12 | 0;
    var $T_0_c = $T_0;
    HEAP32[$bk573 >> 2] = $T_0_c;
    var $parent574 = $p_0 + 24 | 0;
    HEAP32[$parent574 >> 2] = 0;
    label = 125;
    break;
   case 124:
    _abort();
   case 125:
    var $122 = HEAP32[5587628 >> 2];
    var $dec = $122 - 1 | 0;
    HEAP32[5587628 >> 2] = $dec;
    var $cmp578 = ($dec | 0) == 0;
    if ($cmp578) {
      label = 126;
      break;
    } else {
      label = 128;
      break;
    }
   case 126:
    _release_unused_segments();
    label = 128;
    break;
   case 127:
    _abort();
   case 128:
    return;
  }
}
_free["X"] = 1;
function _segment_holding($addr) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $sp_0 = 5588040;
    label = 3;
    break;
   case 3:
    var $sp_0;
    var $base = $sp_0 | 0;
    var $0 = HEAP32[$base >> 2];
    var $cmp = $0 >>> 0 > $addr >>> 0;
    if ($cmp) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    var $size = $sp_0 + 4 | 0;
    var $1 = HEAP32[$size >> 2];
    var $add_ptr = $0 + $1 | 0;
    var $cmp2 = $add_ptr >>> 0 > $addr >>> 0;
    if ($cmp2) {
      var $retval_0 = $sp_0;
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $next = $sp_0 + 8 | 0;
    var $2 = HEAP32[$next >> 2];
    var $cmp3 = ($2 | 0) == 0;
    if ($cmp3) {
      var $retval_0 = 0;
      label = 6;
      break;
    } else {
      var $sp_0 = $2;
      label = 3;
      break;
    }
   case 6:
    var $retval_0;
    return $retval_0;
  }
}
function _init_top($p, $psize) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = $p;
    var $add_ptr = $p + 8 | 0;
    var $1 = $add_ptr;
    var $and = $1 & 7;
    var $cmp = ($and | 0) == 0;
    if ($cmp) {
      var $cond = 0;
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $2 = -$1 | 0;
    var $and3 = $2 & 7;
    var $cond = $and3;
    label = 4;
    break;
   case 4:
    var $cond;
    var $add_ptr4 = $0 + $cond | 0;
    var $3 = $add_ptr4;
    var $sub5 = $psize - $cond | 0;
    HEAP32[5587620 >> 2] = $3;
    HEAP32[5587608 >> 2] = $sub5;
    var $or = $sub5 | 1;
    var $add_ptr4_sum = $cond + 4 | 0;
    var $head = $0 + $add_ptr4_sum | 0;
    var $4 = $head;
    HEAP32[$4 >> 2] = $or;
    var $add_ptr6_sum = $psize + 4 | 0;
    var $head7 = $0 + $add_ptr6_sum | 0;
    var $5 = $head7;
    HEAP32[$5 >> 2] = 40;
    var $6 = HEAP32[5263300 >> 2];
    HEAP32[5587624 >> 2] = $6;
    return;
  }
}
function _init_bins() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $i_02 = 0;
    label = 3;
    break;
   case 3:
    var $i_02;
    var $shl = $i_02 << 1;
    var $arrayidx = 5587636 + ($shl << 2) | 0;
    var $0 = $arrayidx;
    var $arrayidx_sum = $shl + 3 | 0;
    var $1 = 5587636 + ($arrayidx_sum << 2) | 0;
    HEAP32[$1 >> 2] = $0;
    var $arrayidx_sum1 = $shl + 2 | 0;
    var $2 = 5587636 + ($arrayidx_sum1 << 2) | 0;
    HEAP32[$2 >> 2] = $0;
    var $inc = $i_02 + 1 | 0;
    var $exitcond = ($inc | 0) == 32;
    if ($exitcond) {
      label = 4;
      break;
    } else {
      var $i_02 = $inc;
      label = 3;
      break;
    }
   case 4:
    return;
  }
}
function _calloc($n_elements, $elem_size) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $cmp = ($n_elements | 0) == 0;
    if ($cmp) {
      var $req_0 = 0;
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $mul = $elem_size * $n_elements & -1;
    var $or = $elem_size | $n_elements;
    var $tobool = $or >>> 0 > 65535;
    if ($tobool) {
      label = 4;
      break;
    } else {
      var $req_0 = $mul;
      label = 5;
      break;
    }
   case 4:
    var $div = Math.floor(($mul >>> 0) / ($n_elements >>> 0));
    var $cmp1 = ($div | 0) == ($elem_size | 0);
    var $mul_ = $cmp1 ? $mul : -1;
    var $req_0 = $mul_;
    label = 5;
    break;
   case 5:
    var $req_0;
    var $call = _malloc($req_0);
    var $cmp4 = ($call | 0) == 0;
    if ($cmp4) {
      label = 8;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $head = $call - 4 | 0;
    var $0 = $head;
    var $1 = HEAP32[$0 >> 2];
    var $and6 = $1 & 3;
    var $cmp7 = ($and6 | 0) == 0;
    if ($cmp7) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    _memset($call, 0, $req_0);
    label = 8;
    break;
   case 8:
    return $call;
  }
}
Module["_calloc"] = _calloc;
function _init_mparams() {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5263284 >> 2];
    var $cmp = ($0 | 0) == 0;
    if ($cmp) {
      label = 3;
      break;
    } else {
      label = 6;
      break;
    }
   case 3:
    var $call = _sysconf(8);
    var $sub = $call - 1 | 0;
    var $and = $sub & $call;
    var $cmp1 = ($and | 0) == 0;
    if ($cmp1) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    _abort();
   case 5:
    HEAP32[5263292 >> 2] = $call;
    HEAP32[5263288 >> 2] = $call;
    HEAP32[5263296 >> 2] = -1;
    HEAP32[5263300 >> 2] = 2097152;
    HEAP32[5263304 >> 2] = 0;
    HEAP32[5588036 >> 2] = 0;
    var $call6 = _time(0);
    var $xor = $call6 & -16;
    var $and7 = $xor ^ 1431655768;
    HEAP32[5263284 >> 2] = $and7;
    label = 6;
    break;
   case 6:
    return;
  }
}
function _prepend_alloc($newbase, $oldbase, $nb) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $add_ptr = $newbase + 8 | 0;
    var $0 = $add_ptr;
    var $and = $0 & 7;
    var $cmp = ($and | 0) == 0;
    if ($cmp) {
      var $cond = 0;
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $1 = -$0 | 0;
    var $and3 = $1 & 7;
    var $cond = $and3;
    label = 4;
    break;
   case 4:
    var $cond;
    var $add_ptr4 = $newbase + $cond | 0;
    var $add_ptr5 = $oldbase + 8 | 0;
    var $2 = $add_ptr5;
    var $and6 = $2 & 7;
    var $cmp7 = ($and6 | 0) == 0;
    if ($cmp7) {
      var $cond15 = 0;
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    var $3 = -$2 | 0;
    var $and13 = $3 & 7;
    var $cond15 = $and13;
    label = 6;
    break;
   case 6:
    var $cond15;
    var $add_ptr16 = $oldbase + $cond15 | 0;
    var $4 = $add_ptr16;
    var $sub_ptr_lhs_cast = $add_ptr16;
    var $sub_ptr_rhs_cast = $add_ptr4;
    var $sub_ptr_sub = $sub_ptr_lhs_cast - $sub_ptr_rhs_cast | 0;
    var $add_ptr4_sum = $cond + $nb | 0;
    var $add_ptr17 = $newbase + $add_ptr4_sum | 0;
    var $5 = $add_ptr17;
    var $sub18 = $sub_ptr_sub - $nb | 0;
    var $or19 = $nb | 3;
    var $add_ptr4_sum1 = $cond + 4 | 0;
    var $head = $newbase + $add_ptr4_sum1 | 0;
    var $6 = $head;
    HEAP32[$6 >> 2] = $or19;
    var $7 = HEAP32[5587620 >> 2];
    var $cmp20 = ($4 | 0) == ($7 | 0);
    if ($cmp20) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    var $8 = HEAP32[5587608 >> 2];
    var $add = $8 + $sub18 | 0;
    HEAP32[5587608 >> 2] = $add;
    HEAP32[5587620 >> 2] = $5;
    var $or22 = $add | 1;
    var $add_ptr17_sum35 = $add_ptr4_sum + 4 | 0;
    var $head23 = $newbase + $add_ptr17_sum35 | 0;
    var $9 = $head23;
    HEAP32[$9 >> 2] = $or22;
    label = 75;
    break;
   case 8:
    var $10 = HEAP32[5587616 >> 2];
    var $cmp24 = ($4 | 0) == ($10 | 0);
    if ($cmp24) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    var $11 = HEAP32[5587604 >> 2];
    var $add26 = $11 + $sub18 | 0;
    HEAP32[5587604 >> 2] = $add26;
    HEAP32[5587616 >> 2] = $5;
    var $or28 = $add26 | 1;
    var $add_ptr17_sum33 = $add_ptr4_sum + 4 | 0;
    var $head29 = $newbase + $add_ptr17_sum33 | 0;
    var $12 = $head29;
    HEAP32[$12 >> 2] = $or28;
    var $add_ptr17_sum34 = $add26 + $add_ptr4_sum | 0;
    var $add_ptr30 = $newbase + $add_ptr17_sum34 | 0;
    var $prev_foot = $add_ptr30;
    HEAP32[$prev_foot >> 2] = $add26;
    label = 75;
    break;
   case 10:
    var $add_ptr16_sum = $cond15 + 4 | 0;
    var $head32 = $oldbase + $add_ptr16_sum | 0;
    var $13 = $head32;
    var $14 = HEAP32[$13 >> 2];
    var $and33 = $14 & 3;
    var $cmp34 = ($and33 | 0) == 1;
    if ($cmp34) {
      label = 11;
      break;
    } else {
      var $oldfirst_0 = $4;
      var $qsize_0 = $sub18;
      label = 52;
      break;
    }
   case 11:
    var $and37 = $14 & -8;
    var $shr = $14 >>> 3;
    var $cmp38 = $14 >>> 0 < 256;
    if ($cmp38) {
      label = 12;
      break;
    } else {
      label = 20;
      break;
    }
   case 12:
    var $add_ptr16_sum3031 = $cond15 | 8;
    var $fd = $oldbase + $add_ptr16_sum3031 | 0;
    var $15 = $fd;
    var $16 = HEAP32[$15 >> 2];
    var $add_ptr16_sum32 = $cond15 + 12 | 0;
    var $bk = $oldbase + $add_ptr16_sum32 | 0;
    var $17 = $bk;
    var $18 = HEAP32[$17 >> 2];
    var $cmp41 = ($16 | 0) == ($18 | 0);
    if ($cmp41) {
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    var $shl = 1 << $shr;
    var $neg = $shl ^ -1;
    var $19 = HEAP32[5587596 >> 2];
    var $and43 = $19 & $neg;
    HEAP32[5587596 >> 2] = $and43;
    label = 51;
    break;
   case 14:
    var $shl45 = $shr << 1;
    var $arrayidx = 5587636 + ($shl45 << 2) | 0;
    var $20 = $arrayidx;
    var $cmp46 = ($16 | 0) == ($20 | 0);
    if ($cmp46) {
      label = 16;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $21 = $16;
    var $22 = HEAP32[5587612 >> 2];
    var $cmp47 = $21 >>> 0 < $22 >>> 0;
    if ($cmp47) {
      label = 19;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    var $cmp51 = ($18 | 0) == ($20 | 0);
    if ($cmp51) {
      label = 18;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    var $23 = $18;
    var $24 = HEAP32[5587612 >> 2];
    var $cmp53 = $23 >>> 0 < $24 >>> 0;
    if ($cmp53) {
      label = 19;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    var $bk55 = $16 + 12 | 0;
    HEAP32[$bk55 >> 2] = $18;
    var $fd56 = $18 + 8 | 0;
    HEAP32[$fd56 >> 2] = $16;
    label = 51;
    break;
   case 19:
    _abort();
   case 20:
    var $25 = $add_ptr16;
    var $add_ptr16_sum23 = $cond15 | 24;
    var $parent = $oldbase + $add_ptr16_sum23 | 0;
    var $26 = $parent;
    var $27 = HEAP32[$26 >> 2];
    var $add_ptr16_sum4 = $cond15 + 12 | 0;
    var $bk60 = $oldbase + $add_ptr16_sum4 | 0;
    var $28 = $bk60;
    var $29 = HEAP32[$28 >> 2];
    var $cmp61 = ($29 | 0) == ($25 | 0);
    if ($cmp61) {
      label = 24;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    var $add_ptr16_sum2829 = $cond15 | 8;
    var $fd64 = $oldbase + $add_ptr16_sum2829 | 0;
    var $30 = $fd64;
    var $31 = HEAP32[$30 >> 2];
    var $32 = $31;
    var $33 = HEAP32[5587612 >> 2];
    var $cmp67 = $32 >>> 0 < $33 >>> 0;
    if ($cmp67) {
      label = 23;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    var $bk71 = $31 + 12 | 0;
    HEAP32[$bk71 >> 2] = $29;
    var $fd72 = $29 + 8 | 0;
    HEAP32[$fd72 >> 2] = $31;
    var $R_1 = $29;
    label = 31;
    break;
   case 23:
    _abort();
   case 24:
    var $add_ptr16_sum56 = $cond15 | 16;
    var $child_sum = $add_ptr16_sum56 + 4 | 0;
    var $arrayidx76 = $oldbase + $child_sum | 0;
    var $34 = $arrayidx76;
    var $35 = HEAP32[$34 >> 2];
    var $cmp77 = ($35 | 0) == 0;
    if ($cmp77) {
      label = 25;
      break;
    } else {
      var $R_0 = $35;
      var $RP_0 = $34;
      label = 26;
      break;
    }
   case 25:
    var $child = $oldbase + $add_ptr16_sum56 | 0;
    var $arrayidx81 = $child;
    var $36 = HEAP32[$arrayidx81 >> 2];
    var $cmp82 = ($36 | 0) == 0;
    if ($cmp82) {
      var $R_1 = 0;
      label = 31;
      break;
    } else {
      var $R_0 = $36;
      var $RP_0 = $arrayidx81;
      label = 26;
      break;
    }
   case 26:
    var $RP_0;
    var $R_0;
    var $arrayidx86 = $R_0 + 20 | 0;
    var $37 = HEAP32[$arrayidx86 >> 2];
    var $cmp87 = ($37 | 0) == 0;
    if ($cmp87) {
      label = 27;
      break;
    } else {
      var $R_0 = $37;
      var $RP_0 = $arrayidx86;
      label = 26;
      break;
    }
   case 27:
    var $arrayidx91 = $R_0 + 16 | 0;
    var $38 = HEAP32[$arrayidx91 >> 2];
    var $cmp92 = ($38 | 0) == 0;
    if ($cmp92) {
      label = 28;
      break;
    } else {
      var $R_0 = $38;
      var $RP_0 = $arrayidx91;
      label = 26;
      break;
    }
   case 28:
    var $39 = $RP_0;
    var $40 = HEAP32[5587612 >> 2];
    var $cmp96 = $39 >>> 0 < $40 >>> 0;
    if ($cmp96) {
      label = 30;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    HEAP32[$RP_0 >> 2] = 0;
    var $R_1 = $R_0;
    label = 31;
    break;
   case 30:
    _abort();
   case 31:
    var $R_1;
    var $cmp105 = ($27 | 0) == 0;
    if ($cmp105) {
      label = 51;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    var $add_ptr16_sum25 = $cond15 + 28 | 0;
    var $index = $oldbase + $add_ptr16_sum25 | 0;
    var $41 = $index;
    var $42 = HEAP32[$41 >> 2];
    var $arrayidx108 = 5587900 + ($42 << 2) | 0;
    var $43 = HEAP32[$arrayidx108 >> 2];
    var $cmp109 = ($25 | 0) == ($43 | 0);
    if ($cmp109) {
      label = 33;
      break;
    } else {
      label = 35;
      break;
    }
   case 33:
    HEAP32[$arrayidx108 >> 2] = $R_1;
    var $cond36 = ($R_1 | 0) == 0;
    if ($cond36) {
      label = 34;
      break;
    } else {
      label = 41;
      break;
    }
   case 34:
    var $44 = HEAP32[$41 >> 2];
    var $shl116 = 1 << $44;
    var $neg117 = $shl116 ^ -1;
    var $45 = HEAP32[5587600 >> 2];
    var $and118 = $45 & $neg117;
    HEAP32[5587600 >> 2] = $and118;
    label = 51;
    break;
   case 35:
    var $46 = $27;
    var $47 = HEAP32[5587612 >> 2];
    var $cmp122 = $46 >>> 0 < $47 >>> 0;
    if ($cmp122) {
      label = 39;
      break;
    } else {
      label = 36;
      break;
    }
   case 36:
    var $arrayidx128 = $27 + 16 | 0;
    var $48 = HEAP32[$arrayidx128 >> 2];
    var $cmp129 = ($48 | 0) == ($25 | 0);
    if ($cmp129) {
      label = 37;
      break;
    } else {
      label = 38;
      break;
    }
   case 37:
    HEAP32[$arrayidx128 >> 2] = $R_1;
    label = 40;
    break;
   case 38:
    var $arrayidx136 = $27 + 20 | 0;
    HEAP32[$arrayidx136 >> 2] = $R_1;
    label = 40;
    break;
   case 39:
    _abort();
   case 40:
    var $cmp141 = ($R_1 | 0) == 0;
    if ($cmp141) {
      label = 51;
      break;
    } else {
      label = 41;
      break;
    }
   case 41:
    var $49 = $R_1;
    var $50 = HEAP32[5587612 >> 2];
    var $cmp145 = $49 >>> 0 < $50 >>> 0;
    if ($cmp145) {
      label = 50;
      break;
    } else {
      label = 42;
      break;
    }
   case 42:
    var $parent150 = $R_1 + 24 | 0;
    HEAP32[$parent150 >> 2] = $27;
    var $add_ptr16_sum2627 = $cond15 | 16;
    var $child151 = $oldbase + $add_ptr16_sum2627 | 0;
    var $arrayidx152 = $child151;
    var $51 = HEAP32[$arrayidx152 >> 2];
    var $cmp153 = ($51 | 0) == 0;
    if ($cmp153) {
      label = 46;
      break;
    } else {
      label = 43;
      break;
    }
   case 43:
    var $52 = $51;
    var $53 = HEAP32[5587612 >> 2];
    var $cmp157 = $52 >>> 0 < $53 >>> 0;
    if ($cmp157) {
      label = 45;
      break;
    } else {
      label = 44;
      break;
    }
   case 44:
    var $arrayidx163 = $R_1 + 16 | 0;
    HEAP32[$arrayidx163 >> 2] = $51;
    var $parent164 = $51 + 24 | 0;
    HEAP32[$parent164 >> 2] = $R_1;
    label = 46;
    break;
   case 45:
    _abort();
   case 46:
    var $child151_sum = $add_ptr16_sum2627 + 4 | 0;
    var $arrayidx169 = $oldbase + $child151_sum | 0;
    var $54 = $arrayidx169;
    var $55 = HEAP32[$54 >> 2];
    var $cmp170 = ($55 | 0) == 0;
    if ($cmp170) {
      label = 51;
      break;
    } else {
      label = 47;
      break;
    }
   case 47:
    var $56 = $55;
    var $57 = HEAP32[5587612 >> 2];
    var $cmp174 = $56 >>> 0 < $57 >>> 0;
    if ($cmp174) {
      label = 49;
      break;
    } else {
      label = 48;
      break;
    }
   case 48:
    var $arrayidx180 = $R_1 + 20 | 0;
    HEAP32[$arrayidx180 >> 2] = $55;
    var $parent181 = $55 + 24 | 0;
    HEAP32[$parent181 >> 2] = $R_1;
    label = 51;
    break;
   case 49:
    _abort();
   case 50:
    _abort();
   case 51:
    var $add_ptr16_sum7 = $and37 | $cond15;
    var $add_ptr190 = $oldbase + $add_ptr16_sum7 | 0;
    var $58 = $add_ptr190;
    var $add191 = $and37 + $sub18 | 0;
    var $oldfirst_0 = $58;
    var $qsize_0 = $add191;
    label = 52;
    break;
   case 52:
    var $qsize_0;
    var $oldfirst_0;
    var $head193 = $oldfirst_0 + 4 | 0;
    var $59 = HEAP32[$head193 >> 2];
    var $and194 = $59 & -2;
    HEAP32[$head193 >> 2] = $and194;
    var $or195 = $qsize_0 | 1;
    var $add_ptr17_sum = $add_ptr4_sum + 4 | 0;
    var $head196 = $newbase + $add_ptr17_sum | 0;
    var $60 = $head196;
    HEAP32[$60 >> 2] = $or195;
    var $add_ptr17_sum8 = $qsize_0 + $add_ptr4_sum | 0;
    var $add_ptr197 = $newbase + $add_ptr17_sum8 | 0;
    var $prev_foot198 = $add_ptr197;
    HEAP32[$prev_foot198 >> 2] = $qsize_0;
    var $shr199 = $qsize_0 >>> 3;
    var $cmp200 = $qsize_0 >>> 0 < 256;
    if ($cmp200) {
      label = 53;
      break;
    } else {
      label = 58;
      break;
    }
   case 53:
    var $shl206 = $shr199 << 1;
    var $arrayidx208 = 5587636 + ($shl206 << 2) | 0;
    var $61 = $arrayidx208;
    var $62 = HEAP32[5587596 >> 2];
    var $shl211 = 1 << $shr199;
    var $and212 = $62 & $shl211;
    var $tobool213 = ($and212 | 0) == 0;
    if ($tobool213) {
      label = 54;
      break;
    } else {
      label = 55;
      break;
    }
   case 54:
    var $or217 = $62 | $shl211;
    HEAP32[5587596 >> 2] = $or217;
    var $arrayidx208_sum_pre = $shl206 + 2 | 0;
    var $_pre = 5587636 + ($arrayidx208_sum_pre << 2) | 0;
    var $F209_0 = $61;
    var $_pre_phi = $_pre;
    label = 57;
    break;
   case 55:
    var $arrayidx208_sum24 = $shl206 + 2 | 0;
    var $63 = 5587636 + ($arrayidx208_sum24 << 2) | 0;
    var $64 = HEAP32[$63 >> 2];
    var $65 = $64;
    var $66 = HEAP32[5587612 >> 2];
    var $cmp221 = $65 >>> 0 < $66 >>> 0;
    if ($cmp221) {
      label = 56;
      break;
    } else {
      var $F209_0 = $64;
      var $_pre_phi = $63;
      label = 57;
      break;
    }
   case 56:
    _abort();
   case 57:
    var $_pre_phi;
    var $F209_0;
    HEAP32[$_pre_phi >> 2] = $5;
    var $bk231 = $F209_0 + 12 | 0;
    HEAP32[$bk231 >> 2] = $5;
    var $add_ptr17_sum22 = $add_ptr4_sum + 8 | 0;
    var $fd232 = $newbase + $add_ptr17_sum22 | 0;
    var $67 = $fd232;
    HEAP32[$67 >> 2] = $F209_0;
    var $add_ptr17_sum23 = $add_ptr4_sum + 12 | 0;
    var $bk233 = $newbase + $add_ptr17_sum23 | 0;
    var $68 = $bk233;
    HEAP32[$68 >> 2] = $61;
    label = 75;
    break;
   case 58:
    var $69 = $add_ptr17;
    var $shr238 = $qsize_0 >>> 8;
    var $cmp239 = ($shr238 | 0) == 0;
    if ($cmp239) {
      var $I237_0 = 0;
      label = 61;
      break;
    } else {
      label = 59;
      break;
    }
   case 59:
    var $cmp243 = $qsize_0 >>> 0 > 16777215;
    if ($cmp243) {
      var $I237_0 = 31;
      label = 61;
      break;
    } else {
      label = 60;
      break;
    }
   case 60:
    var $sub247 = $shr238 + 1048320 | 0;
    var $shr248 = $sub247 >>> 16;
    var $and249 = $shr248 & 8;
    var $shl250 = $shr238 << $and249;
    var $sub251 = $shl250 + 520192 | 0;
    var $shr252 = $sub251 >>> 16;
    var $and253 = $shr252 & 4;
    var $add254 = $and253 | $and249;
    var $shl255 = $shl250 << $and253;
    var $sub256 = $shl255 + 245760 | 0;
    var $shr257 = $sub256 >>> 16;
    var $and258 = $shr257 & 2;
    var $add259 = $add254 | $and258;
    var $sub260 = 14 - $add259 | 0;
    var $shl261 = $shl255 << $and258;
    var $shr262 = $shl261 >>> 15;
    var $add263 = $sub260 + $shr262 | 0;
    var $shl264 = $add263 << 1;
    var $add265 = $add263 + 7 | 0;
    var $shr266 = $qsize_0 >>> ($add265 >>> 0);
    var $and267 = $shr266 & 1;
    var $add268 = $and267 | $shl264;
    var $I237_0 = $add268;
    label = 61;
    break;
   case 61:
    var $I237_0;
    var $arrayidx272 = 5587900 + ($I237_0 << 2) | 0;
    var $add_ptr17_sum9 = $add_ptr4_sum + 28 | 0;
    var $index273 = $newbase + $add_ptr17_sum9 | 0;
    var $70 = $index273;
    HEAP32[$70 >> 2] = $I237_0;
    var $add_ptr17_sum10 = $add_ptr4_sum + 16 | 0;
    var $child274 = $newbase + $add_ptr17_sum10 | 0;
    var $child274_sum = $add_ptr4_sum + 20 | 0;
    var $arrayidx275 = $newbase + $child274_sum | 0;
    var $71 = $arrayidx275;
    HEAP32[$71 >> 2] = 0;
    var $arrayidx277 = $child274;
    HEAP32[$arrayidx277 >> 2] = 0;
    var $72 = HEAP32[5587600 >> 2];
    var $shl279 = 1 << $I237_0;
    var $and280 = $72 & $shl279;
    var $tobool281 = ($and280 | 0) == 0;
    if ($tobool281) {
      label = 62;
      break;
    } else {
      label = 63;
      break;
    }
   case 62:
    var $or285 = $72 | $shl279;
    HEAP32[5587600 >> 2] = $or285;
    HEAP32[$arrayidx272 >> 2] = $69;
    var $73 = $arrayidx272;
    var $add_ptr17_sum11 = $add_ptr4_sum + 24 | 0;
    var $parent286 = $newbase + $add_ptr17_sum11 | 0;
    var $74 = $parent286;
    HEAP32[$74 >> 2] = $73;
    var $add_ptr17_sum12 = $add_ptr4_sum + 12 | 0;
    var $bk287 = $newbase + $add_ptr17_sum12 | 0;
    var $75 = $bk287;
    HEAP32[$75 >> 2] = $69;
    var $add_ptr17_sum13 = $add_ptr4_sum + 8 | 0;
    var $fd288 = $newbase + $add_ptr17_sum13 | 0;
    var $76 = $fd288;
    HEAP32[$76 >> 2] = $69;
    label = 75;
    break;
   case 63:
    var $77 = HEAP32[$arrayidx272 >> 2];
    var $cmp291 = ($I237_0 | 0) == 31;
    if ($cmp291) {
      var $cond300 = 0;
      label = 65;
      break;
    } else {
      label = 64;
      break;
    }
   case 64:
    var $shr295 = $I237_0 >>> 1;
    var $sub298 = 25 - $shr295 | 0;
    var $cond300 = $sub298;
    label = 65;
    break;
   case 65:
    var $cond300;
    var $shl301 = $qsize_0 << $cond300;
    var $K290_0 = $shl301;
    var $T_0 = $77;
    label = 66;
    break;
   case 66:
    var $T_0;
    var $K290_0;
    var $head302 = $T_0 + 4 | 0;
    var $78 = HEAP32[$head302 >> 2];
    var $and303 = $78 & -8;
    var $cmp304 = ($and303 | 0) == ($qsize_0 | 0);
    if ($cmp304) {
      label = 71;
      break;
    } else {
      label = 67;
      break;
    }
   case 67:
    var $shr307 = $K290_0 >>> 31;
    var $arrayidx310 = $T_0 + 16 + ($shr307 << 2) | 0;
    var $79 = HEAP32[$arrayidx310 >> 2];
    var $cmp312 = ($79 | 0) == 0;
    var $shl311 = $K290_0 << 1;
    if ($cmp312) {
      label = 68;
      break;
    } else {
      var $K290_0 = $shl311;
      var $T_0 = $79;
      label = 66;
      break;
    }
   case 68:
    var $80 = $arrayidx310;
    var $81 = HEAP32[5587612 >> 2];
    var $cmp317 = $80 >>> 0 < $81 >>> 0;
    if ($cmp317) {
      label = 70;
      break;
    } else {
      label = 69;
      break;
    }
   case 69:
    HEAP32[$arrayidx310 >> 2] = $69;
    var $add_ptr17_sum19 = $add_ptr4_sum + 24 | 0;
    var $parent322 = $newbase + $add_ptr17_sum19 | 0;
    var $82 = $parent322;
    HEAP32[$82 >> 2] = $T_0;
    var $add_ptr17_sum20 = $add_ptr4_sum + 12 | 0;
    var $bk323 = $newbase + $add_ptr17_sum20 | 0;
    var $83 = $bk323;
    HEAP32[$83 >> 2] = $69;
    var $add_ptr17_sum21 = $add_ptr4_sum + 8 | 0;
    var $fd324 = $newbase + $add_ptr17_sum21 | 0;
    var $84 = $fd324;
    HEAP32[$84 >> 2] = $69;
    label = 75;
    break;
   case 70:
    _abort();
   case 71:
    var $fd329 = $T_0 + 8 | 0;
    var $85 = HEAP32[$fd329 >> 2];
    var $86 = $T_0;
    var $87 = HEAP32[5587612 >> 2];
    var $cmp331 = $86 >>> 0 < $87 >>> 0;
    if ($cmp331) {
      label = 74;
      break;
    } else {
      label = 72;
      break;
    }
   case 72:
    var $88 = $85;
    var $cmp335 = $88 >>> 0 < $87 >>> 0;
    if ($cmp335) {
      label = 74;
      break;
    } else {
      label = 73;
      break;
    }
   case 73:
    var $bk342 = $85 + 12 | 0;
    HEAP32[$bk342 >> 2] = $69;
    HEAP32[$fd329 >> 2] = $69;
    var $add_ptr17_sum16 = $add_ptr4_sum + 8 | 0;
    var $fd344 = $newbase + $add_ptr17_sum16 | 0;
    var $89 = $fd344;
    HEAP32[$89 >> 2] = $85;
    var $add_ptr17_sum17 = $add_ptr4_sum + 12 | 0;
    var $bk345 = $newbase + $add_ptr17_sum17 | 0;
    var $90 = $bk345;
    HEAP32[$90 >> 2] = $T_0;
    var $add_ptr17_sum18 = $add_ptr4_sum + 24 | 0;
    var $parent346 = $newbase + $add_ptr17_sum18 | 0;
    var $91 = $parent346;
    HEAP32[$91 >> 2] = 0;
    label = 75;
    break;
   case 74:
    _abort();
   case 75:
    var $add_ptr4_sum1415 = $cond | 8;
    var $add_ptr353 = $newbase + $add_ptr4_sum1415 | 0;
    return $add_ptr353;
  }
}
_prepend_alloc["X"] = 1;
function _add_segment($tbase, $tsize) {
  var label = 0;
  label = 2;
  while (1) switch (label) {
   case 2:
    var $0 = HEAP32[5587620 >> 2];
    var $1 = $0;
    var $call = _segment_holding($1);
    var $base = $call | 0;
    var $2 = HEAP32[$base >> 2];
    var $size = $call + 4 | 0;
    var $3 = HEAP32[$size >> 2];
    var $add_ptr = $2 + $3 | 0;
    var $add_ptr_sum = $3 - 47 | 0;
    var $add_ptr2_sum = $3 - 39 | 0;
    var $add_ptr3 = $2 + $add_ptr2_sum | 0;
    var $4 = $add_ptr3;
    var $and = $4 & 7;
    var $cmp = ($and | 0) == 0;
    if ($cmp) {
      var $cond = 0;
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    var $5 = -$4 | 0;
    var $and6 = $5 & 7;
    var $cond = $and6;
    label = 4;
    break;
   case 4:
    var $cond;
    var $add_ptr2_sum1 = $add_ptr_sum + $cond | 0;
    var $add_ptr7 = $2 + $add_ptr2_sum1 | 0;
    var $add_ptr82 = $0 + 16 | 0;
    var $add_ptr8 = $add_ptr82;
    var $cmp9 = $add_ptr7 >>> 0 < $add_ptr8 >>> 0;
    var $cond13 = $cmp9 ? $1 : $add_ptr7;
    var $add_ptr14 = $cond13 + 8 | 0;
    var $6 = $add_ptr14;
    var $7 = $tbase;
    var $sub16 = $tsize - 40 | 0;
    _init_top($7, $sub16);
    var $head = $cond13 + 4 | 0;
    var $8 = $head;
    HEAP32[$8 >> 2] = 27;
    HEAP32[$add_ptr14 >> 2] = HEAP32[5588040 >> 2];
    HEAP32[$add_ptr14 + 4 >> 2] = HEAP32[5588044 >> 2];
    HEAP32[$add_ptr14 + 8 >> 2] = HEAP32[5588048 >> 2];
    HEAP32[$add_ptr14 + 12 >> 2] = HEAP32[5588052 >> 2];
    HEAP32[5588040 >> 2] = $tbase;
    HEAP32[5588044 >> 2] = $tsize;
    HEAP32[5588052 >> 2] = 0;
    HEAP32[5588048 >> 2] = $6;
    var $add_ptr2411 = $cond13 + 28 | 0;
    var $9 = $add_ptr2411;
    HEAP32[$9 >> 2] = 7;
    var $10 = $cond13 + 32 | 0;
    var $cmp2712 = $10 >>> 0 < $add_ptr >>> 0;
    if ($cmp2712) {
      var $add_ptr2413 = $9;
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    var $add_ptr2413;
    var $11 = $add_ptr2413 + 4 | 0;
    HEAP32[$11 >> 2] = 7;
    var $12 = $add_ptr2413 + 8 | 0;
    var $13 = $12;
    var $cmp27 = $13 >>> 0 < $add_ptr >>> 0;
    if ($cmp27) {
      var $add_ptr2413 = $11;
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    var $cmp28 = ($cond13 | 0) == ($1 | 0);
    if ($cmp28) {
      label = 30;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    var $sub_ptr_lhs_cast = $cond13;
    var $sub_ptr_rhs_cast = $0;
    var $sub_ptr_sub = $sub_ptr_lhs_cast - $sub_ptr_rhs_cast | 0;
    var $add_ptr30 = $1 + $sub_ptr_sub | 0;
    var $add_ptr30_sum = $sub_ptr_sub + 4 | 0;
    var $head31 = $1 + $add_ptr30_sum | 0;
    var $14 = $head31;
    var $15 = HEAP32[$14 >> 2];
    var $and32 = $15 & -2;
    HEAP32[$14 >> 2] = $and32;
    var $or33 = $sub_ptr_sub | 1;
    var $head34 = $0 + 4 | 0;
    HEAP32[$head34 >> 2] = $or33;
    var $prev_foot = $add_ptr30;
    HEAP32[$prev_foot >> 2] = $sub_ptr_sub;
    var $shr = $sub_ptr_sub >>> 3;
    var $cmp36 = $sub_ptr_sub >>> 0 < 256;
    if ($cmp36) {
      label = 8;
      break;
    } else {
      label = 13;
      break;
    }
   case 8:
    var $shl = $shr << 1;
    var $arrayidx = 5587636 + ($shl << 2) | 0;
    var $16 = $arrayidx;
    var $17 = HEAP32[5587596 >> 2];
    var $shl39 = 1 << $shr;
    var $and40 = $17 & $shl39;
    var $tobool = ($and40 | 0) == 0;
    if ($tobool) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    var $or44 = $17 | $shl39;
    HEAP32[5587596 >> 2] = $or44;
    var $arrayidx_sum_pre = $shl + 2 | 0;
    var $_pre = 5587636 + ($arrayidx_sum_pre << 2) | 0;
    var $F_0 = $16;
    var $_pre_phi = $_pre;
    label = 12;
    break;
   case 10:
    var $arrayidx_sum9 = $shl + 2 | 0;
    var $18 = 5587636 + ($arrayidx_sum9 << 2) | 0;
    var $19 = HEAP32[$18 >> 2];
    var $20 = $19;
    var $21 = HEAP32[5587612 >> 2];
    var $cmp46 = $20 >>> 0 < $21 >>> 0;
    if ($cmp46) {
      label = 11;
      break;
    } else {
      var $F_0 = $19;
      var $_pre_phi = $18;
      label = 12;
      break;
    }
   case 11:
    _abort();
   case 12:
    var $_pre_phi;
    var $F_0;
    HEAP32[$_pre_phi >> 2] = $0;
    var $bk = $F_0 + 12 | 0;
    HEAP32[$bk >> 2] = $0;
    var $fd54 = $0 + 8 | 0;
    HEAP32[$fd54 >> 2] = $F_0;
    var $bk55 = $0 + 12 | 0;
    HEAP32[$bk55 >> 2] = $16;
    label = 30;
    break;
   case 13:
    var $22 = $0;
    var $shr58 = $sub_ptr_sub >>> 8;
    var $cmp59 = ($shr58 | 0) == 0;
    if ($cmp59) {
      var $I57_0 = 0;
      label = 16;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    var $cmp63 = $sub_ptr_sub >>> 0 > 16777215;
    if ($cmp63) {
      var $I57_0 = 31;
      label = 16;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    var $sub67 = $shr58 + 1048320 | 0;
    var $shr68 = $sub67 >>> 16;
    var $and69 = $shr68 & 8;
    var $shl70 = $shr58 << $and69;
    var $sub71 = $shl70 + 520192 | 0;
    var $shr72 = $sub71 >>> 16;
    var $and73 = $shr72 & 4;
    var $add74 = $and73 | $and69;
    var $shl75 = $shl70 << $and73;
    var $sub76 = $shl75 + 245760 | 0;
    var $shr77 = $sub76 >>> 16;
    var $and78 = $shr77 & 2;
    var $add79 = $add74 | $and78;
    var $sub80 = 14 - $add79 | 0;
    var $shl81 = $shl75 << $and78;
    var $shr82 = $shl81 >>> 15;
    var $add83 = $sub80 + $shr82 | 0;
    var $shl84 = $add83 << 1;
    var $add85 = $add83 + 7 | 0;
    var $shr86 = $sub_ptr_sub >>> ($add85 >>> 0);
    var $and87 = $shr86 & 1;
    var $add88 = $and87 | $shl84;
    var $I57_0 = $add88;
    label = 16;
    break;
   case 16:
    var $I57_0;
    var $arrayidx91 = 5587900 + ($I57_0 << 2) | 0;
    var $index = $0 + 28 | 0;
    var $I57_0_c = $I57_0;
    HEAP32[$index >> 2] = $I57_0_c;
    var $arrayidx92 = $0 + 20 | 0;
    HEAP32[$arrayidx92 >> 2] = 0;
    var $23 = $0 + 16 | 0;
    HEAP32[$23 >> 2] = 0;
    var $24 = HEAP32[5587600 >> 2];
    var $shl95 = 1 << $I57_0;
    var $and96 = $24 & $shl95;
    var $tobool97 = ($and96 | 0) == 0;
    if ($tobool97) {
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 17:
    var $or101 = $24 | $shl95;
    HEAP32[5587600 >> 2] = $or101;
    HEAP32[$arrayidx91 >> 2] = $22;
    var $parent = $0 + 24 | 0;
    var $_c = $arrayidx91;
    HEAP32[$parent >> 2] = $_c;
    var $bk102 = $0 + 12 | 0;
    HEAP32[$bk102 >> 2] = $0;
    var $fd103 = $0 + 8 | 0;
    HEAP32[$fd103 >> 2] = $0;
    label = 30;
    break;
   case 18:
    var $25 = HEAP32[$arrayidx91 >> 2];
    var $cmp106 = ($I57_0 | 0) == 31;
    if ($cmp106) {
      var $cond115 = 0;
      label = 20;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    var $shr110 = $I57_0 >>> 1;
    var $sub113 = 25 - $shr110 | 0;
    var $cond115 = $sub113;
    label = 20;
    break;
   case 20:
    var $cond115;
    var $shl116 = $sub_ptr_sub << $cond115;
    var $K105_0 = $shl116;
    var $T_0 = $25;
    label = 21;
    break;
   case 21:
    var $T_0;
    var $K105_0;
    var $head118 = $T_0 + 4 | 0;
    var $26 = HEAP32[$head118 >> 2];
    var $and119 = $26 & -8;
    var $cmp120 = ($and119 | 0) == ($sub_ptr_sub | 0);
    if ($cmp120) {
      label = 26;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    var $shr123 = $K105_0 >>> 31;
    var $arrayidx126 = $T_0 + 16 + ($shr123 << 2) | 0;
    var $27 = HEAP32[$arrayidx126 >> 2];
    var $cmp128 = ($27 | 0) == 0;
    var $shl127 = $K105_0 << 1;
    if ($cmp128) {
      label = 23;
      break;
    } else {
      var $K105_0 = $shl127;
      var $T_0 = $27;
      label = 21;
      break;
    }
   case 23:
    var $28 = $arrayidx126;
    var $29 = HEAP32[5587612 >> 2];
    var $cmp133 = $28 >>> 0 < $29 >>> 0;
    if ($cmp133) {
      label = 25;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    HEAP32[$arrayidx126 >> 2] = $22;
    var $parent138 = $0 + 24 | 0;
    var $T_0_c6 = $T_0;
    HEAP32[$parent138 >> 2] = $T_0_c6;
    var $bk139 = $0 + 12 | 0;
    HEAP32[$bk139 >> 2] = $0;
    var $fd140 = $0 + 8 | 0;
    HEAP32[$fd140 >> 2] = $0;
    label = 30;
    break;
   case 25:
    _abort();
   case 26:
    var $fd145 = $T_0 + 8 | 0;
    var $30 = HEAP32[$fd145 >> 2];
    var $31 = $T_0;
    var $32 = HEAP32[5587612 >> 2];
    var $cmp147 = $31 >>> 0 < $32 >>> 0;
    if ($cmp147) {
      label = 29;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    var $33 = $30;
    var $cmp150 = $33 >>> 0 < $32 >>> 0;
    if ($cmp150) {
      label = 29;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    var $bk155 = $30 + 12 | 0;
    HEAP32[$bk155 >> 2] = $22;
    HEAP32[$fd145 >> 2] = $22;
    var $fd157 = $0 + 8 | 0;
    var $_c5 = $30;
    HEAP32[$fd157 >> 2] = $_c5;
    var $bk158 = $0 + 12 | 0;
    var $T_0_c = $T_0;
    HEAP32[$bk158 >> 2] = $T_0_c;
    var $parent159 = $0 + 24 | 0;
    HEAP32[$parent159 >> 2] = 0;
    label = 30;
    break;
   case 29:
    _abort();
   case 30:
    return;
  }
}



_add_segment["X"]=1;

// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    add: function(xl, xh, yl, yh) {
      var x = new goog.math.Long(xl, xh);
      var y = new goog.math.Long(yl, yh);
      var ret = x.add(y);
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    subtract: function(xl, xh, yl, yh) {
      var x = new goog.math.Long(xl, xh);
      var y = new goog.math.Long(yl, yh);
      var ret = x.subtract(y);
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    multiply: function(xl, xh, yl, yh) {
      var x = new goog.math.Long(xl, xh);
      var y = new goog.math.Long(yl, yh);
      var ret = x.multiply(y);
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    divide: function(xl, xh, yl, yh, unsigned) {
      Wrapper.ensureTemps();
      if (!unsigned) {
        var x = new goog.math.Long(xl, xh);
        var y = new goog.math.Long(yl, yh);
        var ret = x.div(y);
        HEAP32[tempDoublePtr>>2] = ret.low_;
        HEAP32[tempDoublePtr+4>>2] = ret.high_;
      } else {
        // slow precise bignum division
        var x = Wrapper.lh2bignum(xl >>> 0, xh >>> 0);
        var y = Wrapper.lh2bignum(yl >>> 0, yh >>> 0);
        var z = new BigInteger();
        x.divRemTo(y, z, null);
        var l = new BigInteger();
        var h = new BigInteger();
        z.divRemTo(Wrapper.two32, h, l);
        HEAP32[tempDoublePtr>>2] = parseInt(l.toString()) | 0;
        HEAP32[tempDoublePtr+4>>2] = parseInt(h.toString()) | 0;
      }
    },
    modulo: function(xl, xh, yl, yh, unsigned) {
      Wrapper.ensureTemps();
      if (!unsigned) {
        var x = new goog.math.Long(xl, xh);
        var y = new goog.math.Long(yl, yh);
        var ret = x.modulo(y);
        HEAP32[tempDoublePtr>>2] = ret.low_;
        HEAP32[tempDoublePtr+4>>2] = ret.high_;
      } else {
        // slow precise bignum division
        var x = Wrapper.lh2bignum(xl >>> 0, xh >>> 0);
        var y = Wrapper.lh2bignum(yl >>> 0, yh >>> 0);
        var z = new BigInteger();
        x.divRemTo(y, null, z);
        var l = new BigInteger();
        var h = new BigInteger();
        z.divRemTo(Wrapper.two32, h, l);
        HEAP32[tempDoublePtr>>2] = parseInt(l.toString()) | 0;
        HEAP32[tempDoublePtr+4>>2] = parseInt(h.toString()) | 0;
      }
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

Module.callMain = function callMain(args) {
  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_STATIC) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_STATIC));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_STATIC);


  var ret;

  ret = Module['_main'](argc, argv, 0);


  return ret;
}




function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return 0;
  }

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    var toRun = Module['preRun'];
    Module['preRun'] = [];
    for (var i = toRun.length-1; i >= 0; i--) {
      toRun[i]();
    }
    if (runDependencies > 0) {
      // a preRun added a dependency, run will be called later
      return 0;
    }
  }

  function doRun() {
    var ret = 0;
    calledRun = true;
    if (Module['_main']) {
      preMain();
      ret = Module.callMain(args);
      if (!Module['noExitRuntime']) {
        exitRuntime();
      }
    }
    if (Module['postRun']) {
      if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
      while (Module['postRun'].length > 0) {
        Module['postRun'].pop()();
      }
    }
    return ret;
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
    return 0;
  } else {
    return doRun();
  }
}
Module['run'] = Module.run = run;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

initRuntime();

var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

if (shouldRunNow) {
  var ret = run();
}

// {{POST_RUN_ADDITIONS}}






  // {{MODULE_ADDITIONS}}


// EMSCRIPTEN_GENERATED_FUNCTIONS: ["_pre_interpolate","_lossless_dng_load_raw","_unpacked_load_raw","_init_top","_nikon_3700","_parse_riff","_canon_600_fixed_wb","_smal_v9_load_raw","_nikon_load_raw","_kodak_jpeg_load_raw","_jpeg_thumb","_parse_tiff","_tiff_set","_foveon_camf_param","_vng_interpolate","_linear_table","_redcine_load_raw","_foveon_thumb","_ljpeg_diff","_phase_one_correct","_sget2","_sget4","_find_green","_flip_index","_release_unused_segments","_foveon_camf_matrix","_foveon_make_curves","_fuji_rotate","_sys_alloc","_free","_simple_coeff","_parse_kodak_ifd","_parse_redcine","_foveon_dp_load_raw","_foveon_decoder","_read_shorts","_minolta_z2","_main","_ljpeg_end","_init_bins","_parse_ciff","_leaf_hdr_load_raw","_parse_smal","_adobe_copy_pixel","_recover_highlights","_eight_bit_load_raw","_parse_thumb_note","_kodak_thumb_load_raw","_ljpeg_row","_phase_one_flat_field","_get_timestamp","_tmalloc_large","_canon_has_lowbits","_pana_bits","_derror","_my_memmem","_canon_600_correct","_scale_colors","_gamma_curve","_kodak_radc_load_raw","_lin_interpolate","_parse_phase_one","_phase_one_load_raw","_ahd_interpolate","_parse_jpeg","_parse_makernote","_ppm_thumb","_kodak_65000_decode","_sony_decrypt","_parse_minolta","_ppm16_thumb","_int_to_float","_canon_600_auto_wb","_canon_600_color","_phase_one_load_raw_c","_pentax_load_raw","_adobe_coeff","_parse_gps","_hasselblad_load_raw","_sys_trim","_canon_600_coeff","_foveon_huff","_border_interpolate","_make_decoder_ref","_tmalloc_small","_canon_600_load_raw","_foveon_interpolate","_hat_transform","_median_filter","_parse_fuji","_sony_load_raw","_prepend_alloc","_merror","_crop_masked_pixels","_sinar_4shot_load_raw","_apply_tiff","_kodak_262_load_raw","_crw_init_tables","_foveon_gets","_packed_load_raw","_getint","_canon_load_raw","_ph1_bithuff","_kodak_yrgb_load_raw","_median4","_rollei_thumb","_olympus_load_raw","_getbithuff","_parse_exif","_stretch","_imacon_full_load_raw","_smal_v6_load_raw","_packed_dng_load_raw","_tiff_get","_kodak_dc120_load_raw","_smal_decode_segment","_add_segment","_cam_xyz_coeff","_foveon_make_curve","_identify","_malloc","_kodak_rgb_load_raw","_ciff_block_1030","_bad_pixels","_foveon_fixed","_foveon_sd_load_raw","_pseudoinverse","_lossy_dng_load_raw","_get2","_fill_holes","_kodak_ycbcr_load_raw","_get4","_subtract","_canon_sraw_load_raw","_blend_highlights","_minolta_rd175_load_raw","_kodak_65000_load_raw","_fcol","_foveon_load_camf","_nikon_e2100","_ljpeg_start","_quicktake_100_load_raw","_canon_s2is","_calloc","_sony_arw2_load_raw","_foveon_apply_curve","_panasonic_load_raw","_sony_arw_load_raw","_lossless_jpeg_load_raw","_init_mparams","_layer_thumb","_parse_sinar_ia","_parse_rollei","_parse_tiff_ifd","_make_decoder","_remove_zeroes","_segment_holding","_rollei_load_raw","_nokia_load_raw","_getreal","_wavelet_denoise","_nikon_e995","_tiff_head","_foveon_avg","_parse_external_jpeg","_guess_byte_order","_romm_coeff","_parse_cine","_write_ppm_tiff","_raw","_parse_mos","_ppg_interpolate","_parse_foveon","_convert_to_rgb"]




    root.run = run;
    root.FS = FS;
}());

    root.run = run;
    root.FS = FS;
}());

    root.run = run;
    root.FS = FS;
}());

    root.run = run;
    root.FS = FS;
}());

    root.run = run;
    root.FS = FS;
}());

    root.run = run;
    root.FS = FS;
}());

    root.run = run;
    root.FS = FS;
}());

    root.run = run;
    root.FS = FS;
}());

    root.run = run;
    root.FS = FS;
}());

    root.run = run;
    root.FS = FS;
}());
