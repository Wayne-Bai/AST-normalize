Meteor.startup (function () {    $(function () {        var el = document.createElement("script");        el.src = "/scripts/disqus.js";        el.type = 'text/javascript';        $("#disqusCommentBox").prepend(el);    });});var layer,headerSection, footerSection, bodySection,gridItems,gridHilightRect,itemCount = 0;var Global = {	STAGE_WIDTH:600,	STAGE_HEIGHT:720,	CELL_HEIGHT:null,	CELL_WIDTH:null};var ItemPool = ItemPool || {};ItemPool.selectedItems = [];ItemPool.items = [];ItemPool.addItem = function(item){	ItemPool.items.push(item);}ItemPool.selectItem = function(item){	//for(var i=0; i<ItemPool.items.length; i++){	//	ItemPool.items[i].hidePointers();	//}	if(ItemPool.currentItem && (ItemPool.currentItem.id() != item.id())){		ItemPool.currentItem.hidePointers();			}	ItemPool.currentItem = item;		}ItemPool.clearSelectedItems = function(){	ItemPool.selectedItems = [];}ItemPool.duplicateCurrentItem = function(){	}ItemPool.removeCurrentItem = function(){	var pos = -1;	for(var i=0; i<ItemPool.items.length; i++){		//console.log("Item ID :" + ItemPool.items[i].kn.id());		if(ItemPool.items[i].kn.id() === ItemPool.currentItem.id()){			pos = i;			break;		}	}	//console.log("Remove Item Pos: " + pos)	if(pos != -1)	ItemPool.items.splice(pos,1);}$(document).ready(function () {	setGoogleAnalytics();	setUserEcho();	//loadDisqus();		$('#griditTabs a[href="#tabEditor"]').tab('show');	var ctrlDown = false;    var ctrlKey = "17", deleteKey="46";vKey = "86", cKey = "67";	$('body').keydown(function (e) {            var keycode = e.keyCode ? e.keyCode : e.which;            //Check for Delete Key            if (keycode == deleteKey) {                				ItemPool.currentItem.remove();				ItemPool.removeCurrentItem();				layer.draw();            }					else if (e.keyCode == ctrlKey){			ctrlDown = true;		}		//else if (ctrlDown && (e.keyCode == cKey)){			//alert("copy");		//}		else if (ctrlDown && (e.keyCode == vKey)){			//alert("");		}		    }).keyup(function(e)    {        if (e.keyCode == ctrlKey) ctrlDown = false;    });	var stage = new Kinetic.Stage({        container: 'stage',        width: Global.STAGE_WIDTH ,        height: Global.STAGE_HEIGHT 	});		  	layer = new Kinetic.Layer();		headerSection = RRectangle({		styles: {			x: 0,			y: 0,			width: 600,			height:50,			fill: '#E9F1FA',			stroke: '#DBE2F0',			strokeWidth: 2,			opacity: 1,			isDraggable:true,			isLocked:true		},		ponterSides:{			top:false,			right:false,			bottom:true,			left:false		}	});		bodySection = RRectangle({		styles: {			x: 0,			y: 0,			width: 600,			height:800,			fill: '#ffffff',			stroke: '#DBE2F0',			strokeWidth: 2,			opacity: 0.5,			isDraggable:true,			isLocked:true		},		ponterSides:{			top:false,			right:false,			bottom:false,			left:false		}	});		footerSection = RRectangle({		styles: {			x: 0,			y: 760,			width: 600,			height:40,			fill: '#E9F1FA',			stroke: '#DBE2F0',			strokeWidth: 2,			opacity: 1,			isDraggable:true,			isLocked:true		},		ponterSides:{			top:true,			right:false,			bottom:false,			left:false		}	});		//layer.add(bodySection.kn);	//layer.add(headerSection.kn);	//layer.add(footerSection.kn);	stage.add(layer);	//txt.kn.setText("Class Student Report");	layer.draw();});function Editor(rows){	var components = {	    LABEL:RText,		RECTANGLE:RRectangle	};		var color = {		"1": {			fill:"#D1E8FF",			stroke: "#73ABFF"		},		"2": {			fill:"#FFE0D1",			stroke:"#FF9966"		},		"3": {			fill:"#FF9595",			stroke: "#FF6A6A"		},		"4": {			fill:"#CFFFC9",			stroke: "#78E378"		},		"5": {			fill:"#FFFA94",			stroke: "#FF9E36"		},		"6": {			fill:"#FFCCFF",			stroke: "#FF66FF"		}	}	var selectedItems = [];	createGrid(rows);		function createGrid(rows){		Global.CELL_HEIGHT = 40;		Global.CELL_WIDTH = Global.STAGE_WIDTH/rows;			var columns = Math.floor(Global.STAGE_HEIGHT/Global.CELL_HEIGHT);		gridHilightRect = RRectangle({				styles:{					x:0,					y:0,					width: Global.CELL_WIDTH,					height: Global.CELL_HEIGHT,					isDraggable:false,					isLocked:false,					opacity:0.4,					strokeWidth: 0.5,					fill: "#FF0000",					stroke: "#FF0000",					visible:false				},				ponterSides:{					top:false,					right:false,					bottom:false,					left:false				}			});				layer.add(gridHilightRect.kn);				//var item;		var line;		gridItems = {};		for(var j = 0; j<=columns; j++){			line = new Kinetic.Line({				points: [0, j*Global.CELL_HEIGHT, Global.STAGE_WIDTH, j*Global.CELL_HEIGHT],				stroke: '#B2BBEC',				strokeWidth: 0.7				});		  layer.add(line);		}				for(var i = 0; i<=rows; i++){			line = new Kinetic.Line({				points: [i*Global.CELL_WIDTH, 0,i*Global.CELL_WIDTH, Global.STAGE_HEIGHT],				stroke: '#B2BBEC',				strokeWidth: 0.7				});		  layer.add(line);		}				//console.log(gridItems);		layer.draw();	}	function areColliding(container, component) {	 // //console.log(component.getY());	 // //console.log(container.getY());	 // //console.log(container.getHeight());	  return (component.getCurrentX() >= container.getCurrentX()) && 			 (component.getCurrentY() >= container.getCurrentY() && 			 component.getCurrentY() <= (container.getCurrentY() + container.getHeight()));	}		function getDroppedContainer(item){		if(areColliding(headerSection.kn, item.kn)){			return "Header";		}		else if(areColliding(footerSection.kn, item.kn)){			return "Footer";		}		else{			return "Body";		}	}		function addComponent(currentLayer,type,params){			var rowIndex = Math.floor(params.x/Global.CELL_WIDTH);		var columnIndex = Math.floor(params.y/Global.CELL_HEIGHT);		//console.log("rest x : " + params.x % Global.CELL_WIDTH);		//console.log("rest y : " + params.y % Global.CELL_HEIGHT);		if(params.x % Global.CELL_WIDTH <= Global.CELL_WIDTH/2){			rowIndex--;		}				if(params.y % Global.CELL_HEIGHT <= Global.CELL_HEIGHT/2){			columnIndex--;		}		params.x = (rowIndex) * Global.CELL_WIDTH;		params.y = (columnIndex) * Global.CELL_HEIGHT;					var parts = type.split("_");		var componentType = parts[0].toUpperCase().trim();		var columnsCount = Math.floor(parts[1]);		if(components[componentType]){			var item = components[componentType]({				styles:{					x:params.x,					y:params.y,					width:Global.CELL_WIDTH * columnsCount,					opacity:0.7,					fill:"#D1E8FF",					stroke:"#73ABFF",					text:itemCount.toString(),					itemIndex:componentType + itemCount				}			});						currentLayer.add(item.kn);			currentLayer.draw();			//console.log(getDroppedContainer(item));			itemCount++;			ItemPool.addItem(item);		}	}	return{		addComponent:addComponent	}}////Main Section//    function handleDragStart(e) {		//this.style.opacity = '0.4';  // this / e.target is the source node.		e.dataTransfer.setData("type",e.target.id);	}	  	function handleDragOver(e) {		  if (e.preventDefault) {			e.preventDefault(); // Necessary. Allows us to drop.		  }		  e.dataTransfer.dropEffect = 'move';  // See the section on the DataTransfer object.		  return false;	}	function handleDragEnter(e) {	  // this / e.target is the current hover target.	  this.classList.add('over');	}	function handleDragLeave(e) {	  //console.log('drag leave');	  this.classList.remove('over');  // this / e.target is previous target element.	}	 	function handleDrop(e) {	  // this / e.target is current target element.      //console.log("drop baby");	  if (e.stopPropagation) {		e.stopPropagation(); // stops the browser from redirecting.	  }	  // See the section on the DataTransfer object.	  return false;	}	 		function handleDragEnd(e) {		//console.log("dragend");	}	function setGoogleAnalytics(){		(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){		(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),		m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)		})(window,document,'script','//www.google-analytics.com/analytics.js','ga');		ga('create', 'UA-50598124-1', 'meteor.com');		ga('send', 'pageview');	}	function setUserEcho(){		// Include the UserVoice JavaScript SDK (only needed once on a page)		UserVoice=window.UserVoice||[];(function(){var uv=document.createElement('script');uv.type='text/javascript';uv.async=true;uv.src='//widget.uservoice.com/wdBzBp4jiyJe1eVSRYDSVg.js';var s=document.getElementsByTagName('script')[0];s.parentNode.insertBefore(uv,s)})();		//		// UserVoice Javascript SDK developer documentation:		// https://www.uservoice.com/o/javascript-sdk		//		// Set colors		UserVoice.push(['set', {		  accent_color: '#448dd6',		  trigger_color: 'white',		  trigger_background_color: '#6aba2e'		}]);		// Identify the user and pass traits		// To enable, replace sample data with actual user traits and uncomment the line		UserVoice.push(['identify', {		  //email:      'john.doe@example.com', // User’s email address		  //name:       'John Doe', // User’s real name		  //created_at: 1364406966, // Unix timestamp for the date the user signed up		  //id:         123, // Optional: Unique id of the user (if set, this should not change)		  //type:       'Owner', // Optional: segment your users by type		  //account: {		  //  id:           123, // Optional: associate multiple users with a single account		  //  name:         'Acme, Co.', // Account name		  //  created_at:   1364406966, // Unix timestamp for the date the account was created		  //  monthly_rate: 9.99, // Decimal; monthly rate of the account		  //  ltv:          1495.00, // Decimal; lifetime value of the account		  //  plan:         'Enhanced' // Plan name for the account		  //}		}]);		// Add default trigger to the bottom-right corner of the window:		UserVoice.push(['addTrigger', { mode: 'contact', trigger_position: 'bottom-right' }]);		// Or, use your own custom trigger:		//UserVoice.push(['addTrigger', '#id', { mode: 'contact' }]);		// Autoprompt for Satisfaction and SmartVote (only displayed under certain conditions)		UserVoice.push(['autoprompt', {}]);	}	function loadDisqus(){		var el = document.createElement("script");        el.src = "/disqus.js";        el.type = 'text/javascript';        $("#disqusCommentBox").prepend(el);	}	var offsetX;	var offsetY;	var editor;		  $(document).ready(function () {		  var containerOffset=$("#stage").offset();          offsetX=containerOffset.left;          offsetY=containerOffset.top;		  editor = Editor(12);		  var cols = document.querySelectorAll('.component');		  [].forEach.call(cols, function(col) {				col.addEventListener('dragstart', handleDragStart, false);				//col.addEventListener('dragenter', handleDragEnter, false);				//col.addEventListener('dragover', handleDragOver, false);				//col.addEventListener('dragleave', handleDragLeave, false);								//col.addEventListener('drop', handleDrop, false);				//console.log('add');		  });		  		  var stg = document.querySelectorAll('.stage');		  [].forEach.call(stg, function(col) {				//col.addEventListener('drop', handleDrop, false);				//console.log('add');		  });		  		  function getComponentsData(){		  	sortEntities();			var divs = [];			var box;			for(var i=0; i<ItemPool.items.length; i++){				box = ItemPool.items[i].box;				divs.push({					xIndex:Math.floor(box.getAbsolutePosition().x/Global.CELL_WIDTH),					yIndex:Math.floor(box.getAbsolutePosition().y/Global.CELL_HEIGHT),					width:Math.floor(box.getWidth()/Global.CELL_WIDTH),					height:Math.floor(box.getHeight()/Global.CELL_HEIGHT)				});			}						return divs;		  }		  		  function getComponentsDataForGridsterBootstrap(){		  	sortEntities();			var divs = [];			var box;			for(var i=0; i<ItemPool.items.length; i++){				box = ItemPool.items[i].box;				divs.push({					col:Math.floor(box.getAbsolutePosition().x/Global.CELL_WIDTH),					row:Math.floor(box.getAbsolutePosition().y/Global.CELL_HEIGHT) + 1,					size_x:Math.floor(box.getWidth()/Global.CELL_WIDTH),					size_y:Math.floor(box.getHeight()/Global.CELL_HEIGHT)				});			}						return divs;		  }		  $("#downloadButton").click(function(){		  				  		$("#downloadButton").attr('download','layout.html');		  		$("#downloadButton").attr('href','data:Application/octet-stream,' + encodeURIComponent(getHtmlLayout()));		  });		  $("#infoButton").click(function () {			divs = getComponentsData();			console.log(JSON.stringify(divs));			if(divs.length ==0)				alert("Drag n drop some elements and try again...");			else{				var html = getHtmlWithOffset(divs);				//console.log(html);				$("#simpleGrid").html(html);				$('#griditTabs a[href="#tabGrid"]').tab('show');			}			  });		  		  $("#gridsterBootstripyButton").click(function () {			divs = getComponentsDataForGridsterBootstrap();						if(divs.length ==0)				alert("Drag n drop some elements and try again...");			else{				var s = divs;            	var b = new bsgridster(s, 42, 'graybox');            	var v = b.getHtml();            	$('#simpleGrid').html(v);            	$('#griditTabs a[href="#tabGrid"]').tab('show');			}					  });		  		  		  $('#stage').contextMenu('myMenu1', {			  bindings: {				'open': function(t) {				  alert('Trigger was '+t.id+'\nAction was Open');				},				'email': function(t) {				  alert('Trigger was '+t.id+'\nAction was Email');				},				'save': function(t) {				  alert('Trigger was '+t.id+'\nAction was Save');				},				'delete': function(t) {				  alert('Common !!! Just select it and click delete key.');				}			  }			});				});		function allowDrop(ev)	{		ev.preventDefault();	}	function drag(ev)	{		//ev.dataTransfer.setData("Text",ev.target.id);	}    		function drop(event)	{		//console.log(event.dataTransfer.getData("type"));		event.preventDefault();		editor.addComponent(layer,event.dataTransfer.getData("type"),{			x:event.clientX - offsetX,			y:event.clientY - offsetY + $(document).scrollTop()		});		/*var rect = RRectangle({			styles:{				x: event.clientX - offsetX,				y: event.clientY - offsetY,				width: 100,				height: 40			}		});		layer.add(rect.kn);		layer.draw();*/		return false;	}	function sortEntities(){		var swapped;		var temp;			do {			    swapped = false;			    for (var i=0; i < ItemPool.items.length-1; i++) {			        if (ItemPool.items[i].box.getAbsolutePosition().x > ItemPool.items[i+1].box.getAbsolutePosition().x) {			            temp = ItemPool.items[i];			            ItemPool.items[i] = ItemPool.items[i+1];			            ItemPool.items[i+1] = temp;			            swapped = true;			            console.log("swapped x");			            }			        }			    } while (swapped);			do {			    swapped = false;			    for (var i=0; i < ItemPool.items.length-1; i++) {			        if (ItemPool.items[i].box.getAbsolutePosition().y > ItemPool.items[i+1].box.getAbsolutePosition().y) {			            temp = ItemPool.items[i];			            ItemPool.items[i] = ItemPool.items[i+1];			            ItemPool.items[i+1] = temp;			            swapped = true;			            console.log("swapped y");			        }			    }			} while (swapped);	}	function getHtmlWithOffset(arr){		console.log(arr);		if(!(arr) || arr.length===0){			return '';		}		var rowHeight = 42;		var html = '<div class="row col-md-12" >';		var row = arr[0].yIndex;		var offset = 0;		var totalX = arr[0].xIndex;		var column = arr[0].width;		var isInit = true;		var k = 0;		for(var i=0; i<arr.length; i++){			offset = arr[i].xIndex - totalX;			if(row != arr[i].yIndex){				html += '</div>';				if(arr[i].yIndex != row+1){					while(row +1 != arr[i].yIndex){						html += '<div class="row col-md-12" ></div>';						row++;					}				} 				html += '<div class="row col-md-12" >';					row ++ ;				totalX = arr[i].xIndex;				offset = arr[i].xIndex;			}			else if(row === arr[i].yIndex){				totalX = arr[i].xIndex;			}			if(isInit){				offset = arr[i].xIndex;				isInit = false;			}			totalX += arr[i].width;			//console.log("Offset : " + offset);			if(!(offset) || offset === 0){				html +='<div class="col-md-' + arr[i].width + '" style="min-height: ' + arr[i].height*rowHeight + 'px;">.col-md-'+ arr[i].width +'</div>';			}			else{				html +='<div class="col-md-' + arr[i].width + ' col-md-offset-'+ offset +' " style="min-height: ' + arr[i].height*rowHeight + 'px;">.col-md-'+ arr[i].width + ' offset-' + offset +'</div>';			}						}		html += '</div>';				return html;	}	function getHtmlLayout(){		var html = getHtmlTemplate();		html = html.replace('###divContent',getResponsiveDivsLayout());		return html;	}	function getResponsiveDivsLayout(){		var layoutStr = "";		layoutStr+= $("#simpleGrid").html().replace(/<div class="row/g, '\n            <div class="row').replace(/<div class="col/g, '\n                <div class="col').replace(/div></g, 'div>\n            <');		return layoutStr;	}	function getHtmlTemplate(){		var str=			['<html>',			'  	<head>',			'		<link rel="stylesheet" type="text/css" href="bootstrap.css">',			'		<style type="text/css">',			'			body {',			'				margin: 0px;',			'				padding: 0px;',			'				font-family:"Segoe UI","Segoe WP","Helvetica Neue",sans-serif',			'			}',			'			 ',							'			div [class^=col-] {',			'				padding-top: 10px;',			'				padding-bottom: 10px;',			'				background-color: #eee;',			'				background-color: rgba(86,61,124,.15);',			'				border: 1px solid #ddd;',			'				border: 1px solid rgba(86,61,124,.2);',			'				font-size: 12px;',			'			}',			'			 ',				'			@media (min-width: 992px) { .row {height:42px;}}',						'			 ',			'		</style>',			'	</head>',			'	<body>',			'		<h4 style="margin-left:10px;">(Please check/change bootstrap.css file path.)</h4>',			'		<div id="simpleGrid" style="min-height:800px; margin-top:50px;padding:10px;">',			'		   ###divContent',			'		  ',			'		</div>',			'	</body>',			'</html>'].join('\n');				return str;		}