/**
 * @file Generate a `config.js` file that contains encrypted values that can safely be stored in Github or elsewhere.
 */

var fs = require('fs');
var crypto = require('crypto');
var template = fs.readFileSync('config_template.js').toString();
var password = process.argv[2];
var unsecured = require('./raw_config.js');

/**
 * Encode the given value using AES-256 and the password provded on the command-line.
 *
 * @param {String} value the value to encrypt
 *
 * @return {String}  encrypted value with Base-64 encoding
 */
var E = function(value) {
    var cipher;
    if (typeof password === 'undefined' || password.length == 0) {
        console.log('*** missing password');
        console.log('usage: node raw_config.js PASSWORD');
        process.exit(1);
    }
    cipher = crypto.createCipher('aes256', password);
    return Buffer.concat([cipher.update(new Buffer(value)), cipher.final()]).toString('base64');
};

var used = {};

/**
 * Content generated by substituting placeholder values in `template` with encrypted values from `unsecured`.
 */
var content = template.replace(/@@([a-zA-Z_-]+)@@/g, function(match, p1) {
    var value = unsecured[p1];
    if (typeof value === 'undefined' || value === null) {
        console.log('*** unknown substitution parameter: ' + p1 + ' - config.js not generated');
        process.exit(1);
    }
    used[p1] = 1;
    return E(unsecured[p1]);
});

/**
 * Check that all values listed in `unsecured` were used in the template.
 */
if (Object.keys(unsecured).length !== Object.keys(used).length) {
    for (var attr in unsecured) {
        if (used[attr] !== 1) {
            console.log('*** did not use secured "' + attr + '" in template - config.js not generated');
        }
    }
    process.exit(1);
}

console.log(content);

fs.writeFileSync('config.js', content);
process.exit(0);
