// Generated by CoffeeScript 1.7.1
(function() {
  var ChildProcess, Config, Fs, Mkdirp, PasswordHash, Path, Program, WorkingQueue;

  Program = require('commander');

  WorkingQueue = require('capisce').WorkingQueue;

  PasswordHash = require('password-hash');

  Path = require('path');

  Fs = require('fs');

  Mkdirp = require('mkdirp');

  ChildProcess = require('child_process');

  Config = {
    getAppVersion: function() {
      return JSON.parse(Fs.readFileSync(__dirname + "/../../package.json")).version;
    },
    getAppVersionCode: function() {
      return JSON.parse(Fs.readFileSync(__dirname + "/../../package.json")).versionCode;
    },
    getDataDirectory: function() {
      var dir, home;
      home = process.env['HOME'];
      if (process.platform === 'darwin') {
        dir = Path.join(home, 'Library', 'Application Support', 'TapChat');
      } else {
        dir = Path.join(home, '.tapchat');
      }
      Mkdirp.sync(dir);
      return dir;
    },
    load: function(callback) {
      return Config.readConfig((function(_this) {
        return function(config) {
          if (!config) {
            Config.setup(callback);
            return;
          }
          if (config.password) {
            return Config.migrateOldInitialUser(config, callback);
          } else {
            return callback(config);
          }
        };
      })(this));
    },
    setup: function(callback) {
      var config, initialUser, queue;
      console.log('Welcome to TapChat!');
      config = {};
      queue = new WorkingQueue(1);
      queue.perform((function(_this) {
        return function(over) {
          return Program.prompt('Choose a port [8067]: ', function(port) {
            config.port = port || 8067;
            return over();
          });
        };
      })(this));
      initialUser = {};
      queue.perform((function(_this) {
        return function(over) {
          return Program.prompt('Choose a username: ', function(username) {
            initialUser.name = username;
            return over();
          });
        };
      })(this));
      queue.perform((function(_this) {
        return function(over) {
          return Program.password('Choose a password:', '*', function(password) {
            initialUser.password = PasswordHash.generate(password);
            return over();
          });
        };
      })(this));
      queue.perform((function(_this) {
        return function(over) {
          return Config.generateCert(over);
        };
      })(this));
      queue.onceDone((function(_this) {
        return function() {
          return Config.saveConfig(config, function(config) {
            return _this.insertUser(initialUser, function() {
              return callback(config);
            });
          });
        };
      })(this));
      return queue.doneAddingJobs();
    },
    generateCert: function(callback) {
      var certFile;
      certFile = Config.getCertFile();
      return Fs.exists(certFile, (function(_this) {
        return function(exists) {
          var cmd;
          if (!exists) {
            console.log('\nGenerating SSL certificate (this may take a minute)...');
            cmd = "openssl req -new -x509 -days 10000 -nodes -out '" + certFile + "' -keyout '" + certFile + "' -subj '/CN=tapchat'";
            return ChildProcess.exec(cmd, function(error, stdout, stderr) {
              if (error) {
                throw error;
              }
              return Config.getFingerprint(function(fingerprint) {
                console.log("Your SSL fingerprint is: " + fingerprint);
                return callback();
              });
            });
          } else {
            return callback();
          }
        };
      })(this));
    },
    getFingerprint: function(callback) {
      var cmd;
      cmd = "openssl x509 -fingerprint -noout -in '" + (Config.getCertFile()) + "'";
      return ChildProcess.exec(cmd, (function(_this) {
        return function(error, stdout, stderr) {
          if (error) {
            throw error;
          }
          return callback(stdout.replace(/^SHA1 Fingerprint=/, ''));
        };
      })(this));
    },
    readConfig: function(callback) {
      return Fs.exists(Config.getConfigFile(), (function(_this) {
        return function(exists) {
          if (exists) {
            return Fs.readFile(Config.getConfigFile(), function(err, data) {
              var config;
              if (err) {
                throw err;
              }
              config = JSON.parse(data);
              return callback(config);
            });
          } else {
            return callback(null);
          }
        };
      })(this));
    },
    saveConfig: function(config, callback) {
      return Fs.writeFile(Config.getConfigFile(), JSON.stringify(config, null, 4), (function(_this) {
        return function(err) {
          if (err) {
            throw err;
          }
          return callback(config);
        };
      })(this));
    },
    getConfigFile: function() {
      return Path.join(Config.getDataDirectory(), 'config.json');
    },
    getCertFile: function() {
      return Path.join(Config.getDataDirectory(), 'tapchat.pem');
    },
    getPidFile: function() {
      return Path.join(Config.getDataDirectory(), 'tapchat.pid');
    },
    getLogFile: function() {
      return Path.join(Config.getDataDirectory(), 'tapchat.log');
    },
    migrateOldInitialUser: function(config, callback) {
      var initialUser;
      console.log('Migrating old user to DB...');
      initialUser = {
        password: config.password
      };
      delete config.password;
      return Program.prompt('Set your username: ', (function(_this) {
        return function(username) {
          initialUser.name = username;
          return _this.insertUser(initialUser, function() {
            return Config.saveConfig(config, function() {
              return callback(config);
            });
          });
        };
      })(this));
    },
    insertUser: function(user, callback) {
      var BacklogDB;
      BacklogDB = require('./backlog_db');
      return new BacklogDB(function(db) {
        return db.insertUser(user.name, user.password, true, function() {
          db.close();
          return callback();
        });
      });
    }
  };

  module.exports = Config;

}).call(this);

//# sourceMappingURL=config.map
