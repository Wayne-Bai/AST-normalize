// Copyright (c) 2014 Tom Steele, Dan Kottmann, FishNet Security
// See the file license.txt for copying permission

Template.serviceVulnerabilityList.projectId = function() {
  return Session.get('projectId');
};

Template.serviceVulnerabilityList.portId = function() {
  return Session.get('portId');
};

Template.serviceVulnerabilityList.flagFilter = function() {
  return Session.get('vulnerabilityListFlagFilter');
};

Template.serviceVulnerabilityList.vulnerabilities = function() {
  var projectId = Session.get('projectId');
  var portId = Session.get('portId');
  var port = Ports.findOne({"project_id": projectId, "_id": portId});
  if (!port) {
    return false;
  }
  var hostId = port.host_id;
  var host = Hosts.findOne({"project_id": projectId, "_id": hostId});
  var query = {"project_id": projectId, "hosts.string_addr": host.string_addr,
               "hosts.port": port.port, "hosts.protocol": port.protocol, "status": {"$in": []}};
  if (Session.equals('vulnerabilityListFlagFilter', 'enabled')) {
    query.flag = true;
  }
  if (!Session.equals('vulnerabilityStatusButtongrey', 'disabled')) {
    query.status.$in.push('lair-grey');
  }
  if (!Session.equals('vulnerabilityStatusButtonblue', 'disabled')) {
    query.status.$in.push('lair-blue');
  }
  if (!Session.equals('vulnerabilityStatusButtongreen', 'disabled')) {
    query.status.$in.push('lair-green');
  }
  if (!Session.equals('vulnerabilityStatusButtonorange', 'disabled')) {
    query.status.$in.push('lair-orange');
  }
  if (!Session.equals('vulnerabilityStatusButtonred', 'disabled')) {
    query.status.$in.push('lair-red');
  }
  var search = Session.get('vulnerabilitySearch');
  if (search) {
    query.$or = [
      {"cvss": {"$regex": search, "$options": "i"}},
      {"title": {"$regex": search, "$options": "i"}},
      {"last_modified_by": {$regex: search, "$options": "i"}}
    ];
  }
  var vulnerabilities = Vulnerabilities.find(query, {sort: {"cvss": -1, "title": 1}}).fetch();
  vulnerabilities.forEach(addVulnRating);
  // add a remove-string
  vulnerabilities.forEach(function(vulnerability) {
    vulnerability["removeString"] = [vulnerability._id, host.string_addr, port.port, port.protocol].join('-');
  });
  return vulnerabilities;
};

Template.serviceVulnerabilityList.searchTerm = function() {
  return Session.get('vulnerabilitySearch');
};

Template.serviceVulnerabilityList.vulnerabilityStatusButtonActive = function(status) {
  if (Session.equals('vulnerabilityStatusButton' + status, 'disabled')) {
    return 'disabled';
  }
  return false;
};

Template.serviceVulnerabilityList.events({
  'click #flag-filter-enable': function() {
    return Session.set('vulnerabilityListFlagFilter', 'enabled');
  },

  'click #flag-filter-disable': function() {
    return Session.set('vulnerabilityListFlagFilter', null);
  },

  'click .vulnerability-status-button': function(event) {
    var id = 'vulnerabilityStatusButton' + event.target.id;
    if (Session.equals(id, null)) {
      return Session.set(id, 'disabled');
    }
    return Session.set(id, null);
  },

  'keyup #vulnerability-list-search': function(event, tpl)  {
    Session.set('vulnerabilitySearch', escapeRegex(tpl.find('#vulnerability-list-search').value));
  },

  'click #remove-vulnerabilities': function() {
    var projectId = Session.get('projectId');
    var vulnerabilityIds = [];
    var inputs = $('.vulnerability-checked');
    inputs.each(function(){
      if ($(this).is(':checked')) {
        vulnerabilityIds.push($(this).attr('id'));
      }
    });
    vulnerabilityIds.forEach(function(id) {
      var data = id.split('-');
      Meteor.call('removeHostFromVulnerability', projectId, data[0], data[1], parseInt(data[2]), data[3]);
    });
  }
});
