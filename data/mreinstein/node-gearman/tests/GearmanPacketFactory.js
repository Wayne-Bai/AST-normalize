var GearmanPacketFactory = require('../gearman.js').GearmanPacketFactory;
require('buffertools');
var put = require('put');
require('buffertools');
var packet_types = require('../gearman.js').packet_types;

exports.setUp = function (callback) {
    this.g = new GearmanPacketFactory();
    callback();
};

exports.tearDown = function (callback) {
    // clean up
    this.g = null;
    callback();
};


exports.testMultipleAddBytesSize = function(test){
	var good_buffer = new Buffer([ 0x00, 0x00, 0x00, 0x53 ]);
	this.g.addBytes(good_buffer);
	this.g.addBytes(good_buffer);
	test.equal(8, this.g._buffer.buffer().length);
	
	test.done();
};

exports.testPacketAndPartial = function(test){
	// this packet has a full packet and the start of another
	var good_buffer = new Buffer([ 0x00, 0x52, 0x45, 0x53, 0, 0, 0, 8, 0x00, 
		0x00, 0x00, 0x1f, 0x48, 0x3a, 0x4d, 0x69, 0x6b, 0x65, 0x73, 0x2d, 0x4d,
		0x61, 0x63, 0x42, 0x6f, 0x6f, 0x6b, 0x2d, 0x41, 0x69, 0x72, 0x2e, 0x6c, 
		0x6f, 0x63, 0x61, 0x6c, 0x3a, 0x32, 0x37, 0x38, 0x31, 0x36, 0x00, 0x52, 
		0x45, 0x53, 0x00, 0x00, 0x00, 0x08]);
	result = this.g.addBytes(good_buffer);
	test.equal(1, result.length);

	// verify the first packet is the result
	test.ok(result[0].equals( new Buffer([ 0x00, 0x52, 0x45, 0x53, 0, 0, 0, 8, 
		0x00, 0x00, 0x00, 0x1f, 0x48, 0x3a, 0x4d, 0x69, 0x6b, 0x65, 0x73, 0x2d, 
		0x4d,0x61, 0x63, 0x42, 0x6f, 0x6f, 0x6b, 0x2d, 0x41, 0x69, 0x72, 0x2e, 
		0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x3a, 0x32, 0x37, 0x38, 0x31, 0x36]) ) );

	// verify the beginning of the next packet is the contents of the buffer
	test.ok(this.g._buffer.buffer().equals( new Buffer([0x00, 0x52, 0x45, 0x53, 
		0x00, 0x00, 0x00, 0x08]) ) );

	test.done();
};

exports.testEmptyPacket = function(test){
	// an empty packet has only a 12 byte header
	var good_buffer = new Buffer([ 0x00, 0x52, 0x45, 0x53, 0, 0, 0, 8, 0x00, 
		0x00, 0x00, 0x00]);
	result = this.g.addBytes(good_buffer);
	test.equal(1, result.length);
	test.ok(result[0].equals( new Buffer([ 0x00, 0x52, 0x45, 0x53, 0, 0, 0, 8, 
		0x00, 0x00, 0x00, 0x00]) ) );

	test.ok(this.g._buffer.buffer().equals( new Buffer('') ) );
	test.done();
};

