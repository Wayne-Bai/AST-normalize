/*
 * 'Missing e' Extension
 *
 * Copyright 2012, Jeremy Cutler
 * Released under the GPL version 3 licence.
 * SEE: license/GPL-LICENSE.txt
 *
 * This file is part of 'Missing e'.
 *
 * 'Missing e' is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * 'Missing e' is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with 'Missing e'. If not, see <http://www.gnu.org/licenses/>.
 */

(function($){

MissingE.packages.replyRepliesFill = {

   getAsLinks: function(lang, type) {
      var urlPref = location.href
         .match(/http:\/\/www\.tumblr\.com\/blog\/([^\/]*)/);
      if (urlPref && urlPref.length >= 2) {
         urlPref = '/blog/' + urlPref[1];
      }
      else {
         urlPref = '';
      }
      var othertype = (type==='text' ? 'photo' : 'text');
      return MissingE.escapeHTML(MissingE.getLocale(lang)
                                    .replyType[type+"Title"]) + "\n" +
         '<span class="as_links"><a href="#" id="the_as_link" ' +
         'onclick="Element.hide(this);Element.show(\'the_as_links\');' +
         'return false;" style="font-weight:bold;" >' +
         MissingE.escapeHTML(MissingE.getLocale(lang).replyType.as) + '</a>' +
         '<span id="the_as_links" style="display:none;"><a id="as_switch" ' +
         'href="' + urlPref + '/new/' + othertype + '">' +
         MissingE.escapeHTML(MissingE.getLocale(lang).replyType[othertype][0]) +
         '<strong>' +
         MissingE.escapeHTML(MissingE.getLocale(lang).replyType[othertype][1]) +
         '</strong>' +
         MissingE.escapeHTML(MissingE.getLocale(lang).replyType[othertype][2]) +
         '</a>' +
         '<a href="#" onclick="Element.hide(\'the_as_links\');' +
         'Element.show(\'the_as_link\');return false;">x</a></span></span>';
   },

   run: function() {
      var lang = $('html').attr('lang');
      var reply = MissingE.packages.replyRepliesFill._reply;
      if (reply.length > 0) {
         var i, nowtype;
         var tags = MissingE.packages.replyRepliesFill._tags;
         if (/new\/text/.test(location.href)) {
            nowtype = 'text';
         }
         else {
            nowtype = 'photo';
         }
         $('#left_column h1:first')
            .html(MissingE.packages.replyRepliesFill
                  .getAsLinks(lang, nowtype));
         $('#as_switch').click(function() {
            extension.sendRequest("sendReply",
                                  {url: this.href, newReply: false,
                                   reply: reply, tags: tags});
            return false;
         });
         $(document).ready(function() {
            var insertText = escape(reply);
            // Sanitization of input text done in replyReplies.js
            // where html is either generated and escaped or used
            // verbatim from existing DOM generated by host site
            $('head').append('<script type="text/javascript">' +
                 'var replyText = unescape("' + insertText + '");' +
                 'if (tinyMCE && (ed = tinyMCE.get("post_two"))) {' +
                     'ed.execCommand("mceInsertContent", false, replyText);' +
                     'ed.onInit.add(function(ed){' +
                        'if (ed.getContent()==""){' +
                           'ed.execCommand("mceInsertContent", ' +
                                           'false, replyText);' +
                        '}' +
                     '});' +
                 '}' +
                 'else {' +
                    'insertTag("post_two", replyText);' +
                 '}');
         });
         if (tags.length > 0) {
            var tagnodes = [];
            var txt = "";
            document.getElementById('post_tags').value = tags.join(",");
            for (i=0; i<tags.length; i++) {
               if (tags[i] !== undefined && tags[i] !== null &&
                   tags[i] !== '') {
                  tagnodes.push(MissingE.createTag(lang, tags[i]));
               }
            }
            if (tagnodes.length > 0) {
               var tokenList = document.getElementById('tokens');
               for (i=0; i<tagnodes.length; i++) {
                  tokenList.appendChild(tagnodes[i]);
               }
               var label = document.getElementById('post_tags_label');
               label.parentNode.removeChild(label);
            }
         }
      }
   },

   init: function() {
      if (MissingE.isTumblrURL(location.href, ["reply"])) {
         extension.sendRequest("getReply", function(response) {
            if (response.hasOwnProperty("reply")) {
               MissingE.packages.replyRepliesFill._reply = response.reply;
               MissingE.packages.replyRepliesFill._tags = response.tags;
               MissingE.packages.replyRepliesFill.run();
            }
         });
      }
   }
};

if (extension.isChrome ||
    extension.isFirefox) {
   MissingE.packages.replyRepliesFill.init();
}

}(jQuery));
