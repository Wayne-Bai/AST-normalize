
//Log Utility
//============
//(c) 2014 Lucio M. Tato


//options
//-------

   var options = {
           verbose: 1, 
           warning: 1, 
           debug: {
               enabled: false, 
               file: 'out/debug.log'
               }
           };
   exports.options = options
   ;


//Colors
//------

   var color = {
     normal: "\x1b[39;49m", 
     red: "\x1b[91m", 
     yellow: "\x1b[93m", 
     green: "\x1b[32m"
     };
   exports.color = color
   ;


//Dependencies:
//-------------

   var fs = require('fs'), path = require('path');

   var mkPath = require('mkPath');

//###global declares, valid properties

//    declare on Error
//        soft, controled, code, stack

//Implementation
//---------------

//    declare valid Array.prototype.slice.apply
//    declare valid Array.prototype.join.apply
//    declare valid console.log.apply
//    declare valid console.error.apply

   //public function debug
   function debug(){

       //if options.debug.enabled
       if (options.debug.enabled) {
           var args = Array.prototype.slice.apply(arguments);
           //if options.debug.file
           if (options.debug.file) {
               //fs.appendFileSync options.debug.file, args.join(" ")+"\r\n"
               fs.appendFileSync(options.debug.file, args.join(" ") + "\r\n");
           }
           else {
               //console.log.apply this,args
               console.log.apply(this, args);
           };
       };
   };
   exports.debug=debug;

   //append to namespace debug
   
    //method clear ### clear debug file
    debug.clear = function(){// ### clear debug file

       //mkPath.toFile options.debug.file
       mkPath.toFile(options.debug.file);
       //fs.writeFileSync options.debug.file,""
       fs.writeFileSync(options.debug.file, "");
    };


   //public function error
   function error(){

//increment error count

       //error.count++
       error.count++;
       var args = Array.prototype.slice.apply(arguments);

//add "ERROR:", send to debug log

       //args.unshift('ERROR:');
       args.unshift('ERROR:');
       //debug.apply(this,args);
       debug.apply(this, args);

//add red color, send to stderr

       //args.unshift(color.red);
       args.unshift(color.red);
       //args.push(color.normal);
       args.push(color.normal);
       //console.error.apply(this,args);
       console.error.apply(this, args);
   };
   exports.error=error;


   //append to namespace error #to the function as namespace
   
//        properties
//            count = 0  # now we have: log.error.count
       error.count=0;
       


   //public function warning
   function warning(){

       //warning.count++
       warning.count++;
       var args = Array.prototype.slice.apply(arguments);
       //args.unshift('WARNING:');
       args.unshift('WARNING:');
       //debug.apply(this,args);
       debug.apply(this, args);
       //if options.warning > 0
       if (options.warning > 0) {
           //args.unshift(color.yellow);
           args.unshift(color.yellow);
           //args.push(color.normal);
           args.push(color.normal);
           //console.error.apply(this,args);
           console.error.apply(this, args);
       };
   };
   exports.warning=warning;

   //append to namespace warning #to the function as namespace
   
//        properties
//            count = 0  # now we have: log.warning.count
       warning.count=0;
       

   //public function message
   function message(){

       //debug.apply(this,arguments)
       debug.apply(this, arguments);
       //if options.verbose >= 1
       if (options.verbose >= 1) {
           //console.log.apply(this,arguments)
           console.log.apply(this, arguments);
       };
   };
   exports.message=message;

   //public function extra
   function extra(){

       //debug.apply(this,arguments)
       debug.apply(this, arguments);
       //if options.verbose >= 2
       if (options.verbose >= 2) {
           //console.log.apply(this,arguments)
           console.log.apply(this, arguments);
       };
   };
   exports.extra=extra;


   //public function throwControled
   function throwControled(){
//Throws Error, but with a "controled" flag set,
//to differentiate from unexpected compiler errors

       var e = new Error(Array.prototype.slice.apply(arguments).join(" "));
       e.controled = true;
       //debug "Controled ERROR:", e.message
       debug("Controled ERROR:", e.message);
       //throw e
       throw e;
   };
   exports.throwControled=throwControled;
