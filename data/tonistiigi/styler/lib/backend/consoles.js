// Generated by CoffeeScript 1.7.1
(function() {
  var Backbone, Clients, Console, browseFiles, checkDir, fs, getDriveNames, getRoot, io, isAllowedIP, log, pathIsAllowed, _, _ref;

  fs = require("fs");

  _ = require("underscore")._;

  Backbone = require("backbone");

  Console = require("./console");

  Clients = require("./data").Clients;

  _ref = require("./utils"), pathIsAllowed = _ref.pathIsAllowed, getDriveNames = _ref.getDriveNames, isAllowedIP = _ref.isAllowedIP;

  log = require('./log');

  io = global.io;

  io.of("/console").on('connection', function(socket) {
    if (!isAllowedIP(global.allowed, socket.handshake.address.address)) {
      return socket.disconnect();
    }
    socket.on('checkDir', checkDir);
    socket.on('browseFiles', browseFiles);
    socket.on('getRoot', getRoot);
    Backbone.connector.addClient(socket);
    return socket.on('activate', function(projectId, clientId) {
      var _ref1;
      return (_ref1 = Console.getConsole(projectId)) != null ? _ref1.activateConsole(socket, clientId) : void 0;
    });
  });

  checkDir = function(clientId, url, path, stylusoutPath, cb) {
    var client;
    client = Clients.get(clientId);
    if (!client) {
      return;
    }
    if (!(path.length && pathIsAllowed(path))) {
      return cb({
        status: "no-directory"
      });
    }
    return fs.stat(path, function(err, stat) {
      var css, existsCSS, existsStylus, file, filename, filenames, files, fullPath, fullPathStylus, stylusout, stylusoutExists, type, _i, _len;
      if (err || !stat.isDirectory()) {
        return cb({
          status: "no-directory"
        });
      }
      css = client.get("css");
      filenames = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = css.length; _i < _len; _i++) {
          file = css[_i];
          if (0 === file.indexOf(url)) {
            _results.push(file.substr(url.length));
          }
        }
        return _results;
      })();
      files = {};
      type = "unknown";
      stylusout = false;
      stylusoutExists = fs.existsSync(stylusoutPath);
      for (_i = 0, _len = filenames.length; _i < _len; _i++) {
        filename = filenames[_i];
        fullPath = path + filename;
        fullPathStylus = fullPath.replace(/\.css$/i, ".styl");
        existsStylus = fs.existsSync(fullPathStylus);
        if (existsStylus) {
          type = "stylus";
          files[filename] = true;
          if (stylusoutExists && fs.existsSync(stylusoutPath + filename)) {
            stylusout = true;
          }
        } else {
          existsCSS = fs.existsSync(fullPath);
          if (existsCSS) {
            type = "css";
            files[filename] = true;
          } else {
            files[filename] = false;
          }
        }
      }
      return cb({
        status: "ok",
        type: type,
        files: files,
        stylusout: stylusout,
        stylusoutExists: stylusoutExists
      });
    });
  };

  browseFiles = function(path, cb) {
    var res;
    if (global.rootDir !== '/') {
      path = path.replace(/^\//, global.rootDir);
    }
    res = {
      dirs: [],
      files: []
    };
    if (!pathIsAllowed(path)) {
      return log.warning({
        path: path
      }, 'Browsing files not allowed for path.');
    }
    return fs.stat(path, function(err, stat) {
      if (err || !stat.isDirectory()) {
        lgo.warn({
          path: path,
          err: err
        }, 'Could not browse files inside directory.');
        return cb(res);
      }
      return fs.readdir(path, function(err, files) {
        var file, st, _i, _len;
        if (files) {
          for (_i = 0, _len = files.length; _i < _len; _i++) {
            file = files[_i];
            if (file[0] === '.') {
              continue;
            }
            try {
              st = fs.statSync(path + "/" + file);
            } catch (_error) {
              err = _error;
              continue;
            }
            if (st.isDirectory()) {
              res.dirs.push(file);
            }
            if (st.isFile() && file.match(/\.(css|styl|scss)$/i)) {
              res.files.push(file);
            }
          }
        }
        if (path !== '/' || !process.platform.match(/^win/i)) {
          return cb(res);
        } else {
          return getDriveNames(function(names) {
            res.drives = names;
            return cb(res);
          });
        }
      });
    });
  };

  getRoot = function(cb) {
    return cb(global.rootDir);
  };

}).call(this);
