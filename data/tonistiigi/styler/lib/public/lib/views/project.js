// Generated by CoffeeScript 1.7.1
(function() {
  define(function(require, exports, module) {
    var ClientListView, ProjectView;
    ClientListView = require('lib/views/clientlist');
    ProjectView = Backbone.View.extend({
      template: require('lib/templates/project_item'),
      events: {
        'click .btn.delete': 'delete',
        'click .btn.edit': 'edit',
        'click .expand': 'expand',
        'click .num-clients': 'expand',
        'click .btn.projectlaunch': 'open'
      },
      initialize: function() {
        this.model.on('change', this.render, this);
        this.model.on('remove', this.remove, this);
        this.model.on('clients:add', this.render, this);
        this.model.on('clients:remove', this.render, this);
        return this.clientsView = new ClientListView({
          project: this.model
        });
      },
      render: function() {
        var _ref;
        this.$el.html(this.template(_.extend(this.model.toJSON(), {
          isActive: this.model.isActive,
          clientCount: this.model.getClients().length
        })));
        if ((_ref = this.$('.clients')) != null) {
          _ref.append(this.clientsView.el);
        }
        return this;
      },
      open: function() {
        var clients, url;
        clients = this.model.getClients();
        url = clients.length ? clients[0].get('session_id') : this.model.id;
        return app.router.navigate('' + url, {
          trigger: true
        });
      },
      "delete": function() {
        if (confirm("Are you sure you wish to delete project " + (this.model.get('name')) + "?")) {
          _.each(this.model.getClients(), function(client) {
            return client.save({
              project: 0
            });
          });
          return this.model.destroy();
        }
      },
      edit: function() {
        return app.router.navigate('edit/' + this.model.id, {
          trigger: true
        });
      },
      expand: function() {
        return app.router.navigate('project/' + this.model.id, {
          trigger: true
        });
      }
    });
    return module.exports = ProjectView;
  });

}).call(this);
