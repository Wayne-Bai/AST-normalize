// Generated by CoffeeScript 1.7.1
(function() {
  define(function(require, exports, module) {
    var Completer, keys, node, stopEvent, style, ua, _ref;
    stopEvent = require('ace/lib/event').stopEvent;
    ua = require('ace/lib/useragent');
    keys = require('ace/lib/keys');
    _ref = require('lib/utils'), node = _ref.node, style = _ref.style;
    require('vendor/link!css/completer.css');
    Completer = Backbone.View.extend({
      className: 'completer',
      initialize: function() {
        _.bindAll(this, 'onKeyDown', 'onMouseWheel', 'onMouseDown');
        this.$el.append(this.previewElement = node('div', {
          "class": 'preview'
        }));
        this.$el.append(this.itemsElement = node('div', {
          "class": 'items'
        }));
        $(this.itemsElement).on('mousedown', this.onMouseDown);
        this.reverse = false;
        return this.disable(true);
      },
      activate: function(tab, completions, row, col) {
        var editor, editorPos, items, pxcoord, top;
        this.tab = tab;
        items = completions.items;
        if (!(items != null ? items.length : void 0)) {
          return this.disable();
        }
        items = _.uniq(items, false, function(i) {
          return i.value;
        });
        this.offset = items[0].offset != null ? items[0].offset : completions.offset;
        if (items.length > 100) {
          items = items.slice(0, 100);
        }
        editor = this.tab.get('editor').editor;
        editorPos = editor.container.getBoundingClientRect();
        pxcoord = editor.renderer.textToScreenCoordinates(row, col - this.offset);
        top = pxcoord.pageY - editorPos.top;
        this.reverse = editorPos.height - top < 140;
        this.$el.toggleClass('is-reverse', this.reverse).css(this.reverse ? {
          left: pxcoord.pageX - editorPos.left - 2,
          top: 'auto',
          bottom: editorPos.height - top
        } : {
          left: pxcoord.pageX - editorPos.left - 2,
          top: top + editor.renderer.lineHeight,
          bottom: 'auto'
        });
        if (!this.active) {
          this.$el.show();
          window.addEventListener('keydown', this.onKeyDown, true);
          window.addEventListener('mousewheel', this.onMouseWheel, true);
        }
        this.active = true;
        this.keyDelta = 0;
        if (this.reverse) {
          items = items.reverse();
        }
        return this.setItems(items, this.offset);
      },
      disable: function(force) {
        if (force == null) {
          force = false;
        }
        if (this.active || force) {
          this.$el.hide();
          this.active = false;
          this.selectedValue = '';
          window.removeEventListener('keydown', this.onKeyDown, true);
          return window.removeEventListener('mousewheel', this.onMouseWheel, true);
        }
      },
      setItems: function(items) {
        var editor, el, fragment, i, item, offset;
        $(this.itemsElement).empty();
        this.selectedIndex = -1;
        this.items = [];
        fragment = document.createDocumentFragment();
        this.items = (function() {
          var _i, _len, _results;
          _results = [];
          for (i = _i = 0, _len = items.length; _i < _len; i = ++_i) {
            item = items[i];
            offset = item.offset != null ? item.offset : this.offset;
            el = node('div', {
              "class": 'item'
            }, node('span', {
              "class": 'general'
            }, item.value.substr(0, offset)), node('span', {
              "class": 'unique'
            }, item.value.substr(offset)));
            if (item.color) {
              $(el).addClass('color').css({
                'border-color': item.value
              });
            }
            _.extend(item, {
              el: el,
              i: i,
              isSame: item.value.length <= offset
            });
            fragment.appendChild(el);
            _results.push(item);
          }
          return _results;
        }).call(this);
        if (this.items.length === 1 && this.items[0].isSame) {
          return this.disable();
        }
        $(this.itemsElement).append(fragment);
        editor = this.tab.get('editor').editor;
        this.$el.css({
          height: editor.renderer.lineHeight * Math.min(items.length, 6)
        });
        item = _.find(items, function(i) {
          return i.value === this.selectedValue;
        });
        this.select(item ? item.i : this.reverse ? items.length - 1 : 0);
        if (!this.items.length) {
          return this.disable();
        }
      },
      onMouseDown: function(e) {
        var item, itemEl;
        itemEl = $(e.target).closest('.item')[0];
        item = ((function() {
          var _i, _len, _ref1, _results;
          _ref1 = this.items;
          _results = [];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            item = _ref1[_i];
            if (item.el === itemEl) {
              _results.push(item);
            }
          }
          return _results;
        }).call(this))[0];
        if (item) {
          return this.completeItem(item);
        }
      },
      select: function(index) {
        var item, _base;
        if (index === this.selectedIndex) {
          return;
        }
        if (this.selectedIndex !== -1) {
          item = this.items[this.selectedIndex];
          $(item.el).removeClass('selected');
        }
        this.selectedIndex = index;
        if (item = this.items[this.selectedIndex]) {
          $(item.el).addClass('selected');
          this.selectedValue = item.value;
          if (item.preview) {
            this.showPreview(item);
          } else if (this.isPreview) {
            this.hidePreview();
          }
          if (item.el.scrollIntoViewIfNeeded) {
            return item.el.scrollIntoViewIfNeeded(false);
          } else {
            return typeof (_base = item.el).scrollIntoView === "function" ? _base.scrollIntoView(false) : void 0;
          }
        }
      },
      completeItem: function(item) {
        if (item) {
          if (item.offset == null) {
            item.offset = this.offset;
          }
          this.tab.complete(item);
          return this.disable();
        }
      },
      showPreview: function(item) {
        var url;
        this.isPreview = true;
        url = item.preview.split('/').slice(0, -1).join('/') + '/' + item.value;
        return require(['lib/views/ui/imagepreview'], (function(_this) {
          return function(ImagePreview) {
            return ImagePreview.getPreviewElement(url, 120, 75, function(err, el) {
              if (err) {
                return;
              }
              if (_this.isPreview) {
                return $(_this.previewElement).empty().append(el).show();
              }
            });
          };
        })(this));
      },
      hidePreview: function() {
        this.isPreview = false;
        return $(this.previewElement).hide().empty();
      },
      onMouseWheel: function() {
        return this.disable();
      },
      moveSelection: function(delta, e) {
        var directionDown, keyDelta;
        directionDown = delta > 0;
        keyDelta = directionDown ? -1 : 1;
        if ((directionDown ? this.selectedIndex < this.items.length - 1 : this.selectedIndex > 0)) {
          this.select(Math.max(0, Math.min(this.selectedIndex + delta, this.items.length - 1)));
        } else if (this.keyDelta !== keyDelta) {
          this.keyDelta = keyDelta;
        } else {
          this.disable();
        }
        return stopEvent(e);
      },
      onKeyDown: function(e) {
        var i, item, matches, offset, offset_, part, _i, _len, _ref1;
        if (e.shiftKey) {
          return;
        }
        switch (keys[e.keyCode]) {
          case 'Down':
            return this.moveSelection(1, e);
          case 'Up':
            return this.moveSelection(-1, e);
          case 'PageDown':
            return this.moveSelection(10, e);
          case 'PageUp':
            return this.moveSelection(-10, e);
          case 'End':
            return this.moveSelection(1e3, e);
          case 'Home':
            return this.moveSelection(-1e3, e);
          case 'Return':
            if (item = this.items[this.selectedIndex]) {
              stopEvent(e);
              if (ua.isMozilla && item.exec) {
                return _.defer((function(_this) {
                  return function() {
                    return _this.completeItem(item);
                  };
                })(this));
              } else {
                return this.completeItem(item);
              }
            }
            break;
          case 'Esc':
            this.disable();
            return stopEvent(e);
          case 'Tab':
            if (item = this.items[this.selectedIndex]) {
              if (this.items.length === 1) {
                this.completeItem(item);
              } else {
                offset = offset_ = item.offset ? item.offset : this.offset;
                while (true) {
                  offset_++;
                  part = this.items[this.selectedIndex].value.substr(0, offset_);
                  matches = true;
                  _ref1 = this.items;
                  for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                    i = _ref1[_i];
                    if (i.length < offset || part !== i.value.substr(0, offset_)) {
                      matches = false;
                      break;
                    }
                  }
                  if (!matches) {
                    break;
                  }
                }
                offset_--;
                if (offset_ > offset) {
                  this.tab.complete({
                    value: this.items[this.selectedIndex].value.substr(0, offset_),
                    offset: offset
                  });
                }
              }
            }
            return stopEvent(e);
        }
      }
    });
    return module.exports = Completer;
  });

}).call(this);
