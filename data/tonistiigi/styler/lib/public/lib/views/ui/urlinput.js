// Generated by CoffeeScript 1.7.1
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define(function(require, exports, module) {
    var URLInput, URLInputList, URLInputView, getStyle, node, style, ua, _ref;
    _ref = require('lib/utils'), node = _ref.node, style = _ref.style, getStyle = _ref.getStyle;
    ua = require('ace/lib/useragent');
    URLInput = Backbone.Model.extend({
      defaults: {
        url: '',
        path: '',
        type: 'css',
        newfiles: true,
        stylusout: ''
      }
    });
    URLInputList = Backbone.Collection.extend({
      model: URLInput
    });
    URLInputView = Backbone.View.extend({
      tagName: 'form',
      className: 'item',
      template: require('lib/templates/url_input'),
      events: {
        'click .btn.remove': 'onRemoveClick',
        'click .btn.browse-source': 'onBrowseClick',
        'click .btn.browse-stylus-out': 'onBrowseStylusOutClick',
        'click .btn.edit': 'onEditClick',
        'click .btn.convert': 'onConvertClick',
        'change input.url': 'onURLChange',
        'change input.path': 'onPathChange',
        'change input.type': 'onTypeChange',
        'change input.missing-files': 'onMissingFilesChange',
        'change input.stylus-out': 'onStylusOutChange'
      },
      initialize: function() {
        _.bindAll(this, 'onURLFocus', 'onURLBlur', 'startDirectoryComplete', 'onDirectoryKeyDown', 'onDirectoryKeyUp', 'endDirectoryComplete', 'onPathChange');
        this.model.bind('remove', this.onRemove, this);
        $(this.el).html(this.template({
          id: this.model.cid
        }));
        this.$('input.url').on('focus', this.onURLFocus).on('blur', this.onURLBlur);
        this.$('input.path').on('focus', this.startDirectoryComplete).on('blur', this.onPathChange);
        this.$('input.stylus-out').on('focus', this.startDirectoryComplete);
        this._completionCache = {};
        this.updateFileList();
        return this.validate((function(_this) {
          return function() {
            return _this.render();
          };
        })(this));
      },
      render: function() {
        var file, filename, fragment, isNoURLError, item, noFilesFound, numMatches, status, statusOK, _i, _len, _ref1, _ref10, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
        this.client = this.model.get('client');
        this.$('.url').val(this.model.get('url'));
        this.$('.path').val(this.fromAbsolute(this.model.get('path')));
        this.$('.stylus-out').val(this.fromAbsolute(this.model.get('stylusout')));
        this.$('.type[value=css]')[0].checked = this.model.get('type') === 'css';
        this.$('.type[value=stylus]')[0].checked = this.model.get('type') === 'stylus';
        this.$('.missing-files[value=ignore]')[0].checked = !this.model.get('newfiles');
        this.$('.missing-files[value=create]')[0].checked = !!this.model.get('newfiles');
        isNoURLError = (_ref1 = this.status) === 'url_format' || _ref1 === 'url_empty';
        this.$('.input-row.url').toggleClass('has-error', isNoURLError);
        this.$('.locations-info .head-note').toggleClass('no-url', isNoURLError);
        if (this.status === 'url_empty') {
          this.$('.input-row.url .note').html('URL field can\'t be empty.');
        } else if (this.status === 'url_format') {
          this.$('.input-row.url .note').html('This URL is in wrong format');
        }
        fragment = document.createDocumentFragment();
        _ref2 = this.filenames;
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          filename = _ref2[_i];
          fragment.appendChild(item = node('div', {
            "class": 'searched-file-item'
          }, filename));
          status = (_ref3 = this.scan) != null ? (_ref4 = _ref3.files) != null ? _ref4[filename] : void 0 : void 0;
          if (status != null) {
            $(item).addClass((status ? 'found' : 'missing'));
          }
        }
        this.$('.file-list').empty().append(fragment);
        noFilesFound = !isNoURLError && !this.filenames.length;
        this.$('.input-row.url').toggleClass('has-warning', this.client && noFilesFound && (this.status != null));
        this.$('.locations-info .head-note').toggleClass('no-files', this.client && noFilesFound).toggleClass('has-files', this.client && !isNoURLError && this.filenames.length);
        this.$('.input-row.path').toggleClass('has-error', this.status === 'path_error');
        statusOK = this.status === 'ok';
        numMatches = ((function() {
          var _j, _len1, _ref5, _ref6, _ref7, _results;
          _ref5 = this.filenames;
          _results = [];
          for (_j = 0, _len1 = _ref5.length; _j < _len1; _j++) {
            file = _ref5[_j];
            if (((_ref6 = this.scan) != null ? (_ref7 = _ref6.files) != null ? _ref7[file] : void 0 : void 0) === true) {
              _results.push(true);
            }
          }
          return _results;
        }).call(this)).length;
        this.$('.locations-info .foot-note').toggleClass('no-matches', this.client && statusOK && !numMatches).toggleClass('all-matches', this.client && statusOK && numMatches && numMatches === this.filenames.length).toggleClass('some-matches', this.client && statusOK && numMatches > 0 && numMatches < this.filenames.length);
        if (statusOK && numMatches > 0 && numMatches < this.filenames.length) {
          this.$('.locations-info .some-matches .num-matches').text(numMatches);
          this.$('.locations-info .some-matches .num-files').html(this.filenames.length);
        }
        this.$('.input-row.path').toggleClass('has-warning', this.client && statusOK && !numMatches);
        this.$('.input-row.type').toggleClass('visible', statusOK);
        this.$('.input-row.missing-files').toggleClass('visible', statusOK && this.model.get('type') === 'css');
        this.$('.input-row.stylus-out').toggleClass('visible', statusOK && this.model.get('type') === 'stylus');
        if (((_ref5 = this.scan) != null ? _ref5.type : void 0) === 'css') {
          this.$('input.type[value=stylus]')[0].setAttribute('disabled', 'disabled');
        } else {
          this.$('input.type[value=stylus]')[0].removeAttribute('disabled');
        }
        if (((_ref6 = this.scan) != null ? _ref6.type : void 0) === 'stylus') {
          this.$('input.type[value=css]')[0].setAttribute('disabled', 'disabled');
        } else {
          this.$('input.type[value=css]')[0].removeAttribute('disabled');
        }
        this.$('.stylus-switch-hint').toggleClass('visible', statusOK && this.model.get('type') === 'css' && ((_ref7 = this.scan) != null ? _ref7.type : void 0) === 'css');
        this.$('.input-row.stylus-out').toggleClass('has-warning', this.client && statusOK && !((_ref8 = this.scan) != null ? _ref8.stylusout : void 0) && ((_ref9 = this.scan) != null ? _ref9.stylusoutExists : void 0));
        this.$('.input-row.stylus-out').toggleClass('has-error', this.client && statusOK && !((_ref10 = this.scan) != null ? _ref10.stylusoutExists : void 0));
        return this;
      },
      updateFileList: function() {
        var client, css, file, url;
        if (!(client = this.model.get('client'))) {
          return this.filenames = [];
        }
        css = client.get('css');
        url = this.model.get('url');
        return this.filenames = url.length && url.match(/^[a-z]+:\/\/\/?.+$/) ? ((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = css.length; _i < _len; _i++) {
            file = css[_i];
            if (0 === file.indexOf(url)) {
              _results.push(file.substr(url.length));
            }
          }
          return _results;
        })()).sort() : [];
      },
      onURLChange: function() {
        var url;
        this.model.unset('novalidate');
        url = this.$('input.url').val();
        if (url.length && url[url.length - 1] !== '/') {
          url += '/';
        }
        this.model.set({
          url: url
        });
        this.updateFileList();
        return this.validate((function(_this) {
          return function() {
            _this.render();
            return _this.trigger('validate');
          };
        })(this));
      },
      onPathChange: function() {
        var path;
        if (this._fakeBlur) {
          return;
        }
        path = this.toAbsolute(this.$('input.path').val());
        if (path.length && path[path.length - 1] !== '/') {
          path += '/';
        }
        this.model.set({
          path: path,
          stylusout: path
        });
        return this.validate((function(_this) {
          return function() {
            _this.render();
            return _this.trigger('validate');
          };
        })(this));
      },
      onURLFocus: function() {
        return this.$('.input-row.url').addClass('editing');
      },
      onURLBlur: function() {
        return this.$('.input-row.url').removeClass('editing');
      },
      onEditClick: function() {
        return this.$('input.url').focus();
      },
      onBrowseClick: function() {
        return this.browse(this.model.get('path'), (function(_this) {
          return function(path) {
            _this.$('input.path').val(path);
            return _this.onPathChange();
          };
        })(this));
      },
      onBrowseStylusOutClick: function() {
        return this.browse(this.model.get('stylusout'), (function(_this) {
          return function(path) {
            _this.$('input.stylus-out').val(path);
            return _this.onStylusOutChange();
          };
        })(this));
      },
      onTypeChange: function() {
        this.model.set({
          type: this.$('input.type[value=css]')[0].checked ? 'css' : 'stylus'
        });
        return this.render();
      },
      onConvertClick: function() {
        return alert('Sorry. Not implemented yet. You can use "stylus -C" to convert files manually.');
      },
      onMissingFilesChange: function() {
        var value;
        return value = this.$('input.missing-files').val();
      },
      onStylusOutChange: function() {
        var path;
        path = this.toAbsolute(this.$('input.stylus-out').val());
        if (path.length && path[path.length - 1] !== '/') {
          path += '/';
        }
        this.model.set({
          stylusout: path
        });
        return this.validate((function(_this) {
          return function() {
            _this.render();
            return _this.trigger('validate');
          };
        })(this));
      },
      validate: function(cb) {
        var client, path, url;
        if (this.model.get('novalidate')) {
          return cb(false);
        }
        this.status = null;
        url = this.model.get('url');
        if (!url.length) {
          this.status = 'url_empty';
          return cb(true);
        }
        if (!url.match(/^[a-z]+:\/\/.+\/.*$/)) {
          this.status = 'url_format';
          return cb(true);
        }
        path = this.model.get('path');
        if (!path.length) {
          this.status = 'path_empty';
          return cb(true);
        }
        if (!(client = this.model.get('client'))) {
          this.status = 'ok';
          return cb(false);
        }
        return app.socket.emit('checkDir', client.id, this.model.get('url'), this.model.get('path'), this.model.get('stylusout'), (function(_this) {
          return function(results) {
            var _ref1;
            if (results.status === 'no-directory') {
              _this.status = 'path_error';
              return cb(true);
            }
            if (results.status === 'ok') {
              _this.scan = results;
              _this.status = 'ok';
              if ((_ref1 = results.type) === 'css' || _ref1 === 'stylus') {
                _this.model.set({
                  type: results.type
                });
              }
              return cb(false);
            }
          };
        })(this));
      },
      toAbsolute: function(path) {
        return path.replace(/^\//, app.root);
      },
      fromAbsolute: function(path) {
        if (0 === path.toLowerCase().indexOf(app.root.toLowerCase())) {
          path = '/' + path.substr(app.root.length);
        }
        return path;
      },
      onRemove: function() {
        return $(this.el).remove();
      },
      onRemoveClick: function() {
        return this.model.destroy();
      },
      browseFiles: function(path, cb) {
        return app.socket.emit('browseFiles', path, cb);
      },
      browse: function(current, cb) {
        var win;
        win = window.open('', 'dirpicker', 'width=680,height=380,resizable=no,scrollbars=no');
        win.document.body.innerHTML = '';
        return require(['lib/views/ui/dirpicker'], (function(_this) {
          return function(DirPicker) {
            var dp, link, _i, _j, _len, _len1, _ref1, _ref2;
            _ref1 = document.getElementsByTagName('link');
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              link = _ref1[_i];
              win.document.body.appendChild(node('link', {
                rel: link.getAttribute('rel'),
                type: link.getAttribute('type'),
                href: window.location.protocol + '//' + window.location.host + link.getAttribute('href')
              }));
            }
            _ref2 = document.querySelectorAll('style[data-url]');
            for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
              link = _ref2[_j];
              win.document.body.appendChild(node('link', {
                rel: 'stylesheet',
                type: 'text/css',
                href: link.getAttribute('data-url')
              }));
            }
            win.document.title = "Match source for " + (_this.model.get('url'));
            dp = new DirPicker({
              provider: _this.browseFiles,
              path: _this.fromAbsolute(current)
            });
            dp.bind('select', function(path) {
              return cb(path);
            });
            dp.bind('close', function() {
              return win.close();
            });
            return $(win.document.body).css({
              overflow: 'hidden'
            }).append(dp.render().el);
          };
        })(this));
      },
      startDirectoryComplete: function(e) {
        var input;
        if (this._fakeBlur) {
          return;
        }
        input = e.target;
        $(input).on('keydown', this.onDirectoryKeyDown).on('blur', this.endDirectoryComplete);
        return _.delay((function(_this) {
          return function() {
            return _this.onDirectoryKeyUp(e);
          };
        })(this));
      },
      onDirectoryKeyUp: function(e) {
        var complete, input, last, parts, path, selectionEnd, selectionStart, value;
        input = e.target;
        if (input.selectionStart !== input.selectionEnd || input.selectionStart !== input.value.length) {
          return this.setCompletion(input, '');
        }
        if (!input.value.length) {
          return this.setCompletion(input, '/');
        }
        if (__indexOf.call(input.value, '/') < 0) {
          return this.setCompletion(input, '');
        }
        parts = input.value.split('/');
        path = _.initial(parts).join('/') + '/';
        last = _.last(parts);
        value = input.value;
        selectionStart = input.selectionStart;
        selectionEnd = input.selectionEnd;
        complete = (function(_this) {
          return function() {
            var dirs;
            if (!(input.value === value && input.selectionStart === selectionStart && input.selectionEnd === selectionEnd)) {
              return;
            }
            dirs = _this._completionCache[path];
            _this.completionOffset = last.length;
            _this.completionMatches = _.filter(dirs, function(dirname) {
              return 0 === dirname.indexOf(last);
            });
            _this.completionIndex = 0;
            _.each(_this.completionMatches, function(item, index) {
              if (item.substr(last.length) + '/' === input._completion) {
                return _this.completionIndex = index;
              }
            });
            return _this.setCompletion(input);
          };
        })(this);
        if (this._completionCache[path]) {
          return complete();
        } else {
          return this.cacheCompletion(path, complete);
        }
      },
      cacheCompletion: function(path, cb) {
        return this.browseFiles(path, (function(_this) {
          return function(_arg) {
            var dirs;
            dirs = _arg.dirs;
            _this._completionCache[path] = dirs;
            return cb();
          };
        })(this));
      },
      onDirectoryKeyDown: function(e) {
        var input, _ref1, _ref2, _ref3;
        input = e.target;
        switch (e.keyCode) {
          case 38:
            if (((_ref1 = this.completionMatches) != null ? _ref1.length : void 0) > 1) {
              this.completionIndex--;
              if (this.completionIndex < 0) {
                this.completionIndex = this.completionMatches.length - 1;
              }
              this.setCompletion(input);
            }
            e.stopPropagation();
            e.preventDefault();
            break;
          case 40:
            if (((_ref2 = this.completionMatches) != null ? _ref2.length : void 0) > 1) {
              this.completionIndex++;
              if (this.completionIndex >= this.completionMatches.length) {
                this.completionIndex = 0;
              }
              this.setCompletion(input);
            }
            e.stopPropagation();
            e.preventDefault();
            break;
          case 9:
          case 13:
            if (!((_ref3 = input._completion) != null ? _ref3.length : void 0)) {
              return;
            }
            input.value += input._completion;
            input.setSelectionRange(input.value.length, input.value.length);
            input.scrollLeft = 1e6;
            input._completion = '';
            e.stopPropagation();
            e.preventDefault();
        }
        return _.delay((function(_this) {
          return function() {
            return _this.onDirectoryKeyUp(e);
          };
        })(this));
      },
      setCompletion: function(input, value) {
        var $input, completionPfx, completionSfx, container, maxWidth, pfxWidth, sfxWidth;
        if (value == null) {
          value = this.completionMatches[this.completionIndex] ? this.completionMatches[this.completionIndex].substr(this.completionOffset) + '/' : '';
        }
        $input = $(input);
        container = $input.closest('.input-container');
        completionPfx = $(container).find('.completion-pfx');
        completionSfx = $(container).find('.completion-sfx');
        completionPfx.html(input.value.replace(/\s/g, '&nbsp;'));
        completionSfx.html(value.replace(/\s/g, '&nbsp;'));
        pfxWidth = parseInt(completionPfx.css('width'));
        sfxWidth = parseInt(completionSfx.css('width'));
        maxWidth = 267;
        if (pfxWidth + sfxWidth < maxWidth) {
          completionSfx.css({
            left: pfxWidth
          });
          $input.css({
            paddingRight: 2
          });
        } else {
          completionSfx.css({
            left: maxWidth - sfxWidth
          });
          $input.css({
            paddingRight: sfxWidth + 2
          });
        }
        $input.css({
          display: $input.css('display') === 'inline-block' ? 'block' : 'inline-block'
        });
        if (ua.isGecko) {
          this._fakeBlur = true;
          $input.blur().focus();
          this._fakeBlur = null;
        }
        input._completion = value;
        if (!value.length) {
          return this.completionMatches = null;
        }
      },
      endDirectoryComplete: function(e) {
        var input;
        if (this._fakeBlur) {
          return;
        }
        input = e.target;
        this.setCompletion(input, '');
        return $(input).off('keydown', this.onDirectoryKeyDown).off('blur', this.endDirectoryComplete);
      }
    });
    return module.exports = {
      URLInput: URLInput,
      URLInputList: URLInputList,
      URLInputView: URLInputView
    };
  });

}).call(this);
