//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

DataHub_get_version_args = function(args) {
};
DataHub_get_version_args.prototype = {};
DataHub_get_version_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataHub_get_version_args.prototype.write = function(output) {
  output.writeStructBegin('DataHub_get_version_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataHub_get_version_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
DataHub_get_version_result.prototype = {};
DataHub_get_version_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.DOUBLE) {
        this.success = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataHub_get_version_result.prototype.write = function(output) {
  output.writeStructBegin('DataHub_get_version_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.DOUBLE, 0);
    output.writeDouble(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataHub_open_connection_args = function(args) {
  this.con_params = null;
  if (args) {
    if (args.con_params !== undefined) {
      this.con_params = args.con_params;
    }
  }
};
DataHub_open_connection_args.prototype = {};
DataHub_open_connection_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.con_params = new ConnectionParams();
        this.con_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataHub_open_connection_args.prototype.write = function(output) {
  output.writeStructBegin('DataHub_open_connection_args');
  if (this.con_params !== null && this.con_params !== undefined) {
    output.writeFieldBegin('con_params', Thrift.Type.STRUCT, 1);
    this.con_params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataHub_open_connection_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof DBException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
DataHub_open_connection_result.prototype = {};
DataHub_open_connection_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Connection();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new DBException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataHub_open_connection_result.prototype.write = function(output) {
  output.writeStructBegin('DataHub_open_connection_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataHub_create_repo_args = function(args) {
  this.con = null;
  this.repo_name = null;
  if (args) {
    if (args.con !== undefined) {
      this.con = args.con;
    }
    if (args.repo_name !== undefined) {
      this.repo_name = args.repo_name;
    }
  }
};
DataHub_create_repo_args.prototype = {};
DataHub_create_repo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.con = new Connection();
        this.con.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.repo_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataHub_create_repo_args.prototype.write = function(output) {
  output.writeStructBegin('DataHub_create_repo_args');
  if (this.con !== null && this.con !== undefined) {
    output.writeFieldBegin('con', Thrift.Type.STRUCT, 1);
    this.con.write(output);
    output.writeFieldEnd();
  }
  if (this.repo_name !== null && this.repo_name !== undefined) {
    output.writeFieldBegin('repo_name', Thrift.Type.STRING, 2);
    output.writeString(this.repo_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataHub_create_repo_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof DBException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
DataHub_create_repo_result.prototype = {};
DataHub_create_repo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultSet();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new DBException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataHub_create_repo_result.prototype.write = function(output) {
  output.writeStructBegin('DataHub_create_repo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataHub_list_repos_args = function(args) {
  this.con = null;
  if (args) {
    if (args.con !== undefined) {
      this.con = args.con;
    }
  }
};
DataHub_list_repos_args.prototype = {};
DataHub_list_repos_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.con = new Connection();
        this.con.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataHub_list_repos_args.prototype.write = function(output) {
  output.writeStructBegin('DataHub_list_repos_args');
  if (this.con !== null && this.con !== undefined) {
    output.writeFieldBegin('con', Thrift.Type.STRUCT, 1);
    this.con.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataHub_list_repos_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof DBException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
DataHub_list_repos_result.prototype = {};
DataHub_list_repos_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultSet();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new DBException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataHub_list_repos_result.prototype.write = function(output) {
  output.writeStructBegin('DataHub_list_repos_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataHub_delete_repo_args = function(args) {
  this.con = null;
  this.repo_name = null;
  this.force_if_non_empty = null;
  if (args) {
    if (args.con !== undefined) {
      this.con = args.con;
    }
    if (args.repo_name !== undefined) {
      this.repo_name = args.repo_name;
    }
    if (args.force_if_non_empty !== undefined) {
      this.force_if_non_empty = args.force_if_non_empty;
    }
  }
};
DataHub_delete_repo_args.prototype = {};
DataHub_delete_repo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.con = new Connection();
        this.con.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.repo_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.force_if_non_empty = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataHub_delete_repo_args.prototype.write = function(output) {
  output.writeStructBegin('DataHub_delete_repo_args');
  if (this.con !== null && this.con !== undefined) {
    output.writeFieldBegin('con', Thrift.Type.STRUCT, 1);
    this.con.write(output);
    output.writeFieldEnd();
  }
  if (this.repo_name !== null && this.repo_name !== undefined) {
    output.writeFieldBegin('repo_name', Thrift.Type.STRING, 2);
    output.writeString(this.repo_name);
    output.writeFieldEnd();
  }
  if (this.force_if_non_empty !== null && this.force_if_non_empty !== undefined) {
    output.writeFieldBegin('force_if_non_empty', Thrift.Type.BOOL, 3);
    output.writeBool(this.force_if_non_empty);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataHub_delete_repo_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof DBException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
DataHub_delete_repo_result.prototype = {};
DataHub_delete_repo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultSet();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new DBException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataHub_delete_repo_result.prototype.write = function(output) {
  output.writeStructBegin('DataHub_delete_repo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataHub_list_tables_args = function(args) {
  this.con = null;
  this.repo_name = null;
  if (args) {
    if (args.con !== undefined) {
      this.con = args.con;
    }
    if (args.repo_name !== undefined) {
      this.repo_name = args.repo_name;
    }
  }
};
DataHub_list_tables_args.prototype = {};
DataHub_list_tables_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.con = new Connection();
        this.con.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.repo_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataHub_list_tables_args.prototype.write = function(output) {
  output.writeStructBegin('DataHub_list_tables_args');
  if (this.con !== null && this.con !== undefined) {
    output.writeFieldBegin('con', Thrift.Type.STRUCT, 1);
    this.con.write(output);
    output.writeFieldEnd();
  }
  if (this.repo_name !== null && this.repo_name !== undefined) {
    output.writeFieldBegin('repo_name', Thrift.Type.STRING, 2);
    output.writeString(this.repo_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataHub_list_tables_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof DBException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
DataHub_list_tables_result.prototype = {};
DataHub_list_tables_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultSet();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new DBException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataHub_list_tables_result.prototype.write = function(output) {
  output.writeStructBegin('DataHub_list_tables_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataHub_get_schema_args = function(args) {
  this.con = null;
  this.table_name = null;
  if (args) {
    if (args.con !== undefined) {
      this.con = args.con;
    }
    if (args.table_name !== undefined) {
      this.table_name = args.table_name;
    }
  }
};
DataHub_get_schema_args.prototype = {};
DataHub_get_schema_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.con = new Connection();
        this.con.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataHub_get_schema_args.prototype.write = function(output) {
  output.writeStructBegin('DataHub_get_schema_args');
  if (this.con !== null && this.con !== undefined) {
    output.writeFieldBegin('con', Thrift.Type.STRUCT, 1);
    this.con.write(output);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataHub_get_schema_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof DBException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
DataHub_get_schema_result.prototype = {};
DataHub_get_schema_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultSet();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new DBException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataHub_get_schema_result.prototype.write = function(output) {
  output.writeStructBegin('DataHub_get_schema_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataHub_execute_sql_args = function(args) {
  this.con = null;
  this.query = null;
  this.query_params = null;
  if (args) {
    if (args.con !== undefined) {
      this.con = args.con;
    }
    if (args.query !== undefined) {
      this.query = args.query;
    }
    if (args.query_params !== undefined) {
      this.query_params = args.query_params;
    }
  }
};
DataHub_execute_sql_args.prototype = {};
DataHub_execute_sql_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.con = new Connection();
        this.con.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.query_params = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = input.readBinary().value;
          this.query_params.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataHub_execute_sql_args.prototype.write = function(output) {
  output.writeStructBegin('DataHub_execute_sql_args');
  if (this.con !== null && this.con !== undefined) {
    output.writeFieldBegin('con', Thrift.Type.STRUCT, 1);
    this.con.write(output);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 2);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  if (this.query_params !== null && this.query_params !== undefined) {
    output.writeFieldBegin('query_params', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.query_params.length);
    for (var iter39 in this.query_params)
    {
      if (this.query_params.hasOwnProperty(iter39))
      {
        iter39 = this.query_params[iter39];
        output.writeBinary(iter39);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataHub_execute_sql_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof DBException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
DataHub_execute_sql_result.prototype = {};
DataHub_execute_sql_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ResultSet();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new DBException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataHub_execute_sql_result.prototype.write = function(output) {
  output.writeStructBegin('DataHub_execute_sql_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataHub_close_connection_args = function(args) {
  this.con = null;
  if (args) {
    if (args.con !== undefined) {
      this.con = args.con;
    }
  }
};
DataHub_close_connection_args.prototype = {};
DataHub_close_connection_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.con = new Connection();
        this.con.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataHub_close_connection_args.prototype.write = function(output) {
  output.writeStructBegin('DataHub_close_connection_args');
  if (this.con !== null && this.con !== undefined) {
    output.writeFieldBegin('con', Thrift.Type.STRUCT, 1);
    this.con.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataHub_close_connection_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof DBException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
DataHub_close_connection_result.prototype = {};
DataHub_close_connection_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new DBException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataHub_close_connection_result.prototype.write = function(output) {
  output.writeStructBegin('DataHub_close_connection_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataHubClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
DataHubClient.prototype = {};
DataHubClient.prototype.get_version = function(callback) {
  this.send_get_version(callback); 
  if (!callback) {
    return this.recv_get_version();
  }
};

DataHubClient.prototype.send_get_version = function(callback) {
  this.output.writeMessageBegin('get_version', Thrift.MessageType.CALL, this.seqid);
  var args = new DataHub_get_version_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      if (this.readyState == 4 && this.status == 200) {
        self.output.getTransport().setRecvBuffer(this.responseText);
        var result = null;
        try {
          result = self.recv_get_version();
        } catch (e) {
          result = e;
        }
        callback(result);
      }
    });
  } else {
    return this.output.getTransport().flush();
  }
};

DataHubClient.prototype.recv_get_version = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DataHub_get_version_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'get_version failed: unknown result';
};
DataHubClient.prototype.open_connection = function(con_params, callback) {
  this.send_open_connection(con_params, callback); 
  if (!callback) {
    return this.recv_open_connection();
  }
};

DataHubClient.prototype.send_open_connection = function(con_params, callback) {
  this.output.writeMessageBegin('open_connection', Thrift.MessageType.CALL, this.seqid);
  var args = new DataHub_open_connection_args();
  args.con_params = con_params;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      if (this.readyState == 4 && this.status == 200) {
        self.output.getTransport().setRecvBuffer(this.responseText);
        var result = null;
        try {
          result = self.recv_open_connection();
        } catch (e) {
          result = e;
        }
        callback(result);
      }
    });
  } else {
    return this.output.getTransport().flush();
  }
};

DataHubClient.prototype.recv_open_connection = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DataHub_open_connection_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'open_connection failed: unknown result';
};
DataHubClient.prototype.create_repo = function(con, repo_name, callback) {
  this.send_create_repo(con, repo_name, callback); 
  if (!callback) {
    return this.recv_create_repo();
  }
};

DataHubClient.prototype.send_create_repo = function(con, repo_name, callback) {
  this.output.writeMessageBegin('create_repo', Thrift.MessageType.CALL, this.seqid);
  var args = new DataHub_create_repo_args();
  args.con = con;
  args.repo_name = repo_name;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      if (this.readyState == 4 && this.status == 200) {
        self.output.getTransport().setRecvBuffer(this.responseText);
        var result = null;
        try {
          result = self.recv_create_repo();
        } catch (e) {
          result = e;
        }
        callback(result);
      }
    });
  } else {
    return this.output.getTransport().flush();
  }
};

DataHubClient.prototype.recv_create_repo = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DataHub_create_repo_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'create_repo failed: unknown result';
};
DataHubClient.prototype.list_repos = function(con, callback) {
  this.send_list_repos(con, callback); 
  if (!callback) {
    return this.recv_list_repos();
  }
};

DataHubClient.prototype.send_list_repos = function(con, callback) {
  this.output.writeMessageBegin('list_repos', Thrift.MessageType.CALL, this.seqid);
  var args = new DataHub_list_repos_args();
  args.con = con;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      if (this.readyState == 4 && this.status == 200) {
        self.output.getTransport().setRecvBuffer(this.responseText);
        var result = null;
        try {
          result = self.recv_list_repos();
        } catch (e) {
          result = e;
        }
        callback(result);
      }
    });
  } else {
    return this.output.getTransport().flush();
  }
};

DataHubClient.prototype.recv_list_repos = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DataHub_list_repos_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'list_repos failed: unknown result';
};
DataHubClient.prototype.delete_repo = function(con, repo_name, force_if_non_empty, callback) {
  this.send_delete_repo(con, repo_name, force_if_non_empty, callback); 
  if (!callback) {
    return this.recv_delete_repo();
  }
};

DataHubClient.prototype.send_delete_repo = function(con, repo_name, force_if_non_empty, callback) {
  this.output.writeMessageBegin('delete_repo', Thrift.MessageType.CALL, this.seqid);
  var args = new DataHub_delete_repo_args();
  args.con = con;
  args.repo_name = repo_name;
  args.force_if_non_empty = force_if_non_empty;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      if (this.readyState == 4 && this.status == 200) {
        self.output.getTransport().setRecvBuffer(this.responseText);
        var result = null;
        try {
          result = self.recv_delete_repo();
        } catch (e) {
          result = e;
        }
        callback(result);
      }
    });
  } else {
    return this.output.getTransport().flush();
  }
};

DataHubClient.prototype.recv_delete_repo = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DataHub_delete_repo_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'delete_repo failed: unknown result';
};
DataHubClient.prototype.list_tables = function(con, repo_name, callback) {
  this.send_list_tables(con, repo_name, callback); 
  if (!callback) {
    return this.recv_list_tables();
  }
};

DataHubClient.prototype.send_list_tables = function(con, repo_name, callback) {
  this.output.writeMessageBegin('list_tables', Thrift.MessageType.CALL, this.seqid);
  var args = new DataHub_list_tables_args();
  args.con = con;
  args.repo_name = repo_name;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      if (this.readyState == 4 && this.status == 200) {
        self.output.getTransport().setRecvBuffer(this.responseText);
        var result = null;
        try {
          result = self.recv_list_tables();
        } catch (e) {
          result = e;
        }
        callback(result);
      }
    });
  } else {
    return this.output.getTransport().flush();
  }
};

DataHubClient.prototype.recv_list_tables = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DataHub_list_tables_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'list_tables failed: unknown result';
};
DataHubClient.prototype.get_schema = function(con, table_name, callback) {
  this.send_get_schema(con, table_name, callback); 
  if (!callback) {
    return this.recv_get_schema();
  }
};

DataHubClient.prototype.send_get_schema = function(con, table_name, callback) {
  this.output.writeMessageBegin('get_schema', Thrift.MessageType.CALL, this.seqid);
  var args = new DataHub_get_schema_args();
  args.con = con;
  args.table_name = table_name;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      if (this.readyState == 4 && this.status == 200) {
        self.output.getTransport().setRecvBuffer(this.responseText);
        var result = null;
        try {
          result = self.recv_get_schema();
        } catch (e) {
          result = e;
        }
        callback(result);
      }
    });
  } else {
    return this.output.getTransport().flush();
  }
};

DataHubClient.prototype.recv_get_schema = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DataHub_get_schema_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_schema failed: unknown result';
};
DataHubClient.prototype.execute_sql = function(con, query, query_params, callback) {
  this.send_execute_sql(con, query, query_params, callback); 
  if (!callback) {
    return this.recv_execute_sql();
  }
};

DataHubClient.prototype.send_execute_sql = function(con, query, query_params, callback) {
  this.output.writeMessageBegin('execute_sql', Thrift.MessageType.CALL, this.seqid);
  var args = new DataHub_execute_sql_args();
  args.con = con;
  args.query = query;
  args.query_params = query_params;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      if (this.readyState == 4 && this.status == 200) {
        self.output.getTransport().setRecvBuffer(this.responseText);
        var result = null;
        try {
          result = self.recv_execute_sql();
        } catch (e) {
          result = e;
        }
        callback(result);
      }
    });
  } else {
    return this.output.getTransport().flush();
  }
};

DataHubClient.prototype.recv_execute_sql = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DataHub_execute_sql_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'execute_sql failed: unknown result';
};
DataHubClient.prototype.close_connection = function(con, callback) {
  this.send_close_connection(con, callback); 
  if (!callback) {
    return this.recv_close_connection();
  }
};

DataHubClient.prototype.send_close_connection = function(con, callback) {
  this.output.writeMessageBegin('close_connection', Thrift.MessageType.CALL, this.seqid);
  var args = new DataHub_close_connection_args();
  args.con = con;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      if (this.readyState == 4 && this.status == 200) {
        self.output.getTransport().setRecvBuffer(this.responseText);
        var result = null;
        try {
          result = self.recv_close_connection();
        } catch (e) {
          result = e;
        }
        callback(result);
      }
    });
  } else {
    return this.output.getTransport().flush();
  }
};

DataHubClient.prototype.recv_close_connection = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DataHub_close_connection_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'close_connection failed: unknown result';
};
