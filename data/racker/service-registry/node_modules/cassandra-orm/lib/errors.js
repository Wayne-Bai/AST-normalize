/**
 *  Copyright 2012 Rackspace
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */

var util = require('util');

var sprintf = require('sprintf').sprintf;

/**
 * Cassandra errors.
 * @constructor
 *
 * @param {String} error The error message.
 * @param {String} details The error message.
 */
function CassandraError(error, details) {
  Error.call(this, error);
  Error.captureStackTrace(this, this.constructor);
  this.message = error;
  this.details = String(details);
}

util.inherits(CassandraError, Error);

/**
 * Cassandra TimedOutException error.
 * @constructor
 *
 * @param {String} message The error message.
 */
function CassandraTimedOutError(message) {
  CassandraError.call(this, message, 'TimedOutException');
  this.name = 'TimedOutException';
}

util.inherits(CassandraTimedOutError, CassandraError);

/**
 * Cassandra UnavailableException error.
 * @constructor
 *
 * @param {String} message The error message.
 */
function CassandraUnavailableError(message) {
  CassandraError.call(this, message, 'UnavailableException');
  this.name = 'UnavailableException';
}

util.inherits(CassandraUnavailableError, CassandraError);

/**
 * Cassandra Down errors.
 * @constructor
 *
 * @param {String} error The error message.
 * @param {String} details The error details.
 */
function DbDownError(error, details) {
  CassandraError.call(this, error, details);
}

util.inherits(DbDownError, CassandraError);

/**
 * Invalid key prefix.
 * @constructor.
 *
 * @param {Object} Obj Object type.
 * @param {String} key object key.
 */
function InvalidKeyPrefixError(Obj, key) {
  this.Obj = Obj;
  this.key = key;

  this.message = sprintf('%s key must start with "%s". Provided "%s".', Obj._name, Obj.prefix(), this.key);

  Error.call(this, this.message);
  Error.captureStackTrace(this, this.constructor);
}

util.inherits(InvalidKeyPrefixError, Error);


/**
 * Generic OrmError.
 * @constructor.
 *
 * @param {String} error The error message.
 * @param {String} details The error details.
 */
function OrmError(error, details) {
  Error.call(this, error);
  Error.captureStackTrace(this, this.constructor);
  this.details = details;
}

util.inherits(OrmError, Error);


/**
 * Missing Key Error.
 * @constructor
 *
 * @param {String} error The error message.
 * @param {String} details The error details.
 */
function MissingKeyError(error, details) {
  OrmError.call(this, error, details);
  this.message = 'Missing "Key"';
}

util.inherits(MissingKeyError, OrmError);


/**
 * Expect 0 or 1 Row Counts.
 * @constructor
 *
 * @param {String} error The error message.
 * @param {String} details The error details.
 */
function ExpectZeroOrOneRowsError(error, details) {
  OrmError.call(this, error, details);
  this.message = 'Expected zero or one row in index constraint check.';
}

util.inherits(ExpectZeroOrOneRowsError, OrmError);


/**
 * Expect 0 or 1 Column Counts.
 * @constructor
 *
 * @param {String} error The error message.
 * @param {String} details The error details.
 */
function ExpectZeroOrOneColumnError(error, details) {
  OrmError.call(this, error, details);
  this.message = 'Expected zero or one column in index row.';
}

util.inherits(ExpectZeroOrOneColumnError, OrmError);


/**
 * Index Cardinality Violation.
 * @constructor
 *
 * @param {String} error The error message.
 * @param {String} details The error details.
 */
function IndexCardinalityError(error, details) {
  OrmError.call(this, error, details);
  this.message = 'Index cardinality constraint violation';
}

util.inherits(IndexCardinalityError, OrmError);


/**
 * Double Commit Error.
 * @constructor
 *
 * @param {String} error The error message.
 * @param {String} details The error details.
 */
function DoubleCommitError(error, details) {
  OrmError.call(this, error, details);
  this.message = 'Already committed this transaction';
}

util.inherits(DoubleCommitError, OrmError);


exports.DbDownError = DbDownError;
exports.CassandraError = CassandraError;
exports.CassandraTimedOutError = CassandraTimedOutError;
exports.CassandraUnavailableError = CassandraUnavailableError;
exports.InvalidKeyPrefixError = InvalidKeyPrefixError;
exports.MissingKeyError = MissingKeyError;
exports.ExpectZeroOrOneRowsError = ExpectZeroOrOneRowsError;
exports.ExpectZeroOrOneColumnError = ExpectZeroOrOneColumnError;
exports.DoubleCommitError = DoubleCommitError;
exports.IndexCardinalityError = IndexCardinalityError;
exports.OrmError = OrmError;
