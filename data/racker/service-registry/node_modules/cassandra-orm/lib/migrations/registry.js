/**
 *  Copyright 2012 Rackspace
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */

var path = require('path');

var async = require('async');
var logmagic = require('logmagic');
var log = logmagic.local('lib.migrations');
var fsUtil = require('rackspace-shared-utils/lib/fs');

var settings = require('../settings');
var migrationConstants = require('./constants');
var objectRegistry = require('../orm/object_registry');

/**
 * Holds migration registry.
 * @type {Object}
 */
exports.registry = {};

/**
 * Discover migration files for all the available models.
 *
 * @param {Function} callback Callback called with (err, {Object}files). files is
 * an object where the key is a model name and a value is an array
 * of migration objects.
 */
exports.discoverMigrationFiles = function discoverMigrationFiles(callback) {
  var models = objectRegistry.getModelNames(),
      result = {};

  async.forEach(models, function(model, callback) {
    var modelMigrationsPath = path.join(settings.MIGRATIONS_PATH, model.toLowerCase());
    exports.discoverModelMigrationFiles(model, function(err, files) {
      if (!err) {
        result[model] = files;
      }

      callback();
    });
  },

  function(err) {
    callback(err, result);
  });
};

/**
 * Discover migration files stored on disk for the provided model name.
 *
 * @param {String} name Model name (e.g. Account, CEPGroup, etc.).
 * @param {Function} callback Callback called with (err, files).
 */
exports.discoverModelMigrationFiles = function discoverModelMigrationFiles(name, callback) {
  var modelMigrationsPath = path.join(settings.MIGRATIONS_PATH, name.toLowerCase()),
      pattern = migrationConstants.MIGRATION_FILENAME_PATTERN;

  fsUtil.getMatchingFiles(modelMigrationsPath, pattern, null, callback);
};

/**
 * Load and register all the migrations.
 *
 * @param {Function} callback Callback called with (err).
 */
exports.loadAllMigrations = function loadAllMigrations(callback) {
  async.waterfall([
    exports.discoverMigrationFiles,

    function loadMigrationFiles(files, callback) {
      var models = Object.keys(files);

      async.forEach(models, function(model, callback) {
        var migrationFiles = files[model];

        async.forEach(migrationFiles, function(file, callback) {
          var exported;

          try {
            exported = require(file);
          }
          catch (err) {
            log.errorf('Failed to load migration file ${f}, error: ${e}', {'f': file, 'e': err.toString()});
            callback();
            return;
          }

          exports.registerMigration(model, exported);
          callback();
        }, callback);
      }, callback);
    }
  ], callback);
};

/**
 * Register a migration.
 *
 * @param {String} model Model name.
 * @param {Object} exported Values exported by the migration module.
 */
exports.registerMigration = function(model, exported) {
  var migrations, entry, version;

  entry = {
    'migrations': [],
    'versions': {},
    'lastVersion': 0
  };

  if (!exports.registry.hasOwnProperty(model)) {
    exports.registry[model] = entry;
  }

  migrations = exports.registry[model];
  migrations.migrations.push(exported);
  migrations.versions[exported.VERSION] = exported;

  if (exported.VERSION > migrations.lastVersion) {
    migrations.lastVersion = exported.VERSION;
  }
};

/**
 * Return all the migrations.
 *
 * @return {Object} migrations object.
 */
exports.getAllMigrations = function getAllMigrations() {
  return exports.registry;
};

/**
 * Get migrations for the specified type.
 *
 * @param {String} name Model name (e.g. Account, CEPGroup, etc.).
 * @return {Object} Model migration object or null if there are no migrations
 * for the provided model.
 */
exports.getMigrations = function(name) {
  if (!exports.registry.hasOwnProperty(name)) {
    return null;
  }

  return exports.registry[name];
};
