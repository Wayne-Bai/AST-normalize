// Generated by CoffeeScript 1.3.1
(function() {
  var cluster, fs, i, io, nodize, nodizeSettings, nodizeSettingsFile, numCPUs, path, port, sugar, zappa, _i;

  fs = require('fs');

  path = require('path');

  sugar = require('sugar');

  io = require('socket.io');

  nodizeSettings = require('nconf');

  global.__nodizeSettings = nodizeSettings;

  if (path.existsSync('settings/nodize.local.json')) {
    nodizeSettingsFile = 'settings/nodize.local.json';
  } else {
    nodizeSettingsFile = 'settings/nodize.json';
  }

  nodizeSettings.add('nodize', {
    type: 'file',
    file: nodizeSettingsFile
  });

  nodize = function() {
    var EventEmitter, RedisStore, file, files, helpers, includeFile, includeFolder, includeFolders, logFile, modules, themeModuleDir, _i, _j, _k, _len, _len1, _len2, _moduleName;
    require("./modules/ionize/libs/express_multiple_views");
    this.use({
      bodyParser: {
        uploadDir: __dirname + '/uploads'
      }
    });
    this.disable("view cache");
    this.io.set('log level', 1);
    /*@use 'partials':
      coffee: @zappa.adapter 'coffeecup'
      jade: @zappa.adapter 'jade'
    */

    global.__applicationPath = __dirname;
    global.__nodizeTheme = nodizeSettings.get("theme");
    global.__sessionSecret = nodizeSettings.get("session_secret");
    global.__adminPassword = nodizeSettings.get("admin_password");
    global.__default_lang = 'en';
    this.use({
      'static': __dirname + "/themes/" + __nodizeTheme + "/public"
    });
    this.use('cookieParser');
    this.use('cookieDecoder');
    if (nodizeSettings.get("redis_enabled")) {
      console.log("Using redis session store");
      RedisStore = require('connect-redis')(this.express);
      global.__sessionStore = new RedisStore;
      this.use({
        'session': {
          secret: __sessionSecret,
          store: __sessionStore
        }
      });
    } else {
      console.log("Loading Nodize session module");
      this.include('./modules/nodize-sessions/module_nodize-sessions.coffee');
    }
    logFile = fs.createWriteStream('./logs/access.log', {
      flags: 'a'
    });
    this.set({
      'views': [__dirname + "/themes/" + __nodizeTheme + "/views"]
    });
    this.app.engine("eco", require("consolidate").eco);
    EventEmitter = require("events").EventEmitter;
    global.__nodizeEvents = new EventEmitter();
    this.helpers = {};
    this.include('./modules/backend/module_backend.coffee');
    _moduleName = "ionize";
    fs = require('fs');
    path = require('path');
    themeModuleDir = './themes/' + __nodizeTheme + '/modules';
    if (path.existsSync(themeModuleDir)) {
      modules = fs.readdirSync(themeModuleDir);
      modules = modules.sort();
      for (_i = 0, _len = modules.length; _i < _len; _i++) {
        _moduleName = modules[_i];
        console.log("Loading module (" + _moduleName + ")");
        includeFolders = [];
        includeFolders.push(themeModuleDir + "/" + _moduleName + "/views/");
        includeFolders.push(themeModuleDir + "/" + _moduleName + "/controllers/");
        includeFolders.push(themeModuleDir + "/" + _moduleName + "/helpers/");
        for (_j = 0, _len1 = includeFolders.length; _j < _len1; _j++) {
          includeFolder = includeFolders[_j];
          if (path.existsSync(includeFolder)) {
            files = fs.readdirSync(includeFolder);
            for (_k = 0, _len2 = files.length; _k < _len2; _k++) {
              file = files[_k];
              this.include(includeFolder + file);
            }
          }
        }
        includeFile = themeModuleDir + "/" + _moduleName + "/module_" + _moduleName;
        this.include(includeFile);
      }
    }
    this.include('./modules/ionize/module_ionize.coffee');
    return helpers = this.helpers;
  };

  port = process.env.VCAP_APP_PORT || process.env.PORT || nodizeSettings.get("server_port") || 3000;

  cluster = require('cluster');

  zappa = require("zappajs");

  numCPUs = nodizeSettings.get("cores");

  if (numCPUs === 'max') {
    numCPUs = require('os').cpus().length;
  }

  if (cluster.isMaster) {
    console.log("._   _           _ _\n| \\ | |         | (_)\n|  \\| | ___   __| |_ _______\n| . ` |/ _ \\ / _` | |_  / _ \\\n| |\\  | (_) | (_| | |/ /  __/\n\\_| \\_/\\___/ \\__,_|_/___\\___|\n");
    if (numCPUs > 0) {
      console.log("using", numCPUs, " CPU(s)");
    }
    if (numCPUs > 0) {
      for (i = _i = 1; 1 <= numCPUs ? _i <= numCPUs : _i >= numCPUs; i = 1 <= numCPUs ? ++_i : --_i) {
        cluster.number = i;
        console.log("app | Forking on CPU", i);
        cluster.fork();
        cluster.on('death', function() {
          return console.log('worker ' + worker.pid + ' died');
        });
      }
    } else {
      require("zappajs")(nodize, port);
    }
  } else {
    if (cluster.pid) {
      console.log("Cluster", cluster.pid, "started");
    }
    require("zappajs")(nodize, port);
  }

}).call(this);
