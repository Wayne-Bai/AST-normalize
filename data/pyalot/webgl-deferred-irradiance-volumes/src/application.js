// Generated by CoffeeScript 1.3.3
var Antialias, CompositingControl, Cube, DeferredModel, DeferredShadowMap, Illumination, Lighting, LowresModel, Model, PictureSettings, Quad, Rendernode, SHConstants, SSAO, Sun, Windows, camera, loading, makeStat, schedule, _ref,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

schedule = require('schedule');

loading = require('loading');

camera = require('camera');

Quad = require('/webgl/quad');

Cube = require('/webgl/cube');

Antialias = require('antialias');

_ref = require('model'), LowresModel = _ref.LowresModel, Model = _ref.Model;

Illumination = require('illumination');

Rendernode = require('/rendernode');

Windows = require('/windows');

DeferredShadowMap = require('/depth').DeferredShadowMap;

Sun = require('sun');

DeferredModel = require('deferred_model');

SSAO = require('ssao');

CompositingControl = (function() {

  function CompositingControl(gui) {
    var folder;
    gui.remember(this);
    this.draw_probes = false;
    this.gi = 1;
    this.di = 1;
    this.ao = 0.8;
    folder = gui.addFolder('Compositing');
    folder.add(this, 'draw_probes').name('Draw Probes');
    folder.add(this, 'gi', 0.0, 2.0).name('Glob. Illum.');
    folder.add(this, 'di', 0.0, 2.0).name('Direct. Illum.');
    folder.add(this, 'ao', 0.0, 1.0).name('SSAO');
  }

  return CompositingControl;

})();

Lighting = (function(_super) {

  __extends(Lighting, _super);

  function Lighting(gui) {
    this.update = __bind(this.update, this);

    this.bouncesChanged = __bind(this.bouncesChanged, this);

    this.computeRadiance = __bind(this.computeRadiance, this);

    var folder;
    gui.remember(this);
    Lighting.__super__.constructor.call(this);
    this.sunRadiance = 1.0;
    this.skyRadiance = 1.0;
    this.giGain = 1.0;
    this.bounces = 3;
    this.sunColor = [255, 255, 255];
    this.skyColor = [0x07, 0xcb, 0xf5];
    this.sun_radiance = [0, 0, 0];
    this.sky_radiance = [0, 0, 0];
    folder = gui.addFolder('Lighting');
    folder.addColor(this, 'sunColor').name('Sun Color').onChange(this.computeRadiance);
    folder.add(this, 'sunRadiance', 0.0, 20.0).name('Sun Radiance').onChange(this.computeRadiance);
    folder.addColor(this, 'skyColor').name('Sky Color').onChange(this.computeRadiance);
    folder.add(this, 'skyRadiance', 0.0, 20.0).name('Sky Radiance').onChange(this.computeRadiance);
    folder.add(this, 'giGain', 0.0, 20.0).name('GI-gain').onChange(this.update);
    folder.add(this, 'bounces', 1.0, 10.0).step(1).name('Bounces').onChange(this.bouncesChanged);
    this.computeRadiance();
    this.lastbounces = this.bounces;
  }

  Lighting.prototype.computeRadiance = function() {
    this.sun_radiance[0] = this.sunRadiance * (this.sunColor[0] / 255.0);
    this.sun_radiance[1] = this.sunRadiance * (this.sunColor[1] / 255.0);
    this.sun_radiance[2] = this.sunRadiance * (this.sunColor[2] / 255.0);
    this.sky_radiance[0] = this.skyRadiance * (this.skyColor[0] / 255.0);
    this.sky_radiance[1] = this.skyRadiance * (this.skyColor[1] / 255.0);
    this.sky_radiance[2] = this.skyRadiance * (this.skyColor[2] / 255.0);
    return this.update();
  };

  Lighting.prototype.bouncesChanged = function() {
    if (this.bounces !== this.lastBounces) {
      this.lastBounces = this.bounces;
      return this.update();
    }
  };

  Lighting.prototype.update = function() {
    return this.trigger('change');
  };

  return Lighting;

})(require('events'));

PictureSettings = (function() {

  function PictureSettings(gui) {
    var folder;
    gui.remember(this);
    this.inputGamma = 1.8;
    this.outputGamma = 1.8;
    this.brightness = 1.0;
    this.saturation = 1.0;
    folder = gui.addFolder('Picture');
    folder.add(this, 'inputGamma', 0.25, 3.0).name('Input Gamma');
    folder.add(this, 'outputGamma', 0.25, 3.0).name('Output Gamma');
    folder.add(this, 'brightness', 0.0, 10.0).name('Exposure');
    folder.add(this, 'saturation', 0.0, 4.0).name('Saturation');
  }

  return PictureSettings;

})();

SHConstants = (function() {

  function SHConstants(app, gui) {
    var folder;
    this.app = app;
    this.change = __bind(this.change, this);

    gui.remember(this);
    this.c1 = 0.43;
    this.c2 = 0.66;
    this.band3 = 1.0;
    this.c3 = 0.9;
    this.c4 = 0.34;
    this.c5 = 0.43;
    this.data = new Float32Array(5);
    folder = gui.addFolder('Harmonics');
    folder.add(this, 'c1', 0.0, 4.0).name('L0').onChange(this.change);
    folder.add(this, 'c2', 0.0, 4.0).name('L1').onChange(this.change);
    folder.add(this, 'band3', 0.0, 4.0).name('L2').onChange(this.change);
    folder.add(this, 'c3', 0.0, 4.0).name('L2m2/L2m1/L21').onChange(this.change);
    folder.add(this, 'c4', 0.0, 4.0).name('L20').onChange(this.change);
    folder.add(this, 'c5', 0.0, 4.0).name('L22').onChange(this.change);
    this.updateData();
  }

  SHConstants.prototype.updateData = function() {
    this.data[0] = this.c1;
    this.data[1] = this.c2;
    this.data[2] = this.band3 * this.c3;
    this.data[3] = this.band3 * this.c4;
    return this.data[4] = this.band3 * this.c5;
  };

  SHConstants.prototype.change = function() {
    this.updateData();
    return this.app.lightChange();
  };

  return SHConstants;

})();

makeStat = function(mode, offset) {
  var node, stats;
  stats = new Stats();
  stats.setMode(mode);
  node = $(stats.domElement);
  node.css({
    position: 'absolute',
    left: offset,
    top: 0
  }).appendTo('body').hide();
  stats.hide = function() {
    return node.clearQueue().fadeOut();
  };
  stats.show = function() {
    return node.clearQueue().fadeIn();
  };
  return stats;
};

exports.Application = (function() {

  function _Class(canvas) {
    var floatExt, folder, gui, resmap,
      _this = this;
    this.canvas = canvas;
    this.update = __bind(this.update, this);

    this.resize = __bind(this.resize, this);

    this.lightChange = __bind(this.lightChange, this);

    this.sunChanged = __bind(this.sunChanged, this);

    $('<div id="controls"></div>').css('margin', 10).appendTo('#ui');
    Rendernode.stateDefaults(gl);
    gui = this.gui = new dat.GUI({
      load: get('presets/new.json')
    });
    gui.remember(this);
    this.gui_width = gui.width = 370;
    this.gui.closed = false;
    this.fps = makeStat(0, 0);
    this.rtime = makeStat(1, 80);
    this.gui_closed = gui.closed;
    this.resolution = 0.5;
    this.resolution_label = '1:2 default';
    resmap = {
      '2:1 very slow!': 2,
      '1:1 slow': 1,
      '1:2 default': 0.5,
      '1:4 ugly': 0.25,
      '1:8 worse': 0.125
    };
    folder = gui.addFolder('Performance');
    $('<li>WASD=move, space=overview, cursor keys=navigate</li>').appendTo(folder.__ul);
    folder.add(this, 'resolution_label', ['2:1 very slow!', '1:1 slow', '1:2 default', '1:4 ugly', '1:8 worse']).name('Resolution').onChange(function() {
      _this.resolution = resmap[_this.resolution_label];
      return _this.resizeBuffers();
    });
    this.resolution = resmap[this.resolution_label];
    this.show_fps = false;
    folder.add(this, 'show_fps').name('FPS').onChange(function() {
      if (_this.show_fps) {
        _this.fps.show();
        return _this.rtime.show();
      } else {
        _this.fps.hide();
        return _this.rtime.hide();
      }
    });
    if (this.show_fps) {
      this.fps.show();
      this.rtime.show();
    } else {
      this.fps.hide();
      this.rtime.hide();
    }
    this.picture = new PictureSettings(gui);
    this.sun = new Sun(gui).on('change', this.sunChanged);
    this.compositing_control = new CompositingControl(gui);
    this.lighting = new Lighting(gui).on('change', this.lightChange);
    this.shconst = new SHConstants(this, gui);
    loading.hide();
    this.near = 0.1;
    this.far = 42;
    this.camera = new camera.FlyCam({
      gui: gui,
      near: this.near,
      far: this.far,
      x: -10,
      y: 7,
      z: -1.5,
      o: 100,
      p: 20
    });
    this.sponza = new Model(gl);
    this.lowres = new LowresModel(gl);
    floatExt = gl.getFloatExtension({
      require: ['renderable', 'filterable']
    });
    this.view_normaldepth = new Rendernode(gl, {
      program: get('normaldepth.shader'),
      drawable: this.sponza,
      depthBuffer: true,
      depthTest: true,
      depthWrite: true,
      cullFace: 'BACK',
      type: floatExt.type,
      filter: 'nearest',
      hdrClear: true
    });
    this.ssao = new SSAO(gl, this.view_normaldepth);
    this.direct_light = new DeferredShadowMap(gl, {
      drawable: this.sponza,
      depthWidth: 512,
      depthHeight: 512,
      eyeNormaldepth: this.view_normaldepth,
      light: this.sun,
      camera: this.camera,
      blurred: true
    });
    this.illumination = new Illumination(gl, this.sun, this.lighting, this.lowres, this.sponza, this.view_normaldepth, this.sun.orientation, this.sun.elevation, this.shconst);
    this.albedo = new Rendernode(gl, {
      program: get('albedo.shader'),
      drawable: this.sponza,
      depthBuffer: true,
      depthTest: true,
      depthWrite: true
    });
    this.global_illumination = new Rendernode(gl, {
      program: get('global_illumination.shader'),
      drawable: new DeferredModel(gl, this.illumination.probes),
      cullFace: 'FRONT',
      blend: 'additive',
      type: floatExt.type,
      depthBuffer: this.view_normaldepth.depth,
      depthWrite: false,
      depthTest: 'GEQUAL'
    });
    this.composit = new Rendernode(gl, {
      program: get('composit.shader'),
      drawable: quad
    });
    this.antialias = new Antialias(gl, gui, this.composit);
    this.windows = new Windows(gl, gui, [
      {
        label: 'Scene depth from sun',
        affine: [1, 0],
        gamma: false,
        tex: this.direct_light.depth.output
      }, {
        label: 'Scene normal/depth',
        affine: [0.5, 0.5],
        gamma: false,
        tex: this.view_normaldepth
      }, {
        label: 'Scene depth moments',
        gamma: false,
        tex: this.ssao.blur.output
      }, {
        label: 'Direct Illumination Lightmap',
        tex: this.illumination.direct_light.output
      }, {
        label: 'Global Illumination Lightmap',
        diva: true,
        tex: this.illumination.bounce
      }, {
        label: 'Lightmap Dictionary',
        tex: this.illumination.texmap
      }, {
        label: 'Albedo Probe Values',
        tex: this.illumination.diffusemap
      }, {
        label: 'Light Probes',
        tex: this.illumination.lightprobes
      }, {
        label: 'Spherical Harmonics Coefficients',
        tex: this.illumination.coefficients
      }, {
        label: 'Albedo',
        tex: this.albedo
      }, {
        label: 'SSAO',
        gamma: false,
        tex: this.ssao.output
      }, {
        label: 'Direct Illumination',
        tex: this.direct_light.output
      }, {
        label: 'Global Illumination',
        diva: true,
        tex: this.global_illumination
      }, {
        label: 'Composited',
        gamma: false,
        tex: this.composit
      }, {
        label: 'Antialiased',
        gamma: false,
        tex: this.antialias.node
      }
    ]);
    this.target_width = this.canvas.width();
    this.current_width = this.target_width;
    $(window).resize(this.resize);
    this.resize();
    schedule.run(this.update);
    this.canvas.fadeIn(2000);
    $('div.dg > ul').css('margin-top', 0);
  }

  _Class.prototype.sunChanged = function() {
    this.direct_light.updateDepth();
    this.illumination.updateDirectLight();
    return this.lightChange();
  };

  _Class.prototype.lightChange = function() {
    return this.illumination.update();
  };

  _Class.prototype.resizeBuffers = function(width, height) {
    var h, w;
    w = this.width * this.resolution;
    h = this.height * this.resolution;
    this.view_normaldepth.resize(w, h);
    this.albedo.resize(w, h);
    this.global_illumination.resize(w, h);
    this.direct_light.resize(w, h);
    this.composit.resize(w, h);
    this.antialias.resize(w, h);
    this.illumination.debug.resize(w, h);
    return this.ssao.resize(w, h);
  };

  _Class.prototype.resize = function() {
    this.width = this.canvas.width();
    this.height = this.canvas.height();
    this.camera.aspect(this.width, this.height);
    this.canvas[0].width = this.width;
    this.canvas[0].height = this.height;
    this.resizeBuffers(this.width, this.height);
    return this.resizeWindows();
  };

  _Class.prototype.update = function() {
    this.fps.end();
    this.fps.begin();
    this.rtime.begin();
    this.step();
    this.draw();
    return this.rtime.end();
  };

  _Class.prototype.resizeWindows = function() {
    return this.windows.node.viewport(0, 0, this.current_width, this.height);
  };

  _Class.prototype.step = function() {
    var dw, gui_closed, gui_width;
    gui_closed = this.gui.closed;
    if (gui_closed) {
      this.target_width = this.width;
    } else {
      gui_width = this.gui.width;
      this.target_width = this.width - (gui_width + 10);
    }
    dw = this.target_width - this.current_width;
    this.current_width = this.current_width + dw * 0.1;
    dw = Math.abs(this.target_width - this.current_width);
    if (dw > 1) {
      this.resizeWindows();
    } else if (dw <= 1 && dw > 0) {
      this.current_width = this.target_width;
      this.resizeWindows();
    }
    return this.camera.update();
  };

  _Class.prototype.draw = function() {
    var probe_factor;
    this.view_normaldepth.clear(0, 0, 0, 100).start().clearDepth().mat4('proj', this.camera.proj).mat4('view', this.camera.view).mat3('view_rot', this.camera.rot).drawModel('bumpmap').end();
    this.ssao.update();
    this.albedo.start().f('gamma', this.picture.inputGamma).mat4('proj', this.camera.proj).mat4('view', this.camera.view).mat3('view_rot', this.camera.rot).clearBoth(0, 0, 0, 0).drawModel('diffuse_texture').end();
    this.global_illumination.start().f('gi_gain', this.lighting.giGain).fv('shconst', this.shconst.data).sampler('normaldepth', this.view_normaldepth).mat4('proj', this.camera.proj).mat4('view', this.camera.view).mat4('inv_view', this.camera.inv_view).sampler('coefficients', this.illumination.coefficients).val2('coefficients_size', this.illumination.coefficients.width, this.illumination.coefficients.height).clear().draw().end();
    this.direct_light.updateShadow();
    if (this.compositing_control.draw_probes) {
      probe_factor = 1;
      this.illumination.drawDebug(this.camera, this.view_normaldepth);
    } else {
      probe_factor = 0;
    }
    this.composit.start().clear().f('gamma', this.picture.outputGamma).f('brightness', this.picture.brightness).f('saturation', this.picture.saturation).vec3('sun_radiance', this.lighting.sun_radiance).vec3('sky_radiance', this.lighting.sky_radiance).f('probe_factor', probe_factor).f('gi_factor', this.compositing_control.gi).f('di_factor', this.compositing_control.di).f('ao_factor', this.compositing_control.ao).vec3('sky_color', this.lighting.skyColor).sampler('debug', this.illumination.debug).sampler('albedo', this.albedo).sampler('global', this.global_illumination).sampler('direct', this.direct_light.output).sampler('ssao', this.ssao.output).draw().end();
    this.antialias.apply();
    return this.windows.draw(this.picture.outputGamma);
  };

  return _Class;

})();
