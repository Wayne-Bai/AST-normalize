// Generated by CoffeeScript 1.3.3
var Camera, FlyCam, GameCam, MouseDrag, Orbit, keys,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

keys = require('keys');

MouseDrag = (function() {

  function MouseDrag(which) {
    var _this = this;
    this.which = which;
    this.x = 0;
    this.y = 0;
    this.lx = 0;
    this.ly = 0;
    this.pressed = false;
    if (navigator.appVersion.indexOf('Mac') !== -1) {
      $('#ui').bind('mousewheel', function(event) {
        event.preventDefault();
        event.stopImmediatePropagation();
        event.stopPropagation();
        _this.x += event.originalEvent.wheelDeltaX * 0.25;
        _this.y += event.originalEvent.wheelDeltaY * 0.25;
        return false;
      });
    }
    $('#ui').mousedown(function(event) {
      if (event.which === _this.which) {
        _this.lx = event.pageX;
        _this.ly = event.pageY;
        _this.pressed = true;
      }
      return void 0;
    });
    $(document).mouseup(function() {
      _this.pressed = false;
      return void 0;
    });
    $(document).mousemove(function(event) {
      var x, y;
      if (_this.pressed && event.which === _this.which) {
        x = event.pageX;
        y = event.pageY;
        _this.x += x - _this.lx;
        _this.y += y - _this.ly;
        _this.lx = x;
        _this.ly = y;
        return false;
      }
      return void 0;
    });
  }

  MouseDrag.prototype.reset = function() {
    this.x = 0;
    return this.y = 0;
  };

  return MouseDrag;

})();

Camera = (function() {

  function Camera(delta, near, far) {
    this.delta = delta != null ? delta : 1 / 180;
    this.near = near != null ? near : 0.1;
    this.far = far != null ? far : 1000;
    this.last_gui_update = gettime();
    this.time = gettime();
    this.proj = new Mat4();
    this.inv_proj = new Mat4();
    this.view = new Mat4();
    this.inv_view = new Mat4();
    this.rot = new Mat3();
    this.inv_rot = new Mat3();
    this.acc = new Vec3();
  }

  Camera.prototype.aspect = function(width, height) {
    this.proj.perspective(75, width / height, this.near, this.far);
    return this.inv_proj.inversePerspective(75, width / height, this.near, this.far);
  };

  Camera.prototype.step = function() {
    this.accelerate();
    this.limit();
    this.move();
    this.limit();
    return this.time += this.delta;
  };

  Camera.prototype.update = function() {
    var now;
    now = gettime();
    if (now - this.last_gui_update > 0.5) {
      this.guiUpdate();
      this.last_gui_update = now;
    }
    if (now - this.time > this.delta * 30) {
      this.time = now - this.delta * 30;
    }
    while (this.time < now) {
      this.step();
    }
    this.finish();
    this.view.invert(this.inv_view.identity());
    this.view.toMat3(this.rot.identity());
    return this.inv_view.toMat3(this.inv_rot.identity());
  };

  Camera.prototype.limit = function() {};

  Camera.prototype.guiUpdate = function() {};

  return Camera;

})();

exports.GameCam = GameCam = (function(_super) {

  __extends(GameCam, _super);

  function GameCam(_arg) {
    var delta, x, y, z, _ref, _ref1, _ref2,
      _this = this;
    _ref = _arg != null ? _arg : {}, this.sl = _ref.sl, this.sr = _ref.sr, delta = _ref.delta, x = _ref.x, y = _ref.y, z = _ref.z;
    GameCam.__super__.constructor.call(this, delta);
    this.realpos = new Vec4();
    if ((_ref1 = this.sl) == null) {
      this.sl = 200;
    }
    if ((_ref2 = this.sr) == null) {
      this.sr = 100;
    }
    if (x == null) {
      x = 0;
    }
    if (y == null) {
      y = 0;
    }
    if (z == null) {
      z = 0;
    }
    this.mouse = new MouseDrag(3);
    this.target_height = 0;
    this.height = 0;
    this.x = x;
    this.lx = x;
    this.z = z;
    this.lz = z;
    this.o = 0;
    this.lo = 0;
    this.d = 0;
    this.ld = 0;
    this.ad = 0;
    $(document).bind('mousewheel', function(event) {
      event.preventDefault();
      event.stopImmediatePropagation();
      event.stopPropagation();
      _this.ad -= event.originalEvent.wheelDeltaY;
      return false;
    });
  }

  GameCam.prototype.accelerate = function() {
    var ax, az, ctrl_x, ctrl_y, ctrl_z, move, sl, sr;
    sl = this.delta * this.delta * this.sl;
    sr = this.delta * this.delta * this.sr;
    ctrl_x = keys.a ? -1 : keys.d ? 1 : 0;
    ctrl_y = keys.q ? -1 : keys.e ? 1 : 0;
    ctrl_z = keys.w ? -1 : keys.s ? 1 : 0;
    ax = ctrl_x * sl;
    az = ctrl_z * sl;
    this.rot.identity().rotatey(-this.o).mulVal3(ax, 0, az, this.acc);
    this.x += this.acc.x;
    this.z += this.acc.z;
    this.o += this.mouse.x * sr;
    this.d += this.ad * this.delta * this.delta * 20;
    move = this.delta * this.delta * 4000;
    if (move > 1) {
      move = 1;
    }
    return this.height = this.height + (this.target_height - this.height) * move;
  };

  GameCam.prototype.move = function() {
    var d, o, retl, retr, x, z;
    retl = 0.97;
    retr = 0.94;
    x = this.x + (this.x - this.lx) * retl;
    z = this.z + (this.z - this.lz) * retl;
    d = this.d + (this.d - this.ld) * retl;
    o = this.o + (this.o - this.lo) * retr;
    this.lx = this.x;
    this.x = x;
    this.lz = this.z;
    this.z = z;
    this.lo = this.o;
    this.o = o;
    this.ld = this.d;
    return this.d = d;
  };

  GameCam.prototype.limit = function() {
    var high, low;
    if (this.d < 0) {
      this.d = 0;
    } else if (this.d > 30) {
      this.d = 30;
    }
    high = 128 + 64;
    low = 128 - 64;
    if (this.x < low) {
      this.x = low;
    } else if (this.x > high) {
      this.x = high;
    }
    if (this.z < low) {
      return this.z = low;
    } else if (this.z > high) {
      return this.z = high;
    }
  };

  GameCam.prototype.finish = function() {
    this.mouse.reset();
    this.ad = 0;
    return this.view.identity().translateVal3(0, 0, -this.d - 5).rotatex(25 + (this.d / 30) * 40).rotatey(this.o).translateVal3(-this.x, -this.height, -this.z);
  };

  GameCam.prototype.update = function(picker) {
    var diff, h1, h2, real_height;
    this.view.identity().translateVal3(0, 0, -this.d - 5).rotatex(25 + (this.d / 30) * 40).rotatey(this.o).translateVal3(-this.x, 0, -this.z);
    this.view.invert(this.inv_view.identity());
    h1 = picker.getHeight(this.x, this.z);
    this.inv_view.mulVal4(0, 0, 0, 1, this.realpos);
    h2 = picker.getHeight(this.realpos.x, this.realpos.z) + 2;
    real_height = h1 + this.realpos.y;
    if (real_height < h2) {
      diff = h2 - real_height;
      this.target_height = h1 + diff;
    } else {
      this.target_height = h1;
    }
    return GameCam.__super__.update.call(this);
  };

  return GameCam;

})(Camera);

exports.Orbit = Orbit = (function(_super) {

  __extends(Orbit, _super);

  function Orbit(_arg) {
    var delta, x, y, z, _ref, _ref1, _ref2;
    _ref = _arg != null ? _arg : {}, this.sr = _ref.sr, delta = _ref.delta, x = _ref.x, y = _ref.y, z = _ref.z, this.dist = _ref.dist;
    Orbit.__super__.constructor.call(this, delta);
    if ((_ref1 = this.sr) == null) {
      this.sr = 100;
    }
    if ((_ref2 = this.dist) == null) {
      this.dist = 0.6;
    }
    this.mouse = new MouseDrag(1);
    this.o = 0;
    this.lo = 0;
    this.p = 0;
    this.lp = 0;
  }

  Orbit.prototype.accelerate = function() {
    var sr;
    sr = this.delta * this.delta * this.sr;
    this.o += this.mouse.x * sr;
    return this.p += this.mouse.y * sr;
  };

  Orbit.prototype.move = function() {
    var o, p, retr;
    retr = 0.94;
    o = this.o + (this.o - this.lo) * retr;
    p = this.p + (this.p - this.lp) * retr;
    this.lo = this.o;
    this.o = o;
    this.lp = this.p;
    return this.p = p;
  };

  Orbit.prototype.finish = function() {
    return this.mouse.reset();
  };

  Orbit.prototype.update = function() {
    this.view.identity().translateVal3(0, 0, -this.dist).rotatex(this.p).rotatey(this.o);
    this.view.invert(this.inv_view.identity());
    return Orbit.__super__.update.call(this);
  };

  return Orbit;

})(Camera);

exports.FlyCam = FlyCam = (function(_super) {

  __extends(FlyCam, _super);

  function FlyCam(_arg) {
    var delta, far, folder, lookbutton, near, o, p, x, y, z, _ref, _ref1, _ref2;
    _ref = _arg != null ? _arg : {}, this.sl = _ref.sl, this.gui = _ref.gui, this.sr = _ref.sr, delta = _ref.delta, near = _ref.near, far = _ref.far, lookbutton = _ref.lookbutton, x = _ref.x, y = _ref.y, z = _ref.z, o = _ref.o, p = _ref.p;
    this.guiChanged = __bind(this.guiChanged, this);

    FlyCam.__super__.constructor.call(this, delta, near, far);
    if ((_ref1 = this.sl) == null) {
      this.sl = 50;
    }
    if ((_ref2 = this.sr) == null) {
      this.sr = 100;
    }
    if (lookbutton == null) {
      lookbutton = 1;
    }
    if (x == null) {
      x = 0;
    }
    if (y == null) {
      y = 0;
    }
    if (z == null) {
      z = 0;
    }
    if (o == null) {
      o = 0;
    }
    if (p == null) {
      p = 0;
    }
    this.mouse = new MouseDrag(lookbutton);
    this.x = x;
    this.lx = x;
    this.y = y;
    this.ly = y;
    this.z = z;
    this.lz = z;
    this.o = o;
    this.lo = o;
    this.p = p;
    this.lp = p;
    folder = this.gui.addFolder('Camera');
    this.gui.remember(this);
    this.xgui = folder.add(this, 'x', -30.0, 30.0).onChange(this.guiChanged);
    this.ygui = folder.add(this, 'y', -30.0, 30.0).onChange(this.guiChanged);
    this.zgui = folder.add(this, 'z', -30.0, 30.0).onChange(this.guiChanged);
    this.go = this.o;
    this.ogui = folder.add(this, 'go', 0.0, 360.0).name('Orientation').onChange(this.guiChanged);
    this.pgui = folder.add(this, 'p', -80.0, 80.0).name('Pitch').onChange(this.guiChanged);
    this.guiChanged();
  }

  FlyCam.prototype.guiChanged = function() {
    this.lx = this.x;
    this.ly = this.y;
    this.lz = this.z;
    this.o = this.go;
    this.lo = this.go;
    return this.lp = this.p;
  };

  FlyCam.prototype.guiUpdate = function() {
    this.go = this.o % 360;
    this.xgui.updateDisplay();
    this.ygui.updateDisplay();
    this.zgui.updateDisplay();
    this.ogui.updateDisplay();
    return this.pgui.updateDisplay();
  };

  FlyCam.prototype.accelerate = function() {
    var ax, ay, az, ctrl_x, ctrl_y, ctrl_z, sl, sr;
    sl = this.delta * this.delta * this.sl;
    sr = this.delta * this.delta * this.sr;
    ctrl_x = keys.a ? -1 : keys.d ? 1 : 0;
    ctrl_y = keys.q ? -1 : keys.e ? 1 : 0;
    ctrl_z = keys.w ? -1 : keys.s ? 1 : 0;
    ax = ctrl_x * sl;
    ay = ctrl_y * sl;
    az = ctrl_z * sl;
    this.rot.identity().rotatey(-this.o).rotatex(-this.p).mulVal3(ax, ay, az, this.acc);
    this.x += this.acc.x;
    this.y += this.acc.y;
    this.z += this.acc.z;
    this.o += this.mouse.x * sr;
    return this.p += this.mouse.y * sr;
  };

  FlyCam.prototype.move = function() {
    var o, p, retl, retr, x, y, z;
    retl = 0.97;
    retr = 0.94;
    x = this.x + (this.x - this.lx) * retl;
    y = this.y + (this.y - this.ly) * retl;
    z = this.z + (this.z - this.lz) * retl;
    o = this.o + (this.o - this.lo) * retr;
    p = this.p + (this.p - this.lp) * retr;
    if (p > 80) {
      p = 80;
    } else if (p < -80) {
      p = -80;
    }
    this.lx = this.x;
    this.x = x;
    this.ly = this.y;
    this.y = y;
    this.lz = this.z;
    this.z = z;
    this.lo = this.o;
    this.o = o;
    this.lp = this.p;
    return this.p = p;
  };

  FlyCam.prototype.finish = function() {
    this.mouse.reset();
    return this.view.identity().rotatex(this.p).rotatey(this.o).translateVal3(-this.x, -this.y, -this.z);
  };

  return FlyCam;

})(Camera);
