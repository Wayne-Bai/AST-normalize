// Generated by CoffeeScript 1.3.3
var Framebuffer, ProcessingNode, Quad;

Framebuffer = require('webgl/framebuffer').Framebuffer;

Quad = require('webgl/quad');

return ProcessingNode = (function() {

  function ProcessingNode(gl) {
    this.gl = gl;
    this.fbo = new Framebuffer(this.gl);
    this.quad = new Quad(this.gl);
    this.sources = [];
    this.params = [];
  }

  ProcessingNode.prototype.program = function(program) {
    this._program = program;
    return this;
  };

  ProcessingNode.prototype.addSource = function(name, texture) {
    this.sources.push({
      name: name,
      texture: texture
    });
    return this;
  };

  ProcessingNode.prototype.target = function(texture) {
    this.width = texture.width;
    this.height = texture.width;
    this.fbo.bind().color(texture).unbind();
    return this;
  };

  ProcessingNode.prototype.setUniform = function(call, name, value) {
    var obj, _i, _len, _ref;
    _ref = this.params;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      obj = _ref[_i];
      if (obj.name === name) {
        obj.value = value;
        obj.call = call;
        return this;
      }
    }
    this.params.push({
      name: name,
      value: value,
      call: call
    });
    return this;
  };

  ProcessingNode.prototype.compute = function() {
    var i, obj, param, viewport, _i, _j, _len, _len1, _ref, _ref1;
    viewport = this.gl.getParameter(this.gl.VIEWPORT);
    this.gl.disable(this.gl.DEPTH_TEST);
    this.gl.depthMask(false);
    this.gl.disable(this.gl.CULL_FACE);
    this.gl.viewport(0, 0, this.width, this.height);
    this.fbo.bind();
    this._program.use().val2('viewport', this.width, this.height);
    _ref = this.sources;
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      obj = _ref[i];
      obj.texture.bind(i);
      this._program.i(obj.name, i);
    }
    _ref1 = this.params;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      param = _ref1[_j];
      this._program[param.call](param.name, param.value);
    }
    this._program.draw(this.quad);
    this.fbo.unbind();
    this.gl.viewport.apply(this.gl, viewport);
    return this;
  };

  return ProcessingNode;

})();
