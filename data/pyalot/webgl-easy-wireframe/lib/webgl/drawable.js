// Generated by CoffeeScript 1.3.3
var Drawable;

return Drawable = (function() {
  var float_size;

  float_size = Float32Array.BYTES_PER_ELEMENT;

  function Drawable() {
    this.first = 0;
    this.size = 0;
    this.buffer = this.gl.createBuffer();
    this.mode = this.gl.TRIANGLES;
  }

  Drawable.prototype.setPointer = function(shader, name, size, start, stride) {
    var location;
    if (size == null) {
      size = 3;
    }
    if (start == null) {
      start = 0;
    }
    if (stride == null) {
      stride = 0;
    }
    location = shader.attribLoc(name);
    if (location >= 0) {
      this.gl.vertexAttribPointer(location, size, this.gl.FLOAT, false, stride * float_size, start * float_size);
    }
    return this;
  };

  Drawable.prototype.draw = function(shader) {
    if (shader) {
      this.setPointersForShader(shader);
    }
    this.gl.drawArrays(this.mode, this.first, this.size);
    if (shader) {
      this.disableAttribs(shader);
    }
    return this;
  };

  Drawable.prototype.disableAttribs = function(shader) {
    var location, name, _i, _len, _ref;
    _ref = this.attribs;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      name = _ref[_i];
      location = shader.attribLoc(name);
      if (location >= 0) {
        this.gl.disableVertexAttribArray(location);
      }
    }
    return this;
  };

  Drawable.prototype.uploadList = function(list) {
    var data;
    data = new Float32Array(list);
    return this.upload(data);
  };

  Drawable.prototype.upload = function(data) {
    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.buffer);
    this.gl.bufferData(this.gl.ARRAY_BUFFER, data, this.gl.STATIC_DRAW);
    return this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);
  };

  return Drawable;

})();
