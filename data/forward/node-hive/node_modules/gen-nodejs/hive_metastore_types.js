//
// Autogenerated by Thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var ttypes = module.exports = {};
ttypes.HiveObjectType = { 
'GLOBAL' : 1
,'DATABASE' : 2
,'TABLE' : 3
,'PARTITION' : 4
,'COLUMN' : 5
}
ttypes.PrincipalType = { 
'USER' : 1
,'ROLE' : 2
,'GROUP' : 3
}
ttypes.DDL_TIME = 'transient_lastDdlTime'
ttypes.IS_ARCHIVED = 'is_archived'
ttypes.ORIGINAL_LOCATION = 'original_location'
ttypes.META_TABLE_COLUMNS = 'columns'
ttypes.META_TABLE_COLUMN_TYPES = 'columns.types'
ttypes.BUCKET_FIELD_NAME = 'bucket_field_name'
ttypes.BUCKET_COUNT = 'bucket_count'
ttypes.FIELD_TO_DIMENSION = 'field_to_dimension'
ttypes.META_TABLE_NAME = 'name'
ttypes.META_TABLE_DB = 'db'
ttypes.META_TABLE_LOCATION = 'location'
ttypes.META_TABLE_SERDE = 'serde'
ttypes.META_TABLE_PARTITION_COLUMNS = 'partition_columns'
ttypes.FILE_INPUT_FORMAT = 'file.inputformat'
ttypes.FILE_OUTPUT_FORMAT = 'file.outputformat'
ttypes.META_TABLE_STORAGE = 'storage_handler'
var Version = module.exports.Version = function(args){
  this.version = null
  this.comments = null
if( args != null ){  if (null != args.version)
  this.version = args.version
  if (null != args.comments)
  this.comments = args.comments
}}
Version.prototype = {}
Version.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.version = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.comments = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Version.prototype.write = function(output){ 
  output.writeStructBegin('Version')
  if (null != this.version) {
    output.writeFieldBegin('version', Thrift.Type.STRING, 1)
    output.writeString(this.version)
    output.writeFieldEnd()
  }
  if (null != this.comments) {
    output.writeFieldBegin('comments', Thrift.Type.STRING, 2)
    output.writeString(this.comments)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var FieldSchema = module.exports.FieldSchema = function(args){
  this.name = null
  this.type = null
  this.comment = null
if( args != null ){  if (null != args.name)
  this.name = args.name
  if (null != args.type)
  this.type = args.type
  if (null != args.comment)
  this.comment = args.comment
}}
FieldSchema.prototype = {}
FieldSchema.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRING) {
        this.comment = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

FieldSchema.prototype.write = function(output){ 
  output.writeStructBegin('FieldSchema')
  if (null != this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1)
    output.writeString(this.name)
    output.writeFieldEnd()
  }
  if (null != this.type) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 2)
    output.writeString(this.type)
    output.writeFieldEnd()
  }
  if (null != this.comment) {
    output.writeFieldBegin('comment', Thrift.Type.STRING, 3)
    output.writeString(this.comment)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Type = module.exports.Type = function(args){
  this.name = null
  this.type1 = null
  this.type2 = null
  this.fields = null
if( args != null ){  if (null != args.name)
  this.name = args.name
  if (null != args.type1)
  this.type1 = args.type1
  if (null != args.type2)
  this.type2 = args.type2
  if (null != args.fields)
  this.fields = args.fields
}}
Type.prototype = {}
Type.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.type1 = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRING) {
        this.type2 = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.LIST) {
        {
          var _size0 = 0
          var rtmp3
          this.fields = []
          var _etype3 = 0
          rtmp3 = input.readListBegin()
          _etype3 = rtmp3.etype
          _size0 = rtmp3.size
          for (var _i4 = 0; _i4 < _size0; ++_i4)
          {
            var elem5 = null
            elem5 = new ttypes.FieldSchema()
            elem5.read(input)
            this.fields.push(elem5)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Type.prototype.write = function(output){ 
  output.writeStructBegin('Type')
  if (null != this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1)
    output.writeString(this.name)
    output.writeFieldEnd()
  }
  if (null != this.type1) {
    output.writeFieldBegin('type1', Thrift.Type.STRING, 2)
    output.writeString(this.type1)
    output.writeFieldEnd()
  }
  if (null != this.type2) {
    output.writeFieldBegin('type2', Thrift.Type.STRING, 3)
    output.writeString(this.type2)
    output.writeFieldEnd()
  }
  if (null != this.fields) {
    output.writeFieldBegin('fields', Thrift.Type.LIST, 4)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.fields.length)
      {
        for(var iter6 in this.fields)
        {
          if (this.fields.hasOwnProperty(iter6))
          {
            iter6=this.fields[iter6]
            iter6.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var HiveObjectRef = module.exports.HiveObjectRef = function(args){
  this.objectType = null
  this.dbName = null
  this.objectName = null
  this.partValues = null
  this.columnName = null
if( args != null ){  if (null != args.objectType)
  this.objectType = args.objectType
  if (null != args.dbName)
  this.dbName = args.dbName
  if (null != args.objectName)
  this.objectName = args.objectName
  if (null != args.partValues)
  this.partValues = args.partValues
  if (null != args.columnName)
  this.columnName = args.columnName
}}
HiveObjectRef.prototype = {}
HiveObjectRef.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.I32) {
        this.objectType = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.dbName = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRING) {
        this.objectName = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.LIST) {
        {
          var _size7 = 0
          var rtmp3
          this.partValues = []
          var _etype10 = 0
          rtmp3 = input.readListBegin()
          _etype10 = rtmp3.etype
          _size7 = rtmp3.size
          for (var _i11 = 0; _i11 < _size7; ++_i11)
          {
            var elem12 = null
            elem12 = input.readString()
            this.partValues.push(elem12)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 5:      if (ftype == Thrift.Type.STRING) {
        this.columnName = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

HiveObjectRef.prototype.write = function(output){ 
  output.writeStructBegin('HiveObjectRef')
  if (null != this.objectType) {
    output.writeFieldBegin('objectType', Thrift.Type.I32, 1)
    output.writeI32(this.objectType)
    output.writeFieldEnd()
  }
  if (null != this.dbName) {
    output.writeFieldBegin('dbName', Thrift.Type.STRING, 2)
    output.writeString(this.dbName)
    output.writeFieldEnd()
  }
  if (null != this.objectName) {
    output.writeFieldBegin('objectName', Thrift.Type.STRING, 3)
    output.writeString(this.objectName)
    output.writeFieldEnd()
  }
  if (null != this.partValues) {
    output.writeFieldBegin('partValues', Thrift.Type.LIST, 4)
    {
      output.writeListBegin(Thrift.Type.STRING, this.partValues.length)
      {
        for(var iter13 in this.partValues)
        {
          if (this.partValues.hasOwnProperty(iter13))
          {
            iter13=this.partValues[iter13]
            output.writeString(iter13)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.columnName) {
    output.writeFieldBegin('columnName', Thrift.Type.STRING, 5)
    output.writeString(this.columnName)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var PrivilegeGrantInfo = module.exports.PrivilegeGrantInfo = function(args){
  this.privilege = null
  this.createTime = null
  this.grantor = null
  this.grantorType = null
  this.grantOption = null
if( args != null ){  if (null != args.privilege)
  this.privilege = args.privilege
  if (null != args.createTime)
  this.createTime = args.createTime
  if (null != args.grantor)
  this.grantor = args.grantor
  if (null != args.grantorType)
  this.grantorType = args.grantorType
  if (null != args.grantOption)
  this.grantOption = args.grantOption
}}
PrivilegeGrantInfo.prototype = {}
PrivilegeGrantInfo.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.privilege = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.I32) {
        this.createTime = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRING) {
        this.grantor = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.I32) {
        this.grantorType = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 5:      if (ftype == Thrift.Type.BOOL) {
        this.grantOption = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

PrivilegeGrantInfo.prototype.write = function(output){ 
  output.writeStructBegin('PrivilegeGrantInfo')
  if (null != this.privilege) {
    output.writeFieldBegin('privilege', Thrift.Type.STRING, 1)
    output.writeString(this.privilege)
    output.writeFieldEnd()
  }
  if (null != this.createTime) {
    output.writeFieldBegin('createTime', Thrift.Type.I32, 2)
    output.writeI32(this.createTime)
    output.writeFieldEnd()
  }
  if (null != this.grantor) {
    output.writeFieldBegin('grantor', Thrift.Type.STRING, 3)
    output.writeString(this.grantor)
    output.writeFieldEnd()
  }
  if (null != this.grantorType) {
    output.writeFieldBegin('grantorType', Thrift.Type.I32, 4)
    output.writeI32(this.grantorType)
    output.writeFieldEnd()
  }
  if (null != this.grantOption) {
    output.writeFieldBegin('grantOption', Thrift.Type.BOOL, 5)
    output.writeBool(this.grantOption)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var HiveObjectPrivilege = module.exports.HiveObjectPrivilege = function(args){
  this.hiveObject = null
  this.principalName = null
  this.principalType = null
  this.grantInfo = null
if( args != null ){  if (null != args.hiveObject)
  this.hiveObject = args.hiveObject
  if (null != args.principalName)
  this.principalName = args.principalName
  if (null != args.principalType)
  this.principalType = args.principalType
  if (null != args.grantInfo)
  this.grantInfo = args.grantInfo
}}
HiveObjectPrivilege.prototype = {}
HiveObjectPrivilege.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.hiveObject = new ttypes.HiveObjectRef()
        this.hiveObject.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.principalName = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.I32) {
        this.principalType = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.STRUCT) {
        this.grantInfo = new ttypes.PrivilegeGrantInfo()
        this.grantInfo.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

HiveObjectPrivilege.prototype.write = function(output){ 
  output.writeStructBegin('HiveObjectPrivilege')
  if (null != this.hiveObject) {
    output.writeFieldBegin('hiveObject', Thrift.Type.STRUCT, 1)
    this.hiveObject.write(output)
    output.writeFieldEnd()
  }
  if (null != this.principalName) {
    output.writeFieldBegin('principalName', Thrift.Type.STRING, 2)
    output.writeString(this.principalName)
    output.writeFieldEnd()
  }
  if (null != this.principalType) {
    output.writeFieldBegin('principalType', Thrift.Type.I32, 3)
    output.writeI32(this.principalType)
    output.writeFieldEnd()
  }
  if (null != this.grantInfo) {
    output.writeFieldBegin('grantInfo', Thrift.Type.STRUCT, 4)
    this.grantInfo.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var PrivilegeBag = module.exports.PrivilegeBag = function(args){
  this.privileges = null
if( args != null ){  if (null != args.privileges)
  this.privileges = args.privileges
}}
PrivilegeBag.prototype = {}
PrivilegeBag.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.LIST) {
        {
          var _size14 = 0
          var rtmp3
          this.privileges = []
          var _etype17 = 0
          rtmp3 = input.readListBegin()
          _etype17 = rtmp3.etype
          _size14 = rtmp3.size
          for (var _i18 = 0; _i18 < _size14; ++_i18)
          {
            var elem19 = null
            elem19 = new ttypes.HiveObjectPrivilege()
            elem19.read(input)
            this.privileges.push(elem19)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

PrivilegeBag.prototype.write = function(output){ 
  output.writeStructBegin('PrivilegeBag')
  if (null != this.privileges) {
    output.writeFieldBegin('privileges', Thrift.Type.LIST, 1)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.privileges.length)
      {
        for(var iter20 in this.privileges)
        {
          if (this.privileges.hasOwnProperty(iter20))
          {
            iter20=this.privileges[iter20]
            iter20.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var PrincipalPrivilegeSet = module.exports.PrincipalPrivilegeSet = function(args){
  this.userPrivileges = null
  this.groupPrivileges = null
  this.rolePrivileges = null
if( args != null ){  if (null != args.userPrivileges)
  this.userPrivileges = args.userPrivileges
  if (null != args.groupPrivileges)
  this.groupPrivileges = args.groupPrivileges
  if (null != args.rolePrivileges)
  this.rolePrivileges = args.rolePrivileges
}}
PrincipalPrivilegeSet.prototype = {}
PrincipalPrivilegeSet.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.MAP) {
        {
          var _size21 = 0
          var rtmp3
          this.userPrivileges = {}
          var _ktype22 = 0
          var _vtype23 = 0
          rtmp3 = input.readMapBegin()
          _ktype22= rtmp3.ktype
          _vtype23= rtmp3.vtype
          _size21= rtmp3.size
          for (var _i25 = 0; _i25 < _size21; ++_i25)
          {
            key26 = null
            val27 = null
            key26 = input.readString()
            {
              var _size28 = 0
              var rtmp3
              val27 = []
              var _etype31 = 0
              rtmp3 = input.readListBegin()
              _etype31 = rtmp3.etype
              _size28 = rtmp3.size
              for (var _i32 = 0; _i32 < _size28; ++_i32)
              {
                var elem33 = null
                elem33 = new ttypes.PrivilegeGrantInfo()
                elem33.read(input)
                val27.push(elem33)
              }
              input.readListEnd()
            }
            this.userPrivileges[key26] = val27
          }
          input.readMapEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.MAP) {
        {
          var _size34 = 0
          var rtmp3
          this.groupPrivileges = {}
          var _ktype35 = 0
          var _vtype36 = 0
          rtmp3 = input.readMapBegin()
          _ktype35= rtmp3.ktype
          _vtype36= rtmp3.vtype
          _size34= rtmp3.size
          for (var _i38 = 0; _i38 < _size34; ++_i38)
          {
            key39 = null
            val40 = null
            key39 = input.readString()
            {
              var _size41 = 0
              var rtmp3
              val40 = []
              var _etype44 = 0
              rtmp3 = input.readListBegin()
              _etype44 = rtmp3.etype
              _size41 = rtmp3.size
              for (var _i45 = 0; _i45 < _size41; ++_i45)
              {
                var elem46 = null
                elem46 = new ttypes.PrivilegeGrantInfo()
                elem46.read(input)
                val40.push(elem46)
              }
              input.readListEnd()
            }
            this.groupPrivileges[key39] = val40
          }
          input.readMapEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.MAP) {
        {
          var _size47 = 0
          var rtmp3
          this.rolePrivileges = {}
          var _ktype48 = 0
          var _vtype49 = 0
          rtmp3 = input.readMapBegin()
          _ktype48= rtmp3.ktype
          _vtype49= rtmp3.vtype
          _size47= rtmp3.size
          for (var _i51 = 0; _i51 < _size47; ++_i51)
          {
            key52 = null
            val53 = null
            key52 = input.readString()
            {
              var _size54 = 0
              var rtmp3
              val53 = []
              var _etype57 = 0
              rtmp3 = input.readListBegin()
              _etype57 = rtmp3.etype
              _size54 = rtmp3.size
              for (var _i58 = 0; _i58 < _size54; ++_i58)
              {
                var elem59 = null
                elem59 = new ttypes.PrivilegeGrantInfo()
                elem59.read(input)
                val53.push(elem59)
              }
              input.readListEnd()
            }
            this.rolePrivileges[key52] = val53
          }
          input.readMapEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

PrincipalPrivilegeSet.prototype.write = function(output){ 
  output.writeStructBegin('PrincipalPrivilegeSet')
  if (null != this.userPrivileges) {
    output.writeFieldBegin('userPrivileges', Thrift.Type.MAP, 1)
    {
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.userPrivileges))
      {
        for(var kiter60 in this.userPrivileges)        {
          if (this.userPrivileges.hasOwnProperty(kiter60))
          {
            var viter61 = this.userPrivileges[kiter60]
            output.writeString(kiter60)
            {
              output.writeListBegin(Thrift.Type.STRUCT, viter61.length)
              {
                for(var iter62 in viter61)
                {
                  if (viter61.hasOwnProperty(iter62))
                  {
                    iter62=viter61[iter62]
                    iter62.write(output)
                  }
                }
              }
              output.writeListEnd()
            }
          }
        }
      }
      output.writeMapEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.groupPrivileges) {
    output.writeFieldBegin('groupPrivileges', Thrift.Type.MAP, 2)
    {
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.groupPrivileges))
      {
        for(var kiter63 in this.groupPrivileges)        {
          if (this.groupPrivileges.hasOwnProperty(kiter63))
          {
            var viter64 = this.groupPrivileges[kiter63]
            output.writeString(kiter63)
            {
              output.writeListBegin(Thrift.Type.STRUCT, viter64.length)
              {
                for(var iter65 in viter64)
                {
                  if (viter64.hasOwnProperty(iter65))
                  {
                    iter65=viter64[iter65]
                    iter65.write(output)
                  }
                }
              }
              output.writeListEnd()
            }
          }
        }
      }
      output.writeMapEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.rolePrivileges) {
    output.writeFieldBegin('rolePrivileges', Thrift.Type.MAP, 3)
    {
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.rolePrivileges))
      {
        for(var kiter66 in this.rolePrivileges)        {
          if (this.rolePrivileges.hasOwnProperty(kiter66))
          {
            var viter67 = this.rolePrivileges[kiter66]
            output.writeString(kiter66)
            {
              output.writeListBegin(Thrift.Type.STRUCT, viter67.length)
              {
                for(var iter68 in viter67)
                {
                  if (viter67.hasOwnProperty(iter68))
                  {
                    iter68=viter67[iter68]
                    iter68.write(output)
                  }
                }
              }
              output.writeListEnd()
            }
          }
        }
      }
      output.writeMapEnd()
    }
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Role = module.exports.Role = function(args){
  this.roleName = null
  this.createTime = null
  this.ownerName = null
if( args != null ){  if (null != args.roleName)
  this.roleName = args.roleName
  if (null != args.createTime)
  this.createTime = args.createTime
  if (null != args.ownerName)
  this.ownerName = args.ownerName
}}
Role.prototype = {}
Role.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.roleName = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.I32) {
        this.createTime = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRING) {
        this.ownerName = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Role.prototype.write = function(output){ 
  output.writeStructBegin('Role')
  if (null != this.roleName) {
    output.writeFieldBegin('roleName', Thrift.Type.STRING, 1)
    output.writeString(this.roleName)
    output.writeFieldEnd()
  }
  if (null != this.createTime) {
    output.writeFieldBegin('createTime', Thrift.Type.I32, 2)
    output.writeI32(this.createTime)
    output.writeFieldEnd()
  }
  if (null != this.ownerName) {
    output.writeFieldBegin('ownerName', Thrift.Type.STRING, 3)
    output.writeString(this.ownerName)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Database = module.exports.Database = function(args){
  this.name = null
  this.description = null
  this.locationUri = null
  this.parameters = null
  this.privileges = null
if( args != null ){  if (null != args.name)
  this.name = args.name
  if (null != args.description)
  this.description = args.description
  if (null != args.locationUri)
  this.locationUri = args.locationUri
  if (null != args.parameters)
  this.parameters = args.parameters
  if (null != args.privileges)
  this.privileges = args.privileges
}}
Database.prototype = {}
Database.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRING) {
        this.locationUri = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.MAP) {
        {
          var _size69 = 0
          var rtmp3
          this.parameters = {}
          var _ktype70 = 0
          var _vtype71 = 0
          rtmp3 = input.readMapBegin()
          _ktype70= rtmp3.ktype
          _vtype71= rtmp3.vtype
          _size69= rtmp3.size
          for (var _i73 = 0; _i73 < _size69; ++_i73)
          {
            key74 = null
            val75 = null
            key74 = input.readString()
            val75 = input.readString()
            this.parameters[key74] = val75
          }
          input.readMapEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 5:      if (ftype == Thrift.Type.STRUCT) {
        this.privileges = new ttypes.PrincipalPrivilegeSet()
        this.privileges.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Database.prototype.write = function(output){ 
  output.writeStructBegin('Database')
  if (null != this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1)
    output.writeString(this.name)
    output.writeFieldEnd()
  }
  if (null != this.description) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 2)
    output.writeString(this.description)
    output.writeFieldEnd()
  }
  if (null != this.locationUri) {
    output.writeFieldBegin('locationUri', Thrift.Type.STRING, 3)
    output.writeString(this.locationUri)
    output.writeFieldEnd()
  }
  if (null != this.parameters) {
    output.writeFieldBegin('parameters', Thrift.Type.MAP, 4)
    {
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.parameters))
      {
        for(var kiter76 in this.parameters)        {
          if (this.parameters.hasOwnProperty(kiter76))
          {
            var viter77 = this.parameters[kiter76]
            output.writeString(kiter76)
            output.writeString(viter77)
          }
        }
      }
      output.writeMapEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.privileges) {
    output.writeFieldBegin('privileges', Thrift.Type.STRUCT, 5)
    this.privileges.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var SerDeInfo = module.exports.SerDeInfo = function(args){
  this.name = null
  this.serializationLib = null
  this.parameters = null
if( args != null ){  if (null != args.name)
  this.name = args.name
  if (null != args.serializationLib)
  this.serializationLib = args.serializationLib
  if (null != args.parameters)
  this.parameters = args.parameters
}}
SerDeInfo.prototype = {}
SerDeInfo.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.serializationLib = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.MAP) {
        {
          var _size78 = 0
          var rtmp3
          this.parameters = {}
          var _ktype79 = 0
          var _vtype80 = 0
          rtmp3 = input.readMapBegin()
          _ktype79= rtmp3.ktype
          _vtype80= rtmp3.vtype
          _size78= rtmp3.size
          for (var _i82 = 0; _i82 < _size78; ++_i82)
          {
            key83 = null
            val84 = null
            key83 = input.readString()
            val84 = input.readString()
            this.parameters[key83] = val84
          }
          input.readMapEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

SerDeInfo.prototype.write = function(output){ 
  output.writeStructBegin('SerDeInfo')
  if (null != this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1)
    output.writeString(this.name)
    output.writeFieldEnd()
  }
  if (null != this.serializationLib) {
    output.writeFieldBegin('serializationLib', Thrift.Type.STRING, 2)
    output.writeString(this.serializationLib)
    output.writeFieldEnd()
  }
  if (null != this.parameters) {
    output.writeFieldBegin('parameters', Thrift.Type.MAP, 3)
    {
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.parameters))
      {
        for(var kiter85 in this.parameters)        {
          if (this.parameters.hasOwnProperty(kiter85))
          {
            var viter86 = this.parameters[kiter85]
            output.writeString(kiter85)
            output.writeString(viter86)
          }
        }
      }
      output.writeMapEnd()
    }
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Order = module.exports.Order = function(args){
  this.col = null
  this.order = null
if( args != null ){  if (null != args.col)
  this.col = args.col
  if (null != args.order)
  this.order = args.order
}}
Order.prototype = {}
Order.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.col = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.I32) {
        this.order = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Order.prototype.write = function(output){ 
  output.writeStructBegin('Order')
  if (null != this.col) {
    output.writeFieldBegin('col', Thrift.Type.STRING, 1)
    output.writeString(this.col)
    output.writeFieldEnd()
  }
  if (null != this.order) {
    output.writeFieldBegin('order', Thrift.Type.I32, 2)
    output.writeI32(this.order)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var StorageDescriptor = module.exports.StorageDescriptor = function(args){
  this.cols = null
  this.location = null
  this.inputFormat = null
  this.outputFormat = null
  this.compressed = null
  this.numBuckets = null
  this.serdeInfo = null
  this.bucketCols = null
  this.sortCols = null
  this.parameters = null
if( args != null ){  if (null != args.cols)
  this.cols = args.cols
  if (null != args.location)
  this.location = args.location
  if (null != args.inputFormat)
  this.inputFormat = args.inputFormat
  if (null != args.outputFormat)
  this.outputFormat = args.outputFormat
  if (null != args.compressed)
  this.compressed = args.compressed
  if (null != args.numBuckets)
  this.numBuckets = args.numBuckets
  if (null != args.serdeInfo)
  this.serdeInfo = args.serdeInfo
  if (null != args.bucketCols)
  this.bucketCols = args.bucketCols
  if (null != args.sortCols)
  this.sortCols = args.sortCols
  if (null != args.parameters)
  this.parameters = args.parameters
}}
StorageDescriptor.prototype = {}
StorageDescriptor.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.LIST) {
        {
          var _size87 = 0
          var rtmp3
          this.cols = []
          var _etype90 = 0
          rtmp3 = input.readListBegin()
          _etype90 = rtmp3.etype
          _size87 = rtmp3.size
          for (var _i91 = 0; _i91 < _size87; ++_i91)
          {
            var elem92 = null
            elem92 = new ttypes.FieldSchema()
            elem92.read(input)
            this.cols.push(elem92)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.location = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRING) {
        this.inputFormat = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.STRING) {
        this.outputFormat = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 5:      if (ftype == Thrift.Type.BOOL) {
        this.compressed = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      case 6:      if (ftype == Thrift.Type.I32) {
        this.numBuckets = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 7:      if (ftype == Thrift.Type.STRUCT) {
        this.serdeInfo = new ttypes.SerDeInfo()
        this.serdeInfo.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 8:      if (ftype == Thrift.Type.LIST) {
        {
          var _size93 = 0
          var rtmp3
          this.bucketCols = []
          var _etype96 = 0
          rtmp3 = input.readListBegin()
          _etype96 = rtmp3.etype
          _size93 = rtmp3.size
          for (var _i97 = 0; _i97 < _size93; ++_i97)
          {
            var elem98 = null
            elem98 = input.readString()
            this.bucketCols.push(elem98)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 9:      if (ftype == Thrift.Type.LIST) {
        {
          var _size99 = 0
          var rtmp3
          this.sortCols = []
          var _etype102 = 0
          rtmp3 = input.readListBegin()
          _etype102 = rtmp3.etype
          _size99 = rtmp3.size
          for (var _i103 = 0; _i103 < _size99; ++_i103)
          {
            var elem104 = null
            elem104 = new ttypes.Order()
            elem104.read(input)
            this.sortCols.push(elem104)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 10:      if (ftype == Thrift.Type.MAP) {
        {
          var _size105 = 0
          var rtmp3
          this.parameters = {}
          var _ktype106 = 0
          var _vtype107 = 0
          rtmp3 = input.readMapBegin()
          _ktype106= rtmp3.ktype
          _vtype107= rtmp3.vtype
          _size105= rtmp3.size
          for (var _i109 = 0; _i109 < _size105; ++_i109)
          {
            key110 = null
            val111 = null
            key110 = input.readString()
            val111 = input.readString()
            this.parameters[key110] = val111
          }
          input.readMapEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

StorageDescriptor.prototype.write = function(output){ 
  output.writeStructBegin('StorageDescriptor')
  if (null != this.cols) {
    output.writeFieldBegin('cols', Thrift.Type.LIST, 1)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.cols.length)
      {
        for(var iter112 in this.cols)
        {
          if (this.cols.hasOwnProperty(iter112))
          {
            iter112=this.cols[iter112]
            iter112.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.location) {
    output.writeFieldBegin('location', Thrift.Type.STRING, 2)
    output.writeString(this.location)
    output.writeFieldEnd()
  }
  if (null != this.inputFormat) {
    output.writeFieldBegin('inputFormat', Thrift.Type.STRING, 3)
    output.writeString(this.inputFormat)
    output.writeFieldEnd()
  }
  if (null != this.outputFormat) {
    output.writeFieldBegin('outputFormat', Thrift.Type.STRING, 4)
    output.writeString(this.outputFormat)
    output.writeFieldEnd()
  }
  if (null != this.compressed) {
    output.writeFieldBegin('compressed', Thrift.Type.BOOL, 5)
    output.writeBool(this.compressed)
    output.writeFieldEnd()
  }
  if (null != this.numBuckets) {
    output.writeFieldBegin('numBuckets', Thrift.Type.I32, 6)
    output.writeI32(this.numBuckets)
    output.writeFieldEnd()
  }
  if (null != this.serdeInfo) {
    output.writeFieldBegin('serdeInfo', Thrift.Type.STRUCT, 7)
    this.serdeInfo.write(output)
    output.writeFieldEnd()
  }
  if (null != this.bucketCols) {
    output.writeFieldBegin('bucketCols', Thrift.Type.LIST, 8)
    {
      output.writeListBegin(Thrift.Type.STRING, this.bucketCols.length)
      {
        for(var iter113 in this.bucketCols)
        {
          if (this.bucketCols.hasOwnProperty(iter113))
          {
            iter113=this.bucketCols[iter113]
            output.writeString(iter113)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.sortCols) {
    output.writeFieldBegin('sortCols', Thrift.Type.LIST, 9)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.sortCols.length)
      {
        for(var iter114 in this.sortCols)
        {
          if (this.sortCols.hasOwnProperty(iter114))
          {
            iter114=this.sortCols[iter114]
            iter114.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.parameters) {
    output.writeFieldBegin('parameters', Thrift.Type.MAP, 10)
    {
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.parameters))
      {
        for(var kiter115 in this.parameters)        {
          if (this.parameters.hasOwnProperty(kiter115))
          {
            var viter116 = this.parameters[kiter115]
            output.writeString(kiter115)
            output.writeString(viter116)
          }
        }
      }
      output.writeMapEnd()
    }
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Table = module.exports.Table = function(args){
  this.tableName = null
  this.dbName = null
  this.owner = null
  this.createTime = null
  this.lastAccessTime = null
  this.retention = null
  this.sd = null
  this.partitionKeys = null
  this.parameters = null
  this.viewOriginalText = null
  this.viewExpandedText = null
  this.tableType = null
  this.privileges = null
if( args != null ){  if (null != args.tableName)
  this.tableName = args.tableName
  if (null != args.dbName)
  this.dbName = args.dbName
  if (null != args.owner)
  this.owner = args.owner
  if (null != args.createTime)
  this.createTime = args.createTime
  if (null != args.lastAccessTime)
  this.lastAccessTime = args.lastAccessTime
  if (null != args.retention)
  this.retention = args.retention
  if (null != args.sd)
  this.sd = args.sd
  if (null != args.partitionKeys)
  this.partitionKeys = args.partitionKeys
  if (null != args.parameters)
  this.parameters = args.parameters
  if (null != args.viewOriginalText)
  this.viewOriginalText = args.viewOriginalText
  if (null != args.viewExpandedText)
  this.viewExpandedText = args.viewExpandedText
  if (null != args.tableType)
  this.tableType = args.tableType
  if (null != args.privileges)
  this.privileges = args.privileges
}}
Table.prototype = {}
Table.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.dbName = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRING) {
        this.owner = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.I32) {
        this.createTime = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 5:      if (ftype == Thrift.Type.I32) {
        this.lastAccessTime = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 6:      if (ftype == Thrift.Type.I32) {
        this.retention = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 7:      if (ftype == Thrift.Type.STRUCT) {
        this.sd = new ttypes.StorageDescriptor()
        this.sd.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 8:      if (ftype == Thrift.Type.LIST) {
        {
          var _size117 = 0
          var rtmp3
          this.partitionKeys = []
          var _etype120 = 0
          rtmp3 = input.readListBegin()
          _etype120 = rtmp3.etype
          _size117 = rtmp3.size
          for (var _i121 = 0; _i121 < _size117; ++_i121)
          {
            var elem122 = null
            elem122 = new ttypes.FieldSchema()
            elem122.read(input)
            this.partitionKeys.push(elem122)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 9:      if (ftype == Thrift.Type.MAP) {
        {
          var _size123 = 0
          var rtmp3
          this.parameters = {}
          var _ktype124 = 0
          var _vtype125 = 0
          rtmp3 = input.readMapBegin()
          _ktype124= rtmp3.ktype
          _vtype125= rtmp3.vtype
          _size123= rtmp3.size
          for (var _i127 = 0; _i127 < _size123; ++_i127)
          {
            key128 = null
            val129 = null
            key128 = input.readString()
            val129 = input.readString()
            this.parameters[key128] = val129
          }
          input.readMapEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 10:      if (ftype == Thrift.Type.STRING) {
        this.viewOriginalText = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 11:      if (ftype == Thrift.Type.STRING) {
        this.viewExpandedText = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 12:      if (ftype == Thrift.Type.STRING) {
        this.tableType = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 13:      if (ftype == Thrift.Type.STRUCT) {
        this.privileges = new ttypes.PrincipalPrivilegeSet()
        this.privileges.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Table.prototype.write = function(output){ 
  output.writeStructBegin('Table')
  if (null != this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1)
    output.writeString(this.tableName)
    output.writeFieldEnd()
  }
  if (null != this.dbName) {
    output.writeFieldBegin('dbName', Thrift.Type.STRING, 2)
    output.writeString(this.dbName)
    output.writeFieldEnd()
  }
  if (null != this.owner) {
    output.writeFieldBegin('owner', Thrift.Type.STRING, 3)
    output.writeString(this.owner)
    output.writeFieldEnd()
  }
  if (null != this.createTime) {
    output.writeFieldBegin('createTime', Thrift.Type.I32, 4)
    output.writeI32(this.createTime)
    output.writeFieldEnd()
  }
  if (null != this.lastAccessTime) {
    output.writeFieldBegin('lastAccessTime', Thrift.Type.I32, 5)
    output.writeI32(this.lastAccessTime)
    output.writeFieldEnd()
  }
  if (null != this.retention) {
    output.writeFieldBegin('retention', Thrift.Type.I32, 6)
    output.writeI32(this.retention)
    output.writeFieldEnd()
  }
  if (null != this.sd) {
    output.writeFieldBegin('sd', Thrift.Type.STRUCT, 7)
    this.sd.write(output)
    output.writeFieldEnd()
  }
  if (null != this.partitionKeys) {
    output.writeFieldBegin('partitionKeys', Thrift.Type.LIST, 8)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.partitionKeys.length)
      {
        for(var iter130 in this.partitionKeys)
        {
          if (this.partitionKeys.hasOwnProperty(iter130))
          {
            iter130=this.partitionKeys[iter130]
            iter130.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.parameters) {
    output.writeFieldBegin('parameters', Thrift.Type.MAP, 9)
    {
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.parameters))
      {
        for(var kiter131 in this.parameters)        {
          if (this.parameters.hasOwnProperty(kiter131))
          {
            var viter132 = this.parameters[kiter131]
            output.writeString(kiter131)
            output.writeString(viter132)
          }
        }
      }
      output.writeMapEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.viewOriginalText) {
    output.writeFieldBegin('viewOriginalText', Thrift.Type.STRING, 10)
    output.writeString(this.viewOriginalText)
    output.writeFieldEnd()
  }
  if (null != this.viewExpandedText) {
    output.writeFieldBegin('viewExpandedText', Thrift.Type.STRING, 11)
    output.writeString(this.viewExpandedText)
    output.writeFieldEnd()
  }
  if (null != this.tableType) {
    output.writeFieldBegin('tableType', Thrift.Type.STRING, 12)
    output.writeString(this.tableType)
    output.writeFieldEnd()
  }
  if (null != this.privileges) {
    output.writeFieldBegin('privileges', Thrift.Type.STRUCT, 13)
    this.privileges.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Partition = module.exports.Partition = function(args){
  this.values = null
  this.dbName = null
  this.tableName = null
  this.createTime = null
  this.lastAccessTime = null
  this.sd = null
  this.parameters = null
  this.privileges = null
if( args != null ){  if (null != args.values)
  this.values = args.values
  if (null != args.dbName)
  this.dbName = args.dbName
  if (null != args.tableName)
  this.tableName = args.tableName
  if (null != args.createTime)
  this.createTime = args.createTime
  if (null != args.lastAccessTime)
  this.lastAccessTime = args.lastAccessTime
  if (null != args.sd)
  this.sd = args.sd
  if (null != args.parameters)
  this.parameters = args.parameters
  if (null != args.privileges)
  this.privileges = args.privileges
}}
Partition.prototype = {}
Partition.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.LIST) {
        {
          var _size133 = 0
          var rtmp3
          this.values = []
          var _etype136 = 0
          rtmp3 = input.readListBegin()
          _etype136 = rtmp3.etype
          _size133 = rtmp3.size
          for (var _i137 = 0; _i137 < _size133; ++_i137)
          {
            var elem138 = null
            elem138 = input.readString()
            this.values.push(elem138)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.dbName = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.I32) {
        this.createTime = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 5:      if (ftype == Thrift.Type.I32) {
        this.lastAccessTime = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 6:      if (ftype == Thrift.Type.STRUCT) {
        this.sd = new ttypes.StorageDescriptor()
        this.sd.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 7:      if (ftype == Thrift.Type.MAP) {
        {
          var _size139 = 0
          var rtmp3
          this.parameters = {}
          var _ktype140 = 0
          var _vtype141 = 0
          rtmp3 = input.readMapBegin()
          _ktype140= rtmp3.ktype
          _vtype141= rtmp3.vtype
          _size139= rtmp3.size
          for (var _i143 = 0; _i143 < _size139; ++_i143)
          {
            key144 = null
            val145 = null
            key144 = input.readString()
            val145 = input.readString()
            this.parameters[key144] = val145
          }
          input.readMapEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 8:      if (ftype == Thrift.Type.STRUCT) {
        this.privileges = new ttypes.PrincipalPrivilegeSet()
        this.privileges.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Partition.prototype.write = function(output){ 
  output.writeStructBegin('Partition')
  if (null != this.values) {
    output.writeFieldBegin('values', Thrift.Type.LIST, 1)
    {
      output.writeListBegin(Thrift.Type.STRING, this.values.length)
      {
        for(var iter146 in this.values)
        {
          if (this.values.hasOwnProperty(iter146))
          {
            iter146=this.values[iter146]
            output.writeString(iter146)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.dbName) {
    output.writeFieldBegin('dbName', Thrift.Type.STRING, 2)
    output.writeString(this.dbName)
    output.writeFieldEnd()
  }
  if (null != this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 3)
    output.writeString(this.tableName)
    output.writeFieldEnd()
  }
  if (null != this.createTime) {
    output.writeFieldBegin('createTime', Thrift.Type.I32, 4)
    output.writeI32(this.createTime)
    output.writeFieldEnd()
  }
  if (null != this.lastAccessTime) {
    output.writeFieldBegin('lastAccessTime', Thrift.Type.I32, 5)
    output.writeI32(this.lastAccessTime)
    output.writeFieldEnd()
  }
  if (null != this.sd) {
    output.writeFieldBegin('sd', Thrift.Type.STRUCT, 6)
    this.sd.write(output)
    output.writeFieldEnd()
  }
  if (null != this.parameters) {
    output.writeFieldBegin('parameters', Thrift.Type.MAP, 7)
    {
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.parameters))
      {
        for(var kiter147 in this.parameters)        {
          if (this.parameters.hasOwnProperty(kiter147))
          {
            var viter148 = this.parameters[kiter147]
            output.writeString(kiter147)
            output.writeString(viter148)
          }
        }
      }
      output.writeMapEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.privileges) {
    output.writeFieldBegin('privileges', Thrift.Type.STRUCT, 8)
    this.privileges.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Index = module.exports.Index = function(args){
  this.indexName = null
  this.indexHandlerClass = null
  this.dbName = null
  this.origTableName = null
  this.createTime = null
  this.lastAccessTime = null
  this.indexTableName = null
  this.sd = null
  this.parameters = null
  this.deferredRebuild = null
if( args != null ){  if (null != args.indexName)
  this.indexName = args.indexName
  if (null != args.indexHandlerClass)
  this.indexHandlerClass = args.indexHandlerClass
  if (null != args.dbName)
  this.dbName = args.dbName
  if (null != args.origTableName)
  this.origTableName = args.origTableName
  if (null != args.createTime)
  this.createTime = args.createTime
  if (null != args.lastAccessTime)
  this.lastAccessTime = args.lastAccessTime
  if (null != args.indexTableName)
  this.indexTableName = args.indexTableName
  if (null != args.sd)
  this.sd = args.sd
  if (null != args.parameters)
  this.parameters = args.parameters
  if (null != args.deferredRebuild)
  this.deferredRebuild = args.deferredRebuild
}}
Index.prototype = {}
Index.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.indexName = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.indexHandlerClass = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRING) {
        this.dbName = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.STRING) {
        this.origTableName = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 5:      if (ftype == Thrift.Type.I32) {
        this.createTime = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 6:      if (ftype == Thrift.Type.I32) {
        this.lastAccessTime = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 7:      if (ftype == Thrift.Type.STRING) {
        this.indexTableName = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 8:      if (ftype == Thrift.Type.STRUCT) {
        this.sd = new ttypes.StorageDescriptor()
        this.sd.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 9:      if (ftype == Thrift.Type.MAP) {
        {
          var _size149 = 0
          var rtmp3
          this.parameters = {}
          var _ktype150 = 0
          var _vtype151 = 0
          rtmp3 = input.readMapBegin()
          _ktype150= rtmp3.ktype
          _vtype151= rtmp3.vtype
          _size149= rtmp3.size
          for (var _i153 = 0; _i153 < _size149; ++_i153)
          {
            key154 = null
            val155 = null
            key154 = input.readString()
            val155 = input.readString()
            this.parameters[key154] = val155
          }
          input.readMapEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 10:      if (ftype == Thrift.Type.BOOL) {
        this.deferredRebuild = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Index.prototype.write = function(output){ 
  output.writeStructBegin('Index')
  if (null != this.indexName) {
    output.writeFieldBegin('indexName', Thrift.Type.STRING, 1)
    output.writeString(this.indexName)
    output.writeFieldEnd()
  }
  if (null != this.indexHandlerClass) {
    output.writeFieldBegin('indexHandlerClass', Thrift.Type.STRING, 2)
    output.writeString(this.indexHandlerClass)
    output.writeFieldEnd()
  }
  if (null != this.dbName) {
    output.writeFieldBegin('dbName', Thrift.Type.STRING, 3)
    output.writeString(this.dbName)
    output.writeFieldEnd()
  }
  if (null != this.origTableName) {
    output.writeFieldBegin('origTableName', Thrift.Type.STRING, 4)
    output.writeString(this.origTableName)
    output.writeFieldEnd()
  }
  if (null != this.createTime) {
    output.writeFieldBegin('createTime', Thrift.Type.I32, 5)
    output.writeI32(this.createTime)
    output.writeFieldEnd()
  }
  if (null != this.lastAccessTime) {
    output.writeFieldBegin('lastAccessTime', Thrift.Type.I32, 6)
    output.writeI32(this.lastAccessTime)
    output.writeFieldEnd()
  }
  if (null != this.indexTableName) {
    output.writeFieldBegin('indexTableName', Thrift.Type.STRING, 7)
    output.writeString(this.indexTableName)
    output.writeFieldEnd()
  }
  if (null != this.sd) {
    output.writeFieldBegin('sd', Thrift.Type.STRUCT, 8)
    this.sd.write(output)
    output.writeFieldEnd()
  }
  if (null != this.parameters) {
    output.writeFieldBegin('parameters', Thrift.Type.MAP, 9)
    {
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.parameters))
      {
        for(var kiter156 in this.parameters)        {
          if (this.parameters.hasOwnProperty(kiter156))
          {
            var viter157 = this.parameters[kiter156]
            output.writeString(kiter156)
            output.writeString(viter157)
          }
        }
      }
      output.writeMapEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.deferredRebuild) {
    output.writeFieldBegin('deferredRebuild', Thrift.Type.BOOL, 10)
    output.writeBool(this.deferredRebuild)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Schema = module.exports.Schema = function(args){
  this.fieldSchemas = null
  this.properties = null
if( args != null ){  if (null != args.fieldSchemas)
  this.fieldSchemas = args.fieldSchemas
  if (null != args.properties)
  this.properties = args.properties
}}
Schema.prototype = {}
Schema.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.LIST) {
        {
          var _size158 = 0
          var rtmp3
          this.fieldSchemas = []
          var _etype161 = 0
          rtmp3 = input.readListBegin()
          _etype161 = rtmp3.etype
          _size158 = rtmp3.size
          for (var _i162 = 0; _i162 < _size158; ++_i162)
          {
            var elem163 = null
            elem163 = new ttypes.FieldSchema()
            elem163.read(input)
            this.fieldSchemas.push(elem163)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.MAP) {
        {
          var _size164 = 0
          var rtmp3
          this.properties = {}
          var _ktype165 = 0
          var _vtype166 = 0
          rtmp3 = input.readMapBegin()
          _ktype165= rtmp3.ktype
          _vtype166= rtmp3.vtype
          _size164= rtmp3.size
          for (var _i168 = 0; _i168 < _size164; ++_i168)
          {
            key169 = null
            val170 = null
            key169 = input.readString()
            val170 = input.readString()
            this.properties[key169] = val170
          }
          input.readMapEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Schema.prototype.write = function(output){ 
  output.writeStructBegin('Schema')
  if (null != this.fieldSchemas) {
    output.writeFieldBegin('fieldSchemas', Thrift.Type.LIST, 1)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.fieldSchemas.length)
      {
        for(var iter171 in this.fieldSchemas)
        {
          if (this.fieldSchemas.hasOwnProperty(iter171))
          {
            iter171=this.fieldSchemas[iter171]
            iter171.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.properties) {
    output.writeFieldBegin('properties', Thrift.Type.MAP, 2)
    {
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.properties))
      {
        for(var kiter172 in this.properties)        {
          if (this.properties.hasOwnProperty(kiter172))
          {
            var viter173 = this.properties[kiter172]
            output.writeString(kiter172)
            output.writeString(viter173)
          }
        }
      }
      output.writeMapEnd()
    }
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var MetaException = module.exports.MetaException = function(args){
  Thrift.TException.call(this, "MetaException")
  this.name = "MetaException"
  this.message = null
if( args != null ){  if (null != args.message)
  this.message = args.message
}}
Thrift.inherits(MetaException, Thrift.TException)
MetaException.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

MetaException.prototype.write = function(output){ 
  output.writeStructBegin('MetaException')
  if (null != this.message) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1)
    output.writeString(this.message)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var UnknownTableException = module.exports.UnknownTableException = function(args){
  Thrift.TException.call(this, "UnknownTableException")
  this.name = "UnknownTableException"
  this.message = null
if( args != null ){  if (null != args.message)
  this.message = args.message
}}
Thrift.inherits(UnknownTableException, Thrift.TException)
UnknownTableException.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

UnknownTableException.prototype.write = function(output){ 
  output.writeStructBegin('UnknownTableException')
  if (null != this.message) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1)
    output.writeString(this.message)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var UnknownDBException = module.exports.UnknownDBException = function(args){
  Thrift.TException.call(this, "UnknownDBException")
  this.name = "UnknownDBException"
  this.message = null
if( args != null ){  if (null != args.message)
  this.message = args.message
}}
Thrift.inherits(UnknownDBException, Thrift.TException)
UnknownDBException.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

UnknownDBException.prototype.write = function(output){ 
  output.writeStructBegin('UnknownDBException')
  if (null != this.message) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1)
    output.writeString(this.message)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var AlreadyExistsException = module.exports.AlreadyExistsException = function(args){
  Thrift.TException.call(this, "AlreadyExistsException")
  this.name = "AlreadyExistsException"
  this.message = null
if( args != null ){  if (null != args.message)
  this.message = args.message
}}
Thrift.inherits(AlreadyExistsException, Thrift.TException)
AlreadyExistsException.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

AlreadyExistsException.prototype.write = function(output){ 
  output.writeStructBegin('AlreadyExistsException')
  if (null != this.message) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1)
    output.writeString(this.message)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var InvalidObjectException = module.exports.InvalidObjectException = function(args){
  Thrift.TException.call(this, "InvalidObjectException")
  this.name = "InvalidObjectException"
  this.message = null
if( args != null ){  if (null != args.message)
  this.message = args.message
}}
Thrift.inherits(InvalidObjectException, Thrift.TException)
InvalidObjectException.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

InvalidObjectException.prototype.write = function(output){ 
  output.writeStructBegin('InvalidObjectException')
  if (null != this.message) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1)
    output.writeString(this.message)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoSuchObjectException = module.exports.NoSuchObjectException = function(args){
  Thrift.TException.call(this, "NoSuchObjectException")
  this.name = "NoSuchObjectException"
  this.message = null
if( args != null ){  if (null != args.message)
  this.message = args.message
}}
Thrift.inherits(NoSuchObjectException, Thrift.TException)
NoSuchObjectException.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoSuchObjectException.prototype.write = function(output){ 
  output.writeStructBegin('NoSuchObjectException')
  if (null != this.message) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1)
    output.writeString(this.message)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var IndexAlreadyExistsException = module.exports.IndexAlreadyExistsException = function(args){
  Thrift.TException.call(this, "IndexAlreadyExistsException")
  this.name = "IndexAlreadyExistsException"
  this.message = null
if( args != null ){  if (null != args.message)
  this.message = args.message
}}
Thrift.inherits(IndexAlreadyExistsException, Thrift.TException)
IndexAlreadyExistsException.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

IndexAlreadyExistsException.prototype.write = function(output){ 
  output.writeStructBegin('IndexAlreadyExistsException')
  if (null != this.message) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1)
    output.writeString(this.message)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var InvalidOperationException = module.exports.InvalidOperationException = function(args){
  Thrift.TException.call(this, "InvalidOperationException")
  this.name = "InvalidOperationException"
  this.message = null
if( args != null ){  if (null != args.message)
  this.message = args.message
}}
Thrift.inherits(InvalidOperationException, Thrift.TException)
InvalidOperationException.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

InvalidOperationException.prototype.write = function(output){ 
  output.writeStructBegin('InvalidOperationException')
  if (null != this.message) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1)
    output.writeString(this.message)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ConfigValSecurityException = module.exports.ConfigValSecurityException = function(args){
  Thrift.TException.call(this, "ConfigValSecurityException")
  this.name = "ConfigValSecurityException"
  this.message = null
if( args != null ){  if (null != args.message)
  this.message = args.message
}}
Thrift.inherits(ConfigValSecurityException, Thrift.TException)
ConfigValSecurityException.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ConfigValSecurityException.prototype.write = function(output){ 
  output.writeStructBegin('ConfigValSecurityException')
  if (null != this.message) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1)
    output.writeString(this.message)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

