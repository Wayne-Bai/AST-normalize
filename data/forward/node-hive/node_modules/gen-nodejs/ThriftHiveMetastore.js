//
// Autogenerated by Thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var fb303_ttypes = require('./fb303_types')


var FacebookService = require('./FacebookService')
var FacebookServiceClient = FacebookService.Client
var ttypes = require('./hive_metastore_types');
//HELPER FUNCTIONS AND STRUCTURES

var ThriftHiveMetastore_create_database_args = function(args){
  this.database = null
if( args != null ){  if (null != args.database)
  this.database = args.database
}}
ThriftHiveMetastore_create_database_args.prototype = {}
ThriftHiveMetastore_create_database_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.database = new ttypes.Database()
        this.database.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_create_database_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_create_database_args')
  if (null != this.database) {
    output.writeFieldBegin('database', Thrift.Type.STRUCT, 1)
    this.database.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_create_database_result = function(args){
  this.o1 = null
  this.o2 = null
  this.o3 = null
if( args != null ){  if (null != args.o1)
  this.o1 = args.o1
  if (null != args.o2)
  this.o2 = args.o2
  if (null != args.o3)
  this.o3 = args.o3
}}
ThriftHiveMetastore_create_database_result.prototype = {}
ThriftHiveMetastore_create_database_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.AlreadyExistsException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.InvalidObjectException()
        this.o2.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException()
        this.o3.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_create_database_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_create_database_result')
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o3) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_database_args = function(args){
  this.name = null
if( args != null ){  if (null != args.name)
  this.name = args.name
}}
ThriftHiveMetastore_get_database_args.prototype = {}
ThriftHiveMetastore_get_database_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_database_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_database_args')
  if (null != this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1)
    output.writeString(this.name)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_database_result = function(args){
  this.success = null
  this.o1 = null
  this.o2 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
  if (null != args.o2)
  this.o2 = args.o2
}}
ThriftHiveMetastore_get_database_result.prototype = {}
ThriftHiveMetastore_get_database_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Database()
        this.success.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException()
        this.o2.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_database_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_database_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_drop_database_args = function(args){
  this.name = null
  this.deleteData = null
if( args != null ){  if (null != args.name)
  this.name = args.name
  if (null != args.deleteData)
  this.deleteData = args.deleteData
}}
ThriftHiveMetastore_drop_database_args.prototype = {}
ThriftHiveMetastore_drop_database_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.BOOL) {
        this.deleteData = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_drop_database_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_drop_database_args')
  if (null != this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1)
    output.writeString(this.name)
    output.writeFieldEnd()
  }
  if (null != this.deleteData) {
    output.writeFieldBegin('deleteData', Thrift.Type.BOOL, 2)
    output.writeBool(this.deleteData)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_drop_database_result = function(args){
  this.o1 = null
  this.o2 = null
  this.o3 = null
if( args != null ){  if (null != args.o1)
  this.o1 = args.o1
  if (null != args.o2)
  this.o2 = args.o2
  if (null != args.o3)
  this.o3 = args.o3
}}
ThriftHiveMetastore_drop_database_result.prototype = {}
ThriftHiveMetastore_drop_database_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.InvalidOperationException()
        this.o2.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException()
        this.o3.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_drop_database_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_drop_database_result')
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o3) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_databases_args = function(args){
  this.pattern = null
if( args != null ){  if (null != args.pattern)
  this.pattern = args.pattern
}}
ThriftHiveMetastore_get_databases_args.prototype = {}
ThriftHiveMetastore_get_databases_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.pattern = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_databases_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_databases_args')
  if (null != this.pattern) {
    output.writeFieldBegin('pattern', Thrift.Type.STRING, 1)
    output.writeString(this.pattern)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_databases_result = function(args){
  this.success = null
  this.o1 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
}}
ThriftHiveMetastore_get_databases_result.prototype = {}
ThriftHiveMetastore_get_databases_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.LIST) {
        {
          var _size174 = 0
          var rtmp3
          this.success = []
          var _etype177 = 0
          rtmp3 = input.readListBegin()
          _etype177 = rtmp3.etype
          _size174 = rtmp3.size
          for (var _i178 = 0; _i178 < _size174; ++_i178)
          {
            var elem179 = null
            elem179 = input.readString()
            this.success.push(elem179)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_databases_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_databases_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    {
      output.writeListBegin(Thrift.Type.STRING, this.success.length)
      {
        for(var iter180 in this.success)
        {
          if (this.success.hasOwnProperty(iter180))
          {
            iter180=this.success[iter180]
            output.writeString(iter180)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_all_databases_args = function(args){
}
ThriftHiveMetastore_get_all_databases_args.prototype = {}
ThriftHiveMetastore_get_all_databases_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_all_databases_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_all_databases_args')
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_all_databases_result = function(args){
  this.success = null
  this.o1 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
}}
ThriftHiveMetastore_get_all_databases_result.prototype = {}
ThriftHiveMetastore_get_all_databases_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.LIST) {
        {
          var _size181 = 0
          var rtmp3
          this.success = []
          var _etype184 = 0
          rtmp3 = input.readListBegin()
          _etype184 = rtmp3.etype
          _size181 = rtmp3.size
          for (var _i185 = 0; _i185 < _size181; ++_i185)
          {
            var elem186 = null
            elem186 = input.readString()
            this.success.push(elem186)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_all_databases_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_all_databases_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    {
      output.writeListBegin(Thrift.Type.STRING, this.success.length)
      {
        for(var iter187 in this.success)
        {
          if (this.success.hasOwnProperty(iter187))
          {
            iter187=this.success[iter187]
            output.writeString(iter187)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_alter_database_args = function(args){
  this.dbname = null
  this.db = null
if( args != null ){  if (null != args.dbname)
  this.dbname = args.dbname
  if (null != args.db)
  this.db = args.db
}}
ThriftHiveMetastore_alter_database_args.prototype = {}
ThriftHiveMetastore_alter_database_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.dbname = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.db = new ttypes.Database()
        this.db.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_alter_database_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_alter_database_args')
  if (null != this.dbname) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 1)
    output.writeString(this.dbname)
    output.writeFieldEnd()
  }
  if (null != this.db) {
    output.writeFieldBegin('db', Thrift.Type.STRUCT, 2)
    this.db.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_alter_database_result = function(args){
  this.o1 = null
  this.o2 = null
if( args != null ){  if (null != args.o1)
  this.o1 = args.o1
  if (null != args.o2)
  this.o2 = args.o2
}}
ThriftHiveMetastore_alter_database_result.prototype = {}
ThriftHiveMetastore_alter_database_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.NoSuchObjectException()
        this.o2.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_alter_database_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_alter_database_result')
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_type_args = function(args){
  this.name = null
if( args != null ){  if (null != args.name)
  this.name = args.name
}}
ThriftHiveMetastore_get_type_args.prototype = {}
ThriftHiveMetastore_get_type_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_type_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_type_args')
  if (null != this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1)
    output.writeString(this.name)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_type_result = function(args){
  this.success = null
  this.o1 = null
  this.o2 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
  if (null != args.o2)
  this.o2 = args.o2
}}
ThriftHiveMetastore_get_type_result.prototype = {}
ThriftHiveMetastore_get_type_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Type()
        this.success.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.NoSuchObjectException()
        this.o2.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_type_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_type_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_create_type_args = function(args){
  this.type = null
if( args != null ){  if (null != args.type)
  this.type = args.type
}}
ThriftHiveMetastore_create_type_args.prototype = {}
ThriftHiveMetastore_create_type_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.type = new ttypes.Type()
        this.type.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_create_type_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_create_type_args')
  if (null != this.type) {
    output.writeFieldBegin('type', Thrift.Type.STRUCT, 1)
    this.type.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_create_type_result = function(args){
  this.success = null
  this.o1 = null
  this.o2 = null
  this.o3 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
  if (null != args.o2)
  this.o2 = args.o2
  if (null != args.o3)
  this.o3 = args.o3
}}
ThriftHiveMetastore_create_type_result.prototype = {}
ThriftHiveMetastore_create_type_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.AlreadyExistsException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.InvalidObjectException()
        this.o2.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException()
        this.o3.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_create_type_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_create_type_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0)
    output.writeBool(this.success)
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o3) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_drop_type_args = function(args){
  this.type = null
if( args != null ){  if (null != args.type)
  this.type = args.type
}}
ThriftHiveMetastore_drop_type_args.prototype = {}
ThriftHiveMetastore_drop_type_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_drop_type_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_drop_type_args')
  if (null != this.type) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 1)
    output.writeString(this.type)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_drop_type_result = function(args){
  this.success = null
  this.o1 = null
  this.o2 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
  if (null != args.o2)
  this.o2 = args.o2
}}
ThriftHiveMetastore_drop_type_result.prototype = {}
ThriftHiveMetastore_drop_type_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.NoSuchObjectException()
        this.o2.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_drop_type_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_drop_type_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0)
    output.writeBool(this.success)
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_type_all_args = function(args){
  this.name = null
if( args != null ){  if (null != args.name)
  this.name = args.name
}}
ThriftHiveMetastore_get_type_all_args.prototype = {}
ThriftHiveMetastore_get_type_all_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_type_all_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_type_all_args')
  if (null != this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1)
    output.writeString(this.name)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_type_all_result = function(args){
  this.success = null
  this.o2 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o2)
  this.o2 = args.o2
}}
ThriftHiveMetastore_get_type_all_result.prototype = {}
ThriftHiveMetastore_get_type_all_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.MAP) {
        {
          var _size188 = 0
          var rtmp3
          this.success = {}
          var _ktype189 = 0
          var _vtype190 = 0
          rtmp3 = input.readMapBegin()
          _ktype189= rtmp3.ktype
          _vtype190= rtmp3.vtype
          _size188= rtmp3.size
          for (var _i192 = 0; _i192 < _size188; ++_i192)
          {
            key193 = null
            val194 = null
            key193 = input.readString()
            val194 = new ttypes.Type()
            val194.read(input)
            this.success[key193] = val194
          }
          input.readMapEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException()
        this.o2.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_type_all_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_type_all_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0)
    {
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success))
      {
        for(var kiter195 in this.success)        {
          if (this.success.hasOwnProperty(kiter195))
          {
            var viter196 = this.success[kiter195]
            output.writeString(kiter195)
            viter196.write(output)
          }
        }
      }
      output.writeMapEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 1)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_fields_args = function(args){
  this.db_name = null
  this.table_name = null
if( args != null ){  if (null != args.db_name)
  this.db_name = args.db_name
  if (null != args.table_name)
  this.table_name = args.table_name
}}
ThriftHiveMetastore_get_fields_args.prototype = {}
ThriftHiveMetastore_get_fields_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_fields_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_fields_args')
  if (null != this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (null != this.table_name) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2)
    output.writeString(this.table_name)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_fields_result = function(args){
  this.success = null
  this.o1 = null
  this.o2 = null
  this.o3 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
  if (null != args.o2)
  this.o2 = args.o2
  if (null != args.o3)
  this.o3 = args.o3
}}
ThriftHiveMetastore_get_fields_result.prototype = {}
ThriftHiveMetastore_get_fields_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.LIST) {
        {
          var _size197 = 0
          var rtmp3
          this.success = []
          var _etype200 = 0
          rtmp3 = input.readListBegin()
          _etype200 = rtmp3.etype
          _size197 = rtmp3.size
          for (var _i201 = 0; _i201 < _size197; ++_i201)
          {
            var elem202 = null
            elem202 = new ttypes.FieldSchema()
            elem202.read(input)
            this.success.push(elem202)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.UnknownTableException()
        this.o2.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.UnknownDBException()
        this.o3.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_fields_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_fields_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length)
      {
        for(var iter203 in this.success)
        {
          if (this.success.hasOwnProperty(iter203))
          {
            iter203=this.success[iter203]
            iter203.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o3) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_schema_args = function(args){
  this.db_name = null
  this.table_name = null
if( args != null ){  if (null != args.db_name)
  this.db_name = args.db_name
  if (null != args.table_name)
  this.table_name = args.table_name
}}
ThriftHiveMetastore_get_schema_args.prototype = {}
ThriftHiveMetastore_get_schema_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_schema_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_schema_args')
  if (null != this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (null != this.table_name) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2)
    output.writeString(this.table_name)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_schema_result = function(args){
  this.success = null
  this.o1 = null
  this.o2 = null
  this.o3 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
  if (null != args.o2)
  this.o2 = args.o2
  if (null != args.o3)
  this.o3 = args.o3
}}
ThriftHiveMetastore_get_schema_result.prototype = {}
ThriftHiveMetastore_get_schema_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.LIST) {
        {
          var _size204 = 0
          var rtmp3
          this.success = []
          var _etype207 = 0
          rtmp3 = input.readListBegin()
          _etype207 = rtmp3.etype
          _size204 = rtmp3.size
          for (var _i208 = 0; _i208 < _size204; ++_i208)
          {
            var elem209 = null
            elem209 = new ttypes.FieldSchema()
            elem209.read(input)
            this.success.push(elem209)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.UnknownTableException()
        this.o2.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.UnknownDBException()
        this.o3.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_schema_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_schema_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length)
      {
        for(var iter210 in this.success)
        {
          if (this.success.hasOwnProperty(iter210))
          {
            iter210=this.success[iter210]
            iter210.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o3) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_create_table_args = function(args){
  this.tbl = null
if( args != null ){  if (null != args.tbl)
  this.tbl = args.tbl
}}
ThriftHiveMetastore_create_table_args.prototype = {}
ThriftHiveMetastore_create_table_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.tbl = new ttypes.Table()
        this.tbl.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_create_table_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_create_table_args')
  if (null != this.tbl) {
    output.writeFieldBegin('tbl', Thrift.Type.STRUCT, 1)
    this.tbl.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_create_table_result = function(args){
  this.o1 = null
  this.o2 = null
  this.o3 = null
  this.o4 = null
if( args != null ){  if (null != args.o1)
  this.o1 = args.o1
  if (null != args.o2)
  this.o2 = args.o2
  if (null != args.o3)
  this.o3 = args.o3
  if (null != args.o4)
  this.o4 = args.o4
}}
ThriftHiveMetastore_create_table_result.prototype = {}
ThriftHiveMetastore_create_table_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.AlreadyExistsException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.InvalidObjectException()
        this.o2.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException()
        this.o3.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.STRUCT) {
        this.o4 = new ttypes.NoSuchObjectException()
        this.o4.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_create_table_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_create_table_result')
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o3) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o4) {
    output.writeFieldBegin('o4', Thrift.Type.STRUCT, 4)
    this.o4.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_drop_table_args = function(args){
  this.dbname = null
  this.name = null
  this.deleteData = null
if( args != null ){  if (null != args.dbname)
  this.dbname = args.dbname
  if (null != args.name)
  this.name = args.name
  if (null != args.deleteData)
  this.deleteData = args.deleteData
}}
ThriftHiveMetastore_drop_table_args.prototype = {}
ThriftHiveMetastore_drop_table_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.dbname = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.BOOL) {
        this.deleteData = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_drop_table_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_drop_table_args')
  if (null != this.dbname) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 1)
    output.writeString(this.dbname)
    output.writeFieldEnd()
  }
  if (null != this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2)
    output.writeString(this.name)
    output.writeFieldEnd()
  }
  if (null != this.deleteData) {
    output.writeFieldBegin('deleteData', Thrift.Type.BOOL, 3)
    output.writeBool(this.deleteData)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_drop_table_result = function(args){
  this.o1 = null
  this.o3 = null
if( args != null ){  if (null != args.o1)
  this.o1 = args.o1
  if (null != args.o3)
  this.o3 = args.o3
}}
ThriftHiveMetastore_drop_table_result.prototype = {}
ThriftHiveMetastore_drop_table_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException()
        this.o3.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_drop_table_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_drop_table_result')
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o3) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 2)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_tables_args = function(args){
  this.db_name = null
  this.pattern = null
if( args != null ){  if (null != args.db_name)
  this.db_name = args.db_name
  if (null != args.pattern)
  this.pattern = args.pattern
}}
ThriftHiveMetastore_get_tables_args.prototype = {}
ThriftHiveMetastore_get_tables_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.pattern = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_tables_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_tables_args')
  if (null != this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (null != this.pattern) {
    output.writeFieldBegin('pattern', Thrift.Type.STRING, 2)
    output.writeString(this.pattern)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_tables_result = function(args){
  this.success = null
  this.o1 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
}}
ThriftHiveMetastore_get_tables_result.prototype = {}
ThriftHiveMetastore_get_tables_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.LIST) {
        {
          var _size211 = 0
          var rtmp3
          this.success = []
          var _etype214 = 0
          rtmp3 = input.readListBegin()
          _etype214 = rtmp3.etype
          _size211 = rtmp3.size
          for (var _i215 = 0; _i215 < _size211; ++_i215)
          {
            var elem216 = null
            elem216 = input.readString()
            this.success.push(elem216)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_tables_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_tables_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    {
      output.writeListBegin(Thrift.Type.STRING, this.success.length)
      {
        for(var iter217 in this.success)
        {
          if (this.success.hasOwnProperty(iter217))
          {
            iter217=this.success[iter217]
            output.writeString(iter217)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_all_tables_args = function(args){
  this.db_name = null
if( args != null ){  if (null != args.db_name)
  this.db_name = args.db_name
}}
ThriftHiveMetastore_get_all_tables_args.prototype = {}
ThriftHiveMetastore_get_all_tables_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_all_tables_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_all_tables_args')
  if (null != this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_all_tables_result = function(args){
  this.success = null
  this.o1 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
}}
ThriftHiveMetastore_get_all_tables_result.prototype = {}
ThriftHiveMetastore_get_all_tables_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.LIST) {
        {
          var _size218 = 0
          var rtmp3
          this.success = []
          var _etype221 = 0
          rtmp3 = input.readListBegin()
          _etype221 = rtmp3.etype
          _size218 = rtmp3.size
          for (var _i222 = 0; _i222 < _size218; ++_i222)
          {
            var elem223 = null
            elem223 = input.readString()
            this.success.push(elem223)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_all_tables_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_all_tables_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    {
      output.writeListBegin(Thrift.Type.STRING, this.success.length)
      {
        for(var iter224 in this.success)
        {
          if (this.success.hasOwnProperty(iter224))
          {
            iter224=this.success[iter224]
            output.writeString(iter224)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_table_args = function(args){
  this.dbname = null
  this.tbl_name = null
if( args != null ){  if (null != args.dbname)
  this.dbname = args.dbname
  if (null != args.tbl_name)
  this.tbl_name = args.tbl_name
}}
ThriftHiveMetastore_get_table_args.prototype = {}
ThriftHiveMetastore_get_table_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.dbname = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_table_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_table_args')
  if (null != this.dbname) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 1)
    output.writeString(this.dbname)
    output.writeFieldEnd()
  }
  if (null != this.tbl_name) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_table_result = function(args){
  this.success = null
  this.o1 = null
  this.o2 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
  if (null != args.o2)
  this.o2 = args.o2
}}
ThriftHiveMetastore_get_table_result.prototype = {}
ThriftHiveMetastore_get_table_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Table()
        this.success.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.NoSuchObjectException()
        this.o2.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_table_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_table_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_alter_table_args = function(args){
  this.dbname = null
  this.tbl_name = null
  this.new_tbl = null
if( args != null ){  if (null != args.dbname)
  this.dbname = args.dbname
  if (null != args.tbl_name)
  this.tbl_name = args.tbl_name
  if (null != args.new_tbl)
  this.new_tbl = args.new_tbl
}}
ThriftHiveMetastore_alter_table_args.prototype = {}
ThriftHiveMetastore_alter_table_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.dbname = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.new_tbl = new ttypes.Table()
        this.new_tbl.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_alter_table_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_alter_table_args')
  if (null != this.dbname) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 1)
    output.writeString(this.dbname)
    output.writeFieldEnd()
  }
  if (null != this.tbl_name) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (null != this.new_tbl) {
    output.writeFieldBegin('new_tbl', Thrift.Type.STRUCT, 3)
    this.new_tbl.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_alter_table_result = function(args){
  this.o1 = null
  this.o2 = null
if( args != null ){  if (null != args.o1)
  this.o1 = args.o1
  if (null != args.o2)
  this.o2 = args.o2
}}
ThriftHiveMetastore_alter_table_result.prototype = {}
ThriftHiveMetastore_alter_table_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.InvalidOperationException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException()
        this.o2.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_alter_table_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_alter_table_result')
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_add_partition_args = function(args){
  this.new_part = null
if( args != null ){  if (null != args.new_part)
  this.new_part = args.new_part
}}
ThriftHiveMetastore_add_partition_args.prototype = {}
ThriftHiveMetastore_add_partition_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.new_part = new ttypes.Partition()
        this.new_part.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_add_partition_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_add_partition_args')
  if (null != this.new_part) {
    output.writeFieldBegin('new_part', Thrift.Type.STRUCT, 1)
    this.new_part.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_add_partition_result = function(args){
  this.success = null
  this.o1 = null
  this.o2 = null
  this.o3 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
  if (null != args.o2)
  this.o2 = args.o2
  if (null != args.o3)
  this.o3 = args.o3
}}
ThriftHiveMetastore_add_partition_result.prototype = {}
ThriftHiveMetastore_add_partition_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Partition()
        this.success.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.InvalidObjectException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.AlreadyExistsException()
        this.o2.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException()
        this.o3.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_add_partition_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_add_partition_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o3) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_append_partition_args = function(args){
  this.db_name = null
  this.tbl_name = null
  this.part_vals = null
if( args != null ){  if (null != args.db_name)
  this.db_name = args.db_name
  if (null != args.tbl_name)
  this.tbl_name = args.tbl_name
  if (null != args.part_vals)
  this.part_vals = args.part_vals
}}
ThriftHiveMetastore_append_partition_args.prototype = {}
ThriftHiveMetastore_append_partition_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.LIST) {
        {
          var _size225 = 0
          var rtmp3
          this.part_vals = []
          var _etype228 = 0
          rtmp3 = input.readListBegin()
          _etype228 = rtmp3.etype
          _size225 = rtmp3.size
          for (var _i229 = 0; _i229 < _size225; ++_i229)
          {
            var elem230 = null
            elem230 = input.readString()
            this.part_vals.push(elem230)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_append_partition_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_append_partition_args')
  if (null != this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (null != this.tbl_name) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (null != this.part_vals) {
    output.writeFieldBegin('part_vals', Thrift.Type.LIST, 3)
    {
      output.writeListBegin(Thrift.Type.STRING, this.part_vals.length)
      {
        for(var iter231 in this.part_vals)
        {
          if (this.part_vals.hasOwnProperty(iter231))
          {
            iter231=this.part_vals[iter231]
            output.writeString(iter231)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_append_partition_result = function(args){
  this.success = null
  this.o1 = null
  this.o2 = null
  this.o3 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
  if (null != args.o2)
  this.o2 = args.o2
  if (null != args.o3)
  this.o3 = args.o3
}}
ThriftHiveMetastore_append_partition_result.prototype = {}
ThriftHiveMetastore_append_partition_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Partition()
        this.success.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.InvalidObjectException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.AlreadyExistsException()
        this.o2.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException()
        this.o3.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_append_partition_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_append_partition_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o3) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_append_partition_by_name_args = function(args){
  this.db_name = null
  this.tbl_name = null
  this.part_name = null
if( args != null ){  if (null != args.db_name)
  this.db_name = args.db_name
  if (null != args.tbl_name)
  this.tbl_name = args.tbl_name
  if (null != args.part_name)
  this.part_name = args.part_name
}}
ThriftHiveMetastore_append_partition_by_name_args.prototype = {}
ThriftHiveMetastore_append_partition_by_name_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRING) {
        this.part_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_append_partition_by_name_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_append_partition_by_name_args')
  if (null != this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (null != this.tbl_name) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (null != this.part_name) {
    output.writeFieldBegin('part_name', Thrift.Type.STRING, 3)
    output.writeString(this.part_name)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_append_partition_by_name_result = function(args){
  this.success = null
  this.o1 = null
  this.o2 = null
  this.o3 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
  if (null != args.o2)
  this.o2 = args.o2
  if (null != args.o3)
  this.o3 = args.o3
}}
ThriftHiveMetastore_append_partition_by_name_result.prototype = {}
ThriftHiveMetastore_append_partition_by_name_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Partition()
        this.success.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.InvalidObjectException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.AlreadyExistsException()
        this.o2.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException()
        this.o3.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_append_partition_by_name_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_append_partition_by_name_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o3) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_drop_partition_args = function(args){
  this.db_name = null
  this.tbl_name = null
  this.part_vals = null
  this.deleteData = null
if( args != null ){  if (null != args.db_name)
  this.db_name = args.db_name
  if (null != args.tbl_name)
  this.tbl_name = args.tbl_name
  if (null != args.part_vals)
  this.part_vals = args.part_vals
  if (null != args.deleteData)
  this.deleteData = args.deleteData
}}
ThriftHiveMetastore_drop_partition_args.prototype = {}
ThriftHiveMetastore_drop_partition_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.LIST) {
        {
          var _size232 = 0
          var rtmp3
          this.part_vals = []
          var _etype235 = 0
          rtmp3 = input.readListBegin()
          _etype235 = rtmp3.etype
          _size232 = rtmp3.size
          for (var _i236 = 0; _i236 < _size232; ++_i236)
          {
            var elem237 = null
            elem237 = input.readString()
            this.part_vals.push(elem237)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.BOOL) {
        this.deleteData = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_drop_partition_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_drop_partition_args')
  if (null != this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (null != this.tbl_name) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (null != this.part_vals) {
    output.writeFieldBegin('part_vals', Thrift.Type.LIST, 3)
    {
      output.writeListBegin(Thrift.Type.STRING, this.part_vals.length)
      {
        for(var iter238 in this.part_vals)
        {
          if (this.part_vals.hasOwnProperty(iter238))
          {
            iter238=this.part_vals[iter238]
            output.writeString(iter238)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.deleteData) {
    output.writeFieldBegin('deleteData', Thrift.Type.BOOL, 4)
    output.writeBool(this.deleteData)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_drop_partition_result = function(args){
  this.success = null
  this.o1 = null
  this.o2 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
  if (null != args.o2)
  this.o2 = args.o2
}}
ThriftHiveMetastore_drop_partition_result.prototype = {}
ThriftHiveMetastore_drop_partition_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException()
        this.o2.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_drop_partition_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_drop_partition_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0)
    output.writeBool(this.success)
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_drop_partition_by_name_args = function(args){
  this.db_name = null
  this.tbl_name = null
  this.part_name = null
  this.deleteData = null
if( args != null ){  if (null != args.db_name)
  this.db_name = args.db_name
  if (null != args.tbl_name)
  this.tbl_name = args.tbl_name
  if (null != args.part_name)
  this.part_name = args.part_name
  if (null != args.deleteData)
  this.deleteData = args.deleteData
}}
ThriftHiveMetastore_drop_partition_by_name_args.prototype = {}
ThriftHiveMetastore_drop_partition_by_name_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRING) {
        this.part_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.BOOL) {
        this.deleteData = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_drop_partition_by_name_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_drop_partition_by_name_args')
  if (null != this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (null != this.tbl_name) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (null != this.part_name) {
    output.writeFieldBegin('part_name', Thrift.Type.STRING, 3)
    output.writeString(this.part_name)
    output.writeFieldEnd()
  }
  if (null != this.deleteData) {
    output.writeFieldBegin('deleteData', Thrift.Type.BOOL, 4)
    output.writeBool(this.deleteData)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_drop_partition_by_name_result = function(args){
  this.success = null
  this.o1 = null
  this.o2 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
  if (null != args.o2)
  this.o2 = args.o2
}}
ThriftHiveMetastore_drop_partition_by_name_result.prototype = {}
ThriftHiveMetastore_drop_partition_by_name_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException()
        this.o2.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_drop_partition_by_name_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_drop_partition_by_name_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0)
    output.writeBool(this.success)
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partition_args = function(args){
  this.db_name = null
  this.tbl_name = null
  this.part_vals = null
if( args != null ){  if (null != args.db_name)
  this.db_name = args.db_name
  if (null != args.tbl_name)
  this.tbl_name = args.tbl_name
  if (null != args.part_vals)
  this.part_vals = args.part_vals
}}
ThriftHiveMetastore_get_partition_args.prototype = {}
ThriftHiveMetastore_get_partition_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.LIST) {
        {
          var _size239 = 0
          var rtmp3
          this.part_vals = []
          var _etype242 = 0
          rtmp3 = input.readListBegin()
          _etype242 = rtmp3.etype
          _size239 = rtmp3.size
          for (var _i243 = 0; _i243 < _size239; ++_i243)
          {
            var elem244 = null
            elem244 = input.readString()
            this.part_vals.push(elem244)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partition_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_partition_args')
  if (null != this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (null != this.tbl_name) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (null != this.part_vals) {
    output.writeFieldBegin('part_vals', Thrift.Type.LIST, 3)
    {
      output.writeListBegin(Thrift.Type.STRING, this.part_vals.length)
      {
        for(var iter245 in this.part_vals)
        {
          if (this.part_vals.hasOwnProperty(iter245))
          {
            iter245=this.part_vals[iter245]
            output.writeString(iter245)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partition_result = function(args){
  this.success = null
  this.o1 = null
  this.o2 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
  if (null != args.o2)
  this.o2 = args.o2
}}
ThriftHiveMetastore_get_partition_result.prototype = {}
ThriftHiveMetastore_get_partition_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Partition()
        this.success.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.NoSuchObjectException()
        this.o2.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partition_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_partition_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partition_with_auth_args = function(args){
  this.db_name = null
  this.tbl_name = null
  this.part_vals = null
  this.user_name = null
  this.group_names = null
if( args != null ){  if (null != args.db_name)
  this.db_name = args.db_name
  if (null != args.tbl_name)
  this.tbl_name = args.tbl_name
  if (null != args.part_vals)
  this.part_vals = args.part_vals
  if (null != args.user_name)
  this.user_name = args.user_name
  if (null != args.group_names)
  this.group_names = args.group_names
}}
ThriftHiveMetastore_get_partition_with_auth_args.prototype = {}
ThriftHiveMetastore_get_partition_with_auth_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.LIST) {
        {
          var _size246 = 0
          var rtmp3
          this.part_vals = []
          var _etype249 = 0
          rtmp3 = input.readListBegin()
          _etype249 = rtmp3.etype
          _size246 = rtmp3.size
          for (var _i250 = 0; _i250 < _size246; ++_i250)
          {
            var elem251 = null
            elem251 = input.readString()
            this.part_vals.push(elem251)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.STRING) {
        this.user_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 5:      if (ftype == Thrift.Type.LIST) {
        {
          var _size252 = 0
          var rtmp3
          this.group_names = []
          var _etype255 = 0
          rtmp3 = input.readListBegin()
          _etype255 = rtmp3.etype
          _size252 = rtmp3.size
          for (var _i256 = 0; _i256 < _size252; ++_i256)
          {
            var elem257 = null
            elem257 = input.readString()
            this.group_names.push(elem257)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partition_with_auth_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_partition_with_auth_args')
  if (null != this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (null != this.tbl_name) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (null != this.part_vals) {
    output.writeFieldBegin('part_vals', Thrift.Type.LIST, 3)
    {
      output.writeListBegin(Thrift.Type.STRING, this.part_vals.length)
      {
        for(var iter258 in this.part_vals)
        {
          if (this.part_vals.hasOwnProperty(iter258))
          {
            iter258=this.part_vals[iter258]
            output.writeString(iter258)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.user_name) {
    output.writeFieldBegin('user_name', Thrift.Type.STRING, 4)
    output.writeString(this.user_name)
    output.writeFieldEnd()
  }
  if (null != this.group_names) {
    output.writeFieldBegin('group_names', Thrift.Type.LIST, 5)
    {
      output.writeListBegin(Thrift.Type.STRING, this.group_names.length)
      {
        for(var iter259 in this.group_names)
        {
          if (this.group_names.hasOwnProperty(iter259))
          {
            iter259=this.group_names[iter259]
            output.writeString(iter259)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partition_with_auth_result = function(args){
  this.success = null
  this.o1 = null
  this.o2 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
  if (null != args.o2)
  this.o2 = args.o2
}}
ThriftHiveMetastore_get_partition_with_auth_result.prototype = {}
ThriftHiveMetastore_get_partition_with_auth_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Partition()
        this.success.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.NoSuchObjectException()
        this.o2.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partition_with_auth_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_partition_with_auth_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partition_by_name_args = function(args){
  this.db_name = null
  this.tbl_name = null
  this.part_name = null
if( args != null ){  if (null != args.db_name)
  this.db_name = args.db_name
  if (null != args.tbl_name)
  this.tbl_name = args.tbl_name
  if (null != args.part_name)
  this.part_name = args.part_name
}}
ThriftHiveMetastore_get_partition_by_name_args.prototype = {}
ThriftHiveMetastore_get_partition_by_name_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRING) {
        this.part_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partition_by_name_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_partition_by_name_args')
  if (null != this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (null != this.tbl_name) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (null != this.part_name) {
    output.writeFieldBegin('part_name', Thrift.Type.STRING, 3)
    output.writeString(this.part_name)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partition_by_name_result = function(args){
  this.success = null
  this.o1 = null
  this.o2 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
  if (null != args.o2)
  this.o2 = args.o2
}}
ThriftHiveMetastore_get_partition_by_name_result.prototype = {}
ThriftHiveMetastore_get_partition_by_name_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Partition()
        this.success.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.NoSuchObjectException()
        this.o2.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partition_by_name_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_partition_by_name_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partitions_args = function(args){
  this.db_name = null
  this.tbl_name = null
  this.max_parts = -1
if( args != null ){  if (null != args.db_name)
  this.db_name = args.db_name
  if (null != args.tbl_name)
  this.tbl_name = args.tbl_name
  if (null != args.max_parts)
  this.max_parts = args.max_parts
}}
ThriftHiveMetastore_get_partitions_args.prototype = {}
ThriftHiveMetastore_get_partitions_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.I16) {
        this.max_parts = input.readI16()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partitions_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_args')
  if (null != this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (null != this.tbl_name) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (null != this.max_parts) {
    output.writeFieldBegin('max_parts', Thrift.Type.I16, 3)
    output.writeI16(this.max_parts)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partitions_result = function(args){
  this.success = null
  this.o1 = null
  this.o2 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
  if (null != args.o2)
  this.o2 = args.o2
}}
ThriftHiveMetastore_get_partitions_result.prototype = {}
ThriftHiveMetastore_get_partitions_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.LIST) {
        {
          var _size260 = 0
          var rtmp3
          this.success = []
          var _etype263 = 0
          rtmp3 = input.readListBegin()
          _etype263 = rtmp3.etype
          _size260 = rtmp3.size
          for (var _i264 = 0; _i264 < _size260; ++_i264)
          {
            var elem265 = null
            elem265 = new ttypes.Partition()
            elem265.read(input)
            this.success.push(elem265)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException()
        this.o2.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partitions_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length)
      {
        for(var iter266 in this.success)
        {
          if (this.success.hasOwnProperty(iter266))
          {
            iter266=this.success[iter266]
            iter266.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partitions_with_auth_args = function(args){
  this.db_name = null
  this.tbl_name = null
  this.max_parts = -1
  this.user_name = null
  this.group_names = null
if( args != null ){  if (null != args.db_name)
  this.db_name = args.db_name
  if (null != args.tbl_name)
  this.tbl_name = args.tbl_name
  if (null != args.max_parts)
  this.max_parts = args.max_parts
  if (null != args.user_name)
  this.user_name = args.user_name
  if (null != args.group_names)
  this.group_names = args.group_names
}}
ThriftHiveMetastore_get_partitions_with_auth_args.prototype = {}
ThriftHiveMetastore_get_partitions_with_auth_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.I16) {
        this.max_parts = input.readI16()
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.STRING) {
        this.user_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 5:      if (ftype == Thrift.Type.LIST) {
        {
          var _size267 = 0
          var rtmp3
          this.group_names = []
          var _etype270 = 0
          rtmp3 = input.readListBegin()
          _etype270 = rtmp3.etype
          _size267 = rtmp3.size
          for (var _i271 = 0; _i271 < _size267; ++_i271)
          {
            var elem272 = null
            elem272 = input.readString()
            this.group_names.push(elem272)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partitions_with_auth_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_with_auth_args')
  if (null != this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (null != this.tbl_name) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (null != this.max_parts) {
    output.writeFieldBegin('max_parts', Thrift.Type.I16, 3)
    output.writeI16(this.max_parts)
    output.writeFieldEnd()
  }
  if (null != this.user_name) {
    output.writeFieldBegin('user_name', Thrift.Type.STRING, 4)
    output.writeString(this.user_name)
    output.writeFieldEnd()
  }
  if (null != this.group_names) {
    output.writeFieldBegin('group_names', Thrift.Type.LIST, 5)
    {
      output.writeListBegin(Thrift.Type.STRING, this.group_names.length)
      {
        for(var iter273 in this.group_names)
        {
          if (this.group_names.hasOwnProperty(iter273))
          {
            iter273=this.group_names[iter273]
            output.writeString(iter273)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partitions_with_auth_result = function(args){
  this.success = null
  this.o1 = null
  this.o2 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
  if (null != args.o2)
  this.o2 = args.o2
}}
ThriftHiveMetastore_get_partitions_with_auth_result.prototype = {}
ThriftHiveMetastore_get_partitions_with_auth_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.LIST) {
        {
          var _size274 = 0
          var rtmp3
          this.success = []
          var _etype277 = 0
          rtmp3 = input.readListBegin()
          _etype277 = rtmp3.etype
          _size274 = rtmp3.size
          for (var _i278 = 0; _i278 < _size274; ++_i278)
          {
            var elem279 = null
            elem279 = new ttypes.Partition()
            elem279.read(input)
            this.success.push(elem279)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException()
        this.o2.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partitions_with_auth_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_with_auth_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length)
      {
        for(var iter280 in this.success)
        {
          if (this.success.hasOwnProperty(iter280))
          {
            iter280=this.success[iter280]
            iter280.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partition_names_args = function(args){
  this.db_name = null
  this.tbl_name = null
  this.max_parts = -1
if( args != null ){  if (null != args.db_name)
  this.db_name = args.db_name
  if (null != args.tbl_name)
  this.tbl_name = args.tbl_name
  if (null != args.max_parts)
  this.max_parts = args.max_parts
}}
ThriftHiveMetastore_get_partition_names_args.prototype = {}
ThriftHiveMetastore_get_partition_names_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.I16) {
        this.max_parts = input.readI16()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partition_names_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_partition_names_args')
  if (null != this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (null != this.tbl_name) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (null != this.max_parts) {
    output.writeFieldBegin('max_parts', Thrift.Type.I16, 3)
    output.writeI16(this.max_parts)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partition_names_result = function(args){
  this.success = null
  this.o2 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o2)
  this.o2 = args.o2
}}
ThriftHiveMetastore_get_partition_names_result.prototype = {}
ThriftHiveMetastore_get_partition_names_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.LIST) {
        {
          var _size281 = 0
          var rtmp3
          this.success = []
          var _etype284 = 0
          rtmp3 = input.readListBegin()
          _etype284 = rtmp3.etype
          _size281 = rtmp3.size
          for (var _i285 = 0; _i285 < _size281; ++_i285)
          {
            var elem286 = null
            elem286 = input.readString()
            this.success.push(elem286)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException()
        this.o2.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partition_names_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_partition_names_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    {
      output.writeListBegin(Thrift.Type.STRING, this.success.length)
      {
        for(var iter287 in this.success)
        {
          if (this.success.hasOwnProperty(iter287))
          {
            iter287=this.success[iter287]
            output.writeString(iter287)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 1)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partitions_ps_args = function(args){
  this.db_name = null
  this.tbl_name = null
  this.part_vals = null
  this.max_parts = -1
if( args != null ){  if (null != args.db_name)
  this.db_name = args.db_name
  if (null != args.tbl_name)
  this.tbl_name = args.tbl_name
  if (null != args.part_vals)
  this.part_vals = args.part_vals
  if (null != args.max_parts)
  this.max_parts = args.max_parts
}}
ThriftHiveMetastore_get_partitions_ps_args.prototype = {}
ThriftHiveMetastore_get_partitions_ps_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.LIST) {
        {
          var _size288 = 0
          var rtmp3
          this.part_vals = []
          var _etype291 = 0
          rtmp3 = input.readListBegin()
          _etype291 = rtmp3.etype
          _size288 = rtmp3.size
          for (var _i292 = 0; _i292 < _size288; ++_i292)
          {
            var elem293 = null
            elem293 = input.readString()
            this.part_vals.push(elem293)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.I16) {
        this.max_parts = input.readI16()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partitions_ps_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_ps_args')
  if (null != this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (null != this.tbl_name) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (null != this.part_vals) {
    output.writeFieldBegin('part_vals', Thrift.Type.LIST, 3)
    {
      output.writeListBegin(Thrift.Type.STRING, this.part_vals.length)
      {
        for(var iter294 in this.part_vals)
        {
          if (this.part_vals.hasOwnProperty(iter294))
          {
            iter294=this.part_vals[iter294]
            output.writeString(iter294)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.max_parts) {
    output.writeFieldBegin('max_parts', Thrift.Type.I16, 4)
    output.writeI16(this.max_parts)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partitions_ps_result = function(args){
  this.success = null
  this.o1 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
}}
ThriftHiveMetastore_get_partitions_ps_result.prototype = {}
ThriftHiveMetastore_get_partitions_ps_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.LIST) {
        {
          var _size295 = 0
          var rtmp3
          this.success = []
          var _etype298 = 0
          rtmp3 = input.readListBegin()
          _etype298 = rtmp3.etype
          _size295 = rtmp3.size
          for (var _i299 = 0; _i299 < _size295; ++_i299)
          {
            var elem300 = null
            elem300 = new ttypes.Partition()
            elem300.read(input)
            this.success.push(elem300)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partitions_ps_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_ps_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length)
      {
        for(var iter301 in this.success)
        {
          if (this.success.hasOwnProperty(iter301))
          {
            iter301=this.success[iter301]
            iter301.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partitions_ps_with_auth_args = function(args){
  this.db_name = null
  this.tbl_name = null
  this.part_vals = null
  this.max_parts = -1
  this.user_name = null
  this.group_names = null
if( args != null ){  if (null != args.db_name)
  this.db_name = args.db_name
  if (null != args.tbl_name)
  this.tbl_name = args.tbl_name
  if (null != args.part_vals)
  this.part_vals = args.part_vals
  if (null != args.max_parts)
  this.max_parts = args.max_parts
  if (null != args.user_name)
  this.user_name = args.user_name
  if (null != args.group_names)
  this.group_names = args.group_names
}}
ThriftHiveMetastore_get_partitions_ps_with_auth_args.prototype = {}
ThriftHiveMetastore_get_partitions_ps_with_auth_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.LIST) {
        {
          var _size302 = 0
          var rtmp3
          this.part_vals = []
          var _etype305 = 0
          rtmp3 = input.readListBegin()
          _etype305 = rtmp3.etype
          _size302 = rtmp3.size
          for (var _i306 = 0; _i306 < _size302; ++_i306)
          {
            var elem307 = null
            elem307 = input.readString()
            this.part_vals.push(elem307)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.I16) {
        this.max_parts = input.readI16()
      } else {
        input.skip(ftype)
      }
      break
      case 5:      if (ftype == Thrift.Type.STRING) {
        this.user_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 6:      if (ftype == Thrift.Type.LIST) {
        {
          var _size308 = 0
          var rtmp3
          this.group_names = []
          var _etype311 = 0
          rtmp3 = input.readListBegin()
          _etype311 = rtmp3.etype
          _size308 = rtmp3.size
          for (var _i312 = 0; _i312 < _size308; ++_i312)
          {
            var elem313 = null
            elem313 = input.readString()
            this.group_names.push(elem313)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partitions_ps_with_auth_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_ps_with_auth_args')
  if (null != this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (null != this.tbl_name) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (null != this.part_vals) {
    output.writeFieldBegin('part_vals', Thrift.Type.LIST, 3)
    {
      output.writeListBegin(Thrift.Type.STRING, this.part_vals.length)
      {
        for(var iter314 in this.part_vals)
        {
          if (this.part_vals.hasOwnProperty(iter314))
          {
            iter314=this.part_vals[iter314]
            output.writeString(iter314)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.max_parts) {
    output.writeFieldBegin('max_parts', Thrift.Type.I16, 4)
    output.writeI16(this.max_parts)
    output.writeFieldEnd()
  }
  if (null != this.user_name) {
    output.writeFieldBegin('user_name', Thrift.Type.STRING, 5)
    output.writeString(this.user_name)
    output.writeFieldEnd()
  }
  if (null != this.group_names) {
    output.writeFieldBegin('group_names', Thrift.Type.LIST, 6)
    {
      output.writeListBegin(Thrift.Type.STRING, this.group_names.length)
      {
        for(var iter315 in this.group_names)
        {
          if (this.group_names.hasOwnProperty(iter315))
          {
            iter315=this.group_names[iter315]
            output.writeString(iter315)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partitions_ps_with_auth_result = function(args){
  this.success = null
  this.o1 = null
  this.o2 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
  if (null != args.o2)
  this.o2 = args.o2
}}
ThriftHiveMetastore_get_partitions_ps_with_auth_result.prototype = {}
ThriftHiveMetastore_get_partitions_ps_with_auth_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.LIST) {
        {
          var _size316 = 0
          var rtmp3
          this.success = []
          var _etype319 = 0
          rtmp3 = input.readListBegin()
          _etype319 = rtmp3.etype
          _size316 = rtmp3.size
          for (var _i320 = 0; _i320 < _size316; ++_i320)
          {
            var elem321 = null
            elem321 = new ttypes.Partition()
            elem321.read(input)
            this.success.push(elem321)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException()
        this.o2.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partitions_ps_with_auth_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_ps_with_auth_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length)
      {
        for(var iter322 in this.success)
        {
          if (this.success.hasOwnProperty(iter322))
          {
            iter322=this.success[iter322]
            iter322.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partition_names_ps_args = function(args){
  this.db_name = null
  this.tbl_name = null
  this.part_vals = null
  this.max_parts = -1
if( args != null ){  if (null != args.db_name)
  this.db_name = args.db_name
  if (null != args.tbl_name)
  this.tbl_name = args.tbl_name
  if (null != args.part_vals)
  this.part_vals = args.part_vals
  if (null != args.max_parts)
  this.max_parts = args.max_parts
}}
ThriftHiveMetastore_get_partition_names_ps_args.prototype = {}
ThriftHiveMetastore_get_partition_names_ps_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.LIST) {
        {
          var _size323 = 0
          var rtmp3
          this.part_vals = []
          var _etype326 = 0
          rtmp3 = input.readListBegin()
          _etype326 = rtmp3.etype
          _size323 = rtmp3.size
          for (var _i327 = 0; _i327 < _size323; ++_i327)
          {
            var elem328 = null
            elem328 = input.readString()
            this.part_vals.push(elem328)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.I16) {
        this.max_parts = input.readI16()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partition_names_ps_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_partition_names_ps_args')
  if (null != this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (null != this.tbl_name) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (null != this.part_vals) {
    output.writeFieldBegin('part_vals', Thrift.Type.LIST, 3)
    {
      output.writeListBegin(Thrift.Type.STRING, this.part_vals.length)
      {
        for(var iter329 in this.part_vals)
        {
          if (this.part_vals.hasOwnProperty(iter329))
          {
            iter329=this.part_vals[iter329]
            output.writeString(iter329)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.max_parts) {
    output.writeFieldBegin('max_parts', Thrift.Type.I16, 4)
    output.writeI16(this.max_parts)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partition_names_ps_result = function(args){
  this.success = null
  this.o1 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
}}
ThriftHiveMetastore_get_partition_names_ps_result.prototype = {}
ThriftHiveMetastore_get_partition_names_ps_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.LIST) {
        {
          var _size330 = 0
          var rtmp3
          this.success = []
          var _etype333 = 0
          rtmp3 = input.readListBegin()
          _etype333 = rtmp3.etype
          _size330 = rtmp3.size
          for (var _i334 = 0; _i334 < _size330; ++_i334)
          {
            var elem335 = null
            elem335 = input.readString()
            this.success.push(elem335)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partition_names_ps_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_partition_names_ps_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    {
      output.writeListBegin(Thrift.Type.STRING, this.success.length)
      {
        for(var iter336 in this.success)
        {
          if (this.success.hasOwnProperty(iter336))
          {
            iter336=this.success[iter336]
            output.writeString(iter336)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partitions_by_filter_args = function(args){
  this.db_name = null
  this.tbl_name = null
  this.filter = null
  this.max_parts = -1
if( args != null ){  if (null != args.db_name)
  this.db_name = args.db_name
  if (null != args.tbl_name)
  this.tbl_name = args.tbl_name
  if (null != args.filter)
  this.filter = args.filter
  if (null != args.max_parts)
  this.max_parts = args.max_parts
}}
ThriftHiveMetastore_get_partitions_by_filter_args.prototype = {}
ThriftHiveMetastore_get_partitions_by_filter_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRING) {
        this.filter = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.I16) {
        this.max_parts = input.readI16()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partitions_by_filter_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_by_filter_args')
  if (null != this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (null != this.tbl_name) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (null != this.filter) {
    output.writeFieldBegin('filter', Thrift.Type.STRING, 3)
    output.writeString(this.filter)
    output.writeFieldEnd()
  }
  if (null != this.max_parts) {
    output.writeFieldBegin('max_parts', Thrift.Type.I16, 4)
    output.writeI16(this.max_parts)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_partitions_by_filter_result = function(args){
  this.success = null
  this.o1 = null
  this.o2 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
  if (null != args.o2)
  this.o2 = args.o2
}}
ThriftHiveMetastore_get_partitions_by_filter_result.prototype = {}
ThriftHiveMetastore_get_partitions_by_filter_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.LIST) {
        {
          var _size337 = 0
          var rtmp3
          this.success = []
          var _etype340 = 0
          rtmp3 = input.readListBegin()
          _etype340 = rtmp3.etype
          _size337 = rtmp3.size
          for (var _i341 = 0; _i341 < _size337; ++_i341)
          {
            var elem342 = null
            elem342 = new ttypes.Partition()
            elem342.read(input)
            this.success.push(elem342)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.NoSuchObjectException()
        this.o2.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_partitions_by_filter_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_partitions_by_filter_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length)
      {
        for(var iter343 in this.success)
        {
          if (this.success.hasOwnProperty(iter343))
          {
            iter343=this.success[iter343]
            iter343.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_alter_partition_args = function(args){
  this.db_name = null
  this.tbl_name = null
  this.new_part = null
if( args != null ){  if (null != args.db_name)
  this.db_name = args.db_name
  if (null != args.tbl_name)
  this.tbl_name = args.tbl_name
  if (null != args.new_part)
  this.new_part = args.new_part
}}
ThriftHiveMetastore_alter_partition_args.prototype = {}
ThriftHiveMetastore_alter_partition_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.new_part = new ttypes.Partition()
        this.new_part.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_alter_partition_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_alter_partition_args')
  if (null != this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (null != this.tbl_name) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (null != this.new_part) {
    output.writeFieldBegin('new_part', Thrift.Type.STRUCT, 3)
    this.new_part.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_alter_partition_result = function(args){
  this.o1 = null
  this.o2 = null
if( args != null ){  if (null != args.o1)
  this.o1 = args.o1
  if (null != args.o2)
  this.o2 = args.o2
}}
ThriftHiveMetastore_alter_partition_result.prototype = {}
ThriftHiveMetastore_alter_partition_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.InvalidOperationException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException()
        this.o2.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_alter_partition_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_alter_partition_result')
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_config_value_args = function(args){
  this.name = null
  this.defaultValue = null
if( args != null ){  if (null != args.name)
  this.name = args.name
  if (null != args.defaultValue)
  this.defaultValue = args.defaultValue
}}
ThriftHiveMetastore_get_config_value_args.prototype = {}
ThriftHiveMetastore_get_config_value_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.defaultValue = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_config_value_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_config_value_args')
  if (null != this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1)
    output.writeString(this.name)
    output.writeFieldEnd()
  }
  if (null != this.defaultValue) {
    output.writeFieldBegin('defaultValue', Thrift.Type.STRING, 2)
    output.writeString(this.defaultValue)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_config_value_result = function(args){
  this.success = null
  this.o1 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
}}
ThriftHiveMetastore_get_config_value_result.prototype = {}
ThriftHiveMetastore_get_config_value_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.ConfigValSecurityException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_config_value_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_config_value_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0)
    output.writeString(this.success)
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_partition_name_to_vals_args = function(args){
  this.part_name = null
if( args != null ){  if (null != args.part_name)
  this.part_name = args.part_name
}}
ThriftHiveMetastore_partition_name_to_vals_args.prototype = {}
ThriftHiveMetastore_partition_name_to_vals_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.part_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_partition_name_to_vals_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_partition_name_to_vals_args')
  if (null != this.part_name) {
    output.writeFieldBegin('part_name', Thrift.Type.STRING, 1)
    output.writeString(this.part_name)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_partition_name_to_vals_result = function(args){
  this.success = null
  this.o1 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
}}
ThriftHiveMetastore_partition_name_to_vals_result.prototype = {}
ThriftHiveMetastore_partition_name_to_vals_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.LIST) {
        {
          var _size344 = 0
          var rtmp3
          this.success = []
          var _etype347 = 0
          rtmp3 = input.readListBegin()
          _etype347 = rtmp3.etype
          _size344 = rtmp3.size
          for (var _i348 = 0; _i348 < _size344; ++_i348)
          {
            var elem349 = null
            elem349 = input.readString()
            this.success.push(elem349)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_partition_name_to_vals_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_partition_name_to_vals_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    {
      output.writeListBegin(Thrift.Type.STRING, this.success.length)
      {
        for(var iter350 in this.success)
        {
          if (this.success.hasOwnProperty(iter350))
          {
            iter350=this.success[iter350]
            output.writeString(iter350)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_partition_name_to_spec_args = function(args){
  this.part_name = null
if( args != null ){  if (null != args.part_name)
  this.part_name = args.part_name
}}
ThriftHiveMetastore_partition_name_to_spec_args.prototype = {}
ThriftHiveMetastore_partition_name_to_spec_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.part_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_partition_name_to_spec_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_partition_name_to_spec_args')
  if (null != this.part_name) {
    output.writeFieldBegin('part_name', Thrift.Type.STRING, 1)
    output.writeString(this.part_name)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_partition_name_to_spec_result = function(args){
  this.success = null
  this.o1 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
}}
ThriftHiveMetastore_partition_name_to_spec_result.prototype = {}
ThriftHiveMetastore_partition_name_to_spec_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.MAP) {
        {
          var _size351 = 0
          var rtmp3
          this.success = {}
          var _ktype352 = 0
          var _vtype353 = 0
          rtmp3 = input.readMapBegin()
          _ktype352= rtmp3.ktype
          _vtype353= rtmp3.vtype
          _size351= rtmp3.size
          for (var _i355 = 0; _i355 < _size351; ++_i355)
          {
            key356 = null
            val357 = null
            key356 = input.readString()
            val357 = input.readString()
            this.success[key356] = val357
          }
          input.readMapEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_partition_name_to_spec_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_partition_name_to_spec_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0)
    {
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success))
      {
        for(var kiter358 in this.success)        {
          if (this.success.hasOwnProperty(kiter358))
          {
            var viter359 = this.success[kiter358]
            output.writeString(kiter358)
            output.writeString(viter359)
          }
        }
      }
      output.writeMapEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_add_index_args = function(args){
  this.new_index = null
  this.index_table = null
if( args != null ){  if (null != args.new_index)
  this.new_index = args.new_index
  if (null != args.index_table)
  this.index_table = args.index_table
}}
ThriftHiveMetastore_add_index_args.prototype = {}
ThriftHiveMetastore_add_index_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.new_index = new ttypes.Index()
        this.new_index.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.index_table = new ttypes.Table()
        this.index_table.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_add_index_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_add_index_args')
  if (null != this.new_index) {
    output.writeFieldBegin('new_index', Thrift.Type.STRUCT, 1)
    this.new_index.write(output)
    output.writeFieldEnd()
  }
  if (null != this.index_table) {
    output.writeFieldBegin('index_table', Thrift.Type.STRUCT, 2)
    this.index_table.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_add_index_result = function(args){
  this.success = null
  this.o1 = null
  this.o2 = null
  this.o3 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
  if (null != args.o2)
  this.o2 = args.o2
  if (null != args.o3)
  this.o3 = args.o3
}}
ThriftHiveMetastore_add_index_result.prototype = {}
ThriftHiveMetastore_add_index_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Index()
        this.success.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.InvalidObjectException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.AlreadyExistsException()
        this.o2.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.o3 = new ttypes.MetaException()
        this.o3.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_add_index_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_add_index_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o3) {
    output.writeFieldBegin('o3', Thrift.Type.STRUCT, 3)
    this.o3.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_alter_index_args = function(args){
  this.dbname = null
  this.base_tbl_name = null
  this.idx_name = null
  this.new_idx = null
if( args != null ){  if (null != args.dbname)
  this.dbname = args.dbname
  if (null != args.base_tbl_name)
  this.base_tbl_name = args.base_tbl_name
  if (null != args.idx_name)
  this.idx_name = args.idx_name
  if (null != args.new_idx)
  this.new_idx = args.new_idx
}}
ThriftHiveMetastore_alter_index_args.prototype = {}
ThriftHiveMetastore_alter_index_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.dbname = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.base_tbl_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRING) {
        this.idx_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.STRUCT) {
        this.new_idx = new ttypes.Index()
        this.new_idx.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_alter_index_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_alter_index_args')
  if (null != this.dbname) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 1)
    output.writeString(this.dbname)
    output.writeFieldEnd()
  }
  if (null != this.base_tbl_name) {
    output.writeFieldBegin('base_tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.base_tbl_name)
    output.writeFieldEnd()
  }
  if (null != this.idx_name) {
    output.writeFieldBegin('idx_name', Thrift.Type.STRING, 3)
    output.writeString(this.idx_name)
    output.writeFieldEnd()
  }
  if (null != this.new_idx) {
    output.writeFieldBegin('new_idx', Thrift.Type.STRUCT, 4)
    this.new_idx.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_alter_index_result = function(args){
  this.o1 = null
  this.o2 = null
if( args != null ){  if (null != args.o1)
  this.o1 = args.o1
  if (null != args.o2)
  this.o2 = args.o2
}}
ThriftHiveMetastore_alter_index_result.prototype = {}
ThriftHiveMetastore_alter_index_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.InvalidOperationException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException()
        this.o2.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_alter_index_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_alter_index_result')
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_drop_index_by_name_args = function(args){
  this.db_name = null
  this.tbl_name = null
  this.index_name = null
  this.deleteData = null
if( args != null ){  if (null != args.db_name)
  this.db_name = args.db_name
  if (null != args.tbl_name)
  this.tbl_name = args.tbl_name
  if (null != args.index_name)
  this.index_name = args.index_name
  if (null != args.deleteData)
  this.deleteData = args.deleteData
}}
ThriftHiveMetastore_drop_index_by_name_args.prototype = {}
ThriftHiveMetastore_drop_index_by_name_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRING) {
        this.index_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.BOOL) {
        this.deleteData = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_drop_index_by_name_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_drop_index_by_name_args')
  if (null != this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (null != this.tbl_name) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (null != this.index_name) {
    output.writeFieldBegin('index_name', Thrift.Type.STRING, 3)
    output.writeString(this.index_name)
    output.writeFieldEnd()
  }
  if (null != this.deleteData) {
    output.writeFieldBegin('deleteData', Thrift.Type.BOOL, 4)
    output.writeBool(this.deleteData)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_drop_index_by_name_result = function(args){
  this.success = null
  this.o1 = null
  this.o2 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
  if (null != args.o2)
  this.o2 = args.o2
}}
ThriftHiveMetastore_drop_index_by_name_result.prototype = {}
ThriftHiveMetastore_drop_index_by_name_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException()
        this.o2.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_drop_index_by_name_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_drop_index_by_name_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0)
    output.writeBool(this.success)
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_index_by_name_args = function(args){
  this.db_name = null
  this.tbl_name = null
  this.index_name = null
if( args != null ){  if (null != args.db_name)
  this.db_name = args.db_name
  if (null != args.tbl_name)
  this.tbl_name = args.tbl_name
  if (null != args.index_name)
  this.index_name = args.index_name
}}
ThriftHiveMetastore_get_index_by_name_args.prototype = {}
ThriftHiveMetastore_get_index_by_name_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRING) {
        this.index_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_index_by_name_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_index_by_name_args')
  if (null != this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (null != this.tbl_name) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (null != this.index_name) {
    output.writeFieldBegin('index_name', Thrift.Type.STRING, 3)
    output.writeString(this.index_name)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_index_by_name_result = function(args){
  this.success = null
  this.o1 = null
  this.o2 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
  if (null != args.o2)
  this.o2 = args.o2
}}
ThriftHiveMetastore_get_index_by_name_result.prototype = {}
ThriftHiveMetastore_get_index_by_name_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Index()
        this.success.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.NoSuchObjectException()
        this.o2.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_index_by_name_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_index_by_name_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_indexes_args = function(args){
  this.db_name = null
  this.tbl_name = null
  this.max_indexes = -1
if( args != null ){  if (null != args.db_name)
  this.db_name = args.db_name
  if (null != args.tbl_name)
  this.tbl_name = args.tbl_name
  if (null != args.max_indexes)
  this.max_indexes = args.max_indexes
}}
ThriftHiveMetastore_get_indexes_args.prototype = {}
ThriftHiveMetastore_get_indexes_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.I16) {
        this.max_indexes = input.readI16()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_indexes_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_indexes_args')
  if (null != this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (null != this.tbl_name) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (null != this.max_indexes) {
    output.writeFieldBegin('max_indexes', Thrift.Type.I16, 3)
    output.writeI16(this.max_indexes)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_indexes_result = function(args){
  this.success = null
  this.o1 = null
  this.o2 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
  if (null != args.o2)
  this.o2 = args.o2
}}
ThriftHiveMetastore_get_indexes_result.prototype = {}
ThriftHiveMetastore_get_indexes_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.LIST) {
        {
          var _size360 = 0
          var rtmp3
          this.success = []
          var _etype363 = 0
          rtmp3 = input.readListBegin()
          _etype363 = rtmp3.etype
          _size360 = rtmp3.size
          for (var _i364 = 0; _i364 < _size360; ++_i364)
          {
            var elem365 = null
            elem365 = new ttypes.Index()
            elem365.read(input)
            this.success.push(elem365)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.NoSuchObjectException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException()
        this.o2.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_indexes_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_indexes_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length)
      {
        for(var iter366 in this.success)
        {
          if (this.success.hasOwnProperty(iter366))
          {
            iter366=this.success[iter366]
            iter366.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 2)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_index_names_args = function(args){
  this.db_name = null
  this.tbl_name = null
  this.max_indexes = -1
if( args != null ){  if (null != args.db_name)
  this.db_name = args.db_name
  if (null != args.tbl_name)
  this.tbl_name = args.tbl_name
  if (null != args.max_indexes)
  this.max_indexes = args.max_indexes
}}
ThriftHiveMetastore_get_index_names_args.prototype = {}
ThriftHiveMetastore_get_index_names_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.tbl_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.I16) {
        this.max_indexes = input.readI16()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_index_names_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_index_names_args')
  if (null != this.db_name) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1)
    output.writeString(this.db_name)
    output.writeFieldEnd()
  }
  if (null != this.tbl_name) {
    output.writeFieldBegin('tbl_name', Thrift.Type.STRING, 2)
    output.writeString(this.tbl_name)
    output.writeFieldEnd()
  }
  if (null != this.max_indexes) {
    output.writeFieldBegin('max_indexes', Thrift.Type.I16, 3)
    output.writeI16(this.max_indexes)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_index_names_result = function(args){
  this.success = null
  this.o2 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o2)
  this.o2 = args.o2
}}
ThriftHiveMetastore_get_index_names_result.prototype = {}
ThriftHiveMetastore_get_index_names_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.LIST) {
        {
          var _size367 = 0
          var rtmp3
          this.success = []
          var _etype370 = 0
          rtmp3 = input.readListBegin()
          _etype370 = rtmp3.etype
          _size367 = rtmp3.size
          for (var _i371 = 0; _i371 < _size367; ++_i371)
          {
            var elem372 = null
            elem372 = input.readString()
            this.success.push(elem372)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o2 = new ttypes.MetaException()
        this.o2.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_index_names_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_index_names_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    {
      output.writeListBegin(Thrift.Type.STRING, this.success.length)
      {
        for(var iter373 in this.success)
        {
          if (this.success.hasOwnProperty(iter373))
          {
            iter373=this.success[iter373]
            output.writeString(iter373)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.o2) {
    output.writeFieldBegin('o2', Thrift.Type.STRUCT, 1)
    this.o2.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_create_role_args = function(args){
  this.role = null
if( args != null ){  if (null != args.role)
  this.role = args.role
}}
ThriftHiveMetastore_create_role_args.prototype = {}
ThriftHiveMetastore_create_role_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.role = new ttypes.Role()
        this.role.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_create_role_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_create_role_args')
  if (null != this.role) {
    output.writeFieldBegin('role', Thrift.Type.STRUCT, 1)
    this.role.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_create_role_result = function(args){
  this.success = null
  this.o1 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
}}
ThriftHiveMetastore_create_role_result.prototype = {}
ThriftHiveMetastore_create_role_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_create_role_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_create_role_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0)
    output.writeBool(this.success)
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_drop_role_args = function(args){
  this.role_name = null
if( args != null ){  if (null != args.role_name)
  this.role_name = args.role_name
}}
ThriftHiveMetastore_drop_role_args.prototype = {}
ThriftHiveMetastore_drop_role_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.role_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_drop_role_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_drop_role_args')
  if (null != this.role_name) {
    output.writeFieldBegin('role_name', Thrift.Type.STRING, 1)
    output.writeString(this.role_name)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_drop_role_result = function(args){
  this.success = null
  this.o1 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
}}
ThriftHiveMetastore_drop_role_result.prototype = {}
ThriftHiveMetastore_drop_role_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_drop_role_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_drop_role_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0)
    output.writeBool(this.success)
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_role_names_args = function(args){
}
ThriftHiveMetastore_get_role_names_args.prototype = {}
ThriftHiveMetastore_get_role_names_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_role_names_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_role_names_args')
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_role_names_result = function(args){
  this.success = null
  this.o1 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
}}
ThriftHiveMetastore_get_role_names_result.prototype = {}
ThriftHiveMetastore_get_role_names_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.LIST) {
        {
          var _size374 = 0
          var rtmp3
          this.success = []
          var _etype377 = 0
          rtmp3 = input.readListBegin()
          _etype377 = rtmp3.etype
          _size374 = rtmp3.size
          for (var _i378 = 0; _i378 < _size374; ++_i378)
          {
            var elem379 = null
            elem379 = input.readString()
            this.success.push(elem379)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_role_names_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_role_names_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    {
      output.writeListBegin(Thrift.Type.STRING, this.success.length)
      {
        for(var iter380 in this.success)
        {
          if (this.success.hasOwnProperty(iter380))
          {
            iter380=this.success[iter380]
            output.writeString(iter380)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_grant_role_args = function(args){
  this.role_name = null
  this.principal_name = null
  this.principal_type = null
  this.grantor = null
  this.grantorType = null
  this.grant_option = null
if( args != null ){  if (null != args.role_name)
  this.role_name = args.role_name
  if (null != args.principal_name)
  this.principal_name = args.principal_name
  if (null != args.principal_type)
  this.principal_type = args.principal_type
  if (null != args.grantor)
  this.grantor = args.grantor
  if (null != args.grantorType)
  this.grantorType = args.grantorType
  if (null != args.grant_option)
  this.grant_option = args.grant_option
}}
ThriftHiveMetastore_grant_role_args.prototype = {}
ThriftHiveMetastore_grant_role_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.role_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.principal_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.I32) {
        this.principal_type = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.STRING) {
        this.grantor = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 5:      if (ftype == Thrift.Type.I32) {
        this.grantorType = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 6:      if (ftype == Thrift.Type.BOOL) {
        this.grant_option = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_grant_role_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_grant_role_args')
  if (null != this.role_name) {
    output.writeFieldBegin('role_name', Thrift.Type.STRING, 1)
    output.writeString(this.role_name)
    output.writeFieldEnd()
  }
  if (null != this.principal_name) {
    output.writeFieldBegin('principal_name', Thrift.Type.STRING, 2)
    output.writeString(this.principal_name)
    output.writeFieldEnd()
  }
  if (null != this.principal_type) {
    output.writeFieldBegin('principal_type', Thrift.Type.I32, 3)
    output.writeI32(this.principal_type)
    output.writeFieldEnd()
  }
  if (null != this.grantor) {
    output.writeFieldBegin('grantor', Thrift.Type.STRING, 4)
    output.writeString(this.grantor)
    output.writeFieldEnd()
  }
  if (null != this.grantorType) {
    output.writeFieldBegin('grantorType', Thrift.Type.I32, 5)
    output.writeI32(this.grantorType)
    output.writeFieldEnd()
  }
  if (null != this.grant_option) {
    output.writeFieldBegin('grant_option', Thrift.Type.BOOL, 6)
    output.writeBool(this.grant_option)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_grant_role_result = function(args){
  this.success = null
  this.o1 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
}}
ThriftHiveMetastore_grant_role_result.prototype = {}
ThriftHiveMetastore_grant_role_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_grant_role_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_grant_role_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0)
    output.writeBool(this.success)
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_revoke_role_args = function(args){
  this.role_name = null
  this.principal_name = null
  this.principal_type = null
if( args != null ){  if (null != args.role_name)
  this.role_name = args.role_name
  if (null != args.principal_name)
  this.principal_name = args.principal_name
  if (null != args.principal_type)
  this.principal_type = args.principal_type
}}
ThriftHiveMetastore_revoke_role_args.prototype = {}
ThriftHiveMetastore_revoke_role_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.role_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.principal_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.I32) {
        this.principal_type = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_revoke_role_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_revoke_role_args')
  if (null != this.role_name) {
    output.writeFieldBegin('role_name', Thrift.Type.STRING, 1)
    output.writeString(this.role_name)
    output.writeFieldEnd()
  }
  if (null != this.principal_name) {
    output.writeFieldBegin('principal_name', Thrift.Type.STRING, 2)
    output.writeString(this.principal_name)
    output.writeFieldEnd()
  }
  if (null != this.principal_type) {
    output.writeFieldBegin('principal_type', Thrift.Type.I32, 3)
    output.writeI32(this.principal_type)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_revoke_role_result = function(args){
  this.success = null
  this.o1 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
}}
ThriftHiveMetastore_revoke_role_result.prototype = {}
ThriftHiveMetastore_revoke_role_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_revoke_role_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_revoke_role_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0)
    output.writeBool(this.success)
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_list_roles_args = function(args){
  this.principal_name = null
  this.principal_type = null
if( args != null ){  if (null != args.principal_name)
  this.principal_name = args.principal_name
  if (null != args.principal_type)
  this.principal_type = args.principal_type
}}
ThriftHiveMetastore_list_roles_args.prototype = {}
ThriftHiveMetastore_list_roles_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.principal_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.I32) {
        this.principal_type = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_list_roles_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_list_roles_args')
  if (null != this.principal_name) {
    output.writeFieldBegin('principal_name', Thrift.Type.STRING, 1)
    output.writeString(this.principal_name)
    output.writeFieldEnd()
  }
  if (null != this.principal_type) {
    output.writeFieldBegin('principal_type', Thrift.Type.I32, 2)
    output.writeI32(this.principal_type)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_list_roles_result = function(args){
  this.success = null
  this.o1 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
}}
ThriftHiveMetastore_list_roles_result.prototype = {}
ThriftHiveMetastore_list_roles_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.LIST) {
        {
          var _size381 = 0
          var rtmp3
          this.success = []
          var _etype384 = 0
          rtmp3 = input.readListBegin()
          _etype384 = rtmp3.etype
          _size381 = rtmp3.size
          for (var _i385 = 0; _i385 < _size381; ++_i385)
          {
            var elem386 = null
            elem386 = new ttypes.Role()
            elem386.read(input)
            this.success.push(elem386)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_list_roles_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_list_roles_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length)
      {
        for(var iter387 in this.success)
        {
          if (this.success.hasOwnProperty(iter387))
          {
            iter387=this.success[iter387]
            iter387.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_privilege_set_args = function(args){
  this.hiveObject = null
  this.user_name = null
  this.group_names = null
if( args != null ){  if (null != args.hiveObject)
  this.hiveObject = args.hiveObject
  if (null != args.user_name)
  this.user_name = args.user_name
  if (null != args.group_names)
  this.group_names = args.group_names
}}
ThriftHiveMetastore_get_privilege_set_args.prototype = {}
ThriftHiveMetastore_get_privilege_set_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.hiveObject = new ttypes.HiveObjectRef()
        this.hiveObject.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.user_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.LIST) {
        {
          var _size388 = 0
          var rtmp3
          this.group_names = []
          var _etype391 = 0
          rtmp3 = input.readListBegin()
          _etype391 = rtmp3.etype
          _size388 = rtmp3.size
          for (var _i392 = 0; _i392 < _size388; ++_i392)
          {
            var elem393 = null
            elem393 = input.readString()
            this.group_names.push(elem393)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_privilege_set_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_privilege_set_args')
  if (null != this.hiveObject) {
    output.writeFieldBegin('hiveObject', Thrift.Type.STRUCT, 1)
    this.hiveObject.write(output)
    output.writeFieldEnd()
  }
  if (null != this.user_name) {
    output.writeFieldBegin('user_name', Thrift.Type.STRING, 2)
    output.writeString(this.user_name)
    output.writeFieldEnd()
  }
  if (null != this.group_names) {
    output.writeFieldBegin('group_names', Thrift.Type.LIST, 3)
    {
      output.writeListBegin(Thrift.Type.STRING, this.group_names.length)
      {
        for(var iter394 in this.group_names)
        {
          if (this.group_names.hasOwnProperty(iter394))
          {
            iter394=this.group_names[iter394]
            output.writeString(iter394)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_privilege_set_result = function(args){
  this.success = null
  this.o1 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
}}
ThriftHiveMetastore_get_privilege_set_result.prototype = {}
ThriftHiveMetastore_get_privilege_set_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PrincipalPrivilegeSet()
        this.success.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_privilege_set_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_privilege_set_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_list_privileges_args = function(args){
  this.principal_name = null
  this.principal_type = null
  this.hiveObject = null
if( args != null ){  if (null != args.principal_name)
  this.principal_name = args.principal_name
  if (null != args.principal_type)
  this.principal_type = args.principal_type
  if (null != args.hiveObject)
  this.hiveObject = args.hiveObject
}}
ThriftHiveMetastore_list_privileges_args.prototype = {}
ThriftHiveMetastore_list_privileges_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.principal_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.I32) {
        this.principal_type = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.hiveObject = new ttypes.HiveObjectRef()
        this.hiveObject.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_list_privileges_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_list_privileges_args')
  if (null != this.principal_name) {
    output.writeFieldBegin('principal_name', Thrift.Type.STRING, 1)
    output.writeString(this.principal_name)
    output.writeFieldEnd()
  }
  if (null != this.principal_type) {
    output.writeFieldBegin('principal_type', Thrift.Type.I32, 2)
    output.writeI32(this.principal_type)
    output.writeFieldEnd()
  }
  if (null != this.hiveObject) {
    output.writeFieldBegin('hiveObject', Thrift.Type.STRUCT, 3)
    this.hiveObject.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_list_privileges_result = function(args){
  this.success = null
  this.o1 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
}}
ThriftHiveMetastore_list_privileges_result.prototype = {}
ThriftHiveMetastore_list_privileges_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.LIST) {
        {
          var _size395 = 0
          var rtmp3
          this.success = []
          var _etype398 = 0
          rtmp3 = input.readListBegin()
          _etype398 = rtmp3.etype
          _size395 = rtmp3.size
          for (var _i399 = 0; _i399 < _size395; ++_i399)
          {
            var elem400 = null
            elem400 = new ttypes.HiveObjectPrivilege()
            elem400.read(input)
            this.success.push(elem400)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_list_privileges_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_list_privileges_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length)
      {
        for(var iter401 in this.success)
        {
          if (this.success.hasOwnProperty(iter401))
          {
            iter401=this.success[iter401]
            iter401.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_grant_privileges_args = function(args){
  this.privileges = null
if( args != null ){  if (null != args.privileges)
  this.privileges = args.privileges
}}
ThriftHiveMetastore_grant_privileges_args.prototype = {}
ThriftHiveMetastore_grant_privileges_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.privileges = new ttypes.PrivilegeBag()
        this.privileges.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_grant_privileges_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_grant_privileges_args')
  if (null != this.privileges) {
    output.writeFieldBegin('privileges', Thrift.Type.STRUCT, 1)
    this.privileges.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_grant_privileges_result = function(args){
  this.success = null
  this.o1 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
}}
ThriftHiveMetastore_grant_privileges_result.prototype = {}
ThriftHiveMetastore_grant_privileges_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_grant_privileges_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_grant_privileges_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0)
    output.writeBool(this.success)
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_revoke_privileges_args = function(args){
  this.privileges = null
if( args != null ){  if (null != args.privileges)
  this.privileges = args.privileges
}}
ThriftHiveMetastore_revoke_privileges_args.prototype = {}
ThriftHiveMetastore_revoke_privileges_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.privileges = new ttypes.PrivilegeBag()
        this.privileges.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_revoke_privileges_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_revoke_privileges_args')
  if (null != this.privileges) {
    output.writeFieldBegin('privileges', Thrift.Type.STRUCT, 1)
    this.privileges.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_revoke_privileges_result = function(args){
  this.success = null
  this.o1 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
}}
ThriftHiveMetastore_revoke_privileges_result.prototype = {}
ThriftHiveMetastore_revoke_privileges_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_revoke_privileges_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_revoke_privileges_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0)
    output.writeBool(this.success)
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_delegation_token_args = function(args){
  this.renewer_kerberos_principal_name = null
if( args != null ){  if (null != args.renewer_kerberos_principal_name)
  this.renewer_kerberos_principal_name = args.renewer_kerberos_principal_name
}}
ThriftHiveMetastore_get_delegation_token_args.prototype = {}
ThriftHiveMetastore_get_delegation_token_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.renewer_kerberos_principal_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_delegation_token_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_delegation_token_args')
  if (null != this.renewer_kerberos_principal_name) {
    output.writeFieldBegin('renewer_kerberos_principal_name', Thrift.Type.STRING, 1)
    output.writeString(this.renewer_kerberos_principal_name)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_delegation_token_result = function(args){
  this.success = null
  this.o1 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
}}
ThriftHiveMetastore_get_delegation_token_result.prototype = {}
ThriftHiveMetastore_get_delegation_token_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_delegation_token_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_delegation_token_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0)
    output.writeString(this.success)
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_delegation_token_with_signature_args = function(args){
  this.renewer_kerberos_principal_name = null
  this.token_signature = null
if( args != null ){  if (null != args.renewer_kerberos_principal_name)
  this.renewer_kerberos_principal_name = args.renewer_kerberos_principal_name
  if (null != args.token_signature)
  this.token_signature = args.token_signature
}}
ThriftHiveMetastore_get_delegation_token_with_signature_args.prototype = {}
ThriftHiveMetastore_get_delegation_token_with_signature_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.renewer_kerberos_principal_name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.token_signature = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_delegation_token_with_signature_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_delegation_token_with_signature_args')
  if (null != this.renewer_kerberos_principal_name) {
    output.writeFieldBegin('renewer_kerberos_principal_name', Thrift.Type.STRING, 1)
    output.writeString(this.renewer_kerberos_principal_name)
    output.writeFieldEnd()
  }
  if (null != this.token_signature) {
    output.writeFieldBegin('token_signature', Thrift.Type.STRING, 2)
    output.writeString(this.token_signature)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_get_delegation_token_with_signature_result = function(args){
  this.success = null
  this.o1 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
}}
ThriftHiveMetastore_get_delegation_token_with_signature_result.prototype = {}
ThriftHiveMetastore_get_delegation_token_with_signature_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_get_delegation_token_with_signature_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_get_delegation_token_with_signature_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0)
    output.writeString(this.success)
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_renew_delegation_token_args = function(args){
  this.token_str_form = null
if( args != null ){  if (null != args.token_str_form)
  this.token_str_form = args.token_str_form
}}
ThriftHiveMetastore_renew_delegation_token_args.prototype = {}
ThriftHiveMetastore_renew_delegation_token_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.token_str_form = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_renew_delegation_token_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_renew_delegation_token_args')
  if (null != this.token_str_form) {
    output.writeFieldBegin('token_str_form', Thrift.Type.STRING, 1)
    output.writeString(this.token_str_form)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_renew_delegation_token_result = function(args){
  this.success = null
  this.o1 = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.o1)
  this.o1 = args.o1
}}
ThriftHiveMetastore_renew_delegation_token_result.prototype = {}
ThriftHiveMetastore_renew_delegation_token_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64()
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_renew_delegation_token_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_renew_delegation_token_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0)
    output.writeI64(this.success)
    output.writeFieldEnd()
  }
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_cancel_delegation_token_args = function(args){
  this.token_str_form = null
if( args != null ){  if (null != args.token_str_form)
  this.token_str_form = args.token_str_form
}}
ThriftHiveMetastore_cancel_delegation_token_args.prototype = {}
ThriftHiveMetastore_cancel_delegation_token_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.token_str_form = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_cancel_delegation_token_args.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_cancel_delegation_token_args')
  if (null != this.token_str_form) {
    output.writeFieldBegin('token_str_form', Thrift.Type.STRING, 1)
    output.writeString(this.token_str_form)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastore_cancel_delegation_token_result = function(args){
  this.o1 = null
if( args != null ){  if (null != args.o1)
  this.o1 = args.o1
}}
ThriftHiveMetastore_cancel_delegation_token_result.prototype = {}
ThriftHiveMetastore_cancel_delegation_token_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.o1 = new ttypes.MetaException()
        this.o1.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftHiveMetastore_cancel_delegation_token_result.prototype.write = function(output){ 
  output.writeStructBegin('ThriftHiveMetastore_cancel_delegation_token_result')
  if (null != this.o1) {
    output.writeFieldBegin('o1', Thrift.Type.STRUCT, 1)
    this.o1.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ThriftHiveMetastoreClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {}
}
Thrift.inherits(ThriftHiveMetastoreClient, FacebookServiceClient)
ThriftHiveMetastoreClient.prototype.create_database = function(database,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_create_database(database)
}

ThriftHiveMetastoreClient.prototype.send_create_database = function(database){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('create_database', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_create_database_args()
  args.database = database
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_create_database = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_create_database_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.o2) {
    return callback(result.o2);
  }
  if (null != result.o3) {
    return callback(result.o3);
  }
  callback(null)
}
ThriftHiveMetastoreClient.prototype.get_database = function(name,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_get_database(name)
}

ThriftHiveMetastoreClient.prototype.send_get_database = function(name){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_database', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_get_database_args()
  args.name = name
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_database = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_database_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.o2) {
    return callback(result.o2);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("get_database failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.drop_database = function(name,deleteData,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_drop_database(name, deleteData)
}

ThriftHiveMetastoreClient.prototype.send_drop_database = function(name,deleteData){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('drop_database', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_drop_database_args()
  args.name = name
  args.deleteData = deleteData
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_drop_database = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_drop_database_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.o2) {
    return callback(result.o2);
  }
  if (null != result.o3) {
    return callback(result.o3);
  }
  callback(null)
}
ThriftHiveMetastoreClient.prototype.get_databases = function(pattern,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_get_databases(pattern)
}

ThriftHiveMetastoreClient.prototype.send_get_databases = function(pattern){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_databases', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_get_databases_args()
  args.pattern = pattern
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_databases = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_databases_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("get_databases failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.get_all_databases = function(callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_get_all_databases()
}

ThriftHiveMetastoreClient.prototype.send_get_all_databases = function(){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_all_databases', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_get_all_databases_args()
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_all_databases = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_all_databases_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("get_all_databases failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.alter_database = function(dbname,db,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_alter_database(dbname, db)
}

ThriftHiveMetastoreClient.prototype.send_alter_database = function(dbname,db){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('alter_database', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_alter_database_args()
  args.dbname = dbname
  args.db = db
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_alter_database = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_alter_database_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.o2) {
    return callback(result.o2);
  }
  callback(null)
}
ThriftHiveMetastoreClient.prototype.get_type = function(name,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_get_type(name)
}

ThriftHiveMetastoreClient.prototype.send_get_type = function(name){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_type', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_get_type_args()
  args.name = name
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_type = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_type_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.o2) {
    return callback(result.o2);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("get_type failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.create_type = function(type,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_create_type(type)
}

ThriftHiveMetastoreClient.prototype.send_create_type = function(type){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('create_type', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_create_type_args()
  args.type = type
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_create_type = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_create_type_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.o2) {
    return callback(result.o2);
  }
  if (null != result.o3) {
    return callback(result.o3);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("create_type failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.drop_type = function(type,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_drop_type(type)
}

ThriftHiveMetastoreClient.prototype.send_drop_type = function(type){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('drop_type', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_drop_type_args()
  args.type = type
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_drop_type = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_drop_type_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.o2) {
    return callback(result.o2);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("drop_type failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.get_type_all = function(name,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_get_type_all(name)
}

ThriftHiveMetastoreClient.prototype.send_get_type_all = function(name){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_type_all', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_get_type_all_args()
  args.name = name
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_type_all = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_type_all_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o2) {
    return callback(result.o2);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("get_type_all failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.get_fields = function(db_name,table_name,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_get_fields(db_name, table_name)
}

ThriftHiveMetastoreClient.prototype.send_get_fields = function(db_name,table_name){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_fields', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_get_fields_args()
  args.db_name = db_name
  args.table_name = table_name
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_fields = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_fields_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.o2) {
    return callback(result.o2);
  }
  if (null != result.o3) {
    return callback(result.o3);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("get_fields failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.get_schema = function(db_name,table_name,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_get_schema(db_name, table_name)
}

ThriftHiveMetastoreClient.prototype.send_get_schema = function(db_name,table_name){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_schema', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_get_schema_args()
  args.db_name = db_name
  args.table_name = table_name
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_schema = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_schema_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.o2) {
    return callback(result.o2);
  }
  if (null != result.o3) {
    return callback(result.o3);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("get_schema failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.create_table = function(tbl,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_create_table(tbl)
}

ThriftHiveMetastoreClient.prototype.send_create_table = function(tbl){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('create_table', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_create_table_args()
  args.tbl = tbl
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_create_table = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_create_table_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.o2) {
    return callback(result.o2);
  }
  if (null != result.o3) {
    return callback(result.o3);
  }
  if (null != result.o4) {
    return callback(result.o4);
  }
  callback(null)
}
ThriftHiveMetastoreClient.prototype.drop_table = function(dbname,name,deleteData,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_drop_table(dbname, name, deleteData)
}

ThriftHiveMetastoreClient.prototype.send_drop_table = function(dbname,name,deleteData){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('drop_table', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_drop_table_args()
  args.dbname = dbname
  args.name = name
  args.deleteData = deleteData
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_drop_table = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_drop_table_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.o3) {
    return callback(result.o3);
  }
  callback(null)
}
ThriftHiveMetastoreClient.prototype.get_tables = function(db_name,pattern,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_get_tables(db_name, pattern)
}

ThriftHiveMetastoreClient.prototype.send_get_tables = function(db_name,pattern){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_tables', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_get_tables_args()
  args.db_name = db_name
  args.pattern = pattern
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_tables = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_tables_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("get_tables failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.get_all_tables = function(db_name,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_get_all_tables(db_name)
}

ThriftHiveMetastoreClient.prototype.send_get_all_tables = function(db_name){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_all_tables', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_get_all_tables_args()
  args.db_name = db_name
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_all_tables = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_all_tables_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("get_all_tables failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.get_table = function(dbname,tbl_name,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_get_table(dbname, tbl_name)
}

ThriftHiveMetastoreClient.prototype.send_get_table = function(dbname,tbl_name){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_table', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_get_table_args()
  args.dbname = dbname
  args.tbl_name = tbl_name
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_table = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_table_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.o2) {
    return callback(result.o2);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("get_table failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.alter_table = function(dbname,tbl_name,new_tbl,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_alter_table(dbname, tbl_name, new_tbl)
}

ThriftHiveMetastoreClient.prototype.send_alter_table = function(dbname,tbl_name,new_tbl){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('alter_table', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_alter_table_args()
  args.dbname = dbname
  args.tbl_name = tbl_name
  args.new_tbl = new_tbl
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_alter_table = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_alter_table_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.o2) {
    return callback(result.o2);
  }
  callback(null)
}
ThriftHiveMetastoreClient.prototype.add_partition = function(new_part,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_add_partition(new_part)
}

ThriftHiveMetastoreClient.prototype.send_add_partition = function(new_part){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('add_partition', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_add_partition_args()
  args.new_part = new_part
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_add_partition = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_add_partition_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.o2) {
    return callback(result.o2);
  }
  if (null != result.o3) {
    return callback(result.o3);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("add_partition failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.append_partition = function(db_name,tbl_name,part_vals,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_append_partition(db_name, tbl_name, part_vals)
}

ThriftHiveMetastoreClient.prototype.send_append_partition = function(db_name,tbl_name,part_vals){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('append_partition', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_append_partition_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.part_vals = part_vals
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_append_partition = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_append_partition_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.o2) {
    return callback(result.o2);
  }
  if (null != result.o3) {
    return callback(result.o3);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("append_partition failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.append_partition_by_name = function(db_name,tbl_name,part_name,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_append_partition_by_name(db_name, tbl_name, part_name)
}

ThriftHiveMetastoreClient.prototype.send_append_partition_by_name = function(db_name,tbl_name,part_name){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('append_partition_by_name', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_append_partition_by_name_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.part_name = part_name
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_append_partition_by_name = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_append_partition_by_name_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.o2) {
    return callback(result.o2);
  }
  if (null != result.o3) {
    return callback(result.o3);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("append_partition_by_name failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.drop_partition = function(db_name,tbl_name,part_vals,deleteData,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_drop_partition(db_name, tbl_name, part_vals, deleteData)
}

ThriftHiveMetastoreClient.prototype.send_drop_partition = function(db_name,tbl_name,part_vals,deleteData){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('drop_partition', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_drop_partition_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.part_vals = part_vals
  args.deleteData = deleteData
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_drop_partition = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_drop_partition_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.o2) {
    return callback(result.o2);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("drop_partition failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.drop_partition_by_name = function(db_name,tbl_name,part_name,deleteData,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_drop_partition_by_name(db_name, tbl_name, part_name, deleteData)
}

ThriftHiveMetastoreClient.prototype.send_drop_partition_by_name = function(db_name,tbl_name,part_name,deleteData){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('drop_partition_by_name', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_drop_partition_by_name_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.part_name = part_name
  args.deleteData = deleteData
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_drop_partition_by_name = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_drop_partition_by_name_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.o2) {
    return callback(result.o2);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("drop_partition_by_name failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.get_partition = function(db_name,tbl_name,part_vals,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_get_partition(db_name, tbl_name, part_vals)
}

ThriftHiveMetastoreClient.prototype.send_get_partition = function(db_name,tbl_name,part_vals){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_partition', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_get_partition_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.part_vals = part_vals
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_partition = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_partition_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.o2) {
    return callback(result.o2);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("get_partition failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.get_partition_with_auth = function(db_name,tbl_name,part_vals,user_name,group_names,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_get_partition_with_auth(db_name, tbl_name, part_vals, user_name, group_names)
}

ThriftHiveMetastoreClient.prototype.send_get_partition_with_auth = function(db_name,tbl_name,part_vals,user_name,group_names){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_partition_with_auth', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_get_partition_with_auth_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.part_vals = part_vals
  args.user_name = user_name
  args.group_names = group_names
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_partition_with_auth = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_partition_with_auth_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.o2) {
    return callback(result.o2);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("get_partition_with_auth failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.get_partition_by_name = function(db_name,tbl_name,part_name,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_get_partition_by_name(db_name, tbl_name, part_name)
}

ThriftHiveMetastoreClient.prototype.send_get_partition_by_name = function(db_name,tbl_name,part_name){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_partition_by_name', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_get_partition_by_name_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.part_name = part_name
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_partition_by_name = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_partition_by_name_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.o2) {
    return callback(result.o2);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("get_partition_by_name failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.get_partitions = function(db_name,tbl_name,max_parts,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_get_partitions(db_name, tbl_name, max_parts)
}

ThriftHiveMetastoreClient.prototype.send_get_partitions = function(db_name,tbl_name,max_parts){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_partitions', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_get_partitions_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.max_parts = max_parts
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_partitions = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_partitions_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.o2) {
    return callback(result.o2);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("get_partitions failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.get_partitions_with_auth = function(db_name,tbl_name,max_parts,user_name,group_names,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_get_partitions_with_auth(db_name, tbl_name, max_parts, user_name, group_names)
}

ThriftHiveMetastoreClient.prototype.send_get_partitions_with_auth = function(db_name,tbl_name,max_parts,user_name,group_names){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_partitions_with_auth', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_get_partitions_with_auth_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.max_parts = max_parts
  args.user_name = user_name
  args.group_names = group_names
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_partitions_with_auth = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_partitions_with_auth_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.o2) {
    return callback(result.o2);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("get_partitions_with_auth failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.get_partition_names = function(db_name,tbl_name,max_parts,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_get_partition_names(db_name, tbl_name, max_parts)
}

ThriftHiveMetastoreClient.prototype.send_get_partition_names = function(db_name,tbl_name,max_parts){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_partition_names', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_get_partition_names_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.max_parts = max_parts
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_partition_names = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_partition_names_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o2) {
    return callback(result.o2);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("get_partition_names failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.get_partitions_ps = function(db_name,tbl_name,part_vals,max_parts,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_get_partitions_ps(db_name, tbl_name, part_vals, max_parts)
}

ThriftHiveMetastoreClient.prototype.send_get_partitions_ps = function(db_name,tbl_name,part_vals,max_parts){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_partitions_ps', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_get_partitions_ps_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.part_vals = part_vals
  args.max_parts = max_parts
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_partitions_ps = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_partitions_ps_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("get_partitions_ps failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.get_partitions_ps_with_auth = function(db_name,tbl_name,part_vals,max_parts,user_name,group_names,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_get_partitions_ps_with_auth(db_name, tbl_name, part_vals, max_parts, user_name, group_names)
}

ThriftHiveMetastoreClient.prototype.send_get_partitions_ps_with_auth = function(db_name,tbl_name,part_vals,max_parts,user_name,group_names){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_partitions_ps_with_auth', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_get_partitions_ps_with_auth_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.part_vals = part_vals
  args.max_parts = max_parts
  args.user_name = user_name
  args.group_names = group_names
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_partitions_ps_with_auth = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_partitions_ps_with_auth_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.o2) {
    return callback(result.o2);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("get_partitions_ps_with_auth failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.get_partition_names_ps = function(db_name,tbl_name,part_vals,max_parts,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_get_partition_names_ps(db_name, tbl_name, part_vals, max_parts)
}

ThriftHiveMetastoreClient.prototype.send_get_partition_names_ps = function(db_name,tbl_name,part_vals,max_parts){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_partition_names_ps', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_get_partition_names_ps_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.part_vals = part_vals
  args.max_parts = max_parts
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_partition_names_ps = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_partition_names_ps_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("get_partition_names_ps failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.get_partitions_by_filter = function(db_name,tbl_name,filter,max_parts,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_get_partitions_by_filter(db_name, tbl_name, filter, max_parts)
}

ThriftHiveMetastoreClient.prototype.send_get_partitions_by_filter = function(db_name,tbl_name,filter,max_parts){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_partitions_by_filter', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_get_partitions_by_filter_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.filter = filter
  args.max_parts = max_parts
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_partitions_by_filter = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_partitions_by_filter_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.o2) {
    return callback(result.o2);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("get_partitions_by_filter failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.alter_partition = function(db_name,tbl_name,new_part,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_alter_partition(db_name, tbl_name, new_part)
}

ThriftHiveMetastoreClient.prototype.send_alter_partition = function(db_name,tbl_name,new_part){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('alter_partition', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_alter_partition_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.new_part = new_part
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_alter_partition = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_alter_partition_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.o2) {
    return callback(result.o2);
  }
  callback(null)
}
ThriftHiveMetastoreClient.prototype.get_config_value = function(name,defaultValue,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_get_config_value(name, defaultValue)
}

ThriftHiveMetastoreClient.prototype.send_get_config_value = function(name,defaultValue){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_config_value', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_get_config_value_args()
  args.name = name
  args.defaultValue = defaultValue
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_config_value = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_config_value_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("get_config_value failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.partition_name_to_vals = function(part_name,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_partition_name_to_vals(part_name)
}

ThriftHiveMetastoreClient.prototype.send_partition_name_to_vals = function(part_name){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('partition_name_to_vals', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_partition_name_to_vals_args()
  args.part_name = part_name
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_partition_name_to_vals = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_partition_name_to_vals_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("partition_name_to_vals failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.partition_name_to_spec = function(part_name,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_partition_name_to_spec(part_name)
}

ThriftHiveMetastoreClient.prototype.send_partition_name_to_spec = function(part_name){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('partition_name_to_spec', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_partition_name_to_spec_args()
  args.part_name = part_name
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_partition_name_to_spec = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_partition_name_to_spec_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("partition_name_to_spec failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.add_index = function(new_index,index_table,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_add_index(new_index, index_table)
}

ThriftHiveMetastoreClient.prototype.send_add_index = function(new_index,index_table){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('add_index', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_add_index_args()
  args.new_index = new_index
  args.index_table = index_table
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_add_index = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_add_index_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.o2) {
    return callback(result.o2);
  }
  if (null != result.o3) {
    return callback(result.o3);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("add_index failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.alter_index = function(dbname,base_tbl_name,idx_name,new_idx,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_alter_index(dbname, base_tbl_name, idx_name, new_idx)
}

ThriftHiveMetastoreClient.prototype.send_alter_index = function(dbname,base_tbl_name,idx_name,new_idx){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('alter_index', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_alter_index_args()
  args.dbname = dbname
  args.base_tbl_name = base_tbl_name
  args.idx_name = idx_name
  args.new_idx = new_idx
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_alter_index = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_alter_index_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.o2) {
    return callback(result.o2);
  }
  callback(null)
}
ThriftHiveMetastoreClient.prototype.drop_index_by_name = function(db_name,tbl_name,index_name,deleteData,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_drop_index_by_name(db_name, tbl_name, index_name, deleteData)
}

ThriftHiveMetastoreClient.prototype.send_drop_index_by_name = function(db_name,tbl_name,index_name,deleteData){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('drop_index_by_name', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_drop_index_by_name_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.index_name = index_name
  args.deleteData = deleteData
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_drop_index_by_name = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_drop_index_by_name_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.o2) {
    return callback(result.o2);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("drop_index_by_name failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.get_index_by_name = function(db_name,tbl_name,index_name,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_get_index_by_name(db_name, tbl_name, index_name)
}

ThriftHiveMetastoreClient.prototype.send_get_index_by_name = function(db_name,tbl_name,index_name){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_index_by_name', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_get_index_by_name_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.index_name = index_name
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_index_by_name = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_index_by_name_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.o2) {
    return callback(result.o2);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("get_index_by_name failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.get_indexes = function(db_name,tbl_name,max_indexes,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_get_indexes(db_name, tbl_name, max_indexes)
}

ThriftHiveMetastoreClient.prototype.send_get_indexes = function(db_name,tbl_name,max_indexes){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_indexes', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_get_indexes_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.max_indexes = max_indexes
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_indexes = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_indexes_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.o2) {
    return callback(result.o2);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("get_indexes failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.get_index_names = function(db_name,tbl_name,max_indexes,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_get_index_names(db_name, tbl_name, max_indexes)
}

ThriftHiveMetastoreClient.prototype.send_get_index_names = function(db_name,tbl_name,max_indexes){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_index_names', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_get_index_names_args()
  args.db_name = db_name
  args.tbl_name = tbl_name
  args.max_indexes = max_indexes
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_index_names = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_index_names_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o2) {
    return callback(result.o2);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("get_index_names failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.create_role = function(role,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_create_role(role)
}

ThriftHiveMetastoreClient.prototype.send_create_role = function(role){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('create_role', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_create_role_args()
  args.role = role
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_create_role = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_create_role_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("create_role failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.drop_role = function(role_name,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_drop_role(role_name)
}

ThriftHiveMetastoreClient.prototype.send_drop_role = function(role_name){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('drop_role', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_drop_role_args()
  args.role_name = role_name
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_drop_role = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_drop_role_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("drop_role failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.get_role_names = function(callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_get_role_names()
}

ThriftHiveMetastoreClient.prototype.send_get_role_names = function(){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_role_names', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_get_role_names_args()
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_role_names = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_role_names_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("get_role_names failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.grant_role = function(role_name,principal_name,principal_type,grantor,grantorType,grant_option,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_grant_role(role_name, principal_name, principal_type, grantor, grantorType, grant_option)
}

ThriftHiveMetastoreClient.prototype.send_grant_role = function(role_name,principal_name,principal_type,grantor,grantorType,grant_option){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('grant_role', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_grant_role_args()
  args.role_name = role_name
  args.principal_name = principal_name
  args.principal_type = principal_type
  args.grantor = grantor
  args.grantorType = grantorType
  args.grant_option = grant_option
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_grant_role = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_grant_role_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("grant_role failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.revoke_role = function(role_name,principal_name,principal_type,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_revoke_role(role_name, principal_name, principal_type)
}

ThriftHiveMetastoreClient.prototype.send_revoke_role = function(role_name,principal_name,principal_type){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('revoke_role', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_revoke_role_args()
  args.role_name = role_name
  args.principal_name = principal_name
  args.principal_type = principal_type
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_revoke_role = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_revoke_role_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("revoke_role failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.list_roles = function(principal_name,principal_type,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_list_roles(principal_name, principal_type)
}

ThriftHiveMetastoreClient.prototype.send_list_roles = function(principal_name,principal_type){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('list_roles', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_list_roles_args()
  args.principal_name = principal_name
  args.principal_type = principal_type
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_list_roles = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_list_roles_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("list_roles failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.get_privilege_set = function(hiveObject,user_name,group_names,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_get_privilege_set(hiveObject, user_name, group_names)
}

ThriftHiveMetastoreClient.prototype.send_get_privilege_set = function(hiveObject,user_name,group_names){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_privilege_set', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_get_privilege_set_args()
  args.hiveObject = hiveObject
  args.user_name = user_name
  args.group_names = group_names
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_privilege_set = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_privilege_set_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("get_privilege_set failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.list_privileges = function(principal_name,principal_type,hiveObject,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_list_privileges(principal_name, principal_type, hiveObject)
}

ThriftHiveMetastoreClient.prototype.send_list_privileges = function(principal_name,principal_type,hiveObject){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('list_privileges', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_list_privileges_args()
  args.principal_name = principal_name
  args.principal_type = principal_type
  args.hiveObject = hiveObject
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_list_privileges = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_list_privileges_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("list_privileges failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.grant_privileges = function(privileges,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_grant_privileges(privileges)
}

ThriftHiveMetastoreClient.prototype.send_grant_privileges = function(privileges){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('grant_privileges', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_grant_privileges_args()
  args.privileges = privileges
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_grant_privileges = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_grant_privileges_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("grant_privileges failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.revoke_privileges = function(privileges,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_revoke_privileges(privileges)
}

ThriftHiveMetastoreClient.prototype.send_revoke_privileges = function(privileges){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('revoke_privileges', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_revoke_privileges_args()
  args.privileges = privileges
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_revoke_privileges = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_revoke_privileges_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("revoke_privileges failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.get_delegation_token = function(renewer_kerberos_principal_name,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_get_delegation_token(renewer_kerberos_principal_name)
}

ThriftHiveMetastoreClient.prototype.send_get_delegation_token = function(renewer_kerberos_principal_name){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_delegation_token', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_get_delegation_token_args()
  args.renewer_kerberos_principal_name = renewer_kerberos_principal_name
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_delegation_token = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_delegation_token_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("get_delegation_token failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.get_delegation_token_with_signature = function(renewer_kerberos_principal_name,token_signature,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_get_delegation_token_with_signature(renewer_kerberos_principal_name, token_signature)
}

ThriftHiveMetastoreClient.prototype.send_get_delegation_token_with_signature = function(renewer_kerberos_principal_name,token_signature){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_delegation_token_with_signature', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_get_delegation_token_with_signature_args()
  args.renewer_kerberos_principal_name = renewer_kerberos_principal_name
  args.token_signature = token_signature
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_get_delegation_token_with_signature = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_get_delegation_token_with_signature_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("get_delegation_token_with_signature failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.renew_delegation_token = function(token_str_form,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_renew_delegation_token(token_str_form)
}

ThriftHiveMetastoreClient.prototype.send_renew_delegation_token = function(token_str_form){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('renew_delegation_token', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_renew_delegation_token_args()
  args.token_str_form = token_str_form
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_renew_delegation_token = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_renew_delegation_token_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("renew_delegation_token failed: unknown result");
}
ThriftHiveMetastoreClient.prototype.cancel_delegation_token = function(token_str_form,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_cancel_delegation_token(token_str_form)
}

ThriftHiveMetastoreClient.prototype.send_cancel_delegation_token = function(token_str_form){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('cancel_delegation_token', Thrift.MessageType.CALL, this.seqid)
  var args = new ThriftHiveMetastore_cancel_delegation_token_args()
  args.token_str_form = token_str_form
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ThriftHiveMetastoreClient.prototype.recv_cancel_delegation_token = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ThriftHiveMetastore_cancel_delegation_token_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.o1) {
    return callback(result.o1);
  }
  callback(null)
}
var ThriftHiveMetastoreProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
ThriftHiveMetastoreProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin()
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output)
  } else {
    input.skip(Thrift.Type.STRUCT)
    input.readMessageEnd()
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname)
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid)
    x.write(output)
    output.writeMessageEnd()
    output.flush()
  }
}

ThriftHiveMetastoreProcessor.prototype.process_create_database = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_create_database_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_create_database_result()
  this._handler.create_database(args.database, function(success) {
    result.success = success
    output.writeMessageBegin("create_database", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_database = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_database_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_get_database_result()
  this._handler.get_database(args.name, function(success) {
    result.success = success
    output.writeMessageBegin("get_database", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_drop_database = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_drop_database_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_drop_database_result()
  this._handler.drop_database(args.name, args.deleteData, function(success) {
    result.success = success
    output.writeMessageBegin("drop_database", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_databases = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_databases_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_get_databases_result()
  this._handler.get_databases(args.pattern, function(success) {
    result.success = success
    output.writeMessageBegin("get_databases", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_all_databases = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_all_databases_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_get_all_databases_result()
  this._handler.get_all_databases(function(success) {
    result.success = success
    output.writeMessageBegin("get_all_databases", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_alter_database = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_alter_database_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_alter_database_result()
  this._handler.alter_database(args.dbname, args.db, function(success) {
    result.success = success
    output.writeMessageBegin("alter_database", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_type = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_type_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_get_type_result()
  this._handler.get_type(args.name, function(success) {
    result.success = success
    output.writeMessageBegin("get_type", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_create_type = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_create_type_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_create_type_result()
  this._handler.create_type(args.type, function(success) {
    result.success = success
    output.writeMessageBegin("create_type", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_drop_type = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_drop_type_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_drop_type_result()
  this._handler.drop_type(args.type, function(success) {
    result.success = success
    output.writeMessageBegin("drop_type", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_type_all = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_type_all_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_get_type_all_result()
  this._handler.get_type_all(args.name, function(success) {
    result.success = success
    output.writeMessageBegin("get_type_all", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_fields = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_fields_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_get_fields_result()
  this._handler.get_fields(args.db_name, args.table_name, function(success) {
    result.success = success
    output.writeMessageBegin("get_fields", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_schema = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_schema_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_get_schema_result()
  this._handler.get_schema(args.db_name, args.table_name, function(success) {
    result.success = success
    output.writeMessageBegin("get_schema", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_create_table = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_create_table_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_create_table_result()
  this._handler.create_table(args.tbl, function(success) {
    result.success = success
    output.writeMessageBegin("create_table", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_drop_table = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_drop_table_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_drop_table_result()
  this._handler.drop_table(args.dbname, args.name, args.deleteData, function(success) {
    result.success = success
    output.writeMessageBegin("drop_table", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_tables = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_tables_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_get_tables_result()
  this._handler.get_tables(args.db_name, args.pattern, function(success) {
    result.success = success
    output.writeMessageBegin("get_tables", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_all_tables = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_all_tables_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_get_all_tables_result()
  this._handler.get_all_tables(args.db_name, function(success) {
    result.success = success
    output.writeMessageBegin("get_all_tables", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_table = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_table_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_get_table_result()
  this._handler.get_table(args.dbname, args.tbl_name, function(success) {
    result.success = success
    output.writeMessageBegin("get_table", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_alter_table = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_alter_table_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_alter_table_result()
  this._handler.alter_table(args.dbname, args.tbl_name, args.new_tbl, function(success) {
    result.success = success
    output.writeMessageBegin("alter_table", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_add_partition = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_add_partition_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_add_partition_result()
  this._handler.add_partition(args.new_part, function(success) {
    result.success = success
    output.writeMessageBegin("add_partition", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_append_partition = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_append_partition_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_append_partition_result()
  this._handler.append_partition(args.db_name, args.tbl_name, args.part_vals, function(success) {
    result.success = success
    output.writeMessageBegin("append_partition", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_append_partition_by_name = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_append_partition_by_name_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_append_partition_by_name_result()
  this._handler.append_partition_by_name(args.db_name, args.tbl_name, args.part_name, function(success) {
    result.success = success
    output.writeMessageBegin("append_partition_by_name", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_drop_partition = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_drop_partition_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_drop_partition_result()
  this._handler.drop_partition(args.db_name, args.tbl_name, args.part_vals, args.deleteData, function(success) {
    result.success = success
    output.writeMessageBegin("drop_partition", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_drop_partition_by_name = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_drop_partition_by_name_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_drop_partition_by_name_result()
  this._handler.drop_partition_by_name(args.db_name, args.tbl_name, args.part_name, args.deleteData, function(success) {
    result.success = success
    output.writeMessageBegin("drop_partition_by_name", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_partition = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partition_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_get_partition_result()
  this._handler.get_partition(args.db_name, args.tbl_name, args.part_vals, function(success) {
    result.success = success
    output.writeMessageBegin("get_partition", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_partition_with_auth = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partition_with_auth_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_get_partition_with_auth_result()
  this._handler.get_partition_with_auth(args.db_name, args.tbl_name, args.part_vals, args.user_name, args.group_names, function(success) {
    result.success = success
    output.writeMessageBegin("get_partition_with_auth", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_partition_by_name = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partition_by_name_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_get_partition_by_name_result()
  this._handler.get_partition_by_name(args.db_name, args.tbl_name, args.part_name, function(success) {
    result.success = success
    output.writeMessageBegin("get_partition_by_name", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_partitions = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partitions_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_get_partitions_result()
  this._handler.get_partitions(args.db_name, args.tbl_name, args.max_parts, function(success) {
    result.success = success
    output.writeMessageBegin("get_partitions", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_partitions_with_auth = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partitions_with_auth_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_get_partitions_with_auth_result()
  this._handler.get_partitions_with_auth(args.db_name, args.tbl_name, args.max_parts, args.user_name, args.group_names, function(success) {
    result.success = success
    output.writeMessageBegin("get_partitions_with_auth", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_partition_names = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partition_names_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_get_partition_names_result()
  this._handler.get_partition_names(args.db_name, args.tbl_name, args.max_parts, function(success) {
    result.success = success
    output.writeMessageBegin("get_partition_names", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_partitions_ps = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partitions_ps_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_get_partitions_ps_result()
  this._handler.get_partitions_ps(args.db_name, args.tbl_name, args.part_vals, args.max_parts, function(success) {
    result.success = success
    output.writeMessageBegin("get_partitions_ps", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_partitions_ps_with_auth = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partitions_ps_with_auth_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_get_partitions_ps_with_auth_result()
  this._handler.get_partitions_ps_with_auth(args.db_name, args.tbl_name, args.part_vals, args.max_parts, args.user_name, args.group_names, function(success) {
    result.success = success
    output.writeMessageBegin("get_partitions_ps_with_auth", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_partition_names_ps = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partition_names_ps_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_get_partition_names_ps_result()
  this._handler.get_partition_names_ps(args.db_name, args.tbl_name, args.part_vals, args.max_parts, function(success) {
    result.success = success
    output.writeMessageBegin("get_partition_names_ps", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_partitions_by_filter = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_partitions_by_filter_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_get_partitions_by_filter_result()
  this._handler.get_partitions_by_filter(args.db_name, args.tbl_name, args.filter, args.max_parts, function(success) {
    result.success = success
    output.writeMessageBegin("get_partitions_by_filter", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_alter_partition = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_alter_partition_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_alter_partition_result()
  this._handler.alter_partition(args.db_name, args.tbl_name, args.new_part, function(success) {
    result.success = success
    output.writeMessageBegin("alter_partition", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_config_value = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_config_value_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_get_config_value_result()
  this._handler.get_config_value(args.name, args.defaultValue, function(success) {
    result.success = success
    output.writeMessageBegin("get_config_value", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_partition_name_to_vals = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_partition_name_to_vals_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_partition_name_to_vals_result()
  this._handler.partition_name_to_vals(args.part_name, function(success) {
    result.success = success
    output.writeMessageBegin("partition_name_to_vals", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_partition_name_to_spec = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_partition_name_to_spec_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_partition_name_to_spec_result()
  this._handler.partition_name_to_spec(args.part_name, function(success) {
    result.success = success
    output.writeMessageBegin("partition_name_to_spec", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_add_index = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_add_index_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_add_index_result()
  this._handler.add_index(args.new_index, args.index_table, function(success) {
    result.success = success
    output.writeMessageBegin("add_index", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_alter_index = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_alter_index_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_alter_index_result()
  this._handler.alter_index(args.dbname, args.base_tbl_name, args.idx_name, args.new_idx, function(success) {
    result.success = success
    output.writeMessageBegin("alter_index", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_drop_index_by_name = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_drop_index_by_name_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_drop_index_by_name_result()
  this._handler.drop_index_by_name(args.db_name, args.tbl_name, args.index_name, args.deleteData, function(success) {
    result.success = success
    output.writeMessageBegin("drop_index_by_name", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_index_by_name = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_index_by_name_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_get_index_by_name_result()
  this._handler.get_index_by_name(args.db_name, args.tbl_name, args.index_name, function(success) {
    result.success = success
    output.writeMessageBegin("get_index_by_name", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_indexes = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_indexes_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_get_indexes_result()
  this._handler.get_indexes(args.db_name, args.tbl_name, args.max_indexes, function(success) {
    result.success = success
    output.writeMessageBegin("get_indexes", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_index_names = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_index_names_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_get_index_names_result()
  this._handler.get_index_names(args.db_name, args.tbl_name, args.max_indexes, function(success) {
    result.success = success
    output.writeMessageBegin("get_index_names", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_create_role = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_create_role_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_create_role_result()
  this._handler.create_role(args.role, function(success) {
    result.success = success
    output.writeMessageBegin("create_role", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_drop_role = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_drop_role_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_drop_role_result()
  this._handler.drop_role(args.role_name, function(success) {
    result.success = success
    output.writeMessageBegin("drop_role", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_role_names = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_role_names_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_get_role_names_result()
  this._handler.get_role_names(function(success) {
    result.success = success
    output.writeMessageBegin("get_role_names", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_grant_role = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_grant_role_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_grant_role_result()
  this._handler.grant_role(args.role_name, args.principal_name, args.principal_type, args.grantor, args.grantorType, args.grant_option, function(success) {
    result.success = success
    output.writeMessageBegin("grant_role", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_revoke_role = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_revoke_role_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_revoke_role_result()
  this._handler.revoke_role(args.role_name, args.principal_name, args.principal_type, function(success) {
    result.success = success
    output.writeMessageBegin("revoke_role", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_list_roles = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_list_roles_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_list_roles_result()
  this._handler.list_roles(args.principal_name, args.principal_type, function(success) {
    result.success = success
    output.writeMessageBegin("list_roles", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_privilege_set = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_privilege_set_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_get_privilege_set_result()
  this._handler.get_privilege_set(args.hiveObject, args.user_name, args.group_names, function(success) {
    result.success = success
    output.writeMessageBegin("get_privilege_set", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_list_privileges = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_list_privileges_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_list_privileges_result()
  this._handler.list_privileges(args.principal_name, args.principal_type, args.hiveObject, function(success) {
    result.success = success
    output.writeMessageBegin("list_privileges", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_grant_privileges = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_grant_privileges_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_grant_privileges_result()
  this._handler.grant_privileges(args.privileges, function(success) {
    result.success = success
    output.writeMessageBegin("grant_privileges", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_revoke_privileges = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_revoke_privileges_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_revoke_privileges_result()
  this._handler.revoke_privileges(args.privileges, function(success) {
    result.success = success
    output.writeMessageBegin("revoke_privileges", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_delegation_token = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_delegation_token_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_get_delegation_token_result()
  this._handler.get_delegation_token(args.renewer_kerberos_principal_name, function(success) {
    result.success = success
    output.writeMessageBegin("get_delegation_token", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_get_delegation_token_with_signature = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_get_delegation_token_with_signature_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_get_delegation_token_with_signature_result()
  this._handler.get_delegation_token_with_signature(args.renewer_kerberos_principal_name, args.token_signature, function(success) {
    result.success = success
    output.writeMessageBegin("get_delegation_token_with_signature", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_renew_delegation_token = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_renew_delegation_token_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_renew_delegation_token_result()
  this._handler.renew_delegation_token(args.token_str_form, function(success) {
    result.success = success
    output.writeMessageBegin("renew_delegation_token", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

ThriftHiveMetastoreProcessor.prototype.process_cancel_delegation_token = function(seqid, input, output) {
  var args = new ThriftHiveMetastore_cancel_delegation_token_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ThriftHiveMetastore_cancel_delegation_token_result()
  this._handler.cancel_delegation_token(args.token_str_form, function(success) {
    result.success = success
    output.writeMessageBegin("cancel_delegation_token", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

