// Generated by CoffeeScript 1.6.3
(function() {
  $(function() {
    var cc, changeFavicon, config, editor, gistFragment, isEdgeVer, keyboard, readFromExample, readFromGist, readFromLink, run, showKeyboard, srcFragment, viewer;
    isEdgeVer = /extras\/edge/.test(location.href);
    config = (function() {
      config = {};
      location.search.substr(1).split('&').forEach(function(kv) {
        var key, value, _ref;
        _ref = kv.split('='), key = _ref[0], value = _ref[1];
        if (key) {
          if (value === 'false') {
            value = false;
          } else if (value === 'true' || value === void 0) {
            value = true;
          } else if (!isNaN(+value)) {
            value = +value;
          }
          return config[key] = value;
        }
      });
      return config;
    })();
    cc = window.cc = new CoffeeCollider(config);
    viewer = new WaveViewer(cc, document.getElementById('canvas'), {
      width: 200,
      height: 100,
      fillStyle: '#2c3e50',
      strokeStyle: '#f1c40f',
      lineWidth: 2
    });
    editor = new Editor('editor');
    keyboard = new Keyboard($('#keyboard'));
    run = function(code, append) {
      return cc.run(code, append, function(res) {
        if (res) {
          return console.log(res);
        }
      });
    };
    changeFavicon = function(mode) {
      var path;
      path = isEdgeVer ? '..' : './extras';
      return $('#favicon').attr({
        href: "" + path + "/img/" + mode + ".gif"
      });
    };
    showKeyboard = function(code) {
      if (/Message\.on\(?\s*"keyboard"/.test(code)) {
        return keyboard.show(500);
      } else {
        return keyboard.hide(500);
      }
    };
    cc.on('play', function() {
      viewer.start();
      $('#run').addClass('btn-danger');
      return changeFavicon('play');
    });
    cc.on('pause', function() {
      viewer.stop();
      $('#run').removeClass('btn-danger');
      return changeFavicon('pause');
    });
    editor.on('run', function() {
      var append, code, _ref;
      _ref = [editor.getSmartRegion(), true], code = _ref[0], append = _ref[1];
      if (code) {
        return run(code, append);
      }
    });
    editor.on('reset', function() {
      return cc.reset().pause();
    });
    keyboard.on('key', function(data) {
      return cc.send('keyboard', data);
    });
    $('#run').on('click', function(e) {
      var append, code, _ref, _ref1;
      if (e.shiftKey) {
        _ref = [editor.getSmartRegion(), true], code = _ref[0], append = _ref[1];
      } else {
        _ref1 = [editor.getValue(), false], code = _ref1[0], append = _ref1[1];
      }
      if (code) {
        run(code, append);
        return showKeyboard(code);
      }
    });
    $('#stop').on('click', function() {
      return cc.reset().pause();
    });
    $('#clear').on('click', function() {
      return editor.clear();
    });
    $('#link').on('click', function() {
      return window.location = "#" + srcFragment + (encodeURIComponent(editor.getValue()));
    });
    $('#version').text(cc.version);
    srcFragment = 'try:';
    gistFragment = 'gist:';
    window.onhashchange = function() {
      var hash;
      hash = location.hash.replace(/^\#/, '');
      switch (false) {
        case hash.indexOf(srcFragment) !== 0:
          return readFromLink(hash.substr(srcFragment.length), function(code) {
            editor.setSourceCode(code);
            return showKeyboard(code);
          });
        case hash.indexOf(gistFragment) !== 0:
          return readFromGist(hash.substr(gistFragment.length), function(code) {
            editor.setSourceCode(code);
            return showKeyboard(code);
          });
        case !/.+\.coffee$/.test(hash):
          return readFromExample(hash, function(code) {
            editor.setSourceCode(code);
            return showKeyboard(code);
          });
      }
    };
    readFromLink = function(link, callback) {
      var code;
      code = decodeURIComponent(link);
      return callback(code);
    };
    readFromGist = function(gistid, callback) {
      var url;
      url = "https://api.github.com/gists/" + gistid;
      return $.ajax({
        url: url,
        type: 'GET',
        dataType: 'jsonp'
      }).then(function(_arg) {
        var code, data, files;
        data = _arg.data;
        files = data.files;
        code = Object.keys(files).filter(function(key) {
          return files[key].language === 'CoffeeScript';
        }).map(function(key) {
          return files[key].content;
        }).join('\n');
        return callback(code);
      });
    };
    readFromExample = function(filename, callback) {
      var path;
      path = "./examples/" + filename;
      if (isEdgeVer) {
        path = "../." + path;
      }
      return $.get(path).then(function(code) {
        return callback(code);
      });
    };
    window.onhashchange();
    return window.showCompile = function() {
      return console.log(cc.compile(editor.getValue()));
    };
  });

}).call(this);
