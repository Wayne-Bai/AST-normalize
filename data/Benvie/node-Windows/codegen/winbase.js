var api = require('windows/api');

var
 CallbackT = api.CallbackT,
 StructT = api.StructT,
 Library = api.Library,
 ArrayT = api.ArrayT,
 EnumT = api.EnumT,
 NULL = api.NULL

var
 _void     = api('void'),
 int8      = api('int8'),
 uint8     = api('uint8'),
 int16     = api('int16'),
 uint16    = api('uint16'),
 int32     = api('int32'),
 uint32    = api('uint32'),
 int64     = api('int64'),
 uint64    = api('uint64'),
 float     = api('float'),
 double    = api('double'),
 CString   = api('CString'),
 WString   = api('WString'),
 bool      = api('bool'),
 byte      = api('byte'),
 char      = api('char'),
 uchar     = api('uchar'),
 short     = api('short'),
 ushort    = api('ushort'),
 int       = api('int'),
 uint      = api('uint'),
 long      = api('long'),
 ulong     = api('ulong'),
 longlong  = api('longlong'),
 ulonglong = api('ulonglong'),
 size_t    = api('size_t'),
 charΔ     = api('charΔ'),
 voidΔ     = api('voidΔ'),
 intΔ      = api('intΔ'),
 NULL      = api('NULL'),
 VoidT     = api('VoidT');

var
 va_list = int8.Δ.typedef('va_list'),
 ULONG = ulong.typedef('ULONG'),
 PULONG = ulong.Δ.typedef('PULONG'),
 USHORT = ushort.typedef('USHORT'),
 PUSHORT = ushort.Δ.typedef('PUSHORT'),
 UCHAR = uchar.typedef('UCHAR'),
 PUCHAR = uchar.Δ.typedef('PUCHAR'),
 DWORD = ulong.typedef('DWORD'),
 BOOL = int.typedef('BOOL'),
 BYTE = uchar.typedef('BYTE'),
 WORD = ushort.typedef('WORD'),
 PBOOL = int.Δ.typedef('PBOOL'),
 LPBOOL = int.Δ.typedef('LPBOOL'),
 PBYTE = uchar.Δ.typedef('PBYTE'),
 LPBYTE = uchar.Δ.typedef('LPBYTE'),
 LPINT = int.Δ.typedef('LPINT'),
 LPWORD = ushort.Δ.typedef('LPWORD'),
 LPLONG = long.Δ.typedef('LPLONG'),
 PDWORD = ulong.Δ.typedef('PDWORD'),
 LPDWORD = ulong.Δ.typedef('LPDWORD'),
 LPVOID = VoidT.Δ.typedef('LPVOID'),
 LPCVOID = VoidT.Δ.typedef('LPCVOID'),
 INT = int.typedef('INT'),
 UINT = uint.typedef('UINT'),
 UINT_PTR = uint.typedef('UINT_PTR'),
 LONG_PTR = long.typedef('LONG_PTR'),
 ULONG_PTR = ulong.typedef('ULONG_PTR'),
 PULONG_PTR = ulong.Δ.typedef('PULONG_PTR'),
 SIZE_T = ulong.typedef('SIZE_T'),
 PSIZE_T = ulong.Δ.typedef('PSIZE_T'),
 DWORD_PTR = ulong.typedef('DWORD_PTR'),
 PDWORD_PTR = ulong.Δ.typedef('PDWORD_PTR'),
 ULONG64 = ulonglong.typedef('ULONG64'),
 PULONG64 = ulonglong.Δ.typedef('PULONG64'),
 DWORD64 = ulonglong.typedef('DWORD64'),
 PVOID = VoidT.Δ.typedef('PVOID'),
 CHAR = int8.typedef('CHAR'),
 LONG = long.typedef('LONG'),
 WCHAR = ushort.typedef('WCHAR'),
 PWCHAR = ushort.Δ.typedef('PWCHAR'),
 LPWCH = ushort.Δ.typedef('LPWCH'),
 LPWSTR = ushort.Δ.typedef('LPWSTR'),
 PWSTR = ushort.Δ.typedef('PWSTR'),
 LPCWSTR = ushort.Δ.typedef('LPCWSTR'),
 PCWSTR = ushort.Δ.typedef('PCWSTR'),
 LPCH = int8.Δ.typedef('LPCH'),
 LPCCH = int8.Δ.typedef('LPCCH'),
 LPSTR = int8.Δ.typedef('LPSTR'),
 PSTR = int8.Δ.typedef('PSTR'),
 LPCSTR = int8.Δ.typedef('LPCSTR'),
 PLONG = long.Δ.typedef('PLONG'),
 HANDLE = VoidT.Δ.typedef('HANDLE'),
 HRESULT = long.typedef('HRESULT'),
 CCHAR = int8.typedef('CCHAR'),
 LANGID = ushort.typedef('LANGID'),
 LONGLONG = longlong.typedef('LONGLONG'),
 ULONGLONG = ulonglong.typedef('ULONGLONG'),
 PULONGLONG = ulonglong.Δ.typedef('PULONGLONG'),
 DWORDLONG = ulonglong.typedef('DWORDLONG'),
 BOOLEAN = uchar.typedef('BOOLEAN'),
 PBOOLEAN = uchar.Δ.typedef('PBOOLEAN'),
 PSECURITY_DESCRIPTOR = VoidT.Δ.typedef('PSECURITY_DESCRIPTOR'),
 PSID = VoidT.Δ.typedef('PSID'),
 WELL_KNOWN_SID_TYPE = uint.typedef('WELL_KNOWN_SID_TYPE'),
 ACL_INFORMATION_CLASS = uint.typedef('ACL_INFORMATION_CLASS'),
 SECURITY_DESCRIPTOR_CONTROL = ushort.typedef('SECURITY_DESCRIPTOR_CONTROL'),
 PSECURITY_DESCRIPTOR_CONTROL = ushort.Δ.typedef('PSECURITY_DESCRIPTOR_CONTROL'),
 AUDIT_EVENT_TYPE = uint.typedef('AUDIT_EVENT_TYPE'),
 SECURITY_IMPERSONATION_LEVEL = uint.typedef('SECURITY_IMPERSONATION_LEVEL'),
 TOKEN_TYPE = uint.typedef('TOKEN_TYPE'),
 TOKEN_INFORMATION_CLASS = uint.typedef('TOKEN_INFORMATION_CLASS'),
 SECURITY_INFORMATION = ulong.typedef('SECURITY_INFORMATION'),
 JOBOBJECTINFOCLASS = uint.typedef('JOBOBJECTINFOCLASS'),
 LOGICAL_PROCESSOR_RELATIONSHIP = uint.typedef('LOGICAL_PROCESSOR_RELATIONSHIP'),
 EXECUTION_STATE = ulong.typedef('EXECUTION_STATE'),
 LATENCY_TIME = uint.typedef('LATENCY_TIME'),
 POWER_REQUEST_TYPE = uint.typedef('POWER_REQUEST_TYPE'),
 HEAP_INFORMATION_CLASS = uint.typedef('HEAP_INFORMATION_CLASS'),
 TP_CALLBACK_PRIORITY = uint.typedef('TP_CALLBACK_PRIORITY'),
 ATOM = ushort.typedef('ATOM'),
 HGLOBAL = VoidT.Δ.typedef('HGLOBAL'),
 HLOCAL = VoidT.Δ.typedef('HLOCAL'),
 HFILE = int.typedef('HFILE'),
 PUMS_CONTEXT = VoidT.Δ.typedef('PUMS_CONTEXT'),
 PUMS_COMPLETION_LIST = VoidT.Δ.typedef('PUMS_COMPLETION_LIST'),
 UMS_THREAD_INFO_CLASS = uint.typedef('UMS_THREAD_INFO_CLASS');

var _DEP_SYSTEM_POLICY_TYPE = new EnumT('_DEP_SYSTEM_POLICY_TYPE', {
 AlwaysOff: 0,
 AlwaysOn: 1,
 OptIn: 2,
 OptOut: 3,
 TotalCount: 4
});

var _MEMORY_RESOURCE_NOTIFICATION_TYPE = new EnumT('_MEMORY_RESOURCE_NOTIFICATION_TYPE', {
 LowNotification: 0,
 HighNotification: 1
});

var _PROC_THREAD_ATTRIBUTE_NUM = new EnumT('_PROC_THREAD_ATTRIBUTE_NUM', {
 ParentProcess: 0,
 ExtendedFlags: 1,
 HandleList: 2,
 GroupAffinity: 3,
 PreferredNode: 4,
 IdealProcessor: 5,
 UmsThread: 6,
 MitigationPolicy: 7,
 Max: 8
});

var _GET_FILEEX_INFO_LEVELS = new EnumT('_GET_FILEEX_INFO_LEVELS', {
 Standard: 0,
 MaxLevel: 1
});

var _FINDEX_INFO_LEVELS = new EnumT('_FINDEX_INFO_LEVELS', {
 Standard: 0,
 Basic: 1,
 MaxLevel: 2
});

var _FINDEX_SEARCH_OPS = new EnumT('_FINDEX_SEARCH_OPS', {
 NameMatch: 0,
 LimitToDirectories: 1,
 LimitToDevices: 2,
 MaxOp: 3
});

var _STREAM_INFO_LEVELS = new EnumT('_STREAM_INFO_LEVELS', {
 FindStandard: 0,
 FindMaxLevel: 1
});


var _COMPUTER_NAME_FORMAT = new EnumT('_COMPUTER_NAME_FORMAT', {
 NetBios: 0,
 DnsHostname: 1,
 DnsDomain: 2,
 DnsFullyQualified: 3,
 PhysicalNetBios: 4,
 PhysicalDnsHostname: 5,
 PhysicalDnsDomain: 6,
 PhysicalDnsFullyQualified: 7,
 Max: 8
});

var _FILE_INFO_BY_HANDLE_CLASS = new EnumT('_FILE_INFO_BY_HANDLE_CLASS', {
 BasicInfo: 0,
 StandardInfo: 1,
 NameInfo: 2,
 RenameInfo: 3,
 DispositionInfo: 4,
 AllocationInfo: 5,
 EndOfInfo: 6,
 StreamInfo: 7,
 CompressionInfo: 8,
 AttributeTagInfo: 9,
 IdBothDirectoryInfo: 10,
 IdBothDirectoryRestartInfo: 11,
 IoPriorityHintInfo: 12,
 RemoteProtocolInfo: 13,
 MaximumClass: 14
});

var _PRIORITY_HINT = new EnumT('_PRIORITY_HINT', {
 VeryLow: 0,
 Low: 1,
 Normal: 2,
 MaximumType: 3
});

var _FILE_ID_TYPE = new EnumT('_FILE_ID_TYPE', {
 Type: 0,
 ObjectType: 1,
 MaximumType: 2
});


  PTHREAD_START_ROUTINE = new CallbackT('PTHREAD_START_ROUTINE', ulong, { 0: VoidT.Δ }),
  LPTHREAD_START_ROUTINE = new CallbackT('LPTHREAD_START_ROUTINE', ulong, { 0: VoidT.Δ }),
  PFIBER_START_ROUTINE = new CallbackT('PFIBER_START_ROUTINE', VoidT, { 0: VoidT.Δ }),
  LPFIBER_START_ROUTINE = new CallbackT('LPFIBER_START_ROUTINE', VoidT, { 0: VoidT.Δ }),
  PINIT_ONCE_FN = new CallbackT('PINIT_ONCE_FN', int, { 0: _RTL_RUN_ONCE.Δ, 1: VoidT.Δ, 2: VoidT.Δ.Δ }),
  PTOP_LEVEL_EXCEPTION_FILTER = new CallbackT('PTOP_LEVEL_EXCEPTION_FILTER', long, { 0: _EXCEPTION_POINTERS.Δ }),
  LPTOP_LEVEL_EXCEPTION_FILTER = new CallbackT('LPTOP_LEVEL_EXCEPTION_FILTER', long, { 0: _EXCEPTION_POINTERS.Δ }),
  PUMS_SCHEDULER_ENTRY_POINT = new CallbackT('PUMS_SCHEDULER_ENTRY_POINT', VoidT, { 0: uint, 1: ulong, 2: VoidT.Δ }),
  PFE_EXPORT_FUNC = new CallbackT('PFE_EXPORT_FUNC', ulong, { 0: uchar.Δ, 1: VoidT.Δ, 2: ulong }),
  PFE_IMPORT_FUNC = new CallbackT('PFE_IMPORT_FUNC', ulong, { 0: uchar.Δ, 1: VoidT.Δ, 2: ulong.Δ }),
  LPOVERLAPPED_COMPLETION_ROUTINE = new CallbackT('LPOVERLAPPED_COMPLETION_ROUTINE', VoidT, { 0: ulong, 1: ulong, 2: _OVERLAPPED.Δ }),
  PTIMERAPCROUTINE = new CallbackT('PTIMERAPCROUTINE', VoidT, { 0: VoidT.Δ, 1: ulong, 2: ulong }),
  PGET_MODULE_HANDLE_EXA = new CallbackT('PGET_MODULE_HANDLE_EXA', int, { 0: ulong, 1: int8.Δ, 2: HINSTANCE__.Δ.Δ }),
  PGET_MODULE_HANDLE_EXW = new CallbackT('PGET_MODULE_HANDLE_EXW', int, { 0: ulong, 1: ushort.Δ, 2: HINSTANCE__.Δ.Δ }),
  ENUMRESTYPEPROCA = new CallbackT('ENUMRESTYPEPROCA', int, { 0: HINSTANCE__.Δ, 1: int8.Δ, 2: long }),
  ENUMRESTYPEPROCW = new CallbackT('ENUMRESTYPEPROCW', int, { 0: HINSTANCE__.Δ, 1: ushort.Δ, 2: long }),
  ENUMRESNAMEPROCA = new CallbackT('ENUMRESNAMEPROCA', int, { 0: HINSTANCE__.Δ, 1: int8.Δ, 2: int8.Δ, 3: long }),
  ENUMRESNAMEPROCW = new CallbackT('ENUMRESNAMEPROCW', int, { 0: HINSTANCE__.Δ, 1: ushort.Δ, 2: ushort.Δ, 3: long }),
  ENUMRESLANGPROCA = new CallbackT('ENUMRESLANGPROCA', int, { 0: HINSTANCE__.Δ, 1: int8.Δ, 2: int8.Δ, 3: ushort, 4: long }),
  ENUMRESLANGPROCW = new CallbackT('ENUMRESLANGPROCW', int, { 0: HINSTANCE__.Δ, 1: ushort.Δ, 2: ushort.Δ, 3: ushort, 4: long }),
  PGET_SYSTEM_WOW64_DIRECTORY_A = new CallbackT('PGET_SYSTEM_WOW64_DIRECTORY_A', uint, { 0: int8.Δ, 1: uint }),
  PGET_SYSTEM_WOW64_DIRECTORY_W = new CallbackT('PGET_SYSTEM_WOW64_DIRECTORY_W', uint, { 0: ushort.Δ, 1: uint }),
  LPPROGRESS_ROUTINE = new CallbackT('LPPROGRESS_ROUTINE', ulong, { 0: _LARGE_INTEGER, 1: _LARGE_INTEGER, 2: _LARGE_INTEGER, 3: _LARGE_INTEGER, 4: ulong, 5: ulong, 6: VoidT.Δ, 7: VoidT.Δ, 8: VoidT.Δ }),
  WAITORTIMERCALLBACK = new CallbackT('WAITORTIMERCALLBACK', VoidT, { 0: VoidT.Δ, 1: uchar }),
  PTP_WIN32_IO_CALLBACK = new CallbackT('PTP_WIN32_IO_CALLBACK', VoidT, { 0: _TP_CALLBACK_INSTANCE.Δ, 1: VoidT.Δ, 2: VoidT.Δ, 3: ulong, 4: ulong, 5: _TP_IO.Δ }),
  PQUERYACTCTXW_FUNC = new CallbackT('PQUERYACTCTXW_FUNC', int, { 0: ulong, 1: VoidT.Δ, 2: VoidT.Δ, 3: ulong, 4: VoidT.Δ, 5: ulong, 6: ulong.Δ }),
  APPLICATION_RECOVERY_CALLBACK = new CallbackT('APPLICATION_RECOVERY_CALLBACK', ulong, { 0: VoidT.Δ }),

var _OVERLAPPED = new StructT('_OVERLAPPED', {
 Internal: ULONG_PTR,
 InternalHigh: ULONG_PTR,
 hEvent: HANDLE
});

var undefined = new StructT('undefined', {
 Offset: DWORD,
 OffsetHigh: DWORD
});

var _OVERLAPPED_ENTRY = new StructT('_OVERLAPPED_ENTRY', {
 lpCompletionKey: ULONG_PTR,
 lpOverlapped: LPOVERLAPPED,
 Internal: ULONG_PTR,
 dwNumberOfBytesTransferred: DWORD
});

var _SECURITY_ATTRIBUTES = new StructT('_SECURITY_ATTRIBUTES', {
 nLength: DWORD,
 lpSecurityDescriptor: LPVOID,
 bInheritHandle: BOOL
});

var _PROCESS_INFORMATION = new StructT('_PROCESS_INFORMATION', {
 hProcess: HANDLE,
 hThread: HANDLE,
 dwProcessId: DWORD,
 dwThreadId: DWORD
});

var _SYSTEMTIME = new StructT('_SYSTEMTIME', {
 wYear: WORD,
 wMonth: WORD,
 wDayOfWeek: WORD,
 wDay: WORD,
 wHour: WORD,
 wMinute: WORD,
 wSecond: WORD,
 wMilliseconds: WORD
});

var _COMMPROP = new StructT('_COMMPROP', {
 wPacketLength: WORD,
 wPacketVersion: WORD,
 dwServiceMask: DWORD,
 dwReserved1: DWORD,
 dwMaxTxQueue: DWORD,
 dwMaxRxQueue: DWORD,
 dwMaxBaud: DWORD,
 dwProvSubType: DWORD,
 dwProvCapabilities: DWORD,
 dwSettableParams: DWORD,
 dwSettableBaud: DWORD,
 wSettableData: WORD,
 wSettableStopParity: WORD,
 dwCurrentTxQueue: DWORD,
 dwCurrentRxQueue: DWORD,
 dwProvSpec1: DWORD,
 dwProvSpec2: DWORD,
 wcProvChar: ARRAY(WCHAR, 1)
});

var _COMSTAT = new StructT('_COMSTAT', {
 fCtsHold: DWORD,
 fDsrHold: DWORD,
 fRlsdHold: DWORD,
 fXoffHold: DWORD,
 fXoffSent: DWORD,
 fEof: DWORD,
 fTxim: DWORD,
 fReserved: DWORD,
 cbInQue: DWORD,
 cbOutQue: DWORD
});

var _DCB = new StructT('_DCB', {
 DCBlength: DWORD,
 BaudRate: DWORD,
 fBinary: DWORD,
 fParity: DWORD,
 fOutxCtsFlow: DWORD,
 fOutxDsrFlow: DWORD,
 fDtrControl: DWORD,
 fDsrSensitivity: DWORD,
 fTXContinueOnXoff: DWORD,
 fOutX: DWORD,
 fInX: DWORD,
 fErrorChar: DWORD,
 fNull: DWORD,
 fRtsControl: DWORD,
 fAbortOnError: DWORD,
 fDummy2: DWORD,
 wReserved: WORD,
 XonLim: WORD,
 XoffLim: WORD,
 ByteSize: BYTE,
 Parity: BYTE,
 StopBits: BYTE,
 XonChar: int8,
 XoffChar: int8,
 ErrorChar: int8,
 EofChar: int8,
 EvtChar: int8,
 wReserved1: WORD
});

var _COMMTIMEOUTS = new StructT('_COMMTIMEOUTS', {
 ReadIntervalTimeout: DWORD,
 ReadTotalTimeoutMultiplier: DWORD,
 ReadTotalTimeoutConstant: DWORD,
 WriteTotalTimeoutMultiplier: DWORD,
 WriteTotalTimeoutConstant: DWORD
});

var _COMMCONFIG = new StructT('_COMMCONFIG', {
 dwSize: DWORD,
 wVersion: WORD,
 wReserved: WORD,
 dcb: DCB,
 dwProviderSubType: DWORD,
 dwProviderOffset: DWORD,
 dwProviderSize: DWORD,
 wcProviderData: ARRAY(WCHAR, 1)
});

var _SYSTEM_INFO = new StructT('_SYSTEM_INFO', {
 dwPageSize: DWORD,
 lpMinimumApplicationAddress: LPVOID,
 lpMaximumApplicationAddress: LPVOID,
 dwActiveProcessorMask: DWORD_PTR,
 dwNumberOfProcessors: DWORD,
 dwProcessorType: DWORD,
 dwAllocationGranularity: DWORD,
 wProcessorLevel: WORD,
 wProcessorRevision: WORD
});

var undefined = new StructT('undefined', {
 wProcessorArchitecture: WORD,
 wReserved: WORD
});

var _MEMORYSTATUS = new StructT('_MEMORYSTATUS', {
 dwLength: DWORD,
 dwMemoryLoad: DWORD,
 dwTotalPhys: SIZE_T,
 dwAvailPhys: SIZE_T,
 dwTotalPageFile: SIZE_T,
 dwAvailPageFile: SIZE_T,
 dwTotalVirtual: SIZE_T,
 dwAvailVirtual: SIZE_T
});

var _EXCEPTION_DEBUG_INFO = new StructT('_EXCEPTION_DEBUG_INFO', {
 ExceptionRecord: EXCEPTION_RECORD,
 dwFirstChance: DWORD
});

var _CREATE_THREAD_DEBUG_INFO = new StructT('_CREATE_THREAD_DEBUG_INFO', {
 hThread: HANDLE,
 lpThreadLocalBase: LPVOID,
 lpStartAddress: LPTHREAD_START_ROUTINE
});

var _CREATE_PROCESS_DEBUG_INFO = new StructT('_CREATE_PROCESS_DEBUG_INFO', {
 hFile: HANDLE,
 hProcess: HANDLE,
 hThread: HANDLE,
 lpBaseOfImage: LPVOID,
 dwDebugInfoFileOffset: DWORD,
 nDebugInfoSize: DWORD,
 lpThreadLocalBase: LPVOID,
 lpStartAddress: LPTHREAD_START_ROUTINE,
 lpImageName: LPVOID,
 fUnicode: WORD
});

var _EXIT_THREAD_DEBUG_INFO = new StructT('_EXIT_THREAD_DEBUG_INFO', {
 dwExitCode: DWORD
});

var _EXIT_PROCESS_DEBUG_INFO = new StructT('_EXIT_PROCESS_DEBUG_INFO', {
 dwExitCode: DWORD
});

var _LOAD_DLL_DEBUG_INFO = new StructT('_LOAD_DLL_DEBUG_INFO', {
 hFile: HANDLE,
 lpBaseOfDll: LPVOID,
 dwDebugInfoFileOffset: DWORD,
 nDebugInfoSize: DWORD,
 lpImageName: LPVOID,
 fUnicode: WORD
});

var _UNLOAD_DLL_DEBUG_INFO = new StructT('_UNLOAD_DLL_DEBUG_INFO', {
 lpBaseOfDll: LPVOID
});

var _OUTPUT_DEBUG_STRING_INFO = new StructT('_OUTPUT_DEBUG_STRING_INFO', {
 lpDebugStringData: LPSTR,
 fUnicode: WORD,
 nDebugStringLength: WORD
});

var _RIP_INFO = new StructT('_RIP_INFO', {
 dwError: DWORD,
 dwType: DWORD
});

var _DEBUG_EVENT = new StructT('_DEBUG_EVENT', {
 dwDebugEventCode: DWORD,
 dwProcessId: DWORD,
 dwThreadId: DWORD,
 u: c:winbase.h@29353@S@_DEBUG_EVENT@Ua
});

var JIT_DEBUG_INFO64 = new StructT('JIT_DEBUG_INFO64', {
 dwSize: DWORD,
 dwProcessorArchitecture: DWORD,
 dwThreadID: DWORD,
 dwReserved0: DWORD,
 lpExceptionAddress: ULONG64,
 lpExceptionRecord: ULONG64,
 lpContextRecord: ULONG64
});

var _OFSTRUCT = new StructT('_OFSTRUCT', {
 cBytes: BYTE,
 fFixedDisk: BYTE,
 nErrCode: WORD,
 Reserved1: WORD,
 Reserved2: WORD,
 szPathName: ARRAY(CHAR, OFS_MAXPATHNAME)
});

var _MEMORYSTATUSEX = new StructT('_MEMORYSTATUSEX', {
 dwLength: DWORD,
 dwMemoryLoad: DWORD,
 ullTotalPhys: DWORDLONG,
 ullAvailPhys: DWORDLONG,
 ullTotalPageFile: DWORDLONG,
 ullAvailPageFile: DWORDLONG,
 ullTotalVirtual: DWORDLONG,
 ullAvailVirtual: DWORDLONG,
 ullAvailExtendedVirtual: DWORDLONG
});

var _PROCESS_HEAP_ENTRY = new StructT('_PROCESS_HEAP_ENTRY', {
 lpData: PVOID,
 cbData: DWORD,
 cbOverhead: BYTE,
 iRegionIndex: BYTE,
 wFlags: WORD
});

var undefined = new StructT('undefined', {
 hMem: HANDLE,
 dwReserved: ARRAY(DWORD,  3 )
});

var undefined = new StructT('undefined', {
 dwCommittedSize: DWORD,
 dwUnCommittedSize: DWORD,
 lpFirstBlock: LPVOID,
 lpLastBlock: LPVOID
});

var _UMS_SCHEDULER_STARTUP_INFO = new StructT('_UMS_SCHEDULER_STARTUP_INFO', {
 UmsVersion: ULONG,
 CompletionList: PUMS_COMPLETION_LIST,
 SchedulerProc: PUMS_SCHEDULER_ENTRY_POINT,
 SchedulerParam: PVOID
});


var POWER_REQUEST_CONTEXT = new StructT('POWER_REQUEST_CONTEXT', {
 Version: ULONG,
 Flags: DWORD,
 Reason: c:winbase.h@97709@S@_REASON_CONTEXT@Ua
});

var undefined = new StructT('undefined', {
 LocalizedReasonModule: HMODULE,
 LocalizedReasonId: ULONG,
 ReasonStringCount: ULONG,
 ReasonStrings: ushort.Δ.Δ
});

var _BY_HANDLE_FILE_INFORMATION = new StructT('_BY_HANDLE_FILE_INFORMATION', {
 dwFileAttributes: DWORD,
 ftCreationTime: FILETIME,
 ftLastAccessTime: FILETIME,
 ftLastWriteTime: FILETIME,
 dwVolumeSerialNumber: DWORD,
 nFileSizeHigh: DWORD,
 nFileSizeLow: DWORD,
 nNumberOfLinks: DWORD,
 nFileIndexHigh: DWORD,
 nFileIndexLow: DWORD
});

var _TIME_ZONE_INFORMATION = new StructT('_TIME_ZONE_INFORMATION', {
 Bias: LONG,
 StandardName: ARRAY(WCHAR,  32 ),
 StandardDate: SYSTEMTIME,
 StandardBias: LONG,
 DaylightName: ARRAY(WCHAR,  32 ),
 DaylightDate: SYSTEMTIME,
 DaylightBias: LONG
});

var _TIME_DYNAMIC_ZONE_INFORMATION = new StructT('_TIME_DYNAMIC_ZONE_INFORMATION', {
 Bias: LONG,
 StandardName: ARRAY(WCHAR,  32 ),
 StandardDate: SYSTEMTIME,
 StandardBias: LONG,
 DaylightName: ARRAY(WCHAR,  32 ),
 DaylightDate: SYSTEMTIME,
 DaylightBias: LONG,
 TimeZoneKeyName: ARRAY(WCHAR,  128 ),
 DynamicDaylightTimeDisabled: BOOLEAN
});

var _WIN32_STREAM_ID = new StructT('_WIN32_STREAM_ID', {
 dwStreamId: DWORD,
 dwStreamAttributes: DWORD,
 Size: LARGE_INTEGER,
 dwStreamNameSize: DWORD,
 cStreamName: ARRAY(WCHAR,  ANYSIZE_ARRAY )
});

var STARTUPINFO = new StructT('STARTUPINFO', {
 cb: DWORD,
 lpReserved: LPSTR,
 lpDesktop: LPSTR,
 lpTitle: LPSTR,
 dwX: DWORD,
 dwY: DWORD,
 dwXSize: DWORD,
 dwYSize: DWORD,
 dwXCountChars: DWORD,
 dwYCountChars: DWORD,
 dwFillAttribute: DWORD,
 dwFlags: DWORD,
 wShowWindow: WORD,
 cbReserved2: WORD,
 lpReserved2: LPBYTE,
 hStdInput: HANDLE,
 hStdOutput: HANDLE,
 hStdError: HANDLE
});

var _STARTUPINFOW = new StructT('_STARTUPINFOW', {
 cb: DWORD,
 lpReserved: LPWSTR,
 lpDesktop: LPWSTR,
 lpTitle: LPWSTR,
 dwX: DWORD,
 dwY: DWORD,
 dwXSize: DWORD,
 dwYSize: DWORD,
 dwXCountChars: DWORD,
 dwYCountChars: DWORD,
 dwFillAttribute: DWORD,
 dwFlags: DWORD,
 wShowWindow: WORD,
 cbReserved2: WORD,
 lpReserved2: LPBYTE,
 hStdInput: HANDLE,
 hStdOutput: HANDLE,
 hStdError: HANDLE
});

var STARTUPINFOEX = new StructT('STARTUPINFOEX', {
 StartupInfo: STARTUPINFOA,
 lpAttributeList: LPPROC_THREAD_ATTRIBUTE_LIST
});

var _STARTUPINFOEXW = new StructT('_STARTUPINFOEXW', {
 StartupInfo: STARTUPINFOW,
 lpAttributeList: LPPROC_THREAD_ATTRIBUTE_LIST
});

var WIN32_FIND_DATA = new StructT('WIN32_FIND_DATA', {
 dwFileAttributes: DWORD,
 ftCreationTime: FILETIME,
 ftLastAccessTime: FILETIME,
 ftLastWriteTime: FILETIME,
 nFileSizeHigh: DWORD,
 nFileSizeLow: DWORD,
 dwReserved0: DWORD,
 dwReserved1: DWORD,
 cFileName: ARRAY(CHAR,  MAX_PATH ),
 cAlternateFileName: ARRAY(CHAR,  14 )
});

var _WIN32_FIND_DATAW = new StructT('_WIN32_FIND_DATAW', {
 dwFileAttributes: DWORD,
 ftCreationTime: FILETIME,
 ftLastAccessTime: FILETIME,
 ftLastWriteTime: FILETIME,
 nFileSizeHigh: DWORD,
 nFileSizeLow: DWORD,
 dwReserved0: DWORD,
 dwReserved1: DWORD,
 cFileName: ARRAY(WCHAR,  MAX_PATH ),
 cAlternateFileName: ARRAY(WCHAR,  14 )
});

var _WIN32_FILE_ATTRIBUTE_DATA = new StructT('_WIN32_FILE_ATTRIBUTE_DATA', {
 dwFileAttributes: DWORD,
 ftCreationTime: FILETIME,
 ftLastAccessTime: FILETIME,
 ftLastWriteTime: FILETIME,
 nFileSizeHigh: DWORD,
 nFileSizeLow: DWORD
});

var _WIN32_FIND_STREAM_DATA = new StructT('_WIN32_FIND_STREAM_DATA', {
 StreamSize: LARGE_INTEGER,
 cStreamName: ARRAY(WCHAR, undefined)
});

var _EVENTLOG_FULL_INFORMATION = new StructT('_EVENTLOG_FULL_INFORMATION', {
 dwFull: DWORD
});

var HW_PROFILE_INFO = new StructT('HW_PROFILE_INFO', {
 dwDockInfo: DWORD,
 szHwProfileGuid: ARRAY(CHAR, HW_PROFILE_GUIDLEN),
 szHwProfileName: ARRAY(CHAR, MAX_PROFILE_LEN)
});

var tagHW_PROFILE_INFOW = new StructT('tagHW_PROFILE_INFOW', {
 dwDockInfo: DWORD,
 szHwProfileGuid: ARRAY(WCHAR, HW_PROFILE_GUIDLEN),
 szHwProfileName: ARRAY(WCHAR, MAX_PROFILE_LEN)
});

var _SYSTEM_POWER_STATUS = new StructT('_SYSTEM_POWER_STATUS', {
 ACLineStatus: BYTE,
 BatteryFlag: BYTE,
 BatteryLifePercent: BYTE,
 Reserved1: BYTE,
 BatteryLifeTime: DWORD,
 BatteryFullLifeTime: DWORD
});

var ACTCTX = new StructT('ACTCTX', {
 cbSize: ULONG,
 dwFlags: DWORD,
 lpSource: LPCSTR,
 wProcessorArchitecture: USHORT,
 wLangId: LANGID,
 lpAssemblyDirectory: LPCSTR,
 lpResourceName: LPCSTR,
 lpApplicationName: LPCSTR,
 hModule: HMODULE
});

var tagACTCTXW = new StructT('tagACTCTXW', {
 cbSize: ULONG,
 dwFlags: DWORD,
 lpSource: LPCWSTR,
 wProcessorArchitecture: USHORT,
 wLangId: LANGID,
 lpAssemblyDirectory: LPCWSTR,
 lpResourceName: LPCWSTR,
 lpApplicationName: LPCWSTR,
 hModule: HMODULE
});

var tagACTCTX_SECTION_KEYED_DATA_2600 = new StructT('tagACTCTX_SECTION_KEYED_DATA_2600', {
 cbSize: ULONG,
 ulDataFormatVersion: ULONG,
 lpData: PVOID,
 ulLength: ULONG,
 lpSectionGlobalData: PVOID,
 ulSectionGlobalDataLength: ULONG,
 lpSectionBase: PVOID,
 ulSectionTotalLength: ULONG,
 hActCtx: HANDLE,
 ulAssemblyRosterIndex: ULONG
});

var tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA = new StructT('tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA', {
 lpInformation: PVOID,
 lpSectionBase: PVOID,
 ulSectionLength: ULONG,
 lpSectionGlobalDataBase: PVOID,
 ulSectionGlobalDataLength: ULONG
});

var tagACTCTX_SECTION_KEYED_DATA = new StructT('tagACTCTX_SECTION_KEYED_DATA', {
 cbSize: ULONG,
 ulDataFormatVersion: ULONG,
 lpData: PVOID,
 ulLength: ULONG,
 lpSectionGlobalData: PVOID,
 ulSectionGlobalDataLength: ULONG,
 lpSectionBase: PVOID,
 ulSectionTotalLength: ULONG,
 hActCtx: HANDLE,
 ulAssemblyRosterIndex: ULONG,
 ulFlags: ULONG,
 AssemblyMetadata: ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA
});

var _ACTIVATION_CONTEXT_BASIC_INFORMATION = new StructT('_ACTIVATION_CONTEXT_BASIC_INFORMATION', {
 hActCtx: HANDLE,
 dwFlags: DWORD
});

var _FILE_BASIC_INFO = new StructT('_FILE_BASIC_INFO', {
 CreationTime: LARGE_INTEGER,
 LastAccessTime: LARGE_INTEGER,
 LastWriteTime: LARGE_INTEGER,
 ChangeTime: LARGE_INTEGER,
 FileAttributes: DWORD
});

var _FILE_STANDARD_INFO = new StructT('_FILE_STANDARD_INFO', {
 AllocationSize: LARGE_INTEGER,
 EndOfFile: LARGE_INTEGER,
 NumberOfLinks: DWORD,
 DeletePending: BOOLEAN,
 Directory: BOOLEAN
});

var _FILE_NAME_INFO = new StructT('_FILE_NAME_INFO', {
 FileNameLength: DWORD,
 FileName: ARRAY(WCHAR, 1)
});

var _FILE_RENAME_INFO = new StructT('_FILE_RENAME_INFO', {
 ReplaceIfExists: BOOLEAN,
 RootDirectory: HANDLE,
 FileNameLength: DWORD,
 FileName: ARRAY(WCHAR, 1)
});

var _FILE_ALLOCATION_INFO = new StructT('_FILE_ALLOCATION_INFO', {
 AllocationSize: LARGE_INTEGER
});

var _FILE_END_OF_FILE_INFO = new StructT('_FILE_END_OF_FILE_INFO', {
 EndOfFile: LARGE_INTEGER
});

var _FILE_STREAM_INFO = new StructT('_FILE_STREAM_INFO', {
 NextEntryOffset: DWORD,
 StreamNameLength: DWORD,
 StreamSize: LARGE_INTEGER,
 StreamAllocationSize: LARGE_INTEGER,
 StreamName: ARRAY(WCHAR, 1)
});

var _FILE_COMPRESSION_INFO = new StructT('_FILE_COMPRESSION_INFO', {
 CompressedFileSize: LARGE_INTEGER,
 CompressionFormat: WORD,
 CompressionUnitShift: UCHAR,
 ChunkShift: UCHAR,
 ClusterShift: UCHAR,
 Reserved: ARRAY(UCHAR, 3)
});

var _FILE_ATTRIBUTE_TAG_INFO = new StructT('_FILE_ATTRIBUTE_TAG_INFO', {
 FileAttributes: DWORD,
 ReparseTag: DWORD
});

var _FILE_DISPOSITION_INFO = new StructT('_FILE_DISPOSITION_INFO', {
 DeleteFileA: BOOLEAN
});

var _FILE_ID_BOTH_DIR_INFO = new StructT('_FILE_ID_BOTH_DIR_INFO', {
 NextEntryOffset: DWORD,
 FileIndex: DWORD,
 CreationTime: LARGE_INTEGER,
 LastAccessTime: LARGE_INTEGER,
 LastWriteTime: LARGE_INTEGER,
 ChangeTime: LARGE_INTEGER,
 EndOfFile: LARGE_INTEGER,
 AllocationSize: LARGE_INTEGER,
 FileAttributes: DWORD,
 FileNameLength: DWORD,
 EaSize: DWORD,
 ShortNameLength: CCHAR,
 ShortName: ARRAY(WCHAR, 12),
 FileId: LARGE_INTEGER,
 FileName: ARRAY(WCHAR, 1)
});

var _FILE_IO_PRIORITY_HINT_INFO = new StructT('_FILE_IO_PRIORITY_HINT_INFO', {
 PriorityHint: PRIORITY_HINT
});

var _FILE_REMOTE_PROTOCOL_INFO = new StructT('_FILE_REMOTE_PROTOCOL_INFO', {
 StructureVersion: USHORT,
 StructureSize: USHORT,
 Protocol: DWORD,
 ProtocolMajorVersion: USHORT,
 ProtocolMinorVersion: USHORT,
 ProtocolRevision: USHORT,
 Reserved: USHORT,
 Flags: DWORD,
 GenericReserved: ,
 ProtocolSpecificReserved:
});

var undefined = new StructT('undefined', {
 Reserved: ARRAY(DWORD, 8)
});

var undefined = new StructT('undefined', {
 Reserved: ARRAY(DWORD, 16)
});

var FILE_ID_DESCRIPTOR = new StructT('FILE_ID_DESCRIPTOR', {
 dwSize: DWORD,
 Type: FILE_ID_TYPE
});


  InitOnceInitialize: [ VoidT, { InitOnce: PINIT_ONCE } ],
  InitOnceExecuteOnce: [ int, { InitOnce: PINIT_ONCE, InitFn: PINIT_ONCE_FN, Parameter: PVOID, Context: VoidT.Δ.Δ } ],
  InitOnceBeginInitialize: [ int, { lpInitOnce: LPINIT_ONCE, dwFlags: DWORD, fPending: PBOOL, lpContext: VoidT.Δ.Δ } ],
  InitOnceComplete: [ int, { lpInitOnce: LPINIT_ONCE, dwFlags: DWORD, lpContext: LPVOID } ],
  InitializeSRWLock: [ VoidT, { SRWLock: PSRWLOCK } ],
  ReleaseSRWLockExclusive: [ VoidT, { SRWLock: PSRWLOCK } ],
  ReleaseSRWLockShared: [ VoidT, { SRWLock: PSRWLOCK } ],
  AcquireSRWLockExclusive: [ VoidT, { SRWLock: PSRWLOCK } ],
  AcquireSRWLockShared: [ VoidT, { SRWLock: PSRWLOCK } ],
  TryAcquireSRWLockExclusive: [ uchar, { SRWLock: PSRWLOCK } ],
  TryAcquireSRWLockShared: [ uchar, { SRWLock: PSRWLOCK } ],
  InitializeConditionVariable: [ VoidT, { ConditionVariable: PCONDITION_VARIABLE } ],
  WakeConditionVariable: [ VoidT, { ConditionVariable: PCONDITION_VARIABLE } ],
  WakeAllConditionVariable: [ VoidT, { ConditionVariable: PCONDITION_VARIABLE } ],
  SleepConditionVariableCS: [ int, { ConditionVariable: PCONDITION_VARIABLE, CriticalSection: PCRITICAL_SECTION, dwMilliseconds: DWORD } ],
  SleepConditionVariableSRW: [ int, { ConditionVariable: PCONDITION_VARIABLE, SRWLock: PSRWLOCK, dwMilliseconds: DWORD, Flags: ULONG } ],
  EncodePointer: [ VoidT.Δ, { Ptr: PVOID } ],
  DecodePointer: [ VoidT.Δ, { Ptr: PVOID } ],
  EncodeSystemPointer: [ VoidT.Δ, { Ptr: PVOID } ],
  DecodeSystemPointer: [ VoidT.Δ, { Ptr: PVOID } ],
  InterlockedIncrement: [ long, { lpAddend: long.Δ } ],
  InterlockedDecrement: [ long, { lpAddend: long.Δ } ],
  InterlockedExchange: [ long, { Target: long.Δ, Value: LONG } ],
  InterlockedExchangeAdd: [ long, { Addend: long.Δ, Value: LONG } ],
  InterlockedCompareExchange: [ long, { Destination: long.Δ, Exchange: LONG, Comperand: LONG } ],
  InterlockedCompareExchange64: [ longlong, { Destination: longlong.Δ, Exchange: LONGLONG, Comperand: LONGLONG } ],
  InterlockedAnd64: [ longlong, { Destination: longlong.Δ, Value: LONGLONG } ],
  InterlockedOr64: [ longlong, { Destination: longlong.Δ, Value: LONGLONG } ],
  InterlockedXor64: [ longlong, { Destination: longlong.Δ, Value: LONGLONG } ],
  InterlockedIncrement64: [ longlong, { Addend: longlong.Δ } ],
  InterlockedDecrement64: [ longlong, { Addend: longlong.Δ } ],
  InterlockedExchange64: [ longlong, { Target: longlong.Δ, Value: LONGLONG } ],
  InterlockedExchangeAdd64: [ longlong, { Addend: longlong.Δ, Value: LONGLONG } ],
  InitializeSListHead: [ VoidT, { ListHead: PSLIST_HEADER } ],
  InterlockedPopEntrySList: [ VOIDPTR, { ListHead: PSLIST_HEADER } ],
  InterlockedPushEntrySList: [ VOIDPTR, { ListHead: PSLIST_HEADER, ListEntry: PSINGLE_LIST_ENTRY } ],
  InterlockedFlushSList: [ VOIDPTR, { ListHead: PSLIST_HEADER } ],
  QueryDepthSList: [ ushort, { ListHead: PSLIST_HEADER } ],
  FreeResource: [ int, { hResData: HGLOBAL } ],
  LockResource: [ VoidT.Δ, { hResData: HGLOBAL } ],
  WinMain: [ VoidT, { hInstance: HINSTANCE, hPrevInstance: HINSTANCE, lpCmdLine: LPSTR, nShowCmd: int } ],
  wWinMain: [ VoidT, { hInstance: HINSTANCE, hPrevInstance: HINSTANCE, lpCmdLine: LPWSTR, nShowCmd: int } ],
  FreeLibrary: [ int, { hLibModule: HMODULE } ],
  FreeLibraryAndExitThread: [ VoidT, { hLibModule: HMODULE, dwExitCode: DWORD } ],
  DisableThreadLibraryCalls: [ int, { hLibModule: HMODULE } ],
  GetProcAddress: [ VOIDPTR, { hModule: HMODULE, lpProcName: LPCSTR } ],
  GetVersion: [ ulong, {  } ],
  GlobalAlloc: [ VoidT.Δ, { uFlags: UINT, dwBytes: SIZE_T } ],
  GlobalReAlloc: [ VoidT.Δ, { hMem: HGLOBAL, dwBytes: SIZE_T, uFlags: UINT } ],
  GlobalSize: [ ulong, { hMem: HGLOBAL } ],
  GlobalFlags: [ uint, { hMem: HGLOBAL } ],
  GlobalLock: [ VoidT.Δ, { hMem: HGLOBAL } ],
  GlobalHandle: [ VoidT.Δ, { pMem: LPCVOID } ],
  GlobalUnlock: [ int, { hMem: HGLOBAL } ],
  GlobalFree: [ VoidT.Δ, { hMem: HGLOBAL } ],
  GlobalCompact: [ ulong, { dwMinFree: DWORD } ],
  GlobalFix: [ VoidT, { hMem: HGLOBAL } ],
  GlobalUnfix: [ VoidT, { hMem: HGLOBAL } ],
  GlobalWire: [ VoidT.Δ, { hMem: HGLOBAL } ],
  GlobalUnWire: [ int, { hMem: HGLOBAL } ],
  GlobalMemoryStatus: [ VoidT, { lpBuffer: LPMEMORYSTATUS } ],
  GlobalMemoryStatusEx: [ int, { lpBuffer: LPMEMORYSTATUSEX } ],
  LocalAlloc: [ VoidT.Δ, { uFlags: UINT, uBytes: SIZE_T } ],
  LocalReAlloc: [ VoidT.Δ, { hMem: HLOCAL, uBytes: SIZE_T, uFlags: UINT } ],
  LocalLock: [ VoidT.Δ, { hMem: HLOCAL } ],
  LocalHandle: [ VoidT.Δ, { pMem: LPCVOID } ],
  LocalUnlock: [ int, { hMem: HLOCAL } ],
  LocalSize: [ ulong, { hMem: HLOCAL } ],
  LocalFlags: [ uint, { hMem: HLOCAL } ],
  LocalFree: [ VoidT.Δ, { hMem: HLOCAL } ],
  LocalShrink: [ ulong, { hMem: HLOCAL, cbNewSize: UINT } ],
  LocalCompact: [ ulong, { uMinFree: UINT } ],
  FlushInstructionCache: [ int, { hProcess: HANDLE, lpBaseAddress: LPCVOID, dwSize: SIZE_T } ],
  FlushProcessWriteBuffers: [ VoidT, {  } ],
  QueryThreadCycleTime: [ int, { ThreadHandle: HANDLE, CycleTime: PULONG64 } ],
  QueryProcessCycleTime: [ int, { ProcessHandle: HANDLE, CycleTime: PULONG64 } ],
  QueryIdleProcessorCycleTime: [ int, { BufferLength: PULONG, ProcessorIdleCycleTime: PULONG64 } ],
  QueryIdleProcessorCycleTimeEx: [ int, { Group: USHORT, BufferLength: PULONG, ProcessorIdleCycleTime: PULONG64 } ],
  QueryUnbiasedInterruptTime: [ int, { UnbiasedTime: PULONGLONG } ],
  GetProcessorSystemCycleTime: [ int, { Group: USHORT, Buffer: PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION, ReturnedLength: PDWORD } ],
  VirtualAlloc: [ VoidT.Δ, { lpAddress: LPVOID, dwSize: SIZE_T, flAllocationType: DWORD, flProtect: DWORD } ],
  VirtualFree: [ int, { lpAddress: LPVOID, dwSize: SIZE_T, dwFreeType: DWORD } ],
  VirtualProtect: [ int, { lpAddress: LPVOID, dwSize: SIZE_T, flNewProtect: DWORD, lpflOldProtect: PDWORD } ],
  VirtualQuery: [ ulong, { lpAddress: LPCVOID, lpBuffer: PMEMORY_BASIC_INFORMATION, dwLength: SIZE_T } ],
  VirtualAllocEx: [ VoidT.Δ, { hProcess: HANDLE, lpAddress: LPVOID, dwSize: SIZE_T, flAllocationType: DWORD, flProtect: DWORD } ],
  VirtualAllocExNuma: [ VoidT.Δ, { hProcess: HANDLE, lpAddress: LPVOID, dwSize: SIZE_T, flAllocationType: DWORD, flProtect: DWORD, nndPreferred: DWORD } ],
  GetWriteWatch: [ uint, { dwFlags: DWORD, lpBaseAddress: PVOID, dwRegionSize: SIZE_T, lpAddresses: VoidT.Δ.Δ, lpdwCount: ulong.Δ, lpdwGranularity: PULONG } ],
  ResetWriteWatch: [ uint, { lpBaseAddress: LPVOID, dwRegionSize: SIZE_T } ],
  GetLargePageMinimum: [ ulong, {  } ],
  EnumSystemFirmwareTables: [ uint, { FirmwareTableProviderSignature: DWORD, pFirmwareTableEnumBuffer: PVOID, BufferSize: DWORD } ],
  GetSystemFirmwareTable: [ uint, { FirmwareTableProviderSignature: DWORD, FirmwareTableID: DWORD, pFirmwareTableBuffer: PVOID, BufferSize: DWORD } ],
  GetPhysicallyInstalledSystemMemory: [ int, { TotalMemoryInKilobytes: PULONGLONG } ],
  VirtualFreeEx: [ int, { hProcess: HANDLE, lpAddress: LPVOID, dwSize: SIZE_T, dwFreeType: DWORD } ],
  VirtualProtectEx: [ int, { hProcess: HANDLE, lpAddress: LPVOID, dwSize: SIZE_T, flNewProtect: DWORD, lpflOldProtect: PDWORD } ],
  VirtualQueryEx: [ ulong, { hProcess: HANDLE, lpAddress: LPCVOID, lpBuffer: PMEMORY_BASIC_INFORMATION, dwLength: SIZE_T } ],
  HeapCreate: [ VoidT.Δ, { flOptions: DWORD, dwInitialSize: SIZE_T, dwMaximumSize: SIZE_T } ],
  HeapDestroy: [ int, { hHeap: HANDLE } ],
  HeapAlloc: [ VoidT.Δ, { hHeap: HANDLE, dwFlags: DWORD, dwBytes: SIZE_T } ],
  HeapReAlloc: [ VoidT.Δ, { hHeap: HANDLE, dwFlags: DWORD, lpMem: LPVOID, dwBytes: SIZE_T } ],
  HeapFree: [ int, { hHeap: HANDLE, dwFlags: DWORD, lpMem: LPVOID } ],
  HeapSize: [ ulong, { hHeap: HANDLE, dwFlags: DWORD, lpMem: LPCVOID } ],
  HeapValidate: [ int, { hHeap: HANDLE, dwFlags: DWORD, lpMem: LPCVOID } ],
  HeapCompact: [ ulong, { hHeap: HANDLE, dwFlags: DWORD } ],
  GetProcessHeap: [ VoidT.Δ, {  } ],
  GetProcessHeaps: [ ulong, { NumberOfHeaps: DWORD, ProcessHeaps: PHANDLE } ],
  HeapLock: [ int, { hHeap: HANDLE } ],
  HeapUnlock: [ int, { hHeap: HANDLE } ],
  HeapWalk: [ int, { hHeap: HANDLE, lpEntry: LPPROCESS_HEAP_ENTRY } ],
  HeapSetInformation: [ int, { HeapHandle: HANDLE, HeapInformationClass: HEAP_INFORMATION_CLASS, HeapInformation: PVOID, HeapInformationLength: SIZE_T } ],
  HeapQueryInformation: [ int, { HeapHandle: HANDLE, HeapInformationClass: HEAP_INFORMATION_CLASS, HeapInformation: PVOID, HeapInformationLength: SIZE_T, ReturnLength: PSIZE_T } ],
  GetBinaryTypeA: [ int, { lpApplicationName: LPCSTR, lpBinaryType: LPDWORD } ],
  GetBinaryTypeW: [ int, { lpApplicationName: LPCWSTR, lpBinaryType: LPDWORD } ],
  GetShortPathNameA: [ ulong, { lpszLongPath: LPCSTR, lpszShortPath: LPSTR, cchBuffer: DWORD } ],
  GetShortPathNameW: [ ulong, { lpszLongPath: LPCWSTR, lpszShortPath: LPWSTR, cchBuffer: DWORD } ],
  GetLongPathNameA: [ ulong, { lpszShortPath: LPCSTR, lpszLongPath: LPSTR, cchBuffer: DWORD } ],
  GetLongPathNameW: [ ulong, { lpszShortPath: LPCWSTR, lpszLongPath: LPWSTR, cchBuffer: DWORD } ],
  GetLongPathNameTransactedA: [ ulong, { lpszShortPath: LPCSTR, lpszLongPath: LPSTR, cchBuffer: DWORD, hTransaction: HANDLE } ],
  GetLongPathNameTransactedW: [ ulong, { lpszShortPath: LPCWSTR, lpszLongPath: LPWSTR, cchBuffer: DWORD, hTransaction: HANDLE } ],
  GetProcessAffinityMask: [ int, { hProcess: HANDLE, lpProcessAffinityMask: PDWORD_PTR, lpSystemAffinityMask: PDWORD_PTR } ],
  SetProcessAffinityMask: [ int, { hProcess: HANDLE, dwProcessAffinityMask: DWORD_PTR } ],
  GetProcessGroupAffinity: [ int, { hProcess: HANDLE, GroupCount: PUSHORT, GroupArray: PUSHORT } ],
  GetProcessHandleCount: [ int, { hProcess: HANDLE, pdwHandleCount: PDWORD } ],
  GetProcessTimes: [ int, { hProcess: HANDLE, lpCreationTime: LPFILETIME, lpExitTime: LPFILETIME, lpKernelTime: LPFILETIME, lpUserTime: LPFILETIME } ],
  GetProcessIoCounters: [ int, { hProcess: HANDLE, lpIoCounters: PIO_COUNTERS } ],
  GetProcessWorkingSetSize: [ int, { hProcess: HANDLE, lpMinimumWorkingSetSize: PSIZE_T, lpMaximumWorkingSetSize: PSIZE_T } ],
  GetProcessWorkingSetSizeEx: [ int, { hProcess: HANDLE, lpMinimumWorkingSetSize: PSIZE_T, lpMaximumWorkingSetSize: PSIZE_T, Flags: PDWORD } ],
  SetProcessWorkingSetSize: [ int, { hProcess: HANDLE, dwMinimumWorkingSetSize: SIZE_T, dwMaximumWorkingSetSize: SIZE_T } ],
  SetProcessWorkingSetSizeEx: [ int, { hProcess: HANDLE, dwMinimumWorkingSetSize: SIZE_T, dwMaximumWorkingSetSize: SIZE_T, Flags: DWORD } ],
  SetProcessAffinityUpdateMode: [ int, { hProcess: HANDLE, dwFlags: DWORD } ],
  QueryProcessAffinityUpdateMode: [ int, { hProcess: HANDLE, lpdwFlags: LPDWORD } ],
  OpenProcess: [ VoidT.Δ, { dwDesiredAccess: DWORD, bInheritHandle: BOOL, dwProcessId: DWORD } ],
  GetCurrentProcess: [ VoidT.Δ, {  } ],
  GetCurrentProcessId: [ ulong, {  } ],
  ExitProcess: [ VoidT, { uExitCode: UINT } ],
  TerminateProcess: [ int, { hProcess: HANDLE, uExitCode: UINT } ],
  GetExitCodeProcess: [ int, { hProcess: HANDLE, lpExitCode: LPDWORD } ],
  FatalExit: [ VoidT, { ExitCode: int } ],
  GetEnvironmentStrings: [ int8.Δ, {  } ],
  GetEnvironmentStringsW: [ ushort.Δ, {  } ],
  SetEnvironmentStringsA: [ int, { NewEnvironment: LPCH } ],
  SetEnvironmentStringsW: [ int, { NewEnvironment: LPWCH } ],
  FreeEnvironmentStringsA: [ int, { LPCH: LPCH } ],
  FreeEnvironmentStringsW: [ int, { LPWCH: LPWCH } ],
  RaiseException: [ VoidT, { dwExceptionCode: DWORD, dwExceptionFlags: DWORD, nNumberOfArguments: DWORD, lpArguments: ulong.Δ } ],
  RaiseFailFastException: [ VoidT, { pExceptionRecord: PEXCEPTION_RECORD, pContextRecord: PCONTEXT, dwFlags: DWORD } ],
  UnhandledExceptionFilter: [ long, { ExceptionInfo: UNEXPOSED.Δ } ],
  SetUnhandledExceptionFilter: [ LPTOP_LEVEL_EXCEPTION_FILTER, { lpTopLevelExceptionFilter: LPTOP_LEVEL_EXCEPTION_FILTER } ],
  CreateFiber: [ VoidT.Δ, { dwStackSize: SIZE_T, lpStartAddress: LPFIBER_START_ROUTINE, lpParameter: LPVOID } ],
  CreateFiberEx: [ VoidT.Δ, { dwStackCommitSize: SIZE_T, dwStackReserveSize: SIZE_T, dwFlags: DWORD, lpStartAddress: LPFIBER_START_ROUTINE, lpParameter: LPVOID } ],
  DeleteFiber: [ VoidT, { lpFiber: LPVOID } ],
  ConvertThreadToFiber: [ VoidT.Δ, { lpParameter: LPVOID } ],
  ConvertThreadToFiberEx: [ VoidT.Δ, { lpParameter: LPVOID, dwFlags: DWORD } ],
  ConvertFiberToThread: [ int, {  } ],
  IsThreadAFiber: [ int, {  } ],
  SwitchToFiber: [ VoidT, { lpFiber: LPVOID } ],
  SwitchToThread: [ int, {  } ],
  CreateUmsCompletionList: [ int, { UmsCompletionList: VoidT.Δ.Δ } ],
  DequeueUmsCompletionListItems: [ int, { UmsCompletionList: PUMS_COMPLETION_LIST, WaitTimeOut: DWORD, UmsThreadList: VoidT.Δ.Δ } ],
  GetUmsCompletionListEvent: [ int, { UmsCompletionList: PUMS_COMPLETION_LIST, UmsCompletionEvent: PHANDLE } ],
  ExecuteUmsThread: [ int, { UmsThread: PUMS_CONTEXT } ],
  UmsThreadYield: [ int, { SchedulerParam: PVOID } ],
  DeleteUmsCompletionList: [ int, { UmsCompletionList: PUMS_COMPLETION_LIST } ],
  GetCurrentUmsThread: [ VoidT.Δ, {  } ],
  GetNextUmsListItem: [ VoidT.Δ, { UmsContext: PUMS_CONTEXT } ],
  QueryUmsThreadInformation: [ int, { UmsThread: PUMS_CONTEXT, UmsThreadInfoClass: UMS_THREAD_INFO_CLASS, UmsThreadInformation: PVOID, UmsThreadInformationLength: ULONG, ReturnLength: PULONG } ],
  SetUmsThreadInformation: [ int, { UmsThread: PUMS_CONTEXT, UmsThreadInfoClass: UMS_THREAD_INFO_CLASS, UmsThreadInformation: PVOID, UmsThreadInformationLength: ULONG } ],
  DeleteUmsThreadContext: [ int, { UmsThread: PUMS_CONTEXT } ],
  CreateUmsThreadContext: [ int, { lpUmsThread: VoidT.Δ.Δ } ],
  EnterUmsSchedulingMode: [ int, { SchedulerStartupInfo: PUMS_SCHEDULER_STARTUP_INFO } ],
  CreateThread: [ VoidT.Δ, { lpThreadAttributes: LPSECURITY_ATTRIBUTES, dwStackSize: SIZE_T, lpStartAddress: LPTHREAD_START_ROUTINE, lpParameter: LPVOID, dwCreationFlags: DWORD, lpThreadId: LPDWORD } ],
  CreateRemoteThread: [ VoidT.Δ, { hProcess: HANDLE, lpThreadAttributes: LPSECURITY_ATTRIBUTES, dwStackSize: SIZE_T, lpStartAddress: LPTHREAD_START_ROUTINE, lpParameter: LPVOID, dwCreationFlags: DWORD, lpThreadId: LPDWORD } ],
  CreateRemoteThreadEx: [ VoidT.Δ, { hProcess: HANDLE, lpThreadAttributes: LPSECURITY_ATTRIBUTES, dwStackSize: SIZE_T, lpStartAddress: LPTHREAD_START_ROUTINE, lpParameter: LPVOID, dwCreationFlags: DWORD, lpAttributeList: LPPROC_THREAD_ATTRIBUTE_LIST, lpThreadId: LPDWORD } ],
  GetCurrentThread: [ VoidT.Δ, {  } ],
  GetCurrentThreadId: [ ulong, {  } ],
  SetThreadStackGuarantee: [ int, { StackSizeInBytes: PULONG } ],
  GetProcessIdOfThread: [ ulong, { Thread: HANDLE } ],
  GetThreadId: [ ulong, { Thread: HANDLE } ],
  GetProcessId: [ ulong, { Process: HANDLE } ],
  GetCurrentProcessorNumber: [ ulong, {  } ],
  GetCurrentProcessorNumberEx: [ VoidT, { ProcNumber: PPROCESSOR_NUMBER } ],
  GetThreadGroupAffinity: [ int, { hThread: HANDLE, GroupAffinity: PGROUP_AFFINITY } ],
  SetThreadAffinityMask: [ ulong, { hThread: HANDLE, dwThreadAffinityMask: DWORD_PTR } ],
  SetThreadGroupAffinity: [ int, { hThread: HANDLE, GroupAffinity: uint.Δ, PreviousGroupAffinity: PGROUP_AFFINITY } ],
  SetThreadIdealProcessorEx: [ int, { hThread: HANDLE, lpIdealProcessor: PPROCESSOR_NUMBER, lpPreviousIdealProcessor: PPROCESSOR_NUMBER } ],
  GetThreadIdealProcessorEx: [ int, { hThread: HANDLE, lpIdealProcessor: PPROCESSOR_NUMBER } ],
  SetThreadIdealProcessor: [ ulong, { hThread: HANDLE, dwIdealProcessor: DWORD } ],
  SetProcessDEPPolicy: [ int, { dwFlags: DWORD } ],
  GetProcessDEPPolicy: [ int, { hProcess: HANDLE, lpFlags: LPDWORD, lpPermanent: PBOOL } ],
  SetProcessPriorityBoost: [ int, { hProcess: HANDLE, bDisablePriorityBoost: BOOL } ],
  GetProcessPriorityBoost: [ int, { hProcess: HANDLE, pDisablePriorityBoost: PBOOL } ],
  RequestWakeupLatency: [ int, { latency: LATENCY_TIME } ],
  IsSystemResumeAutomatic: [ int, {  } ],
  OpenThread: [ VoidT.Δ, { dwDesiredAccess: DWORD, bInheritHandle: BOOL, dwThreadId: DWORD } ],
  SetThreadPriority: [ int, { hThread: HANDLE, nPriority: int } ],
  SetThreadPriorityBoost: [ int, { hThread: HANDLE, bDisablePriorityBoost: BOOL } ],
  GetThreadPriorityBoost: [ int, { hThread: HANDLE, pDisablePriorityBoost: PBOOL } ],
  GetThreadPriority: [ VoidT, { hThread: HANDLE } ],
  GetThreadTimes: [ int, { hThread: HANDLE, lpCreationTime: LPFILETIME, lpExitTime: LPFILETIME, lpKernelTime: LPFILETIME, lpUserTime: LPFILETIME } ],
  GetThreadIOPendingFlag: [ int, { hThread: HANDLE, lpIOIsPending: PBOOL } ],
  ExitThread: [ VoidT, { dwExitCode: DWORD } ],
  TerminateThread: [ int, { hThread: HANDLE, dwExitCode: DWORD } ],
  GetExitCodeThread: [ int, { hThread: HANDLE, lpExitCode: LPDWORD } ],
  GetThreadSelectorEntry: [ int, { hThread: HANDLE, dwSelector: DWORD, lpSelectorEntry: LPLDT_ENTRY } ],
  SetThreadExecutionState: [ ulong, { esFlags: EXECUTION_STATE } ],
  PowerCreateRequest: [ VoidT.Δ, { Context: PREASON_CONTEXT } ],
  PowerSetRequest: [ int, { PowerRequest: HANDLE, RequestType: POWER_REQUEST_TYPE } ],
  PowerClearRequest: [ int, { PowerRequest: HANDLE, RequestType: POWER_REQUEST_TYPE } ],
  GetLastError: [ ulong, {  } ],
  SetLastError: [ VoidT, { dwErrCode: DWORD } ],
  GetOverlappedResult: [ int, { hFile: HANDLE, lpOverlapped: LPOVERLAPPED, lpNumberOfBytesTransferred: LPDWORD, bWait: BOOL } ],
  CreateIoCompletionPort: [ VoidT.Δ, { FileHandle: HANDLE, ExistingCompletionPort: HANDLE, CompletionKey: ULONG_PTR, NumberOfConcurrentThreads: DWORD } ],
  GetQueuedCompletionStatus: [ int, { CompletionPort: HANDLE, lpNumberOfBytesTransferred: LPDWORD, lpCompletionKey: PULONG_PTR, lpOverlapped: VOIDPTR.Δ, dwMilliseconds: DWORD } ],
  GetQueuedCompletionStatusEx: [ int, { CompletionPort: HANDLE, lpCompletionPortEntries: LPOVERLAPPED_ENTRY, ulCount: ULONG, ulNumEntriesRemoved: PULONG, dwMilliseconds: DWORD, fAlertable: BOOL } ],
  PostQueuedCompletionStatus: [ int, { CompletionPort: HANDLE, dwNumberOfBytesTransferred: DWORD, dwCompletionKey: ULONG_PTR, lpOverlapped: LPOVERLAPPED } ],
  SetFileCompletionNotificationModes: [ int, { FileHandle: HANDLE, Flags: UCHAR } ],
  SetFileIoOverlappedRange: [ int, { FileHandle: HANDLE, OverlappedRangeStart: PUCHAR, Length: ULONG } ],
  GetErrorMode: [ uint, {  } ],
  SetErrorMode: [ uint, { uMode: UINT } ],
  GetThreadErrorMode: [ ulong, {  } ],
  SetThreadErrorMode: [ int, { dwNewMode: DWORD, lpOldMode: LPDWORD } ],
  ReadProcessMemory: [ int, { hProcess: HANDLE, lpBaseAddress: LPCVOID, lpBuffer: LPVOID, nSize: SIZE_T, lpNumberOfBytesRead: ulong.Δ } ],
  WriteProcessMemory: [ int, { hProcess: HANDLE, lpBaseAddress: LPVOID, lpBuffer: LPCVOID, nSize: SIZE_T, lpNumberOfBytesWritten: ulong.Δ } ],
  GetThreadContext: [ int, { hThread: HANDLE, lpContext: LPCONTEXT } ],
  SetThreadContext: [ int, { hThread: HANDLE, lpContext: uint.Δ } ],
  Wow64GetThreadContext: [ int, { hThread: HANDLE, lpContext: PWOW64_CONTEXT } ],
  Wow64GetThreadSelectorEntry: [ int, { hThread: HANDLE, dwSelector: DWORD, lpSelectorEntry: PWOW64_LDT_ENTRY } ],
  Wow64SetThreadContext: [ int, { hThread: HANDLE, lpContext: uint.Δ } ],
  SuspendThread: [ ulong, { hThread: HANDLE } ],
  Wow64SuspendThread: [ ulong, { hThread: HANDLE } ],
  ResumeThread: [ ulong, { hThread: HANDLE } ],
  QueueUserAPC: [ ulong, { pfnAPC: PAPCFUNC, hThread: HANDLE, dwData: ULONG_PTR } ],
  IsDebuggerPresent: [ int, {  } ],
  CheckRemoteDebuggerPresent: [ int, { hProcess: HANDLE, pbDebuggerPresent: PBOOL } ],
  DebugBreak: [ VoidT, {  } ],
  WaitForDebugEvent: [ int, { lpDebugEvent: LPDEBUG_EVENT, dwMilliseconds: DWORD } ],
  ContinueDebugEvent: [ int, { dwProcessId: DWORD, dwThreadId: DWORD, dwContinueStatus: DWORD } ],
  DebugActiveProcess: [ int, { dwProcessId: DWORD } ],
  DebugActiveProcessStop: [ int, { dwProcessId: DWORD } ],
  DebugSetProcessKillOnExit: [ int, { KillOnExit: BOOL } ],
  DebugBreakProcess: [ int, { Process: HANDLE } ],
  InitializeCriticalSection: [ VoidT, { lpCriticalSection: LPCRITICAL_SECTION } ],
  EnterCriticalSection: [ VoidT, { lpCriticalSection: LPCRITICAL_SECTION } ],
  LeaveCriticalSection: [ VoidT, { lpCriticalSection: LPCRITICAL_SECTION } ],
  InitializeCriticalSectionAndSpinCount: [ int, { lpCriticalSection: LPCRITICAL_SECTION, dwSpinCount: DWORD } ],
  InitializeCriticalSectionEx: [ int, { lpCriticalSection: LPCRITICAL_SECTION, dwSpinCount: DWORD, Flags: DWORD } ],
  SetCriticalSectionSpinCount: [ ulong, { lpCriticalSection: LPCRITICAL_SECTION, dwSpinCount: DWORD } ],
  TryEnterCriticalSection: [ int, { lpCriticalSection: LPCRITICAL_SECTION } ],
  DeleteCriticalSection: [ VoidT, { lpCriticalSection: LPCRITICAL_SECTION } ],
  SetEvent: [ int, { hEvent: HANDLE } ],
  ResetEvent: [ int, { hEvent: HANDLE } ],
  PulseEvent: [ int, { hEvent: HANDLE } ],
  ReleaseSemaphore: [ int, { hSemaphore: HANDLE, lReleaseCount: LONG, lpPreviousCount: LPLONG } ],
  ReleaseMutex: [ int, { hMutex: HANDLE } ],
  WaitForSingleObject: [ ulong, { hHandle: HANDLE, dwMilliseconds: DWORD } ],
  WaitForMultipleObjects: [ ulong, { nCount: DWORD, lpHandles: VoidT.Δ.Δ, bWaitAll: BOOL, dwMilliseconds: DWORD } ],
  Sleep: [ VoidT, { dwMilliseconds: DWORD } ],
  LoadResource: [ VoidT.Δ, { hModule: HMODULE, hResInfo: HRSRC } ],
  SizeofResource: [ ulong, { hModule: HMODULE, hResInfo: HRSRC } ],
  GlobalDeleteAtom: [ ushort, { nAtom: ATOM } ],
  InitAtomTable: [ int, { nSize: DWORD } ],
  DeleteAtom: [ ushort, { nAtom: ATOM } ],
  SetHandleCount: [ uint, { uNumber: UINT } ],
  GetLogicalDrives: [ ulong, {  } ],
  LockFile: [ int, { hFile: HANDLE, dwFileOffsetLow: DWORD, dwFileOffsetHigh: DWORD, nNumberOfBytesToLockLow: DWORD, nNumberOfBytesToLockHigh: DWORD } ],
  UnlockFile: [ int, { hFile: HANDLE, dwFileOffsetLow: DWORD, dwFileOffsetHigh: DWORD, nNumberOfBytesToUnlockLow: DWORD, nNumberOfBytesToUnlockHigh: DWORD } ],
  LockFileEx: [ int, { hFile: HANDLE, dwFlags: DWORD, dwReserved: DWORD, nNumberOfBytesToLockLow: DWORD, nNumberOfBytesToLockHigh: DWORD, lpOverlapped: LPOVERLAPPED } ],
  UnlockFileEx: [ int, { hFile: HANDLE, dwReserved: DWORD, nNumberOfBytesToUnlockLow: DWORD, nNumberOfBytesToUnlockHigh: DWORD, lpOverlapped: LPOVERLAPPED } ],
  GetFileInformationByHandle: [ int, { hFile: HANDLE, lpFileInformation: LPBY_HANDLE_FILE_INFORMATION } ],
  GetFileType: [ ulong, { hFile: HANDLE } ],
  GetFileSize: [ ulong, { hFile: HANDLE, lpFileSizeHigh: LPDWORD } ],
  GetFileSizeEx: [ int, { hFile: HANDLE, lpFileSize: PLARGE_INTEGER } ],
  GetStdHandle: [ VoidT.Δ, { nStdHandle: DWORD } ],
  SetStdHandle: [ int, { nStdHandle: DWORD, hHandle: HANDLE } ],
  SetStdHandleEx: [ int, { nStdHandle: DWORD, hHandle: HANDLE, phPrevValue: PHANDLE } ],
  WriteFile: [ int, { hFile: HANDLE, lpBuffer: LPCVOID, nNumberOfBytesToWrite: DWORD, lpNumberOfBytesWritten: LPDWORD, lpOverlapped: LPOVERLAPPED } ],
  ReadFile: [ int, { hFile: HANDLE, lpBuffer: LPVOID, nNumberOfBytesToRead: DWORD, lpNumberOfBytesRead: LPDWORD, lpOverlapped: LPOVERLAPPED } ],
  FlushFileBuffers: [ int, { hFile: HANDLE } ],
  DeviceIoControl: [ int, { hDevice: HANDLE, dwIoControlCode: DWORD, lpInBuffer: LPVOID, nInBufferSize: DWORD, lpOutBuffer: LPVOID, nOutBufferSize: DWORD, lpBytesReturned: LPDWORD, lpOverlapped: LPOVERLAPPED } ],
  RequestDeviceWakeup: [ int, { hDevice: HANDLE } ],
  CancelDeviceWakeupRequest: [ int, { hDevice: HANDLE } ],
  GetDevicePowerState: [ int, { hDevice: HANDLE, pfOn: int.Δ } ],
  SetMessageWaitingIndicator: [ int, { hMsgIndicator: HANDLE, ulMsgCount: ULONG } ],
  SetEndOfFile: [ int, { hFile: HANDLE } ],
  SetFilePointer: [ ulong, { hFile: HANDLE, lDistanceToMove: LONG, lpDistanceToMoveHigh: PLONG, dwMoveMethod: DWORD } ],
  SetFilePointerEx: [ int, { hFile: HANDLE, liDistanceToMove: LARGE_INTEGER, lpNewFilePointer: PLARGE_INTEGER, dwMoveMethod: DWORD } ],
  FindClose: [ int, { hFindFile: HANDLE } ],
  GetFileTime: [ int, { hFile: HANDLE, lpCreationTime: LPFILETIME, lpLastAccessTime: LPFILETIME, lpLastWriteTime: LPFILETIME } ],
  SetFileTime: [ int, { hFile: HANDLE, lpCreationTime: uint.Δ, lpLastAccessTime: uint.Δ, lpLastWriteTime: uint.Δ } ],
  SetFileValidData: [ int, { hFile: HANDLE, ValidDataLength: LONGLONG } ],
  SetFileShortNameA: [ int, { hFile: HANDLE, lpShortName: LPCSTR } ],
  SetFileShortNameW: [ int, { hFile: HANDLE, lpShortName: LPCWSTR } ],
  CloseHandle: [ int, { hObject: HANDLE } ],
  DuplicateHandle: [ int, { hSourceProcessHandle: HANDLE, hSourceHandle: HANDLE, hTargetProcessHandle: HANDLE, lpTargetHandle: LPHANDLE, dwDesiredAccess: DWORD, bInheritHandle: BOOL, dwOptions: DWORD } ],
  GetHandleInformation: [ int, { hObject: HANDLE, lpdwFlags: LPDWORD } ],
  SetHandleInformation: [ int, { hObject: HANDLE, dwMask: DWORD, dwFlags: DWORD } ],
  LoadModule: [ ulong, { lpModuleName: LPCSTR, lpParameterBlock: LPVOID } ],
  WinExec: [ uint, { lpCmdLine: LPCSTR, uCmdShow: UINT } ],
  ClearCommBreak: [ int, { hFile: HANDLE } ],
  ClearCommError: [ int, { hFile: HANDLE, lpErrors: LPDWORD, lpStat: LPCOMSTAT } ],
  SetupComm: [ int, { hFile: HANDLE, dwInQueue: DWORD, dwOutQueue: DWORD } ],
  EscapeCommFunction: [ int, { hFile: HANDLE, dwFunc: DWORD } ],
  GetCommConfig: [ int, { hCommDev: HANDLE, lpCC: LPCOMMCONFIG, lpdwSize: LPDWORD } ],
  GetCommMask: [ int, { hFile: HANDLE, lpEvtMask: LPDWORD } ],
  GetCommProperties: [ int, { hFile: HANDLE, lpCommProp: LPCOMMPROP } ],
  GetCommModemStatus: [ int, { hFile: HANDLE, lpModemStat: LPDWORD } ],
  GetCommState: [ int, { hFile: HANDLE, lpDCB: LPDCB } ],
  GetCommTimeouts: [ int, { hFile: HANDLE, lpCommTimeouts: LPCOMMTIMEOUTS } ],
  PurgeComm: [ int, { hFile: HANDLE, dwFlags: DWORD } ],
  SetCommBreak: [ int, { hFile: HANDLE } ],
  SetCommConfig: [ int, { hCommDev: HANDLE, lpCC: LPCOMMCONFIG, dwSize: DWORD } ],
  SetCommMask: [ int, { hFile: HANDLE, dwEvtMask: DWORD } ],
  SetCommState: [ int, { hFile: HANDLE, lpDCB: LPDCB } ],
  SetCommTimeouts: [ int, { hFile: HANDLE, lpCommTimeouts: LPCOMMTIMEOUTS } ],
  TransmitCommChar: [ int, { hFile: HANDLE, cChar: int8 } ],
  WaitCommEvent: [ int, { hFile: HANDLE, lpEvtMask: LPDWORD, lpOverlapped: LPOVERLAPPED } ],
  SetTapePosition: [ ulong, { hDevice: HANDLE, dwPositionMethod: DWORD, dwPartition: DWORD, dwOffsetLow: DWORD, dwOffsetHigh: DWORD, bImmediate: BOOL } ],
  GetTapePosition: [ ulong, { hDevice: HANDLE, dwPositionType: DWORD, lpdwPartition: LPDWORD, lpdwOffsetLow: LPDWORD, lpdwOffsetHigh: LPDWORD } ],
  PrepareTape: [ ulong, { hDevice: HANDLE, dwOperation: DWORD, bImmediate: BOOL } ],
  EraseTape: [ ulong, { hDevice: HANDLE, dwEraseType: DWORD, bImmediate: BOOL } ],
  CreateTapePartition: [ ulong, { hDevice: HANDLE, dwPartitionMethod: DWORD, dwCount: DWORD, dwSize: DWORD } ],
  WriteTapemark: [ ulong, { hDevice: HANDLE, dwTapemarkType: DWORD, dwTapemarkCount: DWORD, bImmediate: BOOL } ],
  GetTapeStatus: [ ulong, { hDevice: HANDLE } ],
  GetTapeParameters: [ ulong, { hDevice: HANDLE, dwOperation: DWORD, lpdwSize: LPDWORD, lpTapeInformation: LPVOID } ],
  SetTapeParameters: [ ulong, { hDevice: HANDLE, dwOperation: DWORD, lpTapeInformation: LPVOID } ],
  Beep: [ int, { dwFreq: DWORD, dwDuration: DWORD } ],
  MulDiv: [ VoidT, { nNumber: int, nNumerator: int, nDenominator: int } ],
  GetSystemTime: [ VoidT, { lpSystemTime: LPSYSTEMTIME } ],
  GetSystemTimeAsFileTime: [ VoidT, { lpSystemTimeAsFileTime: LPFILETIME } ],
  SetSystemTime: [ int, { lpSystemTime: uint.Δ } ],
  GetLocalTime: [ VoidT, { lpSystemTime: LPSYSTEMTIME } ],
  SetLocalTime: [ int, { lpSystemTime: uint.Δ } ],
  GetSystemInfo: [ VoidT, { lpSystemInfo: LPSYSTEM_INFO } ],
  GetSystemDEPPolicy: [ uint, {  } ],
  SetSystemFileCacheSize: [ int, { MinimumFileCacheSize: SIZE_T, MaximumFileCacheSize: SIZE_T, Flags: DWORD } ],
  GetSystemFileCacheSize: [ int, { lpMinimumFileCacheSize: PSIZE_T, lpMaximumFileCacheSize: PSIZE_T, lpFlags: PDWORD } ],
  GetSystemRegistryQuota: [ int, { pdwQuotaAllowed: PDWORD, pdwQuotaUsed: PDWORD } ],
  GetSystemTimes: [ int, { lpIdleTime: LPFILETIME, lpKernelTime: LPFILETIME, lpUserTime: LPFILETIME } ],
  GetNativeSystemInfo: [ VoidT, { lpSystemInfo: LPSYSTEM_INFO } ],
  IsProcessorFeaturePresent: [ int, { ProcessorFeature: DWORD } ],
  SystemTimeToTzSpecificLocalTime: [ int, { lpTimeZoneInformation: uint.Δ, lpUniversalTime: uint.Δ, lpLocalTime: LPSYSTEMTIME } ],
  TzSpecificLocalTimeToSystemTime: [ int, { lpTimeZoneInformation: uint.Δ, lpLocalTime: uint.Δ, lpUniversalTime: LPSYSTEMTIME } ],
  GetTimeZoneInformationForYear: [ int, { wYear: USHORT, pdtzi: PDYNAMIC_TIME_ZONE_INFORMATION, ptzi: LPTIME_ZONE_INFORMATION } ],
  GetTimeZoneInformation: [ ulong, { lpTimeZoneInformation: LPTIME_ZONE_INFORMATION } ],
  SetTimeZoneInformation: [ int, { lpTimeZoneInformation: uint.Δ } ],
  GetDynamicTimeZoneInformation: [ ulong, { pTimeZoneInformation: PDYNAMIC_TIME_ZONE_INFORMATION } ],
  SetDynamicTimeZoneInformation: [ int, { lpTimeZoneInformation: uint.Δ } ],
  SystemTimeToFileTime: [ int, { lpSystemTime: uint.Δ, lpFileTime: LPFILETIME } ],
  FileTimeToLocalFileTime: [ int, { lpFileTime: uint.Δ, lpLocalFileTime: LPFILETIME } ],
  LocalFileTimeToFileTime: [ int, { lpLocalFileTime: uint.Δ, lpFileTime: LPFILETIME } ],
  FileTimeToSystemTime: [ int, { lpFileTime: uint.Δ, lpSystemTime: LPSYSTEMTIME } ],
  CompareFileTime: [ long, { lpFileTime1: uint.Δ, lpFileTime2: uint.Δ } ],
  FileTimeToDosDateTime: [ int, { lpFileTime: uint.Δ, lpFatDate: LPWORD, lpFatTime: LPWORD } ],
  DosDateTimeToFileTime: [ int, { wFatDate: WORD, wFatTime: WORD, lpFileTime: LPFILETIME } ],
  GetTickCount: [ ulong, {  } ],
  GetTickCount64: [ ulonglong, {  } ],
  SetSystemTimeAdjustment: [ int, { dwTimeAdjustment: DWORD, bTimeAdjustmentDisabled: BOOL } ],
  GetSystemTimeAdjustment: [ int, { lpTimeAdjustment: PDWORD, lpTimeIncrement: PDWORD, lpTimeAdjustmentDisabled: PBOOL } ],
  FormatMessageA: [ ulong, { dwFlags: DWORD, lpSource: LPCVOID, dwMessageId: DWORD, dwLanguageId: DWORD, lpBuffer: LPSTR, nSize: DWORD, Arguments: int8.Δ.Δ } ],
  FormatMessageW: [ ulong, { dwFlags: DWORD, lpSource: LPCVOID, dwMessageId: DWORD, dwLanguageId: DWORD, lpBuffer: LPWSTR, nSize: DWORD, Arguments: int8.Δ.Δ } ],
  CreatePipe: [ int, { hReadPipe: PHANDLE, hWritePipe: PHANDLE, lpPipeAttributes: LPSECURITY_ATTRIBUTES, nSize: DWORD } ],
  ConnectNamedPipe: [ int, { hNamedPipe: HANDLE, lpOverlapped: LPOVERLAPPED } ],
  DisconnectNamedPipe: [ int, { hNamedPipe: HANDLE } ],
  SetNamedPipeHandleState: [ int, { hNamedPipe: HANDLE, lpMode: LPDWORD, lpMaxCollectionCount: LPDWORD, lpCollectDataTimeout: LPDWORD } ],
  GetNamedPipeInfo: [ int, { hNamedPipe: HANDLE, lpFlags: LPDWORD, lpOutBufferSize: LPDWORD, lpInBufferSize: LPDWORD, lpMaxInstances: LPDWORD } ],
  PeekNamedPipe: [ int, { hNamedPipe: HANDLE, lpBuffer: LPVOID, nBufferSize: DWORD, lpBytesRead: LPDWORD, lpTotalBytesAvail: LPDWORD, lpBytesLeftThisMessage: LPDWORD } ],
  TransactNamedPipe: [ int, { hNamedPipe: HANDLE, lpInBuffer: LPVOID, nInBufferSize: DWORD, lpOutBuffer: LPVOID, nOutBufferSize: DWORD, lpBytesRead: LPDWORD, lpOverlapped: LPOVERLAPPED } ],
  CreateMailslotA: [ VoidT.Δ, { lpName: LPCSTR, nMaxMessageSize: DWORD, lReadTimeout: DWORD, lpSecurityAttributes: LPSECURITY_ATTRIBUTES } ],
  CreateMailslotW: [ VoidT.Δ, { lpName: LPCWSTR, nMaxMessageSize: DWORD, lReadTimeout: DWORD, lpSecurityAttributes: LPSECURITY_ATTRIBUTES } ],
  GetMailslotInfo: [ int, { hMailslot: HANDLE, lpMaxMessageSize: LPDWORD, lpNextSize: LPDWORD, lpMessageCount: LPDWORD, lpReadTimeout: LPDWORD } ],
  SetMailslotInfo: [ int, { hMailslot: HANDLE, lReadTimeout: DWORD } ],
  MapViewOfFile: [ VoidT.Δ, { hFileMappingObject: HANDLE, dwDesiredAccess: DWORD, dwFileOffsetHigh: DWORD, dwFileOffsetLow: DWORD, dwNumberOfBytesToMap: SIZE_T } ],
  FlushViewOfFile: [ int, { lpBaseAddress: LPCVOID, dwNumberOfBytesToFlush: SIZE_T } ],
  UnmapViewOfFile: [ int, { lpBaseAddress: LPCVOID } ],
  EncryptFileA: [ int, { lpFileName: LPCSTR } ],
  EncryptFileW: [ int, { lpFileName: LPCWSTR } ],
  DecryptFileA: [ int, { lpFileName: LPCSTR, dwReserved: DWORD } ],
  DecryptFileW: [ int, { lpFileName: LPCWSTR, dwReserved: DWORD } ],
  FileEncryptionStatusA: [ int, { lpFileName: LPCSTR, lpStatus: LPDWORD } ],
  FileEncryptionStatusW: [ int, { lpFileName: LPCWSTR, lpStatus: LPDWORD } ],
  OpenEncryptedFileRawA: [ ulong, { lpFileName: LPCSTR, ulFlags: ULONG, pvContext: VoidT.Δ.Δ } ],
  OpenEncryptedFileRawW: [ ulong, { lpFileName: LPCWSTR, ulFlags: ULONG, pvContext: VoidT.Δ.Δ } ],
  ReadEncryptedFileRaw: [ ulong, { pfExportCallback: PFE_EXPORT_FUNC, pvCallbackContext: PVOID, pvContext: PVOID } ],
  WriteEncryptedFileRaw: [ ulong, { pfImportCallback: PFE_IMPORT_FUNC, pvCallbackContext: PVOID, pvContext: PVOID } ],
  CloseEncryptedFileRaw: [ VoidT, { pvContext: PVOID } ],
  lstrcmpA: [ VoidT, { lpString1: LPCSTR, lpString2: LPCSTR } ],
  lstrcmpW: [ VoidT, { lpString1: LPCWSTR, lpString2: LPCWSTR } ],
  lstrcmpiA: [ VoidT, { lpString1: LPCSTR, lpString2: LPCSTR } ],
  lstrcmpiW: [ VoidT, { lpString1: LPCWSTR, lpString2: LPCWSTR } ],
  lstrcpynA: [ int8.Δ, { lpString1: LPSTR, lpString2: LPCSTR, iMaxLength: int } ],
  lstrcpynW: [ ushort.Δ, { lpString1: LPWSTR, lpString2: LPCWSTR, iMaxLength: int } ],
  lstrcpyA: [ int8.Δ, { lpString1: LPSTR, lpString2: LPCSTR } ],
  lstrcpyW: [ ushort.Δ, { lpString1: LPWSTR, lpString2: LPCWSTR } ],
  lstrcatA: [ int8.Δ, { lpString1: LPSTR, lpString2: LPCSTR } ],
  lstrcatW: [ ushort.Δ, { lpString1: LPWSTR, lpString2: LPCWSTR } ],
  lstrlenA: [ VoidT, { lpString: LPCSTR } ],
  lstrlenW: [ VoidT, { lpString: LPCWSTR } ],
  OpenFile: [ int, { lpFileName: LPCSTR, lpReOpenBuff: LPOFSTRUCT, uStyle: UINT } ],
  _lopen: [ int, { lpPathName: LPCSTR, iReadWrite: int } ],
  _lcreat: [ int, { lpPathName: LPCSTR, iAttribute: int } ],
  _lread: [ uint, { hFile: HFILE, lpBuffer: LPVOID, uBytes: UINT } ],
  _lwrite: [ uint, { hFile: HFILE, lpBuffer: LPCCH, uBytes: UINT } ],
  _hread: [ VoidT, { hFile: HFILE, lpBuffer: LPVOID, lBytes: long } ],
  _hwrite: [ VoidT, { hFile: HFILE, lpBuffer: LPCCH, lBytes: long } ],
  _lclose: [ int, { hFile: HFILE } ],
  _llseek: [ long, { hFile: HFILE, lOffset: LONG, iOrigin: int } ],
  IsTextUnicode: [ int, { lpv: VoidT.Δ, iSize: int, lpiResult: LPINT } ],
  FlsAlloc: [ ulong, { lpCallback: PFLS_CALLBACK_FUNCTION } ],
  FlsGetValue: [ VoidT.Δ, { dwFlsIndex: DWORD } ],
  FlsSetValue: [ int, { dwFlsIndex: DWORD, lpFlsData: PVOID } ],
  FlsFree: [ int, { dwFlsIndex: DWORD } ],
  TlsAlloc: [ ulong, {  } ],
  TlsGetValue: [ VoidT.Δ, { dwTlsIndex: DWORD } ],
  TlsSetValue: [ int, { dwTlsIndex: DWORD, lpTlsValue: LPVOID } ],
  TlsFree: [ int, { dwTlsIndex: DWORD } ],
  SleepEx: [ ulong, { dwMilliseconds: DWORD, bAlertable: BOOL } ],
  WaitForSingleObjectEx: [ ulong, { hHandle: HANDLE, dwMilliseconds: DWORD, bAlertable: BOOL } ],
  WaitForMultipleObjectsEx: [ ulong, { nCount: DWORD, lpHandles: VoidT.Δ.Δ, bWaitAll: BOOL, dwMilliseconds: DWORD, bAlertable: BOOL } ],
  SignalObjectAndWait: [ ulong, { hObjectToSignal: HANDLE, hObjectToWaitOn: HANDLE, dwMilliseconds: DWORD, bAlertable: BOOL } ],
  ReadFileEx: [ int, { hFile: HANDLE, lpBuffer: LPVOID, nNumberOfBytesToRead: DWORD, lpOverlapped: LPOVERLAPPED, lpCompletionRoutine: LPOVERLAPPED_COMPLETION_ROUTINE } ],
  WriteFileEx: [ int, { hFile: HANDLE, lpBuffer: LPCVOID, nNumberOfBytesToWrite: DWORD, lpOverlapped: LPOVERLAPPED, lpCompletionRoutine: LPOVERLAPPED_COMPLETION_ROUTINE } ],
  BackupRead: [ int, { hFile: HANDLE, lpBuffer: LPBYTE, nNumberOfBytesToRead: DWORD, lpNumberOfBytesRead: LPDWORD, bAbort: BOOL, bProcessSecurity: BOOL, lpContext: VoidT.Δ.Δ } ],
  BackupSeek: [ int, { hFile: HANDLE, dwLowBytesToSeek: DWORD, dwHighBytesToSeek: DWORD, lpdwLowByteSeeked: LPDWORD, lpdwHighByteSeeked: LPDWORD, lpContext: VoidT.Δ.Δ } ],
  BackupWrite: [ int, { hFile: HANDLE, lpBuffer: LPBYTE, nNumberOfBytesToWrite: DWORD, lpNumberOfBytesWritten: LPDWORD, bAbort: BOOL, bProcessSecurity: BOOL, lpContext: VoidT.Δ.Δ } ],
  ReadFileScatter: [ int, { hFile: HANDLE, aSegmentArray: uint.Δ, nNumberOfBytesToRead: DWORD, lpReserved: LPDWORD, lpOverlapped: LPOVERLAPPED } ],
  WriteFileGather: [ int, { hFile: HANDLE, aSegmentArray: uint.Δ, nNumberOfBytesToWrite: DWORD, lpReserved: LPDWORD, lpOverlapped: LPOVERLAPPED } ],
  CreateMutexA: [ VoidT.Δ, { lpMutexAttributes: LPSECURITY_ATTRIBUTES, bInitialOwner: BOOL, lpName: LPCSTR } ],
  CreateMutexW: [ VoidT.Δ, { lpMutexAttributes: LPSECURITY_ATTRIBUTES, bInitialOwner: BOOL, lpName: LPCWSTR } ],
  OpenMutexA: [ VoidT.Δ, { dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCSTR } ],
  OpenMutexW: [ VoidT.Δ, { dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCWSTR } ],
  CreateEventA: [ VoidT.Δ, { lpEventAttributes: LPSECURITY_ATTRIBUTES, bManualReset: BOOL, bInitialState: BOOL, lpName: LPCSTR } ],
  CreateEventW: [ VoidT.Δ, { lpEventAttributes: LPSECURITY_ATTRIBUTES, bManualReset: BOOL, bInitialState: BOOL, lpName: LPCWSTR } ],
  OpenEventA: [ VoidT.Δ, { dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCSTR } ],
  OpenEventW: [ VoidT.Δ, { dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCWSTR } ],
  CreateSemaphoreA: [ VoidT.Δ, { lpSemaphoreAttributes: LPSECURITY_ATTRIBUTES, lInitialCount: LONG, lMaximumCount: LONG, lpName: LPCSTR } ],
  CreateSemaphoreW: [ VoidT.Δ, { lpSemaphoreAttributes: LPSECURITY_ATTRIBUTES, lInitialCount: LONG, lMaximumCount: LONG, lpName: LPCWSTR } ],
  OpenSemaphoreA: [ VoidT.Δ, { dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCSTR } ],
  OpenSemaphoreW: [ VoidT.Δ, { dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCWSTR } ],
  CreateWaitableTimerA: [ VoidT.Δ, { lpTimerAttributes: LPSECURITY_ATTRIBUTES, bManualReset: BOOL, lpTimerName: LPCSTR } ],
  CreateWaitableTimerW: [ VoidT.Δ, { lpTimerAttributes: LPSECURITY_ATTRIBUTES, bManualReset: BOOL, lpTimerName: LPCWSTR } ],
  OpenWaitableTimerA: [ VoidT.Δ, { dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpTimerName: LPCSTR } ],
  OpenWaitableTimerW: [ VoidT.Δ, { dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpTimerName: LPCWSTR } ],
  SetWaitableTimerEx: [ int, { hTimer: HANDLE, lpDueTime: uint.Δ, lPeriod: LONG, pfnCompletionRoutine: PTIMERAPCROUTINE, lpArgToCompletionRoutine: LPVOID, WakeContext: PREASON_CONTEXT, TolerableDelay: ULONG } ],
  SetWaitableTimer: [ int, { hTimer: HANDLE, lpDueTime: uint.Δ, lPeriod: LONG, pfnCompletionRoutine: PTIMERAPCROUTINE, lpArgToCompletionRoutine: LPVOID, fResume: BOOL } ],
  CancelWaitableTimer: [ int, { hTimer: HANDLE } ],
  CreateMutexExA: [ VoidT.Δ, { lpMutexAttributes: LPSECURITY_ATTRIBUTES, lpName: LPCSTR, dwFlags: DWORD, dwDesiredAccess: DWORD } ],
  CreateMutexExW: [ VoidT.Δ, { lpMutexAttributes: LPSECURITY_ATTRIBUTES, lpName: LPCWSTR, dwFlags: DWORD, dwDesiredAccess: DWORD } ],
  CreateEventExA: [ VoidT.Δ, { lpEventAttributes: LPSECURITY_ATTRIBUTES, lpName: LPCSTR, dwFlags: DWORD, dwDesiredAccess: DWORD } ],
  CreateEventExW: [ VoidT.Δ, { lpEventAttributes: LPSECURITY_ATTRIBUTES, lpName: LPCWSTR, dwFlags: DWORD, dwDesiredAccess: DWORD } ],
  CreateSemaphoreExA: [ VoidT.Δ, { lpSemaphoreAttributes: LPSECURITY_ATTRIBUTES, lInitialCount: LONG, lMaximumCount: LONG, lpName: LPCSTR, dwFlags: DWORD, dwDesiredAccess: DWORD } ],
  CreateSemaphoreExW: [ VoidT.Δ, { lpSemaphoreAttributes: LPSECURITY_ATTRIBUTES, lInitialCount: LONG, lMaximumCount: LONG, lpName: LPCWSTR, dwFlags: DWORD, dwDesiredAccess: DWORD } ],
  CreateWaitableTimerExA: [ VoidT.Δ, { lpTimerAttributes: LPSECURITY_ATTRIBUTES, lpTimerName: LPCSTR, dwFlags: DWORD, dwDesiredAccess: DWORD } ],
  CreateWaitableTimerExW: [ VoidT.Δ, { lpTimerAttributes: LPSECURITY_ATTRIBUTES, lpTimerName: LPCWSTR, dwFlags: DWORD, dwDesiredAccess: DWORD } ],
  CreateFileMappingA: [ VoidT.Δ, { hFile: HANDLE, lpFileMappingAttributes: LPSECURITY_ATTRIBUTES, flProtect: DWORD, dwMaximumSizeHigh: DWORD, dwMaximumSizeLow: DWORD, lpName: LPCSTR } ],
  CreateFileMappingW: [ VoidT.Δ, { hFile: HANDLE, lpFileMappingAttributes: LPSECURITY_ATTRIBUTES, flProtect: DWORD, dwMaximumSizeHigh: DWORD, dwMaximumSizeLow: DWORD, lpName: LPCWSTR } ],
  CreateFileMappingNumaA: [ VoidT.Δ, { hFile: HANDLE, lpFileMappingAttributes: LPSECURITY_ATTRIBUTES, flProtect: DWORD, dwMaximumSizeHigh: DWORD, dwMaximumSizeLow: DWORD, lpName: LPCSTR, nndPreferred: DWORD } ],
  CreateFileMappingNumaW: [ VoidT.Δ, { hFile: HANDLE, lpFileMappingAttributes: LPSECURITY_ATTRIBUTES, flProtect: DWORD, dwMaximumSizeHigh: DWORD, dwMaximumSizeLow: DWORD, lpName: LPCWSTR, nndPreferred: DWORD } ],
  OpenFileMappingA: [ VoidT.Δ, { dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCSTR } ],
  OpenFileMappingW: [ VoidT.Δ, { dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCWSTR } ],
  GetLogicalDriveStringsA: [ ulong, { nBufferLength: DWORD, lpBuffer: LPSTR } ],
  GetLogicalDriveStringsW: [ ulong, { nBufferLength: DWORD, lpBuffer: LPWSTR } ],
  CreateMemoryResourceNotification: [ VoidT.Δ, { NotificationType: MEMORY_RESOURCE_NOTIFICATION_TYPE } ],
  QueryMemoryResourceNotification: [ int, { ResourceNotificationHandle: HANDLE, ResourceState: PBOOL } ],
  LoadLibraryA: [ VOIDPTR, { lpLibFileName: LPCSTR } ],
  LoadLibraryW: [ VOIDPTR, { lpLibFileName: LPCWSTR } ],
  LoadLibraryExA: [ VOIDPTR, { lpLibFileName: LPCSTR, hFile: HANDLE, dwFlags: DWORD } ],
  LoadLibraryExW: [ VOIDPTR, { lpLibFileName: LPCWSTR, hFile: HANDLE, dwFlags: DWORD } ],
  GetModuleFileNameA: [ ulong, { hModule: HMODULE, lpFilename: LPSTR, nSize: DWORD } ],
  GetModuleFileNameW: [ ulong, { hModule: HMODULE, lpFilename: LPWSTR, nSize: DWORD } ],
  GetModuleHandleA: [ VOIDPTR, { lpModuleName: LPCSTR } ],
  GetModuleHandleW: [ VOIDPTR, { lpModuleName: LPCWSTR } ],
  GetModuleHandleExA: [ int, { dwFlags: DWORD, lpModuleName: LPCSTR, phModule: VOIDPTR.Δ } ],
  GetModuleHandleExW: [ int, { dwFlags: DWORD, lpModuleName: LPCWSTR, phModule: VOIDPTR.Δ } ],
  NeedCurrentDirectoryForExePathA: [ int, { ExeName: LPCSTR } ],
  NeedCurrentDirectoryForExePathW: [ int, { ExeName: LPCWSTR } ],
  QueryFullProcessImageNameA: [ int, { hProcess: HANDLE, dwFlags: DWORD, lpExeName: LPSTR, lpdwSize: PDWORD } ],
  QueryFullProcessImageNameW: [ int, { hProcess: HANDLE, dwFlags: DWORD, lpExeName: LPWSTR, lpdwSize: PDWORD } ],
  InitializeProcThreadAttributeList: [ int, { lpAttributeList: LPPROC_THREAD_ATTRIBUTE_LIST, dwAttributeCount: DWORD, dwFlags: DWORD, lpSize: PSIZE_T } ],
  DeleteProcThreadAttributeList: [ VoidT, { lpAttributeList: LPPROC_THREAD_ATTRIBUTE_LIST } ],
  UpdateProcThreadAttribute: [ int, { lpAttributeList: LPPROC_THREAD_ATTRIBUTE_LIST, dwFlags: DWORD, Attribute: DWORD_PTR, lpValue: PVOID, cbSize: SIZE_T, lpPreviousValue: PVOID, lpReturnSize: PSIZE_T } ],
  CreateProcessA: [ int, { lpApplicationName: LPCSTR, lpCommandLine: LPSTR, lpProcessAttributes: LPSECURITY_ATTRIBUTES, lpThreadAttributes: LPSECURITY_ATTRIBUTES, bInheritHandles: BOOL, dwCreationFlags: DWORD, lpEnvironment: LPVOID, lpCurrentDirectory: LPCSTR, lpStartupInfo: LPSTARTUPINFOA, lpProcessInformation: LPPROCESS_INFORMATION } ],
  CreateProcessW: [ int, { lpApplicationName: LPCWSTR, lpCommandLine: LPWSTR, lpProcessAttributes: LPSECURITY_ATTRIBUTES, lpThreadAttributes: LPSECURITY_ATTRIBUTES, bInheritHandles: BOOL, dwCreationFlags: DWORD, lpEnvironment: LPVOID, lpCurrentDirectory: LPCWSTR, lpStartupInfo: LPSTARTUPINFOW, lpProcessInformation: LPPROCESS_INFORMATION } ],
  SetProcessShutdownParameters: [ int, { dwLevel: DWORD, dwFlags: DWORD } ],
  GetProcessShutdownParameters: [ int, { lpdwLevel: LPDWORD, lpdwFlags: LPDWORD } ],
  GetProcessVersion: [ ulong, { ProcessId: DWORD } ],
  FatalAppExitA: [ VoidT, { uAction: UINT, lpMessageText: LPCSTR } ],
  FatalAppExitW: [ VoidT, { uAction: UINT, lpMessageText: LPCWSTR } ],
  GetStartupInfoA: [ VoidT, { lpStartupInfo: LPSTARTUPINFOA } ],
  GetStartupInfoW: [ VoidT, { lpStartupInfo: LPSTARTUPINFOW } ],
  GetCommandLineA: [ int8.Δ, {  } ],
  GetCommandLineW: [ ushort.Δ, {  } ],
  GetEnvironmentVariableA: [ ulong, { lpName: LPCSTR, lpBuffer: LPSTR, nSize: DWORD } ],
  GetEnvironmentVariableW: [ ulong, { lpName: LPCWSTR, lpBuffer: LPWSTR, nSize: DWORD } ],
  SetEnvironmentVariableA: [ int, { lpName: LPCSTR, lpValue: LPCSTR } ],
  SetEnvironmentVariableW: [ int, { lpName: LPCWSTR, lpValue: LPCWSTR } ],
  ExpandEnvironmentStringsA: [ ulong, { lpSrc: LPCSTR, lpDst: LPSTR, nSize: DWORD } ],
  ExpandEnvironmentStringsW: [ ulong, { lpSrc: LPCWSTR, lpDst: LPWSTR, nSize: DWORD } ],
  GetFirmwareEnvironmentVariableA: [ ulong, { lpName: LPCSTR, lpGuid: LPCSTR, pBuffer: PVOID, nSize: DWORD } ],
  GetFirmwareEnvironmentVariableW: [ ulong, { lpName: LPCWSTR, lpGuid: LPCWSTR, pBuffer: PVOID, nSize: DWORD } ],
  SetFirmwareEnvironmentVariableA: [ int, { lpName: LPCSTR, lpGuid: LPCSTR, pValue: PVOID, nSize: DWORD } ],
  SetFirmwareEnvironmentVariableW: [ int, { lpName: LPCWSTR, lpGuid: LPCWSTR, pValue: PVOID, nSize: DWORD } ],
  OutputDebugStringA: [ VoidT, { lpOutputString: LPCSTR } ],
  OutputDebugStringW: [ VoidT, { lpOutputString: LPCWSTR } ],
  FindResourceA: [ VOIDPTR, { hModule: HMODULE, lpName: LPCSTR, lpType: LPCSTR } ],
  FindResourceW: [ VOIDPTR, { hModule: HMODULE, lpName: LPCWSTR, lpType: LPCWSTR } ],
  FindResourceExA: [ VOIDPTR, { hModule: HMODULE, lpType: LPCSTR, lpName: LPCSTR, wLanguage: WORD } ],
  FindResourceExW: [ VOIDPTR, { hModule: HMODULE, lpType: LPCWSTR, lpName: LPCWSTR, wLanguage: WORD } ],
  EnumResourceTypesA: [ int, { hModule: HMODULE, lpEnumFunc: ENUMRESTYPEPROCA, lParam: LONG_PTR } ],
  EnumResourceTypesW: [ int, { hModule: HMODULE, lpEnumFunc: ENUMRESTYPEPROCW, lParam: LONG_PTR } ],
  EnumResourceNamesA: [ int, { hModule: HMODULE, lpType: LPCSTR, lpEnumFunc: ENUMRESNAMEPROCA, lParam: LONG_PTR } ],
  EnumResourceNamesW: [ int, { hModule: HMODULE, lpType: LPCWSTR, lpEnumFunc: ENUMRESNAMEPROCW, lParam: LONG_PTR } ],
  EnumResourceLanguagesA: [ int, { hModule: HMODULE, lpType: LPCSTR, lpName: LPCSTR, lpEnumFunc: ENUMRESLANGPROCA, lParam: LONG_PTR } ],
  EnumResourceLanguagesW: [ int, { hModule: HMODULE, lpType: LPCWSTR, lpName: LPCWSTR, lpEnumFunc: ENUMRESLANGPROCW, lParam: LONG_PTR } ],
  EnumResourceTypesExA: [ int, { hModule: HMODULE, lpEnumFunc: ENUMRESTYPEPROCA, lParam: LONG_PTR, dwFlags: DWORD, LangId: LANGID } ],
  EnumResourceTypesExW: [ int, { hModule: HMODULE, lpEnumFunc: ENUMRESTYPEPROCW, lParam: LONG_PTR, dwFlags: DWORD, LangId: LANGID } ],
  EnumResourceNamesExA: [ int, { hModule: HMODULE, lpType: LPCSTR, lpEnumFunc: ENUMRESNAMEPROCA, lParam: LONG_PTR, dwFlags: DWORD, LangId: LANGID } ],
  EnumResourceNamesExW: [ int, { hModule: HMODULE, lpType: LPCWSTR, lpEnumFunc: ENUMRESNAMEPROCW, lParam: LONG_PTR, dwFlags: DWORD, LangId: LANGID } ],
  EnumResourceLanguagesExA: [ int, { hModule: HMODULE, lpType: LPCSTR, lpName: LPCSTR, lpEnumFunc: ENUMRESLANGPROCA, lParam: LONG_PTR, dwFlags: DWORD, LangId: LANGID } ],
  EnumResourceLanguagesExW: [ int, { hModule: HMODULE, lpType: LPCWSTR, lpName: LPCWSTR, lpEnumFunc: ENUMRESLANGPROCW, lParam: LONG_PTR, dwFlags: DWORD, LangId: LANGID } ],
  BeginUpdateResourceA: [ VoidT.Δ, { pFileName: LPCSTR, bDeleteExistingResources: BOOL } ],
  BeginUpdateResourceW: [ VoidT.Δ, { pFileName: LPCWSTR, bDeleteExistingResources: BOOL } ],
  UpdateResourceA: [ int, { hUpdate: HANDLE, lpType: LPCSTR, lpName: LPCSTR, wLanguage: WORD, lpData: LPVOID, cb: DWORD } ],
  UpdateResourceW: [ int, { hUpdate: HANDLE, lpType: LPCWSTR, lpName: LPCWSTR, wLanguage: WORD, lpData: LPVOID, cb: DWORD } ],
  EndUpdateResourceA: [ int, { hUpdate: HANDLE, fDiscard: BOOL } ],
  EndUpdateResourceW: [ int, { hUpdate: HANDLE, fDiscard: BOOL } ],
  GlobalAddAtomA: [ ushort, { lpString: LPCSTR } ],
  GlobalAddAtomW: [ ushort, { lpString: LPCWSTR } ],
  GlobalFindAtomA: [ ushort, { lpString: LPCSTR } ],
  GlobalFindAtomW: [ ushort, { lpString: LPCWSTR } ],
  GlobalGetAtomNameA: [ uint, { nAtom: ATOM, lpBuffer: LPSTR, nSize: int } ],
  GlobalGetAtomNameW: [ uint, { nAtom: ATOM, lpBuffer: LPWSTR, nSize: int } ],
  AddAtomA: [ ushort, { lpString: LPCSTR } ],
  AddAtomW: [ ushort, { lpString: LPCWSTR } ],
  FindAtomA: [ ushort, { lpString: LPCSTR } ],
  FindAtomW: [ ushort, { lpString: LPCWSTR } ],
  GetAtomNameA: [ uint, { nAtom: ATOM, lpBuffer: LPSTR, nSize: int } ],
  GetAtomNameW: [ uint, { nAtom: ATOM, lpBuffer: LPWSTR, nSize: int } ],
  GetProfileIntA: [ uint, { lpAppName: LPCSTR, lpKeyName: LPCSTR, nDefault: INT } ],
  GetProfileIntW: [ uint, { lpAppName: LPCWSTR, lpKeyName: LPCWSTR, nDefault: INT } ],
  GetProfileStringA: [ ulong, { lpAppName: LPCSTR, lpKeyName: LPCSTR, lpDefault: LPCSTR, lpReturnedString: LPSTR, nSize: DWORD } ],
  GetProfileStringW: [ ulong, { lpAppName: LPCWSTR, lpKeyName: LPCWSTR, lpDefault: LPCWSTR, lpReturnedString: LPWSTR, nSize: DWORD } ],
  WriteProfileStringA: [ int, { lpAppName: LPCSTR, lpKeyName: LPCSTR, lpString: LPCSTR } ],
  WriteProfileStringW: [ int, { lpAppName: LPCWSTR, lpKeyName: LPCWSTR, lpString: LPCWSTR } ],
  GetProfileSectionA: [ ulong, { lpAppName: LPCSTR, lpReturnedString: LPSTR, nSize: DWORD } ],
  GetProfileSectionW: [ ulong, { lpAppName: LPCWSTR, lpReturnedString: LPWSTR, nSize: DWORD } ],
  WriteProfileSectionA: [ int, { lpAppName: LPCSTR, lpString: LPCSTR } ],
  WriteProfileSectionW: [ int, { lpAppName: LPCWSTR, lpString: LPCWSTR } ],
  GetPrivateProfileIntA: [ uint, { lpAppName: LPCSTR, lpKeyName: LPCSTR, nDefault: INT, lpFileName: LPCSTR } ],
  GetPrivateProfileIntW: [ uint, { lpAppName: LPCWSTR, lpKeyName: LPCWSTR, nDefault: INT, lpFileName: LPCWSTR } ],
  GetPrivateProfileStringA: [ ulong, { lpAppName: LPCSTR, lpKeyName: LPCSTR, lpDefault: LPCSTR, lpReturnedString: LPSTR, nSize: DWORD, lpFileName: LPCSTR } ],
  GetPrivateProfileStringW: [ ulong, { lpAppName: LPCWSTR, lpKeyName: LPCWSTR, lpDefault: LPCWSTR, lpReturnedString: LPWSTR, nSize: DWORD, lpFileName: LPCWSTR } ],
  WritePrivateProfileStringA: [ int, { lpAppName: LPCSTR, lpKeyName: LPCSTR, lpString: LPCSTR, lpFileName: LPCSTR } ],
  WritePrivateProfileStringW: [ int, { lpAppName: LPCWSTR, lpKeyName: LPCWSTR, lpString: LPCWSTR, lpFileName: LPCWSTR } ],
  GetPrivateProfileSectionA: [ ulong, { lpAppName: LPCSTR, lpReturnedString: LPSTR, nSize: DWORD, lpFileName: LPCSTR } ],
  GetPrivateProfileSectionW: [ ulong, { lpAppName: LPCWSTR, lpReturnedString: LPWSTR, nSize: DWORD, lpFileName: LPCWSTR } ],
  WritePrivateProfileSectionA: [ int, { lpAppName: LPCSTR, lpString: LPCSTR, lpFileName: LPCSTR } ],
  WritePrivateProfileSectionW: [ int, { lpAppName: LPCWSTR, lpString: LPCWSTR, lpFileName: LPCWSTR } ],
  GetPrivateProfileSectionNamesA: [ ulong, { lpszReturnBuffer: LPSTR, nSize: DWORD, lpFileName: LPCSTR } ],
  GetPrivateProfileSectionNamesW: [ ulong, { lpszReturnBuffer: LPWSTR, nSize: DWORD, lpFileName: LPCWSTR } ],
  GetPrivateProfileStructA: [ int, { lpszSection: LPCSTR, lpszKey: LPCSTR, lpStruct: LPVOID, uSizeStruct: UINT, szFile: LPCSTR } ],
  GetPrivateProfileStructW: [ int, { lpszSection: LPCWSTR, lpszKey: LPCWSTR, lpStruct: LPVOID, uSizeStruct: UINT, szFile: LPCWSTR } ],
  WritePrivateProfileStructA: [ int, { lpszSection: LPCSTR, lpszKey: LPCSTR, lpStruct: LPVOID, uSizeStruct: UINT, szFile: LPCSTR } ],
  WritePrivateProfileStructW: [ int, { lpszSection: LPCWSTR, lpszKey: LPCWSTR, lpStruct: LPVOID, uSizeStruct: UINT, szFile: LPCWSTR } ],
  GetDriveTypeA: [ uint, { lpRootPathName: LPCSTR } ],
  GetDriveTypeW: [ uint, { lpRootPathName: LPCWSTR } ],
  GetSystemDirectoryA: [ uint, { lpBuffer: LPSTR, uSize: UINT } ],
  GetSystemDirectoryW: [ uint, { lpBuffer: LPWSTR, uSize: UINT } ],
  GetTempPathA: [ ulong, { nBufferLength: DWORD, lpBuffer: LPSTR } ],
  GetTempPathW: [ ulong, { nBufferLength: DWORD, lpBuffer: LPWSTR } ],
  GetTempFileNameA: [ uint, { lpPathName: LPCSTR, lpPrefixString: LPCSTR, uUnique: UINT, lpTempFileName: LPSTR } ],
  GetTempFileNameW: [ uint, { lpPathName: LPCWSTR, lpPrefixString: LPCWSTR, uUnique: UINT, lpTempFileName: LPWSTR } ],
  GetWindowsDirectoryA: [ uint, { lpBuffer: LPSTR, uSize: UINT } ],
  GetWindowsDirectoryW: [ uint, { lpBuffer: LPWSTR, uSize: UINT } ],
  GetSystemWindowsDirectoryA: [ uint, { lpBuffer: LPSTR, uSize: UINT } ],
  GetSystemWindowsDirectoryW: [ uint, { lpBuffer: LPWSTR, uSize: UINT } ],
  GetSystemWow64DirectoryA: [ uint, { lpBuffer: LPSTR, uSize: UINT } ],
  GetSystemWow64DirectoryW: [ uint, { lpBuffer: LPWSTR, uSize: UINT } ],
  Wow64EnableWow64FsRedirection: [ uchar, { Wow64FsEnableRedirection: BOOLEAN } ],
  Wow64DisableWow64FsRedirection: [ int, { OldValue: VoidT.Δ.Δ } ],
  Wow64RevertWow64FsRedirection: [ int, { OlValue: PVOID } ],
  SetCurrentDirectoryA: [ int, { lpPathName: LPCSTR } ],
  SetCurrentDirectoryW: [ int, { lpPathName: LPCWSTR } ],
  GetCurrentDirectoryA: [ ulong, { nBufferLength: DWORD, lpBuffer: LPSTR } ],
  GetCurrentDirectoryW: [ ulong, { nBufferLength: DWORD, lpBuffer: LPWSTR } ],
  SetDllDirectoryA: [ int, { lpPathName: LPCSTR } ],
  SetDllDirectoryW: [ int, { lpPathName: LPCWSTR } ],
  GetDllDirectoryA: [ ulong, { nBufferLength: DWORD, lpBuffer: LPSTR } ],
  GetDllDirectoryW: [ ulong, { nBufferLength: DWORD, lpBuffer: LPWSTR } ],
  SetSearchPathMode: [ int, { Flags: DWORD } ],
  GetDiskFreeSpaceA: [ int, { lpRootPathName: LPCSTR, lpSectorsPerCluster: LPDWORD, lpBytesPerSector: LPDWORD, lpNumberOfFreeClusters: LPDWORD, lpTotalNumberOfClusters: LPDWORD } ],
  GetDiskFreeSpaceW: [ int, { lpRootPathName: LPCWSTR, lpSectorsPerCluster: LPDWORD, lpBytesPerSector: LPDWORD, lpNumberOfFreeClusters: LPDWORD, lpTotalNumberOfClusters: LPDWORD } ],
  GetDiskFreeSpaceExA: [ int, { lpDirectoryName: LPCSTR, lpFreeBytesAvailableToCaller: PULARGE_INTEGER, lpTotalNumberOfBytes: PULARGE_INTEGER, lpTotalNumberOfFreeBytes: PULARGE_INTEGER } ],
  GetDiskFreeSpaceExW: [ int, { lpDirectoryName: LPCWSTR, lpFreeBytesAvailableToCaller: PULARGE_INTEGER, lpTotalNumberOfBytes: PULARGE_INTEGER, lpTotalNumberOfFreeBytes: PULARGE_INTEGER } ],
  CreateDirectoryA: [ int, { lpPathName: LPCSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES } ],
  CreateDirectoryW: [ int, { lpPathName: LPCWSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES } ],
  CreateDirectoryExA: [ int, { lpTemplateDirectory: LPCSTR, lpNewDirectory: LPCSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES } ],
  CreateDirectoryExW: [ int, { lpTemplateDirectory: LPCWSTR, lpNewDirectory: LPCWSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES } ],
  CreateDirectoryTransactedA: [ int, { lpTemplateDirectory: LPCSTR, lpNewDirectory: LPCSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, hTransaction: HANDLE } ],
  CreateDirectoryTransactedW: [ int, { lpTemplateDirectory: LPCWSTR, lpNewDirectory: LPCWSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, hTransaction: HANDLE } ],
  RemoveDirectoryA: [ int, { lpPathName: LPCSTR } ],
  RemoveDirectoryW: [ int, { lpPathName: LPCWSTR } ],
  RemoveDirectoryTransactedA: [ int, { lpPathName: LPCSTR, hTransaction: HANDLE } ],
  RemoveDirectoryTransactedW: [ int, { lpPathName: LPCWSTR, hTransaction: HANDLE } ],
  GetFullPathNameA: [ ulong, { lpFileName: LPCSTR, nBufferLength: DWORD, lpBuffer: LPSTR, lpFilePart: int8.Δ.Δ } ],
  GetFullPathNameW: [ ulong, { lpFileName: LPCWSTR, nBufferLength: DWORD, lpBuffer: LPWSTR, lpFilePart: ushort.Δ.Δ } ],
  GetFullPathNameTransactedA: [ ulong, { lpFileName: LPCSTR, nBufferLength: DWORD, lpBuffer: LPSTR, lpFilePart: int8.Δ.Δ, hTransaction: HANDLE } ],
  GetFullPathNameTransactedW: [ ulong, { lpFileName: LPCWSTR, nBufferLength: DWORD, lpBuffer: LPWSTR, lpFilePart: ushort.Δ.Δ, hTransaction: HANDLE } ],
  DefineDosDeviceA: [ int, { dwFlags: DWORD, lpDeviceName: LPCSTR, lpTargetPath: LPCSTR } ],
  DefineDosDeviceW: [ int, { dwFlags: DWORD, lpDeviceName: LPCWSTR, lpTargetPath: LPCWSTR } ],
  QueryDosDeviceA: [ ulong, { lpDeviceName: LPCSTR, lpTargetPath: LPSTR, ucchMax: DWORD } ],
  QueryDosDeviceW: [ ulong, { lpDeviceName: LPCWSTR, lpTargetPath: LPWSTR, ucchMax: DWORD } ],
  CreateFileA: [ VoidT.Δ, { lpFileName: LPCSTR, dwDesiredAccess: DWORD, dwShareMode: DWORD, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, dwCreationDisposition: DWORD, dwFlagsAndAttributes: DWORD, hTemplateFile: HANDLE } ],
  CreateFileW: [ VoidT.Δ, { lpFileName: LPCWSTR, dwDesiredAccess: DWORD, dwShareMode: DWORD, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, dwCreationDisposition: DWORD, dwFlagsAndAttributes: DWORD, hTemplateFile: HANDLE } ],
  CreateFileTransactedA: [ VoidT.Δ, { lpFileName: LPCSTR, dwDesiredAccess: DWORD, dwShareMode: DWORD, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, dwCreationDisposition: DWORD, dwFlagsAndAttributes: DWORD, hTemplateFile: HANDLE, hTransaction: HANDLE, pusMiniVersion: PUSHORT, lpExtendedParameter: PVOID } ],
  CreateFileTransactedW: [ VoidT.Δ, { lpFileName: LPCWSTR, dwDesiredAccess: DWORD, dwShareMode: DWORD, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, dwCreationDisposition: DWORD, dwFlagsAndAttributes: DWORD, hTemplateFile: HANDLE, hTransaction: HANDLE, pusMiniVersion: PUSHORT, lpExtendedParameter: PVOID } ],
  ReOpenFile: [ VoidT.Δ, { hOriginalFile: HANDLE, dwDesiredAccess: DWORD, dwShareMode: DWORD, dwFlagsAndAttributes: DWORD } ],
  SetFileAttributesA: [ int, { lpFileName: LPCSTR, dwFileAttributes: DWORD } ],
  SetFileAttributesW: [ int, { lpFileName: LPCWSTR, dwFileAttributes: DWORD } ],
  GetFileAttributesA: [ ulong, { lpFileName: LPCSTR } ],
  GetFileAttributesW: [ ulong, { lpFileName: LPCWSTR } ],
  SetFileAttributesTransactedA: [ int, { lpFileName: LPCSTR, dwFileAttributes: DWORD, hTransaction: HANDLE } ],
  SetFileAttributesTransactedW: [ int, { lpFileName: LPCWSTR, dwFileAttributes: DWORD, hTransaction: HANDLE } ],
  GetFileAttributesTransactedA: [ int, { lpFileName: LPCSTR, fInfoLevelId: GET_FILEEX_INFO_LEVELS, lpFileInformation: LPVOID, hTransaction: HANDLE } ],
  GetFileAttributesTransactedW: [ int, { lpFileName: LPCWSTR, fInfoLevelId: GET_FILEEX_INFO_LEVELS, lpFileInformation: LPVOID, hTransaction: HANDLE } ],
  GetFileAttributesExA: [ int, { lpFileName: LPCSTR, fInfoLevelId: GET_FILEEX_INFO_LEVELS, lpFileInformation: LPVOID } ],
  GetFileAttributesExW: [ int, { lpFileName: LPCWSTR, fInfoLevelId: GET_FILEEX_INFO_LEVELS, lpFileInformation: LPVOID } ],
  GetCompressedFileSizeA: [ ulong, { lpFileName: LPCSTR, lpFileSizeHigh: LPDWORD } ],
  GetCompressedFileSizeW: [ ulong, { lpFileName: LPCWSTR, lpFileSizeHigh: LPDWORD } ],
  GetCompressedFileSizeTransactedA: [ ulong, { lpFileName: LPCSTR, lpFileSizeHigh: LPDWORD, hTransaction: HANDLE } ],
  GetCompressedFileSizeTransactedW: [ ulong, { lpFileName: LPCWSTR, lpFileSizeHigh: LPDWORD, hTransaction: HANDLE } ],
  DeleteFileA: [ int, { lpFileName: LPCSTR } ],
  DeleteFileW: [ int, { lpFileName: LPCWSTR } ],
  DeleteFileTransactedA: [ int, { lpFileName: LPCSTR, hTransaction: HANDLE } ],
  DeleteFileTransactedW: [ int, { lpFileName: LPCWSTR, hTransaction: HANDLE } ],
  CheckNameLegalDOS8Dot3A: [ int, { lpName: LPCSTR, lpOemName: LPSTR, OemNameSize: DWORD, pbNameContainsSpaces: PBOOL, pbNameLegal: PBOOL } ],
  CheckNameLegalDOS8Dot3W: [ int, { lpName: LPCWSTR, lpOemName: LPSTR, OemNameSize: DWORD, pbNameContainsSpaces: PBOOL, pbNameLegal: PBOOL } ],
  FindFirstFileExA: [ VoidT.Δ, { lpFileName: LPCSTR, fInfoLevelId: FINDEX_INFO_LEVELS, lpFindFileData: LPVOID, fSearchOp: FINDEX_SEARCH_OPS, lpSearchFilter: LPVOID, dwAdditionalFlags: DWORD } ],
  FindFirstFileExW: [ VoidT.Δ, { lpFileName: LPCWSTR, fInfoLevelId: FINDEX_INFO_LEVELS, lpFindFileData: LPVOID, fSearchOp: FINDEX_SEARCH_OPS, lpSearchFilter: LPVOID, dwAdditionalFlags: DWORD } ],
  FindFirstFileTransactedA: [ VoidT.Δ, { lpFileName: LPCSTR, fInfoLevelId: FINDEX_INFO_LEVELS, lpFindFileData: LPVOID, fSearchOp: FINDEX_SEARCH_OPS, lpSearchFilter: LPVOID, dwAdditionalFlags: DWORD, hTransaction: HANDLE } ],
  FindFirstFileTransactedW: [ VoidT.Δ, { lpFileName: LPCWSTR, fInfoLevelId: FINDEX_INFO_LEVELS, lpFindFileData: LPVOID, fSearchOp: FINDEX_SEARCH_OPS, lpSearchFilter: LPVOID, dwAdditionalFlags: DWORD, hTransaction: HANDLE } ],
  FindFirstFileA: [ VoidT.Δ, { lpFileName: LPCSTR, lpFindFileData: LPWIN32_FIND_DATAA } ],
  FindFirstFileW: [ VoidT.Δ, { lpFileName: LPCWSTR, lpFindFileData: LPWIN32_FIND_DATAW } ],
  FindNextFileA: [ int, { hFindFile: HANDLE, lpFindFileData: LPWIN32_FIND_DATAA } ],
  FindNextFileW: [ int, { hFindFile: HANDLE, lpFindFileData: LPWIN32_FIND_DATAW } ],
  SearchPathA: [ ulong, { lpPath: LPCSTR, lpFileName: LPCSTR, lpExtension: LPCSTR, nBufferLength: DWORD, lpBuffer: LPSTR, lpFilePart: int8.Δ.Δ } ],
  SearchPathW: [ ulong, { lpPath: LPCWSTR, lpFileName: LPCWSTR, lpExtension: LPCWSTR, nBufferLength: DWORD, lpBuffer: LPWSTR, lpFilePart: ushort.Δ.Δ } ],
  CopyFileA: [ int, { lpExistingFileName: LPCSTR, lpNewFileName: LPCSTR, bFailIfExists: BOOL } ],
  CopyFileW: [ int, { lpExistingFileName: LPCWSTR, lpNewFileName: LPCWSTR, bFailIfExists: BOOL } ],
  CopyFileExA: [ int, { lpExistingFileName: LPCSTR, lpNewFileName: LPCSTR, lpProgressRoutine: LPPROGRESS_ROUTINE, lpData: LPVOID, pbCancel: LPBOOL, dwCopyFlags: DWORD } ],
  CopyFileExW: [ int, { lpExistingFileName: LPCWSTR, lpNewFileName: LPCWSTR, lpProgressRoutine: LPPROGRESS_ROUTINE, lpData: LPVOID, pbCancel: LPBOOL, dwCopyFlags: DWORD } ],
  CopyFileTransactedA: [ int, { lpExistingFileName: LPCSTR, lpNewFileName: LPCSTR, lpProgressRoutine: LPPROGRESS_ROUTINE, lpData: LPVOID, pbCancel: LPBOOL, dwCopyFlags: DWORD, hTransaction: HANDLE } ],
  CopyFileTransactedW: [ int, { lpExistingFileName: LPCWSTR, lpNewFileName: LPCWSTR, lpProgressRoutine: LPPROGRESS_ROUTINE, lpData: LPVOID, pbCancel: LPBOOL, dwCopyFlags: DWORD, hTransaction: HANDLE } ],
  MoveFileA: [ int, { lpExistingFileName: LPCSTR, lpNewFileName: LPCSTR } ],
  MoveFileW: [ int, { lpExistingFileName: LPCWSTR, lpNewFileName: LPCWSTR } ],
  MoveFileExA: [ int, { lpExistingFileName: LPCSTR, lpNewFileName: LPCSTR, dwFlags: DWORD } ],
  MoveFileExW: [ int, { lpExistingFileName: LPCWSTR, lpNewFileName: LPCWSTR, dwFlags: DWORD } ],
  MoveFileWithProgressA: [ int, { lpExistingFileName: LPCSTR, lpNewFileName: LPCSTR, lpProgressRoutine: LPPROGRESS_ROUTINE, lpData: LPVOID, dwFlags: DWORD } ],
  MoveFileWithProgressW: [ int, { lpExistingFileName: LPCWSTR, lpNewFileName: LPCWSTR, lpProgressRoutine: LPPROGRESS_ROUTINE, lpData: LPVOID, dwFlags: DWORD } ],
  MoveFileTransactedA: [ int, { lpExistingFileName: LPCSTR, lpNewFileName: LPCSTR, lpProgressRoutine: LPPROGRESS_ROUTINE, lpData: LPVOID, dwFlags: DWORD, hTransaction: HANDLE } ],
  MoveFileTransactedW: [ int, { lpExistingFileName: LPCWSTR, lpNewFileName: LPCWSTR, lpProgressRoutine: LPPROGRESS_ROUTINE, lpData: LPVOID, dwFlags: DWORD, hTransaction: HANDLE } ],
  ReplaceFileA: [ int, { lpReplacedFileName: LPCSTR, lpReplacementFileName: LPCSTR, lpBackupFileName: LPCSTR, dwReplaceFlags: DWORD, lpExclude: LPVOID, lpReserved: LPVOID } ],
  ReplaceFileW: [ int, { lpReplacedFileName: LPCWSTR, lpReplacementFileName: LPCWSTR, lpBackupFileName: LPCWSTR, dwReplaceFlags: DWORD, lpExclude: LPVOID, lpReserved: LPVOID } ],
  CreateHardLinkA: [ int, { lpFileName: LPCSTR, lpExistingFileName: LPCSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES } ],
  CreateHardLinkW: [ int, { lpFileName: LPCWSTR, lpExistingFileName: LPCWSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES } ],
  CreateHardLinkTransactedA: [ int, { lpFileName: LPCSTR, lpExistingFileName: LPCSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, hTransaction: HANDLE } ],
  CreateHardLinkTransactedW: [ int, { lpFileName: LPCWSTR, lpExistingFileName: LPCWSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, hTransaction: HANDLE } ],
  FindFirstStreamW: [ VoidT.Δ, { lpFileName: LPCWSTR, InfoLevel: STREAM_INFO_LEVELS, lpFindStreamData: LPVOID, dwFlags: DWORD } ],
  FindFirstStreamTransactedW: [ VoidT.Δ, { lpFileName: LPCWSTR, InfoLevel: STREAM_INFO_LEVELS, lpFindStreamData: LPVOID, dwFlags: DWORD, hTransaction: HANDLE } ],
  FindNextStreamW: [ int, { hFindStream: HANDLE, lpFindStreamData: LPVOID } ],
  FindFirstFileNameW: [ VoidT.Δ, { lpFileName: LPCWSTR, dwFlags: DWORD, StringLength: LPDWORD, LinkName: PWCHAR } ],
  FindNextFileNameW: [ int, { hFindStream: HANDLE, StringLength: LPDWORD, LinkName: PWCHAR } ],
  FindFirstFileNameTransactedW: [ VoidT.Δ, { lpFileName: LPCWSTR, dwFlags: DWORD, StringLength: LPDWORD, LinkName: PWCHAR, hTransaction: HANDLE } ],
  CreateNamedPipeA: [ VoidT.Δ, { lpName: LPCSTR, dwOpenMode: DWORD, dwPipeMode: DWORD, nMaxInstances: DWORD, nOutBufferSize: DWORD, nInBufferSize: DWORD, nDefaultTimeOut: DWORD, lpSecurityAttributes: LPSECURITY_ATTRIBUTES } ],
  CreateNamedPipeW: [ VoidT.Δ, { lpName: LPCWSTR, dwOpenMode: DWORD, dwPipeMode: DWORD, nMaxInstances: DWORD, nOutBufferSize: DWORD, nInBufferSize: DWORD, nDefaultTimeOut: DWORD, lpSecurityAttributes: LPSECURITY_ATTRIBUTES } ],
  GetNamedPipeHandleStateA: [ int, { hNamedPipe: HANDLE, lpState: LPDWORD, lpCurInstances: LPDWORD, lpMaxCollectionCount: LPDWORD, lpCollectDataTimeout: LPDWORD, lpUserName: LPSTR, nMaxUserNameSize: DWORD } ],
  GetNamedPipeHandleStateW: [ int, { hNamedPipe: HANDLE, lpState: LPDWORD, lpCurInstances: LPDWORD, lpMaxCollectionCount: LPDWORD, lpCollectDataTimeout: LPDWORD, lpUserName: LPWSTR, nMaxUserNameSize: DWORD } ],
  CallNamedPipeA: [ int, { lpNamedPipeName: LPCSTR, lpInBuffer: LPVOID, nInBufferSize: DWORD, lpOutBuffer: LPVOID, nOutBufferSize: DWORD, lpBytesRead: LPDWORD, nTimeOut: DWORD } ],
  CallNamedPipeW: [ int, { lpNamedPipeName: LPCWSTR, lpInBuffer: LPVOID, nInBufferSize: DWORD, lpOutBuffer: LPVOID, nOutBufferSize: DWORD, lpBytesRead: LPDWORD, nTimeOut: DWORD } ],
  WaitNamedPipeA: [ int, { lpNamedPipeName: LPCSTR, nTimeOut: DWORD } ],
  WaitNamedPipeW: [ int, { lpNamedPipeName: LPCWSTR, nTimeOut: DWORD } ],
  GetNamedPipeAttribute: [ int, { Pipe: HANDLE, AttributeType: PIPE_ATTRIBUTE_TYPE, AttributeName: PSTR, AttributeValue: PVOID, AttributeValueLength: PSIZE_T } ],
  SetNamedPipeAttribute: [ int, { Pipe: HANDLE, AttributeType: PIPE_ATTRIBUTE_TYPE, AttributeName: PSTR, AttributeValue: PVOID, AttributeValueLength: SIZE_T } ],
  GetNamedPipeClientComputerNameA: [ int, { Pipe: HANDLE, ClientComputerName: LPSTR, ClientComputerNameLength: ULONG } ],
  GetNamedPipeClientComputerNameW: [ int, { Pipe: HANDLE, ClientComputerName: LPWSTR, ClientComputerNameLength: ULONG } ],
  GetNamedPipeClientProcessId: [ int, { Pipe: HANDLE, ClientProcessId: PULONG } ],
  GetNamedPipeClientSessionId: [ int, { Pipe: HANDLE, ClientSessionId: PULONG } ],
  GetNamedPipeServerProcessId: [ int, { Pipe: HANDLE, ServerProcessId: PULONG } ],
  GetNamedPipeServerSessionId: [ int, { Pipe: HANDLE, ServerSessionId: PULONG } ],
  SetVolumeLabelA: [ int, { lpRootPathName: LPCSTR, lpVolumeName: LPCSTR } ],
  SetVolumeLabelW: [ int, { lpRootPathName: LPCWSTR, lpVolumeName: LPCWSTR } ],
  SetFileApisToOEM: [ VoidT, {  } ],
  SetFileApisToANSI: [ VoidT, {  } ],
  AreFileApisANSI: [ int, {  } ],
  GetVolumeInformationA: [ int, { lpRootPathName: LPCSTR, lpVolumeNameBuffer: LPSTR, nVolumeNameSize: DWORD, lpVolumeSerialNumber: LPDWORD, lpMaximumComponentLength: LPDWORD, lpFileSystemFlags: LPDWORD, lpFileSystemNameBuffer: LPSTR, nFileSystemNameSize: DWORD } ],
  GetVolumeInformationW: [ int, { lpRootPathName: LPCWSTR, lpVolumeNameBuffer: LPWSTR, nVolumeNameSize: DWORD, lpVolumeSerialNumber: LPDWORD, lpMaximumComponentLength: LPDWORD, lpFileSystemFlags: LPDWORD, lpFileSystemNameBuffer: LPWSTR, nFileSystemNameSize: DWORD } ],
  GetVolumeInformationByHandleW: [ int, { hFile: HANDLE, lpVolumeNameBuffer: LPWSTR, nVolumeNameSize: DWORD, lpVolumeSerialNumber: LPDWORD, lpMaximumComponentLength: LPDWORD, lpFileSystemFlags: LPDWORD, lpFileSystemNameBuffer: LPWSTR, nFileSystemNameSize: DWORD } ],
  CancelSynchronousIo: [ int, { hThread: HANDLE } ],
  CancelIoEx: [ int, { hFile: HANDLE, lpOverlapped: LPOVERLAPPED } ],
  CancelIo: [ int, { hFile: HANDLE } ],
  SetFileBandwidthReservation: [ int, { hFile: HANDLE, nPeriodMilliseconds: DWORD, nBytesPerPeriod: DWORD, bDiscardable: BOOL, lpTransferSize: LPDWORD, lpNumOutstandingRequests: LPDWORD } ],
  GetFileBandwidthReservation: [ int, { hFile: HANDLE, lpPeriodMilliseconds: LPDWORD, lpBytesPerPeriod: LPDWORD, pDiscardable: LPBOOL, lpTransferSize: LPDWORD, lpNumOutstandingRequests: LPDWORD } ],
  ClearEventLogA: [ int, { hEventLog: HANDLE, lpBackupFileName: LPCSTR } ],
  ClearEventLogW: [ int, { hEventLog: HANDLE, lpBackupFileName: LPCWSTR } ],
  BackupEventLogA: [ int, { hEventLog: HANDLE, lpBackupFileName: LPCSTR } ],
  BackupEventLogW: [ int, { hEventLog: HANDLE, lpBackupFileName: LPCWSTR } ],
  CloseEventLog: [ int, { hEventLog: HANDLE } ],
  DeregisterEventSource: [ int, { hEventLog: HANDLE } ],
  NotifyChangeEventLog: [ int, { hEventLog: HANDLE, hEvent: HANDLE } ],
  GetNumberOfEventLogRecords: [ int, { hEventLog: HANDLE, NumberOfRecords: PDWORD } ],
  GetOldestEventLogRecord: [ int, { hEventLog: HANDLE, OldestRecord: PDWORD } ],
  OpenEventLogA: [ VoidT.Δ, { lpUNCServerName: LPCSTR, lpSourceName: LPCSTR } ],
  OpenEventLogW: [ VoidT.Δ, { lpUNCServerName: LPCWSTR, lpSourceName: LPCWSTR } ],
  RegisterEventSourceA: [ VoidT.Δ, { lpUNCServerName: LPCSTR, lpSourceName: LPCSTR } ],
  RegisterEventSourceW: [ VoidT.Δ, { lpUNCServerName: LPCWSTR, lpSourceName: LPCWSTR } ],
  OpenBackupEventLogA: [ VoidT.Δ, { lpUNCServerName: LPCSTR, lpFileName: LPCSTR } ],
  OpenBackupEventLogW: [ VoidT.Δ, { lpUNCServerName: LPCWSTR, lpFileName: LPCWSTR } ],
  ReadEventLogA: [ int, { hEventLog: HANDLE, dwReadFlags: DWORD, dwRecordOffset: DWORD, lpBuffer: LPVOID, nNumberOfBytesToRead: DWORD, pnBytesRead: ulong.Δ, pnMinNumberOfBytesNeeded: ulong.Δ } ],
  ReadEventLogW: [ int, { hEventLog: HANDLE, dwReadFlags: DWORD, dwRecordOffset: DWORD, lpBuffer: LPVOID, nNumberOfBytesToRead: DWORD, pnBytesRead: ulong.Δ, pnMinNumberOfBytesNeeded: ulong.Δ } ],
  ReportEventA: [ int, { hEventLog: HANDLE, wType: WORD, wCategory: WORD, dwEventID: DWORD, lpUserSid: PSID, wNumStrings: WORD, dwDataSize: DWORD, lpStrings: int8.Δ.Δ, lpRawData: LPVOID } ],
  ReportEventW: [ int, { hEventLog: HANDLE, wType: WORD, wCategory: WORD, dwEventID: DWORD, lpUserSid: PSID, wNumStrings: WORD, dwDataSize: DWORD, lpStrings: ushort.Δ.Δ, lpRawData: LPVOID } ],
  GetEventLogInformation: [ int, { hEventLog: HANDLE, dwInfoLevel: DWORD, lpBuffer: LPVOID, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD } ],
  DuplicateToken: [ int, { ExistingTokenHandle: HANDLE, ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL, DuplicateTokenHandle: PHANDLE } ],
  GetKernelObjectSecurity: [ int, { Handle: HANDLE, RequestedInformation: SECURITY_INFORMATION, pSecurityDescriptor: PSECURITY_DESCRIPTOR, nLength: DWORD, lpnLengthNeeded: LPDWORD } ],
  ImpersonateNamedPipeClient: [ int, { hNamedPipe: HANDLE } ],
  ImpersonateSelf: [ int, { ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL } ],
  RevertToSelf: [ int, {  } ],
  SetThreadToken: [ int, { Thread: PHANDLE, Token: HANDLE } ],
  AccessCheck: [ int, { pSecurityDescriptor: PSECURITY_DESCRIPTOR, ClientToken: HANDLE, DesiredAccess: DWORD, GenericMapping: PGENERIC_MAPPING, PrivilegeSet: PPRIVILEGE_SET, PrivilegeSetLength: LPDWORD, GrantedAccess: LPDWORD, AccessStatus: LPBOOL } ],
  AccessCheckByType: [ int, { pSecurityDescriptor: PSECURITY_DESCRIPTOR, PrincipalSelfSid: PSID, ClientToken: HANDLE, DesiredAccess: DWORD, ObjectTypeList: POBJECT_TYPE_LIST, ObjectTypeListLength: DWORD, GenericMapping: PGENERIC_MAPPING, PrivilegeSet: PPRIVILEGE_SET, PrivilegeSetLength: LPDWORD, GrantedAccess: LPDWORD, AccessStatus: LPBOOL } ],
  AccessCheckByTypeResultList: [ int, { pSecurityDescriptor: PSECURITY_DESCRIPTOR, PrincipalSelfSid: PSID, ClientToken: HANDLE, DesiredAccess: DWORD, ObjectTypeList: POBJECT_TYPE_LIST, ObjectTypeListLength: DWORD, GenericMapping: PGENERIC_MAPPING, PrivilegeSet: PPRIVILEGE_SET, PrivilegeSetLength: LPDWORD, GrantedAccessList: LPDWORD, AccessStatusList: LPDWORD } ],
  OpenProcessToken: [ int, { ProcessHandle: HANDLE, DesiredAccess: DWORD, TokenHandle: PHANDLE } ],
  OpenThreadToken: [ int, { ThreadHandle: HANDLE, DesiredAccess: DWORD, OpenAsSelf: BOOL, TokenHandle: PHANDLE } ],
  GetTokenInformation: [ int, { TokenHandle: HANDLE, TokenInformationClass: TOKEN_INFORMATION_CLASS, TokenInformation: LPVOID, TokenInformationLength: DWORD, ReturnLength: PDWORD } ],
  SetTokenInformation: [ int, { TokenHandle: HANDLE, TokenInformationClass: TOKEN_INFORMATION_CLASS, TokenInformation: LPVOID, TokenInformationLength: DWORD } ],
  AdjustTokenPrivileges: [ int, { TokenHandle: HANDLE, DisableAllPrivileges: BOOL, NewState: PTOKEN_PRIVILEGES, BufferLength: DWORD, PreviousState: PTOKEN_PRIVILEGES, ReturnLength: PDWORD } ],
  AdjustTokenGroups: [ int, { TokenHandle: HANDLE, ResetToDefault: BOOL, NewState: PTOKEN_GROUPS, BufferLength: DWORD, PreviousState: PTOKEN_GROUPS, ReturnLength: PDWORD } ],
  PrivilegeCheck: [ int, { ClientToken: HANDLE, RequiredPrivileges: PPRIVILEGE_SET, pfResult: LPBOOL } ],
  AccessCheckAndAuditAlarmA: [ int, { SubsystemName: LPCSTR, HandleId: LPVOID, ObjectTypeName: LPSTR, ObjectName: LPSTR, SecurityDescriptor: PSECURITY_DESCRIPTOR, DesiredAccess: DWORD, GenericMapping: PGENERIC_MAPPING, ObjectCreation: BOOL, GrantedAccess: LPDWORD, AccessStatus: LPBOOL, pfGenerateOnClose: LPBOOL } ],
  AccessCheckAndAuditAlarmW: [ int, { SubsystemName: LPCWSTR, HandleId: LPVOID, ObjectTypeName: LPWSTR, ObjectName: LPWSTR, SecurityDescriptor: PSECURITY_DESCRIPTOR, DesiredAccess: DWORD, GenericMapping: PGENERIC_MAPPING, ObjectCreation: BOOL, GrantedAccess: LPDWORD, AccessStatus: LPBOOL, pfGenerateOnClose: LPBOOL } ],
  AccessCheckByTypeAndAuditAlarmA: [ int, { SubsystemName: LPCSTR, HandleId: LPVOID, ObjectTypeName: LPCSTR, ObjectName: LPCSTR, SecurityDescriptor: PSECURITY_DESCRIPTOR, PrincipalSelfSid: PSID, DesiredAccess: DWORD, AuditType: AUDIT_EVENT_TYPE, Flags: DWORD, ObjectTypeList: POBJECT_TYPE_LIST, ObjectTypeListLength: DWORD, GenericMapping: PGENERIC_MAPPING, ObjectCreation: BOOL, GrantedAccess: LPDWORD, AccessStatus: LPBOOL, pfGenerateOnClose: LPBOOL } ],
  AccessCheckByTypeAndAuditAlarmW: [ int, { SubsystemName: LPCWSTR, HandleId: LPVOID, ObjectTypeName: LPCWSTR, ObjectName: LPCWSTR, SecurityDescriptor: PSECURITY_DESCRIPTOR, PrincipalSelfSid: PSID, DesiredAccess: DWORD, AuditType: AUDIT_EVENT_TYPE, Flags: DWORD, ObjectTypeList: POBJECT_TYPE_LIST, ObjectTypeListLength: DWORD, GenericMapping: PGENERIC_MAPPING, ObjectCreation: BOOL, GrantedAccess: LPDWORD, AccessStatus: LPBOOL, pfGenerateOnClose: LPBOOL } ],
  AccessCheckByTypeResultListAndAuditAlarmA: [ int, { SubsystemName: LPCSTR, HandleId: LPVOID, ObjectTypeName: LPCSTR, ObjectName: LPCSTR, SecurityDescriptor: PSECURITY_DESCRIPTOR, PrincipalSelfSid: PSID, DesiredAccess: DWORD, AuditType: AUDIT_EVENT_TYPE, Flags: DWORD, ObjectTypeList: POBJECT_TYPE_LIST, ObjectTypeListLength: DWORD, GenericMapping: PGENERIC_MAPPING, ObjectCreation: BOOL, GrantedAccess: LPDWORD, AccessStatusList: LPDWORD, pfGenerateOnClose: LPBOOL } ],
  AccessCheckByTypeResultListAndAuditAlarmW: [ int, { SubsystemName: LPCWSTR, HandleId: LPVOID, ObjectTypeName: LPCWSTR, ObjectName: LPCWSTR, SecurityDescriptor: PSECURITY_DESCRIPTOR, PrincipalSelfSid: PSID, DesiredAccess: DWORD, AuditType: AUDIT_EVENT_TYPE, Flags: DWORD, ObjectTypeList: POBJECT_TYPE_LIST, ObjectTypeListLength: DWORD, GenericMapping: PGENERIC_MAPPING, ObjectCreation: BOOL, GrantedAccess: LPDWORD, AccessStatusList: LPDWORD, pfGenerateOnClose: LPBOOL } ],
  AccessCheckByTypeResultListAndAuditAlarmByHandleA: [ int, { SubsystemName: LPCSTR, HandleId: LPVOID, ClientToken: HANDLE, ObjectTypeName: LPCSTR, ObjectName: LPCSTR, SecurityDescriptor: PSECURITY_DESCRIPTOR, PrincipalSelfSid: PSID, DesiredAccess: DWORD, AuditType: AUDIT_EVENT_TYPE, Flags: DWORD, ObjectTypeList: POBJECT_TYPE_LIST, ObjectTypeListLength: DWORD, GenericMapping: PGENERIC_MAPPING, ObjectCreation: BOOL, GrantedAccess: LPDWORD, AccessStatusList: LPDWORD, pfGenerateOnClose: LPBOOL } ],
  AccessCheckByTypeResultListAndAuditAlarmByHandleW: [ int, { SubsystemName: LPCWSTR, HandleId: LPVOID, ClientToken: HANDLE, ObjectTypeName: LPCWSTR, ObjectName: LPCWSTR, SecurityDescriptor: PSECURITY_DESCRIPTOR, PrincipalSelfSid: PSID, DesiredAccess: DWORD, AuditType: AUDIT_EVENT_TYPE, Flags: DWORD, ObjectTypeList: POBJECT_TYPE_LIST, ObjectTypeListLength: DWORD, GenericMapping: PGENERIC_MAPPING, ObjectCreation: BOOL, GrantedAccess: LPDWORD, AccessStatusList: LPDWORD, pfGenerateOnClose: LPBOOL } ],
  ObjectOpenAuditAlarmA: [ int, { SubsystemName: LPCSTR, HandleId: LPVOID, ObjectTypeName: LPSTR, ObjectName: LPSTR, pSecurityDescriptor: PSECURITY_DESCRIPTOR, ClientToken: HANDLE, DesiredAccess: DWORD, GrantedAccess: DWORD, Privileges: PPRIVILEGE_SET, ObjectCreation: BOOL, AccessGranted: BOOL, GenerateOnClose: LPBOOL } ],
  ObjectOpenAuditAlarmW: [ int, { SubsystemName: LPCWSTR, HandleId: LPVOID, ObjectTypeName: LPWSTR, ObjectName: LPWSTR, pSecurityDescriptor: PSECURITY_DESCRIPTOR, ClientToken: HANDLE, DesiredAccess: DWORD, GrantedAccess: DWORD, Privileges: PPRIVILEGE_SET, ObjectCreation: BOOL, AccessGranted: BOOL, GenerateOnClose: LPBOOL } ],
  ObjectPrivilegeAuditAlarmA: [ int, { SubsystemName: LPCSTR, HandleId: LPVOID, ClientToken: HANDLE, DesiredAccess: DWORD, Privileges: PPRIVILEGE_SET, AccessGranted: BOOL } ],
  ObjectPrivilegeAuditAlarmW: [ int, { SubsystemName: LPCWSTR, HandleId: LPVOID, ClientToken: HANDLE, DesiredAccess: DWORD, Privileges: PPRIVILEGE_SET, AccessGranted: BOOL } ],
  ObjectCloseAuditAlarmA: [ int, { SubsystemName: LPCSTR, HandleId: LPVOID, GenerateOnClose: BOOL } ],
  ObjectCloseAuditAlarmW: [ int, { SubsystemName: LPCWSTR, HandleId: LPVOID, GenerateOnClose: BOOL } ],
  ObjectDeleteAuditAlarmA: [ int, { SubsystemName: LPCSTR, HandleId: LPVOID, GenerateOnClose: BOOL } ],
  ObjectDeleteAuditAlarmW: [ int, { SubsystemName: LPCWSTR, HandleId: LPVOID, GenerateOnClose: BOOL } ],
  PrivilegedServiceAuditAlarmA: [ int, { SubsystemName: LPCSTR, ServiceName: LPCSTR, ClientToken: HANDLE, Privileges: PPRIVILEGE_SET, AccessGranted: BOOL } ],
  PrivilegedServiceAuditAlarmW: [ int, { SubsystemName: LPCWSTR, ServiceName: LPCWSTR, ClientToken: HANDLE, Privileges: PPRIVILEGE_SET, AccessGranted: BOOL } ],
  IsWellKnownSid: [ int, { pSid: PSID, WellKnownSidType: WELL_KNOWN_SID_TYPE } ],
  CreateWellKnownSid: [ int, { WellKnownSidType: WELL_KNOWN_SID_TYPE, DomainSid: PSID, pSid: PSID, cbSid: ulong.Δ } ],
  EqualDomainSid: [ int, { pSid1: PSID, pSid2: PSID, pfEqual: int.Δ } ],
  GetWindowsAccountDomainSid: [ int, { pSid: PSID, pDomainSid: PSID, cbDomainSid: ulong.Δ } ],
  IsValidSid: [ int, { pSid: PSID } ],
  EqualSid: [ int, { pSid1: PSID, pSid2: PSID } ],
  EqualPrefixSid: [ int, { pSid1: PSID, pSid2: PSID } ],
  GetSidLengthRequired: [ ulong, { nSubAuthorityCount: UCHAR } ],
  AllocateAndInitializeSid: [ int, { pIdentifierAuthority: PSID_IDENTIFIER_AUTHORITY, nSubAuthorityCount: BYTE, nSubAuthority0: DWORD, nSubAuthority1: DWORD, nSubAuthority2: DWORD, nSubAuthority3: DWORD, nSubAuthority4: DWORD, nSubAuthority5: DWORD, nSubAuthority6: DWORD, nSubAuthority7: DWORD, pSid: VoidT.Δ.Δ } ],
  FreeSid: [ VoidT.Δ, { pSid: PSID } ],
  InitializeSid: [ int, { Sid: PSID, pIdentifierAuthority: PSID_IDENTIFIER_AUTHORITY, nSubAuthorityCount: BYTE } ],
  GetSidIdentifierAuthority: [ VOIDPTR, { pSid: PSID } ],
  GetSidSubAuthority: [ ulong.Δ, { pSid: PSID, nSubAuthority: DWORD } ],
  GetSidSubAuthorityCount: [ uchar.Δ, { pSid: PSID } ],
  GetLengthSid: [ ulong, { pSid: PSID } ],
  CopySid: [ int, { nDestinationSidLength: DWORD, pDestinationSid: PSID, pSourceSid: PSID } ],
  AreAllAccessesGranted: [ int, { GrantedAccess: DWORD, DesiredAccess: DWORD } ],
  AreAnyAccessesGranted: [ int, { GrantedAccess: DWORD, DesiredAccess: DWORD } ],
  MapGenericMask: [ VoidT, { AccessMask: PDWORD, GenericMapping: PGENERIC_MAPPING } ],
  IsValidAcl: [ int, { pAcl: PACL } ],
  InitializeAcl: [ int, { pAcl: PACL, nAclLength: DWORD, dwAclRevision: DWORD } ],
  GetAclInformation: [ int, { pAcl: PACL, pAclInformation: LPVOID, nAclInformationLength: DWORD, dwAclInformationClass: ACL_INFORMATION_CLASS } ],
  SetAclInformation: [ int, { pAcl: PACL, pAclInformation: LPVOID, nAclInformationLength: DWORD, dwAclInformationClass: ACL_INFORMATION_CLASS } ],
  AddAce: [ int, { pAcl: PACL, dwAceRevision: DWORD, dwStartingAceIndex: DWORD, pAceList: LPVOID, nAceListLength: DWORD } ],
  DeleteAce: [ int, { pAcl: PACL, dwAceIndex: DWORD } ],
  GetAce: [ int, { pAcl: PACL, dwAceIndex: DWORD, pAce: VoidT.Δ.Δ } ],
  AddAccessAllowedAce: [ int, { pAcl: PACL, dwAceRevision: DWORD, AccessMask: DWORD, pSid: PSID } ],
  AddAccessAllowedAceEx: [ int, { pAcl: PACL, dwAceRevision: DWORD, AceFlags: DWORD, AccessMask: DWORD, pSid: PSID } ],
  AddMandatoryAce: [ int, { pAcl: PACL, dwAceRevision: DWORD, AceFlags: DWORD, MandatoryPolicy: DWORD, pLabelSid: PSID } ],
  AddConditionalAce: [ int, { pAcl: PACL, dwAceRevision: DWORD, AceFlags: DWORD, AceType: UCHAR, AccessMask: DWORD, pSid: PSID, ConditionStr: PWCHAR, ReturnLength: ulong.Δ } ],
  AddAccessDeniedAce: [ int, { pAcl: PACL, dwAceRevision: DWORD, AccessMask: DWORD, pSid: PSID } ],
  AddAccessDeniedAceEx: [ int, { pAcl: PACL, dwAceRevision: DWORD, AceFlags: DWORD, AccessMask: DWORD, pSid: PSID } ],
  AddAuditAccessAce: [ int, { pAcl: PACL, dwAceRevision: DWORD, dwAccessMask: DWORD, pSid: PSID, bAuditSuccess: BOOL, bAuditFailure: BOOL } ],
  AddAuditAccessAceEx: [ int, { pAcl: PACL, dwAceRevision: DWORD, AceFlags: DWORD, dwAccessMask: DWORD, pSid: PSID, bAuditSuccess: BOOL, bAuditFailure: BOOL } ],
  AddAccessAllowedObjectAce: [ int, { pAcl: PACL, dwAceRevision: DWORD, AceFlags: DWORD, AccessMask: DWORD, ObjectTypeGuid: uint.Δ, InheritedObjectTypeGuid: uint.Δ, pSid: PSID } ],
  AddAccessDeniedObjectAce: [ int, { pAcl: PACL, dwAceRevision: DWORD, AceFlags: DWORD, AccessMask: DWORD, ObjectTypeGuid: uint.Δ, InheritedObjectTypeGuid: uint.Δ, pSid: PSID } ],
  AddAuditAccessObjectAce: [ int, { pAcl: PACL, dwAceRevision: DWORD, AceFlags: DWORD, AccessMask: DWORD, ObjectTypeGuid: uint.Δ, InheritedObjectTypeGuid: uint.Δ, pSid: PSID, bAuditSuccess: BOOL, bAuditFailure: BOOL } ],
  FindFirstFreeAce: [ int, { pAcl: PACL, pAce: VoidT.Δ.Δ } ],
  InitializeSecurityDescriptor: [ int, { pSecurityDescriptor: PSECURITY_DESCRIPTOR, dwRevision: DWORD } ],
  IsValidSecurityDescriptor: [ int, { pSecurityDescriptor: PSECURITY_DESCRIPTOR } ],
  IsValidRelativeSecurityDescriptor: [ int, { pSecurityDescriptor: PSECURITY_DESCRIPTOR, SecurityDescriptorLength: ULONG, RequiredInformation: SECURITY_INFORMATION } ],
  GetSecurityDescriptorLength: [ ulong, { pSecurityDescriptor: PSECURITY_DESCRIPTOR } ],
  GetSecurityDescriptorControl: [ int, { pSecurityDescriptor: PSECURITY_DESCRIPTOR, pControl: PSECURITY_DESCRIPTOR_CONTROL, lpdwRevision: LPDWORD } ],
  SetSecurityDescriptorControl: [ int, { pSecurityDescriptor: PSECURITY_DESCRIPTOR, ControlBitsOfInterest: SECURITY_DESCRIPTOR_CONTROL, ControlBitsToSet: SECURITY_DESCRIPTOR_CONTROL } ],
  SetSecurityDescriptorDacl: [ int, { pSecurityDescriptor: PSECURITY_DESCRIPTOR, bDaclPresent: BOOL, pDacl: PACL, bDaclDefaulted: BOOL } ],
  GetSecurityDescriptorDacl: [ int, { pSecurityDescriptor: PSECURITY_DESCRIPTOR, lpbDaclPresent: LPBOOL, pDacl: VOIDPTR.Δ, lpbDaclDefaulted: LPBOOL } ],
  SetSecurityDescriptorSacl: [ int, { pSecurityDescriptor: PSECURITY_DESCRIPTOR, bSaclPresent: BOOL, pSacl: PACL, bSaclDefaulted: BOOL } ],
  GetSecurityDescriptorSacl: [ int, { pSecurityDescriptor: PSECURITY_DESCRIPTOR, lpbSaclPresent: LPBOOL, pSacl: VOIDPTR.Δ, lpbSaclDefaulted: LPBOOL } ],
  SetSecurityDescriptorOwner: [ int, { pSecurityDescriptor: PSECURITY_DESCRIPTOR, pOwner: PSID, bOwnerDefaulted: BOOL } ],
  GetSecurityDescriptorOwner: [ int, { pSecurityDescriptor: PSECURITY_DESCRIPTOR, pOwner: VoidT.Δ.Δ, lpbOwnerDefaulted: LPBOOL } ],
  SetSecurityDescriptorGroup: [ int, { pSecurityDescriptor: PSECURITY_DESCRIPTOR, pGroup: PSID, bGroupDefaulted: BOOL } ],
  GetSecurityDescriptorGroup: [ int, { pSecurityDescriptor: PSECURITY_DESCRIPTOR, pGroup: VoidT.Δ.Δ, lpbGroupDefaulted: LPBOOL } ],
  SetSecurityDescriptorRMControl: [ ulong, { SecurityDescriptor: PSECURITY_DESCRIPTOR, RMControl: PUCHAR } ],
  GetSecurityDescriptorRMControl: [ ulong, { SecurityDescriptor: PSECURITY_DESCRIPTOR, RMControl: PUCHAR } ],
  CreatePrivateObjectSecurity: [ int, { ParentDescriptor: PSECURITY_DESCRIPTOR, CreatorDescriptor: PSECURITY_DESCRIPTOR, NewDescriptor: VoidT.Δ.Δ, IsDirectoryObject: BOOL, Token: HANDLE, GenericMapping: PGENERIC_MAPPING } ],
  ConvertToAutoInheritPrivateObjectSecurity: [ int, { ParentDescriptor: PSECURITY_DESCRIPTOR, CurrentSecurityDescriptor: PSECURITY_DESCRIPTOR, NewSecurityDescriptor: VoidT.Δ.Δ, ObjectType: uint.Δ, IsDirectoryObject: BOOLEAN, GenericMapping: PGENERIC_MAPPING } ],
  CreatePrivateObjectSecurityEx: [ int, { ParentDescriptor: PSECURITY_DESCRIPTOR, CreatorDescriptor: PSECURITY_DESCRIPTOR, NewDescriptor: VoidT.Δ.Δ, ObjectType: uint.Δ, IsContainerObject: BOOL, AutoInheritFlags: ULONG, Token: HANDLE, GenericMapping: PGENERIC_MAPPING } ],
  CreatePrivateObjectSecurityWithMultipleInheritance: [ int, { ParentDescriptor: PSECURITY_DESCRIPTOR, CreatorDescriptor: PSECURITY_DESCRIPTOR, NewDescriptor: VoidT.Δ.Δ, ObjectTypes: uint.Δ.Δ, GuidCount: ULONG, IsContainerObject: BOOL, AutoInheritFlags: ULONG, Token: HANDLE, GenericMapping: PGENERIC_MAPPING } ],
  SetPrivateObjectSecurity: [ int, { SecurityInformation: SECURITY_INFORMATION, ModificationDescriptor: PSECURITY_DESCRIPTOR, ObjectsSecurityDescriptor: VoidT.Δ.Δ, GenericMapping: PGENERIC_MAPPING, Token: HANDLE } ],
  SetPrivateObjectSecurityEx: [ int, { SecurityInformation: SECURITY_INFORMATION, ModificationDescriptor: PSECURITY_DESCRIPTOR, ObjectsSecurityDescriptor: VoidT.Δ.Δ, AutoInheritFlags: ULONG, GenericMapping: PGENERIC_MAPPING, Token: HANDLE } ],
  GetPrivateObjectSecurity: [ int, { ObjectDescriptor: PSECURITY_DESCRIPTOR, SecurityInformation: SECURITY_INFORMATION, ResultantDescriptor: PSECURITY_DESCRIPTOR, DescriptorLength: DWORD, ReturnLength: PDWORD } ],
  DestroyPrivateObjectSecurity: [ int, { ObjectDescriptor: VoidT.Δ.Δ } ],
  MakeSelfRelativeSD: [ int, { pAbsoluteSecurityDescriptor: PSECURITY_DESCRIPTOR, pSelfRelativeSecurityDescriptor: PSECURITY_DESCRIPTOR, lpdwBufferLength: LPDWORD } ],
  MakeAbsoluteSD: [ int, { pSelfRelativeSecurityDescriptor: PSECURITY_DESCRIPTOR, pAbsoluteSecurityDescriptor: PSECURITY_DESCRIPTOR, lpdwAbsoluteSecurityDescriptorSize: LPDWORD, pDacl: PACL, lpdwDaclSize: LPDWORD, pSacl: PACL, lpdwSaclSize: LPDWORD, pOwner: PSID, lpdwOwnerSize: LPDWORD, pPrimaryGroup: PSID, lpdwPrimaryGroupSize: LPDWORD } ],
  MakeAbsoluteSD2: [ int, { pSelfRelativeSecurityDescriptor: PSECURITY_DESCRIPTOR, lpdwBufferSize: LPDWORD } ],
  QuerySecurityAccessMask: [ VoidT, { SecurityInformation: SECURITY_INFORMATION, DesiredAccess: LPDWORD } ],
  SetSecurityAccessMask: [ VoidT, { SecurityInformation: SECURITY_INFORMATION, DesiredAccess: LPDWORD } ],
  SetFileSecurityA: [ int, { lpFileName: LPCSTR, SecurityInformation: SECURITY_INFORMATION, pSecurityDescriptor: PSECURITY_DESCRIPTOR } ],
  SetFileSecurityW: [ int, { lpFileName: LPCWSTR, SecurityInformation: SECURITY_INFORMATION, pSecurityDescriptor: PSECURITY_DESCRIPTOR } ],
  GetFileSecurityA: [ int, { lpFileName: LPCSTR, RequestedInformation: SECURITY_INFORMATION, pSecurityDescriptor: PSECURITY_DESCRIPTOR, nLength: DWORD, lpnLengthNeeded: LPDWORD } ],
  GetFileSecurityW: [ int, { lpFileName: LPCWSTR, RequestedInformation: SECURITY_INFORMATION, pSecurityDescriptor: PSECURITY_DESCRIPTOR, nLength: DWORD, lpnLengthNeeded: LPDWORD } ],
  SetKernelObjectSecurity: [ int, { Handle: HANDLE, SecurityInformation: SECURITY_INFORMATION, SecurityDescriptor: PSECURITY_DESCRIPTOR } ],
  FindFirstChangeNotificationA: [ VoidT.Δ, { lpPathName: LPCSTR, bWatchSubtree: BOOL, dwNotifyFilter: DWORD } ],
  FindFirstChangeNotificationW: [ VoidT.Δ, { lpPathName: LPCWSTR, bWatchSubtree: BOOL, dwNotifyFilter: DWORD } ],
  FindNextChangeNotification: [ int, { hChangeHandle: HANDLE } ],
  FindCloseChangeNotification: [ int, { hChangeHandle: HANDLE } ],
  ReadDirectoryChangesW: [ int, { hDirectory: HANDLE, lpBuffer: LPVOID, nBufferLength: DWORD, bWatchSubtree: BOOL, dwNotifyFilter: DWORD, lpBytesReturned: LPDWORD, lpOverlapped: LPOVERLAPPED, lpCompletionRoutine: LPOVERLAPPED_COMPLETION_ROUTINE } ],
  VirtualLock: [ int, { lpAddress: LPVOID, dwSize: SIZE_T } ],
  VirtualUnlock: [ int, { lpAddress: LPVOID, dwSize: SIZE_T } ],
  MapViewOfFileEx: [ VoidT.Δ, { hFileMappingObject: HANDLE, dwDesiredAccess: DWORD, dwFileOffsetHigh: DWORD, dwFileOffsetLow: DWORD, dwNumberOfBytesToMap: SIZE_T, lpBaseAddress: LPVOID } ],
  MapViewOfFileExNuma: [ VoidT.Δ, { hFileMappingObject: HANDLE, dwDesiredAccess: DWORD, dwFileOffsetHigh: DWORD, dwFileOffsetLow: DWORD, dwNumberOfBytesToMap: SIZE_T, lpBaseAddress: LPVOID, nndPreferred: DWORD } ],
  SetPriorityClass: [ int, { hProcess: HANDLE, dwPriorityClass: DWORD } ],
  GetPriorityClass: [ ulong, { hProcess: HANDLE } ],
  IsBadReadPtr: [ int, { lp: VoidT.Δ, ucb: UINT_PTR } ],
  IsBadWritePtr: [ int, { lp: LPVOID, ucb: UINT_PTR } ],
  IsBadHugeReadPtr: [ int, { lp: VoidT.Δ, ucb: UINT_PTR } ],
  IsBadHugeWritePtr: [ int, { lp: LPVOID, ucb: UINT_PTR } ],
  IsBadCodePtr: [ int, { lpfn: FARPROC } ],
  IsBadStringPtrA: [ int, { lpsz: LPCSTR, ucchMax: UINT_PTR } ],
  IsBadStringPtrW: [ int, { lpsz: LPCWSTR, ucchMax: UINT_PTR } ],
  LookupAccountSidA: [ int, { lpSystemName: LPCSTR, Sid: PSID, Name: LPSTR, cchName: LPDWORD, ReferencedDomainName: LPSTR, cchReferencedDomainName: LPDWORD, peUse: PSID_NAME_USE } ],
  LookupAccountSidW: [ int, { lpSystemName: LPCWSTR, Sid: PSID, Name: LPWSTR, cchName: LPDWORD, ReferencedDomainName: LPWSTR, cchReferencedDomainName: LPDWORD, peUse: PSID_NAME_USE } ],
  LookupAccountSidLocalA: [ int, { Sid: PSID, Name: LPSTR, cchName: LPDWORD, ReferencedDomainName: LPSTR, cchReferencedDomainName: LPDWORD, peUse: PSID_NAME_USE } ],
  LookupAccountSidLocalW: [ int, { Sid: PSID, Name: LPWSTR, cchName: LPDWORD, ReferencedDomainName: LPWSTR, cchReferencedDomainName: LPDWORD, peUse: PSID_NAME_USE } ],
  LookupAccountNameA: [ int, { lpSystemName: LPCSTR, lpAccountName: LPCSTR, Sid: PSID, cbSid: LPDWORD, ReferencedDomainName: LPSTR, cchReferencedDomainName: LPDWORD, peUse: PSID_NAME_USE } ],
  LookupAccountNameW: [ int, { lpSystemName: LPCWSTR, lpAccountName: LPCWSTR, Sid: PSID, cbSid: LPDWORD, ReferencedDomainName: LPWSTR, cchReferencedDomainName: LPDWORD, peUse: PSID_NAME_USE } ],
  LookupAccountNameLocalA: [ int, { lpAccountName: LPCSTR, Sid: PSID, cbSid: LPDWORD, ReferencedDomainName: LPSTR, cchReferencedDomainName: LPDWORD, peUse: PSID_NAME_USE } ],
  LookupAccountNameLocalW: [ int, { lpAccountName: LPCWSTR, Sid: PSID, cbSid: LPDWORD, ReferencedDomainName: LPWSTR, cchReferencedDomainName: LPDWORD, peUse: PSID_NAME_USE } ],
  LookupPrivilegeValueA: [ int, { lpSystemName: LPCSTR, lpName: LPCSTR, lpLuid: PLUID } ],
  LookupPrivilegeValueW: [ int, { lpSystemName: LPCWSTR, lpName: LPCWSTR, lpLuid: PLUID } ],
  LookupPrivilegeNameA: [ int, { lpSystemName: LPCSTR, lpLuid: PLUID, lpName: LPSTR, cchName: LPDWORD } ],
  LookupPrivilegeNameW: [ int, { lpSystemName: LPCWSTR, lpLuid: PLUID, lpName: LPWSTR, cchName: LPDWORD } ],
  LookupPrivilegeDisplayNameA: [ int, { lpSystemName: LPCSTR, lpName: LPCSTR, lpDisplayName: LPSTR, cchDisplayName: LPDWORD, lpLanguageId: LPDWORD } ],
  LookupPrivilegeDisplayNameW: [ int, { lpSystemName: LPCWSTR, lpName: LPCWSTR, lpDisplayName: LPWSTR, cchDisplayName: LPDWORD, lpLanguageId: LPDWORD } ],
  AllocateLocallyUniqueId: [ int, { Luid: PLUID } ],
  BuildCommDCBA: [ int, { lpDef: LPCSTR, lpDCB: LPDCB } ],
  BuildCommDCBW: [ int, { lpDef: LPCWSTR, lpDCB: LPDCB } ],
  BuildCommDCBAndTimeoutsA: [ int, { lpDef: LPCSTR, lpDCB: LPDCB, lpCommTimeouts: LPCOMMTIMEOUTS } ],
  BuildCommDCBAndTimeoutsW: [ int, { lpDef: LPCWSTR, lpDCB: LPDCB, lpCommTimeouts: LPCOMMTIMEOUTS } ],
  CommConfigDialogA: [ int, { lpszName: LPCSTR, hWnd: HWND, lpCC: LPCOMMCONFIG } ],
  CommConfigDialogW: [ int, { lpszName: LPCWSTR, hWnd: HWND, lpCC: LPCOMMCONFIG } ],
  GetDefaultCommConfigA: [ int, { lpszName: LPCSTR, lpCC: LPCOMMCONFIG, lpdwSize: LPDWORD } ],
  GetDefaultCommConfigW: [ int, { lpszName: LPCWSTR, lpCC: LPCOMMCONFIG, lpdwSize: LPDWORD } ],
  SetDefaultCommConfigA: [ int, { lpszName: LPCSTR, lpCC: LPCOMMCONFIG, dwSize: DWORD } ],
  SetDefaultCommConfigW: [ int, { lpszName: LPCWSTR, lpCC: LPCOMMCONFIG, dwSize: DWORD } ],
  GetComputerNameA: [ int, { lpBuffer: LPSTR, nSize: LPDWORD } ],
  GetComputerNameW: [ int, { lpBuffer: LPWSTR, nSize: LPDWORD } ],
  SetComputerNameA: [ int, { lpComputerName: LPCSTR } ],
  SetComputerNameW: [ int, { lpComputerName: LPCWSTR } ],
  GetComputerNameExA: [ int, { NameType: COMPUTER_NAME_FORMAT, lpBuffer: LPSTR, nSize: LPDWORD } ],
  GetComputerNameExW: [ int, { NameType: COMPUTER_NAME_FORMAT, lpBuffer: LPWSTR, nSize: LPDWORD } ],
  SetComputerNameExA: [ int, { NameType: COMPUTER_NAME_FORMAT, lpBuffer: LPCSTR } ],
  SetComputerNameExW: [ int, { NameType: COMPUTER_NAME_FORMAT, lpBuffer: LPCWSTR } ],
  DnsHostnameToComputerNameA: [ int, { Hostname: LPCSTR, ComputerName: LPSTR, nSize: LPDWORD } ],
  DnsHostnameToComputerNameW: [ int, { Hostname: LPCWSTR, ComputerName: LPWSTR, nSize: LPDWORD } ],
  GetUserNameA: [ int, { lpBuffer: LPSTR, pcbBuffer: LPDWORD } ],
  GetUserNameW: [ int, { lpBuffer: LPWSTR, pcbBuffer: LPDWORD } ],
  LogonUserA: [ int, { lpszUsername: LPCSTR, lpszDomain: LPCSTR, lpszPassword: LPCSTR, dwLogonType: DWORD, dwLogonProvider: DWORD, phToken: PHANDLE } ],
  LogonUserW: [ int, { lpszUsername: LPCWSTR, lpszDomain: LPCWSTR, lpszPassword: LPCWSTR, dwLogonType: DWORD, dwLogonProvider: DWORD, phToken: PHANDLE } ],
  LogonUserExA: [ int, { lpszUsername: LPCSTR, lpszDomain: LPCSTR, lpszPassword: LPCSTR, dwLogonType: DWORD, dwLogonProvider: DWORD, phToken: PHANDLE, ppLogonSid: VoidT.Δ.Δ, ppProfileBuffer: VoidT.Δ.Δ, pdwProfileLength: LPDWORD, pQuotaLimits: PQUOTA_LIMITS } ],
  LogonUserExW: [ int, { lpszUsername: LPCWSTR, lpszDomain: LPCWSTR, lpszPassword: LPCWSTR, dwLogonType: DWORD, dwLogonProvider: DWORD, phToken: PHANDLE, ppLogonSid: VoidT.Δ.Δ, ppProfileBuffer: VoidT.Δ.Δ, pdwProfileLength: LPDWORD, pQuotaLimits: PQUOTA_LIMITS } ],
  ImpersonateLoggedOnUser: [ int, { hToken: HANDLE } ],
  CreateProcessAsUserA: [ int, { hToken: HANDLE, lpApplicationName: LPCSTR, lpCommandLine: LPSTR, lpProcessAttributes: LPSECURITY_ATTRIBUTES, lpThreadAttributes: LPSECURITY_ATTRIBUTES, bInheritHandles: BOOL, dwCreationFlags: DWORD, lpEnvironment: LPVOID, lpCurrentDirectory: LPCSTR, lpStartupInfo: LPSTARTUPINFOA, lpProcessInformation: LPPROCESS_INFORMATION } ],
  CreateProcessAsUserW: [ int, { hToken: HANDLE, lpApplicationName: LPCWSTR, lpCommandLine: LPWSTR, lpProcessAttributes: LPSECURITY_ATTRIBUTES, lpThreadAttributes: LPSECURITY_ATTRIBUTES, bInheritHandles: BOOL, dwCreationFlags: DWORD, lpEnvironment: LPVOID, lpCurrentDirectory: LPCWSTR, lpStartupInfo: LPSTARTUPINFOW, lpProcessInformation: LPPROCESS_INFORMATION } ],
  CreateProcessWithLogonW: [ int, { lpUsername: LPCWSTR, lpDomain: LPCWSTR, lpPassword: LPCWSTR, dwLogonFlags: DWORD, lpApplicationName: LPCWSTR, lpCommandLine: LPWSTR, dwCreationFlags: DWORD, lpEnvironment: LPVOID, lpCurrentDirectory: LPCWSTR, lpStartupInfo: LPSTARTUPINFOW, lpProcessInformation: LPPROCESS_INFORMATION } ],
  CreateProcessWithTokenW: [ int, { hToken: HANDLE, dwLogonFlags: DWORD, lpApplicationName: LPCWSTR, lpCommandLine: LPWSTR, dwCreationFlags: DWORD, lpEnvironment: LPVOID, lpCurrentDirectory: LPCWSTR, lpStartupInfo: LPSTARTUPINFOW, lpProcessInformation: LPPROCESS_INFORMATION } ],
  ImpersonateAnonymousToken: [ int, { ThreadHandle: HANDLE } ],
  DuplicateTokenEx: [ int, { hExistingToken: HANDLE, dwDesiredAccess: DWORD, lpTokenAttributes: LPSECURITY_ATTRIBUTES, ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL, TokenType: TOKEN_TYPE, phNewToken: PHANDLE } ],
  CreateRestrictedToken: [ int, { ExistingTokenHandle: HANDLE, Flags: DWORD, DisableSidCount: DWORD, SidsToDisable: PSID_AND_ATTRIBUTES, DeletePrivilegeCount: DWORD, PrivilegesToDelete: PLUID_AND_ATTRIBUTES, RestrictedSidCount: DWORD, SidsToRestrict: PSID_AND_ATTRIBUTES, NewTokenHandle: PHANDLE } ],
  IsTokenRestricted: [ int, { TokenHandle: HANDLE } ],
  IsTokenUntrusted: [ int, { TokenHandle: HANDLE } ],
  CheckTokenMembership: [ int, { TokenHandle: HANDLE, SidToCheck: PSID, IsMember: PBOOL } ],
  RegisterWaitForSingleObject: [ int, { phNewWaitObject: PHANDLE, hObject: HANDLE, Callback: WAITORTIMERCALLBACK, Context: PVOID, dwMilliseconds: ULONG, dwFlags: ULONG } ],
  RegisterWaitForSingleObjectEx: [ VoidT.Δ, { hObject: HANDLE, Callback: WAITORTIMERCALLBACK, Context: PVOID, dwMilliseconds: ULONG, dwFlags: ULONG } ],
  UnregisterWait: [ int, { WaitHandle: HANDLE } ],
  UnregisterWaitEx: [ int, { WaitHandle: HANDLE, CompletionEvent: HANDLE } ],
  QueueUserWorkItem: [ int, { Function: LPTHREAD_START_ROUTINE, Context: PVOID, Flags: ULONG } ],
  BindIoCompletionCallback: [ int, { FileHandle: HANDLE, Function: LPOVERLAPPED_COMPLETION_ROUTINE, Flags: ULONG } ],
  CreateTimerQueue: [ VoidT.Δ, {  } ],
  CreateTimerQueueTimer: [ int, { phNewTimer: PHANDLE, TimerQueue: HANDLE, Callback: WAITORTIMERCALLBACK, Parameter: PVOID, DueTime: DWORD, Period: DWORD, Flags: ULONG } ],
  ChangeTimerQueueTimer: [ int, { TimerQueue: HANDLE, Timer: HANDLE, DueTime: ULONG, Period: ULONG } ],
  DeleteTimerQueueTimer: [ int, { TimerQueue: HANDLE, Timer: HANDLE, CompletionEvent: HANDLE } ],
  DeleteTimerQueueEx: [ int, { TimerQueue: HANDLE, CompletionEvent: HANDLE } ],
  SetTimerQueueTimer: [ VoidT.Δ, { TimerQueue: HANDLE, Callback: WAITORTIMERCALLBACK, Parameter: PVOID, DueTime: DWORD, Period: DWORD, PreferIo: BOOL } ],
  CancelTimerQueueTimer: [ int, { TimerQueue: HANDLE, Timer: HANDLE } ],
  DeleteTimerQueue: [ int, { TimerQueue: HANDLE } ],
  CreateThreadpool: [ VOIDPTR, { reserved: PVOID } ],
  SetThreadpoolThreadMaximum: [ VoidT, { ptpp: PTP_POOL, cthrdMost: DWORD } ],
  SetThreadpoolThreadMinimum: [ int, { ptpp: PTP_POOL, cthrdMic: DWORD } ],
  SetThreadpoolStackInformation: [ int, { ptpp: PTP_POOL, ptpsi: PTP_POOL_STACK_INFORMATION } ],
  QueryThreadpoolStackInformation: [ int, { ptpp: PTP_POOL, ptpsi: PTP_POOL_STACK_INFORMATION } ],
  CloseThreadpool: [ VoidT, { ptpp: PTP_POOL } ],
  CreateThreadpoolCleanupGroup: [ VOIDPTR, {  } ],
  CloseThreadpoolCleanupGroupMembers: [ VoidT, { ptpcg: PTP_CLEANUP_GROUP, fCancelPendingCallbacks: BOOL, pvCleanupContext: PVOID } ],
  CloseThreadpoolCleanupGroup: [ VoidT, { ptpcg: PTP_CLEANUP_GROUP } ],
  InitializeThreadpoolEnvironment: [ VoidT, { pcbe: PTP_CALLBACK_ENVIRON } ],
  SetThreadpoolCallbackPool: [ VoidT, { pcbe: PTP_CALLBACK_ENVIRON, ptpp: PTP_POOL } ],
  SetThreadpoolCallbackCleanupGroup: [ VoidT, { pcbe: PTP_CALLBACK_ENVIRON, ptpcg: PTP_CLEANUP_GROUP, pfng: PTP_CLEANUP_GROUP_CANCEL_CALLBACK } ],
  SetThreadpoolCallbackRunsLong: [ VoidT, { pcbe: PTP_CALLBACK_ENVIRON } ],
  SetThreadpoolCallbackLibrary: [ VoidT, { pcbe: PTP_CALLBACK_ENVIRON, mod: PVOID } ],
  SetThreadpoolCallbackPriority: [ VoidT, { pcbe: PTP_CALLBACK_ENVIRON, Priority: TP_CALLBACK_PRIORITY } ],
  SetThreadpoolCallbackPersistent: [ VoidT, { pcbe: PTP_CALLBACK_ENVIRON } ],
  DestroyThreadpoolEnvironment: [ VoidT, { pcbe: PTP_CALLBACK_ENVIRON } ],
  SetEventWhenCallbackReturns: [ VoidT, { pci: PTP_CALLBACK_INSTANCE, evt: HANDLE } ],
  ReleaseSemaphoreWhenCallbackReturns: [ VoidT, { pci: PTP_CALLBACK_INSTANCE, sem: HANDLE, crel: DWORD } ],
  ReleaseMutexWhenCallbackReturns: [ VoidT, { pci: PTP_CALLBACK_INSTANCE, mut: HANDLE } ],
  LeaveCriticalSectionWhenCallbackReturns: [ VoidT, { pci: PTP_CALLBACK_INSTANCE, pcs: PCRITICAL_SECTION } ],
  FreeLibraryWhenCallbackReturns: [ VoidT, { pci: PTP_CALLBACK_INSTANCE, mod: HMODULE } ],
  CallbackMayRunLong: [ int, { pci: PTP_CALLBACK_INSTANCE } ],
  DisassociateCurrentThreadFromCallback: [ VoidT, { pci: PTP_CALLBACK_INSTANCE } ],
  TrySubmitThreadpoolCallback: [ int, { pfns: PTP_SIMPLE_CALLBACK, pv: PVOID, pcbe: PTP_CALLBACK_ENVIRON } ],
  CreateThreadpoolWork: [ VOIDPTR, { pfnwk: PTP_WORK_CALLBACK, pv: PVOID, pcbe: PTP_CALLBACK_ENVIRON } ],
  SubmitThreadpoolWork: [ VoidT, { pwk: PTP_WORK } ],
  WaitForThreadpoolWorkCallbacks: [ VoidT, { pwk: PTP_WORK, fCancelPendingCallbacks: BOOL } ],
  CloseThreadpoolWork: [ VoidT, { pwk: PTP_WORK } ],
  CreateThreadpoolTimer: [ VOIDPTR, { pfnti: PTP_TIMER_CALLBACK, pv: PVOID, pcbe: PTP_CALLBACK_ENVIRON } ],
  SetThreadpoolTimer: [ VoidT, { pti: PTP_TIMER, pftDueTime: PFILETIME, msPeriod: DWORD, msWindowLength: DWORD } ],
  IsThreadpoolTimerSet: [ int, { pti: PTP_TIMER } ],
  WaitForThreadpoolTimerCallbacks: [ VoidT, { pti: PTP_TIMER, fCancelPendingCallbacks: BOOL } ],
  CloseThreadpoolTimer: [ VoidT, { pti: PTP_TIMER } ],
  CreateThreadpoolWait: [ VOIDPTR, { pfnwa: PTP_WAIT_CALLBACK, pv: PVOID, pcbe: PTP_CALLBACK_ENVIRON } ],
  SetThreadpoolWait: [ VoidT, { pwa: PTP_WAIT, h: HANDLE, pftTimeout: PFILETIME } ],
  WaitForThreadpoolWaitCallbacks: [ VoidT, { pwa: PTP_WAIT, fCancelPendingCallbacks: BOOL } ],
  CloseThreadpoolWait: [ VoidT, { pwa: PTP_WAIT } ],
  CreateThreadpoolIo: [ VOIDPTR, { fl: HANDLE, pfnio: PTP_WIN32_IO_CALLBACK, pv: PVOID, pcbe: PTP_CALLBACK_ENVIRON } ],
  StartThreadpoolIo: [ VoidT, { pio: PTP_IO } ],
  CancelThreadpoolIo: [ VoidT, { pio: PTP_IO } ],
  WaitForThreadpoolIoCallbacks: [ VoidT, { pio: PTP_IO, fCancelPendingCallbacks: BOOL } ],
  CloseThreadpoolIo: [ VoidT, { pio: PTP_IO } ],
  CreatePrivateNamespaceA: [ VoidT.Δ, { lpPrivateNamespaceAttributes: LPSECURITY_ATTRIBUTES, lpBoundaryDescriptor: LPVOID, lpAliasPrefix: LPCSTR } ],
  CreatePrivateNamespaceW: [ VoidT.Δ, { lpPrivateNamespaceAttributes: LPSECURITY_ATTRIBUTES, lpBoundaryDescriptor: LPVOID, lpAliasPrefix: LPCWSTR } ],
  OpenPrivateNamespaceA: [ VoidT.Δ, { lpBoundaryDescriptor: LPVOID, lpAliasPrefix: LPCSTR } ],
  OpenPrivateNamespaceW: [ VoidT.Δ, { lpBoundaryDescriptor: LPVOID, lpAliasPrefix: LPCWSTR } ],
  ClosePrivateNamespace: [ uchar, { Handle: HANDLE, Flags: ULONG } ],
  CreateBoundaryDescriptorA: [ VoidT.Δ, { Name: LPCSTR, Flags: ULONG } ],
  CreateBoundaryDescriptorW: [ VoidT.Δ, { Name: LPCWSTR, Flags: ULONG } ],
  AddSIDToBoundaryDescriptor: [ int, { BoundaryDescriptor: VoidT.Δ.Δ, RequiredSid: PSID } ],
  AddIntegrityLabelToBoundaryDescriptor: [ int, { BoundaryDescriptor: VoidT.Δ.Δ, IntegrityLabel: PSID } ],
  DeleteBoundaryDescriptor: [ VoidT, { BoundaryDescriptor: HANDLE } ],
  GetCurrentHwProfileA: [ int, { lpHwProfileInfo: LPHW_PROFILE_INFOA } ],
  GetCurrentHwProfileW: [ int, { lpHwProfileInfo: LPHW_PROFILE_INFOW } ],
  QueryPerformanceCounter: [ int, { lpPerformanceCount: uint.Δ } ],
  QueryPerformanceFrequency: [ int, { lpFrequency: uint.Δ } ],
  GetVersionExA: [ int, { lpVersionInformation: LPOSVERSIONINFOA } ],
  GetVersionExW: [ int, { lpVersionInformation: LPOSVERSIONINFOW } ],
  VerifyVersionInfoA: [ int, { lpVersionInformation: LPOSVERSIONINFOEXA, dwTypeMask: DWORD, dwlConditionMask: DWORDLONG } ],
  VerifyVersionInfoW: [ int, { lpVersionInformation: LPOSVERSIONINFOEXW, dwTypeMask: DWORD, dwlConditionMask: DWORDLONG } ],
  GetProductInfo: [ int, { dwOSMajorVersion: DWORD, dwOSMinorVersion: DWORD, dwSpMajorVersion: DWORD, dwSpMinorVersion: DWORD, pdwReturnedProductType: PDWORD } ],
  GetSystemPowerStatus: [ int, { lpSystemPowerStatus: LPSYSTEM_POWER_STATUS } ],
  SetSystemPowerState: [ int, { fSuspend: BOOL, fForce: BOOL } ],
  AllocateUserPhysicalPages: [ int, { hProcess: HANDLE, NumberOfPages: PULONG_PTR, PageArray: PULONG_PTR } ],
  AllocateUserPhysicalPagesNuma: [ int, { hProcess: HANDLE, NumberOfPages: PULONG_PTR, PageArray: PULONG_PTR, nndPreferred: DWORD } ],
  FreeUserPhysicalPages: [ int, { hProcess: HANDLE, NumberOfPages: PULONG_PTR, PageArray: PULONG_PTR } ],
  MapUserPhysicalPages: [ int, { VirtualAddress: PVOID, NumberOfPages: ULONG_PTR, PageArray: PULONG_PTR } ],
  MapUserPhysicalPagesScatter: [ int, { VirtualAddresses: VoidT.Δ.Δ, NumberOfPages: ULONG_PTR, PageArray: PULONG_PTR } ],
  CreateJobObjectA: [ VoidT.Δ, { lpJobAttributes: LPSECURITY_ATTRIBUTES, lpName: LPCSTR } ],
  CreateJobObjectW: [ VoidT.Δ, { lpJobAttributes: LPSECURITY_ATTRIBUTES, lpName: LPCWSTR } ],
  OpenJobObjectA: [ VoidT.Δ, { dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCSTR } ],
  OpenJobObjectW: [ VoidT.Δ, { dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCWSTR } ],
  AssignProcessToJobObject: [ int, { hJob: HANDLE, hProcess: HANDLE } ],
  TerminateJobObject: [ int, { hJob: HANDLE, uExitCode: UINT } ],
  QueryInformationJobObject: [ int, { hJob: HANDLE, JobObjectInformationClass: JOBOBJECTINFOCLASS, lpJobObjectInformation: LPVOID, cbJobObjectInformationLength: DWORD, lpReturnLength: LPDWORD } ],
  SetInformationJobObject: [ int, { hJob: HANDLE, JobObjectInformationClass: JOBOBJECTINFOCLASS, lpJobObjectInformation: LPVOID, cbJobObjectInformationLength: DWORD } ],
  IsProcessInJob: [ int, { ProcessHandle: HANDLE, JobHandle: HANDLE, Result: PBOOL } ],
  CreateJobSet: [ int, { NumJob: ULONG, UserJobSet: PJOB_SET_ARRAY, Flags: ULONG } ],
  AddVectoredExceptionHandler: [ VoidT.Δ, { First: ULONG, Handler: PVECTORED_EXCEPTION_HANDLER } ],
  RemoveVectoredExceptionHandler: [ ulong, { Handle: PVOID } ],
  AddVectoredContinueHandler: [ VoidT.Δ, { First: ULONG, Handler: PVECTORED_EXCEPTION_HANDLER } ],
  RemoveVectoredContinueHandler: [ ulong, { Handle: PVOID } ],
  FindFirstVolumeA: [ VoidT.Δ, { lpszVolumeName: LPSTR, cchBufferLength: DWORD } ],
  FindFirstVolumeW: [ VoidT.Δ, { lpszVolumeName: LPWSTR, cchBufferLength: DWORD } ],
  FindNextVolumeA: [ int, { hFindVolume: HANDLE, lpszVolumeName: LPSTR, cchBufferLength: DWORD } ],
  FindNextVolumeW: [ int, { hFindVolume: HANDLE, lpszVolumeName: LPWSTR, cchBufferLength: DWORD } ],
  FindVolumeClose: [ int, { hFindVolume: HANDLE } ],
  FindFirstVolumeMountPointA: [ VoidT.Δ, { lpszRootPathName: LPCSTR, lpszVolumeMountPoint: LPSTR, cchBufferLength: DWORD } ],
  FindFirstVolumeMountPointW: [ VoidT.Δ, { lpszRootPathName: LPCWSTR, lpszVolumeMountPoint: LPWSTR, cchBufferLength: DWORD } ],
  FindNextVolumeMountPointA: [ int, { hFindVolumeMountPoint: HANDLE, lpszVolumeMountPoint: LPSTR, cchBufferLength: DWORD } ],
  FindNextVolumeMountPointW: [ int, { hFindVolumeMountPoint: HANDLE, lpszVolumeMountPoint: LPWSTR, cchBufferLength: DWORD } ],
  FindVolumeMountPointClose: [ int, { hFindVolumeMountPoint: HANDLE } ],
  SetVolumeMountPointA: [ int, { lpszVolumeMountPoint: LPCSTR, lpszVolumeName: LPCSTR } ],
  SetVolumeMountPointW: [ int, { lpszVolumeMountPoint: LPCWSTR, lpszVolumeName: LPCWSTR } ],
  DeleteVolumeMountPointA: [ int, { lpszVolumeMountPoint: LPCSTR } ],
  DeleteVolumeMountPointW: [ int, { lpszVolumeMountPoint: LPCWSTR } ],
  GetVolumeNameForVolumeMountPointA: [ int, { lpszVolumeMountPoint: LPCSTR, lpszVolumeName: LPSTR, cchBufferLength: DWORD } ],
  GetVolumeNameForVolumeMountPointW: [ int, { lpszVolumeMountPoint: LPCWSTR, lpszVolumeName: LPWSTR, cchBufferLength: DWORD } ],
  GetVolumePathNameA: [ int, { lpszFileName: LPCSTR, lpszVolumePathName: LPSTR, cchBufferLength: DWORD } ],
  GetVolumePathNameW: [ int, { lpszFileName: LPCWSTR, lpszVolumePathName: LPWSTR, cchBufferLength: DWORD } ],
  GetVolumePathNamesForVolumeNameA: [ int, { lpszVolumeName: LPCSTR, lpszVolumePathNames: LPCH, cchBufferLength: DWORD, lpcchReturnLength: PDWORD } ],
  GetVolumePathNamesForVolumeNameW: [ int, { lpszVolumeName: LPCWSTR, lpszVolumePathNames: LPWCH, cchBufferLength: DWORD, lpcchReturnLength: PDWORD } ],
  CreateActCtxA: [ VoidT.Δ, { pActCtx: PCACTCTXA } ],
  CreateActCtxW: [ VoidT.Δ, { pActCtx: PCACTCTXW } ],
  AddRefActCtx: [ VoidT, { hActCtx: HANDLE } ],
  ReleaseActCtx: [ VoidT, { hActCtx: HANDLE } ],
  ZombifyActCtx: [ int, { hActCtx: HANDLE } ],
  ActivateActCtx: [ int, { hActCtx: HANDLE, lpCookie: ulong.Δ } ],
  DeactivateActCtx: [ int, { dwFlags: DWORD, ulCookie: ULONG_PTR } ],
  GetCurrentActCtx: [ int, { lphActCtx: VoidT.Δ.Δ } ],
  FindActCtxSectionStringA: [ int, { dwFlags: DWORD, lpExtensionGuid: uint.Δ, ulSectionId: ULONG, lpStringToFind: LPCSTR, ReturnedData: PACTCTX_SECTION_KEYED_DATA } ],
  FindActCtxSectionStringW: [ int, { dwFlags: DWORD, lpExtensionGuid: uint.Δ, ulSectionId: ULONG, lpStringToFind: LPCWSTR, ReturnedData: PACTCTX_SECTION_KEYED_DATA } ],
  FindActCtxSectionGuid: [ int, { dwFlags: DWORD, lpExtensionGuid: uint.Δ, ulSectionId: ULONG, lpGuidToFind: uint.Δ, ReturnedData: PACTCTX_SECTION_KEYED_DATA } ],
  QueryActCtxW: [ int, { dwFlags: DWORD, hActCtx: HANDLE, pvSubInstance: PVOID, ulInfoClass: ULONG, pvBuffer: PVOID, cbBuffer: SIZE_T, pcbWrittenOrRequired: ulong.Δ } ],
  ProcessIdToSessionId: [ int, { dwProcessId: DWORD, pSessionId: ulong.Δ } ],
  WTSGetActiveConsoleSessionId: [ ulong, {  } ],
  IsWow64Process: [ int, { hProcess: HANDLE, Wow64Process: PBOOL } ],
  GetLogicalProcessorInformation: [ int, { Buffer: PSYSTEM_LOGICAL_PROCESSOR_INFORMATION, ReturnedLength: PDWORD } ],
  GetLogicalProcessorInformationEx: [ int, { RelationshipType: LOGICAL_PROCESSOR_RELATIONSHIP, Buffer: PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX, ReturnedLength: PDWORD } ],
  GetActiveProcessorGroupCount: [ ushort, {  } ],
  GetMaximumProcessorGroupCount: [ ushort, {  } ],
  GetActiveProcessorCount: [ ulong, { GroupNumber: WORD } ],
  GetMaximumProcessorCount: [ ulong, { GroupNumber: WORD } ],
  GetNumaHighestNodeNumber: [ int, { HighestNodeNumber: PULONG } ],
  GetNumaProcessorNode: [ int, { Processor: UCHAR, NodeNumber: PUCHAR } ],
  GetNumaNodeNumberFromHandle: [ int, { hFile: HANDLE, NodeNumber: PUSHORT } ],
  GetNumaProcessorNodeEx: [ int, { Processor: PPROCESSOR_NUMBER, NodeNumber: PUSHORT } ],
  GetNumaNodeProcessorMask: [ int, { Node: UCHAR, ProcessorMask: PULONGLONG } ],
  GetNumaNodeProcessorMaskEx: [ int, { Node: USHORT, ProcessorMask: PGROUP_AFFINITY } ],
  GetNumaAvailableMemoryNode: [ int, { Node: UCHAR, AvailableBytes: PULONGLONG } ],
  GetNumaAvailableMemoryNodeEx: [ int, { Node: USHORT, AvailableBytes: PULONGLONG } ],
  GetNumaProximityNode: [ int, { ProximityId: ULONG, NodeNumber: PUCHAR } ],
  GetNumaProximityNodeEx: [ int, { ProximityId: ULONG, NodeNumber: PUSHORT } ],
  RegisterApplicationRecoveryCallback: [ long, { pRecoveyCallback: APPLICATION_RECOVERY_CALLBACK, pvParameter: PVOID, dwPingInterval: DWORD, dwFlags: DWORD } ],
  UnregisterApplicationRecoveryCallback: [ long, {  } ],
  RegisterApplicationRestart: [ long, { pwzCommandline: PCWSTR, dwFlags: DWORD } ],
  UnregisterApplicationRestart: [ long, {  } ],
  GetApplicationRecoveryCallback: [ long, { hProcess: HANDLE, pRecoveryCallback: APPLICATION_RECOVERY_CALLBACK.Δ, ppvParameter: VoidT.Δ.Δ, pdwPingInterval: PDWORD, pdwFlags: PDWORD } ],
  GetApplicationRestartSettings: [ long, { hProcess: HANDLE, pwzCommandline: PWSTR, pcchSize: PDWORD, pdwFlags: PDWORD } ],
  ApplicationRecoveryInProgress: [ long, { pbCancelled: PBOOL } ],
  ApplicationRecoveryFinished: [ VoidT, { bSuccess: BOOL } ],
  SetFileInformationByHandle: [ int, { hFile: HANDLE, FileInformationClass: FILE_INFO_BY_HANDLE_CLASS, lpFileInformation: LPVOID, dwBufferSize: DWORD } ],
  GetFileInformationByHandleEx: [ int, { hFile: HANDLE, FileInformationClass: FILE_INFO_BY_HANDLE_CLASS, lpFileInformation: LPVOID, dwBufferSize: DWORD } ],
  OpenFileById: [ VoidT.Δ, { hVolumeHint: HANDLE, lpFileId: LPFILE_ID_DESCRIPTOR, dwDesiredAccess: DWORD, dwShareMode: DWORD, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, dwFlagsAndAttributes: DWORD } ],
  CreateSymbolicLinkA: [ uchar, { lpSymlinkFileName: LPCSTR, lpTargetFileName: LPCSTR, dwFlags: DWORD } ],
  CreateSymbolicLinkW: [ uchar, { lpSymlinkFileName: LPCWSTR, lpTargetFileName: LPCWSTR, dwFlags: DWORD } ],
  CreateSymbolicLinkTransactedA: [ uchar, { lpSymlinkFileName: LPCSTR, lpTargetFileName: LPCSTR, dwFlags: DWORD, hTransaction: HANDLE } ],
  CreateSymbolicLinkTransactedW: [ uchar, { lpSymlinkFileName: LPCWSTR, lpTargetFileName: LPCWSTR, dwFlags: DWORD, hTransaction: HANDLE } ],
  GetFinalPathNameByHandleA: [ ulong, { hFile: HANDLE, lpszFilePath: LPSTR, cchFilePath: DWORD, dwFlags: DWORD } ],
  GetFinalPathNameByHandleW: [ ulong, { hFile: HANDLE, lpszFilePath: LPWSTR, cchFilePath: DWORD, dwFlags: DWORD } ],
  QueryActCtxSettingsW: [ int, { dwFlags: DWORD, hActCtx: HANDLE, settingsNameSpace: PCWSTR, settingName: PCWSTR, pvBuffer: PWSTR, dwBuffer: SIZE_T, pdwWrittenOrRequired: ulong.Δ } ],
  ReplacePartitionUnit: [ int, { TargetPartition: PWSTR, SparePartition: PWSTR, Flags: ULONG } ],
  AddSecureMemoryCacheCallback: [ int, { pfnCallBack: PSECURE_MEMORY_CACHE_CALLBACK } ],
  RemoveSecureMemoryCacheCallback: [ int, { pfnCallBack: PSECURE_MEMORY_CACHE_CALLBACK } ],
  CopyExtendedContext: [ int, { Destination: PCONTEXT_EX, ContextFlags: DWORD, Source: PCONTEXT_EX } ],
  InitializeExtendedContext: [ int, { Context: PVOID, ContextFlags: DWORD, ContextEx: VOIDPTR.Δ } ],
  GetEnabledExtendedFeatures: [ ulonglong, { FeatureMask: DWORD64 } ],
  GetExtendedContextLength: [ int, { ContextFlags: DWORD, ContextLength: PDWORD } ],
  GetExtendedFeaturesMask: [ ulonglong, { ContextEx: PCONTEXT_EX } ],
  LocateExtendedFeature: [ VoidT.Δ, { ContextEx: PCONTEXT_EX, FeatureId: DWORD, Length: PDWORD } ],
  LocateLegacyContext: [ VOIDPTR, { ContextEx: PCONTEXT_EX, Length: PDWORD } ],
  SetExtendedFeaturesMask: [ VoidT, { ContextEx: PCONTEXT_EX, FeatureMask: DWORD64 } ],
  EnableThreadProfiling: [ ulong, { ThreadHandle: HANDLE, Flags: DWORD, HardwareCounters: DWORD64, PerformanceDataHandle: VoidT.Δ.Δ } ],
  DisableThreadProfiling: [ ulong, { PerformanceDataHandle: HANDLE } ],
  QueryThreadProfiling: [ ulong, { ThreadHandle: HANDLE, Enabled: PBOOLEAN } ],
  ReadThreadProfilingData: [ ulong, { PerformanceDataHandle: HANDLE, Flags: DWORD, PerformanceData: PPERFORMANCE_DATA } ],
