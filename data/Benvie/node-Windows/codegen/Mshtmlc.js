var ffi = require('ffi');

var
 VoidT = ffi.types.void,
 int8 = ffi.types.int8,
 uint8 = ffi.types.uint8,
 int16 = ffi.types.int16,
 uint16 = ffi.types.uint16,
 int32 = ffi.types.int32,
 uint32 = ffi.types.uint32,
 int64 = ffi.types.int64,
 uint64 = ffi.types.uint64,
 float = ffi.types.float,
 double = ffi.types.double,
 CString = ffi.types.CString,
 bool = ffi.types.bool,
 byte = ffi.types.byte,
 char = ffi.types.char,
 uchar = ffi.types.uchar,
 short = ffi.types.short,
 ushort = ffi.types.ushort,
 int = ffi.types.int,
 uint = ffi.types.uint,
 long = ffi.types.long,
 ulong = ffi.types.ulong,
 longlong = ffi.types.longlong,
 ulonglong = ffi.types.ulonglong,
 size_t = ffi.types.size_t,
 charΔ = ffi.types.charΔ,
 voidΔ = ffi.types.voidΔ,
 FFI_TYPEΔ = ffi.types.FFI_TYPEΔ,
 intΔ = ffi.types.intΔ,
 charΔΔ = ffi.types.charΔΔ;



data.enums = {};
data.callbacks = {};
data.structs = {};
data.functions = {};


function ENUM(name, def){
 return data.enums[name] = new Enum(name, def);
}

function CallbackT(ret, params){}

function STRUCT(name, def){
 return data.structs[name] = new Struct(name, def);
}

function FUNCTION(name, ret, params){
 return exports.functions[name] = new ffi.ForeignFunction(name, 'Mshtmlc', ret, params);
}


function DEF(name, ffiType, type){
  return ffiType;
}

var
 uintptr_t = uint.typedef('uintptr_t'),
 va_list = int8.Δ.typedef('va_list'),
 size_t = uint.typedef('size_t'),
 rsize_t = uint.typedef('rsize_t'),
 wchar_t = ushort.typedef('wchar_t'),
 wint_t = ushort.typedef('wint_t'),
 wctype_t = ushort.typedef('wctype_t'),
 errno_t = int.typedef('errno_t'),
 __time64_t = longlong.typedef('__time64_t'),
 ULONG = ulong.typedef('ULONG'),
 PULONG = ulong.Δ.typedef('PULONG'),
 USHORT = ushort.typedef('USHORT'),
 PUSHORT = ushort.Δ.typedef('PUSHORT'),
 UCHAR = uchar.typedef('UCHAR'),
 PUCHAR = uchar.Δ.typedef('PUCHAR'),
 DWORD = ulong.typedef('DWORD'),
 BOOL = int.typedef('BOOL'),
 BYTE = uchar.typedef('BYTE'),
 WORD = ushort.typedef('WORD'),
 FLOAT = float.typedef('FLOAT'),
 PFLOAT = float.Δ.typedef('PFLOAT'),
 PBOOL = int.Δ.typedef('PBOOL'),
 LPBOOL = int.Δ.typedef('LPBOOL'),
 PBYTE = uchar.Δ.typedef('PBYTE'),
 LPBYTE = uchar.Δ.typedef('LPBYTE'),
 LPINT = int.Δ.typedef('LPINT'),
 PWORD = ushort.Δ.typedef('PWORD'),
 LPWORD = ushort.Δ.typedef('LPWORD'),
 LPLONG = long.Δ.typedef('LPLONG'),
 PDWORD = ulong.Δ.typedef('PDWORD'),
 LPDWORD = ulong.Δ.typedef('LPDWORD'),
 LPVOID = VoidT.Δ.typedef('LPVOID'),
 LPCVOID = VoidT.Δ.typedef('LPCVOID'),
 INT = int.typedef('INT'),
 UINT = uint.typedef('UINT'),
 PUINT = uint.Δ.typedef('PUINT'),
 UINT16 = ushort.typedef('UINT16'),
 UINT32 = uint.typedef('UINT32'),
 UINT64 = ulonglong.typedef('UINT64'),
 INT_PTR = int.typedef('INT_PTR'),
 UINT_PTR = uint.typedef('UINT_PTR'),
 PUINT_PTR = uint.Δ.typedef('PUINT_PTR'),
 LONG_PTR = long.typedef('LONG_PTR'),
 ULONG_PTR = ulong.typedef('ULONG_PTR'),
 PULONG_PTR = ulong.Δ.typedef('PULONG_PTR'),
 HANDLE_PTR = ulong.typedef('HANDLE_PTR'),
 SIZE_T = ulong.typedef('SIZE_T'),
 PSIZE_T = ulong.Δ.typedef('PSIZE_T'),
 DWORD_PTR = ulong.typedef('DWORD_PTR'),
 PDWORD_PTR = ulong.Δ.typedef('PDWORD_PTR'),
 LONG64 = longlong.typedef('LONG64'),
 ULONG64 = ulonglong.typedef('ULONG64'),
 PULONG64 = ulonglong.Δ.typedef('PULONG64'),
 DWORD64 = ulonglong.typedef('DWORD64'),
 KAFFINITY = ulong.typedef('KAFFINITY'),
 PVOID = VoidT.Δ.typedef('PVOID'),
 PVOID64 = VoidT.Δ.typedef('PVOID64'),
 CHAR = int8.typedef('CHAR'),
 SHORT = short.typedef('SHORT'),
 LONG = long.typedef('LONG'),
 WCHAR = ushort.typedef('WCHAR'),
 PWCHAR = ushort.Δ.typedef('PWCHAR'),
 LPWCH = ushort.Δ.typedef('LPWCH'),
 LPWSTR = ushort.Δ.typedef('LPWSTR'),
 PWSTR = ushort.Δ.typedef('PWSTR'),
 PUWSTR = ushort.Δ.typedef('PUWSTR'),
 LPCWSTR = ushort.Δ.typedef('LPCWSTR'),
 PCWSTR = ushort.Δ.typedef('PCWSTR'),
 PCUWSTR = ushort.Δ.typedef('PCUWSTR'),
 PZZWSTR = ushort.Δ.typedef('PZZWSTR'),
 PCZZWSTR = ushort.Δ.typedef('PCZZWSTR'),
 PCNZWCH = ushort.Δ.typedef('PCNZWCH'),
 UCSCHAR = ulong.typedef('UCSCHAR'),
 LPCH = int8.Δ.typedef('LPCH'),
 LPCCH = int8.Δ.typedef('LPCCH'),
 LPSTR = int8.Δ.typedef('LPSTR'),
 PSTR = int8.Δ.typedef('PSTR'),
 LPCSTR = int8.Δ.typedef('LPCSTR'),
 PCSTR = int8.Δ.typedef('PCSTR'),
 PZZSTR = int8.Δ.typedef('PZZSTR'),
 PCZZSTR = int8.Δ.typedef('PCZZSTR'),
 PNZCH = int8.Δ.typedef('PNZCH'),
 PCNZCH = int8.Δ.typedef('PCNZCH'),
 TCHAR = int8.typedef('TCHAR'),
 PLONG = long.Δ.typedef('PLONG'),
 HANDLE = VoidT.Δ.typedef('HANDLE'),
 HRESULT = long.typedef('HRESULT'),
 CCHAR = int8.typedef('CCHAR'),
 LCID = ulong.typedef('LCID'),
 LANGID = ushort.typedef('LANGID'),
 LONGLONG = longlong.typedef('LONGLONG'),
 ULONGLONG = ulonglong.typedef('ULONGLONG'),
 PULONGLONG = ulonglong.Δ.typedef('PULONGLONG'),
 USN = longlong.typedef('USN'),
 DWORDLONG = ulonglong.typedef('DWORDLONG'),
 BOOLEAN = uchar.typedef('BOOLEAN'),
 PBOOLEAN = uchar.Δ.typedef('PBOOLEAN'),
 EXCEPTION_ROUTINE = new CallbackT(_EXCEPTION_DISPOSITION, [_EXCEPTION_RECORD.Δ, VoidT.Δ, _CONTEXT.Δ, VoidT.Δ]).typedef('EXCEPTION_ROUTINE'),
 KSPIN_LOCK = ulong.typedef('KSPIN_LOCK'),
 PACCESS_TOKEN = VoidT.Δ.typedef('PACCESS_TOKEN'),
 PSECURITY_DESCRIPTOR = VoidT.Δ.typedef('PSECURITY_DESCRIPTOR'),
 PSID = VoidT.Δ.typedef('PSID'),
 ACCESS_MASK = ulong.typedef('ACCESS_MASK'),
 PACCESS_MASK = ulong.Δ.typedef('PACCESS_MASK'),
 LUID_AND_ATTRIBUTES_ARRAY = new ArrayT(ConstantArray).typedef('LUID_AND_ATTRIBUTES_ARRAY'),
 SID_AND_ATTRIBUTES_ARRAY = new ArrayT(ConstantArray).typedef('SID_AND_ATTRIBUTES_ARRAY'),
 SID_HASH_ENTRY = ulong.typedef('SID_HASH_ENTRY'),
 SECURITY_DESCRIPTOR_CONTROL = ushort.typedef('SECURITY_DESCRIPTOR_CONTROL'),
 PSECURITY_DESCRIPTOR_CONTROL = ushort.Δ.typedef('PSECURITY_DESCRIPTOR_CONTROL'),
 ACCESS_REASON = ulong.typedef('ACCESS_REASON'),
 SECURITY_CONTEXT_TRACKING_MODE = uchar.typedef('SECURITY_CONTEXT_TRACKING_MODE'),
 SECURITY_INFORMATION = ulong.typedef('SECURITY_INFORMATION'),
 PSECURITY_INFORMATION = ulong.Δ.typedef('PSECURITY_INFORMATION'),
 EXECUTION_STATE = ulong.typedef('EXECUTION_STATE'),
 RTL_RUN_ONCE_INIT_FN = new CallbackT(ulong, [_RTL_RUN_ONCE.Δ, VoidT.Δ, VoidT.Δ.Δ]).typedef('RTL_RUN_ONCE_INIT_FN'),
 RTL_UMS_SCHEDULER_ENTRY_POINT = new CallbackT(VoidT, [_RTL_UMS_SCHEDULER_REASON, ulong, VoidT.Δ]).typedef('RTL_UMS_SCHEDULER_ENTRY_POINT'),
 SAVEPOINT_ID = ulong.typedef('SAVEPOINT_ID'),
 TP_VERSION = ulong.typedef('TP_VERSION'),
 TP_WAIT_RESULT = ulong.typedef('TP_WAIT_RESULT'),
 WPARAM = uint.typedef('WPARAM'),
 LPARAM = long.typedef('LPARAM'),
 LRESULT = long.typedef('LRESULT'),
 ATOM = ushort.typedef('ATOM'),
 HGLOBAL = VoidT.Δ.typedef('HGLOBAL'),
 HLOCAL = VoidT.Δ.typedef('HLOCAL'),
 HGDIOBJ = VoidT.Δ.typedef('HGDIOBJ'),
 HFILE = int.typedef('HFILE'),
 COLORREF = ulong.typedef('COLORREF'),
 PUMS_CONTEXT = VoidT.Δ.typedef('PUMS_CONTEXT'),
 PUMS_COMPLETION_LIST = VoidT.Δ.typedef('PUMS_COMPLETION_LIST'),
 LCSCSTYPE = long.typedef('LCSCSTYPE'),
 LCSGAMUTMATCH = long.typedef('LCSGAMUTMATCH'),
 FXPT2DOT30 = long.typedef('FXPT2DOT30'),
 COLOR16 = ushort.typedef('COLOR16'),
 HDWP = VoidT.Δ.typedef('HDWP'),
 MENUTEMPLATEA = VoidT.typedef('MENUTEMPLATEA'),
 MENUTEMPLATEW = VoidT.typedef('MENUTEMPLATEW'),
 LPMENUTEMPLATEA = VoidT.Δ.typedef('LPMENUTEMPLATEA'),
 HDEVNOTIFY = VoidT.Δ.typedef('HDEVNOTIFY'),
 HPOWERNOTIFY = VoidT.Δ.typedef('HPOWERNOTIFY'),
 LGRPID = ulong.typedef('LGRPID'),
 LCTYPE = ulong.typedef('LCTYPE'),
 CALTYPE = ulong.typedef('CALTYPE'),
 CALID = ulong.typedef('CALID'),
 NLS_FUNCTION = ulong.typedef('NLS_FUNCTION'),
 GEOID = long.typedef('GEOID'),
 GEOTYPE = ulong.typedef('GEOTYPE'),
 GEOCLASS = ulong.typedef('GEOCLASS'),
 REGSAM = ulong.typedef('REGSAM'),
 QUERYHANDLER = new CallbackT(ulong, [VoidT.Δ, val_context.Δ, ulong, VoidT.Δ, ulong.Δ, ulong]).typedef('QUERYHANDLER'),
 LSTATUS = long.typedef('LSTATUS'),
 MMVERSION = uint.typedef('MMVERSION'),
 MMRESULT = uint.typedef('MMRESULT'),
 LPUINT = uint.Δ.typedef('LPUINT'),
 DRVCALLBACK = new CallbackT(VoidT, [HDRVR__.Δ, uint, ulong, ulong, ulong]).typedef('DRVCALLBACK'),
 WAVECALLBACK = new CallbackT(VoidT, [HDRVR__.Δ, uint, ulong, ulong, ulong]).typedef('WAVECALLBACK'),
 MIDICALLBACK = new CallbackT(VoidT, [HDRVR__.Δ, uint, ulong, ulong, ulong]).typedef('MIDICALLBACK'),
 TIMECALLBACK = new CallbackT(VoidT, [uint, uint, ulong, ulong, ulong]).typedef('TIMECALLBACK'),
 FOURCC = ulong.typedef('FOURCC'),
 HPSTR = int8.Δ.typedef('HPSTR'),
 MMIOPROC = new CallbackT(long, [int8.Δ, uint, long, long]).typedef('MMIOPROC'),
 MCIERROR = ulong.typedef('MCIERROR'),
 MCIDEVICEID = uint.typedef('MCIDEVICEID'),
 I_RPC_HANDLE = VoidT.Δ.typedef('I_RPC_HANDLE'),
 RPC_STATUS = long.typedef('RPC_STATUS'),
 RPC_CSTR = uchar.Δ.typedef('RPC_CSTR'),
 RPC_WSTR = ushort.Δ.typedef('RPC_WSTR'),
 RPC_BINDING_HANDLE = VoidT.Δ.typedef('RPC_BINDING_HANDLE'),
 handle_t = VoidT.Δ.typedef('handle_t'),
 RPC_IF_HANDLE = VoidT.Δ.typedef('RPC_IF_HANDLE'),
 RPC_OBJECT_INQ_FN = new CallbackT(VoidT, [UUID.Δ, UUID.Δ, long.Δ]).typedef('RPC_OBJECT_INQ_FN'),
 RPC_IF_CALLBACK_FN = new CallbackT(long, [VoidT.Δ, VoidT.Δ]).typedef('RPC_IF_CALLBACK_FN'),
 RPC_AUTH_IDENTITY_HANDLE = VoidT.Δ.typedef('RPC_AUTH_IDENTITY_HANDLE'),
 RPC_AUTHZ_HANDLE = VoidT.Δ.typedef('RPC_AUTHZ_HANDLE'),
 RPC_FORWARD_FUNCTION = new CallbackT(long, [UUID.Δ, _RPC_VERSION.Δ, UUID.Δ, uchar.Δ, VoidT.Δ.Δ]).typedef('RPC_FORWARD_FUNCTION'),
 RPC_ADDRESS_CHANGE_FN = new CallbackT(VoidT, [VoidT.Δ]).typedef('RPC_ADDRESS_CHANGE_FN'),
 I_RPC_MUTEX = VoidT.Δ.typedef('I_RPC_MUTEX'),
 RPC_NS_HANDLE = VoidT.Δ.typedef('RPC_NS_HANDLE'),
 RPCNOTIFICATION_ROUTINE = new CallbackT(VoidT, [_RPC_ASYNC_STATE.Δ, VoidT.Δ, _RPC_ASYNC_EVENT]).typedef('RPCNOTIFICATION_ROUTINE'),
 FILEOP_FLAGS = ushort.typedef('FILEOP_FLAGS'),
 u_short = ushort.typedef('u_short'),
 u_int = uint.typedef('u_int'),
 u_long = ulong.typedef('u_long'),
 SOCKET = uint.typedef('SOCKET'),
 ALG_ID = uint.typedef('ALG_ID'),
 HCRYPTPROV = ulong.typedef('HCRYPTPROV'),
 HCRYPTKEY = ulong.typedef('HCRYPTKEY'),
 HCRYPTHASH = ulong.typedef('HCRYPTHASH'),
 NTSTATUS = long.typedef('NTSTATUS'),
 BCRYPT_HANDLE = VoidT.Δ.typedef('BCRYPT_HANDLE'),
 BCRYPT_ALG_HANDLE = VoidT.Δ.typedef('BCRYPT_ALG_HANDLE'),
 BCRYPT_KEY_HANDLE = VoidT.Δ.typedef('BCRYPT_KEY_HANDLE'),
 BCRYPT_HASH_HANDLE = VoidT.Δ.typedef('BCRYPT_HASH_HANDLE'),
 BCRYPT_SECRET_HANDLE = VoidT.Δ.typedef('BCRYPT_SECRET_HANDLE'),
 SECURITY_STATUS = long.typedef('SECURITY_STATUS'),
 NCRYPT_HANDLE = ulong.typedef('NCRYPT_HANDLE'),
 NCRYPT_PROV_HANDLE = ulong.typedef('NCRYPT_PROV_HANDLE'),
 NCRYPT_KEY_HANDLE = ulong.typedef('NCRYPT_KEY_HANDLE'),
 NCRYPT_SECRET_HANDLE = ulong.typedef('NCRYPT_SECRET_HANDLE'),
 HCRYPTPROV_OR_NCRYPT_KEY_HANDLE = ulong.typedef('HCRYPTPROV_OR_NCRYPT_KEY_HANDLE'),
 HCRYPTPROV_LEGACY = ulong.typedef('HCRYPTPROV_LEGACY'),
 HCRYPTOIDFUNCSET = VoidT.Δ.typedef('HCRYPTOIDFUNCSET'),
 HCRYPTOIDFUNCADDR = VoidT.Δ.typedef('HCRYPTOIDFUNCADDR'),
 HCRYPTMSG = VoidT.Δ.typedef('HCRYPTMSG'),
 HCERTSTORE = VoidT.Δ.typedef('HCERTSTORE'),
 HCERTSTOREPROV = VoidT.Δ.typedef('HCERTSTOREPROV'),
 HCRYPTDEFAULTCONTEXT = VoidT.Δ.typedef('HCRYPTDEFAULTCONTEXT'),
 HCRYPTASYNC = VoidT.Δ.typedef('HCRYPTASYNC'),
 HCERTCHAINENGINE = VoidT.Δ.typedef('HCERTCHAINENGINE'),
 HCERT_SERVER_OCSP_RESPONSE = VoidT.Δ.typedef('HCERT_SERVER_OCSP_RESPONSE'),
 byte = uchar.typedef('byte'),
 boolean = uchar.typedef('boolean'),
 NDR_CCONTEXT = VoidT.Δ.typedef('NDR_CCONTEXT'),
 error_status_t = ulong.typedef('error_status_t'),
 PFORMAT_STRING = uchar.Δ.typedef('PFORMAT_STRING'),
 RPC_SS_THREAD_HANDLE = VoidT.Δ.typedef('RPC_SS_THREAD_HANDLE'),
 RPC_CLIENT_ALLOC = new CallbackT(VoidT.Δ, [uint]).typedef('RPC_CLIENT_ALLOC'),
 RPC_CLIENT_FREE = new CallbackT(VoidT, [VoidT.Δ]).typedef('RPC_CLIENT_FREE'),
 OLECHAR = ushort.typedef('OLECHAR'),
 LPOLESTR = ushort.Δ.typedef('LPOLESTR'),
 LPCOLESTR = ushort.Δ.typedef('LPCOLESTR'),
 DOUBLE = double.typedef('DOUBLE'),
 SCODE = long.typedef('SCODE'),
 CLIPFORMAT = ushort.typedef('CLIPFORMAT'),
 HMETAFILEPICT = VoidT.Δ.typedef('HMETAFILEPICT'),
 DATE = double.typedef('DATE'),
 BSTR = ushort.Δ.typedef('BSTR'),
 VARIANT_BOOL = short.typedef('VARIANT_BOOL'),
 VARTYPE = ushort.typedef('VARTYPE'),
 PROPID = ulong.typedef('PROPID'),
 DEVICE_DATA_MANAGEMENT_SET_ACTION = ulong.typedef('DEVICE_DATA_MANAGEMENT_SET_ACTION'),
 LPCBYTE = uchar.Δ.typedef('LPCBYTE'),
 SCARDCONTEXT = ulong.typedef('SCARDCONTEXT'),
 LPSCARDCONTEXT = ulong.Δ.typedef('LPSCARDCONTEXT'),
 SCARDHANDLE = ulong.typedef('SCARDHANDLE'),
 LPSCARDHANDLE = ulong.Δ.typedef('LPSCARDHANDLE'),
 RPCOLEDATAREP = ulong.typedef('RPCOLEDATAREP'),
 HOLEMENU = VoidT.Δ.typedef('HOLEMENU'),
 DISPID = long.typedef('DISPID'),
 MEMBERID = long.typedef('MEMBERID'),
 HREFTYPE = ulong.typedef('HREFTYPE'),
 PROPVAR_PAD1 = ushort.typedef('PROPVAR_PAD1'),
 PROPVAR_PAD2 = ushort.typedef('PROPVAR_PAD2'),
 PROPVAR_PAD3 = ushort.typedef('PROPVAR_PAD3'),
 SC_LOCK = VoidT.Δ.typedef('SC_LOCK'),
 OLE_HANDLE = uint.typedef('OLE_HANDLE'),
 OLE_XPOS_HIMETRIC = long.typedef('OLE_XPOS_HIMETRIC'),
 OLE_YPOS_HIMETRIC = long.typedef('OLE_YPOS_HIMETRIC'),
 OLE_XSIZE_HIMETRIC = long.typedef('OLE_XSIZE_HIMETRIC'),
 OLE_YSIZE_HIMETRIC = long.typedef('OLE_YSIZE_HIMETRIC'),
 HHANDLE = uint.typedef('HHANDLE'),
 OLE_COLOR = ulong.typedef('OLE_COLOR');

var _EXCEPTION_DISPOSITION = new EnumT('_EXCEPTION_DISPOSITION', {
 ContinueExecution: 0,
 ContinueSearch: 1,
 NestedException: 2,
 CollidedUnwind: 3
});

var _SID_NAME_USE = new EnumT('_SID_NAME_USE', {
 TypeUser: 1,
 TypeGroup: 1,
 TypeDomain: 2,
 TypeAlias: 3,
 TypeWellKnownGroup: 4,
 TypeDeletedAccount: 5,
 TypeInvalid: 6,
 TypeUnknown: 7,
 TypeComputer: 8,
 TypeLabel: 9
});


var _ACL_INFORMATION_CLASS = new EnumT('_ACL_INFORMATION_CLASS', {
 RevisionInformation: 1,
 SizeInformation: 1
});

var _AUDIT_EVENT_TYPE = new EnumT('_AUDIT_EVENT_TYPE', {
 ObjectAccess: 0,
 DirectoryServiceAccess: 1
});

var _ACCESS_REASON_TYPE = new EnumT('_ACCESS_REASON_TYPE', {
 None: 0x00000000,
 AllowedAce: 0x00010000,
 DeniedAce: 0x00020000,
 AllowedParentAce: 0x00030000,
 DeniedParentAce: 0x00040000,
 MissingPrivilege: 0x00100000,
 FromPrivilege: 0x00200000,
 IntegrityLevel: 0x00300000,
 Ownership: 0x00400000,
 NullDacl: 0x00500000,
 EmptyDacl: 0x00600000,
 NoSd: 0x00700000,
 NoGrant: 0x00800000
});

var _SECURITY_IMPERSONATION_LEVEL = new EnumT('_SECURITY_IMPERSONATION_LEVEL', {
 Anonymous: 0,
 Identification: 1,
 Impersonation: 2,
 Delegation: 3
});

var _TOKEN_TYPE = new EnumT('_TOKEN_TYPE', {
 Primary: 1,
 Impersonation: 1
});

var _TOKEN_ELEVATION_TYPE = new EnumT('_TOKEN_ELEVATION_TYPE', {
 Default: 1,
 Full: 1,
 Limited: 2
});

var _TOKEN_INFORMATION_CLASS = new EnumT('_TOKEN_INFORMATION_CLASS', {
 User: 1,
 Groups: 1,
 Privileges: 2,
 Owner: 3,
 PrimaryGroup: 4,
 DefaultDacl: 5,
 Source: 6,
 Type: 7,
 ImpersonationLevel: 8,
 Statistics: 9,
 RestrictedSids: 10,
 SessionId: 11,
 GroupsAndPrivileges: 12,
 SessionReference: 13,
 SandBoxInert: 14,
 AuditPolicy: 15,
 Origin: 16,
 ElevationType: 17,
 LinkedToken: 18,
 Elevation: 19,
 HasRestrictions: 20,
 AccessInformation: 21,
 VirtualizationAllowed: 22,
 VirtualizationEnabled: 23,
 IntegrityLevel: 24,
 UiAccess: 25,
 MandatoryPolicy: 26,
 LogonSid: 27,
 MaxClass: 28
});

var _MANDATORY_LEVEL = new EnumT('_MANDATORY_LEVEL', {
 Untrusted: 0,
 Low: 1,
 Medium: 2,
 High: 3,
 System: 4,
 SecureProcess: 5,
 Count: 6
});

var _HARDWARE_COUNTER_TYPE = new EnumT('_HARDWARE_COUNTER_TYPE', {
 PmcCounter: 0,
 MaxType: 1
});

var _JOBOBJECTINFOCLASS = new EnumT('_JOBOBJECTINFOCLASS', {
 BasicAccountingInformation: 1,
 BasicLimitInformation: 1,
 BasicProcessIdList: 2,
 BasicUiRestrictions: 3,
 SecurityLimitInformation: 4,
 EndOfTimeInformation: 5,
 AssociateCompletionPortInformation: 6,
 BasicAndIoAccountingInformation: 7,
 ExtendedLimitInformation: 8,
 SetInformation: 9,
 GroupInformation: 10,
 MaxClass: 11
});

var _LOGICAL_PROCESSOR_RELATIONSHIP = new EnumT('_LOGICAL_PROCESSOR_RELATIONSHIP', {
 Core: 0,
 NumaNode: 1,
 Cache: 2,
 Package: 3,
 Group: 4,
 All: 0xffff
});

var _PROCESSOR_CACHE_TYPE = new EnumT('_PROCESSOR_CACHE_TYPE', {
 Unified: 0,
 Instruction: 1,
 Data: 2,
 Trace: 3
});

var _SYSTEM_POWER_STATE = new EnumT('_SYSTEM_POWER_STATE', {
 Unspecified: 0,
 Working: 1,
 Sleeping1: 2,
 Sleeping2: 3,
 Sleeping3: 4,
 Hibernate: 5,
 Shutdown: 6,
 Maximum: 7
});


var _DEVICE_POWER_STATE = new EnumT('_DEVICE_POWER_STATE', {
 Unspecified: 0,
 D0: 1,
 D1: 2,
 D2: 3,
 D3: 4,
 Maximum: 5
});

var _MONITOR_DISPLAY_STATE = new EnumT('_MONITOR_DISPLAY_STATE', {
 PowerOff: 0,
 PowerOn: 1,
 PowerDim: 2
});


var _POWER_REQUEST_TYPE = new EnumT('_POWER_REQUEST_TYPE', {
 DisplayRequired: 0,
 SystemRequired: 1,
 AwayModeRequired: 2
});




var IMAGE_AUX_SYMBOL_TYPE = new EnumT('IMAGE_AUX_SYMBOL_TYPE', {
 TokenDef: 1
});

var IMPORT_OBJECT_TYPE = new EnumT('IMPORT_OBJECT_TYPE', {
 Code: 0,
 Data: 1,
 Const: 2
});

var IMPORT_OBJECT_NAME_TYPE = new EnumT('IMPORT_OBJECT_NAME_TYPE', {
 Ordinal: 0,
 Name: 1,
 NoPrefix: 2,
 Undecorate: 3
});

var ReplacesCorHdrNumericDefines = new EnumT('ReplacesCorHdrNumericDefines', {
 ComimageFlagsIlonly: 0x00000001,
 ComimageFlags32bitrequired: 0x00000002,
 ComimageFlagsIlLibrary: 0x00000004,
 ComimageFlagsStrongnamesigned: 0x00000008,
 ComimageFlagsNativeEntrypoint: 0x00000010,
 ComimageFlagsTrackdebugdata: 0x00010000,
 VersionMajorV2: 2,
 VersionMajor: 7,
 VersionMinor: 0,
 DeletedNameLength: 8,
 VtablegapNameLength: 8,
 NativeTypeMaxCb: 1,
 IlmethodSectSmallMaxDatasize: 0xFF,
 ImageMihMethodrva: 0x01,
 ImageMihEhrva: 0x02,
 ImageMihBasicblock: 0x08,
 Vtable32bit: 0x01,
 Vtable64bit: 0x02,
 VtableFromUnmanaged: 0x04,
 VtableFromUnmanagedRetainAppdomain: 0x08,
 VtableCallMostDerived: 0x10,
 ImageEatjThunkSize: 32,
 MaxClassName: 1024,
 MaxPackageName: 1024
});

var UMS_THREAD_INFO_CLASS = new EnumT('UMS_THREAD_INFO_CLASS', {
 InvalidClass: 0,
 UserContext: 1,
 Priority: 2,
 Affinity: 3,
 Teb: 4,
 IsSuspended: 5,
 IsTerminated: 6,
 MaxClass: 7
});

var UMS_SCHEDULER_REASON = new EnumT('UMS_SCHEDULER_REASON', {
 Startup: 0,
 ThreadBlocked: 1,
 ThreadYield: 2
});

var _HEAP_INFORMATION_CLASS = new EnumT('_HEAP_INFORMATION_CLASS', {
 CompatibilityInformation: 0,
 EnableTerminationCorruption: 1
});

var _ACTIVATION_CONTEXT_INFO_CLASS = new EnumT('_ACTIVATION_CONTEXT_INFO_CLASS', {
 BasicInformation: 1,
 DetailedInformation: 2,
 AssemblyDetailedInformationContext: 3,
 FileInformationAssemblyOfAssemblyContext: 4,
 RunlevelInformationContext: 5,
 CompatibilityInformationContext: 6,
 ManifestResourceName: 7,
 MaxClass: 7,
 AssemblyDetailedInformationContxt: 3,
 FileInformationAssemblyOfAssemblyContxt: 4
});



var _CM_SERVICE_NODE_TYPE = new EnumT('_CM_SERVICE_NODE_TYPE', {
 DriverType: SERVICE_KERNEL_DRIVER,
 FileSystemType: SERVICE_FILE_SYSTEM_DRIVER,
 Win32OwnProcess: SERVICE_WIN32_OWN_PROCESS,
 Win32ShareProcess: SERVICE_WIN32_SHARE_PROCESS,
 AdapterType: SERVICE_ADAPTER,
 RecognizerType: SERVICE_RECOGNIZER_DRIVER
});

var _CM_SERVICE_LOAD_TYPE = new EnumT('_CM_SERVICE_LOAD_TYPE', {
 BootLoad: SERVICE_BOOT_START,
 SystemLoad: SERVICE_SYSTEM_START,
 AutoLoad: SERVICE_AUTO_START,
 DemandLoad: SERVICE_DEMAND_START,
 DisableLoad: SERVICE_DISABLED
});

var _CM_ERROR_CONTROL_TYPE = new EnumT('_CM_ERROR_CONTROL_TYPE', {
 IgnoreError: SERVICE_ERROR_IGNORE,
 NormalError: SERVICE_ERROR_NORMAL,
 SevereError: SERVICE_ERROR_SEVERE,
 CriticalError: SERVICE_ERROR_CRITICAL
});

var _TAPE_DRIVE_PROBLEM_TYPE = new EnumT('_TAPE_DRIVE_PROBLEM_TYPE', {
 None: 0,
 ReadWriteWarning: 1,
 ReadWriteError: 2,
 ReadWarning: 3,
 WriteWarning: 4,
 ReadError: 5,
 WriteError: 6,
 HardwareError: 7,
 UnsupportedMedia: 8,
 ScsiConnectionError: 9,
 TimetoClean: 10,
 CleanNow: 11,
 MediaLifeExpired: 12,
 SnappedTape: 13
});

var _TRANSACTION_OUTCOME = new EnumT('_TRANSACTION_OUTCOME', {
 Undetermined: 1,
 Committed: 1,
 Aborted: 2
});

var _TRANSACTION_STATE = new EnumT('_TRANSACTION_STATE', {
 Normal: 1,
 Indoubt: 1,
 CommittedNotify: 2
});

var _TRANSACTION_INFORMATION_CLASS = new EnumT('_TRANSACTION_INFORMATION_CLASS', {
 BasicInformation: 0,
 PropertiesInformation: 1,
 EnlistmentInformation: 2,
 SuperiorEnlistmentInformation: 3,
 BindInformation: 4,
 DtcPrivateInformation: 5
});

var _TRANSACTIONMANAGER_INFORMATION_CLASS = new EnumT('_TRANSACTIONMANAGER_INFORMATION_CLASS', {
 BasicInformation: 0,
 LogInformation: 1,
 LogPathInformation: 2,
 RecoveryInformation: 4,
 OnlineProbeInformation: 3,
 OldestInformation: 5
});

var _RESOURCEMANAGER_INFORMATION_CLASS = new EnumT('_RESOURCEMANAGER_INFORMATION_CLASS', {
 BasicInformation: 0,
 CompletionInformation: 1
});

var _ENLISTMENT_INFORMATION_CLASS = new EnumT('_ENLISTMENT_INFORMATION_CLASS', {
 BasicInformation: 0,
 RecoveryInformation: 1,
 CrmInformation: 2
});

var _KTMOBJECT_TYPE = new EnumT('_KTMOBJECT_TYPE', {
 Transaction: 0,
 TransactionManager: 1,
 ResourceManager: 2,
 Enlistment: 3,
 Invalid: 4
});

var _TP_CALLBACK_PRIORITY = new EnumT('_TP_CALLBACK_PRIORITY', {
 High: 0,
 Normal: 1,
 Low: 2,
 Invalid: 3
});

var _DEP_SYSTEM_POLICY_TYPE = new EnumT('_DEP_SYSTEM_POLICY_TYPE', {
 AlwaysOff: 0,
 AlwaysOn: 1,
 OptIn: 2,
 OptOut: 3,
 TotalCount: 4
});

var _MEMORY_RESOURCE_NOTIFICATION_TYPE = new EnumT('_MEMORY_RESOURCE_NOTIFICATION_TYPE', {
 LowNotification: 0,
 HighNotification: 1
});

var _PROC_THREAD_ATTRIBUTE_NUM = new EnumT('_PROC_THREAD_ATTRIBUTE_NUM', {
 ParentProcess: 0,
 ExtendedFlags: 1,
 HandleList: 2,
 GroupAffinity: 3,
 PreferredNode: 4,
 IdealProcessor: 5,
 UmsThread: 6,
 MitigationPolicy: 7,
 Max: 8
});

var _GET_FILEEX_INFO_LEVELS = new EnumT('_GET_FILEEX_INFO_LEVELS', {
 Standard: 0,
 MaxLevel: 1
});

var _FINDEX_INFO_LEVELS = new EnumT('_FINDEX_INFO_LEVELS', {
 Standard: 0,
 Basic: 1,
 MaxLevel: 2
});

var _FINDEX_SEARCH_OPS = new EnumT('_FINDEX_SEARCH_OPS', {
 NameMatch: 0,
 LimitToDirectories: 1,
 LimitToDevices: 2,
 MaxOp: 3
});

var _STREAM_INFO_LEVELS = new EnumT('_STREAM_INFO_LEVELS', {
 FindStandard: 0,
 FindMaxLevel: 1
});


var _COMPUTER_NAME_FORMAT = new EnumT('_COMPUTER_NAME_FORMAT', {
 NetBios: 0,
 DnsHostname: 1,
 DnsDomain: 2,
 DnsFullyQualified: 3,
 PhysicalNetBios: 4,
 PhysicalDnsHostname: 5,
 PhysicalDnsDomain: 6,
 PhysicalDnsFullyQualified: 7,
 Max: 8
});

var _FILE_INFO_BY_HANDLE_CLASS = new EnumT('_FILE_INFO_BY_HANDLE_CLASS', {
 BasicInfo: 0,
 StandardInfo: 1,
 NameInfo: 2,
 RenameInfo: 3,
 DispositionInfo: 4,
 AllocationInfo: 5,
 EndOfInfo: 6,
 StreamInfo: 7,
 CompressionInfo: 8,
 AttributeTagInfo: 9,
 IdBothDirectoryInfo: 10,
 IdBothDirectoryRestartInfo: 11,
 IoPriorityHintInfo: 12,
 RemoteProtocolInfo: 13,
 MaximumClass: 14
});

var _PRIORITY_HINT = new EnumT('_PRIORITY_HINT', {
 VeryLow: 0,
 Low: 1,
 Normal: 2,
 MaximumType: 3
});

var _FILE_ID_TYPE = new EnumT('_FILE_ID_TYPE', {
 Type: 0,
 ObjectType: 1,
 MaximumType: 2
});









var SYSNLS_FUNCTION = new EnumT('SYSNLS_FUNCTION', {
 CompareString: 0x0001
});

var SYSGEOTYPE = new EnumT('SYSGEOTYPE', {
 Nation: 0x0001,
 Latitude: 0x0002,
 Longitude: 0x0003,
 Iso2: 0x0004,
 Iso3: 0x0005,
 Rfc1766: 0x0006,
 Lcid: 0x0007,
 Friendlyname: 0x0008,
 Officialname: 0x0009,
 Timezones: 0x000A,
 Officiallanguages: 0x000B
});

var SYSGEOCLASS = new EnumT('SYSGEOCLASS', {
 Nation: 16,
 Region: 14
});

var _NORM_FORM = new EnumT('_NORM_FORM', {
 NormalizationOther: 0,
 NormalizationC: 0x1,
 NormalizationD: 0x2,
 NormalizationKc: 0x5,
 NormalizationKd: 0x6
});

var _RPC_HTTP_REDIRECTOR_STAGE = new EnumT('_RPC_HTTP_REDIRECTOR_STAGE', {
 Redirect: 1,
 Access1: 1,
 Session: 2,
 Access2: 3,
 Interface: 4
});

var RPC_ADDRESS_CHANGE_TYPE = new EnumT('RPC_ADDRESS_CHANGE_TYPE', {
 ProtocolNotLoaded: 1,
 ProtocolLoaded: 1,
 ProtocolChange: 2
});

var RpcProxyPerfCounters = new EnumT('RpcProxyPerfCounters', {
 CurrentUniqueUser: 1,
 BackEndConnectionAttempts: 1,
 BackEndConnectionFailed: 2,
 RequestsSecond: 3,
 IncomingConnections: 4,
 IncomingBandwidth: 5,
 OutgoingBandwidth: 6,
 AttemptedLbsDecisions: 7,
 FailedLbsDecisions: 8,
 AttemptedLbsMessages: 9,
 FailedLbsMessages: 10,
 LastCounter: 11
});

var _RPC_NOTIFICATION_TYPES = new EnumT('_RPC_NOTIFICATION_TYPES', {
 None: 0,
 Event: 1,
 Apc: 2,
 Ioc: 3,
 Hwnd: 4,
 Callback: 5
});

var _RPC_ASYNC_EVENT = new EnumT('_RPC_ASYNC_EVENT', {
 CallComplete: 0,
 SendComplete: 1,
 ReceiveComplete: 2,
 ClientDisconnect: 3,
 ClientCancel: 4
});

var tagExtendedErrorParamTypes = new EnumT('tagExtendedErrorParamTypes', {
 EeptAnsiString: 1,
 EeptUnicodeString: 1,
 EeptLongVal: 2,
 EeptShortVal: 3,
 EeptPointerVal: 4,
 EeptNone: 5,
 EeptBinary: 6
});

var tagRpcLocalAddressFormat = new EnumT('tagRpcLocalAddressFormat', {
 RlafInvalid: 0,
 RlafiPv4: 1,
 RlafiPv6: 2
});

var tagRpcCallType = new EnumT('tagRpcCallType', {
 RctInvalid: 0,
 RctNormal: 1,
 RctTraining: 2,
 RctGuaranteed: 3
});

var tagRpcCallClientLocality = new EnumT('tagRpcCallClientLocality', {
 RcclInvalid: 0,
 RcclLocal: 1,
 RcclRemote: 2,
 RcclUnknownLocality: 3
});

var _RPC_NOTIFICATIONS = new EnumT('_RPC_NOTIFICATIONS', {
 CallNone: 0,
 ClientDisconnect: 1,
 CallCancel: 2
});

var ASSOCCLASS = new EnumT('ASSOCCLASS', {
 ShellKey: 0,
 ProgidKey: 1,
 ProgidStr: 2,
 ClsidKey: 3,
 ClsidStr: 4,
 AppKey: 5,
 AppStr: 6,
 SystemStr: 7,
 Folder: 8,
 Star: 9
});


var SHSTOCKICONID = new EnumT('SHSTOCKICONID', {
 SiidDocnoassoc: 0,
 SiidDocassoc: 1,
 SiidApplication: 2,
 SiidFolder: 3,
 SiidFolderopen: 4,
 SiidDrive525: 5,
 SiidDrive35: 6,
 SiidDriveremove: 7,
 SiidDrivefixed: 8,
 SiidDrivenet: 9,
 SiidDrivenetdisabled: 10,
 SiidDrivecd: 11,
 SiidDriveram: 12,
 SiidWorld: 13,
 SiidServer: 15,
 SiidPrinter: 16,
 SiidMynetwork: 17,
 SiidFind: 22,
 SiidHelp: 23,
 SiidShare: 28,
 SiidLink: 29,
 SiidSlowfile: 30,
 SiidRecycler: 31,
 SiidRecyclerfull: 32,
 SiidMediacdaudio: 40,
 SiidLock: 47,
 SiidAutolist: 49,
 SiidPrinternet: 50,
 SiidServershare: 51,
 SiidPrinterfax: 52,
 SiidPrinterfaxnet: 53,
 SiidPrinterfile: 54,
 SiidStack: 55,
 SiidMediasvcd: 56,
 SiidStuffedfolder: 57,
 SiidDriveunknown: 58,
 SiidDrivedvd: 59,
 SiidMediadvd: 60,
 SiidMediadvdram: 61,
 SiidMediadvdrw: 62,
 SiidMediadvdr: 63,
 SiidMediadvdrom: 64,
 SiidMediacdaudioplus: 65,
 SiidMediacdrw: 66,
 SiidMediacdr: 67,
 SiidMediacdburn: 68,
 SiidMediablankcd: 69,
 SiidMediacdrom: 70,
 SiidAudiofiles: 71,
 SiidImagefiles: 72,
 SiidVideofiles: 73,
 SiidMixedfiles: 74,
 SiidFolderback: 75,
 SiidFolderfront: 76,
 SiidShield: 77,
 SiidWarning: 78,
 SiidInfo: 79,
 SiidError: 80,
 SiidKey: 81,
 SiidSoftware: 82,
 SiidRename: 83,
 SiidDelete: 84,
 SiidMediaaudiodvd: 85,
 SiidMediamoviedvd: 86,
 SiidMediaenhancedcd: 87,
 SiidMediaenhanceddvd: 88,
 SiidMediahddvd: 89,
 SiidMediabluray: 90,
 SiidMediavcd: 91,
 SiidMediadvdplusr: 92,
 SiidMediadvdplusrw: 93,
 SiidDesktoppc: 94,
 SiidMobilepc: 95,
 SiidUsers: 96,
 SiidMediasmartmedia: 97,
 SiidMediacompactflash: 98,
 SiidDevicecellphone: 99,
 SiidDevicecamera: 100,
 SiidDevicevideocamera: 101,
 SiidDeviceaudioplayer: 102,
 SiidNetworkconnect: 103,
 SiidInternet: 104,
 SiidZipfile: 105,
 SiidSettings: 106,
 SiidDrivehddvd: 132,
 SiidDrivebd: 133,
 SiidMediahddvdrom: 134,
 SiidMediahddvdr: 135,
 SiidMediahddvdram: 136,
 SiidMediabdrom: 137,
 SiidMediabdr: 138,
 SiidMediabdre: 139,
 SiidClustereddrive: 140,
 SiidMaxIcons: 174
});

var _USER_MARSHAL_CB_TYPE = new EnumT('_USER_MARSHAL_CB_TYPE', {
 BufferSize: 0,
 Marshall: 1,
 Unmarshall: 2,
 Free: 3
});

var _IDL_CS_CONVERT = new EnumT('_IDL_CS_CONVERT', {
 NoConvert: 0,
 InPlaceConvert: 1,
 NewBufferConvert: 2
});




var tagMEMCTX = new EnumT('tagMEMCTX', {
 Task: 1,
 Shared: 2,
 Macsystem: 3,
 Unknown: 3,
 Same: 4
});

var tagCLSCTX = new EnumT('tagCLSCTX', {
 InprocServer: 0x1,
 InprocHandler: 0x2,
 LocalServer: 0x4,
 InprocServer16: 0x8,
 RemoteServer: 0x10,
 InprocHandler16: 0x20,
 Reserved1: 0x40,
 Reserved2: 0x80,
 Reserved3: 0x100,
 Reserved4: 0x200,
 NoCodeDownload: 0x400,
 Reserved5: 0x800,
 NoCustomMarshal: 0x1000,
 EnableCodeDownload: 0x2000,
 NoFailureLog: 0x4000,
 DisableAaa: 0x8000,
 EnableAaa: 0x10000,
 FromDefaultContext: 0x20000,
 Activate32BitServer: 0x40000,
 Activate64BitServer: 0x80000,
 EnableCloaking: 0x100000,
 PsDll: 21
});

var tagMSHLFLAGS = new EnumT('tagMSHLFLAGS', {
 Normal: 0,
 Tablestrong: 1,
 Tableweak: 2,
 Noping: 4,
 Reserved1: 8,
 Reserved2: 16,
 Reserved3: 32,
 Reserved4: 64
});

var tagMSHCTX = new EnumT('tagMSHCTX', {
 Local: 0,
 Nosharedmem: 1,
 Differentmachine: 2,
 Inproc: 3,
 Crossctx: 4
});

var tagDVASPECT = new EnumT('tagDVASPECT', {
 Content: 1,
 Thumbnail: 2,
 Icon: 4,
 Docprint: 8
});

var tagSTGC = new EnumT('tagSTGC', {
 Default: 0,
 Overwrite: 1,
 Onlyifcurrent: 2,
 Dangerouslycommitmerelytodiskcache: 4,
 Consolidate: 8
});

var tagSTGMOVE = new EnumT('tagSTGMOVE', {
 Move: 0,
 Copy: 1,
 Shallowcopy: 2
});

var tagSTATFLAG = new EnumT('tagSTATFLAG', {
 Default: 0,
 Noname: 1,
 Noopen: 2
});

var VARENUM = new EnumT('VARENUM', {
 VtEmpty: 0,
 VtNull: 1,
 VtI2: 2,
 VtI4: 3,
 VtR4: 4,
 VtR8: 5,
 VtCy: 6,
 VtDate: 7,
 VtBstr: 8,
 VtDispatch: 9,
 VtError: 10,
 VtBool: 11,
 VtVariant: 12,
 VtUnknown: 13,
 VtDecimal: 14,
 VtI1: 16,
 VtUi1: 17,
 VtUi2: 18,
 VtUi4: 19,
 VtI8: 20,
 VtUi8: 21,
 VtInt: 22,
 VtUint: 23,
 VtVoid: 24,
 VtHresult: 25,
 VtPtr: 26,
 VtSafearray: 27,
 VtCarray: 28,
 VtUserdefined: 29,
 VtLpstr: 30,
 VtLpwstr: 31,
 VtRecord: 36,
 VtIntPtr: 37,
 VtUintPtr: 38,
 VtFiletime: 64,
 VtBlob: 65,
 VtStream: 66,
 VtStorage: 67,
 VtStreamedObject: 68,
 VtStoredObject: 69,
 VtBlobObject: 70,
 VtCf: 71,
 VtClsid: 72,
 VtVersionedStream: 73,
 VtBstrBlob: 0xfff,
 VtVector: 0x1000,
 VtArray: 0x2000,
 VtByref: 0x4000,
 VtReserved: 0x8000,
 VtIllegal: 0xffff,
 VtIllegalmasked: 0xfff,
 VtTypemask: 0xfff
});

var tagTYSPEC = new EnumT('tagTYSPEC', {
 Clsid: 0,
 Fileext: 1,
 Mimetype: 2,
 Filename: 3,
 Progid: 4,
 Packagename: 5,
 Objectid: 6
});

var _STORAGE_MEDIA_TYPE = new EnumT('_STORAGE_MEDIA_TYPE', {
 Dds4mm: 0x20,
 MiniQic: 1,
 Travan: 2,
 Qic: 3,
 Mp8mm: 4,
 Ame8mm: 5,
 Ait18mm: 6,
 Dlt: 7,
 Nctp: 8,
 Ibm3480: 9,
 Ibm3490e: 10,
 IbmMagstar3590: 11,
 IbmMagstarMp: 12,
 StkDataD3: 13,
 SonyDtf: 14,
 Dv6mm: 15,
 Dmi: 16,
 SonyD2: 17,
 CleanerCartridge: 18,
 CdRom: 19,
 CdR: 20,
 CdRw: 21,
 DvdRom: 22,
 DvdR: 23,
 DvdRw: 24,
 Mo3Rw: 25,
 Mo5Wo: 26,
 Mo5Rw: 27,
 Mo5Limdow: 28,
 Pc5Wo: 29,
 Pc5Rw: 30,
 Pd5Rw: 31,
 Abl5Wo: 32,
 PinnacleApex5Rw: 33,
 Sony12Wo: 34,
 Philips12Wo: 35,
 Hitachi12Wo: 36,
 Cygnet12Wo: 37,
 Kodak14Wo: 38,
 MoNfr525: 39,
 Nikon12Rw: 40,
 IomegaZip: 41,
 IomegaJaz: 42,
 SyquestEz135: 43,
 SyquestEzflyer: 44,
 SyquestSyjet: 45,
 AvatarF2: 46,
 Mp28mm: 47,
 DstS: 48,
 DstM: 49,
 DstL: 50,
 VxaTape1: 51,
 VxaTape2: 52,
 Stk9840: 53,
 LtoUltrium: 54,
 LtoAccelis: 55,
 DvdRam: 56,
 Ait8mm: 57,
 Adr1: 58,
 Adr2: 59,
 Stk9940: 60,
 Sait: 61,
 VxaTape: 62
});

var _STORAGE_BUS_TYPE = new EnumT('_STORAGE_BUS_TYPE', {
 Unknown: 0x00,
 Scsi: 1,
 Atapi: 2,
 Ata: 3,
 1394: 4,
 Ssa: 5,
 Fibre: 6,
 Usb: 7,
 Raid: 8,
 TypeiScsi: 9,
 Sas: 10,
 Sata: 11,
 Sd: 12,
 Mmc: 13,
 Virtual: 14,
 FileBackedVirtual: 15,
 Max: 16,
 MaxReserved: 0x7F
});

var _STORAGE_QUERY_TYPE = new EnumT('_STORAGE_QUERY_TYPE', {
 PropertyStandardQuery: 0,
 PropertyExistsQuery: 1,
 PropertyMaskQuery: 2,
 PropertyMaxDefined: 3
});

var _STORAGE_PROPERTY_ID = new EnumT('_STORAGE_PROPERTY_ID', {
 DeviceProperty: 0,
 AdapterProperty: 1,
 DeviceProperty: 2,
 DeviceUniqueProperty: 3,
 DeviceWriteCacheProperty: 4,
 MiniportProperty: 5,
 AccessAlignmentProperty: 6,
 DeviceSeekPenaltyProperty: 7,
 DeviceTrimProperty: 8,
 DeviceWriteAggregationProperty: 9
});

var _STORAGE_PORT_CODE_SET = new EnumT('_STORAGE_PORT_CODE_SET', {
 Reserved: 0,
 Storport: 1,
 ScsIport: 2
});

var _STORAGE_IDENTIFIER_CODE_SET = new EnumT('_STORAGE_IDENTIFIER_CODE_SET', {
 Reserved: 0,
 Binary: 1,
 Ascii: 2,
 Utf8: 3
});

var _STORAGE_IDENTIFIER_TYPE = new EnumT('_STORAGE_IDENTIFIER_TYPE', {
 VendorSpecific: 0,
 VendorId: 1,
 Eui64: 2,
 FcphName: 3,
 PortRelative: 4,
 TargetPortGroup: 5,
 LogicalUnitGroup: 6,
 Md5LogicalUnitIdentifier: 7,
 ScsiNameString: 8
});

var _STORAGE_ID_NAA_FORMAT = new EnumT('_STORAGE_ID_NAA_FORMAT', {
 IeeeExtended: 2,
 IeeeRegistered: 3,
 IeeeeRegisteredExtended: 5
});

var _STORAGE_ASSOCIATION_TYPE = new EnumT('_STORAGE_ASSOCIATION_TYPE', {
 IdDevice: 0,
 IdPort: 1,
 IdTarget: 2
});

var _WRITE_CACHE_TYPE = new EnumT('_WRITE_CACHE_TYPE', {
 Unknown: 0,
 None: 1,
 Back: 2,
 Through: 3
});

var _WRITE_CACHE_ENABLE = new EnumT('_WRITE_CACHE_ENABLE', {
 Unknown: 0,
 Disabled: 1,
 Enabled: 2
});

var _WRITE_CACHE_CHANGE = new EnumT('_WRITE_CACHE_CHANGE', {
 Unknown: 0,
 NotChangeable: 1,
 Changeable: 2
});

var _WRITE_THROUGH = new EnumT('_WRITE_THROUGH', {
 Unknown: 0,
 NotSupported: 1,
 Supported: 2
});

var _MEDIA_TYPE = new EnumT('_MEDIA_TYPE', {
 Unknown: 0,
 F51Pt2512: 1,
 F31Pt44512: 2,
 F32Pt88512: 3,
 F320Pt8512: 4,
 F3720512: 5,
 F5360512: 6,
 F5320512: 7,
 F53201024: 8,
 F5180512: 9,
 F5160512: 10,
 RemovableMedia: 11,
 FixedMedia: 12,
 F3120m512: 13,
 F3640512: 14,
 F5640512: 15,
 F5720512: 16,
 F31Pt2512: 17,
 F31Pt231024: 18,
 F51Pt231024: 19,
 F3128Mb512: 20,
 F3230Mb512: 21,
 F8256128: 22,
 F3200Mb512: 23,
 F3240m512: 24,
 F332m512: 25
});

var _PARTITION_STYLE = new EnumT('_PARTITION_STYLE', {
 Mbr: 0,
 Gpt: 1,
 Raw: 2
});

var _DETECTION_TYPE = new EnumT('_DETECTION_TYPE', {
 None: 0,
 Int13: 1,
 ExInt13: 2
});


var _BIN_TYPES = new EnumT('_BIN_TYPES', {
 RequestSize: 0,
 RequestLocation: 1
});

var _ELEMENT_TYPE = new EnumT('_ELEMENT_TYPE', {
 AllElements: 0,
 ChangerTransport: 1,
 ChangerSlot: 2,
 ChangerIePort: 3,
 ChangerDrive: 4,
 ChangerDoor: 5,
 ChangerKeypad: 6,
 ChangerMaxElement: 7
});

var _CHANGER_DEVICE_PROBLEM_TYPE = new EnumT('_CHANGER_DEVICE_PROBLEM_TYPE', {
 None: 0,
 Hardware: 1,
 ChmError: 2,
 DoorOpen: 3,
 CalibrationError: 4,
 TargetFailure: 5,
 ChmMoveError: 6,
 ChmZeroError: 7,
 CartridgeInsertError: 8,
 PositionError: 9,
 SensorError: 10,
 CartridgeEjectError: 11,
 GripperError: 12,
 DriveError: 13
});

var _SHRINK_VOLUME_REQUEST_TYPES = new EnumT('_SHRINK_VOLUME_REQUEST_TYPES', {
 Prepare: 1,
 Commit: 1,
 Abort: 2
});


var _PRINTER_OPTION_FLAGS = new EnumT('_PRINTER_OPTION_FLAGS', {
 NoCache: 0,
 Cache: 1,
 ClientChange: 2,
 NoClientData: 3
});





var tagREGCLS = new EnumT('tagREGCLS', {
 Singleuse: 0,
 Multipleuse: 1,
 MultiSeparate: 2,
 Suspended: 4,
 Surrogate: 8
});

var tagEXTCONN = new EnumT('tagEXTCONN', {
 Strong: 0x1,
 Weak: 0x2,
 Callable: 0x4
});

var tagBIND_FLAGS = new EnumT('tagBIND_FLAGS', {
 Maybotheruser: 1,
 Justtestexistence: 2
});

var tagMKSYS = new EnumT('tagMKSYS', {
 None: 0,
 Genericcomposite: 1,
 Filemoniker: 2,
 Antimoniker: 3,
 Itemmoniker: 4,
 Pointermoniker: 5,
 Classmoniker: 7,
 Objrefmoniker: 8,
 Sessionmoniker: 9,
 Luamoniker: 10
});

var tagMKREDUCE = new EnumT('tagMKREDUCE', {
 MkrreduceOne: 0,
 MkrreduceTouser: 1,
 MkrreduceThroughuser: 2,
 MkrreduceAll: 0
});

var tagSTGTY = new EnumT('tagSTGTY', {
 Storage: 1,
 Stream: 2,
 Lockbytes: 3,
 Property: 4
});

var tagSTREAM_SEEK = new EnumT('tagSTREAM_SEEK', {
 Set: 0,
 Cur: 1,
 End: 2
});

var tagLOCKTYPE = new EnumT('tagLOCKTYPE', {
 Write: 1,
 Exclusive: 2,
 Onlyonce: 4
});

var tagADVF = new EnumT('tagADVF', {
 Nodata: 1,
 Primefirst: 2,
 Onlyonce: 4,
 Dataonstop: 64,
 AdvfcacheNohandler: 8,
 AdvfcacheForcebuiltin: 16,
 AdvfcacheOnsave: 32
});

var tagTYMED = new EnumT('tagTYMED', {
 Hglobal: 1,
 File: 2,
 Istream: 4,
 Istorage: 8,
 Gdi: 16,
 Mfpict: 32,
 Enhmf: 64,
 Null: 0
});

var tagDATADIR = new EnumT('tagDATADIR', {
 Get: 1,
 Set: 2
});

var tagCALLTYPE = new EnumT('tagCALLTYPE', {
 Toplevel: 1,
 Nested: 2,
 Async: 3,
 ToplevelCallpending: 4,
 AsyncCallpending: 5
});

var tagSERVERCALL = new EnumT('tagSERVERCALL', {
 Ishandled: 0,
 Rejected: 1,
 Retrylater: 2
});

var tagPENDINGTYPE = new EnumT('tagPENDINGTYPE', {
 Toplevel: 1,
 Nested: 2
});

var tagPENDINGMSG = new EnumT('tagPENDINGMSG', {
 Cancelcall: 0,
 Waitnoprocess: 1,
 Waitdefprocess: 2
});

var tagEOLE_AUTHENTICATION_CAPABILITIES = new EnumT('tagEOLE_AUTHENTICATION_CAPABILITIES', {
 EoacNone: 0,
 EoacMutualAuth: 0x1,
 EoacStaticCloaking: 0x20,
 EoacDynamicCloaking: 0x40,
 EoacAnyAuthority: 0x80,
 EoacMakeFullsic: 0x100,
 EoacDefault: 0x800,
 EoacSecureRefs: 0x2,
 EoacAccessControl: 0x4,
 EoacAppid: 0x8,
 EoacDynamic: 0x10,
 EoacRequireFullsic: 0x200,
 EoacAutoImpersonate: 0x400,
 EoacNoCustomMarshal: 0x2000,
 EoacDisableAaa: 0x1000
});

var tagRPCOPT_PROPERTIES = new EnumT('tagRPCOPT_PROPERTIES', {
 CombndRpctimeout: 0x1,
 CombndServerLocality: 0x2
});

var tagRPCOPT_SERVER_LOCALITY_VALUES = new EnumT('tagRPCOPT_SERVER_LOCALITY_VALUES', {
 ProcessLocal: 0,
 MachineLocal: 1,
 Remote: 2
});

var tagGLOBALOPT_PROPERTIES = new EnumT('tagGLOBALOPT_PROPERTIES', {
 ComglbExceptionHandling: 1,
 ComglbAppid: 2,
 ComglbRpcThreadpoolSetting: 3
});

var tagGLOBALOPT_EH_VALUES = new EnumT('tagGLOBALOPT_EH_VALUES', {
 ComglbExceptionHandle: 0,
 ComglbExceptionDonotHandleFatal: 1,
 ComglbExceptionDonotHandle: 2,
 ComglbExceptionDonotHandleAny: 2
});

var tagGLOBALOPT_RPCTP_VALUES = new EnumT('tagGLOBALOPT_RPCTP_VALUES', {
 ComglbThreadpoolSettingDefaultPool: 0,
 ComglbThreadpoolSettingPrivatePool: 1
});

var tagDCOM_CALL_STATE = new EnumT('tagDCOM_CALL_STATE', {
 None: 0,
 Complete: 0x1,
 Canceled: 0x2
});

var tagApplicationType = new EnumT('tagApplicationType', {
 ServerApplication: 0,
 LibraryApplication: 1
});

var tagShutdownType = new EnumT('tagShutdownType', {
 IdleShutdown: 0,
 ForcedShutdown: 1
});

var _APTTYPEQUALIFIER = new EnumT('_APTTYPEQUALIFIER', {
 None: 0,
 ImplicitMta: 1,
 NaOnMta: 2,
 NaOnSta: 3,
 NaOnImplicitMta: 4,
 NaOnMainsta: 5
});

var _APTTYPE = new EnumT('_APTTYPE', {
 Current: 0,
 Sta: 0,
 Mta: 1,
 Na: 2,
 Mainsta: 3
});

var _THDTYPE = new EnumT('_THDTYPE', {
 Blockmessages: 0,
 Processmessages: 1
});

var tagCOINIT = new EnumT('tagCOINIT', {
 Apartmentthreaded: 0x2,
 Multithreaded: 0x0,
 DisableOle1dde: 0x4,
 SpeedOverMemory: 0x8
});

var tagCOMSD = new EnumT('tagCOMSD', {
 Launchpermissions: 0,
 Accesspermissions: 1,
 Launchrestrictions: 2,
 Accessrestrictions: 3
});

var tagSTDMSHLFLAGS = new EnumT('tagSTDMSHLFLAGS', {
 SmexfServer: 0x01,
 SmexfHandler: 0x02
});

var tagCOWAIT_FLAGS = new EnumT('tagCOWAIT_FLAGS', {
 Waitall: 1,
 Alertable: 2,
 Inputavailable: 4
});

var tagDISCARDCACHE = new EnumT('tagDISCARDCACHE', {
 Saveifdirty: 0,
 Nosave: 1
});

var tagOLEGETMONIKER = new EnumT('tagOLEGETMONIKER', {
 Onlyifthere: 1,
 Forceassign: 2,
 Unassign: 3,
 Tempforuser: 4
});

var tagOLEWHICHMK = new EnumT('tagOLEWHICHMK', {
 Container: 1,
 Objrel: 2,
 Objfull: 3
});

var tagUSERCLASSTYPE = new EnumT('tagUSERCLASSTYPE', {
 Full: 1,
 Short: 2,
 Appname: 3
});

var tagOLEMISC = new EnumT('tagOLEMISC', {
 Recomposeonresize: 0x1,
 Onlyiconic: 0x2,
 Insertnotreplace: 0x4,
 Static: 0x8,
 Cantlinkinside: 0x10,
 Canlinkbyole1: 0x20,
 Islinkobject: 0x40,
 Insideout: 0x80,
 Activatewhenvisible: 0x100,
 Renderingisdeviceindependent: 0x200,
 Invisibleatruntime: 0x400,
 Alwaysrun: 0x800,
 Actslikebutton: 0x1000,
 Actslikelabel: 0x2000,
 Nouiactivate: 0x4000,
 Alignable: 0x8000,
 Simpleframe: 0x10000,
 Setclientsitefirst: 0x20000,
 Imemode: 0x40000,
 Ignoreactivatewhenvisible: 0x80000,
 Wantstomenumerge: 0x100000,
 Supportsmultilevelundo: 0x200000
});

var tagOLECLOSE = new EnumT('tagOLECLOSE', {
 Saveifdirty: 0,
 Nosave: 1,
 Promptsave: 2
});

var tagOLERENDER = new EnumT('tagOLERENDER', {
 None: 0,
 Draw: 1,
 Format: 2,
 Asis: 3
});

var tagOLEUPDATE = new EnumT('tagOLEUPDATE', {
 Always: 1,
 Oncall: 3
});

var tagOLELINKBIND = new EnumT('tagOLELINKBIND', {
 Evenifclassdiff: 1
});

var tagBINDSPEED = new EnumT('tagBINDSPEED', {
 Indefinite: 1,
 Moderate: 2,
 Immediate: 3
});

var tagOLECONTF = new EnumT('tagOLECONTF', {
 Embeddings: 1,
 Links: 2,
 Others: 4,
 Onlyuser: 8,
 Onlyifrunning: 16
});

var tagOLEVERBATTRIB = new EnumT('tagOLEVERBATTRIB', {
 Neverdirties: 1,
 Oncontainermenu: 2
});

var tagSF_TYPE = new EnumT('tagSF_TYPE', {
 Error: 0,
 I1: 1,
 I2: 2,
 I4: 3,
 I8: 4,
 Bstr: 5,
 Unknown: 6,
 Dispatch: 7,
 Variant: 8,
 Record: 9,
 Haveiid: 10
});

var tagTYPEKIND = new EnumT('tagTYPEKIND', {
 TkindEnum: 0,
 TkindRecord: 1,
 TkindModule: 2,
 TkindInterface: 3,
 TkindDispatch: 4,
 TkindCoclass: 5,
 TkindAlias: 6,
 TkindUnion: 7,
 TkindMax: 8
});

var tagCALLCONV = new EnumT('tagCALLCONV', {
 CcFastcall: 0,
 CcCdecl: 1,
 CcMscpascal: 2,
 CcPascal: 3,
 CcMacpascal: 4,
 CcStdcall: 5,
 CcFpfastcall: 6,
 CcSyscall: 7,
 CcMpwcdecl: 8,
 CcMpwpascal: 9,
 CcMax: 10
});

var tagFUNCKIND = new EnumT('tagFUNCKIND', {
 Virtual: 0,
 Purevirtual: 1,
 Nonvirtual: 2,
 Static: 3,
 Dispatch: 4
});

var tagINVOKEKIND = new EnumT('tagINVOKEKIND', {
 Func: 1,
 Propertyget: 2,
 Propertyput: 4,
 Propertyputref: 8
});

var tagVARKIND = new EnumT('tagVARKIND', {
 Perinstance: 0,
 Static: 1,
 Const: 2,
 Dispatch: 3
});

var tagTYPEFLAGS = new EnumT('tagTYPEFLAGS', {
 Fappobject: 0x1,
 Fcancreate: 0x2,
 Flicensed: 0x4,
 Fpredeclid: 0x8,
 Fhidden: 0x10,
 Fcontrol: 0x20,
 Fdual: 0x40,
 Fnonextensible: 0x80,
 Foleautomation: 0x100,
 Frestricted: 0x200,
 Faggregatable: 0x400,
 Freplaceable: 0x800,
 Fdispatchable: 0x1000,
 Freversebind: 0x2000,
 Fproxy: 0x4000
});

var tagFUNCFLAGS = new EnumT('tagFUNCFLAGS', {
 Frestricted: 0x1,
 Fsource: 0x2,
 Fbindable: 0x4,
 Frequestedit: 0x8,
 Fdisplaybind: 0x10,
 Fdefaultbind: 0x20,
 Fhidden: 0x40,
 Fusesgetlasterror: 0x80,
 Fdefaultcollelem: 0x100,
 Fuidefault: 0x200,
 Fnonbrowsable: 0x400,
 Freplaceable: 0x800,
 Fimmediatebind: 0x1000
});

var tagVARFLAGS = new EnumT('tagVARFLAGS', {
 Freadonly: 0x1,
 Fsource: 0x2,
 Fbindable: 0x4,
 Frequestedit: 0x8,
 Fdisplaybind: 0x10,
 Fdefaultbind: 0x20,
 Fhidden: 0x40,
 Frestricted: 0x80,
 Fdefaultcollelem: 0x100,
 Fuidefault: 0x200,
 Fnonbrowsable: 0x400,
 Freplaceable: 0x800,
 Fimmediatebind: 0x1000
});

var tagDESCKIND = new EnumT('tagDESCKIND', {
 None: 0,
 Funcdesc: 1,
 Vardesc: 2,
 Typecomp: 3,
 Implicitappobj: 4,
 Max: 5
});

var tagSYSKIND = new EnumT('tagSYSKIND', {
 Win16: 0,
 Win32: 1,
 Mac: 2,
 Win64: 3
});

var tagLIBFLAGS = new EnumT('tagLIBFLAGS', {
 Frestricted: 0x1,
 Fcontrol: 0x2,
 Fhidden: 0x4,
 Fhasdiskimage: 0x8
});

var tagCHANGEKIND = new EnumT('tagCHANGEKIND', {
 Addmember: 0,
 Deletemember: 1,
 Setnames: 2,
 Setdocumentation: 3,
 General: 4,
 Invalidate: 5,
 Changefailed: 6,
 Max: 7
});

var tagDOMNodeType = new EnumT('tagDOMNodeType', {
 Invalid: 0,
 Element: 1,
 Attribute: 2,
 Text: 3,
 CdataSection: 4,
 EntityReference: 5,
 Entity: 6,
 ProcessingInstruction: 7,
 Comment: 8,
 Document: 9,
 DocumentType: 10,
 DocumentFragment: 11,
 Notation: 12
});

var tagXMLEMEM_TYPE = new EnumT('tagXMLEMEM_TYPE', {
 XmlelemtypeElement: 0,
 XmlelemtypeText: 1,
 XmlelemtypeComment: 2,
 XmlelemtypeDocument: 3,
 XmlelemtypeDtd: 4,
 XmlelemtypePi: 5,
 XmlelemtypeOther: 6
});

var __MIDL_IMonikerProp_0001 = new EnumT('__MIDL_IMonikerProp_0001', {
 Mimetypeprop: 0,
 UseSrcUrl: 0x1,
 Classidprop: 0x2,
 Trusteddownloadprop: 0x3,
 Popuplevelprop: 0x4
});

var __MIDL_IBindStatusCallback_0001 = new EnumT('__MIDL_IBindStatusCallback_0001', {
 BindverbGet: 0,
 BindverbPost: 0x1,
 BindverbPut: 0x2,
 BindverbCustom: 0x3,
 BindverbReserved1: 0x4
});

var __MIDL_IBindStatusCallback_0002 = new EnumT('__MIDL_IBindStatusCallback_0002', {
 BindinfofUrlencodestgmeddata: 0x1,
 BindinfofUrlencodedextrainfo: 0x2
});

var __MIDL_IBindStatusCallback_0003 = new EnumT('__MIDL_IBindStatusCallback_0003', {
 BindfAsynchronous: 0x1,
 BindfAsyncstorage: 0x2,
 BindfNoprogressiverendering: 0x4,
 BindfOfflineoperation: 0x8,
 BindfGetnewestversion: 0x10,
 BindfNowritecache: 0x20,
 BindfNeedfile: 0x40,
 BindfPulldata: 0x80,
 BindfIgnoresecurityproblem: 0x100,
 BindfResynchronize: 0x200,
 BindfHyperlink: 0x400,
 BindfNoUi: 0x800,
 BindfSilentoperation: 0x1000,
 BindfPragmaNoCache: 0x2000,
 BindfGetclassobject: 0x4000,
 BindfReserved1: 0x8000,
 BindfFreeThreaded: 0x10000,
 BindfDirectRead: 0x20000,
 BindfFormsSubmit: 0x40000,
 BindfGetfromcacheIfNetFail: 0x80000,
 BindfFromurlmon: 0x100000,
 BindfFwdBack: 0x200000,
 BindfPreferdefaulthandler: 0x400000,
 BindfEnforcerestricted: 0x800000
});

var __MIDL_IBindStatusCallback_0004 = new EnumT('__MIDL_IBindStatusCallback_0004', {
 UrlEncodingNone: 0,
 UrlEncodingEnableUtf8: 0x10000000,
 UrlEncodingDisableUtf8: 0x20000000
});

var __MIDL_IBindStatusCallback_0005 = new EnumT('__MIDL_IBindStatusCallback_0005', {
 BindinfoOptionsWininetflag: 0x10000,
 BindinfoOptionsEnableUtf8: 0x20000,
 BindinfoOptionsDisableUtf8: 0x40000,
 BindinfoOptionsUseIeEncoding: 0x80000,
 BindinfoOptionsBindtoobject: 0x100000,
 BindinfoOptionsSecurityoptout: 0x200000,
 BindinfoOptionsIgnoremimetextplain: 0x400000,
 BindinfoOptionsUsebindstringcreds: 0x800000,
 BindinfoOptionsIgnorehttphttpsredirects: 0x1000000,
 BindinfoOptionsIgnoreSslerrorsOnce: 0x2000000,
 BindinfoWpcDownloadblocked: 0x8000000,
 BindinfoWpcLoggingEnabled: 0x10000000,
 BindinfoOptionsAllowconnectdata: 0x20000000,
 BindinfoOptionsDisableautoredirects: 0x40000000,
 BindinfoOptionsShdocvwNavigate: 14
});

var __MIDL_IBindStatusCallback_0006 = new EnumT('__MIDL_IBindStatusCallback_0006', {
 BscfFirstdatanotification: 0x1,
 BscfIntermediatedatanotification: 0x2,
 BscfLastdatanotification: 0x4,
 BscfDatafullyavailable: 0x8,
 BscfAvailabledatasizeunknown: 0x10,
 BscfSkipdraindataforfileurls: 0x20,
 Bscf64bitlengthdownload: 0x40
});

var tagBINDSTATUS = new EnumT('tagBINDSTATUS', {
 Findingresource: 1,
 Connecting: 1,
 Redirecting: 2,
 Begindownloaddata: 3,
 Downloadingdata: 4,
 Enddownloaddata: 5,
 Begindownloadcomponents: 6,
 Installingcomponents: 7,
 Enddownloadcomponents: 8,
 Usingcachedcopy: 9,
 Sendingrequest: 10,
 Classidavailable: 11,
 Mimetypeavailable: 12,
 Cachefilenameavailable: 13,
 Beginsyncoperation: 14,
 Endsyncoperation: 15,
 Beginuploaddata: 16,
 Uploadingdata: 17,
 Enduploaddata: 18,
 Protocolclassid: 19,
 Encoding: 20,
 Verifiedmimetypeavailable: 21,
 Classinstalllocation: 22,
 Decoding: 23,
 Loadingmimehandler: 24,
 Contentdispositionattach: 25,
 Filterreportmimetype: 26,
 Clsidcaninstantiate: 27,
 Iunknownavailable: 28,
 Directbind: 29,
 Rawmimetype: 30,
 Proxydetecting: 31,
 Acceptranges: 32,
 CookieSent: 33,
 CompactPolicyReceived: 34,
 CookieSuppressed: 35,
 CookieStateUnknown: 36,
 CookieStateAccept: 37,
 CookieStateReject: 38,
 CookieStatePrompt: 39,
 CookieStateLeash: 40,
 CookieStateDowngrade: 41,
 PolicyHref: 42,
 P3pHeader: 43,
 SessionCookieReceived: 44,
 PersistentCookieReceived: 45,
 SessionCookiesAllowed: 46,
 Cachecontrol: 47,
 Contentdispositionfilename: 48,
 Mimetextplainmismatch: 49,
 Publisheravailable: 50,
 Displaynameavailable: 51,
 SsluxNavblocked: 52,
 ServerMimetypeavailable: 53,
 SniffedClassidavailable: 54,
 64bitProgress: 55
});

var __MIDL_IBindStatusCallbackEx_0001 = new EnumT('__MIDL_IBindStatusCallbackEx_0001', {
 Bindf2Disablebasicoverhttp: 0x1,
 Bindf2Disableautocookiehandling: 0x2,
 Bindf2ReadDataGreaterThan4gb: 0x4,
 Bindf2DisableHttpRedirectXsecurityid: 0x8,
 Bindf2Reserved3: 0x20000000,
 Bindf2Reserved2: 0x40000000,
 Bindf2Reserved1: 6
});

var __MIDL_IAuthenticateEx_0001 = new EnumT('__MIDL_IAuthenticateEx_0001', {
 AuthenticatefProxy: 0x1,
 AuthenticatefBasic: 0x2,
 AuthenticatefHttp: 0x4
});

var __MIDL_ICodeInstall_0001 = new EnumT('__MIDL_ICodeInstall_0001', {
 CipDiskFull: 0,
 CipAccessDenied: 1,
 CipNewerVersionExists: 2,
 CipOlderVersionExists: 3,
 CipNameConflict: 4,
 CipTrustVerificationComponentMissing: 5,
 CipExeSelfRegisterationTimeout: 6,
 CipUnsafeToAbort: 7,
 CipNeedReboot: 8,
 CipNeedRebootUiPermission: 9
});

var __MIDL_IUri_0001 = new EnumT('__MIDL_IUri_0001', {
 PropertyAbsoluteUri: 0,
 PropertyStringStart: 1,
 PropertyAuthority: 1,
 PropertyDisplayUri: 2,
 PropertyDomain: 3,
 PropertyExtension: 4,
 PropertyFragment: 5,
 PropertyHost: 6,
 PropertyPassword: 7,
 PropertyPath: 8,
 PropertyPathAndQuery: 9,
 PropertyQuery: 10,
 PropertyRawUri: 11,
 PropertySchemeName: 12,
 PropertyUserInfo: 13,
 PropertyUserName: 14,
 PropertyStringLast: 16,
 PropertyHostType: 15,
 PropertyDwordStart: 18,
 PropertyPort: 16,
 PropertyScheme: 17,
 PropertyZone: 18,
 PropertyDwordLast: 22
});

var __MIDL_IUri_0002 = new EnumT('__MIDL_IUri_0002', {
 HostUnknown: 0,
 HostDns: 1,
 HostIpv4: 2,
 HostIpv6: 3,
 HostIdn: 4
});

var tagBINDSTRING = new EnumT('tagBINDSTRING', {
 Headers: 1,
 AcceptMimes: 1,
 ExtraUrl: 2,
 Language: 3,
 Username: 4,
 Password: 5,
 UaPixels: 6,
 UaColor: 7,
 Os: 8,
 UserAgent: 9,
 AcceptEncodings: 10,
 PostCookie: 11,
 PostDataMime: 12,
 Url: 13,
 Iid: 14,
 FlagToObject: 15,
 PtrContext: 16,
 XdrOrigin: 17
});

var _tagPI_FLAGS = new EnumT('_tagPI_FLAGS', {
 ParseUrl: 0x1,
 FilterMode: 0x2,
 ForceAsync: 0x4,
 UseWorkerthread: 0x8,
 Mimeverification: 0x10,
 Clsidlookup: 0x20,
 Dataprogress: 0x40,
 Synchronous: 0x80,
 Apartmentthreaded: 0x100,
 Classinstall: 0x200,
 Passonbindctx: 0x2000,
 Nomimehandler: 0x8000,
 Loadappdirect: 0x4000,
 PdForceSwitch: 0x10000,
 Preferdefaulthandler: 0x20000
});

var _tagOIBDG_FLAGS = new EnumT('_tagOIBDG_FLAGS', {
 Apartmentthreaded: 0x100,
 Dataonly: 0x1000
});

var _tagPARSEACTION = new EnumT('_tagPARSEACTION', {
 Canonicalize: 1,
 Friendly: 1,
 SecurityUrl: 2,
 Rootdocument: 3,
 Document: 4,
 Anchor: 5,
 EncodeIsUnescape: 6,
 DecodeIsEscape: 7,
 PathFromUrl: 8,
 UrlFromPath: 9,
 Mime: 10,
 Server: 11,
 Schema: 12,
 Site: 13,
 Domain: 14,
 Location: 15,
 SecurityDomain: 16,
 Escape: 17,
 Unescape: 18
});

var _tagPSUACTION = new EnumT('_tagPSUACTION', {
 Default: 1,
 SecurityUrlOnly: 1
});

var _tagQUERYOPTION = new EnumT('_tagQUERYOPTION', {
 ExpirationDate: 1,
 TimeOfLastChange: 1,
 ContentEncoding: 2,
 ContentType: 3,
 Refresh: 4,
 Recombine: 5,
 CanNavigate: 6,
 UsesNetwork: 7,
 IsCached: 8,
 IsInstalledentry: 9,
 IsCachedOrMapped: 10,
 UsesCache: 11,
 IsSecure: 12,
 IsSafe: 13,
 UsesHistoryfolder: 14
});

var _tagINTERNETFEATURELIST = new EnumT('_tagINTERNETFEATURELIST', {
 ObjectCaching: 0,
 ZoneElevation: 1,
 MimeHandling: 2,
 MimeSniffing: 3,
 WindowRestrictions: 4,
 WebocPopupmanagement: 5,
 Behaviors: 6,
 DisableMkProtocol: 7,
 LocalmachineLockdown: 8,
 Securityband: 9,
 RestrictActivexinstall: 10,
 ValidateNavigateUrl: 11,
 RestrictFiledownload: 12,
 AddonManagement: 13,
 ProtocolLockdown: 14,
 HttpUsernamePasswordDisable: 15,
 SafeBindtoobject: 16,
 UncSavedfilecheck: 17,
 GetUrlDomFilepathUnencoded: 18,
 TabbedBrowsing: 19,
 Sslux: 20,
 DisableNavigationSounds: 21,
 DisableLegacyCompression: 22,
 ForceAddrAndStatus: 23,
 Xmlhttp: 24,
 DisableTelnetProtocol: 25,
 Feeds: 26,
 BlockInputPrompts: 27,
 EntryCount: 28
});

var __MIDL_IInternetSecurityManager_0001 = new EnumT('__MIDL_IInternetSecurityManager_0001', {
 PuafDefault: 0,
 PuafNoui: 0x1,
 PuafIsfile: 0x2,
 PuafWarnIfDenied: 0x4,
 PuafForceuiForeground: 0x8,
 PuafCheckTifs: 0x10,
 PuafDontcheckboxindialog: 0x20,
 PuafTrusted: 0x40,
 PuafAcceptWildcardScheme: 0x80,
 PuafEnforcerestricted: 0x100,
 PuafNosavedfilecheck: 0x200,
 PuafRequiresavedfilecheck: 0x400,
 PuafDontUseCache: 0x1000,
 PuafReserved1: 0x2000,
 PuafReserved2: 0x4000,
 PuafLmzUnlocked: 0x10000,
 PuafLmzLocked: 0x20000,
 PuafDefaultzonepol: 0x40000,
 PuafNplUseLockedIfRestricted: 0x80000,
 PuafNouiiflocked: 0x100000,
 PuafDragprotocolcheck: 0x200000
});

var __MIDL_IInternetSecurityManager_0002 = new EnumT('__MIDL_IInternetSecurityManager_0002', {
 PuafoutDefault: 0,
 PuafoutIslockzonepolicy: 0x1
});

var __MIDL_IInternetSecurityManager_0003 = new EnumT('__MIDL_IInternetSecurityManager_0003', {
 SzmCreate: 0,
 SzmDelete: 0x1
});

var tagURLZONE = new EnumT('tagURLZONE', {
 Invalid: 0,
 PredefinedMin: 0,
 LocalMachine: 0,
 Intranet: 3,
 Trusted: 4,
 Internet: 5,
 Untrusted: 6,
 PredefinedMax: 999,
 UserMin: 1000,
 UserMax: 10000
});

var tagURLTEMPLATE = new EnumT('tagURLTEMPLATE', {
 Custom: 0,
 PredefinedMin: 0x10000,
 Low: 0x10000,
 Medlow: 0x10500,
 Medium: 0x11000,
 Medhigh: 0x11500,
 High: 0x12000,
 PredefinedMax: 0x20000
});

var __MIDL_IInternetZoneManager_0001 = new EnumT('__MIDL_IInternetZoneManager_0001', {
 MaxPath: 260,
 MaxDescription: 200
});

var __MIDL_IInternetZoneManager_0002 = new EnumT('__MIDL_IInternetZoneManager_0002', {
 ZaflagsCustomEdit: 0x1,
 ZaflagsAddSites: 0x2,
 ZaflagsRequireVerification: 0x4,
 ZaflagsIncludeProxyOverride: 0x8,
 ZaflagsIncludeIntranetSites: 0x10,
 ZaflagsNoUi: 0x20,
 ZaflagsSupportsVerification: 0x40,
 ZaflagsUncAsIntranet: 0x80,
 ZaflagsDetectIntranet: 0x100,
 ZaflagsUseLockedZones: 0x10000,
 ZaflagsVerifyTemplateSettings: 0x20000,
 ZaflagsNoCache: 0x40000
});

var _URLZONEREG = new EnumT('_URLZONEREG', {
 Default: 0,
 Hklm: 1,
 Hkcu: 2
});

var PIDMSI_STATUS_VALUE = new EnumT('PIDMSI_STATUS_VALUE', {
 Normal: 0,
 New: 1,
 Prelim: 2,
 Draft: 3,
 Inprogress: 4,
 Edit: 5,
 Review: 6,
 Proof: 7,
 Final: 8,
 Other: 0x7fff
});

var tagREGKIND = new EnumT('tagREGKIND', {
 Default: 0,
 Register: 1,
 None: 2
});

var _SC_ACTION_TYPE = new EnumT('_SC_ACTION_TYPE', {
 None: 0,
 Restart: 1,
 Reboot: 2,
 RunCommand: 3
});

var _SC_STATUS_TYPE = new EnumT('_SC_STATUS_TYPE', {
 ProcessInfo: 0
});

var _SC_ENUM_TYPE = new EnumT('_SC_ENUM_TYPE', {
 ProcessInfo: 0
});

var tagUASFLAGS = new EnumT('tagUASFLAGS', {
 Normal: 0,
 Blocked: 0x1,
 Noparentenable: 0x2,
 Mask: 0x3
});

var tagREADYSTATE = new EnumT('tagREADYSTATE', {
 Uninitialized: 0,
 Loading: 1,
 Loaded: 2,
 Interactive: 3,
 Complete: 4
});

var tagGUIDKIND = new EnumT('tagGUIDKIND', {
 DefaultSourceDispIid: 1
});

var tagCTRLINFO = new EnumT('tagCTRLINFO', {
 EatsReturn: 1,
 EatsEscape: 2
});

var tagXFORMCOORDS = new EnumT('tagXFORMCOORDS', {
 Position: 0x1,
 Size: 0x2,
 Himetrictocontainer: 0x4,
 Containertohimetric: 0x8,
 Eventcompat: 0x10
});

var tagPROPPAGESTATUS = new EnumT('tagPROPPAGESTATUS', {
 Dirty: 0x1,
 Validate: 0x2,
 Clean: 0x4
});

var tagPictureAttributes = new EnumT('tagPictureAttributes', {
 Scalable: 0x1,
 Transparent: 0x2
});

var tagACTIVATEFLAGS = new EnumT('tagACTIVATEFLAGS', {
 Windowless: 1
});

var tagOLEDCFLAGS = new EnumT('tagOLEDCFLAGS', {
 Nodraw: 0x1,
 Paintbkgnd: 0x2,
 Offscreen: 0x4
});

var tagVIEWSTATUS = new EnumT('tagVIEWSTATUS', {
 Opaque: 1,
 Solidbkgnd: 2,
 Dvaspectopaque: 4,
 Dvaspecttransparent: 8,
 Surface: 16,
 3dsurface: 32
});

var tagHITRESULT = new EnumT('tagHITRESULT', {
 Outside: 0,
 Transparent: 1,
 Close: 2,
 Hit: 3
});

var tagDVASPECT2 = new EnumT('tagDVASPECT2', {
 Opaque: 16,
 Transparent: 32
});

var tagExtentMode = new EnumT('tagExtentMode', {
 DvextentContent: 0,
 DvextentIntegral: 1
});

var tagAspectInfoFlag = new EnumT('tagAspectInfoFlag', {
 DvaspectinfoflagCanoptimize: 1
});

var tagPOINTERINACTIVE = new EnumT('tagPOINTERINACTIVE', {
 Activateonentry: 1,
 Deactivateonleave: 2,
 Activateondrag: 4
});

var tagPROPBAG2_TYPE = new EnumT('tagPROPBAG2_TYPE', {
 Undefined: 0,
 Data: 1,
 Url: 2,
 Object: 3,
 Stream: 4,
 Storage: 5,
 Moniker: 6
});

var tagQACONTAINERFLAGS = new EnumT('tagQACONTAINERFLAGS', {
 Showhatching: 0x1,
 Showgrabhandles: 0x2,
 Usermode: 0x4,
 Displayasdefault: 0x8,
 Uidead: 0x10,
 Autoclip: 0x20,
 Messagereflect: 0x40,
 Supportsmnemonics: 0x80
});

var tagSTRRET_TYPE = new EnumT('tagSTRRET_TYPE', {
 Wstr: 0,
 Offset: 0x1,
 Cstr: 0x2
});

var tagPERCEIVED = new EnumT('tagPERCEIVED', {
 TypeFirst: 0,
 TypeCustom: 1,
 TypeUnspecified: 2,
 TypeFolder: 3,
 TypeUnknown: 0,
 TypeText: 1,
 TypeImage: 2,
 TypeAudio: 3,
 TypeVideo: 4,
 TypeCompressed: 5,
 TypeDocument: 6,
 TypeSystem: 7,
 TypeApplication: 8,
 TypeGamemedia: 9,
 TypeContacts: 10,
 TypeLast: 10
});

var tagSHCOLSTATE = new EnumT('tagSHCOLSTATE', {
 Default: 0,
 TypeStr: 0x1,
 TypeInt: 0x2,
 TypeDate: 0x3,
 Typemask: 0xf,
 Onbydefault: 0x10,
 Slow: 0x20,
 Extended: 0x40,
 Secondaryui: 0x80,
 Hidden: 0x100,
 PreferVarcmp: 0x200,
 PreferFmtcmp: 0x400,
 Nosortbyfolderness: 0x800,
 Viewonly: 0x10000,
 Batchread: 0x20000,
 NoGroupby: 0x40000,
 FixedWidth: 0x1000,
 Nodpiscale: 0x2000,
 FixedRatio: 0x4000,
 Displaymask: 0xf000
});


var _htmlDesignMode = new EnumT('_htmlDesignMode', {
 Inherit: 0,
 On: 1,
 Off: 0,
 Max: 3
});

var _htmlZOrder = new EnumT('_htmlZOrder', {
 Front: 0,
 Back: 1,
 Max: 2
});

var _htmlClear = new EnumT('_htmlClear', {
 NotSet: 0,
 All: 1,
 Left: 2,
 Right: 3,
 Both: 4,
 None: 5,
 Max: 6
});

var _htmlControlAlign = new EnumT('_htmlControlAlign', {
 NotSet: 0,
 Left: 1,
 Center: 2,
 Right: 3,
 TextTop: 4,
 AbsMiddle: 5,
 Baseline: 6,
 AbsBottom: 7,
 Bottom: 8,
 Middle: 9,
 Top: 10,
 Max: 11
});

var _htmlBlockAlign = new EnumT('_htmlBlockAlign', {
 NotSet: 0,
 Left: 1,
 Center: 2,
 Right: 3,
 Justify: 4,
 Max: 5
});

var _htmlReadyState = new EnumT('_htmlReadyState', {
 Stateuninitialized: 0,
 Stateloading: 1,
 Stateloaded: 2,
 Stateinteractive: 3,
 Statecomplete: 4,
 Max: 5
});

var _htmlLoop = new EnumT('_htmlLoop', {
 Infinite: 0,
 Max: 1
});

var _mediaType = new EnumT('_mediaType', {
 NotSet: 0,
 All: 511,
 Aural: 1,
 Braille: 2,
 Embossed: 4,
 Handheld: 8,
 Print: 16,
 Projection: 32,
 Screen: 64,
 Tty: 128,
 Tv: 256,
 Max: 11
});

var _DomConstructor = new EnumT('_DomConstructor', {
 Object: 0,
 Attr: 1,
 BehaviorUrnsCollection: 2,
 BookmarkCollection: 3,
 CompatibleInfo: 4,
 CompatibleInfoCollection: 5,
 ControlRangeCollection: 6,
 CssCurrentStyleDeclaration: 7,
 CssRuleList: 8,
 CssRuleStyleDeclaration: 9,
 CssStyleDeclaration: 10,
 CssStyleRule: 11,
 CssStyleSheet: 12,
 DataTransfer: 13,
 Implementation: 14,
 Element: 15,
 Event: 16,
 History: 17,
 HtcElementBehaviorDefaults: 18,
 HtmlAnchorElement: 19,
 HtmlAreaElement: 20,
 HtmlAreasCollection: 21,
 HtmlBaseElement: 22,
 HtmlBaseFontElement: 23,
 HtmlbgSoundElement: 24,
 HtmlBlockElement: 25,
 HtmlBodyElement: 26,
 HtmlbrElement: 27,
 HtmlButtonElement: 28,
 HtmlCollection: 29,
 HtmlCommentElement: 30,
 HtmlddElement: 31,
 HtmlDivElement: 32,
 HtmlDocument: 33,
 HtmldListElement: 34,
 HtmldtElement: 35,
 HtmlEmbedElement: 36,
 HtmlFieldSetElement: 37,
 HtmlFontElement: 38,
 HtmlFormElement: 39,
 HtmlFrameElement: 40,
 HtmlFrameSetElement: 41,
 HtmlGenericElement: 42,
 HtmlHeadElement: 43,
 HtmlHeadingElement: 44,
 HtmlhrElement: 45,
 HtmlHtmlElement: 46,
 HtmliFrameElement: 47,
 HtmlImageElement: 48,
 HtmlInputElement: 49,
 HtmlIsIndexElement: 50,
 HtmlLabelElement: 51,
 HtmlLegendElement: 52,
 HtmlliElement: 53,
 HtmlLinkElement: 54,
 HtmlMapElement: 55,
 HtmlMarqueeElement: 56,
 HtmlMetaElement: 57,
 HtmlModelessDialog: 58,
 HtmlNamespaceInfo: 59,
 HtmlNamespaceInfoCollection: 60,
 HtmlNextIdElement: 61,
 HtmlNoShowElement: 62,
 HtmlObjectElement: 63,
 HtmloListElement: 64,
 HtmlOptionElement: 65,
 HtmlParagraphElement: 66,
 HtmlParamElement: 67,
 HtmlPhraseElement: 68,
 HtmlPluginsCollection: 69,
 HtmlPopup: 70,
 HtmlScriptElement: 71,
 HtmlSelectElement: 72,
 HtmlSpanElement: 73,
 HtmlStyleElement: 74,
 HtmlTableCaptionElement: 75,
 HtmlTableCellElement: 76,
 HtmlTableColElement: 77,
 HtmlTableElement: 78,
 HtmlTableRowElement: 79,
 HtmlTableSectionElement: 80,
 HtmlTextAreaElement: 81,
 HtmlTextElement: 82,
 HtmlTitleElement: 83,
 HtmluListElement: 84,
 HtmlUnknownElement: 85,
 Image: 86,
 Location: 87,
 NamedNodeMap: 88,
 Navigator: 89,
 NodeList: 90,
 Option: 91,
 Screen: 92,
 Selection: 93,
 StaticNodeList: 94,
 Storage: 95,
 StyleSheetList: 96,
 StyleSheetPage: 97,
 StyleSheetPageList: 98,
 Text: 99,
 TextRange: 100,
 TextRangeCollection: 101,
 TextRectangle: 102,
 TextRectangleList: 103,
 Window: 104,
 XDomainRequest: 105,
 XmlHttpRequest: 106,
 Max: 107,
 Max: 108
});

var _styleTextTransform = new EnumT('_styleTextTransform', {
 NotSet: 0,
 Capitalize: 1,
 Lowercase: 2,
 Uppercase: 3,
 None: 4,
 Max: 5
});

var _styleDataRepeat = new EnumT('_styleDataRepeat', {
 None: 0,
 Inner: 1,
 Max: 2
});

var _styleOverflow = new EnumT('_styleOverflow', {
 NotSet: 0,
 Auto: 1,
 Hidden: 2,
 Visible: 3,
 Scroll: 4,
 Max: 5
});

var _styleTableLayout = new EnumT('_styleTableLayout', {
 NotSet: 0,
 Auto: 1,
 Fixed: 2,
 Max: 3
});

var _styleBorderCollapse = new EnumT('_styleBorderCollapse', {
 NotSet: 0,
 Separate: 1,
 Collapse: 2,
 Max: 3
});

var _styleCaptionSide = new EnumT('_styleCaptionSide', {
 NotSet: 0,
 Top: 1,
 Bottom: 2,
 Left: 3,
 Right: 4,
 Max: 5
});

var _styleEmptyCells = new EnumT('_styleEmptyCells', {
 NotSet: 0,
 Show: 1,
 Hide: 2,
 Max: 3
});

var _styleFontStyle = new EnumT('_styleFontStyle', {
 NotSet: 0,
 Italic: 1,
 Oblique: 2,
 Normal: 3,
 Max: 4
});

var _styleFontVariant = new EnumT('_styleFontVariant', {
 NotSet: 0,
 SmallCaps: 1,
 Normal: 2,
 Max: 3
});

var _styleBackgroundRepeat = new EnumT('_styleBackgroundRepeat', {
 Repeat: 0,
 X: 1,
 Y: 2,
 NoRepeat: 3,
 NotSet: 4,
 Max: 5
});

var _styleBackgroundAttachment = new EnumT('_styleBackgroundAttachment', {
 Fixed: 0,
 Scroll: 1,
 NotSet: 2,
 Max: 3
});

var _styleVerticalAlign = new EnumT('_styleVerticalAlign', {
 Auto: 0,
 Baseline: 1,
 Sub: 2,
 Super: 3,
 Top: 4,
 TextTop: 5,
 Middle: 6,
 Bottom: 7,
 TextBottom: 8,
 Inherit: 9,
 NotSet: 10,
 Max: 11
});

var _styleFontWeight = new EnumT('_styleFontWeight', {
 NotSet: 0,
 100: 1,
 200: 2,
 300: 3,
 400: 4,
 500: 5,
 600: 6,
 700: 7,
 800: 8,
 900: 9,
 Normal: 10,
 Bold: 11,
 Bolder: 12,
 Lighter: 13,
 Max: 14
});

var _styleBackgroundPositionX = new EnumT('_styleBackgroundPositionX', {
 NotSet: 0,
 Left: 1,
 Center: 2,
 Right: 3,
 Max: 4
});

var _styleBackgroundPositionY = new EnumT('_styleBackgroundPositionY', {
 NotSet: 0,
 Top: 1,
 Center: 2,
 Bottom: 3,
 Max: 4
});

var _styleFontSize = new EnumT('_styleFontSize', {
 XxSmall: 0,
 XSmall: 1,
 Small: 2,
 Medium: 3,
 Large: 4,
 XLarge: 5,
 XxLarge: 6,
 Smaller: 7,
 Larger: 8,
 Max: 9
});

var _styleZIndex = new EnumT('_styleZIndex', {
 Auto: 0,
 Max: 1
});

var _styleWidowsOrphans = new EnumT('_styleWidowsOrphans', {
 NotSet: 0,
 Max: 1
});

var _styleAuto = new EnumT('_styleAuto', {
 Auto: 0,
 Max: 1
});

var _styleNone = new EnumT('_styleNone', {
 None: 0,
 Max: 1
});

var _styleNormal = new EnumT('_styleNormal', {
 Normal: 0,
 Max: 1
});

var _styleBorderWidth = new EnumT('_styleBorderWidth', {
 Thin: 0,
 Medium: 1,
 Thick: 2,
 Max: 3
});

var _stylePosition = new EnumT('_stylePosition', {
 NotSet: 0,
 Positionstatic: 1,
 Positionrelative: 2,
 Positionabsolute: 3,
 Positionfixed: 4,
 Max: 5
});

var _styleBorderStyle = new EnumT('_styleBorderStyle', {
 NotSet: 0,
 Dotted: 1,
 Dashed: 2,
 Solid: 3,
 Double: 4,
 Groove: 5,
 Ridge: 6,
 Inset: 7,
 Outset: 8,
 WindowInset: 9,
 None: 10,
 Hidden: 11,
 Max: 12
});

var _styleStyleFloat = new EnumT('_styleStyleFloat', {
 NotSet: 0,
 Left: 1,
 Right: 2,
 None: 3,
 Max: 4
});

var _styleDisplay = new EnumT('_styleDisplay', {
 NotSet: 0,
 Block: 1,
 Inline: 2,
 ListItem: 3,
 None: 4,
 TableHeaderGroup: 5,
 TableFooterGroup: 6,
 InlineBlock: 7,
 Table: 8,
 InlineTable: 9,
 TableRow: 10,
 TableRowGroup: 11,
 TableColumn: 12,
 TableColumnGroup: 13,
 TableCell: 14,
 TableCaption: 15,
 RunIn: 16,
 Ruby: 17,
 RubyBase: 18,
 RubyText: 19,
 RubyBaseContainer: 20,
 RubyTextContainer: 21,
 Max: 22
});

var _styleVisibility = new EnumT('_styleVisibility', {
 NotSet: 0,
 Inherit: 1,
 Visible: 2,
 Hidden: 3,
 Collapse: 4,
 Max: 5
});

var _styleListStyleType = new EnumT('_styleListStyleType', {
 NotSet: 0,
 Disc: 1,
 Circle: 2,
 Square: 3,
 Decimal: 4,
 LowerRoman: 5,
 UpperRoman: 6,
 LowerAlpha: 7,
 UpperAlpha: 8,
 None: 9,
 DecimalLeadingZero: 10,
 Georgian: 11,
 Armenian: 12,
 UpperLatin: 13,
 LowerLatin: 14,
 UpperGreek: 15,
 LowerGreek: 16,
 Max: 17
});

var _styleListStylePosition = new EnumT('_styleListStylePosition', {
 NotSet: 0,
 Inside: 1,
 OutSide: 2,
 Max: 3
});

var _styleWhiteSpace = new EnumT('_styleWhiteSpace', {
 NotSet: 0,
 Normal: 1,
 Pre: 2,
 Nowrap: 3,
 Preline: 4,
 Prewrap: 5,
 Max: 6
});

var _stylePageBreak = new EnumT('_stylePageBreak', {
 NotSet: 0,
 Auto: 1,
 Always: 2,
 Left: 3,
 Right: 4,
 Avoid: 5,
 Max: 6
});

var _stylePageBreakInside = new EnumT('_stylePageBreakInside', {
 NotSet: 0,
 Auto: 1,
 Avoid: 2,
 Max: 3
});

var _styleCursor = new EnumT('_styleCursor', {
 Auto: 0,
 Crosshair: 1,
 Default: 2,
 Hand: 3,
 Move: 4,
 Resize: 5,
 NeResize: 6,
 NwResize: 7,
 NResize: 8,
 SeResize: 9,
 SwResize: 10,
 Resize: 11,
 WResize: 12,
 Text: 13,
 Wait: 14,
 Help: 15,
 Pointer: 16,
 Progress: 17,
 NotAllowed: 18,
 NoDrop: 19,
 VerticalText: 20,
 CursorallScroll: 21,
 CursorcolResize: 22,
 CursorrowResize: 23,
 Cursorcustom: 24,
 NotSet: 25,
 Max: 26
});

var _styleDir = new EnumT('_styleDir', {
 NotSet: 0,
 LeftToRight: 1,
 RightToLeft: 2,
 Inherit: 3,
 Max: 4
});

var _styleBidi = new EnumT('_styleBidi', {
 NotSet: 0,
 Normal: 1,
 Embed: 2,
 Override: 3,
 Inherit: 4,
 Max: 5
});

var _styleImeMode = new EnumT('_styleImeMode', {
 Auto: 0,
 Active: 1,
 Inactive: 2,
 Disabled: 3,
 NotSet: 4,
 Max: 5
});

var _styleRubyAlign = new EnumT('_styleRubyAlign', {
 NotSet: 0,
 Auto: 1,
 Left: 2,
 Center: 3,
 Right: 4,
 DistributeLetter: 5,
 DistributeSpace: 6,
 LineEdge: 7,
 Max: 8
});

var _styleRubyPosition = new EnumT('_styleRubyPosition', {
 NotSet: 0,
 Above: 1,
 Inline: 2,
 Max: 3
});

var _styleRubyOverhang = new EnumT('_styleRubyOverhang', {
 NotSet: 0,
 Auto: 1,
 Whitespace: 2,
 None: 3,
 Max: 4
});

var _styleLayoutGridChar = new EnumT('_styleLayoutGridChar', {
 NotSet: 0,
 Auto: 1,
 None: 2,
 Max: 3
});

var _styleLayoutGridLine = new EnumT('_styleLayoutGridLine', {
 NotSet: 0,
 Auto: 1,
 None: 2,
 Max: 3
});

var _styleLayoutGridMode = new EnumT('_styleLayoutGridMode', {
 NotSet: 0,
 Char: 1,
 Line: 2,
 Both: 3,
 None: 4,
 Max: 5
});

var _styleLayoutGridType = new EnumT('_styleLayoutGridType', {
 NotSet: 0,
 Loose: 1,
 Strict: 2,
 Fixed: 3,
 Max: 4
});

var _styleLineBreak = new EnumT('_styleLineBreak', {
 NotSet: 0,
 Normal: 1,
 Strict: 2,
 Max: 3
});

var _styleWordBreak = new EnumT('_styleWordBreak', {
 NotSet: 0,
 Normal: 1,
 All: 2,
 KeepAll: 3,
 Max: 4
});

var _styleWordWrap = new EnumT('_styleWordWrap', {
 NotSet: 0,
 Off: 1,
 On: 2,
 Max: 3
});

var _styleTextJustify = new EnumT('_styleTextJustify', {
 NotSet: 0,
 InterWord: 1,
 Newspaper: 2,
 Distribute: 3,
 DistributeAllLines: 4,
 InterIdeograph: 5,
 InterCluster: 6,
 Kashida: 7,
 Auto: 8,
 Max: 9
});

var _styleTextAlignLast = new EnumT('_styleTextAlignLast', {
 NotSet: 0,
 Left: 1,
 Center: 2,
 Right: 3,
 Justify: 4,
 Auto: 5,
 Max: 6
});

var _styleTextJustifyTrim = new EnumT('_styleTextJustifyTrim', {
 NotSet: 0,
 None: 1,
 Punctuation: 2,
 PunctAndKana: 3,
 Max: 4
});

var _styleAccelerator = new EnumT('_styleAccelerator', {
 False: 0,
 True: 1,
 Max: 2
});

var _styleLayoutFlow = new EnumT('_styleLayoutFlow', {
 Horizontal: 0,
 VerticalIdeographic: 1,
 NotSet: 2,
 Max: 3
});

var _styleBlockProgression = new EnumT('_styleBlockProgression', {
 Tb: 0,
 Rl: 1,
 Bt: 2,
 Lr: 3,
 NotSet: 4,
 Max: 5
});

var _styleWritingMode = new EnumT('_styleWritingMode', {
 Lrtb: 0,
 Tbrl: 1,
 Rltb: 2,
 Btrl: 3,
 NotSet: 4,
 Tblr: 5,
 Btlr: 6,
 Lrbt: 7,
 Rlbt: 8,
 Max: 9
});

var _styleBool = new EnumT('_styleBool', {
 False: 0,
 True: 1,
 Max: 2
});

var _styleTextUnderlinePosition = new EnumT('_styleTextUnderlinePosition', {
 Below: 0,
 Above: 1,
 Auto: 2,
 NotSet: 3,
 Max: 4
});

var _styleTextOverflow = new EnumT('_styleTextOverflow', {
 Clip: 0,
 Ellipsis: 1,
 NotSet: 2,
 Max: 3
});

var _styleInterpolation = new EnumT('_styleInterpolation', {
 NotSet: 0,
 Nn: 1,
 Bch: 2,
 Max: 3
});

var _styleBoxSizing = new EnumT('_styleBoxSizing', {
 NotSet: 0,
 ContentBox: 1,
 BorderBox: 2,
 Max: 3
});

var _styleTextLineThroughStyle = new EnumT('_styleTextLineThroughStyle', {
 Undefined: 0,
 Single: 1,
 Double: 2,
 Max: 3
});

var _styleTextUnderlineStyle = new EnumT('_styleTextUnderlineStyle', {
 Undefined: 0,
 Single: 1,
 Double: 2,
 Words: 3,
 Dotted: 4,
 Thick: 5,
 Dash: 6,
 DotDash: 7,
 DotDotDash: 8,
 Wave: 9,
 SingleAccounting: 10,
 DoubleAccounting: 11,
 ThickDash: 12,
 Max: 13
});

var _styleTextEffect = new EnumT('_styleTextEffect', {
 None: 0,
 Emboss: 1,
 Engrave: 2,
 Outline: 3,
 Max: 4
});

var _styleDefaultTextSelection = new EnumT('_styleDefaultTextSelection', {
 False: 0,
 True: 1,
 Max: 2
});

var _styleTextDecoration = new EnumT('_styleTextDecoration', {
 None: 0,
 Underline: 1,
 Overline: 2,
 LineThrough: 3,
 Blink: 4,
 Max: 5
});

var _textDecoration = new EnumT('_textDecoration', {
 None: 0,
 Underline: 1,
 Overline: 2,
 LineThrough: 3,
 Blink: 4,
 Max: 5
});

var _htmlListType = new EnumT('_htmlListType', {
 NotSet: 0,
 LargeAlpha: 1,
 SmallAlpha: 2,
 LargeRoman: 3,
 SmallRoman: 4,
 Numbers: 5,
 Disc: 6,
 Circle: 7,
 Square: 8,
 Max: 9
});

var _htmlMethod = new EnumT('_htmlMethod', {
 NotSet: 0,
 Get: 1,
 Post: 2,
 Max: 3
});

var _htmlWrap = new EnumT('_htmlWrap', {
 Off: 1,
 Soft: 2,
 Hard: 3,
 Max: 3
});

var _htmlDir = new EnumT('_htmlDir', {
 NotSet: 0,
 LeftToRight: 1,
 RightToLeft: 2,
 Max: 3
});

var _htmlEditable = new EnumT('_htmlEditable', {
 Inherit: 0,
 True: 1,
 False: 2,
 Max: 3
});

var _htmlInput = new EnumT('_htmlInput', {
 NotSet: 0,
 Button: 1,
 Checkbox: 2,
 File: 3,
 Hidden: 4,
 Image: 5,
 Password: 6,
 Radio: 7,
 Reset: 8,
 SelectOne: 9,
 SelectMultiple: 10,
 Submit: 11,
 Text: 12,
 Textarea: 13,
 Richtext: 14,
 Max: 15
});

var _htmlEncoding = new EnumT('_htmlEncoding', {
 Url: 0,
 Multipart: 1,
 Text: 2,
 Max: 3
});

var _htmlAdjacency = new EnumT('_htmlAdjacency', {
 BeforeBegin: 1,
 AfterBegin: 2,
 BeforeEnd: 3,
 AfterEnd: 4,
 Max: 4
});

var _htmlTabIndex = new EnumT('_htmlTabIndex', {
 NotSet: 0,
 Max: 1
});

var _htmlComponent = new EnumT('_htmlComponent', {
 Client: 0,
 SbLeft: 1,
 SbPageLeft: 2,
 SbThumb: 3,
 SbPageRight: 4,
 SbRight: 5,
 SbUp: 6,
 SbPageUp: 7,
 SbVThumb: 8,
 SbPageDown: 9,
 SbDown: 10,
 SbLeft2: 11,
 SbPageLeft2: 12,
 SbRight2: 13,
 SbPageRight2: 14,
 SbUp2: 15,
 SbPageUp2: 16,
 SbDown2: 17,
 SbPageDown2: 18,
 SbTop: 19,
 SbBottom: 20,
 Outside: 21,
 GhTopLeft: 22,
 GhLeft: 23,
 GhTop: 24,
 GhBottomLeft: 25,
 GhTopRight: 26,
 GhBottom: 27,
 GhRight: 28,
 GhBottomRight: 29,
 Max: 30
});

var _htmlApplyLocation = new EnumT('_htmlApplyLocation', {
 Inside: 0,
 Outside: 1,
 Max: 2
});

var _htmlGlyphMode = new EnumT('_htmlGlyphMode', {
 None: 0,
 Begin: 1,
 End: 2,
 Both: 3,
 Max: 4
});

var _htmlUnit = new EnumT('_htmlUnit', {
 Character: 1,
 Word: 2,
 Sentence: 3,
 TextEdit: 6,
 Max: 4
});

var _htmlEndPoints = new EnumT('_htmlEndPoints', {
 StartToStart: 1,
 StartToEnd: 2,
 ToStart: 3,
 ToEnd: 4,
 Max: 4
});

var _htmlDirection = new EnumT('_htmlDirection', {
 Forward: 99999,
 Backward: 1,
 Max: 2
});

var _htmlStart = new EnumT('_htmlStart', {
 Startfileopen: 0,
 Startmouseover: 1,
 Max: 2
});

var _bodyScroll = new EnumT('_bodyScroll', {
 Scrollyes: 1,
 Scrollno: 2,
 Scrollauto: 4,
 Scrolldefault: 3,
 Max: 4
});

var _htmlSelectType = new EnumT('_htmlSelectType', {
 One: 1,
 Multiple: 2,
 Max: 2
});

var _htmlSelectExFlag = new EnumT('_htmlSelectExFlag', {
 None: 0,
 HideSelectionInDesign: 0x1,
 Max: 2
});

var _htmlSelection = new EnumT('_htmlSelection', {
 None: 0,
 Text: 1,
 Control: 2,
 Table: 3,
 Max: 4
});

var _htmlMarqueeBehavior = new EnumT('_htmlMarqueeBehavior', {
 Behaviorscroll: 1,
 Behaviorslide: 2,
 Behavioralternate: 3,
 Max: 3
});

var _htmlMarqueeDirection = new EnumT('_htmlMarqueeDirection', {
 Directionleft: 1,
 Directionright: 3,
 Directionup: 5,
 Directiondown: 7,
 Max: 4
});

var _htmlPersistState = new EnumT('_htmlPersistState', {
 Normal: 0,
 Favorite: 1,
 History: 2,
 Snapshot: 3,
 UserData: 4,
 Max: 5
});

var _htmlDropEffect = new EnumT('_htmlDropEffect', {
 Copy: 0,
 Link: 1,
 Move: 2,
 None: 3,
 Max: 4
});

var _htmlEffectAllowed = new EnumT('_htmlEffectAllowed', {
 Copy: 0,
 Link: 1,
 Move: 2,
 CopyLink: 3,
 CopyMove: 4,
 LinkMove: 5,
 All: 6,
 None: 7,
 Uninitialized: 8,
 Max: 9
});

var _htmlCompatMode = new EnumT('_htmlCompatMode', {
 BackCompat: 0,
 Css1Compat: 1,
 Max: 2
});

var _BoolValue = new EnumT('_BoolValue', {
 True: 1,
 False: 0,
 Max: 2
});

var _htmlCaptionAlign = new EnumT('_htmlCaptionAlign', {
 NotSet: 0,
 Left: 1,
 Center: 2,
 Right: 3,
 Justify: 4,
 Top: 5,
 Bottom: 6,
 Max: 7
});

var _htmlCaptionVAlign = new EnumT('_htmlCaptionVAlign', {
 NotSet: 0,
 Top: 1,
 Bottom: 2,
 Max: 3
});

var _htmlFrame = new EnumT('_htmlFrame', {
 NotSet: 0,
 Framevoid: 1,
 Frameabove: 2,
 Framebelow: 3,
 Framehsides: 4,
 Framelhs: 5,
 Framerhs: 6,
 Framevsides: 7,
 Framebox: 8,
 Frameborder: 9,
 Max: 10
});

var _htmlRules = new EnumT('_htmlRules', {
 NotSet: 0,
 Rulesnone: 1,
 Rulesgroups: 2,
 Rulesrows: 3,
 Rulescols: 4,
 Rulesall: 5,
 Max: 6
});

var _htmlCellAlign = new EnumT('_htmlCellAlign', {
 NotSet: 0,
 Left: 1,
 Center: 2,
 Right: 3,
 Middle: 4,
 Max: 5
});

var _htmlCellVAlign = new EnumT('_htmlCellVAlign', {
 NotSet: 0,
 Top: 1,
 Middle: 2,
 Bottom: 3,
 Baseline: 4,
 Center: 5,
 Max: 6
});

var _frameScrolling = new EnumT('_frameScrolling', {
 Scrollingyes: 1,
 Scrollingno: 2,
 Scrollingauto: 4,
 Max: 3
});

var _ELEMENT_CORNER = new EnumT('_ELEMENT_CORNER', {
 None: 0,
 Top: 1,
 Left: 2,
 Bottom: 3,
 Right: 4,
 Topleft: 5,
 Topright: 6,
 Bottomleft: 7,
 Bottomright: 8,
 Max: 9
});

var _SECUREURLHOSTVALIDATE_FLAGS = new EnumT('_SECUREURLHOSTVALIDATE_FLAGS', {
 SuhvPromptbeforeno: 0x1,
 SuhvSilentyes: 0x2,
 SuhvUnsecuresource: 0x4,
 Max: 3
});

var _POINTER_GRAVITY = new EnumT('_POINTER_GRAVITY', {
 Left: 0,
 Right: 1,
 Max: 2
});

var _ELEMENT_ADJACENCY = new EnumT('_ELEMENT_ADJACENCY', {
 BeforeBegin: 0,
 AfterBegin: 1,
 BeforeEnd: 2,
 AfterEnd: 3,
 Max: 4
});

var _MARKUP_CONTEXT_TYPE = new EnumT('_MARKUP_CONTEXT_TYPE', {
 None: 0,
 Text: 1,
 EnterScope: 2,
 ExitScope: 3,
 NoScope: 4,
 Max: 5
});

var _FINDTEXT_FLAGS = new EnumT('_FINDTEXT_FLAGS', {
 Backwards: 0x1,
 Wholeword: 0x2,
 Matchcase: 0x4,
 Raw: 0x20000,
 Matchdiac: 0x20000000,
 Matchkashida: 0x40000000,
 Matchalefhamza: 6,
 Max: 7
});

var _MOVEUNIT_ACTION = new EnumT('_MOVEUNIT_ACTION', {
 Prevchar: 0,
 Nextchar: 1,
 Prevclusterbegin: 2,
 Nextclusterbegin: 3,
 Prevclusterend: 4,
 Nextclusterend: 5,
 Prevwordbegin: 6,
 Nextwordbegin: 7,
 Prevwordend: 8,
 Nextwordend: 9,
 Prevproofword: 10,
 Nextproofword: 11,
 Nexturlbegin: 12,
 Prevurlbegin: 13,
 Nexturlend: 14,
 Prevurlend: 15,
 Prevsentence: 16,
 Nextsentence: 17,
 Prevblock: 18,
 Nextblock: 19,
 Max: 20
});

var _PARSE_FLAGS = new EnumT('_PARSE_FLAGS', {
 Absolutifyie40urls: 0x1,
 Max: 1
});

var _ELEMENT_TAG_ID = new EnumT('_ELEMENT_TAG_ID', {
 Null: 0,
 Unknown: 1,
 A: 2,
 Acronym: 3,
 Address: 4,
 Applet: 5,
 Area: 6,
 B: 7,
 Base: 8,
 Basefont: 9,
 Bdo: 10,
 Bgsound: 11,
 Big: 12,
 Blink: 13,
 Blockquote: 14,
 Body: 15,
 Br: 16,
 Button: 17,
 Caption: 18,
 Center: 19,
 Cite: 20,
 Code: 21,
 Col: 22,
 Colgroup: 23,
 Comment: 24,
 CommentRaw: 25,
 Dd: 26,
 Del: 27,
 Dfn: 28,
 Dir: 29,
 Div: 30,
 Dl: 31,
 Dt: 32,
 Em: 33,
 Embed: 34,
 Fieldset: 35,
 Font: 36,
 Form: 37,
 Frame: 38,
 Frameset: 39,
 Generic: 40,
 H1: 41,
 H2: 42,
 H3: 43,
 H4: 44,
 H5: 45,
 H6: 46,
 Head: 47,
 Hr: 48,
 Html: 49,
 I: 50,
 Iframe: 51,
 Img: 52,
 Input: 53,
 Ins: 54,
 Kbd: 55,
 Label: 56,
 Legend: 57,
 Li: 58,
 Link: 59,
 Listing: 60,
 Map: 61,
 Marquee: 62,
 Menu: 63,
 Meta: 64,
 Nextid: 65,
 Nobr: 66,
 Noembed: 67,
 Noframes: 68,
 Noscript: 69,
 Object: 70,
 Ol: 71,
 Option: 72,
 P: 73,
 Param: 74,
 Plaintext: 75,
 Pre: 76,
 Q: 77,
 Rp: 78,
 Rt: 79,
 Ruby: 80,
 S: 81,
 Samp: 82,
 Script: 83,
 Select: 84,
 Small: 85,
 Span: 86,
 Strike: 87,
 Strong: 88,
 Style: 89,
 Sub: 90,
 Sup: 91,
 Table: 92,
 Tbody: 93,
 Tc: 94,
 Td: 95,
 Textarea: 96,
 Tfoot: 97,
 Th: 98,
 Thead: 99,
 Title: 100,
 Tr: 101,
 Tt: 102,
 U: 103,
 Ul: 104,
 Var: 105,
 Wbr: 106,
 Xmp: 107,
 Root: 108,
 Optgroup: 109,
 Abbr: 110,
 Count: 111,
 LastPredefined: 10000,
 Max: 113
});

var _SELECTION_TYPE = new EnumT('_SELECTION_TYPE', {
 None: 0,
 Caret: 1,
 Text: 2,
 Control: 3,
 Max: 4
});

var _SAVE_SEGMENTS_FLAGS = new EnumT('_SAVE_SEGMENTS_FLAGS', {
 NoIe4SelectionCompat: 0x1,
 Max: 1
});

var _CARET_DIRECTION = new EnumT('_CARET_DIRECTION', {
 Indeterminate: 0,
 Same: 1,
 Backward: 2,
 Forward: 3,
 Max: 4
});

var _LINE_DIRECTION = new EnumT('_LINE_DIRECTION', {
 RightToLeft: 1,
 LeftToRight: 2,
 Max: 2
});

var _HT_OPTIONS = new EnumT('_HT_OPTIONS', {
 AllowAfterEol: 0x1,
 Max: 1
});

var _HT_RESULTS = new EnumT('_HT_RESULTS', {
 Glyph: 0x1,
 Max: 1
});

var _DISPLAY_MOVEUNIT = new EnumT('_DISPLAY_MOVEUNIT', {
 PreviousLine: 1,
 NextLine: 2,
 CurrentLineStart: 3,
 CurrentLineEnd: 4,
 TopOfWindow: 5,
 BottomOfWindow: 6,
 Max: 6
});

var _DISPLAY_GRAVITY = new EnumT('_DISPLAY_GRAVITY', {
 PreviousLine: 1,
 NextLine: 2,
 Max: 2
});

var _DISPLAY_BREAK = new EnumT('_DISPLAY_BREAK', {
 None: 0,
 Block: 0x1,
 Break: 0x2,
 Max: 3
});

var _COORD_SYSTEM = new EnumT('_COORD_SYSTEM', {
 Global: 0,
 Parent: 1,
 Container: 2,
 Content: 3,
 Frame: 4,
 Max: 5
});

var _HTML_PAINTER = new EnumT('_HTML_PAINTER', {
 Opaque: 0x1,
 Transparent: 0x2,
 Alpha: 0x4,
 Complex: 0x8,
 Overlay: 0x10,
 Hittest: 0x20,
 Surface: 0x100,
 3dsurface: 0x200,
 Noband: 0x400,
 Nodc: 0x1000,
 Nophysicalclip: 0x2000,
 Nosavedc: 0x4000,
 SupportsXform: 0x8000,
 Expand: 0x10000,
 Noscrollbits: 0x20000,
 Max: 15
});

var _HTML_PAINT_ZORDER = new EnumT('_HTML_PAINT_ZORDER', {
 None: 0,
 ReplaceAll: 1,
 ReplaceContent: 2,
 ReplaceBackground: 3,
 BelowContent: 4,
 BelowFlow: 5,
 AboveFlow: 6,
 AboveContent: 7,
 WindowTop: 8,
 Max: 9
});

var _HTML_PAINT_DRAW_FLAGS = new EnumT('_HTML_PAINT_DRAW_FLAGS', {
 Updateregion: 0x1,
 UseXform: 0x2,
 Max: 2
});

var _HTML_PAINT_EVENT_FLAGS = new EnumT('_HTML_PAINT_EVENT_FLAGS', {
 Target: 0x1,
 Setcursor: 0x2,
 Max: 2
});

var _HTML_PAINT_DRAW_INFO_FLAGS = new EnumT('_HTML_PAINT_DRAW_INFO_FLAGS', {
 Viewport: 0x1,
 Updateregion: 0x2,
 Xform: 0x4,
 Max: 3
});

var _HTMLDlgFlag = new EnumT('_HTMLDlgFlag', {
 No: 0,
 Off: 0,
 0: 0,
 Yes: 1,
 On: 1,
 1: 1,
 NotSet: 6,
 Max: 7
});

var _HTMLDlgBorder = new EnumT('_HTMLDlgBorder', {
 Thin: 0,
 Thick: 1,
 Max: 2
});

var _HTMLDlgEdge = new EnumT('_HTMLDlgEdge', {
 Sunken: 0,
 Raised: 16,
 Max: 2
});

var _HTMLDlgCenter = new EnumT('_HTMLDlgCenter', {
 No: 0,
 Off: 0,
 0: 0,
 Yes: 1,
 On: 1,
 1: 1,
 Parent: 1,
 Desktop: 2,
 Max: 8
});

var _HTMLAppFlag = new EnumT('_HTMLAppFlag', {
 No: 0,
 Off: 0,
 0: 0,
 Yes: 1,
 On: 1,
 1: 1,
 Max: 6
});

var _HTMLMinimizeFlag = new EnumT('_HTMLMinimizeFlag', {
 No: 0,
 Yes: 1,
 Max: 2
});

var _HTMLMaximizeFlag = new EnumT('_HTMLMaximizeFlag', {
 No: 0,
 Yes: 1,
 Max: 2
});

var _HTMLCaptionFlag = new EnumT('_HTMLCaptionFlag', {
 No: 0,
 Yes: 1,
 Max: 2
});

var _HTMLSysMenuFlag = new EnumT('_HTMLSysMenuFlag', {
 No: 0,
 Yes: 1,
 Max: 2
});

var _HTMLBorder = new EnumT('_HTMLBorder', {
 None: 0,
 Thick: 1,
 Dialog: 2,
 Thin: 3,
 Max: 4
});

var _HTMLBorderStyle = new EnumT('_HTMLBorderStyle', {
 Normal: 0,
 Raised: 1,
 Sunken: 2,
 Stylecombined: 3,
 Static: 4,
 Max: 5
});

var _HTMLWindowState = new EnumT('_HTMLWindowState', {
 Normal: 1,
 Maximize: 3,
 Minimize: 6,
 Max: 3
});

var _BEHAVIOR_EVENT = new EnumT('_BEHAVIOR_EVENT', {
 First: 0,
 Contentready: 0,
 Documentready: 1,
 Applystyle: 2,
 Documentcontextchange: 3,
 Contentsave: 4,
 Last: 4,
 Max: 7
});

var _BEHAVIOR_EVENT_FLAGS = new EnumT('_BEHAVIOR_EVENT_FLAGS', {
 Bubble: 1,
 Standardadditive: 2,
 Max: 2
});

var _BEHAVIOR_RENDER_INFO = new EnumT('_BEHAVIOR_RENDER_INFO', {
 Beforebackground: 0x1,
 Afterbackground: 0x2,
 Beforecontent: 0x4,
 Aftercontent: 0x8,
 Afterforeground: 0x20,
 Abovecontent: 0x28,
 Alllayers: 0xff,
 Disablebackground: 0x100,
 Disablenegativez: 0x200,
 Disablecontent: 0x400,
 Disablepositivez: 0x800,
 Disablealllayers: 0xf00,
 Hittesting: 0x1000,
 Surface: 0x100000,
 3dsurface: 0x200000,
 Max: 15
});

var _BEHAVIOR_RELATION = new EnumT('_BEHAVIOR_RELATION', {
 Firstrelation: 0,
 Sameelement: 0,
 Parent: 1,
 Child: 2,
 Sibling: 3,
 Lastrelation: 3,
 Max: 6
});

var _BEHAVIOR_LAYOUT_INFO = new EnumT('_BEHAVIOR_LAYOUT_INFO', {
 Fulldelegation: 0x1,
 Modifynatural: 0x2,
 Mapsize: 0x4,
 Max: 3
});

var _BEHAVIOR_LAYOUT_MODE = new EnumT('_BEHAVIOR_LAYOUT_MODE', {
 Natural: 0x1,
 Minwidth: 0x2,
 Maxwidth: 0x4,
 MediaResolution: 0x4000,
 FinalPercent: 0x8000,
 Max: 5
});

var _ELEMENTDESCRIPTOR_FLAGS = new EnumT('_ELEMENTDESCRIPTOR_FLAGS', {
 Literal: 1,
 NestedLiteral: 2,
 Max: 2
});

var _ELEMENTNAMESPACE_FLAGS = new EnumT('_ELEMENTNAMESPACE_FLAGS', {
 Allowanytag: 0x1,
 Queryforunknowntags: 0x2,
 Max: 2
});


  PEXCEPTION_ROUTINE = new CallbackT('PEXCEPTION_ROUTINE', _EXCEPTION_DISPOSITION, { 0: _EXCEPTION_RECORD.Δ, 1: VoidT.Δ, 2: _CONTEXT.Δ, 3: VoidT.Δ }),
  PIMAGE_TLS_CALLBACK = new CallbackT('PIMAGE_TLS_CALLBACK', VoidT, { 0: VoidT.Δ, 1: ulong, 2: VoidT.Δ }),
  PRTL_RUN_ONCE_INIT_FN = new CallbackT('PRTL_RUN_ONCE_INIT_FN', ulong, { 0: _RTL_RUN_ONCE.Δ, 1: VoidT.Δ, 2: VoidT.Δ.Δ }),
  PRTL_UMS_SCHEDULER_ENTRY_POINT = new CallbackT('PRTL_UMS_SCHEDULER_ENTRY_POINT', VoidT, { 0: _RTL_UMS_SCHEDULER_REASON, 1: ulong, 2: VoidT.Δ }),
  PAPCFUNC = new CallbackT('PAPCFUNC', VoidT, { 0: ulong }),
  PVECTORED_EXCEPTION_HANDLER = new CallbackT('PVECTORED_EXCEPTION_HANDLER', long, { 0: _EXCEPTION_POINTERS.Δ }),
  WAITORTIMERCALLBACKFUNC = new CallbackT('WAITORTIMERCALLBACKFUNC', VoidT, { 0: VoidT.Δ, 1: uchar }),
  WORKERCALLBACKFUNC = new CallbackT('WORKERCALLBACKFUNC', VoidT, { 0: VoidT.Δ }),
  APC_CALLBACK_FUNCTION = new CallbackT('APC_CALLBACK_FUNCTION', VoidT, { 0: ulong, 1: VoidT.Δ, 2: VoidT.Δ }),
  PFLS_CALLBACK_FUNCTION = new CallbackT('PFLS_CALLBACK_FUNCTION', VoidT, { 0: VoidT.Δ }),
  PSECURE_MEMORY_CACHE_CALLBACK = new CallbackT('PSECURE_MEMORY_CACHE_CALLBACK', uchar, { 0: VoidT.Δ, 1: ulong }),
  PTP_SIMPLE_CALLBACK = new CallbackT('PTP_SIMPLE_CALLBACK', VoidT, { 0: TP_CALLBACK_INSTANCE.Δ, 1: VoidT.Δ }),
  PTP_CLEANUP_GROUP_CANCEL_CALLBACK = new CallbackT('PTP_CLEANUP_GROUP_CANCEL_CALLBACK', VoidT, { 0: VoidT.Δ, 1: VoidT.Δ }),
  PTP_WORK_CALLBACK = new CallbackT('PTP_WORK_CALLBACK', VoidT, { 0: TP_CALLBACK_INSTANCE.Δ, 1: VoidT.Δ, 2: TP_WORK.Δ }),
  PTP_TIMER_CALLBACK = new CallbackT('PTP_TIMER_CALLBACK', VoidT, { 0: TP_CALLBACK_INSTANCE.Δ, 1: VoidT.Δ, 2: TP_TIMER.Δ }),
  PTP_WAIT_CALLBACK = new CallbackT('PTP_WAIT_CALLBACK', VoidT, { 0: TP_CALLBACK_INSTANCE.Δ, 1: VoidT.Δ, 2: TP_WAIT.Δ, 3: ulong }),
  PTHREAD_START_ROUTINE = new CallbackT('PTHREAD_START_ROUTINE', ulong, { 0: VoidT.Δ }),
  LPTHREAD_START_ROUTINE = new CallbackT('LPTHREAD_START_ROUTINE', ulong, { 0: VoidT.Δ }),
  PFIBER_START_ROUTINE = new CallbackT('PFIBER_START_ROUTINE', VoidT, { 0: VoidT.Δ }),
  LPFIBER_START_ROUTINE = new CallbackT('LPFIBER_START_ROUTINE', VoidT, { 0: VoidT.Δ }),
  PINIT_ONCE_FN = new CallbackT('PINIT_ONCE_FN', int, { 0: _RTL_RUN_ONCE.Δ, 1: VoidT.Δ, 2: VoidT.Δ.Δ }),
  PTOP_LEVEL_EXCEPTION_FILTER = new CallbackT('PTOP_LEVEL_EXCEPTION_FILTER', long, { 0: _EXCEPTION_POINTERS.Δ }),
  LPTOP_LEVEL_EXCEPTION_FILTER = new CallbackT('LPTOP_LEVEL_EXCEPTION_FILTER', long, { 0: _EXCEPTION_POINTERS.Δ }),
  PUMS_SCHEDULER_ENTRY_POINT = new CallbackT('PUMS_SCHEDULER_ENTRY_POINT', VoidT, { 0: UMS_SCHEDULER_REASON, 1: ulong, 2: VoidT.Δ }),
  PFE_EXPORT_FUNC = new CallbackT('PFE_EXPORT_FUNC', ulong, { 0: uchar.Δ, 1: VoidT.Δ, 2: ulong }),
  PFE_IMPORT_FUNC = new CallbackT('PFE_IMPORT_FUNC', ulong, { 0: uchar.Δ, 1: VoidT.Δ, 2: ulong.Δ }),
  LPOVERLAPPED_COMPLETION_ROUTINE = new CallbackT('LPOVERLAPPED_COMPLETION_ROUTINE', VoidT, { 0: ulong, 1: ulong, 2: _OVERLAPPED.Δ }),
  PTIMERAPCROUTINE = new CallbackT('PTIMERAPCROUTINE', VoidT, { 0: VoidT.Δ, 1: ulong, 2: ulong }),
  PGET_MODULE_HANDLE_EXA = new CallbackT('PGET_MODULE_HANDLE_EXA', int, { 0: ulong, 1: int8.Δ, 2: HINSTANCE__.Δ.Δ }),
  PGET_MODULE_HANDLE_EXW = new CallbackT('PGET_MODULE_HANDLE_EXW', int, { 0: ulong, 1: ushort.Δ, 2: HINSTANCE__.Δ.Δ }),
  ENUMRESTYPEPROCA = new CallbackT('ENUMRESTYPEPROCA', int, { 0: HINSTANCE__.Δ, 1: int8.Δ, 2: long }),
  ENUMRESTYPEPROCW = new CallbackT('ENUMRESTYPEPROCW', int, { 0: HINSTANCE__.Δ, 1: ushort.Δ, 2: long }),
  ENUMRESNAMEPROCA = new CallbackT('ENUMRESNAMEPROCA', int, { 0: HINSTANCE__.Δ, 1: int8.Δ, 2: int8.Δ, 3: long }),
  ENUMRESNAMEPROCW = new CallbackT('ENUMRESNAMEPROCW', int, { 0: HINSTANCE__.Δ, 1: ushort.Δ, 2: ushort.Δ, 3: long }),
  ENUMRESLANGPROCA = new CallbackT('ENUMRESLANGPROCA', int, { 0: HINSTANCE__.Δ, 1: int8.Δ, 2: int8.Δ, 3: ushort, 4: long }),
  ENUMRESLANGPROCW = new CallbackT('ENUMRESLANGPROCW', int, { 0: HINSTANCE__.Δ, 1: ushort.Δ, 2: ushort.Δ, 3: ushort, 4: long }),
  PGET_SYSTEM_WOW64_DIRECTORY_A = new CallbackT('PGET_SYSTEM_WOW64_DIRECTORY_A', uint, { 0: int8.Δ, 1: uint }),
  PGET_SYSTEM_WOW64_DIRECTORY_W = new CallbackT('PGET_SYSTEM_WOW64_DIRECTORY_W', uint, { 0: ushort.Δ, 1: uint }),
  LPPROGRESS_ROUTINE = new CallbackT('LPPROGRESS_ROUTINE', ulong, { 0: _LARGE_INTEGER, 1: _LARGE_INTEGER, 2: _LARGE_INTEGER, 3: _LARGE_INTEGER, 4: ulong, 5: ulong, 6: VoidT.Δ, 7: VoidT.Δ, 8: VoidT.Δ }),
  WAITORTIMERCALLBACK = new CallbackT('WAITORTIMERCALLBACK', VoidT, { 0: VoidT.Δ, 1: uchar }),
  PTP_WIN32_IO_CALLBACK = new CallbackT('PTP_WIN32_IO_CALLBACK', VoidT, { 0: TP_CALLBACK_INSTANCE.Δ, 1: VoidT.Δ, 2: VoidT.Δ, 3: ulong, 4: ulong, 5: TP_IO.Δ }),
  PQUERYACTCTXW_FUNC = new CallbackT('PQUERYACTCTXW_FUNC', int, { 0: ulong, 1: VoidT.Δ, 2: VoidT.Δ, 3: ulong, 4: VoidT.Δ, 5: ulong, 6: ulong.Δ }),
  APPLICATION_RECOVERY_CALLBACK = new CallbackT('APPLICATION_RECOVERY_CALLBACK', ulong, { 0: VoidT.Δ }),
  OLDFONTENUMPROCA = new CallbackT('OLDFONTENUMPROCA', int, { 0: LOGFONT.Δ, 1: TEXTMETRIC.Δ, 2: ulong, 3: long }),
  OLDFONTENUMPROCW = new CallbackT('OLDFONTENUMPROCW', int, { 0: tagLOGFONTW.Δ, 1: tagTEXTMETRICW.Δ, 2: ulong, 3: long }),
  FONTENUMPROCA = new CallbackT('FONTENUMPROCA', int, { 0: LOGFONT.Δ, 1: TEXTMETRIC.Δ, 2: ulong, 3: long }),
  FONTENUMPROCW = new CallbackT('FONTENUMPROCW', int, { 0: tagLOGFONTW.Δ, 1: tagTEXTMETRICW.Δ, 2: ulong, 3: long }),
  FONTENUMPROC = new CallbackT('FONTENUMPROC', int, { 0: LOGFONT.Δ, 1: TEXTMETRIC.Δ, 2: ulong, 3: long }),
  GOBJENUMPROC = new CallbackT('GOBJENUMPROC', int, { 0: VoidT.Δ, 1: long }),
  LINEDDAPROC = new CallbackT('LINEDDAPROC', VoidT, { 0: int, 1: int, 2: long }),
  LPFNDEVMODE = new CallbackT('LPFNDEVMODE', uint, { 0: HWND__.Δ, 1: HINSTANCE__.Δ, 2: DEVMODE.Δ, 3: int8.Δ, 4: int8.Δ, 5: DEVMODE.Δ, 6: int8.Δ, 7: uint }),
  LPFNDEVCAPS = new CallbackT('LPFNDEVCAPS', ulong, { 0: int8.Δ, 1: int8.Δ, 2: uint, 3: int8.Δ, 4: DEVMODE.Δ }),
  MFENUMPROC = new CallbackT('MFENUMPROC', int, { 0: HDC__.Δ, 1: tagHANDLETABLE.Δ, 2: tagMETARECORD.Δ, 3: int, 4: long }),
  ENHMFENUMPROC = new CallbackT('ENHMFENUMPROC', int, { 0: HDC__.Δ, 1: tagHANDLETABLE.Δ, 2: tagENHMETARECORD.Δ, 3: int, 4: long }),
  ABORTPROC = new CallbackT('ABORTPROC', int, { 0: HDC__.Δ, 1: int }),
  ICMENUMPROCA = new CallbackT('ICMENUMPROCA', int, { 0: int8.Δ, 1: long }),
  ICMENUMPROCW = new CallbackT('ICMENUMPROCW', int, { 0: ushort.Δ, 1: long }),
  WNDPROC = new CallbackT('WNDPROC', long, { 0: HWND__.Δ, 1: uint, 2: uint, 3: long }),
  DLGPROC = new CallbackT('DLGPROC', int, { 0: HWND__.Δ, 1: uint, 2: uint, 3: long }),
  TIMERPROC = new CallbackT('TIMERPROC', VoidT, { 0: HWND__.Δ, 1: uint, 2: uint, 3: ulong }),
  GRAYSTRINGPROC = new CallbackT('GRAYSTRINGPROC', int, { 0: HDC__.Δ, 1: long, 2: int }),
  WNDENUMPROC = new CallbackT('WNDENUMPROC', int, { 0: HWND__.Δ, 1: long }),
  HOOKPROC = new CallbackT('HOOKPROC', long, { 0: int, 1: uint, 2: long }),
  SENDASYNCPROC = new CallbackT('SENDASYNCPROC', VoidT, { 0: HWND__.Δ, 1: uint, 2: ulong, 3: long }),
  PROPENUMPROCA = new CallbackT('PROPENUMPROCA', int, { 0: HWND__.Δ, 1: int8.Δ, 2: VoidT.Δ }),
  PROPENUMPROCW = new CallbackT('PROPENUMPROCW', int, { 0: HWND__.Δ, 1: ushort.Δ, 2: VoidT.Δ }),
  PROPENUMPROCEXA = new CallbackT('PROPENUMPROCEXA', int, { 0: HWND__.Δ, 1: int8.Δ, 2: VoidT.Δ, 3: ulong }),
  PROPENUMPROCEXW = new CallbackT('PROPENUMPROCEXW', int, { 0: HWND__.Δ, 1: ushort.Δ, 2: VoidT.Δ, 3: ulong }),
  EDITWORDBREAKPROCA = new CallbackT('EDITWORDBREAKPROCA', int, { 0: int8.Δ, 1: int, 2: int, 3: int }),
  EDITWORDBREAKPROCW = new CallbackT('EDITWORDBREAKPROCW', int, { 0: ushort.Δ, 1: int, 2: int, 3: int }),
  DRAWSTATEPROC = new CallbackT('DRAWSTATEPROC', int, { 0: HDC__.Δ, 1: long, 2: uint, 3: int, 4: int }),
  PROPENUMPROC = new CallbackT('PROPENUMPROC', int, { 0: HWND__.Δ, 1: int8.Δ, 2: VoidT.Δ }),
  PROPENUMPROCEX = new CallbackT('PROPENUMPROCEX', int, { 0: HWND__.Δ, 1: int8.Δ, 2: VoidT.Δ, 3: ulong }),
  EDITWORDBREAKPROC = new CallbackT('EDITWORDBREAKPROC', int, { 0: int8.Δ, 1: int, 2: int, 3: int }),
  NAMEENUMPROCA = new CallbackT('NAMEENUMPROCA', int, { 0: int8.Δ, 1: long }),
  NAMEENUMPROCW = new CallbackT('NAMEENUMPROCW', int, { 0: ushort.Δ, 1: long }),
  WINSTAENUMPROCA = new CallbackT('WINSTAENUMPROCA', int, { 0: int8.Δ, 1: long }),
  DESKTOPENUMPROCA = new CallbackT('DESKTOPENUMPROCA', int, { 0: int8.Δ, 1: long }),
  WINSTAENUMPROCW = new CallbackT('WINSTAENUMPROCW', int, { 0: ushort.Δ, 1: long }),
  DESKTOPENUMPROCW = new CallbackT('DESKTOPENUMPROCW', int, { 0: ushort.Δ, 1: long }),
  WINSTAENUMPROC = new CallbackT('WINSTAENUMPROC', int, { 0: int8.Δ, 1: long }),
  DESKTOPENUMPROC = new CallbackT('DESKTOPENUMPROC', int, { 0: int8.Δ, 1: long }),
  PREGISTERCLASSNAMEW = new CallbackT('PREGISTERCLASSNAMEW', uchar, { 0: ushort.Δ }),
  MSGBOXCALLBACK = new CallbackT('MSGBOXCALLBACK', VoidT, { 0: tagHELPINFO.Δ }),
  MONITORENUMPROC = new CallbackT('MONITORENUMPROC', int, { 0: HMONITOR__.Δ, 1: HDC__.Δ, 2: tagRECT.Δ, 3: long }),
  WINEVENTPROC = new CallbackT('WINEVENTPROC', VoidT, { 0: HWINEVENTHOOK__.Δ, 1: ulong, 2: HWND__.Δ, 3: long, 4: long, 5: ulong, 6: ulong }),
  LANGUAGEGROUP_ENUMPROCA = new CallbackT('LANGUAGEGROUP_ENUMPROCA', int, { 0: ulong, 1: int8.Δ, 2: int8.Δ, 3: ulong, 4: long }),
  LANGGROUPLOCALE_ENUMPROCA = new CallbackT('LANGGROUPLOCALE_ENUMPROCA', int, { 0: ulong, 1: ulong, 2: int8.Δ, 3: long }),
  UILANGUAGE_ENUMPROCA = new CallbackT('UILANGUAGE_ENUMPROCA', int, { 0: int8.Δ, 1: long }),
  LOCALE_ENUMPROCA = new CallbackT('LOCALE_ENUMPROCA', int, { 0: int8.Δ }),
  CODEPAGE_ENUMPROCA = new CallbackT('CODEPAGE_ENUMPROCA', int, { 0: int8.Δ }),
  DATEFMT_ENUMPROCA = new CallbackT('DATEFMT_ENUMPROCA', int, { 0: int8.Δ }),
  DATEFMT_ENUMPROCEXA = new CallbackT('DATEFMT_ENUMPROCEXA', int, { 0: int8.Δ, 1: ulong }),
  TIMEFMT_ENUMPROCA = new CallbackT('TIMEFMT_ENUMPROCA', int, { 0: int8.Δ }),
  CALINFO_ENUMPROCA = new CallbackT('CALINFO_ENUMPROCA', int, { 0: int8.Δ }),
  CALINFO_ENUMPROCEXA = new CallbackT('CALINFO_ENUMPROCEXA', int, { 0: int8.Δ, 1: ulong }),
  LANGUAGEGROUP_ENUMPROCW = new CallbackT('LANGUAGEGROUP_ENUMPROCW', int, { 0: ulong, 1: ushort.Δ, 2: ushort.Δ, 3: ulong, 4: long }),
  LANGGROUPLOCALE_ENUMPROCW = new CallbackT('LANGGROUPLOCALE_ENUMPROCW', int, { 0: ulong, 1: ulong, 2: ushort.Δ, 3: long }),
  UILANGUAGE_ENUMPROCW = new CallbackT('UILANGUAGE_ENUMPROCW', int, { 0: ushort.Δ, 1: long }),
  LOCALE_ENUMPROCW = new CallbackT('LOCALE_ENUMPROCW', int, { 0: ushort.Δ }),
  CODEPAGE_ENUMPROCW = new CallbackT('CODEPAGE_ENUMPROCW', int, { 0: ushort.Δ }),
  DATEFMT_ENUMPROCW = new CallbackT('DATEFMT_ENUMPROCW', int, { 0: ushort.Δ }),
  DATEFMT_ENUMPROCEXW = new CallbackT('DATEFMT_ENUMPROCEXW', int, { 0: ushort.Δ, 1: ulong }),
  TIMEFMT_ENUMPROCW = new CallbackT('TIMEFMT_ENUMPROCW', int, { 0: ushort.Δ }),
  CALINFO_ENUMPROCW = new CallbackT('CALINFO_ENUMPROCW', int, { 0: ushort.Δ }),
  CALINFO_ENUMPROCEXW = new CallbackT('CALINFO_ENUMPROCEXW', int, { 0: ushort.Δ, 1: ulong }),
  GEO_ENUMPROC = new CallbackT('GEO_ENUMPROC', int, { 0: long }),
  CALINFO_ENUMPROCEXEX = new CallbackT('CALINFO_ENUMPROCEXEX', int, { 0: ushort.Δ, 1: ulong, 2: ushort.Δ, 3: long }),
  DATEFMT_ENUMPROCEXEX = new CallbackT('DATEFMT_ENUMPROCEXEX', int, { 0: ushort.Δ, 1: ulong, 2: long }),
  TIMEFMT_ENUMPROCEX = new CallbackT('TIMEFMT_ENUMPROCEX', int, { 0: ushort.Δ, 1: long }),
  LOCALE_ENUMPROCEX = new CallbackT('LOCALE_ENUMPROCEX', int, { 0: ushort.Δ, 1: ulong, 2: long }),
  PHANDLER_ROUTINE = new CallbackT('PHANDLER_ROUTINE', int, { 0: ulong }),
  PQUERYHANDLER = new CallbackT('PQUERYHANDLER', ulong, { 0: VoidT.Δ, 1: val_context.Δ, 2: ulong, 3: VoidT.Δ, 4: ulong.Δ, 5: ulong }),
  PFNCALLBACK = new CallbackT('PFNCALLBACK', HDDEDATA__.Δ, { 0: uint, 1: uint, 2: HCONV__.Δ, 3: HSZ__.Δ, 4: HSZ__.Δ, 5: HDDEDATA__.Δ, 6: ulong, 7: ulong }),
  DRIVERPROC = new CallbackT('DRIVERPROC', long, { 0: ulong, 1: HDRVR__.Δ, 2: uint, 3: long, 4: long }),
  LPDRVCALLBACK = new CallbackT('LPDRVCALLBACK', VoidT, { 0: HDRVR__.Δ, 1: uint, 2: ulong, 3: ulong, 4: ulong }),
  PDRVCALLBACK = new CallbackT('PDRVCALLBACK', VoidT, { 0: HDRVR__.Δ, 1: uint, 2: ulong, 3: ulong, 4: ulong }),
  LPWAVECALLBACK = new CallbackT('LPWAVECALLBACK', VoidT, { 0: HDRVR__.Δ, 1: uint, 2: ulong, 3: ulong, 4: ulong }),
  LPMIDICALLBACK = new CallbackT('LPMIDICALLBACK', VoidT, { 0: HDRVR__.Δ, 1: uint, 2: ulong, 3: ulong, 4: ulong }),
  LPTIMECALLBACK = new CallbackT('LPTIMECALLBACK', VoidT, { 0: uint, 1: uint, 2: ulong, 3: ulong, 4: ulong }),
  LPMMIOPROC = new CallbackT('LPMMIOPROC', long, { 0: int8.Δ, 1: uint, 2: long, 3: long }),
  YIELDPROC = new CallbackT('YIELDPROC', uint, { 0: uint, 1: ulong }),
  RPC_NEW_HTTP_PROXY_CHANNEL = new CallbackT('RPC_NEW_HTTP_PROXY_CHANNEL', long, { 0: _RPC_HTTP_REDIRECTOR_STAGE, 1: ushort.Δ, 2: ushort.Δ, 3: ushort.Δ, 4: ushort.Δ, 5: VoidT.Δ, 6: VoidT.Δ, 7: VoidT.Δ, 8: VoidT.Δ, 9: ulong, 10: ushort.Δ.Δ, 11: ushort.Δ.Δ }),
  RPC_HTTP_PROXY_FREE_STRING = new CallbackT('RPC_HTTP_PROXY_FREE_STRING', VoidT, { 0: ushort.Δ }),
  RPC_AUTH_KEY_RETRIEVAL_FN = new CallbackT('RPC_AUTH_KEY_RETRIEVAL_FN', VoidT, { 0: VoidT.Δ, 1: ushort.Δ, 2: ulong, 3: VoidT.Δ.Δ, 4: long.Δ }),
  RPC_MGMT_AUTHORIZATION_FN = new CallbackT('RPC_MGMT_AUTHORIZATION_FN', int, { 0: VoidT.Δ, 1: ulong, 2: long.Δ }),
  RPC_DISPATCH_FUNCTION = new CallbackT('RPC_DISPATCH_FUNCTION', VoidT, { 0: _RPC_MESSAGE.Δ }),
  PRPC_RUNDOWN = new CallbackT('PRPC_RUNDOWN', VoidT, { 0: VoidT.Δ }),
  RPCLT_PDU_FILTER_FUNC = new CallbackT('RPCLT_PDU_FILTER_FUNC', VoidT, { 0: VoidT.Δ, 1: uint, 2: int }),
  RPC_SETFILTER_FUNC = new CallbackT('RPC_SETFILTER_FUNC', VoidT, { 0: new CallbackT(VoidT, [VoidT.Δ, uint, int]).Δ }),
  RPC_BLOCKING_FN = new CallbackT('RPC_BLOCKING_FN', long, { 0: VoidT.Δ, 1: VoidT.Δ, 2: VoidT.Δ }),
  I_RpcProxyIsValidMachineFn = new CallbackT('I_RpcProxyIsValidMachineFn', long, { 0: ushort.Δ, 1: ushort.Δ, 2: ulong }),
  I_RpcProxyGetClientAddressFn = new CallbackT('I_RpcProxyGetClientAddressFn', long, { 0: VoidT.Δ, 1: int8.Δ, 2: ulong.Δ }),
  I_RpcProxyGetConnectionTimeoutFn = new CallbackT('I_RpcProxyGetConnectionTimeoutFn', long, { 0: ulong.Δ }),
  I_RpcPerformCalloutFn = new CallbackT('I_RpcPerformCalloutFn', long, { 0: VoidT.Δ, 1: _RDR_CALLOUT_STATE.Δ, 2: _RPC_HTTP_REDIRECTOR_STAGE }),
  I_RpcFreeCalloutStateFn = new CallbackT('I_RpcFreeCalloutStateFn', VoidT, { 0: _RDR_CALLOUT_STATE.Δ }),
  I_RpcProxyGetClientSessionAndResourceUUID = new CallbackT('I_RpcProxyGetClientSessionAndResourceUUID', long, { 0: VoidT.Δ, 1: int.Δ, 2: UUID.Δ, 3: int.Δ, 4: UUID.Δ }),
  I_RpcProxyFilterIfFn = new CallbackT('I_RpcProxyFilterIfFn', long, { 0: VoidT.Δ, 1: UUID.Δ, 2: ushort, 3: int.Δ }),
  I_RpcProxyUpdatePerfCounterFn = new CallbackT('I_RpcProxyUpdatePerfCounterFn', VoidT, { 0: RpcProxyPerfCounters, 1: int, 2: ulong }),
  I_RpcProxyUpdatePerfCounterBackendServerFn = new CallbackT('I_RpcProxyUpdatePerfCounterBackendServerFn', VoidT, { 0: ushort.Δ, 1: int }),
  PFN_RPCNOTIFICATION_ROUTINE = new CallbackT('PFN_RPCNOTIFICATION_ROUTINE', VoidT, { 0: _RPC_ASYNC_STATE.Δ, 1: VoidT.Δ, 2: _RPC_ASYNC_EVENT }),
  PFNCANSHAREFOLDERW = new CallbackT('PFNCANSHAREFOLDERW', long, { 0: ushort.Δ }),
  PFNSHOWSHAREFOLDERUIW = new CallbackT('PFNSHOWSHAREFOLDERUIW', long, { 0: HWND__.Δ, 1: ushort.Δ }),
  PCRYPT_DECRYPT_PRIVATE_KEY_FUNC = new CallbackT('PCRYPT_DECRYPT_PRIVATE_KEY_FUNC', int, { 0: _CRYPT_ALGORITHM_IDENTIFIER, 1: _CRYPTOAPI_BLOB, 2: uchar.Δ, 3: ulong.Δ, 4: VoidT.Δ }),
  PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC = new CallbackT('PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC', int, { 0: _CRYPT_ALGORITHM_IDENTIFIER.Δ, 1: _CRYPTOAPI_BLOB.Δ, 2: uchar.Δ, 3: ulong.Δ, 4: VoidT.Δ }),
  PCRYPT_RESOLVE_HCRYPTPROV_FUNC = new CallbackT('PCRYPT_RESOLVE_HCRYPTPROV_FUNC', int, { 0: _CRYPT_PRIVATE_KEY_INFO.Δ, 1: ulong.Δ, 2: VoidT.Δ }),
  PFN_CRYPT_ALLOC = new CallbackT('PFN_CRYPT_ALLOC', VoidT.Δ, { 0: uint }),
  PFN_CRYPT_FREE = new CallbackT('PFN_CRYPT_FREE', VoidT, { 0: VoidT.Δ }),
  PFN_CRYPT_ENUM_OID_FUNC = new CallbackT('PFN_CRYPT_ENUM_OID_FUNC', int, { 0: ulong, 1: int8.Δ, 2: int8.Δ, 3: ulong, 4: ulong.Δ, 5: ushort.Δ.Δ, 6: uchar.Δ.Δ, 7: ulong.Δ, 8: VoidT.Δ }),
  PFN_CRYPT_ENUM_OID_INFO = new CallbackT('PFN_CRYPT_ENUM_OID_INFO', int, { 0: CCRYPT_OID_INFO.Δ, 1: VoidT.Δ }),
  PFN_CMSG_STREAM_OUTPUT = new CallbackT('PFN_CMSG_STREAM_OUTPUT', int, { 0: VoidT.Δ, 1: uchar.Δ, 2: ulong, 3: int }),
  PFN_CMSG_ALLOC = new CallbackT('PFN_CMSG_ALLOC', VoidT.Δ, { 0: uint }),
  PFN_CMSG_FREE = new CallbackT('PFN_CMSG_FREE', VoidT, { 0: VoidT.Δ }),
  PFN_CMSG_GEN_ENCRYPT_KEY = new CallbackT('PFN_CMSG_GEN_ENCRYPT_KEY', int, { 0: ulong.Δ, 1: _CRYPT_ALGORITHM_IDENTIFIER.Δ, 2: VoidT.Δ, 3: _CERT_PUBLIC_KEY_INFO.Δ, 4: new CallbackT(VoidT.Δ, [uint]).Δ, 5: ulong.Δ, 6: uchar.Δ.Δ, 7: ulong.Δ }),
  PFN_CMSG_EXPORT_ENCRYPT_KEY = new CallbackT('PFN_CMSG_EXPORT_ENCRYPT_KEY', int, { 0: ulong, 1: ulong, 2: _CERT_PUBLIC_KEY_INFO.Δ, 3: uchar.Δ, 4: ulong.Δ }),
  PFN_CMSG_IMPORT_ENCRYPT_KEY = new CallbackT('PFN_CMSG_IMPORT_ENCRYPT_KEY', int, { 0: ulong, 1: ulong, 2: _CRYPT_ALGORITHM_IDENTIFIER.Δ, 3: _CRYPT_ALGORITHM_IDENTIFIER.Δ, 4: uchar.Δ, 5: ulong, 6: ulong.Δ }),
  PFN_CMSG_GEN_CONTENT_ENCRYPT_KEY = new CallbackT('PFN_CMSG_GEN_CONTENT_ENCRYPT_KEY', int, { 0: _CMSG_CONTENT_ENCRYPT_INFO.Δ, 1: ulong, 2: VoidT.Δ }),
  PFN_CMSG_EXPORT_KEY_TRANS = new CallbackT('PFN_CMSG_EXPORT_KEY_TRANS', int, { 0: _CMSG_CONTENT_ENCRYPT_INFO.Δ, 1: _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO.Δ, 2: _CMSG_KEY_TRANS_ENCRYPT_INFO.Δ, 3: ulong, 4: VoidT.Δ }),
  PFN_CMSG_EXPORT_KEY_AGREE = new CallbackT('PFN_CMSG_EXPORT_KEY_AGREE', int, { 0: _CMSG_CONTENT_ENCRYPT_INFO.Δ, 1: _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO.Δ, 2: _CMSG_KEY_AGREE_ENCRYPT_INFO.Δ, 3: ulong, 4: VoidT.Δ }),
  PFN_CMSG_EXPORT_MAIL_LIST = new CallbackT('PFN_CMSG_EXPORT_MAIL_LIST', int, { 0: _CMSG_CONTENT_ENCRYPT_INFO.Δ, 1: _CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO.Δ, 2: _CMSG_MAIL_LIST_ENCRYPT_INFO.Δ, 3: ulong, 4: VoidT.Δ }),
  PFN_CMSG_IMPORT_KEY_TRANS = new CallbackT('PFN_CMSG_IMPORT_KEY_TRANS', int, { 0: _CRYPT_ALGORITHM_IDENTIFIER.Δ, 1: _CMSG_CTRL_KEY_TRANS_DECRYPT_PARA.Δ, 2: ulong, 3: VoidT.Δ, 4: ulong.Δ }),
  PFN_CMSG_IMPORT_KEY_AGREE = new CallbackT('PFN_CMSG_IMPORT_KEY_AGREE', int, { 0: _CRYPT_ALGORITHM_IDENTIFIER.Δ, 1: _CMSG_CTRL_KEY_AGREE_DECRYPT_PARA.Δ, 2: ulong, 3: VoidT.Δ, 4: ulong.Δ }),
  PFN_CMSG_IMPORT_MAIL_LIST = new CallbackT('PFN_CMSG_IMPORT_MAIL_LIST', int, { 0: _CRYPT_ALGORITHM_IDENTIFIER.Δ, 1: _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA.Δ, 2: ulong, 3: VoidT.Δ, 4: ulong.Δ }),
  PFN_CMSG_CNG_IMPORT_KEY_TRANS = new CallbackT('PFN_CMSG_CNG_IMPORT_KEY_TRANS', int, { 0: _CMSG_CNG_CONTENT_DECRYPT_INFO.Δ, 1: _CMSG_CTRL_KEY_TRANS_DECRYPT_PARA.Δ, 2: ulong, 3: VoidT.Δ }),
  PFN_CMSG_CNG_IMPORT_KEY_AGREE = new CallbackT('PFN_CMSG_CNG_IMPORT_KEY_AGREE', int, { 0: _CMSG_CNG_CONTENT_DECRYPT_INFO.Δ, 1: _CMSG_CTRL_KEY_AGREE_DECRYPT_PARA.Δ, 2: ulong, 3: VoidT.Δ }),
  PFN_CMSG_CNG_IMPORT_CONTENT_ENCRYPT_KEY = new CallbackT('PFN_CMSG_CNG_IMPORT_CONTENT_ENCRYPT_KEY', int, { 0: _CMSG_CNG_CONTENT_DECRYPT_INFO.Δ, 1: ulong, 2: VoidT.Δ }),
  PFN_CERT_DLL_OPEN_STORE_PROV_FUNC = new CallbackT('PFN_CERT_DLL_OPEN_STORE_PROV_FUNC', int, { 0: int8.Δ, 1: ulong, 2: ulong, 3: ulong, 4: VoidT.Δ, 5: VoidT.Δ, 6: _CERT_STORE_PROV_INFO.Δ }),
  PFN_CERT_STORE_PROV_CLOSE = new CallbackT('PFN_CERT_STORE_PROV_CLOSE', VoidT, { 0: VoidT.Δ, 1: ulong }),
  PFN_CERT_STORE_PROV_READ_CERT = new CallbackT('PFN_CERT_STORE_PROV_READ_CERT', int, { 0: VoidT.Δ, 1: _CERT_CONTEXT.Δ, 2: ulong, 3: _CERT_CONTEXT.Δ.Δ }),
  PFN_CERT_STORE_PROV_WRITE_CERT = new CallbackT('PFN_CERT_STORE_PROV_WRITE_CERT', int, { 0: VoidT.Δ, 1: _CERT_CONTEXT.Δ, 2: ulong }),
  PFN_CERT_STORE_PROV_DELETE_CERT = new CallbackT('PFN_CERT_STORE_PROV_DELETE_CERT', int, { 0: VoidT.Δ, 1: _CERT_CONTEXT.Δ, 2: ulong }),
  PFN_CERT_STORE_PROV_SET_CERT_PROPERTY = new CallbackT('PFN_CERT_STORE_PROV_SET_CERT_PROPERTY', int, { 0: VoidT.Δ, 1: _CERT_CONTEXT.Δ, 2: ulong, 3: ulong, 4: VoidT.Δ }),
  PFN_CERT_STORE_PROV_READ_CRL = new CallbackT('PFN_CERT_STORE_PROV_READ_CRL', int, { 0: VoidT.Δ, 1: _CRL_CONTEXT.Δ, 2: ulong, 3: _CRL_CONTEXT.Δ.Δ }),
  PFN_CERT_STORE_PROV_WRITE_CRL = new CallbackT('PFN_CERT_STORE_PROV_WRITE_CRL', int, { 0: VoidT.Δ, 1: _CRL_CONTEXT.Δ, 2: ulong }),
  PFN_CERT_STORE_PROV_DELETE_CRL = new CallbackT('PFN_CERT_STORE_PROV_DELETE_CRL', int, { 0: VoidT.Δ, 1: _CRL_CONTEXT.Δ, 2: ulong }),
  PFN_CERT_STORE_PROV_SET_CRL_PROPERTY = new CallbackT('PFN_CERT_STORE_PROV_SET_CRL_PROPERTY', int, { 0: VoidT.Δ, 1: _CRL_CONTEXT.Δ, 2: ulong, 3: ulong, 4: VoidT.Δ }),
  PFN_CERT_STORE_PROV_READ_CTL = new CallbackT('PFN_CERT_STORE_PROV_READ_CTL', int, { 0: VoidT.Δ, 1: _CTL_CONTEXT.Δ, 2: ulong, 3: _CTL_CONTEXT.Δ.Δ }),
  PFN_CERT_STORE_PROV_WRITE_CTL = new CallbackT('PFN_CERT_STORE_PROV_WRITE_CTL', int, { 0: VoidT.Δ, 1: _CTL_CONTEXT.Δ, 2: ulong }),
  PFN_CERT_STORE_PROV_DELETE_CTL = new CallbackT('PFN_CERT_STORE_PROV_DELETE_CTL', int, { 0: VoidT.Δ, 1: _CTL_CONTEXT.Δ, 2: ulong }),
  PFN_CERT_STORE_PROV_SET_CTL_PROPERTY = new CallbackT('PFN_CERT_STORE_PROV_SET_CTL_PROPERTY', int, { 0: VoidT.Δ, 1: _CTL_CONTEXT.Δ, 2: ulong, 3: ulong, 4: VoidT.Δ }),
  PFN_CERT_STORE_PROV_CONTROL = new CallbackT('PFN_CERT_STORE_PROV_CONTROL', int, { 0: VoidT.Δ, 1: ulong, 2: ulong, 3: VoidT.Δ }),
  PFN_CERT_STORE_PROV_FIND_CERT = new CallbackT('PFN_CERT_STORE_PROV_FIND_CERT', int, { 0: VoidT.Δ, 1: CCERT_STORE_PROV_FIND_INFO.Δ, 2: _CERT_CONTEXT.Δ, 3: ulong, 4: VoidT.Δ.Δ, 5: _CERT_CONTEXT.Δ.Δ }),
  PFN_CERT_STORE_PROV_FREE_FIND_CERT = new CallbackT('PFN_CERT_STORE_PROV_FREE_FIND_CERT', int, { 0: VoidT.Δ, 1: _CERT_CONTEXT.Δ, 2: VoidT.Δ, 3: ulong }),
  PFN_CERT_STORE_PROV_GET_CERT_PROPERTY = new CallbackT('PFN_CERT_STORE_PROV_GET_CERT_PROPERTY', int, { 0: VoidT.Δ, 1: _CERT_CONTEXT.Δ, 2: ulong, 3: ulong, 4: VoidT.Δ, 5: ulong.Δ }),
  PFN_CERT_STORE_PROV_FIND_CRL = new CallbackT('PFN_CERT_STORE_PROV_FIND_CRL', int, { 0: VoidT.Δ, 1: CCERT_STORE_PROV_FIND_INFO.Δ, 2: _CRL_CONTEXT.Δ, 3: ulong, 4: VoidT.Δ.Δ, 5: _CRL_CONTEXT.Δ.Δ }),
  PFN_CERT_STORE_PROV_FREE_FIND_CRL = new CallbackT('PFN_CERT_STORE_PROV_FREE_FIND_CRL', int, { 0: VoidT.Δ, 1: _CRL_CONTEXT.Δ, 2: VoidT.Δ, 3: ulong }),
  PFN_CERT_STORE_PROV_GET_CRL_PROPERTY = new CallbackT('PFN_CERT_STORE_PROV_GET_CRL_PROPERTY', int, { 0: VoidT.Δ, 1: _CRL_CONTEXT.Δ, 2: ulong, 3: ulong, 4: VoidT.Δ, 5: ulong.Δ }),
  PFN_CERT_STORE_PROV_FIND_CTL = new CallbackT('PFN_CERT_STORE_PROV_FIND_CTL', int, { 0: VoidT.Δ, 1: CCERT_STORE_PROV_FIND_INFO.Δ, 2: _CTL_CONTEXT.Δ, 3: ulong, 4: VoidT.Δ.Δ, 5: _CTL_CONTEXT.Δ.Δ }),
  PFN_CERT_STORE_PROV_FREE_FIND_CTL = new CallbackT('PFN_CERT_STORE_PROV_FREE_FIND_CTL', int, { 0: VoidT.Δ, 1: _CTL_CONTEXT.Δ, 2: VoidT.Δ, 3: ulong }),
  PFN_CERT_STORE_PROV_GET_CTL_PROPERTY = new CallbackT('PFN_CERT_STORE_PROV_GET_CTL_PROPERTY', int, { 0: VoidT.Δ, 1: _CTL_CONTEXT.Δ, 2: ulong, 3: ulong, 4: VoidT.Δ, 5: ulong.Δ }),
  PFN_CERT_CREATE_CONTEXT_SORT_FUNC = new CallbackT('PFN_CERT_CREATE_CONTEXT_SORT_FUNC', int, { 0: ulong, 1: ulong, 2: ulong, 3: VoidT.Δ }),
  PFN_CERT_ENUM_SYSTEM_STORE_LOCATION = new CallbackT('PFN_CERT_ENUM_SYSTEM_STORE_LOCATION', int, { 0: ushort.Δ, 1: ulong, 2: VoidT.Δ, 3: VoidT.Δ }),
  PFN_CERT_ENUM_SYSTEM_STORE = new CallbackT('PFN_CERT_ENUM_SYSTEM_STORE', int, { 0: VoidT.Δ, 1: ulong, 2: _CERT_SYSTEM_STORE_INFO.Δ, 3: VoidT.Δ, 4: VoidT.Δ }),
  PFN_CERT_ENUM_PHYSICAL_STORE = new CallbackT('PFN_CERT_ENUM_PHYSICAL_STORE', int, { 0: VoidT.Δ, 1: ulong, 2: ushort.Δ, 3: _CERT_PHYSICAL_STORE_INFO.Δ, 4: VoidT.Δ, 5: VoidT.Δ }),
  PFN_CRYPT_EXTRACT_ENCODED_SIGNATURE_PARAMETERS_FUNC = new CallbackT('PFN_CRYPT_EXTRACT_ENCODED_SIGNATURE_PARAMETERS_FUNC', int, { 0: ulong, 1: _CRYPT_ALGORITHM_IDENTIFIER.Δ, 2: VoidT.Δ.Δ, 3: ushort.Δ.Δ }),
  PFN_CRYPT_SIGN_AND_ENCODE_HASH_FUNC = new CallbackT('PFN_CRYPT_SIGN_AND_ENCODE_HASH_FUNC', int, { 0: ulong, 1: ulong, 2: _CRYPT_ALGORITHM_IDENTIFIER.Δ, 3: VoidT.Δ, 4: ushort.Δ, 5: ushort.Δ, 6: uchar.Δ, 7: ulong, 8: uchar.Δ, 9: ulong.Δ }),
  PFN_CRYPT_VERIFY_ENCODED_SIGNATURE_FUNC = new CallbackT('PFN_CRYPT_VERIFY_ENCODED_SIGNATURE_FUNC', int, { 0: ulong, 1: _CERT_PUBLIC_KEY_INFO.Δ, 2: _CRYPT_ALGORITHM_IDENTIFIER.Δ, 3: VoidT.Δ, 4: ushort.Δ, 5: ushort.Δ, 6: uchar.Δ, 7: ulong, 8: uchar.Δ, 9: ulong }),
  PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_EX2_FUNC = new CallbackT('PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_EX2_FUNC', int, { 0: ulong, 1: ulong, 2: int8.Δ, 3: ulong, 4: VoidT.Δ, 5: _CERT_PUBLIC_KEY_INFO.Δ, 6: ulong.Δ }),
  PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_FROM_BCRYPT_HANDLE_FUNC = new CallbackT('PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_FROM_BCRYPT_HANDLE_FUNC', int, { 0: VoidT.Δ, 1: ulong, 2: int8.Δ, 3: ulong, 4: VoidT.Δ, 5: _CERT_PUBLIC_KEY_INFO.Δ, 6: ulong.Δ }),
  PFN_IMPORT_PUBLIC_KEY_INFO_EX2_FUNC = new CallbackT('PFN_IMPORT_PUBLIC_KEY_INFO_EX2_FUNC', int, { 0: ulong, 1: _CERT_PUBLIC_KEY_INFO.Δ, 2: ulong, 3: VoidT.Δ, 4: VoidT.Δ.Δ }),
  PFN_IMPORT_PRIV_KEY_FUNC = new CallbackT('PFN_IMPORT_PRIV_KEY_FUNC', int, { 0: ulong, 1: _CRYPT_PRIVATE_KEY_INFO.Δ, 2: ulong, 3: VoidT.Δ }),
  PFN_EXPORT_PRIV_KEY_FUNC = new CallbackT('PFN_EXPORT_PRIV_KEY_FUNC', int, { 0: ulong, 1: ulong, 2: int8.Δ, 3: ulong, 4: VoidT.Δ, 5: _CRYPT_PRIVATE_KEY_INFO.Δ, 6: ulong.Δ }),
  PFN_CRYPT_GET_SIGNER_CERTIFICATE = new CallbackT('PFN_CRYPT_GET_SIGNER_CERTIFICATE', _CERT_CONTEXT.Δ, { 0: VoidT.Δ, 1: ulong, 2: _CERT_INFO.Δ, 3: VoidT.Δ }),
  PFN_CRYPT_ASYNC_PARAM_FREE_FUNC = new CallbackT('PFN_CRYPT_ASYNC_PARAM_FREE_FUNC', VoidT, { 0: int8.Δ, 1: VoidT.Δ }),
  PFN_FREE_ENCODED_OBJECT_FUNC = new CallbackT('PFN_FREE_ENCODED_OBJECT_FUNC', VoidT, { 0: int8.Δ, 1: _CRYPT_BLOB_ARRAY.Δ, 2: VoidT.Δ }),
  PFN_CRYPT_CANCEL_RETRIEVAL = new CallbackT('PFN_CRYPT_CANCEL_RETRIEVAL', int, { 0: ulong, 1: VoidT.Δ }),
  PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC = new CallbackT('PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC', VoidT, { 0: VoidT.Δ, 1: ulong, 2: int8.Δ, 3: int8.Δ, 4: VoidT.Δ }),
  PFN_CANCEL_ASYNC_RETRIEVAL_FUNC = new CallbackT('PFN_CANCEL_ASYNC_RETRIEVAL_FUNC', int, { 0: VoidT.Δ }),
  PFN_CRYPT_ENUM_KEYID_PROP = new CallbackT('PFN_CRYPT_ENUM_KEYID_PROP', int, { 0: _CRYPTOAPI_BLOB.Δ, 1: ulong, 2: VoidT.Δ, 3: VoidT.Δ, 4: ulong, 5: ulong.Δ, 6: VoidT.Δ.Δ, 7: ulong.Δ }),
  PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK = new CallbackT('PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK', int, { 0: _CERT_CONTEXT.Δ, 1: VoidT.Δ }),
  NDR_RUNDOWN = new CallbackT('NDR_RUNDOWN', VoidT, { 0: VoidT.Δ }),
  NDR_NOTIFY_ROUTINE = new CallbackT('NDR_NOTIFY_ROUTINE', VoidT, {  }),
  NDR_NOTIFY2_ROUTINE = new CallbackT('NDR_NOTIFY2_ROUTINE', VoidT, { 0: uchar }),
  EXPR_EVAL = new CallbackT('EXPR_EVAL', VoidT, { 0: _MIDL_STUB_MESSAGE.Δ }),
  GENERIC_BINDING_ROUTINE = new CallbackT('GENERIC_BINDING_ROUTINE', VoidT.Δ, { 0: VoidT.Δ }),
  GENERIC_UNBIND_ROUTINE = new CallbackT('GENERIC_UNBIND_ROUTINE', VoidT, { 0: VoidT.Δ, 1: uchar.Δ }),
  XMIT_HELPER_ROUTINE = new CallbackT('XMIT_HELPER_ROUTINE', VoidT, { 0: MIDL_STUB_MESSAGE.Δ }),
  USER_MARSHAL_SIZING_ROUTINE = new CallbackT('USER_MARSHAL_SIZING_ROUTINE', ulong, { 0: ulong.Δ, 1: ulong, 2: VoidT.Δ }),
  USER_MARSHAL_MARSHALLING_ROUTINE = new CallbackT('USER_MARSHAL_MARSHALLING_ROUTINE', uchar.Δ, { 0: ulong.Δ, 1: uchar.Δ, 2: VoidT.Δ }),
  USER_MARSHAL_UNMARSHALLING_ROUTINE = new CallbackT('USER_MARSHAL_UNMARSHALLING_ROUTINE', uchar.Δ, { 0: ulong.Δ, 1: uchar.Δ, 2: VoidT.Δ }),
  USER_MARSHAL_FREEING_ROUTINE = new CallbackT('USER_MARSHAL_FREEING_ROUTINE', VoidT, { 0: ulong.Δ, 1: VoidT.Δ }),
  CS_TYPE_NET_SIZE_ROUTINE = new CallbackT('CS_TYPE_NET_SIZE_ROUTINE', VoidT, { 0: VoidT.Δ, 1: ulong, 2: ulong, 3: _IDL_CS_CONVERT.Δ, 4: ulong.Δ, 5: ulong.Δ }),
  CS_TYPE_LOCAL_SIZE_ROUTINE = new CallbackT('CS_TYPE_LOCAL_SIZE_ROUTINE', VoidT, { 0: VoidT.Δ, 1: ulong, 2: ulong, 3: _IDL_CS_CONVERT.Δ, 4: ulong.Δ, 5: ulong.Δ }),
  CS_TYPE_TO_NETCS_ROUTINE = new CallbackT('CS_TYPE_TO_NETCS_ROUTINE', VoidT, { 0: VoidT.Δ, 1: ulong, 2: VoidT.Δ, 3: ulong, 4: uchar.Δ, 5: ulong.Δ, 6: ulong.Δ }),
  CS_TYPE_FROM_NETCS_ROUTINE = new CallbackT('CS_TYPE_FROM_NETCS_ROUTINE', VoidT, { 0: VoidT.Δ, 1: ulong, 2: uchar.Δ, 3: ulong, 4: ulong, 5: VoidT.Δ, 6: ulong.Δ, 7: ulong.Δ }),
  CS_TAG_GETTING_ROUTINE = new CallbackT('CS_TAG_GETTING_ROUTINE', VoidT, { 0: VoidT.Δ, 1: int, 2: ulong.Δ, 3: ulong.Δ, 4: ulong.Δ, 5: ulong.Δ }),
  STUB_THUNK = new CallbackT('STUB_THUNK', VoidT, { 0: MIDL_STUB_MESSAGE.Δ }),
  LPOCNCONNPROCA = new CallbackT('LPOCNCONNPROCA', ulong, { 0: ulong, 1: int8.Δ, 2: int8.Δ, 3: VoidT.Δ }),
  LPOCNCONNPROCW = new CallbackT('LPOCNCONNPROCW', ulong, { 0: ulong, 1: ushort.Δ, 2: ushort.Δ, 3: VoidT.Δ }),
  LPOCNCHKPROC = new CallbackT('LPOCNCHKPROC', int, { 0: ulong, 1: ulong, 2: VoidT.Δ }),
  LPOCNDSCPROC = new CallbackT('LPOCNDSCPROC', VoidT, { 0: ulong, 1: ulong, 2: VoidT.Δ }),
  LPFNPSPCALLBACKA = new CallbackT('LPFNPSPCALLBACKA', uint, { 0: HWND__.Δ, 1: uint, 2: _PROPSHEETPAGEA.Δ }),
  LPFNPSPCALLBACKW = new CallbackT('LPFNPSPCALLBACKW', uint, { 0: HWND__.Δ, 1: uint, 2: _PROPSHEETPAGEW.Δ }),
  PFNPROPSHEETCALLBACK = new CallbackT('PFNPROPSHEETCALLBACK', int, { 0: HWND__.Δ, 1: uint, 2: long }),
  LPFNADDPROPSHEETPAGE = new CallbackT('LPFNADDPROPSHEETPAGE', int, { 0: _PSP.Δ, 1: long }),
  LPFNADDPROPSHEETPAGES = new CallbackT('LPFNADDPROPSHEETPAGES', int, { 0: VoidT.Δ, 1: new CallbackT(int, [_PSP.Δ, long]).Δ, 2: long }),
  _onexit_t = new CallbackT('_onexit_t', int, {  }),
  _purecall_handler = new CallbackT('_purecall_handler', VoidT, {  }),
  _invalid_parameter_handler = new CallbackT('_invalid_parameter_handler', VoidT, { 0: ushort.Δ, 1: ushort.Δ, 2: ushort.Δ, 3: uint, 4: uint }),
  LPFNGETCLASSOBJECT = new CallbackT('LPFNGETCLASSOBJECT', long, { 0: UUID.Δ, 1: UUID.Δ, 2: VoidT.Δ.Δ }),
  LPFNCANUNLOADNOW = new CallbackT('LPFNCANUNLOADNOW', long, {  }),
  LPOFNHOOKPROC = new CallbackT('LPOFNHOOKPROC', uint, { 0: HWND__.Δ, 1: uint, 2: uint, 3: long }),
  LPCCHOOKPROC = new CallbackT('LPCCHOOKPROC', uint, { 0: HWND__.Δ, 1: uint, 2: uint, 3: long }),
  LPFRHOOKPROC = new CallbackT('LPFRHOOKPROC', uint, { 0: HWND__.Δ, 1: uint, 2: uint, 3: long }),
  LPCFHOOKPROC = new CallbackT('LPCFHOOKPROC', uint, { 0: HWND__.Δ, 1: uint, 2: uint, 3: long }),
  LPPRINTHOOKPROC = new CallbackT('LPPRINTHOOKPROC', uint, { 0: HWND__.Δ, 1: uint, 2: uint, 3: long }),
  LPSETUPHOOKPROC = new CallbackT('LPSETUPHOOKPROC', uint, { 0: HWND__.Δ, 1: uint, 2: uint, 3: long }),
  LPPAGEPAINTHOOK = new CallbackT('LPPAGEPAINTHOOK', uint, { 0: HWND__.Δ, 1: uint, 2: uint, 3: long }),
  LPPAGESETUPHOOK = new CallbackT('LPPAGESETUPHOOK', uint, { 0: HWND__.Δ, 1: uint, 2: uint, 3: long }),
  LPSERVICE_MAIN_FUNCTIONW = new CallbackT('LPSERVICE_MAIN_FUNCTIONW', VoidT, { 0: ulong, 1: ushort.Δ.Δ }),
  LPSERVICE_MAIN_FUNCTIONA = new CallbackT('LPSERVICE_MAIN_FUNCTIONA', VoidT, { 0: ulong, 1: int8.Δ.Δ }),
  LPHANDLER_FUNCTION = new CallbackT('LPHANDLER_FUNCTION', VoidT, { 0: ulong }),
  LPHANDLER_FUNCTION_EX = new CallbackT('LPHANDLER_FUNCTION_EX', ulong, { 0: ulong, 1: ulong, 2: VoidT.Δ, 3: VoidT.Δ }),
  PFN_SC_NOTIFY_CALLBACK = new CallbackT('PFN_SC_NOTIFY_CALLBACK', VoidT, { 0: VoidT.Δ }),
  IMCENUMPROC = new CallbackT('IMCENUMPROC', int, { 0: HIMC__.Δ, 1: long }),
  REGISTERWORDENUMPROCA = new CallbackT('REGISTERWORDENUMPROCA', int, { 0: int8.Δ, 1: ulong, 2: int8.Δ, 3: VoidT.Δ }),
  REGISTERWORDENUMPROCW = new CallbackT('REGISTERWORDENUMPROCW', int, { 0: ushort.Δ, 1: ulong, 2: ushort.Δ, 3: VoidT.Δ }),

var threadlocaleinfostruct = new StructT('threadlocaleinfostruct', {
 refcount: int,
 lc_codepage: uint,
 lc_collate_cp: uint,
 lc_handle: ARRAY(undefined, 6),
 lc_id: ARRAY(LC_ID, 6),
 lc_category: ARRAY(undefined, 6),
 lc_clike: int,
 mb_cur_max: int,
 lconv_intl_refcount: int.Δ,
 lconv_num_refcount: int.Δ,
 lconv_mon_refcount: int.Δ,
 lconv: lconv.Δ,
 ctype1_refcount: int.Δ,
 ctype1: ushort.Δ,
 pctype: ushort.Δ,
 pclmap: uchar.Δ,
 pcumap: uchar.Δ,
 lc_time_curr: __lc_time_data.Δ
});



var localeinfo_struct = new StructT('localeinfo_struct', {
 locinfo: pthreadlocinfo,
 mbcinfo: pthreadmbcinfo
});

var tagLC_ID = new StructT('tagLC_ID', {
 wLanguage: ushort,
 wCountry: ushort,
 wCodePage: ushort
});

var undefined = new StructT('undefined', {
 locale: int8.Δ,
 wlocale: ushort.Δ,
 refcount: int.Δ,
 wrefcount: int.Δ
});


var _EXCEPTION_RECORD = new StructT('_EXCEPTION_RECORD', {
 ExceptionCode: DWORD,
 ExceptionFlags: DWORD,
 ExceptionRecord: _EXCEPTION_RECORD.Δ,
 ExceptionAddress: PVOID,
 NumberParameters: DWORD,
 ExceptionInformation: ARRAY(ULONG_PTR, EXCEPTION_MAXIMUM_PARAMETERS)
});

var _CONTEXT = new StructT('_CONTEXT', {
 ContextFlags: DWORD,
 Dr0: DWORD,
 Dr1: DWORD,
 Dr2: DWORD,
 Dr3: DWORD,
 Dr6: DWORD,
 Dr7: DWORD,
 FloatSave: FLOATING_SAVE_AREA,
 SegGs: DWORD,
 SegFs: DWORD,
 SegEs: DWORD,
 SegDs: DWORD,
 Edi: DWORD,
 Esi: DWORD,
 Ebx: DWORD,
 Edx: DWORD,
 Ecx: DWORD,
 Eax: DWORD,
 Ebp: DWORD,
 Eip: DWORD,
 SegCs: DWORD,
 EFlags: DWORD,
 Esp: DWORD,
 SegSs: DWORD,
 ExtendedRegisters: ARRAY(BYTE, MAXIMUM_SUPPORTED_EXTENSION)
});

var _PROCESSOR_NUMBER = new StructT('_PROCESSOR_NUMBER', {
 Group: WORD,
 Number: BYTE,
 Reserved: BYTE
});

var _GROUP_AFFINITY = new StructT('_GROUP_AFFINITY', {
 Mask: KAFFINITY,
 Group: WORD,
 Reserved: ARRAY(WORD, 3)
});

var _FLOAT128 = new StructT('_FLOAT128', {
 LowPart: longlong,
 HighPart: longlong
});

var undefined = new StructT('undefined', {
 LowPart: DWORD,
 HighPart: LONG
});

var undefined = new StructT('undefined', {
 LowPart: DWORD,
 HighPart: LONG
});

var undefined = new StructT('undefined', {
 LowPart: DWORD,
 HighPart: DWORD
});

var undefined = new StructT('undefined', {
 LowPart: DWORD,
 HighPart: DWORD
});

var _LUID = new StructT('_LUID', {
 LowPart: DWORD,
 HighPart: LONG
});

var _LIST_ENTRY = new StructT('_LIST_ENTRY', {
 Flink: _LIST_ENTRY.Δ,
 Blink: _LIST_ENTRY.Δ
});

var SLIST_ENTRY32 = new StructT('SLIST_ENTRY32', {
 Next: _SINGLE_LIST_ENTRY.Δ
});

var LIST_ENTRY32 = new StructT('LIST_ENTRY32', {
 Flink: DWORD,
 Blink: DWORD
});

var LIST_ENTRY64 = new StructT('LIST_ENTRY64', {
 Flink: ULONGLONG,
 Blink: ULONGLONG
});

var TASKOWNERID = new StructT('TASKOWNERID', {
 Data1: ulong,
 Data2: ushort,
 Data3: ushort,
 Data4: ARRAY(undefined,  8 )
});

var _OBJECTID = new StructT('_OBJECTID', {
 Lineage: GUID,
 Uniquifier: DWORD
});

var _M128A = new StructT('_M128A', {
 Low: ULONGLONG,
 High: LONGLONG
});

var _XSAVE_FORMAT = new StructT('_XSAVE_FORMAT', {
 ControlWord: WORD,
 StatusWord: WORD,
 TagWord: BYTE,
 Reserved1: BYTE,
 ErrorOpcode: WORD,
 ErrorOffset: DWORD,
 ErrorSelector: WORD,
 Reserved2: WORD,
 DataOffset: DWORD,
 DataSelector: WORD,
 Reserved3: WORD,
 MxCsr: DWORD,
 MxCsr_Mask: DWORD,
 FloatRegisters: ARRAY(M128A, 8),
 XmmRegisters: ARRAY(M128A, 8),
 Reserved4: ARRAY(BYTE, 192),
 StackControl: ARRAY(DWORD, 7),
 Cr0NpxState: DWORD
});

var _XSAVE_AREA_HEADER = new StructT('_XSAVE_AREA_HEADER', {
 Mask: DWORD64,
 Reserved: ARRAY(DWORD64, 7)
});

var _XSAVE_AREA = new StructT('_XSAVE_AREA', {
 LegacyState: XSAVE_FORMAT,
 Header: XSAVE_AREA_HEADER
});

var _XSTATE_CONTEXT = new StructT('_XSTATE_CONTEXT', {
 Mask: DWORD64,
 Length: DWORD,
 Reserved1: DWORD,
 Area: PXSAVE_AREA,
 Reserved2: DWORD,
 Buffer: PVOID,
 Reserved3: DWORD
});

var _CONTEXT_CHUNK = new StructT('_CONTEXT_CHUNK', {
 Offset: LONG,
 Length: DWORD
});

var _CONTEXT_EX = new StructT('_CONTEXT_EX', {
 All: CONTEXT_CHUNK,
 Legacy: CONTEXT_CHUNK,
 XState: CONTEXT_CHUNK
});

var _FLOATING_SAVE_AREA = new StructT('_FLOATING_SAVE_AREA', {
 ControlWord: DWORD,
 StatusWord: DWORD,
 TagWord: DWORD,
 ErrorOffset: DWORD,
 ErrorSelector: DWORD,
 DataOffset: DWORD,
 DataSelector: DWORD,
 RegisterArea: ARRAY(BYTE, SIZE_OF_80387_REGISTERS),
 Cr0NpxState: DWORD
});

var _LDT_ENTRY = new StructT('_LDT_ENTRY', {
 LimitLow: WORD,
 BaseLow: WORD,
 HighWord: c:winnt.h@127863@S@_LDT_ENTRY@Ua
});

var undefined = new StructT('undefined', {
 BaseMid: BYTE,
 Flags1: BYTE,
 Flags2: BYTE,
 BaseHi: BYTE
});

var undefined = new StructT('undefined', {
 BaseMid: DWORD,
 Type: DWORD,
 Dpl: DWORD,
 Pres: DWORD,
 LimitHi: DWORD,
 Sys: DWORD,
 Reserved_0: DWORD,
 Default_Big: DWORD,
 Granularity: DWORD,
 BaseHi: DWORD
});

var _WOW64_FLOATING_SAVE_AREA = new StructT('_WOW64_FLOATING_SAVE_AREA', {
 ControlWord: DWORD,
 StatusWord: DWORD,
 TagWord: DWORD,
 ErrorOffset: DWORD,
 ErrorSelector: DWORD,
 DataOffset: DWORD,
 DataSelector: DWORD,
 RegisterArea: ARRAY(BYTE, WOW64_SIZE_OF_80387_REGISTERS),
 Cr0NpxState: DWORD
});

var _WOW64_CONTEXT = new StructT('_WOW64_CONTEXT', {
 ContextFlags: DWORD,
 Dr0: DWORD,
 Dr1: DWORD,
 Dr2: DWORD,
 Dr3: DWORD,
 Dr6: DWORD,
 Dr7: DWORD,
 FloatSave: WOW64_FLOATING_SAVE_AREA,
 SegGs: DWORD,
 SegFs: DWORD,
 SegEs: DWORD,
 SegDs: DWORD,
 Edi: DWORD,
 Esi: DWORD,
 Ebx: DWORD,
 Edx: DWORD,
 Ecx: DWORD,
 Eax: DWORD,
 Ebp: DWORD,
 Eip: DWORD,
 SegCs: DWORD,
 EFlags: DWORD,
 Esp: DWORD,
 SegSs: DWORD,
 ExtendedRegisters: ARRAY(BYTE, WOW64_MAXIMUM_SUPPORTED_EXTENSION)
});

var _WOW64_LDT_ENTRY = new StructT('_WOW64_LDT_ENTRY', {
 LimitLow: WORD,
 BaseLow: WORD,
 HighWord: c:winnt.h@178995@S@_WOW64_LDT_ENTRY@Ua
});

var undefined = new StructT('undefined', {
 BaseMid: BYTE,
 Flags1: BYTE,
 Flags2: BYTE,
 BaseHi: BYTE
});

var undefined = new StructT('undefined', {
 BaseMid: DWORD,
 Type: DWORD,
 Dpl: DWORD,
 Pres: DWORD,
 LimitHi: DWORD,
 Sys: DWORD,
 Reserved_0: DWORD,
 Default_Big: DWORD,
 Granularity: DWORD,
 BaseHi: DWORD
});

var _WOW64_DESCRIPTOR_TABLE_ENTRY = new StructT('_WOW64_DESCRIPTOR_TABLE_ENTRY', {
 Selector: DWORD,
 Descriptor: WOW64_LDT_ENTRY
});

var _EXCEPTION_RECORD32 = new StructT('_EXCEPTION_RECORD32', {
 ExceptionCode: DWORD,
 ExceptionFlags: DWORD,
 ExceptionRecord: DWORD,
 ExceptionAddress: DWORD,
 NumberParameters: DWORD,
 ExceptionInformation: ARRAY(DWORD, EXCEPTION_MAXIMUM_PARAMETERS)
});

var _EXCEPTION_RECORD64 = new StructT('_EXCEPTION_RECORD64', {
 ExceptionCode: DWORD,
 ExceptionFlags: DWORD,
 ExceptionRecord: DWORD64,
 ExceptionAddress: DWORD64,
 NumberParameters: DWORD,
 __unusedAlignment: DWORD,
 ExceptionInformation: ARRAY(DWORD64, EXCEPTION_MAXIMUM_PARAMETERS)
});

var _EXCEPTION_POINTERS = new StructT('_EXCEPTION_POINTERS', {
 ExceptionRecord: PEXCEPTION_RECORD,
 ContextRecord: PCONTEXT
});

var _GENERIC_MAPPING = new StructT('_GENERIC_MAPPING', {
 GenericRead: ACCESS_MASK,
 GenericWrite: ACCESS_MASK,
 GenericExecute: ACCESS_MASK,
 GenericAll: ACCESS_MASK
});

var _LUID_AND_ATTRIBUTES = new StructT('_LUID_AND_ATTRIBUTES', {
 Luid: LUID,
 Attributes: DWORD
});

var _SID_IDENTIFIER_AUTHORITY = new StructT('_SID_IDENTIFIER_AUTHORITY', {
 Value: ARRAY(BYTE, 6)
});

var _SID = new StructT('_SID', {
 Revision: BYTE,
 SubAuthorityCount: BYTE,
 IdentifierAuthority: SID_IDENTIFIER_AUTHORITY,
 SubAuthority: ARRAY(DWORD, ANYSIZE_ARRAY)
});

var _SID_AND_ATTRIBUTES = new StructT('_SID_AND_ATTRIBUTES', {
 Sid: PSID,
 Attributes: DWORD
});

var _SID_AND_ATTRIBUTES_HASH = new StructT('_SID_AND_ATTRIBUTES_HASH', {
 SidCount: DWORD,
 SidAttr: PSID_AND_ATTRIBUTES,
 Hash: ARRAY(SID_HASH_ENTRY, SID_HASH_SIZE)
});

var _ACL = new StructT('_ACL', {
 AclRevision: BYTE,
 Sbz1: BYTE,
 AclSize: WORD,
 AceCount: WORD,
 Sbz2: WORD
});

var _ACE_HEADER = new StructT('_ACE_HEADER', {
 AceType: BYTE,
 AceFlags: BYTE,
 AceSize: WORD
});

var _ACCESS_ALLOWED_ACE = new StructT('_ACCESS_ALLOWED_ACE', {
 Header: ACE_HEADER,
 Mask: ACCESS_MASK,
 SidStart: DWORD
});

var _ACCESS_DENIED_ACE = new StructT('_ACCESS_DENIED_ACE', {
 Header: ACE_HEADER,
 Mask: ACCESS_MASK,
 SidStart: DWORD
});

var _SYSTEM_AUDIT_ACE = new StructT('_SYSTEM_AUDIT_ACE', {
 Header: ACE_HEADER,
 Mask: ACCESS_MASK,
 SidStart: DWORD
});

var _SYSTEM_ALARM_ACE = new StructT('_SYSTEM_ALARM_ACE', {
 Header: ACE_HEADER,
 Mask: ACCESS_MASK,
 SidStart: DWORD
});

var _SYSTEM_MANDATORY_LABEL_ACE = new StructT('_SYSTEM_MANDATORY_LABEL_ACE', {
 Header: ACE_HEADER,
 Mask: ACCESS_MASK,
 SidStart: DWORD
});

var _ACCESS_ALLOWED_OBJECT_ACE = new StructT('_ACCESS_ALLOWED_OBJECT_ACE', {
 Header: ACE_HEADER,
 Mask: ACCESS_MASK,
 Flags: DWORD,
 ObjectType: GUID,
 InheritedObjectType: GUID,
 SidStart: DWORD
});

var _ACCESS_DENIED_OBJECT_ACE = new StructT('_ACCESS_DENIED_OBJECT_ACE', {
 Header: ACE_HEADER,
 Mask: ACCESS_MASK,
 Flags: DWORD,
 ObjectType: GUID,
 InheritedObjectType: GUID,
 SidStart: DWORD
});

var _SYSTEM_AUDIT_OBJECT_ACE = new StructT('_SYSTEM_AUDIT_OBJECT_ACE', {
 Header: ACE_HEADER,
 Mask: ACCESS_MASK,
 Flags: DWORD,
 ObjectType: GUID,
 InheritedObjectType: GUID,
 SidStart: DWORD
});

var _SYSTEM_ALARM_OBJECT_ACE = new StructT('_SYSTEM_ALARM_OBJECT_ACE', {
 Header: ACE_HEADER,
 Mask: ACCESS_MASK,
 Flags: DWORD,
 ObjectType: GUID,
 InheritedObjectType: GUID,
 SidStart: DWORD
});

var _ACCESS_ALLOWED_CALLBACK_ACE = new StructT('_ACCESS_ALLOWED_CALLBACK_ACE', {
 Header: ACE_HEADER,
 Mask: ACCESS_MASK,
 SidStart: DWORD
});

var _ACCESS_DENIED_CALLBACK_ACE = new StructT('_ACCESS_DENIED_CALLBACK_ACE', {
 Header: ACE_HEADER,
 Mask: ACCESS_MASK,
 SidStart: DWORD
});

var _SYSTEM_AUDIT_CALLBACK_ACE = new StructT('_SYSTEM_AUDIT_CALLBACK_ACE', {
 Header: ACE_HEADER,
 Mask: ACCESS_MASK,
 SidStart: DWORD
});

var _SYSTEM_ALARM_CALLBACK_ACE = new StructT('_SYSTEM_ALARM_CALLBACK_ACE', {
 Header: ACE_HEADER,
 Mask: ACCESS_MASK,
 SidStart: DWORD
});

var _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE = new StructT('_ACCESS_ALLOWED_CALLBACK_OBJECT_ACE', {
 Header: ACE_HEADER,
 Mask: ACCESS_MASK,
 Flags: DWORD,
 ObjectType: GUID,
 InheritedObjectType: GUID,
 SidStart: DWORD
});

var _ACCESS_DENIED_CALLBACK_OBJECT_ACE = new StructT('_ACCESS_DENIED_CALLBACK_OBJECT_ACE', {
 Header: ACE_HEADER,
 Mask: ACCESS_MASK,
 Flags: DWORD,
 ObjectType: GUID,
 InheritedObjectType: GUID,
 SidStart: DWORD
});

var _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE = new StructT('_SYSTEM_AUDIT_CALLBACK_OBJECT_ACE', {
 Header: ACE_HEADER,
 Mask: ACCESS_MASK,
 Flags: DWORD,
 ObjectType: GUID,
 InheritedObjectType: GUID,
 SidStart: DWORD
});

var _SYSTEM_ALARM_CALLBACK_OBJECT_ACE = new StructT('_SYSTEM_ALARM_CALLBACK_OBJECT_ACE', {
 Header: ACE_HEADER,
 Mask: ACCESS_MASK,
 Flags: DWORD,
 ObjectType: GUID,
 InheritedObjectType: GUID,
 SidStart: DWORD
});

var _ACL_REVISION_INFORMATION = new StructT('_ACL_REVISION_INFORMATION', {
 AclRevision: DWORD
});

var _ACL_SIZE_INFORMATION = new StructT('_ACL_SIZE_INFORMATION', {
 AceCount: DWORD,
 AclBytesInUse: DWORD,
 AclBytesFree: DWORD
});

var _SECURITY_DESCRIPTOR_RELATIVE = new StructT('_SECURITY_DESCRIPTOR_RELATIVE', {
 Revision: BYTE,
 Sbz1: BYTE,
 Control: SECURITY_DESCRIPTOR_CONTROL,
 Owner: DWORD,
 Group: DWORD,
 Sacl: DWORD,
 Dacl: DWORD
});

var _SECURITY_DESCRIPTOR = new StructT('_SECURITY_DESCRIPTOR', {
 Revision: BYTE,
 Sbz1: BYTE,
 Control: SECURITY_DESCRIPTOR_CONTROL,
 Owner: PSID,
 Group: PSID,
 Sacl: PACL,
 Dacl: PACL
});

var _OBJECT_TYPE_LIST = new StructT('_OBJECT_TYPE_LIST', {
 Level: WORD,
 Sbz: WORD,
 ObjectType: uint.Δ
});

var _PRIVILEGE_SET = new StructT('_PRIVILEGE_SET', {
 PrivilegeCount: DWORD,
 Control: DWORD,
 Privilege: ARRAY(LUID_AND_ATTRIBUTES, ANYSIZE_ARRAY)
});

var _ACCESS_REASONS = new StructT('_ACCESS_REASONS', {
 Data: ARRAY(ACCESS_REASON, 32)
});

var _SE_SECURITY_DESCRIPTOR = new StructT('_SE_SECURITY_DESCRIPTOR', {
 Size: DWORD,
 Flags: DWORD,
 SecurityDescriptor: PSECURITY_DESCRIPTOR
});

var _SE_ACCESS_REQUEST = new StructT('_SE_ACCESS_REQUEST', {
 Size: DWORD,
 SeSecurityDescriptor: PSE_SECURITY_DESCRIPTOR,
 DesiredAccess: ACCESS_MASK,
 PreviouslyGrantedAccess: ACCESS_MASK,
 PrincipalSelfSid: PSID,
 GenericMapping: PGENERIC_MAPPING,
 ObjectTypeListCount: DWORD,
 ObjectTypeList: POBJECT_TYPE_LIST
});

var _SE_ACCESS_REPLY = new StructT('_SE_ACCESS_REPLY', {
 Size: DWORD,
 ResultListCount: DWORD,
 GrantedAccess: PACCESS_MASK,
 AccessStatus: PDWORD,
 AccessReason: PACCESS_REASONS,
 Privileges: VOIDPTR.Δ
});

var _TOKEN_USER = new StructT('_TOKEN_USER', {
 User: SID_AND_ATTRIBUTES
});

var _TOKEN_GROUPS = new StructT('_TOKEN_GROUPS', {
 GroupCount: DWORD,
 Groups: ARRAY(SID_AND_ATTRIBUTES, ANYSIZE_ARRAY)
});

var _TOKEN_PRIVILEGES = new StructT('_TOKEN_PRIVILEGES', {
 PrivilegeCount: DWORD,
 Privileges: ARRAY(LUID_AND_ATTRIBUTES, ANYSIZE_ARRAY)
});

var _TOKEN_OWNER = new StructT('_TOKEN_OWNER', {
 Owner: PSID
});

var _TOKEN_PRIMARY_GROUP = new StructT('_TOKEN_PRIMARY_GROUP', {
 PrimaryGroup: PSID
});

var _TOKEN_DEFAULT_DACL = new StructT('_TOKEN_DEFAULT_DACL', {
 DefaultDacl: PACL
});

var _TOKEN_GROUPS_AND_PRIVILEGES = new StructT('_TOKEN_GROUPS_AND_PRIVILEGES', {
 SidCount: DWORD,
 SidLength: DWORD,
 Sids: PSID_AND_ATTRIBUTES,
 RestrictedSidCount: DWORD,
 RestrictedSidLength: DWORD,
 RestrictedSids: PSID_AND_ATTRIBUTES,
 PrivilegeCount: DWORD,
 PrivilegeLength: DWORD,
 Privileges: PLUID_AND_ATTRIBUTES,
 AuthenticationId: LUID
});

var _TOKEN_LINKED_TOKEN = new StructT('_TOKEN_LINKED_TOKEN', {
 LinkedToken: HANDLE
});

var _TOKEN_ELEVATION = new StructT('_TOKEN_ELEVATION', {
 TokenIsElevated: DWORD
});

var _TOKEN_MANDATORY_LABEL = new StructT('_TOKEN_MANDATORY_LABEL', {
 Label: SID_AND_ATTRIBUTES
});

var _TOKEN_MANDATORY_POLICY = new StructT('_TOKEN_MANDATORY_POLICY', {
 Policy: DWORD
});

var _TOKEN_ACCESS_INFORMATION = new StructT('_TOKEN_ACCESS_INFORMATION', {
 SidHash: PSID_AND_ATTRIBUTES_HASH,
 RestrictedSidHash: PSID_AND_ATTRIBUTES_HASH,
 Privileges: PTOKEN_PRIVILEGES,
 AuthenticationId: LUID,
 TokenType: TOKEN_TYPE,
 ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL,
 MandatoryPolicy: TOKEN_MANDATORY_POLICY,
 Flags: DWORD
});

var _TOKEN_AUDIT_POLICY = new StructT('_TOKEN_AUDIT_POLICY', {
 PerUserPolicy: ARRAY(BYTE, undefined)
});

var _TOKEN_SOURCE = new StructT('_TOKEN_SOURCE', {
 SourceName: ARRAY(CHAR, TOKEN_SOURCE_LENGTH),
 SourceIdentifier: LUID
});

var _TOKEN_STATISTICS = new StructT('_TOKEN_STATISTICS', {
 TokenId: LUID,
 AuthenticationId: LUID,
 ExpirationTime: LARGE_INTEGER,
 TokenType: TOKEN_TYPE,
 ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL,
 DynamicCharged: DWORD,
 DynamicAvailable: DWORD,
 GroupCount: DWORD,
 PrivilegeCount: DWORD,
 ModifiedId: LUID
});

var _TOKEN_CONTROL = new StructT('_TOKEN_CONTROL', {
 TokenId: LUID,
 AuthenticationId: LUID,
 ModifiedId: LUID,
 TokenSource: TOKEN_SOURCE
});

var _TOKEN_ORIGIN = new StructT('_TOKEN_ORIGIN', {
 OriginatingLogonSession: LUID
});

var _SECURITY_QUALITY_OF_SERVICE = new StructT('_SECURITY_QUALITY_OF_SERVICE', {
 Length: DWORD,
 ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL,
 ContextTrackingMode: SECURITY_CONTEXT_TRACKING_MODE,
 EffectiveOnly: BOOLEAN
});

var _SE_IMPERSONATION_STATE = new StructT('_SE_IMPERSONATION_STATE', {
 Token: PACCESS_TOKEN,
 CopyOnOpen: BOOLEAN,
 EffectiveOnly: BOOLEAN,
 Level: SECURITY_IMPERSONATION_LEVEL
});

var _JOB_SET_ARRAY = new StructT('_JOB_SET_ARRAY', {
 JobHandle: HANDLE,
 MemberLevel: DWORD,
 Flags: DWORD
});

var _NT_TIB = new StructT('_NT_TIB', {
 ExceptionList: _EXCEPTION_REGISTRATION_RECORD.Δ,
 StackBase: PVOID,
 StackLimit: PVOID,
 SubSystemTib: PVOID,
 ArbitraryUserPointer: PVOID,
 Self: _NT_TIB.Δ
});


var _NT_TIB32 = new StructT('_NT_TIB32', {
 ExceptionList: DWORD,
 StackBase: DWORD,
 StackLimit: DWORD,
 SubSystemTib: DWORD,
 ArbitraryUserPointer: DWORD,
 Self: DWORD
});

var _NT_TIB64 = new StructT('_NT_TIB64', {
 ExceptionList: DWORD64,
 StackBase: DWORD64,
 StackLimit: DWORD64,
 SubSystemTib: DWORD64,
 ArbitraryUserPointer: DWORD64,
 Self: DWORD64
});

var _UMS_CREATE_THREAD_ATTRIBUTES = new StructT('_UMS_CREATE_THREAD_ATTRIBUTES', {
 UmsVersion: DWORD,
 UmsContext: PVOID,
 UmsCompletionList: PVOID
});

var _QUOTA_LIMITS = new StructT('_QUOTA_LIMITS', {
 PagedPoolLimit: SIZE_T,
 NonPagedPoolLimit: SIZE_T,
 MinimumWorkingSetSize: SIZE_T,
 MaximumWorkingSetSize: SIZE_T,
 PagefileLimit: SIZE_T,
 TimeLimit: LARGE_INTEGER
});

var undefined = new StructT('undefined', {
 RatePercent: DWORD,
 Reserved0: DWORD
});

var _QUOTA_LIMITS_EX = new StructT('_QUOTA_LIMITS_EX', {
 PagedPoolLimit: SIZE_T,
 NonPagedPoolLimit: SIZE_T,
 MinimumWorkingSetSize: SIZE_T,
 MaximumWorkingSetSize: SIZE_T,
 PagefileLimit: SIZE_T,
 TimeLimit: LARGE_INTEGER,
 WorkingSetLimit: SIZE_T,
 Reserved2: SIZE_T,
 Reserved3: SIZE_T,
 Reserved4: SIZE_T,
 Flags: DWORD,
 CpuRateLimit: RATE_QUOTA_LIMIT
});

var _IO_COUNTERS = new StructT('_IO_COUNTERS', {
 ReadOperationCount: ULONGLONG,
 WriteOperationCount: ULONGLONG,
 OtherOperationCount: ULONGLONG,
 ReadTransferCount: ULONGLONG,
 WriteTransferCount: ULONGLONG,
 OtherTransferCount: ULONGLONG
});

var _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION = new StructT('_JOBOBJECT_BASIC_ACCOUNTING_INFORMATION', {
 TotalUserTime: LARGE_INTEGER,
 TotalKernelTime: LARGE_INTEGER,
 ThisPeriodTotalUserTime: LARGE_INTEGER,
 ThisPeriodTotalKernelTime: LARGE_INTEGER,
 TotalPageFaultCount: DWORD,
 TotalProcesses: DWORD,
 ActiveProcesses: DWORD,
 TotalTerminatedProcesses: DWORD
});

var _JOBOBJECT_BASIC_LIMIT_INFORMATION = new StructT('_JOBOBJECT_BASIC_LIMIT_INFORMATION', {
 PerProcessUserTimeLimit: LARGE_INTEGER,
 PerJobUserTimeLimit: LARGE_INTEGER,
 LimitFlags: DWORD,
 MinimumWorkingSetSize: SIZE_T,
 MaximumWorkingSetSize: SIZE_T,
 ActiveProcessLimit: DWORD,
 Affinity: ULONG_PTR,
 PriorityClass: DWORD,
 SchedulingClass: DWORD
});

var _JOBOBJECT_EXTENDED_LIMIT_INFORMATION = new StructT('_JOBOBJECT_EXTENDED_LIMIT_INFORMATION', {
 BasicLimitInformation: JOBOBJECT_BASIC_LIMIT_INFORMATION,
 IoInfo: IO_COUNTERS,
 ProcessMemoryLimit: SIZE_T,
 JobMemoryLimit: SIZE_T,
 PeakProcessMemoryUsed: SIZE_T,
 PeakJobMemoryUsed: SIZE_T
});

var _JOBOBJECT_BASIC_PROCESS_ID_LIST = new StructT('_JOBOBJECT_BASIC_PROCESS_ID_LIST', {
 NumberOfAssignedProcesses: DWORD,
 NumberOfProcessIdsInList: DWORD,
 ProcessIdList: ARRAY(ULONG_PTR, 1)
});

var _JOBOBJECT_BASIC_UI_RESTRICTIONS = new StructT('_JOBOBJECT_BASIC_UI_RESTRICTIONS', {
 UIRestrictionsClass: DWORD
});

var _JOBOBJECT_SECURITY_LIMIT_INFORMATION = new StructT('_JOBOBJECT_SECURITY_LIMIT_INFORMATION', {
 SecurityLimitFlags: DWORD,
 JobToken: HANDLE,
 SidsToDisable: PTOKEN_GROUPS,
 PrivilegesToDelete: PTOKEN_PRIVILEGES,
 RestrictedSids: PTOKEN_GROUPS
});

var _JOBOBJECT_END_OF_JOB_TIME_INFORMATION = new StructT('_JOBOBJECT_END_OF_JOB_TIME_INFORMATION', {
 EndOfJobTimeAction: DWORD
});

var _JOBOBJECT_ASSOCIATE_COMPLETION_PORT = new StructT('_JOBOBJECT_ASSOCIATE_COMPLETION_PORT', {
 CompletionKey: PVOID,
 CompletionPort: HANDLE
});

var _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION = new StructT('_JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION', {
 BasicInfo: JOBOBJECT_BASIC_ACCOUNTING_INFORMATION,
 IoInfo: IO_COUNTERS
});

var _JOBOBJECT_JOBSET_INFORMATION = new StructT('_JOBOBJECT_JOBSET_INFORMATION', {
 MemberLevel: DWORD
});

var _CACHE_DESCRIPTOR = new StructT('_CACHE_DESCRIPTOR', {
 Level: BYTE,
 Associativity: BYTE,
 LineSize: WORD,
 Size: DWORD,
 Type: PROCESSOR_CACHE_TYPE
});

var _SYSTEM_LOGICAL_PROCESSOR_INFORMATION = new StructT('_SYSTEM_LOGICAL_PROCESSOR_INFORMATION', {
 ProcessorMask: ULONG_PTR,
 Relationship: LOGICAL_PROCESSOR_RELATIONSHIP
});

var undefined = new StructT('undefined', {
 Flags: BYTE
});

var undefined = new StructT('undefined', {
 NodeNumber: DWORD
});

var _PROCESSOR_RELATIONSHIP = new StructT('_PROCESSOR_RELATIONSHIP', {
 Flags: BYTE,
 Reserved: ARRAY(BYTE, 21),
 GroupCount: WORD,
 GroupMask: ARRAY(GROUP_AFFINITY, ANYSIZE_ARRAY)
});

var _NUMA_NODE_RELATIONSHIP = new StructT('_NUMA_NODE_RELATIONSHIP', {
 NodeNumber: DWORD,
 Reserved: ARRAY(BYTE, 20),
 GroupMask: GROUP_AFFINITY
});

var _CACHE_RELATIONSHIP = new StructT('_CACHE_RELATIONSHIP', {
 Level: BYTE,
 Associativity: BYTE,
 LineSize: WORD,
 CacheSize: DWORD,
 Type: PROCESSOR_CACHE_TYPE,
 Reserved: ARRAY(BYTE, 20),
 GroupMask: GROUP_AFFINITY
});

var _PROCESSOR_GROUP_INFO = new StructT('_PROCESSOR_GROUP_INFO', {
 MaximumProcessorCount: BYTE,
 ActiveProcessorCount: BYTE,
 Reserved: ARRAY(BYTE, 38),
 ActiveProcessorMask: KAFFINITY
});

var _GROUP_RELATIONSHIP = new StructT('_GROUP_RELATIONSHIP', {
 MaximumGroupCount: WORD,
 ActiveGroupCount: WORD,
 Reserved: ARRAY(BYTE, 20),
 GroupInfo: ARRAY(PROCESSOR_GROUP_INFO, ANYSIZE_ARRAY)
});

var SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX = new StructT('SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX', {
 Relationship: LOGICAL_PROCESSOR_RELATIONSHIP,
 Size: DWORD
});

var _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION = new StructT('_SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION', {
 CycleTime: DWORD64
});

var _XSTATE_FEATURE = new StructT('_XSTATE_FEATURE', {
 Offset: DWORD,
 Size: DWORD
});

var _XSTATE_CONFIGURATION = new StructT('_XSTATE_CONFIGURATION', {
 EnabledFeatures: DWORD64,
 Size: DWORD,
 OptimizedSave: DWORD,
 Features: ARRAY(XSTATE_FEATURE, MAXIMUM_XSTATE_FEATURES)
});

var _MEMORY_BASIC_INFORMATION = new StructT('_MEMORY_BASIC_INFORMATION', {
 BaseAddress: PVOID,
 AllocationBase: PVOID,
 AllocationProtect: DWORD,
 RegionSize: SIZE_T,
 State: DWORD,
 Protect: DWORD,
 Type: DWORD
});

var _MEMORY_BASIC_INFORMATION32 = new StructT('_MEMORY_BASIC_INFORMATION32', {
 BaseAddress: DWORD,
 AllocationBase: DWORD,
 AllocationProtect: DWORD,
 RegionSize: DWORD,
 State: DWORD,
 Protect: DWORD,
 Type: DWORD
});

var _MEMORY_BASIC_INFORMATION64 = new StructT('_MEMORY_BASIC_INFORMATION64', {
 BaseAddress: ULONGLONG,
 AllocationBase: ULONGLONG,
 AllocationProtect: DWORD,
 __alignment1: DWORD,
 RegionSize: ULONGLONG,
 State: DWORD,
 Protect: DWORD,
 Type: DWORD,
 __alignment2: DWORD
});

var _FILE_NOTIFY_INFORMATION = new StructT('_FILE_NOTIFY_INFORMATION', {
 NextEntryOffset: DWORD,
 Action: DWORD,
 FileNameLength: DWORD,
 FileName: ARRAY(WCHAR, 1)
});

var _REPARSE_GUID_DATA_BUFFER = new StructT('_REPARSE_GUID_DATA_BUFFER', {
 ReparseTag: DWORD,
 ReparseDataLength: WORD,
 Reserved: WORD,
 ReparseGuid: GUID,
 GenericReparseBuffer: 
});

var undefined = new StructT('undefined', {
 DataBuffer: ARRAY(BYTE, 1)
});

var CM_Power_Data_s = new StructT('CM_Power_Data_s', {
 PD_Size: DWORD,
 PD_MostRecentPowerState: DEVICE_POWER_STATE,
 PD_Capabilities: DWORD,
 PD_D1Latency: DWORD,
 PD_D2Latency: DWORD,
 PD_D3Latency: DWORD,
 PD_PowerStateMapping: ARRAY(DEVICE_POWER_STATE, POWER_SYSTEM_MAXIMUM),
 PD_DeepestSystemWake: SYSTEM_POWER_STATE
});

var undefined = new StructT('undefined', {
 Version: DWORD,
 Guid: GUID,
 PowerCondition: SYSTEM_POWER_CONDITION,
 DataLength: DWORD,
 Data: ARRAY(BYTE, ANYSIZE_ARRAY)
});

var undefined = new StructT('undefined', {
 Guid: GUID
});

var _APPLICATIONLAUNCH_SETTING_VALUE = new StructT('_APPLICATIONLAUNCH_SETTING_VALUE', {
 ActivationTime: LARGE_INTEGER,
 Flags: DWORD,
 ButtonInstanceID: DWORD
});

var undefined = new StructT('undefined', {
 Granularity: DWORD,
 Capacity: DWORD
});

var undefined = new StructT('undefined', {
 Frequency: DWORD,
 Flags: DWORD,
 PercentFrequency: DWORD
});

var undefined = new StructT('undefined', {
 Latency: DWORD,
 Power: DWORD,
 TimeCheck: DWORD,
 PromotePercent: BYTE,
 DemotePercent: BYTE,
 StateType: BYTE,
 Reserved: BYTE,
 StateFlags: DWORD,
 Context: DWORD,
 IdleHandler: DWORD,
 Reserved1: DWORD
});

var undefined = new StructT('undefined', {
 Type: DWORD,
 Count: DWORD,
 TargetState: DWORD,
 OldState: DWORD,
 TargetProcessors: DWORD64,
 State: ARRAY(PPM_WMI_IDLE_STATE, ANYSIZE_ARRAY)
});

var undefined = new StructT('undefined', {
 Type: DWORD,
 Count: DWORD,
 TargetState: DWORD,
 OldState: DWORD,
 TargetProcessors: PVOID,
 State: ARRAY(PPM_WMI_IDLE_STATE, ANYSIZE_ARRAY)
});

var undefined = new StructT('undefined', {
 Frequency: DWORD,
 Power: DWORD,
 PercentFrequency: BYTE,
 IncreaseLevel: BYTE,
 DecreaseLevel: BYTE,
 Type: BYTE,
 IncreaseTime: DWORD,
 DecreaseTime: DWORD,
 Control: DWORD64,
 Status: DWORD64,
 HitCount: DWORD,
 Reserved1: DWORD,
 Reserved2: DWORD64,
 Reserved3: DWORD64
});

var undefined = new StructT('undefined', {
 Count: DWORD,
 MaxFrequency: DWORD,
 CurrentState: DWORD,
 MaxPerfState: DWORD,
 MinPerfState: DWORD,
 LowestPerfState: DWORD,
 ThermalConstraint: DWORD,
 BusyAdjThreshold: BYTE,
 PolicyType: BYTE,
 Type: BYTE,
 Reserved: BYTE,
 TimerInterval: DWORD,
 TargetProcessors: DWORD64,
 PStateHandler: DWORD,
 PStateContext: DWORD,
 TStateHandler: DWORD,
 TStateContext: DWORD,
 FeedbackHandler: DWORD,
 Reserved1: DWORD,
 Reserved2: DWORD64,
 State: ARRAY(PPM_WMI_PERF_STATE, ANYSIZE_ARRAY)
});

var undefined = new StructT('undefined', {
 Count: DWORD,
 MaxFrequency: DWORD,
 CurrentState: DWORD,
 MaxPerfState: DWORD,
 MinPerfState: DWORD,
 LowestPerfState: DWORD,
 ThermalConstraint: DWORD,
 BusyAdjThreshold: BYTE,
 PolicyType: BYTE,
 Type: BYTE,
 Reserved: BYTE,
 TimerInterval: DWORD,
 TargetProcessors: PVOID,
 PStateHandler: DWORD,
 PStateContext: DWORD,
 TStateHandler: DWORD,
 TStateContext: DWORD,
 FeedbackHandler: DWORD,
 Reserved1: DWORD,
 Reserved2: DWORD64,
 State: ARRAY(PPM_WMI_PERF_STATE, ANYSIZE_ARRAY)
});

var undefined = new StructT('undefined', {
 IdleTransitions: DWORD,
 FailedTransitions: DWORD,
 InvalidBucketIndex: DWORD,
 TotalTime: DWORD64,
 IdleTimeBuckets: ARRAY(DWORD, PROC_IDLE_BUCKET_COUNT)
});

var undefined = new StructT('undefined', {
 StateCount: DWORD,
 TotalTransitions: DWORD,
 ResetCount: DWORD,
 StartTime: DWORD64,
 State: ARRAY(PPM_IDLE_STATE_ACCOUNTING, ANYSIZE_ARRAY)
});

var undefined = new StructT('undefined', {
 TotalTimeUs: DWORD64,
 MinTimeUs: DWORD,
 MaxTimeUs: DWORD,
 Count: DWORD
});

var undefined = new StructT('undefined', {
 TotalTime: DWORD64,
 IdleTransitions: DWORD,
 FailedTransitions: DWORD,
 InvalidBucketIndex: DWORD,
 MinTimeUs: DWORD,
 MaxTimeUs: DWORD,
 IdleTimeBuckets: ARRAY(PPM_IDLE_STATE_BUCKET_EX, PROC_IDLE_BUCKET_COUNT_EX)
});

var undefined = new StructT('undefined', {
 StateCount: DWORD,
 TotalTransitions: DWORD,
 ResetCount: DWORD,
 StartTime: DWORD64,
 State: ARRAY(PPM_IDLE_STATE_ACCOUNTING_EX, ANYSIZE_ARRAY)
});

var undefined = new StructT('undefined', {
 State: DWORD,
 Status: DWORD,
 Latency: DWORD,
 Speed: DWORD,
 Processor: DWORD
});

var undefined = new StructT('undefined', {
 State: DWORD,
 Latency: DWORD,
 Speed: DWORD,
 Processors: DWORD64
});

var undefined = new StructT('undefined', {
 NewState: DWORD,
 OldState: DWORD,
 Processors: DWORD64
});

var undefined = new StructT('undefined', {
 ThermalConstraint: DWORD,
 Processors: DWORD64
});

var undefined = new StructT('undefined', {
 Mode: BYTE,
 Processors: DWORD64
});

var undefined = new StructT('undefined', {
 Action: POWER_ACTION,
 Flags: DWORD,
 EventCode: DWORD
});

var undefined = new StructT('undefined', {
 Enable: BOOLEAN,
 Spare: ARRAY(BYTE, 3),
 BatteryLevel: DWORD,
 PowerPolicy: POWER_ACTION_POLICY,
 MinSystemState: SYSTEM_POWER_STATE
});

var _SYSTEM_POWER_POLICY = new StructT('_SYSTEM_POWER_POLICY', {
 Revision: DWORD,
 PowerButton: POWER_ACTION_POLICY,
 SleepButton: POWER_ACTION_POLICY,
 LidClose: POWER_ACTION_POLICY,
 LidOpenWake: SYSTEM_POWER_STATE,
 Reserved: DWORD,
 Idle: POWER_ACTION_POLICY,
 IdleTimeout: DWORD,
 IdleSensitivity: BYTE,
 DynamicThrottle: BYTE,
 Spare2: ARRAY(BYTE, 2),
 MinSleep: SYSTEM_POWER_STATE,
 MaxSleep: SYSTEM_POWER_STATE,
 ReducedLatencySleep: SYSTEM_POWER_STATE,
 WinLogonFlags: DWORD,
 Spare3: DWORD,
 DozeS4Timeout: DWORD,
 BroadcastCapacityResolution: DWORD,
 DischargePolicy: ARRAY(SYSTEM_POWER_LEVEL, NUM_DISCHARGE_POLICIES),
 VideoTimeout: DWORD,
 VideoDimDisplay: BOOLEAN,
 VideoReserved: ARRAY(DWORD, 3),
 SpindownTimeout: DWORD,
 OptimizeForPower: BOOLEAN,
 FanThrottleTolerance: BYTE,
 ForcedThrottle: BYTE,
 MinThrottle: BYTE,
 OverThrottled: POWER_ACTION_POLICY
});

var undefined = new StructT('undefined', {
 TimeCheck: DWORD,
 DemotePercent: BYTE,
 PromotePercent: BYTE,
 Spare: ARRAY(BYTE, 2)
});

var undefined = new StructT('undefined', {
 Revision: WORD,
 Flags: c:winnt.h@338317@SA@PROCESSOR_IDLESTATE_POLICY@Ua,
 PolicyCount: DWORD,
 Policy: ARRAY(PROCESSOR_IDLESTATE_INFO, PROCESSOR_IDLESTATE_POLICY_COUNT)
});

var undefined = new StructT('undefined', {
 AllowScaling: WORD,
 Disabled: WORD,
 Reserved: WORD
});

var _PROCESSOR_POWER_POLICY_INFO = new StructT('_PROCESSOR_POWER_POLICY_INFO', {
 TimeCheck: DWORD,
 DemoteLimit: DWORD,
 PromoteLimit: DWORD,
 DemotePercent: BYTE,
 PromotePercent: BYTE,
 Spare: ARRAY(BYTE, 2),
 AllowDemotion: DWORD,
 AllowPromotion: DWORD,
 Reserved: DWORD
});

var _PROCESSOR_POWER_POLICY = new StructT('_PROCESSOR_POWER_POLICY', {
 Revision: DWORD,
 DynamicThrottle: BYTE,
 Spare: ARRAY(BYTE, 3),
 DisableCStates: DWORD,
 Reserved: DWORD,
 PolicyCount: DWORD,
 Policy: ARRAY(PROCESSOR_POWER_POLICY_INFO, 3)
});

var undefined = new StructT('undefined', {
 Revision: DWORD,
 MaxThrottle: BYTE,
 MinThrottle: BYTE,
 BusyAdjThreshold: BYTE,
 TimeCheck: DWORD,
 IncreaseTime: DWORD,
 DecreaseTime: DWORD,
 IncreasePercent: DWORD,
 DecreasePercent: DWORD
});

var undefined = new StructT('undefined', {
 NoDomainAccounting: BYTE,
 IncreasePolicy: BYTE,
 DecreasePolicy: BYTE,
 Reserved: BYTE
});

var _ADMINISTRATOR_POWER_POLICY = new StructT('_ADMINISTRATOR_POWER_POLICY', {
 MinSleep: SYSTEM_POWER_STATE,
 MaxSleep: SYSTEM_POWER_STATE,
 MinVideoTimeout: DWORD,
 MaxVideoTimeout: DWORD,
 MinSpindownTimeout: DWORD,
 MaxSpindownTimeout: DWORD
});

var undefined = new StructT('undefined', {
 PowerButtonPresent: BOOLEAN,
 SleepButtonPresent: BOOLEAN,
 LidPresent: BOOLEAN,
 SystemS1: BOOLEAN,
 SystemS2: BOOLEAN,
 SystemS3: BOOLEAN,
 SystemS4: BOOLEAN,
 SystemS5: BOOLEAN,
 HiberFilePresent: BOOLEAN,
 FullWake: BOOLEAN,
 VideoDimPresent: BOOLEAN,
 ApmPresent: BOOLEAN,
 UpsPresent: BOOLEAN,
 ThermalControl: BOOLEAN,
 ProcessorThrottle: BOOLEAN,
 ProcessorMinThrottle: BYTE,
 ProcessorMaxThrottle: BYTE,
 FastSystemS4: BOOLEAN,
 spare2: ARRAY(BYTE, 3),
 DiskSpinDown: BOOLEAN,
 spare3: ARRAY(BYTE, 8),
 SystemBatteriesPresent: BOOLEAN,
 BatteriesAreShortTerm: BOOLEAN,
 BatteryScale: ARRAY(BATTERY_REPORTING_SCALE, 3),
 AcOnLineWake: SYSTEM_POWER_STATE,
 SoftLidWake: SYSTEM_POWER_STATE,
 RtcWake: SYSTEM_POWER_STATE,
 MinDeviceWakeState: SYSTEM_POWER_STATE,
 DefaultLowLatencyWake: SYSTEM_POWER_STATE
});

var undefined = new StructT('undefined', {
 AcOnLine: BOOLEAN,
 BatteryPresent: BOOLEAN,
 Charging: BOOLEAN,
 Discharging: BOOLEAN,
 Spare1: ARRAY(BOOLEAN, 4),
 MaxCapacity: DWORD,
 RemainingCapacity: DWORD,
 Rate: DWORD,
 EstimatedTime: DWORD,
 DefaultAlert1: DWORD,
 DefaultAlert2: DWORD
});

var _IMAGE_DOS_HEADER = new StructT('_IMAGE_DOS_HEADER', {
 e_magic: WORD,
 e_cblp: WORD,
 e_cp: WORD,
 e_crlc: WORD,
 e_cparhdr: WORD,
 e_minalloc: WORD,
 e_maxalloc: WORD,
 e_ss: WORD,
 e_sp: WORD,
 e_csum: WORD,
 e_ip: WORD,
 e_cs: WORD,
 e_lfarlc: WORD,
 e_ovno: WORD,
 e_res: ARRAY(WORD, 4),
 e_oemid: WORD,
 e_oeminfo: WORD,
 e_res2: ARRAY(WORD, 10),
 e_lfanew: LONG
});

var _IMAGE_OS2_HEADER = new StructT('_IMAGE_OS2_HEADER', {
 ne_magic: WORD,
 ne_ver: CHAR,
 ne_rev: CHAR,
 ne_enttab: WORD,
 ne_cbenttab: WORD,
 ne_crc: LONG,
 ne_flags: WORD,
 ne_autodata: WORD,
 ne_heap: WORD,
 ne_stack: WORD,
 ne_csip: LONG,
 ne_sssp: LONG,
 ne_cseg: WORD,
 ne_cmod: WORD,
 ne_cbnrestab: WORD,
 ne_segtab: WORD,
 ne_rsrctab: WORD,
 ne_restab: WORD,
 ne_modtab: WORD,
 ne_imptab: WORD,
 ne_nrestab: LONG,
 ne_cmovent: WORD,
 ne_align: WORD,
 ne_cres: WORD,
 ne_exetyp: BYTE,
 ne_flagsothers: BYTE,
 ne_pretthunks: WORD,
 ne_psegrefbytes: WORD,
 ne_swaparea: WORD,
 ne_expver: WORD
});

var _IMAGE_VXD_HEADER = new StructT('_IMAGE_VXD_HEADER', {
 e32_magic: WORD,
 e32_border: BYTE,
 e32_worder: BYTE,
 e32_level: DWORD,
 e32_cpu: WORD,
 e32_os: WORD,
 e32_ver: DWORD,
 e32_mflags: DWORD,
 e32_mpages: DWORD,
 e32_startobj: DWORD,
 e32_eip: DWORD,
 e32_stackobj: DWORD,
 e32_esp: DWORD,
 e32_pagesize: DWORD,
 e32_lastpagesize: DWORD,
 e32_fixupsize: DWORD,
 e32_fixupsum: DWORD,
 e32_ldrsize: DWORD,
 e32_ldrsum: DWORD,
 e32_objtab: DWORD,
 e32_objcnt: DWORD,
 e32_objmap: DWORD,
 e32_itermap: DWORD,
 e32_rsrctab: DWORD,
 e32_rsrccnt: DWORD,
 e32_restab: DWORD,
 e32_enttab: DWORD,
 e32_dirtab: DWORD,
 e32_dircnt: DWORD,
 e32_fpagetab: DWORD,
 e32_frectab: DWORD,
 e32_impmod: DWORD,
 e32_impmodcnt: DWORD,
 e32_impproc: DWORD,
 e32_pagesum: DWORD,
 e32_datapage: DWORD,
 e32_preload: DWORD,
 e32_nrestab: DWORD,
 e32_cbnrestab: DWORD,
 e32_nressum: DWORD,
 e32_autodata: DWORD,
 e32_debuginfo: DWORD,
 e32_debuglen: DWORD,
 e32_instpreload: DWORD,
 e32_instdemand: DWORD,
 e32_heapsize: DWORD,
 e32_res3: ARRAY(BYTE, 12),
 e32_winresoff: DWORD,
 e32_winreslen: DWORD,
 e32_devid: WORD,
 e32_ddkver: WORD
});

var _IMAGE_FILE_HEADER = new StructT('_IMAGE_FILE_HEADER', {
 Machine: WORD,
 NumberOfSections: WORD,
 TimeDateStamp: DWORD,
 PointerToSymbolTable: DWORD,
 NumberOfSymbols: DWORD,
 SizeOfOptionalHeader: WORD,
 Characteristics: WORD
});

var _IMAGE_DATA_DIRECTORY = new StructT('_IMAGE_DATA_DIRECTORY', {
 VirtualAddress: DWORD,
 Size: DWORD
});

var IMAGE_OPTIONAL_HEADER = new StructT('IMAGE_OPTIONAL_HEADER', {
 Magic: WORD,
 MajorLinkerVersion: BYTE,
 MinorLinkerVersion: BYTE,
 SizeOfCode: DWORD,
 SizeOfInitializedData: DWORD,
 SizeOfUninitializedData: DWORD,
 AddressOfEntryPoint: DWORD,
 BaseOfCode: DWORD,
 BaseOfData: DWORD,
 ImageBase: DWORD,
 SectionAlignment: DWORD,
 FileAlignment: DWORD,
 MajorOperatingSystemVersion: WORD,
 MinorOperatingSystemVersion: WORD,
 MajorImageVersion: WORD,
 MinorImageVersion: WORD,
 MajorSubsystemVersion: WORD,
 MinorSubsystemVersion: WORD,
 Win32VersionValue: DWORD,
 SizeOfImage: DWORD,
 SizeOfHeaders: DWORD,
 CheckSum: DWORD,
 Subsystem: WORD,
 DllCharacteristics: WORD,
 SizeOfStackReserve: DWORD,
 SizeOfStackCommit: DWORD,
 SizeOfHeapReserve: DWORD,
 SizeOfHeapCommit: DWORD,
 LoaderFlags: DWORD,
 NumberOfRvaAndSizes: DWORD,
 DataDirectory: ARRAY(IMAGE_DATA_DIRECTORY, IMAGE_NUMBEROF_DIRECTORY_ENTRIES)
});

var _IMAGE_ROM_OPTIONAL_HEADER = new StructT('_IMAGE_ROM_OPTIONAL_HEADER', {
 Magic: WORD,
 MajorLinkerVersion: BYTE,
 MinorLinkerVersion: BYTE,
 SizeOfCode: DWORD,
 SizeOfInitializedData: DWORD,
 SizeOfUninitializedData: DWORD,
 AddressOfEntryPoint: DWORD,
 BaseOfCode: DWORD,
 BaseOfData: DWORD,
 BaseOfBss: DWORD,
 GprMask: DWORD,
 CprMask: ARRAY(DWORD, 4),
 GpValue: DWORD
});

var _IMAGE_OPTIONAL_HEADER64 = new StructT('_IMAGE_OPTIONAL_HEADER64', {
 Magic: WORD,
 MajorLinkerVersion: BYTE,
 MinorLinkerVersion: BYTE,
 SizeOfCode: DWORD,
 SizeOfInitializedData: DWORD,
 SizeOfUninitializedData: DWORD,
 AddressOfEntryPoint: DWORD,
 BaseOfCode: DWORD,
 ImageBase: ULONGLONG,
 SectionAlignment: DWORD,
 FileAlignment: DWORD,
 MajorOperatingSystemVersion: WORD,
 MinorOperatingSystemVersion: WORD,
 MajorImageVersion: WORD,
 MinorImageVersion: WORD,
 MajorSubsystemVersion: WORD,
 MinorSubsystemVersion: WORD,
 Win32VersionValue: DWORD,
 SizeOfImage: DWORD,
 SizeOfHeaders: DWORD,
 CheckSum: DWORD,
 Subsystem: WORD,
 DllCharacteristics: WORD,
 SizeOfStackReserve: ULONGLONG,
 SizeOfStackCommit: ULONGLONG,
 SizeOfHeapReserve: ULONGLONG,
 SizeOfHeapCommit: ULONGLONG,
 LoaderFlags: DWORD,
 NumberOfRvaAndSizes: DWORD,
 DataDirectory: ARRAY(IMAGE_DATA_DIRECTORY, IMAGE_NUMBEROF_DIRECTORY_ENTRIES)
});

var _IMAGE_NT_HEADERS64 = new StructT('_IMAGE_NT_HEADERS64', {
 Signature: DWORD,
 FileHeader: IMAGE_FILE_HEADER,
 OptionalHeader: IMAGE_OPTIONAL_HEADER64
});

var IMAGE_NT_HEADERS = new StructT('IMAGE_NT_HEADERS', {
 Signature: DWORD,
 FileHeader: IMAGE_FILE_HEADER,
 OptionalHeader: IMAGE_OPTIONAL_HEADER32
});

var _IMAGE_ROM_HEADERS = new StructT('_IMAGE_ROM_HEADERS', {
 FileHeader: IMAGE_FILE_HEADER,
 OptionalHeader: IMAGE_ROM_OPTIONAL_HEADER
});

var ANON_OBJECT_HEADER = new StructT('ANON_OBJECT_HEADER', {
 Sig1: WORD,
 Sig2: WORD,
 Version: WORD,
 Machine: WORD,
 TimeDateStamp: DWORD,
 ClassID: CLSID,
 SizeOfData: DWORD
});

var ANON_OBJECT_HEADER_V2 = new StructT('ANON_OBJECT_HEADER_V2', {
 Sig1: WORD,
 Sig2: WORD,
 Version: WORD,
 Machine: WORD,
 TimeDateStamp: DWORD,
 ClassID: CLSID,
 SizeOfData: DWORD,
 Flags: DWORD,
 MetaDataSize: DWORD,
 MetaDataOffset: DWORD
});

var ANON_OBJECT_HEADER_BIGOBJ = new StructT('ANON_OBJECT_HEADER_BIGOBJ', {
 Sig1: WORD,
 Sig2: WORD,
 Version: WORD,
 Machine: WORD,
 TimeDateStamp: DWORD,
 ClassID: CLSID,
 SizeOfData: DWORD,
 Flags: DWORD,
 MetaDataSize: DWORD,
 MetaDataOffset: DWORD,
 NumberOfSections: DWORD,
 PointerToSymbolTable: DWORD,
 NumberOfSymbols: DWORD
});

var _IMAGE_SECTION_HEADER = new StructT('_IMAGE_SECTION_HEADER', {
 Name: ARRAY(BYTE, IMAGE_SIZEOF_SHORT_NAME),
 Misc: c:winnt.h@366160@S@_IMAGE_SECTION_HEADER@Ua,
 VirtualAddress: DWORD,
 SizeOfRawData: DWORD,
 PointerToRawData: DWORD,
 PointerToRelocations: DWORD,
 PointerToLinenumbers: DWORD,
 NumberOfRelocations: WORD,
 NumberOfLinenumbers: WORD,
 Characteristics: DWORD
});

var _IMAGE_SYMBOL = new StructT('_IMAGE_SYMBOL', {
 N: c:winnt.h@370553@S@_IMAGE_SYMBOL@Ua,
 Value: DWORD,
 SectionNumber: SHORT,
 Type: WORD,
 StorageClass: BYTE,
 NumberOfAuxSymbols: BYTE
});

var undefined = new StructT('undefined', {
 Short: DWORD,
 Long: DWORD
});

var _IMAGE_SYMBOL_EX = new StructT('_IMAGE_SYMBOL_EX', {
 N: c:winnt.h@371082@S@_IMAGE_SYMBOL_EX@Ua,
 Value: DWORD,
 SectionNumber: LONG,
 Type: WORD,
 StorageClass: BYTE,
 NumberOfAuxSymbols: BYTE
});

var undefined = new StructT('undefined', {
 Short: DWORD,
 Long: DWORD
});

var IMAGE_AUX_SYMBOL_TOKEN_DEF = new StructT('IMAGE_AUX_SYMBOL_TOKEN_DEF', {
 bAuxType: BYTE,
 bReserved: BYTE,
 SymbolTableIndex: DWORD,
 rgbReserved: ARRAY(BYTE, 12)
});

var undefined = new StructT('undefined', {
 TagIndex: DWORD,
 Misc: c:winnt.h@376762@U@_IMAGE_AUX_SYMBOL@Sa@Ua,
 FcnAry: c:winnt.h@377030@U@_IMAGE_AUX_SYMBOL@Sa@Ua,
 TvIndex: WORD
});

var undefined = new StructT('undefined', {
 Linenumber: WORD,
 Size: WORD
});

var undefined = new StructT('undefined', {
 PointerToLinenumber: DWORD,
 PointerToNextFunction: DWORD
});

var undefined = new StructT('undefined', {
 Dimension: ARRAY(WORD, 4)
});

var undefined = new StructT('undefined', {
 Name: ARRAY(BYTE, IMAGE_SIZEOF_SYMBOL)
});

var undefined = new StructT('undefined', {
 Length: DWORD,
 NumberOfRelocations: WORD,
 NumberOfLinenumbers: WORD,
 CheckSum: DWORD,
 Number: SHORT,
 Selection: BYTE,
 bReserved: BYTE,
 HighNumber: SHORT
});

var undefined = new StructT('undefined', {
 crc: DWORD,
 rgbReserved: ARRAY(BYTE, 14)
});

var undefined = new StructT('undefined', {
 WeakDefaultSymIndex: DWORD,
 WeakSearchType: DWORD,
 rgbReserved: ARRAY(BYTE, 12)
});

var undefined = new StructT('undefined', {
 Name: ARRAY(BYTE, undefined)
});

var undefined = new StructT('undefined', {
 Length: DWORD,
 NumberOfRelocations: WORD,
 NumberOfLinenumbers: WORD,
 CheckSum: DWORD,
 Number: SHORT,
 Selection: BYTE,
 bReserved: BYTE,
 HighNumber: SHORT,
 rgbReserved: ARRAY(BYTE, 2)
});

var undefined = new StructT('undefined', {
 TokenDef: IMAGE_AUX_SYMBOL_TOKEN_DEF,
 rgbReserved: ARRAY(BYTE, 2)
});

var undefined = new StructT('undefined', {
 crc: DWORD,
 rgbReserved: ARRAY(BYTE, 16)
});

var _IMAGE_RELOCATION = new StructT('_IMAGE_RELOCATION', {
 SymbolTableIndex: DWORD,
 Type: WORD
});

var _IMAGE_LINENUMBER = new StructT('_IMAGE_LINENUMBER', {
 Type: c:winnt.h@402328@S@_IMAGE_LINENUMBER@Ua,
 Linenumber: WORD
});

var _IMAGE_BASE_RELOCATION = new StructT('_IMAGE_BASE_RELOCATION', {
 VirtualAddress: DWORD,
 SizeOfBlock: DWORD
});

var _IMAGE_ARCHIVE_MEMBER_HEADER = new StructT('_IMAGE_ARCHIVE_MEMBER_HEADER', {
 Name: ARRAY(BYTE, 16),
 Date: ARRAY(BYTE, 12),
 UserID: ARRAY(BYTE, 6),
 GroupID: ARRAY(BYTE, 6),
 Mode: ARRAY(BYTE, 8),
 Size: ARRAY(BYTE, 10),
 EndHeader: ARRAY(BYTE, 2)
});

var _IMAGE_EXPORT_DIRECTORY = new StructT('_IMAGE_EXPORT_DIRECTORY', {
 Characteristics: DWORD,
 TimeDateStamp: DWORD,
 MajorVersion: WORD,
 MinorVersion: WORD,
 Name: DWORD,
 Base: DWORD,
 NumberOfFunctions: DWORD,
 NumberOfNames: DWORD,
 AddressOfFunctions: DWORD,
 AddressOfNames: DWORD,
 AddressOfNameOrdinals: DWORD
});

var _IMAGE_IMPORT_BY_NAME = new StructT('_IMAGE_IMPORT_BY_NAME', {
 Hint: WORD,
 Name: ARRAY(BYTE, 1)
});

var _IMAGE_THUNK_DATA64 = new StructT('_IMAGE_THUNK_DATA64', {
 u1: c:winnt.h@405458@S@_IMAGE_THUNK_DATA64@Ua
});

var IMAGE_THUNK_DATA = new StructT('IMAGE_THUNK_DATA', {
 u1: c:winnt.h@405853@S@_IMAGE_THUNK_DATA32@Ua
});

var _IMAGE_TLS_DIRECTORY64 = new StructT('_IMAGE_TLS_DIRECTORY64', {
 StartAddressOfRawData: ULONGLONG,
 EndAddressOfRawData: ULONGLONG,
 AddressOfIndex: ULONGLONG,
 AddressOfCallBacks: ULONGLONG,
 SizeOfZeroFill: DWORD,
 Characteristics: DWORD
});

var IMAGE_TLS_DIRECTORY = new StructT('IMAGE_TLS_DIRECTORY', {
 StartAddressOfRawData: DWORD,
 EndAddressOfRawData: DWORD,
 AddressOfIndex: DWORD,
 AddressOfCallBacks: DWORD,
 SizeOfZeroFill: DWORD,
 Characteristics: DWORD
});

var _IMAGE_IMPORT_DESCRIPTOR = new StructT('_IMAGE_IMPORT_DESCRIPTOR', {
 TimeDateStamp: DWORD,
 ForwarderChain: DWORD,
 Name: DWORD,
 FirstThunk: DWORD
});

var _IMAGE_BOUND_IMPORT_DESCRIPTOR = new StructT('_IMAGE_BOUND_IMPORT_DESCRIPTOR', {
 TimeDateStamp: DWORD,
 OffsetModuleName: WORD,
 NumberOfModuleForwarderRefs: WORD
});

var _IMAGE_BOUND_FORWARDER_REF = new StructT('_IMAGE_BOUND_FORWARDER_REF', {
 TimeDateStamp: DWORD,
 OffsetModuleName: WORD,
 Reserved: WORD
});

var _IMAGE_RESOURCE_DIRECTORY = new StructT('_IMAGE_RESOURCE_DIRECTORY', {
 Characteristics: DWORD,
 TimeDateStamp: DWORD,
 MajorVersion: WORD,
 MinorVersion: WORD,
 NumberOfNamedEntries: WORD,
 NumberOfIdEntries: WORD
});


var undefined = new StructT('undefined', {
 NameOffset: DWORD,
 NameIsString: DWORD
});

var undefined = new StructT('undefined', {
 OffsetToDirectory: DWORD,
 DataIsDirectory: DWORD
});

var _IMAGE_RESOURCE_DIRECTORY_STRING = new StructT('_IMAGE_RESOURCE_DIRECTORY_STRING', {
 Length: WORD,
 NameString: ARRAY(CHAR,  1 )
});

var _IMAGE_RESOURCE_DIR_STRING_U = new StructT('_IMAGE_RESOURCE_DIR_STRING_U', {
 Length: WORD,
 NameString: ARRAY(WCHAR,  1 )
});

var _IMAGE_RESOURCE_DATA_ENTRY = new StructT('_IMAGE_RESOURCE_DATA_ENTRY', {
 OffsetToData: DWORD,
 Size: DWORD,
 CodePage: DWORD,
 Reserved: DWORD
});

var IMAGE_LOAD_CONFIG_DIRECTORY = new StructT('IMAGE_LOAD_CONFIG_DIRECTORY', {
 Size: DWORD,
 TimeDateStamp: DWORD,
 MajorVersion: WORD,
 MinorVersion: WORD,
 GlobalFlagsClear: DWORD,
 GlobalFlagsSet: DWORD,
 CriticalSectionDefaultTimeout: DWORD,
 DeCommitFreeBlockThreshold: DWORD,
 DeCommitTotalFreeThreshold: DWORD,
 LockPrefixTable: DWORD,
 MaximumAllocationSize: DWORD,
 VirtualMemoryThreshold: DWORD,
 ProcessHeapFlags: DWORD,
 ProcessAffinityMask: DWORD,
 CSDVersion: WORD,
 Reserved1: WORD,
 EditList: DWORD,
 SecurityCookie: DWORD,
 SEHandlerTable: DWORD,
 SEHandlerCount: DWORD
});

var undefined = new StructT('undefined', {
 Size: DWORD,
 TimeDateStamp: DWORD,
 MajorVersion: WORD,
 MinorVersion: WORD,
 GlobalFlagsClear: DWORD,
 GlobalFlagsSet: DWORD,
 CriticalSectionDefaultTimeout: DWORD,
 DeCommitFreeBlockThreshold: ULONGLONG,
 DeCommitTotalFreeThreshold: ULONGLONG,
 LockPrefixTable: ULONGLONG,
 MaximumAllocationSize: ULONGLONG,
 VirtualMemoryThreshold: ULONGLONG,
 ProcessAffinityMask: ULONGLONG,
 ProcessHeapFlags: DWORD,
 CSDVersion: WORD,
 Reserved1: WORD,
 EditList: ULONGLONG,
 SecurityCookie: ULONGLONG,
 SEHandlerTable: ULONGLONG,
 SEHandlerCount: ULONGLONG
});

var _IMAGE_CE_RUNTIME_FUNCTION_ENTRY = new StructT('_IMAGE_CE_RUNTIME_FUNCTION_ENTRY', {
 FuncStart: DWORD,
 PrologLen: DWORD,
 FuncLen: DWORD,
 ThirtyTwoBit: DWORD,
 ExceptionFlag: DWORD
});

var _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY = new StructT('_IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY', {
 BeginAddress: ULONGLONG,
 EndAddress: ULONGLONG,
 ExceptionHandler: ULONGLONG,
 HandlerData: ULONGLONG,
 PrologEndAddress: ULONGLONG
});

var _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY = new StructT('_IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY', {
 BeginAddress: DWORD,
 EndAddress: DWORD,
 ExceptionHandler: DWORD,
 HandlerData: DWORD,
 PrologEndAddress: DWORD
});

var IMAGE_RUNTIME_FUNCTION_ENTRY = new StructT('IMAGE_RUNTIME_FUNCTION_ENTRY', {
 BeginAddress: DWORD,
 EndAddress: DWORD,
 UnwindInfoAddress: DWORD
});

var _IMAGE_DEBUG_DIRECTORY = new StructT('_IMAGE_DEBUG_DIRECTORY', {
 Characteristics: DWORD,
 TimeDateStamp: DWORD,
 MajorVersion: WORD,
 MinorVersion: WORD,
 Type: DWORD,
 SizeOfData: DWORD,
 AddressOfRawData: DWORD,
 PointerToRawData: DWORD
});

var _IMAGE_COFF_SYMBOLS_HEADER = new StructT('_IMAGE_COFF_SYMBOLS_HEADER', {
 NumberOfSymbols: DWORD,
 LvaToFirstSymbol: DWORD,
 NumberOfLinenumbers: DWORD,
 LvaToFirstLinenumber: DWORD,
 RvaToFirstByteOfCode: DWORD,
 RvaToLastByteOfCode: DWORD,
 RvaToFirstByteOfData: DWORD,
 RvaToLastByteOfData: DWORD
});

var _FPO_DATA = new StructT('_FPO_DATA', {
 ulOffStart: DWORD,
 cbProcSize: DWORD,
 cdwLocals: DWORD,
 cdwParams: WORD,
 cbProlog: WORD,
 cbRegs: WORD,
 fHasSEH: WORD,
 fUseBP: WORD,
 reserved: WORD,
 cbFrame: WORD
});

var _IMAGE_DEBUG_MISC = new StructT('_IMAGE_DEBUG_MISC', {
 DataType: DWORD,
 Length: DWORD,
 Unicode: BOOLEAN,
 Reserved: ARRAY(BYTE,  3 ),
 Data: ARRAY(BYTE,  1 )
});

var _IMAGE_FUNCTION_ENTRY = new StructT('_IMAGE_FUNCTION_ENTRY', {
 StartingAddress: DWORD,
 EndingAddress: DWORD,
 EndOfPrologue: DWORD
});

var _IMAGE_FUNCTION_ENTRY64 = new StructT('_IMAGE_FUNCTION_ENTRY64', {
 StartingAddress: ULONGLONG,
 EndingAddress: ULONGLONG
});

var _IMAGE_SEPARATE_DEBUG_HEADER = new StructT('_IMAGE_SEPARATE_DEBUG_HEADER', {
 Signature: WORD,
 Flags: WORD,
 Machine: WORD,
 Characteristics: WORD,
 TimeDateStamp: DWORD,
 CheckSum: DWORD,
 ImageBase: DWORD,
 SizeOfImage: DWORD,
 NumberOfSections: DWORD,
 ExportedNamesSize: DWORD,
 DebugDirectorySize: DWORD,
 SectionAlignment: DWORD,
 Reserved: ARRAY(DWORD, 2)
});

var _NON_PAGED_DEBUG_INFO = new StructT('_NON_PAGED_DEBUG_INFO', {
 Signature: WORD,
 Flags: WORD,
 Size: DWORD,
 Machine: WORD,
 Characteristics: WORD,
 TimeDateStamp: DWORD,
 CheckSum: DWORD,
 SizeOfImage: DWORD,
 ImageBase: ULONGLONG
});

var _ImageArchitectureHeader = new StructT('_ImageArchitectureHeader', {
 AmaskValue: uint,
 '': int,
 AmaskShift: uint,
 FirstEntryRVA: DWORD
});

var _ImageArchitectureEntry = new StructT('_ImageArchitectureEntry', {
 FixupInstRVA: DWORD,
 NewInst: DWORD
});

var IMPORT_OBJECT_HEADER = new StructT('IMPORT_OBJECT_HEADER', {
 Sig1: WORD,
 Sig2: WORD,
 Version: WORD,
 Machine: WORD,
 TimeDateStamp: DWORD,
 SizeOfData: DWORD,
 Type: WORD,
 NameType: WORD,
 Reserved: WORD
});

var IMAGE_COR20_HEADER = new StructT('IMAGE_COR20_HEADER', {
 cb: DWORD,
 MajorRuntimeVersion: WORD,
 MinorRuntimeVersion: WORD,
 MetaData: IMAGE_DATA_DIRECTORY,
 Flags: DWORD,
 Resources: IMAGE_DATA_DIRECTORY,
 StrongNameSignature: IMAGE_DATA_DIRECTORY,
 CodeManagerTable: IMAGE_DATA_DIRECTORY,
 VTableFixups: IMAGE_DATA_DIRECTORY,
 ExportAddressTableJumps: IMAGE_DATA_DIRECTORY,
 ManagedNativeHeader: IMAGE_DATA_DIRECTORY
});

var undefined = new StructT('undefined', {
 Next: SINGLE_LIST_ENTRY,
 Depth: WORD,
 Sequence: WORD
});

var _MESSAGE_RESOURCE_ENTRY = new StructT('_MESSAGE_RESOURCE_ENTRY', {
 Length: WORD,
 Flags: WORD,
 Text: ARRAY(BYTE,  1 )
});

var _MESSAGE_RESOURCE_BLOCK = new StructT('_MESSAGE_RESOURCE_BLOCK', {
 LowId: DWORD,
 HighId: DWORD,
 OffsetToEntries: DWORD
});

var _MESSAGE_RESOURCE_DATA = new StructT('_MESSAGE_RESOURCE_DATA', {
 NumberOfBlocks: DWORD,
 Blocks: ARRAY(MESSAGE_RESOURCE_BLOCK,  1 )
});

var OSVERSIONINFO = new StructT('OSVERSIONINFO', {
 dwOSVersionInfoSize: DWORD,
 dwMajorVersion: DWORD,
 dwMinorVersion: DWORD,
 dwBuildNumber: DWORD,
 dwPlatformId: DWORD,
 szCSDVersion: ARRAY(CHAR,  128 )
});

var _OSVERSIONINFOW = new StructT('_OSVERSIONINFOW', {
 dwOSVersionInfoSize: DWORD,
 dwMajorVersion: DWORD,
 dwMinorVersion: DWORD,
 dwBuildNumber: DWORD,
 dwPlatformId: DWORD,
 szCSDVersion: ARRAY(WCHAR,  128 )
});

var OSVERSIONINFOEX = new StructT('OSVERSIONINFOEX', {
 dwOSVersionInfoSize: DWORD,
 dwMajorVersion: DWORD,
 dwMinorVersion: DWORD,
 dwBuildNumber: DWORD,
 dwPlatformId: DWORD,
 szCSDVersion: ARRAY(CHAR,  128 ),
 wServicePackMajor: WORD,
 wServicePackMinor: WORD,
 wSuiteMask: WORD,
 wProductType: BYTE,
 wReserved: BYTE
});

var _OSVERSIONINFOEXW = new StructT('_OSVERSIONINFOEXW', {
 dwOSVersionInfoSize: DWORD,
 dwMajorVersion: DWORD,
 dwMinorVersion: DWORD,
 dwBuildNumber: DWORD,
 dwPlatformId: DWORD,
 szCSDVersion: ARRAY(WCHAR,  128 ),
 wServicePackMajor: WORD,
 wServicePackMinor: WORD,
 wSuiteMask: WORD,
 wProductType: BYTE,
 wReserved: BYTE
});

var CRITICAL_SECTION_DEBUG = new StructT('CRITICAL_SECTION_DEBUG', {
 Type: WORD,
 CreatorBackTraceIndex: WORD,
 CriticalSection: _RTL_CRITICAL_SECTION.Δ,
 ProcessLocksList: LIST_ENTRY,
 EntryCount: DWORD,
 ContentionCount: DWORD,
 Flags: DWORD,
 CreatorBackTraceIndexHigh: WORD,
 SpareWORD: WORD
});

var CRITICAL_SECTION = new StructT('CRITICAL_SECTION', {
 DebugInfo: PRTL_CRITICAL_SECTION_DEBUG,
 LockCount: LONG,
 RecursionCount: LONG,
 OwningThread: HANDLE,
 LockSemaphore: HANDLE,
 SpinCount: ULONG_PTR
});

var SRWLOCK = new StructT('SRWLOCK', {
 Ptr: PVOID
});

var CONDITION_VARIABLE = new StructT('CONDITION_VARIABLE', {
 Ptr: PVOID
});

var _ACTIVATION_CONTEXT_QUERY_INDEX = new StructT('_ACTIVATION_CONTEXT_QUERY_INDEX', {
 ulAssemblyIndex: DWORD,
 ulFileIndexInAssembly: DWORD
});

var _ASSEMBLY_FILE_DETAILED_INFORMATION = new StructT('_ASSEMBLY_FILE_DETAILED_INFORMATION', {
 ulFlags: DWORD,
 ulFilenameLength: DWORD,
 ulPathLength: DWORD,
 lpFileName: PCWSTR,
 lpFilePath: PCWSTR
});

var _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION = new StructT('_ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION', {
 ulFlags: DWORD,
 ulEncodedAssemblyIdentityLength: DWORD,
 ulManifestPathType: DWORD,
 ulManifestPathLength: DWORD,
 liManifestLastWriteTime: LARGE_INTEGER,
 ulPolicyPathType: DWORD,
 ulPolicyPathLength: DWORD,
 liPolicyLastWriteTime: LARGE_INTEGER,
 ulMetadataSatelliteRosterIndex: DWORD,
 ulManifestVersionMajor: DWORD,
 ulManifestVersionMinor: DWORD,
 ulPolicyVersionMajor: DWORD,
 ulPolicyVersionMinor: DWORD,
 ulAssemblyDirectoryNameLength: DWORD,
 lpAssemblyEncodedAssemblyIdentity: PCWSTR,
 lpAssemblyManifestPath: PCWSTR,
 lpAssemblyPolicyPath: PCWSTR,
 lpAssemblyDirectoryName: PCWSTR,
 ulFileCount: DWORD
});

var _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION = new StructT('_ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION', {
 ulFlags: DWORD,
 RunLevel: ACTCTX_REQUESTED_RUN_LEVEL,
 UiAccess: DWORD
});

var _COMPATIBILITY_CONTEXT_ELEMENT = new StructT('_COMPATIBILITY_CONTEXT_ELEMENT', {
 Id: GUID,
 Type: ACTCTX_COMPATIBILITY_ELEMENT_TYPE
});

var _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION = new StructT('_ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION', {
 ElementCount: DWORD,
 Elements: UNEXPOSED
});

var _SUPPORTED_OS_INFO = new StructT('_SUPPORTED_OS_INFO', {
 OsCount: WORD,
 MitigationExist: WORD,
 OsList: ARRAY(WORD, undefined)
});

var _ACTIVATION_CONTEXT_DETAILED_INFORMATION = new StructT('_ACTIVATION_CONTEXT_DETAILED_INFORMATION', {
 dwFlags: DWORD,
 ulFormatVersion: DWORD,
 ulAssemblyCount: DWORD,
 ulRootManifestPathType: DWORD,
 ulRootManifestPathChars: DWORD,
 ulRootConfigurationPathType: DWORD,
 ulRootConfigurationPathChars: DWORD,
 ulAppDirPathType: DWORD,
 ulAppDirPathChars: DWORD,
 lpRootManifestPath: PCWSTR,
 lpRootConfigurationPath: PCWSTR,
 lpAppDirPath: PCWSTR
});

var _HARDWARE_COUNTER_DATA = new StructT('_HARDWARE_COUNTER_DATA', {
 Type: HARDWARE_COUNTER_TYPE,
 Reserved: DWORD,
 Value: DWORD64
});

var _PERFORMANCE_DATA = new StructT('_PERFORMANCE_DATA', {
 Size: WORD,
 Version: BYTE,
 HwCountersCount: BYTE,
 ContextSwitchCount: DWORD,
 WaitReasonBitMap: DWORD64,
 CycleTime: DWORD64,
 RetryCount: DWORD,
 Reserved: DWORD,
 HwCounters: ARRAY(HARDWARE_COUNTER_DATA, MAX_HW_COUNTERS)
});

var _EVENTLOGRECORD = new StructT('_EVENTLOGRECORD', {
 Length: DWORD,
 Reserved: DWORD,
 RecordNumber: DWORD,
 TimeGenerated: DWORD,
 TimeWritten: DWORD,
 EventID: DWORD,
 EventType: WORD,
 NumStrings: WORD,
 EventCategory: WORD,
 ReservedFlags: WORD,
 ClosingRecordNumber: DWORD,
 StringOffset: DWORD,
 UserSidLength: DWORD,
 UserSidOffset: DWORD,
 DataLength: DWORD,
 DataOffset: DWORD
});

var _EVENTSFORLOGFILE = new StructT('_EVENTSFORLOGFILE', {
 ulSize: DWORD,
 szLogicalLogFile: ARRAY(WCHAR, MAXLOGICALLOGNAMESIZE),
 ulNumRecords: DWORD,
 pEventLogRecords: UNEXPOSED
});

var _PACKEDEVENTINFO = new StructT('_PACKEDEVENTINFO', {
 ulSize: DWORD,
 ulNumEventsForLogFile: DWORD,
 ulOffsets: UNEXPOSED
});

var _TAPE_ERASE = new StructT('_TAPE_ERASE', {
 Type: DWORD,
 Immediate: BOOLEAN
});

var _TAPE_PREPARE = new StructT('_TAPE_PREPARE', {
 Operation: DWORD,
 Immediate: BOOLEAN
});

var _TAPE_WRITE_MARKS = new StructT('_TAPE_WRITE_MARKS', {
 Type: DWORD,
 Count: DWORD,
 Immediate: BOOLEAN
});

var _TAPE_GET_POSITION = new StructT('_TAPE_GET_POSITION', {
 Type: DWORD,
 Partition: DWORD,
 Offset: LARGE_INTEGER
});

var _TAPE_SET_POSITION = new StructT('_TAPE_SET_POSITION', {
 Method: DWORD,
 Partition: DWORD,
 Offset: LARGE_INTEGER,
 Immediate: BOOLEAN
});

var _TAPE_GET_DRIVE_PARAMETERS = new StructT('_TAPE_GET_DRIVE_PARAMETERS', {
 ECC: BOOLEAN,
 Compression: BOOLEAN,
 DataPadding: BOOLEAN,
 ReportSetmarks: BOOLEAN,
 DefaultBlockSize: DWORD,
 MaximumBlockSize: DWORD,
 MinimumBlockSize: DWORD,
 MaximumPartitionCount: DWORD,
 FeaturesLow: DWORD,
 FeaturesHigh: DWORD,
 EOTWarningZoneSize: DWORD
});

var _TAPE_SET_DRIVE_PARAMETERS = new StructT('_TAPE_SET_DRIVE_PARAMETERS', {
 ECC: BOOLEAN,
 Compression: BOOLEAN,
 DataPadding: BOOLEAN,
 ReportSetmarks: BOOLEAN,
 EOTWarningZoneSize: DWORD
});

var _TAPE_GET_MEDIA_PARAMETERS = new StructT('_TAPE_GET_MEDIA_PARAMETERS', {
 Capacity: LARGE_INTEGER,
 Remaining: LARGE_INTEGER,
 BlockSize: DWORD,
 PartitionCount: DWORD,
 WriteProtected: BOOLEAN
});

var _TAPE_SET_MEDIA_PARAMETERS = new StructT('_TAPE_SET_MEDIA_PARAMETERS', {
 BlockSize: DWORD
});

var _TAPE_CREATE_PARTITION = new StructT('_TAPE_CREATE_PARTITION', {
 Method: DWORD,
 Count: DWORD,
 Size: DWORD
});

var _TAPE_WMI_OPERATIONS = new StructT('_TAPE_WMI_OPERATIONS', {
 Method: DWORD,
 DataBufferSize: DWORD,
 DataBuffer: PVOID
});

var _TRANSACTION_NOTIFICATION = new StructT('_TRANSACTION_NOTIFICATION', {
 TransactionKey: PVOID,
 TransactionNotification: ULONG,
 TmVirtualClock: LARGE_INTEGER,
 ArgumentLength: ULONG
});

var _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT = new StructT('_TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT', {
 EnlistmentId: GUID,
 UOW: UOW
});

var _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT = new StructT('_TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT', {
 TmIdentity: GUID,
 Flags: ULONG
});

var _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT = new StructT('_TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT', {
 SavepointId: SAVEPOINT_ID
});

var TRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT = new StructT('TRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT', {
 PropagationCookie: ULONG,
 UOW: GUID,
 TmIdentity: GUID,
 BufferLength: ULONG
});

var _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT = new StructT('_TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT', {
 MarshalCookie: ULONG,
 UOW: GUID
});

var _KCRM_MARSHAL_HEADER = new StructT('_KCRM_MARSHAL_HEADER', {
 VersionMajor: ULONG,
 VersionMinor: ULONG,
 NumProtocols: ULONG,
 Unused: ULONG
});

var _KCRM_TRANSACTION_BLOB = new StructT('_KCRM_TRANSACTION_BLOB', {
 UOW: UOW,
 TmIdentity: GUID,
 IsolationLevel: ULONG,
 IsolationFlags: ULONG,
 Timeout: ULONG,
 Description: ARRAY(WCHAR, MAX_TRANSACTION_DESCRIPTION_LENGTH)
});

var _KCRM_PROTOCOL_BLOB = new StructT('_KCRM_PROTOCOL_BLOB', {
 ProtocolId: CRM_PROTOCOL_ID,
 StaticInfoLength: ULONG,
 TransactionIdInfoLength: ULONG,
 Unused1: ULONG,
 Unused2: ULONG
});

var _TRANSACTION_BASIC_INFORMATION = new StructT('_TRANSACTION_BASIC_INFORMATION', {
 TransactionId: GUID,
 State: DWORD,
 Outcome: DWORD
});

var _TRANSACTIONMANAGER_BASIC_INFORMATION = new StructT('_TRANSACTIONMANAGER_BASIC_INFORMATION', {
 TmIdentity: GUID,
 VirtualClock: LARGE_INTEGER
});

var _TRANSACTIONMANAGER_LOG_INFORMATION = new StructT('_TRANSACTIONMANAGER_LOG_INFORMATION', {
 LogIdentity: GUID
});

var _TRANSACTIONMANAGER_LOGPATH_INFORMATION = new StructT('_TRANSACTIONMANAGER_LOGPATH_INFORMATION', {
 LogPathLength: DWORD,
 LogPath: ARRAY(WCHAR, 1)
});

var _TRANSACTIONMANAGER_RECOVERY_INFORMATION = new StructT('_TRANSACTIONMANAGER_RECOVERY_INFORMATION', {
 LastRecoveredLsn: ULONGLONG
});

var _TRANSACTIONMANAGER_OLDEST_INFORMATION = new StructT('_TRANSACTIONMANAGER_OLDEST_INFORMATION', {
 OldestTransactionGuid: GUID
});

var _TRANSACTION_PROPERTIES_INFORMATION = new StructT('_TRANSACTION_PROPERTIES_INFORMATION', {
 IsolationLevel: DWORD,
 IsolationFlags: DWORD,
 Timeout: LARGE_INTEGER,
 Outcome: DWORD,
 DescriptionLength: DWORD,
 Description: ARRAY(WCHAR, 1)
});

var _TRANSACTION_BIND_INFORMATION = new StructT('_TRANSACTION_BIND_INFORMATION', {
 TmHandle: HANDLE
});

var _TRANSACTION_ENLISTMENT_PAIR = new StructT('_TRANSACTION_ENLISTMENT_PAIR', {
 EnlistmentId: GUID,
 ResourceManagerId: GUID
});

var _TRANSACTION_ENLISTMENTS_INFORMATION = new StructT('_TRANSACTION_ENLISTMENTS_INFORMATION', {
 NumberOfEnlistments: DWORD,
 EnlistmentPair: ARRAY(TRANSACTION_ENLISTMENT_PAIR, 1)
});

var _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION = new StructT('_TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION', {
 SuperiorEnlistmentPair: TRANSACTION_ENLISTMENT_PAIR
});

var _RESOURCEMANAGER_BASIC_INFORMATION = new StructT('_RESOURCEMANAGER_BASIC_INFORMATION', {
 ResourceManagerId: GUID,
 DescriptionLength: DWORD,
 Description: ARRAY(WCHAR, 1)
});

var _RESOURCEMANAGER_COMPLETION_INFORMATION = new StructT('_RESOURCEMANAGER_COMPLETION_INFORMATION', {
 IoCompletionPortHandle: HANDLE,
 CompletionKey: ULONG_PTR
});

var _ENLISTMENT_BASIC_INFORMATION = new StructT('_ENLISTMENT_BASIC_INFORMATION', {
 EnlistmentId: GUID,
 TransactionId: GUID,
 ResourceManagerId: GUID
});

var _ENLISTMENT_CRM_INFORMATION = new StructT('_ENLISTMENT_CRM_INFORMATION', {
 CrmTransactionManagerId: GUID,
 CrmResourceManagerId: GUID,
 CrmEnlistmentId: GUID
});

var _TRANSACTION_LIST_ENTRY = new StructT('_TRANSACTION_LIST_ENTRY', {
 UOW: UOW
});

var _TRANSACTION_LIST_INFORMATION = new StructT('_TRANSACTION_LIST_INFORMATION', {
 NumberOfTransactions: DWORD,
 TransactionInformation: ARRAY(TRANSACTION_LIST_ENTRY, 1)
});

var _KTMOBJECT_CURSOR = new StructT('_KTMOBJECT_CURSOR', {
 LastQuery: GUID,
 ObjectIdCount: DWORD,
 ObjectIds: ARRAY(GUID, 1)
});



var _TP_POOL_STACK_INFORMATION = new StructT('_TP_POOL_STACK_INFORMATION', {
 StackReserve: SIZE_T,
 StackCommit: SIZE_T
});


var TP_CALLBACK_ENVIRON = new StructT('TP_CALLBACK_ENVIRON', {
 Version: TP_VERSION,
 Pool: PTP_POOL,
 CleanupGroup: PTP_CLEANUP_GROUP,
 CleanupGroupCancelCallback: PTP_CLEANUP_GROUP_CANCEL_CALLBACK,
 RaceDll: PVOID,
 ActivationContext: _ACTIVATION_CONTEXT.Δ,
 FinalizationCallback: PTP_SIMPLE_CALLBACK,
 u: c:winnt.h@495534@S@_TP_CALLBACK_ENVIRON_V3@Ua,
 CallbackPriority: TP_CALLBACK_PRIORITY,
 Size: DWORD
});


var undefined = new StructT('undefined', {
 LongFunction: DWORD,
 Persistent: DWORD,
 Private: DWORD
});





var HWND__ = new StructT('HWND__', {
 unused: int
});

var HHOOK__ = new StructT('HHOOK__', {
 unused: int
});

var HKEY__ = new StructT('HKEY__', {
 unused: int
});

var HACCEL__ = new StructT('HACCEL__', {
 unused: int
});

var HBITMAP__ = new StructT('HBITMAP__', {
 unused: int
});

var HBRUSH__ = new StructT('HBRUSH__', {
 unused: int
});

var HCOLORSPACE__ = new StructT('HCOLORSPACE__', {
 unused: int
});

var HDC__ = new StructT('HDC__', {
 unused: int
});

var HGLRC__ = new StructT('HGLRC__', {
 unused: int
});

var HDESK__ = new StructT('HDESK__', {
 unused: int
});

var HENHMETAFILE__ = new StructT('HENHMETAFILE__', {
 unused: int
});

var HFONT__ = new StructT('HFONT__', {
 unused: int
});

var HICON__ = new StructT('HICON__', {
 unused: int
});

var HMENU__ = new StructT('HMENU__', {
 unused: int
});

var HMETAFILE__ = new StructT('HMETAFILE__', {
 unused: int
});

var HINSTANCE__ = new StructT('HINSTANCE__', {
 unused: int
});

var HPALETTE__ = new StructT('HPALETTE__', {
 unused: int
});

var HPEN__ = new StructT('HPEN__', {
 unused: int
});

var HRGN__ = new StructT('HRGN__', {
 unused: int
});

var HRSRC__ = new StructT('HRSRC__', {
 unused: int
});

var HSPRITE__ = new StructT('HSPRITE__', {
 unused: int
});

var HLSURF__ = new StructT('HLSURF__', {
 unused: int
});

var HSTR__ = new StructT('HSTR__', {
 unused: int
});

var HTASK__ = new StructT('HTASK__', {
 unused: int
});

var HWINSTA__ = new StructT('HWINSTA__', {
 unused: int
});

var HKL__ = new StructT('HKL__', {
 unused: int
});

var HWINEVENTHOOK__ = new StructT('HWINEVENTHOOK__', {
 unused: int
});

var HMONITOR__ = new StructT('HMONITOR__', {
 unused: int
});

var HUMPD__ = new StructT('HUMPD__', {
 unused: int
});

var BORDERWIDTHS = new StructT('BORDERWIDTHS', {
 left: LONG,
 top: LONG,
 right: LONG,
 bottom: LONG
});

var _RECTL = new StructT('_RECTL', {
 left: LONG,
 top: LONG,
 right: LONG,
 bottom: LONG
});

var tagPOINT = new StructT('tagPOINT', {
 x: LONG,
 y: LONG
});

var _POINTL = new StructT('_POINTL', {
 x: LONG,
 y: LONG
});

var SIZEL = new StructT('SIZEL', {
 cx: LONG,
 cy: LONG
});

var tagPOINTS = new StructT('tagPOINTS', {
 x: SHORT,
 y: SHORT
});

var _FILETIME = new StructT('_FILETIME', {
 dwLowDateTime: DWORD,
 dwHighDateTime: DWORD
});

var _OVERLAPPED = new StructT('_OVERLAPPED', {
 Internal: ULONG_PTR,
 InternalHigh: ULONG_PTR,
 hEvent: HANDLE
});

var undefined = new StructT('undefined', {
 Offset: DWORD,
 OffsetHigh: DWORD
});

var _OVERLAPPED_ENTRY = new StructT('_OVERLAPPED_ENTRY', {
 lpCompletionKey: ULONG_PTR,
 lpOverlapped: LPOVERLAPPED,
 Internal: ULONG_PTR,
 dwNumberOfBytesTransferred: DWORD
});

var _SECURITY_ATTRIBUTES = new StructT('_SECURITY_ATTRIBUTES', {
 nLength: DWORD,
 lpSecurityDescriptor: LPVOID,
 bInheritHandle: BOOL
});

var _PROCESS_INFORMATION = new StructT('_PROCESS_INFORMATION', {
 hProcess: HANDLE,
 hThread: HANDLE,
 dwProcessId: DWORD,
 dwThreadId: DWORD
});

var _SYSTEMTIME = new StructT('_SYSTEMTIME', {
 wYear: WORD,
 wMonth: WORD,
 wDayOfWeek: WORD,
 wDay: WORD,
 wHour: WORD,
 wMinute: WORD,
 wSecond: WORD,
 wMilliseconds: WORD
});

var _COMMPROP = new StructT('_COMMPROP', {
 wPacketLength: WORD,
 wPacketVersion: WORD,
 dwServiceMask: DWORD,
 dwReserved1: DWORD,
 dwMaxTxQueue: DWORD,
 dwMaxRxQueue: DWORD,
 dwMaxBaud: DWORD,
 dwProvSubType: DWORD,
 dwProvCapabilities: DWORD,
 dwSettableParams: DWORD,
 dwSettableBaud: DWORD,
 wSettableData: WORD,
 wSettableStopParity: WORD,
 dwCurrentTxQueue: DWORD,
 dwCurrentRxQueue: DWORD,
 dwProvSpec1: DWORD,
 dwProvSpec2: DWORD,
 wcProvChar: ARRAY(WCHAR, 1)
});

var _COMSTAT = new StructT('_COMSTAT', {
 fCtsHold: DWORD,
 fDsrHold: DWORD,
 fRlsdHold: DWORD,
 fXoffHold: DWORD,
 fXoffSent: DWORD,
 fEof: DWORD,
 fTxim: DWORD,
 fReserved: DWORD,
 cbInQue: DWORD,
 cbOutQue: DWORD
});

var _DCB = new StructT('_DCB', {
 DCBlength: DWORD,
 BaudRate: DWORD,
 fBinary: DWORD,
 fParity: DWORD,
 fOutxCtsFlow: DWORD,
 fOutxDsrFlow: DWORD,
 fDtrControl: DWORD,
 fDsrSensitivity: DWORD,
 fTXContinueOnXoff: DWORD,
 fOutX: DWORD,
 fInX: DWORD,
 fErrorChar: DWORD,
 fNull: DWORD,
 fRtsControl: DWORD,
 fAbortOnError: DWORD,
 fDummy2: DWORD,
 wReserved: WORD,
 XonLim: WORD,
 XoffLim: WORD,
 ByteSize: BYTE,
 Parity: BYTE,
 StopBits: BYTE,
 XonChar: int8,
 XoffChar: int8,
 ErrorChar: int8,
 EofChar: int8,
 EvtChar: int8,
 wReserved1: WORD
});

var _COMMTIMEOUTS = new StructT('_COMMTIMEOUTS', {
 ReadIntervalTimeout: DWORD,
 ReadTotalTimeoutMultiplier: DWORD,
 ReadTotalTimeoutConstant: DWORD,
 WriteTotalTimeoutMultiplier: DWORD,
 WriteTotalTimeoutConstant: DWORD
});

var _COMMCONFIG = new StructT('_COMMCONFIG', {
 dwSize: DWORD,
 wVersion: WORD,
 wReserved: WORD,
 dcb: DCB,
 dwProviderSubType: DWORD,
 dwProviderOffset: DWORD,
 dwProviderSize: DWORD,
 wcProviderData: ARRAY(WCHAR, 1)
});

var _SYSTEM_INFO = new StructT('_SYSTEM_INFO', {
 dwPageSize: DWORD,
 lpMinimumApplicationAddress: LPVOID,
 lpMaximumApplicationAddress: LPVOID,
 dwActiveProcessorMask: DWORD_PTR,
 dwNumberOfProcessors: DWORD,
 dwProcessorType: DWORD,
 dwAllocationGranularity: DWORD,
 wProcessorLevel: WORD,
 wProcessorRevision: WORD
});

var undefined = new StructT('undefined', {
 wProcessorArchitecture: WORD,
 wReserved: WORD
});

var _MEMORYSTATUS = new StructT('_MEMORYSTATUS', {
 dwLength: DWORD,
 dwMemoryLoad: DWORD,
 dwTotalPhys: SIZE_T,
 dwAvailPhys: SIZE_T,
 dwTotalPageFile: SIZE_T,
 dwAvailPageFile: SIZE_T,
 dwTotalVirtual: SIZE_T,
 dwAvailVirtual: SIZE_T
});

var _EXCEPTION_DEBUG_INFO = new StructT('_EXCEPTION_DEBUG_INFO', {
 ExceptionRecord: EXCEPTION_RECORD,
 dwFirstChance: DWORD
});

var _CREATE_THREAD_DEBUG_INFO = new StructT('_CREATE_THREAD_DEBUG_INFO', {
 hThread: HANDLE,
 lpThreadLocalBase: LPVOID,
 lpStartAddress: LPTHREAD_START_ROUTINE
});

var _CREATE_PROCESS_DEBUG_INFO = new StructT('_CREATE_PROCESS_DEBUG_INFO', {
 hFile: HANDLE,
 hProcess: HANDLE,
 hThread: HANDLE,
 lpBaseOfImage: LPVOID,
 dwDebugInfoFileOffset: DWORD,
 nDebugInfoSize: DWORD,
 lpThreadLocalBase: LPVOID,
 lpStartAddress: LPTHREAD_START_ROUTINE,
 lpImageName: LPVOID,
 fUnicode: WORD
});

var _EXIT_THREAD_DEBUG_INFO = new StructT('_EXIT_THREAD_DEBUG_INFO', {
 dwExitCode: DWORD
});

var _EXIT_PROCESS_DEBUG_INFO = new StructT('_EXIT_PROCESS_DEBUG_INFO', {
 dwExitCode: DWORD
});

var _LOAD_DLL_DEBUG_INFO = new StructT('_LOAD_DLL_DEBUG_INFO', {
 hFile: HANDLE,
 lpBaseOfDll: LPVOID,
 dwDebugInfoFileOffset: DWORD,
 nDebugInfoSize: DWORD,
 lpImageName: LPVOID,
 fUnicode: WORD
});

var _UNLOAD_DLL_DEBUG_INFO = new StructT('_UNLOAD_DLL_DEBUG_INFO', {
 lpBaseOfDll: LPVOID
});

var _OUTPUT_DEBUG_STRING_INFO = new StructT('_OUTPUT_DEBUG_STRING_INFO', {
 lpDebugStringData: LPSTR,
 fUnicode: WORD,
 nDebugStringLength: WORD
});

var _RIP_INFO = new StructT('_RIP_INFO', {
 dwError: DWORD,
 dwType: DWORD
});

var _DEBUG_EVENT = new StructT('_DEBUG_EVENT', {
 dwDebugEventCode: DWORD,
 dwProcessId: DWORD,
 dwThreadId: DWORD,
 u: c:winbase.h@29353@S@_DEBUG_EVENT@Ua
});

var JIT_DEBUG_INFO64 = new StructT('JIT_DEBUG_INFO64', {
 dwSize: DWORD,
 dwProcessorArchitecture: DWORD,
 dwThreadID: DWORD,
 dwReserved0: DWORD,
 lpExceptionAddress: ULONG64,
 lpExceptionRecord: ULONG64,
 lpContextRecord: ULONG64
});

var _OFSTRUCT = new StructT('_OFSTRUCT', {
 cBytes: BYTE,
 fFixedDisk: BYTE,
 nErrCode: WORD,
 Reserved1: WORD,
 Reserved2: WORD,
 szPathName: ARRAY(CHAR, OFS_MAXPATHNAME)
});

var _MEMORYSTATUSEX = new StructT('_MEMORYSTATUSEX', {
 dwLength: DWORD,
 dwMemoryLoad: DWORD,
 ullTotalPhys: DWORDLONG,
 ullAvailPhys: DWORDLONG,
 ullTotalPageFile: DWORDLONG,
 ullAvailPageFile: DWORDLONG,
 ullTotalVirtual: DWORDLONG,
 ullAvailVirtual: DWORDLONG,
 ullAvailExtendedVirtual: DWORDLONG
});

var _PROCESS_HEAP_ENTRY = new StructT('_PROCESS_HEAP_ENTRY', {
 lpData: PVOID,
 cbData: DWORD,
 cbOverhead: BYTE,
 iRegionIndex: BYTE,
 wFlags: WORD
});

var undefined = new StructT('undefined', {
 hMem: HANDLE,
 dwReserved: ARRAY(DWORD,  3 )
});

var undefined = new StructT('undefined', {
 dwCommittedSize: DWORD,
 dwUnCommittedSize: DWORD,
 lpFirstBlock: LPVOID,
 lpLastBlock: LPVOID
});

var _UMS_SCHEDULER_STARTUP_INFO = new StructT('_UMS_SCHEDULER_STARTUP_INFO', {
 UmsVersion: ULONG,
 CompletionList: PUMS_COMPLETION_LIST,
 SchedulerProc: PUMS_SCHEDULER_ENTRY_POINT,
 SchedulerParam: PVOID
});


var POWER_REQUEST_CONTEXT = new StructT('POWER_REQUEST_CONTEXT', {
 Version: ULONG,
 Flags: DWORD,
 Reason: c:winbase.h@97709@S@_REASON_CONTEXT@Ua
});

var undefined = new StructT('undefined', {
 LocalizedReasonModule: HMODULE,
 LocalizedReasonId: ULONG,
 ReasonStringCount: ULONG,
 ReasonStrings: ushort.Δ.Δ
});

var _BY_HANDLE_FILE_INFORMATION = new StructT('_BY_HANDLE_FILE_INFORMATION', {
 dwFileAttributes: DWORD,
 ftCreationTime: FILETIME,
 ftLastAccessTime: FILETIME,
 ftLastWriteTime: FILETIME,
 dwVolumeSerialNumber: DWORD,
 nFileSizeHigh: DWORD,
 nFileSizeLow: DWORD,
 nNumberOfLinks: DWORD,
 nFileIndexHigh: DWORD,
 nFileIndexLow: DWORD
});

var _TIME_ZONE_INFORMATION = new StructT('_TIME_ZONE_INFORMATION', {
 Bias: LONG,
 StandardName: ARRAY(WCHAR,  32 ),
 StandardDate: SYSTEMTIME,
 StandardBias: LONG,
 DaylightName: ARRAY(WCHAR,  32 ),
 DaylightDate: SYSTEMTIME,
 DaylightBias: LONG
});

var _TIME_DYNAMIC_ZONE_INFORMATION = new StructT('_TIME_DYNAMIC_ZONE_INFORMATION', {
 Bias: LONG,
 StandardName: ARRAY(WCHAR,  32 ),
 StandardDate: SYSTEMTIME,
 StandardBias: LONG,
 DaylightName: ARRAY(WCHAR,  32 ),
 DaylightDate: SYSTEMTIME,
 DaylightBias: LONG,
 TimeZoneKeyName: ARRAY(WCHAR,  128 ),
 DynamicDaylightTimeDisabled: BOOLEAN
});

var _WIN32_STREAM_ID = new StructT('_WIN32_STREAM_ID', {
 dwStreamId: DWORD,
 dwStreamAttributes: DWORD,
 Size: LARGE_INTEGER,
 dwStreamNameSize: DWORD,
 cStreamName: ARRAY(WCHAR,  ANYSIZE_ARRAY )
});

var STARTUPINFO = new StructT('STARTUPINFO', {
 cb: DWORD,
 lpReserved: LPSTR,
 lpDesktop: LPSTR,
 lpTitle: LPSTR,
 dwX: DWORD,
 dwY: DWORD,
 dwXSize: DWORD,
 dwYSize: DWORD,
 dwXCountChars: DWORD,
 dwYCountChars: DWORD,
 dwFillAttribute: DWORD,
 dwFlags: DWORD,
 wShowWindow: WORD,
 cbReserved2: WORD,
 lpReserved2: LPBYTE,
 hStdInput: HANDLE,
 hStdOutput: HANDLE,
 hStdError: HANDLE
});

var _STARTUPINFOW = new StructT('_STARTUPINFOW', {
 cb: DWORD,
 lpReserved: LPWSTR,
 lpDesktop: LPWSTR,
 lpTitle: LPWSTR,
 dwX: DWORD,
 dwY: DWORD,
 dwXSize: DWORD,
 dwYSize: DWORD,
 dwXCountChars: DWORD,
 dwYCountChars: DWORD,
 dwFillAttribute: DWORD,
 dwFlags: DWORD,
 wShowWindow: WORD,
 cbReserved2: WORD,
 lpReserved2: LPBYTE,
 hStdInput: HANDLE,
 hStdOutput: HANDLE,
 hStdError: HANDLE
});

var STARTUPINFOEX = new StructT('STARTUPINFOEX', {
 StartupInfo: STARTUPINFOA,
 lpAttributeList: LPPROC_THREAD_ATTRIBUTE_LIST
});

var _STARTUPINFOEXW = new StructT('_STARTUPINFOEXW', {
 StartupInfo: STARTUPINFOW,
 lpAttributeList: LPPROC_THREAD_ATTRIBUTE_LIST
});

var WIN32_FIND_DATA = new StructT('WIN32_FIND_DATA', {
 dwFileAttributes: DWORD,
 ftCreationTime: FILETIME,
 ftLastAccessTime: FILETIME,
 ftLastWriteTime: FILETIME,
 nFileSizeHigh: DWORD,
 nFileSizeLow: DWORD,
 dwReserved0: DWORD,
 dwReserved1: DWORD,
 cFileName: ARRAY(CHAR,  MAX_PATH ),
 cAlternateFileName: ARRAY(CHAR,  14 )
});

var _WIN32_FIND_DATAW = new StructT('_WIN32_FIND_DATAW', {
 dwFileAttributes: DWORD,
 ftCreationTime: FILETIME,
 ftLastAccessTime: FILETIME,
 ftLastWriteTime: FILETIME,
 nFileSizeHigh: DWORD,
 nFileSizeLow: DWORD,
 dwReserved0: DWORD,
 dwReserved1: DWORD,
 cFileName: ARRAY(WCHAR,  MAX_PATH ),
 cAlternateFileName: ARRAY(WCHAR,  14 )
});

var _WIN32_FILE_ATTRIBUTE_DATA = new StructT('_WIN32_FILE_ATTRIBUTE_DATA', {
 dwFileAttributes: DWORD,
 ftCreationTime: FILETIME,
 ftLastAccessTime: FILETIME,
 ftLastWriteTime: FILETIME,
 nFileSizeHigh: DWORD,
 nFileSizeLow: DWORD
});

var _WIN32_FIND_STREAM_DATA = new StructT('_WIN32_FIND_STREAM_DATA', {
 StreamSize: LARGE_INTEGER,
 cStreamName: ARRAY(WCHAR, undefined)
});

var _EVENTLOG_FULL_INFORMATION = new StructT('_EVENTLOG_FULL_INFORMATION', {
 dwFull: DWORD
});

var HW_PROFILE_INFO = new StructT('HW_PROFILE_INFO', {
 dwDockInfo: DWORD,
 szHwProfileGuid: ARRAY(CHAR, HW_PROFILE_GUIDLEN),
 szHwProfileName: ARRAY(CHAR, MAX_PROFILE_LEN)
});

var tagHW_PROFILE_INFOW = new StructT('tagHW_PROFILE_INFOW', {
 dwDockInfo: DWORD,
 szHwProfileGuid: ARRAY(WCHAR, HW_PROFILE_GUIDLEN),
 szHwProfileName: ARRAY(WCHAR, MAX_PROFILE_LEN)
});

var _SYSTEM_POWER_STATUS = new StructT('_SYSTEM_POWER_STATUS', {
 ACLineStatus: BYTE,
 BatteryFlag: BYTE,
 BatteryLifePercent: BYTE,
 Reserved1: BYTE,
 BatteryLifeTime: DWORD,
 BatteryFullLifeTime: DWORD
});

var ACTCTX = new StructT('ACTCTX', {
 cbSize: ULONG,
 dwFlags: DWORD,
 lpSource: LPCSTR,
 wProcessorArchitecture: USHORT,
 wLangId: LANGID,
 lpAssemblyDirectory: LPCSTR,
 lpResourceName: LPCSTR,
 lpApplicationName: LPCSTR,
 hModule: HMODULE
});

var tagACTCTXW = new StructT('tagACTCTXW', {
 cbSize: ULONG,
 dwFlags: DWORD,
 lpSource: LPCWSTR,
 wProcessorArchitecture: USHORT,
 wLangId: LANGID,
 lpAssemblyDirectory: LPCWSTR,
 lpResourceName: LPCWSTR,
 lpApplicationName: LPCWSTR,
 hModule: HMODULE
});

var tagACTCTX_SECTION_KEYED_DATA_2600 = new StructT('tagACTCTX_SECTION_KEYED_DATA_2600', {
 cbSize: ULONG,
 ulDataFormatVersion: ULONG,
 lpData: PVOID,
 ulLength: ULONG,
 lpSectionGlobalData: PVOID,
 ulSectionGlobalDataLength: ULONG,
 lpSectionBase: PVOID,
 ulSectionTotalLength: ULONG,
 hActCtx: HANDLE,
 ulAssemblyRosterIndex: ULONG
});

var tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA = new StructT('tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA', {
 lpInformation: PVOID,
 lpSectionBase: PVOID,
 ulSectionLength: ULONG,
 lpSectionGlobalDataBase: PVOID,
 ulSectionGlobalDataLength: ULONG
});

var tagACTCTX_SECTION_KEYED_DATA = new StructT('tagACTCTX_SECTION_KEYED_DATA', {
 cbSize: ULONG,
 ulDataFormatVersion: ULONG,
 lpData: PVOID,
 ulLength: ULONG,
 lpSectionGlobalData: PVOID,
 ulSectionGlobalDataLength: ULONG,
 lpSectionBase: PVOID,
 ulSectionTotalLength: ULONG,
 hActCtx: HANDLE,
 ulAssemblyRosterIndex: ULONG,
 ulFlags: ULONG,
 AssemblyMetadata: ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA
});

var _ACTIVATION_CONTEXT_BASIC_INFORMATION = new StructT('_ACTIVATION_CONTEXT_BASIC_INFORMATION', {
 hActCtx: HANDLE,
 dwFlags: DWORD
});

var _FILE_BASIC_INFO = new StructT('_FILE_BASIC_INFO', {
 CreationTime: LARGE_INTEGER,
 LastAccessTime: LARGE_INTEGER,
 LastWriteTime: LARGE_INTEGER,
 ChangeTime: LARGE_INTEGER,
 FileAttributes: DWORD
});

var _FILE_STANDARD_INFO = new StructT('_FILE_STANDARD_INFO', {
 AllocationSize: LARGE_INTEGER,
 EndOfFile: LARGE_INTEGER,
 NumberOfLinks: DWORD,
 DeletePending: BOOLEAN,
 Directory: BOOLEAN
});

var _FILE_NAME_INFO = new StructT('_FILE_NAME_INFO', {
 FileNameLength: DWORD,
 FileName: ARRAY(WCHAR, 1)
});

var _FILE_RENAME_INFO = new StructT('_FILE_RENAME_INFO', {
 ReplaceIfExists: BOOLEAN,
 RootDirectory: HANDLE,
 FileNameLength: DWORD,
 FileName: ARRAY(WCHAR, 1)
});

var _FILE_ALLOCATION_INFO = new StructT('_FILE_ALLOCATION_INFO', {
 AllocationSize: LARGE_INTEGER
});

var _FILE_END_OF_FILE_INFO = new StructT('_FILE_END_OF_FILE_INFO', {
 EndOfFile: LARGE_INTEGER
});

var _FILE_STREAM_INFO = new StructT('_FILE_STREAM_INFO', {
 NextEntryOffset: DWORD,
 StreamNameLength: DWORD,
 StreamSize: LARGE_INTEGER,
 StreamAllocationSize: LARGE_INTEGER,
 StreamName: ARRAY(WCHAR, 1)
});

var _FILE_COMPRESSION_INFO = new StructT('_FILE_COMPRESSION_INFO', {
 CompressedFileSize: LARGE_INTEGER,
 CompressionFormat: WORD,
 CompressionUnitShift: UCHAR,
 ChunkShift: UCHAR,
 ClusterShift: UCHAR,
 Reserved: ARRAY(UCHAR, 3)
});

var _FILE_ATTRIBUTE_TAG_INFO = new StructT('_FILE_ATTRIBUTE_TAG_INFO', {
 FileAttributes: DWORD,
 ReparseTag: DWORD
});

var _FILE_DISPOSITION_INFO = new StructT('_FILE_DISPOSITION_INFO', {
 DeleteFileA: BOOLEAN
});

var _FILE_ID_BOTH_DIR_INFO = new StructT('_FILE_ID_BOTH_DIR_INFO', {
 NextEntryOffset: DWORD,
 FileIndex: DWORD,
 CreationTime: LARGE_INTEGER,
 LastAccessTime: LARGE_INTEGER,
 LastWriteTime: LARGE_INTEGER,
 ChangeTime: LARGE_INTEGER,
 EndOfFile: LARGE_INTEGER,
 AllocationSize: LARGE_INTEGER,
 FileAttributes: DWORD,
 FileNameLength: DWORD,
 EaSize: DWORD,
 ShortNameLength: CCHAR,
 ShortName: ARRAY(WCHAR, 12),
 FileId: LARGE_INTEGER,
 FileName: ARRAY(WCHAR, 1)
});

var _FILE_IO_PRIORITY_HINT_INFO = new StructT('_FILE_IO_PRIORITY_HINT_INFO', {
 PriorityHint: PRIORITY_HINT
});

var _FILE_REMOTE_PROTOCOL_INFO = new StructT('_FILE_REMOTE_PROTOCOL_INFO', {
 StructureVersion: USHORT,
 StructureSize: USHORT,
 Protocol: DWORD,
 ProtocolMajorVersion: USHORT,
 ProtocolMinorVersion: USHORT,
 ProtocolRevision: USHORT,
 Reserved: USHORT,
 Flags: DWORD,
 GenericReserved: ,
 ProtocolSpecificReserved: 
});

var undefined = new StructT('undefined', {
 Reserved: ARRAY(DWORD, 8)
});

var undefined = new StructT('undefined', {
 Reserved: ARRAY(DWORD, 16)
});

var FILE_ID_DESCRIPTOR = new StructT('FILE_ID_DESCRIPTOR', {
 dwSize: DWORD,
 Type: FILE_ID_TYPE
});

var _DRAWPATRECT = new StructT('_DRAWPATRECT', {
 ptPosition: POINT,
 ptSize: POINT,
 wStyle: WORD,
 wPattern: WORD
});

var _PSINJECTDATA = new StructT('_PSINJECTDATA', {
 DataBytes: DWORD,
 InjectionPoint: WORD,
 PageNumber: WORD
});

var _PSFEATURE_OUTPUT = new StructT('_PSFEATURE_OUTPUT', {
 bPageIndependent: BOOL,
 bSetPageDevice: BOOL
});

var _PSFEATURE_CUSTPAPER = new StructT('_PSFEATURE_CUSTPAPER', {
 lOrientation: LONG,
 lWidth: LONG,
 lHeight: LONG,
 lWidthOffset: LONG,
 lHeightOffset: LONG
});

var tagXFORM = new StructT('tagXFORM', {
 eM11: FLOAT,
 eM12: FLOAT,
 eM21: FLOAT,
 eM22: FLOAT,
 eDx: FLOAT,
 eDy: FLOAT
});

var tagBITMAP = new StructT('tagBITMAP', {
 bmType: LONG,
 bmWidth: LONG,
 bmHeight: LONG,
 bmWidthBytes: LONG,
 bmPlanes: WORD,
 bmBitsPixel: WORD,
 bmBits: LPVOID
});

var tagRGBTRIPLE = new StructT('tagRGBTRIPLE', {
 rgbtBlue: BYTE,
 rgbtGreen: BYTE,
 rgbtRed: BYTE
});

var tagRGBQUAD = new StructT('tagRGBQUAD', {
 rgbBlue: BYTE,
 rgbGreen: BYTE,
 rgbRed: BYTE,
 rgbReserved: BYTE
});

var tagCIEXYZ = new StructT('tagCIEXYZ', {
 ciexyzX: FXPT2DOT30,
 ciexyzY: FXPT2DOT30,
 ciexyzZ: FXPT2DOT30
});

var tagICEXYZTRIPLE = new StructT('tagICEXYZTRIPLE', {
 ciexyzRed: CIEXYZ,
 ciexyzGreen: CIEXYZ,
 ciexyzBlue: CIEXYZ
});

var LOGCOLORSPACE = new StructT('LOGCOLORSPACE', {
 lcsSignature: DWORD,
 lcsVersion: DWORD,
 lcsSize: DWORD,
 lcsCSType: LCSCSTYPE,
 lcsIntent: LCSGAMUTMATCH,
 lcsEndpoints: CIEXYZTRIPLE,
 lcsGammaRed: DWORD,
 lcsGammaGreen: DWORD,
 lcsGammaBlue: DWORD,
 lcsFilename: ARRAY(CHAR, MAX_PATH)
});

var tagLOGCOLORSPACEW = new StructT('tagLOGCOLORSPACEW', {
 lcsSignature: DWORD,
 lcsVersion: DWORD,
 lcsSize: DWORD,
 lcsCSType: LCSCSTYPE,
 lcsIntent: LCSGAMUTMATCH,
 lcsEndpoints: CIEXYZTRIPLE,
 lcsGammaRed: DWORD,
 lcsGammaGreen: DWORD,
 lcsGammaBlue: DWORD,
 lcsFilename: ARRAY(WCHAR, MAX_PATH)
});

var tagBITMAPCOREHEADER = new StructT('tagBITMAPCOREHEADER', {
 bcSize: DWORD,
 bcWidth: WORD,
 bcHeight: WORD,
 bcPlanes: WORD,
 bcBitCount: WORD
});

var tagBITMAPINFOHEADER = new StructT('tagBITMAPINFOHEADER', {
 biSize: DWORD,
 biWidth: LONG,
 biHeight: LONG,
 biPlanes: WORD,
 biBitCount: WORD,
 biCompression: DWORD,
 biSizeImage: DWORD,
 biXPelsPerMeter: LONG,
 biYPelsPerMeter: LONG,
 biClrUsed: DWORD,
 biClrImportant: DWORD
});

var undefined = new StructT('undefined', {
 bV4Size: DWORD,
 bV4Width: LONG,
 bV4Height: LONG,
 bV4Planes: WORD,
 bV4BitCount: WORD,
 bV4V4Compression: DWORD,
 bV4SizeImage: DWORD,
 bV4XPelsPerMeter: LONG,
 bV4YPelsPerMeter: LONG,
 bV4ClrUsed: DWORD,
 bV4ClrImportant: DWORD,
 bV4RedMask: DWORD,
 bV4GreenMask: DWORD,
 bV4BlueMask: DWORD,
 bV4AlphaMask: DWORD,
 bV4CSType: DWORD,
 bV4Endpoints: CIEXYZTRIPLE,
 bV4GammaRed: DWORD,
 bV4GammaGreen: DWORD,
 bV4GammaBlue: DWORD
});

var undefined = new StructT('undefined', {
 bV5Size: DWORD,
 bV5Width: LONG,
 bV5Height: LONG,
 bV5Planes: WORD,
 bV5BitCount: WORD,
 bV5Compression: DWORD,
 bV5SizeImage: DWORD,
 bV5XPelsPerMeter: LONG,
 bV5YPelsPerMeter: LONG,
 bV5ClrUsed: DWORD,
 bV5ClrImportant: DWORD,
 bV5RedMask: DWORD,
 bV5GreenMask: DWORD,
 bV5BlueMask: DWORD,
 bV5AlphaMask: DWORD,
 bV5CSType: DWORD,
 bV5Endpoints: CIEXYZTRIPLE,
 bV5GammaRed: DWORD,
 bV5GammaGreen: DWORD,
 bV5GammaBlue: DWORD,
 bV5Intent: DWORD,
 bV5ProfileData: DWORD,
 bV5ProfileSize: DWORD,
 bV5Reserved: DWORD
});

var tagBITMAPINFO = new StructT('tagBITMAPINFO', {
 bmiHeader: BITMAPINFOHEADER,
 bmiColors: ARRAY(RGBQUAD, 1)
});

var tagBITMAPCOREINFO = new StructT('tagBITMAPCOREINFO', {
 bmciHeader: BITMAPCOREHEADER,
 bmciColors: ARRAY(RGBTRIPLE, 1)
});

var tagBITMAPFILEHEADER = new StructT('tagBITMAPFILEHEADER', {
 bfType: WORD,
 bfSize: DWORD,
 bfReserved1: WORD,
 bfReserved2: WORD,
 bfOffBits: DWORD
});

var tagFONTSIGNATURE = new StructT('tagFONTSIGNATURE', {
 fsUsb: ARRAY(DWORD, 4),
 fsCsb: ARRAY(DWORD, 2)
});

var tagCHARSETINFO = new StructT('tagCHARSETINFO', {
 ciCharset: UINT,
 ciACP: UINT,
 fs: FONTSIGNATURE
});

var tagLOCALESIGNATURE = new StructT('tagLOCALESIGNATURE', {
 lsUsb: ARRAY(DWORD, 4),
 lsCsbDefault: ARRAY(DWORD, 2),
 lsCsbSupported: ARRAY(DWORD, 2)
});

var tagHANDLETABLE = new StructT('tagHANDLETABLE', {
 objectHandle: ARRAY(HGDIOBJ, 1)
});

var tagMETARECORD = new StructT('tagMETARECORD', {
 rdSize: DWORD,
 rdFunction: WORD,
 rdParm: ARRAY(WORD, 1)
});

var tagMETAFILEPICT = new StructT('tagMETAFILEPICT', {
 mm: LONG,
 xExt: LONG,
 yExt: LONG,
 hMF: HMETAFILE
});

var tagMETAHEADER = new StructT('tagMETAHEADER', {
 mtType: WORD,
 mtHeaderSize: WORD,
 mtVersion: WORD,
 mtSize: DWORD,
 mtNoObjects: WORD,
 mtMaxRecord: DWORD,
 mtNoParameters: WORD
});

var tagENHMETARECORD = new StructT('tagENHMETARECORD', {
 iType: DWORD,
 nSize: DWORD,
 dParm: ARRAY(DWORD, 1)
});

var tagENHMETAHEADER = new StructT('tagENHMETAHEADER', {
 iType: DWORD,
 nSize: DWORD,
 rclBounds: RECTL,
 rclFrame: RECTL,
 dSignature: DWORD,
 nVersion: DWORD,
 nBytes: DWORD,
 nRecords: DWORD,
 nHandles: WORD,
 sReserved: WORD,
 nDescription: DWORD,
 offDescription: DWORD,
 nPalEntries: DWORD,
 szlDevice: SIZEL,
 szlMillimeters: SIZEL,
 cbPixelFormat: DWORD,
 offPixelFormat: DWORD,
 bOpenGL: DWORD,
 szlMicrometers: SIZEL
});

var TEXTMETRIC = new StructT('TEXTMETRIC', {
 tmHeight: LONG,
 tmAscent: LONG,
 tmDescent: LONG,
 tmInternalLeading: LONG,
 tmExternalLeading: LONG,
 tmAveCharWidth: LONG,
 tmMaxCharWidth: LONG,
 tmWeight: LONG,
 tmOverhang: LONG,
 tmDigitizedAspectX: LONG,
 tmDigitizedAspectY: LONG,
 tmFirstChar: BYTE,
 tmLastChar: BYTE,
 tmDefaultChar: BYTE,
 tmBreakChar: BYTE,
 tmItalic: BYTE,
 tmUnderlined: BYTE,
 tmStruckOut: BYTE,
 tmPitchAndFamily: BYTE,
 tmCharSet: BYTE
});

var TEXTMETRICOLE = new StructT('TEXTMETRICOLE', {
 tmHeight: LONG,
 tmAscent: LONG,
 tmDescent: LONG,
 tmInternalLeading: LONG,
 tmExternalLeading: LONG,
 tmAveCharWidth: LONG,
 tmMaxCharWidth: LONG,
 tmWeight: LONG,
 tmOverhang: LONG,
 tmDigitizedAspectX: LONG,
 tmDigitizedAspectY: LONG,
 tmFirstChar: WCHAR,
 tmLastChar: WCHAR,
 tmDefaultChar: WCHAR,
 tmBreakChar: WCHAR,
 tmItalic: BYTE,
 tmUnderlined: BYTE,
 tmStruckOut: BYTE,
 tmPitchAndFamily: BYTE,
 tmCharSet: BYTE
});

var NEWTEXTMETRIC = new StructT('NEWTEXTMETRIC', {
 tmHeight: LONG,
 tmAscent: LONG,
 tmDescent: LONG,
 tmInternalLeading: LONG,
 tmExternalLeading: LONG,
 tmAveCharWidth: LONG,
 tmMaxCharWidth: LONG,
 tmWeight: LONG,
 tmOverhang: LONG,
 tmDigitizedAspectX: LONG,
 tmDigitizedAspectY: LONG,
 tmFirstChar: BYTE,
 tmLastChar: BYTE,
 tmDefaultChar: BYTE,
 tmBreakChar: BYTE,
 tmItalic: BYTE,
 tmUnderlined: BYTE,
 tmStruckOut: BYTE,
 tmPitchAndFamily: BYTE,
 tmCharSet: BYTE,
 ntmFlags: DWORD,
 ntmSizeEM: UINT,
 ntmCellHeight: UINT,
 ntmAvgWidth: UINT
});

var tagNEWTEXTMETRICW = new StructT('tagNEWTEXTMETRICW', {
 tmHeight: LONG,
 tmAscent: LONG,
 tmDescent: LONG,
 tmInternalLeading: LONG,
 tmExternalLeading: LONG,
 tmAveCharWidth: LONG,
 tmMaxCharWidth: LONG,
 tmWeight: LONG,
 tmOverhang: LONG,
 tmDigitizedAspectX: LONG,
 tmDigitizedAspectY: LONG,
 tmFirstChar: WCHAR,
 tmLastChar: WCHAR,
 tmDefaultChar: WCHAR,
 tmBreakChar: WCHAR,
 tmItalic: BYTE,
 tmUnderlined: BYTE,
 tmStruckOut: BYTE,
 tmPitchAndFamily: BYTE,
 tmCharSet: BYTE,
 ntmFlags: DWORD,
 ntmSizeEM: UINT,
 ntmCellHeight: UINT,
 ntmAvgWidth: UINT
});

var NEWTEXTMETRICEX = new StructT('NEWTEXTMETRICEX', {
 ntmTm: NEWTEXTMETRICA,
 ntmFontSig: FONTSIGNATURE
});

var tagNEWTEXTMETRICEXW = new StructT('tagNEWTEXTMETRICEXW', {
 ntmTm: NEWTEXTMETRICW,
 ntmFontSig: FONTSIGNATURE
});

var tagPELARRAY = new StructT('tagPELARRAY', {
 paXCount: LONG,
 paYCount: LONG,
 paXExt: LONG,
 paYExt: LONG,
 paRGBs: BYTE
});

var PATTERN = new StructT('PATTERN', {
 lbStyle: UINT,
 lbColor: COLORREF,
 lbHatch: ULONG_PTR
});

var tagLOGBRUSH32 = new StructT('tagLOGBRUSH32', {
 lbStyle: UINT,
 lbColor: COLORREF,
 lbHatch: ULONG
});

var tagLOGPEN = new StructT('tagLOGPEN', {
 lopnStyle: UINT,
 lopnWidth: POINT,
 lopnColor: COLORREF
});

var tagEXTLOGPEN = new StructT('tagEXTLOGPEN', {
 elpPenStyle: DWORD,
 elpWidth: DWORD,
 elpBrushStyle: UINT,
 elpColor: COLORREF,
 elpHatch: ULONG_PTR,
 elpNumEntries: DWORD,
 elpStyleEntry: ARRAY(DWORD, 1)
});

var tagEXTLOGPEN32 = new StructT('tagEXTLOGPEN32', {
 elpPenStyle: DWORD,
 elpWidth: DWORD,
 elpBrushStyle: UINT,
 elpColor: COLORREF,
 elpHatch: ULONG,
 elpNumEntries: DWORD,
 elpStyleEntry: ARRAY(DWORD, 1)
});

var tagPALETTEENTRY = new StructT('tagPALETTEENTRY', {
 peRed: BYTE,
 peGreen: BYTE,
 peBlue: BYTE,
 peFlags: BYTE
});

var tagLOGPALETTE = new StructT('tagLOGPALETTE', {
 palVersion: WORD,
 palNumEntries: WORD,
 palPalEntry: ARRAY(PALETTEENTRY, 1)
});

var LOGFONT = new StructT('LOGFONT', {
 lfHeight: LONG,
 lfWidth: LONG,
 lfEscapement: LONG,
 lfOrientation: LONG,
 lfWeight: LONG,
 lfItalic: BYTE,
 lfUnderline: BYTE,
 lfStrikeOut: BYTE,
 lfCharSet: BYTE,
 lfOutPrecision: BYTE,
 lfClipPrecision: BYTE,
 lfQuality: BYTE,
 lfPitchAndFamily: BYTE,
 lfFaceName: ARRAY(CHAR, LF_FACESIZE)
});

var tagLOGFONTW = new StructT('tagLOGFONTW', {
 lfHeight: LONG,
 lfWidth: LONG,
 lfEscapement: LONG,
 lfOrientation: LONG,
 lfWeight: LONG,
 lfItalic: BYTE,
 lfUnderline: BYTE,
 lfStrikeOut: BYTE,
 lfCharSet: BYTE,
 lfOutPrecision: BYTE,
 lfClipPrecision: BYTE,
 lfQuality: BYTE,
 lfPitchAndFamily: BYTE,
 lfFaceName: ARRAY(WCHAR, LF_FACESIZE)
});

var ENUMLOGFONT = new StructT('ENUMLOGFONT', {
 elfLogFont: LOGFONTA,
 elfFullName: ARRAY(BYTE, LF_FULLFACESIZE),
 elfStyle: ARRAY(BYTE, LF_FACESIZE)
});

var tagENUMLOGFONTW = new StructT('tagENUMLOGFONTW', {
 elfLogFont: LOGFONTW,
 elfFullName: ARRAY(WCHAR, LF_FULLFACESIZE),
 elfStyle: ARRAY(WCHAR, LF_FACESIZE)
});

var ENUMLOGFONTEX = new StructT('ENUMLOGFONTEX', {
 elfLogFont: LOGFONTA,
 elfFullName: ARRAY(BYTE, LF_FULLFACESIZE),
 elfStyle: ARRAY(BYTE, LF_FACESIZE),
 elfScript: ARRAY(BYTE, LF_FACESIZE)
});

var tagENUMLOGFONTEXW = new StructT('tagENUMLOGFONTEXW', {
 elfLogFont: LOGFONTW,
 elfFullName: ARRAY(WCHAR, LF_FULLFACESIZE),
 elfStyle: ARRAY(WCHAR, LF_FACESIZE),
 elfScript: ARRAY(WCHAR, LF_FACESIZE)
});

var tagPANOSE = new StructT('tagPANOSE', {
 bFamilyType: BYTE,
 bSerifStyle: BYTE,
 bWeight: BYTE,
 bProportion: BYTE,
 bContrast: BYTE,
 bStrokeVariation: BYTE,
 bArmStyle: BYTE,
 bLetterform: BYTE,
 bMidline: BYTE,
 bXHeight: BYTE
});

var EXTLOGFONT = new StructT('EXTLOGFONT', {
 elfLogFont: LOGFONTA,
 elfFullName: ARRAY(BYTE, LF_FULLFACESIZE),
 elfStyle: ARRAY(BYTE, LF_FACESIZE),
 elfVersion: DWORD,
 elfStyleSize: DWORD,
 elfMatch: DWORD,
 elfReserved: DWORD,
 elfVendorId: ARRAY(BYTE, ELF_VENDOR_SIZE),
 elfCulture: DWORD,
 elfPanose: PANOSE
});

var tagEXTLOGFONTW = new StructT('tagEXTLOGFONTW', {
 elfLogFont: LOGFONTW,
 elfFullName: ARRAY(WCHAR, LF_FULLFACESIZE),
 elfStyle: ARRAY(WCHAR, LF_FACESIZE),
 elfVersion: DWORD,
 elfStyleSize: DWORD,
 elfMatch: DWORD,
 elfReserved: DWORD,
 elfVendorId: ARRAY(BYTE, ELF_VENDOR_SIZE),
 elfCulture: DWORD,
 elfPanose: PANOSE
});

var DEVMODE = new StructT('DEVMODE', {
 dmDeviceName: ARRAY(BYTE, CCHDEVICENAME),
 dmSpecVersion: WORD,
 dmDriverVersion: WORD,
 dmSize: WORD,
 dmDriverExtra: WORD,
 dmFields: DWORD,
 dmColor: short,
 dmDuplex: short,
 dmYResolution: short,
 dmTTOption: short,
 dmCollate: short,
 dmFormName: ARRAY(BYTE, CCHFORMNAME),
 dmLogPixels: WORD,
 dmBitsPerPel: DWORD,
 dmPelsWidth: DWORD,
 dmPelsHeight: DWORD,
 dmDisplayFrequency: DWORD,
 dmICMMethod: DWORD,
 dmICMIntent: DWORD,
 dmMediaType: DWORD,
 dmDitherType: DWORD,
 dmReserved1: DWORD,
 dmReserved2: DWORD,
 dmPanningWidth: DWORD,
 dmPanningHeight: DWORD
});

var undefined = new StructT('undefined', {
 dmOrientation: short,
 dmPaperSize: short,
 dmPaperLength: short,
 dmPaperWidth: short,
 dmScale: short,
 dmCopies: short,
 dmDefaultSource: short,
 dmPrintQuality: short
});

var undefined = new StructT('undefined', {
 dmPosition: POINTL,
 dmDisplayOrientation: DWORD,
 dmDisplayFixedOutput: DWORD
});

var _devicemodeW = new StructT('_devicemodeW', {
 dmDeviceName: ARRAY(WCHAR, CCHDEVICENAME),
 dmSpecVersion: WORD,
 dmDriverVersion: WORD,
 dmSize: WORD,
 dmDriverExtra: WORD,
 dmFields: DWORD,
 dmColor: short,
 dmDuplex: short,
 dmYResolution: short,
 dmTTOption: short,
 dmCollate: short,
 dmFormName: ARRAY(WCHAR, CCHFORMNAME),
 dmLogPixels: WORD,
 dmBitsPerPel: DWORD,
 dmPelsWidth: DWORD,
 dmPelsHeight: DWORD,
 dmDisplayFrequency: DWORD,
 dmICMMethod: DWORD,
 dmICMIntent: DWORD,
 dmMediaType: DWORD,
 dmDitherType: DWORD,
 dmReserved1: DWORD,
 dmReserved2: DWORD,
 dmPanningWidth: DWORD,
 dmPanningHeight: DWORD
});

var undefined = new StructT('undefined', {
 dmOrientation: short,
 dmPaperSize: short,
 dmPaperLength: short,
 dmPaperWidth: short,
 dmScale: short,
 dmCopies: short,
 dmDefaultSource: short,
 dmPrintQuality: short
});

var undefined = new StructT('undefined', {
 dmPosition: POINTL,
 dmDisplayOrientation: DWORD,
 dmDisplayFixedOutput: DWORD
});

var DISPLAY_DEVICE = new StructT('DISPLAY_DEVICE', {
 cb: DWORD,
 DeviceName: ARRAY(CHAR, 32),
 DeviceString: ARRAY(CHAR, 128),
 StateFlags: DWORD,
 DeviceID: ARRAY(CHAR, 128),
 DeviceKey: ARRAY(CHAR, 128)
});

var _DISPLAY_DEVICEW = new StructT('_DISPLAY_DEVICEW', {
 cb: DWORD,
 DeviceName: ARRAY(WCHAR, 32),
 DeviceString: ARRAY(WCHAR, 128),
 StateFlags: DWORD,
 DeviceID: ARRAY(WCHAR, 128),
 DeviceKey: ARRAY(WCHAR, 128)
});

var DISPLAYCONFIG_RATIONAL = new StructT('DISPLAYCONFIG_RATIONAL', {
 Numerator: UINT32,
 Denominator: UINT32
});

var DISPLAYCONFIG_2DREGION = new StructT('DISPLAYCONFIG_2DREGION', {
 cx: UINT32,
 cy: UINT32
});

var DISPLAYCONFIG_VIDEO_SIGNAL_INFO = new StructT('DISPLAYCONFIG_VIDEO_SIGNAL_INFO', {
 pixelRate: UINT64,
 hSyncFreq: DISPLAYCONFIG_RATIONAL,
 vSyncFreq: DISPLAYCONFIG_RATIONAL,
 activeSize: DISPLAYCONFIG_2DREGION,
 totalSize: DISPLAYCONFIG_2DREGION,
 videoStandard: UINT32,
 scanLineOrdering: DISPLAYCONFIG_SCANLINE_ORDERING
});

var DISPLAYCONFIG_SOURCE_MODE = new StructT('DISPLAYCONFIG_SOURCE_MODE', {
 width: UINT32,
 height: UINT32,
 pixelFormat: DISPLAYCONFIG_PIXELFORMAT,
 position: POINTL
});

var DISPLAYCONFIG_TARGET_MODE = new StructT('DISPLAYCONFIG_TARGET_MODE', {
 targetVideoSignalInfo: DISPLAYCONFIG_VIDEO_SIGNAL_INFO
});

var DISPLAYCONFIG_MODE_INFO = new StructT('DISPLAYCONFIG_MODE_INFO', {
 infoType: DISPLAYCONFIG_MODE_INFO_TYPE,
 id: UINT32,
 adapterId: LUID
});

var DISPLAYCONFIG_PATH_SOURCE_INFO = new StructT('DISPLAYCONFIG_PATH_SOURCE_INFO', {
 adapterId: LUID,
 id: UINT32,
 modeInfoIdx: UINT32,
 statusFlags: UINT32
});

var DISPLAYCONFIG_PATH_TARGET_INFO = new StructT('DISPLAYCONFIG_PATH_TARGET_INFO', {
 adapterId: LUID,
 id: UINT32,
 modeInfoIdx: UINT32,
 outputTechnology: DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY,
 rotation: DISPLAYCONFIG_ROTATION,
 scaling: DISPLAYCONFIG_SCALING,
 refreshRate: DISPLAYCONFIG_RATIONAL,
 scanLineOrdering: DISPLAYCONFIG_SCANLINE_ORDERING,
 targetAvailable: BOOL,
 statusFlags: UINT32
});

var DISPLAYCONFIG_PATH_INFO = new StructT('DISPLAYCONFIG_PATH_INFO', {
 sourceInfo: DISPLAYCONFIG_PATH_SOURCE_INFO,
 targetInfo: DISPLAYCONFIG_PATH_TARGET_INFO,
 flags: UINT32
});

var DISPLAYCONFIG_DEVICE_INFO_HEADER = new StructT('DISPLAYCONFIG_DEVICE_INFO_HEADER', {
 type: DISPLAYCONFIG_DEVICE_INFO_TYPE,
 size: UINT32,
 adapterId: LUID,
 id: UINT32
});

var DISPLAYCONFIG_SOURCE_DEVICE_NAME = new StructT('DISPLAYCONFIG_SOURCE_DEVICE_NAME', {
 header: DISPLAYCONFIG_DEVICE_INFO_HEADER,
 viewGdiDeviceName: ARRAY(WCHAR, CCHDEVICENAME)
});


var undefined = new StructT('undefined', {
 friendlyNameFromEdid: UINT32,
 friendlyNameForced: UINT32,
 edidIdsValid: UINT32,
 reserved: UINT32
});

var DISPLAYCONFIG_TARGET_DEVICE_NAME = new StructT('DISPLAYCONFIG_TARGET_DEVICE_NAME', {
 header: DISPLAYCONFIG_DEVICE_INFO_HEADER,
 flags: DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS,
 outputTechnology: DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY,
 edidManufactureId: UINT16,
 edidProductCodeId: UINT16,
 connectorInstance: UINT32,
 monitorFriendlyDeviceName: ARRAY(WCHAR, 64),
 monitorDevicePath: ARRAY(WCHAR, 128)
});

var DISPLAYCONFIG_TARGET_PREFERRED_MODE = new StructT('DISPLAYCONFIG_TARGET_PREFERRED_MODE', {
 header: DISPLAYCONFIG_DEVICE_INFO_HEADER,
 width: UINT32,
 height: UINT32,
 targetMode: DISPLAYCONFIG_TARGET_MODE
});

var DISPLAYCONFIG_ADAPTER_NAME = new StructT('DISPLAYCONFIG_ADAPTER_NAME', {
 header: DISPLAYCONFIG_DEVICE_INFO_HEADER,
 adapterDevicePath: ARRAY(WCHAR, 128)
});

var DISPLAYCONFIG_SET_TARGET_PERSISTENCE = new StructT('DISPLAYCONFIG_SET_TARGET_PERSISTENCE', {
 header: DISPLAYCONFIG_DEVICE_INFO_HEADER
});

var undefined = new StructT('undefined', {
 bootPersistenceOn: UINT32,
 reserved: UINT32
});

var _RGNDATAHEADER = new StructT('_RGNDATAHEADER', {
 dwSize: DWORD,
 iType: DWORD,
 nCount: DWORD,
 nRgnSize: DWORD,
 rcBound: RECT
});

var _RGNDATA = new StructT('_RGNDATA', {
 rdh: RGNDATAHEADER,
 Buffer: ARRAY(undefined, 1)
});

var _ABC = new StructT('_ABC', {
 abcA: int,
 abcB: UINT,
 abcC: int
});

var _ABCFLOAT = new StructT('_ABCFLOAT', {
 abcfA: FLOAT,
 abcfB: FLOAT,
 abcfC: FLOAT
});

var OUTLINETEXTMETRIC = new StructT('OUTLINETEXTMETRIC', {
 otmSize: UINT,
 otmTextMetrics: TEXTMETRICA,
 otmFiller: BYTE,
 otmPanoseNumber: PANOSE,
 otmfsSelection: UINT,
 otmfsType: UINT,
 otmsCharSlopeRise: int,
 otmsCharSlopeRun: int,
 otmItalicAngle: int,
 otmEMSquare: UINT,
 otmAscent: int,
 otmDescent: int,
 otmLineGap: UINT,
 otmsCapEmHeight: UINT,
 otmsXHeight: UINT,
 otmrcFontBox: RECT,
 otmMacAscent: int,
 otmMacDescent: int,
 otmMacLineGap: UINT,
 otmusMinimumPPEM: UINT,
 otmptSubscriptSize: POINT,
 otmptSubscriptOffset: POINT,
 otmptSuperscriptSize: POINT,
 otmptSuperscriptOffset: POINT,
 otmsStrikeoutSize: UINT,
 otmsStrikeoutPosition: int,
 otmsUnderscoreSize: int,
 otmsUnderscorePosition: int,
 otmpFamilyName: PSTR,
 otmpFaceName: PSTR,
 otmpStyleName: PSTR,
 otmpFullName: PSTR
});

var _OUTLINETEXTMETRICW = new StructT('_OUTLINETEXTMETRICW', {
 otmSize: UINT,
 otmTextMetrics: TEXTMETRICW,
 otmFiller: BYTE,
 otmPanoseNumber: PANOSE,
 otmfsSelection: UINT,
 otmfsType: UINT,
 otmsCharSlopeRise: int,
 otmsCharSlopeRun: int,
 otmItalicAngle: int,
 otmEMSquare: UINT,
 otmAscent: int,
 otmDescent: int,
 otmLineGap: UINT,
 otmsCapEmHeight: UINT,
 otmsXHeight: UINT,
 otmrcFontBox: RECT,
 otmMacAscent: int,
 otmMacDescent: int,
 otmMacLineGap: UINT,
 otmusMinimumPPEM: UINT,
 otmptSubscriptSize: POINT,
 otmptSubscriptOffset: POINT,
 otmptSuperscriptSize: POINT,
 otmptSuperscriptOffset: POINT,
 otmsStrikeoutSize: UINT,
 otmsStrikeoutPosition: int,
 otmsUnderscoreSize: int,
 otmsUnderscorePosition: int,
 otmpFamilyName: PSTR,
 otmpFaceName: PSTR,
 otmpStyleName: PSTR,
 otmpFullName: PSTR
});

var POLYTEXT = new StructT('POLYTEXT', {
 x: int,
 y: int,
 n: UINT,
 lpstr: LPCSTR,
 uiFlags: UINT,
 rcl: RECT,
 pdx: int.Δ
});

var tagPOLYTEXTW = new StructT('tagPOLYTEXTW', {
 x: int,
 y: int,
 n: UINT,
 lpstr: LPCWSTR,
 uiFlags: UINT,
 rcl: RECT,
 pdx: int.Δ
});

var _FIXED = new StructT('_FIXED', {
 fract: WORD,
 value: short
});

var _MAT2 = new StructT('_MAT2', {
 eM11: FIXED,
 eM12: FIXED,
 eM21: FIXED,
 eM22: FIXED
});

var _GLYPHMETRICS = new StructT('_GLYPHMETRICS', {
 gmBlackBoxX: UINT,
 gmBlackBoxY: UINT,
 gmptGlyphOrigin: POINT,
 gmCellIncX: short,
 gmCellIncY: short
});

var tagPOINTFX = new StructT('tagPOINTFX', {
 x: FIXED,
 y: FIXED
});

var tagTTPOLYCURVE = new StructT('tagTTPOLYCURVE', {
 wType: WORD,
 cpfx: WORD,
 apfx: ARRAY(POINTFX, 1)
});

var tagTTPOLYGONHEADER = new StructT('tagTTPOLYGONHEADER', {
 cb: DWORD,
 dwType: DWORD,
 pfxStart: POINTFX
});

var GCP_RESULTS = new StructT('GCP_RESULTS', {
 lStructSize: DWORD,
 lpOutString: LPSTR,
 lpOrder: uint.Δ,
 lpDx: int.Δ,
 lpCaretPos: int.Δ,
 lpClass: LPSTR,
 lpGlyphs: LPWSTR,
 nGlyphs: UINT,
 nMaxFit: int
});

var tagGCP_RESULTSW = new StructT('tagGCP_RESULTSW', {
 lStructSize: DWORD,
 lpOutString: LPWSTR,
 lpOrder: uint.Δ,
 lpDx: int.Δ,
 lpCaretPos: int.Δ,
 lpClass: LPSTR,
 lpGlyphs: LPWSTR,
 nGlyphs: UINT,
 nMaxFit: int
});

var _RASTERIZER_STATUS = new StructT('_RASTERIZER_STATUS', {
 nSize: short,
 wFlags: short,
 nLanguageID: short
});

var tagPIXELFORMATDESCRIPTOR = new StructT('tagPIXELFORMATDESCRIPTOR', {
 nSize: WORD,
 nVersion: WORD,
 dwFlags: DWORD,
 iPixelType: BYTE,
 cColorBits: BYTE,
 cRedBits: BYTE,
 cRedShift: BYTE,
 cGreenBits: BYTE,
 cGreenShift: BYTE,
 cBlueBits: BYTE,
 cBlueShift: BYTE,
 cAlphaBits: BYTE,
 cAlphaShift: BYTE,
 cAccumBits: BYTE,
 cAccumRedBits: BYTE,
 cAccumGreenBits: BYTE,
 cAccumBlueBits: BYTE,
 cAccumAlphaBits: BYTE,
 cDepthBits: BYTE,
 cStencilBits: BYTE,
 cAuxBuffers: BYTE,
 iLayerType: BYTE,
 bReserved: BYTE,
 dwLayerMask: DWORD,
 dwVisibleMask: DWORD,
 dwDamageMask: DWORD
});

var tagWCRANGE = new StructT('tagWCRANGE', {
 wcLow: WCHAR,
 cGlyphs: USHORT
});

var tagGLYPHSET = new StructT('tagGLYPHSET', {
 cbThis: DWORD,
 flAccel: DWORD,
 cGlyphsSupported: DWORD,
 cRanges: DWORD,
 ranges: ARRAY(WCRANGE, 1)
});

var tagDESIGNVECTOR = new StructT('tagDESIGNVECTOR', {
 dvReserved: DWORD,
 dvNumAxes: DWORD,
 dvValues: ARRAY(LONG, MM_MAX_NUMAXES)
});

var AXISINFO = new StructT('AXISINFO', {
 axMinValue: LONG,
 axMaxValue: LONG,
 axAxisName: ARRAY(BYTE, MM_MAX_AXES_NAMELEN)
});

var tagAXISINFOW = new StructT('tagAXISINFOW', {
 axMinValue: LONG,
 axMaxValue: LONG,
 axAxisName: ARRAY(WCHAR, MM_MAX_AXES_NAMELEN)
});

var AXESLIST = new StructT('AXESLIST', {
 axlReserved: DWORD,
 axlNumAxes: DWORD,
 axlAxisInfo: ARRAY(AXISINFOA, MM_MAX_NUMAXES)
});

var tagAXESLISTW = new StructT('tagAXESLISTW', {
 axlReserved: DWORD,
 axlNumAxes: DWORD,
 axlAxisInfo: ARRAY(AXISINFOW, MM_MAX_NUMAXES)
});

var ENUMLOGFONTEXDV = new StructT('ENUMLOGFONTEXDV', {
 elfEnumLogfontEx: ENUMLOGFONTEXA,
 elfDesignVector: DESIGNVECTOR
});

var tagENUMLOGFONTEXDVW = new StructT('tagENUMLOGFONTEXDVW', {
 elfEnumLogfontEx: ENUMLOGFONTEXW,
 elfDesignVector: DESIGNVECTOR
});

var ENUMTEXTMETRIC = new StructT('ENUMTEXTMETRIC', {
 etmNewTextMetricEx: NEWTEXTMETRICEXA,
 etmAxesList: AXESLISTA
});

var tagENUMTEXTMETRICW = new StructT('tagENUMTEXTMETRICW', {
 etmNewTextMetricEx: NEWTEXTMETRICEXW,
 etmAxesList: AXESLISTW
});

var _TRIVERTEX = new StructT('_TRIVERTEX', {
 x: LONG,
 y: LONG,
 Red: COLOR16,
 Green: COLOR16,
 Blue: COLOR16,
 Alpha: COLOR16
});

var _GRADIENT_TRIANGLE = new StructT('_GRADIENT_TRIANGLE', {
 Vertex1: ULONG,
 Vertex2: ULONG,
 Vertex3: ULONG
});

var _GRADIENT_RECT = new StructT('_GRADIENT_RECT', {
 UpperLeft: ULONG,
 LowerRight: ULONG
});

var _BLENDFUNCTION = new StructT('_BLENDFUNCTION', {
 BlendOp: BYTE,
 BlendFlags: BYTE,
 SourceConstantAlpha: BYTE,
 AlphaFormat: BYTE
});

var tagDIBSECTION = new StructT('tagDIBSECTION', {
 dsBm: BITMAP,
 dsBmih: BITMAPINFOHEADER,
 dsBitfields: ARRAY(DWORD, 3),
 dshSection: HANDLE,
 dsOffset: DWORD
});

var tagCOLORADJUSTMENT = new StructT('tagCOLORADJUSTMENT', {
 caSize: WORD,
 caFlags: WORD,
 caIlluminantIndex: WORD,
 caRedGamma: WORD,
 caGreenGamma: WORD,
 caBlueGamma: WORD,
 caReferenceBlack: WORD,
 caReferenceWhite: WORD,
 caContrast: SHORT,
 caBrightness: SHORT,
 caColorfulness: SHORT,
 caRedGreenTint: SHORT
});

var DOCINFO = new StructT('DOCINFO', {
 cbSize: int,
 lpszDocName: LPCSTR,
 lpszOutput: LPCSTR,
 lpszDatatype: LPCSTR,
 fwType: DWORD
});

var _DOCINFOW = new StructT('_DOCINFOW', {
 cbSize: int,
 lpszDocName: LPCWSTR,
 lpszOutput: LPCWSTR,
 lpszDatatype: LPCWSTR,
 fwType: DWORD
});

var tagKERNINGPAIR = new StructT('tagKERNINGPAIR', {
 wFirst: WORD,
 wSecond: WORD,
 iKernAmount: int
});

var tagEMR = new StructT('tagEMR', {
 iType: DWORD,
 nSize: DWORD
});

var tagEMRTEXT = new StructT('tagEMRTEXT', {
 ptlReference: POINTL,
 nChars: DWORD,
 offString: DWORD,
 fOptions: DWORD,
 rcl: RECTL,
 offDx: DWORD
});

var tagABORTPATH = new StructT('tagABORTPATH', {
 emr: EMR
});

var tagEMRSELECTCLIPPATH = new StructT('tagEMRSELECTCLIPPATH', {
 emr: EMR,
 iMode: DWORD
});

var tagEMRSETMITERLIMIT = new StructT('tagEMRSETMITERLIMIT', {
 emr: EMR,
 eMiterLimit: FLOAT
});

var tagEMRRESTOREDC = new StructT('tagEMRRESTOREDC', {
 emr: EMR,
 iRelative: LONG
});

var tagEMRSETARCDIRECTION = new StructT('tagEMRSETARCDIRECTION', {
 emr: EMR,
 iArcDirection: DWORD
});

var tagEMRSETMAPPERFLAGS = new StructT('tagEMRSETMAPPERFLAGS', {
 emr: EMR,
 dwFlags: DWORD
});

var tagEMRSETTEXTCOLOR = new StructT('tagEMRSETTEXTCOLOR', {
 emr: EMR,
 crColor: COLORREF
});

var tagEMRSELECTOBJECT = new StructT('tagEMRSELECTOBJECT', {
 emr: EMR,
 ihObject: DWORD
});

var tagEMRSELECTPALETTE = new StructT('tagEMRSELECTPALETTE', {
 emr: EMR,
 ihPal: DWORD
});

var tagEMRRESIZEPALETTE = new StructT('tagEMRRESIZEPALETTE', {
 emr: EMR,
 ihPal: DWORD,
 cEntries: DWORD
});

var tagEMRSETPALETTEENTRIES = new StructT('tagEMRSETPALETTEENTRIES', {
 emr: EMR,
 ihPal: DWORD,
 iStart: DWORD,
 cEntries: DWORD,
 aPalEntries: ARRAY(PALETTEENTRY, 1)
});

var tagEMRSETCOLORADJUSTMENT = new StructT('tagEMRSETCOLORADJUSTMENT', {
 emr: EMR,
 ColorAdjustment: COLORADJUSTMENT
});

var tagEMRGDICOMMENT = new StructT('tagEMRGDICOMMENT', {
 emr: EMR,
 cbData: DWORD,
 Data: ARRAY(BYTE, 1)
});

var tagEMREOF = new StructT('tagEMREOF', {
 emr: EMR,
 nPalEntries: DWORD,
 offPalEntries: DWORD,
 nSizeLast: DWORD
});

var tagEMRLINETO = new StructT('tagEMRLINETO', {
 emr: EMR,
 ptl: POINTL
});

var tagEMROFFSETCLIPRGN = new StructT('tagEMROFFSETCLIPRGN', {
 emr: EMR,
 ptlOffset: POINTL
});

var tagEMRFILLPATH = new StructT('tagEMRFILLPATH', {
 emr: EMR,
 rclBounds: RECTL
});

var tagEMREXCLUDECLIPRECT = new StructT('tagEMREXCLUDECLIPRECT', {
 emr: EMR,
 rclClip: RECTL
});

var tagEMRSETVIEWPORTORGEX = new StructT('tagEMRSETVIEWPORTORGEX', {
 emr: EMR,
 ptlOrigin: POINTL
});

var tagEMRSETVIEWPORTEXTEX = new StructT('tagEMRSETVIEWPORTEXTEX', {
 emr: EMR,
 szlExtent: SIZEL
});

var tagEMRSCALEVIEWPORTEXTEX = new StructT('tagEMRSCALEVIEWPORTEXTEX', {
 emr: EMR,
 xNum: LONG,
 xDenom: LONG,
 yNum: LONG,
 yDenom: LONG
});

var tagEMRSETWORLDTRANSFORM = new StructT('tagEMRSETWORLDTRANSFORM', {
 emr: EMR,
 xform: XFORM
});

var tagEMRMODIFYWORLDTRANSFORM = new StructT('tagEMRMODIFYWORLDTRANSFORM', {
 emr: EMR,
 xform: XFORM,
 iMode: DWORD
});

var tagEMRSETPIXELV = new StructT('tagEMRSETPIXELV', {
 emr: EMR,
 ptlPixel: POINTL,
 crColor: COLORREF
});

var tagEMREXTFLOODFILL = new StructT('tagEMREXTFLOODFILL', {
 emr: EMR,
 ptlStart: POINTL,
 crColor: COLORREF,
 iMode: DWORD
});

var tagEMRELLIPSE = new StructT('tagEMRELLIPSE', {
 emr: EMR,
 rclBox: RECTL
});

var tagEMRROUNDRECT = new StructT('tagEMRROUNDRECT', {
 emr: EMR,
 rclBox: RECTL,
 szlCorner: SIZEL
});

var tagEMRARC = new StructT('tagEMRARC', {
 emr: EMR,
 rclBox: RECTL,
 ptlStart: POINTL,
 ptlEnd: POINTL
});

var tagEMRANGLEARC = new StructT('tagEMRANGLEARC', {
 emr: EMR,
 ptlCenter: POINTL,
 nRadius: DWORD,
 eStartAngle: FLOAT,
 eSweepAngle: FLOAT
});

var tagEMRPOLYLINE = new StructT('tagEMRPOLYLINE', {
 emr: EMR,
 rclBounds: RECTL,
 cptl: DWORD,
 aptl: ARRAY(POINTL, 1)
});

var tagEMRPOLYLINE16 = new StructT('tagEMRPOLYLINE16', {
 emr: EMR,
 rclBounds: RECTL,
 cpts: DWORD,
 apts: ARRAY(POINTS, 1)
});

var tagEMRPOLYDRAW = new StructT('tagEMRPOLYDRAW', {
 emr: EMR,
 rclBounds: RECTL,
 cptl: DWORD,
 aptl: ARRAY(POINTL, 1),
 abTypes: ARRAY(BYTE, 1)
});

var tagEMRPOLYDRAW16 = new StructT('tagEMRPOLYDRAW16', {
 emr: EMR,
 rclBounds: RECTL,
 cpts: DWORD,
 apts: ARRAY(POINTS, 1),
 abTypes: ARRAY(BYTE, 1)
});

var tagEMRPOLYPOLYLINE = new StructT('tagEMRPOLYPOLYLINE', {
 emr: EMR,
 rclBounds: RECTL,
 nPolys: DWORD,
 cptl: DWORD,
 aPolyCounts: ARRAY(DWORD, 1),
 aptl: ARRAY(POINTL, 1)
});

var tagEMRPOLYPOLYLINE16 = new StructT('tagEMRPOLYPOLYLINE16', {
 emr: EMR,
 rclBounds: RECTL,
 nPolys: DWORD,
 cpts: DWORD,
 aPolyCounts: ARRAY(DWORD, 1),
 apts: ARRAY(POINTS, 1)
});

var tagEMRINVERTRGN = new StructT('tagEMRINVERTRGN', {
 emr: EMR,
 rclBounds: RECTL,
 cbRgnData: DWORD,
 RgnData: ARRAY(BYTE, 1)
});

var tagEMRFILLRGN = new StructT('tagEMRFILLRGN', {
 emr: EMR,
 rclBounds: RECTL,
 cbRgnData: DWORD,
 ihBrush: DWORD,
 RgnData: ARRAY(BYTE, 1)
});

var tagEMRFRAMERGN = new StructT('tagEMRFRAMERGN', {
 emr: EMR,
 rclBounds: RECTL,
 cbRgnData: DWORD,
 ihBrush: DWORD,
 szlStroke: SIZEL,
 RgnData: ARRAY(BYTE, 1)
});

var tagEMREXTSELECTCLIPRGN = new StructT('tagEMREXTSELECTCLIPRGN', {
 emr: EMR,
 cbRgnData: DWORD,
 iMode: DWORD,
 RgnData: ARRAY(BYTE, 1)
});

var tagEMREXTTEXTOUTA = new StructT('tagEMREXTTEXTOUTA', {
 emr: EMR,
 rclBounds: RECTL,
 iGraphicsMode: DWORD,
 exScale: FLOAT,
 eyScale: FLOAT,
 emrtext: EMRTEXT
});

var tagEMRPOLYTEXTOUTA = new StructT('tagEMRPOLYTEXTOUTA', {
 emr: EMR,
 rclBounds: RECTL,
 iGraphicsMode: DWORD,
 exScale: FLOAT,
 eyScale: FLOAT,
 cStrings: LONG,
 aemrtext: ARRAY(EMRTEXT, 1)
});

var tagEMRBITBLT = new StructT('tagEMRBITBLT', {
 emr: EMR,
 rclBounds: RECTL,
 xDest: LONG,
 yDest: LONG,
 cxDest: LONG,
 cyDest: LONG,
 dwRop: DWORD,
 xSrc: LONG,
 ySrc: LONG,
 xformSrc: XFORM,
 crBkColorSrc: COLORREF,
 iUsageSrc: DWORD,
 offBmiSrc: DWORD,
 cbBmiSrc: DWORD,
 offBitsSrc: DWORD,
 cbBitsSrc: DWORD
});

var tagEMRSTRETCHBLT = new StructT('tagEMRSTRETCHBLT', {
 emr: EMR,
 rclBounds: RECTL,
 xDest: LONG,
 yDest: LONG,
 cxDest: LONG,
 cyDest: LONG,
 dwRop: DWORD,
 xSrc: LONG,
 ySrc: LONG,
 xformSrc: XFORM,
 crBkColorSrc: COLORREF,
 iUsageSrc: DWORD,
 offBmiSrc: DWORD,
 cbBmiSrc: DWORD,
 offBitsSrc: DWORD,
 cbBitsSrc: DWORD,
 cxSrc: LONG,
 cySrc: LONG
});

var tagEMRMASKBLT = new StructT('tagEMRMASKBLT', {
 emr: EMR,
 rclBounds: RECTL,
 xDest: LONG,
 yDest: LONG,
 cxDest: LONG,
 cyDest: LONG,
 dwRop: DWORD,
 xSrc: LONG,
 ySrc: LONG,
 xformSrc: XFORM,
 crBkColorSrc: COLORREF,
 iUsageSrc: DWORD,
 offBmiSrc: DWORD,
 cbBmiSrc: DWORD,
 offBitsSrc: DWORD,
 cbBitsSrc: DWORD,
 xMask: LONG,
 yMask: LONG,
 iUsageMask: DWORD,
 offBmiMask: DWORD,
 cbBmiMask: DWORD,
 offBitsMask: DWORD,
 cbBitsMask: DWORD
});

var tagEMRPLGBLT = new StructT('tagEMRPLGBLT', {
 emr: EMR,
 rclBounds: RECTL,
 aptlDest: ARRAY(POINTL, 3),
 xSrc: LONG,
 ySrc: LONG,
 cxSrc: LONG,
 cySrc: LONG,
 xformSrc: XFORM,
 crBkColorSrc: COLORREF,
 iUsageSrc: DWORD,
 offBmiSrc: DWORD,
 cbBmiSrc: DWORD,
 offBitsSrc: DWORD,
 cbBitsSrc: DWORD,
 xMask: LONG,
 yMask: LONG,
 iUsageMask: DWORD,
 offBmiMask: DWORD,
 cbBmiMask: DWORD,
 offBitsMask: DWORD,
 cbBitsMask: DWORD
});

var tagEMRSETDIBITSTODEVICE = new StructT('tagEMRSETDIBITSTODEVICE', {
 emr: EMR,
 rclBounds: RECTL,
 xDest: LONG,
 yDest: LONG,
 xSrc: LONG,
 ySrc: LONG,
 cxSrc: LONG,
 cySrc: LONG,
 offBmiSrc: DWORD,
 cbBmiSrc: DWORD,
 offBitsSrc: DWORD,
 cbBitsSrc: DWORD,
 iUsageSrc: DWORD,
 iStartScan: DWORD,
 cScans: DWORD
});

var tagEMRSTRETCHDIBITS = new StructT('tagEMRSTRETCHDIBITS', {
 emr: EMR,
 rclBounds: RECTL,
 xDest: LONG,
 yDest: LONG,
 xSrc: LONG,
 ySrc: LONG,
 cxSrc: LONG,
 cySrc: LONG,
 offBmiSrc: DWORD,
 cbBmiSrc: DWORD,
 offBitsSrc: DWORD,
 cbBitsSrc: DWORD,
 iUsageSrc: DWORD,
 dwRop: DWORD,
 cxDest: LONG,
 cyDest: LONG
});

var tagEMREXTCREATEFONTINDIRECTW = new StructT('tagEMREXTCREATEFONTINDIRECTW', {
 emr: EMR,
 ihFont: DWORD,
 elfw: EXTLOGFONTW
});

var tagEMRCREATEPALETTE = new StructT('tagEMRCREATEPALETTE', {
 emr: EMR,
 ihPal: DWORD,
 lgpl: LOGPALETTE
});

var tagEMRCREATEPEN = new StructT('tagEMRCREATEPEN', {
 emr: EMR,
 ihPen: DWORD,
 lopn: LOGPEN
});

var tagEMREXTCREATEPEN = new StructT('tagEMREXTCREATEPEN', {
 emr: EMR,
 ihPen: DWORD,
 offBmi: DWORD,
 cbBmi: DWORD,
 offBits: DWORD,
 cbBits: DWORD,
 elp: EXTLOGPEN32
});

var tagEMRCREATEBRUSHINDIRECT = new StructT('tagEMRCREATEBRUSHINDIRECT', {
 emr: EMR,
 ihBrush: DWORD,
 lb: LOGBRUSH32
});

var tagEMRCREATEMONOBRUSH = new StructT('tagEMRCREATEMONOBRUSH', {
 emr: EMR,
 ihBrush: DWORD,
 iUsage: DWORD,
 offBmi: DWORD,
 cbBmi: DWORD,
 offBits: DWORD,
 cbBits: DWORD
});

var tagEMRCREATEDIBPATTERNBRUSHPT = new StructT('tagEMRCREATEDIBPATTERNBRUSHPT', {
 emr: EMR,
 ihBrush: DWORD,
 iUsage: DWORD,
 offBmi: DWORD,
 cbBmi: DWORD,
 offBits: DWORD,
 cbBits: DWORD
});

var tagEMRFORMAT = new StructT('tagEMRFORMAT', {
 dSignature: DWORD,
 nVersion: DWORD,
 cbData: DWORD,
 offData: DWORD
});

var tagEMRGLSRECORD = new StructT('tagEMRGLSRECORD', {
 emr: EMR,
 cbData: DWORD,
 Data: ARRAY(BYTE, 1)
});

var tagEMRGLSBOUNDEDRECORD = new StructT('tagEMRGLSBOUNDEDRECORD', {
 emr: EMR,
 rclBounds: RECTL,
 cbData: DWORD,
 Data: ARRAY(BYTE, 1)
});

var tagEMRPIXELFORMAT = new StructT('tagEMRPIXELFORMAT', {
 emr: EMR,
 pfd: PIXELFORMATDESCRIPTOR
});

var tagEMRCREATECOLORSPACE = new StructT('tagEMRCREATECOLORSPACE', {
 emr: EMR,
 ihCS: DWORD,
 lcs: LOGCOLORSPACEA
});

var tagEMRSETCOLORSPACE = new StructT('tagEMRSETCOLORSPACE', {
 emr: EMR,
 ihCS: DWORD
});

var tagEMREXTESCAPE = new StructT('tagEMREXTESCAPE', {
 emr: EMR,
 iEscape: INT,
 cbEscData: INT,
 EscData: ARRAY(BYTE, 1)
});

var tagEMRNAMEDESCAPE = new StructT('tagEMRNAMEDESCAPE', {
 emr: EMR,
 iEscape: INT,
 cbDriver: INT,
 cbEscData: INT,
 EscData: ARRAY(BYTE, 1)
});

var tagEMRSETICMPROFILE = new StructT('tagEMRSETICMPROFILE', {
 emr: EMR,
 dwFlags: DWORD,
 cbName: DWORD,
 cbData: DWORD,
 Data: ARRAY(BYTE, 1)
});

var tagEMRCREATECOLORSPACEW = new StructT('tagEMRCREATECOLORSPACEW', {
 emr: EMR,
 ihCS: DWORD,
 lcs: LOGCOLORSPACEW,
 dwFlags: DWORD,
 cbData: DWORD,
 Data: ARRAY(BYTE, 1)
});

var tagCOLORMATCHTOTARGET = new StructT('tagCOLORMATCHTOTARGET', {
 emr: EMR,
 dwAction: DWORD,
 dwFlags: DWORD,
 cbName: DWORD,
 cbData: DWORD,
 Data: ARRAY(BYTE, 1)
});

var tagCOLORCORRECTPALETTE = new StructT('tagCOLORCORRECTPALETTE', {
 emr: EMR,
 ihPalette: DWORD,
 nFirstEntry: DWORD,
 nPalEntries: DWORD,
 nReserved: DWORD
});

var tagEMRALPHABLEND = new StructT('tagEMRALPHABLEND', {
 emr: EMR,
 rclBounds: RECTL,
 xDest: LONG,
 yDest: LONG,
 cxDest: LONG,
 cyDest: LONG,
 dwRop: DWORD,
 xSrc: LONG,
 ySrc: LONG,
 xformSrc: XFORM,
 crBkColorSrc: COLORREF,
 iUsageSrc: DWORD,
 offBmiSrc: DWORD,
 cbBmiSrc: DWORD,
 offBitsSrc: DWORD,
 cbBitsSrc: DWORD,
 cxSrc: LONG,
 cySrc: LONG
});

var tagEMRGRADIENTFILL = new StructT('tagEMRGRADIENTFILL', {
 emr: EMR,
 rclBounds: RECTL,
 nVer: DWORD,
 nTri: DWORD,
 ulMode: ULONG,
 Ver: ARRAY(TRIVERTEX, 1)
});

var tagEMRTRANSPARENTBLT = new StructT('tagEMRTRANSPARENTBLT', {
 emr: EMR,
 rclBounds: RECTL,
 xDest: LONG,
 yDest: LONG,
 cxDest: LONG,
 cyDest: LONG,
 dwRop: DWORD,
 xSrc: LONG,
 ySrc: LONG,
 xformSrc: XFORM,
 crBkColorSrc: COLORREF,
 iUsageSrc: DWORD,
 offBmiSrc: DWORD,
 cbBmiSrc: DWORD,
 offBitsSrc: DWORD,
 cbBitsSrc: DWORD,
 cxSrc: LONG,
 cySrc: LONG
});

var _POINTFLOAT = new StructT('_POINTFLOAT', {
 x: FLOAT,
 y: FLOAT
});

var _GLYPHMETRICSFLOAT = new StructT('_GLYPHMETRICSFLOAT', {
 gmfBlackBoxX: FLOAT,
 gmfBlackBoxY: FLOAT,
 gmfptGlyphOrigin: POINTFLOAT,
 gmfCellIncX: FLOAT,
 gmfCellIncY: FLOAT
});

var tagLAYERPLANEDESCRIPTOR = new StructT('tagLAYERPLANEDESCRIPTOR', {
 nSize: WORD,
 nVersion: WORD,
 dwFlags: DWORD,
 iPixelType: BYTE,
 cColorBits: BYTE,
 cRedBits: BYTE,
 cRedShift: BYTE,
 cGreenBits: BYTE,
 cGreenShift: BYTE,
 cBlueBits: BYTE,
 cBlueShift: BYTE,
 cAlphaBits: BYTE,
 cAlphaShift: BYTE,
 cAccumBits: BYTE,
 cAccumRedBits: BYTE,
 cAccumGreenBits: BYTE,
 cAccumBlueBits: BYTE,
 cAccumAlphaBits: BYTE,
 cDepthBits: BYTE,
 cStencilBits: BYTE,
 cAuxBuffers: BYTE,
 iLayerPlane: BYTE,
 bReserved: BYTE,
 crTransparent: COLORREF
});

var _WGLSWAP = new StructT('_WGLSWAP', {
 hdc: HDC,
 uiFlags: UINT
});

var CBT_CREATEWND = new StructT('CBT_CREATEWND', {
 lpcs: tagCREATESTRUCTA.Δ,
 hwndInsertAfter: HWND
});

var CREATESTRUCT = new StructT('CREATESTRUCT', {
 lpCreateParams: LPVOID,
 hInstance: HINSTANCE,
 hMenu: HMENU,
 hwndParent: HWND,
 cy: int,
 cx: int,
 y: int,
 x: int,
 style: LONG,
 lpszName: LPCSTR,
 lpszClass: LPCSTR,
 dwExStyle: DWORD
});

var tagCBT_CREATEWNDW = new StructT('tagCBT_CREATEWNDW', {
 lpcs: tagCREATESTRUCTW.Δ,
 hwndInsertAfter: HWND
});

var tagCREATESTRUCTW = new StructT('tagCREATESTRUCTW', {
 lpCreateParams: LPVOID,
 hInstance: HINSTANCE,
 hMenu: HMENU,
 hwndParent: HWND,
 cy: int,
 cx: int,
 y: int,
 x: int,
 style: LONG,
 lpszName: LPCWSTR,
 lpszClass: LPCWSTR,
 dwExStyle: DWORD
});

var tagCBTACTIVATESTRUCT = new StructT('tagCBTACTIVATESTRUCT', {
 fMouse: BOOL,
 hWndActive: HWND
});

var tagWTSSESSION_NOTIFICATION = new StructT('tagWTSSESSION_NOTIFICATION', {
 cbSize: DWORD,
 dwSessionId: DWORD
});

var undefined = new StructT('undefined', {
 hwnd: HWND,
 rc: RECT
});

var tagEVENTMSG = new StructT('tagEVENTMSG', {
 message: UINT,
 paramL: UINT,
 paramH: UINT,
 time: DWORD,
 hwnd: HWND
});

var tagCWPSTRUCT = new StructT('tagCWPSTRUCT', {
 lParam: LPARAM,
 wParam: WPARAM,
 message: UINT,
 hwnd: HWND
});

var tagCWPRETSTRUCT = new StructT('tagCWPRETSTRUCT', {
 lResult: LRESULT,
 lParam: LPARAM,
 wParam: WPARAM,
 message: UINT,
 hwnd: HWND
});

var tagKBDLLHOOKSTRUCT = new StructT('tagKBDLLHOOKSTRUCT', {
 vkCode: DWORD,
 scanCode: DWORD,
 flags: DWORD,
 time: DWORD,
 dwExtraInfo: ULONG_PTR
});

var tagMSLLHOOKSTRUCT = new StructT('tagMSLLHOOKSTRUCT', {
 pt: POINT,
 mouseData: DWORD,
 flags: DWORD,
 time: DWORD,
 dwExtraInfo: ULONG_PTR
});

var tagDEBUGHOOKINFO = new StructT('tagDEBUGHOOKINFO', {
 idThread: DWORD,
 idThreadInstaller: DWORD,
 lParam: LPARAM,
 wParam: WPARAM,
 code: int
});

var tagMOUSEHOOKSTRUCT = new StructT('tagMOUSEHOOKSTRUCT', {
 pt: POINT,
 hwnd: HWND,
 wHitTestCode: UINT,
 dwExtraInfo: ULONG_PTR
});

var tagMOUSEHOOKSTRUCTEX = new StructT('tagMOUSEHOOKSTRUCTEX', {
 mouseData: DWORD
});

var tagHARDWAREHOOKSTRUCT = new StructT('tagHARDWAREHOOKSTRUCT', {
 hwnd: HWND,
 message: UINT,
 wParam: WPARAM,
 lParam: LPARAM
});

var tagMOUSEMOVEPOINT = new StructT('tagMOUSEMOVEPOINT', {
 x: int,
 y: int,
 time: DWORD,
 dwExtraInfo: ULONG_PTR
});

var tagUSEROBJECTFLAGS = new StructT('tagUSEROBJECTFLAGS', {
 fInherit: BOOL,
 fReserved: BOOL,
 dwFlags: DWORD
});

var WNDCLASSEX = new StructT('WNDCLASSEX', {
 cbSize: UINT,
 style: UINT,
 lpfnWndProc: WNDPROC,
 cbClsExtra: int,
 cbWndExtra: int,
 hInstance: HINSTANCE,
 hIcon: HICON,
 hCursor: HCURSOR,
 hbrBackground: HBRUSH,
 lpszMenuName: LPCSTR,
 lpszClassName: LPCSTR,
 hIconSm: HICON
});

var tagWNDCLASSEXW = new StructT('tagWNDCLASSEXW', {
 cbSize: UINT,
 style: UINT,
 lpfnWndProc: WNDPROC,
 cbClsExtra: int,
 cbWndExtra: int,
 hInstance: HINSTANCE,
 hIcon: HICON,
 hCursor: HCURSOR,
 hbrBackground: HBRUSH,
 lpszMenuName: LPCWSTR,
 lpszClassName: LPCWSTR,
 hIconSm: HICON
});

var WNDCLASS = new StructT('WNDCLASS', {
 style: UINT,
 lpfnWndProc: WNDPROC,
 cbClsExtra: int,
 cbWndExtra: int,
 hInstance: HINSTANCE,
 hIcon: HICON,
 hCursor: HCURSOR,
 hbrBackground: HBRUSH,
 lpszMenuName: LPCSTR,
 lpszClassName: LPCSTR
});

var tagWNDCLASSW = new StructT('tagWNDCLASSW', {
 style: UINT,
 lpfnWndProc: WNDPROC,
 cbClsExtra: int,
 cbWndExtra: int,
 hInstance: HINSTANCE,
 hIcon: HICON,
 hCursor: HCURSOR,
 hbrBackground: HBRUSH,
 lpszMenuName: LPCWSTR,
 lpszClassName: LPCWSTR
});

var tagMSG = new StructT('tagMSG', {
 hwnd: HWND,
 message: UINT,
 wParam: WPARAM,
 lParam: LPARAM,
 time: DWORD,
 pt: POINT
});

var tagMINMAXINFO = new StructT('tagMINMAXINFO', {
 ptReserved: POINT,
 ptMaxSize: POINT,
 ptMaxPosition: POINT,
 ptMinTrackSize: POINT,
 ptMaxTrackSize: POINT
});

var tagCOPYDATASTRUCT = new StructT('tagCOPYDATASTRUCT', {
 dwData: ULONG_PTR,
 cbData: DWORD,
 lpData: PVOID
});

var tagMDINEXTMENU = new StructT('tagMDINEXTMENU', {
 hmenuIn: HMENU,
 hmenuNext: HMENU,
 hwndNext: HWND
});

var undefined = new StructT('undefined', {
 PowerSetting: GUID,
 DataLength: DWORD,
 Data: ARRAY(UCHAR, 1)
});

var tagWINDOWPOS = new StructT('tagWINDOWPOS', {
 hwnd: HWND,
 hwndInsertAfter: HWND,
 x: int,
 y: int,
 cx: int,
 cy: int,
 flags: UINT
});

var tagNCCALCSIZE_PARAMS = new StructT('tagNCCALCSIZE_PARAMS', {
 rgrc: ARRAY(RECT, 3),
 lppos: PWINDOWPOS
});

var tagTRACKMOUSEEVENT = new StructT('tagTRACKMOUSEEVENT', {
 cbSize: DWORD,
 dwFlags: DWORD,
 hwndTrack: HWND,
 dwHoverTime: DWORD
});

var tagACCEL = new StructT('tagACCEL', {
 fVirt: BYTE,
 key: WORD,
 cmd: WORD
});

var tagPAINTSTRUCT = new StructT('tagPAINTSTRUCT', {
 hdc: HDC,
 fErase: BOOL,
 rcPaint: RECT,
 fRestore: BOOL,
 fIncUpdate: BOOL,
 rgbReserved: ARRAY(BYTE, 32)
});

var tagWINDOWPLACEMENT = new StructT('tagWINDOWPLACEMENT', {
 length: UINT,
 flags: UINT,
 showCmd: UINT,
 ptMinPosition: POINT,
 ptMaxPosition: POINT,
 rcNormalPosition: RECT
});

var tagNMHDR = new StructT('tagNMHDR', {
 hwndFrom: HWND,
 idFrom: UINT_PTR,
 code: UINT
});

var tagSTYLESTRUCT = new StructT('tagSTYLESTRUCT', {
 styleOld: DWORD,
 styleNew: DWORD
});

var tagMEASUREITEMSTRUCT = new StructT('tagMEASUREITEMSTRUCT', {
 CtlType: UINT,
 CtlID: UINT,
 itemID: UINT,
 itemWidth: UINT,
 itemHeight: UINT,
 itemData: ULONG_PTR
});

var tagDRAWITEMSTRUCT = new StructT('tagDRAWITEMSTRUCT', {
 CtlType: UINT,
 CtlID: UINT,
 itemID: UINT,
 itemAction: UINT,
 itemState: UINT,
 hwndItem: HWND,
 hDC: HDC,
 rcItem: RECT,
 itemData: ULONG_PTR
});

var tagDELETEITEMSTRUCT = new StructT('tagDELETEITEMSTRUCT', {
 CtlType: UINT,
 CtlID: UINT,
 itemID: UINT,
 hwndItem: HWND,
 itemData: ULONG_PTR
});

var tagCOMPAREITEMSTRUCT = new StructT('tagCOMPAREITEMSTRUCT', {
 CtlType: UINT,
 CtlID: UINT,
 hwndItem: HWND,
 itemID1: UINT,
 itemData1: ULONG_PTR,
 itemID2: UINT,
 itemData2: ULONG_PTR,
 dwLocaleId: DWORD
});

var undefined = new StructT('undefined', {
 cbSize: UINT,
 hdesk: HDESK,
 hwnd: HWND,
 luid: LUID
});

var tagUPDATELAYEREDWINDOWINFO = new StructT('tagUPDATELAYEREDWINDOWINFO', {
 cbSize: DWORD,
 hdcDst: HDC,
 pptDst: uint.Δ,
 psize: uint.Δ,
 hdcSrc: HDC,
 pptSrc: uint.Δ,
 crKey: COLORREF,
 pblend: uint.Δ,
 dwFlags: DWORD,
 prcDirty: uint.Δ
});

var undefined = new StructT('undefined', {
 cbSize: UINT,
 hwnd: HWND,
 dwFlags: DWORD,
 uCount: UINT,
 dwTimeout: DWORD
});

var undefined = new StructT('undefined', {
 style: DWORD,
 dwExtendedStyle: DWORD,
 cdit: WORD,
 x: short,
 y: short,
 cx: short,
 cy: short
});

var undefined = new StructT('undefined', {
 style: DWORD,
 dwExtendedStyle: DWORD,
 x: short,
 y: short,
 cx: short,
 cy: short,
 id: WORD
});

var tagMOUSEINPUT = new StructT('tagMOUSEINPUT', {
 dx: LONG,
 dy: LONG,
 mouseData: DWORD,
 dwFlags: DWORD,
 time: DWORD,
 dwExtraInfo: ULONG_PTR
});

var tagKEYBDINPUT = new StructT('tagKEYBDINPUT', {
 wVk: WORD,
 wScan: WORD,
 dwFlags: DWORD,
 time: DWORD,
 dwExtraInfo: ULONG_PTR
});

var tagHARDWAREINPUT = new StructT('tagHARDWAREINPUT', {
 uMsg: DWORD,
 wParamL: WORD,
 wParamH: WORD
});

var tagINPUT = new StructT('tagINPUT', {
 type: DWORD
});

var HTOUCHINPUT__ = new StructT('HTOUCHINPUT__', {
 unused: int
});

var tagTOUCHINPUT = new StructT('tagTOUCHINPUT', {
 x: LONG,
 y: LONG,
 hSource: HANDLE,
 dwID: DWORD,
 dwFlags: DWORD,
 dwMask: DWORD,
 dwTime: DWORD,
 dwExtraInfo: ULONG_PTR,
 cxContact: DWORD,
 cyContact: DWORD
});

var tagLASTINPUTINFO = new StructT('tagLASTINPUTINFO', {
 cbSize: UINT,
 dwTime: DWORD
});

var tagTPMPARAMS = new StructT('tagTPMPARAMS', {
 cbSize: UINT,
 rcExclude: RECT
});

var tagMENUINFO = new StructT('tagMENUINFO', {
 cbSize: DWORD,
 fMask: DWORD,
 dwStyle: DWORD,
 cyMax: UINT,
 hbrBack: HBRUSH,
 dwContextHelpID: DWORD,
 dwMenuData: ULONG_PTR
});

var tagMENUGETOBJECTINFO = new StructT('tagMENUGETOBJECTINFO', {
 dwFlags: DWORD,
 uPos: UINT,
 hmenu: HMENU,
 riid: PVOID,
 pvObj: PVOID
});

var MENUITEMINFO = new StructT('MENUITEMINFO', {
 cbSize: UINT,
 fMask: UINT,
 fType: UINT,
 fState: UINT,
 wID: UINT,
 hSubMenu: HMENU,
 hbmpChecked: HBITMAP,
 hbmpUnchecked: HBITMAP,
 dwItemData: ULONG_PTR,
 dwTypeData: LPSTR,
 cch: UINT,
 hbmpItem: HBITMAP
});

var tagMENUITEMINFOW = new StructT('tagMENUITEMINFOW', {
 cbSize: UINT,
 fMask: UINT,
 fType: UINT,
 fState: UINT,
 wID: UINT,
 hSubMenu: HMENU,
 hbmpChecked: HBITMAP,
 hbmpUnchecked: HBITMAP,
 dwItemData: ULONG_PTR,
 dwTypeData: LPWSTR,
 cch: UINT,
 hbmpItem: HBITMAP
});

var tagDROPSTRUCT = new StructT('tagDROPSTRUCT', {
 hwndSource: HWND,
 hwndSink: HWND,
 wFmt: DWORD,
 dwData: ULONG_PTR,
 ptDrop: POINT,
 dwControlData: DWORD
});

var tagDRAWTEXTPARAMS = new StructT('tagDRAWTEXTPARAMS', {
 cbSize: UINT,
 iTabLength: int,
 iLeftMargin: int,
 iRightMargin: int,
 uiLengthDrawn: UINT
});

var tagHELPINFO = new StructT('tagHELPINFO', {
 cbSize: UINT,
 iContextType: int,
 iCtrlId: int,
 hItemHandle: HANDLE,
 dwContextId: DWORD_PTR,
 MousePos: POINT
});

var MSGBOXPARAMS = new StructT('MSGBOXPARAMS', {
 cbSize: UINT,
 hwndOwner: HWND,
 hInstance: HINSTANCE,
 lpszText: LPCSTR,
 lpszCaption: LPCSTR,
 dwStyle: DWORD,
 lpszIcon: LPCSTR,
 dwContextHelpId: DWORD_PTR,
 lpfnMsgBoxCallback: MSGBOXCALLBACK,
 dwLanguageId: DWORD
});

var tagMSGBOXPARAMSW = new StructT('tagMSGBOXPARAMSW', {
 cbSize: UINT,
 hwndOwner: HWND,
 hInstance: HINSTANCE,
 lpszText: LPCWSTR,
 lpszCaption: LPCWSTR,
 dwStyle: DWORD,
 lpszIcon: LPCWSTR,
 dwContextHelpId: DWORD_PTR,
 lpfnMsgBoxCallback: MSGBOXCALLBACK,
 dwLanguageId: DWORD
});

var undefined = new StructT('undefined', {
 versionNumber: WORD,
 offset: WORD
});

var undefined = new StructT('undefined', {
 mtOption: WORD,
 mtID: WORD,
 mtString: ARRAY(WCHAR, 1)
});

var _ICONINFO = new StructT('_ICONINFO', {
 fIcon: BOOL,
 xHotspot: DWORD,
 yHotspot: DWORD,
 hbmMask: HBITMAP,
 hbmColor: HBITMAP
});

var tagCURSORSHAPE = new StructT('tagCURSORSHAPE', {
 xHotSpot: int,
 yHotSpot: int,
 cx: int,
 cy: int,
 cbWidth: int,
 Planes: BYTE,
 BitsPixel: BYTE
});

var ICONINFOEX = new StructT('ICONINFOEX', {
 cbSize: DWORD,
 fIcon: BOOL,
 xHotspot: DWORD,
 yHotspot: DWORD,
 hbmMask: HBITMAP,
 hbmColor: HBITMAP,
 wResID: WORD,
 szModName: ARRAY(CHAR, MAX_PATH),
 szResName: ARRAY(CHAR, MAX_PATH)
});

var _ICONINFOEXW = new StructT('_ICONINFOEXW', {
 cbSize: DWORD,
 fIcon: BOOL,
 xHotspot: DWORD,
 yHotspot: DWORD,
 hbmMask: HBITMAP,
 hbmColor: HBITMAP,
 wResID: WORD,
 szModName: ARRAY(WCHAR, MAX_PATH),
 szResName: ARRAY(WCHAR, MAX_PATH)
});

var tagSCROLLINFO = new StructT('tagSCROLLINFO', {
 cbSize: UINT,
 fMask: UINT,
 nMin: int,
 nMax: int,
 nPage: UINT,
 nPos: int,
 nTrackPos: int
});

var MDICREATESTRUCT = new StructT('MDICREATESTRUCT', {
 szClass: LPCSTR,
 szTitle: LPCSTR,
 hOwner: HANDLE,
 x: int,
 y: int,
 cx: int,
 cy: int,
 style: DWORD,
 lParam: LPARAM
});

var tagMDICREATESTRUCTW = new StructT('tagMDICREATESTRUCTW', {
 szClass: LPCWSTR,
 szTitle: LPCWSTR,
 hOwner: HANDLE,
 x: int,
 y: int,
 cx: int,
 cy: int,
 style: DWORD,
 lParam: LPARAM
});

var tagCLIENTCREATESTRUCT = new StructT('tagCLIENTCREATESTRUCT', {
 hWindowMenu: HANDLE,
 idFirstChild: UINT
});

var MULTIKEYHELP = new StructT('MULTIKEYHELP', {
 mkSize: DWORD,
 mkKeylist: CHAR,
 szKeyphrase: ARRAY(CHAR, 1)
});

var tagMULTIKEYHELPW = new StructT('tagMULTIKEYHELPW', {
 mkSize: DWORD,
 mkKeylist: WCHAR,
 szKeyphrase: ARRAY(WCHAR, 1)
});

var HELPWININFO = new StructT('HELPWININFO', {
 wStructSize: int,
 x: int,
 y: int,
 dx: int,
 dy: int,
 wMax: int,
 rgchMember: ARRAY(CHAR, 2)
});

var tagHELPWININFOW = new StructT('tagHELPWININFOW', {
 wStructSize: int,
 x: int,
 y: int,
 dx: int,
 dy: int,
 wMax: int,
 rgchMember: ARRAY(WCHAR, 2)
});

var NONCLIENTMETRICS = new StructT('NONCLIENTMETRICS', {
 cbSize: UINT,
 iBorderWidth: int,
 iScrollWidth: int,
 iScrollHeight: int,
 iCaptionWidth: int,
 iCaptionHeight: int,
 lfCaptionFont: LOGFONTA,
 iSmCaptionWidth: int,
 iSmCaptionHeight: int,
 lfSmCaptionFont: LOGFONTA,
 iMenuWidth: int,
 iMenuHeight: int,
 lfMenuFont: LOGFONTA,
 lfStatusFont: LOGFONTA,
 lfMessageFont: LOGFONTA,
 iPaddedBorderWidth: int
});

var tagNONCLIENTMETRICSW = new StructT('tagNONCLIENTMETRICSW', {
 cbSize: UINT,
 iBorderWidth: int,
 iScrollWidth: int,
 iScrollHeight: int,
 iCaptionWidth: int,
 iCaptionHeight: int,
 lfCaptionFont: LOGFONTW,
 iSmCaptionWidth: int,
 iSmCaptionHeight: int,
 lfSmCaptionFont: LOGFONTW,
 iMenuWidth: int,
 iMenuHeight: int,
 lfMenuFont: LOGFONTW,
 lfStatusFont: LOGFONTW,
 lfMessageFont: LOGFONTW,
 iPaddedBorderWidth: int
});

var tagMINIMIZEDMETRICS = new StructT('tagMINIMIZEDMETRICS', {
 cbSize: UINT,
 iWidth: int,
 iHorzGap: int,
 iVertGap: int,
 iArrange: int
});

var ICONMETRICS = new StructT('ICONMETRICS', {
 cbSize: UINT,
 iHorzSpacing: int,
 iVertSpacing: int,
 iTitleWrap: int,
 lfFont: LOGFONTA
});

var tagICONMETRICSW = new StructT('tagICONMETRICSW', {
 cbSize: UINT,
 iHorzSpacing: int,
 iVertSpacing: int,
 iTitleWrap: int,
 lfFont: LOGFONTW
});

var tagANIMATIONINFO = new StructT('tagANIMATIONINFO', {
 cbSize: UINT,
 iMinAnimate: int
});

var SERIALKEYS = new StructT('SERIALKEYS', {
 cbSize: UINT,
 dwFlags: DWORD,
 lpszActivePort: LPSTR,
 lpszPort: LPSTR,
 iBaudRate: UINT,
 iPortState: UINT,
 iActive: UINT
});

var tagSERIALKEYSW = new StructT('tagSERIALKEYSW', {
 cbSize: UINT,
 dwFlags: DWORD,
 lpszActivePort: LPWSTR,
 lpszPort: LPWSTR,
 iBaudRate: UINT,
 iPortState: UINT,
 iActive: UINT
});

var HIGHCONTRAST = new StructT('HIGHCONTRAST', {
 cbSize: UINT,
 dwFlags: DWORD,
 lpszDefaultScheme: LPSTR
});

var tagHIGHCONTRASTW = new StructT('tagHIGHCONTRASTW', {
 cbSize: UINT,
 dwFlags: DWORD,
 lpszDefaultScheme: LPWSTR
});

var _VIDEOPARAMETERS = new StructT('_VIDEOPARAMETERS', {
 Guid: GUID,
 dwOffset: ULONG,
 dwCommand: ULONG,
 dwFlags: ULONG,
 dwMode: ULONG,
 dwTVStandard: ULONG,
 dwAvailableModes: ULONG,
 dwAvailableTVStandard: ULONG,
 dwFlickerFilter: ULONG,
 dwOverScanX: ULONG,
 dwOverScanY: ULONG,
 dwMaxUnscaledX: ULONG,
 dwMaxUnscaledY: ULONG,
 dwPositionX: ULONG,
 dwPositionY: ULONG,
 dwBrightness: ULONG,
 dwContrast: ULONG,
 dwCPType: ULONG,
 dwCPCommand: ULONG,
 dwCPStandard: ULONG,
 dwCPKey: ULONG,
 bCP_APSTriggerBits: ULONG,
 bOEMCopyProtection: ARRAY(UCHAR, 256)
});

var tagFILTERKEYS = new StructT('tagFILTERKEYS', {
 cbSize: UINT,
 dwFlags: DWORD,
 iWaitMSec: DWORD,
 iDelayMSec: DWORD,
 iRepeatMSec: DWORD,
 iBounceMSec: DWORD
});

var tagSTICKYKEYS = new StructT('tagSTICKYKEYS', {
 cbSize: UINT,
 dwFlags: DWORD
});

var tagMOUSEKEYS = new StructT('tagMOUSEKEYS', {
 cbSize: UINT,
 dwFlags: DWORD,
 iMaxSpeed: DWORD,
 iTimeToMaxSpeed: DWORD,
 iCtrlSpeed: DWORD,
 dwReserved1: DWORD,
 dwReserved2: DWORD
});

var tagACCESSTIMEOUT = new StructT('tagACCESSTIMEOUT', {
 cbSize: UINT,
 dwFlags: DWORD,
 iTimeOutMSec: DWORD
});

var SOUNDSENTRY = new StructT('SOUNDSENTRY', {
 cbSize: UINT,
 dwFlags: DWORD,
 iFSTextEffect: DWORD,
 iFSTextEffectMSec: DWORD,
 iFSTextEffectColorBits: DWORD,
 iFSGrafEffect: DWORD,
 iFSGrafEffectMSec: DWORD,
 iFSGrafEffectColor: DWORD,
 iWindowsEffect: DWORD,
 iWindowsEffectMSec: DWORD,
 lpszWindowsEffectDLL: LPSTR,
 iWindowsEffectOrdinal: DWORD
});

var tagSOUNDSENTRYW = new StructT('tagSOUNDSENTRYW', {
 cbSize: UINT,
 dwFlags: DWORD,
 iFSTextEffect: DWORD,
 iFSTextEffectMSec: DWORD,
 iFSTextEffectColorBits: DWORD,
 iFSGrafEffect: DWORD,
 iFSGrafEffectMSec: DWORD,
 iFSGrafEffectColor: DWORD,
 iWindowsEffect: DWORD,
 iWindowsEffectMSec: DWORD,
 lpszWindowsEffectDLL: LPWSTR,
 iWindowsEffectOrdinal: DWORD
});

var tagTOGGLEKEYS = new StructT('tagTOGGLEKEYS', {
 cbSize: UINT,
 dwFlags: DWORD
});

var tagAUDIODESCRIPTION = new StructT('tagAUDIODESCRIPTION', {
 cbSize: UINT,
 Enabled: BOOL,
 Locale: LCID
});

var tagMONITORINFO = new StructT('tagMONITORINFO', {
 cbSize: DWORD,
 rcMonitor: RECT,
 rcWork: RECT,
 dwFlags: DWORD
});

var MONITORINFOEX = new StructT('MONITORINFOEX', {
 szDevice: ARRAY(CHAR, CCHDEVICENAME)
});

var tagMONITORINFOEXW = new StructT('tagMONITORINFOEXW', {
 szDevice: ARRAY(WCHAR, CCHDEVICENAME)
});

var tagGUITHREADINFO = new StructT('tagGUITHREADINFO', {
 cbSize: DWORD,
 flags: DWORD,
 hwndActive: HWND,
 hwndFocus: HWND,
 hwndCapture: HWND,
 hwndMenuOwner: HWND,
 hwndMoveSize: HWND,
 hwndCaret: HWND,
 rcCaret: RECT
});

var tagCURSORINFO = new StructT('tagCURSORINFO', {
 cbSize: DWORD,
 flags: DWORD,
 hCursor: HCURSOR,
 ptScreenPos: POINT
});

var tagWINDOWINFO = new StructT('tagWINDOWINFO', {
 cbSize: DWORD,
 rcWindow: RECT,
 rcClient: RECT,
 dwStyle: DWORD,
 dwExStyle: DWORD,
 dwWindowStatus: DWORD,
 cxWindowBorders: UINT,
 cyWindowBorders: UINT,
 atomWindowType: ATOM,
 wCreatorVersion: WORD
});

var tagTITLEBARINFO = new StructT('tagTITLEBARINFO', {
 cbSize: DWORD,
 rcTitleBar: RECT,
 rgstate: ARRAY(DWORD, undefined)
});

var tagTITLEBARINFOEX = new StructT('tagTITLEBARINFOEX', {
 cbSize: DWORD,
 rcTitleBar: RECT,
 rgstate: ARRAY(DWORD, undefined),
 rgrect: ARRAY(RECT, undefined)
});

var tagMENUBARINFO = new StructT('tagMENUBARINFO', {
 cbSize: DWORD,
 rcBar: RECT,
 hMenu: HMENU,
 hwndMenu: HWND,
 fBarFocused: BOOL,
 fFocused: BOOL
});

var tagSCROLLBARINFO = new StructT('tagSCROLLBARINFO', {
 cbSize: DWORD,
 rcScrollBar: RECT,
 dxyLineButton: int,
 xyThumbTop: int,
 xyThumbBottom: int,
 reserved: int,
 rgstate: ARRAY(DWORD, undefined)
});

var tagCOMBOBOXINFO = new StructT('tagCOMBOBOXINFO', {
 cbSize: DWORD,
 rcItem: RECT,
 rcButton: RECT,
 stateButton: DWORD,
 hwndCombo: HWND,
 hwndItem: HWND,
 hwndList: HWND
});

var tagALTTABINFO = new StructT('tagALTTABINFO', {
 cbSize: DWORD,
 cItems: int,
 cColumns: int,
 cRows: int,
 iColFocus: int,
 iRowFocus: int,
 cxItem: int,
 cyItem: int,
 ptStart: POINT
});

var HRAWINPUT__ = new StructT('HRAWINPUT__', {
 unused: int
});

var tagRAWINPUTHEADER = new StructT('tagRAWINPUTHEADER', {
 dwType: DWORD,
 dwSize: DWORD,
 hDevice: HANDLE,
 wParam: WPARAM
});

var tagRAWMOUSE = new StructT('tagRAWMOUSE', {
 usFlags: USHORT,
 ulRawButtons: ULONG,
 lLastX: LONG,
 lLastY: LONG,
 ulExtraInformation: ULONG
});

var undefined = new StructT('undefined', {
 usButtonFlags: USHORT,
 usButtonData: USHORT
});

var tagRAWKEYBOARD = new StructT('tagRAWKEYBOARD', {
 MakeCode: USHORT,
 Flags: USHORT,
 Reserved: USHORT,
 VKey: USHORT,
 Message: UINT,
 ExtraInformation: ULONG
});

var tagRAWHID = new StructT('tagRAWHID', {
 dwSizeHid: DWORD,
 dwCount: DWORD,
 bRawData: ARRAY(BYTE, 1)
});

var tagRAWINPUT = new StructT('tagRAWINPUT', {
 header: RAWINPUTHEADER,
 data: c:winuser.h@307660@S@tagRAWINPUT@Ua
});

var tagRID_DEVICE_INFO_MOUSE = new StructT('tagRID_DEVICE_INFO_MOUSE', {
 dwId: DWORD,
 dwNumberOfButtons: DWORD,
 dwSampleRate: DWORD,
 fHasHorizontalWheel: BOOL
});

var tagRID_DEVICE_INFO_KEYBOARD = new StructT('tagRID_DEVICE_INFO_KEYBOARD', {
 dwType: DWORD,
 dwSubType: DWORD,
 dwKeyboardMode: DWORD,
 dwNumberOfFunctionKeys: DWORD,
 dwNumberOfIndicators: DWORD,
 dwNumberOfKeysTotal: DWORD
});

var tagRID_DEVICE_INFO_HID = new StructT('tagRID_DEVICE_INFO_HID', {
 dwVendorId: DWORD,
 dwProductId: DWORD,
 dwVersionNumber: DWORD,
 usUsagePage: USHORT,
 usUsage: USHORT
});

var tagRID_DEVICE_INFO = new StructT('tagRID_DEVICE_INFO', {
 cbSize: DWORD,
 dwType: DWORD
});

var tagRAWINPUTDEVICE = new StructT('tagRAWINPUTDEVICE', {
 usUsagePage: USHORT,
 usUsage: USHORT,
 dwFlags: DWORD,
 hwndTarget: HWND
});

var tagRAWINPUTDEVICELIST = new StructT('tagRAWINPUTDEVICELIST', {
 hDevice: HANDLE,
 dwType: DWORD
});

var tagCHANGEFILTERSTRUCT = new StructT('tagCHANGEFILTERSTRUCT', {
 cbSize: DWORD,
 ExtStatus: DWORD
});

var HGESTUREINFO__ = new StructT('HGESTUREINFO__', {
 unused: int
});

var tagGESTUREINFO = new StructT('tagGESTUREINFO', {
 cbSize: UINT,
 dwFlags: DWORD,
 dwID: DWORD,
 hwndTarget: HWND,
 ptsLocation: POINTS,
 dwInstanceID: DWORD,
 dwSequenceID: DWORD,
 ullArguments: ULONGLONG,
 cbExtraArgs: UINT
});

var tagGESTURENOTIFYSTRUCT = new StructT('tagGESTURENOTIFYSTRUCT', {
 cbSize: UINT,
 dwFlags: DWORD,
 hwndTarget: HWND,
 ptsLocation: POINTS,
 dwInstanceID: DWORD
});

var tagGESTURECONFIG = new StructT('tagGESTURECONFIG', {
 dwID: DWORD,
 dwWant: DWORD,
 dwBlock: DWORD
});

var _cpinfo = new StructT('_cpinfo', {
 MaxCharSize: UINT,
 DefaultChar: ARRAY(BYTE, MAX_DEFAULTCHAR),
 LeadByte: ARRAY(BYTE, MAX_LEADBYTES)
});

var CPINFOEX = new StructT('CPINFOEX', {
 MaxCharSize: UINT,
 DefaultChar: ARRAY(BYTE, MAX_DEFAULTCHAR),
 LeadByte: ARRAY(BYTE, MAX_LEADBYTES),
 UnicodeDefaultChar: WCHAR,
 CodePage: UINT,
 CodePageName: ARRAY(CHAR, MAX_PATH)
});

var _cpinfoexW = new StructT('_cpinfoexW', {
 MaxCharSize: UINT,
 DefaultChar: ARRAY(BYTE, MAX_DEFAULTCHAR),
 LeadByte: ARRAY(BYTE, MAX_LEADBYTES),
 UnicodeDefaultChar: WCHAR,
 CodePage: UINT,
 CodePageName: ARRAY(WCHAR, MAX_PATH)
});

var NUMBERFMT = new StructT('NUMBERFMT', {
 NumDigits: UINT,
 LeadingZero: UINT,
 Grouping: UINT,
 lpDecimalSep: LPSTR,
 lpThousandSep: LPSTR,
 NegativeOrder: UINT
});

var _numberfmtW = new StructT('_numberfmtW', {
 NumDigits: UINT,
 LeadingZero: UINT,
 Grouping: UINT,
 lpDecimalSep: LPWSTR,
 lpThousandSep: LPWSTR,
 NegativeOrder: UINT
});

var CURRENCYFMT = new StructT('CURRENCYFMT', {
 NumDigits: UINT,
 LeadingZero: UINT,
 Grouping: UINT,
 lpDecimalSep: LPSTR,
 lpThousandSep: LPSTR,
 NegativeOrder: UINT,
 PositiveOrder: UINT,
 lpCurrencySymbol: LPSTR
});

var _currencyfmtW = new StructT('_currencyfmtW', {
 NumDigits: UINT,
 LeadingZero: UINT,
 Grouping: UINT,
 lpDecimalSep: LPWSTR,
 lpThousandSep: LPWSTR,
 NegativeOrder: UINT,
 PositiveOrder: UINT,
 lpCurrencySymbol: LPWSTR
});

var _nlsversioninfo = new StructT('_nlsversioninfo', {
 dwNLSVersionInfoSize: DWORD,
 dwNLSVersion: DWORD,
 dwDefinedVersion: DWORD
});

var _nlsversioninfoex = new StructT('_nlsversioninfoex', {
 dwNLSVersionInfoSize: DWORD,
 dwNLSVersion: DWORD,
 dwDefinedVersion: DWORD,
 dwEffectiveId: DWORD,
 guidCustomVersion: GUID
});

var _FILEMUIINFO = new StructT('_FILEMUIINFO', {
 dwSize: DWORD,
 dwVersion: DWORD,
 dwFileType: DWORD,
 pChecksum: ARRAY(BYTE, 16),
 pServiceChecksum: ARRAY(BYTE, 16),
 dwLanguageNameOffset: DWORD,
 dwTypeIDMainSize: DWORD,
 dwTypeIDMainOffset: DWORD,
 dwTypeNameMainOffset: DWORD,
 dwTypeIDMUISize: DWORD,
 dwTypeIDMUIOffset: DWORD,
 dwTypeNameMUIOffset: DWORD,
 abBuffer: ARRAY(BYTE, 8)
});

var _COORD = new StructT('_COORD', {
 X: SHORT,
 Y: SHORT
});

var _SMALL_RECT = new StructT('_SMALL_RECT', {
 Left: SHORT,
 Top: SHORT,
 Right: SHORT,
 Bottom: SHORT
});

var _KEY_EVENT_RECORD = new StructT('_KEY_EVENT_RECORD', {
 bKeyDown: BOOL,
 wRepeatCount: WORD,
 wVirtualKeyCode: WORD,
 wVirtualScanCode: WORD,
 uChar: c:wincon.h@860@S@_KEY_EVENT_RECORD@Ua,
 dwControlKeyState: DWORD
});

var _MOUSE_EVENT_RECORD = new StructT('_MOUSE_EVENT_RECORD', {
 dwMousePosition: COORD,
 dwButtonState: DWORD,
 dwControlKeyState: DWORD,
 dwEventFlags: DWORD
});

var _WINDOW_BUFFER_SIZE_RECORD = new StructT('_WINDOW_BUFFER_SIZE_RECORD', {
 dwSize: COORD
});

var _MENU_EVENT_RECORD = new StructT('_MENU_EVENT_RECORD', {
 dwCommandId: UINT
});

var _FOCUS_EVENT_RECORD = new StructT('_FOCUS_EVENT_RECORD', {
 bSetFocus: BOOL
});

var _INPUT_RECORD = new StructT('_INPUT_RECORD', {
 EventType: WORD,
 Event: c:wincon.h@3273@S@_INPUT_RECORD@Ua
});

var _CHAR_INFO = new StructT('_CHAR_INFO', {
 Char: c:wincon.h@3958@S@_CHAR_INFO@Ua,
 Attributes: WORD
});

var _CONSOLE_SCREEN_BUFFER_INFO = new StructT('_CONSOLE_SCREEN_BUFFER_INFO', {
 dwSize: COORD,
 dwCursorPosition: COORD,
 wAttributes: WORD,
 srWindow: SMALL_RECT,
 dwMaximumWindowSize: COORD
});

var _CONSOLE_SCREEN_BUFFER_INFOEX = new StructT('_CONSOLE_SCREEN_BUFFER_INFOEX', {
 cbSize: ULONG,
 dwSize: COORD,
 dwCursorPosition: COORD,
 wAttributes: WORD,
 srWindow: SMALL_RECT,
 dwMaximumWindowSize: COORD,
 wPopupAttributes: WORD,
 bFullscreenSupported: BOOL,
 ColorTable: ARRAY(COLORREF, 16)
});

var _CONSOLE_CURSOR_INFO = new StructT('_CONSOLE_CURSOR_INFO', {
 dwSize: DWORD,
 bVisible: BOOL
});

var _CONSOLE_FONT_INFO = new StructT('_CONSOLE_FONT_INFO', {
 nFont: DWORD,
 dwFontSize: COORD
});

var _CONSOLE_FONT_INFOEX = new StructT('_CONSOLE_FONT_INFOEX', {
 cbSize: ULONG,
 nFont: DWORD,
 dwFontSize: COORD,
 FontFamily: UINT,
 FontWeight: UINT,
 FaceName: ARRAY(WCHAR, LF_FACESIZE)
});

var _CONSOLE_HISTORY_INFO = new StructT('_CONSOLE_HISTORY_INFO', {
 cbSize: UINT,
 HistoryBufferSize: UINT,
 NumberOfHistoryBuffers: UINT,
 dwFlags: DWORD
});

var _CONSOLE_SELECTION_INFO = new StructT('_CONSOLE_SELECTION_INFO', {
 dwFlags: DWORD,
 dwSelectionAnchor: COORD,
 srSelection: SMALL_RECT
});

var _CONSOLE_READCONSOLE_CONTROL = new StructT('_CONSOLE_READCONSOLE_CONTROL', {
 nLength: ULONG,
 nInitialChars: ULONG,
 dwCtrlWakeupMask: ULONG,
 dwControlKeyState: ULONG
});

var tagVS_FIXEDFILEINFO = new StructT('tagVS_FIXEDFILEINFO', {
 dwSignature: DWORD,
 dwStrucVersion: DWORD,
 dwFileVersionMS: DWORD,
 dwFileVersionLS: DWORD,
 dwProductVersionMS: DWORD,
 dwProductVersionLS: DWORD,
 dwFileFlagsMask: DWORD,
 dwFileFlags: DWORD,
 dwFileOS: DWORD,
 dwFileType: DWORD,
 dwFileSubtype: DWORD,
 dwFileDateMS: DWORD,
 dwFileDateLS: DWORD
});

var val_context = new StructT('val_context', {
 valuelen: int,
 value_context: LPVOID,
 val_buff_ptr: LPVOID
});

var PVALUE = new StructT('PVALUE', {
 pv_valuename: LPSTR,
 pv_valuelen: int,
 pv_value_context: LPVOID,
 pv_type: DWORD
});

var pvalueW = new StructT('pvalueW', {
 pv_valuename: LPWSTR,
 pv_valuelen: int,
 pv_value_context: LPVOID,
 pv_type: DWORD
});

var provider_info = new StructT('provider_info', {
 pi_R0_1val: PQUERYHANDLER,
 pi_R0_allvals: PQUERYHANDLER,
 pi_R3_1val: PQUERYHANDLER,
 pi_R3_allvals: PQUERYHANDLER,
 pi_flags: DWORD,
 pi_key_context: LPVOID
});

var VALENT = new StructT('VALENT', {
 ve_valuename: LPSTR,
 ve_valuelen: DWORD,
 ve_valueptr: DWORD_PTR,
 ve_type: DWORD
});

var value_entW = new StructT('value_entW', {
 ve_valuename: LPWSTR,
 ve_valuelen: DWORD,
 ve_valueptr: DWORD_PTR,
 ve_type: DWORD
});

var NETRESOURCE = new StructT('NETRESOURCE', {
 dwScope: DWORD,
 dwType: DWORD,
 dwDisplayType: DWORD,
 dwUsage: DWORD,
 lpLocalName: LPSTR,
 lpRemoteName: LPSTR,
 lpComment: LPSTR,
 lpProvider: LPSTR
});

var _NETRESOURCEW = new StructT('_NETRESOURCEW', {
 dwScope: DWORD,
 dwType: DWORD,
 dwDisplayType: DWORD,
 dwUsage: DWORD,
 lpLocalName: LPWSTR,
 lpRemoteName: LPWSTR,
 lpComment: LPWSTR,
 lpProvider: LPWSTR
});

var CONNECTDLGSTRUCT = new StructT('CONNECTDLGSTRUCT', {
 cbStructure: DWORD,
 hwndOwner: HWND,
 lpConnRes: LPNETRESOURCEA,
 dwFlags: DWORD,
 dwDevNum: DWORD
});

var _CONNECTDLGSTRUCTW = new StructT('_CONNECTDLGSTRUCTW', {
 cbStructure: DWORD,
 hwndOwner: HWND,
 lpConnRes: LPNETRESOURCEW,
 dwFlags: DWORD,
 dwDevNum: DWORD
});

var DISCDLGSTRUCT = new StructT('DISCDLGSTRUCT', {
 cbStructure: DWORD,
 hwndOwner: HWND,
 lpLocalName: LPSTR,
 lpRemoteName: LPSTR,
 dwFlags: DWORD
});

var _DISCDLGSTRUCTW = new StructT('_DISCDLGSTRUCTW', {
 cbStructure: DWORD,
 hwndOwner: HWND,
 lpLocalName: LPWSTR,
 lpRemoteName: LPWSTR,
 dwFlags: DWORD
});

var UNIVERSAL_NAME_INFO = new StructT('UNIVERSAL_NAME_INFO', {
 lpUniversalName: LPSTR
});

var _UNIVERSAL_NAME_INFOW = new StructT('_UNIVERSAL_NAME_INFOW', {
 lpUniversalName: LPWSTR
});

var REMOTE_NAME_INFO = new StructT('REMOTE_NAME_INFO', {
 lpUniversalName: LPSTR,
 lpConnectionName: LPSTR,
 lpRemainingPath: LPSTR
});

var _REMOTE_NAME_INFOW = new StructT('_REMOTE_NAME_INFOW', {
 lpUniversalName: LPWSTR,
 lpConnectionName: LPWSTR,
 lpRemainingPath: LPWSTR
});

var _NETINFOSTRUCT = new StructT('_NETINFOSTRUCT', {
 cbStructure: DWORD,
 dwProviderVersion: DWORD,
 dwStatus: DWORD,
 dwCharacteristics: DWORD,
 dwHandle: ULONG_PTR,
 wNetType: WORD,
 dwPrinters: DWORD,
 dwDrives: DWORD
});

var _NETCONNECTINFOSTRUCT = new StructT('_NETCONNECTINFOSTRUCT', {
 cbStructure: DWORD,
 dwFlags: DWORD,
 dwSpeed: DWORD,
 dwDelay: DWORD,
 dwOptDataSize: DWORD
});

var undefined = new StructT('undefined', {
 bAppReturnCode: ushort,
 reserved: ushort,
 fBusy: ushort,
 fAck: ushort
});

var undefined = new StructT('undefined', {
 reserved: ushort,
 fDeferUpd: ushort,
 fAckReq: ushort,
 cfFormat: short
});

var undefined = new StructT('undefined', {
 unused: ushort,
 fResponse: ushort,
 fRelease: ushort,
 reserved: ushort,
 fAckReq: ushort,
 cfFormat: short,
 Value: ARRAY(BYTE, 1)
});

var undefined = new StructT('undefined', {
 unused: ushort,
 fRelease: ushort,
 fReserved: ushort,
 cfFormat: short,
 Value: ARRAY(BYTE, 1)
});

var undefined = new StructT('undefined', {
 unused: ushort,
 fRelease: ushort,
 fDeferUpd: ushort,
 fAckReq: ushort,
 cfFormat: short
});

var undefined = new StructT('undefined', {
 unused: ushort,
 fAck: ushort,
 fRelease: ushort,
 fReserved: ushort,
 fAckReq: ushort,
 cfFormat: short,
 rgb: ARRAY(BYTE, 1)
});

var HCONVLIST__ = new StructT('HCONVLIST__', {
 unused: int
});

var HCONV__ = new StructT('HCONV__', {
 unused: int
});

var HSZ__ = new StructT('HSZ__', {
 unused: int
});

var HDDEDATA__ = new StructT('HDDEDATA__', {
 unused: int
});

var tagHSZPAIR = new StructT('tagHSZPAIR', {
 hszSvc: HSZ,
 hszTopic: HSZ
});

var tagCONVCONTEXT = new StructT('tagCONVCONTEXT', {
 cb: UINT,
 wFlags: UINT,
 wCountryID: UINT,
 iCodePage: int,
 dwLangID: DWORD,
 dwSecurity: DWORD,
 qos: SECURITY_QUALITY_OF_SERVICE
});

var tagCONVINFO = new StructT('tagCONVINFO', {
 cb: DWORD,
 hUser: DWORD_PTR,
 hConvPartner: HCONV,
 hszSvcPartner: HSZ,
 hszServiceReq: HSZ,
 hszTopic: HSZ,
 hszItem: HSZ,
 wFmt: UINT,
 wType: UINT,
 wStatus: UINT,
 wConvst: UINT,
 wLastError: UINT,
 hConvList: HCONVLIST,
 ConvCtxt: CONVCONTEXT,
 hwnd: HWND,
 hwndPartner: HWND
});

var tagDDEML_MSG_HOOK_DATA = new StructT('tagDDEML_MSG_HOOK_DATA', {
 uiLo: UINT_PTR,
 uiHi: UINT_PTR,
 cbData: DWORD,
 Data: ARRAY(DWORD, 8)
});

var tagMONMSGSTRUCT = new StructT('tagMONMSGSTRUCT', {
 cb: UINT,
 hwndTo: HWND,
 dwTime: DWORD,
 hTask: HANDLE,
 wMsg: UINT,
 wParam: WPARAM,
 lParam: LPARAM,
 dmhd: DDEML_MSG_HOOK_DATA
});

var tagMONCBSTRUCT = new StructT('tagMONCBSTRUCT', {
 cb: UINT,
 dwTime: DWORD,
 hTask: HANDLE,
 dwRet: DWORD,
 wType: UINT,
 wFmt: UINT,
 hConv: HCONV,
 hsz1: HSZ,
 hsz2: HSZ,
 hData: HDDEDATA,
 dwData1: ULONG_PTR,
 dwData2: ULONG_PTR,
 cc: CONVCONTEXT,
 cbData: DWORD,
 Data: ARRAY(DWORD, 8)
});

var MONHSZSTRUCT = new StructT('MONHSZSTRUCT', {
 cb: UINT,
 fsAction: BOOL,
 dwTime: DWORD,
 hsz: HSZ,
 hTask: HANDLE,
 str: ARRAY(CHAR, 1)
});

var tagMONHSZSTRUCTW = new StructT('tagMONHSZSTRUCTW', {
 cb: UINT,
 fsAction: BOOL,
 dwTime: DWORD,
 hsz: HSZ,
 hTask: HANDLE,
 str: ARRAY(WCHAR, 1)
});

var tagMONERRSTRUCT = new StructT('tagMONERRSTRUCT', {
 cb: UINT,
 wLastError: UINT,
 dwTime: DWORD,
 hTask: HANDLE
});

var tagMONLINKSTRUCT = new StructT('tagMONLINKSTRUCT', {
 cb: UINT,
 dwTime: DWORD,
 hTask: HANDLE,
 fEstablished: BOOL,
 fNoData: BOOL,
 hszSvc: HSZ,
 hszTopic: HSZ,
 hszItem: HSZ,
 wFmt: UINT,
 fServer: BOOL,
 hConvServer: HCONV,
 hConvClient: HCONV
});

var tagMONCONVSTRUCT = new StructT('tagMONCONVSTRUCT', {
 cb: UINT,
 fConnect: BOOL,
 dwTime: DWORD,
 hTask: HANDLE,
 hszSvc: HSZ,
 hszTopic: HSZ,
 hConvClient: HCONV,
 hConvServer: HCONV
});

var tagCRGB = new StructT('tagCRGB', {
 bRed: BYTE,
 bGreen: BYTE,
 bBlue: BYTE,
 bExtra: BYTE
});

var mmtime_tag = new StructT('mmtime_tag', {
 wType: UINT,
 u: c:mmsystem.h@3695@S@mmtime_tag@Ua
});

var undefined = new StructT('undefined', {
 hour: BYTE,
 min: BYTE,
 sec: BYTE,
 frame: BYTE,
 fps: BYTE,
 dummy: BYTE,
 pad: ARRAY(BYTE, 2)
});

var undefined = new StructT('undefined', {
 songptrpos: DWORD
});

var HDRVR__ = new StructT('HDRVR__', {
 unused: int
});

var DRVCONFIGINFOEX = new StructT('DRVCONFIGINFOEX', {
 dwDCISize: DWORD,
 lpszDCISectionName: LPCWSTR,
 lpszDCIAliasName: LPCWSTR,
 dnDevNode: DWORD
});

var tagDRVCONFIGINFO = new StructT('tagDRVCONFIGINFO', {
 dwDCISize: DWORD,
 lpszDCISectionName: LPCWSTR,
 lpszDCIAliasName: LPCWSTR
});

var HWAVE__ = new StructT('HWAVE__', {
 unused: int
});

var HWAVEIN__ = new StructT('HWAVEIN__', {
 unused: int
});

var HWAVEOUT__ = new StructT('HWAVEOUT__', {
 unused: int
});

var wavehdr_tag = new StructT('wavehdr_tag', {
 lpData: LPSTR,
 dwBufferLength: DWORD,
 dwBytesRecorded: DWORD,
 dwUser: DWORD_PTR,
 dwFlags: DWORD,
 dwLoops: DWORD,
 lpNext: wavehdr_tag.Δ,
 reserved: DWORD_PTR
});

var WAVEOUTCAPS = new StructT('WAVEOUTCAPS', {
 wMid: WORD,
 wPid: WORD,
 vDriverVersion: MMVERSION,
 szPname: ARRAY(CHAR, MAXPNAMELEN),
 dwFormats: DWORD,
 wChannels: WORD,
 wReserved1: WORD,
 dwSupport: DWORD
});

var tagWAVEOUTCAPSW = new StructT('tagWAVEOUTCAPSW', {
 wMid: WORD,
 wPid: WORD,
 vDriverVersion: MMVERSION,
 szPname: ARRAY(WCHAR, MAXPNAMELEN),
 dwFormats: DWORD,
 wChannels: WORD,
 wReserved1: WORD,
 dwSupport: DWORD
});

var WAVEOUTCAPS2 = new StructT('WAVEOUTCAPS2', {
 wMid: WORD,
 wPid: WORD,
 vDriverVersion: MMVERSION,
 szPname: ARRAY(CHAR, MAXPNAMELEN),
 dwFormats: DWORD,
 wChannels: WORD,
 wReserved1: WORD,
 dwSupport: DWORD,
 ManufacturerGuid: GUID,
 ProductGuid: GUID,
 NameGuid: GUID
});

var tagWAVEOUTCAPS2W = new StructT('tagWAVEOUTCAPS2W', {
 wMid: WORD,
 wPid: WORD,
 vDriverVersion: MMVERSION,
 szPname: ARRAY(WCHAR, MAXPNAMELEN),
 dwFormats: DWORD,
 wChannels: WORD,
 wReserved1: WORD,
 dwSupport: DWORD,
 ManufacturerGuid: GUID,
 ProductGuid: GUID,
 NameGuid: GUID
});

var WAVEINCAPS = new StructT('WAVEINCAPS', {
 wMid: WORD,
 wPid: WORD,
 vDriverVersion: MMVERSION,
 szPname: ARRAY(CHAR, MAXPNAMELEN),
 dwFormats: DWORD,
 wChannels: WORD,
 wReserved1: WORD
});

var tagWAVEINCAPSW = new StructT('tagWAVEINCAPSW', {
 wMid: WORD,
 wPid: WORD,
 vDriverVersion: MMVERSION,
 szPname: ARRAY(WCHAR, MAXPNAMELEN),
 dwFormats: DWORD,
 wChannels: WORD,
 wReserved1: WORD
});

var WAVEINCAPS2 = new StructT('WAVEINCAPS2', {
 wMid: WORD,
 wPid: WORD,
 vDriverVersion: MMVERSION,
 szPname: ARRAY(CHAR, MAXPNAMELEN),
 dwFormats: DWORD,
 wChannels: WORD,
 wReserved1: WORD,
 ManufacturerGuid: GUID,
 ProductGuid: GUID,
 NameGuid: GUID
});

var tagWAVEINCAPS2W = new StructT('tagWAVEINCAPS2W', {
 wMid: WORD,
 wPid: WORD,
 vDriverVersion: MMVERSION,
 szPname: ARRAY(WCHAR, MAXPNAMELEN),
 dwFormats: DWORD,
 wChannels: WORD,
 wReserved1: WORD,
 ManufacturerGuid: GUID,
 ProductGuid: GUID,
 NameGuid: GUID
});

var waveformat_tag = new StructT('waveformat_tag', {
 wFormatTag: WORD,
 nChannels: WORD,
 nSamplesPerSec: DWORD,
 nAvgBytesPerSec: DWORD,
 nBlockAlign: WORD
});

var pcmwaveformat_tag = new StructT('pcmwaveformat_tag', {
 wf: WAVEFORMAT,
 wBitsPerSample: WORD
});

var tWAVEFORMATEX = new StructT('tWAVEFORMATEX', {
 wFormatTag: WORD,
 nChannels: WORD,
 nSamplesPerSec: DWORD,
 nAvgBytesPerSec: DWORD,
 nBlockAlign: WORD,
 wBitsPerSample: WORD,
 cbSize: WORD
});

var HMIDI__ = new StructT('HMIDI__', {
 unused: int
});

var HMIDIIN__ = new StructT('HMIDIIN__', {
 unused: int
});

var HMIDIOUT__ = new StructT('HMIDIOUT__', {
 unused: int
});

var HMIDISTRM__ = new StructT('HMIDISTRM__', {
 unused: int
});

var MIDIOUTCAPS = new StructT('MIDIOUTCAPS', {
 wMid: WORD,
 wPid: WORD,
 vDriverVersion: MMVERSION,
 szPname: ARRAY(CHAR, MAXPNAMELEN),
 wTechnology: WORD,
 wVoices: WORD,
 wNotes: WORD,
 wChannelMask: WORD,
 dwSupport: DWORD
});

var tagMIDIOUTCAPSW = new StructT('tagMIDIOUTCAPSW', {
 wMid: WORD,
 wPid: WORD,
 vDriverVersion: MMVERSION,
 szPname: ARRAY(WCHAR, MAXPNAMELEN),
 wTechnology: WORD,
 wVoices: WORD,
 wNotes: WORD,
 wChannelMask: WORD,
 dwSupport: DWORD
});

var MIDIOUTCAPS2 = new StructT('MIDIOUTCAPS2', {
 wMid: WORD,
 wPid: WORD,
 vDriverVersion: MMVERSION,
 szPname: ARRAY(CHAR, MAXPNAMELEN),
 wTechnology: WORD,
 wVoices: WORD,
 wNotes: WORD,
 wChannelMask: WORD,
 dwSupport: DWORD,
 ManufacturerGuid: GUID,
 ProductGuid: GUID,
 NameGuid: GUID
});

var tagMIDIOUTCAPS2W = new StructT('tagMIDIOUTCAPS2W', {
 wMid: WORD,
 wPid: WORD,
 vDriverVersion: MMVERSION,
 szPname: ARRAY(WCHAR, MAXPNAMELEN),
 wTechnology: WORD,
 wVoices: WORD,
 wNotes: WORD,
 wChannelMask: WORD,
 dwSupport: DWORD,
 ManufacturerGuid: GUID,
 ProductGuid: GUID,
 NameGuid: GUID
});

var MIDIINCAPS = new StructT('MIDIINCAPS', {
 wMid: WORD,
 wPid: WORD,
 vDriverVersion: MMVERSION,
 szPname: ARRAY(CHAR, MAXPNAMELEN),
 dwSupport: DWORD
});

var tagMIDIINCAPSW = new StructT('tagMIDIINCAPSW', {
 wMid: WORD,
 wPid: WORD,
 vDriverVersion: MMVERSION,
 szPname: ARRAY(WCHAR, MAXPNAMELEN),
 dwSupport: DWORD
});

var MIDIINCAPS2 = new StructT('MIDIINCAPS2', {
 wMid: WORD,
 wPid: WORD,
 vDriverVersion: MMVERSION,
 szPname: ARRAY(CHAR, MAXPNAMELEN),
 dwSupport: DWORD,
 ManufacturerGuid: GUID,
 ProductGuid: GUID,
 NameGuid: GUID
});

var tagMIDIINCAPS2W = new StructT('tagMIDIINCAPS2W', {
 wMid: WORD,
 wPid: WORD,
 vDriverVersion: MMVERSION,
 szPname: ARRAY(WCHAR, MAXPNAMELEN),
 dwSupport: DWORD,
 ManufacturerGuid: GUID,
 ProductGuid: GUID,
 NameGuid: GUID
});

var midihdr_tag = new StructT('midihdr_tag', {
 lpData: LPSTR,
 dwBufferLength: DWORD,
 dwBytesRecorded: DWORD,
 dwUser: DWORD_PTR,
 dwFlags: DWORD,
 lpNext: midihdr_tag.Δ,
 reserved: DWORD_PTR,
 dwOffset: DWORD,
 dwReserved: ARRAY(DWORD_PTR, 8)
});

var midievent_tag = new StructT('midievent_tag', {
 dwDeltaTime: DWORD,
 dwStreamID: DWORD,
 dwEvent: DWORD,
 dwParms: ARRAY(DWORD, 1)
});

var midistrmbuffver_tag = new StructT('midistrmbuffver_tag', {
 dwVersion: DWORD,
 dwMid: DWORD,
 dwOEMVersion: DWORD
});

var midiproptimediv_tag = new StructT('midiproptimediv_tag', {
 cbStruct: DWORD,
 dwTimeDiv: DWORD
});

var midiproptempo_tag = new StructT('midiproptempo_tag', {
 cbStruct: DWORD,
 dwTempo: DWORD
});

var AUXCAPS = new StructT('AUXCAPS', {
 wMid: WORD,
 wPid: WORD,
 vDriverVersion: MMVERSION,
 szPname: ARRAY(CHAR, MAXPNAMELEN),
 wTechnology: WORD,
 wReserved1: WORD,
 dwSupport: DWORD
});

var tagAUXCAPSW = new StructT('tagAUXCAPSW', {
 wMid: WORD,
 wPid: WORD,
 vDriverVersion: MMVERSION,
 szPname: ARRAY(WCHAR, MAXPNAMELEN),
 wTechnology: WORD,
 wReserved1: WORD,
 dwSupport: DWORD
});

var AUXCAPS2 = new StructT('AUXCAPS2', {
 wMid: WORD,
 wPid: WORD,
 vDriverVersion: MMVERSION,
 szPname: ARRAY(CHAR, MAXPNAMELEN),
 wTechnology: WORD,
 wReserved1: WORD,
 dwSupport: DWORD,
 ManufacturerGuid: GUID,
 ProductGuid: GUID,
 NameGuid: GUID
});

var tagAUXCAPS2W = new StructT('tagAUXCAPS2W', {
 wMid: WORD,
 wPid: WORD,
 vDriverVersion: MMVERSION,
 szPname: ARRAY(WCHAR, MAXPNAMELEN),
 wTechnology: WORD,
 wReserved1: WORD,
 dwSupport: DWORD,
 ManufacturerGuid: GUID,
 ProductGuid: GUID,
 NameGuid: GUID
});

var HMIXEROBJ__ = new StructT('HMIXEROBJ__', {
 unused: int
});

var HMIXER__ = new StructT('HMIXER__', {
 unused: int
});

var MIXERCAPS = new StructT('MIXERCAPS', {
 wMid: WORD,
 wPid: WORD,
 vDriverVersion: MMVERSION,
 szPname: ARRAY(CHAR, MAXPNAMELEN),
 fdwSupport: DWORD,
 cDestinations: DWORD
});

var tagMIXERCAPSW = new StructT('tagMIXERCAPSW', {
 wMid: WORD,
 wPid: WORD,
 vDriverVersion: MMVERSION,
 szPname: ARRAY(WCHAR, MAXPNAMELEN),
 fdwSupport: DWORD,
 cDestinations: DWORD
});

var MIXERCAPS2 = new StructT('MIXERCAPS2', {
 wMid: WORD,
 wPid: WORD,
 vDriverVersion: MMVERSION,
 szPname: ARRAY(CHAR, MAXPNAMELEN),
 fdwSupport: DWORD,
 cDestinations: DWORD,
 ManufacturerGuid: GUID,
 ProductGuid: GUID,
 NameGuid: GUID
});

var tagMIXERCAPS2W = new StructT('tagMIXERCAPS2W', {
 wMid: WORD,
 wPid: WORD,
 vDriverVersion: MMVERSION,
 szPname: ARRAY(WCHAR, MAXPNAMELEN),
 fdwSupport: DWORD,
 cDestinations: DWORD,
 ManufacturerGuid: GUID,
 ProductGuid: GUID,
 NameGuid: GUID
});

var MIXERLINE = new StructT('MIXERLINE', {
 cbStruct: DWORD,
 dwDestination: DWORD,
 dwSource: DWORD,
 dwLineID: DWORD,
 fdwLine: DWORD,
 dwUser: DWORD_PTR,
 dwComponentType: DWORD,
 cChannels: DWORD,
 cConnections: DWORD,
 cControls: DWORD,
 szShortName: ARRAY(CHAR, MIXER_SHORT_NAME_CHARS),
 szName: ARRAY(CHAR, MIXER_LONG_NAME_CHARS),
 Target: 
});

var undefined = new StructT('undefined', {
 dwType: DWORD,
 dwDeviceID: DWORD,
 wMid: WORD,
 wPid: WORD,
 vDriverVersion: MMVERSION,
 szPname: ARRAY(CHAR, MAXPNAMELEN)
});

var tagMIXERLINEW = new StructT('tagMIXERLINEW', {
 cbStruct: DWORD,
 dwDestination: DWORD,
 dwSource: DWORD,
 dwLineID: DWORD,
 fdwLine: DWORD,
 dwUser: DWORD_PTR,
 dwComponentType: DWORD,
 cChannels: DWORD,
 cConnections: DWORD,
 cControls: DWORD,
 szShortName: ARRAY(WCHAR, MIXER_SHORT_NAME_CHARS),
 szName: ARRAY(WCHAR, MIXER_LONG_NAME_CHARS),
 Target: 
});

var undefined = new StructT('undefined', {
 dwType: DWORD,
 dwDeviceID: DWORD,
 wMid: WORD,
 wPid: WORD,
 vDriverVersion: MMVERSION,
 szPname: ARRAY(WCHAR, MAXPNAMELEN)
});

var MIXERCONTROL = new StructT('MIXERCONTROL', {
 cbStruct: DWORD,
 dwControlID: DWORD,
 dwControlType: DWORD,
 fdwControl: DWORD,
 cMultipleItems: DWORD,
 szShortName: ARRAY(CHAR, MIXER_SHORT_NAME_CHARS),
 szName: ARRAY(CHAR, MIXER_LONG_NAME_CHARS),
 Bounds: c:mmsystem.h@81017@S@tagMIXERCONTROLA@Ua,
 Metrics: c:mmsystem.h@81494@S@tagMIXERCONTROLA@Ua
});

var undefined = new StructT('undefined', {
 lMinimum: LONG,
 lMaximum: LONG
});

var undefined = new StructT('undefined', {
 dwMinimum: DWORD,
 dwMaximum: DWORD
});

var tagMIXERCONTROLW = new StructT('tagMIXERCONTROLW', {
 cbStruct: DWORD,
 dwControlID: DWORD,
 dwControlType: DWORD,
 fdwControl: DWORD,
 cMultipleItems: DWORD,
 szShortName: ARRAY(WCHAR, MIXER_SHORT_NAME_CHARS),
 szName: ARRAY(WCHAR, MIXER_LONG_NAME_CHARS),
 Bounds: c:mmsystem.h@82346@S@tagMIXERCONTROLW@Ua,
 Metrics: c:mmsystem.h@82823@S@tagMIXERCONTROLW@Ua
});

var undefined = new StructT('undefined', {
 lMinimum: LONG,
 lMaximum: LONG
});

var undefined = new StructT('undefined', {
 dwMinimum: DWORD,
 dwMaximum: DWORD
});

var MIXERLINECONTROLS = new StructT('MIXERLINECONTROLS', {
 cbStruct: DWORD,
 dwLineID: DWORD,
 cControls: DWORD,
 cbmxctrl: DWORD,
 pamxctrl: LPMIXERCONTROLA
});

var tagMIXERLINECONTROLSW = new StructT('tagMIXERLINECONTROLSW', {
 cbStruct: DWORD,
 dwLineID: DWORD,
 cControls: DWORD,
 cbmxctrl: DWORD,
 pamxctrl: LPMIXERCONTROLW
});

var tMIXERCONTROLDETAILS = new StructT('tMIXERCONTROLDETAILS', {
 cbStruct: DWORD,
 dwControlID: DWORD,
 cChannels: DWORD,
 cbDetails: DWORD,
 paDetails: LPVOID
});

var MIXERCONTROLDETAILS_LISTTEXT = new StructT('MIXERCONTROLDETAILS_LISTTEXT', {
 dwParam1: DWORD,
 dwParam2: DWORD,
 szName: ARRAY(CHAR, MIXER_LONG_NAME_CHARS)
});

var tagMIXERCONTROLDETAILS_LISTTEXTW = new StructT('tagMIXERCONTROLDETAILS_LISTTEXTW', {
 dwParam1: DWORD,
 dwParam2: DWORD,
 szName: ARRAY(WCHAR, MIXER_LONG_NAME_CHARS)
});

var tMIXERCONTROLDETAILS_BOOLEAN = new StructT('tMIXERCONTROLDETAILS_BOOLEAN', {
 fValue: LONG
});

var tMIXERCONTROLDETAILS_SIGNED = new StructT('tMIXERCONTROLDETAILS_SIGNED', {
 lValue: LONG
});

var tMIXERCONTROLDETAILS_UNSIGNED = new StructT('tMIXERCONTROLDETAILS_UNSIGNED', {
 dwValue: DWORD
});

var timecaps_tag = new StructT('timecaps_tag', {
 wPeriodMin: UINT,
 wPeriodMax: UINT
});

var JOYCAPS = new StructT('JOYCAPS', {
 wMid: WORD,
 wPid: WORD,
 szPname: ARRAY(CHAR, MAXPNAMELEN),
 wXmin: UINT,
 wXmax: UINT,
 wYmin: UINT,
 wYmax: UINT,
 wZmin: UINT,
 wZmax: UINT,
 wNumButtons: UINT,
 wPeriodMin: UINT,
 wPeriodMax: UINT,
 wRmin: UINT,
 wRmax: UINT,
 wUmin: UINT,
 wUmax: UINT,
 wVmin: UINT,
 wVmax: UINT,
 wCaps: UINT,
 wMaxAxes: UINT,
 wNumAxes: UINT,
 wMaxButtons: UINT,
 szRegKey: ARRAY(CHAR, MAXPNAMELEN),
 szOEMVxD: ARRAY(CHAR, MAX_JOYSTICKOEMVXDNAME)
});

var tagJOYCAPSW = new StructT('tagJOYCAPSW', {
 wMid: WORD,
 wPid: WORD,
 szPname: ARRAY(WCHAR, MAXPNAMELEN),
 wXmin: UINT,
 wXmax: UINT,
 wYmin: UINT,
 wYmax: UINT,
 wZmin: UINT,
 wZmax: UINT,
 wNumButtons: UINT,
 wPeriodMin: UINT,
 wPeriodMax: UINT,
 wRmin: UINT,
 wRmax: UINT,
 wUmin: UINT,
 wUmax: UINT,
 wVmin: UINT,
 wVmax: UINT,
 wCaps: UINT,
 wMaxAxes: UINT,
 wNumAxes: UINT,
 wMaxButtons: UINT,
 szRegKey: ARRAY(WCHAR, MAXPNAMELEN),
 szOEMVxD: ARRAY(WCHAR, MAX_JOYSTICKOEMVXDNAME)
});

var JOYCAPS2 = new StructT('JOYCAPS2', {
 wMid: WORD,
 wPid: WORD,
 szPname: ARRAY(CHAR, MAXPNAMELEN),
 wXmin: UINT,
 wXmax: UINT,
 wYmin: UINT,
 wYmax: UINT,
 wZmin: UINT,
 wZmax: UINT,
 wNumButtons: UINT,
 wPeriodMin: UINT,
 wPeriodMax: UINT,
 wRmin: UINT,
 wRmax: UINT,
 wUmin: UINT,
 wUmax: UINT,
 wVmin: UINT,
 wVmax: UINT,
 wCaps: UINT,
 wMaxAxes: UINT,
 wNumAxes: UINT,
 wMaxButtons: UINT,
 szRegKey: ARRAY(CHAR, MAXPNAMELEN),
 szOEMVxD: ARRAY(CHAR, MAX_JOYSTICKOEMVXDNAME),
 ManufacturerGuid: GUID,
 ProductGuid: GUID,
 NameGuid: GUID
});

var tagJOYCAPS2W = new StructT('tagJOYCAPS2W', {
 wMid: WORD,
 wPid: WORD,
 szPname: ARRAY(WCHAR, MAXPNAMELEN),
 wXmin: UINT,
 wXmax: UINT,
 wYmin: UINT,
 wYmax: UINT,
 wZmin: UINT,
 wZmax: UINT,
 wNumButtons: UINT,
 wPeriodMin: UINT,
 wPeriodMax: UINT,
 wRmin: UINT,
 wRmax: UINT,
 wUmin: UINT,
 wUmax: UINT,
 wVmin: UINT,
 wVmax: UINT,
 wCaps: UINT,
 wMaxAxes: UINT,
 wNumAxes: UINT,
 wMaxButtons: UINT,
 szRegKey: ARRAY(WCHAR, MAXPNAMELEN),
 szOEMVxD: ARRAY(WCHAR, MAX_JOYSTICKOEMVXDNAME),
 ManufacturerGuid: GUID,
 ProductGuid: GUID,
 NameGuid: GUID
});

var joyinfo_tag = new StructT('joyinfo_tag', {
 wXpos: UINT,
 wYpos: UINT,
 wZpos: UINT,
 wButtons: UINT
});

var joyinfoex_tag = new StructT('joyinfoex_tag', {
 dwSize: DWORD,
 dwFlags: DWORD,
 dwXpos: DWORD,
 dwYpos: DWORD,
 dwZpos: DWORD,
 dwRpos: DWORD,
 dwUpos: DWORD,
 dwVpos: DWORD,
 dwButtons: DWORD,
 dwButtonNumber: DWORD,
 dwPOV: DWORD,
 dwReserved1: DWORD,
 dwReserved2: DWORD
});

var HMMIO__ = new StructT('HMMIO__', {
 unused: int
});

var _MMIOINFO = new StructT('_MMIOINFO', {
 dwFlags: DWORD,
 fccIOProc: FOURCC,
 pIOProc: LPMMIOPROC,
 wErrorRet: UINT,
 htask: HTASK,
 cchBuffer: LONG,
 pchBuffer: HPSTR,
 pchNext: HPSTR,
 pchEndRead: HPSTR,
 pchEndWrite: HPSTR,
 lBufOffset: LONG,
 lDiskOffset: LONG,
 adwInfo: ARRAY(DWORD, 3),
 dwReserved1: DWORD,
 dwReserved2: DWORD,
 hmmio: HMMIO
});

var _MMCKINFO = new StructT('_MMCKINFO', {
 ckid: FOURCC,
 cksize: DWORD,
 fccType: FOURCC,
 dwDataOffset: DWORD,
 dwFlags: DWORD
});

var tagMCI_GENERIC_PARMS = new StructT('tagMCI_GENERIC_PARMS', {
 dwCallback: DWORD_PTR
});

var MCI_OPEN_PARMS = new StructT('MCI_OPEN_PARMS', {
 dwCallback: DWORD_PTR,
 wDeviceID: MCIDEVICEID,
 lpstrDeviceType: LPCSTR,
 lpstrElementName: LPCSTR,
 lpstrAlias: LPCSTR
});

var tagMCI_OPEN_PARMSW = new StructT('tagMCI_OPEN_PARMSW', {
 dwCallback: DWORD_PTR,
 wDeviceID: MCIDEVICEID,
 lpstrDeviceType: LPCWSTR,
 lpstrElementName: LPCWSTR,
 lpstrAlias: LPCWSTR
});

var tagMCI_PLAY_PARMS = new StructT('tagMCI_PLAY_PARMS', {
 dwCallback: DWORD_PTR,
 dwFrom: DWORD,
 dwTo: DWORD
});

var tagMCI_SEEK_PARMS = new StructT('tagMCI_SEEK_PARMS', {
 dwCallback: DWORD_PTR,
 dwTo: DWORD
});

var tagMCI_STATUS_PARMS = new StructT('tagMCI_STATUS_PARMS', {
 dwCallback: DWORD_PTR,
 dwReturn: DWORD_PTR,
 dwItem: DWORD,
 dwTrack: DWORD
});

var MCI_INFO_PARMS = new StructT('MCI_INFO_PARMS', {
 dwCallback: DWORD_PTR,
 lpstrReturn: LPSTR,
 dwRetSize: DWORD
});

var tagMCI_INFO_PARMSW = new StructT('tagMCI_INFO_PARMSW', {
 dwCallback: DWORD_PTR,
 lpstrReturn: LPWSTR,
 dwRetSize: DWORD
});

var tagMCI_GETDEVCAPS_PARMS = new StructT('tagMCI_GETDEVCAPS_PARMS', {
 dwCallback: DWORD_PTR,
 dwReturn: DWORD,
 dwItem: DWORD
});

var MCI_SYSINFO_PARMS = new StructT('MCI_SYSINFO_PARMS', {
 dwCallback: DWORD_PTR,
 lpstrReturn: LPSTR,
 dwRetSize: DWORD,
 dwNumber: DWORD,
 wDeviceType: UINT
});

var tagMCI_SYSINFO_PARMSW = new StructT('tagMCI_SYSINFO_PARMSW', {
 dwCallback: DWORD_PTR,
 lpstrReturn: LPWSTR,
 dwRetSize: DWORD,
 dwNumber: DWORD,
 wDeviceType: UINT
});

var tagMCI_SET_PARMS = new StructT('tagMCI_SET_PARMS', {
 dwCallback: DWORD_PTR,
 dwTimeFormat: DWORD,
 dwAudio: DWORD
});

var tagMCI_BREAK_PARMS = new StructT('tagMCI_BREAK_PARMS', {
 dwCallback: DWORD_PTR,
 nVirtKey: int,
 hwndBreak: HWND
});

var MCI_SAVE_PARMS = new StructT('MCI_SAVE_PARMS', {
 dwCallback: DWORD_PTR,
 lpfilename: LPCSTR
});

var tagMCI_SAVE_PARMSW = new StructT('tagMCI_SAVE_PARMSW', {
 dwCallback: DWORD_PTR,
 lpfilename: LPCWSTR
});

var MCI_LOAD_PARMS = new StructT('MCI_LOAD_PARMS', {
 dwCallback: DWORD_PTR,
 lpfilename: LPCSTR
});

var tagMCI_LOAD_PARMSW = new StructT('tagMCI_LOAD_PARMSW', {
 dwCallback: DWORD_PTR,
 lpfilename: LPCWSTR
});

var tagMCI_RECORD_PARMS = new StructT('tagMCI_RECORD_PARMS', {
 dwCallback: DWORD_PTR,
 dwFrom: DWORD,
 dwTo: DWORD
});

var tagMCI_VD_PLAY_PARMS = new StructT('tagMCI_VD_PLAY_PARMS', {
 dwCallback: DWORD_PTR,
 dwFrom: DWORD,
 dwTo: DWORD,
 dwSpeed: DWORD
});

var tagMCI_VD_STEP_PARMS = new StructT('tagMCI_VD_STEP_PARMS', {
 dwCallback: DWORD_PTR,
 dwFrames: DWORD
});

var MCI_VD_ESCAPE_PARMS = new StructT('MCI_VD_ESCAPE_PARMS', {
 dwCallback: DWORD_PTR,
 lpstrCommand: LPCSTR
});

var tagMCI_VD_ESCAPE_PARMSW = new StructT('tagMCI_VD_ESCAPE_PARMSW', {
 dwCallback: DWORD_PTR,
 lpstrCommand: LPCWSTR
});

var MCI_WAVE_OPEN_PARMS = new StructT('MCI_WAVE_OPEN_PARMS', {
 dwCallback: DWORD_PTR,
 wDeviceID: MCIDEVICEID,
 lpstrDeviceType: LPCSTR,
 lpstrElementName: LPCSTR,
 lpstrAlias: LPCSTR,
 dwBufferSeconds: DWORD
});

var tagMCI_WAVE_OPEN_PARMSW = new StructT('tagMCI_WAVE_OPEN_PARMSW', {
 dwCallback: DWORD_PTR,
 wDeviceID: MCIDEVICEID,
 lpstrDeviceType: LPCWSTR,
 lpstrElementName: LPCWSTR,
 lpstrAlias: LPCWSTR,
 dwBufferSeconds: DWORD
});

var tagMCI_WAVE_DELETE_PARMS = new StructT('tagMCI_WAVE_DELETE_PARMS', {
 dwCallback: DWORD_PTR,
 dwFrom: DWORD,
 dwTo: DWORD
});

var tagMCI_WAVE_SET_PARMS = new StructT('tagMCI_WAVE_SET_PARMS', {
 dwCallback: DWORD_PTR,
 dwTimeFormat: DWORD,
 dwAudio: DWORD,
 wInput: UINT,
 wOutput: UINT,
 wFormatTag: WORD,
 wReserved2: WORD,
 nChannels: WORD,
 wReserved3: WORD,
 nSamplesPerSec: DWORD,
 nAvgBytesPerSec: DWORD,
 nBlockAlign: WORD,
 wReserved4: WORD,
 wBitsPerSample: WORD,
 wReserved5: WORD
});

var tagMCI_SEQ_SET_PARMS = new StructT('tagMCI_SEQ_SET_PARMS', {
 dwCallback: DWORD_PTR,
 dwTimeFormat: DWORD,
 dwAudio: DWORD,
 dwTempo: DWORD,
 dwPort: DWORD,
 dwSlave: DWORD,
 dwMaster: DWORD,
 dwOffset: DWORD
});

var MCI_ANIM_OPEN_PARMS = new StructT('MCI_ANIM_OPEN_PARMS', {
 dwCallback: DWORD_PTR,
 wDeviceID: MCIDEVICEID,
 lpstrDeviceType: LPCSTR,
 lpstrElementName: LPCSTR,
 lpstrAlias: LPCSTR,
 dwStyle: DWORD,
 hWndParent: HWND
});

var tagMCI_ANIM_OPEN_PARMSW = new StructT('tagMCI_ANIM_OPEN_PARMSW', {
 dwCallback: DWORD_PTR,
 wDeviceID: MCIDEVICEID,
 lpstrDeviceType: LPCWSTR,
 lpstrElementName: LPCWSTR,
 lpstrAlias: LPCWSTR,
 dwStyle: DWORD,
 hWndParent: HWND
});

var tagMCI_ANIM_PLAY_PARMS = new StructT('tagMCI_ANIM_PLAY_PARMS', {
 dwCallback: DWORD_PTR,
 dwFrom: DWORD,
 dwTo: DWORD,
 dwSpeed: DWORD
});

var tagMCI_ANIM_STEP_PARMS = new StructT('tagMCI_ANIM_STEP_PARMS', {
 dwCallback: DWORD_PTR,
 dwFrames: DWORD
});

var MCI_ANIM_WINDOW_PARMS = new StructT('MCI_ANIM_WINDOW_PARMS', {
 dwCallback: DWORD_PTR,
 hWnd: HWND,
 nCmdShow: UINT,
 lpstrText: LPCSTR
});

var tagMCI_ANIM_WINDOW_PARMSW = new StructT('tagMCI_ANIM_WINDOW_PARMSW', {
 dwCallback: DWORD_PTR,
 hWnd: HWND,
 nCmdShow: UINT,
 lpstrText: LPCWSTR
});

var tagMCI_ANIM_RECT_PARMS = new StructT('tagMCI_ANIM_RECT_PARMS', {
 dwCallback: DWORD_PTR,
 rc: RECT
});

var tagMCI_ANIM_UPDATE_PARMS = new StructT('tagMCI_ANIM_UPDATE_PARMS', {
 dwCallback: DWORD_PTR,
 rc: RECT,
 hDC: HDC
});

var MCI_OVLY_OPEN_PARMS = new StructT('MCI_OVLY_OPEN_PARMS', {
 dwCallback: DWORD_PTR,
 wDeviceID: MCIDEVICEID,
 lpstrDeviceType: LPCSTR,
 lpstrElementName: LPCSTR,
 lpstrAlias: LPCSTR,
 dwStyle: DWORD,
 hWndParent: HWND
});

var tagMCI_OVLY_OPEN_PARMSW = new StructT('tagMCI_OVLY_OPEN_PARMSW', {
 dwCallback: DWORD_PTR,
 wDeviceID: MCIDEVICEID,
 lpstrDeviceType: LPCWSTR,
 lpstrElementName: LPCWSTR,
 lpstrAlias: LPCWSTR,
 dwStyle: DWORD,
 hWndParent: HWND
});

var MCI_OVLY_WINDOW_PARMS = new StructT('MCI_OVLY_WINDOW_PARMS', {
 dwCallback: DWORD_PTR,
 hWnd: HWND,
 nCmdShow: UINT,
 lpstrText: LPCSTR
});

var tagMCI_OVLY_WINDOW_PARMSW = new StructT('tagMCI_OVLY_WINDOW_PARMSW', {
 dwCallback: DWORD_PTR,
 hWnd: HWND,
 nCmdShow: UINT,
 lpstrText: LPCWSTR
});

var tagMCI_OVLY_RECT_PARMS = new StructT('tagMCI_OVLY_RECT_PARMS', {
 dwCallback: DWORD_PTR,
 rc: RECT
});

var MCI_OVLY_SAVE_PARMS = new StructT('MCI_OVLY_SAVE_PARMS', {
 dwCallback: DWORD_PTR,
 lpfilename: LPCSTR,
 rc: RECT
});

var tagMCI_OVLY_SAVE_PARMSW = new StructT('tagMCI_OVLY_SAVE_PARMSW', {
 dwCallback: DWORD_PTR,
 lpfilename: LPCWSTR,
 rc: RECT
});

var MCI_OVLY_LOAD_PARMS = new StructT('MCI_OVLY_LOAD_PARMS', {
 dwCallback: DWORD_PTR,
 lpfilename: LPCSTR,
 rc: RECT
});

var tagMCI_OVLY_LOAD_PARMSW = new StructT('tagMCI_OVLY_LOAD_PARMSW', {
 dwCallback: DWORD_PTR,
 lpfilename: LPCWSTR,
 rc: RECT
});

var _NCB = new StructT('_NCB', {
 ncb_command: UCHAR,
 ncb_retcode: UCHAR,
 ncb_lsn: UCHAR,
 ncb_num: UCHAR,
 ncb_buffer: PUCHAR,
 ncb_length: WORD,
 ncb_callname: ARRAY(UCHAR, NCBNAMSZ),
 ncb_name: ARRAY(UCHAR, NCBNAMSZ),
 ncb_rto: UCHAR,
 ncb_sto: UCHAR,
 ncb_post: UNEXPOSED.Δ,
 ncb_lana_num: UCHAR,
 ncb_cmd_cplt: UCHAR,
 ncb_reserve: ARRAY(UCHAR, 10),
 ncb_event: HANDLE
});

var _ADAPTER_STATUS = new StructT('_ADAPTER_STATUS', {
 adapter_address: ARRAY(UCHAR, 6),
 rev_major: UCHAR,
 reserved0: UCHAR,
 adapter_type: UCHAR,
 rev_minor: UCHAR,
 duration: WORD,
 frmr_recv: WORD,
 frmr_xmit: WORD,
 iframe_recv_err: WORD,
 xmit_aborts: WORD,
 xmit_success: DWORD,
 recv_success: DWORD,
 iframe_xmit_err: WORD,
 recv_buff_unavail: WORD,
 t1_timeouts: WORD,
 ti_timeouts: WORD,
 reserved1: DWORD,
 free_ncbs: WORD,
 max_cfg_ncbs: WORD,
 max_ncbs: WORD,
 xmit_buf_unavail: WORD,
 max_dgram_size: WORD,
 pending_sess: WORD,
 max_cfg_sess: WORD,
 max_sess: WORD,
 max_sess_pkt_size: WORD,
 name_count: WORD
});

var _NAME_BUFFER = new StructT('_NAME_BUFFER', {
 name: ARRAY(UCHAR, NCBNAMSZ),
 name_num: UCHAR,
 name_flags: UCHAR
});

var _SESSION_HEADER = new StructT('_SESSION_HEADER', {
 sess_name: UCHAR,
 num_sess: UCHAR,
 rcv_dg_outstanding: UCHAR,
 rcv_any_outstanding: UCHAR
});

var _SESSION_BUFFER = new StructT('_SESSION_BUFFER', {
 lsn: UCHAR,
 state: UCHAR,
 local_name: ARRAY(UCHAR, NCBNAMSZ),
 remote_name: ARRAY(UCHAR, NCBNAMSZ),
 rcvs_outstanding: UCHAR,
 sends_outstanding: UCHAR
});

var _LANA_ENUM = new StructT('_LANA_ENUM', {
 length: UCHAR,
 lana: ARRAY(UCHAR, undefined)
});

var _FIND_NAME_HEADER = new StructT('_FIND_NAME_HEADER', {
 node_count: WORD,
 reserved: UCHAR,
 unique_group: UCHAR
});

var _FIND_NAME_BUFFER = new StructT('_FIND_NAME_BUFFER', {
 length: UCHAR,
 access_control: UCHAR,
 frame_control: UCHAR,
 destination_addr: ARRAY(UCHAR, 6),
 source_addr: ARRAY(UCHAR, 6),
 routing_info: ARRAY(UCHAR, 18)
});

var _ACTION_HEADER = new StructT('_ACTION_HEADER', {
 transport_id: ULONG,
 action_code: USHORT,
 reserved: USHORT
});

var _RPC_BINDING_VECTOR = new StructT('_RPC_BINDING_VECTOR', {
 Count: ulong,
 BindingH: ARRAY(RPC_BINDING_HANDLE, 1)
});

var _UUID_VECTOR = new StructT('_UUID_VECTOR', {
 Count: ulong,
 Uuid: ARRAY(UUID, 1)
});

var _RPC_IF_ID = new StructT('_RPC_IF_ID', {
 Uuid: UUID,
 VersMajor: ushort,
 VersMinor: ushort
});

var _RPC_PROTSEQ_VECTORA = new StructT('_RPC_PROTSEQ_VECTORA', {
 Count: uint,
 Protseq: ARRAY(undefined, 1)
});

var _RPC_PROTSEQ_VECTORW = new StructT('_RPC_PROTSEQ_VECTORW', {
 Count: uint,
 Protseq: ARRAY(undefined, 1)
});

var _RPC_POLICY = new StructT('_RPC_POLICY', {
 Length: uint,
 EndpointFlags: ulong,
 NICFlags: ulong
});

var undefined = new StructT('undefined', {
 Count: uint,
 Stats: ARRAY(undefined, 1)
});

var undefined = new StructT('undefined', {
 Count: ulong,
 IfId: ARRAY(RPC_IF_ID, 1)
});

var _RPC_SECURITY_QOS = new StructT('_RPC_SECURITY_QOS', {
 Version: ulong,
 Capabilities: ulong,
 IdentityTracking: ulong,
 ImpersonationType: ulong
});

var _SEC_WINNT_AUTH_IDENTITY_W = new StructT('_SEC_WINNT_AUTH_IDENTITY_W', {
 User: ushort.Δ,
 UserLength: ulong,
 Domain: ushort.Δ,
 DomainLength: ulong,
 Password: ushort.Δ,
 PasswordLength: ulong,
 Flags: ulong
});

var _SEC_WINNT_AUTH_IDENTITY_A = new StructT('_SEC_WINNT_AUTH_IDENTITY_A', {
 User: uchar.Δ,
 UserLength: ulong,
 Domain: uchar.Δ,
 DomainLength: ulong,
 Password: uchar.Δ,
 PasswordLength: ulong,
 Flags: ulong
});

var _RPC_HTTP_TRANSPORT_CREDENTIALS_W = new StructT('_RPC_HTTP_TRANSPORT_CREDENTIALS_W', {
 TransportCredentials: uint.Δ,
 Flags: ulong,
 AuthenticationTarget: ulong,
 NumberOfAuthnSchemes: ulong,
 AuthnSchemes: ulong.Δ,
 ServerCertificateSubject: ushort.Δ
});

var _RPC_HTTP_TRANSPORT_CREDENTIALS_A = new StructT('_RPC_HTTP_TRANSPORT_CREDENTIALS_A', {
 TransportCredentials: uint.Δ,
 Flags: ulong,
 AuthenticationTarget: ulong,
 NumberOfAuthnSchemes: ulong,
 AuthnSchemes: ulong.Δ,
 ServerCertificateSubject: uchar.Δ
});

var _RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W = new StructT('_RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W', {
 TransportCredentials: uint.Δ,
 Flags: ulong,
 AuthenticationTarget: ulong,
 NumberOfAuthnSchemes: ulong,
 AuthnSchemes: ulong.Δ,
 ServerCertificateSubject: ushort.Δ,
 ProxyCredentials: uint.Δ,
 NumberOfProxyAuthnSchemes: ulong,
 ProxyAuthnSchemes: ulong.Δ
});

var _RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A = new StructT('_RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A', {
 TransportCredentials: uint.Δ,
 Flags: ulong,
 AuthenticationTarget: ulong,
 NumberOfAuthnSchemes: ulong,
 AuthnSchemes: ulong.Δ,
 ServerCertificateSubject: uchar.Δ,
 ProxyCredentials: uint.Δ,
 NumberOfProxyAuthnSchemes: ulong,
 ProxyAuthnSchemes: ulong.Δ
});

var _RPC_HTTP_TRANSPORT_CREDENTIALS_V3_W = new StructT('_RPC_HTTP_TRANSPORT_CREDENTIALS_V3_W', {
 TransportCredentials: RPC_AUTH_IDENTITY_HANDLE,
 Flags: ulong,
 AuthenticationTarget: ulong,
 NumberOfAuthnSchemes: ulong,
 AuthnSchemes: ulong.Δ,
 ServerCertificateSubject: ushort.Δ,
 ProxyCredentials: RPC_AUTH_IDENTITY_HANDLE,
 NumberOfProxyAuthnSchemes: ulong,
 ProxyAuthnSchemes: ulong.Δ
});

var _RPC_HTTP_TRANSPORT_CREDENTIALS_V3_A = new StructT('_RPC_HTTP_TRANSPORT_CREDENTIALS_V3_A', {
 TransportCredentials: RPC_AUTH_IDENTITY_HANDLE,
 Flags: ulong,
 AuthenticationTarget: ulong,
 NumberOfAuthnSchemes: ulong,
 AuthnSchemes: ulong.Δ,
 ServerCertificateSubject: uchar.Δ,
 ProxyCredentials: RPC_AUTH_IDENTITY_HANDLE,
 NumberOfProxyAuthnSchemes: ulong,
 ProxyAuthnSchemes: ulong.Δ
});

var _RPC_SECURITY_QOS_V2_W = new StructT('_RPC_SECURITY_QOS_V2_W', {
 Version: ulong,
 Capabilities: ulong,
 IdentityTracking: ulong,
 ImpersonationType: ulong,
 AdditionalSecurityInfoType: ulong,
 u: c:rpcdce.h@37044@S@_RPC_SECURITY_QOS_V2_W@Ua
});

var _RPC_SECURITY_QOS_V2_A = new StructT('_RPC_SECURITY_QOS_V2_A', {
 Version: ulong,
 Capabilities: ulong,
 IdentityTracking: ulong,
 ImpersonationType: ulong,
 AdditionalSecurityInfoType: ulong,
 u: c:rpcdce.h@37400@S@_RPC_SECURITY_QOS_V2_A@Ua
});

var _RPC_SECURITY_QOS_V3_W = new StructT('_RPC_SECURITY_QOS_V3_W', {
 Version: ulong,
 Capabilities: ulong,
 IdentityTracking: ulong,
 ImpersonationType: ulong,
 AdditionalSecurityInfoType: ulong,
 u: c:rpcdce.h@37834@S@_RPC_SECURITY_QOS_V3_W@Ua,
 Sid: VoidT.Δ
});

var _RPC_SECURITY_QOS_V3_A = new StructT('_RPC_SECURITY_QOS_V3_A', {
 Version: ulong,
 Capabilities: ulong,
 IdentityTracking: ulong,
 ImpersonationType: ulong,
 AdditionalSecurityInfoType: ulong,
 u: c:rpcdce.h@38204@S@_RPC_SECURITY_QOS_V3_A@Ua,
 Sid: VoidT.Δ
});

var _RPC_SECURITY_QOS_V4_W = new StructT('_RPC_SECURITY_QOS_V4_W', {
 Version: ulong,
 Capabilities: ulong,
 IdentityTracking: ulong,
 ImpersonationType: ulong,
 AdditionalSecurityInfoType: ulong,
 u: c:rpcdce.h@38696@S@_RPC_SECURITY_QOS_V4_W@Ua,
 Sid: VoidT.Δ,
 EffectiveOnly: uint
});

var _RPC_SECURITY_QOS_V4_A = new StructT('_RPC_SECURITY_QOS_V4_A', {
 Version: ulong,
 Capabilities: ulong,
 IdentityTracking: ulong,
 ImpersonationType: ulong,
 AdditionalSecurityInfoType: ulong,
 u: c:rpcdce.h@39097@S@_RPC_SECURITY_QOS_V4_A@Ua,
 Sid: VoidT.Δ,
 EffectiveOnly: uint
});

var _RPC_BINDING_HANDLE_TEMPLATE_V1_W = new StructT('_RPC_BINDING_HANDLE_TEMPLATE_V1_W', {
 Version: ulong,
 Flags: ulong,
 ProtocolSequence: ulong,
 NetworkAddress: ushort.Δ,
 StringEndpoint: ushort.Δ,
 u1: c:rpcdce.h@43204@S@_RPC_BINDING_HANDLE_TEMPLATE_V1_W@Ua,
 ObjectUuid: UUID
});

var _RPC_BINDING_HANDLE_TEMPLATE_V1_A = new StructT('_RPC_BINDING_HANDLE_TEMPLATE_V1_A', {
 Version: ulong,
 Flags: ulong,
 ProtocolSequence: ulong,
 NetworkAddress: uchar.Δ,
 StringEndpoint: uchar.Δ,
 u1: c:rpcdce.h@43580@S@_RPC_BINDING_HANDLE_TEMPLATE_V1_A@Ua,
 ObjectUuid: UUID
});

var _RPC_BINDING_HANDLE_SECURITY_V1_W = new StructT('_RPC_BINDING_HANDLE_SECURITY_V1_W', {
 Version: ulong,
 ServerPrincName: ushort.Δ,
 AuthnLevel: ulong,
 AuthnSvc: ulong,
 AuthIdentity: uint.Δ,
 SecurityQos: uint.Δ
});

var _RPC_BINDING_HANDLE_SECURITY_V1_A = new StructT('_RPC_BINDING_HANDLE_SECURITY_V1_A', {
 Version: ulong,
 ServerPrincName: uchar.Δ,
 AuthnLevel: ulong,
 AuthnSvc: ulong,
 AuthIdentity: uint.Δ,
 SecurityQos: uint.Δ
});

var _RPC_BINDING_HANDLE_OPTIONS_V1 = new StructT('_RPC_BINDING_HANDLE_OPTIONS_V1', {
 Version: ulong,
 Flags: ulong,
 ComTimeout: ulong,
 CallTimeout: ulong
});

var undefined = new StructT('undefined', {
 UserName: uchar.Δ,
 ComputerName: uchar.Δ,
 Privilege: ushort,
 AuthFlags: ulong
});

var _RPC_VERSION = new StructT('_RPC_VERSION', {
 MajorVersion: ushort,
 MinorVersion: ushort
});

var _RPC_SYNTAX_IDENTIFIER = new StructT('_RPC_SYNTAX_IDENTIFIER', {
 SyntaxGUID: GUID,
 SyntaxVersion: RPC_VERSION
});

var _RPC_MESSAGE = new StructT('_RPC_MESSAGE', {
 Handle: RPC_BINDING_HANDLE,
 DataRepresentation: ulong,
 Buffer: VoidT.Δ,
 BufferLength: uint,
 ProcNum: uint,
 TransferSyntax: PRPC_SYNTAX_IDENTIFIER,
 RpcInterfaceInformation: VoidT.Δ,
 ReservedForRuntime: VoidT.Δ,
 ManagerEpv: VoidT.Δ,
 ImportContext: VoidT.Δ,
 RpcFlags: ulong
});

var undefined = new StructT('undefined', {
 DispatchTableCount: uint,
 DispatchTable: RPC_DISPATCH_FUNCTION.Δ,
 Reserved: LONG_PTR
});

var _RPC_PROTSEQ_ENDPOINT = new StructT('_RPC_PROTSEQ_ENDPOINT', {
 RpcProtocolSequence: uchar.Δ,
 Endpoint: uchar.Δ
});

var _RPC_SERVER_INTERFACE = new StructT('_RPC_SERVER_INTERFACE', {
 Length: uint,
 InterfaceId: RPC_SYNTAX_IDENTIFIER,
 TransferSyntax: RPC_SYNTAX_IDENTIFIER,
 DispatchTable: PRPC_DISPATCH_TABLE,
 RpcProtseqEndpointCount: uint,
 RpcProtseqEndpoint: PRPC_PROTSEQ_ENDPOINT,
 DefaultManagerEpv: VoidT.Δ,
 InterpreterInfo: VoidT.Δ,
 Flags: uint
});

var _RPC_CLIENT_INTERFACE = new StructT('_RPC_CLIENT_INTERFACE', {
 Length: uint,
 InterfaceId: RPC_SYNTAX_IDENTIFIER,
 TransferSyntax: RPC_SYNTAX_IDENTIFIER,
 DispatchTable: PRPC_DISPATCH_TABLE,
 RpcProtseqEndpointCount: uint,
 RpcProtseqEndpoint: PRPC_PROTSEQ_ENDPOINT,
 Reserved: ULONG_PTR,
 InterpreterInfo: VoidT.Δ,
 Flags: uint
});

var _RPC_TRANSFER_SYNTAX = new StructT('_RPC_TRANSFER_SYNTAX', {
 Uuid: UUID,
 VersMajor: ushort,
 VersMinor: ushort
});

var _RPC_C_OPT_COOKIE_AUTH_DESCRIPTOR = new StructT('_RPC_C_OPT_COOKIE_AUTH_DESCRIPTOR', {
 BufferSize: ulong,
 Buffer: int8.Δ
});

var _RDR_CALLOUT_STATE = new StructT('_RDR_CALLOUT_STATE', {
 LastError: RPC_STATUS,
 LastEEInfo: VoidT.Δ,
 LastCalledStage: RPC_HTTP_REDIRECTOR_STAGE,
 ServerName: ushort.Δ,
 ServerPort: ushort.Δ,
 RemoteUser: ushort.Δ,
 AuthType: ushort.Δ,
 ResourceTypePresent: uchar,
 SessionIdPresent: uchar,
 InterfacePresent: uchar,
 ResourceType: UUID,
 SessionId: UUID,
 Interface: RPC_SYNTAX_IDENTIFIER,
 CertContext: VoidT.Δ
});

var tagI_RpcProxyCallbackInterface = new StructT('tagI_RpcProxyCallbackInterface', {
 IsValidMachineFn: I_RpcProxyIsValidMachineFn,
 GetClientAddressFn: I_RpcProxyGetClientAddressFn,
 GetConnectionTimeoutFn: I_RpcProxyGetConnectionTimeoutFn,
 PerformCalloutFn: I_RpcPerformCalloutFn,
 FreeCalloutStateFn: I_RpcFreeCalloutStateFn,
 GetClientSessionAndResourceUUIDFn: I_RpcProxyGetClientSessionAndResourceUUID,
 ProxyFilterIfFn: I_RpcProxyFilterIfFn,
 RpcProxyUpdatePerfCounterFn: I_RpcProxyUpdatePerfCounterFn,
 RpcProxyUpdatePerfCounterBackendServerFn: I_RpcProxyUpdatePerfCounterBackendServerFn
});

var _RPC_ASYNC_STATE = new StructT('_RPC_ASYNC_STATE', {
 Size: uint,
 Signature: ulong,
 Lock: long,
 Flags: ulong,
 StubInfo: VoidT.Δ,
 UserInfo: VoidT.Δ,
 RuntimeInfo: VoidT.Δ,
 Event: RPC_ASYNC_EVENT,
 NotificationType: RPC_NOTIFICATION_TYPES,
 u: RPC_ASYNC_NOTIFICATION_INFO,
 Reserved: ARRAY(LONG_PTR, 4)
});

var undefined = new StructT('undefined', {
 NotificationRoutine: PFN_RPCNOTIFICATION_ROUTINE,
 hThread: HANDLE
});

var undefined = new StructT('undefined', {
 hIOPort: HANDLE,
 dwNumberOfBytesTransferred: DWORD,
 dwCompletionKey: DWORD_PTR,
 lpOverlapped: LPOVERLAPPED
});

var undefined = new StructT('undefined', {
 hWnd: HWND,
 Msg: UINT
});

var tagBinaryParam = new StructT('tagBinaryParam', {
 Buffer: VoidT.Δ,
 Size: short
});

var tagRPC_EE_INFO_PARAM = new StructT('tagRPC_EE_INFO_PARAM', {
 ParameterType: ExtendedErrorParamTypes,
 u: c:rpcasync.h@5042@S@tagRPC_EE_INFO_PARAM@Ua
});

var tagRPC_EXTENDED_ERROR_INFO = new StructT('tagRPC_EXTENDED_ERROR_INFO', {
 Version: ULONG,
 ComputerName: LPWSTR,
 ProcessID: ULONG,
 u: c:rpcasync.h@5667@S@tagRPC_EXTENDED_ERROR_INFO@Ua,
 GeneratingComponent: ULONG,
 Status: ULONG,
 DetectionLocation: USHORT,
 Flags: USHORT,
 NumberOfParameters: int,
 Parameters: ARRAY(RPC_EE_INFO_PARAM, MaxNumberOfEEInfoParams)
});

var tagRPC_ERROR_ENUM_HANDLE = new StructT('tagRPC_ERROR_ENUM_HANDLE', {
 Signature: ULONG,
 CurrentPos: VoidT.Δ,
 Head: VoidT.Δ
});

var _RPC_CALL_LOCAL_ADDRESS_V1 = new StructT('_RPC_CALL_LOCAL_ADDRESS_V1', {
 Version: uint,
 Buffer: VoidT.Δ,
 BufferSize: ulong,
 AddressFormat: RpcLocalAddressFormat
});

var tagRPC_CALL_ATTRIBUTES_V1_W = new StructT('tagRPC_CALL_ATTRIBUTES_V1_W', {
 Version: uint,
 Flags: ulong,
 ServerPrincipalNameBufferLength: ulong,
 ServerPrincipalName: ushort.Δ,
 ClientPrincipalNameBufferLength: ulong,
 ClientPrincipalName: ushort.Δ,
 AuthenticationLevel: ulong,
 AuthenticationService: ulong,
 NullSession: BOOL
});

var tagRPC_CALL_ATTRIBUTES_V1_A = new StructT('tagRPC_CALL_ATTRIBUTES_V1_A', {
 Version: uint,
 Flags: ulong,
 ServerPrincipalNameBufferLength: ulong,
 ServerPrincipalName: uchar.Δ,
 ClientPrincipalNameBufferLength: ulong,
 ClientPrincipalName: uchar.Δ,
 AuthenticationLevel: ulong,
 AuthenticationService: ulong,
 NullSession: BOOL
});

var tagRPC_CALL_ATTRIBUTES_V2_W = new StructT('tagRPC_CALL_ATTRIBUTES_V2_W', {
 Version: uint,
 Flags: ulong,
 ServerPrincipalNameBufferLength: ulong,
 ServerPrincipalName: ushort.Δ,
 ClientPrincipalNameBufferLength: ulong,
 ClientPrincipalName: ushort.Δ,
 AuthenticationLevel: ulong,
 AuthenticationService: ulong,
 NullSession: BOOL,
 KernelModeCaller: BOOL,
 ProtocolSequence: ulong,
 IsClientLocal: RpcCallClientLocality,
 ClientPID: HANDLE,
 CallStatus: ulong,
 CallType: RpcCallType,
 CallLocalAddress: uint.Δ,
 OpNum: ushort,
 InterfaceUuid: UUID
});

var RPC_CALL_ATTRIBUTES = new StructT('RPC_CALL_ATTRIBUTES', {
 Version: uint,
 Flags: ulong,
 ServerPrincipalNameBufferLength: ulong,
 ServerPrincipalName: uchar.Δ,
 ClientPrincipalNameBufferLength: ulong,
 ClientPrincipalName: uchar.Δ,
 AuthenticationLevel: ulong,
 AuthenticationService: ulong,
 NullSession: BOOL,
 KernelModeCaller: BOOL,
 ProtocolSequence: ulong,
 IsClientLocal: ulong,
 ClientPID: HANDLE,
 CallStatus: ulong,
 CallType: RpcCallType,
 CallLocalAddress: uint.Δ,
 OpNum: ushort,
 InterfaceUuid: UUID
});

var HDROP__ = new StructT('HDROP__', {
 unused: int
});

var DRAGINFO = new StructT('DRAGINFO', {
 uSize: UINT,
 pt: POINT,
 fNC: BOOL,
 lpFileList: LPSTR,
 grfKeyState: DWORD
});

var _DRAGINFOW = new StructT('_DRAGINFOW', {
 uSize: UINT,
 pt: POINT,
 fNC: BOOL,
 lpFileList: LPWSTR,
 grfKeyState: DWORD
});

var _AppBarData = new StructT('_AppBarData', {
 cbSize: DWORD,
 hWnd: HWND,
 uCallbackMessage: UINT,
 uEdge: UINT,
 rc: RECT,
 lParam: LPARAM
});

var SHFILEOPSTRUCT = new StructT('SHFILEOPSTRUCT', {
 hwnd: HWND,
 wFunc: UINT,
 pFrom: LPCSTR,
 pTo: LPCSTR,
 fFlags: FILEOP_FLAGS,
 fAnyOperationsAborted: BOOL,
 hNameMappings: LPVOID,
 lpszProgressTitle: LPCSTR
});

var _SHFILEOPSTRUCTW = new StructT('_SHFILEOPSTRUCTW', {
 hwnd: HWND,
 wFunc: UINT,
 pFrom: LPCWSTR,
 pTo: LPCWSTR,
 fFlags: FILEOP_FLAGS,
 fAnyOperationsAborted: BOOL,
 hNameMappings: LPVOID,
 lpszProgressTitle: LPCWSTR
});

var SHNAMEMAPPING = new StructT('SHNAMEMAPPING', {
 pszOldPath: LPSTR,
 pszNewPath: LPSTR,
 cchOldPath: int,
 cchNewPath: int
});

var _SHNAMEMAPPINGW = new StructT('_SHNAMEMAPPINGW', {
 pszOldPath: LPWSTR,
 pszNewPath: LPWSTR,
 cchOldPath: int,
 cchNewPath: int
});

var SHELLEXECUTEINFO = new StructT('SHELLEXECUTEINFO', {
 cbSize: DWORD,
 fMask: ULONG,
 hwnd: HWND,
 lpVerb: LPCSTR,
 lpFile: LPCSTR,
 lpParameters: LPCSTR,
 lpDirectory: LPCSTR,
 nShow: int,
 hInstApp: HINSTANCE,
 lpIDList: VoidT.Δ,
 lpClass: LPCSTR,
 hkeyClass: HKEY,
 dwHotKey: DWORD,
 hProcess: HANDLE
});

var _SHELLEXECUTEINFOW = new StructT('_SHELLEXECUTEINFOW', {
 cbSize: DWORD,
 fMask: ULONG,
 hwnd: HWND,
 lpVerb: LPCWSTR,
 lpFile: LPCWSTR,
 lpParameters: LPCWSTR,
 lpDirectory: LPCWSTR,
 nShow: int,
 hInstApp: HINSTANCE,
 lpIDList: VoidT.Δ,
 lpClass: LPCWSTR,
 hkeyClass: HKEY,
 dwHotKey: DWORD,
 hProcess: HANDLE
});

var _SHCREATEPROCESSINFOW = new StructT('_SHCREATEPROCESSINFOW', {
 cbSize: DWORD,
 fMask: ULONG,
 hwnd: HWND,
 pszFile: LPCWSTR,
 pszParameters: LPCWSTR,
 pszCurrentDirectory: LPCWSTR,
 hUserToken: HANDLE,
 lpProcessAttributes: LPSECURITY_ATTRIBUTES,
 lpThreadAttributes: LPSECURITY_ATTRIBUTES,
 bInheritHandles: BOOL,
 dwCreationFlags: DWORD,
 lpStartupInfo: LPSTARTUPINFOW,
 lpProcessInformation: LPPROCESS_INFORMATION
});

var ASSOCIATIONELEMENT_ = new StructT('ASSOCIATIONELEMENT_', {
 ac: ASSOCCLASS,
 hkClass: HKEY,
 pszClass: PCWSTR
});

var _SHQUERYRBINFO = new StructT('_SHQUERYRBINFO', {
 cbSize: DWORD,
 i64Size: longlong,
 i64NumItems: longlong
});

var NOTIFYICONDATA = new StructT('NOTIFYICONDATA', {
 cbSize: DWORD,
 hWnd: HWND,
 uID: UINT,
 uFlags: UINT,
 uCallbackMessage: UINT,
 hIcon: HICON,
 szTip: ARRAY(CHAR, 128),
 dwState: DWORD,
 dwStateMask: DWORD,
 szInfo: ARRAY(CHAR, 256),
 szInfoTitle: ARRAY(CHAR, 64),
 dwInfoFlags: DWORD,
 guidItem: GUID,
 hBalloonIcon: HICON
});

var _NOTIFYICONDATAW = new StructT('_NOTIFYICONDATAW', {
 cbSize: DWORD,
 hWnd: HWND,
 uID: UINT,
 uFlags: UINT,
 uCallbackMessage: UINT,
 hIcon: HICON,
 szTip: ARRAY(WCHAR, 128),
 dwState: DWORD,
 dwStateMask: DWORD,
 szInfo: ARRAY(WCHAR, 256),
 szInfoTitle: ARRAY(WCHAR, 64),
 dwInfoFlags: DWORD,
 guidItem: GUID,
 hBalloonIcon: HICON
});

var _NOTIFYICONIDENTIFIER = new StructT('_NOTIFYICONIDENTIFIER', {
 cbSize: DWORD,
 hWnd: HWND,
 uID: UINT,
 guidItem: GUID
});

var SHFILEINFO = new StructT('SHFILEINFO', {
 hIcon: HICON,
 iIcon: int,
 dwAttributes: DWORD,
 szDisplayName: ARRAY(CHAR, MAX_PATH),
 szTypeName: ARRAY(CHAR, 80)
});

var _SHFILEINFOW = new StructT('_SHFILEINFOW', {
 hIcon: HICON,
 iIcon: int,
 dwAttributes: DWORD,
 szDisplayName: ARRAY(WCHAR, MAX_PATH),
 szTypeName: ARRAY(WCHAR, 80)
});

var _SHSTOCKICONINFO = new StructT('_SHSTOCKICONINFO', {
 cbSize: DWORD,
 hIcon: HICON,
 iSysImageIndex: int,
 iIcon: int,
 szPath: ARRAY(WCHAR, MAX_PATH)
});

var OPEN_PRINTER_PROPS_INFO = new StructT('OPEN_PRINTER_PROPS_INFO', {
 dwSize: DWORD,
 pszSheetName: LPSTR,
 uSheetIndex: UINT,
 dwFlags: DWORD,
 bModal: BOOL
});

var _OPEN_PRINTER_PROPS_INFOW = new StructT('_OPEN_PRINTER_PROPS_INFOW', {
 dwSize: DWORD,
 pszSheetName: LPWSTR,
 uSheetIndex: UINT,
 dwFlags: DWORD,
 bModal: BOOL
});

var tagNC_ADDRESS = new StructT('tagNC_ADDRESS', {
 pAddrInfo: NET_ADDRESS_INFO_.Δ,
 PortNumber: USHORT,
 PrefixLength: BYTE
});


var _PERF_DATA_BLOCK = new StructT('_PERF_DATA_BLOCK', {
 Signature: ARRAY(WCHAR, 4),
 LittleEndian: DWORD,
 Version: DWORD,
 Revision: DWORD,
 TotalByteLength: DWORD,
 HeaderLength: DWORD,
 NumObjectTypes: DWORD,
 DefaultObject: LONG,
 SystemTime: SYSTEMTIME,
 PerfTime: LARGE_INTEGER,
 PerfFreq: LARGE_INTEGER,
 PerfTime100nSec: LARGE_INTEGER,
 SystemNameLength: DWORD,
 SystemNameOffset: DWORD
});

var _PERF_OBJECT_TYPE = new StructT('_PERF_OBJECT_TYPE', {
 TotalByteLength: DWORD,
 DefinitionLength: DWORD,
 HeaderLength: DWORD,
 ObjectNameTitleIndex: DWORD,
 ObjectNameTitle: LPWSTR,
 ObjectHelpTitleIndex: DWORD,
 ObjectHelpTitle: LPWSTR,
 DetailLevel: DWORD,
 NumCounters: DWORD,
 DefaultCounter: LONG,
 NumInstances: LONG,
 CodePage: DWORD,
 PerfTime: LARGE_INTEGER,
 PerfFreq: LARGE_INTEGER
});

var _PERF_COUNTER_DEFINITION = new StructT('_PERF_COUNTER_DEFINITION', {
 ByteLength: DWORD,
 CounterNameTitleIndex: DWORD,
 CounterNameTitle: LPWSTR,
 CounterHelpTitleIndex: DWORD,
 CounterHelpTitle: LPWSTR,
 DefaultScale: LONG,
 DetailLevel: DWORD,
 CounterType: DWORD,
 CounterSize: DWORD,
 CounterOffset: DWORD
});

var _PERF_INSTANCE_DEFINITION = new StructT('_PERF_INSTANCE_DEFINITION', {
 ByteLength: DWORD,
 ParentObjectTitleIndex: DWORD,
 ParentObjectInstance: DWORD,
 UniqueID: LONG,
 NameOffset: DWORD,
 NameLength: DWORD
});

var _PERF_COUNTER_BLOCK = new StructT('_PERF_COUNTER_BLOCK', {
 ByteLength: DWORD
});

var FD_SET = new StructT('FD_SET', {
 fd_count: u_int,
 fd_array: ARRAY(SOCKET, FD_SETSIZE)
});

var TIMEVAL = new StructT('TIMEVAL', {
 tv_sec: long,
 tv_usec: long
});

var HOSTENT = new StructT('HOSTENT', {
 h_name: int8.Δ,
 h_aliases: int8.Δ.Δ,
 h_addrtype: short,
 h_length: short,
 h_addr_list: int8.Δ.Δ
});

var netent = new StructT('netent', {
 n_name: int8.Δ,
 n_aliases: int8.Δ.Δ,
 n_addrtype: short,
 n_net: u_long
});

var SERVENT = new StructT('SERVENT', {
 s_name: int8.Δ,
 s_aliases: int8.Δ.Δ,
 s_port: short,
 s_proto: int8.Δ
});

var PROTOENT = new StructT('PROTOENT', {
 p_name: int8.Δ,
 p_aliases: int8.Δ.Δ,
 p_proto: short
});

var in_addr = new StructT('in_addr', {
 S_un: c:inaddr.h@278@S@in_addr@Ua
});

var undefined = new StructT('undefined', {
 s_b1: UCHAR,
 s_b2: UCHAR,
 s_b3: UCHAR,
 s_b4: UCHAR
});

var undefined = new StructT('undefined', {
 s_w1: USHORT,
 s_w2: USHORT
});

var SOCKADDR_IN = new StructT('SOCKADDR_IN', {
 sin_family: short,
 sin_port: u_short,
 sin_addr: IN_ADDR,
 sin_zero: ARRAY(undefined, 8)
});

var WSAData = new StructT('WSAData', {
 wVersion: WORD,
 wHighVersion: WORD,
 szDescription: ARRAY(undefined, undefined),
 szSystemStatus: ARRAY(undefined, undefined),
 iMaxSockets: ushort,
 iMaxUdpDg: ushort,
 lpVendorInfo: int8.Δ
});

var ip_mreq = new StructT('ip_mreq', {
 imr_multiaddr: IN_ADDR,
 imr_interface: IN_ADDR
});

var SOCKADDR = new StructT('SOCKADDR', {
 sa_family: u_short,
 sa_data: ARRAY(undefined, 14)
});

var sockproto = new StructT('sockproto', {
 sp_family: u_short,
 sp_protocol: u_short
});

var LINGER = new StructT('LINGER', {
 l_onoff: u_short,
 l_linger: u_short
});

var _TRANSMIT_FILE_BUFFERS = new StructT('_TRANSMIT_FILE_BUFFERS', {
 Head: PVOID,
 HeadLength: DWORD,
 Tail: PVOID,
 TailLength: DWORD
});

var _CMS_KEY_INFO = new StructT('_CMS_KEY_INFO', {
 dwVersion: DWORD,
 Algid: ALG_ID,
 pbOID: uchar.Δ,
 cbOID: DWORD
});

var _HMAC_Info = new StructT('_HMAC_Info', {
 HashAlgid: ALG_ID,
 pbInnerString: uchar.Δ,
 cbInnerString: DWORD,
 pbOuterString: uchar.Δ,
 cbOuterString: DWORD
});

var _SCHANNEL_ALG = new StructT('_SCHANNEL_ALG', {
 dwUse: DWORD,
 Algid: ALG_ID,
 cBits: DWORD,
 dwFlags: DWORD,
 dwReserved: DWORD
});

var _PROV_ENUMALGS = new StructT('_PROV_ENUMALGS', {
 aiAlgid: ALG_ID,
 dwBitLen: DWORD,
 dwNameLen: DWORD,
 szName: ARRAY(CHAR, 20)
});

var _PROV_ENUMALGS_EX = new StructT('_PROV_ENUMALGS_EX', {
 aiAlgid: ALG_ID,
 dwDefaultLen: DWORD,
 dwMinLen: DWORD,
 dwMaxLen: DWORD,
 dwProtocols: DWORD,
 dwNameLen: DWORD,
 szName: ARRAY(CHAR, 20),
 dwLongNameLen: DWORD,
 szLongName: ARRAY(CHAR, 40)
});

var _PUBLICKEYSTRUC = new StructT('_PUBLICKEYSTRUC', {
 bType: BYTE,
 bVersion: BYTE,
 reserved: WORD,
 aiKeyAlg: ALG_ID
});

var _RSAPUBKEY = new StructT('_RSAPUBKEY', {
 magic: DWORD,
 bitlen: DWORD,
 pubexp: DWORD
});

var _PUBKEY = new StructT('_PUBKEY', {
 magic: DWORD,
 bitlen: DWORD
});

var _DSSSEED = new StructT('_DSSSEED', {
 counter: DWORD,
 seed: ARRAY(BYTE, 20)
});

var _PUBKEYVER3 = new StructT('_PUBKEYVER3', {
 magic: DWORD,
 bitlenP: DWORD,
 bitlenQ: DWORD,
 bitlenJ: DWORD,
 DSSSeed: DSSSEED
});

var _PRIVKEYVER3 = new StructT('_PRIVKEYVER3', {
 magic: DWORD,
 bitlenP: DWORD,
 bitlenQ: DWORD,
 bitlenJ: DWORD,
 bitlenX: DWORD,
 DSSSeed: DSSSEED
});

var _KEY_TYPE_SUBTYPE = new StructT('_KEY_TYPE_SUBTYPE', {
 dwKeySpec: DWORD,
 Type: GUID,
 Subtype: GUID
});

var _CERT_FORTEZZA_DATA_PROP = new StructT('_CERT_FORTEZZA_DATA_PROP', {
 SerialNumber: ARRAY(undefined, 8),
 CertIndex: int,
 CertLabel: ARRAY(undefined, 36)
});

var _CRYPT_RC4_KEY_STATE = new StructT('_CRYPT_RC4_KEY_STATE', {
 Key: ARRAY(undefined, 16),
 SBox: ARRAY(undefined, 256),
 i: uchar,
 j: uchar
});

var _CRYPT_DES_KEY_STATE = new StructT('_CRYPT_DES_KEY_STATE', {
 Key: ARRAY(undefined, 8),
 IV: ARRAY(undefined, 8),
 Feedback: ARRAY(undefined, 8)
});

var _CRYPT_3DES_KEY_STATE = new StructT('_CRYPT_3DES_KEY_STATE', {
 Key: ARRAY(undefined, 24),
 IV: ARRAY(undefined, 8),
 Feedback: ARRAY(undefined, 8)
});

var _CRYPT_AES_128_KEY_STATE = new StructT('_CRYPT_AES_128_KEY_STATE', {
 Key: ARRAY(undefined, 16),
 IV: ARRAY(undefined, 16),
 EncryptionState: ARRAY(undefined, 11),
 DecryptionState: ARRAY(undefined, 11),
 Feedback: ARRAY(undefined, 16)
});

var _CRYPT_AES_256_KEY_STATE = new StructT('_CRYPT_AES_256_KEY_STATE', {
 Key: ARRAY(undefined, 32),
 IV: ARRAY(undefined, 16),
 EncryptionState: ARRAY(undefined, 15),
 DecryptionState: ARRAY(undefined, 15),
 Feedback: ARRAY(undefined, 16)
});

var _CRYPTOAPI_BLOB = new StructT('_CRYPTOAPI_BLOB', {
 cbData: DWORD,
 pbData: uchar.Δ
});

var _CMS_DH_KEY_INFO = new StructT('_CMS_DH_KEY_INFO', {
 dwVersion: DWORD,
 Algid: ALG_ID,
 pszContentEncObjId: LPSTR,
 PubInfo: CRYPT_DATA_BLOB,
 pReserved: VoidT.Δ
});

var BCRYPT_AUTH_TAG_LENGTHS_STRUCT = new StructT('BCRYPT_AUTH_TAG_LENGTHS_STRUCT', {
 dwMinLength: ULONG,
 dwMaxLength: ULONG,
 dwIncrement: ULONG
});

var _BCRYPT_OID = new StructT('_BCRYPT_OID', {
 cbOID: ULONG,
 pbOID: PUCHAR
});

var _BCRYPT_OID_LIST = new StructT('_BCRYPT_OID_LIST', {
 dwOIDCount: ULONG,
 pOIDs: uint.Δ
});

var _BCRYPT_PKCS1_PADDING_INFO = new StructT('_BCRYPT_PKCS1_PADDING_INFO', {
 pszAlgId: LPCWSTR
});

var _BCRYPT_PSS_PADDING_INFO = new StructT('_BCRYPT_PSS_PADDING_INFO', {
 pszAlgId: LPCWSTR,
 cbSalt: ULONG
});

var _BCRYPT_OAEP_PADDING_INFO = new StructT('_BCRYPT_OAEP_PADDING_INFO', {
 pszAlgId: LPCWSTR,
 pbLabel: PUCHAR,
 cbLabel: ULONG
});

var _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO = new StructT('_BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO', {
 cbSize: ULONG,
 dwInfoVersion: ULONG,
 pbNonce: PUCHAR,
 cbNonce: ULONG,
 pbAuthData: PUCHAR,
 cbAuthData: ULONG,
 pbTag: PUCHAR,
 cbTag: ULONG,
 pbMacContext: PUCHAR,
 cbMacContext: ULONG,
 cbAAD: ULONG,
 cbData: ULONGLONG,
 dwFlags: ULONG
});

var NCryptBuffer = new StructT('NCryptBuffer', {
 cbBuffer: ULONG,
 BufferType: ULONG,
 pvBuffer: PVOID
});

var NCryptBufferDesc = new StructT('NCryptBufferDesc', {
 ulVersion: ULONG,
 cBuffers: ULONG,
 pBuffers: PBCryptBuffer
});

var _BCRYPT_KEY_BLOB = new StructT('_BCRYPT_KEY_BLOB', {
 Magic: ULONG
});

var _BCRYPT_RSAKEY_BLOB = new StructT('_BCRYPT_RSAKEY_BLOB', {
 Magic: ULONG,
 BitLength: ULONG,
 cbPublicExp: ULONG,
 cbModulus: ULONG,
 cbPrime1: ULONG,
 cbPrime2: ULONG
});

var _BCRYPT_ECCKEY_BLOB = new StructT('_BCRYPT_ECCKEY_BLOB', {
 dwMagic: ULONG,
 cbKey: ULONG
});

var _BCRYPT_DH_KEY_BLOB = new StructT('_BCRYPT_DH_KEY_BLOB', {
 dwMagic: ULONG,
 cbKey: ULONG
});

var _BCRYPT_DH_PARAMETER_HEADER = new StructT('_BCRYPT_DH_PARAMETER_HEADER', {
 cbLength: ULONG,
 dwMagic: ULONG,
 cbKeyLength: ULONG
});

var _BCRYPT_DSA_KEY_BLOB = new StructT('_BCRYPT_DSA_KEY_BLOB', {
 dwMagic: ULONG,
 cbKey: ULONG,
 Count: ARRAY(UCHAR, 4),
 Seed: ARRAY(UCHAR, 20),
 q: ARRAY(UCHAR, 20)
});

var _BCRYPT_KEY_DATA_BLOB_HEADER = new StructT('_BCRYPT_KEY_DATA_BLOB_HEADER', {
 dwMagic: ULONG,
 dwVersion: ULONG,
 cbKeyData: ULONG
});

var _BCRYPT_DSA_PARAMETER_HEADER = new StructT('_BCRYPT_DSA_PARAMETER_HEADER', {
 cbLength: ULONG,
 dwMagic: ULONG,
 cbKeyLength: ULONG,
 Count: ARRAY(UCHAR, 4),
 Seed: ARRAY(UCHAR, 20),
 q: ARRAY(UCHAR, 20)
});

var _BCRYPT_ALGORITHM_IDENTIFIER = new StructT('_BCRYPT_ALGORITHM_IDENTIFIER', {
 pszName: LPWSTR,
 dwClass: ULONG,
 dwFlags: ULONG
});

var _BCRYPT_PROVIDER_NAME = new StructT('_BCRYPT_PROVIDER_NAME', {
 pszProviderName: LPWSTR
});

var _BCRYPT_INTERFACE_VERSION = new StructT('_BCRYPT_INTERFACE_VERSION', {
 MajorVersion: USHORT,
 MinorVersion: USHORT
});

var _CRYPT_INTERFACE_REG = new StructT('_CRYPT_INTERFACE_REG', {
 dwInterface: ULONG,
 dwFlags: ULONG,
 cFunctions: ULONG,
 rgpszFunctions: ushort.Δ.Δ
});

var _CRYPT_IMAGE_REG = new StructT('_CRYPT_IMAGE_REG', {
 pszImage: PWSTR,
 cInterfaces: ULONG,
 rgpInterfaces: VOIDPTR.Δ
});

var _CRYPT_PROVIDER_REG = new StructT('_CRYPT_PROVIDER_REG', {
 cAliases: ULONG,
 rgpszAliases: ushort.Δ.Δ,
 pUM: PCRYPT_IMAGE_REG,
 pKM: PCRYPT_IMAGE_REG
});

var _CRYPT_PROVIDERS = new StructT('_CRYPT_PROVIDERS', {
 cProviders: ULONG,
 rgpszProviders: ushort.Δ.Δ
});

var _CRYPT_CONTEXT_CONFIG = new StructT('_CRYPT_CONTEXT_CONFIG', {
 dwFlags: ULONG,
 dwReserved: ULONG
});

var _CRYPT_CONTEXT_FUNCTION_CONFIG = new StructT('_CRYPT_CONTEXT_FUNCTION_CONFIG', {
 dwFlags: ULONG,
 dwReserved: ULONG
});

var _CRYPT_CONTEXTS = new StructT('_CRYPT_CONTEXTS', {
 cContexts: ULONG,
 rgpszContexts: ushort.Δ.Δ
});

var _CRYPT_CONTEXT_FUNCTIONS = new StructT('_CRYPT_CONTEXT_FUNCTIONS', {
 cFunctions: ULONG,
 rgpszFunctions: ushort.Δ.Δ
});

var _CRYPT_CONTEXT_FUNCTION_PROVIDERS = new StructT('_CRYPT_CONTEXT_FUNCTION_PROVIDERS', {
 cProviders: ULONG,
 rgpszProviders: ushort.Δ.Δ
});

var _CRYPT_PROPERTY_REF = new StructT('_CRYPT_PROPERTY_REF', {
 pszProperty: PWSTR,
 cbValue: ULONG,
 pbValue: PUCHAR
});

var _CRYPT_IMAGE_REF = new StructT('_CRYPT_IMAGE_REF', {
 pszImage: PWSTR,
 dwFlags: ULONG
});

var _CRYPT_PROVIDER_REF = new StructT('_CRYPT_PROVIDER_REF', {
 dwInterface: ULONG,
 pszFunction: PWSTR,
 pszProvider: PWSTR,
 cProperties: ULONG,
 rgpProperties: VOIDPTR.Δ,
 pUM: PCRYPT_IMAGE_REF,
 pKM: PCRYPT_IMAGE_REF
});

var _CRYPT_PROVIDER_REFS = new StructT('_CRYPT_PROVIDER_REFS', {
 cProviders: ULONG,
 rgpProviders: VOIDPTR.Δ
});

var _NCryptAlgorithmName = new StructT('_NCryptAlgorithmName', {
 pszName: LPWSTR,
 dwClass: DWORD,
 dwAlgOperations: DWORD,
 dwFlags: DWORD
});

var NCryptKeyName = new StructT('NCryptKeyName', {
 pszName: LPWSTR,
 pszAlgid: LPWSTR,
 dwLegacyKeySpec: DWORD,
 dwFlags: DWORD
});

var NCryptProviderName = new StructT('NCryptProviderName', {
 pszName: LPWSTR,
 pszComment: LPWSTR
});

var __NCRYPT_UI_POLICY_BLOB = new StructT('__NCRYPT_UI_POLICY_BLOB', {
 dwVersion: DWORD,
 dwFlags: DWORD,
 cbCreationTitle: DWORD,
 cbFriendlyName: DWORD,
 cbDescription: DWORD
});

var __NCRYPT_UI_POLICY = new StructT('__NCRYPT_UI_POLICY', {
 dwVersion: DWORD,
 dwFlags: DWORD,
 pszCreationTitle: LPCWSTR,
 pszFriendlyName: LPCWSTR,
 pszDescription: LPCWSTR
});

var __NCRYPT_SUPPORTED_LENGTHS = new StructT('__NCRYPT_SUPPORTED_LENGTHS', {
 dwMinLength: DWORD,
 dwMaxLength: DWORD,
 dwIncrement: DWORD,
 dwDefaultLength: DWORD
});

var _CRYPT_BIT_BLOB = new StructT('_CRYPT_BIT_BLOB', {
 cbData: DWORD,
 pbData: uchar.Δ,
 cUnusedBits: DWORD
});

var _CRYPT_ALGORITHM_IDENTIFIER = new StructT('_CRYPT_ALGORITHM_IDENTIFIER', {
 pszObjId: LPSTR,
 Parameters: CRYPT_OBJID_BLOB
});

var _CRYPT_OBJID_TABLE = new StructT('_CRYPT_OBJID_TABLE', {
 dwAlgId: DWORD,
 pszObjId: LPCSTR
});

var _CRYPT_HASH_INFO = new StructT('_CRYPT_HASH_INFO', {
 HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 Hash: CRYPT_HASH_BLOB
});

var _CERT_EXTENSION = new StructT('_CERT_EXTENSION', {
 pszObjId: LPSTR,
 fCritical: BOOL,
 Value: CRYPT_OBJID_BLOB
});

var _CRYPT_ATTRIBUTE_TYPE_VALUE = new StructT('_CRYPT_ATTRIBUTE_TYPE_VALUE', {
 pszObjId: LPSTR,
 Value: CRYPT_OBJID_BLOB
});

var _CRYPT_ATTRIBUTE = new StructT('_CRYPT_ATTRIBUTE', {
 pszObjId: LPSTR,
 cValue: DWORD,
 rgValue: PCRYPT_ATTR_BLOB
});

var CMSG_ATTR = new StructT('CMSG_ATTR', {
 cAttr: DWORD,
 rgAttr: PCRYPT_ATTRIBUTE
});

var _CERT_RDN_ATTR = new StructT('_CERT_RDN_ATTR', {
 pszObjId: LPSTR,
 dwValueType: DWORD,
 Value: CERT_RDN_VALUE_BLOB
});

var _CERT_RDN = new StructT('_CERT_RDN', {
 cRDNAttr: DWORD,
 rgRDNAttr: PCERT_RDN_ATTR
});

var _CERT_NAME_INFO = new StructT('_CERT_NAME_INFO', {
 cRDN: DWORD,
 rgRDN: PCERT_RDN
});

var _CERT_NAME_VALUE = new StructT('_CERT_NAME_VALUE', {
 dwValueType: DWORD,
 Value: CERT_RDN_VALUE_BLOB
});

var _CERT_PUBLIC_KEY_INFO = new StructT('_CERT_PUBLIC_KEY_INFO', {
 Algorithm: CRYPT_ALGORITHM_IDENTIFIER,
 PublicKey: CRYPT_BIT_BLOB
});

var _CRYPT_PRIVATE_KEY_INFO = new StructT('_CRYPT_PRIVATE_KEY_INFO', {
 Version: DWORD,
 Algorithm: CRYPT_ALGORITHM_IDENTIFIER,
 PrivateKey: CRYPT_DER_BLOB,
 pAttributes: PCRYPT_ATTRIBUTES
});

var _CRYPT_ENCRYPTED_PRIVATE_KEY_INFO = new StructT('_CRYPT_ENCRYPTED_PRIVATE_KEY_INFO', {
 EncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 EncryptedPrivateKey: CRYPT_DATA_BLOB
});

var _CRYPT_PKCS8_IMPORT_PARAMS = new StructT('_CRYPT_PKCS8_IMPORT_PARAMS', {
 PrivateKey: CRYPT_DIGEST_BLOB,
 pResolvehCryptProvFunc: PCRYPT_RESOLVE_HCRYPTPROV_FUNC,
 pVoidResolveFunc: LPVOID,
 pDecryptPrivateKeyFunc: PCRYPT_DECRYPT_PRIVATE_KEY_FUNC,
 pVoidDecryptFunc: LPVOID
});

var _CRYPT_PKCS8_EXPORT_PARAMS = new StructT('_CRYPT_PKCS8_EXPORT_PARAMS', {
 hCryptProv: HCRYPTPROV,
 dwKeySpec: DWORD,
 pszPrivateKeyObjId: LPSTR,
 pEncryptPrivateKeyFunc: PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC,
 pVoidEncryptFunc: LPVOID
});

var _CERT_INFO = new StructT('_CERT_INFO', {
 dwVersion: DWORD,
 SerialNumber: CRYPT_INTEGER_BLOB,
 SignatureAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 Issuer: CERT_NAME_BLOB,
 NotBefore: FILETIME,
 NotAfter: FILETIME,
 Subject: CERT_NAME_BLOB,
 SubjectPublicKeyInfo: CERT_PUBLIC_KEY_INFO,
 IssuerUniqueId: CRYPT_BIT_BLOB,
 SubjectUniqueId: CRYPT_BIT_BLOB,
 cExtension: DWORD,
 rgExtension: PCERT_EXTENSION
});

var _CRL_ENTRY = new StructT('_CRL_ENTRY', {
 SerialNumber: CRYPT_INTEGER_BLOB,
 RevocationDate: FILETIME,
 cExtension: DWORD,
 rgExtension: PCERT_EXTENSION
});

var _CRL_INFO = new StructT('_CRL_INFO', {
 dwVersion: DWORD,
 SignatureAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 Issuer: CERT_NAME_BLOB,
 ThisUpdate: FILETIME,
 NextUpdate: FILETIME,
 cCRLEntry: DWORD,
 rgCRLEntry: PCRL_ENTRY,
 cExtension: DWORD,
 rgExtension: PCERT_EXTENSION
});

var _CERT_OR_CRL_BLOB = new StructT('_CERT_OR_CRL_BLOB', {
 dwChoice: DWORD,
 cbEncoded: DWORD,
 pbEncoded: uchar.Δ
});

var _CERT_OR_CRL_BUNDLE = new StructT('_CERT_OR_CRL_BUNDLE', {
 cItem: DWORD,
 rgItem: PCERT_OR_CRL_BLOB
});

var _CERT_REQUEST_INFO = new StructT('_CERT_REQUEST_INFO', {
 dwVersion: DWORD,
 Subject: CERT_NAME_BLOB,
 SubjectPublicKeyInfo: CERT_PUBLIC_KEY_INFO,
 cAttribute: DWORD,
 rgAttribute: PCRYPT_ATTRIBUTE
});

var _CERT_KEYGEN_REQUEST_INFO = new StructT('_CERT_KEYGEN_REQUEST_INFO', {
 dwVersion: DWORD,
 SubjectPublicKeyInfo: CERT_PUBLIC_KEY_INFO,
 pwszChallengeString: LPWSTR
});

var _CERT_SIGNED_CONTENT_INFO = new StructT('_CERT_SIGNED_CONTENT_INFO', {
 ToBeSigned: CRYPT_DER_BLOB,
 SignatureAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 Signature: CRYPT_BIT_BLOB
});

var _CTL_USAGE = new StructT('_CTL_USAGE', {
 cUsageIdentifier: DWORD,
 rgpszUsageIdentifier: int8.Δ.Δ
});

var _CTL_ENTRY = new StructT('_CTL_ENTRY', {
 SubjectIdentifier: CRYPT_DATA_BLOB,
 cAttribute: DWORD,
 rgAttribute: PCRYPT_ATTRIBUTE
});

var _CTL_INFO = new StructT('_CTL_INFO', {
 dwVersion: DWORD,
 SubjectUsage: CTL_USAGE,
 ListIdentifier: CRYPT_DATA_BLOB,
 SequenceNumber: CRYPT_INTEGER_BLOB,
 ThisUpdate: FILETIME,
 NextUpdate: FILETIME,
 SubjectAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 cCTLEntry: DWORD,
 rgCTLEntry: PCTL_ENTRY,
 cExtension: DWORD,
 rgExtension: PCERT_EXTENSION
});

var _CRYPT_TIME_STAMP_REQUEST_INFO = new StructT('_CRYPT_TIME_STAMP_REQUEST_INFO', {
 pszTimeStampAlgorithm: LPSTR,
 pszContentType: LPSTR,
 Content: CRYPT_OBJID_BLOB,
 cAttribute: DWORD,
 rgAttribute: PCRYPT_ATTRIBUTE
});

var _CRYPT_ENROLLMENT_NAME_VALUE_PAIR = new StructT('_CRYPT_ENROLLMENT_NAME_VALUE_PAIR', {
 pwszName: LPWSTR,
 pwszValue: LPWSTR
});

var _CRYPT_CSP_PROVIDER = new StructT('_CRYPT_CSP_PROVIDER', {
 dwKeySpec: DWORD,
 pwszProviderName: LPWSTR,
 Signature: CRYPT_BIT_BLOB
});

var _CRYPT_ENCODE_PARA = new StructT('_CRYPT_ENCODE_PARA', {
 cbSize: DWORD,
 pfnAlloc: PFN_CRYPT_ALLOC,
 pfnFree: PFN_CRYPT_FREE
});

var _CRYPT_DECODE_PARA = new StructT('_CRYPT_DECODE_PARA', {
 cbSize: DWORD,
 pfnAlloc: PFN_CRYPT_ALLOC,
 pfnFree: PFN_CRYPT_FREE
});

var _CERT_EXTENSIONS = new StructT('_CERT_EXTENSIONS', {
 cExtension: DWORD,
 rgExtension: PCERT_EXTENSION
});

var _CERT_AUTHORITY_KEY_ID_INFO = new StructT('_CERT_AUTHORITY_KEY_ID_INFO', {
 KeyId: CRYPT_DATA_BLOB,
 CertIssuer: CERT_NAME_BLOB,
 CertSerialNumber: CRYPT_INTEGER_BLOB
});

var _CERT_PRIVATE_KEY_VALIDITY = new StructT('_CERT_PRIVATE_KEY_VALIDITY', {
 NotBefore: FILETIME,
 NotAfter: FILETIME
});

var _CERT_KEY_ATTRIBUTES_INFO = new StructT('_CERT_KEY_ATTRIBUTES_INFO', {
 KeyId: CRYPT_DATA_BLOB,
 IntendedKeyUsage: CRYPT_BIT_BLOB,
 pPrivateKeyUsagePeriod: PCERT_PRIVATE_KEY_VALIDITY
});

var _CERT_POLICY_ID = new StructT('_CERT_POLICY_ID', {
 cCertPolicyElementId: DWORD,
 rgpszCertPolicyElementId: int8.Δ.Δ
});

var _CERT_KEY_USAGE_RESTRICTION_INFO = new StructT('_CERT_KEY_USAGE_RESTRICTION_INFO', {
 cCertPolicyId: DWORD,
 rgCertPolicyId: PCERT_POLICY_ID,
 RestrictedKeyUsage: CRYPT_BIT_BLOB
});

var _CERT_OTHER_NAME = new StructT('_CERT_OTHER_NAME', {
 pszObjId: LPSTR,
 Value: CRYPT_OBJID_BLOB
});

var _CERT_ALT_NAME_ENTRY = new StructT('_CERT_ALT_NAME_ENTRY', {
 dwAltNameChoice: DWORD
});

var _CERT_ALT_NAME_INFO = new StructT('_CERT_ALT_NAME_INFO', {
 cAltEntry: DWORD,
 rgAltEntry: PCERT_ALT_NAME_ENTRY
});

var _CERT_BASIC_CONSTRAINTS_INFO = new StructT('_CERT_BASIC_CONSTRAINTS_INFO', {
 SubjectType: CRYPT_BIT_BLOB,
 fPathLenConstraint: BOOL,
 dwPathLenConstraint: DWORD,
 cSubtreesConstraint: DWORD,
 rgSubtreesConstraint: uint.Δ
});

var _CERT_BASIC_CONSTRAINTS2_INFO = new StructT('_CERT_BASIC_CONSTRAINTS2_INFO', {
 fCA: BOOL,
 fPathLenConstraint: BOOL,
 dwPathLenConstraint: DWORD
});

var _CERT_POLICY_QUALIFIER_INFO = new StructT('_CERT_POLICY_QUALIFIER_INFO', {
 pszPolicyQualifierId: LPSTR,
 Qualifier: CRYPT_OBJID_BLOB
});

var _CERT_POLICY_INFO = new StructT('_CERT_POLICY_INFO', {
 pszPolicyIdentifier: LPSTR,
 cPolicyQualifier: DWORD,
 rgPolicyQualifier: uint.Δ
});

var _CERT_POLICIES_INFO = new StructT('_CERT_POLICIES_INFO', {
 cPolicyInfo: DWORD,
 rgPolicyInfo: uint.Δ
});

var _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE = new StructT('_CERT_POLICY_QUALIFIER_NOTICE_REFERENCE', {
 pszOrganization: LPSTR,
 cNoticeNumbers: DWORD,
 rgNoticeNumbers: int.Δ
});

var _CERT_POLICY_QUALIFIER_USER_NOTICE = new StructT('_CERT_POLICY_QUALIFIER_USER_NOTICE', {
 pNoticeReference: uint.Δ,
 pszDisplayText: LPWSTR
});

var _CPS_URLS = new StructT('_CPS_URLS', {
 pszURL: LPWSTR,
 pAlgorithm: uint.Δ,
 pDigest: uint.Δ
});

var _CERT_POLICY95_QUALIFIER1 = new StructT('_CERT_POLICY95_QUALIFIER1', {
 pszPracticesReference: LPWSTR,
 pszNoticeIdentifier: LPSTR,
 pszNSINoticeIdentifier: LPSTR,
 cCPSURLs: DWORD,
 rgCPSURLs: uint.Δ
});

var _CERT_POLICY_MAPPING = new StructT('_CERT_POLICY_MAPPING', {
 pszIssuerDomainPolicy: LPSTR,
 pszSubjectDomainPolicy: LPSTR
});

var _CERT_POLICY_MAPPINGS_INFO = new StructT('_CERT_POLICY_MAPPINGS_INFO', {
 cPolicyMapping: DWORD,
 rgPolicyMapping: PCERT_POLICY_MAPPING
});

var _CERT_POLICY_CONSTRAINTS_INFO = new StructT('_CERT_POLICY_CONSTRAINTS_INFO', {
 fRequireExplicitPolicy: BOOL,
 dwRequireExplicitPolicySkipCerts: DWORD,
 fInhibitPolicyMapping: BOOL,
 dwInhibitPolicyMappingSkipCerts: DWORD
});

var _CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY = new StructT('_CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY', {
 pszObjId: LPSTR,
 cValue: DWORD,
 rgValue: PCRYPT_DER_BLOB
});

var _CRYPT_CONTENT_INFO = new StructT('_CRYPT_CONTENT_INFO', {
 pszObjId: LPSTR,
 Content: CRYPT_DER_BLOB
});

var _CRYPT_SEQUENCE_OF_ANY = new StructT('_CRYPT_SEQUENCE_OF_ANY', {
 cValue: DWORD,
 rgValue: PCRYPT_DER_BLOB
});

var _CERT_AUTHORITY_KEY_ID2_INFO = new StructT('_CERT_AUTHORITY_KEY_ID2_INFO', {
 KeyId: CRYPT_DATA_BLOB,
 AuthorityCertIssuer: CERT_ALT_NAME_INFO,
 AuthorityCertSerialNumber: CRYPT_INTEGER_BLOB
});

var _CERT_ACCESS_DESCRIPTION = new StructT('_CERT_ACCESS_DESCRIPTION', {
 pszAccessMethod: LPSTR,
 AccessLocation: CERT_ALT_NAME_ENTRY
});

var _CERT_AUTHORITY_INFO_ACCESS = new StructT('_CERT_AUTHORITY_INFO_ACCESS', {
 cAccDescr: DWORD,
 rgAccDescr: PCERT_ACCESS_DESCRIPTION
});

var _CRL_DIST_POINT_NAME = new StructT('_CRL_DIST_POINT_NAME', {
 dwDistPointNameChoice: DWORD
});

var _CRL_DIST_POINT = new StructT('_CRL_DIST_POINT', {
 DistPointName: CRL_DIST_POINT_NAME,
 ReasonFlags: CRYPT_BIT_BLOB,
 CRLIssuer: CERT_ALT_NAME_INFO
});

var _CRL_DIST_POINTS_INFO = new StructT('_CRL_DIST_POINTS_INFO', {
 cDistPoint: DWORD,
 rgDistPoint: PCRL_DIST_POINT
});

var _CROSS_CERT_DIST_POINTS_INFO = new StructT('_CROSS_CERT_DIST_POINTS_INFO', {
 dwSyncDeltaTime: DWORD,
 cDistPoint: DWORD,
 rgDistPoint: PCERT_ALT_NAME_INFO
});

var _CERT_PAIR = new StructT('_CERT_PAIR', {
 Forward: CERT_BLOB,
 Reverse: CERT_BLOB
});

var _CRL_ISSUING_DIST_POINT = new StructT('_CRL_ISSUING_DIST_POINT', {
 DistPointName: CRL_DIST_POINT_NAME,
 fOnlyContainsUserCerts: BOOL,
 fOnlyContainsCACerts: BOOL,
 OnlySomeReasonFlags: CRYPT_BIT_BLOB,
 fIndirectCRL: BOOL
});

var _CERT_GENERAL_SUBTREE = new StructT('_CERT_GENERAL_SUBTREE', {
 Base: CERT_ALT_NAME_ENTRY,
 dwMinimum: DWORD,
 fMaximum: BOOL,
 dwMaximum: DWORD
});

var _CERT_NAME_CONSTRAINTS_INFO = new StructT('_CERT_NAME_CONSTRAINTS_INFO', {
 cPermittedSubtree: DWORD,
 rgPermittedSubtree: PCERT_GENERAL_SUBTREE,
 cExcludedSubtree: DWORD,
 rgExcludedSubtree: PCERT_GENERAL_SUBTREE
});

var _CERT_DSS_PARAMETERS = new StructT('_CERT_DSS_PARAMETERS', {
 p: CRYPT_UINT_BLOB,
 q: CRYPT_UINT_BLOB,
 g: CRYPT_UINT_BLOB
});

var _CERT_DH_PARAMETERS = new StructT('_CERT_DH_PARAMETERS', {
 p: CRYPT_UINT_BLOB,
 g: CRYPT_UINT_BLOB
});

var _CERT_ECC_SIGNATURE = new StructT('_CERT_ECC_SIGNATURE', {
 r: CRYPT_UINT_BLOB,
 s: CRYPT_UINT_BLOB
});

var _CERT_X942_DH_VALIDATION_PARAMS = new StructT('_CERT_X942_DH_VALIDATION_PARAMS', {
 seed: CRYPT_BIT_BLOB,
 pgenCounter: DWORD
});

var _CERT_X942_DH_PARAMETERS = new StructT('_CERT_X942_DH_PARAMETERS', {
 p: CRYPT_UINT_BLOB,
 g: CRYPT_UINT_BLOB,
 q: CRYPT_UINT_BLOB,
 j: CRYPT_UINT_BLOB,
 pValidationParams: PCERT_X942_DH_VALIDATION_PARAMS
});

var _CRYPT_X942_OTHER_INFO = new StructT('_CRYPT_X942_OTHER_INFO', {
 pszContentEncryptionObjId: LPSTR,
 rgbCounter: ARRAY(BYTE, CRYPT_X942_COUNTER_BYTE_LENGTH),
 rgbKeyLength: ARRAY(BYTE, CRYPT_X942_KEY_LENGTH_BYTE_LENGTH),
 PubInfo: CRYPT_DATA_BLOB
});

var _CRYPT_ECC_CMS_SHARED_INFO = new StructT('_CRYPT_ECC_CMS_SHARED_INFO', {
 Algorithm: CRYPT_ALGORITHM_IDENTIFIER,
 EntityUInfo: CRYPT_DATA_BLOB,
 rgbSuppPubInfo: ARRAY(BYTE, CRYPT_ECC_CMS_SHARED_INFO_SUPPPUBINFO_BYTE_LENGTH)
});

var _CRYPT_RC2_CBC_PARAMETERS = new StructT('_CRYPT_RC2_CBC_PARAMETERS', {
 dwVersion: DWORD,
 fIV: BOOL,
 rgbIV: ARRAY(BYTE, 8)
});

var _CRYPT_SMIME_CAPABILITY = new StructT('_CRYPT_SMIME_CAPABILITY', {
 pszObjId: LPSTR,
 Parameters: CRYPT_OBJID_BLOB
});

var _CRYPT_SMIME_CAPABILITIES = new StructT('_CRYPT_SMIME_CAPABILITIES', {
 cCapability: DWORD,
 rgCapability: PCRYPT_SMIME_CAPABILITY
});

var _CERT_QC_STATEMENT = new StructT('_CERT_QC_STATEMENT', {
 pszStatementId: LPSTR,
 StatementInfo: CRYPT_OBJID_BLOB
});

var _CERT_QC_STATEMENTS_EXT_INFO = new StructT('_CERT_QC_STATEMENTS_EXT_INFO', {
 cStatement: DWORD,
 rgStatement: PCERT_QC_STATEMENT
});

var _CRYPT_MASK_GEN_ALGORITHM = new StructT('_CRYPT_MASK_GEN_ALGORITHM', {
 pszObjId: LPSTR,
 HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER
});

var _CRYPT_RSA_SSA_PSS_PARAMETERS = new StructT('_CRYPT_RSA_SSA_PSS_PARAMETERS', {
 HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 MaskGenAlgorithm: CRYPT_MASK_GEN_ALGORITHM,
 dwSaltLength: DWORD,
 dwTrailerField: DWORD
});

var _CRYPT_PSOURCE_ALGORITHM = new StructT('_CRYPT_PSOURCE_ALGORITHM', {
 pszObjId: LPSTR,
 EncodingParameters: CRYPT_DATA_BLOB
});

var _CRYPT_RSAES_OAEP_PARAMETERS = new StructT('_CRYPT_RSAES_OAEP_PARAMETERS', {
 HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 MaskGenAlgorithm: CRYPT_MASK_GEN_ALGORITHM,
 PSourceAlgorithm: CRYPT_PSOURCE_ALGORITHM
});

var _CMC_TAGGED_ATTRIBUTE = new StructT('_CMC_TAGGED_ATTRIBUTE', {
 dwBodyPartID: DWORD,
 Attribute: CRYPT_ATTRIBUTE
});

var _CMC_TAGGED_CERT_REQUEST = new StructT('_CMC_TAGGED_CERT_REQUEST', {
 dwBodyPartID: DWORD,
 SignedCertRequest: CRYPT_DER_BLOB
});

var _CMC_TAGGED_REQUEST = new StructT('_CMC_TAGGED_REQUEST', {
 dwTaggedRequestChoice: DWORD
});

var _CMC_TAGGED_CONTENT_INFO = new StructT('_CMC_TAGGED_CONTENT_INFO', {
 dwBodyPartID: DWORD,
 EncodedContentInfo: CRYPT_DER_BLOB
});

var _CMC_TAGGED_OTHER_MSG = new StructT('_CMC_TAGGED_OTHER_MSG', {
 dwBodyPartID: DWORD,
 pszObjId: LPSTR,
 Value: CRYPT_OBJID_BLOB
});

var _CMC_DATA_INFO = new StructT('_CMC_DATA_INFO', {
 cTaggedAttribute: DWORD,
 rgTaggedAttribute: PCMC_TAGGED_ATTRIBUTE,
 cTaggedRequest: DWORD,
 rgTaggedRequest: PCMC_TAGGED_REQUEST,
 cTaggedContentInfo: DWORD,
 rgTaggedContentInfo: PCMC_TAGGED_CONTENT_INFO,
 cTaggedOtherMsg: DWORD,
 rgTaggedOtherMsg: PCMC_TAGGED_OTHER_MSG
});

var _CMC_RESPONSE_INFO = new StructT('_CMC_RESPONSE_INFO', {
 cTaggedAttribute: DWORD,
 rgTaggedAttribute: PCMC_TAGGED_ATTRIBUTE,
 cTaggedContentInfo: DWORD,
 rgTaggedContentInfo: PCMC_TAGGED_CONTENT_INFO,
 cTaggedOtherMsg: DWORD,
 rgTaggedOtherMsg: PCMC_TAGGED_OTHER_MSG
});

var _CMC_PEND_INFO = new StructT('_CMC_PEND_INFO', {
 PendToken: CRYPT_DATA_BLOB,
 PendTime: FILETIME
});

var _CMC_STATUS_INFO = new StructT('_CMC_STATUS_INFO', {
 dwStatus: DWORD,
 cBodyList: DWORD,
 rgdwBodyList: ulong.Δ,
 pwszStatusString: LPWSTR,
 dwOtherInfoChoice: DWORD
});

var _CMC_ADD_EXTENSIONS_INFO = new StructT('_CMC_ADD_EXTENSIONS_INFO', {
 dwCmcDataReference: DWORD,
 cCertReference: DWORD,
 rgdwCertReference: ulong.Δ,
 cExtension: DWORD,
 rgExtension: PCERT_EXTENSION
});

var _CMC_ADD_ATTRIBUTES_INFO = new StructT('_CMC_ADD_ATTRIBUTES_INFO', {
 dwCmcDataReference: DWORD,
 cCertReference: DWORD,
 rgdwCertReference: ulong.Δ,
 cAttribute: DWORD,
 rgAttribute: PCRYPT_ATTRIBUTE
});

var _CERT_TEMPLATE_EXT = new StructT('_CERT_TEMPLATE_EXT', {
 pszObjId: LPSTR,
 dwMajorVersion: DWORD,
 fMinorVersion: BOOL,
 dwMinorVersion: DWORD
});

var _CERT_HASHED_URL = new StructT('_CERT_HASHED_URL', {
 HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 Hash: CRYPT_HASH_BLOB,
 pwszUrl: LPWSTR
});

var _CERT_LOGOTYPE_DETAILS = new StructT('_CERT_LOGOTYPE_DETAILS', {
 pwszMimeType: LPWSTR,
 cHashedUrl: DWORD,
 rgHashedUrl: PCERT_HASHED_URL
});

var _CERT_LOGOTYPE_REFERENCE = new StructT('_CERT_LOGOTYPE_REFERENCE', {
 cHashedUrl: DWORD,
 rgHashedUrl: PCERT_HASHED_URL
});

var _CERT_LOGOTYPE_IMAGE_INFO = new StructT('_CERT_LOGOTYPE_IMAGE_INFO', {
 dwLogotypeImageInfoChoice: DWORD,
 dwFileSize: DWORD,
 dwXSize: DWORD,
 dwYSize: DWORD,
 dwLogotypeImageResolutionChoice: DWORD,
 pwszLanguage: LPWSTR
});

var _CERT_LOGOTYPE_IMAGE = new StructT('_CERT_LOGOTYPE_IMAGE', {
 LogotypeDetails: CERT_LOGOTYPE_DETAILS,
 pLogotypeImageInfo: PCERT_LOGOTYPE_IMAGE_INFO
});

var _CERT_LOGOTYPE_AUDIO_INFO = new StructT('_CERT_LOGOTYPE_AUDIO_INFO', {
 dwFileSize: DWORD,
 dwPlayTime: DWORD,
 dwChannels: DWORD,
 dwSampleRate: DWORD,
 pwszLanguage: LPWSTR
});

var _CERT_LOGOTYPE_AUDIO = new StructT('_CERT_LOGOTYPE_AUDIO', {
 LogotypeDetails: CERT_LOGOTYPE_DETAILS,
 pLogotypeAudioInfo: PCERT_LOGOTYPE_AUDIO_INFO
});

var _CERT_LOGOTYPE_DATA = new StructT('_CERT_LOGOTYPE_DATA', {
 cLogotypeImage: DWORD,
 rgLogotypeImage: PCERT_LOGOTYPE_IMAGE,
 cLogotypeAudio: DWORD,
 rgLogotypeAudio: PCERT_LOGOTYPE_AUDIO
});

var _CERT_LOGOTYPE_INFO = new StructT('_CERT_LOGOTYPE_INFO', {
 dwLogotypeInfoChoice: DWORD
});

var _CERT_OTHER_LOGOTYPE_INFO = new StructT('_CERT_OTHER_LOGOTYPE_INFO', {
 pszObjId: LPSTR,
 LogotypeInfo: CERT_LOGOTYPE_INFO
});

var _CERT_LOGOTYPE_EXT_INFO = new StructT('_CERT_LOGOTYPE_EXT_INFO', {
 cCommunityLogo: DWORD,
 rgCommunityLogo: PCERT_LOGOTYPE_INFO,
 pIssuerLogo: PCERT_LOGOTYPE_INFO,
 pSubjectLogo: PCERT_LOGOTYPE_INFO,
 cOtherLogo: DWORD,
 rgOtherLogo: PCERT_OTHER_LOGOTYPE_INFO
});

var _CERT_BIOMETRIC_DATA = new StructT('_CERT_BIOMETRIC_DATA', {
 dwTypeOfBiometricDataChoice: DWORD,
 HashedUrl: CERT_HASHED_URL
});

var _CERT_BIOMETRIC_EXT_INFO = new StructT('_CERT_BIOMETRIC_EXT_INFO', {
 cBiometricData: DWORD,
 rgBiometricData: PCERT_BIOMETRIC_DATA
});

var _OCSP_SIGNATURE_INFO = new StructT('_OCSP_SIGNATURE_INFO', {
 SignatureAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 Signature: CRYPT_BIT_BLOB,
 cCertEncoded: DWORD,
 rgCertEncoded: PCERT_BLOB
});

var _OCSP_SIGNED_REQUEST_INFO = new StructT('_OCSP_SIGNED_REQUEST_INFO', {
 ToBeSigned: CRYPT_DER_BLOB,
 pOptionalSignatureInfo: POCSP_SIGNATURE_INFO
});

var _OCSP_CERT_ID = new StructT('_OCSP_CERT_ID', {
 HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 IssuerNameHash: CRYPT_HASH_BLOB,
 IssuerKeyHash: CRYPT_HASH_BLOB,
 SerialNumber: CRYPT_INTEGER_BLOB
});

var _OCSP_REQUEST_ENTRY = new StructT('_OCSP_REQUEST_ENTRY', {
 CertId: OCSP_CERT_ID,
 cExtension: DWORD,
 rgExtension: PCERT_EXTENSION
});

var _OCSP_REQUEST_INFO = new StructT('_OCSP_REQUEST_INFO', {
 dwVersion: DWORD,
 pRequestorName: PCERT_ALT_NAME_ENTRY,
 cRequestEntry: DWORD,
 rgRequestEntry: POCSP_REQUEST_ENTRY,
 cExtension: DWORD,
 rgExtension: PCERT_EXTENSION
});

var _OCSP_RESPONSE_INFO = new StructT('_OCSP_RESPONSE_INFO', {
 dwStatus: DWORD,
 pszObjId: LPSTR,
 Value: CRYPT_OBJID_BLOB
});

var _OCSP_BASIC_SIGNED_RESPONSE_INFO = new StructT('_OCSP_BASIC_SIGNED_RESPONSE_INFO', {
 ToBeSigned: CRYPT_DER_BLOB,
 SignatureInfo: OCSP_SIGNATURE_INFO
});

var _OCSP_BASIC_REVOKED_INFO = new StructT('_OCSP_BASIC_REVOKED_INFO', {
 RevocationDate: FILETIME,
 dwCrlReasonCode: DWORD
});

var _OCSP_BASIC_RESPONSE_ENTRY = new StructT('_OCSP_BASIC_RESPONSE_ENTRY', {
 CertId: OCSP_CERT_ID,
 dwCertStatus: DWORD,
 ThisUpdate: FILETIME,
 NextUpdate: FILETIME,
 cExtension: DWORD,
 rgExtension: PCERT_EXTENSION
});

var _OCSP_BASIC_RESPONSE_INFO = new StructT('_OCSP_BASIC_RESPONSE_INFO', {
 dwVersion: DWORD,
 dwResponderIdChoice: DWORD,
 ProducedAt: FILETIME,
 cResponseEntry: DWORD,
 rgResponseEntry: POCSP_BASIC_RESPONSE_ENTRY,
 cExtension: DWORD,
 rgExtension: PCERT_EXTENSION
});

var _CRYPT_OID_FUNC_ENTRY = new StructT('_CRYPT_OID_FUNC_ENTRY', {
 pszOID: LPCSTR,
 pvFuncAddr: VoidT.Δ
});

var CCRYPT_OID_INFO = new StructT('CCRYPT_OID_INFO', {
 cbSize: DWORD,
 pszOID: LPCSTR,
 pwszName: LPCWSTR,
 dwGroupId: DWORD,
 ExtraInfo: CRYPT_DATA_BLOB
});

var _CERT_ISSUER_SERIAL_NUMBER = new StructT('_CERT_ISSUER_SERIAL_NUMBER', {
 Issuer: CERT_NAME_BLOB,
 SerialNumber: CRYPT_INTEGER_BLOB
});

var _CERT_ID = new StructT('_CERT_ID', {
 dwIdChoice: DWORD
});

var _CMSG_SIGNER_ENCODE_INFO = new StructT('_CMSG_SIGNER_ENCODE_INFO', {
 cbSize: DWORD,
 pCertInfo: PCERT_INFO,
 dwKeySpec: DWORD,
 HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 pvHashAuxInfo: VoidT.Δ,
 cAuthAttr: DWORD,
 rgAuthAttr: PCRYPT_ATTRIBUTE,
 cUnauthAttr: DWORD,
 rgUnauthAttr: PCRYPT_ATTRIBUTE
});

var _CMSG_SIGNED_ENCODE_INFO = new StructT('_CMSG_SIGNED_ENCODE_INFO', {
 cbSize: DWORD,
 cSigners: DWORD,
 rgSigners: PCMSG_SIGNER_ENCODE_INFO,
 cCertEncoded: DWORD,
 rgCertEncoded: PCERT_BLOB,
 cCrlEncoded: DWORD,
 rgCrlEncoded: PCRL_BLOB
});

var _CMSG_RECIPIENT_ENCODE_INFO = new StructT('_CMSG_RECIPIENT_ENCODE_INFO', {
 dwRecipientChoice: DWORD
});

var _CMSG_ENVELOPED_ENCODE_INFO = new StructT('_CMSG_ENVELOPED_ENCODE_INFO', {
 cbSize: DWORD,
 hCryptProv: HCRYPTPROV_LEGACY,
 ContentEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 pvEncryptionAuxInfo: VoidT.Δ,
 cRecipients: DWORD,
 rgpRecipients: VOIDPTR.Δ
});

var _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO = new StructT('_CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO', {
 cbSize: DWORD,
 KeyEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 pvKeyEncryptionAuxInfo: VoidT.Δ,
 hCryptProv: HCRYPTPROV_LEGACY,
 RecipientPublicKey: CRYPT_BIT_BLOB,
 RecipientId: CERT_ID
});

var _CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO = new StructT('_CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO', {
 cbSize: DWORD,
 RecipientPublicKey: CRYPT_BIT_BLOB,
 RecipientId: CERT_ID,
 Date: FILETIME,
 pOtherAttr: PCRYPT_ATTRIBUTE_TYPE_VALUE
});

var _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO = new StructT('_CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO', {
 cbSize: DWORD,
 KeyEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 pvKeyEncryptionAuxInfo: VoidT.Δ,
 KeyWrapAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 pvKeyWrapAuxInfo: VoidT.Δ,
 hCryptProv: HCRYPTPROV_LEGACY,
 dwKeySpec: DWORD,
 dwKeyChoice: DWORD,
 UserKeyingMaterial: CRYPT_DATA_BLOB,
 cRecipientEncryptedKeys: DWORD,
 rgpRecipientEncryptedKeys: VOIDPTR.Δ
});

var _CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO = new StructT('_CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO', {
 cbSize: DWORD,
 KeyEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 pvKeyEncryptionAuxInfo: VoidT.Δ,
 hCryptProv: HCRYPTPROV,
 dwKeyChoice: DWORD,
 KeyId: CRYPT_DATA_BLOB,
 Date: FILETIME,
 pOtherAttr: PCRYPT_ATTRIBUTE_TYPE_VALUE
});

var _CMSG_RC2_AUX_INFO = new StructT('_CMSG_RC2_AUX_INFO', {
 cbSize: DWORD,
 dwBitLen: DWORD
});

var _CMSG_SP3_COMPATIBLE_AUX_INFO = new StructT('_CMSG_SP3_COMPATIBLE_AUX_INFO', {
 cbSize: DWORD,
 dwFlags: DWORD
});

var _CMSG_RC4_AUX_INFO = new StructT('_CMSG_RC4_AUX_INFO', {
 cbSize: DWORD,
 dwBitLen: DWORD
});

var _CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO = new StructT('_CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO', {
 cbSize: DWORD,
 SignedInfo: CMSG_SIGNED_ENCODE_INFO,
 EnvelopedInfo: CMSG_ENVELOPED_ENCODE_INFO
});

var _CMSG_HASHED_ENCODE_INFO = new StructT('_CMSG_HASHED_ENCODE_INFO', {
 cbSize: DWORD,
 hCryptProv: HCRYPTPROV_LEGACY,
 HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 pvHashAuxInfo: VoidT.Δ
});

var _CMSG_ENCRYPTED_ENCODE_INFO = new StructT('_CMSG_ENCRYPTED_ENCODE_INFO', {
 cbSize: DWORD,
 ContentEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 pvEncryptionAuxInfo: VoidT.Δ
});

var _CMSG_STREAM_INFO = new StructT('_CMSG_STREAM_INFO', {
 cbContent: DWORD,
 pfnStreamOutput: PFN_CMSG_STREAM_OUTPUT,
 pvArg: VoidT.Δ
});

var _CMSG_SIGNER_INFO = new StructT('_CMSG_SIGNER_INFO', {
 dwVersion: DWORD,
 Issuer: CERT_NAME_BLOB,
 SerialNumber: CRYPT_INTEGER_BLOB,
 HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 HashEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 EncryptedHash: CRYPT_DATA_BLOB,
 AuthAttrs: CRYPT_ATTRIBUTES,
 UnauthAttrs: CRYPT_ATTRIBUTES
});

var _CMSG_CMS_SIGNER_INFO = new StructT('_CMSG_CMS_SIGNER_INFO', {
 dwVersion: DWORD,
 SignerId: CERT_ID,
 HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 HashEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 EncryptedHash: CRYPT_DATA_BLOB,
 AuthAttrs: CRYPT_ATTRIBUTES,
 UnauthAttrs: CRYPT_ATTRIBUTES
});

var _CMSG_KEY_TRANS_RECIPIENT_INFO = new StructT('_CMSG_KEY_TRANS_RECIPIENT_INFO', {
 dwVersion: DWORD,
 RecipientId: CERT_ID,
 KeyEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 EncryptedKey: CRYPT_DATA_BLOB
});

var _CMSG_RECIPIENT_ENCRYPTED_KEY_INFO = new StructT('_CMSG_RECIPIENT_ENCRYPTED_KEY_INFO', {
 RecipientId: CERT_ID,
 EncryptedKey: CRYPT_DATA_BLOB,
 Date: FILETIME,
 pOtherAttr: PCRYPT_ATTRIBUTE_TYPE_VALUE
});

var _CMSG_KEY_AGREE_RECIPIENT_INFO = new StructT('_CMSG_KEY_AGREE_RECIPIENT_INFO', {
 dwVersion: DWORD,
 dwOriginatorChoice: DWORD,
 UserKeyingMaterial: CRYPT_DATA_BLOB,
 KeyEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 cRecipientEncryptedKeys: DWORD,
 rgpRecipientEncryptedKeys: VOIDPTR.Δ
});

var _CMSG_MAIL_LIST_RECIPIENT_INFO = new StructT('_CMSG_MAIL_LIST_RECIPIENT_INFO', {
 dwVersion: DWORD,
 KeyId: CRYPT_DATA_BLOB,
 KeyEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 EncryptedKey: CRYPT_DATA_BLOB,
 Date: FILETIME,
 pOtherAttr: PCRYPT_ATTRIBUTE_TYPE_VALUE
});

var _CMSG_CMS_RECIPIENT_INFO = new StructT('_CMSG_CMS_RECIPIENT_INFO', {
 dwRecipientChoice: DWORD
});

var _CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA = new StructT('_CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA', {
 cbSize: DWORD,
 hCryptProv: HCRYPTPROV_LEGACY,
 dwSignerIndex: DWORD,
 dwSignerType: DWORD,
 pvSigner: VoidT.Δ
});

var _CMSG_CTRL_DECRYPT_PARA = new StructT('_CMSG_CTRL_DECRYPT_PARA', {
 cbSize: DWORD,
 dwKeySpec: DWORD,
 dwRecipientIndex: DWORD
});

var _CMSG_CTRL_KEY_TRANS_DECRYPT_PARA = new StructT('_CMSG_CTRL_KEY_TRANS_DECRYPT_PARA', {
 cbSize: DWORD,
 dwKeySpec: DWORD,
 pKeyTrans: PCMSG_KEY_TRANS_RECIPIENT_INFO,
 dwRecipientIndex: DWORD
});

var _CMSG_CTRL_KEY_AGREE_DECRYPT_PARA = new StructT('_CMSG_CTRL_KEY_AGREE_DECRYPT_PARA', {
 cbSize: DWORD,
 dwKeySpec: DWORD,
 pKeyAgree: PCMSG_KEY_AGREE_RECIPIENT_INFO,
 dwRecipientIndex: DWORD,
 dwRecipientEncryptedKeyIndex: DWORD,
 OriginatorPublicKey: CRYPT_BIT_BLOB
});

var _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA = new StructT('_CMSG_CTRL_MAIL_LIST_DECRYPT_PARA', {
 cbSize: DWORD,
 hCryptProv: HCRYPTPROV,
 pMailList: PCMSG_MAIL_LIST_RECIPIENT_INFO,
 dwRecipientIndex: DWORD,
 dwKeyChoice: DWORD
});

var _CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA = new StructT('_CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA', {
 cbSize: DWORD,
 dwSignerIndex: DWORD,
 blob: CRYPT_DATA_BLOB
});

var _CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA = new StructT('_CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA', {
 cbSize: DWORD,
 dwSignerIndex: DWORD,
 dwUnauthAttrIndex: DWORD
});

var _CMSG_CONTENT_ENCRYPT_INFO = new StructT('_CMSG_CONTENT_ENCRYPT_INFO', {
 cbSize: DWORD,
 hCryptProv: HCRYPTPROV_LEGACY,
 ContentEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 pvEncryptionAuxInfo: VoidT.Δ,
 cRecipients: DWORD,
 rgCmsRecipients: PCMSG_RECIPIENT_ENCODE_INFO,
 pfnAlloc: PFN_CMSG_ALLOC,
 pfnFree: PFN_CMSG_FREE,
 dwEncryptFlags: DWORD,
 dwFlags: DWORD,
 fCNG: BOOL,
 pbCNGContentEncryptKeyObject: uchar.Δ,
 pbContentEncryptKey: uchar.Δ,
 cbContentEncryptKey: DWORD
});

var _CMSG_KEY_TRANS_ENCRYPT_INFO = new StructT('_CMSG_KEY_TRANS_ENCRYPT_INFO', {
 cbSize: DWORD,
 dwRecipientIndex: DWORD,
 KeyEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 EncryptedKey: CRYPT_DATA_BLOB,
 dwFlags: DWORD
});

var _CMSG_KEY_AGREE_KEY_ENCRYPT_INFO = new StructT('_CMSG_KEY_AGREE_KEY_ENCRYPT_INFO', {
 cbSize: DWORD,
 EncryptedKey: CRYPT_DATA_BLOB
});

var _CMSG_KEY_AGREE_ENCRYPT_INFO = new StructT('_CMSG_KEY_AGREE_ENCRYPT_INFO', {
 cbSize: DWORD,
 dwRecipientIndex: DWORD,
 KeyEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 UserKeyingMaterial: CRYPT_DATA_BLOB,
 dwOriginatorChoice: DWORD,
 cKeyAgreeKeyEncryptInfo: DWORD,
 rgpKeyAgreeKeyEncryptInfo: VOIDPTR.Δ,
 dwFlags: DWORD
});

var _CMSG_MAIL_LIST_ENCRYPT_INFO = new StructT('_CMSG_MAIL_LIST_ENCRYPT_INFO', {
 cbSize: DWORD,
 dwRecipientIndex: DWORD,
 KeyEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 EncryptedKey: CRYPT_DATA_BLOB,
 dwFlags: DWORD
});

var _CMSG_CNG_CONTENT_DECRYPT_INFO = new StructT('_CMSG_CNG_CONTENT_DECRYPT_INFO', {
 cbSize: DWORD,
 ContentEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 pfnAlloc: PFN_CMSG_ALLOC,
 pfnFree: PFN_CMSG_FREE,
 hNCryptKey: NCRYPT_KEY_HANDLE,
 pbContentEncryptKey: uchar.Δ,
 cbContentEncryptKey: DWORD,
 hCNGContentEncryptKey: BCRYPT_KEY_HANDLE,
 pbCNGContentEncryptKeyObject: uchar.Δ
});

var _CERT_CONTEXT = new StructT('_CERT_CONTEXT', {
 dwCertEncodingType: DWORD,
 pbCertEncoded: uchar.Δ,
 cbCertEncoded: DWORD,
 pCertInfo: PCERT_INFO,
 hCertStore: HCERTSTORE
});

var _CRL_CONTEXT = new StructT('_CRL_CONTEXT', {
 dwCertEncodingType: DWORD,
 pbCrlEncoded: uchar.Δ,
 cbCrlEncoded: DWORD,
 pCrlInfo: PCRL_INFO,
 hCertStore: HCERTSTORE
});

var _CTL_CONTEXT = new StructT('_CTL_CONTEXT', {
 dwMsgAndCertEncodingType: DWORD,
 pbCtlEncoded: uchar.Δ,
 cbCtlEncoded: DWORD,
 pCtlInfo: PCTL_INFO,
 hCertStore: HCERTSTORE,
 hCryptMsg: HCRYPTMSG,
 pbCtlContent: uchar.Δ,
 cbCtlContent: DWORD
});

var _CRYPT_KEY_PROV_PARAM = new StructT('_CRYPT_KEY_PROV_PARAM', {
 dwParam: DWORD,
 pbData: uchar.Δ,
 cbData: DWORD,
 dwFlags: DWORD
});

var _CRYPT_KEY_PROV_INFO = new StructT('_CRYPT_KEY_PROV_INFO', {
 pwszContainerName: LPWSTR,
 pwszProvName: LPWSTR,
 dwProvType: DWORD,
 dwFlags: DWORD,
 cProvParam: DWORD,
 rgProvParam: PCRYPT_KEY_PROV_PARAM,
 dwKeySpec: DWORD
});

var _CERT_KEY_CONTEXT = new StructT('_CERT_KEY_CONTEXT', {
 cbSize: DWORD,
 dwKeySpec: DWORD
});

var _ROOT_INFO_LUID = new StructT('_ROOT_INFO_LUID', {
 LowPart: DWORD,
 HighPart: LONG
});

var _CRYPT_SMART_CARD_ROOT_INFO = new StructT('_CRYPT_SMART_CARD_ROOT_INFO', {
 rgbCardID: ARRAY(BYTE, 16),
 luid: ROOT_INFO_LUID
});


var _CERT_REGISTRY_STORE_CLIENT_GPT_PARA = new StructT('_CERT_REGISTRY_STORE_CLIENT_GPT_PARA', {
 hKeyBase: HKEY,
 pwszRegPath: LPWSTR
});

var _CERT_REGISTRY_STORE_ROAMING_PARA = new StructT('_CERT_REGISTRY_STORE_ROAMING_PARA', {
 hKey: HKEY,
 pwszStoreDirectory: LPWSTR
});

var _CERT_LDAP_STORE_OPENED_PARA = new StructT('_CERT_LDAP_STORE_OPENED_PARA', {
 pvLdapSessionHandle: VoidT.Δ,
 pwszLdapUrl: LPCWSTR
});

var _CERT_STORE_PROV_INFO = new StructT('_CERT_STORE_PROV_INFO', {
 cbSize: DWORD,
 cStoreProvFunc: DWORD,
 rgpvStoreProvFunc: VoidT.Δ.Δ,
 hStoreProv: HCERTSTOREPROV,
 dwStoreProvFlags: DWORD,
 hStoreProvFuncAddr2: HCRYPTOIDFUNCADDR
});

var CCERT_STORE_PROV_FIND_INFO = new StructT('CCERT_STORE_PROV_FIND_INFO', {
 cbSize: DWORD,
 dwMsgAndCertEncodingType: DWORD,
 dwFindFlags: DWORD,
 dwFindType: DWORD,
 pvFindPara: VoidT.Δ
});

var _CRL_FIND_ISSUED_FOR_PARA = new StructT('_CRL_FIND_ISSUED_FOR_PARA', {
 pSubjectCert: PCCERT_CONTEXT,
 pIssuerCert: PCCERT_CONTEXT
});

var _CTL_ANY_SUBJECT_INFO = new StructT('_CTL_ANY_SUBJECT_INFO', {
 SubjectAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 SubjectIdentifier: CRYPT_DATA_BLOB
});

var _CTL_FIND_USAGE_PARA = new StructT('_CTL_FIND_USAGE_PARA', {
 cbSize: DWORD,
 SubjectUsage: CTL_USAGE,
 ListIdentifier: CRYPT_DATA_BLOB,
 pSigner: PCERT_INFO
});

var _CTL_FIND_SUBJECT_PARA = new StructT('_CTL_FIND_SUBJECT_PARA', {
 cbSize: DWORD,
 pUsagePara: PCTL_FIND_USAGE_PARA,
 dwSubjectType: DWORD,
 pvSubject: VoidT.Δ
});

var _CERT_CREATE_CONTEXT_PARA = new StructT('_CERT_CREATE_CONTEXT_PARA', {
 cbSize: DWORD,
 pfnFree: PFN_CRYPT_FREE,
 pvFree: VoidT.Δ,
 pfnSort: PFN_CERT_CREATE_CONTEXT_SORT_FUNC,
 pvSort: VoidT.Δ
});

var _CERT_SYSTEM_STORE_INFO = new StructT('_CERT_SYSTEM_STORE_INFO', {
 cbSize: DWORD
});

var _CERT_PHYSICAL_STORE_INFO = new StructT('_CERT_PHYSICAL_STORE_INFO', {
 cbSize: DWORD,
 pszOpenStoreProvider: LPSTR,
 dwOpenEncodingType: DWORD,
 dwOpenFlags: DWORD,
 OpenParameters: CRYPT_DATA_BLOB,
 dwFlags: DWORD,
 dwPriority: DWORD
});

var _CTL_VERIFY_USAGE_PARA = new StructT('_CTL_VERIFY_USAGE_PARA', {
 cbSize: DWORD,
 ListIdentifier: CRYPT_DATA_BLOB,
 cCtlStore: DWORD,
 rghCtlStore: VoidT.Δ.Δ,
 cSignerStore: DWORD,
 rghSignerStore: VoidT.Δ.Δ
});

var _CTL_VERIFY_USAGE_STATUS = new StructT('_CTL_VERIFY_USAGE_STATUS', {
 cbSize: DWORD,
 dwError: DWORD,
 dwFlags: DWORD,
 ppCtl: VOIDPTR.Δ,
 dwCtlEntryIndex: DWORD,
 ppSigner: VOIDPTR.Δ,
 dwSignerIndex: DWORD
});

var _CERT_REVOCATION_CRL_INFO = new StructT('_CERT_REVOCATION_CRL_INFO', {
 cbSize: DWORD,
 pBaseCrlContext: PCCRL_CONTEXT,
 pDeltaCrlContext: PCCRL_CONTEXT,
 pCrlEntry: PCRL_ENTRY,
 fDeltaCrlEntry: BOOL
});

var _CERT_REVOCATION_CHAIN_PARA = new StructT('_CERT_REVOCATION_CHAIN_PARA', {
 cbSize: DWORD,
 hChainEngine: HCERTCHAINENGINE,
 hAdditionalStore: HCERTSTORE,
 dwChainFlags: DWORD,
 dwUrlRetrievalTimeout: DWORD,
 pftCurrentTime: LPFILETIME,
 pftCacheResync: LPFILETIME,
 cbMaxUrlRetrievalByteCount: DWORD
});

var _CERT_REVOCATION_PARA = new StructT('_CERT_REVOCATION_PARA', {
 cbSize: DWORD,
 pIssuerCert: PCCERT_CONTEXT,
 cCertStore: DWORD,
 rgCertStore: VoidT.Δ.Δ,
 hCrlStore: HCERTSTORE,
 pftTimeToUse: LPFILETIME
});

var _CERT_REVOCATION_STATUS = new StructT('_CERT_REVOCATION_STATUS', {
 cbSize: DWORD,
 dwIndex: DWORD,
 dwError: DWORD,
 dwReason: DWORD,
 fHasFreshnessTime: BOOL,
 dwFreshnessTime: DWORD
});

var _CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA = new StructT('_CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA', {
 cOID: DWORD,
 rgpszOID: int8.Δ.Δ
});

var _CRYPT_SIGN_MESSAGE_PARA = new StructT('_CRYPT_SIGN_MESSAGE_PARA', {
 cbSize: DWORD,
 dwMsgEncodingType: DWORD,
 pSigningCert: PCCERT_CONTEXT,
 HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 pvHashAuxInfo: VoidT.Δ,
 cMsgCert: DWORD,
 rgpMsgCert: VOIDPTR.Δ,
 cMsgCrl: DWORD,
 rgpMsgCrl: VOIDPTR.Δ,
 cAuthAttr: DWORD,
 rgAuthAttr: PCRYPT_ATTRIBUTE,
 cUnauthAttr: DWORD,
 rgUnauthAttr: PCRYPT_ATTRIBUTE,
 dwFlags: DWORD,
 dwInnerContentType: DWORD
});

var _CRYPT_VERIFY_MESSAGE_PARA = new StructT('_CRYPT_VERIFY_MESSAGE_PARA', {
 cbSize: DWORD,
 dwMsgAndCertEncodingType: DWORD,
 hCryptProv: HCRYPTPROV_LEGACY,
 pfnGetSignerCertificate: PFN_CRYPT_GET_SIGNER_CERTIFICATE,
 pvGetArg: VoidT.Δ
});

var _CRYPT_ENCRYPT_MESSAGE_PARA = new StructT('_CRYPT_ENCRYPT_MESSAGE_PARA', {
 cbSize: DWORD,
 dwMsgEncodingType: DWORD,
 hCryptProv: HCRYPTPROV_LEGACY,
 ContentEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 pvEncryptionAuxInfo: VoidT.Δ,
 dwFlags: DWORD,
 dwInnerContentType: DWORD
});

var _CRYPT_DECRYPT_MESSAGE_PARA = new StructT('_CRYPT_DECRYPT_MESSAGE_PARA', {
 cbSize: DWORD,
 dwMsgAndCertEncodingType: DWORD,
 cCertStore: DWORD,
 rghCertStore: VoidT.Δ.Δ
});

var _CRYPT_HASH_MESSAGE_PARA = new StructT('_CRYPT_HASH_MESSAGE_PARA', {
 cbSize: DWORD,
 dwMsgEncodingType: DWORD,
 hCryptProv: HCRYPTPROV_LEGACY,
 HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 pvHashAuxInfo: VoidT.Δ
});

var _CRYPT_KEY_SIGN_MESSAGE_PARA = new StructT('_CRYPT_KEY_SIGN_MESSAGE_PARA', {
 cbSize: DWORD,
 dwMsgAndCertEncodingType: DWORD,
 dwKeySpec: DWORD,
 HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 pvHashAuxInfo: VoidT.Δ,
 PubKeyAlgorithm: CRYPT_ALGORITHM_IDENTIFIER
});

var _CRYPT_KEY_VERIFY_MESSAGE_PARA = new StructT('_CRYPT_KEY_VERIFY_MESSAGE_PARA', {
 cbSize: DWORD,
 dwMsgEncodingType: DWORD,
 hCryptProv: HCRYPTPROV_LEGACY
});

var _CERT_CHAIN = new StructT('_CERT_CHAIN', {
 cCerts: DWORD,
 certs: PCERT_BLOB,
 keyLocatorInfo: CRYPT_KEY_PROV_INFO
});

var _CRYPT_BLOB_ARRAY = new StructT('_CRYPT_BLOB_ARRAY', {
 cBlob: DWORD,
 rgBlob: PCRYPT_DATA_BLOB
});

var _CRYPT_CREDENTIALS = new StructT('_CRYPT_CREDENTIALS', {
 cbSize: DWORD,
 pszCredentialsOid: LPCSTR,
 pvCredentials: LPVOID
});

var CRYPT_PASSWORD_CREDENTIALS = new StructT('CRYPT_PASSWORD_CREDENTIALS', {
 cbSize: DWORD,
 pszUsername: LPSTR,
 pszPassword: LPSTR
});

var _CRYPT_PASSWORD_CREDENTIALSW = new StructT('_CRYPT_PASSWORD_CREDENTIALSW', {
 cbSize: DWORD,
 pszUsername: LPWSTR,
 pszPassword: LPWSTR
});

var _CRYPTNET_URL_CACHE_PRE_FETCH_INFO = new StructT('_CRYPTNET_URL_CACHE_PRE_FETCH_INFO', {
 cbSize: DWORD,
 dwObjectType: DWORD,
 dwError: DWORD,
 dwReserved: DWORD,
 ThisUpdateTime: FILETIME,
 NextUpdateTime: FILETIME,
 PublishTime: FILETIME
});

var _CRYPTNET_URL_CACHE_FLUSH_INFO = new StructT('_CRYPTNET_URL_CACHE_FLUSH_INFO', {
 cbSize: DWORD,
 dwExemptSeconds: DWORD,
 ExpireTime: FILETIME
});

var _CRYPTNET_URL_CACHE_RESPONSE_INFO = new StructT('_CRYPTNET_URL_CACHE_RESPONSE_INFO', {
 cbSize: DWORD,
 wResponseType: WORD,
 wResponseFlags: WORD,
 LastModifiedTime: FILETIME,
 dwMaxAge: DWORD,
 pwszETag: LPCWSTR,
 dwProxyId: DWORD
});

var _CRYPT_RETRIEVE_AUX_INFO = new StructT('_CRYPT_RETRIEVE_AUX_INFO', {
 cbSize: DWORD,
 pLastSyncTime: uint.Δ,
 dwMaxUrlRetrievalByteCount: DWORD,
 pPreFetchInfo: PCRYPTNET_URL_CACHE_PRE_FETCH_INFO,
 pFlushInfo: PCRYPTNET_URL_CACHE_FLUSH_INFO,
 ppResponseInfo: VOIDPTR.Δ,
 pwszCacheFileNamePrefix: LPWSTR,
 pftCacheResync: LPFILETIME,
 fProxyCacheRetrieval: BOOL,
 dwHttpStatusCode: DWORD
});

var _CRYPT_ASYNC_RETRIEVAL_COMPLETION = new StructT('_CRYPT_ASYNC_RETRIEVAL_COMPLETION', {
 pfnCompletion: PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC,
 pvCompletion: LPVOID
});

var _CRYPT_URL_ARRAY = new StructT('_CRYPT_URL_ARRAY', {
 cUrl: DWORD,
 rgwszUrl: ushort.Δ.Δ
});

var _CRYPT_URL_INFO = new StructT('_CRYPT_URL_INFO', {
 cbSize: DWORD,
 dwSyncDeltaTime: DWORD,
 cGroup: DWORD,
 rgcGroupEntry: ulong.Δ
});

var _CERT_CRL_CONTEXT_PAIR = new StructT('_CERT_CRL_CONTEXT_PAIR', {
 pCertContext: PCCERT_CONTEXT,
 pCrlContext: PCCRL_CONTEXT
});

var _CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO = new StructT('_CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO', {
 cbSize: DWORD,
 iDeltaCrlIndicator: int,
 pftCacheResync: LPFILETIME,
 pLastSyncTime: LPFILETIME,
 pMaxAgeTime: LPFILETIME,
 pChainPara: PCERT_REVOCATION_CHAIN_PARA,
 pDeltaCrlIndicator: PCRYPT_INTEGER_BLOB
});

var _CRYPTPROTECT_PROMPTSTRUCT = new StructT('_CRYPTPROTECT_PROMPTSTRUCT', {
 cbSize: DWORD,
 dwPromptFlags: DWORD,
 hwndApp: HWND,
 szPrompt: LPCWSTR
});

var _CERT_CHAIN_ENGINE_CONFIG = new StructT('_CERT_CHAIN_ENGINE_CONFIG', {
 cbSize: DWORD,
 hRestrictedRoot: HCERTSTORE,
 hRestrictedTrust: HCERTSTORE,
 hRestrictedOther: HCERTSTORE,
 cAdditionalStore: DWORD,
 rghAdditionalStore: VoidT.Δ.Δ,
 dwFlags: DWORD,
 dwUrlRetrievalTimeout: DWORD,
 MaximumCachedCertificates: DWORD,
 CycleDetectionModulus: DWORD,
 hExclusiveRoot: HCERTSTORE,
 hExclusiveTrustedPeople: HCERTSTORE
});

var _CERT_TRUST_STATUS = new StructT('_CERT_TRUST_STATUS', {
 dwErrorStatus: DWORD,
 dwInfoStatus: DWORD
});

var _CERT_REVOCATION_INFO = new StructT('_CERT_REVOCATION_INFO', {
 cbSize: DWORD,
 dwRevocationResult: DWORD,
 pszRevocationOid: LPCSTR,
 pvOidSpecificInfo: LPVOID,
 fHasFreshnessTime: BOOL,
 dwFreshnessTime: DWORD,
 pCrlInfo: PCERT_REVOCATION_CRL_INFO
});

var _CERT_TRUST_LIST_INFO = new StructT('_CERT_TRUST_LIST_INFO', {
 cbSize: DWORD,
 pCtlEntry: PCTL_ENTRY,
 pCtlContext: PCCTL_CONTEXT
});

var _CERT_CHAIN_ELEMENT = new StructT('_CERT_CHAIN_ELEMENT', {
 cbSize: DWORD,
 pCertContext: PCCERT_CONTEXT,
 TrustStatus: CERT_TRUST_STATUS,
 pRevocationInfo: PCERT_REVOCATION_INFO,
 pIssuanceUsage: PCERT_ENHKEY_USAGE,
 pApplicationUsage: PCERT_ENHKEY_USAGE,
 pwszExtendedErrorInfo: LPCWSTR
});

var _CERT_SIMPLE_CHAIN = new StructT('_CERT_SIMPLE_CHAIN', {
 cbSize: DWORD,
 TrustStatus: CERT_TRUST_STATUS,
 cElement: DWORD,
 rgpElement: VOIDPTR.Δ,
 pTrustListInfo: PCERT_TRUST_LIST_INFO,
 fHasRevocationFreshnessTime: BOOL,
 dwRevocationFreshnessTime: DWORD
});

var _CERT_CHAIN_CONTEXT = new StructT('_CERT_CHAIN_CONTEXT', {
 cbSize: DWORD,
 TrustStatus: CERT_TRUST_STATUS,
 cChain: DWORD,
 rgpChain: VOIDPTR.Δ,
 cLowerQualityChainContext: DWORD,
 rgpLowerQualityChainContext: VOIDPTR.Δ,
 fHasRevocationFreshnessTime: BOOL,
 dwRevocationFreshnessTime: DWORD,
 dwCreateFlags: DWORD,
 ChainId: GUID
});

var _CERT_USAGE_MATCH = new StructT('_CERT_USAGE_MATCH', {
 dwType: DWORD,
 Usage: CERT_ENHKEY_USAGE
});

var _CTL_USAGE_MATCH = new StructT('_CTL_USAGE_MATCH', {
 dwType: DWORD,
 Usage: CTL_USAGE
});

var _CERT_CHAIN_PARA = new StructT('_CERT_CHAIN_PARA', {
 cbSize: DWORD,
 RequestedUsage: CERT_USAGE_MATCH
});

var _CRL_REVOCATION_INFO = new StructT('_CRL_REVOCATION_INFO', {
 pCrlEntry: PCRL_ENTRY,
 pCrlContext: PCCRL_CONTEXT,
 pCrlIssuerChain: PCCERT_CHAIN_CONTEXT
});

var _CERT_CHAIN_FIND_BY_ISSUER_PARA = new StructT('_CERT_CHAIN_FIND_BY_ISSUER_PARA', {
 cbSize: DWORD,
 pszUsageIdentifier: LPCSTR,
 dwKeySpec: DWORD,
 dwAcquirePrivateKeyFlags: DWORD,
 cIssuer: DWORD,
 rgIssuer: uint.Δ,
 pfnFindCallback: PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK,
 pvFindArg: VoidT.Δ
});

var _CERT_CHAIN_POLICY_PARA = new StructT('_CERT_CHAIN_POLICY_PARA', {
 cbSize: DWORD,
 dwFlags: DWORD,
 pvExtraPolicyPara: VoidT.Δ
});

var _CERT_CHAIN_POLICY_STATUS = new StructT('_CERT_CHAIN_POLICY_STATUS', {
 cbSize: DWORD,
 dwError: DWORD,
 lChainIndex: LONG,
 lElementIndex: LONG,
 pvExtraPolicyStatus: VoidT.Δ
});

var _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA = new StructT('_AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA', {
 cbSize: DWORD,
 dwRegPolicySettings: DWORD,
 pSignerInfo: PCMSG_SIGNER_INFO
});

var _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS = new StructT('_AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS', {
 cbSize: DWORD,
 fCommercial: BOOL
});

var _AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA = new StructT('_AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA', {
 cbSize: DWORD,
 dwRegPolicySettings: DWORD,
 fCommercial: BOOL
});

var _HTTPSPolicyCallbackData = new StructT('_HTTPSPolicyCallbackData', {
 dwAuthType: DWORD,
 fdwChecks: DWORD,
 pwszServerName: ushort.Δ
});

var _EV_EXTRA_CERT_CHAIN_POLICY_PARA = new StructT('_EV_EXTRA_CERT_CHAIN_POLICY_PARA', {
 cbSize: DWORD,
 dwRootProgramQualifierFlags: DWORD
});

var _EV_EXTRA_CERT_CHAIN_POLICY_STATUS = new StructT('_EV_EXTRA_CERT_CHAIN_POLICY_STATUS', {
 cbSize: DWORD,
 dwQualifiers: DWORD,
 dwIssuanceUsageIndex: DWORD
});

var _CRYPT_PKCS12_PBE_PARAMS = new StructT('_CRYPT_PKCS12_PBE_PARAMS', {
 iIterations: int,
 cbSalt: ULONG
});

var _CERT_SERVER_OCSP_RESPONSE_CONTEXT = new StructT('_CERT_SERVER_OCSP_RESPONSE_CONTEXT', {
 cbSize: DWORD,
 pbEncodedOcspResponse: uchar.Δ,
 cbEncodedOcspResponse: DWORD
});

var _CERT_SELECT_CHAIN_PARA = new StructT('_CERT_SELECT_CHAIN_PARA', {
 hChainEngine: HCERTCHAINENGINE,
 pTime: PFILETIME,
 hAdditionalStore: HCERTSTORE,
 pChainPara: PCERT_CHAIN_PARA,
 dwFlags: DWORD
});

var _CERT_SELECT_CRITERIA = new StructT('_CERT_SELECT_CRITERIA', {
 dwType: DWORD,
 cPara: DWORD,
 ppPara: VoidT.Δ.Δ
});

var _CRYPT_TIMESTAMP_REQUEST = new StructT('_CRYPT_TIMESTAMP_REQUEST', {
 dwVersion: DWORD,
 HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 HashedMessage: CRYPT_DER_BLOB,
 pszTSAPolicyId: LPSTR,
 Nonce: CRYPT_INTEGER_BLOB,
 fCertReq: BOOL,
 cExtension: DWORD,
 rgExtension: PCERT_EXTENSION
});

var _CRYPT_TIMESTAMP_RESPONSE = new StructT('_CRYPT_TIMESTAMP_RESPONSE', {
 dwStatus: DWORD,
 cFreeText: DWORD,
 rgFreeText: ushort.Δ.Δ,
 FailureInfo: CRYPT_BIT_BLOB,
 ContentInfo: CRYPT_DER_BLOB
});

var _CRYPT_TIMESTAMP_ACCURACY = new StructT('_CRYPT_TIMESTAMP_ACCURACY', {
 dwSeconds: DWORD,
 dwMillis: DWORD,
 dwMicros: DWORD
});

var _CRYPT_TIMESTAMP_INFO = new StructT('_CRYPT_TIMESTAMP_INFO', {
 dwVersion: DWORD,
 pszTSAPolicyId: LPSTR,
 HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 HashedMessage: CRYPT_DER_BLOB,
 SerialNumber: CRYPT_INTEGER_BLOB,
 ftTime: FILETIME,
 pvAccuracy: PCRYPT_TIMESTAMP_ACCURACY,
 fOrdering: BOOL,
 Nonce: CRYPT_DER_BLOB,
 Tsa: CRYPT_DER_BLOB,
 cExtension: DWORD,
 rgExtension: PCERT_EXTENSION
});

var _CRYPT_TIMESTAMP_CONTEXT = new StructT('_CRYPT_TIMESTAMP_CONTEXT', {
 cbEncoded: DWORD,
 pbEncoded: uchar.Δ,
 pTimeStamp: PCRYPT_TIMESTAMP_INFO
});

var _CRYPT_TIMESTAMP_PARA = new StructT('_CRYPT_TIMESTAMP_PARA', {
 pszTSAPolicyId: LPCSTR,
 fRequestCerts: BOOL,
 Nonce: CRYPT_INTEGER_BLOB,
 cExtension: DWORD,
 rgExtension: PCERT_EXTENSION
});

var _CERTIFICATE_BLOB = new StructT('_CERTIFICATE_BLOB', {
 dwCertEncodingType: DWORD,
 cbData: DWORD,
 pbData: PBYTE
});

var _EFS_HASH_BLOB = new StructT('_EFS_HASH_BLOB', {
 cbData: DWORD,
 pbData: PBYTE
});

var _EFS_RPC_BLOB = new StructT('_EFS_RPC_BLOB', {
 cbData: DWORD,
 pbData: PBYTE
});

var _EFS_PIN_BLOB = new StructT('_EFS_PIN_BLOB', {
 cbPadding: DWORD,
 cbData: DWORD,
 pbData: PBYTE
});

var _EFS_KEY_INFO = new StructT('_EFS_KEY_INFO', {
 dwVersion: DWORD,
 Entropy: ULONG,
 Algorithm: ALG_ID,
 KeyLength: ULONG
});

var _EFS_COMPATIBILITY_INFO = new StructT('_EFS_COMPATIBILITY_INFO', {
 EfsVersion: DWORD
});

var _EFS_DECRYPTION_STATUS_INFO = new StructT('_EFS_DECRYPTION_STATUS_INFO', {
 dwDecryptionError: DWORD,
 dwHashOffset: DWORD,
 cbHash: DWORD
});

var _EFS_ENCRYPTION_STATUS_INFO = new StructT('_EFS_ENCRYPTION_STATUS_INFO', {
 bHasCurrentKey: BOOL,
 dwEncryptionError: DWORD
});

var _ENCRYPTION_CERTIFICATE = new StructT('_ENCRYPTION_CERTIFICATE', {
 cbTotalLength: DWORD,
 pUserSid: uint.Δ,
 pCertBlob: PEFS_CERTIFICATE_BLOB
});

var _ENCRYPTION_CERTIFICATE_HASH = new StructT('_ENCRYPTION_CERTIFICATE_HASH', {
 cbTotalLength: DWORD,
 pUserSid: uint.Δ,
 pHash: PEFS_HASH_BLOB,
 lpDisplayInformation: LPWSTR
});

var _ENCRYPTION_CERTIFICATE_HASH_LIST = new StructT('_ENCRYPTION_CERTIFICATE_HASH_LIST', {
 nCert_Hash: DWORD,
 pUsers: VOIDPTR.Δ
});

var _ENCRYPTION_CERTIFICATE_LIST = new StructT('_ENCRYPTION_CERTIFICATE_LIST', {
 nUsers: DWORD,
 pUsers: VOIDPTR.Δ
});

var _ENCRYPTED_FILE_METADATA_SIGNATURE = new StructT('_ENCRYPTED_FILE_METADATA_SIGNATURE', {
 dwEfsAccessType: DWORD,
 pCertificatesAdded: PENCRYPTION_CERTIFICATE_HASH_LIST,
 pEncryptionCertificate: PENCRYPTION_CERTIFICATE,
 pEfsStreamSignature: PEFS_RPC_BLOB
});

var undefined = new StructT('undefined', {
 LookupContext: RPC_NS_HANDLE,
 ProposedHandle: RPC_BINDING_HANDLE,
 Bindings: uint.Δ
});

var undefined = new StructT('undefined', {
 pad: ARRAY(undefined, 2),
 userContext: VoidT.Δ
});

var _SCONTEXT_QUEUE = new StructT('_SCONTEXT_QUEUE', {
 NumberOfObjects: ulong,
 ArrayOfObjects: VOIDPTR.Δ
});

var MIDL_STUB_MESSAGE = new StructT('MIDL_STUB_MESSAGE', {
 RpcMsg: PRPC_MESSAGE,
 Buffer: uchar.Δ,
 BufferStart: uchar.Δ,
 BufferEnd: uchar.Δ,
 BufferMark: uchar.Δ,
 BufferLength: ulong,
 MemorySize: ulong,
 Memory: uchar.Δ,
 IsClient: uchar,
 Pad: uchar,
 uFlags2: ushort,
 ReuseBuffer: int,
 pAllocAllNodesContext: NDR_ALLOC_ALL_NODES_CONTEXT.Δ,
 pPointerQueueState: NDR_POINTER_QUEUE_STATE.Δ,
 IgnoreEmbeddedPointers: int,
 PointerBufferMark: uchar.Δ,
 CorrDespIncrement: uchar,
 uFlags: uchar,
 UniquePtrCount: ushort,
 MaxCount: ULONG_PTR,
 Offset: ulong,
 ActualCount: ulong,
 pfnAllocate: UNEXPOSED.Δ,
 pfnFree: UNEXPOSED.Δ,
 StackTop: uchar.Δ,
 pPresentedType: uchar.Δ,
 pTransmitType: uchar.Δ,
 SavedHandle: handle_t,
 StubDesc: _MIDL_STUB_DESC.Δ,
 FullPtrXlatTables: _FULL_PTR_XLAT_TABLES.Δ,
 FullPtrRefId: ulong,
 PointerLength: ulong,
 fInDontFree: int,
 fDontCallFreeInst: int,
 fInOnlyParam: int,
 fHasReturn: int,
 fHasExtensions: int,
 fHasNewCorrDesc: int,
 fIsIn: int,
 fIsOut: int,
 fIsOicf: int,
 fBufferValid: int,
 fHasMemoryValidateCallback: int,
 fInFree: int,
 fNeedMCCP: int,
 fUnused: int,
 fUnused2: int,
 dwDestContext: ulong,
 pvDestContext: VoidT.Δ,
 SavedContextHandles: VOIDPTR.Δ,
 ParamNumber: long,
 pRpcChannelBuffer: IRpcChannelBuffer.Δ,
 pArrayInfo: PARRAY_INFO,
 SizePtrCountArray: ulong.Δ,
 SizePtrOffsetArray: ulong.Δ,
 SizePtrLengthArray: ulong.Δ,
 pArgQueue: VoidT.Δ,
 dwStubPhase: ulong,
 LowStackMark: VoidT.Δ,
 pAsyncMsg: PNDR_ASYNC_MESSAGE,
 pCorrInfo: PNDR_CORRELATION_INFO,
 pCorrMemory: uchar.Δ,
 pMemoryList: VoidT.Δ,
 pCSInfo: INT_PTR,
 ConformanceMark: uchar.Δ,
 VarianceMark: uchar.Δ,
 Unused: INT_PTR,
 pContext: _NDR_PROC_CONTEXT.Δ,
 ContextHandleHash: VoidT.Δ,
 pUserMarshalList: VoidT.Δ,
 Reserved51_3: INT_PTR,
 Reserved51_4: INT_PTR,
 Reserved51_5: INT_PTR
});

var _MIDL_STUB_DESC = new StructT('_MIDL_STUB_DESC', {
 RpcInterfaceInformation: VoidT.Δ,
 pfnAllocate: UNEXPOSED.Δ,
 pfnFree: UNEXPOSED.Δ,
 IMPLICIT_HANDLE_INFO: c:rpcndr.h@30309@S@_MIDL_STUB_DESC@Ua,
 apfnNdrRundownRoutines: NDR_RUNDOWN.Δ,
 aGenericBindingRoutinePairs: uint.Δ,
 apfnExprEval: EXPR_EVAL.Δ,
 aXmitQuintuple: uint.Δ,
 pFormatTypes: uchar.Δ,
 fCheckBounds: int,
 Version: ulong,
 pMallocFreeStruct: uint.Δ,
 MIDLVersion: long,
 CommFaultOffsets: uint.Δ,
 aUserMarshalQuadruple: uint.Δ,
 NotifyRoutineTable: NDR_NOTIFY_ROUTINE.Δ,
 mFlags: ULONG_PTR,
 CsRoutineTables: uint.Δ,
 ProxyServerInfo: VoidT.Δ,
 pExprInfo: uint.Δ
});

var _FULL_PTR_XLAT_TABLES = new StructT('_FULL_PTR_XLAT_TABLES', {
 RefIdToPointer: VoidT.Δ,
 PointerToRefId: VoidT.Δ,
 NextRefId: ulong,
 XlatSide: XLAT_SIDE
});

var undefined = new StructT('undefined', {
 Dimension: long,
 BufferConformanceMark: ulong.Δ,
 BufferVarianceMark: ulong.Δ,
 MaxCountArray: ulong.Δ,
 OffsetArray: ulong.Δ,
 ActualCountArray: ulong.Δ
});



var _MIDL_SYNTAX_INFO = new StructT('_MIDL_SYNTAX_INFO', {
 TransferSyntax: RPC_SYNTAX_IDENTIFIER,
 DispatchTable: uint.Δ,
 ProcString: PFORMAT_STRING,
 FmtStringOffset: ushort.Δ,
 TypeString: PFORMAT_STRING,
 aUserMarshalQuadruple: VoidT.Δ,
 pReserved1: ULONG_PTR,
 pReserved2: ULONG_PTR
});




var IRpcChannelBuffer = new StructT('IRpcChannelBuffer', {
 lpVtbl: IRpcChannelBufferVtbl.Δ
});

var _GENERIC_BINDING_ROUTINE_PAIR = new StructT('_GENERIC_BINDING_ROUTINE_PAIR', {
 pfnBind: GENERIC_BINDING_ROUTINE,
 pfnUnbind: GENERIC_UNBIND_ROUTINE
});

var __GENERIC_BINDING_INFO = new StructT('__GENERIC_BINDING_INFO', {
 pObj: VoidT.Δ,
 Size: uint,
 pfnBind: GENERIC_BINDING_ROUTINE,
 pfnUnbind: GENERIC_UNBIND_ROUTINE
});

var _XMIT_ROUTINE_QUINTUPLE = new StructT('_XMIT_ROUTINE_QUINTUPLE', {
 pfnTranslateToXmit: XMIT_HELPER_ROUTINE,
 pfnTranslateFromXmit: XMIT_HELPER_ROUTINE,
 pfnFreeXmit: XMIT_HELPER_ROUTINE,
 pfnFreeInst: XMIT_HELPER_ROUTINE
});

var _USER_MARSHAL_ROUTINE_QUADRUPLE = new StructT('_USER_MARSHAL_ROUTINE_QUADRUPLE', {
 pfnBufferSize: USER_MARSHAL_SIZING_ROUTINE,
 pfnMarshall: USER_MARSHAL_MARSHALLING_ROUTINE,
 pfnUnmarshall: USER_MARSHAL_UNMARSHALLING_ROUTINE,
 pfnFree: USER_MARSHAL_FREEING_ROUTINE
});

var _USER_MARSHAL_CB = new StructT('_USER_MARSHAL_CB', {
 Flags: ulong,
 pStubMsg: PMIDL_STUB_MESSAGE,
 pReserve: PFORMAT_STRING,
 Signature: ulong,
 CBType: USER_MARSHAL_CB_TYPE,
 pFormat: PFORMAT_STRING,
 pTypeFormat: PFORMAT_STRING
});

var _MALLOC_FREE_STRUCT = new StructT('_MALLOC_FREE_STRUCT', {
 pfnAllocate: UNEXPOSED.Δ,
 pfnFree: UNEXPOSED.Δ
});

var _COMM_FAULT_OFFSETS = new StructT('_COMM_FAULT_OFFSETS', {
 CommOffset: short,
 FaultOffset: short
});

var _NDR_CS_SIZE_CONVERT_ROUTINES = new StructT('_NDR_CS_SIZE_CONVERT_ROUTINES', {
 pfnNetSize: CS_TYPE_NET_SIZE_ROUTINE,
 pfnToNetCs: CS_TYPE_TO_NETCS_ROUTINE,
 pfnLocalSize: CS_TYPE_LOCAL_SIZE_ROUTINE,
 pfnFromNetCs: CS_TYPE_FROM_NETCS_ROUTINE
});

var _NDR_CS_ROUTINES = new StructT('_NDR_CS_ROUTINES', {
 pSizeConvertRoutines: uint.Δ,
 pTagGettingRoutines: CS_TAG_GETTING_ROUTINE.Δ
});

var _NDR_EXPR_DESC = new StructT('_NDR_EXPR_DESC', {
 pOffset: ushort.Δ,
 pFormatExpr: PFORMAT_STRING
});

var _MIDL_FORMAT_STRING = new StructT('_MIDL_FORMAT_STRING', {
 Pad: short,
 Format: UNEXPOSED
});

var _MIDL_SERVER_INFO_ = new StructT('_MIDL_SERVER_INFO_', {
 pStubDesc: PMIDL_STUB_DESC,
 DispatchTable: VOIDPTR.Δ,
 ProcString: PFORMAT_STRING,
 FmtStringOffset: ushort.Δ,
 ThunkTable: STUB_THUNK.Δ,
 pTransferSyntax: PRPC_SYNTAX_IDENTIFIER,
 nCount: ULONG_PTR,
 pSyntaxInfo: PMIDL_SYNTAX_INFO
});

var _MIDL_STUBLESS_PROXY_INFO = new StructT('_MIDL_STUBLESS_PROXY_INFO', {
 pStubDesc: PMIDL_STUB_DESC,
 ProcFormatString: PFORMAT_STRING,
 FormatStringOffset: ushort.Δ,
 pTransferSyntax: PRPC_SYNTAX_IDENTIFIER,
 nCount: ULONG_PTR,
 pSyntaxInfo: PMIDL_SYNTAX_INFO
});

var IRpcStubBuffer = new StructT('IRpcStubBuffer', {
 lpVtbl: IRpcStubBufferVtbl.Δ
});

var _NDR_USER_MARSHAL_INFO_LEVEL1 = new StructT('_NDR_USER_MARSHAL_INFO_LEVEL1', {
 Buffer: VoidT.Δ,
 BufferSize: ulong,
 pfnAllocate: UNEXPOSED.Δ,
 pfnFree: UNEXPOSED.Δ,
 pRpcChannelBuffer: IRpcChannelBuffer.Δ,
 Reserved: ARRAY(ULONG_PTR, 5)
});

var _NDR_USER_MARSHAL_INFO = new StructT('_NDR_USER_MARSHAL_INFO', {
 InformationLevel: ulong
});

var tagRemHGLOBAL = new StructT('tagRemHGLOBAL', {
 fNullHGlobal: long,
 cbData: ulong,
 data: ARRAY(byte,  1 )
});

var tagRemHMETAFILEPICT = new StructT('tagRemHMETAFILEPICT', {
 mm: long,
 xExt: long,
 yExt: long,
 cbData: ulong,
 data: ARRAY(byte,  1 )
});

var tagRemHENHMETAFILE = new StructT('tagRemHENHMETAFILE', {
 cbData: ulong,
 data: ARRAY(byte,  1 )
});

var tagRemHBITMAP = new StructT('tagRemHBITMAP', {
 cbData: ulong,
 data: ARRAY(byte,  1 )
});

var tagRemHPALETTE = new StructT('tagRemHPALETTE', {
 cbData: ulong,
 data: ARRAY(byte,  1 )
});

var tagRemBRUSH = new StructT('tagRemBRUSH', {
 cbData: ulong,
 data: ARRAY(byte,  1 )
});

var _COAUTHIDENTITY = new StructT('_COAUTHIDENTITY', {
 User: ushort.Δ,
 UserLength: ULONG,
 Domain: ushort.Δ,
 DomainLength: ULONG,
 Password: ushort.Δ,
 PasswordLength: ULONG,
 Flags: ULONG
});

var _COAUTHINFO = new StructT('_COAUTHINFO', {
 dwAuthnSvc: DWORD,
 dwAuthzSvc: DWORD,
 pwszServerPrincName: LPWSTR,
 dwAuthnLevel: DWORD,
 dwImpersonationLevel: DWORD,
 pAuthIdentityData: uint.Δ,
 dwCapabilities: DWORD
});

var _BYTE_BLOB = new StructT('_BYTE_BLOB', {
 clSize: ulong,
 abData: ARRAY(byte,  1 )
});

var _WORD_BLOB = new StructT('_WORD_BLOB', {
 clSize: ulong,
 asData: ARRAY(undefined,  1 )
});

var _DWORD_BLOB = new StructT('_DWORD_BLOB', {
 clSize: ulong,
 alData: ARRAY(undefined,  1 )
});

var _FLAGGED_BYTE_BLOB = new StructT('_FLAGGED_BYTE_BLOB', {
 fFlags: ulong,
 clSize: ulong,
 abData: ARRAY(byte,  1 )
});

var _FLAGGED_WORD_BLOB = new StructT('_FLAGGED_WORD_BLOB', {
 fFlags: ulong,
 clSize: ulong,
 asData: ARRAY(undefined,  1 )
});

var _BYTE_SIZEDARR = new StructT('_BYTE_SIZEDARR', {
 clSize: ulong,
 pData: uchar.Δ
});

var _SHORT_SIZEDARR = new StructT('_SHORT_SIZEDARR', {
 clSize: ulong,
 pData: ushort.Δ
});

var _LONG_SIZEDARR = new StructT('_LONG_SIZEDARR', {
 clSize: ulong,
 pData: ulong.Δ
});

var _HYPER_SIZEDARR = new StructT('_HYPER_SIZEDARR', {
 clSize: ulong,
 pData: longlong.Δ
});

var _userCLIPFORMAT = new StructT('_userCLIPFORMAT', {
 fContext: long,
 u: __MIDL_IWinTypes_0001
});

var _GDI_NONREMOTE = new StructT('_GDI_NONREMOTE', {
 fContext: long,
 u: __MIDL_IWinTypes_0002
});

var _userHGLOBAL = new StructT('_userHGLOBAL', {
 fContext: long,
 u: __MIDL_IWinTypes_0003
});

var _userHMETAFILE = new StructT('_userHMETAFILE', {
 fContext: long,
 u: __MIDL_IWinTypes_0004
});

var _remoteMETAFILEPICT = new StructT('_remoteMETAFILEPICT', {
 mm: long,
 xExt: long,
 yExt: long,
 hMF: uint.Δ
});

var _userHMETAFILEPICT = new StructT('_userHMETAFILEPICT', {
 fContext: long,
 u: __MIDL_IWinTypes_0005
});

var _userHENHMETAFILE = new StructT('_userHENHMETAFILE', {
 fContext: long,
 u: __MIDL_IWinTypes_0006
});

var _userBITMAP = new StructT('_userBITMAP', {
 bmType: LONG,
 bmWidth: LONG,
 bmHeight: LONG,
 bmWidthBytes: LONG,
 bmPlanes: WORD,
 bmBitsPixel: WORD,
 cbSize: ULONG,
 pBuffer: ARRAY(byte,  1 )
});

var _userHBITMAP = new StructT('_userHBITMAP', {
 fContext: long,
 u: __MIDL_IWinTypes_0007
});

var _userHPALETTE = new StructT('_userHPALETTE', {
 fContext: long,
 u: __MIDL_IWinTypes_0008
});

var _RemotableHandle = new StructT('_RemotableHandle', {
 fContext: long,
 u: __MIDL_IWinTypes_0009
});

var undefined = new StructT('undefined', {
 Lo: ulong,
 Hi: long
});

var tagDEC = new StructT('tagDEC', {
 wReserved: USHORT,
 Hi32: ULONG
});

var undefined = new StructT('undefined', {
 scale: BYTE,
 sign: BYTE
});

var undefined = new StructT('undefined', {
 Lo32: ULONG,
 Mid32: ULONG
});

var tagBSTRBLOB = new StructT('tagBSTRBLOB', {
 cbSize: ULONG,
 pData: uchar.Δ
});

var tagBLOB = new StructT('tagBLOB', {
 cbSize: ULONG,
 pBlobData: uchar.Δ
});

var tagCLIPDATA = new StructT('tagCLIPDATA', {
 cbSize: ULONG,
 ulClipFmt: long,
 pClipData: uchar.Δ
});

var SHCOLUMNID = new StructT('SHCOLUMNID', {
 fmtid: GUID,
 pid: DWORD
});

var tagCSPLATFORM = new StructT('tagCSPLATFORM', {
 dwPlatformId: DWORD,
 dwVersionHi: DWORD,
 dwVersionLo: DWORD,
 dwProcessorArch: DWORD
});

var tagQUERYCONTEXT = new StructT('tagQUERYCONTEXT', {
 dwContext: DWORD,
 Platform: CSPLATFORM,
 Locale: LCID,
 dwVersionHi: DWORD,
 dwVersionLo: DWORD
});

var __MIDL___MIDL_itf_wtypes_0000_0001_0001 = new StructT('__MIDL___MIDL_itf_wtypes_0000_0001_0001', {
 tyspec: DWORD,
 tagged_union: __MIDL___MIDL_itf_wtypes_0000_0001_0005
});

var undefined = new StructT('undefined', {
 pPackageName: LPOLESTR,
 PolicyId: GUID
});

var undefined = new StructT('undefined', {
 ObjectId: GUID,
 PolicyId: GUID
});

var _STORAGE_HOTPLUG_INFO = new StructT('_STORAGE_HOTPLUG_INFO', {
 Size: DWORD,
 MediaRemovable: BOOLEAN,
 MediaHotplug: BOOLEAN,
 DeviceHotplug: BOOLEAN,
 WriteCacheEnableOverride: BOOLEAN
});

var _STORAGE_DEVICE_NUMBER = new StructT('_STORAGE_DEVICE_NUMBER', {
 DeviceType: DWORD,
 DeviceNumber: DWORD,
 PartitionNumber: DWORD
});

var _STORAGE_BUS_RESET_REQUEST = new StructT('_STORAGE_BUS_RESET_REQUEST', {
 PathId: BYTE
});

var STORAGE_BREAK_RESERVATION_REQUEST = new StructT('STORAGE_BREAK_RESERVATION_REQUEST', {
 Length: DWORD,
 _unused: BYTE,
 PathId: BYTE,
 TargetId: BYTE,
 Lun: BYTE
});

var _PREVENT_MEDIA_REMOVAL = new StructT('_PREVENT_MEDIA_REMOVAL', {
 PreventMediaRemoval: BOOLEAN
});

var _CLASS_MEDIA_CHANGE_CONTEXT = new StructT('_CLASS_MEDIA_CHANGE_CONTEXT', {
 MediaChangeCount: DWORD,
 NewState: DWORD
});

var _TAPE_STATISTICS = new StructT('_TAPE_STATISTICS', {
 Version: DWORD,
 Flags: DWORD,
 RecoveredWrites: LARGE_INTEGER,
 UnrecoveredWrites: LARGE_INTEGER,
 RecoveredReads: LARGE_INTEGER,
 UnrecoveredReads: LARGE_INTEGER,
 CompressionRatioReads: BYTE,
 CompressionRatioWrites: BYTE
});

var _TAPE_GET_STATISTICS = new StructT('_TAPE_GET_STATISTICS', {
 Operation: DWORD
});

var _DEVICE_MEDIA_INFO = new StructT('_DEVICE_MEDIA_INFO', {
 DeviceSpecific: c:winioctl.h@24730@S@_DEVICE_MEDIA_INFO@Ua
});

var undefined = new StructT('undefined', {
 Cylinders: LARGE_INTEGER,
 MediaType: STORAGE_MEDIA_TYPE,
 TracksPerCylinder: DWORD,
 SectorsPerTrack: DWORD,
 BytesPerSector: DWORD,
 NumberMediaSides: DWORD,
 MediaCharacteristics: DWORD
});

var undefined = new StructT('undefined', {
 Cylinders: LARGE_INTEGER,
 MediaType: STORAGE_MEDIA_TYPE,
 TracksPerCylinder: DWORD,
 SectorsPerTrack: DWORD,
 BytesPerSector: DWORD,
 NumberMediaSides: DWORD,
 MediaCharacteristics: DWORD
});

var undefined = new StructT('undefined', {
 MediaType: STORAGE_MEDIA_TYPE,
 MediaCharacteristics: DWORD,
 CurrentBlockSize: DWORD,
 BusType: STORAGE_BUS_TYPE,
 BusSpecificData: c:winioctl.h@25766@S@_DEVICE_MEDIA_INFO@Ua@Sa@Ua
});

var undefined = new StructT('undefined', {
 MediumType: BYTE,
 DensityCode: BYTE
});

var _GET_MEDIA_TYPES = new StructT('_GET_MEDIA_TYPES', {
 DeviceType: DWORD,
 MediaInfoCount: DWORD,
 MediaInfo: ARRAY(DEVICE_MEDIA_INFO, 1)
});

var _STORAGE_PREDICT_FAILURE = new StructT('_STORAGE_PREDICT_FAILURE', {
 PredictFailure: DWORD,
 VendorSpecific: ARRAY(BYTE, 512)
});

var _STORAGE_PROPERTY_QUERY = new StructT('_STORAGE_PROPERTY_QUERY', {
 PropertyId: STORAGE_PROPERTY_ID,
 QueryType: STORAGE_QUERY_TYPE,
 AdditionalParameters: ARRAY(BYTE, 1)
});

var _STORAGE_DESCRIPTOR_HEADER = new StructT('_STORAGE_DESCRIPTOR_HEADER', {
 Version: DWORD,
 Size: DWORD
});

var _STORAGE_DEVICE_DESCRIPTOR = new StructT('_STORAGE_DEVICE_DESCRIPTOR', {
 Version: DWORD,
 Size: DWORD,
 DeviceType: BYTE,
 DeviceTypeModifier: BYTE,
 RemovableMedia: BOOLEAN,
 CommandQueueing: BOOLEAN,
 VendorIdOffset: DWORD,
 ProductIdOffset: DWORD,
 ProductRevisionOffset: DWORD,
 SerialNumberOffset: DWORD,
 BusType: STORAGE_BUS_TYPE,
 RawPropertiesLength: DWORD,
 RawDeviceProperties: ARRAY(BYTE, 1)
});

var _STORAGE_ADAPTER_DESCRIPTOR = new StructT('_STORAGE_ADAPTER_DESCRIPTOR', {
 Version: DWORD,
 Size: DWORD,
 MaximumTransferLength: DWORD,
 MaximumPhysicalPages: DWORD,
 AlignmentMask: DWORD,
 AdapterUsesPio: BOOLEAN,
 AdapterScansDown: BOOLEAN,
 CommandQueueing: BOOLEAN,
 AcceleratedTransfer: BOOLEAN,
 BusType: BYTE,
 BusMajorVersion: WORD,
 BusMinorVersion: WORD
});

var _STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR = new StructT('_STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR', {
 Version: DWORD,
 Size: DWORD,
 BytesPerCacheLine: DWORD,
 BytesOffsetForCacheAlignment: DWORD,
 BytesPerLogicalSector: DWORD,
 BytesPerPhysicalSector: DWORD,
 BytesOffsetForSectorAlignment: DWORD
});

var _STORAGE_MINIPORT_DESCRIPTOR = new StructT('_STORAGE_MINIPORT_DESCRIPTOR', {
 Version: DWORD,
 Size: DWORD,
 Portdriver: STORAGE_PORT_CODE_SET,
 LUNResetSupported: BOOLEAN,
 TargetResetSupported: BOOLEAN
});

var _STORAGE_IDENTIFIER = new StructT('_STORAGE_IDENTIFIER', {
 CodeSet: STORAGE_IDENTIFIER_CODE_SET,
 Type: STORAGE_IDENTIFIER_TYPE,
 IdentifierSize: WORD,
 NextOffset: WORD,
 Association: STORAGE_ASSOCIATION_TYPE,
 Identifier: ARRAY(BYTE, 1)
});

var _STORAGE_DEVICE_ID_DESCRIPTOR = new StructT('_STORAGE_DEVICE_ID_DESCRIPTOR', {
 Version: DWORD,
 Size: DWORD,
 NumberOfIdentifiers: DWORD,
 Identifiers: ARRAY(BYTE, 1)
});

var _DEVICE_SEEK_PENALTY_DESCRIPTOR = new StructT('_DEVICE_SEEK_PENALTY_DESCRIPTOR', {
 Version: DWORD,
 Size: DWORD,
 IncursSeekPenalty: BOOLEAN
});

var _DEVICE_WRITE_AGGREGATION_DESCRIPTOR = new StructT('_DEVICE_WRITE_AGGREGATION_DESCRIPTOR', {
 Version: DWORD,
 Size: DWORD,
 BenefitsFromWriteAggregation: BOOLEAN
});

var _DEVICE_TRIM_DESCRIPTOR = new StructT('_DEVICE_TRIM_DESCRIPTOR', {
 Version: DWORD,
 Size: DWORD,
 TrimEnabled: BOOLEAN
});

var _DEVICE_DATA_SET_RANGE = new StructT('_DEVICE_DATA_SET_RANGE', {
 StartingOffset: LONGLONG,
 LengthInBytes: DWORDLONG
});

var _DEVICE_MANAGE_DATA_SET_ATTRIBUTES = new StructT('_DEVICE_MANAGE_DATA_SET_ATTRIBUTES', {
 Size: DWORD,
 Action: DEVICE_DATA_MANAGEMENT_SET_ACTION,
 Flags: DWORD,
 ParameterBlockOffset: DWORD,
 ParameterBlockLength: DWORD,
 DataSetRangesOffset: DWORD,
 DataSetRangesLength: DWORD
});

var _DEVICE_DSM_NOTIFICATION_PARAMETERS = new StructT('_DEVICE_DSM_NOTIFICATION_PARAMETERS', {
 Size: DWORD,
 Flags: DWORD,
 NumFileTypeIDs: DWORD,
 FileTypeID: ARRAY(GUID, 1)
});

var _STORAGE_GET_BC_PROPERTIES_OUTPUT = new StructT('_STORAGE_GET_BC_PROPERTIES_OUTPUT', {
 MaximumRequestsPerPeriod: DWORD,
 MinimumPeriod: DWORD,
 MaximumRequestSize: DWORDLONG,
 EstimatedTimePerRequest: DWORD,
 NumOutStandingRequests: DWORD,
 RequestSize: DWORDLONG
});

var _STORAGE_ALLOCATE_BC_STREAM_INPUT = new StructT('_STORAGE_ALLOCATE_BC_STREAM_INPUT', {
 Version: DWORD,
 RequestsPerPeriod: DWORD,
 Period: DWORD,
 RetryFailures: BOOLEAN,
 Discardable: BOOLEAN,
 Reserved1: ARRAY(BOOLEAN, 2),
 AccessType: DWORD,
 AccessMode: DWORD
});

var _STORAGE_ALLOCATE_BC_STREAM_OUTPUT = new StructT('_STORAGE_ALLOCATE_BC_STREAM_OUTPUT', {
 RequestSize: DWORDLONG,
 NumOutStandingRequests: DWORD
});

var _STORAGE_PRIORITY_HINT_SUPPORT = new StructT('_STORAGE_PRIORITY_HINT_SUPPORT', {
 SupportFlags: DWORD
});

var _STORAGE_MEDIA_SERIAL_NUMBER_DATA = new StructT('_STORAGE_MEDIA_SERIAL_NUMBER_DATA', {
 Reserved: WORD,
 SerialNumberLength: WORD,
 SerialNumber: ARRAY(BYTE, 0)
});

var _STORAGE_READ_CAPACITY = new StructT('_STORAGE_READ_CAPACITY', {
 Version: DWORD,
 Size: DWORD,
 BlockLength: DWORD,
 NumberOfBlocks: LARGE_INTEGER,
 DiskLength: LARGE_INTEGER
});

var _STORAGE_WRITE_CACHE_PROPERTY = new StructT('_STORAGE_WRITE_CACHE_PROPERTY', {
 Version: DWORD,
 Size: DWORD,
 WriteCacheType: WRITE_CACHE_TYPE,
 WriteCacheEnabled: WRITE_CACHE_ENABLE,
 WriteCacheChangeable: WRITE_CACHE_CHANGE,
 WriteThroughSupported: WRITE_THROUGH,
 FlushCacheSupported: BOOLEAN,
 UserDefinedPowerProtection: BOOLEAN,
 NVCacheEnabled: BOOLEAN
});

var _PERSISTENT_RESERVE_COMMAND = new StructT('_PERSISTENT_RESERVE_COMMAND', {
 Version: DWORD,
 Size: DWORD
});

var undefined = new StructT('undefined', {
 ServiceAction: BYTE,
 Reserved1: BYTE,
 AllocationLength: WORD
});

var undefined = new StructT('undefined', {
 ServiceAction: BYTE,
 Reserved1: BYTE,
 Type: BYTE,
 Scope: BYTE,
 ParameterList: ARRAY(BYTE, 0)
});

var _FORMAT_PARAMETERS = new StructT('_FORMAT_PARAMETERS', {
 MediaType: MEDIA_TYPE,
 StartCylinderNumber: DWORD,
 EndCylinderNumber: DWORD,
 StartHeadNumber: DWORD,
 EndHeadNumber: DWORD
});

var _FORMAT_EX_PARAMETERS = new StructT('_FORMAT_EX_PARAMETERS', {
 MediaType: MEDIA_TYPE,
 StartCylinderNumber: DWORD,
 EndCylinderNumber: DWORD,
 StartHeadNumber: DWORD,
 EndHeadNumber: DWORD,
 FormatGapLength: WORD,
 SectorsPerTrack: WORD,
 SectorNumber: ARRAY(WORD, 1)
});

var _DISK_GEOMETRY = new StructT('_DISK_GEOMETRY', {
 Cylinders: LARGE_INTEGER,
 MediaType: MEDIA_TYPE,
 TracksPerCylinder: DWORD,
 SectorsPerTrack: DWORD,
 BytesPerSector: DWORD
});

var _PARTITION_INFORMATION = new StructT('_PARTITION_INFORMATION', {
 StartingOffset: LARGE_INTEGER,
 PartitionLength: LARGE_INTEGER,
 HiddenSectors: DWORD,
 PartitionNumber: DWORD,
 PartitionType: BYTE,
 BootIndicator: BOOLEAN,
 RecognizedPartition: BOOLEAN,
 RewritePartition: BOOLEAN
});

var SET_PARTITION_INFORMATION_MBR = new StructT('SET_PARTITION_INFORMATION_MBR', {
 PartitionType: BYTE
});

var _DRIVE_LAYOUT_INFORMATION = new StructT('_DRIVE_LAYOUT_INFORMATION', {
 PartitionCount: DWORD,
 Signature: DWORD,
 PartitionEntry: ARRAY(PARTITION_INFORMATION, 1)
});

var _VERIFY_INFORMATION = new StructT('_VERIFY_INFORMATION', {
 StartingOffset: LARGE_INTEGER,
 Length: DWORD
});

var _REASSIGN_BLOCKS = new StructT('_REASSIGN_BLOCKS', {
 Reserved: WORD,
 Count: WORD,
 BlockNumber: ARRAY(DWORD, 1)
});

var _REASSIGN_BLOCKS_EX = new StructT('_REASSIGN_BLOCKS_EX', {
 Reserved: WORD,
 Count: WORD,
 BlockNumber: ARRAY(LARGE_INTEGER, 1)
});

var SET_PARTITION_INFORMATION_GPT = new StructT('SET_PARTITION_INFORMATION_GPT', {
 PartitionType: GUID,
 PartitionId: GUID,
 Attributes: DWORD64,
 Name: ARRAY(WCHAR, 36)
});

var _PARTITION_INFORMATION_MBR = new StructT('_PARTITION_INFORMATION_MBR', {
 PartitionType: BYTE,
 BootIndicator: BOOLEAN,
 RecognizedPartition: BOOLEAN,
 HiddenSectors: DWORD
});

var _SET_PARTITION_INFORMATION_EX = new StructT('_SET_PARTITION_INFORMATION_EX', {
 PartitionStyle: PARTITION_STYLE
});

var _CREATE_DISK_GPT = new StructT('_CREATE_DISK_GPT', {
 DiskId: GUID,
 MaxPartitionCount: DWORD
});

var _CREATE_DISK_MBR = new StructT('_CREATE_DISK_MBR', {
 Signature: DWORD
});

var _CREATE_DISK = new StructT('_CREATE_DISK', {
 PartitionStyle: PARTITION_STYLE
});

var _GET_LENGTH_INFORMATION = new StructT('_GET_LENGTH_INFORMATION', {
 Length: LARGE_INTEGER
});

var _PARTITION_INFORMATION_EX = new StructT('_PARTITION_INFORMATION_EX', {
 PartitionStyle: PARTITION_STYLE,
 StartingOffset: LARGE_INTEGER,
 PartitionLength: LARGE_INTEGER,
 PartitionNumber: DWORD,
 RewritePartition: BOOLEAN
});

var _DRIVE_LAYOUT_INFORMATION_GPT = new StructT('_DRIVE_LAYOUT_INFORMATION_GPT', {
 DiskId: GUID,
 StartingUsableOffset: LARGE_INTEGER,
 UsableLength: LARGE_INTEGER,
 MaxPartitionCount: DWORD
});

var _DRIVE_LAYOUT_INFORMATION_MBR = new StructT('_DRIVE_LAYOUT_INFORMATION_MBR', {
 Signature: DWORD
});

var _DRIVE_LAYOUT_INFORMATION_EX = new StructT('_DRIVE_LAYOUT_INFORMATION_EX', {
 PartitionStyle: DWORD,
 PartitionCount: DWORD,
 PartitionEntry: ARRAY(PARTITION_INFORMATION_EX, 1)
});

var _DISK_INT13_INFO = new StructT('_DISK_INT13_INFO', {
 DriveSelect: WORD,
 MaxCylinders: DWORD,
 SectorsPerTrack: WORD,
 MaxHeads: WORD,
 NumberDrives: WORD
});

var _DISK_EX_INT13_INFO = new StructT('_DISK_EX_INT13_INFO', {
 ExBufferSize: WORD,
 ExFlags: WORD,
 ExCylinders: DWORD,
 ExHeads: DWORD,
 ExSectorsPerTrack: DWORD,
 ExSectorsPerDrive: DWORD64,
 ExSectorSize: WORD,
 ExReserved: WORD
});

var _DISK_DETECTION_INFO = new StructT('_DISK_DETECTION_INFO', {
 SizeOfDetectInfo: DWORD,
 DetectionType: DETECTION_TYPE
});

var undefined = new StructT('undefined', {
 Int13: DISK_INT13_INFO,
 ExInt13: DISK_EX_INT13_INFO
});

var _DISK_PARTITION_INFO = new StructT('_DISK_PARTITION_INFO', {
 SizeOfPartitionInfo: DWORD,
 PartitionStyle: PARTITION_STYLE
});

var undefined = new StructT('undefined', {
 Signature: DWORD,
 CheckSum: DWORD
});

var undefined = new StructT('undefined', {
 DiskId: GUID
});

var _DISK_GEOMETRY_EX = new StructT('_DISK_GEOMETRY_EX', {
 Geometry: DISK_GEOMETRY,
 DiskSize: LARGE_INTEGER,
 Data: ARRAY(BYTE, 1)
});

var _DISK_CONTROLLER_NUMBER = new StructT('_DISK_CONTROLLER_NUMBER', {
 ControllerNumber: DWORD,
 DiskNumber: DWORD
});

var _DISK_CACHE_INFORMATION = new StructT('_DISK_CACHE_INFORMATION', {
 ParametersSavable: BOOLEAN,
 ReadCacheEnabled: BOOLEAN,
 WriteCacheEnabled: BOOLEAN,
 ReadRetentionPriority: DISK_CACHE_RETENTION_PRIORITY,
 WriteRetentionPriority: DISK_CACHE_RETENTION_PRIORITY,
 DisablePrefetchTransferLength: WORD,
 PrefetchScalar: BOOLEAN
});

var undefined = new StructT('undefined', {
 Minimum: WORD,
 Maximum: WORD,
 MaximumBlocks: WORD
});

var undefined = new StructT('undefined', {
 Minimum: WORD,
 Maximum: WORD
});

var _DISK_GROW_PARTITION = new StructT('_DISK_GROW_PARTITION', {
 PartitionNumber: DWORD,
 BytesToGrow: LARGE_INTEGER
});

var _HISTOGRAM_BUCKET = new StructT('_HISTOGRAM_BUCKET', {
 Reads: DWORD,
 Writes: DWORD
});

var _DISK_HISTOGRAM = new StructT('_DISK_HISTOGRAM', {
 DiskSize: LARGE_INTEGER,
 Start: LARGE_INTEGER,
 End: LARGE_INTEGER,
 Average: LARGE_INTEGER,
 AverageRead: LARGE_INTEGER,
 AverageWrite: LARGE_INTEGER,
 Granularity: DWORD,
 Size: DWORD,
 ReadCount: DWORD,
 WriteCount: DWORD,
 Histogram: PHISTOGRAM_BUCKET
});

var _DISK_PERFORMANCE = new StructT('_DISK_PERFORMANCE', {
 BytesRead: LARGE_INTEGER,
 BytesWritten: LARGE_INTEGER,
 ReadTime: LARGE_INTEGER,
 WriteTime: LARGE_INTEGER,
 IdleTime: LARGE_INTEGER,
 ReadCount: DWORD,
 WriteCount: DWORD,
 QueueDepth: DWORD,
 SplitCount: DWORD,
 QueryTime: LARGE_INTEGER,
 StorageDeviceNumber: DWORD,
 StorageManagerName: ARRAY(WCHAR, 8)
});

var _DISK_RECORD = new StructT('_DISK_RECORD', {
 ByteOffset: LARGE_INTEGER,
 StartTime: LARGE_INTEGER,
 EndTime: LARGE_INTEGER,
 VirtualAddress: PVOID,
 NumberOfBytes: DWORD,
 DeviceNumber: BYTE,
 ReadRequest: BOOLEAN
});

var _DISK_LOGGING = new StructT('_DISK_LOGGING', {
 Function: BYTE,
 BufferAddress: PVOID,
 BufferSize: DWORD
});

var _BIN_RANGE = new StructT('_BIN_RANGE', {
 StartValue: LARGE_INTEGER,
 Length: LARGE_INTEGER
});

var _PERF_BIN = new StructT('_PERF_BIN', {
 NumberOfBins: DWORD,
 TypeOfBin: DWORD,
 BinsRanges: ARRAY(BIN_RANGE, 1)
});

var _BIN_COUNT = new StructT('_BIN_COUNT', {
 BinRange: BIN_RANGE,
 BinCount: DWORD
});

var _BIN_RESULTS = new StructT('_BIN_RESULTS', {
 NumberOfBins: DWORD,
 BinCounts: ARRAY(BIN_COUNT, 1)
});

var _GETVERSIONINPARAMS = new StructT('_GETVERSIONINPARAMS', {
 bVersion: BYTE,
 bRevision: BYTE,
 bReserved: BYTE,
 bIDEDeviceMap: BYTE,
 fCapabilities: DWORD,
 dwReserved: ARRAY(DWORD, 4)
});

var _IDEREGS = new StructT('_IDEREGS', {
 bFeaturesReg: BYTE,
 bSectorCountReg: BYTE,
 bSectorNumberReg: BYTE,
 bCylLowReg: BYTE,
 bCylHighReg: BYTE,
 bDriveHeadReg: BYTE,
 bCommandReg: BYTE,
 bReserved: BYTE
});

var _SENDCMDINPARAMS = new StructT('_SENDCMDINPARAMS', {
 cBufferSize: DWORD,
 irDriveRegs: IDEREGS,
 bDriveNumber: BYTE,
 bReserved: ARRAY(BYTE, 3),
 dwReserved: ARRAY(DWORD, 4),
 bBuffer: ARRAY(BYTE, 1)
});

var _DRIVERSTATUS = new StructT('_DRIVERSTATUS', {
 bDriverError: BYTE,
 bIDEError: BYTE,
 bReserved: ARRAY(BYTE, 2),
 dwReserved: ARRAY(DWORD, 2)
});

var _SENDCMDOUTPARAMS = new StructT('_SENDCMDOUTPARAMS', {
 cBufferSize: DWORD,
 DriverStatus: DRIVERSTATUS,
 bBuffer: ARRAY(BYTE, 1)
});

var _CHANGER_ELEMENT = new StructT('_CHANGER_ELEMENT', {
 ElementType: ELEMENT_TYPE,
 ElementAddress: DWORD
});

var _CHANGER_ELEMENT_LIST = new StructT('_CHANGER_ELEMENT_LIST', {
 Element: CHANGER_ELEMENT,
 NumberOfElements: DWORD
});

var _GET_CHANGER_PARAMETERS = new StructT('_GET_CHANGER_PARAMETERS', {
 Size: DWORD,
 NumberTransportElements: WORD,
 NumberStorageElements: WORD,
 NumberCleanerSlots: WORD,
 NumberIEElements: WORD,
 NumberDataTransferElements: WORD,
 NumberOfDoors: WORD,
 FirstSlotNumber: WORD,
 FirstDriveNumber: WORD,
 FirstTransportNumber: WORD,
 FirstIEPortNumber: WORD,
 FirstCleanerSlotAddress: WORD,
 MagazineSize: WORD,
 DriveCleanTimeout: DWORD,
 Features0: DWORD,
 Features1: DWORD,
 MoveFromTransport: BYTE,
 MoveFromSlot: BYTE,
 MoveFromIePort: BYTE,
 MoveFromDrive: BYTE,
 ExchangeFromTransport: BYTE,
 ExchangeFromSlot: BYTE,
 ExchangeFromIePort: BYTE,
 ExchangeFromDrive: BYTE,
 LockUnlockCapabilities: BYTE,
 PositionCapabilities: BYTE,
 Reserved1: ARRAY(BYTE, 2),
 Reserved2: ARRAY(DWORD, 2)
});

var _CHANGER_PRODUCT_DATA = new StructT('_CHANGER_PRODUCT_DATA', {
 VendorId: ARRAY(BYTE, VENDOR_ID_LENGTH),
 ProductId: ARRAY(BYTE, PRODUCT_ID_LENGTH),
 Revision: ARRAY(BYTE, REVISION_LENGTH),
 SerialNumber: ARRAY(BYTE, SERIAL_NUMBER_LENGTH),
 DeviceType: BYTE
});

var _CHANGER_SET_ACCESS = new StructT('_CHANGER_SET_ACCESS', {
 Element: CHANGER_ELEMENT,
 Control: DWORD
});

var _CHANGER_READ_ELEMENT_STATUS = new StructT('_CHANGER_READ_ELEMENT_STATUS', {
 ElementList: CHANGER_ELEMENT_LIST,
 VolumeTagInfo: BOOLEAN
});

var _CHANGER_ELEMENT_STATUS = new StructT('_CHANGER_ELEMENT_STATUS', {
 Element: CHANGER_ELEMENT,
 SrcElementAddress: CHANGER_ELEMENT,
 Flags: DWORD,
 ExceptionCode: DWORD,
 TargetId: BYTE,
 Lun: BYTE,
 Reserved: WORD,
 PrimaryVolumeID: ARRAY(BYTE, MAX_VOLUME_ID_SIZE),
 AlternateVolumeID: ARRAY(BYTE, MAX_VOLUME_ID_SIZE)
});

var _CHANGER_ELEMENT_STATUS_EX = new StructT('_CHANGER_ELEMENT_STATUS_EX', {
 Element: CHANGER_ELEMENT,
 SrcElementAddress: CHANGER_ELEMENT,
 Flags: DWORD,
 ExceptionCode: DWORD,
 TargetId: BYTE,
 Lun: BYTE,
 Reserved: WORD,
 PrimaryVolumeID: ARRAY(BYTE, MAX_VOLUME_ID_SIZE),
 AlternateVolumeID: ARRAY(BYTE, MAX_VOLUME_ID_SIZE),
 VendorIdentification: ARRAY(BYTE, VENDOR_ID_LENGTH),
 ProductIdentification: ARRAY(BYTE, PRODUCT_ID_LENGTH),
 SerialNumber: ARRAY(BYTE, SERIAL_NUMBER_LENGTH)
});

var _CHANGER_INITIALIZE_ELEMENT_STATUS = new StructT('_CHANGER_INITIALIZE_ELEMENT_STATUS', {
 ElementList: CHANGER_ELEMENT_LIST,
 BarCodeScan: BOOLEAN
});

var _CHANGER_SET_POSITION = new StructT('_CHANGER_SET_POSITION', {
 Transport: CHANGER_ELEMENT,
 Destination: CHANGER_ELEMENT,
 Flip: BOOLEAN
});

var _CHANGER_EXCHANGE_MEDIUM = new StructT('_CHANGER_EXCHANGE_MEDIUM', {
 Transport: CHANGER_ELEMENT,
 Source: CHANGER_ELEMENT,
 Destination1: CHANGER_ELEMENT,
 Destination2: CHANGER_ELEMENT,
 Flip1: BOOLEAN,
 Flip2: BOOLEAN
});

var _CHANGER_MOVE_MEDIUM = new StructT('_CHANGER_MOVE_MEDIUM', {
 Transport: CHANGER_ELEMENT,
 Source: CHANGER_ELEMENT,
 Destination: CHANGER_ELEMENT,
 Flip: BOOLEAN
});

var _CHANGER_SEND_VOLUME_TAG_INFORMATION = new StructT('_CHANGER_SEND_VOLUME_TAG_INFORMATION', {
 StartingElement: CHANGER_ELEMENT,
 ActionCode: DWORD,
 VolumeIDTemplate: ARRAY(BYTE, MAX_VOLUME_TEMPLATE_SIZE)
});

var _READ_ELEMENT_ADDRESS_INFO = new StructT('_READ_ELEMENT_ADDRESS_INFO', {
 NumberOfElements: DWORD,
 ElementStatus: ARRAY(CHANGER_ELEMENT_STATUS, 1)
});

var _CSV_NAMESPACE_INFO = new StructT('_CSV_NAMESPACE_INFO', {
 Version: DWORD,
 DeviceNumber: DWORD,
 StartingOffset: LARGE_INTEGER,
 SectorSize: DWORD
});

var _PATHNAME_BUFFER = new StructT('_PATHNAME_BUFFER', {
 PathNameLength: DWORD,
 Name: ARRAY(WCHAR, 1)
});

var _FSCTL_QUERY_FAT_BPB_BUFFER = new StructT('_FSCTL_QUERY_FAT_BPB_BUFFER', {
 First0x24BytesOfBootSector: ARRAY(BYTE, 0x24)
});

var undefined = new StructT('undefined', {
 VolumeSerialNumber: LARGE_INTEGER,
 NumberSectors: LARGE_INTEGER,
 TotalClusters: LARGE_INTEGER,
 FreeClusters: LARGE_INTEGER,
 TotalReserved: LARGE_INTEGER,
 BytesPerSector: DWORD,
 BytesPerCluster: DWORD,
 BytesPerFileRecordSegment: DWORD,
 ClustersPerFileRecordSegment: DWORD,
 MftValidDataLength: LARGE_INTEGER,
 MftStartLcn: LARGE_INTEGER,
 Mft2StartLcn: LARGE_INTEGER,
 MftZoneStart: LARGE_INTEGER,
 MftZoneEnd: LARGE_INTEGER
});

var undefined = new StructT('undefined', {
 ByteCount: DWORD,
 MajorVersion: WORD,
 MinorVersion: WORD
});

var undefined = new StructT('undefined', {
 StartingLcn: LARGE_INTEGER
});

var undefined = new StructT('undefined', {
 StartingLcn: LARGE_INTEGER,
 BitmapSize: LARGE_INTEGER,
 Buffer: ARRAY(BYTE, 1)
});

var undefined = new StructT('undefined', {
 StartingVcn: LARGE_INTEGER
});

var RETRIEVAL_POINTERS_BUFFER = new StructT('RETRIEVAL_POINTERS_BUFFER', {
 ExtentCount: DWORD,
 StartingVcn: LARGE_INTEGER,
 Extents: ARRAY(undefined, 1)
});

var undefined = new StructT('undefined', {
 NextVcn: LARGE_INTEGER,
 Lcn: LARGE_INTEGER
});

var undefined = new StructT('undefined', {
 FileReferenceNumber: LARGE_INTEGER
});

var undefined = new StructT('undefined', {
 FileReferenceNumber: LARGE_INTEGER,
 FileRecordLength: DWORD,
 FileRecordBuffer: ARRAY(BYTE, 1)
});

var undefined = new StructT('undefined', {
 FileHandle: HANDLE,
 StartingVcn: LARGE_INTEGER,
 StartingLcn: LARGE_INTEGER,
 ClusterCount: DWORD
});

var undefined = new StructT('undefined', {
 FileHandle: HANDLE,
 SourceFileRecord: LARGE_INTEGER,
 TargetFileRecord: LARGE_INTEGER
});

var undefined = new StructT('undefined', {
 Restart: DWORD,
 Sid: SID
});

var undefined = new StructT('undefined', {
 NextEntryOffset: DWORD,
 FileIndex: DWORD,
 FileNameLength: DWORD,
 FileName: ARRAY(WCHAR, 1)
});

var undefined = new StructT('undefined', {
 StartFileReferenceNumber: DWORDLONG,
 LowUsn: USN,
 HighUsn: USN
});

var undefined = new StructT('undefined', {
 MaximumSize: DWORDLONG,
 AllocationDelta: DWORDLONG
});

var undefined = new StructT('undefined', {
 StartUsn: USN,
 ReasonMask: DWORD,
 ReturnOnlyOnClose: DWORD,
 Timeout: DWORDLONG,
 BytesToWaitFor: DWORDLONG,
 UsnJournalID: DWORDLONG
});

var undefined = new StructT('undefined', {
 RecordLength: DWORD,
 MajorVersion: WORD,
 MinorVersion: WORD,
 FileReferenceNumber: DWORDLONG,
 ParentFileReferenceNumber: DWORDLONG,
 Usn: USN,
 TimeStamp: LARGE_INTEGER,
 Reason: DWORD,
 SourceInfo: DWORD,
 SecurityId: DWORD,
 FileAttributes: DWORD,
 FileNameLength: WORD,
 FileNameOffset: WORD,
 FileName: ARRAY(WCHAR, 1)
});

var undefined = new StructT('undefined', {
 UsnJournalID: DWORDLONG,
 FirstUsn: USN,
 NextUsn: USN,
 LowestValidUsn: USN,
 MaxUsn: USN,
 MaximumSize: DWORDLONG,
 AllocationDelta: DWORDLONG
});

var undefined = new StructT('undefined', {
 UsnJournalID: DWORDLONG,
 DeleteFlags: DWORD
});

var undefined = new StructT('undefined', {
 UsnSourceInfo: DWORD,
 VolumeHandle: HANDLE,
 HandleInfo: DWORD
});

var undefined = new StructT('undefined', {
 DesiredAccess: ACCESS_MASK,
 SecurityIds: ARRAY(DWORD, 1)
});

var _FILE_PREFETCH = new StructT('_FILE_PREFETCH', {
 Type: DWORD,
 Count: DWORD,
 Prefetch: ARRAY(DWORDLONG, 1)
});

var _FILE_PREFETCH_EX = new StructT('_FILE_PREFETCH_EX', {
 Type: DWORD,
 Count: DWORD,
 Context: PVOID,
 Prefetch: ARRAY(DWORDLONG, 1)
});

var _FILESYSTEM_STATISTICS = new StructT('_FILESYSTEM_STATISTICS', {
 FileSystemType: WORD,
 Version: WORD,
 SizeOfCompleteStructure: DWORD,
 UserFileReads: DWORD,
 UserFileReadBytes: DWORD,
 UserDiskReads: DWORD,
 UserFileWrites: DWORD,
 UserFileWriteBytes: DWORD,
 UserDiskWrites: DWORD,
 MetaDataReads: DWORD,
 MetaDataReadBytes: DWORD,
 MetaDataDiskReads: DWORD,
 MetaDataWrites: DWORD,
 MetaDataWriteBytes: DWORD,
 MetaDataDiskWrites: DWORD
});

var _FAT_STATISTICS = new StructT('_FAT_STATISTICS', {
 CreateHits: DWORD,
 SuccessfulCreates: DWORD,
 FailedCreates: DWORD,
 NonCachedReads: DWORD,
 NonCachedReadBytes: DWORD,
 NonCachedWrites: DWORD,
 NonCachedWriteBytes: DWORD,
 NonCachedDiskReads: DWORD,
 NonCachedDiskWrites: DWORD
});

var _EXFAT_STATISTICS = new StructT('_EXFAT_STATISTICS', {
 CreateHits: DWORD,
 SuccessfulCreates: DWORD,
 FailedCreates: DWORD,
 NonCachedReads: DWORD,
 NonCachedReadBytes: DWORD,
 NonCachedWrites: DWORD,
 NonCachedWriteBytes: DWORD,
 NonCachedDiskReads: DWORD,
 NonCachedDiskWrites: DWORD
});

var _NTFS_STATISTICS = new StructT('_NTFS_STATISTICS', {
 LogFileFullExceptions: DWORD,
 OtherExceptions: DWORD,
 MftReads: DWORD,
 MftReadBytes: DWORD,
 MftWrites: DWORD,
 MftWriteBytes: DWORD,
 MftWritesUserLevel: ,
 MftWritesFlushForLogFileFull: WORD,
 MftWritesLazyWriter: WORD,
 MftWritesUserRequest: WORD,
 Mft2Writes: DWORD,
 Mft2WriteBytes: DWORD,
 Mft2WritesUserLevel: ,
 Mft2WritesFlushForLogFileFull: WORD,
 Mft2WritesLazyWriter: WORD,
 Mft2WritesUserRequest: WORD,
 RootIndexReads: DWORD,
 RootIndexReadBytes: DWORD,
 RootIndexWrites: DWORD,
 RootIndexWriteBytes: DWORD,
 BitmapReads: DWORD,
 BitmapReadBytes: DWORD,
 BitmapWrites: DWORD,
 BitmapWriteBytes: DWORD,
 BitmapWritesFlushForLogFileFull: WORD,
 BitmapWritesLazyWriter: WORD,
 BitmapWritesUserRequest: WORD,
 BitmapWritesUserLevel: ,
 MftBitmapReads: DWORD,
 MftBitmapReadBytes: DWORD,
 MftBitmapWrites: DWORD,
 MftBitmapWriteBytes: DWORD,
 MftBitmapWritesFlushForLogFileFull: WORD,
 MftBitmapWritesLazyWriter: WORD,
 MftBitmapWritesUserRequest: WORD,
 MftBitmapWritesUserLevel: ,
 UserIndexReads: DWORD,
 UserIndexReadBytes: DWORD,
 UserIndexWrites: DWORD,
 UserIndexWriteBytes: DWORD,
 LogFileReads: DWORD,
 LogFileReadBytes: DWORD,
 LogFileWrites: DWORD,
 LogFileWriteBytes: DWORD,
 Allocate: 
});

var undefined = new StructT('undefined', {
 Write: WORD,
 Create: WORD,
 SetInfo: WORD,
 Flush: WORD
});

var undefined = new StructT('undefined', {
 Write: WORD,
 Create: WORD,
 SetInfo: WORD,
 Flush: WORD
});

var undefined = new StructT('undefined', {
 Write: WORD,
 Create: WORD,
 SetInfo: WORD
});

var undefined = new StructT('undefined', {
 Write: WORD,
 Create: WORD,
 SetInfo: WORD,
 Flush: WORD
});

var undefined = new StructT('undefined', {
 Calls: DWORD,
 Clusters: DWORD,
 Hints: DWORD,
 RunsReturned: DWORD,
 HintsHonored: DWORD,
 HintsClusters: DWORD,
 Cache: DWORD,
 CacheClusters: DWORD,
 CacheMiss: DWORD,
 CacheMissClusters: DWORD
});

var _FILE_OBJECTID_BUFFER = new StructT('_FILE_OBJECTID_BUFFER', {
 ObjectId: ARRAY(BYTE, 16)
});

var undefined = new StructT('undefined', {
 BirthVolumeId: ARRAY(BYTE, 16),
 BirthObjectId: ARRAY(BYTE, 16),
 DomainId: ARRAY(BYTE, 16)
});

var _FILE_SET_SPARSE_BUFFER = new StructT('_FILE_SET_SPARSE_BUFFER', {
 SetSparse: BOOLEAN
});

var _FILE_ZERO_DATA_INFORMATION = new StructT('_FILE_ZERO_DATA_INFORMATION', {
 FileOffset: LARGE_INTEGER,
 BeyondFinalZero: LARGE_INTEGER
});

var _FILE_ALLOCATED_RANGE_BUFFER = new StructT('_FILE_ALLOCATED_RANGE_BUFFER', {
 FileOffset: LARGE_INTEGER,
 Length: LARGE_INTEGER
});

var _ENCRYPTION_BUFFER = new StructT('_ENCRYPTION_BUFFER', {
 EncryptionOperation: DWORD,
 Private: ARRAY(BYTE, 1)
});

var _DECRYPTION_STATUS_BUFFER = new StructT('_DECRYPTION_STATUS_BUFFER', {
 NoEncryptedStreams: BOOLEAN
});

var _REQUEST_RAW_ENCRYPTED_DATA = new StructT('_REQUEST_RAW_ENCRYPTED_DATA', {
 FileOffset: LONGLONG,
 Length: DWORD
});

var _ENCRYPTED_DATA_INFO = new StructT('_ENCRYPTED_DATA_INFO', {
 StartingFileOffset: DWORDLONG,
 OutputBufferOffset: DWORD,
 BytesWithinFileSize: DWORD,
 BytesWithinValidDataLength: DWORD,
 CompressionFormat: WORD,
 DataUnitShift: BYTE,
 ChunkShift: BYTE,
 ClusterShift: BYTE,
 EncryptionFormat: BYTE,
 NumberOfDataBlocks: WORD,
 DataBlockSize: ARRAY(DWORD, ANYSIZE_ARRAY)
});

var _PLEX_READ_DATA_REQUEST = new StructT('_PLEX_READ_DATA_REQUEST', {
 ByteOffset: LARGE_INTEGER,
 ByteLength: DWORD,
 PlexNumber: DWORD
});

var _SI_COPYFILE = new StructT('_SI_COPYFILE', {
 SourceFileNameLength: DWORD,
 DestinationFileNameLength: DWORD,
 Flags: DWORD,
 FileNameBuffer: ARRAY(WCHAR, 1)
});

var _FILE_MAKE_COMPATIBLE_BUFFER = new StructT('_FILE_MAKE_COMPATIBLE_BUFFER', {
 CloseDisc: BOOLEAN
});

var _FILE_SET_DEFECT_MGMT_BUFFER = new StructT('_FILE_SET_DEFECT_MGMT_BUFFER', {
 Disable: BOOLEAN
});

var _FILE_QUERY_SPARING_BUFFER = new StructT('_FILE_QUERY_SPARING_BUFFER', {
 SparingUnitBytes: DWORD,
 SoftwareSparing: BOOLEAN,
 TotalSpareBlocks: DWORD,
 FreeSpareBlocks: DWORD
});

var _FILE_QUERY_ON_DISK_VOL_INFO_BUFFER = new StructT('_FILE_QUERY_ON_DISK_VOL_INFO_BUFFER', {
 DirectoryCount: LARGE_INTEGER,
 FileCount: LARGE_INTEGER,
 FsFormatMajVersion: WORD,
 FsFormatMinVersion: WORD,
 FsFormatName: ARRAY(WCHAR,  12),
 FormatTime: LARGE_INTEGER,
 LastUpdateTime: LARGE_INTEGER,
 CopyrightInfo: ARRAY(WCHAR,  34),
 AbstractInfo: ARRAY(WCHAR,  34),
 FormattingImplementationInfo: ARRAY(WCHAR,  34),
 LastModifyingImplementationInfo: ARRAY(WCHAR,  34)
});

var _SHRINK_VOLUME_INFORMATION = new StructT('_SHRINK_VOLUME_INFORMATION', {
 ShrinkRequestType: SHRINK_VOLUME_REQUEST_TYPES,
 Flags: DWORDLONG,
 NewNumberOfSectors: LONGLONG
});

var _TXFS_MODIFY_RM = new StructT('_TXFS_MODIFY_RM', {
 Flags: DWORD,
 LogContainerCountMax: DWORD,
 LogContainerCountMin: DWORD,
 LogContainerCount: DWORD,
 LogGrowthIncrement: DWORD,
 LogAutoShrinkPercentage: DWORD,
 Reserved: DWORDLONG,
 LoggingMode: WORD
});

var _TXFS_QUERY_RM_INFORMATION = new StructT('_TXFS_QUERY_RM_INFORMATION', {
 BytesRequired: DWORD,
 TailLsn: DWORDLONG,
 CurrentLsn: DWORDLONG,
 ArchiveTailLsn: DWORDLONG,
 LogContainerSize: DWORDLONG,
 HighestVirtualClock: LARGE_INTEGER,
 LogContainerCount: DWORD,
 LogContainerCountMax: DWORD,
 LogContainerCountMin: DWORD,
 LogGrowthIncrement: DWORD,
 LogAutoShrinkPercentage: DWORD,
 Flags: DWORD,
 LoggingMode: WORD,
 Reserved: WORD,
 RmState: DWORD,
 LogCapacity: DWORDLONG,
 LogFree: DWORDLONG,
 TopsSize: DWORDLONG,
 TopsUsed: DWORDLONG,
 TransactionCount: DWORDLONG,
 OnePCCount: DWORDLONG,
 TwoPCCount: DWORDLONG,
 NumberLogFileFull: DWORDLONG,
 OldestTransactionAge: DWORDLONG,
 RMName: GUID,
 TmLogPathOffset: DWORD
});

var _TXFS_ROLLFORWARD_REDO_INFORMATION = new StructT('_TXFS_ROLLFORWARD_REDO_INFORMATION', {
 LastVirtualClock: LARGE_INTEGER,
 LastRedoLsn: DWORDLONG,
 HighestRecoveryLsn: DWORDLONG,
 Flags: DWORD
});

var _TXFS_START_RM_INFORMATION = new StructT('_TXFS_START_RM_INFORMATION', {
 Flags: DWORD,
 LogContainerSize: DWORDLONG,
 LogContainerCountMin: DWORD,
 LogContainerCountMax: DWORD,
 LogGrowthIncrement: DWORD,
 LogAutoShrinkPercentage: DWORD,
 TmLogPathOffset: DWORD,
 TmLogPathLength: WORD,
 LoggingMode: WORD,
 LogPathLength: WORD,
 Reserved: WORD,
 LogPath: ARRAY(WCHAR, 1)
});

var _TXFS_GET_METADATA_INFO_OUT = new StructT('_TXFS_GET_METADATA_INFO_OUT', {
 TxfFileId: ,
 LockingTransaction: GUID,
 LastLsn: DWORDLONG,
 TransactionState: DWORD
});

var undefined = new StructT('undefined', {
 LowPart: LONGLONG,
 HighPart: LONGLONG
});

var _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY = new StructT('_TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY', {
 Offset: DWORDLONG,
 NameFlags: DWORD,
 FileId: LONGLONG,
 Reserved1: DWORD,
 Reserved2: DWORD,
 Reserved3: LONGLONG,
 FileName: ARRAY(WCHAR, 1)
});

var _TXFS_LIST_TRANSACTION_LOCKED_FILES = new StructT('_TXFS_LIST_TRANSACTION_LOCKED_FILES', {
 KtmTransaction: GUID,
 NumberOfFiles: DWORDLONG,
 BufferSizeRequired: DWORDLONG,
 Offset: DWORDLONG
});

var _TXFS_LIST_TRANSACTIONS_ENTRY = new StructT('_TXFS_LIST_TRANSACTIONS_ENTRY', {
 TransactionId: GUID,
 TransactionState: DWORD,
 Reserved1: DWORD,
 Reserved2: DWORD,
 Reserved3: LONGLONG
});

var _TXFS_LIST_TRANSACTIONS = new StructT('_TXFS_LIST_TRANSACTIONS', {
 NumberOfTransactions: DWORDLONG,
 BufferSizeRequired: DWORDLONG
});


var _TXFS_WRITE_BACKUP_INFORMATION = new StructT('_TXFS_WRITE_BACKUP_INFORMATION', {
 Buffer: ARRAY(BYTE, 1)
});

var _TXFS_GET_TRANSACTED_VERSION = new StructT('_TXFS_GET_TRANSACTED_VERSION', {
 ThisBaseVersion: DWORD,
 LatestVersion: DWORD,
 ThisMiniVersion: WORD,
 FirstMiniVersion: WORD,
 LatestMiniVersion: WORD
});

var _TXFS_SAVEPOINT_INFORMATION = new StructT('_TXFS_SAVEPOINT_INFORMATION', {
 KtmTransaction: HANDLE,
 ActionCode: DWORD,
 SavepointId: DWORD
});

var _TXFS_CREATE_MINIVERSION_INFO = new StructT('_TXFS_CREATE_MINIVERSION_INFO', {
 StructureVersion: WORD,
 StructureLength: WORD,
 BaseVersion: DWORD,
 MiniVersion: WORD
});

var _TXFS_TRANSACTION_ACTIVE_INFO = new StructT('_TXFS_TRANSACTION_ACTIVE_INFO', {
 TransactionsActiveAtSnapshot: BOOLEAN
});

var _BOOT_AREA_INFO = new StructT('_BOOT_AREA_INFO', {
 BootSectorCount: DWORD,
 BootSectors: ARRAY(undefined, 2)
});

var undefined = new StructT('undefined', {
 Offset: LARGE_INTEGER
});

var _RETRIEVAL_POINTER_BASE = new StructT('_RETRIEVAL_POINTER_BASE', {
 FileAreaOffset: LARGE_INTEGER
});

var _FILE_FS_PERSISTENT_VOLUME_INFORMATION = new StructT('_FILE_FS_PERSISTENT_VOLUME_INFORMATION', {
 VolumeFlags: DWORD,
 FlagMask: DWORD,
 Version: DWORD,
 Reserved: DWORD
});

var _FILE_SYSTEM_RECOGNITION_INFORMATION = new StructT('_FILE_SYSTEM_RECOGNITION_INFORMATION', {
 FileSystem: ARRAY(CHAR, 9)
});

var _REQUEST_OPLOCK_INPUT_BUFFER = new StructT('_REQUEST_OPLOCK_INPUT_BUFFER', {
 StructureVersion: WORD,
 StructureLength: WORD,
 RequestedOplockLevel: DWORD,
 Flags: DWORD
});

var _REQUEST_OPLOCK_OUTPUT_BUFFER = new StructT('_REQUEST_OPLOCK_OUTPUT_BUFFER', {
 StructureVersion: WORD,
 StructureLength: WORD,
 OriginalOplockLevel: DWORD,
 NewOplockLevel: DWORD,
 Flags: DWORD,
 AccessMode: ACCESS_MASK,
 ShareMode: WORD
});

var _SD_CHANGE_MACHINE_SID_INPUT = new StructT('_SD_CHANGE_MACHINE_SID_INPUT', {
 CurrentMachineSIDOffset: WORD,
 CurrentMachineSIDLength: WORD,
 NewMachineSIDOffset: WORD,
 NewMachineSIDLength: WORD
});

var _SD_CHANGE_MACHINE_SID_OUTPUT = new StructT('_SD_CHANGE_MACHINE_SID_OUTPUT', {
 NumSDChangedSuccess: DWORDLONG,
 NumSDChangedFail: DWORDLONG,
 NumSDUnused: DWORDLONG,
 NumSDTotal: DWORDLONG,
 NumMftSDChangedSuccess: DWORDLONG,
 NumMftSDChangedFail: DWORDLONG,
 NumMftSDTotal: DWORDLONG
});

var _SD_GLOBAL_CHANGE_INPUT = new StructT('_SD_GLOBAL_CHANGE_INPUT', {
 Flags: DWORD,
 ChangeType: DWORD
});

var _SD_GLOBAL_CHANGE_OUTPUT = new StructT('_SD_GLOBAL_CHANGE_OUTPUT', {
 Flags: DWORD,
 ChangeType: DWORD
});

var _EXTENDED_ENCRYPTED_DATA_INFO = new StructT('_EXTENDED_ENCRYPTED_DATA_INFO', {
 ExtendedCode: DWORD,
 Length: DWORD,
 Flags: DWORD,
 Reserved: DWORD
});

var _LOOKUP_STREAM_FROM_CLUSTER_INPUT = new StructT('_LOOKUP_STREAM_FROM_CLUSTER_INPUT', {
 Flags: DWORD,
 NumberOfClusters: DWORD,
 Cluster: ARRAY(LARGE_INTEGER, 1)
});

var _LOOKUP_STREAM_FROM_CLUSTER_OUTPUT = new StructT('_LOOKUP_STREAM_FROM_CLUSTER_OUTPUT', {
 Offset: DWORD,
 NumberOfMatches: DWORD,
 BufferSizeRequired: DWORD
});

var _LOOKUP_STREAM_FROM_CLUSTER_ENTRY = new StructT('_LOOKUP_STREAM_FROM_CLUSTER_ENTRY', {
 OffsetToNext: DWORD,
 Flags: DWORD,
 Reserved: LARGE_INTEGER,
 Cluster: LARGE_INTEGER,
 FileName: ARRAY(WCHAR, 1)
});

var _FILE_TYPE_NOTIFICATION_INPUT = new StructT('_FILE_TYPE_NOTIFICATION_INPUT', {
 Flags: DWORD,
 NumFileTypeIDs: DWORD,
 FileTypeID: ARRAY(GUID, 1)
});

var _DISK_EXTENT = new StructT('_DISK_EXTENT', {
 DiskNumber: DWORD,
 StartingOffset: LARGE_INTEGER,
 ExtentLength: LARGE_INTEGER
});

var _VOLUME_DISK_EXTENTS = new StructT('_VOLUME_DISK_EXTENTS', {
 NumberOfDiskExtents: DWORD,
 Extents: ARRAY(DISK_EXTENT, ANYSIZE_ARRAY)
});

var _VOLUME_GET_GPT_ATTRIBUTES_INFORMATION = new StructT('_VOLUME_GET_GPT_ATTRIBUTES_INFORMATION', {
 GptAttributes: DWORDLONG
});

var _SCARD_IO_REQUEST = new StructT('_SCARD_IO_REQUEST', {
 dwProtocol: DWORD,
 cbPciLength: DWORD
});

var undefined = new StructT('undefined', {
 bCla: BYTE,
 bIns: BYTE,
 bP1: BYTE,
 bP2: BYTE,
 bP3: BYTE
});

var undefined = new StructT('undefined', {
 ioRequest: SCARD_IO_REQUEST,
 bSw1: BYTE,
 bSw2: BYTE
});

var undefined = new StructT('undefined', {
 ioRequest: SCARD_IO_REQUEST
});

var SCARD_READERSTATE = new StructT('SCARD_READERSTATE', {
 szReader: LPCSTR,
 pvUserData: LPVOID,
 dwCurrentState: DWORD,
 dwEventState: DWORD,
 cbAtr: DWORD,
 rgbAtr: ARRAY(BYTE, 36)
});

var undefined = new StructT('undefined', {
 szReader: LPCWSTR,
 pvUserData: LPVOID,
 dwCurrentState: DWORD,
 dwEventState: DWORD,
 cbAtr: DWORD,
 rgbAtr: ARRAY(BYTE, 36)
});

var _SCARD_ATRMASK = new StructT('_SCARD_ATRMASK', {
 cbAtr: DWORD,
 rgbAtr: ARRAY(BYTE, 36),
 rgbMask: ARRAY(BYTE, 36)
});

var OPENCARD_SEARCH_CRITERIA = new StructT('OPENCARD_SEARCH_CRITERIA', {
 dwStructSize: DWORD,
 lpstrGroupNames: LPSTR,
 nMaxGroupNames: DWORD,
 rgguidInterfaces: LPCGUID,
 cguidInterfaces: DWORD,
 lpstrCardNames: LPSTR,
 nMaxCardNames: DWORD,
 lpfnCheck: LPOCNCHKPROC,
 lpfnConnect: LPOCNCONNPROCA,
 lpfnDisconnect: LPOCNDSCPROC,
 pvUserData: LPVOID,
 dwShareMode: DWORD,
 dwPreferredProtocols: DWORD
});

var undefined = new StructT('undefined', {
 dwStructSize: DWORD,
 lpstrGroupNames: LPWSTR,
 nMaxGroupNames: DWORD,
 rgguidInterfaces: LPCGUID,
 cguidInterfaces: DWORD,
 lpstrCardNames: LPWSTR,
 nMaxCardNames: DWORD,
 lpfnCheck: LPOCNCHKPROC,
 lpfnConnect: LPOCNCONNPROCW,
 lpfnDisconnect: LPOCNDSCPROC,
 pvUserData: LPVOID,
 dwShareMode: DWORD,
 dwPreferredProtocols: DWORD
});

var OPENCARDNAME_EX = new StructT('OPENCARDNAME_EX', {
 dwStructSize: DWORD,
 hSCardContext: SCARDCONTEXT,
 hwndOwner: HWND,
 dwFlags: DWORD,
 lpstrTitle: LPCSTR,
 lpstrSearchDesc: LPCSTR,
 hIcon: HICON,
 pOpenCardSearchCriteria: POPENCARD_SEARCH_CRITERIAA,
 lpfnConnect: LPOCNCONNPROCA,
 pvUserData: LPVOID,
 dwShareMode: DWORD,
 dwPreferredProtocols: DWORD,
 lpstrRdr: LPSTR,
 nMaxRdr: DWORD,
 lpstrCard: LPSTR,
 nMaxCard: DWORD,
 dwActiveProtocol: DWORD,
 hCardHandle: SCARDHANDLE
});

var undefined = new StructT('undefined', {
 dwStructSize: DWORD,
 hSCardContext: SCARDCONTEXT,
 hwndOwner: HWND,
 dwFlags: DWORD,
 lpstrTitle: LPCWSTR,
 lpstrSearchDesc: LPCWSTR,
 hIcon: HICON,
 pOpenCardSearchCriteria: POPENCARD_SEARCH_CRITERIAW,
 lpfnConnect: LPOCNCONNPROCW,
 pvUserData: LPVOID,
 dwShareMode: DWORD,
 dwPreferredProtocols: DWORD,
 lpstrRdr: LPWSTR,
 nMaxRdr: DWORD,
 lpstrCard: LPWSTR,
 nMaxCard: DWORD,
 dwActiveProtocol: DWORD,
 hCardHandle: SCARDHANDLE
});

var OPENCARDNAME = new StructT('OPENCARDNAME', {
 dwStructSize: DWORD,
 hwndOwner: HWND,
 hSCardContext: SCARDCONTEXT,
 lpstrGroupNames: LPSTR,
 nMaxGroupNames: DWORD,
 lpstrCardNames: LPSTR,
 nMaxCardNames: DWORD,
 rgguidInterfaces: LPCGUID,
 cguidInterfaces: DWORD,
 lpstrRdr: LPSTR,
 nMaxRdr: DWORD,
 lpstrCard: LPSTR,
 nMaxCard: DWORD,
 lpstrTitle: LPCSTR,
 dwFlags: DWORD,
 pvUserData: LPVOID,
 dwShareMode: DWORD,
 dwPreferredProtocols: DWORD,
 dwActiveProtocol: DWORD,
 lpfnConnect: LPOCNCONNPROCA,
 lpfnCheck: LPOCNCHKPROC,
 lpfnDisconnect: LPOCNDSCPROC,
 hCardHandle: SCARDHANDLE
});

var undefined = new StructT('undefined', {
 dwStructSize: DWORD,
 hwndOwner: HWND,
 hSCardContext: SCARDCONTEXT,
 lpstrGroupNames: LPWSTR,
 nMaxGroupNames: DWORD,
 lpstrCardNames: LPWSTR,
 nMaxCardNames: DWORD,
 rgguidInterfaces: LPCGUID,
 cguidInterfaces: DWORD,
 lpstrRdr: LPWSTR,
 nMaxRdr: DWORD,
 lpstrCard: LPWSTR,
 nMaxCard: DWORD,
 lpstrTitle: LPCWSTR,
 dwFlags: DWORD,
 pvUserData: LPVOID,
 dwShareMode: DWORD,
 dwPreferredProtocols: DWORD,
 dwActiveProtocol: DWORD,
 lpfnConnect: LPOCNCONNPROCW,
 lpfnCheck: LPOCNCHKPROC,
 lpfnDisconnect: LPOCNDSCPROC,
 hCardHandle: SCARDHANDLE
});


var PROPSHEETPAGEA = new StructT('PROPSHEETPAGEA', {
 dwSize: DWORD,
 dwFlags: DWORD,
 hInstance: HINSTANCE,
 pszTitle: LPCSTR,
 pfnDlgProc: DLGPROC,
 lParam: LPARAM,
 pfnCallback: LPFNPSPCALLBACKA,
 pcRefParent: uint.Δ,
 pszHeaderTitle: LPCSTR,
 pszHeaderSubTitle: LPCSTR,
 hActCtx: HANDLE
});

var PROPSHEETPAGEW = new StructT('PROPSHEETPAGEW', {
 dwSize: DWORD,
 dwFlags: DWORD,
 hInstance: HINSTANCE,
 pszTitle: LPCWSTR,
 pfnDlgProc: DLGPROC,
 lParam: LPARAM,
 pfnCallback: LPFNPSPCALLBACKW,
 pcRefParent: uint.Δ,
 pszHeaderTitle: LPCWSTR,
 pszHeaderSubTitle: LPCWSTR,
 hActCtx: HANDLE
});

var _PROPSHEETPAGEA_V1 = new StructT('_PROPSHEETPAGEA_V1', {
 dwSize: DWORD,
 dwFlags: DWORD,
 hInstance: HINSTANCE,
 pszTitle: LPCSTR,
 pfnDlgProc: DLGPROC,
 lParam: LPARAM,
 pfnCallback: LPFNPSPCALLBACKA,
 pcRefParent: uint.Δ
});

var _PROPSHEETPAGEA_V2 = new StructT('_PROPSHEETPAGEA_V2', {
 dwSize: DWORD,
 dwFlags: DWORD,
 hInstance: HINSTANCE,
 pszTitle: LPCSTR,
 pfnDlgProc: DLGPROC,
 lParam: LPARAM,
 pfnCallback: LPFNPSPCALLBACKA,
 pcRefParent: uint.Δ,
 pszHeaderTitle: LPCSTR,
 pszHeaderSubTitle: LPCSTR
});

var _PROPSHEETPAGEA_V3 = new StructT('_PROPSHEETPAGEA_V3', {
 dwSize: DWORD,
 dwFlags: DWORD,
 hInstance: HINSTANCE,
 pszTitle: LPCSTR,
 pfnDlgProc: DLGPROC,
 lParam: LPARAM,
 pfnCallback: LPFNPSPCALLBACKA,
 pcRefParent: uint.Δ,
 pszHeaderTitle: LPCSTR,
 pszHeaderSubTitle: LPCSTR,
 hActCtx: HANDLE
});

var _PROPSHEETPAGEW_V1 = new StructT('_PROPSHEETPAGEW_V1', {
 dwSize: DWORD,
 dwFlags: DWORD,
 hInstance: HINSTANCE,
 pszTitle: LPCWSTR,
 pfnDlgProc: DLGPROC,
 lParam: LPARAM,
 pfnCallback: LPFNPSPCALLBACKW,
 pcRefParent: uint.Δ
});

var _PROPSHEETPAGEW_V2 = new StructT('_PROPSHEETPAGEW_V2', {
 dwSize: DWORD,
 dwFlags: DWORD,
 hInstance: HINSTANCE,
 pszTitle: LPCWSTR,
 pfnDlgProc: DLGPROC,
 lParam: LPARAM,
 pfnCallback: LPFNPSPCALLBACKW,
 pcRefParent: uint.Δ,
 pszHeaderTitle: LPCWSTR,
 pszHeaderSubTitle: LPCWSTR
});

var _PROPSHEETPAGEW_V3 = new StructT('_PROPSHEETPAGEW_V3', {
 dwSize: DWORD,
 dwFlags: DWORD,
 hInstance: HINSTANCE,
 pszTitle: LPCWSTR,
 pfnDlgProc: DLGPROC,
 lParam: LPARAM,
 pfnCallback: LPFNPSPCALLBACKW,
 pcRefParent: uint.Δ,
 pszHeaderTitle: LPCWSTR,
 pszHeaderSubTitle: LPCWSTR,
 hActCtx: HANDLE
});

var _PROPSHEETHEADERA_V1 = new StructT('_PROPSHEETHEADERA_V1', {
 dwSize: DWORD,
 dwFlags: DWORD,
 hwndParent: HWND,
 hInstance: HINSTANCE,
 pszCaption: LPCSTR,
 nPages: UINT,
 pfnCallback: PFNPROPSHEETCALLBACK
});

var PROPSHEETHEADERA = new StructT('PROPSHEETHEADERA', {
 dwSize: DWORD,
 dwFlags: DWORD,
 hwndParent: HWND,
 hInstance: HINSTANCE,
 pszCaption: LPCSTR,
 nPages: UINT,
 pfnCallback: PFNPROPSHEETCALLBACK,
 hplWatermark: HPALETTE
});

var _PROPSHEETHEADERW_V1 = new StructT('_PROPSHEETHEADERW_V1', {
 dwSize: DWORD,
 dwFlags: DWORD,
 hwndParent: HWND,
 hInstance: HINSTANCE,
 pszCaption: LPCWSTR,
 nPages: UINT,
 pfnCallback: PFNPROPSHEETCALLBACK
});

var PROPSHEETHEADERW = new StructT('PROPSHEETHEADERW', {
 dwSize: DWORD,
 dwFlags: DWORD,
 hwndParent: HWND,
 hInstance: HINSTANCE,
 pszCaption: LPCWSTR,
 nPages: UINT,
 pfnCallback: PFNPROPSHEETCALLBACK,
 hplWatermark: HPALETTE
});

var _PSHNOTIFY = new StructT('_PSHNOTIFY', {
 hdr: NMHDR,
 lParam: LPARAM
});

var PRINTER_INFO_1 = new StructT('PRINTER_INFO_1', {
 Flags: DWORD,
 pDescription: LPSTR,
 pName: LPSTR,
 pComment: LPSTR
});

var _PRINTER_INFO_1W = new StructT('_PRINTER_INFO_1W', {
 Flags: DWORD,
 pDescription: LPWSTR,
 pName: LPWSTR,
 pComment: LPWSTR
});

var PRINTER_INFO_2 = new StructT('PRINTER_INFO_2', {
 pServerName: LPSTR,
 pPrinterName: LPSTR,
 pShareName: LPSTR,
 pPortName: LPSTR,
 pDriverName: LPSTR,
 pComment: LPSTR,
 pLocation: LPSTR,
 pDevMode: LPDEVMODEA,
 pSepFile: LPSTR,
 pPrintProcessor: LPSTR,
 pDatatype: LPSTR,
 pParameters: LPSTR,
 pSecurityDescriptor: PSECURITY_DESCRIPTOR,
 Attributes: DWORD,
 Priority: DWORD,
 DefaultPriority: DWORD,
 StartTime: DWORD,
 UntilTime: DWORD,
 Status: DWORD,
 cJobs: DWORD,
 AveragePPM: DWORD
});

var _PRINTER_INFO_2W = new StructT('_PRINTER_INFO_2W', {
 pServerName: LPWSTR,
 pPrinterName: LPWSTR,
 pShareName: LPWSTR,
 pPortName: LPWSTR,
 pDriverName: LPWSTR,
 pComment: LPWSTR,
 pLocation: LPWSTR,
 pDevMode: LPDEVMODEW,
 pSepFile: LPWSTR,
 pPrintProcessor: LPWSTR,
 pDatatype: LPWSTR,
 pParameters: LPWSTR,
 pSecurityDescriptor: PSECURITY_DESCRIPTOR,
 Attributes: DWORD,
 Priority: DWORD,
 DefaultPriority: DWORD,
 StartTime: DWORD,
 UntilTime: DWORD,
 Status: DWORD,
 cJobs: DWORD,
 AveragePPM: DWORD
});

var _PRINTER_INFO_3 = new StructT('_PRINTER_INFO_3', {
 pSecurityDescriptor: PSECURITY_DESCRIPTOR
});

var PRINTER_INFO_4 = new StructT('PRINTER_INFO_4', {
 pPrinterName: LPSTR,
 pServerName: LPSTR,
 Attributes: DWORD
});

var _PRINTER_INFO_4W = new StructT('_PRINTER_INFO_4W', {
 pPrinterName: LPWSTR,
 pServerName: LPWSTR,
 Attributes: DWORD
});

var PRINTER_INFO_5 = new StructT('PRINTER_INFO_5', {
 pPrinterName: LPSTR,
 pPortName: LPSTR,
 Attributes: DWORD,
 DeviceNotSelectedTimeout: DWORD,
 TransmissionRetryTimeout: DWORD
});

var _PRINTER_INFO_5W = new StructT('_PRINTER_INFO_5W', {
 pPrinterName: LPWSTR,
 pPortName: LPWSTR,
 Attributes: DWORD,
 DeviceNotSelectedTimeout: DWORD,
 TransmissionRetryTimeout: DWORD
});

var _PRINTER_INFO_6 = new StructT('_PRINTER_INFO_6', {
 dwStatus: DWORD
});

var PRINTER_INFO_7 = new StructT('PRINTER_INFO_7', {
 pszObjectGUID: LPSTR,
 dwAction: DWORD
});

var _PRINTER_INFO_7W = new StructT('_PRINTER_INFO_7W', {
 pszObjectGUID: LPWSTR,
 dwAction: DWORD
});

var PRINTER_INFO_8 = new StructT('PRINTER_INFO_8', {
 pDevMode: LPDEVMODEA
});

var _PRINTER_INFO_8W = new StructT('_PRINTER_INFO_8W', {
 pDevMode: LPDEVMODEW
});

var PRINTER_INFO_9 = new StructT('PRINTER_INFO_9', {
 pDevMode: LPDEVMODEA
});

var _PRINTER_INFO_9W = new StructT('_PRINTER_INFO_9W', {
 pDevMode: LPDEVMODEW
});

var JOB_INFO_1 = new StructT('JOB_INFO_1', {
 JobId: DWORD,
 pPrinterName: LPSTR,
 pMachineName: LPSTR,
 pUserName: LPSTR,
 pDocument: LPSTR,
 pDatatype: LPSTR,
 pStatus: LPSTR,
 Status: DWORD,
 Priority: DWORD,
 Position: DWORD,
 TotalPages: DWORD,
 PagesPrinted: DWORD,
 Submitted: SYSTEMTIME
});

var _JOB_INFO_1W = new StructT('_JOB_INFO_1W', {
 JobId: DWORD,
 pPrinterName: LPWSTR,
 pMachineName: LPWSTR,
 pUserName: LPWSTR,
 pDocument: LPWSTR,
 pDatatype: LPWSTR,
 pStatus: LPWSTR,
 Status: DWORD,
 Priority: DWORD,
 Position: DWORD,
 TotalPages: DWORD,
 PagesPrinted: DWORD,
 Submitted: SYSTEMTIME
});

var JOB_INFO_2 = new StructT('JOB_INFO_2', {
 JobId: DWORD,
 pPrinterName: LPSTR,
 pMachineName: LPSTR,
 pUserName: LPSTR,
 pDocument: LPSTR,
 pNotifyName: LPSTR,
 pDatatype: LPSTR,
 pPrintProcessor: LPSTR,
 pParameters: LPSTR,
 pDriverName: LPSTR,
 pDevMode: LPDEVMODEA,
 pStatus: LPSTR,
 pSecurityDescriptor: PSECURITY_DESCRIPTOR,
 Status: DWORD,
 Priority: DWORD,
 Position: DWORD,
 StartTime: DWORD,
 UntilTime: DWORD,
 TotalPages: DWORD,
 Size: DWORD,
 Submitted: SYSTEMTIME,
 Time: DWORD,
 PagesPrinted: DWORD
});

var _JOB_INFO_2W = new StructT('_JOB_INFO_2W', {
 JobId: DWORD,
 pPrinterName: LPWSTR,
 pMachineName: LPWSTR,
 pUserName: LPWSTR,
 pDocument: LPWSTR,
 pNotifyName: LPWSTR,
 pDatatype: LPWSTR,
 pPrintProcessor: LPWSTR,
 pParameters: LPWSTR,
 pDriverName: LPWSTR,
 pDevMode: LPDEVMODEW,
 pStatus: LPWSTR,
 pSecurityDescriptor: PSECURITY_DESCRIPTOR,
 Status: DWORD,
 Priority: DWORD,
 Position: DWORD,
 StartTime: DWORD,
 UntilTime: DWORD,
 TotalPages: DWORD,
 Size: DWORD,
 Submitted: SYSTEMTIME,
 Time: DWORD,
 PagesPrinted: DWORD
});

var _JOB_INFO_3 = new StructT('_JOB_INFO_3', {
 JobId: DWORD,
 NextJobId: DWORD,
 Reserved: DWORD
});

var JOB_INFO_4 = new StructT('JOB_INFO_4', {
 JobId: DWORD,
 pPrinterName: LPSTR,
 pMachineName: LPSTR,
 pUserName: LPSTR,
 pDocument: LPSTR,
 pNotifyName: LPSTR,
 pDatatype: LPSTR,
 pPrintProcessor: LPSTR,
 pParameters: LPSTR,
 pDriverName: LPSTR,
 pDevMode: LPDEVMODEA,
 pStatus: LPSTR,
 pSecurityDescriptor: PSECURITY_DESCRIPTOR,
 Status: DWORD,
 Priority: DWORD,
 Position: DWORD,
 StartTime: DWORD,
 UntilTime: DWORD,
 TotalPages: DWORD,
 Size: DWORD,
 Submitted: SYSTEMTIME,
 Time: DWORD,
 PagesPrinted: DWORD,
 SizeHigh: LONG
});

var _JOB_INFO_4W = new StructT('_JOB_INFO_4W', {
 JobId: DWORD,
 pPrinterName: LPWSTR,
 pMachineName: LPWSTR,
 pUserName: LPWSTR,
 pDocument: LPWSTR,
 pNotifyName: LPWSTR,
 pDatatype: LPWSTR,
 pPrintProcessor: LPWSTR,
 pParameters: LPWSTR,
 pDriverName: LPWSTR,
 pDevMode: LPDEVMODEW,
 pStatus: LPWSTR,
 pSecurityDescriptor: PSECURITY_DESCRIPTOR,
 Status: DWORD,
 Priority: DWORD,
 Position: DWORD,
 StartTime: DWORD,
 UntilTime: DWORD,
 TotalPages: DWORD,
 Size: DWORD,
 Submitted: SYSTEMTIME,
 Time: DWORD,
 PagesPrinted: DWORD,
 SizeHigh: LONG
});

var ADDJOB_INFO_1 = new StructT('ADDJOB_INFO_1', {
 Path: LPSTR,
 JobId: DWORD
});

var _ADDJOB_INFO_1W = new StructT('_ADDJOB_INFO_1W', {
 Path: LPWSTR,
 JobId: DWORD
});

var DRIVER_INFO_1 = new StructT('DRIVER_INFO_1', {
 pName: LPSTR
});

var _DRIVER_INFO_1W = new StructT('_DRIVER_INFO_1W', {
 pName: LPWSTR
});

var DRIVER_INFO_2 = new StructT('DRIVER_INFO_2', {
 cVersion: DWORD,
 pName: LPSTR,
 pEnvironment: LPSTR,
 pDriverPath: LPSTR,
 pDataFile: LPSTR,
 pConfigFile: LPSTR
});

var _DRIVER_INFO_2W = new StructT('_DRIVER_INFO_2W', {
 cVersion: DWORD,
 pName: LPWSTR,
 pEnvironment: LPWSTR,
 pDriverPath: LPWSTR,
 pDataFile: LPWSTR,
 pConfigFile: LPWSTR
});

var DRIVER_INFO_3 = new StructT('DRIVER_INFO_3', {
 cVersion: DWORD,
 pName: LPSTR,
 pEnvironment: LPSTR,
 pDriverPath: LPSTR,
 pDataFile: LPSTR,
 pConfigFile: LPSTR,
 pHelpFile: LPSTR,
 pDependentFiles: LPSTR,
 pMonitorName: LPSTR,
 pDefaultDataType: LPSTR
});

var _DRIVER_INFO_3W = new StructT('_DRIVER_INFO_3W', {
 cVersion: DWORD,
 pName: LPWSTR,
 pEnvironment: LPWSTR,
 pDriverPath: LPWSTR,
 pDataFile: LPWSTR,
 pConfigFile: LPWSTR,
 pHelpFile: LPWSTR,
 pDependentFiles: LPWSTR,
 pMonitorName: LPWSTR,
 pDefaultDataType: LPWSTR
});

var DRIVER_INFO_4 = new StructT('DRIVER_INFO_4', {
 cVersion: DWORD,
 pName: LPSTR,
 pEnvironment: LPSTR,
 pDriverPath: LPSTR,
 pDataFile: LPSTR,
 pConfigFile: LPSTR,
 pHelpFile: LPSTR,
 pDependentFiles: LPSTR,
 pMonitorName: LPSTR,
 pDefaultDataType: LPSTR,
 pszzPreviousNames: LPSTR
});

var _DRIVER_INFO_4W = new StructT('_DRIVER_INFO_4W', {
 cVersion: DWORD,
 pName: LPWSTR,
 pEnvironment: LPWSTR,
 pDriverPath: LPWSTR,
 pDataFile: LPWSTR,
 pConfigFile: LPWSTR,
 pHelpFile: LPWSTR,
 pDependentFiles: LPWSTR,
 pMonitorName: LPWSTR,
 pDefaultDataType: LPWSTR,
 pszzPreviousNames: LPWSTR
});

var DRIVER_INFO_5 = new StructT('DRIVER_INFO_5', {
 cVersion: DWORD,
 pName: LPSTR,
 pEnvironment: LPSTR,
 pDriverPath: LPSTR,
 pDataFile: LPSTR,
 pConfigFile: LPSTR,
 dwDriverAttributes: DWORD,
 dwConfigVersion: DWORD,
 dwDriverVersion: DWORD
});

var _DRIVER_INFO_5W = new StructT('_DRIVER_INFO_5W', {
 cVersion: DWORD,
 pName: LPWSTR,
 pEnvironment: LPWSTR,
 pDriverPath: LPWSTR,
 pDataFile: LPWSTR,
 pConfigFile: LPWSTR,
 dwDriverAttributes: DWORD,
 dwConfigVersion: DWORD,
 dwDriverVersion: DWORD
});

var DRIVER_INFO_6 = new StructT('DRIVER_INFO_6', {
 cVersion: DWORD,
 pName: LPSTR,
 pEnvironment: LPSTR,
 pDriverPath: LPSTR,
 pDataFile: LPSTR,
 pConfigFile: LPSTR,
 pHelpFile: LPSTR,
 pDependentFiles: LPSTR,
 pMonitorName: LPSTR,
 pDefaultDataType: LPSTR,
 pszzPreviousNames: LPSTR,
 ftDriverDate: FILETIME,
 dwlDriverVersion: DWORDLONG,
 pszMfgName: LPSTR,
 pszOEMUrl: LPSTR,
 pszHardwareID: LPSTR,
 pszProvider: LPSTR
});

var _DRIVER_INFO_6W = new StructT('_DRIVER_INFO_6W', {
 cVersion: DWORD,
 pName: LPWSTR,
 pEnvironment: LPWSTR,
 pDriverPath: LPWSTR,
 pDataFile: LPWSTR,
 pConfigFile: LPWSTR,
 pHelpFile: LPWSTR,
 pDependentFiles: LPWSTR,
 pMonitorName: LPWSTR,
 pDefaultDataType: LPWSTR,
 pszzPreviousNames: LPWSTR,
 ftDriverDate: FILETIME,
 dwlDriverVersion: DWORDLONG,
 pszMfgName: LPWSTR,
 pszOEMUrl: LPWSTR,
 pszHardwareID: LPWSTR,
 pszProvider: LPWSTR
});

var DRIVER_INFO_8 = new StructT('DRIVER_INFO_8', {
 cVersion: DWORD,
 pName: LPSTR,
 pEnvironment: LPSTR,
 pDriverPath: LPSTR,
 pDataFile: LPSTR,
 pConfigFile: LPSTR,
 pHelpFile: LPSTR,
 pDependentFiles: LPSTR,
 pMonitorName: LPSTR,
 pDefaultDataType: LPSTR,
 pszzPreviousNames: LPSTR,
 ftDriverDate: FILETIME,
 dwlDriverVersion: DWORDLONG,
 pszMfgName: LPSTR,
 pszOEMUrl: LPSTR,
 pszHardwareID: LPSTR,
 pszProvider: LPSTR,
 pszPrintProcessor: LPSTR,
 pszVendorSetup: LPSTR,
 pszzColorProfiles: LPSTR,
 pszInfPath: LPSTR,
 dwPrinterDriverAttributes: DWORD,
 pszzCoreDriverDependencies: LPSTR,
 ftMinInboxDriverVerDate: FILETIME,
 dwlMinInboxDriverVerVersion: DWORDLONG
});

var _DRIVER_INFO_8W = new StructT('_DRIVER_INFO_8W', {
 cVersion: DWORD,
 pName: LPWSTR,
 pEnvironment: LPWSTR,
 pDriverPath: LPWSTR,
 pDataFile: LPWSTR,
 pConfigFile: LPWSTR,
 pHelpFile: LPWSTR,
 pDependentFiles: LPWSTR,
 pMonitorName: LPWSTR,
 pDefaultDataType: LPWSTR,
 pszzPreviousNames: LPWSTR,
 ftDriverDate: FILETIME,
 dwlDriverVersion: DWORDLONG,
 pszMfgName: LPWSTR,
 pszOEMUrl: LPWSTR,
 pszHardwareID: LPWSTR,
 pszProvider: LPWSTR,
 pszPrintProcessor: LPWSTR,
 pszVendorSetup: LPWSTR,
 pszzColorProfiles: LPWSTR,
 pszInfPath: LPWSTR,
 dwPrinterDriverAttributes: DWORD,
 pszzCoreDriverDependencies: LPWSTR,
 ftMinInboxDriverVerDate: FILETIME,
 dwlMinInboxDriverVerVersion: DWORDLONG
});

var DOC_INFO_1 = new StructT('DOC_INFO_1', {
 pDocName: LPSTR,
 pOutputFile: LPSTR,
 pDatatype: LPSTR
});

var _DOC_INFO_1W = new StructT('_DOC_INFO_1W', {
 pDocName: LPWSTR,
 pOutputFile: LPWSTR,
 pDatatype: LPWSTR
});

var FORM_INFO_1 = new StructT('FORM_INFO_1', {
 Flags: DWORD,
 pName: LPSTR,
 Size: SIZEL,
 ImageableArea: RECTL
});

var _FORM_INFO_1W = new StructT('_FORM_INFO_1W', {
 Flags: DWORD,
 pName: LPWSTR,
 Size: SIZEL,
 ImageableArea: RECTL
});

var FORM_INFO_2 = new StructT('FORM_INFO_2', {
 Flags: DWORD,
 pName: LPCSTR,
 Size: SIZEL,
 ImageableArea: RECTL,
 pKeyword: LPCSTR,
 StringType: DWORD,
 pMuiDll: LPCSTR,
 dwResourceId: DWORD,
 pDisplayName: LPCSTR,
 wLangId: LANGID
});

var _FORM_INFO_2W = new StructT('_FORM_INFO_2W', {
 Flags: DWORD,
 pName: LPCWSTR,
 Size: SIZEL,
 ImageableArea: RECTL,
 pKeyword: LPCSTR,
 StringType: DWORD,
 pMuiDll: LPCWSTR,
 dwResourceId: DWORD,
 pDisplayName: LPCWSTR,
 wLangId: LANGID
});

var DOC_INFO_2 = new StructT('DOC_INFO_2', {
 pDocName: LPSTR,
 pOutputFile: LPSTR,
 pDatatype: LPSTR,
 dwMode: DWORD,
 JobId: DWORD
});

var _DOC_INFO_2W = new StructT('_DOC_INFO_2W', {
 pDocName: LPWSTR,
 pOutputFile: LPWSTR,
 pDatatype: LPWSTR,
 dwMode: DWORD,
 JobId: DWORD
});

var DOC_INFO_3 = new StructT('DOC_INFO_3', {
 pDocName: LPSTR,
 pOutputFile: LPSTR,
 pDatatype: LPSTR,
 dwFlags: DWORD
});

var _DOC_INFO_3W = new StructT('_DOC_INFO_3W', {
 pDocName: LPWSTR,
 pOutputFile: LPWSTR,
 pDatatype: LPWSTR,
 dwFlags: DWORD
});

var PRINTPROCESSOR_INFO_1 = new StructT('PRINTPROCESSOR_INFO_1', {
 pName: LPSTR
});

var _PRINTPROCESSOR_INFO_1W = new StructT('_PRINTPROCESSOR_INFO_1W', {
 pName: LPWSTR
});

var _PRINTPROCESSOR_CAPS_1 = new StructT('_PRINTPROCESSOR_CAPS_1', {
 dwLevel: DWORD,
 dwNupOptions: DWORD,
 dwPageOrderFlags: DWORD,
 dwNumberOfCopies: DWORD
});

var _PRINTPROCESSOR_CAPS_2 = new StructT('_PRINTPROCESSOR_CAPS_2', {
 dwLevel: DWORD,
 dwNupOptions: DWORD,
 dwPageOrderFlags: DWORD,
 dwNumberOfCopies: DWORD,
 dwDuplexHandlingCaps: DWORD,
 dwNupDirectionCaps: DWORD,
 dwNupBorderCaps: DWORD,
 dwBookletHandlingCaps: DWORD,
 dwScalingCaps: DWORD
});

var PORT_INFO_1 = new StructT('PORT_INFO_1', {
 pName: LPSTR
});

var _PORT_INFO_1W = new StructT('_PORT_INFO_1W', {
 pName: LPWSTR
});

var PORT_INFO_2 = new StructT('PORT_INFO_2', {
 pPortName: LPSTR,
 pMonitorName: LPSTR,
 pDescription: LPSTR,
 fPortType: DWORD,
 Reserved: DWORD
});

var _PORT_INFO_2W = new StructT('_PORT_INFO_2W', {
 pPortName: LPWSTR,
 pMonitorName: LPWSTR,
 pDescription: LPWSTR,
 fPortType: DWORD,
 Reserved: DWORD
});

var PORT_INFO_3 = new StructT('PORT_INFO_3', {
 dwStatus: DWORD,
 pszStatus: LPSTR,
 dwSeverity: DWORD
});

var _PORT_INFO_3W = new StructT('_PORT_INFO_3W', {
 dwStatus: DWORD,
 pszStatus: LPWSTR,
 dwSeverity: DWORD
});

var MONITOR_INFO_1 = new StructT('MONITOR_INFO_1', {
 pName: LPSTR
});

var _MONITOR_INFO_1W = new StructT('_MONITOR_INFO_1W', {
 pName: LPWSTR
});

var MONITOR_INFO_2 = new StructT('MONITOR_INFO_2', {
 pName: LPSTR,
 pEnvironment: LPSTR,
 pDLLName: LPSTR
});

var _MONITOR_INFO_2W = new StructT('_MONITOR_INFO_2W', {
 pName: LPWSTR,
 pEnvironment: LPWSTR,
 pDLLName: LPWSTR
});

var DATATYPES_INFO_1 = new StructT('DATATYPES_INFO_1', {
 pName: LPSTR
});

var _DATATYPES_INFO_1W = new StructT('_DATATYPES_INFO_1W', {
 pName: LPWSTR
});

var PRINTER_DEFAULTS = new StructT('PRINTER_DEFAULTS', {
 pDatatype: LPSTR,
 pDevMode: LPDEVMODEA,
 DesiredAccess: ACCESS_MASK
});

var _PRINTER_DEFAULTSW = new StructT('_PRINTER_DEFAULTSW', {
 pDatatype: LPWSTR,
 pDevMode: LPDEVMODEW,
 DesiredAccess: ACCESS_MASK
});

var PRINTER_ENUM_VALUES = new StructT('PRINTER_ENUM_VALUES', {
 pValueName: LPSTR,
 cbValueName: DWORD,
 dwType: DWORD,
 pData: LPBYTE,
 cbData: DWORD
});

var _PRINTER_ENUM_VALUESW = new StructT('_PRINTER_ENUM_VALUESW', {
 pValueName: LPWSTR,
 cbValueName: DWORD,
 dwType: DWORD,
 pData: LPBYTE,
 cbData: DWORD
});

var _PRINTER_NOTIFY_OPTIONS_TYPE = new StructT('_PRINTER_NOTIFY_OPTIONS_TYPE', {
 Type: WORD,
 Reserved0: WORD,
 Reserved1: DWORD,
 Reserved2: DWORD,
 Count: DWORD,
 pFields: PWORD
});

var _PRINTER_NOTIFY_OPTIONS = new StructT('_PRINTER_NOTIFY_OPTIONS', {
 Version: DWORD,
 Flags: DWORD,
 Count: DWORD,
 pTypes: PPRINTER_NOTIFY_OPTIONS_TYPE
});

var _PRINTER_NOTIFY_INFO_DATA = new StructT('_PRINTER_NOTIFY_INFO_DATA', {
 Type: WORD,
 Field: WORD,
 Reserved: DWORD,
 Id: DWORD,
 NotifyData: c:winspool.h@68995@S@_PRINTER_NOTIFY_INFO_DATA@Ua
});

var undefined = new StructT('undefined', {
 cbBuf: DWORD,
 pBuf: LPVOID
});

var _PRINTER_NOTIFY_INFO = new StructT('_PRINTER_NOTIFY_INFO', {
 Version: DWORD,
 Flags: DWORD,
 Count: DWORD,
 aData: ARRAY(PRINTER_NOTIFY_INFO_DATA, 1)
});

var _BINARY_CONTAINER = new StructT('_BINARY_CONTAINER', {
 cbBuf: DWORD,
 pData: LPBYTE
});

var _BIDI_DATA = new StructT('_BIDI_DATA', {
 dwBidiType: DWORD,
 u: c:winspool.h@69670@S@_BIDI_DATA@Ua
});

var _BIDI_REQUEST_DATA = new StructT('_BIDI_REQUEST_DATA', {
 dwReqNumber: DWORD,
 pSchema: LPWSTR,
 data: BIDI_DATA
});

var _BIDI_REQUEST_CONTAINER = new StructT('_BIDI_REQUEST_CONTAINER', {
 Version: DWORD,
 Flags: DWORD,
 Count: DWORD,
 aData: ARRAY(BIDI_REQUEST_DATA,  1 )
});

var _BIDI_RESPONSE_DATA = new StructT('_BIDI_RESPONSE_DATA', {
 dwResult: DWORD,
 dwReqNumber: DWORD,
 pSchema: LPWSTR,
 data: BIDI_DATA
});

var _BIDI_RESPONSE_CONTAINER = new StructT('_BIDI_RESPONSE_CONTAINER', {
 Version: DWORD,
 Flags: DWORD,
 Count: DWORD,
 aData: ARRAY(BIDI_RESPONSE_DATA,  1 )
});

var PROVIDOR_INFO_1 = new StructT('PROVIDOR_INFO_1', {
 pName: LPSTR,
 pEnvironment: LPSTR,
 pDLLName: LPSTR
});

var _PROVIDOR_INFO_1W = new StructT('_PROVIDOR_INFO_1W', {
 pName: LPWSTR,
 pEnvironment: LPWSTR,
 pDLLName: LPWSTR
});

var PROVIDOR_INFO_2 = new StructT('PROVIDOR_INFO_2', {
 pOrder: LPSTR
});

var _PROVIDOR_INFO_2W = new StructT('_PROVIDOR_INFO_2W', {
 pOrder: LPWSTR
});

var PRINTER_OPTIONS = new StructT('PRINTER_OPTIONS', {
 cbSize: UINT,
 dwFlags: DWORD
});

var _PRINTER_OPTIONSW = new StructT('_PRINTER_OPTIONSW', {
 cbSize: UINT,
 dwFlags: DWORD
});

var PRINTER_CONNECTION_INFO_1 = new StructT('PRINTER_CONNECTION_INFO_1', {
 dwFlags: DWORD,
 pszDriverName: LPSTR
});

var _PRINTER_CONNECTION_INFO_1W = new StructT('_PRINTER_CONNECTION_INFO_1W', {
 dwFlags: DWORD,
 pszDriverName: LPWSTR
});

var CORE_PRINTER_DRIVER = new StructT('CORE_PRINTER_DRIVER', {
 CoreDriverGUID: GUID,
 ftDriverDate: FILETIME,
 dwlDriverVersion: DWORDLONG,
 szPackageID: ARRAY(CHAR, MAX_PATH)
});

var _CORE_PRINTER_DRIVERW = new StructT('_CORE_PRINTER_DRIVERW', {
 CoreDriverGUID: GUID,
 ftDriverDate: FILETIME,
 dwlDriverVersion: DWORDLONG,
 szPackageID: ARRAY(WCHAR, MAX_PATH)
});

var undefined = new StructT('undefined', {
 ePropertyType: EPrintPropertyType,
 value: c:winspool.h@106621@SA@PrintPropertyValue@Ua
});

var undefined = new StructT('undefined', {
 cbBuf: DWORD,
 pBuf: LPVOID
});

var undefined = new StructT('undefined', {
 propertyName: ushort.Δ,
 propertyValue: PrintPropertyValue
});

var undefined = new StructT('undefined', {
 numberOfProperties: ULONG,
 propertiesCollection: uint.Δ
});

var undefined = new StructT('undefined', {
 context: PRINT_EXECUTION_CONTEXT,
 clientAppPID: DWORD
});

var _div_t = new StructT('_div_t', {
 quot: int,
 rem: int
});

var _ldiv_t = new StructT('_ldiv_t', {
 quot: long,
 rem: long
});

var _lldiv_t = new StructT('_lldiv_t', {
 quot: longlong,
 rem: longlong
});

var undefined = new StructT('undefined', {
 ld: ARRAY(undefined, 10)
});

var undefined = new StructT('undefined', {
 x: double
});

var undefined = new StructT('undefined', {
 f: float
});

var undefined = new StructT('undefined', {
 x: longdouble
});

var undefined = new StructT('undefined', {
 ld12: ARRAY(undefined, 12)
});

var IUnknown = new StructT('IUnknown', {
 lpVtbl: IUnknownVtbl.Δ
});

var AsyncIUnknown = new StructT('AsyncIUnknown', {
 lpVtbl: AsyncIUnknownVtbl.Δ
});

var IClassFactory = new StructT('IClassFactory', {
 lpVtbl: IClassFactoryVtbl.Δ
});

var IUnknownVtbl = new StructT('IUnknownVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ
});

var AsyncIUnknownVtbl = new StructT('AsyncIUnknownVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Begin_QueryInterface: UNEXPOSED.Δ,
 Finish_QueryInterface: UNEXPOSED.Δ,
 Begin_AddRef: UNEXPOSED.Δ,
 Finish_AddRef: UNEXPOSED.Δ,
 Begin_Release: UNEXPOSED.Δ,
 Finish_Release: UNEXPOSED.Δ
});

var IClassFactoryVtbl = new StructT('IClassFactoryVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 CreateInstance: UNEXPOSED.Δ,
 LockServer: UNEXPOSED.Δ
});

var IMarshal = new StructT('IMarshal', {
 lpVtbl: IMarshalVtbl.Δ
});

var IMarshal2 = new StructT('IMarshal2', {
 lpVtbl: IMarshal2Vtbl.Δ
});

var IMalloc = new StructT('IMalloc', {
 lpVtbl: IMallocVtbl.Δ
});

var IMallocSpy = new StructT('IMallocSpy', {
 lpVtbl: IMallocSpyVtbl.Δ
});

var IStdMarshalInfo = new StructT('IStdMarshalInfo', {
 lpVtbl: IStdMarshalInfoVtbl.Δ
});

var IExternalConnection = new StructT('IExternalConnection', {
 lpVtbl: IExternalConnectionVtbl.Δ
});

var IMultiQI = new StructT('IMultiQI', {
 lpVtbl: IMultiQIVtbl.Δ
});

var AsyncIMultiQI = new StructT('AsyncIMultiQI', {
 lpVtbl: AsyncIMultiQIVtbl.Δ
});

var IInternalUnknown = new StructT('IInternalUnknown', {
 lpVtbl: IInternalUnknownVtbl.Δ
});

var IEnumUnknown = new StructT('IEnumUnknown', {
 lpVtbl: IEnumUnknownVtbl.Δ
});

var IBindCtx = new StructT('IBindCtx', {
 lpVtbl: IBindCtxVtbl.Δ
});

var IEnumMoniker = new StructT('IEnumMoniker', {
 lpVtbl: IEnumMonikerVtbl.Δ
});

var IRunnableObject = new StructT('IRunnableObject', {
 lpVtbl: IRunnableObjectVtbl.Δ
});

var IRunningObjectTable = new StructT('IRunningObjectTable', {
 lpVtbl: IRunningObjectTableVtbl.Δ
});

var IPersist = new StructT('IPersist', {
 lpVtbl: IPersistVtbl.Δ
});

var IPersistStream = new StructT('IPersistStream', {
 lpVtbl: IPersistStreamVtbl.Δ
});

var IMoniker = new StructT('IMoniker', {
 lpVtbl: IMonikerVtbl.Δ
});

var IROTData = new StructT('IROTData', {
 lpVtbl: IROTDataVtbl.Δ
});

var IEnumString = new StructT('IEnumString', {
 lpVtbl: IEnumStringVtbl.Δ
});

var ISequentialStream = new StructT('ISequentialStream', {
 lpVtbl: ISequentialStreamVtbl.Δ
});

var IStream = new StructT('IStream', {
 lpVtbl: IStreamVtbl.Δ
});

var IEnumSTATSTG = new StructT('IEnumSTATSTG', {
 lpVtbl: IEnumSTATSTGVtbl.Δ
});

var IStorage = new StructT('IStorage', {
 lpVtbl: IStorageVtbl.Δ
});

var IPersistFile = new StructT('IPersistFile', {
 lpVtbl: IPersistFileVtbl.Δ
});

var IPersistStorage = new StructT('IPersistStorage', {
 lpVtbl: IPersistStorageVtbl.Δ
});

var ILockBytes = new StructT('ILockBytes', {
 lpVtbl: ILockBytesVtbl.Δ
});

var IEnumFORMATETC = new StructT('IEnumFORMATETC', {
 lpVtbl: IEnumFORMATETCVtbl.Δ
});

var IEnumSTATDATA = new StructT('IEnumSTATDATA', {
 lpVtbl: IEnumSTATDATAVtbl.Δ
});

var IRootStorage = new StructT('IRootStorage', {
 lpVtbl: IRootStorageVtbl.Δ
});

var IAdviseSink = new StructT('IAdviseSink', {
 lpVtbl: IAdviseSinkVtbl.Δ
});

var AsyncIAdviseSink = new StructT('AsyncIAdviseSink', {
 lpVtbl: AsyncIAdviseSinkVtbl.Δ
});

var IAdviseSink2 = new StructT('IAdviseSink2', {
 lpVtbl: IAdviseSink2Vtbl.Δ
});

var AsyncIAdviseSink2 = new StructT('AsyncIAdviseSink2', {
 lpVtbl: AsyncIAdviseSink2Vtbl.Δ
});

var IDataObject = new StructT('IDataObject', {
 lpVtbl: IDataObjectVtbl.Δ
});

var IDataAdviseHolder = new StructT('IDataAdviseHolder', {
 lpVtbl: IDataAdviseHolderVtbl.Δ
});

var IMessageFilter = new StructT('IMessageFilter', {
 lpVtbl: IMessageFilterVtbl.Δ
});

var IRpcChannelBuffer2 = new StructT('IRpcChannelBuffer2', {
 lpVtbl: IRpcChannelBuffer2Vtbl.Δ
});

var IAsyncRpcChannelBuffer = new StructT('IAsyncRpcChannelBuffer', {
 lpVtbl: IAsyncRpcChannelBufferVtbl.Δ
});

var IRpcChannelBuffer3 = new StructT('IRpcChannelBuffer3', {
 lpVtbl: IRpcChannelBuffer3Vtbl.Δ
});

var IRpcSyntaxNegotiate = new StructT('IRpcSyntaxNegotiate', {
 lpVtbl: IRpcSyntaxNegotiateVtbl.Δ
});

var IRpcProxyBuffer = new StructT('IRpcProxyBuffer', {
 lpVtbl: IRpcProxyBufferVtbl.Δ
});

var IPSFactoryBuffer = new StructT('IPSFactoryBuffer', {
 lpVtbl: IPSFactoryBufferVtbl.Δ
});

var IChannelHook = new StructT('IChannelHook', {
 lpVtbl: IChannelHookVtbl.Δ
});

var IClientSecurity = new StructT('IClientSecurity', {
 lpVtbl: IClientSecurityVtbl.Δ
});

var IServerSecurity = new StructT('IServerSecurity', {
 lpVtbl: IServerSecurityVtbl.Δ
});

var IClassActivator = new StructT('IClassActivator', {
 lpVtbl: IClassActivatorVtbl.Δ
});

var IRpcOptions = new StructT('IRpcOptions', {
 lpVtbl: IRpcOptionsVtbl.Δ
});

var IGlobalOptions = new StructT('IGlobalOptions', {
 lpVtbl: IGlobalOptionsVtbl.Δ
});

var IFillLockBytes = new StructT('IFillLockBytes', {
 lpVtbl: IFillLockBytesVtbl.Δ
});

var IProgressNotify = new StructT('IProgressNotify', {
 lpVtbl: IProgressNotifyVtbl.Δ
});

var ILayoutStorage = new StructT('ILayoutStorage', {
 lpVtbl: ILayoutStorageVtbl.Δ
});

var IBlockingLock = new StructT('IBlockingLock', {
 lpVtbl: IBlockingLockVtbl.Δ
});

var ITimeAndNoticeControl = new StructT('ITimeAndNoticeControl', {
 lpVtbl: ITimeAndNoticeControlVtbl.Δ
});

var IOplockStorage = new StructT('IOplockStorage', {
 lpVtbl: IOplockStorageVtbl.Δ
});

var ISurrogate = new StructT('ISurrogate', {
 lpVtbl: ISurrogateVtbl.Δ
});

var IGlobalInterfaceTable = new StructT('IGlobalInterfaceTable', {
 lpVtbl: IGlobalInterfaceTableVtbl.Δ
});

var IDirectWriterLock = new StructT('IDirectWriterLock', {
 lpVtbl: IDirectWriterLockVtbl.Δ
});

var ISynchronize = new StructT('ISynchronize', {
 lpVtbl: ISynchronizeVtbl.Δ
});

var ISynchronizeHandle = new StructT('ISynchronizeHandle', {
 lpVtbl: ISynchronizeHandleVtbl.Δ
});

var ISynchronizeEvent = new StructT('ISynchronizeEvent', {
 lpVtbl: ISynchronizeEventVtbl.Δ
});

var ISynchronizeContainer = new StructT('ISynchronizeContainer', {
 lpVtbl: ISynchronizeContainerVtbl.Δ
});

var ISynchronizeMutex = new StructT('ISynchronizeMutex', {
 lpVtbl: ISynchronizeMutexVtbl.Δ
});

var ICancelMethodCalls = new StructT('ICancelMethodCalls', {
 lpVtbl: ICancelMethodCallsVtbl.Δ
});

var IAsyncManager = new StructT('IAsyncManager', {
 lpVtbl: IAsyncManagerVtbl.Δ
});

var ICallFactory = new StructT('ICallFactory', {
 lpVtbl: ICallFactoryVtbl.Δ
});

var IRpcHelper = new StructT('IRpcHelper', {
 lpVtbl: IRpcHelperVtbl.Δ
});

var IReleaseMarshalBuffers = new StructT('IReleaseMarshalBuffers', {
 lpVtbl: IReleaseMarshalBuffersVtbl.Δ
});

var IWaitMultiple = new StructT('IWaitMultiple', {
 lpVtbl: IWaitMultipleVtbl.Δ
});

var IUrlMon = new StructT('IUrlMon', {
 lpVtbl: IUrlMonVtbl.Δ
});

var IForegroundTransfer = new StructT('IForegroundTransfer', {
 lpVtbl: IForegroundTransferVtbl.Δ
});

var IAddrTrackingControl = new StructT('IAddrTrackingControl', {
 lpVtbl: IAddrTrackingControlVtbl.Δ
});

var IAddrExclusionControl = new StructT('IAddrExclusionControl', {
 lpVtbl: IAddrExclusionControlVtbl.Δ
});

var IPipeByte = new StructT('IPipeByte', {
 lpVtbl: IPipeByteVtbl.Δ
});

var AsyncIPipeByte = new StructT('AsyncIPipeByte', {
 lpVtbl: AsyncIPipeByteVtbl.Δ
});

var IPipeLong = new StructT('IPipeLong', {
 lpVtbl: IPipeLongVtbl.Δ
});

var AsyncIPipeLong = new StructT('AsyncIPipeLong', {
 lpVtbl: AsyncIPipeLongVtbl.Δ
});

var IPipeDouble = new StructT('IPipeDouble', {
 lpVtbl: IPipeDoubleVtbl.Δ
});

var AsyncIPipeDouble = new StructT('AsyncIPipeDouble', {
 lpVtbl: AsyncIPipeDoubleVtbl.Δ
});

var IThumbnailExtractor = new StructT('IThumbnailExtractor', {
 lpVtbl: IThumbnailExtractorVtbl.Δ
});

var IDummyHICONIncluder = new StructT('IDummyHICONIncluder', {
 lpVtbl: IDummyHICONIncluderVtbl.Δ
});




var IProcessLock = new StructT('IProcessLock', {
 lpVtbl: IProcessLockVtbl.Δ
});

var ISurrogateService = new StructT('ISurrogateService', {
 lpVtbl: ISurrogateServiceVtbl.Δ
});

var IComThreadingInfo = new StructT('IComThreadingInfo', {
 lpVtbl: IComThreadingInfoVtbl.Δ
});

var IProcessInitControl = new StructT('IProcessInitControl', {
 lpVtbl: IProcessInitControlVtbl.Δ
});

var IInitializeSpy = new StructT('IInitializeSpy', {
 lpVtbl: IInitializeSpyVtbl.Δ
});

var _COSERVERINFO = new StructT('_COSERVERINFO', {
 dwReserved1: DWORD,
 pwszName: LPWSTR,
 pAuthInfo: uint.Δ,
 dwReserved2: DWORD
});

var IMarshalVtbl = new StructT('IMarshalVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetUnmarshalClass: UNEXPOSED.Δ,
 GetMarshalSizeMax: UNEXPOSED.Δ,
 MarshalInterface: UNEXPOSED.Δ,
 UnmarshalInterface: UNEXPOSED.Δ,
 ReleaseMarshalData: UNEXPOSED.Δ,
 DisconnectObject: UNEXPOSED.Δ
});

var IMarshal2Vtbl = new StructT('IMarshal2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetUnmarshalClass: UNEXPOSED.Δ,
 GetMarshalSizeMax: UNEXPOSED.Δ,
 MarshalInterface: UNEXPOSED.Δ,
 UnmarshalInterface: UNEXPOSED.Δ,
 ReleaseMarshalData: UNEXPOSED.Δ,
 DisconnectObject: UNEXPOSED.Δ
});

var IMallocVtbl = new StructT('IMallocVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Alloc: UNEXPOSED.Δ,
 Realloc: UNEXPOSED.Δ,
 Free: UNEXPOSED.Δ,
 GetSize: UNEXPOSED.Δ,
 DidAlloc: UNEXPOSED.Δ,
 HeapMinimize: UNEXPOSED.Δ
});

var IMallocSpyVtbl = new StructT('IMallocSpyVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 PreAlloc: UNEXPOSED.Δ,
 PostAlloc: UNEXPOSED.Δ,
 PreFree: UNEXPOSED.Δ,
 PostFree: UNEXPOSED.Δ,
 PreRealloc: UNEXPOSED.Δ,
 PostRealloc: UNEXPOSED.Δ,
 PreGetSize: UNEXPOSED.Δ,
 PostGetSize: UNEXPOSED.Δ,
 PreDidAlloc: UNEXPOSED.Δ,
 PostDidAlloc: UNEXPOSED.Δ,
 PreHeapMinimize: UNEXPOSED.Δ,
 PostHeapMinimize: UNEXPOSED.Δ
});

var IStdMarshalInfoVtbl = new StructT('IStdMarshalInfoVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetClassForHandler: UNEXPOSED.Δ
});

var IExternalConnectionVtbl = new StructT('IExternalConnectionVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 AddConnection: UNEXPOSED.Δ,
 ReleaseConnection: UNEXPOSED.Δ
});

var tagMULTI_QI = new StructT('tagMULTI_QI', {
 pIID: uint.Δ,
 pItf: uint.Δ,
 hr: HRESULT
});

var IMultiQIVtbl = new StructT('IMultiQIVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 QueryMultipleInterfaces: UNEXPOSED.Δ
});

var AsyncIMultiQIVtbl = new StructT('AsyncIMultiQIVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Begin_QueryMultipleInterfaces: UNEXPOSED.Δ,
 Finish_QueryMultipleInterfaces: UNEXPOSED.Δ
});

var IInternalUnknownVtbl = new StructT('IInternalUnknownVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 QueryInternalInterface: UNEXPOSED.Δ
});

var IEnumUnknownVtbl = new StructT('IEnumUnknownVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Next: UNEXPOSED.Δ,
 Skip: UNEXPOSED.Δ,
 Reset: UNEXPOSED.Δ,
 Clone: UNEXPOSED.Δ
});

var tagBIND_OPTS = new StructT('tagBIND_OPTS', {
 cbStruct: DWORD,
 grfFlags: DWORD,
 grfMode: DWORD,
 dwTickCountDeadline: DWORD
});

var tagBIND_OPTS2 = new StructT('tagBIND_OPTS2', {
 cbStruct: DWORD,
 grfFlags: DWORD,
 grfMode: DWORD,
 dwTickCountDeadline: DWORD,
 dwTrackFlags: DWORD,
 dwClassContext: DWORD,
 locale: LCID,
 pServerInfo: uint.Δ
});

var tagBIND_OPTS3 = new StructT('tagBIND_OPTS3', {
 cbStruct: DWORD,
 grfFlags: DWORD,
 grfMode: DWORD,
 dwTickCountDeadline: DWORD,
 dwTrackFlags: DWORD,
 dwClassContext: DWORD,
 locale: LCID,
 pServerInfo: uint.Δ,
 hwnd: HWND
});

var IBindCtxVtbl = new StructT('IBindCtxVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 RegisterObjectBound: UNEXPOSED.Δ,
 RevokeObjectBound: UNEXPOSED.Δ,
 ReleaseBoundObjects: UNEXPOSED.Δ,
 SetBindOptions: UNEXPOSED.Δ,
 GetBindOptions: UNEXPOSED.Δ,
 GetRunningObjectTable: UNEXPOSED.Δ,
 RegisterObjectParam: UNEXPOSED.Δ,
 GetObjectParam: UNEXPOSED.Δ,
 EnumObjectParam: UNEXPOSED.Δ,
 RevokeObjectParam: UNEXPOSED.Δ
});

var IEnumMonikerVtbl = new StructT('IEnumMonikerVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Next: UNEXPOSED.Δ,
 Skip: UNEXPOSED.Δ,
 Reset: UNEXPOSED.Δ,
 Clone: UNEXPOSED.Δ
});

var IRunnableObjectVtbl = new StructT('IRunnableObjectVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetRunningClass: UNEXPOSED.Δ,
 Run: UNEXPOSED.Δ,
 IsRunning: UNEXPOSED.Δ,
 LockRunning: UNEXPOSED.Δ,
 SetContainedObject: UNEXPOSED.Δ
});

var IRunningObjectTableVtbl = new StructT('IRunningObjectTableVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Register: UNEXPOSED.Δ,
 Revoke: UNEXPOSED.Δ,
 IsRunning: UNEXPOSED.Δ,
 GetObjectA: UNEXPOSED.Δ,
 NoteChangeTime: UNEXPOSED.Δ,
 GetTimeOfLastChange: UNEXPOSED.Δ,
 EnumRunning: UNEXPOSED.Δ
});

var IPersistVtbl = new StructT('IPersistVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetClassID: UNEXPOSED.Δ
});

var IPersistStreamVtbl = new StructT('IPersistStreamVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetClassID: UNEXPOSED.Δ,
 IsDirty: UNEXPOSED.Δ,
 Load: UNEXPOSED.Δ,
 Save: UNEXPOSED.Δ,
 GetSizeMax: UNEXPOSED.Δ
});

var IMonikerVtbl = new StructT('IMonikerVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetClassID: UNEXPOSED.Δ,
 IsDirty: UNEXPOSED.Δ,
 Load: UNEXPOSED.Δ,
 Save: UNEXPOSED.Δ,
 GetSizeMax: UNEXPOSED.Δ,
 BindToObject: UNEXPOSED.Δ,
 BindToStorage: UNEXPOSED.Δ,
 Reduce: UNEXPOSED.Δ,
 ComposeWith: UNEXPOSED.Δ,
 Enum: UNEXPOSED.Δ,
 IsEqual: UNEXPOSED.Δ,
 Hash: UNEXPOSED.Δ,
 IsRunning: UNEXPOSED.Δ,
 GetTimeOfLastChange: UNEXPOSED.Δ,
 Inverse: UNEXPOSED.Δ,
 CommonPrefixWith: UNEXPOSED.Δ,
 RelativePathTo: UNEXPOSED.Δ,
 GetDisplayName: UNEXPOSED.Δ,
 ParseDisplayName: UNEXPOSED.Δ,
 IsSystemMoniker: UNEXPOSED.Δ
});

var IROTDataVtbl = new StructT('IROTDataVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetComparisonData: UNEXPOSED.Δ
});

var IEnumStringVtbl = new StructT('IEnumStringVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Next: UNEXPOSED.Δ,
 Skip: UNEXPOSED.Δ,
 Reset: UNEXPOSED.Δ,
 Clone: UNEXPOSED.Δ
});

var ISequentialStreamVtbl = new StructT('ISequentialStreamVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Read: UNEXPOSED.Δ,
 Write: UNEXPOSED.Δ
});

var tagSTATSTG = new StructT('tagSTATSTG', {
 pwcsName: LPOLESTR,
 type: DWORD,
 cbSize: ULARGE_INTEGER,
 mtime: FILETIME,
 ctime: FILETIME,
 atime: FILETIME,
 grfMode: DWORD,
 grfLocksSupported: DWORD,
 clsid: CLSID,
 grfStateBits: DWORD,
 reserved: DWORD
});

var IStreamVtbl = new StructT('IStreamVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Read: UNEXPOSED.Δ,
 Write: UNEXPOSED.Δ,
 Seek: UNEXPOSED.Δ,
 SetSize: UNEXPOSED.Δ,
 CopyTo: UNEXPOSED.Δ,
 Commit: UNEXPOSED.Δ,
 Revert: UNEXPOSED.Δ,
 LockRegion: UNEXPOSED.Δ,
 UnlockRegion: UNEXPOSED.Δ,
 Stat: UNEXPOSED.Δ,
 Clone: UNEXPOSED.Δ
});

var IEnumSTATSTGVtbl = new StructT('IEnumSTATSTGVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Next: UNEXPOSED.Δ,
 Skip: UNEXPOSED.Δ,
 Reset: UNEXPOSED.Δ,
 Clone: UNEXPOSED.Δ
});

var tagRemSNB = new StructT('tagRemSNB', {
 ulCntStr: ulong,
 ulCntChar: ulong,
 rgString: ARRAY(OLECHAR,  1 )
});

var IStorageVtbl = new StructT('IStorageVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 CreateStream: UNEXPOSED.Δ,
 OpenStream: UNEXPOSED.Δ,
 CreateStorage: UNEXPOSED.Δ,
 OpenStorage: UNEXPOSED.Δ,
 CopyTo: UNEXPOSED.Δ,
 MoveElementTo: UNEXPOSED.Δ,
 Commit: UNEXPOSED.Δ,
 Revert: UNEXPOSED.Δ,
 EnumElements: UNEXPOSED.Δ,
 DestroyElement: UNEXPOSED.Δ,
 RenameElement: UNEXPOSED.Δ,
 SetElementTimes: UNEXPOSED.Δ,
 SetClass: UNEXPOSED.Δ,
 SetStateBits: UNEXPOSED.Δ,
 Stat: UNEXPOSED.Δ
});

var IPersistFileVtbl = new StructT('IPersistFileVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetClassID: UNEXPOSED.Δ,
 IsDirty: UNEXPOSED.Δ,
 Load: UNEXPOSED.Δ,
 Save: UNEXPOSED.Δ,
 SaveCompleted: UNEXPOSED.Δ,
 GetCurFile: UNEXPOSED.Δ
});

var IPersistStorageVtbl = new StructT('IPersistStorageVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetClassID: UNEXPOSED.Δ,
 IsDirty: UNEXPOSED.Δ,
 InitNew: UNEXPOSED.Δ,
 Load: UNEXPOSED.Δ,
 Save: UNEXPOSED.Δ,
 SaveCompleted: UNEXPOSED.Δ,
 HandsOffStorage: UNEXPOSED.Δ
});

var ILockBytesVtbl = new StructT('ILockBytesVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 ReadAt: UNEXPOSED.Δ,
 WriteAt: UNEXPOSED.Δ,
 Flush: UNEXPOSED.Δ,
 SetSize: UNEXPOSED.Δ,
 LockRegion: UNEXPOSED.Δ,
 UnlockRegion: UNEXPOSED.Δ,
 Stat: UNEXPOSED.Δ
});

var tagDVTARGETDEVICE = new StructT('tagDVTARGETDEVICE', {
 tdSize: DWORD,
 tdDriverNameOffset: WORD,
 tdDeviceNameOffset: WORD,
 tdPortNameOffset: WORD,
 tdExtDevmodeOffset: WORD,
 tdData: ARRAY(BYTE,  1 )
});

var tagFORMATETC = new StructT('tagFORMATETC', {
 cfFormat: CLIPFORMAT,
 ptd: uint.Δ,
 dwAspect: DWORD,
 lindex: LONG,
 tymed: DWORD
});

var IEnumFORMATETCVtbl = new StructT('IEnumFORMATETCVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Next: UNEXPOSED.Δ,
 Skip: UNEXPOSED.Δ,
 Reset: UNEXPOSED.Δ,
 Clone: UNEXPOSED.Δ
});

var tagSTATDATA = new StructT('tagSTATDATA', {
 formatetc: FORMATETC,
 advf: DWORD,
 pAdvSink: uint.Δ,
 dwConnection: DWORD
});

var IEnumSTATDATAVtbl = new StructT('IEnumSTATDATAVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Next: UNEXPOSED.Δ,
 Skip: UNEXPOSED.Δ,
 Reset: UNEXPOSED.Δ,
 Clone: UNEXPOSED.Δ
});

var IRootStorageVtbl = new StructT('IRootStorageVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 SwitchToFile: UNEXPOSED.Δ
});

var tagRemSTGMEDIUM = new StructT('tagRemSTGMEDIUM', {
 tymed: DWORD,
 dwHandleType: DWORD,
 pData: ulong,
 pUnkForRelease: ulong,
 cbData: ulong,
 data: ARRAY(byte,  1 )
});

var ASYNC_STGMEDIUM = new StructT('ASYNC_STGMEDIUM', {
 tymed: DWORD,
 pUnkForRelease: uint.Δ
});

var _GDI_OBJECT = new StructT('_GDI_OBJECT', {
 ObjectType: DWORD,
 u: __MIDL_IAdviseSink_0002
});

var _userSTGMEDIUM = new StructT('_userSTGMEDIUM', {
 pUnkForRelease: uint.Δ
});

var _STGMEDIUM_UNION = new StructT('_STGMEDIUM_UNION', {
 tymed: DWORD,
 u: __MIDL_IAdviseSink_0003
});

var _userFLAG_STGMEDIUM = new StructT('_userFLAG_STGMEDIUM', {
 ContextFlags: long,
 fPassOwnership: long,
 Stgmed: userSTGMEDIUM
});

var _FLAG_STGMEDIUM = new StructT('_FLAG_STGMEDIUM', {
 ContextFlags: long,
 fPassOwnership: long,
 Stgmed: STGMEDIUM
});

var IAdviseSinkVtbl = new StructT('IAdviseSinkVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 OnDataChange: UNEXPOSED.Δ,
 OnViewChange: UNEXPOSED.Δ,
 OnRename: UNEXPOSED.Δ,
 OnSave: UNEXPOSED.Δ,
 OnClose: UNEXPOSED.Δ
});

var AsyncIAdviseSinkVtbl = new StructT('AsyncIAdviseSinkVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Begin_OnDataChange: UNEXPOSED.Δ,
 Finish_OnDataChange: UNEXPOSED.Δ,
 Begin_OnViewChange: UNEXPOSED.Δ,
 Finish_OnViewChange: UNEXPOSED.Δ,
 Begin_OnRename: UNEXPOSED.Δ,
 Finish_OnRename: UNEXPOSED.Δ,
 Begin_OnSave: UNEXPOSED.Δ,
 Finish_OnSave: UNEXPOSED.Δ,
 Begin_OnClose: UNEXPOSED.Δ,
 Finish_OnClose: UNEXPOSED.Δ
});

var IAdviseSink2Vtbl = new StructT('IAdviseSink2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 OnDataChange: UNEXPOSED.Δ,
 OnViewChange: UNEXPOSED.Δ,
 OnRename: UNEXPOSED.Δ,
 OnSave: UNEXPOSED.Δ,
 OnClose: UNEXPOSED.Δ,
 OnLinkSrcChange: UNEXPOSED.Δ
});

var AsyncIAdviseSink2Vtbl = new StructT('AsyncIAdviseSink2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Begin_OnDataChange: UNEXPOSED.Δ,
 Finish_OnDataChange: UNEXPOSED.Δ,
 Begin_OnViewChange: UNEXPOSED.Δ,
 Finish_OnViewChange: UNEXPOSED.Δ,
 Begin_OnRename: UNEXPOSED.Δ,
 Finish_OnRename: UNEXPOSED.Δ,
 Begin_OnSave: UNEXPOSED.Δ,
 Finish_OnSave: UNEXPOSED.Δ,
 Begin_OnClose: UNEXPOSED.Δ,
 Finish_OnClose: UNEXPOSED.Δ,
 Begin_OnLinkSrcChange: UNEXPOSED.Δ,
 Finish_OnLinkSrcChange: UNEXPOSED.Δ
});

var IDataObjectVtbl = new StructT('IDataObjectVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetData: UNEXPOSED.Δ,
 GetDataHere: UNEXPOSED.Δ,
 QueryGetData: UNEXPOSED.Δ,
 GetCanonicalFormatEtc: UNEXPOSED.Δ,
 SetData: UNEXPOSED.Δ,
 EnumFormatEtc: UNEXPOSED.Δ,
 DAdvise: UNEXPOSED.Δ,
 DUnadvise: UNEXPOSED.Δ,
 EnumDAdvise: UNEXPOSED.Δ
});

var IDataAdviseHolderVtbl = new StructT('IDataAdviseHolderVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Advise: UNEXPOSED.Δ,
 Unadvise: UNEXPOSED.Δ,
 EnumAdvise: UNEXPOSED.Δ,
 SendOnDataChange: UNEXPOSED.Δ
});

var tagINTERFACEINFO = new StructT('tagINTERFACEINFO', {
 pUnk: uint.Δ,
 iid: IID,
 wMethod: WORD
});

var IMessageFilterVtbl = new StructT('IMessageFilterVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 HandleInComingCall: UNEXPOSED.Δ,
 RetryRejectedCall: UNEXPOSED.Δ,
 MessagePending: UNEXPOSED.Δ
});

var tagRPCOLEMESSAGE = new StructT('tagRPCOLEMESSAGE', {
 reserved1: VoidT.Δ,
 dataRepresentation: RPCOLEDATAREP,
 Buffer: VoidT.Δ,
 cbBuffer: ULONG,
 iMethod: ULONG,
 reserved2: ARRAY(undefined,  5 ),
 rpcFlags: ULONG
});

var IRpcChannelBufferVtbl = new StructT('IRpcChannelBufferVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetBuffer: UNEXPOSED.Δ,
 SendReceive: UNEXPOSED.Δ,
 FreeBuffer: UNEXPOSED.Δ,
 GetDestCtx: UNEXPOSED.Δ,
 IsConnected: UNEXPOSED.Δ
});

var IRpcChannelBuffer2Vtbl = new StructT('IRpcChannelBuffer2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetBuffer: UNEXPOSED.Δ,
 SendReceive: UNEXPOSED.Δ,
 FreeBuffer: UNEXPOSED.Δ,
 GetDestCtx: UNEXPOSED.Δ,
 IsConnected: UNEXPOSED.Δ,
 GetProtocolVersion: UNEXPOSED.Δ
});

var IAsyncRpcChannelBufferVtbl = new StructT('IAsyncRpcChannelBufferVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetBuffer: UNEXPOSED.Δ,
 SendReceive: UNEXPOSED.Δ,
 FreeBuffer: UNEXPOSED.Δ,
 GetDestCtx: UNEXPOSED.Δ,
 IsConnected: UNEXPOSED.Δ,
 GetProtocolVersion: UNEXPOSED.Δ,
 Send: UNEXPOSED.Δ,
 Receive: UNEXPOSED.Δ,
 GetDestCtxEx: UNEXPOSED.Δ
});

var IRpcChannelBuffer3Vtbl = new StructT('IRpcChannelBuffer3Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetBuffer: UNEXPOSED.Δ,
 SendReceive: UNEXPOSED.Δ,
 FreeBuffer: UNEXPOSED.Δ,
 GetDestCtx: UNEXPOSED.Δ,
 IsConnected: UNEXPOSED.Δ,
 GetProtocolVersion: UNEXPOSED.Δ,
 Send: UNEXPOSED.Δ,
 Receive: UNEXPOSED.Δ,
 Cancel: UNEXPOSED.Δ,
 GetCallContext: UNEXPOSED.Δ,
 GetDestCtxEx: UNEXPOSED.Δ,
 GetState: UNEXPOSED.Δ,
 RegisterAsync: UNEXPOSED.Δ
});

var IRpcSyntaxNegotiateVtbl = new StructT('IRpcSyntaxNegotiateVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 NegotiateSyntax: UNEXPOSED.Δ
});

var IRpcProxyBufferVtbl = new StructT('IRpcProxyBufferVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Connect: UNEXPOSED.Δ,
 Disconnect: UNEXPOSED.Δ
});

var IRpcStubBufferVtbl = new StructT('IRpcStubBufferVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Connect: UNEXPOSED.Δ,
 Disconnect: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 IsIIDSupported: UNEXPOSED.Δ,
 CountRefs: UNEXPOSED.Δ,
 DebugServerQueryInterface: UNEXPOSED.Δ,
 DebugServerRelease: UNEXPOSED.Δ
});

var IPSFactoryBufferVtbl = new StructT('IPSFactoryBufferVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 CreateProxy: UNEXPOSED.Δ,
 CreateStub: UNEXPOSED.Δ
});

var SChannelHookCallInfo = new StructT('SChannelHookCallInfo', {
 iid: IID,
 cbSize: DWORD,
 uCausality: GUID,
 dwServerPid: DWORD,
 iMethod: DWORD,
 pObject: VoidT.Δ
});

var IChannelHookVtbl = new StructT('IChannelHookVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 ClientGetSize: UNEXPOSED.Δ,
 ClientFillBuffer: UNEXPOSED.Δ,
 ClientNotify: UNEXPOSED.Δ,
 ServerNotify: UNEXPOSED.Δ,
 ServerGetSize: UNEXPOSED.Δ,
 ServerFillBuffer: UNEXPOSED.Δ
});

var tagSOLE_AUTHENTICATION_SERVICE = new StructT('tagSOLE_AUTHENTICATION_SERVICE', {
 dwAuthnSvc: DWORD,
 dwAuthzSvc: DWORD,
 pPrincipalName: ushort.Δ,
 hr: HRESULT
});

var tagSOLE_AUTHENTICATION_INFO = new StructT('tagSOLE_AUTHENTICATION_INFO', {
 dwAuthnSvc: DWORD,
 dwAuthzSvc: DWORD,
 pAuthInfo: VoidT.Δ
});

var tagSOLE_AUTHENTICATION_LIST = new StructT('tagSOLE_AUTHENTICATION_LIST', {
 cAuthInfo: DWORD,
 aAuthInfo: uint.Δ
});

var IClientSecurityVtbl = new StructT('IClientSecurityVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 QueryBlanket: UNEXPOSED.Δ,
 SetBlanket: UNEXPOSED.Δ,
 CopyProxy: UNEXPOSED.Δ
});

var IServerSecurityVtbl = new StructT('IServerSecurityVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 QueryBlanket: UNEXPOSED.Δ,
 ImpersonateClient: UNEXPOSED.Δ,
 RevertToSelf: UNEXPOSED.Δ,
 IsImpersonating: UNEXPOSED.Δ
});

var IClassActivatorVtbl = new StructT('IClassActivatorVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetClassObject: UNEXPOSED.Δ
});

var IRpcOptionsVtbl = new StructT('IRpcOptionsVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Set: UNEXPOSED.Δ,
 Query: UNEXPOSED.Δ
});

var IGlobalOptionsVtbl = new StructT('IGlobalOptionsVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Set: UNEXPOSED.Δ,
 Query: UNEXPOSED.Δ
});

var IFillLockBytesVtbl = new StructT('IFillLockBytesVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 FillAppend: UNEXPOSED.Δ,
 FillAt: UNEXPOSED.Δ,
 SetFillSize: UNEXPOSED.Δ,
 Terminate: UNEXPOSED.Δ
});

var IProgressNotifyVtbl = new StructT('IProgressNotifyVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 OnProgress: UNEXPOSED.Δ
});

var tagStorageLayout = new StructT('tagStorageLayout', {
 LayoutType: DWORD,
 pwcsElementName: ushort.Δ,
 cOffset: LARGE_INTEGER,
 cBytes: LARGE_INTEGER
});

var ILayoutStorageVtbl = new StructT('ILayoutStorageVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 LayoutScript: UNEXPOSED.Δ,
 BeginMonitor: UNEXPOSED.Δ,
 EndMonitor: UNEXPOSED.Δ,
 ReLayoutDocfile: UNEXPOSED.Δ,
 ReLayoutDocfileOnILockBytes: UNEXPOSED.Δ
});

var IBlockingLockVtbl = new StructT('IBlockingLockVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Lock: UNEXPOSED.Δ,
 Unlock: UNEXPOSED.Δ
});

var ITimeAndNoticeControlVtbl = new StructT('ITimeAndNoticeControlVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 SuppressChanges: UNEXPOSED.Δ
});

var IOplockStorageVtbl = new StructT('IOplockStorageVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 CreateStorageEx: UNEXPOSED.Δ,
 OpenStorageEx: UNEXPOSED.Δ
});

var ISurrogateVtbl = new StructT('ISurrogateVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 LoadDllServer: UNEXPOSED.Δ,
 FreeSurrogate: UNEXPOSED.Δ
});

var IGlobalInterfaceTableVtbl = new StructT('IGlobalInterfaceTableVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 RegisterInterfaceInGlobal: UNEXPOSED.Δ,
 RevokeInterfaceFromGlobal: UNEXPOSED.Δ,
 GetInterfaceFromGlobal: UNEXPOSED.Δ
});

var IDirectWriterLockVtbl = new StructT('IDirectWriterLockVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 WaitForWriteAccess: UNEXPOSED.Δ,
 ReleaseWriteAccess: UNEXPOSED.Δ,
 HaveWriteAccess: UNEXPOSED.Δ
});

var ISynchronizeVtbl = new StructT('ISynchronizeVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Wait: UNEXPOSED.Δ,
 Signal: UNEXPOSED.Δ,
 Reset: UNEXPOSED.Δ
});

var ISynchronizeHandleVtbl = new StructT('ISynchronizeHandleVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetHandle: UNEXPOSED.Δ
});

var ISynchronizeEventVtbl = new StructT('ISynchronizeEventVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetHandle: UNEXPOSED.Δ,
 SetEventHandle: UNEXPOSED.Δ
});

var ISynchronizeContainerVtbl = new StructT('ISynchronizeContainerVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 AddSynchronize: UNEXPOSED.Δ,
 WaitMultiple: UNEXPOSED.Δ
});

var ISynchronizeMutexVtbl = new StructT('ISynchronizeMutexVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Wait: UNEXPOSED.Δ,
 Signal: UNEXPOSED.Δ,
 Reset: UNEXPOSED.Δ,
 ReleaseMutex: UNEXPOSED.Δ
});

var ICancelMethodCallsVtbl = new StructT('ICancelMethodCallsVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Cancel: UNEXPOSED.Δ,
 TestCancel: UNEXPOSED.Δ
});

var IAsyncManagerVtbl = new StructT('IAsyncManagerVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 CompleteCall: UNEXPOSED.Δ,
 GetCallContext: UNEXPOSED.Δ,
 GetState: UNEXPOSED.Δ
});

var ICallFactoryVtbl = new StructT('ICallFactoryVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 CreateCall: UNEXPOSED.Δ
});

var IRpcHelperVtbl = new StructT('IRpcHelperVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetDCOMProtocolVersion: UNEXPOSED.Δ,
 GetIIDFromOBJREF: UNEXPOSED.Δ
});

var IReleaseMarshalBuffersVtbl = new StructT('IReleaseMarshalBuffersVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 ReleaseMarshalBuffer: UNEXPOSED.Δ
});

var IWaitMultipleVtbl = new StructT('IWaitMultipleVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 WaitMultiple: UNEXPOSED.Δ,
 AddSynchronize: UNEXPOSED.Δ
});

var IUrlMonVtbl = new StructT('IUrlMonVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 AsyncGetClassBits: UNEXPOSED.Δ
});

var IForegroundTransferVtbl = new StructT('IForegroundTransferVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 AllowForegroundTransfer: UNEXPOSED.Δ
});

var IAddrTrackingControlVtbl = new StructT('IAddrTrackingControlVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 EnableCOMDynamicAddrTracking: UNEXPOSED.Δ,
 DisableCOMDynamicAddrTracking: UNEXPOSED.Δ
});

var IAddrExclusionControlVtbl = new StructT('IAddrExclusionControlVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetCurrentAddrExclusionList: UNEXPOSED.Δ,
 UpdateAddrExclusionList: UNEXPOSED.Δ
});

var IPipeByteVtbl = new StructT('IPipeByteVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Pull: UNEXPOSED.Δ,
 Push: UNEXPOSED.Δ
});

var AsyncIPipeByteVtbl = new StructT('AsyncIPipeByteVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Begin_Pull: UNEXPOSED.Δ,
 Finish_Pull: UNEXPOSED.Δ,
 Begin_Push: UNEXPOSED.Δ,
 Finish_Push: UNEXPOSED.Δ
});

var IPipeLongVtbl = new StructT('IPipeLongVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Pull: UNEXPOSED.Δ,
 Push: UNEXPOSED.Δ
});

var AsyncIPipeLongVtbl = new StructT('AsyncIPipeLongVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Begin_Pull: UNEXPOSED.Δ,
 Finish_Pull: UNEXPOSED.Δ,
 Begin_Push: UNEXPOSED.Δ,
 Finish_Push: UNEXPOSED.Δ
});

var IPipeDoubleVtbl = new StructT('IPipeDoubleVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Pull: UNEXPOSED.Δ,
 Push: UNEXPOSED.Δ
});

var AsyncIPipeDoubleVtbl = new StructT('AsyncIPipeDoubleVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Begin_Pull: UNEXPOSED.Δ,
 Finish_Pull: UNEXPOSED.Δ,
 Begin_Push: UNEXPOSED.Δ,
 Finish_Push: UNEXPOSED.Δ
});

var IThumbnailExtractorVtbl = new StructT('IThumbnailExtractorVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 ExtractThumbnail: UNEXPOSED.Δ,
 OnFileUpdated: UNEXPOSED.Δ
});

var IDummyHICONIncluderVtbl = new StructT('IDummyHICONIncluderVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Dummy: UNEXPOSED.Δ
});

var IProcessLockVtbl = new StructT('IProcessLockVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 AddRefOnProcess: UNEXPOSED.Δ,
 ReleaseRefOnProcess: UNEXPOSED.Δ
});

var ISurrogateServiceVtbl = new StructT('ISurrogateServiceVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Init: UNEXPOSED.Δ,
 ApplicationLaunch: UNEXPOSED.Δ,
 ApplicationFree: UNEXPOSED.Δ,
 CatalogRefresh: UNEXPOSED.Δ,
 ProcessShutdown: UNEXPOSED.Δ
});

var IComThreadingInfoVtbl = new StructT('IComThreadingInfoVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetCurrentApartmentType: UNEXPOSED.Δ,
 GetCurrentThreadType: UNEXPOSED.Δ,
 GetCurrentLogicalThreadId: UNEXPOSED.Δ,
 SetCurrentLogicalThreadId: UNEXPOSED.Δ
});

var IProcessInitControlVtbl = new StructT('IProcessInitControlVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 ResetInitializerTimeout: UNEXPOSED.Δ
});

var IInitializeSpyVtbl = new StructT('IInitializeSpyVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 PreInitialize: UNEXPOSED.Δ,
 PostInitialize: UNEXPOSED.Δ,
 PreUninitialize: UNEXPOSED.Δ,
 PostUninitialize: UNEXPOSED.Δ
});

var tagSOleTlsDataPublic = new StructT('tagSOleTlsDataPublic', {
 pvReserved0: ARRAY(undefined, 2),
 dwReserved0: ARRAY(DWORD, 3),
 pvReserved1: ARRAY(undefined, 1),
 dwReserved1: ARRAY(DWORD, 3),
 pvReserved2: ARRAY(undefined, 4),
 dwReserved2: ARRAY(DWORD, 1),
 pCurrentCtx: VoidT.Δ
});

var tagSTGOPTIONS = new StructT('tagSTGOPTIONS', {
 usVersion: USHORT,
 reserved: USHORT,
 ulSectorSize: ULONG,
 pwcsTemplateFile: ushort.Δ
});

var IPersistMoniker = new StructT('IPersistMoniker', {
 lpVtbl: IPersistMonikerVtbl.Δ
});

var IMonikerProp = new StructT('IMonikerProp', {
 lpVtbl: IMonikerPropVtbl.Δ
});

var IBindProtocol = new StructT('IBindProtocol', {
 lpVtbl: IBindProtocolVtbl.Δ
});

var IBinding = new StructT('IBinding', {
 lpVtbl: IBindingVtbl.Δ
});


var IBindStatusCallbackEx = new StructT('IBindStatusCallbackEx', {
 lpVtbl: IBindStatusCallbackExVtbl.Δ
});

var IAuthenticate = new StructT('IAuthenticate', {
 lpVtbl: IAuthenticateVtbl.Δ
});

var IAuthenticateEx = new StructT('IAuthenticateEx', {
 lpVtbl: IAuthenticateExVtbl.Δ
});

var IHttpNegotiate = new StructT('IHttpNegotiate', {
 lpVtbl: IHttpNegotiateVtbl.Δ
});

var IHttpNegotiate2 = new StructT('IHttpNegotiate2', {
 lpVtbl: IHttpNegotiate2Vtbl.Δ
});

var IHttpNegotiate3 = new StructT('IHttpNegotiate3', {
 lpVtbl: IHttpNegotiate3Vtbl.Δ
});

var IWinInetFileStream = new StructT('IWinInetFileStream', {
 lpVtbl: IWinInetFileStreamVtbl.Δ
});

var IWindowForBindingUI = new StructT('IWindowForBindingUI', {
 lpVtbl: IWindowForBindingUIVtbl.Δ
});

var ICodeInstall = new StructT('ICodeInstall', {
 lpVtbl: ICodeInstallVtbl.Δ
});

var IUri = new StructT('IUri', {
 lpVtbl: IUriVtbl.Δ
});

var IUriContainer = new StructT('IUriContainer', {
 lpVtbl: IUriContainerVtbl.Δ
});

var IUriBuilder = new StructT('IUriBuilder', {
 lpVtbl: IUriBuilderVtbl.Δ
});

var IUriBuilderFactory = new StructT('IUriBuilderFactory', {
 lpVtbl: IUriBuilderFactoryVtbl.Δ
});

var IWinInetInfo = new StructT('IWinInetInfo', {
 lpVtbl: IWinInetInfoVtbl.Δ
});

var IHttpSecurity = new StructT('IHttpSecurity', {
 lpVtbl: IHttpSecurityVtbl.Δ
});

var IWinInetHttpInfo = new StructT('IWinInetHttpInfo', {
 lpVtbl: IWinInetHttpInfoVtbl.Δ
});

var IWinInetCacheHints = new StructT('IWinInetCacheHints', {
 lpVtbl: IWinInetCacheHintsVtbl.Δ
});

var IWinInetCacheHints2 = new StructT('IWinInetCacheHints2', {
 lpVtbl: IWinInetCacheHints2Vtbl.Δ
});

var IBindHost = new StructT('IBindHost', {
 lpVtbl: IBindHostVtbl.Δ
});

var IInternet = new StructT('IInternet', {
 lpVtbl: IInternetVtbl.Δ
});

var IInternetBindInfo = new StructT('IInternetBindInfo', {
 lpVtbl: IInternetBindInfoVtbl.Δ
});

var IInternetBindInfoEx = new StructT('IInternetBindInfoEx', {
 lpVtbl: IInternetBindInfoExVtbl.Δ
});

var IInternetProtocolRoot = new StructT('IInternetProtocolRoot', {
 lpVtbl: IInternetProtocolRootVtbl.Δ
});

var IInternetProtocol = new StructT('IInternetProtocol', {
 lpVtbl: IInternetProtocolVtbl.Δ
});

var IInternetProtocolEx = new StructT('IInternetProtocolEx', {
 lpVtbl: IInternetProtocolExVtbl.Δ
});

var IInternetProtocolSink = new StructT('IInternetProtocolSink', {
 lpVtbl: IInternetProtocolSinkVtbl.Δ
});

var IInternetProtocolSinkStackable = new StructT('IInternetProtocolSinkStackable', {
 lpVtbl: IInternetProtocolSinkStackableVtbl.Δ
});

var IInternetSession = new StructT('IInternetSession', {
 lpVtbl: IInternetSessionVtbl.Δ
});

var IInternetThreadSwitch = new StructT('IInternetThreadSwitch', {
 lpVtbl: IInternetThreadSwitchVtbl.Δ
});

var IInternetPriority = new StructT('IInternetPriority', {
 lpVtbl: IInternetPriorityVtbl.Δ
});

var IInternetProtocolInfo = new StructT('IInternetProtocolInfo', {
 lpVtbl: IInternetProtocolInfoVtbl.Δ
});

var IInternetSecurityMgrSite = new StructT('IInternetSecurityMgrSite', {
 lpVtbl: IInternetSecurityMgrSiteVtbl.Δ
});

var IInternetSecurityManager = new StructT('IInternetSecurityManager', {
 lpVtbl: IInternetSecurityManagerVtbl.Δ
});

var IInternetSecurityManagerEx = new StructT('IInternetSecurityManagerEx', {
 lpVtbl: IInternetSecurityManagerExVtbl.Δ
});

var IInternetSecurityManagerEx2 = new StructT('IInternetSecurityManagerEx2', {
 lpVtbl: IInternetSecurityManagerEx2Vtbl.Δ
});

var IZoneIdentifier = new StructT('IZoneIdentifier', {
 lpVtbl: IZoneIdentifierVtbl.Δ
});

var IInternetHostSecurityManager = new StructT('IInternetHostSecurityManager', {
 lpVtbl: IInternetHostSecurityManagerVtbl.Δ
});

var IInternetZoneManager = new StructT('IInternetZoneManager', {
 lpVtbl: IInternetZoneManagerVtbl.Δ
});

var IInternetZoneManagerEx = new StructT('IInternetZoneManagerEx', {
 lpVtbl: IInternetZoneManagerExVtbl.Δ
});

var IInternetZoneManagerEx2 = new StructT('IInternetZoneManagerEx2', {
 lpVtbl: IInternetZoneManagerEx2Vtbl.Δ
});

var ISoftDistExt = new StructT('ISoftDistExt', {
 lpVtbl: ISoftDistExtVtbl.Δ
});

var ICatalogFileInfo = new StructT('ICatalogFileInfo', {
 lpVtbl: ICatalogFileInfoVtbl.Δ
});

var IDataFilter = new StructT('IDataFilter', {
 lpVtbl: IDataFilterVtbl.Δ
});

var IEncodingFilterFactory = new StructT('IEncodingFilterFactory', {
 lpVtbl: IEncodingFilterFactoryVtbl.Δ
});

var IWrappedProtocol = new StructT('IWrappedProtocol', {
 lpVtbl: IWrappedProtocolVtbl.Δ
});

var IOleAdviseHolder = new StructT('IOleAdviseHolder', {
 lpVtbl: IOleAdviseHolderVtbl.Δ
});

var IOleCache = new StructT('IOleCache', {
 lpVtbl: IOleCacheVtbl.Δ
});

var IOleCache2 = new StructT('IOleCache2', {
 lpVtbl: IOleCache2Vtbl.Δ
});

var IOleCacheControl = new StructT('IOleCacheControl', {
 lpVtbl: IOleCacheControlVtbl.Δ
});

var IParseDisplayName = new StructT('IParseDisplayName', {
 lpVtbl: IParseDisplayNameVtbl.Δ
});

var IOleContainer = new StructT('IOleContainer', {
 lpVtbl: IOleContainerVtbl.Δ
});

var IOleClientSite = new StructT('IOleClientSite', {
 lpVtbl: IOleClientSiteVtbl.Δ
});

var IOleObject = new StructT('IOleObject', {
 lpVtbl: IOleObjectVtbl.Δ
});

var IOleWindow = new StructT('IOleWindow', {
 lpVtbl: IOleWindowVtbl.Δ
});

var IOleLink = new StructT('IOleLink', {
 lpVtbl: IOleLinkVtbl.Δ
});

var IOleItemContainer = new StructT('IOleItemContainer', {
 lpVtbl: IOleItemContainerVtbl.Δ
});

var IOleInPlaceUIWindow = new StructT('IOleInPlaceUIWindow', {
 lpVtbl: IOleInPlaceUIWindowVtbl.Δ
});

var IOleInPlaceActiveObject = new StructT('IOleInPlaceActiveObject', {
 lpVtbl: IOleInPlaceActiveObjectVtbl.Δ
});

var IOleInPlaceFrame = new StructT('IOleInPlaceFrame', {
 lpVtbl: IOleInPlaceFrameVtbl.Δ
});

var IOleInPlaceObject = new StructT('IOleInPlaceObject', {
 lpVtbl: IOleInPlaceObjectVtbl.Δ
});

var IOleInPlaceSite = new StructT('IOleInPlaceSite', {
 lpVtbl: IOleInPlaceSiteVtbl.Δ
});

var IContinue = new StructT('IContinue', {
 lpVtbl: IContinueVtbl.Δ
});

var IViewObject = new StructT('IViewObject', {
 lpVtbl: IViewObjectVtbl.Δ
});

var IViewObject2 = new StructT('IViewObject2', {
 lpVtbl: IViewObject2Vtbl.Δ
});

var IDropSource = new StructT('IDropSource', {
 lpVtbl: IDropSourceVtbl.Δ
});

var IDropTarget = new StructT('IDropTarget', {
 lpVtbl: IDropTargetVtbl.Δ
});

var IDropSourceNotify = new StructT('IDropSourceNotify', {
 lpVtbl: IDropSourceNotifyVtbl.Δ
});

var IEnumOLEVERB = new StructT('IEnumOLEVERB', {
 lpVtbl: IEnumOLEVERBVtbl.Δ
});

var IOleAdviseHolderVtbl = new StructT('IOleAdviseHolderVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Advise: UNEXPOSED.Δ,
 Unadvise: UNEXPOSED.Δ,
 EnumAdvise: UNEXPOSED.Δ,
 SendOnRename: UNEXPOSED.Δ,
 SendOnSave: UNEXPOSED.Δ,
 SendOnClose: UNEXPOSED.Δ
});

var IOleCacheVtbl = new StructT('IOleCacheVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Cache: UNEXPOSED.Δ,
 Uncache: UNEXPOSED.Δ,
 EnumCache: UNEXPOSED.Δ,
 InitCache: UNEXPOSED.Δ,
 SetData: UNEXPOSED.Δ
});

var IOleCache2Vtbl = new StructT('IOleCache2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Cache: UNEXPOSED.Δ,
 Uncache: UNEXPOSED.Δ,
 EnumCache: UNEXPOSED.Δ,
 InitCache: UNEXPOSED.Δ,
 SetData: UNEXPOSED.Δ,
 UpdateCache: UNEXPOSED.Δ,
 DiscardCache: UNEXPOSED.Δ
});

var IOleCacheControlVtbl = new StructT('IOleCacheControlVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 OnRun: UNEXPOSED.Δ,
 OnStop: UNEXPOSED.Δ
});

var IParseDisplayNameVtbl = new StructT('IParseDisplayNameVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 ParseDisplayName: UNEXPOSED.Δ
});

var IOleContainerVtbl = new StructT('IOleContainerVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 ParseDisplayName: UNEXPOSED.Δ,
 EnumObjects: UNEXPOSED.Δ,
 LockContainer: UNEXPOSED.Δ
});

var IOleClientSiteVtbl = new StructT('IOleClientSiteVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 SaveObject: UNEXPOSED.Δ,
 GetMoniker: UNEXPOSED.Δ,
 GetContainer: UNEXPOSED.Δ,
 ShowObject: UNEXPOSED.Δ,
 OnShowWindow: UNEXPOSED.Δ,
 RequestNewObjectLayout: UNEXPOSED.Δ
});

var IOleObjectVtbl = new StructT('IOleObjectVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 SetClientSite: UNEXPOSED.Δ,
 GetClientSite: UNEXPOSED.Δ,
 SetHostNames: UNEXPOSED.Δ,
 Close: UNEXPOSED.Δ,
 SetMoniker: UNEXPOSED.Δ,
 GetMoniker: UNEXPOSED.Δ,
 InitFromData: UNEXPOSED.Δ,
 GetClipboardData: UNEXPOSED.Δ,
 DoVerb: UNEXPOSED.Δ,
 EnumVerbs: UNEXPOSED.Δ,
 Update: UNEXPOSED.Δ,
 IsUpToDate: UNEXPOSED.Δ,
 GetUserClassID: UNEXPOSED.Δ,
 GetUserType: UNEXPOSED.Δ,
 SetExtent: UNEXPOSED.Δ,
 GetExtent: UNEXPOSED.Δ,
 Advise: UNEXPOSED.Δ,
 Unadvise: UNEXPOSED.Δ,
 EnumAdvise: UNEXPOSED.Δ,
 GetMiscStatus: UNEXPOSED.Δ,
 SetColorScheme: UNEXPOSED.Δ
});

var LINKSRCDESCRIPTOR = new StructT('LINKSRCDESCRIPTOR', {
 cbSize: ULONG,
 clsid: CLSID,
 dwDrawAspect: DWORD,
 sizel: SIZEL,
 pointl: POINTL,
 dwStatus: DWORD,
 dwFullUserTypeName: DWORD,
 dwSrcOfCopy: DWORD
});

var IOleWindowVtbl = new StructT('IOleWindowVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetWindow: UNEXPOSED.Δ,
 ContextSensitiveHelp: UNEXPOSED.Δ
});

var IOleLinkVtbl = new StructT('IOleLinkVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 SetUpdateOptions: UNEXPOSED.Δ,
 GetUpdateOptions: UNEXPOSED.Δ,
 SetSourceMoniker: UNEXPOSED.Δ,
 GetSourceMoniker: UNEXPOSED.Δ,
 SetSourceDisplayName: UNEXPOSED.Δ,
 GetSourceDisplayName: UNEXPOSED.Δ,
 BindToSource: UNEXPOSED.Δ,
 BindIfRunning: UNEXPOSED.Δ,
 GetBoundSource: UNEXPOSED.Δ,
 UnbindSource: UNEXPOSED.Δ,
 Update: UNEXPOSED.Δ
});

var IOleItemContainerVtbl = new StructT('IOleItemContainerVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 ParseDisplayName: UNEXPOSED.Δ,
 EnumObjects: UNEXPOSED.Δ,
 LockContainer: UNEXPOSED.Δ,
 GetObjectA: UNEXPOSED.Δ,
 GetObjectStorage: UNEXPOSED.Δ,
 IsRunning: UNEXPOSED.Δ
});

var IOleInPlaceUIWindowVtbl = new StructT('IOleInPlaceUIWindowVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetWindow: UNEXPOSED.Δ,
 ContextSensitiveHelp: UNEXPOSED.Δ,
 GetBorder: UNEXPOSED.Δ,
 RequestBorderSpace: UNEXPOSED.Δ,
 SetBorderSpace: UNEXPOSED.Δ,
 SetActiveObject: UNEXPOSED.Δ
});

var IOleInPlaceActiveObjectVtbl = new StructT('IOleInPlaceActiveObjectVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetWindow: UNEXPOSED.Δ,
 ContextSensitiveHelp: UNEXPOSED.Δ,
 TranslateAcceleratorA: UNEXPOSED.Δ,
 OnFrameWindowActivate: UNEXPOSED.Δ,
 OnDocWindowActivate: UNEXPOSED.Δ,
 ResizeBorder: UNEXPOSED.Δ,
 EnableModeless: UNEXPOSED.Δ
});

var tagOIFI = new StructT('tagOIFI', {
 cb: UINT,
 fMDIApp: BOOL,
 hwndFrame: HWND,
 haccel: HACCEL,
 cAccelEntries: UINT
});

var tagOleMenuGroupWidths = new StructT('tagOleMenuGroupWidths', {
 width: ARRAY(LONG,  6 )
});

var IOleInPlaceFrameVtbl = new StructT('IOleInPlaceFrameVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetWindow: UNEXPOSED.Δ,
 ContextSensitiveHelp: UNEXPOSED.Δ,
 GetBorder: UNEXPOSED.Δ,
 RequestBorderSpace: UNEXPOSED.Δ,
 SetBorderSpace: UNEXPOSED.Δ,
 SetActiveObject: UNEXPOSED.Δ,
 InsertMenus: UNEXPOSED.Δ,
 SetMenu: UNEXPOSED.Δ,
 RemoveMenus: UNEXPOSED.Δ,
 SetStatusText: UNEXPOSED.Δ,
 EnableModeless: UNEXPOSED.Δ,
 TranslateAcceleratorA: UNEXPOSED.Δ
});

var IOleInPlaceObjectVtbl = new StructT('IOleInPlaceObjectVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetWindow: UNEXPOSED.Δ,
 ContextSensitiveHelp: UNEXPOSED.Δ,
 InPlaceDeactivate: UNEXPOSED.Δ,
 UIDeactivate: UNEXPOSED.Δ,
 SetObjectRects: UNEXPOSED.Δ,
 ReactivateAndUndo: UNEXPOSED.Δ
});

var IOleInPlaceSiteVtbl = new StructT('IOleInPlaceSiteVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetWindow: UNEXPOSED.Δ,
 ContextSensitiveHelp: UNEXPOSED.Δ,
 CanInPlaceActivate: UNEXPOSED.Δ,
 OnInPlaceActivate: UNEXPOSED.Δ,
 OnUIActivate: UNEXPOSED.Δ,
 GetWindowContext: UNEXPOSED.Δ,
 Scroll: UNEXPOSED.Δ,
 OnUIDeactivate: UNEXPOSED.Δ,
 OnInPlaceDeactivate: UNEXPOSED.Δ,
 DiscardUndoState: UNEXPOSED.Δ,
 DeactivateAndUndo: UNEXPOSED.Δ,
 OnPosRectChange: UNEXPOSED.Δ
});

var IContinueVtbl = new StructT('IContinueVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 FContinue: UNEXPOSED.Δ
});

var IViewObjectVtbl = new StructT('IViewObjectVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Draw: UNEXPOSED.Δ,
 GetColorSet: UNEXPOSED.Δ,
 Freeze: UNEXPOSED.Δ,
 Unfreeze: UNEXPOSED.Δ,
 SetAdvise: UNEXPOSED.Δ,
 GetAdvise: UNEXPOSED.Δ
});

var IViewObject2Vtbl = new StructT('IViewObject2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Draw: UNEXPOSED.Δ,
 GetColorSet: UNEXPOSED.Δ,
 Freeze: UNEXPOSED.Δ,
 Unfreeze: UNEXPOSED.Δ,
 SetAdvise: UNEXPOSED.Δ,
 GetAdvise: UNEXPOSED.Δ,
 GetExtent: UNEXPOSED.Δ
});

var IDropSourceVtbl = new StructT('IDropSourceVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 QueryContinueDrag: UNEXPOSED.Δ,
 GiveFeedback: UNEXPOSED.Δ
});

var IDropTargetVtbl = new StructT('IDropTargetVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 DragEnter: UNEXPOSED.Δ,
 DragOver: UNEXPOSED.Δ,
 DragLeave: UNEXPOSED.Δ,
 Drop: UNEXPOSED.Δ
});

var IDropSourceNotifyVtbl = new StructT('IDropSourceNotifyVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 DragEnterTarget: UNEXPOSED.Δ,
 DragLeaveTarget: UNEXPOSED.Δ
});

var tagOLEVERB = new StructT('tagOLEVERB', {
 lVerb: LONG,
 lpszVerbName: LPOLESTR,
 fuFlags: DWORD,
 grfAttribs: DWORD
});

var IEnumOLEVERBVtbl = new StructT('IEnumOLEVERBVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Next: UNEXPOSED.Δ,
 Skip: UNEXPOSED.Δ,
 Reset: UNEXPOSED.Δ,
 Clone: UNEXPOSED.Δ
});

var IServiceProvider = new StructT('IServiceProvider', {
 lpVtbl: IServiceProviderVtbl.Δ
});

var IServiceProviderVtbl = new StructT('IServiceProviderVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 QueryService: UNEXPOSED.Δ
});

var IXMLDOMImplementation = new StructT('IXMLDOMImplementation', {
 lpVtbl: IXMLDOMImplementationVtbl.Δ
});

var IXMLDOMNode = new StructT('IXMLDOMNode', {
 lpVtbl: IXMLDOMNodeVtbl.Δ
});

var IXMLDOMDocumentFragment = new StructT('IXMLDOMDocumentFragment', {
 lpVtbl: IXMLDOMDocumentFragmentVtbl.Δ
});

var IXMLDOMDocument = new StructT('IXMLDOMDocument', {
 lpVtbl: IXMLDOMDocumentVtbl.Δ
});

var IXMLDOMNodeList = new StructT('IXMLDOMNodeList', {
 lpVtbl: IXMLDOMNodeListVtbl.Δ
});

var IXMLDOMNamedNodeMap = new StructT('IXMLDOMNamedNodeMap', {
 lpVtbl: IXMLDOMNamedNodeMapVtbl.Δ
});

var IXMLDOMCharacterData = new StructT('IXMLDOMCharacterData', {
 lpVtbl: IXMLDOMCharacterDataVtbl.Δ
});

var IXMLDOMAttribute = new StructT('IXMLDOMAttribute', {
 lpVtbl: IXMLDOMAttributeVtbl.Δ
});

var IXMLDOMElement = new StructT('IXMLDOMElement', {
 lpVtbl: IXMLDOMElementVtbl.Δ
});

var IXMLDOMText = new StructT('IXMLDOMText', {
 lpVtbl: IXMLDOMTextVtbl.Δ
});

var IXMLDOMComment = new StructT('IXMLDOMComment', {
 lpVtbl: IXMLDOMCommentVtbl.Δ
});

var IXMLDOMProcessingInstruction = new StructT('IXMLDOMProcessingInstruction', {
 lpVtbl: IXMLDOMProcessingInstructionVtbl.Δ
});

var IXMLDOMCDATASection = new StructT('IXMLDOMCDATASection', {
 lpVtbl: IXMLDOMCDATASectionVtbl.Δ
});

var IXMLDOMDocumentType = new StructT('IXMLDOMDocumentType', {
 lpVtbl: IXMLDOMDocumentTypeVtbl.Δ
});

var IXMLDOMNotation = new StructT('IXMLDOMNotation', {
 lpVtbl: IXMLDOMNotationVtbl.Δ
});

var IXMLDOMEntity = new StructT('IXMLDOMEntity', {
 lpVtbl: IXMLDOMEntityVtbl.Δ
});

var IXMLDOMEntityReference = new StructT('IXMLDOMEntityReference', {
 lpVtbl: IXMLDOMEntityReferenceVtbl.Δ
});

var IXMLDOMParseError = new StructT('IXMLDOMParseError', {
 lpVtbl: IXMLDOMParseErrorVtbl.Δ
});

var IXTLRuntime = new StructT('IXTLRuntime', {
 lpVtbl: IXTLRuntimeVtbl.Δ
});

var XMLDOMDocumentEvents = new StructT('XMLDOMDocumentEvents', {
 lpVtbl: XMLDOMDocumentEventsVtbl.Δ
});



var IXMLHttpRequest = new StructT('IXMLHttpRequest', {
 lpVtbl: IXMLHttpRequestVtbl.Δ
});


var IXMLDSOControl = new StructT('IXMLDSOControl', {
 lpVtbl: IXMLDSOControlVtbl.Δ
});


var IXMLElementCollection = new StructT('IXMLElementCollection', {
 lpVtbl: IXMLElementCollectionVtbl.Δ
});

var IXMLDocument = new StructT('IXMLDocument', {
 lpVtbl: IXMLDocumentVtbl.Δ
});

var IXMLDocument2 = new StructT('IXMLDocument2', {
 lpVtbl: IXMLDocument2Vtbl.Δ
});

var IXMLElement = new StructT('IXMLElement', {
 lpVtbl: IXMLElementVtbl.Δ
});

var IXMLElement2 = new StructT('IXMLElement2', {
 lpVtbl: IXMLElement2Vtbl.Δ
});

var IXMLAttribute = new StructT('IXMLAttribute', {
 lpVtbl: IXMLAttributeVtbl.Δ
});

var IXMLError = new StructT('IXMLError', {
 lpVtbl: IXMLErrorVtbl.Δ
});


var ICreateTypeInfo = new StructT('ICreateTypeInfo', {
 lpVtbl: ICreateTypeInfoVtbl.Δ
});

var ICreateTypeInfo2 = new StructT('ICreateTypeInfo2', {
 lpVtbl: ICreateTypeInfo2Vtbl.Δ
});

var ICreateTypeLib = new StructT('ICreateTypeLib', {
 lpVtbl: ICreateTypeLibVtbl.Δ
});

var ICreateTypeLib2 = new StructT('ICreateTypeLib2', {
 lpVtbl: ICreateTypeLib2Vtbl.Δ
});

var IDispatch = new StructT('IDispatch', {
 lpVtbl: IDispatchVtbl.Δ
});

var IEnumVARIANT = new StructT('IEnumVARIANT', {
 lpVtbl: IEnumVARIANTVtbl.Δ
});

var ITypeComp = new StructT('ITypeComp', {
 lpVtbl: ITypeCompVtbl.Δ
});

var ITypeInfo = new StructT('ITypeInfo', {
 lpVtbl: ITypeInfoVtbl.Δ
});

var ITypeInfo2 = new StructT('ITypeInfo2', {
 lpVtbl: ITypeInfo2Vtbl.Δ
});

var ITypeLib = new StructT('ITypeLib', {
 lpVtbl: ITypeLibVtbl.Δ
});

var ITypeLib2 = new StructT('ITypeLib2', {
 lpVtbl: ITypeLib2Vtbl.Δ
});

var ITypeChangeEvents = new StructT('ITypeChangeEvents', {
 lpVtbl: ITypeChangeEventsVtbl.Δ
});

var IErrorInfo = new StructT('IErrorInfo', {
 lpVtbl: IErrorInfoVtbl.Δ
});

var ICreateErrorInfo = new StructT('ICreateErrorInfo', {
 lpVtbl: ICreateErrorInfoVtbl.Δ
});

var ISupportErrorInfo = new StructT('ISupportErrorInfo', {
 lpVtbl: ISupportErrorInfoVtbl.Δ
});

var ITypeFactory = new StructT('ITypeFactory', {
 lpVtbl: ITypeFactoryVtbl.Δ
});

var ITypeMarshal = new StructT('ITypeMarshal', {
 lpVtbl: ITypeMarshalVtbl.Δ
});

var IRecordInfo = new StructT('IRecordInfo', {
 lpVtbl: IRecordInfoVtbl.Δ
});

var IErrorLog = new StructT('IErrorLog', {
 lpVtbl: IErrorLogVtbl.Δ
});

var IPropertyBag = new StructT('IPropertyBag', {
 lpVtbl: IPropertyBagVtbl.Δ
});

var tagSAFEARRAYBOUND = new StructT('tagSAFEARRAYBOUND', {
 cElements: ULONG,
 lLbound: LONG
});

var _wireVARIANT = new StructT('_wireVARIANT', {
 clSize: DWORD,
 rpcReserved: DWORD,
 vt: USHORT,
 wReserved1: USHORT,
 wReserved2: USHORT,
 wReserved3: USHORT
});

var _wireBRECORD = new StructT('_wireBRECORD', {
 fFlags: ULONG,
 clSize: ULONG,
 pRecInfo: uint.Δ,
 pRecord: uchar.Δ
});

var _wireSAFEARR_BSTR = new StructT('_wireSAFEARR_BSTR', {
 Size: ULONG,
 aBstr: VOIDPTR.Δ
});

var _wireSAFEARR_UNKNOWN = new StructT('_wireSAFEARR_UNKNOWN', {
 Size: ULONG,
 apUnknown: uint.Δ.Δ
});

var _wireSAFEARR_DISPATCH = new StructT('_wireSAFEARR_DISPATCH', {
 Size: ULONG,
 apDispatch: uint.Δ.Δ
});

var _wireSAFEARR_VARIANT = new StructT('_wireSAFEARR_VARIANT', {
 Size: ULONG,
 aVariant: VOIDPTR.Δ
});

var _wireSAFEARR_BRECORD = new StructT('_wireSAFEARR_BRECORD', {
 Size: ULONG,
 aRecord: VOIDPTR.Δ
});

var _wireSAFEARR_HAVEIID = new StructT('_wireSAFEARR_HAVEIID', {
 Size: ULONG,
 apUnknown: uint.Δ.Δ,
 iid: IID
});

var _wireSAFEARRAY_UNION = new StructT('_wireSAFEARRAY_UNION', {
 sfType: ULONG,
 u: __MIDL_IOleAutomationTypes_0001
});

var _wireSAFEARRAY = new StructT('_wireSAFEARRAY', {
 cDims: USHORT,
 fFeatures: USHORT,
 cbElements: ULONG,
 cLocks: ULONG,
 uArrayStructs: SAFEARRAYUNION,
 rgsabound: ARRAY(SAFEARRAYBOUND,  1 )
});

var tagSAFEARRAY = new StructT('tagSAFEARRAY', {
 cDims: USHORT,
 fFeatures: USHORT,
 cbElements: ULONG,
 cLocks: ULONG,
 pvData: PVOID,
 rgsabound: ARRAY(SAFEARRAYBOUND,  1 )
});


var undefined = new StructT('undefined', {
 vt: VARTYPE,
 wReserved1: WORD,
 wReserved2: WORD,
 wReserved3: WORD
});

var undefined = new StructT('undefined', {
 pvRecord: PVOID,
 pRecInfo: uint.Δ
});

var tagTYPEDESC = new StructT('tagTYPEDESC', {
 vt: VARTYPE
});

var tagARRAYDESC = new StructT('tagARRAYDESC', {
 tdescElem: TYPEDESC,
 cDims: USHORT,
 rgbounds: ARRAY(SAFEARRAYBOUND,  1 )
});

var tagPARAMDESCEX = new StructT('tagPARAMDESCEX', {
 cBytes: ULONG,
 varDefaultValue: VARIANTARG
});

var tagPARAMDESC = new StructT('tagPARAMDESC', {
 pparamdescex: LPPARAMDESCEX,
 wParamFlags: USHORT
});

var tagIDLDESC = new StructT('tagIDLDESC', {
 dwReserved: ULONG_PTR,
 wIDLFlags: USHORT
});

var tagELEMDESC = new StructT('tagELEMDESC', {
 tdesc: TYPEDESC
});

var tagTYPEATTR = new StructT('tagTYPEATTR', {
 guid: GUID,
 lcid: LCID,
 dwReserved: DWORD,
 memidConstructor: MEMBERID,
 memidDestructor: MEMBERID,
 lpstrSchema: LPOLESTR,
 cbSizeInstance: ULONG,
 typekind: TYPEKIND,
 cFuncs: WORD,
 cVars: WORD,
 cImplTypes: WORD,
 cbSizeVft: WORD,
 cbAlignment: WORD,
 wTypeFlags: WORD,
 wMajorVerNum: WORD,
 wMinorVerNum: WORD,
 tdescAlias: TYPEDESC,
 idldescType: IDLDESC
});

var tagDISPPARAMS = new StructT('tagDISPPARAMS', {
 rgvarg: uint.Δ,
 rgdispidNamedArgs: long.Δ,
 cArgs: UINT,
 cNamedArgs: UINT
});

var tagEXCEPINFO = new StructT('tagEXCEPINFO', {
 wCode: WORD,
 wReserved: WORD,
 bstrSource: BSTR,
 bstrDescription: BSTR,
 bstrHelpFile: BSTR,
 dwHelpContext: DWORD,
 pvReserved: PVOID,
 pfnDeferredFillIn: UNEXPOSED.Δ,
 scode: SCODE
});

var tagFUNCDESC = new StructT('tagFUNCDESC', {
 memid: MEMBERID,
 lprgscode: long.Δ,
 lprgelemdescParam: uint.Δ,
 funckind: FUNCKIND,
 invkind: INVOKEKIND,
 callconv: CALLCONV,
 cParams: SHORT,
 cParamsOpt: SHORT,
 oVft: SHORT,
 cScodes: SHORT,
 elemdescFunc: ELEMDESC,
 wFuncFlags: WORD
});

var tagVARDESC = new StructT('tagVARDESC', {
 memid: MEMBERID,
 lpstrSchema: LPOLESTR,
 elemdescVar: ELEMDESC,
 wVarFlags: WORD,
 varkind: VARKIND
});

var tagCLEANLOCALSTORAGE = new StructT('tagCLEANLOCALSTORAGE', {
 pInterface: uint.Δ,
 pStorage: PVOID,
 flags: DWORD
});

var tagCUSTDATAITEM = new StructT('tagCUSTDATAITEM', {
 guid: GUID,
 varValue: VARIANTARG
});

var tagCUSTDATA = new StructT('tagCUSTDATA', {
 cCustData: DWORD,
 prgCustData: LPCUSTDATAITEM
});

var ICreateTypeInfoVtbl = new StructT('ICreateTypeInfoVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 SetGuid: UNEXPOSED.Δ,
 SetTypeFlags: UNEXPOSED.Δ,
 SetDocString: UNEXPOSED.Δ,
 SetHelpContext: UNEXPOSED.Δ,
 SetVersion: UNEXPOSED.Δ,
 AddRefTypeInfo: UNEXPOSED.Δ,
 AddFuncDesc: UNEXPOSED.Δ,
 AddImplType: UNEXPOSED.Δ,
 SetImplTypeFlags: UNEXPOSED.Δ,
 SetAlignment: UNEXPOSED.Δ,
 SetSchema: UNEXPOSED.Δ,
 AddVarDesc: UNEXPOSED.Δ,
 SetFuncAndParamNames: UNEXPOSED.Δ,
 SetVarName: UNEXPOSED.Δ,
 SetTypeDescAlias: UNEXPOSED.Δ,
 DefineFuncAsDllEntry: UNEXPOSED.Δ,
 SetFuncDocString: UNEXPOSED.Δ,
 SetVarDocString: UNEXPOSED.Δ,
 SetFuncHelpContext: UNEXPOSED.Δ,
 SetVarHelpContext: UNEXPOSED.Δ,
 SetMops: UNEXPOSED.Δ,
 SetTypeIdldesc: UNEXPOSED.Δ,
 LayOut: UNEXPOSED.Δ
});

var ICreateTypeInfo2Vtbl = new StructT('ICreateTypeInfo2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 SetGuid: UNEXPOSED.Δ,
 SetTypeFlags: UNEXPOSED.Δ,
 SetDocString: UNEXPOSED.Δ,
 SetHelpContext: UNEXPOSED.Δ,
 SetVersion: UNEXPOSED.Δ,
 AddRefTypeInfo: UNEXPOSED.Δ,
 AddFuncDesc: UNEXPOSED.Δ,
 AddImplType: UNEXPOSED.Δ,
 SetImplTypeFlags: UNEXPOSED.Δ,
 SetAlignment: UNEXPOSED.Δ,
 SetSchema: UNEXPOSED.Δ,
 AddVarDesc: UNEXPOSED.Δ,
 SetFuncAndParamNames: UNEXPOSED.Δ,
 SetVarName: UNEXPOSED.Δ,
 SetTypeDescAlias: UNEXPOSED.Δ,
 DefineFuncAsDllEntry: UNEXPOSED.Δ,
 SetFuncDocString: UNEXPOSED.Δ,
 SetVarDocString: UNEXPOSED.Δ,
 SetFuncHelpContext: UNEXPOSED.Δ,
 SetVarHelpContext: UNEXPOSED.Δ,
 SetMops: UNEXPOSED.Δ,
 SetTypeIdldesc: UNEXPOSED.Δ,
 LayOut: UNEXPOSED.Δ,
 DeleteFuncDesc: UNEXPOSED.Δ,
 DeleteFuncDescByMemId: UNEXPOSED.Δ,
 DeleteVarDesc: UNEXPOSED.Δ,
 DeleteVarDescByMemId: UNEXPOSED.Δ,
 DeleteImplType: UNEXPOSED.Δ,
 SetCustData: UNEXPOSED.Δ,
 SetFuncCustData: UNEXPOSED.Δ,
 SetParamCustData: UNEXPOSED.Δ,
 SetVarCustData: UNEXPOSED.Δ,
 SetImplTypeCustData: UNEXPOSED.Δ,
 SetHelpStringContext: UNEXPOSED.Δ,
 SetFuncHelpStringContext: UNEXPOSED.Δ,
 SetVarHelpStringContext: UNEXPOSED.Δ,
 Invalidate: UNEXPOSED.Δ,
 SetName: UNEXPOSED.Δ
});

var ICreateTypeLibVtbl = new StructT('ICreateTypeLibVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 CreateTypeInfo: UNEXPOSED.Δ,
 SetName: UNEXPOSED.Δ,
 SetVersion: UNEXPOSED.Δ,
 SetGuid: UNEXPOSED.Δ,
 SetDocString: UNEXPOSED.Δ,
 SetHelpFileName: UNEXPOSED.Δ,
 SetHelpContext: UNEXPOSED.Δ,
 SetLcid: UNEXPOSED.Δ,
 SetLibFlags: UNEXPOSED.Δ,
 SaveAllChanges: UNEXPOSED.Δ
});

var ICreateTypeLib2Vtbl = new StructT('ICreateTypeLib2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 CreateTypeInfo: UNEXPOSED.Δ,
 SetName: UNEXPOSED.Δ,
 SetVersion: UNEXPOSED.Δ,
 SetGuid: UNEXPOSED.Δ,
 SetDocString: UNEXPOSED.Δ,
 SetHelpFileName: UNEXPOSED.Δ,
 SetHelpContext: UNEXPOSED.Δ,
 SetLcid: UNEXPOSED.Δ,
 SetLibFlags: UNEXPOSED.Δ,
 SaveAllChanges: UNEXPOSED.Δ,
 DeleteTypeInfo: UNEXPOSED.Δ,
 SetCustData: UNEXPOSED.Δ,
 SetHelpStringContext: UNEXPOSED.Δ,
 SetHelpStringDll: UNEXPOSED.Δ
});

var IDispatchVtbl = new StructT('IDispatchVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IEnumVARIANTVtbl = new StructT('IEnumVARIANTVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Next: UNEXPOSED.Δ,
 Skip: UNEXPOSED.Δ,
 Reset: UNEXPOSED.Δ,
 Clone: UNEXPOSED.Δ
});

var ITypeCompVtbl = new StructT('ITypeCompVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Bind: UNEXPOSED.Δ,
 BindType: UNEXPOSED.Δ
});

var ITypeInfoVtbl = new StructT('ITypeInfoVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeAttr: UNEXPOSED.Δ,
 GetTypeComp: UNEXPOSED.Δ,
 GetFuncDesc: UNEXPOSED.Δ,
 GetVarDesc: UNEXPOSED.Δ,
 GetNames: UNEXPOSED.Δ,
 GetRefTypeOfImplType: UNEXPOSED.Δ,
 GetImplTypeFlags: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 GetDocumentation: UNEXPOSED.Δ,
 GetDllEntry: UNEXPOSED.Δ,
 GetRefTypeInfo: UNEXPOSED.Δ,
 AddressOfMember: UNEXPOSED.Δ,
 CreateInstance: UNEXPOSED.Δ,
 GetMops: UNEXPOSED.Δ,
 GetContainingTypeLib: UNEXPOSED.Δ,
 ReleaseTypeAttr: UNEXPOSED.Δ,
 ReleaseFuncDesc: UNEXPOSED.Δ,
 ReleaseVarDesc: UNEXPOSED.Δ
});

var ITypeInfo2Vtbl = new StructT('ITypeInfo2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeAttr: UNEXPOSED.Δ,
 GetTypeComp: UNEXPOSED.Δ,
 GetFuncDesc: UNEXPOSED.Δ,
 GetVarDesc: UNEXPOSED.Δ,
 GetNames: UNEXPOSED.Δ,
 GetRefTypeOfImplType: UNEXPOSED.Δ,
 GetImplTypeFlags: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 GetDocumentation: UNEXPOSED.Δ,
 GetDllEntry: UNEXPOSED.Δ,
 GetRefTypeInfo: UNEXPOSED.Δ,
 AddressOfMember: UNEXPOSED.Δ,
 CreateInstance: UNEXPOSED.Δ,
 GetMops: UNEXPOSED.Δ,
 GetContainingTypeLib: UNEXPOSED.Δ,
 ReleaseTypeAttr: UNEXPOSED.Δ,
 ReleaseFuncDesc: UNEXPOSED.Δ,
 ReleaseVarDesc: UNEXPOSED.Δ,
 GetTypeKind: UNEXPOSED.Δ,
 GetTypeFlags: UNEXPOSED.Δ,
 GetFuncIndexOfMemId: UNEXPOSED.Δ,
 GetVarIndexOfMemId: UNEXPOSED.Δ,
 GetCustData: UNEXPOSED.Δ,
 GetFuncCustData: UNEXPOSED.Δ,
 GetParamCustData: UNEXPOSED.Δ,
 GetVarCustData: UNEXPOSED.Δ,
 GetImplTypeCustData: UNEXPOSED.Δ,
 GetDocumentation2: UNEXPOSED.Δ,
 GetAllCustData: UNEXPOSED.Δ,
 GetAllFuncCustData: UNEXPOSED.Δ,
 GetAllParamCustData: UNEXPOSED.Δ,
 GetAllVarCustData: UNEXPOSED.Δ,
 GetAllImplTypeCustData: UNEXPOSED.Δ
});

var tagTLIBATTR = new StructT('tagTLIBATTR', {
 guid: GUID,
 lcid: LCID,
 syskind: SYSKIND,
 wMajorVerNum: WORD,
 wMinorVerNum: WORD,
 wLibFlags: WORD
});

var ITypeLibVtbl = new StructT('ITypeLibVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetTypeInfoType: UNEXPOSED.Δ,
 GetTypeInfoOfGuid: UNEXPOSED.Δ,
 GetLibAttr: UNEXPOSED.Δ,
 GetTypeComp: UNEXPOSED.Δ,
 GetDocumentation: UNEXPOSED.Δ,
 IsName: UNEXPOSED.Δ,
 FindName: UNEXPOSED.Δ,
 ReleaseTLibAttr: UNEXPOSED.Δ
});

var ITypeLib2Vtbl = new StructT('ITypeLib2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetTypeInfoType: UNEXPOSED.Δ,
 GetTypeInfoOfGuid: UNEXPOSED.Δ,
 GetLibAttr: UNEXPOSED.Δ,
 GetTypeComp: UNEXPOSED.Δ,
 GetDocumentation: UNEXPOSED.Δ,
 IsName: UNEXPOSED.Δ,
 FindName: UNEXPOSED.Δ,
 ReleaseTLibAttr: UNEXPOSED.Δ,
 GetCustData: UNEXPOSED.Δ,
 GetLibStatistics: UNEXPOSED.Δ,
 GetDocumentation2: UNEXPOSED.Δ,
 GetAllCustData: UNEXPOSED.Δ
});

var ITypeChangeEventsVtbl = new StructT('ITypeChangeEventsVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 RequestTypeChange: UNEXPOSED.Δ,
 AfterTypeChange: UNEXPOSED.Δ
});

var IErrorInfoVtbl = new StructT('IErrorInfoVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetGUID: UNEXPOSED.Δ,
 GetSource: UNEXPOSED.Δ,
 GetDescription: UNEXPOSED.Δ,
 GetHelpFile: UNEXPOSED.Δ,
 GetHelpContext: UNEXPOSED.Δ
});

var ICreateErrorInfoVtbl = new StructT('ICreateErrorInfoVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 SetGUID: UNEXPOSED.Δ,
 SetSource: UNEXPOSED.Δ,
 SetDescription: UNEXPOSED.Δ,
 SetHelpFile: UNEXPOSED.Δ,
 SetHelpContext: UNEXPOSED.Δ
});

var ISupportErrorInfoVtbl = new StructT('ISupportErrorInfoVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 InterfaceSupportsErrorInfo: UNEXPOSED.Δ
});

var ITypeFactoryVtbl = new StructT('ITypeFactoryVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 CreateFromTypeInfo: UNEXPOSED.Δ
});

var ITypeMarshalVtbl = new StructT('ITypeMarshalVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Size: UNEXPOSED.Δ,
 Marshal: UNEXPOSED.Δ,
 Unmarshal: UNEXPOSED.Δ,
 Free: UNEXPOSED.Δ
});

var IRecordInfoVtbl = new StructT('IRecordInfoVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 RecordInit: UNEXPOSED.Δ,
 RecordClear: UNEXPOSED.Δ,
 RecordCopy: UNEXPOSED.Δ,
 GetGuid: UNEXPOSED.Δ,
 GetName: UNEXPOSED.Δ,
 GetSize: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetField: UNEXPOSED.Δ,
 GetFieldNoCopy: UNEXPOSED.Δ,
 PutField: UNEXPOSED.Δ,
 PutFieldNoCopy: UNEXPOSED.Δ,
 GetFieldNames: UNEXPOSED.Δ,
 IsMatchingType: UNEXPOSED.Δ,
 RecordCreate: UNEXPOSED.Δ,
 RecordCreateCopy: UNEXPOSED.Δ,
 RecordDestroy: UNEXPOSED.Δ
});

var IErrorLogVtbl = new StructT('IErrorLogVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 AddError: UNEXPOSED.Δ
});

var IPropertyBagVtbl = new StructT('IPropertyBagVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Read: UNEXPOSED.Δ,
 Write: UNEXPOSED.Δ
});

var _xml_error = new StructT('_xml_error', {
 _nLine: uint,
 _pchBuf: BSTR,
 _cchBuf: uint,
 _ich: uint,
 _pszFound: BSTR,
 _pszExpected: BSTR,
 _reserved1: DWORD,
 _reserved2: DWORD
});

var IXMLDOMImplementationVtbl = new StructT('IXMLDOMImplementationVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 hasFeature: UNEXPOSED.Δ
});

var IXMLDOMNodeVtbl = new StructT('IXMLDOMNodeVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_nodeName: UNEXPOSED.Δ,
 get_nodeValue: UNEXPOSED.Δ,
 put_nodeValue: UNEXPOSED.Δ,
 get_nodeType: UNEXPOSED.Δ,
 get_parentNode: UNEXPOSED.Δ,
 get_childNodes: UNEXPOSED.Δ,
 get_firstChild: UNEXPOSED.Δ,
 get_lastChild: UNEXPOSED.Δ,
 get_previousSibling: UNEXPOSED.Δ,
 get_nextSibling: UNEXPOSED.Δ,
 get_attributes: UNEXPOSED.Δ,
 insertBefore: UNEXPOSED.Δ,
 replaceChild: UNEXPOSED.Δ,
 removeChild: UNEXPOSED.Δ,
 appendChild: UNEXPOSED.Δ,
 hasChildNodes: UNEXPOSED.Δ,
 get_ownerDocument: UNEXPOSED.Δ,
 cloneNode: UNEXPOSED.Δ,
 get_nodeTypeString: UNEXPOSED.Δ,
 get_text: UNEXPOSED.Δ,
 put_text: UNEXPOSED.Δ,
 get_specified: UNEXPOSED.Δ,
 get_definition: UNEXPOSED.Δ,
 get_nodeTypedValue: UNEXPOSED.Δ,
 put_nodeTypedValue: UNEXPOSED.Δ,
 get_dataType: UNEXPOSED.Δ,
 put_dataType: UNEXPOSED.Δ,
 get_xml: UNEXPOSED.Δ,
 transformNode: UNEXPOSED.Δ,
 selectNodes: UNEXPOSED.Δ,
 selectSingleNode: UNEXPOSED.Δ,
 get_parsed: UNEXPOSED.Δ,
 get_namespaceURI: UNEXPOSED.Δ,
 get_prefix: UNEXPOSED.Δ,
 get_baseName: UNEXPOSED.Δ,
 transformNodeToObject: UNEXPOSED.Δ
});

var IXMLDOMDocumentFragmentVtbl = new StructT('IXMLDOMDocumentFragmentVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_nodeName: UNEXPOSED.Δ,
 get_nodeValue: UNEXPOSED.Δ,
 put_nodeValue: UNEXPOSED.Δ,
 get_nodeType: UNEXPOSED.Δ,
 get_parentNode: UNEXPOSED.Δ,
 get_childNodes: UNEXPOSED.Δ,
 get_firstChild: UNEXPOSED.Δ,
 get_lastChild: UNEXPOSED.Δ,
 get_previousSibling: UNEXPOSED.Δ,
 get_nextSibling: UNEXPOSED.Δ,
 get_attributes: UNEXPOSED.Δ,
 insertBefore: UNEXPOSED.Δ,
 replaceChild: UNEXPOSED.Δ,
 removeChild: UNEXPOSED.Δ,
 appendChild: UNEXPOSED.Δ,
 hasChildNodes: UNEXPOSED.Δ,
 get_ownerDocument: UNEXPOSED.Δ,
 cloneNode: UNEXPOSED.Δ,
 get_nodeTypeString: UNEXPOSED.Δ,
 get_text: UNEXPOSED.Δ,
 put_text: UNEXPOSED.Δ,
 get_specified: UNEXPOSED.Δ,
 get_definition: UNEXPOSED.Δ,
 get_nodeTypedValue: UNEXPOSED.Δ,
 put_nodeTypedValue: UNEXPOSED.Δ,
 get_dataType: UNEXPOSED.Δ,
 put_dataType: UNEXPOSED.Δ,
 get_xml: UNEXPOSED.Δ,
 transformNode: UNEXPOSED.Δ,
 selectNodes: UNEXPOSED.Δ,
 selectSingleNode: UNEXPOSED.Δ,
 get_parsed: UNEXPOSED.Δ,
 get_namespaceURI: UNEXPOSED.Δ,
 get_prefix: UNEXPOSED.Δ,
 get_baseName: UNEXPOSED.Δ,
 transformNodeToObject: UNEXPOSED.Δ
});

var IXMLDOMDocumentVtbl = new StructT('IXMLDOMDocumentVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_nodeName: UNEXPOSED.Δ,
 get_nodeValue: UNEXPOSED.Δ,
 put_nodeValue: UNEXPOSED.Δ,
 get_nodeType: UNEXPOSED.Δ,
 get_parentNode: UNEXPOSED.Δ,
 get_childNodes: UNEXPOSED.Δ,
 get_firstChild: UNEXPOSED.Δ,
 get_lastChild: UNEXPOSED.Δ,
 get_previousSibling: UNEXPOSED.Δ,
 get_nextSibling: UNEXPOSED.Δ,
 get_attributes: UNEXPOSED.Δ,
 insertBefore: UNEXPOSED.Δ,
 replaceChild: UNEXPOSED.Δ,
 removeChild: UNEXPOSED.Δ,
 appendChild: UNEXPOSED.Δ,
 hasChildNodes: UNEXPOSED.Δ,
 get_ownerDocument: UNEXPOSED.Δ,
 cloneNode: UNEXPOSED.Δ,
 get_nodeTypeString: UNEXPOSED.Δ,
 get_text: UNEXPOSED.Δ,
 put_text: UNEXPOSED.Δ,
 get_specified: UNEXPOSED.Δ,
 get_definition: UNEXPOSED.Δ,
 get_nodeTypedValue: UNEXPOSED.Δ,
 put_nodeTypedValue: UNEXPOSED.Δ,
 get_dataType: UNEXPOSED.Δ,
 put_dataType: UNEXPOSED.Δ,
 get_xml: UNEXPOSED.Δ,
 transformNode: UNEXPOSED.Δ,
 selectNodes: UNEXPOSED.Δ,
 selectSingleNode: UNEXPOSED.Δ,
 get_parsed: UNEXPOSED.Δ,
 get_namespaceURI: UNEXPOSED.Δ,
 get_prefix: UNEXPOSED.Δ,
 get_baseName: UNEXPOSED.Δ,
 transformNodeToObject: UNEXPOSED.Δ,
 get_doctype: UNEXPOSED.Δ,
 get_implementation: UNEXPOSED.Δ,
 get_documentElement: UNEXPOSED.Δ,
 putref_documentElement: UNEXPOSED.Δ,
 createElement: UNEXPOSED.Δ,
 createDocumentFragment: UNEXPOSED.Δ,
 createTextNode: UNEXPOSED.Δ,
 createComment: UNEXPOSED.Δ,
 createCDATASection: UNEXPOSED.Δ,
 createProcessingInstruction: UNEXPOSED.Δ,
 createAttribute: UNEXPOSED.Δ,
 createEntityReference: UNEXPOSED.Δ,
 getElementsByTagName: UNEXPOSED.Δ,
 createNode: UNEXPOSED.Δ,
 nodeFromID: UNEXPOSED.Δ,
 load: UNEXPOSED.Δ,
 get_readyState: UNEXPOSED.Δ,
 get_parseError: UNEXPOSED.Δ,
 get_url: UNEXPOSED.Δ,
 get_async: UNEXPOSED.Δ,
 put_async: UNEXPOSED.Δ,
 abort: UNEXPOSED.Δ,
 loadXML: UNEXPOSED.Δ,
 save: UNEXPOSED.Δ,
 get_validateOnParse: UNEXPOSED.Δ,
 put_validateOnParse: UNEXPOSED.Δ,
 get_resolveExternals: UNEXPOSED.Δ,
 put_resolveExternals: UNEXPOSED.Δ,
 get_preserveWhiteSpace: UNEXPOSED.Δ,
 put_preserveWhiteSpace: UNEXPOSED.Δ,
 put_onreadystatechange: UNEXPOSED.Δ,
 put_ondataavailable: UNEXPOSED.Δ,
 put_ontransformnode: UNEXPOSED.Δ
});

var IXMLDOMNodeListVtbl = new StructT('IXMLDOMNodeListVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_item: UNEXPOSED.Δ,
 get_length: UNEXPOSED.Δ,
 nextNode: UNEXPOSED.Δ,
 reset: UNEXPOSED.Δ,
 get__newEnum: UNEXPOSED.Δ
});

var IXMLDOMNamedNodeMapVtbl = new StructT('IXMLDOMNamedNodeMapVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 getNamedItem: UNEXPOSED.Δ,
 setNamedItem: UNEXPOSED.Δ,
 removeNamedItem: UNEXPOSED.Δ,
 get_item: UNEXPOSED.Δ,
 get_length: UNEXPOSED.Δ,
 getQualifiedItem: UNEXPOSED.Δ,
 removeQualifiedItem: UNEXPOSED.Δ,
 nextNode: UNEXPOSED.Δ,
 reset: UNEXPOSED.Δ,
 get__newEnum: UNEXPOSED.Δ
});

var IXMLDOMCharacterDataVtbl = new StructT('IXMLDOMCharacterDataVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_nodeName: UNEXPOSED.Δ,
 get_nodeValue: UNEXPOSED.Δ,
 put_nodeValue: UNEXPOSED.Δ,
 get_nodeType: UNEXPOSED.Δ,
 get_parentNode: UNEXPOSED.Δ,
 get_childNodes: UNEXPOSED.Δ,
 get_firstChild: UNEXPOSED.Δ,
 get_lastChild: UNEXPOSED.Δ,
 get_previousSibling: UNEXPOSED.Δ,
 get_nextSibling: UNEXPOSED.Δ,
 get_attributes: UNEXPOSED.Δ,
 insertBefore: UNEXPOSED.Δ,
 replaceChild: UNEXPOSED.Δ,
 removeChild: UNEXPOSED.Δ,
 appendChild: UNEXPOSED.Δ,
 hasChildNodes: UNEXPOSED.Δ,
 get_ownerDocument: UNEXPOSED.Δ,
 cloneNode: UNEXPOSED.Δ,
 get_nodeTypeString: UNEXPOSED.Δ,
 get_text: UNEXPOSED.Δ,
 put_text: UNEXPOSED.Δ,
 get_specified: UNEXPOSED.Δ,
 get_definition: UNEXPOSED.Δ,
 get_nodeTypedValue: UNEXPOSED.Δ,
 put_nodeTypedValue: UNEXPOSED.Δ,
 get_dataType: UNEXPOSED.Δ,
 put_dataType: UNEXPOSED.Δ,
 get_xml: UNEXPOSED.Δ,
 transformNode: UNEXPOSED.Δ,
 selectNodes: UNEXPOSED.Δ,
 selectSingleNode: UNEXPOSED.Δ,
 get_parsed: UNEXPOSED.Δ,
 get_namespaceURI: UNEXPOSED.Δ,
 get_prefix: UNEXPOSED.Δ,
 get_baseName: UNEXPOSED.Δ,
 transformNodeToObject: UNEXPOSED.Δ,
 get_data: UNEXPOSED.Δ,
 put_data: UNEXPOSED.Δ,
 get_length: UNEXPOSED.Δ,
 substringData: UNEXPOSED.Δ,
 appendData: UNEXPOSED.Δ,
 insertData: UNEXPOSED.Δ,
 deleteData: UNEXPOSED.Δ,
 replaceData: UNEXPOSED.Δ
});

var IXMLDOMAttributeVtbl = new StructT('IXMLDOMAttributeVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_nodeName: UNEXPOSED.Δ,
 get_nodeValue: UNEXPOSED.Δ,
 put_nodeValue: UNEXPOSED.Δ,
 get_nodeType: UNEXPOSED.Δ,
 get_parentNode: UNEXPOSED.Δ,
 get_childNodes: UNEXPOSED.Δ,
 get_firstChild: UNEXPOSED.Δ,
 get_lastChild: UNEXPOSED.Δ,
 get_previousSibling: UNEXPOSED.Δ,
 get_nextSibling: UNEXPOSED.Δ,
 get_attributes: UNEXPOSED.Δ,
 insertBefore: UNEXPOSED.Δ,
 replaceChild: UNEXPOSED.Δ,
 removeChild: UNEXPOSED.Δ,
 appendChild: UNEXPOSED.Δ,
 hasChildNodes: UNEXPOSED.Δ,
 get_ownerDocument: UNEXPOSED.Δ,
 cloneNode: UNEXPOSED.Δ,
 get_nodeTypeString: UNEXPOSED.Δ,
 get_text: UNEXPOSED.Δ,
 put_text: UNEXPOSED.Δ,
 get_specified: UNEXPOSED.Δ,
 get_definition: UNEXPOSED.Δ,
 get_nodeTypedValue: UNEXPOSED.Δ,
 put_nodeTypedValue: UNEXPOSED.Δ,
 get_dataType: UNEXPOSED.Δ,
 put_dataType: UNEXPOSED.Δ,
 get_xml: UNEXPOSED.Δ,
 transformNode: UNEXPOSED.Δ,
 selectNodes: UNEXPOSED.Δ,
 selectSingleNode: UNEXPOSED.Δ,
 get_parsed: UNEXPOSED.Δ,
 get_namespaceURI: UNEXPOSED.Δ,
 get_prefix: UNEXPOSED.Δ,
 get_baseName: UNEXPOSED.Δ,
 transformNodeToObject: UNEXPOSED.Δ,
 get_name: UNEXPOSED.Δ,
 get_value: UNEXPOSED.Δ,
 put_value: UNEXPOSED.Δ
});

var IXMLDOMElementVtbl = new StructT('IXMLDOMElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_nodeName: UNEXPOSED.Δ,
 get_nodeValue: UNEXPOSED.Δ,
 put_nodeValue: UNEXPOSED.Δ,
 get_nodeType: UNEXPOSED.Δ,
 get_parentNode: UNEXPOSED.Δ,
 get_childNodes: UNEXPOSED.Δ,
 get_firstChild: UNEXPOSED.Δ,
 get_lastChild: UNEXPOSED.Δ,
 get_previousSibling: UNEXPOSED.Δ,
 get_nextSibling: UNEXPOSED.Δ,
 get_attributes: UNEXPOSED.Δ,
 insertBefore: UNEXPOSED.Δ,
 replaceChild: UNEXPOSED.Δ,
 removeChild: UNEXPOSED.Δ,
 appendChild: UNEXPOSED.Δ,
 hasChildNodes: UNEXPOSED.Δ,
 get_ownerDocument: UNEXPOSED.Δ,
 cloneNode: UNEXPOSED.Δ,
 get_nodeTypeString: UNEXPOSED.Δ,
 get_text: UNEXPOSED.Δ,
 put_text: UNEXPOSED.Δ,
 get_specified: UNEXPOSED.Δ,
 get_definition: UNEXPOSED.Δ,
 get_nodeTypedValue: UNEXPOSED.Δ,
 put_nodeTypedValue: UNEXPOSED.Δ,
 get_dataType: UNEXPOSED.Δ,
 put_dataType: UNEXPOSED.Δ,
 get_xml: UNEXPOSED.Δ,
 transformNode: UNEXPOSED.Δ,
 selectNodes: UNEXPOSED.Δ,
 selectSingleNode: UNEXPOSED.Δ,
 get_parsed: UNEXPOSED.Δ,
 get_namespaceURI: UNEXPOSED.Δ,
 get_prefix: UNEXPOSED.Δ,
 get_baseName: UNEXPOSED.Δ,
 transformNodeToObject: UNEXPOSED.Δ,
 get_tagName: UNEXPOSED.Δ,
 getAttribute: UNEXPOSED.Δ,
 setAttribute: UNEXPOSED.Δ,
 removeAttribute: UNEXPOSED.Δ,
 getAttributeNode: UNEXPOSED.Δ,
 setAttributeNode: UNEXPOSED.Δ,
 removeAttributeNode: UNEXPOSED.Δ,
 getElementsByTagName: UNEXPOSED.Δ,
 normalize: UNEXPOSED.Δ
});

var IXMLDOMTextVtbl = new StructT('IXMLDOMTextVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_nodeName: UNEXPOSED.Δ,
 get_nodeValue: UNEXPOSED.Δ,
 put_nodeValue: UNEXPOSED.Δ,
 get_nodeType: UNEXPOSED.Δ,
 get_parentNode: UNEXPOSED.Δ,
 get_childNodes: UNEXPOSED.Δ,
 get_firstChild: UNEXPOSED.Δ,
 get_lastChild: UNEXPOSED.Δ,
 get_previousSibling: UNEXPOSED.Δ,
 get_nextSibling: UNEXPOSED.Δ,
 get_attributes: UNEXPOSED.Δ,
 insertBefore: UNEXPOSED.Δ,
 replaceChild: UNEXPOSED.Δ,
 removeChild: UNEXPOSED.Δ,
 appendChild: UNEXPOSED.Δ,
 hasChildNodes: UNEXPOSED.Δ,
 get_ownerDocument: UNEXPOSED.Δ,
 cloneNode: UNEXPOSED.Δ,
 get_nodeTypeString: UNEXPOSED.Δ,
 get_text: UNEXPOSED.Δ,
 put_text: UNEXPOSED.Δ,
 get_specified: UNEXPOSED.Δ,
 get_definition: UNEXPOSED.Δ,
 get_nodeTypedValue: UNEXPOSED.Δ,
 put_nodeTypedValue: UNEXPOSED.Δ,
 get_dataType: UNEXPOSED.Δ,
 put_dataType: UNEXPOSED.Δ,
 get_xml: UNEXPOSED.Δ,
 transformNode: UNEXPOSED.Δ,
 selectNodes: UNEXPOSED.Δ,
 selectSingleNode: UNEXPOSED.Δ,
 get_parsed: UNEXPOSED.Δ,
 get_namespaceURI: UNEXPOSED.Δ,
 get_prefix: UNEXPOSED.Δ,
 get_baseName: UNEXPOSED.Δ,
 transformNodeToObject: UNEXPOSED.Δ,
 get_data: UNEXPOSED.Δ,
 put_data: UNEXPOSED.Δ,
 get_length: UNEXPOSED.Δ,
 substringData: UNEXPOSED.Δ,
 appendData: UNEXPOSED.Δ,
 insertData: UNEXPOSED.Δ,
 deleteData: UNEXPOSED.Δ,
 replaceData: UNEXPOSED.Δ,
 splitText: UNEXPOSED.Δ
});

var IXMLDOMCommentVtbl = new StructT('IXMLDOMCommentVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_nodeName: UNEXPOSED.Δ,
 get_nodeValue: UNEXPOSED.Δ,
 put_nodeValue: UNEXPOSED.Δ,
 get_nodeType: UNEXPOSED.Δ,
 get_parentNode: UNEXPOSED.Δ,
 get_childNodes: UNEXPOSED.Δ,
 get_firstChild: UNEXPOSED.Δ,
 get_lastChild: UNEXPOSED.Δ,
 get_previousSibling: UNEXPOSED.Δ,
 get_nextSibling: UNEXPOSED.Δ,
 get_attributes: UNEXPOSED.Δ,
 insertBefore: UNEXPOSED.Δ,
 replaceChild: UNEXPOSED.Δ,
 removeChild: UNEXPOSED.Δ,
 appendChild: UNEXPOSED.Δ,
 hasChildNodes: UNEXPOSED.Δ,
 get_ownerDocument: UNEXPOSED.Δ,
 cloneNode: UNEXPOSED.Δ,
 get_nodeTypeString: UNEXPOSED.Δ,
 get_text: UNEXPOSED.Δ,
 put_text: UNEXPOSED.Δ,
 get_specified: UNEXPOSED.Δ,
 get_definition: UNEXPOSED.Δ,
 get_nodeTypedValue: UNEXPOSED.Δ,
 put_nodeTypedValue: UNEXPOSED.Δ,
 get_dataType: UNEXPOSED.Δ,
 put_dataType: UNEXPOSED.Δ,
 get_xml: UNEXPOSED.Δ,
 transformNode: UNEXPOSED.Δ,
 selectNodes: UNEXPOSED.Δ,
 selectSingleNode: UNEXPOSED.Δ,
 get_parsed: UNEXPOSED.Δ,
 get_namespaceURI: UNEXPOSED.Δ,
 get_prefix: UNEXPOSED.Δ,
 get_baseName: UNEXPOSED.Δ,
 transformNodeToObject: UNEXPOSED.Δ,
 get_data: UNEXPOSED.Δ,
 put_data: UNEXPOSED.Δ,
 get_length: UNEXPOSED.Δ,
 substringData: UNEXPOSED.Δ,
 appendData: UNEXPOSED.Δ,
 insertData: UNEXPOSED.Δ,
 deleteData: UNEXPOSED.Δ,
 replaceData: UNEXPOSED.Δ
});

var IXMLDOMProcessingInstructionVtbl = new StructT('IXMLDOMProcessingInstructionVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_nodeName: UNEXPOSED.Δ,
 get_nodeValue: UNEXPOSED.Δ,
 put_nodeValue: UNEXPOSED.Δ,
 get_nodeType: UNEXPOSED.Δ,
 get_parentNode: UNEXPOSED.Δ,
 get_childNodes: UNEXPOSED.Δ,
 get_firstChild: UNEXPOSED.Δ,
 get_lastChild: UNEXPOSED.Δ,
 get_previousSibling: UNEXPOSED.Δ,
 get_nextSibling: UNEXPOSED.Δ,
 get_attributes: UNEXPOSED.Δ,
 insertBefore: UNEXPOSED.Δ,
 replaceChild: UNEXPOSED.Δ,
 removeChild: UNEXPOSED.Δ,
 appendChild: UNEXPOSED.Δ,
 hasChildNodes: UNEXPOSED.Δ,
 get_ownerDocument: UNEXPOSED.Δ,
 cloneNode: UNEXPOSED.Δ,
 get_nodeTypeString: UNEXPOSED.Δ,
 get_text: UNEXPOSED.Δ,
 put_text: UNEXPOSED.Δ,
 get_specified: UNEXPOSED.Δ,
 get_definition: UNEXPOSED.Δ,
 get_nodeTypedValue: UNEXPOSED.Δ,
 put_nodeTypedValue: UNEXPOSED.Δ,
 get_dataType: UNEXPOSED.Δ,
 put_dataType: UNEXPOSED.Δ,
 get_xml: UNEXPOSED.Δ,
 transformNode: UNEXPOSED.Δ,
 selectNodes: UNEXPOSED.Δ,
 selectSingleNode: UNEXPOSED.Δ,
 get_parsed: UNEXPOSED.Δ,
 get_namespaceURI: UNEXPOSED.Δ,
 get_prefix: UNEXPOSED.Δ,
 get_baseName: UNEXPOSED.Δ,
 transformNodeToObject: UNEXPOSED.Δ,
 get_target: UNEXPOSED.Δ,
 get_data: UNEXPOSED.Δ,
 put_data: UNEXPOSED.Δ
});

var IXMLDOMCDATASectionVtbl = new StructT('IXMLDOMCDATASectionVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_nodeName: UNEXPOSED.Δ,
 get_nodeValue: UNEXPOSED.Δ,
 put_nodeValue: UNEXPOSED.Δ,
 get_nodeType: UNEXPOSED.Δ,
 get_parentNode: UNEXPOSED.Δ,
 get_childNodes: UNEXPOSED.Δ,
 get_firstChild: UNEXPOSED.Δ,
 get_lastChild: UNEXPOSED.Δ,
 get_previousSibling: UNEXPOSED.Δ,
 get_nextSibling: UNEXPOSED.Δ,
 get_attributes: UNEXPOSED.Δ,
 insertBefore: UNEXPOSED.Δ,
 replaceChild: UNEXPOSED.Δ,
 removeChild: UNEXPOSED.Δ,
 appendChild: UNEXPOSED.Δ,
 hasChildNodes: UNEXPOSED.Δ,
 get_ownerDocument: UNEXPOSED.Δ,
 cloneNode: UNEXPOSED.Δ,
 get_nodeTypeString: UNEXPOSED.Δ,
 get_text: UNEXPOSED.Δ,
 put_text: UNEXPOSED.Δ,
 get_specified: UNEXPOSED.Δ,
 get_definition: UNEXPOSED.Δ,
 get_nodeTypedValue: UNEXPOSED.Δ,
 put_nodeTypedValue: UNEXPOSED.Δ,
 get_dataType: UNEXPOSED.Δ,
 put_dataType: UNEXPOSED.Δ,
 get_xml: UNEXPOSED.Δ,
 transformNode: UNEXPOSED.Δ,
 selectNodes: UNEXPOSED.Δ,
 selectSingleNode: UNEXPOSED.Δ,
 get_parsed: UNEXPOSED.Δ,
 get_namespaceURI: UNEXPOSED.Δ,
 get_prefix: UNEXPOSED.Δ,
 get_baseName: UNEXPOSED.Δ,
 transformNodeToObject: UNEXPOSED.Δ,
 get_data: UNEXPOSED.Δ,
 put_data: UNEXPOSED.Δ,
 get_length: UNEXPOSED.Δ,
 substringData: UNEXPOSED.Δ,
 appendData: UNEXPOSED.Δ,
 insertData: UNEXPOSED.Δ,
 deleteData: UNEXPOSED.Δ,
 replaceData: UNEXPOSED.Δ,
 splitText: UNEXPOSED.Δ
});

var IXMLDOMDocumentTypeVtbl = new StructT('IXMLDOMDocumentTypeVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_nodeName: UNEXPOSED.Δ,
 get_nodeValue: UNEXPOSED.Δ,
 put_nodeValue: UNEXPOSED.Δ,
 get_nodeType: UNEXPOSED.Δ,
 get_parentNode: UNEXPOSED.Δ,
 get_childNodes: UNEXPOSED.Δ,
 get_firstChild: UNEXPOSED.Δ,
 get_lastChild: UNEXPOSED.Δ,
 get_previousSibling: UNEXPOSED.Δ,
 get_nextSibling: UNEXPOSED.Δ,
 get_attributes: UNEXPOSED.Δ,
 insertBefore: UNEXPOSED.Δ,
 replaceChild: UNEXPOSED.Δ,
 removeChild: UNEXPOSED.Δ,
 appendChild: UNEXPOSED.Δ,
 hasChildNodes: UNEXPOSED.Δ,
 get_ownerDocument: UNEXPOSED.Δ,
 cloneNode: UNEXPOSED.Δ,
 get_nodeTypeString: UNEXPOSED.Δ,
 get_text: UNEXPOSED.Δ,
 put_text: UNEXPOSED.Δ,
 get_specified: UNEXPOSED.Δ,
 get_definition: UNEXPOSED.Δ,
 get_nodeTypedValue: UNEXPOSED.Δ,
 put_nodeTypedValue: UNEXPOSED.Δ,
 get_dataType: UNEXPOSED.Δ,
 put_dataType: UNEXPOSED.Δ,
 get_xml: UNEXPOSED.Δ,
 transformNode: UNEXPOSED.Δ,
 selectNodes: UNEXPOSED.Δ,
 selectSingleNode: UNEXPOSED.Δ,
 get_parsed: UNEXPOSED.Δ,
 get_namespaceURI: UNEXPOSED.Δ,
 get_prefix: UNEXPOSED.Δ,
 get_baseName: UNEXPOSED.Δ,
 transformNodeToObject: UNEXPOSED.Δ,
 get_name: UNEXPOSED.Δ,
 get_entities: UNEXPOSED.Δ,
 get_notations: UNEXPOSED.Δ
});

var IXMLDOMNotationVtbl = new StructT('IXMLDOMNotationVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_nodeName: UNEXPOSED.Δ,
 get_nodeValue: UNEXPOSED.Δ,
 put_nodeValue: UNEXPOSED.Δ,
 get_nodeType: UNEXPOSED.Δ,
 get_parentNode: UNEXPOSED.Δ,
 get_childNodes: UNEXPOSED.Δ,
 get_firstChild: UNEXPOSED.Δ,
 get_lastChild: UNEXPOSED.Δ,
 get_previousSibling: UNEXPOSED.Δ,
 get_nextSibling: UNEXPOSED.Δ,
 get_attributes: UNEXPOSED.Δ,
 insertBefore: UNEXPOSED.Δ,
 replaceChild: UNEXPOSED.Δ,
 removeChild: UNEXPOSED.Δ,
 appendChild: UNEXPOSED.Δ,
 hasChildNodes: UNEXPOSED.Δ,
 get_ownerDocument: UNEXPOSED.Δ,
 cloneNode: UNEXPOSED.Δ,
 get_nodeTypeString: UNEXPOSED.Δ,
 get_text: UNEXPOSED.Δ,
 put_text: UNEXPOSED.Δ,
 get_specified: UNEXPOSED.Δ,
 get_definition: UNEXPOSED.Δ,
 get_nodeTypedValue: UNEXPOSED.Δ,
 put_nodeTypedValue: UNEXPOSED.Δ,
 get_dataType: UNEXPOSED.Δ,
 put_dataType: UNEXPOSED.Δ,
 get_xml: UNEXPOSED.Δ,
 transformNode: UNEXPOSED.Δ,
 selectNodes: UNEXPOSED.Δ,
 selectSingleNode: UNEXPOSED.Δ,
 get_parsed: UNEXPOSED.Δ,
 get_namespaceURI: UNEXPOSED.Δ,
 get_prefix: UNEXPOSED.Δ,
 get_baseName: UNEXPOSED.Δ,
 transformNodeToObject: UNEXPOSED.Δ,
 get_publicId: UNEXPOSED.Δ,
 get_systemId: UNEXPOSED.Δ
});

var IXMLDOMEntityVtbl = new StructT('IXMLDOMEntityVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_nodeName: UNEXPOSED.Δ,
 get_nodeValue: UNEXPOSED.Δ,
 put_nodeValue: UNEXPOSED.Δ,
 get_nodeType: UNEXPOSED.Δ,
 get_parentNode: UNEXPOSED.Δ,
 get_childNodes: UNEXPOSED.Δ,
 get_firstChild: UNEXPOSED.Δ,
 get_lastChild: UNEXPOSED.Δ,
 get_previousSibling: UNEXPOSED.Δ,
 get_nextSibling: UNEXPOSED.Δ,
 get_attributes: UNEXPOSED.Δ,
 insertBefore: UNEXPOSED.Δ,
 replaceChild: UNEXPOSED.Δ,
 removeChild: UNEXPOSED.Δ,
 appendChild: UNEXPOSED.Δ,
 hasChildNodes: UNEXPOSED.Δ,
 get_ownerDocument: UNEXPOSED.Δ,
 cloneNode: UNEXPOSED.Δ,
 get_nodeTypeString: UNEXPOSED.Δ,
 get_text: UNEXPOSED.Δ,
 put_text: UNEXPOSED.Δ,
 get_specified: UNEXPOSED.Δ,
 get_definition: UNEXPOSED.Δ,
 get_nodeTypedValue: UNEXPOSED.Δ,
 put_nodeTypedValue: UNEXPOSED.Δ,
 get_dataType: UNEXPOSED.Δ,
 put_dataType: UNEXPOSED.Δ,
 get_xml: UNEXPOSED.Δ,
 transformNode: UNEXPOSED.Δ,
 selectNodes: UNEXPOSED.Δ,
 selectSingleNode: UNEXPOSED.Δ,
 get_parsed: UNEXPOSED.Δ,
 get_namespaceURI: UNEXPOSED.Δ,
 get_prefix: UNEXPOSED.Δ,
 get_baseName: UNEXPOSED.Δ,
 transformNodeToObject: UNEXPOSED.Δ,
 get_publicId: UNEXPOSED.Δ,
 get_systemId: UNEXPOSED.Δ,
 get_notationName: UNEXPOSED.Δ
});

var IXMLDOMEntityReferenceVtbl = new StructT('IXMLDOMEntityReferenceVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_nodeName: UNEXPOSED.Δ,
 get_nodeValue: UNEXPOSED.Δ,
 put_nodeValue: UNEXPOSED.Δ,
 get_nodeType: UNEXPOSED.Δ,
 get_parentNode: UNEXPOSED.Δ,
 get_childNodes: UNEXPOSED.Δ,
 get_firstChild: UNEXPOSED.Δ,
 get_lastChild: UNEXPOSED.Δ,
 get_previousSibling: UNEXPOSED.Δ,
 get_nextSibling: UNEXPOSED.Δ,
 get_attributes: UNEXPOSED.Δ,
 insertBefore: UNEXPOSED.Δ,
 replaceChild: UNEXPOSED.Δ,
 removeChild: UNEXPOSED.Δ,
 appendChild: UNEXPOSED.Δ,
 hasChildNodes: UNEXPOSED.Δ,
 get_ownerDocument: UNEXPOSED.Δ,
 cloneNode: UNEXPOSED.Δ,
 get_nodeTypeString: UNEXPOSED.Δ,
 get_text: UNEXPOSED.Δ,
 put_text: UNEXPOSED.Δ,
 get_specified: UNEXPOSED.Δ,
 get_definition: UNEXPOSED.Δ,
 get_nodeTypedValue: UNEXPOSED.Δ,
 put_nodeTypedValue: UNEXPOSED.Δ,
 get_dataType: UNEXPOSED.Δ,
 put_dataType: UNEXPOSED.Δ,
 get_xml: UNEXPOSED.Δ,
 transformNode: UNEXPOSED.Δ,
 selectNodes: UNEXPOSED.Δ,
 selectSingleNode: UNEXPOSED.Δ,
 get_parsed: UNEXPOSED.Δ,
 get_namespaceURI: UNEXPOSED.Δ,
 get_prefix: UNEXPOSED.Δ,
 get_baseName: UNEXPOSED.Δ,
 transformNodeToObject: UNEXPOSED.Δ
});

var IXMLDOMParseErrorVtbl = new StructT('IXMLDOMParseErrorVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_errorCode: UNEXPOSED.Δ,
 get_url: UNEXPOSED.Δ,
 get_reason: UNEXPOSED.Δ,
 get_srcText: UNEXPOSED.Δ,
 get_line: UNEXPOSED.Δ,
 get_linepos: UNEXPOSED.Δ,
 get_filepos: UNEXPOSED.Δ
});

var IXTLRuntimeVtbl = new StructT('IXTLRuntimeVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_nodeName: UNEXPOSED.Δ,
 get_nodeValue: UNEXPOSED.Δ,
 put_nodeValue: UNEXPOSED.Δ,
 get_nodeType: UNEXPOSED.Δ,
 get_parentNode: UNEXPOSED.Δ,
 get_childNodes: UNEXPOSED.Δ,
 get_firstChild: UNEXPOSED.Δ,
 get_lastChild: UNEXPOSED.Δ,
 get_previousSibling: UNEXPOSED.Δ,
 get_nextSibling: UNEXPOSED.Δ,
 get_attributes: UNEXPOSED.Δ,
 insertBefore: UNEXPOSED.Δ,
 replaceChild: UNEXPOSED.Δ,
 removeChild: UNEXPOSED.Δ,
 appendChild: UNEXPOSED.Δ,
 hasChildNodes: UNEXPOSED.Δ,
 get_ownerDocument: UNEXPOSED.Δ,
 cloneNode: UNEXPOSED.Δ,
 get_nodeTypeString: UNEXPOSED.Δ,
 get_text: UNEXPOSED.Δ,
 put_text: UNEXPOSED.Δ,
 get_specified: UNEXPOSED.Δ,
 get_definition: UNEXPOSED.Δ,
 get_nodeTypedValue: UNEXPOSED.Δ,
 put_nodeTypedValue: UNEXPOSED.Δ,
 get_dataType: UNEXPOSED.Δ,
 put_dataType: UNEXPOSED.Δ,
 get_xml: UNEXPOSED.Δ,
 transformNode: UNEXPOSED.Δ,
 selectNodes: UNEXPOSED.Δ,
 selectSingleNode: UNEXPOSED.Δ,
 get_parsed: UNEXPOSED.Δ,
 get_namespaceURI: UNEXPOSED.Δ,
 get_prefix: UNEXPOSED.Δ,
 get_baseName: UNEXPOSED.Δ,
 transformNodeToObject: UNEXPOSED.Δ,
 uniqueID: UNEXPOSED.Δ,
 depth: UNEXPOSED.Δ,
 childNumber: UNEXPOSED.Δ,
 ancestorChildNumber: UNEXPOSED.Δ,
 absoluteChildNumber: UNEXPOSED.Δ,
 formatIndex: UNEXPOSED.Δ,
 formatNumber: UNEXPOSED.Δ,
 formatDate: UNEXPOSED.Δ,
 formatTime: UNEXPOSED.Δ
});

var XMLDOMDocumentEventsVtbl = new StructT('XMLDOMDocumentEventsVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IXMLHttpRequestVtbl = new StructT('IXMLHttpRequestVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 open: UNEXPOSED.Δ,
 setRequestHeader: UNEXPOSED.Δ,
 getResponseHeader: UNEXPOSED.Δ,
 getAllResponseHeaders: UNEXPOSED.Δ,
 send: UNEXPOSED.Δ,
 abort: UNEXPOSED.Δ,
 get_status: UNEXPOSED.Δ,
 get_statusText: UNEXPOSED.Δ,
 get_responseXML: UNEXPOSED.Δ,
 get_responseText: UNEXPOSED.Δ,
 get_responseBody: UNEXPOSED.Δ,
 get_responseStream: UNEXPOSED.Δ,
 get_readyState: UNEXPOSED.Δ,
 put_onreadystatechange: UNEXPOSED.Δ
});

var IXMLDSOControlVtbl = new StructT('IXMLDSOControlVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_XMLDocument: UNEXPOSED.Δ,
 put_XMLDocument: UNEXPOSED.Δ,
 get_JavaDSOCompatible: UNEXPOSED.Δ,
 put_JavaDSOCompatible: UNEXPOSED.Δ,
 get_readyState: UNEXPOSED.Δ
});

var IXMLElementCollectionVtbl = new StructT('IXMLElementCollectionVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_length: UNEXPOSED.Δ,
 get_length: UNEXPOSED.Δ,
 get__newEnum: UNEXPOSED.Δ,
 item: UNEXPOSED.Δ
});

var IXMLDocumentVtbl = new StructT('IXMLDocumentVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_root: UNEXPOSED.Δ,
 get_fileSize: UNEXPOSED.Δ,
 get_fileModifiedDate: UNEXPOSED.Δ,
 get_fileUpdatedDate: UNEXPOSED.Δ,
 get_URL: UNEXPOSED.Δ,
 put_URL: UNEXPOSED.Δ,
 get_mimeType: UNEXPOSED.Δ,
 get_readyState: UNEXPOSED.Δ,
 get_charset: UNEXPOSED.Δ,
 put_charset: UNEXPOSED.Δ,
 get_version: UNEXPOSED.Δ,
 get_doctype: UNEXPOSED.Δ,
 get_dtdURL: UNEXPOSED.Δ,
 createElement: UNEXPOSED.Δ
});

var IXMLDocument2Vtbl = new StructT('IXMLDocument2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_root: UNEXPOSED.Δ,
 get_fileSize: UNEXPOSED.Δ,
 get_fileModifiedDate: UNEXPOSED.Δ,
 get_fileUpdatedDate: UNEXPOSED.Δ,
 get_URL: UNEXPOSED.Δ,
 put_URL: UNEXPOSED.Δ,
 get_mimeType: UNEXPOSED.Δ,
 get_readyState: UNEXPOSED.Δ,
 get_charset: UNEXPOSED.Δ,
 put_charset: UNEXPOSED.Δ,
 get_version: UNEXPOSED.Δ,
 get_doctype: UNEXPOSED.Δ,
 get_dtdURL: UNEXPOSED.Δ,
 createElement: UNEXPOSED.Δ,
 get_async: UNEXPOSED.Δ,
 put_async: UNEXPOSED.Δ
});

var IXMLElementVtbl = new StructT('IXMLElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_tagName: UNEXPOSED.Δ,
 put_tagName: UNEXPOSED.Δ,
 get_parent: UNEXPOSED.Δ,
 setAttribute: UNEXPOSED.Δ,
 getAttribute: UNEXPOSED.Δ,
 removeAttribute: UNEXPOSED.Δ,
 get_children: UNEXPOSED.Δ,
 get_type: UNEXPOSED.Δ,
 get_text: UNEXPOSED.Δ,
 put_text: UNEXPOSED.Δ,
 addChild: UNEXPOSED.Δ,
 removeChild: UNEXPOSED.Δ
});

var IXMLElement2Vtbl = new StructT('IXMLElement2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_tagName: UNEXPOSED.Δ,
 put_tagName: UNEXPOSED.Δ,
 get_parent: UNEXPOSED.Δ,
 setAttribute: UNEXPOSED.Δ,
 getAttribute: UNEXPOSED.Δ,
 removeAttribute: UNEXPOSED.Δ,
 get_children: UNEXPOSED.Δ,
 get_type: UNEXPOSED.Δ,
 get_text: UNEXPOSED.Δ,
 put_text: UNEXPOSED.Δ,
 addChild: UNEXPOSED.Δ,
 removeChild: UNEXPOSED.Δ,
 get_attributes: UNEXPOSED.Δ
});

var IXMLAttributeVtbl = new StructT('IXMLAttributeVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_name: UNEXPOSED.Δ,
 get_value: UNEXPOSED.Δ
});

var IXMLErrorVtbl = new StructT('IXMLErrorVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetErrorInfo: UNEXPOSED.Δ
});

var IPersistMonikerVtbl = new StructT('IPersistMonikerVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetClassID: UNEXPOSED.Δ,
 IsDirty: UNEXPOSED.Δ,
 Load: UNEXPOSED.Δ,
 Save: UNEXPOSED.Δ,
 SaveCompleted: UNEXPOSED.Δ,
 GetCurMoniker: UNEXPOSED.Δ
});

var IMonikerPropVtbl = new StructT('IMonikerPropVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 PutProperty: UNEXPOSED.Δ
});

var IBindProtocolVtbl = new StructT('IBindProtocolVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 CreateBinding: UNEXPOSED.Δ
});

var IBindingVtbl = new StructT('IBindingVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Abort: UNEXPOSED.Δ,
 Suspend: UNEXPOSED.Δ,
 Resume: UNEXPOSED.Δ,
 SetPriority: UNEXPOSED.Δ,
 GetPriority: UNEXPOSED.Δ,
 GetBindResult: UNEXPOSED.Δ
});

var _tagBINDINFO = new StructT('_tagBINDINFO', {
 cbSize: ULONG,
 szExtraInfo: LPWSTR,
 stgmedData: STGMEDIUM,
 grfBindInfoF: DWORD,
 dwBindVerb: DWORD,
 szCustomVerb: LPWSTR,
 cbstgmedData: DWORD,
 dwOptions: DWORD,
 dwOptionsFlags: DWORD,
 dwCodePage: DWORD,
 securityAttributes: SECURITY_ATTRIBUTES,
 iid: IID,
 pUnk: uint.Δ,
 dwReserved: DWORD
});

var _REMSECURITY_ATTRIBUTES = new StructT('_REMSECURITY_ATTRIBUTES', {
 nLength: DWORD,
 lpSecurityDescriptor: DWORD,
 bInheritHandle: BOOL
});

var _tagRemBINDINFO = new StructT('_tagRemBINDINFO', {
 cbSize: ULONG,
 szExtraInfo: LPWSTR,
 grfBindInfoF: DWORD,
 dwBindVerb: DWORD,
 szCustomVerb: LPWSTR,
 cbstgmedData: DWORD,
 dwOptions: DWORD,
 dwOptionsFlags: DWORD,
 dwCodePage: DWORD,
 securityAttributes: REMSECURITY_ATTRIBUTES,
 iid: IID,
 pUnk: uint.Δ,
 dwReserved: DWORD
});

var tagRemFORMATETC = new StructT('tagRemFORMATETC', {
 cfFormat: DWORD,
 ptd: DWORD,
 dwAspect: DWORD,
 lindex: LONG,
 tymed: DWORD
});

var IBindStatusCallbackVtbl = new StructT('IBindStatusCallbackVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 OnStartBinding: UNEXPOSED.Δ,
 GetPriority: UNEXPOSED.Δ,
 OnLowResource: UNEXPOSED.Δ,
 OnProgress: UNEXPOSED.Δ,
 OnStopBinding: UNEXPOSED.Δ,
 GetBindInfo: UNEXPOSED.Δ,
 OnDataAvailable: UNEXPOSED.Δ,
 OnObjectAvailable: UNEXPOSED.Δ
});

var IBindStatusCallbackExVtbl = new StructT('IBindStatusCallbackExVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 OnStartBinding: UNEXPOSED.Δ,
 GetPriority: UNEXPOSED.Δ,
 OnLowResource: UNEXPOSED.Δ,
 OnProgress: UNEXPOSED.Δ,
 OnStopBinding: UNEXPOSED.Δ,
 GetBindInfo: UNEXPOSED.Δ,
 OnDataAvailable: UNEXPOSED.Δ,
 OnObjectAvailable: UNEXPOSED.Δ,
 GetBindInfoEx: UNEXPOSED.Δ
});

var IAuthenticateVtbl = new StructT('IAuthenticateVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Authenticate: UNEXPOSED.Δ
});

var _tagAUTHENTICATEINFO = new StructT('_tagAUTHENTICATEINFO', {
 dwFlags: DWORD,
 dwReserved: DWORD
});

var IAuthenticateExVtbl = new StructT('IAuthenticateExVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Authenticate: UNEXPOSED.Δ,
 AuthenticateEx: UNEXPOSED.Δ
});

var IHttpNegotiateVtbl = new StructT('IHttpNegotiateVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 BeginningTransaction: UNEXPOSED.Δ,
 OnResponse: UNEXPOSED.Δ
});

var IHttpNegotiate2Vtbl = new StructT('IHttpNegotiate2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 BeginningTransaction: UNEXPOSED.Δ,
 OnResponse: UNEXPOSED.Δ,
 GetRootSecurityId: UNEXPOSED.Δ
});

var IHttpNegotiate3Vtbl = new StructT('IHttpNegotiate3Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 BeginningTransaction: UNEXPOSED.Δ,
 OnResponse: UNEXPOSED.Δ,
 GetRootSecurityId: UNEXPOSED.Δ,
 GetSerializedClientCertContext: UNEXPOSED.Δ
});

var IWinInetFileStreamVtbl = new StructT('IWinInetFileStreamVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 SetHandleForUnlock: UNEXPOSED.Δ,
 SetDeleteFile: UNEXPOSED.Δ
});

var IWindowForBindingUIVtbl = new StructT('IWindowForBindingUIVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetWindow: UNEXPOSED.Δ
});

var ICodeInstallVtbl = new StructT('ICodeInstallVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetWindow: UNEXPOSED.Δ,
 OnCodeInstallProblem: UNEXPOSED.Δ
});

var IUriVtbl = new StructT('IUriVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetPropertyBSTR: UNEXPOSED.Δ,
 GetPropertyLength: UNEXPOSED.Δ,
 GetPropertyDWORD: UNEXPOSED.Δ,
 HasProperty: UNEXPOSED.Δ,
 GetAbsoluteUri: UNEXPOSED.Δ,
 GetAuthority: UNEXPOSED.Δ,
 GetDisplayUri: UNEXPOSED.Δ,
 GetDomain: UNEXPOSED.Δ,
 GetExtension: UNEXPOSED.Δ,
 GetFragment: UNEXPOSED.Δ,
 GetHost: UNEXPOSED.Δ,
 GetPassword: UNEXPOSED.Δ,
 GetPath: UNEXPOSED.Δ,
 GetPathAndQuery: UNEXPOSED.Δ,
 GetQuery: UNEXPOSED.Δ,
 GetRawUri: UNEXPOSED.Δ,
 GetSchemeName: UNEXPOSED.Δ,
 GetUserInfo: UNEXPOSED.Δ,
 GetUserNameA: UNEXPOSED.Δ,
 GetHostType: UNEXPOSED.Δ,
 GetPort: UNEXPOSED.Δ,
 GetScheme: UNEXPOSED.Δ,
 GetZone: UNEXPOSED.Δ,
 GetProperties: UNEXPOSED.Δ,
 IsEqual: UNEXPOSED.Δ
});

var IUriContainerVtbl = new StructT('IUriContainerVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetIUri: UNEXPOSED.Δ
});

var IUriBuilderVtbl = new StructT('IUriBuilderVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 CreateUriSimple: UNEXPOSED.Δ,
 CreateUri: UNEXPOSED.Δ,
 CreateUriWithFlags: UNEXPOSED.Δ,
 GetIUri: UNEXPOSED.Δ,
 SetIUri: UNEXPOSED.Δ,
 GetFragment: UNEXPOSED.Δ,
 GetHost: UNEXPOSED.Δ,
 GetPassword: UNEXPOSED.Δ,
 GetPath: UNEXPOSED.Δ,
 GetPort: UNEXPOSED.Δ,
 GetQuery: UNEXPOSED.Δ,
 GetSchemeName: UNEXPOSED.Δ,
 GetUserNameA: UNEXPOSED.Δ,
 SetFragment: UNEXPOSED.Δ,
 SetHost: UNEXPOSED.Δ,
 SetPassword: UNEXPOSED.Δ,
 SetPath: UNEXPOSED.Δ,
 SetPortA: UNEXPOSED.Δ,
 SetQuery: UNEXPOSED.Δ,
 SetSchemeName: UNEXPOSED.Δ,
 SetUserName: UNEXPOSED.Δ,
 RemoveProperties: UNEXPOSED.Δ,
 HasBeenModified: UNEXPOSED.Δ
});

var IUriBuilderFactoryVtbl = new StructT('IUriBuilderFactoryVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 CreateIUriBuilder: UNEXPOSED.Δ,
 CreateInitializedIUriBuilder: UNEXPOSED.Δ
});

var IWinInetInfoVtbl = new StructT('IWinInetInfoVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 QueryOption: UNEXPOSED.Δ
});

var IHttpSecurityVtbl = new StructT('IHttpSecurityVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetWindow: UNEXPOSED.Δ,
 OnSecurityProblem: UNEXPOSED.Δ
});

var IWinInetHttpInfoVtbl = new StructT('IWinInetHttpInfoVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 QueryOption: UNEXPOSED.Δ,
 QueryInfo: UNEXPOSED.Δ
});

var IWinInetCacheHintsVtbl = new StructT('IWinInetCacheHintsVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 SetCacheExtension: UNEXPOSED.Δ
});

var IWinInetCacheHints2Vtbl = new StructT('IWinInetCacheHints2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 SetCacheExtension: UNEXPOSED.Δ,
 SetCacheExtension2: UNEXPOSED.Δ
});

var IBindHostVtbl = new StructT('IBindHostVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 CreateMoniker: UNEXPOSED.Δ,
 MonikerBindToStorage: UNEXPOSED.Δ,
 MonikerBindToObject: UNEXPOSED.Δ
});

var IInternetVtbl = new StructT('IInternetVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ
});

var IInternetBindInfoVtbl = new StructT('IInternetBindInfoVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetBindInfo: UNEXPOSED.Δ,
 GetBindString: UNEXPOSED.Δ
});

var IInternetBindInfoExVtbl = new StructT('IInternetBindInfoExVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetBindInfo: UNEXPOSED.Δ,
 GetBindString: UNEXPOSED.Δ,
 GetBindInfoEx: UNEXPOSED.Δ
});

var _tagPROTOCOLDATA = new StructT('_tagPROTOCOLDATA', {
 grfFlags: DWORD,
 dwState: DWORD,
 pData: LPVOID,
 cbData: ULONG
});

var _tagStartParam = new StructT('_tagStartParam', {
 iid: IID,
 pIBindCtx: uint.Δ,
 pItf: uint.Δ
});

var IInternetProtocolRootVtbl = new StructT('IInternetProtocolRootVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Start: UNEXPOSED.Δ,
 Continue: UNEXPOSED.Δ,
 Abort: UNEXPOSED.Δ,
 Terminate: UNEXPOSED.Δ,
 Suspend: UNEXPOSED.Δ,
 Resume: UNEXPOSED.Δ
});

var IInternetProtocolVtbl = new StructT('IInternetProtocolVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Start: UNEXPOSED.Δ,
 Continue: UNEXPOSED.Δ,
 Abort: UNEXPOSED.Δ,
 Terminate: UNEXPOSED.Δ,
 Suspend: UNEXPOSED.Δ,
 Resume: UNEXPOSED.Δ,
 Read: UNEXPOSED.Δ,
 Seek: UNEXPOSED.Δ,
 LockRequest: UNEXPOSED.Δ,
 UnlockRequest: UNEXPOSED.Δ
});

var IInternetProtocolExVtbl = new StructT('IInternetProtocolExVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Start: UNEXPOSED.Δ,
 Continue: UNEXPOSED.Δ,
 Abort: UNEXPOSED.Δ,
 Terminate: UNEXPOSED.Δ,
 Suspend: UNEXPOSED.Δ,
 Resume: UNEXPOSED.Δ,
 Read: UNEXPOSED.Δ,
 Seek: UNEXPOSED.Δ,
 LockRequest: UNEXPOSED.Δ,
 UnlockRequest: UNEXPOSED.Δ,
 StartEx: UNEXPOSED.Δ
});

var IInternetProtocolSinkVtbl = new StructT('IInternetProtocolSinkVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Switch: UNEXPOSED.Δ,
 ReportProgress: UNEXPOSED.Δ,
 ReportData: UNEXPOSED.Δ,
 ReportResult: UNEXPOSED.Δ
});

var IInternetProtocolSinkStackableVtbl = new StructT('IInternetProtocolSinkStackableVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 SwitchSink: UNEXPOSED.Δ,
 CommitSwitch: UNEXPOSED.Δ,
 RollbackSwitch: UNEXPOSED.Δ
});

var IInternetSessionVtbl = new StructT('IInternetSessionVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 RegisterNameSpace: UNEXPOSED.Δ,
 UnregisterNameSpace: UNEXPOSED.Δ,
 RegisterMimeFilter: UNEXPOSED.Δ,
 UnregisterMimeFilter: UNEXPOSED.Δ,
 CreateBinding: UNEXPOSED.Δ,
 SetSessionOption: UNEXPOSED.Δ,
 GetSessionOption: UNEXPOSED.Δ
});

var IInternetThreadSwitchVtbl = new StructT('IInternetThreadSwitchVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Prepare: UNEXPOSED.Δ,
 Continue: UNEXPOSED.Δ
});

var IInternetPriorityVtbl = new StructT('IInternetPriorityVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 SetPriority: UNEXPOSED.Δ,
 GetPriority: UNEXPOSED.Δ
});

var IInternetProtocolInfoVtbl = new StructT('IInternetProtocolInfoVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 ParseUrl: UNEXPOSED.Δ,
 CombineUrl: UNEXPOSED.Δ,
 CompareUrl: UNEXPOSED.Δ,
 QueryInfo: UNEXPOSED.Δ
});

var IInternetSecurityMgrSiteVtbl = new StructT('IInternetSecurityMgrSiteVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetWindow: UNEXPOSED.Δ,
 EnableModeless: UNEXPOSED.Δ
});

var IInternetSecurityManagerVtbl = new StructT('IInternetSecurityManagerVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 SetSecuritySite: UNEXPOSED.Δ,
 GetSecuritySite: UNEXPOSED.Δ,
 MapUrlToZone: UNEXPOSED.Δ,
 GetSecurityId: UNEXPOSED.Δ,
 ProcessUrlAction: UNEXPOSED.Δ,
 QueryCustomPolicy: UNEXPOSED.Δ,
 SetZoneMapping: UNEXPOSED.Δ,
 GetZoneMappings: UNEXPOSED.Δ
});

var IInternetSecurityManagerExVtbl = new StructT('IInternetSecurityManagerExVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 SetSecuritySite: UNEXPOSED.Δ,
 GetSecuritySite: UNEXPOSED.Δ,
 MapUrlToZone: UNEXPOSED.Δ,
 GetSecurityId: UNEXPOSED.Δ,
 ProcessUrlAction: UNEXPOSED.Δ,
 QueryCustomPolicy: UNEXPOSED.Δ,
 SetZoneMapping: UNEXPOSED.Δ,
 GetZoneMappings: UNEXPOSED.Δ,
 ProcessUrlActionEx: UNEXPOSED.Δ
});

var IInternetSecurityManagerEx2Vtbl = new StructT('IInternetSecurityManagerEx2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 SetSecuritySite: UNEXPOSED.Δ,
 GetSecuritySite: UNEXPOSED.Δ,
 MapUrlToZone: UNEXPOSED.Δ,
 GetSecurityId: UNEXPOSED.Δ,
 ProcessUrlAction: UNEXPOSED.Δ,
 QueryCustomPolicy: UNEXPOSED.Δ,
 SetZoneMapping: UNEXPOSED.Δ,
 GetZoneMappings: UNEXPOSED.Δ,
 ProcessUrlActionEx: UNEXPOSED.Δ,
 MapUrlToZoneEx2: UNEXPOSED.Δ,
 ProcessUrlActionEx2: UNEXPOSED.Δ,
 GetSecurityIdEx2: UNEXPOSED.Δ,
 QueryCustomPolicyEx2: UNEXPOSED.Δ
});

var IZoneIdentifierVtbl = new StructT('IZoneIdentifierVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetId: UNEXPOSED.Δ,
 SetId: UNEXPOSED.Δ,
 Remove: UNEXPOSED.Δ
});

var IInternetHostSecurityManagerVtbl = new StructT('IInternetHostSecurityManagerVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetSecurityId: UNEXPOSED.Δ,
 ProcessUrlAction: UNEXPOSED.Δ,
 QueryCustomPolicy: UNEXPOSED.Δ
});

var _ZONEATTRIBUTES = new StructT('_ZONEATTRIBUTES', {
 cbSize: ULONG,
 szDisplayName: ARRAY(WCHAR,  260 ),
 szDescription: ARRAY(WCHAR,  200 ),
 szIconPath: ARRAY(WCHAR,  260 ),
 dwTemplateMinLevel: DWORD,
 dwTemplateRecommended: DWORD,
 dwTemplateCurrentLevel: DWORD,
 dwFlags: DWORD
});

var IInternetZoneManagerVtbl = new StructT('IInternetZoneManagerVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetZoneAttributes: UNEXPOSED.Δ,
 SetZoneAttributes: UNEXPOSED.Δ,
 GetZoneCustomPolicy: UNEXPOSED.Δ,
 SetZoneCustomPolicy: UNEXPOSED.Δ,
 GetZoneActionPolicy: UNEXPOSED.Δ,
 SetZoneActionPolicy: UNEXPOSED.Δ,
 PromptAction: UNEXPOSED.Δ,
 LogAction: UNEXPOSED.Δ,
 CreateZoneEnumerator: UNEXPOSED.Δ,
 GetZoneAt: UNEXPOSED.Δ,
 DestroyZoneEnumerator: UNEXPOSED.Δ,
 CopyTemplatePoliciesToZone: UNEXPOSED.Δ
});

var IInternetZoneManagerExVtbl = new StructT('IInternetZoneManagerExVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetZoneAttributes: UNEXPOSED.Δ,
 SetZoneAttributes: UNEXPOSED.Δ,
 GetZoneCustomPolicy: UNEXPOSED.Δ,
 SetZoneCustomPolicy: UNEXPOSED.Δ,
 GetZoneActionPolicy: UNEXPOSED.Δ,
 SetZoneActionPolicy: UNEXPOSED.Δ,
 PromptAction: UNEXPOSED.Δ,
 LogAction: UNEXPOSED.Δ,
 CreateZoneEnumerator: UNEXPOSED.Δ,
 GetZoneAt: UNEXPOSED.Δ,
 DestroyZoneEnumerator: UNEXPOSED.Δ,
 CopyTemplatePoliciesToZone: UNEXPOSED.Δ,
 GetZoneActionPolicyEx: UNEXPOSED.Δ,
 SetZoneActionPolicyEx: UNEXPOSED.Δ
});

var IInternetZoneManagerEx2Vtbl = new StructT('IInternetZoneManagerEx2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetZoneAttributes: UNEXPOSED.Δ,
 SetZoneAttributes: UNEXPOSED.Δ,
 GetZoneCustomPolicy: UNEXPOSED.Δ,
 SetZoneCustomPolicy: UNEXPOSED.Δ,
 GetZoneActionPolicy: UNEXPOSED.Δ,
 SetZoneActionPolicy: UNEXPOSED.Δ,
 PromptAction: UNEXPOSED.Δ,
 LogAction: UNEXPOSED.Δ,
 CreateZoneEnumerator: UNEXPOSED.Δ,
 GetZoneAt: UNEXPOSED.Δ,
 DestroyZoneEnumerator: UNEXPOSED.Δ,
 CopyTemplatePoliciesToZone: UNEXPOSED.Δ,
 GetZoneActionPolicyEx: UNEXPOSED.Δ,
 SetZoneActionPolicyEx: UNEXPOSED.Δ,
 GetZoneAttributesEx: UNEXPOSED.Δ,
 GetZoneSecurityState: UNEXPOSED.Δ,
 GetIESecurityState: UNEXPOSED.Δ,
 FixUnsecureSettings: UNEXPOSED.Δ
});

var _tagCODEBASEHOLD = new StructT('_tagCODEBASEHOLD', {
 cbSize: ULONG,
 szDistUnit: LPWSTR,
 szCodeBase: LPWSTR,
 dwVersionMS: DWORD,
 dwVersionLS: DWORD,
 dwStyle: DWORD
});

var _tagSOFTDISTINFO = new StructT('_tagSOFTDISTINFO', {
 cbSize: ULONG,
 dwFlags: DWORD,
 dwAdState: DWORD,
 szTitle: LPWSTR,
 szAbstract: LPWSTR,
 szHREF: LPWSTR,
 dwInstalledVersionMS: DWORD,
 dwInstalledVersionLS: DWORD,
 dwUpdateVersionMS: DWORD,
 dwUpdateVersionLS: DWORD,
 dwAdvertisedVersionMS: DWORD,
 dwAdvertisedVersionLS: DWORD,
 dwReserved: DWORD
});

var ISoftDistExtVtbl = new StructT('ISoftDistExtVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 ProcessSoftDist: UNEXPOSED.Δ,
 GetFirstCodeBase: UNEXPOSED.Δ,
 GetNextCodeBase: UNEXPOSED.Δ,
 AsyncInstallDistributionUnit: UNEXPOSED.Δ
});

var ICatalogFileInfoVtbl = new StructT('ICatalogFileInfoVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetCatalogFile: UNEXPOSED.Δ,
 GetJavaTrust: UNEXPOSED.Δ
});

var IDataFilterVtbl = new StructT('IDataFilterVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 DoEncode: UNEXPOSED.Δ,
 DoDecode: UNEXPOSED.Δ,
 SetEncodingLevel: UNEXPOSED.Δ
});

var _tagPROTOCOLFILTERDATA = new StructT('_tagPROTOCOLFILTERDATA', {
 cbSize: DWORD,
 pProtocolSink: uint.Δ,
 pProtocol: uint.Δ,
 pUnk: uint.Δ,
 dwFilterFlags: DWORD
});

var _tagDATAINFO = new StructT('_tagDATAINFO', {
 ulTotalSize: ULONG,
 ulavrPacketSize: ULONG,
 ulConnectSpeed: ULONG,
 ulProcessorSpeed: ULONG
});

var IEncodingFilterFactoryVtbl = new StructT('IEncodingFilterFactoryVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 FindBestFilter: UNEXPOSED.Δ,
 GetDefaultFilter: UNEXPOSED.Δ
});

var _tagHIT_LOGGING_INFO = new StructT('_tagHIT_LOGGING_INFO', {
 dwStructSize: DWORD,
 lpszLoggedUrlName: LPSTR,
 StartTime: SYSTEMTIME,
 EndTime: SYSTEMTIME,
 lpszExtendedInfo: LPSTR
});

var CONFIRMSAFETY = new StructT('CONFIRMSAFETY', {
 clsid: CLSID,
 pUnk: uint.Δ,
 dwFlags: DWORD
});

var IWrappedProtocolVtbl = new StructT('IWrappedProtocolVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetWrapperCode: UNEXPOSED.Δ
});

var IPropertyStorage = new StructT('IPropertyStorage', {
 lpVtbl: IPropertyStorageVtbl.Δ
});

var IPropertySetStorage = new StructT('IPropertySetStorage', {
 lpVtbl: IPropertySetStorageVtbl.Δ
});

var IEnumSTATPROPSTG = new StructT('IEnumSTATPROPSTG', {
 lpVtbl: IEnumSTATPROPSTGVtbl.Δ
});

var IEnumSTATPROPSETSTG = new StructT('IEnumSTATPROPSETSTG', {
 lpVtbl: IEnumSTATPROPSETSTGVtbl.Δ
});

var tagVersionedStream = new StructT('tagVersionedStream', {
 guidVersion: GUID,
 pStream: uint.Δ
});


var tagCAC = new StructT('tagCAC', {
 cElems: ULONG,
 pElems: int8.Δ
});

var tagCAUB = new StructT('tagCAUB', {
 cElems: ULONG,
 pElems: uchar.Δ
});

var tagCAI = new StructT('tagCAI', {
 cElems: ULONG,
 pElems: short.Δ
});

var tagCAUI = new StructT('tagCAUI', {
 cElems: ULONG,
 pElems: ushort.Δ
});

var tagCAL = new StructT('tagCAL', {
 cElems: ULONG,
 pElems: long.Δ
});

var tagCAUL = new StructT('tagCAUL', {
 cElems: ULONG,
 pElems: ulong.Δ
});

var tagCAFLT = new StructT('tagCAFLT', {
 cElems: ULONG,
 pElems: float.Δ
});

var tagCADBL = new StructT('tagCADBL', {
 cElems: ULONG,
 pElems: double.Δ
});

var tagCACY = new StructT('tagCACY', {
 cElems: ULONG,
 pElems: uint.Δ
});

var tagCADATE = new StructT('tagCADATE', {
 cElems: ULONG,
 pElems: double.Δ
});

var tagCABSTR = new StructT('tagCABSTR', {
 cElems: ULONG,
 pElems: ushort.Δ.Δ
});

var tagCABSTRBLOB = new StructT('tagCABSTRBLOB', {
 cElems: ULONG,
 pElems: uint.Δ
});

var tagCABOOL = new StructT('tagCABOOL', {
 cElems: ULONG,
 pElems: short.Δ
});

var tagCASCODE = new StructT('tagCASCODE', {
 cElems: ULONG,
 pElems: long.Δ
});

var tagCAPROPVARIANT = new StructT('tagCAPROPVARIANT', {
 cElems: ULONG,
 pElems: uint.Δ
});

var tagCAH = new StructT('tagCAH', {
 cElems: ULONG,
 pElems: uint.Δ
});

var tagCAUH = new StructT('tagCAUH', {
 cElems: ULONG,
 pElems: uint.Δ
});

var tagCALPSTR = new StructT('tagCALPSTR', {
 cElems: ULONG,
 pElems: int8.Δ.Δ
});

var tagCALPWSTR = new StructT('tagCALPWSTR', {
 cElems: ULONG,
 pElems: ushort.Δ.Δ
});

var tagCAFILETIME = new StructT('tagCAFILETIME', {
 cElems: ULONG,
 pElems: uint.Δ
});

var tagCACLIPDATA = new StructT('tagCACLIPDATA', {
 cElems: ULONG,
 pElems: uint.Δ
});

var tagCACLSID = new StructT('tagCACLSID', {
 cElems: ULONG,
 pElems: uint.Δ
});

var undefined = new StructT('undefined', {
 vt: VARTYPE,
 wReserved1: PROPVAR_PAD1,
 wReserved2: PROPVAR_PAD2,
 wReserved3: PROPVAR_PAD3
});

var tagPROPSPEC = new StructT('tagPROPSPEC', {
 ulKind: ULONG
});

var tagSTATPROPSTG = new StructT('tagSTATPROPSTG', {
 lpwstrName: LPOLESTR,
 propid: PROPID,
 vt: VARTYPE
});

var tagSTATPROPSETSTG = new StructT('tagSTATPROPSETSTG', {
 fmtid: FMTID,
 clsid: CLSID,
 grfFlags: DWORD,
 mtime: FILETIME,
 ctime: FILETIME,
 atime: FILETIME,
 dwOSVersion: DWORD
});

var IPropertyStorageVtbl = new StructT('IPropertyStorageVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 ReadMultiple: UNEXPOSED.Δ,
 WriteMultiple: UNEXPOSED.Δ,
 DeleteMultiple: UNEXPOSED.Δ,
 ReadPropertyNames: UNEXPOSED.Δ,
 WritePropertyNames: UNEXPOSED.Δ,
 DeletePropertyNames: UNEXPOSED.Δ,
 Commit: UNEXPOSED.Δ,
 Revert: UNEXPOSED.Δ,
 Enum: UNEXPOSED.Δ,
 SetTimes: UNEXPOSED.Δ,
 SetClass: UNEXPOSED.Δ,
 Stat: UNEXPOSED.Δ
});

var IPropertySetStorageVtbl = new StructT('IPropertySetStorageVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Create: UNEXPOSED.Δ,
 Open: UNEXPOSED.Δ,
 Delete: UNEXPOSED.Δ,
 Enum: UNEXPOSED.Δ
});

var IEnumSTATPROPSTGVtbl = new StructT('IEnumSTATPROPSTGVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Next: UNEXPOSED.Δ,
 Skip: UNEXPOSED.Δ,
 Reset: UNEXPOSED.Δ,
 Clone: UNEXPOSED.Δ
});

var IEnumSTATPROPSETSTGVtbl = new StructT('IEnumSTATPROPSETSTGVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Next: UNEXPOSED.Δ,
 Skip: UNEXPOSED.Δ,
 Reset: UNEXPOSED.Δ,
 Clone: UNEXPOSED.Δ
});

var tagSERIALIZEDPROPERTYVALUE = new StructT('tagSERIALIZEDPROPERTYVALUE', {
 dwType: DWORD,
 rgb: ARRAY(BYTE, 1)
});

var undefined = new StructT('undefined', {
 cDig: INT,
 dwInFlags: ULONG,
 dwOutFlags: ULONG,
 cchUsed: INT,
 nBaseShift: INT,
 nPwr10: INT
});

var undefined = new StructT('undefined', {
 st: SYSTEMTIME,
 wDayOfYear: USHORT
});

var tagPARAMDATA = new StructT('tagPARAMDATA', {
 szName: ushort.Δ,
 vt: VARTYPE
});

var tagMETHODDATA = new StructT('tagMETHODDATA', {
 szName: ushort.Δ,
 ppdata: uint.Δ,
 dispid: DISPID,
 iMeth: UINT,
 cc: CALLCONV,
 cArgs: UINT,
 wFlags: WORD,
 vtReturn: VARTYPE
});

var tagINTERFACEDATA = new StructT('tagINTERFACEDATA', {
 pmethdata: uint.Δ,
 cMembers: UINT
});

var _OLESTREAM = new StructT('_OLESTREAM', {
 lpstbl: LPOLESTREAMVTBL
});

var _OLESTREAMVTBL = new StructT('_OLESTREAMVTBL', {
 Get: UNEXPOSED.Δ,
 Put: UNEXPOSED.Δ
});

var OPENFILENAME_NT4 = new StructT('OPENFILENAME_NT4', {
 lStructSize: DWORD,
 hwndOwner: HWND,
 hInstance: HINSTANCE,
 lpstrFilter: LPCSTR,
 lpstrCustomFilter: LPSTR,
 nMaxCustFilter: DWORD,
 nFilterIndex: DWORD,
 lpstrFile: LPSTR,
 nMaxFile: DWORD,
 lpstrFileTitle: LPSTR,
 nMaxFileTitle: DWORD,
 lpstrInitialDir: LPCSTR,
 lpstrTitle: LPCSTR,
 Flags: DWORD,
 nFileOffset: WORD,
 nFileExtension: WORD,
 lpstrDefExt: LPCSTR,
 lCustData: LPARAM,
 lpfnHook: LPOFNHOOKPROC,
 lpTemplateName: LPCSTR
});

var tagOFN_NT4W = new StructT('tagOFN_NT4W', {
 lStructSize: DWORD,
 hwndOwner: HWND,
 hInstance: HINSTANCE,
 lpstrFilter: LPCWSTR,
 lpstrCustomFilter: LPWSTR,
 nMaxCustFilter: DWORD,
 nFilterIndex: DWORD,
 lpstrFile: LPWSTR,
 nMaxFile: DWORD,
 lpstrFileTitle: LPWSTR,
 nMaxFileTitle: DWORD,
 lpstrInitialDir: LPCWSTR,
 lpstrTitle: LPCWSTR,
 Flags: DWORD,
 nFileOffset: WORD,
 nFileExtension: WORD,
 lpstrDefExt: LPCWSTR,
 lCustData: LPARAM,
 lpfnHook: LPOFNHOOKPROC,
 lpTemplateName: LPCWSTR
});

var OPENFILENAME = new StructT('OPENFILENAME', {
 lStructSize: DWORD,
 hwndOwner: HWND,
 hInstance: HINSTANCE,
 lpstrFilter: LPCSTR,
 lpstrCustomFilter: LPSTR,
 nMaxCustFilter: DWORD,
 nFilterIndex: DWORD,
 lpstrFile: LPSTR,
 nMaxFile: DWORD,
 lpstrFileTitle: LPSTR,
 nMaxFileTitle: DWORD,
 lpstrInitialDir: LPCSTR,
 lpstrTitle: LPCSTR,
 Flags: DWORD,
 nFileOffset: WORD,
 nFileExtension: WORD,
 lpstrDefExt: LPCSTR,
 lCustData: LPARAM,
 lpfnHook: LPOFNHOOKPROC,
 lpTemplateName: LPCSTR,
 pvReserved: VoidT.Δ,
 dwReserved: DWORD,
 FlagsEx: DWORD
});

var tagOFNW = new StructT('tagOFNW', {
 lStructSize: DWORD,
 hwndOwner: HWND,
 hInstance: HINSTANCE,
 lpstrFilter: LPCWSTR,
 lpstrCustomFilter: LPWSTR,
 nMaxCustFilter: DWORD,
 nFilterIndex: DWORD,
 lpstrFile: LPWSTR,
 nMaxFile: DWORD,
 lpstrFileTitle: LPWSTR,
 nMaxFileTitle: DWORD,
 lpstrInitialDir: LPCWSTR,
 lpstrTitle: LPCWSTR,
 Flags: DWORD,
 nFileOffset: WORD,
 nFileExtension: WORD,
 lpstrDefExt: LPCWSTR,
 lCustData: LPARAM,
 lpfnHook: LPOFNHOOKPROC,
 lpTemplateName: LPCWSTR,
 pvReserved: VoidT.Δ,
 dwReserved: DWORD,
 FlagsEx: DWORD
});

var OFNOTIFY = new StructT('OFNOTIFY', {
 hdr: NMHDR,
 lpOFN: LPOPENFILENAMEA,
 pszFile: LPSTR
});

var _OFNOTIFYW = new StructT('_OFNOTIFYW', {
 hdr: NMHDR,
 lpOFN: LPOPENFILENAMEW,
 pszFile: LPWSTR
});

var OFNOTIFYEX = new StructT('OFNOTIFYEX', {
 hdr: NMHDR,
 lpOFN: LPOPENFILENAMEA,
 psf: LPVOID,
 pidl: LPVOID
});

var _OFNOTIFYEXW = new StructT('_OFNOTIFYEXW', {
 hdr: NMHDR,
 lpOFN: LPOPENFILENAMEW,
 psf: LPVOID,
 pidl: LPVOID
});

var CHOOSECOLOR = new StructT('CHOOSECOLOR', {
 lStructSize: DWORD,
 hwndOwner: HWND,
 hInstance: HWND,
 rgbResult: COLORREF,
 lpCustColors: ulong.Δ,
 Flags: DWORD,
 lCustData: LPARAM,
 lpfnHook: LPCCHOOKPROC,
 lpTemplateName: LPCSTR
});

var tagCHOOSECOLORW = new StructT('tagCHOOSECOLORW', {
 lStructSize: DWORD,
 hwndOwner: HWND,
 hInstance: HWND,
 rgbResult: COLORREF,
 lpCustColors: ulong.Δ,
 Flags: DWORD,
 lCustData: LPARAM,
 lpfnHook: LPCCHOOKPROC,
 lpTemplateName: LPCWSTR
});

var FINDREPLACE = new StructT('FINDREPLACE', {
 lStructSize: DWORD,
 hwndOwner: HWND,
 hInstance: HINSTANCE,
 Flags: DWORD,
 lpstrFindWhat: LPSTR,
 lpstrReplaceWith: LPSTR,
 wFindWhatLen: WORD,
 wReplaceWithLen: WORD,
 lCustData: LPARAM,
 lpfnHook: LPFRHOOKPROC,
 lpTemplateName: LPCSTR
});

var tagFINDREPLACEW = new StructT('tagFINDREPLACEW', {
 lStructSize: DWORD,
 hwndOwner: HWND,
 hInstance: HINSTANCE,
 Flags: DWORD,
 lpstrFindWhat: LPWSTR,
 lpstrReplaceWith: LPWSTR,
 wFindWhatLen: WORD,
 wReplaceWithLen: WORD,
 lCustData: LPARAM,
 lpfnHook: LPFRHOOKPROC,
 lpTemplateName: LPCWSTR
});

var CHOOSEFONT = new StructT('CHOOSEFONT', {
 lStructSize: DWORD,
 hwndOwner: HWND,
 hDC: HDC,
 lpLogFont: LPLOGFONTA,
 iPointSize: INT,
 Flags: DWORD,
 rgbColors: COLORREF,
 lCustData: LPARAM,
 lpfnHook: LPCFHOOKPROC,
 lpTemplateName: LPCSTR,
 hInstance: HINSTANCE,
 lpszStyle: LPSTR,
 nFontType: WORD,
 ___MISSING_ALIGNMENT__: WORD,
 nSizeMin: INT,
 nSizeMax: INT
});

var tagCHOOSEFONTW = new StructT('tagCHOOSEFONTW', {
 lStructSize: DWORD,
 hwndOwner: HWND,
 hDC: HDC,
 lpLogFont: LPLOGFONTW,
 iPointSize: INT,
 Flags: DWORD,
 rgbColors: COLORREF,
 lCustData: LPARAM,
 lpfnHook: LPCFHOOKPROC,
 lpTemplateName: LPCWSTR,
 hInstance: HINSTANCE,
 lpszStyle: LPWSTR,
 nFontType: WORD,
 ___MISSING_ALIGNMENT__: WORD,
 nSizeMin: INT,
 nSizeMax: INT
});

var PRINTDLG = new StructT('PRINTDLG', {
 lStructSize: DWORD,
 hwndOwner: HWND,
 hDevMode: HGLOBAL,
 hDevNames: HGLOBAL,
 hDC: HDC,
 Flags: DWORD,
 nFromPage: WORD,
 nToPage: WORD,
 nMinPage: WORD,
 nMaxPage: WORD,
 nCopies: WORD,
 hInstance: HINSTANCE,
 lCustData: LPARAM,
 lpfnPrintHook: LPPRINTHOOKPROC,
 lpfnSetupHook: LPSETUPHOOKPROC,
 lpPrintTemplateName: LPCSTR,
 lpSetupTemplateName: LPCSTR,
 hPrintTemplate: HGLOBAL,
 hSetupTemplate: HGLOBAL
});

var tagPDW = new StructT('tagPDW', {
 lStructSize: DWORD,
 hwndOwner: HWND,
 hDevMode: HGLOBAL,
 hDevNames: HGLOBAL,
 hDC: HDC,
 Flags: DWORD,
 nFromPage: WORD,
 nToPage: WORD,
 nMinPage: WORD,
 nMaxPage: WORD,
 nCopies: WORD,
 hInstance: HINSTANCE,
 lCustData: LPARAM,
 lpfnPrintHook: LPPRINTHOOKPROC,
 lpfnSetupHook: LPSETUPHOOKPROC,
 lpPrintTemplateName: LPCWSTR,
 lpSetupTemplateName: LPCWSTR,
 hPrintTemplate: HGLOBAL,
 hSetupTemplate: HGLOBAL
});

var IPrintDialogCallback = new StructT('IPrintDialogCallback', {
 lpVtbl: IPrintDialogCallbackVtbl.Δ
});

var IPrintDialogCallbackVtbl = new StructT('IPrintDialogCallbackVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 InitDone: UNEXPOSED.Δ,
 SelectionChange: UNEXPOSED.Δ,
 HandleMessage: UNEXPOSED.Δ
});

var IPrintDialogServices = new StructT('IPrintDialogServices', {
 lpVtbl: IPrintDialogServicesVtbl.Δ
});

var IPrintDialogServicesVtbl = new StructT('IPrintDialogServicesVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetCurrentDevMode: UNEXPOSED.Δ,
 GetCurrentPrinterName: UNEXPOSED.Δ,
 GetCurrentPortName: UNEXPOSED.Δ
});

var tagPRINTPAGERANGE = new StructT('tagPRINTPAGERANGE', {
 nFromPage: DWORD,
 nToPage: DWORD
});

var PRINTDLGEX = new StructT('PRINTDLGEX', {
 lStructSize: DWORD,
 hwndOwner: HWND,
 hDevMode: HGLOBAL,
 hDevNames: HGLOBAL,
 hDC: HDC,
 Flags: DWORD,
 Flags2: DWORD,
 ExclusionFlags: DWORD,
 nPageRanges: DWORD,
 nMaxPageRanges: DWORD,
 lpPageRanges: LPPRINTPAGERANGE,
 nMinPage: DWORD,
 nMaxPage: DWORD,
 nCopies: DWORD,
 hInstance: HINSTANCE,
 lpPrintTemplateName: LPCSTR,
 lpCallback: LPUNKNOWN,
 nPropertyPages: DWORD,
 lphPropertyPages: VOIDPTR.Δ,
 nStartPage: DWORD,
 dwResultAction: DWORD
});

var tagPDEXW = new StructT('tagPDEXW', {
 lStructSize: DWORD,
 hwndOwner: HWND,
 hDevMode: HGLOBAL,
 hDevNames: HGLOBAL,
 hDC: HDC,
 Flags: DWORD,
 Flags2: DWORD,
 ExclusionFlags: DWORD,
 nPageRanges: DWORD,
 nMaxPageRanges: DWORD,
 lpPageRanges: LPPRINTPAGERANGE,
 nMinPage: DWORD,
 nMaxPage: DWORD,
 nCopies: DWORD,
 hInstance: HINSTANCE,
 lpPrintTemplateName: LPCWSTR,
 lpCallback: LPUNKNOWN,
 nPropertyPages: DWORD,
 lphPropertyPages: VOIDPTR.Δ,
 nStartPage: DWORD,
 dwResultAction: DWORD
});

var tagDEVNAMES = new StructT('tagDEVNAMES', {
 wDriverOffset: WORD,
 wDeviceOffset: WORD,
 wOutputOffset: WORD,
 wDefault: WORD
});

var PAGESETUPDLG = new StructT('PAGESETUPDLG', {
 lStructSize: DWORD,
 hwndOwner: HWND,
 hDevMode: HGLOBAL,
 hDevNames: HGLOBAL,
 Flags: DWORD,
 ptPaperSize: POINT,
 rtMinMargin: RECT,
 rtMargin: RECT,
 hInstance: HINSTANCE,
 lCustData: LPARAM,
 lpfnPageSetupHook: LPPAGESETUPHOOK,
 lpfnPagePaintHook: LPPAGEPAINTHOOK,
 lpPageSetupTemplateName: LPCSTR,
 hPageSetupTemplate: HGLOBAL
});

var tagPSDW = new StructT('tagPSDW', {
 lStructSize: DWORD,
 hwndOwner: HWND,
 hDevMode: HGLOBAL,
 hDevNames: HGLOBAL,
 Flags: DWORD,
 ptPaperSize: POINT,
 rtMinMargin: RECT,
 rtMargin: RECT,
 hInstance: HINSTANCE,
 lCustData: LPARAM,
 lpfnPageSetupHook: LPPAGESETUPHOOK,
 lpfnPagePaintHook: LPPAGEPAINTHOOK,
 lpPageSetupTemplateName: LPCWSTR,
 hPageSetupTemplate: HGLOBAL
});

var SERVICE_DESCRIPTION = new StructT('SERVICE_DESCRIPTION', {
 lpDescription: LPSTR
});

var _SERVICE_DESCRIPTIONW = new StructT('_SERVICE_DESCRIPTIONW', {
 lpDescription: LPWSTR
});

var _SC_ACTION = new StructT('_SC_ACTION', {
 Type: SC_ACTION_TYPE,
 Delay: DWORD
});

var SERVICE_FAILURE_ACTIONS = new StructT('SERVICE_FAILURE_ACTIONS', {
 dwResetPeriod: DWORD,
 lpRebootMsg: LPSTR,
 lpCommand: LPSTR,
 cActions: DWORD,
 lpsaActions: uint.Δ
});

var _SERVICE_FAILURE_ACTIONSW = new StructT('_SERVICE_FAILURE_ACTIONSW', {
 dwResetPeriod: DWORD,
 lpRebootMsg: LPWSTR,
 lpCommand: LPWSTR,
 cActions: DWORD,
 lpsaActions: uint.Δ
});

var _SERVICE_DELAYED_AUTO_START_INFO = new StructT('_SERVICE_DELAYED_AUTO_START_INFO', {
 fDelayedAutostart: BOOL
});

var _SERVICE_FAILURE_ACTIONS_FLAG = new StructT('_SERVICE_FAILURE_ACTIONS_FLAG', {
 fFailureActionsOnNonCrashFailures: BOOL
});

var _SERVICE_SID_INFO = new StructT('_SERVICE_SID_INFO', {
 dwServiceSidType: DWORD
});

var SERVICE_REQUIRED_PRIVILEGES_INFO = new StructT('SERVICE_REQUIRED_PRIVILEGES_INFO', {
 pmszRequiredPrivileges: LPSTR
});

var _SERVICE_REQUIRED_PRIVILEGES_INFOW = new StructT('_SERVICE_REQUIRED_PRIVILEGES_INFOW', {
 pmszRequiredPrivileges: LPWSTR
});

var _SERVICE_PRESHUTDOWN_INFO = new StructT('_SERVICE_PRESHUTDOWN_INFO', {
 dwPreshutdownTimeout: DWORD
});

var _SERVICE_TRIGGER_SPECIFIC_DATA_ITEM = new StructT('_SERVICE_TRIGGER_SPECIFIC_DATA_ITEM', {
 dwDataType: DWORD,
 cbData: DWORD,
 pData: PBYTE
});

var _SERVICE_TRIGGER = new StructT('_SERVICE_TRIGGER', {
 dwTriggerType: DWORD,
 dwAction: DWORD,
 pTriggerSubtype: uint.Δ,
 cDataItems: DWORD,
 pDataItems: PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM
});

var _SERVICE_TRIGGER_INFO = new StructT('_SERVICE_TRIGGER_INFO', {
 cTriggers: DWORD,
 pTriggers: PSERVICE_TRIGGER,
 pReserved: PBYTE
});

var _SERVICE_PREFERRED_NODE_INFO = new StructT('_SERVICE_PREFERRED_NODE_INFO', {
 usPreferredNode: USHORT,
 fDelete: BOOLEAN
});

var _SERVICE_TIMECHANGE_INFO = new StructT('_SERVICE_TIMECHANGE_INFO', {
 liNewTime: LARGE_INTEGER,
 liOldTime: LARGE_INTEGER
});

var SC_HANDLE__ = new StructT('SC_HANDLE__', {
 unused: int
});

var SERVICE_STATUS_HANDLE__ = new StructT('SERVICE_STATUS_HANDLE__', {
 unused: int
});

var _SERVICE_STATUS = new StructT('_SERVICE_STATUS', {
 dwServiceType: DWORD,
 dwCurrentState: DWORD,
 dwControlsAccepted: DWORD,
 dwWin32ExitCode: DWORD,
 dwServiceSpecificExitCode: DWORD,
 dwCheckPoint: DWORD,
 dwWaitHint: DWORD
});

var _SERVICE_STATUS_PROCESS = new StructT('_SERVICE_STATUS_PROCESS', {
 dwServiceType: DWORD,
 dwCurrentState: DWORD,
 dwControlsAccepted: DWORD,
 dwWin32ExitCode: DWORD,
 dwServiceSpecificExitCode: DWORD,
 dwCheckPoint: DWORD,
 dwWaitHint: DWORD,
 dwProcessId: DWORD,
 dwServiceFlags: DWORD
});

var ENUM_SERVICE_STATUS = new StructT('ENUM_SERVICE_STATUS', {
 lpServiceName: LPSTR,
 lpDisplayName: LPSTR,
 ServiceStatus: SERVICE_STATUS
});

var _ENUM_SERVICE_STATUSW = new StructT('_ENUM_SERVICE_STATUSW', {
 lpServiceName: LPWSTR,
 lpDisplayName: LPWSTR,
 ServiceStatus: SERVICE_STATUS
});

var ENUM_SERVICE_STATUS_PROCESS = new StructT('ENUM_SERVICE_STATUS_PROCESS', {
 lpServiceName: LPSTR,
 lpDisplayName: LPSTR,
 ServiceStatusProcess: SERVICE_STATUS_PROCESS
});

var _ENUM_SERVICE_STATUS_PROCESSW = new StructT('_ENUM_SERVICE_STATUS_PROCESSW', {
 lpServiceName: LPWSTR,
 lpDisplayName: LPWSTR,
 ServiceStatusProcess: SERVICE_STATUS_PROCESS
});

var QUERY_SERVICE_LOCK_STATUS = new StructT('QUERY_SERVICE_LOCK_STATUS', {
 fIsLocked: DWORD,
 lpLockOwner: LPSTR,
 dwLockDuration: DWORD
});

var _QUERY_SERVICE_LOCK_STATUSW = new StructT('_QUERY_SERVICE_LOCK_STATUSW', {
 fIsLocked: DWORD,
 lpLockOwner: LPWSTR,
 dwLockDuration: DWORD
});

var QUERY_SERVICE_CONFIG = new StructT('QUERY_SERVICE_CONFIG', {
 dwServiceType: DWORD,
 dwStartType: DWORD,
 dwErrorControl: DWORD,
 lpBinaryPathName: LPSTR,
 lpLoadOrderGroup: LPSTR,
 dwTagId: DWORD,
 lpDependencies: LPSTR,
 lpServiceStartName: LPSTR,
 lpDisplayName: LPSTR
});

var _QUERY_SERVICE_CONFIGW = new StructT('_QUERY_SERVICE_CONFIGW', {
 dwServiceType: DWORD,
 dwStartType: DWORD,
 dwErrorControl: DWORD,
 lpBinaryPathName: LPWSTR,
 lpLoadOrderGroup: LPWSTR,
 dwTagId: DWORD,
 lpDependencies: LPWSTR,
 lpServiceStartName: LPWSTR,
 lpDisplayName: LPWSTR
});

var SERVICE_TABLE_ENTRY = new StructT('SERVICE_TABLE_ENTRY', {
 lpServiceName: LPSTR,
 lpServiceProc: LPSERVICE_MAIN_FUNCTIONA
});

var _SERVICE_TABLE_ENTRYW = new StructT('_SERVICE_TABLE_ENTRYW', {
 lpServiceName: LPWSTR,
 lpServiceProc: LPSERVICE_MAIN_FUNCTIONW
});

var _SERVICE_NOTIFY_1 = new StructT('_SERVICE_NOTIFY_1', {
 dwVersion: DWORD,
 pfnNotifyCallback: PFN_SC_NOTIFY_CALLBACK,
 pContext: PVOID,
 dwNotificationStatus: DWORD,
 ServiceStatus: SERVICE_STATUS_PROCESS
});

var SERVICE_NOTIFY = new StructT('SERVICE_NOTIFY', {
 dwVersion: DWORD,
 pfnNotifyCallback: PFN_SC_NOTIFY_CALLBACK,
 pContext: PVOID,
 dwNotificationStatus: DWORD,
 ServiceStatus: SERVICE_STATUS_PROCESS,
 dwNotificationTriggered: DWORD,
 pszServiceNames: LPSTR
});

var SERVICE_NOTIFYW = new StructT('SERVICE_NOTIFYW', {
 dwVersion: DWORD,
 pfnNotifyCallback: PFN_SC_NOTIFY_CALLBACK,
 pContext: PVOID,
 dwNotificationStatus: DWORD,
 ServiceStatus: SERVICE_STATUS_PROCESS,
 dwNotificationTriggered: DWORD,
 pszServiceNames: LPWSTR
});

var SERVICE_CONTROL_STATUS_REASON_PARAMS = new StructT('SERVICE_CONTROL_STATUS_REASON_PARAMS', {
 dwReason: DWORD,
 pszComment: LPSTR,
 ServiceStatus: SERVICE_STATUS_PROCESS
});

var _SERVICE_CONTROL_STATUS_REASON_PARAMSW = new StructT('_SERVICE_CONTROL_STATUS_REASON_PARAMSW', {
 dwReason: DWORD,
 pszComment: LPWSTR,
 ServiceStatus: SERVICE_STATUS_PROCESS
});

var _MODEMDEVCAPS = new StructT('_MODEMDEVCAPS', {
 dwActualSize: DWORD,
 dwRequiredSize: DWORD,
 dwDevSpecificOffset: DWORD,
 dwDevSpecificSize: DWORD,
 dwModemProviderVersion: DWORD,
 dwModemManufacturerOffset: DWORD,
 dwModemManufacturerSize: DWORD,
 dwModemModelOffset: DWORD,
 dwModemModelSize: DWORD,
 dwModemVersionOffset: DWORD,
 dwModemVersionSize: DWORD,
 dwDialOptions: DWORD,
 dwCallSetupFailTimer: DWORD,
 dwInactivityTimeout: DWORD,
 dwSpeakerVolume: DWORD,
 dwSpeakerMode: DWORD,
 dwModemOptions: DWORD,
 dwMaxDTERate: DWORD,
 dwMaxDCERate: DWORD,
 abVariablePortion: ARRAY(BYTE, 1)
});

var _MODEMSETTINGS = new StructT('_MODEMSETTINGS', {
 dwActualSize: DWORD,
 dwRequiredSize: DWORD,
 dwDevSpecificOffset: DWORD,
 dwDevSpecificSize: DWORD,
 dwCallSetupFailTimer: DWORD,
 dwInactivityTimeout: DWORD,
 dwSpeakerVolume: DWORD,
 dwSpeakerMode: DWORD,
 dwPreferredModemOptions: DWORD,
 dwNegotiatedModemOptions: DWORD,
 dwNegotiatedDCERate: DWORD,
 abVariablePortion: ARRAY(BYTE, 1)
});

var HIMC__ = new StructT('HIMC__', {
 unused: int
});

var HIMCC__ = new StructT('HIMCC__', {
 unused: int
});

var tagCOMPOSITIONFORM = new StructT('tagCOMPOSITIONFORM', {
 dwStyle: DWORD,
 ptCurrentPos: POINT,
 rcArea: RECT
});

var tagCANDIDATEFORM = new StructT('tagCANDIDATEFORM', {
 dwIndex: DWORD,
 dwStyle: DWORD,
 ptCurrentPos: POINT,
 rcArea: RECT
});

var tagCANDIDATELIST = new StructT('tagCANDIDATELIST', {
 dwSize: DWORD,
 dwStyle: DWORD,
 dwCount: DWORD,
 dwSelection: DWORD,
 dwPageStart: DWORD,
 dwPageSize: DWORD,
 dwOffset: ARRAY(DWORD, 1)
});

var REGISTERWORD = new StructT('REGISTERWORD', {
 lpReading: LPSTR,
 lpWord: LPSTR
});

var tagREGISTERWORDW = new StructT('tagREGISTERWORDW', {
 lpReading: LPWSTR,
 lpWord: LPWSTR
});

var tagRECONVERTSTRING = new StructT('tagRECONVERTSTRING', {
 dwSize: DWORD,
 dwVersion: DWORD,
 dwStrLen: DWORD,
 dwStrOffset: DWORD,
 dwCompStrLen: DWORD,
 dwCompStrOffset: DWORD,
 dwTargetStrLen: DWORD,
 dwTargetStrOffset: DWORD
});

var STYLEBUF = new StructT('STYLEBUF', {
 dwStyle: DWORD,
 szDescription: ARRAY(CHAR, STYLE_DESCRIPTION_SIZE)
});

var tagSTYLEBUFW = new StructT('tagSTYLEBUFW', {
 dwStyle: DWORD,
 szDescription: ARRAY(WCHAR, STYLE_DESCRIPTION_SIZE)
});

var IMEMENUITEMINFO = new StructT('IMEMENUITEMINFO', {
 cbSize: UINT,
 fType: UINT,
 fState: UINT,
 wID: UINT,
 hbmpChecked: HBITMAP,
 hbmpUnchecked: HBITMAP,
 dwItemData: DWORD,
 szString: ARRAY(CHAR, IMEMENUITEM_STRING_SIZE),
 hbmpItem: HBITMAP
});

var tagIMEMENUITEMINFOW = new StructT('tagIMEMENUITEMINFOW', {
 cbSize: UINT,
 fType: UINT,
 fState: UINT,
 wID: UINT,
 hbmpChecked: HBITMAP,
 hbmpUnchecked: HBITMAP,
 dwItemData: DWORD,
 szString: ARRAY(WCHAR, IMEMENUITEM_STRING_SIZE),
 hbmpItem: HBITMAP
});

var tagIMECHARPOSITION = new StructT('tagIMECHARPOSITION', {
 dwSize: DWORD,
 dwCharPos: DWORD,
 pt: POINT,
 cLineHeight: UINT,
 rcDocument: RECT
});

var IHTMLFiltersCollection = new StructT('IHTMLFiltersCollection', {
 lpVtbl: IHTMLFiltersCollectionVtbl.Δ
});

var IIE70DispatchEx = new StructT('IIE70DispatchEx', {
 lpVtbl: IIE70DispatchExVtbl.Δ
});

var IIE80DispatchEx = new StructT('IIE80DispatchEx', {
 lpVtbl: IIE80DispatchExVtbl.Δ
});

var IHTMLEventObj = new StructT('IHTMLEventObj', {
 lpVtbl: IHTMLEventObjVtbl.Δ
});

var IElementBehaviorSite = new StructT('IElementBehaviorSite', {
 lpVtbl: IElementBehaviorSiteVtbl.Δ
});

var IElementBehavior = new StructT('IElementBehavior', {
 lpVtbl: IElementBehaviorVtbl.Δ
});

var IElementBehaviorFactory = new StructT('IElementBehaviorFactory', {
 lpVtbl: IElementBehaviorFactoryVtbl.Δ
});

var IElementBehaviorSiteOM = new StructT('IElementBehaviorSiteOM', {
 lpVtbl: IElementBehaviorSiteOMVtbl.Δ
});

var IElementBehaviorRender = new StructT('IElementBehaviorRender', {
 lpVtbl: IElementBehaviorRenderVtbl.Δ
});

var IElementBehaviorSiteRender = new StructT('IElementBehaviorSiteRender', {
 lpVtbl: IElementBehaviorSiteRenderVtbl.Δ
});

var IHTMLDOMConstructor = new StructT('IHTMLDOMConstructor', {
 lpVtbl: IHTMLDOMConstructorVtbl.Δ
});

var IHTMLStyle = new StructT('IHTMLStyle', {
 lpVtbl: IHTMLStyleVtbl.Δ
});

var IHTMLStyle2 = new StructT('IHTMLStyle2', {
 lpVtbl: IHTMLStyle2Vtbl.Δ
});

var IHTMLStyle3 = new StructT('IHTMLStyle3', {
 lpVtbl: IHTMLStyle3Vtbl.Δ
});

var IHTMLStyle4 = new StructT('IHTMLStyle4', {
 lpVtbl: IHTMLStyle4Vtbl.Δ
});

var IHTMLStyle5 = new StructT('IHTMLStyle5', {
 lpVtbl: IHTMLStyle5Vtbl.Δ
});

var IHTMLStyle6 = new StructT('IHTMLStyle6', {
 lpVtbl: IHTMLStyle6Vtbl.Δ
});

var IHTMLRuleStyle = new StructT('IHTMLRuleStyle', {
 lpVtbl: IHTMLRuleStyleVtbl.Δ
});

var IHTMLRuleStyle2 = new StructT('IHTMLRuleStyle2', {
 lpVtbl: IHTMLRuleStyle2Vtbl.Δ
});

var IHTMLRuleStyle3 = new StructT('IHTMLRuleStyle3', {
 lpVtbl: IHTMLRuleStyle3Vtbl.Δ
});

var IHTMLRuleStyle4 = new StructT('IHTMLRuleStyle4', {
 lpVtbl: IHTMLRuleStyle4Vtbl.Δ
});

var IHTMLRuleStyle5 = new StructT('IHTMLRuleStyle5', {
 lpVtbl: IHTMLRuleStyle5Vtbl.Δ
});

var IHTMLRuleStyle6 = new StructT('IHTMLRuleStyle6', {
 lpVtbl: IHTMLRuleStyle6Vtbl.Δ
});

var DispHTMLStyle = new StructT('DispHTMLStyle', {
 lpVtbl: DispHTMLStyleVtbl.Δ
});


var DispHTMLRuleStyle = new StructT('DispHTMLRuleStyle', {
 lpVtbl: DispHTMLRuleStyleVtbl.Δ
});


var IHTMLRenderStyle = new StructT('IHTMLRenderStyle', {
 lpVtbl: IHTMLRenderStyleVtbl.Δ
});

var DispHTMLRenderStyle = new StructT('DispHTMLRenderStyle', {
 lpVtbl: DispHTMLRenderStyleVtbl.Δ
});


var IHTMLCurrentStyle = new StructT('IHTMLCurrentStyle', {
 lpVtbl: IHTMLCurrentStyleVtbl.Δ
});

var IHTMLCurrentStyle2 = new StructT('IHTMLCurrentStyle2', {
 lpVtbl: IHTMLCurrentStyle2Vtbl.Δ
});

var IHTMLCurrentStyle3 = new StructT('IHTMLCurrentStyle3', {
 lpVtbl: IHTMLCurrentStyle3Vtbl.Δ
});

var IHTMLCurrentStyle4 = new StructT('IHTMLCurrentStyle4', {
 lpVtbl: IHTMLCurrentStyle4Vtbl.Δ
});

var IHTMLCurrentStyle5 = new StructT('IHTMLCurrentStyle5', {
 lpVtbl: IHTMLCurrentStyle5Vtbl.Δ
});

var DispHTMLCurrentStyle = new StructT('DispHTMLCurrentStyle', {
 lpVtbl: DispHTMLCurrentStyleVtbl.Δ
});


var IHTMLElement = new StructT('IHTMLElement', {
 lpVtbl: IHTMLElementVtbl.Δ
});

var IHTMLRect = new StructT('IHTMLRect', {
 lpVtbl: IHTMLRectVtbl.Δ
});

var IHTMLRectCollection = new StructT('IHTMLRectCollection', {
 lpVtbl: IHTMLRectCollectionVtbl.Δ
});

var IHTMLElementCollection = new StructT('IHTMLElementCollection', {
 lpVtbl: IHTMLElementCollectionVtbl.Δ
});

var IHTMLElement2 = new StructT('IHTMLElement2', {
 lpVtbl: IHTMLElement2Vtbl.Δ
});

var IHTMLAttributeCollection3 = new StructT('IHTMLAttributeCollection3', {
 lpVtbl: IHTMLAttributeCollection3Vtbl.Δ
});

var IHTMLDOMNode = new StructT('IHTMLDOMNode', {
 lpVtbl: IHTMLDOMNodeVtbl.Δ
});

var IHTMLDOMNode2 = new StructT('IHTMLDOMNode2', {
 lpVtbl: IHTMLDOMNode2Vtbl.Δ
});

var IHTMLDOMAttribute = new StructT('IHTMLDOMAttribute', {
 lpVtbl: IHTMLDOMAttributeVtbl.Δ
});

var IHTMLDOMAttribute2 = new StructT('IHTMLDOMAttribute2', {
 lpVtbl: IHTMLDOMAttribute2Vtbl.Δ
});

var IHTMLDOMAttribute3 = new StructT('IHTMLDOMAttribute3', {
 lpVtbl: IHTMLDOMAttribute3Vtbl.Δ
});

var IHTMLDOMTextNode = new StructT('IHTMLDOMTextNode', {
 lpVtbl: IHTMLDOMTextNodeVtbl.Δ
});

var IHTMLDOMTextNode2 = new StructT('IHTMLDOMTextNode2', {
 lpVtbl: IHTMLDOMTextNode2Vtbl.Δ
});

var IHTMLDOMImplementation = new StructT('IHTMLDOMImplementation', {
 lpVtbl: IHTMLDOMImplementationVtbl.Δ
});

var DispHTMLDOMAttribute = new StructT('DispHTMLDOMAttribute', {
 lpVtbl: DispHTMLDOMAttributeVtbl.Δ
});


var DispHTMLDOMTextNode = new StructT('DispHTMLDOMTextNode', {
 lpVtbl: DispHTMLDOMTextNodeVtbl.Δ
});


var DispHTMLDOMImplementation = new StructT('DispHTMLDOMImplementation', {
 lpVtbl: DispHTMLDOMImplementationVtbl.Δ
});


var IHTMLAttributeCollection = new StructT('IHTMLAttributeCollection', {
 lpVtbl: IHTMLAttributeCollectionVtbl.Δ
});

var IHTMLAttributeCollection2 = new StructT('IHTMLAttributeCollection2', {
 lpVtbl: IHTMLAttributeCollection2Vtbl.Δ
});

var IHTMLDOMChildrenCollection = new StructT('IHTMLDOMChildrenCollection', {
 lpVtbl: IHTMLDOMChildrenCollectionVtbl.Δ
});

var DispHTMLAttributeCollection = new StructT('DispHTMLAttributeCollection', {
 lpVtbl: DispHTMLAttributeCollectionVtbl.Δ
});


var DispStaticNodeList = new StructT('DispStaticNodeList', {
 lpVtbl: DispStaticNodeListVtbl.Δ
});


var DispDOMChildrenCollection = new StructT('DispDOMChildrenCollection', {
 lpVtbl: DispDOMChildrenCollectionVtbl.Δ
});


var HTMLElementEvents3 = new StructT('HTMLElementEvents3', {
 lpVtbl: HTMLElementEvents3Vtbl.Δ
});

var HTMLElementEvents2 = new StructT('HTMLElementEvents2', {
 lpVtbl: HTMLElementEvents2Vtbl.Δ
});

var HTMLElementEvents = new StructT('HTMLElementEvents', {
 lpVtbl: HTMLElementEventsVtbl.Δ
});

var IHTMLElement3 = new StructT('IHTMLElement3', {
 lpVtbl: IHTMLElement3Vtbl.Δ
});

var IHTMLElement4 = new StructT('IHTMLElement4', {
 lpVtbl: IHTMLElement4Vtbl.Δ
});

var IElementSelector = new StructT('IElementSelector', {
 lpVtbl: IElementSelectorVtbl.Δ
});

var IHTMLElementRender = new StructT('IHTMLElementRender', {
 lpVtbl: IHTMLElementRenderVtbl.Δ
});

var IHTMLUniqueName = new StructT('IHTMLUniqueName', {
 lpVtbl: IHTMLUniqueNameVtbl.Δ
});

var IHTMLElement5 = new StructT('IHTMLElement5', {
 lpVtbl: IHTMLElement5Vtbl.Δ
});

var IHTMLDatabinding = new StructT('IHTMLDatabinding', {
 lpVtbl: IHTMLDatabindingVtbl.Δ
});

var IHTMLDocument = new StructT('IHTMLDocument', {
 lpVtbl: IHTMLDocumentVtbl.Δ
});

var IHTMLElementDefaults = new StructT('IHTMLElementDefaults', {
 lpVtbl: IHTMLElementDefaultsVtbl.Δ
});

var DispHTMLDefaults = new StructT('DispHTMLDefaults', {
 lpVtbl: DispHTMLDefaultsVtbl.Δ
});


var IHTCDefaultDispatch = new StructT('IHTCDefaultDispatch', {
 lpVtbl: IHTCDefaultDispatchVtbl.Δ
});

var IHTCPropertyBehavior = new StructT('IHTCPropertyBehavior', {
 lpVtbl: IHTCPropertyBehaviorVtbl.Δ
});

var IHTCMethodBehavior = new StructT('IHTCMethodBehavior', {
 lpVtbl: IHTCMethodBehaviorVtbl.Δ
});

var IHTCEventBehavior = new StructT('IHTCEventBehavior', {
 lpVtbl: IHTCEventBehaviorVtbl.Δ
});

var IHTCAttachBehavior = new StructT('IHTCAttachBehavior', {
 lpVtbl: IHTCAttachBehaviorVtbl.Δ
});

var IHTCAttachBehavior2 = new StructT('IHTCAttachBehavior2', {
 lpVtbl: IHTCAttachBehavior2Vtbl.Δ
});

var IHTCDescBehavior = new StructT('IHTCDescBehavior', {
 lpVtbl: IHTCDescBehaviorVtbl.Δ
});

var DispHTCDefaultDispatch = new StructT('DispHTCDefaultDispatch', {
 lpVtbl: DispHTCDefaultDispatchVtbl.Δ
});


var DispHTCPropertyBehavior = new StructT('DispHTCPropertyBehavior', {
 lpVtbl: DispHTCPropertyBehaviorVtbl.Δ
});


var DispHTCMethodBehavior = new StructT('DispHTCMethodBehavior', {
 lpVtbl: DispHTCMethodBehaviorVtbl.Δ
});


var DispHTCEventBehavior = new StructT('DispHTCEventBehavior', {
 lpVtbl: DispHTCEventBehaviorVtbl.Δ
});


var DispHTCAttachBehavior = new StructT('DispHTCAttachBehavior', {
 lpVtbl: DispHTCAttachBehaviorVtbl.Δ
});


var DispHTCDescBehavior = new StructT('DispHTCDescBehavior', {
 lpVtbl: DispHTCDescBehaviorVtbl.Δ
});


var IHTMLUrnCollection = new StructT('IHTMLUrnCollection', {
 lpVtbl: IHTMLUrnCollectionVtbl.Δ
});

var DispHTMLUrnCollection = new StructT('DispHTMLUrnCollection', {
 lpVtbl: DispHTMLUrnCollectionVtbl.Δ
});


var IHTMLGenericElement = new StructT('IHTMLGenericElement', {
 lpVtbl: IHTMLGenericElementVtbl.Δ
});

var DispHTMLGenericElement = new StructT('DispHTMLGenericElement', {
 lpVtbl: DispHTMLGenericElementVtbl.Δ
});


var IHTMLStyleSheetRule = new StructT('IHTMLStyleSheetRule', {
 lpVtbl: IHTMLStyleSheetRuleVtbl.Δ
});

var IHTMLStyleSheetRulesCollection = new StructT('IHTMLStyleSheetRulesCollection', {
 lpVtbl: IHTMLStyleSheetRulesCollectionVtbl.Δ
});

var DispHTMLStyleSheetRule = new StructT('DispHTMLStyleSheetRule', {
 lpVtbl: DispHTMLStyleSheetRuleVtbl.Δ
});


var DispHTMLStyleSheetRulesCollection = new StructT('DispHTMLStyleSheetRulesCollection', {
 lpVtbl: DispHTMLStyleSheetRulesCollectionVtbl.Δ
});


var IHTMLStyleSheetPage = new StructT('IHTMLStyleSheetPage', {
 lpVtbl: IHTMLStyleSheetPageVtbl.Δ
});

var IHTMLStyleSheetPagesCollection = new StructT('IHTMLStyleSheetPagesCollection', {
 lpVtbl: IHTMLStyleSheetPagesCollectionVtbl.Δ
});

var DispHTMLStyleSheetPage = new StructT('DispHTMLStyleSheetPage', {
 lpVtbl: DispHTMLStyleSheetPageVtbl.Δ
});


var DispHTMLStyleSheetPagesCollection = new StructT('DispHTMLStyleSheetPagesCollection', {
 lpVtbl: DispHTMLStyleSheetPagesCollectionVtbl.Δ
});


var IHTMLStyleSheetsCollection = new StructT('IHTMLStyleSheetsCollection', {
 lpVtbl: IHTMLStyleSheetsCollectionVtbl.Δ
});

var IHTMLStyleSheet = new StructT('IHTMLStyleSheet', {
 lpVtbl: IHTMLStyleSheetVtbl.Δ
});

var IHTMLStyleSheet2 = new StructT('IHTMLStyleSheet2', {
 lpVtbl: IHTMLStyleSheet2Vtbl.Δ
});

var IHTMLStyleSheet3 = new StructT('IHTMLStyleSheet3', {
 lpVtbl: IHTMLStyleSheet3Vtbl.Δ
});

var DispHTMLStyleSheet = new StructT('DispHTMLStyleSheet', {
 lpVtbl: DispHTMLStyleSheetVtbl.Δ
});


var DispHTMLStyleSheetsCollection = new StructT('DispHTMLStyleSheetsCollection', {
 lpVtbl: DispHTMLStyleSheetsCollectionVtbl.Δ
});


var HTMLLinkElementEvents2 = new StructT('HTMLLinkElementEvents2', {
 lpVtbl: HTMLLinkElementEvents2Vtbl.Δ
});

var HTMLLinkElementEvents = new StructT('HTMLLinkElementEvents', {
 lpVtbl: HTMLLinkElementEventsVtbl.Δ
});

var IHTMLLinkElement = new StructT('IHTMLLinkElement', {
 lpVtbl: IHTMLLinkElementVtbl.Δ
});

var IHTMLLinkElement2 = new StructT('IHTMLLinkElement2', {
 lpVtbl: IHTMLLinkElement2Vtbl.Δ
});

var IHTMLLinkElement3 = new StructT('IHTMLLinkElement3', {
 lpVtbl: IHTMLLinkElement3Vtbl.Δ
});

var IHTMLLinkElement4 = new StructT('IHTMLLinkElement4', {
 lpVtbl: IHTMLLinkElement4Vtbl.Δ
});

var DispHTMLLinkElement = new StructT('DispHTMLLinkElement', {
 lpVtbl: DispHTMLLinkElementVtbl.Δ
});


var IHTMLTxtRange = new StructT('IHTMLTxtRange', {
 lpVtbl: IHTMLTxtRangeVtbl.Δ
});

var IHTMLTextRangeMetrics = new StructT('IHTMLTextRangeMetrics', {
 lpVtbl: IHTMLTextRangeMetricsVtbl.Δ
});

var IHTMLTextRangeMetrics2 = new StructT('IHTMLTextRangeMetrics2', {
 lpVtbl: IHTMLTextRangeMetrics2Vtbl.Δ
});

var IHTMLTxtRangeCollection = new StructT('IHTMLTxtRangeCollection', {
 lpVtbl: IHTMLTxtRangeCollectionVtbl.Δ
});

var HTMLFormElementEvents2 = new StructT('HTMLFormElementEvents2', {
 lpVtbl: HTMLFormElementEvents2Vtbl.Δ
});

var HTMLFormElementEvents = new StructT('HTMLFormElementEvents', {
 lpVtbl: HTMLFormElementEventsVtbl.Δ
});

var IHTMLFormElement = new StructT('IHTMLFormElement', {
 lpVtbl: IHTMLFormElementVtbl.Δ
});

var IHTMLFormElement2 = new StructT('IHTMLFormElement2', {
 lpVtbl: IHTMLFormElement2Vtbl.Δ
});

var IHTMLFormElement3 = new StructT('IHTMLFormElement3', {
 lpVtbl: IHTMLFormElement3Vtbl.Δ
});

var IHTMLSubmitData = new StructT('IHTMLSubmitData', {
 lpVtbl: IHTMLSubmitDataVtbl.Δ
});

var IHTMLFormElement4 = new StructT('IHTMLFormElement4', {
 lpVtbl: IHTMLFormElement4Vtbl.Δ
});

var DispHTMLFormElement = new StructT('DispHTMLFormElement', {
 lpVtbl: DispHTMLFormElementVtbl.Δ
});


var HTMLControlElementEvents2 = new StructT('HTMLControlElementEvents2', {
 lpVtbl: HTMLControlElementEvents2Vtbl.Δ
});

var HTMLControlElementEvents = new StructT('HTMLControlElementEvents', {
 lpVtbl: HTMLControlElementEventsVtbl.Δ
});

var IHTMLControlElement = new StructT('IHTMLControlElement', {
 lpVtbl: IHTMLControlElementVtbl.Δ
});

var IHTMLTextElement = new StructT('IHTMLTextElement', {
 lpVtbl: IHTMLTextElementVtbl.Δ
});

var DispHTMLTextElement = new StructT('DispHTMLTextElement', {
 lpVtbl: DispHTMLTextElementVtbl.Δ
});


var HTMLTextContainerEvents2 = new StructT('HTMLTextContainerEvents2', {
 lpVtbl: HTMLTextContainerEvents2Vtbl.Δ
});

var HTMLTextContainerEvents = new StructT('HTMLTextContainerEvents', {
 lpVtbl: HTMLTextContainerEventsVtbl.Δ
});

var IHTMLTextContainer = new StructT('IHTMLTextContainer', {
 lpVtbl: IHTMLTextContainerVtbl.Δ
});

var IHTMLControlRange = new StructT('IHTMLControlRange', {
 lpVtbl: IHTMLControlRangeVtbl.Δ
});

var IHTMLControlRange2 = new StructT('IHTMLControlRange2', {
 lpVtbl: IHTMLControlRange2Vtbl.Δ
});

var HTMLImgEvents2 = new StructT('HTMLImgEvents2', {
 lpVtbl: HTMLImgEvents2Vtbl.Δ
});

var HTMLImgEvents = new StructT('HTMLImgEvents', {
 lpVtbl: HTMLImgEventsVtbl.Δ
});

var IHTMLImgElement = new StructT('IHTMLImgElement', {
 lpVtbl: IHTMLImgElementVtbl.Δ
});

var IHTMLImgElement2 = new StructT('IHTMLImgElement2', {
 lpVtbl: IHTMLImgElement2Vtbl.Δ
});

var IHTMLImgElement3 = new StructT('IHTMLImgElement3', {
 lpVtbl: IHTMLImgElement3Vtbl.Δ
});

var IHTMLImageElementFactory = new StructT('IHTMLImageElementFactory', {
 lpVtbl: IHTMLImageElementFactoryVtbl.Δ
});

var DispHTMLImg = new StructT('DispHTMLImg', {
 lpVtbl: DispHTMLImgVtbl.Δ
});



var HTMLXMLHttpRequestEvents = new StructT('HTMLXMLHttpRequestEvents', {
 lpVtbl: HTMLXMLHttpRequestEventsVtbl.Δ
});

var IHTMLXMLHttpRequest = new StructT('IHTMLXMLHttpRequest', {
 lpVtbl: IHTMLXMLHttpRequestVtbl.Δ
});

var IHTMLXMLHttpRequest2 = new StructT('IHTMLXMLHttpRequest2', {
 lpVtbl: IHTMLXMLHttpRequest2Vtbl.Δ
});

var IHTMLXMLHttpRequestFactory = new StructT('IHTMLXMLHttpRequestFactory', {
 lpVtbl: IHTMLXMLHttpRequestFactoryVtbl.Δ
});

var DispHTMLXMLHttpRequest = new StructT('DispHTMLXMLHttpRequest', {
 lpVtbl: DispHTMLXMLHttpRequestVtbl.Δ
});



var IHTMLBodyElement = new StructT('IHTMLBodyElement', {
 lpVtbl: IHTMLBodyElementVtbl.Δ
});

var IHTMLBodyElement2 = new StructT('IHTMLBodyElement2', {
 lpVtbl: IHTMLBodyElement2Vtbl.Δ
});

var IHTMLBodyElement3 = new StructT('IHTMLBodyElement3', {
 lpVtbl: IHTMLBodyElement3Vtbl.Δ
});

var DispHTMLBody = new StructT('DispHTMLBody', {
 lpVtbl: DispHTMLBodyVtbl.Δ
});


var IHTMLFontElement = new StructT('IHTMLFontElement', {
 lpVtbl: IHTMLFontElementVtbl.Δ
});

var DispHTMLFontElement = new StructT('DispHTMLFontElement', {
 lpVtbl: DispHTMLFontElementVtbl.Δ
});


var HTMLAnchorEvents2 = new StructT('HTMLAnchorEvents2', {
 lpVtbl: HTMLAnchorEvents2Vtbl.Δ
});

var HTMLAnchorEvents = new StructT('HTMLAnchorEvents', {
 lpVtbl: HTMLAnchorEventsVtbl.Δ
});

var IHTMLAnchorElement = new StructT('IHTMLAnchorElement', {
 lpVtbl: IHTMLAnchorElementVtbl.Δ
});

var IHTMLAnchorElement2 = new StructT('IHTMLAnchorElement2', {
 lpVtbl: IHTMLAnchorElement2Vtbl.Δ
});

var IHTMLAnchorElement3 = new StructT('IHTMLAnchorElement3', {
 lpVtbl: IHTMLAnchorElement3Vtbl.Δ
});

var DispHTMLAnchorElement = new StructT('DispHTMLAnchorElement', {
 lpVtbl: DispHTMLAnchorElementVtbl.Δ
});


var HTMLLabelEvents2 = new StructT('HTMLLabelEvents2', {
 lpVtbl: HTMLLabelEvents2Vtbl.Δ
});

var HTMLLabelEvents = new StructT('HTMLLabelEvents', {
 lpVtbl: HTMLLabelEventsVtbl.Δ
});

var IHTMLLabelElement = new StructT('IHTMLLabelElement', {
 lpVtbl: IHTMLLabelElementVtbl.Δ
});

var IHTMLLabelElement2 = new StructT('IHTMLLabelElement2', {
 lpVtbl: IHTMLLabelElement2Vtbl.Δ
});

var DispHTMLLabelElement = new StructT('DispHTMLLabelElement', {
 lpVtbl: DispHTMLLabelElementVtbl.Δ
});


var IHTMLListElement = new StructT('IHTMLListElement', {
 lpVtbl: IHTMLListElementVtbl.Δ
});

var IHTMLListElement2 = new StructT('IHTMLListElement2', {
 lpVtbl: IHTMLListElement2Vtbl.Δ
});

var DispHTMLListElement = new StructT('DispHTMLListElement', {
 lpVtbl: DispHTMLListElementVtbl.Δ
});


var IHTMLUListElement = new StructT('IHTMLUListElement', {
 lpVtbl: IHTMLUListElementVtbl.Δ
});

var DispHTMLUListElement = new StructT('DispHTMLUListElement', {
 lpVtbl: DispHTMLUListElementVtbl.Δ
});


var IHTMLOListElement = new StructT('IHTMLOListElement', {
 lpVtbl: IHTMLOListElementVtbl.Δ
});

var DispHTMLOListElement = new StructT('DispHTMLOListElement', {
 lpVtbl: DispHTMLOListElementVtbl.Δ
});


var IHTMLLIElement = new StructT('IHTMLLIElement', {
 lpVtbl: IHTMLLIElementVtbl.Δ
});

var DispHTMLLIElement = new StructT('DispHTMLLIElement', {
 lpVtbl: DispHTMLLIElementVtbl.Δ
});


var IHTMLBlockElement = new StructT('IHTMLBlockElement', {
 lpVtbl: IHTMLBlockElementVtbl.Δ
});

var IHTMLBlockElement2 = new StructT('IHTMLBlockElement2', {
 lpVtbl: IHTMLBlockElement2Vtbl.Δ
});

var IHTMLBlockElement3 = new StructT('IHTMLBlockElement3', {
 lpVtbl: IHTMLBlockElement3Vtbl.Δ
});

var DispHTMLBlockElement = new StructT('DispHTMLBlockElement', {
 lpVtbl: DispHTMLBlockElementVtbl.Δ
});


var IHTMLDivElement = new StructT('IHTMLDivElement', {
 lpVtbl: IHTMLDivElementVtbl.Δ
});

var DispHTMLDivElement = new StructT('DispHTMLDivElement', {
 lpVtbl: DispHTMLDivElementVtbl.Δ
});


var IHTMLDDElement = new StructT('IHTMLDDElement', {
 lpVtbl: IHTMLDDElementVtbl.Δ
});

var DispHTMLDDElement = new StructT('DispHTMLDDElement', {
 lpVtbl: DispHTMLDDElementVtbl.Δ
});


var IHTMLDTElement = new StructT('IHTMLDTElement', {
 lpVtbl: IHTMLDTElementVtbl.Δ
});

var DispHTMLDTElement = new StructT('DispHTMLDTElement', {
 lpVtbl: DispHTMLDTElementVtbl.Δ
});


var IHTMLBRElement = new StructT('IHTMLBRElement', {
 lpVtbl: IHTMLBRElementVtbl.Δ
});

var DispHTMLBRElement = new StructT('DispHTMLBRElement', {
 lpVtbl: DispHTMLBRElementVtbl.Δ
});


var IHTMLDListElement = new StructT('IHTMLDListElement', {
 lpVtbl: IHTMLDListElementVtbl.Δ
});

var DispHTMLDListElement = new StructT('DispHTMLDListElement', {
 lpVtbl: DispHTMLDListElementVtbl.Δ
});


var IHTMLHRElement = new StructT('IHTMLHRElement', {
 lpVtbl: IHTMLHRElementVtbl.Δ
});

var DispHTMLHRElement = new StructT('DispHTMLHRElement', {
 lpVtbl: DispHTMLHRElementVtbl.Δ
});


var IHTMLParaElement = new StructT('IHTMLParaElement', {
 lpVtbl: IHTMLParaElementVtbl.Δ
});

var DispHTMLParaElement = new StructT('DispHTMLParaElement', {
 lpVtbl: DispHTMLParaElementVtbl.Δ
});


var IHTMLElementCollection2 = new StructT('IHTMLElementCollection2', {
 lpVtbl: IHTMLElementCollection2Vtbl.Δ
});

var IHTMLElementCollection3 = new StructT('IHTMLElementCollection3', {
 lpVtbl: IHTMLElementCollection3Vtbl.Δ
});

var IHTMLElementCollection4 = new StructT('IHTMLElementCollection4', {
 lpVtbl: IHTMLElementCollection4Vtbl.Δ
});

var DispHTMLElementCollection = new StructT('DispHTMLElementCollection', {
 lpVtbl: DispHTMLElementCollectionVtbl.Δ
});


var IHTMLHeaderElement = new StructT('IHTMLHeaderElement', {
 lpVtbl: IHTMLHeaderElementVtbl.Δ
});

var DispHTMLHeaderElement = new StructT('DispHTMLHeaderElement', {
 lpVtbl: DispHTMLHeaderElementVtbl.Δ
});


var HTMLSelectElementEvents2 = new StructT('HTMLSelectElementEvents2', {
 lpVtbl: HTMLSelectElementEvents2Vtbl.Δ
});

var HTMLSelectElementEvents = new StructT('HTMLSelectElementEvents', {
 lpVtbl: HTMLSelectElementEventsVtbl.Δ
});

var IHTMLOptionElement = new StructT('IHTMLOptionElement', {
 lpVtbl: IHTMLOptionElementVtbl.Δ
});

var IHTMLSelectElementEx = new StructT('IHTMLSelectElementEx', {
 lpVtbl: IHTMLSelectElementExVtbl.Δ
});

var IHTMLSelectElement = new StructT('IHTMLSelectElement', {
 lpVtbl: IHTMLSelectElementVtbl.Δ
});

var IHTMLSelectElement2 = new StructT('IHTMLSelectElement2', {
 lpVtbl: IHTMLSelectElement2Vtbl.Δ
});

var IHTMLSelectElement4 = new StructT('IHTMLSelectElement4', {
 lpVtbl: IHTMLSelectElement4Vtbl.Δ
});

var IHTMLSelectElement5 = new StructT('IHTMLSelectElement5', {
 lpVtbl: IHTMLSelectElement5Vtbl.Δ
});

var DispHTMLSelectElement = new StructT('DispHTMLSelectElement', {
 lpVtbl: DispHTMLSelectElementVtbl.Δ
});


var DispHTMLWndSelectElement = new StructT('DispHTMLWndSelectElement', {
 lpVtbl: DispHTMLWndSelectElementVtbl.Δ
});


var IHTMLSelectionObject = new StructT('IHTMLSelectionObject', {
 lpVtbl: IHTMLSelectionObjectVtbl.Δ
});

var IHTMLSelectionObject2 = new StructT('IHTMLSelectionObject2', {
 lpVtbl: IHTMLSelectionObject2Vtbl.Δ
});

var IHTMLOptionElement3 = new StructT('IHTMLOptionElement3', {
 lpVtbl: IHTMLOptionElement3Vtbl.Δ
});

var IHTMLOptionElementFactory = new StructT('IHTMLOptionElementFactory', {
 lpVtbl: IHTMLOptionElementFactoryVtbl.Δ
});

var DispHTMLOptionElement = new StructT('DispHTMLOptionElement', {
 lpVtbl: DispHTMLOptionElementVtbl.Δ
});



var DispHTMLWndOptionElement = new StructT('DispHTMLWndOptionElement', {
 lpVtbl: DispHTMLWndOptionElementVtbl.Δ
});


var HTMLButtonElementEvents2 = new StructT('HTMLButtonElementEvents2', {
 lpVtbl: HTMLButtonElementEvents2Vtbl.Δ
});

var HTMLButtonElementEvents = new StructT('HTMLButtonElementEvents', {
 lpVtbl: HTMLButtonElementEventsVtbl.Δ
});

var HTMLInputTextElementEvents2 = new StructT('HTMLInputTextElementEvents2', {
 lpVtbl: HTMLInputTextElementEvents2Vtbl.Δ
});

var HTMLOptionButtonElementEvents2 = new StructT('HTMLOptionButtonElementEvents2', {
 lpVtbl: HTMLOptionButtonElementEvents2Vtbl.Δ
});

var HTMLInputFileElementEvents2 = new StructT('HTMLInputFileElementEvents2', {
 lpVtbl: HTMLInputFileElementEvents2Vtbl.Δ
});

var HTMLInputImageEvents2 = new StructT('HTMLInputImageEvents2', {
 lpVtbl: HTMLInputImageEvents2Vtbl.Δ
});

var HTMLInputTextElementEvents = new StructT('HTMLInputTextElementEvents', {
 lpVtbl: HTMLInputTextElementEventsVtbl.Δ
});

var HTMLOptionButtonElementEvents = new StructT('HTMLOptionButtonElementEvents', {
 lpVtbl: HTMLOptionButtonElementEventsVtbl.Δ
});

var HTMLInputFileElementEvents = new StructT('HTMLInputFileElementEvents', {
 lpVtbl: HTMLInputFileElementEventsVtbl.Δ
});

var HTMLInputImageEvents = new StructT('HTMLInputImageEvents', {
 lpVtbl: HTMLInputImageEventsVtbl.Δ
});

var IHTMLInputElement = new StructT('IHTMLInputElement', {
 lpVtbl: IHTMLInputElementVtbl.Δ
});

var IHTMLInputElement2 = new StructT('IHTMLInputElement2', {
 lpVtbl: IHTMLInputElement2Vtbl.Δ
});

var IHTMLInputElement3 = new StructT('IHTMLInputElement3', {
 lpVtbl: IHTMLInputElement3Vtbl.Δ
});

var IHTMLInputButtonElement = new StructT('IHTMLInputButtonElement', {
 lpVtbl: IHTMLInputButtonElementVtbl.Δ
});

var IHTMLInputHiddenElement = new StructT('IHTMLInputHiddenElement', {
 lpVtbl: IHTMLInputHiddenElementVtbl.Δ
});

var IHTMLInputTextElement = new StructT('IHTMLInputTextElement', {
 lpVtbl: IHTMLInputTextElementVtbl.Δ
});

var IHTMLInputFileElement = new StructT('IHTMLInputFileElement', {
 lpVtbl: IHTMLInputFileElementVtbl.Δ
});

var IHTMLOptionButtonElement = new StructT('IHTMLOptionButtonElement', {
 lpVtbl: IHTMLOptionButtonElementVtbl.Δ
});

var IHTMLInputImage = new StructT('IHTMLInputImage', {
 lpVtbl: IHTMLInputImageVtbl.Δ
});

var DispHTMLInputElement = new StructT('DispHTMLInputElement', {
 lpVtbl: DispHTMLInputElementVtbl.Δ
});


var IHTMLTextAreaElement = new StructT('IHTMLTextAreaElement', {
 lpVtbl: IHTMLTextAreaElementVtbl.Δ
});

var DispHTMLTextAreaElement = new StructT('DispHTMLTextAreaElement', {
 lpVtbl: DispHTMLTextAreaElementVtbl.Δ
});


var DispHTMLRichtextElement = new StructT('DispHTMLRichtextElement', {
 lpVtbl: DispHTMLRichtextElementVtbl.Δ
});


var IHTMLButtonElement = new StructT('IHTMLButtonElement', {
 lpVtbl: IHTMLButtonElementVtbl.Δ
});

var DispHTMLButtonElement = new StructT('DispHTMLButtonElement', {
 lpVtbl: DispHTMLButtonElementVtbl.Δ
});


var HTMLMarqueeElementEvents2 = new StructT('HTMLMarqueeElementEvents2', {
 lpVtbl: HTMLMarqueeElementEvents2Vtbl.Δ
});

var HTMLMarqueeElementEvents = new StructT('HTMLMarqueeElementEvents', {
 lpVtbl: HTMLMarqueeElementEventsVtbl.Δ
});

var IHTMLMarqueeElement = new StructT('IHTMLMarqueeElement', {
 lpVtbl: IHTMLMarqueeElementVtbl.Δ
});

var DispHTMLMarqueeElement = new StructT('DispHTMLMarqueeElement', {
 lpVtbl: DispHTMLMarqueeElementVtbl.Δ
});


var IHTMLHtmlElement = new StructT('IHTMLHtmlElement', {
 lpVtbl: IHTMLHtmlElementVtbl.Δ
});

var IHTMLHeadElement = new StructT('IHTMLHeadElement', {
 lpVtbl: IHTMLHeadElementVtbl.Δ
});

var IHTMLHeadElement2 = new StructT('IHTMLHeadElement2', {
 lpVtbl: IHTMLHeadElement2Vtbl.Δ
});

var IHTMLTitleElement = new StructT('IHTMLTitleElement', {
 lpVtbl: IHTMLTitleElementVtbl.Δ
});

var IHTMLMetaElement = new StructT('IHTMLMetaElement', {
 lpVtbl: IHTMLMetaElementVtbl.Δ
});

var IHTMLMetaElement2 = new StructT('IHTMLMetaElement2', {
 lpVtbl: IHTMLMetaElement2Vtbl.Δ
});

var IHTMLMetaElement3 = new StructT('IHTMLMetaElement3', {
 lpVtbl: IHTMLMetaElement3Vtbl.Δ
});

var IHTMLBaseElement = new StructT('IHTMLBaseElement', {
 lpVtbl: IHTMLBaseElementVtbl.Δ
});

var IHTMLBaseElement2 = new StructT('IHTMLBaseElement2', {
 lpVtbl: IHTMLBaseElement2Vtbl.Δ
});

var IHTMLIsIndexElement = new StructT('IHTMLIsIndexElement', {
 lpVtbl: IHTMLIsIndexElementVtbl.Δ
});

var IHTMLIsIndexElement2 = new StructT('IHTMLIsIndexElement2', {
 lpVtbl: IHTMLIsIndexElement2Vtbl.Δ
});

var IHTMLNextIdElement = new StructT('IHTMLNextIdElement', {
 lpVtbl: IHTMLNextIdElementVtbl.Δ
});

var DispHTMLHtmlElement = new StructT('DispHTMLHtmlElement', {
 lpVtbl: DispHTMLHtmlElementVtbl.Δ
});


var DispHTMLHeadElement = new StructT('DispHTMLHeadElement', {
 lpVtbl: DispHTMLHeadElementVtbl.Δ
});


var DispHTMLTitleElement = new StructT('DispHTMLTitleElement', {
 lpVtbl: DispHTMLTitleElementVtbl.Δ
});


var DispHTMLMetaElement = new StructT('DispHTMLMetaElement', {
 lpVtbl: DispHTMLMetaElementVtbl.Δ
});


var DispHTMLBaseElement = new StructT('DispHTMLBaseElement', {
 lpVtbl: DispHTMLBaseElementVtbl.Δ
});


var DispHTMLIsIndexElement = new StructT('DispHTMLIsIndexElement', {
 lpVtbl: DispHTMLIsIndexElementVtbl.Δ
});


var DispHTMLNextIdElement = new StructT('DispHTMLNextIdElement', {
 lpVtbl: DispHTMLNextIdElementVtbl.Δ
});


var IHTMLBaseFontElement = new StructT('IHTMLBaseFontElement', {
 lpVtbl: IHTMLBaseFontElementVtbl.Δ
});

var DispHTMLBaseFontElement = new StructT('DispHTMLBaseFontElement', {
 lpVtbl: DispHTMLBaseFontElementVtbl.Δ
});


var IHTMLUnknownElement = new StructT('IHTMLUnknownElement', {
 lpVtbl: IHTMLUnknownElementVtbl.Δ
});

var DispHTMLUnknownElement = new StructT('DispHTMLUnknownElement', {
 lpVtbl: DispHTMLUnknownElementVtbl.Δ
});


var IOmHistory = new StructT('IOmHistory', {
 lpVtbl: IOmHistoryVtbl.Δ
});

var IHTMLMimeTypesCollection = new StructT('IHTMLMimeTypesCollection', {
 lpVtbl: IHTMLMimeTypesCollectionVtbl.Δ
});

var IHTMLPluginsCollection = new StructT('IHTMLPluginsCollection', {
 lpVtbl: IHTMLPluginsCollectionVtbl.Δ
});

var IHTMLOpsProfile = new StructT('IHTMLOpsProfile', {
 lpVtbl: IHTMLOpsProfileVtbl.Δ
});

var IOmNavigator = new StructT('IOmNavigator', {
 lpVtbl: IOmNavigatorVtbl.Δ
});

var IHTMLLocation = new StructT('IHTMLLocation', {
 lpVtbl: IHTMLLocationVtbl.Δ
});

var DispHTMLHistory = new StructT('DispHTMLHistory', {
 lpVtbl: DispHTMLHistoryVtbl.Δ
});



var DispCPlugins = new StructT('DispCPlugins', {
 lpVtbl: DispCPluginsVtbl.Δ
});



var DispHTMLNavigator = new StructT('DispHTMLNavigator', {
 lpVtbl: DispHTMLNavigatorVtbl.Δ
});


var DispHTMLLocation = new StructT('DispHTMLLocation', {
 lpVtbl: DispHTMLLocationVtbl.Δ
});


var IHTMLBookmarkCollection = new StructT('IHTMLBookmarkCollection', {
 lpVtbl: IHTMLBookmarkCollectionVtbl.Δ
});

var IHTMLDataTransfer = new StructT('IHTMLDataTransfer', {
 lpVtbl: IHTMLDataTransferVtbl.Δ
});

var IHTMLEventObj2 = new StructT('IHTMLEventObj2', {
 lpVtbl: IHTMLEventObj2Vtbl.Δ
});

var IHTMLEventObj3 = new StructT('IHTMLEventObj3', {
 lpVtbl: IHTMLEventObj3Vtbl.Δ
});

var IHTMLEventObj4 = new StructT('IHTMLEventObj4', {
 lpVtbl: IHTMLEventObj4Vtbl.Δ
});

var IHTMLEventObj5 = new StructT('IHTMLEventObj5', {
 lpVtbl: IHTMLEventObj5Vtbl.Δ
});

var DispCEventObj = new StructT('DispCEventObj', {
 lpVtbl: DispCEventObjVtbl.Δ
});


var HTMLWindowEvents3 = new StructT('HTMLWindowEvents3', {
 lpVtbl: HTMLWindowEvents3Vtbl.Δ
});

var HTMLWindowEvents2 = new StructT('HTMLWindowEvents2', {
 lpVtbl: HTMLWindowEvents2Vtbl.Δ
});

var HTMLWindowEvents = new StructT('HTMLWindowEvents', {
 lpVtbl: HTMLWindowEventsVtbl.Δ
});

var IHTMLDocument2 = new StructT('IHTMLDocument2', {
 lpVtbl: IHTMLDocument2Vtbl.Δ
});

var IHTMLFramesCollection2 = new StructT('IHTMLFramesCollection2', {
 lpVtbl: IHTMLFramesCollection2Vtbl.Δ
});

var IHTMLWindow2 = new StructT('IHTMLWindow2', {
 lpVtbl: IHTMLWindow2Vtbl.Δ
});

var IHTMLWindow3 = new StructT('IHTMLWindow3', {
 lpVtbl: IHTMLWindow3Vtbl.Δ
});

var IHTMLFrameBase = new StructT('IHTMLFrameBase', {
 lpVtbl: IHTMLFrameBaseVtbl.Δ
});

var IHTMLStorage = new StructT('IHTMLStorage', {
 lpVtbl: IHTMLStorageVtbl.Δ
});

var IHTMLScreen = new StructT('IHTMLScreen', {
 lpVtbl: IHTMLScreenVtbl.Δ
});

var IHTMLScreen2 = new StructT('IHTMLScreen2', {
 lpVtbl: IHTMLScreen2Vtbl.Δ
});

var IHTMLScreen3 = new StructT('IHTMLScreen3', {
 lpVtbl: IHTMLScreen3Vtbl.Δ
});

var IHTMLWindow4 = new StructT('IHTMLWindow4', {
 lpVtbl: IHTMLWindow4Vtbl.Δ
});

var IHTMLWindow5 = new StructT('IHTMLWindow5', {
 lpVtbl: IHTMLWindow5Vtbl.Δ
});

var IHTMLWindow6 = new StructT('IHTMLWindow6', {
 lpVtbl: IHTMLWindow6Vtbl.Δ
});


var DispHTMLScreen = new StructT('DispHTMLScreen', {
 lpVtbl: DispHTMLScreenVtbl.Δ
});


var DispHTMLWindow2 = new StructT('DispHTMLWindow2', {
 lpVtbl: DispHTMLWindow2Vtbl.Δ
});


var DispHTMLWindowProxy = new StructT('DispHTMLWindowProxy', {
 lpVtbl: DispHTMLWindowProxyVtbl.Δ
});


var IHTMLDocumentCompatibleInfo = new StructT('IHTMLDocumentCompatibleInfo', {
 lpVtbl: IHTMLDocumentCompatibleInfoVtbl.Δ
});

var IHTMLDocumentCompatibleInfoCollection = new StructT('IHTMLDocumentCompatibleInfoCollection', {
 lpVtbl: IHTMLDocumentCompatibleInfoCollectionVtbl.Δ
});

var DispHTMLDocumentCompatibleInfo = new StructT('DispHTMLDocumentCompatibleInfo', {
 lpVtbl: DispHTMLDocumentCompatibleInfoVtbl.Δ
});


var DispHTMLDocumentCompatibleInfoCollection = new StructT('DispHTMLDocumentCompatibleInfoCollection', {
 lpVtbl: DispHTMLDocumentCompatibleInfoCollectionVtbl.Δ
});


var HTMLDocumentEvents3 = new StructT('HTMLDocumentEvents3', {
 lpVtbl: HTMLDocumentEvents3Vtbl.Δ
});

var HTMLDocumentEvents2 = new StructT('HTMLDocumentEvents2', {
 lpVtbl: HTMLDocumentEvents2Vtbl.Δ
});

var HTMLDocumentEvents = new StructT('HTMLDocumentEvents', {
 lpVtbl: HTMLDocumentEventsVtbl.Δ
});

var IHTMLDocument3 = new StructT('IHTMLDocument3', {
 lpVtbl: IHTMLDocument3Vtbl.Δ
});

var IHTMLDocument4 = new StructT('IHTMLDocument4', {
 lpVtbl: IHTMLDocument4Vtbl.Δ
});

var IHTMLDocument5 = new StructT('IHTMLDocument5', {
 lpVtbl: IHTMLDocument5Vtbl.Δ
});

var IHTMLDocument6 = new StructT('IHTMLDocument6', {
 lpVtbl: IHTMLDocument6Vtbl.Δ
});

var IDocumentSelector = new StructT('IDocumentSelector', {
 lpVtbl: IDocumentSelectorVtbl.Δ
});

var DispHTMLDocument = new StructT('DispHTMLDocument', {
 lpVtbl: DispHTMLDocumentVtbl.Δ
});


var DWebBridgeEvents = new StructT('DWebBridgeEvents', {
 lpVtbl: DWebBridgeEventsVtbl.Δ
});

var IWebBridge = new StructT('IWebBridge', {
 lpVtbl: IWebBridgeVtbl.Δ
});

var IWBScriptControl = new StructT('IWBScriptControl', {
 lpVtbl: IWBScriptControlVtbl.Δ
});


var IHTMLEmbedElement = new StructT('IHTMLEmbedElement', {
 lpVtbl: IHTMLEmbedElementVtbl.Δ
});

var IHTMLEmbedElement2 = new StructT('IHTMLEmbedElement2', {
 lpVtbl: IHTMLEmbedElement2Vtbl.Δ
});

var DispHTMLEmbed = new StructT('DispHTMLEmbed', {
 lpVtbl: DispHTMLEmbedVtbl.Δ
});


var HTMLMapEvents2 = new StructT('HTMLMapEvents2', {
 lpVtbl: HTMLMapEvents2Vtbl.Δ
});

var HTMLMapEvents = new StructT('HTMLMapEvents', {
 lpVtbl: HTMLMapEventsVtbl.Δ
});

var IHTMLAreasCollection = new StructT('IHTMLAreasCollection', {
 lpVtbl: IHTMLAreasCollectionVtbl.Δ
});

var IHTMLAreasCollection2 = new StructT('IHTMLAreasCollection2', {
 lpVtbl: IHTMLAreasCollection2Vtbl.Δ
});

var IHTMLAreasCollection3 = new StructT('IHTMLAreasCollection3', {
 lpVtbl: IHTMLAreasCollection3Vtbl.Δ
});

var IHTMLAreasCollection4 = new StructT('IHTMLAreasCollection4', {
 lpVtbl: IHTMLAreasCollection4Vtbl.Δ
});

var IHTMLMapElement = new StructT('IHTMLMapElement', {
 lpVtbl: IHTMLMapElementVtbl.Δ
});

var DispHTMLAreasCollection = new StructT('DispHTMLAreasCollection', {
 lpVtbl: DispHTMLAreasCollectionVtbl.Δ
});


var DispHTMLMapElement = new StructT('DispHTMLMapElement', {
 lpVtbl: DispHTMLMapElementVtbl.Δ
});


var HTMLAreaEvents2 = new StructT('HTMLAreaEvents2', {
 lpVtbl: HTMLAreaEvents2Vtbl.Δ
});

var HTMLAreaEvents = new StructT('HTMLAreaEvents', {
 lpVtbl: HTMLAreaEventsVtbl.Δ
});

var IHTMLAreaElement = new StructT('IHTMLAreaElement', {
 lpVtbl: IHTMLAreaElementVtbl.Δ
});

var IHTMLAreaElement2 = new StructT('IHTMLAreaElement2', {
 lpVtbl: IHTMLAreaElement2Vtbl.Δ
});

var DispHTMLAreaElement = new StructT('DispHTMLAreaElement', {
 lpVtbl: DispHTMLAreaElementVtbl.Δ
});


var IHTMLTableCaption = new StructT('IHTMLTableCaption', {
 lpVtbl: IHTMLTableCaptionVtbl.Δ
});

var DispHTMLTableCaption = new StructT('DispHTMLTableCaption', {
 lpVtbl: DispHTMLTableCaptionVtbl.Δ
});


var IHTMLCommentElement = new StructT('IHTMLCommentElement', {
 lpVtbl: IHTMLCommentElementVtbl.Δ
});

var IHTMLCommentElement2 = new StructT('IHTMLCommentElement2', {
 lpVtbl: IHTMLCommentElement2Vtbl.Δ
});

var DispHTMLCommentElement = new StructT('DispHTMLCommentElement', {
 lpVtbl: DispHTMLCommentElementVtbl.Δ
});


var IHTMLPhraseElement = new StructT('IHTMLPhraseElement', {
 lpVtbl: IHTMLPhraseElementVtbl.Δ
});

var IHTMLPhraseElement2 = new StructT('IHTMLPhraseElement2', {
 lpVtbl: IHTMLPhraseElement2Vtbl.Δ
});

var IHTMLPhraseElement3 = new StructT('IHTMLPhraseElement3', {
 lpVtbl: IHTMLPhraseElement3Vtbl.Δ
});

var IHTMLSpanElement = new StructT('IHTMLSpanElement', {
 lpVtbl: IHTMLSpanElementVtbl.Δ
});

var DispHTMLPhraseElement = new StructT('DispHTMLPhraseElement', {
 lpVtbl: DispHTMLPhraseElementVtbl.Δ
});


var DispHTMLSpanElement = new StructT('DispHTMLSpanElement', {
 lpVtbl: DispHTMLSpanElementVtbl.Δ
});


var HTMLTableEvents2 = new StructT('HTMLTableEvents2', {
 lpVtbl: HTMLTableEvents2Vtbl.Δ
});

var HTMLTableEvents = new StructT('HTMLTableEvents', {
 lpVtbl: HTMLTableEventsVtbl.Δ
});

var IHTMLTableSection = new StructT('IHTMLTableSection', {
 lpVtbl: IHTMLTableSectionVtbl.Δ
});

var IHTMLTable = new StructT('IHTMLTable', {
 lpVtbl: IHTMLTableVtbl.Δ
});

var IHTMLTable2 = new StructT('IHTMLTable2', {
 lpVtbl: IHTMLTable2Vtbl.Δ
});

var IHTMLTable3 = new StructT('IHTMLTable3', {
 lpVtbl: IHTMLTable3Vtbl.Δ
});

var IHTMLTableCol = new StructT('IHTMLTableCol', {
 lpVtbl: IHTMLTableColVtbl.Δ
});

var IHTMLTableCol2 = new StructT('IHTMLTableCol2', {
 lpVtbl: IHTMLTableCol2Vtbl.Δ
});

var IHTMLTableSection2 = new StructT('IHTMLTableSection2', {
 lpVtbl: IHTMLTableSection2Vtbl.Δ
});

var IHTMLTableSection3 = new StructT('IHTMLTableSection3', {
 lpVtbl: IHTMLTableSection3Vtbl.Δ
});

var IHTMLTableRow = new StructT('IHTMLTableRow', {
 lpVtbl: IHTMLTableRowVtbl.Δ
});

var IHTMLTableRow2 = new StructT('IHTMLTableRow2', {
 lpVtbl: IHTMLTableRow2Vtbl.Δ
});

var IHTMLTableRow3 = new StructT('IHTMLTableRow3', {
 lpVtbl: IHTMLTableRow3Vtbl.Δ
});

var IHTMLTableRowMetrics = new StructT('IHTMLTableRowMetrics', {
 lpVtbl: IHTMLTableRowMetricsVtbl.Δ
});

var IHTMLTableCell = new StructT('IHTMLTableCell', {
 lpVtbl: IHTMLTableCellVtbl.Δ
});

var IHTMLTableCell2 = new StructT('IHTMLTableCell2', {
 lpVtbl: IHTMLTableCell2Vtbl.Δ
});

var DispHTMLTable = new StructT('DispHTMLTable', {
 lpVtbl: DispHTMLTableVtbl.Δ
});


var DispHTMLTableCol = new StructT('DispHTMLTableCol', {
 lpVtbl: DispHTMLTableColVtbl.Δ
});


var DispHTMLTableSection = new StructT('DispHTMLTableSection', {
 lpVtbl: DispHTMLTableSectionVtbl.Δ
});


var DispHTMLTableRow = new StructT('DispHTMLTableRow', {
 lpVtbl: DispHTMLTableRowVtbl.Δ
});


var DispHTMLTableCell = new StructT('DispHTMLTableCell', {
 lpVtbl: DispHTMLTableCellVtbl.Δ
});


var HTMLScriptEvents2 = new StructT('HTMLScriptEvents2', {
 lpVtbl: HTMLScriptEvents2Vtbl.Δ
});

var HTMLScriptEvents = new StructT('HTMLScriptEvents', {
 lpVtbl: HTMLScriptEventsVtbl.Δ
});

var IHTMLScriptElement = new StructT('IHTMLScriptElement', {
 lpVtbl: IHTMLScriptElementVtbl.Δ
});

var IHTMLScriptElement2 = new StructT('IHTMLScriptElement2', {
 lpVtbl: IHTMLScriptElement2Vtbl.Δ
});

var IHTMLScriptElement3 = new StructT('IHTMLScriptElement3', {
 lpVtbl: IHTMLScriptElement3Vtbl.Δ
});

var DispHTMLScriptElement = new StructT('DispHTMLScriptElement', {
 lpVtbl: DispHTMLScriptElementVtbl.Δ
});


var IHTMLNoShowElement = new StructT('IHTMLNoShowElement', {
 lpVtbl: IHTMLNoShowElementVtbl.Δ
});

var DispHTMLNoShowElement = new StructT('DispHTMLNoShowElement', {
 lpVtbl: DispHTMLNoShowElementVtbl.Δ
});


var HTMLObjectElementEvents2 = new StructT('HTMLObjectElementEvents2', {
 lpVtbl: HTMLObjectElementEvents2Vtbl.Δ
});

var HTMLObjectElementEvents = new StructT('HTMLObjectElementEvents', {
 lpVtbl: HTMLObjectElementEventsVtbl.Δ
});

var IHTMLObjectElement = new StructT('IHTMLObjectElement', {
 lpVtbl: IHTMLObjectElementVtbl.Δ
});

var IHTMLObjectElement2 = new StructT('IHTMLObjectElement2', {
 lpVtbl: IHTMLObjectElement2Vtbl.Δ
});

var IHTMLObjectElement3 = new StructT('IHTMLObjectElement3', {
 lpVtbl: IHTMLObjectElement3Vtbl.Δ
});

var IHTMLObjectElement4 = new StructT('IHTMLObjectElement4', {
 lpVtbl: IHTMLObjectElement4Vtbl.Δ
});

var IHTMLParamElement = new StructT('IHTMLParamElement', {
 lpVtbl: IHTMLParamElementVtbl.Δ
});

var IHTMLParamElement2 = new StructT('IHTMLParamElement2', {
 lpVtbl: IHTMLParamElement2Vtbl.Δ
});

var DispHTMLObjectElement = new StructT('DispHTMLObjectElement', {
 lpVtbl: DispHTMLObjectElementVtbl.Δ
});


var DispHTMLParamElement = new StructT('DispHTMLParamElement', {
 lpVtbl: DispHTMLParamElementVtbl.Δ
});


var HTMLFrameSiteEvents2 = new StructT('HTMLFrameSiteEvents2', {
 lpVtbl: HTMLFrameSiteEvents2Vtbl.Δ
});

var HTMLFrameSiteEvents = new StructT('HTMLFrameSiteEvents', {
 lpVtbl: HTMLFrameSiteEventsVtbl.Δ
});

var IHTMLFrameBase2 = new StructT('IHTMLFrameBase2', {
 lpVtbl: IHTMLFrameBase2Vtbl.Δ
});

var IHTMLFrameBase3 = new StructT('IHTMLFrameBase3', {
 lpVtbl: IHTMLFrameBase3Vtbl.Δ
});

var DispHTMLFrameBase = new StructT('DispHTMLFrameBase', {
 lpVtbl: DispHTMLFrameBaseVtbl.Δ
});


var IHTMLFrameElement = new StructT('IHTMLFrameElement', {
 lpVtbl: IHTMLFrameElementVtbl.Δ
});

var IHTMLFrameElement2 = new StructT('IHTMLFrameElement2', {
 lpVtbl: IHTMLFrameElement2Vtbl.Δ
});

var IHTMLFrameElement3 = new StructT('IHTMLFrameElement3', {
 lpVtbl: IHTMLFrameElement3Vtbl.Δ
});

var DispHTMLFrameElement = new StructT('DispHTMLFrameElement', {
 lpVtbl: DispHTMLFrameElementVtbl.Δ
});


var IHTMLIFrameElement = new StructT('IHTMLIFrameElement', {
 lpVtbl: IHTMLIFrameElementVtbl.Δ
});

var IHTMLIFrameElement2 = new StructT('IHTMLIFrameElement2', {
 lpVtbl: IHTMLIFrameElement2Vtbl.Δ
});

var IHTMLIFrameElement3 = new StructT('IHTMLIFrameElement3', {
 lpVtbl: IHTMLIFrameElement3Vtbl.Δ
});

var DispHTMLIFrame = new StructT('DispHTMLIFrame', {
 lpVtbl: DispHTMLIFrameVtbl.Δ
});


var IHTMLDivPosition = new StructT('IHTMLDivPosition', {
 lpVtbl: IHTMLDivPositionVtbl.Δ
});

var IHTMLFieldSetElement = new StructT('IHTMLFieldSetElement', {
 lpVtbl: IHTMLFieldSetElementVtbl.Δ
});

var IHTMLFieldSetElement2 = new StructT('IHTMLFieldSetElement2', {
 lpVtbl: IHTMLFieldSetElement2Vtbl.Δ
});

var IHTMLLegendElement = new StructT('IHTMLLegendElement', {
 lpVtbl: IHTMLLegendElementVtbl.Δ
});

var IHTMLLegendElement2 = new StructT('IHTMLLegendElement2', {
 lpVtbl: IHTMLLegendElement2Vtbl.Δ
});

var DispHTMLDivPosition = new StructT('DispHTMLDivPosition', {
 lpVtbl: DispHTMLDivPositionVtbl.Δ
});


var DispHTMLFieldSetElement = new StructT('DispHTMLFieldSetElement', {
 lpVtbl: DispHTMLFieldSetElementVtbl.Δ
});


var DispHTMLLegendElement = new StructT('DispHTMLLegendElement', {
 lpVtbl: DispHTMLLegendElementVtbl.Δ
});


var IHTMLSpanFlow = new StructT('IHTMLSpanFlow', {
 lpVtbl: IHTMLSpanFlowVtbl.Δ
});

var DispHTMLSpanFlow = new StructT('DispHTMLSpanFlow', {
 lpVtbl: DispHTMLSpanFlowVtbl.Δ
});


var IHTMLFrameSetElement = new StructT('IHTMLFrameSetElement', {
 lpVtbl: IHTMLFrameSetElementVtbl.Δ
});

var IHTMLFrameSetElement2 = new StructT('IHTMLFrameSetElement2', {
 lpVtbl: IHTMLFrameSetElement2Vtbl.Δ
});

var DispHTMLFrameSetSite = new StructT('DispHTMLFrameSetSite', {
 lpVtbl: DispHTMLFrameSetSiteVtbl.Δ
});


var IHTMLBGsound = new StructT('IHTMLBGsound', {
 lpVtbl: IHTMLBGsoundVtbl.Δ
});

var DispHTMLBGsound = new StructT('DispHTMLBGsound', {
 lpVtbl: DispHTMLBGsoundVtbl.Δ
});


var IHTMLFontNamesCollection = new StructT('IHTMLFontNamesCollection', {
 lpVtbl: IHTMLFontNamesCollectionVtbl.Δ
});

var IHTMLFontSizesCollection = new StructT('IHTMLFontSizesCollection', {
 lpVtbl: IHTMLFontSizesCollectionVtbl.Δ
});

var IHTMLOptionsHolder = new StructT('IHTMLOptionsHolder', {
 lpVtbl: IHTMLOptionsHolderVtbl.Δ
});

var HTMLStyleElementEvents2 = new StructT('HTMLStyleElementEvents2', {
 lpVtbl: HTMLStyleElementEvents2Vtbl.Δ
});

var HTMLStyleElementEvents = new StructT('HTMLStyleElementEvents', {
 lpVtbl: HTMLStyleElementEventsVtbl.Δ
});

var IHTMLStyleElement = new StructT('IHTMLStyleElement', {
 lpVtbl: IHTMLStyleElementVtbl.Δ
});

var DispHTMLStyleElement = new StructT('DispHTMLStyleElement', {
 lpVtbl: DispHTMLStyleElementVtbl.Δ
});


var IHTMLStyleFontFace = new StructT('IHTMLStyleFontFace', {
 lpVtbl: IHTMLStyleFontFaceVtbl.Δ
});


var IHTMLXDomainRequest = new StructT('IHTMLXDomainRequest', {
 lpVtbl: IHTMLXDomainRequestVtbl.Δ
});

var IHTMLXDomainRequestFactory = new StructT('IHTMLXDomainRequestFactory', {
 lpVtbl: IHTMLXDomainRequestFactoryVtbl.Δ
});

var DispXDomainRequest = new StructT('DispXDomainRequest', {
 lpVtbl: DispXDomainRequestVtbl.Δ
});



var DispHTMLStorage = new StructT('DispHTMLStorage', {
 lpVtbl: DispHTMLStorageVtbl.Δ
});


var ICSSFilterSite = new StructT('ICSSFilterSite', {
 lpVtbl: ICSSFilterSiteVtbl.Δ
});

var IMarkupPointer = new StructT('IMarkupPointer', {
 lpVtbl: IMarkupPointerVtbl.Δ
});

var IMarkupContainer = new StructT('IMarkupContainer', {
 lpVtbl: IMarkupContainerVtbl.Δ
});

var IMarkupContainer2 = new StructT('IMarkupContainer2', {
 lpVtbl: IMarkupContainer2Vtbl.Δ
});

var IHTMLChangeLog = new StructT('IHTMLChangeLog', {
 lpVtbl: IHTMLChangeLogVtbl.Δ
});

var IHTMLChangeSink = new StructT('IHTMLChangeSink', {
 lpVtbl: IHTMLChangeSinkVtbl.Δ
});

var IActiveIMMApp = new StructT('IActiveIMMApp', {
 lpVtbl: IActiveIMMAppVtbl.Δ
});

var ISegmentList = new StructT('ISegmentList', {
 lpVtbl: ISegmentListVtbl.Δ
});

var ISegmentListIterator = new StructT('ISegmentListIterator', {
 lpVtbl: ISegmentListIteratorVtbl.Δ
});

var IHTMLCaret = new StructT('IHTMLCaret', {
 lpVtbl: IHTMLCaretVtbl.Δ
});

var ISegment = new StructT('ISegment', {
 lpVtbl: ISegmentVtbl.Δ
});

var IElementSegment = new StructT('IElementSegment', {
 lpVtbl: IElementSegmentVtbl.Δ
});

var IHighlightSegment = new StructT('IHighlightSegment', {
 lpVtbl: IHighlightSegmentVtbl.Δ
});

var IHighlightRenderingServices = new StructT('IHighlightRenderingServices', {
 lpVtbl: IHighlightRenderingServicesVtbl.Δ
});

var ILineInfo = new StructT('ILineInfo', {
 lpVtbl: ILineInfoVtbl.Δ
});

var IDisplayPointer = new StructT('IDisplayPointer', {
 lpVtbl: IDisplayPointerVtbl.Δ
});

var IDisplayServices = new StructT('IDisplayServices', {
 lpVtbl: IDisplayServicesVtbl.Δ
});

var IHtmlDlgSafeHelper = new StructT('IHtmlDlgSafeHelper', {
 lpVtbl: IHtmlDlgSafeHelperVtbl.Δ
});

var IBlockFormats = new StructT('IBlockFormats', {
 lpVtbl: IBlockFormatsVtbl.Δ
});

var IFontNames = new StructT('IFontNames', {
 lpVtbl: IFontNamesVtbl.Δ
});

var ICSSFilter = new StructT('ICSSFilter', {
 lpVtbl: ICSSFilterVtbl.Δ
});

var ISecureUrlHost = new StructT('ISecureUrlHost', {
 lpVtbl: ISecureUrlHostVtbl.Δ
});

var IMarkupServices = new StructT('IMarkupServices', {
 lpVtbl: IMarkupServicesVtbl.Δ
});

var IMarkupServices2 = new StructT('IMarkupServices2', {
 lpVtbl: IMarkupServices2Vtbl.Δ
});

var IHTMLChangePlayback = new StructT('IHTMLChangePlayback', {
 lpVtbl: IHTMLChangePlaybackVtbl.Δ
});

var IMarkupPointer2 = new StructT('IMarkupPointer2', {
 lpVtbl: IMarkupPointer2Vtbl.Δ
});

var IMarkupTextFrags = new StructT('IMarkupTextFrags', {
 lpVtbl: IMarkupTextFragsVtbl.Δ
});

var IXMLGenericParse = new StructT('IXMLGenericParse', {
 lpVtbl: IXMLGenericParseVtbl.Δ
});

var IHTMLEditHost = new StructT('IHTMLEditHost', {
 lpVtbl: IHTMLEditHostVtbl.Δ
});

var IHTMLEditHost2 = new StructT('IHTMLEditHost2', {
 lpVtbl: IHTMLEditHost2Vtbl.Δ
});

var ISequenceNumber = new StructT('ISequenceNumber', {
 lpVtbl: ISequenceNumberVtbl.Δ
});

var IIMEServices = new StructT('IIMEServices', {
 lpVtbl: IIMEServicesVtbl.Δ
});

var ISelectionServicesListener = new StructT('ISelectionServicesListener', {
 lpVtbl: ISelectionServicesListenerVtbl.Δ
});

var ISelectionServices = new StructT('ISelectionServices', {
 lpVtbl: ISelectionServicesVtbl.Δ
});

var IHTMLEditDesigner = new StructT('IHTMLEditDesigner', {
 lpVtbl: IHTMLEditDesignerVtbl.Δ
});

var IHTMLEditServices = new StructT('IHTMLEditServices', {
 lpVtbl: IHTMLEditServicesVtbl.Δ
});

var IHTMLEditServices2 = new StructT('IHTMLEditServices2', {
 lpVtbl: IHTMLEditServices2Vtbl.Δ
});

var IHTMLComputedStyle = new StructT('IHTMLComputedStyle', {
 lpVtbl: IHTMLComputedStyleVtbl.Δ
});




var HTMLNamespaceEvents = new StructT('HTMLNamespaceEvents', {
 lpVtbl: HTMLNamespaceEventsVtbl.Δ
});

var IHTMLNamespace = new StructT('IHTMLNamespace', {
 lpVtbl: IHTMLNamespaceVtbl.Δ
});

var IHTMLNamespaceCollection = new StructT('IHTMLNamespaceCollection', {
 lpVtbl: IHTMLNamespaceCollectionVtbl.Δ
});

var DispHTMLNamespace = new StructT('DispHTMLNamespace', {
 lpVtbl: DispHTMLNamespaceVtbl.Δ
});


var DispHTMLNamespaceCollection = new StructT('DispHTMLNamespaceCollection', {
 lpVtbl: DispHTMLNamespaceCollectionVtbl.Δ
});


var IHTMLPainter = new StructT('IHTMLPainter', {
 lpVtbl: IHTMLPainterVtbl.Δ
});

var IHTMLPaintSite = new StructT('IHTMLPaintSite', {
 lpVtbl: IHTMLPaintSiteVtbl.Δ
});

var IHTMLPainterEventInfo = new StructT('IHTMLPainterEventInfo', {
 lpVtbl: IHTMLPainterEventInfoVtbl.Δ
});

var IHTMLPainterOverlay = new StructT('IHTMLPainterOverlay', {
 lpVtbl: IHTMLPainterOverlayVtbl.Δ
});

var IHTMLIPrintCollection = new StructT('IHTMLIPrintCollection', {
 lpVtbl: IHTMLIPrintCollectionVtbl.Δ
});

var IEnumPrivacyRecords = new StructT('IEnumPrivacyRecords', {
 lpVtbl: IEnumPrivacyRecordsVtbl.Δ
});

var IWPCBlockedUrls = new StructT('IWPCBlockedUrls', {
 lpVtbl: IWPCBlockedUrlsVtbl.Δ
});

var IHTMLDOMConstructorCollection = new StructT('IHTMLDOMConstructorCollection', {
 lpVtbl: IHTMLDOMConstructorCollectionVtbl.Δ
});

var IHTMLDialog = new StructT('IHTMLDialog', {
 lpVtbl: IHTMLDialogVtbl.Δ
});

var IHTMLDialog2 = new StructT('IHTMLDialog2', {
 lpVtbl: IHTMLDialog2Vtbl.Δ
});

var IHTMLDialog3 = new StructT('IHTMLDialog3', {
 lpVtbl: IHTMLDialog3Vtbl.Δ
});

var IHTMLModelessInit = new StructT('IHTMLModelessInit', {
 lpVtbl: IHTMLModelessInitVtbl.Δ
});



var IHTMLPopup = new StructT('IHTMLPopup', {
 lpVtbl: IHTMLPopupVtbl.Δ
});

var DispHTMLPopup = new StructT('DispHTMLPopup', {
 lpVtbl: DispHTMLPopupVtbl.Δ
});


var IHTMLAppBehavior = new StructT('IHTMLAppBehavior', {
 lpVtbl: IHTMLAppBehaviorVtbl.Δ
});

var IHTMLAppBehavior2 = new StructT('IHTMLAppBehavior2', {
 lpVtbl: IHTMLAppBehavior2Vtbl.Δ
});

var IHTMLAppBehavior3 = new StructT('IHTMLAppBehavior3', {
 lpVtbl: IHTMLAppBehavior3Vtbl.Δ
});

var DispHTMLAppBehavior = new StructT('DispHTMLAppBehavior', {
 lpVtbl: DispHTMLAppBehaviorVtbl.Δ
});




var DispIHTMLInputButtonElement = new StructT('DispIHTMLInputButtonElement', {
 lpVtbl: DispIHTMLInputButtonElementVtbl.Δ
});


var DispIHTMLInputTextElement = new StructT('DispIHTMLInputTextElement', {
 lpVtbl: DispIHTMLInputTextElementVtbl.Δ
});


var DispIHTMLInputFileElement = new StructT('DispIHTMLInputFileElement', {
 lpVtbl: DispIHTMLInputFileElementVtbl.Δ
});


var DispIHTMLOptionButtonElement = new StructT('DispIHTMLOptionButtonElement', {
 lpVtbl: DispIHTMLOptionButtonElementVtbl.Δ
});


var DispIHTMLInputImage = new StructT('DispIHTMLInputImage', {
 lpVtbl: DispIHTMLInputImageVtbl.Δ
});


var IElementNamespace = new StructT('IElementNamespace', {
 lpVtbl: IElementNamespaceVtbl.Δ
});

var IElementNamespaceTable = new StructT('IElementNamespaceTable', {
 lpVtbl: IElementNamespaceTableVtbl.Δ
});

var IElementNamespaceFactory = new StructT('IElementNamespaceFactory', {
 lpVtbl: IElementNamespaceFactoryVtbl.Δ
});

var IElementNamespaceFactory2 = new StructT('IElementNamespaceFactory2', {
 lpVtbl: IElementNamespaceFactory2Vtbl.Δ
});

var IElementNamespaceFactoryCallback = new StructT('IElementNamespaceFactoryCallback', {
 lpVtbl: IElementNamespaceFactoryCallbackVtbl.Δ
});

var IElementBehaviorSiteOM2 = new StructT('IElementBehaviorSiteOM2', {
 lpVtbl: IElementBehaviorSiteOM2Vtbl.Δ
});

var IElementBehaviorCategory = new StructT('IElementBehaviorCategory', {
 lpVtbl: IElementBehaviorCategoryVtbl.Δ
});

var IElementBehaviorSiteCategory = new StructT('IElementBehaviorSiteCategory', {
 lpVtbl: IElementBehaviorSiteCategoryVtbl.Δ
});

var IElementBehaviorSubmit = new StructT('IElementBehaviorSubmit', {
 lpVtbl: IElementBehaviorSubmitVtbl.Δ
});

var IElementBehaviorFocus = new StructT('IElementBehaviorFocus', {
 lpVtbl: IElementBehaviorFocusVtbl.Δ
});

var IElementBehaviorLayout = new StructT('IElementBehaviorLayout', {
 lpVtbl: IElementBehaviorLayoutVtbl.Δ
});

var IElementBehaviorLayout2 = new StructT('IElementBehaviorLayout2', {
 lpVtbl: IElementBehaviorLayout2Vtbl.Δ
});

var IElementBehaviorSiteLayout = new StructT('IElementBehaviorSiteLayout', {
 lpVtbl: IElementBehaviorSiteLayoutVtbl.Δ
});

var IElementBehaviorSiteLayout2 = new StructT('IElementBehaviorSiteLayout2', {
 lpVtbl: IElementBehaviorSiteLayout2Vtbl.Δ
});

var IHostBehaviorInit = new StructT('IHostBehaviorInit', {
 lpVtbl: IHostBehaviorInitVtbl.Δ
});

var IEnumConnections = new StructT('IEnumConnections', {
 lpVtbl: IEnumConnectionsVtbl.Δ
});

var IConnectionPoint = new StructT('IConnectionPoint', {
 lpVtbl: IConnectionPointVtbl.Δ
});

var IEnumConnectionPoints = new StructT('IEnumConnectionPoints', {
 lpVtbl: IEnumConnectionPointsVtbl.Δ
});

var IConnectionPointContainer = new StructT('IConnectionPointContainer', {
 lpVtbl: IConnectionPointContainerVtbl.Δ
});

var IClassFactory2 = new StructT('IClassFactory2', {
 lpVtbl: IClassFactory2Vtbl.Δ
});

var IProvideClassInfo = new StructT('IProvideClassInfo', {
 lpVtbl: IProvideClassInfoVtbl.Δ
});

var IProvideClassInfo2 = new StructT('IProvideClassInfo2', {
 lpVtbl: IProvideClassInfo2Vtbl.Δ
});

var IProvideMultipleClassInfo = new StructT('IProvideMultipleClassInfo', {
 lpVtbl: IProvideMultipleClassInfoVtbl.Δ
});

var IOleControl = new StructT('IOleControl', {
 lpVtbl: IOleControlVtbl.Δ
});

var IOleControlSite = new StructT('IOleControlSite', {
 lpVtbl: IOleControlSiteVtbl.Δ
});

var IPropertyPage = new StructT('IPropertyPage', {
 lpVtbl: IPropertyPageVtbl.Δ
});

var IPropertyPage2 = new StructT('IPropertyPage2', {
 lpVtbl: IPropertyPage2Vtbl.Δ
});

var IPropertyPageSite = new StructT('IPropertyPageSite', {
 lpVtbl: IPropertyPageSiteVtbl.Δ
});

var IPropertyNotifySink = new StructT('IPropertyNotifySink', {
 lpVtbl: IPropertyNotifySinkVtbl.Δ
});

var ISpecifyPropertyPages = new StructT('ISpecifyPropertyPages', {
 lpVtbl: ISpecifyPropertyPagesVtbl.Δ
});

var IPersistMemory = new StructT('IPersistMemory', {
 lpVtbl: IPersistMemoryVtbl.Δ
});

var IPersistStreamInit = new StructT('IPersistStreamInit', {
 lpVtbl: IPersistStreamInitVtbl.Δ
});

var IPersistPropertyBag = new StructT('IPersistPropertyBag', {
 lpVtbl: IPersistPropertyBagVtbl.Δ
});

var ISimpleFrameSite = new StructT('ISimpleFrameSite', {
 lpVtbl: ISimpleFrameSiteVtbl.Δ
});

var IFont = new StructT('IFont', {
 lpVtbl: IFontVtbl.Δ
});

var IPicture = new StructT('IPicture', {
 lpVtbl: IPictureVtbl.Δ
});

var IPicture2 = new StructT('IPicture2', {
 lpVtbl: IPicture2Vtbl.Δ
});

var IFontEventsDisp = new StructT('IFontEventsDisp', {
 lpVtbl: IFontEventsDispVtbl.Δ
});

var IFontDisp = new StructT('IFontDisp', {
 lpVtbl: IFontDispVtbl.Δ
});

var IPictureDisp = new StructT('IPictureDisp', {
 lpVtbl: IPictureDispVtbl.Δ
});

var IOleInPlaceObjectWindowless = new StructT('IOleInPlaceObjectWindowless', {
 lpVtbl: IOleInPlaceObjectWindowlessVtbl.Δ
});

var IOleInPlaceSiteEx = new StructT('IOleInPlaceSiteEx', {
 lpVtbl: IOleInPlaceSiteExVtbl.Δ
});

var IOleInPlaceSiteWindowless = new StructT('IOleInPlaceSiteWindowless', {
 lpVtbl: IOleInPlaceSiteWindowlessVtbl.Δ
});

var IViewObjectEx = new StructT('IViewObjectEx', {
 lpVtbl: IViewObjectExVtbl.Δ
});

var IOleUndoUnit = new StructT('IOleUndoUnit', {
 lpVtbl: IOleUndoUnitVtbl.Δ
});

var IOleParentUndoUnit = new StructT('IOleParentUndoUnit', {
 lpVtbl: IOleParentUndoUnitVtbl.Δ
});

var IEnumOleUndoUnits = new StructT('IEnumOleUndoUnits', {
 lpVtbl: IEnumOleUndoUnitsVtbl.Δ
});

var IOleUndoManager = new StructT('IOleUndoManager', {
 lpVtbl: IOleUndoManagerVtbl.Δ
});

var IPointerInactive = new StructT('IPointerInactive', {
 lpVtbl: IPointerInactiveVtbl.Δ
});

var IObjectWithSite = new StructT('IObjectWithSite', {
 lpVtbl: IObjectWithSiteVtbl.Δ
});

var IPerPropertyBrowsing = new StructT('IPerPropertyBrowsing', {
 lpVtbl: IPerPropertyBrowsingVtbl.Δ
});

var IPropertyBag2 = new StructT('IPropertyBag2', {
 lpVtbl: IPropertyBag2Vtbl.Δ
});

var IPersistPropertyBag2 = new StructT('IPersistPropertyBag2', {
 lpVtbl: IPersistPropertyBag2Vtbl.Δ
});

var IAdviseSinkEx = new StructT('IAdviseSinkEx', {
 lpVtbl: IAdviseSinkExVtbl.Δ
});

var IQuickActivate = new StructT('IQuickActivate', {
 lpVtbl: IQuickActivateVtbl.Δ
});

var tagCONNECTDATA = new StructT('tagCONNECTDATA', {
 pUnk: uint.Δ,
 dwCookie: DWORD
});

var IEnumConnectionsVtbl = new StructT('IEnumConnectionsVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Next: UNEXPOSED.Δ,
 Skip: UNEXPOSED.Δ,
 Reset: UNEXPOSED.Δ,
 Clone: UNEXPOSED.Δ
});

var IConnectionPointVtbl = new StructT('IConnectionPointVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetConnectionInterface: UNEXPOSED.Δ,
 GetConnectionPointContainer: UNEXPOSED.Δ,
 Advise: UNEXPOSED.Δ,
 Unadvise: UNEXPOSED.Δ,
 EnumConnections: UNEXPOSED.Δ
});

var IEnumConnectionPointsVtbl = new StructT('IEnumConnectionPointsVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Next: UNEXPOSED.Δ,
 Skip: UNEXPOSED.Δ,
 Reset: UNEXPOSED.Δ,
 Clone: UNEXPOSED.Δ
});

var IConnectionPointContainerVtbl = new StructT('IConnectionPointContainerVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 EnumConnectionPoints: UNEXPOSED.Δ,
 FindConnectionPoint: UNEXPOSED.Δ
});

var tagLICINFO = new StructT('tagLICINFO', {
 cbLicInfo: LONG,
 fRuntimeKeyAvail: BOOL,
 fLicVerified: BOOL
});

var IClassFactory2Vtbl = new StructT('IClassFactory2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 CreateInstance: UNEXPOSED.Δ,
 LockServer: UNEXPOSED.Δ,
 GetLicInfo: UNEXPOSED.Δ,
 RequestLicKey: UNEXPOSED.Δ,
 CreateInstanceLic: UNEXPOSED.Δ
});

var IProvideClassInfoVtbl = new StructT('IProvideClassInfoVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetClassInfoA: UNEXPOSED.Δ
});

var IProvideClassInfo2Vtbl = new StructT('IProvideClassInfo2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetClassInfoA: UNEXPOSED.Δ,
 GetGUID: UNEXPOSED.Δ
});

var IProvideMultipleClassInfoVtbl = new StructT('IProvideMultipleClassInfoVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetClassInfoA: UNEXPOSED.Δ,
 GetGUID: UNEXPOSED.Δ,
 GetMultiTypeInfoCount: UNEXPOSED.Δ,
 GetInfoOfIndex: UNEXPOSED.Δ
});

var tagCONTROLINFO = new StructT('tagCONTROLINFO', {
 cb: ULONG,
 hAccel: HACCEL,
 cAccel: USHORT,
 dwFlags: DWORD
});

var IOleControlVtbl = new StructT('IOleControlVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetControlInfo: UNEXPOSED.Δ,
 OnMnemonic: UNEXPOSED.Δ,
 OnAmbientPropertyChange: UNEXPOSED.Δ,
 FreezeEvents: UNEXPOSED.Δ
});

var tagPOINTF = new StructT('tagPOINTF', {
 x: FLOAT,
 y: FLOAT
});

var IOleControlSiteVtbl = new StructT('IOleControlSiteVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 OnControlInfoChanged: UNEXPOSED.Δ,
 LockInPlaceActive: UNEXPOSED.Δ,
 GetExtendedControl: UNEXPOSED.Δ,
 TransformCoords: UNEXPOSED.Δ,
 TranslateAcceleratorA: UNEXPOSED.Δ,
 OnFocus: UNEXPOSED.Δ,
 ShowPropertyFrame: UNEXPOSED.Δ
});

var tagPROPPAGEINFO = new StructT('tagPROPPAGEINFO', {
 cb: ULONG,
 pszTitle: LPOLESTR,
 size: SIZE,
 pszDocString: LPOLESTR,
 pszHelpFile: LPOLESTR,
 dwHelpContext: DWORD
});

var IPropertyPageVtbl = new StructT('IPropertyPageVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 SetPageSite: UNEXPOSED.Δ,
 Activate: UNEXPOSED.Δ,
 Deactivate: UNEXPOSED.Δ,
 GetPageInfo: UNEXPOSED.Δ,
 SetObjects: UNEXPOSED.Δ,
 Show: UNEXPOSED.Δ,
 Move: UNEXPOSED.Δ,
 IsPageDirty: UNEXPOSED.Δ,
 Apply: UNEXPOSED.Δ,
 Help: UNEXPOSED.Δ,
 TranslateAcceleratorA: UNEXPOSED.Δ
});

var IPropertyPage2Vtbl = new StructT('IPropertyPage2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 SetPageSite: UNEXPOSED.Δ,
 Activate: UNEXPOSED.Δ,
 Deactivate: UNEXPOSED.Δ,
 GetPageInfo: UNEXPOSED.Δ,
 SetObjects: UNEXPOSED.Δ,
 Show: UNEXPOSED.Δ,
 Move: UNEXPOSED.Δ,
 IsPageDirty: UNEXPOSED.Δ,
 Apply: UNEXPOSED.Δ,
 Help: UNEXPOSED.Δ,
 TranslateAcceleratorA: UNEXPOSED.Δ,
 EditProperty: UNEXPOSED.Δ
});

var IPropertyPageSiteVtbl = new StructT('IPropertyPageSiteVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 OnStatusChange: UNEXPOSED.Δ,
 GetLocaleID: UNEXPOSED.Δ,
 GetPageContainer: UNEXPOSED.Δ,
 TranslateAcceleratorA: UNEXPOSED.Δ
});

var IPropertyNotifySinkVtbl = new StructT('IPropertyNotifySinkVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 OnChanged: UNEXPOSED.Δ,
 OnRequestEdit: UNEXPOSED.Δ
});

var tagCAUUID = new StructT('tagCAUUID', {
 cElems: ULONG,
 pElems: uint.Δ
});

var ISpecifyPropertyPagesVtbl = new StructT('ISpecifyPropertyPagesVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetPages: UNEXPOSED.Δ
});

var IPersistMemoryVtbl = new StructT('IPersistMemoryVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetClassID: UNEXPOSED.Δ,
 IsDirty: UNEXPOSED.Δ,
 Load: UNEXPOSED.Δ,
 Save: UNEXPOSED.Δ,
 GetSizeMax: UNEXPOSED.Δ,
 InitNew: UNEXPOSED.Δ
});

var IPersistStreamInitVtbl = new StructT('IPersistStreamInitVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetClassID: UNEXPOSED.Δ,
 IsDirty: UNEXPOSED.Δ,
 Load: UNEXPOSED.Δ,
 Save: UNEXPOSED.Δ,
 GetSizeMax: UNEXPOSED.Δ,
 InitNew: UNEXPOSED.Δ
});

var IPersistPropertyBagVtbl = new StructT('IPersistPropertyBagVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetClassID: UNEXPOSED.Δ,
 InitNew: UNEXPOSED.Δ,
 Load: UNEXPOSED.Δ,
 Save: UNEXPOSED.Δ
});

var ISimpleFrameSiteVtbl = new StructT('ISimpleFrameSiteVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 PreMessageFilter: UNEXPOSED.Δ,
 PostMessageFilter: UNEXPOSED.Δ
});

var IFontVtbl = new StructT('IFontVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 get_Name: UNEXPOSED.Δ,
 put_Name: UNEXPOSED.Δ,
 get_Size: UNEXPOSED.Δ,
 put_Size: UNEXPOSED.Δ,
 get_Bold: UNEXPOSED.Δ,
 put_Bold: UNEXPOSED.Δ,
 get_Italic: UNEXPOSED.Δ,
 put_Italic: UNEXPOSED.Δ,
 get_Underline: UNEXPOSED.Δ,
 put_Underline: UNEXPOSED.Δ,
 get_Strikethrough: UNEXPOSED.Δ,
 put_Strikethrough: UNEXPOSED.Δ,
 get_Weight: UNEXPOSED.Δ,
 put_Weight: UNEXPOSED.Δ,
 get_Charset: UNEXPOSED.Δ,
 put_Charset: UNEXPOSED.Δ,
 get_hFont: UNEXPOSED.Δ,
 Clone: UNEXPOSED.Δ,
 IsEqual: UNEXPOSED.Δ,
 SetRatio: UNEXPOSED.Δ,
 QueryTextMetrics: UNEXPOSED.Δ,
 AddRefHfont: UNEXPOSED.Δ,
 ReleaseHfont: UNEXPOSED.Δ,
 SetHdc: UNEXPOSED.Δ
});

var IPictureVtbl = new StructT('IPictureVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 get_Handle: UNEXPOSED.Δ,
 get_hPal: UNEXPOSED.Δ,
 get_Type: UNEXPOSED.Δ,
 get_Width: UNEXPOSED.Δ,
 get_Height: UNEXPOSED.Δ,
 Render: UNEXPOSED.Δ,
 set_hPal: UNEXPOSED.Δ,
 get_CurDC: UNEXPOSED.Δ,
 SelectPicture: UNEXPOSED.Δ,
 get_KeepOriginalFormat: UNEXPOSED.Δ,
 put_KeepOriginalFormat: UNEXPOSED.Δ,
 PictureChanged: UNEXPOSED.Δ,
 SaveAsFile: UNEXPOSED.Δ,
 get_Attributes: UNEXPOSED.Δ
});

var IPicture2Vtbl = new StructT('IPicture2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 get_Handle: UNEXPOSED.Δ,
 get_hPal: UNEXPOSED.Δ,
 get_Type: UNEXPOSED.Δ,
 get_Width: UNEXPOSED.Δ,
 get_Height: UNEXPOSED.Δ,
 Render: UNEXPOSED.Δ,
 set_hPal: UNEXPOSED.Δ,
 get_CurDC: UNEXPOSED.Δ,
 SelectPicture: UNEXPOSED.Δ,
 get_KeepOriginalFormat: UNEXPOSED.Δ,
 put_KeepOriginalFormat: UNEXPOSED.Δ,
 PictureChanged: UNEXPOSED.Δ,
 SaveAsFile: UNEXPOSED.Δ,
 get_Attributes: UNEXPOSED.Δ
});

var IFontEventsDispVtbl = new StructT('IFontEventsDispVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IFontDispVtbl = new StructT('IFontDispVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IPictureDispVtbl = new StructT('IPictureDispVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IOleInPlaceObjectWindowlessVtbl = new StructT('IOleInPlaceObjectWindowlessVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetWindow: UNEXPOSED.Δ,
 ContextSensitiveHelp: UNEXPOSED.Δ,
 InPlaceDeactivate: UNEXPOSED.Δ,
 UIDeactivate: UNEXPOSED.Δ,
 SetObjectRects: UNEXPOSED.Δ,
 ReactivateAndUndo: UNEXPOSED.Δ,
 OnWindowMessage: UNEXPOSED.Δ,
 GetDropTarget: UNEXPOSED.Δ
});

var IOleInPlaceSiteExVtbl = new StructT('IOleInPlaceSiteExVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetWindow: UNEXPOSED.Δ,
 ContextSensitiveHelp: UNEXPOSED.Δ,
 CanInPlaceActivate: UNEXPOSED.Δ,
 OnInPlaceActivate: UNEXPOSED.Δ,
 OnUIActivate: UNEXPOSED.Δ,
 GetWindowContext: UNEXPOSED.Δ,
 Scroll: UNEXPOSED.Δ,
 OnUIDeactivate: UNEXPOSED.Δ,
 OnInPlaceDeactivate: UNEXPOSED.Δ,
 DiscardUndoState: UNEXPOSED.Δ,
 DeactivateAndUndo: UNEXPOSED.Δ,
 OnPosRectChange: UNEXPOSED.Δ,
 OnInPlaceActivateEx: UNEXPOSED.Δ,
 OnInPlaceDeactivateEx: UNEXPOSED.Δ,
 RequestUIActivate: UNEXPOSED.Δ
});

var IOleInPlaceSiteWindowlessVtbl = new StructT('IOleInPlaceSiteWindowlessVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetWindow: UNEXPOSED.Δ,
 ContextSensitiveHelp: UNEXPOSED.Δ,
 CanInPlaceActivate: UNEXPOSED.Δ,
 OnInPlaceActivate: UNEXPOSED.Δ,
 OnUIActivate: UNEXPOSED.Δ,
 GetWindowContext: UNEXPOSED.Δ,
 Scroll: UNEXPOSED.Δ,
 OnUIDeactivate: UNEXPOSED.Δ,
 OnInPlaceDeactivate: UNEXPOSED.Δ,
 DiscardUndoState: UNEXPOSED.Δ,
 DeactivateAndUndo: UNEXPOSED.Δ,
 OnPosRectChange: UNEXPOSED.Δ,
 OnInPlaceActivateEx: UNEXPOSED.Δ,
 OnInPlaceDeactivateEx: UNEXPOSED.Δ,
 RequestUIActivate: UNEXPOSED.Δ,
 CanWindowlessActivate: UNEXPOSED.Δ,
 GetCapture: UNEXPOSED.Δ,
 SetCapture: UNEXPOSED.Δ,
 GetFocus: UNEXPOSED.Δ,
 SetFocus: UNEXPOSED.Δ,
 GetDC: UNEXPOSED.Δ,
 ReleaseDC: UNEXPOSED.Δ,
 InvalidateRect: UNEXPOSED.Δ,
 InvalidateRgn: UNEXPOSED.Δ,
 ScrollRect: UNEXPOSED.Δ,
 AdjustRect: UNEXPOSED.Δ,
 OnDefWindowMessage: UNEXPOSED.Δ
});

var tagExtentInfo = new StructT('tagExtentInfo', {
 cb: ULONG,
 dwExtentMode: DWORD,
 sizelProposed: SIZEL
});

var tagAspectInfo = new StructT('tagAspectInfo', {
 cb: ULONG,
 dwFlags: DWORD
});

var IViewObjectExVtbl = new StructT('IViewObjectExVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Draw: UNEXPOSED.Δ,
 GetColorSet: UNEXPOSED.Δ,
 Freeze: UNEXPOSED.Δ,
 Unfreeze: UNEXPOSED.Δ,
 SetAdvise: UNEXPOSED.Δ,
 GetAdvise: UNEXPOSED.Δ,
 GetExtent: UNEXPOSED.Δ,
 GetRect: UNEXPOSED.Δ,
 GetViewStatus: UNEXPOSED.Δ,
 QueryHitPoint: UNEXPOSED.Δ,
 QueryHitRect: UNEXPOSED.Δ,
 GetNaturalExtent: UNEXPOSED.Δ
});

var IOleUndoUnitVtbl = new StructT('IOleUndoUnitVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Do: UNEXPOSED.Δ,
 GetDescription: UNEXPOSED.Δ,
 GetUnitType: UNEXPOSED.Δ,
 OnNextAdd: UNEXPOSED.Δ
});

var IOleParentUndoUnitVtbl = new StructT('IOleParentUndoUnitVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Do: UNEXPOSED.Δ,
 GetDescription: UNEXPOSED.Δ,
 GetUnitType: UNEXPOSED.Δ,
 OnNextAdd: UNEXPOSED.Δ,
 Open: UNEXPOSED.Δ,
 Close: UNEXPOSED.Δ,
 Add: UNEXPOSED.Δ,
 FindUnit: UNEXPOSED.Δ,
 GetParentState: UNEXPOSED.Δ
});

var IEnumOleUndoUnitsVtbl = new StructT('IEnumOleUndoUnitsVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Next: UNEXPOSED.Δ,
 Skip: UNEXPOSED.Δ,
 Reset: UNEXPOSED.Δ,
 Clone: UNEXPOSED.Δ
});

var IOleUndoManagerVtbl = new StructT('IOleUndoManagerVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Open: UNEXPOSED.Δ,
 Close: UNEXPOSED.Δ,
 Add: UNEXPOSED.Δ,
 GetOpenParentState: UNEXPOSED.Δ,
 DiscardFrom: UNEXPOSED.Δ,
 UndoTo: UNEXPOSED.Δ,
 RedoTo: UNEXPOSED.Δ,
 EnumUndoable: UNEXPOSED.Δ,
 EnumRedoable: UNEXPOSED.Δ,
 GetLastUndoDescription: UNEXPOSED.Δ,
 GetLastRedoDescription: UNEXPOSED.Δ,
 Enable: UNEXPOSED.Δ
});

var IPointerInactiveVtbl = new StructT('IPointerInactiveVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetActivationPolicy: UNEXPOSED.Δ,
 OnInactiveMouseMove: UNEXPOSED.Δ,
 OnInactiveSetCursor: UNEXPOSED.Δ
});

var IObjectWithSiteVtbl = new StructT('IObjectWithSiteVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 SetSite: UNEXPOSED.Δ,
 GetSite: UNEXPOSED.Δ
});

var tagCALPOLESTR = new StructT('tagCALPOLESTR', {
 cElems: ULONG,
 pElems: ushort.Δ.Δ
});

var tagCADWORD = new StructT('tagCADWORD', {
 cElems: ULONG,
 pElems: ulong.Δ
});

var IPerPropertyBrowsingVtbl = new StructT('IPerPropertyBrowsingVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetDisplayString: UNEXPOSED.Δ,
 MapPropertyToPage: UNEXPOSED.Δ,
 GetPredefinedStrings: UNEXPOSED.Δ,
 GetPredefinedValue: UNEXPOSED.Δ
});

var tagPROPBAG2 = new StructT('tagPROPBAG2', {
 dwType: DWORD,
 vt: VARTYPE,
 cfType: CLIPFORMAT,
 dwHint: DWORD,
 pstrName: LPOLESTR,
 clsid: CLSID
});

var IPropertyBag2Vtbl = new StructT('IPropertyBag2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Read: UNEXPOSED.Δ,
 Write: UNEXPOSED.Δ,
 CountProperties: UNEXPOSED.Δ,
 GetPropertyInfo: UNEXPOSED.Δ,
 LoadObject: UNEXPOSED.Δ
});

var IPersistPropertyBag2Vtbl = new StructT('IPersistPropertyBag2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetClassID: UNEXPOSED.Δ,
 InitNew: UNEXPOSED.Δ,
 Load: UNEXPOSED.Δ,
 Save: UNEXPOSED.Δ,
 IsDirty: UNEXPOSED.Δ
});

var IAdviseSinkExVtbl = new StructT('IAdviseSinkExVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 OnDataChange: UNEXPOSED.Δ,
 OnViewChange: UNEXPOSED.Δ,
 OnRename: UNEXPOSED.Δ,
 OnSave: UNEXPOSED.Δ,
 OnClose: UNEXPOSED.Δ,
 OnViewStatusChange: UNEXPOSED.Δ
});

var tagQACONTAINER = new StructT('tagQACONTAINER', {
 cbSize: ULONG,
 pClientSite: uint.Δ,
 pAdviseSink: uint.Δ,
 pPropertyNotifySink: uint.Δ,
 pUnkEventSink: uint.Δ,
 dwAmbientFlags: DWORD,
 colorFore: OLE_COLOR,
 colorBack: OLE_COLOR,
 pFont: uint.Δ,
 pUndoMgr: uint.Δ,
 dwAppearance: DWORD,
 lcid: LONG,
 hpal: HPALETTE,
 pBindHost: uint.Δ,
 pOleControlSite: uint.Δ,
 pServiceProvider: uint.Δ
});

var tagQACONTROL = new StructT('tagQACONTROL', {
 cbSize: ULONG,
 dwMiscStatus: DWORD,
 dwViewStatus: DWORD,
 dwEventCookie: DWORD,
 dwPropNotifyCookie: DWORD,
 dwPointerActivationPolicy: DWORD
});

var IQuickActivateVtbl = new StructT('IQuickActivateVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 QuickActivate: UNEXPOSED.Δ,
 SetContentExtent: UNEXPOSED.Δ,
 GetContentExtent: UNEXPOSED.Δ
});

var IEnumRegisterWordA = new StructT('IEnumRegisterWordA', {
 lpVtbl: IEnumRegisterWordAVtbl.Δ
});

var IEnumRegisterWordW = new StructT('IEnumRegisterWordW', {
 lpVtbl: IEnumRegisterWordWVtbl.Δ
});

var IEnumInputContext = new StructT('IEnumInputContext', {
 lpVtbl: IEnumInputContextVtbl.Δ
});

var IActiveIMMRegistrar = new StructT('IActiveIMMRegistrar', {
 lpVtbl: IActiveIMMRegistrarVtbl.Δ
});

var IActiveIMMMessagePumpOwner = new StructT('IActiveIMMMessagePumpOwner', {
 lpVtbl: IActiveIMMMessagePumpOwnerVtbl.Δ
});

var IActiveIMMIME = new StructT('IActiveIMMIME', {
 lpVtbl: IActiveIMMIMEVtbl.Δ
});

var IActiveIME = new StructT('IActiveIME', {
 lpVtbl: IActiveIMEVtbl.Δ
});

var IActiveIME2 = new StructT('IActiveIME2', {
 lpVtbl: IActiveIME2Vtbl.Δ
});


var __MIDL___MIDL_itf_dimm_0000_0000_0012 = new StructT('__MIDL___MIDL_itf_dimm_0000_0000_0012', {
 hWnd: HWND,
 fOpen: BOOL,
 ptStatusWndPos: POINT,
 ptSoftKbdPos: POINT,
 fdwConversion: DWORD,
 fdwSentence: DWORD,
 lfFont: c:dimm.h@7837@S@__MIDL___MIDL_itf_dimm_0000_0000_0012@Ua,
 cfCompForm: COMPOSITIONFORM,
 cfCandForm: ARRAY(CANDIDATEFORM,  4 ),
 hCompStr: HIMCC,
 hCandInfo: HIMCC,
 hGuideLine: HIMCC,
 hPrivate: HIMCC,
 dwNumMsgBuf: DWORD,
 hMsgBuf: HIMCC,
 fdwInit: DWORD,
 dwReserve: ARRAY(DWORD,  3 )
});

var __MIDL___MIDL_itf_dimm_0000_0000_0014 = new StructT('__MIDL___MIDL_itf_dimm_0000_0000_0014', {
 dwPrivateDataSize: DWORD,
 fdwProperty: DWORD,
 fdwConversionCaps: DWORD,
 fdwSentenceCaps: DWORD,
 fdwUICaps: DWORD,
 fdwSCSCaps: DWORD,
 fdwSelectCaps: DWORD
});

var IEnumRegisterWordAVtbl = new StructT('IEnumRegisterWordAVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Clone: UNEXPOSED.Δ,
 Next: UNEXPOSED.Δ,
 Reset: UNEXPOSED.Δ,
 Skip: UNEXPOSED.Δ
});

var IEnumRegisterWordWVtbl = new StructT('IEnumRegisterWordWVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Clone: UNEXPOSED.Δ,
 Next: UNEXPOSED.Δ,
 Reset: UNEXPOSED.Δ,
 Skip: UNEXPOSED.Δ
});

var IEnumInputContextVtbl = new StructT('IEnumInputContextVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Clone: UNEXPOSED.Δ,
 Next: UNEXPOSED.Δ,
 Reset: UNEXPOSED.Δ,
 Skip: UNEXPOSED.Δ
});

var IActiveIMMRegistrarVtbl = new StructT('IActiveIMMRegistrarVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 RegisterIME: UNEXPOSED.Δ,
 UnregisterIME: UNEXPOSED.Δ
});

var IActiveIMMMessagePumpOwnerVtbl = new StructT('IActiveIMMMessagePumpOwnerVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Start: UNEXPOSED.Δ,
 End: UNEXPOSED.Δ,
 OnTranslateMessage: UNEXPOSED.Δ,
 Pause: UNEXPOSED.Δ,
 Resume: UNEXPOSED.Δ
});

var IActiveIMMAppVtbl = new StructT('IActiveIMMAppVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 AssociateContext: UNEXPOSED.Δ,
 ConfigureIMEA: UNEXPOSED.Δ,
 ConfigureIMEW: UNEXPOSED.Δ,
 CreateContext: UNEXPOSED.Δ,
 DestroyContext: UNEXPOSED.Δ,
 EnumRegisterWordA: UNEXPOSED.Δ,
 EnumRegisterWordW: UNEXPOSED.Δ,
 EscapeA: UNEXPOSED.Δ,
 EscapeW: UNEXPOSED.Δ,
 GetCandidateListA: UNEXPOSED.Δ,
 GetCandidateListW: UNEXPOSED.Δ,
 GetCandidateListCountA: UNEXPOSED.Δ,
 GetCandidateListCountW: UNEXPOSED.Δ,
 GetCandidateWindow: UNEXPOSED.Δ,
 GetCompositionFontA: UNEXPOSED.Δ,
 GetCompositionFontW: UNEXPOSED.Δ,
 GetCompositionStringA: UNEXPOSED.Δ,
 GetCompositionStringW: UNEXPOSED.Δ,
 GetCompositionWindow: UNEXPOSED.Δ,
 GetContext: UNEXPOSED.Δ,
 GetConversionListA: UNEXPOSED.Δ,
 GetConversionListW: UNEXPOSED.Δ,
 GetConversionStatus: UNEXPOSED.Δ,
 GetDefaultIMEWnd: UNEXPOSED.Δ,
 GetDescriptionA: UNEXPOSED.Δ,
 GetDescriptionW: UNEXPOSED.Δ,
 GetGuideLineA: UNEXPOSED.Δ,
 GetGuideLineW: UNEXPOSED.Δ,
 GetIMEFileNameA: UNEXPOSED.Δ,
 GetIMEFileNameW: UNEXPOSED.Δ,
 GetOpenStatus: UNEXPOSED.Δ,
 GetProperty: UNEXPOSED.Δ,
 GetRegisterWordStyleA: UNEXPOSED.Δ,
 GetRegisterWordStyleW: UNEXPOSED.Δ,
 GetStatusWindowPos: UNEXPOSED.Δ,
 GetVirtualKey: UNEXPOSED.Δ,
 InstallIMEA: UNEXPOSED.Δ,
 InstallIMEW: UNEXPOSED.Δ,
 IsIME: UNEXPOSED.Δ,
 IsUIMessageA: UNEXPOSED.Δ,
 IsUIMessageW: UNEXPOSED.Δ,
 NotifyIME: UNEXPOSED.Δ,
 RegisterWordA: UNEXPOSED.Δ,
 RegisterWordW: UNEXPOSED.Δ,
 ReleaseContext: UNEXPOSED.Δ,
 SetCandidateWindow: UNEXPOSED.Δ,
 SetCompositionFontA: UNEXPOSED.Δ,
 SetCompositionFontW: UNEXPOSED.Δ,
 SetCompositionStringA: UNEXPOSED.Δ,
 SetCompositionStringW: UNEXPOSED.Δ,
 SetCompositionWindow: UNEXPOSED.Δ,
 SetConversionStatus: UNEXPOSED.Δ,
 SetOpenStatus: UNEXPOSED.Δ,
 SetStatusWindowPos: UNEXPOSED.Δ,
 SimulateHotKey: UNEXPOSED.Δ,
 UnregisterWordA: UNEXPOSED.Δ,
 UnregisterWordW: UNEXPOSED.Δ,
 Activate: UNEXPOSED.Δ,
 Deactivate: UNEXPOSED.Δ,
 OnDefWindowProc: UNEXPOSED.Δ,
 FilterClientWindows: UNEXPOSED.Δ,
 GetCodePageA: UNEXPOSED.Δ,
 GetLangId: UNEXPOSED.Δ,
 AssociateContextEx: UNEXPOSED.Δ,
 DisableIME: UNEXPOSED.Δ,
 GetImeMenuItemsA: UNEXPOSED.Δ,
 GetImeMenuItemsW: UNEXPOSED.Δ,
 EnumInputContext: UNEXPOSED.Δ
});

var IActiveIMMIMEVtbl = new StructT('IActiveIMMIMEVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 AssociateContext: UNEXPOSED.Δ,
 ConfigureIMEA: UNEXPOSED.Δ,
 ConfigureIMEW: UNEXPOSED.Δ,
 CreateContext: UNEXPOSED.Δ,
 DestroyContext: UNEXPOSED.Δ,
 EnumRegisterWordA: UNEXPOSED.Δ,
 EnumRegisterWordW: UNEXPOSED.Δ,
 EscapeA: UNEXPOSED.Δ,
 EscapeW: UNEXPOSED.Δ,
 GetCandidateListA: UNEXPOSED.Δ,
 GetCandidateListW: UNEXPOSED.Δ,
 GetCandidateListCountA: UNEXPOSED.Δ,
 GetCandidateListCountW: UNEXPOSED.Δ,
 GetCandidateWindow: UNEXPOSED.Δ,
 GetCompositionFontA: UNEXPOSED.Δ,
 GetCompositionFontW: UNEXPOSED.Δ,
 GetCompositionStringA: UNEXPOSED.Δ,
 GetCompositionStringW: UNEXPOSED.Δ,
 GetCompositionWindow: UNEXPOSED.Δ,
 GetContext: UNEXPOSED.Δ,
 GetConversionListA: UNEXPOSED.Δ,
 GetConversionListW: UNEXPOSED.Δ,
 GetConversionStatus: UNEXPOSED.Δ,
 GetDefaultIMEWnd: UNEXPOSED.Δ,
 GetDescriptionA: UNEXPOSED.Δ,
 GetDescriptionW: UNEXPOSED.Δ,
 GetGuideLineA: UNEXPOSED.Δ,
 GetGuideLineW: UNEXPOSED.Δ,
 GetIMEFileNameA: UNEXPOSED.Δ,
 GetIMEFileNameW: UNEXPOSED.Δ,
 GetOpenStatus: UNEXPOSED.Δ,
 GetProperty: UNEXPOSED.Δ,
 GetRegisterWordStyleA: UNEXPOSED.Δ,
 GetRegisterWordStyleW: UNEXPOSED.Δ,
 GetStatusWindowPos: UNEXPOSED.Δ,
 GetVirtualKey: UNEXPOSED.Δ,
 InstallIMEA: UNEXPOSED.Δ,
 InstallIMEW: UNEXPOSED.Δ,
 IsIME: UNEXPOSED.Δ,
 IsUIMessageA: UNEXPOSED.Δ,
 IsUIMessageW: UNEXPOSED.Δ,
 NotifyIME: UNEXPOSED.Δ,
 RegisterWordA: UNEXPOSED.Δ,
 RegisterWordW: UNEXPOSED.Δ,
 ReleaseContext: UNEXPOSED.Δ,
 SetCandidateWindow: UNEXPOSED.Δ,
 SetCompositionFontA: UNEXPOSED.Δ,
 SetCompositionFontW: UNEXPOSED.Δ,
 SetCompositionStringA: UNEXPOSED.Δ,
 SetCompositionStringW: UNEXPOSED.Δ,
 SetCompositionWindow: UNEXPOSED.Δ,
 SetConversionStatus: UNEXPOSED.Δ,
 SetOpenStatus: UNEXPOSED.Δ,
 SetStatusWindowPos: UNEXPOSED.Δ,
 SimulateHotKey: UNEXPOSED.Δ,
 UnregisterWordA: UNEXPOSED.Δ,
 UnregisterWordW: UNEXPOSED.Δ,
 GenerateMessage: UNEXPOSED.Δ,
 LockIMC: UNEXPOSED.Δ,
 UnlockIMC: UNEXPOSED.Δ,
 GetIMCLockCount: UNEXPOSED.Δ,
 CreateIMCC: UNEXPOSED.Δ,
 DestroyIMCC: UNEXPOSED.Δ,
 LockIMCC: UNEXPOSED.Δ,
 UnlockIMCC: UNEXPOSED.Δ,
 ReSizeIMCC: UNEXPOSED.Δ,
 GetIMCCSize: UNEXPOSED.Δ,
 GetIMCCLockCount: UNEXPOSED.Δ,
 GetHotKey: UNEXPOSED.Δ,
 SetHotKey: UNEXPOSED.Δ,
 CreateSoftKeyboard: UNEXPOSED.Δ,
 DestroySoftKeyboard: UNEXPOSED.Δ,
 ShowSoftKeyboard: UNEXPOSED.Δ,
 GetCodePageA: UNEXPOSED.Δ,
 GetLangId: UNEXPOSED.Δ,
 KeybdEvent: UNEXPOSED.Δ,
 LockModal: UNEXPOSED.Δ,
 UnlockModal: UNEXPOSED.Δ,
 AssociateContextEx: UNEXPOSED.Δ,
 DisableIME: UNEXPOSED.Δ,
 GetImeMenuItemsA: UNEXPOSED.Δ,
 GetImeMenuItemsW: UNEXPOSED.Δ,
 EnumInputContext: UNEXPOSED.Δ,
 RequestMessageA: UNEXPOSED.Δ,
 RequestMessageW: UNEXPOSED.Δ,
 SendIMCA: UNEXPOSED.Δ,
 SendIMCW: UNEXPOSED.Δ,
 IsSleeping: UNEXPOSED.Δ
});

var IActiveIMEVtbl = new StructT('IActiveIMEVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Inquire: UNEXPOSED.Δ,
 ConversionList: UNEXPOSED.Δ,
 Configure: UNEXPOSED.Δ,
 Destroy: UNEXPOSED.Δ,
 Escape: UNEXPOSED.Δ,
 SetActiveContext: UNEXPOSED.Δ,
 ProcessKey: UNEXPOSED.Δ,
 Notify: UNEXPOSED.Δ,
 Select: UNEXPOSED.Δ,
 SetCompositionString: UNEXPOSED.Δ,
 ToAsciiEx: UNEXPOSED.Δ,
 RegisterWord: UNEXPOSED.Δ,
 UnregisterWord: UNEXPOSED.Δ,
 GetRegisterWordStyle: UNEXPOSED.Δ,
 EnumRegisterWord: UNEXPOSED.Δ,
 GetCodePageA: UNEXPOSED.Δ,
 GetLangId: UNEXPOSED.Δ
});

var IActiveIME2Vtbl = new StructT('IActiveIME2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Inquire: UNEXPOSED.Δ,
 ConversionList: UNEXPOSED.Δ,
 Configure: UNEXPOSED.Δ,
 Destroy: UNEXPOSED.Δ,
 Escape: UNEXPOSED.Δ,
 SetActiveContext: UNEXPOSED.Δ,
 ProcessKey: UNEXPOSED.Δ,
 Notify: UNEXPOSED.Δ,
 Select: UNEXPOSED.Δ,
 SetCompositionString: UNEXPOSED.Δ,
 ToAsciiEx: UNEXPOSED.Δ,
 RegisterWord: UNEXPOSED.Δ,
 UnregisterWord: UNEXPOSED.Δ,
 GetRegisterWordStyle: UNEXPOSED.Δ,
 EnumRegisterWord: UNEXPOSED.Δ,
 GetCodePageA: UNEXPOSED.Δ,
 GetLangId: UNEXPOSED.Δ,
 Sleep: UNEXPOSED.Δ,
 Unsleep: UNEXPOSED.Δ
});

var _SHITEMID = new StructT('_SHITEMID', {
 cb: USHORT,
 abID: ARRAY(BYTE,  1 )
});

var ITEMIDLIST_ABSOLUTE = new StructT('ITEMIDLIST_ABSOLUTE', {
 mkid: SHITEMID
});

var _STRRET = new StructT('_STRRET', {
 uType: UINT
});

var _SHELLDETAILS = new StructT('_SHELLDETAILS', {
 fmt: int,
 cxChar: int,
 str: STRRET
});

var _COMDLG_FILTERSPEC = new StructT('_COMDLG_FILTERSPEC', {
 pszName: LPCWSTR,
 pszSpec: LPCWSTR
});

var IDispatchEx = new StructT('IDispatchEx', {
 lpVtbl: IDispatchExVtbl.Δ
});

var IDispError = new StructT('IDispError', {
 lpVtbl: IDispErrorVtbl.Δ
});

var IVariantChangeType = new StructT('IVariantChangeType', {
 lpVtbl: IVariantChangeTypeVtbl.Δ
});

var IObjectIdentity = new StructT('IObjectIdentity', {
 lpVtbl: IObjectIdentityVtbl.Δ
});

var IProvideRuntimeContext = new StructT('IProvideRuntimeContext', {
 lpVtbl: IProvideRuntimeContextVtbl.Δ
});

var IDispatchExVtbl = new StructT('IDispatchExVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 GetDispID: UNEXPOSED.Δ,
 InvokeEx: UNEXPOSED.Δ,
 DeleteMemberByName: UNEXPOSED.Δ,
 DeleteMemberByDispID: UNEXPOSED.Δ,
 GetMemberProperties: UNEXPOSED.Δ,
 GetMemberName: UNEXPOSED.Δ,
 GetNextDispID: UNEXPOSED.Δ,
 GetNameSpaceParent: UNEXPOSED.Δ
});

var IDispErrorVtbl = new StructT('IDispErrorVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 QueryErrorInfo: UNEXPOSED.Δ,
 GetNext: UNEXPOSED.Δ,
 GetHresult: UNEXPOSED.Δ,
 GetSource: UNEXPOSED.Δ,
 GetHelpInfo: UNEXPOSED.Δ,
 GetDescription: UNEXPOSED.Δ
});

var IVariantChangeTypeVtbl = new StructT('IVariantChangeTypeVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 ChangeType: UNEXPOSED.Δ
});

var IObjectIdentityVtbl = new StructT('IObjectIdentityVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 IsEqualObject: UNEXPOSED.Δ
});

var IProvideRuntimeContextVtbl = new StructT('IProvideRuntimeContextVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetCurrentSourceContext: UNEXPOSED.Δ
});

var tagOCPFIPARAMS = new StructT('tagOCPFIPARAMS', {
 cbStructSize: ULONG,
 hWndOwner: HWND,
 x: int,
 y: int,
 lpszCaption: LPCOLESTR,
 cObjects: ULONG,
 lplpUnk: VOIDPTR.Δ,
 cPages: ULONG,
 lpPages: uint.Δ,
 lcid: LCID,
 dispidInitialProperty: DISPID
});

var tagFONTDESC = new StructT('tagFONTDESC', {
 cbSizeofstruct: UINT,
 lpstrName: LPOLESTR,
 cySize: CY,
 sWeight: SHORT,
 sCharset: SHORT,
 fItalic: BOOL,
 fUnderline: BOOL,
 fStrikethrough: BOOL
});

var tagPICTDESC = new StructT('tagPICTDESC', {
 cbSizeofstruct: UINT,
 picType: UINT
});

var undefined = new StructT('undefined', {
 hbitmap: HBITMAP,
 hpal: HPALETTE
});

var undefined = new StructT('undefined', {
 hmeta: HMETAFILE,
 xExt: int,
 yExt: int
});

var undefined = new StructT('undefined', {
 hicon: HICON
});

var undefined = new StructT('undefined', {
 hemf: HENHMETAFILE
});

var IHTMLFiltersCollectionVtbl = new StructT('IHTMLFiltersCollectionVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_length: UNEXPOSED.Δ,
 get__newEnum: UNEXPOSED.Δ,
 item: UNEXPOSED.Δ
});

var IIE70DispatchExVtbl = new StructT('IIE70DispatchExVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 GetDispID: UNEXPOSED.Δ,
 InvokeEx: UNEXPOSED.Δ,
 DeleteMemberByName: UNEXPOSED.Δ,
 DeleteMemberByDispID: UNEXPOSED.Δ,
 GetMemberProperties: UNEXPOSED.Δ,
 GetMemberName: UNEXPOSED.Δ,
 GetNextDispID: UNEXPOSED.Δ,
 GetNameSpaceParent: UNEXPOSED.Δ
});

var IIE80DispatchExVtbl = new StructT('IIE80DispatchExVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 GetDispID: UNEXPOSED.Δ,
 InvokeEx: UNEXPOSED.Δ,
 DeleteMemberByName: UNEXPOSED.Δ,
 DeleteMemberByDispID: UNEXPOSED.Δ,
 GetMemberProperties: UNEXPOSED.Δ,
 GetMemberName: UNEXPOSED.Δ,
 GetNextDispID: UNEXPOSED.Δ,
 GetNameSpaceParent: UNEXPOSED.Δ
});

var _HTML_PAINTER_INFO = new StructT('_HTML_PAINTER_INFO', {
 lFlags: LONG,
 lZOrder: LONG,
 iidDrawObject: IID,
 rcExpand: RECT
});

var _HTML_PAINT_XFORM = new StructT('_HTML_PAINT_XFORM', {
 eM11: FLOAT,
 eM12: FLOAT,
 eM21: FLOAT,
 eM22: FLOAT,
 eDx: FLOAT,
 eDy: FLOAT
});

var _HTML_PAINT_DRAW_INFO = new StructT('_HTML_PAINT_DRAW_INFO', {
 rcViewport: RECT,
 hrgnUpdate: HRGN,
 xform: HTML_PAINT_XFORM
});

var IHTMLEventObjVtbl = new StructT('IHTMLEventObjVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_srcElement: UNEXPOSED.Δ,
 get_altKey: UNEXPOSED.Δ,
 get_ctrlKey: UNEXPOSED.Δ,
 get_shiftKey: UNEXPOSED.Δ,
 put_returnValue: UNEXPOSED.Δ,
 get_returnValue: UNEXPOSED.Δ,
 put_cancelBubble: UNEXPOSED.Δ,
 get_cancelBubble: UNEXPOSED.Δ,
 get_fromElement: UNEXPOSED.Δ,
 get_toElement: UNEXPOSED.Δ,
 put_keyCode: UNEXPOSED.Δ,
 get_keyCode: UNEXPOSED.Δ,
 get_button: UNEXPOSED.Δ,
 get_type: UNEXPOSED.Δ,
 get_qualifier: UNEXPOSED.Δ,
 get_reason: UNEXPOSED.Δ,
 get_x: UNEXPOSED.Δ,
 get_y: UNEXPOSED.Δ,
 get_clientX: UNEXPOSED.Δ,
 get_clientY: UNEXPOSED.Δ,
 get_offsetX: UNEXPOSED.Δ,
 get_offsetY: UNEXPOSED.Δ,
 get_screenX: UNEXPOSED.Δ,
 get_screenY: UNEXPOSED.Δ,
 get_srcFilter: UNEXPOSED.Δ
});

var IElementBehaviorSiteVtbl = new StructT('IElementBehaviorSiteVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetElement: UNEXPOSED.Δ,
 RegisterNotification: UNEXPOSED.Δ
});

var IElementBehaviorVtbl = new StructT('IElementBehaviorVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Init: UNEXPOSED.Δ,
 Notify: UNEXPOSED.Δ,
 Detach: UNEXPOSED.Δ
});

var IElementBehaviorFactoryVtbl = new StructT('IElementBehaviorFactoryVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 FindBehavior: UNEXPOSED.Δ
});

var IElementBehaviorSiteOMVtbl = new StructT('IElementBehaviorSiteOMVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 RegisterEvent: UNEXPOSED.Δ,
 GetEventCookie: UNEXPOSED.Δ,
 FireEvent: UNEXPOSED.Δ,
 CreateEventObject: UNEXPOSED.Δ,
 RegisterName: UNEXPOSED.Δ,
 RegisterUrn: UNEXPOSED.Δ
});

var IElementBehaviorRenderVtbl = new StructT('IElementBehaviorRenderVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Draw: UNEXPOSED.Δ,
 GetRenderInfo: UNEXPOSED.Δ,
 HitTestPoint: UNEXPOSED.Δ
});

var IElementBehaviorSiteRenderVtbl = new StructT('IElementBehaviorSiteRenderVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Invalidate: UNEXPOSED.Δ,
 InvalidateRenderInfo: UNEXPOSED.Δ,
 InvalidateStyle: UNEXPOSED.Δ
});

var IHTMLDOMConstructorVtbl = new StructT('IHTMLDOMConstructorVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_constructor: UNEXPOSED.Δ,
 LookupGetter: UNEXPOSED.Δ,
 LookupSetter: UNEXPOSED.Δ,
 DefineGetter: UNEXPOSED.Δ,
 DefineSetter: UNEXPOSED.Δ
});

var IHTMLStyleVtbl = new StructT('IHTMLStyleVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_fontFamily: UNEXPOSED.Δ,
 get_fontFamily: UNEXPOSED.Δ,
 put_fontStyle: UNEXPOSED.Δ,
 get_fontStyle: UNEXPOSED.Δ,
 put_fontVariant: UNEXPOSED.Δ,
 get_fontVariant: UNEXPOSED.Δ,
 put_fontWeight: UNEXPOSED.Δ,
 get_fontWeight: UNEXPOSED.Δ,
 put_fontSize: UNEXPOSED.Δ,
 get_fontSize: UNEXPOSED.Δ,
 put_font: UNEXPOSED.Δ,
 get_font: UNEXPOSED.Δ,
 put_color: UNEXPOSED.Δ,
 get_color: UNEXPOSED.Δ,
 put_background: UNEXPOSED.Δ,
 get_background: UNEXPOSED.Δ,
 put_backgroundColor: UNEXPOSED.Δ,
 get_backgroundColor: UNEXPOSED.Δ,
 put_backgroundImage: UNEXPOSED.Δ,
 get_backgroundImage: UNEXPOSED.Δ,
 put_backgroundRepeat: UNEXPOSED.Δ,
 get_backgroundRepeat: UNEXPOSED.Δ,
 put_backgroundAttachment: UNEXPOSED.Δ,
 get_backgroundAttachment: UNEXPOSED.Δ,
 put_backgroundPosition: UNEXPOSED.Δ,
 get_backgroundPosition: UNEXPOSED.Δ,
 put_backgroundPositionX: UNEXPOSED.Δ,
 get_backgroundPositionX: UNEXPOSED.Δ,
 put_backgroundPositionY: UNEXPOSED.Δ,
 get_backgroundPositionY: UNEXPOSED.Δ,
 put_wordSpacing: UNEXPOSED.Δ,
 get_wordSpacing: UNEXPOSED.Δ,
 put_letterSpacing: UNEXPOSED.Δ,
 get_letterSpacing: UNEXPOSED.Δ,
 put_textDecoration: UNEXPOSED.Δ,
 get_textDecoration: UNEXPOSED.Δ,
 put_textDecorationNone: UNEXPOSED.Δ,
 get_textDecorationNone: UNEXPOSED.Δ,
 put_textDecorationUnderline: UNEXPOSED.Δ,
 get_textDecorationUnderline: UNEXPOSED.Δ,
 put_textDecorationOverline: UNEXPOSED.Δ,
 get_textDecorationOverline: UNEXPOSED.Δ,
 put_textDecorationLineThrough: UNEXPOSED.Δ,
 get_textDecorationLineThrough: UNEXPOSED.Δ,
 put_textDecorationBlink: UNEXPOSED.Δ,
 get_textDecorationBlink: UNEXPOSED.Δ,
 put_verticalAlign: UNEXPOSED.Δ,
 get_verticalAlign: UNEXPOSED.Δ,
 put_textTransform: UNEXPOSED.Δ,
 get_textTransform: UNEXPOSED.Δ,
 put_textAlign: UNEXPOSED.Δ,
 get_textAlign: UNEXPOSED.Δ,
 put_textIndent: UNEXPOSED.Δ,
 get_textIndent: UNEXPOSED.Δ,
 put_lineHeight: UNEXPOSED.Δ,
 get_lineHeight: UNEXPOSED.Δ,
 put_marginTop: UNEXPOSED.Δ,
 get_marginTop: UNEXPOSED.Δ,
 put_marginRight: UNEXPOSED.Δ,
 get_marginRight: UNEXPOSED.Δ,
 put_marginBottom: UNEXPOSED.Δ,
 get_marginBottom: UNEXPOSED.Δ,
 put_marginLeft: UNEXPOSED.Δ,
 get_marginLeft: UNEXPOSED.Δ,
 put_margin: UNEXPOSED.Δ,
 get_margin: UNEXPOSED.Δ,
 put_paddingTop: UNEXPOSED.Δ,
 get_paddingTop: UNEXPOSED.Δ,
 put_paddingRight: UNEXPOSED.Δ,
 get_paddingRight: UNEXPOSED.Δ,
 put_paddingBottom: UNEXPOSED.Δ,
 get_paddingBottom: UNEXPOSED.Δ,
 put_paddingLeft: UNEXPOSED.Δ,
 get_paddingLeft: UNEXPOSED.Δ,
 put_padding: UNEXPOSED.Δ,
 get_padding: UNEXPOSED.Δ,
 put_border: UNEXPOSED.Δ,
 get_border: UNEXPOSED.Δ,
 put_borderTop: UNEXPOSED.Δ,
 get_borderTop: UNEXPOSED.Δ,
 put_borderRight: UNEXPOSED.Δ,
 get_borderRight: UNEXPOSED.Δ,
 put_borderBottom: UNEXPOSED.Δ,
 get_borderBottom: UNEXPOSED.Δ,
 put_borderLeft: UNEXPOSED.Δ,
 get_borderLeft: UNEXPOSED.Δ,
 put_borderColor: UNEXPOSED.Δ,
 get_borderColor: UNEXPOSED.Δ,
 put_borderTopColor: UNEXPOSED.Δ,
 get_borderTopColor: UNEXPOSED.Δ,
 put_borderRightColor: UNEXPOSED.Δ,
 get_borderRightColor: UNEXPOSED.Δ,
 put_borderBottomColor: UNEXPOSED.Δ,
 get_borderBottomColor: UNEXPOSED.Δ,
 put_borderLeftColor: UNEXPOSED.Δ,
 get_borderLeftColor: UNEXPOSED.Δ,
 put_borderWidth: UNEXPOSED.Δ,
 get_borderWidth: UNEXPOSED.Δ,
 put_borderTopWidth: UNEXPOSED.Δ,
 get_borderTopWidth: UNEXPOSED.Δ,
 put_borderRightWidth: UNEXPOSED.Δ,
 get_borderRightWidth: UNEXPOSED.Δ,
 put_borderBottomWidth: UNEXPOSED.Δ,
 get_borderBottomWidth: UNEXPOSED.Δ,
 put_borderLeftWidth: UNEXPOSED.Δ,
 get_borderLeftWidth: UNEXPOSED.Δ,
 put_borderStyle: UNEXPOSED.Δ,
 get_borderStyle: UNEXPOSED.Δ,
 put_borderTopStyle: UNEXPOSED.Δ,
 get_borderTopStyle: UNEXPOSED.Δ,
 put_borderRightStyle: UNEXPOSED.Δ,
 get_borderRightStyle: UNEXPOSED.Δ,
 put_borderBottomStyle: UNEXPOSED.Δ,
 get_borderBottomStyle: UNEXPOSED.Δ,
 put_borderLeftStyle: UNEXPOSED.Δ,
 get_borderLeftStyle: UNEXPOSED.Δ,
 put_width: UNEXPOSED.Δ,
 get_width: UNEXPOSED.Δ,
 put_height: UNEXPOSED.Δ,
 get_height: UNEXPOSED.Δ,
 put_styleFloat: UNEXPOSED.Δ,
 get_styleFloat: UNEXPOSED.Δ,
 put_clear: UNEXPOSED.Δ,
 get_clear: UNEXPOSED.Δ,
 put_display: UNEXPOSED.Δ,
 get_display: UNEXPOSED.Δ,
 put_visibility: UNEXPOSED.Δ,
 get_visibility: UNEXPOSED.Δ,
 put_listStyleType: UNEXPOSED.Δ,
 get_listStyleType: UNEXPOSED.Δ,
 put_listStylePosition: UNEXPOSED.Δ,
 get_listStylePosition: UNEXPOSED.Δ,
 put_listStyleImage: UNEXPOSED.Δ,
 get_listStyleImage: UNEXPOSED.Δ,
 put_listStyle: UNEXPOSED.Δ,
 get_listStyle: UNEXPOSED.Δ,
 put_whiteSpace: UNEXPOSED.Δ,
 get_whiteSpace: UNEXPOSED.Δ,
 put_top: UNEXPOSED.Δ,
 get_top: UNEXPOSED.Δ,
 put_left: UNEXPOSED.Δ,
 get_left: UNEXPOSED.Δ,
 get_position: UNEXPOSED.Δ,
 put_zIndex: UNEXPOSED.Δ,
 get_zIndex: UNEXPOSED.Δ,
 put_overflow: UNEXPOSED.Δ,
 get_overflow: UNEXPOSED.Δ,
 put_pageBreakBefore: UNEXPOSED.Δ,
 get_pageBreakBefore: UNEXPOSED.Δ,
 put_pageBreakAfter: UNEXPOSED.Δ,
 get_pageBreakAfter: UNEXPOSED.Δ,
 put_cssText: UNEXPOSED.Δ,
 get_cssText: UNEXPOSED.Δ,
 put_pixelTop: UNEXPOSED.Δ,
 get_pixelTop: UNEXPOSED.Δ,
 put_pixelLeft: UNEXPOSED.Δ,
 get_pixelLeft: UNEXPOSED.Δ,
 put_pixelWidth: UNEXPOSED.Δ,
 get_pixelWidth: UNEXPOSED.Δ,
 put_pixelHeight: UNEXPOSED.Δ,
 get_pixelHeight: UNEXPOSED.Δ,
 put_posTop: UNEXPOSED.Δ,
 get_posTop: UNEXPOSED.Δ,
 put_posLeft: UNEXPOSED.Δ,
 get_posLeft: UNEXPOSED.Δ,
 put_posWidth: UNEXPOSED.Δ,
 get_posWidth: UNEXPOSED.Δ,
 put_posHeight: UNEXPOSED.Δ,
 get_posHeight: UNEXPOSED.Δ,
 put_cursor: UNEXPOSED.Δ,
 get_cursor: UNEXPOSED.Δ,
 put_clip: UNEXPOSED.Δ,
 get_clip: UNEXPOSED.Δ,
 put_filter: UNEXPOSED.Δ,
 get_filter: UNEXPOSED.Δ,
 setAttribute: UNEXPOSED.Δ,
 getAttribute: UNEXPOSED.Δ,
 removeAttribute: UNEXPOSED.Δ,
 toString: UNEXPOSED.Δ
});

var IHTMLStyle2Vtbl = new StructT('IHTMLStyle2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_tableLayout: UNEXPOSED.Δ,
 get_tableLayout: UNEXPOSED.Δ,
 put_borderCollapse: UNEXPOSED.Δ,
 get_borderCollapse: UNEXPOSED.Δ,
 put_direction: UNEXPOSED.Δ,
 get_direction: UNEXPOSED.Δ,
 put_behavior: UNEXPOSED.Δ,
 get_behavior: UNEXPOSED.Δ,
 setExpression: UNEXPOSED.Δ,
 getExpression: UNEXPOSED.Δ,
 removeExpression: UNEXPOSED.Δ,
 put_position: UNEXPOSED.Δ,
 get_position: UNEXPOSED.Δ,
 put_unicodeBidi: UNEXPOSED.Δ,
 get_unicodeBidi: UNEXPOSED.Δ,
 put_bottom: UNEXPOSED.Δ,
 get_bottom: UNEXPOSED.Δ,
 put_right: UNEXPOSED.Δ,
 get_right: UNEXPOSED.Δ,
 put_pixelBottom: UNEXPOSED.Δ,
 get_pixelBottom: UNEXPOSED.Δ,
 put_pixelRight: UNEXPOSED.Δ,
 get_pixelRight: UNEXPOSED.Δ,
 put_posBottom: UNEXPOSED.Δ,
 get_posBottom: UNEXPOSED.Δ,
 put_posRight: UNEXPOSED.Δ,
 get_posRight: UNEXPOSED.Δ,
 put_imeMode: UNEXPOSED.Δ,
 get_imeMode: UNEXPOSED.Δ,
 put_rubyAlign: UNEXPOSED.Δ,
 get_rubyAlign: UNEXPOSED.Δ,
 put_rubyPosition: UNEXPOSED.Δ,
 get_rubyPosition: UNEXPOSED.Δ,
 put_rubyOverhang: UNEXPOSED.Δ,
 get_rubyOverhang: UNEXPOSED.Δ,
 put_layoutGridChar: UNEXPOSED.Δ,
 get_layoutGridChar: UNEXPOSED.Δ,
 put_layoutGridLine: UNEXPOSED.Δ,
 get_layoutGridLine: UNEXPOSED.Δ,
 put_layoutGridMode: UNEXPOSED.Δ,
 get_layoutGridMode: UNEXPOSED.Δ,
 put_layoutGridType: UNEXPOSED.Δ,
 get_layoutGridType: UNEXPOSED.Δ,
 put_layoutGrid: UNEXPOSED.Δ,
 get_layoutGrid: UNEXPOSED.Δ,
 put_wordBreak: UNEXPOSED.Δ,
 get_wordBreak: UNEXPOSED.Δ,
 put_lineBreak: UNEXPOSED.Δ,
 get_lineBreak: UNEXPOSED.Δ,
 put_textJustify: UNEXPOSED.Δ,
 get_textJustify: UNEXPOSED.Δ,
 put_textJustifyTrim: UNEXPOSED.Δ,
 get_textJustifyTrim: UNEXPOSED.Δ,
 put_textKashida: UNEXPOSED.Δ,
 get_textKashida: UNEXPOSED.Δ,
 put_textAutospace: UNEXPOSED.Δ,
 get_textAutospace: UNEXPOSED.Δ,
 put_overflowX: UNEXPOSED.Δ,
 get_overflowX: UNEXPOSED.Δ,
 put_overflowY: UNEXPOSED.Δ,
 get_overflowY: UNEXPOSED.Δ,
 put_accelerator: UNEXPOSED.Δ,
 get_accelerator: UNEXPOSED.Δ
});

var IHTMLStyle3Vtbl = new StructT('IHTMLStyle3Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_layoutFlow: UNEXPOSED.Δ,
 get_layoutFlow: UNEXPOSED.Δ,
 put_zoom: UNEXPOSED.Δ,
 get_zoom: UNEXPOSED.Δ,
 put_wordWrap: UNEXPOSED.Δ,
 get_wordWrap: UNEXPOSED.Δ,
 put_textUnderlinePosition: UNEXPOSED.Δ,
 get_textUnderlinePosition: UNEXPOSED.Δ,
 put_scrollbarBaseColor: UNEXPOSED.Δ,
 get_scrollbarBaseColor: UNEXPOSED.Δ,
 put_scrollbarFaceColor: UNEXPOSED.Δ,
 get_scrollbarFaceColor: UNEXPOSED.Δ,
 put_scrollbar3dLightColor: UNEXPOSED.Δ,
 get_scrollbar3dLightColor: UNEXPOSED.Δ,
 put_scrollbarShadowColor: UNEXPOSED.Δ,
 get_scrollbarShadowColor: UNEXPOSED.Δ,
 put_scrollbarHighlightColor: UNEXPOSED.Δ,
 get_scrollbarHighlightColor: UNEXPOSED.Δ,
 put_scrollbarDarkShadowColor: UNEXPOSED.Δ,
 get_scrollbarDarkShadowColor: UNEXPOSED.Δ,
 put_scrollbarArrowColor: UNEXPOSED.Δ,
 get_scrollbarArrowColor: UNEXPOSED.Δ,
 put_scrollbarTrackColor: UNEXPOSED.Δ,
 get_scrollbarTrackColor: UNEXPOSED.Δ,
 put_writingMode: UNEXPOSED.Δ,
 get_writingMode: UNEXPOSED.Δ,
 put_textAlignLast: UNEXPOSED.Δ,
 get_textAlignLast: UNEXPOSED.Δ,
 put_textKashidaSpace: UNEXPOSED.Δ,
 get_textKashidaSpace: UNEXPOSED.Δ
});

var IHTMLStyle4Vtbl = new StructT('IHTMLStyle4Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_textOverflow: UNEXPOSED.Δ,
 get_textOverflow: UNEXPOSED.Δ,
 put_minHeight: UNEXPOSED.Δ,
 get_minHeight: UNEXPOSED.Δ
});

var IHTMLStyle5Vtbl = new StructT('IHTMLStyle5Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_msInterpolationMode: UNEXPOSED.Δ,
 get_msInterpolationMode: UNEXPOSED.Δ,
 put_maxHeight: UNEXPOSED.Δ,
 get_maxHeight: UNEXPOSED.Δ,
 put_minWidth: UNEXPOSED.Δ,
 get_minWidth: UNEXPOSED.Δ,
 put_maxWidth: UNEXPOSED.Δ,
 get_maxWidth: UNEXPOSED.Δ
});

var IHTMLStyle6Vtbl = new StructT('IHTMLStyle6Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_content: UNEXPOSED.Δ,
 get_content: UNEXPOSED.Δ,
 put_captionSide: UNEXPOSED.Δ,
 get_captionSide: UNEXPOSED.Δ,
 put_counterIncrement: UNEXPOSED.Δ,
 get_counterIncrement: UNEXPOSED.Δ,
 put_counterReset: UNEXPOSED.Δ,
 get_counterReset: UNEXPOSED.Δ,
 put_outline: UNEXPOSED.Δ,
 get_outline: UNEXPOSED.Δ,
 put_outlineWidth: UNEXPOSED.Δ,
 get_outlineWidth: UNEXPOSED.Δ,
 put_outlineStyle: UNEXPOSED.Δ,
 get_outlineStyle: UNEXPOSED.Δ,
 put_outlineColor: UNEXPOSED.Δ,
 get_outlineColor: UNEXPOSED.Δ,
 put_boxSizing: UNEXPOSED.Δ,
 get_boxSizing: UNEXPOSED.Δ,
 put_borderSpacing: UNEXPOSED.Δ,
 get_borderSpacing: UNEXPOSED.Δ,
 put_orphans: UNEXPOSED.Δ,
 get_orphans: UNEXPOSED.Δ,
 put_widows: UNEXPOSED.Δ,
 get_widows: UNEXPOSED.Δ,
 put_pageBreakInside: UNEXPOSED.Δ,
 get_pageBreakInside: UNEXPOSED.Δ,
 put_emptyCells: UNEXPOSED.Δ,
 get_emptyCells: UNEXPOSED.Δ,
 put_msBlockProgression: UNEXPOSED.Δ,
 get_msBlockProgression: UNEXPOSED.Δ,
 put_quotes: UNEXPOSED.Δ,
 get_quotes: UNEXPOSED.Δ
});

var IHTMLRuleStyleVtbl = new StructT('IHTMLRuleStyleVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_fontFamily: UNEXPOSED.Δ,
 get_fontFamily: UNEXPOSED.Δ,
 put_fontStyle: UNEXPOSED.Δ,
 get_fontStyle: UNEXPOSED.Δ,
 put_fontVariant: UNEXPOSED.Δ,
 get_fontVariant: UNEXPOSED.Δ,
 put_fontWeight: UNEXPOSED.Δ,
 get_fontWeight: UNEXPOSED.Δ,
 put_fontSize: UNEXPOSED.Δ,
 get_fontSize: UNEXPOSED.Δ,
 put_font: UNEXPOSED.Δ,
 get_font: UNEXPOSED.Δ,
 put_color: UNEXPOSED.Δ,
 get_color: UNEXPOSED.Δ,
 put_background: UNEXPOSED.Δ,
 get_background: UNEXPOSED.Δ,
 put_backgroundColor: UNEXPOSED.Δ,
 get_backgroundColor: UNEXPOSED.Δ,
 put_backgroundImage: UNEXPOSED.Δ,
 get_backgroundImage: UNEXPOSED.Δ,
 put_backgroundRepeat: UNEXPOSED.Δ,
 get_backgroundRepeat: UNEXPOSED.Δ,
 put_backgroundAttachment: UNEXPOSED.Δ,
 get_backgroundAttachment: UNEXPOSED.Δ,
 put_backgroundPosition: UNEXPOSED.Δ,
 get_backgroundPosition: UNEXPOSED.Δ,
 put_backgroundPositionX: UNEXPOSED.Δ,
 get_backgroundPositionX: UNEXPOSED.Δ,
 put_backgroundPositionY: UNEXPOSED.Δ,
 get_backgroundPositionY: UNEXPOSED.Δ,
 put_wordSpacing: UNEXPOSED.Δ,
 get_wordSpacing: UNEXPOSED.Δ,
 put_letterSpacing: UNEXPOSED.Δ,
 get_letterSpacing: UNEXPOSED.Δ,
 put_textDecoration: UNEXPOSED.Δ,
 get_textDecoration: UNEXPOSED.Δ,
 put_textDecorationNone: UNEXPOSED.Δ,
 get_textDecorationNone: UNEXPOSED.Δ,
 put_textDecorationUnderline: UNEXPOSED.Δ,
 get_textDecorationUnderline: UNEXPOSED.Δ,
 put_textDecorationOverline: UNEXPOSED.Δ,
 get_textDecorationOverline: UNEXPOSED.Δ,
 put_textDecorationLineThrough: UNEXPOSED.Δ,
 get_textDecorationLineThrough: UNEXPOSED.Δ,
 put_textDecorationBlink: UNEXPOSED.Δ,
 get_textDecorationBlink: UNEXPOSED.Δ,
 put_verticalAlign: UNEXPOSED.Δ,
 get_verticalAlign: UNEXPOSED.Δ,
 put_textTransform: UNEXPOSED.Δ,
 get_textTransform: UNEXPOSED.Δ,
 put_textAlign: UNEXPOSED.Δ,
 get_textAlign: UNEXPOSED.Δ,
 put_textIndent: UNEXPOSED.Δ,
 get_textIndent: UNEXPOSED.Δ,
 put_lineHeight: UNEXPOSED.Δ,
 get_lineHeight: UNEXPOSED.Δ,
 put_marginTop: UNEXPOSED.Δ,
 get_marginTop: UNEXPOSED.Δ,
 put_marginRight: UNEXPOSED.Δ,
 get_marginRight: UNEXPOSED.Δ,
 put_marginBottom: UNEXPOSED.Δ,
 get_marginBottom: UNEXPOSED.Δ,
 put_marginLeft: UNEXPOSED.Δ,
 get_marginLeft: UNEXPOSED.Δ,
 put_margin: UNEXPOSED.Δ,
 get_margin: UNEXPOSED.Δ,
 put_paddingTop: UNEXPOSED.Δ,
 get_paddingTop: UNEXPOSED.Δ,
 put_paddingRight: UNEXPOSED.Δ,
 get_paddingRight: UNEXPOSED.Δ,
 put_paddingBottom: UNEXPOSED.Δ,
 get_paddingBottom: UNEXPOSED.Δ,
 put_paddingLeft: UNEXPOSED.Δ,
 get_paddingLeft: UNEXPOSED.Δ,
 put_padding: UNEXPOSED.Δ,
 get_padding: UNEXPOSED.Δ,
 put_border: UNEXPOSED.Δ,
 get_border: UNEXPOSED.Δ,
 put_borderTop: UNEXPOSED.Δ,
 get_borderTop: UNEXPOSED.Δ,
 put_borderRight: UNEXPOSED.Δ,
 get_borderRight: UNEXPOSED.Δ,
 put_borderBottom: UNEXPOSED.Δ,
 get_borderBottom: UNEXPOSED.Δ,
 put_borderLeft: UNEXPOSED.Δ,
 get_borderLeft: UNEXPOSED.Δ,
 put_borderColor: UNEXPOSED.Δ,
 get_borderColor: UNEXPOSED.Δ,
 put_borderTopColor: UNEXPOSED.Δ,
 get_borderTopColor: UNEXPOSED.Δ,
 put_borderRightColor: UNEXPOSED.Δ,
 get_borderRightColor: UNEXPOSED.Δ,
 put_borderBottomColor: UNEXPOSED.Δ,
 get_borderBottomColor: UNEXPOSED.Δ,
 put_borderLeftColor: UNEXPOSED.Δ,
 get_borderLeftColor: UNEXPOSED.Δ,
 put_borderWidth: UNEXPOSED.Δ,
 get_borderWidth: UNEXPOSED.Δ,
 put_borderTopWidth: UNEXPOSED.Δ,
 get_borderTopWidth: UNEXPOSED.Δ,
 put_borderRightWidth: UNEXPOSED.Δ,
 get_borderRightWidth: UNEXPOSED.Δ,
 put_borderBottomWidth: UNEXPOSED.Δ,
 get_borderBottomWidth: UNEXPOSED.Δ,
 put_borderLeftWidth: UNEXPOSED.Δ,
 get_borderLeftWidth: UNEXPOSED.Δ,
 put_borderStyle: UNEXPOSED.Δ,
 get_borderStyle: UNEXPOSED.Δ,
 put_borderTopStyle: UNEXPOSED.Δ,
 get_borderTopStyle: UNEXPOSED.Δ,
 put_borderRightStyle: UNEXPOSED.Δ,
 get_borderRightStyle: UNEXPOSED.Δ,
 put_borderBottomStyle: UNEXPOSED.Δ,
 get_borderBottomStyle: UNEXPOSED.Δ,
 put_borderLeftStyle: UNEXPOSED.Δ,
 get_borderLeftStyle: UNEXPOSED.Δ,
 put_width: UNEXPOSED.Δ,
 get_width: UNEXPOSED.Δ,
 put_height: UNEXPOSED.Δ,
 get_height: UNEXPOSED.Δ,
 put_styleFloat: UNEXPOSED.Δ,
 get_styleFloat: UNEXPOSED.Δ,
 put_clear: UNEXPOSED.Δ,
 get_clear: UNEXPOSED.Δ,
 put_display: UNEXPOSED.Δ,
 get_display: UNEXPOSED.Δ,
 put_visibility: UNEXPOSED.Δ,
 get_visibility: UNEXPOSED.Δ,
 put_listStyleType: UNEXPOSED.Δ,
 get_listStyleType: UNEXPOSED.Δ,
 put_listStylePosition: UNEXPOSED.Δ,
 get_listStylePosition: UNEXPOSED.Δ,
 put_listStyleImage: UNEXPOSED.Δ,
 get_listStyleImage: UNEXPOSED.Δ,
 put_listStyle: UNEXPOSED.Δ,
 get_listStyle: UNEXPOSED.Δ,
 put_whiteSpace: UNEXPOSED.Δ,
 get_whiteSpace: UNEXPOSED.Δ,
 put_top: UNEXPOSED.Δ,
 get_top: UNEXPOSED.Δ,
 put_left: UNEXPOSED.Δ,
 get_left: UNEXPOSED.Δ,
 get_position: UNEXPOSED.Δ,
 put_zIndex: UNEXPOSED.Δ,
 get_zIndex: UNEXPOSED.Δ,
 put_overflow: UNEXPOSED.Δ,
 get_overflow: UNEXPOSED.Δ,
 put_pageBreakBefore: UNEXPOSED.Δ,
 get_pageBreakBefore: UNEXPOSED.Δ,
 put_pageBreakAfter: UNEXPOSED.Δ,
 get_pageBreakAfter: UNEXPOSED.Δ,
 put_cssText: UNEXPOSED.Δ,
 get_cssText: UNEXPOSED.Δ,
 put_cursor: UNEXPOSED.Δ,
 get_cursor: UNEXPOSED.Δ,
 put_clip: UNEXPOSED.Δ,
 get_clip: UNEXPOSED.Δ,
 put_filter: UNEXPOSED.Δ,
 get_filter: UNEXPOSED.Δ,
 setAttribute: UNEXPOSED.Δ,
 getAttribute: UNEXPOSED.Δ,
 removeAttribute: UNEXPOSED.Δ
});

var IHTMLRuleStyle2Vtbl = new StructT('IHTMLRuleStyle2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_tableLayout: UNEXPOSED.Δ,
 get_tableLayout: UNEXPOSED.Δ,
 put_borderCollapse: UNEXPOSED.Δ,
 get_borderCollapse: UNEXPOSED.Δ,
 put_direction: UNEXPOSED.Δ,
 get_direction: UNEXPOSED.Δ,
 put_behavior: UNEXPOSED.Δ,
 get_behavior: UNEXPOSED.Δ,
 put_position: UNEXPOSED.Δ,
 get_position: UNEXPOSED.Δ,
 put_unicodeBidi: UNEXPOSED.Δ,
 get_unicodeBidi: UNEXPOSED.Δ,
 put_bottom: UNEXPOSED.Δ,
 get_bottom: UNEXPOSED.Δ,
 put_right: UNEXPOSED.Δ,
 get_right: UNEXPOSED.Δ,
 put_pixelBottom: UNEXPOSED.Δ,
 get_pixelBottom: UNEXPOSED.Δ,
 put_pixelRight: UNEXPOSED.Δ,
 get_pixelRight: UNEXPOSED.Δ,
 put_posBottom: UNEXPOSED.Δ,
 get_posBottom: UNEXPOSED.Δ,
 put_posRight: UNEXPOSED.Δ,
 get_posRight: UNEXPOSED.Δ,
 put_imeMode: UNEXPOSED.Δ,
 get_imeMode: UNEXPOSED.Δ,
 put_rubyAlign: UNEXPOSED.Δ,
 get_rubyAlign: UNEXPOSED.Δ,
 put_rubyPosition: UNEXPOSED.Δ,
 get_rubyPosition: UNEXPOSED.Δ,
 put_rubyOverhang: UNEXPOSED.Δ,
 get_rubyOverhang: UNEXPOSED.Δ,
 put_layoutGridChar: UNEXPOSED.Δ,
 get_layoutGridChar: UNEXPOSED.Δ,
 put_layoutGridLine: UNEXPOSED.Δ,
 get_layoutGridLine: UNEXPOSED.Δ,
 put_layoutGridMode: UNEXPOSED.Δ,
 get_layoutGridMode: UNEXPOSED.Δ,
 put_layoutGridType: UNEXPOSED.Δ,
 get_layoutGridType: UNEXPOSED.Δ,
 put_layoutGrid: UNEXPOSED.Δ,
 get_layoutGrid: UNEXPOSED.Δ,
 put_textAutospace: UNEXPOSED.Δ,
 get_textAutospace: UNEXPOSED.Δ,
 put_wordBreak: UNEXPOSED.Δ,
 get_wordBreak: UNEXPOSED.Δ,
 put_lineBreak: UNEXPOSED.Δ,
 get_lineBreak: UNEXPOSED.Δ,
 put_textJustify: UNEXPOSED.Δ,
 get_textJustify: UNEXPOSED.Δ,
 put_textJustifyTrim: UNEXPOSED.Δ,
 get_textJustifyTrim: UNEXPOSED.Δ,
 put_textKashida: UNEXPOSED.Δ,
 get_textKashida: UNEXPOSED.Δ,
 put_overflowX: UNEXPOSED.Δ,
 get_overflowX: UNEXPOSED.Δ,
 put_overflowY: UNEXPOSED.Δ,
 get_overflowY: UNEXPOSED.Δ,
 put_accelerator: UNEXPOSED.Δ,
 get_accelerator: UNEXPOSED.Δ
});

var IHTMLRuleStyle3Vtbl = new StructT('IHTMLRuleStyle3Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_layoutFlow: UNEXPOSED.Δ,
 get_layoutFlow: UNEXPOSED.Δ,
 put_zoom: UNEXPOSED.Δ,
 get_zoom: UNEXPOSED.Δ,
 put_wordWrap: UNEXPOSED.Δ,
 get_wordWrap: UNEXPOSED.Δ,
 put_textUnderlinePosition: UNEXPOSED.Δ,
 get_textUnderlinePosition: UNEXPOSED.Δ,
 put_scrollbarBaseColor: UNEXPOSED.Δ,
 get_scrollbarBaseColor: UNEXPOSED.Δ,
 put_scrollbarFaceColor: UNEXPOSED.Δ,
 get_scrollbarFaceColor: UNEXPOSED.Δ,
 put_scrollbar3dLightColor: UNEXPOSED.Δ,
 get_scrollbar3dLightColor: UNEXPOSED.Δ,
 put_scrollbarShadowColor: UNEXPOSED.Δ,
 get_scrollbarShadowColor: UNEXPOSED.Δ,
 put_scrollbarHighlightColor: UNEXPOSED.Δ,
 get_scrollbarHighlightColor: UNEXPOSED.Δ,
 put_scrollbarDarkShadowColor: UNEXPOSED.Δ,
 get_scrollbarDarkShadowColor: UNEXPOSED.Δ,
 put_scrollbarArrowColor: UNEXPOSED.Δ,
 get_scrollbarArrowColor: UNEXPOSED.Δ,
 put_scrollbarTrackColor: UNEXPOSED.Δ,
 get_scrollbarTrackColor: UNEXPOSED.Δ,
 put_writingMode: UNEXPOSED.Δ,
 get_writingMode: UNEXPOSED.Δ,
 put_textAlignLast: UNEXPOSED.Δ,
 get_textAlignLast: UNEXPOSED.Δ,
 put_textKashidaSpace: UNEXPOSED.Δ,
 get_textKashidaSpace: UNEXPOSED.Δ
});

var IHTMLRuleStyle4Vtbl = new StructT('IHTMLRuleStyle4Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_textOverflow: UNEXPOSED.Δ,
 get_textOverflow: UNEXPOSED.Δ,
 put_minHeight: UNEXPOSED.Δ,
 get_minHeight: UNEXPOSED.Δ
});

var IHTMLRuleStyle5Vtbl = new StructT('IHTMLRuleStyle5Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_msInterpolationMode: UNEXPOSED.Δ,
 get_msInterpolationMode: UNEXPOSED.Δ,
 put_maxHeight: UNEXPOSED.Δ,
 get_maxHeight: UNEXPOSED.Δ,
 put_minWidth: UNEXPOSED.Δ,
 get_minWidth: UNEXPOSED.Δ,
 put_maxWidth: UNEXPOSED.Δ,
 get_maxWidth: UNEXPOSED.Δ
});

var IHTMLRuleStyle6Vtbl = new StructT('IHTMLRuleStyle6Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_content: UNEXPOSED.Δ,
 get_content: UNEXPOSED.Δ,
 put_captionSide: UNEXPOSED.Δ,
 get_captionSide: UNEXPOSED.Δ,
 put_counterIncrement: UNEXPOSED.Δ,
 get_counterIncrement: UNEXPOSED.Δ,
 put_counterReset: UNEXPOSED.Δ,
 get_counterReset: UNEXPOSED.Δ,
 put_outline: UNEXPOSED.Δ,
 get_outline: UNEXPOSED.Δ,
 put_outlineWidth: UNEXPOSED.Δ,
 get_outlineWidth: UNEXPOSED.Δ,
 put_outlineStyle: UNEXPOSED.Δ,
 get_outlineStyle: UNEXPOSED.Δ,
 put_outlineColor: UNEXPOSED.Δ,
 get_outlineColor: UNEXPOSED.Δ,
 put_boxSizing: UNEXPOSED.Δ,
 get_boxSizing: UNEXPOSED.Δ,
 put_borderSpacing: UNEXPOSED.Δ,
 get_borderSpacing: UNEXPOSED.Δ,
 put_orphans: UNEXPOSED.Δ,
 get_orphans: UNEXPOSED.Δ,
 put_widows: UNEXPOSED.Δ,
 get_widows: UNEXPOSED.Δ,
 put_pageBreakInside: UNEXPOSED.Δ,
 get_pageBreakInside: UNEXPOSED.Δ,
 put_emptyCells: UNEXPOSED.Δ,
 get_emptyCells: UNEXPOSED.Δ,
 put_msBlockProgression: UNEXPOSED.Δ,
 get_msBlockProgression: UNEXPOSED.Δ,
 put_quotes: UNEXPOSED.Δ,
 get_quotes: UNEXPOSED.Δ
});

var DispHTMLStyleVtbl = new StructT('DispHTMLStyleVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var DispHTMLRuleStyleVtbl = new StructT('DispHTMLRuleStyleVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLRenderStyleVtbl = new StructT('IHTMLRenderStyleVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_textLineThroughStyle: UNEXPOSED.Δ,
 get_textLineThroughStyle: UNEXPOSED.Δ,
 put_textUnderlineStyle: UNEXPOSED.Δ,
 get_textUnderlineStyle: UNEXPOSED.Δ,
 put_textEffect: UNEXPOSED.Δ,
 get_textEffect: UNEXPOSED.Δ,
 put_textColor: UNEXPOSED.Δ,
 get_textColor: UNEXPOSED.Δ,
 put_textBackgroundColor: UNEXPOSED.Δ,
 get_textBackgroundColor: UNEXPOSED.Δ,
 put_textDecorationColor: UNEXPOSED.Δ,
 get_textDecorationColor: UNEXPOSED.Δ,
 put_renderingPriority: UNEXPOSED.Δ,
 get_renderingPriority: UNEXPOSED.Δ,
 put_defaultTextSelection: UNEXPOSED.Δ,
 get_defaultTextSelection: UNEXPOSED.Δ,
 put_textDecoration: UNEXPOSED.Δ,
 get_textDecoration: UNEXPOSED.Δ
});

var DispHTMLRenderStyleVtbl = new StructT('DispHTMLRenderStyleVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLCurrentStyleVtbl = new StructT('IHTMLCurrentStyleVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_position: UNEXPOSED.Δ,
 get_styleFloat: UNEXPOSED.Δ,
 get_color: UNEXPOSED.Δ,
 get_backgroundColor: UNEXPOSED.Δ,
 get_fontFamily: UNEXPOSED.Δ,
 get_fontStyle: UNEXPOSED.Δ,
 get_fontVariant: UNEXPOSED.Δ,
 get_fontWeight: UNEXPOSED.Δ,
 get_fontSize: UNEXPOSED.Δ,
 get_backgroundImage: UNEXPOSED.Δ,
 get_backgroundPositionX: UNEXPOSED.Δ,
 get_backgroundPositionY: UNEXPOSED.Δ,
 get_backgroundRepeat: UNEXPOSED.Δ,
 get_borderLeftColor: UNEXPOSED.Δ,
 get_borderTopColor: UNEXPOSED.Δ,
 get_borderRightColor: UNEXPOSED.Δ,
 get_borderBottomColor: UNEXPOSED.Δ,
 get_borderTopStyle: UNEXPOSED.Δ,
 get_borderRightStyle: UNEXPOSED.Δ,
 get_borderBottomStyle: UNEXPOSED.Δ,
 get_borderLeftStyle: UNEXPOSED.Δ,
 get_borderTopWidth: UNEXPOSED.Δ,
 get_borderRightWidth: UNEXPOSED.Δ,
 get_borderBottomWidth: UNEXPOSED.Δ,
 get_borderLeftWidth: UNEXPOSED.Δ,
 get_left: UNEXPOSED.Δ,
 get_top: UNEXPOSED.Δ,
 get_width: UNEXPOSED.Δ,
 get_height: UNEXPOSED.Δ,
 get_paddingLeft: UNEXPOSED.Δ,
 get_paddingTop: UNEXPOSED.Δ,
 get_paddingRight: UNEXPOSED.Δ,
 get_paddingBottom: UNEXPOSED.Δ,
 get_textAlign: UNEXPOSED.Δ,
 get_textDecoration: UNEXPOSED.Δ,
 get_display: UNEXPOSED.Δ,
 get_visibility: UNEXPOSED.Δ,
 get_zIndex: UNEXPOSED.Δ,
 get_letterSpacing: UNEXPOSED.Δ,
 get_lineHeight: UNEXPOSED.Δ,
 get_textIndent: UNEXPOSED.Δ,
 get_verticalAlign: UNEXPOSED.Δ,
 get_backgroundAttachment: UNEXPOSED.Δ,
 get_marginTop: UNEXPOSED.Δ,
 get_marginRight: UNEXPOSED.Δ,
 get_marginBottom: UNEXPOSED.Δ,
 get_marginLeft: UNEXPOSED.Δ,
 get_clear: UNEXPOSED.Δ,
 get_listStyleType: UNEXPOSED.Δ,
 get_listStylePosition: UNEXPOSED.Δ,
 get_listStyleImage: UNEXPOSED.Δ,
 get_clipTop: UNEXPOSED.Δ,
 get_clipRight: UNEXPOSED.Δ,
 get_clipBottom: UNEXPOSED.Δ,
 get_clipLeft: UNEXPOSED.Δ,
 get_overflow: UNEXPOSED.Δ,
 get_pageBreakBefore: UNEXPOSED.Δ,
 get_pageBreakAfter: UNEXPOSED.Δ,
 get_cursor: UNEXPOSED.Δ,
 get_tableLayout: UNEXPOSED.Δ,
 get_borderCollapse: UNEXPOSED.Δ,
 get_direction: UNEXPOSED.Δ,
 get_behavior: UNEXPOSED.Δ,
 getAttribute: UNEXPOSED.Δ,
 get_unicodeBidi: UNEXPOSED.Δ,
 get_right: UNEXPOSED.Δ,
 get_bottom: UNEXPOSED.Δ,
 get_imeMode: UNEXPOSED.Δ,
 get_rubyAlign: UNEXPOSED.Δ,
 get_rubyPosition: UNEXPOSED.Δ,
 get_rubyOverhang: UNEXPOSED.Δ,
 get_textAutospace: UNEXPOSED.Δ,
 get_lineBreak: UNEXPOSED.Δ,
 get_wordBreak: UNEXPOSED.Δ,
 get_textJustify: UNEXPOSED.Δ,
 get_textJustifyTrim: UNEXPOSED.Δ,
 get_textKashida: UNEXPOSED.Δ,
 get_blockDirection: UNEXPOSED.Δ,
 get_layoutGridChar: UNEXPOSED.Δ,
 get_layoutGridLine: UNEXPOSED.Δ,
 get_layoutGridMode: UNEXPOSED.Δ,
 get_layoutGridType: UNEXPOSED.Δ,
 get_borderStyle: UNEXPOSED.Δ,
 get_borderColor: UNEXPOSED.Δ,
 get_borderWidth: UNEXPOSED.Δ,
 get_padding: UNEXPOSED.Δ,
 get_margin: UNEXPOSED.Δ,
 get_accelerator: UNEXPOSED.Δ,
 get_overflowX: UNEXPOSED.Δ,
 get_overflowY: UNEXPOSED.Δ,
 get_textTransform: UNEXPOSED.Δ
});

var IHTMLCurrentStyle2Vtbl = new StructT('IHTMLCurrentStyle2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_layoutFlow: UNEXPOSED.Δ,
 get_wordWrap: UNEXPOSED.Δ,
 get_textUnderlinePosition: UNEXPOSED.Δ,
 get_hasLayout: UNEXPOSED.Δ,
 get_scrollbarBaseColor: UNEXPOSED.Δ,
 get_scrollbarFaceColor: UNEXPOSED.Δ,
 get_scrollbar3dLightColor: UNEXPOSED.Δ,
 get_scrollbarShadowColor: UNEXPOSED.Δ,
 get_scrollbarHighlightColor: UNEXPOSED.Δ,
 get_scrollbarDarkShadowColor: UNEXPOSED.Δ,
 get_scrollbarArrowColor: UNEXPOSED.Δ,
 get_scrollbarTrackColor: UNEXPOSED.Δ,
 get_writingMode: UNEXPOSED.Δ,
 get_zoom: UNEXPOSED.Δ,
 get_filter: UNEXPOSED.Δ,
 get_textAlignLast: UNEXPOSED.Δ,
 get_textKashidaSpace: UNEXPOSED.Δ,
 get_isBlock: UNEXPOSED.Δ
});

var IHTMLCurrentStyle3Vtbl = new StructT('IHTMLCurrentStyle3Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_textOverflow: UNEXPOSED.Δ,
 get_minHeight: UNEXPOSED.Δ,
 get_wordSpacing: UNEXPOSED.Δ,
 get_whiteSpace: UNEXPOSED.Δ
});

var IHTMLCurrentStyle4Vtbl = new StructT('IHTMLCurrentStyle4Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_msInterpolationMode: UNEXPOSED.Δ,
 get_maxHeight: UNEXPOSED.Δ,
 get_minWidth: UNEXPOSED.Δ,
 get_maxWidth: UNEXPOSED.Δ
});

var IHTMLCurrentStyle5Vtbl = new StructT('IHTMLCurrentStyle5Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_captionSide: UNEXPOSED.Δ,
 get_outline: UNEXPOSED.Δ,
 get_outlineWidth: UNEXPOSED.Δ,
 get_outlineStyle: UNEXPOSED.Δ,
 get_outlineColor: UNEXPOSED.Δ,
 get_boxSizing: UNEXPOSED.Δ,
 get_borderSpacing: UNEXPOSED.Δ,
 get_orphans: UNEXPOSED.Δ,
 get_widows: UNEXPOSED.Δ,
 get_pageBreakInside: UNEXPOSED.Δ,
 get_emptyCells: UNEXPOSED.Δ,
 get_msBlockProgression: UNEXPOSED.Δ,
 get_quotes: UNEXPOSED.Δ
});

var DispHTMLCurrentStyleVtbl = new StructT('DispHTMLCurrentStyleVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLElementVtbl = new StructT('IHTMLElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 setAttribute: UNEXPOSED.Δ,
 getAttribute: UNEXPOSED.Δ,
 removeAttribute: UNEXPOSED.Δ,
 put_className: UNEXPOSED.Δ,
 get_className: UNEXPOSED.Δ,
 put_id: UNEXPOSED.Δ,
 get_id: UNEXPOSED.Δ,
 get_tagName: UNEXPOSED.Δ,
 get_parentElement: UNEXPOSED.Δ,
 get_style: UNEXPOSED.Δ,
 put_onhelp: UNEXPOSED.Δ,
 get_onhelp: UNEXPOSED.Δ,
 put_onclick: UNEXPOSED.Δ,
 get_onclick: UNEXPOSED.Δ,
 put_ondblclick: UNEXPOSED.Δ,
 get_ondblclick: UNEXPOSED.Δ,
 put_onkeydown: UNEXPOSED.Δ,
 get_onkeydown: UNEXPOSED.Δ,
 put_onkeyup: UNEXPOSED.Δ,
 get_onkeyup: UNEXPOSED.Δ,
 put_onkeypress: UNEXPOSED.Δ,
 get_onkeypress: UNEXPOSED.Δ,
 put_onmouseout: UNEXPOSED.Δ,
 get_onmouseout: UNEXPOSED.Δ,
 put_onmouseover: UNEXPOSED.Δ,
 get_onmouseover: UNEXPOSED.Δ,
 put_onmousemove: UNEXPOSED.Δ,
 get_onmousemove: UNEXPOSED.Δ,
 put_onmousedown: UNEXPOSED.Δ,
 get_onmousedown: UNEXPOSED.Δ,
 put_onmouseup: UNEXPOSED.Δ,
 get_onmouseup: UNEXPOSED.Δ,
 get_document: UNEXPOSED.Δ,
 put_title: UNEXPOSED.Δ,
 get_title: UNEXPOSED.Δ,
 put_language: UNEXPOSED.Δ,
 get_language: UNEXPOSED.Δ,
 put_onselectstart: UNEXPOSED.Δ,
 get_onselectstart: UNEXPOSED.Δ,
 scrollIntoView: UNEXPOSED.Δ,
 contains: UNEXPOSED.Δ,
 get_sourceIndex: UNEXPOSED.Δ,
 get_recordNumber: UNEXPOSED.Δ,
 put_lang: UNEXPOSED.Δ,
 get_lang: UNEXPOSED.Δ,
 get_offsetLeft: UNEXPOSED.Δ,
 get_offsetTop: UNEXPOSED.Δ,
 get_offsetWidth: UNEXPOSED.Δ,
 get_offsetHeight: UNEXPOSED.Δ,
 get_offsetParent: UNEXPOSED.Δ,
 put_innerHTML: UNEXPOSED.Δ,
 get_innerHTML: UNEXPOSED.Δ,
 put_innerText: UNEXPOSED.Δ,
 get_innerText: UNEXPOSED.Δ,
 put_outerHTML: UNEXPOSED.Δ,
 get_outerHTML: UNEXPOSED.Δ,
 put_outerText: UNEXPOSED.Δ,
 get_outerText: UNEXPOSED.Δ,
 insertAdjacentHTML: UNEXPOSED.Δ,
 insertAdjacentText: UNEXPOSED.Δ,
 get_parentTextEdit: UNEXPOSED.Δ,
 get_isTextEdit: UNEXPOSED.Δ,
 click: UNEXPOSED.Δ,
 get_filters: UNEXPOSED.Δ,
 put_ondragstart: UNEXPOSED.Δ,
 get_ondragstart: UNEXPOSED.Δ,
 toString: UNEXPOSED.Δ,
 put_onbeforeupdate: UNEXPOSED.Δ,
 get_onbeforeupdate: UNEXPOSED.Δ,
 put_onafterupdate: UNEXPOSED.Δ,
 get_onafterupdate: UNEXPOSED.Δ,
 put_onerrorupdate: UNEXPOSED.Δ,
 get_onerrorupdate: UNEXPOSED.Δ,
 put_onrowexit: UNEXPOSED.Δ,
 get_onrowexit: UNEXPOSED.Δ,
 put_onrowenter: UNEXPOSED.Δ,
 get_onrowenter: UNEXPOSED.Δ,
 put_ondatasetchanged: UNEXPOSED.Δ,
 get_ondatasetchanged: UNEXPOSED.Δ,
 put_ondataavailable: UNEXPOSED.Δ,
 get_ondataavailable: UNEXPOSED.Δ,
 put_ondatasetcomplete: UNEXPOSED.Δ,
 get_ondatasetcomplete: UNEXPOSED.Δ,
 put_onfilterchange: UNEXPOSED.Δ,
 get_onfilterchange: UNEXPOSED.Δ,
 get_children: UNEXPOSED.Δ,
 get_all: UNEXPOSED.Δ
});

var IHTMLRectVtbl = new StructT('IHTMLRectVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_left: UNEXPOSED.Δ,
 get_left: UNEXPOSED.Δ,
 put_top: UNEXPOSED.Δ,
 get_top: UNEXPOSED.Δ,
 put_right: UNEXPOSED.Δ,
 get_right: UNEXPOSED.Δ,
 put_bottom: UNEXPOSED.Δ,
 get_bottom: UNEXPOSED.Δ
});

var IHTMLRectCollectionVtbl = new StructT('IHTMLRectCollectionVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_length: UNEXPOSED.Δ,
 get__newEnum: UNEXPOSED.Δ,
 item: UNEXPOSED.Δ
});

var IHTMLElementCollectionVtbl = new StructT('IHTMLElementCollectionVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 toString: UNEXPOSED.Δ,
 put_length: UNEXPOSED.Δ,
 get_length: UNEXPOSED.Δ,
 get__newEnum: UNEXPOSED.Δ,
 item: UNEXPOSED.Δ,
 tags: UNEXPOSED.Δ
});

var IHTMLElement2Vtbl = new StructT('IHTMLElement2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_scopeName: UNEXPOSED.Δ,
 setCapture: UNEXPOSED.Δ,
 releaseCapture: UNEXPOSED.Δ,
 put_onlosecapture: UNEXPOSED.Δ,
 get_onlosecapture: UNEXPOSED.Δ,
 componentFromPoint: UNEXPOSED.Δ,
 doScroll: UNEXPOSED.Δ,
 put_onscroll: UNEXPOSED.Δ,
 get_onscroll: UNEXPOSED.Δ,
 put_ondrag: UNEXPOSED.Δ,
 get_ondrag: UNEXPOSED.Δ,
 put_ondragend: UNEXPOSED.Δ,
 get_ondragend: UNEXPOSED.Δ,
 put_ondragenter: UNEXPOSED.Δ,
 get_ondragenter: UNEXPOSED.Δ,
 put_ondragover: UNEXPOSED.Δ,
 get_ondragover: UNEXPOSED.Δ,
 put_ondragleave: UNEXPOSED.Δ,
 get_ondragleave: UNEXPOSED.Δ,
 put_ondrop: UNEXPOSED.Δ,
 get_ondrop: UNEXPOSED.Δ,
 put_onbeforecut: UNEXPOSED.Δ,
 get_onbeforecut: UNEXPOSED.Δ,
 put_oncut: UNEXPOSED.Δ,
 get_oncut: UNEXPOSED.Δ,
 put_onbeforecopy: UNEXPOSED.Δ,
 get_onbeforecopy: UNEXPOSED.Δ,
 put_oncopy: UNEXPOSED.Δ,
 get_oncopy: UNEXPOSED.Δ,
 put_onbeforepaste: UNEXPOSED.Δ,
 get_onbeforepaste: UNEXPOSED.Δ,
 put_onpaste: UNEXPOSED.Δ,
 get_onpaste: UNEXPOSED.Δ,
 get_currentStyle: UNEXPOSED.Δ,
 put_onpropertychange: UNEXPOSED.Δ,
 get_onpropertychange: UNEXPOSED.Δ,
 getClientRects: UNEXPOSED.Δ,
 getBoundingClientRect: UNEXPOSED.Δ,
 setExpression: UNEXPOSED.Δ,
 getExpression: UNEXPOSED.Δ,
 removeExpression: UNEXPOSED.Δ,
 put_tabIndex: UNEXPOSED.Δ,
 get_tabIndex: UNEXPOSED.Δ,
 focus: UNEXPOSED.Δ,
 put_accessKey: UNEXPOSED.Δ,
 get_accessKey: UNEXPOSED.Δ,
 put_onblur: UNEXPOSED.Δ,
 get_onblur: UNEXPOSED.Δ,
 put_onfocus: UNEXPOSED.Δ,
 get_onfocus: UNEXPOSED.Δ,
 put_onresize: UNEXPOSED.Δ,
 get_onresize: UNEXPOSED.Δ,
 blur: UNEXPOSED.Δ,
 addFilter: UNEXPOSED.Δ,
 removeFilter: UNEXPOSED.Δ,
 get_clientHeight: UNEXPOSED.Δ,
 get_clientWidth: UNEXPOSED.Δ,
 get_clientTop: UNEXPOSED.Δ,
 get_clientLeft: UNEXPOSED.Δ,
 attachEvent: UNEXPOSED.Δ,
 detachEvent: UNEXPOSED.Δ,
 get_readyState: UNEXPOSED.Δ,
 put_onreadystatechange: UNEXPOSED.Δ,
 get_onreadystatechange: UNEXPOSED.Δ,
 put_onrowsdelete: UNEXPOSED.Δ,
 get_onrowsdelete: UNEXPOSED.Δ,
 put_onrowsinserted: UNEXPOSED.Δ,
 get_onrowsinserted: UNEXPOSED.Δ,
 put_oncellchange: UNEXPOSED.Δ,
 get_oncellchange: UNEXPOSED.Δ,
 put_dir: UNEXPOSED.Δ,
 get_dir: UNEXPOSED.Δ,
 createControlRange: UNEXPOSED.Δ,
 get_scrollHeight: UNEXPOSED.Δ,
 get_scrollWidth: UNEXPOSED.Δ,
 put_scrollTop: UNEXPOSED.Δ,
 get_scrollTop: UNEXPOSED.Δ,
 put_scrollLeft: UNEXPOSED.Δ,
 get_scrollLeft: UNEXPOSED.Δ,
 clearAttributes: UNEXPOSED.Δ,
 mergeAttributes: UNEXPOSED.Δ,
 put_oncontextmenu: UNEXPOSED.Δ,
 get_oncontextmenu: UNEXPOSED.Δ,
 insertAdjacentElement: UNEXPOSED.Δ,
 applyElement: UNEXPOSED.Δ,
 getAdjacentText: UNEXPOSED.Δ,
 replaceAdjacentText: UNEXPOSED.Δ,
 get_canHaveChildren: UNEXPOSED.Δ,
 addBehavior: UNEXPOSED.Δ,
 removeBehavior: UNEXPOSED.Δ,
 get_runtimeStyle: UNEXPOSED.Δ,
 get_behaviorUrns: UNEXPOSED.Δ,
 put_tagUrn: UNEXPOSED.Δ,
 get_tagUrn: UNEXPOSED.Δ,
 put_onbeforeeditfocus: UNEXPOSED.Δ,
 get_onbeforeeditfocus: UNEXPOSED.Δ,
 get_readyStateValue: UNEXPOSED.Δ,
 getElementsByTagName: UNEXPOSED.Δ
});

var IHTMLAttributeCollection3Vtbl = new StructT('IHTMLAttributeCollection3Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 getNamedItem: UNEXPOSED.Δ,
 setNamedItem: UNEXPOSED.Δ,
 removeNamedItem: UNEXPOSED.Δ,
 item: UNEXPOSED.Δ,
 get_length: UNEXPOSED.Δ
});

var IHTMLDOMNodeVtbl = new StructT('IHTMLDOMNodeVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_nodeType: UNEXPOSED.Δ,
 get_parentNode: UNEXPOSED.Δ,
 hasChildNodes: UNEXPOSED.Δ,
 get_childNodes: UNEXPOSED.Δ,
 get_attributes: UNEXPOSED.Δ,
 insertBefore: UNEXPOSED.Δ,
 removeChild: UNEXPOSED.Δ,
 replaceChild: UNEXPOSED.Δ,
 cloneNode: UNEXPOSED.Δ,
 removeNode: UNEXPOSED.Δ,
 swapNode: UNEXPOSED.Δ,
 replaceNode: UNEXPOSED.Δ,
 appendChild: UNEXPOSED.Δ,
 get_nodeName: UNEXPOSED.Δ,
 put_nodeValue: UNEXPOSED.Δ,
 get_nodeValue: UNEXPOSED.Δ,
 get_firstChild: UNEXPOSED.Δ,
 get_lastChild: UNEXPOSED.Δ,
 get_previousSibling: UNEXPOSED.Δ,
 get_nextSibling: UNEXPOSED.Δ
});

var IHTMLDOMNode2Vtbl = new StructT('IHTMLDOMNode2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_ownerDocument: UNEXPOSED.Δ
});

var IHTMLDOMAttributeVtbl = new StructT('IHTMLDOMAttributeVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_nodeName: UNEXPOSED.Δ,
 put_nodeValue: UNEXPOSED.Δ,
 get_nodeValue: UNEXPOSED.Δ,
 get_specified: UNEXPOSED.Δ
});

var IHTMLDOMAttribute2Vtbl = new StructT('IHTMLDOMAttribute2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_name: UNEXPOSED.Δ,
 put_value: UNEXPOSED.Δ,
 get_value: UNEXPOSED.Δ,
 get_expando: UNEXPOSED.Δ,
 get_nodeType: UNEXPOSED.Δ,
 get_parentNode: UNEXPOSED.Δ,
 get_childNodes: UNEXPOSED.Δ,
 get_firstChild: UNEXPOSED.Δ,
 get_lastChild: UNEXPOSED.Δ,
 get_previousSibling: UNEXPOSED.Δ,
 get_nextSibling: UNEXPOSED.Δ,
 get_attributes: UNEXPOSED.Δ,
 get_ownerDocument: UNEXPOSED.Δ,
 insertBefore: UNEXPOSED.Δ,
 replaceChild: UNEXPOSED.Δ,
 removeChild: UNEXPOSED.Δ,
 appendChild: UNEXPOSED.Δ,
 hasChildNodes: UNEXPOSED.Δ,
 cloneNode: UNEXPOSED.Δ
});

var IHTMLDOMAttribute3Vtbl = new StructT('IHTMLDOMAttribute3Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_nodeValue: UNEXPOSED.Δ,
 get_nodeValue: UNEXPOSED.Δ,
 put_value: UNEXPOSED.Δ,
 get_value: UNEXPOSED.Δ,
 get_specified: UNEXPOSED.Δ,
 get_ownerElement: UNEXPOSED.Δ
});

var IHTMLDOMTextNodeVtbl = new StructT('IHTMLDOMTextNodeVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_data: UNEXPOSED.Δ,
 get_data: UNEXPOSED.Δ,
 toString: UNEXPOSED.Δ,
 get_length: UNEXPOSED.Δ,
 splitText: UNEXPOSED.Δ
});

var IHTMLDOMTextNode2Vtbl = new StructT('IHTMLDOMTextNode2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 substringData: UNEXPOSED.Δ,
 appendData: UNEXPOSED.Δ,
 insertData: UNEXPOSED.Δ,
 deleteData: UNEXPOSED.Δ,
 replaceData: UNEXPOSED.Δ
});

var IHTMLDOMImplementationVtbl = new StructT('IHTMLDOMImplementationVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 hasFeature: UNEXPOSED.Δ
});

var DispHTMLDOMAttributeVtbl = new StructT('DispHTMLDOMAttributeVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var DispHTMLDOMTextNodeVtbl = new StructT('DispHTMLDOMTextNodeVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var DispHTMLDOMImplementationVtbl = new StructT('DispHTMLDOMImplementationVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLAttributeCollectionVtbl = new StructT('IHTMLAttributeCollectionVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_length: UNEXPOSED.Δ,
 get__newEnum: UNEXPOSED.Δ,
 item: UNEXPOSED.Δ
});

var IHTMLAttributeCollection2Vtbl = new StructT('IHTMLAttributeCollection2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 getNamedItem: UNEXPOSED.Δ,
 setNamedItem: UNEXPOSED.Δ,
 removeNamedItem: UNEXPOSED.Δ
});

var IHTMLDOMChildrenCollectionVtbl = new StructT('IHTMLDOMChildrenCollectionVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_length: UNEXPOSED.Δ,
 get__newEnum: UNEXPOSED.Δ,
 item: UNEXPOSED.Δ
});

var DispHTMLAttributeCollectionVtbl = new StructT('DispHTMLAttributeCollectionVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var DispStaticNodeListVtbl = new StructT('DispStaticNodeListVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var DispDOMChildrenCollectionVtbl = new StructT('DispDOMChildrenCollectionVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var HTMLElementEvents3Vtbl = new StructT('HTMLElementEvents3Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var HTMLElementEvents2Vtbl = new StructT('HTMLElementEvents2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var HTMLElementEventsVtbl = new StructT('HTMLElementEventsVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLElement3Vtbl = new StructT('IHTMLElement3Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 mergeAttributes: UNEXPOSED.Δ,
 get_isMultiLine: UNEXPOSED.Δ,
 get_canHaveHTML: UNEXPOSED.Δ,
 put_onlayoutcomplete: UNEXPOSED.Δ,
 get_onlayoutcomplete: UNEXPOSED.Δ,
 put_onpage: UNEXPOSED.Δ,
 get_onpage: UNEXPOSED.Δ,
 put_inflateBlock: UNEXPOSED.Δ,
 get_inflateBlock: UNEXPOSED.Δ,
 put_onbeforedeactivate: UNEXPOSED.Δ,
 get_onbeforedeactivate: UNEXPOSED.Δ,
 setActive: UNEXPOSED.Δ,
 put_contentEditable: UNEXPOSED.Δ,
 get_contentEditable: UNEXPOSED.Δ,
 get_isContentEditable: UNEXPOSED.Δ,
 put_hideFocus: UNEXPOSED.Δ,
 get_hideFocus: UNEXPOSED.Δ,
 put_disabled: UNEXPOSED.Δ,
 get_disabled: UNEXPOSED.Δ,
 get_isDisabled: UNEXPOSED.Δ,
 put_onmove: UNEXPOSED.Δ,
 get_onmove: UNEXPOSED.Δ,
 put_oncontrolselect: UNEXPOSED.Δ,
 get_oncontrolselect: UNEXPOSED.Δ,
 fireEvent: UNEXPOSED.Δ,
 put_onresizestart: UNEXPOSED.Δ,
 get_onresizestart: UNEXPOSED.Δ,
 put_onresizeend: UNEXPOSED.Δ,
 get_onresizeend: UNEXPOSED.Δ,
 put_onmovestart: UNEXPOSED.Δ,
 get_onmovestart: UNEXPOSED.Δ,
 put_onmoveend: UNEXPOSED.Δ,
 get_onmoveend: UNEXPOSED.Δ,
 put_onmouseenter: UNEXPOSED.Δ,
 get_onmouseenter: UNEXPOSED.Δ,
 put_onmouseleave: UNEXPOSED.Δ,
 get_onmouseleave: UNEXPOSED.Δ,
 put_onactivate: UNEXPOSED.Δ,
 get_onactivate: UNEXPOSED.Δ,
 put_ondeactivate: UNEXPOSED.Δ,
 get_ondeactivate: UNEXPOSED.Δ,
 dragDrop: UNEXPOSED.Δ,
 get_glyphMode: UNEXPOSED.Δ
});

var IHTMLElement4Vtbl = new StructT('IHTMLElement4Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_onmousewheel: UNEXPOSED.Δ,
 get_onmousewheel: UNEXPOSED.Δ,
 normalize: UNEXPOSED.Δ,
 getAttributeNode: UNEXPOSED.Δ,
 setAttributeNode: UNEXPOSED.Δ,
 removeAttributeNode: UNEXPOSED.Δ,
 put_onbeforeactivate: UNEXPOSED.Δ,
 get_onbeforeactivate: UNEXPOSED.Δ,
 put_onfocusin: UNEXPOSED.Δ,
 get_onfocusin: UNEXPOSED.Δ,
 put_onfocusout: UNEXPOSED.Δ,
 get_onfocusout: UNEXPOSED.Δ
});

var IElementSelectorVtbl = new StructT('IElementSelectorVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 querySelector: UNEXPOSED.Δ,
 querySelectorAll: UNEXPOSED.Δ
});

var IHTMLElementRenderVtbl = new StructT('IHTMLElementRenderVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 DrawToDC: UNEXPOSED.Δ,
 SetDocumentPrinter: UNEXPOSED.Δ
});

var IHTMLUniqueNameVtbl = new StructT('IHTMLUniqueNameVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_uniqueNumber: UNEXPOSED.Δ,
 get_uniqueID: UNEXPOSED.Δ
});

var IHTMLElement5Vtbl = new StructT('IHTMLElement5Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 getAttributeNode: UNEXPOSED.Δ,
 setAttributeNode: UNEXPOSED.Δ,
 removeAttributeNode: UNEXPOSED.Δ,
 hasAttribute: UNEXPOSED.Δ,
 put_role: UNEXPOSED.Δ,
 get_role: UNEXPOSED.Δ,
 put_ariaBusy: UNEXPOSED.Δ,
 get_ariaBusy: UNEXPOSED.Δ,
 put_ariaChecked: UNEXPOSED.Δ,
 get_ariaChecked: UNEXPOSED.Δ,
 put_ariaDisabled: UNEXPOSED.Δ,
 get_ariaDisabled: UNEXPOSED.Δ,
 put_ariaExpanded: UNEXPOSED.Δ,
 get_ariaExpanded: UNEXPOSED.Δ,
 put_ariaHaspopup: UNEXPOSED.Δ,
 get_ariaHaspopup: UNEXPOSED.Δ,
 put_ariaHidden: UNEXPOSED.Δ,
 get_ariaHidden: UNEXPOSED.Δ,
 put_ariaInvalid: UNEXPOSED.Δ,
 get_ariaInvalid: UNEXPOSED.Δ,
 put_ariaMultiselectable: UNEXPOSED.Δ,
 get_ariaMultiselectable: UNEXPOSED.Δ,
 put_ariaPressed: UNEXPOSED.Δ,
 get_ariaPressed: UNEXPOSED.Δ,
 put_ariaReadonly: UNEXPOSED.Δ,
 get_ariaReadonly: UNEXPOSED.Δ,
 put_ariaRequired: UNEXPOSED.Δ,
 get_ariaRequired: UNEXPOSED.Δ,
 put_ariaSecret: UNEXPOSED.Δ,
 get_ariaSecret: UNEXPOSED.Δ,
 put_ariaSelected: UNEXPOSED.Δ,
 get_ariaSelected: UNEXPOSED.Δ,
 getAttribute: UNEXPOSED.Δ,
 setAttribute: UNEXPOSED.Δ,
 removeAttribute: UNEXPOSED.Δ,
 get_attributes: UNEXPOSED.Δ,
 put_ariaValuenow: UNEXPOSED.Δ,
 get_ariaValuenow: UNEXPOSED.Δ,
 put_ariaPosinset: UNEXPOSED.Δ,
 get_ariaPosinset: UNEXPOSED.Δ,
 put_ariaSetsize: UNEXPOSED.Δ,
 get_ariaSetsize: UNEXPOSED.Δ,
 put_ariaLevel: UNEXPOSED.Δ,
 get_ariaLevel: UNEXPOSED.Δ,
 put_ariaValuemin: UNEXPOSED.Δ,
 get_ariaValuemin: UNEXPOSED.Δ,
 put_ariaValuemax: UNEXPOSED.Δ,
 get_ariaValuemax: UNEXPOSED.Δ,
 put_ariaControls: UNEXPOSED.Δ,
 get_ariaControls: UNEXPOSED.Δ,
 put_ariaDescribedby: UNEXPOSED.Δ,
 get_ariaDescribedby: UNEXPOSED.Δ,
 put_ariaFlowto: UNEXPOSED.Δ,
 get_ariaFlowto: UNEXPOSED.Δ,
 put_ariaLabelledby: UNEXPOSED.Δ,
 get_ariaLabelledby: UNEXPOSED.Δ,
 put_ariaActivedescendant: UNEXPOSED.Δ,
 get_ariaActivedescendant: UNEXPOSED.Δ,
 put_ariaOwns: UNEXPOSED.Δ,
 get_ariaOwns: UNEXPOSED.Δ,
 hasAttributes: UNEXPOSED.Δ,
 put_ariaLive: UNEXPOSED.Δ,
 get_ariaLive: UNEXPOSED.Δ,
 put_ariaRelevant: UNEXPOSED.Δ,
 get_ariaRelevant: UNEXPOSED.Δ
});

var IHTMLDatabindingVtbl = new StructT('IHTMLDatabindingVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_dataFld: UNEXPOSED.Δ,
 get_dataFld: UNEXPOSED.Δ,
 put_dataSrc: UNEXPOSED.Δ,
 get_dataSrc: UNEXPOSED.Δ,
 put_dataFormatAs: UNEXPOSED.Δ,
 get_dataFormatAs: UNEXPOSED.Δ
});

var IHTMLDocumentVtbl = new StructT('IHTMLDocumentVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_Script: UNEXPOSED.Δ
});

var IHTMLElementDefaultsVtbl = new StructT('IHTMLElementDefaultsVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_style: UNEXPOSED.Δ,
 put_tabStop: UNEXPOSED.Δ,
 get_tabStop: UNEXPOSED.Δ,
 put_viewInheritStyle: UNEXPOSED.Δ,
 get_viewInheritStyle: UNEXPOSED.Δ,
 put_viewMasterTab: UNEXPOSED.Δ,
 get_viewMasterTab: UNEXPOSED.Δ,
 put_scrollSegmentX: UNEXPOSED.Δ,
 get_scrollSegmentX: UNEXPOSED.Δ,
 put_scrollSegmentY: UNEXPOSED.Δ,
 get_scrollSegmentY: UNEXPOSED.Δ,
 put_isMultiLine: UNEXPOSED.Δ,
 get_isMultiLine: UNEXPOSED.Δ,
 put_contentEditable: UNEXPOSED.Δ,
 get_contentEditable: UNEXPOSED.Δ,
 put_canHaveHTML: UNEXPOSED.Δ,
 get_canHaveHTML: UNEXPOSED.Δ,
 putref_viewLink: UNEXPOSED.Δ,
 get_viewLink: UNEXPOSED.Δ,
 put_frozen: UNEXPOSED.Δ,
 get_frozen: UNEXPOSED.Δ
});

var DispHTMLDefaultsVtbl = new StructT('DispHTMLDefaultsVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTCDefaultDispatchVtbl = new StructT('IHTCDefaultDispatchVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_element: UNEXPOSED.Δ,
 createEventObject: UNEXPOSED.Δ,
 get_defaults: UNEXPOSED.Δ,
 get_document: UNEXPOSED.Δ
});

var IHTCPropertyBehaviorVtbl = new StructT('IHTCPropertyBehaviorVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 fireChange: UNEXPOSED.Δ,
 put_value: UNEXPOSED.Δ,
 get_value: UNEXPOSED.Δ
});

var IHTCMethodBehaviorVtbl = new StructT('IHTCMethodBehaviorVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTCEventBehaviorVtbl = new StructT('IHTCEventBehaviorVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 fire: UNEXPOSED.Δ
});

var IHTCAttachBehaviorVtbl = new StructT('IHTCAttachBehaviorVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 fireEvent: UNEXPOSED.Δ,
 detachEvent: UNEXPOSED.Δ
});

var IHTCAttachBehavior2Vtbl = new StructT('IHTCAttachBehavior2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 fireEvent: UNEXPOSED.Δ
});

var IHTCDescBehaviorVtbl = new StructT('IHTCDescBehaviorVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_urn: UNEXPOSED.Δ,
 get_name: UNEXPOSED.Δ
});

var DispHTCDefaultDispatchVtbl = new StructT('DispHTCDefaultDispatchVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var DispHTCPropertyBehaviorVtbl = new StructT('DispHTCPropertyBehaviorVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var DispHTCMethodBehaviorVtbl = new StructT('DispHTCMethodBehaviorVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var DispHTCEventBehaviorVtbl = new StructT('DispHTCEventBehaviorVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var DispHTCAttachBehaviorVtbl = new StructT('DispHTCAttachBehaviorVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var DispHTCDescBehaviorVtbl = new StructT('DispHTCDescBehaviorVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLUrnCollectionVtbl = new StructT('IHTMLUrnCollectionVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_length: UNEXPOSED.Δ,
 item: UNEXPOSED.Δ
});

var DispHTMLUrnCollectionVtbl = new StructT('DispHTMLUrnCollectionVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLGenericElementVtbl = new StructT('IHTMLGenericElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_recordset: UNEXPOSED.Δ,
 namedRecordset: UNEXPOSED.Δ
});

var DispHTMLGenericElementVtbl = new StructT('DispHTMLGenericElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLStyleSheetRuleVtbl = new StructT('IHTMLStyleSheetRuleVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_selectorText: UNEXPOSED.Δ,
 get_selectorText: UNEXPOSED.Δ,
 get_style: UNEXPOSED.Δ,
 get_readOnly: UNEXPOSED.Δ
});

var IHTMLStyleSheetRulesCollectionVtbl = new StructT('IHTMLStyleSheetRulesCollectionVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_length: UNEXPOSED.Δ,
 item: UNEXPOSED.Δ
});

var DispHTMLStyleSheetRuleVtbl = new StructT('DispHTMLStyleSheetRuleVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var DispHTMLStyleSheetRulesCollectionVtbl = new StructT('DispHTMLStyleSheetRulesCollectionVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLStyleSheetPageVtbl = new StructT('IHTMLStyleSheetPageVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_selector: UNEXPOSED.Δ,
 get_pseudoClass: UNEXPOSED.Δ
});

var IHTMLStyleSheetPagesCollectionVtbl = new StructT('IHTMLStyleSheetPagesCollectionVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_length: UNEXPOSED.Δ,
 item: UNEXPOSED.Δ
});

var DispHTMLStyleSheetPageVtbl = new StructT('DispHTMLStyleSheetPageVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var DispHTMLStyleSheetPagesCollectionVtbl = new StructT('DispHTMLStyleSheetPagesCollectionVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLStyleSheetsCollectionVtbl = new StructT('IHTMLStyleSheetsCollectionVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_length: UNEXPOSED.Δ,
 get__newEnum: UNEXPOSED.Δ,
 item: UNEXPOSED.Δ
});

var IHTMLStyleSheetVtbl = new StructT('IHTMLStyleSheetVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_title: UNEXPOSED.Δ,
 get_title: UNEXPOSED.Δ,
 get_parentStyleSheet: UNEXPOSED.Δ,
 get_owningElement: UNEXPOSED.Δ,
 put_disabled: UNEXPOSED.Δ,
 get_disabled: UNEXPOSED.Δ,
 get_readOnly: UNEXPOSED.Δ,
 get_imports: UNEXPOSED.Δ,
 put_href: UNEXPOSED.Δ,
 get_href: UNEXPOSED.Δ,
 get_type: UNEXPOSED.Δ,
 get_id: UNEXPOSED.Δ,
 addImport: UNEXPOSED.Δ,
 addRule: UNEXPOSED.Δ,
 removeImport: UNEXPOSED.Δ,
 removeRule: UNEXPOSED.Δ,
 put_media: UNEXPOSED.Δ,
 get_media: UNEXPOSED.Δ,
 put_cssText: UNEXPOSED.Δ,
 get_cssText: UNEXPOSED.Δ,
 get_rules: UNEXPOSED.Δ
});

var IHTMLStyleSheet2Vtbl = new StructT('IHTMLStyleSheet2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_pages: UNEXPOSED.Δ,
 addPageRule: UNEXPOSED.Δ
});

var IHTMLStyleSheet3Vtbl = new StructT('IHTMLStyleSheet3Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_href: UNEXPOSED.Δ,
 get_href: UNEXPOSED.Δ,
 get_isAlternate: UNEXPOSED.Δ,
 get_isPrefAlternate: UNEXPOSED.Δ
});

var DispHTMLStyleSheetVtbl = new StructT('DispHTMLStyleSheetVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var DispHTMLStyleSheetsCollectionVtbl = new StructT('DispHTMLStyleSheetsCollectionVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var HTMLLinkElementEvents2Vtbl = new StructT('HTMLLinkElementEvents2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var HTMLLinkElementEventsVtbl = new StructT('HTMLLinkElementEventsVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLLinkElementVtbl = new StructT('IHTMLLinkElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_href: UNEXPOSED.Δ,
 get_href: UNEXPOSED.Δ,
 put_rel: UNEXPOSED.Δ,
 get_rel: UNEXPOSED.Δ,
 put_rev: UNEXPOSED.Δ,
 get_rev: UNEXPOSED.Δ,
 put_type: UNEXPOSED.Δ,
 get_type: UNEXPOSED.Δ,
 get_readyState: UNEXPOSED.Δ,
 put_onreadystatechange: UNEXPOSED.Δ,
 get_onreadystatechange: UNEXPOSED.Δ,
 put_onload: UNEXPOSED.Δ,
 get_onload: UNEXPOSED.Δ,
 put_onerror: UNEXPOSED.Δ,
 get_onerror: UNEXPOSED.Δ,
 get_styleSheet: UNEXPOSED.Δ,
 put_disabled: UNEXPOSED.Δ,
 get_disabled: UNEXPOSED.Δ,
 put_media: UNEXPOSED.Δ,
 get_media: UNEXPOSED.Δ
});

var IHTMLLinkElement2Vtbl = new StructT('IHTMLLinkElement2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_target: UNEXPOSED.Δ,
 get_target: UNEXPOSED.Δ
});

var IHTMLLinkElement3Vtbl = new StructT('IHTMLLinkElement3Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_charset: UNEXPOSED.Δ,
 get_charset: UNEXPOSED.Δ,
 put_hreflang: UNEXPOSED.Δ,
 get_hreflang: UNEXPOSED.Δ
});

var IHTMLLinkElement4Vtbl = new StructT('IHTMLLinkElement4Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_href: UNEXPOSED.Δ,
 get_href: UNEXPOSED.Δ
});

var DispHTMLLinkElementVtbl = new StructT('DispHTMLLinkElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLTxtRangeVtbl = new StructT('IHTMLTxtRangeVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_htmlText: UNEXPOSED.Δ,
 put_text: UNEXPOSED.Δ,
 get_text: UNEXPOSED.Δ,
 parentElement: UNEXPOSED.Δ,
 duplicate: UNEXPOSED.Δ,
 inRange: UNEXPOSED.Δ,
 isEqual: UNEXPOSED.Δ,
 scrollIntoView: UNEXPOSED.Δ,
 collapse: UNEXPOSED.Δ,
 expand: UNEXPOSED.Δ,
 move: UNEXPOSED.Δ,
 moveStart: UNEXPOSED.Δ,
 moveEnd: UNEXPOSED.Δ,
 select: UNEXPOSED.Δ,
 pasteHTML: UNEXPOSED.Δ,
 moveToElementText: UNEXPOSED.Δ,
 setEndPoint: UNEXPOSED.Δ,
 compareEndPoints: UNEXPOSED.Δ,
 findText: UNEXPOSED.Δ,
 moveToPoint: UNEXPOSED.Δ,
 getBookmark: UNEXPOSED.Δ,
 moveToBookmark: UNEXPOSED.Δ,
 queryCommandSupported: UNEXPOSED.Δ,
 queryCommandEnabled: UNEXPOSED.Δ,
 queryCommandState: UNEXPOSED.Δ,
 queryCommandIndeterm: UNEXPOSED.Δ,
 queryCommandText: UNEXPOSED.Δ,
 queryCommandValue: UNEXPOSED.Δ,
 execCommand: UNEXPOSED.Δ,
 execCommandShowHelp: UNEXPOSED.Δ
});

var IHTMLTextRangeMetricsVtbl = new StructT('IHTMLTextRangeMetricsVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_offsetTop: UNEXPOSED.Δ,
 get_offsetLeft: UNEXPOSED.Δ,
 get_boundingTop: UNEXPOSED.Δ,
 get_boundingLeft: UNEXPOSED.Δ,
 get_boundingWidth: UNEXPOSED.Δ,
 get_boundingHeight: UNEXPOSED.Δ
});

var IHTMLTextRangeMetrics2Vtbl = new StructT('IHTMLTextRangeMetrics2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 getClientRects: UNEXPOSED.Δ,
 getBoundingClientRect: UNEXPOSED.Δ
});

var IHTMLTxtRangeCollectionVtbl = new StructT('IHTMLTxtRangeCollectionVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_length: UNEXPOSED.Δ,
 get__newEnum: UNEXPOSED.Δ,
 item: UNEXPOSED.Δ
});

var HTMLFormElementEvents2Vtbl = new StructT('HTMLFormElementEvents2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var HTMLFormElementEventsVtbl = new StructT('HTMLFormElementEventsVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLFormElementVtbl = new StructT('IHTMLFormElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_action: UNEXPOSED.Δ,
 get_action: UNEXPOSED.Δ,
 put_dir: UNEXPOSED.Δ,
 get_dir: UNEXPOSED.Δ,
 put_encoding: UNEXPOSED.Δ,
 get_encoding: UNEXPOSED.Δ,
 put_method: UNEXPOSED.Δ,
 get_method: UNEXPOSED.Δ,
 get_elements: UNEXPOSED.Δ,
 put_target: UNEXPOSED.Δ,
 get_target: UNEXPOSED.Δ,
 put_name: UNEXPOSED.Δ,
 get_name: UNEXPOSED.Δ,
 put_onsubmit: UNEXPOSED.Δ,
 get_onsubmit: UNEXPOSED.Δ,
 put_onreset: UNEXPOSED.Δ,
 get_onreset: UNEXPOSED.Δ,
 submit: UNEXPOSED.Δ,
 reset: UNEXPOSED.Δ,
 put_length: UNEXPOSED.Δ,
 get_length: UNEXPOSED.Δ,
 get__newEnum: UNEXPOSED.Δ,
 item: UNEXPOSED.Δ,
 tags: UNEXPOSED.Δ
});

var IHTMLFormElement2Vtbl = new StructT('IHTMLFormElement2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_acceptCharset: UNEXPOSED.Δ,
 get_acceptCharset: UNEXPOSED.Δ,
 urns: UNEXPOSED.Δ
});

var IHTMLFormElement3Vtbl = new StructT('IHTMLFormElement3Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 namedItem: UNEXPOSED.Δ
});

var IHTMLSubmitDataVtbl = new StructT('IHTMLSubmitDataVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 appendNameValuePair: UNEXPOSED.Δ,
 appendNameFilePair: UNEXPOSED.Δ,
 appendItemSeparator: UNEXPOSED.Δ
});

var IHTMLFormElement4Vtbl = new StructT('IHTMLFormElement4Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_action: UNEXPOSED.Δ,
 get_action: UNEXPOSED.Δ
});

var DispHTMLFormElementVtbl = new StructT('DispHTMLFormElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var HTMLControlElementEvents2Vtbl = new StructT('HTMLControlElementEvents2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var HTMLControlElementEventsVtbl = new StructT('HTMLControlElementEventsVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLControlElementVtbl = new StructT('IHTMLControlElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_tabIndex: UNEXPOSED.Δ,
 get_tabIndex: UNEXPOSED.Δ,
 focus: UNEXPOSED.Δ,
 put_accessKey: UNEXPOSED.Δ,
 get_accessKey: UNEXPOSED.Δ,
 put_onblur: UNEXPOSED.Δ,
 get_onblur: UNEXPOSED.Δ,
 put_onfocus: UNEXPOSED.Δ,
 get_onfocus: UNEXPOSED.Δ,
 put_onresize: UNEXPOSED.Δ,
 get_onresize: UNEXPOSED.Δ,
 blur: UNEXPOSED.Δ,
 addFilter: UNEXPOSED.Δ,
 removeFilter: UNEXPOSED.Δ,
 get_clientHeight: UNEXPOSED.Δ,
 get_clientWidth: UNEXPOSED.Δ,
 get_clientTop: UNEXPOSED.Δ,
 get_clientLeft: UNEXPOSED.Δ
});

var IHTMLTextElementVtbl = new StructT('IHTMLTextElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var DispHTMLTextElementVtbl = new StructT('DispHTMLTextElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var HTMLTextContainerEvents2Vtbl = new StructT('HTMLTextContainerEvents2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var HTMLTextContainerEventsVtbl = new StructT('HTMLTextContainerEventsVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLTextContainerVtbl = new StructT('IHTMLTextContainerVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 createControlRange: UNEXPOSED.Δ,
 get_scrollHeight: UNEXPOSED.Δ,
 get_scrollWidth: UNEXPOSED.Δ,
 put_scrollTop: UNEXPOSED.Δ,
 get_scrollTop: UNEXPOSED.Δ,
 put_scrollLeft: UNEXPOSED.Δ,
 get_scrollLeft: UNEXPOSED.Δ,
 put_onscroll: UNEXPOSED.Δ,
 get_onscroll: UNEXPOSED.Δ
});

var IHTMLControlRangeVtbl = new StructT('IHTMLControlRangeVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 select: UNEXPOSED.Δ,
 add: UNEXPOSED.Δ,
 remove: UNEXPOSED.Δ,
 item: UNEXPOSED.Δ,
 scrollIntoView: UNEXPOSED.Δ,
 queryCommandSupported: UNEXPOSED.Δ,
 queryCommandEnabled: UNEXPOSED.Δ,
 queryCommandState: UNEXPOSED.Δ,
 queryCommandIndeterm: UNEXPOSED.Δ,
 queryCommandText: UNEXPOSED.Δ,
 queryCommandValue: UNEXPOSED.Δ,
 execCommand: UNEXPOSED.Δ,
 execCommandShowHelp: UNEXPOSED.Δ,
 commonParentElement: UNEXPOSED.Δ,
 get_length: UNEXPOSED.Δ
});

var IHTMLControlRange2Vtbl = new StructT('IHTMLControlRange2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 addElement: UNEXPOSED.Δ
});

var HTMLImgEvents2Vtbl = new StructT('HTMLImgEvents2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var HTMLImgEventsVtbl = new StructT('HTMLImgEventsVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLImgElementVtbl = new StructT('IHTMLImgElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_isMap: UNEXPOSED.Δ,
 get_isMap: UNEXPOSED.Δ,
 put_useMap: UNEXPOSED.Δ,
 get_useMap: UNEXPOSED.Δ,
 get_mimeType: UNEXPOSED.Δ,
 get_fileSize: UNEXPOSED.Δ,
 get_fileCreatedDate: UNEXPOSED.Δ,
 get_fileModifiedDate: UNEXPOSED.Δ,
 get_fileUpdatedDate: UNEXPOSED.Δ,
 get_protocol: UNEXPOSED.Δ,
 get_href: UNEXPOSED.Δ,
 get_nameProp: UNEXPOSED.Δ,
 put_border: UNEXPOSED.Δ,
 get_border: UNEXPOSED.Δ,
 put_vspace: UNEXPOSED.Δ,
 get_vspace: UNEXPOSED.Δ,
 put_hspace: UNEXPOSED.Δ,
 get_hspace: UNEXPOSED.Δ,
 put_alt: UNEXPOSED.Δ,
 get_alt: UNEXPOSED.Δ,
 put_src: UNEXPOSED.Δ,
 get_src: UNEXPOSED.Δ,
 put_lowsrc: UNEXPOSED.Δ,
 get_lowsrc: UNEXPOSED.Δ,
 put_vrml: UNEXPOSED.Δ,
 get_vrml: UNEXPOSED.Δ,
 put_dynsrc: UNEXPOSED.Δ,
 get_dynsrc: UNEXPOSED.Δ,
 get_readyState: UNEXPOSED.Δ,
 get_complete: UNEXPOSED.Δ,
 put_loop: UNEXPOSED.Δ,
 get_loop: UNEXPOSED.Δ,
 put_align: UNEXPOSED.Δ,
 get_align: UNEXPOSED.Δ,
 put_onload: UNEXPOSED.Δ,
 get_onload: UNEXPOSED.Δ,
 put_onerror: UNEXPOSED.Δ,
 get_onerror: UNEXPOSED.Δ,
 put_onabort: UNEXPOSED.Δ,
 get_onabort: UNEXPOSED.Δ,
 put_name: UNEXPOSED.Δ,
 get_name: UNEXPOSED.Δ,
 put_width: UNEXPOSED.Δ,
 get_width: UNEXPOSED.Δ,
 put_height: UNEXPOSED.Δ,
 get_height: UNEXPOSED.Δ,
 put_start: UNEXPOSED.Δ,
 get_start: UNEXPOSED.Δ
});

var IHTMLImgElement2Vtbl = new StructT('IHTMLImgElement2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_longDesc: UNEXPOSED.Δ,
 get_longDesc: UNEXPOSED.Δ
});

var IHTMLImgElement3Vtbl = new StructT('IHTMLImgElement3Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_longDesc: UNEXPOSED.Δ,
 get_longDesc: UNEXPOSED.Δ,
 put_vrml: UNEXPOSED.Δ,
 get_vrml: UNEXPOSED.Δ,
 put_lowsrc: UNEXPOSED.Δ,
 get_lowsrc: UNEXPOSED.Δ,
 put_dynsrc: UNEXPOSED.Δ,
 get_dynsrc: UNEXPOSED.Δ
});

var IHTMLImageElementFactoryVtbl = new StructT('IHTMLImageElementFactoryVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 create: UNEXPOSED.Δ
});

var DispHTMLImgVtbl = new StructT('DispHTMLImgVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var HTMLXMLHttpRequestEventsVtbl = new StructT('HTMLXMLHttpRequestEventsVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLXMLHttpRequestVtbl = new StructT('IHTMLXMLHttpRequestVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_readyState: UNEXPOSED.Δ,
 get_responseBody: UNEXPOSED.Δ,
 get_responseText: UNEXPOSED.Δ,
 get_responseXML: UNEXPOSED.Δ,
 get_status: UNEXPOSED.Δ,
 get_statusText: UNEXPOSED.Δ,
 put_onreadystatechange: UNEXPOSED.Δ,
 get_onreadystatechange: UNEXPOSED.Δ,
 abort: UNEXPOSED.Δ,
 open: UNEXPOSED.Δ,
 send: UNEXPOSED.Δ,
 getAllResponseHeaders: UNEXPOSED.Δ,
 getResponseHeader: UNEXPOSED.Δ,
 setRequestHeader: UNEXPOSED.Δ
});

var IHTMLXMLHttpRequest2Vtbl = new StructT('IHTMLXMLHttpRequest2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_timeout: UNEXPOSED.Δ,
 get_timeout: UNEXPOSED.Δ,
 put_ontimeout: UNEXPOSED.Δ,
 get_ontimeout: UNEXPOSED.Δ
});

var IHTMLXMLHttpRequestFactoryVtbl = new StructT('IHTMLXMLHttpRequestFactoryVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 create: UNEXPOSED.Δ
});

var DispHTMLXMLHttpRequestVtbl = new StructT('DispHTMLXMLHttpRequestVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLBodyElementVtbl = new StructT('IHTMLBodyElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_background: UNEXPOSED.Δ,
 get_background: UNEXPOSED.Δ,
 put_bgProperties: UNEXPOSED.Δ,
 get_bgProperties: UNEXPOSED.Δ,
 put_leftMargin: UNEXPOSED.Δ,
 get_leftMargin: UNEXPOSED.Δ,
 put_topMargin: UNEXPOSED.Δ,
 get_topMargin: UNEXPOSED.Δ,
 put_rightMargin: UNEXPOSED.Δ,
 get_rightMargin: UNEXPOSED.Δ,
 put_bottomMargin: UNEXPOSED.Δ,
 get_bottomMargin: UNEXPOSED.Δ,
 put_noWrap: UNEXPOSED.Δ,
 get_noWrap: UNEXPOSED.Δ,
 put_bgColor: UNEXPOSED.Δ,
 get_bgColor: UNEXPOSED.Δ,
 put_text: UNEXPOSED.Δ,
 get_text: UNEXPOSED.Δ,
 put_link: UNEXPOSED.Δ,
 get_link: UNEXPOSED.Δ,
 put_vLink: UNEXPOSED.Δ,
 get_vLink: UNEXPOSED.Δ,
 put_aLink: UNEXPOSED.Δ,
 get_aLink: UNEXPOSED.Δ,
 put_onload: UNEXPOSED.Δ,
 get_onload: UNEXPOSED.Δ,
 put_onunload: UNEXPOSED.Δ,
 get_onunload: UNEXPOSED.Δ,
 put_scroll: UNEXPOSED.Δ,
 get_scroll: UNEXPOSED.Δ,
 put_onselect: UNEXPOSED.Δ,
 get_onselect: UNEXPOSED.Δ,
 put_onbeforeunload: UNEXPOSED.Δ,
 get_onbeforeunload: UNEXPOSED.Δ,
 createTextRange: UNEXPOSED.Δ
});

var IHTMLBodyElement2Vtbl = new StructT('IHTMLBodyElement2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_onbeforeprint: UNEXPOSED.Δ,
 get_onbeforeprint: UNEXPOSED.Δ,
 put_onafterprint: UNEXPOSED.Δ,
 get_onafterprint: UNEXPOSED.Δ
});

var IHTMLBodyElement3Vtbl = new StructT('IHTMLBodyElement3Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_background: UNEXPOSED.Δ,
 get_background: UNEXPOSED.Δ,
 put_ononline: UNEXPOSED.Δ,
 get_ononline: UNEXPOSED.Δ,
 put_onoffline: UNEXPOSED.Δ,
 get_onoffline: UNEXPOSED.Δ,
 put_onhashchange: UNEXPOSED.Δ,
 get_onhashchange: UNEXPOSED.Δ
});

var DispHTMLBodyVtbl = new StructT('DispHTMLBodyVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLFontElementVtbl = new StructT('IHTMLFontElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_color: UNEXPOSED.Δ,
 get_color: UNEXPOSED.Δ,
 put_face: UNEXPOSED.Δ,
 get_face: UNEXPOSED.Δ,
 put_size: UNEXPOSED.Δ,
 get_size: UNEXPOSED.Δ
});

var DispHTMLFontElementVtbl = new StructT('DispHTMLFontElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var HTMLAnchorEvents2Vtbl = new StructT('HTMLAnchorEvents2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var HTMLAnchorEventsVtbl = new StructT('HTMLAnchorEventsVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLAnchorElementVtbl = new StructT('IHTMLAnchorElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_href: UNEXPOSED.Δ,
 get_href: UNEXPOSED.Δ,
 put_target: UNEXPOSED.Δ,
 get_target: UNEXPOSED.Δ,
 put_rel: UNEXPOSED.Δ,
 get_rel: UNEXPOSED.Δ,
 put_rev: UNEXPOSED.Δ,
 get_rev: UNEXPOSED.Δ,
 put_urn: UNEXPOSED.Δ,
 get_urn: UNEXPOSED.Δ,
 put_Methods: UNEXPOSED.Δ,
 get_Methods: UNEXPOSED.Δ,
 put_name: UNEXPOSED.Δ,
 get_name: UNEXPOSED.Δ,
 put_host: UNEXPOSED.Δ,
 get_host: UNEXPOSED.Δ,
 put_hostname: UNEXPOSED.Δ,
 get_hostname: UNEXPOSED.Δ,
 put_pathname: UNEXPOSED.Δ,
 get_pathname: UNEXPOSED.Δ,
 put_port: UNEXPOSED.Δ,
 get_port: UNEXPOSED.Δ,
 put_protocol: UNEXPOSED.Δ,
 get_protocol: UNEXPOSED.Δ,
 put_search: UNEXPOSED.Δ,
 get_search: UNEXPOSED.Δ,
 put_hash: UNEXPOSED.Δ,
 get_hash: UNEXPOSED.Δ,
 put_onblur: UNEXPOSED.Δ,
 get_onblur: UNEXPOSED.Δ,
 put_onfocus: UNEXPOSED.Δ,
 get_onfocus: UNEXPOSED.Δ,
 put_accessKey: UNEXPOSED.Δ,
 get_accessKey: UNEXPOSED.Δ,
 get_protocolLong: UNEXPOSED.Δ,
 get_mimeType: UNEXPOSED.Δ,
 get_nameProp: UNEXPOSED.Δ,
 put_tabIndex: UNEXPOSED.Δ,
 get_tabIndex: UNEXPOSED.Δ,
 focus: UNEXPOSED.Δ,
 blur: UNEXPOSED.Δ
});

var IHTMLAnchorElement2Vtbl = new StructT('IHTMLAnchorElement2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_charset: UNEXPOSED.Δ,
 get_charset: UNEXPOSED.Δ,
 put_coords: UNEXPOSED.Δ,
 get_coords: UNEXPOSED.Δ,
 put_hreflang: UNEXPOSED.Δ,
 get_hreflang: UNEXPOSED.Δ,
 put_shape: UNEXPOSED.Δ,
 get_shape: UNEXPOSED.Δ,
 put_type: UNEXPOSED.Δ,
 get_type: UNEXPOSED.Δ
});

var IHTMLAnchorElement3Vtbl = new StructT('IHTMLAnchorElement3Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_shape: UNEXPOSED.Δ,
 get_shape: UNEXPOSED.Δ,
 put_coords: UNEXPOSED.Δ,
 get_coords: UNEXPOSED.Δ,
 put_href: UNEXPOSED.Δ,
 get_href: UNEXPOSED.Δ
});

var DispHTMLAnchorElementVtbl = new StructT('DispHTMLAnchorElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var HTMLLabelEvents2Vtbl = new StructT('HTMLLabelEvents2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var HTMLLabelEventsVtbl = new StructT('HTMLLabelEventsVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLLabelElementVtbl = new StructT('IHTMLLabelElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_htmlFor: UNEXPOSED.Δ,
 get_htmlFor: UNEXPOSED.Δ,
 put_accessKey: UNEXPOSED.Δ,
 get_accessKey: UNEXPOSED.Δ
});

var IHTMLLabelElement2Vtbl = new StructT('IHTMLLabelElement2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_form: UNEXPOSED.Δ
});

var DispHTMLLabelElementVtbl = new StructT('DispHTMLLabelElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLListElementVtbl = new StructT('IHTMLListElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLListElement2Vtbl = new StructT('IHTMLListElement2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_compact: UNEXPOSED.Δ,
 get_compact: UNEXPOSED.Δ
});

var DispHTMLListElementVtbl = new StructT('DispHTMLListElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLUListElementVtbl = new StructT('IHTMLUListElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_compact: UNEXPOSED.Δ,
 get_compact: UNEXPOSED.Δ,
 put_type: UNEXPOSED.Δ,
 get_type: UNEXPOSED.Δ
});

var DispHTMLUListElementVtbl = new StructT('DispHTMLUListElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLOListElementVtbl = new StructT('IHTMLOListElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_compact: UNEXPOSED.Δ,
 get_compact: UNEXPOSED.Δ,
 put_start: UNEXPOSED.Δ,
 get_start: UNEXPOSED.Δ,
 put_type: UNEXPOSED.Δ,
 get_type: UNEXPOSED.Δ
});

var DispHTMLOListElementVtbl = new StructT('DispHTMLOListElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLLIElementVtbl = new StructT('IHTMLLIElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_type: UNEXPOSED.Δ,
 get_type: UNEXPOSED.Δ,
 put_value: UNEXPOSED.Δ,
 get_value: UNEXPOSED.Δ
});

var DispHTMLLIElementVtbl = new StructT('DispHTMLLIElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLBlockElementVtbl = new StructT('IHTMLBlockElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_clear: UNEXPOSED.Δ,
 get_clear: UNEXPOSED.Δ
});

var IHTMLBlockElement2Vtbl = new StructT('IHTMLBlockElement2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_cite: UNEXPOSED.Δ,
 get_cite: UNEXPOSED.Δ,
 put_width: UNEXPOSED.Δ,
 get_width: UNEXPOSED.Δ
});

var IHTMLBlockElement3Vtbl = new StructT('IHTMLBlockElement3Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_cite: UNEXPOSED.Δ,
 get_cite: UNEXPOSED.Δ
});

var DispHTMLBlockElementVtbl = new StructT('DispHTMLBlockElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLDivElementVtbl = new StructT('IHTMLDivElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_align: UNEXPOSED.Δ,
 get_align: UNEXPOSED.Δ,
 put_noWrap: UNEXPOSED.Δ,
 get_noWrap: UNEXPOSED.Δ
});

var DispHTMLDivElementVtbl = new StructT('DispHTMLDivElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLDDElementVtbl = new StructT('IHTMLDDElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_noWrap: UNEXPOSED.Δ,
 get_noWrap: UNEXPOSED.Δ
});

var DispHTMLDDElementVtbl = new StructT('DispHTMLDDElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLDTElementVtbl = new StructT('IHTMLDTElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_noWrap: UNEXPOSED.Δ,
 get_noWrap: UNEXPOSED.Δ
});

var DispHTMLDTElementVtbl = new StructT('DispHTMLDTElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLBRElementVtbl = new StructT('IHTMLBRElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_clear: UNEXPOSED.Δ,
 get_clear: UNEXPOSED.Δ
});

var DispHTMLBRElementVtbl = new StructT('DispHTMLBRElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLDListElementVtbl = new StructT('IHTMLDListElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_compact: UNEXPOSED.Δ,
 get_compact: UNEXPOSED.Δ
});

var DispHTMLDListElementVtbl = new StructT('DispHTMLDListElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLHRElementVtbl = new StructT('IHTMLHRElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_align: UNEXPOSED.Δ,
 get_align: UNEXPOSED.Δ,
 put_color: UNEXPOSED.Δ,
 get_color: UNEXPOSED.Δ,
 put_noShade: UNEXPOSED.Δ,
 get_noShade: UNEXPOSED.Δ,
 put_width: UNEXPOSED.Δ,
 get_width: UNEXPOSED.Δ,
 put_size: UNEXPOSED.Δ,
 get_size: UNEXPOSED.Δ
});

var DispHTMLHRElementVtbl = new StructT('DispHTMLHRElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLParaElementVtbl = new StructT('IHTMLParaElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_align: UNEXPOSED.Δ,
 get_align: UNEXPOSED.Δ
});

var DispHTMLParaElementVtbl = new StructT('DispHTMLParaElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLElementCollection2Vtbl = new StructT('IHTMLElementCollection2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 urns: UNEXPOSED.Δ
});

var IHTMLElementCollection3Vtbl = new StructT('IHTMLElementCollection3Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 namedItem: UNEXPOSED.Δ
});

var IHTMLElementCollection4Vtbl = new StructT('IHTMLElementCollection4Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_length: UNEXPOSED.Δ,
 item: UNEXPOSED.Δ,
 namedItem: UNEXPOSED.Δ
});

var DispHTMLElementCollectionVtbl = new StructT('DispHTMLElementCollectionVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLHeaderElementVtbl = new StructT('IHTMLHeaderElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_align: UNEXPOSED.Δ,
 get_align: UNEXPOSED.Δ
});

var DispHTMLHeaderElementVtbl = new StructT('DispHTMLHeaderElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var HTMLSelectElementEvents2Vtbl = new StructT('HTMLSelectElementEvents2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var HTMLSelectElementEventsVtbl = new StructT('HTMLSelectElementEventsVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLOptionElementVtbl = new StructT('IHTMLOptionElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_selected: UNEXPOSED.Δ,
 get_selected: UNEXPOSED.Δ,
 put_value: UNEXPOSED.Δ,
 get_value: UNEXPOSED.Δ,
 put_defaultSelected: UNEXPOSED.Δ,
 get_defaultSelected: UNEXPOSED.Δ,
 put_index: UNEXPOSED.Δ,
 get_index: UNEXPOSED.Δ,
 put_text: UNEXPOSED.Δ,
 get_text: UNEXPOSED.Δ,
 get_form: UNEXPOSED.Δ
});

var IHTMLSelectElementExVtbl = new StructT('IHTMLSelectElementExVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 ShowDropdown: UNEXPOSED.Δ,
 SetSelectExFlags: UNEXPOSED.Δ,
 GetSelectExFlags: UNEXPOSED.Δ,
 GetDropdownOpen: UNEXPOSED.Δ
});

var IHTMLSelectElementVtbl = new StructT('IHTMLSelectElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_size: UNEXPOSED.Δ,
 get_size: UNEXPOSED.Δ,
 put_multiple: UNEXPOSED.Δ,
 get_multiple: UNEXPOSED.Δ,
 put_name: UNEXPOSED.Δ,
 get_name: UNEXPOSED.Δ,
 get_options: UNEXPOSED.Δ,
 put_onchange: UNEXPOSED.Δ,
 get_onchange: UNEXPOSED.Δ,
 put_selectedIndex: UNEXPOSED.Δ,
 get_selectedIndex: UNEXPOSED.Δ,
 get_type: UNEXPOSED.Δ,
 put_value: UNEXPOSED.Δ,
 get_value: UNEXPOSED.Δ,
 put_disabled: UNEXPOSED.Δ,
 get_disabled: UNEXPOSED.Δ,
 get_form: UNEXPOSED.Δ,
 add: UNEXPOSED.Δ,
 remove: UNEXPOSED.Δ,
 put_length: UNEXPOSED.Δ,
 get_length: UNEXPOSED.Δ,
 get__newEnum: UNEXPOSED.Δ,
 item: UNEXPOSED.Δ,
 tags: UNEXPOSED.Δ
});

var IHTMLSelectElement2Vtbl = new StructT('IHTMLSelectElement2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 urns: UNEXPOSED.Δ
});

var IHTMLSelectElement4Vtbl = new StructT('IHTMLSelectElement4Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 namedItem: UNEXPOSED.Δ
});

var IHTMLSelectElement5Vtbl = new StructT('IHTMLSelectElement5Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 add: UNEXPOSED.Δ
});

var DispHTMLSelectElementVtbl = new StructT('DispHTMLSelectElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var DispHTMLWndSelectElementVtbl = new StructT('DispHTMLWndSelectElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLSelectionObjectVtbl = new StructT('IHTMLSelectionObjectVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 createRange: UNEXPOSED.Δ,
 empty: UNEXPOSED.Δ,
 clear: UNEXPOSED.Δ,
 get_type: UNEXPOSED.Δ
});

var IHTMLSelectionObject2Vtbl = new StructT('IHTMLSelectionObject2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 createRangeCollection: UNEXPOSED.Δ,
 get_typeDetail: UNEXPOSED.Δ
});

var IHTMLOptionElement3Vtbl = new StructT('IHTMLOptionElement3Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_label: UNEXPOSED.Δ,
 get_label: UNEXPOSED.Δ
});

var IHTMLOptionElementFactoryVtbl = new StructT('IHTMLOptionElementFactoryVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 create: UNEXPOSED.Δ
});

var DispHTMLOptionElementVtbl = new StructT('DispHTMLOptionElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var DispHTMLWndOptionElementVtbl = new StructT('DispHTMLWndOptionElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var HTMLButtonElementEvents2Vtbl = new StructT('HTMLButtonElementEvents2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var HTMLButtonElementEventsVtbl = new StructT('HTMLButtonElementEventsVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var HTMLInputTextElementEvents2Vtbl = new StructT('HTMLInputTextElementEvents2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var HTMLOptionButtonElementEvents2Vtbl = new StructT('HTMLOptionButtonElementEvents2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var HTMLInputFileElementEvents2Vtbl = new StructT('HTMLInputFileElementEvents2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var HTMLInputImageEvents2Vtbl = new StructT('HTMLInputImageEvents2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var HTMLInputTextElementEventsVtbl = new StructT('HTMLInputTextElementEventsVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var HTMLOptionButtonElementEventsVtbl = new StructT('HTMLOptionButtonElementEventsVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var HTMLInputFileElementEventsVtbl = new StructT('HTMLInputFileElementEventsVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var HTMLInputImageEventsVtbl = new StructT('HTMLInputImageEventsVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLInputElementVtbl = new StructT('IHTMLInputElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_type: UNEXPOSED.Δ,
 get_type: UNEXPOSED.Δ,
 put_value: UNEXPOSED.Δ,
 get_value: UNEXPOSED.Δ,
 put_name: UNEXPOSED.Δ,
 get_name: UNEXPOSED.Δ,
 put_status: UNEXPOSED.Δ,
 get_status: UNEXPOSED.Δ,
 put_disabled: UNEXPOSED.Δ,
 get_disabled: UNEXPOSED.Δ,
 get_form: UNEXPOSED.Δ,
 put_size: UNEXPOSED.Δ,
 get_size: UNEXPOSED.Δ,
 put_maxLength: UNEXPOSED.Δ,
 get_maxLength: UNEXPOSED.Δ,
 select: UNEXPOSED.Δ,
 put_onchange: UNEXPOSED.Δ,
 get_onchange: UNEXPOSED.Δ,
 put_onselect: UNEXPOSED.Δ,
 get_onselect: UNEXPOSED.Δ,
 put_defaultValue: UNEXPOSED.Δ,
 get_defaultValue: UNEXPOSED.Δ,
 put_readOnly: UNEXPOSED.Δ,
 get_readOnly: UNEXPOSED.Δ,
 createTextRange: UNEXPOSED.Δ,
 put_indeterminate: UNEXPOSED.Δ,
 get_indeterminate: UNEXPOSED.Δ,
 put_defaultChecked: UNEXPOSED.Δ,
 get_defaultChecked: UNEXPOSED.Δ,
 put_checked: UNEXPOSED.Δ,
 get_checked: UNEXPOSED.Δ,
 put_border: UNEXPOSED.Δ,
 get_border: UNEXPOSED.Δ,
 put_vspace: UNEXPOSED.Δ,
 get_vspace: UNEXPOSED.Δ,
 put_hspace: UNEXPOSED.Δ,
 get_hspace: UNEXPOSED.Δ,
 put_alt: UNEXPOSED.Δ,
 get_alt: UNEXPOSED.Δ,
 put_src: UNEXPOSED.Δ,
 get_src: UNEXPOSED.Δ,
 put_lowsrc: UNEXPOSED.Δ,
 get_lowsrc: UNEXPOSED.Δ,
 put_vrml: UNEXPOSED.Δ,
 get_vrml: UNEXPOSED.Δ,
 put_dynsrc: UNEXPOSED.Δ,
 get_dynsrc: UNEXPOSED.Δ,
 get_readyState: UNEXPOSED.Δ,
 get_complete: UNEXPOSED.Δ,
 put_loop: UNEXPOSED.Δ,
 get_loop: UNEXPOSED.Δ,
 put_align: UNEXPOSED.Δ,
 get_align: UNEXPOSED.Δ,
 put_onload: UNEXPOSED.Δ,
 get_onload: UNEXPOSED.Δ,
 put_onerror: UNEXPOSED.Δ,
 get_onerror: UNEXPOSED.Δ,
 put_onabort: UNEXPOSED.Δ,
 get_onabort: UNEXPOSED.Δ,
 put_width: UNEXPOSED.Δ,
 get_width: UNEXPOSED.Δ,
 put_height: UNEXPOSED.Δ,
 get_height: UNEXPOSED.Δ,
 put_start: UNEXPOSED.Δ,
 get_start: UNEXPOSED.Δ
});

var IHTMLInputElement2Vtbl = new StructT('IHTMLInputElement2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_accept: UNEXPOSED.Δ,
 get_accept: UNEXPOSED.Δ,
 put_useMap: UNEXPOSED.Δ,
 get_useMap: UNEXPOSED.Δ
});

var IHTMLInputElement3Vtbl = new StructT('IHTMLInputElement3Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_src: UNEXPOSED.Δ,
 get_src: UNEXPOSED.Δ,
 put_lowsrc: UNEXPOSED.Δ,
 get_lowsrc: UNEXPOSED.Δ,
 put_vrml: UNEXPOSED.Δ,
 get_vrml: UNEXPOSED.Δ,
 put_dynsrc: UNEXPOSED.Δ,
 get_dynsrc: UNEXPOSED.Δ
});

var IHTMLInputButtonElementVtbl = new StructT('IHTMLInputButtonElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_type: UNEXPOSED.Δ,
 put_value: UNEXPOSED.Δ,
 get_value: UNEXPOSED.Δ,
 put_name: UNEXPOSED.Δ,
 get_name: UNEXPOSED.Δ,
 put_status: UNEXPOSED.Δ,
 get_status: UNEXPOSED.Δ,
 put_disabled: UNEXPOSED.Δ,
 get_disabled: UNEXPOSED.Δ,
 get_form: UNEXPOSED.Δ,
 createTextRange: UNEXPOSED.Δ
});

var IHTMLInputHiddenElementVtbl = new StructT('IHTMLInputHiddenElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_type: UNEXPOSED.Δ,
 put_value: UNEXPOSED.Δ,
 get_value: UNEXPOSED.Δ,
 put_name: UNEXPOSED.Δ,
 get_name: UNEXPOSED.Δ,
 put_status: UNEXPOSED.Δ,
 get_status: UNEXPOSED.Δ,
 put_disabled: UNEXPOSED.Δ,
 get_disabled: UNEXPOSED.Δ,
 get_form: UNEXPOSED.Δ,
 createTextRange: UNEXPOSED.Δ
});

var IHTMLInputTextElementVtbl = new StructT('IHTMLInputTextElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_type: UNEXPOSED.Δ,
 put_value: UNEXPOSED.Δ,
 get_value: UNEXPOSED.Δ,
 put_name: UNEXPOSED.Δ,
 get_name: UNEXPOSED.Δ,
 put_status: UNEXPOSED.Δ,
 get_status: UNEXPOSED.Δ,
 put_disabled: UNEXPOSED.Δ,
 get_disabled: UNEXPOSED.Δ,
 get_form: UNEXPOSED.Δ,
 put_defaultValue: UNEXPOSED.Δ,
 get_defaultValue: UNEXPOSED.Δ,
 put_size: UNEXPOSED.Δ,
 get_size: UNEXPOSED.Δ,
 put_maxLength: UNEXPOSED.Δ,
 get_maxLength: UNEXPOSED.Δ,
 select: UNEXPOSED.Δ,
 put_onchange: UNEXPOSED.Δ,
 get_onchange: UNEXPOSED.Δ,
 put_onselect: UNEXPOSED.Δ,
 get_onselect: UNEXPOSED.Δ,
 put_readOnly: UNEXPOSED.Δ,
 get_readOnly: UNEXPOSED.Δ,
 createTextRange: UNEXPOSED.Δ
});

var IHTMLInputFileElementVtbl = new StructT('IHTMLInputFileElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_type: UNEXPOSED.Δ,
 put_name: UNEXPOSED.Δ,
 get_name: UNEXPOSED.Δ,
 put_status: UNEXPOSED.Δ,
 get_status: UNEXPOSED.Δ,
 put_disabled: UNEXPOSED.Δ,
 get_disabled: UNEXPOSED.Δ,
 get_form: UNEXPOSED.Δ,
 put_size: UNEXPOSED.Δ,
 get_size: UNEXPOSED.Δ,
 put_maxLength: UNEXPOSED.Δ,
 get_maxLength: UNEXPOSED.Δ,
 select: UNEXPOSED.Δ,
 put_onchange: UNEXPOSED.Δ,
 get_onchange: UNEXPOSED.Δ,
 put_onselect: UNEXPOSED.Δ,
 get_onselect: UNEXPOSED.Δ,
 put_value: UNEXPOSED.Δ,
 get_value: UNEXPOSED.Δ
});

var IHTMLOptionButtonElementVtbl = new StructT('IHTMLOptionButtonElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_value: UNEXPOSED.Δ,
 get_value: UNEXPOSED.Δ,
 get_type: UNEXPOSED.Δ,
 put_name: UNEXPOSED.Δ,
 get_name: UNEXPOSED.Δ,
 put_checked: UNEXPOSED.Δ,
 get_checked: UNEXPOSED.Δ,
 put_defaultChecked: UNEXPOSED.Δ,
 get_defaultChecked: UNEXPOSED.Δ,
 put_onchange: UNEXPOSED.Δ,
 get_onchange: UNEXPOSED.Δ,
 put_disabled: UNEXPOSED.Δ,
 get_disabled: UNEXPOSED.Δ,
 put_status: UNEXPOSED.Δ,
 get_status: UNEXPOSED.Δ,
 put_indeterminate: UNEXPOSED.Δ,
 get_indeterminate: UNEXPOSED.Δ,
 get_form: UNEXPOSED.Δ
});

var IHTMLInputImageVtbl = new StructT('IHTMLInputImageVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_type: UNEXPOSED.Δ,
 put_disabled: UNEXPOSED.Δ,
 get_disabled: UNEXPOSED.Δ,
 put_border: UNEXPOSED.Δ,
 get_border: UNEXPOSED.Δ,
 put_vspace: UNEXPOSED.Δ,
 get_vspace: UNEXPOSED.Δ,
 put_hspace: UNEXPOSED.Δ,
 get_hspace: UNEXPOSED.Δ,
 put_alt: UNEXPOSED.Δ,
 get_alt: UNEXPOSED.Δ,
 put_src: UNEXPOSED.Δ,
 get_src: UNEXPOSED.Δ,
 put_lowsrc: UNEXPOSED.Δ,
 get_lowsrc: UNEXPOSED.Δ,
 put_vrml: UNEXPOSED.Δ,
 get_vrml: UNEXPOSED.Δ,
 put_dynsrc: UNEXPOSED.Δ,
 get_dynsrc: UNEXPOSED.Δ,
 get_readyState: UNEXPOSED.Δ,
 get_complete: UNEXPOSED.Δ,
 put_loop: UNEXPOSED.Δ,
 get_loop: UNEXPOSED.Δ,
 put_align: UNEXPOSED.Δ,
 get_align: UNEXPOSED.Δ,
 put_onload: UNEXPOSED.Δ,
 get_onload: UNEXPOSED.Δ,
 put_onerror: UNEXPOSED.Δ,
 get_onerror: UNEXPOSED.Δ,
 put_onabort: UNEXPOSED.Δ,
 get_onabort: UNEXPOSED.Δ,
 put_name: UNEXPOSED.Δ,
 get_name: UNEXPOSED.Δ,
 put_width: UNEXPOSED.Δ,
 get_width: UNEXPOSED.Δ,
 put_height: UNEXPOSED.Δ,
 get_height: UNEXPOSED.Δ,
 put_start: UNEXPOSED.Δ,
 get_start: UNEXPOSED.Δ
});

var DispHTMLInputElementVtbl = new StructT('DispHTMLInputElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLTextAreaElementVtbl = new StructT('IHTMLTextAreaElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_type: UNEXPOSED.Δ,
 put_value: UNEXPOSED.Δ,
 get_value: UNEXPOSED.Δ,
 put_name: UNEXPOSED.Δ,
 get_name: UNEXPOSED.Δ,
 put_status: UNEXPOSED.Δ,
 get_status: UNEXPOSED.Δ,
 put_disabled: UNEXPOSED.Δ,
 get_disabled: UNEXPOSED.Δ,
 get_form: UNEXPOSED.Δ,
 put_defaultValue: UNEXPOSED.Δ,
 get_defaultValue: UNEXPOSED.Δ,
 select: UNEXPOSED.Δ,
 put_onchange: UNEXPOSED.Δ,
 get_onchange: UNEXPOSED.Δ,
 put_onselect: UNEXPOSED.Δ,
 get_onselect: UNEXPOSED.Δ,
 put_readOnly: UNEXPOSED.Δ,
 get_readOnly: UNEXPOSED.Δ,
 put_rows: UNEXPOSED.Δ,
 get_rows: UNEXPOSED.Δ,
 put_cols: UNEXPOSED.Δ,
 get_cols: UNEXPOSED.Δ,
 put_wrap: UNEXPOSED.Δ,
 get_wrap: UNEXPOSED.Δ,
 createTextRange: UNEXPOSED.Δ
});

var DispHTMLTextAreaElementVtbl = new StructT('DispHTMLTextAreaElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var DispHTMLRichtextElementVtbl = new StructT('DispHTMLRichtextElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLButtonElementVtbl = new StructT('IHTMLButtonElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_type: UNEXPOSED.Δ,
 put_value: UNEXPOSED.Δ,
 get_value: UNEXPOSED.Δ,
 put_name: UNEXPOSED.Δ,
 get_name: UNEXPOSED.Δ,
 put_status: UNEXPOSED.Δ,
 get_status: UNEXPOSED.Δ,
 put_disabled: UNEXPOSED.Δ,
 get_disabled: UNEXPOSED.Δ,
 get_form: UNEXPOSED.Δ,
 createTextRange: UNEXPOSED.Δ
});

var DispHTMLButtonElementVtbl = new StructT('DispHTMLButtonElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var HTMLMarqueeElementEvents2Vtbl = new StructT('HTMLMarqueeElementEvents2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var HTMLMarqueeElementEventsVtbl = new StructT('HTMLMarqueeElementEventsVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLMarqueeElementVtbl = new StructT('IHTMLMarqueeElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_bgColor: UNEXPOSED.Δ,
 get_bgColor: UNEXPOSED.Δ,
 put_scrollDelay: UNEXPOSED.Δ,
 get_scrollDelay: UNEXPOSED.Δ,
 put_direction: UNEXPOSED.Δ,
 get_direction: UNEXPOSED.Δ,
 put_behavior: UNEXPOSED.Δ,
 get_behavior: UNEXPOSED.Δ,
 put_scrollAmount: UNEXPOSED.Δ,
 get_scrollAmount: UNEXPOSED.Δ,
 put_loop: UNEXPOSED.Δ,
 get_loop: UNEXPOSED.Δ,
 put_vspace: UNEXPOSED.Δ,
 get_vspace: UNEXPOSED.Δ,
 put_hspace: UNEXPOSED.Δ,
 get_hspace: UNEXPOSED.Δ,
 put_onfinish: UNEXPOSED.Δ,
 get_onfinish: UNEXPOSED.Δ,
 put_onstart: UNEXPOSED.Δ,
 get_onstart: UNEXPOSED.Δ,
 put_onbounce: UNEXPOSED.Δ,
 get_onbounce: UNEXPOSED.Δ,
 put_width: UNEXPOSED.Δ,
 get_width: UNEXPOSED.Δ,
 put_height: UNEXPOSED.Δ,
 get_height: UNEXPOSED.Δ,
 put_trueSpeed: UNEXPOSED.Δ,
 get_trueSpeed: UNEXPOSED.Δ,
 start: UNEXPOSED.Δ,
 stop: UNEXPOSED.Δ
});

var DispHTMLMarqueeElementVtbl = new StructT('DispHTMLMarqueeElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLHtmlElementVtbl = new StructT('IHTMLHtmlElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_version: UNEXPOSED.Δ,
 get_version: UNEXPOSED.Δ
});

var IHTMLHeadElementVtbl = new StructT('IHTMLHeadElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_profile: UNEXPOSED.Δ,
 get_profile: UNEXPOSED.Δ
});

var IHTMLHeadElement2Vtbl = new StructT('IHTMLHeadElement2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_profile: UNEXPOSED.Δ,
 get_profile: UNEXPOSED.Δ
});

var IHTMLTitleElementVtbl = new StructT('IHTMLTitleElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_text: UNEXPOSED.Δ,
 get_text: UNEXPOSED.Δ
});

var IHTMLMetaElementVtbl = new StructT('IHTMLMetaElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_httpEquiv: UNEXPOSED.Δ,
 get_httpEquiv: UNEXPOSED.Δ,
 put_content: UNEXPOSED.Δ,
 get_content: UNEXPOSED.Δ,
 put_name: UNEXPOSED.Δ,
 get_name: UNEXPOSED.Δ,
 put_url: UNEXPOSED.Δ,
 get_url: UNEXPOSED.Δ,
 put_charset: UNEXPOSED.Δ,
 get_charset: UNEXPOSED.Δ
});

var IHTMLMetaElement2Vtbl = new StructT('IHTMLMetaElement2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_scheme: UNEXPOSED.Δ,
 get_scheme: UNEXPOSED.Δ
});

var IHTMLMetaElement3Vtbl = new StructT('IHTMLMetaElement3Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_url: UNEXPOSED.Δ,
 get_url: UNEXPOSED.Δ
});

var IHTMLBaseElementVtbl = new StructT('IHTMLBaseElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_href: UNEXPOSED.Δ,
 get_href: UNEXPOSED.Δ,
 put_target: UNEXPOSED.Δ,
 get_target: UNEXPOSED.Δ
});

var IHTMLBaseElement2Vtbl = new StructT('IHTMLBaseElement2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_href: UNEXPOSED.Δ,
 get_href: UNEXPOSED.Δ
});

var IHTMLIsIndexElementVtbl = new StructT('IHTMLIsIndexElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_prompt: UNEXPOSED.Δ,
 get_prompt: UNEXPOSED.Δ,
 put_action: UNEXPOSED.Δ,
 get_action: UNEXPOSED.Δ
});

var IHTMLIsIndexElement2Vtbl = new StructT('IHTMLIsIndexElement2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_form: UNEXPOSED.Δ
});

var IHTMLNextIdElementVtbl = new StructT('IHTMLNextIdElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_n: UNEXPOSED.Δ,
 get_n: UNEXPOSED.Δ
});

var DispHTMLHtmlElementVtbl = new StructT('DispHTMLHtmlElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var DispHTMLHeadElementVtbl = new StructT('DispHTMLHeadElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var DispHTMLTitleElementVtbl = new StructT('DispHTMLTitleElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var DispHTMLMetaElementVtbl = new StructT('DispHTMLMetaElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var DispHTMLBaseElementVtbl = new StructT('DispHTMLBaseElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var DispHTMLIsIndexElementVtbl = new StructT('DispHTMLIsIndexElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var DispHTMLNextIdElementVtbl = new StructT('DispHTMLNextIdElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLBaseFontElementVtbl = new StructT('IHTMLBaseFontElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_color: UNEXPOSED.Δ,
 get_color: UNEXPOSED.Δ,
 put_face: UNEXPOSED.Δ,
 get_face: UNEXPOSED.Δ,
 put_size: UNEXPOSED.Δ,
 get_size: UNEXPOSED.Δ
});

var DispHTMLBaseFontElementVtbl = new StructT('DispHTMLBaseFontElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLUnknownElementVtbl = new StructT('IHTMLUnknownElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var DispHTMLUnknownElementVtbl = new StructT('DispHTMLUnknownElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IOmHistoryVtbl = new StructT('IOmHistoryVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_length: UNEXPOSED.Δ,
 back: UNEXPOSED.Δ,
 forward: UNEXPOSED.Δ,
 go: UNEXPOSED.Δ
});

var IHTMLMimeTypesCollectionVtbl = new StructT('IHTMLMimeTypesCollectionVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_length: UNEXPOSED.Δ
});

var IHTMLPluginsCollectionVtbl = new StructT('IHTMLPluginsCollectionVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_length: UNEXPOSED.Δ,
 refresh: UNEXPOSED.Δ
});

var IHTMLOpsProfileVtbl = new StructT('IHTMLOpsProfileVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 addRequest: UNEXPOSED.Δ,
 clearRequest: UNEXPOSED.Δ,
 doRequest: UNEXPOSED.Δ,
 getAttribute: UNEXPOSED.Δ,
 setAttribute: UNEXPOSED.Δ,
 commitChanges: UNEXPOSED.Δ,
 addReadRequest: UNEXPOSED.Δ,
 doReadRequest: UNEXPOSED.Δ,
 doWriteRequest: UNEXPOSED.Δ
});

var IOmNavigatorVtbl = new StructT('IOmNavigatorVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_appCodeName: UNEXPOSED.Δ,
 get_appName: UNEXPOSED.Δ,
 get_appVersion: UNEXPOSED.Δ,
 get_userAgent: UNEXPOSED.Δ,
 javaEnabled: UNEXPOSED.Δ,
 taintEnabled: UNEXPOSED.Δ,
 get_mimeTypes: UNEXPOSED.Δ,
 get_plugins: UNEXPOSED.Δ,
 get_cookieEnabled: UNEXPOSED.Δ,
 get_opsProfile: UNEXPOSED.Δ,
 toString: UNEXPOSED.Δ,
 get_cpuClass: UNEXPOSED.Δ,
 get_systemLanguage: UNEXPOSED.Δ,
 get_browserLanguage: UNEXPOSED.Δ,
 get_userLanguage: UNEXPOSED.Δ,
 get_platform: UNEXPOSED.Δ,
 get_appMinorVersion: UNEXPOSED.Δ,
 get_connectionSpeed: UNEXPOSED.Δ,
 get_onLine: UNEXPOSED.Δ,
 get_userProfile: UNEXPOSED.Δ
});

var IHTMLLocationVtbl = new StructT('IHTMLLocationVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_href: UNEXPOSED.Δ,
 get_href: UNEXPOSED.Δ,
 put_protocol: UNEXPOSED.Δ,
 get_protocol: UNEXPOSED.Δ,
 put_host: UNEXPOSED.Δ,
 get_host: UNEXPOSED.Δ,
 put_hostname: UNEXPOSED.Δ,
 get_hostname: UNEXPOSED.Δ,
 put_port: UNEXPOSED.Δ,
 get_port: UNEXPOSED.Δ,
 put_pathname: UNEXPOSED.Δ,
 get_pathname: UNEXPOSED.Δ,
 put_search: UNEXPOSED.Δ,
 get_search: UNEXPOSED.Δ,
 put_hash: UNEXPOSED.Δ,
 get_hash: UNEXPOSED.Δ,
 reload: UNEXPOSED.Δ,
 replace: UNEXPOSED.Δ,
 assign: UNEXPOSED.Δ,
 toString: UNEXPOSED.Δ
});

var DispHTMLHistoryVtbl = new StructT('DispHTMLHistoryVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var DispCPluginsVtbl = new StructT('DispCPluginsVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var DispHTMLNavigatorVtbl = new StructT('DispHTMLNavigatorVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var DispHTMLLocationVtbl = new StructT('DispHTMLLocationVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLBookmarkCollectionVtbl = new StructT('IHTMLBookmarkCollectionVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_length: UNEXPOSED.Δ,
 get__newEnum: UNEXPOSED.Δ,
 item: UNEXPOSED.Δ
});

var IHTMLDataTransferVtbl = new StructT('IHTMLDataTransferVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 setData: UNEXPOSED.Δ,
 getData: UNEXPOSED.Δ,
 clearData: UNEXPOSED.Δ,
 put_dropEffect: UNEXPOSED.Δ,
 get_dropEffect: UNEXPOSED.Δ,
 put_effectAllowed: UNEXPOSED.Δ,
 get_effectAllowed: UNEXPOSED.Δ
});

var IHTMLEventObj2Vtbl = new StructT('IHTMLEventObj2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 setAttribute: UNEXPOSED.Δ,
 getAttribute: UNEXPOSED.Δ,
 removeAttribute: UNEXPOSED.Δ,
 put_propertyName: UNEXPOSED.Δ,
 get_propertyName: UNEXPOSED.Δ,
 putref_bookmarks: UNEXPOSED.Δ,
 get_bookmarks: UNEXPOSED.Δ,
 putref_recordset: UNEXPOSED.Δ,
 get_recordset: UNEXPOSED.Δ,
 put_dataFld: UNEXPOSED.Δ,
 get_dataFld: UNEXPOSED.Δ,
 putref_boundElements: UNEXPOSED.Δ,
 get_boundElements: UNEXPOSED.Δ,
 put_repeat: UNEXPOSED.Δ,
 get_repeat: UNEXPOSED.Δ,
 put_srcUrn: UNEXPOSED.Δ,
 get_srcUrn: UNEXPOSED.Δ,
 putref_srcElement: UNEXPOSED.Δ,
 get_srcElement: UNEXPOSED.Δ,
 put_altKey: UNEXPOSED.Δ,
 get_altKey: UNEXPOSED.Δ,
 put_ctrlKey: UNEXPOSED.Δ,
 get_ctrlKey: UNEXPOSED.Δ,
 put_shiftKey: UNEXPOSED.Δ,
 get_shiftKey: UNEXPOSED.Δ,
 putref_fromElement: UNEXPOSED.Δ,
 get_fromElement: UNEXPOSED.Δ,
 putref_toElement: UNEXPOSED.Δ,
 get_toElement: UNEXPOSED.Δ,
 put_button: UNEXPOSED.Δ,
 get_button: UNEXPOSED.Δ,
 put_type: UNEXPOSED.Δ,
 get_type: UNEXPOSED.Δ,
 put_qualifier: UNEXPOSED.Δ,
 get_qualifier: UNEXPOSED.Δ,
 put_reason: UNEXPOSED.Δ,
 get_reason: UNEXPOSED.Δ,
 put_x: UNEXPOSED.Δ,
 get_x: UNEXPOSED.Δ,
 put_y: UNEXPOSED.Δ,
 get_y: UNEXPOSED.Δ,
 put_clientX: UNEXPOSED.Δ,
 get_clientX: UNEXPOSED.Δ,
 put_clientY: UNEXPOSED.Δ,
 get_clientY: UNEXPOSED.Δ,
 put_offsetX: UNEXPOSED.Δ,
 get_offsetX: UNEXPOSED.Δ,
 put_offsetY: UNEXPOSED.Δ,
 get_offsetY: UNEXPOSED.Δ,
 put_screenX: UNEXPOSED.Δ,
 get_screenX: UNEXPOSED.Δ,
 put_screenY: UNEXPOSED.Δ,
 get_screenY: UNEXPOSED.Δ,
 putref_srcFilter: UNEXPOSED.Δ,
 get_srcFilter: UNEXPOSED.Δ,
 get_dataTransfer: UNEXPOSED.Δ
});

var IHTMLEventObj3Vtbl = new StructT('IHTMLEventObj3Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_contentOverflow: UNEXPOSED.Δ,
 put_shiftLeft: UNEXPOSED.Δ,
 get_shiftLeft: UNEXPOSED.Δ,
 put_altLeft: UNEXPOSED.Δ,
 get_altLeft: UNEXPOSED.Δ,
 put_ctrlLeft: UNEXPOSED.Δ,
 get_ctrlLeft: UNEXPOSED.Δ,
 get_imeCompositionChange: UNEXPOSED.Δ,
 get_imeNotifyCommand: UNEXPOSED.Δ,
 get_imeNotifyData: UNEXPOSED.Δ,
 get_imeRequest: UNEXPOSED.Δ,
 get_imeRequestData: UNEXPOSED.Δ,
 get_keyboardLayout: UNEXPOSED.Δ,
 get_behaviorCookie: UNEXPOSED.Δ,
 get_behaviorPart: UNEXPOSED.Δ,
 get_nextPage: UNEXPOSED.Δ
});

var IHTMLEventObj4Vtbl = new StructT('IHTMLEventObj4Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_wheelDelta: UNEXPOSED.Δ
});

var IHTMLEventObj5Vtbl = new StructT('IHTMLEventObj5Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_url: UNEXPOSED.Δ,
 get_url: UNEXPOSED.Δ,
 put_data: UNEXPOSED.Δ,
 get_data: UNEXPOSED.Δ,
 get_source: UNEXPOSED.Δ,
 put_origin: UNEXPOSED.Δ,
 get_origin: UNEXPOSED.Δ,
 put_issession: UNEXPOSED.Δ,
 get_issession: UNEXPOSED.Δ
});

var DispCEventObjVtbl = new StructT('DispCEventObjVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var HTMLWindowEvents3Vtbl = new StructT('HTMLWindowEvents3Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var HTMLWindowEvents2Vtbl = new StructT('HTMLWindowEvents2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var HTMLWindowEventsVtbl = new StructT('HTMLWindowEventsVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLDocument2Vtbl = new StructT('IHTMLDocument2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_Script: UNEXPOSED.Δ,
 get_all: UNEXPOSED.Δ,
 get_body: UNEXPOSED.Δ,
 get_activeElement: UNEXPOSED.Δ,
 get_images: UNEXPOSED.Δ,
 get_applets: UNEXPOSED.Δ,
 get_links: UNEXPOSED.Δ,
 get_forms: UNEXPOSED.Δ,
 get_anchors: UNEXPOSED.Δ,
 put_title: UNEXPOSED.Δ,
 get_title: UNEXPOSED.Δ,
 get_scripts: UNEXPOSED.Δ,
 put_designMode: UNEXPOSED.Δ,
 get_designMode: UNEXPOSED.Δ,
 get_selection: UNEXPOSED.Δ,
 get_readyState: UNEXPOSED.Δ,
 get_frames: UNEXPOSED.Δ,
 get_embeds: UNEXPOSED.Δ,
 get_plugins: UNEXPOSED.Δ,
 put_alinkColor: UNEXPOSED.Δ,
 get_alinkColor: UNEXPOSED.Δ,
 put_bgColor: UNEXPOSED.Δ,
 get_bgColor: UNEXPOSED.Δ,
 put_fgColor: UNEXPOSED.Δ,
 get_fgColor: UNEXPOSED.Δ,
 put_linkColor: UNEXPOSED.Δ,
 get_linkColor: UNEXPOSED.Δ,
 put_vlinkColor: UNEXPOSED.Δ,
 get_vlinkColor: UNEXPOSED.Δ,
 get_referrer: UNEXPOSED.Δ,
 get_location: UNEXPOSED.Δ,
 get_lastModified: UNEXPOSED.Δ,
 put_URL: UNEXPOSED.Δ,
 get_URL: UNEXPOSED.Δ,
 put_domain: UNEXPOSED.Δ,
 get_domain: UNEXPOSED.Δ,
 put_cookie: UNEXPOSED.Δ,
 get_cookie: UNEXPOSED.Δ,
 put_expando: UNEXPOSED.Δ,
 get_expando: UNEXPOSED.Δ,
 put_charset: UNEXPOSED.Δ,
 get_charset: UNEXPOSED.Δ,
 put_defaultCharset: UNEXPOSED.Δ,
 get_defaultCharset: UNEXPOSED.Δ,
 get_mimeType: UNEXPOSED.Δ,
 get_fileSize: UNEXPOSED.Δ,
 get_fileCreatedDate: UNEXPOSED.Δ,
 get_fileModifiedDate: UNEXPOSED.Δ,
 get_fileUpdatedDate: UNEXPOSED.Δ,
 get_security: UNEXPOSED.Δ,
 get_protocol: UNEXPOSED.Δ,
 get_nameProp: UNEXPOSED.Δ,
 write: UNEXPOSED.Δ,
 writeln: UNEXPOSED.Δ,
 open: UNEXPOSED.Δ,
 close: UNEXPOSED.Δ,
 clear: UNEXPOSED.Δ,
 queryCommandSupported: UNEXPOSED.Δ,
 queryCommandEnabled: UNEXPOSED.Δ,
 queryCommandState: UNEXPOSED.Δ,
 queryCommandIndeterm: UNEXPOSED.Δ,
 queryCommandText: UNEXPOSED.Δ,
 queryCommandValue: UNEXPOSED.Δ,
 execCommand: UNEXPOSED.Δ,
 execCommandShowHelp: UNEXPOSED.Δ,
 createElement: UNEXPOSED.Δ,
 put_onhelp: UNEXPOSED.Δ,
 get_onhelp: UNEXPOSED.Δ,
 put_onclick: UNEXPOSED.Δ,
 get_onclick: UNEXPOSED.Δ,
 put_ondblclick: UNEXPOSED.Δ,
 get_ondblclick: UNEXPOSED.Δ,
 put_onkeyup: UNEXPOSED.Δ,
 get_onkeyup: UNEXPOSED.Δ,
 put_onkeydown: UNEXPOSED.Δ,
 get_onkeydown: UNEXPOSED.Δ,
 put_onkeypress: UNEXPOSED.Δ,
 get_onkeypress: UNEXPOSED.Δ,
 put_onmouseup: UNEXPOSED.Δ,
 get_onmouseup: UNEXPOSED.Δ,
 put_onmousedown: UNEXPOSED.Δ,
 get_onmousedown: UNEXPOSED.Δ,
 put_onmousemove: UNEXPOSED.Δ,
 get_onmousemove: UNEXPOSED.Δ,
 put_onmouseout: UNEXPOSED.Δ,
 get_onmouseout: UNEXPOSED.Δ,
 put_onmouseover: UNEXPOSED.Δ,
 get_onmouseover: UNEXPOSED.Δ,
 put_onreadystatechange: UNEXPOSED.Δ,
 get_onreadystatechange: UNEXPOSED.Δ,
 put_onafterupdate: UNEXPOSED.Δ,
 get_onafterupdate: UNEXPOSED.Δ,
 put_onrowexit: UNEXPOSED.Δ,
 get_onrowexit: UNEXPOSED.Δ,
 put_onrowenter: UNEXPOSED.Δ,
 get_onrowenter: UNEXPOSED.Δ,
 put_ondragstart: UNEXPOSED.Δ,
 get_ondragstart: UNEXPOSED.Δ,
 put_onselectstart: UNEXPOSED.Δ,
 get_onselectstart: UNEXPOSED.Δ,
 elementFromPoint: UNEXPOSED.Δ,
 get_parentWindow: UNEXPOSED.Δ,
 get_styleSheets: UNEXPOSED.Δ,
 put_onbeforeupdate: UNEXPOSED.Δ,
 get_onbeforeupdate: UNEXPOSED.Δ,
 put_onerrorupdate: UNEXPOSED.Δ,
 get_onerrorupdate: UNEXPOSED.Δ,
 toString: UNEXPOSED.Δ,
 createStyleSheet: UNEXPOSED.Δ
});

var IHTMLFramesCollection2Vtbl = new StructT('IHTMLFramesCollection2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 item: UNEXPOSED.Δ,
 get_length: UNEXPOSED.Δ
});

var IHTMLWindow2Vtbl = new StructT('IHTMLWindow2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 item: UNEXPOSED.Δ,
 get_length: UNEXPOSED.Δ,
 get_frames: UNEXPOSED.Δ,
 put_defaultStatus: UNEXPOSED.Δ,
 get_defaultStatus: UNEXPOSED.Δ,
 put_status: UNEXPOSED.Δ,
 get_status: UNEXPOSED.Δ,
 setTimeout: UNEXPOSED.Δ,
 clearTimeout: UNEXPOSED.Δ,
 alert: UNEXPOSED.Δ,
 confirm: UNEXPOSED.Δ,
 prompt: UNEXPOSED.Δ,
 get_Image: UNEXPOSED.Δ,
 get_location: UNEXPOSED.Δ,
 get_history: UNEXPOSED.Δ,
 close: UNEXPOSED.Δ,
 put_opener: UNEXPOSED.Δ,
 get_opener: UNEXPOSED.Δ,
 get_navigator: UNEXPOSED.Δ,
 put_name: UNEXPOSED.Δ,
 get_name: UNEXPOSED.Δ,
 get_parent: UNEXPOSED.Δ,
 open: UNEXPOSED.Δ,
 get_self: UNEXPOSED.Δ,
 get_top: UNEXPOSED.Δ,
 get_window: UNEXPOSED.Δ,
 navigate: UNEXPOSED.Δ,
 put_onfocus: UNEXPOSED.Δ,
 get_onfocus: UNEXPOSED.Δ,
 put_onblur: UNEXPOSED.Δ,
 get_onblur: UNEXPOSED.Δ,
 put_onload: UNEXPOSED.Δ,
 get_onload: UNEXPOSED.Δ,
 put_onbeforeunload: UNEXPOSED.Δ,
 get_onbeforeunload: UNEXPOSED.Δ,
 put_onunload: UNEXPOSED.Δ,
 get_onunload: UNEXPOSED.Δ,
 put_onhelp: UNEXPOSED.Δ,
 get_onhelp: UNEXPOSED.Δ,
 put_onerror: UNEXPOSED.Δ,
 get_onerror: UNEXPOSED.Δ,
 put_onresize: UNEXPOSED.Δ,
 get_onresize: UNEXPOSED.Δ,
 put_onscroll: UNEXPOSED.Δ,
 get_onscroll: UNEXPOSED.Δ,
 get_document: UNEXPOSED.Δ,
 get_event: UNEXPOSED.Δ,
 get__newEnum: UNEXPOSED.Δ,
 showModalDialog: UNEXPOSED.Δ,
 showHelp: UNEXPOSED.Δ,
 get_screen: UNEXPOSED.Δ,
 get_Option: UNEXPOSED.Δ,
 focus: UNEXPOSED.Δ,
 get_closed: UNEXPOSED.Δ,
 blur: UNEXPOSED.Δ,
 scroll: UNEXPOSED.Δ,
 get_clientInformation: UNEXPOSED.Δ,
 setInterval: UNEXPOSED.Δ,
 clearInterval: UNEXPOSED.Δ,
 put_offscreenBuffering: UNEXPOSED.Δ,
 get_offscreenBuffering: UNEXPOSED.Δ,
 execScript: UNEXPOSED.Δ,
 toString: UNEXPOSED.Δ,
 scrollBy: UNEXPOSED.Δ,
 scrollTo: UNEXPOSED.Δ,
 moveTo: UNEXPOSED.Δ,
 moveBy: UNEXPOSED.Δ,
 resizeTo: UNEXPOSED.Δ,
 resizeBy: UNEXPOSED.Δ,
 get_external: UNEXPOSED.Δ
});

var IHTMLWindow3Vtbl = new StructT('IHTMLWindow3Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_screenLeft: UNEXPOSED.Δ,
 get_screenTop: UNEXPOSED.Δ,
 attachEvent: UNEXPOSED.Δ,
 detachEvent: UNEXPOSED.Δ,
 setTimeout: UNEXPOSED.Δ,
 setInterval: UNEXPOSED.Δ,
 print: UNEXPOSED.Δ,
 put_onbeforeprint: UNEXPOSED.Δ,
 get_onbeforeprint: UNEXPOSED.Δ,
 put_onafterprint: UNEXPOSED.Δ,
 get_onafterprint: UNEXPOSED.Δ,
 get_clipboardData: UNEXPOSED.Δ,
 showModelessDialog: UNEXPOSED.Δ
});

var IHTMLFrameBaseVtbl = new StructT('IHTMLFrameBaseVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_src: UNEXPOSED.Δ,
 get_src: UNEXPOSED.Δ,
 put_name: UNEXPOSED.Δ,
 get_name: UNEXPOSED.Δ,
 put_border: UNEXPOSED.Δ,
 get_border: UNEXPOSED.Δ,
 put_frameBorder: UNEXPOSED.Δ,
 get_frameBorder: UNEXPOSED.Δ,
 put_frameSpacing: UNEXPOSED.Δ,
 get_frameSpacing: UNEXPOSED.Δ,
 put_marginWidth: UNEXPOSED.Δ,
 get_marginWidth: UNEXPOSED.Δ,
 put_marginHeight: UNEXPOSED.Δ,
 get_marginHeight: UNEXPOSED.Δ,
 put_noResize: UNEXPOSED.Δ,
 get_noResize: UNEXPOSED.Δ,
 put_scrolling: UNEXPOSED.Δ,
 get_scrolling: UNEXPOSED.Δ
});

var IHTMLStorageVtbl = new StructT('IHTMLStorageVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_length: UNEXPOSED.Δ,
 get_remainingSpace: UNEXPOSED.Δ,
 key: UNEXPOSED.Δ,
 getItem: UNEXPOSED.Δ,
 setItem: UNEXPOSED.Δ,
 removeItem: UNEXPOSED.Δ,
 clear: UNEXPOSED.Δ
});

var IHTMLScreenVtbl = new StructT('IHTMLScreenVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_colorDepth: UNEXPOSED.Δ,
 put_bufferDepth: UNEXPOSED.Δ,
 get_bufferDepth: UNEXPOSED.Δ,
 get_width: UNEXPOSED.Δ,
 get_height: UNEXPOSED.Δ,
 put_updateInterval: UNEXPOSED.Δ,
 get_updateInterval: UNEXPOSED.Δ,
 get_availHeight: UNEXPOSED.Δ,
 get_availWidth: UNEXPOSED.Δ,
 get_fontSmoothingEnabled: UNEXPOSED.Δ
});

var IHTMLScreen2Vtbl = new StructT('IHTMLScreen2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_logicalXDPI: UNEXPOSED.Δ,
 get_logicalYDPI: UNEXPOSED.Δ,
 get_deviceXDPI: UNEXPOSED.Δ,
 get_deviceYDPI: UNEXPOSED.Δ
});

var IHTMLScreen3Vtbl = new StructT('IHTMLScreen3Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_systemXDPI: UNEXPOSED.Δ,
 get_systemYDPI: UNEXPOSED.Δ
});

var IHTMLWindow4Vtbl = new StructT('IHTMLWindow4Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 createPopup: UNEXPOSED.Δ,
 get_frameElement: UNEXPOSED.Δ
});

var IHTMLWindow5Vtbl = new StructT('IHTMLWindow5Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_XMLHttpRequest: UNEXPOSED.Δ,
 get_XMLHttpRequest: UNEXPOSED.Δ
});

var IHTMLWindow6Vtbl = new StructT('IHTMLWindow6Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_XDomainRequest: UNEXPOSED.Δ,
 get_XDomainRequest: UNEXPOSED.Δ,
 get_sessionStorage: UNEXPOSED.Δ,
 get_localStorage: UNEXPOSED.Δ,
 put_onhashchange: UNEXPOSED.Δ,
 get_onhashchange: UNEXPOSED.Δ,
 get_maxConnectionsPerServer: UNEXPOSED.Δ,
 postMessage: UNEXPOSED.Δ,
 toStaticHTML: UNEXPOSED.Δ,
 put_onmessage: UNEXPOSED.Δ,
 get_onmessage: UNEXPOSED.Δ,
 msWriteProfilerMark: UNEXPOSED.Δ
});

var DispHTMLScreenVtbl = new StructT('DispHTMLScreenVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var DispHTMLWindow2Vtbl = new StructT('DispHTMLWindow2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var DispHTMLWindowProxyVtbl = new StructT('DispHTMLWindowProxyVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLDocumentCompatibleInfoVtbl = new StructT('IHTMLDocumentCompatibleInfoVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_userAgent: UNEXPOSED.Δ,
 get_version: UNEXPOSED.Δ
});

var IHTMLDocumentCompatibleInfoCollectionVtbl = new StructT('IHTMLDocumentCompatibleInfoCollectionVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_length: UNEXPOSED.Δ,
 item: UNEXPOSED.Δ
});

var DispHTMLDocumentCompatibleInfoVtbl = new StructT('DispHTMLDocumentCompatibleInfoVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var DispHTMLDocumentCompatibleInfoCollectionVtbl = new StructT('DispHTMLDocumentCompatibleInfoCollectionVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var HTMLDocumentEvents3Vtbl = new StructT('HTMLDocumentEvents3Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var HTMLDocumentEvents2Vtbl = new StructT('HTMLDocumentEvents2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var HTMLDocumentEventsVtbl = new StructT('HTMLDocumentEventsVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLDocument3Vtbl = new StructT('IHTMLDocument3Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 releaseCapture: UNEXPOSED.Δ,
 recalc: UNEXPOSED.Δ,
 createTextNode: UNEXPOSED.Δ,
 get_documentElement: UNEXPOSED.Δ,
 get_uniqueID: UNEXPOSED.Δ,
 attachEvent: UNEXPOSED.Δ,
 detachEvent: UNEXPOSED.Δ,
 put_onrowsdelete: UNEXPOSED.Δ,
 get_onrowsdelete: UNEXPOSED.Δ,
 put_onrowsinserted: UNEXPOSED.Δ,
 get_onrowsinserted: UNEXPOSED.Δ,
 put_oncellchange: UNEXPOSED.Δ,
 get_oncellchange: UNEXPOSED.Δ,
 put_ondatasetchanged: UNEXPOSED.Δ,
 get_ondatasetchanged: UNEXPOSED.Δ,
 put_ondataavailable: UNEXPOSED.Δ,
 get_ondataavailable: UNEXPOSED.Δ,
 put_ondatasetcomplete: UNEXPOSED.Δ,
 get_ondatasetcomplete: UNEXPOSED.Δ,
 put_onpropertychange: UNEXPOSED.Δ,
 get_onpropertychange: UNEXPOSED.Δ,
 put_dir: UNEXPOSED.Δ,
 get_dir: UNEXPOSED.Δ,
 put_oncontextmenu: UNEXPOSED.Δ,
 get_oncontextmenu: UNEXPOSED.Δ,
 put_onstop: UNEXPOSED.Δ,
 get_onstop: UNEXPOSED.Δ,
 createDocumentFragment: UNEXPOSED.Δ,
 get_parentDocument: UNEXPOSED.Δ,
 put_enableDownload: UNEXPOSED.Δ,
 get_enableDownload: UNEXPOSED.Δ,
 put_baseUrl: UNEXPOSED.Δ,
 get_baseUrl: UNEXPOSED.Δ,
 get_childNodes: UNEXPOSED.Δ,
 put_inheritStyleSheets: UNEXPOSED.Δ,
 get_inheritStyleSheets: UNEXPOSED.Δ,
 put_onbeforeeditfocus: UNEXPOSED.Δ,
 get_onbeforeeditfocus: UNEXPOSED.Δ,
 getElementsByName: UNEXPOSED.Δ,
 getElementById: UNEXPOSED.Δ,
 getElementsByTagName: UNEXPOSED.Δ
});

var IHTMLDocument4Vtbl = new StructT('IHTMLDocument4Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 focus: UNEXPOSED.Δ,
 hasFocus: UNEXPOSED.Δ,
 put_onselectionchange: UNEXPOSED.Δ,
 get_onselectionchange: UNEXPOSED.Δ,
 get_namespaces: UNEXPOSED.Δ,
 createDocumentFromUrl: UNEXPOSED.Δ,
 put_media: UNEXPOSED.Δ,
 get_media: UNEXPOSED.Δ,
 createEventObject: UNEXPOSED.Δ,
 fireEvent: UNEXPOSED.Δ,
 createRenderStyle: UNEXPOSED.Δ,
 put_oncontrolselect: UNEXPOSED.Δ,
 get_oncontrolselect: UNEXPOSED.Δ,
 get_URLUnencoded: UNEXPOSED.Δ
});

var IHTMLDocument5Vtbl = new StructT('IHTMLDocument5Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_onmousewheel: UNEXPOSED.Δ,
 get_onmousewheel: UNEXPOSED.Δ,
 get_doctype: UNEXPOSED.Δ,
 get_implementation: UNEXPOSED.Δ,
 createAttribute: UNEXPOSED.Δ,
 createComment: UNEXPOSED.Δ,
 put_onfocusin: UNEXPOSED.Δ,
 get_onfocusin: UNEXPOSED.Δ,
 put_onfocusout: UNEXPOSED.Δ,
 get_onfocusout: UNEXPOSED.Δ,
 put_onactivate: UNEXPOSED.Δ,
 get_onactivate: UNEXPOSED.Δ,
 put_ondeactivate: UNEXPOSED.Δ,
 get_ondeactivate: UNEXPOSED.Δ,
 put_onbeforeactivate: UNEXPOSED.Δ,
 get_onbeforeactivate: UNEXPOSED.Δ,
 put_onbeforedeactivate: UNEXPOSED.Δ,
 get_onbeforedeactivate: UNEXPOSED.Δ,
 get_compatMode: UNEXPOSED.Δ
});

var IHTMLDocument6Vtbl = new StructT('IHTMLDocument6Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_compatible: UNEXPOSED.Δ,
 get_documentMode: UNEXPOSED.Δ,
 put_onstorage: UNEXPOSED.Δ,
 get_onstorage: UNEXPOSED.Δ,
 put_onstoragecommit: UNEXPOSED.Δ,
 get_onstoragecommit: UNEXPOSED.Δ,
 getElementById: UNEXPOSED.Δ,
 updateSettings: UNEXPOSED.Δ
});

var IDocumentSelectorVtbl = new StructT('IDocumentSelectorVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 querySelector: UNEXPOSED.Δ,
 querySelectorAll: UNEXPOSED.Δ
});

var DispHTMLDocumentVtbl = new StructT('DispHTMLDocumentVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var DWebBridgeEventsVtbl = new StructT('DWebBridgeEventsVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IWebBridgeVtbl = new StructT('IWebBridgeVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_URL: UNEXPOSED.Δ,
 get_URL: UNEXPOSED.Δ,
 put_Scrollbar: UNEXPOSED.Δ,
 get_Scrollbar: UNEXPOSED.Δ,
 put_embed: UNEXPOSED.Δ,
 get_embed: UNEXPOSED.Δ,
 get_event: UNEXPOSED.Δ,
 get_readyState: UNEXPOSED.Δ,
 AboutBox: UNEXPOSED.Δ
});

var IWBScriptControlVtbl = new StructT('IWBScriptControlVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 raiseEvent: UNEXPOSED.Δ,
 bubbleEvent: UNEXPOSED.Δ,
 setContextMenu: UNEXPOSED.Δ,
 put_selectableContent: UNEXPOSED.Δ,
 get_selectableContent: UNEXPOSED.Δ,
 get_frozen: UNEXPOSED.Δ,
 put_scrollbar: UNEXPOSED.Δ,
 get_scrollbar: UNEXPOSED.Δ,
 get_version: UNEXPOSED.Δ,
 get_visibility: UNEXPOSED.Δ,
 put_onvisibilitychange: UNEXPOSED.Δ,
 get_onvisibilitychange: UNEXPOSED.Δ
});

var IHTMLEmbedElementVtbl = new StructT('IHTMLEmbedElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_hidden: UNEXPOSED.Δ,
 get_hidden: UNEXPOSED.Δ,
 get_palette: UNEXPOSED.Δ,
 get_pluginspage: UNEXPOSED.Δ,
 put_src: UNEXPOSED.Δ,
 get_src: UNEXPOSED.Δ,
 put_units: UNEXPOSED.Δ,
 get_units: UNEXPOSED.Δ,
 put_name: UNEXPOSED.Δ,
 get_name: UNEXPOSED.Δ,
 put_width: UNEXPOSED.Δ,
 get_width: UNEXPOSED.Δ,
 put_height: UNEXPOSED.Δ,
 get_height: UNEXPOSED.Δ
});

var IHTMLEmbedElement2Vtbl = new StructT('IHTMLEmbedElement2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_src: UNEXPOSED.Δ,
 get_src: UNEXPOSED.Δ,
 get_pluginspage: UNEXPOSED.Δ
});

var DispHTMLEmbedVtbl = new StructT('DispHTMLEmbedVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var HTMLMapEvents2Vtbl = new StructT('HTMLMapEvents2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var HTMLMapEventsVtbl = new StructT('HTMLMapEventsVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLAreasCollectionVtbl = new StructT('IHTMLAreasCollectionVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_length: UNEXPOSED.Δ,
 get_length: UNEXPOSED.Δ,
 get__newEnum: UNEXPOSED.Δ,
 item: UNEXPOSED.Δ,
 tags: UNEXPOSED.Δ,
 add: UNEXPOSED.Δ,
 remove: UNEXPOSED.Δ
});

var IHTMLAreasCollection2Vtbl = new StructT('IHTMLAreasCollection2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 urns: UNEXPOSED.Δ
});

var IHTMLAreasCollection3Vtbl = new StructT('IHTMLAreasCollection3Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 namedItem: UNEXPOSED.Δ
});

var IHTMLAreasCollection4Vtbl = new StructT('IHTMLAreasCollection4Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_length: UNEXPOSED.Δ,
 item: UNEXPOSED.Δ,
 namedItem: UNEXPOSED.Δ
});

var IHTMLMapElementVtbl = new StructT('IHTMLMapElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_areas: UNEXPOSED.Δ,
 put_name: UNEXPOSED.Δ,
 get_name: UNEXPOSED.Δ
});

var DispHTMLAreasCollectionVtbl = new StructT('DispHTMLAreasCollectionVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var DispHTMLMapElementVtbl = new StructT('DispHTMLMapElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var HTMLAreaEvents2Vtbl = new StructT('HTMLAreaEvents2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var HTMLAreaEventsVtbl = new StructT('HTMLAreaEventsVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLAreaElementVtbl = new StructT('IHTMLAreaElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_shape: UNEXPOSED.Δ,
 get_shape: UNEXPOSED.Δ,
 put_coords: UNEXPOSED.Δ,
 get_coords: UNEXPOSED.Δ,
 put_href: UNEXPOSED.Δ,
 get_href: UNEXPOSED.Δ,
 put_target: UNEXPOSED.Δ,
 get_target: UNEXPOSED.Δ,
 put_alt: UNEXPOSED.Δ,
 get_alt: UNEXPOSED.Δ,
 put_noHref: UNEXPOSED.Δ,
 get_noHref: UNEXPOSED.Δ,
 put_host: UNEXPOSED.Δ,
 get_host: UNEXPOSED.Δ,
 put_hostname: UNEXPOSED.Δ,
 get_hostname: UNEXPOSED.Δ,
 put_pathname: UNEXPOSED.Δ,
 get_pathname: UNEXPOSED.Δ,
 put_port: UNEXPOSED.Δ,
 get_port: UNEXPOSED.Δ,
 put_protocol: UNEXPOSED.Δ,
 get_protocol: UNEXPOSED.Δ,
 put_search: UNEXPOSED.Δ,
 get_search: UNEXPOSED.Δ,
 put_hash: UNEXPOSED.Δ,
 get_hash: UNEXPOSED.Δ,
 put_onblur: UNEXPOSED.Δ,
 get_onblur: UNEXPOSED.Δ,
 put_onfocus: UNEXPOSED.Δ,
 get_onfocus: UNEXPOSED.Δ,
 put_tabIndex: UNEXPOSED.Δ,
 get_tabIndex: UNEXPOSED.Δ,
 focus: UNEXPOSED.Δ,
 blur: UNEXPOSED.Δ
});

var IHTMLAreaElement2Vtbl = new StructT('IHTMLAreaElement2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_shape: UNEXPOSED.Δ,
 get_shape: UNEXPOSED.Δ,
 put_coords: UNEXPOSED.Δ,
 get_coords: UNEXPOSED.Δ,
 put_href: UNEXPOSED.Δ,
 get_href: UNEXPOSED.Δ
});

var DispHTMLAreaElementVtbl = new StructT('DispHTMLAreaElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLTableCaptionVtbl = new StructT('IHTMLTableCaptionVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_align: UNEXPOSED.Δ,
 get_align: UNEXPOSED.Δ,
 put_vAlign: UNEXPOSED.Δ,
 get_vAlign: UNEXPOSED.Δ
});

var DispHTMLTableCaptionVtbl = new StructT('DispHTMLTableCaptionVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLCommentElementVtbl = new StructT('IHTMLCommentElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_text: UNEXPOSED.Δ,
 get_text: UNEXPOSED.Δ,
 put_atomic: UNEXPOSED.Δ,
 get_atomic: UNEXPOSED.Δ
});

var IHTMLCommentElement2Vtbl = new StructT('IHTMLCommentElement2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_data: UNEXPOSED.Δ,
 get_data: UNEXPOSED.Δ,
 get_length: UNEXPOSED.Δ,
 substringData: UNEXPOSED.Δ,
 appendData: UNEXPOSED.Δ,
 insertData: UNEXPOSED.Δ,
 deleteData: UNEXPOSED.Δ,
 replaceData: UNEXPOSED.Δ
});

var DispHTMLCommentElementVtbl = new StructT('DispHTMLCommentElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLPhraseElementVtbl = new StructT('IHTMLPhraseElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLPhraseElement2Vtbl = new StructT('IHTMLPhraseElement2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_cite: UNEXPOSED.Δ,
 get_cite: UNEXPOSED.Δ,
 put_dateTime: UNEXPOSED.Δ,
 get_dateTime: UNEXPOSED.Δ
});

var IHTMLPhraseElement3Vtbl = new StructT('IHTMLPhraseElement3Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_cite: UNEXPOSED.Δ,
 get_cite: UNEXPOSED.Δ
});

var IHTMLSpanElementVtbl = new StructT('IHTMLSpanElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var DispHTMLPhraseElementVtbl = new StructT('DispHTMLPhraseElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var DispHTMLSpanElementVtbl = new StructT('DispHTMLSpanElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var HTMLTableEvents2Vtbl = new StructT('HTMLTableEvents2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var HTMLTableEventsVtbl = new StructT('HTMLTableEventsVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLTableSectionVtbl = new StructT('IHTMLTableSectionVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_align: UNEXPOSED.Δ,
 get_align: UNEXPOSED.Δ,
 put_vAlign: UNEXPOSED.Δ,
 get_vAlign: UNEXPOSED.Δ,
 put_bgColor: UNEXPOSED.Δ,
 get_bgColor: UNEXPOSED.Δ,
 get_rows: UNEXPOSED.Δ,
 insertRow: UNEXPOSED.Δ,
 deleteRow: UNEXPOSED.Δ
});

var IHTMLTableVtbl = new StructT('IHTMLTableVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_cols: UNEXPOSED.Δ,
 get_cols: UNEXPOSED.Δ,
 put_border: UNEXPOSED.Δ,
 get_border: UNEXPOSED.Δ,
 put_frame: UNEXPOSED.Δ,
 get_frame: UNEXPOSED.Δ,
 put_rules: UNEXPOSED.Δ,
 get_rules: UNEXPOSED.Δ,
 put_cellSpacing: UNEXPOSED.Δ,
 get_cellSpacing: UNEXPOSED.Δ,
 put_cellPadding: UNEXPOSED.Δ,
 get_cellPadding: UNEXPOSED.Δ,
 put_background: UNEXPOSED.Δ,
 get_background: UNEXPOSED.Δ,
 put_bgColor: UNEXPOSED.Δ,
 get_bgColor: UNEXPOSED.Δ,
 put_borderColor: UNEXPOSED.Δ,
 get_borderColor: UNEXPOSED.Δ,
 put_borderColorLight: UNEXPOSED.Δ,
 get_borderColorLight: UNEXPOSED.Δ,
 put_borderColorDark: UNEXPOSED.Δ,
 get_borderColorDark: UNEXPOSED.Δ,
 put_align: UNEXPOSED.Δ,
 get_align: UNEXPOSED.Δ,
 refresh: UNEXPOSED.Δ,
 get_rows: UNEXPOSED.Δ,
 put_width: UNEXPOSED.Δ,
 get_width: UNEXPOSED.Δ,
 put_height: UNEXPOSED.Δ,
 get_height: UNEXPOSED.Δ,
 put_dataPageSize: UNEXPOSED.Δ,
 get_dataPageSize: UNEXPOSED.Δ,
 nextPage: UNEXPOSED.Δ,
 previousPage: UNEXPOSED.Δ,
 get_tHead: UNEXPOSED.Δ,
 get_tFoot: UNEXPOSED.Δ,
 get_tBodies: UNEXPOSED.Δ,
 get_caption: UNEXPOSED.Δ,
 createTHead: UNEXPOSED.Δ,
 deleteTHead: UNEXPOSED.Δ,
 createTFoot: UNEXPOSED.Δ,
 deleteTFoot: UNEXPOSED.Δ,
 createCaption: UNEXPOSED.Δ,
 deleteCaption: UNEXPOSED.Δ,
 insertRow: UNEXPOSED.Δ,
 deleteRow: UNEXPOSED.Δ,
 get_readyState: UNEXPOSED.Δ,
 put_onreadystatechange: UNEXPOSED.Δ,
 get_onreadystatechange: UNEXPOSED.Δ
});

var IHTMLTable2Vtbl = new StructT('IHTMLTable2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 firstPage: UNEXPOSED.Δ,
 lastPage: UNEXPOSED.Δ,
 get_cells: UNEXPOSED.Δ,
 moveRow: UNEXPOSED.Δ
});

var IHTMLTable3Vtbl = new StructT('IHTMLTable3Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_summary: UNEXPOSED.Δ,
 get_summary: UNEXPOSED.Δ
});

var IHTMLTableColVtbl = new StructT('IHTMLTableColVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_span: UNEXPOSED.Δ,
 get_span: UNEXPOSED.Δ,
 put_width: UNEXPOSED.Δ,
 get_width: UNEXPOSED.Δ,
 put_align: UNEXPOSED.Δ,
 get_align: UNEXPOSED.Δ,
 put_vAlign: UNEXPOSED.Δ,
 get_vAlign: UNEXPOSED.Δ
});

var IHTMLTableCol2Vtbl = new StructT('IHTMLTableCol2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_ch: UNEXPOSED.Δ,
 get_ch: UNEXPOSED.Δ,
 put_chOff: UNEXPOSED.Δ,
 get_chOff: UNEXPOSED.Δ
});

var IHTMLTableSection2Vtbl = new StructT('IHTMLTableSection2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 moveRow: UNEXPOSED.Δ
});

var IHTMLTableSection3Vtbl = new StructT('IHTMLTableSection3Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_ch: UNEXPOSED.Δ,
 get_ch: UNEXPOSED.Δ,
 put_chOff: UNEXPOSED.Δ,
 get_chOff: UNEXPOSED.Δ
});

var IHTMLTableRowVtbl = new StructT('IHTMLTableRowVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_align: UNEXPOSED.Δ,
 get_align: UNEXPOSED.Δ,
 put_vAlign: UNEXPOSED.Δ,
 get_vAlign: UNEXPOSED.Δ,
 put_bgColor: UNEXPOSED.Δ,
 get_bgColor: UNEXPOSED.Δ,
 put_borderColor: UNEXPOSED.Δ,
 get_borderColor: UNEXPOSED.Δ,
 put_borderColorLight: UNEXPOSED.Δ,
 get_borderColorLight: UNEXPOSED.Δ,
 put_borderColorDark: UNEXPOSED.Δ,
 get_borderColorDark: UNEXPOSED.Δ,
 get_rowIndex: UNEXPOSED.Δ,
 get_sectionRowIndex: UNEXPOSED.Δ,
 get_cells: UNEXPOSED.Δ,
 insertCell: UNEXPOSED.Δ,
 deleteCell: UNEXPOSED.Δ
});

var IHTMLTableRow2Vtbl = new StructT('IHTMLTableRow2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_height: UNEXPOSED.Δ,
 get_height: UNEXPOSED.Δ
});

var IHTMLTableRow3Vtbl = new StructT('IHTMLTableRow3Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_ch: UNEXPOSED.Δ,
 get_ch: UNEXPOSED.Δ,
 put_chOff: UNEXPOSED.Δ,
 get_chOff: UNEXPOSED.Δ
});

var IHTMLTableRowMetricsVtbl = new StructT('IHTMLTableRowMetricsVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_clientHeight: UNEXPOSED.Δ,
 get_clientWidth: UNEXPOSED.Δ,
 get_clientTop: UNEXPOSED.Δ,
 get_clientLeft: UNEXPOSED.Δ
});

var IHTMLTableCellVtbl = new StructT('IHTMLTableCellVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_rowSpan: UNEXPOSED.Δ,
 get_rowSpan: UNEXPOSED.Δ,
 put_colSpan: UNEXPOSED.Δ,
 get_colSpan: UNEXPOSED.Δ,
 put_align: UNEXPOSED.Δ,
 get_align: UNEXPOSED.Δ,
 put_vAlign: UNEXPOSED.Δ,
 get_vAlign: UNEXPOSED.Δ,
 put_bgColor: UNEXPOSED.Δ,
 get_bgColor: UNEXPOSED.Δ,
 put_noWrap: UNEXPOSED.Δ,
 get_noWrap: UNEXPOSED.Δ,
 put_background: UNEXPOSED.Δ,
 get_background: UNEXPOSED.Δ,
 put_borderColor: UNEXPOSED.Δ,
 get_borderColor: UNEXPOSED.Δ,
 put_borderColorLight: UNEXPOSED.Δ,
 get_borderColorLight: UNEXPOSED.Δ,
 put_borderColorDark: UNEXPOSED.Δ,
 get_borderColorDark: UNEXPOSED.Δ,
 put_width: UNEXPOSED.Δ,
 get_width: UNEXPOSED.Δ,
 put_height: UNEXPOSED.Δ,
 get_height: UNEXPOSED.Δ,
 get_cellIndex: UNEXPOSED.Δ
});

var IHTMLTableCell2Vtbl = new StructT('IHTMLTableCell2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_abbr: UNEXPOSED.Δ,
 get_abbr: UNEXPOSED.Δ,
 put_axis: UNEXPOSED.Δ,
 get_axis: UNEXPOSED.Δ,
 put_ch: UNEXPOSED.Δ,
 get_ch: UNEXPOSED.Δ,
 put_chOff: UNEXPOSED.Δ,
 get_chOff: UNEXPOSED.Δ,
 put_headers: UNEXPOSED.Δ,
 get_headers: UNEXPOSED.Δ,
 put_scope: UNEXPOSED.Δ,
 get_scope: UNEXPOSED.Δ
});

var DispHTMLTableVtbl = new StructT('DispHTMLTableVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var DispHTMLTableColVtbl = new StructT('DispHTMLTableColVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var DispHTMLTableSectionVtbl = new StructT('DispHTMLTableSectionVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var DispHTMLTableRowVtbl = new StructT('DispHTMLTableRowVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var DispHTMLTableCellVtbl = new StructT('DispHTMLTableCellVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var HTMLScriptEvents2Vtbl = new StructT('HTMLScriptEvents2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var HTMLScriptEventsVtbl = new StructT('HTMLScriptEventsVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLScriptElementVtbl = new StructT('IHTMLScriptElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_src: UNEXPOSED.Δ,
 get_src: UNEXPOSED.Δ,
 put_htmlFor: UNEXPOSED.Δ,
 get_htmlFor: UNEXPOSED.Δ,
 put_event: UNEXPOSED.Δ,
 get_event: UNEXPOSED.Δ,
 put_text: UNEXPOSED.Δ,
 get_text: UNEXPOSED.Δ,
 put_defer: UNEXPOSED.Δ,
 get_defer: UNEXPOSED.Δ,
 get_readyState: UNEXPOSED.Δ,
 put_onerror: UNEXPOSED.Δ,
 get_onerror: UNEXPOSED.Δ,
 put_type: UNEXPOSED.Δ,
 get_type: UNEXPOSED.Δ
});

var IHTMLScriptElement2Vtbl = new StructT('IHTMLScriptElement2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_charset: UNEXPOSED.Δ,
 get_charset: UNEXPOSED.Δ
});

var IHTMLScriptElement3Vtbl = new StructT('IHTMLScriptElement3Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_src: UNEXPOSED.Δ,
 get_src: UNEXPOSED.Δ
});

var DispHTMLScriptElementVtbl = new StructT('DispHTMLScriptElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLNoShowElementVtbl = new StructT('IHTMLNoShowElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var DispHTMLNoShowElementVtbl = new StructT('DispHTMLNoShowElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var HTMLObjectElementEvents2Vtbl = new StructT('HTMLObjectElementEvents2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var HTMLObjectElementEventsVtbl = new StructT('HTMLObjectElementEventsVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLObjectElementVtbl = new StructT('IHTMLObjectElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_object: UNEXPOSED.Δ,
 get_classid: UNEXPOSED.Δ,
 get_data: UNEXPOSED.Δ,
 putref_recordset: UNEXPOSED.Δ,
 get_recordset: UNEXPOSED.Δ,
 put_align: UNEXPOSED.Δ,
 get_align: UNEXPOSED.Δ,
 put_name: UNEXPOSED.Δ,
 get_name: UNEXPOSED.Δ,
 put_codeBase: UNEXPOSED.Δ,
 get_codeBase: UNEXPOSED.Δ,
 put_codeType: UNEXPOSED.Δ,
 get_codeType: UNEXPOSED.Δ,
 put_code: UNEXPOSED.Δ,
 get_code: UNEXPOSED.Δ,
 get_BaseHref: UNEXPOSED.Δ,
 put_type: UNEXPOSED.Δ,
 get_type: UNEXPOSED.Δ,
 get_form: UNEXPOSED.Δ,
 put_width: UNEXPOSED.Δ,
 get_width: UNEXPOSED.Δ,
 put_height: UNEXPOSED.Δ,
 get_height: UNEXPOSED.Δ,
 get_readyState: UNEXPOSED.Δ,
 put_onreadystatechange: UNEXPOSED.Δ,
 get_onreadystatechange: UNEXPOSED.Δ,
 put_onerror: UNEXPOSED.Δ,
 get_onerror: UNEXPOSED.Δ,
 put_altHtml: UNEXPOSED.Δ,
 get_altHtml: UNEXPOSED.Δ,
 put_vspace: UNEXPOSED.Δ,
 get_vspace: UNEXPOSED.Δ,
 put_hspace: UNEXPOSED.Δ,
 get_hspace: UNEXPOSED.Δ
});

var IHTMLObjectElement2Vtbl = new StructT('IHTMLObjectElement2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 namedRecordset: UNEXPOSED.Δ,
 put_classid: UNEXPOSED.Δ,
 get_classid: UNEXPOSED.Δ,
 put_data: UNEXPOSED.Δ,
 get_data: UNEXPOSED.Δ
});

var IHTMLObjectElement3Vtbl = new StructT('IHTMLObjectElement3Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_archive: UNEXPOSED.Δ,
 get_archive: UNEXPOSED.Δ,
 put_alt: UNEXPOSED.Δ,
 get_alt: UNEXPOSED.Δ,
 put_declare: UNEXPOSED.Δ,
 get_declare: UNEXPOSED.Δ,
 put_standby: UNEXPOSED.Δ,
 get_standby: UNEXPOSED.Δ,
 put_border: UNEXPOSED.Δ,
 get_border: UNEXPOSED.Δ,
 put_useMap: UNEXPOSED.Δ,
 get_useMap: UNEXPOSED.Δ
});

var IHTMLObjectElement4Vtbl = new StructT('IHTMLObjectElement4Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_contentDocument: UNEXPOSED.Δ,
 put_codeBase: UNEXPOSED.Δ,
 get_codeBase: UNEXPOSED.Δ,
 put_data: UNEXPOSED.Δ,
 get_data: UNEXPOSED.Δ
});

var IHTMLParamElementVtbl = new StructT('IHTMLParamElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_name: UNEXPOSED.Δ,
 get_name: UNEXPOSED.Δ,
 put_value: UNEXPOSED.Δ,
 get_value: UNEXPOSED.Δ,
 put_type: UNEXPOSED.Δ,
 get_type: UNEXPOSED.Δ,
 put_valueType: UNEXPOSED.Δ,
 get_valueType: UNEXPOSED.Δ
});

var IHTMLParamElement2Vtbl = new StructT('IHTMLParamElement2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_name: UNEXPOSED.Δ,
 get_name: UNEXPOSED.Δ,
 put_type: UNEXPOSED.Δ,
 get_type: UNEXPOSED.Δ,
 put_value: UNEXPOSED.Δ,
 get_value: UNEXPOSED.Δ,
 put_valueType: UNEXPOSED.Δ,
 get_valueType: UNEXPOSED.Δ
});

var DispHTMLObjectElementVtbl = new StructT('DispHTMLObjectElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var DispHTMLParamElementVtbl = new StructT('DispHTMLParamElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var HTMLFrameSiteEvents2Vtbl = new StructT('HTMLFrameSiteEvents2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var HTMLFrameSiteEventsVtbl = new StructT('HTMLFrameSiteEventsVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLFrameBase2Vtbl = new StructT('IHTMLFrameBase2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_contentWindow: UNEXPOSED.Δ,
 put_onload: UNEXPOSED.Δ,
 get_onload: UNEXPOSED.Δ,
 put_onreadystatechange: UNEXPOSED.Δ,
 get_onreadystatechange: UNEXPOSED.Δ,
 get_readyState: UNEXPOSED.Δ,
 put_allowTransparency: UNEXPOSED.Δ,
 get_allowTransparency: UNEXPOSED.Δ
});

var IHTMLFrameBase3Vtbl = new StructT('IHTMLFrameBase3Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_longDesc: UNEXPOSED.Δ,
 get_longDesc: UNEXPOSED.Δ
});

var DispHTMLFrameBaseVtbl = new StructT('DispHTMLFrameBaseVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLFrameElementVtbl = new StructT('IHTMLFrameElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_borderColor: UNEXPOSED.Δ,
 get_borderColor: UNEXPOSED.Δ
});

var IHTMLFrameElement2Vtbl = new StructT('IHTMLFrameElement2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_height: UNEXPOSED.Δ,
 get_height: UNEXPOSED.Δ,
 put_width: UNEXPOSED.Δ,
 get_width: UNEXPOSED.Δ
});

var IHTMLFrameElement3Vtbl = new StructT('IHTMLFrameElement3Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_contentDocument: UNEXPOSED.Δ,
 put_src: UNEXPOSED.Δ,
 get_src: UNEXPOSED.Δ,
 put_longDesc: UNEXPOSED.Δ,
 get_longDesc: UNEXPOSED.Δ,
 put_frameBorder: UNEXPOSED.Δ,
 get_frameBorder: UNEXPOSED.Δ
});

var DispHTMLFrameElementVtbl = new StructT('DispHTMLFrameElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLIFrameElementVtbl = new StructT('IHTMLIFrameElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_vspace: UNEXPOSED.Δ,
 get_vspace: UNEXPOSED.Δ,
 put_hspace: UNEXPOSED.Δ,
 get_hspace: UNEXPOSED.Δ,
 put_align: UNEXPOSED.Δ,
 get_align: UNEXPOSED.Δ
});

var IHTMLIFrameElement2Vtbl = new StructT('IHTMLIFrameElement2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_height: UNEXPOSED.Δ,
 get_height: UNEXPOSED.Δ,
 put_width: UNEXPOSED.Δ,
 get_width: UNEXPOSED.Δ
});

var IHTMLIFrameElement3Vtbl = new StructT('IHTMLIFrameElement3Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_contentDocument: UNEXPOSED.Δ,
 put_src: UNEXPOSED.Δ,
 get_src: UNEXPOSED.Δ,
 put_longDesc: UNEXPOSED.Δ,
 get_longDesc: UNEXPOSED.Δ,
 put_frameBorder: UNEXPOSED.Δ,
 get_frameBorder: UNEXPOSED.Δ
});

var DispHTMLIFrameVtbl = new StructT('DispHTMLIFrameVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLDivPositionVtbl = new StructT('IHTMLDivPositionVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_align: UNEXPOSED.Δ,
 get_align: UNEXPOSED.Δ
});

var IHTMLFieldSetElementVtbl = new StructT('IHTMLFieldSetElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_align: UNEXPOSED.Δ,
 get_align: UNEXPOSED.Δ
});

var IHTMLFieldSetElement2Vtbl = new StructT('IHTMLFieldSetElement2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_form: UNEXPOSED.Δ
});

var IHTMLLegendElementVtbl = new StructT('IHTMLLegendElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_align: UNEXPOSED.Δ,
 get_align: UNEXPOSED.Δ
});

var IHTMLLegendElement2Vtbl = new StructT('IHTMLLegendElement2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_form: UNEXPOSED.Δ
});

var DispHTMLDivPositionVtbl = new StructT('DispHTMLDivPositionVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var DispHTMLFieldSetElementVtbl = new StructT('DispHTMLFieldSetElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var DispHTMLLegendElementVtbl = new StructT('DispHTMLLegendElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLSpanFlowVtbl = new StructT('IHTMLSpanFlowVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_align: UNEXPOSED.Δ,
 get_align: UNEXPOSED.Δ
});

var DispHTMLSpanFlowVtbl = new StructT('DispHTMLSpanFlowVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLFrameSetElementVtbl = new StructT('IHTMLFrameSetElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_rows: UNEXPOSED.Δ,
 get_rows: UNEXPOSED.Δ,
 put_cols: UNEXPOSED.Δ,
 get_cols: UNEXPOSED.Δ,
 put_border: UNEXPOSED.Δ,
 get_border: UNEXPOSED.Δ,
 put_borderColor: UNEXPOSED.Δ,
 get_borderColor: UNEXPOSED.Δ,
 put_frameBorder: UNEXPOSED.Δ,
 get_frameBorder: UNEXPOSED.Δ,
 put_frameSpacing: UNEXPOSED.Δ,
 get_frameSpacing: UNEXPOSED.Δ,
 put_name: UNEXPOSED.Δ,
 get_name: UNEXPOSED.Δ,
 put_onload: UNEXPOSED.Δ,
 get_onload: UNEXPOSED.Δ,
 put_onunload: UNEXPOSED.Δ,
 get_onunload: UNEXPOSED.Δ,
 put_onbeforeunload: UNEXPOSED.Δ,
 get_onbeforeunload: UNEXPOSED.Δ
});

var IHTMLFrameSetElement2Vtbl = new StructT('IHTMLFrameSetElement2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_onbeforeprint: UNEXPOSED.Δ,
 get_onbeforeprint: UNEXPOSED.Δ,
 put_onafterprint: UNEXPOSED.Δ,
 get_onafterprint: UNEXPOSED.Δ
});

var DispHTMLFrameSetSiteVtbl = new StructT('DispHTMLFrameSetSiteVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLBGsoundVtbl = new StructT('IHTMLBGsoundVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_src: UNEXPOSED.Δ,
 get_src: UNEXPOSED.Δ,
 put_loop: UNEXPOSED.Δ,
 get_loop: UNEXPOSED.Δ,
 put_volume: UNEXPOSED.Δ,
 get_volume: UNEXPOSED.Δ,
 put_balance: UNEXPOSED.Δ,
 get_balance: UNEXPOSED.Δ
});

var DispHTMLBGsoundVtbl = new StructT('DispHTMLBGsoundVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLFontNamesCollectionVtbl = new StructT('IHTMLFontNamesCollectionVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_length: UNEXPOSED.Δ,
 get__newEnum: UNEXPOSED.Δ,
 item: UNEXPOSED.Δ
});

var IHTMLFontSizesCollectionVtbl = new StructT('IHTMLFontSizesCollectionVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_length: UNEXPOSED.Δ,
 get__newEnum: UNEXPOSED.Δ,
 get_forFont: UNEXPOSED.Δ,
 item: UNEXPOSED.Δ
});

var IHTMLOptionsHolderVtbl = new StructT('IHTMLOptionsHolderVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_document: UNEXPOSED.Δ,
 get_fonts: UNEXPOSED.Δ,
 put_execArg: UNEXPOSED.Δ,
 get_execArg: UNEXPOSED.Δ,
 put_errorLine: UNEXPOSED.Δ,
 get_errorLine: UNEXPOSED.Δ,
 put_errorCharacter: UNEXPOSED.Δ,
 get_errorCharacter: UNEXPOSED.Δ,
 put_errorCode: UNEXPOSED.Δ,
 get_errorCode: UNEXPOSED.Δ,
 put_errorMessage: UNEXPOSED.Δ,
 get_errorMessage: UNEXPOSED.Δ,
 put_errorDebug: UNEXPOSED.Δ,
 get_errorDebug: UNEXPOSED.Δ,
 get_unsecuredWindowOfDocument: UNEXPOSED.Δ,
 put_findText: UNEXPOSED.Δ,
 get_findText: UNEXPOSED.Δ,
 put_anythingAfterFrameset: UNEXPOSED.Δ,
 get_anythingAfterFrameset: UNEXPOSED.Δ,
 sizes: UNEXPOSED.Δ,
 openfiledlg: UNEXPOSED.Δ,
 savefiledlg: UNEXPOSED.Δ,
 choosecolordlg: UNEXPOSED.Δ,
 showSecurityInfo: UNEXPOSED.Δ,
 isApartmentModel: UNEXPOSED.Δ,
 getCharset: UNEXPOSED.Δ,
 get_secureConnectionInfo: UNEXPOSED.Δ
});

var HTMLStyleElementEvents2Vtbl = new StructT('HTMLStyleElementEvents2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var HTMLStyleElementEventsVtbl = new StructT('HTMLStyleElementEventsVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLStyleElementVtbl = new StructT('IHTMLStyleElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_type: UNEXPOSED.Δ,
 get_type: UNEXPOSED.Δ,
 get_readyState: UNEXPOSED.Δ,
 put_onreadystatechange: UNEXPOSED.Δ,
 get_onreadystatechange: UNEXPOSED.Δ,
 put_onload: UNEXPOSED.Δ,
 get_onload: UNEXPOSED.Δ,
 put_onerror: UNEXPOSED.Δ,
 get_onerror: UNEXPOSED.Δ,
 get_styleSheet: UNEXPOSED.Δ,
 put_disabled: UNEXPOSED.Δ,
 get_disabled: UNEXPOSED.Δ,
 put_media: UNEXPOSED.Δ,
 get_media: UNEXPOSED.Δ
});

var DispHTMLStyleElementVtbl = new StructT('DispHTMLStyleElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLStyleFontFaceVtbl = new StructT('IHTMLStyleFontFaceVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_fontsrc: UNEXPOSED.Δ,
 get_fontsrc: UNEXPOSED.Δ
});

var IHTMLXDomainRequestVtbl = new StructT('IHTMLXDomainRequestVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_responseText: UNEXPOSED.Δ,
 put_timeout: UNEXPOSED.Δ,
 get_timeout: UNEXPOSED.Δ,
 get_contentType: UNEXPOSED.Δ,
 put_onprogress: UNEXPOSED.Δ,
 get_onprogress: UNEXPOSED.Δ,
 put_onerror: UNEXPOSED.Δ,
 get_onerror: UNEXPOSED.Δ,
 put_ontimeout: UNEXPOSED.Δ,
 get_ontimeout: UNEXPOSED.Δ,
 put_onload: UNEXPOSED.Δ,
 get_onload: UNEXPOSED.Δ,
 abort: UNEXPOSED.Δ,
 open: UNEXPOSED.Δ,
 send: UNEXPOSED.Δ
});

var IHTMLXDomainRequestFactoryVtbl = new StructT('IHTMLXDomainRequestFactoryVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 create: UNEXPOSED.Δ
});

var DispXDomainRequestVtbl = new StructT('DispXDomainRequestVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var DispHTMLStorageVtbl = new StructT('DispHTMLStorageVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var ICSSFilterSiteVtbl = new StructT('ICSSFilterSiteVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetElement: UNEXPOSED.Δ,
 FireOnFilterChangeEvent: UNEXPOSED.Δ
});

var IMarkupPointerVtbl = new StructT('IMarkupPointerVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 OwningDoc: UNEXPOSED.Δ,
 Gravity: UNEXPOSED.Δ,
 SetGravity: UNEXPOSED.Δ,
 Cling: UNEXPOSED.Δ,
 SetCling: UNEXPOSED.Δ,
 Unposition: UNEXPOSED.Δ,
 IsPositioned: UNEXPOSED.Δ,
 GetContainer: UNEXPOSED.Δ,
 MoveAdjacentToElement: UNEXPOSED.Δ,
 MoveToPointer: UNEXPOSED.Δ,
 MoveToContainer: UNEXPOSED.Δ,
 Left: UNEXPOSED.Δ,
 Right: UNEXPOSED.Δ,
 CurrentScope: UNEXPOSED.Δ,
 IsLeftOf: UNEXPOSED.Δ,
 IsLeftOfOrEqualTo: UNEXPOSED.Δ,
 IsRightOf: UNEXPOSED.Δ,
 IsRightOfOrEqualTo: UNEXPOSED.Δ,
 IsEqualTo: UNEXPOSED.Δ,
 MoveUnit: UNEXPOSED.Δ,
 FindTextA: UNEXPOSED.Δ
});

var IMarkupContainerVtbl = new StructT('IMarkupContainerVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 OwningDoc: UNEXPOSED.Δ
});

var IMarkupContainer2Vtbl = new StructT('IMarkupContainer2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 OwningDoc: UNEXPOSED.Δ,
 CreateChangeLog: UNEXPOSED.Δ,
 RegisterForDirtyRange: UNEXPOSED.Δ,
 UnRegisterForDirtyRange: UNEXPOSED.Δ,
 GetAndClearDirtyRange: UNEXPOSED.Δ,
 GetVersionNumber: UNEXPOSED.Δ,
 GetMasterElement: UNEXPOSED.Δ
});

var IHTMLChangeLogVtbl = new StructT('IHTMLChangeLogVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetNextChange: UNEXPOSED.Δ
});

var IHTMLChangeSinkVtbl = new StructT('IHTMLChangeSinkVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Notify: UNEXPOSED.Δ
});

var ISegmentListVtbl = new StructT('ISegmentListVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 CreateIterator: UNEXPOSED.Δ,
 GetType: UNEXPOSED.Δ,
 IsEmpty: UNEXPOSED.Δ
});

var ISegmentListIteratorVtbl = new StructT('ISegmentListIteratorVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Current: UNEXPOSED.Δ,
 First: UNEXPOSED.Δ,
 IsDone: UNEXPOSED.Δ,
 Advance: UNEXPOSED.Δ
});

var IHTMLCaretVtbl = new StructT('IHTMLCaretVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 MoveCaretToPointer: UNEXPOSED.Δ,
 MoveCaretToPointerEx: UNEXPOSED.Δ,
 MoveMarkupPointerToCaret: UNEXPOSED.Δ,
 MoveDisplayPointerToCaret: UNEXPOSED.Δ,
 IsVisible: UNEXPOSED.Δ,
 Show: UNEXPOSED.Δ,
 Hide: UNEXPOSED.Δ,
 InsertText: UNEXPOSED.Δ,
 ScrollIntoView: UNEXPOSED.Δ,
 GetLocation: UNEXPOSED.Δ,
 GetCaretDirection: UNEXPOSED.Δ,
 SetCaretDirection: UNEXPOSED.Δ
});

var ISegmentVtbl = new StructT('ISegmentVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetPointers: UNEXPOSED.Δ
});

var IElementSegmentVtbl = new StructT('IElementSegmentVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetPointers: UNEXPOSED.Δ,
 GetElement: UNEXPOSED.Δ,
 SetPrimary: UNEXPOSED.Δ,
 IsPrimary: UNEXPOSED.Δ
});

var IHighlightSegmentVtbl = new StructT('IHighlightSegmentVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetPointers: UNEXPOSED.Δ
});

var IHighlightRenderingServicesVtbl = new StructT('IHighlightRenderingServicesVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 AddSegment: UNEXPOSED.Δ,
 MoveSegmentToPointers: UNEXPOSED.Δ,
 RemoveSegment: UNEXPOSED.Δ
});

var ILineInfoVtbl = new StructT('ILineInfoVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 get_x: UNEXPOSED.Δ,
 get_baseLine: UNEXPOSED.Δ,
 get_textDescent: UNEXPOSED.Δ,
 get_textHeight: UNEXPOSED.Δ,
 get_lineDirection: UNEXPOSED.Δ
});

var IDisplayPointerVtbl = new StructT('IDisplayPointerVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 MoveToPoint: UNEXPOSED.Δ,
 MoveUnit: UNEXPOSED.Δ,
 PositionMarkupPointer: UNEXPOSED.Δ,
 MoveToPointer: UNEXPOSED.Δ,
 SetPointerGravity: UNEXPOSED.Δ,
 GetPointerGravity: UNEXPOSED.Δ,
 SetDisplayGravity: UNEXPOSED.Δ,
 GetDisplayGravity: UNEXPOSED.Δ,
 IsPositioned: UNEXPOSED.Δ,
 Unposition: UNEXPOSED.Δ,
 IsEqualTo: UNEXPOSED.Δ,
 IsLeftOf: UNEXPOSED.Δ,
 IsRightOf: UNEXPOSED.Δ,
 IsAtBOL: UNEXPOSED.Δ,
 MoveToMarkupPointer: UNEXPOSED.Δ,
 ScrollIntoView: UNEXPOSED.Δ,
 GetLineInfo: UNEXPOSED.Δ,
 GetFlowElement: UNEXPOSED.Δ,
 QueryBreaks: UNEXPOSED.Δ
});

var IDisplayServicesVtbl = new StructT('IDisplayServicesVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 CreateDisplayPointer: UNEXPOSED.Δ,
 TransformRect: UNEXPOSED.Δ,
 TransformPoint: UNEXPOSED.Δ,
 GetCaret: UNEXPOSED.Δ,
 GetComputedStyle: UNEXPOSED.Δ,
 ScrollRectIntoView: UNEXPOSED.Δ,
 HasFlowLayout: UNEXPOSED.Δ
});

var IHtmlDlgSafeHelperVtbl = new StructT('IHtmlDlgSafeHelperVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 choosecolordlg: UNEXPOSED.Δ,
 getCharset: UNEXPOSED.Δ,
 get_Fonts: UNEXPOSED.Δ,
 get_BlockFormats: UNEXPOSED.Δ
});

var IBlockFormatsVtbl = new StructT('IBlockFormatsVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get__NewEnum: UNEXPOSED.Δ,
 get_Count: UNEXPOSED.Δ,
 Item: UNEXPOSED.Δ
});

var IFontNamesVtbl = new StructT('IFontNamesVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get__NewEnum: UNEXPOSED.Δ,
 get_Count: UNEXPOSED.Δ,
 Item: UNEXPOSED.Δ
});

var ICSSFilterVtbl = new StructT('ICSSFilterVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 SetSite: UNEXPOSED.Δ,
 OnAmbientPropertyChange: UNEXPOSED.Δ
});

var ISecureUrlHostVtbl = new StructT('ISecureUrlHostVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 ValidateSecureUrl: UNEXPOSED.Δ
});

var IMarkupServicesVtbl = new StructT('IMarkupServicesVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 CreateMarkupPointer: UNEXPOSED.Δ,
 CreateMarkupContainer: UNEXPOSED.Δ,
 CreateElement: UNEXPOSED.Δ,
 CloneElement: UNEXPOSED.Δ,
 InsertElement: UNEXPOSED.Δ,
 RemoveElement: UNEXPOSED.Δ,
 Remove: UNEXPOSED.Δ,
 Copy: UNEXPOSED.Δ,
 Move: UNEXPOSED.Δ,
 InsertText: UNEXPOSED.Δ,
 ParseString: UNEXPOSED.Δ,
 ParseGlobal: UNEXPOSED.Δ,
 IsScopedElement: UNEXPOSED.Δ,
 GetElementTagId: UNEXPOSED.Δ,
 GetTagIDForName: UNEXPOSED.Δ,
 GetNameForTagID: UNEXPOSED.Δ,
 MovePointersToRange: UNEXPOSED.Δ,
 MoveRangeToPointers: UNEXPOSED.Δ,
 BeginUndoUnit: UNEXPOSED.Δ,
 EndUndoUnit: UNEXPOSED.Δ
});

var IMarkupServices2Vtbl = new StructT('IMarkupServices2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 CreateMarkupPointer: UNEXPOSED.Δ,
 CreateMarkupContainer: UNEXPOSED.Δ,
 CreateElement: UNEXPOSED.Δ,
 CloneElement: UNEXPOSED.Δ,
 InsertElement: UNEXPOSED.Δ,
 RemoveElement: UNEXPOSED.Δ,
 Remove: UNEXPOSED.Δ,
 Copy: UNEXPOSED.Δ,
 Move: UNEXPOSED.Δ,
 InsertText: UNEXPOSED.Δ,
 ParseString: UNEXPOSED.Δ,
 ParseGlobal: UNEXPOSED.Δ,
 IsScopedElement: UNEXPOSED.Δ,
 GetElementTagId: UNEXPOSED.Δ,
 GetTagIDForName: UNEXPOSED.Δ,
 GetNameForTagID: UNEXPOSED.Δ,
 MovePointersToRange: UNEXPOSED.Δ,
 MoveRangeToPointers: UNEXPOSED.Δ,
 BeginUndoUnit: UNEXPOSED.Δ,
 EndUndoUnit: UNEXPOSED.Δ,
 ParseGlobalEx: UNEXPOSED.Δ,
 ValidateElements: UNEXPOSED.Δ,
 SaveSegmentsToClipboard: UNEXPOSED.Δ
});

var IHTMLChangePlaybackVtbl = new StructT('IHTMLChangePlaybackVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 ExecChange: UNEXPOSED.Δ
});

var IMarkupPointer2Vtbl = new StructT('IMarkupPointer2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 OwningDoc: UNEXPOSED.Δ,
 Gravity: UNEXPOSED.Δ,
 SetGravity: UNEXPOSED.Δ,
 Cling: UNEXPOSED.Δ,
 SetCling: UNEXPOSED.Δ,
 Unposition: UNEXPOSED.Δ,
 IsPositioned: UNEXPOSED.Δ,
 GetContainer: UNEXPOSED.Δ,
 MoveAdjacentToElement: UNEXPOSED.Δ,
 MoveToPointer: UNEXPOSED.Δ,
 MoveToContainer: UNEXPOSED.Δ,
 Left: UNEXPOSED.Δ,
 Right: UNEXPOSED.Δ,
 CurrentScope: UNEXPOSED.Δ,
 IsLeftOf: UNEXPOSED.Δ,
 IsLeftOfOrEqualTo: UNEXPOSED.Δ,
 IsRightOf: UNEXPOSED.Δ,
 IsRightOfOrEqualTo: UNEXPOSED.Δ,
 IsEqualTo: UNEXPOSED.Δ,
 MoveUnit: UNEXPOSED.Δ,
 FindTextA: UNEXPOSED.Δ,
 IsAtWordBreak: UNEXPOSED.Δ,
 GetMarkupPosition: UNEXPOSED.Δ,
 MoveToMarkupPosition: UNEXPOSED.Δ,
 MoveUnitBounded: UNEXPOSED.Δ,
 IsInsideURL: UNEXPOSED.Δ,
 MoveToContent: UNEXPOSED.Δ
});

var IMarkupTextFragsVtbl = new StructT('IMarkupTextFragsVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTextFragCount: UNEXPOSED.Δ,
 GetTextFrag: UNEXPOSED.Δ,
 RemoveTextFrag: UNEXPOSED.Δ,
 InsertTextFrag: UNEXPOSED.Δ,
 FindTextFragFromMarkupPointer: UNEXPOSED.Δ
});

var IXMLGenericParseVtbl = new StructT('IXMLGenericParseVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 SetGenericParse: UNEXPOSED.Δ
});

var IHTMLEditHostVtbl = new StructT('IHTMLEditHostVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 SnapRect: UNEXPOSED.Δ
});

var IHTMLEditHost2Vtbl = new StructT('IHTMLEditHost2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 SnapRect: UNEXPOSED.Δ,
 PreDrag: UNEXPOSED.Δ
});

var ISequenceNumberVtbl = new StructT('ISequenceNumberVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetSequenceNumber: UNEXPOSED.Δ
});

var IIMEServicesVtbl = new StructT('IIMEServicesVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetActiveIMM: UNEXPOSED.Δ
});

var ISelectionServicesListenerVtbl = new StructT('ISelectionServicesListenerVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 BeginSelectionUndo: UNEXPOSED.Δ,
 EndSelectionUndo: UNEXPOSED.Δ,
 OnSelectedElementExit: UNEXPOSED.Δ,
 OnChangeType: UNEXPOSED.Δ,
 GetTypeDetail: UNEXPOSED.Δ
});

var ISelectionServicesVtbl = new StructT('ISelectionServicesVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 SetSelectionType: UNEXPOSED.Δ,
 GetMarkupContainer: UNEXPOSED.Δ,
 AddSegment: UNEXPOSED.Δ,
 AddElementSegment: UNEXPOSED.Δ,
 RemoveSegment: UNEXPOSED.Δ,
 GetSelectionServicesListener: UNEXPOSED.Δ
});

var IHTMLEditDesignerVtbl = new StructT('IHTMLEditDesignerVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 PreHandleEvent: UNEXPOSED.Δ,
 PostHandleEvent: UNEXPOSED.Δ,
 TranslateAcceleratorA: UNEXPOSED.Δ,
 PostEditorEventNotify: UNEXPOSED.Δ
});

var IHTMLEditServicesVtbl = new StructT('IHTMLEditServicesVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 AddDesigner: UNEXPOSED.Δ,
 RemoveDesigner: UNEXPOSED.Δ,
 GetSelectionServices: UNEXPOSED.Δ,
 MoveToSelectionAnchor: UNEXPOSED.Δ,
 MoveToSelectionEnd: UNEXPOSED.Δ,
 SelectRange: UNEXPOSED.Δ
});

var IHTMLEditServices2Vtbl = new StructT('IHTMLEditServices2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 AddDesigner: UNEXPOSED.Δ,
 RemoveDesigner: UNEXPOSED.Δ,
 GetSelectionServices: UNEXPOSED.Δ,
 MoveToSelectionAnchor: UNEXPOSED.Δ,
 MoveToSelectionEnd: UNEXPOSED.Δ,
 SelectRange: UNEXPOSED.Δ,
 MoveToSelectionAnchorEx: UNEXPOSED.Δ,
 MoveToSelectionEndEx: UNEXPOSED.Δ,
 FreezeVirtualCaretPos: UNEXPOSED.Δ,
 UnFreezeVirtualCaretPos: UNEXPOSED.Δ
});

var IHTMLComputedStyleVtbl = new StructT('IHTMLComputedStyleVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 get_bold: UNEXPOSED.Δ,
 get_italic: UNEXPOSED.Δ,
 get_underline: UNEXPOSED.Δ,
 get_overline: UNEXPOSED.Δ,
 get_strikeOut: UNEXPOSED.Δ,
 get_subScript: UNEXPOSED.Δ,
 get_superScript: UNEXPOSED.Δ,
 get_explicitFace: UNEXPOSED.Δ,
 get_fontWeight: UNEXPOSED.Δ,
 get_fontSize: UNEXPOSED.Δ,
 get_fontName: UNEXPOSED.Δ,
 get_hasBgColor: UNEXPOSED.Δ,
 get_textColor: UNEXPOSED.Δ,
 get_backgroundColor: UNEXPOSED.Δ,
 get_preFormatted: UNEXPOSED.Δ,
 get_direction: UNEXPOSED.Δ,
 get_blockDirection: UNEXPOSED.Δ,
 get_OL: UNEXPOSED.Δ,
 IsEqual: UNEXPOSED.Δ
});

var HTMLNamespaceEventsVtbl = new StructT('HTMLNamespaceEventsVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLNamespaceVtbl = new StructT('IHTMLNamespaceVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_name: UNEXPOSED.Δ,
 get_urn: UNEXPOSED.Δ,
 get_tagNames: UNEXPOSED.Δ,
 get_readyState: UNEXPOSED.Δ,
 put_onreadystatechange: UNEXPOSED.Δ,
 get_onreadystatechange: UNEXPOSED.Δ,
 doImport: UNEXPOSED.Δ,
 attachEvent: UNEXPOSED.Δ,
 detachEvent: UNEXPOSED.Δ
});

var IHTMLNamespaceCollectionVtbl = new StructT('IHTMLNamespaceCollectionVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_length: UNEXPOSED.Δ,
 item: UNEXPOSED.Δ,
 add: UNEXPOSED.Δ
});

var DispHTMLNamespaceVtbl = new StructT('DispHTMLNamespaceVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var DispHTMLNamespaceCollectionVtbl = new StructT('DispHTMLNamespaceCollectionVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLPainterVtbl = new StructT('IHTMLPainterVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Draw: UNEXPOSED.Δ,
 OnResize: UNEXPOSED.Δ,
 GetPainterInfo: UNEXPOSED.Δ,
 HitTestPoint: UNEXPOSED.Δ
});

var IHTMLPaintSiteVtbl = new StructT('IHTMLPaintSiteVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 InvalidatePainterInfo: UNEXPOSED.Δ,
 InvalidateRect: UNEXPOSED.Δ,
 InvalidateRegion: UNEXPOSED.Δ,
 GetDrawInfo: UNEXPOSED.Δ,
 TransformGlobalToLocal: UNEXPOSED.Δ,
 TransformLocalToGlobal: UNEXPOSED.Δ,
 GetHitTestCookie: UNEXPOSED.Δ
});

var IHTMLPainterEventInfoVtbl = new StructT('IHTMLPainterEventInfoVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetEventInfoFlags: UNEXPOSED.Δ,
 GetEventTarget: UNEXPOSED.Δ,
 SetCursor: UNEXPOSED.Δ,
 StringFromPartID: UNEXPOSED.Δ
});

var IHTMLPainterOverlayVtbl = new StructT('IHTMLPainterOverlayVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 OnMove: UNEXPOSED.Δ
});

var IHTMLIPrintCollectionVtbl = new StructT('IHTMLIPrintCollectionVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_length: UNEXPOSED.Δ,
 get__newEnum: UNEXPOSED.Δ,
 item: UNEXPOSED.Δ
});

var IEnumPrivacyRecordsVtbl = new StructT('IEnumPrivacyRecordsVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Reset: UNEXPOSED.Δ,
 GetSize: UNEXPOSED.Δ,
 GetPrivacyImpacted: UNEXPOSED.Δ,
 Next: UNEXPOSED.Δ
});

var IWPCBlockedUrlsVtbl = new StructT('IWPCBlockedUrlsVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetCount: UNEXPOSED.Δ,
 GetUrl: UNEXPOSED.Δ
});

var IHTMLDOMConstructorCollectionVtbl = new StructT('IHTMLDOMConstructorCollectionVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_Attr: UNEXPOSED.Δ,
 get_BehaviorUrnsCollection: UNEXPOSED.Δ,
 get_BookmarkCollection: UNEXPOSED.Δ,
 get_CompatibleInfo: UNEXPOSED.Δ,
 get_CompatibleInfoCollection: UNEXPOSED.Δ,
 get_ControlRangeCollection: UNEXPOSED.Δ,
 get_CSSCurrentStyleDeclaration: UNEXPOSED.Δ,
 get_CSSRuleList: UNEXPOSED.Δ,
 get_CSSRuleStyleDeclaration: UNEXPOSED.Δ,
 get_CSSStyleDeclaration: UNEXPOSED.Δ,
 get_CSSStyleRule: UNEXPOSED.Δ,
 get_CSSStyleSheet: UNEXPOSED.Δ,
 get_DataTransfer: UNEXPOSED.Δ,
 get_DOMImplementation: UNEXPOSED.Δ,
 get_Element: UNEXPOSED.Δ,
 get_Event: UNEXPOSED.Δ,
 get_History: UNEXPOSED.Δ,
 get_HTCElementBehaviorDefaults: UNEXPOSED.Δ,
 get_HTMLAnchorElement: UNEXPOSED.Δ,
 get_HTMLAreaElement: UNEXPOSED.Δ,
 get_HTMLAreasCollection: UNEXPOSED.Δ,
 get_HTMLBaseElement: UNEXPOSED.Δ,
 get_HTMLBaseFontElement: UNEXPOSED.Δ,
 get_HTMLBGSoundElement: UNEXPOSED.Δ,
 get_HTMLBlockElement: UNEXPOSED.Δ,
 get_HTMLBodyElement: UNEXPOSED.Δ,
 get_HTMLBRElement: UNEXPOSED.Δ,
 get_HTMLButtonElement: UNEXPOSED.Δ,
 get_HTMLCollection: UNEXPOSED.Δ,
 get_HTMLCommentElement: UNEXPOSED.Δ,
 get_HTMLDDElement: UNEXPOSED.Δ,
 get_HTMLDivElement: UNEXPOSED.Δ,
 get_HTMLDocument: UNEXPOSED.Δ,
 get_HTMLDListElement: UNEXPOSED.Δ,
 get_HTMLDTElement: UNEXPOSED.Δ,
 get_HTMLEmbedElement: UNEXPOSED.Δ,
 get_HTMLFieldSetElement: UNEXPOSED.Δ,
 get_HTMLFontElement: UNEXPOSED.Δ,
 get_HTMLFormElement: UNEXPOSED.Δ,
 get_HTMLFrameElement: UNEXPOSED.Δ,
 get_HTMLFrameSetElement: UNEXPOSED.Δ,
 get_HTMLGenericElement: UNEXPOSED.Δ,
 get_HTMLHeadElement: UNEXPOSED.Δ,
 get_HTMLHeadingElement: UNEXPOSED.Δ,
 get_HTMLHRElement: UNEXPOSED.Δ,
 get_HTMLHtmlElement: UNEXPOSED.Δ,
 get_HTMLIFrameElement: UNEXPOSED.Δ,
 get_HTMLImageElement: UNEXPOSED.Δ,
 get_HTMLInputElement: UNEXPOSED.Δ,
 get_HTMLIsIndexElement: UNEXPOSED.Δ,
 get_HTMLLabelElement: UNEXPOSED.Δ,
 get_HTMLLegendElement: UNEXPOSED.Δ,
 get_HTMLLIElement: UNEXPOSED.Δ,
 get_HTMLLinkElement: UNEXPOSED.Δ,
 get_HTMLMapElement: UNEXPOSED.Δ,
 get_HTMLMarqueeElement: UNEXPOSED.Δ,
 get_HTMLMetaElement: UNEXPOSED.Δ,
 get_HTMLModelessDialog: UNEXPOSED.Δ,
 get_HTMLNamespaceInfo: UNEXPOSED.Δ,
 get_HTMLNamespaceInfoCollection: UNEXPOSED.Δ,
 get_HTMLNextIdElement: UNEXPOSED.Δ,
 get_HTMLNoShowElement: UNEXPOSED.Δ,
 get_HTMLObjectElement: UNEXPOSED.Δ,
 get_HTMLOListElement: UNEXPOSED.Δ,
 get_HTMLOptionElement: UNEXPOSED.Δ,
 get_HTMLParagraphElement: UNEXPOSED.Δ,
 get_HTMLParamElement: UNEXPOSED.Δ,
 get_HTMLPhraseElement: UNEXPOSED.Δ,
 get_HTMLPluginsCollection: UNEXPOSED.Δ,
 get_HTMLPopup: UNEXPOSED.Δ,
 get_HTMLScriptElement: UNEXPOSED.Δ,
 get_HTMLSelectElement: UNEXPOSED.Δ,
 get_HTMLSpanElement: UNEXPOSED.Δ,
 get_HTMLStyleElement: UNEXPOSED.Δ,
 get_HTMLTableCaptionElement: UNEXPOSED.Δ,
 get_HTMLTableCellElement: UNEXPOSED.Δ,
 get_HTMLTableColElement: UNEXPOSED.Δ,
 get_HTMLTableElement: UNEXPOSED.Δ,
 get_HTMLTableRowElement: UNEXPOSED.Δ,
 get_HTMLTableSectionElement: UNEXPOSED.Δ,
 get_HTMLTextAreaElement: UNEXPOSED.Δ,
 get_HTMLTextElement: UNEXPOSED.Δ,
 get_HTMLTitleElement: UNEXPOSED.Δ,
 get_HTMLUListElement: UNEXPOSED.Δ,
 get_HTMLUnknownElement: UNEXPOSED.Δ,
 get_Image: UNEXPOSED.Δ,
 get_Location: UNEXPOSED.Δ,
 get_NamedNodeMap: UNEXPOSED.Δ,
 get_Navigator: UNEXPOSED.Δ,
 get_NodeList: UNEXPOSED.Δ,
 get_Option: UNEXPOSED.Δ,
 get_Screen: UNEXPOSED.Δ,
 get_Selection: UNEXPOSED.Δ,
 get_StaticNodeList: UNEXPOSED.Δ,
 get_Storage: UNEXPOSED.Δ,
 get_StyleSheetList: UNEXPOSED.Δ,
 get_StyleSheetPage: UNEXPOSED.Δ,
 get_StyleSheetPageList: UNEXPOSED.Δ,
 get_Text: UNEXPOSED.Δ,
 get_TextRange: UNEXPOSED.Δ,
 get_TextRangeCollection: UNEXPOSED.Δ,
 get_TextRectangle: UNEXPOSED.Δ,
 get_TextRectangleList: UNEXPOSED.Δ,
 get_Window: UNEXPOSED.Δ,
 get_XDomainRequest: UNEXPOSED.Δ,
 get_XMLHttpRequest: UNEXPOSED.Δ
});

var IHTMLDialogVtbl = new StructT('IHTMLDialogVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_dialogTop: UNEXPOSED.Δ,
 get_dialogTop: UNEXPOSED.Δ,
 put_dialogLeft: UNEXPOSED.Δ,
 get_dialogLeft: UNEXPOSED.Δ,
 put_dialogWidth: UNEXPOSED.Δ,
 get_dialogWidth: UNEXPOSED.Δ,
 put_dialogHeight: UNEXPOSED.Δ,
 get_dialogHeight: UNEXPOSED.Δ,
 get_dialogArguments: UNEXPOSED.Δ,
 get_menuArguments: UNEXPOSED.Δ,
 put_returnValue: UNEXPOSED.Δ,
 get_returnValue: UNEXPOSED.Δ,
 close: UNEXPOSED.Δ,
 toString: UNEXPOSED.Δ
});

var IHTMLDialog2Vtbl = new StructT('IHTMLDialog2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_status: UNEXPOSED.Δ,
 get_status: UNEXPOSED.Δ,
 put_resizable: UNEXPOSED.Δ,
 get_resizable: UNEXPOSED.Δ
});

var IHTMLDialog3Vtbl = new StructT('IHTMLDialog3Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_unadorned: UNEXPOSED.Δ,
 get_unadorned: UNEXPOSED.Δ,
 put_dialogHide: UNEXPOSED.Δ,
 get_dialogHide: UNEXPOSED.Δ
});

var IHTMLModelessInitVtbl = new StructT('IHTMLModelessInitVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 get_parameters: UNEXPOSED.Δ,
 get_optionString: UNEXPOSED.Δ,
 get_moniker: UNEXPOSED.Δ,
 get_document: UNEXPOSED.Δ
});

var IHTMLPopupVtbl = new StructT('IHTMLPopupVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 show: UNEXPOSED.Δ,
 hide: UNEXPOSED.Δ,
 get_document: UNEXPOSED.Δ,
 get_isOpen: UNEXPOSED.Δ
});

var DispHTMLPopupVtbl = new StructT('DispHTMLPopupVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IHTMLAppBehaviorVtbl = new StructT('IHTMLAppBehaviorVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_applicationName: UNEXPOSED.Δ,
 get_applicationName: UNEXPOSED.Δ,
 put_version: UNEXPOSED.Δ,
 get_version: UNEXPOSED.Δ,
 put_icon: UNEXPOSED.Δ,
 get_icon: UNEXPOSED.Δ,
 put_singleInstance: UNEXPOSED.Δ,
 get_singleInstance: UNEXPOSED.Δ,
 put_minimizeButton: UNEXPOSED.Δ,
 get_minimizeButton: UNEXPOSED.Δ,
 put_maximizeButton: UNEXPOSED.Δ,
 get_maximizeButton: UNEXPOSED.Δ,
 put_border: UNEXPOSED.Δ,
 get_border: UNEXPOSED.Δ,
 put_borderStyle: UNEXPOSED.Δ,
 get_borderStyle: UNEXPOSED.Δ,
 put_sysMenu: UNEXPOSED.Δ,
 get_sysMenu: UNEXPOSED.Δ,
 put_caption: UNEXPOSED.Δ,
 get_caption: UNEXPOSED.Δ,
 put_windowState: UNEXPOSED.Δ,
 get_windowState: UNEXPOSED.Δ,
 put_showInTaskBar: UNEXPOSED.Δ,
 get_showInTaskBar: UNEXPOSED.Δ,
 get_commandLine: UNEXPOSED.Δ
});

var IHTMLAppBehavior2Vtbl = new StructT('IHTMLAppBehavior2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_contextMenu: UNEXPOSED.Δ,
 get_contextMenu: UNEXPOSED.Δ,
 put_innerBorder: UNEXPOSED.Δ,
 get_innerBorder: UNEXPOSED.Δ,
 put_scroll: UNEXPOSED.Δ,
 get_scroll: UNEXPOSED.Δ,
 put_scrollFlat: UNEXPOSED.Δ,
 get_scrollFlat: UNEXPOSED.Δ,
 put_selection: UNEXPOSED.Δ,
 get_selection: UNEXPOSED.Δ
});

var IHTMLAppBehavior3Vtbl = new StructT('IHTMLAppBehavior3Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ,
 put_navigable: UNEXPOSED.Δ,
 get_navigable: UNEXPOSED.Δ
});

var DispHTMLAppBehaviorVtbl = new StructT('DispHTMLAppBehaviorVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var DispIHTMLInputButtonElementVtbl = new StructT('DispIHTMLInputButtonElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var DispIHTMLInputTextElementVtbl = new StructT('DispIHTMLInputTextElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var DispIHTMLInputFileElementVtbl = new StructT('DispIHTMLInputFileElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var DispIHTMLOptionButtonElementVtbl = new StructT('DispIHTMLOptionButtonElementVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var DispIHTMLInputImageVtbl = new StructT('DispIHTMLInputImageVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTypeInfoCount: UNEXPOSED.Δ,
 GetTypeInfo: UNEXPOSED.Δ,
 GetIDsOfNames: UNEXPOSED.Δ,
 Invoke: UNEXPOSED.Δ
});

var IElementNamespaceVtbl = new StructT('IElementNamespaceVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 AddTag: UNEXPOSED.Δ
});

var IElementNamespaceTableVtbl = new StructT('IElementNamespaceTableVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 AddNamespace: UNEXPOSED.Δ
});

var IElementNamespaceFactoryVtbl = new StructT('IElementNamespaceFactoryVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Create: UNEXPOSED.Δ
});

var IElementNamespaceFactory2Vtbl = new StructT('IElementNamespaceFactory2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Create: UNEXPOSED.Δ,
 CreateWithImplementation: UNEXPOSED.Δ
});

var IElementNamespaceFactoryCallbackVtbl = new StructT('IElementNamespaceFactoryCallbackVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 Resolve: UNEXPOSED.Δ
});

var IElementBehaviorSiteOM2Vtbl = new StructT('IElementBehaviorSiteOM2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 RegisterEvent: UNEXPOSED.Δ,
 GetEventCookie: UNEXPOSED.Δ,
 FireEvent: UNEXPOSED.Δ,
 CreateEventObject: UNEXPOSED.Δ,
 RegisterName: UNEXPOSED.Δ,
 RegisterUrn: UNEXPOSED.Δ,
 GetDefaults: UNEXPOSED.Δ
});

var IElementBehaviorCategoryVtbl = new StructT('IElementBehaviorCategoryVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetCategory: UNEXPOSED.Δ
});

var IElementBehaviorSiteCategoryVtbl = new StructT('IElementBehaviorSiteCategoryVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetRelatedBehaviors: UNEXPOSED.Δ
});

var IElementBehaviorSubmitVtbl = new StructT('IElementBehaviorSubmitVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetSubmitInfo: UNEXPOSED.Δ,
 Reset: UNEXPOSED.Δ
});

var IElementBehaviorFocusVtbl = new StructT('IElementBehaviorFocusVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetFocusRect: UNEXPOSED.Δ
});

var IElementBehaviorLayoutVtbl = new StructT('IElementBehaviorLayoutVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetSize: UNEXPOSED.Δ,
 GetLayoutInfo: UNEXPOSED.Δ,
 GetPosition: UNEXPOSED.Δ,
 MapSize: UNEXPOSED.Δ
});

var IElementBehaviorLayout2Vtbl = new StructT('IElementBehaviorLayout2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetTextDescent: UNEXPOSED.Δ
});

var IElementBehaviorSiteLayoutVtbl = new StructT('IElementBehaviorSiteLayoutVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 InvalidateLayoutInfo: UNEXPOSED.Δ,
 InvalidateSize: UNEXPOSED.Δ,
 GetMediaResolution: UNEXPOSED.Δ
});

var IElementBehaviorSiteLayout2Vtbl = new StructT('IElementBehaviorSiteLayout2Vtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 GetFontInfo: UNEXPOSED.Δ
});

var IHostBehaviorInitVtbl = new StructT('IHostBehaviorInitVtbl', {
 QueryInterface: UNEXPOSED.Δ,
 AddRef: UNEXPOSED.Δ,
 Release: UNEXPOSED.Δ,
 PopulateNamespaceTable: UNEXPOSED.Δ
});


  _invalid_parameter_noinfo: [ VoidT, {  } ],
  _invalid_parameter_noinfo_noreturn: [ VoidT, {  } ],
  _invoke_watson: [ VoidT, { uintptr_t: uintptr_t } ],
  _except_handler: [ uint, { _ExceptionRecord: _EXCEPTION_RECORD.Δ, _EstablisherFrame: VoidT.Δ, _ContextRecord: _CONTEXT.Δ, _DispatcherContext: VoidT.Δ } ],
  _exception_code: [ VoidT, {  } ],
  _exception_info: [ VoidT, {  } ],
  _abnormal_termination: [ VoidT, {  } ],
  __pctype_func: [ VoidT, {  } ],
  __pwctype_func: [ ushort, {  } ],
  _isctype: [ VoidT, { _C: int, _Type: int } ],
  _isctype_l: [ VoidT, { _C: int, _Type: int, _Locale: _locale_t } ],
  isalpha: [ VoidT, { _C: int } ],
  _isalpha_l: [ VoidT, { _C: int, _Locale: _locale_t } ],
  isupper: [ VoidT, { _C: int } ],
  _isupper_l: [ VoidT, { _C: int, _Locale: _locale_t } ],
  islower: [ VoidT, { _C: int } ],
  _islower_l: [ VoidT, { _C: int, _Locale: _locale_t } ],
  isdigit: [ VoidT, { _C: int } ],
  _isdigit_l: [ VoidT, { _C: int, _Locale: _locale_t } ],
  isxdigit: [ VoidT, { _C: int } ],
  _isxdigit_l: [ VoidT, { _C: int, _Locale: _locale_t } ],
  isspace: [ VoidT, { _C: int } ],
  _isspace_l: [ VoidT, { _C: int, _Locale: _locale_t } ],
  ispunct: [ VoidT, { _C: int } ],
  _ispunct_l: [ VoidT, { _C: int, _Locale: _locale_t } ],
  isalnum: [ VoidT, { _C: int } ],
  _isalnum_l: [ VoidT, { _C: int, _Locale: _locale_t } ],
  isprint: [ VoidT, { _C: int } ],
  _isprint_l: [ VoidT, { _C: int, _Locale: _locale_t } ],
  isgraph: [ VoidT, { _C: int } ],
  _isgraph_l: [ VoidT, { _C: int, _Locale: _locale_t } ],
  iscntrl: [ VoidT, { _C: int } ],
  _iscntrl_l: [ VoidT, { _C: int, _Locale: _locale_t } ],
  toupper: [ VoidT, { _C: int } ],
  tolower: [ VoidT, { _C: int } ],
  _tolower: [ VoidT, { _C: int } ],
  _tolower_l: [ VoidT, { _C: int, _Locale: _locale_t } ],
  _toupper: [ VoidT, { _C: int } ],
  _toupper_l: [ VoidT, { _C: int, _Locale: _locale_t } ],
  __isascii: [ VoidT, { _C: int } ],
  __toascii: [ VoidT, { _C: int } ],
  __iscsymf: [ VoidT, { _C: int } ],
  __iscsym: [ VoidT, { _C: int } ],
  iswalpha: [ VoidT, { _C: wint_t } ],
  _iswalpha_l: [ VoidT, { _C: wint_t, _Locale: _locale_t } ],
  iswupper: [ VoidT, { _C: wint_t } ],
  _iswupper_l: [ VoidT, { _C: wint_t, _Locale: _locale_t } ],
  iswlower: [ VoidT, { _C: wint_t } ],
  _iswlower_l: [ VoidT, { _C: wint_t, _Locale: _locale_t } ],
  iswdigit: [ VoidT, { _C: wint_t } ],
  _iswdigit_l: [ VoidT, { _C: wint_t, _Locale: _locale_t } ],
  iswxdigit: [ VoidT, { _C: wint_t } ],
  _iswxdigit_l: [ VoidT, { _C: wint_t, _Locale: _locale_t } ],
  iswspace: [ VoidT, { _C: wint_t } ],
  _iswspace_l: [ VoidT, { _C: wint_t, _Locale: _locale_t } ],
  iswpunct: [ VoidT, { _C: wint_t } ],
  _iswpunct_l: [ VoidT, { _C: wint_t, _Locale: _locale_t } ],
  iswalnum: [ VoidT, { _C: wint_t } ],
  _iswalnum_l: [ VoidT, { _C: wint_t, _Locale: _locale_t } ],
  iswprint: [ VoidT, { _C: wint_t } ],
  _iswprint_l: [ VoidT, { _C: wint_t, _Locale: _locale_t } ],
  iswgraph: [ VoidT, { _C: wint_t } ],
  _iswgraph_l: [ VoidT, { _C: wint_t, _Locale: _locale_t } ],
  iswcntrl: [ VoidT, { _C: wint_t } ],
  _iswcntrl_l: [ VoidT, { _C: wint_t, _Locale: _locale_t } ],
  iswascii: [ VoidT, { _C: wint_t } ],
  isleadbyte: [ VoidT, { _C: int } ],
  _isleadbyte_l: [ VoidT, { _C: int, _Locale: _locale_t } ],
  towupper: [ ushort, { _C: wint_t } ],
  _towupper_l: [ ushort, { _C: wint_t, _Locale: _locale_t } ],
  towlower: [ ushort, { _C: wint_t } ],
  _towlower_l: [ ushort, { _C: wint_t, _Locale: _locale_t } ],
  iswctype: [ VoidT, { _C: wint_t, _Type: wctype_t } ],
  _iswctype_l: [ VoidT, { _C: wint_t, _Type: wctype_t, _Locale: _locale_t } ],
  __iswcsymf: [ VoidT, { _C: wint_t } ],
  _iswcsymf_l: [ VoidT, { _C: wint_t, _Locale: _locale_t } ],
  __iswcsym: [ VoidT, { _C: wint_t } ],
  _iswcsym_l: [ VoidT, { _C: wint_t, _Locale: _locale_t } ],
  is_wctype: [ VoidT, { _C: wint_t, _Type: wctype_t } ],
  ___mb_cur_max_func: [ VoidT, {  } ],
  ___mb_cur_max_l_func: [ VoidT, { _locale_t: _locale_t } ],
  PtrToPtr64: [ VoidT, { p: VoidT.Δ } ],
  Ptr64ToPtr: [ VoidT, { p: VoidT.Δ } ],
  HandleToHandle64: [ VoidT, { h: VoidT.Δ } ],
  Handle64ToHandle: [ VoidT, { h: VoidT.Δ } ],
  Int64ShllMod32: [ ulonglong, { Value: ULONGLONG, ShiftCount: DWORD } ],
  Int64ShraMod32: [ longlong, { Value: LONGLONG, ShiftCount: DWORD } ],
  Int64ShrlMod32: [ ulonglong, { Value: ULONGLONG, ShiftCount: DWORD } ],
  _rotl: [ VoidT, { _Val: uint, _Shift: int } ],
  _rotl64: [ VoidT, { _Val: ulonglong, _Shift: int } ],
  _rotr: [ VoidT, { _Val: uint, _Shift: int } ],
  _rotr64: [ VoidT, { _Val: ulonglong, _Shift: int } ],
  _memccpy: [ VoidT, { _Dst: VoidT.Δ, _Src: VoidT.Δ, _Val: int, _MaxCount: size_t } ],
  memchr: [ VoidT, { _Buf: VoidT.Δ, _Val: int, _MaxCount: size_t } ],
  _memicmp: [ VoidT, { _Buf1: VoidT.Δ, _Buf2: VoidT.Δ, _Size: size_t } ],
  _memicmp_l: [ VoidT, { _Buf1: VoidT.Δ, _Buf2: VoidT.Δ, _Size: size_t, _Locale: _locale_t } ],
  memcmp: [ VoidT, { _Buf1: VoidT.Δ, _Buf2: VoidT.Δ, _Size: size_t } ],
  memcpy: [ VoidT, { _Dst: VoidT.Δ, _Src: VoidT.Δ, _Size: size_t } ],
  memcpy_s: [ int, { _Dst: VoidT.Δ, _DstSize: rsize_t, _Src: VoidT.Δ, _MaxCount: rsize_t } ],
  memset: [ VoidT, { _Dst: VoidT.Δ, _Val: int, _Size: size_t } ],
  memccpy: [ VoidT, { _Dst: VoidT.Δ, _Src: VoidT.Δ, _Val: int, _Size: size_t } ],
  memicmp: [ VoidT, { _Buf1: VoidT.Δ, _Buf2: VoidT.Δ, _Size: size_t } ],
  _strset_s: [ int, { _Dst: int8.Δ, _DstSize: size_t, _Value: int } ],
  _strset: [ VoidT, { _Dest: int8.Δ, _Value: int } ],
  strcpy_s: [ int, { _Dst: int8.Δ, _SizeInBytes: rsize_t, _Src: int8.Δ } ],
  strcpy: [ VoidT, { _Dest: int8.Δ, _Source: int8.Δ } ],
  strcat_s: [ int, { _Dst: int8.Δ, _SizeInBytes: rsize_t, _Src: int8.Δ } ],
  strcat: [ VoidT, { _Dest: int8.Δ, _Source: int8.Δ } ],
  strcmp: [ VoidT, { _Str1: int8.Δ, _Str2: int8.Δ } ],
  strlen: [ uint, { _Str: int8.Δ } ],
  strnlen: [ uint, { _Str: int8.Δ, _MaxCount: size_t } ],
  strnlen_s: [ uint, { _Str: int8.Δ, _MaxCount: size_t } ],
  memmove_s: [ int, { _Dst: VoidT.Δ, _DstSize: rsize_t, _Src: VoidT.Δ, _MaxCount: rsize_t } ],
  memmove: [ VoidT, { _Dst: VoidT.Δ, _Src: VoidT.Δ, _Size: size_t } ],
  _strdup: [ VoidT, { _Src: int8.Δ } ],
  strchr: [ VoidT, { _Str: int8.Δ, _Val: int } ],
  _stricmp: [ VoidT, { _Str1: int8.Δ, _Str2: int8.Δ } ],
  _strcmpi: [ VoidT, { _Str1: int8.Δ, _Str2: int8.Δ } ],
  _stricmp_l: [ VoidT, { _Str1: int8.Δ, _Str2: int8.Δ, _Locale: _locale_t } ],
  strcoll: [ VoidT, { _Str1: int8.Δ, _Str2: int8.Δ } ],
  _strcoll_l: [ VoidT, { _Str1: int8.Δ, _Str2: int8.Δ, _Locale: _locale_t } ],
  _stricoll: [ VoidT, { _Str1: int8.Δ, _Str2: int8.Δ } ],
  _stricoll_l: [ VoidT, { _Str1: int8.Δ, _Str2: int8.Δ, _Locale: _locale_t } ],
  _strncoll: [ VoidT, { _Str1: int8.Δ, _Str2: int8.Δ, _MaxCount: size_t } ],
  _strncoll_l: [ VoidT, { _Str1: int8.Δ, _Str2: int8.Δ, _MaxCount: size_t, _Locale: _locale_t } ],
  _strnicoll: [ VoidT, { _Str1: int8.Δ, _Str2: int8.Δ, _MaxCount: size_t } ],
  _strnicoll_l: [ VoidT, { _Str1: int8.Δ, _Str2: int8.Δ, _MaxCount: size_t, _Locale: _locale_t } ],
  strcspn: [ uint, { _Str: int8.Δ, _Control: int8.Δ } ],
  _strerror: [ VoidT, { _ErrMsg: int8.Δ } ],
  _strerror_s: [ int, { _Buf: int8.Δ, _SizeInBytes: size_t, _ErrMsg: int8.Δ } ],
  strerror: [ VoidT, { int: int } ],
  strerror_s: [ int, { _Buf: int8.Δ, _SizeInBytes: size_t, _ErrNum: int } ],
  _strlwr_s: [ int, { _Str: int8.Δ, _Size: size_t } ],
  _strlwr: [ VoidT, { _String: int8.Δ } ],
  _strlwr_s_l: [ int, { _Str: int8.Δ, _Size: size_t, _Locale: _locale_t } ],
  _strlwr_l: [ VoidT, { _String: int8.Δ, _Locale: _locale_t } ],
  strncat_s: [ int, { _Dst: int8.Δ, _SizeInBytes: rsize_t, _Src: int8.Δ, _MaxCount: rsize_t } ],
  strncat: [ VoidT, { _Dest: int8.Δ, _Source: int8.Δ, _Count: size_t } ],
  strncmp: [ VoidT, { _Str1: int8.Δ, _Str2: int8.Δ, _MaxCount: size_t } ],
  _strnicmp: [ VoidT, { _Str1: int8.Δ, _Str2: int8.Δ, _MaxCount: size_t } ],
  _strnicmp_l: [ VoidT, { _Str1: int8.Δ, _Str2: int8.Δ, _MaxCount: size_t, _Locale: _locale_t } ],
  strncpy_s: [ int, { _Dst: int8.Δ, _SizeInBytes: rsize_t, _Src: int8.Δ, _MaxCount: rsize_t } ],
  strncpy: [ VoidT, { _Dest: int8.Δ, _Source: int8.Δ, _Count: size_t } ],
  _strnset_s: [ int, { _Str: int8.Δ, _SizeInBytes: size_t, _Val: int, _MaxCount: size_t } ],
  _strnset: [ VoidT, { _Dest: int8.Δ, _Val: int, _Count: size_t } ],
  strpbrk: [ VoidT, { _Str: int8.Δ, _Control: int8.Δ } ],
  strrchr: [ VoidT, { _Str: int8.Δ, _Ch: int } ],
  _strrev: [ VoidT, { _Str: int8.Δ } ],
  strspn: [ uint, { _Str: int8.Δ, _Control: int8.Δ } ],
  strstr: [ VoidT, { _Str: int8.Δ, _SubStr: int8.Δ } ],
  strtok: [ VoidT, { _Str: int8.Δ, _Delim: int8.Δ } ],
  strtok_s: [ VoidT, { _Str: int8.Δ, _Delim: int8.Δ, _Context: int8.Δ.Δ } ],
  _strupr_s: [ int, { _Str: int8.Δ, _Size: size_t } ],
  _strupr: [ VoidT, { _String: int8.Δ } ],
  _strupr_s_l: [ int, { _Str: int8.Δ, _Size: size_t, _Locale: _locale_t } ],
  _strupr_l: [ VoidT, { _String: int8.Δ, _Locale: _locale_t } ],
  strxfrm: [ uint, { _Dst: int8.Δ, _Src: int8.Δ, _MaxCount: size_t } ],
  _strxfrm_l: [ uint, { _Dst: int8.Δ, _Src: int8.Δ, _MaxCount: size_t, _Locale: _locale_t } ],
  strdup: [ VoidT, { _Src: int8.Δ } ],
  strcmpi: [ VoidT, { _Str1: int8.Δ, _Str2: int8.Δ } ],
  stricmp: [ VoidT, { _Str1: int8.Δ, _Str2: int8.Δ } ],
  strlwr: [ VoidT, { _Str: int8.Δ } ],
  strnicmp: [ VoidT, { _Str1: int8.Δ, _Str: int8.Δ, _MaxCount: size_t } ],
  strnset: [ VoidT, { _Str: int8.Δ, _Val: int, _MaxCount: size_t } ],
  strrev: [ VoidT, { _Str: int8.Δ } ],
  strset: [ VoidT, { _Str: int8.Δ, _Val: int } ],
  strupr: [ VoidT, { _Str: int8.Δ } ],
  _wcsdup: [ ushort, { _Str: ushort.Δ } ],
  wcscat_s: [ int, { _Dst: ushort.Δ, _SizeInWords: rsize_t, _Src: ushort.Δ } ],
  wcscat: [ ushort, { _Dest: ushort.Δ, _Source: ushort.Δ } ],
  wcschr: [ ushort, { _Str: ushort.Δ, _Ch: wchar_t } ],
  wcscmp: [ VoidT, { _Str1: ushort.Δ, _Str2: ushort.Δ } ],
  wcscpy_s: [ int, { _Dst: ushort.Δ, _SizeInWords: rsize_t, _Src: ushort.Δ } ],
  wcscpy: [ ushort, { _Dest: ushort.Δ, _Source: ushort.Δ } ],
  wcscspn: [ uint, { _Str: ushort.Δ, _Control: ushort.Δ } ],
  wcslen: [ uint, { _Str: ushort.Δ } ],
  wcsnlen: [ uint, { _Src: ushort.Δ, _MaxCount: size_t } ],
  wcsnlen_s: [ uint, { _Src: ushort.Δ, _MaxCount: size_t } ],
  wcsncat_s: [ int, { _Dst: ushort.Δ, _SizeInWords: rsize_t, _Src: ushort.Δ, _MaxCount: rsize_t } ],
  wcsncat: [ ushort, { _Dest: ushort.Δ, _Source: ushort.Δ, _Count: size_t } ],
  wcsncmp: [ VoidT, { _Str1: ushort.Δ, _Str2: ushort.Δ, _MaxCount: size_t } ],
  wcsncpy_s: [ int, { _Dst: ushort.Δ, _SizeInWords: rsize_t, _Src: ushort.Δ, _MaxCount: rsize_t } ],
  wcsncpy: [ ushort, { _Dest: ushort.Δ, _Source: ushort.Δ, _Count: size_t } ],
  wcspbrk: [ ushort, { _Str: ushort.Δ, _Control: ushort.Δ } ],
  wcsrchr: [ ushort, { _Str: ushort.Δ, _Ch: wchar_t } ],
  wcsspn: [ uint, { _Str: ushort.Δ, _Control: ushort.Δ } ],
  wcsstr: [ ushort, { _Str: ushort.Δ, _SubStr: ushort.Δ } ],
  wcstok: [ ushort, { _Str: ushort.Δ, _Delim: ushort.Δ } ],
  wcstok_s: [ ushort, { _Str: ushort.Δ, _Delim: ushort.Δ, _Context: ushort.Δ.Δ } ],
  _wcserror: [ ushort, { _ErrNum: int } ],
  _wcserror_s: [ int, { _Buf: ushort.Δ, _SizeInWords: size_t, _ErrNum: int } ],
  __wcserror: [ ushort, { _Str: ushort.Δ } ],
  __wcserror_s: [ int, { _Buffer: ushort.Δ, _SizeInWords: size_t, _ErrMsg: ushort.Δ } ],
  _wcsicmp: [ VoidT, { _Str1: ushort.Δ, _Str2: ushort.Δ } ],
  _wcsicmp_l: [ VoidT, { _Str1: ushort.Δ, _Str2: ushort.Δ, _Locale: _locale_t } ],
  _wcsnicmp: [ VoidT, { _Str1: ushort.Δ, _Str2: ushort.Δ, _MaxCount: size_t } ],
  _wcsnicmp_l: [ VoidT, { _Str1: ushort.Δ, _Str2: ushort.Δ, _MaxCount: size_t, _Locale: _locale_t } ],
  _wcsnset_s: [ int, { _Dst: ushort.Δ, _SizeInWords: size_t, _Val: wchar_t, _MaxCount: size_t } ],
  _wcsnset: [ ushort, { _Str: ushort.Δ, _Val: wchar_t, _MaxCount: size_t } ],
  _wcsrev: [ ushort, { _Str: ushort.Δ } ],
  _wcsset_s: [ int, { _Dst: ushort.Δ, _SizeInWords: size_t, _Value: wchar_t } ],
  _wcsset: [ ushort, { _Str: ushort.Δ, _Val: wchar_t } ],
  _wcslwr_s: [ int, { _Str: ushort.Δ, _SizeInWords: size_t } ],
  _wcslwr: [ ushort, { _String: ushort.Δ } ],
  _wcslwr_s_l: [ int, { _Str: ushort.Δ, _SizeInWords: size_t, _Locale: _locale_t } ],
  _wcslwr_l: [ ushort, { _String: ushort.Δ, _Locale: _locale_t } ],
  _wcsupr_s: [ int, { _Str: ushort.Δ, _Size: size_t } ],
  _wcsupr: [ ushort, { _String: ushort.Δ } ],
  _wcsupr_s_l: [ int, { _Str: ushort.Δ, _Size: size_t, _Locale: _locale_t } ],
  _wcsupr_l: [ ushort, { _String: ushort.Δ, _Locale: _locale_t } ],
  wcsxfrm: [ uint, { _Dst: ushort.Δ, _Src: ushort.Δ, _MaxCount: size_t } ],
  _wcsxfrm_l: [ uint, { _Dst: ushort.Δ, _Src: ushort.Δ, _MaxCount: size_t, _Locale: _locale_t } ],
  wcscoll: [ VoidT, { _Str1: ushort.Δ, _Str2: ushort.Δ } ],
  _wcscoll_l: [ VoidT, { _Str1: ushort.Δ, _Str2: ushort.Δ, _Locale: _locale_t } ],
  _wcsicoll: [ VoidT, { _Str1: ushort.Δ, _Str2: ushort.Δ } ],
  _wcsicoll_l: [ VoidT, { _Str1: ushort.Δ, _Str2: ushort.Δ, _Locale: _locale_t } ],
  _wcsncoll: [ VoidT, { _Str1: ushort.Δ, _Str2: ushort.Δ, _MaxCount: size_t } ],
  _wcsncoll_l: [ VoidT, { _Str1: ushort.Δ, _Str2: ushort.Δ, _MaxCount: size_t, _Locale: _locale_t } ],
  _wcsnicoll: [ VoidT, { _Str1: ushort.Δ, _Str2: ushort.Δ, _MaxCount: size_t } ],
  _wcsnicoll_l: [ VoidT, { _Str1: ushort.Δ, _Str2: ushort.Δ, _MaxCount: size_t, _Locale: _locale_t } ],
  wcsdup: [ ushort, { _Str: ushort.Δ } ],
  wcsicmp: [ VoidT, { _Str1: ushort.Δ, _Str2: ushort.Δ } ],
  wcsnicmp: [ VoidT, { _Str1: ushort.Δ, _Str2: ushort.Δ, _MaxCount: size_t } ],
  wcsnset: [ ushort, { _Str: ushort.Δ, _Val: wchar_t, _MaxCount: size_t } ],
  wcsrev: [ ushort, { _Str: ushort.Δ } ],
  wcsset: [ ushort, { _Str: ushort.Δ, _Val: wchar_t } ],
  wcslwr: [ ushort, { _Str: ushort.Δ } ],
  wcsupr: [ ushort, { _Str: ushort.Δ } ],
  wcsicoll: [ VoidT, { _Str1: ushort.Δ, _Str2: ushort.Δ } ],
  InterlockedBitTestAndSet: [ uchar, { Base: long.Δ, Bit: LONG } ],
  InterlockedBitTestAndReset: [ uchar, { Base: long.Δ, Bit: LONG } ],
  InterlockedBitTestAndComplement: [ uchar, { Base: long.Δ, Bit: LONG } ],
  MemoryBarrier: [ VoidT, {  } ],
  ReadPMC: [ ulonglong, { Counter: DWORD } ],
  ReadTimeStampCounter: [ ulonglong, {  } ],
  DbgRaiseAssertionFailure: [ VoidT, {  } ],
  GetFiberData: [ VoidT.Δ, {  } ],
  GetCurrentFiber: [ VoidT.Δ, {  } ],
  RtlUnwind: [ VoidT, { TargetFrame: PVOID, TargetIp: PVOID, ExceptionRecord: PEXCEPTION_RECORD, ReturnValue: PVOID } ],
  RtlInitializeSListHead: [ VoidT, { ListHead: PSLIST_HEADER } ],
  RtlFirstEntrySList: [ VOIDPTR, { ListHead: uint.Δ } ],
  RtlInterlockedPopEntrySList: [ VOIDPTR, { ListHead: PSLIST_HEADER } ],
  RtlInterlockedPushEntrySList: [ VOIDPTR, { ListHead: PSLIST_HEADER, ListEntry: PSINGLE_LIST_ENTRY } ],
  RtlInterlockedFlushSList: [ VOIDPTR, { ListHead: PSLIST_HEADER } ],
  RtlQueryDepthSList: [ ushort, { ListHead: PSLIST_HEADER } ],
  RtlRunOnceInitialize: [ VoidT, { RunOnce: PRTL_RUN_ONCE } ],
  RtlRunOnceExecuteOnce: [ ulong, { RunOnce: PRTL_RUN_ONCE, InitFn: PRTL_RUN_ONCE_INIT_FN, Parameter: PVOID, Context: VoidT.Δ.Δ } ],
  RtlRunOnceBeginInitialize: [ ulong, { RunOnce: PRTL_RUN_ONCE, Flags: DWORD, Context: VoidT.Δ.Δ } ],
  RtlRunOnceComplete: [ ulong, { RunOnce: PRTL_RUN_ONCE, Flags: DWORD, Context: PVOID } ],
  HEAP_MAKE_TAG_FLAGS: [ ulong, { TagBase: DWORD, Tag: DWORD } ],
  RtlCaptureStackBackTrace: [ ushort, { FramesToSkip: DWORD, FramesToCapture: DWORD, BackTrace: VoidT.Δ.Δ, BackTraceHash: PDWORD } ],
  RtlCaptureContext: [ VoidT, { ContextRecord: PCONTEXT } ],
  RtlCompareMemory: [ ulong, { Source1: VoidT.Δ, Source2: VoidT.Δ, Length: SIZE_T } ],
  RtlSecureZeroMemory: [ VoidT.Δ, { ptr: PVOID, cnt: SIZE_T } ],
  RtlPcToFileHeader: [ VoidT.Δ, { PcValue: PVOID, BaseOfImage: VoidT.Δ.Δ } ],
  VerSetConditionMask: [ ulonglong, { ConditionMask: ULONGLONG, TypeMask: DWORD, Condition: BYTE } ],
  RtlGetProductInfo: [ uchar, { OSMajorVersion: DWORD, OSMinorVersion: DWORD, SpMajorVersion: DWORD, SpMinorVersion: DWORD, ReturnedProductType: PDWORD } ],
  RtlCopyExtendedContext: [ ulong, { Destination: PCONTEXT_EX, ContextFlags: DWORD, Source: PCONTEXT_EX } ],
  RtlInitializeExtendedContext: [ ulong, { Context: PVOID, ContextFlags: DWORD, ContextEx: VOIDPTR.Δ } ],
  RtlGetEnabledExtendedFeatures: [ ulonglong, { FeatureMask: DWORD64 } ],
  RtlGetExtendedContextLength: [ ulong, { ContextFlags: DWORD, ContextLength: PDWORD } ],
  RtlGetExtendedFeaturesMask: [ ulonglong, { ContextEx: PCONTEXT_EX } ],
  RtlLocateExtendedFeature: [ VoidT.Δ, { ContextEx: PCONTEXT_EX, FeatureId: DWORD, Length: PDWORD } ],
  RtlLocateLegacyContext: [ VOIDPTR, { ContextEx: PCONTEXT_EX, Length: PDWORD } ],
  RtlSetExtendedFeaturesMask: [ VoidT, { ContextEx: PCONTEXT_EX, FeatureMask: DWORD64 } ],
  TpInitializeCallbackEnviron: [ VoidT, { CallbackEnviron: PTP_CALLBACK_ENVIRON } ],
  TpSetCallbackThreadpool: [ VoidT, { CallbackEnviron: PTP_CALLBACK_ENVIRON, Pool: PTP_POOL } ],
  TpSetCallbackCleanupGroup: [ VoidT, { CallbackEnviron: PTP_CALLBACK_ENVIRON, CleanupGroup: PTP_CLEANUP_GROUP, CleanupGroupCancelCallback: PTP_CLEANUP_GROUP_CANCEL_CALLBACK } ],
  TpSetCallbackActivationContext: [ VoidT, { CallbackEnviron: PTP_CALLBACK_ENVIRON, ActivationContext: _ACTIVATION_CONTEXT.Δ } ],
  TpSetCallbackNoActivationContext: [ VoidT, { CallbackEnviron: PTP_CALLBACK_ENVIRON } ],
  TpSetCallbackLongFunction: [ VoidT, { CallbackEnviron: PTP_CALLBACK_ENVIRON } ],
  TpSetCallbackRaceWithDll: [ VoidT, { CallbackEnviron: PTP_CALLBACK_ENVIRON, DllHandle: PVOID } ],
  TpSetCallbackFinalizationCallback: [ VoidT, { CallbackEnviron: PTP_CALLBACK_ENVIRON, FinalizationCallback: PTP_SIMPLE_CALLBACK } ],
  TpSetCallbackPriority: [ VoidT, { CallbackEnviron: PTP_CALLBACK_ENVIRON, Priority: TP_CALLBACK_PRIORITY } ],
  TpSetCallbackPersistent: [ VoidT, { CallbackEnviron: PTP_CALLBACK_ENVIRON } ],
  TpDestroyCallbackEnviron: [ VoidT, { CallbackEnviron: PTP_CALLBACK_ENVIRON } ],
  NtCurrentTeb: [ _TEB, {  } ],
  InitOnceInitialize: [ VoidT, { InitOnce: PINIT_ONCE } ],
  InitOnceExecuteOnce: [ int, { InitOnce: PINIT_ONCE, InitFn: PINIT_ONCE_FN, Parameter: PVOID, Context: VoidT.Δ.Δ } ],
  InitOnceBeginInitialize: [ int, { lpInitOnce: LPINIT_ONCE, dwFlags: DWORD, fPending: PBOOL, lpContext: VoidT.Δ.Δ } ],
  InitOnceComplete: [ int, { lpInitOnce: LPINIT_ONCE, dwFlags: DWORD, lpContext: LPVOID } ],
  InitializeSRWLock: [ VoidT, { SRWLock: PSRWLOCK } ],
  ReleaseSRWLockExclusive: [ VoidT, { SRWLock: PSRWLOCK } ],
  ReleaseSRWLockShared: [ VoidT, { SRWLock: PSRWLOCK } ],
  AcquireSRWLockExclusive: [ VoidT, { SRWLock: PSRWLOCK } ],
  AcquireSRWLockShared: [ VoidT, { SRWLock: PSRWLOCK } ],
  TryAcquireSRWLockExclusive: [ uchar, { SRWLock: PSRWLOCK } ],
  TryAcquireSRWLockShared: [ uchar, { SRWLock: PSRWLOCK } ],
  InitializeConditionVariable: [ VoidT, { ConditionVariable: PCONDITION_VARIABLE } ],
  WakeConditionVariable: [ VoidT, { ConditionVariable: PCONDITION_VARIABLE } ],
  WakeAllConditionVariable: [ VoidT, { ConditionVariable: PCONDITION_VARIABLE } ],
  SleepConditionVariableCS: [ int, { ConditionVariable: PCONDITION_VARIABLE, CriticalSection: PCRITICAL_SECTION, dwMilliseconds: DWORD } ],
  SleepConditionVariableSRW: [ int, { ConditionVariable: PCONDITION_VARIABLE, SRWLock: PSRWLOCK, dwMilliseconds: DWORD, Flags: ULONG } ],
  EncodePointer: [ VoidT.Δ, { Ptr: PVOID } ],
  DecodePointer: [ VoidT.Δ, { Ptr: PVOID } ],
  EncodeSystemPointer: [ VoidT.Δ, { Ptr: PVOID } ],
  DecodeSystemPointer: [ VoidT.Δ, { Ptr: PVOID } ],
  InterlockedIncrement: [ long, { lpAddend: long.Δ } ],
  InterlockedDecrement: [ long, { lpAddend: long.Δ } ],
  InterlockedExchange: [ long, { Target: long.Δ, Value: LONG } ],
  InterlockedExchangeAdd: [ long, { Addend: long.Δ, Value: LONG } ],
  InterlockedCompareExchange: [ long, { Destination: long.Δ, Exchange: LONG, Comperand: LONG } ],
  InterlockedCompareExchange64: [ longlong, { Destination: longlong.Δ, Exchange: LONGLONG, Comperand: LONGLONG } ],
  InterlockedAnd64: [ longlong, { Destination: longlong.Δ, Value: LONGLONG } ],
  InterlockedOr64: [ longlong, { Destination: longlong.Δ, Value: LONGLONG } ],
  InterlockedXor64: [ longlong, { Destination: longlong.Δ, Value: LONGLONG } ],
  InterlockedIncrement64: [ longlong, { Addend: longlong.Δ } ],
  InterlockedDecrement64: [ longlong, { Addend: longlong.Δ } ],
  InterlockedExchange64: [ longlong, { Target: longlong.Δ, Value: LONGLONG } ],
  InterlockedExchangeAdd64: [ longlong, { Addend: longlong.Δ, Value: LONGLONG } ],
  InitializeSListHead: [ VoidT, { ListHead: PSLIST_HEADER } ],
  InterlockedPopEntrySList: [ VOIDPTR, { ListHead: PSLIST_HEADER } ],
  InterlockedPushEntrySList: [ VOIDPTR, { ListHead: PSLIST_HEADER, ListEntry: PSINGLE_LIST_ENTRY } ],
  InterlockedFlushSList: [ VOIDPTR, { ListHead: PSLIST_HEADER } ],
  QueryDepthSList: [ ushort, { ListHead: PSLIST_HEADER } ],
  FreeResource: [ int, { hResData: HGLOBAL } ],
  LockResource: [ VoidT.Δ, { hResData: HGLOBAL } ],
  WinMain: [ VoidT, { hInstance: HINSTANCE, hPrevInstance: HINSTANCE, lpCmdLine: LPSTR, nShowCmd: int } ],
  wWinMain: [ VoidT, { hInstance: HINSTANCE, hPrevInstance: HINSTANCE, lpCmdLine: LPWSTR, nShowCmd: int } ],
  FreeLibrary: [ int, { hLibModule: HMODULE } ],
  FreeLibraryAndExitThread: [ VoidT, { hLibModule: HMODULE, dwExitCode: DWORD } ],
  DisableThreadLibraryCalls: [ int, { hLibModule: HMODULE } ],
  GetProcAddress: [ VOIDPTR, { hModule: HMODULE, lpProcName: LPCSTR } ],
  GetVersion: [ ulong, {  } ],
  GlobalAlloc: [ VoidT.Δ, { uFlags: UINT, dwBytes: SIZE_T } ],
  GlobalReAlloc: [ VoidT.Δ, { hMem: HGLOBAL, dwBytes: SIZE_T, uFlags: UINT } ],
  GlobalSize: [ ulong, { hMem: HGLOBAL } ],
  GlobalFlags: [ uint, { hMem: HGLOBAL } ],
  GlobalLock: [ VoidT.Δ, { hMem: HGLOBAL } ],
  GlobalHandle: [ VoidT.Δ, { pMem: LPCVOID } ],
  GlobalUnlock: [ int, { hMem: HGLOBAL } ],
  GlobalFree: [ VoidT.Δ, { hMem: HGLOBAL } ],
  GlobalCompact: [ ulong, { dwMinFree: DWORD } ],
  GlobalFix: [ VoidT, { hMem: HGLOBAL } ],
  GlobalUnfix: [ VoidT, { hMem: HGLOBAL } ],
  GlobalWire: [ VoidT.Δ, { hMem: HGLOBAL } ],
  GlobalUnWire: [ int, { hMem: HGLOBAL } ],
  GlobalMemoryStatus: [ VoidT, { lpBuffer: LPMEMORYSTATUS } ],
  GlobalMemoryStatusEx: [ int, { lpBuffer: LPMEMORYSTATUSEX } ],
  LocalAlloc: [ VoidT.Δ, { uFlags: UINT, uBytes: SIZE_T } ],
  LocalReAlloc: [ VoidT.Δ, { hMem: HLOCAL, uBytes: SIZE_T, uFlags: UINT } ],
  LocalLock: [ VoidT.Δ, { hMem: HLOCAL } ],
  LocalHandle: [ VoidT.Δ, { pMem: LPCVOID } ],
  LocalUnlock: [ int, { hMem: HLOCAL } ],
  LocalSize: [ ulong, { hMem: HLOCAL } ],
  LocalFlags: [ uint, { hMem: HLOCAL } ],
  LocalFree: [ VoidT.Δ, { hMem: HLOCAL } ],
  LocalShrink: [ ulong, { hMem: HLOCAL, cbNewSize: UINT } ],
  LocalCompact: [ ulong, { uMinFree: UINT } ],
  FlushInstructionCache: [ int, { hProcess: HANDLE, lpBaseAddress: LPCVOID, dwSize: SIZE_T } ],
  FlushProcessWriteBuffers: [ VoidT, {  } ],
  QueryThreadCycleTime: [ int, { ThreadHandle: HANDLE, CycleTime: PULONG64 } ],
  QueryProcessCycleTime: [ int, { ProcessHandle: HANDLE, CycleTime: PULONG64 } ],
  QueryIdleProcessorCycleTime: [ int, { BufferLength: PULONG, ProcessorIdleCycleTime: PULONG64 } ],
  QueryIdleProcessorCycleTimeEx: [ int, { Group: USHORT, BufferLength: PULONG, ProcessorIdleCycleTime: PULONG64 } ],
  QueryUnbiasedInterruptTime: [ int, { UnbiasedTime: PULONGLONG } ],
  GetProcessorSystemCycleTime: [ int, { Group: USHORT, Buffer: PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION, ReturnedLength: PDWORD } ],
  VirtualAlloc: [ VoidT.Δ, { lpAddress: LPVOID, dwSize: SIZE_T, flAllocationType: DWORD, flProtect: DWORD } ],
  VirtualFree: [ int, { lpAddress: LPVOID, dwSize: SIZE_T, dwFreeType: DWORD } ],
  VirtualProtect: [ int, { lpAddress: LPVOID, dwSize: SIZE_T, flNewProtect: DWORD, lpflOldProtect: PDWORD } ],
  VirtualQuery: [ ulong, { lpAddress: LPCVOID, lpBuffer: PMEMORY_BASIC_INFORMATION, dwLength: SIZE_T } ],
  VirtualAllocEx: [ VoidT.Δ, { hProcess: HANDLE, lpAddress: LPVOID, dwSize: SIZE_T, flAllocationType: DWORD, flProtect: DWORD } ],
  VirtualAllocExNuma: [ VoidT.Δ, { hProcess: HANDLE, lpAddress: LPVOID, dwSize: SIZE_T, flAllocationType: DWORD, flProtect: DWORD, nndPreferred: DWORD } ],
  GetWriteWatch: [ uint, { dwFlags: DWORD, lpBaseAddress: PVOID, dwRegionSize: SIZE_T, lpAddresses: VoidT.Δ.Δ, lpdwCount: ulong.Δ, lpdwGranularity: PULONG } ],
  ResetWriteWatch: [ uint, { lpBaseAddress: LPVOID, dwRegionSize: SIZE_T } ],
  GetLargePageMinimum: [ ulong, {  } ],
  EnumSystemFirmwareTables: [ uint, { FirmwareTableProviderSignature: DWORD, pFirmwareTableEnumBuffer: PVOID, BufferSize: DWORD } ],
  GetSystemFirmwareTable: [ uint, { FirmwareTableProviderSignature: DWORD, FirmwareTableID: DWORD, pFirmwareTableBuffer: PVOID, BufferSize: DWORD } ],
  GetPhysicallyInstalledSystemMemory: [ int, { TotalMemoryInKilobytes: PULONGLONG } ],
  VirtualFreeEx: [ int, { hProcess: HANDLE, lpAddress: LPVOID, dwSize: SIZE_T, dwFreeType: DWORD } ],
  VirtualProtectEx: [ int, { hProcess: HANDLE, lpAddress: LPVOID, dwSize: SIZE_T, flNewProtect: DWORD, lpflOldProtect: PDWORD } ],
  VirtualQueryEx: [ ulong, { hProcess: HANDLE, lpAddress: LPCVOID, lpBuffer: PMEMORY_BASIC_INFORMATION, dwLength: SIZE_T } ],
  HeapCreate: [ VoidT.Δ, { flOptions: DWORD, dwInitialSize: SIZE_T, dwMaximumSize: SIZE_T } ],
  HeapDestroy: [ int, { hHeap: HANDLE } ],
  HeapAlloc: [ VoidT.Δ, { hHeap: HANDLE, dwFlags: DWORD, dwBytes: SIZE_T } ],
  HeapReAlloc: [ VoidT.Δ, { hHeap: HANDLE, dwFlags: DWORD, lpMem: LPVOID, dwBytes: SIZE_T } ],
  HeapFree: [ int, { hHeap: HANDLE, dwFlags: DWORD, lpMem: LPVOID } ],
  HeapSize: [ ulong, { hHeap: HANDLE, dwFlags: DWORD, lpMem: LPCVOID } ],
  HeapValidate: [ int, { hHeap: HANDLE, dwFlags: DWORD, lpMem: LPCVOID } ],
  HeapCompact: [ ulong, { hHeap: HANDLE, dwFlags: DWORD } ],
  GetProcessHeap: [ VoidT.Δ, {  } ],
  GetProcessHeaps: [ ulong, { NumberOfHeaps: DWORD, ProcessHeaps: PHANDLE } ],
  HeapLock: [ int, { hHeap: HANDLE } ],
  HeapUnlock: [ int, { hHeap: HANDLE } ],
  HeapWalk: [ int, { hHeap: HANDLE, lpEntry: LPPROCESS_HEAP_ENTRY } ],
  HeapSetInformation: [ int, { HeapHandle: HANDLE, HeapInformationClass: HEAP_INFORMATION_CLASS, HeapInformation: PVOID, HeapInformationLength: SIZE_T } ],
  HeapQueryInformation: [ int, { HeapHandle: HANDLE, HeapInformationClass: HEAP_INFORMATION_CLASS, HeapInformation: PVOID, HeapInformationLength: SIZE_T, ReturnLength: PSIZE_T } ],
  GetBinaryTypeA: [ int, { lpApplicationName: LPCSTR, lpBinaryType: LPDWORD } ],
  GetBinaryTypeW: [ int, { lpApplicationName: LPCWSTR, lpBinaryType: LPDWORD } ],
  GetShortPathNameA: [ ulong, { lpszLongPath: LPCSTR, lpszShortPath: LPSTR, cchBuffer: DWORD } ],
  GetShortPathNameW: [ ulong, { lpszLongPath: LPCWSTR, lpszShortPath: LPWSTR, cchBuffer: DWORD } ],
  GetLongPathNameA: [ ulong, { lpszShortPath: LPCSTR, lpszLongPath: LPSTR, cchBuffer: DWORD } ],
  GetLongPathNameW: [ ulong, { lpszShortPath: LPCWSTR, lpszLongPath: LPWSTR, cchBuffer: DWORD } ],
  GetLongPathNameTransactedA: [ ulong, { lpszShortPath: LPCSTR, lpszLongPath: LPSTR, cchBuffer: DWORD, hTransaction: HANDLE } ],
  GetLongPathNameTransactedW: [ ulong, { lpszShortPath: LPCWSTR, lpszLongPath: LPWSTR, cchBuffer: DWORD, hTransaction: HANDLE } ],
  GetProcessAffinityMask: [ int, { hProcess: HANDLE, lpProcessAffinityMask: PDWORD_PTR, lpSystemAffinityMask: PDWORD_PTR } ],
  SetProcessAffinityMask: [ int, { hProcess: HANDLE, dwProcessAffinityMask: DWORD_PTR } ],
  GetProcessGroupAffinity: [ int, { hProcess: HANDLE, GroupCount: PUSHORT, GroupArray: PUSHORT } ],
  GetProcessHandleCount: [ int, { hProcess: HANDLE, pdwHandleCount: PDWORD } ],
  GetProcessTimes: [ int, { hProcess: HANDLE, lpCreationTime: LPFILETIME, lpExitTime: LPFILETIME, lpKernelTime: LPFILETIME, lpUserTime: LPFILETIME } ],
  GetProcessIoCounters: [ int, { hProcess: HANDLE, lpIoCounters: PIO_COUNTERS } ],
  GetProcessWorkingSetSize: [ int, { hProcess: HANDLE, lpMinimumWorkingSetSize: PSIZE_T, lpMaximumWorkingSetSize: PSIZE_T } ],
  GetProcessWorkingSetSizeEx: [ int, { hProcess: HANDLE, lpMinimumWorkingSetSize: PSIZE_T, lpMaximumWorkingSetSize: PSIZE_T, Flags: PDWORD } ],
  SetProcessWorkingSetSize: [ int, { hProcess: HANDLE, dwMinimumWorkingSetSize: SIZE_T, dwMaximumWorkingSetSize: SIZE_T } ],
  SetProcessWorkingSetSizeEx: [ int, { hProcess: HANDLE, dwMinimumWorkingSetSize: SIZE_T, dwMaximumWorkingSetSize: SIZE_T, Flags: DWORD } ],
  SetProcessAffinityUpdateMode: [ int, { hProcess: HANDLE, dwFlags: DWORD } ],
  QueryProcessAffinityUpdateMode: [ int, { hProcess: HANDLE, lpdwFlags: LPDWORD } ],
  OpenProcess: [ VoidT.Δ, { dwDesiredAccess: DWORD, bInheritHandle: BOOL, dwProcessId: DWORD } ],
  GetCurrentProcess: [ VoidT.Δ, {  } ],
  GetCurrentProcessId: [ ulong, {  } ],
  ExitProcess: [ VoidT, { uExitCode: UINT } ],
  TerminateProcess: [ int, { hProcess: HANDLE, uExitCode: UINT } ],
  GetExitCodeProcess: [ int, { hProcess: HANDLE, lpExitCode: LPDWORD } ],
  FatalExit: [ VoidT, { ExitCode: int } ],
  GetEnvironmentStrings: [ int8.Δ, {  } ],
  GetEnvironmentStringsW: [ ushort.Δ, {  } ],
  SetEnvironmentStringsA: [ int, { NewEnvironment: LPCH } ],
  SetEnvironmentStringsW: [ int, { NewEnvironment: LPWCH } ],
  FreeEnvironmentStringsA: [ int, { LPCH: LPCH } ],
  FreeEnvironmentStringsW: [ int, { LPWCH: LPWCH } ],
  RaiseException: [ VoidT, { dwExceptionCode: DWORD, dwExceptionFlags: DWORD, nNumberOfArguments: DWORD, lpArguments: ulong.Δ } ],
  RaiseFailFastException: [ VoidT, { pExceptionRecord: PEXCEPTION_RECORD, pContextRecord: PCONTEXT, dwFlags: DWORD } ],
  UnhandledExceptionFilter: [ long, { ExceptionInfo: _EXCEPTION_POINTERS.Δ } ],
  SetUnhandledExceptionFilter: [ LPTOP_LEVEL_EXCEPTION_FILTER, { lpTopLevelExceptionFilter: LPTOP_LEVEL_EXCEPTION_FILTER } ],
  CreateFiber: [ VoidT.Δ, { dwStackSize: SIZE_T, lpStartAddress: LPFIBER_START_ROUTINE, lpParameter: LPVOID } ],
  CreateFiberEx: [ VoidT.Δ, { dwStackCommitSize: SIZE_T, dwStackReserveSize: SIZE_T, dwFlags: DWORD, lpStartAddress: LPFIBER_START_ROUTINE, lpParameter: LPVOID } ],
  DeleteFiber: [ VoidT, { lpFiber: LPVOID } ],
  ConvertThreadToFiber: [ VoidT.Δ, { lpParameter: LPVOID } ],
  ConvertThreadToFiberEx: [ VoidT.Δ, { lpParameter: LPVOID, dwFlags: DWORD } ],
  ConvertFiberToThread: [ int, {  } ],
  IsThreadAFiber: [ int, {  } ],
  SwitchToFiber: [ VoidT, { lpFiber: LPVOID } ],
  SwitchToThread: [ int, {  } ],
  CreateUmsCompletionList: [ int, { UmsCompletionList: VoidT.Δ.Δ } ],
  DequeueUmsCompletionListItems: [ int, { UmsCompletionList: PUMS_COMPLETION_LIST, WaitTimeOut: DWORD, UmsThreadList: VoidT.Δ.Δ } ],
  GetUmsCompletionListEvent: [ int, { UmsCompletionList: PUMS_COMPLETION_LIST, UmsCompletionEvent: PHANDLE } ],
  ExecuteUmsThread: [ int, { UmsThread: PUMS_CONTEXT } ],
  UmsThreadYield: [ int, { SchedulerParam: PVOID } ],
  DeleteUmsCompletionList: [ int, { UmsCompletionList: PUMS_COMPLETION_LIST } ],
  GetCurrentUmsThread: [ VoidT.Δ, {  } ],
  GetNextUmsListItem: [ VoidT.Δ, { UmsContext: PUMS_CONTEXT } ],
  QueryUmsThreadInformation: [ int, { UmsThread: PUMS_CONTEXT, UmsThreadInfoClass: UMS_THREAD_INFO_CLASS, UmsThreadInformation: PVOID, UmsThreadInformationLength: ULONG, ReturnLength: PULONG } ],
  SetUmsThreadInformation: [ int, { UmsThread: PUMS_CONTEXT, UmsThreadInfoClass: UMS_THREAD_INFO_CLASS, UmsThreadInformation: PVOID, UmsThreadInformationLength: ULONG } ],
  DeleteUmsThreadContext: [ int, { UmsThread: PUMS_CONTEXT } ],
  CreateUmsThreadContext: [ int, { lpUmsThread: VoidT.Δ.Δ } ],
  EnterUmsSchedulingMode: [ int, { SchedulerStartupInfo: PUMS_SCHEDULER_STARTUP_INFO } ],
  CreateThread: [ VoidT.Δ, { lpThreadAttributes: LPSECURITY_ATTRIBUTES, dwStackSize: SIZE_T, lpStartAddress: LPTHREAD_START_ROUTINE, lpParameter: LPVOID, dwCreationFlags: DWORD, lpThreadId: LPDWORD } ],
  CreateRemoteThread: [ VoidT.Δ, { hProcess: HANDLE, lpThreadAttributes: LPSECURITY_ATTRIBUTES, dwStackSize: SIZE_T, lpStartAddress: LPTHREAD_START_ROUTINE, lpParameter: LPVOID, dwCreationFlags: DWORD, lpThreadId: LPDWORD } ],
  CreateRemoteThreadEx: [ VoidT.Δ, { hProcess: HANDLE, lpThreadAttributes: LPSECURITY_ATTRIBUTES, dwStackSize: SIZE_T, lpStartAddress: LPTHREAD_START_ROUTINE, lpParameter: LPVOID, dwCreationFlags: DWORD, lpAttributeList: LPPROC_THREAD_ATTRIBUTE_LIST, lpThreadId: LPDWORD } ],
  GetCurrentThread: [ VoidT.Δ, {  } ],
  GetCurrentThreadId: [ ulong, {  } ],
  SetThreadStackGuarantee: [ int, { StackSizeInBytes: PULONG } ],
  GetProcessIdOfThread: [ ulong, { Thread: HANDLE } ],
  GetThreadId: [ ulong, { Thread: HANDLE } ],
  GetProcessId: [ ulong, { Process: HANDLE } ],
  GetCurrentProcessorNumber: [ ulong, {  } ],
  GetCurrentProcessorNumberEx: [ VoidT, { ProcNumber: PPROCESSOR_NUMBER } ],
  GetThreadGroupAffinity: [ int, { hThread: HANDLE, GroupAffinity: PGROUP_AFFINITY } ],
  SetThreadAffinityMask: [ ulong, { hThread: HANDLE, dwThreadAffinityMask: DWORD_PTR } ],
  SetThreadGroupAffinity: [ int, { hThread: HANDLE, GroupAffinity: uint.Δ, PreviousGroupAffinity: PGROUP_AFFINITY } ],
  SetThreadIdealProcessorEx: [ int, { hThread: HANDLE, lpIdealProcessor: PPROCESSOR_NUMBER, lpPreviousIdealProcessor: PPROCESSOR_NUMBER } ],
  GetThreadIdealProcessorEx: [ int, { hThread: HANDLE, lpIdealProcessor: PPROCESSOR_NUMBER } ],
  SetThreadIdealProcessor: [ ulong, { hThread: HANDLE, dwIdealProcessor: DWORD } ],
  SetProcessDEPPolicy: [ int, { dwFlags: DWORD } ],
  GetProcessDEPPolicy: [ int, { hProcess: HANDLE, lpFlags: LPDWORD, lpPermanent: PBOOL } ],
  SetProcessPriorityBoost: [ int, { hProcess: HANDLE, bDisablePriorityBoost: BOOL } ],
  GetProcessPriorityBoost: [ int, { hProcess: HANDLE, pDisablePriorityBoost: PBOOL } ],
  RequestWakeupLatency: [ int, { latency: LATENCY_TIME } ],
  IsSystemResumeAutomatic: [ int, {  } ],
  OpenThread: [ VoidT.Δ, { dwDesiredAccess: DWORD, bInheritHandle: BOOL, dwThreadId: DWORD } ],
  SetThreadPriority: [ int, { hThread: HANDLE, nPriority: int } ],
  SetThreadPriorityBoost: [ int, { hThread: HANDLE, bDisablePriorityBoost: BOOL } ],
  GetThreadPriorityBoost: [ int, { hThread: HANDLE, pDisablePriorityBoost: PBOOL } ],
  GetThreadPriority: [ VoidT, { hThread: HANDLE } ],
  GetThreadTimes: [ int, { hThread: HANDLE, lpCreationTime: LPFILETIME, lpExitTime: LPFILETIME, lpKernelTime: LPFILETIME, lpUserTime: LPFILETIME } ],
  GetThreadIOPendingFlag: [ int, { hThread: HANDLE, lpIOIsPending: PBOOL } ],
  ExitThread: [ VoidT, { dwExitCode: DWORD } ],
  TerminateThread: [ int, { hThread: HANDLE, dwExitCode: DWORD } ],
  GetExitCodeThread: [ int, { hThread: HANDLE, lpExitCode: LPDWORD } ],
  GetThreadSelectorEntry: [ int, { hThread: HANDLE, dwSelector: DWORD, lpSelectorEntry: LPLDT_ENTRY } ],
  SetThreadExecutionState: [ ulong, { esFlags: EXECUTION_STATE } ],
  PowerCreateRequest: [ VoidT.Δ, { Context: PREASON_CONTEXT } ],
  PowerSetRequest: [ int, { PowerRequest: HANDLE, RequestType: POWER_REQUEST_TYPE } ],
  PowerClearRequest: [ int, { PowerRequest: HANDLE, RequestType: POWER_REQUEST_TYPE } ],
  GetLastError: [ ulong, {  } ],
  SetLastError: [ VoidT, { dwErrCode: DWORD } ],
  GetOverlappedResult: [ int, { hFile: HANDLE, lpOverlapped: LPOVERLAPPED, lpNumberOfBytesTransferred: LPDWORD, bWait: BOOL } ],
  CreateIoCompletionPort: [ VoidT.Δ, { FileHandle: HANDLE, ExistingCompletionPort: HANDLE, CompletionKey: ULONG_PTR, NumberOfConcurrentThreads: DWORD } ],
  GetQueuedCompletionStatus: [ int, { CompletionPort: HANDLE, lpNumberOfBytesTransferred: LPDWORD, lpCompletionKey: PULONG_PTR, lpOverlapped: VOIDPTR.Δ, dwMilliseconds: DWORD } ],
  GetQueuedCompletionStatusEx: [ int, { CompletionPort: HANDLE, lpCompletionPortEntries: LPOVERLAPPED_ENTRY, ulCount: ULONG, ulNumEntriesRemoved: PULONG, dwMilliseconds: DWORD, fAlertable: BOOL } ],
  PostQueuedCompletionStatus: [ int, { CompletionPort: HANDLE, dwNumberOfBytesTransferred: DWORD, dwCompletionKey: ULONG_PTR, lpOverlapped: LPOVERLAPPED } ],
  SetFileCompletionNotificationModes: [ int, { FileHandle: HANDLE, Flags: UCHAR } ],
  SetFileIoOverlappedRange: [ int, { FileHandle: HANDLE, OverlappedRangeStart: PUCHAR, Length: ULONG } ],
  GetErrorMode: [ uint, {  } ],
  SetErrorMode: [ uint, { uMode: UINT } ],
  GetThreadErrorMode: [ ulong, {  } ],
  SetThreadErrorMode: [ int, { dwNewMode: DWORD, lpOldMode: LPDWORD } ],
  ReadProcessMemory: [ int, { hProcess: HANDLE, lpBaseAddress: LPCVOID, lpBuffer: LPVOID, nSize: SIZE_T, lpNumberOfBytesRead: ulong.Δ } ],
  WriteProcessMemory: [ int, { hProcess: HANDLE, lpBaseAddress: LPVOID, lpBuffer: LPCVOID, nSize: SIZE_T, lpNumberOfBytesWritten: ulong.Δ } ],
  GetThreadContext: [ int, { hThread: HANDLE, lpContext: LPCONTEXT } ],
  SetThreadContext: [ int, { hThread: HANDLE, lpContext: uint.Δ } ],
  Wow64GetThreadContext: [ int, { hThread: HANDLE, lpContext: PWOW64_CONTEXT } ],
  Wow64GetThreadSelectorEntry: [ int, { hThread: HANDLE, dwSelector: DWORD, lpSelectorEntry: PWOW64_LDT_ENTRY } ],
  Wow64SetThreadContext: [ int, { hThread: HANDLE, lpContext: uint.Δ } ],
  SuspendThread: [ ulong, { hThread: HANDLE } ],
  Wow64SuspendThread: [ ulong, { hThread: HANDLE } ],
  ResumeThread: [ ulong, { hThread: HANDLE } ],
  QueueUserAPC: [ ulong, { pfnAPC: PAPCFUNC, hThread: HANDLE, dwData: ULONG_PTR } ],
  IsDebuggerPresent: [ int, {  } ],
  CheckRemoteDebuggerPresent: [ int, { hProcess: HANDLE, pbDebuggerPresent: PBOOL } ],
  DebugBreak: [ VoidT, {  } ],
  WaitForDebugEvent: [ int, { lpDebugEvent: LPDEBUG_EVENT, dwMilliseconds: DWORD } ],
  ContinueDebugEvent: [ int, { dwProcessId: DWORD, dwThreadId: DWORD, dwContinueStatus: DWORD } ],
  DebugActiveProcess: [ int, { dwProcessId: DWORD } ],
  DebugActiveProcessStop: [ int, { dwProcessId: DWORD } ],
  DebugSetProcessKillOnExit: [ int, { KillOnExit: BOOL } ],
  DebugBreakProcess: [ int, { Process: HANDLE } ],
  InitializeCriticalSection: [ VoidT, { lpCriticalSection: LPCRITICAL_SECTION } ],
  EnterCriticalSection: [ VoidT, { lpCriticalSection: LPCRITICAL_SECTION } ],
  LeaveCriticalSection: [ VoidT, { lpCriticalSection: LPCRITICAL_SECTION } ],
  InitializeCriticalSectionAndSpinCount: [ int, { lpCriticalSection: LPCRITICAL_SECTION, dwSpinCount: DWORD } ],
  InitializeCriticalSectionEx: [ int, { lpCriticalSection: LPCRITICAL_SECTION, dwSpinCount: DWORD, Flags: DWORD } ],
  SetCriticalSectionSpinCount: [ ulong, { lpCriticalSection: LPCRITICAL_SECTION, dwSpinCount: DWORD } ],
  TryEnterCriticalSection: [ int, { lpCriticalSection: LPCRITICAL_SECTION } ],
  DeleteCriticalSection: [ VoidT, { lpCriticalSection: LPCRITICAL_SECTION } ],
  SetEvent: [ int, { hEvent: HANDLE } ],
  ResetEvent: [ int, { hEvent: HANDLE } ],
  PulseEvent: [ int, { hEvent: HANDLE } ],
  ReleaseSemaphore: [ int, { hSemaphore: HANDLE, lReleaseCount: LONG, lpPreviousCount: LPLONG } ],
  ReleaseMutex: [ int, { hMutex: HANDLE } ],
  WaitForSingleObject: [ ulong, { hHandle: HANDLE, dwMilliseconds: DWORD } ],
  WaitForMultipleObjects: [ ulong, { nCount: DWORD, lpHandles: VoidT.Δ.Δ, bWaitAll: BOOL, dwMilliseconds: DWORD } ],
  Sleep: [ VoidT, { dwMilliseconds: DWORD } ],
  LoadResource: [ VoidT.Δ, { hModule: HMODULE, hResInfo: HRSRC } ],
  SizeofResource: [ ulong, { hModule: HMODULE, hResInfo: HRSRC } ],
  GlobalDeleteAtom: [ ushort, { nAtom: ATOM } ],
  InitAtomTable: [ int, { nSize: DWORD } ],
  DeleteAtom: [ ushort, { nAtom: ATOM } ],
  SetHandleCount: [ uint, { uNumber: UINT } ],
  GetLogicalDrives: [ ulong, {  } ],
  LockFile: [ int, { hFile: HANDLE, dwFileOffsetLow: DWORD, dwFileOffsetHigh: DWORD, nNumberOfBytesToLockLow: DWORD, nNumberOfBytesToLockHigh: DWORD } ],
  UnlockFile: [ int, { hFile: HANDLE, dwFileOffsetLow: DWORD, dwFileOffsetHigh: DWORD, nNumberOfBytesToUnlockLow: DWORD, nNumberOfBytesToUnlockHigh: DWORD } ],
  LockFileEx: [ int, { hFile: HANDLE, dwFlags: DWORD, dwReserved: DWORD, nNumberOfBytesToLockLow: DWORD, nNumberOfBytesToLockHigh: DWORD, lpOverlapped: LPOVERLAPPED } ],
  UnlockFileEx: [ int, { hFile: HANDLE, dwReserved: DWORD, nNumberOfBytesToUnlockLow: DWORD, nNumberOfBytesToUnlockHigh: DWORD, lpOverlapped: LPOVERLAPPED } ],
  GetFileInformationByHandle: [ int, { hFile: HANDLE, lpFileInformation: LPBY_HANDLE_FILE_INFORMATION } ],
  GetFileType: [ ulong, { hFile: HANDLE } ],
  GetFileSize: [ ulong, { hFile: HANDLE, lpFileSizeHigh: LPDWORD } ],
  GetFileSizeEx: [ int, { hFile: HANDLE, lpFileSize: PLARGE_INTEGER } ],
  GetStdHandle: [ VoidT.Δ, { nStdHandle: DWORD } ],
  SetStdHandle: [ int, { nStdHandle: DWORD, hHandle: HANDLE } ],
  SetStdHandleEx: [ int, { nStdHandle: DWORD, hHandle: HANDLE, phPrevValue: PHANDLE } ],
  WriteFile: [ int, { hFile: HANDLE, lpBuffer: LPCVOID, nNumberOfBytesToWrite: DWORD, lpNumberOfBytesWritten: LPDWORD, lpOverlapped: LPOVERLAPPED } ],
  ReadFile: [ int, { hFile: HANDLE, lpBuffer: LPVOID, nNumberOfBytesToRead: DWORD, lpNumberOfBytesRead: LPDWORD, lpOverlapped: LPOVERLAPPED } ],
  FlushFileBuffers: [ int, { hFile: HANDLE } ],
  DeviceIoControl: [ int, { hDevice: HANDLE, dwIoControlCode: DWORD, lpInBuffer: LPVOID, nInBufferSize: DWORD, lpOutBuffer: LPVOID, nOutBufferSize: DWORD, lpBytesReturned: LPDWORD, lpOverlapped: LPOVERLAPPED } ],
  RequestDeviceWakeup: [ int, { hDevice: HANDLE } ],
  CancelDeviceWakeupRequest: [ int, { hDevice: HANDLE } ],
  GetDevicePowerState: [ int, { hDevice: HANDLE, pfOn: int.Δ } ],
  SetMessageWaitingIndicator: [ int, { hMsgIndicator: HANDLE, ulMsgCount: ULONG } ],
  SetEndOfFile: [ int, { hFile: HANDLE } ],
  SetFilePointer: [ ulong, { hFile: HANDLE, lDistanceToMove: LONG, lpDistanceToMoveHigh: PLONG, dwMoveMethod: DWORD } ],
  SetFilePointerEx: [ int, { hFile: HANDLE, liDistanceToMove: LARGE_INTEGER, lpNewFilePointer: PLARGE_INTEGER, dwMoveMethod: DWORD } ],
  FindClose: [ int, { hFindFile: HANDLE } ],
  GetFileTime: [ int, { hFile: HANDLE, lpCreationTime: LPFILETIME, lpLastAccessTime: LPFILETIME, lpLastWriteTime: LPFILETIME } ],
  SetFileTime: [ int, { hFile: HANDLE, lpCreationTime: uint.Δ, lpLastAccessTime: uint.Δ, lpLastWriteTime: uint.Δ } ],
  SetFileValidData: [ int, { hFile: HANDLE, ValidDataLength: LONGLONG } ],
  SetFileShortNameA: [ int, { hFile: HANDLE, lpShortName: LPCSTR } ],
  SetFileShortNameW: [ int, { hFile: HANDLE, lpShortName: LPCWSTR } ],
  CloseHandle: [ int, { hObject: HANDLE } ],
  DuplicateHandle: [ int, { hSourceProcessHandle: HANDLE, hSourceHandle: HANDLE, hTargetProcessHandle: HANDLE, lpTargetHandle: LPHANDLE, dwDesiredAccess: DWORD, bInheritHandle: BOOL, dwOptions: DWORD } ],
  GetHandleInformation: [ int, { hObject: HANDLE, lpdwFlags: LPDWORD } ],
  SetHandleInformation: [ int, { hObject: HANDLE, dwMask: DWORD, dwFlags: DWORD } ],
  LoadModule: [ ulong, { lpModuleName: LPCSTR, lpParameterBlock: LPVOID } ],
  WinExec: [ uint, { lpCmdLine: LPCSTR, uCmdShow: UINT } ],
  ClearCommBreak: [ int, { hFile: HANDLE } ],
  ClearCommError: [ int, { hFile: HANDLE, lpErrors: LPDWORD, lpStat: LPCOMSTAT } ],
  SetupComm: [ int, { hFile: HANDLE, dwInQueue: DWORD, dwOutQueue: DWORD } ],
  EscapeCommFunction: [ int, { hFile: HANDLE, dwFunc: DWORD } ],
  GetCommConfig: [ int, { hCommDev: HANDLE, lpCC: LPCOMMCONFIG, lpdwSize: LPDWORD } ],
  GetCommMask: [ int, { hFile: HANDLE, lpEvtMask: LPDWORD } ],
  GetCommProperties: [ int, { hFile: HANDLE, lpCommProp: LPCOMMPROP } ],
  GetCommModemStatus: [ int, { hFile: HANDLE, lpModemStat: LPDWORD } ],
  GetCommState: [ int, { hFile: HANDLE, lpDCB: LPDCB } ],
  GetCommTimeouts: [ int, { hFile: HANDLE, lpCommTimeouts: LPCOMMTIMEOUTS } ],
  PurgeComm: [ int, { hFile: HANDLE, dwFlags: DWORD } ],
  SetCommBreak: [ int, { hFile: HANDLE } ],
  SetCommConfig: [ int, { hCommDev: HANDLE, lpCC: LPCOMMCONFIG, dwSize: DWORD } ],
  SetCommMask: [ int, { hFile: HANDLE, dwEvtMask: DWORD } ],
  SetCommState: [ int, { hFile: HANDLE, lpDCB: LPDCB } ],
  SetCommTimeouts: [ int, { hFile: HANDLE, lpCommTimeouts: LPCOMMTIMEOUTS } ],
  TransmitCommChar: [ int, { hFile: HANDLE, cChar: int8 } ],
  WaitCommEvent: [ int, { hFile: HANDLE, lpEvtMask: LPDWORD, lpOverlapped: LPOVERLAPPED } ],
  SetTapePosition: [ ulong, { hDevice: HANDLE, dwPositionMethod: DWORD, dwPartition: DWORD, dwOffsetLow: DWORD, dwOffsetHigh: DWORD, bImmediate: BOOL } ],
  GetTapePosition: [ ulong, { hDevice: HANDLE, dwPositionType: DWORD, lpdwPartition: LPDWORD, lpdwOffsetLow: LPDWORD, lpdwOffsetHigh: LPDWORD } ],
  PrepareTape: [ ulong, { hDevice: HANDLE, dwOperation: DWORD, bImmediate: BOOL } ],
  EraseTape: [ ulong, { hDevice: HANDLE, dwEraseType: DWORD, bImmediate: BOOL } ],
  CreateTapePartition: [ ulong, { hDevice: HANDLE, dwPartitionMethod: DWORD, dwCount: DWORD, dwSize: DWORD } ],
  WriteTapemark: [ ulong, { hDevice: HANDLE, dwTapemarkType: DWORD, dwTapemarkCount: DWORD, bImmediate: BOOL } ],
  GetTapeStatus: [ ulong, { hDevice: HANDLE } ],
  GetTapeParameters: [ ulong, { hDevice: HANDLE, dwOperation: DWORD, lpdwSize: LPDWORD, lpTapeInformation: LPVOID } ],
  SetTapeParameters: [ ulong, { hDevice: HANDLE, dwOperation: DWORD, lpTapeInformation: LPVOID } ],
  Beep: [ int, { dwFreq: DWORD, dwDuration: DWORD } ],
  MulDiv: [ VoidT, { nNumber: int, nNumerator: int, nDenominator: int } ],
  GetSystemTime: [ VoidT, { lpSystemTime: LPSYSTEMTIME } ],
  GetSystemTimeAsFileTime: [ VoidT, { lpSystemTimeAsFileTime: LPFILETIME } ],
  SetSystemTime: [ int, { lpSystemTime: uint.Δ } ],
  GetLocalTime: [ VoidT, { lpSystemTime: LPSYSTEMTIME } ],
  SetLocalTime: [ int, { lpSystemTime: uint.Δ } ],
  GetSystemInfo: [ VoidT, { lpSystemInfo: LPSYSTEM_INFO } ],
  GetSystemDEPPolicy: [ uint, {  } ],
  SetSystemFileCacheSize: [ int, { MinimumFileCacheSize: SIZE_T, MaximumFileCacheSize: SIZE_T, Flags: DWORD } ],
  GetSystemFileCacheSize: [ int, { lpMinimumFileCacheSize: PSIZE_T, lpMaximumFileCacheSize: PSIZE_T, lpFlags: PDWORD } ],
  GetSystemRegistryQuota: [ int, { pdwQuotaAllowed: PDWORD, pdwQuotaUsed: PDWORD } ],
  GetSystemTimes: [ int, { lpIdleTime: LPFILETIME, lpKernelTime: LPFILETIME, lpUserTime: LPFILETIME } ],
  GetNativeSystemInfo: [ VoidT, { lpSystemInfo: LPSYSTEM_INFO } ],
  IsProcessorFeaturePresent: [ int, { ProcessorFeature: DWORD } ],
  SystemTimeToTzSpecificLocalTime: [ int, { lpTimeZoneInformation: uint.Δ, lpUniversalTime: uint.Δ, lpLocalTime: LPSYSTEMTIME } ],
  TzSpecificLocalTimeToSystemTime: [ int, { lpTimeZoneInformation: uint.Δ, lpLocalTime: uint.Δ, lpUniversalTime: LPSYSTEMTIME } ],
  GetTimeZoneInformationForYear: [ int, { wYear: USHORT, pdtzi: PDYNAMIC_TIME_ZONE_INFORMATION, ptzi: LPTIME_ZONE_INFORMATION } ],
  GetTimeZoneInformation: [ ulong, { lpTimeZoneInformation: LPTIME_ZONE_INFORMATION } ],
  SetTimeZoneInformation: [ int, { lpTimeZoneInformation: uint.Δ } ],
  GetDynamicTimeZoneInformation: [ ulong, { pTimeZoneInformation: PDYNAMIC_TIME_ZONE_INFORMATION } ],
  SetDynamicTimeZoneInformation: [ int, { lpTimeZoneInformation: uint.Δ } ],
  SystemTimeToFileTime: [ int, { lpSystemTime: uint.Δ, lpFileTime: LPFILETIME } ],
  FileTimeToLocalFileTime: [ int, { lpFileTime: uint.Δ, lpLocalFileTime: LPFILETIME } ],
  LocalFileTimeToFileTime: [ int, { lpLocalFileTime: uint.Δ, lpFileTime: LPFILETIME } ],
  FileTimeToSystemTime: [ int, { lpFileTime: uint.Δ, lpSystemTime: LPSYSTEMTIME } ],
  CompareFileTime: [ long, { lpFileTime1: uint.Δ, lpFileTime2: uint.Δ } ],
  FileTimeToDosDateTime: [ int, { lpFileTime: uint.Δ, lpFatDate: LPWORD, lpFatTime: LPWORD } ],
  DosDateTimeToFileTime: [ int, { wFatDate: WORD, wFatTime: WORD, lpFileTime: LPFILETIME } ],
  GetTickCount: [ ulong, {  } ],
  GetTickCount64: [ ulonglong, {  } ],
  SetSystemTimeAdjustment: [ int, { dwTimeAdjustment: DWORD, bTimeAdjustmentDisabled: BOOL } ],
  GetSystemTimeAdjustment: [ int, { lpTimeAdjustment: PDWORD, lpTimeIncrement: PDWORD, lpTimeAdjustmentDisabled: PBOOL } ],
  FormatMessageA: [ ulong, { dwFlags: DWORD, lpSource: LPCVOID, dwMessageId: DWORD, dwLanguageId: DWORD, lpBuffer: LPSTR, nSize: DWORD, Arguments: int8.Δ.Δ } ],
  FormatMessageW: [ ulong, { dwFlags: DWORD, lpSource: LPCVOID, dwMessageId: DWORD, dwLanguageId: DWORD, lpBuffer: LPWSTR, nSize: DWORD, Arguments: int8.Δ.Δ } ],
  CreatePipe: [ int, { hReadPipe: PHANDLE, hWritePipe: PHANDLE, lpPipeAttributes: LPSECURITY_ATTRIBUTES, nSize: DWORD } ],
  ConnectNamedPipe: [ int, { hNamedPipe: HANDLE, lpOverlapped: LPOVERLAPPED } ],
  DisconnectNamedPipe: [ int, { hNamedPipe: HANDLE } ],
  SetNamedPipeHandleState: [ int, { hNamedPipe: HANDLE, lpMode: LPDWORD, lpMaxCollectionCount: LPDWORD, lpCollectDataTimeout: LPDWORD } ],
  GetNamedPipeInfo: [ int, { hNamedPipe: HANDLE, lpFlags: LPDWORD, lpOutBufferSize: LPDWORD, lpInBufferSize: LPDWORD, lpMaxInstances: LPDWORD } ],
  PeekNamedPipe: [ int, { hNamedPipe: HANDLE, lpBuffer: LPVOID, nBufferSize: DWORD, lpBytesRead: LPDWORD, lpTotalBytesAvail: LPDWORD, lpBytesLeftThisMessage: LPDWORD } ],
  TransactNamedPipe: [ int, { hNamedPipe: HANDLE, lpInBuffer: LPVOID, nInBufferSize: DWORD, lpOutBuffer: LPVOID, nOutBufferSize: DWORD, lpBytesRead: LPDWORD, lpOverlapped: LPOVERLAPPED } ],
  CreateMailslotA: [ VoidT.Δ, { lpName: LPCSTR, nMaxMessageSize: DWORD, lReadTimeout: DWORD, lpSecurityAttributes: LPSECURITY_ATTRIBUTES } ],
  CreateMailslotW: [ VoidT.Δ, { lpName: LPCWSTR, nMaxMessageSize: DWORD, lReadTimeout: DWORD, lpSecurityAttributes: LPSECURITY_ATTRIBUTES } ],
  GetMailslotInfo: [ int, { hMailslot: HANDLE, lpMaxMessageSize: LPDWORD, lpNextSize: LPDWORD, lpMessageCount: LPDWORD, lpReadTimeout: LPDWORD } ],
  SetMailslotInfo: [ int, { hMailslot: HANDLE, lReadTimeout: DWORD } ],
  MapViewOfFile: [ VoidT.Δ, { hFileMappingObject: HANDLE, dwDesiredAccess: DWORD, dwFileOffsetHigh: DWORD, dwFileOffsetLow: DWORD, dwNumberOfBytesToMap: SIZE_T } ],
  FlushViewOfFile: [ int, { lpBaseAddress: LPCVOID, dwNumberOfBytesToFlush: SIZE_T } ],
  UnmapViewOfFile: [ int, { lpBaseAddress: LPCVOID } ],
  EncryptFileA: [ int, { lpFileName: LPCSTR } ],
  EncryptFileW: [ int, { lpFileName: LPCWSTR } ],
  DecryptFileA: [ int, { lpFileName: LPCSTR, dwReserved: DWORD } ],
  DecryptFileW: [ int, { lpFileName: LPCWSTR, dwReserved: DWORD } ],
  FileEncryptionStatusA: [ int, { lpFileName: LPCSTR, lpStatus: LPDWORD } ],
  FileEncryptionStatusW: [ int, { lpFileName: LPCWSTR, lpStatus: LPDWORD } ],
  OpenEncryptedFileRawA: [ ulong, { lpFileName: LPCSTR, ulFlags: ULONG, pvContext: VoidT.Δ.Δ } ],
  OpenEncryptedFileRawW: [ ulong, { lpFileName: LPCWSTR, ulFlags: ULONG, pvContext: VoidT.Δ.Δ } ],
  ReadEncryptedFileRaw: [ ulong, { pfExportCallback: PFE_EXPORT_FUNC, pvCallbackContext: PVOID, pvContext: PVOID } ],
  WriteEncryptedFileRaw: [ ulong, { pfImportCallback: PFE_IMPORT_FUNC, pvCallbackContext: PVOID, pvContext: PVOID } ],
  CloseEncryptedFileRaw: [ VoidT, { pvContext: PVOID } ],
  lstrcmpA: [ VoidT, { lpString1: LPCSTR, lpString2: LPCSTR } ],
  lstrcmpW: [ VoidT, { lpString1: LPCWSTR, lpString2: LPCWSTR } ],
  lstrcmpiA: [ VoidT, { lpString1: LPCSTR, lpString2: LPCSTR } ],
  lstrcmpiW: [ VoidT, { lpString1: LPCWSTR, lpString2: LPCWSTR } ],
  lstrcpynA: [ int8.Δ, { lpString1: LPSTR, lpString2: LPCSTR, iMaxLength: int } ],
  lstrcpynW: [ ushort.Δ, { lpString1: LPWSTR, lpString2: LPCWSTR, iMaxLength: int } ],
  lstrcpyA: [ int8.Δ, { lpString1: LPSTR, lpString2: LPCSTR } ],
  lstrcpyW: [ ushort.Δ, { lpString1: LPWSTR, lpString2: LPCWSTR } ],
  lstrcatA: [ int8.Δ, { lpString1: LPSTR, lpString2: LPCSTR } ],
  lstrcatW: [ ushort.Δ, { lpString1: LPWSTR, lpString2: LPCWSTR } ],
  lstrlenA: [ VoidT, { lpString: LPCSTR } ],
  lstrlenW: [ VoidT, { lpString: LPCWSTR } ],
  OpenFile: [ int, { lpFileName: LPCSTR, lpReOpenBuff: LPOFSTRUCT, uStyle: UINT } ],
  _lopen: [ int, { lpPathName: LPCSTR, iReadWrite: int } ],
  _lcreat: [ int, { lpPathName: LPCSTR, iAttribute: int } ],
  _lread: [ uint, { hFile: HFILE, lpBuffer: LPVOID, uBytes: UINT } ],
  _lwrite: [ uint, { hFile: HFILE, lpBuffer: LPCCH, uBytes: UINT } ],
  _hread: [ VoidT, { hFile: HFILE, lpBuffer: LPVOID, lBytes: long } ],
  _hwrite: [ VoidT, { hFile: HFILE, lpBuffer: LPCCH, lBytes: long } ],
  _lclose: [ int, { hFile: HFILE } ],
  _llseek: [ long, { hFile: HFILE, lOffset: LONG, iOrigin: int } ],
  IsTextUnicode: [ int, { lpv: VoidT.Δ, iSize: int, lpiResult: LPINT } ],
  FlsAlloc: [ ulong, { lpCallback: PFLS_CALLBACK_FUNCTION } ],
  FlsGetValue: [ VoidT.Δ, { dwFlsIndex: DWORD } ],
  FlsSetValue: [ int, { dwFlsIndex: DWORD, lpFlsData: PVOID } ],
  FlsFree: [ int, { dwFlsIndex: DWORD } ],
  TlsAlloc: [ ulong, {  } ],
  TlsGetValue: [ VoidT.Δ, { dwTlsIndex: DWORD } ],
  TlsSetValue: [ int, { dwTlsIndex: DWORD, lpTlsValue: LPVOID } ],
  TlsFree: [ int, { dwTlsIndex: DWORD } ],
  SleepEx: [ ulong, { dwMilliseconds: DWORD, bAlertable: BOOL } ],
  WaitForSingleObjectEx: [ ulong, { hHandle: HANDLE, dwMilliseconds: DWORD, bAlertable: BOOL } ],
  WaitForMultipleObjectsEx: [ ulong, { nCount: DWORD, lpHandles: VoidT.Δ.Δ, bWaitAll: BOOL, dwMilliseconds: DWORD, bAlertable: BOOL } ],
  SignalObjectAndWait: [ ulong, { hObjectToSignal: HANDLE, hObjectToWaitOn: HANDLE, dwMilliseconds: DWORD, bAlertable: BOOL } ],
  ReadFileEx: [ int, { hFile: HANDLE, lpBuffer: LPVOID, nNumberOfBytesToRead: DWORD, lpOverlapped: LPOVERLAPPED, lpCompletionRoutine: LPOVERLAPPED_COMPLETION_ROUTINE } ],
  WriteFileEx: [ int, { hFile: HANDLE, lpBuffer: LPCVOID, nNumberOfBytesToWrite: DWORD, lpOverlapped: LPOVERLAPPED, lpCompletionRoutine: LPOVERLAPPED_COMPLETION_ROUTINE } ],
  BackupRead: [ int, { hFile: HANDLE, lpBuffer: LPBYTE, nNumberOfBytesToRead: DWORD, lpNumberOfBytesRead: LPDWORD, bAbort: BOOL, bProcessSecurity: BOOL, lpContext: VoidT.Δ.Δ } ],
  BackupSeek: [ int, { hFile: HANDLE, dwLowBytesToSeek: DWORD, dwHighBytesToSeek: DWORD, lpdwLowByteSeeked: LPDWORD, lpdwHighByteSeeked: LPDWORD, lpContext: VoidT.Δ.Δ } ],
  BackupWrite: [ int, { hFile: HANDLE, lpBuffer: LPBYTE, nNumberOfBytesToWrite: DWORD, lpNumberOfBytesWritten: LPDWORD, bAbort: BOOL, bProcessSecurity: BOOL, lpContext: VoidT.Δ.Δ } ],
  ReadFileScatter: [ int, { hFile: HANDLE, aSegmentArray: uint.Δ, nNumberOfBytesToRead: DWORD, lpReserved: LPDWORD, lpOverlapped: LPOVERLAPPED } ],
  WriteFileGather: [ int, { hFile: HANDLE, aSegmentArray: uint.Δ, nNumberOfBytesToWrite: DWORD, lpReserved: LPDWORD, lpOverlapped: LPOVERLAPPED } ],
  CreateMutexA: [ VoidT.Δ, { lpMutexAttributes: LPSECURITY_ATTRIBUTES, bInitialOwner: BOOL, lpName: LPCSTR } ],
  CreateMutexW: [ VoidT.Δ, { lpMutexAttributes: LPSECURITY_ATTRIBUTES, bInitialOwner: BOOL, lpName: LPCWSTR } ],
  OpenMutexA: [ VoidT.Δ, { dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCSTR } ],
  OpenMutexW: [ VoidT.Δ, { dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCWSTR } ],
  CreateEventA: [ VoidT.Δ, { lpEventAttributes: LPSECURITY_ATTRIBUTES, bManualReset: BOOL, bInitialState: BOOL, lpName: LPCSTR } ],
  CreateEventW: [ VoidT.Δ, { lpEventAttributes: LPSECURITY_ATTRIBUTES, bManualReset: BOOL, bInitialState: BOOL, lpName: LPCWSTR } ],
  OpenEventA: [ VoidT.Δ, { dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCSTR } ],
  OpenEventW: [ VoidT.Δ, { dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCWSTR } ],
  CreateSemaphoreA: [ VoidT.Δ, { lpSemaphoreAttributes: LPSECURITY_ATTRIBUTES, lInitialCount: LONG, lMaximumCount: LONG, lpName: LPCSTR } ],
  CreateSemaphoreW: [ VoidT.Δ, { lpSemaphoreAttributes: LPSECURITY_ATTRIBUTES, lInitialCount: LONG, lMaximumCount: LONG, lpName: LPCWSTR } ],
  OpenSemaphoreA: [ VoidT.Δ, { dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCSTR } ],
  OpenSemaphoreW: [ VoidT.Δ, { dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCWSTR } ],
  CreateWaitableTimerA: [ VoidT.Δ, { lpTimerAttributes: LPSECURITY_ATTRIBUTES, bManualReset: BOOL, lpTimerName: LPCSTR } ],
  CreateWaitableTimerW: [ VoidT.Δ, { lpTimerAttributes: LPSECURITY_ATTRIBUTES, bManualReset: BOOL, lpTimerName: LPCWSTR } ],
  OpenWaitableTimerA: [ VoidT.Δ, { dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpTimerName: LPCSTR } ],
  OpenWaitableTimerW: [ VoidT.Δ, { dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpTimerName: LPCWSTR } ],
  SetWaitableTimerEx: [ int, { hTimer: HANDLE, lpDueTime: uint.Δ, lPeriod: LONG, pfnCompletionRoutine: PTIMERAPCROUTINE, lpArgToCompletionRoutine: LPVOID, WakeContext: PREASON_CONTEXT, TolerableDelay: ULONG } ],
  SetWaitableTimer: [ int, { hTimer: HANDLE, lpDueTime: uint.Δ, lPeriod: LONG, pfnCompletionRoutine: PTIMERAPCROUTINE, lpArgToCompletionRoutine: LPVOID, fResume: BOOL } ],
  CancelWaitableTimer: [ int, { hTimer: HANDLE } ],
  CreateMutexExA: [ VoidT.Δ, { lpMutexAttributes: LPSECURITY_ATTRIBUTES, lpName: LPCSTR, dwFlags: DWORD, dwDesiredAccess: DWORD } ],
  CreateMutexExW: [ VoidT.Δ, { lpMutexAttributes: LPSECURITY_ATTRIBUTES, lpName: LPCWSTR, dwFlags: DWORD, dwDesiredAccess: DWORD } ],
  CreateEventExA: [ VoidT.Δ, { lpEventAttributes: LPSECURITY_ATTRIBUTES, lpName: LPCSTR, dwFlags: DWORD, dwDesiredAccess: DWORD } ],
  CreateEventExW: [ VoidT.Δ, { lpEventAttributes: LPSECURITY_ATTRIBUTES, lpName: LPCWSTR, dwFlags: DWORD, dwDesiredAccess: DWORD } ],
  CreateSemaphoreExA: [ VoidT.Δ, { lpSemaphoreAttributes: LPSECURITY_ATTRIBUTES, lInitialCount: LONG, lMaximumCount: LONG, lpName: LPCSTR, dwFlags: DWORD, dwDesiredAccess: DWORD } ],
  CreateSemaphoreExW: [ VoidT.Δ, { lpSemaphoreAttributes: LPSECURITY_ATTRIBUTES, lInitialCount: LONG, lMaximumCount: LONG, lpName: LPCWSTR, dwFlags: DWORD, dwDesiredAccess: DWORD } ],
  CreateWaitableTimerExA: [ VoidT.Δ, { lpTimerAttributes: LPSECURITY_ATTRIBUTES, lpTimerName: LPCSTR, dwFlags: DWORD, dwDesiredAccess: DWORD } ],
  CreateWaitableTimerExW: [ VoidT.Δ, { lpTimerAttributes: LPSECURITY_ATTRIBUTES, lpTimerName: LPCWSTR, dwFlags: DWORD, dwDesiredAccess: DWORD } ],
  CreateFileMappingA: [ VoidT.Δ, { hFile: HANDLE, lpFileMappingAttributes: LPSECURITY_ATTRIBUTES, flProtect: DWORD, dwMaximumSizeHigh: DWORD, dwMaximumSizeLow: DWORD, lpName: LPCSTR } ],
  CreateFileMappingW: [ VoidT.Δ, { hFile: HANDLE, lpFileMappingAttributes: LPSECURITY_ATTRIBUTES, flProtect: DWORD, dwMaximumSizeHigh: DWORD, dwMaximumSizeLow: DWORD, lpName: LPCWSTR } ],
  CreateFileMappingNumaA: [ VoidT.Δ, { hFile: HANDLE, lpFileMappingAttributes: LPSECURITY_ATTRIBUTES, flProtect: DWORD, dwMaximumSizeHigh: DWORD, dwMaximumSizeLow: DWORD, lpName: LPCSTR, nndPreferred: DWORD } ],
  CreateFileMappingNumaW: [ VoidT.Δ, { hFile: HANDLE, lpFileMappingAttributes: LPSECURITY_ATTRIBUTES, flProtect: DWORD, dwMaximumSizeHigh: DWORD, dwMaximumSizeLow: DWORD, lpName: LPCWSTR, nndPreferred: DWORD } ],
  OpenFileMappingA: [ VoidT.Δ, { dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCSTR } ],
  OpenFileMappingW: [ VoidT.Δ, { dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCWSTR } ],
  GetLogicalDriveStringsA: [ ulong, { nBufferLength: DWORD, lpBuffer: LPSTR } ],
  GetLogicalDriveStringsW: [ ulong, { nBufferLength: DWORD, lpBuffer: LPWSTR } ],
  CreateMemoryResourceNotification: [ VoidT.Δ, { NotificationType: MEMORY_RESOURCE_NOTIFICATION_TYPE } ],
  QueryMemoryResourceNotification: [ int, { ResourceNotificationHandle: HANDLE, ResourceState: PBOOL } ],
  LoadLibraryA: [ VOIDPTR, { lpLibFileName: LPCSTR } ],
  LoadLibraryW: [ VOIDPTR, { lpLibFileName: LPCWSTR } ],
  LoadLibraryExA: [ VOIDPTR, { lpLibFileName: LPCSTR, hFile: HANDLE, dwFlags: DWORD } ],
  LoadLibraryExW: [ VOIDPTR, { lpLibFileName: LPCWSTR, hFile: HANDLE, dwFlags: DWORD } ],
  GetModuleFileNameA: [ ulong, { hModule: HMODULE, lpFilename: LPSTR, nSize: DWORD } ],
  GetModuleFileNameW: [ ulong, { hModule: HMODULE, lpFilename: LPWSTR, nSize: DWORD } ],
  GetModuleHandleA: [ VOIDPTR, { lpModuleName: LPCSTR } ],
  GetModuleHandleW: [ VOIDPTR, { lpModuleName: LPCWSTR } ],
  GetModuleHandleExA: [ int, { dwFlags: DWORD, lpModuleName: LPCSTR, phModule: VOIDPTR.Δ } ],
  GetModuleHandleExW: [ int, { dwFlags: DWORD, lpModuleName: LPCWSTR, phModule: VOIDPTR.Δ } ],
  NeedCurrentDirectoryForExePathA: [ int, { ExeName: LPCSTR } ],
  NeedCurrentDirectoryForExePathW: [ int, { ExeName: LPCWSTR } ],
  QueryFullProcessImageNameA: [ int, { hProcess: HANDLE, dwFlags: DWORD, lpExeName: LPSTR, lpdwSize: PDWORD } ],
  QueryFullProcessImageNameW: [ int, { hProcess: HANDLE, dwFlags: DWORD, lpExeName: LPWSTR, lpdwSize: PDWORD } ],
  InitializeProcThreadAttributeList: [ int, { lpAttributeList: LPPROC_THREAD_ATTRIBUTE_LIST, dwAttributeCount: DWORD, dwFlags: DWORD, lpSize: PSIZE_T } ],
  DeleteProcThreadAttributeList: [ VoidT, { lpAttributeList: LPPROC_THREAD_ATTRIBUTE_LIST } ],
  UpdateProcThreadAttribute: [ int, { lpAttributeList: LPPROC_THREAD_ATTRIBUTE_LIST, dwFlags: DWORD, Attribute: DWORD_PTR, lpValue: PVOID, cbSize: SIZE_T, lpPreviousValue: PVOID, lpReturnSize: PSIZE_T } ],
  CreateProcessA: [ int, { lpApplicationName: LPCSTR, lpCommandLine: LPSTR, lpProcessAttributes: LPSECURITY_ATTRIBUTES, lpThreadAttributes: LPSECURITY_ATTRIBUTES, bInheritHandles: BOOL, dwCreationFlags: DWORD, lpEnvironment: LPVOID, lpCurrentDirectory: LPCSTR, lpStartupInfo: LPSTARTUPINFOA, lpProcessInformation: LPPROCESS_INFORMATION } ],
  CreateProcessW: [ int, { lpApplicationName: LPCWSTR, lpCommandLine: LPWSTR, lpProcessAttributes: LPSECURITY_ATTRIBUTES, lpThreadAttributes: LPSECURITY_ATTRIBUTES, bInheritHandles: BOOL, dwCreationFlags: DWORD, lpEnvironment: LPVOID, lpCurrentDirectory: LPCWSTR, lpStartupInfo: LPSTARTUPINFOW, lpProcessInformation: LPPROCESS_INFORMATION } ],
  SetProcessShutdownParameters: [ int, { dwLevel: DWORD, dwFlags: DWORD } ],
  GetProcessShutdownParameters: [ int, { lpdwLevel: LPDWORD, lpdwFlags: LPDWORD } ],
  GetProcessVersion: [ ulong, { ProcessId: DWORD } ],
  FatalAppExitA: [ VoidT, { uAction: UINT, lpMessageText: LPCSTR } ],
  FatalAppExitW: [ VoidT, { uAction: UINT, lpMessageText: LPCWSTR } ],
  GetStartupInfoA: [ VoidT, { lpStartupInfo: LPSTARTUPINFOA } ],
  GetStartupInfoW: [ VoidT, { lpStartupInfo: LPSTARTUPINFOW } ],
  GetCommandLineA: [ int8.Δ, {  } ],
  GetCommandLineW: [ ushort.Δ, {  } ],
  GetEnvironmentVariableA: [ ulong, { lpName: LPCSTR, lpBuffer: LPSTR, nSize: DWORD } ],
  GetEnvironmentVariableW: [ ulong, { lpName: LPCWSTR, lpBuffer: LPWSTR, nSize: DWORD } ],
  SetEnvironmentVariableA: [ int, { lpName: LPCSTR, lpValue: LPCSTR } ],
  SetEnvironmentVariableW: [ int, { lpName: LPCWSTR, lpValue: LPCWSTR } ],
  ExpandEnvironmentStringsA: [ ulong, { lpSrc: LPCSTR, lpDst: LPSTR, nSize: DWORD } ],
  ExpandEnvironmentStringsW: [ ulong, { lpSrc: LPCWSTR, lpDst: LPWSTR, nSize: DWORD } ],
  GetFirmwareEnvironmentVariableA: [ ulong, { lpName: LPCSTR, lpGuid: LPCSTR, pBuffer: PVOID, nSize: DWORD } ],
  GetFirmwareEnvironmentVariableW: [ ulong, { lpName: LPCWSTR, lpGuid: LPCWSTR, pBuffer: PVOID, nSize: DWORD } ],
  SetFirmwareEnvironmentVariableA: [ int, { lpName: LPCSTR, lpGuid: LPCSTR, pValue: PVOID, nSize: DWORD } ],
  SetFirmwareEnvironmentVariableW: [ int, { lpName: LPCWSTR, lpGuid: LPCWSTR, pValue: PVOID, nSize: DWORD } ],
  OutputDebugStringA: [ VoidT, { lpOutputString: LPCSTR } ],
  OutputDebugStringW: [ VoidT, { lpOutputString: LPCWSTR } ],
  FindResourceA: [ VOIDPTR, { hModule: HMODULE, lpName: LPCSTR, lpType: LPCSTR } ],
  FindResourceW: [ VOIDPTR, { hModule: HMODULE, lpName: LPCWSTR, lpType: LPCWSTR } ],
  FindResourceExA: [ VOIDPTR, { hModule: HMODULE, lpType: LPCSTR, lpName: LPCSTR, wLanguage: WORD } ],
  FindResourceExW: [ VOIDPTR, { hModule: HMODULE, lpType: LPCWSTR, lpName: LPCWSTR, wLanguage: WORD } ],
  EnumResourceTypesA: [ int, { hModule: HMODULE, lpEnumFunc: ENUMRESTYPEPROCA, lParam: LONG_PTR } ],
  EnumResourceTypesW: [ int, { hModule: HMODULE, lpEnumFunc: ENUMRESTYPEPROCW, lParam: LONG_PTR } ],
  EnumResourceNamesA: [ int, { hModule: HMODULE, lpType: LPCSTR, lpEnumFunc: ENUMRESNAMEPROCA, lParam: LONG_PTR } ],
  EnumResourceNamesW: [ int, { hModule: HMODULE, lpType: LPCWSTR, lpEnumFunc: ENUMRESNAMEPROCW, lParam: LONG_PTR } ],
  EnumResourceLanguagesA: [ int, { hModule: HMODULE, lpType: LPCSTR, lpName: LPCSTR, lpEnumFunc: ENUMRESLANGPROCA, lParam: LONG_PTR } ],
  EnumResourceLanguagesW: [ int, { hModule: HMODULE, lpType: LPCWSTR, lpName: LPCWSTR, lpEnumFunc: ENUMRESLANGPROCW, lParam: LONG_PTR } ],
  EnumResourceTypesExA: [ int, { hModule: HMODULE, lpEnumFunc: ENUMRESTYPEPROCA, lParam: LONG_PTR, dwFlags: DWORD, LangId: LANGID } ],
  EnumResourceTypesExW: [ int, { hModule: HMODULE, lpEnumFunc: ENUMRESTYPEPROCW, lParam: LONG_PTR, dwFlags: DWORD, LangId: LANGID } ],
  EnumResourceNamesExA: [ int, { hModule: HMODULE, lpType: LPCSTR, lpEnumFunc: ENUMRESNAMEPROCA, lParam: LONG_PTR, dwFlags: DWORD, LangId: LANGID } ],
  EnumResourceNamesExW: [ int, { hModule: HMODULE, lpType: LPCWSTR, lpEnumFunc: ENUMRESNAMEPROCW, lParam: LONG_PTR, dwFlags: DWORD, LangId: LANGID } ],
  EnumResourceLanguagesExA: [ int, { hModule: HMODULE, lpType: LPCSTR, lpName: LPCSTR, lpEnumFunc: ENUMRESLANGPROCA, lParam: LONG_PTR, dwFlags: DWORD, LangId: LANGID } ],
  EnumResourceLanguagesExW: [ int, { hModule: HMODULE, lpType: LPCWSTR, lpName: LPCWSTR, lpEnumFunc: ENUMRESLANGPROCW, lParam: LONG_PTR, dwFlags: DWORD, LangId: LANGID } ],
  BeginUpdateResourceA: [ VoidT.Δ, { pFileName: LPCSTR, bDeleteExistingResources: BOOL } ],
  BeginUpdateResourceW: [ VoidT.Δ, { pFileName: LPCWSTR, bDeleteExistingResources: BOOL } ],
  UpdateResourceA: [ int, { hUpdate: HANDLE, lpType: LPCSTR, lpName: LPCSTR, wLanguage: WORD, lpData: LPVOID, cb: DWORD } ],
  UpdateResourceW: [ int, { hUpdate: HANDLE, lpType: LPCWSTR, lpName: LPCWSTR, wLanguage: WORD, lpData: LPVOID, cb: DWORD } ],
  EndUpdateResourceA: [ int, { hUpdate: HANDLE, fDiscard: BOOL } ],
  EndUpdateResourceW: [ int, { hUpdate: HANDLE, fDiscard: BOOL } ],
  GlobalAddAtomA: [ ushort, { lpString: LPCSTR } ],
  GlobalAddAtomW: [ ushort, { lpString: LPCWSTR } ],
  GlobalFindAtomA: [ ushort, { lpString: LPCSTR } ],
  GlobalFindAtomW: [ ushort, { lpString: LPCWSTR } ],
  GlobalGetAtomNameA: [ uint, { nAtom: ATOM, lpBuffer: LPSTR, nSize: int } ],
  GlobalGetAtomNameW: [ uint, { nAtom: ATOM, lpBuffer: LPWSTR, nSize: int } ],
  AddAtomA: [ ushort, { lpString: LPCSTR } ],
  AddAtomW: [ ushort, { lpString: LPCWSTR } ],
  FindAtomA: [ ushort, { lpString: LPCSTR } ],
  FindAtomW: [ ushort, { lpString: LPCWSTR } ],
  GetAtomNameA: [ uint, { nAtom: ATOM, lpBuffer: LPSTR, nSize: int } ],
  GetAtomNameW: [ uint, { nAtom: ATOM, lpBuffer: LPWSTR, nSize: int } ],
  GetProfileIntA: [ uint, { lpAppName: LPCSTR, lpKeyName: LPCSTR, nDefault: INT } ],
  GetProfileIntW: [ uint, { lpAppName: LPCWSTR, lpKeyName: LPCWSTR, nDefault: INT } ],
  GetProfileStringA: [ ulong, { lpAppName: LPCSTR, lpKeyName: LPCSTR, lpDefault: LPCSTR, lpReturnedString: LPSTR, nSize: DWORD } ],
  GetProfileStringW: [ ulong, { lpAppName: LPCWSTR, lpKeyName: LPCWSTR, lpDefault: LPCWSTR, lpReturnedString: LPWSTR, nSize: DWORD } ],
  WriteProfileStringA: [ int, { lpAppName: LPCSTR, lpKeyName: LPCSTR, lpString: LPCSTR } ],
  WriteProfileStringW: [ int, { lpAppName: LPCWSTR, lpKeyName: LPCWSTR, lpString: LPCWSTR } ],
  GetProfileSectionA: [ ulong, { lpAppName: LPCSTR, lpReturnedString: LPSTR, nSize: DWORD } ],
  GetProfileSectionW: [ ulong, { lpAppName: LPCWSTR, lpReturnedString: LPWSTR, nSize: DWORD } ],
  WriteProfileSectionA: [ int, { lpAppName: LPCSTR, lpString: LPCSTR } ],
  WriteProfileSectionW: [ int, { lpAppName: LPCWSTR, lpString: LPCWSTR } ],
  GetPrivateProfileIntA: [ uint, { lpAppName: LPCSTR, lpKeyName: LPCSTR, nDefault: INT, lpFileName: LPCSTR } ],
  GetPrivateProfileIntW: [ uint, { lpAppName: LPCWSTR, lpKeyName: LPCWSTR, nDefault: INT, lpFileName: LPCWSTR } ],
  GetPrivateProfileStringA: [ ulong, { lpAppName: LPCSTR, lpKeyName: LPCSTR, lpDefault: LPCSTR, lpReturnedString: LPSTR, nSize: DWORD, lpFileName: LPCSTR } ],
  GetPrivateProfileStringW: [ ulong, { lpAppName: LPCWSTR, lpKeyName: LPCWSTR, lpDefault: LPCWSTR, lpReturnedString: LPWSTR, nSize: DWORD, lpFileName: LPCWSTR } ],
  WritePrivateProfileStringA: [ int, { lpAppName: LPCSTR, lpKeyName: LPCSTR, lpString: LPCSTR, lpFileName: LPCSTR } ],
  WritePrivateProfileStringW: [ int, { lpAppName: LPCWSTR, lpKeyName: LPCWSTR, lpString: LPCWSTR, lpFileName: LPCWSTR } ],
  GetPrivateProfileSectionA: [ ulong, { lpAppName: LPCSTR, lpReturnedString: LPSTR, nSize: DWORD, lpFileName: LPCSTR } ],
  GetPrivateProfileSectionW: [ ulong, { lpAppName: LPCWSTR, lpReturnedString: LPWSTR, nSize: DWORD, lpFileName: LPCWSTR } ],
  WritePrivateProfileSectionA: [ int, { lpAppName: LPCSTR, lpString: LPCSTR, lpFileName: LPCSTR } ],
  WritePrivateProfileSectionW: [ int, { lpAppName: LPCWSTR, lpString: LPCWSTR, lpFileName: LPCWSTR } ],
  GetPrivateProfileSectionNamesA: [ ulong, { lpszReturnBuffer: LPSTR, nSize: DWORD, lpFileName: LPCSTR } ],
  GetPrivateProfileSectionNamesW: [ ulong, { lpszReturnBuffer: LPWSTR, nSize: DWORD, lpFileName: LPCWSTR } ],
  GetPrivateProfileStructA: [ int, { lpszSection: LPCSTR, lpszKey: LPCSTR, lpStruct: LPVOID, uSizeStruct: UINT, szFile: LPCSTR } ],
  GetPrivateProfileStructW: [ int, { lpszSection: LPCWSTR, lpszKey: LPCWSTR, lpStruct: LPVOID, uSizeStruct: UINT, szFile: LPCWSTR } ],
  WritePrivateProfileStructA: [ int, { lpszSection: LPCSTR, lpszKey: LPCSTR, lpStruct: LPVOID, uSizeStruct: UINT, szFile: LPCSTR } ],
  WritePrivateProfileStructW: [ int, { lpszSection: LPCWSTR, lpszKey: LPCWSTR, lpStruct: LPVOID, uSizeStruct: UINT, szFile: LPCWSTR } ],
  GetDriveTypeA: [ uint, { lpRootPathName: LPCSTR } ],
  GetDriveTypeW: [ uint, { lpRootPathName: LPCWSTR } ],
  GetSystemDirectoryA: [ uint, { lpBuffer: LPSTR, uSize: UINT } ],
  GetSystemDirectoryW: [ uint, { lpBuffer: LPWSTR, uSize: UINT } ],
  GetTempPathA: [ ulong, { nBufferLength: DWORD, lpBuffer: LPSTR } ],
  GetTempPathW: [ ulong, { nBufferLength: DWORD, lpBuffer: LPWSTR } ],
  GetTempFileNameA: [ uint, { lpPathName: LPCSTR, lpPrefixString: LPCSTR, uUnique: UINT, lpTempFileName: LPSTR } ],
  GetTempFileNameW: [ uint, { lpPathName: LPCWSTR, lpPrefixString: LPCWSTR, uUnique: UINT, lpTempFileName: LPWSTR } ],
  GetWindowsDirectoryA: [ uint, { lpBuffer: LPSTR, uSize: UINT } ],
  GetWindowsDirectoryW: [ uint, { lpBuffer: LPWSTR, uSize: UINT } ],
  GetSystemWindowsDirectoryA: [ uint, { lpBuffer: LPSTR, uSize: UINT } ],
  GetSystemWindowsDirectoryW: [ uint, { lpBuffer: LPWSTR, uSize: UINT } ],
  GetSystemWow64DirectoryA: [ uint, { lpBuffer: LPSTR, uSize: UINT } ],
  GetSystemWow64DirectoryW: [ uint, { lpBuffer: LPWSTR, uSize: UINT } ],
  Wow64EnableWow64FsRedirection: [ uchar, { Wow64FsEnableRedirection: BOOLEAN } ],
  Wow64DisableWow64FsRedirection: [ int, { OldValue: VoidT.Δ.Δ } ],
  Wow64RevertWow64FsRedirection: [ int, { OlValue: PVOID } ],
  SetCurrentDirectoryA: [ int, { lpPathName: LPCSTR } ],
  SetCurrentDirectoryW: [ int, { lpPathName: LPCWSTR } ],
  GetCurrentDirectoryA: [ ulong, { nBufferLength: DWORD, lpBuffer: LPSTR } ],
  GetCurrentDirectoryW: [ ulong, { nBufferLength: DWORD, lpBuffer: LPWSTR } ],
  SetDllDirectoryA: [ int, { lpPathName: LPCSTR } ],
  SetDllDirectoryW: [ int, { lpPathName: LPCWSTR } ],
  GetDllDirectoryA: [ ulong, { nBufferLength: DWORD, lpBuffer: LPSTR } ],
  GetDllDirectoryW: [ ulong, { nBufferLength: DWORD, lpBuffer: LPWSTR } ],
  SetSearchPathMode: [ int, { Flags: DWORD } ],
  GetDiskFreeSpaceA: [ int, { lpRootPathName: LPCSTR, lpSectorsPerCluster: LPDWORD, lpBytesPerSector: LPDWORD, lpNumberOfFreeClusters: LPDWORD, lpTotalNumberOfClusters: LPDWORD } ],
  GetDiskFreeSpaceW: [ int, { lpRootPathName: LPCWSTR, lpSectorsPerCluster: LPDWORD, lpBytesPerSector: LPDWORD, lpNumberOfFreeClusters: LPDWORD, lpTotalNumberOfClusters: LPDWORD } ],
  GetDiskFreeSpaceExA: [ int, { lpDirectoryName: LPCSTR, lpFreeBytesAvailableToCaller: PULARGE_INTEGER, lpTotalNumberOfBytes: PULARGE_INTEGER, lpTotalNumberOfFreeBytes: PULARGE_INTEGER } ],
  GetDiskFreeSpaceExW: [ int, { lpDirectoryName: LPCWSTR, lpFreeBytesAvailableToCaller: PULARGE_INTEGER, lpTotalNumberOfBytes: PULARGE_INTEGER, lpTotalNumberOfFreeBytes: PULARGE_INTEGER } ],
  CreateDirectoryA: [ int, { lpPathName: LPCSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES } ],
  CreateDirectoryW: [ int, { lpPathName: LPCWSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES } ],
  CreateDirectoryExA: [ int, { lpTemplateDirectory: LPCSTR, lpNewDirectory: LPCSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES } ],
  CreateDirectoryExW: [ int, { lpTemplateDirectory: LPCWSTR, lpNewDirectory: LPCWSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES } ],
  CreateDirectoryTransactedA: [ int, { lpTemplateDirectory: LPCSTR, lpNewDirectory: LPCSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, hTransaction: HANDLE } ],
  CreateDirectoryTransactedW: [ int, { lpTemplateDirectory: LPCWSTR, lpNewDirectory: LPCWSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, hTransaction: HANDLE } ],
  RemoveDirectoryA: [ int, { lpPathName: LPCSTR } ],
  RemoveDirectoryW: [ int, { lpPathName: LPCWSTR } ],
  RemoveDirectoryTransactedA: [ int, { lpPathName: LPCSTR, hTransaction: HANDLE } ],
  RemoveDirectoryTransactedW: [ int, { lpPathName: LPCWSTR, hTransaction: HANDLE } ],
  GetFullPathNameA: [ ulong, { lpFileName: LPCSTR, nBufferLength: DWORD, lpBuffer: LPSTR, lpFilePart: int8.Δ.Δ } ],
  GetFullPathNameW: [ ulong, { lpFileName: LPCWSTR, nBufferLength: DWORD, lpBuffer: LPWSTR, lpFilePart: ushort.Δ.Δ } ],
  GetFullPathNameTransactedA: [ ulong, { lpFileName: LPCSTR, nBufferLength: DWORD, lpBuffer: LPSTR, lpFilePart: int8.Δ.Δ, hTransaction: HANDLE } ],
  GetFullPathNameTransactedW: [ ulong, { lpFileName: LPCWSTR, nBufferLength: DWORD, lpBuffer: LPWSTR, lpFilePart: ushort.Δ.Δ, hTransaction: HANDLE } ],
  DefineDosDeviceA: [ int, { dwFlags: DWORD, lpDeviceName: LPCSTR, lpTargetPath: LPCSTR } ],
  DefineDosDeviceW: [ int, { dwFlags: DWORD, lpDeviceName: LPCWSTR, lpTargetPath: LPCWSTR } ],
  QueryDosDeviceA: [ ulong, { lpDeviceName: LPCSTR, lpTargetPath: LPSTR, ucchMax: DWORD } ],
  QueryDosDeviceW: [ ulong, { lpDeviceName: LPCWSTR, lpTargetPath: LPWSTR, ucchMax: DWORD } ],
  CreateFileA: [ VoidT.Δ, { lpFileName: LPCSTR, dwDesiredAccess: DWORD, dwShareMode: DWORD, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, dwCreationDisposition: DWORD, dwFlagsAndAttributes: DWORD, hTemplateFile: HANDLE } ],
  CreateFileW: [ VoidT.Δ, { lpFileName: LPCWSTR, dwDesiredAccess: DWORD, dwShareMode: DWORD, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, dwCreationDisposition: DWORD, dwFlagsAndAttributes: DWORD, hTemplateFile: HANDLE } ],
  CreateFileTransactedA: [ VoidT.Δ, { lpFileName: LPCSTR, dwDesiredAccess: DWORD, dwShareMode: DWORD, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, dwCreationDisposition: DWORD, dwFlagsAndAttributes: DWORD, hTemplateFile: HANDLE, hTransaction: HANDLE, pusMiniVersion: PUSHORT, lpExtendedParameter: PVOID } ],
  CreateFileTransactedW: [ VoidT.Δ, { lpFileName: LPCWSTR, dwDesiredAccess: DWORD, dwShareMode: DWORD, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, dwCreationDisposition: DWORD, dwFlagsAndAttributes: DWORD, hTemplateFile: HANDLE, hTransaction: HANDLE, pusMiniVersion: PUSHORT, lpExtendedParameter: PVOID } ],
  ReOpenFile: [ VoidT.Δ, { hOriginalFile: HANDLE, dwDesiredAccess: DWORD, dwShareMode: DWORD, dwFlagsAndAttributes: DWORD } ],
  SetFileAttributesA: [ int, { lpFileName: LPCSTR, dwFileAttributes: DWORD } ],
  SetFileAttributesW: [ int, { lpFileName: LPCWSTR, dwFileAttributes: DWORD } ],
  GetFileAttributesA: [ ulong, { lpFileName: LPCSTR } ],
  GetFileAttributesW: [ ulong, { lpFileName: LPCWSTR } ],
  SetFileAttributesTransactedA: [ int, { lpFileName: LPCSTR, dwFileAttributes: DWORD, hTransaction: HANDLE } ],
  SetFileAttributesTransactedW: [ int, { lpFileName: LPCWSTR, dwFileAttributes: DWORD, hTransaction: HANDLE } ],
  GetFileAttributesTransactedA: [ int, { lpFileName: LPCSTR, fInfoLevelId: GET_FILEEX_INFO_LEVELS, lpFileInformation: LPVOID, hTransaction: HANDLE } ],
  GetFileAttributesTransactedW: [ int, { lpFileName: LPCWSTR, fInfoLevelId: GET_FILEEX_INFO_LEVELS, lpFileInformation: LPVOID, hTransaction: HANDLE } ],
  GetFileAttributesExA: [ int, { lpFileName: LPCSTR, fInfoLevelId: GET_FILEEX_INFO_LEVELS, lpFileInformation: LPVOID } ],
  GetFileAttributesExW: [ int, { lpFileName: LPCWSTR, fInfoLevelId: GET_FILEEX_INFO_LEVELS, lpFileInformation: LPVOID } ],
  GetCompressedFileSizeA: [ ulong, { lpFileName: LPCSTR, lpFileSizeHigh: LPDWORD } ],
  GetCompressedFileSizeW: [ ulong, { lpFileName: LPCWSTR, lpFileSizeHigh: LPDWORD } ],
  GetCompressedFileSizeTransactedA: [ ulong, { lpFileName: LPCSTR, lpFileSizeHigh: LPDWORD, hTransaction: HANDLE } ],
  GetCompressedFileSizeTransactedW: [ ulong, { lpFileName: LPCWSTR, lpFileSizeHigh: LPDWORD, hTransaction: HANDLE } ],
  DeleteFileA: [ int, { lpFileName: LPCSTR } ],
  DeleteFileW: [ int, { lpFileName: LPCWSTR } ],
  DeleteFileTransactedA: [ int, { lpFileName: LPCSTR, hTransaction: HANDLE } ],
  DeleteFileTransactedW: [ int, { lpFileName: LPCWSTR, hTransaction: HANDLE } ],
  CheckNameLegalDOS8Dot3A: [ int, { lpName: LPCSTR, lpOemName: LPSTR, OemNameSize: DWORD, pbNameContainsSpaces: PBOOL, pbNameLegal: PBOOL } ],
  CheckNameLegalDOS8Dot3W: [ int, { lpName: LPCWSTR, lpOemName: LPSTR, OemNameSize: DWORD, pbNameContainsSpaces: PBOOL, pbNameLegal: PBOOL } ],
  FindFirstFileExA: [ VoidT.Δ, { lpFileName: LPCSTR, fInfoLevelId: FINDEX_INFO_LEVELS, lpFindFileData: LPVOID, fSearchOp: FINDEX_SEARCH_OPS, lpSearchFilter: LPVOID, dwAdditionalFlags: DWORD } ],
  FindFirstFileExW: [ VoidT.Δ, { lpFileName: LPCWSTR, fInfoLevelId: FINDEX_INFO_LEVELS, lpFindFileData: LPVOID, fSearchOp: FINDEX_SEARCH_OPS, lpSearchFilter: LPVOID, dwAdditionalFlags: DWORD } ],
  FindFirstFileTransactedA: [ VoidT.Δ, { lpFileName: LPCSTR, fInfoLevelId: FINDEX_INFO_LEVELS, lpFindFileData: LPVOID, fSearchOp: FINDEX_SEARCH_OPS, lpSearchFilter: LPVOID, dwAdditionalFlags: DWORD, hTransaction: HANDLE } ],
  FindFirstFileTransactedW: [ VoidT.Δ, { lpFileName: LPCWSTR, fInfoLevelId: FINDEX_INFO_LEVELS, lpFindFileData: LPVOID, fSearchOp: FINDEX_SEARCH_OPS, lpSearchFilter: LPVOID, dwAdditionalFlags: DWORD, hTransaction: HANDLE } ],
  FindFirstFileA: [ VoidT.Δ, { lpFileName: LPCSTR, lpFindFileData: LPWIN32_FIND_DATAA } ],
  FindFirstFileW: [ VoidT.Δ, { lpFileName: LPCWSTR, lpFindFileData: LPWIN32_FIND_DATAW } ],
  FindNextFileA: [ int, { hFindFile: HANDLE, lpFindFileData: LPWIN32_FIND_DATAA } ],
  FindNextFileW: [ int, { hFindFile: HANDLE, lpFindFileData: LPWIN32_FIND_DATAW } ],
  SearchPathA: [ ulong, { lpPath: LPCSTR, lpFileName: LPCSTR, lpExtension: LPCSTR, nBufferLength: DWORD, lpBuffer: LPSTR, lpFilePart: int8.Δ.Δ } ],
  SearchPathW: [ ulong, { lpPath: LPCWSTR, lpFileName: LPCWSTR, lpExtension: LPCWSTR, nBufferLength: DWORD, lpBuffer: LPWSTR, lpFilePart: ushort.Δ.Δ } ],
  CopyFileA: [ int, { lpExistingFileName: LPCSTR, lpNewFileName: LPCSTR, bFailIfExists: BOOL } ],
  CopyFileW: [ int, { lpExistingFileName: LPCWSTR, lpNewFileName: LPCWSTR, bFailIfExists: BOOL } ],
  CopyFileExA: [ int, { lpExistingFileName: LPCSTR, lpNewFileName: LPCSTR, lpProgressRoutine: LPPROGRESS_ROUTINE, lpData: LPVOID, pbCancel: LPBOOL, dwCopyFlags: DWORD } ],
  CopyFileExW: [ int, { lpExistingFileName: LPCWSTR, lpNewFileName: LPCWSTR, lpProgressRoutine: LPPROGRESS_ROUTINE, lpData: LPVOID, pbCancel: LPBOOL, dwCopyFlags: DWORD } ],
  CopyFileTransactedA: [ int, { lpExistingFileName: LPCSTR, lpNewFileName: LPCSTR, lpProgressRoutine: LPPROGRESS_ROUTINE, lpData: LPVOID, pbCancel: LPBOOL, dwCopyFlags: DWORD, hTransaction: HANDLE } ],
  CopyFileTransactedW: [ int, { lpExistingFileName: LPCWSTR, lpNewFileName: LPCWSTR, lpProgressRoutine: LPPROGRESS_ROUTINE, lpData: LPVOID, pbCancel: LPBOOL, dwCopyFlags: DWORD, hTransaction: HANDLE } ],
  MoveFileA: [ int, { lpExistingFileName: LPCSTR, lpNewFileName: LPCSTR } ],
  MoveFileW: [ int, { lpExistingFileName: LPCWSTR, lpNewFileName: LPCWSTR } ],
  MoveFileExA: [ int, { lpExistingFileName: LPCSTR, lpNewFileName: LPCSTR, dwFlags: DWORD } ],
  MoveFileExW: [ int, { lpExistingFileName: LPCWSTR, lpNewFileName: LPCWSTR, dwFlags: DWORD } ],
  MoveFileWithProgressA: [ int, { lpExistingFileName: LPCSTR, lpNewFileName: LPCSTR, lpProgressRoutine: LPPROGRESS_ROUTINE, lpData: LPVOID, dwFlags: DWORD } ],
  MoveFileWithProgressW: [ int, { lpExistingFileName: LPCWSTR, lpNewFileName: LPCWSTR, lpProgressRoutine: LPPROGRESS_ROUTINE, lpData: LPVOID, dwFlags: DWORD } ],
  MoveFileTransactedA: [ int, { lpExistingFileName: LPCSTR, lpNewFileName: LPCSTR, lpProgressRoutine: LPPROGRESS_ROUTINE, lpData: LPVOID, dwFlags: DWORD, hTransaction: HANDLE } ],
  MoveFileTransactedW: [ int, { lpExistingFileName: LPCWSTR, lpNewFileName: LPCWSTR, lpProgressRoutine: LPPROGRESS_ROUTINE, lpData: LPVOID, dwFlags: DWORD, hTransaction: HANDLE } ],
  ReplaceFileA: [ int, { lpReplacedFileName: LPCSTR, lpReplacementFileName: LPCSTR, lpBackupFileName: LPCSTR, dwReplaceFlags: DWORD, lpExclude: LPVOID, lpReserved: LPVOID } ],
  ReplaceFileW: [ int, { lpReplacedFileName: LPCWSTR, lpReplacementFileName: LPCWSTR, lpBackupFileName: LPCWSTR, dwReplaceFlags: DWORD, lpExclude: LPVOID, lpReserved: LPVOID } ],
  CreateHardLinkA: [ int, { lpFileName: LPCSTR, lpExistingFileName: LPCSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES } ],
  CreateHardLinkW: [ int, { lpFileName: LPCWSTR, lpExistingFileName: LPCWSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES } ],
  CreateHardLinkTransactedA: [ int, { lpFileName: LPCSTR, lpExistingFileName: LPCSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, hTransaction: HANDLE } ],
  CreateHardLinkTransactedW: [ int, { lpFileName: LPCWSTR, lpExistingFileName: LPCWSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, hTransaction: HANDLE } ],
  FindFirstStreamW: [ VoidT.Δ, { lpFileName: LPCWSTR, InfoLevel: STREAM_INFO_LEVELS, lpFindStreamData: LPVOID, dwFlags: DWORD } ],
  FindFirstStreamTransactedW: [ VoidT.Δ, { lpFileName: LPCWSTR, InfoLevel: STREAM_INFO_LEVELS, lpFindStreamData: LPVOID, dwFlags: DWORD, hTransaction: HANDLE } ],
  FindNextStreamW: [ int, { hFindStream: HANDLE, lpFindStreamData: LPVOID } ],
  FindFirstFileNameW: [ VoidT.Δ, { lpFileName: LPCWSTR, dwFlags: DWORD, StringLength: LPDWORD, LinkName: PWCHAR } ],
  FindNextFileNameW: [ int, { hFindStream: HANDLE, StringLength: LPDWORD, LinkName: PWCHAR } ],
  FindFirstFileNameTransactedW: [ VoidT.Δ, { lpFileName: LPCWSTR, dwFlags: DWORD, StringLength: LPDWORD, LinkName: PWCHAR, hTransaction: HANDLE } ],
  CreateNamedPipeA: [ VoidT.Δ, { lpName: LPCSTR, dwOpenMode: DWORD, dwPipeMode: DWORD, nMaxInstances: DWORD, nOutBufferSize: DWORD, nInBufferSize: DWORD, nDefaultTimeOut: DWORD, lpSecurityAttributes: LPSECURITY_ATTRIBUTES } ],
  CreateNamedPipeW: [ VoidT.Δ, { lpName: LPCWSTR, dwOpenMode: DWORD, dwPipeMode: DWORD, nMaxInstances: DWORD, nOutBufferSize: DWORD, nInBufferSize: DWORD, nDefaultTimeOut: DWORD, lpSecurityAttributes: LPSECURITY_ATTRIBUTES } ],
  GetNamedPipeHandleStateA: [ int, { hNamedPipe: HANDLE, lpState: LPDWORD, lpCurInstances: LPDWORD, lpMaxCollectionCount: LPDWORD, lpCollectDataTimeout: LPDWORD, lpUserName: LPSTR, nMaxUserNameSize: DWORD } ],
  GetNamedPipeHandleStateW: [ int, { hNamedPipe: HANDLE, lpState: LPDWORD, lpCurInstances: LPDWORD, lpMaxCollectionCount: LPDWORD, lpCollectDataTimeout: LPDWORD, lpUserName: LPWSTR, nMaxUserNameSize: DWORD } ],
  CallNamedPipeA: [ int, { lpNamedPipeName: LPCSTR, lpInBuffer: LPVOID, nInBufferSize: DWORD, lpOutBuffer: LPVOID, nOutBufferSize: DWORD, lpBytesRead: LPDWORD, nTimeOut: DWORD } ],
  CallNamedPipeW: [ int, { lpNamedPipeName: LPCWSTR, lpInBuffer: LPVOID, nInBufferSize: DWORD, lpOutBuffer: LPVOID, nOutBufferSize: DWORD, lpBytesRead: LPDWORD, nTimeOut: DWORD } ],
  WaitNamedPipeA: [ int, { lpNamedPipeName: LPCSTR, nTimeOut: DWORD } ],
  WaitNamedPipeW: [ int, { lpNamedPipeName: LPCWSTR, nTimeOut: DWORD } ],
  GetNamedPipeAttribute: [ int, { Pipe: HANDLE, AttributeType: PIPE_ATTRIBUTE_TYPE, AttributeName: PSTR, AttributeValue: PVOID, AttributeValueLength: PSIZE_T } ],
  SetNamedPipeAttribute: [ int, { Pipe: HANDLE, AttributeType: PIPE_ATTRIBUTE_TYPE, AttributeName: PSTR, AttributeValue: PVOID, AttributeValueLength: SIZE_T } ],
  GetNamedPipeClientComputerNameA: [ int, { Pipe: HANDLE, ClientComputerName: LPSTR, ClientComputerNameLength: ULONG } ],
  GetNamedPipeClientComputerNameW: [ int, { Pipe: HANDLE, ClientComputerName: LPWSTR, ClientComputerNameLength: ULONG } ],
  GetNamedPipeClientProcessId: [ int, { Pipe: HANDLE, ClientProcessId: PULONG } ],
  GetNamedPipeClientSessionId: [ int, { Pipe: HANDLE, ClientSessionId: PULONG } ],
  GetNamedPipeServerProcessId: [ int, { Pipe: HANDLE, ServerProcessId: PULONG } ],
  GetNamedPipeServerSessionId: [ int, { Pipe: HANDLE, ServerSessionId: PULONG } ],
  SetVolumeLabelA: [ int, { lpRootPathName: LPCSTR, lpVolumeName: LPCSTR } ],
  SetVolumeLabelW: [ int, { lpRootPathName: LPCWSTR, lpVolumeName: LPCWSTR } ],
  SetFileApisToOEM: [ VoidT, {  } ],
  SetFileApisToANSI: [ VoidT, {  } ],
  AreFileApisANSI: [ int, {  } ],
  GetVolumeInformationA: [ int, { lpRootPathName: LPCSTR, lpVolumeNameBuffer: LPSTR, nVolumeNameSize: DWORD, lpVolumeSerialNumber: LPDWORD, lpMaximumComponentLength: LPDWORD, lpFileSystemFlags: LPDWORD, lpFileSystemNameBuffer: LPSTR, nFileSystemNameSize: DWORD } ],
  GetVolumeInformationW: [ int, { lpRootPathName: LPCWSTR, lpVolumeNameBuffer: LPWSTR, nVolumeNameSize: DWORD, lpVolumeSerialNumber: LPDWORD, lpMaximumComponentLength: LPDWORD, lpFileSystemFlags: LPDWORD, lpFileSystemNameBuffer: LPWSTR, nFileSystemNameSize: DWORD } ],
  GetVolumeInformationByHandleW: [ int, { hFile: HANDLE, lpVolumeNameBuffer: LPWSTR, nVolumeNameSize: DWORD, lpVolumeSerialNumber: LPDWORD, lpMaximumComponentLength: LPDWORD, lpFileSystemFlags: LPDWORD, lpFileSystemNameBuffer: LPWSTR, nFileSystemNameSize: DWORD } ],
  CancelSynchronousIo: [ int, { hThread: HANDLE } ],
  CancelIoEx: [ int, { hFile: HANDLE, lpOverlapped: LPOVERLAPPED } ],
  CancelIo: [ int, { hFile: HANDLE } ],
  SetFileBandwidthReservation: [ int, { hFile: HANDLE, nPeriodMilliseconds: DWORD, nBytesPerPeriod: DWORD, bDiscardable: BOOL, lpTransferSize: LPDWORD, lpNumOutstandingRequests: LPDWORD } ],
  GetFileBandwidthReservation: [ int, { hFile: HANDLE, lpPeriodMilliseconds: LPDWORD, lpBytesPerPeriod: LPDWORD, pDiscardable: LPBOOL, lpTransferSize: LPDWORD, lpNumOutstandingRequests: LPDWORD } ],
  ClearEventLogA: [ int, { hEventLog: HANDLE, lpBackupFileName: LPCSTR } ],
  ClearEventLogW: [ int, { hEventLog: HANDLE, lpBackupFileName: LPCWSTR } ],
  BackupEventLogA: [ int, { hEventLog: HANDLE, lpBackupFileName: LPCSTR } ],
  BackupEventLogW: [ int, { hEventLog: HANDLE, lpBackupFileName: LPCWSTR } ],
  CloseEventLog: [ int, { hEventLog: HANDLE } ],
  DeregisterEventSource: [ int, { hEventLog: HANDLE } ],
  NotifyChangeEventLog: [ int, { hEventLog: HANDLE, hEvent: HANDLE } ],
  GetNumberOfEventLogRecords: [ int, { hEventLog: HANDLE, NumberOfRecords: PDWORD } ],
  GetOldestEventLogRecord: [ int, { hEventLog: HANDLE, OldestRecord: PDWORD } ],
  OpenEventLogA: [ VoidT.Δ, { lpUNCServerName: LPCSTR, lpSourceName: LPCSTR } ],
  OpenEventLogW: [ VoidT.Δ, { lpUNCServerName: LPCWSTR, lpSourceName: LPCWSTR } ],
  RegisterEventSourceA: [ VoidT.Δ, { lpUNCServerName: LPCSTR, lpSourceName: LPCSTR } ],
  RegisterEventSourceW: [ VoidT.Δ, { lpUNCServerName: LPCWSTR, lpSourceName: LPCWSTR } ],
  OpenBackupEventLogA: [ VoidT.Δ, { lpUNCServerName: LPCSTR, lpFileName: LPCSTR } ],
  OpenBackupEventLogW: [ VoidT.Δ, { lpUNCServerName: LPCWSTR, lpFileName: LPCWSTR } ],
  ReadEventLogA: [ int, { hEventLog: HANDLE, dwReadFlags: DWORD, dwRecordOffset: DWORD, lpBuffer: LPVOID, nNumberOfBytesToRead: DWORD, pnBytesRead: ulong.Δ, pnMinNumberOfBytesNeeded: ulong.Δ } ],
  ReadEventLogW: [ int, { hEventLog: HANDLE, dwReadFlags: DWORD, dwRecordOffset: DWORD, lpBuffer: LPVOID, nNumberOfBytesToRead: DWORD, pnBytesRead: ulong.Δ, pnMinNumberOfBytesNeeded: ulong.Δ } ],
  ReportEventA: [ int, { hEventLog: HANDLE, wType: WORD, wCategory: WORD, dwEventID: DWORD, lpUserSid: PSID, wNumStrings: WORD, dwDataSize: DWORD, lpStrings: int8.Δ.Δ, lpRawData: LPVOID } ],
  ReportEventW: [ int, { hEventLog: HANDLE, wType: WORD, wCategory: WORD, dwEventID: DWORD, lpUserSid: PSID, wNumStrings: WORD, dwDataSize: DWORD, lpStrings: ushort.Δ.Δ, lpRawData: LPVOID } ],
  GetEventLogInformation: [ int, { hEventLog: HANDLE, dwInfoLevel: DWORD, lpBuffer: LPVOID, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD } ],
  DuplicateToken: [ int, { ExistingTokenHandle: HANDLE, ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL, DuplicateTokenHandle: PHANDLE } ],
  GetKernelObjectSecurity: [ int, { Handle: HANDLE, RequestedInformation: SECURITY_INFORMATION, pSecurityDescriptor: PSECURITY_DESCRIPTOR, nLength: DWORD, lpnLengthNeeded: LPDWORD } ],
  ImpersonateNamedPipeClient: [ int, { hNamedPipe: HANDLE } ],
  ImpersonateSelf: [ int, { ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL } ],
  RevertToSelf: [ int, {  } ],
  SetThreadToken: [ int, { Thread: PHANDLE, Token: HANDLE } ],
  AccessCheck: [ int, { pSecurityDescriptor: PSECURITY_DESCRIPTOR, ClientToken: HANDLE, DesiredAccess: DWORD, GenericMapping: PGENERIC_MAPPING, PrivilegeSet: PPRIVILEGE_SET, PrivilegeSetLength: LPDWORD, GrantedAccess: LPDWORD, AccessStatus: LPBOOL } ],
  AccessCheckByType: [ int, { pSecurityDescriptor: PSECURITY_DESCRIPTOR, PrincipalSelfSid: PSID, ClientToken: HANDLE, DesiredAccess: DWORD, ObjectTypeList: POBJECT_TYPE_LIST, ObjectTypeListLength: DWORD, GenericMapping: PGENERIC_MAPPING, PrivilegeSet: PPRIVILEGE_SET, PrivilegeSetLength: LPDWORD, GrantedAccess: LPDWORD, AccessStatus: LPBOOL } ],
  AccessCheckByTypeResultList: [ int, { pSecurityDescriptor: PSECURITY_DESCRIPTOR, PrincipalSelfSid: PSID, ClientToken: HANDLE, DesiredAccess: DWORD, ObjectTypeList: POBJECT_TYPE_LIST, ObjectTypeListLength: DWORD, GenericMapping: PGENERIC_MAPPING, PrivilegeSet: PPRIVILEGE_SET, PrivilegeSetLength: LPDWORD, GrantedAccessList: LPDWORD, AccessStatusList: LPDWORD } ],
  OpenProcessToken: [ int, { ProcessHandle: HANDLE, DesiredAccess: DWORD, TokenHandle: PHANDLE } ],
  OpenThreadToken: [ int, { ThreadHandle: HANDLE, DesiredAccess: DWORD, OpenAsSelf: BOOL, TokenHandle: PHANDLE } ],
  GetTokenInformation: [ int, { TokenHandle: HANDLE, TokenInformationClass: TOKEN_INFORMATION_CLASS, TokenInformation: LPVOID, TokenInformationLength: DWORD, ReturnLength: PDWORD } ],
  SetTokenInformation: [ int, { TokenHandle: HANDLE, TokenInformationClass: TOKEN_INFORMATION_CLASS, TokenInformation: LPVOID, TokenInformationLength: DWORD } ],
  AdjustTokenPrivileges: [ int, { TokenHandle: HANDLE, DisableAllPrivileges: BOOL, NewState: PTOKEN_PRIVILEGES, BufferLength: DWORD, PreviousState: PTOKEN_PRIVILEGES, ReturnLength: PDWORD } ],
  AdjustTokenGroups: [ int, { TokenHandle: HANDLE, ResetToDefault: BOOL, NewState: PTOKEN_GROUPS, BufferLength: DWORD, PreviousState: PTOKEN_GROUPS, ReturnLength: PDWORD } ],
  PrivilegeCheck: [ int, { ClientToken: HANDLE, RequiredPrivileges: PPRIVILEGE_SET, pfResult: LPBOOL } ],
  AccessCheckAndAuditAlarmA: [ int, { SubsystemName: LPCSTR, HandleId: LPVOID, ObjectTypeName: LPSTR, ObjectName: LPSTR, SecurityDescriptor: PSECURITY_DESCRIPTOR, DesiredAccess: DWORD, GenericMapping: PGENERIC_MAPPING, ObjectCreation: BOOL, GrantedAccess: LPDWORD, AccessStatus: LPBOOL, pfGenerateOnClose: LPBOOL } ],
  AccessCheckAndAuditAlarmW: [ int, { SubsystemName: LPCWSTR, HandleId: LPVOID, ObjectTypeName: LPWSTR, ObjectName: LPWSTR, SecurityDescriptor: PSECURITY_DESCRIPTOR, DesiredAccess: DWORD, GenericMapping: PGENERIC_MAPPING, ObjectCreation: BOOL, GrantedAccess: LPDWORD, AccessStatus: LPBOOL, pfGenerateOnClose: LPBOOL } ],
  AccessCheckByTypeAndAuditAlarmA: [ int, { SubsystemName: LPCSTR, HandleId: LPVOID, ObjectTypeName: LPCSTR, ObjectName: LPCSTR, SecurityDescriptor: PSECURITY_DESCRIPTOR, PrincipalSelfSid: PSID, DesiredAccess: DWORD, AuditType: AUDIT_EVENT_TYPE, Flags: DWORD, ObjectTypeList: POBJECT_TYPE_LIST, ObjectTypeListLength: DWORD, GenericMapping: PGENERIC_MAPPING, ObjectCreation: BOOL, GrantedAccess: LPDWORD, AccessStatus: LPBOOL, pfGenerateOnClose: LPBOOL } ],
  AccessCheckByTypeAndAuditAlarmW: [ int, { SubsystemName: LPCWSTR, HandleId: LPVOID, ObjectTypeName: LPCWSTR, ObjectName: LPCWSTR, SecurityDescriptor: PSECURITY_DESCRIPTOR, PrincipalSelfSid: PSID, DesiredAccess: DWORD, AuditType: AUDIT_EVENT_TYPE, Flags: DWORD, ObjectTypeList: POBJECT_TYPE_LIST, ObjectTypeListLength: DWORD, GenericMapping: PGENERIC_MAPPING, ObjectCreation: BOOL, GrantedAccess: LPDWORD, AccessStatus: LPBOOL, pfGenerateOnClose: LPBOOL } ],
  AccessCheckByTypeResultListAndAuditAlarmA: [ int, { SubsystemName: LPCSTR, HandleId: LPVOID, ObjectTypeName: LPCSTR, ObjectName: LPCSTR, SecurityDescriptor: PSECURITY_DESCRIPTOR, PrincipalSelfSid: PSID, DesiredAccess: DWORD, AuditType: AUDIT_EVENT_TYPE, Flags: DWORD, ObjectTypeList: POBJECT_TYPE_LIST, ObjectTypeListLength: DWORD, GenericMapping: PGENERIC_MAPPING, ObjectCreation: BOOL, GrantedAccess: LPDWORD, AccessStatusList: LPDWORD, pfGenerateOnClose: LPBOOL } ],
  AccessCheckByTypeResultListAndAuditAlarmW: [ int, { SubsystemName: LPCWSTR, HandleId: LPVOID, ObjectTypeName: LPCWSTR, ObjectName: LPCWSTR, SecurityDescriptor: PSECURITY_DESCRIPTOR, PrincipalSelfSid: PSID, DesiredAccess: DWORD, AuditType: AUDIT_EVENT_TYPE, Flags: DWORD, ObjectTypeList: POBJECT_TYPE_LIST, ObjectTypeListLength: DWORD, GenericMapping: PGENERIC_MAPPING, ObjectCreation: BOOL, GrantedAccess: LPDWORD, AccessStatusList: LPDWORD, pfGenerateOnClose: LPBOOL } ],
  AccessCheckByTypeResultListAndAuditAlarmByHandleA: [ int, { SubsystemName: LPCSTR, HandleId: LPVOID, ClientToken: HANDLE, ObjectTypeName: LPCSTR, ObjectName: LPCSTR, SecurityDescriptor: PSECURITY_DESCRIPTOR, PrincipalSelfSid: PSID, DesiredAccess: DWORD, AuditType: AUDIT_EVENT_TYPE, Flags: DWORD, ObjectTypeList: POBJECT_TYPE_LIST, ObjectTypeListLength: DWORD, GenericMapping: PGENERIC_MAPPING, ObjectCreation: BOOL, GrantedAccess: LPDWORD, AccessStatusList: LPDWORD, pfGenerateOnClose: LPBOOL } ],
  AccessCheckByTypeResultListAndAuditAlarmByHandleW: [ int, { SubsystemName: LPCWSTR, HandleId: LPVOID, ClientToken: HANDLE, ObjectTypeName: LPCWSTR, ObjectName: LPCWSTR, SecurityDescriptor: PSECURITY_DESCRIPTOR, PrincipalSelfSid: PSID, DesiredAccess: DWORD, AuditType: AUDIT_EVENT_TYPE, Flags: DWORD, ObjectTypeList: POBJECT_TYPE_LIST, ObjectTypeListLength: DWORD, GenericMapping: PGENERIC_MAPPING, ObjectCreation: BOOL, GrantedAccess: LPDWORD, AccessStatusList: LPDWORD, pfGenerateOnClose: LPBOOL } ],
  ObjectOpenAuditAlarmA: [ int, { SubsystemName: LPCSTR, HandleId: LPVOID, ObjectTypeName: LPSTR, ObjectName: LPSTR, pSecurityDescriptor: PSECURITY_DESCRIPTOR, ClientToken: HANDLE, DesiredAccess: DWORD, GrantedAccess: DWORD, Privileges: PPRIVILEGE_SET, ObjectCreation: BOOL, AccessGranted: BOOL, GenerateOnClose: LPBOOL } ],
  ObjectOpenAuditAlarmW: [ int, { SubsystemName: LPCWSTR, HandleId: LPVOID, ObjectTypeName: LPWSTR, ObjectName: LPWSTR, pSecurityDescriptor: PSECURITY_DESCRIPTOR, ClientToken: HANDLE, DesiredAccess: DWORD, GrantedAccess: DWORD, Privileges: PPRIVILEGE_SET, ObjectCreation: BOOL, AccessGranted: BOOL, GenerateOnClose: LPBOOL } ],
  ObjectPrivilegeAuditAlarmA: [ int, { SubsystemName: LPCSTR, HandleId: LPVOID, ClientToken: HANDLE, DesiredAccess: DWORD, Privileges: PPRIVILEGE_SET, AccessGranted: BOOL } ],
  ObjectPrivilegeAuditAlarmW: [ int, { SubsystemName: LPCWSTR, HandleId: LPVOID, ClientToken: HANDLE, DesiredAccess: DWORD, Privileges: PPRIVILEGE_SET, AccessGranted: BOOL } ],
  ObjectCloseAuditAlarmA: [ int, { SubsystemName: LPCSTR, HandleId: LPVOID, GenerateOnClose: BOOL } ],
  ObjectCloseAuditAlarmW: [ int, { SubsystemName: LPCWSTR, HandleId: LPVOID, GenerateOnClose: BOOL } ],
  ObjectDeleteAuditAlarmA: [ int, { SubsystemName: LPCSTR, HandleId: LPVOID, GenerateOnClose: BOOL } ],
  ObjectDeleteAuditAlarmW: [ int, { SubsystemName: LPCWSTR, HandleId: LPVOID, GenerateOnClose: BOOL } ],
  PrivilegedServiceAuditAlarmA: [ int, { SubsystemName: LPCSTR, ServiceName: LPCSTR, ClientToken: HANDLE, Privileges: PPRIVILEGE_SET, AccessGranted: BOOL } ],
  PrivilegedServiceAuditAlarmW: [ int, { SubsystemName: LPCWSTR, ServiceName: LPCWSTR, ClientToken: HANDLE, Privileges: PPRIVILEGE_SET, AccessGranted: BOOL } ],
  IsWellKnownSid: [ int, { pSid: PSID, WellKnownSidType: WELL_KNOWN_SID_TYPE } ],
  CreateWellKnownSid: [ int, { WellKnownSidType: WELL_KNOWN_SID_TYPE, DomainSid: PSID, pSid: PSID, cbSid: ulong.Δ } ],
  EqualDomainSid: [ int, { pSid1: PSID, pSid2: PSID, pfEqual: int.Δ } ],
  GetWindowsAccountDomainSid: [ int, { pSid: PSID, pDomainSid: PSID, cbDomainSid: ulong.Δ } ],
  IsValidSid: [ int, { pSid: PSID } ],
  EqualSid: [ int, { pSid1: PSID, pSid2: PSID } ],
  EqualPrefixSid: [ int, { pSid1: PSID, pSid2: PSID } ],
  GetSidLengthRequired: [ ulong, { nSubAuthorityCount: UCHAR } ],
  AllocateAndInitializeSid: [ int, { pIdentifierAuthority: PSID_IDENTIFIER_AUTHORITY, nSubAuthorityCount: BYTE, nSubAuthority0: DWORD, nSubAuthority1: DWORD, nSubAuthority2: DWORD, nSubAuthority3: DWORD, nSubAuthority4: DWORD, nSubAuthority5: DWORD, nSubAuthority6: DWORD, nSubAuthority7: DWORD, pSid: VoidT.Δ.Δ } ],
  FreeSid: [ VoidT.Δ, { pSid: PSID } ],
  InitializeSid: [ int, { Sid: PSID, pIdentifierAuthority: PSID_IDENTIFIER_AUTHORITY, nSubAuthorityCount: BYTE } ],
  GetSidIdentifierAuthority: [ VOIDPTR, { pSid: PSID } ],
  GetSidSubAuthority: [ ulong.Δ, { pSid: PSID, nSubAuthority: DWORD } ],
  GetSidSubAuthorityCount: [ uchar.Δ, { pSid: PSID } ],
  GetLengthSid: [ ulong, { pSid: PSID } ],
  CopySid: [ int, { nDestinationSidLength: DWORD, pDestinationSid: PSID, pSourceSid: PSID } ],
  AreAllAccessesGranted: [ int, { GrantedAccess: DWORD, DesiredAccess: DWORD } ],
  AreAnyAccessesGranted: [ int, { GrantedAccess: DWORD, DesiredAccess: DWORD } ],
  MapGenericMask: [ VoidT, { AccessMask: PDWORD, GenericMapping: PGENERIC_MAPPING } ],
  IsValidAcl: [ int, { pAcl: PACL } ],
  InitializeAcl: [ int, { pAcl: PACL, nAclLength: DWORD, dwAclRevision: DWORD } ],
  GetAclInformation: [ int, { pAcl: PACL, pAclInformation: LPVOID, nAclInformationLength: DWORD, dwAclInformationClass: ACL_INFORMATION_CLASS } ],
  SetAclInformation: [ int, { pAcl: PACL, pAclInformation: LPVOID, nAclInformationLength: DWORD, dwAclInformationClass: ACL_INFORMATION_CLASS } ],
  AddAce: [ int, { pAcl: PACL, dwAceRevision: DWORD, dwStartingAceIndex: DWORD, pAceList: LPVOID, nAceListLength: DWORD } ],
  DeleteAce: [ int, { pAcl: PACL, dwAceIndex: DWORD } ],
  GetAce: [ int, { pAcl: PACL, dwAceIndex: DWORD, pAce: VoidT.Δ.Δ } ],
  AddAccessAllowedAce: [ int, { pAcl: PACL, dwAceRevision: DWORD, AccessMask: DWORD, pSid: PSID } ],
  AddAccessAllowedAceEx: [ int, { pAcl: PACL, dwAceRevision: DWORD, AceFlags: DWORD, AccessMask: DWORD, pSid: PSID } ],
  AddMandatoryAce: [ int, { pAcl: PACL, dwAceRevision: DWORD, AceFlags: DWORD, MandatoryPolicy: DWORD, pLabelSid: PSID } ],
  AddConditionalAce: [ int, { pAcl: PACL, dwAceRevision: DWORD, AceFlags: DWORD, AceType: UCHAR, AccessMask: DWORD, pSid: PSID, ConditionStr: PWCHAR, ReturnLength: ulong.Δ } ],
  AddAccessDeniedAce: [ int, { pAcl: PACL, dwAceRevision: DWORD, AccessMask: DWORD, pSid: PSID } ],
  AddAccessDeniedAceEx: [ int, { pAcl: PACL, dwAceRevision: DWORD, AceFlags: DWORD, AccessMask: DWORD, pSid: PSID } ],
  AddAuditAccessAce: [ int, { pAcl: PACL, dwAceRevision: DWORD, dwAccessMask: DWORD, pSid: PSID, bAuditSuccess: BOOL, bAuditFailure: BOOL } ],
  AddAuditAccessAceEx: [ int, { pAcl: PACL, dwAceRevision: DWORD, AceFlags: DWORD, dwAccessMask: DWORD, pSid: PSID, bAuditSuccess: BOOL, bAuditFailure: BOOL } ],
  AddAccessAllowedObjectAce: [ int, { pAcl: PACL, dwAceRevision: DWORD, AceFlags: DWORD, AccessMask: DWORD, ObjectTypeGuid: uint.Δ, InheritedObjectTypeGuid: uint.Δ, pSid: PSID } ],
  AddAccessDeniedObjectAce: [ int, { pAcl: PACL, dwAceRevision: DWORD, AceFlags: DWORD, AccessMask: DWORD, ObjectTypeGuid: uint.Δ, InheritedObjectTypeGuid: uint.Δ, pSid: PSID } ],
  AddAuditAccessObjectAce: [ int, { pAcl: PACL, dwAceRevision: DWORD, AceFlags: DWORD, AccessMask: DWORD, ObjectTypeGuid: uint.Δ, InheritedObjectTypeGuid: uint.Δ, pSid: PSID, bAuditSuccess: BOOL, bAuditFailure: BOOL } ],
  FindFirstFreeAce: [ int, { pAcl: PACL, pAce: VoidT.Δ.Δ } ],
  InitializeSecurityDescriptor: [ int, { pSecurityDescriptor: PSECURITY_DESCRIPTOR, dwRevision: DWORD } ],
  IsValidSecurityDescriptor: [ int, { pSecurityDescriptor: PSECURITY_DESCRIPTOR } ],
  IsValidRelativeSecurityDescriptor: [ int, { pSecurityDescriptor: PSECURITY_DESCRIPTOR, SecurityDescriptorLength: ULONG, RequiredInformation: SECURITY_INFORMATION } ],
  GetSecurityDescriptorLength: [ ulong, { pSecurityDescriptor: PSECURITY_DESCRIPTOR } ],
  GetSecurityDescriptorControl: [ int, { pSecurityDescriptor: PSECURITY_DESCRIPTOR, pControl: PSECURITY_DESCRIPTOR_CONTROL, lpdwRevision: LPDWORD } ],
  SetSecurityDescriptorControl: [ int, { pSecurityDescriptor: PSECURITY_DESCRIPTOR, ControlBitsOfInterest: SECURITY_DESCRIPTOR_CONTROL, ControlBitsToSet: SECURITY_DESCRIPTOR_CONTROL } ],
  SetSecurityDescriptorDacl: [ int, { pSecurityDescriptor: PSECURITY_DESCRIPTOR, bDaclPresent: BOOL, pDacl: PACL, bDaclDefaulted: BOOL } ],
  GetSecurityDescriptorDacl: [ int, { pSecurityDescriptor: PSECURITY_DESCRIPTOR, lpbDaclPresent: LPBOOL, pDacl: VOIDPTR.Δ, lpbDaclDefaulted: LPBOOL } ],
  SetSecurityDescriptorSacl: [ int, { pSecurityDescriptor: PSECURITY_DESCRIPTOR, bSaclPresent: BOOL, pSacl: PACL, bSaclDefaulted: BOOL } ],
  GetSecurityDescriptorSacl: [ int, { pSecurityDescriptor: PSECURITY_DESCRIPTOR, lpbSaclPresent: LPBOOL, pSacl: VOIDPTR.Δ, lpbSaclDefaulted: LPBOOL } ],
  SetSecurityDescriptorOwner: [ int, { pSecurityDescriptor: PSECURITY_DESCRIPTOR, pOwner: PSID, bOwnerDefaulted: BOOL } ],
  GetSecurityDescriptorOwner: [ int, { pSecurityDescriptor: PSECURITY_DESCRIPTOR, pOwner: VoidT.Δ.Δ, lpbOwnerDefaulted: LPBOOL } ],
  SetSecurityDescriptorGroup: [ int, { pSecurityDescriptor: PSECURITY_DESCRIPTOR, pGroup: PSID, bGroupDefaulted: BOOL } ],
  GetSecurityDescriptorGroup: [ int, { pSecurityDescriptor: PSECURITY_DESCRIPTOR, pGroup: VoidT.Δ.Δ, lpbGroupDefaulted: LPBOOL } ],
  SetSecurityDescriptorRMControl: [ ulong, { SecurityDescriptor: PSECURITY_DESCRIPTOR, RMControl: PUCHAR } ],
  GetSecurityDescriptorRMControl: [ ulong, { SecurityDescriptor: PSECURITY_DESCRIPTOR, RMControl: PUCHAR } ],
  CreatePrivateObjectSecurity: [ int, { ParentDescriptor: PSECURITY_DESCRIPTOR, CreatorDescriptor: PSECURITY_DESCRIPTOR, NewDescriptor: VoidT.Δ.Δ, IsDirectoryObject: BOOL, Token: HANDLE, GenericMapping: PGENERIC_MAPPING } ],
  ConvertToAutoInheritPrivateObjectSecurity: [ int, { ParentDescriptor: PSECURITY_DESCRIPTOR, CurrentSecurityDescriptor: PSECURITY_DESCRIPTOR, NewSecurityDescriptor: VoidT.Δ.Δ, ObjectType: uint.Δ, IsDirectoryObject: BOOLEAN, GenericMapping: PGENERIC_MAPPING } ],
  CreatePrivateObjectSecurityEx: [ int, { ParentDescriptor: PSECURITY_DESCRIPTOR, CreatorDescriptor: PSECURITY_DESCRIPTOR, NewDescriptor: VoidT.Δ.Δ, ObjectType: uint.Δ, IsContainerObject: BOOL, AutoInheritFlags: ULONG, Token: HANDLE, GenericMapping: PGENERIC_MAPPING } ],
  CreatePrivateObjectSecurityWithMultipleInheritance: [ int, { ParentDescriptor: PSECURITY_DESCRIPTOR, CreatorDescriptor: PSECURITY_DESCRIPTOR, NewDescriptor: VoidT.Δ.Δ, ObjectTypes: uint.Δ.Δ, GuidCount: ULONG, IsContainerObject: BOOL, AutoInheritFlags: ULONG, Token: HANDLE, GenericMapping: PGENERIC_MAPPING } ],
  SetPrivateObjectSecurity: [ int, { SecurityInformation: SECURITY_INFORMATION, ModificationDescriptor: PSECURITY_DESCRIPTOR, ObjectsSecurityDescriptor: VoidT.Δ.Δ, GenericMapping: PGENERIC_MAPPING, Token: HANDLE } ],
  SetPrivateObjectSecurityEx: [ int, { SecurityInformation: SECURITY_INFORMATION, ModificationDescriptor: PSECURITY_DESCRIPTOR, ObjectsSecurityDescriptor: VoidT.Δ.Δ, AutoInheritFlags: ULONG, GenericMapping: PGENERIC_MAPPING, Token: HANDLE } ],
  GetPrivateObjectSecurity: [ int, { ObjectDescriptor: PSECURITY_DESCRIPTOR, SecurityInformation: SECURITY_INFORMATION, ResultantDescriptor: PSECURITY_DESCRIPTOR, DescriptorLength: DWORD, ReturnLength: PDWORD } ],
  DestroyPrivateObjectSecurity: [ int, { ObjectDescriptor: VoidT.Δ.Δ } ],
  MakeSelfRelativeSD: [ int, { pAbsoluteSecurityDescriptor: PSECURITY_DESCRIPTOR, pSelfRelativeSecurityDescriptor: PSECURITY_DESCRIPTOR, lpdwBufferLength: LPDWORD } ],
  MakeAbsoluteSD: [ int, { pSelfRelativeSecurityDescriptor: PSECURITY_DESCRIPTOR, pAbsoluteSecurityDescriptor: PSECURITY_DESCRIPTOR, lpdwAbsoluteSecurityDescriptorSize: LPDWORD, pDacl: PACL, lpdwDaclSize: LPDWORD, pSacl: PACL, lpdwSaclSize: LPDWORD, pOwner: PSID, lpdwOwnerSize: LPDWORD, pPrimaryGroup: PSID, lpdwPrimaryGroupSize: LPDWORD } ],
  MakeAbsoluteSD2: [ int, { pSelfRelativeSecurityDescriptor: PSECURITY_DESCRIPTOR, lpdwBufferSize: LPDWORD } ],
  QuerySecurityAccessMask: [ VoidT, { SecurityInformation: SECURITY_INFORMATION, DesiredAccess: LPDWORD } ],
  SetSecurityAccessMask: [ VoidT, { SecurityInformation: SECURITY_INFORMATION, DesiredAccess: LPDWORD } ],
  SetFileSecurityA: [ int, { lpFileName: LPCSTR, SecurityInformation: SECURITY_INFORMATION, pSecurityDescriptor: PSECURITY_DESCRIPTOR } ],
  SetFileSecurityW: [ int, { lpFileName: LPCWSTR, SecurityInformation: SECURITY_INFORMATION, pSecurityDescriptor: PSECURITY_DESCRIPTOR } ],
  GetFileSecurityA: [ int, { lpFileName: LPCSTR, RequestedInformation: SECURITY_INFORMATION, pSecurityDescriptor: PSECURITY_DESCRIPTOR, nLength: DWORD, lpnLengthNeeded: LPDWORD } ],
  GetFileSecurityW: [ int, { lpFileName: LPCWSTR, RequestedInformation: SECURITY_INFORMATION, pSecurityDescriptor: PSECURITY_DESCRIPTOR, nLength: DWORD, lpnLengthNeeded: LPDWORD } ],
  SetKernelObjectSecurity: [ int, { Handle: HANDLE, SecurityInformation: SECURITY_INFORMATION, SecurityDescriptor: PSECURITY_DESCRIPTOR } ],
  FindFirstChangeNotificationA: [ VoidT.Δ, { lpPathName: LPCSTR, bWatchSubtree: BOOL, dwNotifyFilter: DWORD } ],
  FindFirstChangeNotificationW: [ VoidT.Δ, { lpPathName: LPCWSTR, bWatchSubtree: BOOL, dwNotifyFilter: DWORD } ],
  FindNextChangeNotification: [ int, { hChangeHandle: HANDLE } ],
  FindCloseChangeNotification: [ int, { hChangeHandle: HANDLE } ],
  ReadDirectoryChangesW: [ int, { hDirectory: HANDLE, lpBuffer: LPVOID, nBufferLength: DWORD, bWatchSubtree: BOOL, dwNotifyFilter: DWORD, lpBytesReturned: LPDWORD, lpOverlapped: LPOVERLAPPED, lpCompletionRoutine: LPOVERLAPPED_COMPLETION_ROUTINE } ],
  VirtualLock: [ int, { lpAddress: LPVOID, dwSize: SIZE_T } ],
  VirtualUnlock: [ int, { lpAddress: LPVOID, dwSize: SIZE_T } ],
  MapViewOfFileEx: [ VoidT.Δ, { hFileMappingObject: HANDLE, dwDesiredAccess: DWORD, dwFileOffsetHigh: DWORD, dwFileOffsetLow: DWORD, dwNumberOfBytesToMap: SIZE_T, lpBaseAddress: LPVOID } ],
  MapViewOfFileExNuma: [ VoidT.Δ, { hFileMappingObject: HANDLE, dwDesiredAccess: DWORD, dwFileOffsetHigh: DWORD, dwFileOffsetLow: DWORD, dwNumberOfBytesToMap: SIZE_T, lpBaseAddress: LPVOID, nndPreferred: DWORD } ],
  SetPriorityClass: [ int, { hProcess: HANDLE, dwPriorityClass: DWORD } ],
  GetPriorityClass: [ ulong, { hProcess: HANDLE } ],
  IsBadReadPtr: [ int, { lp: VoidT.Δ, ucb: UINT_PTR } ],
  IsBadWritePtr: [ int, { lp: LPVOID, ucb: UINT_PTR } ],
  IsBadHugeReadPtr: [ int, { lp: VoidT.Δ, ucb: UINT_PTR } ],
  IsBadHugeWritePtr: [ int, { lp: LPVOID, ucb: UINT_PTR } ],
  IsBadCodePtr: [ int, { lpfn: FARPROC } ],
  IsBadStringPtrA: [ int, { lpsz: LPCSTR, ucchMax: UINT_PTR } ],
  IsBadStringPtrW: [ int, { lpsz: LPCWSTR, ucchMax: UINT_PTR } ],
  LookupAccountSidA: [ int, { lpSystemName: LPCSTR, Sid: PSID, Name: LPSTR, cchName: LPDWORD, ReferencedDomainName: LPSTR, cchReferencedDomainName: LPDWORD, peUse: PSID_NAME_USE } ],
  LookupAccountSidW: [ int, { lpSystemName: LPCWSTR, Sid: PSID, Name: LPWSTR, cchName: LPDWORD, ReferencedDomainName: LPWSTR, cchReferencedDomainName: LPDWORD, peUse: PSID_NAME_USE } ],
  LookupAccountSidLocalA: [ int, { Sid: PSID, Name: LPSTR, cchName: LPDWORD, ReferencedDomainName: LPSTR, cchReferencedDomainName: LPDWORD, peUse: PSID_NAME_USE } ],
  LookupAccountSidLocalW: [ int, { Sid: PSID, Name: LPWSTR, cchName: LPDWORD, ReferencedDomainName: LPWSTR, cchReferencedDomainName: LPDWORD, peUse: PSID_NAME_USE } ],
  LookupAccountNameA: [ int, { lpSystemName: LPCSTR, lpAccountName: LPCSTR, Sid: PSID, cbSid: LPDWORD, ReferencedDomainName: LPSTR, cchReferencedDomainName: LPDWORD, peUse: PSID_NAME_USE } ],
  LookupAccountNameW: [ int, { lpSystemName: LPCWSTR, lpAccountName: LPCWSTR, Sid: PSID, cbSid: LPDWORD, ReferencedDomainName: LPWSTR, cchReferencedDomainName: LPDWORD, peUse: PSID_NAME_USE } ],
  LookupAccountNameLocalA: [ int, { lpAccountName: LPCSTR, Sid: PSID, cbSid: LPDWORD, ReferencedDomainName: LPSTR, cchReferencedDomainName: LPDWORD, peUse: PSID_NAME_USE } ],
  LookupAccountNameLocalW: [ int, { lpAccountName: LPCWSTR, Sid: PSID, cbSid: LPDWORD, ReferencedDomainName: LPWSTR, cchReferencedDomainName: LPDWORD, peUse: PSID_NAME_USE } ],
  LookupPrivilegeValueA: [ int, { lpSystemName: LPCSTR, lpName: LPCSTR, lpLuid: PLUID } ],
  LookupPrivilegeValueW: [ int, { lpSystemName: LPCWSTR, lpName: LPCWSTR, lpLuid: PLUID } ],
  LookupPrivilegeNameA: [ int, { lpSystemName: LPCSTR, lpLuid: PLUID, lpName: LPSTR, cchName: LPDWORD } ],
  LookupPrivilegeNameW: [ int, { lpSystemName: LPCWSTR, lpLuid: PLUID, lpName: LPWSTR, cchName: LPDWORD } ],
  LookupPrivilegeDisplayNameA: [ int, { lpSystemName: LPCSTR, lpName: LPCSTR, lpDisplayName: LPSTR, cchDisplayName: LPDWORD, lpLanguageId: LPDWORD } ],
  LookupPrivilegeDisplayNameW: [ int, { lpSystemName: LPCWSTR, lpName: LPCWSTR, lpDisplayName: LPWSTR, cchDisplayName: LPDWORD, lpLanguageId: LPDWORD } ],
  AllocateLocallyUniqueId: [ int, { Luid: PLUID } ],
  BuildCommDCBA: [ int, { lpDef: LPCSTR, lpDCB: LPDCB } ],
  BuildCommDCBW: [ int, { lpDef: LPCWSTR, lpDCB: LPDCB } ],
  BuildCommDCBAndTimeoutsA: [ int, { lpDef: LPCSTR, lpDCB: LPDCB, lpCommTimeouts: LPCOMMTIMEOUTS } ],
  BuildCommDCBAndTimeoutsW: [ int, { lpDef: LPCWSTR, lpDCB: LPDCB, lpCommTimeouts: LPCOMMTIMEOUTS } ],
  CommConfigDialogA: [ int, { lpszName: LPCSTR, hWnd: HWND, lpCC: LPCOMMCONFIG } ],
  CommConfigDialogW: [ int, { lpszName: LPCWSTR, hWnd: HWND, lpCC: LPCOMMCONFIG } ],
  GetDefaultCommConfigA: [ int, { lpszName: LPCSTR, lpCC: LPCOMMCONFIG, lpdwSize: LPDWORD } ],
  GetDefaultCommConfigW: [ int, { lpszName: LPCWSTR, lpCC: LPCOMMCONFIG, lpdwSize: LPDWORD } ],
  SetDefaultCommConfigA: [ int, { lpszName: LPCSTR, lpCC: LPCOMMCONFIG, dwSize: DWORD } ],
  SetDefaultCommConfigW: [ int, { lpszName: LPCWSTR, lpCC: LPCOMMCONFIG, dwSize: DWORD } ],
  GetComputerNameA: [ int, { lpBuffer: LPSTR, nSize: LPDWORD } ],
  GetComputerNameW: [ int, { lpBuffer: LPWSTR, nSize: LPDWORD } ],
  SetComputerNameA: [ int, { lpComputerName: LPCSTR } ],
  SetComputerNameW: [ int, { lpComputerName: LPCWSTR } ],
  GetComputerNameExA: [ int, { NameType: COMPUTER_NAME_FORMAT, lpBuffer: LPSTR, nSize: LPDWORD } ],
  GetComputerNameExW: [ int, { NameType: COMPUTER_NAME_FORMAT, lpBuffer: LPWSTR, nSize: LPDWORD } ],
  SetComputerNameExA: [ int, { NameType: COMPUTER_NAME_FORMAT, lpBuffer: LPCSTR } ],
  SetComputerNameExW: [ int, { NameType: COMPUTER_NAME_FORMAT, lpBuffer: LPCWSTR } ],
  DnsHostnameToComputerNameA: [ int, { Hostname: LPCSTR, ComputerName: LPSTR, nSize: LPDWORD } ],
  DnsHostnameToComputerNameW: [ int, { Hostname: LPCWSTR, ComputerName: LPWSTR, nSize: LPDWORD } ],
  GetUserNameA: [ int, { lpBuffer: LPSTR, pcbBuffer: LPDWORD } ],
  GetUserNameW: [ int, { lpBuffer: LPWSTR, pcbBuffer: LPDWORD } ],
  LogonUserA: [ int, { lpszUsername: LPCSTR, lpszDomain: LPCSTR, lpszPassword: LPCSTR, dwLogonType: DWORD, dwLogonProvider: DWORD, phToken: PHANDLE } ],
  LogonUserW: [ int, { lpszUsername: LPCWSTR, lpszDomain: LPCWSTR, lpszPassword: LPCWSTR, dwLogonType: DWORD, dwLogonProvider: DWORD, phToken: PHANDLE } ],
  LogonUserExA: [ int, { lpszUsername: LPCSTR, lpszDomain: LPCSTR, lpszPassword: LPCSTR, dwLogonType: DWORD, dwLogonProvider: DWORD, phToken: PHANDLE, ppLogonSid: VoidT.Δ.Δ, ppProfileBuffer: VoidT.Δ.Δ, pdwProfileLength: LPDWORD, pQuotaLimits: PQUOTA_LIMITS } ],
  LogonUserExW: [ int, { lpszUsername: LPCWSTR, lpszDomain: LPCWSTR, lpszPassword: LPCWSTR, dwLogonType: DWORD, dwLogonProvider: DWORD, phToken: PHANDLE, ppLogonSid: VoidT.Δ.Δ, ppProfileBuffer: VoidT.Δ.Δ, pdwProfileLength: LPDWORD, pQuotaLimits: PQUOTA_LIMITS } ],
  ImpersonateLoggedOnUser: [ int, { hToken: HANDLE } ],
  CreateProcessAsUserA: [ int, { hToken: HANDLE, lpApplicationName: LPCSTR, lpCommandLine: LPSTR, lpProcessAttributes: LPSECURITY_ATTRIBUTES, lpThreadAttributes: LPSECURITY_ATTRIBUTES, bInheritHandles: BOOL, dwCreationFlags: DWORD, lpEnvironment: LPVOID, lpCurrentDirectory: LPCSTR, lpStartupInfo: LPSTARTUPINFOA, lpProcessInformation: LPPROCESS_INFORMATION } ],
  CreateProcessAsUserW: [ int, { hToken: HANDLE, lpApplicationName: LPCWSTR, lpCommandLine: LPWSTR, lpProcessAttributes: LPSECURITY_ATTRIBUTES, lpThreadAttributes: LPSECURITY_ATTRIBUTES, bInheritHandles: BOOL, dwCreationFlags: DWORD, lpEnvironment: LPVOID, lpCurrentDirectory: LPCWSTR, lpStartupInfo: LPSTARTUPINFOW, lpProcessInformation: LPPROCESS_INFORMATION } ],
  CreateProcessWithLogonW: [ int, { lpUsername: LPCWSTR, lpDomain: LPCWSTR, lpPassword: LPCWSTR, dwLogonFlags: DWORD, lpApplicationName: LPCWSTR, lpCommandLine: LPWSTR, dwCreationFlags: DWORD, lpEnvironment: LPVOID, lpCurrentDirectory: LPCWSTR, lpStartupInfo: LPSTARTUPINFOW, lpProcessInformation: LPPROCESS_INFORMATION } ],
  CreateProcessWithTokenW: [ int, { hToken: HANDLE, dwLogonFlags: DWORD, lpApplicationName: LPCWSTR, lpCommandLine: LPWSTR, dwCreationFlags: DWORD, lpEnvironment: LPVOID, lpCurrentDirectory: LPCWSTR, lpStartupInfo: LPSTARTUPINFOW, lpProcessInformation: LPPROCESS_INFORMATION } ],
  ImpersonateAnonymousToken: [ int, { ThreadHandle: HANDLE } ],
  DuplicateTokenEx: [ int, { hExistingToken: HANDLE, dwDesiredAccess: DWORD, lpTokenAttributes: LPSECURITY_ATTRIBUTES, ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL, TokenType: TOKEN_TYPE, phNewToken: PHANDLE } ],
  CreateRestrictedToken: [ int, { ExistingTokenHandle: HANDLE, Flags: DWORD, DisableSidCount: DWORD, SidsToDisable: PSID_AND_ATTRIBUTES, DeletePrivilegeCount: DWORD, PrivilegesToDelete: PLUID_AND_ATTRIBUTES, RestrictedSidCount: DWORD, SidsToRestrict: PSID_AND_ATTRIBUTES, NewTokenHandle: PHANDLE } ],
  IsTokenRestricted: [ int, { TokenHandle: HANDLE } ],
  IsTokenUntrusted: [ int, { TokenHandle: HANDLE } ],
  CheckTokenMembership: [ int, { TokenHandle: HANDLE, SidToCheck: PSID, IsMember: PBOOL } ],
  RegisterWaitForSingleObject: [ int, { phNewWaitObject: PHANDLE, hObject: HANDLE, Callback: WAITORTIMERCALLBACK, Context: PVOID, dwMilliseconds: ULONG, dwFlags: ULONG } ],
  RegisterWaitForSingleObjectEx: [ VoidT.Δ, { hObject: HANDLE, Callback: WAITORTIMERCALLBACK, Context: PVOID, dwMilliseconds: ULONG, dwFlags: ULONG } ],
  UnregisterWait: [ int, { WaitHandle: HANDLE } ],
  UnregisterWaitEx: [ int, { WaitHandle: HANDLE, CompletionEvent: HANDLE } ],
  QueueUserWorkItem: [ int, { Function: LPTHREAD_START_ROUTINE, Context: PVOID, Flags: ULONG } ],
  BindIoCompletionCallback: [ int, { FileHandle: HANDLE, Function: LPOVERLAPPED_COMPLETION_ROUTINE, Flags: ULONG } ],
  CreateTimerQueue: [ VoidT.Δ, {  } ],
  CreateTimerQueueTimer: [ int, { phNewTimer: PHANDLE, TimerQueue: HANDLE, Callback: WAITORTIMERCALLBACK, Parameter: PVOID, DueTime: DWORD, Period: DWORD, Flags: ULONG } ],
  ChangeTimerQueueTimer: [ int, { TimerQueue: HANDLE, Timer: HANDLE, DueTime: ULONG, Period: ULONG } ],
  DeleteTimerQueueTimer: [ int, { TimerQueue: HANDLE, Timer: HANDLE, CompletionEvent: HANDLE } ],
  DeleteTimerQueueEx: [ int, { TimerQueue: HANDLE, CompletionEvent: HANDLE } ],
  SetTimerQueueTimer: [ VoidT.Δ, { TimerQueue: HANDLE, Callback: WAITORTIMERCALLBACK, Parameter: PVOID, DueTime: DWORD, Period: DWORD, PreferIo: BOOL } ],
  CancelTimerQueueTimer: [ int, { TimerQueue: HANDLE, Timer: HANDLE } ],
  DeleteTimerQueue: [ int, { TimerQueue: HANDLE } ],
  CreateThreadpool: [ VOIDPTR, { reserved: PVOID } ],
  SetThreadpoolThreadMaximum: [ VoidT, { ptpp: PTP_POOL, cthrdMost: DWORD } ],
  SetThreadpoolThreadMinimum: [ int, { ptpp: PTP_POOL, cthrdMic: DWORD } ],
  SetThreadpoolStackInformation: [ int, { ptpp: PTP_POOL, ptpsi: PTP_POOL_STACK_INFORMATION } ],
  QueryThreadpoolStackInformation: [ int, { ptpp: PTP_POOL, ptpsi: PTP_POOL_STACK_INFORMATION } ],
  CloseThreadpool: [ VoidT, { ptpp: PTP_POOL } ],
  CreateThreadpoolCleanupGroup: [ VOIDPTR, {  } ],
  CloseThreadpoolCleanupGroupMembers: [ VoidT, { ptpcg: PTP_CLEANUP_GROUP, fCancelPendingCallbacks: BOOL, pvCleanupContext: PVOID } ],
  CloseThreadpoolCleanupGroup: [ VoidT, { ptpcg: PTP_CLEANUP_GROUP } ],
  InitializeThreadpoolEnvironment: [ VoidT, { pcbe: PTP_CALLBACK_ENVIRON } ],
  SetThreadpoolCallbackPool: [ VoidT, { pcbe: PTP_CALLBACK_ENVIRON, ptpp: PTP_POOL } ],
  SetThreadpoolCallbackCleanupGroup: [ VoidT, { pcbe: PTP_CALLBACK_ENVIRON, ptpcg: PTP_CLEANUP_GROUP, pfng: PTP_CLEANUP_GROUP_CANCEL_CALLBACK } ],
  SetThreadpoolCallbackRunsLong: [ VoidT, { pcbe: PTP_CALLBACK_ENVIRON } ],
  SetThreadpoolCallbackLibrary: [ VoidT, { pcbe: PTP_CALLBACK_ENVIRON, mod: PVOID } ],
  SetThreadpoolCallbackPriority: [ VoidT, { pcbe: PTP_CALLBACK_ENVIRON, Priority: TP_CALLBACK_PRIORITY } ],
  SetThreadpoolCallbackPersistent: [ VoidT, { pcbe: PTP_CALLBACK_ENVIRON } ],
  DestroyThreadpoolEnvironment: [ VoidT, { pcbe: PTP_CALLBACK_ENVIRON } ],
  SetEventWhenCallbackReturns: [ VoidT, { pci: PTP_CALLBACK_INSTANCE, evt: HANDLE } ],
  ReleaseSemaphoreWhenCallbackReturns: [ VoidT, { pci: PTP_CALLBACK_INSTANCE, sem: HANDLE, crel: DWORD } ],
  ReleaseMutexWhenCallbackReturns: [ VoidT, { pci: PTP_CALLBACK_INSTANCE, mut: HANDLE } ],
  LeaveCriticalSectionWhenCallbackReturns: [ VoidT, { pci: PTP_CALLBACK_INSTANCE, pcs: PCRITICAL_SECTION } ],
  FreeLibraryWhenCallbackReturns: [ VoidT, { pci: PTP_CALLBACK_INSTANCE, mod: HMODULE } ],
  CallbackMayRunLong: [ int, { pci: PTP_CALLBACK_INSTANCE } ],
  DisassociateCurrentThreadFromCallback: [ VoidT, { pci: PTP_CALLBACK_INSTANCE } ],
  TrySubmitThreadpoolCallback: [ int, { pfns: PTP_SIMPLE_CALLBACK, pv: PVOID, pcbe: PTP_CALLBACK_ENVIRON } ],
  CreateThreadpoolWork: [ VOIDPTR, { pfnwk: PTP_WORK_CALLBACK, pv: PVOID, pcbe: PTP_CALLBACK_ENVIRON } ],
  SubmitThreadpoolWork: [ VoidT, { pwk: PTP_WORK } ],
  WaitForThreadpoolWorkCallbacks: [ VoidT, { pwk: PTP_WORK, fCancelPendingCallbacks: BOOL } ],
  CloseThreadpoolWork: [ VoidT, { pwk: PTP_WORK } ],
  CreateThreadpoolTimer: [ VOIDPTR, { pfnti: PTP_TIMER_CALLBACK, pv: PVOID, pcbe: PTP_CALLBACK_ENVIRON } ],
  SetThreadpoolTimer: [ VoidT, { pti: PTP_TIMER, pftDueTime: PFILETIME, msPeriod: DWORD, msWindowLength: DWORD } ],
  IsThreadpoolTimerSet: [ int, { pti: PTP_TIMER } ],
  WaitForThreadpoolTimerCallbacks: [ VoidT, { pti: PTP_TIMER, fCancelPendingCallbacks: BOOL } ],
  CloseThreadpoolTimer: [ VoidT, { pti: PTP_TIMER } ],
  CreateThreadpoolWait: [ VOIDPTR, { pfnwa: PTP_WAIT_CALLBACK, pv: PVOID, pcbe: PTP_CALLBACK_ENVIRON } ],
  SetThreadpoolWait: [ VoidT, { pwa: PTP_WAIT, h: HANDLE, pftTimeout: PFILETIME } ],
  WaitForThreadpoolWaitCallbacks: [ VoidT, { pwa: PTP_WAIT, fCancelPendingCallbacks: BOOL } ],
  CloseThreadpoolWait: [ VoidT, { pwa: PTP_WAIT } ],
  CreateThreadpoolIo: [ VOIDPTR, { fl: HANDLE, pfnio: PTP_WIN32_IO_CALLBACK, pv: PVOID, pcbe: PTP_CALLBACK_ENVIRON } ],
  StartThreadpoolIo: [ VoidT, { pio: PTP_IO } ],
  CancelThreadpoolIo: [ VoidT, { pio: PTP_IO } ],
  WaitForThreadpoolIoCallbacks: [ VoidT, { pio: PTP_IO, fCancelPendingCallbacks: BOOL } ],
  CloseThreadpoolIo: [ VoidT, { pio: PTP_IO } ],
  CreatePrivateNamespaceA: [ VoidT.Δ, { lpPrivateNamespaceAttributes: LPSECURITY_ATTRIBUTES, lpBoundaryDescriptor: LPVOID, lpAliasPrefix: LPCSTR } ],
  CreatePrivateNamespaceW: [ VoidT.Δ, { lpPrivateNamespaceAttributes: LPSECURITY_ATTRIBUTES, lpBoundaryDescriptor: LPVOID, lpAliasPrefix: LPCWSTR } ],
  OpenPrivateNamespaceA: [ VoidT.Δ, { lpBoundaryDescriptor: LPVOID, lpAliasPrefix: LPCSTR } ],
  OpenPrivateNamespaceW: [ VoidT.Δ, { lpBoundaryDescriptor: LPVOID, lpAliasPrefix: LPCWSTR } ],
  ClosePrivateNamespace: [ uchar, { Handle: HANDLE, Flags: ULONG } ],
  CreateBoundaryDescriptorA: [ VoidT.Δ, { Name: LPCSTR, Flags: ULONG } ],
  CreateBoundaryDescriptorW: [ VoidT.Δ, { Name: LPCWSTR, Flags: ULONG } ],
  AddSIDToBoundaryDescriptor: [ int, { BoundaryDescriptor: VoidT.Δ.Δ, RequiredSid: PSID } ],
  AddIntegrityLabelToBoundaryDescriptor: [ int, { BoundaryDescriptor: VoidT.Δ.Δ, IntegrityLabel: PSID } ],
  DeleteBoundaryDescriptor: [ VoidT, { BoundaryDescriptor: HANDLE } ],
  GetCurrentHwProfileA: [ int, { lpHwProfileInfo: LPHW_PROFILE_INFOA } ],
  GetCurrentHwProfileW: [ int, { lpHwProfileInfo: LPHW_PROFILE_INFOW } ],
  QueryPerformanceCounter: [ int, { lpPerformanceCount: uint.Δ } ],
  QueryPerformanceFrequency: [ int, { lpFrequency: uint.Δ } ],
  GetVersionExA: [ int, { lpVersionInformation: LPOSVERSIONINFOA } ],
  GetVersionExW: [ int, { lpVersionInformation: LPOSVERSIONINFOW } ],
  VerifyVersionInfoA: [ int, { lpVersionInformation: LPOSVERSIONINFOEXA, dwTypeMask: DWORD, dwlConditionMask: DWORDLONG } ],
  VerifyVersionInfoW: [ int, { lpVersionInformation: LPOSVERSIONINFOEXW, dwTypeMask: DWORD, dwlConditionMask: DWORDLONG } ],
  GetProductInfo: [ int, { dwOSMajorVersion: DWORD, dwOSMinorVersion: DWORD, dwSpMajorVersion: DWORD, dwSpMinorVersion: DWORD, pdwReturnedProductType: PDWORD } ],
  HRESULT_FROM_WIN32: [ long, { x: ulong } ],
  GetSystemPowerStatus: [ int, { lpSystemPowerStatus: LPSYSTEM_POWER_STATUS } ],
  SetSystemPowerState: [ int, { fSuspend: BOOL, fForce: BOOL } ],
  AllocateUserPhysicalPages: [ int, { hProcess: HANDLE, NumberOfPages: PULONG_PTR, PageArray: PULONG_PTR } ],
  AllocateUserPhysicalPagesNuma: [ int, { hProcess: HANDLE, NumberOfPages: PULONG_PTR, PageArray: PULONG_PTR, nndPreferred: DWORD } ],
  FreeUserPhysicalPages: [ int, { hProcess: HANDLE, NumberOfPages: PULONG_PTR, PageArray: PULONG_PTR } ],
  MapUserPhysicalPages: [ int, { VirtualAddress: PVOID, NumberOfPages: ULONG_PTR, PageArray: PULONG_PTR } ],
  MapUserPhysicalPagesScatter: [ int, { VirtualAddresses: VoidT.Δ.Δ, NumberOfPages: ULONG_PTR, PageArray: PULONG_PTR } ],
  CreateJobObjectA: [ VoidT.Δ, { lpJobAttributes: LPSECURITY_ATTRIBUTES, lpName: LPCSTR } ],
  CreateJobObjectW: [ VoidT.Δ, { lpJobAttributes: LPSECURITY_ATTRIBUTES, lpName: LPCWSTR } ],
  OpenJobObjectA: [ VoidT.Δ, { dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCSTR } ],
  OpenJobObjectW: [ VoidT.Δ, { dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCWSTR } ],
  AssignProcessToJobObject: [ int, { hJob: HANDLE, hProcess: HANDLE } ],
  TerminateJobObject: [ int, { hJob: HANDLE, uExitCode: UINT } ],
  QueryInformationJobObject: [ int, { hJob: HANDLE, JobObjectInformationClass: JOBOBJECTINFOCLASS, lpJobObjectInformation: LPVOID, cbJobObjectInformationLength: DWORD, lpReturnLength: LPDWORD } ],
  SetInformationJobObject: [ int, { hJob: HANDLE, JobObjectInformationClass: JOBOBJECTINFOCLASS, lpJobObjectInformation: LPVOID, cbJobObjectInformationLength: DWORD } ],
  IsProcessInJob: [ int, { ProcessHandle: HANDLE, JobHandle: HANDLE, Result: PBOOL } ],
  CreateJobSet: [ int, { NumJob: ULONG, UserJobSet: PJOB_SET_ARRAY, Flags: ULONG } ],
  AddVectoredExceptionHandler: [ VoidT.Δ, { First: ULONG, Handler: PVECTORED_EXCEPTION_HANDLER } ],
  RemoveVectoredExceptionHandler: [ ulong, { Handle: PVOID } ],
  AddVectoredContinueHandler: [ VoidT.Δ, { First: ULONG, Handler: PVECTORED_EXCEPTION_HANDLER } ],
  RemoveVectoredContinueHandler: [ ulong, { Handle: PVOID } ],
  FindFirstVolumeA: [ VoidT.Δ, { lpszVolumeName: LPSTR, cchBufferLength: DWORD } ],
  FindFirstVolumeW: [ VoidT.Δ, { lpszVolumeName: LPWSTR, cchBufferLength: DWORD } ],
  FindNextVolumeA: [ int, { hFindVolume: HANDLE, lpszVolumeName: LPSTR, cchBufferLength: DWORD } ],
  FindNextVolumeW: [ int, { hFindVolume: HANDLE, lpszVolumeName: LPWSTR, cchBufferLength: DWORD } ],
  FindVolumeClose: [ int, { hFindVolume: HANDLE } ],
  FindFirstVolumeMountPointA: [ VoidT.Δ, { lpszRootPathName: LPCSTR, lpszVolumeMountPoint: LPSTR, cchBufferLength: DWORD } ],
  FindFirstVolumeMountPointW: [ VoidT.Δ, { lpszRootPathName: LPCWSTR, lpszVolumeMountPoint: LPWSTR, cchBufferLength: DWORD } ],
  FindNextVolumeMountPointA: [ int, { hFindVolumeMountPoint: HANDLE, lpszVolumeMountPoint: LPSTR, cchBufferLength: DWORD } ],
  FindNextVolumeMountPointW: [ int, { hFindVolumeMountPoint: HANDLE, lpszVolumeMountPoint: LPWSTR, cchBufferLength: DWORD } ],
  FindVolumeMountPointClose: [ int, { hFindVolumeMountPoint: HANDLE } ],
  SetVolumeMountPointA: [ int, { lpszVolumeMountPoint: LPCSTR, lpszVolumeName: LPCSTR } ],
  SetVolumeMountPointW: [ int, { lpszVolumeMountPoint: LPCWSTR, lpszVolumeName: LPCWSTR } ],
  DeleteVolumeMountPointA: [ int, { lpszVolumeMountPoint: LPCSTR } ],
  DeleteVolumeMountPointW: [ int, { lpszVolumeMountPoint: LPCWSTR } ],
  GetVolumeNameForVolumeMountPointA: [ int, { lpszVolumeMountPoint: LPCSTR, lpszVolumeName: LPSTR, cchBufferLength: DWORD } ],
  GetVolumeNameForVolumeMountPointW: [ int, { lpszVolumeMountPoint: LPCWSTR, lpszVolumeName: LPWSTR, cchBufferLength: DWORD } ],
  GetVolumePathNameA: [ int, { lpszFileName: LPCSTR, lpszVolumePathName: LPSTR, cchBufferLength: DWORD } ],
  GetVolumePathNameW: [ int, { lpszFileName: LPCWSTR, lpszVolumePathName: LPWSTR, cchBufferLength: DWORD } ],
  GetVolumePathNamesForVolumeNameA: [ int, { lpszVolumeName: LPCSTR, lpszVolumePathNames: LPCH, cchBufferLength: DWORD, lpcchReturnLength: PDWORD } ],
  GetVolumePathNamesForVolumeNameW: [ int, { lpszVolumeName: LPCWSTR, lpszVolumePathNames: LPWCH, cchBufferLength: DWORD, lpcchReturnLength: PDWORD } ],
  CreateActCtxA: [ VoidT.Δ, { pActCtx: PCACTCTXA } ],
  CreateActCtxW: [ VoidT.Δ, { pActCtx: PCACTCTXW } ],
  AddRefActCtx: [ VoidT, { hActCtx: HANDLE } ],
  ReleaseActCtx: [ VoidT, { hActCtx: HANDLE } ],
  ZombifyActCtx: [ int, { hActCtx: HANDLE } ],
  ActivateActCtx: [ int, { hActCtx: HANDLE, lpCookie: ulong.Δ } ],
  DeactivateActCtx: [ int, { dwFlags: DWORD, ulCookie: ULONG_PTR } ],
  GetCurrentActCtx: [ int, { lphActCtx: VoidT.Δ.Δ } ],
  FindActCtxSectionStringA: [ int, { dwFlags: DWORD, lpExtensionGuid: uint.Δ, ulSectionId: ULONG, lpStringToFind: LPCSTR, ReturnedData: PACTCTX_SECTION_KEYED_DATA } ],
  FindActCtxSectionStringW: [ int, { dwFlags: DWORD, lpExtensionGuid: uint.Δ, ulSectionId: ULONG, lpStringToFind: LPCWSTR, ReturnedData: PACTCTX_SECTION_KEYED_DATA } ],
  FindActCtxSectionGuid: [ int, { dwFlags: DWORD, lpExtensionGuid: uint.Δ, ulSectionId: ULONG, lpGuidToFind: uint.Δ, ReturnedData: PACTCTX_SECTION_KEYED_DATA } ],
  QueryActCtxW: [ int, { dwFlags: DWORD, hActCtx: HANDLE, pvSubInstance: PVOID, ulInfoClass: ULONG, pvBuffer: PVOID, cbBuffer: SIZE_T, pcbWrittenOrRequired: ulong.Δ } ],
  ProcessIdToSessionId: [ int, { dwProcessId: DWORD, pSessionId: ulong.Δ } ],
  WTSGetActiveConsoleSessionId: [ ulong, {  } ],
  IsWow64Process: [ int, { hProcess: HANDLE, Wow64Process: PBOOL } ],
  GetLogicalProcessorInformation: [ int, { Buffer: PSYSTEM_LOGICAL_PROCESSOR_INFORMATION, ReturnedLength: PDWORD } ],
  GetLogicalProcessorInformationEx: [ int, { RelationshipType: LOGICAL_PROCESSOR_RELATIONSHIP, Buffer: PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX, ReturnedLength: PDWORD } ],
  GetActiveProcessorGroupCount: [ ushort, {  } ],
  GetMaximumProcessorGroupCount: [ ushort, {  } ],
  GetActiveProcessorCount: [ ulong, { GroupNumber: WORD } ],
  GetMaximumProcessorCount: [ ulong, { GroupNumber: WORD } ],
  GetNumaHighestNodeNumber: [ int, { HighestNodeNumber: PULONG } ],
  GetNumaProcessorNode: [ int, { Processor: UCHAR, NodeNumber: PUCHAR } ],
  GetNumaNodeNumberFromHandle: [ int, { hFile: HANDLE, NodeNumber: PUSHORT } ],
  GetNumaProcessorNodeEx: [ int, { Processor: PPROCESSOR_NUMBER, NodeNumber: PUSHORT } ],
  GetNumaNodeProcessorMask: [ int, { Node: UCHAR, ProcessorMask: PULONGLONG } ],
  GetNumaNodeProcessorMaskEx: [ int, { Node: USHORT, ProcessorMask: PGROUP_AFFINITY } ],
  GetNumaAvailableMemoryNode: [ int, { Node: UCHAR, AvailableBytes: PULONGLONG } ],
  GetNumaAvailableMemoryNodeEx: [ int, { Node: USHORT, AvailableBytes: PULONGLONG } ],
  GetNumaProximityNode: [ int, { ProximityId: ULONG, NodeNumber: PUCHAR } ],
  GetNumaProximityNodeEx: [ int, { ProximityId: ULONG, NodeNumber: PUSHORT } ],
  RegisterApplicationRecoveryCallback: [ long, { pRecoveyCallback: APPLICATION_RECOVERY_CALLBACK, pvParameter: PVOID, dwPingInterval: DWORD, dwFlags: DWORD } ],
  UnregisterApplicationRecoveryCallback: [ long, {  } ],
  RegisterApplicationRestart: [ long, { pwzCommandline: PCWSTR, dwFlags: DWORD } ],
  UnregisterApplicationRestart: [ long, {  } ],
  GetApplicationRecoveryCallback: [ long, { hProcess: HANDLE, pRecoveryCallback: APPLICATION_RECOVERY_CALLBACK.Δ, ppvParameter: VoidT.Δ.Δ, pdwPingInterval: PDWORD, pdwFlags: PDWORD } ],
  GetApplicationRestartSettings: [ long, { hProcess: HANDLE, pwzCommandline: PWSTR, pcchSize: PDWORD, pdwFlags: PDWORD } ],
  ApplicationRecoveryInProgress: [ long, { pbCancelled: PBOOL } ],
  ApplicationRecoveryFinished: [ VoidT, { bSuccess: BOOL } ],
  SetFileInformationByHandle: [ int, { hFile: HANDLE, FileInformationClass: FILE_INFO_BY_HANDLE_CLASS, lpFileInformation: LPVOID, dwBufferSize: DWORD } ],
  GetFileInformationByHandleEx: [ int, { hFile: HANDLE, FileInformationClass: FILE_INFO_BY_HANDLE_CLASS, lpFileInformation: LPVOID, dwBufferSize: DWORD } ],
  OpenFileById: [ VoidT.Δ, { hVolumeHint: HANDLE, lpFileId: LPFILE_ID_DESCRIPTOR, dwDesiredAccess: DWORD, dwShareMode: DWORD, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, dwFlagsAndAttributes: DWORD } ],
  CreateSymbolicLinkA: [ uchar, { lpSymlinkFileName: LPCSTR, lpTargetFileName: LPCSTR, dwFlags: DWORD } ],
  CreateSymbolicLinkW: [ uchar, { lpSymlinkFileName: LPCWSTR, lpTargetFileName: LPCWSTR, dwFlags: DWORD } ],
  CreateSymbolicLinkTransactedA: [ uchar, { lpSymlinkFileName: LPCSTR, lpTargetFileName: LPCSTR, dwFlags: DWORD, hTransaction: HANDLE } ],
  CreateSymbolicLinkTransactedW: [ uchar, { lpSymlinkFileName: LPCWSTR, lpTargetFileName: LPCWSTR, dwFlags: DWORD, hTransaction: HANDLE } ],
  GetFinalPathNameByHandleA: [ ulong, { hFile: HANDLE, lpszFilePath: LPSTR, cchFilePath: DWORD, dwFlags: DWORD } ],
  GetFinalPathNameByHandleW: [ ulong, { hFile: HANDLE, lpszFilePath: LPWSTR, cchFilePath: DWORD, dwFlags: DWORD } ],
  QueryActCtxSettingsW: [ int, { dwFlags: DWORD, hActCtx: HANDLE, settingsNameSpace: PCWSTR, settingName: PCWSTR, pvBuffer: PWSTR, dwBuffer: SIZE_T, pdwWrittenOrRequired: ulong.Δ } ],
  ReplacePartitionUnit: [ int, { TargetPartition: PWSTR, SparePartition: PWSTR, Flags: ULONG } ],
  AddSecureMemoryCacheCallback: [ int, { pfnCallBack: PSECURE_MEMORY_CACHE_CALLBACK } ],
  RemoveSecureMemoryCacheCallback: [ int, { pfnCallBack: PSECURE_MEMORY_CACHE_CALLBACK } ],
  CopyExtendedContext: [ int, { Destination: PCONTEXT_EX, ContextFlags: DWORD, Source: PCONTEXT_EX } ],
  InitializeExtendedContext: [ int, { Context: PVOID, ContextFlags: DWORD, ContextEx: VOIDPTR.Δ } ],
  GetEnabledExtendedFeatures: [ ulonglong, { FeatureMask: DWORD64 } ],
  GetExtendedContextLength: [ int, { ContextFlags: DWORD, ContextLength: PDWORD } ],
  GetExtendedFeaturesMask: [ ulonglong, { ContextEx: PCONTEXT_EX } ],
  LocateExtendedFeature: [ VoidT.Δ, { ContextEx: PCONTEXT_EX, FeatureId: DWORD, Length: PDWORD } ],
  LocateLegacyContext: [ VOIDPTR, { ContextEx: PCONTEXT_EX, Length: PDWORD } ],
  SetExtendedFeaturesMask: [ VoidT, { ContextEx: PCONTEXT_EX, FeatureMask: DWORD64 } ],
  EnableThreadProfiling: [ ulong, { ThreadHandle: HANDLE, Flags: DWORD, HardwareCounters: DWORD64, PerformanceDataHandle: VoidT.Δ.Δ } ],
  DisableThreadProfiling: [ ulong, { PerformanceDataHandle: HANDLE } ],
  QueryThreadProfiling: [ ulong, { ThreadHandle: HANDLE, Enabled: PBOOLEAN } ],
  ReadThreadProfilingData: [ ulong, { PerformanceDataHandle: HANDLE, Flags: DWORD, PerformanceData: PPERFORMANCE_DATA } ],
  AddFontResourceA: [ VoidT, { LPCSTR: LPCSTR } ],
  AddFontResourceW: [ VoidT, { LPCWSTR: LPCWSTR } ],
  AnimatePalette: [ int, { hPal: HPALETTE, iStartIndex: UINT, cEntries: UINT, ppe: uint.Δ } ],
  Arc: [ int, { hdc: HDC, x1: int, y1: int, x2: int, y2: int, x3: int, y3: int, x4: int, y4: int } ],
  BitBlt: [ int, { hdc: HDC, x: int, y: int, cx: int, cy: int, hdcSrc: HDC, x1: int, y1: int, rop: DWORD } ],
  CancelDC: [ int, { hdc: HDC } ],
  Chord: [ int, { hdc: HDC, x1: int, y1: int, x2: int, y2: int, x3: int, y3: int, x4: int, y4: int } ],
  ChoosePixelFormat: [ VoidT, { hdc: HDC, ppfd: uint.Δ } ],
  CloseMetaFile: [ VOIDPTR, { hdc: HDC } ],
  CombineRgn: [ VoidT, { hrgnDst: HRGN, hrgnSrc1: HRGN, hrgnSrc2: HRGN, iMode: int } ],
  CopyMetaFileA: [ VOIDPTR, { LPCSTR: LPCSTR } ],
  CopyMetaFileW: [ VOIDPTR, { LPCWSTR: LPCWSTR } ],
  CreateBitmap: [ VOIDPTR, { nWidth: int, nHeight: int, nPlanes: UINT, nBitCount: UINT, lpBits: VoidT.Δ } ],
  CreateBitmapIndirect: [ VOIDPTR, { pbm: uint.Δ } ],
  CreateBrushIndirect: [ VOIDPTR, { plbrush: uint.Δ } ],
  CreateCompatibleBitmap: [ VOIDPTR, { hdc: HDC, cx: int, cy: int } ],
  CreateDiscardableBitmap: [ VOIDPTR, { hdc: HDC, cx: int, cy: int } ],
  CreateCompatibleDC: [ VOIDPTR, { hdc: HDC } ],
  CreateDCA: [ VOIDPTR, { pwszDriver: LPCSTR, pwszDevice: LPCSTR, pszPort: LPCSTR, pdm: uint.Δ } ],
  CreateDCW: [ VOIDPTR, { pwszDriver: LPCWSTR, pwszDevice: LPCWSTR, pszPort: LPCWSTR, pdm: uint.Δ } ],
  CreateDIBitmap: [ VOIDPTR, { hdc: HDC, pbmih: uint.Δ, flInit: DWORD, pjBits: VoidT.Δ, pbmi: uint.Δ, iUsage: UINT } ],
  CreateDIBPatternBrush: [ VOIDPTR, { h: HGLOBAL, iUsage: UINT } ],
  CreateDIBPatternBrushPt: [ VOIDPTR, { lpPackedDIB: VoidT.Δ, iUsage: UINT } ],
  CreateEllipticRgn: [ VOIDPTR, { x1: int, y1: int, x2: int, y2: int } ],
  CreateEllipticRgnIndirect: [ VOIDPTR, { lprect: uint.Δ } ],
  CreateFontIndirectA: [ VOIDPTR, { lplf: uint.Δ } ],
  CreateFontIndirectW: [ VOIDPTR, { lplf: uint.Δ } ],
  CreateFontA: [ VOIDPTR, { cHeight: int, cWidth: int, cEscapement: int, cOrientation: int, cWeight: int, bItalic: DWORD, bUnderline: DWORD, bStrikeOut: DWORD, iCharSet: DWORD, iOutPrecision: DWORD, iClipPrecision: DWORD, iQuality: DWORD, iPitchAndFamily: DWORD, pszFaceName: LPCSTR } ],
  CreateFontW: [ VOIDPTR, { cHeight: int, cWidth: int, cEscapement: int, cOrientation: int, cWeight: int, bItalic: DWORD, bUnderline: DWORD, bStrikeOut: DWORD, iCharSet: DWORD, iOutPrecision: DWORD, iClipPrecision: DWORD, iQuality: DWORD, iPitchAndFamily: DWORD, pszFaceName: LPCWSTR } ],
  CreateHatchBrush: [ VOIDPTR, { iHatch: int, color: COLORREF } ],
  CreateICA: [ VOIDPTR, { pszDriver: LPCSTR, pszDevice: LPCSTR, pszPort: LPCSTR, pdm: uint.Δ } ],
  CreateICW: [ VOIDPTR, { pszDriver: LPCWSTR, pszDevice: LPCWSTR, pszPort: LPCWSTR, pdm: uint.Δ } ],
  CreateMetaFileA: [ VOIDPTR, { pszFile: LPCSTR } ],
  CreateMetaFileW: [ VOIDPTR, { pszFile: LPCWSTR } ],
  CreatePalette: [ VOIDPTR, { plpal: uint.Δ } ],
  CreatePen: [ VOIDPTR, { iStyle: int, cWidth: int, color: COLORREF } ],
  CreatePenIndirect: [ VOIDPTR, { plpen: uint.Δ } ],
  CreatePolyPolygonRgn: [ VOIDPTR, { pptl: uint.Δ, pc: int.Δ, cPoly: int, iMode: int } ],
  CreatePatternBrush: [ VOIDPTR, { hbm: HBITMAP } ],
  CreateRectRgn: [ VOIDPTR, { x1: int, y1: int, x2: int, y2: int } ],
  CreateRectRgnIndirect: [ VOIDPTR, { lprect: uint.Δ } ],
  CreateRoundRectRgn: [ VOIDPTR, { x1: int, y1: int, x2: int, y2: int, w: int, h: int } ],
  CreateScalableFontResourceA: [ int, { fdwHidden: DWORD, lpszFont: LPCSTR, lpszFile: LPCSTR, lpszPath: LPCSTR } ],
  CreateScalableFontResourceW: [ int, { fdwHidden: DWORD, lpszFont: LPCWSTR, lpszFile: LPCWSTR, lpszPath: LPCWSTR } ],
  CreateSolidBrush: [ VOIDPTR, { color: COLORREF } ],
  DeleteDC: [ int, { hdc: HDC } ],
  DeleteMetaFile: [ int, { hmf: HMETAFILE } ],
  DeleteObject: [ int, { ho: HGDIOBJ } ],
  DescribePixelFormat: [ VoidT, { hdc: HDC, iPixelFormat: int, nBytes: UINT, ppfd: LPPIXELFORMATDESCRIPTOR } ],
  DeviceCapabilitiesA: [ VoidT, { pDevice: LPCSTR, pPort: LPCSTR, fwCapability: WORD, pOutput: LPSTR, pDevMode: uint.Δ } ],
  DeviceCapabilitiesW: [ VoidT, { pDevice: LPCWSTR, pPort: LPCWSTR, fwCapability: WORD, pOutput: LPWSTR, pDevMode: uint.Δ } ],
  DrawEscape: [ VoidT, { hdc: HDC, iEscape: int, cjIn: int, lpIn: LPCSTR } ],
  Ellipse: [ int, { hdc: HDC, left: int, top: int, right: int, bottom: int } ],
  EnumFontFamiliesExA: [ VoidT, { hdc: HDC, lpLogfont: LPLOGFONTA, lpProc: FONTENUMPROCA, lParam: LPARAM, dwFlags: DWORD } ],
  EnumFontFamiliesExW: [ VoidT, { hdc: HDC, lpLogfont: LPLOGFONTW, lpProc: FONTENUMPROCW, lParam: LPARAM, dwFlags: DWORD } ],
  EnumFontFamiliesA: [ VoidT, { hdc: HDC, lpLogfont: LPCSTR, lpProc: FONTENUMPROCA, lParam: LPARAM } ],
  EnumFontFamiliesW: [ VoidT, { hdc: HDC, lpLogfont: LPCWSTR, lpProc: FONTENUMPROCW, lParam: LPARAM } ],
  EnumFontsA: [ VoidT, { hdc: HDC, lpLogfont: LPCSTR, lpProc: FONTENUMPROCA, lParam: LPARAM } ],
  EnumFontsW: [ VoidT, { hdc: HDC, lpLogfont: LPCWSTR, lpProc: FONTENUMPROCW, lParam: LPARAM } ],
  EnumObjects: [ VoidT, { hdc: HDC, nType: int, lpFunc: GOBJENUMPROC, lParam: LPARAM } ],
  EqualRgn: [ int, { hrgn1: HRGN, hrgn2: HRGN } ],
  Escape: [ VoidT, { hdc: HDC, iEscape: int, cjIn: int, pvIn: LPCSTR, pvOut: LPVOID } ],
  ExtEscape: [ VoidT, { hdc: HDC, iEscape: int, cjInput: int, lpInData: LPCSTR, cjOutput: int, lpOutData: LPSTR } ],
  ExcludeClipRect: [ VoidT, { hdc: HDC, left: int, top: int, right: int, bottom: int } ],
  ExtCreateRegion: [ VOIDPTR, { lpx: uint.Δ, nCount: DWORD, lpData: uint.Δ } ],
  ExtFloodFill: [ int, { hdc: HDC, x: int, y: int, color: COLORREF, type: UINT } ],
  FillRgn: [ int, { hdc: HDC, hrgn: HRGN, hbr: HBRUSH } ],
  FloodFill: [ int, { hdc: HDC, x: int, y: int, color: COLORREF } ],
  FrameRgn: [ int, { hdc: HDC, hrgn: HRGN, hbr: HBRUSH, w: int, h: int } ],
  GetROP2: [ VoidT, { hdc: HDC } ],
  GetAspectRatioFilterEx: [ int, { hdc: HDC, lpsize: LPSIZE } ],
  GetBkColor: [ ulong, { hdc: HDC } ],
  GetDCBrushColor: [ ulong, { hdc: HDC } ],
  GetDCPenColor: [ ulong, { hdc: HDC } ],
  GetBkMode: [ VoidT, { hdc: HDC } ],
  GetBitmapBits: [ long, { hbit: HBITMAP, cb: LONG, lpvBits: LPVOID } ],
  GetBitmapDimensionEx: [ int, { hbit: HBITMAP, lpsize: LPSIZE } ],
  GetBoundsRect: [ uint, { hdc: HDC, lprect: LPRECT, flags: UINT } ],
  GetBrushOrgEx: [ int, { hdc: HDC, lppt: LPPOINT } ],
  GetCharWidthA: [ int, { hdc: HDC, iFirst: UINT, iLast: UINT, lpBuffer: LPINT } ],
  GetCharWidthW: [ int, { hdc: HDC, iFirst: UINT, iLast: UINT, lpBuffer: LPINT } ],
  GetCharWidth32A: [ int, { hdc: HDC, iFirst: UINT, iLast: UINT, lpBuffer: LPINT } ],
  GetCharWidth32W: [ int, { hdc: HDC, iFirst: UINT, iLast: UINT, lpBuffer: LPINT } ],
  GetCharWidthFloatA: [ int, { hdc: HDC, iFirst: UINT, iLast: UINT, lpBuffer: PFLOAT } ],
  GetCharWidthFloatW: [ int, { hdc: HDC, iFirst: UINT, iLast: UINT, lpBuffer: PFLOAT } ],
  GetCharABCWidthsA: [ int, { hdc: HDC, wFirst: UINT, wLast: UINT, lpABC: LPABC } ],
  GetCharABCWidthsW: [ int, { hdc: HDC, wFirst: UINT, wLast: UINT, lpABC: LPABC } ],
  GetCharABCWidthsFloatA: [ int, { hdc: HDC, iFirst: UINT, iLast: UINT, lpABC: LPABCFLOAT } ],
  GetCharABCWidthsFloatW: [ int, { hdc: HDC, iFirst: UINT, iLast: UINT, lpABC: LPABCFLOAT } ],
  GetClipBox: [ VoidT, { hdc: HDC, lprect: LPRECT } ],
  GetClipRgn: [ VoidT, { hdc: HDC, hrgn: HRGN } ],
  GetMetaRgn: [ VoidT, { hdc: HDC, hrgn: HRGN } ],
  GetCurrentObject: [ VoidT.Δ, { hdc: HDC, type: UINT } ],
  GetCurrentPositionEx: [ int, { hdc: HDC, lppt: LPPOINT } ],
  GetDeviceCaps: [ VoidT, { hdc: HDC, index: int } ],
  GetDIBits: [ VoidT, { hdc: HDC, hbm: HBITMAP, start: UINT, cLines: UINT, lpvBits: LPVOID, lpbmi: LPBITMAPINFO, usage: UINT } ],
  GetFontData: [ ulong, { hdc: HDC, dwTable: DWORD, dwOffset: DWORD, pvBuffer: PVOID, cjBuffer: DWORD } ],
  GetGlyphOutlineA: [ ulong, { hdc: HDC, uChar: UINT, fuFormat: UINT, lpgm: LPGLYPHMETRICS, cjBuffer: DWORD, pvBuffer: LPVOID, lpmat2: uint.Δ } ],
  GetGlyphOutlineW: [ ulong, { hdc: HDC, uChar: UINT, fuFormat: UINT, lpgm: LPGLYPHMETRICS, cjBuffer: DWORD, pvBuffer: LPVOID, lpmat2: uint.Δ } ],
  GetGraphicsMode: [ VoidT, { hdc: HDC } ],
  GetMapMode: [ VoidT, { hdc: HDC } ],
  GetMetaFileBitsEx: [ uint, { hMF: HMETAFILE, cbBuffer: UINT, lpData: LPVOID } ],
  GetMetaFileA: [ VOIDPTR, { lpName: LPCSTR } ],
  GetMetaFileW: [ VOIDPTR, { lpName: LPCWSTR } ],
  GetNearestColor: [ ulong, { hdc: HDC, color: COLORREF } ],
  GetNearestPaletteIndex: [ uint, { h: HPALETTE, color: COLORREF } ],
  GetObjectType: [ ulong, { h: HGDIOBJ } ],
  GetOutlineTextMetricsA: [ uint, { hdc: HDC, cjCopy: UINT, potm: LPOUTLINETEXTMETRICA } ],
  GetOutlineTextMetricsW: [ uint, { hdc: HDC, cjCopy: UINT, potm: LPOUTLINETEXTMETRICW } ],
  GetPaletteEntries: [ uint, { hpal: HPALETTE, iStart: UINT, cEntries: UINT, pPalEntries: LPPALETTEENTRY } ],
  GetPixel: [ ulong, { hdc: HDC, x: int, y: int } ],
  GetPixelFormat: [ VoidT, { hdc: HDC } ],
  GetPolyFillMode: [ VoidT, { hdc: HDC } ],
  GetRasterizerCaps: [ int, { lpraststat: LPRASTERIZER_STATUS, cjBytes: UINT } ],
  GetRandomRgn: [ VoidT, { hdc: HDC, hrgn: HRGN, i: INT } ],
  GetRegionData: [ ulong, { hrgn: HRGN, nCount: DWORD, lpRgnData: LPRGNDATA } ],
  GetRgnBox: [ VoidT, { hrgn: HRGN, lprc: LPRECT } ],
  GetStockObject: [ VoidT.Δ, { i: int } ],
  GetStretchBltMode: [ VoidT, { hdc: HDC } ],
  GetSystemPaletteEntries: [ uint, { hdc: HDC, iStart: UINT, cEntries: UINT, pPalEntries: LPPALETTEENTRY } ],
  GetSystemPaletteUse: [ uint, { hdc: HDC } ],
  GetTextCharacterExtra: [ VoidT, { hdc: HDC } ],
  GetTextAlign: [ uint, { hdc: HDC } ],
  GetTextColor: [ ulong, { hdc: HDC } ],
  GetTextExtentPointA: [ int, { hdc: HDC, lpString: LPCSTR, c: int, lpsz: LPSIZE } ],
  GetTextExtentPointW: [ int, { hdc: HDC, lpString: LPCWSTR, c: int, lpsz: LPSIZE } ],
  GetTextExtentPoint32A: [ int, { hdc: HDC, lpString: LPCSTR, c: int, psizl: LPSIZE } ],
  GetTextExtentPoint32W: [ int, { hdc: HDC, lpString: LPCWSTR, c: int, psizl: LPSIZE } ],
  GetTextExtentExPointA: [ int, { hdc: HDC, lpszString: LPCSTR, cchString: int, nMaxExtent: int, lpnFit: LPINT, lpnDx: LPINT, lpSize: LPSIZE } ],
  GetTextExtentExPointW: [ int, { hdc: HDC, lpszString: LPCWSTR, cchString: int, nMaxExtent: int, lpnFit: LPINT, lpnDx: LPINT, lpSize: LPSIZE } ],
  GetTextCharset: [ VoidT, { hdc: HDC } ],
  GetTextCharsetInfo: [ VoidT, { hdc: HDC, lpSig: LPFONTSIGNATURE, dwFlags: DWORD } ],
  TranslateCharsetInfo: [ int, { lpSrc: ulong.Δ, lpCs: LPCHARSETINFO, dwFlags: DWORD } ],
  GetFontLanguageInfo: [ ulong, { hdc: HDC } ],
  GetCharacterPlacementA: [ ulong, { hdc: HDC, lpString: LPCSTR, nCount: int, nMexExtent: int, lpResults: LPGCP_RESULTSA, dwFlags: DWORD } ],
  GetCharacterPlacementW: [ ulong, { hdc: HDC, lpString: LPCWSTR, nCount: int, nMexExtent: int, lpResults: LPGCP_RESULTSW, dwFlags: DWORD } ],
  GetFontUnicodeRanges: [ ulong, { hdc: HDC, lpgs: LPGLYPHSET } ],
  GetGlyphIndicesA: [ ulong, { hdc: HDC, lpstr: LPCSTR, c: int, pgi: LPWORD, fl: DWORD } ],
  GetGlyphIndicesW: [ ulong, { hdc: HDC, lpstr: LPCWSTR, c: int, pgi: LPWORD, fl: DWORD } ],
  GetTextExtentPointI: [ int, { hdc: HDC, pgiIn: LPWORD, cgi: int, psize: LPSIZE } ],
  GetTextExtentExPointI: [ int, { hdc: HDC, lpwszString: LPWORD, cwchString: int, nMaxExtent: int, lpnFit: LPINT, lpnDx: LPINT, lpSize: LPSIZE } ],
  GetCharWidthI: [ int, { hdc: HDC, giFirst: UINT, cgi: UINT, pgi: LPWORD, piWidths: LPINT } ],
  GetCharABCWidthsI: [ int, { hdc: HDC, giFirst: UINT, cgi: UINT, pgi: LPWORD, pabc: LPABC } ],
  AddFontResourceExA: [ VoidT, { name: LPCSTR, fl: DWORD, res: PVOID } ],
  AddFontResourceExW: [ VoidT, { name: LPCWSTR, fl: DWORD, res: PVOID } ],
  RemoveFontResourceExA: [ int, { name: LPCSTR, fl: DWORD, pdv: PVOID } ],
  RemoveFontResourceExW: [ int, { name: LPCWSTR, fl: DWORD, pdv: PVOID } ],
  AddFontMemResourceEx: [ VoidT.Δ, { pFileView: PVOID, cjSize: DWORD, pvResrved: PVOID, pNumFonts: ulong.Δ } ],
  RemoveFontMemResourceEx: [ int, { h: HANDLE } ],
  CreateFontIndirectExA: [ VOIDPTR, { uint.Δ: uint.Δ } ],
  CreateFontIndirectExW: [ VOIDPTR, { uint.Δ: uint.Δ } ],
  GetViewportExtEx: [ int, { hdc: HDC, lpsize: LPSIZE } ],
  GetViewportOrgEx: [ int, { hdc: HDC, lppoint: LPPOINT } ],
  GetWindowExtEx: [ int, { hdc: HDC, lpsize: LPSIZE } ],
  GetWindowOrgEx: [ int, { hdc: HDC, lppoint: LPPOINT } ],
  IntersectClipRect: [ VoidT, { hdc: HDC, left: int, top: int, right: int, bottom: int } ],
  InvertRgn: [ int, { hdc: HDC, hrgn: HRGN } ],
  LineDDA: [ int, { xStart: int, yStart: int, xEnd: int, yEnd: int, lpProc: LINEDDAPROC, data: LPARAM } ],
  LineTo: [ int, { hdc: HDC, x: int, y: int } ],
  MaskBlt: [ int, { hdcDest: HDC, xDest: int, yDest: int, width: int, height: int, hdcSrc: HDC, xSrc: int, ySrc: int, hbmMask: HBITMAP, xMask: int, yMask: int, rop: DWORD } ],
  PlgBlt: [ int, { hdcDest: HDC, lpPoint: uint.Δ, hdcSrc: HDC, xSrc: int, ySrc: int, width: int, height: int, hbmMask: HBITMAP, xMask: int, yMask: int } ],
  OffsetClipRgn: [ VoidT, { hdc: HDC, x: int, y: int } ],
  OffsetRgn: [ VoidT, { hrgn: HRGN, x: int, y: int } ],
  PatBlt: [ int, { hdc: HDC, x: int, y: int, w: int, h: int, rop: DWORD } ],
  Pie: [ int, { hdc: HDC, left: int, top: int, right: int, bottom: int, xr1: int, yr1: int, xr2: int, yr2: int } ],
  PlayMetaFile: [ int, { hdc: HDC, hmf: HMETAFILE } ],
  PaintRgn: [ int, { hdc: HDC, hrgn: HRGN } ],
  PolyPolygon: [ int, { hdc: HDC, apt: uint.Δ, asz: int.Δ, csz: int } ],
  PtInRegion: [ int, { hrgn: HRGN, x: int, y: int } ],
  PtVisible: [ int, { hdc: HDC, x: int, y: int } ],
  RectInRegion: [ int, { hrgn: HRGN, lprect: uint.Δ } ],
  RectVisible: [ int, { hdc: HDC, lprect: uint.Δ } ],
  Rectangle: [ int, { hdc: HDC, left: int, top: int, right: int, bottom: int } ],
  RestoreDC: [ int, { hdc: HDC, nSavedDC: int } ],
  ResetDCA: [ VOIDPTR, { hdc: HDC, lpdm: uint.Δ } ],
  ResetDCW: [ VOIDPTR, { hdc: HDC, lpdm: uint.Δ } ],
  RealizePalette: [ uint, { hdc: HDC } ],
  RemoveFontResourceA: [ int, { lpFileName: LPCSTR } ],
  RemoveFontResourceW: [ int, { lpFileName: LPCWSTR } ],
  RoundRect: [ int, { hdc: HDC, left: int, top: int, right: int, bottom: int, width: int, height: int } ],
  ResizePalette: [ int, { hpal: HPALETTE, n: UINT } ],
  SaveDC: [ VoidT, { hdc: HDC } ],
  SelectClipRgn: [ VoidT, { hdc: HDC, hrgn: HRGN } ],
  ExtSelectClipRgn: [ VoidT, { hdc: HDC, hrgn: HRGN, mode: int } ],
  SetMetaRgn: [ VoidT, { hdc: HDC } ],
  SelectObject: [ VoidT.Δ, { hdc: HDC, h: HGDIOBJ } ],
  SelectPalette: [ VOIDPTR, { hdc: HDC, hPal: HPALETTE, bForceBkgd: BOOL } ],
  SetBkColor: [ ulong, { hdc: HDC, color: COLORREF } ],
  SetDCBrushColor: [ ulong, { hdc: HDC, color: COLORREF } ],
  SetDCPenColor: [ ulong, { hdc: HDC, color: COLORREF } ],
  SetBkMode: [ VoidT, { hdc: HDC, mode: int } ],
  SetBitmapBits: [ long, { hbm: HBITMAP, cb: DWORD, pvBits: VoidT.Δ } ],
  SetBoundsRect: [ uint, { hdc: HDC, lprect: uint.Δ, flags: UINT } ],
  SetDIBits: [ VoidT, { hdc: HDC, hbm: HBITMAP, start: UINT, cLines: UINT, lpBits: VoidT.Δ, lpbmi: uint.Δ, ColorUse: UINT } ],
  SetDIBitsToDevice: [ VoidT, { hdc: HDC, xDest: int, yDest: int, w: DWORD, h: DWORD, xSrc: int, ySrc: int, StartScan: UINT, cLines: UINT, lpvBits: VoidT.Δ, lpbmi: uint.Δ, ColorUse: UINT } ],
  SetMapperFlags: [ ulong, { hdc: HDC, flags: DWORD } ],
  SetGraphicsMode: [ VoidT, { hdc: HDC, iMode: int } ],
  SetMapMode: [ VoidT, { hdc: HDC, iMode: int } ],
  SetLayout: [ ulong, { hdc: HDC, l: DWORD } ],
  GetLayout: [ ulong, { hdc: HDC } ],
  SetMetaFileBitsEx: [ VOIDPTR, { cbBuffer: UINT, lpData: uchar.Δ } ],
  SetPaletteEntries: [ uint, { hpal: HPALETTE, iStart: UINT, cEntries: UINT, pPalEntries: uint.Δ } ],
  SetPixel: [ ulong, { hdc: HDC, x: int, y: int, color: COLORREF } ],
  SetPixelV: [ int, { hdc: HDC, x: int, y: int, color: COLORREF } ],
  SetPixelFormat: [ int, { hdc: HDC, format: int, ppfd: uint.Δ } ],
  SetPolyFillMode: [ VoidT, { hdc: HDC, mode: int } ],
  StretchBlt: [ int, { hdcDest: HDC, xDest: int, yDest: int, wDest: int, hDest: int, hdcSrc: HDC, xSrc: int, ySrc: int, wSrc: int, hSrc: int, rop: DWORD } ],
  SetRectRgn: [ int, { hrgn: HRGN, left: int, top: int, right: int, bottom: int } ],
  StretchDIBits: [ VoidT, { hdc: HDC, xDest: int, yDest: int, DestWidth: int, DestHeight: int, xSrc: int, ySrc: int, SrcWidth: int, SrcHeight: int, lpBits: VoidT.Δ, lpbmi: uint.Δ, iUsage: UINT, rop: DWORD } ],
  SetROP2: [ VoidT, { hdc: HDC, rop2: int } ],
  SetStretchBltMode: [ VoidT, { hdc: HDC, mode: int } ],
  SetSystemPaletteUse: [ uint, { hdc: HDC, use: UINT } ],
  SetTextCharacterExtra: [ VoidT, { hdc: HDC, extra: int } ],
  SetTextColor: [ ulong, { hdc: HDC, color: COLORREF } ],
  SetTextAlign: [ uint, { hdc: HDC, align: UINT } ],
  SetTextJustification: [ int, { hdc: HDC, extra: int, count: int } ],
  UpdateColors: [ int, { hdc: HDC } ],
  AlphaBlend: [ int, { hdcDest: HDC, xoriginDest: int, yoriginDest: int, wDest: int, hDest: int, hdcSrc: HDC, xoriginSrc: int, yoriginSrc: int, wSrc: int, hSrc: int, ftn: BLENDFUNCTION } ],
  TransparentBlt: [ int, { hdcDest: HDC, xoriginDest: int, yoriginDest: int, wDest: int, hDest: int, hdcSrc: HDC, xoriginSrc: int, yoriginSrc: int, wSrc: int, hSrc: int, crTransparent: UINT } ],
  GradientFill: [ int, { hdc: HDC, pVertex: PTRIVERTEX, nVertex: ULONG, pMesh: PVOID, nMesh: ULONG, ulMode: ULONG } ],
  GdiAlphaBlend: [ int, { hdcDest: HDC, xoriginDest: int, yoriginDest: int, wDest: int, hDest: int, hdcSrc: HDC, xoriginSrc: int, yoriginSrc: int, wSrc: int, hSrc: int, ftn: BLENDFUNCTION } ],
  GdiTransparentBlt: [ int, { hdcDest: HDC, xoriginDest: int, yoriginDest: int, wDest: int, hDest: int, hdcSrc: HDC, xoriginSrc: int, yoriginSrc: int, wSrc: int, hSrc: int, crTransparent: UINT } ],
  GdiGradientFill: [ int, { hdc: HDC, pVertex: PTRIVERTEX, nVertex: ULONG, pMesh: PVOID, nCount: ULONG, ulMode: ULONG } ],
  PlayMetaFileRecord: [ int, { hdc: HDC, lpHandleTable: LPHANDLETABLE, lpMR: LPMETARECORD, noObjs: UINT } ],
  EnumMetaFile: [ int, { hdc: HDC, hmf: HMETAFILE, proc: MFENUMPROC, param: LPARAM } ],
  CloseEnhMetaFile: [ VOIDPTR, { hdc: HDC } ],
  CopyEnhMetaFileA: [ VOIDPTR, { hEnh: HENHMETAFILE, lpFileName: LPCSTR } ],
  CopyEnhMetaFileW: [ VOIDPTR, { hEnh: HENHMETAFILE, lpFileName: LPCWSTR } ],
  CreateEnhMetaFileA: [ VOIDPTR, { hdc: HDC, lpFilename: LPCSTR, lprc: uint.Δ, lpDesc: LPCSTR } ],
  CreateEnhMetaFileW: [ VOIDPTR, { hdc: HDC, lpFilename: LPCWSTR, lprc: uint.Δ, lpDesc: LPCWSTR } ],
  DeleteEnhMetaFile: [ int, { hmf: HENHMETAFILE } ],
  EnumEnhMetaFile: [ int, { hdc: HDC, hmf: HENHMETAFILE, proc: ENHMFENUMPROC, param: LPVOID, lpRect: uint.Δ } ],
  GetEnhMetaFileA: [ VOIDPTR, { lpName: LPCSTR } ],
  GetEnhMetaFileW: [ VOIDPTR, { lpName: LPCWSTR } ],
  GetEnhMetaFileBits: [ uint, { hEMF: HENHMETAFILE, nSize: UINT, lpData: LPBYTE } ],
  GetEnhMetaFileDescriptionA: [ uint, { hemf: HENHMETAFILE, cchBuffer: UINT, lpDescription: LPSTR } ],
  GetEnhMetaFileDescriptionW: [ uint, { hemf: HENHMETAFILE, cchBuffer: UINT, lpDescription: LPWSTR } ],
  GetEnhMetaFileHeader: [ uint, { hemf: HENHMETAFILE, nSize: UINT, lpEnhMetaHeader: LPENHMETAHEADER } ],
  GetEnhMetaFilePaletteEntries: [ uint, { hemf: HENHMETAFILE, nNumEntries: UINT, lpPaletteEntries: LPPALETTEENTRY } ],
  GetEnhMetaFilePixelFormat: [ uint, { hemf: HENHMETAFILE, cbBuffer: UINT, ppfd: uint.Δ } ],
  GetWinMetaFileBits: [ uint, { hemf: HENHMETAFILE, cbData16: UINT, pData16: LPBYTE, iMapMode: INT, hdcRef: HDC } ],
  PlayEnhMetaFile: [ int, { hdc: HDC, hmf: HENHMETAFILE, lprect: uint.Δ } ],
  PlayEnhMetaFileRecord: [ int, { hdc: HDC, pht: LPHANDLETABLE, pmr: uint.Δ, cht: UINT } ],
  SetEnhMetaFileBits: [ VOIDPTR, { nSize: UINT, pb: uchar.Δ } ],
  SetWinMetaFileBits: [ VOIDPTR, { nSize: UINT, lpMeta16Data: uchar.Δ, hdcRef: HDC, lpMFP: uint.Δ } ],
  GdiComment: [ int, { hdc: HDC, nSize: UINT, lpData: uchar.Δ } ],
  GetTextMetricsA: [ int, { hdc: HDC, lptm: LPTEXTMETRICA } ],
  GetTextMetricsW: [ int, { hdc: HDC, lptm: LPTEXTMETRICW } ],
  AngleArc: [ int, { hdc: HDC, x: int, y: int, r: DWORD, StartAngle: FLOAT, SweepAngle: FLOAT } ],
  PolyPolyline: [ int, { hdc: HDC, apt: uint.Δ, asz: ulong.Δ, csz: DWORD } ],
  GetWorldTransform: [ int, { hdc: HDC, lpxf: LPXFORM } ],
  SetWorldTransform: [ int, { hdc: HDC, lpxf: uint.Δ } ],
  ModifyWorldTransform: [ int, { hdc: HDC, lpxf: uint.Δ, mode: DWORD } ],
  CombineTransform: [ int, { lpxfOut: LPXFORM, lpxf1: uint.Δ, lpxf2: uint.Δ } ],
  CreateDIBSection: [ VOIDPTR, { hdc: HDC, lpbmi: uint.Δ, usage: UINT, ppvBits: VoidT.Δ.Δ, hSection: HANDLE, offset: DWORD } ],
  GetDIBColorTable: [ uint, { hdc: HDC, iStart: UINT, cEntries: UINT, prgbq: uint.Δ } ],
  SetDIBColorTable: [ uint, { hdc: HDC, iStart: UINT, cEntries: UINT, prgbq: uint.Δ } ],
  SetColorAdjustment: [ int, { hdc: HDC, lpca: uint.Δ } ],
  GetColorAdjustment: [ int, { hdc: HDC, lpca: LPCOLORADJUSTMENT } ],
  CreateHalftonePalette: [ VOIDPTR, { hdc: HDC } ],
  StartDocA: [ VoidT, { hdc: HDC, lpdi: uint.Δ } ],
  StartDocW: [ VoidT, { hdc: HDC, lpdi: uint.Δ } ],
  EndDoc: [ VoidT, { hdc: HDC } ],
  StartPage: [ VoidT, { hdc: HDC } ],
  EndPage: [ VoidT, { hdc: HDC } ],
  AbortDoc: [ VoidT, { hdc: HDC } ],
  SetAbortProc: [ VoidT, { hdc: HDC, proc: ABORTPROC } ],
  AbortPath: [ int, { hdc: HDC } ],
  ArcTo: [ int, { hdc: HDC, left: int, top: int, right: int, bottom: int, xr1: int, yr1: int, xr2: int, yr2: int } ],
  BeginPath: [ int, { hdc: HDC } ],
  CloseFigure: [ int, { hdc: HDC } ],
  EndPath: [ int, { hdc: HDC } ],
  FillPath: [ int, { hdc: HDC } ],
  FlattenPath: [ int, { hdc: HDC } ],
  GetPath: [ VoidT, { hdc: HDC, apt: LPPOINT, aj: LPBYTE, cpt: int } ],
  PathToRegion: [ VOIDPTR, { hdc: HDC } ],
  PolyDraw: [ int, { hdc: HDC, apt: uint.Δ, aj: uchar.Δ, cpt: int } ],
  SelectClipPath: [ int, { hdc: HDC, mode: int } ],
  SetArcDirection: [ VoidT, { hdc: HDC, dir: int } ],
  SetMiterLimit: [ int, { hdc: HDC, limit: FLOAT, old: PFLOAT } ],
  StrokeAndFillPath: [ int, { hdc: HDC } ],
  StrokePath: [ int, { hdc: HDC } ],
  WidenPath: [ int, { hdc: HDC } ],
  ExtCreatePen: [ VOIDPTR, { iPenStyle: DWORD, cWidth: DWORD, plbrush: uint.Δ, cStyle: DWORD, pstyle: ulong.Δ } ],
  GetMiterLimit: [ int, { hdc: HDC, plimit: PFLOAT } ],
  GetArcDirection: [ VoidT, { hdc: HDC } ],
  GetObjectA: [ VoidT, { h: HANDLE, c: int, pv: LPVOID } ],
  GetObjectW: [ VoidT, { h: HANDLE, c: int, pv: LPVOID } ],
  MoveToEx: [ int, { hdc: HDC, x: int, y: int, lppt: LPPOINT } ],
  TextOutA: [ int, { hdc: HDC, x: int, y: int, lpString: LPCSTR, c: int } ],
  TextOutW: [ int, { hdc: HDC, x: int, y: int, lpString: LPCWSTR, c: int } ],
  ExtTextOutA: [ int, { hdc: HDC, x: int, y: int, options: UINT, lprect: uint.Δ, lpString: LPCSTR, c: UINT, lpDx: int.Δ } ],
  ExtTextOutW: [ int, { hdc: HDC, x: int, y: int, options: UINT, lprect: uint.Δ, lpString: LPCWSTR, c: UINT, lpDx: int.Δ } ],
  PolyTextOutA: [ int, { hdc: HDC, ppt: uint.Δ, nstrings: int } ],
  PolyTextOutW: [ int, { hdc: HDC, ppt: uint.Δ, nstrings: int } ],
  CreatePolygonRgn: [ VOIDPTR, { pptl: uint.Δ, cPoint: int, iMode: int } ],
  DPtoLP: [ int, { hdc: HDC, lppt: LPPOINT, c: int } ],
  LPtoDP: [ int, { hdc: HDC, lppt: LPPOINT, c: int } ],
  Polygon: [ int, { hdc: HDC, apt: uint.Δ, cpt: int } ],
  Polyline: [ int, { hdc: HDC, apt: uint.Δ, cpt: int } ],
  PolyBezier: [ int, { hdc: HDC, apt: uint.Δ, cpt: DWORD } ],
  PolyBezierTo: [ int, { hdc: HDC, apt: uint.Δ, cpt: DWORD } ],
  PolylineTo: [ int, { hdc: HDC, apt: uint.Δ, cpt: DWORD } ],
  SetViewportExtEx: [ int, { hdc: HDC, x: int, y: int, lpsz: LPSIZE } ],
  SetViewportOrgEx: [ int, { hdc: HDC, x: int, y: int, lppt: LPPOINT } ],
  SetWindowExtEx: [ int, { hdc: HDC, x: int, y: int, lpsz: LPSIZE } ],
  SetWindowOrgEx: [ int, { hdc: HDC, x: int, y: int, lppt: LPPOINT } ],
  OffsetViewportOrgEx: [ int, { hdc: HDC, x: int, y: int, lppt: LPPOINT } ],
  OffsetWindowOrgEx: [ int, { hdc: HDC, x: int, y: int, lppt: LPPOINT } ],
  ScaleViewportExtEx: [ int, { hdc: HDC, xn: int, dx: int, yn: int, yd: int, lpsz: LPSIZE } ],
  ScaleWindowExtEx: [ int, { hdc: HDC, xn: int, xd: int, yn: int, yd: int, lpsz: LPSIZE } ],
  SetBitmapDimensionEx: [ int, { hbm: HBITMAP, w: int, h: int, lpsz: LPSIZE } ],
  SetBrushOrgEx: [ int, { hdc: HDC, x: int, y: int, lppt: LPPOINT } ],
  GetTextFaceA: [ VoidT, { hdc: HDC, c: int, lpName: LPSTR } ],
  GetTextFaceW: [ VoidT, { hdc: HDC, c: int, lpName: LPWSTR } ],
  GetKerningPairsA: [ ulong, { hdc: HDC, nPairs: DWORD, lpKernPair: LPKERNINGPAIR } ],
  GetKerningPairsW: [ ulong, { hdc: HDC, nPairs: DWORD, lpKernPair: LPKERNINGPAIR } ],
  GetDCOrgEx: [ int, { hdc: HDC, lppt: LPPOINT } ],
  FixBrushOrgEx: [ int, { hdc: HDC, x: int, y: int, ptl: LPPOINT } ],
  UnrealizeObject: [ int, { h: HGDIOBJ } ],
  GdiFlush: [ int, {  } ],
  GdiSetBatchLimit: [ ulong, { dw: DWORD } ],
  GdiGetBatchLimit: [ ulong, {  } ],
  SetICMMode: [ VoidT, { hdc: HDC, mode: int } ],
  CheckColorsInGamut: [ int, { hdc: HDC, lpRGBTriple: LPRGBTRIPLE, dlpBuffer: LPVOID, nCount: DWORD } ],
  GetColorSpace: [ VOIDPTR, { hdc: HDC } ],
  GetLogColorSpaceA: [ int, { hColorSpace: HCOLORSPACE, lpBuffer: LPLOGCOLORSPACEA, nSize: DWORD } ],
  GetLogColorSpaceW: [ int, { hColorSpace: HCOLORSPACE, lpBuffer: LPLOGCOLORSPACEW, nSize: DWORD } ],
  CreateColorSpaceA: [ VOIDPTR, { lplcs: LPLOGCOLORSPACEA } ],
  CreateColorSpaceW: [ VOIDPTR, { lplcs: LPLOGCOLORSPACEW } ],
  SetColorSpace: [ VOIDPTR, { hdc: HDC, hcs: HCOLORSPACE } ],
  DeleteColorSpace: [ int, { hcs: HCOLORSPACE } ],
  GetICMProfileA: [ int, { hdc: HDC, pBufSize: LPDWORD, pszFilename: LPSTR } ],
  GetICMProfileW: [ int, { hdc: HDC, pBufSize: LPDWORD, pszFilename: LPWSTR } ],
  SetICMProfileA: [ int, { hdc: HDC, lpFileName: LPSTR } ],
  SetICMProfileW: [ int, { hdc: HDC, lpFileName: LPWSTR } ],
  GetDeviceGammaRamp: [ int, { hdc: HDC, lpRamp: LPVOID } ],
  SetDeviceGammaRamp: [ int, { hdc: HDC, lpRamp: LPVOID } ],
  ColorMatchToTarget: [ int, { hdc: HDC, hdcTarget: HDC, action: DWORD } ],
  EnumICMProfilesA: [ VoidT, { hdc: HDC, proc: ICMENUMPROCA, param: LPARAM } ],
  EnumICMProfilesW: [ VoidT, { hdc: HDC, proc: ICMENUMPROCW, param: LPARAM } ],
  UpdateICMRegKeyA: [ int, { reserved: DWORD, lpszCMID: LPSTR, lpszFileName: LPSTR, command: UINT } ],
  UpdateICMRegKeyW: [ int, { reserved: DWORD, lpszCMID: LPWSTR, lpszFileName: LPWSTR, command: UINT } ],
  ColorCorrectPalette: [ int, { hdc: HDC, hPal: HPALETTE, deFirst: DWORD, num: DWORD } ],
  wglCopyContext: [ int, { UINT: UINT } ],
  wglCreateContext: [ VOIDPTR, { HDC: HDC } ],
  wglCreateLayerContext: [ VOIDPTR, { int: int } ],
  wglDeleteContext: [ int, { HGLRC: HGLRC } ],
  wglGetCurrentContext: [ VOIDPTR, {  } ],
  wglGetCurrentDC: [ VOIDPTR, {  } ],
  wglGetProcAddress: [ VOIDPTR, { LPCSTR: LPCSTR } ],
  wglMakeCurrent: [ int, { HGLRC: HGLRC } ],
  wglShareLists: [ int, { HGLRC: HGLRC } ],
  wglUseFontBitmapsA: [ int, { DWORD: DWORD } ],
  wglUseFontBitmapsW: [ int, { DWORD: DWORD } ],
  SwapBuffers: [ int, { HDC: HDC } ],
  wglUseFontOutlinesA: [ int, { LPGLYPHMETRICSFLOAT: LPGLYPHMETRICSFLOAT } ],
  wglUseFontOutlinesW: [ int, { LPGLYPHMETRICSFLOAT: LPGLYPHMETRICSFLOAT } ],
  wglDescribeLayerPlane: [ int, { LPLAYERPLANEDESCRIPTOR: LPLAYERPLANEDESCRIPTOR } ],
  wglSetLayerPaletteEntries: [ VoidT, { ulong.Δ: ulong.Δ } ],
  wglGetLayerPaletteEntries: [ VoidT, { ulong.Δ: ulong.Δ } ],
  wglRealizeLayerPalette: [ int, { BOOL: BOOL } ],
  wglSwapLayerBuffers: [ int, { UINT: UINT } ],
  wglSwapMultipleBuffers: [ ulong, { uint.Δ: uint.Δ } ],
  wvsprintfA: [ VoidT, { LPCSTR: LPCSTR, arglist: va_list } ],
  wvsprintfW: [ VoidT, { LPCWSTR: LPCWSTR, arglist: va_list } ],
  wsprintfA: [ VoidT, { LPCSTR: LPCSTR } ],
  wsprintfW: [ VoidT, { LPCWSTR: LPCWSTR } ],
  LoadKeyboardLayoutA: [ VOIDPTR, { pwszKLID: LPCSTR, Flags: UINT } ],
  LoadKeyboardLayoutW: [ VOIDPTR, { pwszKLID: LPCWSTR, Flags: UINT } ],
  ActivateKeyboardLayout: [ VOIDPTR, { hkl: HKL, Flags: UINT } ],
  ToUnicodeEx: [ VoidT, { wVirtKey: UINT, wScanCode: UINT, lpKeyState: uchar.Δ, pwszBuff: LPWSTR, cchBuff: int, wFlags: UINT, dwhkl: HKL } ],
  UnloadKeyboardLayout: [ int, { hkl: HKL } ],
  GetKeyboardLayoutNameA: [ int, { pwszKLID: LPSTR } ],
  GetKeyboardLayoutNameW: [ int, { pwszKLID: LPWSTR } ],
  GetKeyboardLayoutList: [ VoidT, { nBuff: int, lpList: VOIDPTR.Δ } ],
  GetKeyboardLayout: [ VOIDPTR, { idThread: DWORD } ],
  GetMouseMovePointsEx: [ VoidT, { cbSize: UINT, lppt: LPMOUSEMOVEPOINT, lpptBuf: LPMOUSEMOVEPOINT, nBufPoints: int, resolution: DWORD } ],
  CreateDesktopA: [ VOIDPTR, { lpszDesktop: LPCSTR, lpszDevice: LPCSTR, pDevmode: uint.Δ, dwFlags: DWORD, dwDesiredAccess: ACCESS_MASK, lpsa: LPSECURITY_ATTRIBUTES } ],
  CreateDesktopW: [ VOIDPTR, { lpszDesktop: LPCWSTR, lpszDevice: LPCWSTR, pDevmode: uint.Δ, dwFlags: DWORD, dwDesiredAccess: ACCESS_MASK, lpsa: LPSECURITY_ATTRIBUTES } ],
  CreateDesktopExA: [ VOIDPTR, { lpszDesktop: LPCSTR, lpszDevice: LPCSTR, pDevmode: uint.Δ, dwFlags: DWORD, dwDesiredAccess: ACCESS_MASK, lpsa: LPSECURITY_ATTRIBUTES, ulHeapSize: ULONG, pvoid: PVOID } ],
  CreateDesktopExW: [ VOIDPTR, { lpszDesktop: LPCWSTR, lpszDevice: LPCWSTR, pDevmode: uint.Δ, dwFlags: DWORD, dwDesiredAccess: ACCESS_MASK, lpsa: LPSECURITY_ATTRIBUTES, ulHeapSize: ULONG, pvoid: PVOID } ],
  OpenDesktopA: [ VOIDPTR, { lpszDesktop: LPCSTR, dwFlags: DWORD, fInherit: BOOL, dwDesiredAccess: ACCESS_MASK } ],
  OpenDesktopW: [ VOIDPTR, { lpszDesktop: LPCWSTR, dwFlags: DWORD, fInherit: BOOL, dwDesiredAccess: ACCESS_MASK } ],
  OpenInputDesktop: [ VOIDPTR, { dwFlags: DWORD, fInherit: BOOL, dwDesiredAccess: ACCESS_MASK } ],
  EnumDesktopsA: [ int, { hwinsta: HWINSTA, lpEnumFunc: DESKTOPENUMPROCA, lParam: LPARAM } ],
  EnumDesktopsW: [ int, { hwinsta: HWINSTA, lpEnumFunc: DESKTOPENUMPROCW, lParam: LPARAM } ],
  EnumDesktopWindows: [ int, { hDesktop: HDESK, lpfn: WNDENUMPROC, lParam: LPARAM } ],
  SwitchDesktop: [ int, { hDesktop: HDESK } ],
  SetThreadDesktop: [ int, { hDesktop: HDESK } ],
  CloseDesktop: [ int, { hDesktop: HDESK } ],
  GetThreadDesktop: [ VOIDPTR, { dwThreadId: DWORD } ],
  CreateWindowStationA: [ VOIDPTR, { lpwinsta: LPCSTR, dwFlags: DWORD, dwDesiredAccess: ACCESS_MASK, lpsa: LPSECURITY_ATTRIBUTES } ],
  CreateWindowStationW: [ VOIDPTR, { lpwinsta: LPCWSTR, dwFlags: DWORD, dwDesiredAccess: ACCESS_MASK, lpsa: LPSECURITY_ATTRIBUTES } ],
  OpenWindowStationA: [ VOIDPTR, { lpszWinSta: LPCSTR, fInherit: BOOL, dwDesiredAccess: ACCESS_MASK } ],
  OpenWindowStationW: [ VOIDPTR, { lpszWinSta: LPCWSTR, fInherit: BOOL, dwDesiredAccess: ACCESS_MASK } ],
  EnumWindowStationsA: [ int, { lpEnumFunc: WINSTAENUMPROCA, lParam: LPARAM } ],
  EnumWindowStationsW: [ int, { lpEnumFunc: WINSTAENUMPROCW, lParam: LPARAM } ],
  CloseWindowStation: [ int, { hWinSta: HWINSTA } ],
  SetProcessWindowStation: [ int, { hWinSta: HWINSTA } ],
  GetProcessWindowStation: [ VOIDPTR, {  } ],
  SetUserObjectSecurity: [ int, { hObj: HANDLE, pSIRequested: PSECURITY_INFORMATION, pSID: PSECURITY_DESCRIPTOR } ],
  GetUserObjectSecurity: [ int, { hObj: HANDLE, pSIRequested: PSECURITY_INFORMATION, pSID: PSECURITY_DESCRIPTOR, nLength: DWORD, lpnLengthNeeded: LPDWORD } ],
  GetUserObjectInformationA: [ int, { hObj: HANDLE, nIndex: int, pvInfo: PVOID, nLength: DWORD, lpnLengthNeeded: LPDWORD } ],
  GetUserObjectInformationW: [ int, { hObj: HANDLE, nIndex: int, pvInfo: PVOID, nLength: DWORD, lpnLengthNeeded: LPDWORD } ],
  SetUserObjectInformationA: [ int, { hObj: HANDLE, nIndex: int, pvInfo: PVOID, nLength: DWORD } ],
  SetUserObjectInformationW: [ int, { hObj: HANDLE, nIndex: int, pvInfo: PVOID, nLength: DWORD } ],
  IsHungAppWindow: [ int, { hwnd: HWND } ],
  DisableProcessWindowsGhosting: [ VoidT, {  } ],
  RegisterWindowMessageA: [ uint, { lpString: LPCSTR } ],
  RegisterWindowMessageW: [ uint, { lpString: LPCWSTR } ],
  TrackMouseEvent: [ int, { lpEventTrack: LPTRACKMOUSEEVENT } ],
  DrawEdge: [ int, { hdc: HDC, qrc: LPRECT, edge: UINT, grfFlags: UINT } ],
  DrawFrameControl: [ int, { UINT: UINT } ],
  DrawCaption: [ int, { hwnd: HWND, hdc: HDC, lprect: uint.Δ, flags: UINT } ],
  DrawAnimatedRects: [ int, { hwnd: HWND, idAni: int, lprcFrom: uint.Δ, lprcTo: uint.Δ } ],
  GetMessageA: [ int, { lpMsg: LPMSG, hWnd: HWND, wMsgFilterMin: UINT, wMsgFilterMax: UINT } ],
  GetMessageW: [ int, { lpMsg: LPMSG, hWnd: HWND, wMsgFilterMin: UINT, wMsgFilterMax: UINT } ],
  TranslateMessage: [ int, { lpMsg: uint.Δ } ],
  DispatchMessageA: [ long, { lpMsg: uint.Δ } ],
  DispatchMessageW: [ long, { lpMsg: uint.Δ } ],
  SetMessageQueue: [ int, { cMessagesMax: int } ],
  PeekMessageA: [ int, { lpMsg: LPMSG, hWnd: HWND, wMsgFilterMin: UINT, wMsgFilterMax: UINT, wRemoveMsg: UINT } ],
  PeekMessageW: [ int, { lpMsg: LPMSG, hWnd: HWND, wMsgFilterMin: UINT, wMsgFilterMax: UINT, wRemoveMsg: UINT } ],
  RegisterHotKey: [ int, { hWnd: HWND, id: int, fsModifiers: UINT, vk: UINT } ],
  UnregisterHotKey: [ int, { hWnd: HWND, id: int } ],
  ExitWindowsEx: [ int, { uFlags: UINT, dwReason: DWORD } ],
  SwapMouseButton: [ int, { fSwap: BOOL } ],
  GetMessagePos: [ ulong, {  } ],
  GetMessageTime: [ long, {  } ],
  GetMessageExtraInfo: [ long, {  } ],
  IsWow64Message: [ int, {  } ],
  SetMessageExtraInfo: [ long, { lParam: LPARAM } ],
  SendMessageA: [ long, { hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM } ],
  SendMessageW: [ long, { hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM } ],
  SendMessageTimeoutA: [ long, { hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM, fuFlags: UINT, uTimeout: UINT, lpdwResult: PDWORD_PTR } ],
  SendMessageTimeoutW: [ long, { hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM, fuFlags: UINT, uTimeout: UINT, lpdwResult: PDWORD_PTR } ],
  SendNotifyMessageA: [ int, { hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM } ],
  SendNotifyMessageW: [ int, { hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM } ],
  SendMessageCallbackA: [ int, { hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM, lpResultCallBack: SENDASYNCPROC, dwData: ULONG_PTR } ],
  SendMessageCallbackW: [ int, { hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM, lpResultCallBack: SENDASYNCPROC, dwData: ULONG_PTR } ],
  BroadcastSystemMessageExA: [ VoidT, { flags: DWORD, lpInfo: LPDWORD, Msg: UINT, wParam: WPARAM, lParam: LPARAM, pbsmInfo: PBSMINFO } ],
  BroadcastSystemMessageExW: [ VoidT, { flags: DWORD, lpInfo: LPDWORD, Msg: UINT, wParam: WPARAM, lParam: LPARAM, pbsmInfo: PBSMINFO } ],
  BroadcastSystemMessageA: [ VoidT, { flags: DWORD, lpInfo: LPDWORD, Msg: UINT, wParam: WPARAM, lParam: LPARAM } ],
  BroadcastSystemMessageW: [ VoidT, { flags: DWORD, lpInfo: LPDWORD, Msg: UINT, wParam: WPARAM, lParam: LPARAM } ],
  RegisterDeviceNotificationA: [ VoidT.Δ, { hRecipient: HANDLE, NotificationFilter: LPVOID, Flags: DWORD } ],
  RegisterDeviceNotificationW: [ VoidT.Δ, { hRecipient: HANDLE, NotificationFilter: LPVOID, Flags: DWORD } ],
  UnregisterDeviceNotification: [ int, { Handle: HDEVNOTIFY } ],
  RegisterPowerSettingNotification: [ VoidT.Δ, { hRecipient: HANDLE, PowerSettingGuid: LPCGUID, Flags: DWORD } ],
  UnregisterPowerSettingNotification: [ int, { Handle: HPOWERNOTIFY } ],
  PostMessageA: [ int, { hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM } ],
  PostMessageW: [ int, { hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM } ],
  PostThreadMessageA: [ int, { idThread: DWORD, Msg: UINT, wParam: WPARAM, lParam: LPARAM } ],
  PostThreadMessageW: [ int, { idThread: DWORD, Msg: UINT, wParam: WPARAM, lParam: LPARAM } ],
  AttachThreadInput: [ int, { idAttach: DWORD, idAttachTo: DWORD, fAttach: BOOL } ],
  ReplyMessage: [ int, { lResult: LRESULT } ],
  WaitMessage: [ int, {  } ],
  WaitForInputIdle: [ ulong, { hProcess: HANDLE, dwMilliseconds: DWORD } ],
  DefWindowProcA: [ long, { hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM } ],
  DefWindowProcW: [ long, { hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM } ],
  PostQuitMessage: [ VoidT, { nExitCode: int } ],
  CallWindowProcA: [ long, { lpPrevWndFunc: WNDPROC, hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM } ],
  CallWindowProcW: [ long, { lpPrevWndFunc: WNDPROC, hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM } ],
  InSendMessage: [ int, {  } ],
  InSendMessageEx: [ ulong, { lpReserved: LPVOID } ],
  GetDoubleClickTime: [ uint, {  } ],
  SetDoubleClickTime: [ int, { UINT: UINT } ],
  RegisterClassA: [ ushort, { lpWndClass: uint.Δ } ],
  RegisterClassW: [ ushort, { lpWndClass: uint.Δ } ],
  UnregisterClassA: [ int, { lpClassName: LPCSTR, hInstance: HINSTANCE } ],
  UnregisterClassW: [ int, { lpClassName: LPCWSTR, hInstance: HINSTANCE } ],
  GetClassInfoA: [ int, { hInstance: HINSTANCE, lpClassName: LPCSTR, lpWndClass: LPWNDCLASSA } ],
  GetClassInfoW: [ int, { hInstance: HINSTANCE, lpClassName: LPCWSTR, lpWndClass: LPWNDCLASSW } ],
  RegisterClassExA: [ ushort, { uint.Δ: uint.Δ } ],
  RegisterClassExW: [ ushort, { uint.Δ: uint.Δ } ],
  GetClassInfoExA: [ int, { hInstance: HINSTANCE, lpszClass: LPCSTR, lpwcx: LPWNDCLASSEXA } ],
  GetClassInfoExW: [ int, { hInstance: HINSTANCE, lpszClass: LPCWSTR, lpwcx: LPWNDCLASSEXW } ],
  CreateWindowExA: [ VOIDPTR, { dwExStyle: DWORD, lpClassName: LPCSTR, lpWindowName: LPCSTR, dwStyle: DWORD, X: int, Y: int, nWidth: int, nHeight: int, hWndParent: HWND, hMenu: HMENU, hInstance: HINSTANCE, lpParam: LPVOID } ],
  CreateWindowExW: [ VOIDPTR, { dwExStyle: DWORD, lpClassName: LPCWSTR, lpWindowName: LPCWSTR, dwStyle: DWORD, X: int, Y: int, nWidth: int, nHeight: int, hWndParent: HWND, hMenu: HMENU, hInstance: HINSTANCE, lpParam: LPVOID } ],
  IsWindow: [ int, { hWnd: HWND } ],
  IsMenu: [ int, { hMenu: HMENU } ],
  IsChild: [ int, { hWndParent: HWND, hWnd: HWND } ],
  DestroyWindow: [ int, { hWnd: HWND } ],
  ShowWindow: [ int, { hWnd: HWND, nCmdShow: int } ],
  AnimateWindow: [ int, { hWnd: HWND, dwTime: DWORD, dwFlags: DWORD } ],
  UpdateLayeredWindow: [ int, { hWnd: HWND, hdcDst: HDC, pptDst: uint.Δ, psize: uint.Δ, hdcSrc: HDC, pptSrc: uint.Δ, crKey: COLORREF, pblend: uint.Δ, dwFlags: DWORD } ],
  UpdateLayeredWindowIndirect: [ int, { hWnd: HWND, pULWInfo: uint.Δ } ],
  GetLayeredWindowAttributes: [ int, { hwnd: HWND, pcrKey: ulong.Δ, pbAlpha: uchar.Δ, pdwFlags: ulong.Δ } ],
  PrintWindow: [ int, { hwnd: HWND, hdcBlt: HDC, nFlags: UINT } ],
  SetLayeredWindowAttributes: [ int, { hwnd: HWND, crKey: COLORREF, bAlpha: BYTE, dwFlags: DWORD } ],
  ShowWindowAsync: [ int, { hWnd: HWND, nCmdShow: int } ],
  FlashWindow: [ int, { hWnd: HWND, bInvert: BOOL } ],
  FlashWindowEx: [ int, { pfwi: PFLASHWINFO } ],
  ShowOwnedPopups: [ int, { hWnd: HWND, fShow: BOOL } ],
  OpenIcon: [ int, { hWnd: HWND } ],
  CloseWindow: [ int, { hWnd: HWND } ],
  MoveWindow: [ int, { hWnd: HWND, X: int, Y: int, nWidth: int, nHeight: int, bRepaint: BOOL } ],
  SetWindowPos: [ int, { hWnd: HWND, hWndInsertAfter: HWND, X: int, Y: int, cx: int, cy: int, uFlags: UINT } ],
  GetWindowPlacement: [ int, { hWnd: HWND, lpwndpl: uint.Δ } ],
  SetWindowPlacement: [ int, { hWnd: HWND, lpwndpl: uint.Δ } ],
  GetWindowDisplayAffinity: [ int, { hWnd: HWND, pdwAffinity: ulong.Δ } ],
  SetWindowDisplayAffinity: [ int, { hWnd: HWND, dwAffinity: DWORD } ],
  BeginDeferWindowPos: [ VoidT.Δ, { nNumWindows: int } ],
  DeferWindowPos: [ VoidT.Δ, { hWinPosInfo: HDWP, hWnd: HWND, hWndInsertAfter: HWND, x: int, y: int, cx: int, cy: int, uFlags: UINT } ],
  EndDeferWindowPos: [ int, { hWinPosInfo: HDWP } ],
  IsWindowVisible: [ int, { hWnd: HWND } ],
  IsIconic: [ int, { hWnd: HWND } ],
  AnyPopup: [ int, {  } ],
  BringWindowToTop: [ int, { hWnd: HWND } ],
  IsZoomed: [ int, { hWnd: HWND } ],
  CreateDialogParamA: [ VOIDPTR, { hInstance: HINSTANCE, lpTemplateName: LPCSTR, hWndParent: HWND, lpDialogFunc: DLGPROC, dwInitParam: LPARAM } ],
  CreateDialogParamW: [ VOIDPTR, { hInstance: HINSTANCE, lpTemplateName: LPCWSTR, hWndParent: HWND, lpDialogFunc: DLGPROC, dwInitParam: LPARAM } ],
  CreateDialogIndirectParamA: [ VOIDPTR, { hInstance: HINSTANCE, lpTemplate: LPCDLGTEMPLATEA, hWndParent: HWND, lpDialogFunc: DLGPROC, dwInitParam: LPARAM } ],
  CreateDialogIndirectParamW: [ VOIDPTR, { hInstance: HINSTANCE, lpTemplate: LPCDLGTEMPLATEW, hWndParent: HWND, lpDialogFunc: DLGPROC, dwInitParam: LPARAM } ],
  DialogBoxParamA: [ int, { hInstance: HINSTANCE, lpTemplateName: LPCSTR, hWndParent: HWND, lpDialogFunc: DLGPROC, dwInitParam: LPARAM } ],
  DialogBoxParamW: [ int, { hInstance: HINSTANCE, lpTemplateName: LPCWSTR, hWndParent: HWND, lpDialogFunc: DLGPROC, dwInitParam: LPARAM } ],
  DialogBoxIndirectParamA: [ int, { hInstance: HINSTANCE, hDialogTemplate: LPCDLGTEMPLATEA, hWndParent: HWND, lpDialogFunc: DLGPROC, dwInitParam: LPARAM } ],
  DialogBoxIndirectParamW: [ int, { hInstance: HINSTANCE, hDialogTemplate: LPCDLGTEMPLATEW, hWndParent: HWND, lpDialogFunc: DLGPROC, dwInitParam: LPARAM } ],
  EndDialog: [ int, { hDlg: HWND, nResult: INT_PTR } ],
  GetDlgItem: [ VOIDPTR, { hDlg: HWND, nIDDlgItem: int } ],
  SetDlgItemInt: [ int, { hDlg: HWND, nIDDlgItem: int, uValue: UINT, bSigned: BOOL } ],
  GetDlgItemInt: [ uint, { hDlg: HWND, nIDDlgItem: int, lpTranslated: int.Δ, bSigned: BOOL } ],
  SetDlgItemTextA: [ int, { hDlg: HWND, nIDDlgItem: int, lpString: LPCSTR } ],
  SetDlgItemTextW: [ int, { hDlg: HWND, nIDDlgItem: int, lpString: LPCWSTR } ],
  GetDlgItemTextA: [ uint, { hDlg: HWND, nIDDlgItem: int, lpString: LPSTR, cchMax: int } ],
  GetDlgItemTextW: [ uint, { hDlg: HWND, nIDDlgItem: int, lpString: LPWSTR, cchMax: int } ],
  CheckDlgButton: [ int, { hDlg: HWND, nIDButton: int, uCheck: UINT } ],
  CheckRadioButton: [ int, { hDlg: HWND, nIDFirstButton: int, nIDLastButton: int, nIDCheckButton: int } ],
  IsDlgButtonChecked: [ uint, { hDlg: HWND, nIDButton: int } ],
  SendDlgItemMessageA: [ long, { hDlg: HWND, nIDDlgItem: int, Msg: UINT, wParam: WPARAM, lParam: LPARAM } ],
  SendDlgItemMessageW: [ long, { hDlg: HWND, nIDDlgItem: int, Msg: UINT, wParam: WPARAM, lParam: LPARAM } ],
  GetNextDlgGroupItem: [ VOIDPTR, { hDlg: HWND, hCtl: HWND, bPrevious: BOOL } ],
  GetNextDlgTabItem: [ VOIDPTR, { hDlg: HWND, hCtl: HWND, bPrevious: BOOL } ],
  GetDlgCtrlID: [ VoidT, { hWnd: HWND } ],
  GetDialogBaseUnits: [ VoidT, {  } ],
  DefDlgProcA: [ long, { hDlg: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM } ],
  DefDlgProcW: [ long, { hDlg: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM } ],
  CallMsgFilterA: [ int, { lpMsg: LPMSG, nCode: int } ],
  CallMsgFilterW: [ int, { lpMsg: LPMSG, nCode: int } ],
  OpenClipboard: [ int, { hWndNewOwner: HWND } ],
  CloseClipboard: [ int, {  } ],
  GetClipboardSequenceNumber: [ ulong, {  } ],
  GetClipboardOwner: [ VOIDPTR, {  } ],
  SetClipboardViewer: [ VOIDPTR, { hWndNewViewer: HWND } ],
  GetClipboardViewer: [ VOIDPTR, {  } ],
  ChangeClipboardChain: [ int, { hWndRemove: HWND, hWndNewNext: HWND } ],
  SetClipboardData: [ VoidT.Δ, { uFormat: UINT, hMem: HANDLE } ],
  GetClipboardData: [ VoidT.Δ, { uFormat: UINT } ],
  RegisterClipboardFormatA: [ uint, { lpszFormat: LPCSTR } ],
  RegisterClipboardFormatW: [ uint, { lpszFormat: LPCWSTR } ],
  CountClipboardFormats: [ VoidT, {  } ],
  EnumClipboardFormats: [ uint, { format: UINT } ],
  GetClipboardFormatNameA: [ VoidT, { format: UINT, lpszFormatName: LPSTR, cchMaxCount: int } ],
  GetClipboardFormatNameW: [ VoidT, { format: UINT, lpszFormatName: LPWSTR, cchMaxCount: int } ],
  EmptyClipboard: [ int, {  } ],
  IsClipboardFormatAvailable: [ int, { format: UINT } ],
  GetPriorityClipboardFormat: [ VoidT, { paFormatPriorityList: uint.Δ, cFormats: int } ],
  GetOpenClipboardWindow: [ VOIDPTR, {  } ],
  AddClipboardFormatListener: [ int, { hwnd: HWND } ],
  RemoveClipboardFormatListener: [ int, { hwnd: HWND } ],
  GetUpdatedClipboardFormats: [ int, { lpuiFormats: PUINT, cFormats: UINT, pcFormatsOut: PUINT } ],
  CharToOemA: [ int, { pSrc: LPCSTR, pDst: LPSTR } ],
  CharToOemW: [ int, { pSrc: LPCWSTR, pDst: LPSTR } ],
  OemToCharA: [ int, { pSrc: LPCSTR, pDst: LPSTR } ],
  OemToCharW: [ int, { pSrc: LPCSTR, pDst: LPWSTR } ],
  CharToOemBuffA: [ int, { lpszSrc: LPCSTR, lpszDst: LPSTR, cchDstLength: DWORD } ],
  CharToOemBuffW: [ int, { lpszSrc: LPCWSTR, lpszDst: LPSTR, cchDstLength: DWORD } ],
  OemToCharBuffA: [ int, { lpszSrc: LPCSTR, lpszDst: LPSTR, cchDstLength: DWORD } ],
  OemToCharBuffW: [ int, { lpszSrc: LPCSTR, lpszDst: LPWSTR, cchDstLength: DWORD } ],
  CharUpperA: [ int8.Δ, { lpsz: LPSTR } ],
  CharUpperW: [ ushort.Δ, { lpsz: LPWSTR } ],
  CharUpperBuffA: [ ulong, { lpsz: LPSTR, cchLength: DWORD } ],
  CharUpperBuffW: [ ulong, { lpsz: LPWSTR, cchLength: DWORD } ],
  CharLowerA: [ int8.Δ, { lpsz: LPSTR } ],
  CharLowerW: [ ushort.Δ, { lpsz: LPWSTR } ],
  CharLowerBuffA: [ ulong, { lpsz: LPSTR, cchLength: DWORD } ],
  CharLowerBuffW: [ ulong, { lpsz: LPWSTR, cchLength: DWORD } ],
  CharNextA: [ int8.Δ, { lpsz: LPCSTR } ],
  CharNextW: [ ushort.Δ, { lpsz: LPCWSTR } ],
  CharPrevA: [ int8.Δ, { lpszStart: LPCSTR, lpszCurrent: LPCSTR } ],
  CharPrevW: [ ushort.Δ, { lpszStart: LPCWSTR, lpszCurrent: LPCWSTR } ],
  CharNextExA: [ int8.Δ, { CodePage: WORD, lpCurrentChar: LPCSTR, dwFlags: DWORD } ],
  CharPrevExA: [ int8.Δ, { CodePage: WORD, lpStart: LPCSTR, lpCurrentChar: LPCSTR, dwFlags: DWORD } ],
  IsCharAlphaA: [ int, { ch: CHAR } ],
  IsCharAlphaW: [ int, { ch: WCHAR } ],
  IsCharAlphaNumericA: [ int, { ch: CHAR } ],
  IsCharAlphaNumericW: [ int, { ch: WCHAR } ],
  IsCharUpperA: [ int, { ch: CHAR } ],
  IsCharUpperW: [ int, { ch: WCHAR } ],
  IsCharLowerA: [ int, { ch: CHAR } ],
  IsCharLowerW: [ int, { ch: WCHAR } ],
  SetFocus: [ VOIDPTR, { hWnd: HWND } ],
  GetActiveWindow: [ VOIDPTR, {  } ],
  GetFocus: [ VOIDPTR, {  } ],
  GetKBCodePage: [ uint, {  } ],
  GetKeyState: [ short, { nVirtKey: int } ],
  GetAsyncKeyState: [ short, { vKey: int } ],
  GetKeyboardState: [ int, { lpKeyState: PBYTE } ],
  SetKeyboardState: [ int, { lpKeyState: LPBYTE } ],
  GetKeyNameTextA: [ VoidT, { lParam: LONG, lpString: LPSTR, cchSize: int } ],
  GetKeyNameTextW: [ VoidT, { lParam: LONG, lpString: LPWSTR, cchSize: int } ],
  GetKeyboardType: [ VoidT, { nTypeFlag: int } ],
  ToAscii: [ VoidT, { uVirtKey: UINT, uScanCode: UINT, lpKeyState: uchar.Δ, lpChar: LPWORD, uFlags: UINT } ],
  ToAsciiEx: [ VoidT, { uVirtKey: UINT, uScanCode: UINT, lpKeyState: uchar.Δ, lpChar: LPWORD, uFlags: UINT, dwhkl: HKL } ],
  ToUnicode: [ VoidT, { wVirtKey: UINT, wScanCode: UINT, lpKeyState: uchar.Δ, pwszBuff: LPWSTR, cchBuff: int, wFlags: UINT } ],
  OemKeyScan: [ ulong, { wOemChar: WORD } ],
  VkKeyScanA: [ short, { ch: CHAR } ],
  VkKeyScanW: [ short, { ch: WCHAR } ],
  VkKeyScanExA: [ short, { ch: CHAR, dwhkl: HKL } ],
  VkKeyScanExW: [ short, { ch: WCHAR, dwhkl: HKL } ],
  keybd_event: [ VoidT, { bVk: BYTE, bScan: BYTE, dwFlags: DWORD, dwExtraInfo: ULONG_PTR } ],
  mouse_event: [ VoidT, { dwFlags: DWORD, dx: DWORD, dy: DWORD, dwData: DWORD, dwExtraInfo: ULONG_PTR } ],
  SendInput: [ uint, { cInputs: UINT, pInputs: LPINPUT, cbSize: int } ],
  GetTouchInputInfo: [ int, { hTouchInput: HTOUCHINPUT, cInputs: UINT, pInputs: PTOUCHINPUT, cbSize: int } ],
  CloseTouchInputHandle: [ int, { hTouchInput: HTOUCHINPUT } ],
  RegisterTouchWindow: [ int, { hwnd: HWND, ulFlags: ULONG } ],
  UnregisterTouchWindow: [ int, { hwnd: HWND } ],
  IsTouchWindow: [ int, { hwnd: HWND, pulFlags: PULONG } ],
  GetLastInputInfo: [ int, { plii: PLASTINPUTINFO } ],
  MapVirtualKeyA: [ uint, { uCode: UINT, uMapType: UINT } ],
  MapVirtualKeyW: [ uint, { uCode: UINT, uMapType: UINT } ],
  MapVirtualKeyExA: [ uint, { uCode: UINT, uMapType: UINT, dwhkl: HKL } ],
  MapVirtualKeyExW: [ uint, { uCode: UINT, uMapType: UINT, dwhkl: HKL } ],
  GetInputState: [ int, {  } ],
  GetQueueStatus: [ ulong, { flags: UINT } ],
  GetCapture: [ VOIDPTR, {  } ],
  SetCapture: [ VOIDPTR, { hWnd: HWND } ],
  ReleaseCapture: [ int, {  } ],
  MsgWaitForMultipleObjects: [ ulong, { nCount: DWORD, pHandles: VoidT.Δ.Δ, fWaitAll: BOOL, dwMilliseconds: DWORD, dwWakeMask: DWORD } ],
  MsgWaitForMultipleObjectsEx: [ ulong, { nCount: DWORD, pHandles: VoidT.Δ.Δ, dwMilliseconds: DWORD, dwWakeMask: DWORD, dwFlags: DWORD } ],
  SetTimer: [ uint, { hWnd: HWND, nIDEvent: UINT_PTR, uElapse: UINT, lpTimerFunc: TIMERPROC } ],
  KillTimer: [ int, { hWnd: HWND, uIDEvent: UINT_PTR } ],
  IsWindowUnicode: [ int, { hWnd: HWND } ],
  EnableWindow: [ int, { hWnd: HWND, bEnable: BOOL } ],
  IsWindowEnabled: [ int, { hWnd: HWND } ],
  LoadAcceleratorsA: [ VOIDPTR, { hInstance: HINSTANCE, lpTableName: LPCSTR } ],
  LoadAcceleratorsW: [ VOIDPTR, { hInstance: HINSTANCE, lpTableName: LPCWSTR } ],
  CreateAcceleratorTableA: [ VOIDPTR, { paccel: LPACCEL, cAccel: int } ],
  CreateAcceleratorTableW: [ VOIDPTR, { paccel: LPACCEL, cAccel: int } ],
  DestroyAcceleratorTable: [ int, { hAccel: HACCEL } ],
  CopyAcceleratorTableA: [ VoidT, { hAccelSrc: HACCEL, lpAccelDst: LPACCEL, cAccelEntries: int } ],
  CopyAcceleratorTableW: [ VoidT, { hAccelSrc: HACCEL, lpAccelDst: LPACCEL, cAccelEntries: int } ],
  TranslateAcceleratorA: [ VoidT, { hWnd: HWND, hAccTable: HACCEL, lpMsg: LPMSG } ],
  TranslateAcceleratorW: [ VoidT, { hWnd: HWND, hAccTable: HACCEL, lpMsg: LPMSG } ],
  GetSystemMetrics: [ VoidT, { nIndex: int } ],
  LoadMenuA: [ VOIDPTR, { hInstance: HINSTANCE, lpMenuName: LPCSTR } ],
  LoadMenuW: [ VOIDPTR, { hInstance: HINSTANCE, lpMenuName: LPCWSTR } ],
  LoadMenuIndirectA: [ VOIDPTR, { lpMenuTemplate: VoidT.Δ } ],
  LoadMenuIndirectW: [ VOIDPTR, { lpMenuTemplate: VoidT.Δ } ],
  GetMenu: [ VOIDPTR, { hWnd: HWND } ],
  SetMenu: [ int, { hWnd: HWND, hMenu: HMENU } ],
  ChangeMenuA: [ int, { hMenu: HMENU, cmd: UINT, lpszNewItem: LPCSTR, cmdInsert: UINT, flags: UINT } ],
  ChangeMenuW: [ int, { hMenu: HMENU, cmd: UINT, lpszNewItem: LPCWSTR, cmdInsert: UINT, flags: UINT } ],
  HiliteMenuItem: [ int, { hWnd: HWND, hMenu: HMENU, uIDHiliteItem: UINT, uHilite: UINT } ],
  GetMenuStringA: [ VoidT, { hMenu: HMENU, uIDItem: UINT, lpString: LPSTR, cchMax: int, flags: UINT } ],
  GetMenuStringW: [ VoidT, { hMenu: HMENU, uIDItem: UINT, lpString: LPWSTR, cchMax: int, flags: UINT } ],
  GetMenuState: [ uint, { hMenu: HMENU, uId: UINT, uFlags: UINT } ],
  DrawMenuBar: [ int, { hWnd: HWND } ],
  GetSystemMenu: [ VOIDPTR, { hWnd: HWND, bRevert: BOOL } ],
  CreateMenu: [ VOIDPTR, {  } ],
  CreatePopupMenu: [ VOIDPTR, {  } ],
  DestroyMenu: [ int, { hMenu: HMENU } ],
  CheckMenuItem: [ ulong, { hMenu: HMENU, uIDCheckItem: UINT, uCheck: UINT } ],
  EnableMenuItem: [ int, { hMenu: HMENU, uIDEnableItem: UINT, uEnable: UINT } ],
  GetSubMenu: [ VOIDPTR, { hMenu: HMENU, nPos: int } ],
  GetMenuItemID: [ uint, { hMenu: HMENU, nPos: int } ],
  GetMenuItemCount: [ VoidT, { hMenu: HMENU } ],
  InsertMenuA: [ int, { hMenu: HMENU, uPosition: UINT, uFlags: UINT, uIDNewItem: UINT_PTR, lpNewItem: LPCSTR } ],
  InsertMenuW: [ int, { hMenu: HMENU, uPosition: UINT, uFlags: UINT, uIDNewItem: UINT_PTR, lpNewItem: LPCWSTR } ],
  AppendMenuA: [ int, { hMenu: HMENU, uFlags: UINT, uIDNewItem: UINT_PTR, lpNewItem: LPCSTR } ],
  AppendMenuW: [ int, { hMenu: HMENU, uFlags: UINT, uIDNewItem: UINT_PTR, lpNewItem: LPCWSTR } ],
  ModifyMenuA: [ int, { hMnu: HMENU, uPosition: UINT, uFlags: UINT, uIDNewItem: UINT_PTR, lpNewItem: LPCSTR } ],
  ModifyMenuW: [ int, { hMnu: HMENU, uPosition: UINT, uFlags: UINT, uIDNewItem: UINT_PTR, lpNewItem: LPCWSTR } ],
  RemoveMenu: [ int, { hMenu: HMENU, uPosition: UINT, uFlags: UINT } ],
  DeleteMenu: [ int, { hMenu: HMENU, uPosition: UINT, uFlags: UINT } ],
  SetMenuItemBitmaps: [ int, { hMenu: HMENU, uPosition: UINT, uFlags: UINT, hBitmapUnchecked: HBITMAP, hBitmapChecked: HBITMAP } ],
  GetMenuCheckMarkDimensions: [ long, {  } ],
  TrackPopupMenu: [ int, { hMenu: HMENU, uFlags: UINT, x: int, y: int, nReserved: int, hWnd: HWND, prcRect: uint.Δ } ],
  TrackPopupMenuEx: [ int, { LPTPMPARAMS: LPTPMPARAMS } ],
  CalculatePopupWindowPosition: [ int, { anchorPoint: uint.Δ, windowSize: uint.Δ, flags: UINT, excludeRect: uint.Δ, popupWindowPosition: uint.Δ } ],
  GetMenuInfo: [ int, { LPMENUINFO: LPMENUINFO } ],
  SetMenuInfo: [ int, { LPCMENUINFO: LPCMENUINFO } ],
  EndMenu: [ int, {  } ],
  InsertMenuItemA: [ int, { hmenu: HMENU, item: UINT, fByPosition: BOOL, lpmi: LPCMENUITEMINFOA } ],
  InsertMenuItemW: [ int, { hmenu: HMENU, item: UINT, fByPosition: BOOL, lpmi: LPCMENUITEMINFOW } ],
  GetMenuItemInfoA: [ int, { hmenu: HMENU, item: UINT, fByPosition: BOOL, lpmii: LPMENUITEMINFOA } ],
  GetMenuItemInfoW: [ int, { hmenu: HMENU, item: UINT, fByPosition: BOOL, lpmii: LPMENUITEMINFOW } ],
  SetMenuItemInfoA: [ int, { hmenu: HMENU, item: UINT, fByPositon: BOOL, lpmii: LPCMENUITEMINFOA } ],
  SetMenuItemInfoW: [ int, { hmenu: HMENU, item: UINT, fByPositon: BOOL, lpmii: LPCMENUITEMINFOW } ],
  GetMenuDefaultItem: [ uint, { hMenu: HMENU, fByPos: UINT, gmdiFlags: UINT } ],
  SetMenuDefaultItem: [ int, { hMenu: HMENU, uItem: UINT, fByPos: UINT } ],
  GetMenuItemRect: [ int, { hWnd: HWND, hMenu: HMENU, uItem: UINT, lprcItem: LPRECT } ],
  MenuItemFromPoint: [ VoidT, { hWnd: HWND, hMenu: HMENU, ptScreen: POINT } ],
  DragObject: [ ulong, { hwndParent: HWND, hwndFrom: HWND, fmt: UINT, data: ULONG_PTR, hcur: HCURSOR } ],
  DragDetect: [ int, { hwnd: HWND, pt: POINT } ],
  DrawIcon: [ int, { hDC: HDC, X: int, Y: int, hIcon: HICON } ],
  DrawTextA: [ VoidT, { hdc: HDC, lpchText: LPCSTR, cchText: int, lprc: LPRECT, format: UINT } ],
  DrawTextW: [ VoidT, { hdc: HDC, lpchText: LPCWSTR, cchText: int, lprc: LPRECT, format: UINT } ],
  DrawTextExA: [ VoidT, { hdc: HDC, lpchText: LPSTR, cchText: int, lprc: LPRECT, format: UINT, lpdtp: LPDRAWTEXTPARAMS } ],
  DrawTextExW: [ VoidT, { hdc: HDC, lpchText: LPWSTR, cchText: int, lprc: LPRECT, format: UINT, lpdtp: LPDRAWTEXTPARAMS } ],
  GrayStringA: [ int, { hDC: HDC, hBrush: HBRUSH, lpOutputFunc: GRAYSTRINGPROC, lpData: LPARAM, nCount: int, X: int, Y: int, nWidth: int, nHeight: int } ],
  GrayStringW: [ int, { hDC: HDC, hBrush: HBRUSH, lpOutputFunc: GRAYSTRINGPROC, lpData: LPARAM, nCount: int, X: int, Y: int, nWidth: int, nHeight: int } ],
  DrawStateA: [ int, { hdc: HDC, hbrFore: HBRUSH, qfnCallBack: DRAWSTATEPROC, lData: LPARAM, wData: WPARAM, x: int, y: int, cx: int, cy: int, uFlags: UINT } ],
  DrawStateW: [ int, { hdc: HDC, hbrFore: HBRUSH, qfnCallBack: DRAWSTATEPROC, lData: LPARAM, wData: WPARAM, x: int, y: int, cx: int, cy: int, uFlags: UINT } ],
  TabbedTextOutA: [ long, { hdc: HDC, x: int, y: int, lpString: LPCSTR, chCount: int, nTabPositions: int, lpnTabStopPositions: int.Δ, nTabOrigin: int } ],
  TabbedTextOutW: [ long, { hdc: HDC, x: int, y: int, lpString: LPCWSTR, chCount: int, nTabPositions: int, lpnTabStopPositions: int.Δ, nTabOrigin: int } ],
  GetTabbedTextExtentA: [ ulong, { hdc: HDC, lpString: LPCSTR, chCount: int, nTabPositions: int, lpnTabStopPositions: int.Δ } ],
  GetTabbedTextExtentW: [ ulong, { hdc: HDC, lpString: LPCWSTR, chCount: int, nTabPositions: int, lpnTabStopPositions: int.Δ } ],
  UpdateWindow: [ int, { hWnd: HWND } ],
  SetActiveWindow: [ VOIDPTR, { hWnd: HWND } ],
  GetForegroundWindow: [ VOIDPTR, {  } ],
  PaintDesktop: [ int, { hdc: HDC } ],
  SwitchToThisWindow: [ VoidT, { hwnd: HWND, fUnknown: BOOL } ],
  SetForegroundWindow: [ int, { hWnd: HWND } ],
  AllowSetForegroundWindow: [ int, { dwProcessId: DWORD } ],
  LockSetForegroundWindow: [ int, { uLockCode: UINT } ],
  WindowFromDC: [ VOIDPTR, { hDC: HDC } ],
  GetDC: [ VOIDPTR, { hWnd: HWND } ],
  GetDCEx: [ VOIDPTR, { hWnd: HWND, hrgnClip: HRGN, flags: DWORD } ],
  GetWindowDC: [ VOIDPTR, { hWnd: HWND } ],
  ReleaseDC: [ VoidT, { hWnd: HWND, hDC: HDC } ],
  BeginPaint: [ VOIDPTR, { hWnd: HWND, lpPaint: LPPAINTSTRUCT } ],
  EndPaint: [ int, { hWnd: HWND, lpPaint: uint.Δ } ],
  GetUpdateRect: [ int, { hWnd: HWND, lpRect: LPRECT, bErase: BOOL } ],
  GetUpdateRgn: [ VoidT, { hWnd: HWND, hRgn: HRGN, bErase: BOOL } ],
  SetWindowRgn: [ VoidT, { hWnd: HWND, hRgn: HRGN, bRedraw: BOOL } ],
  GetWindowRgn: [ VoidT, { hWnd: HWND, hRgn: HRGN } ],
  GetWindowRgnBox: [ VoidT, { hWnd: HWND, lprc: LPRECT } ],
  ExcludeUpdateRgn: [ VoidT, { hDC: HDC, hWnd: HWND } ],
  InvalidateRect: [ int, { hWnd: HWND, lpRect: uint.Δ, bErase: BOOL } ],
  ValidateRect: [ int, { hWnd: HWND, lpRect: uint.Δ } ],
  InvalidateRgn: [ int, { hWnd: HWND, hRgn: HRGN, bErase: BOOL } ],
  ValidateRgn: [ int, { hWnd: HWND, hRgn: HRGN } ],
  RedrawWindow: [ int, { hWnd: HWND, lprcUpdate: uint.Δ, hrgnUpdate: HRGN, flags: UINT } ],
  LockWindowUpdate: [ int, { hWndLock: HWND } ],
  ScrollWindow: [ int, { hWnd: HWND, XAmount: int, YAmount: int, lpRect: uint.Δ, lpClipRect: uint.Δ } ],
  ScrollDC: [ int, { hDC: HDC, dx: int, dy: int, lprcScroll: uint.Δ, lprcClip: uint.Δ, hrgnUpdate: HRGN, lprcUpdate: LPRECT } ],
  ScrollWindowEx: [ VoidT, { hWnd: HWND, dx: int, dy: int, prcScroll: uint.Δ, prcClip: uint.Δ, hrgnUpdate: HRGN, prcUpdate: LPRECT, flags: UINT } ],
  SetScrollPos: [ VoidT, { hWnd: HWND, nBar: int, nPos: int, bRedraw: BOOL } ],
  GetScrollPos: [ VoidT, { hWnd: HWND, nBar: int } ],
  SetScrollRange: [ int, { hWnd: HWND, nBar: int, nMinPos: int, nMaxPos: int, bRedraw: BOOL } ],
  GetScrollRange: [ int, { hWnd: HWND, nBar: int, lpMinPos: LPINT, lpMaxPos: LPINT } ],
  ShowScrollBar: [ int, { hWnd: HWND, wBar: int, bShow: BOOL } ],
  EnableScrollBar: [ int, { hWnd: HWND, wSBflags: UINT, wArrows: UINT } ],
  SetPropA: [ int, { hWnd: HWND, lpString: LPCSTR, hData: HANDLE } ],
  SetPropW: [ int, { hWnd: HWND, lpString: LPCWSTR, hData: HANDLE } ],
  GetPropA: [ VoidT.Δ, { hWnd: HWND, lpString: LPCSTR } ],
  GetPropW: [ VoidT.Δ, { hWnd: HWND, lpString: LPCWSTR } ],
  RemovePropA: [ VoidT.Δ, { hWnd: HWND, lpString: LPCSTR } ],
  RemovePropW: [ VoidT.Δ, { hWnd: HWND, lpString: LPCWSTR } ],
  EnumPropsExA: [ VoidT, { hWnd: HWND, lpEnumFunc: PROPENUMPROCEXA, lParam: LPARAM } ],
  EnumPropsExW: [ VoidT, { hWnd: HWND, lpEnumFunc: PROPENUMPROCEXW, lParam: LPARAM } ],
  EnumPropsA: [ VoidT, { hWnd: HWND, lpEnumFunc: PROPENUMPROCA } ],
  EnumPropsW: [ VoidT, { hWnd: HWND, lpEnumFunc: PROPENUMPROCW } ],
  SetWindowTextA: [ int, { hWnd: HWND, lpString: LPCSTR } ],
  SetWindowTextW: [ int, { hWnd: HWND, lpString: LPCWSTR } ],
  GetWindowTextA: [ VoidT, { hWnd: HWND, lpString: LPSTR, nMaxCount: int } ],
  GetWindowTextW: [ VoidT, { hWnd: HWND, lpString: LPWSTR, nMaxCount: int } ],
  GetWindowTextLengthA: [ VoidT, { hWnd: HWND } ],
  GetWindowTextLengthW: [ VoidT, { hWnd: HWND } ],
  GetClientRect: [ int, { hWnd: HWND, lpRect: LPRECT } ],
  GetWindowRect: [ int, { hWnd: HWND, lpRect: LPRECT } ],
  AdjustWindowRect: [ int, { lpRect: LPRECT, dwStyle: DWORD, bMenu: BOOL } ],
  AdjustWindowRectEx: [ int, { lpRect: LPRECT, dwStyle: DWORD, bMenu: BOOL, dwExStyle: DWORD } ],
  SetWindowContextHelpId: [ int, { DWORD: DWORD } ],
  GetWindowContextHelpId: [ ulong, { HWND: HWND } ],
  SetMenuContextHelpId: [ int, { DWORD: DWORD } ],
  GetMenuContextHelpId: [ ulong, { HMENU: HMENU } ],
  MessageBoxA: [ VoidT, { hWnd: HWND, lpText: LPCSTR, lpCaption: LPCSTR, uType: UINT } ],
  MessageBoxW: [ VoidT, { hWnd: HWND, lpText: LPCWSTR, lpCaption: LPCWSTR, uType: UINT } ],
  MessageBoxExA: [ VoidT, { hWnd: HWND, lpText: LPCSTR, lpCaption: LPCSTR, uType: UINT, wLanguageId: WORD } ],
  MessageBoxExW: [ VoidT, { hWnd: HWND, lpText: LPCWSTR, lpCaption: LPCWSTR, uType: UINT, wLanguageId: WORD } ],
  MessageBoxIndirectA: [ VoidT, { lpmbp: uint.Δ } ],
  MessageBoxIndirectW: [ VoidT, { lpmbp: uint.Δ } ],
  MessageBeep: [ int, { uType: UINT } ],
  ShowCursor: [ VoidT, { bShow: BOOL } ],
  SetCursorPos: [ int, { X: int, Y: int } ],
  SetPhysicalCursorPos: [ int, { X: int, Y: int } ],
  SetCursor: [ VOIDPTR, { hCursor: HCURSOR } ],
  GetCursorPos: [ int, { lpPoint: LPPOINT } ],
  GetPhysicalCursorPos: [ int, { lpPoint: LPPOINT } ],
  ClipCursor: [ int, { lpRect: uint.Δ } ],
  GetClipCursor: [ int, { lpRect: LPRECT } ],
  GetCursor: [ VOIDPTR, {  } ],
  CreateCaret: [ int, { hWnd: HWND, hBitmap: HBITMAP, nWidth: int, nHeight: int } ],
  GetCaretBlinkTime: [ uint, {  } ],
  SetCaretBlinkTime: [ int, { uMSeconds: UINT } ],
  DestroyCaret: [ int, {  } ],
  HideCaret: [ int, { hWnd: HWND } ],
  ShowCaret: [ int, { hWnd: HWND } ],
  SetCaretPos: [ int, { X: int, Y: int } ],
  GetCaretPos: [ int, { lpPoint: LPPOINT } ],
  ClientToScreen: [ int, { hWnd: HWND, lpPoint: LPPOINT } ],
  ScreenToClient: [ int, { hWnd: HWND, lpPoint: LPPOINT } ],
  LogicalToPhysicalPoint: [ int, { hWnd: HWND, lpPoint: LPPOINT } ],
  PhysicalToLogicalPoint: [ int, { hWnd: HWND, lpPoint: LPPOINT } ],
  MapWindowPoints: [ VoidT, { hWndFrom: HWND, hWndTo: HWND, lpPoints: LPPOINT, cPoints: UINT } ],
  WindowFromPoint: [ VOIDPTR, { Point: POINT } ],
  WindowFromPhysicalPoint: [ VOIDPTR, { Point: POINT } ],
  ChildWindowFromPoint: [ VOIDPTR, { hWndParent: HWND, Point: POINT } ],
  ChildWindowFromPointEx: [ VOIDPTR, { hwnd: HWND, pt: POINT, flags: UINT } ],
  GetSysColor: [ ulong, { nIndex: int } ],
  GetSysColorBrush: [ VOIDPTR, { nIndex: int } ],
  SetSysColors: [ int, { cElements: int, lpaElements: int.Δ, lpaRgbValues: ulong.Δ } ],
  DrawFocusRect: [ int, { hDC: HDC, lprc: uint.Δ } ],
  FillRect: [ VoidT, { hDC: HDC, lprc: uint.Δ, hbr: HBRUSH } ],
  FrameRect: [ VoidT, { hDC: HDC, lprc: uint.Δ, hbr: HBRUSH } ],
  InvertRect: [ int, { hDC: HDC, lprc: uint.Δ } ],
  SetRect: [ int, { lprc: LPRECT, xLeft: int, yTop: int, xRight: int, yBottom: int } ],
  SetRectEmpty: [ int, { lprc: LPRECT } ],
  CopyRect: [ int, { lprcDst: LPRECT, lprcSrc: uint.Δ } ],
  InflateRect: [ int, { lprc: LPRECT, dx: int, dy: int } ],
  IntersectRect: [ int, { lprcDst: LPRECT, lprcSrc1: uint.Δ, lprcSrc2: uint.Δ } ],
  UnionRect: [ int, { lprcDst: LPRECT, lprcSrc1: uint.Δ, lprcSrc2: uint.Δ } ],
  SubtractRect: [ int, { lprcDst: LPRECT, lprcSrc1: uint.Δ, lprcSrc2: uint.Δ } ],
  OffsetRect: [ int, { lprc: LPRECT, dx: int, dy: int } ],
  IsRectEmpty: [ int, { lprc: uint.Δ } ],
  EqualRect: [ int, { lprc1: uint.Δ, lprc2: uint.Δ } ],
  PtInRect: [ int, { lprc: uint.Δ, pt: POINT } ],
  GetWindowWord: [ ushort, { hWnd: HWND, nIndex: int } ],
  SetWindowWord: [ ushort, { hWnd: HWND, nIndex: int, wNewWord: WORD } ],
  GetWindowLongA: [ long, { hWnd: HWND, nIndex: int } ],
  GetWindowLongW: [ long, { hWnd: HWND, nIndex: int } ],
  SetWindowLongA: [ long, { hWnd: HWND, nIndex: int, dwNewLong: LONG } ],
  SetWindowLongW: [ long, { hWnd: HWND, nIndex: int, dwNewLong: LONG } ],
  GetClassWord: [ ushort, { hWnd: HWND, nIndex: int } ],
  SetClassWord: [ ushort, { hWnd: HWND, nIndex: int, wNewWord: WORD } ],
  GetClassLongA: [ ulong, { hWnd: HWND, nIndex: int } ],
  GetClassLongW: [ ulong, { hWnd: HWND, nIndex: int } ],
  SetClassLongA: [ ulong, { hWnd: HWND, nIndex: int, dwNewLong: LONG } ],
  SetClassLongW: [ ulong, { hWnd: HWND, nIndex: int, dwNewLong: LONG } ],
  GetProcessDefaultLayout: [ int, { pdwDefaultLayout: ulong.Δ } ],
  SetProcessDefaultLayout: [ int, { dwDefaultLayout: DWORD } ],
  GetDesktopWindow: [ VOIDPTR, {  } ],
  GetParent: [ VOIDPTR, { hWnd: HWND } ],
  SetParent: [ VOIDPTR, { hWndChild: HWND, hWndNewParent: HWND } ],
  EnumChildWindows: [ int, { hWndParent: HWND, lpEnumFunc: WNDENUMPROC, lParam: LPARAM } ],
  FindWindowA: [ VOIDPTR, { lpClassName: LPCSTR, lpWindowName: LPCSTR } ],
  FindWindowW: [ VOIDPTR, { lpClassName: LPCWSTR, lpWindowName: LPCWSTR } ],
  FindWindowExA: [ VOIDPTR, { hWndParent: HWND, hWndChildAfter: HWND, lpszClass: LPCSTR, lpszWindow: LPCSTR } ],
  FindWindowExW: [ VOIDPTR, { hWndParent: HWND, hWndChildAfter: HWND, lpszClass: LPCWSTR, lpszWindow: LPCWSTR } ],
  GetShellWindow: [ VOIDPTR, {  } ],
  RegisterShellHookWindow: [ int, { hwnd: HWND } ],
  DeregisterShellHookWindow: [ int, { hwnd: HWND } ],
  EnumWindows: [ int, { lpEnumFunc: WNDENUMPROC, lParam: LPARAM } ],
  EnumThreadWindows: [ int, { dwThreadId: DWORD, lpfn: WNDENUMPROC, lParam: LPARAM } ],
  GetClassNameA: [ VoidT, { hWnd: HWND, lpClassName: LPSTR, nMaxCount: int } ],
  GetClassNameW: [ VoidT, { hWnd: HWND, lpClassName: LPWSTR, nMaxCount: int } ],
  GetTopWindow: [ VOIDPTR, { hWnd: HWND } ],
  GetWindowThreadProcessId: [ ulong, { hWnd: HWND, lpdwProcessId: LPDWORD } ],
  IsGUIThread: [ int, { bConvert: BOOL } ],
  GetLastActivePopup: [ VOIDPTR, { hWnd: HWND } ],
  GetWindow: [ VOIDPTR, { hWnd: HWND, uCmd: UINT } ],
  SetWindowsHookA: [ VOIDPTR, { nFilterType: int, pfnFilterProc: HOOKPROC } ],
  SetWindowsHookW: [ VOIDPTR, { nFilterType: int, pfnFilterProc: HOOKPROC } ],
  UnhookWindowsHook: [ int, { nCode: int, pfnFilterProc: HOOKPROC } ],
  SetWindowsHookExA: [ VOIDPTR, { idHook: int, lpfn: HOOKPROC, hmod: HINSTANCE, dwThreadId: DWORD } ],
  SetWindowsHookExW: [ VOIDPTR, { idHook: int, lpfn: HOOKPROC, hmod: HINSTANCE, dwThreadId: DWORD } ],
  UnhookWindowsHookEx: [ int, { hhk: HHOOK } ],
  CallNextHookEx: [ long, { hhk: HHOOK, nCode: int, wParam: WPARAM, lParam: LPARAM } ],
  CheckMenuRadioItem: [ int, { hmenu: HMENU, first: UINT, last: UINT, check: UINT, flags: UINT } ],
  LoadBitmapA: [ VOIDPTR, { hInstance: HINSTANCE, lpBitmapName: LPCSTR } ],
  LoadBitmapW: [ VOIDPTR, { hInstance: HINSTANCE, lpBitmapName: LPCWSTR } ],
  LoadCursorA: [ VOIDPTR, { hInstance: HINSTANCE, lpCursorName: LPCSTR } ],
  LoadCursorW: [ VOIDPTR, { hInstance: HINSTANCE, lpCursorName: LPCWSTR } ],
  LoadCursorFromFileA: [ VOIDPTR, { lpFileName: LPCSTR } ],
  LoadCursorFromFileW: [ VOIDPTR, { lpFileName: LPCWSTR } ],
  CreateCursor: [ VOIDPTR, { hInst: HINSTANCE, xHotSpot: int, yHotSpot: int, nWidth: int, nHeight: int, pvANDPlane: VoidT.Δ, pvXORPlane: VoidT.Δ } ],
  DestroyCursor: [ int, { hCursor: HCURSOR } ],
  SetSystemCursor: [ int, { hcur: HCURSOR, id: DWORD } ],
  LoadIconA: [ VOIDPTR, { hInstance: HINSTANCE, lpIconName: LPCSTR } ],
  LoadIconW: [ VOIDPTR, { hInstance: HINSTANCE, lpIconName: LPCWSTR } ],
  PrivateExtractIconsA: [ uint, { szFileName: LPCSTR, nIconIndex: int, cxIcon: int, cyIcon: int, phicon: VOIDPTR.Δ, piconid: uint.Δ, nIcons: UINT, flags: UINT } ],
  PrivateExtractIconsW: [ uint, { szFileName: LPCWSTR, nIconIndex: int, cxIcon: int, cyIcon: int, phicon: VOIDPTR.Δ, piconid: uint.Δ, nIcons: UINT, flags: UINT } ],
  CreateIcon: [ VOIDPTR, { hInstance: HINSTANCE, nWidth: int, nHeight: int, cPlanes: BYTE, cBitsPixel: BYTE, lpbANDbits: uchar.Δ, lpbXORbits: uchar.Δ } ],
  DestroyIcon: [ int, { hIcon: HICON } ],
  LookupIconIdFromDirectory: [ VoidT, { presbits: PBYTE, fIcon: BOOL } ],
  LookupIconIdFromDirectoryEx: [ VoidT, { presbits: PBYTE, fIcon: BOOL, cxDesired: int, cyDesired: int, Flags: UINT } ],
  CreateIconFromResource: [ VOIDPTR, { presbits: PBYTE, dwResSize: DWORD, fIcon: BOOL, dwVer: DWORD } ],
  CreateIconFromResourceEx: [ VOIDPTR, { presbits: PBYTE, dwResSize: DWORD, fIcon: BOOL, dwVer: DWORD, cxDesired: int, cyDesired: int, Flags: UINT } ],
  LoadImageA: [ VoidT.Δ, { hInst: HINSTANCE, name: LPCSTR, type: UINT, cx: int, cy: int, fuLoad: UINT } ],
  LoadImageW: [ VoidT.Δ, { hInst: HINSTANCE, name: LPCWSTR, type: UINT, cx: int, cy: int, fuLoad: UINT } ],
  CopyImage: [ VoidT.Δ, { h: HANDLE, type: UINT, cx: int, cy: int, flags: UINT } ],
  DrawIconEx: [ int, { hdc: HDC, xLeft: int, yTop: int, hIcon: HICON, cxWidth: int, cyWidth: int, istepIfAniCur: UINT, hbrFlickerFreeDraw: HBRUSH, diFlags: UINT } ],
  CreateIconIndirect: [ VOIDPTR, { piconinfo: PICONINFO } ],
  CopyIcon: [ VOIDPTR, { hIcon: HICON } ],
  GetIconInfo: [ int, { hIcon: HICON, piconinfo: PICONINFO } ],
  GetIconInfoExA: [ int, { hicon: HICON, piconinfo: PICONINFOEXA } ],
  GetIconInfoExW: [ int, { hicon: HICON, piconinfo: PICONINFOEXW } ],
  LoadStringA: [ VoidT, { hInstance: HINSTANCE, uID: UINT, lpBuffer: LPSTR, cchBufferMax: int } ],
  LoadStringW: [ VoidT, { hInstance: HINSTANCE, uID: UINT, lpBuffer: LPWSTR, cchBufferMax: int } ],
  IsDialogMessageA: [ int, { hDlg: HWND, lpMsg: LPMSG } ],
  IsDialogMessageW: [ int, { hDlg: HWND, lpMsg: LPMSG } ],
  MapDialogRect: [ int, { hDlg: HWND, lpRect: LPRECT } ],
  DlgDirListA: [ VoidT, { hDlg: HWND, lpPathSpec: LPSTR, nIDListBox: int, nIDStaticPath: int, uFileType: UINT } ],
  DlgDirListW: [ VoidT, { hDlg: HWND, lpPathSpec: LPWSTR, nIDListBox: int, nIDStaticPath: int, uFileType: UINT } ],
  DlgDirSelectExA: [ int, { hwndDlg: HWND, lpString: LPSTR, chCount: int, idListBox: int } ],
  DlgDirSelectExW: [ int, { hwndDlg: HWND, lpString: LPWSTR, chCount: int, idListBox: int } ],
  DlgDirListComboBoxA: [ VoidT, { hDlg: HWND, lpPathSpec: LPSTR, nIDComboBox: int, nIDStaticPath: int, uFiletype: UINT } ],
  DlgDirListComboBoxW: [ VoidT, { hDlg: HWND, lpPathSpec: LPWSTR, nIDComboBox: int, nIDStaticPath: int, uFiletype: UINT } ],
  DlgDirSelectComboBoxExA: [ int, { hwndDlg: HWND, lpString: LPSTR, cchOut: int, idComboBox: int } ],
  DlgDirSelectComboBoxExW: [ int, { hwndDlg: HWND, lpString: LPWSTR, cchOut: int, idComboBox: int } ],
  SetScrollInfo: [ VoidT, { hwnd: HWND, nBar: int, lpsi: LPCSCROLLINFO, redraw: BOOL } ],
  GetScrollInfo: [ int, { hwnd: HWND, nBar: int, lpsi: LPSCROLLINFO } ],
  DefFrameProcA: [ long, { hWnd: HWND, hWndMDIClient: HWND, uMsg: UINT, wParam: WPARAM, lParam: LPARAM } ],
  DefFrameProcW: [ long, { hWnd: HWND, hWndMDIClient: HWND, uMsg: UINT, wParam: WPARAM, lParam: LPARAM } ],
  DefMDIChildProcA: [ long, { hWnd: HWND, uMsg: UINT, wParam: WPARAM, lParam: LPARAM } ],
  DefMDIChildProcW: [ long, { hWnd: HWND, uMsg: UINT, wParam: WPARAM, lParam: LPARAM } ],
  TranslateMDISysAccel: [ int, { hWndClient: HWND, lpMsg: LPMSG } ],
  ArrangeIconicWindows: [ uint, { hWnd: HWND } ],
  CreateMDIWindowA: [ VOIDPTR, { lpClassName: LPCSTR, lpWindowName: LPCSTR, dwStyle: DWORD, X: int, Y: int, nWidth: int, nHeight: int, hWndParent: HWND, hInstance: HINSTANCE, lParam: LPARAM } ],
  CreateMDIWindowW: [ VOIDPTR, { lpClassName: LPCWSTR, lpWindowName: LPCWSTR, dwStyle: DWORD, X: int, Y: int, nWidth: int, nHeight: int, hWndParent: HWND, hInstance: HINSTANCE, lParam: LPARAM } ],
  TileWindows: [ ushort, { hwndParent: HWND, wHow: UINT, lpRect: uint.Δ, cKids: UINT, lpKids: VOIDPTR.Δ } ],
  CascadeWindows: [ ushort, { hwndParent: HWND, wHow: UINT, lpRect: uint.Δ, cKids: UINT, lpKids: VOIDPTR.Δ } ],
  WinHelpA: [ int, { hWndMain: HWND, lpszHelp: LPCSTR, uCommand: UINT, dwData: ULONG_PTR } ],
  WinHelpW: [ int, { hWndMain: HWND, lpszHelp: LPCWSTR, uCommand: UINT, dwData: ULONG_PTR } ],
  GetGuiResources: [ ulong, { hProcess: HANDLE, uiFlags: DWORD } ],
  ChangeDisplaySettingsA: [ long, { lpDevMode: uint.Δ, dwFlags: DWORD } ],
  ChangeDisplaySettingsW: [ long, { lpDevMode: uint.Δ, dwFlags: DWORD } ],
  ChangeDisplaySettingsExA: [ long, { lpszDeviceName: LPCSTR, lpDevMode: uint.Δ, hwnd: HWND, dwflags: DWORD, lParam: LPVOID } ],
  ChangeDisplaySettingsExW: [ long, { lpszDeviceName: LPCWSTR, lpDevMode: uint.Δ, hwnd: HWND, dwflags: DWORD, lParam: LPVOID } ],
  EnumDisplaySettingsA: [ int, { lpszDeviceName: LPCSTR, iModeNum: DWORD, lpDevMode: uint.Δ } ],
  EnumDisplaySettingsW: [ int, { lpszDeviceName: LPCWSTR, iModeNum: DWORD, lpDevMode: uint.Δ } ],
  EnumDisplaySettingsExA: [ int, { lpszDeviceName: LPCSTR, iModeNum: DWORD, lpDevMode: uint.Δ, dwFlags: DWORD } ],
  EnumDisplaySettingsExW: [ int, { lpszDeviceName: LPCWSTR, iModeNum: DWORD, lpDevMode: uint.Δ, dwFlags: DWORD } ],
  EnumDisplayDevicesA: [ int, { lpDevice: LPCSTR, iDevNum: DWORD, lpDisplayDevice: PDISPLAY_DEVICEA, dwFlags: DWORD } ],
  EnumDisplayDevicesW: [ int, { lpDevice: LPCWSTR, iDevNum: DWORD, lpDisplayDevice: PDISPLAY_DEVICEW, dwFlags: DWORD } ],
  GetDisplayConfigBufferSizes: [ long, { flags: UINT32, numPathArrayElements: uint.Δ, numModeInfoArrayElements: uint.Δ } ],
  SetDisplayConfig: [ long, { numPathArrayElements: UINT32, pathArray: uint.Δ, numModeInfoArrayElements: UINT32, modeInfoArray: uint.Δ, flags: UINT32 } ],
  QueryDisplayConfig: [ long, { flags: UINT32, numPathArrayElements: uint.Δ, pathArray: uint.Δ, numModeInfoArrayElements: uint.Δ, modeInfoArray: uint.Δ, currentTopologyId: uint.Δ } ],
  DisplayConfigGetDeviceInfo: [ long, { requestPacket: uint.Δ } ],
  DisplayConfigSetDeviceInfo: [ long, { setPacket: uint.Δ } ],
  SystemParametersInfoA: [ int, { uiAction: UINT, uiParam: UINT, pvParam: PVOID, fWinIni: UINT } ],
  SystemParametersInfoW: [ int, { uiAction: UINT, uiParam: UINT, pvParam: PVOID, fWinIni: UINT } ],
  SoundSentry: [ int, {  } ],
  SetDebugErrorLevel: [ VoidT, { dwLevel: DWORD } ],
  SetLastErrorEx: [ VoidT, { dwErrCode: DWORD, dwType: DWORD } ],
  InternalGetWindowText: [ VoidT, { hWnd: HWND, pString: LPWSTR, cchMaxCount: int } ],
  CancelShutdown: [ int, {  } ],
  MonitorFromPoint: [ VOIDPTR, { pt: POINT, dwFlags: DWORD } ],
  MonitorFromRect: [ VOIDPTR, { lprc: LPCRECT, dwFlags: DWORD } ],
  MonitorFromWindow: [ VOIDPTR, { hwnd: HWND, dwFlags: DWORD } ],
  GetMonitorInfoA: [ int, { hMonitor: HMONITOR, lpmi: LPMONITORINFO } ],
  GetMonitorInfoW: [ int, { hMonitor: HMONITOR, lpmi: LPMONITORINFO } ],
  EnumDisplayMonitors: [ int, { hdc: HDC, lprcClip: LPCRECT, lpfnEnum: MONITORENUMPROC, dwData: LPARAM } ],
  NotifyWinEvent: [ VoidT, { event: DWORD, hwnd: HWND, idObject: LONG, idChild: LONG } ],
  SetWinEventHook: [ VOIDPTR, { eventMin: DWORD, eventMax: DWORD, hmodWinEventProc: HMODULE, pfnWinEventProc: WINEVENTPROC, idProcess: DWORD, idThread: DWORD, dwFlags: DWORD } ],
  IsWinEventHookInstalled: [ int, { event: DWORD } ],
  UnhookWinEvent: [ int, { hWinEventHook: HWINEVENTHOOK } ],
  GetGUIThreadInfo: [ int, { idThread: DWORD, pgui: PGUITHREADINFO } ],
  BlockInput: [ int, { fBlockIt: BOOL } ],
  SetProcessDPIAware: [ int, {  } ],
  IsProcessDPIAware: [ int, {  } ],
  GetWindowModuleFileNameA: [ uint, { hwnd: HWND, pszFileName: LPSTR, cchFileNameMax: UINT } ],
  GetWindowModuleFileNameW: [ uint, { hwnd: HWND, pszFileName: LPWSTR, cchFileNameMax: UINT } ],
  GetCursorInfo: [ int, { pci: PCURSORINFO } ],
  GetWindowInfo: [ int, { hwnd: HWND, pwi: PWINDOWINFO } ],
  GetTitleBarInfo: [ int, { hwnd: HWND, pti: PTITLEBARINFO } ],
  GetMenuBarInfo: [ int, { hwnd: HWND, idObject: LONG, idItem: LONG, pmbi: PMENUBARINFO } ],
  GetScrollBarInfo: [ int, { hwnd: HWND, idObject: LONG, psbi: PSCROLLBARINFO } ],
  GetComboBoxInfo: [ int, { hwndCombo: HWND, pcbi: PCOMBOBOXINFO } ],
  GetAncestor: [ VOIDPTR, { hwnd: HWND, gaFlags: UINT } ],
  RealChildWindowFromPoint: [ VOIDPTR, { hwndParent: HWND, ptParentClientCoords: POINT } ],
  RealGetWindowClassA: [ uint, { hwnd: HWND, ptszClassName: LPSTR, cchClassNameMax: UINT } ],
  RealGetWindowClassW: [ uint, { hwnd: HWND, ptszClassName: LPWSTR, cchClassNameMax: UINT } ],
  GetAltTabInfoA: [ int, { hwnd: HWND, iItem: int, pati: PALTTABINFO, pszItemText: LPSTR, cchItemText: UINT } ],
  GetAltTabInfoW: [ int, { hwnd: HWND, iItem: int, pati: PALTTABINFO, pszItemText: LPWSTR, cchItemText: UINT } ],
  GetListBoxInfo: [ ulong, { hwnd: HWND } ],
  LockWorkStation: [ int, {  } ],
  UserHandleGrantAccess: [ int, { hUserHandle: HANDLE, hJob: HANDLE, bGrant: BOOL } ],
  GetRawInputData: [ uint, { hRawInput: HRAWINPUT, uiCommand: UINT, pData: LPVOID, pcbSize: PUINT, cbSizeHeader: UINT } ],
  GetRawInputDeviceInfoA: [ uint, { hDevice: HANDLE, uiCommand: UINT, pData: LPVOID, pcbSize: PUINT } ],
  GetRawInputDeviceInfoW: [ uint, { hDevice: HANDLE, uiCommand: UINT, pData: LPVOID, pcbSize: PUINT } ],
  GetRawInputBuffer: [ uint, { pData: PRAWINPUT, pcbSize: PUINT, cbSizeHeader: UINT } ],
  RegisterRawInputDevices: [ int, { pRawInputDevices: PCRAWINPUTDEVICE, uiNumDevices: UINT, cbSize: UINT } ],
  GetRegisteredRawInputDevices: [ uint, { pRawInputDevices: PRAWINPUTDEVICE, puiNumDevices: PUINT, cbSize: UINT } ],
  GetRawInputDeviceList: [ uint, { pRawInputDeviceList: PRAWINPUTDEVICELIST, puiNumDevices: PUINT, cbSize: UINT } ],
  DefRawInputProc: [ long, { paRawInput: VOIDPTR.Δ, nInput: INT, cbSizeHeader: UINT } ],
  ChangeWindowMessageFilter: [ int, { message: UINT, dwFlag: DWORD } ],
  ChangeWindowMessageFilterEx: [ int, { hwnd: HWND, message: UINT, action: DWORD, pChangeFilterStruct: PCHANGEFILTERSTRUCT } ],
  GetGestureInfo: [ int, { hGestureInfo: HGESTUREINFO, pGestureInfo: PGESTUREINFO } ],
  GetGestureExtraArgs: [ int, { hGestureInfo: HGESTUREINFO, cbExtraArgs: UINT, pExtraArgs: PBYTE } ],
  CloseGestureInfoHandle: [ int, { hGestureInfo: HGESTUREINFO } ],
  SetGestureConfig: [ int, { hwnd: HWND, dwReserved: DWORD, cIDs: UINT, pGestureConfig: PGESTURECONFIG, cbSize: UINT } ],
  GetGestureConfig: [ int, { hwnd: HWND, dwReserved: DWORD, dwFlags: DWORD, pcIDs: PUINT, pGestureConfig: PGESTURECONFIG, cbSize: UINT } ],
  ShutdownBlockReasonCreate: [ int, { hWnd: HWND, pwszReason: LPCWSTR } ],
  ShutdownBlockReasonQuery: [ int, { hWnd: HWND, pwszBuff: LPWSTR, pcchBuff: ulong.Δ } ],
  ShutdownBlockReasonDestroy: [ int, { hWnd: HWND } ],
  IsValidCodePage: [ int, { CodePage: UINT } ],
  GetACP: [ uint, {  } ],
  GetOEMCP: [ uint, {  } ],
  GetCPInfo: [ int, { CodePage: UINT, lpCPInfo: LPCPINFO } ],
  GetCPInfoExA: [ int, { CodePage: UINT, dwFlags: DWORD, lpCPInfoEx: LPCPINFOEXA } ],
  GetCPInfoExW: [ int, { CodePage: UINT, dwFlags: DWORD, lpCPInfoEx: LPCPINFOEXW } ],
  IsDBCSLeadByte: [ int, { TestChar: BYTE } ],
  IsDBCSLeadByteEx: [ int, { CodePage: UINT, TestChar: BYTE } ],
  MultiByteToWideChar: [ VoidT, { CodePage: UINT, dwFlags: DWORD, lpMultiByteStr: LPCSTR, cbMultiByte: int, lpWideCharStr: LPWSTR, cchWideChar: int } ],
  WideCharToMultiByte: [ VoidT, { CodePage: UINT, dwFlags: DWORD, lpWideCharStr: LPCWSTR, cchWideChar: int, lpMultiByteStr: LPSTR, cbMultiByte: int, lpDefaultChar: LPCSTR, lpUsedDefaultChar: LPBOOL } ],
  CompareStringA: [ VoidT, { Locale: LCID, dwCmpFlags: DWORD, lpString1: PCNZCH, cchCount1: int, lpString2: PCNZCH, cchCount2: int } ],
  CompareStringW: [ VoidT, { Locale: LCID, dwCmpFlags: DWORD, lpString1: PCNZWCH, cchCount1: int, lpString2: PCNZWCH, cchCount2: int } ],
  FindNLSString: [ VoidT, { Locale: LCID, dwFindNLSStringFlags: DWORD, lpStringSource: LPCWSTR, cchSource: int, lpStringValue: LPCWSTR, cchValue: int, pcchFound: LPINT } ],
  FindStringOrdinal: [ VoidT, { dwFindStringOrdinalFlags: DWORD, lpStringSource: LPCWSTR, cchSource: int, lpStringValue: LPCWSTR, cchValue: int, bIgnoreCase: BOOL } ],
  LCMapStringA: [ VoidT, { Locale: LCID, dwMapFlags: DWORD, lpSrcStr: LPCSTR, cchSrc: int, lpDestStr: LPSTR, cchDest: int } ],
  LCMapStringW: [ VoidT, { Locale: LCID, dwMapFlags: DWORD, lpSrcStr: LPCWSTR, cchSrc: int, lpDestStr: LPWSTR, cchDest: int } ],
  GetLocaleInfoA: [ VoidT, { Locale: LCID, LCType: LCTYPE, lpLCData: LPSTR, cchData: int } ],
  GetLocaleInfoW: [ VoidT, { Locale: LCID, LCType: LCTYPE, lpLCData: LPWSTR, cchData: int } ],
  SetLocaleInfoA: [ int, { Locale: LCID, LCType: LCTYPE, lpLCData: LPCSTR } ],
  SetLocaleInfoW: [ int, { Locale: LCID, LCType: LCTYPE, lpLCData: LPCWSTR } ],
  GetCalendarInfoA: [ VoidT, { Locale: LCID, Calendar: CALID, CalType: CALTYPE, lpCalData: LPSTR, cchData: int, lpValue: LPDWORD } ],
  GetCalendarInfoW: [ VoidT, { Locale: LCID, Calendar: CALID, CalType: CALTYPE, lpCalData: LPWSTR, cchData: int, lpValue: LPDWORD } ],
  SetCalendarInfoA: [ int, { Locale: LCID, Calendar: CALID, CalType: CALTYPE, lpCalData: LPCSTR } ],
  SetCalendarInfoW: [ int, { Locale: LCID, Calendar: CALID, CalType: CALTYPE, lpCalData: LPCWSTR } ],
  LCIDToLocaleName: [ VoidT, { Locale: LCID, lpName: LPWSTR, cchName: int, dwFlags: DWORD } ],
  LocaleNameToLCID: [ ulong, { lpName: LPCWSTR, dwFlags: DWORD } ],
  GetTimeFormatA: [ VoidT, { Locale: LCID, dwFlags: DWORD, lpTime: uint.Δ, lpFormat: LPCSTR, lpTimeStr: LPSTR, cchTime: int } ],
  GetTimeFormatW: [ VoidT, { Locale: LCID, dwFlags: DWORD, lpTime: uint.Δ, lpFormat: LPCWSTR, lpTimeStr: LPWSTR, cchTime: int } ],
  GetDurationFormat: [ VoidT, { Locale: LCID, dwFlags: DWORD, lpDuration: uint.Δ, ullDuration: ULONGLONG, lpFormat: LPCWSTR, lpDurationStr: LPWSTR, cchDuration: int } ],
  GetDateFormatA: [ VoidT, { Locale: LCID, dwFlags: DWORD, lpDate: uint.Δ, lpFormat: LPCSTR, lpDateStr: LPSTR, cchDate: int } ],
  GetDateFormatW: [ VoidT, { Locale: LCID, dwFlags: DWORD, lpDate: uint.Δ, lpFormat: LPCWSTR, lpDateStr: LPWSTR, cchDate: int } ],
  GetNumberFormatA: [ VoidT, { Locale: LCID, dwFlags: DWORD, lpValue: LPCSTR, lpFormat: uint.Δ, lpNumberStr: LPSTR, cchNumber: int } ],
  GetNumberFormatW: [ VoidT, { Locale: LCID, dwFlags: DWORD, lpValue: LPCWSTR, lpFormat: uint.Δ, lpNumberStr: LPWSTR, cchNumber: int } ],
  GetCurrencyFormatA: [ VoidT, { Locale: LCID, dwFlags: DWORD, lpValue: LPCSTR, lpFormat: uint.Δ, lpCurrencyStr: LPSTR, cchCurrency: int } ],
  GetCurrencyFormatW: [ VoidT, { Locale: LCID, dwFlags: DWORD, lpValue: LPCWSTR, lpFormat: uint.Δ, lpCurrencyStr: LPWSTR, cchCurrency: int } ],
  EnumCalendarInfoA: [ int, { lpCalInfoEnumProc: CALINFO_ENUMPROCA, Locale: LCID, Calendar: CALID, CalType: CALTYPE } ],
  EnumCalendarInfoW: [ int, { lpCalInfoEnumProc: CALINFO_ENUMPROCW, Locale: LCID, Calendar: CALID, CalType: CALTYPE } ],
  EnumCalendarInfoExA: [ int, { lpCalInfoEnumProcEx: CALINFO_ENUMPROCEXA, Locale: LCID, Calendar: CALID, CalType: CALTYPE } ],
  EnumCalendarInfoExW: [ int, { lpCalInfoEnumProcEx: CALINFO_ENUMPROCEXW, Locale: LCID, Calendar: CALID, CalType: CALTYPE } ],
  EnumTimeFormatsA: [ int, { lpTimeFmtEnumProc: TIMEFMT_ENUMPROCA, Locale: LCID, dwFlags: DWORD } ],
  EnumTimeFormatsW: [ int, { lpTimeFmtEnumProc: TIMEFMT_ENUMPROCW, Locale: LCID, dwFlags: DWORD } ],
  EnumDateFormatsA: [ int, { lpDateFmtEnumProc: DATEFMT_ENUMPROCA, Locale: LCID, dwFlags: DWORD } ],
  EnumDateFormatsW: [ int, { lpDateFmtEnumProc: DATEFMT_ENUMPROCW, Locale: LCID, dwFlags: DWORD } ],
  EnumDateFormatsExA: [ int, { lpDateFmtEnumProcEx: DATEFMT_ENUMPROCEXA, Locale: LCID, dwFlags: DWORD } ],
  EnumDateFormatsExW: [ int, { lpDateFmtEnumProcEx: DATEFMT_ENUMPROCEXW, Locale: LCID, dwFlags: DWORD } ],
  IsValidLanguageGroup: [ int, { LanguageGroup: LGRPID, dwFlags: DWORD } ],
  GetNLSVersion: [ int, { Function: NLS_FUNCTION, Locale: LCID, lpVersionInformation: LPNLSVERSIONINFO } ],
  IsNLSDefinedString: [ int, { Function: NLS_FUNCTION, dwFlags: DWORD, lpVersionInformation: LPNLSVERSIONINFO, lpString: LPCWSTR, cchStr: INT } ],
  IsValidLocale: [ int, { Locale: LCID, dwFlags: DWORD } ],
  GetGeoInfoA: [ VoidT, { Location: GEOID, GeoType: GEOTYPE, lpGeoData: LPSTR, cchData: int, LangId: LANGID } ],
  GetGeoInfoW: [ VoidT, { Location: GEOID, GeoType: GEOTYPE, lpGeoData: LPWSTR, cchData: int, LangId: LANGID } ],
  EnumSystemGeoID: [ int, { GeoClass: GEOCLASS, ParentGeoId: GEOID, lpGeoEnumProc: GEO_ENUMPROC } ],
  GetUserGeoID: [ long, { GeoClass: GEOCLASS } ],
  SetUserGeoID: [ int, { GeoId: GEOID } ],
  ConvertDefaultLocale: [ ulong, { Locale: LCID } ],
  GetThreadLocale: [ ulong, {  } ],
  SetThreadLocale: [ int, { Locale: LCID } ],
  GetSystemDefaultUILanguage: [ ushort, {  } ],
  GetUserDefaultUILanguage: [ ushort, {  } ],
  GetSystemDefaultLangID: [ ushort, {  } ],
  GetUserDefaultLangID: [ ushort, {  } ],
  GetSystemDefaultLCID: [ ulong, {  } ],
  GetUserDefaultLCID: [ ulong, {  } ],
  SetThreadUILanguage: [ ushort, { LangId: LANGID } ],
  GetThreadUILanguage: [ ushort, {  } ],
  GetProcessPreferredUILanguages: [ int, { dwFlags: DWORD, pulNumLanguages: PULONG, pwszLanguagesBuffer: PZZWSTR, pcchLanguagesBuffer: PULONG } ],
  SetProcessPreferredUILanguages: [ int, { dwFlags: DWORD, pwszLanguagesBuffer: PCZZWSTR, pulNumLanguages: PULONG } ],
  GetUserPreferredUILanguages: [ int, { dwFlags: DWORD, pulNumLanguages: PULONG, pwszLanguagesBuffer: PZZWSTR, pcchLanguagesBuffer: PULONG } ],
  GetSystemPreferredUILanguages: [ int, { dwFlags: DWORD, pulNumLanguages: PULONG, pwszLanguagesBuffer: PZZWSTR, pcchLanguagesBuffer: PULONG } ],
  GetThreadPreferredUILanguages: [ int, { dwFlags: DWORD, pulNumLanguages: PULONG, pwszLanguagesBuffer: PZZWSTR, pcchLanguagesBuffer: PULONG } ],
  SetThreadPreferredUILanguages: [ int, { dwFlags: DWORD, pwszLanguagesBuffer: PCZZWSTR, pulNumLanguages: PULONG } ],
  GetFileMUIInfo: [ int, { dwFlags: DWORD, pcwszFilePath: PCWSTR, pFileMUIInfo: PFILEMUIINFO, pcbFileMUIInfo: ulong.Δ } ],
  GetFileMUIPath: [ int, { dwFlags: DWORD, pcwszFilePath: PCWSTR, pwszLanguage: PWSTR, pcchLanguage: PULONG, pwszFileMUIPath: PWSTR, pcchFileMUIPath: PULONG, pululEnumerator: PULONGLONG } ],
  GetUILanguageInfo: [ int, { dwFlags: DWORD, pwmszLanguage: PCZZWSTR, pwszFallbackLanguages: PZZWSTR, pcchFallbackLanguages: PDWORD, pAttributes: PDWORD } ],
  NotifyUILanguageChange: [ int, { dwFlags: DWORD, pcwstrNewLanguage: PCWSTR, pcwstrPreviousLanguage: PCWSTR, dwReserved: DWORD, pdwStatusRtrn: PDWORD } ],
  GetStringTypeExA: [ int, { Locale: LCID, dwInfoType: DWORD, lpSrcStr: LPCSTR, cchSrc: int, lpCharType: LPWORD } ],
  GetStringTypeExW: [ int, { Locale: LCID, dwInfoType: DWORD, lpSrcStr: LPCWSTR, cchSrc: int, lpCharType: LPWORD } ],
  GetStringTypeA: [ int, { Locale: LCID, dwInfoType: DWORD, lpSrcStr: LPCSTR, cchSrc: int, lpCharType: LPWORD } ],
  GetStringTypeW: [ int, { dwInfoType: DWORD, lpSrcStr: LPCWSTR, cchSrc: int, lpCharType: LPWORD } ],
  FoldStringA: [ VoidT, { dwMapFlags: DWORD, lpSrcStr: LPCSTR, cchSrc: int, lpDestStr: LPSTR, cchDest: int } ],
  FoldStringW: [ VoidT, { dwMapFlags: DWORD, lpSrcStr: LPCWSTR, cchSrc: int, lpDestStr: LPWSTR, cchDest: int } ],
  EnumSystemLanguageGroupsA: [ int, { lpLanguageGroupEnumProc: LANGUAGEGROUP_ENUMPROCA, dwFlags: DWORD, lParam: LONG_PTR } ],
  EnumSystemLanguageGroupsW: [ int, { lpLanguageGroupEnumProc: LANGUAGEGROUP_ENUMPROCW, dwFlags: DWORD, lParam: LONG_PTR } ],
  EnumLanguageGroupLocalesA: [ int, { lpLangGroupLocaleEnumProc: LANGGROUPLOCALE_ENUMPROCA, LanguageGroup: LGRPID, dwFlags: DWORD, lParam: LONG_PTR } ],
  EnumLanguageGroupLocalesW: [ int, { lpLangGroupLocaleEnumProc: LANGGROUPLOCALE_ENUMPROCW, LanguageGroup: LGRPID, dwFlags: DWORD, lParam: LONG_PTR } ],
  EnumUILanguagesA: [ int, { lpUILanguageEnumProc: UILANGUAGE_ENUMPROCA, dwFlags: DWORD, lParam: LONG_PTR } ],
  EnumUILanguagesW: [ int, { lpUILanguageEnumProc: UILANGUAGE_ENUMPROCW, dwFlags: DWORD, lParam: LONG_PTR } ],
  EnumSystemLocalesA: [ int, { lpLocaleEnumProc: LOCALE_ENUMPROCA, dwFlags: DWORD } ],
  EnumSystemLocalesW: [ int, { lpLocaleEnumProc: LOCALE_ENUMPROCW, dwFlags: DWORD } ],
  EnumSystemCodePagesA: [ int, { lpCodePageEnumProc: CODEPAGE_ENUMPROCA, dwFlags: DWORD } ],
  EnumSystemCodePagesW: [ int, { lpCodePageEnumProc: CODEPAGE_ENUMPROCW, dwFlags: DWORD } ],
  NormalizeString: [ VoidT, { NormForm: NORM_FORM, lpSrcString: LPCWSTR, cwSrcLength: int, lpDstString: LPWSTR, cwDstLength: int } ],
  IsNormalizedString: [ int, { NormForm: NORM_FORM, lpString: LPCWSTR, cwLength: int } ],
  IdnToAscii: [ VoidT, { dwFlags: DWORD, lpUnicodeCharStr: LPCWSTR, cchUnicodeChar: int, lpASCIICharStr: LPWSTR, cchASCIIChar: int } ],
  IdnToNameprepUnicode: [ VoidT, { dwFlags: DWORD, lpUnicodeCharStr: LPCWSTR, cchUnicodeChar: int, lpNameprepCharStr: LPWSTR, cchNameprepChar: int } ],
  IdnToUnicode: [ VoidT, { dwFlags: DWORD, lpASCIICharStr: LPCWSTR, cchASCIIChar: int, lpUnicodeCharStr: LPWSTR, cchUnicodeChar: int } ],
  VerifyScripts: [ int, { dwFlags: DWORD, lpLocaleScripts: LPCWSTR, cchLocaleScripts: int, lpTestScripts: LPCWSTR, cchTestScripts: int } ],
  GetStringScripts: [ VoidT, { dwFlags: DWORD, lpString: LPCWSTR, cchString: int, lpScripts: LPWSTR, cchScripts: int } ],
  GetLocaleInfoEx: [ VoidT, { lpLocaleName: LPCWSTR, LCType: LCTYPE, lpLCData: LPWSTR, cchData: int } ],
  GetCalendarInfoEx: [ VoidT, { lpLocaleName: LPCWSTR, Calendar: CALID, lpReserved: LPCWSTR, CalType: CALTYPE, lpCalData: LPWSTR, cchData: int, lpValue: LPDWORD } ],
  GetTimeFormatEx: [ VoidT, { lpLocaleName: LPCWSTR, dwFlags: DWORD, lpTime: uint.Δ, lpFormat: LPCWSTR, lpTimeStr: LPWSTR, cchTime: int } ],
  GetDateFormatEx: [ VoidT, { lpLocaleName: LPCWSTR, dwFlags: DWORD, lpDate: uint.Δ, lpFormat: LPCWSTR, lpDateStr: LPWSTR, cchDate: int, lpCalendar: LPCWSTR } ],
  GetDurationFormatEx: [ VoidT, { lpLocaleName: LPCWSTR, dwFlags: DWORD, lpDuration: uint.Δ, ullDuration: ULONGLONG, lpFormat: LPCWSTR, lpDurationStr: LPWSTR, cchDuration: int } ],
  GetNumberFormatEx: [ VoidT, { lpLocaleName: LPCWSTR, dwFlags: DWORD, lpValue: LPCWSTR, lpFormat: uint.Δ, lpNumberStr: LPWSTR, cchNumber: int } ],
  GetCurrencyFormatEx: [ VoidT, { lpLocaleName: LPCWSTR, dwFlags: DWORD, lpValue: LPCWSTR, lpFormat: uint.Δ, lpCurrencyStr: LPWSTR, cchCurrency: int } ],
  GetUserDefaultLocaleName: [ VoidT, { lpLocaleName: LPWSTR, cchLocaleName: int } ],
  GetSystemDefaultLocaleName: [ VoidT, { lpLocaleName: LPWSTR, cchLocaleName: int } ],
  GetNLSVersionEx: [ int, { function: NLS_FUNCTION, lpLocaleName: LPCWSTR, lpVersionInformation: LPNLSVERSIONINFOEX } ],
  CompareStringEx: [ VoidT, { lpLocaleName: LPCWSTR, dwCmpFlags: DWORD, lpString1: LPCWSTR, cchCount1: int, lpString2: LPCWSTR, cchCount2: int, lpVersionInformation: LPNLSVERSIONINFO, lpReserved: LPVOID, lParam: LPARAM } ],
  FindNLSStringEx: [ VoidT, { lpLocaleName: LPCWSTR, dwFindNLSStringFlags: DWORD, lpStringSource: LPCWSTR, cchSource: int, lpStringValue: LPCWSTR, cchValue: int, pcchFound: LPINT, lpVersionInformation: LPNLSVERSIONINFO, lpReserved: LPVOID, lParam: LPARAM } ],
  LCMapStringEx: [ VoidT, { lpLocaleName: LPCWSTR, dwMapFlags: DWORD, lpSrcStr: LPCWSTR, cchSrc: int, lpDestStr: LPWSTR, cchDest: int, lpVersionInformation: LPNLSVERSIONINFO, lpReserved: LPVOID, lParam: LPARAM } ],
  CompareStringOrdinal: [ VoidT, { lpString1: LPCWSTR, cchCount1: int, lpString2: LPCWSTR, cchCount2: int, bIgnoreCase: BOOL } ],
  IsValidLocaleName: [ int, { lpLocaleName: LPCWSTR } ],
  EnumCalendarInfoExEx: [ int, { pCalInfoEnumProcExEx: CALINFO_ENUMPROCEXEX, lpLocaleName: LPCWSTR, Calendar: CALID, lpReserved: LPCWSTR, CalType: CALTYPE, lParam: LPARAM } ],
  EnumDateFormatsExEx: [ int, { lpDateFmtEnumProcExEx: DATEFMT_ENUMPROCEXEX, lpLocaleName: LPCWSTR, dwFlags: DWORD, lParam: LPARAM } ],
  EnumTimeFormatsEx: [ int, { lpTimeFmtEnumProcEx: TIMEFMT_ENUMPROCEX, lpLocaleName: LPCWSTR, dwFlags: DWORD, lParam: LPARAM } ],
  EnumSystemLocalesEx: [ int, { lpLocaleEnumProcEx: LOCALE_ENUMPROCEX, dwFlags: DWORD, lParam: LPARAM, lpReserved: LPVOID } ],
  ResolveLocaleName: [ VoidT, { lpNameToResolve: LPCWSTR, lpLocaleName: LPWSTR, cchLocaleName: int } ],
  PeekConsoleInputA: [ int, { hConsoleInput: HANDLE, lpBuffer: PINPUT_RECORD, nLength: DWORD, lpNumberOfEventsRead: LPDWORD } ],
  PeekConsoleInputW: [ int, { hConsoleInput: HANDLE, lpBuffer: PINPUT_RECORD, nLength: DWORD, lpNumberOfEventsRead: LPDWORD } ],
  ReadConsoleInputA: [ int, { hConsoleInput: HANDLE, lpBuffer: PINPUT_RECORD, nLength: DWORD, lpNumberOfEventsRead: LPDWORD } ],
  ReadConsoleInputW: [ int, { hConsoleInput: HANDLE, lpBuffer: PINPUT_RECORD, nLength: DWORD, lpNumberOfEventsRead: LPDWORD } ],
  WriteConsoleInputA: [ int, { hConsoleInput: HANDLE, lpBuffer: uint.Δ, nLength: DWORD, lpNumberOfEventsWritten: LPDWORD } ],
  WriteConsoleInputW: [ int, { hConsoleInput: HANDLE, lpBuffer: uint.Δ, nLength: DWORD, lpNumberOfEventsWritten: LPDWORD } ],
  ReadConsoleOutputA: [ int, { hConsoleOutput: HANDLE, lpBuffer: PCHAR_INFO, dwBufferSize: COORD, dwBufferCoord: COORD, lpReadRegion: PSMALL_RECT } ],
  ReadConsoleOutputW: [ int, { hConsoleOutput: HANDLE, lpBuffer: PCHAR_INFO, dwBufferSize: COORD, dwBufferCoord: COORD, lpReadRegion: PSMALL_RECT } ],
  WriteConsoleOutputA: [ int, { hConsoleOutput: HANDLE, lpBuffer: uint.Δ, dwBufferSize: COORD, dwBufferCoord: COORD, lpWriteRegion: PSMALL_RECT } ],
  WriteConsoleOutputW: [ int, { hConsoleOutput: HANDLE, lpBuffer: uint.Δ, dwBufferSize: COORD, dwBufferCoord: COORD, lpWriteRegion: PSMALL_RECT } ],
  ReadConsoleOutputCharacterA: [ int, { hConsoleOutput: HANDLE, lpCharacter: LPSTR, nLength: DWORD, dwReadCoord: COORD, lpNumberOfCharsRead: LPDWORD } ],
  ReadConsoleOutputCharacterW: [ int, { hConsoleOutput: HANDLE, lpCharacter: LPWSTR, nLength: DWORD, dwReadCoord: COORD, lpNumberOfCharsRead: LPDWORD } ],
  ReadConsoleOutputAttribute: [ int, { hConsoleOutput: HANDLE, lpAttribute: LPWORD, nLength: DWORD, dwReadCoord: COORD, lpNumberOfAttrsRead: LPDWORD } ],
  WriteConsoleOutputCharacterA: [ int, { hConsoleOutput: HANDLE, lpCharacter: LPCSTR, nLength: DWORD, dwWriteCoord: COORD, lpNumberOfCharsWritten: LPDWORD } ],
  WriteConsoleOutputCharacterW: [ int, { hConsoleOutput: HANDLE, lpCharacter: LPCWSTR, nLength: DWORD, dwWriteCoord: COORD, lpNumberOfCharsWritten: LPDWORD } ],
  WriteConsoleOutputAttribute: [ int, { hConsoleOutput: HANDLE, lpAttribute: ushort.Δ, nLength: DWORD, dwWriteCoord: COORD, lpNumberOfAttrsWritten: LPDWORD } ],
  FillConsoleOutputCharacterA: [ int, { hConsoleOutput: HANDLE, cCharacter: CHAR, nLength: DWORD, dwWriteCoord: COORD, lpNumberOfCharsWritten: LPDWORD } ],
  FillConsoleOutputCharacterW: [ int, { hConsoleOutput: HANDLE, cCharacter: WCHAR, nLength: DWORD, dwWriteCoord: COORD, lpNumberOfCharsWritten: LPDWORD } ],
  FillConsoleOutputAttribute: [ int, { hConsoleOutput: HANDLE, wAttribute: WORD, nLength: DWORD, dwWriteCoord: COORD, lpNumberOfAttrsWritten: LPDWORD } ],
  GetConsoleMode: [ int, { hConsoleHandle: HANDLE, lpMode: LPDWORD } ],
  GetNumberOfConsoleInputEvents: [ int, { hConsoleInput: HANDLE, lpNumberOfEvents: LPDWORD } ],
  GetConsoleScreenBufferInfo: [ int, { hConsoleOutput: HANDLE, lpConsoleScreenBufferInfo: PCONSOLE_SCREEN_BUFFER_INFO } ],
  GetConsoleScreenBufferInfoEx: [ int, { hConsoleOutput: HANDLE, lpConsoleScreenBufferInfoEx: PCONSOLE_SCREEN_BUFFER_INFOEX } ],
  SetConsoleScreenBufferInfoEx: [ int, { hConsoleOutput: HANDLE, lpConsoleScreenBufferInfoEx: PCONSOLE_SCREEN_BUFFER_INFOEX } ],
  GetLargestConsoleWindowSize: [ uint, { hConsoleOutput: HANDLE } ],
  GetConsoleCursorInfo: [ int, { hConsoleOutput: HANDLE, lpConsoleCursorInfo: PCONSOLE_CURSOR_INFO } ],
  GetCurrentConsoleFont: [ int, { hConsoleOutput: HANDLE, bMaximumWindow: BOOL, lpConsoleCurrentFont: PCONSOLE_FONT_INFO } ],
  GetCurrentConsoleFontEx: [ int, { hConsoleOutput: HANDLE, bMaximumWindow: BOOL, lpConsoleCurrentFontEx: PCONSOLE_FONT_INFOEX } ],
  SetCurrentConsoleFontEx: [ int, { hConsoleOutput: HANDLE, bMaximumWindow: BOOL, lpConsoleCurrentFontEx: PCONSOLE_FONT_INFOEX } ],
  GetConsoleHistoryInfo: [ int, { lpConsoleHistoryInfo: PCONSOLE_HISTORY_INFO } ],
  SetConsoleHistoryInfo: [ int, { lpConsoleHistoryInfo: PCONSOLE_HISTORY_INFO } ],
  GetConsoleFontSize: [ uint, { hConsoleOutput: HANDLE, nFont: DWORD } ],
  GetConsoleSelectionInfo: [ int, { lpConsoleSelectionInfo: PCONSOLE_SELECTION_INFO } ],
  GetNumberOfConsoleMouseButtons: [ int, { lpNumberOfMouseButtons: LPDWORD } ],
  SetConsoleMode: [ int, { hConsoleHandle: HANDLE, dwMode: DWORD } ],
  SetConsoleActiveScreenBuffer: [ int, { hConsoleOutput: HANDLE } ],
  FlushConsoleInputBuffer: [ int, { hConsoleInput: HANDLE } ],
  SetConsoleScreenBufferSize: [ int, { hConsoleOutput: HANDLE, dwSize: COORD } ],
  SetConsoleCursorPosition: [ int, { hConsoleOutput: HANDLE, dwCursorPosition: COORD } ],
  SetConsoleCursorInfo: [ int, { hConsoleOutput: HANDLE, lpConsoleCursorInfo: uint.Δ } ],
  ScrollConsoleScreenBufferA: [ int, { hConsoleOutput: HANDLE, lpScrollRectangle: uint.Δ, lpClipRectangle: uint.Δ, dwDestinationOrigin: COORD, lpFill: uint.Δ } ],
  ScrollConsoleScreenBufferW: [ int, { hConsoleOutput: HANDLE, lpScrollRectangle: uint.Δ, lpClipRectangle: uint.Δ, dwDestinationOrigin: COORD, lpFill: uint.Δ } ],
  SetConsoleWindowInfo: [ int, { hConsoleOutput: HANDLE, bAbsolute: BOOL, lpConsoleWindow: uint.Δ } ],
  SetConsoleTextAttribute: [ int, { hConsoleOutput: HANDLE, wAttributes: WORD } ],
  SetConsoleCtrlHandler: [ int, { HandlerRoutine: PHANDLER_ROUTINE, Add: BOOL } ],
  GenerateConsoleCtrlEvent: [ int, { dwCtrlEvent: DWORD, dwProcessGroupId: DWORD } ],
  AllocConsole: [ int, {  } ],
  FreeConsole: [ int, {  } ],
  AttachConsole: [ int, { dwProcessId: DWORD } ],
  GetConsoleTitleA: [ ulong, { lpConsoleTitle: LPSTR, nSize: DWORD } ],
  GetConsoleTitleW: [ ulong, { lpConsoleTitle: LPWSTR, nSize: DWORD } ],
  GetConsoleOriginalTitleA: [ ulong, { lpConsoleTitle: LPSTR, nSize: DWORD } ],
  GetConsoleOriginalTitleW: [ ulong, { lpConsoleTitle: LPWSTR, nSize: DWORD } ],
  SetConsoleTitleA: [ int, { lpConsoleTitle: LPCSTR } ],
  SetConsoleTitleW: [ int, { lpConsoleTitle: LPCWSTR } ],
  ReadConsoleA: [ int, { hConsoleInput: HANDLE, lpBuffer: LPVOID, nNumberOfCharsToRead: DWORD, lpNumberOfCharsRead: LPDWORD, pInputControl: PCONSOLE_READCONSOLE_CONTROL } ],
  ReadConsoleW: [ int, { hConsoleInput: HANDLE, lpBuffer: LPVOID, nNumberOfCharsToRead: DWORD, lpNumberOfCharsRead: LPDWORD, pInputControl: PCONSOLE_READCONSOLE_CONTROL } ],
  WriteConsoleA: [ int, { hConsoleOutput: HANDLE, lpBuffer: VoidT.Δ, nNumberOfCharsToWrite: DWORD, lpNumberOfCharsWritten: LPDWORD, lpReserved: LPVOID } ],
  WriteConsoleW: [ int, { hConsoleOutput: HANDLE, lpBuffer: VoidT.Δ, nNumberOfCharsToWrite: DWORD, lpNumberOfCharsWritten: LPDWORD, lpReserved: LPVOID } ],
  CreateConsoleScreenBuffer: [ VoidT.Δ, { dwDesiredAccess: DWORD, dwShareMode: DWORD, lpSecurityAttributes: uint.Δ, dwFlags: DWORD, lpScreenBufferData: LPVOID } ],
  GetConsoleCP: [ uint, {  } ],
  SetConsoleCP: [ int, { wCodePageID: UINT } ],
  GetConsoleOutputCP: [ uint, {  } ],
  SetConsoleOutputCP: [ int, { wCodePageID: UINT } ],
  GetConsoleDisplayMode: [ int, { lpModeFlags: LPDWORD } ],
  SetConsoleDisplayMode: [ int, { hConsoleOutput: HANDLE, dwFlags: DWORD, lpNewScreenBufferDimensions: PCOORD } ],
  GetConsoleWindow: [ VOIDPTR, {  } ],
  GetConsoleProcessList: [ ulong, { lpdwProcessList: LPDWORD, dwProcessCount: DWORD } ],
  AddConsoleAliasA: [ int, { Source: LPSTR, Target: LPSTR, ExeName: LPSTR } ],
  AddConsoleAliasW: [ int, { Source: LPWSTR, Target: LPWSTR, ExeName: LPWSTR } ],
  GetConsoleAliasA: [ ulong, { Source: LPSTR, TargetBuffer: LPSTR, TargetBufferLength: DWORD, ExeName: LPSTR } ],
  GetConsoleAliasW: [ ulong, { Source: LPWSTR, TargetBuffer: LPWSTR, TargetBufferLength: DWORD, ExeName: LPWSTR } ],
  GetConsoleAliasesLengthA: [ ulong, { ExeName: LPSTR } ],
  GetConsoleAliasesLengthW: [ ulong, { ExeName: LPWSTR } ],
  GetConsoleAliasExesLengthA: [ ulong, {  } ],
  GetConsoleAliasExesLengthW: [ ulong, {  } ],
  GetConsoleAliasesA: [ ulong, { AliasBuffer: LPSTR, AliasBufferLength: DWORD, ExeName: LPSTR } ],
  GetConsoleAliasesW: [ ulong, { AliasBuffer: LPWSTR, AliasBufferLength: DWORD, ExeName: LPWSTR } ],
  GetConsoleAliasExesA: [ ulong, { ExeNameBuffer: LPSTR, ExeNameBufferLength: DWORD } ],
  GetConsoleAliasExesW: [ ulong, { ExeNameBuffer: LPWSTR, ExeNameBufferLength: DWORD } ],
  VerFindFileA: [ ulong, { uFlags: DWORD, szFileName: LPCSTR, szWinDir: LPCSTR, szAppDir: LPCSTR, szCurDir: LPSTR, lpuCurDirLen: PUINT, szDestDir: LPSTR, lpuDestDirLen: PUINT } ],
  VerFindFileW: [ ulong, { uFlags: DWORD, szFileName: LPCWSTR, szWinDir: LPCWSTR, szAppDir: LPCWSTR, szCurDir: LPWSTR, lpuCurDirLen: PUINT, szDestDir: LPWSTR, lpuDestDirLen: PUINT } ],
  VerInstallFileA: [ ulong, { uFlags: DWORD, szSrcFileName: LPCSTR, szDestFileName: LPCSTR, szSrcDir: LPCSTR, szDestDir: LPCSTR, szCurDir: LPCSTR, szTmpFile: LPSTR, lpuTmpFileLen: PUINT } ],
  VerInstallFileW: [ ulong, { uFlags: DWORD, szSrcFileName: LPCWSTR, szDestFileName: LPCWSTR, szSrcDir: LPCWSTR, szDestDir: LPCWSTR, szCurDir: LPCWSTR, szTmpFile: LPWSTR, lpuTmpFileLen: PUINT } ],
  GetFileVersionInfoSizeA: [ ulong, { lptstrFilename: LPCSTR, lpdwHandle: LPDWORD } ],
  GetFileVersionInfoSizeW: [ ulong, { lptstrFilename: LPCWSTR, lpdwHandle: LPDWORD } ],
  GetFileVersionInfoA: [ int, { lptstrFilename: LPCSTR, dwHandle: DWORD, dwLen: DWORD, lpData: LPVOID } ],
  GetFileVersionInfoW: [ int, { lptstrFilename: LPCWSTR, dwHandle: DWORD, dwLen: DWORD, lpData: LPVOID } ],
  GetFileVersionInfoSizeExA: [ ulong, { dwFlags: DWORD, lpwstrFilename: LPCSTR, lpdwHandle: LPDWORD } ],
  GetFileVersionInfoSizeExW: [ ulong, { dwFlags: DWORD, lpwstrFilename: LPCWSTR, lpdwHandle: LPDWORD } ],
  GetFileVersionInfoExA: [ int, { dwFlags: DWORD, lpwstrFilename: LPCSTR, dwHandle: DWORD, dwLen: DWORD, lpData: LPVOID } ],
  GetFileVersionInfoExW: [ int, { dwFlags: DWORD, lpwstrFilename: LPCWSTR, dwHandle: DWORD, dwLen: DWORD, lpData: LPVOID } ],
  VerLanguageNameA: [ ulong, { wLang: DWORD, szLang: LPSTR, cchLang: DWORD } ],
  VerLanguageNameW: [ ulong, { wLang: DWORD, szLang: LPWSTR, cchLang: DWORD } ],
  VerQueryValueA: [ int, { pBlock: LPCVOID, lpSubBlock: LPCSTR, lplpBuffer: VoidT.Δ.Δ, puLen: PUINT } ],
  VerQueryValueW: [ int, { pBlock: LPCVOID, lpSubBlock: LPCWSTR, lplpBuffer: VoidT.Δ.Δ, puLen: PUINT } ],
  RegCloseKey: [ long, { hKey: HKEY } ],
  RegOverridePredefKey: [ long, { hKey: HKEY, hNewHKey: HKEY } ],
  RegOpenUserClassesRoot: [ long, { hToken: HANDLE, dwOptions: DWORD, samDesired: REGSAM, phkResult: PHKEY } ],
  RegOpenCurrentUser: [ long, { samDesired: REGSAM, phkResult: PHKEY } ],
  RegDisablePredefinedCache: [ long, {  } ],
  RegDisablePredefinedCacheEx: [ long, {  } ],
  RegConnectRegistryA: [ long, { lpMachineName: LPCSTR, hKey: HKEY, phkResult: PHKEY } ],
  RegConnectRegistryW: [ long, { lpMachineName: LPCWSTR, hKey: HKEY, phkResult: PHKEY } ],
  RegConnectRegistryExA: [ long, { lpMachineName: LPCSTR, hKey: HKEY, Flags: ULONG, phkResult: PHKEY } ],
  RegConnectRegistryExW: [ long, { lpMachineName: LPCWSTR, hKey: HKEY, Flags: ULONG, phkResult: PHKEY } ],
  RegCreateKeyA: [ long, { hKey: HKEY, lpSubKey: LPCSTR, phkResult: PHKEY } ],
  RegCreateKeyW: [ long, { hKey: HKEY, lpSubKey: LPCWSTR, phkResult: PHKEY } ],
  RegCreateKeyExA: [ long, { hKey: HKEY, lpSubKey: LPCSTR, Reserved: DWORD, lpClass: LPSTR, dwOptions: DWORD, samDesired: REGSAM, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, phkResult: PHKEY, lpdwDisposition: LPDWORD } ],
  RegCreateKeyExW: [ long, { hKey: HKEY, lpSubKey: LPCWSTR, Reserved: DWORD, lpClass: LPWSTR, dwOptions: DWORD, samDesired: REGSAM, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, phkResult: PHKEY, lpdwDisposition: LPDWORD } ],
  RegCreateKeyTransactedA: [ long, { hKey: HKEY, lpSubKey: LPCSTR, Reserved: DWORD, lpClass: LPSTR, dwOptions: DWORD, samDesired: REGSAM, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, phkResult: PHKEY, lpdwDisposition: LPDWORD, hTransaction: HANDLE, pExtendedParemeter: PVOID } ],
  RegCreateKeyTransactedW: [ long, { hKey: HKEY, lpSubKey: LPCWSTR, Reserved: DWORD, lpClass: LPWSTR, dwOptions: DWORD, samDesired: REGSAM, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, phkResult: PHKEY, lpdwDisposition: LPDWORD, hTransaction: HANDLE, pExtendedParemeter: PVOID } ],
  RegDeleteKeyA: [ long, { hKey: HKEY, lpSubKey: LPCSTR } ],
  RegDeleteKeyW: [ long, { hKey: HKEY, lpSubKey: LPCWSTR } ],
  RegDeleteKeyExA: [ long, { hKey: HKEY, lpSubKey: LPCSTR, samDesired: REGSAM, Reserved: DWORD } ],
  RegDeleteKeyExW: [ long, { hKey: HKEY, lpSubKey: LPCWSTR, samDesired: REGSAM, Reserved: DWORD } ],
  RegDeleteKeyTransactedA: [ long, { hKey: HKEY, lpSubKey: LPCSTR, samDesired: REGSAM, Reserved: DWORD, hTransaction: HANDLE, pExtendedParameter: PVOID } ],
  RegDeleteKeyTransactedW: [ long, { hKey: HKEY, lpSubKey: LPCWSTR, samDesired: REGSAM, Reserved: DWORD, hTransaction: HANDLE, pExtendedParameter: PVOID } ],
  RegDisableReflectionKey: [ long, { hBase: HKEY } ],
  RegEnableReflectionKey: [ long, { hBase: HKEY } ],
  RegQueryReflectionKey: [ long, { hBase: HKEY, bIsReflectionDisabled: int.Δ } ],
  RegDeleteValueA: [ long, { hKey: HKEY, lpValueName: LPCSTR } ],
  RegDeleteValueW: [ long, { hKey: HKEY, lpValueName: LPCWSTR } ],
  RegEnumKeyA: [ long, { hKey: HKEY, dwIndex: DWORD, lpName: LPSTR, cchName: DWORD } ],
  RegEnumKeyW: [ long, { hKey: HKEY, dwIndex: DWORD, lpName: LPWSTR, cchName: DWORD } ],
  RegEnumKeyExA: [ long, { hKey: HKEY, dwIndex: DWORD, lpName: LPSTR, lpcchName: LPDWORD, lpReserved: LPDWORD, lpClass: LPSTR, lpcchClass: LPDWORD, lpftLastWriteTime: PFILETIME } ],
  RegEnumKeyExW: [ long, { hKey: HKEY, dwIndex: DWORD, lpName: LPWSTR, lpcchName: LPDWORD, lpReserved: LPDWORD, lpClass: LPWSTR, lpcchClass: LPDWORD, lpftLastWriteTime: PFILETIME } ],
  RegEnumValueA: [ long, { hKey: HKEY, dwIndex: DWORD, lpValueName: LPSTR, lpcchValueName: LPDWORD, lpReserved: LPDWORD, lpType: LPDWORD, lpData: LPBYTE, lpcbData: LPDWORD } ],
  RegEnumValueW: [ long, { hKey: HKEY, dwIndex: DWORD, lpValueName: LPWSTR, lpcchValueName: LPDWORD, lpReserved: LPDWORD, lpType: LPDWORD, lpData: LPBYTE, lpcbData: LPDWORD } ],
  RegFlushKey: [ long, { hKey: HKEY } ],
  RegGetKeySecurity: [ long, { hKey: HKEY, SecurityInformation: SECURITY_INFORMATION, pSecurityDescriptor: PSECURITY_DESCRIPTOR, lpcbSecurityDescriptor: LPDWORD } ],
  RegLoadKeyA: [ long, { hKey: HKEY, lpSubKey: LPCSTR, lpFile: LPCSTR } ],
  RegLoadKeyW: [ long, { hKey: HKEY, lpSubKey: LPCWSTR, lpFile: LPCWSTR } ],
  RegNotifyChangeKeyValue: [ long, { hKey: HKEY, bWatchSubtree: BOOL, dwNotifyFilter: DWORD, hEvent: HANDLE, fAsynchronous: BOOL } ],
  RegOpenKeyA: [ long, { hKey: HKEY, lpSubKey: LPCSTR, phkResult: PHKEY } ],
  RegOpenKeyW: [ long, { hKey: HKEY, lpSubKey: LPCWSTR, phkResult: PHKEY } ],
  RegOpenKeyExA: [ long, { hKey: HKEY, lpSubKey: LPCSTR, ulOptions: DWORD, samDesired: REGSAM, phkResult: PHKEY } ],
  RegOpenKeyExW: [ long, { hKey: HKEY, lpSubKey: LPCWSTR, ulOptions: DWORD, samDesired: REGSAM, phkResult: PHKEY } ],
  RegOpenKeyTransactedA: [ long, { hKey: HKEY, lpSubKey: LPCSTR, ulOptions: DWORD, samDesired: REGSAM, phkResult: PHKEY, hTransaction: HANDLE, pExtendedParemeter: PVOID } ],
  RegOpenKeyTransactedW: [ long, { hKey: HKEY, lpSubKey: LPCWSTR, ulOptions: DWORD, samDesired: REGSAM, phkResult: PHKEY, hTransaction: HANDLE, pExtendedParemeter: PVOID } ],
  RegQueryInfoKeyA: [ long, { hKey: HKEY, lpClass: LPSTR, lpcchClass: LPDWORD, lpReserved: LPDWORD, lpcSubKeys: LPDWORD, lpcbMaxSubKeyLen: LPDWORD, lpcbMaxClassLen: LPDWORD, lpcValues: LPDWORD, lpcbMaxValueNameLen: LPDWORD, lpcbMaxValueLen: LPDWORD, lpcbSecurityDescriptor: LPDWORD, lpftLastWriteTime: PFILETIME } ],
  RegQueryInfoKeyW: [ long, { hKey: HKEY, lpClass: LPWSTR, lpcchClass: LPDWORD, lpReserved: LPDWORD, lpcSubKeys: LPDWORD, lpcbMaxSubKeyLen: LPDWORD, lpcbMaxClassLen: LPDWORD, lpcValues: LPDWORD, lpcbMaxValueNameLen: LPDWORD, lpcbMaxValueLen: LPDWORD, lpcbSecurityDescriptor: LPDWORD, lpftLastWriteTime: PFILETIME } ],
  RegQueryValueA: [ long, { hKey: HKEY, lpSubKey: LPCSTR, lpData: LPSTR, lpcbData: PLONG } ],
  RegQueryValueW: [ long, { hKey: HKEY, lpSubKey: LPCWSTR, lpData: LPWSTR, lpcbData: PLONG } ],
  RegQueryMultipleValuesA: [ long, { hKey: HKEY, val_list: PVALENTA, num_vals: DWORD, lpValueBuf: LPSTR, ldwTotsize: LPDWORD } ],
  RegQueryMultipleValuesW: [ long, { hKey: HKEY, val_list: PVALENTW, num_vals: DWORD, lpValueBuf: LPWSTR, ldwTotsize: LPDWORD } ],
  RegQueryValueExA: [ long, { hKey: HKEY, lpValueName: LPCSTR, lpReserved: LPDWORD, lpType: LPDWORD, lpData: LPBYTE, lpcbData: LPDWORD } ],
  RegQueryValueExW: [ long, { hKey: HKEY, lpValueName: LPCWSTR, lpReserved: LPDWORD, lpType: LPDWORD, lpData: LPBYTE, lpcbData: LPDWORD } ],
  RegReplaceKeyA: [ long, { hKey: HKEY, lpSubKey: LPCSTR, lpNewFile: LPCSTR, lpOldFile: LPCSTR } ],
  RegReplaceKeyW: [ long, { hKey: HKEY, lpSubKey: LPCWSTR, lpNewFile: LPCWSTR, lpOldFile: LPCWSTR } ],
  RegRestoreKeyA: [ long, { hKey: HKEY, lpFile: LPCSTR, dwFlags: DWORD } ],
  RegRestoreKeyW: [ long, { hKey: HKEY, lpFile: LPCWSTR, dwFlags: DWORD } ],
  RegRenameKey: [ long, { hKey: HKEY, lpSubKeyName: LPCWSTR, lpNewKeyName: LPCWSTR } ],
  RegSaveKeyA: [ long, { hKey: HKEY, lpFile: LPCSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES } ],
  RegSaveKeyW: [ long, { hKey: HKEY, lpFile: LPCWSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES } ],
  RegSetKeySecurity: [ long, { hKey: HKEY, SecurityInformation: SECURITY_INFORMATION, pSecurityDescriptor: PSECURITY_DESCRIPTOR } ],
  RegSetValueA: [ long, { hKey: HKEY, lpSubKey: LPCSTR, dwType: DWORD, lpData: LPCSTR, cbData: DWORD } ],
  RegSetValueW: [ long, { hKey: HKEY, lpSubKey: LPCWSTR, dwType: DWORD, lpData: LPCWSTR, cbData: DWORD } ],
  RegSetValueExA: [ long, { hKey: HKEY, lpValueName: LPCSTR, Reserved: DWORD, dwType: DWORD, lpData: uchar.Δ, cbData: DWORD } ],
  RegSetValueExW: [ long, { hKey: HKEY, lpValueName: LPCWSTR, Reserved: DWORD, dwType: DWORD, lpData: uchar.Δ, cbData: DWORD } ],
  RegUnLoadKeyA: [ long, { hKey: HKEY, lpSubKey: LPCSTR } ],
  RegUnLoadKeyW: [ long, { hKey: HKEY, lpSubKey: LPCWSTR } ],
  RegDeleteKeyValueA: [ long, { hKey: HKEY, lpSubKey: LPCSTR, lpValueName: LPCSTR } ],
  RegDeleteKeyValueW: [ long, { hKey: HKEY, lpSubKey: LPCWSTR, lpValueName: LPCWSTR } ],
  RegSetKeyValueA: [ long, { hKey: HKEY, lpSubKey: LPCSTR, lpValueName: LPCSTR, dwType: DWORD, lpData: LPCVOID, cbData: DWORD } ],
  RegSetKeyValueW: [ long, { hKey: HKEY, lpSubKey: LPCWSTR, lpValueName: LPCWSTR, dwType: DWORD, lpData: LPCVOID, cbData: DWORD } ],
  RegDeleteTreeA: [ long, { hKey: HKEY, lpSubKey: LPCSTR } ],
  RegDeleteTreeW: [ long, { hKey: HKEY, lpSubKey: LPCWSTR } ],
  RegCopyTreeA: [ long, { hKeySrc: HKEY, lpSubKey: LPCSTR, hKeyDest: HKEY } ],
  RegCopyTreeW: [ long, { hKeySrc: HKEY, lpSubKey: LPCWSTR, hKeyDest: HKEY } ],
  RegGetValueA: [ long, { hkey: HKEY, lpSubKey: LPCSTR, lpValue: LPCSTR, dwFlags: DWORD, pdwType: LPDWORD, pvData: PVOID, pcbData: LPDWORD } ],
  RegGetValueW: [ long, { hkey: HKEY, lpSubKey: LPCWSTR, lpValue: LPCWSTR, dwFlags: DWORD, pdwType: LPDWORD, pvData: PVOID, pcbData: LPDWORD } ],
  RegLoadMUIStringA: [ long, { hKey: HKEY, pszValue: LPCSTR, pszOutBuf: LPSTR, cbOutBuf: DWORD, pcbData: LPDWORD, Flags: DWORD, pszDirectory: LPCSTR } ],
  RegLoadMUIStringW: [ long, { hKey: HKEY, pszValue: LPCWSTR, pszOutBuf: LPWSTR, cbOutBuf: DWORD, pcbData: LPDWORD, Flags: DWORD, pszDirectory: LPCWSTR } ],
  RegLoadAppKeyA: [ long, { lpFile: LPCSTR, phkResult: PHKEY, samDesired: REGSAM, dwOptions: DWORD, Reserved: DWORD } ],
  RegLoadAppKeyW: [ long, { lpFile: LPCWSTR, phkResult: PHKEY, samDesired: REGSAM, dwOptions: DWORD, Reserved: DWORD } ],
  InitiateSystemShutdownA: [ int, { lpMachineName: LPSTR, lpMessage: LPSTR, dwTimeout: DWORD, bForceAppsClosed: BOOL, bRebootAfterShutdown: BOOL } ],
  InitiateSystemShutdownW: [ int, { lpMachineName: LPWSTR, lpMessage: LPWSTR, dwTimeout: DWORD, bForceAppsClosed: BOOL, bRebootAfterShutdown: BOOL } ],
  AbortSystemShutdownA: [ int, { lpMachineName: LPSTR } ],
  AbortSystemShutdownW: [ int, { lpMachineName: LPWSTR } ],
  InitiateSystemShutdownExA: [ int, { lpMachineName: LPSTR, lpMessage: LPSTR, dwTimeout: DWORD, bForceAppsClosed: BOOL, bRebootAfterShutdown: BOOL, dwReason: DWORD } ],
  InitiateSystemShutdownExW: [ int, { lpMachineName: LPWSTR, lpMessage: LPWSTR, dwTimeout: DWORD, bForceAppsClosed: BOOL, bRebootAfterShutdown: BOOL, dwReason: DWORD } ],
  InitiateShutdownA: [ ulong, { lpMachineName: LPSTR, lpMessage: LPSTR, dwGracePeriod: DWORD, dwShutdownFlags: DWORD, dwReason: DWORD } ],
  InitiateShutdownW: [ ulong, { lpMachineName: LPWSTR, lpMessage: LPWSTR, dwGracePeriod: DWORD, dwShutdownFlags: DWORD, dwReason: DWORD } ],
  RegSaveKeyExA: [ long, { hKey: HKEY, lpFile: LPCSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, Flags: DWORD } ],
  RegSaveKeyExW: [ long, { hKey: HKEY, lpFile: LPCWSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, Flags: DWORD } ],
  WNetAddConnectionA: [ ulong, { lpRemoteName: LPCSTR, lpPassword: LPCSTR, lpLocalName: LPCSTR } ],
  WNetAddConnectionW: [ ulong, { lpRemoteName: LPCWSTR, lpPassword: LPCWSTR, lpLocalName: LPCWSTR } ],
  WNetAddConnection2A: [ ulong, { lpNetResource: LPNETRESOURCEA, lpPassword: LPCSTR, lpUserName: LPCSTR, dwFlags: DWORD } ],
  WNetAddConnection2W: [ ulong, { lpNetResource: LPNETRESOURCEW, lpPassword: LPCWSTR, lpUserName: LPCWSTR, dwFlags: DWORD } ],
  WNetAddConnection3A: [ ulong, { hwndOwner: HWND, lpNetResource: LPNETRESOURCEA, lpPassword: LPCSTR, lpUserName: LPCSTR, dwFlags: DWORD } ],
  WNetAddConnection3W: [ ulong, { hwndOwner: HWND, lpNetResource: LPNETRESOURCEW, lpPassword: LPCWSTR, lpUserName: LPCWSTR, dwFlags: DWORD } ],
  WNetCancelConnectionA: [ ulong, { lpName: LPCSTR, fForce: BOOL } ],
  WNetCancelConnectionW: [ ulong, { lpName: LPCWSTR, fForce: BOOL } ],
  WNetCancelConnection2A: [ ulong, { lpName: LPCSTR, dwFlags: DWORD, fForce: BOOL } ],
  WNetCancelConnection2W: [ ulong, { lpName: LPCWSTR, dwFlags: DWORD, fForce: BOOL } ],
  WNetGetConnectionA: [ ulong, { lpLocalName: LPCSTR, lpRemoteName: LPSTR, lpnLength: LPDWORD } ],
  WNetGetConnectionW: [ ulong, { lpLocalName: LPCWSTR, lpRemoteName: LPWSTR, lpnLength: LPDWORD } ],
  WNetRestoreSingleConnectionW: [ ulong, { hwndParent: HWND, lpDevice: LPCWSTR, fUseUI: BOOL } ],
  WNetUseConnectionA: [ ulong, { hwndOwner: HWND, lpNetResource: LPNETRESOURCEA, lpPassword: LPCSTR, lpUserId: LPCSTR, dwFlags: DWORD, lpAccessName: LPSTR, lpBufferSize: LPDWORD, lpResult: LPDWORD } ],
  WNetUseConnectionW: [ ulong, { hwndOwner: HWND, lpNetResource: LPNETRESOURCEW, lpPassword: LPCWSTR, lpUserId: LPCWSTR, dwFlags: DWORD, lpAccessName: LPWSTR, lpBufferSize: LPDWORD, lpResult: LPDWORD } ],
  WNetConnectionDialog: [ ulong, { hwnd: HWND, dwType: DWORD } ],
  WNetDisconnectDialog: [ ulong, { hwnd: HWND, dwType: DWORD } ],
  WNetConnectionDialog1A: [ ulong, { lpConnDlgStruct: LPCONNECTDLGSTRUCTA } ],
  WNetConnectionDialog1W: [ ulong, { lpConnDlgStruct: LPCONNECTDLGSTRUCTW } ],
  WNetDisconnectDialog1A: [ ulong, { lpConnDlgStruct: LPDISCDLGSTRUCTA } ],
  WNetDisconnectDialog1W: [ ulong, { lpConnDlgStruct: LPDISCDLGSTRUCTW } ],
  WNetOpenEnumA: [ ulong, { dwScope: DWORD, dwType: DWORD, dwUsage: DWORD, lpNetResource: LPNETRESOURCEA, lphEnum: LPHANDLE } ],
  WNetOpenEnumW: [ ulong, { dwScope: DWORD, dwType: DWORD, dwUsage: DWORD, lpNetResource: LPNETRESOURCEW, lphEnum: LPHANDLE } ],
  WNetEnumResourceA: [ ulong, { hEnum: HANDLE, lpcCount: LPDWORD, lpBuffer: LPVOID, lpBufferSize: LPDWORD } ],
  WNetEnumResourceW: [ ulong, { hEnum: HANDLE, lpcCount: LPDWORD, lpBuffer: LPVOID, lpBufferSize: LPDWORD } ],
  WNetCloseEnum: [ ulong, { hEnum: HANDLE } ],
  WNetGetResourceParentA: [ ulong, { lpNetResource: LPNETRESOURCEA, lpBuffer: LPVOID, lpcbBuffer: LPDWORD } ],
  WNetGetResourceParentW: [ ulong, { lpNetResource: LPNETRESOURCEW, lpBuffer: LPVOID, lpcbBuffer: LPDWORD } ],
  WNetGetResourceInformationA: [ ulong, { lpNetResource: LPNETRESOURCEA, lpBuffer: LPVOID, lpcbBuffer: LPDWORD, lplpSystem: int8.Δ.Δ } ],
  WNetGetResourceInformationW: [ ulong, { lpNetResource: LPNETRESOURCEW, lpBuffer: LPVOID, lpcbBuffer: LPDWORD, lplpSystem: ushort.Δ.Δ } ],
  WNetGetUniversalNameA: [ ulong, { lpLocalPath: LPCSTR, dwInfoLevel: DWORD, lpBuffer: LPVOID, lpBufferSize: LPDWORD } ],
  WNetGetUniversalNameW: [ ulong, { lpLocalPath: LPCWSTR, dwInfoLevel: DWORD, lpBuffer: LPVOID, lpBufferSize: LPDWORD } ],
  WNetGetUserA: [ ulong, { lpName: LPCSTR, lpUserName: LPSTR, lpnLength: LPDWORD } ],
  WNetGetUserW: [ ulong, { lpName: LPCWSTR, lpUserName: LPWSTR, lpnLength: LPDWORD } ],
  WNetGetProviderNameA: [ ulong, { dwNetType: DWORD, lpProviderName: LPSTR, lpBufferSize: LPDWORD } ],
  WNetGetProviderNameW: [ ulong, { dwNetType: DWORD, lpProviderName: LPWSTR, lpBufferSize: LPDWORD } ],
  WNetGetNetworkInformationA: [ ulong, { lpProvider: LPCSTR, lpNetInfoStruct: LPNETINFOSTRUCT } ],
  WNetGetNetworkInformationW: [ ulong, { lpProvider: LPCWSTR, lpNetInfoStruct: LPNETINFOSTRUCT } ],
  WNetGetLastErrorA: [ ulong, { lpError: LPDWORD, lpErrorBuf: LPSTR, nErrorBufSize: DWORD, lpNameBuf: LPSTR, nNameBufSize: DWORD } ],
  WNetGetLastErrorW: [ ulong, { lpError: LPDWORD, lpErrorBuf: LPWSTR, nErrorBufSize: DWORD, lpNameBuf: LPWSTR, nNameBufSize: DWORD } ],
  MultinetGetConnectionPerformanceA: [ ulong, { lpNetResource: LPNETRESOURCEA, lpNetConnectInfoStruct: LPNETCONNECTINFOSTRUCT } ],
  MultinetGetConnectionPerformanceW: [ ulong, { lpNetResource: LPNETRESOURCEW, lpNetConnectInfoStruct: LPNETCONNECTINFOSTRUCT } ],
  DdeSetQualityOfService: [ int, { hwndClient: HWND, pqosNew: uint.Δ, pqosPrev: PSECURITY_QUALITY_OF_SERVICE } ],
  ImpersonateDdeClientWindow: [ int, { hWndClient: HWND, hWndServer: HWND } ],
  PackDDElParam: [ long, { msg: UINT, uiLo: UINT_PTR, uiHi: UINT_PTR } ],
  UnpackDDElParam: [ int, { msg: UINT, lParam: LPARAM, puiLo: PUINT_PTR, puiHi: PUINT_PTR } ],
  FreeDDElParam: [ int, { msg: UINT, lParam: LPARAM } ],
  ReuseDDElParam: [ long, { lParam: LPARAM, msgIn: UINT, msgOut: UINT, uiLo: UINT_PTR, uiHi: UINT_PTR } ],
  DdeInitializeA: [ uint, { pidInst: LPDWORD, pfnCallback: PFNCALLBACK, afCmd: DWORD, ulRes: DWORD } ],
  DdeInitializeW: [ uint, { pidInst: LPDWORD, pfnCallback: PFNCALLBACK, afCmd: DWORD, ulRes: DWORD } ],
  DdeUninitialize: [ int, { idInst: DWORD } ],
  DdeConnectList: [ VOIDPTR, { idInst: DWORD, hszService: HSZ, hszTopic: HSZ, hConvList: HCONVLIST, pCC: PCONVCONTEXT } ],
  DdeQueryNextServer: [ VOIDPTR, { hConvList: HCONVLIST, hConvPrev: HCONV } ],
  DdeDisconnectList: [ int, { hConvList: HCONVLIST } ],
  DdeConnect: [ VOIDPTR, { idInst: DWORD, hszService: HSZ, hszTopic: HSZ, pCC: PCONVCONTEXT } ],
  DdeDisconnect: [ int, { hConv: HCONV } ],
  DdeReconnect: [ VOIDPTR, { hConv: HCONV } ],
  DdeQueryConvInfo: [ uint, { hConv: HCONV, idTransaction: DWORD, pConvInfo: PCONVINFO } ],
  DdeSetUserHandle: [ int, { hConv: HCONV, id: DWORD, hUser: DWORD_PTR } ],
  DdeAbandonTransaction: [ int, { idInst: DWORD, hConv: HCONV, idTransaction: DWORD } ],
  DdePostAdvise: [ int, { idInst: DWORD, hszTopic: HSZ, hszItem: HSZ } ],
  DdeEnableCallback: [ int, { idInst: DWORD, hConv: HCONV, wCmd: UINT } ],
  DdeImpersonateClient: [ int, { hConv: HCONV } ],
  DdeNameService: [ VOIDPTR, { idInst: DWORD, hsz1: HSZ, hsz2: HSZ, afCmd: UINT } ],
  DdeClientTransaction: [ VOIDPTR, { pData: LPBYTE, cbData: DWORD, hConv: HCONV, hszItem: HSZ, wFmt: UINT, wType: UINT, dwTimeout: DWORD, pdwResult: LPDWORD } ],
  DdeCreateDataHandle: [ VOIDPTR, { idInst: DWORD, pSrc: LPBYTE, cb: DWORD, cbOff: DWORD, hszItem: HSZ, wFmt: UINT, afCmd: UINT } ],
  DdeAddData: [ VOIDPTR, { hData: HDDEDATA, pSrc: LPBYTE, cb: DWORD, cbOff: DWORD } ],
  DdeGetData: [ ulong, { hData: HDDEDATA, pDst: LPBYTE, cbMax: DWORD, cbOff: DWORD } ],
  DdeAccessData: [ uchar.Δ, { hData: HDDEDATA, pcbDataSize: LPDWORD } ],
  DdeUnaccessData: [ int, { hData: HDDEDATA } ],
  DdeFreeDataHandle: [ int, { hData: HDDEDATA } ],
  DdeGetLastError: [ uint, { idInst: DWORD } ],
  DdeCreateStringHandleA: [ VOIDPTR, { idInst: DWORD, psz: LPCSTR, iCodePage: int } ],
  DdeCreateStringHandleW: [ VOIDPTR, { idInst: DWORD, psz: LPCWSTR, iCodePage: int } ],
  DdeQueryStringA: [ ulong, { idInst: DWORD, hsz: HSZ, psz: LPSTR, cchMax: DWORD, iCodePage: int } ],
  DdeQueryStringW: [ ulong, { idInst: DWORD, hsz: HSZ, psz: LPWSTR, cchMax: DWORD, iCodePage: int } ],
  DdeFreeStringHandle: [ int, { idInst: DWORD, hsz: HSZ } ],
  DdeKeepStringHandle: [ int, { idInst: DWORD, hsz: HSZ } ],
  DdeCmpStringHandles: [ VoidT, { hsz1: HSZ, hsz2: HSZ } ],
  LZStart: [ int, {  } ],
  LZDone: [ VoidT, {  } ],
  CopyLZFile: [ long, { hfSource: INT, hfDest: INT } ],
  LZCopy: [ long, { hfSource: INT, hfDest: INT } ],
  LZInit: [ int, { hfSource: INT } ],
  GetExpandedNameA: [ int, { lpszSource: LPSTR, lpszBuffer: LPSTR } ],
  GetExpandedNameW: [ int, { lpszSource: LPWSTR, lpszBuffer: LPWSTR } ],
  LZOpenFileA: [ int, { lpFileName: LPSTR, lpReOpenBuf: LPOFSTRUCT, wStyle: WORD } ],
  LZOpenFileW: [ int, { lpFileName: LPWSTR, lpReOpenBuf: LPOFSTRUCT, wStyle: WORD } ],
  LZSeek: [ long, { hFile: INT, lOffset: LONG, iOrigin: INT } ],
  LZRead: [ int, { hFile: INT, lpBuffer: int8.Δ, cbRead: INT } ],
  LZClose: [ VoidT, { hFile: INT } ],
  CloseDriver: [ long, { hDriver: HDRVR, lParam1: LPARAM, lParam2: LPARAM } ],
  OpenDriver: [ VOIDPTR, { szDriverName: LPCWSTR, szSectionName: LPCWSTR, lParam2: LPARAM } ],
  SendDriverMessage: [ long, { hDriver: HDRVR, message: UINT, lParam1: LPARAM, lParam2: LPARAM } ],
  DrvGetModuleHandle: [ VOIDPTR, { hDriver: HDRVR } ],
  GetDriverModuleHandle: [ VOIDPTR, { hDriver: HDRVR } ],
  DefDriverProc: [ long, { dwDriverIdentifier: DWORD_PTR, hdrvr: HDRVR, uMsg: UINT, lParam1: LPARAM, lParam2: LPARAM } ],
  sndPlaySoundA: [ int, { pszSound: LPCSTR, fuSound: UINT } ],
  sndPlaySoundW: [ int, { pszSound: LPCWSTR, fuSound: UINT } ],
  PlaySoundA: [ int, { pszSound: LPCSTR, hmod: HMODULE, fdwSound: DWORD } ],
  PlaySoundW: [ int, { pszSound: LPCWSTR, hmod: HMODULE, fdwSound: DWORD } ],
  waveOutGetNumDevs: [ uint, {  } ],
  waveOutGetDevCapsA: [ uint, { uDeviceID: UINT_PTR, pwoc: LPWAVEOUTCAPSA, cbwoc: UINT } ],
  waveOutGetDevCapsW: [ uint, { uDeviceID: UINT_PTR, pwoc: LPWAVEOUTCAPSW, cbwoc: UINT } ],
  waveOutGetVolume: [ uint, { hwo: HWAVEOUT, pdwVolume: LPDWORD } ],
  waveOutSetVolume: [ uint, { hwo: HWAVEOUT, dwVolume: DWORD } ],
  waveOutGetErrorTextA: [ uint, { mmrError: MMRESULT, pszText: LPSTR, cchText: UINT } ],
  waveOutGetErrorTextW: [ uint, { mmrError: MMRESULT, pszText: LPWSTR, cchText: UINT } ],
  waveOutOpen: [ uint, { phwo: LPHWAVEOUT, uDeviceID: UINT, pwfx: LPCWAVEFORMATEX, dwCallback: DWORD_PTR, dwInstance: DWORD_PTR, fdwOpen: DWORD } ],
  waveOutClose: [ uint, { hwo: HWAVEOUT } ],
  waveOutPrepareHeader: [ uint, { hwo: HWAVEOUT, pwh: LPWAVEHDR, cbwh: UINT } ],
  waveOutUnprepareHeader: [ uint, { hwo: HWAVEOUT, pwh: LPWAVEHDR, cbwh: UINT } ],
  waveOutWrite: [ uint, { hwo: HWAVEOUT, pwh: LPWAVEHDR, cbwh: UINT } ],
  waveOutPause: [ uint, { hwo: HWAVEOUT } ],
  waveOutRestart: [ uint, { hwo: HWAVEOUT } ],
  waveOutReset: [ uint, { hwo: HWAVEOUT } ],
  waveOutBreakLoop: [ uint, { hwo: HWAVEOUT } ],
  waveOutGetPosition: [ uint, { hwo: HWAVEOUT, pmmt: LPMMTIME, cbmmt: UINT } ],
  waveOutGetPitch: [ uint, { hwo: HWAVEOUT, pdwPitch: LPDWORD } ],
  waveOutSetPitch: [ uint, { hwo: HWAVEOUT, dwPitch: DWORD } ],
  waveOutGetPlaybackRate: [ uint, { hwo: HWAVEOUT, pdwRate: LPDWORD } ],
  waveOutSetPlaybackRate: [ uint, { hwo: HWAVEOUT, dwRate: DWORD } ],
  waveOutGetID: [ uint, { hwo: HWAVEOUT, puDeviceID: LPUINT } ],
  waveOutMessage: [ uint, { hwo: HWAVEOUT, uMsg: UINT, dw1: DWORD_PTR, dw2: DWORD_PTR } ],
  waveInGetNumDevs: [ uint, {  } ],
  waveInGetDevCapsA: [ uint, { uDeviceID: UINT_PTR, pwic: LPWAVEINCAPSA, cbwic: UINT } ],
  waveInGetDevCapsW: [ uint, { uDeviceID: UINT_PTR, pwic: LPWAVEINCAPSW, cbwic: UINT } ],
  waveInGetErrorTextA: [ uint, { mmrError: MMRESULT, pszText: LPSTR, cchText: UINT } ],
  waveInGetErrorTextW: [ uint, { mmrError: MMRESULT, pszText: LPWSTR, cchText: UINT } ],
  waveInOpen: [ uint, { phwi: LPHWAVEIN, uDeviceID: UINT, pwfx: LPCWAVEFORMATEX, dwCallback: DWORD_PTR, dwInstance: DWORD_PTR, fdwOpen: DWORD } ],
  waveInClose: [ uint, { hwi: HWAVEIN } ],
  waveInPrepareHeader: [ uint, { hwi: HWAVEIN, pwh: LPWAVEHDR, cbwh: UINT } ],
  waveInUnprepareHeader: [ uint, { hwi: HWAVEIN, pwh: LPWAVEHDR, cbwh: UINT } ],
  waveInAddBuffer: [ uint, { hwi: HWAVEIN, pwh: LPWAVEHDR, cbwh: UINT } ],
  waveInStart: [ uint, { hwi: HWAVEIN } ],
  waveInStop: [ uint, { hwi: HWAVEIN } ],
  waveInReset: [ uint, { hwi: HWAVEIN } ],
  waveInGetPosition: [ uint, { hwi: HWAVEIN, pmmt: LPMMTIME, cbmmt: UINT } ],
  waveInGetID: [ uint, { hwi: HWAVEIN, puDeviceID: LPUINT } ],
  waveInMessage: [ uint, { hwi: HWAVEIN, uMsg: UINT, dw1: DWORD_PTR, dw2: DWORD_PTR } ],
  midiOutGetNumDevs: [ uint, {  } ],
  midiStreamOpen: [ uint, { phms: LPHMIDISTRM, puDeviceID: LPUINT, cMidi: DWORD, dwCallback: DWORD_PTR, dwInstance: DWORD_PTR, fdwOpen: DWORD } ],
  midiStreamClose: [ uint, { hms: HMIDISTRM } ],
  midiStreamProperty: [ uint, { hms: HMIDISTRM, lppropdata: LPBYTE, dwProperty: DWORD } ],
  midiStreamPosition: [ uint, { hms: HMIDISTRM, lpmmt: LPMMTIME, cbmmt: UINT } ],
  midiStreamOut: [ uint, { hms: HMIDISTRM, pmh: LPMIDIHDR, cbmh: UINT } ],
  midiStreamPause: [ uint, { hms: HMIDISTRM } ],
  midiStreamRestart: [ uint, { hms: HMIDISTRM } ],
  midiStreamStop: [ uint, { hms: HMIDISTRM } ],
  midiConnect: [ uint, { hmi: HMIDI, hmo: HMIDIOUT, pReserved: LPVOID } ],
  midiDisconnect: [ uint, { hmi: HMIDI, hmo: HMIDIOUT, pReserved: LPVOID } ],
  midiOutGetDevCapsA: [ uint, { uDeviceID: UINT_PTR, pmoc: LPMIDIOUTCAPSA, cbmoc: UINT } ],
  midiOutGetDevCapsW: [ uint, { uDeviceID: UINT_PTR, pmoc: LPMIDIOUTCAPSW, cbmoc: UINT } ],
  midiOutGetVolume: [ uint, { hmo: HMIDIOUT, pdwVolume: LPDWORD } ],
  midiOutSetVolume: [ uint, { hmo: HMIDIOUT, dwVolume: DWORD } ],
  midiOutGetErrorTextA: [ uint, { mmrError: MMRESULT, pszText: LPSTR, cchText: UINT } ],
  midiOutGetErrorTextW: [ uint, { mmrError: MMRESULT, pszText: LPWSTR, cchText: UINT } ],
  midiOutOpen: [ uint, { phmo: LPHMIDIOUT, uDeviceID: UINT, dwCallback: DWORD_PTR, dwInstance: DWORD_PTR, fdwOpen: DWORD } ],
  midiOutClose: [ uint, { hmo: HMIDIOUT } ],
  midiOutPrepareHeader: [ uint, { hmo: HMIDIOUT, pmh: LPMIDIHDR, cbmh: UINT } ],
  midiOutUnprepareHeader: [ uint, { hmo: HMIDIOUT, pmh: LPMIDIHDR, cbmh: UINT } ],
  midiOutShortMsg: [ uint, { hmo: HMIDIOUT, dwMsg: DWORD } ],
  midiOutLongMsg: [ uint, { hmo: HMIDIOUT, pmh: LPMIDIHDR, cbmh: UINT } ],
  midiOutReset: [ uint, { hmo: HMIDIOUT } ],
  midiOutCachePatches: [ uint, { hmo: HMIDIOUT, uBank: UINT, pwpa: LPWORD, fuCache: UINT } ],
  midiOutCacheDrumPatches: [ uint, { hmo: HMIDIOUT, uPatch: UINT, pwkya: LPWORD, fuCache: UINT } ],
  midiOutGetID: [ uint, { hmo: HMIDIOUT, puDeviceID: LPUINT } ],
  midiOutMessage: [ uint, { hmo: HMIDIOUT, uMsg: UINT, dw1: DWORD_PTR, dw2: DWORD_PTR } ],
  midiInGetNumDevs: [ uint, {  } ],
  midiInGetDevCapsA: [ uint, { uDeviceID: UINT_PTR, pmic: LPMIDIINCAPSA, cbmic: UINT } ],
  midiInGetDevCapsW: [ uint, { uDeviceID: UINT_PTR, pmic: LPMIDIINCAPSW, cbmic: UINT } ],
  midiInGetErrorTextA: [ uint, { mmrError: MMRESULT, pszText: LPSTR, cchText: UINT } ],
  midiInGetErrorTextW: [ uint, { mmrError: MMRESULT, pszText: LPWSTR, cchText: UINT } ],
  midiInOpen: [ uint, { phmi: LPHMIDIIN, uDeviceID: UINT, dwCallback: DWORD_PTR, dwInstance: DWORD_PTR, fdwOpen: DWORD } ],
  midiInClose: [ uint, { hmi: HMIDIIN } ],
  midiInPrepareHeader: [ uint, { hmi: HMIDIIN, pmh: LPMIDIHDR, cbmh: UINT } ],
  midiInUnprepareHeader: [ uint, { hmi: HMIDIIN, pmh: LPMIDIHDR, cbmh: UINT } ],
  midiInAddBuffer: [ uint, { hmi: HMIDIIN, pmh: LPMIDIHDR, cbmh: UINT } ],
  midiInStart: [ uint, { hmi: HMIDIIN } ],
  midiInStop: [ uint, { hmi: HMIDIIN } ],
  midiInReset: [ uint, { hmi: HMIDIIN } ],
  midiInGetID: [ uint, { hmi: HMIDIIN, puDeviceID: LPUINT } ],
  midiInMessage: [ uint, { hmi: HMIDIIN, uMsg: UINT, dw1: DWORD_PTR, dw2: DWORD_PTR } ],
  auxGetNumDevs: [ uint, {  } ],
  auxGetDevCapsA: [ uint, { uDeviceID: UINT_PTR, pac: LPAUXCAPSA, cbac: UINT } ],
  auxGetDevCapsW: [ uint, { uDeviceID: UINT_PTR, pac: LPAUXCAPSW, cbac: UINT } ],
  auxSetVolume: [ uint, { uDeviceID: UINT, dwVolume: DWORD } ],
  auxGetVolume: [ uint, { uDeviceID: UINT, pdwVolume: LPDWORD } ],
  auxOutMessage: [ uint, { uDeviceID: UINT, uMsg: UINT, dw1: DWORD_PTR, dw2: DWORD_PTR } ],
  mixerGetNumDevs: [ uint, {  } ],
  mixerGetDevCapsA: [ uint, { uMxId: UINT_PTR, pmxcaps: LPMIXERCAPSA, cbmxcaps: UINT } ],
  mixerGetDevCapsW: [ uint, { uMxId: UINT_PTR, pmxcaps: LPMIXERCAPSW, cbmxcaps: UINT } ],
  mixerOpen: [ uint, { phmx: LPHMIXER, uMxId: UINT, dwCallback: DWORD_PTR, dwInstance: DWORD_PTR, fdwOpen: DWORD } ],
  mixerClose: [ uint, { hmx: HMIXER } ],
  mixerMessage: [ ulong, { hmx: HMIXER, uMsg: UINT, dwParam1: DWORD_PTR, dwParam2: DWORD_PTR } ],
  mixerGetLineInfoA: [ uint, { hmxobj: HMIXEROBJ, pmxl: LPMIXERLINEA, fdwInfo: DWORD } ],
  mixerGetLineInfoW: [ uint, { hmxobj: HMIXEROBJ, pmxl: LPMIXERLINEW, fdwInfo: DWORD } ],
  mixerGetID: [ uint, { hmxobj: HMIXEROBJ, puMxId: uint.Δ, fdwId: DWORD } ],
  mixerGetLineControlsA: [ uint, { hmxobj: HMIXEROBJ, pmxlc: LPMIXERLINECONTROLSA, fdwControls: DWORD } ],
  mixerGetLineControlsW: [ uint, { hmxobj: HMIXEROBJ, pmxlc: LPMIXERLINECONTROLSW, fdwControls: DWORD } ],
  mixerGetControlDetailsA: [ uint, { hmxobj: HMIXEROBJ, pmxcd: LPMIXERCONTROLDETAILS, fdwDetails: DWORD } ],
  mixerGetControlDetailsW: [ uint, { hmxobj: HMIXEROBJ, pmxcd: LPMIXERCONTROLDETAILS, fdwDetails: DWORD } ],
  mixerSetControlDetails: [ uint, { hmxobj: HMIXEROBJ, pmxcd: LPMIXERCONTROLDETAILS, fdwDetails: DWORD } ],
  timeGetSystemTime: [ uint, { pmmt: LPMMTIME, cbmmt: UINT } ],
  timeGetTime: [ ulong, {  } ],
  timeSetEvent: [ uint, { uDelay: UINT, uResolution: UINT, fptc: LPTIMECALLBACK, dwUser: DWORD_PTR, fuEvent: UINT } ],
  timeKillEvent: [ uint, { uTimerID: UINT } ],
  timeGetDevCaps: [ uint, { ptc: LPTIMECAPS, cbtc: UINT } ],
  timeBeginPeriod: [ uint, { uPeriod: UINT } ],
  timeEndPeriod: [ uint, { uPeriod: UINT } ],
  joyGetNumDevs: [ uint, {  } ],
  joyGetDevCapsA: [ uint, { uJoyID: UINT_PTR, pjc: LPJOYCAPSA, cbjc: UINT } ],
  joyGetDevCapsW: [ uint, { uJoyID: UINT_PTR, pjc: LPJOYCAPSW, cbjc: UINT } ],
  joyGetPos: [ uint, { uJoyID: UINT, pji: LPJOYINFO } ],
  joyGetPosEx: [ uint, { uJoyID: UINT, pji: LPJOYINFOEX } ],
  joyGetThreshold: [ uint, { uJoyID: UINT, puThreshold: LPUINT } ],
  joyReleaseCapture: [ uint, { uJoyID: UINT } ],
  joySetCapture: [ uint, { hwnd: HWND, uJoyID: UINT, uPeriod: UINT, fChanged: BOOL } ],
  joySetThreshold: [ uint, { uJoyID: UINT, uThreshold: UINT } ],
  mmioStringToFOURCCA: [ ulong, { sz: LPCSTR, uFlags: UINT } ],
  mmioStringToFOURCCW: [ ulong, { sz: LPCWSTR, uFlags: UINT } ],
  mmioInstallIOProcA: [ LPMMIOPROC, { fccIOProc: FOURCC, pIOProc: LPMMIOPROC, dwFlags: DWORD } ],
  mmioInstallIOProcW: [ LPMMIOPROC, { fccIOProc: FOURCC, pIOProc: LPMMIOPROC, dwFlags: DWORD } ],
  mmioOpenA: [ VOIDPTR, { pszFileName: LPSTR, pmmioinfo: LPMMIOINFO, fdwOpen: DWORD } ],
  mmioOpenW: [ VOIDPTR, { pszFileName: LPWSTR, pmmioinfo: LPMMIOINFO, fdwOpen: DWORD } ],
  mmioRenameA: [ uint, { pszFileName: LPCSTR, pszNewFileName: LPCSTR, pmmioinfo: LPCMMIOINFO, fdwRename: DWORD } ],
  mmioRenameW: [ uint, { pszFileName: LPCWSTR, pszNewFileName: LPCWSTR, pmmioinfo: LPCMMIOINFO, fdwRename: DWORD } ],
  mmioClose: [ uint, { hmmio: HMMIO, fuClose: UINT } ],
  mmioRead: [ long, { hmmio: HMMIO, pch: HPSTR, cch: LONG } ],
  mmioWrite: [ long, { hmmio: HMMIO, pch: int8.Δ, cch: LONG } ],
  mmioSeek: [ long, { hmmio: HMMIO, lOffset: LONG, iOrigin: int } ],
  mmioGetInfo: [ uint, { hmmio: HMMIO, pmmioinfo: LPMMIOINFO, fuInfo: UINT } ],
  mmioSetInfo: [ uint, { hmmio: HMMIO, pmmioinfo: LPCMMIOINFO, fuInfo: UINT } ],
  mmioSetBuffer: [ uint, { hmmio: HMMIO, pchBuffer: LPSTR, cchBuffer: LONG, fuBuffer: UINT } ],
  mmioFlush: [ uint, { hmmio: HMMIO, fuFlush: UINT } ],
  mmioAdvance: [ uint, { hmmio: HMMIO, pmmioinfo: LPMMIOINFO, fuAdvance: UINT } ],
  mmioSendMessage: [ long, { hmmio: HMMIO, uMsg: UINT, lParam1: LPARAM, lParam2: LPARAM } ],
  mmioDescend: [ uint, { hmmio: HMMIO, pmmcki: LPMMCKINFO, pmmckiParent: uint.Δ, fuDescend: UINT } ],
  mmioAscend: [ uint, { hmmio: HMMIO, pmmcki: LPMMCKINFO, fuAscend: UINT } ],
  mmioCreateChunk: [ uint, { hmmio: HMMIO, pmmcki: LPMMCKINFO, fuCreate: UINT } ],
  mciSendCommandA: [ ulong, { mciId: MCIDEVICEID, uMsg: UINT, dwParam1: DWORD_PTR, dwParam2: DWORD_PTR } ],
  mciSendCommandW: [ ulong, { mciId: MCIDEVICEID, uMsg: UINT, dwParam1: DWORD_PTR, dwParam2: DWORD_PTR } ],
  mciSendStringA: [ ulong, { lpstrCommand: LPCSTR, lpstrReturnString: LPSTR, uReturnLength: UINT, hwndCallback: HWND } ],
  mciSendStringW: [ ulong, { lpstrCommand: LPCWSTR, lpstrReturnString: LPWSTR, uReturnLength: UINT, hwndCallback: HWND } ],
  mciGetDeviceIDA: [ uint, { pszDevice: LPCSTR } ],
  mciGetDeviceIDW: [ uint, { pszDevice: LPCWSTR } ],
  mciGetDeviceIDFromElementIDA: [ uint, { dwElementID: DWORD, lpstrType: LPCSTR } ],
  mciGetDeviceIDFromElementIDW: [ uint, { dwElementID: DWORD, lpstrType: LPCWSTR } ],
  mciGetErrorStringA: [ int, { mcierr: MCIERROR, pszText: LPSTR, cchText: UINT } ],
  mciGetErrorStringW: [ int, { mcierr: MCIERROR, pszText: LPWSTR, cchText: UINT } ],
  mciSetYieldProc: [ int, { mciId: MCIDEVICEID, fpYieldProc: YIELDPROC, dwYieldData: DWORD } ],
  mciGetCreatorTask: [ VOIDPTR, { mciId: MCIDEVICEID } ],
  mciGetYieldProc: [ YIELDPROC, { mciId: MCIDEVICEID, pdwYieldData: LPDWORD } ],
  Netbios: [ uchar, { pncb: PNCB } ],
  RpcBindingCopy: [ long, { SourceBinding: RPC_BINDING_HANDLE, DestinationBinding: VoidT.Δ.Δ } ],
  RpcBindingFree: [ long, { Binding: VoidT.Δ.Δ } ],
  RpcBindingSetOption: [ long, { hBinding: RPC_BINDING_HANDLE, option: ulong, optionValue: ULONG_PTR } ],
  RpcBindingInqOption: [ long, { hBinding: RPC_BINDING_HANDLE, option: ulong, pOptionValue: ulong.Δ } ],
  RpcBindingFromStringBindingA: [ long, { StringBinding: RPC_CSTR, Binding: VoidT.Δ.Δ } ],
  RpcBindingFromStringBindingW: [ long, { StringBinding: RPC_WSTR, Binding: VoidT.Δ.Δ } ],
  RpcSsGetContextBinding: [ long, { ContextHandle: VoidT.Δ, Binding: VoidT.Δ.Δ } ],
  RpcBindingInqObject: [ long, { Binding: RPC_BINDING_HANDLE, ObjectUuid: uint.Δ } ],
  RpcBindingReset: [ long, { Binding: RPC_BINDING_HANDLE } ],
  RpcBindingSetObject: [ long, { Binding: RPC_BINDING_HANDLE, ObjectUuid: uint.Δ } ],
  RpcMgmtInqDefaultProtectLevel: [ long, { AuthnSvc: ulong, AuthnLevel: ulong.Δ } ],
  RpcBindingToStringBindingA: [ long, { Binding: RPC_BINDING_HANDLE, StringBinding: uchar.Δ.Δ } ],
  RpcBindingToStringBindingW: [ long, { Binding: RPC_BINDING_HANDLE, StringBinding: ushort.Δ.Δ } ],
  RpcBindingVectorFree: [ long, { BindingVector: uint.Δ.Δ } ],
  RpcStringBindingComposeA: [ long, { ObjUuid: RPC_CSTR, ProtSeq: RPC_CSTR, NetworkAddr: RPC_CSTR, Endpoint: RPC_CSTR, Options: RPC_CSTR, StringBinding: uchar.Δ.Δ } ],
  RpcStringBindingComposeW: [ long, { ObjUuid: RPC_WSTR, ProtSeq: RPC_WSTR, NetworkAddr: RPC_WSTR, Endpoint: RPC_WSTR, Options: RPC_WSTR, StringBinding: ushort.Δ.Δ } ],
  RpcStringBindingParseA: [ long, { StringBinding: RPC_CSTR, ObjUuid: uchar.Δ.Δ, Protseq: uchar.Δ.Δ, NetworkAddr: uchar.Δ.Δ, Endpoint: uchar.Δ.Δ, NetworkOptions: uchar.Δ.Δ } ],
  RpcStringBindingParseW: [ long, { StringBinding: RPC_WSTR, ObjUuid: ushort.Δ.Δ, Protseq: ushort.Δ.Δ, NetworkAddr: ushort.Δ.Δ, Endpoint: ushort.Δ.Δ, NetworkOptions: ushort.Δ.Δ } ],
  RpcStringFreeA: [ long, { String: uchar.Δ.Δ } ],
  RpcStringFreeW: [ long, { String: ushort.Δ.Δ } ],
  RpcIfInqId: [ long, { RpcIfHandle: RPC_IF_HANDLE, RpcIfId: uint.Δ } ],
  RpcNetworkIsProtseqValidA: [ long, { Protseq: RPC_CSTR } ],
  RpcNetworkIsProtseqValidW: [ long, { Protseq: RPC_WSTR } ],
  RpcMgmtInqComTimeout: [ long, { Binding: RPC_BINDING_HANDLE, Timeout: uint.Δ } ],
  RpcMgmtSetComTimeout: [ long, { Binding: RPC_BINDING_HANDLE, Timeout: uint } ],
  RpcMgmtSetCancelTimeout: [ long, { Timeout: long } ],
  RpcNetworkInqProtseqsA: [ long, { ProtseqVector: uint.Δ.Δ } ],
  RpcNetworkInqProtseqsW: [ long, { ProtseqVector: uint.Δ.Δ } ],
  RpcObjectInqType: [ long, { ObjUuid: uint.Δ, TypeUuid: uint.Δ } ],
  RpcObjectSetInqFn: [ long, { InquiryFn: new CallbackT(VoidT, [UUID.Δ, UUID.Δ, long.Δ]).Δ } ],
  RpcObjectSetType: [ long, { ObjUuid: uint.Δ, TypeUuid: uint.Δ } ],
  RpcProtseqVectorFreeA: [ long, { ProtseqVector: uint.Δ.Δ } ],
  RpcProtseqVectorFreeW: [ long, { ProtseqVector: uint.Δ.Δ } ],
  RpcServerInqBindings: [ long, { BindingVector: uint.Δ.Δ } ],
  RpcServerInqIf: [ long, { IfSpec: RPC_IF_HANDLE, MgrTypeUuid: uint.Δ, MgrEpv: VoidT.Δ.Δ } ],
  RpcServerListen: [ long, { MinimumCallThreads: uint, MaxCalls: uint, DontWait: uint } ],
  RpcServerRegisterIf: [ long, { IfSpec: RPC_IF_HANDLE, MgrTypeUuid: uint.Δ, MgrEpv: VoidT.Δ } ],
  RpcServerRegisterIfEx: [ long, { IfSpec: RPC_IF_HANDLE, MgrTypeUuid: uint.Δ, MgrEpv: VoidT.Δ, Flags: uint, MaxCalls: uint, IfCallback: new CallbackT(long, [VoidT.Δ, VoidT.Δ]).Δ } ],
  RpcServerRegisterIf2: [ long, { IfSpec: RPC_IF_HANDLE, MgrTypeUuid: uint.Δ, MgrEpv: VoidT.Δ, Flags: uint, MaxCalls: uint, MaxRpcSize: uint, IfCallbackFn: new CallbackT(long, [VoidT.Δ, VoidT.Δ]).Δ } ],
  RpcServerUnregisterIf: [ long, { IfSpec: RPC_IF_HANDLE, MgrTypeUuid: uint.Δ, WaitForCallsToComplete: uint } ],
  RpcServerUnregisterIfEx: [ long, { IfSpec: RPC_IF_HANDLE, MgrTypeUuid: uint.Δ, RundownContextHandles: int } ],
  RpcServerUseAllProtseqs: [ long, { MaxCalls: uint, SecurityDescriptor: VoidT.Δ } ],
  RpcServerUseAllProtseqsEx: [ long, { MaxCalls: uint, SecurityDescriptor: VoidT.Δ, Policy: PRPC_POLICY } ],
  RpcServerUseAllProtseqsIf: [ long, { MaxCalls: uint, IfSpec: RPC_IF_HANDLE, SecurityDescriptor: VoidT.Δ } ],
  RpcServerUseAllProtseqsIfEx: [ long, { MaxCalls: uint, IfSpec: RPC_IF_HANDLE, SecurityDescriptor: VoidT.Δ, Policy: PRPC_POLICY } ],
  RpcServerUseProtseqA: [ long, { Protseq: RPC_CSTR, MaxCalls: uint, SecurityDescriptor: VoidT.Δ } ],
  RpcServerUseProtseqExA: [ long, { Protseq: RPC_CSTR, MaxCalls: uint, SecurityDescriptor: VoidT.Δ, Policy: PRPC_POLICY } ],
  RpcServerUseProtseqW: [ long, { Protseq: RPC_WSTR, MaxCalls: uint, SecurityDescriptor: VoidT.Δ } ],
  RpcServerUseProtseqExW: [ long, { Protseq: RPC_WSTR, MaxCalls: uint, SecurityDescriptor: VoidT.Δ, Policy: PRPC_POLICY } ],
  RpcServerUseProtseqEpA: [ long, { Protseq: RPC_CSTR, MaxCalls: uint, Endpoint: RPC_CSTR, SecurityDescriptor: VoidT.Δ } ],
  RpcServerUseProtseqEpExA: [ long, { Protseq: RPC_CSTR, MaxCalls: uint, Endpoint: RPC_CSTR, SecurityDescriptor: VoidT.Δ, Policy: PRPC_POLICY } ],
  RpcServerUseProtseqEpW: [ long, { Protseq: RPC_WSTR, MaxCalls: uint, Endpoint: RPC_WSTR, SecurityDescriptor: VoidT.Δ } ],
  RpcServerUseProtseqEpExW: [ long, { Protseq: RPC_WSTR, MaxCalls: uint, Endpoint: RPC_WSTR, SecurityDescriptor: VoidT.Δ, Policy: PRPC_POLICY } ],
  RpcServerUseProtseqIfA: [ long, { Protseq: RPC_CSTR, MaxCalls: uint, IfSpec: RPC_IF_HANDLE, SecurityDescriptor: VoidT.Δ } ],
  RpcServerUseProtseqIfExA: [ long, { Protseq: RPC_CSTR, MaxCalls: uint, IfSpec: RPC_IF_HANDLE, SecurityDescriptor: VoidT.Δ, Policy: PRPC_POLICY } ],
  RpcServerUseProtseqIfW: [ long, { Protseq: RPC_WSTR, MaxCalls: uint, IfSpec: RPC_IF_HANDLE, SecurityDescriptor: VoidT.Δ } ],
  RpcServerUseProtseqIfExW: [ long, { Protseq: RPC_WSTR, MaxCalls: uint, IfSpec: RPC_IF_HANDLE, SecurityDescriptor: VoidT.Δ, Policy: PRPC_POLICY } ],
  RpcServerYield: [ VoidT, {  } ],
  RpcMgmtStatsVectorFree: [ long, { StatsVector: uint.Δ.Δ } ],
  RpcMgmtInqStats: [ long, { Binding: RPC_BINDING_HANDLE, Statistics: uint.Δ.Δ } ],
  RpcMgmtIsServerListening: [ long, { Binding: RPC_BINDING_HANDLE } ],
  RpcMgmtStopServerListening: [ long, { Binding: RPC_BINDING_HANDLE } ],
  RpcMgmtWaitServerListen: [ long, {  } ],
  RpcMgmtSetServerStackSize: [ long, { ThreadStackSize: ulong } ],
  RpcSsDontSerializeContext: [ VoidT, {  } ],
  RpcMgmtEnableIdleCleanup: [ long, {  } ],
  RpcMgmtInqIfIds: [ long, { Binding: RPC_BINDING_HANDLE, IfIdVector: uint.Δ.Δ } ],
  RpcIfIdVectorFree: [ long, { IfIdVector: uint.Δ.Δ } ],
  RpcMgmtInqServerPrincNameA: [ long, { Binding: RPC_BINDING_HANDLE, AuthnSvc: ulong, ServerPrincName: uchar.Δ.Δ } ],
  RpcMgmtInqServerPrincNameW: [ long, { Binding: RPC_BINDING_HANDLE, AuthnSvc: ulong, ServerPrincName: ushort.Δ.Δ } ],
  RpcServerInqDefaultPrincNameA: [ long, { AuthnSvc: ulong, PrincName: uchar.Δ.Δ } ],
  RpcServerInqDefaultPrincNameW: [ long, { AuthnSvc: ulong, PrincName: ushort.Δ.Δ } ],
  RpcEpResolveBinding: [ long, { Binding: RPC_BINDING_HANDLE, IfSpec: RPC_IF_HANDLE } ],
  RpcNsBindingInqEntryNameA: [ long, { Binding: RPC_BINDING_HANDLE, EntryNameSyntax: ulong, EntryName: uchar.Δ.Δ } ],
  RpcNsBindingInqEntryNameW: [ long, { Binding: RPC_BINDING_HANDLE, EntryNameSyntax: ulong, EntryName: ushort.Δ.Δ } ],
  RpcBindingCreateA: [ long, { Template: uint.Δ, Security: uint.Δ, Options: uint.Δ, Binding: VoidT.Δ.Δ } ],
  RpcBindingCreateW: [ long, { Template: uint.Δ, Security: uint.Δ, Options: uint.Δ, Binding: VoidT.Δ.Δ } ],
  RpcBindingGetTrainingContextHandle: [ long, { Binding: RPC_BINDING_HANDLE, ContextHandle: VoidT.Δ.Δ } ],
  RpcServerInqBindingHandle: [ long, { Binding: VoidT.Δ.Δ } ],
  RpcImpersonateClient: [ long, { BindingHandle: RPC_BINDING_HANDLE } ],
  RpcRevertToSelfEx: [ long, { BindingHandle: RPC_BINDING_HANDLE } ],
  RpcRevertToSelf: [ long, {  } ],
  RpcBindingInqAuthClientA: [ long, { ClientBinding: RPC_BINDING_HANDLE, Privs: VoidT.Δ.Δ, ServerPrincName: uchar.Δ.Δ, AuthnLevel: ulong.Δ, AuthnSvc: ulong.Δ, AuthzSvc: ulong.Δ } ],
  RpcBindingInqAuthClientW: [ long, { ClientBinding: RPC_BINDING_HANDLE, Privs: VoidT.Δ.Δ, ServerPrincName: ushort.Δ.Δ, AuthnLevel: ulong.Δ, AuthnSvc: ulong.Δ, AuthzSvc: ulong.Δ } ],
  RpcBindingInqAuthClientExA: [ long, { ClientBinding: RPC_BINDING_HANDLE, Privs: VoidT.Δ.Δ, ServerPrincName: uchar.Δ.Δ, AuthnLevel: ulong.Δ, AuthnSvc: ulong.Δ, AuthzSvc: ulong.Δ, Flags: ulong } ],
  RpcBindingInqAuthClientExW: [ long, { ClientBinding: RPC_BINDING_HANDLE, Privs: VoidT.Δ.Δ, ServerPrincName: ushort.Δ.Δ, AuthnLevel: ulong.Δ, AuthnSvc: ulong.Δ, AuthzSvc: ulong.Δ, Flags: ulong } ],
  RpcBindingInqAuthInfoA: [ long, { Binding: RPC_BINDING_HANDLE, ServerPrincName: uchar.Δ.Δ, AuthnLevel: ulong.Δ, AuthnSvc: ulong.Δ, AuthIdentity: VoidT.Δ.Δ, AuthzSvc: ulong.Δ } ],
  RpcBindingInqAuthInfoW: [ long, { Binding: RPC_BINDING_HANDLE, ServerPrincName: ushort.Δ.Δ, AuthnLevel: ulong.Δ, AuthnSvc: ulong.Δ, AuthIdentity: VoidT.Δ.Δ, AuthzSvc: ulong.Δ } ],
  RpcBindingSetAuthInfoA: [ long, { Binding: RPC_BINDING_HANDLE, ServerPrincName: RPC_CSTR, AuthnLevel: ulong, AuthnSvc: ulong, AuthIdentity: RPC_AUTH_IDENTITY_HANDLE, AuthzSvc: ulong } ],
  RpcBindingSetAuthInfoExA: [ long, { Binding: RPC_BINDING_HANDLE, ServerPrincName: RPC_CSTR, AuthnLevel: ulong, AuthnSvc: ulong, AuthIdentity: RPC_AUTH_IDENTITY_HANDLE, AuthzSvc: ulong, SecurityQos: uint.Δ } ],
  RpcBindingSetAuthInfoW: [ long, { Binding: RPC_BINDING_HANDLE, ServerPrincName: RPC_WSTR, AuthnLevel: ulong, AuthnSvc: ulong, AuthIdentity: RPC_AUTH_IDENTITY_HANDLE, AuthzSvc: ulong } ],
  RpcBindingSetAuthInfoExW: [ long, { Binding: RPC_BINDING_HANDLE, ServerPrincName: RPC_WSTR, AuthnLevel: ulong, AuthnSvc: ulong, AuthIdentity: RPC_AUTH_IDENTITY_HANDLE, AuthzSvc: ulong, SecurityQOS: uint.Δ } ],
  RpcBindingInqAuthInfoExA: [ long, { Binding: RPC_BINDING_HANDLE, ServerPrincName: uchar.Δ.Δ, AuthnLevel: ulong.Δ, AuthnSvc: ulong.Δ, AuthIdentity: VoidT.Δ.Δ, AuthzSvc: ulong.Δ, RpcQosVersion: ulong, SecurityQOS: uint.Δ } ],
  RpcBindingInqAuthInfoExW: [ long, { Binding: RPC_BINDING_HANDLE, ServerPrincName: ushort.Δ.Δ, AuthnLevel: ulong.Δ, AuthnSvc: ulong.Δ, AuthIdentity: VoidT.Δ.Δ, AuthzSvc: ulong.Δ, RpcQosVersion: ulong, SecurityQOS: uint.Δ } ],
  RpcServerCompleteSecurityCallback: [ long, { BindingHandle: RPC_BINDING_HANDLE, Status: RPC_STATUS } ],
  RpcServerRegisterAuthInfoA: [ long, { ServerPrincName: RPC_CSTR, AuthnSvc: ulong, GetKeyFn: RPC_AUTH_KEY_RETRIEVAL_FN, Arg: VoidT.Δ } ],
  RpcServerRegisterAuthInfoW: [ long, { ServerPrincName: RPC_WSTR, AuthnSvc: ulong, GetKeyFn: RPC_AUTH_KEY_RETRIEVAL_FN, Arg: VoidT.Δ } ],
  RpcBindingServerFromClient: [ long, { ClientBinding: RPC_BINDING_HANDLE, ServerBinding: VoidT.Δ.Δ } ],
  RpcRaiseException: [ VoidT, { exception: RPC_STATUS } ],
  RpcTestCancel: [ long, {  } ],
  RpcServerTestCancel: [ long, { BindingHandle: RPC_BINDING_HANDLE } ],
  RpcCancelThread: [ long, { Thread: VoidT.Δ } ],
  RpcCancelThreadEx: [ long, { Thread: VoidT.Δ, Timeout: long } ],
  UuidCreate: [ long, { Uuid: uint.Δ } ],
  UuidCreateSequential: [ long, { Uuid: uint.Δ } ],
  UuidToStringA: [ long, { Uuid: uint.Δ, StringUuid: uchar.Δ.Δ } ],
  UuidFromStringA: [ long, { StringUuid: RPC_CSTR, Uuid: uint.Δ } ],
  UuidToStringW: [ long, { Uuid: uint.Δ, StringUuid: ushort.Δ.Δ } ],
  UuidFromStringW: [ long, { StringUuid: RPC_WSTR, Uuid: uint.Δ } ],
  UuidCompare: [ VoidT, { Uuid1: uint.Δ, Uuid2: uint.Δ, Status: long.Δ } ],
  UuidCreateNil: [ long, { NilUuid: uint.Δ } ],
  UuidEqual: [ VoidT, { Uuid1: uint.Δ, Uuid2: uint.Δ, Status: long.Δ } ],
  UuidHash: [ VoidT, { Uuid: uint.Δ, Status: long.Δ } ],
  UuidIsNil: [ VoidT, { Uuid: uint.Δ, Status: long.Δ } ],
  RpcEpRegisterNoReplaceA: [ long, { IfSpec: RPC_IF_HANDLE, BindingVector: uint.Δ, UuidVector: uint.Δ, Annotation: RPC_CSTR } ],
  RpcEpRegisterNoReplaceW: [ long, { IfSpec: RPC_IF_HANDLE, BindingVector: uint.Δ, UuidVector: uint.Δ, Annotation: RPC_WSTR } ],
  RpcEpRegisterA: [ long, { IfSpec: RPC_IF_HANDLE, BindingVector: uint.Δ, UuidVector: uint.Δ, Annotation: RPC_CSTR } ],
  RpcEpRegisterW: [ long, { IfSpec: RPC_IF_HANDLE, BindingVector: uint.Δ, UuidVector: uint.Δ, Annotation: RPC_WSTR } ],
  RpcEpUnregister: [ long, { IfSpec: RPC_IF_HANDLE, BindingVector: uint.Δ, UuidVector: uint.Δ } ],
  DceErrorInqTextA: [ long, { RpcStatus: RPC_STATUS, ErrorText: RPC_CSTR } ],
  DceErrorInqTextW: [ long, { RpcStatus: RPC_STATUS, ErrorText: RPC_WSTR } ],
  RpcMgmtEpEltInqBegin: [ long, { EpBinding: RPC_BINDING_HANDLE, InquiryType: ulong, IfId: uint.Δ, VersOption: ulong, ObjectUuid: uint.Δ, InquiryContext: VOIDPTR.Δ } ],
  RpcMgmtEpEltInqDone: [ long, { InquiryContext: VOIDPTR.Δ } ],
  RpcMgmtEpEltInqNextA: [ long, { InquiryContext: RPC_EP_INQ_HANDLE, IfId: uint.Δ, Binding: VoidT.Δ.Δ, ObjectUuid: uint.Δ, Annotation: uchar.Δ.Δ } ],
  RpcMgmtEpEltInqNextW: [ long, { InquiryContext: RPC_EP_INQ_HANDLE, IfId: uint.Δ, Binding: VoidT.Δ.Δ, ObjectUuid: uint.Δ, Annotation: ushort.Δ.Δ } ],
  RpcMgmtEpUnregister: [ long, { EpBinding: RPC_BINDING_HANDLE, IfId: uint.Δ, Binding: RPC_BINDING_HANDLE, ObjectUuid: uint.Δ } ],
  RpcMgmtSetAuthorizationFn: [ long, { AuthorizationFn: RPC_MGMT_AUTHORIZATION_FN } ],
  RpcExceptionFilter: [ VoidT, { ExceptionCode: ulong } ],
  I_RpcNegotiateTransferSyntax: [ long, { Message: uint.Δ } ],
  I_RpcGetBuffer: [ long, { Message: uint.Δ } ],
  I_RpcGetBufferWithObject: [ long, { Message: uint.Δ, ObjectUuid: uint.Δ } ],
  I_RpcSendReceive: [ long, { Message: uint.Δ } ],
  I_RpcFreeBuffer: [ long, { Message: uint.Δ } ],
  I_RpcSend: [ long, { Message: PRPC_MESSAGE } ],
  I_RpcReceive: [ long, { Message: PRPC_MESSAGE, Size: uint } ],
  I_RpcFreePipeBuffer: [ long, { Message: uint.Δ } ],
  I_RpcReallocPipeBuffer: [ long, { Message: PRPC_MESSAGE, NewSize: uint } ],
  I_RpcRequestMutex: [ VoidT, { Mutex: VoidT.Δ.Δ } ],
  I_RpcClearMutex: [ VoidT, { Mutex: I_RPC_MUTEX } ],
  I_RpcDeleteMutex: [ VoidT, { Mutex: I_RPC_MUTEX } ],
  I_RpcAllocate: [ VoidT, { Size: uint } ],
  I_RpcFree: [ VoidT, { Object: VoidT.Δ } ],
  I_RpcPauseExecution: [ VoidT, { Milliseconds: ulong } ],
  I_RpcGetExtendedError: [ long, {  } ],
  I_RpcMonitorAssociation: [ long, { Handle: RPC_BINDING_HANDLE, RundownRoutine: PRPC_RUNDOWN, Context: VoidT.Δ } ],
  I_RpcStopMonitorAssociation: [ long, { Handle: RPC_BINDING_HANDLE } ],
  I_RpcGetCurrentCallHandle: [ VoidT.Δ, {  } ],
  I_RpcGetAssociationContext: [ long, { BindingHandle: RPC_BINDING_HANDLE, AssociationContext: VoidT.Δ.Δ } ],
  I_RpcGetServerContextList: [ VoidT, { BindingHandle: RPC_BINDING_HANDLE } ],
  I_RpcSetServerContextList: [ VoidT, { BindingHandle: RPC_BINDING_HANDLE, ServerContextList: VoidT.Δ } ],
  I_RpcNsInterfaceExported: [ long, { EntryNameSyntax: ulong, EntryName: ushort.Δ, RpcInterfaceInformation: uint.Δ } ],
  I_RpcNsInterfaceUnexported: [ long, { EntryNameSyntax: ulong, EntryName: ushort.Δ, RpcInterfaceInformation: uint.Δ } ],
  I_RpcBindingToStaticStringBindingW: [ long, { Binding: RPC_BINDING_HANDLE, StringBinding: ushort.Δ.Δ } ],
  I_RpcBindingInqSecurityContext: [ long, { Binding: RPC_BINDING_HANDLE, SecurityContextHandle: VoidT.Δ.Δ } ],
  I_RpcBindingInqSecurityContextKeyInfo: [ long, { Binding: RPC_BINDING_HANDLE, KeyInfo: VoidT.Δ } ],
  I_RpcBindingInqWireIdForSnego: [ long, { Binding: RPC_BINDING_HANDLE, WireId: RPC_CSTR } ],
  I_RpcBindingInqMarshalledTargetInfo: [ long, { Binding: RPC_BINDING_HANDLE, MarshalledTargetInfoSize: ulong.Δ, MarshalledTargetInfo: uchar.Δ.Δ } ],
  I_RpcBindingInqLocalClientPID: [ long, { Binding: RPC_BINDING_HANDLE, Pid: ulong.Δ } ],
  I_RpcBindingHandleToAsyncHandle: [ long, { Binding: RPC_BINDING_HANDLE, AsyncHandle: VoidT.Δ.Δ } ],
  I_RpcNsBindingSetEntryNameW: [ long, { Binding: RPC_BINDING_HANDLE, EntryNameSyntax: ulong, EntryName: RPC_WSTR } ],
  I_RpcNsBindingSetEntryNameA: [ long, { Binding: RPC_BINDING_HANDLE, EntryNameSyntax: ulong, EntryName: RPC_CSTR } ],
  I_RpcServerUseProtseqEp2A: [ long, { NetworkAddress: RPC_CSTR, Protseq: RPC_CSTR, MaxCalls: uint, Endpoint: RPC_CSTR, SecurityDescriptor: VoidT.Δ, Policy: VoidT.Δ } ],
  I_RpcServerUseProtseqEp2W: [ long, { NetworkAddress: RPC_WSTR, Protseq: RPC_WSTR, MaxCalls: uint, Endpoint: RPC_WSTR, SecurityDescriptor: VoidT.Δ, Policy: VoidT.Δ } ],
  I_RpcServerUseProtseq2W: [ long, { NetworkAddress: RPC_WSTR, Protseq: RPC_WSTR, MaxCalls: uint, SecurityDescriptor: VoidT.Δ, Policy: VoidT.Δ } ],
  I_RpcServerUseProtseq2A: [ long, { NetworkAddress: RPC_CSTR, Protseq: RPC_CSTR, MaxCalls: uint, SecurityDescriptor: VoidT.Δ, Policy: VoidT.Δ } ],
  I_RpcServerStartService: [ long, { Protseq: RPC_WSTR, Endpoint: RPC_WSTR, IfSpec: RPC_IF_HANDLE } ],
  I_RpcBindingInqDynamicEndpointW: [ long, { Binding: RPC_BINDING_HANDLE, DynamicEndpoint: ushort.Δ.Δ } ],
  I_RpcBindingInqDynamicEndpointA: [ long, { Binding: RPC_BINDING_HANDLE, DynamicEndpoint: uchar.Δ.Δ } ],
  I_RpcServerCheckClientRestriction: [ long, { Context: RPC_BINDING_HANDLE } ],
  I_RpcBindingInqTransportType: [ long, { Binding: RPC_BINDING_HANDLE, Type: uint.Δ } ],
  I_RpcIfInqTransferSyntaxes: [ long, { RpcIfHandle: RPC_IF_HANDLE, TransferSyntaxes: uint.Δ, TransferSyntaxSize: uint, TransferSyntaxCount: uint.Δ } ],
  I_UuidCreate: [ long, { Uuid: uint.Δ } ],
  I_RpcBindingCopy: [ long, { SourceBinding: RPC_BINDING_HANDLE, DestinationBinding: VoidT.Δ.Δ } ],
  I_RpcBindingIsClientLocal: [ long, { BindingHandle: RPC_BINDING_HANDLE, ClientLocalFlag: uint.Δ } ],
  I_RpcBindingInqConnId: [ long, { Binding: RPC_BINDING_HANDLE, ConnId: VoidT.Δ.Δ, pfFirstCall: int.Δ } ],
  I_RpcBindingCreateNP: [ long, { ServerName: RPC_WSTR, ServiceName: RPC_WSTR, NetworkOptions: RPC_WSTR, Binding: VoidT.Δ.Δ } ],
  I_RpcSsDontSerializeContext: [ VoidT, {  } ],
  I_RpcLaunchDatagramReceiveThread: [ long, { pAddress: VoidT.Δ } ],
  I_RpcServerRegisterForwardFunction: [ long, { pForwardFunction: new CallbackT(long, [UUID.Δ, _RPC_VERSION.Δ, UUID.Δ, uchar.Δ, VoidT.Δ.Δ]).Δ } ],
  I_RpcServerInqAddressChangeFn: [ new CallbackT(VoidT, [VoidT.Δ]), {  } ],
  I_RpcServerSetAddressChangeFn: [ long, { pAddressChangeFn: new CallbackT(VoidT, [VoidT.Δ]).Δ } ],
  I_RpcServerInqLocalConnAddress: [ long, { Binding: RPC_BINDING_HANDLE, Buffer: VoidT.Δ, BufferSize: ulong.Δ, AddressFormat: ulong.Δ } ],
  I_RpcServerInqRemoteConnAddress: [ long, { Binding: RPC_BINDING_HANDLE, Buffer: VoidT.Δ, BufferSize: ulong.Δ, AddressFormat: ulong.Δ } ],
  I_RpcSessionStrictContextHandle: [ VoidT, {  } ],
  I_RpcTurnOnEEInfoPropagation: [ long, {  } ],
  I_RpcConnectionInqSockBuffSize: [ long, { RecvBuffSize: ulong.Δ, SendBuffSize: ulong.Δ } ],
  I_RpcConnectionSetSockBuffSize: [ long, { RecvBuffSize: ulong, SendBuffSize: ulong } ],
  I_RpcServerStartListening: [ long, { hWnd: VoidT.Δ } ],
  I_RpcServerStopListening: [ long, {  } ],
  I_RpcBindingSetAsync: [ long, { Binding: RPC_BINDING_HANDLE, BlockingFn: RPC_BLOCKING_FN, ServerTid: ulong } ],
  I_RpcSetThreadParams: [ long, { fClientFree: int, Context: VoidT.Δ, hWndClient: VoidT.Δ } ],
  I_RpcWindowProc: [ VoidT, { hWnd: VoidT.Δ, Message: uint, wParam: uint, lParam: ulong } ],
  I_RpcServerUnregisterEndpointA: [ long, { Protseq: RPC_CSTR, Endpoint: RPC_CSTR } ],
  I_RpcServerUnregisterEndpointW: [ long, { Protseq: RPC_WSTR, Endpoint: RPC_WSTR } ],
  I_RpcServerInqTransportType: [ long, { Type: uint.Δ } ],
  I_RpcMapWin32Status: [ VoidT, { Status: RPC_STATUS } ],
  I_RpcProxyNewConnection: [ long, { ConnectionType: ulong, ServerAddress: ushort.Δ, ServerPort: ushort.Δ, MinConnTimeout: ushort.Δ, ConnectionParameter: VoidT.Δ, CallOutState: uint.Δ, ProxyCallbackInterface: uint.Δ } ],
  I_RpcReplyToClientWithStatus: [ long, { ConnectionParameter: VoidT.Δ, RpcStatus: RPC_STATUS } ],
  I_RpcRecordCalloutFailure: [ VoidT, { RpcStatus: RPC_STATUS, CallOutState: uint.Δ, DllName: ushort.Δ } ],
  I_RpcMgmtEnableDedicatedThreadPool: [ long, {  } ],
  RpcNsBindingExportA: [ long, { EntryNameSyntax: ulong, EntryName: RPC_CSTR, IfSpec: RPC_IF_HANDLE, BindingVec: uint.Δ, ObjectUuidVec: uint.Δ } ],
  RpcNsBindingUnexportA: [ long, { EntryNameSyntax: ulong, EntryName: RPC_CSTR, IfSpec: RPC_IF_HANDLE, ObjectUuidVec: uint.Δ } ],
  RpcNsBindingExportW: [ long, { EntryNameSyntax: ulong, EntryName: RPC_WSTR, IfSpec: RPC_IF_HANDLE, BindingVec: uint.Δ, ObjectUuidVec: uint.Δ } ],
  RpcNsBindingUnexportW: [ long, { EntryNameSyntax: ulong, EntryName: RPC_WSTR, IfSpec: RPC_IF_HANDLE, ObjectUuidVec: uint.Δ } ],
  RpcNsBindingExportPnPA: [ long, { EntryNameSyntax: ulong, EntryName: RPC_CSTR, IfSpec: RPC_IF_HANDLE, ObjectVector: uint.Δ } ],
  RpcNsBindingUnexportPnPA: [ long, { EntryNameSyntax: ulong, EntryName: RPC_CSTR, IfSpec: RPC_IF_HANDLE, ObjectVector: uint.Δ } ],
  RpcNsBindingExportPnPW: [ long, { EntryNameSyntax: ulong, EntryName: RPC_WSTR, IfSpec: RPC_IF_HANDLE, ObjectVector: uint.Δ } ],
  RpcNsBindingUnexportPnPW: [ long, { EntryNameSyntax: ulong, EntryName: RPC_WSTR, IfSpec: RPC_IF_HANDLE, ObjectVector: uint.Δ } ],
  RpcNsBindingLookupBeginA: [ long, { EntryNameSyntax: ulong, EntryName: RPC_CSTR, IfSpec: RPC_IF_HANDLE, ObjUuid: uint.Δ, BindingMaxCount: ulong, LookupContext: VoidT.Δ.Δ } ],
  RpcNsBindingLookupBeginW: [ long, { EntryNameSyntax: ulong, EntryName: RPC_WSTR, IfSpec: RPC_IF_HANDLE, ObjUuid: uint.Δ, BindingMaxCount: ulong, LookupContext: VoidT.Δ.Δ } ],
  RpcNsBindingLookupNext: [ long, { LookupContext: RPC_NS_HANDLE, BindingVec: uint.Δ.Δ } ],
  RpcNsBindingLookupDone: [ long, { LookupContext: VoidT.Δ.Δ } ],
  RpcNsGroupDeleteA: [ long, { GroupNameSyntax: ulong, GroupName: RPC_CSTR } ],
  RpcNsGroupMbrAddA: [ long, { GroupNameSyntax: ulong, GroupName: RPC_CSTR, MemberNameSyntax: ulong, MemberName: RPC_CSTR } ],
  RpcNsGroupMbrRemoveA: [ long, { GroupNameSyntax: ulong, GroupName: RPC_CSTR, MemberNameSyntax: ulong, MemberName: RPC_CSTR } ],
  RpcNsGroupMbrInqBeginA: [ long, { GroupNameSyntax: ulong, GroupName: RPC_CSTR, MemberNameSyntax: ulong, InquiryContext: VoidT.Δ.Δ } ],
  RpcNsGroupMbrInqNextA: [ long, { InquiryContext: RPC_NS_HANDLE, MemberName: uchar.Δ.Δ } ],
  RpcNsGroupDeleteW: [ long, { GroupNameSyntax: ulong, GroupName: RPC_WSTR } ],
  RpcNsGroupMbrAddW: [ long, { GroupNameSyntax: ulong, GroupName: RPC_WSTR, MemberNameSyntax: ulong, MemberName: RPC_WSTR } ],
  RpcNsGroupMbrRemoveW: [ long, { GroupNameSyntax: ulong, GroupName: RPC_WSTR, MemberNameSyntax: ulong, MemberName: RPC_WSTR } ],
  RpcNsGroupMbrInqBeginW: [ long, { GroupNameSyntax: ulong, GroupName: RPC_WSTR, MemberNameSyntax: ulong, InquiryContext: VoidT.Δ.Δ } ],
  RpcNsGroupMbrInqNextW: [ long, { InquiryContext: RPC_NS_HANDLE, MemberName: ushort.Δ.Δ } ],
  RpcNsGroupMbrInqDone: [ long, { InquiryContext: VoidT.Δ.Δ } ],
  RpcNsProfileDeleteA: [ long, { ProfileNameSyntax: ulong, ProfileName: RPC_CSTR } ],
  RpcNsProfileEltAddA: [ long, { ProfileNameSyntax: ulong, ProfileName: RPC_CSTR, IfId: uint.Δ, MemberNameSyntax: ulong, MemberName: RPC_CSTR, Priority: ulong, Annotation: RPC_CSTR } ],
  RpcNsProfileEltRemoveA: [ long, { ProfileNameSyntax: ulong, ProfileName: RPC_CSTR, IfId: uint.Δ, MemberNameSyntax: ulong, MemberName: RPC_CSTR } ],
  RpcNsProfileEltInqBeginA: [ long, { ProfileNameSyntax: ulong, ProfileName: RPC_CSTR, InquiryType: ulong, IfId: uint.Δ, VersOption: ulong, MemberNameSyntax: ulong, MemberName: RPC_CSTR, InquiryContext: VoidT.Δ.Δ } ],
  RpcNsProfileEltInqNextA: [ long, { InquiryContext: RPC_NS_HANDLE, IfId: uint.Δ, MemberName: uchar.Δ.Δ, Priority: ulong.Δ, Annotation: uchar.Δ.Δ } ],
  RpcNsProfileDeleteW: [ long, { ProfileNameSyntax: ulong, ProfileName: RPC_WSTR } ],
  RpcNsProfileEltAddW: [ long, { ProfileNameSyntax: ulong, ProfileName: RPC_WSTR, IfId: uint.Δ, MemberNameSyntax: ulong, MemberName: RPC_WSTR, Priority: ulong, Annotation: RPC_WSTR } ],
  RpcNsProfileEltRemoveW: [ long, { ProfileNameSyntax: ulong, ProfileName: RPC_WSTR, IfId: uint.Δ, MemberNameSyntax: ulong, MemberName: RPC_WSTR } ],
  RpcNsProfileEltInqBeginW: [ long, { ProfileNameSyntax: ulong, ProfileName: RPC_WSTR, InquiryType: ulong, IfId: uint.Δ, VersOption: ulong, MemberNameSyntax: ulong, MemberName: RPC_WSTR, InquiryContext: VoidT.Δ.Δ } ],
  RpcNsProfileEltInqNextW: [ long, { InquiryContext: RPC_NS_HANDLE, IfId: uint.Δ, MemberName: ushort.Δ.Δ, Priority: ulong.Δ, Annotation: ushort.Δ.Δ } ],
  RpcNsProfileEltInqDone: [ long, { InquiryContext: VoidT.Δ.Δ } ],
  RpcNsEntryObjectInqBeginA: [ long, { EntryNameSyntax: ulong, EntryName: RPC_CSTR, InquiryContext: VoidT.Δ.Δ } ],
  RpcNsEntryObjectInqBeginW: [ long, { EntryNameSyntax: ulong, EntryName: RPC_WSTR, InquiryContext: VoidT.Δ.Δ } ],
  RpcNsEntryObjectInqNext: [ long, { InquiryContext: RPC_NS_HANDLE, ObjUuid: uint.Δ } ],
  RpcNsEntryObjectInqDone: [ long, { InquiryContext: VoidT.Δ.Δ } ],
  RpcNsEntryExpandNameA: [ long, { EntryNameSyntax: ulong, EntryName: RPC_CSTR, ExpandedName: uchar.Δ.Δ } ],
  RpcNsMgmtBindingUnexportA: [ long, { EntryNameSyntax: ulong, EntryName: RPC_CSTR, IfId: uint.Δ, VersOption: ulong, ObjectUuidVec: uint.Δ } ],
  RpcNsMgmtEntryCreateA: [ long, { EntryNameSyntax: ulong, EntryName: RPC_CSTR } ],
  RpcNsMgmtEntryDeleteA: [ long, { EntryNameSyntax: ulong, EntryName: RPC_CSTR } ],
  RpcNsMgmtEntryInqIfIdsA: [ long, { EntryNameSyntax: ulong, EntryName: RPC_CSTR, IfIdVec: uint.Δ.Δ } ],
  RpcNsMgmtHandleSetExpAge: [ long, { NsHandle: RPC_NS_HANDLE, ExpirationAge: ulong } ],
  RpcNsMgmtInqExpAge: [ long, { ExpirationAge: ulong.Δ } ],
  RpcNsMgmtSetExpAge: [ long, { ExpirationAge: ulong } ],
  RpcNsEntryExpandNameW: [ long, { EntryNameSyntax: ulong, EntryName: RPC_WSTR, ExpandedName: ushort.Δ.Δ } ],
  RpcNsMgmtBindingUnexportW: [ long, { EntryNameSyntax: ulong, EntryName: RPC_WSTR, IfId: uint.Δ, VersOption: ulong, ObjectUuidVec: uint.Δ } ],
  RpcNsMgmtEntryCreateW: [ long, { EntryNameSyntax: ulong, EntryName: RPC_WSTR } ],
  RpcNsMgmtEntryDeleteW: [ long, { EntryNameSyntax: ulong, EntryName: RPC_WSTR } ],
  RpcNsMgmtEntryInqIfIdsW: [ long, { EntryNameSyntax: ulong, EntryName: RPC_WSTR, IfIdVec: uint.Δ.Δ } ],
  RpcNsBindingImportBeginA: [ long, { EntryNameSyntax: ulong, EntryName: RPC_CSTR, IfSpec: RPC_IF_HANDLE, ObjUuid: uint.Δ, ImportContext: VoidT.Δ.Δ } ],
  RpcNsBindingImportBeginW: [ long, { EntryNameSyntax: ulong, EntryName: RPC_WSTR, IfSpec: RPC_IF_HANDLE, ObjUuid: uint.Δ, ImportContext: VoidT.Δ.Δ } ],
  RpcNsBindingImportNext: [ long, { ImportContext: RPC_NS_HANDLE, Binding: VoidT.Δ.Δ } ],
  RpcNsBindingImportDone: [ long, { ImportContext: VoidT.Δ.Δ } ],
  RpcNsBindingSelect: [ long, { BindingVec: uint.Δ, Binding: VoidT.Δ.Δ } ],
  RpcAsyncInitializeHandle: [ long, { pAsync: PRPC_ASYNC_STATE, Size: uint } ],
  RpcAsyncRegisterInfo: [ long, { pAsync: PRPC_ASYNC_STATE } ],
  RpcAsyncGetCallStatus: [ long, { pAsync: PRPC_ASYNC_STATE } ],
  RpcAsyncCompleteCall: [ long, { pAsync: PRPC_ASYNC_STATE, Reply: VoidT.Δ } ],
  RpcAsyncAbortCall: [ long, { pAsync: PRPC_ASYNC_STATE, ExceptionCode: ulong } ],
  RpcAsyncCancelCall: [ long, { pAsync: PRPC_ASYNC_STATE, fAbort: BOOL } ],
  RpcErrorStartEnumeration: [ long, { EnumHandle: uint.Δ } ],
  RpcErrorGetNextRecord: [ long, { EnumHandle: uint.Δ, CopyStrings: BOOL, ErrorInfo: uint.Δ } ],
  RpcErrorEndEnumeration: [ long, { EnumHandle: uint.Δ } ],
  RpcErrorResetEnumeration: [ long, { EnumHandle: uint.Δ } ],
  RpcErrorGetNumberOfRecords: [ long, { EnumHandle: uint.Δ, Records: int.Δ } ],
  RpcErrorSaveErrorInfo: [ long, { EnumHandle: uint.Δ, ErrorBlob: VoidT.Δ.Δ, BlobSize: uint.Δ } ],
  RpcErrorLoadErrorInfo: [ long, { ErrorBlob: PVOID, BlobSize: size_t, EnumHandle: uint.Δ } ],
  RpcErrorAddRecord: [ long, { ErrorInfo: uint.Δ } ],
  RpcErrorClearInformation: [ VoidT, {  } ],
  RpcAsyncCleanupThread: [ long, { dwTimeout: DWORD } ],
  RpcGetAuthorizationContextForClient: [ long, { ClientBinding: RPC_BINDING_HANDLE, ImpersonateOnReturn: BOOL, Reserved1: PVOID, pExpirationTime: PLARGE_INTEGER, Reserved2: LUID, Reserved3: DWORD, Reserved4: PVOID, pAuthzClientContext: VoidT.Δ.Δ } ],
  RpcFreeAuthorizationContext: [ long, { pAuthzClientContext: VoidT.Δ.Δ } ],
  RpcSsContextLockExclusive: [ long, { ServerBindingHandle: RPC_BINDING_HANDLE, UserContext: PVOID } ],
  RpcSsContextLockShared: [ long, { ServerBindingHandle: RPC_BINDING_HANDLE, UserContext: PVOID } ],
  RpcServerInqCallAttributesW: [ long, { ClientBinding: RPC_BINDING_HANDLE, RpcCallAttributes: VoidT.Δ } ],
  RpcServerInqCallAttributesA: [ long, { ClientBinding: RPC_BINDING_HANDLE, RpcCallAttributes: VoidT.Δ } ],
  RpcServerSubscribeForNotification: [ long, { Binding: RPC_BINDING_HANDLE, Notification: RPC_NOTIFICATIONS, NotificationType: RPC_NOTIFICATION_TYPES, NotificationInfo: uint.Δ } ],
  RpcServerUnsubscribeForNotification: [ long, { Binding: RPC_BINDING_HANDLE, Notification: RPC_NOTIFICATIONS, NotificationsQueued: ulong.Δ } ],
  RpcBindingBind: [ long, { pAsync: PRPC_ASYNC_STATE, Binding: RPC_BINDING_HANDLE, IfSpec: RPC_IF_HANDLE } ],
  RpcBindingUnbind: [ long, { Binding: RPC_BINDING_HANDLE } ],
  RpcDiagnoseError: [ long, { BindingHandle: RPC_BINDING_HANDLE, IfSpec: RPC_IF_HANDLE, RpcStatus: RPC_STATUS, EnumHandle: uint.Δ, Options: ULONG, ParentWindow: HWND } ],
  I_RpcAsyncSetHandle: [ long, { Message: PRPC_MESSAGE, pAsync: PRPC_ASYNC_STATE } ],
  I_RpcAsyncAbortCall: [ long, { pAsync: PRPC_ASYNC_STATE, ExceptionCode: ulong } ],
  I_RpcExceptionFilter: [ VoidT, { ExceptionCode: ulong } ],
  DragQueryFileA: [ uint, { hDrop: HDROP, iFile: UINT, lpszFile: LPSTR, cch: UINT } ],
  DragQueryFileW: [ uint, { hDrop: HDROP, iFile: UINT, lpszFile: LPWSTR, cch: UINT } ],
  DragQueryPoint: [ int, { hDrop: HDROP, lppt: LPPOINT } ],
  DragFinish: [ VoidT, { hDrop: HDROP } ],
  DragAcceptFiles: [ VoidT, { hWnd: HWND, fAccept: BOOL } ],
  ShellExecuteA: [ VOIDPTR, { hwnd: HWND, lpOperation: LPCSTR, lpFile: LPCSTR, lpParameters: LPCSTR, lpDirectory: LPCSTR, nShowCmd: INT } ],
  ShellExecuteW: [ VOIDPTR, { hwnd: HWND, lpOperation: LPCWSTR, lpFile: LPCWSTR, lpParameters: LPCWSTR, lpDirectory: LPCWSTR, nShowCmd: INT } ],
  FindExecutableA: [ VOIDPTR, { lpFile: LPCSTR, lpDirectory: LPCSTR, lpResult: LPSTR } ],
  FindExecutableW: [ VOIDPTR, { lpFile: LPCWSTR, lpDirectory: LPCWSTR, lpResult: LPWSTR } ],
  CommandLineToArgvW: [ ushort.Δ, { lpCmdLine: LPCWSTR, pNumArgs: int.Δ } ],
  ShellAboutA: [ int, { hWnd: HWND, szApp: LPCSTR, szOtherStuff: LPCSTR, hIcon: HICON } ],
  ShellAboutW: [ int, { hWnd: HWND, szApp: LPCWSTR, szOtherStuff: LPCWSTR, hIcon: HICON } ],
  DuplicateIcon: [ VOIDPTR, { hInst: HINSTANCE, hIcon: HICON } ],
  ExtractAssociatedIconA: [ VOIDPTR, { hInst: HINSTANCE, pszIconPath: LPSTR, piIcon: ushort.Δ } ],
  ExtractAssociatedIconW: [ VOIDPTR, { hInst: HINSTANCE, pszIconPath: LPWSTR, piIcon: ushort.Δ } ],
  ExtractAssociatedIconExA: [ VOIDPTR, { hInst: HINSTANCE, pszIconPath: LPSTR, piIconIndex: ushort.Δ, piIconId: ushort.Δ } ],
  ExtractAssociatedIconExW: [ VOIDPTR, { hInst: HINSTANCE, pszIconPath: LPWSTR, piIconIndex: ushort.Δ, piIconId: ushort.Δ } ],
  ExtractIconA: [ VOIDPTR, { hInst: HINSTANCE, lpszExeFileName: LPCSTR, nIconIndex: UINT } ],
  ExtractIconW: [ VOIDPTR, { hInst: HINSTANCE, lpszExeFileName: LPCWSTR, nIconIndex: UINT } ],
  SHAppBarMessage: [ uint, { dwMessage: DWORD, pData: PAPPBARDATA } ],
  DoEnvironmentSubstA: [ ulong, { szString: LPSTR, cchString: UINT } ],
  DoEnvironmentSubstW: [ ulong, { szString: LPWSTR, cchString: UINT } ],
  ExtractIconExA: [ uint, { lpszFile: LPCSTR, nIconIndex: int, phiconLarge: VOIDPTR.Δ, phiconSmall: VOIDPTR.Δ, nIcons: UINT } ],
  ExtractIconExW: [ uint, { lpszFile: LPCWSTR, nIconIndex: int, phiconLarge: VOIDPTR.Δ, phiconSmall: VOIDPTR.Δ, nIcons: UINT } ],
  SHFileOperationA: [ VoidT, { lpFileOp: LPSHFILEOPSTRUCTA } ],
  SHFileOperationW: [ VoidT, { lpFileOp: LPSHFILEOPSTRUCTW } ],
  SHFreeNameMappings: [ VoidT, { hNameMappings: HANDLE } ],
  ShellExecuteExA: [ int, { pExecInfo: uint.Δ } ],
  ShellExecuteExW: [ int, { pExecInfo: uint.Δ } ],
  SHCreateProcessAsUserW: [ int, { pscpi: PSHCREATEPROCESSINFOW } ],
  SHEvaluateSystemCommandTemplate: [ long, { pszCmdTemplate: PCWSTR, ppszApplication: ushort.Δ.Δ, ppszCommandLine: ushort.Δ.Δ, ppszParameters: ushort.Δ.Δ } ],
  AssocCreateForClasses: [ long, { rgClasses: uint.Δ, cClasses: ULONG, riid: uint.Δ, ppv: VoidT.Δ.Δ } ],
  SHQueryRecycleBinA: [ long, { pszRootPath: LPCSTR, pSHQueryRBInfo: LPSHQUERYRBINFO } ],
  SHQueryRecycleBinW: [ long, { pszRootPath: LPCWSTR, pSHQueryRBInfo: LPSHQUERYRBINFO } ],
  SHEmptyRecycleBinA: [ long, { hwnd: HWND, pszRootPath: LPCSTR, dwFlags: DWORD } ],
  SHEmptyRecycleBinW: [ long, { hwnd: HWND, pszRootPath: LPCWSTR, dwFlags: DWORD } ],
  SHQueryUserNotificationState: [ long, { pquns: uint.Δ } ],
  SHGetPropertyStoreForWindow: [ long, { hwnd: HWND, riid: uint.Δ, ppv: VoidT.Δ.Δ } ],
  Shell_NotifyIconA: [ int, { dwMessage: DWORD, lpData: PNOTIFYICONDATAA } ],
  Shell_NotifyIconW: [ int, { dwMessage: DWORD, lpData: PNOTIFYICONDATAW } ],
  Shell_NotifyIconGetRect: [ long, { identifier: uint.Δ, iconLocation: uint.Δ } ],
  SHGetFileInfoA: [ ulong, { pszPath: LPCSTR, dwFileAttributes: DWORD, psfi: uint.Δ, cbFileInfo: UINT, uFlags: UINT } ],
  SHGetFileInfoW: [ ulong, { pszPath: LPCWSTR, dwFileAttributes: DWORD, psfi: uint.Δ, cbFileInfo: UINT, uFlags: UINT } ],
  SHGetStockIconInfo: [ long, { siid: SHSTOCKICONID, uFlags: UINT, psii: uint.Δ } ],
  SHGetDiskFreeSpaceExA: [ int, { pszDirectoryName: LPCSTR, pulFreeBytesAvailableToCaller: uint.Δ, pulTotalNumberOfBytes: uint.Δ, pulTotalNumberOfFreeBytes: uint.Δ } ],
  SHGetDiskFreeSpaceExW: [ int, { pszDirectoryName: LPCWSTR, pulFreeBytesAvailableToCaller: uint.Δ, pulTotalNumberOfBytes: uint.Δ, pulTotalNumberOfFreeBytes: uint.Δ } ],
  SHGetNewLinkInfoA: [ int, { pszLinkTo: LPCSTR, pszDir: LPCSTR, pszName: LPSTR, pfMustCopy: int.Δ, uFlags: UINT } ],
  SHGetNewLinkInfoW: [ int, { pszLinkTo: LPCWSTR, pszDir: LPCWSTR, pszName: LPWSTR, pfMustCopy: int.Δ, uFlags: UINT } ],
  SHInvokePrinterCommandA: [ int, { hwnd: HWND, uAction: UINT, lpBuf1: LPCSTR, lpBuf2: LPCSTR, fModal: BOOL } ],
  SHInvokePrinterCommandW: [ int, { hwnd: HWND, uAction: UINT, lpBuf1: LPCWSTR, lpBuf2: LPCWSTR, fModal: BOOL } ],
  SHLoadNonloadedIconOverlayIdentifiers: [ long, {  } ],
  SHIsFileAvailableOffline: [ long, { pwszPath: LPCWSTR, pdwStatus: LPDWORD } ],
  SHSetLocalizedName: [ long, { pszPath: LPCWSTR, pszResModule: LPCWSTR, idsRes: int } ],
  SHRemoveLocalizedName: [ long, { pszPath: LPCWSTR } ],
  SHGetLocalizedName: [ long, { pszPath: LPCWSTR, pszResModule: LPWSTR, cch: UINT, pidsRes: int.Δ } ],
  ShellMessageBoxA: [ VoidT, { hAppInst: HINSTANCE, hWnd: HWND, lpcText: LPCSTR, lpcTitle: LPCSTR, fuStyle: UINT } ],
  ShellMessageBoxW: [ VoidT, { hAppInst: HINSTANCE, hWnd: HWND, lpcText: LPCWSTR, lpcTitle: LPCWSTR, fuStyle: UINT } ],
  IsLFNDriveA: [ int, { pszPath: LPCSTR } ],
  IsLFNDriveW: [ int, { pszPath: LPCWSTR } ],
  SHEnumerateUnreadMailAccountsA: [ long, { hKeyUser: HKEY, dwIndex: DWORD, pszMailAddress: LPSTR, cchMailAddress: int } ],
  SHEnumerateUnreadMailAccountsW: [ long, { hKeyUser: HKEY, dwIndex: DWORD, pszMailAddress: LPWSTR, cchMailAddress: int } ],
  SHGetUnreadMailCountA: [ long, { hKeyUser: HKEY, pszMailAddress: LPCSTR, pdwCount: ulong.Δ, pFileTime: uint.Δ, pszShellExecuteCommand: LPSTR, cchShellExecuteCommand: int } ],
  SHGetUnreadMailCountW: [ long, { hKeyUser: HKEY, pszMailAddress: LPCWSTR, pdwCount: ulong.Δ, pFileTime: uint.Δ, pszShellExecuteCommand: LPWSTR, cchShellExecuteCommand: int } ],
  SHSetUnreadMailCountA: [ long, { pszMailAddress: LPCSTR, dwCount: DWORD, pszShellExecuteCommand: LPCSTR } ],
  SHSetUnreadMailCountW: [ long, { pszMailAddress: LPCWSTR, dwCount: DWORD, pszShellExecuteCommand: LPCWSTR } ],
  SHTestTokenMembership: [ int, { hToken: HANDLE, ulRID: ULONG } ],
  SHGetImageList: [ long, { iImageList: int, riid: uint.Δ, ppvObj: VoidT.Δ.Δ } ],
  InitNetworkAddressControl: [ int, {  } ],
  SHGetDriveMedia: [ long, { pszDrive: LPCWSTR, pdwMediaContent: ulong.Δ } ],
  __WSAFDIsSet: [ VoidT, { uint.Δ: uint.Δ } ],
  accept: [ uint, { s: SOCKET, addr: sockaddr.Δ, addrlen: int.Δ } ],
  bind: [ VoidT, { s: SOCKET, addr: sockaddr.Δ, namelen: int } ],
  closesocket: [ VoidT, { s: SOCKET } ],
  connect: [ VoidT, { s: SOCKET, name: sockaddr.Δ, namelen: int } ],
  ioctlsocket: [ VoidT, { s: SOCKET, cmd: long, argp: ulong.Δ } ],
  getpeername: [ VoidT, { s: SOCKET, name: sockaddr.Δ, namelen: int.Δ } ],
  getsockname: [ VoidT, { s: SOCKET, name: sockaddr.Δ, namelen: int.Δ } ],
  getsockopt: [ VoidT, { s: SOCKET, level: int, optname: int, optval: int8.Δ, optlen: int.Δ } ],
  htonl: [ ulong, { hostlong: u_long } ],
  htons: [ ushort, { hostshort: u_short } ],
  inet_addr: [ VoidT, { cp: int8.Δ } ],
  inet_ntoa: [ VoidT, { in: IN_ADDR } ],
  listen: [ VoidT, { s: SOCKET, backlog: int } ],
  ntohl: [ ulong, { netlong: u_long } ],
  ntohs: [ ushort, { netshort: u_short } ],
  recv: [ VoidT, { s: SOCKET, buf: int8.Δ, len: int, flags: int } ],
  recvfrom: [ VoidT, { s: SOCKET, buf: int8.Δ, len: int, flags: int, from: sockaddr.Δ, fromlen: int.Δ } ],
  select: [ VoidT, { nfds: int, readfds: uint.Δ, writefds: uint.Δ, exceptfds: uint.Δ, timeout: timeval.Δ } ],
  send: [ VoidT, { s: SOCKET, buf: int8.Δ, len: int, flags: int } ],
  sendto: [ VoidT, { s: SOCKET, buf: int8.Δ, len: int, flags: int, to: sockaddr.Δ, tolen: int } ],
  setsockopt: [ VoidT, { s: SOCKET, level: int, optname: int, optval: int8.Δ, optlen: int } ],
  shutdown: [ VoidT, { s: SOCKET, how: int } ],
  socket: [ uint, { af: int, type: int, protocol: int } ],
  gethostbyaddr: [ hostent, { addr: int8.Δ, len: int, type: int } ],
  gethostbyname: [ hostent, { name: int8.Δ } ],
  gethostname: [ VoidT, { name: int8.Δ, namelen: int } ],
  getservbyport: [ servent, { port: int, proto: int8.Δ } ],
  getservbyname: [ servent, { name: int8.Δ, proto: int8.Δ } ],
  getprotobynumber: [ protoent, { proto: int } ],
  getprotobyname: [ protoent, { name: int8.Δ } ],
  WSAStartup: [ VoidT, { wVersionRequired: WORD, lpWSAData: LPWSADATA } ],
  WSACleanup: [ VoidT, {  } ],
  WSASetLastError: [ VoidT, { iError: int } ],
  WSAGetLastError: [ VoidT, {  } ],
  WSAIsBlocking: [ int, {  } ],
  WSAUnhookBlockingHook: [ VoidT, {  } ],
  WSASetBlockingHook: [ VOIDPTR, { lpBlockFunc: FARPROC } ],
  WSACancelBlockingCall: [ VoidT, {  } ],
  WSAAsyncGetServByName: [ VoidT.Δ, { hWnd: HWND, wMsg: u_int, name: int8.Δ, proto: int8.Δ, buf: int8.Δ, buflen: int } ],
  WSAAsyncGetServByPort: [ VoidT.Δ, { hWnd: HWND, wMsg: u_int, port: int, proto: int8.Δ, buf: int8.Δ, buflen: int } ],
  WSAAsyncGetProtoByName: [ VoidT.Δ, { hWnd: HWND, wMsg: u_int, name: int8.Δ, buf: int8.Δ, buflen: int } ],
  WSAAsyncGetProtoByNumber: [ VoidT.Δ, { hWnd: HWND, wMsg: u_int, number: int, buf: int8.Δ, buflen: int } ],
  WSAAsyncGetHostByName: [ VoidT.Δ, { hWnd: HWND, wMsg: u_int, name: int8.Δ, buf: int8.Δ, buflen: int } ],
  WSAAsyncGetHostByAddr: [ VoidT.Δ, { hWnd: HWND, wMsg: u_int, addr: int8.Δ, len: int, type: int, buf: int8.Δ, buflen: int } ],
  WSACancelAsyncRequest: [ VoidT, { hAsyncTaskHandle: HANDLE } ],
  WSAAsyncSelect: [ VoidT, { s: SOCKET, hWnd: HWND, wMsg: u_int, lEvent: long } ],
  WSARecvEx: [ VoidT, { s: SOCKET, buf: int8.Δ, len: int, flags: int.Δ } ],
  TransmitFile: [ int, { hSocket: SOCKET, hFile: HANDLE, nNumberOfBytesToWrite: DWORD, nNumberOfBytesPerSend: DWORD, lpOverlapped: LPOVERLAPPED, lpTransmitBuffers: LPTRANSMIT_FILE_BUFFERS, dwReserved: DWORD } ],
  AcceptEx: [ int, { sListenSocket: SOCKET, sAcceptSocket: SOCKET, lpOutputBuffer: PVOID, dwReceiveDataLength: DWORD, dwLocalAddressLength: DWORD, dwRemoteAddressLength: DWORD, lpdwBytesReceived: LPDWORD, lpOverlapped: LPOVERLAPPED } ],
  GetAcceptExSockaddrs: [ VoidT, { lpOutputBuffer: PVOID, dwReceiveDataLength: DWORD, dwLocalAddressLength: DWORD, dwRemoteAddressLength: DWORD, LocalSockaddr: sockaddr.Δ.Δ, LocalSockaddrLength: LPINT, RemoteSockaddr: sockaddr.Δ.Δ, RemoteSockaddrLength: LPINT } ],
  CryptAcquireContextA: [ int, { phProv: ulong.Δ, szContainer: LPCSTR, szProvider: LPCSTR, dwProvType: DWORD, dwFlags: DWORD } ],
  CryptAcquireContextW: [ int, { phProv: ulong.Δ, szContainer: LPCWSTR, szProvider: LPCWSTR, dwProvType: DWORD, dwFlags: DWORD } ],
  CryptReleaseContext: [ int, { hProv: HCRYPTPROV, dwFlags: DWORD } ],
  CryptGenKey: [ int, { hProv: HCRYPTPROV, Algid: ALG_ID, dwFlags: DWORD, phKey: ulong.Δ } ],
  CryptDeriveKey: [ int, { hProv: HCRYPTPROV, Algid: ALG_ID, hBaseData: HCRYPTHASH, dwFlags: DWORD, phKey: ulong.Δ } ],
  CryptDestroyKey: [ int, { hKey: HCRYPTKEY } ],
  CryptSetKeyParam: [ int, { hKey: HCRYPTKEY, dwParam: DWORD, pbData: uchar.Δ, dwFlags: DWORD } ],
  CryptGetKeyParam: [ int, { hKey: HCRYPTKEY, dwParam: DWORD, pbData: uchar.Δ, pdwDataLen: ulong.Δ, dwFlags: DWORD } ],
  CryptSetHashParam: [ int, { hHash: HCRYPTHASH, dwParam: DWORD, pbData: uchar.Δ, dwFlags: DWORD } ],
  CryptGetHashParam: [ int, { hHash: HCRYPTHASH, dwParam: DWORD, pbData: uchar.Δ, pdwDataLen: ulong.Δ, dwFlags: DWORD } ],
  CryptSetProvParam: [ int, { hProv: HCRYPTPROV, dwParam: DWORD, pbData: uchar.Δ, dwFlags: DWORD } ],
  CryptGetProvParam: [ int, { hProv: HCRYPTPROV, dwParam: DWORD, pbData: uchar.Δ, pdwDataLen: ulong.Δ, dwFlags: DWORD } ],
  CryptGenRandom: [ int, { hProv: HCRYPTPROV, dwLen: DWORD, pbBuffer: uchar.Δ } ],
  CryptGetUserKey: [ int, { hProv: HCRYPTPROV, dwKeySpec: DWORD, phUserKey: ulong.Δ } ],
  CryptExportKey: [ int, { hKey: HCRYPTKEY, hExpKey: HCRYPTKEY, dwBlobType: DWORD, dwFlags: DWORD, pbData: uchar.Δ, pdwDataLen: ulong.Δ } ],
  CryptImportKey: [ int, { hProv: HCRYPTPROV, pbData: uchar.Δ, dwDataLen: DWORD, hPubKey: HCRYPTKEY, dwFlags: DWORD, phKey: ulong.Δ } ],
  CryptEncrypt: [ int, { hKey: HCRYPTKEY, hHash: HCRYPTHASH, Final: BOOL, dwFlags: DWORD, pbData: uchar.Δ, pdwDataLen: ulong.Δ, dwBufLen: DWORD } ],
  CryptDecrypt: [ int, { hKey: HCRYPTKEY, hHash: HCRYPTHASH, Final: BOOL, dwFlags: DWORD, pbData: uchar.Δ, pdwDataLen: ulong.Δ } ],
  CryptCreateHash: [ int, { hProv: HCRYPTPROV, Algid: ALG_ID, hKey: HCRYPTKEY, dwFlags: DWORD, phHash: ulong.Δ } ],
  CryptHashData: [ int, { hHash: HCRYPTHASH, pbData: uchar.Δ, dwDataLen: DWORD, dwFlags: DWORD } ],
  CryptHashSessionKey: [ int, { hHash: HCRYPTHASH, hKey: HCRYPTKEY, dwFlags: DWORD } ],
  CryptDestroyHash: [ int, { hHash: HCRYPTHASH } ],
  CryptSignHashA: [ int, { hHash: HCRYPTHASH, dwKeySpec: DWORD, szDescription: LPCSTR, dwFlags: DWORD, pbSignature: uchar.Δ, pdwSigLen: ulong.Δ } ],
  CryptSignHashW: [ int, { hHash: HCRYPTHASH, dwKeySpec: DWORD, szDescription: LPCWSTR, dwFlags: DWORD, pbSignature: uchar.Δ, pdwSigLen: ulong.Δ } ],
  CryptVerifySignatureA: [ int, { hHash: HCRYPTHASH, pbSignature: uchar.Δ, dwSigLen: DWORD, hPubKey: HCRYPTKEY, szDescription: LPCSTR, dwFlags: DWORD } ],
  CryptVerifySignatureW: [ int, { hHash: HCRYPTHASH, pbSignature: uchar.Δ, dwSigLen: DWORD, hPubKey: HCRYPTKEY, szDescription: LPCWSTR, dwFlags: DWORD } ],
  CryptSetProviderA: [ int, { pszProvName: LPCSTR, dwProvType: DWORD } ],
  CryptSetProviderW: [ int, { pszProvName: LPCWSTR, dwProvType: DWORD } ],
  CryptSetProviderExA: [ int, { pszProvName: LPCSTR, dwProvType: DWORD, pdwReserved: ulong.Δ, dwFlags: DWORD } ],
  CryptSetProviderExW: [ int, { pszProvName: LPCWSTR, dwProvType: DWORD, pdwReserved: ulong.Δ, dwFlags: DWORD } ],
  CryptGetDefaultProviderA: [ int, { dwProvType: DWORD, pdwReserved: ulong.Δ, dwFlags: DWORD, pszProvName: LPSTR, pcbProvName: ulong.Δ } ],
  CryptGetDefaultProviderW: [ int, { dwProvType: DWORD, pdwReserved: ulong.Δ, dwFlags: DWORD, pszProvName: LPWSTR, pcbProvName: ulong.Δ } ],
  CryptEnumProviderTypesA: [ int, { dwIndex: DWORD, pdwReserved: ulong.Δ, dwFlags: DWORD, pdwProvType: ulong.Δ, szTypeName: LPSTR, pcbTypeName: ulong.Δ } ],
  CryptEnumProviderTypesW: [ int, { dwIndex: DWORD, pdwReserved: ulong.Δ, dwFlags: DWORD, pdwProvType: ulong.Δ, szTypeName: LPWSTR, pcbTypeName: ulong.Δ } ],
  CryptEnumProvidersA: [ int, { dwIndex: DWORD, pdwReserved: ulong.Δ, dwFlags: DWORD, pdwProvType: ulong.Δ, szProvName: LPSTR, pcbProvName: ulong.Δ } ],
  CryptEnumProvidersW: [ int, { dwIndex: DWORD, pdwReserved: ulong.Δ, dwFlags: DWORD, pdwProvType: ulong.Δ, szProvName: LPWSTR, pcbProvName: ulong.Δ } ],
  CryptContextAddRef: [ int, { hProv: HCRYPTPROV, pdwReserved: ulong.Δ, dwFlags: DWORD } ],
  CryptDuplicateKey: [ int, { hKey: HCRYPTKEY, pdwReserved: ulong.Δ, dwFlags: DWORD, phKey: ulong.Δ } ],
  CryptDuplicateHash: [ int, { hHash: HCRYPTHASH, pdwReserved: ulong.Δ, dwFlags: DWORD, phHash: ulong.Δ } ],
  GetEncSChannel: [ int, { pData: uchar.Δ.Δ, dwDecSize: ulong.Δ } ],
  BCryptOpenAlgorithmProvider: [ long, { phAlgorithm: VoidT.Δ.Δ, pszAlgId: LPCWSTR, pszImplementation: LPCWSTR, dwFlags: ULONG } ],
  BCryptEnumAlgorithms: [ long, { dwAlgOperations: ULONG, pAlgCount: ulong.Δ, ppAlgList: uint.Δ.Δ, dwFlags: ULONG } ],
  BCryptEnumProviders: [ long, { pszAlgId: LPCWSTR, pImplCount: ulong.Δ, ppImplList: uint.Δ.Δ, dwFlags: ULONG } ],
  BCryptGetProperty: [ long, { hObject: BCRYPT_HANDLE, pszProperty: LPCWSTR, pbOutput: PUCHAR, cbOutput: ULONG, pcbResult: ulong.Δ, dwFlags: ULONG } ],
  BCryptSetProperty: [ long, { hObject: BCRYPT_HANDLE, pszProperty: LPCWSTR, pbInput: PUCHAR, cbInput: ULONG, dwFlags: ULONG } ],
  BCryptCloseAlgorithmProvider: [ long, { hAlgorithm: BCRYPT_ALG_HANDLE, dwFlags: ULONG } ],
  BCryptFreeBuffer: [ VoidT, { pvBuffer: PVOID } ],
  BCryptGenerateSymmetricKey: [ long, { hAlgorithm: BCRYPT_ALG_HANDLE, phKey: VoidT.Δ.Δ, pbKeyObject: PUCHAR, cbKeyObject: ULONG, pbSecret: PUCHAR, cbSecret: ULONG, dwFlags: ULONG } ],
  BCryptGenerateKeyPair: [ long, { hAlgorithm: BCRYPT_ALG_HANDLE, phKey: VoidT.Δ.Δ, dwLength: ULONG, dwFlags: ULONG } ],
  BCryptEncrypt: [ long, { hKey: BCRYPT_KEY_HANDLE, pbInput: PUCHAR, cbInput: ULONG, pPaddingInfo: VoidT.Δ, pbIV: PUCHAR, cbIV: ULONG, pbOutput: PUCHAR, cbOutput: ULONG, pcbResult: ulong.Δ, dwFlags: ULONG } ],
  BCryptDecrypt: [ long, { hKey: BCRYPT_KEY_HANDLE, pbInput: PUCHAR, cbInput: ULONG, pPaddingInfo: VoidT.Δ, pbIV: PUCHAR, cbIV: ULONG, pbOutput: PUCHAR, cbOutput: ULONG, pcbResult: ulong.Δ, dwFlags: ULONG } ],
  BCryptExportKey: [ long, { hKey: BCRYPT_KEY_HANDLE, hExportKey: BCRYPT_KEY_HANDLE, pszBlobType: LPCWSTR, pbOutput: PUCHAR, cbOutput: ULONG, pcbResult: ulong.Δ, dwFlags: ULONG } ],
  BCryptImportKey: [ long, { hAlgorithm: BCRYPT_ALG_HANDLE, hImportKey: BCRYPT_KEY_HANDLE, pszBlobType: LPCWSTR, phKey: VoidT.Δ.Δ, pbKeyObject: PUCHAR, cbKeyObject: ULONG, pbInput: PUCHAR, cbInput: ULONG, dwFlags: ULONG } ],
  BCryptImportKeyPair: [ long, { hAlgorithm: BCRYPT_ALG_HANDLE, hImportKey: BCRYPT_KEY_HANDLE, pszBlobType: LPCWSTR, phKey: VoidT.Δ.Δ, pbInput: PUCHAR, cbInput: ULONG, dwFlags: ULONG } ],
  BCryptDuplicateKey: [ long, { hKey: BCRYPT_KEY_HANDLE, phNewKey: VoidT.Δ.Δ, pbKeyObject: PUCHAR, cbKeyObject: ULONG, dwFlags: ULONG } ],
  BCryptFinalizeKeyPair: [ long, { hKey: BCRYPT_KEY_HANDLE, dwFlags: ULONG } ],
  BCryptDestroyKey: [ long, { hKey: BCRYPT_KEY_HANDLE } ],
  BCryptDestroySecret: [ long, { hSecret: BCRYPT_SECRET_HANDLE } ],
  BCryptSignHash: [ long, { hKey: BCRYPT_KEY_HANDLE, pPaddingInfo: VoidT.Δ, pbInput: PUCHAR, cbInput: ULONG, pbOutput: PUCHAR, cbOutput: ULONG, pcbResult: ulong.Δ, dwFlags: ULONG } ],
  BCryptVerifySignature: [ long, { hKey: BCRYPT_KEY_HANDLE, pPaddingInfo: VoidT.Δ, pbHash: PUCHAR, cbHash: ULONG, pbSignature: PUCHAR, cbSignature: ULONG, dwFlags: ULONG } ],
  BCryptSecretAgreement: [ long, { hPrivKey: BCRYPT_KEY_HANDLE, hPubKey: BCRYPT_KEY_HANDLE, phAgreedSecret: VoidT.Δ.Δ, dwFlags: ULONG } ],
  BCryptDeriveKey: [ long, { hSharedSecret: BCRYPT_SECRET_HANDLE, pwszKDF: LPCWSTR, pParameterList: uint.Δ, pbDerivedKey: PUCHAR, cbDerivedKey: ULONG, pcbResult: ulong.Δ, dwFlags: ULONG } ],
  BCryptCreateHash: [ long, { hAlgorithm: BCRYPT_ALG_HANDLE, phHash: VoidT.Δ.Δ, pbHashObject: PUCHAR, cbHashObject: ULONG, pbSecret: PUCHAR, cbSecret: ULONG, dwFlags: ULONG } ],
  BCryptHashData: [ long, { hHash: BCRYPT_HASH_HANDLE, pbInput: PUCHAR, cbInput: ULONG, dwFlags: ULONG } ],
  BCryptFinishHash: [ long, { hHash: BCRYPT_HASH_HANDLE, pbOutput: PUCHAR, cbOutput: ULONG, dwFlags: ULONG } ],
  BCryptDuplicateHash: [ long, { hHash: BCRYPT_HASH_HANDLE, phNewHash: VoidT.Δ.Δ, pbHashObject: PUCHAR, cbHashObject: ULONG, dwFlags: ULONG } ],
  BCryptDestroyHash: [ long, { hHash: BCRYPT_HASH_HANDLE } ],
  BCryptGenRandom: [ long, { hAlgorithm: BCRYPT_ALG_HANDLE, pbBuffer: PUCHAR, cbBuffer: ULONG, dwFlags: ULONG } ],
  BCryptDeriveKeyCapi: [ long, { hHash: BCRYPT_HASH_HANDLE, hTargetAlg: BCRYPT_ALG_HANDLE, pbDerivedKey: PUCHAR, cbDerivedKey: ULONG, dwFlags: ULONG } ],
  BCryptDeriveKeyPBKDF2: [ long, { hPrf: BCRYPT_ALG_HANDLE, pbPassword: PUCHAR, cbPassword: ULONG, pbSalt: PUCHAR, cbSalt: ULONG, cIterations: ULONGLONG, pbDerivedKey: PUCHAR, cbDerivedKey: ULONG, dwFlags: ULONG } ],
  BCryptQueryProviderRegistration: [ long, { pszProvider: LPCWSTR, dwMode: ULONG, dwInterface: ULONG, pcbBuffer: ulong.Δ, ppBuffer: VOIDPTR.Δ } ],
  BCryptEnumRegisteredProviders: [ long, { pcbBuffer: ulong.Δ, ppBuffer: VOIDPTR.Δ } ],
  BCryptCreateContext: [ long, { dwTable: ULONG, pszContext: LPCWSTR, pConfig: PCRYPT_CONTEXT_CONFIG } ],
  BCryptDeleteContext: [ long, { dwTable: ULONG, pszContext: LPCWSTR } ],
  BCryptEnumContexts: [ long, { dwTable: ULONG, pcbBuffer: ulong.Δ, ppBuffer: VOIDPTR.Δ } ],
  BCryptConfigureContext: [ long, { dwTable: ULONG, pszContext: LPCWSTR, pConfig: PCRYPT_CONTEXT_CONFIG } ],
  BCryptQueryContextConfiguration: [ long, { dwTable: ULONG, pszContext: LPCWSTR, pcbBuffer: ulong.Δ, ppBuffer: VOIDPTR.Δ } ],
  BCryptAddContextFunction: [ long, { dwTable: ULONG, pszContext: LPCWSTR, dwInterface: ULONG, pszFunction: LPCWSTR, dwPosition: ULONG } ],
  BCryptRemoveContextFunction: [ long, { dwTable: ULONG, pszContext: LPCWSTR, dwInterface: ULONG, pszFunction: LPCWSTR } ],
  BCryptEnumContextFunctions: [ long, { dwTable: ULONG, pszContext: LPCWSTR, dwInterface: ULONG, pcbBuffer: ulong.Δ, ppBuffer: VOIDPTR.Δ } ],
  BCryptConfigureContextFunction: [ long, { dwTable: ULONG, pszContext: LPCWSTR, dwInterface: ULONG, pszFunction: LPCWSTR, pConfig: PCRYPT_CONTEXT_FUNCTION_CONFIG } ],
  BCryptQueryContextFunctionConfiguration: [ long, { dwTable: ULONG, pszContext: LPCWSTR, dwInterface: ULONG, pszFunction: LPCWSTR, pcbBuffer: ulong.Δ, ppBuffer: VOIDPTR.Δ } ],
  BCryptEnumContextFunctionProviders: [ long, { dwTable: ULONG, pszContext: LPCWSTR, dwInterface: ULONG, pszFunction: LPCWSTR, pcbBuffer: ulong.Δ, ppBuffer: VOIDPTR.Δ } ],
  BCryptSetContextFunctionProperty: [ long, { dwTable: ULONG, pszContext: LPCWSTR, dwInterface: ULONG, pszFunction: LPCWSTR, pszProperty: LPCWSTR, cbValue: ULONG, pbValue: PUCHAR } ],
  BCryptQueryContextFunctionProperty: [ long, { dwTable: ULONG, pszContext: LPCWSTR, dwInterface: ULONG, pszFunction: LPCWSTR, pszProperty: LPCWSTR, pcbValue: ulong.Δ, ppbValue: uchar.Δ.Δ } ],
  BCryptRegisterConfigChangeNotify: [ long, { phEvent: VoidT.Δ.Δ } ],
  BCryptUnregisterConfigChangeNotify: [ long, { hEvent: HANDLE } ],
  BCryptResolveProviders: [ long, { pszContext: LPCWSTR, dwInterface: ULONG, pszFunction: LPCWSTR, pszProvider: LPCWSTR, dwMode: ULONG, dwFlags: ULONG, pcbBuffer: ulong.Δ, ppBuffer: VOIDPTR.Δ } ],
  BCryptGetFipsAlgorithmMode: [ long, { pfEnabled: uchar.Δ } ],
  NCryptOpenStorageProvider: [ long, { phProvider: ulong.Δ, pszProviderName: LPCWSTR, dwFlags: DWORD } ],
  NCryptEnumAlgorithms: [ long, { hProvider: NCRYPT_PROV_HANDLE, dwAlgOperations: DWORD, pdwAlgCount: ulong.Δ, ppAlgList: uint.Δ.Δ, dwFlags: DWORD } ],
  NCryptIsAlgSupported: [ long, { hProvider: NCRYPT_PROV_HANDLE, pszAlgId: LPCWSTR, dwFlags: DWORD } ],
  NCryptEnumKeys: [ long, { hProvider: NCRYPT_PROV_HANDLE, pszScope: LPCWSTR, ppKeyName: uint.Δ.Δ, ppEnumState: VoidT.Δ.Δ, dwFlags: DWORD } ],
  NCryptEnumStorageProviders: [ long, { pdwProviderCount: ulong.Δ, ppProviderList: uint.Δ.Δ, dwFlags: DWORD } ],
  NCryptFreeBuffer: [ long, { pvInput: PVOID } ],
  NCryptOpenKey: [ long, { hProvider: NCRYPT_PROV_HANDLE, phKey: ulong.Δ, pszKeyName: LPCWSTR, dwLegacyKeySpec: DWORD, dwFlags: DWORD } ],
  NCryptCreatePersistedKey: [ long, { hProvider: NCRYPT_PROV_HANDLE, phKey: ulong.Δ, pszAlgId: LPCWSTR, pszKeyName: LPCWSTR, dwLegacyKeySpec: DWORD, dwFlags: DWORD } ],
  NCryptGetProperty: [ long, { hObject: NCRYPT_HANDLE, pszProperty: LPCWSTR, pbOutput: PBYTE, cbOutput: DWORD, pcbResult: ulong.Δ, dwFlags: DWORD } ],
  NCryptSetProperty: [ long, { hObject: NCRYPT_HANDLE, pszProperty: LPCWSTR, pbInput: PBYTE, cbInput: DWORD, dwFlags: DWORD } ],
  NCryptFinalizeKey: [ long, { hKey: NCRYPT_KEY_HANDLE, dwFlags: DWORD } ],
  NCryptEncrypt: [ long, { hKey: NCRYPT_KEY_HANDLE, pbInput: PBYTE, cbInput: DWORD, pPaddingInfo: VoidT.Δ, pbOutput: PBYTE, cbOutput: DWORD, pcbResult: ulong.Δ, dwFlags: DWORD } ],
  NCryptDecrypt: [ long, { hKey: NCRYPT_KEY_HANDLE, pbInput: PBYTE, cbInput: DWORD, pPaddingInfo: VoidT.Δ, pbOutput: PBYTE, cbOutput: DWORD, pcbResult: ulong.Δ, dwFlags: DWORD } ],
  NCryptImportKey: [ long, { hProvider: NCRYPT_PROV_HANDLE, hImportKey: NCRYPT_KEY_HANDLE, pszBlobType: LPCWSTR, pParameterList: uint.Δ, phKey: ulong.Δ, pbData: PBYTE, cbData: DWORD, dwFlags: DWORD } ],
  NCryptExportKey: [ long, { hKey: NCRYPT_KEY_HANDLE, hExportKey: NCRYPT_KEY_HANDLE, pszBlobType: LPCWSTR, pParameterList: uint.Δ, pbOutput: PBYTE, cbOutput: DWORD, pcbResult: ulong.Δ, dwFlags: DWORD } ],
  NCryptSignHash: [ long, { hKey: NCRYPT_KEY_HANDLE, pPaddingInfo: VoidT.Δ, pbHashValue: PBYTE, cbHashValue: DWORD, pbSignature: PBYTE, cbSignature: DWORD, pcbResult: ulong.Δ, dwFlags: DWORD } ],
  NCryptVerifySignature: [ long, { hKey: NCRYPT_KEY_HANDLE, pPaddingInfo: VoidT.Δ, pbHashValue: PBYTE, cbHashValue: DWORD, pbSignature: PBYTE, cbSignature: DWORD, dwFlags: DWORD } ],
  NCryptDeleteKey: [ long, { hKey: NCRYPT_KEY_HANDLE, dwFlags: DWORD } ],
  NCryptFreeObject: [ long, { hObject: NCRYPT_HANDLE } ],
  NCryptIsKeyHandle: [ int, { hKey: NCRYPT_KEY_HANDLE } ],
  NCryptTranslateHandle: [ long, { phProvider: ulong.Δ, phKey: ulong.Δ, hLegacyProv: HCRYPTPROV, hLegacyKey: HCRYPTKEY, dwLegacyKeySpec: DWORD, dwFlags: DWORD } ],
  NCryptNotifyChangeKey: [ long, { hProvider: NCRYPT_PROV_HANDLE, phEvent: VoidT.Δ.Δ, dwFlags: DWORD } ],
  NCryptSecretAgreement: [ long, { hPrivKey: NCRYPT_KEY_HANDLE, hPubKey: NCRYPT_KEY_HANDLE, phAgreedSecret: ulong.Δ, dwFlags: DWORD } ],
  NCryptDeriveKey: [ long, { hSharedSecret: NCRYPT_SECRET_HANDLE, pwszKDF: LPCWSTR, pParameterList: uint.Δ, pbDerivedKey: PBYTE, cbDerivedKey: DWORD, pcbResult: ulong.Δ, dwFlags: ULONG } ],
  CryptFormatObject: [ int, { dwCertEncodingType: DWORD, dwFormatType: DWORD, dwFormatStrType: DWORD, pFormatStruct: VoidT.Δ, lpszStructType: LPCSTR, pbEncoded: uchar.Δ, cbEncoded: DWORD, pbFormat: VoidT.Δ, pcbFormat: ulong.Δ } ],
  CryptEncodeObjectEx: [ int, { dwCertEncodingType: DWORD, lpszStructType: LPCSTR, pvStructInfo: VoidT.Δ, dwFlags: DWORD, pEncodePara: PCRYPT_ENCODE_PARA, pvEncoded: VoidT.Δ, pcbEncoded: ulong.Δ } ],
  CryptEncodeObject: [ int, { dwCertEncodingType: DWORD, lpszStructType: LPCSTR, pvStructInfo: VoidT.Δ, pbEncoded: uchar.Δ, pcbEncoded: ulong.Δ } ],
  CryptDecodeObjectEx: [ int, { dwCertEncodingType: DWORD, lpszStructType: LPCSTR, pbEncoded: uchar.Δ, cbEncoded: DWORD, dwFlags: DWORD, pDecodePara: PCRYPT_DECODE_PARA, pvStructInfo: VoidT.Δ, pcbStructInfo: ulong.Δ } ],
  CryptDecodeObject: [ int, { dwCertEncodingType: DWORD, lpszStructType: LPCSTR, pbEncoded: uchar.Δ, cbEncoded: DWORD, dwFlags: DWORD, pvStructInfo: VoidT.Δ, pcbStructInfo: ulong.Δ } ],
  CryptInstallOIDFunctionAddress: [ int, { hModule: HMODULE, dwEncodingType: DWORD, pszFuncName: LPCSTR, cFuncEntry: DWORD, rgFuncEntry: uint.Δ, dwFlags: DWORD } ],
  CryptInitOIDFunctionSet: [ VoidT.Δ, { pszFuncName: LPCSTR, dwFlags: DWORD } ],
  CryptGetOIDFunctionAddress: [ int, { hFuncSet: HCRYPTOIDFUNCSET, dwEncodingType: DWORD, pszOID: LPCSTR, dwFlags: DWORD, ppvFuncAddr: VoidT.Δ.Δ, phFuncAddr: VoidT.Δ.Δ } ],
  CryptGetDefaultOIDDllList: [ int, { hFuncSet: HCRYPTOIDFUNCSET, dwEncodingType: DWORD, pwszDllList: ushort.Δ, pcchDllList: ulong.Δ } ],
  CryptGetDefaultOIDFunctionAddress: [ int, { hFuncSet: HCRYPTOIDFUNCSET, dwEncodingType: DWORD, pwszDll: LPCWSTR, dwFlags: DWORD, ppvFuncAddr: VoidT.Δ.Δ, phFuncAddr: VoidT.Δ.Δ } ],
  CryptFreeOIDFunctionAddress: [ int, { hFuncAddr: HCRYPTOIDFUNCADDR, dwFlags: DWORD } ],
  CryptRegisterOIDFunction: [ int, { dwEncodingType: DWORD, pszFuncName: LPCSTR, pszOID: LPCSTR, pwszDll: LPCWSTR, pszOverrideFuncName: LPCSTR } ],
  CryptUnregisterOIDFunction: [ int, { dwEncodingType: DWORD, pszFuncName: LPCSTR, pszOID: LPCSTR } ],
  CryptRegisterDefaultOIDFunction: [ int, { dwEncodingType: DWORD, pszFuncName: LPCSTR, dwIndex: DWORD, pwszDll: LPCWSTR } ],
  CryptUnregisterDefaultOIDFunction: [ int, { dwEncodingType: DWORD, pszFuncName: LPCSTR, pwszDll: LPCWSTR } ],
  CryptSetOIDFunctionValue: [ int, { dwEncodingType: DWORD, pszFuncName: LPCSTR, pszOID: LPCSTR, pwszValueName: LPCWSTR, dwValueType: DWORD, pbValueData: uchar.Δ, cbValueData: DWORD } ],
  CryptGetOIDFunctionValue: [ int, { dwEncodingType: DWORD, pszFuncName: LPCSTR, pszOID: LPCSTR, pwszValueName: LPCWSTR, pdwValueType: ulong.Δ, pbValueData: uchar.Δ, pcbValueData: ulong.Δ } ],
  CryptEnumOIDFunction: [ int, { dwEncodingType: DWORD, pszFuncName: LPCSTR, pszOID: LPCSTR, dwFlags: DWORD, pvArg: VoidT.Δ, pfnEnumOIDFunc: PFN_CRYPT_ENUM_OID_FUNC } ],
  CryptFindOIDInfo: [ VOIDPTR, { dwKeyType: DWORD, pvKey: VoidT.Δ, dwGroupId: DWORD } ],
  CryptRegisterOIDInfo: [ int, { pInfo: PCCRYPT_OID_INFO, dwFlags: DWORD } ],
  CryptUnregisterOIDInfo: [ int, { pInfo: PCCRYPT_OID_INFO } ],
  CryptEnumOIDInfo: [ int, { dwGroupId: DWORD, dwFlags: DWORD, pvArg: VoidT.Δ, pfnEnumOIDInfo: PFN_CRYPT_ENUM_OID_INFO } ],
  CryptFindLocalizedName: [ ushort.Δ, { pwszCryptName: LPCWSTR } ],
  CryptMsgOpenToEncode: [ VoidT.Δ, { dwMsgEncodingType: DWORD, dwFlags: DWORD, dwMsgType: DWORD, pvMsgEncodeInfo: VoidT.Δ, pszInnerContentObjID: LPSTR, pStreamInfo: PCMSG_STREAM_INFO } ],
  CryptMsgCalculateEncodedLength: [ ulong, { dwMsgEncodingType: DWORD, dwFlags: DWORD, dwMsgType: DWORD, pvMsgEncodeInfo: VoidT.Δ, pszInnerContentObjID: LPSTR, cbData: DWORD } ],
  CryptMsgOpenToDecode: [ VoidT.Δ, { dwMsgEncodingType: DWORD, dwFlags: DWORD, dwMsgType: DWORD, hCryptProv: HCRYPTPROV_LEGACY, pRecipientInfo: PCERT_INFO, pStreamInfo: PCMSG_STREAM_INFO } ],
  CryptMsgDuplicate: [ VoidT.Δ, { hCryptMsg: HCRYPTMSG } ],
  CryptMsgClose: [ int, { hCryptMsg: HCRYPTMSG } ],
  CryptMsgUpdate: [ int, { hCryptMsg: HCRYPTMSG, pbData: uchar.Δ, cbData: DWORD, fFinal: BOOL } ],
  CryptMsgGetParam: [ int, { hCryptMsg: HCRYPTMSG, dwParamType: DWORD, dwIndex: DWORD, pvData: VoidT.Δ, pcbData: ulong.Δ } ],
  CryptMsgControl: [ int, { hCryptMsg: HCRYPTMSG, dwFlags: DWORD, dwCtrlType: DWORD, pvCtrlPara: VoidT.Δ } ],
  CryptMsgVerifyCountersignatureEncoded: [ int, { hCryptProv: HCRYPTPROV_LEGACY, dwEncodingType: DWORD, pbSignerInfo: PBYTE, cbSignerInfo: DWORD, pbSignerInfoCountersignature: PBYTE, cbSignerInfoCountersignature: DWORD, pciCountersigner: PCERT_INFO } ],
  CryptMsgVerifyCountersignatureEncodedEx: [ int, { hCryptProv: HCRYPTPROV_LEGACY, dwEncodingType: DWORD, pbSignerInfo: PBYTE, cbSignerInfo: DWORD, pbSignerInfoCountersignature: PBYTE, cbSignerInfoCountersignature: DWORD, dwSignerType: DWORD, pvSigner: VoidT.Δ, dwFlags: DWORD, pvReserved: VoidT.Δ } ],
  CryptMsgCountersign: [ int, { hCryptMsg: HCRYPTMSG, dwIndex: DWORD, cCountersigners: DWORD, rgCountersigners: PCMSG_SIGNER_ENCODE_INFO } ],
  CryptMsgCountersignEncoded: [ int, { dwEncodingType: DWORD, pbSignerInfo: PBYTE, cbSignerInfo: DWORD, cCountersigners: DWORD, rgCountersigners: PCMSG_SIGNER_ENCODE_INFO, pbCountersignature: PBYTE, pcbCountersignature: PDWORD } ],
  CertOpenStore: [ VoidT.Δ, { lpszStoreProvider: LPCSTR, dwEncodingType: DWORD, hCryptProv: HCRYPTPROV_LEGACY, dwFlags: DWORD, pvPara: VoidT.Δ } ],
  CertDuplicateStore: [ VoidT.Δ, { hCertStore: HCERTSTORE } ],
  CertSaveStore: [ int, { hCertStore: HCERTSTORE, dwEncodingType: DWORD, dwSaveAs: DWORD, dwSaveTo: DWORD, pvSaveToPara: VoidT.Δ, dwFlags: DWORD } ],
  CertCloseStore: [ int, { hCertStore: HCERTSTORE, dwFlags: DWORD } ],
  CertGetSubjectCertificateFromStore: [ VOIDPTR, { hCertStore: HCERTSTORE, dwCertEncodingType: DWORD, pCertId: PCERT_INFO } ],
  CertEnumCertificatesInStore: [ VOIDPTR, { hCertStore: HCERTSTORE, pPrevCertContext: PCCERT_CONTEXT } ],
  CertFindCertificateInStore: [ VOIDPTR, { hCertStore: HCERTSTORE, dwCertEncodingType: DWORD, dwFindFlags: DWORD, dwFindType: DWORD, pvFindPara: VoidT.Δ, pPrevCertContext: PCCERT_CONTEXT } ],
  CertGetIssuerCertificateFromStore: [ VOIDPTR, { hCertStore: HCERTSTORE, pSubjectContext: PCCERT_CONTEXT, pPrevIssuerContext: PCCERT_CONTEXT, pdwFlags: ulong.Δ } ],
  CertVerifySubjectCertificateContext: [ int, { pSubject: PCCERT_CONTEXT, pIssuer: PCCERT_CONTEXT, pdwFlags: ulong.Δ } ],
  CertDuplicateCertificateContext: [ VOIDPTR, { pCertContext: PCCERT_CONTEXT } ],
  CertCreateCertificateContext: [ VOIDPTR, { dwCertEncodingType: DWORD, pbCertEncoded: uchar.Δ, cbCertEncoded: DWORD } ],
  CertFreeCertificateContext: [ int, { pCertContext: PCCERT_CONTEXT } ],
  CertSetCertificateContextProperty: [ int, { pCertContext: PCCERT_CONTEXT, dwPropId: DWORD, dwFlags: DWORD, pvData: VoidT.Δ } ],
  CertGetCertificateContextProperty: [ int, { pCertContext: PCCERT_CONTEXT, dwPropId: DWORD, pvData: VoidT.Δ, pcbData: ulong.Δ } ],
  CertEnumCertificateContextProperties: [ ulong, { pCertContext: PCCERT_CONTEXT, dwPropId: DWORD } ],
  CertCreateCTLEntryFromCertificateContextProperties: [ int, { pCertContext: PCCERT_CONTEXT, cOptAttr: DWORD, rgOptAttr: PCRYPT_ATTRIBUTE, dwFlags: DWORD, pvReserved: VoidT.Δ, pCtlEntry: PCTL_ENTRY, pcbCtlEntry: ulong.Δ } ],
  CertSetCertificateContextPropertiesFromCTLEntry: [ int, { pCertContext: PCCERT_CONTEXT, pCtlEntry: PCTL_ENTRY, dwFlags: DWORD } ],
  CertGetCRLFromStore: [ VOIDPTR, { hCertStore: HCERTSTORE, pIssuerContext: PCCERT_CONTEXT, pPrevCrlContext: PCCRL_CONTEXT, pdwFlags: ulong.Δ } ],
  CertEnumCRLsInStore: [ VOIDPTR, { hCertStore: HCERTSTORE, pPrevCrlContext: PCCRL_CONTEXT } ],
  CertFindCRLInStore: [ VOIDPTR, { hCertStore: HCERTSTORE, dwCertEncodingType: DWORD, dwFindFlags: DWORD, dwFindType: DWORD, pvFindPara: VoidT.Δ, pPrevCrlContext: PCCRL_CONTEXT } ],
  CertDuplicateCRLContext: [ VOIDPTR, { pCrlContext: PCCRL_CONTEXT } ],
  CertCreateCRLContext: [ VOIDPTR, { dwCertEncodingType: DWORD, pbCrlEncoded: uchar.Δ, cbCrlEncoded: DWORD } ],
  CertFreeCRLContext: [ int, { pCrlContext: PCCRL_CONTEXT } ],
  CertSetCRLContextProperty: [ int, { pCrlContext: PCCRL_CONTEXT, dwPropId: DWORD, dwFlags: DWORD, pvData: VoidT.Δ } ],
  CertGetCRLContextProperty: [ int, { pCrlContext: PCCRL_CONTEXT, dwPropId: DWORD, pvData: VoidT.Δ, pcbData: ulong.Δ } ],
  CertEnumCRLContextProperties: [ ulong, { pCrlContext: PCCRL_CONTEXT, dwPropId: DWORD } ],
  CertFindCertificateInCRL: [ int, { pCert: PCCERT_CONTEXT, pCrlContext: PCCRL_CONTEXT, dwFlags: DWORD, pvReserved: VoidT.Δ, ppCrlEntry: VOIDPTR.Δ } ],
  CertIsValidCRLForCertificate: [ int, { pCert: PCCERT_CONTEXT, pCrl: PCCRL_CONTEXT, dwFlags: DWORD, pvReserved: VoidT.Δ } ],
  CertAddEncodedCertificateToStore: [ int, { hCertStore: HCERTSTORE, dwCertEncodingType: DWORD, pbCertEncoded: uchar.Δ, cbCertEncoded: DWORD, dwAddDisposition: DWORD, ppCertContext: VOIDPTR.Δ } ],
  CertAddCertificateContextToStore: [ int, { hCertStore: HCERTSTORE, pCertContext: PCCERT_CONTEXT, dwAddDisposition: DWORD, ppStoreContext: VOIDPTR.Δ } ],
  CertAddSerializedElementToStore: [ int, { hCertStore: HCERTSTORE, pbElement: uchar.Δ, cbElement: DWORD, dwAddDisposition: DWORD, dwFlags: DWORD, dwContextTypeFlags: DWORD, pdwContextType: ulong.Δ, ppvContext: VoidT.Δ.Δ } ],
  CertDeleteCertificateFromStore: [ int, { pCertContext: PCCERT_CONTEXT } ],
  CertAddEncodedCRLToStore: [ int, { hCertStore: HCERTSTORE, dwCertEncodingType: DWORD, pbCrlEncoded: uchar.Δ, cbCrlEncoded: DWORD, dwAddDisposition: DWORD, ppCrlContext: VOIDPTR.Δ } ],
  CertAddCRLContextToStore: [ int, { hCertStore: HCERTSTORE, pCrlContext: PCCRL_CONTEXT, dwAddDisposition: DWORD, ppStoreContext: VOIDPTR.Δ } ],
  CertDeleteCRLFromStore: [ int, { pCrlContext: PCCRL_CONTEXT } ],
  CertSerializeCertificateStoreElement: [ int, { pCertContext: PCCERT_CONTEXT, dwFlags: DWORD, pbElement: uchar.Δ, pcbElement: ulong.Δ } ],
  CertSerializeCRLStoreElement: [ int, { pCrlContext: PCCRL_CONTEXT, dwFlags: DWORD, pbElement: uchar.Δ, pcbElement: ulong.Δ } ],
  CertDuplicateCTLContext: [ VOIDPTR, { pCtlContext: PCCTL_CONTEXT } ],
  CertCreateCTLContext: [ VOIDPTR, { dwMsgAndCertEncodingType: DWORD, pbCtlEncoded: uchar.Δ, cbCtlEncoded: DWORD } ],
  CertFreeCTLContext: [ int, { pCtlContext: PCCTL_CONTEXT } ],
  CertSetCTLContextProperty: [ int, { pCtlContext: PCCTL_CONTEXT, dwPropId: DWORD, dwFlags: DWORD, pvData: VoidT.Δ } ],
  CertGetCTLContextProperty: [ int, { pCtlContext: PCCTL_CONTEXT, dwPropId: DWORD, pvData: VoidT.Δ, pcbData: ulong.Δ } ],
  CertEnumCTLContextProperties: [ ulong, { pCtlContext: PCCTL_CONTEXT, dwPropId: DWORD } ],
  CertEnumCTLsInStore: [ VOIDPTR, { hCertStore: HCERTSTORE, pPrevCtlContext: PCCTL_CONTEXT } ],
  CertFindSubjectInCTL: [ VOIDPTR, { dwEncodingType: DWORD, dwSubjectType: DWORD, pvSubject: VoidT.Δ, pCtlContext: PCCTL_CONTEXT, dwFlags: DWORD } ],
  CertFindCTLInStore: [ VOIDPTR, { hCertStore: HCERTSTORE, dwMsgAndCertEncodingType: DWORD, dwFindFlags: DWORD, dwFindType: DWORD, pvFindPara: VoidT.Δ, pPrevCtlContext: PCCTL_CONTEXT } ],
  CertAddEncodedCTLToStore: [ int, { hCertStore: HCERTSTORE, dwMsgAndCertEncodingType: DWORD, pbCtlEncoded: uchar.Δ, cbCtlEncoded: DWORD, dwAddDisposition: DWORD, ppCtlContext: VOIDPTR.Δ } ],
  CertAddCTLContextToStore: [ int, { hCertStore: HCERTSTORE, pCtlContext: PCCTL_CONTEXT, dwAddDisposition: DWORD, ppStoreContext: VOIDPTR.Δ } ],
  CertSerializeCTLStoreElement: [ int, { pCtlContext: PCCTL_CONTEXT, dwFlags: DWORD, pbElement: uchar.Δ, pcbElement: ulong.Δ } ],
  CertDeleteCTLFromStore: [ int, { pCtlContext: PCCTL_CONTEXT } ],
  CertAddCertificateLinkToStore: [ int, { hCertStore: HCERTSTORE, pCertContext: PCCERT_CONTEXT, dwAddDisposition: DWORD, ppStoreContext: VOIDPTR.Δ } ],
  CertAddCRLLinkToStore: [ int, { hCertStore: HCERTSTORE, pCrlContext: PCCRL_CONTEXT, dwAddDisposition: DWORD, ppStoreContext: VOIDPTR.Δ } ],
  CertAddCTLLinkToStore: [ int, { hCertStore: HCERTSTORE, pCtlContext: PCCTL_CONTEXT, dwAddDisposition: DWORD, ppStoreContext: VOIDPTR.Δ } ],
  CertAddStoreToCollection: [ int, { hCollectionStore: HCERTSTORE, hSiblingStore: HCERTSTORE, dwUpdateFlags: DWORD, dwPriority: DWORD } ],
  CertRemoveStoreFromCollection: [ VoidT, { hCollectionStore: HCERTSTORE, hSiblingStore: HCERTSTORE } ],
  CertControlStore: [ int, { hCertStore: HCERTSTORE, dwFlags: DWORD, dwCtrlType: DWORD, pvCtrlPara: VoidT.Δ } ],
  CertSetStoreProperty: [ int, { hCertStore: HCERTSTORE, dwPropId: DWORD, dwFlags: DWORD, pvData: VoidT.Δ } ],
  CertGetStoreProperty: [ int, { hCertStore: HCERTSTORE, dwPropId: DWORD, pvData: VoidT.Δ, pcbData: ulong.Δ } ],
  CertCreateContext: [ VoidT, { dwContextType: DWORD, dwEncodingType: DWORD, pbEncoded: uchar.Δ, cbEncoded: DWORD, dwFlags: DWORD, pCreatePara: PCERT_CREATE_CONTEXT_PARA } ],
  CertRegisterSystemStore: [ int, { pvSystemStore: VoidT.Δ, dwFlags: DWORD, pStoreInfo: PCERT_SYSTEM_STORE_INFO, pvReserved: VoidT.Δ } ],
  CertRegisterPhysicalStore: [ int, { pvSystemStore: VoidT.Δ, dwFlags: DWORD, pwszStoreName: LPCWSTR, pStoreInfo: PCERT_PHYSICAL_STORE_INFO, pvReserved: VoidT.Δ } ],
  CertUnregisterSystemStore: [ int, { pvSystemStore: VoidT.Δ, dwFlags: DWORD } ],
  CertUnregisterPhysicalStore: [ int, { pvSystemStore: VoidT.Δ, dwFlags: DWORD, pwszStoreName: LPCWSTR } ],
  CertEnumSystemStoreLocation: [ int, { dwFlags: DWORD, pvArg: VoidT.Δ, pfnEnum: PFN_CERT_ENUM_SYSTEM_STORE_LOCATION } ],
  CertEnumSystemStore: [ int, { dwFlags: DWORD, pvSystemStoreLocationPara: VoidT.Δ, pvArg: VoidT.Δ, pfnEnum: PFN_CERT_ENUM_SYSTEM_STORE } ],
  CertEnumPhysicalStore: [ int, { pvSystemStore: VoidT.Δ, dwFlags: DWORD, pvArg: VoidT.Δ, pfnEnum: PFN_CERT_ENUM_PHYSICAL_STORE } ],
  CertGetEnhancedKeyUsage: [ int, { pCertContext: PCCERT_CONTEXT, dwFlags: DWORD, pUsage: PCERT_ENHKEY_USAGE, pcbUsage: ulong.Δ } ],
  CertSetEnhancedKeyUsage: [ int, { pCertContext: PCCERT_CONTEXT, pUsage: PCERT_ENHKEY_USAGE } ],
  CertAddEnhancedKeyUsageIdentifier: [ int, { pCertContext: PCCERT_CONTEXT, pszUsageIdentifier: LPCSTR } ],
  CertRemoveEnhancedKeyUsageIdentifier: [ int, { pCertContext: PCCERT_CONTEXT, pszUsageIdentifier: LPCSTR } ],
  CertGetValidUsages: [ int, { cCerts: DWORD, rghCerts: VOIDPTR.Δ, cNumOIDs: int.Δ, rghOIDs: int8.Δ.Δ, pcbOIDs: ulong.Δ } ],
  CryptMsgGetAndVerifySigner: [ int, { hCryptMsg: HCRYPTMSG, cSignerStore: DWORD, rghSignerStore: VoidT.Δ.Δ, dwFlags: DWORD, ppSigner: VOIDPTR.Δ, pdwSignerIndex: ulong.Δ } ],
  CryptMsgSignCTL: [ int, { dwMsgEncodingType: DWORD, pbCtlContent: uchar.Δ, cbCtlContent: DWORD, pSignInfo: PCMSG_SIGNED_ENCODE_INFO, dwFlags: DWORD, pbEncoded: uchar.Δ, pcbEncoded: ulong.Δ } ],
  CryptMsgEncodeAndSignCTL: [ int, { dwMsgEncodingType: DWORD, pCtlInfo: PCTL_INFO, pSignInfo: PCMSG_SIGNED_ENCODE_INFO, dwFlags: DWORD, pbEncoded: uchar.Δ, pcbEncoded: ulong.Δ } ],
  CertFindSubjectInSortedCTL: [ int, { pSubjectIdentifier: PCRYPT_DATA_BLOB, pCtlContext: PCCTL_CONTEXT, dwFlags: DWORD, pvReserved: VoidT.Δ, pEncodedAttributes: PCRYPT_DER_BLOB } ],
  CertEnumSubjectInSortedCTL: [ int, { pCtlContext: PCCTL_CONTEXT, ppvNextSubject: VoidT.Δ.Δ, pSubjectIdentifier: PCRYPT_DER_BLOB, pEncodedAttributes: PCRYPT_DER_BLOB } ],
  CertVerifyCTLUsage: [ int, { dwEncodingType: DWORD, dwSubjectType: DWORD, pvSubject: VoidT.Δ, pSubjectUsage: PCTL_USAGE, dwFlags: DWORD, pVerifyUsagePara: PCTL_VERIFY_USAGE_PARA, pVerifyUsageStatus: PCTL_VERIFY_USAGE_STATUS } ],
  CertVerifyRevocation: [ int, { dwEncodingType: DWORD, dwRevType: DWORD, cContext: DWORD, rgpvContext: VoidT.Δ.Δ, dwFlags: DWORD, pRevPara: PCERT_REVOCATION_PARA, pRevStatus: PCERT_REVOCATION_STATUS } ],
  CertCompareIntegerBlob: [ int, { pInt1: PCRYPT_INTEGER_BLOB, pInt2: PCRYPT_INTEGER_BLOB } ],
  CertCompareCertificate: [ int, { dwCertEncodingType: DWORD, pCertId1: PCERT_INFO, pCertId2: PCERT_INFO } ],
  CertCompareCertificateName: [ int, { dwCertEncodingType: DWORD, pCertName1: PCERT_NAME_BLOB, pCertName2: PCERT_NAME_BLOB } ],
  CertIsRDNAttrsInCertificateName: [ int, { dwCertEncodingType: DWORD, dwFlags: DWORD, pCertName: PCERT_NAME_BLOB, pRDN: PCERT_RDN } ],
  CertComparePublicKeyInfo: [ int, { dwCertEncodingType: DWORD, pPublicKey1: PCERT_PUBLIC_KEY_INFO, pPublicKey2: PCERT_PUBLIC_KEY_INFO } ],
  CertGetPublicKeyLength: [ ulong, { dwCertEncodingType: DWORD, pPublicKey: PCERT_PUBLIC_KEY_INFO } ],
  CryptVerifyCertificateSignature: [ int, { hCryptProv: HCRYPTPROV_LEGACY, dwCertEncodingType: DWORD, pbEncoded: uchar.Δ, cbEncoded: DWORD, pPublicKey: PCERT_PUBLIC_KEY_INFO } ],
  CryptVerifyCertificateSignatureEx: [ int, { hCryptProv: HCRYPTPROV_LEGACY, dwCertEncodingType: DWORD, dwSubjectType: DWORD, pvSubject: VoidT.Δ, dwIssuerType: DWORD, pvIssuer: VoidT.Δ, dwFlags: DWORD, pvReserved: VoidT.Δ } ],
  CryptHashToBeSigned: [ int, { hCryptProv: HCRYPTPROV_LEGACY, dwCertEncodingType: DWORD, pbEncoded: uchar.Δ, cbEncoded: DWORD, pbComputedHash: uchar.Δ, pcbComputedHash: ulong.Δ } ],
  CryptHashCertificate: [ int, { hCryptProv: HCRYPTPROV_LEGACY, Algid: ALG_ID, dwFlags: DWORD, pbEncoded: uchar.Δ, cbEncoded: DWORD, pbComputedHash: uchar.Δ, pcbComputedHash: ulong.Δ } ],
  CryptHashCertificate2: [ int, { pwszCNGHashAlgid: LPCWSTR, dwFlags: DWORD, pvReserved: VoidT.Δ, pbEncoded: uchar.Δ, cbEncoded: DWORD, pbComputedHash: uchar.Δ, pcbComputedHash: ulong.Δ } ],
  CryptSignCertificate: [ int, { hCryptProvOrNCryptKey: HCRYPTPROV_OR_NCRYPT_KEY_HANDLE, dwKeySpec: DWORD, dwCertEncodingType: DWORD, pbEncodedToBeSigned: uchar.Δ, cbEncodedToBeSigned: DWORD, pSignatureAlgorithm: PCRYPT_ALGORITHM_IDENTIFIER, pvHashAuxInfo: VoidT.Δ, pbSignature: uchar.Δ, pcbSignature: ulong.Δ } ],
  CryptSignAndEncodeCertificate: [ int, { hCryptProvOrNCryptKey: HCRYPTPROV_OR_NCRYPT_KEY_HANDLE, dwKeySpec: DWORD, dwCertEncodingType: DWORD, lpszStructType: LPCSTR, pvStructInfo: VoidT.Δ, pSignatureAlgorithm: PCRYPT_ALGORITHM_IDENTIFIER, pvHashAuxInfo: VoidT.Δ, pbEncoded: uchar.Δ, pcbEncoded: ulong.Δ } ],
  CertVerifyTimeValidity: [ long, { pTimeToVerify: LPFILETIME, pCertInfo: PCERT_INFO } ],
  CertVerifyCRLTimeValidity: [ long, { pTimeToVerify: LPFILETIME, pCrlInfo: PCRL_INFO } ],
  CertVerifyValidityNesting: [ int, { pSubjectInfo: PCERT_INFO, pIssuerInfo: PCERT_INFO } ],
  CertVerifyCRLRevocation: [ int, { dwCertEncodingType: DWORD, pCertId: PCERT_INFO, cCrlInfo: DWORD, rgpCrlInfo: VOIDPTR.Δ } ],
  CertAlgIdToOID: [ int8.Δ, { dwAlgId: DWORD } ],
  CertOIDToAlgId: [ ulong, { pszObjId: LPCSTR } ],
  CertFindExtension: [ VOIDPTR, { pszObjId: LPCSTR, cExtensions: DWORD, rgExtensions: uint.Δ } ],
  CertFindAttribute: [ VOIDPTR, { pszObjId: LPCSTR, cAttr: DWORD, rgAttr: uint.Δ } ],
  CertFindRDNAttr: [ VOIDPTR, { pszObjId: LPCSTR, pName: PCERT_NAME_INFO } ],
  CertGetIntendedKeyUsage: [ int, { dwCertEncodingType: DWORD, pCertInfo: PCERT_INFO, pbKeyUsage: uchar.Δ, cbKeyUsage: DWORD } ],
  CryptInstallDefaultContext: [ int, { hCryptProv: HCRYPTPROV, dwDefaultType: DWORD, pvDefaultPara: VoidT.Δ, dwFlags: DWORD, pvReserved: VoidT.Δ, phDefaultContext: VoidT.Δ.Δ } ],
  CryptUninstallDefaultContext: [ int, { hDefaultContext: HCRYPTDEFAULTCONTEXT, dwFlags: DWORD, pvReserved: VoidT.Δ } ],
  CryptExportPublicKeyInfo: [ int, { hCryptProvOrNCryptKey: HCRYPTPROV_OR_NCRYPT_KEY_HANDLE, dwKeySpec: DWORD, dwCertEncodingType: DWORD, pInfo: PCERT_PUBLIC_KEY_INFO, pcbInfo: ulong.Δ } ],
  CryptExportPublicKeyInfoEx: [ int, { hCryptProvOrNCryptKey: HCRYPTPROV_OR_NCRYPT_KEY_HANDLE, dwKeySpec: DWORD, dwCertEncodingType: DWORD, pszPublicKeyObjId: LPSTR, dwFlags: DWORD, pvAuxInfo: VoidT.Δ, pInfo: PCERT_PUBLIC_KEY_INFO, pcbInfo: ulong.Δ } ],
  CryptExportPublicKeyInfoFromBCryptKeyHandle: [ int, { hBCryptKey: BCRYPT_KEY_HANDLE, dwCertEncodingType: DWORD, pszPublicKeyObjId: LPSTR, dwFlags: DWORD, pvAuxInfo: VoidT.Δ, pInfo: PCERT_PUBLIC_KEY_INFO, pcbInfo: ulong.Δ } ],
  CryptImportPublicKeyInfo: [ int, { hCryptProv: HCRYPTPROV, dwCertEncodingType: DWORD, pInfo: PCERT_PUBLIC_KEY_INFO, phKey: ulong.Δ } ],
  CryptImportPublicKeyInfoEx: [ int, { hCryptProv: HCRYPTPROV, dwCertEncodingType: DWORD, pInfo: PCERT_PUBLIC_KEY_INFO, aiKeyAlg: ALG_ID, dwFlags: DWORD, pvAuxInfo: VoidT.Δ, phKey: ulong.Δ } ],
  CryptImportPublicKeyInfoEx2: [ int, { dwCertEncodingType: DWORD, pInfo: PCERT_PUBLIC_KEY_INFO, dwFlags: DWORD, pvAuxInfo: VoidT.Δ, phKey: VoidT.Δ.Δ } ],
  CryptAcquireCertificatePrivateKey: [ int, { pCert: PCCERT_CONTEXT, dwFlags: DWORD, pvReserved: VoidT.Δ, phCryptProvOrNCryptKey: ulong.Δ, pdwKeySpec: ulong.Δ, pfCallerFreeProvOrNCryptKey: int.Δ } ],
  CryptFindCertificateKeyProvInfo: [ int, { pCert: PCCERT_CONTEXT, dwFlags: DWORD, pvReserved: VoidT.Δ } ],
  CryptImportPKCS8: [ int, { sPrivateKeyAndParams: CRYPT_PKCS8_IMPORT_PARAMS, dwFlags: DWORD, phCryptProv: ulong.Δ, pvAuxInfo: VoidT.Δ } ],
  CryptExportPKCS8: [ int, { hCryptProv: HCRYPTPROV, dwKeySpec: DWORD, pszPrivateKeyObjId: LPSTR, dwFlags: DWORD, pvAuxInfo: VoidT.Δ, pbPrivateKeyBlob: uchar.Δ, pcbPrivateKeyBlob: ulong.Δ } ],
  CryptExportPKCS8Ex: [ int, { psExportParams: uint.Δ, dwFlags: DWORD, pvAuxInfo: VoidT.Δ, pbPrivateKeyBlob: uchar.Δ, pcbPrivateKeyBlob: ulong.Δ } ],
  CryptHashPublicKeyInfo: [ int, { hCryptProv: HCRYPTPROV_LEGACY, Algid: ALG_ID, dwFlags: DWORD, dwCertEncodingType: DWORD, pInfo: PCERT_PUBLIC_KEY_INFO, pbComputedHash: uchar.Δ, pcbComputedHash: ulong.Δ } ],
  CertRDNValueToStrA: [ ulong, { dwValueType: DWORD, pValue: PCERT_RDN_VALUE_BLOB, psz: LPSTR, csz: DWORD } ],
  CertRDNValueToStrW: [ ulong, { dwValueType: DWORD, pValue: PCERT_RDN_VALUE_BLOB, psz: LPWSTR, csz: DWORD } ],
  CertNameToStrA: [ ulong, { dwCertEncodingType: DWORD, pName: PCERT_NAME_BLOB, dwStrType: DWORD, psz: LPSTR, csz: DWORD } ],
  CertNameToStrW: [ ulong, { dwCertEncodingType: DWORD, pName: PCERT_NAME_BLOB, dwStrType: DWORD, psz: LPWSTR, csz: DWORD } ],
  CertStrToNameA: [ int, { dwCertEncodingType: DWORD, pszX500: LPCSTR, dwStrType: DWORD, pvReserved: VoidT.Δ, pbEncoded: uchar.Δ, pcbEncoded: ulong.Δ, ppszError: int8.Δ.Δ } ],
  CertStrToNameW: [ int, { dwCertEncodingType: DWORD, pszX500: LPCWSTR, dwStrType: DWORD, pvReserved: VoidT.Δ, pbEncoded: uchar.Δ, pcbEncoded: ulong.Δ, ppszError: ushort.Δ.Δ } ],
  CertGetNameStringA: [ ulong, { pCertContext: PCCERT_CONTEXT, dwType: DWORD, dwFlags: DWORD, pvTypePara: VoidT.Δ, pszNameString: LPSTR, cchNameString: DWORD } ],
  CertGetNameStringW: [ ulong, { pCertContext: PCCERT_CONTEXT, dwType: DWORD, dwFlags: DWORD, pvTypePara: VoidT.Δ, pszNameString: LPWSTR, cchNameString: DWORD } ],
  CryptSignMessage: [ int, { pSignPara: PCRYPT_SIGN_MESSAGE_PARA, fDetachedSignature: BOOL, cToBeSigned: DWORD, rgpbToBeSigned: uchar.Δ.Δ, rgcbToBeSigned: ulong.Δ, pbSignedBlob: uchar.Δ, pcbSignedBlob: ulong.Δ } ],
  CryptVerifyMessageSignature: [ int, { pVerifyPara: PCRYPT_VERIFY_MESSAGE_PARA, dwSignerIndex: DWORD, pbSignedBlob: uchar.Δ, cbSignedBlob: DWORD, pbDecoded: uchar.Δ, pcbDecoded: ulong.Δ, ppSignerCert: VOIDPTR.Δ } ],
  CryptGetMessageSignerCount: [ long, { dwMsgEncodingType: DWORD, pbSignedBlob: uchar.Δ, cbSignedBlob: DWORD } ],
  CryptGetMessageCertificates: [ VoidT.Δ, { dwMsgAndCertEncodingType: DWORD, hCryptProv: HCRYPTPROV_LEGACY, dwFlags: DWORD, pbSignedBlob: uchar.Δ, cbSignedBlob: DWORD } ],
  CryptVerifyDetachedMessageSignature: [ int, { pVerifyPara: PCRYPT_VERIFY_MESSAGE_PARA, dwSignerIndex: DWORD, pbDetachedSignBlob: uchar.Δ, cbDetachedSignBlob: DWORD, cToBeSigned: DWORD, rgpbToBeSigned: uchar.Δ.Δ, rgcbToBeSigned: ulong.Δ, ppSignerCert: VOIDPTR.Δ } ],
  CryptEncryptMessage: [ int, { pEncryptPara: PCRYPT_ENCRYPT_MESSAGE_PARA, cRecipientCert: DWORD, rgpRecipientCert: VOIDPTR.Δ, pbToBeEncrypted: uchar.Δ, cbToBeEncrypted: DWORD, pbEncryptedBlob: uchar.Δ, pcbEncryptedBlob: ulong.Δ } ],
  CryptDecryptMessage: [ int, { pDecryptPara: PCRYPT_DECRYPT_MESSAGE_PARA, pbEncryptedBlob: uchar.Δ, cbEncryptedBlob: DWORD, pbDecrypted: uchar.Δ, pcbDecrypted: ulong.Δ, ppXchgCert: VOIDPTR.Δ } ],
  CryptSignAndEncryptMessage: [ int, { pSignPara: PCRYPT_SIGN_MESSAGE_PARA, pEncryptPara: PCRYPT_ENCRYPT_MESSAGE_PARA, cRecipientCert: DWORD, rgpRecipientCert: VOIDPTR.Δ, pbToBeSignedAndEncrypted: uchar.Δ, cbToBeSignedAndEncrypted: DWORD, pbSignedAndEncryptedBlob: uchar.Δ, pcbSignedAndEncryptedBlob: ulong.Δ } ],
  CryptDecryptAndVerifyMessageSignature: [ int, { pDecryptPara: PCRYPT_DECRYPT_MESSAGE_PARA, pVerifyPara: PCRYPT_VERIFY_MESSAGE_PARA, dwSignerIndex: DWORD, pbEncryptedBlob: uchar.Δ, cbEncryptedBlob: DWORD, pbDecrypted: uchar.Δ, pcbDecrypted: ulong.Δ, ppXchgCert: VOIDPTR.Δ, ppSignerCert: VOIDPTR.Δ } ],
  CryptDecodeMessage: [ int, { dwMsgTypeFlags: DWORD, pDecryptPara: PCRYPT_DECRYPT_MESSAGE_PARA, pVerifyPara: PCRYPT_VERIFY_MESSAGE_PARA, dwSignerIndex: DWORD, pbEncodedBlob: uchar.Δ, cbEncodedBlob: DWORD, dwPrevInnerContentType: DWORD, pdwMsgType: ulong.Δ, pdwInnerContentType: ulong.Δ, pbDecoded: uchar.Δ, pcbDecoded: ulong.Δ, ppXchgCert: VOIDPTR.Δ, ppSignerCert: VOIDPTR.Δ } ],
  CryptHashMessage: [ int, { pHashPara: PCRYPT_HASH_MESSAGE_PARA, fDetachedHash: BOOL, cToBeHashed: DWORD, rgpbToBeHashed: uchar.Δ.Δ, rgcbToBeHashed: ulong.Δ, pbHashedBlob: uchar.Δ, pcbHashedBlob: ulong.Δ, pbComputedHash: uchar.Δ, pcbComputedHash: ulong.Δ } ],
  CryptVerifyMessageHash: [ int, { pHashPara: PCRYPT_HASH_MESSAGE_PARA, pbHashedBlob: uchar.Δ, cbHashedBlob: DWORD, pbToBeHashed: uchar.Δ, pcbToBeHashed: ulong.Δ, pbComputedHash: uchar.Δ, pcbComputedHash: ulong.Δ } ],
  CryptVerifyDetachedMessageHash: [ int, { pHashPara: PCRYPT_HASH_MESSAGE_PARA, pbDetachedHashBlob: uchar.Δ, cbDetachedHashBlob: DWORD, cToBeHashed: DWORD, rgpbToBeHashed: uchar.Δ.Δ, rgcbToBeHashed: ulong.Δ, pbComputedHash: uchar.Δ, pcbComputedHash: ulong.Δ } ],
  CryptSignMessageWithKey: [ int, { pSignPara: PCRYPT_KEY_SIGN_MESSAGE_PARA, pbToBeSigned: uchar.Δ, cbToBeSigned: DWORD, pbSignedBlob: uchar.Δ, pcbSignedBlob: ulong.Δ } ],
  CryptVerifyMessageSignatureWithKey: [ int, { pVerifyPara: PCRYPT_KEY_VERIFY_MESSAGE_PARA, pPublicKeyInfo: PCERT_PUBLIC_KEY_INFO, pbSignedBlob: uchar.Δ, cbSignedBlob: DWORD, pbDecoded: uchar.Δ, pcbDecoded: ulong.Δ } ],
  CertOpenSystemStoreA: [ VoidT.Δ, { hProv: HCRYPTPROV_LEGACY, szSubsystemProtocol: LPCSTR } ],
  CertOpenSystemStoreW: [ VoidT.Δ, { hProv: HCRYPTPROV_LEGACY, szSubsystemProtocol: LPCWSTR } ],
  CertAddEncodedCertificateToSystemStoreA: [ int, { szCertStoreName: LPCSTR, pbCertEncoded: uchar.Δ, cbCertEncoded: DWORD } ],
  CertAddEncodedCertificateToSystemStoreW: [ int, { szCertStoreName: LPCWSTR, pbCertEncoded: uchar.Δ, cbCertEncoded: DWORD } ],
  FindCertsByIssuer: [ long, { pCertChains: PCERT_CHAIN, pcbCertChains: ulong.Δ, pcCertChains: ulong.Δ, pbEncodedIssuerName: uchar.Δ, cbEncodedIssuerName: DWORD, pwszPurpose: LPCWSTR, dwKeySpec: DWORD } ],
  CryptQueryObject: [ int, { dwObjectType: DWORD, pvObject: VoidT.Δ, dwExpectedContentTypeFlags: DWORD, dwExpectedFormatTypeFlags: DWORD, dwFlags: DWORD, pdwMsgAndCertEncodingType: ulong.Δ, pdwContentType: ulong.Δ, pdwFormatType: ulong.Δ, phCertStore: VoidT.Δ.Δ, phMsg: VoidT.Δ.Δ, ppvContext: VoidT.Δ.Δ } ],
  CryptMemAlloc: [ VoidT.Δ, { cbSize: ULONG } ],
  CryptMemRealloc: [ VoidT.Δ, { pv: LPVOID, cbSize: ULONG } ],
  CryptMemFree: [ VoidT, { pv: LPVOID } ],
  CryptCreateAsyncHandle: [ int, { dwFlags: DWORD, phAsync: PHCRYPTASYNC } ],
  CryptSetAsyncParam: [ int, { hAsync: HCRYPTASYNC, pszParamOid: LPSTR, pvParam: LPVOID, pfnFree: PFN_CRYPT_ASYNC_PARAM_FREE_FUNC } ],
  CryptGetAsyncParam: [ int, { hAsync: HCRYPTASYNC, pszParamOid: LPSTR, ppvParam: VoidT.Δ.Δ, ppfnFree: PFN_CRYPT_ASYNC_PARAM_FREE_FUNC.Δ } ],
  CryptCloseAsyncHandle: [ int, { hAsync: HCRYPTASYNC } ],
  CryptRetrieveObjectByUrlA: [ int, { pszUrl: LPCSTR, pszObjectOid: LPCSTR, dwRetrievalFlags: DWORD, dwTimeout: DWORD, ppvObject: VoidT.Δ.Δ, hAsyncRetrieve: HCRYPTASYNC, pCredentials: PCRYPT_CREDENTIALS, pvVerify: LPVOID, pAuxInfo: PCRYPT_RETRIEVE_AUX_INFO } ],
  CryptRetrieveObjectByUrlW: [ int, { pszUrl: LPCWSTR, pszObjectOid: LPCSTR, dwRetrievalFlags: DWORD, dwTimeout: DWORD, ppvObject: VoidT.Δ.Δ, hAsyncRetrieve: HCRYPTASYNC, pCredentials: PCRYPT_CREDENTIALS, pvVerify: LPVOID, pAuxInfo: PCRYPT_RETRIEVE_AUX_INFO } ],
  CryptInstallCancelRetrieval: [ int, { pfnCancel: PFN_CRYPT_CANCEL_RETRIEVAL, pvArg: VoidT.Δ, dwFlags: DWORD, pvReserved: VoidT.Δ } ],
  CryptUninstallCancelRetrieval: [ int, { dwFlags: DWORD, pvReserved: VoidT.Δ } ],
  CryptCancelAsyncRetrieval: [ int, { hAsyncRetrieval: HCRYPTASYNC } ],
  CryptGetObjectUrl: [ int, { pszUrlOid: LPCSTR, pvPara: LPVOID, dwFlags: DWORD, pUrlArray: PCRYPT_URL_ARRAY, pcbUrlArray: ulong.Δ, pUrlInfo: PCRYPT_URL_INFO, pcbUrlInfo: ulong.Δ, pvReserved: LPVOID } ],
  CryptGetTimeValidObject: [ int, { pszTimeValidOid: LPCSTR, pvPara: LPVOID, pIssuer: PCCERT_CONTEXT, pftValidFor: LPFILETIME, dwFlags: DWORD, dwTimeout: DWORD, ppvObject: VoidT.Δ.Δ, pCredentials: PCRYPT_CREDENTIALS, pExtraInfo: PCRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO } ],
  CryptFlushTimeValidObject: [ int, { pszFlushTimeValidOid: LPCSTR, pvPara: LPVOID, pIssuer: PCCERT_CONTEXT, dwFlags: DWORD, pvReserved: LPVOID } ],
  CryptProtectData: [ int, { pDataIn: uint.Δ, szDataDescr: LPCWSTR, pOptionalEntropy: uint.Δ, pvReserved: PVOID, pPromptStruct: uint.Δ, dwFlags: DWORD, pDataOut: uint.Δ } ],
  CryptUnprotectData: [ int, { pDataIn: uint.Δ, ppszDataDescr: ushort.Δ.Δ, pOptionalEntropy: uint.Δ, pvReserved: PVOID, pPromptStruct: uint.Δ, dwFlags: DWORD, pDataOut: uint.Δ } ],
  CryptUpdateProtectedState: [ int, { pOldSid: PSID, pwszOldPassword: LPCWSTR, dwFlags: DWORD, pdwSuccessCount: ulong.Δ, pdwFailureCount: ulong.Δ } ],
  CryptProtectMemory: [ int, { pDataIn: LPVOID, cbDataIn: DWORD, dwFlags: DWORD } ],
  CryptUnprotectMemory: [ int, { pDataIn: LPVOID, cbDataIn: DWORD, dwFlags: DWORD } ],
  CertCreateSelfSignCertificate: [ VOIDPTR, { hCryptProvOrNCryptKey: HCRYPTPROV_OR_NCRYPT_KEY_HANDLE, pSubjectIssuerBlob: PCERT_NAME_BLOB, dwFlags: DWORD, pKeyProvInfo: PCRYPT_KEY_PROV_INFO, pSignatureAlgorithm: PCRYPT_ALGORITHM_IDENTIFIER, pStartTime: PSYSTEMTIME, pEndTime: PSYSTEMTIME, pExtensions: PCERT_EXTENSIONS } ],
  CryptGetKeyIdentifierProperty: [ int, { pKeyIdentifier: uint.Δ, dwPropId: DWORD, dwFlags: DWORD, pwszComputerName: LPCWSTR, pvReserved: VoidT.Δ, pvData: VoidT.Δ, pcbData: ulong.Δ } ],
  CryptSetKeyIdentifierProperty: [ int, { pKeyIdentifier: uint.Δ, dwPropId: DWORD, dwFlags: DWORD, pwszComputerName: LPCWSTR, pvReserved: VoidT.Δ, pvData: VoidT.Δ } ],
  CryptEnumKeyIdentifierProperties: [ int, { pKeyIdentifier: uint.Δ, dwPropId: DWORD, dwFlags: DWORD, pwszComputerName: LPCWSTR, pvReserved: VoidT.Δ, pvArg: VoidT.Δ, pfnEnum: PFN_CRYPT_ENUM_KEYID_PROP } ],
  CryptCreateKeyIdentifierFromCSP: [ int, { dwCertEncodingType: DWORD, pszPubKeyOID: LPCSTR, pPubKeyStruc: uint.Δ, cbPubKeyStruc: DWORD, dwFlags: DWORD, pvReserved: VoidT.Δ, pbHash: uchar.Δ, pcbHash: ulong.Δ } ],
  CertCreateCertificateChainEngine: [ int, { pConfig: PCERT_CHAIN_ENGINE_CONFIG, phChainEngine: VoidT.Δ.Δ } ],
  CertFreeCertificateChainEngine: [ VoidT, { hChainEngine: HCERTCHAINENGINE } ],
  CertResyncCertificateChainEngine: [ int, { hChainEngine: HCERTCHAINENGINE } ],
  CertGetCertificateChain: [ int, { hChainEngine: HCERTCHAINENGINE, pCertContext: PCCERT_CONTEXT, pTime: LPFILETIME, hAdditionalStore: HCERTSTORE, pChainPara: PCERT_CHAIN_PARA, dwFlags: DWORD, pvReserved: LPVOID, ppChainContext: VOIDPTR.Δ } ],
  CertFreeCertificateChain: [ VoidT, { pChainContext: PCCERT_CHAIN_CONTEXT } ],
  CertDuplicateCertificateChain: [ VOIDPTR, { pChainContext: PCCERT_CHAIN_CONTEXT } ],
  CertFindChainInStore: [ VOIDPTR, { hCertStore: HCERTSTORE, dwCertEncodingType: DWORD, dwFindFlags: DWORD, dwFindType: DWORD, pvFindPara: VoidT.Δ, pPrevChainContext: PCCERT_CHAIN_CONTEXT } ],
  CertVerifyCertificateChainPolicy: [ int, { pszPolicyOID: LPCSTR, pChainContext: PCCERT_CHAIN_CONTEXT, pPolicyPara: PCERT_CHAIN_POLICY_PARA, pPolicyStatus: PCERT_CHAIN_POLICY_STATUS } ],
  CryptStringToBinaryA: [ int, { pszString: LPCSTR, cchString: DWORD, dwFlags: DWORD, pbBinary: uchar.Δ, pcbBinary: ulong.Δ, pdwSkip: ulong.Δ, pdwFlags: ulong.Δ } ],
  CryptStringToBinaryW: [ int, { pszString: LPCWSTR, cchString: DWORD, dwFlags: DWORD, pbBinary: uchar.Δ, pcbBinary: ulong.Δ, pdwSkip: ulong.Δ, pdwFlags: ulong.Δ } ],
  CryptBinaryToStringA: [ int, { pbBinary: uchar.Δ, cbBinary: DWORD, dwFlags: DWORD, pszString: LPSTR, pcchString: ulong.Δ } ],
  CryptBinaryToStringW: [ int, { pbBinary: uchar.Δ, cbBinary: DWORD, dwFlags: DWORD, pszString: LPWSTR, pcchString: ulong.Δ } ],
  PFXImportCertStore: [ VoidT.Δ, { pPFX: uint.Δ, szPassword: LPCWSTR, dwFlags: DWORD } ],
  PFXIsPFXBlob: [ int, { pPFX: uint.Δ } ],
  PFXVerifyPassword: [ int, { pPFX: uint.Δ, szPassword: LPCWSTR, dwFlags: DWORD } ],
  PFXExportCertStoreEx: [ int, { hStore: HCERTSTORE, pPFX: uint.Δ, szPassword: LPCWSTR, pvReserved: VoidT.Δ, dwFlags: DWORD } ],
  PFXExportCertStore: [ int, { hStore: HCERTSTORE, pPFX: uint.Δ, szPassword: LPCWSTR, dwFlags: DWORD } ],
  CertOpenServerOcspResponse: [ VoidT.Δ, { pChainContext: PCCERT_CHAIN_CONTEXT, dwFlags: DWORD, pvReserved: LPVOID } ],
  CertAddRefServerOcspResponse: [ VoidT, { hServerOcspResponse: HCERT_SERVER_OCSP_RESPONSE } ],
  CertCloseServerOcspResponse: [ VoidT, { hServerOcspResponse: HCERT_SERVER_OCSP_RESPONSE, dwFlags: DWORD } ],
  CertGetServerOcspResponseContext: [ VOIDPTR, { hServerOcspResponse: HCERT_SERVER_OCSP_RESPONSE, dwFlags: DWORD, pvReserved: LPVOID } ],
  CertAddRefServerOcspResponseContext: [ VoidT, { pServerOcspResponseContext: PCCERT_SERVER_OCSP_RESPONSE_CONTEXT } ],
  CertFreeServerOcspResponseContext: [ VoidT, { pServerOcspResponseContext: PCCERT_SERVER_OCSP_RESPONSE_CONTEXT } ],
  CertRetrieveLogoOrBiometricInfo: [ int, { pCertContext: PCCERT_CONTEXT, lpszLogoOrBiometricType: LPCSTR, dwRetrievalFlags: DWORD, dwTimeout: DWORD, dwFlags: DWORD, pvReserved: VoidT.Δ, ppbData: uchar.Δ.Δ, pcbData: ulong.Δ, ppwszMimeType: ushort.Δ.Δ } ],
  CertSelectCertificateChains: [ int, { pSelectionContext: LPCGUID, dwFlags: DWORD, pChainParameters: PCCERT_SELECT_CHAIN_PARA, cCriteria: DWORD, rgpCriteria: PCCERT_SELECT_CRITERIA, hStore: HCERTSTORE, pcSelection: PDWORD, pprgpSelection: VOIDPTR.Δ.Δ } ],
  CertFreeCertificateChainList: [ VoidT, { prgpSelection: VOIDPTR.Δ } ],
  CryptRetrieveTimeStamp: [ int, { wszUrl: LPCWSTR, dwRetrievalFlags: DWORD, dwTimeout: DWORD, pszHashId: LPCSTR, pPara: uint.Δ, pbData: uchar.Δ, cbData: DWORD, ppTsContext: VOIDPTR.Δ, ppTsSigner: VOIDPTR.Δ, phStore: VoidT.Δ.Δ } ],
  CryptVerifyTimeStampSignature: [ int, { pbTSContentInfo: uchar.Δ, cbTSContentInfo: DWORD, pbData: uchar.Δ, cbData: DWORD, hAdditionalStore: HCERTSTORE, ppTsContext: VOIDPTR.Δ, ppTsSigner: VOIDPTR.Δ, phStore: VoidT.Δ.Δ } ],
  QueryUsersOnEncryptedFile: [ ulong, { lpFileName: LPCWSTR, pUsers: VOIDPTR.Δ } ],
  QueryRecoveryAgentsOnEncryptedFile: [ ulong, { lpFileName: LPCWSTR, pRecoveryAgents: VOIDPTR.Δ } ],
  RemoveUsersFromEncryptedFile: [ ulong, { lpFileName: LPCWSTR, pHashes: PENCRYPTION_CERTIFICATE_HASH_LIST } ],
  AddUsersToEncryptedFile: [ ulong, { lpFileName: LPCWSTR, pEncryptionCertificates: PENCRYPTION_CERTIFICATE_LIST } ],
  SetUserFileEncryptionKey: [ ulong, { pEncryptionCertificate: PENCRYPTION_CERTIFICATE } ],
  SetUserFileEncryptionKeyEx: [ ulong, { pEncryptionCertificate: PENCRYPTION_CERTIFICATE, dwCapabilities: DWORD, dwFlags: DWORD, pvReserved: LPVOID } ],
  FreeEncryptionCertificateHashList: [ VoidT, { pUsers: PENCRYPTION_CERTIFICATE_HASH_LIST } ],
  EncryptionDisable: [ int, { DirPath: LPCWSTR, Disable: BOOL } ],
  DuplicateEncryptionInfoFile: [ ulong, { SrcFileName: LPCWSTR, DstFileName: LPCWSTR, dwCreationDistribution: DWORD, dwAttributes: DWORD, lpSecurityAttributes: LPSECURITY_ATTRIBUTES } ],
  GetEncryptedFileMetadata: [ ulong, { lpFileName: LPCWSTR, pcbMetadata: PDWORD, ppbMetadata: uchar.Δ.Δ } ],
  SetEncryptedFileMetadata: [ ulong, { lpFileName: LPCWSTR, pbOldMetadata: PBYTE, pbNewMetadata: PBYTE, pOwnerHash: PENCRYPTION_CERTIFICATE_HASH, dwOperation: DWORD, pCertificatesAdded: PENCRYPTION_CERTIFICATE_HASH_LIST } ],
  FreeEncryptedFileMetadata: [ VoidT, { pbMetadata: PBYTE } ],
  I_RpcNsGetBuffer: [ long, { Message: PRPC_MESSAGE } ],
  I_RpcNsSendReceive: [ long, { Message: PRPC_MESSAGE, Handle: VoidT.Δ.Δ } ],
  I_RpcNsRaiseException: [ VoidT, { Message: PRPC_MESSAGE, Status: RPC_STATUS } ],
  I_RpcReBindBuffer: [ long, { Message: PRPC_MESSAGE } ],
  I_NsServerBindSearch: [ long, {  } ],
  I_NsClientBindSearch: [ long, {  } ],
  I_NsClientBindDone: [ VoidT, {  } ],
  MIDL_user_allocate: [ VoidT, { size: size_t } ],
  MIDL_user_free: [ VoidT, { VoidT.Δ: VoidT.Δ } ],
  I_RpcDefaultAllocate: [ VoidT, { bh: handle_t, size: size_t, RealAlloc: UNEXPOSED.Δ } ],
  I_RpcDefaultFree: [ VoidT, { bh: handle_t, VoidT.Δ: VoidT.Δ, RealFree: UNEXPOSED.Δ } ],
  NDRCContextBinding: [ VoidT.Δ, { CContext: NDR_CCONTEXT } ],
  NDRCContextMarshall: [ VoidT, { CContext: NDR_CCONTEXT, pBuff: VoidT.Δ } ],
  NDRCContextUnmarshall: [ VoidT, { pCContext: VoidT.Δ.Δ, hBinding: RPC_BINDING_HANDLE, pBuff: VoidT.Δ, DataRepresentation: ulong } ],
  NDRCContextUnmarshall2: [ VoidT, { pCContext: VoidT.Δ.Δ, hBinding: RPC_BINDING_HANDLE, pBuff: VoidT.Δ, DataRepresentation: ulong } ],
  NDRSContextMarshall: [ VoidT, { CContext: NDR_SCONTEXT, pBuff: VoidT.Δ, userRunDownIn: NDR_RUNDOWN } ],
  NDRSContextUnmarshall: [ VOIDPTR, { pBuff: VoidT.Δ, DataRepresentation: ulong } ],
  NDRSContextMarshallEx: [ VoidT, { BindingHandle: RPC_BINDING_HANDLE, CContext: NDR_SCONTEXT, pBuff: VoidT.Δ, userRunDownIn: NDR_RUNDOWN } ],
  NDRSContextMarshall2: [ VoidT, { BindingHandle: RPC_BINDING_HANDLE, CContext: NDR_SCONTEXT, pBuff: VoidT.Δ, userRunDownIn: NDR_RUNDOWN, CtxGuard: VoidT.Δ, Flags: ulong } ],
  NDRSContextUnmarshallEx: [ VOIDPTR, { BindingHandle: RPC_BINDING_HANDLE, pBuff: VoidT.Δ, DataRepresentation: ulong } ],
  NDRSContextUnmarshall2: [ VOIDPTR, { BindingHandle: RPC_BINDING_HANDLE, pBuff: VoidT.Δ, DataRepresentation: ulong, CtxGuard: VoidT.Δ, Flags: ulong } ],
  RpcSsDestroyClientContext: [ VoidT, { ContextHandle: VoidT.Δ.Δ } ],
  RpcCsGetTags: [ VoidT, { hBinding: RPC_BINDING_HANDLE, fServerSide: int, pulSendingTag: ulong.Δ, pulDesiredReceivingTag: ulong.Δ, pulReceivingTag: ulong.Δ, pStatus: ulong.Δ } ],
  NdrClientGetSupportedSyntaxes: [ long, { pInf: uint.Δ, pCount: ulong.Δ, pArr: uint.Δ.Δ } ],
  NdrServerGetSupportedSyntaxes: [ long, { pInf: uint.Δ, pCount: ulong.Δ, pArr: uint.Δ.Δ, pPreferSyntaxIndex: ulong.Δ } ],
  NdrSimpleTypeMarshall: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, FormatChar: uchar } ],
  NdrPointerMarshall: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrCsArrayMarshall: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrCsTagMarshall: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrSimpleStructMarshall: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrConformantStructMarshall: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrConformantVaryingStructMarshall: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrComplexStructMarshall: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrFixedArrayMarshall: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrConformantArrayMarshall: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrConformantVaryingArrayMarshall: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrVaryingArrayMarshall: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrComplexArrayMarshall: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrNonConformantStringMarshall: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrConformantStringMarshall: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrEncapsulatedUnionMarshall: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrNonEncapsulatedUnionMarshall: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrByteCountPointerMarshall: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrXmitOrRepAsMarshall: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrUserMarshalMarshall: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrInterfacePointerMarshall: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrClientContextMarshall: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, ContextHandle: NDR_CCONTEXT, fCheck: int } ],
  NdrServerContextMarshall: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, ContextHandle: NDR_SCONTEXT, RundownRoutine: NDR_RUNDOWN } ],
  NdrServerContextNewMarshall: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, ContextHandle: NDR_SCONTEXT, RundownRoutine: NDR_RUNDOWN, pFormat: PFORMAT_STRING } ],
  NdrSimpleTypeUnmarshall: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, FormatChar: uchar } ],
  NdrCsArrayUnmarshall: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: uchar.Δ.Δ, pFormat: PFORMAT_STRING, fMustAlloc: uchar } ],
  NdrCsTagUnmarshall: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: uchar.Δ.Δ, pFormat: PFORMAT_STRING, fMustAlloc: uchar } ],
  NdrRangeUnmarshall: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: uchar.Δ.Δ, pFormat: PFORMAT_STRING, fMustAlloc: uchar } ],
  NdrCorrelationInitialize: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: VoidT.Δ, CacheSize: ulong, flags: ulong } ],
  NdrCorrelationPass: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE } ],
  NdrCorrelationFree: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE } ],
  NdrPointerUnmarshall: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: uchar.Δ.Δ, pFormat: PFORMAT_STRING, fMustAlloc: uchar } ],
  NdrSimpleStructUnmarshall: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: uchar.Δ.Δ, pFormat: PFORMAT_STRING, fMustAlloc: uchar } ],
  NdrConformantStructUnmarshall: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: uchar.Δ.Δ, pFormat: PFORMAT_STRING, fMustAlloc: uchar } ],
  NdrConformantVaryingStructUnmarshall: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: uchar.Δ.Δ, pFormat: PFORMAT_STRING, fMustAlloc: uchar } ],
  NdrComplexStructUnmarshall: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: uchar.Δ.Δ, pFormat: PFORMAT_STRING, fMustAlloc: uchar } ],
  NdrFixedArrayUnmarshall: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: uchar.Δ.Δ, pFormat: PFORMAT_STRING, fMustAlloc: uchar } ],
  NdrConformantArrayUnmarshall: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: uchar.Δ.Δ, pFormat: PFORMAT_STRING, fMustAlloc: uchar } ],
  NdrConformantVaryingArrayUnmarshall: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: uchar.Δ.Δ, pFormat: PFORMAT_STRING, fMustAlloc: uchar } ],
  NdrVaryingArrayUnmarshall: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: uchar.Δ.Δ, pFormat: PFORMAT_STRING, fMustAlloc: uchar } ],
  NdrComplexArrayUnmarshall: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: uchar.Δ.Δ, pFormat: PFORMAT_STRING, fMustAlloc: uchar } ],
  NdrNonConformantStringUnmarshall: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: uchar.Δ.Δ, pFormat: PFORMAT_STRING, fMustAlloc: uchar } ],
  NdrConformantStringUnmarshall: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: uchar.Δ.Δ, pFormat: PFORMAT_STRING, fMustAlloc: uchar } ],
  NdrEncapsulatedUnionUnmarshall: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: uchar.Δ.Δ, pFormat: PFORMAT_STRING, fMustAlloc: uchar } ],
  NdrNonEncapsulatedUnionUnmarshall: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: uchar.Δ.Δ, pFormat: PFORMAT_STRING, fMustAlloc: uchar } ],
  NdrByteCountPointerUnmarshall: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: uchar.Δ.Δ, pFormat: PFORMAT_STRING, fMustAlloc: uchar } ],
  NdrXmitOrRepAsUnmarshall: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: uchar.Δ.Δ, pFormat: PFORMAT_STRING, fMustAlloc: uchar } ],
  NdrUserMarshalUnmarshall: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: uchar.Δ.Δ, pFormat: PFORMAT_STRING, fMustAlloc: uchar } ],
  NdrInterfacePointerUnmarshall: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: uchar.Δ.Δ, pFormat: PFORMAT_STRING, fMustAlloc: uchar } ],
  NdrClientContextUnmarshall: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pContextHandle: VoidT.Δ.Δ, BindHandle: RPC_BINDING_HANDLE } ],
  NdrServerContextUnmarshall: [ VOIDPTR, { pStubMsg: PMIDL_STUB_MESSAGE } ],
  NdrContextHandleInitialize: [ VOIDPTR, { pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING } ],
  NdrServerContextNewUnmarshall: [ VOIDPTR, { pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING } ],
  NdrPointerBufferSize: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrCsArrayBufferSize: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrCsTagBufferSize: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrSimpleStructBufferSize: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrConformantStructBufferSize: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrConformantVaryingStructBufferSize: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrComplexStructBufferSize: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrFixedArrayBufferSize: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrConformantArrayBufferSize: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrConformantVaryingArrayBufferSize: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrVaryingArrayBufferSize: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrComplexArrayBufferSize: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrConformantStringBufferSize: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrNonConformantStringBufferSize: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrEncapsulatedUnionBufferSize: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrNonEncapsulatedUnionBufferSize: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrByteCountPointerBufferSize: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrXmitOrRepAsBufferSize: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrUserMarshalBufferSize: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrInterfacePointerBufferSize: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrContextHandleSize: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrPointerMemorySize: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING } ],
  NdrContextHandleMemorySize: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING } ],
  NdrCsArrayMemorySize: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING } ],
  NdrCsTagMemorySize: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING } ],
  NdrSimpleStructMemorySize: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING } ],
  NdrConformantStructMemorySize: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING } ],
  NdrConformantVaryingStructMemorySize: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING } ],
  NdrComplexStructMemorySize: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING } ],
  NdrFixedArrayMemorySize: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING } ],
  NdrConformantArrayMemorySize: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING } ],
  NdrConformantVaryingArrayMemorySize: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING } ],
  NdrVaryingArrayMemorySize: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING } ],
  NdrComplexArrayMemorySize: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING } ],
  NdrConformantStringMemorySize: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING } ],
  NdrNonConformantStringMemorySize: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING } ],
  NdrEncapsulatedUnionMemorySize: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING } ],
  NdrNonEncapsulatedUnionMemorySize: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING } ],
  NdrXmitOrRepAsMemorySize: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING } ],
  NdrUserMarshalMemorySize: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING } ],
  NdrInterfacePointerMemorySize: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING } ],
  NdrPointerFree: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrCsArrayFree: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrSimpleStructFree: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrConformantStructFree: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrConformantVaryingStructFree: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrComplexStructFree: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrFixedArrayFree: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrConformantArrayFree: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrConformantVaryingArrayFree: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrVaryingArrayFree: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrComplexArrayFree: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrEncapsulatedUnionFree: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrNonEncapsulatedUnionFree: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrByteCountPointerFree: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrXmitOrRepAsFree: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrUserMarshalFree: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrInterfacePointerFree: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrConvert2: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING, NumberParams: long } ],
  NdrConvert: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING } ],
  NdrUserMarshalSimpleTypeConvert: [ VoidT, { pFlags: ulong.Δ, pBuffer: uchar.Δ, FormatChar: uchar } ],
  NdrClientInitializeNew: [ VoidT, { pRpcMsg: PRPC_MESSAGE, pStubMsg: PMIDL_STUB_MESSAGE, pStubDescriptor: PMIDL_STUB_DESC, ProcNum: uint } ],
  NdrServerInitializeNew: [ VoidT, { pRpcMsg: PRPC_MESSAGE, pStubMsg: PMIDL_STUB_MESSAGE, pStubDescriptor: PMIDL_STUB_DESC } ],
  NdrServerInitializePartial: [ VoidT, { pRpcMsg: PRPC_MESSAGE, pStubMsg: PMIDL_STUB_MESSAGE, pStubDescriptor: PMIDL_STUB_DESC, RequestedBufferSize: ulong } ],
  NdrClientInitialize: [ VoidT, { pRpcMsg: PRPC_MESSAGE, pStubMsg: PMIDL_STUB_MESSAGE, pStubDescriptor: PMIDL_STUB_DESC, ProcNum: uint } ],
  NdrServerInitialize: [ VoidT, { pRpcMsg: PRPC_MESSAGE, pStubMsg: PMIDL_STUB_MESSAGE, pStubDescriptor: PMIDL_STUB_DESC } ],
  NdrServerInitializeUnmarshall: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pStubDescriptor: PMIDL_STUB_DESC, pRpcMsg: PRPC_MESSAGE } ],
  NdrServerInitializeMarshall: [ VoidT, { pRpcMsg: PRPC_MESSAGE, pStubMsg: PMIDL_STUB_MESSAGE } ],
  NdrGetBuffer: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, BufferLength: ulong, Handle: RPC_BINDING_HANDLE } ],
  NdrNsGetBuffer: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, BufferLength: ulong, Handle: RPC_BINDING_HANDLE } ],
  NdrSendReceive: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pBufferEnd: uchar.Δ } ],
  NdrNsSendReceive: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pBufferEnd: uchar.Δ, pAutoHandle: VoidT.Δ.Δ } ],
  NdrFreeBuffer: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE } ],
  NdrGetDcomProtocolVersion: [ long, { pStubMsg: PMIDL_STUB_MESSAGE, pVersion: uint.Δ } ],
  NdrClientCall2: [ uint, { pStubDescriptor: PMIDL_STUB_DESC, pFormat: PFORMAT_STRING } ],
  NdrClientCall: [ uint, { pStubDescriptor: PMIDL_STUB_DESC, pFormat: PFORMAT_STRING } ],
  NdrAsyncClientCall: [ uint, { pStubDescriptor: PMIDL_STUB_DESC, pFormat: PFORMAT_STRING } ],
  NdrDcomAsyncClientCall: [ uint, { pStubDescriptor: PMIDL_STUB_DESC, pFormat: PFORMAT_STRING } ],
  NdrAsyncServerCall: [ VoidT, { pRpcMsg: PRPC_MESSAGE } ],
  NdrAsyncStubCall: [ VoidT, { pThis: IRpcStubBuffer.Δ, pChannel: IRpcChannelBuffer.Δ, pRpcMsg: PRPC_MESSAGE, pdwStubPhase: ulong.Δ } ],
  NdrDcomAsyncStubCall: [ VoidT, { pThis: IRpcStubBuffer.Δ, pChannel: IRpcChannelBuffer.Δ, pRpcMsg: PRPC_MESSAGE, pdwStubPhase: ulong.Δ } ],
  NdrStubCall2: [ VoidT, { pThis: VoidT.Δ, pChannel: VoidT.Δ, pRpcMsg: PRPC_MESSAGE, pdwStubPhase: ulong.Δ } ],
  NdrServerCall2: [ VoidT, { pRpcMsg: PRPC_MESSAGE } ],
  NdrStubCall: [ VoidT, { pThis: VoidT.Δ, pChannel: VoidT.Δ, pRpcMsg: PRPC_MESSAGE, pdwStubPhase: ulong.Δ } ],
  NdrServerCall: [ VoidT, { pRpcMsg: PRPC_MESSAGE } ],
  NdrServerUnmarshall: [ VoidT, { pChannel: VoidT.Δ, pRpcMsg: PRPC_MESSAGE, pStubMsg: PMIDL_STUB_MESSAGE, pStubDescriptor: PMIDL_STUB_DESC, pFormat: PFORMAT_STRING, pParamList: VoidT.Δ } ],
  NdrServerMarshall: [ VoidT, { pThis: VoidT.Δ, pChannel: VoidT.Δ, pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING } ],
  NdrMapCommAndFaultStatus: [ long, { pStubMsg: PMIDL_STUB_MESSAGE, pCommStatus: ulong.Δ, pFaultStatus: ulong.Δ, Status: RPC_STATUS } ],
  RpcSsAllocate: [ VoidT, { Size: size_t } ],
  RpcSsDisableAllocate: [ VoidT, {  } ],
  RpcSsEnableAllocate: [ VoidT, {  } ],
  RpcSsFree: [ VoidT, { NodeToFree: VoidT.Δ } ],
  RpcSsGetThreadHandle: [ VoidT.Δ, {  } ],
  RpcSsSetClientAllocFree: [ VoidT, { ClientAlloc: new CallbackT(VoidT.Δ, [uint]).Δ, ClientFree: new CallbackT(VoidT, [VoidT.Δ]).Δ } ],
  RpcSsSetThreadHandle: [ VoidT, { Id: RPC_SS_THREAD_HANDLE } ],
  RpcSsSwapClientAllocFree: [ VoidT, { ClientAlloc: new CallbackT(VoidT.Δ, [uint]).Δ, ClientFree: new CallbackT(VoidT, [VoidT.Δ]).Δ, OldClientAlloc: new CallbackT(VoidT.Δ, [uint]).Δ.Δ, OldClientFree: new CallbackT(VoidT, [VoidT.Δ]).Δ.Δ } ],
  RpcSmAllocate: [ VoidT, { Size: size_t, pStatus: long.Δ } ],
  RpcSmClientFree: [ long, { pNodeToFree: VoidT.Δ } ],
  RpcSmDestroyClientContext: [ long, { ContextHandle: VoidT.Δ.Δ } ],
  RpcSmDisableAllocate: [ long, {  } ],
  RpcSmEnableAllocate: [ long, {  } ],
  RpcSmFree: [ long, { NodeToFree: VoidT.Δ } ],
  RpcSmGetThreadHandle: [ VoidT.Δ, { pStatus: long.Δ } ],
  RpcSmSetClientAllocFree: [ long, { ClientAlloc: new CallbackT(VoidT.Δ, [uint]).Δ, ClientFree: new CallbackT(VoidT, [VoidT.Δ]).Δ } ],
  RpcSmSetThreadHandle: [ long, { Id: RPC_SS_THREAD_HANDLE } ],
  RpcSmSwapClientAllocFree: [ long, { ClientAlloc: new CallbackT(VoidT.Δ, [uint]).Δ, ClientFree: new CallbackT(VoidT, [VoidT.Δ]).Δ, OldClientAlloc: new CallbackT(VoidT.Δ, [uint]).Δ.Δ, OldClientFree: new CallbackT(VoidT, [VoidT.Δ]).Δ.Δ } ],
  NdrRpcSsEnableAllocate: [ VoidT, { pMessage: PMIDL_STUB_MESSAGE } ],
  NdrRpcSsDisableAllocate: [ VoidT, { pMessage: PMIDL_STUB_MESSAGE } ],
  NdrRpcSmSetClientToOsf: [ VoidT, { pMessage: PMIDL_STUB_MESSAGE } ],
  NdrRpcSmClientAllocate: [ VoidT, { Size: size_t } ],
  NdrRpcSmClientFree: [ VoidT, { NodeToFree: VoidT.Δ } ],
  NdrRpcSsDefaultAllocate: [ VoidT, { Size: size_t } ],
  NdrRpcSsDefaultFree: [ VoidT, { NodeToFree: VoidT.Δ } ],
  NdrFullPointerXlatInit: [ VOIDPTR, { NumberOfPointers: ulong, XlatSide: XLAT_SIDE } ],
  NdrFullPointerXlatFree: [ VoidT, { pXlatTables: PFULL_PTR_XLAT_TABLES } ],
  NdrAllocate: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, Len: size_t } ],
  NdrClearOutParameters: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING, ArgAddr: VoidT.Δ } ],
  NdrOleAllocate: [ VoidT, { Size: size_t } ],
  NdrOleFree: [ VoidT, { NodeToFree: VoidT.Δ } ],
  NdrGetUserMarshalInfo: [ long, { pFlags: ulong.Δ, InformationLevel: ulong, pMarshalInfo: uint.Δ } ],
  NdrCreateServerInterfaceFromStub: [ long, { pStub: IRpcStubBuffer.Δ, pServerIf: uint.Δ } ],
  NdrClientCall3: [ uint, { pProxyInfo: uint.Δ, nProcNum: ulong, pReturnValue: VoidT.Δ } ],
  Ndr64AsyncClientCall: [ uint, { pProxyInfo: uint.Δ, nProcNum: ulong, pReturnValue: VoidT.Δ } ],
  Ndr64DcomAsyncClientCall: [ uint, { pProxyInfo: uint.Δ, nProcNum: ulong, pReturnValue: VoidT.Δ } ],
  Ndr64AsyncServerCall: [ VoidT, { pRpcMsg: PRPC_MESSAGE } ],
  Ndr64AsyncServerCall64: [ VoidT, { pRpcMsg: PRPC_MESSAGE } ],
  Ndr64AsyncServerCallAll: [ VoidT, { pRpcMsg: PRPC_MESSAGE } ],
  Ndr64AsyncStubCall: [ VoidT, { pThis: IRpcStubBuffer.Δ, pChannel: IRpcChannelBuffer.Δ, pRpcMsg: PRPC_MESSAGE, pdwStubPhase: ulong.Δ } ],
  Ndr64DcomAsyncStubCall: [ VoidT, { pThis: IRpcStubBuffer.Δ, pChannel: IRpcChannelBuffer.Δ, pRpcMsg: PRPC_MESSAGE, pdwStubPhase: ulong.Δ } ],
  NdrStubCall3: [ VoidT, { pThis: VoidT.Δ, pChannel: VoidT.Δ, pRpcMsg: PRPC_MESSAGE, pdwStubPhase: ulong.Δ } ],
  NdrServerCallAll: [ VoidT, { pRpcMsg: PRPC_MESSAGE } ],
  NdrServerCallNdr64: [ VoidT, { pRpcMsg: PRPC_MESSAGE } ],
  NdrServerCall3: [ VoidT, { pRpcMsg: PRPC_MESSAGE } ],
  NdrPartialIgnoreClientMarshall: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: VoidT.Δ } ],
  NdrPartialIgnoreServerUnmarshall: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: VoidT.Δ.Δ } ],
  NdrPartialIgnoreClientBufferSize: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: VoidT.Δ } ],
  NdrPartialIgnoreServerInitialize: [ VoidT, { pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: VoidT.Δ.Δ, pFormat: PFORMAT_STRING } ],
  RpcUserFree: [ VoidT, { AsyncHandle: handle_t, pBuffer: VoidT.Δ } ],
  SCardEstablishContext: [ long, { dwScope: DWORD, pvReserved1: LPCVOID, pvReserved2: LPCVOID, phContext: LPSCARDCONTEXT } ],
  SCardReleaseContext: [ long, { hContext: SCARDCONTEXT } ],
  SCardIsValidContext: [ long, { hContext: SCARDCONTEXT } ],
  SCardListReaderGroupsA: [ long, { hContext: SCARDCONTEXT, mszGroups: LPSTR, pcchGroups: LPDWORD } ],
  SCardListReaderGroupsW: [ long, { hContext: SCARDCONTEXT, mszGroups: LPWSTR, pcchGroups: LPDWORD } ],
  SCardListReadersA: [ long, { hContext: SCARDCONTEXT, mszGroups: LPCSTR, mszReaders: LPSTR, pcchReaders: LPDWORD } ],
  SCardListReadersW: [ long, { hContext: SCARDCONTEXT, mszGroups: LPCWSTR, mszReaders: LPWSTR, pcchReaders: LPDWORD } ],
  SCardListCardsA: [ long, { hContext: SCARDCONTEXT, pbAtr: LPCBYTE, rgquidInterfaces: LPCGUID, cguidInterfaceCount: DWORD, mszCards: LPSTR, pcchCards: LPDWORD } ],
  SCardListCardsW: [ long, { hContext: SCARDCONTEXT, pbAtr: LPCBYTE, rgquidInterfaces: LPCGUID, cguidInterfaceCount: DWORD, mszCards: LPWSTR, pcchCards: LPDWORD } ],
  SCardListInterfacesA: [ long, { hContext: SCARDCONTEXT, szCard: LPCSTR, pguidInterfaces: LPGUID, pcguidInterfaces: LPDWORD } ],
  SCardListInterfacesW: [ long, { hContext: SCARDCONTEXT, szCard: LPCWSTR, pguidInterfaces: LPGUID, pcguidInterfaces: LPDWORD } ],
  SCardGetProviderIdA: [ long, { hContext: SCARDCONTEXT, szCard: LPCSTR, pguidProviderId: LPGUID } ],
  SCardGetProviderIdW: [ long, { hContext: SCARDCONTEXT, szCard: LPCWSTR, pguidProviderId: LPGUID } ],
  SCardGetCardTypeProviderNameA: [ long, { hContext: SCARDCONTEXT, szCardName: LPCSTR, dwProviderId: DWORD, szProvider: LPSTR, pcchProvider: LPDWORD } ],
  SCardGetCardTypeProviderNameW: [ long, { hContext: SCARDCONTEXT, szCardName: LPCWSTR, dwProviderId: DWORD, szProvider: LPWSTR, pcchProvider: LPDWORD } ],
  SCardIntroduceReaderGroupA: [ long, { hContext: SCARDCONTEXT, szGroupName: LPCSTR } ],
  SCardIntroduceReaderGroupW: [ long, { hContext: SCARDCONTEXT, szGroupName: LPCWSTR } ],
  SCardForgetReaderGroupA: [ long, { hContext: SCARDCONTEXT, szGroupName: LPCSTR } ],
  SCardForgetReaderGroupW: [ long, { hContext: SCARDCONTEXT, szGroupName: LPCWSTR } ],
  SCardIntroduceReaderA: [ long, { hContext: SCARDCONTEXT, szReaderName: LPCSTR, szDeviceName: LPCSTR } ],
  SCardIntroduceReaderW: [ long, { hContext: SCARDCONTEXT, szReaderName: LPCWSTR, szDeviceName: LPCWSTR } ],
  SCardForgetReaderA: [ long, { hContext: SCARDCONTEXT, szReaderName: LPCSTR } ],
  SCardForgetReaderW: [ long, { hContext: SCARDCONTEXT, szReaderName: LPCWSTR } ],
  SCardAddReaderToGroupA: [ long, { hContext: SCARDCONTEXT, szReaderName: LPCSTR, szGroupName: LPCSTR } ],
  SCardAddReaderToGroupW: [ long, { hContext: SCARDCONTEXT, szReaderName: LPCWSTR, szGroupName: LPCWSTR } ],
  SCardRemoveReaderFromGroupA: [ long, { hContext: SCARDCONTEXT, szReaderName: LPCSTR, szGroupName: LPCSTR } ],
  SCardRemoveReaderFromGroupW: [ long, { hContext: SCARDCONTEXT, szReaderName: LPCWSTR, szGroupName: LPCWSTR } ],
  SCardIntroduceCardTypeA: [ long, { hContext: SCARDCONTEXT, szCardName: LPCSTR, pguidPrimaryProvider: LPCGUID, rgguidInterfaces: LPCGUID, dwInterfaceCount: DWORD, pbAtr: LPCBYTE, pbAtrMask: LPCBYTE, cbAtrLen: DWORD } ],
  SCardIntroduceCardTypeW: [ long, { hContext: SCARDCONTEXT, szCardName: LPCWSTR, pguidPrimaryProvider: LPCGUID, rgguidInterfaces: LPCGUID, dwInterfaceCount: DWORD, pbAtr: LPCBYTE, pbAtrMask: LPCBYTE, cbAtrLen: DWORD } ],
  SCardSetCardTypeProviderNameA: [ long, { hContext: SCARDCONTEXT, szCardName: LPCSTR, dwProviderId: DWORD, szProvider: LPCSTR } ],
  SCardSetCardTypeProviderNameW: [ long, { hContext: SCARDCONTEXT, szCardName: LPCWSTR, dwProviderId: DWORD, szProvider: LPCWSTR } ],
  SCardForgetCardTypeA: [ long, { hContext: SCARDCONTEXT, szCardName: LPCSTR } ],
  SCardForgetCardTypeW: [ long, { hContext: SCARDCONTEXT, szCardName: LPCWSTR } ],
  SCardFreeMemory: [ long, { hContext: SCARDCONTEXT, pvMem: LPCVOID } ],
  SCardAccessStartedEvent: [ VoidT.Δ, {  } ],
  SCardReleaseStartedEvent: [ VoidT, {  } ],
  SCardLocateCardsA: [ long, { hContext: SCARDCONTEXT, mszCards: LPCSTR, rgReaderStates: LPSCARD_READERSTATEA, cReaders: DWORD } ],
  SCardLocateCardsW: [ long, { hContext: SCARDCONTEXT, mszCards: LPCWSTR, rgReaderStates: LPSCARD_READERSTATEW, cReaders: DWORD } ],
  SCardLocateCardsByATRA: [ long, { hContext: SCARDCONTEXT, rgAtrMasks: LPSCARD_ATRMASK, cAtrs: DWORD, rgReaderStates: LPSCARD_READERSTATEA, cReaders: DWORD } ],
  SCardLocateCardsByATRW: [ long, { hContext: SCARDCONTEXT, rgAtrMasks: LPSCARD_ATRMASK, cAtrs: DWORD, rgReaderStates: LPSCARD_READERSTATEW, cReaders: DWORD } ],
  SCardGetStatusChangeA: [ long, { hContext: SCARDCONTEXT, dwTimeout: DWORD, rgReaderStates: LPSCARD_READERSTATEA, cReaders: DWORD } ],
  SCardGetStatusChangeW: [ long, { hContext: SCARDCONTEXT, dwTimeout: DWORD, rgReaderStates: LPSCARD_READERSTATEW, cReaders: DWORD } ],
  SCardCancel: [ long, { hContext: SCARDCONTEXT } ],
  SCardConnectA: [ long, { hContext: SCARDCONTEXT, szReader: LPCSTR, dwShareMode: DWORD, dwPreferredProtocols: DWORD, phCard: LPSCARDHANDLE, pdwActiveProtocol: LPDWORD } ],
  SCardConnectW: [ long, { hContext: SCARDCONTEXT, szReader: LPCWSTR, dwShareMode: DWORD, dwPreferredProtocols: DWORD, phCard: LPSCARDHANDLE, pdwActiveProtocol: LPDWORD } ],
  SCardReconnect: [ long, { hCard: SCARDHANDLE, dwShareMode: DWORD, dwPreferredProtocols: DWORD, dwInitialization: DWORD, pdwActiveProtocol: LPDWORD } ],
  SCardDisconnect: [ long, { hCard: SCARDHANDLE, dwDisposition: DWORD } ],
  SCardBeginTransaction: [ long, { hCard: SCARDHANDLE } ],
  SCardEndTransaction: [ long, { hCard: SCARDHANDLE, dwDisposition: DWORD } ],
  SCardCancelTransaction: [ long, { hCard: SCARDHANDLE } ],
  SCardState: [ long, { hCard: SCARDHANDLE, pdwState: LPDWORD, pdwProtocol: LPDWORD, pbAtr: LPBYTE, pcbAtrLen: LPDWORD } ],
  SCardStatusA: [ long, { hCard: SCARDHANDLE, mszReaderNames: LPSTR, pcchReaderLen: LPDWORD, pdwState: LPDWORD, pdwProtocol: LPDWORD, pbAtr: LPBYTE, pcbAtrLen: LPDWORD } ],
  SCardStatusW: [ long, { hCard: SCARDHANDLE, mszReaderNames: LPWSTR, pcchReaderLen: LPDWORD, pdwState: LPDWORD, pdwProtocol: LPDWORD, pbAtr: LPBYTE, pcbAtrLen: LPDWORD } ],
  SCardTransmit: [ long, { hCard: SCARDHANDLE, pioSendPci: LPCSCARD_IO_REQUEST, pbSendBuffer: LPCBYTE, cbSendLength: DWORD, pioRecvPci: LPSCARD_IO_REQUEST, pbRecvBuffer: LPBYTE, pcbRecvLength: LPDWORD } ],
  SCardGetTransmitCount: [ long, { hCard: SCARDHANDLE, pcTransmitCount: LPDWORD } ],
  SCardControl: [ long, { hCard: SCARDHANDLE, dwControlCode: DWORD, lpInBuffer: LPCVOID, cbInBufferSize: DWORD, lpOutBuffer: LPVOID, cbOutBufferSize: DWORD, lpBytesReturned: LPDWORD } ],
  SCardGetAttrib: [ long, { hCard: SCARDHANDLE, dwAttrId: DWORD, pbAttr: LPBYTE, pcbAttrLen: LPDWORD } ],
  SCardSetAttrib: [ long, { hCard: SCARDHANDLE, dwAttrId: DWORD, pbAttr: LPCBYTE, cbAttrLen: DWORD } ],
  SCardUIDlgSelectCardA: [ long, { LPOPENCARDNAME_EXA: LPOPENCARDNAME_EXA } ],
  SCardUIDlgSelectCardW: [ long, { LPOPENCARDNAME_EXW: LPOPENCARDNAME_EXW } ],
  GetOpenCardNameA: [ long, { LPOPENCARDNAMEA: LPOPENCARDNAMEA } ],
  GetOpenCardNameW: [ long, { LPOPENCARDNAMEW: LPOPENCARDNAMEW } ],
  SCardDlgExtendedError: [ long, {  } ],
  SCardReadCacheA: [ long, { hContext: SCARDCONTEXT, CardIdentifier: uint.Δ, FreshnessCounter: DWORD, LookupName: LPSTR, Data: PBYTE, DataLen: ulong.Δ } ],
  SCardReadCacheW: [ long, { hContext: SCARDCONTEXT, CardIdentifier: uint.Δ, FreshnessCounter: DWORD, LookupName: LPWSTR, Data: PBYTE, DataLen: ulong.Δ } ],
  SCardWriteCacheA: [ long, { hContext: SCARDCONTEXT, CardIdentifier: uint.Δ, FreshnessCounter: DWORD, LookupName: LPSTR, Data: PBYTE, DataLen: DWORD } ],
  SCardWriteCacheW: [ long, { hContext: SCARDCONTEXT, CardIdentifier: uint.Δ, FreshnessCounter: DWORD, LookupName: LPWSTR, Data: PBYTE, DataLen: DWORD } ],
  CreatePropertySheetPageA: [ VOIDPTR, { constPropSheetPagePointer: LPCPROPSHEETPAGEA } ],
  CreatePropertySheetPageW: [ VOIDPTR, { constPropSheetPagePointer: LPCPROPSHEETPAGEW } ],
  DestroyPropertySheetPage: [ int, { HPROPSHEETPAGE: HPROPSHEETPAGE } ],
  PropertySheetA: [ int, { LPCPROPSHEETHEADERA: LPCPROPSHEETHEADERA } ],
  PropertySheetW: [ int, { LPCPROPSHEETHEADERW: LPCPROPSHEETHEADERW } ],
  EnumPrintersA: [ int, { Flags: DWORD, Name: LPSTR, Level: DWORD, pPrinterEnum: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD, pcReturned: LPDWORD } ],
  EnumPrintersW: [ int, { Flags: DWORD, Name: LPWSTR, Level: DWORD, pPrinterEnum: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD, pcReturned: LPDWORD } ],
  GetSpoolFileHandle: [ VoidT.Δ, { hPrinter: HANDLE } ],
  CommitSpoolData: [ VoidT.Δ, { hPrinter: HANDLE, hSpoolFile: HANDLE, cbCommit: DWORD } ],
  CloseSpoolFileHandle: [ int, { hPrinter: HANDLE, hSpoolFile: HANDLE } ],
  OpenPrinterA: [ int, { pPrinterName: LPSTR, phPrinter: LPHANDLE, pDefault: LPPRINTER_DEFAULTSA } ],
  OpenPrinterW: [ int, { pPrinterName: LPWSTR, phPrinter: LPHANDLE, pDefault: LPPRINTER_DEFAULTSW } ],
  ResetPrinterA: [ int, { hPrinter: HANDLE, pDefault: LPPRINTER_DEFAULTSA } ],
  ResetPrinterW: [ int, { hPrinter: HANDLE, pDefault: LPPRINTER_DEFAULTSW } ],
  SetJobA: [ int, { hPrinter: HANDLE, JobId: DWORD, Level: DWORD, pJob: LPBYTE, Command: DWORD } ],
  SetJobW: [ int, { hPrinter: HANDLE, JobId: DWORD, Level: DWORD, pJob: LPBYTE, Command: DWORD } ],
  GetJobA: [ int, { hPrinter: HANDLE, JobId: DWORD, Level: DWORD, pJob: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD } ],
  GetJobW: [ int, { hPrinter: HANDLE, JobId: DWORD, Level: DWORD, pJob: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD } ],
  EnumJobsA: [ int, { hPrinter: HANDLE, FirstJob: DWORD, NoJobs: DWORD, Level: DWORD, pJob: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD, pcReturned: LPDWORD } ],
  EnumJobsW: [ int, { hPrinter: HANDLE, FirstJob: DWORD, NoJobs: DWORD, Level: DWORD, pJob: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD, pcReturned: LPDWORD } ],
  AddPrinterA: [ VoidT.Δ, { pName: LPSTR, Level: DWORD, pPrinter: LPBYTE } ],
  AddPrinterW: [ VoidT.Δ, { pName: LPWSTR, Level: DWORD, pPrinter: LPBYTE } ],
  DeletePrinter: [ int, { hPrinter: HANDLE } ],
  SetPrinterA: [ int, { hPrinter: HANDLE, Level: DWORD, pPrinter: LPBYTE, Command: DWORD } ],
  SetPrinterW: [ int, { hPrinter: HANDLE, Level: DWORD, pPrinter: LPBYTE, Command: DWORD } ],
  GetPrinterA: [ int, { hPrinter: HANDLE, Level: DWORD, pPrinter: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD } ],
  GetPrinterW: [ int, { hPrinter: HANDLE, Level: DWORD, pPrinter: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD } ],
  AddPrinterDriverA: [ int, { pName: LPSTR, Level: DWORD, pDriverInfo: LPBYTE } ],
  AddPrinterDriverW: [ int, { pName: LPWSTR, Level: DWORD, pDriverInfo: LPBYTE } ],
  AddPrinterDriverExA: [ int, { pName: LPSTR, Level: DWORD, pDriverInfo: LPBYTE, dwFileCopyFlags: DWORD } ],
  AddPrinterDriverExW: [ int, { pName: LPWSTR, Level: DWORD, pDriverInfo: LPBYTE, dwFileCopyFlags: DWORD } ],
  EnumPrinterDriversA: [ int, { pName: LPSTR, pEnvironment: LPSTR, Level: DWORD, pDriverInfo: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD, pcReturned: LPDWORD } ],
  EnumPrinterDriversW: [ int, { pName: LPWSTR, pEnvironment: LPWSTR, Level: DWORD, pDriverInfo: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD, pcReturned: LPDWORD } ],
  GetPrinterDriverA: [ int, { hPrinter: HANDLE, pEnvironment: LPSTR, Level: DWORD, pDriverInfo: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD } ],
  GetPrinterDriverW: [ int, { hPrinter: HANDLE, pEnvironment: LPWSTR, Level: DWORD, pDriverInfo: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD } ],
  GetPrinterDriverDirectoryA: [ int, { pName: LPSTR, pEnvironment: LPSTR, Level: DWORD, pDriverDirectory: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD } ],
  GetPrinterDriverDirectoryW: [ int, { pName: LPWSTR, pEnvironment: LPWSTR, Level: DWORD, pDriverDirectory: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD } ],
  DeletePrinterDriverA: [ int, { pName: LPSTR, pEnvironment: LPSTR, pDriverName: LPSTR } ],
  DeletePrinterDriverW: [ int, { pName: LPWSTR, pEnvironment: LPWSTR, pDriverName: LPWSTR } ],
  DeletePrinterDriverExA: [ int, { pName: LPSTR, pEnvironment: LPSTR, pDriverName: LPSTR, dwDeleteFlag: DWORD, dwVersionFlag: DWORD } ],
  DeletePrinterDriverExW: [ int, { pName: LPWSTR, pEnvironment: LPWSTR, pDriverName: LPWSTR, dwDeleteFlag: DWORD, dwVersionFlag: DWORD } ],
  AddPrintProcessorA: [ int, { pName: LPSTR, pEnvironment: LPSTR, pPathName: LPSTR, pPrintProcessorName: LPSTR } ],
  AddPrintProcessorW: [ int, { pName: LPWSTR, pEnvironment: LPWSTR, pPathName: LPWSTR, pPrintProcessorName: LPWSTR } ],
  EnumPrintProcessorsA: [ int, { pName: LPSTR, pEnvironment: LPSTR, Level: DWORD, pPrintProcessorInfo: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD, pcReturned: LPDWORD } ],
  EnumPrintProcessorsW: [ int, { pName: LPWSTR, pEnvironment: LPWSTR, Level: DWORD, pPrintProcessorInfo: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD, pcReturned: LPDWORD } ],
  GetPrintProcessorDirectoryA: [ int, { pName: LPSTR, pEnvironment: LPSTR, Level: DWORD, pPrintProcessorInfo: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD } ],
  GetPrintProcessorDirectoryW: [ int, { pName: LPWSTR, pEnvironment: LPWSTR, Level: DWORD, pPrintProcessorInfo: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD } ],
  EnumPrintProcessorDatatypesA: [ int, { pName: LPSTR, pPrintProcessorName: LPSTR, Level: DWORD, pDatatypes: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD, pcReturned: LPDWORD } ],
  EnumPrintProcessorDatatypesW: [ int, { pName: LPWSTR, pPrintProcessorName: LPWSTR, Level: DWORD, pDatatypes: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD, pcReturned: LPDWORD } ],
  DeletePrintProcessorA: [ int, { pName: LPSTR, pEnvironment: LPSTR, pPrintProcessorName: LPSTR } ],
  DeletePrintProcessorW: [ int, { pName: LPWSTR, pEnvironment: LPWSTR, pPrintProcessorName: LPWSTR } ],
  StartDocPrinterA: [ ulong, { hPrinter: HANDLE, Level: DWORD, pDocInfo: LPBYTE } ],
  StartDocPrinterW: [ ulong, { hPrinter: HANDLE, Level: DWORD, pDocInfo: LPBYTE } ],
  StartPagePrinter: [ int, { hPrinter: HANDLE } ],
  WritePrinter: [ int, { hPrinter: HANDLE, pBuf: LPVOID, cbBuf: DWORD, pcWritten: LPDWORD } ],
  FlushPrinter: [ int, { hPrinter: HANDLE, pBuf: LPVOID, cbBuf: DWORD, pcWritten: LPDWORD, cSleep: DWORD } ],
  EndPagePrinter: [ int, { hPrinter: HANDLE } ],
  AbortPrinter: [ int, { hPrinter: HANDLE } ],
  ReadPrinter: [ int, { hPrinter: HANDLE, pBuf: LPVOID, cbBuf: DWORD, pNoBytesRead: LPDWORD } ],
  EndDocPrinter: [ int, { hPrinter: HANDLE } ],
  AddJobA: [ int, { hPrinter: HANDLE, Level: DWORD, pData: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD } ],
  AddJobW: [ int, { hPrinter: HANDLE, Level: DWORD, pData: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD } ],
  ScheduleJob: [ int, { hPrinter: HANDLE, JobId: DWORD } ],
  PrinterProperties: [ int, { hWnd: HWND, hPrinter: HANDLE } ],
  DocumentPropertiesA: [ long, { hWnd: HWND, hPrinter: HANDLE, pDeviceName: LPSTR, pDevModeOutput: PDEVMODEA, pDevModeInput: PDEVMODEA, fMode: DWORD } ],
  DocumentPropertiesW: [ long, { hWnd: HWND, hPrinter: HANDLE, pDeviceName: LPWSTR, pDevModeOutput: PDEVMODEW, pDevModeInput: PDEVMODEW, fMode: DWORD } ],
  AdvancedDocumentPropertiesA: [ long, { hWnd: HWND, hPrinter: HANDLE, pDeviceName: LPSTR, pDevModeOutput: PDEVMODEA, pDevModeInput: PDEVMODEA } ],
  AdvancedDocumentPropertiesW: [ long, { hWnd: HWND, hPrinter: HANDLE, pDeviceName: LPWSTR, pDevModeOutput: PDEVMODEW, pDevModeInput: PDEVMODEW } ],
  ExtDeviceMode: [ long, { hWnd: HWND, hInst: HANDLE, pDevModeOutput: LPDEVMODEA, pDeviceName: LPSTR, pPort: LPSTR, pDevModeInput: LPDEVMODEA, pProfile: LPSTR, fMode: DWORD } ],
  GetPrinterDataA: [ ulong, { hPrinter: HANDLE, pValueName: LPSTR, pType: LPDWORD, pData: LPBYTE, nSize: DWORD, pcbNeeded: LPDWORD } ],
  GetPrinterDataW: [ ulong, { hPrinter: HANDLE, pValueName: LPWSTR, pType: LPDWORD, pData: LPBYTE, nSize: DWORD, pcbNeeded: LPDWORD } ],
  GetPrinterDataExA: [ ulong, { hPrinter: HANDLE, pKeyName: LPCSTR, pValueName: LPCSTR, pType: LPDWORD, pData: LPBYTE, nSize: DWORD, pcbNeeded: LPDWORD } ],
  GetPrinterDataExW: [ ulong, { hPrinter: HANDLE, pKeyName: LPCWSTR, pValueName: LPCWSTR, pType: LPDWORD, pData: LPBYTE, nSize: DWORD, pcbNeeded: LPDWORD } ],
  EnumPrinterDataA: [ ulong, { hPrinter: HANDLE, dwIndex: DWORD, pValueName: LPSTR, cbValueName: DWORD, pcbValueName: LPDWORD, pType: LPDWORD, pData: LPBYTE, cbData: DWORD, pcbData: LPDWORD } ],
  EnumPrinterDataW: [ ulong, { hPrinter: HANDLE, dwIndex: DWORD, pValueName: LPWSTR, cbValueName: DWORD, pcbValueName: LPDWORD, pType: LPDWORD, pData: LPBYTE, cbData: DWORD, pcbData: LPDWORD } ],
  EnumPrinterDataExA: [ ulong, { hPrinter: HANDLE, pKeyName: LPCSTR, pEnumValues: LPBYTE, cbEnumValues: DWORD, pcbEnumValues: LPDWORD, pnEnumValues: LPDWORD } ],
  EnumPrinterDataExW: [ ulong, { hPrinter: HANDLE, pKeyName: LPCWSTR, pEnumValues: LPBYTE, cbEnumValues: DWORD, pcbEnumValues: LPDWORD, pnEnumValues: LPDWORD } ],
  EnumPrinterKeyA: [ ulong, { hPrinter: HANDLE, pKeyName: LPCSTR, pSubkey: LPSTR, cbSubkey: DWORD, pcbSubkey: LPDWORD } ],
  EnumPrinterKeyW: [ ulong, { hPrinter: HANDLE, pKeyName: LPCWSTR, pSubkey: LPWSTR, cbSubkey: DWORD, pcbSubkey: LPDWORD } ],
  SetPrinterDataA: [ ulong, { hPrinter: HANDLE, pValueName: LPSTR, Type: DWORD, pData: LPBYTE, cbData: DWORD } ],
  SetPrinterDataW: [ ulong, { hPrinter: HANDLE, pValueName: LPWSTR, Type: DWORD, pData: LPBYTE, cbData: DWORD } ],
  SetPrinterDataExA: [ ulong, { hPrinter: HANDLE, pKeyName: LPCSTR, pValueName: LPCSTR, Type: DWORD, pData: LPBYTE, cbData: DWORD } ],
  SetPrinterDataExW: [ ulong, { hPrinter: HANDLE, pKeyName: LPCWSTR, pValueName: LPCWSTR, Type: DWORD, pData: LPBYTE, cbData: DWORD } ],
  DeletePrinterDataA: [ ulong, { hPrinter: HANDLE, pValueName: LPSTR } ],
  DeletePrinterDataW: [ ulong, { hPrinter: HANDLE, pValueName: LPWSTR } ],
  DeletePrinterDataExA: [ ulong, { hPrinter: HANDLE, pKeyName: LPCSTR, pValueName: LPCSTR } ],
  DeletePrinterDataExW: [ ulong, { hPrinter: HANDLE, pKeyName: LPCWSTR, pValueName: LPCWSTR } ],
  DeletePrinterKeyA: [ ulong, { hPrinter: HANDLE, pKeyName: LPCSTR } ],
  DeletePrinterKeyW: [ ulong, { hPrinter: HANDLE, pKeyName: LPCWSTR } ],
  WaitForPrinterChange: [ ulong, { hPrinter: HANDLE, Flags: DWORD } ],
  FindFirstPrinterChangeNotification: [ VoidT.Δ, { hPrinter: HANDLE, fdwFilter: DWORD, fdwOptions: DWORD, pPrinterNotifyOptions: PVOID } ],
  FindNextPrinterChangeNotification: [ int, { hChange: HANDLE, pdwChange: PDWORD, pvReserved: LPVOID, ppPrinterNotifyInfo: VoidT.Δ.Δ } ],
  FreePrinterNotifyInfo: [ int, { pPrinterNotifyInfo: PPRINTER_NOTIFY_INFO } ],
  FindClosePrinterChangeNotification: [ int, { hChange: HANDLE } ],
  PrinterMessageBoxA: [ ulong, { hPrinter: HANDLE, Error: DWORD, hWnd: HWND, pText: LPSTR, pCaption: LPSTR, dwType: DWORD } ],
  PrinterMessageBoxW: [ ulong, { hPrinter: HANDLE, Error: DWORD, hWnd: HWND, pText: LPWSTR, pCaption: LPWSTR, dwType: DWORD } ],
  ClosePrinter: [ int, { hPrinter: HANDLE } ],
  AddFormA: [ int, { hPrinter: HANDLE, Level: DWORD, pForm: LPBYTE } ],
  AddFormW: [ int, { hPrinter: HANDLE, Level: DWORD, pForm: LPBYTE } ],
  DeleteFormA: [ int, { hPrinter: HANDLE, pFormName: LPSTR } ],
  DeleteFormW: [ int, { hPrinter: HANDLE, pFormName: LPWSTR } ],
  GetFormA: [ int, { hPrinter: HANDLE, pFormName: LPSTR, Level: DWORD, pForm: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD } ],
  GetFormW: [ int, { hPrinter: HANDLE, pFormName: LPWSTR, Level: DWORD, pForm: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD } ],
  SetFormA: [ int, { hPrinter: HANDLE, pFormName: LPSTR, Level: DWORD, pForm: LPBYTE } ],
  SetFormW: [ int, { hPrinter: HANDLE, pFormName: LPWSTR, Level: DWORD, pForm: LPBYTE } ],
  EnumFormsA: [ int, { hPrinter: HANDLE, Level: DWORD, pForm: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD, pcReturned: LPDWORD } ],
  EnumFormsW: [ int, { hPrinter: HANDLE, Level: DWORD, pForm: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD, pcReturned: LPDWORD } ],
  EnumMonitorsA: [ int, { pName: LPSTR, Level: DWORD, pMonitor: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD, pcReturned: LPDWORD } ],
  EnumMonitorsW: [ int, { pName: LPWSTR, Level: DWORD, pMonitor: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD, pcReturned: LPDWORD } ],
  AddMonitorA: [ int, { pName: LPSTR, Level: DWORD, pMonitors: LPBYTE } ],
  AddMonitorW: [ int, { pName: LPWSTR, Level: DWORD, pMonitors: LPBYTE } ],
  DeleteMonitorA: [ int, { pName: LPSTR, pEnvironment: LPSTR, pMonitorName: LPSTR } ],
  DeleteMonitorW: [ int, { pName: LPWSTR, pEnvironment: LPWSTR, pMonitorName: LPWSTR } ],
  EnumPortsA: [ int, { pName: LPSTR, Level: DWORD, pPort: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD, pcReturned: LPDWORD } ],
  EnumPortsW: [ int, { pName: LPWSTR, Level: DWORD, pPort: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD, pcReturned: LPDWORD } ],
  AddPortA: [ int, { pName: LPSTR, hWnd: HWND, pMonitorName: LPSTR } ],
  AddPortW: [ int, { pName: LPWSTR, hWnd: HWND, pMonitorName: LPWSTR } ],
  ConfigurePortA: [ int, { pName: LPSTR, hWnd: HWND, pPortName: LPSTR } ],
  ConfigurePortW: [ int, { pName: LPWSTR, hWnd: HWND, pPortName: LPWSTR } ],
  DeletePortA: [ int, { pName: LPSTR, hWnd: HWND, pPortName: LPSTR } ],
  DeletePortW: [ int, { pName: LPWSTR, hWnd: HWND, pPortName: LPWSTR } ],
  XcvDataW: [ int, { hXcv: HANDLE, pszDataName: PCWSTR, pInputData: PBYTE, cbInputData: DWORD, pOutputData: PBYTE, cbOutputData: DWORD, pcbOutputNeeded: PDWORD, pdwStatus: PDWORD } ],
  GetDefaultPrinterA: [ int, { pszBuffer: LPSTR, pcchBuffer: LPDWORD } ],
  GetDefaultPrinterW: [ int, { pszBuffer: LPWSTR, pcchBuffer: LPDWORD } ],
  SetDefaultPrinterA: [ int, { pszPrinter: LPCSTR } ],
  SetDefaultPrinterW: [ int, { pszPrinter: LPCWSTR } ],
  SetPortA: [ int, { pName: LPSTR, pPortName: LPSTR, dwLevel: DWORD, pPortInfo: LPBYTE } ],
  SetPortW: [ int, { pName: LPWSTR, pPortName: LPWSTR, dwLevel: DWORD, pPortInfo: LPBYTE } ],
  AddPrinterConnectionA: [ int, { pName: LPSTR } ],
  AddPrinterConnectionW: [ int, { pName: LPWSTR } ],
  DeletePrinterConnectionA: [ int, { pName: LPSTR } ],
  DeletePrinterConnectionW: [ int, { pName: LPWSTR } ],
  ConnectToPrinterDlg: [ VoidT.Δ, { hwnd: HWND, Flags: DWORD } ],
  AddPrintProvidorA: [ int, { pName: LPSTR, level: DWORD, pProvidorInfo: LPBYTE } ],
  AddPrintProvidorW: [ int, { pName: LPWSTR, level: DWORD, pProvidorInfo: LPBYTE } ],
  DeletePrintProvidorA: [ int, { pName: LPSTR, pEnvironment: LPSTR, pPrintProvidorName: LPSTR } ],
  DeletePrintProvidorW: [ int, { pName: LPWSTR, pEnvironment: LPWSTR, pPrintProvidorName: LPWSTR } ],
  IsValidDevmodeA: [ int, { pDevmode: PDEVMODEA, DevmodeSize: size_t } ],
  IsValidDevmodeW: [ int, { pDevmode: PDEVMODEW, DevmodeSize: size_t } ],
  OpenPrinter2A: [ int, { pPrinterName: LPCSTR, phPrinter: LPHANDLE, pDefault: PPRINTER_DEFAULTSA, pOptions: PPRINTER_OPTIONSA } ],
  OpenPrinter2W: [ int, { pPrinterName: LPCWSTR, phPrinter: LPHANDLE, pDefault: PPRINTER_DEFAULTSW, pOptions: PPRINTER_OPTIONSW } ],
  AddPrinterConnection2A: [ int, { hWnd: HWND, pszName: LPCSTR, dwLevel: DWORD, pConnectionInfo: PVOID } ],
  AddPrinterConnection2W: [ int, { hWnd: HWND, pszName: LPCWSTR, dwLevel: DWORD, pConnectionInfo: PVOID } ],
  InstallPrinterDriverFromPackageA: [ long, { pszServer: LPCSTR, pszInfPath: LPCSTR, pszDriverName: LPCSTR, pszEnvironment: LPCSTR, dwFlags: DWORD } ],
  InstallPrinterDriverFromPackageW: [ long, { pszServer: LPCWSTR, pszInfPath: LPCWSTR, pszDriverName: LPCWSTR, pszEnvironment: LPCWSTR, dwFlags: DWORD } ],
  UploadPrinterDriverPackageA: [ long, { pszServer: LPCSTR, pszInfPath: LPCSTR, pszEnvironment: LPCSTR, dwFlags: DWORD, hwnd: HWND, pszDestInfPath: LPSTR, pcchDestInfPath: PULONG } ],
  UploadPrinterDriverPackageW: [ long, { pszServer: LPCWSTR, pszInfPath: LPCWSTR, pszEnvironment: LPCWSTR, dwFlags: DWORD, hwnd: HWND, pszDestInfPath: LPWSTR, pcchDestInfPath: PULONG } ],
  GetCorePrinterDriversA: [ long, { pszServer: LPCSTR, pszEnvironment: LPCSTR, pszzCoreDriverDependencies: LPCSTR, cCorePrinterDrivers: DWORD, pCorePrinterDrivers: PCORE_PRINTER_DRIVERA } ],
  GetCorePrinterDriversW: [ long, { pszServer: LPCWSTR, pszEnvironment: LPCWSTR, pszzCoreDriverDependencies: LPCWSTR, cCorePrinterDrivers: DWORD, pCorePrinterDrivers: PCORE_PRINTER_DRIVERW } ],
  CorePrinterDriverInstalledA: [ long, { pszServer: LPCSTR, pszEnvironment: LPCSTR, CoreDriverGUID: GUID, ftDriverDate: FILETIME, dwlDriverVersion: DWORDLONG, pbDriverInstalled: int.Δ } ],
  CorePrinterDriverInstalledW: [ long, { pszServer: LPCWSTR, pszEnvironment: LPCWSTR, CoreDriverGUID: GUID, ftDriverDate: FILETIME, dwlDriverVersion: DWORDLONG, pbDriverInstalled: int.Δ } ],
  GetPrinterDriverPackagePathA: [ long, { pszServer: LPCSTR, pszEnvironment: LPCSTR, pszLanguage: LPCSTR, pszPackageID: LPCSTR, pszDriverPackageCab: LPSTR, cchDriverPackageCab: DWORD, pcchRequiredSize: LPDWORD } ],
  GetPrinterDriverPackagePathW: [ long, { pszServer: LPCWSTR, pszEnvironment: LPCWSTR, pszLanguage: LPCWSTR, pszPackageID: LPCWSTR, pszDriverPackageCab: LPWSTR, cchDriverPackageCab: DWORD, pcchRequiredSize: LPDWORD } ],
  DeletePrinterDriverPackageA: [ long, { pszServer: LPCSTR, pszInfPath: LPCSTR, pszEnvironment: LPCSTR } ],
  DeletePrinterDriverPackageW: [ long, { pszServer: LPCWSTR, pszInfPath: LPCWSTR, pszEnvironment: LPCWSTR } ],
  ReportJobProcessingProgress: [ long, { printerHandle: HANDLE, jobId: ULONG, jobOperation: EPrintXPSJobOperation, jobProgress: EPrintXPSJobProgress } ],
  GetPrinterDriver2A: [ int, { hWnd: HWND, hPrinter: HANDLE, pEnvironment: LPSTR, Level: DWORD, pDriverInfo: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD } ],
  GetPrinterDriver2W: [ int, { hWnd: HWND, hPrinter: HANDLE, pEnvironment: LPWSTR, Level: DWORD, pDriverInfo: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD } ],
  GetPrintExecutionData: [ int, { pData: uint.Δ } ],
  _set_purecall_handler: [ _purecall_handler, { _Handler: _purecall_handler } ],
  _get_purecall_handler: [ _purecall_handler, {  } ],
  _set_invalid_parameter_handler: [ _invalid_parameter_handler, { _Handler: _invalid_parameter_handler } ],
  _get_invalid_parameter_handler: [ _invalid_parameter_handler, {  } ],
  _errno: [ VoidT, {  } ],
  _set_errno: [ int, { _Value: int } ],
  _get_errno: [ int, { _Value: int.Δ } ],
  __doserrno: [ VoidT, {  } ],
  _set_doserrno: [ int, { _Value: ulong } ],
  _get_doserrno: [ int, { _Value: ulong.Δ } ],
  __sys_errlist: [ VoidT, {  } ],
  __sys_nerr: [ VoidT, {  } ],
  _get_pgmptr: [ int, { _Value: int8.Δ.Δ } ],
  _get_wpgmptr: [ int, { _Value: ushort.Δ.Δ } ],
  _set_fmode: [ int, { _Mode: int } ],
  _get_fmode: [ int, { _PMode: int.Δ } ],
  exit: [ VoidT, { _Code: int } ],
  _exit: [ VoidT, { _Code: int } ],
  abort: [ VoidT, {  } ],
  _set_abort_behavior: [ VoidT, { _Flags: uint, _Mask: uint } ],
  abs: [ VoidT, { _X: int } ],
  labs: [ VoidT, { _X: long } ],
  llabs: [ VoidT, { _X: longlong } ],
  _abs64: [ VoidT, { longlong: longlong } ],
  atexit: [ VoidT, { UNEXPOSED.Δ: UNEXPOSED.Δ } ],
  atof: [ VoidT, { _String: int8.Δ } ],
  _atof_l: [ VoidT, { _String: int8.Δ, _Locale: _locale_t } ],
  atoi: [ VoidT, { _Str: int8.Δ } ],
  _atoi_l: [ VoidT, { _Str: int8.Δ, _Locale: _locale_t } ],
  atol: [ VoidT, { _Str: int8.Δ } ],
  _atol_l: [ VoidT, { _Str: int8.Δ, _Locale: _locale_t } ],
  bsearch_s: [ VoidT, { _Key: VoidT.Δ, _Base: VoidT.Δ, _NumOfElements: rsize_t, _SizeOfElements: rsize_t, _PtFuncCompare: UNEXPOSED.Δ, _Context: VoidT.Δ } ],
  bsearch: [ VoidT, { _Key: VoidT.Δ, _Base: VoidT.Δ, _NumOfElements: size_t, _SizeOfElements: size_t, _PtFuncCompare: UNEXPOSED.Δ } ],
  qsort_s: [ VoidT, { _Base: VoidT.Δ, _NumOfElements: rsize_t, _SizeOfElements: rsize_t, _PtFuncCompare: UNEXPOSED.Δ, _Context: VoidT.Δ } ],
  qsort: [ VoidT, { _Base: VoidT.Δ, _NumOfElements: size_t, _SizeOfElements: size_t, _PtFuncCompare: UNEXPOSED.Δ } ],
  _byteswap_ushort: [ VoidT, { _Short: ushort } ],
  _byteswap_ulong: [ VoidT, { _Long: ulong } ],
  _byteswap_uint64: [ VoidT, { _Int64: ulonglong } ],
  div: [ uint, { _Numerator: int, _Denominator: int } ],
  getenv: [ VoidT, { _VarName: int8.Δ } ],
  getenv_s: [ int, { _ReturnSize: uint.Δ, _DstBuf: int8.Δ, _DstSize: rsize_t, _VarName: int8.Δ } ],
  _dupenv_s: [ int, { _PBuffer: int8.Δ.Δ, _PBufferSizeInBytes: uint.Δ, _VarName: int8.Δ } ],
  _itoa_s: [ int, { _Value: int, _DstBuf: int8.Δ, _Size: size_t, _Radix: int } ],
  _itoa: [ VoidT, { _Value: int, _Dest: int8.Δ, _Radix: int } ],
  _i64toa_s: [ int, { _Val: longlong, _DstBuf: int8.Δ, _Size: size_t, _Radix: int } ],
  _i64toa: [ VoidT, { _Val: longlong, _DstBuf: int8.Δ, _Radix: int } ],
  _ui64toa_s: [ int, { _Val: ulonglong, _DstBuf: int8.Δ, _Size: size_t, _Radix: int } ],
  _ui64toa: [ VoidT, { _Val: ulonglong, _DstBuf: int8.Δ, _Radix: int } ],
  _atoi64: [ VoidT, { _String: int8.Δ } ],
  _atoi64_l: [ VoidT, { _String: int8.Δ, _Locale: _locale_t } ],
  _strtoi64: [ VoidT, { _String: int8.Δ, _EndPtr: int8.Δ.Δ, _Radix: int } ],
  _strtoi64_l: [ VoidT, { _String: int8.Δ, _EndPtr: int8.Δ.Δ, _Radix: int, _Locale: _locale_t } ],
  _strtoui64: [ VoidT, { _String: int8.Δ, _EndPtr: int8.Δ.Δ, _Radix: int } ],
  _strtoui64_l: [ VoidT, { _String: int8.Δ, _EndPtr: int8.Δ.Δ, _Radix: int, _Locale: _locale_t } ],
  ldiv: [ uint, { _Numerator: long, _Denominator: long } ],
  lldiv: [ uint, { _Numerator: longlong, _Denominator: longlong } ],
  _ltoa_s: [ int, { _Val: long, _DstBuf: int8.Δ, _Size: size_t, _Radix: int } ],
  _ltoa: [ VoidT, { _Value: long, _Dest: int8.Δ, _Radix: int } ],
  mblen: [ VoidT, { _Ch: int8.Δ, _MaxCount: size_t } ],
  _mblen_l: [ VoidT, { _Ch: int8.Δ, _MaxCount: size_t, _Locale: _locale_t } ],
  _mbstrlen: [ uint, { _Str: int8.Δ } ],
  _mbstrlen_l: [ uint, { _Str: int8.Δ, _Locale: _locale_t } ],
  _mbstrnlen: [ uint, { _Str: int8.Δ, _MaxCount: size_t } ],
  _mbstrnlen_l: [ uint, { _Str: int8.Δ, _MaxCount: size_t, _Locale: _locale_t } ],
  mbtowc: [ VoidT, { _DstCh: ushort.Δ, _SrcCh: int8.Δ, _SrcSizeInBytes: size_t } ],
  _mbtowc_l: [ VoidT, { _DstCh: ushort.Δ, _SrcCh: int8.Δ, _SrcSizeInBytes: size_t, _Locale: _locale_t } ],
  mbstowcs_s: [ int, { _PtNumOfCharConverted: uint.Δ, _DstBuf: ushort.Δ, _SizeInWords: size_t, _SrcBuf: int8.Δ, _MaxCount: size_t } ],
  mbstowcs: [ uint, { _Dest: ushort.Δ, _Source: int8.Δ, _MaxCount: size_t } ],
  _mbstowcs_s_l: [ int, { _PtNumOfCharConverted: uint.Δ, _DstBuf: ushort.Δ, _SizeInWords: size_t, _SrcBuf: int8.Δ, _MaxCount: size_t, _Locale: _locale_t } ],
  _mbstowcs_l: [ uint, { _Dest: ushort.Δ, _Source: int8.Δ, _MaxCount: size_t, _Locale: _locale_t } ],
  rand: [ VoidT, {  } ],
  _set_error_mode: [ VoidT, { _Mode: int } ],
  srand: [ VoidT, { _Seed: uint } ],
  strtod: [ VoidT, { _Str: int8.Δ, _EndPtr: int8.Δ.Δ } ],
  _strtod_l: [ VoidT, { _Str: int8.Δ, _EndPtr: int8.Δ.Δ, _Locale: _locale_t } ],
  strtol: [ VoidT, { _Str: int8.Δ, _EndPtr: int8.Δ.Δ, _Radix: int } ],
  _strtol_l: [ VoidT, { _Str: int8.Δ, _EndPtr: int8.Δ.Δ, _Radix: int, _Locale: _locale_t } ],
  strtoul: [ VoidT, { _Str: int8.Δ, _EndPtr: int8.Δ.Δ, _Radix: int } ],
  _strtoul_l: [ VoidT, { _Str: int8.Δ, _EndPtr: int8.Δ.Δ, _Radix: int, _Locale: _locale_t } ],
  system: [ VoidT, { _Command: int8.Δ } ],
  _ultoa_s: [ int, { _Val: ulong, _DstBuf: int8.Δ, _Size: size_t, _Radix: int } ],
  _ultoa: [ VoidT, { _Value: ulong, _Dest: int8.Δ, _Radix: int } ],
  wctomb: [ VoidT, { _MbCh: int8.Δ, _WCh: wchar_t } ],
  _wctomb_l: [ VoidT, { _MbCh: int8.Δ, _WCh: wchar_t, _Locale: _locale_t } ],
  wctomb_s: [ int, { _SizeConverted: int.Δ, _MbCh: int8.Δ, _SizeInBytes: rsize_t, _WCh: wchar_t } ],
  _wctomb_s_l: [ int, { _SizeConverted: int.Δ, _MbCh: int8.Δ, _SizeInBytes: size_t, _WCh: wchar_t, _Locale: _locale_t } ],
  wcstombs_s: [ int, { _PtNumOfCharConverted: uint.Δ, _Dst: int8.Δ, _DstSizeInBytes: size_t, _Src: ushort.Δ, _MaxCountInBytes: size_t } ],
  wcstombs: [ uint, { _Dest: int8.Δ, _Source: ushort.Δ, _MaxCount: size_t } ],
  _wcstombs_s_l: [ int, { _PtNumOfCharConverted: uint.Δ, _Dst: int8.Δ, _DstSizeInBytes: size_t, _Src: ushort.Δ, _MaxCountInBytes: size_t, _Locale: _locale_t } ],
  _wcstombs_l: [ uint, { _Dest: int8.Δ, _Source: ushort.Δ, _MaxCount: size_t, _Locale: _locale_t } ],
  calloc: [ VoidT, { _Count: size_t, _Size: size_t } ],
  free: [ VoidT, { _Memory: VoidT.Δ } ],
  malloc: [ VoidT, { _Size: size_t } ],
  realloc: [ VoidT, { _Memory: VoidT.Δ, _NewSize: size_t } ],
  _recalloc: [ VoidT, { _Memory: VoidT.Δ, _Count: size_t, _Size: size_t } ],
  _aligned_free: [ VoidT, { _Memory: VoidT.Δ } ],
  _aligned_malloc: [ VoidT, { _Size: size_t, _Alignment: size_t } ],
  _aligned_offset_malloc: [ VoidT, { _Size: size_t, _Alignment: size_t, _Offset: size_t } ],
  _aligned_realloc: [ VoidT, { _Memory: VoidT.Δ, _NewSize: size_t, _Alignment: size_t } ],
  _aligned_recalloc: [ VoidT, { _Memory: VoidT.Δ, _Count: size_t, _Size: size_t, _Alignment: size_t } ],
  _aligned_offset_realloc: [ VoidT, { _Memory: VoidT.Δ, _NewSize: size_t, _Alignment: size_t, _Offset: size_t } ],
  _aligned_offset_recalloc: [ VoidT, { _Memory: VoidT.Δ, _Count: size_t, _Size: size_t, _Alignment: size_t, _Offset: size_t } ],
  _aligned_msize: [ uint, { _Memory: VoidT.Δ, _Alignment: size_t, _Offset: size_t } ],
  _itow_s: [ int, { _Val: int, _DstBuf: ushort.Δ, _SizeInWords: size_t, _Radix: int } ],
  _itow: [ ushort, { _Value: int, _Dest: ushort.Δ, _Radix: int } ],
  _ltow_s: [ int, { _Val: long, _DstBuf: ushort.Δ, _SizeInWords: size_t, _Radix: int } ],
  _ltow: [ ushort, { _Value: long, _Dest: ushort.Δ, _Radix: int } ],
  _ultow_s: [ int, { _Val: ulong, _DstBuf: ushort.Δ, _SizeInWords: size_t, _Radix: int } ],
  _ultow: [ ushort, { _Value: ulong, _Dest: ushort.Δ, _Radix: int } ],
  wcstod: [ VoidT, { _Str: ushort.Δ, _EndPtr: ushort.Δ.Δ } ],
  _wcstod_l: [ VoidT, { _Str: ushort.Δ, _EndPtr: ushort.Δ.Δ, _Locale: _locale_t } ],
  wcstol: [ VoidT, { _Str: ushort.Δ, _EndPtr: ushort.Δ.Δ, _Radix: int } ],
  _wcstol_l: [ VoidT, { _Str: ushort.Δ, _EndPtr: ushort.Δ.Δ, _Radix: int, _Locale: _locale_t } ],
  wcstoul: [ VoidT, { _Str: ushort.Δ, _EndPtr: ushort.Δ.Δ, _Radix: int } ],
  _wcstoul_l: [ VoidT, { _Str: ushort.Δ, _EndPtr: ushort.Δ.Δ, _Radix: int, _Locale: _locale_t } ],
  _wgetenv: [ ushort, { _VarName: ushort.Δ } ],
  _wgetenv_s: [ int, { _ReturnSize: uint.Δ, _DstBuf: ushort.Δ, _DstSizeInWords: size_t, _VarName: ushort.Δ } ],
  _wdupenv_s: [ int, { _Buffer: ushort.Δ.Δ, _BufferSizeInWords: uint.Δ, _VarName: ushort.Δ } ],
  _wsystem: [ VoidT, { _Command: ushort.Δ } ],
  _wtof: [ VoidT, { _Str: ushort.Δ } ],
  _wtof_l: [ VoidT, { _Str: ushort.Δ, _Locale: _locale_t } ],
  _wtoi: [ VoidT, { _Str: ushort.Δ } ],
  _wtoi_l: [ VoidT, { _Str: ushort.Δ, _Locale: _locale_t } ],
  _wtol: [ VoidT, { _Str: ushort.Δ } ],
  _wtol_l: [ VoidT, { _Str: ushort.Δ, _Locale: _locale_t } ],
  _i64tow_s: [ int, { _Val: longlong, _DstBuf: ushort.Δ, _SizeInWords: size_t, _Radix: int } ],
  _i64tow: [ ushort, { _Val: longlong, _DstBuf: ushort.Δ, _Radix: int } ],
  _ui64tow_s: [ int, { _Val: ulonglong, _DstBuf: ushort.Δ, _SizeInWords: size_t, _Radix: int } ],
  _ui64tow: [ ushort, { _Val: ulonglong, _DstBuf: ushort.Δ, _Radix: int } ],
  _wtoi64: [ VoidT, { _Str: ushort.Δ } ],
  _wtoi64_l: [ VoidT, { _Str: ushort.Δ, _Locale: _locale_t } ],
  _wcstoi64: [ VoidT, { _Str: ushort.Δ, _EndPtr: ushort.Δ.Δ, _Radix: int } ],
  _wcstoi64_l: [ VoidT, { _Str: ushort.Δ, _EndPtr: ushort.Δ.Δ, _Radix: int, _Locale: _locale_t } ],
  _wcstoui64: [ VoidT, { _Str: ushort.Δ, _EndPtr: ushort.Δ.Δ, _Radix: int } ],
  _wcstoui64_l: [ VoidT, { _Str: ushort.Δ, _EndPtr: ushort.Δ.Δ, _Radix: int, _Locale: _locale_t } ],
  _fullpath: [ VoidT, { _FullPath: int8.Δ, _Path: int8.Δ, _SizeInBytes: size_t } ],
  _ecvt_s: [ int, { _DstBuf: int8.Δ, _Size: size_t, _Val: double, _NumOfDights: int, _PtDec: int.Δ, _PtSign: int.Δ } ],
  _ecvt: [ VoidT, { _Val: double, _NumOfDigits: int, _PtDec: int.Δ, _PtSign: int.Δ } ],
  _fcvt_s: [ int, { _DstBuf: int8.Δ, _Size: size_t, _Val: double, _NumOfDec: int, _PtDec: int.Δ, _PtSign: int.Δ } ],
  _fcvt: [ VoidT, { _Val: double, _NumOfDec: int, _PtDec: int.Δ, _PtSign: int.Δ } ],
  _gcvt_s: [ int, { _DstBuf: int8.Δ, _Size: size_t, _Val: double, _NumOfDigits: int } ],
  _gcvt: [ VoidT, { _Val: double, _NumOfDigits: int, _DstBuf: int8.Δ } ],
  _atodbl: [ VoidT, { _Result: uint.Δ, _Str: int8.Δ } ],
  _atoldbl: [ VoidT, { _Result: uint.Δ, _Str: int8.Δ } ],
  _atoflt: [ VoidT, { _Result: uint.Δ, _Str: int8.Δ } ],
  _atodbl_l: [ VoidT, { _Result: uint.Δ, _Str: int8.Δ, _Locale: _locale_t } ],
  _atoldbl_l: [ VoidT, { _Result: uint.Δ, _Str: int8.Δ, _Locale: _locale_t } ],
  _atoflt_l: [ VoidT, { _Result: uint.Δ, _Str: int8.Δ, _Locale: _locale_t } ],
  _lrotl: [ VoidT, { _Val: ulong, _Shift: int } ],
  _lrotr: [ VoidT, { _Val: ulong, _Shift: int } ],
  _makepath_s: [ int, { _PathResult: int8.Δ, _SizeInWords: size_t, _Drive: int8.Δ, _Dir: int8.Δ, _Filename: int8.Δ, _Ext: int8.Δ } ],
  _makepath: [ VoidT, { _Path: int8.Δ, _Drive: int8.Δ, _Dir: int8.Δ, _Filename: int8.Δ, _Ext: int8.Δ } ],
  _onexit: [ _onexit_t, { _Func: _onexit_t } ],
  perror: [ VoidT, { _ErrMsg: int8.Δ } ],
  _putenv: [ VoidT, { _EnvString: int8.Δ } ],
  _putenv_s: [ int, { _Name: int8.Δ, _Value: int8.Δ } ],
  _searchenv_s: [ int, { _Filename: int8.Δ, _EnvVar: int8.Δ, _ResultPath: int8.Δ, _SizeInBytes: size_t } ],
  _searchenv: [ VoidT, { _Filename: int8.Δ, _EnvVar: int8.Δ, _ResultPath: int8.Δ } ],
  _splitpath: [ VoidT, { _FullPath: int8.Δ, _Drive: int8.Δ, _Dir: int8.Δ, _Filename: int8.Δ, _Ext: int8.Δ } ],
  _splitpath_s: [ int, { _FullPath: int8.Δ, _Drive: int8.Δ, _DriveSize: size_t, _Dir: int8.Δ, _DirSize: size_t, _Filename: int8.Δ, _FilenameSize: size_t, _Ext: int8.Δ, _ExtSize: size_t } ],
  _swab: [ VoidT, { _Buf1: int8.Δ, _Buf2: int8.Δ, _SizeInBytes: int } ],
  _wfullpath: [ ushort, { _FullPath: ushort.Δ, _Path: ushort.Δ, _SizeInWords: size_t } ],
  _wmakepath_s: [ int, { _PathResult: ushort.Δ, _SIZE: size_t, _Drive: ushort.Δ, _Dir: ushort.Δ, _Filename: ushort.Δ, _Ext: ushort.Δ } ],
  _wmakepath: [ VoidT, { _ResultPath: ushort.Δ, _Drive: ushort.Δ, _Dir: ushort.Δ, _Filename: ushort.Δ, _Ext: ushort.Δ } ],
  _wperror: [ VoidT, { _ErrMsg: ushort.Δ } ],
  _wputenv: [ VoidT, { _EnvString: ushort.Δ } ],
  _wputenv_s: [ int, { _Name: ushort.Δ, _Value: ushort.Δ } ],
  _wsearchenv_s: [ int, { _Filename: ushort.Δ, _EnvVar: ushort.Δ, _ResultPath: ushort.Δ, _SizeInWords: size_t } ],
  _wsearchenv: [ VoidT, { _Filename: ushort.Δ, _EnvVar: ushort.Δ, _ResultPath: ushort.Δ } ],
  _wsplitpath: [ VoidT, { _FullPath: ushort.Δ, _Drive: ushort.Δ, _Dir: ushort.Δ, _Filename: ushort.Δ, _Ext: ushort.Δ } ],
  _wsplitpath_s: [ int, { _FullPath: ushort.Δ, _Drive: ushort.Δ, _DriveSize: size_t, _Dir: ushort.Δ, _DirSize: size_t, _Filename: ushort.Δ, _FilenameSize: size_t, _Ext: ushort.Δ, _ExtSize: size_t } ],
  _seterrormode: [ VoidT, { _Mode: int } ],
  _beep: [ VoidT, { _Frequency: uint, _Duration: uint } ],
  _sleep: [ VoidT, { _Duration: ulong } ],
  ecvt: [ VoidT, { _Val: double, _NumOfDigits: int, _PtDec: int.Δ, _PtSign: int.Δ } ],
  fcvt: [ VoidT, { _Val: double, _NumOfDec: int, _PtDec: int.Δ, _PtSign: int.Δ } ],
  gcvt: [ VoidT, { _Val: double, _NumOfDigits: int, _DstBuf: int8.Δ } ],
  itoa: [ VoidT, { _Val: int, _DstBuf: int8.Δ, _Radix: int } ],
  ltoa: [ VoidT, { _Val: long, _DstBuf: int8.Δ, _Radix: int } ],
  putenv: [ VoidT, { _EnvString: int8.Δ } ],
  swab: [ VoidT, { _Buf1: int8.Δ, _Buf2: int8.Δ, _SizeInBytes: int } ],
  ultoa: [ VoidT, { _Val: ulong, _Dstbuf: int8.Δ, _Radix: int } ],
  onexit: [ _onexit_t, { _Func: _onexit_t } ],
  IUnknown_QueryInterface_Proxy: [ long, { This: uint.Δ, riid: uint.Δ, ppvObject: VoidT.Δ.Δ } ],
  IUnknown_QueryInterface_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IUnknown_AddRef_Proxy: [ ulong, { This: uint.Δ } ],
  IUnknown_AddRef_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IUnknown_Release_Proxy: [ ulong, { This: uint.Δ } ],
  IUnknown_Release_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IClassFactory_RemoteCreateInstance_Proxy: [ long, { This: uint.Δ, riid: uint.Δ, ppvObject: uint.Δ.Δ } ],
  IClassFactory_RemoteCreateInstance_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IClassFactory_RemoteLockServer_Proxy: [ long, { This: uint.Δ, fLock: BOOL } ],
  IClassFactory_RemoteLockServer_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IClassFactory_CreateInstance_Proxy: [ long, { This: uint.Δ, pUnkOuter: uint.Δ, riid: uint.Δ, ppvObject: VoidT.Δ.Δ } ],
  IClassFactory_CreateInstance_Stub: [ long, { This: uint.Δ, riid: uint.Δ, ppvObject: uint.Δ.Δ } ],
  IClassFactory_LockServer_Proxy: [ long, { This: uint.Δ, fLock: BOOL } ],
  IClassFactory_LockServer_Stub: [ long, { This: uint.Δ, fLock: BOOL } ],
  IEnumUnknown_RemoteNext_Proxy: [ long, { This: uint.Δ, celt: ULONG, rgelt: uint.Δ.Δ, pceltFetched: ulong.Δ } ],
  IEnumUnknown_RemoteNext_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IBindCtx_RemoteSetBindOptions_Proxy: [ long, { This: uint.Δ, pbindopts: uint.Δ } ],
  IBindCtx_RemoteSetBindOptions_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IBindCtx_RemoteGetBindOptions_Proxy: [ long, { This: uint.Δ, pbindopts: uint.Δ } ],
  IBindCtx_RemoteGetBindOptions_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IEnumMoniker_RemoteNext_Proxy: [ long, { This: uint.Δ, celt: ULONG, rgelt: uint.Δ.Δ, pceltFetched: ulong.Δ } ],
  IEnumMoniker_RemoteNext_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IRunnableObject_RemoteIsRunning_Proxy: [ long, { This: uint.Δ } ],
  IRunnableObject_RemoteIsRunning_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IMoniker_RemoteBindToObject_Proxy: [ long, { This: uint.Δ, pbc: uint.Δ, pmkToLeft: uint.Δ, riidResult: uint.Δ, ppvResult: uint.Δ.Δ } ],
  IMoniker_RemoteBindToObject_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IMoniker_RemoteBindToStorage_Proxy: [ long, { This: uint.Δ, pbc: uint.Δ, pmkToLeft: uint.Δ, riid: uint.Δ, ppvObj: uint.Δ.Δ } ],
  IMoniker_RemoteBindToStorage_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IEnumString_RemoteNext_Proxy: [ long, { This: uint.Δ, celt: ULONG, rgelt: ushort.Δ.Δ, pceltFetched: ulong.Δ } ],
  IEnumString_RemoteNext_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  ISequentialStream_RemoteRead_Proxy: [ long, { This: uint.Δ, pv: uchar.Δ, cb: ULONG, pcbRead: ulong.Δ } ],
  ISequentialStream_RemoteRead_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  ISequentialStream_RemoteWrite_Proxy: [ long, { This: uint.Δ, pv: uchar.Δ, cb: ULONG, pcbWritten: ulong.Δ } ],
  ISequentialStream_RemoteWrite_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IStream_RemoteSeek_Proxy: [ long, { This: uint.Δ, dlibMove: LARGE_INTEGER, dwOrigin: DWORD, plibNewPosition: uint.Δ } ],
  IStream_RemoteSeek_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IStream_RemoteCopyTo_Proxy: [ long, { This: uint.Δ, pstm: uint.Δ, cb: ULARGE_INTEGER, pcbRead: uint.Δ, pcbWritten: uint.Δ } ],
  IStream_RemoteCopyTo_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IEnumSTATSTG_RemoteNext_Proxy: [ long, { This: uint.Δ, celt: ULONG, rgelt: uint.Δ, pceltFetched: ulong.Δ } ],
  IEnumSTATSTG_RemoteNext_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IStorage_RemoteOpenStream_Proxy: [ long, { This: uint.Δ, pwcsName: ushort.Δ, cbReserved1: ulong, reserved1: uchar.Δ, grfMode: DWORD, reserved2: DWORD, ppstm: uint.Δ.Δ } ],
  IStorage_RemoteOpenStream_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IStorage_RemoteCopyTo_Proxy: [ long, { This: uint.Δ, ciidExclude: DWORD, rgiidExclude: uint.Δ, snbExclude: SNB, pstgDest: uint.Δ } ],
  IStorage_RemoteCopyTo_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IStorage_RemoteEnumElements_Proxy: [ long, { This: uint.Δ, reserved1: DWORD, cbReserved2: ulong, reserved2: uchar.Δ, reserved3: DWORD, ppenum: uint.Δ.Δ } ],
  IStorage_RemoteEnumElements_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  ILockBytes_RemoteReadAt_Proxy: [ long, { This: uint.Δ, ulOffset: ULARGE_INTEGER, pv: uchar.Δ, cb: ULONG, pcbRead: ulong.Δ } ],
  ILockBytes_RemoteReadAt_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  ILockBytes_RemoteWriteAt_Proxy: [ long, { This: uint.Δ, ulOffset: ULARGE_INTEGER, pv: uchar.Δ, cb: ULONG, pcbWritten: ulong.Δ } ],
  ILockBytes_RemoteWriteAt_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IEnumFORMATETC_RemoteNext_Proxy: [ long, { This: uint.Δ, celt: ULONG, rgelt: uint.Δ, pceltFetched: ulong.Δ } ],
  IEnumFORMATETC_RemoteNext_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IEnumSTATDATA_RemoteNext_Proxy: [ long, { This: uint.Δ, celt: ULONG, rgelt: uint.Δ, pceltFetched: ulong.Δ } ],
  IEnumSTATDATA_RemoteNext_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IAdviseSink_RemoteOnDataChange_Proxy: [ long, { This: uint.Δ, pFormatetc: uint.Δ, pStgmed: uint.Δ } ],
  IAdviseSink_RemoteOnDataChange_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IAdviseSink_RemoteOnViewChange_Proxy: [ long, { This: uint.Δ, dwAspect: DWORD, lindex: LONG } ],
  IAdviseSink_RemoteOnViewChange_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IAdviseSink_RemoteOnRename_Proxy: [ long, { This: uint.Δ, pmk: uint.Δ } ],
  IAdviseSink_RemoteOnRename_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IAdviseSink_RemoteOnSave_Proxy: [ long, { This: uint.Δ } ],
  IAdviseSink_RemoteOnSave_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IAdviseSink_RemoteOnClose_Proxy: [ long, { This: uint.Δ } ],
  IAdviseSink_RemoteOnClose_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy: [ long, { This: uint.Δ, pFormatetc: uint.Δ, pStgmed: uint.Δ } ],
  AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy: [ long, { This: uint.Δ } ],
  AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy: [ long, { This: uint.Δ, dwAspect: DWORD, lindex: LONG } ],
  AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy: [ long, { This: uint.Δ } ],
  AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  AsyncIAdviseSink_Begin_RemoteOnRename_Proxy: [ long, { This: uint.Δ, pmk: uint.Δ } ],
  AsyncIAdviseSink_Begin_RemoteOnRename_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  AsyncIAdviseSink_Finish_RemoteOnRename_Proxy: [ long, { This: uint.Δ } ],
  AsyncIAdviseSink_Finish_RemoteOnRename_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  AsyncIAdviseSink_Begin_RemoteOnSave_Proxy: [ long, { This: uint.Δ } ],
  AsyncIAdviseSink_Begin_RemoteOnSave_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  AsyncIAdviseSink_Finish_RemoteOnSave_Proxy: [ long, { This: uint.Δ } ],
  AsyncIAdviseSink_Finish_RemoteOnSave_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  AsyncIAdviseSink_Begin_RemoteOnClose_Proxy: [ long, { This: uint.Δ } ],
  AsyncIAdviseSink_Begin_RemoteOnClose_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  AsyncIAdviseSink_Finish_RemoteOnClose_Proxy: [ long, { This: uint.Δ } ],
  AsyncIAdviseSink_Finish_RemoteOnClose_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IAdviseSink2_RemoteOnLinkSrcChange_Proxy: [ long, { This: uint.Δ, pmk: uint.Δ } ],
  IAdviseSink2_RemoteOnLinkSrcChange_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy: [ long, { This: uint.Δ, pmk: uint.Δ } ],
  AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy: [ long, { This: uint.Δ } ],
  AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IDataObject_RemoteGetData_Proxy: [ long, { This: uint.Δ, pformatetcIn: uint.Δ, pRemoteMedium: uint.Δ } ],
  IDataObject_RemoteGetData_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IDataObject_RemoteGetDataHere_Proxy: [ long, { This: uint.Δ, pformatetc: uint.Δ, pRemoteMedium: uint.Δ } ],
  IDataObject_RemoteGetDataHere_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IDataObject_RemoteSetData_Proxy: [ long, { This: uint.Δ, pformatetc: uint.Δ, pmedium: uint.Δ, fRelease: BOOL } ],
  IDataObject_RemoteSetData_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IFillLockBytes_RemoteFillAppend_Proxy: [ long, { This: uint.Δ, pv: uchar.Δ, cb: ULONG, pcbWritten: ulong.Δ } ],
  IFillLockBytes_RemoteFillAppend_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IFillLockBytes_RemoteFillAt_Proxy: [ long, { This: uint.Δ, ulOffset: ULARGE_INTEGER, pv: uchar.Δ, cb: ULONG, pcbWritten: ulong.Δ } ],
  IFillLockBytes_RemoteFillAt_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  ASYNC_STGMEDIUM_UserSize: [ VoidT, { uint.Δ: uint.Δ } ],
  ASYNC_STGMEDIUM_UserMarshal: [ VoidT, { uint.Δ: uint.Δ } ],
  ASYNC_STGMEDIUM_UserUnmarshal: [ VoidT, { uint.Δ: uint.Δ } ],
  ASYNC_STGMEDIUM_UserFree: [ VoidT, { uint.Δ: uint.Δ } ],
  CLIPFORMAT_UserSize: [ VoidT, { ushort.Δ: ushort.Δ } ],
  CLIPFORMAT_UserMarshal: [ VoidT, { ushort.Δ: ushort.Δ } ],
  CLIPFORMAT_UserUnmarshal: [ VoidT, { ushort.Δ: ushort.Δ } ],
  CLIPFORMAT_UserFree: [ VoidT, { ushort.Δ: ushort.Δ } ],
  FLAG_STGMEDIUM_UserSize: [ VoidT, { uint.Δ: uint.Δ } ],
  FLAG_STGMEDIUM_UserMarshal: [ VoidT, { uint.Δ: uint.Δ } ],
  FLAG_STGMEDIUM_UserUnmarshal: [ VoidT, { uint.Δ: uint.Δ } ],
  FLAG_STGMEDIUM_UserFree: [ VoidT, { uint.Δ: uint.Δ } ],
  HBITMAP_UserSize: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HBITMAP_UserMarshal: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HBITMAP_UserUnmarshal: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HBITMAP_UserFree: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HDC_UserSize: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HDC_UserMarshal: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HDC_UserUnmarshal: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HDC_UserFree: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HICON_UserSize: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HICON_UserMarshal: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HICON_UserUnmarshal: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HICON_UserFree: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  SNB_UserSize: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  SNB_UserMarshal: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  SNB_UserUnmarshal: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  SNB_UserFree: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  STGMEDIUM_UserSize: [ VoidT, { uint.Δ: uint.Δ } ],
  STGMEDIUM_UserMarshal: [ VoidT, { uint.Δ: uint.Δ } ],
  STGMEDIUM_UserUnmarshal: [ VoidT, { uint.Δ: uint.Δ } ],
  STGMEDIUM_UserFree: [ VoidT, { uint.Δ: uint.Δ } ],
  ASYNC_STGMEDIUM_UserSize64: [ VoidT, { uint.Δ: uint.Δ } ],
  ASYNC_STGMEDIUM_UserMarshal64: [ VoidT, { uint.Δ: uint.Δ } ],
  ASYNC_STGMEDIUM_UserUnmarshal64: [ VoidT, { uint.Δ: uint.Δ } ],
  ASYNC_STGMEDIUM_UserFree64: [ VoidT, { uint.Δ: uint.Δ } ],
  CLIPFORMAT_UserSize64: [ VoidT, { ushort.Δ: ushort.Δ } ],
  CLIPFORMAT_UserMarshal64: [ VoidT, { ushort.Δ: ushort.Δ } ],
  CLIPFORMAT_UserUnmarshal64: [ VoidT, { ushort.Δ: ushort.Δ } ],
  CLIPFORMAT_UserFree64: [ VoidT, { ushort.Δ: ushort.Δ } ],
  FLAG_STGMEDIUM_UserSize64: [ VoidT, { uint.Δ: uint.Δ } ],
  FLAG_STGMEDIUM_UserMarshal64: [ VoidT, { uint.Δ: uint.Δ } ],
  FLAG_STGMEDIUM_UserUnmarshal64: [ VoidT, { uint.Δ: uint.Δ } ],
  FLAG_STGMEDIUM_UserFree64: [ VoidT, { uint.Δ: uint.Δ } ],
  HBITMAP_UserSize64: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HBITMAP_UserMarshal64: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HBITMAP_UserUnmarshal64: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HBITMAP_UserFree64: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HDC_UserSize64: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HDC_UserMarshal64: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HDC_UserUnmarshal64: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HDC_UserFree64: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HICON_UserSize64: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HICON_UserMarshal64: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HICON_UserUnmarshal64: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HICON_UserFree64: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  SNB_UserSize64: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  SNB_UserMarshal64: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  SNB_UserUnmarshal64: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  SNB_UserFree64: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  STGMEDIUM_UserSize64: [ VoidT, { uint.Δ: uint.Δ } ],
  STGMEDIUM_UserMarshal64: [ VoidT, { uint.Δ: uint.Δ } ],
  STGMEDIUM_UserUnmarshal64: [ VoidT, { uint.Δ: uint.Δ } ],
  STGMEDIUM_UserFree64: [ VoidT, { uint.Δ: uint.Δ } ],
  IEnumUnknown_Next_Proxy: [ long, { This: uint.Δ, celt: ULONG, rgelt: uint.Δ.Δ, pceltFetched: ulong.Δ } ],
  IEnumUnknown_Next_Stub: [ long, { This: uint.Δ, celt: ULONG, rgelt: uint.Δ.Δ, pceltFetched: ulong.Δ } ],
  IBindCtx_SetBindOptions_Proxy: [ long, { This: uint.Δ, pbindopts: uint.Δ } ],
  IBindCtx_SetBindOptions_Stub: [ long, { This: uint.Δ, pbindopts: uint.Δ } ],
  IBindCtx_GetBindOptions_Proxy: [ long, { This: uint.Δ, pbindopts: uint.Δ } ],
  IBindCtx_GetBindOptions_Stub: [ long, { This: uint.Δ, pbindopts: uint.Δ } ],
  IEnumMoniker_Next_Proxy: [ long, { This: uint.Δ, celt: ULONG, rgelt: uint.Δ.Δ, pceltFetched: ulong.Δ } ],
  IEnumMoniker_Next_Stub: [ long, { This: uint.Δ, celt: ULONG, rgelt: uint.Δ.Δ, pceltFetched: ulong.Δ } ],
  IRunnableObject_IsRunning_Proxy: [ int, { This: uint.Δ } ],
  IRunnableObject_IsRunning_Stub: [ long, { This: uint.Δ } ],
  IMoniker_BindToObject_Proxy: [ long, { This: uint.Δ, pbc: uint.Δ, pmkToLeft: uint.Δ, riidResult: uint.Δ, ppvResult: VoidT.Δ.Δ } ],
  IMoniker_BindToObject_Stub: [ long, { This: uint.Δ, pbc: uint.Δ, pmkToLeft: uint.Δ, riidResult: uint.Δ, ppvResult: uint.Δ.Δ } ],
  IMoniker_BindToStorage_Proxy: [ long, { This: uint.Δ, pbc: uint.Δ, pmkToLeft: uint.Δ, riid: uint.Δ, ppvObj: VoidT.Δ.Δ } ],
  IMoniker_BindToStorage_Stub: [ long, { This: uint.Δ, pbc: uint.Δ, pmkToLeft: uint.Δ, riid: uint.Δ, ppvObj: uint.Δ.Δ } ],
  IEnumString_Next_Proxy: [ long, { This: uint.Δ, celt: ULONG, rgelt: ushort.Δ.Δ, pceltFetched: ulong.Δ } ],
  IEnumString_Next_Stub: [ long, { This: uint.Δ, celt: ULONG, rgelt: ushort.Δ.Δ, pceltFetched: ulong.Δ } ],
  ISequentialStream_Read_Proxy: [ long, { This: uint.Δ, pv: VoidT.Δ, cb: ULONG, pcbRead: ulong.Δ } ],
  ISequentialStream_Read_Stub: [ long, { This: uint.Δ, pv: uchar.Δ, cb: ULONG, pcbRead: ulong.Δ } ],
  ISequentialStream_Write_Proxy: [ long, { This: uint.Δ, pv: VoidT.Δ, cb: ULONG, pcbWritten: ulong.Δ } ],
  ISequentialStream_Write_Stub: [ long, { This: uint.Δ, pv: uchar.Δ, cb: ULONG, pcbWritten: ulong.Δ } ],
  IStream_Seek_Proxy: [ long, { This: uint.Δ, dlibMove: LARGE_INTEGER, dwOrigin: DWORD, plibNewPosition: uint.Δ } ],
  IStream_Seek_Stub: [ long, { This: uint.Δ, dlibMove: LARGE_INTEGER, dwOrigin: DWORD, plibNewPosition: uint.Δ } ],
  IStream_CopyTo_Proxy: [ long, { This: uint.Δ, pstm: uint.Δ, cb: ULARGE_INTEGER, pcbRead: uint.Δ, pcbWritten: uint.Δ } ],
  IStream_CopyTo_Stub: [ long, { This: uint.Δ, pstm: uint.Δ, cb: ULARGE_INTEGER, pcbRead: uint.Δ, pcbWritten: uint.Δ } ],
  IEnumSTATSTG_Next_Proxy: [ long, { This: uint.Δ, celt: ULONG, rgelt: uint.Δ, pceltFetched: ulong.Δ } ],
  IEnumSTATSTG_Next_Stub: [ long, { This: uint.Δ, celt: ULONG, rgelt: uint.Δ, pceltFetched: ulong.Δ } ],
  IStorage_OpenStream_Proxy: [ long, { This: uint.Δ, pwcsName: ushort.Δ, reserved1: VoidT.Δ, grfMode: DWORD, reserved2: DWORD, ppstm: uint.Δ.Δ } ],
  IStorage_OpenStream_Stub: [ long, { This: uint.Δ, pwcsName: ushort.Δ, cbReserved1: ulong, reserved1: uchar.Δ, grfMode: DWORD, reserved2: DWORD, ppstm: uint.Δ.Δ } ],
  IStorage_CopyTo_Proxy: [ long, { This: uint.Δ, ciidExclude: DWORD, rgiidExclude: uint.Δ, snbExclude: SNB, pstgDest: uint.Δ } ],
  IStorage_CopyTo_Stub: [ long, { This: uint.Δ, ciidExclude: DWORD, rgiidExclude: uint.Δ, snbExclude: SNB, pstgDest: uint.Δ } ],
  IStorage_EnumElements_Proxy: [ long, { This: uint.Δ, reserved1: DWORD, reserved2: VoidT.Δ, reserved3: DWORD, ppenum: uint.Δ.Δ } ],
  IStorage_EnumElements_Stub: [ long, { This: uint.Δ, reserved1: DWORD, cbReserved2: ulong, reserved2: uchar.Δ, reserved3: DWORD, ppenum: uint.Δ.Δ } ],
  ILockBytes_ReadAt_Proxy: [ long, { This: uint.Δ, ulOffset: ULARGE_INTEGER, pv: VoidT.Δ, cb: ULONG, pcbRead: ulong.Δ } ],
  ILockBytes_ReadAt_Stub: [ long, { This: uint.Δ, ulOffset: ULARGE_INTEGER, pv: uchar.Δ, cb: ULONG, pcbRead: ulong.Δ } ],
  ILockBytes_WriteAt_Proxy: [ long, { This: uint.Δ, ulOffset: ULARGE_INTEGER, pv: VoidT.Δ, cb: ULONG, pcbWritten: ulong.Δ } ],
  ILockBytes_WriteAt_Stub: [ long, { This: uint.Δ, ulOffset: ULARGE_INTEGER, pv: uchar.Δ, cb: ULONG, pcbWritten: ulong.Δ } ],
  IEnumFORMATETC_Next_Proxy: [ long, { This: uint.Δ, celt: ULONG, rgelt: uint.Δ, pceltFetched: ulong.Δ } ],
  IEnumFORMATETC_Next_Stub: [ long, { This: uint.Δ, celt: ULONG, rgelt: uint.Δ, pceltFetched: ulong.Δ } ],
  IEnumSTATDATA_Next_Proxy: [ long, { This: uint.Δ, celt: ULONG, rgelt: uint.Δ, pceltFetched: ulong.Δ } ],
  IEnumSTATDATA_Next_Stub: [ long, { This: uint.Δ, celt: ULONG, rgelt: uint.Δ, pceltFetched: ulong.Δ } ],
  IAdviseSink_OnDataChange_Proxy: [ VoidT, { This: uint.Δ, pFormatetc: uint.Δ, pStgmed: uint.Δ } ],
  IAdviseSink_OnDataChange_Stub: [ long, { This: uint.Δ, pFormatetc: uint.Δ, pStgmed: uint.Δ } ],
  IAdviseSink_OnViewChange_Proxy: [ VoidT, { This: uint.Δ, dwAspect: DWORD, lindex: LONG } ],
  IAdviseSink_OnViewChange_Stub: [ long, { This: uint.Δ, dwAspect: DWORD, lindex: LONG } ],
  IAdviseSink_OnRename_Proxy: [ VoidT, { This: uint.Δ, pmk: uint.Δ } ],
  IAdviseSink_OnRename_Stub: [ long, { This: uint.Δ, pmk: uint.Δ } ],
  IAdviseSink_OnSave_Proxy: [ VoidT, { This: uint.Δ } ],
  IAdviseSink_OnSave_Stub: [ long, { This: uint.Δ } ],
  IAdviseSink_OnClose_Proxy: [ VoidT, { This: uint.Δ } ],
  IAdviseSink_OnClose_Stub: [ long, { This: uint.Δ } ],
  IAdviseSink2_OnLinkSrcChange_Proxy: [ VoidT, { This: uint.Δ, pmk: uint.Δ } ],
  IAdviseSink2_OnLinkSrcChange_Stub: [ long, { This: uint.Δ, pmk: uint.Δ } ],
  IDataObject_GetData_Proxy: [ long, { This: uint.Δ, pformatetcIn: uint.Δ, pmedium: uint.Δ } ],
  IDataObject_GetData_Stub: [ long, { This: uint.Δ, pformatetcIn: uint.Δ, pRemoteMedium: uint.Δ } ],
  IDataObject_GetDataHere_Proxy: [ long, { This: uint.Δ, pformatetc: uint.Δ, pmedium: uint.Δ } ],
  IDataObject_GetDataHere_Stub: [ long, { This: uint.Δ, pformatetc: uint.Δ, pRemoteMedium: uint.Δ } ],
  IDataObject_SetData_Proxy: [ long, { This: uint.Δ, pformatetc: uint.Δ, pmedium: uint.Δ, fRelease: BOOL } ],
  IDataObject_SetData_Stub: [ long, { This: uint.Δ, pformatetc: uint.Δ, pmedium: uint.Δ, fRelease: BOOL } ],
  IFillLockBytes_FillAppend_Proxy: [ long, { This: uint.Δ, pv: VoidT.Δ, cb: ULONG, pcbWritten: ulong.Δ } ],
  IFillLockBytes_FillAppend_Stub: [ long, { This: uint.Δ, pv: uchar.Δ, cb: ULONG, pcbWritten: ulong.Δ } ],
  IFillLockBytes_FillAt_Proxy: [ long, { This: uint.Δ, ulOffset: ULARGE_INTEGER, pv: VoidT.Δ, cb: ULONG, pcbWritten: ulong.Δ } ],
  IFillLockBytes_FillAt_Stub: [ long, { This: uint.Δ, ulOffset: ULARGE_INTEGER, pv: uchar.Δ, cb: ULONG, pcbWritten: ulong.Δ } ],
  AsyncIAdviseSink_Begin_OnDataChange_Proxy: [ VoidT, { This: uint.Δ, pFormatetc: uint.Δ, pStgmed: uint.Δ } ],
  AsyncIAdviseSink_Begin_OnDataChange_Stub: [ long, { This: uint.Δ, pFormatetc: uint.Δ, pStgmed: uint.Δ } ],
  AsyncIAdviseSink_Finish_OnDataChange_Proxy: [ VoidT, { This: uint.Δ } ],
  AsyncIAdviseSink_Finish_OnDataChange_Stub: [ long, { This: uint.Δ } ],
  AsyncIAdviseSink_Begin_OnViewChange_Proxy: [ VoidT, { This: uint.Δ, dwAspect: DWORD, lindex: LONG } ],
  AsyncIAdviseSink_Begin_OnViewChange_Stub: [ long, { This: uint.Δ, dwAspect: DWORD, lindex: LONG } ],
  AsyncIAdviseSink_Finish_OnViewChange_Proxy: [ VoidT, { This: uint.Δ } ],
  AsyncIAdviseSink_Finish_OnViewChange_Stub: [ long, { This: uint.Δ } ],
  AsyncIAdviseSink_Begin_OnRename_Proxy: [ VoidT, { This: uint.Δ, pmk: uint.Δ } ],
  AsyncIAdviseSink_Begin_OnRename_Stub: [ long, { This: uint.Δ, pmk: uint.Δ } ],
  AsyncIAdviseSink_Finish_OnRename_Proxy: [ VoidT, { This: uint.Δ } ],
  AsyncIAdviseSink_Finish_OnRename_Stub: [ long, { This: uint.Δ } ],
  AsyncIAdviseSink_Begin_OnSave_Proxy: [ VoidT, { This: uint.Δ } ],
  AsyncIAdviseSink_Begin_OnSave_Stub: [ long, { This: uint.Δ } ],
  AsyncIAdviseSink_Finish_OnSave_Proxy: [ VoidT, { This: uint.Δ } ],
  AsyncIAdviseSink_Finish_OnSave_Stub: [ long, { This: uint.Δ } ],
  AsyncIAdviseSink_Begin_OnClose_Proxy: [ VoidT, { This: uint.Δ } ],
  AsyncIAdviseSink_Begin_OnClose_Stub: [ long, { This: uint.Δ } ],
  AsyncIAdviseSink_Finish_OnClose_Proxy: [ VoidT, { This: uint.Δ } ],
  AsyncIAdviseSink_Finish_OnClose_Stub: [ long, { This: uint.Δ } ],
  AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy: [ VoidT, { This: uint.Δ, pmk: uint.Δ } ],
  AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub: [ long, { This: uint.Δ, pmk: uint.Δ } ],
  AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy: [ VoidT, { This: uint.Δ } ],
  AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub: [ long, { This: uint.Δ } ],
  CoBuildVersion: [ ulong, {  } ],
  CoInitialize: [ long, { pvReserved: LPVOID } ],
  CoUninitialize: [ VoidT, {  } ],
  CoGetMalloc: [ long, { dwMemContext: DWORD, ppMalloc: VOIDPTR.Δ } ],
  CoGetCurrentProcess: [ ulong, {  } ],
  CoRegisterMallocSpy: [ long, { pMallocSpy: LPMALLOCSPY } ],
  CoRevokeMallocSpy: [ long, {  } ],
  CoCreateStandardMalloc: [ long, { memctx: DWORD, ppMalloc: uint.Δ.Δ } ],
  CoInitializeEx: [ long, { pvReserved: LPVOID, dwCoInit: DWORD } ],
  CoGetCallerTID: [ long, { lpdwTID: LPDWORD } ],
  CoGetCurrentLogicalThreadId: [ long, { pguid: uint.Δ } ],
  CoRegisterInitializeSpy: [ long, { pSpy: LPINITIALIZESPY, puliCookie: uint.Δ } ],
  CoRevokeInitializeSpy: [ long, { uliCookie: ULARGE_INTEGER } ],
  CoGetContextToken: [ long, { pToken: ulong.Δ } ],
  CoGetSystemSecurityPermissions: [ long, { comSDType: COMSD, ppSD: VoidT.Δ.Δ } ],
  CoGetApartmentType: [ long, { pAptType: uint.Δ, pAptQualifier: uint.Δ } ],
  CoGetObjectContext: [ long, { riid: uint.Δ, ppv: VoidT.Δ.Δ } ],
  CoGetClassObject: [ long, { rclsid: uint.Δ, dwClsContext: DWORD, pvReserved: LPVOID, riid: uint.Δ, ppv: VoidT.Δ.Δ } ],
  CoRegisterClassObject: [ long, { rclsid: uint.Δ, pUnk: LPUNKNOWN, dwClsContext: DWORD, flags: DWORD, lpdwRegister: LPDWORD } ],
  CoRevokeClassObject: [ long, { dwRegister: DWORD } ],
  CoResumeClassObjects: [ long, {  } ],
  CoSuspendClassObjects: [ long, {  } ],
  CoAddRefServerProcess: [ ulong, {  } ],
  CoReleaseServerProcess: [ ulong, {  } ],
  CoGetPSClsid: [ long, { riid: uint.Δ, pClsid: uint.Δ } ],
  CoRegisterPSClsid: [ long, { riid: uint.Δ, rclsid: uint.Δ } ],
  CoRegisterSurrogate: [ long, { pSurrogate: LPSURROGATE } ],
  CoGetMarshalSizeMax: [ long, { pulSize: ulong.Δ, riid: uint.Δ, pUnk: LPUNKNOWN, dwDestContext: DWORD, pvDestContext: LPVOID, mshlflags: DWORD } ],
  CoMarshalInterface: [ long, { pStm: LPSTREAM, riid: uint.Δ, pUnk: LPUNKNOWN, dwDestContext: DWORD, pvDestContext: LPVOID, mshlflags: DWORD } ],
  CoUnmarshalInterface: [ long, { pStm: LPSTREAM, riid: uint.Δ, ppv: VoidT.Δ.Δ } ],
  CoMarshalHresult: [ long, { pstm: LPSTREAM, hresult: HRESULT } ],
  CoUnmarshalHresult: [ long, { pstm: LPSTREAM, phresult: long.Δ } ],
  CoReleaseMarshalData: [ long, { pStm: LPSTREAM } ],
  CoDisconnectObject: [ long, { pUnk: LPUNKNOWN, dwReserved: DWORD } ],
  CoLockObjectExternal: [ long, { pUnk: LPUNKNOWN, fLock: BOOL, fLastUnlockReleases: BOOL } ],
  CoGetStandardMarshal: [ long, { riid: uint.Δ, pUnk: LPUNKNOWN, dwDestContext: DWORD, pvDestContext: LPVOID, mshlflags: DWORD, ppMarshal: VOIDPTR.Δ } ],
  CoGetStdMarshalEx: [ long, { pUnkOuter: LPUNKNOWN, smexflags: DWORD, ppUnkInner: VOIDPTR.Δ } ],
  CoIsHandlerConnected: [ int, { pUnk: LPUNKNOWN } ],
  CoMarshalInterThreadInterfaceInStream: [ long, { riid: uint.Δ, pUnk: LPUNKNOWN, ppStm: VOIDPTR.Δ } ],
  CoGetInterfaceAndReleaseStream: [ long, { pStm: LPSTREAM, iid: uint.Δ, ppv: VoidT.Δ.Δ } ],
  CoCreateFreeThreadedMarshaler: [ long, { punkOuter: LPUNKNOWN, ppunkMarshal: VOIDPTR.Δ } ],
  CoLoadLibrary: [ VOIDPTR, { lpszLibName: LPOLESTR, bAutoFree: BOOL } ],
  CoFreeLibrary: [ VoidT, { hInst: HINSTANCE } ],
  CoFreeAllLibraries: [ VoidT, {  } ],
  CoFreeUnusedLibraries: [ VoidT, {  } ],
  CoFreeUnusedLibrariesEx: [ VoidT, { dwUnloadDelay: DWORD, dwReserved: DWORD } ],
  CoDisconnectContext: [ long, { dwTimeout: DWORD } ],
  CoInitializeSecurity: [ long, { pSecDesc: PSECURITY_DESCRIPTOR, cAuthSvc: LONG, asAuthSvc: uint.Δ, pReserved1: VoidT.Δ, dwAuthnLevel: DWORD, dwImpLevel: DWORD, pAuthList: VoidT.Δ, dwCapabilities: DWORD, pReserved3: VoidT.Δ } ],
  CoGetCallContext: [ long, { riid: uint.Δ, ppInterface: VoidT.Δ.Δ } ],
  CoQueryProxyBlanket: [ long, { pProxy: uint.Δ, pwAuthnSvc: ulong.Δ, pAuthzSvc: ulong.Δ, pServerPrincName: ushort.Δ.Δ, pAuthnLevel: ulong.Δ, pImpLevel: ulong.Δ, pAuthInfo: VoidT.Δ.Δ, pCapabilites: ulong.Δ } ],
  CoSetProxyBlanket: [ long, { pProxy: uint.Δ, dwAuthnSvc: DWORD, dwAuthzSvc: DWORD, pServerPrincName: ushort.Δ, dwAuthnLevel: DWORD, dwImpLevel: DWORD, pAuthInfo: RPC_AUTH_IDENTITY_HANDLE, dwCapabilities: DWORD } ],
  CoCopyProxy: [ long, { pProxy: uint.Δ, ppCopy: uint.Δ.Δ } ],
  CoQueryClientBlanket: [ long, { pAuthnSvc: ulong.Δ, pAuthzSvc: ulong.Δ, pServerPrincName: ushort.Δ.Δ, pAuthnLevel: ulong.Δ, pImpLevel: ulong.Δ, pPrivs: VoidT.Δ.Δ, pCapabilities: ulong.Δ } ],
  CoImpersonateClient: [ long, {  } ],
  CoRevertToSelf: [ long, {  } ],
  CoQueryAuthenticationServices: [ long, { pcAuthSvc: ulong.Δ, asAuthSvc: uint.Δ.Δ } ],
  CoSwitchCallContext: [ long, { pNewObject: uint.Δ, ppOldObject: uint.Δ.Δ } ],
  CoCreateInstance: [ long, { rclsid: uint.Δ, pUnkOuter: LPUNKNOWN, dwClsContext: DWORD, riid: uint.Δ, ppv: VoidT.Δ.Δ } ],
  CoGetInstanceFromFile: [ long, { pServerInfo: uint.Δ, pClsid: uint.Δ, punkOuter: uint.Δ, dwClsCtx: DWORD, grfMode: DWORD, pwszName: ushort.Δ, dwCount: DWORD, pResults: uint.Δ } ],
  CoGetInstanceFromIStorage: [ long, { pServerInfo: uint.Δ, pClsid: uint.Δ, punkOuter: uint.Δ, dwClsCtx: DWORD, pstg: IStorage.Δ, dwCount: DWORD, pResults: uint.Δ } ],
  CoCreateInstanceEx: [ long, { Clsid: uint.Δ, punkOuter: uint.Δ, dwClsCtx: DWORD, pServerInfo: uint.Δ, dwCount: DWORD, pResults: uint.Δ } ],
  CoGetCancelObject: [ long, { dwThreadId: DWORD, iid: uint.Δ, ppUnk: VoidT.Δ.Δ } ],
  CoSetCancelObject: [ long, { pUnk: uint.Δ } ],
  CoCancelCall: [ long, { dwThreadId: DWORD, ulTimeout: ULONG } ],
  CoTestCancel: [ long, {  } ],
  CoEnableCallCancellation: [ long, { pReserved: LPVOID } ],
  CoDisableCallCancellation: [ long, { pReserved: LPVOID } ],
  CoAllowSetForegroundWindow: [ long, { pUnk: uint.Δ, lpvReserved: LPVOID } ],
  DcomChannelSetHResult: [ long, { pvReserved: LPVOID, pulReserved: ulong.Δ, appsHR: HRESULT } ],
  StringFromCLSID: [ long, { rclsid: uint.Δ, lplpsz: ushort.Δ.Δ } ],
  CLSIDFromString: [ long, { lpsz: LPCOLESTR, pclsid: LPCLSID } ],
  StringFromIID: [ long, { rclsid: uint.Δ, lplpsz: ushort.Δ.Δ } ],
  IIDFromString: [ long, { lpsz: LPCOLESTR, lpiid: LPIID } ],
  CoIsOle1Class: [ int, { rclsid: uint.Δ } ],
  ProgIDFromCLSID: [ long, { clsid: uint.Δ, lplpszProgID: ushort.Δ.Δ } ],
  CLSIDFromProgID: [ long, { lpszProgID: LPCOLESTR, lpclsid: LPCLSID } ],
  CLSIDFromProgIDEx: [ long, { lpszProgID: LPCOLESTR, lpclsid: LPCLSID } ],
  StringFromGUID2: [ VoidT, { rguid: uint.Δ, lpsz: LPOLESTR, cchMax: int } ],
  CoCreateGuid: [ long, { pguid: uint.Δ } ],
  CoFileTimeToDosDateTime: [ int, { lpFileTime: uint.Δ, lpDosDate: LPWORD, lpDosTime: LPWORD } ],
  CoDosDateTimeToFileTime: [ int, { nDosDate: WORD, nDosTime: WORD, lpFileTime: uint.Δ } ],
  CoFileTimeNow: [ long, { lpFileTime: uint.Δ } ],
  CoRegisterMessageFilter: [ long, { lpMessageFilter: LPMESSAGEFILTER, lplpMessageFilter: VOIDPTR.Δ } ],
  CoRegisterChannelHook: [ long, { ExtensionUuid: uint.Δ, pChannelHook: uint.Δ } ],
  CoWaitForMultipleHandles: [ long, { dwFlags: DWORD, dwTimeout: DWORD, cHandles: ULONG, pHandles: LPHANDLE, lpdwindex: LPDWORD } ],
  CoInvalidateRemoteMachineBindings: [ long, { pszMachineName: LPOLESTR } ],
  CoGetTreatAsClass: [ long, { clsidOld: uint.Δ, pClsidNew: LPCLSID } ],
  CoTreatAsClass: [ long, { clsidOld: uint.Δ, clsidNew: uint.Δ } ],
  DllGetClassObject: [ long, { rclsid: uint.Δ, riid: uint.Δ, ppv: VoidT.Δ.Δ } ],
  DllCanUnloadNow: [ long, {  } ],
  CoTaskMemAlloc: [ VoidT.Δ, { cb: SIZE_T } ],
  CoTaskMemRealloc: [ VoidT.Δ, { pv: LPVOID, cb: SIZE_T } ],
  CoTaskMemFree: [ VoidT, { pv: LPVOID } ],
  CreateDataAdviseHolder: [ long, { ppDAHolder: VOIDPTR.Δ } ],
  CreateDataCache: [ long, { pUnkOuter: LPUNKNOWN, rclsid: uint.Δ, iid: uint.Δ, ppv: VoidT.Δ.Δ } ],
  StgCreateDocfile: [ long, { pwcsName: ushort.Δ, grfMode: DWORD, reserved: DWORD, ppstgOpen: uint.Δ.Δ } ],
  StgCreateDocfileOnILockBytes: [ long, { plkbyt: uint.Δ, grfMode: DWORD, reserved: DWORD, ppstgOpen: uint.Δ.Δ } ],
  StgOpenStorage: [ long, { pwcsName: ushort.Δ, pstgPriority: uint.Δ, grfMode: DWORD, snbExclude: SNB, reserved: DWORD, ppstgOpen: uint.Δ.Δ } ],
  StgOpenStorageOnILockBytes: [ long, { plkbyt: uint.Δ, pstgPriority: uint.Δ, grfMode: DWORD, snbExclude: SNB, reserved: DWORD, ppstgOpen: uint.Δ.Δ } ],
  StgIsStorageFile: [ long, { pwcsName: ushort.Δ } ],
  StgIsStorageILockBytes: [ long, { plkbyt: uint.Δ } ],
  StgSetTimes: [ long, { lpszName: ushort.Δ, pctime: uint.Δ, patime: uint.Δ, pmtime: uint.Δ } ],
  StgOpenAsyncDocfileOnIFillLockBytes: [ long, { pflb: uint.Δ, grfMode: DWORD, asyncFlags: DWORD, ppstgOpen: uint.Δ.Δ } ],
  StgGetIFillLockBytesOnILockBytes: [ long, { pilb: uint.Δ, ppflb: uint.Δ.Δ } ],
  StgGetIFillLockBytesOnFile: [ long, { pwcsName: ushort.Δ, ppflb: uint.Δ.Δ } ],
  StgOpenLayoutDocfile: [ long, { pwcsDfName: ushort.Δ, grfMode: DWORD, reserved: DWORD, ppstgOpen: uint.Δ.Δ } ],
  StgCreateStorageEx: [ long, { pwcsName: ushort.Δ, grfMode: DWORD, stgfmt: DWORD, grfAttrs: DWORD, pStgOptions: uint.Δ, pSecurityDescriptor: PSECURITY_DESCRIPTOR, riid: uint.Δ, ppObjectOpen: VoidT.Δ.Δ } ],
  StgOpenStorageEx: [ long, { pwcsName: ushort.Δ, grfMode: DWORD, stgfmt: DWORD, grfAttrs: DWORD, pStgOptions: uint.Δ, pSecurityDescriptor: PSECURITY_DESCRIPTOR, riid: uint.Δ, ppObjectOpen: VoidT.Δ.Δ } ],
  BindMoniker: [ long, { pmk: LPMONIKER, grfOpt: DWORD, iidResult: uint.Δ, ppvResult: VoidT.Δ.Δ } ],
  CoInstall: [ long, { pbc: uint.Δ, dwFlags: DWORD, pClassSpec: uint.Δ, pQuery: uint.Δ, pszCodeBase: LPWSTR } ],
  CoGetObject: [ long, { pszName: LPCWSTR, pBindOptions: uint.Δ, riid: uint.Δ, ppv: VoidT.Δ.Δ } ],
  MkParseDisplayName: [ long, { pbc: LPBC, szUserName: LPCOLESTR, pchEaten: ulong.Δ, ppmk: VOIDPTR.Δ } ],
  MonikerRelativePathTo: [ long, { pmkSrc: LPMONIKER, pmkDest: LPMONIKER, ppmkRelPath: VOIDPTR.Δ, dwReserved: BOOL } ],
  MonikerCommonPrefixWith: [ long, { pmkThis: LPMONIKER, pmkOther: LPMONIKER, ppmkCommon: VOIDPTR.Δ } ],
  CreateBindCtx: [ long, { reserved: DWORD, ppbc: VOIDPTR.Δ } ],
  CreateGenericComposite: [ long, { pmkFirst: LPMONIKER, pmkRest: LPMONIKER, ppmkComposite: VOIDPTR.Δ } ],
  GetClassFile: [ long, { szFilename: LPCOLESTR, pclsid: uint.Δ } ],
  CreateClassMoniker: [ long, { rclsid: uint.Δ, ppmk: VOIDPTR.Δ } ],
  CreateFileMoniker: [ long, { lpszPathName: LPCOLESTR, ppmk: VOIDPTR.Δ } ],
  CreateItemMoniker: [ long, { lpszDelim: LPCOLESTR, lpszItem: LPCOLESTR, ppmk: VOIDPTR.Δ } ],
  CreateAntiMoniker: [ long, { ppmk: VOIDPTR.Δ } ],
  CreatePointerMoniker: [ long, { punk: LPUNKNOWN, ppmk: VOIDPTR.Δ } ],
  CreateObjrefMoniker: [ long, { punk: LPUNKNOWN, ppmk: VOIDPTR.Δ } ],
  GetRunningObjectTable: [ long, { reserved: DWORD, pprot: VOIDPTR.Δ } ],
  IOleCache2_RemoteUpdateCache_Proxy: [ long, { This: uint.Δ, pDataObject: LPDATAOBJECT, grfUpdf: DWORD, pReserved: LONG_PTR } ],
  IOleCache2_RemoteUpdateCache_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy: [ long, { This: uint.Δ } ],
  IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IOleInPlaceActiveObject_RemoteResizeBorder_Proxy: [ long, { This: uint.Δ, prcBorder: LPCRECT, riid: uint.Δ, pUIWindow: uint.Δ, fFrameWindow: BOOL } ],
  IOleInPlaceActiveObject_RemoteResizeBorder_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IViewObject_RemoteDraw_Proxy: [ long, { This: uint.Δ, dwDrawAspect: DWORD, lindex: LONG, pvAspect: ULONG_PTR, ptd: uint.Δ, hdcTargetDev: HDC, hdcDraw: HDC, lprcBounds: LPCRECTL, lprcWBounds: LPCRECTL, pContinue: uint.Δ } ],
  IViewObject_RemoteDraw_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IViewObject_RemoteGetColorSet_Proxy: [ long, { This: uint.Δ, dwDrawAspect: DWORD, lindex: LONG, pvAspect: ULONG_PTR, ptd: uint.Δ, hicTargetDev: ULONG_PTR, ppColorSet: uint.Δ.Δ } ],
  IViewObject_RemoteGetColorSet_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IViewObject_RemoteFreeze_Proxy: [ long, { This: uint.Δ, dwDrawAspect: DWORD, lindex: LONG, pvAspect: ULONG_PTR, pdwFreeze: ulong.Δ } ],
  IViewObject_RemoteFreeze_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IViewObject_RemoteGetAdvise_Proxy: [ long, { This: uint.Δ, pAspects: ulong.Δ, pAdvf: ulong.Δ, ppAdvSink: uint.Δ.Δ } ],
  IViewObject_RemoteGetAdvise_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IEnumOLEVERB_RemoteNext_Proxy: [ long, { This: uint.Δ, celt: ULONG, rgelt: LPOLEVERB, pceltFetched: ulong.Δ } ],
  IEnumOLEVERB_RemoteNext_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  HACCEL_UserSize: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HACCEL_UserMarshal: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HACCEL_UserUnmarshal: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HACCEL_UserFree: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HGLOBAL_UserSize: [ VoidT, { VoidT.Δ.Δ: VoidT.Δ.Δ } ],
  HGLOBAL_UserMarshal: [ VoidT, { VoidT.Δ.Δ: VoidT.Δ.Δ } ],
  HGLOBAL_UserUnmarshal: [ VoidT, { VoidT.Δ.Δ: VoidT.Δ.Δ } ],
  HGLOBAL_UserFree: [ VoidT, { VoidT.Δ.Δ: VoidT.Δ.Δ } ],
  HMENU_UserSize: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HMENU_UserMarshal: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HMENU_UserUnmarshal: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HMENU_UserFree: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HWND_UserSize: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HWND_UserMarshal: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HWND_UserUnmarshal: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HWND_UserFree: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HACCEL_UserSize64: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HACCEL_UserMarshal64: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HACCEL_UserUnmarshal64: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HACCEL_UserFree64: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HGLOBAL_UserSize64: [ VoidT, { VoidT.Δ.Δ: VoidT.Δ.Δ } ],
  HGLOBAL_UserMarshal64: [ VoidT, { VoidT.Δ.Δ: VoidT.Δ.Δ } ],
  HGLOBAL_UserUnmarshal64: [ VoidT, { VoidT.Δ.Δ: VoidT.Δ.Δ } ],
  HGLOBAL_UserFree64: [ VoidT, { VoidT.Δ.Δ: VoidT.Δ.Δ } ],
  HMENU_UserSize64: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HMENU_UserMarshal64: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HMENU_UserUnmarshal64: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HMENU_UserFree64: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HWND_UserSize64: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HWND_UserMarshal64: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HWND_UserUnmarshal64: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HWND_UserFree64: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  IOleCache2_UpdateCache_Proxy: [ long, { This: uint.Δ, pDataObject: LPDATAOBJECT, grfUpdf: DWORD, pReserved: LPVOID } ],
  IOleCache2_UpdateCache_Stub: [ long, { This: uint.Δ, pDataObject: LPDATAOBJECT, grfUpdf: DWORD, pReserved: LONG_PTR } ],
  IOleInPlaceActiveObject_TranslateAccelerator_Proxy: [ long, { This: uint.Δ, lpmsg: LPMSG } ],
  IOleInPlaceActiveObject_TranslateAccelerator_Stub: [ long, { This: uint.Δ } ],
  IOleInPlaceActiveObject_ResizeBorder_Proxy: [ long, { This: uint.Δ, prcBorder: LPCRECT, pUIWindow: uint.Δ, fFrameWindow: BOOL } ],
  IOleInPlaceActiveObject_ResizeBorder_Stub: [ long, { This: uint.Δ, prcBorder: LPCRECT, riid: uint.Δ, pUIWindow: uint.Δ, fFrameWindow: BOOL } ],
  IViewObject_Draw_Proxy: [ long, { This: uint.Δ, dwDrawAspect: DWORD, lindex: LONG, pvAspect: VoidT.Δ, ptd: uint.Δ, hdcTargetDev: HDC, hdcDraw: HDC, lprcBounds: LPCRECTL, lprcWBounds: LPCRECTL, pfnContinue: UNEXPOSED.Δ, dwContinue: ULONG_PTR } ],
  IViewObject_Draw_Stub: [ long, { This: uint.Δ, dwDrawAspect: DWORD, lindex: LONG, pvAspect: ULONG_PTR, ptd: uint.Δ, hdcTargetDev: HDC, hdcDraw: HDC, lprcBounds: LPCRECTL, lprcWBounds: LPCRECTL, pContinue: uint.Δ } ],
  IViewObject_GetColorSet_Proxy: [ long, { This: uint.Δ, dwDrawAspect: DWORD, lindex: LONG, pvAspect: VoidT.Δ, ptd: uint.Δ, hicTargetDev: HDC, ppColorSet: uint.Δ.Δ } ],
  IViewObject_GetColorSet_Stub: [ long, { This: uint.Δ, dwDrawAspect: DWORD, lindex: LONG, pvAspect: ULONG_PTR, ptd: uint.Δ, hicTargetDev: ULONG_PTR, ppColorSet: uint.Δ.Δ } ],
  IViewObject_Freeze_Proxy: [ long, { This: uint.Δ, dwDrawAspect: DWORD, lindex: LONG, pvAspect: VoidT.Δ, pdwFreeze: ulong.Δ } ],
  IViewObject_Freeze_Stub: [ long, { This: uint.Δ, dwDrawAspect: DWORD, lindex: LONG, pvAspect: ULONG_PTR, pdwFreeze: ulong.Δ } ],
  IViewObject_GetAdvise_Proxy: [ long, { This: uint.Δ, pAspects: ulong.Δ, pAdvf: ulong.Δ, ppAdvSink: uint.Δ.Δ } ],
  IViewObject_GetAdvise_Stub: [ long, { This: uint.Δ, pAspects: ulong.Δ, pAdvf: ulong.Δ, ppAdvSink: uint.Δ.Δ } ],
  IEnumOLEVERB_Next_Proxy: [ long, { This: uint.Δ, celt: ULONG, rgelt: LPOLEVERB, pceltFetched: ulong.Δ } ],
  IEnumOLEVERB_Next_Stub: [ long, { This: uint.Δ, celt: ULONG, rgelt: LPOLEVERB, pceltFetched: ulong.Δ } ],
  IServiceProvider_RemoteQueryService_Proxy: [ long, { This: uint.Δ, guidService: uint.Δ, riid: uint.Δ, ppvObject: uint.Δ.Δ } ],
  IServiceProvider_RemoteQueryService_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IServiceProvider_QueryService_Proxy: [ long, { This: uint.Δ, guidService: uint.Δ, riid: uint.Δ, ppvObject: VoidT.Δ.Δ } ],
  IServiceProvider_QueryService_Stub: [ long, { This: uint.Δ, guidService: uint.Δ, riid: uint.Δ, ppvObject: uint.Δ.Δ } ],
  IDispatch_RemoteInvoke_Proxy: [ long, { This: uint.Δ, dispIdMember: DISPID, riid: uint.Δ, lcid: LCID, dwFlags: DWORD, pDispParams: uint.Δ, pVarResult: uint.Δ, pExcepInfo: uint.Δ, pArgErr: uint.Δ, cVarRef: UINT, rgVarRefIdx: uint.Δ, rgVarRef: uint.Δ } ],
  IDispatch_RemoteInvoke_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IEnumVARIANT_RemoteNext_Proxy: [ long, { This: uint.Δ, celt: ULONG, rgVar: uint.Δ, pCeltFetched: ulong.Δ } ],
  IEnumVARIANT_RemoteNext_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  ITypeComp_RemoteBind_Proxy: [ long, { This: uint.Δ, szName: LPOLESTR, lHashVal: ULONG, wFlags: WORD, ppTInfo: uint.Δ.Δ, pDescKind: uint.Δ, ppFuncDesc: VOIDPTR.Δ, ppVarDesc: VOIDPTR.Δ, ppTypeComp: uint.Δ.Δ, pDummy: uint.Δ } ],
  ITypeComp_RemoteBind_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  ITypeComp_RemoteBindType_Proxy: [ long, { This: uint.Δ, szName: LPOLESTR, lHashVal: ULONG, ppTInfo: uint.Δ.Δ } ],
  ITypeComp_RemoteBindType_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  ITypeInfo_RemoteGetTypeAttr_Proxy: [ long, { This: uint.Δ, ppTypeAttr: VOIDPTR.Δ, pDummy: uint.Δ } ],
  ITypeInfo_RemoteGetTypeAttr_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  ITypeInfo_RemoteGetFuncDesc_Proxy: [ long, { This: uint.Δ, index: UINT, ppFuncDesc: VOIDPTR.Δ, pDummy: uint.Δ } ],
  ITypeInfo_RemoteGetFuncDesc_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  ITypeInfo_RemoteGetVarDesc_Proxy: [ long, { This: uint.Δ, index: UINT, ppVarDesc: VOIDPTR.Δ, pDummy: uint.Δ } ],
  ITypeInfo_RemoteGetVarDesc_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  ITypeInfo_RemoteGetNames_Proxy: [ long, { This: uint.Δ, memid: MEMBERID, rgBstrNames: ushort.Δ.Δ, cMaxNames: UINT, pcNames: uint.Δ } ],
  ITypeInfo_RemoteGetNames_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  ITypeInfo_LocalGetIDsOfNames_Proxy: [ long, { This: uint.Δ } ],
  ITypeInfo_LocalGetIDsOfNames_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  ITypeInfo_LocalInvoke_Proxy: [ long, { This: uint.Δ } ],
  ITypeInfo_LocalInvoke_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  ITypeInfo_RemoteGetDocumentation_Proxy: [ long, { This: uint.Δ, memid: MEMBERID, refPtrFlags: DWORD, pBstrName: ushort.Δ.Δ, pBstrDocString: ushort.Δ.Δ, pdwHelpContext: ulong.Δ, pBstrHelpFile: ushort.Δ.Δ } ],
  ITypeInfo_RemoteGetDocumentation_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  ITypeInfo_RemoteGetDllEntry_Proxy: [ long, { This: uint.Δ, memid: MEMBERID, invKind: INVOKEKIND, refPtrFlags: DWORD, pBstrDllName: ushort.Δ.Δ, pBstrName: ushort.Δ.Δ, pwOrdinal: ushort.Δ } ],
  ITypeInfo_RemoteGetDllEntry_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  ITypeInfo_LocalAddressOfMember_Proxy: [ long, { This: uint.Δ } ],
  ITypeInfo_LocalAddressOfMember_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  ITypeInfo_RemoteCreateInstance_Proxy: [ long, { This: uint.Δ, riid: uint.Δ, ppvObj: uint.Δ.Δ } ],
  ITypeInfo_RemoteCreateInstance_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  ITypeInfo_RemoteGetContainingTypeLib_Proxy: [ long, { This: uint.Δ, ppTLib: uint.Δ.Δ, pIndex: uint.Δ } ],
  ITypeInfo_RemoteGetContainingTypeLib_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  ITypeInfo_LocalReleaseTypeAttr_Proxy: [ long, { This: uint.Δ } ],
  ITypeInfo_LocalReleaseTypeAttr_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  ITypeInfo_LocalReleaseFuncDesc_Proxy: [ long, { This: uint.Δ } ],
  ITypeInfo_LocalReleaseFuncDesc_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  ITypeInfo_LocalReleaseVarDesc_Proxy: [ long, { This: uint.Δ } ],
  ITypeInfo_LocalReleaseVarDesc_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  ITypeInfo2_RemoteGetDocumentation2_Proxy: [ long, { This: uint.Δ, memid: MEMBERID, lcid: LCID, refPtrFlags: DWORD, pbstrHelpString: ushort.Δ.Δ, pdwHelpStringContext: ulong.Δ, pbstrHelpStringDll: ushort.Δ.Δ } ],
  ITypeInfo2_RemoteGetDocumentation2_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  ITypeLib_RemoteGetTypeInfoCount_Proxy: [ long, { This: uint.Δ, pcTInfo: uint.Δ } ],
  ITypeLib_RemoteGetTypeInfoCount_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  ITypeLib_RemoteGetLibAttr_Proxy: [ long, { This: uint.Δ, ppTLibAttr: VOIDPTR.Δ, pDummy: uint.Δ } ],
  ITypeLib_RemoteGetLibAttr_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  ITypeLib_RemoteGetDocumentation_Proxy: [ long, { This: uint.Δ, index: INT, refPtrFlags: DWORD, pBstrName: ushort.Δ.Δ, pBstrDocString: ushort.Δ.Δ, pdwHelpContext: ulong.Δ, pBstrHelpFile: ushort.Δ.Δ } ],
  ITypeLib_RemoteGetDocumentation_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  ITypeLib_RemoteIsName_Proxy: [ long, { This: uint.Δ, szNameBuf: LPOLESTR, lHashVal: ULONG, pfName: int.Δ, pBstrLibName: ushort.Δ.Δ } ],
  ITypeLib_RemoteIsName_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  ITypeLib_RemoteFindName_Proxy: [ long, { This: uint.Δ, szNameBuf: LPOLESTR, lHashVal: ULONG, ppTInfo: uint.Δ.Δ, rgMemId: long.Δ, pcFound: ushort.Δ, pBstrLibName: ushort.Δ.Δ } ],
  ITypeLib_RemoteFindName_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  ITypeLib_LocalReleaseTLibAttr_Proxy: [ long, { This: uint.Δ } ],
  ITypeLib_LocalReleaseTLibAttr_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  ITypeLib2_RemoteGetLibStatistics_Proxy: [ long, { This: uint.Δ, pcUniqueNames: ulong.Δ, pcchUniqueNames: ulong.Δ } ],
  ITypeLib2_RemoteGetLibStatistics_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  ITypeLib2_RemoteGetDocumentation2_Proxy: [ long, { This: uint.Δ, index: INT, lcid: LCID, refPtrFlags: DWORD, pbstrHelpString: ushort.Δ.Δ, pdwHelpStringContext: ulong.Δ, pbstrHelpStringDll: ushort.Δ.Δ } ],
  ITypeLib2_RemoteGetDocumentation2_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IPropertyBag_RemoteRead_Proxy: [ long, { This: uint.Δ, pszPropName: LPCOLESTR, pVar: uint.Δ, pErrorLog: uint.Δ, varType: DWORD, pUnkObj: uint.Δ } ],
  IPropertyBag_RemoteRead_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  BSTR_UserSize: [ VoidT, { ushort.Δ.Δ: ushort.Δ.Δ } ],
  BSTR_UserMarshal: [ VoidT, { ushort.Δ.Δ: ushort.Δ.Δ } ],
  BSTR_UserUnmarshal: [ VoidT, { ushort.Δ.Δ: ushort.Δ.Δ } ],
  BSTR_UserFree: [ VoidT, { ushort.Δ.Δ: ushort.Δ.Δ } ],
  CLEANLOCALSTORAGE_UserSize: [ VoidT, { uint.Δ: uint.Δ } ],
  CLEANLOCALSTORAGE_UserMarshal: [ VoidT, { uint.Δ: uint.Δ } ],
  CLEANLOCALSTORAGE_UserUnmarshal: [ VoidT, { uint.Δ: uint.Δ } ],
  CLEANLOCALSTORAGE_UserFree: [ VoidT, { uint.Δ: uint.Δ } ],
  VARIANT_UserSize: [ VoidT, { uint.Δ: uint.Δ } ],
  VARIANT_UserMarshal: [ VoidT, { uint.Δ: uint.Δ } ],
  VARIANT_UserUnmarshal: [ VoidT, { uint.Δ: uint.Δ } ],
  VARIANT_UserFree: [ VoidT, { uint.Δ: uint.Δ } ],
  BSTR_UserSize64: [ VoidT, { ushort.Δ.Δ: ushort.Δ.Δ } ],
  BSTR_UserMarshal64: [ VoidT, { ushort.Δ.Δ: ushort.Δ.Δ } ],
  BSTR_UserUnmarshal64: [ VoidT, { ushort.Δ.Δ: ushort.Δ.Δ } ],
  BSTR_UserFree64: [ VoidT, { ushort.Δ.Δ: ushort.Δ.Δ } ],
  CLEANLOCALSTORAGE_UserSize64: [ VoidT, { uint.Δ: uint.Δ } ],
  CLEANLOCALSTORAGE_UserMarshal64: [ VoidT, { uint.Δ: uint.Δ } ],
  CLEANLOCALSTORAGE_UserUnmarshal64: [ VoidT, { uint.Δ: uint.Δ } ],
  CLEANLOCALSTORAGE_UserFree64: [ VoidT, { uint.Δ: uint.Δ } ],
  VARIANT_UserSize64: [ VoidT, { uint.Δ: uint.Δ } ],
  VARIANT_UserMarshal64: [ VoidT, { uint.Δ: uint.Δ } ],
  VARIANT_UserUnmarshal64: [ VoidT, { uint.Δ: uint.Δ } ],
  VARIANT_UserFree64: [ VoidT, { uint.Δ: uint.Δ } ],
  IDispatch_Invoke_Proxy: [ long, { This: uint.Δ, dispIdMember: DISPID, riid: uint.Δ, lcid: LCID, wFlags: WORD, pDispParams: uint.Δ, pVarResult: uint.Δ, pExcepInfo: uint.Δ, puArgErr: uint.Δ } ],
  IDispatch_Invoke_Stub: [ long, { This: uint.Δ, dispIdMember: DISPID, riid: uint.Δ, lcid: LCID, dwFlags: DWORD, pDispParams: uint.Δ, pVarResult: uint.Δ, pExcepInfo: uint.Δ, pArgErr: uint.Δ, cVarRef: UINT, rgVarRefIdx: uint.Δ, rgVarRef: uint.Δ } ],
  IEnumVARIANT_Next_Proxy: [ long, { This: uint.Δ, celt: ULONG, rgVar: uint.Δ, pCeltFetched: ulong.Δ } ],
  IEnumVARIANT_Next_Stub: [ long, { This: uint.Δ, celt: ULONG, rgVar: uint.Δ, pCeltFetched: ulong.Δ } ],
  ITypeComp_Bind_Proxy: [ long, { This: uint.Δ, szName: LPOLESTR, lHashVal: ULONG, wFlags: WORD, ppTInfo: uint.Δ.Δ, pDescKind: uint.Δ, pBindPtr: uint.Δ } ],
  ITypeComp_Bind_Stub: [ long, { This: uint.Δ, szName: LPOLESTR, lHashVal: ULONG, wFlags: WORD, ppTInfo: uint.Δ.Δ, pDescKind: uint.Δ, ppFuncDesc: VOIDPTR.Δ, ppVarDesc: VOIDPTR.Δ, ppTypeComp: uint.Δ.Δ, pDummy: uint.Δ } ],
  ITypeComp_BindType_Proxy: [ long, { This: uint.Δ, szName: LPOLESTR, lHashVal: ULONG, ppTInfo: uint.Δ.Δ, ppTComp: uint.Δ.Δ } ],
  ITypeComp_BindType_Stub: [ long, { This: uint.Δ, szName: LPOLESTR, lHashVal: ULONG, ppTInfo: uint.Δ.Δ } ],
  ITypeInfo_GetTypeAttr_Proxy: [ long, { This: uint.Δ, ppTypeAttr: uint.Δ.Δ } ],
  ITypeInfo_GetTypeAttr_Stub: [ long, { This: uint.Δ, ppTypeAttr: VOIDPTR.Δ, pDummy: uint.Δ } ],
  ITypeInfo_GetFuncDesc_Proxy: [ long, { This: uint.Δ, index: UINT, ppFuncDesc: uint.Δ.Δ } ],
  ITypeInfo_GetFuncDesc_Stub: [ long, { This: uint.Δ, index: UINT, ppFuncDesc: VOIDPTR.Δ, pDummy: uint.Δ } ],
  ITypeInfo_GetVarDesc_Proxy: [ long, { This: uint.Δ, index: UINT, ppVarDesc: uint.Δ.Δ } ],
  ITypeInfo_GetVarDesc_Stub: [ long, { This: uint.Δ, index: UINT, ppVarDesc: VOIDPTR.Δ, pDummy: uint.Δ } ],
  ITypeInfo_GetNames_Proxy: [ long, { This: uint.Δ, memid: MEMBERID, rgBstrNames: ushort.Δ.Δ, cMaxNames: UINT, pcNames: uint.Δ } ],
  ITypeInfo_GetNames_Stub: [ long, { This: uint.Δ, memid: MEMBERID, rgBstrNames: ushort.Δ.Δ, cMaxNames: UINT, pcNames: uint.Δ } ],
  ITypeInfo_GetIDsOfNames_Proxy: [ long, { This: uint.Δ, rgszNames: ushort.Δ.Δ, cNames: UINT, pMemId: long.Δ } ],
  ITypeInfo_GetIDsOfNames_Stub: [ long, { This: uint.Δ } ],
  ITypeInfo_Invoke_Proxy: [ long, { This: uint.Δ, pvInstance: PVOID, memid: MEMBERID, wFlags: WORD, pDispParams: uint.Δ, pVarResult: uint.Δ, pExcepInfo: uint.Δ, puArgErr: uint.Δ } ],
  ITypeInfo_Invoke_Stub: [ long, { This: uint.Δ } ],
  ITypeInfo_GetDocumentation_Proxy: [ long, { This: uint.Δ, memid: MEMBERID, pBstrName: ushort.Δ.Δ, pBstrDocString: ushort.Δ.Δ, pdwHelpContext: ulong.Δ, pBstrHelpFile: ushort.Δ.Δ } ],
  ITypeInfo_GetDocumentation_Stub: [ long, { This: uint.Δ, memid: MEMBERID, refPtrFlags: DWORD, pBstrName: ushort.Δ.Δ, pBstrDocString: ushort.Δ.Δ, pdwHelpContext: ulong.Δ, pBstrHelpFile: ushort.Δ.Δ } ],
  ITypeInfo_GetDllEntry_Proxy: [ long, { This: uint.Δ, memid: MEMBERID, invKind: INVOKEKIND, pBstrDllName: ushort.Δ.Δ, pBstrName: ushort.Δ.Δ, pwOrdinal: ushort.Δ } ],
  ITypeInfo_GetDllEntry_Stub: [ long, { This: uint.Δ, memid: MEMBERID, invKind: INVOKEKIND, refPtrFlags: DWORD, pBstrDllName: ushort.Δ.Δ, pBstrName: ushort.Δ.Δ, pwOrdinal: ushort.Δ } ],
  ITypeInfo_AddressOfMember_Proxy: [ long, { This: uint.Δ, memid: MEMBERID, invKind: INVOKEKIND, ppv: VoidT.Δ.Δ } ],
  ITypeInfo_AddressOfMember_Stub: [ long, { This: uint.Δ } ],
  ITypeInfo_CreateInstance_Proxy: [ long, { This: uint.Δ, pUnkOuter: uint.Δ, riid: uint.Δ, ppvObj: VoidT.Δ.Δ } ],
  ITypeInfo_CreateInstance_Stub: [ long, { This: uint.Δ, riid: uint.Δ, ppvObj: uint.Δ.Δ } ],
  ITypeInfo_GetContainingTypeLib_Proxy: [ long, { This: uint.Δ, ppTLib: uint.Δ.Δ, pIndex: uint.Δ } ],
  ITypeInfo_GetContainingTypeLib_Stub: [ long, { This: uint.Δ, ppTLib: uint.Δ.Δ, pIndex: uint.Δ } ],
  ITypeInfo_ReleaseTypeAttr_Proxy: [ VoidT, { This: uint.Δ, pTypeAttr: uint.Δ } ],
  ITypeInfo_ReleaseTypeAttr_Stub: [ long, { This: uint.Δ } ],
  ITypeInfo_ReleaseFuncDesc_Proxy: [ VoidT, { This: uint.Δ, pFuncDesc: uint.Δ } ],
  ITypeInfo_ReleaseFuncDesc_Stub: [ long, { This: uint.Δ } ],
  ITypeInfo_ReleaseVarDesc_Proxy: [ VoidT, { This: uint.Δ, pVarDesc: uint.Δ } ],
  ITypeInfo_ReleaseVarDesc_Stub: [ long, { This: uint.Δ } ],
  ITypeInfo2_GetDocumentation2_Proxy: [ long, { This: uint.Δ, memid: MEMBERID, lcid: LCID, pbstrHelpString: ushort.Δ.Δ, pdwHelpStringContext: ulong.Δ, pbstrHelpStringDll: ushort.Δ.Δ } ],
  ITypeInfo2_GetDocumentation2_Stub: [ long, { This: uint.Δ, memid: MEMBERID, lcid: LCID, refPtrFlags: DWORD, pbstrHelpString: ushort.Δ.Δ, pdwHelpStringContext: ulong.Δ, pbstrHelpStringDll: ushort.Δ.Δ } ],
  ITypeLib_GetTypeInfoCount_Proxy: [ uint, { This: uint.Δ } ],
  ITypeLib_GetTypeInfoCount_Stub: [ long, { This: uint.Δ, pcTInfo: uint.Δ } ],
  ITypeLib_GetLibAttr_Proxy: [ long, { This: uint.Δ, ppTLibAttr: uint.Δ.Δ } ],
  ITypeLib_GetLibAttr_Stub: [ long, { This: uint.Δ, ppTLibAttr: VOIDPTR.Δ, pDummy: uint.Δ } ],
  ITypeLib_GetDocumentation_Proxy: [ long, { This: uint.Δ, index: INT, pBstrName: ushort.Δ.Δ, pBstrDocString: ushort.Δ.Δ, pdwHelpContext: ulong.Δ, pBstrHelpFile: ushort.Δ.Δ } ],
  ITypeLib_GetDocumentation_Stub: [ long, { This: uint.Δ, index: INT, refPtrFlags: DWORD, pBstrName: ushort.Δ.Δ, pBstrDocString: ushort.Δ.Δ, pdwHelpContext: ulong.Δ, pBstrHelpFile: ushort.Δ.Δ } ],
  ITypeLib_IsName_Proxy: [ long, { This: uint.Δ, szNameBuf: LPOLESTR, lHashVal: ULONG, pfName: int.Δ } ],
  ITypeLib_IsName_Stub: [ long, { This: uint.Δ, szNameBuf: LPOLESTR, lHashVal: ULONG, pfName: int.Δ, pBstrLibName: ushort.Δ.Δ } ],
  ITypeLib_FindName_Proxy: [ long, { This: uint.Δ, szNameBuf: LPOLESTR, lHashVal: ULONG, ppTInfo: uint.Δ.Δ, rgMemId: long.Δ, pcFound: ushort.Δ } ],
  ITypeLib_FindName_Stub: [ long, { This: uint.Δ, szNameBuf: LPOLESTR, lHashVal: ULONG, ppTInfo: uint.Δ.Δ, rgMemId: long.Δ, pcFound: ushort.Δ, pBstrLibName: ushort.Δ.Δ } ],
  ITypeLib_ReleaseTLibAttr_Proxy: [ VoidT, { This: uint.Δ, pTLibAttr: uint.Δ } ],
  ITypeLib_ReleaseTLibAttr_Stub: [ long, { This: uint.Δ } ],
  ITypeLib2_GetLibStatistics_Proxy: [ long, { This: uint.Δ, pcUniqueNames: ulong.Δ, pcchUniqueNames: ulong.Δ } ],
  ITypeLib2_GetLibStatistics_Stub: [ long, { This: uint.Δ, pcUniqueNames: ulong.Δ, pcchUniqueNames: ulong.Δ } ],
  ITypeLib2_GetDocumentation2_Proxy: [ long, { This: uint.Δ, index: INT, lcid: LCID, pbstrHelpString: ushort.Δ.Δ, pdwHelpStringContext: ulong.Δ, pbstrHelpStringDll: ushort.Δ.Δ } ],
  ITypeLib2_GetDocumentation2_Stub: [ long, { This: uint.Δ, index: INT, lcid: LCID, refPtrFlags: DWORD, pbstrHelpString: ushort.Δ.Δ, pdwHelpStringContext: ulong.Δ, pbstrHelpStringDll: ushort.Δ.Δ } ],
  IPropertyBag_Read_Proxy: [ long, { This: uint.Δ, pszPropName: LPCOLESTR, pVar: uint.Δ, pErrorLog: uint.Δ } ],
  IPropertyBag_Read_Stub: [ long, { This: uint.Δ, pszPropName: LPCOLESTR, pVar: uint.Δ, pErrorLog: uint.Δ, varType: DWORD, pUnkObj: uint.Δ } ],
  CreateURLMoniker: [ long, { pMkCtx: LPMONIKER, szURL: LPCWSTR, ppmk: VOIDPTR.Δ } ],
  CreateURLMonikerEx: [ long, { pMkCtx: LPMONIKER, szURL: LPCWSTR, ppmk: VOIDPTR.Δ, dwFlags: DWORD } ],
  GetClassURL: [ long, { szURL: LPCWSTR, pClsID: uint.Δ } ],
  CreateAsyncBindCtx: [ long, { reserved: DWORD, pBSCb: uint.Δ, pEFetc: uint.Δ, ppBC: uint.Δ.Δ } ],
  CreateURLMonikerEx2: [ long, { pMkCtx: LPMONIKER, pUri: uint.Δ, ppmk: VOIDPTR.Δ, dwFlags: DWORD } ],
  CreateAsyncBindCtxEx: [ long, { pbc: uint.Δ, dwOptions: DWORD, pBSCb: uint.Δ, pEnum: uint.Δ, ppBC: uint.Δ.Δ, reserved: DWORD } ],
  MkParseDisplayNameEx: [ long, { pbc: uint.Δ, szDisplayName: LPCWSTR, pchEaten: ulong.Δ, ppmk: VOIDPTR.Δ } ],
  RegisterBindStatusCallback: [ long, { pBC: LPBC, pBSCb: uint.Δ, ppBSCBPrev: uint.Δ.Δ, dwReserved: DWORD } ],
  RevokeBindStatusCallback: [ long, { pBC: LPBC, pBSCb: uint.Δ } ],
  GetClassFileOrMime: [ long, { pBC: LPBC, szFilename: LPCWSTR, pBuffer: LPVOID, cbSize: DWORD, szMime: LPCWSTR, dwReserved: DWORD, pclsid: uint.Δ } ],
  IsValidURL: [ long, { pBC: LPBC, szURL: LPCWSTR, dwReserved: DWORD } ],
  CoGetClassObjectFromURL: [ long, { rCLASSID: uint.Δ, szCODE: LPCWSTR, dwFileVersionMS: DWORD, dwFileVersionLS: DWORD, szTYPE: LPCWSTR, pBindCtx: LPBINDCTX, dwClsContext: DWORD, pvReserved: LPVOID, riid: uint.Δ, ppv: VoidT.Δ.Δ } ],
  IEInstallScope: [ long, { pdwScope: LPDWORD } ],
  FaultInIEFeature: [ long, { hWnd: HWND, pClassSpec: uint.Δ, pQuery: uint.Δ, dwFlags: DWORD } ],
  GetComponentIDFromCLSSPEC: [ long, { pClassspec: uint.Δ, ppszComponentID: int8.Δ.Δ } ],
  IsAsyncMoniker: [ long, { pmk: uint.Δ } ],
  CreateURLBinding: [ long, { lpszUrl: LPCWSTR, pbc: uint.Δ, ppBdg: uint.Δ.Δ } ],
  RegisterMediaTypes: [ long, { ctypes: UINT, rgszTypes: int8.Δ.Δ, rgcfTypes: ushort.Δ } ],
  FindMediaType: [ long, { rgszTypes: LPCSTR, rgcfTypes: ushort.Δ } ],
  CreateFormatEnumerator: [ long, { cfmtetc: UINT, rgfmtetc: uint.Δ, ppenumfmtetc: uint.Δ.Δ } ],
  RegisterFormatEnumerator: [ long, { pBC: LPBC, pEFetc: uint.Δ, reserved: DWORD } ],
  RevokeFormatEnumerator: [ long, { pBC: LPBC, pEFetc: uint.Δ } ],
  RegisterMediaTypeClass: [ long, { pBC: LPBC, ctypes: UINT, rgszTypes: int8.Δ.Δ, rgclsID: uint.Δ, reserved: DWORD } ],
  FindMediaTypeClass: [ long, { pBC: LPBC, szType: LPCSTR, pclsID: uint.Δ, reserved: DWORD } ],
  UrlMkSetSessionOption: [ long, { dwOption: DWORD, pBuffer: LPVOID, dwBufferLength: DWORD, dwReserved: DWORD } ],
  UrlMkGetSessionOption: [ long, { dwOption: DWORD, pBuffer: LPVOID, dwBufferLength: DWORD, pdwBufferLengthOut: ulong.Δ, dwReserved: DWORD } ],
  FindMimeFromData: [ long, { pBC: LPBC, pwzUrl: LPCWSTR, pBuffer: LPVOID, cbSize: DWORD, pwzMimeProposed: LPCWSTR, dwMimeFlags: DWORD, ppwzMimeOut: ushort.Δ.Δ, dwReserved: DWORD } ],
  ObtainUserAgentString: [ long, { dwOption: DWORD, pszUAOut: LPSTR, cbSize: ulong.Δ } ],
  CompareSecurityIds: [ long, { pbSecurityId1: uchar.Δ, dwLen1: DWORD, pbSecurityId2: uchar.Δ, dwLen2: DWORD, dwReserved: DWORD } ],
  CompatFlagsFromClsid: [ long, { pclsid: uint.Δ, pdwCompatFlags: LPDWORD, pdwMiscStatusFlags: LPDWORD } ],
  IBinding_RemoteGetBindResult_Proxy: [ long, { This: uint.Δ, pclsidProtocol: uint.Δ, pdwResult: ulong.Δ, pszResult: ushort.Δ.Δ, dwReserved: DWORD } ],
  IBinding_RemoteGetBindResult_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IBindStatusCallback_RemoteGetBindInfo_Proxy: [ long, { This: uint.Δ, grfBINDF: ulong.Δ, pbindinfo: uint.Δ, pstgmed: uint.Δ } ],
  IBindStatusCallback_RemoteGetBindInfo_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IBindStatusCallback_RemoteOnDataAvailable_Proxy: [ long, { This: uint.Δ, grfBSCF: DWORD, dwSize: DWORD, pformatetc: uint.Δ, pstgmed: uint.Δ } ],
  IBindStatusCallback_RemoteOnDataAvailable_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IBindStatusCallbackEx_RemoteGetBindInfoEx_Proxy: [ long, { This: uint.Δ, grfBINDF: ulong.Δ, pbindinfo: uint.Δ, pstgmed: uint.Δ, grfBINDF2: ulong.Δ, pdwReserved: ulong.Δ } ],
  IBindStatusCallbackEx_RemoteGetBindInfoEx_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  CreateUri: [ long, { pwzURI: LPCWSTR, dwFlags: DWORD, dwReserved: DWORD_PTR, ppURI: uint.Δ.Δ } ],
  CreateUriWithFragment: [ long, { pwzURI: LPCWSTR, pwzFragment: LPCWSTR, dwFlags: DWORD, dwReserved: DWORD_PTR, ppURI: uint.Δ.Δ } ],
  CreateUriFromMultiByteString: [ long, { pszANSIInputUri: LPCSTR, dwEncodingFlags: DWORD, dwCodePage: DWORD, dwCreateFlags: DWORD, dwReserved: DWORD_PTR, ppUri: uint.Δ.Δ } ],
  CreateIUriBuilder: [ long, { pIUri: uint.Δ, dwFlags: DWORD, dwReserved: DWORD_PTR, ppIUriBuilder: uint.Δ.Δ } ],
  IWinInetInfo_RemoteQueryOption_Proxy: [ long, { This: uint.Δ, dwOption: DWORD, pBuffer: uchar.Δ, pcbBuf: ulong.Δ } ],
  IWinInetInfo_RemoteQueryOption_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IWinInetHttpInfo_RemoteQueryInfo_Proxy: [ long, { This: uint.Δ, dwOption: DWORD, pBuffer: uchar.Δ, pcbBuf: ulong.Δ, pdwFlags: ulong.Δ, pdwReserved: ulong.Δ } ],
  IWinInetHttpInfo_RemoteQueryInfo_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IBindHost_RemoteMonikerBindToStorage_Proxy: [ long, { This: uint.Δ, pMk: uint.Δ, pBC: uint.Δ, pBSC: uint.Δ, riid: uint.Δ, ppvObj: uint.Δ.Δ } ],
  IBindHost_RemoteMonikerBindToStorage_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IBindHost_RemoteMonikerBindToObject_Proxy: [ long, { This: uint.Δ, pMk: uint.Δ, pBC: uint.Δ, pBSC: uint.Δ, riid: uint.Δ, ppvObj: uint.Δ.Δ } ],
  IBindHost_RemoteMonikerBindToObject_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  HlinkSimpleNavigateToString: [ long, { szTarget: LPCWSTR, szLocation: LPCWSTR, szTargetFrameName: LPCWSTR, pUnk: uint.Δ, pbc: uint.Δ, uint.Δ: uint.Δ, grfHLNF: DWORD, dwReserved: DWORD } ],
  HlinkSimpleNavigateToMoniker: [ long, { pmkTarget: uint.Δ, szLocation: LPCWSTR, szTargetFrameName: LPCWSTR, pUnk: uint.Δ, pbc: uint.Δ, uint.Δ: uint.Δ, grfHLNF: DWORD, dwReserved: DWORD } ],
  URLOpenStreamA: [ long, { LPBINDSTATUSCALLBACK: LPBINDSTATUSCALLBACK } ],
  URLOpenStreamW: [ long, { LPBINDSTATUSCALLBACK: LPBINDSTATUSCALLBACK } ],
  URLOpenPullStreamA: [ long, { LPBINDSTATUSCALLBACK: LPBINDSTATUSCALLBACK } ],
  URLOpenPullStreamW: [ long, { LPBINDSTATUSCALLBACK: LPBINDSTATUSCALLBACK } ],
  URLDownloadToFileA: [ long, { LPBINDSTATUSCALLBACK: LPBINDSTATUSCALLBACK } ],
  URLDownloadToFileW: [ long, { LPBINDSTATUSCALLBACK: LPBINDSTATUSCALLBACK } ],
  URLDownloadToCacheFileA: [ long, { LPBINDSTATUSCALLBACK: LPBINDSTATUSCALLBACK, cchFileName: DWORD } ],
  URLDownloadToCacheFileW: [ long, { LPBINDSTATUSCALLBACK: LPBINDSTATUSCALLBACK, cchFileName: DWORD } ],
  URLOpenBlockingStreamA: [ long, { LPBINDSTATUSCALLBACK: LPBINDSTATUSCALLBACK } ],
  URLOpenBlockingStreamW: [ long, { LPBINDSTATUSCALLBACK: LPBINDSTATUSCALLBACK } ],
  HlinkGoBack: [ long, { pUnk: uint.Δ } ],
  HlinkGoForward: [ long, { pUnk: uint.Δ } ],
  HlinkNavigateString: [ long, { pUnk: uint.Δ, szTarget: LPCWSTR } ],
  HlinkNavigateMoniker: [ long, { pUnk: uint.Δ, pmkTarget: uint.Δ } ],
  CoInternetParseUrl: [ long, { pwzUrl: LPCWSTR, ParseAction: PARSEACTION, dwFlags: DWORD, pszResult: LPWSTR, cchResult: DWORD, pcchResult: ulong.Δ, dwReserved: DWORD } ],
  CoInternetParseIUri: [ long, { pIUri: uint.Δ, ParseAction: PARSEACTION, dwFlags: DWORD, pwzResult: LPWSTR, cchResult: DWORD, pcchResult: ulong.Δ, dwReserved: DWORD_PTR } ],
  CoInternetCombineUrl: [ long, { pwzBaseUrl: LPCWSTR, pwzRelativeUrl: LPCWSTR, dwCombineFlags: DWORD, pszResult: LPWSTR, cchResult: DWORD, pcchResult: ulong.Δ, dwReserved: DWORD } ],
  CoInternetCombineUrlEx: [ long, { pBaseUri: uint.Δ, pwzRelativeUrl: LPCWSTR, dwCombineFlags: DWORD, ppCombinedUri: uint.Δ.Δ, dwReserved: DWORD_PTR } ],
  CoInternetCombineIUri: [ long, { pBaseUri: uint.Δ, pRelativeUri: uint.Δ, dwCombineFlags: DWORD, ppCombinedUri: uint.Δ.Δ, dwReserved: DWORD_PTR } ],
  CoInternetCompareUrl: [ long, { pwzUrl1: LPCWSTR, pwzUrl2: LPCWSTR, dwFlags: DWORD } ],
  CoInternetGetProtocolFlags: [ long, { pwzUrl: LPCWSTR, pdwFlags: ulong.Δ, dwReserved: DWORD } ],
  CoInternetQueryInfo: [ long, { pwzUrl: LPCWSTR, QueryOptions: QUERYOPTION, dwQueryFlags: DWORD, pvBuffer: LPVOID, cbBuffer: DWORD, pcbBuffer: ulong.Δ, dwReserved: DWORD } ],
  CoInternetGetSession: [ long, { dwSessionMode: DWORD, ppIInternetSession: uint.Δ.Δ, dwReserved: DWORD } ],
  CoInternetGetSecurityUrl: [ long, { pwszUrl: LPCWSTR, ppwszSecUrl: ushort.Δ.Δ, psuAction: PSUACTION, dwReserved: DWORD } ],
  AsyncInstallDistributionUnit: [ long, { szDistUnit: LPCWSTR, szTYPE: LPCWSTR, szExt: LPCWSTR, dwFileVersionMS: DWORD, dwFileVersionLS: DWORD, szURL: LPCWSTR, pbc: uint.Δ, pvReserved: LPVOID, flags: DWORD } ],
  CoInternetGetSecurityUrlEx: [ long, { pUri: uint.Δ, ppSecUri: uint.Δ.Δ, psuAction: PSUACTION, dwReserved: DWORD_PTR } ],
  CoInternetSetFeatureEnabled: [ long, { FeatureEntry: INTERNETFEATURELIST, dwFlags: DWORD, fEnable: BOOL } ],
  CoInternetIsFeatureEnabled: [ long, { FeatureEntry: INTERNETFEATURELIST, dwFlags: DWORD } ],
  CoInternetIsFeatureEnabledForUrl: [ long, { FeatureEntry: INTERNETFEATURELIST, dwFlags: DWORD, szURL: LPCWSTR, pSecMgr: uint.Δ } ],
  CoInternetIsFeatureEnabledForIUri: [ long, { FeatureEntry: INTERNETFEATURELIST, dwFlags: DWORD, pIUri: uint.Δ, pSecMgr: uint.Δ } ],
  CoInternetIsFeatureZoneElevationEnabled: [ long, { szFromURL: LPCWSTR, szToURL: LPCWSTR, pSecMgr: uint.Δ, dwFlags: DWORD } ],
  CopyStgMedium: [ long, { pcstgmedSrc: uint.Δ, pstgmedDest: uint.Δ } ],
  CopyBindInfo: [ long, { pcbiSrc: uint.Δ, pbiDest: uint.Δ } ],
  ReleaseBindInfo: [ VoidT, { pbindinfo: uint.Δ } ],
  CoInternetCreateSecurityManager: [ long, { pSP: uint.Δ, ppSM: uint.Δ.Δ, dwReserved: DWORD } ],
  CoInternetCreateZoneManager: [ long, { pSP: uint.Δ, ppZM: uint.Δ.Δ, dwReserved: DWORD } ],
  GetSoftwareUpdateInfo: [ long, { szDistUnit: LPCWSTR, psdi: LPSOFTDISTINFO } ],
  SetSoftwareUpdateAdvertisementState: [ long, { szDistUnit: LPCWSTR, dwAdState: DWORD, dwAdvertisedVersionMS: DWORD, dwAdvertisedVersionLS: DWORD } ],
  IsLoggingEnabledA: [ int, { pszUrl: LPCSTR } ],
  IsLoggingEnabledW: [ int, { pwszUrl: LPCWSTR } ],
  WriteHitLogging: [ int, { lpLogginginfo: LPHIT_LOGGING_INFO } ],
  IBinding_GetBindResult_Proxy: [ long, { This: uint.Δ, pclsidProtocol: uint.Δ, pdwResult: ulong.Δ, pszResult: ushort.Δ.Δ, pdwReserved: ulong.Δ } ],
  IBinding_GetBindResult_Stub: [ long, { This: uint.Δ, pclsidProtocol: uint.Δ, pdwResult: ulong.Δ, pszResult: ushort.Δ.Δ, dwReserved: DWORD } ],
  IBindStatusCallback_GetBindInfo_Proxy: [ long, { This: uint.Δ, grfBINDF: ulong.Δ, pbindinfo: uint.Δ } ],
  IBindStatusCallback_GetBindInfo_Stub: [ long, { This: uint.Δ, grfBINDF: ulong.Δ, pbindinfo: uint.Δ, pstgmed: uint.Δ } ],
  IBindStatusCallback_OnDataAvailable_Proxy: [ long, { This: uint.Δ, grfBSCF: DWORD, dwSize: DWORD, pformatetc: uint.Δ, pstgmed: uint.Δ } ],
  IBindStatusCallback_OnDataAvailable_Stub: [ long, { This: uint.Δ, grfBSCF: DWORD, dwSize: DWORD, pformatetc: uint.Δ, pstgmed: uint.Δ } ],
  IBindStatusCallbackEx_GetBindInfoEx_Proxy: [ long, { This: uint.Δ, grfBINDF: ulong.Δ, pbindinfo: uint.Δ, grfBINDF2: ulong.Δ, pdwReserved: ulong.Δ } ],
  IBindStatusCallbackEx_GetBindInfoEx_Stub: [ long, { This: uint.Δ, grfBINDF: ulong.Δ, pbindinfo: uint.Δ, pstgmed: uint.Δ, grfBINDF2: ulong.Δ, pdwReserved: ulong.Δ } ],
  IWinInetInfo_QueryOption_Proxy: [ long, { This: uint.Δ, dwOption: DWORD, pBuffer: LPVOID, pcbBuf: ulong.Δ } ],
  IWinInetInfo_QueryOption_Stub: [ long, { This: uint.Δ, dwOption: DWORD, pBuffer: uchar.Δ, pcbBuf: ulong.Δ } ],
  IWinInetHttpInfo_QueryInfo_Proxy: [ long, { This: uint.Δ, dwOption: DWORD, pBuffer: LPVOID, pcbBuf: ulong.Δ, pdwFlags: ulong.Δ, pdwReserved: ulong.Δ } ],
  IWinInetHttpInfo_QueryInfo_Stub: [ long, { This: uint.Δ, dwOption: DWORD, pBuffer: uchar.Δ, pcbBuf: ulong.Δ, pdwFlags: ulong.Δ, pdwReserved: ulong.Δ } ],
  IBindHost_MonikerBindToStorage_Proxy: [ long, { This: uint.Δ, pMk: uint.Δ, pBC: uint.Δ, pBSC: uint.Δ, riid: uint.Δ, ppvObj: VoidT.Δ.Δ } ],
  IBindHost_MonikerBindToStorage_Stub: [ long, { This: uint.Δ, pMk: uint.Δ, pBC: uint.Δ, pBSC: uint.Δ, riid: uint.Δ, ppvObj: uint.Δ.Δ } ],
  IBindHost_MonikerBindToObject_Proxy: [ long, { This: uint.Δ, pMk: uint.Δ, pBC: uint.Δ, pBSC: uint.Δ, riid: uint.Δ, ppvObj: VoidT.Δ.Δ } ],
  IBindHost_MonikerBindToObject_Stub: [ long, { This: uint.Δ, pMk: uint.Δ, pBC: uint.Δ, pBSC: uint.Δ, riid: uint.Δ, ppvObj: uint.Δ.Δ } ],
  IEnumSTATPROPSTG_RemoteNext_Proxy: [ long, { This: uint.Δ, celt: ULONG, rgelt: uint.Δ, pceltFetched: ulong.Δ } ],
  IEnumSTATPROPSTG_RemoteNext_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IEnumSTATPROPSETSTG_RemoteNext_Proxy: [ long, { This: uint.Δ, celt: ULONG, rgelt: uint.Δ, pceltFetched: ulong.Δ } ],
  IEnumSTATPROPSETSTG_RemoteNext_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  PropVariantCopy: [ long, { pvarDest: uint.Δ, pvarSrc: uint.Δ } ],
  PropVariantClear: [ long, { pvar: uint.Δ } ],
  FreePropVariantArray: [ long, { cVariants: ULONG, rgvars: uint.Δ } ],
  StgCreatePropStg: [ long, { pUnk: uint.Δ, fmtid: uint.Δ, pclsid: uint.Δ, grfFlags: DWORD, dwReserved: DWORD, ppPropStg: uint.Δ.Δ } ],
  StgOpenPropStg: [ long, { pUnk: uint.Δ, fmtid: uint.Δ, grfFlags: DWORD, dwReserved: DWORD, ppPropStg: uint.Δ.Δ } ],
  StgCreatePropSetStg: [ long, { pStorage: uint.Δ, dwReserved: DWORD, ppPropSetStg: uint.Δ.Δ } ],
  FmtIdToPropStgName: [ long, { pfmtid: uint.Δ, oszName: LPOLESTR } ],
  PropStgNameToFmtId: [ long, { oszName: LPOLESTR, pfmtid: uint.Δ } ],
  StgConvertVariantToProperty: [ uint, { pvar: uint.Δ, CodePage: USHORT, pprop: uint.Δ, pcb: ulong.Δ, pid: PROPID, fReserved: BOOLEAN, pcIndirect: ulong.Δ } ],
  LPSAFEARRAY_UserSize: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  LPSAFEARRAY_UserMarshal: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  LPSAFEARRAY_UserUnmarshal: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  LPSAFEARRAY_UserFree: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  LPSAFEARRAY_UserSize64: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  LPSAFEARRAY_UserMarshal64: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  LPSAFEARRAY_UserUnmarshal64: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  LPSAFEARRAY_UserFree64: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  IEnumSTATPROPSTG_Next_Proxy: [ long, { This: uint.Δ, celt: ULONG, rgelt: uint.Δ, pceltFetched: ulong.Δ } ],
  IEnumSTATPROPSTG_Next_Stub: [ long, { This: uint.Δ, celt: ULONG, rgelt: uint.Δ, pceltFetched: ulong.Δ } ],
  IEnumSTATPROPSETSTG_Next_Proxy: [ long, { This: uint.Δ, celt: ULONG, rgelt: uint.Δ, pceltFetched: ulong.Δ } ],
  IEnumSTATPROPSETSTG_Next_Stub: [ long, { This: uint.Δ, celt: ULONG, rgelt: uint.Δ, pceltFetched: ulong.Δ } ],
  CreateStdProgressIndicator: [ long, { hwndParent: HWND, pszTitle: LPCOLESTR, pIbscCaller: uint.Δ, ppIbsc: uint.Δ.Δ } ],
  SysAllocString: [ ushort.Δ, { psz: ushort.Δ } ],
  SysReAllocString: [ int, { pbstr: ushort.Δ.Δ, psz: ushort.Δ } ],
  SysAllocStringLen: [ ushort.Δ, { strIn: ushort.Δ, ui: UINT } ],
  SysReAllocStringLen: [ int, { pbstr: ushort.Δ.Δ, psz: ushort.Δ, len: uint } ],
  SysFreeString: [ VoidT, { bstrString: BSTR } ],
  SysStringLen: [ uint, { BSTR: BSTR } ],
  SysStringByteLen: [ uint, { bstr: BSTR } ],
  SysAllocStringByteLen: [ ushort.Δ, { psz: LPCSTR, len: UINT } ],
  DosDateTimeToVariantTime: [ int, { wDosDate: USHORT, wDosTime: USHORT, pvtime: double.Δ } ],
  VariantTimeToDosDateTime: [ int, { vtime: DOUBLE, pwDosDate: ushort.Δ, pwDosTime: ushort.Δ } ],
  SystemTimeToVariantTime: [ int, { lpSystemTime: LPSYSTEMTIME, pvtime: double.Δ } ],
  VariantTimeToSystemTime: [ int, { vtime: DOUBLE, lpSystemTime: LPSYSTEMTIME } ],
  SafeArrayAllocDescriptor: [ long, { cDims: UINT, ppsaOut: uint.Δ.Δ } ],
  SafeArrayAllocDescriptorEx: [ long, { vt: VARTYPE, cDims: UINT, ppsaOut: uint.Δ.Δ } ],
  SafeArrayAllocData: [ long, { psa: uint.Δ } ],
  SafeArrayCreate: [ uint, { vt: VARTYPE, cDims: UINT, rgsabound: uint.Δ } ],
  SafeArrayCreateEx: [ uint, { vt: VARTYPE, cDims: UINT, rgsabound: uint.Δ, pvExtra: PVOID } ],
  SafeArrayCopyData: [ long, { psaSource: uint.Δ, psaTarget: uint.Δ } ],
  SafeArrayDestroyDescriptor: [ long, { psa: uint.Δ } ],
  SafeArrayDestroyData: [ long, { psa: uint.Δ } ],
  SafeArrayDestroy: [ long, { psa: uint.Δ } ],
  SafeArrayRedim: [ long, { psa: uint.Δ, psaboundNew: uint.Δ } ],
  SafeArrayGetDim: [ uint, { psa: uint.Δ } ],
  SafeArrayGetElemsize: [ uint, { psa: uint.Δ } ],
  SafeArrayGetUBound: [ long, { psa: uint.Δ, nDim: UINT, plUbound: long.Δ } ],
  SafeArrayGetLBound: [ long, { psa: uint.Δ, nDim: UINT, plLbound: long.Δ } ],
  SafeArrayLock: [ long, { psa: uint.Δ } ],
  SafeArrayUnlock: [ long, { psa: uint.Δ } ],
  SafeArrayAccessData: [ long, { psa: uint.Δ, ppvData: VoidT.Δ.Δ } ],
  SafeArrayUnaccessData: [ long, { psa: uint.Δ } ],
  SafeArrayGetElement: [ long, { psa: uint.Δ, rgIndices: long.Δ, pv: VoidT.Δ } ],
  SafeArrayPutElement: [ long, { psa: uint.Δ, rgIndices: long.Δ, pv: VoidT.Δ } ],
  SafeArrayCopy: [ long, { psa: uint.Δ, ppsaOut: uint.Δ.Δ } ],
  SafeArrayPtrOfIndex: [ long, { psa: uint.Δ, rgIndices: long.Δ, ppvData: VoidT.Δ.Δ } ],
  SafeArraySetRecordInfo: [ long, { psa: uint.Δ, prinfo: uint.Δ } ],
  SafeArrayGetRecordInfo: [ long, { psa: uint.Δ, prinfo: uint.Δ.Δ } ],
  SafeArraySetIID: [ long, { psa: uint.Δ, guid: uint.Δ } ],
  SafeArrayGetIID: [ long, { psa: uint.Δ, pguid: uint.Δ } ],
  SafeArrayGetVartype: [ long, { psa: uint.Δ, pvt: ushort.Δ } ],
  SafeArrayCreateVector: [ uint, { vt: VARTYPE, lLbound: LONG, cElements: ULONG } ],
  SafeArrayCreateVectorEx: [ uint, { vt: VARTYPE, lLbound: LONG, cElements: ULONG, pvExtra: PVOID } ],
  VariantInit: [ VoidT, { pvarg: uint.Δ } ],
  VariantClear: [ long, { pvarg: uint.Δ } ],
  VariantCopy: [ long, { pvargDest: uint.Δ, pvargSrc: uint.Δ } ],
  VariantCopyInd: [ long, { pvarDest: uint.Δ, pvargSrc: uint.Δ } ],
  VariantChangeType: [ long, { pvargDest: uint.Δ, pvarSrc: uint.Δ, wFlags: USHORT, vt: VARTYPE } ],
  VariantChangeTypeEx: [ long, { pvargDest: uint.Δ, pvarSrc: uint.Δ, lcid: LCID, wFlags: USHORT, vt: VARTYPE } ],
  VectorFromBstr: [ long, { bstr: BSTR, ppsa: uint.Δ.Δ } ],
  BstrFromVector: [ long, { psa: uint.Δ, pbstr: ushort.Δ.Δ } ],
  VarUI1FromI2: [ long, { sIn: SHORT, pbOut: uchar.Δ } ],
  VarUI1FromI4: [ long, { lIn: LONG, pbOut: uchar.Δ } ],
  VarUI1FromI8: [ long, { i64In: LONG64, pbOut: uchar.Δ } ],
  VarUI1FromR4: [ long, { fltIn: FLOAT, pbOut: uchar.Δ } ],
  VarUI1FromR8: [ long, { dblIn: DOUBLE, pbOut: uchar.Δ } ],
  VarUI1FromCy: [ long, { cyIn: CY, pbOut: uchar.Δ } ],
  VarUI1FromDate: [ long, { dateIn: DATE, pbOut: uchar.Δ } ],
  VarUI1FromStr: [ long, { strIn: LPCOLESTR, lcid: LCID, dwFlags: ULONG, pbOut: uchar.Δ } ],
  VarUI1FromDisp: [ long, { pdispIn: uint.Δ, lcid: LCID, pbOut: uchar.Δ } ],
  VarUI1FromBool: [ long, { boolIn: VARIANT_BOOL, pbOut: uchar.Δ } ],
  VarUI1FromI1: [ long, { cIn: CHAR, pbOut: uchar.Δ } ],
  VarUI1FromUI2: [ long, { uiIn: USHORT, pbOut: uchar.Δ } ],
  VarUI1FromUI4: [ long, { ulIn: ULONG, pbOut: uchar.Δ } ],
  VarUI1FromUI8: [ long, { ui64In: ULONG64, pbOut: uchar.Δ } ],
  VarUI1FromDec: [ long, { pdecIn: uint.Δ, pbOut: uchar.Δ } ],
  VarI2FromUI1: [ long, { bIn: BYTE, psOut: short.Δ } ],
  VarI2FromI4: [ long, { lIn: LONG, psOut: short.Δ } ],
  VarI2FromI8: [ long, { i64In: LONG64, psOut: short.Δ } ],
  VarI2FromR4: [ long, { fltIn: FLOAT, psOut: short.Δ } ],
  VarI2FromR8: [ long, { dblIn: DOUBLE, psOut: short.Δ } ],
  VarI2FromCy: [ long, { cyIn: CY, psOut: short.Δ } ],
  VarI2FromDate: [ long, { dateIn: DATE, psOut: short.Δ } ],
  VarI2FromStr: [ long, { strIn: LPCOLESTR, lcid: LCID, dwFlags: ULONG, psOut: short.Δ } ],
  VarI2FromDisp: [ long, { pdispIn: uint.Δ, lcid: LCID, psOut: short.Δ } ],
  VarI2FromBool: [ long, { boolIn: VARIANT_BOOL, psOut: short.Δ } ],
  VarI2FromI1: [ long, { cIn: CHAR, psOut: short.Δ } ],
  VarI2FromUI2: [ long, { uiIn: USHORT, psOut: short.Δ } ],
  VarI2FromUI4: [ long, { ulIn: ULONG, psOut: short.Δ } ],
  VarI2FromUI8: [ long, { ui64In: ULONG64, psOut: short.Δ } ],
  VarI2FromDec: [ long, { pdecIn: uint.Δ, psOut: short.Δ } ],
  VarI4FromUI1: [ long, { bIn: BYTE, plOut: long.Δ } ],
  VarI4FromI2: [ long, { sIn: SHORT, plOut: long.Δ } ],
  VarI4FromI8: [ long, { i64In: LONG64, plOut: long.Δ } ],
  VarI4FromR4: [ long, { fltIn: FLOAT, plOut: long.Δ } ],
  VarI4FromR8: [ long, { dblIn: DOUBLE, plOut: long.Δ } ],
  VarI4FromCy: [ long, { cyIn: CY, plOut: long.Δ } ],
  VarI4FromDate: [ long, { dateIn: DATE, plOut: long.Δ } ],
  VarI4FromStr: [ long, { strIn: LPCOLESTR, lcid: LCID, dwFlags: ULONG, plOut: long.Δ } ],
  VarI4FromDisp: [ long, { pdispIn: uint.Δ, lcid: LCID, plOut: long.Δ } ],
  VarI4FromBool: [ long, { boolIn: VARIANT_BOOL, plOut: long.Δ } ],
  VarI4FromI1: [ long, { cIn: CHAR, plOut: long.Δ } ],
  VarI4FromUI2: [ long, { uiIn: USHORT, plOut: long.Δ } ],
  VarI4FromUI4: [ long, { ulIn: ULONG, plOut: long.Δ } ],
  VarI4FromUI8: [ long, { ui64In: ULONG64, plOut: long.Δ } ],
  VarI4FromDec: [ long, { pdecIn: uint.Δ, plOut: long.Δ } ],
  VarI4FromInt: [ long, { intIn: INT, plOut: long.Δ } ],
  VarI8FromUI1: [ long, { bIn: BYTE, pi64Out: longlong.Δ } ],
  VarI8FromI2: [ long, { sIn: SHORT, pi64Out: longlong.Δ } ],
  VarI8FromI4: [ long, { lIn: LONG, pi64Out: longlong.Δ } ],
  VarI8FromR4: [ long, { fltIn: FLOAT, pi64Out: longlong.Δ } ],
  VarI8FromR8: [ long, { dblIn: DOUBLE, pi64Out: longlong.Δ } ],
  VarI8FromCy: [ long, { cyIn: CY, pi64Out: longlong.Δ } ],
  VarI8FromDate: [ long, { dateIn: DATE, pi64Out: longlong.Δ } ],
  VarI8FromStr: [ long, { strIn: LPCOLESTR, lcid: LCID, dwFlags: ulong, pi64Out: longlong.Δ } ],
  VarI8FromDisp: [ long, { pdispIn: uint.Δ, lcid: LCID, pi64Out: longlong.Δ } ],
  VarI8FromBool: [ long, { boolIn: VARIANT_BOOL, pi64Out: longlong.Δ } ],
  VarI8FromI1: [ long, { cIn: CHAR, pi64Out: longlong.Δ } ],
  VarI8FromUI2: [ long, { uiIn: USHORT, pi64Out: longlong.Δ } ],
  VarI8FromUI4: [ long, { ulIn: ULONG, pi64Out: longlong.Δ } ],
  VarI8FromUI8: [ long, { ui64In: ULONG64, pi64Out: longlong.Δ } ],
  VarI8FromDec: [ long, { pdecIn: uint.Δ, pi64Out: longlong.Δ } ],
  VarI8FromInt: [ long, { intIn: INT, pi64Out: longlong.Δ } ],
  VarR4FromUI1: [ long, { bIn: BYTE, pfltOut: float.Δ } ],
  VarR4FromI2: [ long, { sIn: SHORT, pfltOut: float.Δ } ],
  VarR4FromI4: [ long, { lIn: LONG, pfltOut: float.Δ } ],
  VarR4FromI8: [ long, { i64In: LONG64, pfltOut: float.Δ } ],
  VarR4FromR8: [ long, { dblIn: DOUBLE, pfltOut: float.Δ } ],
  VarR4FromCy: [ long, { cyIn: CY, pfltOut: float.Δ } ],
  VarR4FromDate: [ long, { dateIn: DATE, pfltOut: float.Δ } ],
  VarR4FromStr: [ long, { strIn: LPCOLESTR, lcid: LCID, dwFlags: ULONG, pfltOut: float.Δ } ],
  VarR4FromDisp: [ long, { pdispIn: uint.Δ, lcid: LCID, pfltOut: float.Δ } ],
  VarR4FromBool: [ long, { boolIn: VARIANT_BOOL, pfltOut: float.Δ } ],
  VarR4FromI1: [ long, { cIn: CHAR, pfltOut: float.Δ } ],
  VarR4FromUI2: [ long, { uiIn: USHORT, pfltOut: float.Δ } ],
  VarR4FromUI4: [ long, { ulIn: ULONG, pfltOut: float.Δ } ],
  VarR4FromUI8: [ long, { ui64In: ULONG64, pfltOut: float.Δ } ],
  VarR4FromDec: [ long, { pdecIn: uint.Δ, pfltOut: float.Δ } ],
  VarR8FromUI1: [ long, { bIn: BYTE, pdblOut: double.Δ } ],
  VarR8FromI2: [ long, { sIn: SHORT, pdblOut: double.Δ } ],
  VarR8FromI4: [ long, { lIn: LONG, pdblOut: double.Δ } ],
  VarR8FromI8: [ long, { i64In: LONG64, pdblOut: double.Δ } ],
  VarR8FromR4: [ long, { fltIn: FLOAT, pdblOut: double.Δ } ],
  VarR8FromCy: [ long, { cyIn: CY, pdblOut: double.Δ } ],
  VarR8FromDate: [ long, { dateIn: DATE, pdblOut: double.Δ } ],
  VarR8FromStr: [ long, { strIn: LPCOLESTR, lcid: LCID, dwFlags: ULONG, pdblOut: double.Δ } ],
  VarR8FromDisp: [ long, { pdispIn: uint.Δ, lcid: LCID, pdblOut: double.Δ } ],
  VarR8FromBool: [ long, { boolIn: VARIANT_BOOL, pdblOut: double.Δ } ],
  VarR8FromI1: [ long, { cIn: CHAR, pdblOut: double.Δ } ],
  VarR8FromUI2: [ long, { uiIn: USHORT, pdblOut: double.Δ } ],
  VarR8FromUI4: [ long, { ulIn: ULONG, pdblOut: double.Δ } ],
  VarR8FromUI8: [ long, { ui64In: ULONG64, pdblOut: double.Δ } ],
  VarR8FromDec: [ long, { pdecIn: uint.Δ, pdblOut: double.Δ } ],
  VarDateFromUI1: [ long, { bIn: BYTE, pdateOut: double.Δ } ],
  VarDateFromI2: [ long, { sIn: SHORT, pdateOut: double.Δ } ],
  VarDateFromI4: [ long, { lIn: LONG, pdateOut: double.Δ } ],
  VarDateFromI8: [ long, { i64In: LONG64, pdateOut: double.Δ } ],
  VarDateFromR4: [ long, { fltIn: FLOAT, pdateOut: double.Δ } ],
  VarDateFromR8: [ long, { dblIn: DOUBLE, pdateOut: double.Δ } ],
  VarDateFromCy: [ long, { cyIn: CY, pdateOut: double.Δ } ],
  VarDateFromStr: [ long, { strIn: LPCOLESTR, lcid: LCID, dwFlags: ULONG, pdateOut: double.Δ } ],
  VarDateFromDisp: [ long, { pdispIn: uint.Δ, lcid: LCID, pdateOut: double.Δ } ],
  VarDateFromBool: [ long, { boolIn: VARIANT_BOOL, pdateOut: double.Δ } ],
  VarDateFromI1: [ long, { cIn: CHAR, pdateOut: double.Δ } ],
  VarDateFromUI2: [ long, { uiIn: USHORT, pdateOut: double.Δ } ],
  VarDateFromUI4: [ long, { ulIn: ULONG, pdateOut: double.Δ } ],
  VarDateFromUI8: [ long, { ui64In: ULONG64, pdateOut: double.Δ } ],
  VarDateFromDec: [ long, { pdecIn: uint.Δ, pdateOut: double.Δ } ],
  VarCyFromUI1: [ long, { bIn: BYTE, pcyOut: uint.Δ } ],
  VarCyFromI2: [ long, { sIn: SHORT, pcyOut: uint.Δ } ],
  VarCyFromI4: [ long, { lIn: LONG, pcyOut: uint.Δ } ],
  VarCyFromI8: [ long, { i64In: LONG64, pcyOut: uint.Δ } ],
  VarCyFromR4: [ long, { fltIn: FLOAT, pcyOut: uint.Δ } ],
  VarCyFromR8: [ long, { dblIn: DOUBLE, pcyOut: uint.Δ } ],
  VarCyFromDate: [ long, { dateIn: DATE, pcyOut: uint.Δ } ],
  VarCyFromStr: [ long, { strIn: LPCOLESTR, lcid: LCID, dwFlags: ULONG, pcyOut: uint.Δ } ],
  VarCyFromDisp: [ long, { pdispIn: uint.Δ, lcid: LCID, pcyOut: uint.Δ } ],
  VarCyFromBool: [ long, { boolIn: VARIANT_BOOL, pcyOut: uint.Δ } ],
  VarCyFromI1: [ long, { cIn: CHAR, pcyOut: uint.Δ } ],
  VarCyFromUI2: [ long, { uiIn: USHORT, pcyOut: uint.Δ } ],
  VarCyFromUI4: [ long, { ulIn: ULONG, pcyOut: uint.Δ } ],
  VarCyFromUI8: [ long, { ui64In: ULONG64, pcyOut: uint.Δ } ],
  VarCyFromDec: [ long, { pdecIn: uint.Δ, pcyOut: uint.Δ } ],
  VarBstrFromUI1: [ long, { bVal: BYTE, lcid: LCID, dwFlags: ULONG, pbstrOut: ushort.Δ.Δ } ],
  VarBstrFromI2: [ long, { iVal: SHORT, lcid: LCID, dwFlags: ULONG, pbstrOut: ushort.Δ.Δ } ],
  VarBstrFromI4: [ long, { lIn: LONG, lcid: LCID, dwFlags: ULONG, pbstrOut: ushort.Δ.Δ } ],
  VarBstrFromI8: [ long, { i64In: LONG64, lcid: LCID, dwFlags: ulong, pbstrOut: ushort.Δ.Δ } ],
  VarBstrFromR4: [ long, { fltIn: FLOAT, lcid: LCID, dwFlags: ULONG, pbstrOut: ushort.Δ.Δ } ],
  VarBstrFromR8: [ long, { dblIn: DOUBLE, lcid: LCID, dwFlags: ULONG, pbstrOut: ushort.Δ.Δ } ],
  VarBstrFromCy: [ long, { cyIn: CY, lcid: LCID, dwFlags: ULONG, pbstrOut: ushort.Δ.Δ } ],
  VarBstrFromDate: [ long, { dateIn: DATE, lcid: LCID, dwFlags: ULONG, pbstrOut: ushort.Δ.Δ } ],
  VarBstrFromDisp: [ long, { pdispIn: uint.Δ, lcid: LCID, dwFlags: ULONG, pbstrOut: ushort.Δ.Δ } ],
  VarBstrFromBool: [ long, { boolIn: VARIANT_BOOL, lcid: LCID, dwFlags: ULONG, pbstrOut: ushort.Δ.Δ } ],
  VarBstrFromI1: [ long, { cIn: CHAR, lcid: LCID, dwFlags: ULONG, pbstrOut: ushort.Δ.Δ } ],
  VarBstrFromUI2: [ long, { uiIn: USHORT, lcid: LCID, dwFlags: ULONG, pbstrOut: ushort.Δ.Δ } ],
  VarBstrFromUI4: [ long, { ulIn: ULONG, lcid: LCID, dwFlags: ULONG, pbstrOut: ushort.Δ.Δ } ],
  VarBstrFromUI8: [ long, { ui64In: ULONG64, lcid: LCID, dwFlags: ulong, pbstrOut: ushort.Δ.Δ } ],
  VarBstrFromDec: [ long, { pdecIn: uint.Δ, lcid: LCID, dwFlags: ULONG, pbstrOut: ushort.Δ.Δ } ],
  VarBoolFromUI1: [ long, { bIn: BYTE, pboolOut: short.Δ } ],
  VarBoolFromI2: [ long, { sIn: SHORT, pboolOut: short.Δ } ],
  VarBoolFromI4: [ long, { lIn: LONG, pboolOut: short.Δ } ],
  VarBoolFromI8: [ long, { i64In: LONG64, pboolOut: short.Δ } ],
  VarBoolFromR4: [ long, { fltIn: FLOAT, pboolOut: short.Δ } ],
  VarBoolFromR8: [ long, { dblIn: DOUBLE, pboolOut: short.Δ } ],
  VarBoolFromDate: [ long, { dateIn: DATE, pboolOut: short.Δ } ],
  VarBoolFromCy: [ long, { cyIn: CY, pboolOut: short.Δ } ],
  VarBoolFromStr: [ long, { strIn: LPCOLESTR, lcid: LCID, dwFlags: ULONG, pboolOut: short.Δ } ],
  VarBoolFromDisp: [ long, { pdispIn: uint.Δ, lcid: LCID, pboolOut: short.Δ } ],
  VarBoolFromI1: [ long, { cIn: CHAR, pboolOut: short.Δ } ],
  VarBoolFromUI2: [ long, { uiIn: USHORT, pboolOut: short.Δ } ],
  VarBoolFromUI4: [ long, { ulIn: ULONG, pboolOut: short.Δ } ],
  VarBoolFromUI8: [ long, { i64In: ULONG64, pboolOut: short.Δ } ],
  VarBoolFromDec: [ long, { pdecIn: uint.Δ, pboolOut: short.Δ } ],
  VarI1FromUI1: [ long, { bIn: BYTE, pcOut: int8.Δ } ],
  VarI1FromI2: [ long, { uiIn: SHORT, pcOut: int8.Δ } ],
  VarI1FromI4: [ long, { lIn: LONG, pcOut: int8.Δ } ],
  VarI1FromI8: [ long, { i64In: LONG64, pcOut: int8.Δ } ],
  VarI1FromR4: [ long, { fltIn: FLOAT, pcOut: int8.Δ } ],
  VarI1FromR8: [ long, { dblIn: DOUBLE, pcOut: int8.Δ } ],
  VarI1FromDate: [ long, { dateIn: DATE, pcOut: int8.Δ } ],
  VarI1FromCy: [ long, { cyIn: CY, pcOut: int8.Δ } ],
  VarI1FromStr: [ long, { strIn: LPCOLESTR, lcid: LCID, dwFlags: ULONG, pcOut: int8.Δ } ],
  VarI1FromDisp: [ long, { pdispIn: uint.Δ, lcid: LCID, pcOut: int8.Δ } ],
  VarI1FromBool: [ long, { boolIn: VARIANT_BOOL, pcOut: int8.Δ } ],
  VarI1FromUI2: [ long, { uiIn: USHORT, pcOut: int8.Δ } ],
  VarI1FromUI4: [ long, { ulIn: ULONG, pcOut: int8.Δ } ],
  VarI1FromUI8: [ long, { i64In: ULONG64, pcOut: int8.Δ } ],
  VarI1FromDec: [ long, { pdecIn: uint.Δ, pcOut: int8.Δ } ],
  VarUI2FromUI1: [ long, { bIn: BYTE, puiOut: ushort.Δ } ],
  VarUI2FromI2: [ long, { uiIn: SHORT, puiOut: ushort.Δ } ],
  VarUI2FromI4: [ long, { lIn: LONG, puiOut: ushort.Δ } ],
  VarUI2FromI8: [ long, { i64In: LONG64, puiOut: ushort.Δ } ],
  VarUI2FromR4: [ long, { fltIn: FLOAT, puiOut: ushort.Δ } ],
  VarUI2FromR8: [ long, { dblIn: DOUBLE, puiOut: ushort.Δ } ],
  VarUI2FromDate: [ long, { dateIn: DATE, puiOut: ushort.Δ } ],
  VarUI2FromCy: [ long, { cyIn: CY, puiOut: ushort.Δ } ],
  VarUI2FromStr: [ long, { strIn: LPCOLESTR, lcid: LCID, dwFlags: ULONG, puiOut: ushort.Δ } ],
  VarUI2FromDisp: [ long, { pdispIn: uint.Δ, lcid: LCID, puiOut: ushort.Δ } ],
  VarUI2FromBool: [ long, { boolIn: VARIANT_BOOL, puiOut: ushort.Δ } ],
  VarUI2FromI1: [ long, { cIn: CHAR, puiOut: ushort.Δ } ],
  VarUI2FromUI4: [ long, { ulIn: ULONG, puiOut: ushort.Δ } ],
  VarUI2FromUI8: [ long, { i64In: ULONG64, puiOut: ushort.Δ } ],
  VarUI2FromDec: [ long, { pdecIn: uint.Δ, puiOut: ushort.Δ } ],
  VarUI4FromUI1: [ long, { bIn: BYTE, pulOut: ulong.Δ } ],
  VarUI4FromI2: [ long, { uiIn: SHORT, pulOut: ulong.Δ } ],
  VarUI4FromI4: [ long, { lIn: LONG, pulOut: ulong.Δ } ],
  VarUI4FromI8: [ long, { i64In: LONG64, plOut: ulong.Δ } ],
  VarUI4FromR4: [ long, { fltIn: FLOAT, pulOut: ulong.Δ } ],
  VarUI4FromR8: [ long, { dblIn: DOUBLE, pulOut: ulong.Δ } ],
  VarUI4FromDate: [ long, { dateIn: DATE, pulOut: ulong.Δ } ],
  VarUI4FromCy: [ long, { cyIn: CY, pulOut: ulong.Δ } ],
  VarUI4FromStr: [ long, { strIn: LPCOLESTR, lcid: LCID, dwFlags: ULONG, pulOut: ulong.Δ } ],
  VarUI4FromDisp: [ long, { pdispIn: uint.Δ, lcid: LCID, pulOut: ulong.Δ } ],
  VarUI4FromBool: [ long, { boolIn: VARIANT_BOOL, pulOut: ulong.Δ } ],
  VarUI4FromI1: [ long, { cIn: CHAR, pulOut: ulong.Δ } ],
  VarUI4FromUI2: [ long, { uiIn: USHORT, pulOut: ulong.Δ } ],
  VarUI4FromUI8: [ long, { ui64In: ULONG64, plOut: ulong.Δ } ],
  VarUI4FromDec: [ long, { pdecIn: uint.Δ, pulOut: ulong.Δ } ],
  VarUI8FromUI1: [ long, { bIn: BYTE, pi64Out: ulonglong.Δ } ],
  VarUI8FromI2: [ long, { sIn: SHORT, pi64Out: ulonglong.Δ } ],
  VarUI8FromI4: [ long, { lIn: LONG, pi64Out: ulonglong.Δ } ],
  VarUI8FromI8: [ long, { ui64In: LONG64, pi64Out: ulonglong.Δ } ],
  VarUI8FromR4: [ long, { fltIn: FLOAT, pi64Out: ulonglong.Δ } ],
  VarUI8FromR8: [ long, { dblIn: DOUBLE, pi64Out: ulonglong.Δ } ],
  VarUI8FromCy: [ long, { cyIn: CY, pi64Out: ulonglong.Δ } ],
  VarUI8FromDate: [ long, { dateIn: DATE, pi64Out: ulonglong.Δ } ],
  VarUI8FromStr: [ long, { strIn: LPCOLESTR, lcid: LCID, dwFlags: ulong, pi64Out: ulonglong.Δ } ],
  VarUI8FromDisp: [ long, { pdispIn: uint.Δ, lcid: LCID, pi64Out: ulonglong.Δ } ],
  VarUI8FromBool: [ long, { boolIn: VARIANT_BOOL, pi64Out: ulonglong.Δ } ],
  VarUI8FromI1: [ long, { cIn: CHAR, pi64Out: ulonglong.Δ } ],
  VarUI8FromUI2: [ long, { uiIn: USHORT, pi64Out: ulonglong.Δ } ],
  VarUI8FromUI4: [ long, { ulIn: ULONG, pi64Out: ulonglong.Δ } ],
  VarUI8FromDec: [ long, { pdecIn: uint.Δ, pi64Out: ulonglong.Δ } ],
  VarUI8FromInt: [ long, { intIn: INT, pi64Out: ulonglong.Δ } ],
  VarDecFromUI1: [ long, { bIn: BYTE, pdecOut: uint.Δ } ],
  VarDecFromI2: [ long, { uiIn: SHORT, pdecOut: uint.Δ } ],
  VarDecFromI4: [ long, { lIn: LONG, pdecOut: uint.Δ } ],
  VarDecFromI8: [ long, { i64In: LONG64, pdecOut: uint.Δ } ],
  VarDecFromR4: [ long, { fltIn: FLOAT, pdecOut: uint.Δ } ],
  VarDecFromR8: [ long, { dblIn: DOUBLE, pdecOut: uint.Δ } ],
  VarDecFromDate: [ long, { dateIn: DATE, pdecOut: uint.Δ } ],
  VarDecFromCy: [ long, { cyIn: CY, pdecOut: uint.Δ } ],
  VarDecFromStr: [ long, { strIn: LPCOLESTR, lcid: LCID, dwFlags: ULONG, pdecOut: uint.Δ } ],
  VarDecFromDisp: [ long, { pdispIn: uint.Δ, lcid: LCID, pdecOut: uint.Δ } ],
  VarDecFromBool: [ long, { boolIn: VARIANT_BOOL, pdecOut: uint.Δ } ],
  VarDecFromI1: [ long, { cIn: CHAR, pdecOut: uint.Δ } ],
  VarDecFromUI2: [ long, { uiIn: USHORT, pdecOut: uint.Δ } ],
  VarDecFromUI4: [ long, { ulIn: ULONG, pdecOut: uint.Δ } ],
  VarDecFromUI8: [ long, { ui64In: ULONG64, pdecOut: uint.Δ } ],
  VarParseNumFromStr: [ long, { strIn: LPCOLESTR, lcid: LCID, dwFlags: ULONG, pnumprs: uint.Δ, rgbDig: uchar.Δ } ],
  VarNumFromParseNum: [ long, { pnumprs: uint.Δ, rgbDig: uchar.Δ, dwVtBits: ULONG, pvar: uint.Δ } ],
  VarAdd: [ long, { pvarLeft: LPVARIANT, pvarRight: LPVARIANT, pvarResult: LPVARIANT } ],
  VarAnd: [ long, { pvarLeft: LPVARIANT, pvarRight: LPVARIANT, pvarResult: LPVARIANT } ],
  VarCat: [ long, { pvarLeft: LPVARIANT, pvarRight: LPVARIANT, pvarResult: LPVARIANT } ],
  VarDiv: [ long, { pvarLeft: LPVARIANT, pvarRight: LPVARIANT, pvarResult: LPVARIANT } ],
  VarEqv: [ long, { pvarLeft: LPVARIANT, pvarRight: LPVARIANT, pvarResult: LPVARIANT } ],
  VarIdiv: [ long, { pvarLeft: LPVARIANT, pvarRight: LPVARIANT, pvarResult: LPVARIANT } ],
  VarImp: [ long, { pvarLeft: LPVARIANT, pvarRight: LPVARIANT, pvarResult: LPVARIANT } ],
  VarMod: [ long, { pvarLeft: LPVARIANT, pvarRight: LPVARIANT, pvarResult: LPVARIANT } ],
  VarMul: [ long, { pvarLeft: LPVARIANT, pvarRight: LPVARIANT, pvarResult: LPVARIANT } ],
  VarOr: [ long, { pvarLeft: LPVARIANT, pvarRight: LPVARIANT, pvarResult: LPVARIANT } ],
  VarPow: [ long, { pvarLeft: LPVARIANT, pvarRight: LPVARIANT, pvarResult: LPVARIANT } ],
  VarSub: [ long, { pvarLeft: LPVARIANT, pvarRight: LPVARIANT, pvarResult: LPVARIANT } ],
  VarXor: [ long, { pvarLeft: LPVARIANT, pvarRight: LPVARIANT, pvarResult: LPVARIANT } ],
  VarAbs: [ long, { pvarIn: LPVARIANT, pvarResult: LPVARIANT } ],
  VarFix: [ long, { pvarIn: LPVARIANT, pvarResult: LPVARIANT } ],
  VarInt: [ long, { pvarIn: LPVARIANT, pvarResult: LPVARIANT } ],
  VarNeg: [ long, { pvarIn: LPVARIANT, pvarResult: LPVARIANT } ],
  VarNot: [ long, { pvarIn: LPVARIANT, pvarResult: LPVARIANT } ],
  VarRound: [ long, { pvarIn: LPVARIANT, cDecimals: int, pvarResult: LPVARIANT } ],
  VarCmp: [ long, { pvarLeft: LPVARIANT, pvarRight: LPVARIANT, lcid: LCID, dwFlags: ULONG } ],
  VarDecAdd: [ long, { pdecLeft: LPDECIMAL, pdecRight: LPDECIMAL, pdecResult: LPDECIMAL } ],
  VarDecDiv: [ long, { pdecLeft: LPDECIMAL, pdecRight: LPDECIMAL, pdecResult: LPDECIMAL } ],
  VarDecMul: [ long, { pdecLeft: LPDECIMAL, pdecRight: LPDECIMAL, pdecResult: LPDECIMAL } ],
  VarDecSub: [ long, { pdecLeft: LPDECIMAL, pdecRight: LPDECIMAL, pdecResult: LPDECIMAL } ],
  VarDecAbs: [ long, { pdecIn: LPDECIMAL, pdecResult: LPDECIMAL } ],
  VarDecFix: [ long, { pdecIn: LPDECIMAL, pdecResult: LPDECIMAL } ],
  VarDecInt: [ long, { pdecIn: LPDECIMAL, pdecResult: LPDECIMAL } ],
  VarDecNeg: [ long, { pdecIn: LPDECIMAL, pdecResult: LPDECIMAL } ],
  VarDecRound: [ long, { pdecIn: LPDECIMAL, cDecimals: int, pdecResult: LPDECIMAL } ],
  VarDecCmp: [ long, { pdecLeft: LPDECIMAL, pdecRight: LPDECIMAL } ],
  VarDecCmpR8: [ long, { pdecLeft: LPDECIMAL, dblRight: double } ],
  VarCyAdd: [ long, { cyLeft: CY, cyRight: CY, pcyResult: LPCY } ],
  VarCyMul: [ long, { cyLeft: CY, cyRight: CY, pcyResult: LPCY } ],
  VarCyMulI4: [ long, { cyLeft: CY, lRight: long, pcyResult: LPCY } ],
  VarCyMulI8: [ long, { cyLeft: CY, lRight: LONG64, pcyResult: LPCY } ],
  VarCySub: [ long, { cyLeft: CY, cyRight: CY, pcyResult: LPCY } ],
  VarCyAbs: [ long, { cyIn: CY, pcyResult: LPCY } ],
  VarCyFix: [ long, { cyIn: CY, pcyResult: LPCY } ],
  VarCyInt: [ long, { cyIn: CY, pcyResult: LPCY } ],
  VarCyNeg: [ long, { cyIn: CY, pcyResult: LPCY } ],
  VarCyRound: [ long, { cyIn: CY, cDecimals: int, pcyResult: LPCY } ],
  VarCyCmp: [ long, { cyLeft: CY, cyRight: CY } ],
  VarCyCmpR8: [ long, { cyLeft: CY, dblRight: double } ],
  VarBstrCat: [ long, { bstrLeft: BSTR, bstrRight: BSTR, pbstrResult: LPBSTR } ],
  VarBstrCmp: [ long, { bstrLeft: BSTR, bstrRight: BSTR, lcid: LCID, dwFlags: ULONG } ],
  VarR8Pow: [ long, { dblLeft: double, dblRight: double, pdblResult: double.Δ } ],
  VarR4CmpR8: [ long, { fltLeft: float, dblRight: double } ],
  VarR8Round: [ long, { dblIn: double, cDecimals: int, pdblResult: double.Δ } ],
  VarDateFromUdate: [ long, { pudateIn: uint.Δ, dwFlags: ULONG, pdateOut: double.Δ } ],
  VarDateFromUdateEx: [ long, { pudateIn: uint.Δ, lcid: LCID, dwFlags: ULONG, pdateOut: double.Δ } ],
  VarUdateFromDate: [ long, { dateIn: DATE, dwFlags: ULONG, pudateOut: uint.Δ } ],
  GetAltMonthNames: [ long, { lcid: LCID, prgp: ushort.Δ.Δ.Δ } ],
  VarFormat: [ long, { pvarIn: LPVARIANT, pstrFormat: LPOLESTR, iFirstDay: int, iFirstWeek: int, dwFlags: ULONG, pbstrOut: ushort.Δ.Δ } ],
  VarFormatDateTime: [ long, { pvarIn: LPVARIANT, iNamedFormat: int, dwFlags: ULONG, pbstrOut: ushort.Δ.Δ } ],
  VarFormatNumber: [ long, { pvarIn: LPVARIANT, iNumDig: int, iIncLead: int, iUseParens: int, iGroup: int, dwFlags: ULONG, pbstrOut: ushort.Δ.Δ } ],
  VarFormatPercent: [ long, { pvarIn: LPVARIANT, iNumDig: int, iIncLead: int, iUseParens: int, iGroup: int, dwFlags: ULONG, pbstrOut: ushort.Δ.Δ } ],
  VarFormatCurrency: [ long, { pvarIn: LPVARIANT, iNumDig: int, iIncLead: int, iUseParens: int, iGroup: int, dwFlags: ULONG, pbstrOut: ushort.Δ.Δ } ],
  VarWeekdayName: [ long, { iWeekday: int, fAbbrev: int, iFirstDay: int, dwFlags: ULONG, pbstrOut: ushort.Δ.Δ } ],
  VarMonthName: [ long, { iMonth: int, fAbbrev: int, dwFlags: ULONG, pbstrOut: ushort.Δ.Δ } ],
  VarFormatFromTokens: [ long, { pvarIn: LPVARIANT, pstrFormat: LPOLESTR, pbTokCur: LPBYTE, dwFlags: ULONG, pbstrOut: ushort.Δ.Δ, lcid: LCID } ],
  VarTokenizeFormatString: [ long, { pstrFormat: LPOLESTR, rgbTok: LPBYTE, cbTok: int, iFirstDay: int, iFirstWeek: int, lcid: LCID, pcbActual: int.Δ } ],
  LHashValOfNameSysA: [ ulong, { syskind: SYSKIND, lcid: LCID, szName: LPCSTR } ],
  LHashValOfNameSys: [ ulong, { syskind: SYSKIND, lcid: LCID, szName: ushort.Δ } ],
  LoadTypeLib: [ long, { szFile: LPCOLESTR, pptlib: uint.Δ.Δ } ],
  LoadTypeLibEx: [ long, { szFile: LPCOLESTR, regkind: REGKIND, pptlib: uint.Δ.Δ } ],
  LoadRegTypeLib: [ long, { rguid: uint.Δ, wVerMajor: WORD, wVerMinor: WORD, lcid: LCID, pptlib: uint.Δ.Δ } ],
  QueryPathOfRegTypeLib: [ long, { guid: uint.Δ, wMaj: USHORT, wMin: USHORT, lcid: LCID, lpbstrPathName: LPBSTR } ],
  RegisterTypeLib: [ long, { ptlib: uint.Δ, szFullPath: LPCOLESTR, szHelpDir: LPCOLESTR } ],
  UnRegisterTypeLib: [ long, { libID: uint.Δ, wVerMajor: WORD, wVerMinor: WORD, lcid: LCID, syskind: SYSKIND } ],
  RegisterTypeLibForUser: [ long, { ptlib: uint.Δ, szFullPath: ushort.Δ, szHelpDir: ushort.Δ } ],
  UnRegisterTypeLibForUser: [ long, { libID: uint.Δ, wMajorVerNum: WORD, wMinorVerNum: WORD, lcid: LCID, syskind: SYSKIND } ],
  CreateTypeLib: [ long, { syskind: SYSKIND, szFile: LPCOLESTR, ppctlib: uint.Δ.Δ } ],
  CreateTypeLib2: [ long, { syskind: SYSKIND, szFile: LPCOLESTR, ppctlib: uint.Δ.Δ } ],
  DispGetParam: [ long, { pdispparams: uint.Δ, position: UINT, vtTarg: VARTYPE, pvarResult: uint.Δ, puArgErr: uint.Δ } ],
  DispGetIDsOfNames: [ long, { ptinfo: uint.Δ, rgszNames: ushort.Δ.Δ, cNames: UINT, rgdispid: long.Δ } ],
  DispInvoke: [ long, { _this: VoidT.Δ, ptinfo: uint.Δ, dispidMember: DISPID, wFlags: WORD, pparams: uint.Δ, pvarResult: uint.Δ, pexcepinfo: uint.Δ, puArgErr: uint.Δ } ],
  CreateDispTypeInfo: [ long, { pidata: uint.Δ, lcid: LCID, pptinfo: uint.Δ.Δ } ],
  CreateStdDispatch: [ long, { punkOuter: uint.Δ, pvThis: VoidT.Δ, ptinfo: uint.Δ, ppunkStdDisp: uint.Δ.Δ } ],
  DispCallFunc: [ long, { pvInstance: VoidT.Δ, oVft: ULONG_PTR, cc: CALLCONV, vtReturn: VARTYPE, cActuals: UINT, prgvt: ushort.Δ, prgpvarg: uint.Δ.Δ, pvargResult: uint.Δ } ],
  RegisterActiveObject: [ long, { punk: uint.Δ, rclsid: uint.Δ, dwFlags: DWORD, pdwRegister: ulong.Δ } ],
  RevokeActiveObject: [ long, { dwRegister: DWORD, pvReserved: VoidT.Δ } ],
  GetActiveObject: [ long, { rclsid: uint.Δ, pvReserved: VoidT.Δ, ppunk: uint.Δ.Δ } ],
  SetErrorInfo: [ long, { dwReserved: ULONG, perrinfo: uint.Δ } ],
  GetErrorInfo: [ long, { dwReserved: ULONG, pperrinfo: uint.Δ.Δ } ],
  CreateErrorInfo: [ long, { pperrinfo: uint.Δ.Δ } ],
  GetRecordInfoFromTypeInfo: [ long, { pTypeInfo: uint.Δ, ppRecInfo: uint.Δ.Δ } ],
  GetRecordInfoFromGuids: [ long, { rGuidTypeLib: uint.Δ, uVerMajor: ULONG, uVerMinor: ULONG, lcid: LCID, rGuidTypeInfo: uint.Δ, ppRecInfo: uint.Δ.Δ } ],
  OaBuildVersion: [ ulong, {  } ],
  ClearCustData: [ VoidT, { pCustData: LPCUSTDATA } ],
  OaEnablePerUserTLibRegistration: [ VoidT, {  } ],
  OleBuildVersion: [ ulong, {  } ],
  ReadClassStg: [ long, { pStg: LPSTORAGE, pclsid: uint.Δ } ],
  WriteClassStg: [ long, { pStg: LPSTORAGE, rclsid: uint.Δ } ],
  ReadClassStm: [ long, { pStm: LPSTREAM, pclsid: uint.Δ } ],
  WriteClassStm: [ long, { pStm: LPSTREAM, rclsid: uint.Δ } ],
  WriteFmtUserTypeStg: [ long, { pstg: LPSTORAGE, cf: CLIPFORMAT, lpszUserType: LPOLESTR } ],
  ReadFmtUserTypeStg: [ long, { pstg: LPSTORAGE, pcf: ushort.Δ, lplpszUserType: ushort.Δ.Δ } ],
  OleInitialize: [ long, { pvReserved: LPVOID } ],
  OleUninitialize: [ VoidT, {  } ],
  OleQueryLinkFromData: [ long, { pSrcDataObject: LPDATAOBJECT } ],
  OleQueryCreateFromData: [ long, { pSrcDataObject: LPDATAOBJECT } ],
  OleCreate: [ long, { rclsid: uint.Δ, riid: uint.Δ, renderopt: DWORD, pFormatEtc: LPFORMATETC, pClientSite: LPOLECLIENTSITE, pStg: LPSTORAGE, ppvObj: VoidT.Δ.Δ } ],
  OleCreateEx: [ long, { rclsid: uint.Δ, riid: uint.Δ, dwFlags: DWORD, renderopt: DWORD, cFormats: ULONG, rgAdvf: ulong.Δ, rgFormatEtc: LPFORMATETC, lpAdviseSink: uint.Δ, rgdwConnection: ulong.Δ, pClientSite: LPOLECLIENTSITE, pStg: LPSTORAGE, ppvObj: VoidT.Δ.Δ } ],
  OleCreateFromData: [ long, { pSrcDataObj: LPDATAOBJECT, riid: uint.Δ, renderopt: DWORD, pFormatEtc: LPFORMATETC, pClientSite: LPOLECLIENTSITE, pStg: LPSTORAGE, ppvObj: VoidT.Δ.Δ } ],
  OleCreateFromDataEx: [ long, { pSrcDataObj: LPDATAOBJECT, riid: uint.Δ, dwFlags: DWORD, renderopt: DWORD, cFormats: ULONG, rgAdvf: ulong.Δ, rgFormatEtc: LPFORMATETC, lpAdviseSink: uint.Δ, rgdwConnection: ulong.Δ, pClientSite: LPOLECLIENTSITE, pStg: LPSTORAGE, ppvObj: VoidT.Δ.Δ } ],
  OleCreateLinkFromData: [ long, { pSrcDataObj: LPDATAOBJECT, riid: uint.Δ, renderopt: DWORD, pFormatEtc: LPFORMATETC, pClientSite: LPOLECLIENTSITE, pStg: LPSTORAGE, ppvObj: VoidT.Δ.Δ } ],
  OleCreateLinkFromDataEx: [ long, { pSrcDataObj: LPDATAOBJECT, riid: uint.Δ, dwFlags: DWORD, renderopt: DWORD, cFormats: ULONG, rgAdvf: ulong.Δ, rgFormatEtc: LPFORMATETC, lpAdviseSink: uint.Δ, rgdwConnection: ulong.Δ, pClientSite: LPOLECLIENTSITE, pStg: LPSTORAGE, ppvObj: VoidT.Δ.Δ } ],
  OleCreateStaticFromData: [ long, { pSrcDataObj: LPDATAOBJECT, iid: uint.Δ, renderopt: DWORD, pFormatEtc: LPFORMATETC, pClientSite: LPOLECLIENTSITE, pStg: LPSTORAGE, ppvObj: VoidT.Δ.Δ } ],
  OleCreateLink: [ long, { pmkLinkSrc: LPMONIKER, riid: uint.Δ, renderopt: DWORD, lpFormatEtc: LPFORMATETC, pClientSite: LPOLECLIENTSITE, pStg: LPSTORAGE, ppvObj: VoidT.Δ.Δ } ],
  OleCreateLinkEx: [ long, { pmkLinkSrc: LPMONIKER, riid: uint.Δ, dwFlags: DWORD, renderopt: DWORD, cFormats: ULONG, rgAdvf: ulong.Δ, rgFormatEtc: LPFORMATETC, lpAdviseSink: uint.Δ, rgdwConnection: ulong.Δ, pClientSite: LPOLECLIENTSITE, pStg: LPSTORAGE, ppvObj: VoidT.Δ.Δ } ],
  OleCreateLinkToFile: [ long, { lpszFileName: LPCOLESTR, riid: uint.Δ, renderopt: DWORD, lpFormatEtc: LPFORMATETC, pClientSite: LPOLECLIENTSITE, pStg: LPSTORAGE, ppvObj: VoidT.Δ.Δ } ],
  OleCreateLinkToFileEx: [ long, { lpszFileName: LPCOLESTR, riid: uint.Δ, dwFlags: DWORD, renderopt: DWORD, cFormats: ULONG, rgAdvf: ulong.Δ, rgFormatEtc: LPFORMATETC, lpAdviseSink: uint.Δ, rgdwConnection: ulong.Δ, pClientSite: LPOLECLIENTSITE, pStg: LPSTORAGE, ppvObj: VoidT.Δ.Δ } ],
  OleCreateFromFile: [ long, { rclsid: uint.Δ, lpszFileName: LPCOLESTR, riid: uint.Δ, renderopt: DWORD, lpFormatEtc: LPFORMATETC, pClientSite: LPOLECLIENTSITE, pStg: LPSTORAGE, ppvObj: VoidT.Δ.Δ } ],
  OleCreateFromFileEx: [ long, { rclsid: uint.Δ, lpszFileName: LPCOLESTR, riid: uint.Δ, dwFlags: DWORD, renderopt: DWORD, cFormats: ULONG, rgAdvf: ulong.Δ, rgFormatEtc: LPFORMATETC, lpAdviseSink: uint.Δ, rgdwConnection: ulong.Δ, pClientSite: LPOLECLIENTSITE, pStg: LPSTORAGE, ppvObj: VoidT.Δ.Δ } ],
  OleLoad: [ long, { pStg: LPSTORAGE, riid: uint.Δ, pClientSite: LPOLECLIENTSITE, ppvObj: VoidT.Δ.Δ } ],
  OleSave: [ long, { pPS: LPPERSISTSTORAGE, pStg: LPSTORAGE, fSameAsLoad: BOOL } ],
  OleLoadFromStream: [ long, { pStm: LPSTREAM, iidInterface: uint.Δ, ppvObj: VoidT.Δ.Δ } ],
  OleSaveToStream: [ long, { pPStm: LPPERSISTSTREAM, pStm: LPSTREAM } ],
  OleSetContainedObject: [ long, { pUnknown: LPUNKNOWN, fContained: BOOL } ],
  OleNoteObjectVisible: [ long, { pUnknown: LPUNKNOWN, fVisible: BOOL } ],
  RegisterDragDrop: [ long, { hwnd: HWND, pDropTarget: LPDROPTARGET } ],
  RevokeDragDrop: [ long, { hwnd: HWND } ],
  DoDragDrop: [ long, { pDataObj: LPDATAOBJECT, pDropSource: LPDROPSOURCE, dwOKEffects: DWORD, pdwEffect: LPDWORD } ],
  OleSetClipboard: [ long, { pDataObj: LPDATAOBJECT } ],
  OleGetClipboard: [ long, { ppDataObj: VOIDPTR.Δ } ],
  OleFlushClipboard: [ long, {  } ],
  OleIsCurrentClipboard: [ long, { pDataObj: LPDATAOBJECT } ],
  OleCreateMenuDescriptor: [ VoidT.Δ, { hmenuCombined: HMENU, lpMenuWidths: LPOLEMENUGROUPWIDTHS } ],
  OleSetMenuDescriptor: [ long, { holemenu: HOLEMENU, hwndFrame: HWND, hwndActiveObject: HWND, lpFrame: LPOLEINPLACEFRAME, lpActiveObj: LPOLEINPLACEACTIVEOBJECT } ],
  OleDestroyMenuDescriptor: [ long, { holemenu: HOLEMENU } ],
  OleTranslateAccelerator: [ long, { lpFrame: LPOLEINPLACEFRAME, lpFrameInfo: LPOLEINPLACEFRAMEINFO, lpmsg: LPMSG } ],
  OleDuplicateData: [ VoidT.Δ, { hSrc: HANDLE, cfFormat: CLIPFORMAT, uiFlags: UINT } ],
  OleDraw: [ long, { pUnknown: LPUNKNOWN, dwAspect: DWORD, hdcDraw: HDC, lprcBounds: LPCRECT } ],
  OleRun: [ long, { pUnknown: LPUNKNOWN } ],
  OleIsRunning: [ int, { pObject: LPOLEOBJECT } ],
  OleLockRunning: [ long, { pUnknown: LPUNKNOWN, fLock: BOOL, fLastUnlockCloses: BOOL } ],
  ReleaseStgMedium: [ VoidT, { LPSTGMEDIUM: LPSTGMEDIUM } ],
  CreateOleAdviseHolder: [ long, { ppOAHolder: VOIDPTR.Δ } ],
  OleCreateDefaultHandler: [ long, { clsid: uint.Δ, pUnkOuter: LPUNKNOWN, riid: uint.Δ, lplpObj: VoidT.Δ.Δ } ],
  OleCreateEmbeddingHelper: [ long, { clsid: uint.Δ, pUnkOuter: LPUNKNOWN, flags: DWORD, pCF: LPCLASSFACTORY, riid: uint.Δ, lplpObj: VoidT.Δ.Δ } ],
  IsAccelerator: [ int, { hAccel: HACCEL, cAccelEntries: int, lpMsg: LPMSG, lpwCmd: ushort.Δ } ],
  OleGetIconOfFile: [ VoidT.Δ, { lpszPath: LPOLESTR, fUseFileAsLabel: BOOL } ],
  OleGetIconOfClass: [ VoidT.Δ, { rclsid: uint.Δ, lpszLabel: LPOLESTR, fUseTypeAsLabel: BOOL } ],
  OleMetafilePictFromIconAndLabel: [ VoidT.Δ, { hIcon: HICON, lpszLabel: LPOLESTR, lpszSourceFile: LPOLESTR, iIconIndex: UINT } ],
  OleRegGetUserType: [ long, { clsid: uint.Δ, dwFormOfType: DWORD, pszUserType: ushort.Δ.Δ } ],
  OleRegGetMiscStatus: [ long, { clsid: uint.Δ, dwAspect: DWORD, pdwStatus: ulong.Δ } ],
  OleRegEnumFormatEtc: [ long, { clsid: uint.Δ, dwDirection: DWORD, ppenum: VOIDPTR.Δ } ],
  OleRegEnumVerbs: [ long, { clsid: uint.Δ, ppenum: VOIDPTR.Δ } ],
  OleConvertOLESTREAMToIStorage: [ long, { lpolestream: LPOLESTREAM, pstg: LPSTORAGE, ptd: uint.Δ } ],
  OleConvertIStorageToOLESTREAM: [ long, { pstg: LPSTORAGE, lpolestream: LPOLESTREAM } ],
  GetHGlobalFromILockBytes: [ long, { plkbyt: LPLOCKBYTES, phglobal: VoidT.Δ.Δ } ],
  CreateILockBytesOnHGlobal: [ long, { hGlobal: HGLOBAL, fDeleteOnRelease: BOOL, pplkbyt: VOIDPTR.Δ } ],
  GetHGlobalFromStream: [ long, { pstm: LPSTREAM, phglobal: VoidT.Δ.Δ } ],
  CreateStreamOnHGlobal: [ long, { hGlobal: HGLOBAL, fDeleteOnRelease: BOOL, ppstm: VOIDPTR.Δ } ],
  OleDoAutoConvert: [ long, { pStg: LPSTORAGE, pClsidNew: LPCLSID } ],
  OleGetAutoConvert: [ long, { clsidOld: uint.Δ, pClsidNew: LPCLSID } ],
  OleSetAutoConvert: [ long, { clsidOld: uint.Δ, clsidNew: uint.Δ } ],
  GetConvertStg: [ long, { pStg: LPSTORAGE } ],
  SetConvertStg: [ long, { pStg: LPSTORAGE, fConvert: BOOL } ],
  OleConvertIStorageToOLESTREAMEx: [ long, { pstg: LPSTORAGE, cfFormat: CLIPFORMAT, lWidth: LONG, lHeight: LONG, dwSize: DWORD, pmedium: LPSTGMEDIUM, polestm: LPOLESTREAM } ],
  OleConvertOLESTREAMToIStorageEx: [ long, { polestm: LPOLESTREAM, pstg: LPSTORAGE, pcfFormat: ushort.Δ, plwWidth: long.Δ, plHeight: long.Δ, pdwSize: ulong.Δ, pmedium: LPSTGMEDIUM } ],
  GetOpenFileNameA: [ int, { LPOPENFILENAMEA: LPOPENFILENAMEA } ],
  GetOpenFileNameW: [ int, { LPOPENFILENAMEW: LPOPENFILENAMEW } ],
  GetSaveFileNameA: [ int, { LPOPENFILENAMEA: LPOPENFILENAMEA } ],
  GetSaveFileNameW: [ int, { LPOPENFILENAMEW: LPOPENFILENAMEW } ],
  GetFileTitleA: [ VoidT, { LPCSTR: LPCSTR, Buf: LPSTR, cchSize: WORD } ],
  GetFileTitleW: [ VoidT, { LPCWSTR: LPCWSTR, Buf: LPWSTR, cchSize: WORD } ],
  ChooseColorA: [ int, { LPCHOOSECOLORA: LPCHOOSECOLORA } ],
  ChooseColorW: [ int, { LPCHOOSECOLORW: LPCHOOSECOLORW } ],
  FindTextA: [ VOIDPTR, { LPFINDREPLACEA: LPFINDREPLACEA } ],
  FindTextW: [ VOIDPTR, { LPFINDREPLACEW: LPFINDREPLACEW } ],
  ReplaceTextA: [ VOIDPTR, { LPFINDREPLACEA: LPFINDREPLACEA } ],
  ReplaceTextW: [ VOIDPTR, { LPFINDREPLACEW: LPFINDREPLACEW } ],
  ChooseFontA: [ int, { LPCHOOSEFONTA: LPCHOOSEFONTA } ],
  ChooseFontW: [ int, { LPCHOOSEFONTW: LPCHOOSEFONTW } ],
  PrintDlgA: [ int, { pPD: LPPRINTDLGA } ],
  PrintDlgW: [ int, { pPD: LPPRINTDLGW } ],
  PrintDlgExA: [ long, { pPD: LPPRINTDLGEXA } ],
  PrintDlgExW: [ long, { pPD: LPPRINTDLGEXW } ],
  CommDlgExtendedError: [ ulong, {  } ],
  PageSetupDlgA: [ int, { LPPAGESETUPDLGA: LPPAGESETUPDLGA } ],
  PageSetupDlgW: [ int, { LPPAGESETUPDLGW: LPPAGESETUPDLGW } ],
  ua_wcscpy: [ ushort.Δ, { Destination: PUWSTR, Source: PCUWSTR } ],
  ChangeServiceConfigA: [ int, { hService: SC_HANDLE, dwServiceType: DWORD, dwStartType: DWORD, dwErrorControl: DWORD, lpBinaryPathName: LPCSTR, lpLoadOrderGroup: LPCSTR, lpdwTagId: LPDWORD, lpDependencies: LPCSTR, lpServiceStartName: LPCSTR, lpPassword: LPCSTR, lpDisplayName: LPCSTR } ],
  ChangeServiceConfigW: [ int, { hService: SC_HANDLE, dwServiceType: DWORD, dwStartType: DWORD, dwErrorControl: DWORD, lpBinaryPathName: LPCWSTR, lpLoadOrderGroup: LPCWSTR, lpdwTagId: LPDWORD, lpDependencies: LPCWSTR, lpServiceStartName: LPCWSTR, lpPassword: LPCWSTR, lpDisplayName: LPCWSTR } ],
  ChangeServiceConfig2A: [ int, { hService: SC_HANDLE, dwInfoLevel: DWORD, lpInfo: LPVOID } ],
  ChangeServiceConfig2W: [ int, { hService: SC_HANDLE, dwInfoLevel: DWORD, lpInfo: LPVOID } ],
  CloseServiceHandle: [ int, { hSCObject: SC_HANDLE } ],
  ControlService: [ int, { hService: SC_HANDLE, dwControl: DWORD, lpServiceStatus: LPSERVICE_STATUS } ],
  CreateServiceA: [ VOIDPTR, { hSCManager: SC_HANDLE, lpServiceName: LPCSTR, lpDisplayName: LPCSTR, dwDesiredAccess: DWORD, dwServiceType: DWORD, dwStartType: DWORD, dwErrorControl: DWORD, lpBinaryPathName: LPCSTR, lpLoadOrderGroup: LPCSTR, lpdwTagId: LPDWORD, lpDependencies: LPCSTR, lpServiceStartName: LPCSTR, lpPassword: LPCSTR } ],
  CreateServiceW: [ VOIDPTR, { hSCManager: SC_HANDLE, lpServiceName: LPCWSTR, lpDisplayName: LPCWSTR, dwDesiredAccess: DWORD, dwServiceType: DWORD, dwStartType: DWORD, dwErrorControl: DWORD, lpBinaryPathName: LPCWSTR, lpLoadOrderGroup: LPCWSTR, lpdwTagId: LPDWORD, lpDependencies: LPCWSTR, lpServiceStartName: LPCWSTR, lpPassword: LPCWSTR } ],
  DeleteService: [ int, { hService: SC_HANDLE } ],
  EnumDependentServicesA: [ int, { hService: SC_HANDLE, dwServiceState: DWORD, lpServices: LPENUM_SERVICE_STATUSA, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD, lpServicesReturned: LPDWORD } ],
  EnumDependentServicesW: [ int, { hService: SC_HANDLE, dwServiceState: DWORD, lpServices: LPENUM_SERVICE_STATUSW, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD, lpServicesReturned: LPDWORD } ],
  EnumServicesStatusA: [ int, { hSCManager: SC_HANDLE, dwServiceType: DWORD, dwServiceState: DWORD, lpServices: LPENUM_SERVICE_STATUSA, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD, lpServicesReturned: LPDWORD, lpResumeHandle: LPDWORD } ],
  EnumServicesStatusW: [ int, { hSCManager: SC_HANDLE, dwServiceType: DWORD, dwServiceState: DWORD, lpServices: LPENUM_SERVICE_STATUSW, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD, lpServicesReturned: LPDWORD, lpResumeHandle: LPDWORD } ],
  EnumServicesStatusExA: [ int, { hSCManager: SC_HANDLE, InfoLevel: SC_ENUM_TYPE, dwServiceType: DWORD, dwServiceState: DWORD, lpServices: LPBYTE, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD, lpServicesReturned: LPDWORD, lpResumeHandle: LPDWORD, pszGroupName: LPCSTR } ],
  EnumServicesStatusExW: [ int, { hSCManager: SC_HANDLE, InfoLevel: SC_ENUM_TYPE, dwServiceType: DWORD, dwServiceState: DWORD, lpServices: LPBYTE, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD, lpServicesReturned: LPDWORD, lpResumeHandle: LPDWORD, pszGroupName: LPCWSTR } ],
  GetServiceKeyNameA: [ int, { hSCManager: SC_HANDLE, lpDisplayName: LPCSTR, lpServiceName: LPSTR, lpcchBuffer: LPDWORD } ],
  GetServiceKeyNameW: [ int, { hSCManager: SC_HANDLE, lpDisplayName: LPCWSTR, lpServiceName: LPWSTR, lpcchBuffer: LPDWORD } ],
  GetServiceDisplayNameA: [ int, { hSCManager: SC_HANDLE, lpServiceName: LPCSTR, lpDisplayName: LPSTR, lpcchBuffer: LPDWORD } ],
  GetServiceDisplayNameW: [ int, { hSCManager: SC_HANDLE, lpServiceName: LPCWSTR, lpDisplayName: LPWSTR, lpcchBuffer: LPDWORD } ],
  LockServiceDatabase: [ VoidT.Δ, { hSCManager: SC_HANDLE } ],
  NotifyBootConfigStatus: [ int, { BootAcceptable: BOOL } ],
  OpenSCManagerA: [ VOIDPTR, { lpMachineName: LPCSTR, lpDatabaseName: LPCSTR, dwDesiredAccess: DWORD } ],
  OpenSCManagerW: [ VOIDPTR, { lpMachineName: LPCWSTR, lpDatabaseName: LPCWSTR, dwDesiredAccess: DWORD } ],
  OpenServiceA: [ VOIDPTR, { hSCManager: SC_HANDLE, lpServiceName: LPCSTR, dwDesiredAccess: DWORD } ],
  OpenServiceW: [ VOIDPTR, { hSCManager: SC_HANDLE, lpServiceName: LPCWSTR, dwDesiredAccess: DWORD } ],
  QueryServiceConfigA: [ int, { hService: SC_HANDLE, lpServiceConfig: LPQUERY_SERVICE_CONFIGA, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD } ],
  QueryServiceConfigW: [ int, { hService: SC_HANDLE, lpServiceConfig: LPQUERY_SERVICE_CONFIGW, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD } ],
  QueryServiceConfig2A: [ int, { hService: SC_HANDLE, dwInfoLevel: DWORD, lpBuffer: LPBYTE, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD } ],
  QueryServiceConfig2W: [ int, { hService: SC_HANDLE, dwInfoLevel: DWORD, lpBuffer: LPBYTE, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD } ],
  QueryServiceLockStatusA: [ int, { hSCManager: SC_HANDLE, lpLockStatus: LPQUERY_SERVICE_LOCK_STATUSA, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD } ],
  QueryServiceLockStatusW: [ int, { hSCManager: SC_HANDLE, lpLockStatus: LPQUERY_SERVICE_LOCK_STATUSW, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD } ],
  QueryServiceObjectSecurity: [ int, { hService: SC_HANDLE, dwSecurityInformation: SECURITY_INFORMATION, lpSecurityDescriptor: PSECURITY_DESCRIPTOR, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD } ],
  QueryServiceStatus: [ int, { hService: SC_HANDLE, lpServiceStatus: LPSERVICE_STATUS } ],
  QueryServiceStatusEx: [ int, { hService: SC_HANDLE, InfoLevel: SC_STATUS_TYPE, lpBuffer: LPBYTE, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD } ],
  RegisterServiceCtrlHandlerA: [ VOIDPTR, { lpServiceName: LPCSTR, lpHandlerProc: LPHANDLER_FUNCTION } ],
  RegisterServiceCtrlHandlerW: [ VOIDPTR, { lpServiceName: LPCWSTR, lpHandlerProc: LPHANDLER_FUNCTION } ],
  RegisterServiceCtrlHandlerExA: [ VOIDPTR, { lpServiceName: LPCSTR, lpHandlerProc: LPHANDLER_FUNCTION_EX, lpContext: LPVOID } ],
  RegisterServiceCtrlHandlerExW: [ VOIDPTR, { lpServiceName: LPCWSTR, lpHandlerProc: LPHANDLER_FUNCTION_EX, lpContext: LPVOID } ],
  SetServiceObjectSecurity: [ int, { hService: SC_HANDLE, dwSecurityInformation: SECURITY_INFORMATION, lpSecurityDescriptor: PSECURITY_DESCRIPTOR } ],
  SetServiceStatus: [ int, { hServiceStatus: SERVICE_STATUS_HANDLE, lpServiceStatus: LPSERVICE_STATUS } ],
  StartServiceCtrlDispatcherA: [ int, { lpServiceStartTable: uint.Δ } ],
  StartServiceCtrlDispatcherW: [ int, { lpServiceStartTable: uint.Δ } ],
  StartServiceA: [ int, { hService: SC_HANDLE, dwNumServiceArgs: DWORD, lpServiceArgVectors: int8.Δ.Δ } ],
  StartServiceW: [ int, { hService: SC_HANDLE, dwNumServiceArgs: DWORD, lpServiceArgVectors: ushort.Δ.Δ } ],
  UnlockServiceDatabase: [ int, { ScLock: SC_LOCK } ],
  NotifyServiceStatusChangeA: [ ulong, { hService: SC_HANDLE, dwNotifyMask: DWORD, pNotifyBuffer: PSERVICE_NOTIFYA } ],
  NotifyServiceStatusChangeW: [ ulong, { hService: SC_HANDLE, dwNotifyMask: DWORD, pNotifyBuffer: PSERVICE_NOTIFYW } ],
  ControlServiceExA: [ int, { hService: SC_HANDLE, dwControl: DWORD, dwInfoLevel: DWORD, pControlParams: PVOID } ],
  ControlServiceExW: [ int, { hService: SC_HANDLE, dwControl: DWORD, dwInfoLevel: DWORD, pControlParams: PVOID } ],
  ImmInstallIMEA: [ VOIDPTR, { lpszIMEFileName: LPCSTR, lpszLayoutText: LPCSTR } ],
  ImmInstallIMEW: [ VOIDPTR, { lpszIMEFileName: LPCWSTR, lpszLayoutText: LPCWSTR } ],
  ImmGetDefaultIMEWnd: [ VOIDPTR, { HWND: HWND } ],
  ImmGetDescriptionA: [ uint, { HKL: HKL, lpszDescription: LPSTR, uBufLen: UINT } ],
  ImmGetDescriptionW: [ uint, { HKL: HKL, lpszDescription: LPWSTR, uBufLen: UINT } ],
  ImmGetIMEFileNameA: [ uint, { HKL: HKL, lpszFileName: LPSTR, uBufLen: UINT } ],
  ImmGetIMEFileNameW: [ uint, { HKL: HKL, lpszFileName: LPWSTR, uBufLen: UINT } ],
  ImmGetProperty: [ ulong, { DWORD: DWORD } ],
  ImmIsIME: [ int, { HKL: HKL } ],
  ImmSimulateHotKey: [ int, { DWORD: DWORD } ],
  ImmCreateContext: [ VOIDPTR, {  } ],
  ImmDestroyContext: [ int, { HIMC: HIMC } ],
  ImmGetContext: [ VOIDPTR, { HWND: HWND } ],
  ImmReleaseContext: [ int, { HIMC: HIMC } ],
  ImmAssociateContext: [ VOIDPTR, { HIMC: HIMC } ],
  ImmAssociateContextEx: [ int, { DWORD: DWORD } ],
  ImmGetCompositionStringA: [ long, { DWORD: DWORD, lpBuf: LPVOID, dwBufLen: DWORD } ],
  ImmGetCompositionStringW: [ long, { DWORD: DWORD, lpBuf: LPVOID, dwBufLen: DWORD } ],
  ImmSetCompositionStringA: [ int, { HIMC: HIMC, dwIndex: DWORD, lpComp: LPVOID, dwCompLen: DWORD, lpRead: LPVOID, dwReadLen: DWORD } ],
  ImmSetCompositionStringW: [ int, { HIMC: HIMC, dwIndex: DWORD, lpComp: LPVOID, dwCompLen: DWORD, lpRead: LPVOID, dwReadLen: DWORD } ],
  ImmGetCandidateListCountA: [ ulong, { HIMC: HIMC, lpdwListCount: LPDWORD } ],
  ImmGetCandidateListCountW: [ ulong, { HIMC: HIMC, lpdwListCount: LPDWORD } ],
  ImmGetCandidateListA: [ ulong, { HIMC: HIMC, deIndex: DWORD, lpCandList: LPCANDIDATELIST, dwBufLen: DWORD } ],
  ImmGetCandidateListW: [ ulong, { HIMC: HIMC, deIndex: DWORD, lpCandList: LPCANDIDATELIST, dwBufLen: DWORD } ],
  ImmGetGuideLineA: [ ulong, { HIMC: HIMC, dwIndex: DWORD, lpBuf: LPSTR, dwBufLen: DWORD } ],
  ImmGetGuideLineW: [ ulong, { HIMC: HIMC, dwIndex: DWORD, lpBuf: LPWSTR, dwBufLen: DWORD } ],
  ImmGetConversionStatus: [ int, { HIMC: HIMC, lpfdwConversion: LPDWORD, lpfdwSentence: LPDWORD } ],
  ImmSetConversionStatus: [ int, { DWORD: DWORD } ],
  ImmGetOpenStatus: [ int, { HIMC: HIMC } ],
  ImmSetOpenStatus: [ int, { BOOL: BOOL } ],
  ImmGetCompositionFontA: [ int, { HIMC: HIMC, lplf: LPLOGFONTA } ],
  ImmGetCompositionFontW: [ int, { HIMC: HIMC, lplf: LPLOGFONTW } ],
  ImmSetCompositionFontA: [ int, { HIMC: HIMC, lplf: LPLOGFONTA } ],
  ImmSetCompositionFontW: [ int, { HIMC: HIMC, lplf: LPLOGFONTW } ],
  ImmConfigureIMEA: [ int, { LPVOID: LPVOID } ],
  ImmConfigureIMEW: [ int, { LPVOID: LPVOID } ],
  ImmEscapeA: [ long, { LPVOID: LPVOID } ],
  ImmEscapeW: [ long, { LPVOID: LPVOID } ],
  ImmGetConversionListA: [ ulong, { HIMC: HIMC, lpSrc: LPCSTR, lpDst: LPCANDIDATELIST, dwBufLen: DWORD, uFlag: UINT } ],
  ImmGetConversionListW: [ ulong, { HIMC: HIMC, lpSrc: LPCWSTR, lpDst: LPCANDIDATELIST, dwBufLen: DWORD, uFlag: UINT } ],
  ImmNotifyIME: [ int, { HIMC: HIMC, dwAction: DWORD, dwIndex: DWORD, dwValue: DWORD } ],
  ImmGetStatusWindowPos: [ int, { HIMC: HIMC, lpptPos: LPPOINT } ],
  ImmSetStatusWindowPos: [ int, { HIMC: HIMC, lpptPos: LPPOINT } ],
  ImmGetCompositionWindow: [ int, { HIMC: HIMC, lpCompForm: LPCOMPOSITIONFORM } ],
  ImmSetCompositionWindow: [ int, { HIMC: HIMC, lpCompForm: LPCOMPOSITIONFORM } ],
  ImmGetCandidateWindow: [ int, { DWORD: DWORD, lpCandidate: LPCANDIDATEFORM } ],
  ImmSetCandidateWindow: [ int, { HIMC: HIMC, lpCandidate: LPCANDIDATEFORM } ],
  ImmIsUIMessageA: [ int, { LPARAM: LPARAM } ],
  ImmIsUIMessageW: [ int, { LPARAM: LPARAM } ],
  ImmGetVirtualKey: [ uint, { HWND: HWND } ],
  ImmRegisterWordA: [ int, { DWORD: DWORD, lpszReading: LPCSTR, lpszRegister: LPCSTR } ],
  ImmRegisterWordW: [ int, { DWORD: DWORD, lpszReading: LPCWSTR, lpszRegister: LPCWSTR } ],
  ImmUnregisterWordA: [ int, { DWORD: DWORD, lpszReading: LPCSTR, lpszUnregister: LPCSTR } ],
  ImmUnregisterWordW: [ int, { DWORD: DWORD, lpszReading: LPCWSTR, lpszUnregister: LPCWSTR } ],
  ImmGetRegisterWordStyleA: [ uint, { HKL: HKL, nItem: UINT, lpStyleBuf: LPSTYLEBUFA } ],
  ImmGetRegisterWordStyleW: [ uint, { HKL: HKL, nItem: UINT, lpStyleBuf: LPSTYLEBUFW } ],
  ImmEnumRegisterWordA: [ uint, { LPVOID: LPVOID, lpszReading: LPCSTR, lpszRegister: LPCSTR } ],
  ImmEnumRegisterWordW: [ uint, { LPVOID: LPVOID, lpszReading: LPCWSTR, lpszRegister: LPCWSTR } ],
  ImmDisableIME: [ int, { DWORD: DWORD } ],
  ImmEnumInputContext: [ int, { idThread: DWORD, lpfn: IMCENUMPROC, lParam: LPARAM } ],
  ImmGetImeMenuItemsA: [ ulong, { DWORD: DWORD, lpImeParentMenu: LPIMEMENUITEMINFOA, lpImeMenu: LPIMEMENUITEMINFOA, dwSize: DWORD } ],
  ImmGetImeMenuItemsW: [ ulong, { DWORD: DWORD, lpImeParentMenu: LPIMEMENUITEMINFOW, lpImeMenu: LPIMEMENUITEMINFOW, dwSize: DWORD } ],
  ImmDisableTextFrameService: [ int, { idThread: DWORD } ],
  IEnumConnections_RemoteNext_Proxy: [ long, { This: uint.Δ, cConnections: ULONG, rgcd: LPCONNECTDATA, pcFetched: ulong.Δ } ],
  IEnumConnections_RemoteNext_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IEnumConnectionPoints_RemoteNext_Proxy: [ long, { This: uint.Δ, cConnections: ULONG, ppCP: VOIDPTR.Δ, pcFetched: ulong.Δ } ],
  IEnumConnectionPoints_RemoteNext_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IClassFactory2_RemoteCreateInstanceLic_Proxy: [ long, { This: uint.Δ, riid: uint.Δ, bstrKey: BSTR, ppvObj: uint.Δ.Δ } ],
  IClassFactory2_RemoteCreateInstanceLic_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IPersistMemory_RemoteLoad_Proxy: [ long, { This: uint.Δ, pMem: uchar.Δ, cbSize: ULONG } ],
  IPersistMemory_RemoteLoad_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IPersistMemory_RemoteSave_Proxy: [ long, { This: uint.Δ, pMem: uchar.Δ, fClearDirty: BOOL, cbSize: ULONG } ],
  IPersistMemory_RemoteSave_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IEnumOleUndoUnits_RemoteNext_Proxy: [ long, { This: uint.Δ, cElt: ULONG, rgElt: uint.Δ.Δ, pcEltFetched: ulong.Δ } ],
  IEnumOleUndoUnits_RemoteNext_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IAdviseSinkEx_RemoteOnViewStatusChange_Proxy: [ long, { This: uint.Δ, dwViewStatus: DWORD } ],
  IAdviseSinkEx_RemoteOnViewStatusChange_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IQuickActivate_RemoteQuickActivate_Proxy: [ long, { This: uint.Δ, pQaContainer: uint.Δ, pQaControl: uint.Δ } ],
  IQuickActivate_RemoteQuickActivate_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  HFONT_UserSize: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HFONT_UserMarshal: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HFONT_UserUnmarshal: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HFONT_UserFree: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HPALETTE_UserSize: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HPALETTE_UserMarshal: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HPALETTE_UserUnmarshal: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HPALETTE_UserFree: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HRGN_UserSize: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HRGN_UserMarshal: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HRGN_UserUnmarshal: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HRGN_UserFree: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HFONT_UserSize64: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HFONT_UserMarshal64: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HFONT_UserUnmarshal64: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HFONT_UserFree64: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HPALETTE_UserSize64: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HPALETTE_UserMarshal64: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HPALETTE_UserUnmarshal64: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HPALETTE_UserFree64: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HRGN_UserSize64: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HRGN_UserMarshal64: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HRGN_UserUnmarshal64: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  HRGN_UserFree64: [ VoidT, { VOIDPTR.Δ: VOIDPTR.Δ } ],
  IEnumConnections_Next_Proxy: [ long, { This: uint.Δ, cConnections: ULONG, rgcd: LPCONNECTDATA, pcFetched: ulong.Δ } ],
  IEnumConnections_Next_Stub: [ long, { This: uint.Δ, cConnections: ULONG, rgcd: LPCONNECTDATA, pcFetched: ulong.Δ } ],
  IEnumConnectionPoints_Next_Proxy: [ long, { This: uint.Δ, cConnections: ULONG, ppCP: VOIDPTR.Δ, pcFetched: ulong.Δ } ],
  IEnumConnectionPoints_Next_Stub: [ long, { This: uint.Δ, cConnections: ULONG, ppCP: VOIDPTR.Δ, pcFetched: ulong.Δ } ],
  IClassFactory2_CreateInstanceLic_Proxy: [ long, { This: uint.Δ, pUnkOuter: uint.Δ, pUnkReserved: uint.Δ, riid: uint.Δ, bstrKey: BSTR, ppvObj: VoidT.Δ.Δ } ],
  IClassFactory2_CreateInstanceLic_Stub: [ long, { This: uint.Δ, riid: uint.Δ, bstrKey: BSTR, ppvObj: uint.Δ.Δ } ],
  IPersistMemory_Load_Proxy: [ long, { This: uint.Δ, pMem: LPVOID, cbSize: ULONG } ],
  IPersistMemory_Load_Stub: [ long, { This: uint.Δ, pMem: uchar.Δ, cbSize: ULONG } ],
  IPersistMemory_Save_Proxy: [ long, { This: uint.Δ, pMem: LPVOID, fClearDirty: BOOL, cbSize: ULONG } ],
  IPersistMemory_Save_Stub: [ long, { This: uint.Δ, pMem: uchar.Δ, fClearDirty: BOOL, cbSize: ULONG } ],
  IEnumOleUndoUnits_Next_Proxy: [ long, { This: uint.Δ, cElt: ULONG, rgElt: uint.Δ.Δ, pcEltFetched: ulong.Δ } ],
  IEnumOleUndoUnits_Next_Stub: [ long, { This: uint.Δ, cElt: ULONG, rgElt: uint.Δ.Δ, pcEltFetched: ulong.Δ } ],
  IAdviseSinkEx_OnViewStatusChange_Proxy: [ VoidT, { This: uint.Δ, dwViewStatus: DWORD } ],
  IAdviseSinkEx_OnViewStatusChange_Stub: [ long, { This: uint.Δ, dwViewStatus: DWORD } ],
  IQuickActivate_QuickActivate_Proxy: [ long, { This: uint.Δ, pQaContainer: uint.Δ, pQaControl: uint.Δ } ],
  IQuickActivate_QuickActivate_Stub: [ long, { This: uint.Δ, pQaContainer: uint.Δ, pQaControl: uint.Δ } ],
  IDispatchEx_RemoteInvokeEx_Proxy: [ long, { This: uint.Δ, id: DISPID, lcid: LCID, dwFlags: DWORD, pdp: uint.Δ, pvarRes: uint.Δ, pei: uint.Δ, pspCaller: uint.Δ, cvarRefArg: UINT, rgiRefArg: uint.Δ, rgvarRefArg: uint.Δ } ],
  IDispatchEx_RemoteInvokeEx_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IDispatchEx_InvokeEx_Proxy: [ long, { This: uint.Δ, id: DISPID, lcid: LCID, wFlags: WORD, pdp: uint.Δ, pvarRes: uint.Δ, pei: uint.Δ, pspCaller: uint.Δ } ],
  IDispatchEx_InvokeEx_Stub: [ long, { This: uint.Δ, id: DISPID, lcid: LCID, dwFlags: DWORD, pdp: uint.Δ, pvarRes: uint.Δ, pei: uint.Δ, pspCaller: uint.Δ, cvarRefArg: UINT, rgiRefArg: uint.Δ, rgvarRefArg: uint.Δ } ],
  DllRegisterServer: [ long, {  } ],
  DllUnregisterServer: [ long, {  } ],
  OleCreatePropertyFrame: [ long, { hwndOwner: HWND, x: UINT, y: UINT, lpszCaption: LPCOLESTR, cObjects: ULONG, ppUnk: VOIDPTR.Δ, cPages: ULONG, pPageClsID: LPCLSID, lcid: LCID, dwReserved: DWORD, pvReserved: LPVOID } ],
  OleCreatePropertyFrameIndirect: [ long, { lpParams: LPOCPFIPARAMS } ],
  OleTranslateColor: [ long, { clr: OLE_COLOR, hpal: HPALETTE, lpcolorref: ulong.Δ } ],
  OleCreateFontIndirect: [ long, { lpFontDesc: LPFONTDESC, riid: uint.Δ, lplpvObj: VoidT.Δ.Δ } ],
  OleCreatePictureIndirect: [ long, { lpPictDesc: LPPICTDESC, riid: uint.Δ, fOwn: BOOL, lplpvObj: VoidT.Δ.Δ } ],
  OleLoadPicture: [ long, { lpstream: LPSTREAM, lSize: LONG, fRunmode: BOOL, riid: uint.Δ, lplpvObj: VoidT.Δ.Δ } ],
  OleLoadPictureEx: [ long, { lpstream: LPSTREAM, lSize: LONG, fRunmode: BOOL, riid: uint.Δ, xSizeDesired: DWORD, ySizeDesired: DWORD, dwFlags: DWORD, lplpvObj: VoidT.Δ.Δ } ],
  OleLoadPicturePath: [ long, { szURLorPath: LPOLESTR, punkCaller: LPUNKNOWN, dwReserved: DWORD, clrReserved: OLE_COLOR, riid: uint.Δ, ppvRet: VoidT.Δ.Δ } ],
  OleLoadPictureFile: [ long, { varFileName: VARIANT, lplpdispPicture: VOIDPTR.Δ } ],
  OleLoadPictureFileEx: [ long, { varFileName: VARIANT, xSizeDesired: DWORD, ySizeDesired: DWORD, dwFlags: DWORD, lplpdispPicture: VOIDPTR.Δ } ],
  OleSavePictureFile: [ long, { lpdispPicture: LPDISPATCH, bstrFileName: BSTR } ],
  OleIconToCursor: [ VOIDPTR, { hinstExe: HINSTANCE, hIcon: HICON } ],
  IHTMLStyle_get_styleFloat_Proxy: [ long, { This: uint.Δ, p: ushort.Δ.Δ } ],
  IHTMLStyle_get_styleFloat_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLStyle_put_clear_Proxy: [ long, { This: uint.Δ, v: BSTR } ],
  IHTMLStyle_put_clear_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLStyle_get_clear_Proxy: [ long, { This: uint.Δ, p: ushort.Δ.Δ } ],
  IHTMLStyle_get_clear_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLStyle_put_display_Proxy: [ long, { This: uint.Δ, v: BSTR } ],
  IHTMLStyle_put_display_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLStyle_get_display_Proxy: [ long, { This: uint.Δ, p: ushort.Δ.Δ } ],
  IHTMLStyle_get_display_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLStyle_put_visibility_Proxy: [ long, { This: uint.Δ, v: BSTR } ],
  IHTMLStyle_put_visibility_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLStyle_get_visibility_Proxy: [ long, { This: uint.Δ, p: ushort.Δ.Δ } ],
  IHTMLStyle_get_visibility_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLStyle_put_listStyleType_Proxy: [ long, { This: uint.Δ, v: BSTR } ],
  IHTMLStyle_put_listStyleType_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLStyle_get_listStyleType_Proxy: [ long, { This: uint.Δ, p: ushort.Δ.Δ } ],
  IHTMLStyle_get_listStyleType_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLStyle_put_listStylePosition_Proxy: [ long, { This: uint.Δ, v: BSTR } ],
  IHTMLStyle_put_listStylePosition_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLStyle_get_listStylePosition_Proxy: [ long, { This: uint.Δ, p: ushort.Δ.Δ } ],
  IHTMLStyle_get_listStylePosition_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLStyle_put_listStyleImage_Proxy: [ long, { This: uint.Δ, v: BSTR } ],
  IHTMLStyle_put_listStyleImage_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLStyle_get_listStyleImage_Proxy: [ long, { This: uint.Δ, p: ushort.Δ.Δ } ],
  IHTMLStyle_get_listStyleImage_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLStyle_put_listStyle_Proxy: [ long, { This: uint.Δ, v: BSTR } ],
  IHTMLStyle_put_listStyle_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLStyle_get_listStyle_Proxy: [ long, { This: uint.Δ, p: ushort.Δ.Δ } ],
  IHTMLStyle_get_listStyle_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLStyle_put_whiteSpace_Proxy: [ long, { This: uint.Δ, v: BSTR } ],
  IHTMLStyle_put_whiteSpace_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLStyle_get_whiteSpace_Proxy: [ long, { This: uint.Δ, p: ushort.Δ.Δ } ],
  IHTMLStyle_get_whiteSpace_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLStyle_put_top_Proxy: [ long, { This: uint.Δ, v: VARIANT } ],
  IHTMLStyle_put_top_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLStyle_get_top_Proxy: [ long, { This: uint.Δ, p: uint.Δ } ],
  IHTMLStyle_get_top_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLStyle_put_left_Proxy: [ long, { This: uint.Δ, v: VARIANT } ],
  IHTMLStyle_put_left_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLStyle_get_left_Proxy: [ long, { This: uint.Δ, p: uint.Δ } ],
  IHTMLStyle_get_left_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLStyle_get_position_Proxy: [ long, { This: uint.Δ, p: ushort.Δ.Δ } ],
  IHTMLStyle_get_position_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLStyle_put_zIndex_Proxy: [ long, { This: uint.Δ, v: VARIANT } ],
  IHTMLStyle_put_zIndex_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLStyle_get_zIndex_Proxy: [ long, { This: uint.Δ, p: uint.Δ } ],
  IHTMLStyle_get_zIndex_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLStyle_put_overflow_Proxy: [ long, { This: uint.Δ, v: BSTR } ],
  IHTMLStyle_put_overflow_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLStyle_get_overflow_Proxy: [ long, { This: uint.Δ, p: ushort.Δ.Δ } ],
  IHTMLStyle_get_overflow_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLStyle_put_pageBreakBefore_Proxy: [ long, { This: uint.Δ, v: BSTR } ],
  IHTMLStyle_put_pageBreakBefore_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLStyle_get_pageBreakBefore_Proxy: [ long, { This: uint.Δ, p: ushort.Δ.Δ } ],
  IHTMLStyle_get_pageBreakBefore_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLStyle_put_pageBreakAfter_Proxy: [ long, { This: uint.Δ, v: BSTR } ],
  IHTMLStyle_put_pageBreakAfter_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLStyle_get_pageBreakAfter_Proxy: [ long, { This: uint.Δ, p: ushort.Δ.Δ } ],
  IHTMLStyle_get_pageBreakAfter_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLStyle_put_cssText_Proxy: [ long, { This: uint.Δ, v: BSTR } ],
  IHTMLStyle_put_cssText_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLStyle_get_cssText_Proxy: [ long, { This: uint.Δ, p: ushort.Δ.Δ } ],
  IHTMLStyle_get_cssText_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLStyle_put_pixelTop_Proxy: [ long, { This: uint.Δ, v: long } ],
  IHTMLStyle_put_pixelTop_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLStyle_get_pixelTop_Proxy: [ long, { This: uint.Δ, p: long.Δ } ],
  IHTMLStyle_get_pixelTop_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLStyle_put_pixelLeft_Proxy: [ long, { This: uint.Δ, v: long } ],
  IHTMLStyle_put_pixelLeft_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLStyle_get_pixelLeft_Proxy: [ long, { This: uint.Δ, p: long.Δ } ],
  IHTMLStyle_get_pixelLeft_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLStyle_put_pixelWidth_Proxy: [ long, { This: uint.Δ, v: long } ],
  IHTMLStyle_put_pixelWidth_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLStyle_get_pixelWidth_Proxy: [ long, { This: uint.Δ, p: long.Δ } ],
  IHTMLStyle_get_pixelWidth_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLStyle_put_pixelHeight_Proxy: [ long, { This: uint.Δ, v: long } ],
  IHTMLStyle_put_pixelHeight_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLStyle_get_pixelHeight_Proxy: [ long, { This: uint.Δ, p: long.Δ } ],
  IHTMLStyle_get_pixelHeight_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLStyle_put_posTop_Proxy: [ long, { This: uint.Δ, v: float } ],
  IHTMLStyle_put_posTop_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLStyle_get_posTop_Proxy: [ long, { This: uint.Δ, p: float.Δ } ],
  IHTMLStyle_get_posTop_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLStyle_put_posLeft_Proxy: [ long, { This: uint.Δ, v: float } ],
  IHTMLStyle_put_posLeft_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLStyle_get_posLeft_Proxy: [ long, { This: uint.Δ, p: float.Δ } ],
  IHTMLStyle_get_posLeft_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLStyle_put_posWidth_Proxy: [ long, { This: uint.Δ, v: float } ],
  IHTMLStyle_put_posWidth_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLStyle_get_posWidth_Proxy: [ long, { This: uint.Δ, p: float.Δ } ],
  IHTMLStyle_get_posWidth_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLStyle_put_posHeight_Proxy: [ long, { This: uint.Δ, v: float } ],
  IHTMLStyle_put_posHeight_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLStyle_get_posHeight_Proxy: [ long, { This: uint.Δ, p: float.Δ } ],
  IHTMLStyle_get_posHeight_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLStyle_put_cursor_Proxy: [ long, { This: uint.Δ, v: BSTR } ],
  IHTMLStyle_put_cursor_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLStyle_get_cursor_Proxy: [ long, { This: uint.Δ, p: ushort.Δ.Δ } ],
  IHTMLStyle_get_cursor_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLStyle_put_clip_Proxy: [ long, { This: uint.Δ, v: BSTR } ],
  IHTMLStyle_put_clip_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLStyle_get_clip_Proxy: [ long, { This: uint.Δ, p: ushort.Δ.Δ } ],
  IHTMLStyle_get_clip_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLStyle_put_filter_Proxy: [ long, { This: uint.Δ, v: BSTR } ],
  IHTMLStyle_put_filter_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLStyle_get_filter_Proxy: [ long, { This: uint.Δ, p: ushort.Δ.Δ } ],
  IHTMLStyle_get_filter_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLStyle_setAttribute_Proxy: [ long, { This: uint.Δ, strAttributeName: BSTR, AttributeValue: VARIANT, lFlags: LONG } ],
  IHTMLStyle_setAttribute_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLStyle_getAttribute_Proxy: [ long, { This: uint.Δ, strAttributeName: BSTR, lFlags: LONG, AttributeValue: uint.Δ } ],
  IHTMLStyle_getAttribute_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLStyle_removeAttribute_Proxy: [ long, { This: uint.Δ, strAttributeName: BSTR, lFlags: LONG, pfSuccess: short.Δ } ],
  IHTMLStyle_removeAttribute_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLStyle_toString_Proxy: [ long, { This: uint.Δ, String: ushort.Δ.Δ } ],
  IHTMLStyle_toString_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLRuleStyle_get_styleFloat_Proxy: [ long, { This: uint.Δ, p: ushort.Δ.Δ } ],
  IHTMLRuleStyle_get_styleFloat_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLRuleStyle_put_clear_Proxy: [ long, { This: uint.Δ, v: BSTR } ],
  IHTMLRuleStyle_put_clear_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLRuleStyle_get_clear_Proxy: [ long, { This: uint.Δ, p: ushort.Δ.Δ } ],
  IHTMLRuleStyle_get_clear_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLRuleStyle_put_display_Proxy: [ long, { This: uint.Δ, v: BSTR } ],
  IHTMLRuleStyle_put_display_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLRuleStyle_get_display_Proxy: [ long, { This: uint.Δ, p: ushort.Δ.Δ } ],
  IHTMLRuleStyle_get_display_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLRuleStyle_put_visibility_Proxy: [ long, { This: uint.Δ, v: BSTR } ],
  IHTMLRuleStyle_put_visibility_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLRuleStyle_get_visibility_Proxy: [ long, { This: uint.Δ, p: ushort.Δ.Δ } ],
  IHTMLRuleStyle_get_visibility_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLRuleStyle_put_listStyleType_Proxy: [ long, { This: uint.Δ, v: BSTR } ],
  IHTMLRuleStyle_put_listStyleType_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLRuleStyle_get_listStyleType_Proxy: [ long, { This: uint.Δ, p: ushort.Δ.Δ } ],
  IHTMLRuleStyle_get_listStyleType_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLRuleStyle_put_listStylePosition_Proxy: [ long, { This: uint.Δ, v: BSTR } ],
  IHTMLRuleStyle_put_listStylePosition_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLRuleStyle_get_listStylePosition_Proxy: [ long, { This: uint.Δ, p: ushort.Δ.Δ } ],
  IHTMLRuleStyle_get_listStylePosition_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLRuleStyle_put_listStyleImage_Proxy: [ long, { This: uint.Δ, v: BSTR } ],
  IHTMLRuleStyle_put_listStyleImage_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLRuleStyle_get_listStyleImage_Proxy: [ long, { This: uint.Δ, p: ushort.Δ.Δ } ],
  IHTMLRuleStyle_get_listStyleImage_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLRuleStyle_put_listStyle_Proxy: [ long, { This: uint.Δ, v: BSTR } ],
  IHTMLRuleStyle_put_listStyle_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLRuleStyle_get_listStyle_Proxy: [ long, { This: uint.Δ, p: ushort.Δ.Δ } ],
  IHTMLRuleStyle_get_listStyle_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLRuleStyle_put_whiteSpace_Proxy: [ long, { This: uint.Δ, v: BSTR } ],
  IHTMLRuleStyle_put_whiteSpace_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLRuleStyle_get_whiteSpace_Proxy: [ long, { This: uint.Δ, p: ushort.Δ.Δ } ],
  IHTMLRuleStyle_get_whiteSpace_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLRuleStyle_put_top_Proxy: [ long, { This: uint.Δ, v: VARIANT } ],
  IHTMLRuleStyle_put_top_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLRuleStyle_get_top_Proxy: [ long, { This: uint.Δ, p: uint.Δ } ],
  IHTMLRuleStyle_get_top_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLRuleStyle_put_left_Proxy: [ long, { This: uint.Δ, v: VARIANT } ],
  IHTMLRuleStyle_put_left_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLRuleStyle_get_left_Proxy: [ long, { This: uint.Δ, p: uint.Δ } ],
  IHTMLRuleStyle_get_left_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLRuleStyle_get_position_Proxy: [ long, { This: uint.Δ, p: ushort.Δ.Δ } ],
  IHTMLRuleStyle_get_position_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLRuleStyle_put_zIndex_Proxy: [ long, { This: uint.Δ, v: VARIANT } ],
  IHTMLRuleStyle_put_zIndex_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLRuleStyle_get_zIndex_Proxy: [ long, { This: uint.Δ, p: uint.Δ } ],
  IHTMLRuleStyle_get_zIndex_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLRuleStyle_put_overflow_Proxy: [ long, { This: uint.Δ, v: BSTR } ],
  IHTMLRuleStyle_put_overflow_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLRuleStyle_get_overflow_Proxy: [ long, { This: uint.Δ, p: ushort.Δ.Δ } ],
  IHTMLRuleStyle_get_overflow_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLRuleStyle_put_pageBreakBefore_Proxy: [ long, { This: uint.Δ, v: BSTR } ],
  IHTMLRuleStyle_put_pageBreakBefore_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLRuleStyle_get_pageBreakBefore_Proxy: [ long, { This: uint.Δ, p: ushort.Δ.Δ } ],
  IHTMLRuleStyle_get_pageBreakBefore_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLRuleStyle_put_pageBreakAfter_Proxy: [ long, { This: uint.Δ, v: BSTR } ],
  IHTMLRuleStyle_put_pageBreakAfter_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLRuleStyle_get_pageBreakAfter_Proxy: [ long, { This: uint.Δ, p: ushort.Δ.Δ } ],
  IHTMLRuleStyle_get_pageBreakAfter_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLRuleStyle_put_cssText_Proxy: [ long, { This: uint.Δ, v: BSTR } ],
  IHTMLRuleStyle_put_cssText_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLRuleStyle_get_cssText_Proxy: [ long, { This: uint.Δ, p: ushort.Δ.Δ } ],
  IHTMLRuleStyle_get_cssText_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLRuleStyle_put_cursor_Proxy: [ long, { This: uint.Δ, v: BSTR } ],
  IHTMLRuleStyle_put_cursor_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLRuleStyle_get_cursor_Proxy: [ long, { This: uint.Δ, p: ushort.Δ.Δ } ],
  IHTMLRuleStyle_get_cursor_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLRuleStyle_put_clip_Proxy: [ long, { This: uint.Δ, v: BSTR } ],
  IHTMLRuleStyle_put_clip_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLRuleStyle_get_clip_Proxy: [ long, { This: uint.Δ, p: ushort.Δ.Δ } ],
  IHTMLRuleStyle_get_clip_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLRuleStyle_put_filter_Proxy: [ long, { This: uint.Δ, v: BSTR } ],
  IHTMLRuleStyle_put_filter_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLRuleStyle_get_filter_Proxy: [ long, { This: uint.Δ, p: ushort.Δ.Δ } ],
  IHTMLRuleStyle_get_filter_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLRuleStyle_setAttribute_Proxy: [ long, { This: uint.Δ, strAttributeName: BSTR, AttributeValue: VARIANT, lFlags: LONG } ],
  IHTMLRuleStyle_setAttribute_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLRuleStyle_getAttribute_Proxy: [ long, { This: uint.Δ, strAttributeName: BSTR, lFlags: LONG, AttributeValue: uint.Δ } ],
  IHTMLRuleStyle_getAttribute_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],
  IHTMLRuleStyle_removeAttribute_Proxy: [ long, { This: uint.Δ, strAttributeName: BSTR, lFlags: LONG, pfSuccess: short.Δ } ],
  IHTMLRuleStyle_removeAttribute_Stub: [ VoidT, { This: uint.Δ, _pRpcChannelBuffer: uint.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ulong.Δ } ],