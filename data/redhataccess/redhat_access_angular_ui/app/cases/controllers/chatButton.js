'use strict';
/*jshint camelcase: false, expr: true*/
//Saleforce hack---
//we have to monitor stuff on the window object
//because the liveagent code generated by Salesforce is not
//designed for angularjs.
//We create fake buttons that we give to the salesforce api so we can track
//chat availability without having to write a complete rest client.
window.fakeOnlineButton = { style: { display: 'none' } };
window.fakeOfflineButton = { style: { display: 'none' } };
//
angular.module('RedhatAccess.cases').controller('ChatButton', [
    '$scope',
    'CaseService',
    'securityService',
    'strataService',
    'AlertService',
    'CHAT_SUPPORT',
    'AUTH_EVENTS',
    '$rootScope',
    '$sce',
    '$http',
    '$interval',
    function ($scope, CaseService, securityService, strataService, AlertService, CHAT_SUPPORT, AUTH_EVENTS, $rootScope, $sce, $http, $interval) {
        $scope.securityService = securityService;
        if (window.chatInitialized === undefined) {
            window.chatInitialized = false;
        }
        $scope.checkChatButtonStates = function () {
            $scope.chatAvailable = window.fakeOnlineButton.style.display !== 'none';
        };
        $scope.timer = null;
        $scope.chatHackUrl = $sce.trustAsResourceUrl(CHAT_SUPPORT.chatIframeHackUrlPrefix);
        $scope.setChatIframeHackUrl = function () {
            strataService.users.chatSession.post().then(angular.bind(this, function (sessionId) {
                var url = CHAT_SUPPORT.chatIframeHackUrlPrefix + '?sessionId=' + sessionId + '&ssoName=' + securityService.loginStatus.authedUser.sso_username;
                $scope.chatHackUrl = $sce.trustAsResourceUrl(url);
            }), function (error) {
                AlertService.addStrataErrorMessage(error);
            });
        };
        $scope.enableChat = function () {
            $scope.showChat = securityService.loginStatus.isLoggedIn && securityService.loginStatus.authedUser.has_chat && CHAT_SUPPORT.enableChat;
            return $scope.showChat;
        };
        $scope.showChat = false;
        // determines whether we should show buttons at all
        $scope.chatAvailable = false;
        //Availability of chat as determined by live agent, toggles chat buttons
        $scope.initializeChat = function () {
            if (!$scope.enableChat() || window.chatInitialized === true) {
                //function should only be called when chat is enabled, and only once per page load
                return;
            }
            if (!window._laq) {
                window._laq = [];
            }
            window._laq.push(function () {
                liveagent.showWhenOnline(CHAT_SUPPORT.chatButtonToken, window.fakeOnlineButton);
                liveagent.showWhenOffline(CHAT_SUPPORT.chatButtonToken, window.fakeOfflineButton);
            });
            //var chatToken = securityService.loginStatus.sessionId;
            var ssoName = securityService.loginStatus.authedUser.sso_username;
            var name = securityService.loginStatus.authedUser.loggedInUser;
            //var currentCaseNumber;
            var accountNumber = securityService.loginStatus.authedUser.account_number;
            // if (currentCaseNumber) {
            //   liveagent
            //     .addCustomDetail('Case Number', currentCaseNumber)
            //     .map('Case', 'CaseNumber', false, false, false)
            //     .saveToTranscript('CaseNumber__c');
            // }
            // if (chatToken) {
            //   liveagent
            //     .addCustomDetail('Session ID', chatToken)
            //     .map('Contact', 'SessionId__c', false, false, false);
            // }
            liveagent.addCustomDetail('Contact Login', ssoName).map('Contact', 'SSO_Username__c', true, true, true).saveToTranscript('SSO_Username__c');
            //liveagent
            //  .addCustomDetail('Contact E-mail', email)
            //  .map('Contact', 'Email', false, false, false);
            liveagent.addCustomDetail('Account Number', accountNumber).map('Account', 'AccountNumber', true, true, true);
            liveagent.setName(name);
            liveagent.addCustomDetail('Name', name);
            liveagent.setChatWindowHeight('552');
            //liveagent.enableLogging();
            liveagent.init(CHAT_SUPPORT.chatLiveAgentUrlPrefix, CHAT_SUPPORT.chatInitHashOne, CHAT_SUPPORT.chatInitHashTwo);
            window.chatInitialized = true;
        };
        $scope.openChatWindow = function () {
            liveagent.startChat(CHAT_SUPPORT.chatButtonToken);
        };
        $scope.init = function () {
            if ($scope.enableChat()) {
                $scope.setChatIframeHackUrl();
                $scope.timer = $interval($scope.checkChatButtonStates, 5000);
                $scope.initializeChat();
            }
        };
        $scope.$on('$destroy', function () {
            //we cancel timer each time scope is destroyed
            //it will be restarted via init on state change to a page that has a chat buttom
            $interval.cancel($scope.timer);
        });
        if (securityService.loginStatus.isLoggedIn) {
            $scope.init();
        } else {
            $scope.authEventLoginSuccess = $rootScope.$on(AUTH_EVENTS.loginSuccess, function () {
                $scope.init();
            });
            $scope.$on('$destroy', function () {
                $scope.authEventLoginSuccess();
            });
        }

        $scope.$on('$destroy', function () {
            window._laq = null;
        });
    }
]);
