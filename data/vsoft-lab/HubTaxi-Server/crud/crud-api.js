// Generated by CoffeeScript 1.7.1

/* Updated 25/12/2013 */


/*
 * CoffeeDoc example documentation #

 This is a module-level docstring, and will be displayed at the top of the module documentation.
 Documentation generated by [CoffeeDoc](http://github.com/omarkhan/coffeedoc)
 */
var User = require('../user/user').User;
(function () {
    var CrudApi, EventEmitter, Utils, hash, userCan, _,
        __bind = function (fn, me) {
            return function () {
                return fn.apply(me, arguments);
            };
        },
        __hasProp = {}.hasOwnProperty,
        __extends = function (child, parent) {
            for (var key in parent) {
                if (__hasProp.call(parent, key)) child[key] = parent[key];
            }
            function ctor() {
                this.constructor = child;
            }

            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        };

    _ = require('underscore');

    EventEmitter = require('events').EventEmitter;


    Utils = require('../utils/utils').Utils;
    var async = require('async');
    var socket = require('../socket/socket');
    hash = require('../utils/pass').hash;
    var dbProvider = require('../config/db-provider-mongo').MongooseDbProvider;
    var crudOperations;
    userCan = require('../user/routing-config').userCan;
    var mutilQueryData = [
        {
            count: 0,
            data: {}
        }
    ];
    var mutilQueryClientRequest;
    CrudApi = (function (_super) {
        __extends(CrudApi, _super);

        CrudApi.prototype.dbProvider = null;

        CrudApi.prototype.clientApi = null;

        CrudApi.prototype.crudOperation = null;

        function CrudApi(dbProvider, clientApi, crudOperation) {
            this.dbProvider = dbProvider;
            crudOperations = crudOperation;
            this.clientApi = clientApi;
            this.crudOperation = crudOperation;
            this.actionEnd = __bind(this.actionEnd, this);
            this.actionProcess = __bind(this.actionProcess, this);
            this.tryAction = __bind(this.tryAction, this);
            this.getTree = __bind(this.getTree, this);
            this.removeAll = __bind(this.removeAll, this);
            this.remove = __bind(this.remove, this);
            this.updateOne = __bind(this.updateOne, this);
            this.insert = __bind(this.insert, this);
            this.findOne = __bind(this.findOne, this);
            this.query = __bind(this.query, this);
            this.multiQuery = __bind(this.multiQuery, this);
            this.getListTaxi = __bind(this.getListTaxi, this);
            Utils.logInfo('Crud API contructed');
            return;
        }


        CrudApi.prototype.getListTaxi = function (req, res) {
            var token, ip;
            token = req.headers['authorization'] || req.query.token;
            ip = Utils.getClientIp(req);
            User.restrictToken(token, ip, function (err, resp) {
                if (err) {
                    res.json({
                        success: false,
                        message: err,
                        data: []
                    }, 403);
                } else {
                    if (socket.listTaxi) {
                        res.json({
                            success: true,
                            message: '',
                            data: socket.listTaxi()
                        })
                    } else {
                        res.json({
                            success: false,
                            message: 'listTaxi is undefined !',
                            data: {}
                        })
                    }
                }
            });

        };


        CrudApi.prototype.query = function (req, res) {
            var actionDesc, actionName;
            actionName = 'read';
            actionDesc = 'Querying';
            this.tryAction(req, res, actionName, actionDesc, (function (_this) {
                return function () {
                    var aFilter, aGroup, aSort, iLimit, iOffset, sQuery, sField;
                    aFilter = _this.clientApi.getFilter();
                    sQuery = _this.clientApi.getQuery();
                    aSort = _this.clientApi.getSort();
                    aGroup = _this.clientApi.getGroup();
                    iOffset = _this.clientApi.getOffset();
                    iLimit = _this.clientApi.getLimit();
                    sField = _this.clientApi.getField();

                    console.log('aGroup', aGroup);

                    return [aFilter, sQuery, aSort, aGroup, iOffset, iLimit, sField];
                };
            })(this));
        };

        // nodejs.vn:979/api/mg/
        /*
         * mg : [
         *   { 'query1' :
         *       {
         *           'table' : 'post',
         *           'query' : {
         *               ....
         *               }
         *       }
         *       },
         *       { 'query2'...}
         *       ]
         * */

        CrudApi.prototype.multiQuery = function (req, res) {

            var actionDesc, actionName, me = this;
            actionName = {
                name: 'read',
                tableName: ''
            };
            actionDesc = 'Mutil Querying';


            var parseJson = JSON.parse(req.query.mg);

            var result = {};
            var countArr = 0;
            var JsonLength = parseJson.length;

            _.each(parseJson, function (v, k) {
                actionName.tableName = v.table;
                me.tryAction(req, res, actionName, actionDesc, (function (_this) {
                    return function () {
                        var aFilter, aGroup, aSort, iLimit, iOffset, sQuery;
                        aFilter = v.filter || null;
                        sQuery = v.query || null;
                        aSort = v.sort || null;
                        aGroup = v.group || null;
                        iOffset = v.offset || null;
                        iLimit = v.limit || null;
                        return [aFilter, sQuery, aSort, aGroup, iOffset, iLimit];
                    };
                })(me));
            });


        };

        CrudApi.prototype.generateHashSalt = function (value, id, callback) {
            var password;
            password = value.password;
            if ((password == null) || password === '') {
                password = '123456';
            }
            hash(password, function (err, salt, hash) {
                if (err) {
                    Utils.logInfo('Generate hash and salt - error:', err);
                    value.hash = 'hash';
                    value.salt = 'salt';
                } else {
                    Utils.logInfo('Generate hash and salt - successed');
                    value.hash = hash;
                    value.salt = salt;
                }
                if (id != null) {
                    callback([id, value]);
                } else {
                    callback([value]);
                }
            });
        };

        CrudApi.prototype.findOne = function (req, res) {
            var actionDesc, actionName;
            actionName = 'readOne';
            actionDesc = 'Read One';
            this.tryAction(req, res, actionName, actionDesc, (function (_this) {
                return function () {
                    var id;
                    id = _this.clientApi.getRecordId();
                    return [id];
                };
            })(this));
        };

        CrudApi.prototype.insert = function (req, res) {
            var actionDesc, actionName;
            actionName = 'create';
            actionDesc = 'Create One';
            this.tryAction(req, res, actionName, actionDesc, (function (_this) {
                return function (callback) {
                    var sTable, value;
                    value = _this.clientApi.getPostValue();
                    if ((value != null) && (value.id != null)) {
                        delete value.id;
                    }
                    sTable = _this.clientApi.getTableName();
                    if (sTable === 'Users' || sTable === 'Drivers' || sTable === 'Managers') {
                        _this.generateHashSalt(value, null, callback);
                    } else {
                        callback([value]);
                    }
                };
            })(this));
        };

        CrudApi.prototype.updateOne = function (req, res) {
            var actionDesc, actionName;
            actionName = 'update';
            actionDesc = 'Update One';
            this.tryAction(req, res, actionName, actionDesc, (function (_this) {
                return function (callback) {
                    var id, sTable, value;
                    id = _this.clientApi.getRecordId();
                    value = _this.clientApi.getPostValue();
                    if ((value != null) && (value.id != null)) {
                        delete value.id;
                    }
                    if ((value != null) && (value._id != null)) {
                        delete value._id;
                    }

                    for (var property in value) { // Process with postValue is Array or Object

                        if (value.hasOwnProperty(property) && _.isObject(value[property]) && value[property].id) { // update
                            var currentID = value[property].id;
                            value[property] = currentID;
                        }

                        if (value.hasOwnProperty(property) && _.isArray(value[property])) {
                            for (var i = 0; i < value[property].length; i++) {
                                var itemId = value[property][i].id;
                                value[property][i] = itemId;
                            }
                        }
                    }

                    sTable = _this.clientApi.getTableName();

                    if (sTable === 'Users' && value.password) {
                        _this.generateHashSalt(value, id, callback);
                    } else {
                        callback([id, value]);
                    }
                };
            })(this));
        };

        CrudApi.prototype.remove = function (req, res) {
            var actionDesc, actionName;
            actionName = 'delete';
            actionDesc = 'Delete One';
            this.tryAction(req, res, actionName, actionDesc, (function (_this) {
                return function () {
                    var id,
                        aFilter = _this.clientApi.getFilter();
                    id = _this.clientApi.getRecordId();
                    if (id) {
                        Utils.logInfo('---- Remove by id');
                        return [id];

                    } else {
                        Utils.logInfo('---- Remove by filter');
                        return [aFilter];
                    }

                };
            })(this));
        };

        CrudApi.prototype.removeAll = function (req, res) {
            var actionDesc, actionName;
            actionName = 'deleteAll';
            actionDesc = 'Delete All';
            this.tryAction(req, res, actionName, actionDesc, (function (_this) {
                return function () {
                    return [];
                };
            })(this));
        };

        CrudApi.prototype.getTree = function (req, res) {
        };

        CrudApi.prototype.createAction = function (req, res, sName, sDesc) {
            var action, msgCheck, ret, sTable;
            ret = false;
            this.clientApi.setReq(req);
            msgCheck = this.clientApi.checkReqParamsOk();

            if (!_.isObject(sName)) {
                if (msgCheck !== '') {
                    action = {
                        req: req,
                        res: res,
                        actionName: sName,
                        actionDescription: sDesc,
                        tableName: '',
                        msgError: "ERROR: " + sDesc + " \n",
                        msgSuccess: "SUCCESS: " + sDesc + " \n"
                    };
                    this.actionBegin(action);
                    this.actionEnd(action, msgCheck, null, null);
                } else {
                    sTable = this.clientApi.getTableName();
                    ret = {
                        req: req,
                        res: res,
                        actionName: sName,
                        actionDescription: sDesc,
                        tableName: sTable,
                        msgError: "ERROR: " + sDesc + " " + sTable + " \n",
                        msgSuccess: "SUCCESS: " + sDesc + " " + sTable + " \n"
                    };
                }
            } else {
                sTable = sName.tableName;
                ret = {
                    req: req,
                    res: res,
                    actionName: sName.name,
                    actionDescription: sDesc,
                    tableName: sTable,
                    msgError: "ERROR: " + sDesc + " " + sTable + " \n",
                    msgSuccess: "SUCCESS: " + sDesc + " " + sTable + " \n"
                };
            }
            return ret;
        };

        CrudApi.prototype.tryAction = function (req, res, actionName, actionDesc, fn) {
            var action, args, actionN;
            action = this.createAction(req, res, actionName, actionDesc);

            if (action) {
                if (!this.checkAuthorization(req, res, action)) {
                    return;
                }
            }

            if (action && fn) {
                if (_.isObject(actionName)) {
                    actionN = actionName.name;
                } else {
                    actionN = actionName;
                }

                if (actionN === 'create' || actionN === 'update') {
                    fn((function (_this) {
                        return function (result) {
                            var args;
                            args = result;
                            _this.actionProcess(action, args);
                        };
                    })(this));
                } else {
                    args = fn();
                    this.actionProcess(action, args);
                }

            }
        };

        CrudApi.prototype.actionProcess = function (action, args) {
            var ModelClazz, callback, fn;
            if (args == null) {
                args = [];
            }
            this.actionBegin(action);
            ModelClazz = this.dbProvider[action.tableName];

            if (!ModelClazz) {
                this.actionEnd(action, "Model Class " + action.tableName + " does not exist", null, null);
            } else {
                fn = this.crudOperation[action.actionName];

                callback = (function (_this) {
                    return function (err, docs, total_count, sum_doc) {
                        var total;
                        if (total_count != null) {
                            total = total_count;
                        } else {
                            if (_.isNull(docs || _.isEmpty(docs))) {
                                total = 0;
                            } else if (_.isArray(docs)) {
                                total = docs.length;
                            } else if (_.isObject(docs)) {
                                total = 1;
                            }
                        }
                        _this.actionEnd(action, err, docs, total, sum_doc || null);
                    };
                })(this);
                args.unshift(action.siteId);
                args.unshift(ModelClazz);
                args.push(callback);
                fn.apply(this, args);
            }
        };

        CrudApi.prototype.actionBegin = function (action) {
            Utils.logInfo("BEGIN: " + action.actionDescription + " " + action.tableName);
            console.log("BEGIN: " + action.actionDescription + " " + action.tableName);
        };

        CrudApi.prototype.actionEnd = function (action, err, docs, total, sum_doc) {

            var crud_notification, ret;
            if (err) {
                Utils.logError(action.msgError);
                Utils.logError(err);
            } else {
                Utils.logInfo(action.msgSuccess);
            }

            if (this.clientApi.getMutilQuery()) { // req.query.mg
                console.log('getMutil', this.clientApi.getMutilQuery());
                mutilQueryClientRequest = JSON.parse(this.clientApi.getMutilQuery());
                mutilQueryData[0].count += 1;
                mutilQueryData[0].data[action.tableName] = {
                    data: docs || {},
                    success: !err,
                    total: total,
                    message: err,
                    groupSummaryData: [sum_doc]
                };
                if (mutilQueryData[0].count === mutilQueryClientRequest.length) {
                    action.res.contentType('application/json');
                    action.res.send(mutilQueryData);
                    mutilQueryData = [
                        {
                            count: 0,
                            data: {}
                        }
                    ];
                }
            } else {
                ret = {
                    data: docs || {},
                    success: !err,
                    total: total,
                    message: err,
                    groupSummaryData: [sum_doc]
                };
                action.res.contentType('application/json');
                action.res.send(ret);
            }


            /*
             Emit CRUD operation's result to Socket.io
             */
            /*if (!err) {
             crud_notification = {
             action: action.actionName,
             table: action.tableName,
             data: docs || {}
             };
             this.emit('crud', crud_notification);
             }*/
        };

        CrudApi.prototype.checkAuthorization = function (req, res, action) {
            var accessLevel, authorized, loginUser, msgCheck, siteId, userRole;
            loginUser = req.loginUser;


            msgCheck = '';
            authorized = false;
            userRole = loginUser.role;
            siteId = loginUser.site || '0';


            accessLevel = userCan[action.actionName][action.tableName];

            //console.log('------- checkAuthorization', 'accessLevel', accessLevel, loginUser);


            // check in token
            if (!accessLevel) {
                msgCheck = 'accessLevel is not defined';
            } else {
                if (accessLevel.bitMask <= userRole.bitMask) {
                    authorized = true;
                    msgCheck = 'authorized';
                } else {
                    msgCheck = 'unauthorized';
                }
            }
            if (!authorized) {
                Utils.logInfo("checkAuthorization for action: " + action.actionName + " on table: " + action.tableName);
                Utils.logError(("checkAuthorization for action: " + action.actionName + " on table: " + action.tableName + " is ") + msgCheck);
                res.send({
                    message: msgCheck
                }, 403);
            } else {
                Utils.logInfo("checkAuthorization for action: " + action.actionName + " on table: " + action.tableName);
                Utils.logInfo(("checkAuthorization for siteId: " + siteId + " is ") + msgCheck);
                action.siteId = siteId;
            }
            return authorized;
        };

        return CrudApi;

    })(EventEmitter);

    exports.CrudApi = CrudApi;

}).call(this);

//# sourceMappingURL=crud-api.map
