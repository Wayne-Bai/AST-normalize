// Generated by CoffeeScript 1.7.1
(function () {
    var Logger, Utils, cliColor, logger, _,
        __slice = [].slice;

    cliColor = require('cli-color');

    _ = require('underscore');

    Logger = require('./logger');

    logger = Logger.inject();

    Utils = (function () {
        function Utils() {
        }

        Utils._getDateTimeStr = function () {
            var date, dateStr, result, timeStr;
            result = '';
            date = new Date();
            dateStr = date.getFullYear() + '/' + (date.getMonth() + 1) + '/' + date.getDate();
            timeStr = date.toLocaleTimeString();
            result = dateStr + ' ' + timeStr;
            return result;
        };

        Utils.writeLog = function () {
            var messages, msg, msgs, _i, _len;
            msgs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            messages = '';
            for (_i = 0, _len = msgs.length; _i < _len; _i++) {
                msg = msgs[_i];
                messages += _.isString(msg) ? msg : JSON.stringify(msg, null, '\t') + ' ';
            }
            logger.info(this._getDateTimeStr() + ' - ' + messages);
        };

        Utils.logInfo = function () {
            var first, messages, msg, msgs, _i, _len;
            msgs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            messages = '';
            first = true;
            for (_i = 0, _len = msgs.length; _i < _len; _i++) {
                msg = msgs[_i];
                messages += _.isString(msg) ? msg : JSON.stringify(msg, null, '\t') + ' ';
            }
            logger.info(this._getDateTimeStr() + ' - ' + messages);
        };

        Utils.logDebug = function () {
            var messages, msg, msgs, _i, _len;
            msgs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            messages = '';
            for (_i = 0, _len = msgs.length; _i < _len; _i++) {
                msg = msgs[_i];
                messages += _.isString(msg) ? msg : JSON.stringify(msg, null, '\t') + ' ';
            }
            logger.warn(this._getDateTimeStr() + ' - ' + messages);
        };

        Utils.logWarn = function () {
            var messages, msg, msgs, _i, _len;
            msgs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            messages = '';
            for (_i = 0, _len = msgs.length; _i < _len; _i++) {
                msg = msgs[_i];
                messages += _.isString(msg) ? msg : JSON.stringify(msg, null, '\t') + ' ';
            }
            logger.warn(this._getDateTimeStr() + ' - ' + messages);
        };

        Utils.logError = function () {
            var messages, msg, msgs, _i, _len;
            msgs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            messages = '';
            for (_i = 0, _len = msgs.length; _i < _len; _i++) {
                msg = msgs[_i];
                messages += _.isString(msg) ? msg : JSON.stringify(msg, null, '\t') + ' ';
            }
            logger.error(this._getDateTimeStr() + ' - ' + messages);
        };

        Utils.writeWarnLog = function () {
            var messages, msg, msgs, _i, _len;
            msgs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            messages = '';
            for (_i = 0, _len = msgs.length; _i < _len; _i++) {
                msg = msgs[_i];
                messages += _.isString(msg) ? msg : JSON.stringify(msg, null, '\t') + ' ';
            }
            logger.warn(this._getDateTimeStr() + ' - ' + messages);
        };

        Utils.handleError = function (message, error, res) {
            this.writeLog(message);
            this.writeLog(error);
            res.send(error, 404);
        };

        Utils.handleResponse = function (message, docs, res) {
            res.contentType('application/json');
            if (docs instanceof Array) {
                if (docs.length === 1) {
                    res.send(docs[0]);
                } else {
                    res.send(docs);
                }
            } else {
                res.send(docs);
            }
            this.writeLog(message);
        };

        Utils.checkReqParams = function (req, res) {
            var collectionName, databaseName, result;
            result = true;
            databaseName = req.params.database;
            collectionName = req.params.collection;
            if (databaseName == null) {
                this.writeWarnLog('Database name Undefined');
                res.send('database name Undefined', 404);
                result = false;
            }
            if (collectionName == null) {
                this.writeWarnLog('Collection name Undefined');
                res.send('collection name Undefined', 404);
                result = false;
            }
            this.writeLog("Database name: " + databaseName);
            this.writeLog("Collection name: " + collectionName);
            return result;
        };

        Utils.checkReqParamsOk = function (req) {
            var collectionName, databaseName, result;
            result = '';
            databaseName = req.params.database;
            collectionName = req.params.collection;
            if (databaseName == null) {
                result('Database name Undefined');
            }
            if (collectionName == null) {
                result('Collection name Undefined');
            }
            return result;
        };

        Utils.getParam = function (req, parameter_name, defaultValue) {
            var parameter_value;
            if (defaultValue == null) {
                defaultValue = '';
            }
            parameter_value = defaultValue;
            if (req.body[parameter_name] != null) {
                parameter_value = req.body[parameter_name];
            } else if (req.query[parameter_name] != null) {
                parameter_value = req.query[parameter_name];
            }
            return parameter_value;
        };

        Utils.firstUpperCase = function (str) {
            return str.substr(0, 1).toUpperCase() + str.substr(1, str.length - 1);
        };

        Utils.convertTableName = function (str) {
            var arrs, item, res, _i, _len;
            arrs = str.split('_');
            res = '';
            for (_i = 0, _len = arrs.length; _i < _len; _i++) {
                item = arrs[_i];
                res += Utils.firstUpperCase(item);
            }
            return res;
        };

        Utils.getClientIp = function (req) {
            var forwardedIps, x_ip;
            x_ip = null;
            forwardedIps = req.headers['x-forwarded-for'];
            if (forwardedIps) {
                x_ip = forwardedIps.split(',')[0];
            }
            if (x_ip == null) {
                x_ip = req.connection.remoteAddress;
            }
            return x_ip;
        };

        return Utils;

    })();

    exports.Utils = Utils;

}).call(this);

//# sourceMappingURL=utils.map
