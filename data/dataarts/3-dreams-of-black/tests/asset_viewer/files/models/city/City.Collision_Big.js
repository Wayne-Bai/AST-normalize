/*
 * File generated with Blender 2.56 Exporter
 * https://github.com/mrdoob/three.js/tree/master/utils/exporters/blender/
 *
 * vertices: 188
 * faces: 326
 * normals: 0
 * uvs: 0
 * colors: 0
 * materials: 1
 * edges: 0
 *
 */

var model = {

    "version" : 2,

    "scale" : 1.000000,

    "materials": [	{
	"DbgColor" : 15658734,
	"DbgIndex" : 0,
	"DbgName" : "Collision",
	"colorAmbient" : [0.0, 0.0, 0.0],
	"colorDiffuse" : [0.9922000169754028, 0.18039999902248383, 1.0],
	"colorSpecular" : [0.8999999761581421, 0.8999999761581421, 0.8999999761581421],
	"shading" : "Lambert",
	"specularCoef" : 10,
	"transparency" : 1.0,
	"vertexColors" : false
	}],

    "vertices": [],

    "morphTargets": [],

    "normals": [],

    "colors": [],

    "uvs": [[]],

    "faces": [2,89,90,91,0,2,91,140,89,0,2,5,105,18,0,2,18,14,5,0,2,7,120,48,0,2,48,42,7,0,2,6,132,72,0,2,72,66,6,0,2,15,1,20,0,2,20,9,15,0,2,21,8,25,0,2,25,11,21,0,2,4,139,87,0,2,87,0,4,0,2,16,1,15,0,2,15,17,16,0,2,14,16,17,0,2,17,5,14,0,2,34,31,32,0,2,32,111,34,0,2,22,8,21,0,2,21,23,22,0,2,20,22,23,0,2,23,9,20,0,2,27,12,24,0,2,24,26,27,0,2,25,27,26,0,2,26,11,25,0,2,24,12,29,0,2,29,28,24,0,2,40,37,38,0,2,38,114,40,0,2,35,30,31,0,2,31,34,35,0,2,18,105,111,0,2,111,32,18,0,2,119,46,36,0,2,36,41,119,0,2,41,36,37,0,2,37,40,41,0,2,30,35,114,0,2,114,38,30,0,2,44,3,43,0,2,43,45,44,0,2,42,44,45,0,2,45,7,42,0,2,43,3,46,0,2,46,119,43,0,2,59,52,53,0,2,53,58,59,0,2,65,62,63,0,2,63,127,65,0,2,61,50,51,0,2,51,60,61,0,2,60,51,52,0,2,52,59,60,0,2,48,120,121,0,2,121,55,48,0,2,55,121,57,0,2,57,54,55,0,2,54,57,58,0,2,58,53,54,0,2,131,70,62,0,2,62,65,131,0,2,50,61,127,0,2,127,63,50,0,2,68,2,67,0,2,67,69,68,0,2,66,68,69,0,2,69,6,66,0,2,67,2,70,0,2,70,131,67,0,2,81,74,75,0,2,75,80,81,0,2,4,0,74,0,2,74,81,4,0,2,72,132,133,0,2,133,77,72,0,2,77,133,79,0,2,79,76,77,0,2,76,79,80,0,2,80,75,76,0,2,84,10,83,0,2,83,85,84,0,2,82,84,85,0,2,85,13,82,0,2,82,13,87,0,2,87,139,82,0,2,28,29,90,0,2,90,89,28,0,2,83,10,140,0,2,140,91,83,0,2,73,98,94,0,2,49,99,93,0,2,19,97,92,0,2,103,100,92,0,2,88,101,95,0,2,86,96,95,0,2,106,102,92,0,2,104,103,92,0,2,97,104,92,0,2,33,19,92,0,2,100,107,92,0,2,107,106,92,0,2,109,108,92,0,2,102,109,92,0,2,108,110,92,0,2,112,33,92,0,2,113,112,92,0,2,39,113,92,0,2,92,93,39,0,2,115,39,93,0,2,116,115,93,0,2,47,116,93,0,2,118,117,93,0,2,99,118,93,0,2,117,47,93,0,2,56,49,93,0,2,122,56,93,0,2,123,122,93,0,2,124,123,93,0,2,93,94,124,0,2,125,124,94,0,2,126,125,94,0,2,64,126,94,0,2,128,64,94,0,2,71,128,94,0,2,130,129,94,0,2,98,130,94,0,2,129,71,94,0,2,78,73,94,0,2,134,78,94,0,2,135,134,94,0,2,94,95,135,0,2,136,135,95,0,2,96,136,95,0,2,138,137,95,0,2,101,138,95,0,2,137,86,95,0,2,141,88,95,0,2,110,141,95,0,2,95,92,110,0,2,178,132,6,0,2,6,144,178,0,2,166,120,7,0,2,7,145,166,0,2,151,105,5,0,2,5,143,151,0,2,149,15,9,0,2,9,146,149,0,2,186,140,10,0,2,10,147,186,0,2,185,139,4,0,2,4,142,185,0,2,152,21,11,0,2,11,148,152,0,2,150,17,15,0,2,15,149,150,0,2,143,5,17,0,2,17,150,143,0,2,157,111,105,0,2,105,151,157,0,2,146,9,23,0,2,23,153,146,0,2,153,23,21,0,2,21,152,153,0,2,155,26,24,0,2,24,154,155,0,2,148,11,26,0,2,26,155,148,0,2,154,24,28,0,2,28,156,154,0,2,158,34,111,0,2,111,157,158,0,2,159,35,34,0,2,34,158,159,0,2,160,114,35,0,2,35,159,160,0,2,161,40,114,0,2,114,160,161,0,2,162,41,40,0,2,40,161,162,0,2,165,119,41,0,2,41,162,165,0,2,164,45,43,0,2,43,163,164,0,2,145,7,45,0,2,45,164,145,0,2,163,43,119,0,2,119,165,163,0,2,167,121,120,0,2,120,166,167,0,2,168,57,121,0,2,121,167,168,0,2,169,58,57,0,2,57,168,169,0,2,170,59,58,0,2,58,169,170,0,2,171,60,59,0,2,59,170,171,0,2,172,61,60,0,2,60,171,172,0,2,173,127,61,0,2,61,172,173,0,2,174,65,127,0,2,127,173,174,0,2,177,131,65,0,2,65,174,177,0,2,176,69,67,0,2,67,175,176,0,2,144,6,69,0,2,69,176,144,0,2,175,67,131,0,2,131,177,175,0,2,179,133,132,0,2,132,178,179,0,2,180,79,133,0,2,133,179,180,0,2,181,80,79,0,2,79,180,181,0,2,182,81,80,0,2,80,181,182,0,2,142,4,81,0,2,81,182,142,0,2,184,84,82,0,2,82,183,184,0,2,147,10,84,0,2,84,184,147,0,2,183,82,139,0,2,139,185,183,0,2,187,89,140,0,2,140,186,187,0,2,156,28,89,0,2,89,187,156,0,2,73,178,144,0,2,144,98,73,0,2,49,166,145,0,2,145,99,49,0,2,19,151,143,0,2,143,97,19,0,2,103,149,146,0,2,146,100,103,0,2,88,186,147,0,2,147,101,88,0,2,86,185,142,0,2,142,96,86,0,2,106,152,148,0,2,148,102,106,0,2,104,150,149,0,2,149,103,104,0,2,97,143,150,0,2,150,104,97,0,2,33,157,151,0,2,151,19,33,0,2,100,146,153,0,2,153,107,100,0,2,107,153,152,0,2,152,106,107,0,2,109,155,154,0,2,154,108,109,0,2,102,148,155,0,2,155,109,102,0,2,108,154,156,0,2,156,110,108,0,2,112,158,157,0,2,157,33,112,0,2,113,159,158,0,2,158,112,113,0,2,39,160,159,0,2,159,113,39,0,2,115,161,160,0,2,160,39,115,0,2,116,162,161,0,2,161,115,116,0,2,47,165,162,0,2,162,116,47,0,2,118,164,163,0,2,163,117,118,0,2,99,145,164,0,2,164,118,99,0,2,117,163,165,0,2,165,47,117,0,2,56,167,166,0,2,166,49,56,0,2,122,168,167,0,2,167,56,122,0,2,123,169,168,0,2,168,122,123,0,2,124,170,169,0,2,169,123,124,0,2,125,171,170,0,2,170,124,125,0,2,126,172,171,0,2,171,125,126,0,2,64,173,172,0,2,172,126,64,0,2,128,174,173,0,2,173,64,128,0,2,71,177,174,0,2,174,128,71,0,2,130,176,175,0,2,175,129,130,0,2,98,144,176,0,2,176,130,98,0,2,129,175,177,0,2,177,71,129,0,2,78,179,178,0,2,178,73,78,0,2,134,180,179,0,2,179,78,134,0,2,135,181,180,0,2,180,134,135,0,2,136,182,181,0,2,181,135,136,0,2,96,142,182,0,2,182,136,96,0,2,138,184,183,0,2,183,137,138,0,2,101,147,184,0,2,184,138,101,0,2,137,183,185,0,2,185,86,137,0,2,141,187,186,0,2,186,88,141,0,2,110,156,187,0,2,187,141,110,0],

    "edges" : []


};

var req = new XMLHttpRequest();
req.open('GET', 'City.Collision_Big.txt', false);
req.send(null);
if (req.status == 200 || req.status == 0) {
  var numVertices = 564;
  var numMorphTargets = model.morphTargets.length;
  var scale = 4.28720283496;
  model.vertices = new Float32Array(numVertices);
  for (var j = 0; j < numMorphTargets; ++j) {
    model.morphTargets[j].vertices = new Float32Array(numVertices);
  }

  for (var i = 0; i < numVertices; ++i) {
    var word = req.responseText.charCodeAt(i);
   word = (word >> 1) ^ (-(word & 1));
    model.vertices[i] = scale * word;

   var prev = word;
   for (var j = 0; j < numMorphTargets; ++j) {
     var offset = (j + 1) * numVertices;
     var delta = req.responseText.charCodeAt(offset + i);
     delta = (delta >> 1) ^ (-(delta & 1));
     prev += delta;
     model.morphTargets[j].vertices[i] = scale * prev;
   }
 }
}


postMessage( model );
close();
