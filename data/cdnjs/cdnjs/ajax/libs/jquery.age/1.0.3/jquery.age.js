// Generated by CoffeeScript 1.6.3
/*
jQuery Age
Copyright 2013 Kevin Sylvestre
*/


(function() {
  "use strict";
  var $, Age,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $ = jQuery;

  Age = (function() {
    Age.settings = {
      singular: 1,
      interval: 1000,
      suffixes: {
        past: "ago",
        future: "until"
      },
      formats: {
        now: "now",
        singular: {
          seconds: "a second",
          minutes: "a minute",
          hours: "a hour",
          days: "a day",
          weeks: "a week",
          months: "a month",
          years: "a year"
        },
        plural: {
          seconds: "{{amount}} seconds",
          minutes: "{{amount}} minutes",
          hours: "{{amount}} hours",
          days: "{{amount}} days",
          weeks: "{{amount}} weeks",
          months: "{{amount}} months",
          years: "{{amount}} years"
        }
      }
    };

    function Age($el, settings) {
      if (settings == null) {
        settings = {};
      }
      this.text = __bind(this.text, this);
      this.format = __bind(this.format, this);
      this.unit = __bind(this.unit, this);
      this.amount = __bind(this.amount, this);
      this.formatting = __bind(this.formatting, this);
      this.adjust = __bind(this.adjust, this);
      this.suffix = __bind(this.suffix, this);
      this.date = __bind(this.date, this);
      this.reformat = __bind(this.reformat, this);
      this.$el = $el;
      this.settings = $.extend({}, Age.settings, settings);
      this.reformat();
      setInterval(this.reformat, this.settings.interval);
    }

    Age.prototype.reformat = function() {
      return this.$el.html(this.text());
    };

    Age.prototype.date = function() {
      var attribute;
      attribute = this.$el.attr('datetime') || this.$el.attr('date') || this.$el.attr('time');
      return new Date(attribute);
    };

    Age.prototype.suffix = function(interval) {
      if (interval < 0) {
        return this.settings.suffixes.past;
      }
      if (interval > 0) {
        return this.settings.suffixes.future;
      }
    };

    Age.prototype.adjust = function(interval, scale) {
      return Math.round(Math.abs(interval / scale));
    };

    Age.prototype.formatting = function(interval) {
      return {
        seconds: this.adjust(interval, 1000),
        minutes: this.adjust(interval, 1000 * 60),
        hours: this.adjust(interval, 1000 * 60 * 60),
        days: this.adjust(interval, 1000 * 60 * 60 * 24),
        weeks: this.adjust(interval, 1000 * 60 * 60 * 24 * 7),
        months: this.adjust(interval, 1000 * 60 * 60 * 24 * 30),
        years: this.adjust(interval, 1000 * 60 * 60 * 24 * 30 * 365)
      };
    };

    Age.prototype.amount = function(formatting) {
      return formatting.years || formatting.months || formatting.weeks || formatting.days || formatting.hours || formatting.minutes || formatting.seconds || 0;
    };

    Age.prototype.unit = function(formatting) {
      return (formatting.years && "years") || (formatting.months && "months") || (formatting.weeks && "weeks") || (formatting.days && "days") || (formatting.hours && "hours") || (formatting.minutes && "minutes") || (formatting.seconds && "seconds") || void 0;
    };

    Age.prototype.format = function(amount, unit) {
      var _ref;
      return (_ref = this.settings.formats[amount === this.setting.singular ? 'singular' : 'plural']) != null ? _ref[unit] : void 0;
    };

    Age.prototype.text = function() {
      var amount, format, formatting, interval, suffix, unit;
      interval = this.date() - new Date;
      suffix = this.suffix(interval);
      formatting = this.formatting(interval);
      amount = this.amount(formatting);
      unit = this.unit(formatting);
      format = this.format(amount, unit);
      if (!format) {
        return this.settings.formats.now;
      }
      return "" + (format.replace('{{unit}}', unit).replace('{{amount}}', amount)) + " " + suffix;
    };

    return Age;

  })();

  $.fn.extend({
    age: function(options) {
      if (options == null) {
        options = {};
      }
      return this.each(function() {
        return new Age($(this), options);
      });
    }
  });

}).call(this);
