;(function (root) {
  "use strict";
  var GorillaScript = (function (realRequire) {
    function require(path) {
      var has = Object.prototype.hasOwnProperty;
      if (has.call(require._cache, path)) {
        return require._cache[path];
      } else if (has.call(require, path)) {
        var func = require[path];
        delete require[path];
        return require._cache[path] = func.call({});
      } else if (realRequire) {
        return realRequire(path);
      }
    }
    require._cache = {};
    require['./utils'] = function () {
      var module = { exports: this };
      var exports = this;
      (function (GLOBAL) {
        "use strict";
        var __create, __defer, __generatorToPromise, __in, __isArray, __owns,
            __promise, __slice, __strnum, __toArray, __toPromise, __typeof, _ref,
            Cache, fs, inspect, isPrimordial, mkdirp, path, setImmediate, WeakMap,
            writeFileWithMkdirp;
        __create = typeof Object.create === "function" ? Object.create
          : function (x) {
            function F() {}
            F.prototype = x;
            return new F();
          };
        __defer = (function () {
          function __defer() {
            var deferred, isError, value;
            isError = false;
            value = null;
            deferred = [];
            function complete(newIsError, newValue) {
              var funcs;
              if (deferred) {
                funcs = deferred;
                deferred = null;
                isError = newIsError;
                value = newValue;
                if (funcs.length) {
                  setImmediate(function () {
                    var _end, i;
                    for (i = 0, _end = funcs.length; i < _end; ++i) {
                      funcs[i]();
                    }
                  });
                }
              }
            }
            return {
              promise: {
                then: function (onFulfilled, onRejected, allowSync) {
                  var _ref, fulfill, promise, reject;
                  if (allowSync !== true) {
                    allowSync = void 0;
                  }
                  _ref = __defer();
                  promise = _ref.promise;
                  fulfill = _ref.fulfill;
                  reject = _ref.reject;
                  function step() {
                    var f, result;
                    try {
                      if (isError) {
                        f = onRejected;
                      } else {
                        f = onFulfilled;
                      }
                      if (typeof f === "function") {
                        result = f(value);
                        if (result && typeof result.then === "function") {
                          result.then(fulfill, reject, allowSync);
                        } else {
                          fulfill(result);
                        }
                      } else {
                        (isError ? reject : fulfill)(value);
                      }
                    } catch (e) {
                      reject(e);
                    }
                  }
                  if (deferred) {
                    deferred.push(step);
                  } else if (allowSync) {
                    step();
                  } else {
                    setImmediate(step);
                  }
                  return promise;
                },
                sync: function () {
                  var result, state;
                  state = 0;
                  result = 0;
                  this.then(
                    function (ret) {
                      state = 1;
                      return result = ret;
                    },
                    function (err) {
                      state = 2;
                      return result = err;
                    },
                    true
                  );
                  switch (state) {
                  case 0: throw Error("Promise did not execute synchronously");
                  case 1: return result;
                  case 2: throw result;
                  default: throw Error("Unknown state");
                  }
                }
              },
              fulfill: function (value) {
                complete(false, value);
              },
              reject: function (reason) {
                complete(true, reason);
              }
            };
          }
          __defer.fulfilled = function (value) {
            var d;
            d = __defer();
            d.fulfill(value);
            return d.promise;
          };
          __defer.rejected = function (reason) {
            var d;
            d = __defer();
            d.reject(reason);
            return d.promise;
          };
          return __defer;
        }());
        __generatorToPromise = function (generator, allowSync) {
          if (typeof generator !== "object" || generator === null) {
            throw TypeError("Expected generator to be an Object, got " + __typeof(generator));
          } else {
            if (typeof generator.send !== "function") {
              throw TypeError("Expected generator.send to be a Function, got " + __typeof(generator.send));
            }
            if (typeof generator["throw"] !== "function") {
              throw TypeError("Expected generator.throw to be a Function, got " + __typeof(generator["throw"]));
            }
          }
          if (allowSync == null) {
            allowSync = false;
          } else if (typeof allowSync !== "boolean") {
            throw TypeError("Expected allowSync to be a Boolean, got " + __typeof(allowSync));
          }
          function continuer(verb, arg) {
            var item;
            try {
              item = generator[verb](arg);
            } catch (e) {
              return __defer.rejected(e);
            }
            if (item.done) {
              return __defer.fulfilled(item.value);
            } else {
              return item.value.then(callback, errback, allowSync);
            }
          }
          function callback(value) {
            return continuer("send", value);
          }
          function errback(value) {
            return continuer("throw", value);
          }
          return callback(void 0);
        };
        __in = typeof Array.prototype.indexOf === "function"
          ? (function () {
            var indexOf;
            indexOf = Array.prototype.indexOf;
            return function (child, parent) {
              return indexOf.call(parent, child) !== -1;
            };
          }())
          : function (child, parent) {
            var i, len;
            len = +parent.length;
            i = -1;
            while (++i < len) {
              if (child === parent[i] && i in parent) {
                return true;
              }
            }
            return false;
          };
        __isArray = typeof Array.isArray === "function" ? Array.isArray
          : (function () {
            var _toString;
            _toString = Object.prototype.toString;
            return function (x) {
              return _toString.call(x) === "[object Array]";
            };
          }());
        __owns = Object.prototype.hasOwnProperty;
        __promise = function (value, allowSync) {
          var factory;
          if (allowSync == null) {
            allowSync = false;
          } else if (typeof allowSync !== "boolean") {
            throw TypeError("Expected allowSync to be a Boolean, got " + __typeof(allowSync));
          }
          if (typeof value === "function") {
            factory = function () {
              return __generatorToPromise(value.apply(this, arguments));
            };
            factory.sync = function () {
              return __generatorToPromise(
                value.apply(this, arguments),
                true
              ).sync();
            };
            return factory;
          } else {
            return __generatorToPromise(value, allowSync);
          }
        };
        __slice = Array.prototype.slice;
        __strnum = function (strnum) {
          var type;
          type = typeof strnum;
          if (type === "string") {
            return strnum;
          } else if (type === "number") {
            return String(strnum);
          } else {
            throw TypeError("Expected a string or number, got " + __typeof(strnum));
          }
        };
        __toArray = function (x) {
          if (x == null) {
            throw TypeError("Expected an object, got " + __typeof(x));
          } else if (__isArray(x)) {
            return x;
          } else if (typeof x === "string") {
            return x.split("");
          } else if (typeof x.length === "number") {
            return __slice.call(x);
          } else {
            throw TypeError("Expected an object with a length property, got " + __typeof(x));
          }
        };
        __toPromise = function (func, context, args) {
          var d;
          if (typeof func !== "function") {
            throw TypeError("Expected func to be a Function, got " + __typeof(func));
          }
          d = __defer();
          func.apply(context, __toArray(args).concat([
            function (err, value) {
              if (err != null) {
                d.reject(err);
              } else {
                d.fulfill(value);
              }
            }
          ]));
          return d.promise;
        };
        __typeof = (function () {
          var _toString;
          _toString = Object.prototype.toString;
          return function (o) {
            if (o === void 0) {
              return "Undefined";
            } else if (o === null) {
              return "Null";
            } else {
              return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
            }
          };
        }());
        setImmediate = typeof GLOBAL.setImmediate === "function" ? GLOBAL.setImmediate
          : typeof process !== "undefined" && typeof process.nextTick === "function"
          ? (function () {
            var nextTick;
            nextTick = process.nextTick;
            return function (func) {
              var args;
              if (typeof func !== "function") {
                throw TypeError("Expected func to be a Function, got " + __typeof(func));
              }
              args = __slice.call(arguments, 1);
              if (args.length) {
                return nextTick(function () {
                  func.apply(void 0, __toArray(args));
                });
              } else {
                return nextTick(func);
              }
            };
          }())
          : function (func) {
            var args;
            if (typeof func !== "function") {
              throw TypeError("Expected func to be a Function, got " + __typeof(func));
            }
            args = __slice.call(arguments, 1);
            if (args.length) {
              return setTimeout(
                function () {
                  func.apply(void 0, __toArray(args));
                },
                0
              );
            } else {
              return setTimeout(func, 0);
            }
          };
        WeakMap = typeof GLOBAL.WeakMap === "function" ? GLOBAL.WeakMap
          : (WeakMap = (function () {
            var _WeakMap_prototype, defProp, isExtensible;
            function WeakMap() {
              var _this;
              _this = this instanceof WeakMap ? this : __create(_WeakMap_prototype);
              _this._keys = [];
              _this._values = [];
              _this._chilly = [];
              _this._uid = createUid();
              return _this;
            }
            _WeakMap_prototype = WeakMap.prototype;
            WeakMap.displayName = "WeakMap";
            function uidRand() {
              return Math.random().toString(36).slice(2);
            }
            function createUid() {
              return __strnum(uidRand()) + "-" + __strnum(new Date().getTime()) + "-" + __strnum(uidRand()) + "-" + __strnum(uidRand());
            }
            isExtensible = Object.isExtensible || function () {
              return true;
            };
            function check(key) {
              var chilly, uid;
              uid = this._uid;
              if (__owns.call(key, uid)) {
                chilly = this._chilly;
                if (chilly.indexOf(key) === -1) {
                  chilly.push(key);
                  this._keys.push(key);
                  this._values.push(key[uid]);
                }
              }
            }
            _WeakMap_prototype.get = function (key) {
              var _ref, index;
              if (Object(key) !== key) {
                throw TypeError("Invalid value used as weak map key");
              }
              if (isExtensible(key)) {
                if (__owns.call(key, _ref = this._uid)) {
                  return key[_ref];
                }
              } else {
                check.call(this, key);
                index = this._keys.indexOf(key);
                if (index === -1) {
                  return;
                } else {
                  return this._values[index];
                }
              }
            };
            _WeakMap_prototype.has = function (key) {
              if (Object(key) !== key) {
                throw TypeError("Invalid value used as weak map key");
              }
              if (isExtensible(key)) {
                return __owns.call(key, this._uid);
              } else {
                check.call(this, key);
                return this._keys.indexOf(key) !== -1;
              }
            };
            if (typeof Object.defineProperty === "function") {
              defProp = Object.defineProperty;
            } else {
              defProp = function (o, k, d) {
                o[k] = d.value;
              };
            }
            _WeakMap_prototype.set = function (key, value) {
              var index, keys;
              if (Object(key) !== key) {
                throw TypeError("Invalid value used as weak map key");
              }
              if (isExtensible(key)) {
                defProp(key, this._uid, { configurable: true, writable: true, enumerable: false, value: value });
              } else {
                check.call(this, key);
                keys = this._keys;
                index = keys.indexOf(key);
                if (index === -1) {
                  index = keys.length;
                  keys[index] = key;
                }
                this._values[index] = value;
              }
            };
            _WeakMap_prototype["delete"] = function (key) {
              var index, keys;
              if (Object(key) !== key) {
                throw TypeError("Invalid value used as weak map key");
              }
              if (isExtensible(key)) {
                delete key[this._uid];
              } else {
                check.call(this, key);
                keys = this._keys;
                index = keys.indexOf(key);
                if (index !== -1) {
                  keys.splice(index, 1);
                  this._values.splice(index, 1);
                }
              }
            };
            return WeakMap;
          }()));
        if ((_ref = require("util")) != null) {
          inspect = _ref.inspect;
        }
        path = require("path");
        fs = require("fs");
        function stringRepeat(text, count) {
          if (count < 1) {
            return "";
          } else if (count === 1) {
            return text;
          } else if (count & 1) {
            return "" + text + stringRepeat(text, count - 1);
          } else {
            return stringRepeat("" + text + text, count / 2);
          }
        }
        function padLeft(text, len, padding) {
          return "" + stringRepeat(padding, len - text.length) + text;
        }
        function padRight(text, len, padding) {
          return "" + text + stringRepeat(padding, len - text.length);
        }
        Cache = (function () {
          var _Cache_prototype;
          function Cache() {
            var _this;
            _this = this instanceof Cache ? this : __create(_Cache_prototype);
            _this.weakmap = WeakMap();
            return _this;
          }
          _Cache_prototype = Cache.prototype;
          Cache.displayName = "Cache";
          _Cache_prototype.get = function (key) {
            return this.weakmap.get(key);
          };
          _Cache_prototype.getOrAdd = function (key, factory) {
            var value, weakmap;
            weakmap = this.weakmap;
            value = weakmap.get(key);
            if (value === void 0) {
              value = factory(key);
              weakmap.set(key, value);
            }
            return value;
          };
          return Cache;
        }());
        function quote(value) {
          if (inspect) {
            return inspect(value);
          } else if (value.indexOf("'") === -1) {
            return "'" + JSON.stringify(value).slice(1, -1) + "'";
          } else {
            return JSON.stringify(value);
          }
        }
        function unique(items) {
          var _arr, _i, _len, item, result;
          result = [];
          for (_arr = __toArray(items), _i = 0, _len = _arr.length; _i < _len; ++_i) {
            item = _arr[_i];
            if (!__in(item, result)) {
              result.push(item);
            }
          }
          return result;
        }
        function findPackageJson(dir) {
          var filepath, parent;
          filepath = path.join(dir, "package.json");
          if (fs.existsSync(filepath)) {
            return filepath;
          } else {
            parent = path.normalize(path.join(dir, ".."));
            if (parent !== dir) {
              return findPackageJson(parent);
            }
          }
        }
        function getPackageVersion(filename) {
          var packageJsonFilename, version;
          if (typeof filename !== "string" || !fs || !path) {
            return "";
          }
          try {
            packageJsonFilename = findPackageJson(path.dirname(filename));
          } catch (e) {}
          if (!packageJsonFilename) {
            return "";
          }
          try {
            version = JSON.parse(fs.readFileSync(packageJsonFilename)).version;
          } catch (e) {}
          if (typeof version === "string") {
            return version;
          } else {
            return "";
          }
        }
        isPrimordial = (function () {
          var PRIMORDIAL_GLOBALS;
          PRIMORDIAL_GLOBALS = {
            Object: true,
            String: true,
            Number: true,
            Boolean: true,
            Function: true,
            Array: true,
            Math: true,
            JSON: true,
            Date: true,
            RegExp: true,
            Error: true,
            RangeError: true,
            ReferenceError: true,
            SyntaxError: true,
            TypeError: true,
            URIError: true,
            escape: true,
            unescape: true,
            parseInt: true,
            parseFloat: true,
            isNaN: true,
            isFinite: true,
            decodeURI: true,
            decodeURIComponent: true,
            encodeURI: true,
            encodeURIComponent: true
          };
          return function (name) {
            return __owns.call(PRIMORDIAL_GLOBALS, name);
          };
        }());
        function fsExistsPromise(path) {
          var defer;
          defer = __defer();
          fs.exists(path, defer.fulfill);
          return defer.promise;
        }
        mkdirp = __promise(function (dirpath, mode, sync) {
          var _arr, _e, _i, _len, _send, _state, _step, _throw, acc, current, e,
              exists, part;
          _state = 0;
          function _close() {
            _state = 14;
          }
          function _step(_received) {
            while (true) {
              switch (_state) {
              case 0:
                if (mode == null) {
                  mode = 511 & ~+process.umask();
                }
                if (dirpath.charAt(0) === "/") {
                  acc = "/";
                } else {
                  acc = "";
                }
                _arr = __toArray(dirpath.split(/[\/\\]/g));
                _i = 0;
                _len = _arr.length;
                ++_state;
              case 1:
                _state = _i < _len ? 2 : 13;
                break;
              case 2:
                part = _arr[_i];
                current = path.resolve(path.join(acc, part));
                _state = sync ? 3 : 4;
                break;
              case 3:
                exists = fs.existsSync(current);
                _state = 6;
                break;
              case 4:
                ++_state;
                return { done: false, value: fsExistsPromise(current) };
              case 5:
                exists = _received;
                ++_state;
              case 6:
                _state = !exists ? 7 : 11;
                break;
              case 7:
                _state = sync ? 8 : 9;
                break;
              case 8:
                fs.mkdirSync(current, mode);
                _state = 11;
                break;
              case 9:
                _state = 11;
                return {
                  done: false,
                  value: __toPromise(fs.mkdir, fs, [current, mode])
                };
              case 10: throw Error("Unable to create directory '" + current + "' (Error code: " + e.code + ")");
              case 11:
                acc = current;
                ++_state;
              case 12:
                ++_i;
                _state = 1;
                break;
              case 13:
                ++_state;
              case 14:
                return { done: true, value: void 0 };
              default: throw Error("Unknown state: " + _state);
              }
            }
          }
          function _throw(_e) {
            if (_state >= 7 && _state <= 9) {
              e = _e;
              _state = 10;
            } else {
              _close();
              throw _e;
            }
          }
          function _send(_received) {
            while (true) {
              try {
                return _step(_received);
              } catch (_e) {
                _throw(_e);
              }
            }
          }
          return {
            close: _close,
            iterator: function () {
              return this;
            },
            next: function () {
              return _send(void 0);
            },
            send: _send,
            "throw": function (_e) {
              _throw(_e);
              return _send(void 0);
            }
          };
        });
        function mkdirpSync(dirpath, mode) {
          return mkdirp.sync(dirpath, mode, true);
        }
        writeFileWithMkdirp = __promise(function (filepath, text, encoding, sync) {
          var _e, _send, _state, _step, _throw;
          _state = 0;
          function _close() {
            _state = 4;
          }
          function _step(_received) {
            while (true) {
              switch (_state) {
              case 0:
                _state = sync ? 1 : 2;
                break;
              case 1:
                mkdirpSync(path.dirname(filepath));
                fs.writeFileSync(filepath, text, encoding);
                _state = 4;
                break;
              case 2:
                ++_state;
                return { done: false, value: mkdirp(path.dirname(filepath)) };
              case 3:
                ++_state;
                return {
                  done: false,
                  value: __toPromise(fs.writeFile, fs, [filepath, text, encoding])
                };
              case 4:
                return { done: true, value: void 0 };
              default: throw Error("Unknown state: " + _state);
              }
            }
          }
          function _throw(_e) {
            _close();
            throw _e;
          }
          function _send(_received) {
            try {
              return _step(_received);
            } catch (_e) {
              _throw(_e);
            }
          }
          return {
            close: _close,
            iterator: function () {
              return this;
            },
            next: function () {
              return _send(void 0);
            },
            send: _send,
            "throw": function (_e) {
              _throw(_e);
              return _send(void 0);
            }
          };
        });
        function writeFileWithMkdirpSync(filepath, text, encoding) {
          return writeFileWithMkdirp.sync(filepath, text, encoding, true);
        }
        exports.stringRepeat = stringRepeat;
        exports.padLeft = padLeft;
        exports.padRight = padRight;
        exports.Cache = Cache;
        exports.quote = quote;
        exports.unique = unique;
        exports.getPackageVersion = getPackageVersion;
        exports.isPrimordial = isPrimordial;
        exports.mkdirp = mkdirp;
        exports.mkdirpSync = mkdirpSync;
        exports.writeFileWithMkdirp = writeFileWithMkdirp;
        exports.writeFileWithMkdirpSync = writeFileWithMkdirpSync;
      }.call(this, typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : this));
      
      return module.exports;
    };
    require['./jsutils'] = function () {
      var module = { exports: this };
      var exports = this;
      (function () {
        "use strict";
        var __bind, __create, __in, __isArray, __owns, __slice, __toArray, __typeof,
            isAcceptableIdent, padLeft, toJSSource;
        __bind = function (parent, child) {
          var func;
          if (parent == null) {
            throw TypeError("Expected parent to be an object, got " + __typeof(parent));
          }
          func = parent[child];
          if (typeof func !== "function") {
            throw Error("Trying to bind child '" + String(child) + "' which is not a function");
          }
          return function () {
            return func.apply(parent, arguments);
          };
        };
        __create = typeof Object.create === "function" ? Object.create
          : function (x) {
            function F() {}
            F.prototype = x;
            return new F();
          };
        __in = typeof Array.prototype.indexOf === "function"
          ? (function () {
            var indexOf;
            indexOf = Array.prototype.indexOf;
            return function (child, parent) {
              return indexOf.call(parent, child) !== -1;
            };
          }())
          : function (child, parent) {
            var i, len;
            len = +parent.length;
            i = -1;
            while (++i < len) {
              if (child === parent[i] && i in parent) {
                return true;
              }
            }
            return false;
          };
        __isArray = typeof Array.isArray === "function" ? Array.isArray
          : (function () {
            var _toString;
            _toString = Object.prototype.toString;
            return function (x) {
              return _toString.call(x) === "[object Array]";
            };
          }());
        __owns = Object.prototype.hasOwnProperty;
        __slice = Array.prototype.slice;
        __toArray = function (x) {
          if (x == null) {
            throw TypeError("Expected an object, got " + __typeof(x));
          } else if (__isArray(x)) {
            return x;
          } else if (typeof x === "string") {
            return x.split("");
          } else if (typeof x.length === "number") {
            return __slice.call(x);
          } else {
            throw TypeError("Expected an object with a length property, got " + __typeof(x));
          }
        };
        __typeof = (function () {
          var _toString;
          _toString = Object.prototype.toString;
          return function (o) {
            if (o === void 0) {
              return "Undefined";
            } else if (o === null) {
              return "Null";
            } else {
              return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
            }
          };
        }());
        padLeft = require("./utils").padLeft;
        isAcceptableIdent = (function () {
          var IDENTIFIER_REGEX, IDENTIFIER_UNICODE_REGEX, RESERVED;
          IDENTIFIER_REGEX = /^[a-zA-Z_\$][a-zA-Z_\$0-9]*$/;
          IDENTIFIER_UNICODE_REGEX = /^[a-zA-Z_\$\u00a0-\uffff][a-zA-Z_\$0-9\u00a0-\uffff]*$/;
          RESERVED = [
            "arguments",
            "break",
            "case",
            "catch",
            "class",
            "const",
            "continue",
            "debugger",
            "default",
            "delete",
            "do",
            "else",
            "enum",
            "export",
            "extends",
            "eval",
            "false",
            "finally",
            "for",
            "function",
            "if",
            "implements",
            "import",
            "in",
            "Infinity",
            "instanceof",
            "interface",
            "let",
            "NaN",
            "new",
            "null",
            "package",
            "private",
            "protected",
            "public",
            "return",
            "static",
            "super",
            "switch",
            "this",
            "throw",
            "true",
            "try",
            "typeof",
            "undefined",
            "var",
            "void",
            "while",
            "with",
            "yield"
          ];
          return function (name, allowUnicode) {
            var regex;
            if (allowUnicode == null) {
              allowUnicode = false;
            }
            if (allowUnicode) {
              regex = IDENTIFIER_UNICODE_REGEX;
            } else {
              regex = IDENTIFIER_REGEX;
            }
            return regex.test(name) && !__in(name, RESERVED);
          };
        }());
        toJSSource = (function () {
          var LARGE_CHARACTER_SIZE, LARGE_CONTAINER_SIZE, types;
          function indent(sb, amount, space) {
            var i;
            if (space == null) {
              space = "  ";
            }
            for (i = 0; i < amount; ++i) {
              sb(space);
            }
          }
          function moreIndent(options) {
            var _o;
            _o = __create(options);
            _o.indent = +options.indent + 1;
            return _o;
          }
          LARGE_CHARACTER_SIZE = 50;
          LARGE_CONTAINER_SIZE = 7;
          function isLarge(value) {
            var i, k, v;
            if (value == null) {
              return false;
            } else if (value instanceof RegExp) {
              return isLarge(value.source);
            } else if (value instanceof Date) {
              return false;
            } else if (__isArray(value)) {
              switch (value.length) {
              case 0: return false;
              case 1: return isLarge(value[0]);
              default: return true;
              }
            } else {
              switch (typeof value) {
              case "string": return value.length >= LARGE_CHARACTER_SIZE;
              case "number":
              case "boolean": return false;
              case "object":
                i = -1;
                for (k in value) {
                  if (__owns.call(value, k)) {
                    ++i;
                    v = value[k];
                    if (i >= 1 || isLarge(k) || isLarge(v)) {
                      return true;
                    }
                  }
                }
                return false;
              default: return true;
              }
            }
          }
          types = {
            "null": function (_p, sb) {
              sb("null");
            },
            "undefined": function (_p, sb) {
              sb("void 0");
            },
            number: function (value, sb) {
              sb(value === 0 ? (1 / value < 0 ? "-0" : "0")
                : isFinite(value) ? String(value)
                : value !== value ? "0/0"
                : value > 0 ? "1/0"
                : "-1/0");
            },
            regexp: function (regex, sb) {
              sb("/");
              sb(regex.source.replace(/(\\\\)*\\?\//g, "$1\\/") || "(?:)");
              sb("/");
              if (regex.global) {
                sb("g");
              }
              if (regex.ignoreCase) {
                sb("i");
              }
              if (regex.multiline) {
                sb("m");
              }
            },
            string: (function () {
              var DOUBLE_QUOTE_REGEX, SINGLE_QUOTE_REGEX;
              function escapeHelper(m) {
                switch (m) {
                case "\b": return "\\b";
                case "\t": return "\\t";
                case "\n":
                  return "\\n";
                case "\f": return "\\f";
                case "\r": return "\\r";
                case "\n":
                  return "\\n";
                case '"': return '\\"';
                case "'": return "\\'";
                case "\\": return "\\\\";
                default:
                  return "\\u" + padLeft(m.charCodeAt(0).toString(16), 4, "0");
                }
              }
              DOUBLE_QUOTE_REGEX = /[\u0000-\u001f"\\\u0080-\uffff]/g;
              SINGLE_QUOTE_REGEX = /[\u0000-\u001f'\\\u0080-\uffff]/g;
              function doubleQuote(value) {
                return '"' + value.replace(DOUBLE_QUOTE_REGEX, escapeHelper) + '"';
              }
              function singleQuote(value) {
                return "'" + value.replace(SINGLE_QUOTE_REGEX, escapeHelper) + "'";
              }
              function shorter(x, y) {
                if (x.length <= y.length) {
                  return x;
                } else {
                  return y;
                }
              }
              return function (string, sb) {
                return sb(string.indexOf('"') === -1 ? doubleQuote(string)
                  : string.indexOf("'") === -1 ? singleQuote(string)
                  : shorter(doubleQuote(string), singleQuote(string)));
              };
            }()),
            boolean: function (bool, sb) {
              return sb(bool ? "true" : "false");
            },
            date: function (date, sb) {
              sb("new Date(");
              sb(String(date.getTime()));
              return sb(")");
            },
            array: function (array, sb, options) {
              var _arr, _len, childOptions, hasIndent, i, item, len;
              hasIndent = "indent" in options;
              if (array.length === 0) {
                return sb("[]");
              } else if (hasIndent && array.length > 1 && (array.length >= LARGE_CONTAINER_SIZE || (function () {
                var _arr, _i, _len, _some, item;
                _some = false;
                for (_arr = __toArray(array), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                  item = _arr[_i];
                  if (isLarge(item)) {
                    _some = true;
                    break;
                  }
                }
                return _some;
              }()))) {
                sb("[\n");
                childOptions = moreIndent(options);
                for (_arr = __toArray(array), i = 0, len = _arr.length; i < len; ++i) {
                  item = _arr[i];
                  indent(sb, childOptions.indent);
                  toJSSource(item, sb, childOptions);
                  if (i < len - 1) {
                    sb(",");
                  }
                  sb("\n");
                }
                indent(sb, options.indent);
                return sb("]");
              } else {
                sb("[");
                for (_arr = __toArray(array), i = 0, _len = _arr.length; i < _len; ++i) {
                  item = _arr[i];
                  if (i > 0) {
                    sb(",");
                    if (hasIndent) {
                      sb(" ");
                    }
                  }
                  toJSSource(item, sb, options);
                }
                return sb("]");
              }
            },
            object: (function () {
              function writeSafeKey(key, sb, options) {
                var num;
                if (isAcceptableIdent(key)) {
                  sb(key);
                } else {
                  num = Number(key);
                  if (num === num && String(num) === key) {
                    sb(key);
                  } else {
                    toJSSource(key, sb, options);
                  }
                }
              }
              return function (obj, sb, options) {
                var _arr, _len, _ref, childOptions, hasIndent, i, key, len, pairs,
                    value;
                _arr = [];
                for (key in obj) {
                  if (__owns.call(obj, key)) {
                    value = obj[key];
                    _arr.push({ key: key, value: value });
                  }
                }
                pairs = _arr;
                hasIndent = "indent" in options;
                if (pairs.length === 0) {
                  return sb("{}");
                } else if (hasIndent && pairs.length > 1 && (pairs.length >= LARGE_CONTAINER_SIZE || (function () {
                  var _i, _len, _ref, _some, key, value;
                  _some = false;
                  for (_i = 0, _len = pairs.length; _i < _len; ++_i) {
                    _ref = pairs[_i];
                    key = _ref.key;
                    value = _ref.value;
                    if (isLarge(key) || isLarge(value)) {
                      _some = true;
                      break;
                    }
                  }
                  return _some;
                }()))) {
                  sb("{\n");
                  childOptions = moreIndent(options);
                  for (i = 0, len = pairs.length; i < len; ++i) {
                    _ref = pairs[i];
                    key = _ref.key;
                    value = _ref.value;
                    indent(sb, childOptions.indent);
                    writeSafeKey(key, sb, childOptions);
                    sb(": ");
                    toJSSource(value, sb, childOptions);
                    if (i < len - 1) {
                      sb(",");
                    }
                    sb("\n");
                  }
                  indent(sb, options.indent);
                  return sb("}");
                } else {
                  sb("{");
                  for (i = 0, _len = pairs.length; i < _len; ++i) {
                    _ref = pairs[i];
                    key = _ref.key;
                    value = _ref.value;
                    if (i > 0) {
                      sb(",");
                      if (hasIndent) {
                        sb(" ");
                      }
                    }
                    writeSafeKey(key, sb, options);
                    sb(":");
                    if (hasIndent) {
                      sb(" ");
                    }
                    toJSSource(value, sb, options);
                  }
                  return sb("}");
                }
              };
            }())
          };
          return function (value, sb, options) {
            var _ref, arr, handler;
            if (sb == null) {
              sb = null;
            }
            if (options == null) {
              options = {};
            }
            if (sb == null) {
              arr = [];
              toJSSource(
                value,
                __bind(arr, "push"),
                options
              );
              return arr.join("");
            } else {
              if (value === null) {
                types["null"](value, sb, options);
              } else if (__isArray(value)) {
                types.array(value, sb, options);
              } else if (value instanceof RegExp) {
                types.regexp(value, sb, options);
              } else if (value instanceof Date) {
                types.date(value, sb, options);
              } else {
                if (__owns.call(types, _ref = typeof value)) {
                  handler = types[_ref];
                }
                if (typeof handler !== "function") {
                  throw Error("Cannot convert " + __typeof(value) + " to JS source");
                }
                handler(value, sb, options);
              }
              return;
            }
          };
        }());
        exports.toJSSource = toJSSource;
        exports.isAcceptableIdent = isAcceptableIdent;
      }.call(this));
      
      return module.exports;
    };
    require['./types'] = function () {
      var module = { exports: this };
      var exports = this;
      (function () {
        "use strict";
        var __cmp, __create, __isArray, __name, __owns, __slice, __throw, __toArray,
            __typeof, inspect, Type, util;
        __cmp = function (left, right) {
          var type;
          if (left === right) {
            return 0;
          } else {
            type = typeof left;
            if (type !== "number" && type !== "string") {
              throw TypeError("Cannot compare a non-number/string: " + type);
            } else if (type !== typeof right) {
              throw TypeError("Cannot compare elements of different types: " + type + " vs " + typeof right);
            } else if (left < right) {
              return -1;
            } else {
              return 1;
            }
          }
        };
        __create = typeof Object.create === "function" ? Object.create
          : function (x) {
            function F() {}
            F.prototype = x;
            return new F();
          };
        __isArray = typeof Array.isArray === "function" ? Array.isArray
          : (function () {
            var _toString;
            _toString = Object.prototype.toString;
            return function (x) {
              return _toString.call(x) === "[object Array]";
            };
          }());
        __name = function (func) {
          if (typeof func !== "function") {
            throw TypeError("Expected func to be a Function, got " + __typeof(func));
          }
          return func.displayName || func.name || "";
        };
        __owns = Object.prototype.hasOwnProperty;
        __slice = Array.prototype.slice;
        __throw = function (err) {
          throw err;
        };
        __toArray = function (x) {
          if (x == null) {
            throw TypeError("Expected an object, got " + __typeof(x));
          } else if (__isArray(x)) {
            return x;
          } else if (typeof x === "string") {
            return x.split("");
          } else if (typeof x.length === "number") {
            return __slice.call(x);
          } else {
            throw TypeError("Expected an object with a length property, got " + __typeof(x));
          }
        };
        __typeof = (function () {
          var _toString;
          _toString = Object.prototype.toString;
          return function (o) {
            if (o === void 0) {
              return "Undefined";
            } else if (o === null) {
              return "Null";
            } else {
              return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
            }
          };
        }());
        util = require("util");
        if (util != null) {
          inspect = util.inspect;
        }
        module.exports = Type = (function () {
          var _Type_prototype, any, AnyType, arrayBase, ComplementType, fromJSONTypes,
              functionBase, GenericType, getId, none, NoneType, ObjectType,
              SimpleType, UnionType;
          function Type() {
            var _this;
            _this = this instanceof Type ? this : __create(_Type_prototype);
            throw TypeError("Type should not be instantiated");
          }
          _Type_prototype = Type.prototype;
          Type.displayName = "Type";
          _Type_prototype.isSubsetOf = function () {
            throw Error("Not implemented: " + __name(this.constructor) + ".isSubsetOf()");
          };
          _Type_prototype.isSupersetOf = function (other) {
            return other.isSubsetOf(this);
          };
          _Type_prototype.overlaps = function () {
            throw Error("Not implemented: " + __name(this.constructor) + ".overlaps()");
          };
          _Type_prototype.compare = function () {
            throw Error("Not implemented: " + __name(this.constructor) + ".compare()");
          };
          _Type_prototype.equals = function () {
            throw Error("Not implemented: " + __name(this.constructor) + ".equals()");
          };
          _Type_prototype.union = function () {
            throw Error("Not implemented: " + __name(this.constructor) + ".union()");
          };
          _Type_prototype.intersect = function () {
            throw Error("Not implemented: " + __name(this.constructor) + ".intersect()");
          };
          _Type_prototype.complement = function () {
            var _ref;
            if ((_ref = this._complement) == null) {
              return this._complement = ComplementType(this);
            } else {
              return _ref;
            }
          };
          _Type_prototype.array = function () {
            var _ref;
            if ((_ref = this._array) == null) {
              return this._array = Type.generic(arrayBase, this);
            } else {
              return _ref;
            }
          };
          _Type_prototype["function"] = function () {
            var _ref, args;
            args = __slice.call(arguments);
            if ((_ref = this._function) == null) {
              return this._function = Type.generic.apply(Type, [functionBase, this].concat(__toArray(args)));
            } else {
              return _ref;
            }
          };
          function contains(alpha, bravo) {
            var _arr, _i, item;
            for (_arr = __toArray(alpha), _i = _arr.length; _i--; ) {
              item = _arr[_i];
              if (item.equals(bravo)) {
                return true;
              }
            }
            return false;
          }
          function union(alpha, bravo) {
            var a, alphaLen, b, bravoLen, cmp, i, j, result;
            if (alpha === bravo) {
              return alpha;
            }
            result = [];
            alphaLen = alpha.length;
            bravoLen = bravo.length;
            i = 0;
            j = 0;
            while (i < alphaLen && j < bravoLen) {
              a = alpha[i];
              b = bravo[j];
              cmp = a.compare(b);
              if (cmp === 0) {
                result.push(a);
                ++i;
                ++j;
              } else if (cmp < 0) {
                result.push(a);
                ++i;
              } else {
                result.push(b);
                ++j;
              }
            }
            for (; i < alphaLen; ++i) {
              result.push(alpha[i]);
            }
            for (; j < bravoLen; ++j) {
              result.push(bravo[j]);
            }
            switch (result.length) {
            case alphaLen: return alpha;
            case bravoLen: return bravo;
            default: return result;
            }
          }
          function intersect(alpha, bravo) {
            var a, alphaLen, b, bravoLen, cmp, i, j, result;
            if (alpha === bravo) {
              return alpha;
            }
            alphaLen = alpha.length;
            bravoLen = bravo.length;
            result = [];
            i = 0;
            j = 0;
            while (i < alphaLen && j < bravoLen) {
              a = alpha[i];
              b = bravo[j];
              cmp = a.compare(b);
              if (cmp === 0) {
                result.push(a);
                ++i;
                ++j;
              } else if (cmp < 0) {
                ++i;
              } else {
                ++j;
              }
            }
            switch (result.length) {
            case alphaLen: return alpha;
            case bravoLen: return bravo;
            default: return result;
            }
          }
          function relativeComplement(alpha, bravo) {
            var a, alphaLen, bravoLen, cmp, i, j, result;
            if (alpha === bravo) {
              return [];
            }
            result = [];
            alphaLen = alpha.length;
            if (alphaLen === 0) {
              return result;
            }
            bravoLen = bravo.length;
            if (bravoLen === 0) {
              return alpha;
            }
            i = 0;
            j = 0;
            while (i < alphaLen && j < bravoLen) {
              a = alpha[i];
              cmp = a.compare(bravo[j]);
              if (cmp === 0) {
                ++i;
                ++j;
              } else if (cmp < 0) {
                result.push(a);
                ++i;
              } else {
                ++j;
              }
            }
            for (; i < alphaLen; ++i) {
              result.push(alpha[i]);
            }
            if (result.length === alphaLen) {
              return alpha;
            } else {
              return result;
            }
          }
          function isSubsetOf(alpha, bravo) {
            var alphaLen, bravoLen, i, j;
            if (alpha === bravo) {
              return true;
            }
            alphaLen = alpha.length;
            if (alphaLen === 0) {
              return true;
            }
            bravoLen = bravo.length;
            if (alphaLen > bravoLen) {
              return false;
            } else {
              i = 0;
              j = 0;
              while (j < bravoLen) {
                if (alpha[i].equals(bravo[j])) {
                  ++i;
                  if (i >= alphaLen) {
                    return true;
                  }
                  ++j;
                } else {
                  ++j;
                }
              }
              return false;
            }
          }
          function overlaps(alpha, bravo) {
            var alphaLen, bravoLen, cmp, i, j;
            alphaLen = alpha.length;
            if (alpha === bravo && alphaLen > 0) {
              return true;
            }
            bravoLen = bravo.length;
            i = 0;
            j = 0;
            while (i < alphaLen && j < bravoLen) {
              cmp = alpha[i].compare(bravo[j]);
              if (cmp === 0) {
                return true;
              } else if (cmp < 0) {
                ++i;
              } else {
                ++j;
              }
            }
            return false;
          }
          function compare(alpha, bravo) {
            var _ref, i, len;
            if (alpha !== bravo) {
              len = alpha.length;
              if (_ref = __cmp(len, bravo.length)) {
                return _ref;
              }
              for (i = 0; i < len; ++i) {
                if (_ref = alpha[i].compare(bravo[i])) {
                  return _ref;
                }
              }
            }
            return 0;
          }
          function equals(alpha, bravo) {
            var i, len;
            if (alpha !== bravo) {
              len = alpha.length;
              if (len !== bravo.length) {
                return false;
              }
              for (i = 0; i < len; ++i) {
                if (!alpha[i].equals(bravo[i])) {
                  return false;
                }
              }
            }
            return true;
          }
          function typeComparer(a, b) {
            return a.compare(b);
          }
          function makeUnionType(types, needsSort) {
            switch (types.length) {
            case 0: return none;
            case 1: return types[0];
            default:
              if (needsSort) {
                types.sort(typeComparer);
              }
              return UnionType(types);
            }
          }
          fromJSONTypes = {};
          function fromJSON(x) {
            var type;
            if (typeof x === "string") {
              return fromJSON({ type: "simple", name: x });
            } else {
              type = x.type;
              if (typeof type !== "string") {
                throw TypeError("Unspecified type");
              } else if (!__owns.call(fromJSONTypes, type)) {
                throw TypeError("Unknown serialization type: " + type);
              } else {
                return fromJSONTypes[type](x);
              }
            }
          }
          Type.fromJSON = fromJSON;
          getId = (function () {
            var id;
            id = -1;
            return function () {
              ++id;
              return id;
            };
          }());
          SimpleType = (function (Type) {
            var _SimpleType_prototype, _Type_prototype2;
            function SimpleType(name) {
              var _this;
              _this = this instanceof SimpleType ? this : __create(_SimpleType_prototype);
              _this.name = name;
              _this.id = getId();
              return _this;
            }
            _Type_prototype2 = Type.prototype;
            _SimpleType_prototype = SimpleType.prototype = __create(_Type_prototype2);
            _SimpleType_prototype.constructor = SimpleType;
            SimpleType.displayName = "SimpleType";
            if (typeof Type.extended === "function") {
              Type.extended(SimpleType);
            }
            _SimpleType_prototype.toString = function () {
              return this.name;
            };
            _SimpleType_prototype.equals = function (other) {
              return this === other;
            };
            _SimpleType_prototype.compare = function (other) {
              if (this === other) {
                return 0;
              } else if (other instanceof SimpleType) {
                return __cmp(this.name, other.name) || __cmp(this.id, other.id);
              } else {
                return __cmp("SimpleType", other.constructor.displayName);
              }
            };
            _SimpleType_prototype.union = function (other) {
              if (other instanceof SimpleType) {
                if (this === other) {
                  return this;
                } else {
                  return makeUnionType(
                    [this, other],
                    true
                  );
                }
              } else {
                return other.union(this);
              }
            };
            _SimpleType_prototype.intersect = function (other) {
              if (other instanceof SimpleType) {
                if (this === other) {
                  return this;
                } else {
                  return none;
                }
              } else {
                return other.intersect(this);
              }
            };
            _SimpleType_prototype.isSubsetOf = function (other) {
              var _arr, _i, _some, type;
              if (other instanceof SimpleType) {
                return this === other;
              } else if (other instanceof UnionType) {
                _some = false;
                for (_arr = __toArray(other.types), _i = _arr.length; _i--; ) {
                  type = _arr[_i];
                  if (this === type) {
                    _some = true;
                    break;
                  }
                }
                return _some;
              } else if (other instanceof ComplementType) {
                return !this.isSubsetOf(other.untype);
              } else {
                return other === any;
              }
            };
            _SimpleType_prototype.overlaps = function (other) {
              if (other instanceof SimpleType) {
                return this === other;
              } else {
                return other.overlaps(this);
              }
            };
            _SimpleType_prototype.inspect = function () {
              var _this;
              _this = this;
              return (function () {
                var _else, k, v;
                _else = true;
                for (k in Type) {
                  if (__owns.call(Type, k)) {
                    _else = false;
                    v = Type[k];
                    if (v === _this) {
                      return "Type." + k;
                    }
                  }
                }
                return "Type.make(" + inspect(_this.name) + ")";
              }());
            };
            _SimpleType_prototype.toAst = function (ast, pos, ident) {
              var _this;
              _this = this;
              return (function () {
                var _else, k, v;
                _else = true;
                for (k in Type) {
                  if (__owns.call(Type, k)) {
                    _else = false;
                    v = Type[k];
                    if (v === _this) {
                      return ast.Access(pos, ident, ast.Const(pos, k));
                    }
                  }
                }
                throw Error("Cannot serialize custom type: " + String(_this));
              }());
            };
            _SimpleType_prototype.toJSON = function () {
              var _this;
              _this = this;
              return (function () {
                var _else, k, v;
                _else = true;
                for (k in Type) {
                  if (__owns.call(Type, k)) {
                    _else = false;
                    v = Type[k];
                    if (v === _this) {
                      return k;
                    }
                  }
                }
                throw Error("Cannot serialize custom type: " + String(_this));
              }());
            };
            fromJSONTypes.simple = function (_p) {
              var name;
              name = _p.name;
              return __owns.call(Type, name) && Type[name] || __throw(Error("Unknown type: " + String(name)));
            };
            return SimpleType;
          }(Type));
          Type.make = function (name) {
            return SimpleType(name);
          };
          GenericType = (function (Type) {
            var _GenericType_prototype, _Type_prototype2;
            function GenericType(base, args) {
              var _ref, _this;
              _this = this instanceof GenericType ? this : __create(_GenericType_prototype);
              _this.base = base;
              if (args.length === 0) {
                throw Error("Must provide at least one generic type argument");
              }
              _this.id = getId();
              _this.args = args.slice();
              if (_this.base === arrayBase && args.length === 1) {
                if ((_ref = args[0]._array) != null) {
                  return _ref;
                }
                args[0]._array = _this;
              } else if (_this.base === functionBase && args.length === 1) {
                if ((_ref = args[0]._function) != null) {
                  return _ref;
                }
                args[0]._function = _this;
              }
              return _this;
            }
            _Type_prototype2 = Type.prototype;
            _GenericType_prototype = GenericType.prototype = __create(_Type_prototype2);
            _GenericType_prototype.constructor = GenericType;
            GenericType.displayName = "GenericType";
            if (typeof Type.extended === "function") {
              Type.extended(GenericType);
            }
            function become(alpha, bravo) {
              if (alpha.id > bravo.id) {
                return become(bravo, alpha);
              }
              bravo.base = alpha.base;
              bravo.args = alpha.args;
              bravo.id = alpha.id;
            }
            _GenericType_prototype.toString = function () {
              var _arr, _len, _ref, arg, i, sb;
              if ((_ref = this._name) == null) {
                if (this.base === arrayBase && this.args.length === 1) {
                  if (this.args[0] === any) {
                    return this._name = "[]";
                  } else {
                    return this._name = "[" + String(this.args[0]) + "]";
                  }
                } else if (this.base === functionBase && this.args.length === 1) {
                  if (this.args[0] === any) {
                    return this._name = "->";
                  } else {
                    return this._name = "-> " + String(this.args[0]);
                  }
                } else {
                  sb = [];
                  sb.push(String(this.base));
                  sb.push("<");
                  for (_arr = __toArray(this.args), i = 0, _len = _arr.length; i < _len; ++i) {
                    arg = _arr[i];
                    if (i > 0) {
                      sb.push(",");
                      if (arg !== any && this.args[i - 1] !== any) {
                        sb.push(" ");
                      }
                    }
                    if (arg !== any) {
                      sb.push(String(arg));
                    }
                  }
                  sb.push(">");
                  return this._name = sb.join("");
                }
              } else {
                return _ref;
              }
            };
            _GenericType_prototype.equals = function (other) {
              if (other === this) {
                return true;
              } else if (other instanceof GenericType) {
                if (this.id === other.id) {
                  return true;
                } else if (this.base === other.base && equals(this.args, other.args)) {
                  become(this, other);
                  return true;
                } else {
                  return false;
                }
              } else {
                return false;
              }
            };
            _GenericType_prototype.compare = function (other) {
              var _ref, cmp;
              if (other === this) {
                return 0;
              } else if (other instanceof GenericType) {
                if (this.id === other.id) {
                  return 0;
                } else {
                  if (_ref = this.base.compare(other.base)) {
                    return _ref;
                  }
                  cmp = compare(this.args, other.args);
                  if (!cmp) {
                    become(this, other);
                  }
                  return cmp;
                }
              } else {
                return __cmp("GenericType", other.constructor.displayName);
              }
            };
            _GenericType_prototype.union = function (other) {
              if (other instanceof GenericType) {
                if (this.equals(other)) {
                  return this;
                } else if (this.isSubsetOf(other)) {
                  return other;
                } else if (other.isSubsetOf(this)) {
                  return this;
                } else {
                  return makeUnionType(
                    [this, other],
                    true
                  );
                }
              } else if (other instanceof SimpleType) {
                return makeUnionType(
                  [this, other],
                  true
                );
              } else {
                return other.union(this);
              }
            };
            _GenericType_prototype.intersect = function (other) {
              var arg, args, i, isOther, isThis, len, newArg, newArgs, otherArg,
                  otherArgs;
              if (other instanceof GenericType) {
                if (this.base !== other.base) {
                  return none;
                } else if (this.equals(other)) {
                  return this;
                } else {
                  args = this.args;
                  otherArgs = other.args;
                  len = args.length;
                  if (len !== otherArgs.length) {
                    return none;
                  } else {
                    isThis = true;
                    isOther = true;
                    newArgs = [];
                    for (i = 0; i < len; ++i) {
                      arg = args[i];
                      otherArg = otherArgs[i];
                      newArg = args[i].intersect(otherArgs[i]);
                      if (isThis && arg !== newArg) {
                        isThis = false;
                      }
                      if (isOther && otherArg !== newArg) {
                        isOther = false;
                      }
                      newArgs.push(newArg);
                    }
                    if (isThis) {
                      return this;
                    } else if (isOther) {
                      return other;
                    } else {
                      return GenericType(this.base, newArgs);
                    }
                  }
                }
              } else if (other instanceof SimpleType) {
                return none;
              } else {
                return other.intersect(this);
              }
            };
            _GenericType_prototype.isSubsetOf = function (other) {
              var _arr, _i, _some, args, i, len, otherArgs, type;
              if (other instanceof GenericType) {
                if (this.base !== other.base) {
                  return false;
                } else if (this.equals(other)) {
                  return true;
                } else {
                  args = this.args;
                  otherArgs = other.args;
                  len = args.length;
                  if (len !== otherArgs.length) {
                    return false;
                  } else {
                    for (i = 0; i < len; ++i) {
                      if (!args[i].isSubsetOf(otherArgs[i])) {
                        return false;
                      }
                    }
                    return true;
                  }
                }
              } else if (other instanceof UnionType) {
                _some = false;
                for (_arr = __toArray(other.types), _i = _arr.length; _i--; ) {
                  type = _arr[_i];
                  if (this.isSubsetOf(type)) {
                    _some = true;
                    break;
                  }
                }
                return _some;
              } else if (other instanceof ComplementType) {
                return !this.isSubsetOf(other.untype);
              } else {
                return other === any;
              }
            };
            _GenericType_prototype.overlaps = function (other) {
              if (other instanceof GenericType) {
                if (this.base !== other.base) {
                  return false;
                } else {
                  return this.args.length === other.args.length;
                }
              } else if (other instanceof SimpleType) {
                return false;
              } else {
                return other.overlaps(this);
              }
            };
            _GenericType_prototype.inspect = function (depth) {
              var _arr, _i, _len, arg, sb;
              if (depth != null) {
                --depth;
              }
              sb = ["Type.generic("];
              sb.push(inspect(this.base, null, depth));
              for (_arr = __toArray(this.args), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                arg = _arr[_i];
                sb.push(", ");
                sb.push(inspect(arg, null, depth));
              }
              sb.push(")");
              return sb.join("");
            };
            _GenericType_prototype.toAst = function (ast, pos, ident) {
              var _this;
              _this = this;
              return (function () {
                var _else, k, v;
                _else = true;
                for (k in Type) {
                  if (__owns.call(Type, k)) {
                    _else = false;
                    v = Type[k];
                    if (v === _this) {
                      return ast.Access(pos, ident, ast.Const(pos, k));
                    }
                  }
                }
                return ast.Call(
                  pos,
                  ast.Access(pos, ident, ast.Const(pos, "generic")),
                  [_this.base.toAst(ast, pos, ident)].concat((function () {
                    var _arr, _arr2, _i, _len, arg;
                    for (_arr = [], _arr2 = __toArray(_this.args), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                      arg = _arr2[_i];
                      _arr.push(arg.toAst(ast, pos, ident));
                    }
                    return _arr;
                  }()))
                );
              }());
            };
            _GenericType_prototype.toJSON = function () {
              var _this;
              _this = this;
              return (function () {
                var _else, k, v;
                _else = true;
                for (k in Type) {
                  if (__owns.call(Type, k)) {
                    _else = false;
                    v = Type[k];
                    if (v === _this) {
                      return k;
                    }
                  }
                }
                return { type: "generic", base: _this.base, args: _this.args };
              }());
            };
            fromJSONTypes.generic = function (_p) {
              var args, base, baseType;
              base = _p.base;
              args = _p.args;
              baseType = Type.fromJSON(base);
              if (baseType === arrayBase && args.length === 1) {
                return Type.fromJSON(args[0]).array();
              } else if (baseType === functionBase && args.length === 1) {
                return Type.fromJSON(args[0])["function"]();
              } else {
                return GenericType(baseType, (function () {
                  var _arr, _arr2, _i, _len, arg;
                  for (_arr = [], _arr2 = __toArray(args), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                    arg = _arr2[_i];
                    _arr.push(Type.fromJSON(arg));
                  }
                  return _arr;
                }()));
              }
            };
            return GenericType;
          }(Type));
          Type.generic = function (base) {
            var args;
            args = __slice.call(arguments, 1);
            return GenericType(
              typeof base === "string" ? Type.make(base) : base,
              args
            );
          };
          ObjectType = (function (Type) {
            var _ObjectType_prototype, _Type_prototype2;
            function ObjectType(data) {
              var _this, k, pairs, v;
              _this = this instanceof ObjectType ? this : __create(_ObjectType_prototype);
              pairs = [];
              for (k in data) {
                if (__owns.call(data, k)) {
                  v = data[k];
                  if (!(v instanceof Type)) {
                    throw TypeError("Expected data[" + JSON.stringify(k) + "] to be a Type, got " + __typeof(v));
                  }
                  if (v !== any) {
                    pairs.push([k, v]);
                  }
                }
              }
              pairs.sort(function (a, b) {
                return __cmp(a[0], b[0]);
              });
              if (pairs.length === 0 && Type.object != null) {
                return Type.object;
              }
              _this.pairs = pairs;
              _this.id = getId();
              return _this;
            }
            _Type_prototype2 = Type.prototype;
            _ObjectType_prototype = ObjectType.prototype = __create(_Type_prototype2);
            _ObjectType_prototype.constructor = ObjectType;
            ObjectType.displayName = "ObjectType";
            if (typeof Type.extended === "function") {
              Type.extended(ObjectType);
            }
            _ObjectType_prototype.toString = function () {
              var _ref, _this;
              _this = this;
              if ((_ref = this._name) == null) {
                return this._name = "{" + (function () {
                  var _arr, _arr2, _i, _len, _ref, k, v;
                  for (_arr = [], _arr2 = __toArray(_this.pairs), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                    _ref = _arr2[_i];
                    k = _ref[0];
                    v = _ref[1];
                    _arr.push(k + ": " + String(v));
                  }
                  return _arr;
                }()).join(", ") + "}";
              } else {
                return _ref;
              }
            };
            function become(alpha, bravo) {
              if (alpha.id > bravo.id) {
                return become(bravo, alpha);
              }
              bravo.pairs = alpha.pairs;
              bravo.id = alpha.id;
            }
            _ObjectType_prototype.equals = function (other) {
              var _arr, _len, i, otherPair, otherPairs, pair, pairs;
              if (other === this) {
                return true;
              } else if (other instanceof ObjectType) {
                pairs = this.pairs;
                otherPairs = other.pairs;
                if (pairs === otherPairs) {
                  return true;
                } else if (pairs.length !== otherPairs.length) {
                  return false;
                } else {
                  for (_arr = __toArray(pairs), i = 0, _len = _arr.length; i < _len; ++i) {
                    pair = _arr[i];
                    otherPair = otherPairs[i];
                    if (pair[0] !== otherPair[0] || !pair[1].equals(otherPair[1])) {
                      return false;
                    }
                  }
                  become(this, other);
                  return true;
                }
              } else {
                return false;
              }
            };
            _ObjectType_prototype.compare = function (other) {
              var _arr, _len, cmp, i, otherPair, otherPairs, pair, pairs;
              if (this === other) {
                return 0;
              } else if (other instanceof ObjectType) {
                pairs = this.pairs;
                otherPairs = other.pairs;
                if (pairs === otherPairs) {
                  return 0;
                } else {
                  cmp = __cmp(pairs.length, otherPairs.length);
                  if (cmp) {
                    return cmp;
                  } else {
                    for (_arr = __toArray(pairs), i = 0, _len = _arr.length; i < _len; ++i) {
                      pair = _arr[i];
                      otherPair = otherPairs[i];
                      cmp = __cmp(pair[0], otherPair[0]) || pair[1].compare(otherPair[1]);
                      if (cmp) {
                        return cmp;
                      }
                    }
                    become(this, other);
                    return 0;
                  }
                }
              } else {
                return __cmp("ObjectType", other.constructor.displayName);
              }
            };
            _ObjectType_prototype.union = function (other) {
              if (other instanceof ObjectType) {
                if (this.equals(other)) {
                  return this;
                } else if (this.isSubsetOf(other)) {
                  return other;
                } else if (other.isSubsetOf(this)) {
                  return this;
                } else {
                  return makeUnionType(
                    [this, other],
                    true
                  );
                }
              } else if (other instanceof SimpleType || other instanceof GenericType) {
                return makeUnionType(
                  [this, other],
                  true
                );
              } else {
                return other.union(this);
              }
            };
            _ObjectType_prototype.intersect = function (other) {
              var _arr, _i, _len, _ref, k, merged, v;
              if (other instanceof ObjectType) {
                if (this.equals(other)) {
                  return this;
                } else if (this.isSubsetOf(other)) {
                  return this;
                } else if (other.isSubsetOf(this)) {
                  return other;
                } else {
                  merged = {};
                  for (_arr = __toArray(this.pairs), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                    _ref = _arr[_i];
                    k = _ref[0];
                    v = _ref[1];
                    merged[k] = v;
                  }
                  for (_arr = __toArray(other.pairs), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                    _ref = _arr[_i];
                    k = _ref[0];
                    v = _ref[1];
                    if (__owns.call(merged, k)) {
                      merged[k] = merged[k].intersect(v);
                    } else {
                      merged[k] = v;
                    }
                  }
                  return ObjectType(merged);
                }
              } else if (other instanceof SimpleType || other instanceof GenericType) {
                return none;
              } else {
                return other.intersect(this);
              }
            };
            _ObjectType_prototype.isSubsetOf = function (other) {
              var _arr, _i, _len, _ref, _some, i, len, otherK, otherPairs, otherV,
                  pair, pairs, type;
              if (other instanceof ObjectType) {
                if (this === other || other === Type.object) {
                  return true;
                } else if (this === Type.object) {
                  return false;
                } else {
                  pairs = this.pairs;
                  otherPairs = other.pairs;
                  if (pairs === other.pairs) {
                    return true;
                  } else {
                    i = 0;
                    len = pairs.length;
                    for (_arr = __toArray(otherPairs), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                      _ref = _arr[_i];
                      otherK = _ref[0];
                      otherV = _ref[1];
                      for (; i <= len; ++i) {
                        if (i === len) {
                          return false;
                        }
                        pair = pairs[i];
                        if (pair[0] === otherK) {
                          if (pair[1].isSubsetOf(otherV)) {
                            ++i;
                            break;
                          } else {
                            return false;
                          }
                        } else if (pair[0] > otherK) {
                          return false;
                        }
                      }
                    }
                    if (i === len) {
                      become(this, other);
                    }
                    return true;
                  }
                }
              } else if (other instanceof UnionType) {
                _some = false;
                for (_arr = __toArray(other.types), _i = _arr.length; _i--; ) {
                  type = _arr[_i];
                  if (this.isSubsetOf(type)) {
                    _some = true;
                    break;
                  }
                }
                return _some;
              } else if (other instanceof ComplementType) {
                return !this.isSubsetOf(other.untype);
              } else {
                return other === any;
              }
            };
            _ObjectType_prototype.overlaps = function (other) {
              if (other instanceof ObjectType) {
                return true;
              } else if (other instanceof SimpleType || other instanceof GenericType) {
                return false;
              } else {
                return other.overlaps(this);
              }
            };
            _ObjectType_prototype.value = function (key) {
              var _arr, _i, pair, pairKey;
              for (_arr = __toArray(this.pairs), _i = _arr.length; _i--; ) {
                pair = _arr[_i];
                pairKey = pair[0];
                if (pairKey === key) {
                  return pair[1];
                } else if (pairKey < key) {
                  return Type.any;
                }
              }
              return Type.any;
            };
            _ObjectType_prototype.inspect = function (depth) {
              var _arr, _i, _len, _ref, k, obj, v;
              if (this === Type.object) {
                return "Type.object";
              } else {
                obj = {};
                for (_arr = __toArray(this.pairs), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                  _ref = _arr[_i];
                  k = _ref[0];
                  v = _ref[1];
                  obj[k] = v;
                }
                return "Type.makeObject(" + inspect(obj, null, depth != null ? depth - 1 : null) + ")";
              }
            };
            _ObjectType_prototype.toAst = function (ast, pos, ident) {
              var _this;
              _this = this;
              if (this.pairs.length === 0) {
                return ast.Access(pos, ident, ast.Const(pos, "object"));
              } else {
                return ast.Call(
                  pos,
                  ast.Access(pos, ident, ast.Const(pos, "makeObject")),
                  [
                    ast.Obj(pos, (function () {
                      var _arr, _arr2, _i, _len, _ref, k, v;
                      for (_arr = [], _arr2 = __toArray(_this.pairs), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                        _ref = _arr2[_i];
                        k = _ref[0];
                        v = _ref[1];
                        _arr.push(ast.Obj.Pair(pos, k, v.toAst(ast, pos, ident)));
                      }
                      return _arr;
                    }()))
                  ]
                );
              }
            };
            _ObjectType_prototype.toJSON = function () {
              var _arr, _i, _len, _ref, k, pairs, v;
              if (this.pairs.length === 0) {
                return "object";
              } else {
                pairs = {};
                for (_arr = __toArray(this.pairs), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                  _ref = _arr[_i];
                  k = _ref[0];
                  v = _ref[1];
                  pairs[k] = v;
                }
                return { type: "object", pairs: pairs };
              }
            };
            fromJSONTypes.object = function (_p) {
              var deserializedPairs, k, pairs, v;
              pairs = _p.pairs;
              deserializedPairs = {};
              for (k in pairs) {
                if (__owns.call(pairs, k)) {
                  v = pairs[k];
                  deserializedPairs[k] = Type.fromJSON(v);
                }
              }
              return ObjectType(deserializedPairs);
            };
            return ObjectType;
          }(Type));
          Type.makeObject = function (data) {
            return ObjectType(data);
          };
          UnionType = (function (Type) {
            var _Type_prototype2, _UnionType_prototype;
            function UnionType(types) {
              var _this;
              _this = this instanceof UnionType ? this : __create(_UnionType_prototype);
              _this.types = types;
              if (types.length <= 1) {
                throw Error("Must provide at least 2 types to UnionType");
              }
              _this.id = getId();
              return _this;
            }
            _Type_prototype2 = Type.prototype;
            _UnionType_prototype = UnionType.prototype = __create(_Type_prototype2);
            _UnionType_prototype.constructor = UnionType;
            UnionType.displayName = "UnionType";
            if (typeof Type.extended === "function") {
              Type.extended(UnionType);
            }
            _UnionType_prototype.toString = function () {
              var _ref;
              if ((_ref = this._name) == null) {
                return this._name = "(" + this.types.join("|") + ")";
              } else {
                return _ref;
              }
            };
            function become(alpha, bravo) {
              if (alpha.id > bravo.id) {
                return become(bravo, alpha);
              }
              bravo.types = alpha.types;
              return bravo.id = alpha.id;
            }
            _UnionType_prototype.equals = function (other) {
              if (other === this) {
                return true;
              } else if (other instanceof UnionType) {
                if (this.id === other.id) {
                  return true;
                } else if (this.types === other.types || equals(this.types, other.types)) {
                  become(this, other);
                  return true;
                } else {
                  return false;
                }
              } else {
                return false;
              }
            };
            _UnionType_prototype.compare = function (other) {
              var cmp;
              if (other === this) {
                return 0;
              } else if (other instanceof UnionType) {
                if (this.id === other.id) {
                  return 0;
                } else if (this.types === other.types) {
                  become(this, other);
                  return 0;
                } else {
                  cmp = compare(this.types, other.types);
                  if (cmp === 0) {
                    become(this, other);
                  }
                  return cmp;
                }
              } else {
                return __cmp("UnionType", other.constructor.displayName);
              }
            };
            _UnionType_prototype.union = function (other) {
              var _arr, _i, _len, newTypes, type, types;
              if (other instanceof SimpleType || other instanceof GenericType) {
                types = union(this.types, [other]);
                if (types === this.types) {
                  return this;
                } else {
                  return makeUnionType(types);
                }
              } else if (other instanceof ObjectType) {
                if (other === Type.object) {
                  newTypes = [other];
                  for (_arr = __toArray(this.types), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                    type = _arr[_i];
                    if (type instanceof ObjectType) {
                      if (type === Type.object) {
                        return this;
                      }
                    } else {
                      newTypes.push(type);
                    }
                  }
                  return makeUnionType(newTypes);
                } else {
                  newTypes = [other];
                  for (_arr = __toArray(this.types), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                    type = _arr[_i];
                    if (type instanceof ObjectType) {
                      if (other.isSubsetOf(type)) {
                        return this;
                      } else if (!type.isSubsetOf(other)) {
                        newTypes.push(type);
                      }
                    } else {
                      newTypes.push(type);
                    }
                  }
                  return makeUnionType(newTypes);
                }
              } else if (other instanceof UnionType) {
                types = union(this.types, other.types);
                if (types === this.types) {
                  return this;
                } else if (types === other.types) {
                  return other;
                } else {
                  return makeUnionType(types);
                }
              } else {
                return other.union(this);
              }
            };
            _UnionType_prototype.intersect = function (other) {
              var types;
              if (other instanceof SimpleType || other instanceof GenericType || other instanceof ObjectType) {
                return makeUnionType(intersect(this.types, [other]));
              } else if (other instanceof UnionType) {
                types = intersect(this.types, other.types);
                if (types === this.types) {
                  return this;
                } else if (types === other.types) {
                  return other;
                } else {
                  return makeUnionType(types);
                }
              } else {
                return other.intersect(this);
              }
            };
            _UnionType_prototype.isSubsetOf = function (other) {
              if (other instanceof UnionType) {
                return isSubsetOf(this.types, other.types);
              } else if (other instanceof ComplementType) {
                return !this.overlaps(other.untype);
              } else {
                return other === any;
              }
            };
            _UnionType_prototype.overlaps = function (other) {
              var _arr, _i, _some, type;
              if (other instanceof SimpleType) {
                return contains(this.types, other);
              } else if (other instanceof GenericType || other instanceof ObjectType) {
                _some = false;
                for (_arr = __toArray(this.types), _i = _arr.length; _i--; ) {
                  type = _arr[_i];
                  if (type.overlaps(other)) {
                    _some = true;
                    break;
                  }
                }
                return _some;
              } else if (other instanceof UnionType) {
                return overlaps(this.types, other.types);
              } else {
                return other.overlaps(this);
              }
            };
            _UnionType_prototype.inspect = function (depth) {
              var _this;
              _this = this;
              return "(" + (function () {
                var _arr, _arr2, _i, _len, type;
                for (_arr = [], _arr2 = __toArray(_this.types), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                  type = _arr2[_i];
                  _arr.push(inspect(type, null, depth != null ? depth - 1 : null));
                }
                return _arr;
              }()).join(").union(") + ")";
            };
            _UnionType_prototype.toAst = function (ast, pos, ident) {
              var _this;
              _this = this;
              return (function () {
                var _else, k, v;
                _else = true;
                for (k in Type) {
                  if (__owns.call(Type, k)) {
                    _else = false;
                    v = Type[k];
                    if (v === _this) {
                      return ast.Access(pos, ident, ast.Const(pos, k));
                    }
                  }
                }
                return ast.Call(
                  pos,
                  ast.Access(pos, ident, ast.Const(pos, "union")),
                  (function () {
                    var _arr, _arr2, _i, _len, type;
                    for (_arr = [], _arr2 = __toArray(types), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                      type = _arr2[_i];
                      _arr.push(type.toAst(ast, pos, ident));
                    }
                    return _arr;
                  }())
                );
              }());
            };
            _UnionType_prototype.toJSON = function () {
              var _this;
              _this = this;
              return (function () {
                var _else, k, v;
                _else = true;
                for (k in Type) {
                  if (__owns.call(Type, k)) {
                    _else = false;
                    v = Type[k];
                    if (v === _this) {
                      return k;
                    }
                  }
                }
                return { type: "union", types: _this.types };
              }());
            };
            fromJSONTypes.union = function (_p) {
              var _arr, _i, current, type, types;
              types = _p.types;
              current = Type.none;
              for (_arr = __toArray(types), _i = _arr.length; _i--; ) {
                type = _arr[_i];
                current = current.union(Type.fromJSON(type));
              }
              return current;
            };
            return UnionType;
          }(Type));
          ComplementType = (function (Type) {
            var _ComplementType_prototype, _Type_prototype2;
            function ComplementType(untype) {
              var _this;
              _this = this instanceof ComplementType ? this : __create(_ComplementType_prototype);
              _this.untype = untype;
              _this.id = getId();
              return _this;
            }
            _Type_prototype2 = Type.prototype;
            _ComplementType_prototype = ComplementType.prototype = __create(_Type_prototype2);
            _ComplementType_prototype.constructor = ComplementType;
            ComplementType.displayName = "ComplementType";
            if (typeof Type.extended === "function") {
              Type.extended(ComplementType);
            }
            _ComplementType_prototype.toString = function () {
              var _ref;
              if ((_ref = this._name) == null) {
                return this._name = "any \\ " + String(this.untype);
              } else {
                return _ref;
              }
            };
            function become(alpha, bravo) {
              if (alpha.id > bravo.id) {
                return become(bravo, alpha);
              }
              bravo.id = alpha.id;
              return bravo.untype = alpha.untype;
            }
            _ComplementType_prototype.equals = function (other) {
              if (this === other) {
                return true;
              } else if (other instanceof ComplementType) {
                if (this.id === other.id) {
                  return true;
                } else if (this.untype.equals(other.untype)) {
                  become(this, other);
                  return true;
                } else {
                  return false;
                }
              } else {
                return false;
              }
            };
            _ComplementType_prototype.compare = function (other) {
              var cmp;
              if (this === other) {
                return 0;
              } else if (other instanceof ComplementType) {
                if (this.id === other.id) {
                  return 0;
                } else {
                  cmp = this.untype.compare(other.untype);
                  if (cmp === 0) {
                    become(this, other);
                  }
                  return cmp;
                }
              } else {
                return __cmp("ComplementType", other.constructor.displayName);
              }
            };
            function getUntypes(untype) {
              if (untype instanceof UnionType) {
                return untype.types;
              } else {
                return [untype];
              }
            }
            _ComplementType_prototype.union = function (other) {
              var myUntypes, untypes;
              if (other instanceof SimpleType || other instanceof GenericType || other instanceof ObjectType) {
                myUntypes = getUntypes(this.untype);
                untypes = relativeComplement(myUntypes, [other]);
                if (untypes === myUntypes) {
                  return this;
                } else {
                  return makeUnionType(untypes).complement();
                }
              } else if (other instanceof UnionType) {
                myUntypes = getUntypes(this.untype);
                untypes = relativeComplement(myUntypes, other.types);
                if (untypes === myUntypes) {
                  return this;
                } else {
                  return makeUnionType(untypes).complement();
                }
              } else if (other instanceof ComplementType) {
                return this.untype.intersect(other.untype).complement();
              } else {
                return other.union(this);
              }
            };
            _ComplementType_prototype.intersect = function (other) {
              var types;
              if (other instanceof SimpleType || other instanceof GenericType || other instanceof ObjectType) {
                if (contains(getUntypes(this.untype), other)) {
                  return none;
                } else {
                  return other;
                }
              } else if (other instanceof UnionType) {
                types = relativeComplement(other.types, getUntypes(this.untype));
                if (types === other.types) {
                  return other;
                } else {
                  return makeUnionType(types);
                }
              } else if (other instanceof ComplementType) {
                return this.untype.union(other.untype).complement();
              } else {
                return other.intersect(this);
              }
            };
            _ComplementType_prototype.isSubsetOf = function (other) {
              if (other instanceof ComplementType) {
                return other.untype.isSubsetOf(this.untype);
              } else {
                return other === any;
              }
            };
            _ComplementType_prototype.overlaps = function (other) {
              var _arr, _every, _i, untype;
              if (other instanceof SimpleType || other instanceof GenericType) {
                return !this.untype.overlaps(other);
              } else if (other instanceof ObjectType) {
                _every = true;
                for (_arr = getUntypes(this.untype), _i = _arr.length; _i--; ) {
                  untype = _arr[_i];
                  if (untype instanceof ObjectType && other.isSubsetOf(untype)) {
                    _every = false;
                    break;
                  }
                }
                return _every;
              } else if (other instanceof UnionType) {
                return relativeComplement(other.types, getUntypes(this.untype)).length > 0;
              } else if (other instanceof ComplementType) {
                return true;
              } else {
                return other.overlaps(this);
              }
            };
            _ComplementType_prototype.complement = function () {
              return this.untype;
            };
            _ComplementType_prototype.inspect = function (depth) {
              return this.untype.inspect(depth) + ".complement()";
            };
            _ComplementType_prototype.toAst = function (ast, pos, ident) {
              var _this;
              _this = this;
              return (function () {
                var _else, k, v;
                _else = true;
                for (k in Type) {
                  if (__owns.call(Type, k)) {
                    _else = false;
                    v = Type[k];
                    if (v === _this) {
                      return ast.Access(pos, ident, ast.Const(pos, k));
                    }
                  }
                }
                return ast.Call(
                  pos,
                  ast.Access(pos, ident, ast.Const(pos, "complement")),
                  [_this.complement().toAst(ast, pos, ident)]
                );
              }());
            };
            _ComplementType_prototype.toJSON = function () {
              var _this;
              _this = this;
              return (function () {
                var _else, k, v;
                _else = true;
                for (k in Type) {
                  if (__owns.call(Type, k)) {
                    _else = false;
                    v = Type[k];
                    if (v === _this) {
                      return k;
                    }
                  }
                }
                return { type: "complement", untype: _this.complement() };
              }());
            };
            fromJSONTypes.complement = function (_p) {
              var untype;
              untype = _p.untype;
              return Type.fromJSON(untype).complement();
            };
            return ComplementType;
          }(Type));
          any = Type.any = new (AnyType = (function (Type) {
            var _AnyType_prototype, _Type_prototype2;
            function AnyType() {
              var _this;
              _this = this instanceof AnyType ? this : __create(_AnyType_prototype);
              if (any) {
                throw Error("Cannot instantiate more than once");
              }
              return _this;
            }
            _Type_prototype2 = Type.prototype;
            _AnyType_prototype = AnyType.prototype = __create(_Type_prototype2);
            _AnyType_prototype.constructor = AnyType;
            AnyType.displayName = "AnyType";
            if (typeof Type.extended === "function") {
              Type.extended(AnyType);
            }
            _AnyType_prototype.toString = function () {
              return "any";
            };
            _AnyType_prototype.equals = function (other) {
              return this === other;
            };
            _AnyType_prototype.compare = function (other) {
              if (this === other) {
                return 0;
              } else {
                return __cmp("AnyType", other.constructor.displayName);
              }
            };
            _AnyType_prototype.union = function (other) {
              return this;
            };
            _AnyType_prototype.intersect = function (other) {
              return other;
            };
            _AnyType_prototype.isSubsetOf = function (other) {
              return this === other;
            };
            _AnyType_prototype.overlaps = function (other) {
              return true;
            };
            _AnyType_prototype.complement = function () {
              return none;
            };
            _AnyType_prototype.inspect = function () {
              return "Type.any";
            };
            _AnyType_prototype.toAst = function (ast, pos, ident) {
              return ast.Access(pos, ident, ast.Const(pos, "any"));
            };
            _AnyType_prototype.toJSON = function () {
              return "any";
            };
            fromJSONTypes.any = function () {
              return any;
            };
            return AnyType;
          }(Type)))();
          none = Type.none = new (NoneType = (function (Type) {
            var _NoneType_prototype, _Type_prototype2;
            function NoneType() {
              var _this;
              _this = this instanceof NoneType ? this : __create(_NoneType_prototype);
              if (none) {
                throw Error("Cannot instantiate more than once");
              }
              return _this;
            }
            _Type_prototype2 = Type.prototype;
            _NoneType_prototype = NoneType.prototype = __create(_Type_prototype2);
            _NoneType_prototype.constructor = NoneType;
            NoneType.displayName = "NoneType";
            if (typeof Type.extended === "function") {
              Type.extended(NoneType);
            }
            _NoneType_prototype.toString = function () {
              return "none";
            };
            _NoneType_prototype.equals = function (other) {
              return this === other;
            };
            _NoneType_prototype.compare = function (other) {
              if (this === other) {
                return 0;
              } else {
                return __cmp("NoneType", other.constructor.displayName);
              }
            };
            _NoneType_prototype.union = function (other) {
              return other;
            };
            _NoneType_prototype.intersect = function (other) {
              return this;
            };
            _NoneType_prototype.isSubsetOf = function (other) {
              return true;
            };
            _NoneType_prototype.overlaps = function (other) {
              return false;
            };
            _NoneType_prototype.complement = function () {
              return any;
            };
            _NoneType_prototype.inspect = function () {
              return "Type.none";
            };
            _NoneType_prototype.toAst = function (ast, pos, ident) {
              return ast.Access(pos, ident, ast.Const(pos, "none"));
            };
            _NoneType_prototype.toJSON = function () {
              return "none";
            };
            fromJSONTypes.none = function () {
              return none;
            };
            return NoneType;
          }(Type)))();
          arrayBase = Type.arrayBase = Type.make("Array");
          functionBase = Type.functionBase = Type.make("Function");
          Type["undefined"] = Type.make("undefined");
          Type["null"] = Type.make("null");
          Type.boolean = Type.make("Boolean");
          Type.string = Type.make("String");
          Type.stringArray = Type.string.array();
          Type.number = Type.make("Number");
          Type.numberArray = Type.number.array();
          Type.array = any.array();
          Type.args = Type.make("Arguments");
          Type.object = Type.makeObject({});
          Type["function"] = any["function"]();
          Type.regexp = Type.make("RegExp");
          Type.date = Type.make("Date");
          Type.error = Type.make("Error");
          Type.promise = Type.makeObject({ then: Type.any["function"](Type["function"], Type["function"]) });
          Type.numeric = Type.number.union(Type["undefined"]).union(Type["null"]).union(Type.boolean);
          Type.stringOrNumber = Type.string.union(Type.number);
          Type.arrayLike = Type.array.union(Type.args);
          Type.undefinedOrNull = Type["undefined"].union(Type["null"]);
          Type.notUndefinedOrNull = Type.undefinedOrNull.complement();
          Type.primitive = Type.undefinedOrNull.union(Type.boolean).union(Type.string).union(Type.number);
          Type.nonPrimitive = Type.primitive.complement();
          Type.alwaysFalsy = Type.undefinedOrNull;
          Type.potentiallyTruthy = Type.alwaysFalsy.complement();
          Type.potentiallyFalsy = Type.alwaysFalsy.union(Type.number).union(Type.string).union(Type.boolean);
          Type.alwaysTruthy = Type.potentiallyFalsy.complement();
          return Type;
        }());
      }.call(this));
      
      return module.exports;
    };
    require['./jsast'] = function () {
      var module = { exports: this };
      var exports = this;
      (function () {
        "use strict";
        var __cmp, __create, __import, __in, __isArray, __name, __owns, __slice,
            __toArray, __typeof, _ref, Arguments, Arr, AstTypeToClass, Binary, Block,
            BlockExpression, BlockStatement, Break, Call, Comment, Const, Continue,
            Debugger, DoWhile, Eval, Expression, For, ForIn, fromJSON, Func,
            getIndent, Ident, If, IfExpression, IfStatement, inspect,
            isAcceptableIdent, Node, Noop, Obj, padLeft, Regex, Return, Root,
            Statement, Switch, This, Throw, toJSIdent, toJSSource, TryCatch,
            TryFinally, Unary, util, While;
        __cmp = function (left, right) {
          var type;
          if (left === right) {
            return 0;
          } else {
            type = typeof left;
            if (type !== "number" && type !== "string") {
              throw TypeError("Cannot compare a non-number/string: " + type);
            } else if (type !== typeof right) {
              throw TypeError("Cannot compare elements of different types: " + type + " vs " + typeof right);
            } else if (left < right) {
              return -1;
            } else {
              return 1;
            }
          }
        };
        __create = typeof Object.create === "function" ? Object.create
          : function (x) {
            function F() {}
            F.prototype = x;
            return new F();
          };
        __import = function (dest, source) {
          var k;
          for (k in source) {
            if (__owns.call(source, k)) {
              dest[k] = source[k];
            }
          }
          return dest;
        };
        __in = typeof Array.prototype.indexOf === "function"
          ? (function () {
            var indexOf;
            indexOf = Array.prototype.indexOf;
            return function (child, parent) {
              return indexOf.call(parent, child) !== -1;
            };
          }())
          : function (child, parent) {
            var i, len;
            len = +parent.length;
            i = -1;
            while (++i < len) {
              if (child === parent[i] && i in parent) {
                return true;
              }
            }
            return false;
          };
        __isArray = typeof Array.isArray === "function" ? Array.isArray
          : (function () {
            var _toString;
            _toString = Object.prototype.toString;
            return function (x) {
              return _toString.call(x) === "[object Array]";
            };
          }());
        __name = function (func) {
          if (typeof func !== "function") {
            throw TypeError("Expected func to be a Function, got " + __typeof(func));
          }
          return func.displayName || func.name || "";
        };
        __owns = Object.prototype.hasOwnProperty;
        __slice = Array.prototype.slice;
        __toArray = function (x) {
          if (x == null) {
            throw TypeError("Expected an object, got " + __typeof(x));
          } else if (__isArray(x)) {
            return x;
          } else if (typeof x === "string") {
            return x.split("");
          } else if (typeof x.length === "number") {
            return __slice.call(x);
          } else {
            throw TypeError("Expected an object with a length property, got " + __typeof(x));
          }
        };
        __typeof = (function () {
          var _toString;
          _toString = Object.prototype.toString;
          return function (o) {
            if (o === void 0) {
              return "Undefined";
            } else if (o === null) {
              return "Null";
            } else {
              return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
            }
          };
        }());
        util = require("util");
        if (util != null) {
          inspect = util.inspect;
        }
        padLeft = require("./utils").padLeft;
        _ref = require("./jsutils");
        isAcceptableIdent = _ref.isAcceptableIdent;
        toJSSource = _ref.toJSSource;
        function incIndent(options) {
          var clone;
          clone = __create(options);
          ++clone.indent;
          return clone;
        }
        getIndent = (function () {
          var cache;
          cache = [""];
          return function (indent) {
            var i, result;
            if (indent >= cache.length) {
              result = cache[cache.length - 1];
              for (i = cache.length; i <= indent; ++i) {
                result += "  ";
                cache.push(result);
              }
            }
            return cache[indent];
          };
        }());
        function wrapStringHandler(callback) {
          function cb(item) {
            var len, parts, s;
            s = String(item);
            parts = s.split(/(?:\r\n?|[\n\u2028\u2029])/g);
            switch (parts.length) {
            case 0:
              break;
            case 1:
              cb.column -= -parts[0].length;
              break;
            default:
              len = parts.length;
              cb.line -= -len + 1;
              cb.column = +parts[len - 1].length + 1;
            }
            callback(s);
          }
          cb.line = 1;
          cb.column = 1;
          cb.indent = function (count) {
            callback(getIndent(count));
            cb.column -= -count;
          };
          return cb;
        }
        function StringWriter(callback) {
          var sb;
          return sb = wrapStringHandler(callback);
        }
        function StringBuilder() {
          var data, sb;
          data = [];
          sb = wrapStringHandler(function (item) {
            data.push(item);
          });
          sb.toString = function () {
            var text;
            switch (data.length) {
            case 0: return "";
            case 1: return data[0];
            default:
              text = data.join("");
              data.splice(0, data.length, text);
              return text;
            }
          };
          return sb;
        }
        exports.Node = Node = (function () {
          var _Node_prototype;
          function Node() {
            var _this;
            _this = this instanceof Node ? this : __create(_Node_prototype);
            throw Error("Node cannot be instantiated directly");
          }
          _Node_prototype = Node.prototype;
          Node.displayName = "Node";
          _Node_prototype.toString = function (options) {
            var sb;
            if (options == null) {
              options = {};
            }
            sb = StringBuilder();
            this.compile(
              __import(
                { indent: 0, bare: true },
                options
              ),
              2,
              false,
              sb
            );
            return sb.toString();
          };
          _Node_prototype.compile = function () {
            throw Error("Not implemented: " + __name(this.constructor) + ".compile()");
          };
          _Node_prototype.maybeToStatement = function () {
            if (typeof this.toStatement === "function") {
              return this.toStatement();
            } else {
              return this;
            }
          };
          _Node_prototype.isConst = function () {
            return false;
          };
          _Node_prototype.isNoop = function () {
            return false;
          };
          _Node_prototype.constValue = function () {
            throw Error(this.constructor.name + " has no const value");
          };
          _Node_prototype.isLarge = function () {
            return true;
          };
          _Node_prototype.isSmall = function () {
            return !this.isLarge();
          };
          _Node_prototype.mutateLast = function () {
            return this;
          };
          _Node_prototype.exitType = function () {
            return null;
          };
          _Node_prototype.last = function () {
            return this;
          };
          function inspectArray(depth, array) {
            var _arr, _i, _len, item, sb;
            if (array.length === 0) {
              return "[]";
            } else {
              sb = "";
              sb += "[";
              for (_arr = __toArray(array), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                item = _arr[_i];
                sb += "\n  ";
                sb += inspect(item, null, decDepth(depth)).split("\n").join("\n  ");
              }
              sb += "\n]";
              return sb;
            }
          }
          _Node_prototype.inspect = function (depth, includeEmpty) {
            var k, sb, v;
            sb = this.constructor.displayName;
            sb += ' "';
            if (this.pos.file) {
              sb += this.pos.file;
              sb += ":";
            }
            sb += this.pos.line;
            sb += ":";
            sb += this.pos.column;
            sb += '"';
            for (k in this) {
              if (__owns.call(this, k)) {
                v = this[k];
                if (k !== "pos" && (includeEmpty || v && (!__isArray(v) || v.length !== 0) && !(v instanceof Noop))) {
                  sb += "\n  ";
                  sb += k;
                  sb += ": ";
                  if (__isArray(v)) {
                    sb += inspectArray(depth, v).split("\n").join("\n  ");
                  } else {
                    sb += inspect(v, null, decDepth(depth)).split("\n").join("\n  ");
                  }
                }
              }
            }
            return sb;
          };
          _Node_prototype.toAst = function (pos, ident) {
            return Call(pos, ident, [
              Const(pos, this.typeId),
              Const(pos, this.pos.line),
              Const(pos, this.pos.column),
              Const(pos, this.pos.file || 0)
            ].concat(__toArray(this._toAst(pos, ident))));
          };
          _Node_prototype._toAst = function () {
            return [];
          };
          _Node_prototype.toJSON = function () {
            return [this.typeId, this.pos.line, this.pos.column, this.pos.file || 0].concat(__toArray(this._toJSON()));
          };
          _Node_prototype._toJSON = function () {
            return [];
          };
          return Node;
        }());
        exports.Expression = Expression = (function (Node) {
          var _Expression_prototype, _Node_prototype;
          function Expression() {
            var _this;
            _this = this instanceof Expression ? this : __create(_Expression_prototype);
            throw Error("Expression cannot be instantiated directly");
          }
          _Node_prototype = Node.prototype;
          _Expression_prototype = Expression.prototype = __create(_Node_prototype);
          _Expression_prototype.constructor = Expression;
          Expression.displayName = "Expression";
          if (typeof Node.extended === "function") {
            Node.extended(Expression);
          }
          _Expression_prototype.compileAsBlock = function (options, level, lineStart, sb) {
            this.compile(options, level, lineStart, sb);
          };
          _Expression_prototype.compileAsStatement = function (options, lineStart, sb) {
            if (typeof this.toStatement === "function") {
              this.toStatement().compileAsStatement(options, lineStart, sb);
            } else {
              this.compile(options, 1, lineStart, sb);
              sb(";");
            }
          };
          _Expression_prototype.isLarge = function () {
            return false;
          };
          _Expression_prototype.mutateLast = function (func) {
            return func(this);
          };
          return Expression;
        }(Node));
        exports.Statement = Statement = (function (Node) {
          var _Node_prototype, _Statement_prototype;
          function Statement() {
            var _this;
            _this = this instanceof Statement ? this : __create(_Statement_prototype);
            throw Error("Expression cannot be instantiated directly");
          }
          _Node_prototype = Node.prototype;
          _Statement_prototype = Statement.prototype = __create(_Node_prototype);
          _Statement_prototype.constructor = Statement;
          Statement.displayName = "Statement";
          if (typeof Node.extended === "function") {
            Node.extended(Statement);
          }
          _Statement_prototype.compileAsStatement = function (options, lineStart, sb) {
            return this.compile(options, 1, lineStart, sb);
          };
          return Statement;
        }(Node));
        exports.Access = function (pos, parent) {
          var _i, _len, child, children, current;
          children = __slice.call(arguments, 2);
          current = parent;
          for (_i = 0, _len = children.length; _i < _len; ++_i) {
            child = children[_i];
            current = Binary(pos, current, ".", child);
          }
          return current;
        };
        function makePos(line, column, file) {
          var pos;
          if (file == null) {
            file = void 0;
          }
          pos = { line: line, column: column };
          if (file) {
            if (typeof file !== "string") {
              throw TypeError("Must provide a valid string for file");
            }
            pos.file = file;
          }
          return pos;
        }
        function decDepth(depth) {
          if (depth != null) {
            return depth - 1;
          } else {
            return null;
          }
        }
        exports.Arguments = Arguments = (function (Expression) {
          var _Arguments_prototype, _Expression_prototype;
          function Arguments(pos) {
            var _this;
            _this = this instanceof Arguments ? this : __create(_Arguments_prototype);
            _this.pos = pos;
            return _this;
          }
          _Expression_prototype = Expression.prototype;
          _Arguments_prototype = Arguments.prototype = __create(_Expression_prototype);
          _Arguments_prototype.constructor = Arguments;
          Arguments.displayName = "Arguments";
          if (typeof Expression.extended === "function") {
            Expression.extended(Arguments);
          }
          _Arguments_prototype.compile = function (options, level, lineStart, sb) {
            var _ref;
            if ((_ref = options.sourceMap) != null) {
              _ref.add(
                sb.line,
                sb.column,
                this.pos.line,
                this.pos.column,
                this.pos.file
              );
            }
            sb("arguments");
          };
          _Arguments_prototype.compileAsBlock = function (options, level, lineStart, sb) {
            Noop(this.pos).compileAsBlock(options, level, lineStart, sb);
          };
          _Arguments_prototype.walk = function () {
            return this;
          };
          _Arguments_prototype.isNoop = function () {
            return true;
          };
          _Arguments_prototype.typeId = 1;
          Arguments._fromAst = function (pos) {
            return Arguments(pos);
          };
          Arguments.fromJSON = function (line, column, file) {
            return Arguments(makePos(line, column, file));
          };
          return Arguments;
        }(Expression));
        function walkArray(array, parent, message, walker) {
          var _arr, _i, _len, changed, item, newItem, result;
          changed = false;
          for (_arr = [], _i = 0, _len = array.length; _i < _len; ++_i) {
            item = array[_i];
            newItem = walker(item, parent, message);
            if (newItem == null) {
              newItem = item.walk(walker);
            }
            if (item !== newItem) {
              changed = true;
            }
            _arr.push(newItem);
          }
          result = _arr;
          if (changed) {
            return result;
          } else {
            return array;
          }
        }
        function simplifyArray(array, childDefaultValue, keepTrailing) {
          var _len, i, item, lastNoop, result;
          if (keepTrailing == null) {
            keepTrailing = false;
          }
          if (array.length === 0) {
            return array;
          } else {
            result = [];
            lastNoop = -1;
            for (i = 0, _len = array.length; i < _len; ++i) {
              item = array[i];
              if (item instanceof Noop) {
                lastNoop = i;
              } else {
                lastNoop = -1;
              }
              result.push(simplify(item, childDefaultValue));
            }
            if (!keepTrailing && lastNoop !== -1) {
              result.splice(lastNoop, 1/0);
            }
            return result;
          }
        }
        function simplify(obj, defaultValue) {
          if (__isArray(obj)) {
            return simplifyArray(obj);
          } else if (obj instanceof Noop) {
            return defaultValue;
          } else {
            return obj;
          }
        }
        exports.Arr = Arr = (function (Expression) {
          var _Arr_prototype, _Expression_prototype;
          function Arr(pos, elements) {
            var _this;
            _this = this instanceof Arr ? this : __create(_Arr_prototype);
            _this.pos = pos;
            if (elements == null) {
              elements = [];
            }
            _this.elements = elements;
            return _this;
          }
          _Expression_prototype = Expression.prototype;
          _Arr_prototype = Arr.prototype = __create(_Expression_prototype);
          _Arr_prototype.constructor = Arr;
          Arr.displayName = "Arr";
          if (typeof Expression.extended === "function") {
            Expression.extended(Arr);
          }
          function compileLarge(elements, options, level, lineStart, sb) {
            var _arr, childOptions, i, item, len;
            childOptions = incIndent(options);
            for (_arr = __toArray(elements), i = 0, len = _arr.length; i < len; ++i) {
              item = _arr[i];
              sb(options.linefeed || "\n");
              sb.indent(childOptions.indent);
              item.compile(childOptions, 3, false, sb);
              if (i < len - 1) {
                sb(",");
              }
            }
            sb(options.linefeed || "\n");
            sb.indent(options.indent);
          }
          function compileSmall(elements, options, level, lineStart, sb) {
            var _arr, _len, i, item;
            for (_arr = __toArray(elements), i = 0, _len = _arr.length; i < _len; ++i) {
              item = _arr[i];
              if (i > 0) {
                sb(",");
                if (!options.minify) {
                  sb(" ");
                }
              }
              item.compile(options, 3, false, sb);
            }
          }
          _Arr_prototype.compile = function (options, level, lineStart, sb) {
            var _ref, f;
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.pushFile(this.pos.file);
            }
            if ((_ref = options.sourceMap) != null) {
              _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
            }
            sb("[");
            if (!options.minify && this.shouldCompileLarge()) {
              f = compileLarge;
            } else {
              f = compileSmall;
            }
            f(
              this.elements,
              options,
              level,
              lineStart,
              sb
            );
            sb("]");
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.popFile();
            }
          };
          _Arr_prototype.compileAsBlock = function (options, level, lineStart, sb) {
            return BlockExpression(this.pos, this.elements).compileAsBlock(options, level, lineStart, sb);
          };
          _Arr_prototype.compileAsStatement = function (options, lineStart, sb) {
            BlockStatement(this.pos, this.elements).compile(options, 1, lineStart, sb);
          };
          _Arr_prototype.shouldCompileLarge = function () {
            switch (this.elements.length) {
            case 0: return false;
            case 1: return this.elements[0].isLarge();
            default: return this.isLarge();
            }
          };
          _Arr_prototype.isSmall = function () {
            switch (this.elements.length) {
            case 0: return true;
            case 1: return this.elements[0].isSmall();
            default: return false;
            }
          };
          _Arr_prototype.isLarge = function () {
            var _ref, _this;
            _this = this;
            if ((_ref = this._isLarge) == null) {
              return this._isLarge = this.elements.length > 4 || (function () {
                var _arr, _i, _some, element;
                _some = false;
                for (_arr = __toArray(_this.elements), _i = _arr.length; _i--; ) {
                  element = _arr[_i];
                  if (!element.isSmall()) {
                    _some = true;
                    break;
                  }
                }
                return _some;
              }());
            } else {
              return _ref;
            }
          };
          _Arr_prototype.isNoop = function () {
            var _arr, _every, _i, _ref, element;
            if ((_ref = this._isNoop) == null) {
              _every = true;
              for (_arr = __toArray(this.elements), _i = _arr.length; _i--; ) {
                element = _arr[_i];
                if (!element.isNoop()) {
                  _every = false;
                  break;
                }
              }
              return this._isNoop = _every;
            } else {
              return _ref;
            }
          };
          _Arr_prototype.walk = function (walker) {
            var elements;
            elements = walkArray(this.elements, this, "element", walker);
            if (this.elements !== elements) {
              return Arr(this.pos, elements);
            } else {
              return this;
            }
          };
          _Arr_prototype.typeId = 2;
          _Arr_prototype._toAst = function (pos, ident) {
            var _arr, _arr2, _i, _len, element;
            for (_arr = [], _arr2 = __toArray(this.elements), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
              element = _arr2[_i];
              _arr.push(element.toAst(pos, ident));
            }
            return _arr;
          };
          Arr._fromAst = function (pos) {
            var elements;
            elements = __slice.call(arguments, 1);
            return Arr(pos, elements);
          };
          _Arr_prototype._toJSON = function () {
            return simplifyArray(this.elements, 0);
          };
          Arr.fromJSON = function (line, column, file) {
            var elements;
            elements = __slice.call(arguments, 3);
            return Arr(
              makePos(line, column, file),
              arrayFromJSON(elements)
            );
          };
          return Arr;
        }(Expression));
        exports.Assign = function (pos) {
          var _i, _i2, end, left, right, start;
          _i = arguments.length - 1;
          if (_i > 1) {
            start = __slice.call(arguments, 1, _i);
          } else {
            _i = 1;
            start = [];
          }
          end = arguments[_i];
          right = end;
          for (_i2 = start.length; _i2--; ) {
            left = start[_i2];
            right = Binary(pos, left, "=", right);
          }
          return right;
        };
        exports.BinaryChain = function (pos, op) {
          var _i, _len, arg, args, current, i, left, right;
          args = __slice.call(arguments, 2);
          if (op === "+") {
            for (i = args.length - 2; i >= 0; --i) {
              left = args[i];
              right = args[i + 1];
              if ((typeof left === "string" || left instanceof Const && typeof left.value === "string") && (typeof right === "string" || right instanceof Const && typeof right.value === "string")) {
                args.splice(i, 2, "" + (typeof left === "string" ? left : left.value) + (typeof right === "string" ? right : right.value));
              }
            }
          }
          current = args[0];
          for (_i = 1, _len = args.length; _i < _len; ++_i) {
            arg = args[_i];
            current = Binary(pos, current, op, arg);
          }
          return current;
        };
        exports.And = function (pos) {
          var _end, args, current, i;
          args = __slice.call(arguments, 1);
          if (args.length === 0) {
            return Const(pos, true);
          } else {
            current = args[0];
            for (i = 1, _end = args.length; i < _end; ++i) {
              current = Binary(pos, current, "&&", args[i]);
            }
            return current;
          }
        };
        exports.Or = function (pos) {
          var _end, args, current, i;
          args = __slice.call(arguments, 1);
          if (args.length === 0) {
            return Const(pos, false);
          } else {
            current = args[0];
            for (i = 1, _end = args.length; i < _end; ++i) {
              current = Binary(pos, current, "||", args[i]);
            }
            return current;
          }
        };
        function toConst(pos, value) {
          if (value instanceof Node) {
            throw Error("Cannot convert " + __typeof(value) + " to a Const");
          } else if (value instanceof RegExp) {
            return Regex(pos, value.source, value.flags);
          } else {
            return Const(pos, value);
          }
        }
        function isNegative(value) {
          return value < 0 || value === 0 && 1 / value < 0;
        }
        exports.Binary = Binary = (function (Expression) {
          var _Binary_prototype, _Expression_prototype, ASSIGNMENT_OPS,
              LEVEL_TO_ASSOCIATIVITY, OPERATOR_PRECEDENCE;
          function Binary(pos, left, op, right) {
            var _ref, _this;
            _this = this instanceof Binary ? this : __create(_Binary_prototype);
            _this.pos = pos;
            if (left == null) {
              left = Noop(pos);
            }
            _this.left = left;
            _this.op = op;
            if (right == null) {
              right = Noop(pos);
            }
            _this.right = right;
            if (!__owns.call(OPERATOR_PRECEDENCE, op)) {
              throw Error("Unknown binary operator: " + toJSSource(op));
            }
            if (!(left instanceof Expression)) {
              left = toConst(pos, left);
            }
            if (!(right instanceof Expression)) {
              right = toConst(pos, right);
            }
            if (__owns.call(ASSIGNMENT_OPS, op)) {
              if (!(left instanceof Ident) && (!(left instanceof Binary) || left.op !== ".")) {
                throw Error("Cannot assign with " + op + " to non-Ident or Access: " + __typeof(left));
              }
              if (left instanceof Binary && left.left instanceof BlockExpression) {
                return BlockExpression(pos, __toArray(__slice.call(left.left.body, 0, -1)).concat([
                  Binary.call(
                    _this,
                    pos,
                    Binary(left.pos, (_ref = left.left.body)[_ref.length - 1], ".", left.right),
                    op,
                    right
                  )
                ]));
              }
              if (right instanceof BlockExpression && (left instanceof Ident || left.left.isNoop() && left.right.isNoop())) {
                return BlockExpression(pos, __toArray(__slice.call(right.body, 0, -1)).concat([
                  Binary.call(
                    _this,
                    pos,
                    left,
                    op,
                    (_ref = right.body)[_ref.length - 1]
                  )
                ]));
              }
            } else if (left instanceof BlockExpression && op !== ".") {
              return BlockExpression(pos, __toArray(__slice.call(left.body, 0, -1)).concat([
                Binary.call(
                  _this,
                  pos,
                  (_ref = left.body)[_ref.length - 1],
                  op,
                  right
                )
              ]));
            }
            _this.left = left;
            _this.right = right;
            return _this;
          }
          _Expression_prototype = Expression.prototype;
          _Binary_prototype = Binary.prototype = __create(_Expression_prototype);
          _Binary_prototype.constructor = Binary;
          Binary.displayName = "Binary";
          if (typeof Expression.extended === "function") {
            Expression.extended(Binary);
          }
          function compileAccess(op, left, right, options, level, lineStart, sb) {
            var dotAccess, stringLeft, wrap;
            dotAccess = right instanceof Const && typeof right.value === "string" && isAcceptableIdent(right.value);
            wrap = level > 18;
            if (wrap) {
              sb("(");
            }
            if (left instanceof Const && typeof left.value === "number") {
              stringLeft = toJSSource(left.value);
              if (isNegative(left.value) || !isFinite(left.value)) {
                sb("(");
                sb(stringLeft);
                sb(")");
              } else {
                sb(stringLeft);
                if (dotAccess && stringLeft.indexOf("e") === -1 && stringLeft.indexOf(".") === -1) {
                  sb(".");
                }
              }
            } else if (left.isConst() && left.constValue() === void 0) {
              sb("(");
              (left instanceof Const ? left : Const(left.pos, void 0)).compile(options, 2, false, sb);
              sb(")");
            } else {
              left.compile(options, 18, lineStart, sb);
            }
            if (dotAccess) {
              sb(".");
              sb(right.value);
            } else {
              sb("[");
              right.compile(options, 2, false, sb);
              sb("]");
            }
            if (wrap) {
              sb(")");
            }
          }
          function compileOther(op, left, right, options, level, lineStart, sb) {
            var associativity, opLevel, spaced, wrap;
            opLevel = OPERATOR_PRECEDENCE[op];
            associativity = LEVEL_TO_ASSOCIATIVITY[opLevel];
            if (associativity === "paren") {
              wrap = level >= opLevel;
            } else {
              wrap = level > opLevel;
            }
            if (wrap) {
              sb("(");
            }
            left.compile(
              options,
              associativity === "right" && left instanceof Binary && OPERATOR_PRECEDENCE[left.op] === opLevel ? +opLevel + 1 : opLevel,
              lineStart && !wrap,
              sb
            );
            spaced = !options.minify || /^\w/.test(op);
            if (spaced) {
              sb(" ");
            }
            sb(op);
            if (spaced) {
              sb(" ");
            }
            right.compile(
              options,
              associativity === "left" && right instanceof Binary && OPERATOR_PRECEDENCE[right.op] === opLevel ? +opLevel + 1 : opLevel,
              false,
              sb
            );
            if (wrap) {
              sb(")");
            }
          }
          _Binary_prototype.compile = function (options, level, lineStart, sb) {
            var _ref, f;
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.pushFile(this.pos.file);
            }
            if ((_ref = options.sourceMap) != null) {
              _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
            }
            if (this.op === ".") {
              f = compileAccess;
            } else {
              f = compileOther;
            }
            f(
              this.op,
              this.left,
              this.right,
              options,
              level,
              lineStart,
              sb
            );
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.popFile();
            }
          };
          _Binary_prototype.compileAsBlock = function (options, level, lineStart, sb) {
            var _ref;
            if (__owns.call(ASSIGNMENT_OPS, this.op) || (_ref = this.op) === "." || _ref === "&&" || _ref === "||") {
              _Expression_prototype.compileAsBlock.call(
                this,
                options,
                level,
                lineStart,
                sb
              );
            } else {
              BlockExpression(this.pos, [this.left, this.right]).compileAsBlock(options, level, lineStart, sb);
            }
          };
          _Binary_prototype.compileAsStatement = function (options, lineStart, sb) {
            var _this, left, op;
            _this = this;
            left = this.left;
            op = this.op;
            if (__owns.call(ASSIGNMENT_OPS, op)) {
              if (left instanceof Ident && typeof this.right.toStatement === "function" && false) {
                this.right.toStatement().mutateLast(
                  function (node) {
                    return Binary(_this.pos, left, op, node);
                  },
                  { noop: true }
                ).compileAsStatement(options, lineStart, sb);
              } else {
                _Expression_prototype.compileAsStatement.call(this, options, lineStart, sb);
              }
            } else if (this.op === "&&") {
              IfStatement(this.pos, this.left, this.right).compileAsStatement(options, lineStart, sb);
            } else if (this.op === "||") {
              IfStatement(
                this.pos,
                Unary(this.pos, "!", this.left),
                this.right
              ).compileAsStatement(options, lineStart, sb);
            } else if (op === ".") {
              _Expression_prototype.compileAsStatement.call(this, options, lineStart, sb);
            } else {
              BlockStatement(this.pos, [this.left, this.right]).compileAsStatement(options, lineStart, sb);
            }
          };
          ASSIGNMENT_OPS = {
            "=": true,
            "+=": true,
            "-=": true,
            "*=": true,
            "/=": true,
            "%=": true,
            "<<=": true,
            ">>=": true,
            ">>>=": true,
            "&=": true,
            "^=": true,
            "|=": true
          };
          _Binary_prototype.isAssign = function () {
            return __owns.call(ASSIGNMENT_OPS, this.op);
          };
          OPERATOR_PRECEDENCE = {
            ".": 18,
            "*": 15,
            "/": 15,
            "%": 15,
            "+": 14,
            "-": 14,
            "<<": 13,
            ">>": 13,
            ">>>": 13,
            "<": 12,
            "<=": 12,
            ">": 12,
            ">=": 12,
            "in": 12,
            "instanceof": 12,
            "==": 11,
            "!=": 11,
            "===": 11,
            "!==": 11,
            "&": 9,
            "^": 10,
            "|": 8,
            "&&": 7,
            "||": 6,
            "=": 4,
            "+=": 4,
            "-=": 4,
            "*=": 4,
            "/=": 4,
            "%=": 4,
            "<<=": 4,
            ">>=": 4,
            ">>>=": 4,
            "&=": 4,
            "^=": 4,
            "|=": 4
          };
          LEVEL_TO_ASSOCIATIVITY = {
            11: "paren",
            12: "paren",
            14: "left",
            15: "left",
            9: "none",
            8: "none",
            10: "none",
            13: "left",
            4: "right"
          };
          _Binary_prototype.isLarge = function () {
            var _ref;
            if ((_ref = this._isLarge) == null) {
              return this._isLarge = !this.left.isSmall() || !this.right.isSmall();
            } else {
              return _ref;
            }
          };
          _Binary_prototype.isSmall = function () {
            var _ref;
            if ((_ref = this._isSmall) == null) {
              return this._isSmall = this.left.isSmall() && this.right.isSmall();
            } else {
              return _ref;
            }
          };
          _Binary_prototype.isNoop = function () {
            var _ref;
            if ((_ref = this._isNoop) == null) {
              return this._isNoop = !__owns.call(ASSIGNMENT_OPS, this.op) && this.op !== "." && this.left.isNoop() && this.right.isNoop();
            } else {
              return _ref;
            }
          };
          _Binary_prototype.walk = function (walker) {
            var _ref, changed, left, right;
            changed = false;
            if ((_ref = walker(this.left, this, "left")) != null) {
              left = _ref;
            } else {
              left = this.left.walk(walker);
            }
            if ((_ref = walker(this.right, this, "right")) != null) {
              right = _ref;
            } else {
              right = this.right.walk(walker);
            }
            if (this.left !== left || this.right !== right) {
              return Binary(this.pos, left, this.op, right);
            } else {
              return this;
            }
          };
          _Binary_prototype.typeId = 3;
          _Binary_prototype._toAst = function (pos, ident) {
            return [
              this.left.toAst(pos, ident),
              Const(pos, this.op),
              this.right.toAst(pos, ident)
            ];
          };
          Binary._fromAst = function (pos, left, op, right) {
            return Binary(pos, left, op, right);
          };
          _Binary_prototype._toJSON = function () {
            var result;
            result = [
              simplify(this.left, 0),
              this.op
            ];
            if (simplify(this.right)) {
              result.push.apply(result, __toArray(this.right.toJSON()));
            }
            return result;
          };
          Binary.fromJSON = function (line, column, file, left, op) {
            var right;
            right = __slice.call(arguments, 5);
            return Binary(
              makePos(line, column, file),
              fromJSON(left),
              op,
              fromJSON(right)
            );
          };
          return Binary;
        }(Expression));
        exports.BlockStatement = BlockStatement = (function (Statement) {
          var _BlockStatement_prototype, _Statement_prototype;
          function BlockStatement(pos, body, label) {
            var _i, _len, _this, item, result, statement;
            _this = this instanceof BlockStatement ? this : __create(_BlockStatement_prototype);
            _this.pos = pos;
            if (body == null) {
              body = [];
            }
            if (label == null) {
              label = null;
            }
            _this.label = label;
            result = [];
            for (_i = 0, _len = body.length; _i < _len; ++_i) {
              item = body[_i];
              statement = item.maybeToStatement();
              if (statement instanceof BlockStatement && !statement.label && (statement.pos.file === pos.file || !statement.pos.file)) {
                result.push.apply(result, __toArray(statement.body));
              } else if (!(statement instanceof Noop)) {
                result.push(statement);
              }
              if (statement.exitType() != null) {
                break;
              }
            }
            switch (result.length) {
            case 0: return Noop(pos);
            case 1:
              if (pos.file && !result[0].pos.file) {
                result[0].pos.file = pos.file;
              }
              return result[0];
            default: _this.body = result;
            }
            return _this;
          }
          _Statement_prototype = Statement.prototype;
          _BlockStatement_prototype = BlockStatement.prototype = __create(_Statement_prototype);
          _BlockStatement_prototype.constructor = BlockStatement;
          BlockStatement.displayName = "BlockStatement";
          if (typeof Statement.extended === "function") {
            Statement.extended(BlockStatement);
          }
          _BlockStatement_prototype.compile = function (options, level, lineStart, sb) {
            var _arr, _arr2, _i, _len, _ref, childOptions, i, item, minify, node,
                nodes;
            if (level !== 1) {
              throw Error("Cannot compile a statement except on the Block level");
            }
            for (_arr = [], _arr2 = __toArray(this.body), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
              node = _arr2[_i];
              if (!node.isNoop()) {
                _arr.push(node);
              }
            }
            nodes = _arr;
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.pushFile(this.pos.file);
            }
            if ((_ref = options.sourceMap) != null) {
              _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
            }
            if (this.label != null) {
              childOptions = incIndent(options);
            } else {
              childOptions = options;
            }
            minify = options.minify;
            if (this.label != null) {
              this.label.compile(options, level, lineStart, sb);
              lineStart = false;
              sb(":");
              if (!minify) {
                sb(" ");
              }
              sb("{");
              if (!minify) {
                sb(options.linefeed || "\n");
                sb.indent(childOptions.indent);
                lineStart = true;
              }
            }
            for (i = 0, _len = nodes.length; i < _len; ++i) {
              item = nodes[i];
              if (i > 0 && !minify) {
                sb(options.linefeed || "\n");
                sb.indent(childOptions.indent);
                lineStart = true;
              }
              item.compileAsStatement(childOptions, lineStart, sb);
              lineStart = false;
            }
            if (this.label != null) {
              if (!minify) {
                sb(options.linefeed || "\n");
                sb.indent(options.indent);
              }
              sb("}");
            }
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.popFile();
            }
          };
          _BlockStatement_prototype.walk = function (walker) {
            var _ref, body, label;
            body = walkArray(this.body, this, "node", walker);
            if (this.label != null) {
              if ((_ref = walker(this.label, this, "label")) != null) {
                label = _ref;
              } else {
                label = this.label.walk(walker, this);
              }
            } else {
              label = this.label;
            }
            if (this.body !== body || this.label !== label) {
              return Block(this.pos, body, label);
            } else {
              return this;
            }
          };
          _BlockStatement_prototype.mutateLast = function (func, options) {
            var body, last, newLast;
            last = this.last();
            newLast = last.mutateLast(func, options);
            if (last !== newLast) {
              body = __slice.call(this.body, 0, -1);
              body.push(newLast);
              return Block(this.pos, body);
            } else {
              return this;
            }
          };
          _BlockStatement_prototype.exitType = function () {
            return this.last().exitType();
          };
          _BlockStatement_prototype.last = function () {
            var _ref;
            return (_ref = this.body)[_ref.length - 1];
          };
          _BlockStatement_prototype.isNoop = function () {
            var _arr, _every, _i, _ref, node;
            if ((_ref = this._isNoop) == null) {
              _every = true;
              for (_arr = __toArray(this.body), _i = _arr.length; _i--; ) {
                node = _arr[_i];
                if (!node.isNoop()) {
                  _every = false;
                  break;
                }
              }
              return this._isNoop = _every;
            } else {
              return _ref;
            }
          };
          _BlockStatement_prototype.typeId = 4;
          _BlockStatement_prototype._toAst = function (pos, ident) {
            var _this;
            _this = this;
            return [
              this.label != null ? this.label.toAst(pos, ident) : Const(pos, 0)
            ].concat((function () {
              var _arr, _arr2, _i, _len, node;
              for (_arr = [], _arr2 = __toArray(_this.body), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                node = _arr2[_i];
                _arr.push(node.toAst(pos, ident));
              }
              return _arr;
            }()));
          };
          BlockStatement._fromAst = function (pos, label) {
            var nodes;
            nodes = __slice.call(arguments, 2);
            return BlockStatement(pos, nodes, label || null);
          };
          _BlockStatement_prototype._toJSON = function () {
            return [this.label || 0].concat(__toArray(this.body));
          };
          BlockStatement.fromJSON = function (line, column, file, label) {
            var body;
            body = __slice.call(arguments, 4);
            return BlockStatement(
              makePos(line, column, file),
              arrayFromJSON(body),
              label ? fromJSON(label) : null
            );
          };
          return BlockStatement;
        }(Statement));
        exports.BlockExpression = BlockExpression = (function (Expression) {
          var _BlockExpression_prototype, _Expression_prototype;
          function BlockExpression(pos, body) {
            var _this, i, item, len, result;
            _this = this instanceof BlockExpression ? this : __create(_BlockExpression_prototype);
            _this.pos = pos;
            if (body == null) {
              body = [];
            }
            result = [];
            for (i = 0, len = body.length; i < len; ++i) {
              item = body[i];
              if (i === len - 1 || !(!item instanceof Noop)) {
                if (item instanceof BlockExpression && (item.pos.file === pos.file || !item.pos.file)) {
                  result.push.apply(result, __toArray(item.body));
                  if (i < len - 1 && result[result.length - 1] instanceof Noop) {
                    result.pop();
                  }
                } else if (!(item instanceof Noop)) {
                  result.push(item);
                }
              }
            }
            switch (result.length) {
            case 0: return Noop(pos);
            case 1:
              if (pos.file && !result[0].pos.file) {
                result[0].pos.file = pos.file;
              }
              return result[0];
            default: _this.body = result;
            }
            return _this;
          }
          _Expression_prototype = Expression.prototype;
          _BlockExpression_prototype = BlockExpression.prototype = __create(_Expression_prototype);
          _BlockExpression_prototype.constructor = BlockExpression;
          BlockExpression.displayName = "BlockExpression";
          if (typeof Expression.extended === "function") {
            Expression.extended(BlockExpression);
          }
          _BlockExpression_prototype.toStatement = function () {
            return BlockStatement(this.pos, this.body);
          };
          _BlockExpression_prototype.compile = function (options, level, lineStart, sb) {
            var _arr, _arr2, _len, _ref, i, item, len, node, nodes, wrap;
            if (level === 1) {
              this.toStatement().compile(options, level, lineStart, sb);
            } else {
              for (_arr = [], _arr2 = __toArray(this.body), i = 0, len = _arr2.length; i < len; ++i) {
                node = _arr2[i];
                if (!node.isNoop() || i === len - 1) {
                  _arr.push(node);
                }
              }
              nodes = _arr;
              if (options.sourceMap != null && this.pos.file) {
                options.sourceMap.pushFile(this.pos.file);
              }
              if ((_ref = options.sourceMap) != null) {
                _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
              }
              wrap = level > 2 && nodes.length > 1;
              if (wrap) {
                sb("(");
              }
              for (i = 0, _len = nodes.length; i < _len; ++i) {
                item = nodes[i];
                if (i > 0) {
                  sb(",");
                  if (!options.minify) {
                    sb(" ");
                  }
                }
                item.compile(
                  options,
                  wrap ? 3 : level,
                  false,
                  sb
                );
              }
              if (wrap) {
                sb(")");
              }
              if (options.sourceMap != null && this.pos.file) {
                options.sourceMap.popFile();
              }
            }
          };
          _BlockExpression_prototype.compileAsBlock = function (options, level, lineStart, sb) {
            var _arr, _arr2, _len, _ref, i, item, len, node, nodes, wrap;
            if (level === 1) {
              this.compile(options, level, lineStart, sb);
            } else {
              for (_arr = [], _arr2 = __toArray(this.body), i = 0, len = _arr2.length; i < len; ++i) {
                node = _arr2[i];
                if (!node.isNoop()) {
                  _arr.push(node);
                }
              }
              nodes = _arr;
              if (options.sourceMap != null && this.pos.file) {
                options.sourceMap.pushFile(this.pos.file);
              }
              if ((_ref = options.sourceMap) != null) {
                _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
              }
              wrap = level > 2 && nodes.length > 1;
              if (wrap) {
                sb("(");
              }
              for (i = 0, _len = nodes.length; i < _len; ++i) {
                item = nodes[i];
                if (i > 0) {
                  sb(", ");
                }
                item.compileAsBlock(
                  options,
                  wrap ? 3 : level,
                  false,
                  sb
                );
              }
              if (wrap) {
                sb(")");
              }
              if (options.sourceMap != null && this.pos.file) {
                options.sourceMap.popFile();
              }
            }
          };
          _BlockExpression_prototype.isLarge = function () {
            var _ref, _this;
            _this = this;
            if ((_ref = this._isLarge) == null) {
              return this._isLarge = this.body.length > 4 || (function () {
                var _arr, _i, _some, part;
                _some = false;
                for (_arr = __toArray(_this.body), _i = _arr.length; _i--; ) {
                  part = _arr[_i];
                  if (part.isLarge()) {
                    _some = true;
                    break;
                  }
                }
                return _some;
              }());
            } else {
              return _ref;
            }
          };
          _BlockExpression_prototype.isSmall = function () {
            return false;
          };
          _BlockExpression_prototype.isNoop = function () {
            var _arr, _every, _i, _ref, node;
            if ((_ref = this._isNoop) == null) {
              _every = true;
              for (_arr = __toArray(this.body), _i = _arr.length; _i--; ) {
                node = _arr[_i];
                if (!node.isNoop()) {
                  _every = false;
                  break;
                }
              }
              return this._isNoop = _every;
            } else {
              return _ref;
            }
          };
          _BlockExpression_prototype.walk = BlockStatement.prototype.walk;
          _BlockExpression_prototype.last = function () {
            var _ref;
            return (_ref = this.body)[_ref.length - 1];
          };
          _BlockExpression_prototype.typeId = 5;
          _BlockExpression_prototype._toAst = function (pos, ident) {
            var _arr, _arr2, _i, _len, node;
            for (_arr = [], _arr2 = __toArray(this.body), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
              node = _arr2[_i];
              _arr.push(node.toAst(pos, ident));
            }
            return _arr;
          };
          BlockExpression._fromAst = function (pos) {
            var nodes;
            nodes = __slice.call(arguments, 1);
            return BlockExpression(pos, nodes);
          };
          _BlockExpression_prototype._toJSON = function () {
            return this.body;
          };
          BlockExpression.fromJSON = function (line, column, file) {
            var body;
            body = __slice.call(arguments, 3);
            return BlockExpression(
              makePos(line, column, file),
              arrayFromJSON(body)
            );
          };
          return BlockExpression;
        }(Expression));
        Block = exports.Block = function (pos, body, label) {
          if (body == null) {
            body = [];
          }
          if (label == null) {
            label = null;
          }
          if (body.length === 0) {
            return Noop(pos);
          } else if (label == null && (function () {
            var _every, _i, item;
            _every = true;
            for (_i = body.length; _i--; ) {
              item = body[_i];
              if (!(item instanceof Expression)) {
                _every = false;
                break;
              }
            }
            return _every;
          }())) {
            return BlockExpression(pos, body);
          } else {
            return BlockStatement(pos, body, label);
          }
        };
        exports.Break = Break = (function (Statement) {
          var _Break_prototype, _Statement_prototype;
          function Break(pos, label) {
            var _this;
            _this = this instanceof Break ? this : __create(_Break_prototype);
            _this.pos = pos;
            if (label == null) {
              label = null;
            }
            _this.label = label;
            return _this;
          }
          _Statement_prototype = Statement.prototype;
          _Break_prototype = Break.prototype = __create(_Statement_prototype);
          _Break_prototype.constructor = Break;
          Break.displayName = "Break";
          if (typeof Statement.extended === "function") {
            Statement.extended(Break);
          }
          _Break_prototype.compile = function (options, level, lineStart, sb) {
            var _ref;
            if (level !== 1) {
              throw Error("Cannot compile a statement except on the Block level");
            }
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.pushFile(this.pos.file);
            }
            if ((_ref = options.sourceMap) != null) {
              _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
            }
            sb("break");
            if (this.label != null) {
              sb(" ");
              this.label.compile(options, 2, false, sb);
            }
            sb(";");
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.popFile(this.pos.file);
            }
          };
          _Break_prototype.walk = function () {
            return this;
          };
          _Break_prototype.exitType = function () {
            return "break";
          };
          _Break_prototype.walk = function (walker) {
            var _ref, label;
            if (this.label != null) {
              if ((_ref = walker(this.label, this, "label")) != null) {
                label = _ref;
              } else {
                label = this.label.walk(walker);
              }
            } else {
              label = this.label;
            }
            if (label !== this.label) {
              return Break(this.pos, label);
            } else {
              return this;
            }
          };
          _Break_prototype.isLarge = function () {
            return false;
          };
          _Break_prototype.typeId = 6;
          _Break_prototype._toAst = function (pos, ident) {
            if (this.label != null) {
              return [this.label.toAst(pos, ident)];
            } else {
              return [];
            }
          };
          Break._fromAst = function (pos, label) {
            return Break(pos, label);
          };
          _Break_prototype._toJSON = function () {
            if (this.label != null) {
              return [this.label];
            } else {
              return [];
            }
          };
          Break.fromJSON = function (line, column, file, label) {
            return Break(
              makePos(line, column, file),
              label ? fromJSON(label) : null
            );
          };
          return Break;
        }(Statement));
        exports.Call = Call = (function (Expression) {
          var _Call_prototype, _Expression_prototype;
          function Call(pos, func, args, isNew) {
            var _this;
            _this = this instanceof Call ? this : __create(_Call_prototype);
            _this.pos = pos;
            if (func == null) {
              func = Noop(pos);
            }
            _this.func = func;
            if (args == null) {
              args = [];
            }
            _this.args = args;
            if (isNew == null) {
              isNew = false;
            }
            _this.isNew = isNew;
            return _this;
          }
          _Expression_prototype = Expression.prototype;
          _Call_prototype = Call.prototype = __create(_Expression_prototype);
          _Call_prototype.constructor = Call;
          Call.displayName = "Call";
          if (typeof Expression.extended === "function") {
            Expression.extended(Call);
          }
          function compileLarge(args, options, level, lineStart, sb) {
            var _arr, childOptions, i, item, len;
            sb("(");
            childOptions = incIndent(options);
            for (_arr = __toArray(args), i = 0, len = _arr.length; i < len; ++i) {
              item = _arr[i];
              sb(options.linefeed || "\n");
              sb.indent(childOptions.indent);
              item.compile(childOptions, 3, false, sb);
              if (i < len - 1) {
                sb(",");
              }
            }
            sb(options.linefeed || "\n");
            sb.indent(options.indent);
            sb(")");
          }
          function compileSmall(args, options, level, lineStart, sb) {
            var _arr, _len, arg, i;
            sb("(");
            for (_arr = __toArray(args), i = 0, _len = _arr.length; i < _len; ++i) {
              arg = _arr[i];
              if (i > 0) {
                sb(",");
                if (!options.minify) {
                  sb(" ");
                }
              }
              arg.compile(options, 3, false, sb);
            }
            sb(")");
          }
          _Call_prototype.compile = function (options, level, lineStart, sb) {
            var _ref, f, wrap;
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.pushFile(this.pos.file);
            }
            if ((_ref = options.sourceMap) != null) {
              _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
            }
            wrap = level > 18 || !this.isNew && (this.func instanceof Func || this.func instanceof Binary && this.func.op === "." && this.func.left instanceof Func);
            if (wrap) {
              sb("(");
            }
            if (this.isNew) {
              sb("new ");
            }
            this.func.compile(
              options,
              this.isNew ? 19 : 18,
              lineStart && !wrap && !this.isNew,
              sb
            );
            if (!options.minify && this.shouldCompileLarge()) {
              f = compileLarge;
            } else {
              f = compileSmall;
            }
            f(
              this.args,
              options,
              level,
              lineStart,
              sb
            );
            if (wrap) {
              sb(")");
            }
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.popFile();
            }
          };
          _Call_prototype.shouldCompileLarge = function () {
            var _arr, _i, _len, _some, arg;
            if (this.args.length > 4) {
              return true;
            } else {
              _some = false;
              for (_arr = __toArray(this.args), _len = _arr.length, _i = _len - 2; _i >= 0; --_i) {
                arg = _arr[_i];
                if (!arg.isSmall()) {
                  _some = true;
                  break;
                }
              }
              return _some;
            }
          };
          _Call_prototype.hasLargeArgs = function () {
            var _arr, _i, _ref, _some, arg;
            if ((_ref = this._hasLargeArgs) == null) {
              if (this.args.length > 4) {
                return this._hasLargeArgs = true;
              } else {
                _some = false;
                for (_arr = __toArray(this.args), _i = _arr.length; _i--; ) {
                  arg = _arr[_i];
                  if (!arg.isSmall()) {
                    _some = true;
                    break;
                  }
                }
                return this._hasLargeArgs = _some;
              }
            } else {
              return _ref;
            }
          };
          _Call_prototype.isLarge = function () {
            return this.func.isLarge() || this.hasLargeArgs();
          };
          _Call_prototype.isSmall = function () {
            var _ref;
            if ((_ref = this._isSmall) == null) {
              if (!this.func.isSmall()) {
                return this._isSmall = false;
              } else {
                switch (this.args.length) {
                case 0: return this._isSmall = true;
                case 1: return this._isSmall = this.args[0].isSmall();
                default: return this._isSmall = false;
                }
              }
            } else {
              return _ref;
            }
          };
          _Call_prototype.walk = function (walker) {
            var _ref, args, func;
            if ((_ref = walker(this.func, this, "func")) != null) {
              func = _ref;
            } else {
              func = this.func.walk(walker);
            }
            args = walkArray(this.args, this, "arg", walker);
            if (this.func !== func || this.args !== args) {
              return Call(this.pos, func, args, this.isNew);
            } else {
              return this;
            }
          };
          _Call_prototype.typeId = 7;
          _Call_prototype._toAst = function (pos, ident) {
            var _this;
            _this = this;
            return [
              this.func.toAst(pos, ident),
              Const(pos, this.isNew ? 1 : 0)
            ].concat((function () {
              var _arr, _arr2, _i, _len, arg;
              for (_arr = [], _arr2 = __toArray(_this.args), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                arg = _arr2[_i];
                _arr.push(arg.toAst(pos, ident));
              }
              return _arr;
            }()));
          };
          Call._fromAst = function (pos, func, isNew) {
            var args;
            args = __slice.call(arguments, 3);
            return Call(pos, func, args, !!isNew);
          };
          _Call_prototype._toJSON = function () {
            return [
              simplify(this.func, 0),
              this.isNew ? 1 : 0
            ].concat(__toArray(simplifyArray(this.args, 0)));
          };
          Call.fromJSON = function (line, column, file, func, isNew) {
            var args;
            args = __slice.call(arguments, 5);
            return Call(
              makePos(line, column, file),
              fromJSON(func),
              arrayFromJSON(args),
              !!isNew
            );
          };
          return Call;
        }(Expression));
        exports.Comment = Comment = (function (Statement) {
          var _Comment_prototype, _Statement_prototype;
          function Comment(pos, text) {
            var _this;
            _this = this instanceof Comment ? this : __create(_Comment_prototype);
            _this.pos = pos;
            _this.text = text;
            if (text.substring(0, 2) !== "/*") {
              throw Error("Expected text to start with '/*'");
            }
            if (text.slice(-2) !== "*/") {
              throw Error("Expected text to end with '*/'");
            }
            return _this;
          }
          _Statement_prototype = Statement.prototype;
          _Comment_prototype = Comment.prototype = __create(_Statement_prototype);
          _Comment_prototype.constructor = Comment;
          Comment.displayName = "Comment";
          if (typeof Statement.extended === "function") {
            Statement.extended(Comment);
          }
          _Comment_prototype.compile = function (options, level, lineStart, sb) {
            var _arr, _len, i, line, lines;
            lines = this.text.split("\n");
            for (_arr = __toArray(lines), i = 0, _len = _arr.length; i < _len; ++i) {
              line = _arr[i];
              if (i > 0) {
                sb(options.linefeed || "\n");
                if (!options.minify) {
                  sb.indent(options.indent);
                }
              }
              sb(line);
            }
          };
          _Comment_prototype.isConst = function () {
            return true;
          };
          _Comment_prototype.constValue = function () {
            return;
          };
          _Comment_prototype.isNoop = function () {
            return false;
          };
          _Comment_prototype.walk = function () {
            return this;
          };
          _Comment_prototype.typeId = 8;
          _Comment_prototype._toAst = function (pos, ident) {
            return [Const(pos, this.text)];
          };
          Comment._fromAst = function (pos, text) {
            return Comment(pos, text);
          };
          _Comment_prototype._toJSON = function () {
            return [this.text];
          };
          Comment.fromJSON = function (line, column, file, text) {
            return Comment(
              makePos(line, column, file),
              text
            );
          };
          return Comment;
        }(Statement));
        exports.Const = Const = (function (Expression) {
          var _Const_prototype, _Expression_prototype;
          function Const(pos, value) {
            var _this;
            _this = this instanceof Const ? this : __create(_Const_prototype);
            _this.pos = pos;
            _this.value = value;
            return _this;
          }
          _Expression_prototype = Expression.prototype;
          _Const_prototype = Const.prototype = __create(_Expression_prototype);
          _Const_prototype.constructor = Const;
          Const.displayName = "Const";
          if (typeof Expression.extended === "function") {
            Expression.extended(Const);
          }
          _Const_prototype.compile = function (options, level, lineStart, sb) {
            var _ref, value, wrap;
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.pushFile(this.pos.file);
            }
            if ((_ref = options.sourceMap) != null) {
              _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
            }
            value = this.value;
            if (value === void 0 && options.undefinedName != null) {
              sb(options.undefinedName);
            } else {
              wrap = level >= 17 && (value === void 0 || typeof value === "number" && !isFinite(value));
              if (wrap) {
                sb("(");
              }
              sb(toJSSource(value));
              if (wrap) {
                sb(")");
              }
            }
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.popFile();
            }
          };
          _Const_prototype.compileAsBlock = function (options, level, lineStart, sb) {
            Noop(this.pos).compileAsBlock(options, level, lineStart, sb);
          };
          _Const_prototype.isConst = function () {
            return true;
          };
          _Const_prototype.isNoop = Const.prototype.isConst;
          _Const_prototype.constValue = function () {
            return this.value;
          };
          _Const_prototype.isLarge = function () {
            return typeof this.value === "string" && (this.value.match(/\n/) || this.value.length > 50);
          };
          _Const_prototype.inspect = function (depth) {
            return _Expression_prototype.inspect.call(this, depth, true);
          };
          _Const_prototype.walk = function () {
            return this;
          };
          _Const_prototype.typeId = 9;
          _Const_prototype._toAst = function (pos, ident) {
            if (this.value === void 0) {
              return [];
            } else {
              return [Const(pos, this.value)];
            }
          };
          Const._fromAst = function (pos, value) {
            return Const(pos, value);
          };
          _Const_prototype._toJSON = function () {
            if (typeof this.value === "number" && !isFinite(this.value)) {
              return [
                this.value > 0 ? 1 : this.value < 0 ? -1 : 0,
                1
              ];
            } else if (this.value === 0 && isNegative(this.value)) {
              return [0, 2];
            } else if (this.value === void 0) {
              return [];
            } else {
              return [this.value];
            }
          };
          Const.fromJSON = function (line, column, file, value, state) {
            return Const(
              makePos(line, column, file),
              state === 1 ? value / 0 : value === 0 && state === 2 ? -0 : value
            );
          };
          return Const;
        }(Expression));
        exports.Continue = Continue = (function (Statement) {
          var _Continue_prototype, _Statement_prototype;
          function Continue(pos, label) {
            var _this;
            _this = this instanceof Continue ? this : __create(_Continue_prototype);
            _this.pos = pos;
            if (label == null) {
              label = null;
            }
            _this.label = label;
            return _this;
          }
          _Statement_prototype = Statement.prototype;
          _Continue_prototype = Continue.prototype = __create(_Statement_prototype);
          _Continue_prototype.constructor = Continue;
          Continue.displayName = "Continue";
          if (typeof Statement.extended === "function") {
            Statement.extended(Continue);
          }
          _Continue_prototype.compile = function (options, level, lineStart, sb) {
            var _ref;
            if (level !== 1) {
              throw Error("Cannot compile a statement except on the Block level");
            }
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.pushFile(this.pos.file);
            }
            if ((_ref = options.sourceMap) != null) {
              _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
            }
            sb("continue");
            if (this.label != null) {
              sb(" ");
              this.label.compile(options, 2, false, sb);
            }
            sb(";");
            if (options.sourceMap != null && this.pos.file) {
              return options.sourceMap.popFile();
            }
          };
          _Continue_prototype.walk = function () {
            return this;
          };
          _Continue_prototype.exitType = function () {
            return "continue";
          };
          _Continue_prototype.isLarge = function () {
            return false;
          };
          _Continue_prototype.walk = function (walker) {
            var _ref, label;
            if (this.label != null) {
              if ((_ref = walker(this.label, this, "label")) != null) {
                label = _ref;
              } else {
                label = this.label.walk(walker);
              }
            } else {
              label = this.label;
            }
            if (label !== this.label) {
              return Continue(this.pop, label);
            } else {
              return this;
            }
          };
          _Continue_prototype.typeId = 10;
          _Continue_prototype._toAst = function (pos, ident) {
            if (this.label != null) {
              return [this.label.toAst(pos, ident)];
            } else {
              return [];
            }
          };
          Continue._fromAst = function (pos, label) {
            return Continue(pos, label);
          };
          _Continue_prototype._toJSON = function () {
            if (this.label != null) {
              return [this.label];
            } else {
              return [];
            }
          };
          Continue.fromJSON = function (line, column, file, label) {
            return Continue(
              makePos(line, column, file),
              label ? fromJSON(label) : null
            );
          };
          return Continue;
        }(Statement));
        exports.Debugger = Debugger = (function (Statement) {
          var _Debugger_prototype, _Statement_prototype;
          function Debugger(pos) {
            var _this;
            _this = this instanceof Debugger ? this : __create(_Debugger_prototype);
            _this.pos = pos;
            return _this;
          }
          _Statement_prototype = Statement.prototype;
          _Debugger_prototype = Debugger.prototype = __create(_Statement_prototype);
          _Debugger_prototype.constructor = Debugger;
          Debugger.displayName = "Debugger";
          if (typeof Statement.extended === "function") {
            Statement.extended(Debugger);
          }
          _Debugger_prototype.compile = function (options, level, lineStart, sb) {
            var _ref;
            if (level !== 1) {
              throw Error("Cannot compile a statement except on the Block level");
            }
            if ((_ref = options.sourceMap) != null) {
              _ref.add(
                sb.line,
                sb.column,
                this.pos.line,
                this.pos.column,
                this.pos.file
              );
            }
            return sb("debugger;");
          };
          _Debugger_prototype.walk = function () {
            return this;
          };
          _Debugger_prototype.isLarge = function () {
            return false;
          };
          _Debugger_prototype.typeId = 11;
          Debugger._fromAst = function (pos) {
            return Debugger(pos);
          };
          Debugger.fromJSON = function (line, column, file) {
            return Debugger(makePos(line, column, file));
          };
          return Debugger;
        }(Statement));
        exports.DoWhile = DoWhile = (function (Statement) {
          var _DoWhile_prototype, _Statement_prototype;
          function DoWhile(pos, body, test, label) {
            var _this;
            _this = this instanceof DoWhile ? this : __create(_DoWhile_prototype);
            _this.pos = pos;
            if (body == null) {
              body = Noop(pos);
            }
            if (test == null) {
              test = Noop(pos);
            }
            _this.test = test;
            if (label == null) {
              label = null;
            }
            _this.label = label;
            _this.body = body.maybeToStatement();
            if (test.isConst() && !test.constValue()) {
              return Block(pos, [_this.body], label);
            }
            return _this;
          }
          _Statement_prototype = Statement.prototype;
          _DoWhile_prototype = DoWhile.prototype = __create(_Statement_prototype);
          _DoWhile_prototype.constructor = DoWhile;
          DoWhile.displayName = "DoWhile";
          if (typeof Statement.extended === "function") {
            Statement.extended(DoWhile);
          }
          _DoWhile_prototype.compile = function (options, level, lineStart, sb) {
            var _ref, minify;
            if (level !== 1) {
              throw Error("Cannot compile a statement except on the Block level");
            }
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.pushFile(this.pos.file);
            }
            if ((_ref = options.sourceMap) != null) {
              _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
            }
            minify = options.minify;
            if (this.label != null) {
              this.label.compile(options, level, lineStart, sb);
              lineStart = false;
              sb(":");
              if (!minify) {
                sb(" ");
              }
            }
            sb("do");
            if (this.body.isNoop()) {
              sb(";");
            } else {
              if (!minify) {
                sb(" ");
              }
              sb("{");
              if (!minify) {
                sb(options.linefeed || "\n");
                sb.indent(+options.indent + 1);
                lineStart = true;
              }
              this.body.compileAsStatement(incIndent(options), lineStart, sb);
              lineStart = false;
              if (!minify) {
                sb(options.linefeed || "\n");
                sb.indent(options.indent);
              }
              sb("}");
            }
            if (!minify) {
              sb(" ");
            }
            sb("while");
            if (!minify) {
              sb(" ");
            }
            sb("(");
            this.test.compile(options, 2, false, sb);
            sb(");");
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.popFile();
            }
          };
          _DoWhile_prototype.walk = function (walker) {
            var _ref, body, label, test;
            if ((_ref = walker(this.body, this, "body")) != null) {
              body = _ref;
            } else {
              body = this.body.walk(walker);
            }
            if ((_ref = walker(this.test, this, "test")) != null) {
              test = _ref;
            } else {
              test = this.test.walk(walker);
            }
            if (this.label != null) {
              if ((_ref = walker(this.label, this, "label")) != null) {
                label = _ref;
              } else {
                label = this.label.walk(walker);
              }
            } else {
              label = this.label;
            }
            if (body !== this.body || test !== this.test || label !== this.label) {
              return DoWhile(this.pos, body, test, label);
            } else {
              return this;
            }
          };
          _DoWhile_prototype.typeId = 12;
          _DoWhile_prototype._toAst = function (pos, ident) {
            return [
              this.test.toAst(pos, ident),
              this.body.toAst(pos, ident)
            ].concat(this.label != null
              ? [this.label.toAst(pos, ident)]
              : []);
          };
          DoWhile._fromAst = function (pos, test, body, label) {
            return DoWhile(pos, test, body, label);
          };
          _DoWhile_prototype._toJSON = function () {
            return [
              this.label || 0,
              simplify(this.test, 0),
              simplify(this.body, 0)
            ];
          };
          DoWhile.fromJSON = function (line, column, file, label, test, body) {
            return DoWhile(
              makePos(line, column, file),
              fromJSON(body),
              fromJSON(test),
              label ? fromJSON(label) : null
            );
          };
          return DoWhile;
        }(Statement));
        exports.Eval = Eval = (function (Expression) {
          var _Eval_prototype, _Expression_prototype;
          function Eval(pos, code) {
            var _this;
            _this = this instanceof Eval ? this : __create(_Eval_prototype);
            _this.pos = pos;
            if (code == null) {
              code = Noop(pos);
            }
            if (!(code instanceof Expression)) {
              code = toConst(pos, code);
            }
            _this.code = code;
            return _this;
          }
          _Expression_prototype = Expression.prototype;
          _Eval_prototype = Eval.prototype = __create(_Expression_prototype);
          _Eval_prototype.constructor = Eval;
          Eval.displayName = "Eval";
          if (typeof Expression.extended === "function") {
            Expression.extended(Eval);
          }
          _Eval_prototype.compile = function (options, level, lineStart, sb) {
            var _ref;
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.pushFile(this.pos.file);
            }
            if ((_ref = options.sourceMap) != null) {
              _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
            }
            if (this.code instanceof Const) {
              sb(String(this.code.value));
            } else {
              sb("eval(");
              this.code.compile(options, 3, false, sb);
              sb(")");
            }
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.popFile();
            }
          };
          _Eval_prototype.walk = function (walker) {
            var _ref, code;
            if ((_ref = walker(this.code, this, "code")) != null) {
              code = _ref;
            } else {
              code = this.code.walk(walker);
            }
            if (code !== this.code) {
              return Eval(this.pops, code);
            } else {
              return this;
            }
          };
          _Eval_prototype.isLarge = function () {
            return this.code.isLarge();
          };
          _Eval_prototype.typeId = 13;
          _Eval_prototype._toAst = function (pos, ident) {
            return [this.code.toAst(pos, ident)];
          };
          Eval._fromAst = function (pos, code) {
            return Eval(pos, code);
          };
          _Eval_prototype._toJSON = function () {
            return [simplify(this.code, 0)];
          };
          Eval.fromJSON = function (line, column, file, code) {
            return Eval(
              makePos(line, column, file),
              fromJSON(code)
            );
          };
          return Eval;
        }(Expression));
        exports.For = For = (function (Statement) {
          var _For_prototype, _Statement_prototype;
          function For(pos, init, test, step, body, label) {
            var _this;
            _this = this instanceof For ? this : __create(_For_prototype);
            _this.pos = pos;
            if (init == null) {
              init = Noop(pos);
            }
            _this.init = init;
            if (test == null) {
              test = Const(pos, true);
            }
            if (step == null) {
              step = Noop(pos);
            }
            _this.step = step;
            if (label == null) {
              label = null;
            }
            _this.label = label;
            if (!(test instanceof Expression)) {
              test = toConst(pos, test);
            }
            if (test.isConst() && !test.constValue()) {
              return init;
            }
            _this.test = test;
            _this.body = body.maybeToStatement();
            return _this;
          }
          _Statement_prototype = Statement.prototype;
          _For_prototype = For.prototype = __create(_Statement_prototype);
          _For_prototype.constructor = For;
          For.displayName = "For";
          if (typeof Statement.extended === "function") {
            Statement.extended(For);
          }
          _For_prototype.compile = function (options, level, lineStart, sb) {
            var _ref, minify, test;
            if (level !== 1) {
              throw Error("Cannot compile a statement except on the Block level");
            }
            if (this.test.isConst() && typeof this.test.constValue() !== "boolean") {
              test = Const(this.pos, !!this.test.constValue());
            } else {
              test = this.test;
            }
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.pushFile(this.pos.file);
            }
            if ((_ref = options.sourceMap) != null) {
              _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
            }
            minify = options.minify;
            if (this.label != null) {
              this.label.compile(options, level, lineStart, sb);
              sb(":");
              if (!minify) {
                sb(" ");
              }
            }
            if (this.init.isNoop() && this.step.isNoop()) {
              sb("while");
              if (!minify) {
                sb(" ");
              }
              sb("(");
              test.compile(options, 2, false, sb);
            } else {
              sb("for");
              if (!minify) {
                sb(" ");
              }
              sb("(");
              if (!this.init.isNoop()) {
                this.init.compileAsBlock(options, 2, false, sb);
              }
              sb(";");
              if (!minify) {
                sb(" ");
              }
              if (!test.isConst() || !test.constValue()) {
                test.compile(options, 2, false, sb);
              }
              sb(";");
              if (!minify) {
                sb(" ");
              }
              if (!this.step.isNoop()) {
                this.step.compileAsBlock(options, 2, false, sb);
              }
            }
            sb(")");
            if (this.body.isNoop()) {
              sb(";");
            } else {
              if (!minify) {
                sb(" ");
              }
              sb("{");
              if (!minify) {
                sb(options.linefeed || "\n");
                sb.indent(+options.indent + 1);
              }
              this.body.compileAsStatement(incIndent(options), !minify, sb);
              if (!minify) {
                sb(options.linefeed || "\n");
                sb.indent(options.indent);
              }
              sb("}");
            }
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.popFile();
            }
          };
          _For_prototype.walk = function (walker) {
            var _ref, body, init, label, step, test;
            if ((_ref = walker(this.init, this, "init")) != null) {
              init = _ref;
            } else {
              init = this.init.walk(walker);
            }
            if ((_ref = walker(this.test, this, "test")) != null) {
              test = _ref;
            } else {
              test = this.test.walk(walker);
            }
            if ((_ref = walker(this.step, this, "step")) != null) {
              step = _ref;
            } else {
              step = this.step.walk(walker);
            }
            if ((_ref = walker(this.body, this, "body")) != null) {
              body = _ref;
            } else {
              body = this.body.walk(walker);
            }
            if (this.label != null) {
              if ((_ref = walker(this.label, this, "label")) != null) {
                label = _ref;
              } else {
                label = this.label.walk(walker);
              }
            } else {
              label = this.label;
            }
            if (init !== this.init || test !== this.test || step !== this.step || body !== this.body || label !== this.label) {
              return For(
                this.pos,
                init,
                test,
                step,
                body,
                label
              );
            } else {
              return this;
            }
          };
          _For_prototype.typeId = 14;
          _For_prototype._toAst = function (pos, ident) {
            return [
              this.init.toAst(pos, ident),
              this.test.toAst(pos, ident),
              this.step.toAst(pos, ident),
              this.body.toAst(pos, ident)
            ].concat(this.label != null
              ? [this.label.toAst(pos, ident)]
              : []);
          };
          For._fromAst = function (pos, init, test, step, body, label) {
            return For(
              pos,
              init,
              test,
              step,
              body,
              label || null
            );
          };
          _For_prototype._toJSON = function () {
            var result;
            result = [
              this.label || 0,
              simplify(this.init, 0),
              simplify(this.test, 0),
              simplify(this.step, 0)
            ];
            if (simplify(this.body)) {
              result.push.apply(result, __toArray(this.body.toJSON()));
            }
            return result;
          };
          For.fromJSON = function (line, column, file, label, init, test, step) {
            var body;
            body = __slice.call(arguments, 7);
            return For(
              makePos(line, column, file),
              fromJSON(init),
              fromJSON(test),
              fromJSON(step),
              fromJSON(body),
              label ? fromJSON(label) : null
            );
          };
          return For;
        }(Statement));
        exports.ForIn = ForIn = (function (Statement) {
          var _ForIn_prototype, _Statement_prototype;
          function ForIn(pos, key, object, body, label) {
            var _this;
            _this = this instanceof ForIn ? this : __create(_ForIn_prototype);
            _this.pos = pos;
            _this.key = key;
            if (object == null) {
              object = Noop(pos);
            }
            _this.object = object;
            if (body == null) {
              body = Noop(pos);
            }
            if (label == null) {
              label = null;
            }
            _this.label = label;
            _this.body = body.maybeToStatement();
            return _this;
          }
          _Statement_prototype = Statement.prototype;
          _ForIn_prototype = ForIn.prototype = __create(_Statement_prototype);
          _ForIn_prototype.constructor = ForIn;
          ForIn.displayName = "ForIn";
          if (typeof Statement.extended === "function") {
            Statement.extended(ForIn);
          }
          _ForIn_prototype.compile = function (options, level, lineStart, sb) {
            var _ref, minify;
            if (level !== 1) {
              throw Error("Cannot compile a statement except on the Block level");
            }
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.pushFile(this.pos.file);
            }
            if ((_ref = options.sourceMap) != null) {
              _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
            }
            minify = options.minify;
            if (this.label != null) {
              this.label.compile(options, level, lineStart, sb);
              sb(":");
              if (!minify) {
                sb(" ");
              }
            }
            sb("for");
            if (!minify) {
              sb(" ");
            }
            sb("(");
            this.key.compile(options, 2, false, sb);
            sb(" in ");
            this.object.compile(options, 2, false, sb);
            sb(")");
            if (this.body.isNoop()) {
              sb(";");
            } else {
              if (!minify) {
                sb(" ");
              }
              sb("{");
              if (!minify) {
                sb(options.linefeed || "\n");
                sb.indent(+options.indent + 1);
              }
              this.body.compileAsStatement(incIndent(options), !minify, sb);
              if (!minify) {
                sb(options.linefeed || "\n");
                sb.indent(options.indent);
              }
              sb("}");
            }
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.popFile();
            }
          };
          _ForIn_prototype.walk = function (walker) {
            var _ref, body, key, label, object;
            if ((_ref = walker(this.key, this, "key")) != null) {
              key = _ref;
            } else {
              key = this.key.walk(walker);
            }
            if ((_ref = walker(this.object, this, "object")) != null) {
              object = _ref;
            } else {
              object = this.object.walk(walker);
            }
            if ((_ref = walker(this.body, this, "body")) != null) {
              body = _ref;
            } else {
              body = this.body.walk(walker);
            }
            if (this.label != null) {
              if ((_ref = walker(this.label, this, "label")) != null) {
                label = _ref;
              } else {
                label = this.label.walk(walker);
              }
            } else {
              label = this.label;
            }
            if (key !== this.key || object !== this.object || body !== this.body || label !== this.label) {
              return ForIn(this.pos, key, object, body);
            } else {
              return this;
            }
          };
          _ForIn_prototype.typeId = 15;
          _ForIn_prototype._toAst = function (pos, ident) {
            return [
              this.key.toAst(pos, ident),
              this.object.toAst(pos, ident),
              this.body.toAst(pos, ident)
            ].concat(this.label != null
              ? [this.label.toAst(pos, ident)]
              : []);
          };
          ForIn._fromAst = function (pos, key, object, body, label) {
            return ForIn(
              pos,
              key,
              object,
              body,
              label || null
            );
          };
          _ForIn_prototype._toJSON = function () {
            var result;
            result = [
              this.label || 0,
              this.key,
              simplify(this.object, 0)
            ];
            if (simplify(this.body)) {
              result.push.apply(result, __toArray(this.body.toJSON()));
            }
            return result;
          };
          ForIn.fromJSON = function (line, column, file, label, key, object) {
            var body;
            body = __slice.call(arguments, 6);
            return ForIn(
              makePos(line, column, file),
              fromJSON(key),
              fromJSON(object),
              fromJSON(body),
              label ? fromJSON(label) : null
            );
          };
          return ForIn;
        }(Statement));
        function validateFuncParamsAndVariables(params, variables) {
          var _arr, _i, names, param, variable;
          names = [];
          for (_arr = __toArray(params), _i = _arr.length; _i--; ) {
            param = _arr[_i];
            if (__in(param.name, names)) {
              throw Error("Duplicate parameter: " + param.name);
            }
            names.push(param.name);
          }
          for (_arr = __toArray(variables), _i = _arr.length; _i--; ) {
            variable = _arr[_i];
            if (__in(variable, names)) {
              throw Error("Duplicate variable: " + variable);
            }
            names.push(variable);
          }
        }
        toJSIdent = (function () {
          function unicodeReplacer(m) {
            return "\\u" + padLeft(m.charCodeAt(0).toString(16), 4, "0");
          }
          return function (name) {
            return name.replace(/[\u0000-\u001f\u0080-\uffff]/g, unicodeReplacer);
          };
        }());
        function compileFuncBody(options, sb, declarations, variables, body, lineStart) {
          var _arr, _i, _len, column, declaration, i, minify, name, variable;
          minify = options.minify;
          for (_arr = __toArray(declarations), _i = 0, _len = _arr.length; _i < _len; ++_i) {
            declaration = _arr[_i];
            if (!minify) {
              sb.indent(options.indent);
            }
            sb(toJSSource(declaration));
            sb(";");
            lineStart = false;
            if (!minify) {
              sb(options.linefeed || "\n");
              lineStart = true;
            }
          }
          if (variables.length > 0) {
            column = 0;
            if (!minify) {
              sb.indent(options.indent);
              column = 4 + 2 * options.indent;
            }
            sb("var ");
            for (_arr = __toArray(variables.sort(function (a, b) {
              return __cmp(a.toLowerCase(), b.toLowerCase()) || __cmp(a, b);
            })), i = 0, _len = _arr.length; i < _len; ++i) {
              variable = _arr[i];
              name = toJSIdent(variables[i]);
              if (i > 0) {
                if (minify) {
                  sb(",");
                } else if (column + 2 + name.length < 80) {
                  sb(", ");
                  column += 2;
                } else {
                  sb(",");
                  sb(options.linefeed || "\n");
                  sb.indent(options.indent);
                  sb("    ");
                  column = 4 + 2 * options.indent;
                }
              }
              sb(name);
              column += name.length;
            }
            sb(";");
            lineStart = false;
            if (!minify) {
              sb(options.linefeed || "\n");
              lineStart = true;
            }
          }
          if (!body.isNoop()) {
            if (!minify) {
              sb.indent(options.indent);
            }
            body.compileAsStatement(options, lineStart, sb);
            if (!minify) {
              sb(options.linefeed || "\n");
            }
          }
        }
        function compileFunc(options, sb, name, params, declarations, variables, body) {
          var _arr, _len, i, minify, param;
          sb("function");
          minify = options.minify;
          if (!minify || name != null) {
            sb(" ");
          }
          if (name != null) {
            name.compile(options, 2, false, sb);
          }
          sb("(");
          for (_arr = __toArray(params), i = 0, _len = _arr.length; i < _len; ++i) {
            param = _arr[i];
            if (i > 0) {
              sb(",");
              if (!minify) {
                sb(" ");
              }
            }
            param.compile(options, 2, false, sb);
          }
          sb(")");
          if (!minify) {
            sb(" ");
          }
          sb("{");
          if (variables.length || declarations.length || !body.isNoop()) {
            if (!minify) {
              sb(options.linefeed || "\n");
            }
            compileFuncBody(
              incIndent(options),
              sb,
              declarations,
              variables,
              body,
              !minify
            );
            if (!minify) {
              sb.indent(options.indent);
            }
          }
          return sb("}");
        }
        exports.Func = Func = (function (Expression) {
          var _Expression_prototype, _Func_prototype;
          function Func(pos, name, params, variables, body, declarations) {
            var _this;
            _this = this instanceof Func ? this : __create(_Func_prototype);
            _this.pos = pos;
            if (name == null) {
              name = null;
            }
            _this.name = name;
            if (params == null) {
              params = [];
            }
            _this.params = params;
            if (variables == null) {
              variables = [];
            }
            _this.variables = variables;
            if (body == null) {
              body = Noop(pos);
            }
            _this.body = body;
            if (declarations == null) {
              declarations = [];
            }
            _this.declarations = declarations;
            validateFuncParamsAndVariables(params, variables);
            return _this;
          }
          _Expression_prototype = Expression.prototype;
          _Func_prototype = Func.prototype = __create(_Expression_prototype);
          _Func_prototype.constructor = Func;
          Func.displayName = "Func";
          if (typeof Expression.extended === "function") {
            Expression.extended(Func);
          }
          _Func_prototype.compile = function (options, level, lineStart, sb) {
            var _ref, wrap;
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.pushFile(this.pos.file);
            }
            if ((_ref = options.sourceMap) != null) {
              _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
            }
            wrap = lineStart && !this.name;
            if (wrap) {
              sb("(");
            }
            compileFunc(
              options,
              sb,
              this.name,
              this.params,
              this.declarations,
              this.variables,
              this.body
            );
            if (wrap) {
              sb(")");
            }
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.popFile();
            }
          };
          _Func_prototype.compileAsStatement = function (options, lineStart, sb) {
            this.compile(options, 1, lineStart, sb);
            if (!lineStart || !this.name) {
              sb(";");
            }
          };
          _Func_prototype.isLarge = function () {
            return true;
          };
          _Func_prototype.isNoop = function () {
            return this.name == null;
          };
          _Func_prototype.walk = function (walker) {
            var _ref, body, name, params;
            if (this.name) {
              if ((_ref = walker(this.name, this, "name")) != null) {
                name = _ref;
              } else {
                name = this.name.walk(walker);
              }
            } else {
              name = this.name;
            }
            params = walkArray(this.params, this, "param", walker);
            body = this.body.walk(walker);
            if (name !== this.name || params !== this.params || body !== this.body) {
              return Func(
                this.pos,
                name,
                params,
                this.variables,
                body,
                this.declarations,
                this.meta
              );
            } else {
              return this;
            }
          };
          _Func_prototype.typeId = 16;
          _Func_prototype._toAst = function (pos, ident) {
            var _this;
            _this = this;
            return [
              this.name ? this.name.toAst(pos, ident) : Const(pos, 0),
              this.params.length
                ? Arr(pos, (function () {
                  var _arr, _arr2, _i, _len, param;
                  for (_arr = [], _arr2 = __toArray(_this.params), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                    param = _arr2[_i];
                    _arr.push(param.toAst(pos, ident));
                  }
                  return _arr;
                }()))
                : Const(pos, 0),
              this.variables.length
                ? Arr(pos, (function () {
                  var _arr, _arr2, _i, _len, variable;
                  for (_arr = [], _arr2 = __toArray(_this.variables), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                    variable = _arr2[_i];
                    _arr.push(Const(pos, variable));
                  }
                  return _arr;
                }()))
                : Const(pos, 0),
              this.body.toAst(pos, ident)
            ].concat((function () {
              var _arr, _arr2, _i, _len, declaration;
              for (_arr = [], _arr2 = __toArray(_this.declarations), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                declaration = _arr2[_i];
                _arr.push(Const(pos, declaration));
              }
              return _arr;
            }()));
          };
          Func._fromAst = function (pos, name, params, variables, body) {
            var declarations;
            declarations = __slice.call(arguments, 5);
            return Func.apply(void 0, [
              pos,
              name || null,
              params || [],
              variables || [],
              body
            ].concat(__toArray(declarations)));
          };
          _Func_prototype._toJSON = function () {
            var result;
            result = [
              this.name || 0,
              simplifyArray(this.params, 0),
              simplifyArray(this.variables, 0),
              simplifyArray(this.declarations, 0)
            ];
            if (simplify(this.body)) {
              result.push.apply(result, __toArray(this.body.toJSON()));
            }
            return result;
          };
          Func.fromJSON = function (line, column, file, name, params, variables, declarations) {
            var body;
            body = __slice.call(arguments, 7);
            return Func(
              makePos(line, column, file),
              name ? fromJSON(name) : void 0,
              arrayFromJSON(params),
              variables,
              fromJSON(body),
              declarations
            );
          };
          return Func;
        }(Expression));
        exports.Ident = Ident = (function (Expression) {
          var _Expression_prototype, _Ident_prototype;
          function Ident(pos, name, allowUnacceptable) {
            var _this;
            _this = this instanceof Ident ? this : __create(_Ident_prototype);
            _this.pos = pos;
            _this.name = name;
            if (allowUnacceptable == null) {
              allowUnacceptable = false;
            }
            if (!allowUnacceptable && !isAcceptableIdent(name, true)) {
              throw Error("Not an acceptable identifier name: " + name);
            }
            return _this;
          }
          _Expression_prototype = Expression.prototype;
          _Ident_prototype = Ident.prototype = __create(_Expression_prototype);
          _Ident_prototype.constructor = Ident;
          Ident.displayName = "Ident";
          if (typeof Expression.extended === "function") {
            Expression.extended(Ident);
          }
          _Ident_prototype.compile = function (options, level, lineStart, sb) {
            var _ref;
            if ((_ref = options.sourceMap) != null) {
              _ref.add(
                sb.line,
                sb.column,
                this.pos.line,
                this.pos.column,
                this.pos.file
              );
            }
            sb(toJSIdent(this.name));
          };
          _Ident_prototype.compileAsBlock = function (options, level, lineStart, sb) {
            Noop(this.pos).compileAsBlock(options, level, lineStart, sb);
          };
          _Ident_prototype.walk = function () {
            return this;
          };
          _Ident_prototype.isNoop = function () {
            return true;
          };
          _Ident_prototype.typeId = 17;
          _Ident_prototype._toAst = function (pos, ident) {
            return [Const(pos, this.name)];
          };
          Ident._fromAst = function (pos, name) {
            return Ident(pos, name, true);
          };
          _Ident_prototype._toJSON = function () {
            return [this.name];
          };
          Ident.fromJSON = function (line, column, file, name) {
            return Ident(
              makePos(line, column, file),
              name,
              true
            );
          };
          return Ident;
        }(Expression));
        exports.IfStatement = IfStatement = (function (Statement) {
          var _IfStatement_prototype, _Statement_prototype;
          function IfStatement(pos, test, whenTrue, whenFalse, label) {
            var _ref, _this;
            _this = this instanceof IfStatement ? this : __create(_IfStatement_prototype);
            _this.pos = pos;
            if (test == null) {
              test = Noop(pos);
            }
            if (whenTrue == null) {
              whenTrue = Noop(pos);
            }
            if (whenFalse == null) {
              whenFalse = Noop(pos);
            }
            if (label == null) {
              label = null;
            }
            _this.label = label;
            if (test instanceof Unary && test.op === "!" && test.node instanceof Unary && test.node.op === "!") {
              test = test.node.node;
            }
            if (test.isConst()) {
              if (test.constValue()) {
                return Block(pos, [whenTrue], label);
              } else {
                return Block(pos, [whenFalse], label);
              }
            } else {
              whenTrue = whenTrue.maybeToStatement();
              whenFalse = whenFalse.maybeToStatement();
              if (whenTrue instanceof Noop) {
                if (whenFalse instanceof Noop) {
                  return test.maybeToStatement();
                } else {
                  return IfStatement.call(
                    _this,
                    pos,
                    Unary(test.pos, "!", test),
                    whenFalse,
                    whenTrue,
                    label
                  );
                }
              } else if (whenFalse instanceof Noop && whenTrue instanceof IfStatement && whenTrue.whenFalse instanceof Noop && whenTrue.label == null) {
                return IfStatement.call(
                  _this,
                  pos,
                  Binary(pos, test, "&&", whenTrue.test),
                  whenTrue.whenTrue,
                  whenFalse
                );
              } else if (test instanceof BlockExpression) {
                return BlockStatement(pos, __toArray(__slice.call(test.body, 0, -1)).concat([
                  IfStatement.call(
                    _this,
                    pos,
                    (_ref = test.body)[_ref.length - 1],
                    whenTrue,
                    whenFalse
                  )
                ]));
              }
            }
            _this.test = test;
            _this.whenTrue = whenTrue;
            _this.whenFalse = whenFalse;
            return _this;
          }
          _Statement_prototype = Statement.prototype;
          _IfStatement_prototype = IfStatement.prototype = __create(_Statement_prototype);
          _IfStatement_prototype.constructor = IfStatement;
          IfStatement.displayName = "IfStatement";
          if (typeof Statement.extended === "function") {
            Statement.extended(IfStatement);
          }
          _IfStatement_prototype.compile = function (options, level, lineStart, sb) {
            var _ref, childOptions, minify, whenFalse;
            if (level !== 1) {
              throw Error("Cannot compile a statement except on the Block level");
            }
            if (this.whenTrue.isNoop()) {
              if (this.whenFalse.isNoop()) {
                this.test.compileAsStatement(options, true, sb);
              } else {
                IfStatement(
                  this.pos,
                  Unary(this.test.pos, "!", this.test),
                  this.whenFalse,
                  this.whenTrue,
                  this.label
                ).compile(options, level, lineStart, sb);
              }
            } else {
              if (options.sourceMap != null && this.pos.file) {
                options.sourceMap.pushFile(this.pos.file);
              }
              if ((_ref = options.sourceMap) != null) {
                _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
              }
              minify = options.minify;
              if (this.label != null) {
                this.label.compile(options, level, lineStart, sb);
                sb(":");
                if (!minify) {
                  sb(" ");
                }
              }
              sb("if");
              if (!minify) {
                sb(" ");
              }
              sb("(");
              this.test.compile(options, 2, false, sb);
              sb(")");
              if (!minify) {
                sb(" ");
              }
              sb("{");
              childOptions = incIndent(options);
              if (!minify) {
                sb(options.linefeed || "\n");
                sb.indent(childOptions.indent);
              }
              this.whenTrue.compileAsStatement(childOptions, !minify, sb);
              if (!minify) {
                sb(options.linefeed || "\n");
                sb.indent(options.indent);
              }
              sb("}");
              whenFalse = this.whenFalse;
              if (!whenFalse.isNoop()) {
                if (!minify) {
                  sb(" ");
                }
                sb("else");
                if (whenFalse instanceof IfStatement && whenFalse.label == null) {
                  sb(" ");
                  whenFalse.compile(options, level, false, sb);
                } else {
                  if (!minify) {
                    sb(" ");
                  }
                  sb("{");
                  if (!minify) {
                    sb(options.linefeed || "\n");
                    sb.indent(childOptions.indent);
                  }
                  whenFalse.compileAsStatement(childOptions, !minify, sb);
                  if (!minify) {
                    sb(options.linefeed || "\n");
                    sb.indent(options.indent);
                  }
                  sb("}");
                }
              }
              if (options.sourceMap != null && this.pos.file) {
                options.sourceMap.popFile();
              }
            }
          };
          _IfStatement_prototype.walk = function (walker) {
            var _ref, label, test, whenFalse, whenTrue;
            if ((_ref = walker(this.test, this, "test")) != null) {
              test = _ref;
            } else {
              test = this.test.walk(walker);
            }
            if ((_ref = walker(this.whenTrue, this, "whenTrue")) != null) {
              whenTrue = _ref;
            } else {
              whenTrue = this.whenTrue.walk(walker);
            }
            if ((_ref = walker(this.whenFalse, this, "whenFalse")) != null) {
              whenFalse = _ref;
            } else {
              whenFalse = this.whenFalse.walk(walker);
            }
            if (this.label != null) {
              if ((_ref = walker(this.label, this, "label")) != null) {
                label = _ref;
              } else {
                label = this.label.walk(walker);
              }
            } else {
              label = this.label;
            }
            if (test !== this.test || whenTrue !== this.whenTrue || whenFalse !== this.whenFalse || label !== this.label) {
              return If(
                this.pos,
                test,
                whenTrue,
                whenFalse,
                label
              );
            } else {
              return this;
            }
          };
          _IfStatement_prototype.mutateLast = function (func, options) {
            var whenFalse, whenTrue;
            whenTrue = this.whenTrue.mutateLast(func, options);
            whenFalse = this.whenFalse.mutateLast(func, options);
            if (whenTrue !== this.whenTrue || whenFalse !== this.whenFalse) {
              return If(
                this.pos,
                this.test,
                whenTrue,
                whenFalse,
                this.label
              );
            } else {
              return this;
            }
          };
          _IfStatement_prototype.exitType = function () {
            var falseExit, trueExit;
            if (this._exitType === void 0) {
              trueExit = this.whenTrue.exitType();
              falseExit = this.whenFalse.exitType();
              if (trueExit === falseExit) {
                return this._exitType = trueExit;
              } else {
                return this._exitType = null;
              }
            } else {
              return this._exitType;
            }
          };
          _IfStatement_prototype.isNoop = function () {
            var _ref;
            if ((_ref = this._isNoop) == null) {
              return this._isNoop = this.test.isNoop() && this.whenTrue.isNoop() && this.whenFalse.isNoop();
            } else {
              return _ref;
            }
          };
          _IfStatement_prototype.typeId = 18;
          _IfStatement_prototype._toAst = function (pos, ident) {
            var result;
            result = [
              this.test.toAst(pos, ident),
              this.whenTrue.toAst(pos, ident)
            ];
            if (!(this.whenFalse instanceof Noop) || this.label) {
              result.push(this.whenFalse.toAst(pos, ident));
            }
            if (this.label) {
              result.push(this.label.toAst(pos, ident));
            }
            return result;
          };
          IfStatement._fromAst = function (pos, test, whenTrue, whenFalse, label) {
            return IfStatement(
              pos,
              test,
              whenTrue,
              whenFalse,
              label
            );
          };
          _IfStatement_prototype._toJSON = function () {
            var result;
            result = [
              this.label || 0,
              simplify(this.test, 0),
              simplify(this.whenTrue, 0)
            ];
            if (simplify(this.whenFalse)) {
              result.push.apply(result, __toArray(this.whenFalse.toJSON()));
            }
            return result;
          };
          IfStatement.fromJSON = function (line, column, file, label, test, whenTrue) {
            var whenFalse;
            whenFalse = __slice.call(arguments, 6);
            return IfStatement(
              makePos(line, column, file),
              fromJSON(test),
              fromJSON(whenTrue),
              fromJSON(whenFalse),
              label ? fromJSON(label) : null
            );
          };
          return IfStatement;
        }(Statement));
        exports.IfExpression = IfExpression = (function (Expression) {
          var _Expression_prototype, _IfExpression_prototype;
          function IfExpression(pos, test, whenTrue, whenFalse) {
            var _this;
            _this = this instanceof IfExpression ? this : __create(_IfExpression_prototype);
            _this.pos = pos;
            if (test == null) {
              test = Noop(pos);
            }
            if (whenTrue == null) {
              whenTrue = Noop(pos);
            }
            if (whenFalse == null) {
              whenFalse = Noop(pos);
            }
            if (!(whenTrue instanceof Expression)) {
              whenTrue = toConst(pos, whenTrue);
            }
            if (!(whenFalse instanceof Expression)) {
              whenFalse = toConst(pos, whenFalse);
            }
            if (test instanceof Unary && test.op === "!" && test.node instanceof Unary && test.node.op === "!") {
              test = test.node.node;
            }
            if (test.isConst()) {
              if (test.constValue()) {
                return whenTrue;
              } else {
                return whenFalse;
              }
            } else if (whenFalse instanceof Noop && whenTrue instanceof IfExpression && whenTrue.whenFalse instanceof Noop) {
              _this.test = Binary(pos, test, "&&", whenTrue.test);
              _this.whenTrue = whenTrue.whenTrue;
              _this.whenFalse = whenFalse;
            } else {
              _this.test = test;
              _this.whenTrue = whenTrue;
              _this.whenFalse = whenFalse;
            }
            return _this;
          }
          _Expression_prototype = Expression.prototype;
          _IfExpression_prototype = IfExpression.prototype = __create(_Expression_prototype);
          _IfExpression_prototype.constructor = IfExpression;
          IfExpression.displayName = "IfExpression";
          if (typeof Expression.extended === "function") {
            Expression.extended(IfExpression);
          }
          _IfExpression_prototype.toStatement = function () {
            return IfStatement(this.pos, this.test, this.whenTrue, this.whenFalse);
          };
          function compileSmall(test, whenTrue, whenFalse, options, lineStart, sb) {
            var minify;
            minify = options.minify;
            test.compile(options, 5, lineStart, sb);
            sb(minify ? "?" : " ? ");
            whenTrue.compile(options, 5, false, sb);
            sb(minify ? ":" : " : ");
            whenFalse.compile(options, 5, false, sb);
          }
          function compileLarge(test, whenTrue, whenFalse, options, lineStart, sb) {
            var childOptions, largeWhenTrue, wrapTest, wrapWhenTrue;
            childOptions = incIndent(options);
            wrapTest = test instanceof IfExpression;
            if (wrapTest) {
              sb("(");
            }
            test.compile(
              childOptions,
              wrapTest ? 2 : 5,
              lineStart && !wrapTest,
              sb
            );
            if (wrapTest) {
              sb(")");
            }
            largeWhenTrue = whenTrue.isLarge();
            if (largeWhenTrue) {
              sb(options.linefeed || "\n");
              sb.indent(childOptions.indent);
              sb("? ");
            } else {
              sb(" ? ");
            }
            wrapWhenTrue = whenTrue instanceof IfExpression;
            if (wrapWhenTrue) {
              sb("(");
            }
            whenTrue.compile(
              childOptions,
              wrapWhenTrue ? 2 : 5,
              false,
              sb
            );
            if (wrapWhenTrue) {
              sb(")");
            }
            sb(options.linefeed || "\n");
            sb.indent(childOptions.indent);
            sb(": ");
            if (whenFalse instanceof IfExpression) {
              compileLarge(
                whenFalse.test,
                whenFalse.whenTrue,
                whenFalse.whenFalse,
                options,
                false,
                sb
              );
            } else {
              whenFalse.compile(childOptions, 5, false, sb);
            }
          }
          _IfExpression_prototype.compile = function (options, level, lineStart, sb) {
            var _ref, f, wrap;
            if (level === 1) {
              this.toStatement().compile(options, level, lineStart, sb);
            } else {
              if (options.sourceMap != null && this.pos.file) {
                options.sourceMap.pushFile(this.pos.file);
              }
              if ((_ref = options.sourceMap) != null) {
                _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
              }
              wrap = level > 5;
              if (wrap) {
                sb("(");
              }
              if (!options.minify && (this.whenTrue.isLarge() || this.whenFalse.isLarge())) {
                f = compileLarge;
              } else {
                f = compileSmall;
              }
              f(
                this.test,
                this.whenTrue,
                this.whenFalse,
                options,
                !wrap && lineStart,
                sb
              );
              if (wrap) {
                sb(")");
              }
              if (options.sourceMap != null && this.pos.file) {
                options.sourceMap.popFile();
              }
            }
          };
          _IfExpression_prototype.compileAsBlock = function (options, level, lineStart, sb) {
            if (this.whenTrue.isNoop()) {
              if (this.whenFalse.isNoop()) {
                this.test.compileAsBlock(options, level, lineStart, sb);
              } else {
                Binary(this.pos, this.test, "||", this.whenFalse).compileAsBlock(options, level, lineStart, sb);
              }
            } else if (this.whenFalse.isNoop()) {
              Binary(this.pos, this.test, "&&", this.whenTrue).compileAsBlock(options, level, lineStart, sb);
            } else {
              this.compile(options, level, lineStart, sb);
            }
          };
          _IfExpression_prototype.isLarge = function () {
            var _ref;
            if ((_ref = this._isLarge) == null) {
              return this._isLarge = !this.test.isSmall() || !this.whenTrue.isSmall() || !this.whenFalse.isSmall();
            } else {
              return _ref;
            }
          };
          _IfExpression_prototype.isSmall = function () {
            return false;
          };
          _IfExpression_prototype.isNoop = function () {
            var _ref;
            if ((_ref = this._isNoop) == null) {
              return this._isNoop = this.test.isNoop() && this.whenTrue.isNoop() && this.whenFalse.isNoop();
            } else {
              return _ref;
            }
          };
          _IfExpression_prototype.walk = IfStatement.prototype.walk;
          _IfExpression_prototype.typeId = 19;
          _IfExpression_prototype._toAst = function (pos, ident) {
            var result;
            result = [
              this.test.toAst(pos, ident),
              this.whenTrue.toAst(pos, ident)
            ];
            if (!(this.whenFalse instanceof Noop)) {
              result.push(this.whenFalse.toAst(pos, ident));
            }
            return result;
          };
          IfExpression._fromAst = function (pos, test, whenTrue, whenFalse) {
            return IfExpression(pos, test, whenTrue, whenFalse);
          };
          _IfExpression_prototype._toJSON = function () {
            var result;
            result = [
              simplify(this.test, 0),
              simplify(this.whenTrue, 0)
            ];
            if (simplify(this.whenFalse)) {
              result.push.apply(result, __toArray(this.whenFalse.toJSON()));
            }
            return result;
          };
          IfExpression.fromJSON = function (line, column, file, test, whenTrue) {
            var whenFalse;
            whenFalse = __slice.call(arguments, 5);
            return IfExpression(
              makePos(line, column, file),
              fromJSON(test),
              fromJSON(whenTrue),
              fromJSON(whenFalse)
            );
          };
          return IfExpression;
        }(Expression));
        If = exports.If = function (pos, test, whenTrue, whenFalse, label) {
          if (whenTrue instanceof Statement || whenFalse instanceof Statement || label != null) {
            return IfStatement(
              pos,
              test,
              whenTrue,
              whenFalse,
              label
            );
          } else {
            return IfExpression(pos, test, whenTrue, whenFalse);
          }
        };
        exports.Noop = Noop = (function (Expression) {
          var _Expression_prototype, _Noop_prototype;
          function Noop(pos) {
            var _this;
            _this = this instanceof Noop ? this : __create(_Noop_prototype);
            _this.pos = pos;
            return _this;
          }
          _Expression_prototype = Expression.prototype;
          _Noop_prototype = Noop.prototype = __create(_Expression_prototype);
          _Noop_prototype.constructor = Noop;
          Noop.displayName = "Noop";
          if (typeof Expression.extended === "function") {
            Expression.extended(Noop);
          }
          _Noop_prototype.compileAsStatement = function () {};
          _Noop_prototype.compile = function (options, level, lineStart, sb) {
            if (level > 1) {
              Const(this.pos, void 0).compile(options, level, lineStart, sb);
            }
          };
          _Noop_prototype.isConst = function () {
            return true;
          };
          _Noop_prototype.isNoop = Noop.prototype.isConst;
          _Noop_prototype.constValue = function () {
            return;
          };
          _Noop_prototype.walk = function () {
            return this;
          };
          _Noop_prototype.mutateLast = function (func, options) {
            if (options != null ? options.noop : void 0) {
              return func(this);
            } else {
              return this;
            }
          };
          _Noop_prototype.typeId = 20;
          Noop._fromAst = function (pos) {
            return Noop(pos);
          };
          Noop.fromJSON = function (line, column, file) {
            return Noop(makePos(line, column, file));
          };
          return Noop;
        }(Expression));
        exports.Obj = Obj = (function (Expression) {
          var _Expression_prototype, _Obj_prototype, ObjPair;
          function Obj(pos, elements) {
            var _this;
            _this = this instanceof Obj ? this : __create(_Obj_prototype);
            _this.pos = pos;
            if (elements == null) {
              elements = [];
            }
            _this.elements = elements;
            validateUniqueKeys(elements);
            return _this;
          }
          _Expression_prototype = Expression.prototype;
          _Obj_prototype = Obj.prototype = __create(_Expression_prototype);
          _Obj_prototype.constructor = Obj;
          Obj.displayName = "Obj";
          if (typeof Expression.extended === "function") {
            Expression.extended(Obj);
          }
          function validateUniqueKeys(elements) {
            var _arr, _i, key, keys, pair;
            keys = [];
            for (_arr = __toArray(elements), _i = _arr.length; _i--; ) {
              pair = _arr[_i];
              key = pair.key;
              if (__in(key, keys)) {
                throw Error("Found duplicate key: " + toJSSource(key));
              }
              keys.push(key);
            }
          }
          function toSafeKey(key) {
            if (isAcceptableIdent(key) || String(Number(key)) === key) {
              return key;
            } else {
              return toJSSource(key);
            }
          }
          function compileLarge(elements, options, sb) {
            var _arr, childOptions, element, i, key, len;
            childOptions = incIndent(options);
            for (_arr = __toArray(elements), i = 0, len = _arr.length; i < len; ++i) {
              element = _arr[i];
              sb(options.linefeed || "\n");
              sb.indent(childOptions.indent);
              key = element.key;
              sb(toSafeKey(key));
              sb(": ");
              element.value.compile(childOptions, 3, false, sb);
              if (i < len - 1) {
                sb(",");
              }
            }
            sb(options.linefeed || "\n");
            sb.indent(options.indent);
          }
          function compileSmall(elements, options, sb) {
            var _arr, _len, element, i, key, minify;
            if (elements.length) {
              minify = options.minify;
              if (!minify) {
                sb(" ");
              }
              for (_arr = __toArray(elements), i = 0, _len = _arr.length; i < _len; ++i) {
                element = _arr[i];
                if (i > 0) {
                  sb(",");
                  if (!minify) {
                    sb(" ");
                  }
                }
                key = element.key;
                sb(toSafeKey(key));
                sb(":");
                if (!minify) {
                  sb(" ");
                }
                element.value.compile(options, 3, false, sb);
              }
              if (!minify) {
                sb(" ");
              }
            }
          }
          _Obj_prototype.compile = function (options, level, lineStart, sb) {
            var _ref, f, wrap;
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.pushFile(this.pos.file);
            }
            if ((_ref = options.sourceMap) != null) {
              _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
            }
            wrap = lineStart;
            if (wrap) {
              sb("(");
            }
            sb("{");
            if (!options.minify && this.shouldCompileLarge()) {
              f = compileLarge;
            } else {
              f = compileSmall;
            }
            f(this.elements, options, sb);
            sb("}");
            if (wrap) {
              sb(")");
            }
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.popFile();
            }
          };
          _Obj_prototype.compileAsBlock = function (options, level, lineStart, sb) {
            var _this;
            _this = this;
            BlockExpression(this.pos, (function () {
              var _arr, _arr2, _i, _len, element;
              for (_arr = [], _arr2 = __toArray(_this.elements), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                element = _arr2[_i];
                _arr.push(element.value);
              }
              return _arr;
            }())).compileAsBlock(options, level, lineStart, sb);
          };
          _Obj_prototype.compileAsStatement = function (options, lineStart, sb) {
            var _this;
            _this = this;
            BlockStatement(this.pos, (function () {
              var _arr, _arr2, _i, _len, element;
              for (_arr = [], _arr2 = __toArray(_this.elements), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                element = _arr2[_i];
                _arr.push(element.value);
              }
              return _arr;
            }())).compileAsStatement(options, lineStart, sb);
          };
          _Obj_prototype.shouldCompileLarge = function () {
            switch (this.elements.length) {
            case 0: return false;
            case 1: return this.elements[0].isLarge();
            default: return this.isLarge();
            }
          };
          _Obj_prototype.isSmall = function () {
            switch (this.elements.length) {
            case 0: return true;
            case 1: return this.elements[0].isSmall();
            default: return false;
            }
          };
          _Obj_prototype.isLarge = function () {
            var _ref, _this;
            _this = this;
            if ((_ref = this._isLarge) == null) {
              return this._isLarge = this.elements.length > 4 || (function () {
                var _arr, _i, _some, element;
                _some = false;
                for (_arr = __toArray(_this.elements), _i = _arr.length; _i--; ) {
                  element = _arr[_i];
                  if (!element.isSmall()) {
                    _some = true;
                    break;
                  }
                }
                return _some;
              }());
            } else {
              return _ref;
            }
          };
          _Obj_prototype.isNoop = function () {
            var _arr, _every, _i, _ref, element;
            if ((_ref = this._isNoop) == null) {
              _every = true;
              for (_arr = __toArray(this.elements), _i = _arr.length; _i--; ) {
                element = _arr[_i];
                if (!element.isNoop()) {
                  _every = false;
                  break;
                }
              }
              return this._isNoop = _every;
            } else {
              return _ref;
            }
          };
          _Obj_prototype.walk = function (walker) {
            var _arr, _arr2, _i, _len, _ref, changed, pair, pairs, value;
            changed = false;
            for (_arr = [], _arr2 = __toArray(this.elements), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
              pair = _arr2[_i];
              if ((_ref = walker(pair.value, this, "element")) != null) {
                value = _ref;
              } else {
                value = pair.value.walk(walker);
              }
              if (value !== pair.value) {
                changed = true;
                _arr.push(ObjPair(pair.pos, pair.key, value));
              } else {
                _arr.push(pair);
              }
            }
            pairs = _arr;
            if (changed) {
              return Obj(this.pos, pairs);
            } else {
              return this;
            }
          };
          _Obj_prototype.typeId = 21;
          _Obj_prototype._toAst = function (pos, ident) {
            var _arr, _i, _len, pair, pairPos, result;
            result = [];
            for (_arr = __toArray(this.elements), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              pair = _arr[_i];
              pairPos = pair.pos;
              result.push(Const(pos, pairPos.line));
              result.push(Const(pos, pairPos.column));
              result.push(Const(pos, pairPos.file));
              result.push(Const(pos, pair.key));
              result.push(pair.value.toAst(pos, ident));
            }
            return result;
          };
          Obj._fromAst = function (pos) {
            var _end, elementData, i, resultPairs;
            elementData = __slice.call(arguments, 1);
            resultPairs = [];
            for (i = 0, _end = elementData.length; i < _end; i += 5) {
              resultPairs.push(ObjPair(
                makePos(elementData[i], elementData[i + 1], elementData[i + 2]),
                elementData[i + 3],
                elementData[i + 4]
              ));
            }
            return Obj(pos, resultPairs);
          };
          _Obj_prototype._toJSON = function () {
            var _arr, _i, _len, pair, pos, result;
            result = [];
            for (_arr = __toArray(this.elements), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              pair = _arr[_i];
              pos = pair.pos;
              result.push(
                pos.line,
                pos.column,
                pos.file,
                pair.key,
                simplify(pair.value)
              );
            }
            return result;
          };
          Obj.fromJSON = function (line, column, file) {
            var _end, elementData, i, key, pColumn, pFile, pLine, resultPairs, value;
            elementData = __slice.call(arguments, 3);
            resultPairs = [];
            for (i = 0, _end = elementData.length; i < _end; i += 5) {
              pLine = elementData[i];
              pColumn = elementData[i + 1];
              pFile = elementData[i + 2];
              key = elementData[i + 3];
              value = elementData[i + 4];
              resultPairs.push(ObjPair(
                makePos(pLine, pColumn, pFile),
                key,
                fromJSON(value)
              ));
            }
            return Obj(
              makePos(line, column, file),
              resultPairs
            );
          };
          Obj.Pair = ObjPair = (function () {
            var _ObjPair_prototype;
            function ObjPair(pos, key, value) {
              var _this;
              _this = this instanceof ObjPair ? this : __create(_ObjPair_prototype);
              _this.pos = pos;
              _this.key = key;
              if (value == null) {
                value = Noop(pos);
              }
              if (!(value instanceof Expression)) {
                value = toConst(pos, value);
              }
              _this.value = value;
              return _this;
            }
            _ObjPair_prototype = ObjPair.prototype;
            ObjPair.displayName = "ObjPair";
            _ObjPair_prototype.isSmall = function () {
              return this.value.isSmall();
            };
            _ObjPair_prototype.isLarge = function () {
              return this.value.isLarge();
            };
            _ObjPair_prototype.isNoop = function () {
              return this.value.isNoop();
            };
            _ObjPair_prototype.walk = function (walker) {
              var _ref, value;
              if ((_ref = walker(this.value, this, "value")) != null) {
                value = _ref;
              } else {
                value = this.value.walk(walker);
              }
              if (value !== this.value) {
                return ObjPair(this.pos, this.key, value);
              } else {
                return this;
              }
            };
            _ObjPair_prototype.inspect = Node.prototype.inspect;
            return ObjPair;
          }());
          return Obj;
        }(Expression));
        exports.Regex = Regex = (function (Expression) {
          var _Expression_prototype, _Regex_prototype;
          function Regex(pos, source, flags) {
            var _this;
            _this = this instanceof Regex ? this : __create(_Regex_prototype);
            _this.pos = pos;
            _this.source = source;
            if (flags == null) {
              flags = "";
            }
            _this.flags = flags;
            return _this;
          }
          _Expression_prototype = Expression.prototype;
          _Regex_prototype = Regex.prototype = __create(_Expression_prototype);
          _Regex_prototype.constructor = Regex;
          Regex.displayName = "Regex";
          if (typeof Expression.extended === "function") {
            Expression.extended(Regex);
          }
          _Regex_prototype.compile = function (options, level, lineStart, sb) {
            var _ref;
            if ((_ref = options.sourceMap) != null) {
              _ref.add(
                sb.line,
                sb.column,
                this.pos.line,
                this.pos.column,
                this.pos.file
              );
            }
            sb("/");
            sb(this.source.replace(/(\\\\)*\\?\//g, "$1\\/") || "(?:)");
            sb("/");
            sb(this.flags);
          };
          _Regex_prototype.compileAsBlock = function (options, level, lineStart, sb) {
            Noop(this.pos).compileAsBlock(options, level, lineStart, sb);
          };
          _Regex_prototype.isNoop = function () {
            return true;
          };
          _Regex_prototype.walk = function () {
            return this;
          };
          _Regex_prototype.typeId = 22;
          _Regex_prototype._toAst = function (pos, ident) {
            return [Const(pos, this.source)].concat(this.flags !== ""
              ? [Const(pos, this.flags)]
              : []);
          };
          Regex._fromAst = function (pos, source, flags) {
            return Regex(pos, source, flags || "");
          };
          _Regex_prototype._toJSON = function () {
            return [this.source, this.flags];
          };
          Regex.fromJSON = function (line, column, file, source, flags) {
            return Regex(
              makePos(line, column, file),
              source,
              flags
            );
          };
          return Regex;
        }(Expression));
        exports.Return = Return = (function (Statement) {
          var _Return_prototype, _Statement_prototype;
          function Return(pos, node) {
            var _this;
            _this = this instanceof Return ? this : __create(_Return_prototype);
            _this.pos = pos;
            if (node == null) {
              node = Noop(pos);
            }
            _this.node = node;
            if (typeof node.toStatement === "function") {
              return node.toStatement().mutateLast(
                function (n) {
                  return Return(pos, n);
                },
                { noop: true }
              );
            }
            return _this;
          }
          _Statement_prototype = Statement.prototype;
          _Return_prototype = Return.prototype = __create(_Statement_prototype);
          _Return_prototype.constructor = Return;
          Return.displayName = "Return";
          if (typeof Statement.extended === "function") {
            Statement.extended(Return);
          }
          _Return_prototype.compile = function (options, level, lineStart, sb) {
            var _ref;
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.pushFile(this.pos.file);
            }
            if ((_ref = options.sourceMap) != null) {
              _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
            }
            sb("return");
            if (!this.node.isConst() || this.node.constValue() !== void 0) {
              sb(" ");
              this.node.compile(options, 2, false, sb);
            }
            sb(";");
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.popFile();
            }
          };
          _Return_prototype.walk = function (walker) {
            var _ref, node;
            if ((_ref = walker(this.node, this, "node")) != null) {
              node = _ref;
            } else {
              node = this.node.walk(walker);
            }
            if (node !== this.node) {
              return Return(this.pos, node);
            } else {
              return this;
            }
          };
          _Return_prototype.exitType = function () {
            return "return";
          };
          _Return_prototype.isSmall = function () {
            return this.node.isSmall();
          };
          _Return_prototype.isLarge = function () {
            return this.node.isLarge();
          };
          _Return_prototype.mutateLast = function (func, options) {
            var node;
            if (options != null ? options["return"] : void 0) {
              node = this.node.mutateLast(func, options);
              if (node !== this.node) {
                return Return(this.pos, node);
              } else {
                return this;
              }
            } else {
              return this;
            }
          };
          _Return_prototype.typeId = 23;
          _Return_prototype._toAst = function (pos, ident) {
            if (this.node.isConst() && this.node.constValue() === void 0) {
              return [];
            } else {
              return [this.node.toAst(pos, ident)];
            }
          };
          Return._fromAst = function (pos, node) {
            return Return(pos, node);
          };
          _Return_prototype._toJSON = function () {
            if (simplify(this.node)) {
              return this.node.toJSON();
            } else {
              return [];
            }
          };
          Return.fromJSON = function (line, column, file) {
            var node;
            node = __slice.call(arguments, 3);
            return Return(
              makePos(line, column, file),
              fromJSON(node)
            );
          };
          return Return;
        }(Statement));
        exports.Root = Root = (function () {
          var _Root_prototype;
          function Root(pos, body, variables, declarations) {
            var _this;
            _this = this instanceof Root ? this : __create(_Root_prototype);
            _this.pos = pos;
            if (body == null) {
              body = Noop(pos);
            }
            _this.body = body;
            if (variables == null) {
              variables = [];
            }
            _this.variables = variables;
            if (declarations == null) {
              declarations = [];
            }
            _this.declarations = declarations;
            validateFuncParamsAndVariables([], variables);
            return _this;
          }
          _Root_prototype = Root.prototype;
          Root.displayName = "Root";
          _Root_prototype.compile = function (options) {
            var _ref, code, endCompileTime, endUglifyTime, fs, minified,
                oldWarn_function, os, path, sb, startTime, tmpMap, UglifyJS, writer;
            if (options == null) {
              options = {};
            }
            if (!options.indent) {
              options.indent = 0;
            }
            if (!options.uglify && typeof options.writer === "function") {
              writer = options.writer;
            }
            if (writer) {
              sb = StringWriter(writer);
            } else {
              sb = StringBuilder();
            }
            startTime = new Date().getTime();
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.pushFile(this.pos.file);
            }
            if ((_ref = options.sourceMap) != null) {
              _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
            }
            compileFuncBody(
              options,
              sb,
              this.declarations,
              this.variables,
              this.body,
              true
            );
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.popFile();
            }
            endCompileTime = new Date().getTime();
            if (typeof options.progress === "function") {
              options.progress("compile", endCompileTime - startTime);
            }
            endUglifyTime = 0;
            if (writer == null) {
              code = sb.toString();
              if (options.uglify) {
                fs = require("fs");
                if (options.sourceMap != null) {
                  path = require("path");
                  os = require("os");
                  tmpMap = path.join(os.tmpDir(), "gs-" + Math.random() * 4294967296 + ".map");
                  fs.writeFileSync(tmpMap, options.sourceMap.toString(), "utf8");
                }
                UglifyJS = require("uglify-js");
                if ((_ref = UglifyJS.AST_Node) != null) {
                  oldWarn_function = _ref.warn_function;
                }
                if (typeof oldWarn_function === "function") {
                  UglifyJS.AST_Node.warn_function = function () {};
                }
                minified = UglifyJS.minify(code, {
                  fromString: true,
                  inSourceMap: tmpMap,
                  outSourceMap: (_ref = options.sourceMap) != null ? _ref.generatedFile : void 0
                });
                if (oldWarn_function != null) {
                  UglifyJS.AST_Node.warn_function = oldWarn_function;
                }
                if (tmpMap != null) {
                  fs.unlinkSync(tmpMap);
                }
                code = minified.code;
                endUglifyTime = new Date().getTime();
                if (typeof options.progress === "function") {
                  options.progress("uglify", endUglifyTime - endCompileTime);
                }
                if (options.sourceMap != null) {
                  options.sourceMap = minified.map;
                }
              }
              if (typeof options.writer === "function") {
                options.writer(code);
                code = "";
              }
            }
            return {
              compileTime: endCompileTime - startTime,
              uglifyTime: options.uglify ? endUglifyTime - endCompileTime : void 0,
              code: code || ""
            };
          };
          _Root_prototype.toString = function (options) {
            if (options == null) {
              options = {};
            }
            return this.compile(options).code;
          };
          _Root_prototype.isLarge = function () {
            return true;
          };
          _Root_prototype.walk = function (walker) {
            var body;
            body = this.body.walk(walker);
            if (body !== this.body) {
              return Root(this.pos, body, this.variables, this.declarations);
            } else {
              return this;
            }
          };
          _Root_prototype.mutateLast = function (func, options) {
            var body;
            body = this.body.mutateLast(func, options);
            if (body !== this.body) {
              return Root(this.pos, body, this.variables, this.declarations);
            } else {
              return this;
            }
          };
          _Root_prototype.exitType = function () {
            return this.last().exitType();
          };
          _Root_prototype.last = function () {
            var _ref;
            return (_ref = this.body)[_ref.length - 1];
          };
          _Root_prototype.inspect = Node.prototype.inspect;
          _Root_prototype.typeId = 24;
          _Root_prototype._toAst = function (pos, ident) {
            var _this;
            _this = this;
            return [
              this.declarations.length
                ? Arr(pos, (function () {
                  var _arr, _arr2, _i, _len, declaration;
                  for (_arr = [], _arr2 = __toArray(_this.declarations), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                    declaration = _arr2[_i];
                    _arr.push(Const(pos, declaration));
                  }
                  return _arr;
                }()))
                : Const(pos, 0),
              this.variables.length
                ? Arr(pos, (function () {
                  var _arr, _arr2, _i, _len, variable;
                  for (_arr = [], _arr2 = __toArray(_this.variables), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                    variable = _arr2[_i];
                    _arr.push(Const(pos, variable));
                  }
                  return _arr;
                }()))
                : Const(pos, 0),
              this.body.toAst(pos, ident)
            ];
          };
          Root._fromAst = function (pos, declarations, variables, body) {
            return Root(pos, body, variables || [], declarations || []);
          };
          _Root_prototype._toJSON = function () {
            var result;
            result = [
              simplifyArray(this.variables, 0),
              simplifyArray(this.declarations, 0)
            ];
            if (simplify(this.body)) {
              result.push.apply(result, __toArray(this.body.toJSON()));
            }
            return result;
          };
          Root.fromJSON = function (line, column, file, variables, declarations) {
            var body;
            body = __slice.call(arguments, 5);
            return Root(
              makePos(line, column, file),
              fromJSON(body),
              variables,
              declarations
            );
          };
          return Root;
        }());
        exports.This = This = (function (Expression) {
          var _Expression_prototype, _This_prototype;
          function This(pos) {
            var _this;
            _this = this instanceof This ? this : __create(_This_prototype);
            _this.pos = pos;
            return _this;
          }
          _Expression_prototype = Expression.prototype;
          _This_prototype = This.prototype = __create(_Expression_prototype);
          _This_prototype.constructor = This;
          This.displayName = "This";
          if (typeof Expression.extended === "function") {
            Expression.extended(This);
          }
          _This_prototype.compile = function (options, level, lineStart, sb) {
            var _ref;
            if ((_ref = options.sourceMap) != null) {
              _ref.add(
                sb.line,
                sb.column,
                this.pos.line,
                this.pos.column,
                this.pos.file
              );
            }
            sb("this");
          };
          _This_prototype.compileAsBlock = function (options, level, lineStart, sb) {
            Noop(this.pos).compileAsBlock(options, level, lineStart, sb);
          };
          _This_prototype.isNoop = function () {
            return true;
          };
          _This_prototype.walk = function () {
            return this;
          };
          _This_prototype.typeId = 25;
          This._fromAst = function (pos) {
            return This(pos);
          };
          This.fromJSON = function (line, column, file) {
            return This(makePos(line, column, file));
          };
          return This;
        }(Expression));
        exports.Throw = Throw = (function (Statement) {
          var _Statement_prototype, _Throw_prototype;
          function Throw(pos, node) {
            var _this;
            _this = this instanceof Throw ? this : __create(_Throw_prototype);
            _this.pos = pos;
            if (node == null) {
              node = Noop(pos);
            }
            _this.node = node;
            if (typeof node.toStatement === "function") {
              return node.toStatement().mutateLast(
                function (n) {
                  return Throw(_this.pos, n);
                },
                { noop: true }
              );
            }
            return _this;
          }
          _Statement_prototype = Statement.prototype;
          _Throw_prototype = Throw.prototype = __create(_Statement_prototype);
          _Throw_prototype.constructor = Throw;
          Throw.displayName = "Throw";
          if (typeof Statement.extended === "function") {
            Statement.extended(Throw);
          }
          _Throw_prototype.compile = function (options, level, lineStart, sb) {
            var _ref;
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.pushFile(this.pos.file);
            }
            if ((_ref = options.sourceMap) != null) {
              _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
            }
            sb("throw ");
            this.node.compile(options, 2, false, sb);
            sb(";");
            if (options.sourceMap != null && this.pos.file) {
              return options.sourceMap.popFile();
            }
          };
          _Throw_prototype.walk = function (walker) {
            var _ref, node;
            if ((_ref = walker(this.node, this, "node")) != null) {
              node = _ref;
            } else {
              node = this.node.walk(walker);
            }
            if (node !== this.node) {
              return Throw(this.pos, node);
            } else {
              return this;
            }
          };
          _Throw_prototype.exitType = function () {
            return "throw";
          };
          _Throw_prototype.isSmall = function () {
            return this.node.isSmall();
          };
          _Throw_prototype.isLarge = function () {
            return this.node.isLarge();
          };
          _Throw_prototype.typeId = 26;
          _Throw_prototype._toAst = function (pos, ident) {
            return [this.node.toAst(pos, ident)];
          };
          Throw._fromAst = function (pos, node) {
            return Throw(pos, node);
          };
          _Throw_prototype._toJSON = function () {
            if (simplify(this.node)) {
              return this.node.toJSON();
            } else {
              return [];
            }
          };
          Throw.fromJSON = function (line, column, file) {
            var node;
            node = __slice.call(arguments, 3);
            return Throw(
              makePos(line, column, file),
              fromJSON(node)
            );
          };
          return Throw;
        }(Statement));
        exports.Switch = Switch = (function (Statement) {
          var _Statement_prototype, _Switch_prototype, SwitchCase;
          function Switch(pos, node, cases, defaultCase, label) {
            var _this;
            _this = this instanceof Switch ? this : __create(_Switch_prototype);
            _this.pos = pos;
            if (node == null) {
              node = Noop(pos);
            }
            if (cases == null) {
              cases = [];
            }
            _this.cases = cases;
            if (defaultCase == null) {
              defaultCase = Noop(pos);
            }
            if (label == null) {
              label = null;
            }
            _this.label = label;
            if (!(node instanceof Expression)) {
              node = toConst(pos, node);
            }
            _this.node = node;
            _this.defaultCase = defaultCase.maybeToStatement();
            return _this;
          }
          _Statement_prototype = Statement.prototype;
          _Switch_prototype = Switch.prototype = __create(_Statement_prototype);
          _Switch_prototype.constructor = Switch;
          Switch.displayName = "Switch";
          if (typeof Statement.extended === "function") {
            Statement.extended(Switch);
          }
          _Switch_prototype.compile = function (options, level, lineStart, sb) {
            var _arr, _i, _len, _ref, case_, childOptions, minify;
            if (level !== 1) {
              throw Error("Cannot compile a statement except on the Block level");
            }
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.pushFile(this.pos.file);
            }
            if ((_ref = options.sourceMap) != null) {
              _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
            }
            minify = options.minify;
            if (this.label != null) {
              this.label.compile(options, level, lineStart, sb);
              sb(":");
              if (!minify) {
                sb(" ");
              }
            }
            sb("switch");
            if (!minify) {
              sb(" ");
            }
            sb("(");
            this.node.compile(options, 2, false, sb);
            sb(")");
            if (!minify) {
              sb(" ");
            }
            sb("{");
            childOptions = incIndent(options);
            for (_arr = __toArray(this.cases), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              case_ = _arr[_i];
              if (!minify) {
                sb(options.linefeed || "\n");
                sb.indent(options.indent);
              }
              sb("case ");
              case_.node.compile(options, 2, false, sb);
              sb(":");
              if (!case_.body.isNoop()) {
                if (case_.node.isSmall() && case_.body.isSmall()) {
                  if (!minify) {
                    sb(" ");
                  }
                  case_.body.compileAsStatement(options, true, sb);
                } else {
                  if (!minify) {
                    sb(options.linefeed || "\n");
                    sb.indent(childOptions.indent);
                  }
                  case_.body.compileAsStatement(childOptions, true, sb);
                }
              }
            }
            if (!this.defaultCase.isNoop()) {
              if (!minify) {
                sb(options.linefeed || "\n");
                sb.indent(options.indent);
              }
              sb("default:");
              if (this.defaultCase.isSmall()) {
                if (!minify) {
                  sb(" ");
                }
                this.defaultCase.compileAsStatement(options, true, sb);
              } else {
                if (!minify) {
                  sb(options.linefeed || "\n");
                  sb.indent(childOptions.indent);
                }
                this.defaultCase.compileAsStatement(childOptions, true, sb);
              }
            }
            if (!minify) {
              sb(options.linefeed || "\n");
              sb.indent(options.indent);
            }
            sb("}");
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.popFile();
            }
          };
          _Switch_prototype.walk = function (walker) {
            var _arr, _arr2, _i, _len, _ref, case_, caseBody, caseNode, cases,
                casesChanged, defaultCase, label, node;
            if ((_ref = walker(this.node, this, "node")) != null) {
              node = _ref;
            } else {
              node = this.node.walk(walker);
            }
            casesChanged = false;
            for (_arr = [], _arr2 = __toArray(this.cases), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
              case_ = _arr2[_i];
              if ((_ref = walker(case_.node, this, "caseNode")) != null) {
                caseNode = _ref;
              } else {
                caseNode = case_.node.walk(walker);
              }
              if ((_ref = walker(case_.body, this, "caseBody")) != null) {
                caseBody = _ref;
              } else {
                caseBody = case_.body.walk(walker);
              }
              if (caseNode !== case_.node || caseBody !== case_.body) {
                casesChanged = true;
                _arr.push(SwitchCase(case_.pos, caseNode, caseBody));
              } else {
                _arr.push(case_);
              }
            }
            cases = _arr;
            if ((_ref = walker(this.defaultCase, this, "defaultCase")) != null) {
              defaultCase = _ref;
            } else {
              defaultCase = this.defaultCase.walk(walker);
            }
            if (this.label != null) {
              if ((_ref = walker(this.label, this, "label")) != null) {
                label = _ref;
              } else {
                label = this.label.walk(walker);
              }
            } else {
              label = this.label;
            }
            if (node !== this.node || casesChanged || defaultCase !== this.defaultCase || label !== this.label) {
              return Switch(
                this.pos,
                node,
                cases,
                defaultCase,
                label
              );
            } else {
              return this;
            }
          };
          _Switch_prototype.typeId = 27;
          _Switch_prototype._toAst = function (pos, ident) {
            var _arr, _i, _len, case_, result;
            result = [
              this.label ? this.label.toAst(pos, ident) : Const(pos, 0),
              this.node.toAst(pos, ident)
            ];
            for (_arr = __toArray(this.cases), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              case_ = _arr[_i];
              result.push(Const(pos, case_.pos.line));
              result.push(Const(pos, case_.pos.column));
              result.push(Const(pos, case_.pos.file || 0));
              result.push(case_.node.toAst(pos, ident));
              result.push(case_.body.toAst(pos, ident));
            }
            if (!(this.defaultCase instanceof Noop)) {
              result.push(this.defaultCase.toAst(pos, ident));
            }
            return result;
          };
          Switch._fromAst = function (pos, label, node) {
            var caseData, defaultCase, i, len, resultCases;
            caseData = __slice.call(arguments, 3);
            len = caseData.length;
            switch (len % 5) {
            case 0:
              break;
            case 1:
              --len;
              defaultCase = caseData[len];
              break;
            default: throw Error("Unknown number of arguments passed to _fromAst");
            }
            resultCases = [];
            for (i = 0; i < len; i += 5) {
              resultCases.push(SwitchCase(
                makePos(caseData[i], caseData[i + 1], caseData[i + 2]),
                caseData[i + 3],
                caseData[i + 4]
              ));
            }
            return Switch(
              pos,
              node,
              resultCases,
              defaultCase,
              label || null
            );
          };
          _Switch_prototype._toJSON = function () {
            var _arr, _i, _len, case_, result;
            result = [
              this.label || 0,
              simplify(this.node, 0)
            ];
            for (_arr = __toArray(this.cases), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              case_ = _arr[_i];
              result.push(
                case_.pos.line,
                case_.pos.column,
                case_.pos.file,
                simplify(case_.node, 0),
                simplify(case_.body, 0)
              );
            }
            if (!(this.defaultCase instanceof Noop)) {
              result.push(simplify(this.defaultCase, 0));
            }
            return result;
          };
          Switch.fromJSON = function (line, column, file, label, node) {
            var caseData, cBody, cColumn, cFile, cLine, cNode, defaultCase, i, len,
                resultCases;
            caseData = __slice.call(arguments, 5);
            len = caseData.length;
            switch (len % 5) {
            case 0:
              break;
            case 1:
              --len;
              defaultCase = caseData[len];
              break;
            default: throw Error("Unknown number of arguments passed to fromJSON");
            }
            resultCases = [];
            for (i = 0; i < len; i += 5) {
              cLine = caseData[i];
              cColumn = caseData[i + 1];
              cFile = caseData[i + 2];
              cNode = caseData[i + 3];
              cBody = caseData[i + 4];
              resultCases.push(SwitchCase(
                makePos(cLine, cColumn, cFile),
                fromJSON(cNode),
                fromJSON(cBody)
              ));
            }
            return Switch(
              makePos(line, column, file),
              fromJSON(node),
              resultCases,
              fromJSON(defaultCase),
              label ? fromJSON(label) : null
            );
          };
          Switch.Case = SwitchCase = (function () {
            var _SwitchCase_prototype;
            function SwitchCase(pos, node, body) {
              var _this;
              _this = this instanceof SwitchCase ? this : __create(_SwitchCase_prototype);
              _this.pos = pos;
              if (node == null) {
                node = Noop(pos);
              }
              if (body == null) {
                body = Noop(pos);
              }
              if (!(node instanceof Expression)) {
                node = toConst(pos, node);
              }
              _this.node = node;
              _this.body = body.maybeToStatement();
              return _this;
            }
            _SwitchCase_prototype = SwitchCase.prototype;
            SwitchCase.displayName = "SwitchCase";
            _SwitchCase_prototype.isLarge = function () {
              return true;
            };
            _SwitchCase_prototype.isSmall = function () {
              return false;
            };
            _SwitchCase_prototype.walk = function (walker) {
              var _ref, body, node;
              if ((_ref = walker(this.node, this, "node")) != null) {
                node = _ref;
              } else {
                node = this.node.walk(walker);
              }
              if ((_ref = walker(this.body, this, "body")) != null) {
                body = _ref;
              } else {
                body = this.body.walk(walker);
              }
              if (node !== this.node || body !== this.body) {
                return SwitchCase(this.pos, node, body);
              } else {
                return this;
              }
            };
            _SwitchCase_prototype.inspect = Node.prototype.inspect;
            return SwitchCase;
          }());
          return Switch;
        }(Statement));
        exports.TryCatch = TryCatch = (function (Statement) {
          var _Statement_prototype, _TryCatch_prototype;
          function TryCatch(pos, tryBody, catchIdent, catchBody, label) {
            var _this;
            _this = this instanceof TryCatch ? this : __create(_TryCatch_prototype);
            _this.pos = pos;
            if (tryBody == null) {
              tryBody = Noop(pos);
            }
            _this.catchIdent = catchIdent;
            if (catchBody == null) {
              catchBody = Noop(pos);
            }
            if (label == null) {
              label = null;
            }
            _this.label = label;
            _this.tryBody = tryBody.maybeToStatement();
            if (_this.tryBody.isNoop()) {
              return _this.tryBody;
            }
            _this.catchBody = catchBody.maybeToStatement();
            return _this;
          }
          _Statement_prototype = Statement.prototype;
          _TryCatch_prototype = TryCatch.prototype = __create(_Statement_prototype);
          _TryCatch_prototype.constructor = TryCatch;
          TryCatch.displayName = "TryCatch";
          if (typeof Statement.extended === "function") {
            Statement.extended(TryCatch);
          }
          _TryCatch_prototype.compile = function (options, level, lineStart, sb) {
            var _ref, childOptions, minify;
            if (level !== 1) {
              throw Error("Cannot compile a statement except on the Block level");
            }
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.pushFile(this.pos.file);
            }
            if ((_ref = options.sourceMap) != null) {
              _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
            }
            minify = options.minify;
            if (this.label != null) {
              this.label.compile(options, level, lineStart, sb);
              sb(":");
              if (!minify) {
                sb(" ");
              }
            }
            if (minify) {
              sb("try{");
            } else {
              sb("try {");
              sb(options.linefeed || "\n");
            }
            childOptions = incIndent(options);
            if (!minify) {
              sb.indent(childOptions.indent);
            }
            this.tryBody.compileAsStatement(childOptions, true, sb);
            if (!minify) {
              sb(options.linefeed || "\n");
              sb.indent(options.indent);
            }
            sb(minify ? "}catch(" : "} catch (");
            this.catchIdent.compile(options, 2, false, sb);
            sb(minify ? "){" : ") {");
            if (!this.catchBody.isNoop()) {
              if (!minify) {
                sb(options.linefeed || "\n");
                sb.indent(childOptions.indent);
              }
              this.catchBody.compileAsStatement(childOptions, true, sb);
              if (!minify) {
                sb(options.linefeed || "\n");
                sb.indent(options.indent);
              }
            }
            sb("}");
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.popFile();
            }
          };
          _TryCatch_prototype.walk = function (walker) {
            var _ref, catchBody, catchIdent, label, tryBody;
            if ((_ref = walker(this.tryBody, this, "tryBody")) != null) {
              tryBody = _ref;
            } else {
              tryBody = this.tryBody.walk(walker);
            }
            if ((_ref = walker(this.catchIdent, this, "catchIdent")) != null) {
              catchIdent = _ref;
            } else {
              catchIdent = this.catchIdent.walk(walker);
            }
            if ((_ref = walker(this.catchBody, this, "catchBody")) != null) {
              catchBody = _ref;
            } else {
              catchBody = this.catchBody.walk(walker);
            }
            if (this.label != null) {
              if ((_ref = walker(this.label, this, "label")) != null) {
                label = _ref;
              } else {
                label = this.label.walk(walker);
              }
            } else {
              label = this.label;
            }
            if (tryBody !== this.tryBody || catchIdent !== this.catchIdent || catchBody !== this.catchBody || label !== this.label) {
              return TryCatch(
                this.pos,
                tryBody,
                catchIdent,
                catchBody,
                label
              );
            } else {
              return this;
            }
          };
          _TryCatch_prototype.typeId = 28;
          _TryCatch_prototype._toAst = function (pos, ident) {
            return [
              this.tryBody.toAst(pos, ident),
              this.catchIdent.toAst(pos, ident),
              this.catchBody.toAst(pos, ident)
            ].concat(this.label
              ? [this.label.toAst(pos, ident)]
              : []);
          };
          TryCatch._fromAst = function (pos, tryBody, catchIdent, catchBody, label) {
            return TryCatch(
              pos,
              tryBody,
              catchIdent,
              catchBody,
              label
            );
          };
          _TryCatch_prototype._toJSON = function () {
            var result;
            result = [
              this.label || 0,
              simplify(this.tryBody, 0),
              this.catchIdent
            ];
            if (simplify(this.catchBody)) {
              result.push.apply(result, __toArray(this.catchBody.toJSON()));
            }
            return result;
          };
          TryCatch.fromJSON = function (line, column, file, label, tryBody, catchIdent) {
            var catchBody;
            catchBody = __slice.call(arguments, 6);
            return TryCatch(
              makePos(line, column, file),
              fromJSON(tryBody),
              fromJSON(catchIdent),
              fromJSON(catchBody),
              label ? fromJSON(label) : null
            );
          };
          return TryCatch;
        }(Statement));
        exports.TryFinally = TryFinally = (function (Statement) {
          var _Statement_prototype, _TryFinally_prototype;
          function TryFinally(pos, tryBody, finallyBody, label) {
            var _this;
            _this = this instanceof TryFinally ? this : __create(_TryFinally_prototype);
            _this.pos = pos;
            if (tryBody == null) {
              tryBody = Noop(pos);
            }
            if (finallyBody == null) {
              finallyBody = Noop(pos);
            }
            if (label == null) {
              label = null;
            }
            _this.label = label;
            _this.tryBody = tryBody.maybeToStatement();
            _this.finallyBody = finallyBody.maybeToStatement();
            if (label == null) {
              if (_this.tryBody.isNoop()) {
                return _this.finallyBody;
              } else if (_this.finallyBody.isNoop()) {
                return _this.tryBody;
              }
            }
            return _this;
          }
          _Statement_prototype = Statement.prototype;
          _TryFinally_prototype = TryFinally.prototype = __create(_Statement_prototype);
          _TryFinally_prototype.constructor = TryFinally;
          TryFinally.displayName = "TryFinally";
          if (typeof Statement.extended === "function") {
            Statement.extended(TryFinally);
          }
          _TryFinally_prototype.compile = function (options, level, lineStart, sb) {
            var _ref, childOptions, minify;
            if (level !== 1) {
              throw Error("Cannot compile a statement except on the Block level");
            }
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.pushFile(this.pos.file);
            }
            if ((_ref = options.sourceMap) != null) {
              _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
            }
            minify = options.minify;
            if (this.label != null) {
              this.label.compile(options, level, lineStart, sb);
              sb(":");
              if (!minify) {
                sb(" ");
              }
            }
            if (minify) {
              sb("try{");
            } else {
              sb("try {");
              sb(options.linefeed || "\n");
            }
            childOptions = incIndent(options);
            if (!minify) {
              sb.indent(childOptions.indent);
            }
            if (this.tryBody instanceof TryCatch && this.tryBody.label == null) {
              this.tryBody.tryBody.compileAsStatement(childOptions, true, sb);
              if (!minify) {
                sb(options.linefeed || "\n");
                sb.indent(options.indent);
              }
              sb(minify ? "}catch(" : "} catch (");
              this.tryBody.catchIdent.compile(options, 2, false, sb);
              sb(minify ? "){" : ") {");
              if (!this.tryBody.catchBody.isNoop()) {
                if (!minify) {
                  sb(options.linefeed || "\n");
                  sb.indent(childOptions.indent);
                }
                this.tryBody.catchBody.compileAsStatement(childOptions, true, sb);
                if (!minify) {
                  sb(options.linefeed || "\n");
                  sb.indent(options.indent);
                }
              }
            } else {
              this.tryBody.compileAsStatement(childOptions, true, sb);
              if (!minify) {
                sb(options.linefeed || "\n");
                sb.indent(options.indent);
              }
            }
            if (minify) {
              sb("}finally{");
            } else {
              sb("} finally {");
              sb(options.linefeed || "\n");
            }
            if (!minify) {
              sb.indent(childOptions.indent);
            }
            this.finallyBody.compileAsStatement(childOptions, true, sb);
            if (!minify) {
              sb(options.linefeed || "\n");
              sb.indent(options.indent);
            }
            sb("}");
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.popFile();
            }
          };
          _TryFinally_prototype.walk = function (walker) {
            var _ref, finallyBody, label, tryBody;
            if ((_ref = walker(this.tryBody, this, "tryBody")) != null) {
              tryBody = _ref;
            } else {
              tryBody = this.tryBody.walk(walker);
            }
            if ((_ref = walker(this.finallyBody, this, "finallyBody")) != null) {
              finallyBody = _ref;
            } else {
              finallyBody = this.finallyBody.walk(walker);
            }
            if (this.label != null) {
              if ((_ref = walker(this.label, this, "label")) != null) {
                label = _ref;
              } else {
                label = this.label.walk(walker);
              }
            } else {
              label = this.label;
            }
            if (tryBody !== this.tryBody || finallyBody !== this.finallyBody || label !== this.label) {
              return TryFinally(this.pos, tryBody, finallyBody, label);
            } else {
              return this;
            }
          };
          _TryFinally_prototype.typeId = 29;
          _TryFinally_prototype._toAst = function (pos, ident) {
            return [
              this.tryBody.toAst(pos, ident),
              this.finallyBody.toAst(pos, ident)
            ].concat(this.label
              ? [this.label.toAst(pos, ident)]
              : []);
          };
          TryFinally._fromAst = function (pos, tryBody, finallyBody, label) {
            return TryFinally(pos, tryBody, finallyBody, label);
          };
          _TryFinally_prototype._toJSON = function () {
            var result;
            result = [
              this.label || 0,
              simplify(this.tryBody, 0)
            ];
            if (simplify(this.finallyBody)) {
              result.push.apply(result, __toArray(this.finallyBody.toJSON()));
            }
            return result;
          };
          TryFinally.fromJSON = function (line, column, file, label, tryBody) {
            var finallyBody;
            finallyBody = __slice.call(arguments, 5);
            return TryFinally(
              makePos(line, column, file),
              fromJSON(tryBody),
              fromJSON(finallyBody),
              label ? fromJSON(label) : null
            );
          };
          return TryFinally;
        }(Statement));
        exports.Unary = Unary = (function (Expression) {
          var _Expression_prototype, _Unary_prototype, ASSIGNMENT_OPERATORS,
              KNOWN_OPERATORS;
          function Unary(pos, op, node) {
            var _this;
            _this = this instanceof Unary ? this : __create(_Unary_prototype);
            _this.pos = pos;
            _this.op = op;
            if (node == null) {
              node = Noop(pos);
            }
            if (!__in(op, KNOWN_OPERATORS)) {
              throw Error("Unknown unary operator: " + op);
            }
            if (!(node instanceof Expression)) {
              node = toConst(line, column, node);
            }
            if (op === "delete" && (!(node instanceof Binary) || node.op !== ".")) {
              throw Error("Cannot use delete operator on a non-access");
            }
            _this.node = node;
            return _this;
          }
          _Expression_prototype = Expression.prototype;
          _Unary_prototype = Unary.prototype = __create(_Expression_prototype);
          _Unary_prototype.constructor = Unary;
          Unary.displayName = "Unary";
          if (typeof Expression.extended === "function") {
            Expression.extended(Unary);
          }
          _Unary_prototype.compile = function (options, level, lineStart, sb) {
            var _ref, op;
            op = this.op;
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.pushFile(this.pos.file);
            }
            if ((_ref = options.sourceMap) != null) {
              _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
            }
            if (op === "++post" || op === "--post") {
              this.node.compile(options, 16, false, sb);
              sb(op.substring(0, 2));
            } else {
              sb(op);
              if (op === "typeof" || op === "void" || op === "delete" || (op === "+" || op === "-" || op === "++" || op === "--") && (this.node instanceof Unary && (op === "+" || op === "-" || op === "++" || op === "--") || this.node instanceof Const && typeof this.node.value === "number" && isNegative(this.node.value))) {
                sb(" ");
              }
              this.node.compile(options, 16, false, sb);
            }
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.popFile();
            }
          };
          _Unary_prototype.compileAsBlock = function (options, level, lineStart, sb) {
            var op;
            op = this.op;
            if (__owns.call(ASSIGNMENT_OPERATORS, op)) {
              this.compile(options, level, lineStart, sb);
            } else {
              this.node.compileAsBlock(options, level, lineStart, sb);
            }
          };
          _Unary_prototype.compileAsStatement = function (options, lineStart, sb) {
            var op;
            op = this.op;
            if (__owns.call(ASSIGNMENT_OPERATORS, op)) {
              _Expression_prototype.compileAsStatement.call(this, options, lineStart, sb);
            } else {
              this.node.compileAsStatement(options, lineStart, sb);
            }
          };
          KNOWN_OPERATORS = [
            "++",
            "--",
            "++post",
            "--post",
            "!",
            "~",
            "+",
            "-",
            "typeof",
            "void",
            "delete"
          ];
          ASSIGNMENT_OPERATORS = {
            "++": true,
            "--": true,
            "++post": true,
            "--post": true,
            "delete": true
          };
          _Unary_prototype.isLarge = function () {
            return this.node.isLarge();
          };
          _Unary_prototype.isSmall = function () {
            return this.node.isSmall();
          };
          _Unary_prototype.isAssign = function () {
            return __owns.call(ASSIGNMENT_OPERATORS, this.op);
          };
          _Unary_prototype.isNoop = function () {
            var _ref;
            if ((_ref = this._isNoop) == null) {
              return this._isNoop = !__owns.call(ASSIGNMENT_OPERATORS, this.op) && this.node.isNoop();
            } else {
              return _ref;
            }
          };
          _Unary_prototype.walk = function (walker) {
            var _ref, node;
            if ((_ref = walker(this.node, this, "node")) != null) {
              node = _ref;
            } else {
              node = this.node.walk(walker);
            }
            if (node !== this.node) {
              return Unary(this.pos, this.op, node);
            } else {
              return this;
            }
          };
          _Unary_prototype.typeId = 30;
          _Unary_prototype._toAst = function (pos, ident) {
            return [
              Const(pos, this.op),
              this.node.toAst(pos, ident)
            ];
          };
          Unary._fromAst = function (pos, op, node) {
            return Unary(pos, op, node);
          };
          _Unary_prototype._toJSON = function () {
            var result;
            result = [this.op];
            if (simplify(this.node)) {
              result.push.apply(result, __toArray(this.node.toJSON()));
            }
            return result;
          };
          Unary.fromJSON = function (line, column, file, op) {
            var node;
            node = __slice.call(arguments, 4);
            return Unary(
              makePos(line, column, file),
              op,
              fromJSON(node)
            );
          };
          return Unary;
        }(Expression));
        While = exports.While = function (pos, test, body, label) {
          return For(
            pos,
            null,
            test,
            null,
            body,
            label
          );
        };
        AstTypeToClass = {
          1: Arguments,
          2: Arr,
          3: Binary,
          4: BlockStatement,
          5: BlockExpression,
          6: Break,
          7: Call,
          8: Comment,
          9: Const,
          10: Continue,
          11: Debugger,
          12: DoWhile,
          13: Eval,
          14: For,
          15: ForIn,
          16: Func,
          17: Ident,
          18: IfStatement,
          19: IfExpression,
          20: Noop,
          21: Obj,
          22: Regex,
          23: Return,
          24: Root,
          25: This,
          26: Throw,
          27: Switch,
          28: TryCatch,
          29: TryFinally,
          30: Unary
        };
        exports.byTypeId = function (typeId, line, column, file) {
          var _ref, args;
          args = __slice.call(arguments, 4);
          return (_ref = AstTypeToClass[typeId])._fromAst.apply(_ref, [makePos(line, column, file)].concat(__toArray(args)));
        };
        fromJSON = exports.fromJSON = function (obj) {
          var _ref, type;
          if (!obj) {
            return Noop(makePos(0, 0));
          }
          if (__isArray(obj)) {
            if (obj.length === 0) {
              return Noop(makePos(0, 0));
            }
            type = obj[0];
            if (obj.length < 1 || typeof type !== "number") {
              throw Error("Expected an array with a number as its first item, got " + __typeof(type));
            }
            if (!__owns.call(AstTypeToClass, type)) {
              throw Error("Unknown node type: " + type);
            }
            return (_ref = AstTypeToClass[type]).fromJSON.apply(_ref, __toArray(__slice.call(obj, 1)));
          } else {
            throw TypeError("Must provide an object or array to deserialize");
          }
        };
        function arrayFromJSON(array) {
          var _arr, _arr2, _i, _len, item;
          if (array == null) {
            return [];
          } else if (__isArray(array)) {
            for (_arr = [], _arr2 = __toArray(array), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
              item = _arr2[_i];
              _arr.push(fromJSON(item));
            }
            return _arr;
          } else {
            throw Error("Expected an array, got " + __typeof(array));
          }
        }
        function fromLiteral(pos, value) {
          var _ref;
          if (value === null || (_ref = typeof value) === "undefined" || _ref === "boolean" || _ref === "number" || _ref === "string") {
            return Const(pos, value);
          } else if (__isArray(value)) {
            return Arr(pos, (function () {
              var _arr, _arr2, _i, _len, item;
              for (_arr = [], _arr2 = __toArray(value), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                item = _arr2[_i];
                _arr.push(fromLiteral(pos, item));
              }
              return _arr;
            }()));
          } else if (value.constructor === Object) {
            return Obj(pos, (function () {
              var _arr, k, v;
              _arr = [];
              for (k in value) {
                if (__owns.call(value, k)) {
                  v = value[k];
                  _arr.push(Obj.Pair(pos, k, fromLiteral(pos, v)));
                }
              }
              return _arr;
            }()));
          } else {
            throw TypeError("Cannot convert " + __typeof(value) + " to an ast literal");
          }
        }
        exports.fromLiteral = fromLiteral;
      }.call(this));
      
      return module.exports;
    };
    require['./parser'] = function () {
      var module = { exports: this };
      var exports = this;
      (function (GLOBAL) {
        "use strict";
        var __bind, __cmp, __create, __curry, __defer, __generatorToPromise, __import,
            __in, __isArray, __owns, __promise, __slice, __toArray, __toPromise,
            __typeof, _arr, _Block, _DefineMacro, _FunctionBody, _FunctionDeclaration,
            _i, _len, _Name, _o, _ref, _ref2, _SomeEmptyLinesWithCheckIndent, _Symbol,
            _this, AccessMultiNode, AccessNode, addParamToScope,
            allowSpaceBeforeAccess, AnyArrayLiteral, AnyObjectLiteral, ArgsNode,
            ArgumentsLiteral, ArrayLiteral, ArrayNode, ArrayParameter, ArrayType,
            AssignmentAsExpression, AssignNode, Ast, AsterixChar, AstExpression,
            AstStatement, AtSignChar, BackslashChar, BackslashEscapeSequence,
            BackslashStringLiteral, BasicInvocationOrAccess, BinaryDigit, BinaryNode,
            BinaryNumber, BinaryOperationByPrecedence, Block, BlockNode, Body,
            BodyNoEnd, BodyNoIndent, BodyNoIndentNoEnd, BodyWithIndent, BOM, Box,
            BracketedObjectKey, BreakNode, cache, CallNode, CaretChar, Cascade,
            CascadePart, CascadePartWithCascade, CheckStop, CloseCurlyBrace,
            CloseCurlyBraceChar, ClosedArguments, CloseParenthesis,
            CloseSquareBracket, Colon, ColonChar, ColonEmbeddedClose,
            ColonEmbeddedCloseWrite, ColonEqual, ColonNewline, Comma, CommaChar,
            CommaOrNewline, CommaOrSomeEmptyLinesWithCheckIndent, CommentNode,
            ConstantLiteral, ConstantLiteralAccessPart, ConstNode, ConstObjectKey,
            ContinueNode, convertInvocationOrAccess, CountIndent, CurrentArrayLength,
            CustomOperatorCloseParenthesis, DebuggerNode, DecimalDigit, DecimalNumber,
            DedentedBody, DefineConstLiteral, DefineHelper, DefineMacro,
            DefineOperator, DefineSyntax, DefNode, disallowEmbeddedText,
            disallowSpaceBeforeAccess, DollarSign, DollarSignChar,
            dontRequireParameterSequence, DoubleColonChar, DoubleQuote,
            DoubleStringArrayLiteral, DoubleStringLiteral, DoubleStringLiteralInner,
            DualObjectKey, EmbeddedBlock, EmbeddedClose, EmbeddedCloseComment,
            EmbeddedCloseWrite, EmbeddedLiteralText, EmbeddedLiteralTextInnerPart,
            EmbeddedLiteralTextInnerPartWithBlock, EmbeddedOpen, EmbeddedOpenComment,
            EmbeddedOpenWrite, EmbeddedRootGeneratorP, EmbeddedRootInnerP,
            EmbeddedRootP, EmbeddedWriteExpression, EmbedWriteNode, EmptyLine,
            EmptyLines, EmptyLinesSpace, EndNoIndent, EqualChar, EqualSign,
            EqualSignChar, Eval, EvalNode, ExclamationPointChar, Expression,
            ExpressionAsStatement, ExpressionOrAssignment,
            ExpressionOrAssignmentOrBody, ForInNode, ForNode, fromCharCode,
            FunctionBody, FunctionDeclaration, FunctionGlyph, FunctionLiteral,
            FunctionNode, FunctionType, GeneratorBody, GeneratorBodyNoEnd,
            GeneratorFunctionBody, getPackageVersion, getReservedIdents, GetSetToken,
            GreaterThan, GreaterThanChar, HashSignChar, HexDigit, HexEscapeSequence,
            HexNumber, Identifier, IdentifierNameConst,
            IdentifierNameConstOrNumberLiteral, IdentifierOrAccess,
            IdentifierOrSimpleAccess, IdentifierOrSimpleAccessPart,
            IdentifierOrSimpleAccessStart, IdentifierOrThisAccess,
            IdentifierParameter, IdentNode, IfNode, Imports, inAst, inCascade,
            IndentedUnclosedArrayLiteral, IndentedUnclosedArrayLiteralInner,
            IndentedUnclosedObjectLiteral, IndentedUnclosedObjectLiteralInner,
            INDENTS, inEvilAst, inExpression, inFunctionTypeParams, inMacro,
            inStatement, InvocationArguments, InvocationOrAccess,
            InvocationOrAccessPart, KeyValuePair, KvpParameter, LessThan,
            LessThanChar, Letter, LicenseComment, Line, Literal, Logic,
            MacroAccessNode, MacroBody, MacroConstNode, MacroContext, MacroError,
            MacroHolder, MacroName, macroName, MacroNames, MacroOptions, MacroSyntax,
            MacroSyntaxChoiceParameters, MacroSyntaxParameter, MacroSyntaxParameters,
            MacroSyntaxParameterType, makeEmbeddedRule, MapLiteral, MaybeAsType,
            MaybeAtSignChar, MaybeComma, MaybeCommaOrNewline, MaybeComment,
            MaybeExclamationPointChar, MaybeNotToken, MaybeQuestionMarkChar,
            MaybeSpreadToken, MaybeUnderscores, MethodDeclaration, MinusChar, mutate,
            Name, NameChar, NameOrSymbol, NamePart, NameStart, Node, nodeType,
            NoNewlineIfNoIndent, NonUnionType, NoSpace, NoSpaceNewline, NotColon,
            NotColonUnlessNoIndentAndNewline, NotEmbeddedOpenComment,
            NotEmbeddedOpenWrite, Nothing, NothingNode, notInFunctionTypeParams,
            NumberChar, NumberLiteral, ObjectKey, ObjectKeyColon, ObjectLiteral,
            ObjectNode, ObjectParameter, ObjectType, ObjectTypePair, OctalDigit,
            OctalNumber, OpenCurlyBrace, OpenCurlyBraceChar, OpenParenthesis,
            OpenSquareBracket, OpenSquareBracketChar, ParamDualObjectKey, Parameter,
            ParameterOrNothing, Parameters, ParameterSequence, ParamNode,
            ParamSingularObjectKey, Parenthetical, parse, Parser, ParserError,
            PercentSign, PercentSignChar, Period, PeriodOrDoubleColonChar, Pipe,
            PipeChar, PlusChar, PlusOrMinusChar, PostfixUnaryOperation,
            PrefixUnaryOperation, preventUnclosedObjectLiteral, PrimaryExpression,
            PropertyDualObjectKey, PropertyOrDualObjectKey,
            PropertyOrDualObjectKeyOrMethodDeclaration, quote, RadixNumber,
            RegexLiteral, RegexpNode, requireParameterSequence, ReturnNode,
            RootInnerP, RootNode, RootP, Scope, Semicolon, SemicolonChar, Semicolons,
            setImmediate, SetLiteral, Shebang, SHORT_CIRCUIT, SingleEscapeCharacter,
            SingleQuote, SingleStringLiteral, SingularObjectKey, SomeEmptyLines,
            SomeEmptyLinesWithCheckIndent, Space, SpaceChar, SpaceChars, SpreadNode,
            SpreadOrExpression, SpreadToken, Stack, Statement, StringInterpolation,
            StringLiteral, stringRepeat, SuperInvocation, SuperNode, SwitchNode,
            Symbol, symbol, SymbolChar, SyntaxChoiceNode, SyntaxManyNode,
            SyntaxParamNode, SyntaxSequenceNode, ThisLiteral, ThisNode,
            ThisOrShorthandLiteral, ThisOrShorthandLiteralPeriod,
            ThisShorthandLiteral, ThrowNode, TmpNode, TmpWrapperNode, trimRight,
            TripleDoubleQuote, TripleDoubleStringArrayLiteral, TripleDoubleStringLine,
            TripleDoubleStringLiteral, TripleSingleQuote, TripleSingleStringLine,
            TripleSingleStringLiteral, TryCatchNode, TryFinallyNode, Type,
            TypeFunctionNode, TypeGenericNode, TypeObjectNode, TypeReference,
            TypeUnionNode, UnaryNode, UnclosedArguments, UnclosedArrayLiteralElement,
            UnclosedObjectLiteral, UnclosedObjectLiteralsAllowed, Underscore,
            UnicodeEscapeSequence, unique, unusedCaches, UseMacro, VarNode, word,
            wordOrSymbol, YieldNode, Zero;
        _this = this;
        __bind = function (parent, child) {
          var func;
          if (parent == null) {
            throw TypeError("Expected parent to be an object, got " + __typeof(parent));
          }
          func = parent[child];
          if (typeof func !== "function") {
            throw Error("Trying to bind child '" + String(child) + "' which is not a function");
          }
          return function () {
            return func.apply(parent, arguments);
          };
        };
        __cmp = function (left, right) {
          var type;
          if (left === right) {
            return 0;
          } else {
            type = typeof left;
            if (type !== "number" && type !== "string") {
              throw TypeError("Cannot compare a non-number/string: " + type);
            } else if (type !== typeof right) {
              throw TypeError("Cannot compare elements of different types: " + type + " vs " + typeof right);
            } else if (left < right) {
              return -1;
            } else {
              return 1;
            }
          }
        };
        __create = typeof Object.create === "function" ? Object.create
          : function (x) {
            function F() {}
            F.prototype = x;
            return new F();
          };
        __curry = function (numArgs, f) {
          var currier;
          if (typeof numArgs !== "number") {
            throw TypeError("Expected numArgs to be a Number, got " + __typeof(numArgs));
          }
          if (typeof f !== "function") {
            throw TypeError("Expected f to be a Function, got " + __typeof(f));
          }
          if (numArgs > 1) {
            currier = function (args) {
              var ret;
              if (args.length >= numArgs) {
                return f.apply(this, args);
              } else {
                ret = function () {
                  if (arguments.length === 0) {
                    return ret;
                  } else {
                    return currier.call(this, args.concat(__slice.call(arguments)));
                  }
                };
                return ret;
              }
            };
            return currier([]);
          } else {
            return f;
          }
        };
        __defer = (function () {
          function __defer() {
            var deferred, isError, value;
            isError = false;
            value = null;
            deferred = [];
            function complete(newIsError, newValue) {
              var funcs;
              if (deferred) {
                funcs = deferred;
                deferred = null;
                isError = newIsError;
                value = newValue;
                if (funcs.length) {
                  setImmediate(function () {
                    var _end, i;
                    for (i = 0, _end = funcs.length; i < _end; ++i) {
                      funcs[i]();
                    }
                  });
                }
              }
            }
            return {
              promise: {
                then: function (onFulfilled, onRejected, allowSync) {
                  var _ref, fulfill, promise, reject;
                  if (allowSync !== true) {
                    allowSync = void 0;
                  }
                  _ref = __defer();
                  promise = _ref.promise;
                  fulfill = _ref.fulfill;
                  reject = _ref.reject;
                  function step() {
                    var f, result;
                    try {
                      if (isError) {
                        f = onRejected;
                      } else {
                        f = onFulfilled;
                      }
                      if (typeof f === "function") {
                        result = f(value);
                        if (result && typeof result.then === "function") {
                          result.then(fulfill, reject, allowSync);
                        } else {
                          fulfill(result);
                        }
                      } else {
                        (isError ? reject : fulfill)(value);
                      }
                    } catch (e) {
                      reject(e);
                    }
                  }
                  if (deferred) {
                    deferred.push(step);
                  } else if (allowSync) {
                    step();
                  } else {
                    setImmediate(step);
                  }
                  return promise;
                },
                sync: function () {
                  var result, state;
                  state = 0;
                  result = 0;
                  this.then(
                    function (ret) {
                      state = 1;
                      return result = ret;
                    },
                    function (err) {
                      state = 2;
                      return result = err;
                    },
                    true
                  );
                  switch (state) {
                  case 0: throw Error("Promise did not execute synchronously");
                  case 1: return result;
                  case 2: throw result;
                  default: throw Error("Unknown state");
                  }
                }
              },
              fulfill: function (value) {
                complete(false, value);
              },
              reject: function (reason) {
                complete(true, reason);
              }
            };
          }
          __defer.fulfilled = function (value) {
            var d;
            d = __defer();
            d.fulfill(value);
            return d.promise;
          };
          __defer.rejected = function (reason) {
            var d;
            d = __defer();
            d.reject(reason);
            return d.promise;
          };
          return __defer;
        }());
        __generatorToPromise = function (generator, allowSync) {
          if (typeof generator !== "object" || generator === null) {
            throw TypeError("Expected generator to be an Object, got " + __typeof(generator));
          } else {
            if (typeof generator.send !== "function") {
              throw TypeError("Expected generator.send to be a Function, got " + __typeof(generator.send));
            }
            if (typeof generator["throw"] !== "function") {
              throw TypeError("Expected generator.throw to be a Function, got " + __typeof(generator["throw"]));
            }
          }
          if (allowSync == null) {
            allowSync = false;
          } else if (typeof allowSync !== "boolean") {
            throw TypeError("Expected allowSync to be a Boolean, got " + __typeof(allowSync));
          }
          function continuer(verb, arg) {
            var item;
            try {
              item = generator[verb](arg);
            } catch (e) {
              return __defer.rejected(e);
            }
            if (item.done) {
              return __defer.fulfilled(item.value);
            } else {
              return item.value.then(callback, errback, allowSync);
            }
          }
          function callback(value) {
            return continuer("send", value);
          }
          function errback(value) {
            return continuer("throw", value);
          }
          return callback(void 0);
        };
        __import = function (dest, source) {
          var k;
          for (k in source) {
            if (__owns.call(source, k)) {
              dest[k] = source[k];
            }
          }
          return dest;
        };
        __in = typeof Array.prototype.indexOf === "function"
          ? (function () {
            var indexOf;
            indexOf = Array.prototype.indexOf;
            return function (child, parent) {
              return indexOf.call(parent, child) !== -1;
            };
          }())
          : function (child, parent) {
            var i, len;
            len = +parent.length;
            i = -1;
            while (++i < len) {
              if (child === parent[i] && i in parent) {
                return true;
              }
            }
            return false;
          };
        __isArray = typeof Array.isArray === "function" ? Array.isArray
          : (function () {
            var _toString;
            _toString = Object.prototype.toString;
            return function (x) {
              return _toString.call(x) === "[object Array]";
            };
          }());
        __owns = Object.prototype.hasOwnProperty;
        __promise = function (value, allowSync) {
          var factory;
          if (allowSync == null) {
            allowSync = false;
          } else if (typeof allowSync !== "boolean") {
            throw TypeError("Expected allowSync to be a Boolean, got " + __typeof(allowSync));
          }
          if (typeof value === "function") {
            factory = function () {
              return __generatorToPromise(value.apply(this, arguments));
            };
            factory.sync = function () {
              return __generatorToPromise(
                value.apply(this, arguments),
                true
              ).sync();
            };
            return factory;
          } else {
            return __generatorToPromise(value, allowSync);
          }
        };
        __slice = Array.prototype.slice;
        __toArray = function (x) {
          if (x == null) {
            throw TypeError("Expected an object, got " + __typeof(x));
          } else if (__isArray(x)) {
            return x;
          } else if (typeof x === "string") {
            return x.split("");
          } else if (typeof x.length === "number") {
            return __slice.call(x);
          } else {
            throw TypeError("Expected an object with a length property, got " + __typeof(x));
          }
        };
        __toPromise = function (func, context, args) {
          var d;
          if (typeof func !== "function") {
            throw TypeError("Expected func to be a Function, got " + __typeof(func));
          }
          d = __defer();
          func.apply(context, __toArray(args).concat([
            function (err, value) {
              if (err != null) {
                d.reject(err);
              } else {
                d.fulfill(value);
              }
            }
          ]));
          return d.promise;
        };
        __typeof = (function () {
          var _toString;
          _toString = Object.prototype.toString;
          return function (o) {
            if (o === void 0) {
              return "Undefined";
            } else if (o === null) {
              return "Null";
            } else {
              return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
            }
          };
        }());
        setImmediate = typeof GLOBAL.setImmediate === "function" ? GLOBAL.setImmediate
          : typeof process !== "undefined" && typeof process.nextTick === "function"
          ? (function () {
            var nextTick;
            nextTick = process.nextTick;
            return function (func) {
              var args;
              if (typeof func !== "function") {
                throw TypeError("Expected func to be a Function, got " + __typeof(func));
              }
              args = __slice.call(arguments, 1);
              if (args.length) {
                return nextTick(function () {
                  func.apply(void 0, __toArray(args));
                });
              } else {
                return nextTick(func);
              }
            };
          }())
          : function (func) {
            var args;
            if (typeof func !== "function") {
              throw TypeError("Expected func to be a Function, got " + __typeof(func));
            }
            args = __slice.call(arguments, 1);
            if (args.length) {
              return setTimeout(
                function () {
                  func.apply(void 0, __toArray(args));
                },
                0
              );
            } else {
              return setTimeout(func, 0);
            }
          };
        Node = require("./parser-nodes");
        Scope = require("./parser-scope");
        MacroContext = require("./parser-macrocontext");
        MacroHolder = require("./parser-macroholder");
        Type = require("./types");
        stringRepeat = require("./utils").stringRepeat;
        addParamToScope = require("./parser-utils").addParamToScope;
        _ref = require("./utils");
        quote = _ref.quote;
        unique = _ref.unique;
        getPackageVersion = _ref.getPackageVersion;
        AccessNode = Node.Access;
        AccessMultiNode = Node.AccessMulti;
        ArgsNode = Node.Args;
        ArrayNode = Node.Array;
        AssignNode = Node.Assign;
        BinaryNode = Node.Binary;
        BlockNode = Node.Block;
        BreakNode = Node.Break;
        CallNode = Node.Call;
        CommentNode = Node.Comment;
        ConstNode = Node.Const;
        ContinueNode = Node.Continue;
        DebuggerNode = Node.Debugger;
        DefNode = Node.Def;
        EmbedWriteNode = Node.EmbedWrite;
        EvalNode = Node.Eval;
        ForNode = Node.For;
        ForInNode = Node.ForIn;
        FunctionNode = Node.Function;
        IdentNode = Node.Ident;
        IfNode = Node.If;
        MacroAccessNode = Node.MacroAccess;
        MacroConstNode = Node.MacroConst;
        NothingNode = Node.Nothing;
        ObjectNode = Node.Object;
        ParamNode = Node.Param;
        RegexpNode = Node.Regexp;
        ReturnNode = Node.Return;
        RootNode = Node.Root;
        SpreadNode = Node.Spread;
        SuperNode = Node.Super;
        SwitchNode = Node.Switch;
        SyntaxChoiceNode = Node.SyntaxChoice;
        SyntaxManyNode = Node.SyntaxMany;
        SyntaxParamNode = Node.SyntaxParam;
        SyntaxSequenceNode = Node.SyntaxSequence;
        ThisNode = Node.This;
        ThrowNode = Node.Throw;
        TmpNode = Node.Tmp;
        TmpWrapperNode = Node.TmpWrapper;
        TryCatchNode = Node.TryCatch;
        TryFinallyNode = Node.TryFinally;
        TypeFunctionNode = Node.TypeFunction;
        TypeGenericNode = Node.TypeGeneric;
        TypeObjectNode = Node.TypeObject;
        TypeUnionNode = Node.TypeUnion;
        UnaryNode = Node.Unary;
        VarNode = Node.Var;
        YieldNode = Node.Yield;
        ParserError = (function (Error) {
          var _Error_prototype, _ParserError_prototype;
          function ParserError(message, parser, index) {
            var _this, err, pos;
            _this = this instanceof ParserError ? this : __create(_ParserError_prototype);
            if (message == null) {
              message = "";
            }
            _this.message = message;
            if (parser == null) {
              parser = null;
            }
            if (index == null) {
              index = 0;
            }
            _this.index = index;
            if (parser) {
              _this.source = parser.source;
              _this.filename = parser.options.filename;
              pos = parser.getPosition(index);
              _this.line = pos.line;
              _this.column = pos.column;
              _this.message = message + (" at " + (_this.filename ? _this.filename + ":" : "") + _this.line + ":" + _this.column);
            } else {
              _this.line = 0;
              _this.column = 0;
            }
            err = Error.call(_this, _this.message);
            if (typeof Error.captureStackTrace === "function") {
              Error.captureStackTrace(_this, ParserError);
            } else if ("stack" in err) {
              _this.stack = err.stack;
            }
            return _this;
          }
          _Error_prototype = Error.prototype;
          _ParserError_prototype = ParserError.prototype = __create(_Error_prototype);
          _ParserError_prototype.constructor = ParserError;
          ParserError.displayName = "ParserError";
          if (typeof Error.extended === "function") {
            Error.extended(ParserError);
          }
          _ParserError_prototype.name = "ParserError";
          return ParserError;
        }(Error));
        MacroError = (function (Error) {
          var _Error_prototype, _MacroError_prototype;
          function MacroError(inner, parser, index) {
            var _this, err, msg, pos;
            _this = this instanceof MacroError ? this : __create(_MacroError_prototype);
            if (inner == null) {
              inner = "";
            }
            if (parser == null) {
              parser = null;
            }
            if (index == null) {
              index = 0;
            }
            _this.index = index;
            if (parser) {
              _this.source = parser.source;
              _this.filename = parser.options.filename;
              pos = parser.getPosition(index);
              _this.line = pos.line;
              _this.column = pos.column;
              msg = [];
              if (inner instanceof Error) {
                if (__typeof(inner) !== "Error") {
                  msg.push(__typeof(inner));
                  msg.push(": ");
                }
                msg.push(String(inner.message));
              } else {
                msg.push(String(inner));
              }
              msg.push(" at ");
              if (_this.filename) {
                msg.push(String(_this.filename));
                msg.push(":");
              }
              _this._message = msg.join("");
              msg.push(_this.line);
              msg.push(":");
              msg.push(_this.column);
              _this.message = msg.join("");
            } else {
              _this.line = 0;
              _this.column = 0;
              _this._message = "";
              _this.message = "";
            }
            err = Error.call(_this, _this.message);
            if (typeof Error.captureStackTrace === "function") {
              Error.captureStackTrace(_this, MacroError);
            } else if ("stack" in err) {
              _this.stack = err.stack;
            }
            if (inner instanceof Error) {
              _this.inner = inner;
            }
            return _this;
          }
          _Error_prototype = Error.prototype;
          _MacroError_prototype = MacroError.prototype = __create(_Error_prototype);
          _MacroError_prototype.constructor = MacroError;
          MacroError.displayName = "MacroError";
          if (typeof Error.extended === "function") {
            Error.extended(MacroError);
          }
          _MacroError_prototype.name = "MacroError";
          _MacroError_prototype.setPosition = function (line, column) {
            return;
          };
          return MacroError;
        }(Error));
        Box = (function () {
          var _Box_prototype;
          function Box(index, value) {
            var _this;
            _this = this instanceof Box ? this : __create(_Box_prototype);
            _this.index = index;
            _this.value = value;
            if (index % 1 !== 0 || index < 0) {
              throw RangeError("Expected index to be a non-negative integer, got " + index);
            }
            return _this;
          }
          _Box_prototype = Box.prototype;
          Box.displayName = "Box";
          return Box;
        }());
        cache = (function () {
          var id;
          id = -1;
          return function (rule) {
            var cacheKey;
            cacheKey = ++id;
            function f(parser, index) {
              var _ref, _ref2, cache, indent, indentCache, inner, item, result;
              cache = parser.cache;
              indent = parser.indent.peek();
              if ((_ref = cache[indent]) != null) {
                indentCache = _ref;
              } else {
                indentCache = cache[indent] = [];
              }
              if ((_ref = indentCache[_ref2 = index % 16]) != null) {
                inner = _ref;
              } else {
                inner = indentCache[_ref2] = [];
              }
              item = inner[cacheKey];
              if (item && item.start === index) {
                return item.result;
              } else {
                result = rule(parser, index);
                inner[cacheKey] = { start: index, result: result };
                return result;
              }
            }
            return f;
          };
        }());
        function identity(x) {
          return x;
        }
        function makeReturn(x) {
          return function () {
            return x;
          };
        }
        function wrap(name, func) {
          return func;
        }
        fromCharCode = (function () {
          var f;
          f = String.fromCharCode;
          return function (charCode) {
            if (charCode > 65535) {
              return "" + f((charCode - 65536 >> 10) + 55296) + f((charCode - 65536) % 1024 + 56320);
            } else {
              return f(charCode);
            }
          };
        }());
        function processCharCodes(codes, array, start) {
          var _i, _len, code;
          if (array == null) {
            array = [];
          }
          if (start == null) {
            start = 0;
          }
          for (_len = codes.length, _i = +start, _i < 0 && (_i += _len); _i < _len; ++_i) {
            code = codes[_i];
            array.push(fromCharCode(code));
          }
          return array;
        }
        function codesToString(codes) {
          return processCharCodes(codes).join("");
        }
        function makeAlterStack(name, value) {
          return function (rule) {
            return function (parser, index) {
              var stack;
              stack = parser[name];
              stack.push(value);
              try {
                return rule(parser, index);
              } finally {
                stack.pop();
              }
            };
          };
        }
        function charsToFakeSet(array) {
          var _arr, _end, _i, _len, c, item, obj;
          obj = __create(null);
          for (_arr = __toArray(array), _i = 0, _len = _arr.length; _i < _len; ++_i) {
            item = _arr[_i];
            if (typeof item === "number") {
              obj[item] = true;
            } else {
              for (c = +item[0], _end = +item[1]; c <= _end; ++c) {
                obj[c] = true;
              }
            }
          }
          return obj;
        }
        function stackWrap(func) {
          func.stack = Error().stack;
          return func;
        }
        function character(name, expected) {
          return stackWrap(function (parser, index) {
            if (parser.source.charCodeAt(index) === expected) {
              return Box(+index + 1, expected);
            } else {
              return parser.fail(name, index);
            }
          });
        }
        function characters(name, expected) {
          return stackWrap(function (parser, index) {
            var c;
            c = parser.source.charCodeAt(index);
            if (expected[c]) {
              return Box(index + 1, c);
            } else {
              return parser.fail(name, index);
            }
          });
        }
        mutate = __curry(2, function (mutator, rule) {
          if (mutator === identity) {
            return rule;
          }
          if (typeof mutator !== "function") {
            mutator = makeReturn(mutator);
          }
          function f(parser, index) {
            var result;
            result = rule(parser, index);
            if (result) {
              return Box(result.index, mutator(result.value, parser, index, result.index));
            }
          }
          f.rule = rule;
          f.mutator = mutator;
          return stackWrap(f);
        });
        function bool(rule) {
          if (typeof rule.mutator === "function" && typeof rule.rule === "function") {
            return bool(rule.rule);
          } else {
            return mutate(
              function (x) {
                return !!x;
              },
              rule
            );
          }
        }
        function multiple(rule, minimum, maximum, ignoreValue) {
          var mutator;
          if (minimum == null) {
            minimum = 0;
          }
          if (maximum == null) {
            maximum = 1/0;
          }
          if (ignoreValue == null) {
            ignoreValue = false;
          }
          if (minimum % 1 !== 0 || minimum < 0) {
            throw RangeError("Expected minimum to be a non-negative integer, got " + minimum);
          }
          if (maximum !== 1/0 && maximum % 1 !== 0 || maximum < minimum) {
            throw RangeError("Expected maximum to be Infinity or an integer of at least " + minimum + ", got " + maximum);
          }
          mutator = identity;
          if (typeof rule.mutator === "function" && typeof rule.rule === "function" && false) {
            mutator = rule.mutator;
            rule = rule.rule;
          }
          if (ignoreValue) {
            return stackWrap(function (parser, index) {
              var count, item, newIndex;
              count = 0;
              while (count < maximum) {
                item = rule(parser, index);
                if (!item) {
                  if (count < minimum) {
                    return;
                  } else {
                    break;
                  }
                }
                ++count;
                newIndex = item.index;
                if (newIndex === index) {
                  throw Error("Infinite loop detected");
                } else {
                  index = newIndex;
                }
              }
              return Box(index, count);
            });
          } else if (mutator === identity) {
            return stackWrap(function (parser, index) {
              var count, item, newIndex, result;
              result = [];
              count = 0;
              while (count < maximum) {
                item = rule(parser, index);
                if (!item) {
                  if (count < minimum) {
                    return;
                  } else {
                    break;
                  }
                }
                result[count] = item.value;
                ++count;
                newIndex = item.index;
                if (newIndex === index) {
                  throw Error("Infinite loop detected");
                } else {
                  index = newIndex;
                }
              }
              return Box(index, result);
            });
          } else {
            return stackWrap(mutate(
              function (items, parser, index) {
                var _arr, _arr2, _i, _len, item;
                for (_arr = [], _arr2 = __toArray(items), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                  item = _arr2[_i];
                  _arr.push(mutator(item.value, parser, item.startIndex, item.endIndex));
                }
                return _arr;
              },
              function (parser, index) {
                var count, item, newIndex, result;
                result = [];
                count = 0;
                while (count < maximum) {
                  item = rule(parser, index);
                  if (!item) {
                    if (count < minimum) {
                      return;
                    } else {
                      break;
                    }
                  }
                  newIndex = item.index;
                  result[count] = { startIndex: index, endIndex: newIndex, value: item.value };
                  if (newIndex === index) {
                    throw Error("Infinite loop detected");
                  } else {
                    index = newIndex;
                  }
                  ++count;
                }
                return Box(index, result);
              }
            ));
          }
        }
        function zeroOrMore(rule, ignoreValue) {
          return multiple(rule, 0, 1/0, ignoreValue);
        }
        function oneOrMore(rule, ignoreValue) {
          return multiple(rule, 1, 1/0, ignoreValue);
        }
        function maybe(rule, defaultValue) {
          var MISSING, mutator, subrule;
          MISSING = {};
          if (typeof rule.mutator === "function" && typeof rule.rule === "function" && false) {
            subrule = rule.rule;
            mutator = rule.mutator;
            return mutate(
              typeof defaultValue === "function"
                ? function (value, parser, startIndex, endIndex) {
                  if (value === MISSING) {
                    return defaultValue(parser, startIndex);
                  } else {
                    return mutator(value, parser, startIndex, endIndex);
                  }
                }
                : function (value, parser, startIndex, endIndex) {
                  if (value === MISSING) {
                    return defaultValue;
                  } else {
                    return mutator(value, parser, startIndex, endIndex);
                  }
                },
              stackWrap(function (parser, index) {
                return subrule(parser, index) || Box(index, MISSING);
              })
            );
          } else if (typeof defaultValue === "function") {
            return mutate(
              function (value, parser, startIndex, endIndex) {
                if (value === MISSING) {
                  return defaultValue(parser, startIndex);
                } else {
                  return value;
                }
              },
              stackWrap(function (parser, index) {
                return rule(parser, index) || Box(index, MISSING);
              })
            );
          } else {
            return stackWrap(function (parser, index) {
              return rule(parser, index) || Box(index, defaultValue);
            });
          }
        }
        function oneOf() {
          var _arr, _i, _i2, _len, _len2, expandedRules, func, rule, rules, subrule;
          rules = __slice.call(arguments);
          switch (rules.length) {
          case 0: throw Error("Expected rules to be non-empty");
          case 1: return rules[0];
          default:
            expandedRules = [];
            for (_i = 0, _len = rules.length; _i < _len; ++_i) {
              rule = rules[_i];
              if (rule.oneOf) {
                for (_arr = __toArray(rule.oneOf), _i2 = 0, _len2 = _arr.length; _i2 < _len2; ++_i2) {
                  subrule = _arr[_i2];
                  expandedRules.push(subrule);
                }
              } else {
                expandedRules.push(rule);
              }
            }
            func = function (parser, index) {
              var _len, i, result, rule;
              for (i = 0, _len = expandedRules.length; i < _len; ++i) {
                rule = expandedRules[i];
                result = rule(parser, index);
                if (result) {
                  return result;
                }
              }
            };
            func.oneOf = expandedRules;
            return stackWrap(func);
          }
        }
        function zeroOrMoreOf() {
          var rules;
          rules = __slice.call(arguments);
          return zeroOrMore(oneOf.apply(void 0, __toArray(rules)));
        }
        function oneOrMoreOf() {
          var rules;
          rules = __slice.call(arguments);
          return oneOrMore(oneOf.apply(void 0, __toArray(rules)));
        }
        function check(rule) {
          if (typeof rule.mutator === "function" && typeof rule.rule === "function" && false) {
            rule = rule.rule;
          }
          return function (parser, index) {
            var result;
            result = rule(parser, index);
            if (result) {
              return Box(index);
            }
          };
        }
        SHORT_CIRCUIT = {};
        function sequential() {
          var _len, hasMutations, hasOther, i, item, items, key, keys, mapping,
              mutations, mutator, rule, rules, shortCircuitIndex, thisIndex;
          items = __slice.call(arguments);
          if (items.length === 0) {
            throw Error("Expected items to be non-empty");
          }
          if (items.length === 1) {
            if (__isArray(items[0])) {
              if (items[0][0] === "this") {
                return items[0][1];
              }
            } else if (typeof items[0] === "function") {
              rule = items[0];
              return function (parser, index) {
                var item;
                item = rule(parser, index);
                if (!item) {
                  return;
                }
                return Box(item.index);
              };
            }
          }
          rules = [];
          mapping = [];
          keys = [];
          mutations = [];
          thisIndex = -1;
          hasOther = false;
          shortCircuitIndex = 1/0;
          hasMutations = false;
          for (i = 0, _len = items.length; i < _len; ++i) {
            item = items[i];
            key = void 0;
            rule = void 0;
            if (__isArray(item)) {
              if (item.length !== 2) {
                throw Error("Found an array with " + item.length + " length at index #" + i);
              }
              if (typeof item[0] !== "string") {
                throw TypeError("Array in index #" + i + " has an improper key: " + __typeof(item[0]));
              }
              if (typeof item[1] !== "function") {
                throw TypeError("Array in index #" + i + " has an improper rule: " + __typeof(item[1]));
              }
              key = item[0];
              if (__in(key, keys)) {
                throw Error("Can only have one " + JSON.stringify(key) + " key in sequential");
              }
              keys.push(key);
              rule = item[1];
              if (key === "this") {
                thisIndex = rules.length;
              } else {
                hasOther = true;
              }
            } else if (typeof item === "function") {
              rule = item;
            } else if (item === SHORT_CIRCUIT) {
              if (shortCircuitIndex !== 1/0) {
                throw Error("Can only have one SHORT_CIRCUIT per sequential");
              }
              shortCircuitIndex = i;
              continue;
            } else {
              throw TypeError("Found a non-array, non-function in index #" + i + ": " + __typeof(item));
            }
            if (key && typeof rule.mutator === "function" && typeof rule.rule === "function" && false) {
              hasMutations = true;
              mutations.push(rule.mutator);
              rules.push(rule.rule);
            } else {
              mutations.push(null);
              rules.push(rule);
            }
            mapping.push(key);
          }
          if (thisIndex !== -1) {
            if (hasOther) {
              throw Error("Cannot specify both the 'this' key and another key");
            }
            if (!hasMutations) {
              return stackWrap(function (parser, index) {
                var _len, i, item, result, rule;
                for (i = 0, _len = rules.length; i < _len; ++i) {
                  rule = rules[i];
                  item = rule(parser, index);
                  if (!item) {
                    if (i < shortCircuitIndex) {
                      return;
                    } else {
                      throw SHORT_CIRCUIT;
                    }
                  }
                  index = item.index;
                  if (i === thisIndex) {
                    result = item.value;
                  }
                }
                return Box(index, result);
              });
            } else {
              mutator = mutations[thisIndex];
              return stackWrap(mutate(
                function (item, parser, index) {
                  return mutator(item.value, parser, item.startIndex, item.endIndex);
                },
                function (parser, index) {
                  var _len, i, item, result, rule, valueIndex;
                  valueIndex = 0;
                  for (i = 0, _len = rules.length; i < _len; ++i) {
                    rule = rules[i];
                    item = rule(parser, index);
                    if (!item) {
                      if (i < shortCircuitIndex) {
                        return;
                      } else {
                        throw SHORT_CIRCUIT;
                      }
                    }
                    if (i === thisIndex) {
                      result = { value: item.value, startIndex: index, endIndex: item.index };
                    }
                    index = item.index;
                  }
                  return Box(index, result);
                }
              ));
            }
          } else if (hasOther) {
            if (hasMutations) {
              return stackWrap(mutate(
                function (value, parser, index) {
                  var _len, i, item, key, mutator, result;
                  result = {};
                  for (i = 0, _len = keys.length; i < _len; ++i) {
                    key = keys[i];
                    if (key) {
                      item = value[key];
                      mutator = mutations[i];
                      if (mutator) {
                        result[key] = mutator(item.value, parser, item.startIndex, item.endIndex);
                      } else {
                        result[key] = item.value;
                      }
                    }
                  }
                  return result;
                },
                function (parser, index) {
                  var _len, i, indexes, item, key, result, rule;
                  result = {};
                  indexes = {};
                  for (i = 0, _len = rules.length; i < _len; ++i) {
                    rule = rules[i];
                    item = rule(parser, index);
                    if (!item) {
                      if (i < shortCircuitIndex) {
                        return;
                      } else {
                        throw SHORT_CIRCUIT;
                      }
                    }
                    key = mapping[i];
                    if (key) {
                      result[key] = { value: item.value, startIndex: index, endIndex: item.index };
                    }
                    index = item.index;
                  }
                  return Box(index, result);
                }
              ));
            } else {
              return stackWrap(function (parser, index) {
                var i, item, key, length, rule, value;
                value = {};
                i = 0;
                length = rules.length;
                for (; i < length; ++i) {
                  rule = rules[i];
                  item = rule(parser, index);
                  if (!item) {
                    if (i < shortCircuitIndex) {
                      return;
                    } else {
                      throw SHORT_CIRCUIT;
                    }
                  }
                  index = item.index;
                  key = mapping[i];
                  if (key) {
                    value[key] = item.value;
                  }
                }
                return Box(index, value);
              });
            }
          } else {
            if (hasMutations) {
              throw Error("Cannot use a mutator on a sequential without keys");
            }
            return stackWrap(function (parser, index) {
              var _len, i, item, rule;
              for (i = 0, _len = rules.length; i < _len; ++i) {
                rule = rules[i];
                item = rule(parser, index);
                if (!item) {
                  if (i < shortCircuitIndex) {
                    return;
                  } else {
                    throw SHORT_CIRCUIT;
                  }
                }
                index = item.index;
              }
              return Box(index);
            });
          }
        }
        function cons(headRule, tailRule) {
          return stackWrap(function (parser, index) {
            var head, tail;
            head = headRule(parser, index);
            if (!head) {
              return;
            }
            tail = tailRule(parser, head.index);
            if (!tail) {
              return;
            }
            return Box(tail.index, [head.value].concat(tail.value));
          });
        }
        function concat(leftRule, rightRule) {
          return stackWrap(function (parser, index) {
            var left, right;
            left = leftRule(parser, index);
            if (!left) {
              return;
            }
            right = rightRule(parser, left.index);
            if (!right) {
              return;
            }
            return Box(right.index, left.value.concat(right.value));
          });
        }
        function nothingRule(parser, index) {
          return Box(index);
        }
        function separatedList(itemRule, separatorRule, tailRule) {
          if (separatorRule == null) {
            separatorRule = nothingRule;
          }
          if (tailRule == null) {
            tailRule = itemRule;
          }
          return stackWrap(function (parser, index) {
            var currentIndex, head, i, item, newIndex, result, separator;
            head = itemRule(parser, index);
            if (!head) {
              return;
            }
            currentIndex = head.index;
            result = [head.value];
            i = 0;
            for (; ; ++i) {
              separator = separatorRule(parser, currentIndex);
              if (!separator) {
                break;
              }
              item = tailRule(parser, separator.index);
              if (!item) {
                break;
              }
              newIndex = item.index;
              if (newIndex === currentIndex) {
                throw Error("Infinite loop detected");
              } else {
                currentIndex = newIndex;
              }
              result.push(item.value);
            }
            return Box(currentIndex, result);
          });
        }
        function except(rule) {
          if (typeof rule.mutator === "function" && typeof rule.rule === "function" && false) {
            rule = rule.rule;
          }
          return stackWrap(function (parser, index) {
            if (!rule(parser, index)) {
              return Box(index);
            }
          });
        }
        function anyExcept(rule) {
          if (typeof rule.mutator === "function" && typeof rule.rule === "function" && false) {
            rule = rule.rule;
          }
          return stackWrap(function (parser, index) {
            if (!rule(parser, index)) {
              return AnyChar(parser, index);
            }
          });
        }
        SpaceChar = characters("space", charsToFakeSet([
          9,
          11,
          12,
          32,
          160,
          5760,
          6158,
          [8192, 8202],
          8239,
          8287,
          12288,
          65263
        ]));
        SpaceChars = cache(zeroOrMore(SpaceChar, true));
        Zero = character('"0"', 48);
        DecimalDigit = characters("[0-9]", charsToFakeSet([[48, 57]]));
        Period = character('"."', 46);
        ColonChar = character('":"', 58);
        DoubleColonChar = cache((_ref = sequential(ColonChar, ColonChar), mutate("::")(_ref)));
        PipeChar = character('"|"', 124);
        EqualChar = character('"="', 61);
        MinusChar = character('"-"', 45);
        PlusChar = character('"+"', 43);
        PlusOrMinusChar = characters("[+\\-]", charsToFakeSet([43, 45]));
        Letter = characters("letter", charsToFakeSet([
          [65, 90],
          [97, 122],
          170,
          181,
          186,
          [192, 214],
          [216, 246],
          [248, 705],
          [710, 721],
          [736, 740],
          748,
          750,
          [880, 884],
          886,
          887,
          [890, 893],
          902,
          [904, 906],
          908,
          [910, 929],
          [931, 1013],
          [1015, 1153],
          [1162, 1317],
          [1329, 1366],
          1369,
          [1377, 1415],
          [1488, 1514],
          [1520, 1522],
          [1569, 1610],
          1646,
          1647,
          [1649, 1747],
          1749,
          1765,
          1766,
          1774,
          1775,
          [1786, 1788],
          1791,
          1808,
          [1810, 1839],
          [1869, 1957],
          1969,
          [1994, 2026],
          2036,
          2037,
          2042,
          [2048, 2069],
          2074,
          2084,
          2088,
          [2308, 2361],
          2365,
          2384,
          [2392, 2401],
          2417,
          2418,
          [2425, 2431],
          [2437, 2444],
          2447,
          2448,
          [2451, 2472],
          [2474, 2480],
          2482,
          [2486, 2489],
          2493,
          2510,
          2524,
          2525,
          [2527, 2529],
          2544,
          2545,
          [2565, 2570],
          2575,
          2576,
          [2579, 2600],
          [2602, 2608],
          2610,
          2611,
          2613,
          2614,
          2616,
          2617,
          [2649, 2652],
          2654,
          [2674, 2676],
          [2693, 2701],
          [2703, 2705],
          [2707, 2728],
          [2730, 2736],
          2738,
          2739,
          [2741, 2745],
          2749,
          2768,
          2784,
          2785,
          [2821, 2828],
          2831,
          2832,
          [2835, 2856],
          [2858, 2864],
          2866,
          2867,
          [2869, 2873],
          2877,
          2908,
          2909,
          [2911, 2913],
          2929,
          2947,
          [2949, 2954],
          [2958, 2960],
          [2962, 2965],
          2969,
          2970,
          2972,
          2974,
          2975,
          2979,
          2980,
          [2984, 2986],
          [2990, 3001],
          3024,
          [3077, 3084],
          [3086, 3088],
          [3090, 3112],
          [3114, 3123],
          [3125, 3129],
          3133,
          3160,
          3161,
          3168,
          3169,
          [3205, 3212],
          [3214, 3216],
          [3218, 3240],
          [3242, 3251],
          [3253, 3257],
          3261,
          3294,
          3296,
          3297,
          [3333, 3340],
          [3342, 3344],
          [3346, 3368],
          [3370, 3385],
          3389,
          3424,
          3425,
          [3450, 3455],
          [3461, 3478],
          [3482, 3505],
          [3507, 3515],
          3517,
          [3520, 3526],
          [3585, 3632],
          3634,
          3635,
          [3648, 3654],
          3713,
          3714,
          3716,
          3719,
          3720,
          3722,
          3725,
          [3732, 3735],
          [3737, 3743],
          [3745, 3747],
          3749,
          3751,
          3754,
          3755,
          [3757, 3760],
          3762,
          3763,
          3773,
          [3776, 3780],
          3782,
          3804,
          3805,
          3840,
          [3904, 3911],
          [3913, 3948],
          [3976, 3979],
          [4096, 4138],
          4159,
          [4176, 4181],
          [4186, 4189],
          4193,
          4197,
          4198,
          [4206, 4208],
          [4213, 4225],
          4238,
          [4256, 4293],
          [4304, 4346],
          4348,
          [4352, 4680],
          [4682, 4685],
          [4688, 4694],
          4696,
          [4698, 4701],
          [4704, 4744],
          [4746, 4749],
          [4752, 4784],
          [4786, 4789],
          [4792, 4798],
          4800,
          [4802, 4805],
          [4808, 4822],
          [4824, 4880],
          [4882, 4885],
          [4888, 4954],
          [4992, 5007],
          [5024, 5108],
          [5121, 5740],
          [5743, 5759],
          [5761, 5786],
          [5792, 5866],
          [5888, 5900],
          [5902, 5905],
          [5920, 5937],
          [5952, 5969],
          [5984, 5996],
          [5998, 6000],
          [6016, 6067],
          6103,
          6108,
          [6176, 6263],
          [6272, 6312],
          6314,
          [6320, 6389],
          [6400, 6428],
          [6480, 6509],
          [6512, 6516],
          [6528, 6571],
          [6593, 6599],
          [6656, 6678],
          [6688, 6740],
          6823,
          [6917, 6963],
          [6981, 6987],
          [7043, 7072],
          7086,
          7087,
          [7168, 7203],
          [7245, 7247],
          [7258, 7293],
          [7401, 7404],
          [7406, 7409],
          [7424, 7615],
          [7680, 7957],
          [7960, 7965],
          [7968, 8005],
          [8008, 8013],
          [8016, 8023],
          8025,
          8027,
          8029,
          [8031, 8061],
          [8064, 8116],
          [8118, 8124],
          8126,
          [8130, 8132],
          [8134, 8140],
          [8144, 8147],
          [8150, 8155],
          [8160, 8172],
          [8178, 8180],
          [8182, 8188],
          8305,
          8319,
          [8336, 8340],
          8450,
          8455,
          [8458, 8467],
          8469,
          [8473, 8477],
          8484,
          8486,
          8488,
          [8490, 8493],
          [8495, 8505],
          [8508, 8511],
          [8517, 8521],
          8526,
          8579,
          8580,
          [11264, 11310],
          [11312, 11358],
          [11360, 11492],
          [11499, 11502],
          [11520, 11557],
          [11568, 11621],
          11631,
          [11648, 11670],
          [11680, 11686],
          [11688, 11694],
          [11696, 11702],
          [11704, 11710],
          [11712, 11718],
          [11720, 11726],
          [11728, 11734],
          [11736, 11742],
          11823,
          12293,
          12294,
          [12337, 12341],
          12347,
          12348,
          [12353, 12438],
          [12445, 12447],
          [12449, 12538],
          [12540, 12543],
          [12549, 12589],
          [12593, 12686],
          [12704, 12727],
          [12784, 12799],
          [13312, 19893],
          [19968, 40907],
          [40960, 42124],
          [42192, 42237],
          [42240, 42508],
          [42512, 42527],
          42538,
          42539,
          [42560, 42591],
          [42594, 42606],
          [42623, 42647],
          [42656, 42725],
          [42775, 42783],
          [42786, 42888],
          42891,
          42892,
          [43003, 43009],
          [43011, 43013],
          [43015, 43018],
          [43020, 43042],
          [43072, 43123],
          [43138, 43187],
          [43250, 43255],
          43259,
          [43274, 43301],
          [43312, 43334],
          [43360, 43388],
          [43396, 43442],
          43471,
          [43520, 43560],
          [43584, 43586],
          [43588, 43595],
          [43616, 43638],
          43642,
          [43648, 43695],
          43697,
          43701,
          43702,
          [43705, 43709],
          43712,
          43714,
          [43739, 43741],
          [43968, 44002],
          [44032, 55203],
          [55216, 55238],
          [55243, 55291],
          [63744, 64045],
          [64048, 64109],
          [64112, 64217],
          [64256, 64262],
          [64275, 64279],
          64285,
          [64287, 64296],
          [64298, 64310],
          [64312, 64316],
          64318,
          64320,
          64321,
          64323,
          64324,
          [64326, 64433],
          [64467, 64829],
          [64848, 64911],
          [64914, 64967],
          [65008, 65019],
          [65136, 65140],
          [65142, 65262],
          [65264, 65276],
          [65313, 65338],
          [65345, 65370],
          [65382, 65470],
          [65474, 65479],
          [65482, 65487],
          [65490, 65495],
          [65498, 65500]
        ]));
        NumberChar = characters("number", charsToFakeSet([
          [48, 57],
          178,
          179,
          185,
          [188, 190],
          [1632, 1641],
          [1776, 1785],
          [1984, 1993],
          [2406, 2415],
          [2534, 2543],
          [2548, 2553],
          [2662, 2671],
          [2790, 2799],
          [2918, 2927],
          [3046, 3058],
          [3174, 3183],
          [3192, 3198],
          [3302, 3311],
          [3430, 3445],
          [3664, 3673],
          [3792, 3801],
          [3872, 3891],
          [4160, 4169],
          [4240, 4249],
          [4969, 4988],
          [5870, 5872],
          [6112, 6121],
          [6128, 6137],
          [6160, 6169],
          [6470, 6479],
          [6608, 6618],
          [6784, 6793],
          [6800, 6809],
          [6992, 7001],
          [7088, 7097],
          [7232, 7241],
          [7248, 7257],
          8304,
          [8308, 8313],
          [8320, 8329],
          [8528, 8578],
          [8581, 8585],
          [9312, 9371],
          [9450, 9471],
          [10102, 10131],
          11517,
          12295,
          [12321, 12329],
          [12344, 12346],
          [12690, 12693],
          [12832, 12841],
          [12881, 12895],
          [12928, 12937],
          [12977, 12991],
          [42528, 42537],
          [42726, 42735],
          [43056, 43061],
          [43216, 43225],
          [43264, 43273],
          [43472, 43481],
          [43600, 43609],
          [44016, 44025],
          [65296, 65305]
        ]));
        Underscore = character('"_"', 95);
        DollarSignChar = character('"$"', 36);
        AtSignChar = character('"@"', 64);
        HashSignChar = character('"#"', 35);
        PercentSignChar = character('"%"', 37);
        EqualSignChar = character('"="', 61);
        SymbolChar = characters("symbolic", charsToFakeSet([
          33,
          35,
          37,
          38,
          42,
          43,
          45,
          47,
          [60, 63],
          92,
          94,
          96,
          124,
          126,
          127,
          [128, 159],
          [161, 169],
          [171, 177],
          180,
          [182, 184],
          187,
          191,
          215,
          247,
          [706, 709],
          [722, 735],
          [741, 747],
          749,
          [751, 879],
          885,
          888,
          889,
          [894, 901],
          903,
          907,
          909,
          930,
          1014,
          [1154, 1161],
          [1318, 1328],
          1367,
          1368,
          [1370, 1376],
          [1416, 1487],
          [1515, 1519],
          [1523, 1568],
          [1611, 1631],
          [1642, 1645],
          1648,
          1748,
          [1750, 1764],
          [1767, 1773],
          1789,
          1790,
          [1792, 1807],
          1809,
          [1840, 1868],
          [1958, 1968],
          [1970, 1983],
          [2027, 2035],
          [2038, 2041],
          [2043, 2047],
          [2070, 2073],
          [2075, 2083],
          [2085, 2087],
          [2089, 2307],
          [2362, 2364],
          [2366, 2383],
          [2385, 2391],
          [2402, 2405],
          2416,
          [2419, 2424],
          [2432, 2436],
          2445,
          2446,
          2449,
          2450,
          2473,
          2481,
          [2483, 2485],
          [2490, 2492],
          [2494, 2509],
          [2511, 2523],
          2526,
          [2530, 2533],
          2546,
          2547,
          [2554, 2564],
          [2571, 2574],
          2577,
          2578,
          2601,
          2609,
          2612,
          2615,
          [2618, 2648],
          2653,
          [2655, 2661],
          2672,
          2673,
          [2677, 2692],
          2702,
          2706,
          2729,
          2737,
          2740,
          [2746, 2748],
          [2750, 2767],
          [2769, 2783],
          [2786, 2789],
          [2800, 2820],
          2829,
          2830,
          2833,
          2834,
          2857,
          2865,
          2868,
          [2874, 2876],
          [2878, 2907],
          2910,
          [2914, 2917],
          2928,
          [2930, 2946],
          2948,
          [2955, 2957],
          2961,
          [2966, 2968],
          2971,
          2973,
          [2976, 2978],
          [2981, 2983],
          [2987, 2989],
          [3002, 3023],
          [3025, 3045],
          [3059, 3076],
          3085,
          3089,
          3113,
          3124,
          [3130, 3132],
          [3134, 3159],
          [3162, 3167],
          [3170, 3173],
          [3184, 3191],
          [3199, 3204],
          3213,
          3217,
          3241,
          3252,
          [3258, 3260],
          [3262, 3293],
          3295,
          [3298, 3301],
          [3312, 3332],
          3341,
          3345,
          3369,
          [3386, 3388],
          [3390, 3423],
          [3426, 3429],
          [3446, 3449],
          [3456, 3460],
          [3479, 3481],
          3506,
          3516,
          3518,
          3519,
          [3527, 3584],
          3633,
          [3636, 3647],
          [3655, 3663],
          [3674, 3712],
          3715,
          3717,
          3718,
          3721,
          3723,
          3724,
          [3726, 3731],
          3736,
          3744,
          3748,
          3750,
          3752,
          3753,
          3756,
          3761,
          [3764, 3772],
          3774,
          3775,
          3781,
          [3783, 3791],
          3802,
          3803,
          [3806, 3839],
          [3841, 3871],
          [3892, 3903],
          3912,
          [3949, 3975],
          [3980, 4095],
          [4139, 4158],
          [4170, 4175],
          [4182, 4185],
          [4190, 4192],
          [4194, 4196],
          [4199, 4205],
          [4209, 4212],
          [4226, 4237],
          4239,
          [4250, 4255],
          [4294, 4303],
          4347,
          [4349, 4351],
          4681,
          4686,
          4687,
          4695,
          4697,
          4702,
          4703,
          4745,
          4750,
          4751,
          4785,
          4790,
          4791,
          4799,
          4801,
          4806,
          4807,
          4823,
          4881,
          4886,
          4887,
          [4955, 4968],
          [4989, 4991],
          [5008, 5023],
          [5109, 5120],
          5741,
          5742,
          [5787, 5791],
          [5867, 5869],
          [5873, 5887],
          5901,
          [5906, 5919],
          [5938, 5951],
          [5970, 5983],
          5997,
          [6001, 6015],
          [6068, 6102],
          [6104, 6107],
          [6109, 6111],
          [6122, 6127],
          [6138, 6157],
          6159,
          [6170, 6175],
          [6264, 6271],
          6313,
          [6315, 6319],
          [6390, 6399],
          [6429, 6469],
          6510,
          6511,
          [6517, 6527],
          [6572, 6592],
          [6600, 6607],
          [6619, 6655],
          [6679, 6687],
          [6741, 6783],
          [6794, 6799],
          [6810, 6822],
          [6824, 6916],
          [6964, 6980],
          [6988, 6991],
          [7002, 7042],
          [7073, 7085],
          [7098, 7167],
          [7204, 7231],
          [7242, 7244],
          [7294, 7400],
          7405,
          [7410, 7423],
          [7616, 7679],
          7958,
          7959,
          7966,
          7967,
          8006,
          8007,
          8014,
          8015,
          8024,
          8026,
          8028,
          8030,
          8062,
          8063,
          8117,
          8125,
          [8127, 8129],
          8133,
          [8141, 8143],
          8148,
          8149,
          [8156, 8159],
          [8173, 8177],
          8181,
          [8189, 8191],
          [8203, 8231],
          [8234, 8238],
          [8240, 8286],
          [8288, 8303],
          8306,
          8307,
          [8314, 8318],
          [8330, 8335],
          [8341, 8449],
          [8451, 8454],
          8456,
          8457,
          8468,
          [8470, 8472],
          [8478, 8483],
          8485,
          8487,
          8489,
          8494,
          8506,
          8507,
          [8512, 8516],
          [8522, 8525],
          8527,
          [8586, 9311],
          [9372, 9449],
          [9472, 10101],
          [10132, 11263],
          11311,
          11359,
          [11493, 11498],
          [11503, 11516],
          11518,
          11519,
          [11558, 11567],
          [11622, 11630],
          [11632, 11647],
          [11671, 11679],
          11687,
          11695,
          11703,
          11711,
          11719,
          11727,
          11735,
          [11743, 11822],
          [11824, 12287],
          [12289, 12292],
          [12296, 12320],
          [12330, 12336],
          12342,
          12343,
          [12349, 12352],
          [12439, 12444],
          12448,
          12539,
          [12544, 12548],
          [12590, 12592],
          [12687, 12689],
          [12694, 12703],
          [12728, 12783],
          [12800, 12831],
          [12842, 12880],
          [12896, 12927],
          [12938, 12976],
          [12992, 13311],
          [19894, 19967],
          [40908, 40959],
          [42125, 42191],
          42238,
          42239,
          [42509, 42511],
          [42540, 42559],
          42592,
          42593,
          [42607, 42622],
          [42648, 42655],
          [42736, 42774],
          42784,
          42785,
          42889,
          42890,
          [42893, 43002],
          43010,
          43014,
          43019,
          [43043, 43055],
          [43062, 43071],
          [43124, 43137],
          [43188, 43215],
          [43226, 43249],
          [43256, 43258],
          [43260, 43263],
          [43302, 43311],
          [43335, 43359],
          [43389, 43395],
          [43443, 43470],
          [43482, 43519],
          [43561, 43583],
          43587,
          [43596, 43599],
          [43610, 43615],
          [43639, 43641],
          [43643, 43647],
          43696,
          [43698, 43700],
          43703,
          43704,
          43710,
          43711,
          43713,
          [43715, 43738],
          [43742, 43967],
          [44003, 44015],
          [44026, 44031],
          [55204, 55215],
          [55239, 55242],
          [55292, 63743],
          64046,
          64047,
          64110,
          64111,
          [64218, 64255],
          [64263, 64274],
          [64280, 64284],
          64286,
          64297,
          64311,
          64317,
          64319,
          64322,
          64325,
          [64434, 64466],
          [64830, 64847],
          64912,
          64913,
          [64968, 65007],
          [65020, 65135],
          65141,
          [65277, 65295],
          [65306, 65312],
          [65339, 65344],
          [65371, 65381],
          [65471, 65473],
          65480,
          65481,
          65488,
          65489,
          65496,
          65497,
          [65501, 65535]
        ]));
        DoubleQuote = character("'\"'", 34);
        SingleQuote = character('"\'"', 39);
        TripleDoubleQuote = cache(multiple(DoubleQuote, 3, 3, true));
        TripleSingleQuote = cache(multiple(SingleQuote, 3, 3, true));
        SemicolonChar = character('";"', 59);
        AsterixChar = character('"*"', 42);
        CaretChar = character('"^"', 94);
        OpenSquareBracketChar = character('"["', 91);
        OpenCurlyBraceChar = character('"{"', 123);
        CloseCurlyBraceChar = character('"}"', 125);
        BackslashChar = character('"\\\\"', 92);
        CommaChar = character('","', 44);
        function AnyChar(parser, index) {
          var c, source;
          source = parser.source;
          if (index >= source.length) {
            return parser.fail("any", index);
          } else {
            c = source.charCodeAt(index);
            if (c === 13 && source.charCodeAt(+index + 1) === 10) {
              ++index;
              c = 10;
            }
            return Box(+index + 1, c);
          }
        }
        function Newline(parser, index) {
          var c, source;
          source = parser.source;
          c = source.charCodeAt(index);
          if (c === 13) {
            if (source.charCodeAt(+index + 1) === 10) {
              ++index;
              c = 10;
            }
          } else if (c !== 10 && c !== 8232 && c !== 8233) {
            return;
          }
          return Box(+index + 1, c);
        }
        function Eof(parser, index) {
          if (index >= parser.source.length) {
            return Box(index);
          }
        }
        CheckStop = oneOf(Newline, Eof, function (parser, index) {
          return EmbeddedClose(parser, index) || EmbeddedCloseWrite(parser, index);
        });
        MaybeComment = cache((function () {
          function SingleLineComment(parser, index) {
            var _ref, len, source;
            source = parser.source;
            if (source.charCodeAt(index) === 47 && source.charCodeAt(+index + 1) === 47) {
              len = source.length;
              index -= -2;
              for (; ; ++index) {
                if (index >= len || (_ref = source.charCodeAt(index)) === 13 || _ref === 10 || _ref === 8232 || _ref === 8233) {
                  return Box(index);
                }
              }
            }
          }
          function MultiLineComment(parser, index) {
            var len, source, startIndex;
            source = parser.source;
            startIndex = index;
            if (source.charCodeAt(index) === 47 && source.charCodeAt(+index + 1) === 42 && source.charCodeAt(+index + 2) !== 33) {
              len = source.length;
              index -= -2;
              for (; ; ++index) {
                if (index >= len) {
                  throw ParserError("Multi-line comment never ends", parser, startIndex);
                }
                if (source.charCodeAt(index) === 42 && source.charCodeAt(+index + 1) === 47) {
                  return Space(parser, +index + 2);
                }
              }
            }
          }
          return maybe(oneOf(SingleLineComment, MultiLineComment));
        }()));
        Space = cache(sequential(SpaceChars, MaybeComment));
        function withSpace(rule) {
          return sequential(Space, ["this", rule]);
        }
        NoSpace = cache(except(SpaceChar));
        EmptyLine = cache(withSpace(Newline));
        EmptyLines = cache(zeroOrMore(EmptyLine, true));
        SomeEmptyLines = cache(oneOrMore(EmptyLine, true));
        EmptyLinesSpace = sequential(EmptyLines, Space);
        NoSpaceNewline = except(EmptyLine);
        OpenParenthesis = cache(withSpace(character('"("', 40)));
        CloseParenthesis = cache(withSpace(character('")"', 41)));
        OpenSquareBracket = cache(withSpace(OpenSquareBracketChar));
        CloseSquareBracket = cache(withSpace(character('"]"', 93)));
        OpenCurlyBrace = cache(withSpace(OpenCurlyBraceChar));
        CloseCurlyBrace = cache(withSpace(CloseCurlyBraceChar));
        EqualSign = withSpace(EqualSignChar);
        PercentSign = cache(withSpace(PercentSignChar));
        DollarSign = cache(withSpace(DollarSignChar));
        Comma = cache(withSpace(CommaChar));
        MaybeComma = cache(maybe(Comma));
        CommaOrNewline = oneOf(
          sequential(
            ["this", Comma],
            EmptyLines
          ),
          SomeEmptyLines
        );
        MaybeCommaOrNewline = cache(maybe(CommaOrNewline));
        _SomeEmptyLinesWithCheckIndent = sequential(SomeEmptyLines, CheckIndent);
        SomeEmptyLinesWithCheckIndent = cache(function (parser, index) {
          if (parser.options.noindent) {
            return EmptyLines(parser, index);
          } else {
            return _SomeEmptyLinesWithCheckIndent(parser, index);
          }
        });
        CommaOrSomeEmptyLinesWithCheckIndent = cache(oneOf(
          sequential(Comma, maybe(SomeEmptyLinesWithCheckIndent)),
          SomeEmptyLinesWithCheckIndent
        ));
        ExclamationPointChar = cache(character('"!"', 33));
        MaybeExclamationPointChar = cache(maybe(ExclamationPointChar));
        MaybeAtSignChar = cache(maybe(AtSignChar));
        Colon = cache(sequential(
          Space,
          ["this", ColonChar],
          except(ColonChar)
        ));
        ColonNewline = cache(sequential(Colon, Space, ["this", Newline]));
        NotColon = cache(except(Colon));
        NotColonUnlessNoIndentAndNewline = cache(function (parser, index) {
          var options;
          options = parser.options;
          if (options.noindent) {
            if (ColonNewline(parser, index)) {
              return Box(index);
            } else if (options.embedded && (ColonEmbeddedClose(parser, index) || ColonEmbeddedCloseWrite(parser, index))) {
              return Box(index);
            }
          }
          return NotColon(parser, index);
        });
        NameStart = cache(oneOf(Letter, Underscore, DollarSignChar));
        NameChar = cache(oneOf(NameStart, NumberChar));
        NamePart = cache(oneOrMore(NameChar));
        Nothing = cache(function (parser, index) {
          return Box(index, parser.Nothing(index));
        });
        Expression = function (parser, index) {
          return Expression(parser, index);
        };
        Statement = function (parser, index) {
          return Statement(parser, index);
        };
        Body = function (parser, index) {
          return Body(parser, index);
        };
        BodyNoEnd = function (parser, index) {
          return BodyNoEnd(parser, index);
        };
        Logic = function (parser, index) {
          return Logic(parser, index);
        };
        function End(parser, index) {
          if (parser.options.noindent) {
            return EndNoIndent(parser, index);
          } else {
            return Box(index);
          }
        }
        _Name = cache((_ref = separatedList(
          cons(NameStart, zeroOrMore(NameChar)),
          MinusChar,
          NamePart
        ), mutate(function (items) {
          var _arr, _i, _len, item, parts;
          parts = processCharCodes(items[0]);
          for (_arr = __toArray(items), _i = 1, _len = _arr.length; _i < _len; ++_i) {
            item = _arr[_i];
            parts.push(fromCharCode(item[0]).toUpperCase());
            processCharCodes(item, parts, 1);
          }
          return parts.join("");
        })(_ref)));
        Name = cache(withSpace(_Name));
        _Symbol = cache((_ref = oneOrMore(SymbolChar), mutate(codesToString)(_ref)));
        Symbol = cache(withSpace(_Symbol));
        ColonEqual = cache(withSpace((_ref = sequential(ColonChar, EqualSignChar), mutate(":=")(_ref))));
        NameOrSymbol = cache(withSpace(oneOf(
          (_ref = withSpace(oneOrMoreOf(_Name, _Symbol)), mutate(function (parts) {
            return parts.join("");
          })(_ref)),
          ColonEqual
        )));
        MacroName = cache(withSpace(sequential(
          ["this", NameOrSymbol],
          NotColonUnlessNoIndentAndNewline
        )));
        MacroNames = separatedList(MacroName, Comma);
        UseMacro = cache(function (parser, index) {
          var m, name, result;
          name = MacroName(parser, index);
          if (!name) {
            return;
          }
          m = parser.getMacroByName(name.value);
          if (!m) {
            return;
          }
          result = m(parser, index);
          if (!result) {
            throw SHORT_CIRCUIT;
          }
          return result;
        });
        function ruleEqual(rule, text) {
          var failureMessage;
          failureMessage = JSON.stringify(text);
          return function (parser, index) {
            var result;
            result = rule(parser, index);
            if (result && result.value === text) {
              return result;
            } else {
              return parser.fail(failureMessage, index);
            }
          };
        }
        function memoize(func) {
          var cache;
          cache = __create(null);
          return function (key) {
            if (__owns.call(cache, key)) {
              return cache[key];
            } else {
              return cache[key] = func(key);
            }
          };
        }
        word = memoize(function (text) {
          return ruleEqual(Name, text);
        });
        symbol = memoize(function (text) {
          return ruleEqual(Symbol, text);
        });
        macroName = memoize(function (text) {
          return ruleEqual(MacroName, text);
        });
        wordOrSymbol = memoize(function (text) {
          var _arr, _len, _ref, i, part, parts;
          parts = [Space];
          for (_arr = __toArray(text.split(/([a-z]+)/ig)), i = 0, _len = _arr.length; i < _len; ++i) {
            part = _arr[i];
            if (part) {
              parts.push(ruleEqual(
                i % 2 === 0 ? _Symbol : _Name,
                part
              ));
            }
          }
          _ref = sequential.apply(void 0, __toArray(parts));
          return mutate(text)(_ref);
        });
        _o = __create(null);
        _o[9] = 4;
        _o[32] = 1;
        INDENTS = _o;
        _ref = zeroOrMore(SpaceChar);
        CountIndent = mutate(function (spaces) {
          var _arr, _i, c, count, indent;
          count = 0;
          for (_arr = __toArray(spaces), _i = _arr.length; _i--; ) {
            c = _arr[_i];
            indent = INDENTS[c];
            if (!indent) {
              throw Error("Unexpected indent char: " + JSON.stringify(c));
            }
            count += +indent;
          }
          return count;
        })(_ref);
        function IndentationRequired(parser, index) {
          if (!parser.options.noindent) {
            return Box(index);
          }
        }
        function CheckIndent(parser, index) {
          var count;
          count = CountIndent(parser, index);
          if (parser.options.noindent || count.value === parser.indent.peek()) {
            return count;
          }
        }
        function Advance(parser, index) {
          var count, countValue, indent;
          if (parser.options.noindent) {
            throw Error("Can't use Advance if in noindent mode");
          }
          count = CountIndent(parser, index);
          countValue = count.value;
          indent = parser.indent;
          if (countValue > indent.peek()) {
            indent.push(countValue);
            return Box(index, countValue);
          }
        }
        function MaybeAdvance(parser, index) {
          var count;
          count = CountIndent(parser, index);
          parser.indent.push(count.value);
          return Box(index, count.value);
        }
        function PushFakeIndent(n) {
          return function (parser, index) {
            var indent;
            indent = parser.indent;
            indent.push(indent.peek() - -n);
            return Box(index, 0);
          };
        }
        function PopIndent(parser, index) {
          var indent;
          indent = parser.indent;
          if (indent.canPop()) {
            indent.pop();
            return Box(index);
          } else {
            throw ParserError("Unexpected dedent", parser, index);
          }
        }
        function retainIndent(rule) {
          return function (parser, index) {
            var _end, count, i, indent;
            indent = parser.indent;
            count = indent.count();
            try {
              return rule(parser, index);
            } finally {
              for (i = +count, _end = +indent.count(); i < _end; ++i) {
                indent.pop();
              }
            }
          };
        }
        ThisLiteral = cache((_ref = word("this"), mutate(function (_p, parser, index) {
          return parser.This(index);
        })(_ref)));
        ThisShorthandLiteral = cache((_ref = withSpace(AtSignChar), mutate(function (_p, parser, index) {
          return parser.This(index);
        })(_ref)));
        ArgumentsLiteral = cache((_ref = word("arguments"), mutate(function (_p, parser, index) {
          return parser.Args(index);
        })(_ref)));
        ThisOrShorthandLiteral = cache(oneOf(ThisLiteral, ThisShorthandLiteral));
        ThisOrShorthandLiteralPeriod = oneOf(
          sequential(
            ["this", ThisLiteral],
            Period
          ),
          sequential(
            ["this", ThisShorthandLiteral],
            maybe(Period)
          )
        );
        getReservedIdents = (function () {
          var RESERVED_IDENTS, RESERVED_IDENTS_NOINDENT;
          RESERVED_IDENTS = [
            "as",
            "AST",
            "arguments",
            "break",
            "case",
            "catch",
            "class",
            "const",
            "continue",
            "debugger",
            "default",
            "delete",
            "do",
            "else",
            "enum",
            "eval",
            "export",
            "extends",
            "false",
            "finally",
            "for",
            "function",
            "if",
            "import",
            "Infinity",
            "instanceof",
            "in",
            "let",
            "macro",
            "mutable",
            "NaN",
            "new",
            "not",
            "null",
            "package",
            "private",
            "protected",
            "public",
            "return",
            "static",
            "super",
            "switch",
            "then",
            "this",
            "throw",
            "true",
            "try",
            "typeof",
            "undefined",
            "var",
            "void",
            "while",
            "with",
            "yield"
          ];
          RESERVED_IDENTS_NOINDENT = __toArray(RESERVED_IDENTS).concat(["end"]).sort();
          return function (options) {
            if (options && options.noindent) {
              return RESERVED_IDENTS_NOINDENT;
            } else {
              return RESERVED_IDENTS;
            }
          };
        }());
        SpreadToken = cache(withSpace((_ref = sequential(Period, Period, Period), mutate("...")(_ref))));
        MaybeSpreadToken = cache(maybe(SpreadToken));
        SpreadOrExpression = cache((_ref = sequential(
          ["spread", MaybeSpreadToken],
          ["node", Expression]
        ), mutate(function (_p, parser, index) {
          var node, spread;
          spread = _p.spread;
          node = _p.node;
          if (spread === "...") {
            return parser.Spread(index, node);
          } else {
            return node;
          }
        })(_ref)));
        allowSpaceBeforeAccess = makeAlterStack("disallowSpaceBeforeAccess", false);
        ClosedArguments = cache(sequential(
          NoSpace,
          OpenParenthesis,
          Space,
          [
            "this",
            allowSpaceBeforeAccess(concat(
              maybe(
                sequential(
                  [
                    "this",
                    separatedList(SpreadOrExpression, Comma)
                  ],
                  MaybeComma
                ),
                function () {
                  return [];
                }
              ),
              maybe(
                retainIndent(sequential(
                  SomeEmptyLines,
                  MaybeAdvance,
                  [
                    "this",
                    maybe(
                      sequential(CheckIndent, [
                        "this",
                        separatedList(SpreadOrExpression, CommaOrSomeEmptyLinesWithCheckIndent)
                      ]),
                      function () {
                        return [];
                      }
                    )
                  ],
                  EmptyLines,
                  MaybeCommaOrNewline,
                  PopIndent
                )),
                function () {
                  return [];
                }
              )
            ))
          ],
          CloseParenthesis
        ));
        disallowSpaceBeforeAccess = makeAlterStack("disallowSpaceBeforeAccess", true);
        UnclosedArguments = cache(disallowSpaceBeforeAccess(sequential(
          oneOf(
            sequential(SpaceChar, Space),
            check(Newline)
          ),
          [
            "this",
            concat(
              separatedList(SpreadOrExpression, Comma),
              oneOf(
                sequential(IndentationRequired, Comma, SomeEmptyLines, [
                  "this",
                  retainIndent(sequential(
                    Advance,
                    CheckIndent,
                    [
                      "this",
                      separatedList(SpreadOrExpression, CommaOrSomeEmptyLinesWithCheckIndent)
                    ],
                    MaybeComma,
                    PopIndent
                  ))
                ]),
                mutate(function () {
                  return [];
                })(MaybeComma)
              )
            )
          ]
        )));
        InvocationArguments = cache(oneOf(ClosedArguments, UnclosedArguments));
        Identifier = cache(oneOf(
          (_ref = sequential(
            function (parser, index) {
              if (parser.inAst.peek()) {
                return Box(index);
              }
            },
            DollarSign,
            NoSpace,
            ["this", InvocationArguments]
          ), mutate(function (args, parser, index) {
            return parser.Call(
              index,
              parser.Ident(index, "$"),
              args
            );
          })(_ref)),
          function (parser, index) {
            var name;
            name = Name(parser, index);
            if (!name || __in(name.value, getReservedIdents(parser.options)) || parser.hasMacroOrOperator(name.value || parser.scope.peek().hasConst(name.value))) {
              return parser.fail("identifier", index);
            } else {
              return Box(name.index, parser.Ident(index, name.value));
            }
          }
        ));
        function makeDigitsRule(digit) {
          var _ref;
          _ref = separatedList(oneOrMore(digit), oneOrMore(Underscore, true));
          return mutate(function (parts) {
            var _arr, _i, _len, part, result;
            result = [];
            for (_arr = __toArray(parts), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              part = _arr[_i];
              processCharCodes(part, result);
            }
            return result.join("");
          })(_ref);
        }
        MaybeUnderscores = cache(zeroOrMore(Underscore, true));
        function parseRadixNumber(integer, fraction, radix, exponent) {
          var _i, _len, c, currentValue, i;
          if (exponent == null) {
            exponent = 0;
          }
          if (exponent % 1 !== 0) {
            throw RangeError("Expected exponent to be an integer, got " + exponent);
          }
          while (exponent > 0) {
            integer += fraction.charAt(0) || "0";
            fraction = fraction.substring(1);
            --exponent;
          }
          while (exponent < 0) {
            fraction = integer.slice(-1) + fraction;
            integer = integer.slice(0, -1);
            ++exponent;
          }
          currentValue = 0;
          for (_i = 0, _len = integer.length; _i < _len; ++_i) {
            c = integer.charAt(_i);
            currentValue = currentValue * radix + parseInt(c, radix);
          }
          if (fraction) {
            for (i = 0, _len = fraction.length; i < _len; ++i) {
              c = fraction.charAt(i);
              currentValue += parseInt(c, radix) / Math.pow(radix, i + 1);
            }
          }
          return currentValue;
        }
        DecimalNumber = cache((function () {
          var _ref, _ref2, DecimalDigits;
          DecimalDigits = makeDigitsRule(DecimalDigit);
          _ref = sequential(
            ["integer", DecimalDigits],
            [
              "fraction",
              maybe(
                sequential(MaybeUnderscores, Period, MaybeUnderscores, ["this", DecimalDigits]),
                ""
              )
            ],
            [
              "exponent",
              maybe(
                (_ref2 = sequential(
                  characters("[Ee]", charsToFakeSet([69, 101])),
                  ["sign", maybe(PlusOrMinusChar)],
                  ["digits", DecimalDigits]
                ), mutate(function (_p) {
                  var digits, e, sign;
                  e = _p.e;
                  sign = _p.sign;
                  digits = _p.digits;
                  return (sign ? fromCharCode(sign) : "") + digits;
                })(_ref2)),
                ""
              )
            ],
            maybe(sequential(Underscore, maybe(NamePart)))
          );
          return mutate(function (_p, parser, index, endIndex) {
            var exponent, fraction, integer, value;
            integer = _p.integer;
            fraction = _p.fraction;
            exponent = _p.exponent;
            value = parseRadixNumber(integer, fraction, 10, exponent ? parseInt(exponent, 10) : 0);
            if (!isFinite(value)) {
              throw ParserError(
                "Unable to parse number " + quote(parser.source.substring(index, endIndex)),
                parser,
                index
              );
            }
            return parser.Const(index, value);
          })(_ref);
        }()));
        function makeRadixNumber(radix, separator, digit) {
          var _ref, digits;
          digits = makeDigitsRule(digit);
          _ref = sequential(
            Zero,
            ["separator", separator],
            SHORT_CIRCUIT,
            ["integer", digits],
            [
              "fraction",
              maybe(
                sequential(MaybeUnderscores, Period, MaybeUnderscores, ["this", digits]),
                ""
              )
            ],
            MaybeUnderscores
          );
          return mutate(function (_p, parser, index, endIndex) {
            var fraction, integer, separator, value;
            separator = _p.separator;
            integer = _p.integer;
            fraction = _p.fraction;
            value = parseRadixNumber(integer, fraction, radix);
            if (!isFinite(value)) {
              throw ParserError(
                "Unable to parse number " + quote(parser.source.substring(index, endIndex)),
                parser,
                index
              );
            }
            return parser.Const(index, value);
          })(_ref);
        }
        HexDigit = characters("[0-9A-Fa-f]", charsToFakeSet([
          [48, 57],
          [65, 70],
          [97, 102]
        ]));
        HexNumber = cache(makeRadixNumber(
          16,
          characters("[Xx]", charsToFakeSet([88, 120])),
          HexDigit
        ));
        OctalDigit = characters("[0-7]", charsToFakeSet([[48, 55]]));
        OctalNumber = cache(makeRadixNumber(
          8,
          characters("[Oo]", charsToFakeSet([79, 111])),
          HexDigit
        ));
        BinaryDigit = characters("[01]", charsToFakeSet([48, 49]));
        BinaryNumber = cache(makeRadixNumber(
          2,
          characters("[Bb]", charsToFakeSet([66, 98])),
          HexDigit
        ));
        RadixNumber = cache((function () {
          var digitsCache, R, Radix;
          digitsCache = [];
          function getDigitsRule(radix) {
            var _end, _ref, digit, i, letterEnd, name, set;
            if ((_ref = digitsCache[radix]) == null) {
              switch (radix) {
              case 2:
                digit = BinaryDigit;
                break;
              case 8:
                digit = OctalDigit;
                break;
              case 10:
                digit = DecimalDigit;
                break;
              case 16:
                digit = HexDigit;
                break;
              default:
                set = __create(null);
                for (i = 0, _end = radix > 10 ? +radix : 10; i < _end; ++i) {
                  set[i + 48] = true;
                }
                for (i = 0, _end = (radix > 36 ? +radix : 36) - 10; i < _end; ++i) {
                  set[i + 65] = true;
                  set[i + 97] = true;
                }
                name = ["[0-"];
                name.push(String.fromCharCode((radix > 9 ? +radix : 9) + 48));
                if (radix >= 10) {
                  letterEnd = (radix > 36 ? +radix : 36) - 10;
                  name.push("A-");
                  name.push(String.fromCharCode(letterEnd + 65));
                  name.push("a-");
                  name.push(String.fromCharCode(letterEnd + 97));
                }
                name.push("]");
                digit = characters(name.join(""), set);
              }
              return digitsCache[radix] = makeDigitsRule(digit);
            } else {
              return _ref;
            }
          }
          Radix = multiple(DecimalDigit, 1, 2);
          R = characters("[Rr]", charsToFakeSet([82, 114]));
          return function (parser, index) {
            var currentIndex, digitsRule, fraction, integer, period, radix, radixNum,
                radixValue, separator, trailing, value;
            radix = Radix(parser, index);
            if (!radix) {
              return;
            }
            radixValue = codesToString(radix.value);
            separator = R(parser, radix.index);
            if (!separator) {
              return;
            }
            radixNum = parseInt(radixValue, 10);
            if (!isFinite(radixNum)) {
              throw ParserError("Unable to parse radix " + quote(radixValue), parser, index);
            } else if (radixNum < 2) {
              throw ParserError("Radix must be at least 2, got " + radixNum, parser, index);
            } else if (radixNum > 36) {
              throw ParserError("Radix must be at most 36, got " + radixNum, parser, index);
            }
            digitsRule = getDigitsRule(radixNum);
            integer = digitsRule(parser, separator.index);
            if (!integer) {
              parser.fail("integer after radix", separator.index);
              throw SHORT_CIRCUIT;
            }
            currentIndex = MaybeUnderscores(parser, integer.index).index;
            period = Period(parser, currentIndex);
            if (period) {
              fraction = digitsRule(parser, MaybeUnderscores(parser, period.index).index);
              if (fraction) {
                value = parseRadixNumber(integer.value, fraction.value, radixNum);
                currentIndex = fraction.index;
              }
            }
            if (value == null) {
              value = parseRadixNumber(integer.value, "", radixNum);
            }
            if (!isFinite(value)) {
              throw ParserError(
                "Unable to parse number " + quote(parser.source.substring(index, currentIndex)),
                parser,
                index
              );
            }
            trailing = MaybeUnderscores(parser, currentIndex);
            return Box(trailing.index, parser.Const(index, value));
          };
        }()));
        NumberLiteral = cache(withSpace(oneOf(
          HexNumber,
          OctalNumber,
          BinaryNumber,
          RadixNumber,
          DecimalNumber
        )));
        IdentifierNameConst = cache(function (parser, index) {
          var name;
          name = Name(parser, index);
          if (name) {
            return Box(name.index, parser.Const(index, name.value));
          }
        });
        IdentifierNameConstOrNumberLiteral = cache(oneOf(IdentifierNameConst, NumberLiteral));
        function makeConstLiteral(name, value) {
          var _ref;
          _ref = word(name);
          return mutate(function (_p, parser, index) {
            return parser.Const(index, value);
          })(_ref);
        }
        _ref = sequential(
          character('"x"', 120),
          SHORT_CIRCUIT,
          [
            "this",
            multiple(HexDigit, 2, 2)
          ]
        );
        HexEscapeSequence = mutate(function (digits) {
          return parseInt(codesToString(digits), 16);
        })(_ref);
        UnicodeEscapeSequence = sequential(
          character('"u"', 117),
          SHORT_CIRCUIT,
          [
            "this",
            oneOf(
              (_ref = multiple(HexDigit, 4, 4), mutate(function (digits) {
                return parseInt(codesToString(digits), 16);
              })(_ref)),
              (_ref = sequential(
                OpenCurlyBraceChar,
                [
                  "this",
                  multiple(HexDigit, 1, 6)
                ],
                CloseCurlyBraceChar
              ), mutate(function (digits, parser, index) {
                var inner, value;
                inner = codesToString(digits);
                value = parseInt(inner, 16);
                if (value > 1114111) {
                  throw ParserError("Unicode escape sequence too large: '\\u{" + inner + "}'", parser, index);
                }
                return value;
              })(_ref))
            )
          ]
        );
        SingleEscapeCharacter = (function () {
          var _o, ESCAPED_CHARACTERS;
          _o = __create(null);
          _o[98] = 8;
          _o[102] = 12;
          _o[114] = 13;
          _o[110] = 10;
          _o[116] = 9;
          _o[118] = 11;
          ESCAPED_CHARACTERS = _o;
          return oneOf(mutate(0)(Zero), mutate(function (c) {
            return ESCAPED_CHARACTERS[c] || c;
          })(AnyChar));
        }());
        BackslashEscapeSequence = sequential(BackslashChar, SHORT_CIRCUIT, [
          "this",
          oneOf(HexEscapeSequence, UnicodeEscapeSequence, SingleEscapeCharacter)
        ]);
        inExpression = makeAlterStack("position", "expression");
        inStatement = makeAlterStack("position", "statement");
        AssignmentAsExpression = inExpression(function (parser, index) {
          return Assignment(parser, index);
        });
        ExpressionOrAssignment = cache(oneOf(AssignmentAsExpression, Expression));
        ExpressionOrAssignmentOrBody = cache(oneOf(ExpressionOrAssignment, Body));
        StringInterpolation = sequential(DollarSignChar, NoSpace, SHORT_CIRCUIT, [
          "this",
          oneOf(Identifier, sequential(
            OpenParenthesis,
            [
              "this",
              allowSpaceBeforeAccess(oneOf(Expression, Nothing))
            ],
            CloseParenthesis
          ))
        ]);
        SingleStringLiteral = cache((_ref = sequential(
          SingleQuote,
          SHORT_CIRCUIT,
          [
            "this",
            zeroOrMoreOf(BackslashEscapeSequence, anyExcept(oneOf(SingleQuote, Newline)))
          ],
          SingleQuote
        ), mutate(function (codes, parser, index) {
          return parser.Const(index, codesToString(codes));
        })(_ref)));
        DoubleStringLiteralInner = zeroOrMoreOf(BackslashEscapeSequence, StringInterpolation, anyExcept(oneOf(DoubleQuote, Newline)));
        function doubleStringLiteralHandler(parts, parser, index) {
          var _arr, _i, _len, currentLiteral, part, stringParts;
          stringParts = [];
          currentLiteral = [];
          for (_arr = __toArray(parts), _i = 0, _len = _arr.length; _i < _len; ++_i) {
            part = _arr[_i];
            if (typeof part === "number") {
              currentLiteral.push(part);
            } else if (!(part instanceof NothingNode)) {
              stringParts.push(parser.Const(index, codesToString(currentLiteral)));
              currentLiteral = [];
              stringParts.push(part);
            }
          }
          if (currentLiteral.length > 0) {
            stringParts.push(parser.Const(index, codesToString(currentLiteral)));
          }
          return stringParts;
        }
        DoubleStringLiteral = cache((_ref = sequential(
          DoubleQuote,
          SHORT_CIRCUIT,
          ["this", DoubleStringLiteralInner],
          DoubleQuote
        ), mutate(function (parts, parser, index) {
          var _arr, _arr2, _i, _len, part, stringParts;
          for (_arr = [], _arr2 = doubleStringLiteralHandler(parts, parser, index), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
            part = _arr2[_i];
            if (!part.isConstValue("")) {
              _arr.push(part);
            }
          }
          stringParts = _arr;
          if (stringParts.length === 0) {
            return parser.Const(index, "");
          } else if (stringParts.length === 1 && stringParts[0].isConstType("string")) {
            return stringParts[0];
          } else {
            return parser.string(index, stringParts);
          }
        })(_ref)));
        DoubleStringArrayLiteral = cache((_ref = sequential(
          PercentSignChar,
          DoubleQuote,
          SHORT_CIRCUIT,
          ["this", DoubleStringLiteralInner],
          DoubleQuote
        ), mutate(function (parts, parser, index) {
          var stringParts;
          stringParts = doubleStringLiteralHandler(parts, parser, index);
          return parser.Array(index, stringParts);
        })(_ref)));
        function StringIndent(parser, index) {
          var c, count, currentIndent, currentIndex, indentValue;
          count = 0;
          currentIndent = parser.indent.peek();
          currentIndex = index;
          while (count < currentIndent) {
            c = SpaceChar(parser, currentIndex);
            if (!c) {
              break;
            }
            currentIndex = c.index;
            indentValue = INDENTS[c.value];
            if (!indentValue) {
              throw Error("Unexpected indent char: " + JSON.stringify(c.value));
            }
            count += +indentValue;
          }
          if (count > currentIndent) {
            throw ParserError("Mixed tabs and spaces in string literal", parser, currentIndex);
          } else if (count === currentIndent || Newline(parser, currentIndex)) {
            return Box(currentIndex, count);
          }
        }
        if (typeof String.prototype.trimRight === "function") {
          trimRight = function (x) {
            return x.trimRight();
          };
        } else {
          trimRight = function (x) {
            return x.replace(/\s+$/, "");
          };
        }
        _ref = zeroOrMoreOf(BackslashEscapeSequence, anyExcept(oneOf(TripleSingleQuote, Newline)));
        TripleSingleStringLine = mutate(function (codes) {
          return [trimRight(codesToString(codes))];
        })(_ref);
        _ref = zeroOrMoreOf(BackslashEscapeSequence, StringInterpolation, anyExcept(oneOf(TripleDoubleQuote, Newline)));
        TripleDoubleStringLine = mutate(function (parts) {
          var _arr, _i, _len, currentLiteral, part, stringParts;
          stringParts = [];
          currentLiteral = [];
          for (_arr = __toArray(parts), _i = 0, _len = _arr.length; _i < _len; ++_i) {
            part = _arr[_i];
            if (typeof part === "number") {
              currentLiteral.push(part);
            } else if (!(part instanceof NothingNode)) {
              if (currentLiteral.length > 0) {
                stringParts.push(codesToString(currentLiteral));
                currentLiteral = [];
              }
              stringParts.push(part);
            }
          }
          if (currentLiteral.length > 0) {
            stringParts.push(trimRight(codesToString(currentLiteral)));
          }
          return stringParts;
        })(_ref);
        function tripleStringHandler(x, parser, index) {
          var _end, _len, i, j, len, line, lines, part, stringParts;
          lines = [x.first];
          if (lines[0].length === 0 || lines[0].length === 1 && lines[0][0] === "") {
            lines.shift();
          }
          for (j = 1, _end = +x.numEmptyLines; j < _end; ++j) {
            lines.push([""]);
          }
          lines.push.apply(lines, __toArray(x.rest));
          len = lines.length;
          if (len > 0 && (lines[len - 1].length === 0 || lines[len - 1].length === 1 && lines[len - 1][0] === "")) {
            lines.pop();
            --len;
          }
          stringParts = [];
          for (j = 0, _len = lines.length; j < _len; ++j) {
            line = lines[j];
            if (j > 0) {
              stringParts.push("\n");
            }
            stringParts.push.apply(stringParts, __toArray(line));
          }
          for (i = stringParts.length - 2; i >= 0; --i) {
            if (typeof stringParts[i] === "string" && typeof stringParts[i + 1] === "string") {
              stringParts.splice(i, 2, "" + stringParts[i] + stringParts[i + 1]);
            }
          }
          for (i = 0, _len = stringParts.length; i < _len; ++i) {
            part = stringParts[i];
            if (typeof part === "string") {
              stringParts[i] = parser.Const(index, part);
            }
          }
          return stringParts;
        }
        function makeTripleString(quote, line) {
          var _ref;
          _ref = sequential(
            quote,
            SHORT_CIRCUIT,
            ["first", line],
            [
              "numEmptyLines",
              zeroOrMore(
                sequential(Space, ["this", Newline]),
                true
              )
            ],
            [
              "rest",
              maybe(
                retainIndent(sequential(
                  MaybeAdvance,
                  [
                    "this",
                    maybe(
                      separatedList(
                        sequential(StringIndent, ["this", line]),
                        Newline
                      ),
                      function () {
                        return [];
                      }
                    )
                  ],
                  maybe(Newline),
                  PopIndent
                )),
                function () {
                  return [];
                }
              )
            ],
            quote
          );
          return mutate(function (parts, parser, index) {
            var _arr, _arr2, _i, _len, part, stringParts;
            for (_arr = [], _arr2 = tripleStringHandler(parts, parser, index), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
              part = _arr2[_i];
              if (!part.isConstValue("")) {
                _arr.push(part);
              }
            }
            stringParts = _arr;
            if (stringParts.length === 0) {
              return parser.Const(index, "");
            } else if (stringParts.length === 1 && stringParts[0].isConstType("string")) {
              return stringParts[0];
            } else {
              return parser.string(index, stringParts);
            }
          })(_ref);
        }
        TripleSingleStringLiteral = cache(makeTripleString(TripleSingleQuote, TripleSingleStringLine));
        TripleDoubleStringLiteral = cache(makeTripleString(TripleDoubleQuote, TripleDoubleStringLine));
        TripleDoubleStringArrayLiteral = cache((_ref = sequential(
          PercentSignChar,
          TripleDoubleQuote,
          SHORT_CIRCUIT,
          ["first", TripleDoubleStringLine],
          [
            "numEmptyLines",
            zeroOrMore(
              sequential(Space, ["this", Newline]),
              true
            )
          ],
          [
            "rest",
            maybe(
              retainIndent(sequential(
                MaybeAdvance,
                [
                  "this",
                  maybe(
                    sequential(StringIndent, [
                      "this",
                      separatedList(TripleDoubleStringLine, sequential(Newline, StringIndent))
                    ]),
                    function () {
                      return [];
                    }
                  )
                ],
                maybe(Newline),
                PopIndent
              )),
              function () {
                return [];
              }
            )
          ],
          TripleDoubleQuote
        ), mutate(function (parts, parser, index) {
          var stringParts;
          stringParts = tripleStringHandler(parts, parser, index);
          return parser.Array(index, stringParts);
        })(_ref)));
        BackslashStringLiteral = cache(sequential(BackslashChar, NoSpace, ["this", IdentifierNameConst]));
        StringLiteral = cache(withSpace(oneOf(
          BackslashStringLiteral,
          TripleSingleStringLiteral,
          TripleDoubleStringLiteral,
          TripleDoubleStringArrayLiteral,
          SingleStringLiteral,
          DoubleStringLiteral,
          DoubleStringArrayLiteral
        )));
        RegexLiteral = (function () {
          var _ref, _ref2, LowerR, NOTHING, RegexComment, RegexFlags, RegexSpace;
          LowerR = character('"r"', 114);
          _ref = zeroOrMore(NameChar);
          RegexFlags = mutate(codesToString)(_ref);
          NOTHING = {};
          _ref = sequential(HashSignChar, zeroOrMore(anyExcept(Newline), true));
          RegexComment = mutate(NOTHING)(_ref);
          _ref = oneOf(SpaceChar, Newline);
          RegexSpace = mutate(NOTHING)(_ref);
          return withSpace((_ref = sequential(
            LowerR,
            [
              "text",
              oneOf(
                sequential(
                  TripleDoubleQuote,
                  SHORT_CIRCUIT,
                  [
                    "this",
                    zeroOrMoreOf(
                      (_ref2 = sequential(BackslashChar, DollarSignChar), mutate(36)(_ref2)),
                      RegexSpace,
                      RegexComment,
                      StringInterpolation,
                      anyExcept(TripleDoubleQuote)
                    )
                  ],
                  TripleDoubleQuote
                ),
                sequential(
                  TripleSingleQuote,
                  SHORT_CIRCUIT,
                  [
                    "this",
                    zeroOrMoreOf(RegexSpace, RegexComment, anyExcept(TripleSingleQuote))
                  ],
                  TripleSingleQuote
                ),
                sequential(
                  DoubleQuote,
                  SHORT_CIRCUIT,
                  [
                    "this",
                    zeroOrMoreOf(
                      (_ref2 = sequential(DoubleQuote, DoubleQuote), mutate(34)(_ref2)),
                      (_ref2 = sequential(BackslashChar, DollarSignChar), mutate(36)(_ref2)),
                      StringInterpolation,
                      anyExcept(oneOf(DoubleQuote, Newline, DollarSignChar))
                    )
                  ],
                  DoubleQuote
                ),
                sequential(
                  SingleQuote,
                  SHORT_CIRCUIT,
                  [
                    "this",
                    zeroOrMoreOf(
                      (_ref2 = sequential(SingleQuote, SingleQuote), mutate(39)(_ref2)),
                      anyExcept(oneOf(SingleQuote, Newline))
                    )
                  ],
                  SingleQuote
                )
              )
            ],
            ["flags", RegexFlags]
          ), mutate(function (_p, parser, index) {
            var _arr, _i, _len, currentLiteral, flag, flags, part, seenFlags,
                stringParts, text;
            text = _p.text;
            flags = _p.flags;
            stringParts = [];
            currentLiteral = [];
            for (_arr = __toArray(text), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              part = _arr[_i];
              if (typeof part === "number") {
                currentLiteral.push(part);
              } else if (part !== NOTHING && !(part instanceof NothingNode)) {
                if (currentLiteral.length > 0) {
                  stringParts.push(parser.Const(index, codesToString(currentLiteral)));
                  currentLiteral = [];
                }
                stringParts.push(part);
              }
            }
            if (currentLiteral.length > 0) {
              stringParts.push(parser.Const(index, codesToString(currentLiteral)));
            }
            if (stringParts.length === 0) {
              text = parser.Const(index, "");
            } else if (stringParts.length === 1 && stringParts[0].isConstType("string")) {
              text = stringParts[0];
            } else {
              text = parser.string(index, stringParts);
            }
            if (text.isConst()) {
              try {
                RegExp(String(text.constValue()));
              } catch (e) {
                throw ParserError(e.message, parser, index);
              }
            }
            seenFlags = [];
            for (_arr = __toArray(flags), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              flag = _arr[_i];
              if (__in(flag, seenFlags)) {
                throw ParserError("Invalid regular expression: flag " + quote(flag) + " occurred more than once", parser, index);
              } else if (flag !== "g" && flag !== "i" && flag !== "m" && flag !== "y") {
                throw ParserError("Invalid regular expression: unknown flag " + quote(flag), parser, index);
              }
              seenFlags.push(flag);
            }
            return parser.Regexp(index, text, flags);
          })(_ref)));
        }());
        ConstantLiteralAccessPart = oneOf(
          sequential(Period, ["this", IdentifierNameConstOrNumberLiteral]),
          sequential(
            OpenSquareBracketChar,
            ["this", allowSpaceBeforeAccess(Expression)],
            CloseSquareBracket
          )
        );
        function CustomConstantLiteral(parser, index) {
          var current, currentIndex, key, name, part, value;
          name = Name(parser, index);
          if (!name) {
            return;
          }
          value = parser.getConst(name.value);
          if (!value) {
            return;
          }
          if (parser.inAst.peek()) {
            return Box(name.index, parser.MacroConst(index, name.value));
          } else {
            current = value.value;
            currentIndex = name.index;
            while (typeof current === "object" && current !== null) {
              part = ConstantLiteralAccessPart(parser, currentIndex);
              if (!part) {
                throw ParserError("Constant '" + name.value + "' cannot appear without being accessed upon.", parser, index);
              }
              if (!part.value.isConst()) {
                throw ParserError("Constant '" + name.value + "' must only be accessed with constant keys.", parser, currentIndex);
              }
              key = part.value.constValue();
              if (!__owns.call(current, key)) {
                throw ParserError("Unknown key " + JSON.stringify(String(key)) + " in constant.", parser, currentIndex);
              }
              current = current[key];
              currentIndex = part.index;
            }
            return Box(currentIndex, parser.Const(index, current));
          }
        }
        function NullOrVoidLiteral(parser, index) {
          var constant;
          constant = CustomConstantLiteral(parser, index);
          if (!constant) {
            return;
          }
          if (constant.value.value != null) {
            return;
          }
          return constant;
        }
        ConstantLiteral = cache(oneOf(CustomConstantLiteral, NumberLiteral, StringLiteral, RegexLiteral));
        Literal = cache(oneOf(ThisOrShorthandLiteral, ArgumentsLiteral, ConstantLiteral));
        MaybeNotToken = cache(maybe(word("not")));
        MaybeQuestionMarkChar = cache(maybe(character('"?"', 63)));
        GeneratorBody = makeAlterStack("inGenerator", true)(Body);
        GeneratorBodyNoEnd = makeAlterStack("inGenerator", true)(BodyNoEnd);
        LessThanChar = character('"<"', 60);
        LessThan = withSpace(LessThanChar);
        GreaterThanChar = character('">"', 62);
        GreaterThan = withSpace(GreaterThanChar);
        FunctionGlyph = cache(sequential(Space, MinusChar, GreaterThanChar));
        _FunctionBody = oneOf(
          sequential(FunctionGlyph, [
            "this",
            oneOf(Statement, Nothing)
          ]),
          Body,
          Statement
        );
        FunctionBody = makeAlterStack("inGenerator", false)(_FunctionBody);
        GeneratorFunctionBody = makeAlterStack("inGenerator", true)(_FunctionBody);
        IdentifierOrSimpleAccessStart = oneOf(
          Identifier,
          (_ref = sequential(
            ["parent", ThisOrShorthandLiteralPeriod],
            ["child", IdentifierNameConstOrNumberLiteral]
          ), mutate(function (_p, parser, index) {
            var child, parent;
            parent = _p.parent;
            child = _p.child;
            return parser.Access(index, parent, child);
          })(_ref)),
          (_ref = sequential(
            ["parent", ThisOrShorthandLiteral],
            DoubleColonChar,
            ["child", IdentifierNameConstOrNumberLiteral]
          ), mutate(function (_p, parser, index) {
            var child, parent;
            parent = _p.parent;
            child = _p.child;
            return parser.Access(
              index,
              parser.Access(index, parent, parser.Const(index, "prototype")),
              child
            );
          })(_ref)),
          (_ref = sequential(
            ["parent", ThisOrShorthandLiteral],
            ["isProto", maybe(DoubleColonChar)],
            OpenSquareBracketChar,
            ["child", allowSpaceBeforeAccess(Expression)],
            CloseSquareBracket
          ), mutate(function (_p, parser, index) {
            var child, isProto, parent;
            parent = _p.parent;
            isProto = _p.isProto;
            child = _p.child;
            return parser.Access(
              index,
              isProto
                ? parser.Access(index, parent, parser.Const(index, "prototype"))
                : parent,
              child
            );
          })(_ref))
        );
        PeriodOrDoubleColonChar = cache(oneOf(Period, DoubleColonChar));
        _ref = oneOf(
          sequential(
            ["type", PeriodOrDoubleColonChar],
            ["child", IdentifierNameConstOrNumberLiteral]
          ),
          sequential(
            ["type", maybe(DoubleColonChar)],
            OpenSquareBracketChar,
            ["child", allowSpaceBeforeAccess(Expression)],
            CloseSquareBracket
          )
        );
        IdentifierOrSimpleAccessPart = mutate(function (_p, parser, childIndex) {
          var child, isProto, type;
          type = _p.type;
          child = _p.child;
          isProto = type === "::";
          return function (parent, parser, index) {
            return parser.Access(
              index,
              isProto
                ? parser.Access(index, parent, parser.Const(childIndex, "prototype"))
                : parent,
              child
            );
          };
        })(_ref);
        IdentifierOrSimpleAccess = cache((_ref = sequential(
          ["head", IdentifierOrSimpleAccessStart],
          ["tail", zeroOrMore(IdentifierOrSimpleAccessPart)]
        ), mutate(function (parts, parser, index) {
          var _arr, _i, _len, acc, creator;
          acc = parts.head;
          for (_arr = __toArray(parts.tail), _i = 0, _len = _arr.length; _i < _len; ++_i) {
            creator = _arr[_i];
            acc = creator(acc, parser, index);
          }
          return acc;
        })(_ref)));
        IdentifierOrAccess = cache(function (parser, index) {
          var node, value;
          node = InvocationOrAccess(parser, index);
          if (!node) {
            return;
          }
          value = node.value;
          if (value instanceof IdentNode || value instanceof AccessNode) {
            return node;
          }
        });
        inFunctionTypeParams = makeAlterStack("inFunctionTypeParams", true);
        notInFunctionTypeParams = makeAlterStack("inFunctionTypeParams", false);
        TypeReference = function (parser, index) {
          return TypeReference(parser, index);
        };
        ArrayType = cache((_ref = sequential(
          OpenSquareBracket,
          ["this", maybe(allowSpaceBeforeAccess(TypeReference))],
          CloseSquareBracket
        ), mutate(function (subtype, parser, index) {
          var arrayIdent;
          arrayIdent = parser.Ident(index, "Array");
          if (subtype) {
            return parser.TypeGeneric(index, arrayIdent, [subtype]);
          } else {
            return arrayIdent;
          }
        })(_ref)));
        ObjectTypePair = sequential(
          [
            "key",
            function (parser, index) {
              return ConstObjectKey(parser, index);
            }
          ],
          Colon,
          ["value", TypeReference]
        );
        ObjectType = cache((_ref = sequential(
          OpenCurlyBrace,
          [
            "this",
            allowSpaceBeforeAccess(maybe(
              separatedList(ObjectTypePair, CommaOrNewline),
              function () {
                return [];
              }
            ))
          ],
          MaybeComma,
          CloseCurlyBrace
        ), mutate(function (pairs, parser, index) {
          var _arr, _i, _len, key, keys, keyValue;
          if (pairs.length === 0) {
            return parser.Ident(index, "Object");
          } else {
            keys = [];
            for (_arr = __toArray(pairs), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              key = _arr[_i].key;
              if (!key.isConst()) {
                throw ParserError("Expected a constant key, got " + __typeof(key), parser, key.index);
              } else {
                keyValue = String(key.constValue());
                if (__in(keyValue, keys)) {
                  throw ParserError("Duplicate object key: " + quote(keyValue), parser, key.index);
                }
                keys.push(keyValue);
              }
            }
            return parser.TypeObject(index, pairs);
          }
        })(_ref)));
        _ref = sequential(
          oneOf(
            sequential(
              OpenParenthesis,
              allowSpaceBeforeAccess(separatedList(TypeReference, CommaOrNewline)),
              CloseParenthesis
            ),
            inFunctionTypeParams(TypeReference),
            Nothing
          ),
          FunctionGlyph,
          ["this", maybe(TypeReference)]
        );
        FunctionType = mutate(function (returnType, parser, index) {
          var functionIdent;
          functionIdent = parser.Ident(index, "Function");
          if (returnType) {
            return parser.TypeGeneric(index, functionIdent, [returnType]);
          } else {
            return functionIdent;
          }
        })(_ref);
        NonUnionType = oneOf(
          function (parser, index) {
            if (!parser.inFunctionTypeParams.peek()) {
              return FunctionType(parser, index);
            }
          },
          sequential(
            OpenParenthesis,
            [
              "this",
              allowSpaceBeforeAccess(notInFunctionTypeParams(function (parser, index) {
                return TypeReference(parser, index);
              }))
            ],
            CloseParenthesis
          ),
          ArrayType,
          ObjectType,
          NullOrVoidLiteral,
          (_ref = sequential(
            ["base", IdentifierOrSimpleAccess],
            [
              "args",
              maybe(
                sequential(
                  character('"<"', 60),
                  SHORT_CIRCUIT,
                  [
                    "this",
                    separatedList(
                      function (parser, index) {
                        return TypeReference(parser, index);
                      },
                      Comma
                    )
                  ],
                  Space,
                  character('">"', 62)
                ),
                function () {
                  return [];
                }
              )
            ]
          ), mutate(function (_p, parser, index) {
            var args, base;
            base = _p.base;
            args = _p.args;
            if (!args.length) {
              return base;
            } else {
              return parser.TypeGeneric(index, base, args);
            }
          })(_ref))
        );
        Pipe = cache(withSpace(PipeChar));
        TypeReference = cache((_ref = separatedList(NonUnionType, Pipe), mutate(function (types, parser, index) {
          var _arr, i, type;
          types = types.slice();
          for (_arr = __toArray(types), i = _arr.length; i--; ) {
            type = _arr[i];
            if (type instanceof TypeUnionNode) {
              types.splice.apply(types, [i, 1].concat(__toArray(type.types)));
            }
          }
          if (types.length === 1) {
            return types[0];
          } else {
            return parser.TypeUnion(index, types);
          }
        })(_ref)));
        MaybeAsType = maybe(sequential(word("as"), SHORT_CIRCUIT, ["this", TypeReference]));
        BracketedObjectKey = cache(sequential(
          OpenSquareBracket,
          ["this", allowSpaceBeforeAccess(ExpressionOrAssignment)],
          CloseSquareBracket
        ));
        ConstObjectKey = oneOf(
          StringLiteral,
          mutate(function (node, parser, index) {
            return parser.Const(index, String(node.constValue()));
          })(NumberLiteral),
          IdentifierNameConst
        );
        ObjectKey = cache(oneOf(BracketedObjectKey, ConstObjectKey));
        ObjectKeyColon = cache(sequential(
          ["this", ObjectKey],
          Colon,
          except(EqualChar),
          function (parser, index) {
            if (parser.options.noindent) {
              if (EmptyLine(parser, index)) {
                return;
              } else if (parser.options.embedded && (EmbeddedClose(parser, index) || EmbeddedCloseWrite(parser, index))) {
                return;
              }
            }
            return Box(index);
          }
        ));
        function mutateFunction(node, parser, index) {
          var mutateFunctionMacro;
          mutateFunctionMacro = parser.getMacroByLabel("mutateFunction");
          if (!mutateFunctionMacro) {
            return node;
          } else {
            return mutateFunctionMacro.func(
              { op: "", node: node },
              parser,
              index
            );
          }
        }
        function validateSpreadParameters(params, parser) {
          var _arr, _i, _len, param, spreadCount;
          spreadCount = 0;
          for (_arr = __toArray(params), _i = 0, _len = _arr.length; _i < _len; ++_i) {
            param = _arr[_i];
            if (param instanceof ParamNode && param.spread) {
              ++spreadCount;
              if (spreadCount > 1) {
                throw ParserError("Cannot have more than one spread parameter", parser, param.index);
              }
            }
          }
          return params;
        }
        function removeTrailingNothings(array) {
          var last;
          while (array.length) {
            last = array[array.length - 1];
            if (!(last instanceof NothingNode)) {
              break;
            }
            array.pop();
          }
          return array;
        }
        IdentifierOrThisAccess = oneOf(Identifier, (_ref = sequential(
          ["parent", ThisOrShorthandLiteralPeriod],
          ["child", IdentifierNameConst]
        ), mutate(function (_p, parser, index) {
          var child, parent;
          parent = _p.parent;
          child = _p.child;
          return parser.Access(index, parent, child);
        })(_ref)));
        _ref = sequential(
          ["isMutable", bool(maybe(word("mutable")))],
          ["spread", bool(MaybeSpreadToken)],
          ["ident", IdentifierOrThisAccess],
          ["asType", MaybeAsType],
          [
            "defaultValue",
            maybe(sequential(EqualSign, ["this", Expression]))
          ]
        );
        IdentifierParameter = mutate(function (_p, parser, index) {
          var asType, defaultValue, ident, isMutable, spread;
          isMutable = _p.isMutable;
          spread = _p.spread;
          ident = _p.ident;
          asType = _p.asType;
          defaultValue = _p.defaultValue;
          if (spread && defaultValue) {
            throw ParserError(
              "Cannot specify a default value for a spread parameter",
              parser,
              index
            );
          }
          return parser.Param(
            index,
            ident,
            defaultValue,
            spread,
            isMutable,
            asType
          );
        })(_ref);
        Parameter = function (parser, index) {
          return Parameter(parser, index);
        };
        _ref = sequential(
          OpenSquareBracket,
          EmptyLines,
          [
            "this",
            allowSpaceBeforeAccess(function (parser, index) {
              return Parameters(parser, index);
            })
          ],
          EmptyLines,
          CloseSquareBracket
        );
        ArrayParameter = mutate(function (params, parser, index) {
          return parser.Array(index, params);
        })(_ref);
        ParamDualObjectKey = sequential(
          ["key", ObjectKeyColon],
          ["value", Parameter]
        );
        _ref = sequential(
          ["this", IdentifierParameter],
          NotColon
        );
        ParamSingularObjectKey = mutate(function (param, parser, index) {
          var ident, key;
          ident = param.ident;
          if (ident instanceof IdentNode) {
            key = parser.Const(index, ident.name);
          } else if (ident instanceof AccessNode) {
            key = ident.child;
          } else {
            throw Error("Unknown object key type: " + param.type);
          }
          return { key: key, value: param };
        })(_ref);
        KvpParameter = maybe(oneOf(ParamDualObjectKey, ParamSingularObjectKey));
        _ref = sequential(
          OpenCurlyBrace,
          EmptyLines,
          [
            "this",
            allowSpaceBeforeAccess(separatedList(KvpParameter, CommaOrNewline))
          ],
          EmptyLines,
          CloseCurlyBrace
        );
        ObjectParameter = mutate(function (params, parser, index) {
          return parser.object(index, (function () {
            var _arr, _arr2, _i, _len, param;
            for (_arr = [], _arr2 = __toArray(params), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
              param = _arr2[_i];
              if (param) {
                _arr.push(param);
              }
            }
            return _arr;
          }()));
        })(_ref);
        Parameter = oneOf(IdentifierParameter, ArrayParameter, ObjectParameter);
        ParameterOrNothing = oneOf(Parameter, Nothing);
        Parameters = allowSpaceBeforeAccess((_ref = separatedList(ParameterOrNothing, CommaOrNewline), mutate(function (params, parser, index) {
          return validateSpreadParameters(removeTrailingNothings(params), parser);
        })(_ref)));
        _ref = sequential(
          OpenParenthesis,
          SHORT_CIRCUIT,
          EmptyLines,
          ["this", Parameters],
          EmptyLines,
          CloseParenthesis
        );
        ParameterSequence = mutate((function () {
          function checkParam(param, parser, names) {
            var _arr, _i, _len, child, element, ident, name, pair;
            if (param instanceof ParamNode) {
              ident = param.ident;
              if (ident instanceof IdentNode) {
                name = ident.name;
              } else if (ident instanceof AccessNode) {
                child = ident.child;
                if (!child.isConstType("string")) {
                  throw Error("Expected constant access");
                }
                name = child.constValue();
              } else {
                throw Error("Unknown param ident type: " + __typeof(param));
              }
              if (__in(name, names)) {
                throw ParserError("Duplicate parameter name: " + quote(name), parser, ident.index);
              } else {
                names.push(name);
              }
            } else if (param instanceof ArrayNode) {
              for (_arr = __toArray(param.elements), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                element = _arr[_i];
                checkParam(element, parser, names);
              }
            } else if (param instanceof ObjectNode) {
              for (_arr = __toArray(param.pairs), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                pair = _arr[_i];
                checkParam(pair.value, parser, names);
              }
            } else if (!param instanceof NothingNode) {
              throw Error("Unknown param type: " + __typeof(param));
            }
          }
          return function (params, parser, index) {
            var _arr, _i, _len, names, param;
            names = [];
            for (_arr = __toArray(params), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              param = _arr[_i];
              checkParam(param, parser, names);
            }
            return params;
          };
        }()))(_ref);
        requireParameterSequence = makeAlterStack("requireParameterSequence", true);
        dontRequireParameterSequence = makeAlterStack("requireParameterSequence", false);
        _FunctionDeclaration = (function () {
          var _ref, asTypeRule, FunctionFlag, FunctionFlags, GenericDefinitionPart,
              maybeParamsRule;
          FunctionFlag = oneOf(ExclamationPointChar, AtSignChar, AsterixChar, CaretChar);
          _ref = zeroOrMore(FunctionFlag);
          FunctionFlags = mutate(function (codes, parser, index) {
            var _arr, _i, _len, c, flags, uniqueChars;
            flags = { autoReturn: true, bound: false, generator: false, curry: false };
            uniqueChars = [];
            for (_arr = __toArray(codes), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              c = _arr[_i];
              if (__in(c, uniqueChars)) {
                throw ParserError("Function flag " + quote(fromCharCode(c)) + " specified more than once", parser, index);
              } else {
                uniqueChars.push(c);
                switch (c) {
                case 33:
                  flags.autoReturn = false;
                  break;
                case 64:
                  flags.bound = true;
                  break;
                case 42:
                  flags.generator = true;
                  break;
                case 94:
                  flags.curry = true;
                  break;
                default: throw Error("Unknown function flag: " + quote(fromCharCode(c)));
                }
              }
            }
            return flags;
          })(_ref);
          GenericDefinitionPart = maybe(
            sequential(
              LessThanChar,
              [
                "this",
                separatedList(Identifier, Comma)
              ],
              GreaterThan
            ),
            function () {
              return [];
            }
          );
          maybeParamsRule = maybe(ParameterSequence, function () {
            return [];
          });
          asTypeRule = inFunctionTypeParams(MaybeAsType);
          function getBodyRule(generator) {
            if (generator) {
              return GeneratorFunctionBody;
            } else {
              return FunctionBody;
            }
          }
          return allowSpaceBeforeAccess(function (parser, index) {
            var _arr, _i, asType, body, flags, flagsValue, func, generic, param,
                params, paramsRule, result, scope;
            generic = GenericDefinitionPart(parser, index);
            scope = parser.pushScope(true);
            if (parser.requireParameterSequence.peek()) {
              paramsRule = ParameterSequence;
            } else {
              paramsRule = maybeParamsRule;
            }
            params = paramsRule(parser, generic.index);
            if (!params) {
              parser.popScope();
              return;
            }
            for (_arr = __toArray(params.value), _i = _arr.length; _i--; ) {
              param = _arr[_i];
              addParamToScope(scope, param);
            }
            flags = FunctionFlags(parser, params.index);
            flagsValue = flags.value;
            asType = asTypeRule(parser, flags.index);
            body = getBodyRule(flags.value.generator)(parser, asType.index);
            if (!body) {
              parser.popScope();
              return;
            }
            func = parser.Function(
              index,
              params.value,
              body.value,
              flagsValue.autoReturn,
              flagsValue.bound,
              flagsValue.curry,
              asType.value,
              flagsValue.generator,
              generic.value
            );
            result = mutateFunction(func, parser, index);
            parser.popScope();
            return Box(body.index, result);
          });
        }());
        FunctionDeclaration = requireParameterSequence(_FunctionDeclaration);
        FunctionLiteral = cache(sequential(Space, HashSignChar, ["this", dontRequireParameterSequence(_FunctionDeclaration)]));
        preventUnclosedObjectLiteral = makeAlterStack("preventUnclosedObjectLiteral", true);
        ArrayLiteral = cache(preventUnclosedObjectLiteral((_ref = sequential(
          OpenSquareBracket,
          Space,
          [
            "this",
            allowSpaceBeforeAccess(concat(
              maybe(
                sequential(
                  [
                    "this",
                    separatedList(SpreadOrExpression, Comma)
                  ],
                  MaybeComma
                ),
                function () {
                  return [];
                }
              ),
              maybe(
                retainIndent(sequential(
                  SomeEmptyLines,
                  MaybeAdvance,
                  [
                    "this",
                    maybe(
                      sequential(CheckIndent, [
                        "this",
                        separatedList(SpreadOrExpression, CommaOrSomeEmptyLinesWithCheckIndent)
                      ]),
                      function () {
                        return [];
                      }
                    )
                  ],
                  EmptyLines,
                  MaybeCommaOrNewline
                )),
                function () {
                  return [];
                }
              )
            ))
          ],
          CloseSquareBracket
        ), mutate(function (items, parser, index) {
          return parser.Array(index, items);
        })(_ref))));
        SetLiteral = cache((_ref = sequential(PercentSign, check(OpenSquareBracketChar), SHORT_CIRCUIT, ["this", ArrayLiteral]), mutate(function (value, parser, index) {
          var constructSet;
          constructSet = parser.getMacroByLabel("constructSet");
          if (!constructSet) {
            throw Error("Cannot use literal set until the construct-set macro has been defined");
          }
          return constructSet.func(
            { op: "", node: value },
            parser,
            index
          );
        })(_ref)));
        NoNewlineIfNoIndent = cache(function (parser, index) {
          if (parser.options.noindent) {
            return NoSpaceNewline(parser, index);
          } else {
            return Box(index);
          }
        });
        DualObjectKey = sequential(
          ["key", ObjectKeyColon],
          NoNewlineIfNoIndent,
          ["value", Expression]
        );
        GetSetToken = cache(oneOf(word("get"), word("set")));
        PropertyDualObjectKey = cache(sequential(
          [
            "property",
            oneOf(word("property"), GetSetToken)
          ],
          Space,
          ["key", ObjectKeyColon],
          NoNewlineIfNoIndent,
          SHORT_CIRCUIT,
          ["value", Expression]
        ));
        PropertyOrDualObjectKey = cache(oneOf(PropertyDualObjectKey, DualObjectKey));
        MethodDeclaration = sequential(
          ["property", maybe(GetSetToken)],
          ["key", ObjectKey],
          NotColon,
          ["value", FunctionDeclaration]
        );
        PropertyOrDualObjectKeyOrMethodDeclaration = oneOf(PropertyOrDualObjectKey, MethodDeclaration);
        UnclosedObjectLiteral = cache((_ref = separatedList(PropertyOrDualObjectKey, Comma), mutate(function (pairs, parser, index) {
          return parser.object(index, pairs);
        })(_ref)));
        SingularObjectKey = oneOf(
          (_ref = sequential(
            ["this", IdentifierOrAccess],
            NotColon
          ), mutate(function (ident, parser, index) {
            var key;
            if (ident instanceof AccessNode) {
              key = ident.child;
            } else if (ident instanceof IdentNode) {
              key = parser.Const(index, ident.name);
            } else {
              throw ParserError("Unknown ident type: " + __typeof(ident), parser, index);
            }
            return { key: key, value: ident };
          })(_ref)),
          (_ref = sequential(
            ["this", ConstantLiteral],
            NotColon
          ), mutate(function (node, parser, index) {
            var key;
            if (node.isConst() && !node.isConstType("string")) {
              key = parser.Const(index, String(node.value));
            } else {
              key = node;
            }
            return { key: key, value: node };
          })(_ref)),
          (_ref = sequential(
            ["this", ThisLiteral],
            NotColon
          ), mutate(function (node, parser, index) {
            return {
              key: parser.Const(index, "this"),
              value: node
            };
          })(_ref)),
          (_ref = sequential(
            ["this", ArgumentsLiteral],
            NotColon
          ), mutate(function (node, parser, index) {
            return {
              key: parser.Const(index, "arguments"),
              value: node
            };
          })(_ref)),
          (_ref = sequential(
            ["this", BracketedObjectKey],
            NotColon
          ), mutate(function (node, parser, index) {
            return { key: node, value: node };
          })(_ref))
        );
        KeyValuePair = cache(oneOf(
          PropertyOrDualObjectKeyOrMethodDeclaration,
          (_ref = sequential(
            Space,
            ["flag", maybe(PlusOrMinusChar)],
            ["key", SingularObjectKey]
          ), mutate(function (_p, parser, index) {
            var flag, key;
            flag = _p.flag;
            key = _p.key;
            if (flag) {
              return {
                key: key.key,
                value: parser.Const(index, flag === 43)
              };
            } else {
              return key;
            }
          })(_ref)),
          (_ref = sequential(
            Space,
            ["bool", PlusOrMinusChar],
            ["key", IdentifierNameConst]
          ), mutate(function (_p, parser, index) {
            var bool, key;
            bool = _p.bool;
            key = _p.key;
            return {
              key: key,
              value: parser.Const(index, bool === 43)
            };
          })(_ref))
        ));
        ObjectLiteral = cache(allowSpaceBeforeAccess((_ref = sequential(
          OpenCurlyBrace,
          Space,
          [
            "prototype",
            maybe(sequential(
              word("extends"),
              ["this", preventUnclosedObjectLiteral(Logic)],
              Space,
              oneOf(Comma, check(Newline), check(CloseCurlyBrace))
            ))
          ],
          [
            "pairs",
            concat(
              maybe(
                sequential(
                  [
                    "this",
                    separatedList(KeyValuePair, Comma)
                  ],
                  MaybeComma
                ),
                function () {
                  return [];
                }
              ),
              maybe(
                retainIndent(sequential(
                  SomeEmptyLines,
                  MaybeAdvance,
                  [
                    "this",
                    maybe(
                      sequential(CheckIndent, [
                        "this",
                        separatedList(KeyValuePair, CommaOrSomeEmptyLinesWithCheckIndent)
                      ]),
                      function () {
                        return [];
                      }
                    )
                  ],
                  PopIndent
                )),
                function () {
                  return [];
                }
              )
            )
          ],
          EmptyLines,
          MaybeCommaOrNewline,
          EmptyLines,
          CloseCurlyBrace
        ), mutate(function (x, parser, index) {
          return parser.object(index, x.pairs, x.prototype);
        })(_ref))));
        MapLiteral = cache((_ref = sequential(
          PercentSign,
          OpenCurlyBraceChar,
          SHORT_CIRCUIT,
          Space,
          [
            "this",
            allowSpaceBeforeAccess(concat(
              maybe(
                sequential(
                  [
                    "this",
                    separatedList(DualObjectKey, Comma)
                  ],
                  MaybeComma
                ),
                function () {
                  return [];
                }
              ),
              maybe(
                retainIndent(sequential(
                  SomeEmptyLines,
                  MaybeAdvance,
                  [
                    "this",
                    maybe(
                      sequential(CheckIndent, [
                        "this",
                        separatedList(DualObjectKey, CommaOrSomeEmptyLinesWithCheckIndent)
                      ]),
                      function () {
                        return [];
                      }
                    )
                  ],
                  PopIndent
                )),
                function () {
                  return [];
                }
              )
            ))
          ],
          EmptyLines,
          MaybeCommaOrNewline,
          EmptyLines,
          CloseCurlyBrace
        ), mutate(function (pairs, parser, index) {
          var constructMap;
          constructMap = parser.macros.getByLabel("constructMap");
          if (!constructMap) {
            throw Error("Cannot use literal map until the construct-map macro has been defined");
          }
          return constructMap.func(
            {
              op: "",
              node: parser.object(index, pairs)
            },
            parser,
            index
          );
        })(_ref)));
        function RighthandAssignment(parser, index) {
          var _arr, _i, op, operator, right, rule;
          function makeFunc(op, right) {
            return function (left, startIndex) {
              return operator.func(
                { left: left, op: op, right: right },
                parser,
                startIndex
              );
            };
          }
          for (_arr = __toArray(parser.assignOperators()), _i = _arr.length; _i--; ) {
            operator = _arr[_i];
            rule = operator.rule;
            op = rule(parser, index);
            if (!op) {
              continue;
            }
            right = ExpressionOrAssignmentOrBody(parser, op.index);
            if (!right) {
              continue;
            }
            return Box(right.index, makeFunc(op.value, right.value));
          }
        }
        function Assignment(parser, index) {
          var left, right;
          left = IdentifierOrAccess(parser, index);
          if (!left) {
            return;
          }
          right = RighthandAssignment(parser, left.index);
          if (!right) {
            return;
          }
          return Box(right.index, right.value(left.value, index));
        }
        CustomOperatorCloseParenthesis = (function () {
          function handleUnaryOperator(operator, parser, index) {
            var close, node, op, result, scope;
            op = operator.rule(parser, index);
            if (!op) {
              return;
            }
            close = CloseParenthesis(parser, op.index);
            if (!close) {
              return;
            }
            node = parser.Ident(index, "x");
            scope = parser.pushScope(true);
            scope.add(node, false, Type.any);
            result = mutateFunction(
              parser.Function(
                index,
                [parser.Param(index, node)],
                operator.func(
                  { op: op.value, node: node },
                  parser,
                  index
                ),
                true
              ),
              parser,
              index
            );
            parser.popScope();
            return Box(close.index, result);
          }
          function handleBinaryOperator(operator, parser, index) {
            var close, invert, inverted, left, op, result, right, scope;
            inverted = false;
            if (operator.invertible) {
              invert = MaybeNotToken(parser, index);
              if (invert.value) {
                inverted = true;
              }
              index = invert.index;
            }
            op = operator.rule(parser, index);
            if (!op) {
              return;
            }
            close = CloseParenthesis(parser, op.index);
            if (!close) {
              return;
            }
            left = parser.Ident(index, "x");
            right = parser.Ident(index, "y");
            scope = parser.pushScope(true);
            scope.add(left, false, Type.any);
            scope.add(right, false, Type.any);
            result = mutateFunction(
              parser.Function(
                index,
                [
                  parser.Param(index, left),
                  parser.Param(index, right)
                ],
                operator.func(
                  { left: left, inverted: inverted, op: op.value, right: right },
                  parser,
                  index
                ),
                true,
                false,
                true
              ),
              parser,
              index
            );
            parser.popScope();
            return Box(close.index, result);
          }
          return function (parser, index) {
            var _arr, _i, _ref, operator;
            for (_arr = __toArray(parser.allBinaryOperators()), _i = _arr.length; _i--; ) {
              operator = _arr[_i];
              if ((_ref = handleBinaryOperator(operator, parser, index)) != null) {
                return _ref;
              }
            }
            for (_arr = __toArray(parser.prefixUnaryOperators()), _i = _arr.length; _i--; ) {
              operator = _arr[_i];
              if ((_ref = handleUnaryOperator(operator, parser, index)) != null) {
                return _ref;
              }
            }
            for (_arr = __toArray(parser.postfixUnaryOperators()), _i = _arr.length; _i--; ) {
              operator = _arr[_i];
              if ((_ref = handleUnaryOperator(operator, parser, index)) != null) {
                return _ref;
              }
            }
          };
        }());
        function CustomBinaryOperator(parser, index) {
          var _arr, _i, currentIndex, invert, inverted, op, operator;
          for (_arr = __toArray(parser.allBinaryOperators()), _i = _arr.length; _i--; ) {
            operator = _arr[_i];
            inverted = false;
            currentIndex = index;
            if (operator.invertible) {
              invert = MaybeNotToken(parser, index);
              if (invert.value) {
                inverted = true;
              }
              currentIndex = invert.index;
            }
            op = operator.rule(parser, currentIndex);
            if (!op) {
              continue;
            }
            return Box(op.index, { op: op.value, operator: operator, inverted: inverted });
          }
        }
        Parenthetical = cache(allowSpaceBeforeAccess(sequential(OpenParenthesis, [
          "this",
          oneOf(
            sequential(
              ["this", AssignmentAsExpression],
              CloseParenthesis
            ),
            (_ref = sequential(
              ["left", Expression],
              ["operator", maybe(CustomBinaryOperator)],
              CloseParenthesis
            ), mutate(function (_p, parser, index) {
              var left, operator, result, right, scope;
              left = _p.left;
              operator = _p.operator;
              if (!operator) {
                return left;
              }
              scope = parser.pushScope(true);
              right = parser.makeTmp(index, "x");
              result = mutateFunction(
                parser.Function(
                  index,
                  [parser.Param(index, right)],
                  operator.operator.func(
                    { left: left.rescope(scope), inverted: operator.inverted, op: operator.op, right: right },
                    parser,
                    index
                  ),
                  true
                ),
                parser,
                index
              );
              parser.popScope();
              return result;
            })(_ref)),
            CustomOperatorCloseParenthesis,
            (_ref = sequential(
              ["operator", CustomBinaryOperator],
              ["right", Expression],
              CloseParenthesis
            ), mutate(function (_p, parser, index) {
              var _p2, inverted, left, op, operator, result, right, scope;
              right = _p.right;
              _p2 = _p.operator;
              op = _p2.op;
              operator = _p2.operator;
              inverted = _p2.inverted;
              scope = parser.pushScope(true);
              left = parser.makeTmp(index, "x");
              result = mutateFunction(
                parser.Function(
                  index,
                  [parser.Param(index, left)],
                  operator.func(
                    { left: left, inverted: inverted, op: op, right: right.rescope(scope) },
                    parser,
                    index
                  ),
                  true
                ),
                parser,
                index
              );
              parser.popScope();
              return result;
            })(_ref)),
            (_ref = sequential(
              [
                "this",
                oneOrMore(function (parser, index) {
                  return InvocationOrAccessPart(parser, index);
                })
              ],
              CloseParenthesis
            ), mutate(function (tail, parser, index) {
              var left, result, scope;
              scope = parser.pushScope(true);
              left = parser.makeTmp(index, "o");
              result = mutateFunction(
                parser.Function(
                  index,
                  [parser.Param(index, left)],
                  convertInvocationOrAccess(
                    false,
                    { type: "normal", existential: false, node: left },
                    tail,
                    parser,
                    index
                  ).rescope(scope),
                  true,
                  false
                ),
                parser,
                index
              );
              parser.popScope();
              return result;
            })(_ref))
          )
        ])));
        CurrentArrayLength = cache(function (parser, index) {
          var asterix;
          if (parser.asterixAsArrayLength.peek()) {
            asterix = AsterixChar(parser, index);
            if (asterix) {
              return Box(asterix.index, parser.Ident(index, "__currentArrayLength"));
            }
          }
        });
        IndentedUnclosedObjectLiteralInner = cache((_ref = separatedList(PropertyOrDualObjectKey, CommaOrSomeEmptyLinesWithCheckIndent), mutate(function (pairs, parser, index) {
          return parser.object(index, pairs);
        })(_ref)));
        UnclosedObjectLiteralsAllowed = cache(function (parser, index) {
          if (!parser.preventUnclosedObjectLiteral.peek()) {
            return Box(index);
          }
        });
        IndentedUnclosedObjectLiteral = cache(sequential(
          UnclosedObjectLiteralsAllowed,
          IndentationRequired,
          Space,
          Newline,
          EmptyLines,
          [
            "this",
            retainIndent(sequential(
              Advance,
              CheckIndent,
              ["this", IndentedUnclosedObjectLiteralInner],
              PopIndent
            ))
          ]
        ));
        UnclosedArrayLiteralElement = sequential(AsterixChar, Space, [
          "this",
          oneOf(
            retainIndent(sequential(PushFakeIndent(2), [
              "this",
              oneOf(
                IndentedUnclosedObjectLiteralInner,
                function (parser, index) {
                  return IndentedUnclosedArrayLiteralInner(parser, index);
                },
                SpreadOrExpression
              )
            ])),
            SpreadOrExpression
          )
        ]);
        IndentedUnclosedArrayLiteralInner = cache((_ref = separatedList(UnclosedArrayLiteralElement, sequential(MaybeComma, SomeEmptyLinesWithCheckIndent)), mutate(function (items, parser, index) {
          return parser.Array(index, items);
        })(_ref)));
        IndentedUnclosedArrayLiteral = cache(sequential(
          UnclosedObjectLiteralsAllowed,
          IndentationRequired,
          Space,
          Newline,
          EmptyLines,
          [
            "this",
            retainIndent(sequential(
              Advance,
              CheckIndent,
              ["this", IndentedUnclosedArrayLiteralInner],
              PopIndent
            ))
          ]
        ));
        inAst = makeAlterStack("inAst", true);
        inEvilAst = makeAlterStack("inEvilAst", true);
        AstExpression = sequential(
          word("ASTE"),
          SHORT_CIRCUIT,
          function (parser, index) {
            if (!parser.inMacro.peek()) {
              throw ParserError("Can only use ASTE inside of a macro", parser, index);
            } else if (parser.inAst.peek()) {
              throw ParserError("Can only use ASTE inside of another AST", parser, index);
            } else {
              return Box(index);
            }
          },
          [
            "this",
            (function () {
              var evilRule, rule;
              rule = inAst(ExpressionOrAssignment);
              evilRule = inEvilAst(rule);
              return function (parser, index) {
                var isEvil;
                isEvil = ExclamationPointChar(parser, index);
                if (isEvil) {
                  return evilRule(parser, isEvil.index);
                } else {
                  return rule(parser, index);
                }
              };
            }())
          ]
        );
        AstStatement = sequential(
          word("AST"),
          SHORT_CIRCUIT,
          function (parser, index) {
            if (!parser.inMacro.peek()) {
              throw ParserError("Can only use AST inside of a macro", parser, index);
            } else if (parser.inAst.peek()) {
              throw ParserError("Can only use AST inside of another AST", parser, index);
            } else {
              return Box(index);
            }
          },
          [
            "this",
            (function () {
              var evilRule, rule;
              rule = inAst(oneOf(Body, Statement));
              evilRule = inEvilAst(rule);
              return function (parser, index) {
                var isEvil;
                isEvil = ExclamationPointChar(parser, index);
                if (isEvil) {
                  return evilRule(parser, isEvil.index);
                } else {
                  return rule(parser, index);
                }
              };
            }())
          ]
        );
        Ast = cache((_ref = oneOf(AstExpression, AstStatement), mutate(function (node, parser, index) {
          return MacroContext.constifyObject(node, index, parser.scope.peek());
        })(_ref)));
        PrimaryExpression = cache(oneOf(
          UnclosedObjectLiteral,
          Literal,
          ArrayLiteral,
          ObjectLiteral,
          SetLiteral,
          MapLiteral,
          Ast,
          Parenthetical,
          FunctionLiteral,
          UseMacro,
          Identifier,
          CurrentArrayLength,
          IndentedUnclosedObjectLiteral,
          IndentedUnclosedArrayLiteral
        ));
        convertInvocationOrAccess = (function () {
          var linkTypes;
          linkTypes = {
            access: (function () {
              var indexTypes;
              indexTypes = {
                multi: function (parser, index, child) {
                  return function (parent) {
                    var result, setParent, tmp, tmpIds;
                    setParent = parent;
                    tmpIds = [];
                    if (parent.cacheable) {
                      tmp = parser.makeTmp(index, "ref", parent.type(parser));
                      tmpIds.push(tmp.id);
                      setParent = parser.Assign(index, tmp, "=", parent.doWrap(parser));
                      parent = tmp;
                    }
                    result = parser.Array(index, (function () {
                      var _arr, _arr2, _len, element, i;
                      for (_arr = [], _arr2 = __toArray(child.elements), i = 0, _len = _arr2.length; i < _len; ++i) {
                        element = _arr2[i];
                        _arr.push(parser.Access(
                          index,
                          i === 0 ? setParent : parent,
                          element
                        ));
                      }
                      return _arr;
                    }()));
                    if (tmpIds.length) {
                      return parser.TmpWrapper(index, result, tmpIds);
                    } else {
                      return result;
                    }
                  };
                }
              };
              return function (parser, index, head, link, linkIndex, links) {
                var bindAccess, child, existentialOp, makeAccess, result, setChild,
                    setHead, tmp, tmpIds;
                if (link.bind) {
                  bindAccess = function (parent, child) {
                    return parser.Call(
                      index,
                      parser.Ident(index, "__bind"),
                      [parent, child]
                    );
                  };
                } else {
                  bindAccess = function (parent, child) {
                    return parser.Access(index, parent, child);
                  };
                }
                if (link.owns) {
                  tmpIds = [];
                  setHead = head;
                  if (head.cacheable) {
                    tmp = parser.makeTmp(index, "ref", head.type(parser));
                    tmpIds.push(tmp.id);
                    setHead = parser.Assign(index, tmp, "=", head.doWrap(parser));
                    head = tmp;
                  }
                  child = link.child;
                  setChild = child;
                  if (child.cacheable) {
                    tmp = parser.makeTmp(index, "ref", child.type(parser));
                    tmpIds.push(tmp.id);
                    setChild = parser.Assign(index, tmp, "=", child.doWrap(parser));
                    child = tmp;
                  }
                  result = parser.If(
                    index,
                    (function () {
                      var existentialOp, ownershipOp;
                      ownershipOp = parser.getMacroByLabel("ownership");
                      if (!ownershipOp) {
                        throw Error("Cannot use ownership access until the ownership operator has been defined");
                      }
                      if (link.existential) {
                        existentialOp = parser.getMacroByLabel("existential");
                        if (!existentialOp) {
                          throw Error("Cannot use existential access until the existential operator has been defined");
                        }
                        return parser.Binary(
                          index,
                          existentialOp.func(
                            { op: "", node: setHead },
                            parser,
                            index
                          ),
                          "&&",
                          ownershipOp.func(
                            { left: head, op: "", right: setChild },
                            parser,
                            index
                          )
                        );
                      } else {
                        return ownershipOp.func(
                          { left: setHead, op: "", right: setChild },
                          parser,
                          index
                        );
                      }
                    }()),
                    convertCallChain(
                      parser,
                      index,
                      bindAccess(head, child),
                      +linkIndex + 1,
                      links
                    )
                  );
                  if (tmpIds.length) {
                    return parser.TmpWrapper(index, result, tmpIds);
                  } else {
                    return result;
                  }
                } else {
                  switch (link.type) {
                  case "access":
                    makeAccess = function (parent) {
                      return bindAccess(parent, link.child);
                    };
                    break;
                  case "accessIndex":
                    if (!__owns.call(indexTypes, link.child.type)) {
                      throw Error("Unknown index type: " + link.child.type);
                    }
                    makeAccess = indexTypes[link.child.type](parser, index, link.child);
                    break;
                  default: throw Error("Unknown link type: " + link.type);
                  }
                  if (link.existential) {
                    tmpIds = [];
                    setHead = head;
                    if (head.cacheable) {
                      tmp = parser.makeTmp(index, "ref", head.type(parser));
                      tmpIds.push(tmp.id);
                      setHead = parser.Assign(index, tmp, "=", head.doWrap(parser));
                      head = tmp;
                    }
                    existentialOp = parser.getMacroByLabel("existential");
                    if (!existentialOp) {
                      throw Error("Cannot use existential access until the existential operator has been defined");
                    }
                    result = parser.If(
                      index,
                      existentialOp.func(
                        { op: "", node: setHead },
                        parser,
                        index
                      ),
                      convertCallChain(
                        parser,
                        index,
                        makeAccess(head),
                        +linkIndex + 1,
                        links
                      )
                    );
                    if (tmpIds.length) {
                      return parser.TmpWrapper(index, result, tmpIds);
                    } else {
                      return result;
                    }
                  } else {
                    return convertCallChain(
                      parser,
                      index,
                      makeAccess(head),
                      +linkIndex + 1,
                      links
                    );
                  }
                }
              };
            }()),
            call: function (parser, index, head, link, linkIndex, links) {
              var child, parent, result, setChild, setHead, setParent, tmp, tmpIds;
              if (!link.existential) {
                return convertCallChain(
                  parser,
                  index,
                  parser.Call(
                    index,
                    head,
                    link.args,
                    link.isNew,
                    link.isApply
                  ),
                  +linkIndex + 1,
                  links
                );
              } else {
                tmpIds = [];
                setHead = head;
                if (head instanceof AccessNode && !link.isApply && !link.isNew) {
                  parent = head.parent;
                  child = head.child;
                  setParent = parent;
                  setChild = child;
                  if (parent.cacheable) {
                    tmp = parser.makeTmp(index, "ref", parent.type(parser));
                    tmpIds.push(tmp.id);
                    setParent = parser.Assign(index, tmp, "=", parent.doWrap(parser));
                    parent = tmp;
                  }
                  if (child.cacheable) {
                    tmp = parser.makeTmp(index, "ref", child.type(parser));
                    tmpIds.push(tmp.id);
                    setChild = parser.Assign(index, tmp, "=", child.doWrap(parser));
                    child = tmp;
                  }
                  if (parent !== setParent || child !== setChild) {
                    setHead = parser.Access(index, setParent, setChild);
                    head = parser.Access(index, parent, child);
                  }
                } else if (head.cacheable) {
                  tmp = parser.makeTmp(index, "ref", head.type(parser));
                  tmpIds.push(tmp.id);
                  setHead = parser.Assign(index, tmp, "=", head.doWrap(parser));
                  head = tmp;
                }
                result = parser.If(
                  index,
                  parser.Binary(
                    index,
                    parser.Unary(index, "typeof", setHead),
                    "===",
                    parser.Const(index, "function")
                  ),
                  convertCallChain(
                    parser,
                    index,
                    parser.Call(
                      index,
                      head,
                      link.args,
                      link.isNew,
                      link.isApply
                    ),
                    +linkIndex + 1,
                    links
                  )
                );
                if (tmpIds.length) {
                  return parser.TmpWrapper(index, result, tmpIds);
                } else {
                  return result;
                }
              }
            }
          };
          linkTypes.accessIndex = linkTypes.access;
          function convertCallChain(parser, index, head, linkIndex, links) {
            var link;
            if (linkIndex >= links.length) {
              return head;
            } else {
              link = links[linkIndex];
              if (!__owns.call(linkTypes, link.type)) {
                throw Error("Unknown call-chain link: " + link.type);
              }
              return linkTypes[link.type](
                parser,
                index,
                head,
                link,
                linkIndex,
                links
              );
            }
          }
          return function (isNew, head, tail, parser, index) {
            var _arr, _i, _len, _ref, links, part;
            if (tail.length === 0 && !isNew && head.type === "normal") {
              return head.node;
            }
            links = [];
            if (head.type === "thisAccess") {
              links.push({ type: "access", child: head.child, existential: head.existential });
            }
            for (_arr = __toArray(tail), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              part = _arr[_i];
              switch (part.type) {
              case "protoAccess":
              case "protoAccessIndex":
                links.push({
                  type: "access",
                  child: parser.Const(index, "prototype"),
                  existential: part.existential
                });
                links.push(((_ref = __import({}, part)).type = part.type === "protoAccess" ? "access" : "accessIndex", _ref));
                break;
              case "access":
              case "accessIndex":
                links.push(part);
                break;
              case "call":
                if (isNew && part.isApply) {
                  throw ParserError("Cannot call with both new and @ at the same time", parser, index);
                }
                links.push(((_ref = __import({}, part)).isNew = isNew, _ref));
                isNew = false;
                break;
              case "generic":
                if (!parser.getConstValue("DISABLE_GENERICS", false)) {
                  links.push({
                    type: "access",
                    child: parser.Const(index, "generic"),
                    existential: false
                  });
                  links.push({ type: "call", args: part.args, existential: false });
                }
                break;
              default: throw Error("Unknown link type: " + part.type);
              }
            }
            if (isNew) {
              links.push({
                type: "call",
                args: [],
                existential: false,
                isNew: true,
                isApply: false
              });
            }
            return convertCallChain(
              parser,
              index,
              head.node,
              0,
              links
            );
          };
        }());
        function EmptyLinesSpaceBeforeAccess(parser, index) {
          if (parser.disallowSpaceBeforeAccess.peek()) {
            return Box(index);
          } else {
            return EmptyLinesSpace(parser, index);
          }
        }
        function SpaceBeforeAccess(parser, index) {
          if (parser.disallowSpaceBeforeAccess.peek()) {
            return Box(index);
          } else {
            return Space(parser, index);
          }
        }
        InvocationOrAccessPart = oneOf(
          (_ref = sequential(
            LessThanChar,
            [
              "this",
              separatedList(
                function (parser, index) {
                  return BasicInvocationOrAccess(parser, index);
                },
                Comma
              )
            ],
            GreaterThan
          ), mutate(function (args) {
            return { type: "generic", args: args };
          })(_ref)),
          (_ref = sequential(
            ["existential", MaybeQuestionMarkChar],
            ["owns", MaybeExclamationPointChar],
            ["bind", MaybeAtSignChar],
            EmptyLinesSpaceBeforeAccess,
            ["type", PeriodOrDoubleColonChar],
            ["child", IdentifierNameConstOrNumberLiteral]
          ), mutate(function (x) {
            return {
              type: x.type === "::" ? "protoAccess" : "access",
              child: x.child,
              existential: x.existential,
              owns: x.owns,
              bind: x.bind
            };
          })(_ref)),
          (_ref = sequential(
            ["existential", MaybeQuestionMarkChar],
            ["owns", MaybeExclamationPointChar],
            ["bind", MaybeAtSignChar],
            ["type", maybe(DoubleColonChar)],
            OpenSquareBracketChar,
            [
              "child",
              allowSpaceBeforeAccess((_ref2 = separatedList(
                makeAlterStack("asterixAsArrayLength", true)(Expression),
                CommaOrNewline
              ), mutate(function (nodes) {
                if (nodes.length > 1) {
                  return { type: "multi", elements: nodes };
                } else {
                  return { type: "single", node: nodes[0] };
                }
              })(_ref2)))
            ],
            CloseSquareBracket
          ), mutate(function (x, parser, index) {
            if (x.child.type === "single") {
              return {
                type: x.type === "::" ? "protoAccess" : "access",
                child: x.child.node,
                existential: x.existential,
                owns: x.owns,
                bind: x.bind
              };
            } else {
              if (x.owns) {
                throw ParserError(
                  "Cannot use ! when using a multiple or slicing index",
                  parser,
                  index
                );
              } else if (x.bind) {
                throw ParserError(
                  "Cannot use @ when using a multiple or slicing index",
                  parser,
                  index
                );
              }
              return {
                type: x.type === "::" ? "protoAccessIndex" : "accessIndex",
                child: x.child,
                existential: x.existential
              };
            }
          })(_ref)),
          (_ref = sequential(
            ["existential", bool(MaybeQuestionMarkChar)],
            ["isApply", bool(MaybeAtSignChar)],
            ["args", InvocationArguments]
          ), mutate(function (x) {
            return {
              type: "call",
              args: x.args,
              existential: x.existential,
              isNew: false,
              isApply: x.isApply
            };
          })(_ref))
        );
        _ref = sequential(
          ["isNew", bool(maybe(word("new")))],
          [
            "head",
            oneOf(
              (_ref2 = sequential(
                ["node", ThisShorthandLiteral],
                ["existential", MaybeQuestionMarkChar],
                ["owns", MaybeExclamationPointChar],
                ["bind", MaybeAtSignChar],
                ["child", IdentifierNameConstOrNumberLiteral]
              ), mutate(function (x, parser, index) {
                return __import({ type: "thisAccess" }, x);
              })(_ref2)),
              mutate(function (node) {
                return { type: "normal", node: node };
              })(PrimaryExpression)
            )
          ],
          ["tail", zeroOrMore(InvocationOrAccessPart)]
        );
        BasicInvocationOrAccess = mutate(function (_p, parser, index) {
          var head, isNew, tail;
          isNew = _p.isNew;
          head = _p.head;
          tail = _p.tail;
          return convertInvocationOrAccess(
            isNew,
            __import({}, head),
            tail,
            parser,
            index
          );
        })(_ref);
        SuperInvocation = cache((_ref = sequential(
          word("super"),
          SHORT_CIRCUIT,
          [
            "child",
            maybe(oneOf(
              sequential(EmptyLines, Space, Period, ["this", IdentifierNameConstOrNumberLiteral]),
              sequential(
                OpenSquareBracketChar,
                ["this", allowSpaceBeforeAccess(Expression)],
                CloseSquareBracket
              )
            ))
          ],
          ["args", InvocationArguments]
        ), mutate(function (_p, parser, index) {
          var args, child;
          child = _p.child;
          args = _p.args;
          return parser.Super(index, child, args);
        })(_ref)));
        Eval = cache((_ref = sequential(word("eval"), SHORT_CIRCUIT, ["this", InvocationArguments]), mutate(function (args, parser, index) {
          if (args.length !== 1) {
            throw ParserError("Expected only one argument to eval, got " + args.length, parser, index);
          }
          return parser.Eval(index, args[0]);
        })(_ref)));
        InvocationOrAccess = cache(oneOf(
          function (parser, index) {
            var args, dollar, inAst;
            inAst = parser.inAst;
            if (!inAst.peek()) {
              return;
            }
            dollar = DollarSign(parser, Space(parser, index).index);
            if (!dollar) {
              return;
            }
            inAst.push(false);
            try {
              args = InvocationArguments(parser, dollar.index);
              if (!args) {
                return;
              }
              return Box(args.index, parser.Call(
                index,
                parser.Ident(index, "$"),
                args.value
              ));
            } finally {
              inAst.pop();
            }
          },
          BasicInvocationOrAccess,
          SuperInvocation,
          Eval
        ));
        inCascade = makeAlterStack("inCascade", true);
        CascadePart = cache(sequential(
          except(SpreadToken),
          Period,
          check(Period),
          ["accesses", zeroOrMore(InvocationOrAccessPart)],
          ["assignment", maybe(inCascade(RighthandAssignment))]
        ));
        CascadePartWithCascade = function (parser, index) {
          return CascadePartWithCascade(parser, index);
        };
        CascadePartWithCascade = cache(sequential(
          ["main", CascadePart],
          [
            "subcascades",
            maybe(
              retainIndent(sequential(
                SomeEmptyLines,
                Advance,
                CheckIndent,
                [
                  "this",
                  separatedList(CascadePartWithCascade, SomeEmptyLinesWithCheckIndent)
                ],
                PopIndent
              )),
              function () {
                return [];
              }
            )
          ]
        ));
        Cascade = cache((_ref = sequential(
          ["head", InvocationOrAccess],
          [
            "tail",
            oneOf(
              function (parser, index) {
                if (parser.inCascade.peek()) {
                  return Box(index, []);
                }
              },
              concat(
                zeroOrMore(sequential(SpaceBeforeAccess, [
                  "this",
                  mutate(function (main) {
                    return { main: main, subcascades: [] };
                  })(CascadePart)
                ])),
                maybe(
                  sequential(
                    IndentationRequired,
                    function (parser, index) {
                      if (!parser.disallowSpaceBeforeAccess.peek()) {
                        return Box(index);
                      }
                    },
                    SomeEmptyLines,
                    [
                      "this",
                      retainIndent(sequential(
                        Advance,
                        CheckIndent,
                        [
                          "this",
                          separatedList(CascadePartWithCascade, SomeEmptyLinesWithCheckIndent)
                        ],
                        PopIndent
                      ))
                    ]
                  ),
                  function () {
                    return [];
                  }
                )
              )
            )
          ]
        ), mutate(function (_p, parser, index) {
          var handle, head, mutateFunctionMacro, tail;
          head = _p.head;
          tail = _p.tail;
          if (tail.length) {
            mutateFunctionMacro = parser.getMacroByLabel("cascade");
            if (!mutateFunctionMacro) {
              throw ParserError(
                "Cannot use cascades until the cascade macro has been defined",
                parser,
                index
              );
            }
            handle = function (head, tail, index) {
              var _this;
              _this = this;
              if (tail.length) {
                return mutateFunctionMacro.func(
                  {
                    op: "",
                    node: parser.Cascade(index, head, (function () {
                      var _arr, _arr2, _f, _i, _len;
                      for (_arr = [], _arr2 = __toArray(tail), _i = 0, _len = _arr2.length, _f = function (_v) {
                        var _ref, accesses, assignment, subcascades;
                        _ref = _v.main;
                        accesses = _ref.accesses;
                        assignment = _ref.assignment;
                        subcascades = _v.subcascades;
                        return function (node) {
                          var access, ret;
                          access = convertInvocationOrAccess(
                            false,
                            { type: "normal", node: node },
                            accesses,
                            parser,
                            index
                          );
                          if (assignment != null) {
                            ret = assignment(access, index);
                          } else {
                            ret = access;
                          }
                          if (subcascades) {
                            return handle(ret, subcascades, index);
                          } else {
                            return ret;
                          }
                        };
                      }; _i < _len; ++_i) {
                        _arr.push(_f.call(_this, _arr2[_i]));
                      }
                      return _arr;
                    }()))
                  },
                  parser,
                  index
                );
              } else {
                return head;
              }
            };
            return handle(head, tail, index);
          } else {
            return head;
          }
        })(_ref)));
        PostfixUnaryOperation = cache(function (parser, index) {
          var _arr, _i, found, node, op, operator, rule;
          node = Cascade(parser, index);
          if (!node) {
            return;
          }
          found = true;
          while (found) {
            found = false;
            for (_arr = __toArray(parser.postfixUnaryOperators()), _i = _arr.length; _i--; ) {
              operator = _arr[_i];
              rule = operator.rule;
              op = rule(parser, node.index);
              if (!op) {
                continue;
              }
              node = Box(op.index, operator.func(
                { op: op.value, node: node.value },
                parser,
                index
              ));
              found = true;
              break;
            }
          }
          return node;
        });
        PrefixUnaryOperation = cache(function (parser, index) {
          var _arr, _i, node, op, operator, rule;
          for (_arr = __toArray(parser.prefixUnaryOperators()), _i = _arr.length; _i--; ) {
            operator = _arr[_i];
            rule = operator.rule;
            op = rule(parser, index);
            if (!op) {
              continue;
            }
            node = PrefixUnaryOperation(parser, op.index);
            if (!node) {
              continue;
            }
            return Box(node.index, operator.func(
              { op: op.value, node: node.value },
              parser,
              index
            ));
          }
          return PostfixUnaryOperation(parser, index);
        });
        BinaryOperationByPrecedence = (function () {
          var precedenceCache;
          precedenceCache = [];
          return function (precedence) {
            return precedenceCache[precedence] || (precedenceCache[precedence] = cache(function (parser, index) {
              var _arr, _i, _i2, _len, currentIndex, head, invert, inverted, j, left,
                  nextRule, node, op, operator, operators, part, result, right, rule,
                  tail;
              operators = parser.binaryOperators(precedence);
              if (!operators) {
                return PrefixUnaryOperation(parser, index);
              }
              nextRule = BinaryOperationByPrecedence(+precedence + 1);
              head = nextRule(parser, index);
              if (!head) {
                return;
              }
              for (_arr = __toArray(operators), _i = _arr.length; _i--; ) {
                operator = _arr[_i];
                rule = operator.rule;
                tail = [];
                currentIndex = head.index;
                while (true) {
                  inverted = false;
                  if (operator.invertible) {
                    invert = MaybeNotToken(parser, currentIndex);
                    if (invert.value) {
                      inverted = true;
                    }
                    currentIndex = invert.index;
                  }
                  op = rule(parser, currentIndex);
                  if (!op) {
                    break;
                  }
                  node = nextRule(parser, op.index);
                  if (!node) {
                    break;
                  }
                  currentIndex = node.index;
                  tail.push({ inverted: inverted, op: op.value, node: node.value });
                  if (operator.maximum && tail.length >= operator.maximum) {
                    break;
                  }
                }
                if (tail.length) {
                  if (!operator.rightToLeft) {
                    left = head.value;
                    for (_i2 = 0, _len = tail.length; _i2 < _len; ++_i2) {
                      part = tail[_i2];
                      left = operator.func(
                        { left: left, inverted: part.inverted, op: part.op, right: part.node },
                        parser,
                        index
                      );
                    }
                    result = left;
                  } else {
                    right = tail[tail.length - 1].node;
                    for (j = tail.length; j--; ) {
                      part = tail[j];
                      right = operator.func(
                        {
                          left: j === 0 ? head.value : tail[j - 1].node,
                          inverted: part.inverted,
                          op: part.op,
                          right: right
                        },
                        parser,
                        index
                      );
                    }
                    result = right;
                  }
                  return Box(currentIndex, result);
                }
              }
              return head;
            }));
          };
        }());
        Logic = cache(BinaryOperationByPrecedence(0));
        ExpressionAsStatement = cache(oneOf(UseMacro, Logic));
        Expression = cache(inExpression(ExpressionAsStatement));
        LicenseComment = cache(sequential(
          SpaceChars,
          [
            "this",
            function (parser, index) {
              var _len, ch, currentIndex, i, indent, l, len, line, lines, result,
                  source;
              source = parser.source;
              if (source.charCodeAt(index) !== 47 || source.charCodeAt(+index + 1) !== 42 || source.charCodeAt(+index + 2) !== 33) {
                return;
              }
              line = [47, 42, 33];
              lines = [line];
              len = source.length;
              currentIndex = +index + 3;
              for (; ; ++currentIndex) {
                if (currentIndex >= len) {
                  throw ParserError("Multi-line license comment never ends", parser, index);
                }
                ch = source.charCodeAt(currentIndex);
                if (ch === 42 && source.charCodeAt(currentIndex + 1) === 47) {
                  line.push(42, 47);
                  result = [];
                  for (i = 0, _len = lines.length; i < _len; ++i) {
                    l = lines[i];
                    if (i > 0) {
                      result.push("\n");
                    }
                    processCharCodes(l, result);
                  }
                  return Box(currentIndex + 2, parser.Comment(index, result.join("")));
                } else if (ch === 13 || ch === 10 || ch === 8232 || ch === 8233) {
                  if (ch === 13 && data.charCodeAt(currentIndex + 1) === 10) {
                    ++currentIndex;
                  }
                  lines.push(line = []);
                  indent = StringIndent(parser, currentIndex + 1);
                  if (!indent) {
                    throw ParserError("Improper indent in multi-line license comment", parser, currentIndex + 1);
                  }
                  currentIndex = indent.index - 1;
                } else {
                  line.push(ch);
                }
              }
            }
          ],
          Space
        ));
        MacroSyntaxParameterType = allowSpaceBeforeAccess((_ref = sequential(
          [
            "type",
            oneOf(
              Identifier,
              StringLiteral,
              (_ref2 = sequential(
                OpenParenthesis,
                EmptyLines,
                [
                  "this",
                  function (parser, index) {
                    return MacroSyntaxParameters(parser, index);
                  }
                ],
                EmptyLines,
                MaybeCommaOrNewline,
                CloseParenthesis
              ), mutate(function (value, parser, index) {
                return parser.SyntaxSequence(index, value);
              })(_ref2)),
              (_ref2 = sequential(
                OpenParenthesis,
                EmptyLines,
                [
                  "this",
                  function (parser, index) {
                    return MacroSyntaxChoiceParameters(parser, index);
                  }
                ],
                EmptyLines,
                CloseParenthesis
              ), mutate(function (value, parser, index) {
                return parser.SyntaxChoice(index, value);
              })(_ref2))
            )
          ],
          [
            "multiplier",
            maybe(oneOf(symbol("?"), symbol("*"), symbol("+")))
          ]
        ), mutate(function (_p, parser, index) {
          var multiplier, type;
          type = _p.type;
          multiplier = _p.multiplier;
          if (multiplier) {
            return parser.SyntaxMany(index, type, multiplier);
          } else {
            return type;
          }
        })(_ref)));
        MacroSyntaxParameter = oneOf(StringLiteral, (_ref = sequential(
          [
            "ident",
            oneOf(ThisOrShorthandLiteral, Identifier)
          ],
          [
            "type",
            maybe(sequential(word("as"), ["this", MacroSyntaxParameterType]))
          ]
        ), mutate(function (_p, parser, index) {
          var ident, type;
          ident = _p.ident;
          type = _p.type;
          return parser.SyntaxParam(index, ident, type);
        })(_ref)));
        MacroSyntaxParameters = separatedList(MacroSyntaxParameter, Comma);
        MacroSyntaxChoiceParameters = separatedList(MacroSyntaxParameterType, Pipe);
        MacroOptions = maybe(
          (_ref = sequential(word("with"), ["this", UnclosedObjectLiteral]), mutate(function (object, parser, index) {
            object = object.reduce(parser);
            if (!object.isLiteral()) {
              throw ParserError(
                "Macro options must be a literal object without any logic, invocation, or anything else",
                parser,
                index
              );
            }
            return object.literalValue();
          })(_ref)),
          function () {
            return {};
          }
        );
        function addMacroSyntaxParametersToScope(params, scope) {
          var _arr, _i, _len, ident, param;
          for (_arr = __toArray(params), _i = 0, _len = _arr.length; _i < _len; ++_i) {
            param = _arr[_i];
            if (param instanceof SyntaxParamNode) {
              ident = param.ident;
              if (ident instanceof IdentNode) {
                scope.add(ident, true, Type.any);
              }
            }
          }
        }
        MacroSyntax = sequential(
          CheckIndent,
          word("syntax"),
          SHORT_CIRCUIT,
          function (parser, index) {
            var body, options, params, scope;
            scope = parser.pushScope(true);
            params = MacroSyntaxParameters(parser, index);
            if (!params) {
              throw SHORT_CIRCUIT;
            }
            options = MacroOptions(parser, params.index);
            parser.startMacroSyntax(index, params.value, options.value);
            addMacroSyntaxParametersToScope(params.value, scope);
            scope.add(
              parser.Ident(index, "macroName"),
              true,
              Type.string
            );
            body = FunctionBody(parser, options.index);
            if (!body) {
              throw SHORT_CIRCUIT;
            }
            parser.macroSyntax(
              index,
              "syntax",
              params.value,
              options.value,
              body.value
            );
            parser.popScope();
            return Box(body.index);
          },
          Space,
          CheckStop
        );
        MacroBody = oneOf(
          sequential(
            function (parser, index) {
              if (parser.options.noindent) {
                return Colon(parser, index);
              } else {
                return Box(index);
              }
            },
            Space,
            Newline,
            EmptyLines,
            retainIndent(sequential(
              function (parser, index) {
                if (parser.options.noindent) {
                  return MaybeAdvance(parser, index);
                } else {
                  return Advance(parser, index);
                }
              },
              separatedList(MacroSyntax, SomeEmptyLines),
              PopIndent
            )),
            End
          ),
          function (parser, index) {
            var _arr, _i, body, options, param, params, scope;
            scope = parser.pushScope(true);
            params = ParameterSequence(parser, index);
            if (!params) {
              throw SHORT_CIRCUIT;
            }
            for (_arr = __toArray(params.value), _i = _arr.length; _i--; ) {
              param = _arr[_i];
              addParamToScope(scope, param, true);
            }
            options = MacroOptions(parser, params.index);
            body = FunctionBody(parser, options.index);
            if (!body) {
              throw SHORT_CIRCUIT;
            }
            parser.macroSyntax(
              index,
              "call",
              params.value,
              options.value,
              body.value
            );
            parser.popScope();
            return Box(body.index, parser.Nothing(index));
          }
        );
        inMacro = makeAlterStack("inMacro", true);
        _DefineMacro = sequential(word("macro"), [
          "this",
          inMacro(function (parser, index) {
            var body, names;
            names = MacroNames(parser, index);
            if (!names) {
              return;
            }
            parser.enterMacro(index, names.value);
            body = MacroBody(parser, names.index);
            parser.exitMacro();
            return Box(body.index, parser.Nothing(index));
          })
        ]);
        DefineSyntax = (function () {
          var topRule;
          topRule = sequential(
            word("define"),
            word("syntax"),
            SHORT_CIRCUIT,
            ["name", Identifier],
            EqualSign,
            ["value", MacroSyntaxParameters]
          );
          return inMacro(function (parser, index) {
            var body, top;
            top = topRule(parser, index);
            if (!top) {
              return;
            }
            body = FunctionBody(parser, top.index);
            parser.defineSyntax(index, top.value.name.name, top.value.value, body != null ? body.value : void 0);
            return Box(
              body ? body.index : top.index,
              parser.Nothing(index)
            );
          });
        }());
        _ref = sequential(
          word("define"),
          word("helper"),
          SHORT_CIRCUIT,
          ["name", Identifier],
          [
            "value",
            oneOf(
              sequential(EqualSign, ["this", Expression]),
              FunctionDeclaration
            )
          ]
        );
        DefineHelper = mutate(function (_p, parser, index) {
          var name, value;
          name = _p.name;
          value = _p.value;
          parser.defineHelper(index, name, value);
          return parser.Nothing(index);
        })(_ref);
        DefineOperator = (function () {
          var mainRule;
          mainRule = sequential(
            word("define"),
            word("operator"),
            SHORT_CIRCUIT,
            [
              "type",
              oneOf(word("binary"), word("assign"), word("unary"))
            ],
            [
              "ops",
              separatedList(NameOrSymbol, Comma)
            ],
            ["options", MacroOptions]
          );
          return inMacro(function (parser, index) {
            var _ref, body, ops, options, ret, scope, type, x;
            x = mainRule(parser, index);
            if (!x) {
              return;
            }
            _ref = x.value;
            type = _ref.type;
            ops = _ref.ops;
            options = _ref.options;
            scope = parser.pushScope(true);
            switch (type) {
            case "binary":
            case "assign":
              scope.add(
                parser.Ident(index, "left"),
                true,
                Type.any
              );
              scope.add(
                parser.Ident(index, "op"),
                true,
                Type.string
              );
              scope.add(
                parser.Ident(index, "right"),
                true,
                Type.any
              );
              break;
            case "unary":
              scope.add(
                parser.Ident(index, "op"),
                true,
                Type.string
              );
              scope.add(
                parser.Ident(index, "node"),
                true,
                Type.any
              );
              break;
            default: throw Error("Unhandled value in switch");
            }
            body = FunctionBody(parser, x.index);
            if (!body) {
              throw SHORT_CIRCUIT;
            }
            switch (type) {
            case "binary":
              ret = parser.defineBinaryOperator(index, ops, options, body.value);
              break;
            case "assign":
              ret = parser.defineAssignOperator(index, ops, options, body.value);
              break;
            case "unary":
              ret = parser.defineUnaryOperator(index, ops, options, body.value);
              break;
            default: throw Error();
            }
            parser.popScope();
            return Box(body.index, parser.Nothing(index));
          });
        }());
        DefineMacro = cache(oneOf(_DefineMacro, DefineSyntax, DefineHelper, DefineOperator));
        _ref = sequential(
          word("const"),
          SHORT_CIRCUIT,
          ["name", Name],
          EqualSign,
          ["value", Expression]
        );
        DefineConstLiteral = mutate(function (_p, parser, index) {
          var name, value;
          name = _p.name;
          value = _p.value;
          value = parser.macroExpandAll(value.reduce(parser));
          if (!value.isLiteral()) {
            throw ParserError("const value must be a literal.", this, index);
          }
          parser.defineConst(index, name, value.literalValue());
          return parser.Nothing(index);
        })(_ref);
        Statement = cache(sequential(
          [
            "this",
            inStatement(oneOf(
              LicenseComment,
              DefineMacro,
              DefineConstLiteral,
              Assignment,
              ExpressionAsStatement
            ))
          ],
          Space
        ));
        function unprettyText(text) {
          return text.replace(/\s+/g, " ");
        }
        function EmbeddedReadLiteralText(parser, index) {
          var c, codes, currentIndex, len, source, text;
          source = parser.source;
          len = source.length;
          currentIndex = index;
          codes = [];
          for (; currentIndex < len; ++currentIndex) {
            if (EmbeddedOpen(parser, currentIndex) || EmbeddedOpenWrite(parser, currentIndex) || EmbeddedOpenComment(parser, currentIndex)) {
              break;
            }
            c = source.charCodeAt(currentIndex);
            if (c === 13 && source.charCodeAt(currentIndex + 1) === 10) {
              c = 10;
              ++currentIndex;
            }
            codes.push(c);
          }
          if (currentIndex === index) {
            return;
          }
          text = codesToString(codes);
          if (parser.options.embeddedUnpretty) {
            text = unprettyText(text);
          }
          return Box(currentIndex, parser.EmbedWrite(
            index,
            parser.Const(index, text),
            false
          ));
        }
        makeEmbeddedRule = (function () {
          var rules;
          function make(text) {
            var _arr, codes, i, len;
            len = text.length;
            for (_arr = [], i = 0; i < len; ++i) {
              _arr.push(text.charCodeAt(i));
            }
            codes = _arr;
            return function (parser, index) {
              var i, source;
              source = parser.source;
              for (i = 0; i < len; ++i) {
                if (source.charCodeAt(+index + i) !== codes[i]) {
                  return;
                }
              }
              return Box(+index + len, text);
            };
          }
          rules = __create(null);
          function getEmbeddedRule(text) {
            return rules[text] || (rules[text] = make(text));
          }
          return function (key, defaultValue) {
            return function (parser, index) {
              var text;
              text = parser.options[key];
              if (typeof text !== "string") {
                text = defaultValue;
              }
              return getEmbeddedRule(text)(parser, index);
            };
          };
        }());
        EmbeddedOpenComment = cache(makeEmbeddedRule("embeddedOpenComment", "<%--"));
        EmbeddedCloseComment = makeEmbeddedRule("embeddedCloseComment", "--%>");
        function EmbeddedComment(parser, index) {
          var any, close, currentIndex, len, open;
          open = EmbeddedOpenComment(parser, index);
          if (!open) {
            return;
          }
          currentIndex = open.index;
          len = parser.source.length;
          while (currentIndex < len) {
            close = EmbeddedCloseComment(parser, currentIndex);
            if (close) {
              currentIndex = close.index;
              break;
            }
            any = AnyChar(parser, currentIndex);
            if (!any) {
              break;
            }
            if (currentIndex === any.index) {
              throw Error("Infinite loop detected");
            }
            currentIndex = any.index;
          }
          return Box(currentIndex, parser.Nothing(index));
        }
        EmbeddedOpen = cache(makeEmbeddedRule("embeddedOpen", "<%"));
        EmbeddedClose = cache(sequential(EmptyLines, Space, oneOf(Eof, makeEmbeddedRule("embeddedClose", "%>"))));
        EmbeddedOpenWrite = cache(makeEmbeddedRule("embeddedOpenWrite", "<%="));
        EmbeddedCloseWrite = cache(sequential(EmptyLines, Space, oneOf(Eof, makeEmbeddedRule("embeddedCloseWrite", "%>"))));
        ColonEmbeddedClose = cache(sequential(Colon, EmbeddedClose));
        ColonEmbeddedCloseWrite = cache(sequential(Colon, EmbeddedCloseWrite));
        NotEmbeddedOpenComment = cache(except(EmbeddedOpenComment));
        NotEmbeddedOpenWrite = cache(except(EmbeddedOpenWrite));
        disallowEmbeddedText = makeAlterStack("allowEmbeddedText", false);
        EmbeddedWriteExpression = disallowEmbeddedText((_ref = sequential(
          NotEmbeddedOpenComment,
          EmbeddedOpenWrite,
          ["this", Expression],
          EmbeddedCloseWrite
        ), mutate(function (node, parser, index) {
          return parser.EmbedWrite(index, node, true);
        })(_ref)));
        EmbeddedLiteralTextInnerPart = oneOf(EmbeddedComment, EmbeddedWriteExpression, EmbeddedReadLiteralText);
        EmbeddedLiteralText = cache((_ref = sequential(
          function (parser, index) {
            if (parser.options.embedded && parser.allowEmbeddedText.peek() && index < parser.source.length) {
              return Box(index);
            }
          },
          EmbeddedClose,
          ["this", zeroOrMore(EmbeddedLiteralTextInnerPart)],
          oneOf(Eof, sequential(NotEmbeddedOpenComment, NotEmbeddedOpenWrite, EmbeddedOpen))
        ), mutate(function (nodes, parser, index) {
          return parser.Block(index, nodes);
        })(_ref)));
        Semicolon = cache(withSpace(SemicolonChar));
        Semicolons = cache(zeroOrMore(Semicolon, true));
        Line = cache((function () {
          var SemicolonsStatement;
          SemicolonsStatement = sequential(Semicolons, ["this", Statement]);
          return function (parser, index) {
            var currentIndex, endSemis, indent, needSemicolon, parts, ret;
            indent = CheckIndent(parser, index);
            if (!indent) {
              return;
            }
            currentIndex = index;
            parts = [];
            needSemicolon = false;
            while (true) {
              ret = EmbeddedLiteralText(parser, currentIndex);
              if (ret) {
                needSemicolon = false;
                parts.push(ret.value);
                currentIndex = ret.index;
              } else {
                if (needSemicolon) {
                  ret = SemicolonsStatement(parser, currentIndex);
                } else {
                  ret = Statement(parser, currentIndex);
                }
                if (ret) {
                  needSemicolon = true;
                  parts.push(ret.value);
                  currentIndex = ret.index;
                } else {
                  break;
                }
              }
            }
            if (parts.length === 0) {
              return;
            }
            endSemis = Semicolons(parser, currentIndex);
            if (endSemis) {
              currentIndex = endSemis.index;
            }
            return Box(currentIndex, parts);
          };
        }()));
        function _BlockMutator(lines, parser, index) {
          var _arr, _arr2, _len, _len2, i, item, j, nodes, part;
          nodes = [];
          for (_arr = __toArray(lines), i = 0, _len = _arr.length; i < _len; ++i) {
            item = _arr[i];
            for (_arr2 = __toArray(item), j = 0, _len2 = _arr2.length; j < _len2; ++j) {
              part = _arr2[j];
              if (!(part instanceof Node)) {
                throw TypeError("Expected lines[" + i + "][" + j + "] to be a Node, got " + __typeof(part));
              } else if (part instanceof BlockNode && item.label == null) {
                nodes.push.apply(nodes, __toArray(part.nodes));
              } else if (!(part instanceof NothingNode)) {
                nodes.push(part);
              }
            }
          }
          switch (nodes.length) {
          case 0: return parser.Nothing(index);
          case 1: return nodes[0];
          default:
            return parser.Block(index, nodes);
          }
        }
        RootInnerP = __promise(function (parser, index) {
          var _e, _send, _state, _step, _throw, currentIndex, head, item, result,
              separator;
          _state = 0;
          function _close() {
            _state = 9;
          }
          function _step(_received) {
            while (true) {
              switch (_state) {
              case 0:
                parser.clearCache();
                head = Line(parser, index);
                _state = !head ? 9 : 1;
                break;
              case 1:
                result = [head.value];
                currentIndex = head.index;
                ++_state;
              case 2: ++_state;
              case 3:
                parser.clearCache();
                _state = !parser.options.sync ? 4 : 5;
                break;
              case 4:
                ++_state;
                return { done: false, value: __defer.fulfilled(void 0) };
              case 5:
                separator = SomeEmptyLines(parser, currentIndex);
                _state = !separator ? 8 : 6;
                break;
              case 6:
                item = Line(parser, separator.index);
                _state = !item ? 8 : 7;
                break;
              case 7:
                currentIndex = item.index;
                result.push(item.value);
                _state = 2;
                break;
              case 8:
                parser.clearCache();
                ++_state;
                return {
                  done: true,
                  value: Box(currentIndex, _BlockMutator(result, parser, index))
                };
              case 9:
                return { done: true, value: void 0 };
              default: throw Error("Unknown state: " + _state);
              }
            }
          }
          function _throw(_e) {
            _close();
            throw _e;
          }
          function _send(_received) {
            try {
              return _step(_received);
            } catch (_e) {
              _throw(_e);
            }
          }
          return {
            close: _close,
            iterator: function () {
              return this;
            },
            next: function () {
              return _send(void 0);
            },
            send: _send,
            "throw": function (_e) {
              _throw(_e);
              return _send(void 0);
            }
          };
        });
        _Block = mutate(_BlockMutator, separatedList(Line, SomeEmptyLines));
        Block = oneOf(
          sequential(CheckIndent, [
            "this",
            oneOf(IndentedUnclosedObjectLiteralInner, IndentedUnclosedArrayLiteralInner)
          ]),
          _Block
        );
        EmbeddedBlock = sequential(
          NotEmbeddedOpenWrite,
          NotEmbeddedOpenComment,
          EmbeddedOpen,
          ["this", _Block],
          EmbeddedClose
        );
        EmbeddedLiteralTextInnerPartWithBlock = oneOf(EmbeddedLiteralTextInnerPart, EmbeddedBlock);
        EmbeddedRootInnerP = __promise(function (parser, index) {
          var _e, _send, _state, _step, _throw, currentIndex, item, nodes;
          _state = 0;
          function _close() {
            _state = 7;
          }
          function _step(_received) {
            while (true) {
              switch (_state) {
              case 0:
                nodes = [];
                currentIndex = index;
                ++_state;
              case 1: ++_state;
              case 2:
                parser.clearCache();
                _state = !parser.options.sync ? 3 : 4;
                break;
              case 3:
                ++_state;
                return { done: false, value: __defer.fulfilled(void 0) };
              case 4:
                item = EmbeddedLiteralTextInnerPartWithBlock(parser, currentIndex);
                _state = !item ? 6 : 5;
                break;
              case 5:
                nodes.push(item.value);
                if (currentIndex === item.index) {
                  throw Error("Infinite loop detected");
                }
                currentIndex = item.index;
                _state = 1;
                break;
              case 6:
                parser.clearCache();
                ++_state;
                return {
                  done: true,
                  value: Box(currentIndex, parser.Block(index, nodes))
                };
              case 7:
                return { done: true, value: void 0 };
              default: throw Error("Unknown state: " + _state);
              }
            }
          }
          function _throw(_e) {
            _close();
            throw _e;
          }
          function _send(_received) {
            try {
              return _step(_received);
            } catch (_e) {
              _throw(_e);
            }
          }
          return {
            close: _close,
            iterator: function () {
              return this;
            },
            next: function () {
              return _send(void 0);
            },
            send: _send,
            "throw": function (_e) {
              _throw(_e);
              return _send(void 0);
            }
          };
        });
        EndNoIndent = sequential(EmptyLines, Space, maybe(Semicolons), word("end"));
        BodyWithIndent = retainIndent(sequential(
          Space,
          Newline,
          EmptyLines,
          Advance,
          ["this", Block],
          PopIndent
        ));
        BodyNoIndentNoEnd = sequential(
          function (parser, index) {
            if (ColonNewline(parser, index) || parser.options.embedded && (ColonEmbeddedClose(parser, index) || ColonEmbeddedCloseWrite(parser, index))) {
              return Box(index);
            }
          },
          Colon,
          EmptyLines,
          [
            "this",
            function (parser, index) {
              var indent;
              indent = parser.indent;
              indent.push(+indent.peek() + 1);
              try {
                return Block(parser, index);
              } finally {
                indent.pop();
              }
            }
          ]
        );
        BodyNoIndent = sequential(
          ["this", BodyNoIndentNoEnd],
          EndNoIndent
        );
        Body = cache(function (parser, index) {
          var ret, scope;
          scope = parser.pushScope(true);
          if (parser.options.noindent) {
            ret = BodyNoIndent(parser, index);
          } else {
            ret = BodyWithIndent(parser, index);
          }
          parser.popScope();
          return ret;
        });
        BodyNoEnd = cache(function (parser, index) {
          var ret, scope;
          scope = parser.pushScope(true);
          if (parser.options.noindent) {
            ret = BodyNoIndentNoEnd(parser, index);
          } else {
            ret = BodyWithIndent(parser, index);
          }
          parser.popScope();
          return ret;
        });
        BOM = maybe(character('"\ufeff"', 65279));
        Shebang = maybe(sequential(HashSignChar, ExclamationPointChar, zeroOrMore(anyExcept(Newline))));
        Imports = maybe(
          separatedList(
            (_ref = sequential(word("import"), Space, ["this", SingleStringLiteral]), mutate(function (x, parser, index) {
              if (!x.isConst() || typeof x.constValue() !== "string") {
                throw ParserError("Expected a string literal in import statement", parser, index);
              }
              return x.constValue();
            })(_ref)),
            SomeEmptyLines
          ),
          function () {
            return [];
          }
        );
        RootP = __promise(function (parser) {
          var _arr, _e, _i, _len, _send, _state, _step, _throw, bom, empty,
              emptyAgain, endSpace, importFile, imports, root, shebang;
          _state = 0;
          function _close() {
            _state = 14;
          }
          function _step(_received) {
            while (true) {
              switch (_state) {
              case 0:
                bom = BOM(parser, 0);
                shebang = Shebang(parser, bom.index);
                empty = EmptyLines(parser, shebang.index);
                imports = Imports(parser, empty.index);
                if (imports.value.length && !parser.options.filename) {
                  throw ParserError(
                    "Cannot use the import statement if not compiling from a file",
                    parser,
                    empty.index
                  );
                }
                empty = EmptyLines(parser, imports.index);
                _state = Eof(parser, empty.index) ? 1 : 2;
                break;
              case 1:
                _state = 14;
                return {
                  done: true,
                  value: Box(empty.index, parser.Root(empty.index, parser.options.filename, parser.Nothing(empty.index)))
                };
              case 2:
                _arr = __toArray(imports.value);
                _i = 0;
                _len = _arr.length;
                ++_state;
              case 3:
                _state = _i < _len ? 4 : 8;
                break;
              case 4:
                importFile = _arr[_i];
                parser.clearCache();
                _state = parser.options.sync ? 5 : 6;
                break;
              case 5:
                parser.importSync(importFile, imports.index);
                _state = 7;
                break;
              case 6:
                ++_state;
                return {
                  done: false,
                  value: parser["import"](importFile, imports.index)
                };
              case 7:
                ++_i;
                _state = 3;
                break;
              case 8:
                parser.clearCache();
                _state = parser.options.sync ? 9 : 10;
                break;
              case 9:
                root = RootInnerP.sync(parser, empty.index);
                _state = 12;
                break;
              case 10:
                ++_state;
                return {
                  done: false,
                  value: RootInnerP(parser, empty.index)
                };
              case 11:
                root = _received;
                ++_state;
              case 12:
                parser.clearCache();
                _state = !root ? 14 : 13;
                break;
              case 13:
                emptyAgain = EmptyLines(parser, root.index);
                endSpace = Space(parser, emptyAgain.index);
                parser.clearCache();
                ++_state;
                return {
                  done: true,
                  value: Box(endSpace.index, parser.Root(empty.index, parser.options.filename, root.value))
                };
              case 14:
                return { done: true, value: void 0 };
              default: throw Error("Unknown state: " + _state);
              }
            }
          }
          function _throw(_e) {
            _close();
            throw _e;
          }
          function _send(_received) {
            try {
              return _step(_received);
            } catch (_e) {
              _throw(_e);
            }
          }
          return {
            close: _close,
            iterator: function () {
              return this;
            },
            next: function () {
              return _send(void 0);
            },
            send: _send,
            "throw": function (_e) {
              _throw(_e);
              return _send(void 0);
            }
          };
        });
        EmbeddedRootP = __promise(function (parser) {
          var _e, _send, _state, _step, _throw, bom, root, shebang;
          _state = 0;
          function _close() {
            _state = 6;
          }
          function _step(_received) {
            while (true) {
              switch (_state) {
              case 0:
                bom = BOM(parser, 0);
                shebang = Shebang(parser, bom.index);
                parser.clearCache();
                _state = parser.options.sync ? 1 : 2;
                break;
              case 1:
                root = EmbeddedRootInnerP.sync(parser, shebang.index);
                _state = 4;
                break;
              case 2:
                ++_state;
                return {
                  done: false,
                  value: EmbeddedRootInnerP(parser, shebang.index)
                };
              case 3:
                root = _received;
                ++_state;
              case 4:
                parser.clearCache();
                _state = !root ? 6 : 5;
                break;
              case 5:
                ++_state;
                return {
                  done: true,
                  value: Box(root.index, parser.Root(
                    0,
                    parser.options.filename,
                    root.value,
                    true,
                    parser.inGenerator.peek()
                  ))
                };
              case 6:
                return { done: true, value: void 0 };
              default: throw Error("Unknown state: " + _state);
              }
            }
          }
          function _throw(_e) {
            _close();
            throw _e;
          }
          function _send(_received) {
            try {
              return _step(_received);
            } catch (_e) {
              _throw(_e);
            }
          }
          return {
            close: _close,
            iterator: function () {
              return this;
            },
            next: function () {
              return _send(void 0);
            },
            send: _send,
            "throw": function (_e) {
              _throw(_e);
              return _send(void 0);
            }
          };
        });
        EmbeddedRootGeneratorP = __promise(function (parser) {
          var _e, _send, _state, _step, _throw, result;
          _state = 0;
          function _close() {
            _state = 5;
          }
          function _step(_received) {
            while (true) {
              switch (_state) {
              case 0:
                parser.inGenerator.push(true);
                _state = parser.options.sync ? 1 : 2;
                break;
              case 1:
                result = EmbeddedRootP.sync(parser);
                _state = 4;
                break;
              case 2:
                ++_state;
                return { done: false, value: EmbeddedRootP(parser) };
              case 3:
                result = _received;
                ++_state;
              case 4:
                parser.inGenerator.pop();
                ++_state;
                return { done: true, value: result };
              case 5:
                return { done: true, value: void 0 };
              default: throw Error("Unknown state: " + _state);
              }
            }
          }
          function _throw(_e) {
            _close();
            throw _e;
          }
          function _send(_received) {
            try {
              return _step(_received);
            } catch (_e) {
              _throw(_e);
            }
          }
          return {
            close: _close,
            iterator: function () {
              return this;
            },
            next: function () {
              return _send(void 0);
            },
            send: _send,
            "throw": function (_e) {
              _throw(_e);
              return _send(void 0);
            }
          };
        });
        AnyObjectLiteral = cache(oneOf(UnclosedObjectLiteral, ObjectLiteral, IndentedUnclosedObjectLiteral));
        AnyArrayLiteral = cache(oneOf(ArrayLiteral, IndentedUnclosedArrayLiteral));
        DedentedBody = cache(withSpace(oneOf(
          sequential(Newline, EmptyLines, ["this", Block]),
          sequential(
            function (parser, index) {
              if (parser.options.embedded) {
                return Box(index);
              }
            },
            check(EmbeddedClose),
            EmptyLines,
            ["this", Block]
          ),
          Nothing
        )));
        Stack = (function () {
          var _Stack_prototype;
          function Stack(initial) {
            var _this;
            _this = this instanceof Stack ? this : __create(_Stack_prototype);
            _this.initial = initial;
            _this.data = [];
            return _this;
          }
          _Stack_prototype = Stack.prototype;
          Stack.displayName = "Stack";
          _Stack_prototype.count = function () {
            return this.data.length;
          };
          _Stack_prototype.push = function (value) {
            this.data.push(value);
          };
          _Stack_prototype.pop = function () {
            var data;
            data = this.data;
            if (data.length === 0) {
              throw Error("Cannot pop");
            }
            return data.pop();
          };
          _Stack_prototype.canPop = function () {
            return this.data.length > 0;
          };
          _Stack_prototype.peek = function () {
            var data, len;
            data = this.data;
            len = data.length;
            if (len === 0) {
              return this.initial;
            } else {
              return data[len - 1];
            }
          };
          return Stack;
        }());
        function makeMacroHolder() {
          return MacroHolder(
            {
              Logic: preventUnclosedObjectLiteral(Logic),
              Expression: Expression,
              Assignment: Assignment,
              ExpressionOrAssignment: ExpressionOrAssignment,
              ExpressionOrAssignmentOrBody: ExpressionOrAssignmentOrBody,
              FunctionDeclaration: FunctionDeclaration,
              Statement: Statement,
              Body: Body,
              BodyNoEnd: BodyNoEnd,
              GeneratorBody: GeneratorBody,
              GeneratorBodyNoEnd: GeneratorBodyNoEnd,
              End: End,
              Identifier: Identifier,
              SimpleAssignable: IdentifierOrSimpleAccess,
              Parameter: Parameter,
              InvocationArguments: InvocationArguments,
              ObjectLiteral: AnyObjectLiteral,
              ArrayLiteral: AnyArrayLiteral,
              DedentedBody: DedentedBody,
              ObjectKey: ObjectKey,
              Type: TypeReference,
              NoSpace: NoSpace,
              ColonEqual: ColonEqual
            },
            macroName,
            wordOrSymbol,
            oneOf,
            sequential
          );
        }
        Parser = (function () {
          var _Parser_prototype, ASSIGN_OPERATOR, BINARY_OPERATOR, DEFINE_SYNTAX,
              deserializeParams, deserializeParamType, macroDeserializers,
              macroSyntaxConstLiterals, macroSyntaxTypes, UNARY_OPERATOR;
          function Parser(source, macros, options) {
            var _this;
            _this = this instanceof Parser ? this : __create(_Parser_prototype);
            if (source == null) {
              source = "";
            }
            _this.source = source;
            if (macros == null) {
              macros = makeMacroHolder();
            }
            _this.macros = macros;
            if (options == null) {
              options = {};
            }
            _this.options = options;
            _this.indent = Stack(0);
            _this.position = Stack("statement");
            _this.inAst = Stack(false);
            _this.inGenerator = Stack(false);
            _this.inFunctionTypeParams = Stack(false);
            _this.preventUnclosedObjectLiteral = Stack(false);
            _this.allowEmbeddedText = Stack(true);
            _this.inMacro = Stack(false);
            _this.inAst = Stack(false);
            _this.inEvilAst = Stack(false);
            _this.asterixAsArrayLength = Stack(false);
            _this.disallowSpaceBeforeAccess = Stack(false);
            _this.inCascade = Stack(false);
            _this.requireParameterSequence = Stack(false);
            _this.scope = Stack(Scope(null, true));
            _this.failureMessages = [];
            _this.failureIndex = -1;
            _this.calculateLineInfo();
            _this.cache = [];
            _this.currentTmpId = -1;
            return _this;
          }
          _Parser_prototype = Parser.prototype;
          Parser.displayName = "Parser";
          _Parser_prototype.buildError = function (message, node) {
            var index;
            if (typeof node === "number") {
              index = node;
            } else {
              index = node.index;
            }
            return MacroError(message, this, index);
          };
          _Parser_prototype.makeTmp = function (index, name, type) {
            if (type == null) {
              type = Type.any;
            }
            return this.Tmp(index, ++this.currentTmpId, name, type);
          };
          function makeGetPosition(lineInfo) {
            return function (index) {
              var current, i, left, right;
              left = 0;
              right = lineInfo.length;
              while (left !== right) {
                i = Math.floor((left + right) / 2);
                current = lineInfo[i];
                if (current > index) {
                  right = i;
                } else if (current < index) {
                  if (left === i) {
                    break;
                  }
                  left = i;
                } else {
                  left = i;
                  break;
                }
              }
              return { line: left + 1, column: index - lineInfo[left] + 1 };
            };
          }
          _Parser_prototype.calculateLineInfo = function () {
            var index, lineInfo, match, newlineRegex, source;
            newlineRegex = /(?:\r\n?|[\n\u2028\u2029])/g;
            source = this.source;
            lineInfo = this.lineInfo = [];
            index = 0;
            lineInfo.push(0);
            while (true) {
              match = newlineRegex.exec(source);
              if (!match) {
                break;
              }
              index = +match.index + +match[0].length;
              lineInfo.push(index);
            }
            this.getPosition = makeGetPosition(lineInfo);
          };
          _Parser_prototype.indexFromPosition = function (line, column) {
            var lineInfo;
            lineInfo = this.lineInfo[line - 1];
            if (lineInfo != null) {
              return +lineInfo + column - 1;
            } else {
              return 0;
            }
          };
          _Parser_prototype.getPosition = function (index) {
            throw Error("line-info not initialized");
          };
          _Parser_prototype.getLine = function (index) {
            if (index == null) {
              index = this.index;
            }
            return this.getPosition(index).line;
          };
          _Parser_prototype.getColumn = function (index) {
            if (index == null) {
              index = this.index;
            }
            return this.getPosition(index).column;
          };
          _Parser_prototype.fail = function (message, index) {
            if (index > this.failureIndex) {
              this.failureMessages = [];
              this.failureIndex = index;
            }
            if (index >= this.failureIndex) {
              this.failureMessages.push(message);
            }
          };
          function buildExpected(messages) {
            var errors;
            errors = unique(messages).sort(function (a, b) {
              return __cmp(a.toLowerCase(), b.toLowerCase());
            });
            switch (errors.length) {
            case 0: return "End of input";
            case 1: return errors[0];
            case 2: return errors[0] + " or " + errors[1];
            default:
              return __slice.call(errors, 0, -1).join(", ") + ", or " + errors[errors.length - 1];
            }
          }
          _Parser_prototype.getFailure = function (index) {
            var lastToken, source;
            if (index == null) {
              index = this.failureIndex;
            }
            source = this.source;
            if (index < source.length) {
              lastToken = JSON.stringify(source.substring(index, index + 20));
            } else {
              lastToken = "end-of-input";
            }
            return ParserError("Expected " + buildExpected(this.failureMessages) + ", but " + lastToken + " found", this, index);
          };
          _Parser_prototype["import"] = __promise(function (filename, index) {
            var _e, _send, _state, _step, _this, _throw, fs, fullFilename,
                parseOptions, path, result, source;
            _this = this;
            _state = 0;
            function _close() {
              _state = 9;
            }
            function _step(_received) {
              while (true) {
                switch (_state) {
                case 0:
                  fs = require("fs");
                  path = require("path");
                  if (typeof _this.options.filename !== "string") {
                    throw ParserError(
                      "Cannot import if the filename option is not provided",
                      _this,
                      index
                    );
                  }
                  fullFilename = path.resolve(path.dirname(_this.options.filename), filename);
                  _state = _this.options.sync ? 1 : 2;
                  break;
                case 1:
                  source = fs.readFileSync(fullFilename, "utf8");
                  _state = 4;
                  break;
                case 2:
                  ++_state;
                  return {
                    done: false,
                    value: __toPromise(fs.readFile, fs, [fullFilename, "utf8"])
                  };
                case 3:
                  source = _received;
                  ++_state;
                case 4:
                  parseOptions = { filename: fullFilename, noindent: _this.options.noindent, sync: _this.options.sync };
                  _state = _this.options.sync ? 5 : 6;
                  break;
                case 5:
                  result = parse.sync(source, _this.macros, parseOptions);
                  _state = 8;
                  break;
                case 6:
                  ++_state;
                  return {
                    done: false,
                    value: parse(source, _this.macros, parseOptions)
                  };
                case 7:
                  result = _received;
                  ++_state;
                case 8:
                  _this.macros = result.macros;
                  ++_state;
                case 9:
                  return { done: true, value: void 0 };
                default: throw Error("Unknown state: " + _state);
                }
              }
            }
            function _throw(_e) {
              _close();
              throw _e;
            }
            function _send(_received) {
              try {
                return _step(_received);
              } catch (_e) {
                _throw(_e);
              }
            }
            return {
              close: _close,
              iterator: function () {
                return this;
              },
              next: function () {
                return _send(void 0);
              },
              send: _send,
              "throw": function (_e) {
                _throw(_e);
                return _send(void 0);
              }
            };
          });
          _Parser_prototype.importSync = function (filename, index) {
            if (!this.options.sync) {
              throw Error("Expected options.sync to be true");
            }
            return this["import"].sync.call(this, filename, index);
          };
          _Parser_prototype.pushScope = function (isTop, parent) {
            var scope;
            if (isTop == null) {
              isTop = false;
            }
            if (parent == null) {
              parent = null;
            }
            scope = (parent || this.scope.peek()).clone(isTop);
            this.scope.push(scope);
            return scope;
          };
          _Parser_prototype.popScope = function () {
            this.scope.pop();
          };
          _Parser_prototype.getPackageVersion = function () {
            var _ref;
            if ((_ref = this._packageVersion) == null) {
              return this._packageVersion = getPackageVersion(this.options.filename);
            } else {
              return _ref;
            }
          };
          _Parser_prototype.hasMacroOrOperator = function (name) {
            return this.macros.hasMacroOrOperator(name);
          };
          _Parser_prototype.assignOperators = function () {
            return this.macros.assignOperators;
          };
          _Parser_prototype.allBinaryOperators = function () {
            return this.macros.allBinaryOperators();
          };
          _Parser_prototype.binaryOperators = function (precedence) {
            return this.macros.binaryOperators[precedence];
          };
          _Parser_prototype.prefixUnaryOperators = function () {
            return this.macros.prefixUnaryOperators;
          };
          _Parser_prototype.postfixUnaryOperators = function () {
            return this.macros.postfixUnaryOperators;
          };
          _Parser_prototype.getMacroByName = function (name) {
            return this.macros.getByName(name);
          };
          _Parser_prototype.getMacroByLabel = function (label) {
            return this.macros.getByLabel(label);
          };
          _Parser_prototype.enterMacro = function (index, names) {
            if (!names) {
              throw Error("Must provide a macro name");
            }
            if (this.currentMacro) {
              throw ParserError("Attempting to define a macro " + quote(String(names)) + " inside a macro " + quote(String(this.currentMacro)), this, index);
            }
            this.currentMacro = names;
          };
          _Parser_prototype.exitMacro = function () {
            if (!this.currentMacro) {
              throw Error("Attempting to exit a macro when not in one");
            }
            this.currentMacro = null;
          };
          _Parser_prototype.defineHelper = function (i, name, value) {
            var _ref, dependencies, helper, node, translator, type;
            translator = require("./jstranslator");
            node = this.macroExpandAll(value).reduce(this);
            type = node.type(this);
            _ref = translator.defineHelper(
              this.macros,
              this.getPosition,
              name,
              node,
              type
            );
            helper = _ref.helper;
            dependencies = _ref.dependencies;
            if (this.options.serializeMacros) {
              this.macros.addSerializedHelper(name.name, helper, type, dependencies);
            }
          };
          macroSyntaxConstLiterals = {
            ",": Comma,
            ";": Semicolon,
            ":": Colon,
            ":=": ColonEqual,
            "": Nothing,
            "\n": SomeEmptyLinesWithCheckIndent,
            "<": LessThan,
            ">": GreaterThan,
            "(": OpenParenthesis,
            ")": CloseParenthesis,
            "[": OpenSquareBracket,
            "]": CloseSquareBracket,
            "{": OpenCurlyBrace,
            "}": CloseCurlyBrace,
            end: End
          };
          function reduceObject(o, obj) {
            var _arr, _arr2, _i, _len, item, k, result, v;
            if (__isArray(obj)) {
              for (_arr = [], _arr2 = __toArray(obj), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                item = _arr2[_i];
                _arr.push(reduceObject(o, item));
              }
              return _arr;
            } else if (obj instanceof Node) {
              return obj.reduce(o);
            } else if (typeof obj === "object" && obj !== null) {
              result = {};
              for (k in obj) {
                if (__owns.call(obj, k)) {
                  v = obj[k];
                  result[k] = reduceObject(o, v);
                }
              }
              return result;
            } else {
              return obj;
            }
          }
          function makeMacroRoot(index, params, body) {
            return this.Root(index, void 0, this.Return(
              index,
              this.Function(
                index,
                [
                  params,
                  this.Param(
                    index,
                    this.Ident(index, "__wrap"),
                    void 0,
                    false,
                    true,
                    void 0
                  ),
                  this.Param(
                    index,
                    this.Ident(index, "__node"),
                    void 0,
                    false,
                    true,
                    void 0
                  ),
                  this.Param(
                    index,
                    this.Ident(index, "__const"),
                    void 0,
                    false,
                    true,
                    void 0
                  )
                ],
                body,
                true,
                false
              ),
              false
            ));
          }
          function serializeParamType(asType) {
            if (asType instanceof IdentNode) {
              return ["ident", asType.name];
            } else if (asType instanceof SyntaxSequenceNode) {
              return ["sequence"].concat(__toArray(fixArray(serializeParams(asType.params))));
            } else if (asType instanceof SyntaxChoiceNode) {
              return ["choice"].concat((function () {
                var _arr, _arr2, _i, _len, choice;
                for (_arr = [], _arr2 = __toArray(asType.choices), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                  choice = _arr2[_i];
                  _arr.push(serializeParamType(choice));
                }
                return _arr;
              }()));
            } else if (asType.isConst()) {
              return ["const", asType.constValue()];
            } else if (asType instanceof SyntaxManyNode) {
              return ["many", asType.multiplier].concat(__toArray(serializeParamType(asType.inner)));
            } else {
              throw Error("Unknown param type: " + __typeof(asType));
            }
          }
          function serializeParams(params) {
            return simplifyArray((function () {
              var _arr, _arr2, _i, _len, ident, param, value;
              for (_arr = [], _arr2 = __toArray(params), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                param = _arr2[_i];
                if (param.isConst()) {
                  _arr.push(["const", param.constValue()]);
                } else if (param instanceof SyntaxParamNode) {
                  ident = param.ident;
                  if (ident instanceof IdentNode) {
                    value = ["ident", ident.name];
                  } else if (ident instanceof ThisNode) {
                    value = ["this"];
                  } else {
                    throw Error();
                  }
                  if (param.asType) {
                    value.push.apply(value, __toArray(serializeParamType(param.asType)));
                  }
                  _arr.push(value);
                } else {
                  throw Error();
                }
              }
              return _arr;
            }()));
          }
          deserializeParamType = (function () {
            var deserializeParamTypeByType;
            deserializeParamTypeByType = {
              ident: function (scope, name) {
                return IdentNode(0, scope, name);
              },
              sequence: function (scope) {
                var items;
                items = __slice.call(arguments, 1);
                return SyntaxSequenceNode(0, scope, deserializeParams(items, scope));
              },
              choice: function (scope) {
                var choices;
                choices = __slice.call(arguments, 1);
                return SyntaxChoiceNode(0, scope, (function () {
                  var _arr, _i, _len, choice;
                  for (_arr = [], _i = 0, _len = choices.length; _i < _len; ++_i) {
                    choice = choices[_i];
                    _arr.push(deserializeParamType(choice, scope));
                  }
                  return _arr;
                }()));
              },
              "const": function (scope, value) {
                return ConstNode(0, scope, value);
              },
              many: function (scope, multiplier) {
                var inner;
                inner = __slice.call(arguments, 2);
                return SyntaxManyNode(
                  0,
                  scope,
                  deserializeParamType(inner, scope),
                  multiplier
                );
              }
            };
            return function (asType, scope) {
              var type;
              if (asType == null) {
                asType = [];
              }
              if (asType.length === 0) {
                return;
              } else {
                type = asType[0];
                if (__owns.call(deserializeParamTypeByType, type)) {
                  return deserializeParamTypeByType[type].apply(deserializeParamTypeByType, [scope].concat(__toArray(__slice.call(asType, 1))));
                } else {
                  throw Error("Unknown as-type: " + String(type));
                }
              }
            };
          }());
          deserializeParams = (function () {
            var deserializeParamByType;
            deserializeParamByType = {
              "const": function (scope, value) {
                return ConstNode(0, scope, value);
              },
              ident: function (scope, name) {
                var asType;
                asType = __slice.call(arguments, 2);
                return SyntaxParamNode(
                  0,
                  scope,
                  IdentNode(0, scope, name),
                  deserializeParamType(asType, scope)
                );
              },
              "this": function (scope) {
                var asType;
                asType = __slice.call(arguments, 1);
                return SyntaxParamNode(
                  0,
                  scope,
                  ThisNode(0, scope),
                  deserializeParamType(asType, scope)
                );
              }
            };
            return function (params, scope) {
              var _arr, _arr2, _i, _len, param, type;
              for (_arr = [], _arr2 = __toArray(fixArray(params)), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                param = _arr2[_i];
                type = param[0];
                if (__owns.call(deserializeParamByType, type)) {
                  _arr.push(deserializeParamByType[type].apply(deserializeParamByType, [scope].concat(__toArray(__slice.call(param, 1)))));
                } else {
                  throw Error("Unknown param type: " + String(type));
                }
              }
              return _arr;
            };
          }());
          function calcParam(param) {
            var _this, calced, macros, multiplier, name, string;
            _this = this;
            if (param instanceof IdentNode) {
              name = param.name;
              macros = this.macros;
              if (macros.hasSyntax(name)) {
                return macros.getSyntax(name);
              } else {
                return function (parser, index) {
                  return macros.getSyntax(name).call(this, parser, index);
                };
              }
            } else if (param instanceof SyntaxSequenceNode) {
              return handleParams.call(this, param.params);
            } else if (param instanceof SyntaxChoiceNode) {
              return oneOf.apply(void 0, (function () {
                var _arr, _arr2, _i, _len, choice;
                for (_arr = [], _arr2 = __toArray(param.choices), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                  choice = _arr2[_i];
                  _arr.push(calcParam.call(_this, choice));
                }
                return _arr;
              }()));
            } else if (param.isConst()) {
              string = param.constValue();
              if (typeof string !== "string") {
                this.error("Expected a constant string parameter, got " + __typeof(string));
              }
              return __owns.call(macroSyntaxConstLiterals, string) && macroSyntaxConstLiterals[string] || wordOrSymbol(string);
            } else if (param instanceof SyntaxManyNode) {
              multiplier = param.multiplier;
              calced = calcParam.call(this, param.inner);
              switch (multiplier) {
              case "*": return zeroOrMore(calced);
              case "+": return oneOrMore(calced);
              case "?":
                return oneOf(calced, Nothing);
              default: throw Error("Unknown syntax multiplier: " + multiplier);
              }
            } else {
              return this.error("Unexpected type: " + __typeof(param));
            }
          }
          function handleParams(params) {
            var _arr, _i, _len, _ref, ident, key, param, sequence, string, type;
            sequence = [];
            for (_arr = __toArray(params), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              param = _arr[_i];
              if (param.isConst()) {
                string = param.constValue();
                if (typeof string !== "string") {
                  this.error("Expected a constant string parameter, got " + __typeof(string));
                }
                sequence.push(__owns.call(macroSyntaxConstLiterals, string) && macroSyntaxConstLiterals[string] || wordOrSymbol(string));
              } else if (param instanceof SyntaxParamNode) {
                ident = param.ident;
                if (ident instanceof IdentNode) {
                  key = ident.name;
                } else if (ident instanceof ThisNode) {
                  key = "this";
                } else {
                  throw Error("Don't know how to handle ident type: " + __typeof(ident));
                }
                if ((_ref = param.asType) != null) {
                  type = _ref;
                } else {
                  type = IdentNode(0, param.scope, "Expression");
                }
                sequence.push([
                  key,
                  calcParam.call(this, type)
                ]);
              } else {
                this.error("Unexpected parameter type: " + __typeof(param));
              }
            }
            return sequential.apply(void 0, __toArray(sequence));
          }
          function simplifyArray(operators) {
            if (operators.length === 0) {
              return;
            } else if (operators.length === 1 && !__isArray(operators[0])) {
              return operators[0];
            } else {
              return operators;
            }
          }
          function simplifyObject(options) {
            var k, v;
            for (k in options) {
              if (__owns.call(options, k)) {
                v = options[k];
                return options;
              }
            }
            return;
          }
          function getCompilationOptions(stateOptions) {
            return { bare: true };
          }
          macroSyntaxTypes = {
            syntax: function (index, params, body, options, stateOptions, translator) {
              var _this, compilation, funcParam, handler, macroDataIdent,
                  macroFullDataIdent, macroNameIdent, rawFunc, scope, serialization,
                  state, translated;
              _this = this;
              macroFullDataIdent = this.Ident(index, "macroFullData");
              funcParam = this.Param(
                index,
                macroFullDataIdent,
                void 0,
                false,
                false,
                void 0
              );
              macroNameIdent = this.Ident(index, "macroName");
              scope = this.scope.peek();
              scope.add(macroNameIdent, false, Type.string);
              macroDataIdent = this.Ident(index, "macroData");
              scope.add(macroDataIdent, false, Type.object);
              body = this.Block(index, [
                this.Var(index, macroNameIdent, false),
                this.Assign(index, macroNameIdent, "=", this.Access(index, macroFullDataIdent, this.Const(index, "macroName"))),
                this.Var(index, macroDataIdent, false),
                this.Assign(index, macroDataIdent, "=", this.Access(index, macroFullDataIdent, this.Const(index, "macroData")))
              ].concat(
                (function () {
                  var _arr, _arr2, _i, _len, param;
                  for (_arr = [], _arr2 = __toArray(params), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                    param = _arr2[_i];
                    if (param instanceof SyntaxParamNode) {
                      scope.add(param.ident, true, Type.any);
                      _arr.push(_this.Block(index, [
                        _this.Var(index, param.ident, true),
                        _this.Assign(index, param.ident, "=", _this.Access(index, macroDataIdent, _this.Const(index, param.ident.name)))
                      ]));
                    }
                  }
                  return _arr;
                }()),
                [body]
              ));
              rawFunc = makeMacroRoot.call(this, index, funcParam, body);
              translated = translator(this.macroExpandAll(rawFunc).reduce(this), this.macros, this.getPosition, { "return": true });
              compilation = translated.node.toString(getCompilationOptions(stateOptions));
              if (stateOptions.serializeMacros) {
                serialization = compilation;
              }
              handler = Function(compilation)();
              if (typeof handler !== "function") {
                throw Error("Error creating function for macro: " + String(this.currentMacro));
              }
              state = this;
              return {
                handler: function (args) {
                  var rest;
                  rest = __slice.call(arguments, 1);
                  return handler.apply(this, [reduceObject(state, args)].concat(__toArray(rest))).reduce(state);
                },
                rule: handleParams.call(this, params),
                serialization: serialization != null
                  ? {
                    type: "syntax",
                    code: serialization,
                    options: simplifyObject(options),
                    params: serializeParams(params),
                    names: simplifyArray(this.currentMacro)
                  }
                  : void 0
              };
            },
            defineSyntax: function (index, params, body, options, stateOptions, translator) {
              var _this, handler, serialization, state;
              _this = this;
              state = this;
              if (body != null) {
                handler = (function () {
                  var compilation, funcParam, handler, macroDataIdent, rawFunc, scope,
                      translated;
                  macroDataIdent = _this.Ident(index, "macroData");
                  funcParam = _this.Param(
                    index,
                    macroDataIdent,
                    void 0,
                    false,
                    false,
                    void 0
                  );
                  scope = _this.scope.peek();
                  body = _this.Block(index, (function () {
                    var _arr, _arr2, _i, _len, param;
                    for (_arr = [], _arr2 = __toArray(params), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                      param = _arr2[_i];
                      if (param instanceof SyntaxParamNode) {
                        scope.add(param.ident, true, Type.any);
                        _arr.push(_this.Block(index, [
                          _this.Var(index, param.ident, true),
                          _this.Assign(index, param.ident, "=", _this.Access(index, macroDataIdent, _this.Const(index, param.ident.name)))
                        ]));
                      }
                    }
                    return _arr;
                  }()).concat([body]));
                  rawFunc = makeMacroRoot.call(_this, index, funcParam, body);
                  translated = translator(_this.macroExpandAll(rawFunc).reduce(state), _this.macros, _this.getPosition, { "return": true });
                  compilation = translated.node.toString(getCompilationOptions(stateOptions));
                  if (stateOptions.serializeMacros) {
                    serialization = compilation;
                  }
                  handler = Function(compilation)();
                  if (typeof handler !== "function") {
                    throw Error("Error creating function for syntax: " + options.name);
                  }
                  return function (args) {
                    var rest;
                    rest = __slice.call(arguments, 1);
                    return reduceObject(state, handler.apply(this, [reduceObject(state, args)].concat(__toArray(rest))));
                  };
                }());
              } else {
                handler = function (args) {
                  var rest;
                  rest = __slice.call(arguments, 1);
                  return reduceObject(state, args);
                };
              }
              return {
                handler: handler,
                rule: handleParams.call(this, params),
                serialization: stateOptions.serializeMacros ? { type: "defineSyntax", code: serialization, options: simplifyObject(options), params: serializeParams(params) } : void 0
              };
            },
            call: function (index, params, body, options, stateOptions, translator) {
              var _this, compilation, funcParam, handler, macroDataIdent,
                  macroFullDataIdent, macroNameIdent, rawFunc, scope, serialization,
                  state, translated;
              _this = this;
              macroFullDataIdent = this.Ident(index, "macroFullData");
              funcParam = this.Param(
                index,
                macroFullDataIdent,
                void 0,
                false,
                false,
                void 0
              );
              scope = this.scope.peek();
              macroNameIdent = this.Ident(index, "macroName");
              scope.add(macroNameIdent, false, Type.string);
              macroDataIdent = this.Ident(index, "macroData");
              scope.add(macroDataIdent, false, Type.object);
              body = this.Block(index, [
                this.Var(index, macroNameIdent, false),
                this.Assign(index, macroNameIdent, "=", this.Access(index, macroFullDataIdent, this.Const(index, "macroName"))),
                this.Var(index, macroDataIdent, false),
                this.Assign(index, macroDataIdent, "=", this.Access(index, macroFullDataIdent, this.Const(index, "macroData")))
              ].concat(
                (function () {
                  var _arr, _arr2, _len, i, param;
                  for (_arr = [], _arr2 = __toArray(params), i = 0, _len = _arr2.length; i < _len; ++i) {
                    param = _arr2[i];
                    if (param instanceof ParamNode) {
                      scope.add(param.ident, true, Type.any);
                      _arr.push(_this.Block(index, [
                        _this.Var(index, param.ident, true),
                        _this.Assign(index, param.ident, "=", _this.Access(index, macroDataIdent, _this.Const(index, i)))
                      ]));
                    }
                  }
                  return _arr;
                }()),
                [body]
              ));
              rawFunc = makeMacroRoot.call(this, index, funcParam, body);
              translated = translator(this.macroExpandAll(rawFunc).reduce(this), this.macros, this.getPosition, { "return": true });
              compilation = translated.node.toString(getCompilationOptions(stateOptions));
              if (stateOptions.serializeMacros) {
                serialization = compilation;
              }
              handler = Function(compilation)();
              if (typeof handler !== "function") {
                throw Error("Error creating function for macro: " + this.currentMacro);
              }
              state = this;
              handler = (function (inner) {
                return function (args) {
                  var rest;
                  rest = __slice.call(arguments, 1);
                  return inner.apply(this, [reduceObject(state, args)].concat(__toArray(rest))).reduce(state);
                };
              }(handler));
              return {
                handler: handler,
                rule: InvocationArguments,
                serialization: serialization != null ? { type: "call", code: serialization, options: simplifyObject(options), names: simplifyArray(this.currentMacro) } : void 0
              };
            },
            binaryOperator: function (index, operators, body, options, stateOptions, translator) {
              var _this, compilation, funcParam, handler, macroDataIdent, rawFunc,
                  scope, serialization, state, translated;
              _this = this;
              macroDataIdent = this.Ident(index, "macroData");
              funcParam = this.Param(
                index,
                macroDataIdent,
                void 0,
                false,
                false,
                void 0
              );
              scope = this.scope.peek();
              body = this.Block(index, (function () {
                var _arr, _arr2, _i, _len, ident, name;
                for (_arr = [], _arr2 = ["left", "op", "right"], _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                  name = _arr2[_i];
                  ident = _this.Ident(index, name);
                  scope.add(ident, true, Type.any);
                  _arr.push(_this.Block(index, [
                    _this.Var(index, ident, true),
                    _this.Assign(index, ident, "=", _this.Access(index, macroDataIdent, _this.Const(index, name)))
                  ]));
                }
                return _arr;
              }()).concat([body]));
              rawFunc = makeMacroRoot.call(this, index, funcParam, body);
              translated = translator(this.macroExpandAll(rawFunc).reduce(this), this.macros, this.getPosition, { "return": true });
              compilation = translated.node.toString(getCompilationOptions(stateOptions));
              if (stateOptions.serializeMacros) {
                serialization = compilation;
              }
              handler = Function(compilation)();
              if (typeof handler !== "function") {
                throw Error("Error creating function for binary operator " + operators.join(", "));
              }
              state = this;
              if (options.invertible) {
                handler = (function (inner) {
                  return function (args) {
                    var rest, result;
                    rest = __slice.call(arguments, 1);
                    result = inner.apply(this, [reduceObject(state, args)].concat(__toArray(rest)));
                    if (args.inverted) {
                      return UnaryNode(result.index, result.scope, "!", result).reduce(state);
                    } else {
                      return result.reduce(state);
                    }
                  };
                }(handler));
              } else {
                handler = (function (inner) {
                  return function (args) {
                    var rest;
                    rest = __slice.call(arguments, 1);
                    return inner.apply(this, [reduceObject(state, args)].concat(__toArray(rest))).reduce(state);
                  };
                }(handler));
              }
              return {
                handler: handler,
                rule: void 0,
                serialization: serialization != null ? { type: "binaryOperator", code: serialization, operators: simplifyArray(operators), options: simplifyObject(options) } : void 0
              };
            },
            assignOperator: function (index, operators, body, options, stateOptions, translator) {
              var _this, compilation, funcParam, handler, macroDataIdent, rawFunc,
                  scope, serialization, state, translated;
              _this = this;
              macroDataIdent = this.Ident(index, "macroData");
              funcParam = this.Param(
                index,
                macroDataIdent,
                void 0,
                false,
                false,
                void 0
              );
              scope = this.scope.peek();
              body = this.Block(index, (function () {
                var _arr, _arr2, _i, _len, ident, name;
                for (_arr = [], _arr2 = ["left", "op", "right"], _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                  name = _arr2[_i];
                  ident = _this.Ident(index, name);
                  scope.add(ident, true, Type.any);
                  _arr.push(_this.Block(index, [
                    _this.Var(index, ident, true),
                    _this.Assign(index, ident, "=", _this.Access(index, macroDataIdent, _this.Const(index, name)))
                  ]));
                }
                return _arr;
              }()).concat([body]));
              rawFunc = makeMacroRoot.call(this, index, funcParam, body);
              translated = translator(this.macroExpandAll(rawFunc).reduce(this), this.macros, this.getPosition, { "return": true });
              compilation = translated.node.toString(getCompilationOptions(stateOptions));
              if (stateOptions.serializeMacros) {
                serialization = compilation;
              }
              handler = Function(compilation)();
              if (typeof handler !== "function") {
                throw Error("Error creating function for assign operator " + operators.join(", "));
              }
              state = this;
              handler = (function (inner) {
                return function (args) {
                  var rest;
                  rest = __slice.call(arguments, 1);
                  return inner.apply(this, [reduceObject(state, args)].concat(__toArray(rest))).reduce(state);
                };
              }(handler));
              return {
                handler: handler,
                rule: void 0,
                serialization: serialization != null ? { type: "assignOperator", code: serialization, operators: simplifyArray(operators), options: simplifyObject(options) } : void 0
              };
            },
            unaryOperator: function (index, operators, body, options, stateOptions, translator) {
              var _this, compilation, funcParam, handler, macroDataIdent, rawFunc,
                  scope, serialization, state, translated;
              _this = this;
              macroDataIdent = this.Ident(index, "macroData");
              funcParam = this.Param(
                index,
                macroDataIdent,
                void 0,
                false,
                false,
                void 0
              );
              scope = this.scope.peek();
              body = this.Block(index, (function () {
                var _arr, _arr2, _i, _len, ident, name;
                for (_arr = [], _arr2 = ["op", "node"], _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                  name = _arr2[_i];
                  ident = _this.Ident(index, name);
                  scope.add(ident, true, Type.any);
                  _arr.push(_this.Block(index, [
                    _this.Var(index, ident, true),
                    _this.Assign(index, ident, "=", _this.Access(index, macroDataIdent, _this.Const(index, name)))
                  ]));
                }
                return _arr;
              }()).concat([body]));
              rawFunc = makeMacroRoot.call(this, index, funcParam, body);
              translated = translator(this.macroExpandAll(rawFunc).reduce(this), this.macros, this.getPosition, { "return": true });
              compilation = translated.node.toString(getCompilationOptions(stateOptions));
              if (stateOptions.serializeMacros) {
                serialization = compilation;
              }
              handler = Function(compilation)();
              if (typeof handler !== "function") {
                throw Error("Error creating function for unary operator " + operators.join(", "));
              }
              state = this;
              handler = (function (inner) {
                return function (args) {
                  var rest;
                  rest = __slice.call(arguments, 1);
                  return inner.apply(this, [reduceObject(state, args)].concat(__toArray(rest))).reduce(state);
                };
              }(handler));
              return {
                handler: handler,
                rule: void 0,
                serialization: serialization != null ? { type: "unaryOperator", code: serialization, operators: simplifyArray(operators), options: simplifyObject(options) } : void 0
              };
            }
          };
          function fixArray(operators) {
            if (operators == null) {
              return [];
            } else if (__isArray(operators)) {
              return operators;
            } else {
              return [operators];
            }
          }
          macroDeserializers = {
            syntax: function (_p) {
              var _this, code, handler, id, names, options, params, state;
              _this = this;
              code = _p.code;
              params = _p.params;
              names = _p.names;
              options = _p.options;
              if (options == null) {
                options = {};
              }
              id = _p.id;
              names = fixArray(names);
              handler = code;
              if (typeof handler !== "function") {
                throw Error("Error deserializing function for macro " + name);
              }
              state = this;
              handler = (function (inner) {
                return function (args) {
                  var rest;
                  rest = __slice.call(arguments, 1);
                  return inner.apply(this, [reduceObject(state, args)].concat(__toArray(rest))).reduce(state);
                };
              }(handler));
              this.enterMacro(0, names);
              handleMacroSyntax.call(
                this,
                0,
                "syntax",
                handler,
                handleParams.call(this, deserializeParams(params, this.scope.peek())),
                null,
                options,
                id
              );
              return this.exitMacro();
            },
            call: function (_p) {
              var _this, code, handler, id, names, options, state;
              _this = this;
              code = _p.code;
              names = _p.names;
              options = _p.options;
              if (options == null) {
                options = {};
              }
              id = _p.id;
              names = fixArray(names);
              handler = code;
              if (typeof handler !== "function") {
                throw Error("Error deserializing function for macro " + name);
              }
              state = this;
              handler = (function (inner) {
                return function (args) {
                  var rest;
                  rest = __slice.call(arguments, 1);
                  return inner.apply(this, [reduceObject(state, args)].concat(__toArray(rest))).reduce(state);
                };
              }(handler));
              this.enterMacro(0, names);
              handleMacroSyntax.call(
                this,
                0,
                "call",
                handler,
                InvocationArguments,
                null,
                options,
                id
              );
              return this.exitMacro();
            },
            defineSyntax: function (_p) {
              var _this, code, handler, id, options, params, state;
              _this = this;
              code = _p.code;
              params = _p.params;
              options = _p.options;
              if (options == null) {
                options = {};
              }
              id = _p.id;
              if (this.macros.hasSyntax(options.name)) {
                throw Error("Cannot override already-defined syntax: " + options.name);
              }
              state = this;
              if (code != null) {
                handler = code;
                if (typeof handler !== "function") {
                  throw Error("Error deserializing function for macro syntax " + options.name);
                }
                handler = (function (inner) {
                  return function (args) {
                    var rest;
                    rest = __slice.call(arguments, 1);
                    return reduceObject(state, inner.apply(this, [reduceObject(state, args)].concat(__toArray(rest))));
                  };
                }(handler));
              } else {
                handler = function (args) {
                  return reduceObject(state, args);
                };
              }
              this.enterMacro(0, DEFINE_SYNTAX);
              handleMacroSyntax.call(
                this,
                0,
                "defineSyntax",
                handler,
                handleParams.call(this, deserializeParams(params, this.scope.peek())),
                null,
                options,
                id
              );
              return this.exitMacro();
            },
            binaryOperator: function (_p) {
              var _this, code, handler, id, operators, options, state;
              _this = this;
              code = _p.code;
              operators = _p.operators;
              options = _p.options;
              if (options == null) {
                options = {};
              }
              id = _p.id;
              operators = fixArray(operators);
              handler = code;
              if (typeof handler !== "function") {
                throw Error("Error deserializing function for binary operator " + operators.join(", "));
              }
              state = this;
              if (options.invertible) {
                handler = (function (inner) {
                  return function (args) {
                    var rest, result;
                    rest = __slice.call(arguments, 1);
                    result = inner.apply(this, [reduceObject(state, args)].concat(__toArray(rest)));
                    if (args.inverted) {
                      return UnaryNode(result.index, result.scope, "!", result).reduce(state);
                    } else {
                      return result.reduce(state);
                    }
                  };
                }(handler));
              } else {
                handler = (function (inner) {
                  return function (args) {
                    var rest;
                    rest = __slice.call(arguments, 1);
                    return inner.apply(this, [reduceObject(state, args)].concat(__toArray(rest))).reduce(state);
                  };
                }(handler));
              }
              this.enterMacro(0, BINARY_OPERATOR);
              handleMacroSyntax.call(
                this,
                0,
                "binaryOperator",
                handler,
                void 0,
                operators,
                options,
                id
              );
              return this.exitMacro();
            },
            assignOperator: function (_p) {
              var _this, code, handler, id, operators, options, state;
              _this = this;
              code = _p.code;
              operators = _p.operators;
              options = _p.options;
              if (options == null) {
                options = {};
              }
              id = _p.id;
              operators = fixArray(operators);
              handler = code;
              if (typeof handler !== "function") {
                throw Error("Error deserializing function for assign operator " + operators.join(", "));
              }
              state = this;
              handler = (function (inner) {
                return function (args) {
                  var rest;
                  rest = __slice.call(arguments, 1);
                  return inner.apply(this, [reduceObject(state, args)].concat(__toArray(rest))).reduce(state);
                };
              }(handler));
              this.enterMacro(0, ASSIGN_OPERATOR);
              handleMacroSyntax.call(
                this,
                0,
                "assignOperator",
                handler,
                void 0,
                operators,
                options,
                id
              );
              return this.exitMacro();
            },
            unaryOperator: function (_p) {
              var _this, code, handler, id, operators, options, state;
              _this = this;
              code = _p.code;
              operators = _p.operators;
              options = _p.options;
              if (options == null) {
                options = {};
              }
              id = _p.id;
              operators = fixArray(operators);
              handler = code;
              if (typeof handler !== "function") {
                throw Error("Error deserializing function for unary operator " + operators.join(", "));
              }
              state = this;
              handler = (function (inner) {
                return function (args) {
                  var rest;
                  rest = __slice.call(arguments, 1);
                  return inner.apply(this, [reduceObject(state, args)].concat(__toArray(rest))).reduce(state);
                };
              }(handler));
              this.enterMacro(0, UNARY_OPERATOR);
              handleMacroSyntax.call(
                this,
                0,
                "unaryOperator",
                handler,
                void 0,
                operators,
                options,
                id
              );
              this.exitMacro();
            }
          };
          function removeNoops(obj) {
            var _arr, _arr2, _i, _len, item, k, result, v;
            if (__isArray(obj)) {
              for (_arr = [], _arr2 = __toArray(obj), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                item = _arr2[_i];
                if (item instanceof NothingNode) {
                  _arr.push(void 0);
                } else {
                  _arr.push(removeNoops(item));
                }
              }
              return _arr;
            } else if (obj instanceof Node) {
              return obj;
            } else if (typeof obj === "object" && obj !== null && !(obj instanceof RegExp)) {
              result = {};
              for (k in obj) {
                if (__owns.call(obj, k)) {
                  v = obj[k];
                  if (!(v instanceof NothingNode)) {
                    result[k] = removeNoops(v);
                  }
                }
              }
              return result;
            } else {
              return obj;
            }
          }
          _Parser_prototype.startMacroSyntax = function (index, params, options) {
            var _arr, _i, _len, _ref, m, macroId, macros, rule;
            if (options == null) {
              options = {};
            }
            if (!this.currentMacro) {
              throw Error("Attempting to specify a macro syntax when not in a macro");
            }
            rule = handleParams.call(this, params);
            macros = this.macros;
            function mutator(data, parser, index) {
              if (parser.inAst.peek() || !parser.expandingMacros) {
                return parser.MacroAccess(
                  index,
                  macroId,
                  parser.getLine(index),
                  removeNoops(data),
                  parser.position.peek() === "statement",
                  parser.inGenerator.peek(),
                  parser.inEvilAst.peek()
                );
              } else {
                throw Error("Cannot use macro until fully defined");
              }
            }
            for (_arr = __toArray(macros.getOrAddByNames(this.currentMacro)), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              m = _arr[_i];
              m.data.push((_ref = sequential(
                ["macroName", m.token],
                ["macroData", rule]
              ), mutate(mutator)(_ref)));
            }
            macroId = macros.addMacro(mutator, void 0, options.type != null && __owns.call(Type, _ref = options.type) ? Type[_ref] : void 0);
            this.pendingMacroId = macroId;
            return params;
          };
          function handleMacroSyntax(index, type, handler, rule, params, options, macroId) {
            var _arr, _i, _len, _ref, _this, id, m, macros;
            _this = this;
            macros = this.macros;
            function mutator(data, parser, index) {
              var line, macroContext, pos, result, scope, tmps, walker;
              if (parser.inAst.peek() || !parser.expandingMacros) {
                return parser.MacroAccess(
                  index,
                  macroId,
                  parser.getLine(index),
                  removeNoops(data),
                  parser.position.peek() === "statement",
                  parser.inGenerator.peek(),
                  parser.inEvilAst.peek()
                );
              } else {
                scope = parser.pushScope(false);
                macroContext = MacroContext(
                  parser,
                  index,
                  parser.position.peek(),
                  parser.inGenerator.peek(),
                  parser.inEvilAst.peek()
                );
                if (type === "assignOperator" && macroContext.isIdent(data.left)) {
                  if (!macroContext.hasVariable(data.left)) {
                    throw parser.buildError("Trying to assign with " + data.op + " to unknown variable '" + macroContext.name(data.left) + "'", data.left);
                  } else if (!macroContext.isVariableMutable(data.left) && !parser.inEvilAst.peek()) {
                    throw parser.buildError("Trying to assign with " + data.op + " to immutable variable '" + macroContext.name(data.left) + "'", data.left);
                  }
                }
                try {
                  result = handler.call(
                    macroContext,
                    removeNoops(data),
                    __bind(macroContext, "wrap"),
                    __bind(macroContext, "node"),
                    __bind(macroContext, "getConst")
                  );
                } catch (e) {
                  if (e instanceof ReferenceError) {
                    throw e;
                  } else if (e instanceof MacroError) {
                    pos = parser.getPosition(index);
                    e.setPosition(pos.line, pos.column);
                    throw e;
                  } else {
                    throw MacroError(e, parser, index);
                  }
                }
                parser.popScope();
                if (result instanceof Node) {
                  line = parser.getLine(index);
                  walker = function (node) {
                    if (node instanceof MacroAccessNode) {
                      node.callLine = line;
                    }
                    return node.walk(walker);
                  };
                  result = walker(result.reduce(_this));
                  tmps = macroContext.getTmps();
                  if (tmps.unsaved.length) {
                    return parser.TmpWrapper(index, result, tmps.unsaved);
                  } else {
                    return result;
                  }
                } else {
                  return result;
                }
              }
            }
            switch (this.currentMacro) {
            case BINARY_OPERATOR:
              return macroId = macros.addBinaryOperator(params, mutator, options, macroId);
            case ASSIGN_OPERATOR:
              return macroId = macros.addAssignOperator(params, mutator, options, macroId);
            case UNARY_OPERATOR:
              return macroId = macros.addUnaryOperator(params, mutator, options, macroId);
            case DEFINE_SYNTAX:
              if (!rule) {
                throw Error("Expected rule to exist");
              }
              macros.addSyntax(options.name, mutate(mutator)(rule));
              return macroId = macros.addMacro(mutator, macroId, options.type != null && __owns.call(Type, _ref = options.type) ? Type[_ref] : void 0);
            default:
              if (!rule) {
                throw Error("Expected rule to exist");
              }
              for (_arr = __toArray(macros.getOrAddByNames(this.currentMacro)), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                m = _arr[_i];
                if (this.pendingMacroId != null) {
                  m.data.pop();
                }
                m.data.push(cache((_ref = sequential(
                  ["macroName", m.token],
                  ["macroData", rule]
                ), mutate(mutator)(_ref))));
              }
              if (this.pendingMacroId != null) {
                if (macroId != null) {
                  throw Error("Cannot provide the macro id if there is a pending macro id");
                }
                id = this.pendingMacroId;
                this.pendingMacroId = null;
                macros.replaceMacro(id, mutator, options.type != null && __owns.call(Type, _ref = options.type) ? Type[_ref] : void 0);
                return macroId = id;
              } else {
                return macroId = macros.addMacro(mutator, macroId, options.type != null && __owns.call(Type, _ref = options.type) ? Type[_ref] : void 0);
              }
            }
          }
          _Parser_prototype.macroSyntax = function (index, type, params, options, body) {
            var _ref, handler, macroId, rule, serialization;
            if (!__owns.call(macroSyntaxTypes, type)) {
              throw Error("Unknown macro-syntax type: " + type);
            }
            if (!this.currentMacro) {
              this.error("Attempting to specify a macro syntax when not in a macro");
            }
            _ref = macroSyntaxTypes[type].call(
              this,
              index,
              params,
              body,
              options,
              this.options,
              require("./jstranslator")
            );
            handler = _ref.handler;
            rule = _ref.rule;
            serialization = _ref.serialization;
            macroId = handleMacroSyntax.call(
              this,
              index,
              type,
              handler,
              rule,
              params,
              options
            );
            if (serialization != null) {
              serialization.id = macroId;
              this.macros.addMacroSerialization(serialization);
            }
          };
          BINARY_OPERATOR = {};
          _Parser_prototype.defineBinaryOperator = function (index, operators, options, body) {
            this.enterMacro(index, BINARY_OPERATOR);
            this.macroSyntax(
              index,
              "binaryOperator",
              operators,
              options,
              body
            );
            return this.exitMacro();
          };
          ASSIGN_OPERATOR = {};
          _Parser_prototype.defineAssignOperator = function (index, operators, options, body) {
            this.enterMacro(index, ASSIGN_OPERATOR);
            this.macroSyntax(
              index,
              "assignOperator",
              operators,
              options,
              body
            );
            return this.exitMacro();
          };
          UNARY_OPERATOR = {};
          _Parser_prototype.defineUnaryOperator = function (index, operators, options, body) {
            this.enterMacro(index, UNARY_OPERATOR);
            this.macroSyntax(
              index,
              "unaryOperator",
              operators,
              options,
              body
            );
            return this.exitMacro();
          };
          DEFINE_SYNTAX = {};
          _Parser_prototype.defineSyntax = function (index, name, params, body) {
            this.enterMacro(index, DEFINE_SYNTAX);
            this.macroSyntax(
              index,
              "defineSyntax",
              params,
              { name: name },
              body
            );
            return this.exitMacro();
          };
          _Parser_prototype.defineConst = function (index, name, value) {
            var scope;
            scope = this.scope.peek();
            if (scope === this.scope.initial) {
              this.macros.addConst(name, value);
              if (this.options.serializeMacros) {
                this.macros.addSerializedConst(name);
              }
            }
            scope.addConst(name, value);
          };
          _Parser_prototype.getConst = function (name, scope) {
            var _ref, consts;
            if (scope == null) {
              scope = this.scope.peek();
            }
            if ((_ref = scope.constValue(name)) != null) {
              return _ref;
            }
            consts = this.macros.consts;
            if (__owns.call(consts, name)) {
              return { value: consts[name] };
            }
          };
          _Parser_prototype.getConstValue = function (name, defaultValue) {
            var c;
            c = this.getConst(name);
            if (c) {
              return c.value;
            } else {
              return defaultValue;
            }
          };
          _Parser_prototype.deserializeMacros = function (data) {
            var _arr, _i, _len, _ref, deserializer, item, type;
            for (type in macroDeserializers) {
              if (__owns.call(macroDeserializers, type)) {
                deserializer = macroDeserializers[type];
                for (_arr = __toArray((_ref = __owns.call(data, type) ? data[type] : void 0) != null ? _ref : []), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                  item = _arr[_i];
                  deserializer.call(this, item);
                }
              }
            }
          };
          _Parser_prototype.macroExpand1 = function (node) {
            var _i, _len, n, nodes, oldExpandingMacros, result;
            if (node._macroExpanded != null) {
              return node._macroExpanded;
            } else if (node instanceof MacroAccessNode) {
              nodes = [];
              while (node instanceof MacroAccessNode) {
                nodes.push(node);
                this.position.push(node.inStatement ? "statement" : "expression");
                this.inGenerator.push(node.inGenerator);
                this.inEvilAst.push(node.inEvilAst);
                this.scope.push(node.scope);
                oldExpandingMacros = this.expandingMacros;
                this.expandingMacros = true;
                result = void 0;
                try {
                  result = this.macros.getById(node.id)(node.data, this, node.index);
                } catch (e) {
                  if (e instanceof MacroError) {
                    e.setPosition(node.callLine, 0);
                  }
                  throw e;
                } finally {
                  this.scope.pop();
                  this.position.pop();
                  this.inGenerator.pop();
                  this.inEvilAst.pop();
                  this.expandingMacros = oldExpandingMacros;
                }
                if (node.doWrapped) {
                  node = result.doWrap(this);
                } else {
                  node = result;
                }
              }
              for (_i = 0, _len = nodes.length; _i < _len; ++_i) {
                n = nodes[_i];
                n._macroExpanded = node;
              }
              return node;
            } else {
              return node._macroExpanded = node;
            }
          };
          _Parser_prototype.macroExpandAllAsync = function (node, callback) {
            var _this, startTime;
            _this = this;
            startTime = new Date().getTime();
            function walker(node, callback) {
              var _once, _once2, expanded;
              if (new Date().getTime() - startTime > 5) {
                return setImmediate(function () {
                  startTime = new Date().getTime();
                  return walker(node, callback);
                });
              }
              if (node._macroExpandAlled != null) {
                return callback(null, node._macroExpandAlled);
              } else if (!(node instanceof MacroAccessNode)) {
                return node.walkAsync(walker, (_once = false, function (_e, walked) {
                  if (_once) {
                    throw Error("Attempted to call function more than once");
                  } else {
                    _once = true;
                  }
                  if (_e != null) {
                    return callback(_e);
                  }
                  return callback(null, walked._macroExpandAlled = walked._macroExpanded = node._macroExpandAlled = node._macroExpanded = walked);
                }));
              } else {
                try {
                  expanded = _this.macroExpand1(node);
                } catch (e) {
                  return callback(e);
                }
                if (!(expanded instanceof Node)) {
                  return callback(null, node._macroExpandAlled = node._macroExpanded = expanded);
                }
                return walker(expanded, (_once2 = false, function (_e, walked) {
                  if (_once2) {
                    throw Error("Attempted to call function more than once");
                  } else {
                    _once2 = true;
                  }
                  if (_e != null) {
                    return callback(_e);
                  }
                  return callback(null, expanded._macroExpandAlled = expanded._macroExpanded = walked._macroExpandAlled = walked._macroExpanded = node._macroExpandAlled = node._macroExpanded = walked);
                }));
              }
            }
            return walker(node, callback);
          };
          _Parser_prototype.macroExpandAll = function (node) {
            var _this;
            _this = this;
            function walker(node) {
              var expanded, walked;
              if (node._macroExpandAlled != null) {
                return node._macroExpandAlled;
              } else if (!(node instanceof MacroAccessNode)) {
                walked = node.walk(walker);
                return walked._macroExpandAlled = walked._macroExpanded = node._macroExpandAlled = node._macroExpanded = walked;
              } else {
                expanded = _this.macroExpand1(node);
                if (!(expanded instanceof Node)) {
                  return node._macroExpandAlled = node._macroExpanded = expanded;
                }
                walked = walker(expanded);
                return expanded._macroExpandAlled = expanded._macroExpanded = walked._macroExpandAlled = walked._macroExpanded = node._macroExpandAlled = node._macroExpanded = walked;
              }
            }
            return walker(node);
          };
          _Parser_prototype.macroExpandAllPromise = function (node) {
            var defer;
            if (this.options.sync) {
              return __defer.fulfilled(this.macroExpandAll(node));
            } else {
              defer = __defer();
              this.macroExpandAllAsync(node, function (err, result) {
                if (err) {
                  return defer.reject(err);
                } else {
                  return defer.fulfill(result);
                }
              });
              return defer.promise;
            }
          };
          _Parser_prototype.clearCache = function () {
            this.cache = [];
          };
          Parser.addNodeFactory = function (name, type) {
            Parser.prototype[name] = function (index) {
              var args;
              args = __slice.call(arguments, 1);
              return type.apply(void 0, [index, this.scope.peek()].concat(__toArray(args)));
            };
          };
          return Parser;
        }());
        parse = __promise(function (source, macros, options) {
          var _e, _send, _state, _step, _throw, e, endExpandTime, endParseTime,
              endReduceTime, expanded, parser, reduced, result, rootRule, startTime;
          _state = 0;
          function _close() {
            _state = 8;
          }
          function _step(_received) {
            while (true) {
              switch (_state) {
              case 0:
                if (macros == null) {
                  macros = null;
                }
                if (options == null) {
                  options = {};
                }
                parser = Parser(
                  source,
                  macros != null ? macros.clone() : void 0,
                  options
                );
                if (options.embeddedGenerator) {
                  rootRule = EmbeddedRootGeneratorP;
                } else if (options.embedded) {
                  rootRule = EmbeddedRootP;
                } else {
                  rootRule = RootP;
                }
                startTime = new Date().getTime();
                ++_state;
              case 1:
                _state = options.sync ? 2 : 3;
                break;
              case 2:
                result = rootRule.sync(parser);
                _state = 6;
                break;
              case 3:
                ++_state;
                return { done: false, value: rootRule(parser) };
              case 4:
                result = _received;
                _state = 6;
                break;
              case 5:
                if (!(e === SHORT_CIRCUIT)) {
                  throw e;
                }
                ++_state;
              case 6:
                parser.clearCache();
                endParseTime = new Date().getTime();
                if (typeof options.progress === "function") {
                  options.progress("parse", endParseTime - startTime);
                }
                if (!result || result.index < source.length) {
                  throw parser.getFailure(result != null ? result.index : void 0);
                }
                ++_state;
                return { done: false, value: parser.macroExpandAllPromise(result.value) };
              case 7:
                expanded = _received;
                endExpandTime = new Date().getTime();
                if (typeof options.progress === "function") {
                  options.progress("macroExpand", endExpandTime - endParseTime);
                }
                reduced = expanded.reduce(parser);
                endReduceTime = new Date().getTime();
                if (typeof options.progress === "function") {
                  options.progress("reduce", endReduceTime - endExpandTime);
                }
                ++_state;
                return {
                  done: true,
                  value: {
                    result: reduced,
                    macros: parser.macros,
                    getPosition: parser.getPosition,
                    parseTime: endParseTime - startTime,
                    macroExpandTime: endExpandTime - endParseTime,
                    reduceTime: endReduceTime - endExpandTime,
                    time: endReduceTime - startTime
                  }
                };
              case 8:
                return { done: true, value: void 0 };
              default: throw Error("Unknown state: " + _state);
              }
            }
          }
          function _throw(_e) {
            if (_state >= 1 && _state <= 4) {
              e = _e;
              _state = 5;
            } else {
              _close();
              throw _e;
            }
          }
          function _send(_received) {
            while (true) {
              try {
                return _step(_received);
              } catch (_e) {
                _throw(_e);
              }
            }
          }
          return {
            close: _close,
            iterator: function () {
              return this;
            },
            next: function () {
              return _send(void 0);
            },
            send: _send,
            "throw": function (_e) {
              _throw(_e);
              return _send(void 0);
            }
          };
        });
        parse.ParserError = ParserError;
        parse.MacroError = MacroError;
        parse.Node = Node;
        parse.MacroHolder = MacroHolder;
        parse.unusedCaches = unusedCaches;
        parse.deserializePrelude = function (data) {
          var parsed, parser;
          if (typeof data === "string") {
            parsed = Function("'use strict'; return " + data)();
          } else {
            parsed = data;
          }
          parser = Parser();
          parser.macros.deserialize(parsed, parser, {});
          return {
            result: NothingNode(0, parser.scope.peek()),
            macros: parser.macros
          };
        };
        parse.getReservedWords = function (macros, options) {
          if (options == null) {
            options = {};
          }
          return unique(__toArray(getReservedIdents(options)).concat(__toArray(macros != null && typeof macros.getMacroAndOperatorNames === "function" && macros.getMacroAndOperatorNames() || [])));
        };
        module.exports = parse;
        for (_arr = [
          "Access",
          "AccessMulti",
          "Args",
          "Array",
          "Assign",
          "Binary",
          "Block",
          "Break",
          "Call",
          "Cascade",
          "Comment",
          "Const",
          "Continue",
          "Debugger",
          "Def",
          "EmbedWrite",
          "Eval",
          "For",
          "ForIn",
          "Function",
          "Ident",
          "If",
          "MacroAccess",
          "MacroConst",
          "Nothing",
          "Object",
          "Param",
          "Regexp",
          "Return",
          "Root",
          "Spread",
          "Super",
          "Switch",
          "SyntaxChoice",
          "SyntaxMany",
          "SyntaxParam",
          "SyntaxSequence",
          "This",
          "Throw",
          "Tmp",
          "TmpWrapper",
          "TryCatch",
          "TryFinally",
          "TypeFunction",
          "TypeGeneric",
          "TypeObject",
          "TypeUnion",
          "Unary",
          "Var",
          "Yield"
        ], _i = 0, _len = _arr.length; _i < _len; ++_i) {
          nodeType = _arr[_i];
          Parser.addNodeFactory(nodeType, Node[nodeType]);
        }
        Parser.prototype.string = Node.string;
        Parser.prototype.arrayParam = Parser.prototype.array;
        Parser.prototype.object = Node.object;
        Parser.prototype.objectParam = Node.objectParam;
      }.call(this, typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : this));
      
      return module.exports;
    };
    require['./parser-utils'] = function () {
      var module = { exports: this };
      var exports = this;
      (function () {
        "use strict";
        var __async, __isArray, __once, __owns, __slice, __toArray, __typeof,
            nodeToType, Type;
        __async = function (limit, length, hasResult, onValue, onComplete) {
          var broken, completed, index, result, slotsUsed, sync;
          if (typeof limit !== "number") {
            throw TypeError("Expected limit to be a Number, got " + __typeof(limit));
          }
          if (typeof length !== "number") {
            throw TypeError("Expected length to be a Number, got " + __typeof(length));
          }
          if (hasResult == null) {
            hasResult = false;
          } else if (typeof hasResult !== "boolean") {
            throw TypeError("Expected hasResult to be a Boolean, got " + __typeof(hasResult));
          }
          if (typeof onValue !== "function") {
            throw TypeError("Expected onValue to be a Function, got " + __typeof(onValue));
          }
          if (typeof onComplete !== "function") {
            throw TypeError("Expected onComplete to be a Function, got " + __typeof(onComplete));
          }
          if (hasResult) {
            result = [];
          } else {
            result = null;
          }
          if (length <= 0) {
            return onComplete(null, result);
          }
          if (limit < 1 || limit !== limit) {
            limit = 1/0;
          }
          broken = null;
          slotsUsed = 0;
          sync = false;
          completed = false;
          function onValueCallback(err, value) {
            if (completed) {
              return;
            }
            --slotsUsed;
            if (err != null && broken == null) {
              broken = err;
            }
            if (hasResult && broken == null && arguments.length > 1) {
              result.push(value);
            }
            if (!sync) {
              next();
            }
          }
          index = -1;
          function next() {
            while (!completed && broken == null && slotsUsed < limit && ++index < length) {
              ++slotsUsed;
              sync = true;
              onValue(index, __once(onValueCallback));
              sync = false;
            }
            if (!completed && (broken != null || slotsUsed === 0)) {
              completed = true;
              if (broken != null) {
                onComplete(broken);
              } else {
                onComplete(null, result);
              }
            }
          }
          next();
        };
        __isArray = typeof Array.isArray === "function" ? Array.isArray
          : (function () {
            var _toString;
            _toString = Object.prototype.toString;
            return function (x) {
              return _toString.call(x) === "[object Array]";
            };
          }());
        __once = (function () {
          function replacement() {
            throw Error("Attempted to call function more than once");
          }
          function doNothing() {}
          return function (func, silentFail) {
            if (typeof func !== "function") {
              throw TypeError("Expected func to be a Function, got " + __typeof(func));
            }
            if (silentFail == null) {
              silentFail = false;
            } else if (typeof silentFail !== "boolean") {
              throw TypeError("Expected silentFail to be a Boolean, got " + __typeof(silentFail));
            }
            return function () {
              var f;
              f = func;
              if (silentFail) {
                func = doNothing;
              } else {
                func = replacement;
              }
              return f.apply(this, arguments);
            };
          };
        }());
        __owns = Object.prototype.hasOwnProperty;
        __slice = Array.prototype.slice;
        __toArray = function (x) {
          if (x == null) {
            throw TypeError("Expected an object, got " + __typeof(x));
          } else if (__isArray(x)) {
            return x;
          } else if (typeof x === "string") {
            return x.split("");
          } else if (typeof x.length === "number") {
            return __slice.call(x);
          } else {
            throw TypeError("Expected an object with a length property, got " + __typeof(x));
          }
        };
        __typeof = (function () {
          var _toString;
          _toString = Object.prototype.toString;
          return function (o) {
            if (o === void 0) {
              return "Undefined";
            } else if (o === null) {
              return "Null";
            } else {
              return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
            }
          };
        }());
        Type = require("./types");
        nodeToType = (function () {
          var identToType;
          identToType = {
            Boolean: Type.boolean,
            String: Type.string,
            Number: Type.number,
            Array: Type.array,
            Object: Type.object,
            Function: Type["function"],
            RegExp: Type.regexp,
            Date: Type.date,
            Error: Type.error,
            RangeError: Type.error,
            ReferenceError: Type.error,
            SyntaxError: Type.error,
            TypeError: Type.error,
            URIError: Type.error
          };
          return function (node) {
            var _arr, _arr2, _i, _len, _ref, arg, args, basetype, current, data, key,
                Node, type, value;
            Node = require("./parser-nodes");
            if (!(node instanceof Node)) {
              throw TypeError("Expected a Node, got " + __typeof(node));
            }
            if (node instanceof Node.Ident) {
              return (__owns.call(identToType, _ref = node.name) ? identToType[_ref] : void 0) || Type.any;
            } else if (node instanceof Node.Const) {
              if (node.value === null) {
                return Type["null"];
              } else if (node.value === void 0) {
                return Type["undefined"];
              } else {
                return Type.any;
              }
            } else if (node instanceof Node.TypeGeneric) {
              basetype = nodeToType(node.basetype);
              for (_arr = [], _arr2 = __toArray(node.args), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                arg = _arr2[_i];
                _arr.push(nodeToType(arg));
              }
              args = _arr;
              if (basetype === Type.array || basetype === Type["function"]) {
                return Type.generic.apply(Type, [basetype.base].concat(__toArray(args)));
              } else if (basetype !== Type.any) {
                return Type.generic.apply(Type, [basetype].concat(__toArray(args)));
              } else {
                return Type.any;
              }
            } else if (node instanceof Node.TypeUnion) {
              current = Type.none;
              for (_arr = __toArray(node.types), _i = _arr.length; _i--; ) {
                type = _arr[_i];
                current = current.union(nodeToType(type));
              }
              return current;
            } else if (node instanceof Node.TypeObject) {
              data = {};
              for (_arr = __toArray(node.pairs), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                _ref = _arr[_i];
                key = _ref.key;
                value = _ref.value;
                if (key instanceof Node.Const) {
                  data[key.value] = nodeToType(value);
                }
              }
              return Type.makeObject(data);
            } else {
              return Type.any;
            }
          };
        }());
        function map(array, func, arg) {
          var _arr, _i, _len, changed, item, newItem, result;
          result = [];
          changed = false;
          for (_arr = __toArray(array), _i = 0, _len = _arr.length; _i < _len; ++_i) {
            item = _arr[_i];
            newItem = func(item, arg);
            result.push(newItem);
            if (item !== newItem) {
              changed = true;
            }
          }
          if (changed) {
            return result;
          } else {
            return array;
          }
        }
        function mapAsync(array, func) {
          var _i, args, callback, changed;
          _i = arguments.length - 1;
          if (_i > 2) {
            args = __slice.call(arguments, 2, _i);
          } else {
            _i = 2;
            args = [];
          }
          callback = arguments[_i];
          changed = false;
          return __async(
            1,
            +array.length,
            true,
            function (_i2, next) {
              var _once, item;
              item = array[_i2];
              return func.apply(void 0, [item].concat(__toArray(args), [
                (_once = false, function (_e, newItem) {
                  if (_once) {
                    throw Error("Attempted to call function more than once");
                  } else {
                    _once = true;
                  }
                  if (_e != null) {
                    return next(_e);
                  }
                  if (item !== newItem) {
                    changed = true;
                  }
                  return next(null, newItem);
                })
              ]));
            },
            function (err, result) {
              if (typeof err !== "undefined" && err !== null) {
                return callback(err);
              } else {
                return callback(null, changed ? result : array);
              }
            }
          );
        }
        function addParamToScope(scope, param, forceMutable) {
          var _arr, _i, _ref, element, Node, pair;
          Node = require("./parser-nodes");
          if (param instanceof Node.Param) {
            if ((_ref = param.ident) instanceof Node.Ident || _ref instanceof Node.Tmp) {
              scope.add(param.ident, forceMutable || param.isMutable, param.asType ? nodeToType(param.asType) : param.spread ? Type.array : Type.any);
            } else if (param.ident instanceof Node.Access) {
              if (!(param.ident.child instanceof Node.Const) || typeof param.ident.child.value !== "string") {
                throw Error("Expected constant access: " + __typeof(param.ident.child));
              }
              scope.add(
                Node.Ident(param.index, param.scope, param.ident.child.value),
                forceMutable || param.isMutable,
                param.asType ? nodeToType(param.asType) : param.spread ? Type.array : Type.any
              );
            } else {
              throw Error("Unknown param ident: " + __typeof(param.ident));
            }
          } else if (param instanceof Node.Array) {
            for (_arr = __toArray(param.elements), _i = _arr.length; _i--; ) {
              element = _arr[_i];
              addParamToScope(scope, element, forceMutable);
            }
          } else if (param instanceof Node.Object) {
            for (_arr = __toArray(param.pairs), _i = _arr.length; _i--; ) {
              pair = _arr[_i];
              addParamToScope(scope, pair.value, forceMutable);
            }
          } else if (!(param instanceof Node.Nothing)) {
            throw Error("Unknown param node type: " + __typeof(param));
          }
        }
        exports.nodeToType = nodeToType;
        exports.map = map;
        exports.mapAsync = mapAsync;
        exports.addParamToScope = addParamToScope;
      }.call(this));
      
      return module.exports;
    };
    require['./parser-scope'] = function () {
      var module = { exports: this };
      var exports = this;
      (function () {
        "use strict";
        var __create, __import, __isArray, __owns, __slice, __toArray, __typeof, _ref,
            IdentNode, Node, Scope, ScopeDestroyedError, TmpNode, Type;
        __create = typeof Object.create === "function" ? Object.create
          : function (x) {
            function F() {}
            F.prototype = x;
            return new F();
          };
        __import = function (dest, source) {
          var k;
          for (k in source) {
            if (__owns.call(source, k)) {
              dest[k] = source[k];
            }
          }
          return dest;
        };
        __isArray = typeof Array.isArray === "function" ? Array.isArray
          : (function () {
            var _toString;
            _toString = Object.prototype.toString;
            return function (x) {
              return _toString.call(x) === "[object Array]";
            };
          }());
        __owns = Object.prototype.hasOwnProperty;
        __slice = Array.prototype.slice;
        __toArray = function (x) {
          if (x == null) {
            throw TypeError("Expected an object, got " + __typeof(x));
          } else if (__isArray(x)) {
            return x;
          } else if (typeof x === "string") {
            return x.split("");
          } else if (typeof x.length === "number") {
            return __slice.call(x);
          } else {
            throw TypeError("Expected an object with a length property, got " + __typeof(x));
          }
        };
        __typeof = (function () {
          var _toString;
          _toString = Object.prototype.toString;
          return function (o) {
            if (o === void 0) {
              return "Undefined";
            } else if (o === null) {
              return "Null";
            } else {
              return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
            }
          };
        }());
        Type = require("./types");
        Node = require("./parser-nodes");
        IdentNode = Node.Ident;
        TmpNode = Node.Tmp;
        ScopeDestroyedError = (function (Error) {
          var _Error_prototype, _ScopeDestroyedError_prototype;
          function ScopeDestroyedError(message) {
            var _this, err;
            _this = this instanceof ScopeDestroyedError ? this : __create(_ScopeDestroyedError_prototype);
            if (message == null) {
              message = "Scope already destroyed";
            }
            _this.message = message;
            err = Error.call(_this, _this.message);
            if (typeof Error.captureStackTrace === "function") {
              Error.captureStackTrace(_this, ScopeDestroyedError);
            } else if ("stack" in err) {
              _this.stack = err.stack;
            }
            return _this;
          }
          _Error_prototype = Error.prototype;
          _ScopeDestroyedError_prototype = ScopeDestroyedError.prototype = __create(_Error_prototype);
          _ScopeDestroyedError_prototype.constructor = ScopeDestroyedError;
          ScopeDestroyedError.displayName = "ScopeDestroyedError";
          if (typeof Error.extended === "function") {
            Error.extended(ScopeDestroyedError);
          }
          _ScopeDestroyedError_prototype.name = "ScopeDestroyedError";
          return ScopeDestroyedError;
        }(Error));
        Scope = (function () {
          var _Scope_prototype;
          function Scope(parent, isTop) {
            var _this;
            _this = this instanceof Scope ? this : __create(_Scope_prototype);
            if (parent == null) {
              parent = null;
            }
            _this.parent = parent;
            if (isTop == null) {
              isTop = false;
            }
            _this.isTop = isTop;
            if (!parent && !isTop) {
              throw Error("Must either provide a parent or is-top = true");
            }
            _this.destroyed = false;
            _this.children = [];
            _this.variables = {};
            _this.consts = {};
            _this.tmps = {};
            if (!isTop) {
              parent.children.push(_this);
            }
            return _this;
          }
          _Scope_prototype = Scope.prototype;
          Scope.displayName = "Scope";
          _Scope_prototype._allVariables = function () {
            var _arr, _i, _len, child, obj;
            obj = __import({}, this.variables);
            for (_arr = __toArray(this.children), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              child = _arr[_i];
              __import(obj, child._allVariables());
            }
            return obj;
          };
          _Scope_prototype._allTmps = function () {
            var _arr, _i, _len, child, obj;
            obj = __import({}, this.tmps);
            for (_arr = __toArray(this.children), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              child = _arr[_i];
              __import(obj, child._allTmps());
            }
            return obj;
          };
          _Scope_prototype._allConsts = function () {
            var _arr, _i, _len, child, obj;
            obj = __import({}, this.consts);
            for (_arr = __toArray(this.children), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              child = _arr[_i];
              __import(obj, child._allConsts());
            }
            return obj;
          };
          function isEmpty(obj) {
            var k;
            for (k in obj) {
              if (__owns.call(obj, k)) {
                return false;
              }
            }
            return true;
          }
          _Scope_prototype.inspect = function () {
            var consts, inspect, text, tmps, variables;
            if (!this.isTop) {
              return this.top().inspect();
            }
            inspect = require("util").inspect;
            variables = this._allVariables();
            tmps = this._allTmps();
            consts = this._allConsts();
            text = [];
            text.push("Scope(");
            if (!isEmpty(variables) || !isEmpty(tmps) || !isEmpty(consts)) {
              text.push(inspect(variables));
            }
            if (!isEmpty(tmps) || !isEmpty(consts)) {
              text.push(", ");
              text.push(inspect(tmps));
            }
            if (!isEmpty(consts)) {
              text.push(", ");
              text.push(inspect(consts));
            }
            text.push(")");
            if (this.parent) {
              text.push(" -> ");
              text.push(this.parent.inspect());
            }
            return text.join("");
          };
          _Scope_prototype.destroy = function () {
            var _arr, _i, child, index, parentChildren;
            if (this.destroyed) {
              throw ScopeDestroyedError();
            }
            for (_arr = __toArray(this.children), _i = _arr.length; _i--; ) {
              child = _arr[_i];
              child.destroy();
            }
            if (!this.isTop) {
              parentChildren = this.parent.children;
              index = parentChildren.lastIndexOf(this);
              if (index === -1) {
                throw Error("Not found in parents' children");
              }
              parentChildren.splice(index, 1);
            }
          };
          _Scope_prototype.clone = function (isTop) {
            if (isTop == null) {
              isTop = false;
            }
            if (this.destroyed) {
              throw ScopeDestroyedError();
            }
            return Scope(this, isTop);
          };
          _Scope_prototype.reparent = function (parent) {
            var index, oldParent, oldParentChildren;
            if (parent == null) {
              parent = null;
            }
            if (this.destroyed) {
              throw ScopeDestroyedError();
            }
            if (!parent && !this.isTop) {
              throw Error("Must either provide a parent or is-top = true");
            }
            oldParent = this.parent;
            if (parent === oldParent) {
              return;
            }
            if (parent === this) {
              throw Error("Cannot parent to self");
            }
            if (parent && parent.parent === this) {
              throw Error("Trying to become your own grandpa");
            }
            this.parent = parent;
            if (!this.isTop) {
              oldParentChildren = oldParent.children;
              index = oldParentChildren.lastIndexOf(this);
              if (index === -1) {
                throw Error("Not found in old parents' children");
              }
              oldParentChildren.splice(index, 1);
              parent.children.push(this);
            }
          };
          _Scope_prototype.top = function () {
            if (this.destroyed) {
              throw ScopeDestroyedError();
            }
            if (this.isTop) {
              return this;
            } else {
              return this.parent.top();
            }
          };
          _Scope_prototype.add = function (ident, isMutable, type) {
            if (isMutable == null) {
              isMutable = false;
            }
            if (this.destroyed) {
              throw ScopeDestroyedError();
            }
            if (ident instanceof TmpNode) {
              this.tmps[ident.id] = { isMutable: isMutable, type: type };
            } else {
              this.variables[ident.name] = { isMutable: isMutable, type: type };
            }
          };
          _Scope_prototype.addConst = function (name, value) {
            this.consts[name] = value;
          };
          function getIdent(scope, name) {
            var _arr, _i, _len, _ref, child, variables;
            variables = scope.variables;
            if (__owns.call(variables, name)) {
              return variables[name];
            } else {
              for (_arr = __toArray(scope.children), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                child = _arr[_i];
                if ((_ref = getIdent(child, name)) != null) {
                  return _ref;
                }
              }
            }
          }
          function getTmp(scope, id) {
            var _arr, _i, _len, _ref, child, tmps;
            tmps = scope.tmps;
            if (__owns.call(tmps, id)) {
              return tmps[id];
            } else {
              for (_arr = __toArray(scope.children), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                child = _arr[_i];
                if ((_ref = getTmp(child, id)) != null) {
                  return _ref;
                }
              }
            }
          }
          function get(scope, ident) {
            var _ref, _ref2, current, isTmp, layers;
            current = scope;
            isTmp = ident instanceof TmpNode;
            layers = 0;
            while (current) {
              ++layers;
              if (layers > 1000) {
                throw Error("Infinite loop detected");
              }
              current = current.top();
              if (isTmp) {
                if ((_ref = getTmp(current, ident.id)) != null) {
                  return _ref;
                }
              } else if ((_ref2 = getIdent(current, ident.name)) != null) {
                return _ref2;
              }
              current = current.parent;
            }
          }
          _Scope_prototype.has = function (ident) {
            if (this.destroyed) {
              throw ScopeDestroyedError();
            }
            return get(this, ident) != null;
          };
          _Scope_prototype.isMutable = function (ident) {
            var _ref;
            if (this.destroyed) {
              throw ScopeDestroyedError();
            }
            return ((_ref = get(this, ident)) != null ? _ref.isMutable : void 0) || false;
          };
          _Scope_prototype.type = function (ident) {
            var _ref;
            if (this.destroyed) {
              throw ScopeDestroyedError();
            }
            return ((_ref = get(this, ident)) != null ? _ref.type : void 0) || Type.any;
          };
          function getConst(scope, name) {
            var _arr, _i, _len, _ref, child, consts;
            consts = scope.consts;
            if (__owns.call(consts, name)) {
              return { value: consts[name] };
            } else {
              for (_arr = __toArray(scope.children), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                child = _arr[_i];
                if ((_ref = getConst(child, name)) != null) {
                  return _ref;
                }
              }
            }
          }
          _Scope_prototype.constValue = function (name) {
            var _ref, current, layers;
            if (this.destroyed) {
              throw ScopeDestroyedError();
            }
            current = this;
            layers = 0;
            while (current) {
              ++layers;
              if (layers > 1000) {
                throw Error("Infinite loop detected");
              }
              current = current.top();
              if ((_ref = getConst(current, name)) != null) {
                return _ref;
              }
              current = current.parent;
            }
          };
          return Scope;
        }());
        module.exports = Scope;
        (_ref = module.exports).ScopeDestroyedError = ScopeDestroyedError;
      }.call(this));
      
      return module.exports;
    };
    require['./parser-nodes'] = function () {
      var module = { exports: this };
      var exports = this;
      (function (GLOBAL) {
        "use strict";
        var __async, __create, __curry, __in, __isArray, __keys, __once, __owns,
            __slice, __toArray, __typeof, _ref, AccessMultiNode, AccessNode, ArgsNode,
            ArrayNode, AssignNode, BinaryNode, BlockNode, BreakNode, CallNode,
            CascadeNode, CommentNode, ConstNode, ContinueNode, DebuggerNode, DefNode,
            EmbedWriteNode, EvalNode, ForInNode, ForNode, FunctionNode, IdentNode,
            IfNode, inspect, isPrimordial, MacroAccessNode, MacroConstNode, mapAsync,
            Node, nodeToType, NothingNode, ObjectNode, ParamNode, quote, RegexpNode,
            ReturnNode, RootNode, SpreadNode, SuperNode, SwitchNode, SyntaxChoiceNode,
            SyntaxManyNode, SyntaxParamNode, SyntaxSequenceNode, ThisNode, ThrowNode,
            TmpNode, TmpWrapperNode, TryCatchNode, TryFinallyNode, Type,
            TypeFunctionNode, TypeGenericNode, TypeObjectNode, TypeUnionNode,
            UnaryNode, VarNode, YieldNode;
        __async = function (limit, length, hasResult, onValue, onComplete) {
          var broken, completed, index, result, slotsUsed, sync;
          if (typeof limit !== "number") {
            throw TypeError("Expected limit to be a Number, got " + __typeof(limit));
          }
          if (typeof length !== "number") {
            throw TypeError("Expected length to be a Number, got " + __typeof(length));
          }
          if (hasResult == null) {
            hasResult = false;
          } else if (typeof hasResult !== "boolean") {
            throw TypeError("Expected hasResult to be a Boolean, got " + __typeof(hasResult));
          }
          if (typeof onValue !== "function") {
            throw TypeError("Expected onValue to be a Function, got " + __typeof(onValue));
          }
          if (typeof onComplete !== "function") {
            throw TypeError("Expected onComplete to be a Function, got " + __typeof(onComplete));
          }
          if (hasResult) {
            result = [];
          } else {
            result = null;
          }
          if (length <= 0) {
            return onComplete(null, result);
          }
          if (limit < 1 || limit !== limit) {
            limit = 1/0;
          }
          broken = null;
          slotsUsed = 0;
          sync = false;
          completed = false;
          function onValueCallback(err, value) {
            if (completed) {
              return;
            }
            --slotsUsed;
            if (err != null && broken == null) {
              broken = err;
            }
            if (hasResult && broken == null && arguments.length > 1) {
              result.push(value);
            }
            if (!sync) {
              next();
            }
          }
          index = -1;
          function next() {
            while (!completed && broken == null && slotsUsed < limit && ++index < length) {
              ++slotsUsed;
              sync = true;
              onValue(index, __once(onValueCallback));
              sync = false;
            }
            if (!completed && (broken != null || slotsUsed === 0)) {
              completed = true;
              if (broken != null) {
                onComplete(broken);
              } else {
                onComplete(null, result);
              }
            }
          }
          next();
        };
        __create = typeof Object.create === "function" ? Object.create
          : function (x) {
            function F() {}
            F.prototype = x;
            return new F();
          };
        __curry = function (numArgs, f) {
          var currier;
          if (typeof numArgs !== "number") {
            throw TypeError("Expected numArgs to be a Number, got " + __typeof(numArgs));
          }
          if (typeof f !== "function") {
            throw TypeError("Expected f to be a Function, got " + __typeof(f));
          }
          if (numArgs > 1) {
            currier = function (args) {
              var ret;
              if (args.length >= numArgs) {
                return f.apply(this, args);
              } else {
                ret = function () {
                  if (arguments.length === 0) {
                    return ret;
                  } else {
                    return currier.call(this, args.concat(__slice.call(arguments)));
                  }
                };
                return ret;
              }
            };
            return currier([]);
          } else {
            return f;
          }
        };
        __in = typeof Array.prototype.indexOf === "function"
          ? (function () {
            var indexOf;
            indexOf = Array.prototype.indexOf;
            return function (child, parent) {
              return indexOf.call(parent, child) !== -1;
            };
          }())
          : function (child, parent) {
            var i, len;
            len = +parent.length;
            i = -1;
            while (++i < len) {
              if (child === parent[i] && i in parent) {
                return true;
              }
            }
            return false;
          };
        __isArray = typeof Array.isArray === "function" ? Array.isArray
          : (function () {
            var _toString;
            _toString = Object.prototype.toString;
            return function (x) {
              return _toString.call(x) === "[object Array]";
            };
          }());
        __keys = typeof Object.keys === "function" ? Object.keys
          : function (x) {
            var key, keys;
            keys = [];
            for (key in x) {
              if (__owns.call(x, key)) {
                keys.push(key);
              }
            }
            return keys;
          };
        __once = (function () {
          function replacement() {
            throw Error("Attempted to call function more than once");
          }
          function doNothing() {}
          return function (func, silentFail) {
            if (typeof func !== "function") {
              throw TypeError("Expected func to be a Function, got " + __typeof(func));
            }
            if (silentFail == null) {
              silentFail = false;
            } else if (typeof silentFail !== "boolean") {
              throw TypeError("Expected silentFail to be a Boolean, got " + __typeof(silentFail));
            }
            return function () {
              var f;
              f = func;
              if (silentFail) {
                func = doNothing;
              } else {
                func = replacement;
              }
              return f.apply(this, arguments);
            };
          };
        }());
        __owns = Object.prototype.hasOwnProperty;
        __slice = Array.prototype.slice;
        __toArray = function (x) {
          if (x == null) {
            throw TypeError("Expected an object, got " + __typeof(x));
          } else if (__isArray(x)) {
            return x;
          } else if (typeof x === "string") {
            return x.split("");
          } else if (typeof x.length === "number") {
            return __slice.call(x);
          } else {
            throw TypeError("Expected an object with a length property, got " + __typeof(x));
          }
        };
        __typeof = (function () {
          var _toString;
          _toString = Object.prototype.toString;
          return function (o) {
            if (o === void 0) {
              return "Undefined";
            } else if (o === null) {
              return "Null";
            } else {
              return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
            }
          };
        }());
        Type = require("./types");
        _ref = require("./parser-utils");
        nodeToType = _ref.nodeToType;
        map = _ref.map;
        mapAsync = _ref.mapAsync;
        _ref = require("./utils");
        quote = _ref.quote;
        isPrimordial = _ref.isPrimordial;
        if ((_ref = require("util")) != null) {
          inspect = _ref.inspect;
        }
        function map(array, func, arg) {
          var _arr, _i, _len, changed, item, newItem, result;
          result = [];
          changed = false;
          for (_arr = __toArray(array), _i = 0, _len = _arr.length; _i < _len; ++_i) {
            item = _arr[_i];
            newItem = func(item, arg);
            result.push(newItem);
            if (item !== newItem) {
              changed = true;
            }
          }
          if (changed) {
            return result;
          } else {
            return array;
          }
        }
        function simplifyArray(array) {
          var i, item;
          if (array.length === 0) {
            return array;
          } else {
            array = array.slice();
            for (i = +array.length; i--; ) {
              item = array[i];
              if (!item || item instanceof NothingNode || item.length === 0) {
                array.pop();
              } else {
                break;
              }
            }
            return array;
          }
        }
        Node = (function () {
          var _Node_prototype;
          function Node() {
            var _this;
            _this = this instanceof Node ? this : __create(_Node_prototype);
            throw Error("Node should not be instantiated directly");
          }
          _Node_prototype = Node.prototype;
          Node.displayName = "Node";
          _Node_prototype.type = function () {
            return Type.any;
          };
          _Node_prototype.walk = function (f) {
            return this;
          };
          _Node_prototype.walkAsync = function (f, callback) {
            return callback(null, this);
          };
          _Node_prototype.cacheable = true;
          _Node_prototype.withLabel = function (label) {
            if (label == null) {
              label = null;
            }
            return BlockNode(this.index, this.scope, [this], label);
          };
          _Node_prototype._reduce = function (parser) {
            return this.walk(function (node) {
              return node.reduce(parser);
            });
          };
          _Node_prototype.reduce = function (parser) {
            var reduced;
            if (this._reduced != null) {
              return this._reduced;
            } else {
              reduced = this._reduce(parser);
              if (reduced === this) {
                return this._reduced = this;
              } else {
                return this._reduced = reduced.reduce(parser);
              }
            }
          };
          _Node_prototype.isConst = function () {
            return false;
          };
          _Node_prototype.constValue = function () {
            throw Error("Not a const: " + __typeof(this));
          };
          _Node_prototype.isConstType = function () {
            return false;
          };
          _Node_prototype.isConstValue = function () {
            return false;
          };
          _Node_prototype.isLiteral = function () {
            return this.isConst();
          };
          _Node_prototype.literalValue = function () {
            return this.constValue();
          };
          _Node_prototype.isNoop = function (o) {
            return this.reduce(o)._isNoop(o);
          };
          _Node_prototype._isNoop = function (o) {
            return false;
          };
          _Node_prototype.isStatement = function () {
            return false;
          };
          _Node_prototype.rescope = function (newScope) {
            var oldScope;
            if (this.scope === newScope) {
              return this;
            }
            oldScope = this.scope;
            this.scope = newScope;
            function walker(node) {
              var nodeScope, parent;
              nodeScope = node.scope;
              if (nodeScope === newScope) {
                return node;
              } else if (nodeScope === oldScope) {
                return node.rescope(newScope);
              } else {
                parent = nodeScope.parent;
                if (parent === oldScope) {
                  nodeScope.reparent(newScope);
                }
                return node.walk(walker);
              }
            }
            return this.walk(walker);
          };
          _Node_prototype.doWrap = function (parser) {
            var innerScope, result;
            if (this.isStatement()) {
              innerScope = parser.pushScope(true, this.scope);
              result = CallNode(
                this.index,
                this.scope,
                FunctionNode(
                  this.index,
                  this.scope,
                  [],
                  this.rescope(innerScope),
                  true,
                  true
                ),
                []
              );
              parser.popScope();
              return result;
            } else {
              return this;
            }
          };
          _Node_prototype.mutateLast = function (o, func, includeNoop) {
            var _ref;
            if ((_ref = func(this)) != null) {
              return _ref;
            } else {
              return this;
            }
          };
          Node.byTypeId = [];
          _Node_prototype._toJSON = function () {
            var _this;
            _this = this;
            return simplifyArray((function () {
              var _arr, _arr2, _i, _len, argName;
              for (_arr = [], _arr2 = __toArray(_this.constructor.argNames), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                argName = _arr2[_i];
                _arr.push(_this[argName]);
              }
              return _arr;
            }()));
          };
          return Node;
        }());
        function inspectHelper(depth, name, index) {
          var _arr, _i, _len, _some, arg, args, d, found, hasLarge, part, parts;
          args = __slice.call(arguments, 3);
          if (depth != null) {
            d = depth - 1;
          } else {
            d = null;
          }
          found = false;
          for (_i = args.length; _i--; ) {
            arg = args[_i];
            if (!arg || arg instanceof NothingNode || __isArray(arg) && arg.length === 0) {
              args.pop();
            } else {
              break;
            }
          }
          for (_arr = [], _i = 0, _len = args.length; _i < _len; ++_i) {
            arg = args[_i];
            _arr.push(inspect(arg, null, d));
          }
          parts = _arr;
          _some = false;
          for (_i = 0, _len = parts.length; _i < _len; ++_i) {
            part = parts[_i];
            if (parts.length > 50 || part.indexOf("\n") !== -1) {
              _some = true;
              break;
            }
          }
          hasLarge = _some;
          if (hasLarge) {
            for (_arr = [], _i = 0, _len = parts.length; _i < _len; ++_i) {
              part = parts[_i];
              _arr.push("  " + part.split("\n").join("\n  "));
            }
            parts = _arr;
            return name + "(\n" + parts.join(",\n") + ")";
          } else {
            return name + "(" + parts.join(", ") + ")";
          }
        }
        Node.Access = Node.byTypeId[1] = AccessNode = (function (Node) {
          var _AccessNode_prototype, _Node_prototype;
          function AccessNode(index, scope, parent, child) {
            var _this;
            _this = this instanceof AccessNode ? this : __create(_AccessNode_prototype);
            _this.index = index;
            _this.scope = scope;
            _this._reduced = void 0;
            _this._macroExpanded = void 0;
            _this._macroExpandAlled = void 0;
            _this.parent = parent;
            _this.child = child;
            return _this;
          }
          _Node_prototype = Node.prototype;
          _AccessNode_prototype = AccessNode.prototype = __create(_Node_prototype);
          _AccessNode_prototype.constructor = AccessNode;
          AccessNode.displayName = "AccessNode";
          if (typeof Node.extended === "function") {
            Node.extended(AccessNode);
          }
          _AccessNode_prototype.typeId = 1;
          AccessNode.argNames = ["parent", "child"];
          _AccessNode_prototype.type = function (o) {
            var _ref, _this;
            _this = this;
            if ((_ref = this._type) == null) {
              return this._type = (function () {
                var child, childType, childValue, isString, parentType;
                parentType = _this.parent.type(o);
                isString = parentType.isSubsetOf(Type.string);
                if (isString || parentType.isSubsetOf(Type.arrayLike)) {
                  child = o.macroExpand1(_this.child).reduce(o);
                  if (child.isConst()) {
                    childValue = child.constValue();
                    if (childValue === "length") {
                      return Type.number;
                    } else if (typeof childValue === "number") {
                      if (childValue >= 0 && childValue % 1 === 0) {
                        if (isString) {
                          return Type.string.union(Type["undefined"]);
                        } else if (parentType.subtype) {
                          return parentType.subtype.union(Type["undefined"]);
                        } else {
                          return Type.any;
                        }
                      } else {
                        return Type["undefined"];
                      }
                    }
                  } else {
                    childType = child.type(o);
                    if (childType.isSubsetOf(Type.number)) {
                      if (isString) {
                        return Type.string.union(Type["undefined"]);
                      } else if (parentType.subtype) {
                        return parentType.subtype.union(Type["undefined"]);
                      } else {
                        return Type.any;
                      }
                    }
                  }
                } else if (parentType.isSubsetOf(Type.object) && typeof parentType.value === "function") {
                  child = o.macroExpand1(_this.child).reduce(o);
                  if (child.isConst()) {
                    return parentType.value(String(child.constValue()));
                  }
                }
                return Type.any;
              }());
            } else {
              return _ref;
            }
          };
          _AccessNode_prototype._reduce = function (o) {
            var _arr, _i, _len, _ref, args, cachedParent, child, cValue, end, hasEnd,
                hasStep, inclusive, key, parent, pValue, start, step, value;
            parent = this.parent.reduce(o).doWrap(o);
            cachedParent = null;
            function replaceLengthIdent(node) {
              var nodeParent;
              if (node instanceof IdentNode && node.name === "__currentArrayLength") {
                if (parent.cacheable && cachedParent == null) {
                  cachedParent = o.makeTmp(node.index, "ref", parent.type(o));
                  cachedParent.scope = node.scope;
                }
                return AccessNode(
                  node.index,
                  node.scope,
                  cachedParent != null ? cachedParent : parent,
                  ConstNode(node.index, node.scope, "length")
                );
              } else if (node instanceof AccessNode) {
                nodeParent = replaceLengthIdent(node.parent);
                if (nodeParent !== node.parent) {
                  return AccessNode(node.index, node.scope, nodeParent, node.child).walk(replaceLengthIdent);
                } else {
                  return node.walk(replaceLengthIdent);
                }
              } else {
                return node.walk(replaceLengthIdent);
              }
            }
            child = replaceLengthIdent(this.child.reduce(o).doWrap(o));
            if (cachedParent != null) {
              return TmpWrapperNode(
                this.index,
                this.scope,
                AccessNode(
                  this.index,
                  this.scope,
                  AssignNode(
                    this.index,
                    this.scope,
                    cachedParent,
                    "=",
                    parent
                  ),
                  child
                ),
                [cachedParent.id]
              );
            }
            if (parent.isLiteral() && child.isConst()) {
              cValue = child.constValue();
              if (parent.isConst()) {
                pValue = parent.constValue();
                if (cValue in Object(pValue)) {
                  value = pValue[cValue];
                  if (value === null || value instanceof RegExp || (_ref = typeof value) === "string" || _ref === "number" || _ref === "boolean" || _ref === "undefined") {
                    return ConstNode(this.index, this.scope, value);
                  }
                }
              } else if (parent instanceof ArrayNode) {
                if (cValue === "length") {
                  return ConstNode(this.index, this.scope, parent.elements.length);
                } else if (typeof cValue === "number") {
                  return parent.elements[cValue] || ConstNode(this.index, this.scope, void 0);
                }
              } else if (parent instanceof ObjectNode) {
                for (_arr = __toArray(parent.pairs), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                  _ref = _arr[_i];
                  key = _ref.key;
                  value = _ref.value;
                  if (key.constValue() === cValue) {
                    return value;
                  }
                }
              }
            }
            if (child instanceof CallNode && child.func instanceof IdentNode && child.func.name === "__range") {
              _ref = child.args;
              start = _ref[0];
              end = _ref[1];
              step = _ref[2];
              inclusive = _ref[3];
              hasStep = !step.isConst() || step.constValue() !== 1;
              if (!hasStep) {
                if (inclusive.isConst()) {
                  if (inclusive.constValue()) {
                    if (end.isConst() && typeof end.constValue() === "number") {
                      end = ConstNode(end.index, end.scope, +end.constValue() + 1 || 1/0);
                    } else {
                      end = BinaryNode(
                        end.index,
                        end.scope,
                        BinaryNode(
                          end.index,
                          end.scope,
                          end,
                          "+",
                          ConstNode(inclusive.index, inclusive.scope, 1)
                        ),
                        "||",
                        ConstNode(end.index, end.scope, 1/0)
                      );
                    }
                  }
                } else {
                  end = IfNode(
                    end.index,
                    end.scope,
                    inclusive,
                    BinaryNode(
                      end.index,
                      end.scope,
                      BinaryNode(
                        end.index,
                        end.scope,
                        end,
                        "+",
                        ConstNode(inclusive.index, inclusive.scope, 1)
                      ),
                      "||",
                      ConstNode(end.index, end.scope, 1/0)
                    ),
                    end
                  );
                }
              }
              args = [parent];
              hasEnd = !end.isConst() || (_ref = end.constValue()) !== void 0 && _ref !== 1/0;
              if (!start.isConst() || start.constValue() !== 0 || hasEnd || hasStep) {
                args.push(start);
              }
              if (hasEnd || hasStep) {
                args.push(end);
              }
              if (hasStep) {
                args.push(step);
                if (!inclusive.isConst() || inclusive.constValue()) {
                  args.push(inclusive);
                }
              }
              return CallNode(
                this.index,
                this.scope,
                IdentNode(this.index, this.scope, hasStep ? "__sliceStep" : "__slice"),
                args,
                false,
                !hasStep
              ).reduce(o);
            } else if (parent !== this.parent || child !== this.child) {
              return AccessNode(this.index, this.scope, parent, child);
            } else {
              return this;
            }
          };
          _AccessNode_prototype._isNoop = function (o) {
            var _ref;
            if ((_ref = this.__isNoop) == null) {
              return this.__isNoop = this.parent.isNoop(o) && this.child.isNoop(o);
            } else {
              return _ref;
            }
          };
          _AccessNode_prototype.inspect = function (depth) {
            return inspectHelper(
              depth,
              "AccessNode",
              this.index,
              this.parent,
              this.child
            );
          };
          _AccessNode_prototype.walk = function (f) {
            var child, parent;
            parent = f(this.parent);
            child = f(this.child);
            if (parent !== this.parent || child !== this.child) {
              return AccessNode(this.index, this.scope, parent, child);
            } else {
              return this;
            }
          };
          _AccessNode_prototype.walkAsync = function (f, callback) {
            var _once, _this;
            _this = this;
            return f(this.parent, (_once = false, function (_e, parent) {
              var _once2;
              if (_once) {
                throw Error("Attempted to call function more than once");
              } else {
                _once = true;
              }
              if (_e != null) {
                return callback(_e);
              }
              return f(_this.child, (_once2 = false, function (_e2, child) {
                if (_once2) {
                  throw Error("Attempted to call function more than once");
                } else {
                  _once2 = true;
                }
                if (_e2 != null) {
                  return callback(_e2);
                }
                return callback(null, parent !== _this.parent || child !== _this.child ? AccessNode(_this.index, _this.scope, parent, child) : _this);
              }));
            }));
          };
          return AccessNode;
        }(Node));
        Node.AccessMulti = Node.byTypeId[2] = AccessMultiNode = (function (Node) {
          var _AccessMultiNode_prototype, _Node_prototype;
          function AccessMultiNode(index, scope, parent, elements) {
            var _this;
            _this = this instanceof AccessMultiNode ? this : __create(_AccessMultiNode_prototype);
            if (elements == null) {
              elements = [];
            }
            _this.index = index;
            _this.scope = scope;
            _this._reduced = void 0;
            _this._macroExpanded = void 0;
            _this._macroExpandAlled = void 0;
            _this.parent = parent;
            _this.elements = elements;
            return _this;
          }
          _Node_prototype = Node.prototype;
          _AccessMultiNode_prototype = AccessMultiNode.prototype = __create(_Node_prototype);
          _AccessMultiNode_prototype.constructor = AccessMultiNode;
          AccessMultiNode.displayName = "AccessMultiNode";
          if (typeof Node.extended === "function") {
            Node.extended(AccessMultiNode);
          }
          _AccessMultiNode_prototype.typeId = 2;
          AccessMultiNode.argNames = ["parent", "elements"];
          _AccessMultiNode_prototype.type = function () {
            return Type.array;
          };
          _AccessMultiNode_prototype._reduce = function (o) {
            var _this, parent, result, setParent, tmp, tmpIds;
            _this = this;
            parent = this.parent.reduce(o);
            setParent = parent;
            tmpIds = [];
            if (parent.cacheable) {
              tmp = o.makeTmp(o.indexFromPosition(this.index), "ref", parent.type(o));
              tmp.scope = this.scope;
              tmpIds.push(tmp.id);
              setParent = AssignNode(
                this.index,
                this.scope,
                tmp,
                "=",
                parent.doWrap(o)
              );
              parent = tmp;
            }
            result = ArrayNode(this.index, this.scope, (function () {
              var _arr, _arr2, _len, element, j;
              for (_arr = [], _arr2 = __toArray(_this.elements), j = 0, _len = _arr2.length; j < _len; ++j) {
                element = _arr2[j];
                _arr.push(AccessNode(
                  _this.index,
                  _this.scope,
                  j === 0 ? setParent : parent,
                  element.reduce(o)
                ));
              }
              return _arr;
            }()));
            if (tmpIds.length) {
              return TmpWrapperNode(this.index, this.scope, result, tmpIds);
            } else {
              return result;
            }
          };
          _AccessMultiNode_prototype.inspect = function (depth) {
            return inspectHelper(
              depth,
              "AccessMultiNode",
              this.index,
              this.parent,
              this.elements
            );
          };
          _AccessMultiNode_prototype.walk = function (f) {
            var elements, parent;
            parent = f(this.parent);
            elements = map(this.elements, f);
            if (parent !== this.parent || elements !== this.elements) {
              return AccessMultiNode(this.index, this.scope, parent, elements);
            } else {
              return this;
            }
          };
          _AccessMultiNode_prototype.walkAsync = function (f, callback) {
            var _once, _this;
            _this = this;
            return f(this.parent, (_once = false, function (_e, parent) {
              var _once2;
              if (_once) {
                throw Error("Attempted to call function more than once");
              } else {
                _once = true;
              }
              if (_e != null) {
                return callback(_e);
              }
              return mapAsync(_this.elements, f, (_once2 = false, function (_e2, elements) {
                if (_once2) {
                  throw Error("Attempted to call function more than once");
                } else {
                  _once2 = true;
                }
                if (_e2 != null) {
                  return callback(_e2);
                }
                return callback(null, parent !== _this.parent || elements !== _this.elements ? AccessMultiNode(_this.index, _this.scope, parent, elements) : _this);
              }));
            }));
          };
          return AccessMultiNode;
        }(Node));
        Node.Args = Node.byTypeId[3] = ArgsNode = (function (Node) {
          var _ArgsNode_prototype, _Node_prototype;
          function ArgsNode(index, scope) {
            var _this;
            _this = this instanceof ArgsNode ? this : __create(_ArgsNode_prototype);
            _this.index = index;
            _this.scope = scope;
            _this._reduced = void 0;
            _this._macroExpanded = void 0;
            _this._macroExpandAlled = void 0;
            return _this;
          }
          _Node_prototype = Node.prototype;
          _ArgsNode_prototype = ArgsNode.prototype = __create(_Node_prototype);
          _ArgsNode_prototype.constructor = ArgsNode;
          ArgsNode.displayName = "ArgsNode";
          if (typeof Node.extended === "function") {
            Node.extended(ArgsNode);
          }
          _ArgsNode_prototype.typeId = 3;
          ArgsNode.argNames = [];
          _ArgsNode_prototype.type = function () {
            return Type.args;
          };
          _ArgsNode_prototype.cacheable = false;
          _ArgsNode_prototype._isNoop = function () {
            return true;
          };
          _ArgsNode_prototype.inspect = function (depth) {
            return inspectHelper(depth, "ArgsNode", this.index);
          };
          return ArgsNode;
        }(Node));
        Node.Array = Node.byTypeId[4] = ArrayNode = (function (Node) {
          var _ArrayNode_prototype, _Node_prototype;
          function ArrayNode(index, scope, elements) {
            var _this;
            _this = this instanceof ArrayNode ? this : __create(_ArrayNode_prototype);
            if (elements == null) {
              elements = [];
            }
            _this.index = index;
            _this.scope = scope;
            _this._reduced = void 0;
            _this._macroExpanded = void 0;
            _this._macroExpandAlled = void 0;
            _this.elements = elements;
            return _this;
          }
          _Node_prototype = Node.prototype;
          _ArrayNode_prototype = ArrayNode.prototype = __create(_Node_prototype);
          _ArrayNode_prototype.constructor = ArrayNode;
          ArrayNode.displayName = "ArrayNode";
          if (typeof Node.extended === "function") {
            Node.extended(ArrayNode);
          }
          _ArrayNode_prototype.typeId = 4;
          ArrayNode.argNames = ["elements"];
          _ArrayNode_prototype.type = function () {
            return Type.array;
          };
          _ArrayNode_prototype._reduce = function (o) {
            var elements;
            elements = map(this.elements, function (x) {
              return x.reduce(o).doWrap(o);
            });
            if (elements !== this.elements) {
              return ArrayNode(this.index, this.scope, elements);
            } else {
              return this;
            }
          };
          _ArrayNode_prototype._isNoop = function (o) {
            var _arr, _every, _i, _len, _ref, element;
            if ((_ref = this.__isNoop) == null) {
              _every = true;
              for (_arr = __toArray(this.elements), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                element = _arr[_i];
                if (!element.isNoop(o)) {
                  _every = false;
                  break;
                }
              }
              return this.__isNoop = _every;
            } else {
              return _ref;
            }
          };
          _ArrayNode_prototype.isLiteral = function () {
            var _arr, _every, _i, _len, _ref, element;
            if ((_ref = this._isLiteral) == null) {
              _every = true;
              for (_arr = __toArray(this.elements), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                element = _arr[_i];
                if (!element.isLiteral()) {
                  _every = false;
                  break;
                }
              }
              return this._isLiteral = _every;
            } else {
              return _ref;
            }
          };
          _ArrayNode_prototype.literalValue = function () {
            var _arr, _arr2, _i, _len, element;
            for (_arr = [], _arr2 = __toArray(this.elements), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
              element = _arr2[_i];
              _arr.push(element.literalValue());
            }
            return _arr;
          };
          _ArrayNode_prototype.inspect = function (depth) {
            return inspectHelper(depth, "ArrayNode", this.index, this.elements);
          };
          _ArrayNode_prototype.walk = function (f) {
            var elements;
            elements = map(this.elements, f);
            if (elements !== this.elements) {
              return ArrayNode(this.index, this.scope, elements);
            } else {
              return this;
            }
          };
          _ArrayNode_prototype.walkAsync = function (f, callback) {
            var _once, _this;
            _this = this;
            return mapAsync(this.elements, f, (_once = false, function (_e, elements) {
              if (_once) {
                throw Error("Attempted to call function more than once");
              } else {
                _once = true;
              }
              if (_e != null) {
                return callback(_e);
              }
              return callback(null, elements !== _this.elements ? ArrayNode(_this.index, _this.scope, elements) : _this);
            }));
          };
          return ArrayNode;
        }(Node));
        Node.Assign = Node.byTypeId[5] = AssignNode = (function (Node) {
          var _AssignNode_prototype, _Node_prototype;
          function AssignNode(index, scope, left, op, right) {
            var _this;
            _this = this instanceof AssignNode ? this : __create(_AssignNode_prototype);
            _this.index = index;
            _this.scope = scope;
            _this._reduced = void 0;
            _this._macroExpanded = void 0;
            _this._macroExpandAlled = void 0;
            _this.left = left;
            _this.op = op;
            _this.right = right;
            return _this;
          }
          _Node_prototype = Node.prototype;
          _AssignNode_prototype = AssignNode.prototype = __create(_Node_prototype);
          _AssignNode_prototype.constructor = AssignNode;
          AssignNode.displayName = "AssignNode";
          if (typeof Node.extended === "function") {
            Node.extended(AssignNode);
          }
          _AssignNode_prototype.typeId = 5;
          AssignNode.argNames = ["left", "op", "right"];
          _AssignNode_prototype.type = (function () {
            var ops;
            ops = {
              "=": function (left, right) {
                return right;
              },
              "+=": function (left, right) {
                if (left.isSubsetOf(Type.numeric) && right.isSubsetOf(Type.numeric)) {
                  return Type.number;
                } else if (left.overlaps(Type.numeric) && right.overlaps(Type.numeric)) {
                  return Type.stringOrNumber;
                } else {
                  return Type.string;
                }
              },
              "-=": Type.number,
              "*=": Type.number,
              "/=": Type.number,
              "%=": Type.number,
              "<<=": Type.number,
              ">>=": Type.number,
              ">>>=": Type.number,
              "&=": Type.number,
              "^=": Type.number,
              "|=": Type.number
            };
            return function (o) {
              var _ref, _ref2, type;
              if ((_ref = this._type) == null) {
                if (__owns.call(ops, _ref2 = this.op)) {
                  type = ops[_ref2];
                }
                if (!type) {
                  return this._type = Type.any;
                } else if (typeof type === "function") {
                  return this._type = type(this.left.type(o), this.right.type(o));
                } else {
                  return this._type = type;
                }
              } else {
                return _ref;
              }
            };
          }());
          _AssignNode_prototype._reduce = function (o) {
            var left, right;
            left = this.left.reduce(o);
            right = this.right.reduce(o).doWrap(o);
            if (left !== this.left || right !== this.right) {
              return AssignNode(
                this.index,
                this.scope,
                left,
                this.op,
                right
              );
            } else {
              return this;
            }
          };
          _AssignNode_prototype.inspect = function (depth) {
            return inspectHelper(
              depth,
              "AssignNode",
              this.index,
              this.left,
              this.op,
              this.right
            );
          };
          _AssignNode_prototype.walk = function (f) {
            var left, right;
            left = f(this.left);
            right = f(this.right);
            if (left !== this.left || right !== this.right) {
              return AssignNode(
                this.index,
                this.scope,
                left,
                this.op,
                right
              );
            } else {
              return this;
            }
          };
          _AssignNode_prototype.walkAsync = function (f, callback) {
            var _once, _this;
            _this = this;
            return f(this.left, (_once = false, function (_e, left) {
              var _once2;
              if (_once) {
                throw Error("Attempted to call function more than once");
              } else {
                _once = true;
              }
              if (_e != null) {
                return callback(_e);
              }
              return f(_this.right, (_once2 = false, function (_e2, right) {
                if (_once2) {
                  throw Error("Attempted to call function more than once");
                } else {
                  _once2 = true;
                }
                if (_e2 != null) {
                  return callback(_e2);
                }
                return callback(null, left !== _this.left || right !== _this.right
                  ? AssignNode(
                    _this.index,
                    _this.scope,
                    left,
                    _this.op,
                    right
                  )
                  : _this);
              }));
            }));
          };
          return AssignNode;
        }(Node));
        Node.Binary = Node.byTypeId[6] = BinaryNode = (function (Node) {
          var _BinaryNode_prototype, _Node_prototype;
          function BinaryNode(index, scope, left, op, right) {
            var _this;
            _this = this instanceof BinaryNode ? this : __create(_BinaryNode_prototype);
            _this.index = index;
            _this.scope = scope;
            _this._reduced = void 0;
            _this._macroExpanded = void 0;
            _this._macroExpandAlled = void 0;
            _this.left = left;
            _this.op = op;
            _this.right = right;
            return _this;
          }
          _Node_prototype = Node.prototype;
          _BinaryNode_prototype = BinaryNode.prototype = __create(_Node_prototype);
          _BinaryNode_prototype.constructor = BinaryNode;
          BinaryNode.displayName = "BinaryNode";
          if (typeof Node.extended === "function") {
            Node.extended(BinaryNode);
          }
          _BinaryNode_prototype.typeId = 6;
          BinaryNode.argNames = ["left", "op", "right"];
          _BinaryNode_prototype.type = (function () {
            var ops;
            ops = {
              "*": Type.number,
              "/": Type.number,
              "%": Type.number,
              "+": function (left, right) {
                if (left.isSubsetOf(Type.numeric) && right.isSubsetOf(Type.numeric)) {
                  return Type.number;
                } else if (left.overlaps(Type.numeric) && right.overlaps(Type.numeric)) {
                  return Type.stringOrNumber;
                } else {
                  return Type.string;
                }
              },
              "-": Type.number,
              "<<": Type.number,
              ">>": Type.number,
              ">>>": Type.number,
              "<": Type.boolean,
              "<=": Type.boolean,
              ">": Type.boolean,
              ">=": Type.boolean,
              "in": Type.boolean,
              "instanceof": Type.boolean,
              "==": Type.boolean,
              "!=": Type.boolean,
              "===": Type.boolean,
              "!==": Type.boolean,
              "&": Type.number,
              "^": Type.number,
              "|": Type.number,
              "&&": function (left, right) {
                return left.intersect(Type.potentiallyFalsy).union(right);
              },
              "||": function (left, right) {
                return left.intersect(Type.potentiallyTruthy).union(right);
              }
            };
            return function (o) {
              var _ref, _ref2, type;
              if ((_ref = this._type) == null) {
                if (__owns.call(ops, _ref2 = this.op)) {
                  type = ops[_ref2];
                }
                if (!type) {
                  return this._type = Type.any;
                } else if (typeof type === "function") {
                  return this._type = type(this.left.type(o), this.right.type(o));
                } else {
                  return this._type = type;
                }
              } else {
                return _ref;
              }
            };
          }());
          _BinaryNode_prototype._reduce = (function () {
            var constOps, leftConstOps, nonConstOps, rightConstOps;
            constOps = {
              "*": __curry(2, function (x, y) {
                return x * y;
              }),
              "/": __curry(2, function (x, y) {
                return x / y;
              }),
              "%": __curry(2, function (x, y) {
                return x % y;
              }),
              "+": (function () {
                function isJSNumeric(x) {
                  var _ref;
                  return x === null || (_ref = typeof x) === "number" || _ref === "boolean" || _ref === "undefined";
                }
                return function (left, right) {
                  if (isJSNumeric(left) && isJSNumeric(right)) {
                    return left - -right;
                  } else {
                    return "" + left + right;
                  }
                };
              }()),
              "-": __curry(2, function (x, y) {
                return x - y;
              }),
              "<<": __curry(2, function (x, y) {
                return x << y;
              }),
              ">>": __curry(2, function (x, y) {
                return x >> y;
              }),
              ">>>": __curry(2, function (x, y) {
                return x >>> y;
              }),
              "<": __curry(2, function (x, y) {
                return x < y;
              }),
              "<=": __curry(2, function (x, y) {
                return x <= y;
              }),
              ">": __curry(2, function (x, y) {
                return x > y;
              }),
              ">=": __curry(2, function (x, y) {
                return x >= y;
              }),
              "==": __curry(2, function (x, y) {
                return x == y;
              }),
              "!=": __curry(2, function (x, y) {
                return x != y;
              }),
              "===": __curry(2, function (x, y) {
                return x === y;
              }),
              "!==": __curry(2, function (x, y) {
                return x !== y;
              }),
              "&": __curry(2, function (x, y) {
                return x & y;
              }),
              "^": __curry(2, function (x, y) {
                return x ^ y;
              }),
              "|": __curry(2, function (x, y) {
                return x | y;
              }),
              "&&": __curry(2, function (x, y) {
                return x && y;
              }),
              "||": __curry(2, function (x, y) {
                return x || y;
              })
            };
            function leftConstNan(x, y) {
              var _ref;
              if ((_ref = x.constValue()) !== _ref) {
                return BlockNode(this.index, this.scope, [y, x]);
              }
            }
            leftConstOps = {
              "*": function (x, y) {
                var _ref;
                if (x.constValue() === 1) {
                  return UnaryNode(this.index, this.scope, "+", y);
                } else if (x.constValue() === -1) {
                  return UnaryNode(this.index, this.scope, "-", y);
                } else if ((_ref = x.constValue()) !== _ref) {
                  return BlockNode(this.index, this.scope, [y, x]);
                }
              },
              "/": leftConstNan,
              "%": leftConstNan,
              "+": function (x, y, o) {
                var _ref;
                if (x.constValue() === 0 && y.type(o).isSubsetOf(Type.number)) {
                  return UnaryNode(this.index, this.scope, "+", y);
                } else if (x.constValue() === "" && y.type(o).isSubsetOf(Type.string)) {
                  return y;
                } else if (typeof x.constValue() === "string" && y instanceof BinaryNode && y.op === "+" && y.left.isConst() && typeof y.left.constValue() === "string") {
                  return BinaryNode(
                    this.index,
                    this.scope,
                    ConstNode(x.index, this.scope, "" + x.constValue() + y.left.constValue()),
                    "+",
                    y.right
                  );
                } else if ((_ref = x.constValue()) !== _ref) {
                  return BlockNode(this.index, this.scope, [y, x]);
                }
              },
              "-": function (x, y) {
                var _ref;
                if (x.constValue() === 0) {
                  return UnaryNode(this.index, this.scope, "-", y);
                } else if ((_ref = x.constValue()) !== _ref) {
                  return BlockNode(this.index, this.scope, [y, x]);
                }
              },
              "<<": leftConstNan,
              ">>": leftConstNan,
              ">>>": leftConstNan,
              "&": leftConstNan,
              "|": leftConstNan,
              "^": leftConstNan,
              "&&": function (x, y) {
                if (x.constValue()) {
                  return y;
                } else {
                  return x;
                }
              },
              "||": function (x, y) {
                if (x.constValue()) {
                  return x;
                } else {
                  return y;
                }
              }
            };
            function rightConstNan(x, y) {
              var _ref;
              if ((_ref = y.constValue()) !== _ref) {
                return BlockNode(this.index, this.scope, [x, y]);
              }
            }
            rightConstOps = {
              "*": function (x, y) {
                var _ref;
                if (y.constValue() === 1) {
                  return UnaryNode(this.index, this.scope, "+", x);
                } else if (y.constValue() === -1) {
                  return UnaryNode(this.index, this.scope, "-", x);
                } else if ((_ref = y.constValue()) !== _ref) {
                  return BlockNode(this.index, this.scope, [x, y]);
                }
              },
              "/": function (x, y) {
                var _ref;
                if (y.constValue() === 1) {
                  return UnaryNode(this.index, this.scope, "+", x);
                } else if (y.constValue() === -1) {
                  return UnaryNode(this.index, this.scope, "-", x);
                } else if ((_ref = y.constValue()) !== _ref) {
                  return BlockNode(this.index, this.scope, [x, y]);
                }
              },
              "%": rightConstNan,
              "+": function (x, y, o) {
                var _ref;
                if (y.constValue() === 0 && x.type(o).isSubsetOf(Type.number)) {
                  return UnaryNode(this.index, this.scope, "+", x);
                } else if (typeof y.constValue() === "number" && y.constValue() < 0 && x.type(o).isSubsetOf(Type.number)) {
                  return BinaryNode(
                    this.index,
                    this.scope,
                    x,
                    "-",
                    ConstNode(y.index, this.scope, -y.constValue())
                  );
                } else if (y.constValue() === "" && x.type(o).isSubsetOf(Type.string)) {
                  return x;
                } else if (typeof y.constValue() === "string" && x instanceof BinaryNode && x.op === "+" && x.right.isConst() && typeof x.right.constValue() === "string") {
                  return BinaryNode(
                    this.index,
                    this.scope,
                    x.left,
                    "+",
                    ConstNode(x.right.index, this.scope, "" + x.right.constValue() + y.constValue())
                  );
                } else if ((_ref = y.constValue()) !== _ref) {
                  return BlockNode(this.index, this.scope, [x, y]);
                }
              },
              "-": function (x, y, o) {
                var _ref;
                if (y.constValue() === 0) {
                  return UnaryNode(this.index, this.scope, "+", x);
                } else if (typeof y.constValue() === "number" && y.constValue() < 0 && x.type(o).isSubsetOf(Type.number)) {
                  return BinaryNode(
                    this.index,
                    this.scope,
                    x,
                    "+",
                    ConstNode(y.index, this.scope, -y.constValue())
                  );
                } else if ((_ref = y.constValue()) !== _ref) {
                  return BlockNode(this.index, this.scope, [x, y]);
                }
              },
              "<<": rightConstNan,
              ">>": rightConstNan,
              ">>>": rightConstNan,
              "&": rightConstNan,
              "|": rightConstNan,
              "^": rightConstNan
            };
            function removeUnaryPlus(x, y) {
              var newX, newY;
              if (x instanceof UnaryNode && x.op === "+") {
                newX = x.node;
              } else {
                newX = x;
              }
              if (y instanceof UnaryNode && y.op === "+") {
                newY = y.node;
              } else {
                newY = y;
              }
              if (x !== newX || y !== newY) {
                return BinaryNode(
                  this.index,
                  this.scope,
                  newX,
                  this.op,
                  newY
                );
              }
            }
            nonConstOps = {
              "*": removeUnaryPlus,
              "/": removeUnaryPlus,
              "%": removeUnaryPlus,
              "-": removeUnaryPlus,
              "<<": removeUnaryPlus,
              ">>": removeUnaryPlus,
              ">>>": removeUnaryPlus,
              "&": removeUnaryPlus,
              "^": removeUnaryPlus,
              "|": removeUnaryPlus,
              "&&": function (x, y, o) {
                var truthy, xRightType, xType;
                xType = x.type(o);
                if (xType.isSubsetOf(Type.alwaysTruthy)) {
                  return BlockNode(this.index, this.scope, [x, y]);
                } else if (xType.isSubsetOf(Type.alwaysFalsy)) {
                  return x;
                } else if (x instanceof BinaryNode && x.op === "&&") {
                  if (x.right.isConst()) {
                    truthy = !!x.right.constValue();
                  } else {
                    xRightType = x.right.type(o);
                    if (xRightType.isSubsetOf(Type.alwaysTruthy)) {
                      truthy = true;
                    } else if (xRightType.isSubsetOf(Type.alwaysFalsy)) {
                      truthy = false;
                    } else {
                      truthy = null;
                    }
                  }
                  if (truthy === true) {
                    return BinaryNode(
                      this.index,
                      this.scope,
                      x.left,
                      "&&",
                      BlockNode(x.right.index, this.scope, [x.right, y])
                    );
                  } else if (truthy === false) {
                    return x;
                  }
                }
              },
              "||": function (x, y, o) {
                var test, truthy, whenTrue, xRightType, xType;
                xType = x.type(o);
                if (xType.isSubsetOf(Type.alwaysTruthy)) {
                  return x;
                } else if (xType.isSubsetOf(Type.alwaysFalsy)) {
                  return BlockNode(this.index, this.scope, [x, y]);
                } else if (x instanceof BinaryNode && x.op === "||") {
                  if (x.right.isConst()) {
                    truthy = !!x.right.constValue();
                  } else {
                    xRightType = x.right.type(o);
                    if (xRightType.isSubsetOf(Type.alwaysTruthy)) {
                      truthy = true;
                    } else if (xRightType.isSubsetOf(Type.alwaysFalsy)) {
                      truthy = false;
                    } else {
                      truthy = null;
                    }
                  }
                  if (truthy === true) {
                    return x;
                  } else if (truthy === false) {
                    return BinaryNode(
                      this.index,
                      this.scope,
                      x.left,
                      "||",
                      BlockNode(x.right.index, this.scope, [x.right, y])
                    );
                  }
                } else if (x instanceof IfNode && x.whenFalse.isConst() && !x.whenFalse.constValue()) {
                  test = x.test;
                  whenTrue = x.whenTrue;
                  while (whenTrue instanceof IfNode && whenTrue.whenFalse.isConst() && !whenTrue.whenFalse.constValue()) {
                    test = BinaryNode(
                      x.index,
                      x.scope,
                      test,
                      "&&",
                      whenTrue.test
                    );
                    whenTrue = whenTrue.whenTrue;
                  }
                  return BinaryNode(
                    this.index,
                    this.scope,
                    BinaryNode(
                      x.index,
                      x.scope,
                      test,
                      "&&",
                      whenTrue
                    ),
                    "||",
                    y
                  );
                }
              }
            };
            return function (o) {
              var _ref, _ref2, left, op, right;
              left = this.left.reduce(o).doWrap(o);
              right = this.right.reduce(o).doWrap(o);
              op = this.op;
              if (left.isConst()) {
                if (right.isConst() && __owns.call(constOps, op)) {
                  return ConstNode(this.index, this.scope, constOps[op](left.constValue(), right.constValue()));
                }
                if (__owns.call(leftConstOps, op)) {
                  if ((_ref = leftConstOps[op].call(this, left, right, o)) != null) {
                    return _ref;
                  }
                } else if ((_ref2 = void 0) != null) {
                  return _ref2;
                }
              }
              if (right.isConst()) {
                if (__owns.call(rightConstOps, op)) {
                  if ((_ref = rightConstOps[op].call(this, left, right, o)) != null) {
                    return _ref;
                  }
                } else if ((_ref2 = void 0) != null) {
                  return _ref2;
                }
              }
              if (__owns.call(nonConstOps, op)) {
                if ((_ref = nonConstOps[op].call(this, left, right, o)) != null) {
                  return _ref;
                }
              } else if ((_ref2 = void 0) != null) {
                return _ref2;
              }
              if (left !== this.left || right !== this.right) {
                return BinaryNode(
                  this.index,
                  this.scope,
                  left,
                  op,
                  right
                );
              } else {
                return this;
              }
            };
          }());
          _BinaryNode_prototype._isNoop = function (o) {
            var _ref;
            if ((_ref = this.__isNoop) == null) {
              return this.__isNoop = this.left.isNoop(o) && this.right.isNoop(o);
            } else {
              return _ref;
            }
          };
          _BinaryNode_prototype.inspect = function (depth) {
            return inspectHelper(
              depth,
              "BinaryNode",
              this.index,
              this.left,
              this.op,
              this.right
            );
          };
          _BinaryNode_prototype.walk = function (f) {
            var left, right;
            left = f(this.left);
            right = f(this.right);
            if (left !== this.left || right !== this.right) {
              return BinaryNode(
                this.index,
                this.scope,
                left,
                this.op,
                right
              );
            } else {
              return this;
            }
          };
          _BinaryNode_prototype.walkAsync = function (f, callback) {
            var _once, _this;
            _this = this;
            return f(this.left, (_once = false, function (_e, left) {
              var _once2;
              if (_once) {
                throw Error("Attempted to call function more than once");
              } else {
                _once = true;
              }
              if (_e != null) {
                return callback(_e);
              }
              return f(_this.right, (_once2 = false, function (_e2, right) {
                if (_once2) {
                  throw Error("Attempted to call function more than once");
                } else {
                  _once2 = true;
                }
                if (_e2 != null) {
                  return callback(_e2);
                }
                return callback(null, left !== _this.left || right !== _this.right
                  ? BinaryNode(
                    _this.index,
                    _this.scope,
                    left,
                    _this.op,
                    right
                  )
                  : _this);
              }));
            }));
          };
          return BinaryNode;
        }(Node));
        Node.Block = Node.byTypeId[7] = BlockNode = (function (Node) {
          var _BlockNode_prototype, _Node_prototype;
          function BlockNode(index, scope, nodes, label) {
            var _this;
            _this = this instanceof BlockNode ? this : __create(_BlockNode_prototype);
            if (nodes == null) {
              nodes = [];
            }
            if (label == null) {
              label = null;
            }
            _this.index = index;
            _this.scope = scope;
            _this._reduced = void 0;
            _this._macroExpanded = void 0;
            _this._macroExpandAlled = void 0;
            _this.nodes = nodes;
            _this.label = label;
            return _this;
          }
          _Node_prototype = Node.prototype;
          _BlockNode_prototype = BlockNode.prototype = __create(_Node_prototype);
          _BlockNode_prototype.constructor = BlockNode;
          BlockNode.displayName = "BlockNode";
          if (typeof Node.extended === "function") {
            Node.extended(BlockNode);
          }
          _BlockNode_prototype.typeId = 7;
          BlockNode.argNames = ["nodes", "label"];
          _BlockNode_prototype.type = function (o) {
            var _arr, _end, _i, _len, _ref, node, nodes;
            if ((_ref = this._type) == null) {
              nodes = this.nodes;
              if (nodes.length === 0) {
                return this._type = Type["undefined"];
              } else {
                for (_arr = __toArray(nodes), _i = 0, _len = _arr.length, _end = -1, _end += _len, _end > _len && (_end = _len); _i < _end; ++_i) {
                  node = _arr[_i];
                  node.type(o);
                }
                return this._type = nodes[nodes.length - 1].type(o);
              }
            } else {
              return _ref;
            }
          };
          _BlockNode_prototype.withLabel = function (label, o) {
            var _ref, _this;
            _this = this;
            if (label == null) {
              label = null;
            }
            if (this.label == null) {
              if (this.nodes.length === 1) {
                return this.nodes[0].withLabel(label, o);
              } else if (this.nodes.length > 1 && (_ref = this.nodes)[_ref.length - 1] instanceof ForInNode && (function () {
                var _arr, _end, _every, _i, _len, node;
                _every = true;
                for (_arr = __toArray(_this.nodes), _i = 0, _len = _arr.length, _end = -1, _end += _len, _end > _len && (_end = _len); _i < _end; ++_i) {
                  node = _arr[_i];
                  if (!(node instanceof AssignNode) && !(node instanceof VarNode)) {
                    _every = false;
                    break;
                  }
                }
                return _every;
              }())) {
                return BlockNode(this.index, this.scope, __slice.call(this.nodes, 0, -1).concat([(_ref = this.nodes)[_ref.length - 1].withLabel(label, o)]));
              }
            }
            return BlockNode(this.index, this.scope, this.nodes, label);
          };
          _BlockNode_prototype._reduce = function (o) {
            var _arr, body, changed, i, label, len, node, reduced;
            changed = false;
            body = [];
            for (_arr = __toArray(this.nodes), i = 0, len = _arr.length; i < len; ++i) {
              node = _arr[i];
              reduced = node.reduce(o);
              if (reduced instanceof BlockNode && reduced.label == null) {
                body.push.apply(body, __toArray(reduced.nodes));
                changed = true;
              } else if (reduced instanceof NothingNode) {
                changed = true;
              } else if (reduced instanceof BreakNode || reduced instanceof ContinueNode || reduced instanceof ThrowNode || reduced instanceof ReturnNode) {
                body.push(reduced);
                if (reduced !== node || i < len - 1) {
                  changed = true;
                }
                break;
              } else {
                body.push(reduced);
                if (reduced !== node) {
                  changed = true;
                }
              }
            }
            if (this.label != null) {
              label = this.label.reduce(o);
            } else {
              label = this.label;
            }
            if (body.length === 0) {
              return NothingNode(this.index, this.scope);
            } else if (label == null && body.length === 1) {
              return body[0];
            } else if (changed || label !== this.label) {
              return BlockNode(this.index, this.scope, body, label);
            } else {
              return this;
            }
          };
          _BlockNode_prototype.isStatement = function () {
            var _arr, _i, _some, node;
            _some = false;
            for (_arr = __toArray(this.nodes), _i = _arr.length; _i--; ) {
              node = _arr[_i];
              if (node.isStatement()) {
                _some = true;
                break;
              }
            }
            return _some;
          };
          _BlockNode_prototype._isNoop = function (o) {
            var _arr, _every, _i, _ref, node;
            if ((_ref = this.__isNoop) == null) {
              _every = true;
              for (_arr = __toArray(this.nodes), _i = _arr.length; _i--; ) {
                node = _arr[_i];
                if (!node.isNoop(o)) {
                  _every = false;
                  break;
                }
              }
              return this.__isNoop = _every;
            } else {
              return _ref;
            }
          };
          _BlockNode_prototype.mutateLast = function (o, func, includeNoop) {
            var lastNode, len, nodes;
            nodes = this.nodes;
            len = nodes.length;
            if (len === 0) {
              return Noop(this.index, this.scope).mutateLast(o, func, includeNoop);
            } else {
              lastNode = nodes[len - 1].mutateLast(o, func, includeNoop);
              if (lastNode !== nodes[len - 1]) {
                return BlockNode(this.index, this.scope, __toArray(__slice.call(nodes, 0, -1)).concat([lastNode]));
              } else {
                return this;
              }
            }
          };
          _BlockNode_prototype.inspect = function (depth) {
            return inspectHelper(
              depth,
              "BlockNode",
              this.index,
              this.nodes,
              this.label
            );
          };
          _BlockNode_prototype.walk = function (f) {
            var label, nodes;
            nodes = map(this.nodes, f);
            if (this.label instanceof Node) {
              label = f(this.label);
            } else {
              label = this.label;
            }
            if (nodes !== this.nodes || label !== this.label) {
              return BlockNode(this.index, this.scope, nodes, label);
            } else {
              return this;
            }
          };
          _BlockNode_prototype.walkAsync = function (f, callback) {
            var _once, _this;
            _this = this;
            return mapAsync(this.nodes, f, (_once = false, function (_e, nodes) {
              if (_once) {
                throw Error("Attempted to call function more than once");
              } else {
                _once = true;
              }
              if (_e != null) {
                return callback(_e);
              }
              return (_this.label instanceof Node
                ? function (next) {
                  var _once2;
                  return f(_this.label, (_once2 = false, function (_e2, label) {
                    if (_once2) {
                      throw Error("Attempted to call function more than once");
                    } else {
                      _once2 = true;
                    }
                    if (_e2 != null) {
                      return callback(_e2);
                    }
                    return next(label);
                  }));
                }
                : function (next) {
                  return next(_this.label);
                })(function (label) {
                return callback(null, nodes !== _this.nodes || label !== _this.label ? BlockNode(_this.index, _this.scope, nodes, label) : _this);
              });
            }));
          };
          return BlockNode;
        }(Node));
        Node.Break = Node.byTypeId[8] = BreakNode = (function (Node) {
          var _BreakNode_prototype, _Node_prototype;
          function BreakNode(index, scope, label) {
            var _this;
            _this = this instanceof BreakNode ? this : __create(_BreakNode_prototype);
            if (label == null) {
              label = null;
            }
            _this.index = index;
            _this.scope = scope;
            _this._reduced = void 0;
            _this._macroExpanded = void 0;
            _this._macroExpandAlled = void 0;
            _this.label = label;
            return _this;
          }
          _Node_prototype = Node.prototype;
          _BreakNode_prototype = BreakNode.prototype = __create(_Node_prototype);
          _BreakNode_prototype.constructor = BreakNode;
          BreakNode.displayName = "BreakNode";
          if (typeof Node.extended === "function") {
            Node.extended(BreakNode);
          }
          _BreakNode_prototype.typeId = 8;
          BreakNode.argNames = ["label"];
          _BreakNode_prototype.type = function () {
            return Type["undefined"];
          };
          _BreakNode_prototype.isStatement = function () {
            return true;
          };
          _BreakNode_prototype.withLabel = function (label) {
            if (label == null) {
              label = null;
            }
            return BreakNode(this.index, this.scope, label);
          };
          _BreakNode_prototype.mutateLast = function () {
            return this;
          };
          _BreakNode_prototype.inspect = function (depth) {
            return inspectHelper(depth, "BreakNode", this.index, this.label);
          };
          _BreakNode_prototype.walk = function (f) {
            var label;
            if (this.label instanceof Node) {
              label = f(this.label);
            } else {
              label = this.label;
            }
            if (label !== this.label) {
              return BreakNode(this.index, this.scope, label);
            } else {
              return this;
            }
          };
          _BreakNode_prototype.walkAsync = function (f, callback) {
            var _this;
            _this = this;
            return (this.label instanceof Node
              ? function (next) {
                var _once;
                return f(_this.label, (_once = false, function (_e, label) {
                  if (_once) {
                    throw Error("Attempted to call function more than once");
                  } else {
                    _once = true;
                  }
                  if (_e != null) {
                    return callback(_e);
                  }
                  return next(label);
                }));
              }
              : function (next) {
                return next(_this.label);
              })(function (label) {
              return callback(null, label !== _this.label ? BreakNode(_this.index, _this.scope, label) : _this);
            });
          };
          return BreakNode;
        }(Node));
        Node.Call = Node.byTypeId[9] = CallNode = (function (Node) {
          var _CallNode_prototype, _Node_prototype;
          function CallNode(index, scope, func, args, isNew, isApply) {
            var _this;
            _this = this instanceof CallNode ? this : __create(_CallNode_prototype);
            if (args == null) {
              args = [];
            }
            if (isNew == null) {
              isNew = false;
            }
            if (isApply == null) {
              isApply = false;
            }
            _this.index = index;
            _this.scope = scope;
            _this._reduced = void 0;
            _this._macroExpanded = void 0;
            _this._macroExpandAlled = void 0;
            _this.func = func;
            _this.args = args;
            _this.isNew = isNew;
            _this.isApply = isApply;
            return _this;
          }
          _Node_prototype = Node.prototype;
          _CallNode_prototype = CallNode.prototype = __create(_Node_prototype);
          _CallNode_prototype.constructor = CallNode;
          CallNode.displayName = "CallNode";
          if (typeof Node.extended === "function") {
            Node.extended(CallNode);
          }
          _CallNode_prototype.typeId = 9;
          CallNode.argNames = ["func", "args", "isNew", "isApply"];
          _CallNode_prototype.type = (function () {
            var PRIMORDIAL_FUNCTIONS, PRIMORDIAL_METHODS, PRIMORDIAL_SUBFUNCTIONS;
            PRIMORDIAL_FUNCTIONS = {
              Object: Type.object,
              String: Type.string,
              Number: Type.number,
              Boolean: Type.boolean,
              Function: Type["function"],
              Array: Type.array,
              Date: Type.string,
              RegExp: Type.regexp,
              Error: Type.error,
              RangeError: Type.error,
              ReferenceError: Type.error,
              SyntaxError: Type.error,
              TypeError: Type.error,
              URIError: Type.error,
              escape: Type.string,
              unescape: Type.string,
              parseInt: Type.number,
              parseFloat: Type.number,
              isNaN: Type.boolean,
              isFinite: Type.boolean,
              decodeURI: Type.string,
              decodeURIComponent: Type.string,
              encodeURI: Type.string,
              encodeURIComponent: Type.string
            };
            PRIMORDIAL_SUBFUNCTIONS = {
              Object: {
                getPrototypeOf: Type.object,
                getOwnPropertyDescriptor: Type.object,
                getOwnPropertyNames: Type.string.array(),
                create: Type.object,
                defineProperty: Type.object,
                defineProperties: Type.object,
                seal: Type.object,
                freeze: Type.object,
                preventExtensions: Type.object,
                isSealed: Type.boolean,
                isFrozen: Type.boolean,
                isExtensible: Type.boolean,
                keys: Type.string.array()
              },
              String: { fromCharCode: Type.string },
              Number: { isFinite: Type.boolean, isNaN: Type.boolean },
              Array: { isArray: Type.boolean },
              Math: {
                abs: Type.number,
                acos: Type.number,
                asin: Type.number,
                atan: Type.number,
                atan2: Type.number,
                ceil: Type.number,
                cos: Type.number,
                exp: Type.number,
                floor: Type.number,
                log: Type.number,
                max: Type.number,
                min: Type.number,
                pow: Type.number,
                random: Type.number,
                round: Type.number,
                sin: Type.number,
                sqrt: Type.number,
                tan: Type.number
              },
              JSON: { stringify: Type.string.union(Type["undefined"]), parse: Type.string.union(Type.number).union(Type.boolean).union(Type["null"]).union(Type.array).union(Type.object) },
              Date: { UTC: Type.number, now: Type.number }
            };
            PRIMORDIAL_METHODS = {
              String: {
                toString: Type.string,
                valueOf: Type.string,
                charAt: Type.string,
                charCodeAt: Type.number,
                concat: Type.string,
                indexOf: Type.number,
                lastIndexOf: Type.number,
                localeCompare: Type.number,
                match: Type.array.union(Type["null"]),
                replace: Type.string,
                search: Type.number,
                slice: Type.string,
                split: Type.string.array(),
                substring: Type.string,
                toLowerCase: Type.string,
                toLocaleLowerCase: Type.string,
                toUpperCase: Type.string,
                toLocaleUpperCase: Type.string,
                trim: Type.string
              },
              Boolean: { toString: Type.string, valueOf: Type.boolean },
              Number: {
                toString: Type.string,
                valueOf: Type.number,
                toLocaleString: Type.string,
                toFixed: Type.string,
                toExponential: Type.string,
                toPrecision: Type.string
              },
              Date: {
                toString: Type.string,
                toDateString: Type.string,
                toTimeString: Type.string,
                toLocaleString: Type.string,
                toLocaleDateString: Type.string,
                toLocaleTimeString: Type.string,
                valueOf: Type.number,
                getTime: Type.number,
                getFullYear: Type.number,
                getUTCFullYear: Type.number,
                getMonth: Type.number,
                getUTCMonth: Type.number,
                getDate: Type.number,
                getUTCDate: Type.number,
                getDay: Type.number,
                getUTCDay: Type.number,
                getHours: Type.number,
                getUTCHours: Type.number,
                getMinutes: Type.number,
                getUTCMinutes: Type.number,
                getSeconds: Type.number,
                getUTCSeconds: Type.number,
                getMilliseconds: Type.number,
                getUTCMilliseconds: Type.number,
                getTimezoneOffset: Type.number,
                setTime: Type.number,
                setMilliseconds: Type.number,
                setUTCMilliseconds: Type.number,
                setSeconds: Type.number,
                setUTCSeconds: Type.number,
                setMinutes: Type.number,
                setUTCMinutes: Type.number,
                setHours: Type.number,
                setUTCHours: Type.number,
                setDate: Type.number,
                setUTCDate: Type.number,
                setMonth: Type.number,
                setUTCMonth: Type.number,
                setFullYear: Type.number,
                setUTCFullYear: Type.number,
                toUTCString: Type.string,
                toISOString: Type.string,
                toJSON: Type.string
              },
              RegExp: { exec: Type.array.union(Type["null"]), test: Type.boolean, toString: Type.string },
              Error: { toString: Type.string }
            };
            return function (o) {
              var _ref, _this;
              _this = this;
              if ((_ref = this._type) == null) {
                return this._type = (function () {
                  var _ref, _ref2, _ref3, _ref4, _ref5, child, func, funcType, name,
                      parent, parentType;
                  func = _this.func;
                  funcType = func.type(o);
                  if (funcType.isSubsetOf(Type["function"])) {
                    return funcType.args[0];
                  } else if (func instanceof IdentNode) {
                    name = func.name;
                    if (__owns.call(PRIMORDIAL_FUNCTIONS, name)) {
                      return PRIMORDIAL_FUNCTIONS[name];
                    } else if (o != null ? o.macros.hasHelper(name) : void 0) {
                      funcType = o.macros.helperType(name);
                      if (funcType.isSubsetOf(Type["function"])) {
                        return funcType.args[0];
                      }
                    }
                  } else if (func instanceof AccessNode) {
                    parent = func.parent;
                    child = func.child;
                    if (child instanceof ConstNode) {
                      if ((_ref = child.value) === "call" || _ref === "apply") {
                        parentType = parent.type(o);
                        if (parentType.isSubsetOf(Type["function"])) {
                          return parentType.args[0];
                        }
                      } else if (parent instanceof IdentNode) {
                        if (__owns.call(PRIMORDIAL_SUBFUNCTIONS, _ref = parent.name)) {
                          if (__owns.call(_ref2 = PRIMORDIAL_SUBFUNCTIONS[_ref], _ref3 = child.value)) {
                            if ((_ref4 = _ref2[_ref3]) != null) {
                              return _ref4;
                            }
                          } else if ((_ref5 = void 0) != null) {
                            return _ref5;
                          }
                        } else if ((_ref2 = void 0) != null) {
                          return _ref2;
                        }
                      }
                    }
                  }
                  return Type.any;
                }());
              } else {
                return _ref;
              }
            };
          }());
          _CallNode_prototype._reduce = (function () {
            var PURE_PRIMORDIAL_FUNCTIONS, PURE_PRIMORDIAL_SUBFUNCTIONS;
            PURE_PRIMORDIAL_FUNCTIONS = {
              escape: true,
              unescape: true,
              parseInt: true,
              parseFloat: true,
              isNaN: true,
              isFinite: true,
              decodeURI: true,
              decodeURIComponent: true,
              encodeURI: true,
              encodeURIComponent: true,
              String: true,
              Boolean: true,
              Number: true,
              RegExp: true
            };
            PURE_PRIMORDIAL_SUBFUNCTIONS = {
              String: { fromCharCode: true },
              Number: { isFinite: true, isNaN: true },
              Math: {
                abs: true,
                acos: true,
                asin: true,
                atan: true,
                atan2: true,
                ceil: true,
                cos: true,
                exp: true,
                floor: true,
                log: true,
                max: true,
                min: true,
                pow: true,
                round: true,
                sin: true,
                sqrt: true,
                tan: true
              },
              JSON: { parse: true, stringify: true }
            };
            return function (o) {
              var _arr, _i, _len, _ref, _ref2, _ref3, allConst, arg, args, child,
                  constArgs, cValue, func, parent, pValue, value;
              func = this.func.reduce(o).doWrap(o);
              args = map(this.args, function (node) {
                return node.reduce(o).doWrap(o);
              });
              if (!this.isNew && !this.isApply) {
                constArgs = [];
                allConst = true;
                for (_arr = __toArray(args), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                  arg = _arr[_i];
                  if (arg.isConst()) {
                    constArgs.push(arg.constValue());
                  } else {
                    allConst = false;
                    break;
                  }
                }
                if (allConst) {
                  if (func instanceof IdentNode) {
                    if (__owns.call(PURE_PRIMORDIAL_FUNCTIONS, func.name)) {
                      try {
                        value = GLOBAL[func.name].apply(void 0, __toArray(constArgs));
                        if (value === null || (_ref = typeof value) === "number" || _ref === "string" || _ref === "boolean" || _ref === "undefined") {
                          return ConstNode(this.index, this.scope, value);
                        }
                      } catch (e) {}
                    }
                  } else if (func instanceof AccessNode && func.child.isConst()) {
                    parent = func.parent;
                    child = func.child;
                    cValue = child.constValue();
                    if (parent.isConst()) {
                      pValue = parent.constValue();
                      if (typeof pValue[cValue] === "function") {
                        try {
                          value = pValue[cValue].apply(pValue, __toArray(constArgs));
                          if (value === null || (_ref = typeof value) === "number" || _ref === "string" || _ref === "boolean" || _ref === "undefined") {
                            return ConstNode(this.index, this.scope, value);
                          }
                        } catch (e) {}
                      }
                    } else if (parent instanceof IdentNode && (__owns.call(PURE_PRIMORDIAL_SUBFUNCTIONS, _ref = parent.name) && __owns.call(_ref2 = PURE_PRIMORDIAL_SUBFUNCTIONS[_ref], _ref3 = child.value) ? _ref2[_ref3] : void 0)) {
                      try {
                        value = (_ref = GLOBAL[parent.name])[cValue].apply(_ref, __toArray(constArgs));
                        if (value === null || (_ref = typeof value) === "number" || _ref === "string" || _ref === "boolean" || _ref === "undefined") {
                          return ConstNode(this.index, this.scope, value);
                        }
                      } catch (e) {}
                    }
                  }
                }
              }
              if (func !== this.func || args !== this.args) {
                return CallNode(
                  this.index,
                  this.scope,
                  func,
                  args,
                  this.isNew,
                  this.isApply
                );
              } else {
                return this;
              }
            };
          }());
          _CallNode_prototype.inspect = function (depth) {
            return inspectHelper(
              depth,
              "CallNode",
              this.index,
              this.func,
              this.args,
              this.isNew,
              this.isApply
            );
          };
          _CallNode_prototype.walk = function (f) {
            var args, func;
            func = f(this.func);
            args = map(this.args, f);
            if (func !== this.func || args !== this.args) {
              return CallNode(
                this.index,
                this.scope,
                func,
                args,
                this.isNew,
                this.isApply
              );
            } else {
              return this;
            }
          };
          _CallNode_prototype.walkAsync = function (f, callback) {
            var _once, _this;
            _this = this;
            return f(this.func, (_once = false, function (_e, func) {
              var _once2;
              if (_once) {
                throw Error("Attempted to call function more than once");
              } else {
                _once = true;
              }
              if (_e != null) {
                return callback(_e);
              }
              return mapAsync(_this.args, f, (_once2 = false, function (_e2, args) {
                if (_once2) {
                  throw Error("Attempted to call function more than once");
                } else {
                  _once2 = true;
                }
                if (_e2 != null) {
                  return callback(_e2);
                }
                return callback(null, func !== _this.func || args !== _this.args
                  ? CallNode(
                    _this.index,
                    _this.scope,
                    func,
                    args,
                    _this.isNew,
                    _this.isApply
                  )
                  : _this);
              }));
            }));
          };
          return CallNode;
        }(Node));
        Node.Cascade = Node.byTypeId[10] = CascadeNode = (function (Node) {
          var _CascadeNode_prototype, _Node_prototype;
          function CascadeNode(index, scope, node, cascades) {
            var _this;
            _this = this instanceof CascadeNode ? this : __create(_CascadeNode_prototype);
            if (cascades == null) {
              cascades = [];
            }
            _this.index = index;
            _this.scope = scope;
            _this._reduced = void 0;
            _this._macroExpanded = void 0;
            _this._macroExpandAlled = void 0;
            _this.node = node;
            _this.cascades = cascades;
            return _this;
          }
          _Node_prototype = Node.prototype;
          _CascadeNode_prototype = CascadeNode.prototype = __create(_Node_prototype);
          _CascadeNode_prototype.constructor = CascadeNode;
          CascadeNode.displayName = "CascadeNode";
          if (typeof Node.extended === "function") {
            Node.extended(CascadeNode);
          }
          _CascadeNode_prototype.typeId = 10;
          CascadeNode.argNames = ["node", "cascades"];
          _CascadeNode_prototype.inspect = function (depth) {
            return inspectHelper(
              depth,
              "CascadeNode",
              this.index,
              this.node,
              this.cascades
            );
          };
          _CascadeNode_prototype.walk = function (f) {
            var node;
            node = f(this.node);
            if (node !== this.node) {
              return CascadeNode(this.index, this.scope, node, this.cascades);
            } else {
              return this;
            }
          };
          _CascadeNode_prototype.walkAsync = function (f, callback) {
            var _once, _this;
            _this = this;
            return f(this.node, (_once = false, function (_e, node) {
              if (_once) {
                throw Error("Attempted to call function more than once");
              } else {
                _once = true;
              }
              if (_e != null) {
                return callback(_e);
              }
              return callback(null, node !== _this.node ? CascadeNode(_this.index, _this.scope, node, _this.cascades) : _this);
            }));
          };
          return CascadeNode;
        }(Node));
        Node.Comment = Node.byTypeId[11] = CommentNode = (function (Node) {
          var _CommentNode_prototype, _Node_prototype;
          function CommentNode(index, scope, text) {
            var _this;
            _this = this instanceof CommentNode ? this : __create(_CommentNode_prototype);
            _this.index = index;
            _this.scope = scope;
            _this._reduced = void 0;
            _this._macroExpanded = void 0;
            _this._macroExpandAlled = void 0;
            _this.text = text;
            return _this;
          }
          _Node_prototype = Node.prototype;
          _CommentNode_prototype = CommentNode.prototype = __create(_Node_prototype);
          _CommentNode_prototype.constructor = CommentNode;
          CommentNode.displayName = "CommentNode";
          if (typeof Node.extended === "function") {
            Node.extended(CommentNode);
          }
          _CommentNode_prototype.typeId = 11;
          CommentNode.argNames = ["text"];
          _CommentNode_prototype.type = function () {
            return Type["undefined"];
          };
          _CommentNode_prototype.cacheable = false;
          _CommentNode_prototype.isConst = function () {
            return true;
          };
          _CommentNode_prototype.constValue = function () {
            return;
          };
          _CommentNode_prototype._isNoop = function () {
            return true;
          };
          _CommentNode_prototype.inspect = function (depth) {
            return inspectHelper(depth, "CommentNode", this.index, this.text);
          };
          _CommentNode_prototype.walk = function (f) {
            return this;
          };
          _CommentNode_prototype.walkAsync = function (f, callback) {
            return callback(null, this);
          };
          return CommentNode;
        }(Node));
        Node.Const = Node.byTypeId[12] = ConstNode = (function (Node) {
          var _ConstNode_prototype, _Node_prototype;
          function ConstNode(index, scope, value) {
            var _this;
            _this = this instanceof ConstNode ? this : __create(_ConstNode_prototype);
            _this.index = index;
            _this.scope = scope;
            _this._reduced = void 0;
            _this._macroExpanded = void 0;
            _this._macroExpandAlled = void 0;
            _this.value = value;
            return _this;
          }
          _Node_prototype = Node.prototype;
          _ConstNode_prototype = ConstNode.prototype = __create(_Node_prototype);
          _ConstNode_prototype.constructor = ConstNode;
          ConstNode.displayName = "ConstNode";
          if (typeof Node.extended === "function") {
            Node.extended(ConstNode);
          }
          _ConstNode_prototype.typeId = 12;
          ConstNode.argNames = ["value"];
          _ConstNode_prototype.type = function () {
            var value;
            value = this.value;
            if (value === null) {
              return Type["null"];
            } else {
              switch (typeof value) {
              case "number": return Type.number;
              case "string": return Type.string;
              case "boolean": return Type.boolean;
              case "undefined": return Type["undefined"];
              default: throw Error("Unknown type for " + String(value));
              }
            }
          };
          _ConstNode_prototype.cacheable = false;
          _ConstNode_prototype.isConst = function () {
            return true;
          };
          _ConstNode_prototype.constValue = function () {
            return this.value;
          };
          _ConstNode_prototype.isConstType = function (type) {
            return type === typeof this.value;
          };
          _ConstNode_prototype.isConstValue = function (value) {
            return value === this.value;
          };
          _ConstNode_prototype._isNoop = function () {
            return true;
          };
          _ConstNode_prototype.inspect = function (depth) {
            return "ConstNode(" + inspect(this.value, null, depth != null ? depth - 1 : null) + ")";
          };
          _ConstNode_prototype._toJSON = function () {
            return [this.value];
          };
          _ConstNode_prototype.walk = function (f) {
            return this;
          };
          _ConstNode_prototype.walkAsync = function (f, callback) {
            return callback(null, this);
          };
          return ConstNode;
        }(Node));
        Node.Continue = Node.byTypeId[13] = ContinueNode = (function (Node) {
          var _ContinueNode_prototype, _Node_prototype;
          function ContinueNode(index, scope, label) {
            var _this;
            _this = this instanceof ContinueNode ? this : __create(_ContinueNode_prototype);
            if (label == null) {
              label = null;
            }
            _this.index = index;
            _this.scope = scope;
            _this._reduced = void 0;
            _this._macroExpanded = void 0;
            _this._macroExpandAlled = void 0;
            _this.label = label;
            return _this;
          }
          _Node_prototype = Node.prototype;
          _ContinueNode_prototype = ContinueNode.prototype = __create(_Node_prototype);
          _ContinueNode_prototype.constructor = ContinueNode;
          ContinueNode.displayName = "ContinueNode";
          if (typeof Node.extended === "function") {
            Node.extended(ContinueNode);
          }
          _ContinueNode_prototype.typeId = 13;
          ContinueNode.argNames = ["label"];
          _ContinueNode_prototype.type = function () {
            return Type["undefined"];
          };
          _ContinueNode_prototype.isStatement = function () {
            return true;
          };
          _ContinueNode_prototype.withLabel = function (label) {
            if (label == null) {
              label = null;
            }
            return ContinueNode(this.index, this.scope, label);
          };
          _ContinueNode_prototype.mutateLast = function () {
            return this;
          };
          _ContinueNode_prototype.inspect = function (depth) {
            return inspectHelper(depth, "ContinueNode", this.index, this.label);
          };
          _ContinueNode_prototype.walk = function (f) {
            var label;
            if (this.label instanceof Node) {
              label = f(this.label);
            } else {
              label = this.label;
            }
            if (label !== this.label) {
              return ContinueNode(this.index, this.scope, label);
            } else {
              return this;
            }
          };
          _ContinueNode_prototype.walkAsync = function (f, callback) {
            var _this;
            _this = this;
            return (this.label instanceof Node
              ? function (next) {
                var _once;
                return f(_this.label, (_once = false, function (_e, label) {
                  if (_once) {
                    throw Error("Attempted to call function more than once");
                  } else {
                    _once = true;
                  }
                  if (_e != null) {
                    return callback(_e);
                  }
                  return next(label);
                }));
              }
              : function (next) {
                return next(_this.label);
              })(function (label) {
              return callback(null, label !== _this.label ? ContinueNode(_this.index, _this.scope, label) : _this);
            });
          };
          return ContinueNode;
        }(Node));
        Node.Debugger = Node.byTypeId[14] = DebuggerNode = (function (Node) {
          var _DebuggerNode_prototype, _Node_prototype;
          function DebuggerNode(index, scope) {
            var _this;
            _this = this instanceof DebuggerNode ? this : __create(_DebuggerNode_prototype);
            _this.index = index;
            _this.scope = scope;
            _this._reduced = void 0;
            _this._macroExpanded = void 0;
            _this._macroExpandAlled = void 0;
            return _this;
          }
          _Node_prototype = Node.prototype;
          _DebuggerNode_prototype = DebuggerNode.prototype = __create(_Node_prototype);
          _DebuggerNode_prototype.constructor = DebuggerNode;
          DebuggerNode.displayName = "DebuggerNode";
          if (typeof Node.extended === "function") {
            Node.extended(DebuggerNode);
          }
          _DebuggerNode_prototype.typeId = 14;
          DebuggerNode.argNames = [];
          _DebuggerNode_prototype.type = function () {
            return Type["undefined"];
          };
          _DebuggerNode_prototype.isStatement = function () {
            return true;
          };
          _DebuggerNode_prototype.mutateLast = function () {
            return this;
          };
          _DebuggerNode_prototype.inspect = function (depth) {
            return inspectHelper(depth, "DebuggerNode", this.index);
          };
          return DebuggerNode;
        }(Node));
        Node.Def = Node.byTypeId[15] = DefNode = (function (Node) {
          var _DefNode_prototype, _Node_prototype;
          function DefNode(index, scope, left, right) {
            var _this;
            _this = this instanceof DefNode ? this : __create(_DefNode_prototype);
            if (right == null) {
              right = void 0;
            }
            _this.index = index;
            _this.scope = scope;
            _this._reduced = void 0;
            _this._macroExpanded = void 0;
            _this._macroExpandAlled = void 0;
            _this.left = left;
            _this.right = right;
            return _this;
          }
          _Node_prototype = Node.prototype;
          _DefNode_prototype = DefNode.prototype = __create(_Node_prototype);
          _DefNode_prototype.constructor = DefNode;
          DefNode.displayName = "DefNode";
          if (typeof Node.extended === "function") {
            Node.extended(DefNode);
          }
          _DefNode_prototype.typeId = 15;
          DefNode.argNames = ["left", "right"];
          _DefNode_prototype.type = function (o) {
            if (this.right != null) {
              return this.right.type(o);
            } else {
              return Type.any;
            }
          };
          _DefNode_prototype.inspect = function (depth) {
            return inspectHelper(
              depth,
              "DefNode",
              this.index,
              this.left,
              this.right
            );
          };
          _DefNode_prototype.walk = function (f) {
            var left, right;
            left = f(this.left);
            if (this.right instanceof Node) {
              right = f(this.right);
            } else {
              right = this.right;
            }
            if (left !== this.left || right !== this.right) {
              return DefNode(this.index, this.scope, left, right);
            } else {
              return this;
            }
          };
          _DefNode_prototype.walkAsync = function (f, callback) {
            var _once, _this;
            _this = this;
            return f(this.left, (_once = false, function (_e, left) {
              if (_once) {
                throw Error("Attempted to call function more than once");
              } else {
                _once = true;
              }
              if (_e != null) {
                return callback(_e);
              }
              return (_this.right instanceof Node
                ? function (next) {
                  var _once2;
                  return f(_this.right, (_once2 = false, function (_e2, right) {
                    if (_once2) {
                      throw Error("Attempted to call function more than once");
                    } else {
                      _once2 = true;
                    }
                    if (_e2 != null) {
                      return callback(_e2);
                    }
                    return next(right);
                  }));
                }
                : function (next) {
                  return next(_this.right);
                })(function (right) {
                return callback(null, left !== _this.left || right !== _this.right ? DefNode(_this.index, _this.scope, left, right) : _this);
              });
            }));
          };
          return DefNode;
        }(Node));
        Node.EmbedWrite = Node.byTypeId[16] = EmbedWriteNode = (function (Node) {
          var _EmbedWriteNode_prototype, _Node_prototype;
          function EmbedWriteNode(index, scope, text, escape) {
            var _this;
            _this = this instanceof EmbedWriteNode ? this : __create(_EmbedWriteNode_prototype);
            if (escape == null) {
              escape = false;
            }
            _this.index = index;
            _this.scope = scope;
            _this._reduced = void 0;
            _this._macroExpanded = void 0;
            _this._macroExpandAlled = void 0;
            _this.text = text;
            _this.escape = escape;
            return _this;
          }
          _Node_prototype = Node.prototype;
          _EmbedWriteNode_prototype = EmbedWriteNode.prototype = __create(_Node_prototype);
          _EmbedWriteNode_prototype.constructor = EmbedWriteNode;
          EmbedWriteNode.displayName = "EmbedWriteNode";
          if (typeof Node.extended === "function") {
            Node.extended(EmbedWriteNode);
          }
          _EmbedWriteNode_prototype.typeId = 16;
          EmbedWriteNode.argNames = ["text", "escape"];
          _EmbedWriteNode_prototype.inspect = function (depth) {
            return inspectHelper(
              depth,
              "EmbedWriteNode",
              this.index,
              this.text,
              this.escape
            );
          };
          _EmbedWriteNode_prototype.walk = function (f) {
            var text;
            text = f(this.text);
            if (text !== this.text) {
              return EmbedWriteNode(this.index, this.scope, text, this.escape);
            } else {
              return this;
            }
          };
          _EmbedWriteNode_prototype.walkAsync = function (f, callback) {
            var _once, _this;
            _this = this;
            return f(this.text, (_once = false, function (_e, text) {
              if (_once) {
                throw Error("Attempted to call function more than once");
              } else {
                _once = true;
              }
              if (_e != null) {
                return callback(_e);
              }
              return callback(null, text !== _this.text ? EmbedWriteNode(_this.index, _this.scope, text, _this.escape) : _this);
            }));
          };
          return EmbedWriteNode;
        }(Node));
        Node.Eval = Node.byTypeId[17] = EvalNode = (function (Node) {
          var _EvalNode_prototype, _Node_prototype, simplifiers;
          function EvalNode(index, scope, code) {
            var _this;
            _this = this instanceof EvalNode ? this : __create(_EvalNode_prototype);
            _this.index = index;
            _this.scope = scope;
            _this._reduced = void 0;
            _this._macroExpanded = void 0;
            _this._macroExpandAlled = void 0;
            _this.code = code;
            return _this;
          }
          _Node_prototype = Node.prototype;
          _EvalNode_prototype = EvalNode.prototype = __create(_Node_prototype);
          _EvalNode_prototype.constructor = EvalNode;
          EvalNode.displayName = "EvalNode";
          if (typeof Node.extended === "function") {
            Node.extended(EvalNode);
          }
          _EvalNode_prototype.typeId = 17;
          EvalNode.argNames = ["code"];
          simplifiers = {
            "true": function () {
              return ConstNode(this.index, this.scope, true);
            },
            "false": function () {
              return ConstNode(this.index, this.scope, false);
            },
            "void 0": function () {
              return ConstNode(this.index, this.scope, void 0);
            },
            "null": function () {
              return ConstNode(this.index, this.scope, null);
            }
          };
          _EvalNode_prototype._reduce = function (o) {
            var _ref, code, simplifier;
            code = this.code.reduce(o).doWrap();
            if (code.isConst() && code.isConstType("string")) {
              if (__owns.call(simplifiers, _ref = code.constValue())) {
                simplifier = simplifiers[_ref];
              }
              if (simplifier) {
                return simplifier.call(this);
              }
            }
            if (code !== this.code) {
              return EvalNode(this.index, this.scope, code);
            } else {
              return this;
            }
          };
          _EvalNode_prototype.inspect = function (depth) {
            return inspectHelper(depth, "EvalNode", this.index, this.code);
          };
          _EvalNode_prototype.walk = function (f) {
            var code;
            code = f(this.code);
            if (code !== this.code) {
              return EvalNode(this.index, this.scope, code);
            } else {
              return this;
            }
          };
          _EvalNode_prototype.walkAsync = function (f, callback) {
            var _once, _this;
            _this = this;
            return f(this.code, (_once = false, function (_e, code) {
              if (_once) {
                throw Error("Attempted to call function more than once");
              } else {
                _once = true;
              }
              if (_e != null) {
                return callback(_e);
              }
              return callback(null, code !== _this.code ? EvalNode(_this.index, _this.scope, code) : _this);
            }));
          };
          return EvalNode;
        }(Node));
        Node.For = Node.byTypeId[18] = ForNode = (function (Node) {
          var _ForNode_prototype, _Node_prototype;
          function ForNode(index, scope, init, test, step, body, label) {
            var _this;
            _this = this instanceof ForNode ? this : __create(_ForNode_prototype);
            if (init == null) {
              init = NothingNode(0, scope);
            }
            if (test == null) {
              test = ConstNode(0, scope, true);
            }
            if (step == null) {
              step = NothingNode(0, scope);
            }
            if (label == null) {
              label = null;
            }
            _this.index = index;
            _this.scope = scope;
            _this._reduced = void 0;
            _this._macroExpanded = void 0;
            _this._macroExpandAlled = void 0;
            _this.init = init;
            _this.test = test;
            _this.step = step;
            _this.body = body;
            _this.label = label;
            return _this;
          }
          _Node_prototype = Node.prototype;
          _ForNode_prototype = ForNode.prototype = __create(_Node_prototype);
          _ForNode_prototype.constructor = ForNode;
          ForNode.displayName = "ForNode";
          if (typeof Node.extended === "function") {
            Node.extended(ForNode);
          }
          _ForNode_prototype.typeId = 18;
          ForNode.argNames = [
            "init",
            "test",
            "step",
            "body",
            "label"
          ];
          _ForNode_prototype.type = function () {
            return Type["undefined"];
          };
          _ForNode_prototype.isStatement = function () {
            return true;
          };
          _ForNode_prototype.withLabel = function (label) {
            if (label == null) {
              label = null;
            }
            return ForNode(
              this.index,
              this.scope,
              this.init,
              this.test,
              this.step,
              this.body,
              label
            );
          };
          _ForNode_prototype.inspect = function (depth) {
            return inspectHelper(
              depth,
              "ForNode",
              this.index,
              this.init,
              this.test,
              this.step,
              this.body,
              this.label
            );
          };
          _ForNode_prototype.walk = function (f) {
            var body, init, label, step, test;
            init = f(this.init);
            test = f(this.test);
            step = f(this.step);
            body = f(this.body);
            if (this.label instanceof Node) {
              label = f(this.label);
            } else {
              label = this.label;
            }
            if (init !== this.init || test !== this.test || step !== this.step || body !== this.body || label !== this.label) {
              return ForNode(
                this.index,
                this.scope,
                init,
                test,
                step,
                body,
                label
              );
            } else {
              return this;
            }
          };
          _ForNode_prototype.walkAsync = function (f, callback) {
            var _once, _this;
            _this = this;
            return f(this.init, (_once = false, function (_e, init) {
              var _once2;
              if (_once) {
                throw Error("Attempted to call function more than once");
              } else {
                _once = true;
              }
              if (_e != null) {
                return callback(_e);
              }
              return f(_this.test, (_once2 = false, function (_e2, test) {
                var _once3;
                if (_once2) {
                  throw Error("Attempted to call function more than once");
                } else {
                  _once2 = true;
                }
                if (_e2 != null) {
                  return callback(_e2);
                }
                return f(_this.step, (_once3 = false, function (_e3, step) {
                  var _once4;
                  if (_once3) {
                    throw Error("Attempted to call function more than once");
                  } else {
                    _once3 = true;
                  }
                  if (_e3 != null) {
                    return callback(_e3);
                  }
                  return f(_this.body, (_once4 = false, function (_e4, body) {
                    if (_once4) {
                      throw Error("Attempted to call function more than once");
                    } else {
                      _once4 = true;
                    }
                    if (_e4 != null) {
                      return callback(_e4);
                    }
                    return (_this.label instanceof Node
                      ? function (next) {
                        var _once5;
                        return f(_this.label, (_once5 = false, function (_e5, label) {
                          if (_once5) {
                            throw Error("Attempted to call function more than once");
                          } else {
                            _once5 = true;
                          }
                          if (_e5 != null) {
                            return callback(_e5);
                          }
                          return next(label);
                        }));
                      }
                      : function (next) {
                        return next(_this.label);
                      })(function (label) {
                      return callback(null, init !== _this.init || test !== _this.test || step !== _this.step || body !== _this.body || label !== _this.label
                        ? ForNode(
                          _this.index,
                          _this.scope,
                          init,
                          test,
                          step,
                          body,
                          label
                        )
                        : _this);
                    });
                  }));
                }));
              }));
            }));
          };
          return ForNode;
        }(Node));
        Node.ForIn = Node.byTypeId[19] = ForInNode = (function (Node) {
          var _ForInNode_prototype, _Node_prototype;
          function ForInNode(index, scope, key, object, body, label) {
            var _this;
            _this = this instanceof ForInNode ? this : __create(_ForInNode_prototype);
            if (label == null) {
              label = null;
            }
            _this.index = index;
            _this.scope = scope;
            _this._reduced = void 0;
            _this._macroExpanded = void 0;
            _this._macroExpandAlled = void 0;
            _this.key = key;
            _this.object = object;
            _this.body = body;
            _this.label = label;
            return _this;
          }
          _Node_prototype = Node.prototype;
          _ForInNode_prototype = ForInNode.prototype = __create(_Node_prototype);
          _ForInNode_prototype.constructor = ForInNode;
          ForInNode.displayName = "ForInNode";
          if (typeof Node.extended === "function") {
            Node.extended(ForInNode);
          }
          _ForInNode_prototype.typeId = 19;
          ForInNode.argNames = ["key", "object", "body", "label"];
          _ForInNode_prototype.type = function () {
            return Type["undefined"];
          };
          _ForInNode_prototype.isStatement = function () {
            return true;
          };
          _ForInNode_prototype.withLabel = function (label) {
            if (label == null) {
              label = null;
            }
            return ForInNode(
              this.index,
              this.scope,
              this.key,
              this.object,
              this.body,
              label
            );
          };
          _ForInNode_prototype.inspect = function (depth) {
            return inspectHelper(
              depth,
              "ForInNode",
              this.index,
              this.key,
              this.object,
              this.body,
              this.label
            );
          };
          _ForInNode_prototype.walk = function (f) {
            var body, key, label, object;
            key = f(this.key);
            object = f(this.object);
            body = f(this.body);
            if (this.label instanceof Node) {
              label = f(this.label);
            } else {
              label = this.label;
            }
            if (key !== this.key || object !== this.object || body !== this.body || label !== this.label) {
              return ForInNode(
                this.index,
                this.scope,
                key,
                object,
                body,
                label
              );
            } else {
              return this;
            }
          };
          _ForInNode_prototype.walkAsync = function (f, callback) {
            var _once, _this;
            _this = this;
            return f(this.key, (_once = false, function (_e, key) {
              var _once2;
              if (_once) {
                throw Error("Attempted to call function more than once");
              } else {
                _once = true;
              }
              if (_e != null) {
                return callback(_e);
              }
              return f(_this.object, (_once2 = false, function (_e2, object) {
                var _once3;
                if (_once2) {
                  throw Error("Attempted to call function more than once");
                } else {
                  _once2 = true;
                }
                if (_e2 != null) {
                  return callback(_e2);
                }
                return f(_this.body, (_once3 = false, function (_e3, body) {
                  if (_once3) {
                    throw Error("Attempted to call function more than once");
                  } else {
                    _once3 = true;
                  }
                  if (_e3 != null) {
                    return callback(_e3);
                  }
                  return (_this.label instanceof Node
                    ? function (next) {
                      var _once4;
                      return f(_this.label, (_once4 = false, function (_e4, label) {
                        if (_once4) {
                          throw Error("Attempted to call function more than once");
                        } else {
                          _once4 = true;
                        }
                        if (_e4 != null) {
                          return callback(_e4);
                        }
                        return next(label);
                      }));
                    }
                    : function (next) {
                      return next(_this.label);
                    })(function (label) {
                    return callback(null, key !== _this.key || object !== _this.object || body !== _this.body || label !== _this.label
                      ? ForInNode(
                        _this.index,
                        _this.scope,
                        key,
                        object,
                        body,
                        label
                      )
                      : _this);
                  });
                }));
              }));
            }));
          };
          return ForInNode;
        }(Node));
        Node.Function = Node.byTypeId[20] = FunctionNode = (function (Node) {
          var _FunctionNode_prototype, _Node_prototype;
          function FunctionNode(index, scope, params, body, autoReturn, bound, curry, asType, generator, generic) {
            var _this;
            _this = this instanceof FunctionNode ? this : __create(_FunctionNode_prototype);
            if (params == null) {
              params = [];
            }
            if (autoReturn == null) {
              autoReturn = true;
            }
            if (bound == null) {
              bound = false;
            }
            if (curry == null) {
              curry = false;
            }
            if (asType == null) {
              asType = void 0;
            }
            if (generator == null) {
              generator = false;
            }
            if (generic == null) {
              generic = [];
            }
            _this.index = index;
            _this.scope = scope;
            _this._reduced = void 0;
            _this._macroExpanded = void 0;
            _this._macroExpandAlled = void 0;
            _this.params = params;
            _this.body = body;
            _this.autoReturn = autoReturn;
            _this.bound = bound;
            _this.curry = curry;
            _this.asType = asType;
            _this.generator = generator;
            _this.generic = generic;
            return _this;
          }
          _Node_prototype = Node.prototype;
          _FunctionNode_prototype = FunctionNode.prototype = __create(_Node_prototype);
          _FunctionNode_prototype.constructor = FunctionNode;
          FunctionNode.displayName = "FunctionNode";
          if (typeof Node.extended === "function") {
            Node.extended(FunctionNode);
          }
          _FunctionNode_prototype.typeId = 20;
          FunctionNode.argNames = [
            "params",
            "body",
            "autoReturn",
            "bound",
            "curry",
            "asType",
            "generator",
            "generic"
          ];
          _FunctionNode_prototype.type = function (o) {
            var _ref, returnType, walker;
            if ((_ref = this._type) == null) {
              if (this.asType != null) {
                return this._type = nodeToType(this.asType)["function"]();
              } else {
                if (this.autoReturn) {
                  returnType = this.body.type(o);
                } else {
                  returnType = Type["undefined"];
                }
                walker = function (node) {
                  var _ref;
                  if (node instanceof ReturnNode) {
                    returnType = returnType.union(node.type(o));
                    return node;
                  } else if (node instanceof FunctionNode) {
                    return node;
                  } else if (node instanceof MacroAccessNode) {
                    if ((_ref = node.data.macroName) === "return" || _ref === "return?") {
                      if (node.data.macroData.node) {
                        returnType = returnType.union(node.data.macroData.node.type(o));
                      } else {
                        returnType = returnType.union(Type["undefined"]);
                      }
                    }
                    return node.walk(walker);
                  } else {
                    return node.walk(walker);
                  }
                };
                walker(this.body);
                return this._type = returnType["function"]();
              }
            } else {
              return _ref;
            }
          };
          _FunctionNode_prototype._isNoop = function (o) {
            return true;
          };
          _FunctionNode_prototype._toJSON = function () {
            return [this.params, this.body, this.autoReturn].concat(__toArray(simplifyArray([
              this.bound,
              this.curry,
              this.asType,
              this.generator,
              this.generic
            ])));
          };
          _FunctionNode_prototype.inspect = function (depth) {
            return inspectHelper(
              depth,
              "FunctionNode",
              this.index,
              this.params,
              this.body,
              this.autoReturn,
              this.bound,
              this.curry,
              this.asType,
              this.generator,
              this.generic
            );
          };
          _FunctionNode_prototype.walk = function (f) {
            var asType, body, bound, params;
            params = map(this.params, f);
            body = f(this.body);
            if (this.bound instanceof Node) {
              bound = f(this.bound);
            } else {
              bound = this.bound;
            }
            if (this.asType instanceof Node) {
              asType = f(this.asType);
            } else {
              asType = this.asType;
            }
            if (params !== this.params || body !== this.body || bound !== this.bound || asType !== this.asType) {
              return FunctionNode(
                this.index,
                this.scope,
                params,
                body,
                this.autoReturn,
                bound,
                this.curry,
                asType,
                this.generator,
                this.generic
              );
            } else {
              return this;
            }
          };
          _FunctionNode_prototype.walkAsync = function (f, callback) {
            var _once, _this;
            _this = this;
            return mapAsync(this.params, f, (_once = false, function (_e, params) {
              var _once2;
              if (_once) {
                throw Error("Attempted to call function more than once");
              } else {
                _once = true;
              }
              if (_e != null) {
                return callback(_e);
              }
              return f(_this.body, (_once2 = false, function (_e2, body) {
                if (_once2) {
                  throw Error("Attempted to call function more than once");
                } else {
                  _once2 = true;
                }
                if (_e2 != null) {
                  return callback(_e2);
                }
                return (_this.bound instanceof Node
                  ? function (next) {
                    var _once3;
                    return f(_this.bound, (_once3 = false, function (_e3, bound) {
                      if (_once3) {
                        throw Error("Attempted to call function more than once");
                      } else {
                        _once3 = true;
                      }
                      if (_e3 != null) {
                        return callback(_e3);
                      }
                      return next(bound);
                    }));
                  }
                  : function (next) {
                    return next(_this.bound);
                  })(function (bound) {
                  return (_this.asType instanceof Node
                    ? function (next) {
                      var _once3;
                      return f(_this.asType, (_once3 = false, function (_e3, asType) {
                        if (_once3) {
                          throw Error("Attempted to call function more than once");
                        } else {
                          _once3 = true;
                        }
                        if (_e3 != null) {
                          return callback(_e3);
                        }
                        return next(asType);
                      }));
                    }
                    : function (next) {
                      return next(_this.asType);
                    })(function (asType) {
                    return callback(null, params !== _this.params || body !== _this.body || bound !== _this.bound || asType !== _this.asType
                      ? FunctionNode(
                        _this.index,
                        _this.scope,
                        params,
                        body,
                        _this.autoReturn,
                        bound,
                        _this.curry,
                        asType,
                        _this.generator,
                        _this.generic
                      )
                      : _this);
                  });
                });
              }));
            }));
          };
          return FunctionNode;
        }(Node));
        Node.Ident = Node.byTypeId[21] = IdentNode = (function (Node) {
          var _IdentNode_prototype, _Node_prototype;
          function IdentNode(index, scope, name) {
            var _this;
            _this = this instanceof IdentNode ? this : __create(_IdentNode_prototype);
            _this.index = index;
            _this.scope = scope;
            _this._reduced = void 0;
            _this._macroExpanded = void 0;
            _this._macroExpandAlled = void 0;
            _this.name = name;
            return _this;
          }
          _Node_prototype = Node.prototype;
          _IdentNode_prototype = IdentNode.prototype = __create(_Node_prototype);
          _IdentNode_prototype.constructor = IdentNode;
          IdentNode.displayName = "IdentNode";
          if (typeof Node.extended === "function") {
            Node.extended(IdentNode);
          }
          _IdentNode_prototype.typeId = 21;
          IdentNode.argNames = ["name"];
          _IdentNode_prototype.cacheable = false;
          _IdentNode_prototype.type = function (o) {
            if (this.name === "__currentArrayLength") {
              return Type.number;
            } else if (o) {
              return this.scope.type(this);
            } else {
              return Type.any;
            }
          };
          _IdentNode_prototype._isNoop = function (o) {
            return true;
          };
          _IdentNode_prototype.isPrimordial = function () {
            return isPrimordial(this.name);
          };
          _IdentNode_prototype.inspect = function (depth) {
            return inspectHelper(depth, "IdentNode", this.index, this.name);
          };
          _IdentNode_prototype.walk = function (f) {
            return this;
          };
          _IdentNode_prototype.walkAsync = function (f, callback) {
            return callback(null, this);
          };
          return IdentNode;
        }(Node));
        Node.If = Node.byTypeId[22] = IfNode = (function (Node) {
          var _IfNode_prototype, _Node_prototype;
          function IfNode(index, scope, test, whenTrue, whenFalse, label) {
            var _this;
            _this = this instanceof IfNode ? this : __create(_IfNode_prototype);
            if (whenFalse == null) {
              whenFalse = NothingNode(0, scope);
            }
            if (label == null) {
              label = null;
            }
            _this.index = index;
            _this.scope = scope;
            _this._reduced = void 0;
            _this._macroExpanded = void 0;
            _this._macroExpandAlled = void 0;
            _this.test = test;
            _this.whenTrue = whenTrue;
            _this.whenFalse = whenFalse;
            _this.label = label;
            return _this;
          }
          _Node_prototype = Node.prototype;
          _IfNode_prototype = IfNode.prototype = __create(_Node_prototype);
          _IfNode_prototype.constructor = IfNode;
          IfNode.displayName = "IfNode";
          if (typeof Node.extended === "function") {
            Node.extended(IfNode);
          }
          _IfNode_prototype.typeId = 22;
          IfNode.argNames = ["test", "whenTrue", "whenFalse", "label"];
          _IfNode_prototype.type = function (o) {
            var _ref;
            if ((_ref = this._type) == null) {
              return this._type = this.whenTrue.type(o).union(this.whenFalse.type(o));
            } else {
              return _ref;
            }
          };
          _IfNode_prototype.withLabel = function (label) {
            if (label == null) {
              label = null;
            }
            return IfNode(
              this.index,
              this.scope,
              this.test,
              this.whenTrue,
              this.whenFalse,
              label
            );
          };
          _IfNode_prototype._reduce = function (o) {
            var label, test, testType, whenFalse, whenTrue;
            test = this.test.reduce(o);
            whenTrue = this.whenTrue.reduce(o);
            whenFalse = this.whenFalse.reduce(o);
            if (this.label != null) {
              label = this.label.reduce(o);
            } else {
              label = this.label;
            }
            if (test.isConst()) {
              return BlockNode(
                this.index,
                this.scope,
                [test.constValue() ? whenTrue : whenFalse],
                label
              ).reduce(o);
            } else {
              testType = test.type(o);
              if (testType.isSubsetOf(Type.alwaysTruthy)) {
                return BlockNode(
                  this.index,
                  this.scope,
                  [test, whenTrue],
                  label
                ).reduce(o);
              } else if (testType.isSubsetOf(Type.alwaysFalsy)) {
                return BlockNode(
                  this.index,
                  this.scope,
                  [test, whenFalse],
                  label
                ).reduce(o);
              } else if (test !== this.test || whenTrue !== this.whenTrue || whenFalse !== this.whenFalse || label !== this.label) {
                return IfNode(
                  this.index,
                  this.scope,
                  test,
                  whenTrue,
                  whenFalse,
                  label
                );
              } else {
                return this;
              }
            }
          };
          _IfNode_prototype.isStatement = function () {
            var _ref;
            if ((_ref = this._isStatement) == null) {
              return this._isStatement = this.whenTrue.isStatement() || this.whenFalse.isStatement();
            } else {
              return _ref;
            }
          };
          _IfNode_prototype.doWrap = function (o) {
            var whenFalse, whenTrue;
            whenTrue = this.whenTrue.doWrap(o);
            whenFalse = this.whenFalse.doWrap(o);
            if (whenTrue !== this.whenTrue || whenFalse !== this.whenFalse) {
              return IfNode(
                this.index,
                this.scope,
                this.test,
                whenTrue,
                whenFalse,
                this.label
              );
            } else {
              return this;
            }
          };
          _IfNode_prototype._isNoop = function (o) {
            var _ref;
            if ((_ref = this.__isNoop) == null) {
              return this.__isNoop = this.test.isNoop(o) && this.whenTrue.isNoop(o) && this.whenFalse.isNoop(o);
            } else {
              return _ref;
            }
          };
          _IfNode_prototype.mutateLast = function (o, func, includeNoop) {
            var whenFalse, whenTrue;
            whenTrue = this.whenTrue.mutateLast(o, func, includeNoop);
            whenFalse = this.whenFalse.mutateLast(o, func, includeNoop);
            if (whenTrue !== this.whenTrue || whenFalse !== this.whenFalse) {
              return IfNode(
                this.index,
                this.scope,
                this.test,
                whenTrue,
                whenFalse,
                this.label
              );
            } else {
              return this;
            }
          };
          _IfNode_prototype.inspect = function (depth) {
            return inspectHelper(
              depth,
              "IfNode",
              this.index,
              this.test,
              this.whenTrue,
              this.whenFalse,
              this.label
            );
          };
          _IfNode_prototype.walk = function (f) {
            var label, test, whenFalse, whenTrue;
            test = f(this.test);
            whenTrue = f(this.whenTrue);
            whenFalse = f(this.whenFalse);
            if (this.label instanceof Node) {
              label = f(this.label);
            } else {
              label = this.label;
            }
            if (test !== this.test || whenTrue !== this.whenTrue || whenFalse !== this.whenFalse || label !== this.label) {
              return IfNode(
                this.index,
                this.scope,
                test,
                whenTrue,
                whenFalse,
                label
              );
            } else {
              return this;
            }
          };
          _IfNode_prototype.walkAsync = function (f, callback) {
            var _once, _this;
            _this = this;
            return f(this.test, (_once = false, function (_e, test) {
              var _once2;
              if (_once) {
                throw Error("Attempted to call function more than once");
              } else {
                _once = true;
              }
              if (_e != null) {
                return callback(_e);
              }
              return f(_this.whenTrue, (_once2 = false, function (_e2, whenTrue) {
                var _once3;
                if (_once2) {
                  throw Error("Attempted to call function more than once");
                } else {
                  _once2 = true;
                }
                if (_e2 != null) {
                  return callback(_e2);
                }
                return f(_this.whenFalse, (_once3 = false, function (_e3, whenFalse) {
                  if (_once3) {
                    throw Error("Attempted to call function more than once");
                  } else {
                    _once3 = true;
                  }
                  if (_e3 != null) {
                    return callback(_e3);
                  }
                  return (_this.label instanceof Node
                    ? function (next) {
                      var _once4;
                      return f(_this.label, (_once4 = false, function (_e4, label) {
                        if (_once4) {
                          throw Error("Attempted to call function more than once");
                        } else {
                          _once4 = true;
                        }
                        if (_e4 != null) {
                          return callback(_e4);
                        }
                        return next(label);
                      }));
                    }
                    : function (next) {
                      return next(_this.label);
                    })(function (label) {
                    return callback(null, test !== _this.test || whenTrue !== _this.whenTrue || whenFalse !== _this.whenFalse || label !== _this.label
                      ? IfNode(
                        _this.index,
                        _this.scope,
                        test,
                        whenTrue,
                        whenFalse,
                        label
                      )
                      : _this);
                  });
                }));
              }));
            }));
          };
          return IfNode;
        }(Node));
        Node.MacroAccess = Node.byTypeId[23] = MacroAccessNode = (function (Node) {
          var _MacroAccessNode_prototype, _Node_prototype;
          function MacroAccessNode(index, scope, id, callLine, data, inStatement, inGenerator, inEvilAst, doWrapped) {
            var _this;
            _this = this instanceof MacroAccessNode ? this : __create(_MacroAccessNode_prototype);
            if (inStatement == null) {
              inStatement = false;
            }
            if (inGenerator == null) {
              inGenerator = false;
            }
            if (inEvilAst == null) {
              inEvilAst = false;
            }
            if (doWrapped == null) {
              doWrapped = false;
            }
            _this.index = index;
            _this.scope = scope;
            _this._reduced = void 0;
            _this._macroExpanded = void 0;
            _this._macroExpandAlled = void 0;
            _this.id = id;
            _this.callLine = callLine;
            _this.data = data;
            _this.inStatement = inStatement;
            _this.inGenerator = inGenerator;
            _this.inEvilAst = inEvilAst;
            _this.doWrapped = doWrapped;
            return _this;
          }
          _Node_prototype = Node.prototype;
          _MacroAccessNode_prototype = MacroAccessNode.prototype = __create(_Node_prototype);
          _MacroAccessNode_prototype.constructor = MacroAccessNode;
          MacroAccessNode.displayName = "MacroAccessNode";
          if (typeof Node.extended === "function") {
            Node.extended(MacroAccessNode);
          }
          _MacroAccessNode_prototype.typeId = 23;
          MacroAccessNode.argNames = [
            "id",
            "callLine",
            "data",
            "inStatement",
            "inGenerator",
            "inEvilAst",
            "doWrapped"
          ];
          _MacroAccessNode_prototype.type = function (o) {
            var _ref, type;
            if ((_ref = this._type) == null) {
              type = o.macros.getTypeById(this.id);
              if (type != null) {
                if (typeof type === "string") {
                  return this._type = this.data[type].type(o);
                } else {
                  return this._type = type;
                }
              } else {
                return this._type = o.macroExpand1(this).type(o);
              }
            } else {
              return _ref;
            }
          };
          _MacroAccessNode_prototype.withLabel = function (label, o) {
            if (label == null) {
              label = null;
            }
            return o.macroExpand1(this).withLabel(label, o);
          };
          _MacroAccessNode_prototype.walk = (function () {
            function walkObject(obj, func) {
              var changed, k, newV, result, v;
              result = {};
              changed = false;
              for (k in obj) {
                if (__owns.call(obj, k)) {
                  v = obj[k];
                  newV = walkItem(v, func);
                  if (newV !== v) {
                    changed = true;
                  }
                  result[k] = newV;
                }
              }
              if (changed) {
                return result;
              } else {
                return obj;
              }
            }
            function walkItem(item, func) {
              if (item instanceof Node) {
                return func(item);
              } else if (__isArray(item)) {
                return map(item, function (x) {
                  return walkItem(x, func);
                });
              } else if (typeof item === "object" && item !== null) {
                return walkObject(item, func);
              } else {
                return item;
              }
            }
            return function (func) {
              var data;
              data = walkItem(this.data, func);
              if (data !== this.data) {
                return MacroAccessNode(
                  this.index,
                  this.scope,
                  this.id,
                  this.callLine,
                  data,
                  this.inStatement,
                  this.inGenerator,
                  this.inEvilAst,
                  this.doWrapped
                );
              } else {
                return this;
              }
            };
          }());
          _MacroAccessNode_prototype.walkAsync = (function () {
            function walkObject(obj, func, callback) {
              var _keys, changed, result;
              changed = false;
              result = {};
              _keys = __keys(obj);
              return __async(
                1,
                _keys.length,
                false,
                function (_i, next) {
                  var _once, k, v;
                  k = _keys[_i];
                  v = obj[k];
                  return walkItem(item, func, (_once = false, function (_e, newItem) {
                    if (_once) {
                      throw Error("Attempted to call function more than once");
                    } else {
                      _once = true;
                    }
                    if (_e != null) {
                      return next(_e);
                    }
                    if (item !== newItem) {
                      changed = true;
                    }
                    result[k] = newItem;
                    return next(null);
                  }));
                },
                function (err) {
                  if (typeof err !== "undefined" && err !== null) {
                    return callback(err);
                  } else {
                    return callback(null, changed ? result : obj);
                  }
                }
              );
            }
            function walkItem(item, func, callback) {
              if (item instanceof Node) {
                return func(item, callback);
              } else if (__isArray(item)) {
                return mapAsync(
                  item,
                  function (x, cb) {
                    return walkItem(x, func, cb);
                  },
                  callback
                );
              } else if (typeof item === "object" && item !== null) {
                return walkObject(item, func, callback);
              } else {
                return callback(null, item);
              }
            }
            return function (func, callback) {
              var _once, _this;
              _this = this;
              return walkItem(this.data, func, (_once = false, function (_e, data) {
                if (_once) {
                  throw Error("Attempted to call function more than once");
                } else {
                  _once = true;
                }
                if (_e != null) {
                  return callback(_e);
                }
                return callback(null, data !== _this.data
                  ? MacroAccessNode(
                    _this.index,
                    _this.scope,
                    _this.id,
                    _this.callLine,
                    data,
                    _this.inStatement,
                    _this.inGenerator,
                    _this.inEvilAst,
                    _this.doWrapped
                  )
                  : _this);
              }));
            };
          }());
          _MacroAccessNode_prototype._isNoop = function (o) {
            return o.macroExpand1(this).isNoop(o);
          };
          _MacroAccessNode_prototype.doWrap = function () {
            if (this.doWrapped) {
              return this;
            } else {
              return MacroAccessNode(
                this.index,
                this.scope,
                this.id,
                this.callLine,
                this.data,
                this.inStatement,
                this.inGenerator,
                this.inEvilAst,
                true
              );
            }
          };
          _MacroAccessNode_prototype.mutateLast = function (o, func, includeNoop) {
            return o.macroExpand1(this).mutateLast(o, func, includeNoop);
          };
          _MacroAccessNode_prototype.inspect = function (depth) {
            return inspectHelper(
              depth,
              "MacroAccessNode",
              this.index,
              this.id,
              this.callLine,
              this.data,
              this.inStatement,
              this.inGenerator,
              this.inEvilAst,
              this.doWrapped
            );
          };
          return MacroAccessNode;
        }(Node));
        Node.MacroConst = Node.byTypeId[24] = MacroConstNode = (function (Node) {
          var _MacroConstNode_prototype, _Node_prototype;
          function MacroConstNode(index, scope, name) {
            var _this;
            _this = this instanceof MacroConstNode ? this : __create(_MacroConstNode_prototype);
            _this.index = index;
            _this.scope = scope;
            _this._reduced = void 0;
            _this._macroExpanded = void 0;
            _this._macroExpandAlled = void 0;
            _this.name = name;
            return _this;
          }
          _Node_prototype = Node.prototype;
          _MacroConstNode_prototype = MacroConstNode.prototype = __create(_Node_prototype);
          _MacroConstNode_prototype.constructor = MacroConstNode;
          MacroConstNode.displayName = "MacroConstNode";
          if (typeof Node.extended === "function") {
            Node.extended(MacroConstNode);
          }
          _MacroConstNode_prototype.typeId = 24;
          MacroConstNode.argNames = ["name"];
          _MacroConstNode_prototype.type = function (o) {
            var _ref, c, value;
            if ((_ref = this._type) == null) {
              c = o.getConst(this.name);
              if (!c) {
                return this._type = Type.any;
              } else {
                value = c.value;
                if (value === null) {
                  return this._type = Type["null"];
                } else {
                  switch (typeof value) {
                  case "number": return this._type = Type.number;
                  case "string": return this._type = Type.string;
                  case "boolean": return this._type = Type.boolean;
                  case "undefined": return this._type = Type["undefined"];
                  default: throw Error("Unknown type for " + String(c.value));
                  }
                }
              }
            } else {
              return _ref;
            }
          };
          _MacroConstNode_prototype._isNoop = function (o) {
            return true;
          };
          _MacroConstNode_prototype.toConst = function (o) {
            var _ref;
            return ConstNode(this.index, this.scope, (_ref = o.getConst(this.name)) != null ? _ref.value : void 0);
          };
          _MacroConstNode_prototype.inspect = function (depth) {
            return inspectHelper(depth, "MacroConstNode", this.index, this.name);
          };
          _MacroConstNode_prototype.walk = function (f) {
            return this;
          };
          _MacroConstNode_prototype.walkAsync = function (f, callback) {
            return callback(null, this);
          };
          return MacroConstNode;
        }(Node));
        Node.Nothing = Node.byTypeId[25] = NothingNode = (function (Node) {
          var _Node_prototype, _NothingNode_prototype;
          function NothingNode(index, scope) {
            var _this;
            _this = this instanceof NothingNode ? this : __create(_NothingNode_prototype);
            _this.index = index;
            _this.scope = scope;
            _this._reduced = void 0;
            _this._macroExpanded = void 0;
            _this._macroExpandAlled = void 0;
            return _this;
          }
          _Node_prototype = Node.prototype;
          _NothingNode_prototype = NothingNode.prototype = __create(_Node_prototype);
          _NothingNode_prototype.constructor = NothingNode;
          NothingNode.displayName = "NothingNode";
          if (typeof Node.extended === "function") {
            Node.extended(NothingNode);
          }
          _NothingNode_prototype.typeId = 25;
          NothingNode.argNames = [];
          _NothingNode_prototype.type = function () {
            return Type["undefined"];
          };
          _NothingNode_prototype.cacheable = false;
          _NothingNode_prototype.isConst = function () {
            return true;
          };
          _NothingNode_prototype.constValue = function () {
            return;
          };
          _NothingNode_prototype.isConstType = function (type) {
            return type === "undefined";
          };
          _NothingNode_prototype.isConstValue = function (value) {
            return value === void 0;
          };
          _NothingNode_prototype._isNoop = function () {
            return true;
          };
          _NothingNode_prototype.mutateLast = function (o, func, includeNoop) {
            var _ref;
            if (includeNoop) {
              if ((_ref = func(this)) != null) {
                return _ref;
              } else {
                return this;
              }
            } else {
              return this;
            }
          };
          _NothingNode_prototype.inspect = function (depth) {
            return inspectHelper(depth, "NothingNode", this.index);
          };
          return NothingNode;
        }(Node));
        Node.Object = Node.byTypeId[26] = ObjectNode = (function (Node) {
          var _Node_prototype, _ObjectNode_prototype;
          function ObjectNode(index, scope, pairs, prototype) {
            var _this;
            _this = this instanceof ObjectNode ? this : __create(_ObjectNode_prototype);
            if (pairs == null) {
              pairs = [];
            }
            if (prototype == null) {
              prototype = void 0;
            }
            _this.index = index;
            _this.scope = scope;
            _this._reduced = void 0;
            _this._macroExpanded = void 0;
            _this._macroExpandAlled = void 0;
            _this.pairs = pairs;
            _this.prototype = prototype;
            return _this;
          }
          _Node_prototype = Node.prototype;
          _ObjectNode_prototype = ObjectNode.prototype = __create(_Node_prototype);
          _ObjectNode_prototype.constructor = ObjectNode;
          ObjectNode.displayName = "ObjectNode";
          if (typeof Node.extended === "function") {
            Node.extended(ObjectNode);
          }
          _ObjectNode_prototype.typeId = 26;
          ObjectNode.argNames = ["pairs", "prototype"];
          _ObjectNode_prototype.type = function (o) {
            var _arr, _i, _len, _ref, _ref2, data, key, value;
            if ((_ref = this._type) == null) {
              data = {};
              for (_arr = __toArray(this.pairs), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                _ref2 = _arr[_i];
                key = _ref2.key;
                value = _ref2.value;
                if (key.isConst()) {
                  data[key.constValue()] = value.type(o);
                }
              }
              return this._type = Type.makeObject(data);
            } else {
              return _ref;
            }
          };
          _ObjectNode_prototype.walk = (function () {
            function walkPair(pair, func) {
              var key, value;
              key = func(pair.key);
              value = func(pair.value);
              if (key !== pair.key || value !== pair.value) {
                return { key: key, value: value, property: pair.property };
              } else {
                return pair;
              }
            }
            return function (func) {
              var pairs, prototype;
              pairs = map(this.pairs, walkPair, func);
              if (this.prototype != null) {
                prototype = func(this.prototype);
              } else {
                prototype = this.prototype;
              }
              if (pairs !== this.pairs || prototype !== this.prototype) {
                return ObjectNode(this.index, this.scope, pairs, prototype);
              } else {
                return this;
              }
            };
          }());
          _ObjectNode_prototype.walkAsync = (function () {
            function walkPair(pair, func, callback) {
              var _once;
              return func(pair.key, (_once = false, function (_e, key) {
                var _once2;
                if (_once) {
                  throw Error("Attempted to call function more than once");
                } else {
                  _once = true;
                }
                if (_e != null) {
                  return callback(_e);
                }
                return func(pair.value, (_once2 = false, function (_e2, value) {
                  if (_once2) {
                    throw Error("Attempted to call function more than once");
                  } else {
                    _once2 = true;
                  }
                  if (_e2 != null) {
                    return callback(_e2);
                  }
                  return callback(null, key !== pair.key || value !== pair.value ? { key: key, value: value, property: pair.property } : pair);
                }));
              }));
            }
            return function (func, callback) {
              var _once, _this;
              _this = this;
              return mapAsync(this.pairs, walkPair, func, (_once = false, function (_e, pairs) {
                if (_once) {
                  throw Error("Attempted to call function more than once");
                } else {
                  _once = true;
                }
                if (_e != null) {
                  return callback(_e);
                }
                return (_this.prototype != null
                  ? function (next) {
                    var _once2;
                    return func(_this.prototype, (_once2 = false, function (_e2, p) {
                      if (_once2) {
                        throw Error("Attempted to call function more than once");
                      } else {
                        _once2 = true;
                      }
                      if (_e2 != null) {
                        return callback(_e2);
                      }
                      return next(p);
                    }));
                  }
                  : function (next) {
                    return next(_this.prototype);
                  })(function (prototype) {
                  return callback(null, pairs !== _this.pairs || prototype !== _this.prototype ? ObjectNode(_this.index, _this.scope, pairs, prototype) : _this);
                });
              }));
            };
          }());
          _ObjectNode_prototype._reduce = (function () {
            function reducePair(pair, o) {
              var key, value;
              key = pair.key.reduce(o);
              value = pair.value.reduce(o).doWrap(o);
              if (key !== pair.key || value !== pair.value) {
                return { key: key, value: value, property: pair.property };
              } else {
                return pair;
              }
            }
            return function (o) {
              var pairs, prototype;
              pairs = map(this.pairs, reducePair, o);
              if (this.prototype != null) {
                prototype = this.prototype.reduce(o);
              } else {
                prototype = this.prototype;
              }
              if (pairs !== this.pairs || prototype !== this.prototype) {
                return ObjectNode(this.index, this.scope, pairs, prototype);
              } else {
                return this;
              }
            };
          }());
          _ObjectNode_prototype._isNoop = function (o) {
            var _arr, _every, _i, _len, _ref, _ref2, key, value;
            if ((_ref = this.__isNoop) == null) {
              _every = true;
              for (_arr = __toArray(this.pairs), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                _ref2 = _arr[_i];
                key = _ref2.key;
                value = _ref2.value;
                if (!key.isNoop(o) || !value.isNoop(o)) {
                  _every = false;
                  break;
                }
              }
              return this.__isNoop = _every;
            } else {
              return _ref;
            }
          };
          _ObjectNode_prototype.isLiteral = function () {
            var _ref, _this;
            _this = this;
            if ((_ref = this._isLiteral) == null) {
              return this._isLiteral = this.prototype == null && (function () {
                var _arr, _every, _i, _len, _ref, key, property, value;
                _every = true;
                for (_arr = __toArray(_this.pairs), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                  _ref = _arr[_i];
                  key = _ref.key;
                  value = _ref.value;
                  property = _ref.property;
                  if (!!property || !key.isLiteral() || !value.isLiteral()) {
                    _every = false;
                    break;
                  }
                }
                return _every;
              }());
            } else {
              return _ref;
            }
          };
          _ObjectNode_prototype.literalValue = function () {
            var _arr, _i, _len, _ref, key, result, value;
            if (this.prototype != null) {
              throw Error("Cannot convert object with prototype to a literal");
            }
            result = {};
            for (_arr = __toArray(this.pairs), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              _ref = _arr[_i];
              key = _ref.key;
              value = _ref.value;
              result[key.literalValue()] = value.literalValue();
            }
            return result;
          };
          _ObjectNode_prototype.inspect = function (depth) {
            return inspectHelper(
              depth,
              "ObjectNode",
              this.index,
              this.pairs,
              this.prototype
            );
          };
          return ObjectNode;
        }(Node));
        Node.object = function (index, pairs, prototype) {
          var _arr, _i, _len, _ref, key, keyValue, knownKeys, lastPropertyPair,
              ParserError, property;
          knownKeys = [];
          lastPropertyPair = null;
          for (_arr = __toArray(pairs), _i = 0, _len = _arr.length; _i < _len; ++_i) {
            _ref = _arr[_i];
            key = _ref.key;
            property = _ref.property;
            if (key instanceof ConstNode) {
              keyValue = String(key.value);
              if ((property === "get" || property === "set") && lastPropertyPair && lastPropertyPair.property !== property && lastPropertyPair.key === keyValue) {
                lastPropertyPair = null;
                continue;
              } else if (__in(keyValue, knownKeys)) {
                ParserError = require("./parser").ParserError;
                throw ParserError("Duplicate key " + quote(keyValue) + " in object", this, key.index);
              }
              knownKeys.push(keyValue);
              if (property === "get" || property === "set") {
                lastPropertyPair = { key: keyValue, property: property };
              } else {
                lastPropertyPair = null;
              }
            } else {
              lastPropertyPair = null;
            }
          }
          return this.Object(index, pairs, prototype);
        };
        Node.objectParam = Node.object;
        Node.Param = Node.byTypeId[27] = ParamNode = (function (Node) {
          var _Node_prototype, _ParamNode_prototype;
          function ParamNode(index, scope, ident, defaultValue, spread, isMutable, asType) {
            var _this;
            _this = this instanceof ParamNode ? this : __create(_ParamNode_prototype);
            if (defaultValue == null) {
              defaultValue = void 0;
            }
            if (spread == null) {
              spread = false;
            }
            if (isMutable == null) {
              isMutable = false;
            }
            if (asType == null) {
              asType = void 0;
            }
            _this.index = index;
            _this.scope = scope;
            _this._reduced = void 0;
            _this._macroExpanded = void 0;
            _this._macroExpandAlled = void 0;
            _this.ident = ident;
            _this.defaultValue = defaultValue;
            _this.spread = spread;
            _this.isMutable = isMutable;
            _this.asType = asType;
            return _this;
          }
          _Node_prototype = Node.prototype;
          _ParamNode_prototype = ParamNode.prototype = __create(_Node_prototype);
          _ParamNode_prototype.constructor = ParamNode;
          ParamNode.displayName = "ParamNode";
          if (typeof Node.extended === "function") {
            Node.extended(ParamNode);
          }
          _ParamNode_prototype.typeId = 27;
          ParamNode.argNames = [
            "ident",
            "defaultValue",
            "spread",
            "isMutable",
            "asType"
          ];
          _ParamNode_prototype.inspect = function (depth) {
            return inspectHelper(
              depth,
              "ParamNode",
              this.index,
              this.ident,
              this.defaultValue,
              this.spread,
              this.isMutable,
              this.asType
            );
          };
          _ParamNode_prototype.walk = function (f) {
            var asType, defaultValue, ident;
            ident = f(this.ident);
            if (this.defaultValue instanceof Node) {
              defaultValue = f(this.defaultValue);
            } else {
              defaultValue = this.defaultValue;
            }
            if (this.asType instanceof Node) {
              asType = f(this.asType);
            } else {
              asType = this.asType;
            }
            if (ident !== this.ident || defaultValue !== this.defaultValue || asType !== this.asType) {
              return ParamNode(
                this.index,
                this.scope,
                ident,
                defaultValue,
                this.spread,
                this.isMutable,
                asType
              );
            } else {
              return this;
            }
          };
          _ParamNode_prototype.walkAsync = function (f, callback) {
            var _once, _this;
            _this = this;
            return f(this.ident, (_once = false, function (_e, ident) {
              if (_once) {
                throw Error("Attempted to call function more than once");
              } else {
                _once = true;
              }
              if (_e != null) {
                return callback(_e);
              }
              return (_this.defaultValue instanceof Node
                ? function (next) {
                  var _once2;
                  return f(_this.defaultValue, (_once2 = false, function (_e2, defaultValue) {
                    if (_once2) {
                      throw Error("Attempted to call function more than once");
                    } else {
                      _once2 = true;
                    }
                    if (_e2 != null) {
                      return callback(_e2);
                    }
                    return next(defaultValue);
                  }));
                }
                : function (next) {
                  return next(_this.defaultValue);
                })(function (defaultValue) {
                return (_this.asType instanceof Node
                  ? function (next) {
                    var _once2;
                    return f(_this.asType, (_once2 = false, function (_e2, asType) {
                      if (_once2) {
                        throw Error("Attempted to call function more than once");
                      } else {
                        _once2 = true;
                      }
                      if (_e2 != null) {
                        return callback(_e2);
                      }
                      return next(asType);
                    }));
                  }
                  : function (next) {
                    return next(_this.asType);
                  })(function (asType) {
                  return callback(null, ident !== _this.ident || defaultValue !== _this.defaultValue || asType !== _this.asType
                    ? ParamNode(
                      _this.index,
                      _this.scope,
                      ident,
                      defaultValue,
                      _this.spread,
                      _this.isMutable,
                      asType
                    )
                    : _this);
                });
              });
            }));
          };
          return ParamNode;
        }(Node));
        Node.Regexp = Node.byTypeId[28] = RegexpNode = (function (Node) {
          var _Node_prototype, _RegexpNode_prototype;
          function RegexpNode(index, scope, source, flags) {
            var _this;
            _this = this instanceof RegexpNode ? this : __create(_RegexpNode_prototype);
            if (flags == null) {
              flags = "";
            }
            _this.index = index;
            _this.scope = scope;
            _this._reduced = void 0;
            _this._macroExpanded = void 0;
            _this._macroExpandAlled = void 0;
            _this.source = source;
            _this.flags = flags;
            return _this;
          }
          _Node_prototype = Node.prototype;
          _RegexpNode_prototype = RegexpNode.prototype = __create(_Node_prototype);
          _RegexpNode_prototype.constructor = RegexpNode;
          RegexpNode.displayName = "RegexpNode";
          if (typeof Node.extended === "function") {
            Node.extended(RegexpNode);
          }
          _RegexpNode_prototype.typeId = 28;
          RegexpNode.argNames = ["source", "flags"];
          _RegexpNode_prototype.type = function () {
            return Type.regexp;
          };
          _RegexpNode_prototype._isNoop = function (o) {
            return this.text.isNoop(o);
          };
          _RegexpNode_prototype._reduce = function (o) {
            var source;
            source = this.source.reduce(o).doWrap(o);
            if (!source.isConst()) {
              return CallNode(
                this.index,
                this.scope,
                IdentNode(this.index, this.scope, "RegExp"),
                [
                  source,
                  ConstNode(this.index, this.scope, this.flags)
                ]
              );
            } else if (source !== this.source) {
              return RegexpNode(this.index, this.scope, source, this.flags);
            } else {
              return this;
            }
          };
          _RegexpNode_prototype.inspect = function (depth) {
            return inspectHelper(
              depth,
              "RegexpNode",
              this.index,
              this.source,
              this.flags
            );
          };
          _RegexpNode_prototype.walk = function (f) {
            var source;
            source = f(this.source);
            if (source !== this.source) {
              return RegexpNode(this.index, this.scope, source, this.flags);
            } else {
              return this;
            }
          };
          _RegexpNode_prototype.walkAsync = function (f, callback) {
            var _once, _this;
            _this = this;
            return f(this.source, (_once = false, function (_e, source) {
              if (_once) {
                throw Error("Attempted to call function more than once");
              } else {
                _once = true;
              }
              if (_e != null) {
                return callback(_e);
              }
              return callback(null, source !== _this.source ? RegexpNode(_this.index, _this.scope, source, _this.flags) : _this);
            }));
          };
          return RegexpNode;
        }(Node));
        Node.Return = Node.byTypeId[29] = ReturnNode = (function (Node) {
          var _Node_prototype, _ReturnNode_prototype;
          function ReturnNode(index, scope, node) {
            var _this;
            _this = this instanceof ReturnNode ? this : __create(_ReturnNode_prototype);
            if (node == null) {
              node = ConstNode(index, scope, void 0);
            }
            _this.index = index;
            _this.scope = scope;
            _this._reduced = void 0;
            _this._macroExpanded = void 0;
            _this._macroExpandAlled = void 0;
            _this.node = node;
            return _this;
          }
          _Node_prototype = Node.prototype;
          _ReturnNode_prototype = ReturnNode.prototype = __create(_Node_prototype);
          _ReturnNode_prototype.constructor = ReturnNode;
          ReturnNode.displayName = "ReturnNode";
          if (typeof Node.extended === "function") {
            Node.extended(ReturnNode);
          }
          _ReturnNode_prototype.typeId = 29;
          ReturnNode.argNames = ["node"];
          _ReturnNode_prototype.type = function (o) {
            return this.node.type(o);
          };
          _ReturnNode_prototype.isStatement = function () {
            return true;
          };
          _ReturnNode_prototype._reduce = function (o) {
            var node;
            node = this.node.reduce(o);
            if (node !== this.node) {
              return ReturnNode(this.index, this.scope, node);
            } else {
              return this;
            }
          };
          _ReturnNode_prototype.mutateLast = function () {
            return this;
          };
          _ReturnNode_prototype.inspect = function (depth) {
            return inspectHelper(depth, "ReturnNode", this.index, this.node);
          };
          _ReturnNode_prototype.walk = function (f) {
            var node;
            node = f(this.node);
            if (node !== this.node) {
              return ReturnNode(this.index, this.scope, node);
            } else {
              return this;
            }
          };
          _ReturnNode_prototype.walkAsync = function (f, callback) {
            var _once, _this;
            _this = this;
            return f(this.node, (_once = false, function (_e, node) {
              if (_once) {
                throw Error("Attempted to call function more than once");
              } else {
                _once = true;
              }
              if (_e != null) {
                return callback(_e);
              }
              return callback(null, node !== _this.node ? ReturnNode(_this.index, _this.scope, node) : _this);
            }));
          };
          return ReturnNode;
        }(Node));
        Node.Root = Node.byTypeId[30] = RootNode = (function (Node) {
          var _Node_prototype, _RootNode_prototype;
          function RootNode(index, scope, file, body, isEmbedded, isGenerator) {
            var _this;
            _this = this instanceof RootNode ? this : __create(_RootNode_prototype);
            if (file == null) {
              file = void 0;
            }
            if (isEmbedded == null) {
              isEmbedded = false;
            }
            if (isGenerator == null) {
              isGenerator = false;
            }
            _this.index = index;
            _this.scope = scope;
            _this._reduced = void 0;
            _this._macroExpanded = void 0;
            _this._macroExpandAlled = void 0;
            _this.file = file;
            _this.body = body;
            _this.isEmbedded = isEmbedded;
            _this.isGenerator = isGenerator;
            return _this;
          }
          _Node_prototype = Node.prototype;
          _RootNode_prototype = RootNode.prototype = __create(_Node_prototype);
          _RootNode_prototype.constructor = RootNode;
          RootNode.displayName = "RootNode";
          if (typeof Node.extended === "function") {
            Node.extended(RootNode);
          }
          _RootNode_prototype.typeId = 30;
          RootNode.argNames = ["file", "body", "isEmbedded", "isGenerator"];
          _RootNode_prototype.isStatement = function () {
            return true;
          };
          _RootNode_prototype.inspect = function (depth) {
            return inspectHelper(
              depth,
              "RootNode",
              this.index,
              this.file,
              this.body,
              this.isEmbedded,
              this.isGenerator
            );
          };
          _RootNode_prototype.walk = function (f) {
            var body;
            body = f(this.body);
            if (body !== this.body) {
              return RootNode(
                this.index,
                this.scope,
                this.file,
                body,
                this.isEmbedded,
                this.isGenerator
              );
            } else {
              return this;
            }
          };
          _RootNode_prototype.walkAsync = function (f, callback) {
            var _once, _this;
            _this = this;
            return f(this.body, (_once = false, function (_e, body) {
              if (_once) {
                throw Error("Attempted to call function more than once");
              } else {
                _once = true;
              }
              if (_e != null) {
                return callback(_e);
              }
              return callback(null, body !== _this.body
                ? RootNode(
                  _this.index,
                  _this.scope,
                  _this.file,
                  body,
                  _this.isEmbedded,
                  _this.isGenerator
                )
                : _this);
            }));
          };
          return RootNode;
        }(Node));
        Node.Spread = Node.byTypeId[31] = SpreadNode = (function (Node) {
          var _Node_prototype, _SpreadNode_prototype;
          function SpreadNode(index, scope, node) {
            var _this;
            _this = this instanceof SpreadNode ? this : __create(_SpreadNode_prototype);
            _this.index = index;
            _this.scope = scope;
            _this._reduced = void 0;
            _this._macroExpanded = void 0;
            _this._macroExpandAlled = void 0;
            _this.node = node;
            return _this;
          }
          _Node_prototype = Node.prototype;
          _SpreadNode_prototype = SpreadNode.prototype = __create(_Node_prototype);
          _SpreadNode_prototype.constructor = SpreadNode;
          SpreadNode.displayName = "SpreadNode";
          if (typeof Node.extended === "function") {
            Node.extended(SpreadNode);
          }
          _SpreadNode_prototype.typeId = 31;
          SpreadNode.argNames = ["node"];
          _SpreadNode_prototype._reduce = function (o) {
            var node;
            node = this.node.reduce(o).doWrap(o);
            if (node !== this.node) {
              return SpreadNode(this.index, this.scope, node);
            } else {
              return this;
            }
          };
          _SpreadNode_prototype.inspect = function (depth) {
            return inspectHelper(depth, "SpreadNode", this.index, this.node);
          };
          _SpreadNode_prototype.walk = function (f) {
            var node;
            node = f(this.node);
            if (node !== this.node) {
              return SpreadNode(this.index, this.scope, node);
            } else {
              return this;
            }
          };
          _SpreadNode_prototype.walkAsync = function (f, callback) {
            var _once, _this;
            _this = this;
            return f(this.node, (_once = false, function (_e, node) {
              if (_once) {
                throw Error("Attempted to call function more than once");
              } else {
                _once = true;
              }
              if (_e != null) {
                return callback(_e);
              }
              return callback(null, node !== _this.node ? SpreadNode(_this.index, _this.scope, node) : _this);
            }));
          };
          return SpreadNode;
        }(Node));
        Node.string = function (index, parts) {
          var _i, _len, concatOp, current, part;
          concatOp = this.getMacroByLabel("stringConcat");
          if (!concatOp) {
            throw Error("Cannot use string interpolation until the string-concat operator has been defined");
          }
          if (parts.length === 0) {
            return this.Const(index, "");
          } else if (parts.length === 1) {
            return concatOp.func(
              {
                left: this.Const(index, ""),
                op: "",
                right: parts[0]
              },
              this,
              index
            );
          } else {
            current = parts[0];
            for (_i = 1, _len = parts.length; _i < _len; ++_i) {
              part = parts[_i];
              current = concatOp.func(
                { left: current, op: "", right: part },
                this,
                index
              );
            }
            return current;
          }
        };
        Node.Super = Node.byTypeId[32] = SuperNode = (function (Node) {
          var _Node_prototype, _SuperNode_prototype;
          function SuperNode(index, scope, child, args) {
            var _this;
            _this = this instanceof SuperNode ? this : __create(_SuperNode_prototype);
            if (child == null) {
              child = void 0;
            }
            if (args == null) {
              args = [];
            }
            _this.index = index;
            _this.scope = scope;
            _this._reduced = void 0;
            _this._macroExpanded = void 0;
            _this._macroExpandAlled = void 0;
            _this.child = child;
            _this.args = args;
            return _this;
          }
          _Node_prototype = Node.prototype;
          _SuperNode_prototype = SuperNode.prototype = __create(_Node_prototype);
          _SuperNode_prototype.constructor = SuperNode;
          SuperNode.displayName = "SuperNode";
          if (typeof Node.extended === "function") {
            Node.extended(SuperNode);
          }
          _SuperNode_prototype.typeId = 32;
          SuperNode.argNames = ["child", "args"];
          _SuperNode_prototype._reduce = function (o) {
            var args, child;
            if (this.child != null) {
              child = this.child.reduce(o).doWrap(o);
            } else {
              child = this.child;
            }
            args = map(
              this.args,
              function (node, o) {
                return node.reduce(o).doWrap(o);
              },
              o
            );
            if (child !== this.child || args !== this.args) {
              return SuperNode(this.index, this.scope, child, args);
            } else {
              return this;
            }
          };
          _SuperNode_prototype.inspect = function (depth) {
            return inspectHelper(
              depth,
              "SuperNode",
              this.index,
              this.child,
              this.args
            );
          };
          _SuperNode_prototype.walk = function (f) {
            var args, child;
            if (this.child instanceof Node) {
              child = f(this.child);
            } else {
              child = this.child;
            }
            args = map(this.args, f);
            if (child !== this.child || args !== this.args) {
              return SuperNode(this.index, this.scope, child, args);
            } else {
              return this;
            }
          };
          _SuperNode_prototype.walkAsync = function (f, callback) {
            var _this;
            _this = this;
            return (this.child instanceof Node
              ? function (next) {
                var _once;
                return f(_this.child, (_once = false, function (_e, child) {
                  if (_once) {
                    throw Error("Attempted to call function more than once");
                  } else {
                    _once = true;
                  }
                  if (_e != null) {
                    return callback(_e);
                  }
                  return next(child);
                }));
              }
              : function (next) {
                return next(_this.child);
              })(function (child) {
              var _once;
              return mapAsync(_this.args, f, (_once = false, function (_e, args) {
                if (_once) {
                  throw Error("Attempted to call function more than once");
                } else {
                  _once = true;
                }
                if (_e != null) {
                  return callback(_e);
                }
                return callback(null, child !== _this.child || args !== _this.args ? SuperNode(_this.index, _this.scope, child, args) : _this);
              }));
            });
          };
          return SuperNode;
        }(Node));
        Node.Switch = Node.byTypeId[33] = SwitchNode = (function (Node) {
          var _Node_prototype, _SwitchNode_prototype;
          function SwitchNode(index, scope, node, cases, defaultCase, label) {
            var _this;
            _this = this instanceof SwitchNode ? this : __create(_SwitchNode_prototype);
            if (cases == null) {
              cases = [];
            }
            if (defaultCase == null) {
              defaultCase = NoopNode(index, scope);
            }
            if (label == null) {
              label = null;
            }
            _this.index = index;
            _this.scope = scope;
            _this._reduced = void 0;
            _this._macroExpanded = void 0;
            _this._macroExpandAlled = void 0;
            _this.node = node;
            _this.cases = cases;
            _this.defaultCase = defaultCase;
            _this.label = label;
            return _this;
          }
          _Node_prototype = Node.prototype;
          _SwitchNode_prototype = SwitchNode.prototype = __create(_Node_prototype);
          _SwitchNode_prototype.constructor = SwitchNode;
          SwitchNode.displayName = "SwitchNode";
          if (typeof Node.extended === "function") {
            Node.extended(SwitchNode);
          }
          _SwitchNode_prototype.typeId = 33;
          SwitchNode.argNames = ["node", "cases", "defaultCase", "label"];
          _SwitchNode_prototype.type = function (o) {
            var _arr, _i, _len, _ref, case_, type;
            if ((_ref = this._type) == null) {
              if (this.defaultCase != null) {
                type = this.defaultCase.type(o);
              } else {
                type = Type["undefined"];
              }
              for (_arr = __toArray(this.cases), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                case_ = _arr[_i];
                if (case_.fallthrough) {
                  type = type;
                } else {
                  type = type.union(case_.body.type(o));
                }
              }
              return this._type = type;
            } else {
              return _ref;
            }
          };
          _SwitchNode_prototype.withLabel = function (label) {
            if (label == null) {
              label = null;
            }
            return SwitchNode(
              this.index,
              this.scope,
              this.node,
              this.cases,
              this.defaultCase,
              label
            );
          };
          _SwitchNode_prototype.walk = function (f) {
            var cases, defaultCase, label, node;
            node = f(this.node);
            cases = map(this.cases, function (case_) {
              var caseBody, caseNode;
              caseNode = f(case_.node);
              caseBody = f(case_.body);
              if (caseNode !== case_.node || caseBody !== case_.body) {
                return { node: caseNode, body: caseBody, fallthrough: case_.fallthrough };
              } else {
                return case_;
              }
            });
            if (this.defaultCase) {
              defaultCase = f(this.defaultCase);
            } else {
              defaultCase = this.defaultCase;
            }
            if (this.label != null) {
              label = f(this.label);
            } else {
              label = this.label;
            }
            if (node !== this.node || cases !== this.cases || defaultCase !== this.defaultCase || label !== this.label) {
              return SwitchNode(
                this.index,
                this.scope,
                node,
                cases,
                defaultCase,
                label
              );
            } else {
              return this;
            }
          };
          _SwitchNode_prototype.walkAsync = function (f, callback) {
            var _once, _this;
            _this = this;
            return f(this.node, (_once = false, function (_e, node) {
              var _once2;
              if (_once) {
                throw Error("Attempted to call function more than once");
              } else {
                _once = true;
              }
              if (_e != null) {
                return callback(_e);
              }
              return mapAsync(
                _this.cases,
                function (case_, cb) {
                  var _once3;
                  return f(case_.node, (_once3 = false, function (_e2, caseNode) {
                    var _once4;
                    if (_once3) {
                      throw Error("Attempted to call function more than once");
                    } else {
                      _once3 = true;
                    }
                    if (_e2 != null) {
                      return cb(_e2);
                    }
                    return f(case_.body, (_once4 = false, function (_e3, caseBody) {
                      if (_once4) {
                        throw Error("Attempted to call function more than once");
                      } else {
                        _once4 = true;
                      }
                      if (_e3 != null) {
                        return cb(_e3);
                      }
                      return cb(null, caseNode !== case_.node || caseBody !== case_.body ? { node: caseNode, body: caseBody, fallthrough: case_.fallthrough } : case_);
                    }));
                  }));
                },
                (_once2 = false, function (_e2, cases) {
                  if (_once2) {
                    throw Error("Attempted to call function more than once");
                  } else {
                    _once2 = true;
                  }
                  if (_e2 != null) {
                    return callback(_e2);
                  }
                  return (_this.defaultCase != null
                    ? function (next) {
                      var _once3;
                      return f(_this.defaultCase, (_once3 = false, function (_e3, x) {
                        if (_once3) {
                          throw Error("Attempted to call function more than once");
                        } else {
                          _once3 = true;
                        }
                        if (_e3 != null) {
                          return callback(_e3);
                        }
                        return next(x);
                      }));
                    }
                    : function (next) {
                      return next(_this.defaultCase);
                    })(function (defaultCase) {
                    return (_this.label != null
                      ? function (next) {
                        var _once3;
                        return f(_this.label, (_once3 = false, function (_e3, x) {
                          if (_once3) {
                            throw Error("Attempted to call function more than once");
                          } else {
                            _once3 = true;
                          }
                          if (_e3 != null) {
                            return callback(_e3);
                          }
                          return next(x);
                        }));
                      }
                      : function (next) {
                        return next(_this.label);
                      })(function (label) {
                      return callback(null, node !== _this.node || cases !== _this.cases || defaultCase !== _this.defaultCase || label !== _this.label
                        ? SwitchNode(
                          _this.index,
                          _this.scope,
                          node,
                          cases,
                          defaultCase,
                          label
                        )
                        : _this);
                    });
                  });
                })
              );
            }));
          };
          _SwitchNode_prototype.isStatement = function () {
            return true;
          };
          _SwitchNode_prototype.mutateLast = function (o, func, includeNoop) {
            var _arr, _arr2, _i, _len, body, case_, cases, casesChanged, defaultCase;
            casesChanged = false;
            for (_arr = [], _arr2 = __toArray(this.cases), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
              case_ = _arr2[_i];
              if (case_.fallthrough) {
                _arr.push(case_);
              } else {
                body = case_.body.mutateLast(o, func, includeNoop);
                if (body !== case_.body) {
                  casesChanged = true;
                  _arr.push({ node: case_.node, body: body, fallthrough: case_.fallthrough });
                } else {
                  _arr.push(case_);
                }
              }
            }
            cases = _arr;
            defaultCase = this.defaultCase.mutateLast(o, func, includeNoop);
            if (casesChanged || defaultCase !== this.defaultCase) {
              return SwitchNode(
                this.index,
                this.scope,
                this.node,
                cases,
                defaultCase,
                this.label
              );
            } else {
              return this;
            }
          };
          _SwitchNode_prototype.inspect = function (depth) {
            return inspectHelper(
              depth,
              "SwitchNode",
              this.index,
              this.node,
              this.cases,
              this.defaultCase,
              this.label
            );
          };
          return SwitchNode;
        }(Node));
        Node.SyntaxChoice = Node.byTypeId[34] = SyntaxChoiceNode = (function (Node) {
          var _Node_prototype, _SyntaxChoiceNode_prototype;
          function SyntaxChoiceNode(index, scope, choices) {
            var _this;
            _this = this instanceof SyntaxChoiceNode ? this : __create(_SyntaxChoiceNode_prototype);
            if (choices == null) {
              choices = [];
            }
            _this.index = index;
            _this.scope = scope;
            _this._reduced = void 0;
            _this._macroExpanded = void 0;
            _this._macroExpandAlled = void 0;
            _this.choices = choices;
            return _this;
          }
          _Node_prototype = Node.prototype;
          _SyntaxChoiceNode_prototype = SyntaxChoiceNode.prototype = __create(_Node_prototype);
          _SyntaxChoiceNode_prototype.constructor = SyntaxChoiceNode;
          SyntaxChoiceNode.displayName = "SyntaxChoiceNode";
          if (typeof Node.extended === "function") {
            Node.extended(SyntaxChoiceNode);
          }
          _SyntaxChoiceNode_prototype.typeId = 34;
          SyntaxChoiceNode.argNames = ["choices"];
          _SyntaxChoiceNode_prototype.inspect = function (depth) {
            return inspectHelper(depth, "SyntaxChoiceNode", this.index, this.choices);
          };
          _SyntaxChoiceNode_prototype.walk = function (f) {
            var choices;
            choices = map(this.choices, f);
            if (choices !== this.choices) {
              return SyntaxChoiceNode(this.index, this.scope, choices);
            } else {
              return this;
            }
          };
          _SyntaxChoiceNode_prototype.walkAsync = function (f, callback) {
            var _once, _this;
            _this = this;
            return mapAsync(this.choices, f, (_once = false, function (_e, choices) {
              if (_once) {
                throw Error("Attempted to call function more than once");
              } else {
                _once = true;
              }
              if (_e != null) {
                return callback(_e);
              }
              return callback(null, choices !== _this.choices ? SyntaxChoiceNode(_this.index, _this.scope, choices) : _this);
            }));
          };
          return SyntaxChoiceNode;
        }(Node));
        Node.SyntaxMany = Node.byTypeId[35] = SyntaxManyNode = (function (Node) {
          var _Node_prototype, _SyntaxManyNode_prototype;
          function SyntaxManyNode(index, scope, inner, multiplier) {
            var _this;
            _this = this instanceof SyntaxManyNode ? this : __create(_SyntaxManyNode_prototype);
            _this.index = index;
            _this.scope = scope;
            _this._reduced = void 0;
            _this._macroExpanded = void 0;
            _this._macroExpandAlled = void 0;
            _this.inner = inner;
            _this.multiplier = multiplier;
            return _this;
          }
          _Node_prototype = Node.prototype;
          _SyntaxManyNode_prototype = SyntaxManyNode.prototype = __create(_Node_prototype);
          _SyntaxManyNode_prototype.constructor = SyntaxManyNode;
          SyntaxManyNode.displayName = "SyntaxManyNode";
          if (typeof Node.extended === "function") {
            Node.extended(SyntaxManyNode);
          }
          _SyntaxManyNode_prototype.typeId = 35;
          SyntaxManyNode.argNames = ["inner", "multiplier"];
          _SyntaxManyNode_prototype.inspect = function (depth) {
            return inspectHelper(
              depth,
              "SyntaxManyNode",
              this.index,
              this.inner,
              this.multiplier
            );
          };
          _SyntaxManyNode_prototype.walk = function (f) {
            var inner;
            inner = f(this.inner);
            if (inner !== this.inner) {
              return SyntaxManyNode(this.index, this.scope, inner, this.multiplier);
            } else {
              return this;
            }
          };
          _SyntaxManyNode_prototype.walkAsync = function (f, callback) {
            var _once, _this;
            _this = this;
            return f(this.inner, (_once = false, function (_e, inner) {
              if (_once) {
                throw Error("Attempted to call function more than once");
              } else {
                _once = true;
              }
              if (_e != null) {
                return callback(_e);
              }
              return callback(null, inner !== _this.inner ? SyntaxManyNode(_this.index, _this.scope, inner, _this.multiplier) : _this);
            }));
          };
          return SyntaxManyNode;
        }(Node));
        Node.SyntaxParam = Node.byTypeId[36] = SyntaxParamNode = (function (Node) {
          var _Node_prototype, _SyntaxParamNode_prototype;
          function SyntaxParamNode(index, scope, ident, asType) {
            var _this;
            _this = this instanceof SyntaxParamNode ? this : __create(_SyntaxParamNode_prototype);
            if (asType == null) {
              asType = void 0;
            }
            _this.index = index;
            _this.scope = scope;
            _this._reduced = void 0;
            _this._macroExpanded = void 0;
            _this._macroExpandAlled = void 0;
            _this.ident = ident;
            _this.asType = asType;
            return _this;
          }
          _Node_prototype = Node.prototype;
          _SyntaxParamNode_prototype = SyntaxParamNode.prototype = __create(_Node_prototype);
          _SyntaxParamNode_prototype.constructor = SyntaxParamNode;
          SyntaxParamNode.displayName = "SyntaxParamNode";
          if (typeof Node.extended === "function") {
            Node.extended(SyntaxParamNode);
          }
          _SyntaxParamNode_prototype.typeId = 36;
          SyntaxParamNode.argNames = ["ident", "asType"];
          _SyntaxParamNode_prototype.inspect = function (depth) {
            return inspectHelper(
              depth,
              "SyntaxParamNode",
              this.index,
              this.ident,
              this.asType
            );
          };
          _SyntaxParamNode_prototype.walk = function (f) {
            var asType, ident;
            ident = f(this.ident);
            if (this.asType instanceof Node) {
              asType = f(this.asType);
            } else {
              asType = this.asType;
            }
            if (ident !== this.ident || asType !== this.asType) {
              return SyntaxParamNode(this.index, this.scope, ident, asType);
            } else {
              return this;
            }
          };
          _SyntaxParamNode_prototype.walkAsync = function (f, callback) {
            var _once, _this;
            _this = this;
            return f(this.ident, (_once = false, function (_e, ident) {
              if (_once) {
                throw Error("Attempted to call function more than once");
              } else {
                _once = true;
              }
              if (_e != null) {
                return callback(_e);
              }
              return (_this.asType instanceof Node
                ? function (next) {
                  var _once2;
                  return f(_this.asType, (_once2 = false, function (_e2, asType) {
                    if (_once2) {
                      throw Error("Attempted to call function more than once");
                    } else {
                      _once2 = true;
                    }
                    if (_e2 != null) {
                      return callback(_e2);
                    }
                    return next(asType);
                  }));
                }
                : function (next) {
                  return next(_this.asType);
                })(function (asType) {
                return callback(null, ident !== _this.ident || asType !== _this.asType ? SyntaxParamNode(_this.index, _this.scope, ident, asType) : _this);
              });
            }));
          };
          return SyntaxParamNode;
        }(Node));
        Node.SyntaxSequence = Node.byTypeId[37] = SyntaxSequenceNode = (function (Node) {
          var _Node_prototype, _SyntaxSequenceNode_prototype;
          function SyntaxSequenceNode(index, scope, params) {
            var _this;
            _this = this instanceof SyntaxSequenceNode ? this : __create(_SyntaxSequenceNode_prototype);
            if (params == null) {
              params = [];
            }
            _this.index = index;
            _this.scope = scope;
            _this._reduced = void 0;
            _this._macroExpanded = void 0;
            _this._macroExpandAlled = void 0;
            _this.params = params;
            return _this;
          }
          _Node_prototype = Node.prototype;
          _SyntaxSequenceNode_prototype = SyntaxSequenceNode.prototype = __create(_Node_prototype);
          _SyntaxSequenceNode_prototype.constructor = SyntaxSequenceNode;
          SyntaxSequenceNode.displayName = "SyntaxSequenceNode";
          if (typeof Node.extended === "function") {
            Node.extended(SyntaxSequenceNode);
          }
          _SyntaxSequenceNode_prototype.typeId = 37;
          SyntaxSequenceNode.argNames = ["params"];
          _SyntaxSequenceNode_prototype.inspect = function (depth) {
            return inspectHelper(depth, "SyntaxSequenceNode", this.index, this.params);
          };
          _SyntaxSequenceNode_prototype.walk = function (f) {
            var params;
            params = map(this.params, f);
            if (params !== this.params) {
              return SyntaxSequenceNode(this.index, this.scope, params);
            } else {
              return this;
            }
          };
          _SyntaxSequenceNode_prototype.walkAsync = function (f, callback) {
            var _once, _this;
            _this = this;
            return mapAsync(this.params, f, (_once = false, function (_e, params) {
              if (_once) {
                throw Error("Attempted to call function more than once");
              } else {
                _once = true;
              }
              if (_e != null) {
                return callback(_e);
              }
              return callback(null, params !== _this.params ? SyntaxSequenceNode(_this.index, _this.scope, params) : _this);
            }));
          };
          return SyntaxSequenceNode;
        }(Node));
        Node.This = Node.byTypeId[38] = ThisNode = (function (Node) {
          var _Node_prototype, _ThisNode_prototype;
          function ThisNode(index, scope) {
            var _this;
            _this = this instanceof ThisNode ? this : __create(_ThisNode_prototype);
            _this.index = index;
            _this.scope = scope;
            _this._reduced = void 0;
            _this._macroExpanded = void 0;
            _this._macroExpandAlled = void 0;
            return _this;
          }
          _Node_prototype = Node.prototype;
          _ThisNode_prototype = ThisNode.prototype = __create(_Node_prototype);
          _ThisNode_prototype.constructor = ThisNode;
          ThisNode.displayName = "ThisNode";
          if (typeof Node.extended === "function") {
            Node.extended(ThisNode);
          }
          _ThisNode_prototype.typeId = 38;
          ThisNode.argNames = [];
          _ThisNode_prototype.cacheable = false;
          _ThisNode_prototype._isNoop = function () {
            return true;
          };
          _ThisNode_prototype.inspect = function (depth) {
            return inspectHelper(depth, "ThisNode", this.index);
          };
          return ThisNode;
        }(Node));
        Node.Throw = Node.byTypeId[39] = ThrowNode = (function (Node) {
          var _Node_prototype, _ThrowNode_prototype;
          function ThrowNode(index, scope, node) {
            var _this;
            _this = this instanceof ThrowNode ? this : __create(_ThrowNode_prototype);
            _this.index = index;
            _this.scope = scope;
            _this._reduced = void 0;
            _this._macroExpanded = void 0;
            _this._macroExpandAlled = void 0;
            _this.node = node;
            return _this;
          }
          _Node_prototype = Node.prototype;
          _ThrowNode_prototype = ThrowNode.prototype = __create(_Node_prototype);
          _ThrowNode_prototype.constructor = ThrowNode;
          ThrowNode.displayName = "ThrowNode";
          if (typeof Node.extended === "function") {
            Node.extended(ThrowNode);
          }
          _ThrowNode_prototype.typeId = 39;
          ThrowNode.argNames = ["node"];
          _ThrowNode_prototype.type = function () {
            return Type.none;
          };
          _ThrowNode_prototype.isStatement = function () {
            return true;
          };
          _ThrowNode_prototype._reduce = function (o) {
            var node;
            node = this.node.reduce(o).doWrap(o);
            if (node !== this.node) {
              return ThrowNode(this.index, this.scope, node);
            } else {
              return this;
            }
          };
          _ThrowNode_prototype.doWrap = function (o) {
            return CallNode(
              this.index,
              this.scope,
              IdentNode(this.index, this.scope, "__throw"),
              [this.node]
            );
          };
          _ThrowNode_prototype.mutateLast = function () {
            return this;
          };
          _ThrowNode_prototype.inspect = function (depth) {
            return inspectHelper(depth, "ThrowNode", this.index, this.node);
          };
          _ThrowNode_prototype.walk = function (f) {
            var node;
            node = f(this.node);
            if (node !== this.node) {
              return ThrowNode(this.index, this.scope, node);
            } else {
              return this;
            }
          };
          _ThrowNode_prototype.walkAsync = function (f, callback) {
            var _once, _this;
            _this = this;
            return f(this.node, (_once = false, function (_e, node) {
              if (_once) {
                throw Error("Attempted to call function more than once");
              } else {
                _once = true;
              }
              if (_e != null) {
                return callback(_e);
              }
              return callback(null, node !== _this.node ? ThrowNode(_this.index, _this.scope, node) : _this);
            }));
          };
          return ThrowNode;
        }(Node));
        Node.Tmp = Node.byTypeId[40] = TmpNode = (function (Node) {
          var _Node_prototype, _TmpNode_prototype;
          function TmpNode(index, scope, id, name, _type) {
            var _this;
            _this = this instanceof TmpNode ? this : __create(_TmpNode_prototype);
            if (_type == null) {
              _type = Type.any;
            }
            _this.index = index;
            _this.scope = scope;
            _this._reduced = void 0;
            _this._macroExpanded = void 0;
            _this._macroExpandAlled = void 0;
            _this.id = id;
            _this.name = name;
            _this._type = _type;
            return _this;
          }
          _Node_prototype = Node.prototype;
          _TmpNode_prototype = TmpNode.prototype = __create(_Node_prototype);
          _TmpNode_prototype.constructor = TmpNode;
          TmpNode.displayName = "TmpNode";
          if (typeof Node.extended === "function") {
            Node.extended(TmpNode);
          }
          _TmpNode_prototype.typeId = 40;
          TmpNode.argNames = ["id", "name", "_type"];
          _TmpNode_prototype.cacheable = false;
          _TmpNode_prototype.type = function () {
            return this._type;
          };
          _TmpNode_prototype._isNoop = function () {
            return true;
          };
          _TmpNode_prototype._toJSON = function () {
            if (this._type === Type.any) {
              return [this.id, this.name];
            } else {
              return [this.id, this.name, this._type];
            }
          };
          _TmpNode_prototype.inspect = function (depth) {
            return inspectHelper(
              depth,
              "TmpNode",
              this.index,
              this.id,
              this.name,
              this._type
            );
          };
          _TmpNode_prototype.walk = function (f) {
            return this;
          };
          _TmpNode_prototype.walkAsync = function (f, callback) {
            return callback(null, this);
          };
          return TmpNode;
        }(Node));
        Node.TmpWrapper = Node.byTypeId[41] = TmpWrapperNode = (function (Node) {
          var _Node_prototype, _TmpWrapperNode_prototype;
          function TmpWrapperNode(index, scope, node, tmps) {
            var _this;
            _this = this instanceof TmpWrapperNode ? this : __create(_TmpWrapperNode_prototype);
            if (tmps == null) {
              tmps = [];
            }
            _this.index = index;
            _this.scope = scope;
            _this._reduced = void 0;
            _this._macroExpanded = void 0;
            _this._macroExpandAlled = void 0;
            _this.node = node;
            _this.tmps = tmps;
            return _this;
          }
          _Node_prototype = Node.prototype;
          _TmpWrapperNode_prototype = TmpWrapperNode.prototype = __create(_Node_prototype);
          _TmpWrapperNode_prototype.constructor = TmpWrapperNode;
          TmpWrapperNode.displayName = "TmpWrapperNode";
          if (typeof Node.extended === "function") {
            Node.extended(TmpWrapperNode);
          }
          _TmpWrapperNode_prototype.typeId = 41;
          TmpWrapperNode.argNames = ["node", "tmps"];
          _TmpWrapperNode_prototype.type = function (o) {
            return this.node.type(o);
          };
          _TmpWrapperNode_prototype.withLabel = function (label, o) {
            if (label == null) {
              label = null;
            }
            return TmpWrapperNode(
              this.index,
              this.scope,
              this.node.withLabel(label, o),
              this.tmps
            );
          };
          _TmpWrapperNode_prototype._reduce = function (o) {
            var node;
            node = this.node.reduce(o);
            if (this.tmps.length === 0) {
              return node;
            } else if (this.node !== node) {
              return TmpWrapperNode(this.index, this.scope, node, this.tmps);
            } else {
              return this;
            }
          };
          _TmpWrapperNode_prototype.isStatement = function () {
            return this.node.isStatement();
          };
          _TmpWrapperNode_prototype._isNoop = function (o) {
            return this.node.isNoop(o);
          };
          _TmpWrapperNode_prototype.doWrap = function (o) {
            var node;
            node = this.node.doWrap(o);
            if (node !== this.node) {
              return TmpWrapperNode(this.index, this.scope, node, this.tmps);
            } else {
              return this;
            }
          };
          _TmpWrapperNode_prototype.mutateLast = function (o, func, includeNoop) {
            var node;
            node = this.node.mutateLast(o, func, includeNoop);
            if (node !== this.node) {
              return TmpWrapperNode(this.index, this.scope, node, this.tmps);
            } else {
              return this;
            }
          };
          _TmpWrapperNode_prototype.inspect = function (depth) {
            return inspectHelper(
              depth,
              "TmpWrapperNode",
              this.index,
              this.node,
              this.tmps
            );
          };
          _TmpWrapperNode_prototype.walk = function (f) {
            var node;
            node = f(this.node);
            if (node !== this.node) {
              return TmpWrapperNode(this.index, this.scope, node, this.tmps);
            } else {
              return this;
            }
          };
          _TmpWrapperNode_prototype.walkAsync = function (f, callback) {
            var _once, _this;
            _this = this;
            return f(this.node, (_once = false, function (_e, node) {
              if (_once) {
                throw Error("Attempted to call function more than once");
              } else {
                _once = true;
              }
              if (_e != null) {
                return callback(_e);
              }
              return callback(null, node !== _this.node ? TmpWrapperNode(_this.index, _this.scope, node, _this.tmps) : _this);
            }));
          };
          return TmpWrapperNode;
        }(Node));
        Node.TryCatch = Node.byTypeId[42] = TryCatchNode = (function (Node) {
          var _Node_prototype, _TryCatchNode_prototype;
          function TryCatchNode(index, scope, tryBody, catchIdent, catchBody, label) {
            var _this;
            _this = this instanceof TryCatchNode ? this : __create(_TryCatchNode_prototype);
            if (label == null) {
              label = null;
            }
            _this.index = index;
            _this.scope = scope;
            _this._reduced = void 0;
            _this._macroExpanded = void 0;
            _this._macroExpandAlled = void 0;
            _this.tryBody = tryBody;
            _this.catchIdent = catchIdent;
            _this.catchBody = catchBody;
            _this.label = label;
            return _this;
          }
          _Node_prototype = Node.prototype;
          _TryCatchNode_prototype = TryCatchNode.prototype = __create(_Node_prototype);
          _TryCatchNode_prototype.constructor = TryCatchNode;
          TryCatchNode.displayName = "TryCatchNode";
          if (typeof Node.extended === "function") {
            Node.extended(TryCatchNode);
          }
          _TryCatchNode_prototype.typeId = 42;
          TryCatchNode.argNames = ["tryBody", "catchIdent", "catchBody", "label"];
          _TryCatchNode_prototype.type = function (o) {
            var _ref;
            if ((_ref = this._type) == null) {
              return this._type = this.tryBody.type(o).union(this.catchBody.type(o));
            } else {
              return _ref;
            }
          };
          _TryCatchNode_prototype.isStatement = function () {
            return true;
          };
          _TryCatchNode_prototype._isNoop = function (o) {
            return this.tryBody.isNoop(o);
          };
          _TryCatchNode_prototype.withLabel = function (label) {
            if (label == null) {
              label = null;
            }
            return TryCatchNode(
              this.index,
              this.scope,
              this.tryBody,
              this.catchIdent,
              this.catchBody,
              label
            );
          };
          _TryCatchNode_prototype.mutateLast = function (o, func, includeNoop) {
            var catchBody, tryBody;
            tryBody = this.tryBody.mutateLast(o, func, includeNoop);
            catchBody = this.catchBody.mutateLast(o, func, includeNoop);
            if (tryBody !== this.tryBody || catchBody !== this.catchBody) {
              return TryCatchNode(
                this.index,
                this.scope,
                tryBody,
                this.catchIdent,
                catchBody,
                this.label
              );
            } else {
              return this;
            }
          };
          _TryCatchNode_prototype.inspect = function (depth) {
            return inspectHelper(
              depth,
              "TryCatchNode",
              this.index,
              this.tryBody,
              this.catchIdent,
              this.catchBody,
              this.label
            );
          };
          _TryCatchNode_prototype.walk = function (f) {
            var catchBody, catchIdent, label, tryBody;
            tryBody = f(this.tryBody);
            catchIdent = f(this.catchIdent);
            catchBody = f(this.catchBody);
            if (this.label instanceof Node) {
              label = f(this.label);
            } else {
              label = this.label;
            }
            if (tryBody !== this.tryBody || catchIdent !== this.catchIdent || catchBody !== this.catchBody || label !== this.label) {
              return TryCatchNode(
                this.index,
                this.scope,
                tryBody,
                catchIdent,
                catchBody,
                label
              );
            } else {
              return this;
            }
          };
          _TryCatchNode_prototype.walkAsync = function (f, callback) {
            var _once, _this;
            _this = this;
            return f(this.tryBody, (_once = false, function (_e, tryBody) {
              var _once2;
              if (_once) {
                throw Error("Attempted to call function more than once");
              } else {
                _once = true;
              }
              if (_e != null) {
                return callback(_e);
              }
              return f(_this.catchIdent, (_once2 = false, function (_e2, catchIdent) {
                var _once3;
                if (_once2) {
                  throw Error("Attempted to call function more than once");
                } else {
                  _once2 = true;
                }
                if (_e2 != null) {
                  return callback(_e2);
                }
                return f(_this.catchBody, (_once3 = false, function (_e3, catchBody) {
                  if (_once3) {
                    throw Error("Attempted to call function more than once");
                  } else {
                    _once3 = true;
                  }
                  if (_e3 != null) {
                    return callback(_e3);
                  }
                  return (_this.label instanceof Node
                    ? function (next) {
                      var _once4;
                      return f(_this.label, (_once4 = false, function (_e4, label) {
                        if (_once4) {
                          throw Error("Attempted to call function more than once");
                        } else {
                          _once4 = true;
                        }
                        if (_e4 != null) {
                          return callback(_e4);
                        }
                        return next(label);
                      }));
                    }
                    : function (next) {
                      return next(_this.label);
                    })(function (label) {
                    return callback(null, tryBody !== _this.tryBody || catchIdent !== _this.catchIdent || catchBody !== _this.catchBody || label !== _this.label
                      ? TryCatchNode(
                        _this.index,
                        _this.scope,
                        tryBody,
                        catchIdent,
                        catchBody,
                        label
                      )
                      : _this);
                  });
                }));
              }));
            }));
          };
          return TryCatchNode;
        }(Node));
        Node.TryFinally = Node.byTypeId[43] = TryFinallyNode = (function (Node) {
          var _Node_prototype, _TryFinallyNode_prototype;
          function TryFinallyNode(index, scope, tryBody, finallyBody, label) {
            var _this;
            _this = this instanceof TryFinallyNode ? this : __create(_TryFinallyNode_prototype);
            if (label == null) {
              label = null;
            }
            _this.index = index;
            _this.scope = scope;
            _this._reduced = void 0;
            _this._macroExpanded = void 0;
            _this._macroExpandAlled = void 0;
            _this.tryBody = tryBody;
            _this.finallyBody = finallyBody;
            _this.label = label;
            return _this;
          }
          _Node_prototype = Node.prototype;
          _TryFinallyNode_prototype = TryFinallyNode.prototype = __create(_Node_prototype);
          _TryFinallyNode_prototype.constructor = TryFinallyNode;
          TryFinallyNode.displayName = "TryFinallyNode";
          if (typeof Node.extended === "function") {
            Node.extended(TryFinallyNode);
          }
          _TryFinallyNode_prototype.typeId = 43;
          TryFinallyNode.argNames = ["tryBody", "finallyBody", "label"];
          _TryFinallyNode_prototype.type = function (o) {
            return this.tryBody.type(o);
          };
          _TryFinallyNode_prototype._reduce = function (o) {
            var finallyBody, label, tryBody;
            tryBody = this.tryBody.reduce(o);
            finallyBody = this.finallyBody.reduce(o);
            if (this.label != null) {
              label = this.label.reduce(o);
            } else {
              label = this.label;
            }
            if (finallyBody instanceof NothingNode) {
              return BlockNode(this.index, this.scopeIf([tryBody], label)).reduce(o);
            } else if (tryBody instanceof NothingNode) {
              return BlockNode(this.index, this.scopeIf([finallyBody], label)).reduce(o);
            } else if (tryBody !== this.tryBody || finallyBody !== this.finallyBody || label !== this.label) {
              return TryFinallyNode(
                this.index,
                this.scope,
                tryBody,
                finallyBody,
                label
              );
            } else {
              return this;
            }
          };
          _TryFinallyNode_prototype.isStatement = function () {
            return true;
          };
          _TryFinallyNode_prototype._isNoop = function (o) {
            var _ref;
            if ((_ref = this.__isNoop) == null) {
              return this.__isNoop = this.tryBody.isNoop(o) && this.finallyBody.isNoop();
            } else {
              return _ref;
            }
          };
          _TryFinallyNode_prototype.withLabel = function (label) {
            if (label == null) {
              label = null;
            }
            return TryFinallyNode(
              this.index,
              this.scope,
              this.tryBody,
              this.finallyBody,
              label
            );
          };
          _TryFinallyNode_prototype.mutateLast = function (o, func, includeNoop) {
            var tryBody;
            tryBody = this.tryBody.mutateLast(o, func, includeNoop);
            if (tryBody !== this.tryBody) {
              return TryFinallyNode(
                this.index,
                this.scope,
                tryBody,
                this.finallyBody,
                this.label
              );
            } else {
              return this;
            }
          };
          _TryFinallyNode_prototype.inspect = function (depth) {
            return inspectHelper(
              depth,
              "TryFinallyNode",
              this.index,
              this.tryBody,
              this.finallyBody,
              this.label
            );
          };
          _TryFinallyNode_prototype.walk = function (f) {
            var finallyBody, label, tryBody;
            tryBody = f(this.tryBody);
            finallyBody = f(this.finallyBody);
            if (this.label instanceof Node) {
              label = f(this.label);
            } else {
              label = this.label;
            }
            if (tryBody !== this.tryBody || finallyBody !== this.finallyBody || label !== this.label) {
              return TryFinallyNode(
                this.index,
                this.scope,
                tryBody,
                finallyBody,
                label
              );
            } else {
              return this;
            }
          };
          _TryFinallyNode_prototype.walkAsync = function (f, callback) {
            var _once, _this;
            _this = this;
            return f(this.tryBody, (_once = false, function (_e, tryBody) {
              var _once2;
              if (_once) {
                throw Error("Attempted to call function more than once");
              } else {
                _once = true;
              }
              if (_e != null) {
                return callback(_e);
              }
              return f(_this.finallyBody, (_once2 = false, function (_e2, finallyBody) {
                if (_once2) {
                  throw Error("Attempted to call function more than once");
                } else {
                  _once2 = true;
                }
                if (_e2 != null) {
                  return callback(_e2);
                }
                return (_this.label instanceof Node
                  ? function (next) {
                    var _once3;
                    return f(_this.label, (_once3 = false, function (_e3, label) {
                      if (_once3) {
                        throw Error("Attempted to call function more than once");
                      } else {
                        _once3 = true;
                      }
                      if (_e3 != null) {
                        return callback(_e3);
                      }
                      return next(label);
                    }));
                  }
                  : function (next) {
                    return next(_this.label);
                  })(function (label) {
                  return callback(null, tryBody !== _this.tryBody || finallyBody !== _this.finallyBody || label !== _this.label
                    ? TryFinallyNode(
                      _this.index,
                      _this.scope,
                      tryBody,
                      finallyBody,
                      label
                    )
                    : _this);
                });
              }));
            }));
          };
          return TryFinallyNode;
        }(Node));
        Node.TypeFunction = Node.byTypeId[44] = TypeFunctionNode = (function (Node) {
          var _Node_prototype, _TypeFunctionNode_prototype;
          function TypeFunctionNode(index, scope, returnType) {
            var _this;
            _this = this instanceof TypeFunctionNode ? this : __create(_TypeFunctionNode_prototype);
            _this.index = index;
            _this.scope = scope;
            _this._reduced = void 0;
            _this._macroExpanded = void 0;
            _this._macroExpandAlled = void 0;
            _this.returnType = returnType;
            return _this;
          }
          _Node_prototype = Node.prototype;
          _TypeFunctionNode_prototype = TypeFunctionNode.prototype = __create(_Node_prototype);
          _TypeFunctionNode_prototype.constructor = TypeFunctionNode;
          TypeFunctionNode.displayName = "TypeFunctionNode";
          if (typeof Node.extended === "function") {
            Node.extended(TypeFunctionNode);
          }
          _TypeFunctionNode_prototype.typeId = 44;
          TypeFunctionNode.argNames = ["returnType"];
          _TypeFunctionNode_prototype.inspect = function (depth) {
            return inspectHelper(depth, "TypeFunctionNode", this.index, this.returnType);
          };
          _TypeFunctionNode_prototype.walk = function (f) {
            var returnType;
            returnType = f(this.returnType);
            if (returnType !== this.returnType) {
              return TypeFunctionNode(this.index, this.scope, returnType);
            } else {
              return this;
            }
          };
          _TypeFunctionNode_prototype.walkAsync = function (f, callback) {
            var _once, _this;
            _this = this;
            return f(this.returnType, (_once = false, function (_e, returnType) {
              if (_once) {
                throw Error("Attempted to call function more than once");
              } else {
                _once = true;
              }
              if (_e != null) {
                return callback(_e);
              }
              return callback(null, returnType !== _this.returnType ? TypeFunctionNode(_this.index, _this.scope, returnType) : _this);
            }));
          };
          return TypeFunctionNode;
        }(Node));
        Node.TypeGeneric = Node.byTypeId[45] = TypeGenericNode = (function (Node) {
          var _Node_prototype, _TypeGenericNode_prototype;
          function TypeGenericNode(index, scope, basetype, args) {
            var _this;
            _this = this instanceof TypeGenericNode ? this : __create(_TypeGenericNode_prototype);
            if (args == null) {
              args = [];
            }
            _this.index = index;
            _this.scope = scope;
            _this._reduced = void 0;
            _this._macroExpanded = void 0;
            _this._macroExpandAlled = void 0;
            _this.basetype = basetype;
            _this.args = args;
            return _this;
          }
          _Node_prototype = Node.prototype;
          _TypeGenericNode_prototype = TypeGenericNode.prototype = __create(_Node_prototype);
          _TypeGenericNode_prototype.constructor = TypeGenericNode;
          TypeGenericNode.displayName = "TypeGenericNode";
          if (typeof Node.extended === "function") {
            Node.extended(TypeGenericNode);
          }
          _TypeGenericNode_prototype.typeId = 45;
          TypeGenericNode.argNames = ["basetype", "args"];
          _TypeGenericNode_prototype.inspect = function (depth) {
            return inspectHelper(
              depth,
              "TypeGenericNode",
              this.index,
              this.basetype,
              this.args
            );
          };
          _TypeGenericNode_prototype.walk = function (f) {
            var args, basetype;
            basetype = f(this.basetype);
            args = map(this.args, f);
            if (basetype !== this.basetype || args !== this.args) {
              return TypeGenericNode(this.index, this.scope, basetype, args);
            } else {
              return this;
            }
          };
          _TypeGenericNode_prototype.walkAsync = function (f, callback) {
            var _once, _this;
            _this = this;
            return f(this.basetype, (_once = false, function (_e, basetype) {
              var _once2;
              if (_once) {
                throw Error("Attempted to call function more than once");
              } else {
                _once = true;
              }
              if (_e != null) {
                return callback(_e);
              }
              return mapAsync(_this.args, f, (_once2 = false, function (_e2, args) {
                if (_once2) {
                  throw Error("Attempted to call function more than once");
                } else {
                  _once2 = true;
                }
                if (_e2 != null) {
                  return callback(_e2);
                }
                return callback(null, basetype !== _this.basetype || args !== _this.args ? TypeGenericNode(_this.index, _this.scope, basetype, args) : _this);
              }));
            }));
          };
          return TypeGenericNode;
        }(Node));
        Node.TypeObject = Node.byTypeId[46] = TypeObjectNode = (function (Node) {
          var _Node_prototype, _TypeObjectNode_prototype;
          function TypeObjectNode(index, scope, pairs) {
            var _this;
            _this = this instanceof TypeObjectNode ? this : __create(_TypeObjectNode_prototype);
            _this.index = index;
            _this.scope = scope;
            _this._reduced = void 0;
            _this._macroExpanded = void 0;
            _this._macroExpandAlled = void 0;
            _this.pairs = pairs;
            return _this;
          }
          _Node_prototype = Node.prototype;
          _TypeObjectNode_prototype = TypeObjectNode.prototype = __create(_Node_prototype);
          _TypeObjectNode_prototype.constructor = TypeObjectNode;
          TypeObjectNode.displayName = "TypeObjectNode";
          if (typeof Node.extended === "function") {
            Node.extended(TypeObjectNode);
          }
          _TypeObjectNode_prototype.typeId = 46;
          TypeObjectNode.argNames = ["pairs"];
          function reducePair(pair, o) {
            var key, value;
            key = pair.key.reduce(o);
            value = pair.value.reduce(o);
            if (key !== pair.key || value !== pair.value) {
              return { key: key, value: value };
            } else {
              return pair;
            }
          }
          _TypeObjectNode_prototype._reduce = function (o) {
            var pairs;
            pairs = map(this.pairs, reducePair, o);
            if (pairs !== this.pairs) {
              return TypeObjectNode(this.index, this.scope, pairs);
            } else {
              return this;
            }
          };
          _TypeObjectNode_prototype.inspect = function (depth) {
            return inspectHelper(depth, "TypeObjectNode", this.index, this.pairs);
          };
          _TypeObjectNode_prototype.walk = function (f) {
            return this;
          };
          _TypeObjectNode_prototype.walkAsync = function (f, callback) {
            return callback(null, this);
          };
          return TypeObjectNode;
        }(Node));
        Node.TypeUnion = Node.byTypeId[47] = TypeUnionNode = (function (Node) {
          var _Node_prototype, _TypeUnionNode_prototype;
          function TypeUnionNode(index, scope, types) {
            var _this;
            _this = this instanceof TypeUnionNode ? this : __create(_TypeUnionNode_prototype);
            if (types == null) {
              types = [];
            }
            _this.index = index;
            _this.scope = scope;
            _this._reduced = void 0;
            _this._macroExpanded = void 0;
            _this._macroExpandAlled = void 0;
            _this.types = types;
            return _this;
          }
          _Node_prototype = Node.prototype;
          _TypeUnionNode_prototype = TypeUnionNode.prototype = __create(_Node_prototype);
          _TypeUnionNode_prototype.constructor = TypeUnionNode;
          TypeUnionNode.displayName = "TypeUnionNode";
          if (typeof Node.extended === "function") {
            Node.extended(TypeUnionNode);
          }
          _TypeUnionNode_prototype.typeId = 47;
          TypeUnionNode.argNames = ["types"];
          _TypeUnionNode_prototype.inspect = function (depth) {
            return inspectHelper(depth, "TypeUnionNode", this.index, this.types);
          };
          _TypeUnionNode_prototype.walk = function (f) {
            var types;
            types = map(this.types, f);
            if (types !== this.types) {
              return TypeUnionNode(this.index, this.scope, types);
            } else {
              return this;
            }
          };
          _TypeUnionNode_prototype.walkAsync = function (f, callback) {
            var _once, _this;
            _this = this;
            return mapAsync(this.types, f, (_once = false, function (_e, types) {
              if (_once) {
                throw Error("Attempted to call function more than once");
              } else {
                _once = true;
              }
              if (_e != null) {
                return callback(_e);
              }
              return callback(null, types !== _this.types ? TypeUnionNode(_this.index, _this.scope, types) : _this);
            }));
          };
          return TypeUnionNode;
        }(Node));
        Node.Unary = Node.byTypeId[48] = UnaryNode = (function (Node) {
          var _Node_prototype, _UnaryNode_prototype;
          function UnaryNode(index, scope, op, node) {
            var _this;
            _this = this instanceof UnaryNode ? this : __create(_UnaryNode_prototype);
            _this.index = index;
            _this.scope = scope;
            _this._reduced = void 0;
            _this._macroExpanded = void 0;
            _this._macroExpandAlled = void 0;
            _this.op = op;
            _this.node = node;
            return _this;
          }
          _Node_prototype = Node.prototype;
          _UnaryNode_prototype = UnaryNode.prototype = __create(_Node_prototype);
          _UnaryNode_prototype.constructor = UnaryNode;
          UnaryNode.displayName = "UnaryNode";
          if (typeof Node.extended === "function") {
            Node.extended(UnaryNode);
          }
          _UnaryNode_prototype.typeId = 48;
          UnaryNode.argNames = ["op", "node"];
          _UnaryNode_prototype.type = (function () {
            var ops;
            ops = {
              "-": Type.number,
              "+": Type.number,
              "--": Type.number,
              "++": Type.number,
              "--post": Type.number,
              "++post": Type.number,
              "!": Type.boolean,
              "~": Type.number,
              "typeof": Type.string,
              "delete": Type.boolean
            };
            return function () {
              var _ref;
              return (__owns.call(ops, _ref = this.op) ? ops[_ref] : void 0) || Type.any;
            };
          }());
          _UnaryNode_prototype._reduce = (function () {
            var constOps, nonconstOps;
            constOps = {
              "-": function (x) {
                return -x;
              },
              "+": function (x) {
                return +x;
              },
              "!": function (x) {
                return !x;
              },
              "~": function (x) {
                return ~x;
              },
              "typeof": function (x) {
                return typeof x;
              }
            };
            nonconstOps = {
              "+": function (node, o) {
                if (node.type(o).isSubsetOf(Type.number)) {
                  return node;
                }
              },
              "-": function (node) {
                var _ref;
                if (node instanceof UnaryNode) {
                  if ((_ref = node.op) === "-" || _ref === "+") {
                    return UnaryNode(
                      this.index,
                      this.scope,
                      node.op === "-" ? "+" : "-",
                      node.node
                    );
                  }
                } else if (node instanceof BinaryNode) {
                  if ((_ref = node.op) === "-" || _ref === "+") {
                    return BinaryNode(
                      this.index,
                      this.scope,
                      UnaryNode(node.left.index, node.left.scope, "-", node.left),
                      node.op === "-" ? "+" : "-",
                      node.right
                    );
                  } else if ((_ref = node.op) === "*" || _ref === "/") {
                    return BinaryNode(
                      this.index,
                      this.scope,
                      UnaryNode(node.left.index, node.left.scope, "-", node.left),
                      node.op,
                      node.right
                    );
                  }
                }
              },
              "!": (function () {
                var invertibleBinaryOps;
                invertibleBinaryOps = {
                  "<": ">=",
                  "<=": ">",
                  ">": "<=",
                  ">=": "<",
                  "==": "!=",
                  "!=": "==",
                  "===": "!==",
                  "!==": "===",
                  "&&": function (x, y) {
                    return BinaryNode(
                      this.index,
                      this.scope,
                      UnaryNode(x.index, x.scope, "!", x),
                      "||",
                      UnaryNode(y.index, y.scope, "!", y)
                    );
                  },
                  "||": function (x, y) {
                    return BinaryNode(
                      this.index,
                      this.scope,
                      UnaryNode(x.index, x.scope, "!", x),
                      "&&",
                      UnaryNode(y.index, y.scope, "!", y)
                    );
                  }
                };
                return function (node, o) {
                  var invert;
                  if (node instanceof UnaryNode) {
                    if (node.op === "!" && node.node.type(o).isSubsetOf(Type.boolean)) {
                      return node.node;
                    }
                  } else if (node instanceof BinaryNode && __owns.call(invertibleBinaryOps, node.op)) {
                    invert = invertibleBinaryOps[node.op];
                    if (typeof invert === "function") {
                      return invert.call(this, node.left, node.right);
                    } else {
                      return BinaryNode(
                        this.index,
                        this.scope,
                        node.left,
                        invert,
                        node.right
                      );
                    }
                  }
                };
              }()),
              "typeof": (function () {
                var objectType;
                objectType = Type["null"].union(Type.object).union(Type.arrayLike).union(Type.regexp).union(Type.date).union(Type.error);
                return function (node, o) {
                  var type;
                  if (node.isNoop(o)) {
                    type = node.type(o);
                    if (type.isSubsetOf(Type.number)) {
                      return ConstNode(this.index, this.scope, "number");
                    } else if (type.isSubsetOf(Type.string)) {
                      return ConstNode(this.index, this.scope, "string");
                    } else if (type.isSubsetOf(Type.boolean)) {
                      return ConstNode(this.index, this.scope, "boolean");
                    } else if (type.isSubsetOf(Type["undefined"])) {
                      return ConstNode(this.index, this.scope, "undefined");
                    } else if (type.isSubsetOf(Type["function"])) {
                      return ConstNode(this.index, this.scope, "function");
                    } else if (type.isSubsetOf(objectType)) {
                      return ConstNode(this.index, this.scope, "object");
                    }
                  }
                };
              }())
            };
            return function (o) {
              var node, op, result;
              node = this.node.reduce(o).doWrap(o);
              op = this.op;
              if (node.isConst() && __owns.call(constOps, op)) {
                return ConstNode(this.index, this.scope, constOps[op](node.constValue()));
              }
              if (__owns.call(nonconstOps, op)) {
                result = nonconstOps[op].call(this, node, o);
              }
              if (result != null) {
                return result.reduce(o);
              }
              if (node !== this.node) {
                return UnaryNode(this.index, this.scope, op, node);
              } else {
                return this;
              }
            };
          }());
          _UnaryNode_prototype._isNoop = function (o) {
            var _ref, _ref2;
            if ((_ref = this.__isNoop) == null) {
              return this.__isNoop = (_ref2 = this.op) !== "++" && _ref2 !== "--" && _ref2 !== "++post" && _ref2 !== "--post" && _ref2 !== "delete" && this.node.isNoop(o);
            } else {
              return _ref;
            }
          };
          _UnaryNode_prototype.inspect = function (depth) {
            return inspectHelper(
              depth,
              "UnaryNode",
              this.index,
              this.op,
              this.node
            );
          };
          _UnaryNode_prototype.walk = function (f) {
            var node;
            node = f(this.node);
            if (node !== this.node) {
              return UnaryNode(this.index, this.scope, this.op, node);
            } else {
              return this;
            }
          };
          _UnaryNode_prototype.walkAsync = function (f, callback) {
            var _once, _this;
            _this = this;
            return f(this.node, (_once = false, function (_e, node) {
              if (_once) {
                throw Error("Attempted to call function more than once");
              } else {
                _once = true;
              }
              if (_e != null) {
                return callback(_e);
              }
              return callback(null, node !== _this.node ? UnaryNode(_this.index, _this.scope, _this.op, node) : _this);
            }));
          };
          return UnaryNode;
        }(Node));
        Node.Var = Node.byTypeId[49] = VarNode = (function (Node) {
          var _Node_prototype, _VarNode_prototype;
          function VarNode(index, scope, ident, isMutable) {
            var _this;
            _this = this instanceof VarNode ? this : __create(_VarNode_prototype);
            if (isMutable == null) {
              isMutable = false;
            }
            _this.index = index;
            _this.scope = scope;
            _this._reduced = void 0;
            _this._macroExpanded = void 0;
            _this._macroExpandAlled = void 0;
            _this.ident = ident;
            _this.isMutable = isMutable;
            return _this;
          }
          _Node_prototype = Node.prototype;
          _VarNode_prototype = VarNode.prototype = __create(_Node_prototype);
          _VarNode_prototype.constructor = VarNode;
          VarNode.displayName = "VarNode";
          if (typeof Node.extended === "function") {
            Node.extended(VarNode);
          }
          _VarNode_prototype.typeId = 49;
          VarNode.argNames = ["ident", "isMutable"];
          _VarNode_prototype.type = function () {
            return Type["undefined"];
          };
          _VarNode_prototype._reduce = function (o) {
            var ident;
            ident = this.ident.reduce(o);
            if (ident !== this.ident) {
              return VarNode(this.index, this.scope, ident, this.isMutable);
            } else {
              return this;
            }
          };
          _VarNode_prototype.inspect = function (depth) {
            return inspectHelper(
              depth,
              "VarNode",
              this.index,
              this.ident,
              this.isMutable
            );
          };
          _VarNode_prototype.walk = function (f) {
            var ident;
            ident = f(this.ident);
            if (ident !== this.ident) {
              return VarNode(this.index, this.scope, ident, this.isMutable);
            } else {
              return this;
            }
          };
          _VarNode_prototype.walkAsync = function (f, callback) {
            var _once, _this;
            _this = this;
            return f(this.ident, (_once = false, function (_e, ident) {
              if (_once) {
                throw Error("Attempted to call function more than once");
              } else {
                _once = true;
              }
              if (_e != null) {
                return callback(_e);
              }
              return callback(null, ident !== _this.ident ? VarNode(_this.index, _this.scope, ident, _this.isMutable) : _this);
            }));
          };
          return VarNode;
        }(Node));
        Node.Yield = Node.byTypeId[50] = YieldNode = (function (Node) {
          var _Node_prototype, _YieldNode_prototype;
          function YieldNode(index, scope, node) {
            var _this;
            _this = this instanceof YieldNode ? this : __create(_YieldNode_prototype);
            _this.index = index;
            _this.scope = scope;
            _this._reduced = void 0;
            _this._macroExpanded = void 0;
            _this._macroExpandAlled = void 0;
            _this.node = node;
            return _this;
          }
          _Node_prototype = Node.prototype;
          _YieldNode_prototype = YieldNode.prototype = __create(_Node_prototype);
          _YieldNode_prototype.constructor = YieldNode;
          YieldNode.displayName = "YieldNode";
          if (typeof Node.extended === "function") {
            Node.extended(YieldNode);
          }
          _YieldNode_prototype.typeId = 50;
          YieldNode.argNames = ["node"];
          _YieldNode_prototype.type = function () {
            return Type.any;
          };
          _YieldNode_prototype._reduce = function (o) {
            var node;
            node = this.node.reduce(o).doWrap(o);
            if (node !== this.node) {
              return YieldNode(this.index, this.scope, node);
            } else {
              return this;
            }
          };
          _YieldNode_prototype.inspect = function (depth) {
            return inspectHelper(depth, "YieldNode", this.index, this.node);
          };
          _YieldNode_prototype.walk = function (f) {
            var node;
            node = f(this.node);
            if (node !== this.node) {
              return YieldNode(this.index, this.scope, node);
            } else {
              return this;
            }
          };
          _YieldNode_prototype.walkAsync = function (f, callback) {
            var _once, _this;
            _this = this;
            return f(this.node, (_once = false, function (_e, node) {
              if (_once) {
                throw Error("Attempted to call function more than once");
              } else {
                _once = true;
              }
              if (_e != null) {
                return callback(_e);
              }
              return callback(null, node !== _this.node ? YieldNode(_this.index, _this.scope, node) : _this);
            }));
          };
          return YieldNode;
        }(Node));
        module.exports = Node;
      }.call(this, typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : this));
      
      return module.exports;
    };
    require['./parser-macroholder'] = function () {
      var module = { exports: this };
      var exports = this;
      (function () {
        "use strict";
        var __create, __import, __isArray, __owns, __slice, __toArray, __typeof,
            MacroHolder, Type;
        __create = typeof Object.create === "function" ? Object.create
          : function (x) {
            function F() {}
            F.prototype = x;
            return new F();
          };
        __import = function (dest, source) {
          var k;
          for (k in source) {
            if (__owns.call(source, k)) {
              dest[k] = source[k];
            }
          }
          return dest;
        };
        __isArray = typeof Array.isArray === "function" ? Array.isArray
          : (function () {
            var _toString;
            _toString = Object.prototype.toString;
            return function (x) {
              return _toString.call(x) === "[object Array]";
            };
          }());
        __owns = Object.prototype.hasOwnProperty;
        __slice = Array.prototype.slice;
        __toArray = function (x) {
          if (x == null) {
            throw TypeError("Expected an object, got " + __typeof(x));
          } else if (__isArray(x)) {
            return x;
          } else if (typeof x === "string") {
            return x.split("");
          } else if (typeof x.length === "number") {
            return __slice.call(x);
          } else {
            throw TypeError("Expected an object with a length property, got " + __typeof(x));
          }
        };
        __typeof = (function () {
          var _toString;
          _toString = Object.prototype.toString;
          return function (o) {
            if (o === void 0) {
              return "Undefined";
            } else if (o === null) {
              return "Null";
            } else {
              return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
            }
          };
        }());
        Type = require("./types");
        MacroHolder = (function () {
          var _MacroHolder_prototype;
          function MacroHolder(syntaxes, macroName, wordOrSymbol, oneOf, sequential) {
            var _this;
            _this = this instanceof MacroHolder ? this : __create(_MacroHolder_prototype);
            _this.syntaxes = syntaxes;
            _this.macroName = macroName;
            _this.wordOrSymbol = wordOrSymbol;
            _this.oneOf = oneOf;
            _this.sequential = sequential;
            _this.byName = {};
            _this.byId = [];
            _this.byLabel = {};
            _this.typeById = [];
            _this.operatorNames = {};
            _this.binaryOperators = [];
            _this.assignOperators = [];
            _this.prefixUnaryOperators = [];
            _this.postfixUnaryOperators = [];
            _this.consts = {};
            _this.serialization = {};
            _this.helpers = {};
            return _this;
          }
          _MacroHolder_prototype = MacroHolder.prototype;
          MacroHolder.displayName = "MacroHolder";
          _MacroHolder_prototype.clone = function () {
            var clone;
            clone = MacroHolder(
              this.syntaxes,
              this.macroName,
              this.wordOrSymbol,
              this.oneOf,
              this.sequential
            );
            clone.byName = __import({}, this.byName);
            clone.byId = this.byId.slice();
            clone.byLabel = __import({}, this.byLabel);
            clone.typeById = this.typeById.slice();
            clone.operatorNames = __import({}, this.operatorNames);
            clone.binaryOperators = this.binaryOperators.slice();
            clone.assignOperators = this.assignOperators.slice();
            clone.prefixUnaryOperators = this.prefixUnaryOperators.slice();
            clone.postfixUnaryOperators = this.postfixUnaryOperators.slice();
            clone.consts = __import({}, this.consts);
            clone.serialization = __import({}, this.serialization);
            clone.helpers = __import({}, this.helpers);
            clone.syntaxes = __import({}, this.syntaxes);
            return clone;
          };
          _MacroHolder_prototype.getByName = function (name) {
            var _ref;
            if (__owns.call(_ref = this.byName, name)) {
              return _ref[name];
            }
          };
          _MacroHolder_prototype.getOrAddByName = function (name) {
            var byName, m, token;
            byName = this.byName;
            if (__owns.call(byName, name)) {
              return byName[name];
            } else {
              token = this.macroName(name);
              m = function (parser, index) {
                var _arr, _i, _len, _ref, item;
                for (_arr = __toArray(m.data), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                  item = _arr[_i];
                  if (_ref = item(parser, index)) {
                    return _ref;
                  }
                }
              };
              m.token = token;
              m.data = [];
              return byName[name] = m;
            }
          };
          _MacroHolder_prototype.getOrAddByNames = function (names) {
            var _arr, _i, _len, name;
            for (_arr = [], _i = 0, _len = names.length; _i < _len; ++_i) {
              name = names[_i];
              _arr.push(this.getOrAddByName(name));
            }
            return _arr;
          };
          _MacroHolder_prototype.setTypeById = function (id, type) {
            this.typeById[id] = type;
          };
          _MacroHolder_prototype.getTypeById = function (id) {
            return this.typeById[id];
          };
          _MacroHolder_prototype.getById = function (id) {
            var byId;
            byId = this.byId;
            if (id >= 0 && id < byId.length) {
              return byId[id];
            }
          };
          _MacroHolder_prototype.addMacro = function (m, macroId, type) {
            var byId;
            if (macroId == null) {
              macroId = void 0;
            }
            if (type == null) {
              type = void 0;
            }
            byId = this.byId;
            if (macroId != null) {
              if (__owns.call(byId, macroId)) {
                throw Error("Cannot add macro #" + macroId + ", as it already exists");
              }
              byId[macroId] = m;
            } else {
              byId.push(m);
              macroId = byId.length - 1;
            }
            if (type != null) {
              this.typeById[macroId] = type;
            }
            return macroId;
          };
          _MacroHolder_prototype.replaceMacro = function (id, m, type) {
            var byId;
            if (type == null) {
              type = void 0;
            }
            byId = this.byId;
            byId[id] = m;
            if (type != null) {
              this.typeById[id] = type;
            }
          };
          _MacroHolder_prototype.hasMacroOrOperator = function (name) {
            return __owns.call(this.byName, name) || __owns.call(this.operatorNames, name);
          };
          _MacroHolder_prototype.getMacroAndOperatorNames = function () {
            var _obj, name, names;
            names = [];
            _obj = this.byName;
            for (name in _obj) {
              if (__owns.call(_obj, name)) {
                names.push(name);
              }
            }
            _obj = this.operatorNames;
            for (name in _obj) {
              if (__owns.call(_obj, name)) {
                names.push(name);
              }
            }
            return names;
          };
          _MacroHolder_prototype.allBinaryOperators = function () {
            var _arr, _i, _len, _ref, array, result;
            if ((_ref = this._allBinaryOperators) == null) {
              result = [];
              for (_arr = __toArray(this.binaryOperators), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                array = _arr[_i];
                result.push.apply(result, __toArray(array));
              }
              return this._allBinaryOperators = result;
            } else {
              return _ref;
            }
          };
          _MacroHolder_prototype.addBinaryOperator = function (operators, m, options, macroId) {
            var _arr, _i, _ref, _this, binaryOperators, data, i, op, precedence;
            _this = this;
            for (_arr = __toArray(operators), _i = _arr.length; _i--; ) {
              op = _arr[_i];
              this.operatorNames[op] = true;
            }
            precedence = Number(options.precedence) || 0;
            for (i = +this.binaryOperators.length; i <= precedence; ++i) {
              this.binaryOperators[i] = [];
            }
            binaryOperators = this.binaryOperators[precedence];
            data = {
              rule: this.oneOf.apply(this, (function () {
                var _arr, _arr2, _i, _len, op;
                for (_arr = [], _arr2 = __toArray(operators), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                  op = _arr2[_i];
                  _arr.push(_this.wordOrSymbol(op));
                }
                return _arr;
              }())),
              func: m,
              rightToLeft: !!options.rightToLeft,
              maximum: options.maximum || 0,
              minimum: options.minimum || 0,
              invertible: !!options.invertible
            };
            binaryOperators.push(data);
            this._allBinaryOperators = null;
            if (options.label) {
              this.addByLabel(options.label, data);
            }
            return this.addMacro(m, macroId, (_ref = options.type) === "left" || _ref === "right" ? options.type
              : options.type != null && __owns.call(Type, _ref = options.type) ? Type[_ref]
              : void 0);
          };
          _MacroHolder_prototype.getByLabel = function (label) {
            var _ref;
            if (__owns.call(_ref = this.byLabel, label)) {
              return _ref[label];
            }
          };
          _MacroHolder_prototype.addByLabel = function (label, data) {
            return this.byLabel[label] = data;
          };
          _MacroHolder_prototype.addAssignOperator = function (operators, m, options, macroId) {
            var _arr, _i, _ref, _this, data, op;
            _this = this;
            for (_arr = __toArray(operators), _i = _arr.length; _i--; ) {
              op = _arr[_i];
              this.operatorNames[op] = true;
            }
            data = {
              rule: this.oneOf.apply(this, (function () {
                var _arr, _arr2, _i, _len, op;
                for (_arr = [], _arr2 = __toArray(operators), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                  op = _arr2[_i];
                  if (op === ":=") {
                    _arr.push(_this.syntaxes.ColonEqual);
                  } else {
                    _arr.push(_this.wordOrSymbol(op));
                  }
                }
                return _arr;
              }())),
              func: m
            };
            this.assignOperators.push(data);
            if (options.label) {
              this.addByLabel(options.label, data);
            }
            return this.addMacro(m, macroId, (_ref = options.type) === "left" || _ref === "right" ? options.type
              : options.type != null && __owns.call(Type, _ref = options.type) ? Type[_ref]
              : void 0);
          };
          _MacroHolder_prototype.addUnaryOperator = function (operators, m, options, macroId) {
            var _arr, _i, _ref, _this, data, op, store;
            _this = this;
            for (_arr = __toArray(operators), _i = _arr.length; _i--; ) {
              op = _arr[_i];
              this.operatorNames[op] = true;
            }
            if (options.postfix) {
              store = this.postfixUnaryOperators;
            } else {
              store = this.prefixUnaryOperators;
            }
            data = {
              rule: this.oneOf.apply(this, (function () {
                var _arr, _arr2, _i, _len, op, rule;
                for (_arr = [], _arr2 = __toArray(operators), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                  op = _arr2[_i];
                  rule = _this.wordOrSymbol(op);
                  if (!/[a-zA-Z]/.test(op)) {
                    if (options.postfix) {
                      _arr.push(_this.sequential(_this.syntaxes.NoSpace, ["this", rule]));
                    } else {
                      _arr.push(_this.sequential(
                        ["this", rule],
                        _this.syntaxes.NoSpace
                      ));
                    }
                  } else {
                    _arr.push(rule);
                  }
                }
                return _arr;
              }())),
              func: m,
              standalone: __owns.call(!options, "standalone") || !!options.standalone
            };
            store.push(data);
            if (options.label) {
              this.addByLabel(options.label, data);
            }
            return this.addMacro(m, macroId, options.type === "node" ? options.type
              : options.type != null && __owns.call(Type, _ref = options.type) ? Type[_ref]
              : void 0);
          };
          _MacroHolder_prototype.addSerializedHelper = function (name, helper, type, dependencies) {
            var _ref, _ref2, helpers;
            if ((_ref = (_ref2 = this.serialization).helpers) != null) {
              helpers = _ref;
            } else {
              helpers = _ref2.helpers = {};
            }
            helpers[name] = { helper: helper, type: type, dependencies: dependencies };
          };
          _MacroHolder_prototype.addConst = function (name, value) {
            this.consts[name] = value;
          };
          _MacroHolder_prototype.addSerializedConst = function (name) {
            var _ref, _ref2, consts;
            if (!__owns.call(this.consts, name)) {
              throw Error("Unknown const " + name);
            }
            if ((_ref = (_ref2 = this.serialization).consts) != null) {
              consts = _ref;
            } else {
              consts = _ref2.consts = {};
            }
            consts[name] = this.consts[name];
          };
          _MacroHolder_prototype.addMacroSerialization = function (serialization) {
            var _ref, _ref2, _ref3, byType, obj;
            obj = __import({}, serialization);
            delete obj.type;
            if ((_ref = (_ref2 = this.serialization)[_ref3 = serialization.type]) != null) {
              byType = _ref;
            } else {
              byType = _ref2[_ref3] = [];
            }
            byType.push(obj);
          };
          _MacroHolder_prototype.addSyntax = function (name, value) {
            if (__owns.call(this.syntaxes, name)) {
              throw Error("Cannot override already-defined syntax: " + name);
            }
            this.syntaxes[name] = value;
          };
          _MacroHolder_prototype.hasSyntax = function (name) {
            return __owns.call(this.syntaxes, name);
          };
          _MacroHolder_prototype.getSyntax = function (name) {
            if (__owns.call(this.syntaxes, name)) {
              return this.syntaxes[name];
            } else {
              throw Error("Unknown syntax: " + name);
            }
          };
          _MacroHolder_prototype.serialize = function () {
            var _arr, _this, ast, dep, helper, helpers, i, name, noPos, serialization,
                serializedAssignOperators, serializedBinaryOperators, serializedCall,
                serializedDefineSyntax, serializedHelpers, serializedSyntax,
                serializedUnaryOperators;
            _this = this;
            serialization = __import({}, this.serialization);
            helpers = __owns.call(serialization, "helpers") && serialization.helpers || {};
            for (name in helpers) {
              if (__owns.call(helpers, name)) {
                helper = helpers[name];
                for (_arr = __toArray(helper.dependencies), i = _arr.length; i--; ) {
                  dep = _arr[i];
                  if (!__owns.call(helpers, dep) || dep === name) {
                    helper.dependencies.splice(i, 1);
                  }
                }
              }
            }
            function asJson(x) {
              if (x === void 0) {
                return x;
              } else {
                return JSON.parse(JSON.stringify(x));
              }
            }
            function toJS(x) {
              return require("./jsutils").toJSSource(x, null, { indent: 2 });
            }
            noPos = { line: 0, column: 0 };
            ast = require("./jsast");
            function unwrapFunc(code) {
              code = code.replace(/^return\s*([\s\S]*);\s*$/, "$1");
              code = code.replace(/^\s*\(function\s*\(\s*\)\s*{\s*"use strict";\s*return\s*function([\s\S]*)\};\s*\}\.call\(this\)\)\s*$/, "function$1}");
              code = code.replace(/^\s*\(function\s*\(\s*\)\s*{\s*"use strict";\s*([\s\S]*)\};\s*\}\.call\(this\)\)\s*$/, "function() {\n  $1\n  }\n}.call(this)");
              code = code.split("\n").join("\n      ");
              return code;
            }
            serializedHelpers = ast.Obj(noPos, (function () {
              var _arr, helper, name;
              _arr = [];
              for (name in helpers) {
                if (__owns.call(helpers, name)) {
                  helper = helpers[name];
                  _arr.push(ast.Obj.Pair(noPos, name, ast.Obj(noPos, [
                    ast.Obj.Pair(noPos, "helper", helper.helper.toAst(noPos, ast.Ident(noPos, "AST$"))),
                    ast.Obj.Pair(noPos, "type", helper.type.toAst(ast, noPos, ast.Ident(noPos, "TYPE$"))),
                    ast.Obj.Pair(noPos, "dependencies", ast.fromLiteral(noPos, asJson(helper.dependencies)))
                  ])));
                }
              }
              return _arr;
            }())).toString({ indent: 2 });
            serializedBinaryOperators = ast.Arr(noPos, (function () {
              var _arr, _arr2, _i, _len, _ref, code, id, operators, options;
              for (_arr = [], _arr2 = __toArray(serialization.binaryOperator), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                _ref = _arr2[_i];
                code = _ref.code;
                operators = _ref.operators;
                options = _ref.options;
                id = _ref.id;
                _arr.push(ast.Obj(noPos, [
                  ast.Obj.Pair(noPos, "code", ast.Eval(noPos, unwrapFunc(code))),
                  ast.Obj.Pair(noPos, "operators", ast.fromLiteral(noPos, operators)),
                  ast.Obj.Pair(noPos, "options", ast.fromLiteral(noPos, options)),
                  ast.Obj.Pair(noPos, "id", ast.fromLiteral(noPos, id))
                ]));
              }
              return _arr;
            }())).toString({ indent: 2 });
            serializedAssignOperators = ast.Arr(noPos, (function () {
              var _arr, _arr2, _i, _len, _ref, code, id, operators, options;
              for (_arr = [], _arr2 = __toArray(serialization.assignOperator), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                _ref = _arr2[_i];
                code = _ref.code;
                operators = _ref.operators;
                options = _ref.options;
                id = _ref.id;
                _arr.push(ast.Obj(noPos, [
                  ast.Obj.Pair(noPos, "code", ast.Eval(noPos, unwrapFunc(code))),
                  ast.Obj.Pair(noPos, "operators", ast.fromLiteral(noPos, operators)),
                  ast.Obj.Pair(noPos, "options", ast.fromLiteral(noPos, options)),
                  ast.Obj.Pair(noPos, "id", ast.fromLiteral(noPos, id))
                ]));
              }
              return _arr;
            }())).toString({ indent: 2 });
            serializedUnaryOperators = ast.Arr(noPos, (function () {
              var _arr, _arr2, _i, _len, _ref, code, id, operators, options;
              for (_arr = [], _arr2 = __toArray(serialization.unaryOperator), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                _ref = _arr2[_i];
                code = _ref.code;
                operators = _ref.operators;
                options = _ref.options;
                id = _ref.id;
                _arr.push(ast.Obj(noPos, [
                  ast.Obj.Pair(noPos, "code", ast.Eval(noPos, unwrapFunc(code))),
                  ast.Obj.Pair(noPos, "operators", ast.fromLiteral(noPos, operators)),
                  ast.Obj.Pair(noPos, "options", ast.fromLiteral(noPos, options)),
                  ast.Obj.Pair(noPos, "id", ast.fromLiteral(noPos, id))
                ]));
              }
              return _arr;
            }())).toString({ indent: 2 });
            serializedDefineSyntax = ast.Arr(noPos, (function () {
              var _arr, _arr2, _i, _len, _ref, code, id, options, params;
              for (_arr = [], _arr2 = __toArray(serialization.defineSyntax), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                _ref = _arr2[_i];
                code = _ref.code;
                options = _ref.options;
                params = _ref.params;
                id = _ref.id;
                _arr.push(ast.Obj(noPos, [
                  ast.Obj.Pair(noPos, "code", code && ast.Eval(noPos, unwrapFunc(code))),
                  ast.Obj.Pair(noPos, "options", ast.fromLiteral(noPos, options)),
                  ast.Obj.Pair(noPos, "params", ast.fromLiteral(noPos, asJson(params))),
                  ast.Obj.Pair(noPos, "id", ast.fromLiteral(noPos, id))
                ]));
              }
              return _arr;
            }())).toString({ indent: 2 });
            serializedSyntax = ast.Arr(noPos, (function () {
              var _arr, _arr2, _i, _len, _ref, code, id, names, options, params;
              for (_arr = [], _arr2 = __toArray(serialization.syntax), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                _ref = _arr2[_i];
                code = _ref.code;
                options = _ref.options;
                params = _ref.params;
                names = _ref.names;
                id = _ref.id;
                _arr.push(ast.Obj(noPos, [
                  ast.Obj.Pair(noPos, "code", code && ast.Eval(noPos, unwrapFunc(code))),
                  ast.Obj.Pair(noPos, "options", ast.fromLiteral(noPos, options)),
                  ast.Obj.Pair(noPos, "params", ast.fromLiteral(noPos, asJson(params))),
                  ast.Obj.Pair(noPos, "names", ast.fromLiteral(noPos, names)),
                  ast.Obj.Pair(noPos, "id", ast.fromLiteral(noPos, id))
                ]));
              }
              return _arr;
            }())).toString({ indent: 2 });
            serializedCall = ast.Arr(noPos, (function () {
              var _arr, _arr2, _i, _len, _ref, code, id, names, options;
              for (_arr = [], _arr2 = __toArray(serialization.call), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                _ref = _arr2[_i];
                code = _ref.code;
                options = _ref.options;
                names = _ref.names;
                id = _ref.id;
                _arr.push(ast.Obj(noPos, [
                  ast.Obj.Pair(noPos, "code", code && ast.Eval(noPos, unwrapFunc(code))),
                  ast.Obj.Pair(noPos, "options", ast.fromLiteral(noPos, options)),
                  ast.Obj.Pair(noPos, "names", ast.fromLiteral(noPos, names)),
                  ast.Obj.Pair(noPos, "id", ast.fromLiteral(noPos, id))
                ]));
              }
              return _arr;
            }())).toString({ indent: 2 });
            return "function (TYPE$, AST$) {\n  return {\n    consts: " + toJS(serialization.consts) + ",\n    helpers: " + serializedHelpers + ",\n    binaryOperator: " + serializedBinaryOperators + ",\n    assignOperator: " + serializedAssignOperators + ",\n    unaryOperator: " + serializedUnaryOperators + ",\n    defineSyntax: " + serializedDefineSyntax + ",\n    syntax: " + serializedSyntax + ",\n    call: " + serializedCall + "\n  };\n}";
          };
          _MacroHolder_prototype.deserialize = function (getData, state) {
            var _obj, _ref, ast, data, dependencies, helper, name, type, value;
            ast = require("./jsast");
            data = getData(Type, ast.byTypeId);
            _obj = (_ref = __owns.call(data, "helpers") ? data.helpers : void 0) != null ? _ref : {};
            for (name in _obj) {
              if (__owns.call(_obj, name)) {
                _ref = _obj[name];
                helper = _ref.helper;
                type = _ref.type;
                dependencies = _ref.dependencies;
                if (!(helper instanceof ast.Node)) {
                  throw Error("bad helper ast in helper " + name);
                }
                if (!(type instanceof Type)) {
                  throw Error("bad type in helper " + name);
                }
                this.addHelper(name, helper, type, dependencies);
              }
            }
            _obj = (_ref = __owns.call(data, "consts") ? data.consts : void 0) != null ? _ref : {};
            for (name in _obj) {
              if (__owns.call(_obj, name)) {
                value = _obj[name];
                this.addConst(name, value);
              }
            }
            state.deserializeMacros(data);
          };
          _MacroHolder_prototype.addHelper = function (name, value, type, dependencies) {
            if (__owns.call(this.helpers, name)) {
              throw Error("Trying to overwrite helper " + name);
            }
            return this.helpers[name] = { value: value, type: type, dependencies: dependencies };
          };
          _MacroHolder_prototype.hasHelper = function (name) {
            return __owns.call(this.helpers, name);
          };
          _MacroHolder_prototype.getHelper = function (name) {
            if (__owns.call(this.helpers, name)) {
              return this.helpers[name].value;
            } else {
              throw Error("No such helper: " + name);
            }
          };
          _MacroHolder_prototype.helperType = function (name) {
            if (__owns.call(this.helpers, name)) {
              return this.helpers[name].type;
            } else {
              throw Error("No such helper: " + name);
            }
          };
          _MacroHolder_prototype.helperDependencies = function (name) {
            if (__owns.call(this.helpers, name)) {
              return this.helpers[name].dependencies;
            } else {
              throw Error("No such helper: " + name);
            }
          };
          return MacroHolder;
        }());
        module.exports = MacroHolder;
      }.call(this));
      
      return module.exports;
    };
    require['./parser-macrocontext'] = function () {
      var module = { exports: this };
      var exports = this;
      (function () {
        "use strict";
        var __create, __isArray, __owns, __slice, __throw, __toArray, __typeof, _ref,
            AccessMultiNode, AccessNode, addParamToScope, ArgsNode, ArrayNode,
            AssignNode, BinaryNode, BlockNode, BreakNode, CallNode, CommentNode,
            ConstNode, ContinueNode, DebuggerNode, DefNode, EmbedWriteNode, EvalNode,
            ForInNode, ForNode, FunctionNode, IdentNode, IfNode, MacroAccessNode,
            MacroConstNode, MacroContext, map, Node, nodeToType, NothingNode,
            ObjectNode, ParamNode, RegexpNode, ReturnNode, RootNode, Scope,
            SpreadNode, SuperNode, SwitchNode, SyntaxChoiceNode, SyntaxManyNode,
            SyntaxParamNode, SyntaxSequenceNode, ThisNode, ThrowNode, TmpNode,
            TmpWrapperNode, TryCatchNode, TryFinallyNode, Type, TypeFunctionNode,
            TypeGenericNode, TypeObjectNode, TypeUnionNode, UnaryNode, VarNode,
            YieldNode;
        __create = typeof Object.create === "function" ? Object.create
          : function (x) {
            function F() {}
            F.prototype = x;
            return new F();
          };
        __isArray = typeof Array.isArray === "function" ? Array.isArray
          : (function () {
            var _toString;
            _toString = Object.prototype.toString;
            return function (x) {
              return _toString.call(x) === "[object Array]";
            };
          }());
        __owns = Object.prototype.hasOwnProperty;
        __slice = Array.prototype.slice;
        __throw = function (err) {
          throw err;
        };
        __toArray = function (x) {
          if (x == null) {
            throw TypeError("Expected an object, got " + __typeof(x));
          } else if (__isArray(x)) {
            return x;
          } else if (typeof x === "string") {
            return x.split("");
          } else if (typeof x.length === "number") {
            return __slice.call(x);
          } else {
            throw TypeError("Expected an object with a length property, got " + __typeof(x));
          }
        };
        __typeof = (function () {
          var _toString;
          _toString = Object.prototype.toString;
          return function (o) {
            if (o === void 0) {
              return "Undefined";
            } else if (o === null) {
              return "Null";
            } else {
              return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
            }
          };
        }());
        Node = require("./parser-nodes");
        Type = require("./types");
        Scope = require("./parser-scope");
        _ref = require("./parser-utils");
        nodeToType = _ref.nodeToType;
        addParamToScope = _ref.addParamToScope;
        map = _ref.map;
        AccessNode = Node.Access;
        AccessMultiNode = Node.AccessMulti;
        ArgsNode = Node.Args;
        ArrayNode = Node.Array;
        AssignNode = Node.Assign;
        BinaryNode = Node.Binary;
        BlockNode = Node.Block;
        BreakNode = Node.Break;
        CallNode = Node.Call;
        CommentNode = Node.Comment;
        ConstNode = Node.Const;
        ContinueNode = Node.Continue;
        DebuggerNode = Node.Debugger;
        DefNode = Node.Def;
        EmbedWriteNode = Node.EmbedWrite;
        EvalNode = Node.Eval;
        ForNode = Node.For;
        ForInNode = Node.ForIn;
        FunctionNode = Node.Function;
        IdentNode = Node.Ident;
        IfNode = Node.If;
        MacroAccessNode = Node.MacroAccess;
        MacroConstNode = Node.MacroConst;
        NothingNode = Node.Nothing;
        ObjectNode = Node.Object;
        ParamNode = Node.Param;
        RegexpNode = Node.Regexp;
        ReturnNode = Node.Return;
        RootNode = Node.Root;
        SpreadNode = Node.Spread;
        SuperNode = Node.Super;
        SwitchNode = Node.Switch;
        SyntaxChoiceNode = Node.SyntaxChoice;
        SyntaxManyNode = Node.SyntaxMany;
        SyntaxParamNode = Node.SyntaxParam;
        SyntaxSequenceNode = Node.SyntaxSequence;
        ThisNode = Node.This;
        ThrowNode = Node.Throw;
        TmpNode = Node.Tmp;
        TmpWrapperNode = Node.TmpWrapper;
        TryCatchNode = Node.TryCatch;
        TryFinallyNode = Node.TryFinally;
        TypeFunctionNode = Node.TypeFunction;
        TypeGenericNode = Node.TypeGeneric;
        TypeObjectNode = Node.TypeObject;
        TypeUnionNode = Node.TypeUnion;
        UnaryNode = Node.Unary;
        VarNode = Node.Var;
        YieldNode = Node.Yield;
        function identity(x) {
          return x;
        }
        function retThis() {
          return this;
        }
        MacroContext = (function () {
          var _MacroContext_prototype;
          function MacroContext(parser, index, position, inGenerator, inEvilAst) {
            var _this;
            _this = this instanceof MacroContext ? this : __create(_MacroContext_prototype);
            _this.parser = parser;
            _this.index = index;
            _this.position = position;
            _this.inGenerator = inGenerator;
            _this.inEvilAst = inEvilAst;
            _this.unsavedTmps = [];
            _this.savedTmps = [];
            return _this;
          }
          _MacroContext_prototype = MacroContext.prototype;
          MacroContext.displayName = "MacroContext";
          _MacroContext_prototype.doWrap = function (node) {
            if (node instanceof Node) {
              return node.doWrap(this.parser);
            } else {
              return node;
            }
          };
          _MacroContext_prototype.error = function (message, node) {
            if (node == null) {
              node = null;
            }
            throw this.parser.buildError(message, node || this.index);
          };
          _MacroContext_prototype.scope = function () {
            return this.parser.scope.peek();
          };
          _MacroContext_prototype.line = function (node) {
            var index;
            if (node instanceof Node) {
              index = node.index;
            } else {
              index = this.index;
            }
            return this.parser.getPosition(index).line;
          };
          _MacroContext_prototype.column = function (node) {
            var index;
            if (node instanceof Node) {
              index = node.index;
            } else {
              index = this.index;
            }
            return this.parser.getPosition(index).column;
          };
          _MacroContext_prototype.file = function () {
            return this.parser.options.filename || "";
          };
          _MacroContext_prototype.version = function () {
            return this.parser.getPackageVersion();
          };
          _MacroContext_prototype["let"] = function (ident, isMutable, type) {
            if (isMutable == null) {
              isMutable = false;
            }
            if (type == null) {
              type = Type.any;
            }
            if (ident instanceof IdentNode && isMutable && type.isSubsetOf(Type.undefinedOrNull)) {
              type = Type.any;
            }
            return this.scope().add(ident, isMutable, type);
          };
          _MacroContext_prototype.hasVariable = function (ident) {
            return this.scope().has(ident);
          };
          _MacroContext_prototype.isVariableMutable = function (ident) {
            return this.scope().isMutable(ident);
          };
          _MacroContext_prototype["var"] = function (ident, isMutable) {
            if (isMutable == null) {
              isMutable = false;
            }
            return this.parser.Var(this.index, ident, isMutable);
          };
          _MacroContext_prototype.def = function (key, value) {
            if (key == null) {
              key = NothingNode(0, this.scope());
            }
            if (value == null) {
              value = void 0;
            }
            return this.parser.Def(this.index, key, this.doWrap(value));
          };
          _MacroContext_prototype.noop = function () {
            return this.parser.Nothing(this.index);
          };
          _MacroContext_prototype.block = function (nodes, label) {
            if (label == null) {
              label = null;
            }
            return this.parser.Block(this.index, nodes, label).reduce(this.parser);
          };
          _MacroContext_prototype["if"] = function (test, whenTrue, whenFalse, label) {
            if (test == null) {
              test = NothingNode(0, this.scope());
            }
            if (whenTrue == null) {
              whenTrue = NothingNode(0, this.scope());
            }
            if (whenFalse == null) {
              whenFalse = null;
            }
            if (label == null) {
              label = null;
            }
            return this.parser.If(
              this.index,
              this.doWrap(test),
              whenTrue,
              whenFalse,
              label
            ).reduce(this.parser);
          };
          _MacroContext_prototype["switch"] = function (node, cases, defaultCase, label) {
            var _this;
            _this = this;
            if (node == null) {
              node = NothingNode(0, this.scope());
            }
            if (defaultCase == null) {
              defaultCase = null;
            }
            if (label == null) {
              label = null;
            }
            return this.parser.Switch(
              this.index,
              this.doWrap(node),
              (function () {
                var _arr, _i, _len, case_;
                for (_arr = [], _i = 0, _len = cases.length; _i < _len; ++_i) {
                  case_ = cases[_i];
                  _arr.push({ node: _this.doWrap(case_.node), body: case_.body, fallthrough: case_.fallthrough });
                }
                return _arr;
              }()),
              defaultCase,
              label
            ).reduce(this.parser);
          };
          _MacroContext_prototype["for"] = function (init, test, step, body, label) {
            if (init == null) {
              init = null;
            }
            if (test == null) {
              test = null;
            }
            if (step == null) {
              step = null;
            }
            if (body == null) {
              body = NothingNode(0, this.scope());
            }
            if (label == null) {
              label = null;
            }
            return this.parser.For(
              this.index,
              this.doWrap(init),
              this.doWrap(test),
              this.doWrap(step),
              body,
              label
            ).reduce(this.parser);
          };
          _MacroContext_prototype.forIn = function (key, object, body, label) {
            if (object == null) {
              object = NothingNode(0);
            }
            if (body == null) {
              body = NothingNode(0, this.scope());
            }
            if (label == null) {
              label = null;
            }
            return this.parser.ForIn(
              this.index,
              key,
              this.doWrap(object),
              body,
              label
            ).reduce(this.parser);
          };
          _MacroContext_prototype.tryCatch = function (tryBody, catchIdent, catchBody, label) {
            if (tryBody == null) {
              tryBody = NothingNode(0, this.scope());
            }
            if (catchIdent == null) {
              catchIdent = NothingNode(0, this.scope());
            }
            if (catchBody == null) {
              catchBody = NothingNode(0, this.scope());
            }
            if (label == null) {
              label = null;
            }
            return this.parser.TryCatch(
              this.index,
              tryBody,
              catchIdent,
              catchBody,
              label
            ).reduce(this.parser);
          };
          _MacroContext_prototype.tryFinally = function (tryBody, finallyBody, label) {
            if (tryBody == null) {
              tryBody = NothingNode(0, this.scope());
            }
            if (finallyBody == null) {
              finallyBody = NothingNode(0, this.scope());
            }
            if (label == null) {
              label = null;
            }
            return this.parser.TryFinally(this.index, tryBody, finallyBody, label).reduce(this.parser);
          };
          _MacroContext_prototype.assign = function (left, op, right) {
            if (left == null) {
              left = NothingNode(0, this.scope());
            }
            if (right == null) {
              right = NothingNode(0, this.scope());
            }
            return this.parser.Assign(this.index, left, op, this.doWrap(right)).reduce(this.parser);
          };
          _MacroContext_prototype.binary = function (left, op, right) {
            if (left == null) {
              left = NothingNode(0, this.scope());
            }
            if (right == null) {
              right = NothingNode(0, this.scope());
            }
            return this.parser.Binary(this.index, this.doWrap(left), op, this.doWrap(right)).reduce(this.parser);
          };
          _MacroContext_prototype.binaryChain = function (op, nodes) {
            var _i, _len, left, result, right;
            if (nodes.length === 0) {
              throw Error("Expected nodes to at least have a length of 1");
            }
            left = this.doWrap(nodes[0]);
            for (_i = 1, _len = nodes.length; _i < _len; ++_i) {
              right = nodes[_i];
              left = this.parser.Binary(this.index, left, op, this.doWrap(right));
            }
            result = left;
            return result.reduce(this.parser);
          };
          _MacroContext_prototype.unary = function (op, node) {
            if (node == null) {
              node = NothingNode(0, this.scope());
            }
            return this.parser.Unary(this.index, op, this.doWrap(node)).reduce(this.parser);
          };
          _MacroContext_prototype["throw"] = function (node) {
            if (node == null) {
              node = NothingNode(0, this.scope());
            }
            return this.parser.Throw(this.index, this.doWrap(node)).reduce(this.parser);
          };
          _MacroContext_prototype["return"] = function (node) {
            if (node == null) {
              node = void 0;
            }
            return this.parser.Return(this.index, this.doWrap(node)).reduce(this.parser);
          };
          _MacroContext_prototype["yield"] = function (node) {
            if (node == null) {
              node = NothingNode(0, this.scope());
            }
            return this.parser.Yield(this.index, this.doWrap(node)).reduce(this.parser);
          };
          _MacroContext_prototype["debugger"] = function () {
            return this.parser.Debugger(this.index);
          };
          _MacroContext_prototype["break"] = function (label) {
            if (label == null) {
              label = null;
            }
            return this.parser.Break(this.index, label);
          };
          _MacroContext_prototype["continue"] = function (label) {
            if (label == null) {
              label = null;
            }
            return this.parser.Continue(this.index, label);
          };
          _MacroContext_prototype.spread = function (node) {
            return this.parser.Spread(this.index, node);
          };
          _MacroContext_prototype.real = function (node) {
            node = this.macroExpand1(node);
            if (node instanceof TmpWrapperNode) {
              return node.node;
            } else {
              return node;
            }
          };
          _MacroContext_prototype.rewrap = function (newNode, oldNode) {
            oldNode = this.macroExpand1(oldNode);
            if (oldNode instanceof TmpWrapperNode) {
              if (newNode instanceof TmpWrapperNode) {
                return TmpWrapperNode(newNode.index, newNode.scope, newNode, oldNode.tmps.concat(newNode.tmps));
              } else {
                return TmpWrapperNode(newNode.index, newNode.scope, newNode, oldNode.tmps.slice());
              }
            } else {
              return newNode;
            }
          };
          _MacroContext_prototype.eq = function (alpha, bravo) {
            alpha = this.real(alpha);
            bravo = this.real(bravo);
            if (alpha instanceof ConstNode) {
              return bravo instanceof ConstNode && alpha.value === bravo.value;
            } else if (alpha instanceof IdentNode) {
              return bravo instanceof IdentNode && alpha.name === bravo.name;
            } else {
              return false;
            }
          };
          _MacroContext_prototype.isLabeledBlock = function (node) {
            node = this.real(node);
            if (node instanceof BlockNode || node instanceof IfNode || node instanceof SwitchNode || node instanceof ForNode || node instanceof ForInNode || node instanceof TryCatchNode || node instanceof TryFinallyNode) {
              return node.label != null;
            } else {
              return false;
            }
          };
          _MacroContext_prototype.isBreak = function (node) {
            return this.real(node) instanceof BreakNode;
          };
          _MacroContext_prototype.isContinue = function (node) {
            return this.real(node) instanceof ContinueNode;
          };
          _MacroContext_prototype.label = function (node) {
            node = this.real(node);
            if (node instanceof BreakNode || node instanceof ContinueNode || node instanceof BlockNode || node instanceof IfNode || node instanceof SwitchNode || node instanceof ForNode || node instanceof ForInNode || node instanceof TryCatchNode || node instanceof TryFinallyNode) {
              return node.label;
            } else {
              return null;
            }
          };
          _MacroContext_prototype.withLabel = function (node, label) {
            if (label == null) {
              label = null;
            }
            return node.withLabel(label, this.parser);
          };
          _MacroContext_prototype.macroExpand1 = function (node) {
            var expanded;
            if (node instanceof Node) {
              expanded = this.parser.macroExpand1(node);
              if (expanded instanceof Node) {
                return expanded.reduce(this.parser);
              } else {
                return expanded;
              }
            } else {
              return node;
            }
          };
          _MacroContext_prototype.macroExpandAll = function (node) {
            var expanded;
            if (node instanceof Node) {
              expanded = this.parser.macroExpandAll(node);
              if (expanded instanceof Node) {
                return expanded.reduce(this.parser);
              } else {
                return expanded;
              }
            } else {
              return node;
            }
          };
          _MacroContext_prototype.tmp = function (name, save, type) {
            var tmp;
            if (name == null) {
              name = "ref";
            }
            if (save == null) {
              save = false;
            }
            if (type == null) {
              type = Type.any;
            } else if (typeof type === "string") {
              if (!((__owns.call(Type, type) ? Type[type] : void 0) instanceof Type)) {
                throw Error(type + " is not a known type name");
              }
              if (__owns.call(Type, type)) {
                type = Type[type];
              } else {
                type = void 0;
              }
            } else if (!(type instanceof Type)) {
              throw Error("Must provide a Type or a string for type, got " + __typeof(type));
            }
            tmp = this.parser.makeTmp(this.index, name, type);
            (save ? this.savedTmps : this.unsavedTmps).push(tmp.id);
            return tmp;
          };
          _MacroContext_prototype.getTmps = function () {
            return { unsaved: this.unsavedTmps.slice(), saved: this.savedTmps.slice() };
          };
          _MacroContext_prototype.isConst = function (node) {
            return node === void 0 || node instanceof Node && this.real(node).isConst();
          };
          _MacroContext_prototype.value = function (node) {
            var expanded;
            if (node === void 0) {
              return;
            } else if (node instanceof Node) {
              expanded = this.real(node);
              if (expanded.isConst()) {
                return expanded.constValue();
              }
            }
          };
          _MacroContext_prototype["const"] = function (value) {
            return this.parser.Const(this.index, value);
          };
          _MacroContext_prototype.isSpread = function (node) {
            return this.real(node) instanceof SpreadNode;
          };
          _MacroContext_prototype.spreadSubnode = function (node) {
            node = this.real(node);
            if (node instanceof SpreadNode) {
              return node.node;
            }
          };
          _MacroContext_prototype.isNode = function (node) {
            return node instanceof Node;
          };
          _MacroContext_prototype.isIdent = function (node) {
            return this.real(node) instanceof IdentNode;
          };
          _MacroContext_prototype.isPrimordial = function (node) {
            node = this.real(node);
            return node instanceof IdentNode && node.isPrimordial();
          };
          _MacroContext_prototype.isTmp = function (node) {
            return this.real(node) instanceof TmpNode;
          };
          _MacroContext_prototype.isIdentOrTmp = function (node) {
            var _ref;
            return (_ref = this.real(node)) instanceof IdentNode || _ref instanceof TmpNode;
          };
          _MacroContext_prototype.name = function (node) {
            node = this.real(node);
            if (this.isIdent(node)) {
              return node.name;
            }
          };
          _MacroContext_prototype.ident = function (name) {
            if (require("./jsutils").isAcceptableIdent(name, true)) {
              return this.parser.Ident(this.index, name);
            }
          };
          _MacroContext_prototype.isCall = function (node) {
            return this.real(node) instanceof CallNode;
          };
          _MacroContext_prototype.callFunc = function (node) {
            node = this.real(node);
            if (node instanceof CallNode) {
              return node.func;
            }
          };
          _MacroContext_prototype.callArgs = function (node) {
            node = this.real(node);
            if (node instanceof CallNode) {
              return node.args;
            }
          };
          _MacroContext_prototype.isSuper = function (node) {
            return this.real(node) instanceof SuperNode;
          };
          _MacroContext_prototype.superChild = function (node) {
            node = this.real(node);
            if (this.isSuper(node)) {
              return node.child;
            }
          };
          _MacroContext_prototype.superArgs = function (node) {
            node = this.real(node);
            if (this.isSuper(node)) {
              return node.args;
            }
          };
          _MacroContext_prototype.callIsNew = function (node) {
            node = this.real(node);
            if (node instanceof CallNode) {
              return !!node.isNew;
            } else {
              return false;
            }
          };
          _MacroContext_prototype.callIsApply = function (node) {
            node = this.real(node);
            if (node instanceof CallNode) {
              return !!node.isApply;
            } else {
              return false;
            }
          };
          _MacroContext_prototype.call = function (func, args, isNew, isApply) {
            var _this;
            _this = this;
            if (args == null) {
              args = [];
            }
            if (isNew == null) {
              isNew = false;
            }
            if (isApply == null) {
              isApply = false;
            }
            if (isNew && isApply) {
              throw Error("Cannot specify both is-new and is-apply");
            }
            return CallNode(
              func.index,
              this.scope(),
              this.doWrap(func),
              (function () {
                var _arr, _i, _len, arg;
                for (_arr = [], _i = 0, _len = args.length; _i < _len; ++_i) {
                  arg = args[_i];
                  _arr.push(_this.doWrap(arg));
                }
                return _arr;
              }()),
              isNew,
              isApply
            ).reduce(this.parser);
          };
          _MacroContext_prototype.func = function (params, body, autoReturn, bound, curry, asType, generator, generic) {
            var _arr, _arr2, _i, _len, func, p, param, scope;
            if (autoReturn == null) {
              autoReturn = true;
            }
            if (bound == null) {
              bound = false;
            }
            if (curry == null) {
              curry = false;
            }
            if (asType == null) {
              asType = void 0;
            }
            if (generator == null) {
              generator = false;
            }
            if (generic == null) {
              generic = [];
            }
            scope = this.parser.pushScope(true);
            for (_arr = [], _arr2 = __toArray(params), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
              param = _arr2[_i];
              p = param.rescope(scope);
              addParamToScope(scope, p);
              _arr.push(p);
            }
            params = _arr;
            func = FunctionNode(
              body.index,
              scope.parent,
              params,
              body.rescope(scope),
              autoReturn,
              bound,
              curry,
              asType,
              generator,
              generic
            ).reduce(this.parser);
            this.parser.popScope();
            return func;
          };
          _MacroContext_prototype.isFunc = function (node) {
            return this.real(node) instanceof FunctionNode;
          };
          _MacroContext_prototype.funcBody = function (node) {
            node = this.real(node);
            if (this.isFunc(node)) {
              return node.body;
            }
          };
          _MacroContext_prototype.funcParams = function (node) {
            node = this.real(node);
            if (this.isFunc(node)) {
              return node.params;
            }
          };
          _MacroContext_prototype.funcIsAutoReturn = function (node) {
            node = this.real(node);
            if (this.isFunc(node)) {
              return !!node.autoReturn;
            }
          };
          _MacroContext_prototype.funcIsBound = function (node) {
            node = this.real(node);
            if (this.isFunc(node)) {
              return !!node.bound && !(node.bound instanceof Node);
            }
          };
          _MacroContext_prototype.funcIsCurried = function (node) {
            node = this.real(node);
            if (this.isFunc(node)) {
              return !!node.curry;
            }
          };
          _MacroContext_prototype.funcAsType = function (node) {
            node = this.real(node);
            if (this.isFunc(node)) {
              return node.asType;
            }
          };
          _MacroContext_prototype.funcIsGenerator = function (node) {
            node = this.real(node);
            if (this.isFunc(node)) {
              return !!node.generator;
            }
          };
          _MacroContext_prototype.funcGeneric = function (node) {
            node = this.real(node);
            if (this.isFunc(node)) {
              return node.generic.slice();
            } else {
              return [];
            }
          };
          _MacroContext_prototype.param = function (ident, defaultValue, spread, isMutable, asType) {
            return ParamNode(
              ident.index,
              ident.scope,
              ident,
              defaultValue,
              spread,
              isMutable,
              asType
            ).reduce(this.parser);
          };
          _MacroContext_prototype.isParam = function (node) {
            return this.real(node) instanceof ParamNode;
          };
          _MacroContext_prototype.paramIdent = function (node) {
            node = this.real(node);
            if (this.isParam(node)) {
              return node.ident;
            }
          };
          _MacroContext_prototype.paramDefaultValue = function (node) {
            node = this.real(node);
            if (this.isParam(node)) {
              return node.defaultValue;
            }
          };
          _MacroContext_prototype.paramIsSpread = function (node) {
            node = this.real(node);
            if (this.isParam(node)) {
              return !!node.spread;
            }
          };
          _MacroContext_prototype.paramIsMutable = function (node) {
            node = this.real(node);
            if (this.isParam(node)) {
              return !!node.isMutable;
            }
          };
          _MacroContext_prototype.paramType = function (node) {
            node = this.real(node);
            if (this.isParam(node)) {
              return node.asType;
            }
          };
          _MacroContext_prototype.isArray = function (node) {
            return this.real(node) instanceof ArrayNode;
          };
          _MacroContext_prototype.elements = function (node) {
            node = this.real(node);
            if (this.isArray(node)) {
              return node.elements;
            }
          };
          _MacroContext_prototype.arrayHasSpread = function (node) {
            var _arr, _i, _len, _some, element;
            node = this.real(node);
            if (node instanceof ArrayNode) {
              _some = false;
              for (_arr = __toArray(node.elements), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                element = _arr[_i];
                if (this.real(element) instanceof SpreadNode) {
                  _some = true;
                  break;
                }
              }
              return _some;
            } else {
              return false;
            }
          };
          _MacroContext_prototype.isObject = function (node) {
            return this.real(node) instanceof ObjectNode;
          };
          _MacroContext_prototype.pairs = function (node) {
            node = this.real(node);
            if (this.isObject(node) || this.isTypeObject(node)) {
              return node.pairs;
            }
          };
          _MacroContext_prototype.isBlock = function (node) {
            return this.real(node) instanceof BlockNode;
          };
          _MacroContext_prototype.nodes = function (node) {
            node = this.real(node);
            if (this.isBlock(node)) {
              return node.nodes;
            }
          };
          _MacroContext_prototype.array = function (elements) {
            var _this;
            _this = this;
            return this.parser.Array(0, (function () {
              var _arr, _arr2, _i, _len, element;
              for (_arr = [], _arr2 = __toArray(elements), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                element = _arr2[_i];
                _arr.push(_this.doWrap(element));
              }
              return _arr;
            }())).reduce(this.parser);
          };
          _MacroContext_prototype.object = function (pairs) {
            var _this;
            _this = this;
            return this.parser.Object(0, (function () {
              var _arr, _arr2, _i, _len, _ref, key, property, value;
              for (_arr = [], _arr2 = __toArray(pairs), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                _ref = _arr2[_i];
                key = _ref.key;
                value = _ref.value;
                property = _ref.property;
                _arr.push({ key: _this.doWrap(key), value: _this.doWrap(value)(property) });
              }
              return _arr;
            }())).reduce(this.parser);
          };
          _MacroContext_prototype.type = function (node) {
            if (typeof node === "string") {
              return __owns.call(Type, node) && Type[node] || __throw(Error("Unknown type " + node));
            } else if (node instanceof Node) {
              return node.type(this.parser);
            } else {
              throw Error("Can only retrieve type from a String or Node, got " + __typeof(node));
            }
          };
          _MacroContext_prototype.toType = nodeToType;
          _MacroContext_prototype.isComplex = function (node) {
            node = this.real(node);
            return node != null && !(node instanceof ConstNode) && !(node instanceof IdentNode) && !(node instanceof TmpNode) && !(node instanceof ThisNode) && !(node instanceof ArgsNode) && (!(node instanceof BlockNode) || node.nodes.length !== 0);
          };
          _MacroContext_prototype.isNoop = function (node) {
            node = this.real(node);
            return node.isNoop(this.parser);
          };
          _MacroContext_prototype.isNothing = function (node) {
            return this.real(node) instanceof NothingNode;
          };
          _MacroContext_prototype.isTypeArray = function (node) {
            node = this.real(node);
            return node instanceof TypeGenericNode && node.basetype instanceof IdentNode && node.basetype.name === "Array";
          };
          _MacroContext_prototype.subtype = function (node) {
            node = this.real(node);
            if (node instanceof TypeGenericNode && node.basetype instanceof IdentNode && node.basetype.name === "Array") {
              return node.args[0];
            }
          };
          _MacroContext_prototype.isTypeGeneric = function (node) {
            return this.real(node) instanceof TypeGenericNode;
          };
          _MacroContext_prototype.basetype = function (node) {
            node = this.real(node);
            return node instanceof TypeGenericNode && node.basetype;
          };
          _MacroContext_prototype.typeArguments = function (node) {
            node = this.real(node);
            return node instanceof TypeGenericNode && node.args;
          };
          _MacroContext_prototype.isTypeObject = function (node) {
            return this.real(node) instanceof TypeObjectNode;
          };
          _MacroContext_prototype.isTypeFunction = function (node) {
            node = this.real(node);
            return node instanceof TypeGenericNode && node.basetype instanceof IdentNode && node.basetype.name === "Function";
          };
          _MacroContext_prototype.returnType = function (node) {
            node = this.real(node);
            if (node instanceof TypeGenericNode && node.basetype instanceof IdentNode && node.basetype.name === "Function") {
              return node.args[0];
            }
          };
          _MacroContext_prototype.isTypeUnion = function (node) {
            return this.real(node) instanceof TypeUnionNode;
          };
          _MacroContext_prototype.types = function (node) {
            node = this.real(node);
            return this.isTypeUnion(node) && node.types;
          };
          _MacroContext_prototype.isThis = function (node) {
            return this.real(node) instanceof ThisNode;
          };
          _MacroContext_prototype.isArguments = function (node) {
            node = this.real(node);
            return node instanceof ArgsNode;
          };
          _MacroContext_prototype.isDef = function (node) {
            return this.real(node) instanceof DefNode;
          };
          _MacroContext_prototype.isAssign = function (node) {
            return this.real(node) instanceof AssignNode;
          };
          _MacroContext_prototype.isBinary = function (node) {
            return this.real(node) instanceof BinaryNode;
          };
          _MacroContext_prototype.isUnary = function (node) {
            return this.real(node) instanceof UnaryNode;
          };
          _MacroContext_prototype.op = function (node) {
            node = this.real(node);
            if (this.isAssign(node) || this.isBinary(node) || this.isUnary(node)) {
              return node.op;
            }
          };
          _MacroContext_prototype.left = function (node) {
            node = this.real(node);
            if (this.isDef(node) || this.isBinary(node)) {
              return node.left;
            }
          };
          _MacroContext_prototype.right = function (node) {
            node = this.real(node);
            if (this.isDef(node) || this.isBinary(node)) {
              return node.right;
            }
          };
          _MacroContext_prototype.unaryNode = function (node) {
            node = this.real(node);
            if (this.isUnary(node)) {
              return node.node;
            }
          };
          _MacroContext_prototype.isAccess = function (node) {
            return this.real(node) instanceof AccessNode;
          };
          _MacroContext_prototype.parent = function (node) {
            node = this.real(node);
            if (node instanceof AccessNode) {
              return node.parent;
            }
          };
          _MacroContext_prototype.child = function (node) {
            node = this.real(node);
            if (node instanceof AccessNode) {
              return node.child;
            }
          };
          _MacroContext_prototype.isIf = function (node) {
            return this.real(node) instanceof IfNode;
          };
          _MacroContext_prototype.test = function (node) {
            node = this.real(node);
            if (node instanceof IfNode) {
              return node.test;
            }
          };
          _MacroContext_prototype.whenTrue = function (node) {
            node = this.real(node);
            if (node instanceof IfNode) {
              return node.whenTrue;
            }
          };
          _MacroContext_prototype.whenFalse = function (node) {
            node = this.real(node);
            if (node instanceof IfNode) {
              return node.whenFalse;
            }
          };
          _MacroContext_prototype.cache = function (node, init, name, save) {
            if (name == null) {
              name = "ref";
            }
            if (save == null) {
              save = false;
            }
            return this.maybeCache(
              node,
              function (setNode, node, cached) {
                if (cached) {
                  init.push(setNode);
                }
                return node;
              },
              name,
              save
            );
          };
          _MacroContext_prototype.maybeCache = function (node, func, name, save) {
            var tmp, type;
            if (name == null) {
              name = "ref";
            }
            if (save == null) {
              save = false;
            }
            node = this.macroExpand1(node);
            if (this.isComplex(node)) {
              type = node.type(this.parser);
              tmp = this.tmp(name, save, type);
              this.scope().add(tmp, false, type);
              return func(
                this.parser.Block(this.index, [
                  this.parser.Var(this.index, tmp, false),
                  this.parser.Assign(this.index, tmp, "=", this.doWrap(node))
                ]),
                tmp,
                true
              );
            } else {
              return func(node, node, false);
            }
          };
          _MacroContext_prototype.maybeCacheAccess = function (node, func, parentName, childName, save) {
            var _this;
            _this = this;
            if (parentName == null) {
              parentName = "ref";
            }
            if (childName == null) {
              childName = "ref";
            }
            if (save == null) {
              save = false;
            }
            node = this.macroExpand1(node);
            if (this.isAccess(node)) {
              return this.maybeCache(
                this.parent(node),
                function (setParent, parent, parentCached) {
                  return _this.maybeCache(
                    _this.child(node),
                    function (setChild, child, childCached) {
                      if (parentCached || childCached) {
                        return func(
                          _this.parser.Access(_this.index, setParent, setChild),
                          _this.parser.Access(_this.index, parent, child),
                          true
                        );
                      } else {
                        return func(node, node, false);
                      }
                    },
                    childName,
                    save
                  );
                },
                parentName,
                save
              );
            } else {
              return func(node, node, false);
            }
          };
          _MacroContext_prototype.empty = function (node) {
            var _arr, _every, _i, item;
            if (node == null) {
              return true;
            } else if (!(node instanceof Node)) {
              return false;
            } else if (node instanceof BlockNode) {
              _every = true;
              for (_arr = __toArray(node.nodes), _i = _arr.length; _i--; ) {
                item = _arr[_i];
                if (!this.empty(item)) {
                  _every = false;
                  break;
                }
              }
              return _every;
            } else {
              return node instanceof NothingNode;
            }
          };
          function constifyObject(obj, index, scope) {
            if (typeof obj !== "object" || obj === null || obj instanceof RegExp) {
              return ConstNode(index, scope, obj);
            } else if (__isArray(obj)) {
              return ArrayNode(index, scope, (function () {
                var _arr, _arr2, _i, _len, item;
                for (_arr = [], _arr2 = __toArray(obj), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                  item = _arr2[_i];
                  _arr.push(constifyObject(item, index, scope));
                }
                return _arr;
              }()));
            } else if (obj instanceof IdentNode && obj.name.length > 1 && obj.name.charCodeAt(0) === 36) {
              return CallNode(
                obj.index,
                scope,
                IdentNode(obj.index, scope, "__wrap"),
                [IdentNode(obj.index, scope, obj.name.substring(1))]
              );
            } else if (obj instanceof CallNode && !obj.isNew && !obj.isApply && obj.func instanceof IdentNode && obj.func.name === "$") {
              if (obj.args.length !== 1 || obj.args[0] instanceof SpreadNode) {
                throw Error("Can only use $() in an AST if it has one argument.");
              }
              return CallNode(
                obj.index,
                scope,
                IdentNode(obj.index, scope, "__wrap"),
                [obj.args[0]]
              );
            } else if (obj instanceof MacroConstNode) {
              return CallNode(
                obj.index,
                scope,
                IdentNode(obj.index, scope, "__const"),
                [ConstNode(obj.index, scope, obj.name)]
              );
            } else if (obj instanceof Node) {
              if (obj.constructor === Node) {
                throw Error("Cannot constify a raw node");
              }
              return CallNode(
                obj.index,
                scope,
                IdentNode(obj.index, scope, "__node"),
                [ConstNode(obj.index, scope, obj.typeId)].concat((function () {
                  var _arr, _arr2, _i, _len, item;
                  for (_arr = [], _arr2 = __toArray(obj._toJSON()), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                    item = _arr2[_i];
                    _arr.push(constifyObject(item, obj.index, scope));
                  }
                  return _arr;
                }()))
              );
            } else {
              return ObjectNode(index, scope, (function () {
                var _arr, k, v;
                _arr = [];
                for (k in obj) {
                  if (__owns.call(obj, k)) {
                    v = obj[k];
                    _arr.push({
                      key: ConstNode(index, scope, k),
                      value: constifyObject(v, index, scope)
                    });
                  }
                }
                return _arr;
              }()));
            }
          }
          MacroContext.constifyObject = constifyObject;
          function walk(node, func) {
            var _ref;
            if (typeof node !== "object" || node === null || node instanceof RegExp) {
              return node;
            }
            if (!(node instanceof Node)) {
              throw Error("Unexpected type to walk through: " + __typeof(node));
            }
            if (!(node instanceof BlockNode) && (_ref = func(node)) != null) {
              return _ref;
            }
            return node.walk(function (x) {
              return walk(x, func);
            });
          }
          _MacroContext_prototype.wrap = function (value) {
            var _ref;
            if (__isArray(value)) {
              return BlockNode(0, this.scope(), value).reduce(this.parser);
            } else if (value instanceof Node) {
              return value;
            } else if (value == null) {
              return NothingNode(0, this.scope());
            } else if (value instanceof RegExp || (_ref = typeof value) === "string" || _ref === "boolean" || _ref === "number") {
              return ConstNode(0, this.scope(), value);
            } else {
              return value;
            }
          };
          _MacroContext_prototype.node = function (typeId) {
            var _ref, args;
            args = __slice.call(arguments, 1);
            if (typeId === 23) {
              return this.macro.apply(this, __toArray(args));
            } else {
              return (_ref = Node.byTypeId)[typeId].apply(_ref, [this.index, this.scope()].concat(__toArray(args))).reduce(this.parser);
            }
          };
          _MacroContext_prototype.getConstValue = function (name, defaultValue) {
            var c;
            c = this.parser.getConst(name);
            if (!c) {
              if (arguments.length < 2) {
                throw Error("Unknown const '" + name + "'");
              } else {
                return defaultValue;
              }
            } else {
              return c.value;
            }
          };
          function toLiteralNode(obj) {
            var _ref, _this;
            _this = this;
            if (obj === null || (_ref = typeof obj) === "undefined" || _ref === "boolean" || _ref === "number" || _ref === "string") {
              return ConstNode(0, this.scope(), obj);
            } else if (__isArray(obj)) {
              return ArrayNode(0, this.scope(), (function () {
                var _arr, _arr2, _i, _len, item;
                for (_arr = [], _arr2 = __toArray(obj), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                  item = _arr2[_i];
                  _arr.push(toLiteralNode.call(_this, item));
                }
                return _arr;
              }()));
            } else if (obj.constructor === Object) {
              return ObjectNode(0, this.scope(), (function () {
                var _arr, k, v;
                _arr = [];
                for (k in obj) {
                  if (__owns.call(obj, k)) {
                    v = obj[k];
                    _arr.push({
                      key: toLiteralNode.call(_this, k),
                      value: toLiteralNode.call(_this, v)
                    });
                  }
                }
                return _arr;
              }()));
            } else {
              throw Error("Cannot convert " + __typeof(obj) + " to a literal node");
            }
          }
          _MacroContext_prototype.getConst = function (name) {
            return toLiteralNode.call(this, this.getConstValue(name));
          };
          _MacroContext_prototype.macro = function (id, callLine, data, position, inGenerator, inEvilAst) {
            return Node.MacroAccess(
              this.index,
              this.scope(),
              id,
              callLine,
              data,
              position,
              inGenerator || this.parser.inGenerator.peek(),
              inEvilAst
            ).reduce(this.parser);
          };
          _MacroContext_prototype.walk = function (node, func) {
            if (node != null) {
              return walk(node, func);
            } else {
              return node;
            }
          };
          _MacroContext_prototype.hasFunc = function (node) {
            var FOUND, walker;
            if (this._hasFunc != null) {
              return this._hasFunc;
            } else {
              FOUND = {};
              walker = function (x) {
                if (x instanceof FunctionNode) {
                  throw FOUND;
                } else {
                  return x.walk(walker);
                }
              };
              try {
                walk(this.macroExpandAll(node), walker);
              } catch (e) {
                if (e !== FOUND) {
                  throw e;
                }
                return this._hasFunc = true;
              }
              return this._hasFunc = false;
            }
          };
          _MacroContext_prototype.isStatement = function (node) {
            node = this.macroExpand1(node);
            return node instanceof Node && node.isStatement();
          };
          _MacroContext_prototype.isType = function (node, name) {
            var type;
            if (__owns.call(Type, name)) {
              type = Type[name];
            }
            if (type == null || !(type instanceof Type)) {
              throw Error(name + " is not a known type name");
            }
            return node.type(this.parser).isSubsetOf(type);
          };
          _MacroContext_prototype.hasType = function (node, name) {
            var type;
            if (__owns.call(Type, name)) {
              type = Type[name];
            }
            if (type == null || !(type instanceof Type)) {
              throw Error(name + " is not a known type name");
            }
            return node.type(this.parser).overlaps(type);
          };
          _MacroContext_prototype.mutateLast = function (node, func, includeNoop) {
            if (typeof node !== "object" || node === null || node instanceof RegExp) {
              return node;
            }
            if (!(node instanceof Node)) {
              throw Error("Unexpected type to mutate-last through: " + __typeof(node));
            }
            return node.mutateLast(this.parser, func, includeNoop);
          };
          return MacroContext;
        }());
        module.exports = MacroContext;
      }.call(this));
      
      return module.exports;
    };
    require['./jstranslator'] = function () {
      var module = { exports: this };
      var exports = this;
      (function (GLOBAL) {
        "use strict";
        var __arrayToIter, __cmp, __create, __curry, __first, __import,
            __indexOfIdentical, __isArray, __iter, __num, __owns, __slice, __throw,
            __toArray, __typeof, _ref, ast, AstNode, Cache, GeneratorBuilder,
            GeneratorState, generatorTranslate, getPos, isPrimordial, MacroHolder,
            Map, ParserNode, Scope, translators, Type;
        __arrayToIter = (function () {
          var proto;
          proto = {
            iterator: function () {
              return this;
            },
            next: function () {
              var array, i;
              i = __num(this.index) + 1;
              array = this.array;
              if (i >= __num(array.length)) {
                return { done: true, value: void 0 };
              } else {
                this.index = i;
                return { done: false, value: array[i] };
              }
            }
          };
          return function (array) {
            var _o;
            if (!__isArray(array)) {
              throw TypeError("Expected array to be an Array, got " + __typeof(array));
            }
            _o = __create(proto);
            _o.array = array;
            _o.index = -1;
            return _o;
          };
        }());
        __cmp = function (left, right) {
          var type;
          if (left === right) {
            return 0;
          } else {
            type = typeof left;
            if (type !== "number" && type !== "string") {
              throw TypeError("Cannot compare a non-number/string: " + type);
            } else if (type !== typeof right) {
              throw TypeError("Cannot compare elements of different types: " + type + " vs " + typeof right);
            } else if (left < right) {
              return -1;
            } else {
              return 1;
            }
          }
        };
        __create = typeof Object.create === "function" ? Object.create
          : function (x) {
            function F() {}
            F.prototype = x;
            return new F();
          };
        __curry = function (numArgs, f) {
          var currier;
          if (typeof numArgs !== "number") {
            throw TypeError("Expected numArgs to be a Number, got " + __typeof(numArgs));
          }
          if (typeof f !== "function") {
            throw TypeError("Expected f to be a Function, got " + __typeof(f));
          }
          if (numArgs > 1) {
            currier = function (args) {
              var ret;
              if (args.length >= numArgs) {
                return f.apply(this, args);
              } else {
                ret = function () {
                  if (arguments.length === 0) {
                    return ret;
                  } else {
                    return currier.call(this, args.concat(__slice.call(arguments)));
                  }
                };
                return ret;
              }
            };
            return currier([]);
          } else {
            return f;
          }
        };
        __first = function (x) {
          return x;
        };
        __import = function (dest, source) {
          var k;
          for (k in source) {
            if (__owns.call(source, k)) {
              dest[k] = source[k];
            }
          }
          return dest;
        };
        __indexOfIdentical = function (array, item) {
          var _arr, check, i, inf;
          if (typeof item === "number") {
            if (item !== item) {
              for (_arr = __toArray(array), i = _arr.length; i--; ) {
                check = _arr[i];
                if (check !== check) {
                  return i;
                }
              }
              return -1;
            } else if (item === 0) {
              inf = 1 / item;
              for (_arr = __toArray(array), i = _arr.length; i--; ) {
                check = _arr[i];
                if (check === 0 && 1 / check === inf) {
                  return i;
                }
              }
              return -1;
            }
          }
          return array.indexOf(item);
        };
        __isArray = typeof Array.isArray === "function" ? Array.isArray
          : (function () {
            var _toString;
            _toString = Object.prototype.toString;
            return function (x) {
              return _toString.call(x) === "[object Array]";
            };
          }());
        __iter = function (iterable) {
          if (iterable == null) {
            throw TypeError("Expected iterable to be an Object, got " + __typeof(iterable));
          } else if (__isArray(iterable)) {
            return __arrayToIter(iterable);
          } else if (typeof iterable.iterator === "function") {
            return iterable.iterator();
          } else if (typeof iterable.next === "function") {
            return iterable;
          } else {
            throw Error("Expected iterable to be an Array or an Object with an 'iterator' function or an Object with a 'next' function, got " + __typeof(iterable));
          }
        };
        __num = function (num) {
          if (typeof num !== "number") {
            throw TypeError("Expected a number, got " + __typeof(num));
          } else {
            return num;
          }
        };
        __owns = Object.prototype.hasOwnProperty;
        __slice = Array.prototype.slice;
        __throw = function (err) {
          throw err;
        };
        __toArray = function (x) {
          if (x == null) {
            throw TypeError("Expected an object, got " + __typeof(x));
          } else if (__isArray(x)) {
            return x;
          } else if (typeof x === "string") {
            return x.split("");
          } else if (typeof x.length === "number") {
            return __slice.call(x);
          } else {
            throw TypeError("Expected an object with a length property, got " + __typeof(x));
          }
        };
        __typeof = (function () {
          var _toString;
          _toString = Object.prototype.toString;
          return function (o) {
            if (o === void 0) {
              return "Undefined";
            } else if (o === null) {
              return "Null";
            } else {
              return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
            }
          };
        }());
        Map = typeof GLOBAL.Map === "function" ? GLOBAL.Map
          : (Map = (function () {
            var _Map_prototype;
            function Map(iterable) {
              var _item, _iter, _this, x;
              _this = this instanceof Map ? this : __create(_Map_prototype);
              _this._keys = [];
              _this._values = [];
              if (iterable != null) {
                try {
                  for (_iter = __iter(iterable); ; ) {
                    _item = _iter.next();
                    if (_item.done) {
                      break;
                    }
                    x = _item.value;
                    _this.set(x[0], x[1]);
                  }
                } finally {
                  try {
                    _iter.close();
                  } catch (_e) {}
                }
              }
              return _this;
            }
            _Map_prototype = Map.prototype;
            Map.displayName = "Map";
            _Map_prototype.get = function (key) {
              var index;
              index = __indexOfIdentical(this._keys, key);
              if (index === -1) {
                return;
              } else {
                return this._values[index];
              }
            };
            _Map_prototype.has = function (key) {
              return __indexOfIdentical(this._keys, key) !== -1;
            };
            _Map_prototype.set = function (key, value) {
              var index, keys;
              keys = this._keys;
              index = __indexOfIdentical(keys, key);
              if (index === -1) {
                index = keys.length;
                keys[index] = key;
              }
              this._values[index] = value;
            };
            _Map_prototype["delete"] = function (key) {
              var index, keys;
              keys = this._keys;
              index = __indexOfIdentical(keys, key);
              if (index === -1) {
                return false;
              } else {
                keys.splice(index, 1);
                return this._values.splice(index, 1);
              }
            };
            _Map_prototype.keys = function () {
              var _arr, _e, _i, _send, _state, _step, _this, _throw, key;
              _this = this;
              _state = 0;
              function _close() {
                _state = 3;
              }
              function _step(_received) {
                while (true) {
                  switch (_state) {
                  case 0:
                    _arr = __toArray(_this._keys);
                    _i = _arr.length;
                    ++_state;
                  case 1:
                    _state = _i-- ? 2 : 3;
                    break;
                  case 2:
                    key = _arr[_i];
                    _state = 1;
                    return { done: false, value: key };
                  case 3:
                    return { done: true, value: void 0 };
                  default: throw Error("Unknown state: " + _state);
                  }
                }
              }
              function _throw(_e) {
                _close();
                throw _e;
              }
              function _send(_received) {
                try {
                  return _step(_received);
                } catch (_e) {
                  _throw(_e);
                }
              }
              return {
                close: _close,
                iterator: function () {
                  return this;
                },
                next: function () {
                  return _send(void 0);
                },
                send: _send,
                "throw": function (_e) {
                  _throw(_e);
                  return _send(void 0);
                }
              };
            };
            _Map_prototype.values = function () {
              var _arr, _e, _i, _send, _state, _step, _this, _throw, value;
              _this = this;
              _state = 0;
              function _close() {
                _state = 3;
              }
              function _step(_received) {
                while (true) {
                  switch (_state) {
                  case 0:
                    _arr = __toArray(_this._values);
                    _i = _arr.length;
                    ++_state;
                  case 1:
                    _state = _i-- ? 2 : 3;
                    break;
                  case 2:
                    value = _arr[_i];
                    _state = 1;
                    return { done: false, value: value };
                  case 3:
                    return { done: true, value: void 0 };
                  default: throw Error("Unknown state: " + _state);
                  }
                }
              }
              function _throw(_e) {
                _close();
                throw _e;
              }
              function _send(_received) {
                try {
                  return _step(_received);
                } catch (_e) {
                  _throw(_e);
                }
              }
              return {
                close: _close,
                iterator: function () {
                  return this;
                },
                next: function () {
                  return _send(void 0);
                },
                send: _send,
                "throw": function (_e) {
                  _throw(_e);
                  return _send(void 0);
                }
              };
            };
            _Map_prototype.items = function () {
              var _arr, _e, _send, _state, _step, _this, _throw, i, key, values;
              _this = this;
              _state = 0;
              function _close() {
                _state = 3;
              }
              function _step(_received) {
                while (true) {
                  switch (_state) {
                  case 0:
                    values = _this._values;
                    _arr = __toArray(_this._keys);
                    i = _arr.length;
                    ++_state;
                  case 1:
                    _state = i-- ? 2 : 3;
                    break;
                  case 2:
                    key = _arr[i];
                    _state = 1;
                    return {
                      done: false,
                      value: [key, values[i]]
                    };
                  case 3:
                    return { done: true, value: void 0 };
                  default: throw Error("Unknown state: " + _state);
                  }
                }
              }
              function _throw(_e) {
                _close();
                throw _e;
              }
              function _send(_received) {
                try {
                  return _step(_received);
                } catch (_e) {
                  _throw(_e);
                }
              }
              return {
                close: _close,
                iterator: function () {
                  return this;
                },
                next: function () {
                  return _send(void 0);
                },
                send: _send,
                "throw": function (_e) {
                  _throw(_e);
                  return _send(void 0);
                }
              };
            };
            _Map_prototype.iterator = Map.prototype.items;
            return Map;
          }()));
        ast = require("./jsast");
        AstNode = ast.Node;
        Type = require("./types");
        _ref = require("./parser");
        ParserNode = _ref.Node;
        MacroHolder = _ref.MacroHolder;
        _ref = require("./utils");
        Cache = _ref.Cache;
        isPrimordial = _ref.isPrimordial;
        function needsCaching(item) {
          return !(item instanceof ast.Ident) && !(item instanceof ast.Const) && !(item instanceof ast.This) && !(item instanceof ast.Arguments);
        }
        Scope = (function () {
          var _Scope_prototype, getId;
          function Scope(options, macros, bound, usedTmps, helperNames, variables, tmps) {
            var _this;
            _this = this instanceof Scope ? this : __create(_Scope_prototype);
            if (options == null) {
              options = {};
            }
            _this.options = options;
            _this.macros = macros;
            if (bound == null) {
              bound = false;
            }
            _this.bound = bound;
            if (usedTmps == null) {
              usedTmps = {};
            }
            _this.usedTmps = usedTmps;
            if (helperNames == null) {
              helperNames = {};
            }
            _this.helperNames = helperNames;
            if (tmps == null) {
              tmps = {};
            }
            _this.tmps = tmps;
            if (variables) {
              _this.variables = __create(variables);
            } else {
              _this.variables = {};
            }
            _this.hasBound = false;
            _this.usedThis = false;
            _this.id = getId();
            return _this;
          }
          _Scope_prototype = Scope.prototype;
          Scope.displayName = "Scope";
          getId = (function () {
            var id;
            id = -1;
            return function () {
              return ++id;
            };
          }());
          _Scope_prototype.maybeCache = function (item, type, func) {
            var ident, result;
            if (type == null) {
              type = Type.any;
            }
            if (!needsCaching(item)) {
              return func(item, item, false);
            } else {
              ident = this.reserveIdent(item.pos, "ref", type);
              result = func(
                ast.Assign(item.pos, ident, item),
                ident,
                true
              );
              this.releaseIdent(ident);
              return result;
            }
          };
          _Scope_prototype.maybeCacheAccess = function (item, func, parentName, childName, save) {
            var _this;
            _this = this;
            if (parentName == null) {
              parentName = "ref";
            }
            if (childName == null) {
              childName = "ref";
            }
            if (save == null) {
              save = false;
            }
            if (item instanceof ast.Binary && item.op === ".") {
              return this.maybeCache(item.left, Type.any, function (setParent, parent, parentCached) {
                return _this.maybeCache(item.right, Type.any, function (setChild, child, childCached) {
                  if (parentCached || childCached) {
                    return func(
                      ast.Access(item.pos, setParent, setChild),
                      ast.Access(item.pos, parent, child),
                      true
                    );
                  } else {
                    return func(item, item, false);
                  }
                });
              });
            } else {
              return func(item, item, false);
            }
          };
          _Scope_prototype.reserveIdent = function (pos, namePart, type) {
            var _this;
            _this = this;
            if (namePart == null) {
              namePart = "ref";
            }
            if (type == null) {
              type = Type.any;
            }
            return (function () {
              var i, ident, name;
              for (i = 1; ; ++i) {
                if (i === 1) {
                  name = "_" + namePart;
                } else {
                  name = "_" + namePart + i;
                }
                if (!(name in _this.usedTmps)) {
                  _this.usedTmps[name] = true;
                  ident = ast.Ident(pos, name);
                  _this.addVariable(ident, type);
                  return ident;
                }
              }
            }());
          };
          _Scope_prototype.reserveParam = function (pos) {
            var _this;
            _this = this;
            return (function () {
              var i, name;
              for (i = 1; ; ++i) {
                if (i === 1) {
                  name = "_p";
                } else {
                  name = "_p" + i;
                }
                if (!(name in _this.usedTmps)) {
                  _this.usedTmps[name] = true;
                  return ast.Ident(pos, name);
                }
              }
            }());
          };
          _Scope_prototype.getTmp = function (pos, id, name, type) {
            var tmp, tmps;
            if (type == null) {
              type = Type.any;
            }
            tmps = this.tmps;
            if (id in tmps) {
              tmp = tmps[id];
              if (tmp instanceof ast.Ident) {
                return tmp;
              }
            }
            return tmps[id] = this.reserveIdent(pos, name || "tmp", type);
          };
          _Scope_prototype.releaseTmp = function (id) {
            var _ref, _ref2;
            if (__owns.call(this.tmps, id)) {
              this.releaseIdent((_ref = (_ref2 = this.tmps)[id], delete _ref2[id], _ref));
            }
          };
          _Scope_prototype.releaseTmps = function () {
            var _obj, id;
            _obj = this.tmps;
            for (id in _obj) {
              if (__owns.call(_obj, id)) {
                this.releaseTmp(id);
              }
            }
            this.tmps = {};
          };
          _Scope_prototype.releaseIdent = function (ident) {
            if (!__owns.call(this.usedTmps, ident.name)) {
              throw Error("Trying to release a non-reserved ident: " + ident.name);
            }
            delete this.usedTmps[ident.name];
          };
          _Scope_prototype.markAsParam = function (ident) {
            this.variables[ident.name].isParam = true;
          };
          _Scope_prototype.markAsFunction = function (ident) {
            this.variables[ident.name].isFunction = true;
          };
          _Scope_prototype.addHelper = function (name) {
            this.helperNames[name] = true;
          };
          _Scope_prototype.fillHelperDependencies = function () {
            var _arr, _else, _i, dep, helperNames, name, toAdd;
            helperNames = this.helperNames;
            toAdd = {};
            while (true) {
              for (name in helperNames) {
                if (__owns.call(helperNames, name) && this.macros.hasHelper(name)) {
                  for (_arr = __toArray(this.macros.helperDependencies(name)), _i = _arr.length; _i--; ) {
                    dep = _arr[_i];
                    if (!__owns.call(helperNames, dep)) {
                      toAdd[dep] = true;
                    }
                  }
                }
              }
              _else = true;
              for (name in toAdd) {
                if (__owns.call(toAdd, name)) {
                  _else = false;
                  this.addHelper(name);
                }
              }
              if (_else) {
                break;
              }
              helperNames = toAdd;
              toAdd = {};
            }
          };
          function lowerSorter(a, b) {
            return __cmp(a.toLowerCase(), b.toLowerCase());
          }
          _Scope_prototype.getHelpers = function () {
            var _arr, _obj, k, names;
            _arr = [];
            _obj = this.helperNames;
            for (k in _obj) {
              if (__owns.call(_obj, k)) {
                _arr.push(k);
              }
            }
            names = _arr;
            return names.sort(lowerSorter);
          };
          _Scope_prototype.hasHelper = function (name) {
            return __owns.call(this.helperNames, name);
          };
          _Scope_prototype.addVariable = function (ident, type, isMutable) {
            if (type == null) {
              type = Type.any;
            }
            if (isMutable == null) {
              isMutable = false;
            }
            this.variables[ident.name] = { type: type, isMutable: isMutable };
          };
          _Scope_prototype.hasVariable = function (ident) {
            return ident.name in this.variables && typeof this.variables[ident.name] === "object" && this.variables[ident.name] !== null;
          };
          _Scope_prototype.hasOwnVariable = function (ident) {
            return __owns.call(this.variables, ident.name);
          };
          _Scope_prototype.isVariableMutable = function (ident) {
            var _ref;
            if ((_ref = this.variables[ident.name]) != null) {
              return _ref.isMutable;
            }
          };
          _Scope_prototype.removeVariable = function (ident) {
            delete this.variables[ident.name];
          };
          _Scope_prototype.getVariables = function () {
            var _arr, _obj, k, v, variables;
            _arr = [];
            _obj = this.variables;
            for (k in _obj) {
              if (__owns.call(_obj, k)) {
                v = _obj[k];
                if (!v.isParam && !v.isFunction) {
                  _arr.push(k);
                }
              }
            }
            variables = _arr;
            return variables.sort(lowerSorter);
          };
          _Scope_prototype.clone = function (bound) {
            if (bound) {
              this.hasBound = true;
            }
            return Scope(
              this.options,
              this.macros,
              bound,
              __create(this.usedTmps),
              this.helperNames,
              this.variables,
              __create(this.tmps)
            );
          };
          return Scope;
        }());
        function makeHasGeneratorNode() {
          var inLoopCache, inSwitchCache, normalCache, returnFreeCache;
          inLoopCache = Cache();
          function hasInLoop(node) {
            var _once;
            return inLoopCache.getOrAdd(node, (_once = false, function (node) {
              var FOUND, result;
              if (_once) {
                throw Error("Attempted to call function more than once");
              } else {
                _once = true;
              }
              result = false;
              if (node instanceof ParserNode.Yield || node instanceof ParserNode.Return) {
                return true;
              } else if (!(node instanceof ParserNode.Function)) {
                FOUND = {};
                try {
                  node.walk(function (n) {
                    if (hasInLoop(n)) {
                      throw FOUND;
                    }
                    return n;
                  });
                } catch (e) {
                  if (e === FOUND) {
                    return true;
                  } else {
                    throw e;
                  }
                }
              }
              return false;
            }));
          }
          inSwitchCache = Cache();
          function hasInSwitch(node) {
            var _once;
            return inSwitchCache.getOrAdd(node, (_once = false, function (node) {
              var _ref, FOUND;
              if (_once) {
                throw Error("Attempted to call function more than once");
              } else {
                _once = true;
              }
              if (_ref = inLoopCache.get(node)) {
                return _ref;
              }
              if (node instanceof ParserNode.Yield || node instanceof ParserNode.Return || node instanceof ParserNode.Continue) {
                return true;
              } else if (!(node instanceof ParserNode.Function)) {
                FOUND = {};
                try {
                  node.walk(function (n) {
                    if (n instanceof ParserNode.For || n instanceof ParserNode.ForIn) {
                      if (hasInLoop(n)) {
                        throw FOUND;
                      }
                    } else if (hasInSwitch(n)) {
                      throw FOUND;
                    }
                    return n;
                  });
                } catch (e) {
                  if (e === FOUND) {
                    return true;
                  } else {
                    throw e;
                  }
                }
              }
              return false;
            }));
          }
          returnFreeCache = Cache();
          normalCache = Cache();
          function hasGeneratorNode(node, allowReturn) {
            var _once;
            if (allowReturn == null) {
              allowReturn = false;
            }
            return (allowReturn ? returnFreeCache : normalCache).getOrAdd(node, (_once = false, function (node) {
              var _ref, FOUND;
              if (_once) {
                throw Error("Attempted to call function more than once");
              } else {
                _once = true;
              }
              if (!allowReturn && (_ref = returnFreeCache.get(node))) {
                return _ref;
              }
              if (_ref = inLoopCache.get(node)) {
                return _ref;
              }
              if (_ref = inSwitchCache.get(node)) {
                return _ref;
              }
              if (node instanceof ParserNode.Yield || node instanceof ParserNode.Continue || node instanceof ParserNode.Break || !allowReturn && node instanceof ParserNode.Return) {
                return true;
              } else if (!(node instanceof ParserNode.Function)) {
                FOUND = {};
                try {
                  node.walk(function (n) {
                    if (n instanceof ParserNode.For || n instanceof ParserNode.ForIn) {
                      if (hasInLoop(n)) {
                        throw FOUND;
                      }
                    } else if (n instanceof ParserNode.Switch) {
                      if (hasInSwitch(n)) {
                        throw FOUND;
                      }
                    } else if (hasGeneratorNode(n, allowReturn)) {
                      throw FOUND;
                    }
                    return n;
                  });
                } catch (e) {
                  if (e === FOUND) {
                    return true;
                  } else {
                    throw e;
                  }
                }
              }
              return false;
            }));
          }
          return hasGeneratorNode;
        }
        function uid() {
          return Math.random().toString(36).slice(2) + "-" + new Date().getTime();
        }
        GeneratorState = (function () {
          var _GeneratorState_prototype;
          function GeneratorState(builder) {
            var _this;
            _this = this instanceof GeneratorState ? this : __create(_GeneratorState_prototype);
            _this.builder = builder;
            _this.nodes = [];
            return _this;
          }
          _GeneratorState_prototype = GeneratorState.prototype;
          GeneratorState.displayName = "GeneratorState";
          _GeneratorState_prototype.hasGeneratorNode = function (node) {
            return this.builder.hasGeneratorNode(node);
          };
          _GeneratorState_prototype.add = function (tNode) {
            this.nodes.push(tNode);
            return this;
          };
          _GeneratorState_prototype.branch = function () {
            var _ref, state;
            state = GeneratorState(this.builder);
            if (this.builder.currentCatch.length) {
              (_ref = this.builder.currentCatch)[_ref.length - 1].push(state);
            }
            this.builder.statesOrder.push(state);
            return state;
          };
          _GeneratorState_prototype.caseId = function () {
            return this.builder.caseId(this.getRedirect());
          };
          _GeneratorState_prototype.makeGoto = function (pos, tState, includeBreak) {
            var _this;
            _this = this;
            if (includeBreak == null) {
              includeBreak = false;
            }
            return function () {
              var assign, caseId, state;
              state = tState();
              if (state instanceof GeneratorState) {
                caseId = ast.Const(pos, state.caseId());
              } else if (state instanceof ast.Node) {
                caseId = state;
              } else {
                throw Error("Expected a GeneratorState or Node, got " + __typeof(state));
              }
              if (caseId instanceof ast.Const && typeof caseId.value === "number" && caseId.value === +_this.caseId() + 1) {
                return ast.Unary(pos, "++", _this.builder.stateIdent);
              } else {
                assign = ast.Assign(pos, _this.builder.stateIdent, caseId);
                if (includeBreak) {
                  return ast.Block(pos, [assign, ast.Break(pos)]);
                } else {
                  return assign;
                }
              }
            };
          };
          _GeneratorState_prototype["yield"] = function (pos, tNode) {
            var branch;
            branch = this.branch();
            this.nodes.push(
              this.makeGoto(
                pos,
                function () {
                  return branch;
                },
                false
              ),
              function () {
                return ast.Return(pos, ast.Obj(pos, [
                  ast.Obj.Pair(pos, "done", ast.Const(pos, false)),
                  ast.Obj.Pair(pos, "value", tNode())
                ]));
              }
            );
            return branch;
          };
          _GeneratorState_prototype["return"] = function (pos, tNode) {
            var _this;
            _this = this;
            if (tNode == null) {
              tNode = null;
            }
            if (tNode == null) {
              this.goto(pos, function () {
                return _this.builder.stop;
              });
            } else {
              this.add(this.makeGoto(
                pos,
                function () {
                  return _this.builder.stop;
                },
                false
              ));
              this.add(function () {
                var node;
                node = tNode();
                if (!(node instanceof ast.Statement)) {
                  return ast.Return(pos, ast.Obj(pos, [
                    ast.Obj.Pair(pos, "done", ast.Const(pos, true)),
                    ast.Obj.Pair(pos, "value", tNode())
                  ]));
                } else {
                  return node;
                }
              });
            }
          };
          _GeneratorState_prototype.getRedirect = function () {
            return this.builder.getRedirect(this);
          };
          function getCaseId(pos, value) {
            if (value instanceof GeneratorState) {
              return ast.Const(pos, value.caseId());
            } else if (value instanceof ast.Node) {
              return value;
            } else {
              throw TypeError("Expected a GeneratorState or Node, got " + __typeof(value));
            }
          }
          _GeneratorState_prototype.goto = function (pos, tState, preventRedirect) {
            var nodes;
            if (preventRedirect == null) {
              preventRedirect = false;
            }
            nodes = this.nodes;
            if (nodes.length === 0 && !preventRedirect) {
              this.builder.addRedirect(this, tState);
            }
            nodes.push(this.makeGoto(
              pos,
              function () {
                return getCaseId(pos, tState());
              },
              true
            ));
          };
          _GeneratorState_prototype.noop = function (pos) {
            var branch;
            if (this.nodes.length === 0) {
              return this;
            } else {
              branch = this.branch();
              this.goto(pos, function () {
                return branch;
              });
              return branch;
            }
          };
          _GeneratorState_prototype.gotoIf = function (pos, tTest, tWhenTrue, tWhenFalse) {
            var _this;
            _this = this;
            this.goto(
              pos,
              function () {
                return ast.IfExpression(
                  pos,
                  tTest(),
                  getCaseId(pos, tWhenTrue()),
                  getCaseId(pos, tWhenFalse())
                );
              },
              true
            );
          };
          _GeneratorState_prototype.pendingFinally = function (pos, tFinallyBody) {
            var _this, ident, scope;
            _this = this;
            scope = this.builder.scope;
            ident = scope.reserveIdent(pos, "finally", Type["undefined"]["function"]());
            scope.markAsFunction(ident);
            this.builder.finallies.push(function () {
              return ast.Func(
                pos,
                ident,
                [],
                [],
                tFinallyBody()
              );
            });
            this.nodes.push(function () {
              return ast.Call(
                pos,
                ast.Access(pos, _this.builder.pendingFinalliesIdent, "push"),
                [ident]
              );
            });
            return this;
          };
          _GeneratorState_prototype.runPendingFinally = function (pos) {
            var _this;
            _this = this;
            this.nodes.push(function () {
              return ast.Call(pos, ast.Call(pos, ast.Access(pos, _this.builder.pendingFinalliesIdent, "pop")));
            });
            return this;
          };
          _GeneratorState_prototype.enterTryCatch = function (pos) {
            var fresh;
            fresh = this.noop(pos);
            this.builder.enterTryCatch(fresh);
            return fresh;
          };
          _GeneratorState_prototype.exitTryCatch = function (pos, tIdent, tPostState) {
            var fresh;
            this.goto(pos, tPostState);
            fresh = this.noop(pos);
            this.builder.exitTryCatch(fresh, tIdent);
            return fresh;
          };
          return GeneratorState;
        }());
        GeneratorBuilder = (function () {
          var _GeneratorBuilder_prototype;
          function GeneratorBuilder(pos, scope, hasGeneratorNode) {
            var _this, sendScope;
            _this = this instanceof GeneratorBuilder ? this : __create(_GeneratorBuilder_prototype);
            _this.pos = pos;
            _this.scope = scope;
            _this.hasGeneratorNode = hasGeneratorNode;
            _this.currentCatch = [];
            _this.redirects = Map();
            _this.start = GeneratorState(_this);
            _this.stop = GeneratorState(_this).add(function () {
              return ast.Return(pos, ast.Obj(pos, [
                ast.Obj.Pair(pos, "done", ast.Const(pos, true)),
                ast.Obj.Pair(pos, "value", ast.Const(pos, void 0))
              ]));
            });
            _this.statesOrder = [_this.start];
            if (typeof stateIdent !== "undefined" && stateIdent !== null) {
              _this.stateIdent = stateIdent;
            } else {
              _this.stateIdent = scope.reserveIdent(pos, "state", Type.number);
            }
            _this.pendingFinalliesIdent = scope.reserveIdent(pos, "finallies", Type["undefined"]["function"]().array());
            sendScope = scope.clone(false);
            _this.receivedIdent = sendScope.reserveIdent(pos, "received", Type.any);
            sendScope.markAsParam(_this.receivedIdent);
            _this.finallies = [];
            _this.catches = [];
            return _this;
          }
          _GeneratorBuilder_prototype = GeneratorBuilder.prototype;
          GeneratorBuilder.displayName = "GeneratorBuilder";
          _GeneratorBuilder_prototype.addRedirect = function (fromState, toState) {
            this.redirects.set(fromState, toState);
          };
          _GeneratorBuilder_prototype.getRedirect = function (fromState) {
            var redirect, redirectFunc;
            redirectFunc = this.redirects.get(fromState);
            if (redirectFunc == null) {
              return fromState;
            } else if (redirectFunc instanceof GeneratorState) {
              return redirectFunc;
            } else if (typeof redirectFunc === "function") {
              redirect = redirectFunc();
              if (redirect instanceof GeneratorState) {
                redirect = this.getRedirect(redirect);
              } else {
                throw Error("Expected a GeneratorState, got " + __typeof(redirectFunc));
              }
              this.redirects.set(fromState, redirect);
              return redirect;
            } else {
              throw Error("Unknown value in redirects: " + __typeof(redirectFunc));
            }
          };
          _GeneratorBuilder_prototype._calculateCaseIds = function () {
            var _arr, _i, _len, caseIds, id, state;
            id = -1;
            caseIds = this.caseIds = Map();
            for (_arr = __toArray(this.statesOrder), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              state = _arr[_i];
              if (!this.redirects.has(state)) {
                caseIds.set(state, ++id);
              }
            }
          };
          _GeneratorBuilder_prototype.caseId = function (state) {
            var caseIds;
            caseIds = this.caseIds;
            if (caseIds == null) {
              throw Error("_calculate-case-ids must be called first");
            }
            if (!caseIds.has(state)) {
              throw Error("case-ids does not contain state");
            }
            return caseIds.get(state);
          };
          _GeneratorBuilder_prototype.enterTryCatch = function (state) {
            this.currentCatch.push([state]);
          };
          _GeneratorBuilder_prototype.exitTryCatch = function (state, tIdent) {
            var catchStates, index;
            if (this.currentCatch.length === 0) {
              throw Error("Unable to exit-try-catch without first using enter-try-catch");
            }
            catchStates = this.currentCatch.pop();
            index = catchStates.indexOf(state);
            if (index !== -1) {
              catchStates.splice(index, 1);
            }
            this.catches.push({ tryStates: catchStates, tIdent: tIdent, catchState: state });
          };
          function calculateRanges(stateIds) {
            var _arr, i, id, lastRangeId, len, ranges, rangeStart;
            ranges = [];
            rangeStart = -1/0;
            lastRangeId = -1;
            for (_arr = __toArray(stateIds), i = 0, len = _arr.length; i < len; ++i) {
              id = _arr[i];
              if (id !== lastRangeId + 1) {
                if (lastRangeId !== -1) {
                  ranges.push({ start: rangeStart, finish: lastRangeId });
                }
                rangeStart = id;
              }
              lastRangeId = id;
            }
            if (lastRangeId !== -1) {
              ranges.push({ start: rangeStart, finish: lastRangeId });
            }
            return ranges;
          }
          _GeneratorBuilder_prototype.create = function () {
            var _this, body, catches, close, err, f, innerScope, send, sendTryCatch,
                sendTryFinally, stateIdent, step, throwIdent;
            _this = this;
            if (this.currentCatch.length) {
              throw Error("Cannot create a generator if there are stray catches");
            }
            this.statesOrder.push(this.stop);
            this._calculateCaseIds();
            body = [
              ast.Assign(this.pos, this.stateIdent, ast.Const(this.pos, this.start.caseId()))
            ];
            close = this.scope.reserveIdent(this.pos, "close", Type["undefined"]["function"]());
            this.scope.markAsFunction(close);
            if (this.finallies.length === 0) {
              this.scope.removeVariable(this.pendingFinalliesIdent);
              body.push(ast.Func(
                this.pos,
                close,
                [],
                [],
                ast.Block(this.pos, [ast.Assign(this.pos, this.stateIdent, this.stop.caseId())])
              ));
            } else {
              body.push(ast.Assign(this.pos, this.pendingFinalliesIdent, ast.Arr(this.pos)));
              body.push.apply(body, (function () {
                var _arr, _arr2, _i, _len, f;
                for (_arr = [], _arr2 = __toArray(_this.finallies), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                  f = _arr2[_i];
                  _arr.push(f());
                }
                return _arr;
              }()));
              innerScope = this.scope.clone(false);
              f = innerScope.reserveIdent(this.pos, "f", Type["undefined"]["function"]().union(Type["undefined"]));
              body.push(ast.Func(
                this.pos,
                close,
                [],
                innerScope.getVariables(),
                ast.Block(this.pos, [
                  ast.Assign(this.pos, this.stateIdent, this.stop.caseId()),
                  ast.Assign(this.pos, f, ast.Call(this.pos, ast.Access(this.pos, this.pendingFinalliesIdent, "pop"))),
                  ast.If(this.pos, f, ast.TryFinally(
                    this.pos,
                    ast.Call(this.pos, f),
                    ast.Call(this.pos, close)
                  ))
                ])
              ));
            }
            err = this.scope.reserveIdent(this.pos, "e", Type.any);
            catches = this.catches;
            stateIdent = this.stateIdent;
            step = this.scope.reserveIdent(this.pos, "step", Type["function"]);
            send = this.scope.reserveIdent(this.pos, "send", Type["function"]);
            throwIdent = this.scope.reserveIdent(this.pos, "throw", Type["function"]);
            body.push(ast.Func(
              this.pos,
              step,
              [this.receivedIdent],
              [],
              ast.While(this.pos, true, ast.Switch(
                this.pos,
                stateIdent,
                (function () {
                  var _arr, _arr2, _arr3, _arr4, _i, _i2, _len, _len2, nodes, state,
                      tNode;
                  for (_arr = [], _arr2 = __toArray(_this.statesOrder), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                    state = _arr2[_i];
                    if (!_this.redirects.has(state)) {
                      for (_arr3 = [], _arr4 = __toArray(state.nodes), _i2 = 0, _len2 = _arr4.length; _i2 < _len2; ++_i2) {
                        tNode = _arr4[_i2];
                        _arr3.push(tNode());
                      }
                      nodes = _arr3;
                      if (nodes.length === 0) {
                        throw Error("Found state with no nodes in it");
                      }
                      _arr.push(ast.Switch.Case(
                        nodes[0].pos,
                        ast.Const(nodes[0].pos, state.caseId()),
                        ast.Block(nodes[0].pos, nodes)
                      ));
                    }
                  }
                  return _arr;
                }()),
                ast.Throw(this.pos, ast.Call(
                  this.pos,
                  ast.Ident(this.pos, "Error"),
                  [ast.Binary(this.pos, "Unknown state: ", "+", stateIdent)]
                ))
              ))
            ));
            body.push(ast.Func(
              this.pos,
              throwIdent,
              [err],
              [],
              (function () {
                var _arr, _f, _i, current;
                current = ast.Block(_this.pos, [
                  ast.Call(_this.pos, close, []),
                  ast.Throw(_this.pos, err)
                ]);
                for (_arr = __toArray(catches), _i = _arr.length, _f = function (catchInfo) {
                  var _arr, _arr2, _i, _len, _this, errIdent, state, tryStateIds,
                      tryStateRanges;
                  _this = this;
                  errIdent = catchInfo.tIdent();
                  this.scope.addVariable(errIdent);
                  for (_arr = [], _arr2 = __toArray(catchInfo.tryStates), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                    state = _arr2[_i];
                    if (!this.redirects.has(state)) {
                      _arr.push(state.caseId());
                    }
                  }
                  tryStateIds = _arr;
                  tryStateIds.sort(__curry(2, function (x, y) {
                    return __cmp(x, y);
                  }));
                  tryStateRanges = calculateRanges(tryStateIds);
                  return current = ast.If(
                    this.pos,
                    ast.Or.apply(ast, [this.pos].concat((function () {
                      var _arr, _i, _len, _ref, finish, start;
                      for (_arr = [], _i = 0, _len = tryStateRanges.length; _i < _len; ++_i) {
                        _ref = tryStateRanges[_i];
                        start = _ref.start;
                        finish = _ref.finish;
                        if (start === -1/0) {
                          if (finish === 0) {
                            _arr.push(ast.Binary(_this.pos, stateIdent, "===", ast.Const(_this.pos, 0)));
                          } else {
                            _arr.push(ast.Binary(_this.pos, stateIdent, "<=", ast.Const(_this.pos, finish)));
                          }
                        } else if (finish === start) {
                          _arr.push(ast.Binary(_this.pos, stateIdent, "===", ast.Const(_this.pos, start)));
                        } else if (finish === +start + 1) {
                          _arr.push(ast.Or(
                            _this.pos,
                            ast.Binary(_this.pos, stateIdent, "===", ast.Const(_this.pos, start)),
                            ast.Binary(_this.pos, stateIdent, "===", ast.Const(_this.pos, finish))
                          ));
                        } else {
                          _arr.push(ast.And(
                            _this.pos,
                            ast.Binary(_this.pos, stateIdent, ">=", ast.Const(_this.pos, start)),
                            ast.Binary(_this.pos, stateIdent, "<=", ast.Const(_this.pos, finish))
                          ));
                        }
                      }
                      return _arr;
                    }()))),
                    ast.Block(this.pos, [
                      ast.Assign(this.pos, errIdent, err),
                      ast.Assign(this.pos, stateIdent, ast.Const(this.pos, catchInfo.catchState.caseId()))
                    ]),
                    current
                  );
                }; _i--; ) {
                  _f.call(_this, _arr[_i]);
                }
                return current;
              }())
            ));
            sendTryCatch = ast.TryCatch(
              this.pos,
              ast.Return(this.pos, ast.Call(this.pos, step, [this.receivedIdent])),
              err,
              ast.Call(this.pos, throwIdent, [err])
            );
            if (this.finallies.length === 0) {
              sendTryFinally = sendTryCatch;
            } else {
              sendTryFinally = ast.TryFinally(this.pos, sendTryCatch, ast.If(
                this.pos,
                ast.Binary(this.pos, stateIdent, "===", this.stop.caseId()),
                ast.Call(this.pos, close, [])
              ));
            }
            body.push(ast.Func(
              this.pos,
              send,
              [this.receivedIdent],
              [],
              catches.length ? ast.While(this.pos, true, sendTryFinally) : sendTryFinally
            ));
            body.push(ast.Return(this.pos, ast.Obj(this.pos, [
              ast.Obj.Pair(this.pos, "close", close),
              ast.Obj.Pair(this.pos, "iterator", ast.Func(
                this.pos,
                null,
                [],
                [],
                ast.Return(this.pos, ast.This(this.pos))
              )),
              ast.Obj.Pair(this.pos, "next", ast.Func(
                this.pos,
                null,
                [],
                [],
                ast.Return(this.pos, ast.Call(this.pos, send, [ast.Const(this.pos, void 0)]))
              )),
              ast.Obj.Pair(this.pos, "send", send),
              ast.Obj.Pair(this.pos, "throw", ast.Func(
                this.pos,
                null,
                [err],
                [],
                ast.Block(this.pos, [
                  ast.Call(this.pos, throwIdent, [err]),
                  ast.Return(this.pos, ast.Call(this.pos, send, [ast.Const(this.pos, void 0)]))
                ])
              ))
            ])));
            return ast.Block(this.pos, body);
          };
          return GeneratorBuilder;
        }());
        function flattenSpreadArray(elements) {
          var _arr, _i, _len, changed, element, result;
          result = [];
          changed = false;
          for (_arr = __toArray(elements), _i = 0, _len = _arr.length; _i < _len; ++_i) {
            element = _arr[_i];
            if (element instanceof ParserNode.Spread && element.node instanceof ParserNode.Array) {
              result.push.apply(result, __toArray(element.node.elements));
              changed = true;
            } else {
              result.push(element);
            }
          }
          if (changed) {
            return flattenSpreadArray(result);
          } else {
            return elements;
          }
        }
        function makePos(line, column, file) {
          var pos;
          if (file == null) {
            file = void 0;
          }
          pos = { line: line, column: column };
          if (file != null) {
            pos.file = file;
          }
          return pos;
        }
        getPos = function (node) {
          throw Error("get-pos must be overridden");
        };
        function doNothing() {}
        generatorTranslate = (function () {
          var expressions, statements;
          function memoize(func) {
            var _ref, result;
            if (typeof func !== "function") {
              throw TypeError("Expected func to be a Function, got " + __typeof(func));
            }
            if (func.memoized) {
              return func;
            } else {
              (_ref = function () {
                if (func) {
                  result = func();
                  func = null;
                }
                return result;
              }).memoized = true;
              return _ref;
            }
          }
          function same(value) {
            var _ref;
            (_ref = function () {
              return value;
            }).memoized = true;
            return _ref;
          }
          function maybeMemoize(value) {
            if (typeof value === "function") {
              return memoize(value);
            } else {
              return same(value);
            }
          }
          function handleAssign(assignTo, scope, state, tNode, cleanup) {
            var nodeNeedsCaching, tAssignTo, tTmp;
            if (cleanup == null) {
              cleanup = doNothing;
            }
            if (typeof assignTo === "function") {
              tAssignTo = memoize(assignTo);
              return {
                state: state.add(function () {
                  var node;
                  node = tNode();
                  return ast.Assign(node.pos, tAssignTo(), node);
                }),
                tNode: tAssignTo,
                cleanup: cleanup
              };
            } else if (assignTo) {
              tNode = memoize(tNode);
              tTmp = memoize(function () {
                return scope.reserveIdent(tNode().pos, "tmp", Type.any);
              });
              nodeNeedsCaching = memoize(function () {
                return tNode() === state.builder.receivedIdent || needsCaching(tNode());
              });
              return {
                state: state.add(function () {
                  var node;
                  node = tNode();
                  if (nodeNeedsCaching()) {
                    return ast.Assign(node.pos, tTmp(), node);
                  } else {
                    return node;
                  }
                }),
                tNode: function () {
                  if (nodeNeedsCaching()) {
                    return tTmp();
                  } else {
                    return tNode();
                  }
                },
                cleanup: function () {
                  cleanup();
                  if (nodeNeedsCaching()) {
                    return scope.releaseIdent(tTmp());
                  }
                }
              };
            } else {
              return { state: state, tNode: tNode, cleanup: cleanup };
            }
          }
          function makeTTmp(assignTo, scope, pos, name, type) {
            if (name == null) {
              name = "tmp";
            }
            if (type == null) {
              type = Type.any;
            }
            if (typeof assignTo === "function") {
              return memoize(assignTo);
            } else {
              return same(scope.reserveIdent(pos, name, type));
            }
          }
          function makeCleanup(assignTo, scope, tTmp) {
            if (typeof assignTo === "function") {
              return function () {
                var tmp, value;
                value = assignTo();
                tmp = tTmp();
                if (value === tmp) {
                  return scope.releaseIdent(tmp);
                }
              };
            } else {
              return function () {
                return scope.releaseIdent(tTmp());
              };
            }
          }
          function generatorArrayTranslate(pos, elements, scope, state, assignTo) {
            var _arr, _f, _len, i, tArrayStart, tTmp;
            tTmp = makeTTmp(
              assignTo,
              scope,
              pos,
              "arr",
              Type.array
            );
            tArrayStart = null;
            for (_arr = __toArray(elements), i = 0, _len = _arr.length, _f = function (element, i) {
              var expr;
              if (tArrayStart || state.hasGeneratorNode(element)) {
                if (tArrayStart == null) {
                  tArrayStart = arrayTranslate(
                    pos,
                    __slice.call(elements, 0, i),
                    scope,
                    true,
                    false
                  );
                  state = state.add(function () {
                    return ast.Assign(pos, tTmp(), tArrayStart());
                  });
                }
                if (element instanceof ParserNode.Spread) {
                  expr = generatorTranslateExpression(element.node, scope, state, false);
                  return state = expr.state.add(function () {
                    var tmp;
                    tmp = tTmp();
                    scope.addHelper("__toArray");
                    return ast.Call(
                      getPos(element),
                      ast.Access(
                        getPos(element),
                        tmp,
                        ast.Const(getPos(element), "push"),
                        ast.Const(getPos(element), "apply")
                      ),
                      [
                        tmp,
                        ast.Call(
                          getPos(element),
                          ast.Ident(getPos(element), "__toArray"),
                          [__first(expr.tNode(), expr.cleanup())]
                        )
                      ]
                    );
                  });
                } else {
                  expr = generatorTranslateExpression(element, scope, state, false);
                  return state = expr.state.add(function () {
                    return ast.Call(
                      getPos(element),
                      ast.Access(getPos(element), tTmp(), ast.Const(getPos(element), "push")),
                      [__first(expr.tNode(), expr.cleanup())]
                    );
                  });
                }
              }
            }; i < _len; ++i) {
              _f.call(this, _arr[i], i);
            }
            if (tArrayStart == null) {
              return {
                state: state,
                tNode: arrayTranslate(
                  pos,
                  elements,
                  scope,
                  true,
                  false
                ),
                cleanup: doNothing
              };
            } else {
              return {
                state: state,
                tNode: tTmp,
                cleanup: makeCleanup(assignTo, scope, tTmp)
              };
            }
          }
          expressions = {
            1: function (node, scope, state, assignTo, unassigned) {
              var gChild, gParent;
              gParent = generatorTranslateExpression(
                node.parent,
                scope,
                state,
                true,
                unassigned
              );
              gChild = generatorTranslateExpression(
                node.child,
                scope,
                gParent.state,
                false,
                unassigned
              );
              return handleAssign(assignTo, scope, gChild.state, function () {
                var _ref;
                _ref = ast.Access(getPos(node), gParent.tNode(), gChild.tNode());
                gParent.cleanup();
                gChild.cleanup();
                return _ref;
              });
            },
            4: function (node, scope, state, assignTo, unassigned) {
              return generatorArrayTranslate(
                getPos(node),
                node.elements,
                scope,
                state,
                assignTo,
                unassigned
              );
            },
            5: function (node, scope, state, assignTo, unassigned) {
              var gChild, gLeft, gParent, gRight, left;
              left = node.left;
              if (left instanceof ParserNode.Access) {
                gParent = generatorTranslateExpression(
                  left.parent,
                  scope,
                  state,
                  true,
                  unassigned
                );
                gChild = generatorTranslateExpression(
                  left.child,
                  scope,
                  gParent.state,
                  true,
                  unassigned
                );
                gLeft = {
                  state: gChild.state,
                  tNode: function () {
                    return ast.Access(getPos(left), gParent.tNode(), gChild.tNode());
                  },
                  cleanup: function () {
                    gParent.cleanup();
                    return gChild.cleanup();
                  }
                };
              } else {
                if (unassigned && node.left instanceof ParserNode.Ident) {
                  unassigned[node.left.name] = false;
                }
                gLeft = {
                  state: state,
                  tNode: translate(node.left, scope, "leftExpression"),
                  cleanup: doNothing
                };
              }
              gRight = generatorTranslateExpression(
                node.right,
                scope,
                gLeft.state,
                gLeft.tNode,
                unassigned
              );
              return handleAssign(
                assignTo,
                scope,
                gRight.state,
                gRight.tNode,
                function () {
                  gLeft.cleanup();
                  return gRight.cleanup();
                }
              );
            },
            6: (function () {
              var lazyOps;
              lazyOps = {
                "&&": function (node, scope, state, assignTo, unassigned) {
                  var gLeft, gRight, postBranch, tNode, whenTrueBranch;
                  gLeft = generatorTranslateExpression(
                    node.left,
                    scope,
                    state,
                    assignTo || true,
                    unassigned
                  );
                  tNode = memoize(gLeft.tNode);
                  gLeft.state.gotoIf(
                    getPos(node),
                    tNode,
                    function () {
                      return whenTrueBranch;
                    },
                    function () {
                      return postBranch;
                    }
                  );
                  whenTrueBranch = gLeft.state.branch();
                  gRight = generatorTranslateExpression(
                    node.right,
                    scope,
                    whenTrueBranch,
                    tNode,
                    unassigned
                  );
                  gRight.state.goto(getPos(node), function () {
                    return postBranch;
                  });
                  postBranch = gLeft.state.branch();
                  return {
                    tNode: tNode,
                    state: postBranch,
                    cleanup: function () {
                      gLeft.cleanup();
                      return gRight.cleanup();
                    }
                  };
                },
                "||": function (node, scope, state, assignTo, unassigned) {
                  var gLeft, gRight, postBranch, tNode, whenFalseBranch;
                  gLeft = generatorTranslateExpression(
                    node.left,
                    scope,
                    state,
                    assignTo || true,
                    unassigned
                  );
                  tNode = memoize(gLeft.tNode);
                  gLeft.state.gotoIf(
                    getPos(node),
                    tNode,
                    function () {
                      return postBranch;
                    },
                    function () {
                      return whenFalseBranch;
                    }
                  );
                  whenFalseBranch = gLeft.state.branch();
                  gRight = generatorTranslateExpression(
                    node.right,
                    scope,
                    whenFalseBranch,
                    tNode,
                    unassigned
                  );
                  gRight.state.goto(getPos(node), function () {
                    return postBranch;
                  });
                  postBranch = gLeft.state.branch();
                  return {
                    tNode: tNode,
                    state: postBranch,
                    cleanup: function () {
                      gLeft.cleanup();
                      return gRight.cleanup();
                    }
                  };
                }
              };
              return function (node, scope, state, assignTo, unassigned) {
                var gLeft, gRight;
                if (__owns.call(lazyOps, node.op)) {
                  return lazyOps[node.op](
                    node,
                    scope,
                    state,
                    assignTo,
                    unassigned
                  );
                } else {
                  gLeft = generatorTranslateExpression(
                    node.left,
                    scope,
                    state,
                    true,
                    unassigned
                  );
                  gRight = generatorTranslateExpression(
                    node.right,
                    scope,
                    gLeft.state,
                    false,
                    unassigned
                  );
                  return handleAssign(assignTo, scope, gRight.state, function () {
                    return ast.Binary(
                      getPos(node),
                      gLeft.tNode(),
                      (gLeft.cleanup(), node.op),
                      __first(gRight.tNode(), gRight.cleanup())
                    );
                  });
                }
              };
            }()),
            7: function (node, scope, state, assignTo, unassigned) {
              var _arr, i, len, result, subnode;
              for (_arr = __toArray(node.nodes), i = 0, len = _arr.length; i < len; ++i) {
                subnode = _arr[i];
                result = generatorTranslateExpression(
                  subnode,
                  scope,
                  state,
                  i === len - 1 && assignTo,
                  unassigned
                );
                state = result.state;
                if (i === len - 1) {
                  return result;
                }
              }
              throw Error("Unreachable state");
            },
            9: function (node, scope, state, assignTo, unassigned) {
              var args, gArgs, gChild, gFunc, gParent, gStart, isApply, isNew;
              if (node.func instanceof ParserNode.Access) {
                gParent = generatorTranslateExpression(
                  node.func.parent,
                  scope,
                  state,
                  true,
                  unassigned
                );
                gChild = generatorTranslateExpression(
                  node.func.child,
                  scope,
                  gParent.state,
                  true,
                  unassigned
                );
                gFunc = {
                  tNode: function () {
                    return ast.Access(getPos(node), gParent.tNode(), gChild.tNode());
                  },
                  cleanup: function () {
                    gParent.cleanup();
                    return gChild.cleanup();
                  },
                  state: gChild.state
                };
              } else {
                gFunc = generatorTranslateExpression(
                  node.func,
                  scope,
                  state,
                  true,
                  unassigned
                );
              }
              isApply = node.isApply;
              isNew = node.isNew;
              args = node.args;
              if (isApply && (args.length === 0 || !(args[0] instanceof ParserNode.Spread))) {
                if (args.length === 0) {
                  gStart = {
                    state: gFunc.state,
                    tNode: function () {
                      return ast.Const(getPos(node), void 0);
                    },
                    cleanup: doNothing
                  };
                } else {
                  gStart = generatorTranslateExpression(
                    args[0],
                    scope,
                    gFunc.state,
                    true,
                    unassigned
                  );
                }
                gArgs = generatorArrayTranslate(
                  getPos(node),
                  __slice.call(args, 1),
                  scope,
                  gStart.state,
                  unassigned
                );
                return handleAssign(assignTo, scope, gArgs.state, function () {
                  var args, func, start;
                  func = gFunc.tNode();
                  start = gStart.tNode();
                  args = gArgs.tNode();
                  gFunc.cleanup();
                  gStart.cleanup();
                  gArgs.cleanup();
                  if (args instanceof ast.Arr) {
                    return ast.Call(
                      getPos(node),
                      ast.Access(getPos(node), func, "call"),
                      [start].concat(__toArray(args.elements))
                    );
                  } else {
                    return ast.Call(
                      getPos(node),
                      ast.Access(getPos(node), func, "apply"),
                      [start, args]
                    );
                  }
                });
              } else {
                gArgs = generatorArrayTranslate(
                  getPos(node),
                  args,
                  scope,
                  gFunc.state,
                  unassigned
                );
                return handleAssign(assignTo, scope, gArgs.state, function () {
                  var args, func;
                  func = gFunc.tNode();
                  args = gArgs.tNode();
                  gFunc.cleanup();
                  gArgs.cleanup();
                  if (isApply) {
                    return ast.Call(
                      getPos(node),
                      ast.Access(getPos(node), func, "apply"),
                      [
                        ast.Access(getPos(node), args, ast.Const(getPos(node), 0)),
                        ast.Call(
                          getPos(node),
                          ast.Access(getPos(node), args, ast.Const(getPos(node), "slice")),
                          [ast.Const(getPos(node), 1)]
                        )
                      ]
                    );
                  } else if (isNew) {
                    scope.addHelper("__new");
                    return ast.Call(
                      getPos(node),
                      ast.Access(
                        getPos(node),
                        ast.Ident(getPos(node), "__new"),
                        ast.Const(getPos(node), "apply")
                      ),
                      [func, args]
                    );
                  } else if (args instanceof ast.Arr) {
                    return ast.Call(
                      getPos(node),
                      ast.Access(getPos(node), func, "call"),
                      [
                        func instanceof ast.Binary && func.op === "." ? func.left : ast.Const(getPos(node), void 0)
                      ].concat(__toArray(args.elements))
                    );
                  } else {
                    return ast.Call(
                      getPos(node),
                      ast.Access(getPos(node), func, "apply"),
                      [
                        func instanceof ast.Binary && func.op === "." ? func.left : ast.Const(getPos(node), void 0),
                        args
                      ]
                    );
                  }
                });
              }
            },
            16: function (node, scope, state, assignTo, unassigned) {
              var gText;
              gText = generatorTranslateExpression(
                node.text,
                scope,
                state,
                false,
                unassigned
              );
              return handleAssign(
                assignTo,
                scope,
                gText.state,
                function () {
                  return ast.Call(
                    getPos(node),
                    ast.Ident(getPos(node), "write"),
                    [gText.tNode()].concat(node.escape
                      ? [ast.Const(getPos(node), true)]
                      : [])
                  );
                },
                gText.cleanup
              );
            },
            17: function (node, scope, state, assignTo, unassigned) {
              var gCode;
              gCode = generatorTranslateExpression(
                node.code,
                scope,
                state,
                false,
                unassigned
              );
              return handleAssign(
                assignTo,
                scope,
                gCode.state,
                function () {
                  return ast.Eval(getPos(node), gCode.tNode());
                },
                gCode.cleanup
              );
            },
            22: function (node, scope, state, assignTo, unassigned) {
              var cleanup, gWhenFalse, gWhenTrue, k, postBranch, ret, test, tTmp,
                  tWhenFalse, tWhenTrue, v, whenFalseBranch, whenFalseUnassigned,
                  whenTrueBranch;
              test = generatorTranslateExpression(
                node.test,
                scope,
                state,
                state.hasGeneratorNode(node.test),
                unassigned
              );
              state = test.state;
              whenFalseUnassigned = unassigned && __import({}, unassigned);
              if (state.hasGeneratorNode(node.whenTrue) || state.hasGeneratorNode(node.whenFalse)) {
                state.gotoIf(
                  getPos(node),
                  function () {
                    var _ref;
                    _ref = test.tNode();
                    test.cleanup();
                    return _ref;
                  },
                  function () {
                    return whenTrueBranch;
                  },
                  function () {
                    return whenFalseBranch;
                  }
                );
                tTmp = makeTTmp(assignTo, scope, getPos(node));
                whenTrueBranch = state.branch();
                gWhenTrue = generatorTranslateExpression(
                  node.whenTrue,
                  scope,
                  whenTrueBranch,
                  tTmp,
                  unassigned
                );
                gWhenTrue.state.goto(getPos(node.whenTrue), function () {
                  return postBranch;
                });
                whenFalseBranch = state.branch();
                gWhenFalse = generatorTranslateExpression(
                  node.whenFalse,
                  scope,
                  whenFalseBranch,
                  tTmp,
                  whenFalseUnassigned
                );
                gWhenFalse.state.goto(getPos(node.whenFalse), function () {
                  return postBranch;
                });
                postBranch = state.branch();
                cleanup = makeCleanup(assignTo, scope, tTmp);
                ret = {
                  state: postBranch,
                  tNode: tTmp,
                  cleanup: function () {
                    gWhenTrue.cleanup();
                    gWhenFalse.cleanup();
                    return cleanup();
                  }
                };
              } else {
                tWhenTrue = translate(node.whenTrue, scope, "expression", unassigned);
                tWhenFalse = translate(node.whenFalse, scope, "expression", whenFalseUnassigned);
                ret = handleAssign(assignTo, scope, state, function () {
                  return ast.If(
                    getPos(node),
                    test.tNode(),
                    (test.cleanup(), tWhenTrue()),
                    tWhenFalse()
                  );
                });
              }
              if (unassigned) {
                for (k in whenFalseUnassigned) {
                  if (__owns.call(whenFalseUnassigned, k)) {
                    v = whenFalseUnassigned[k];
                    if (!v) {
                      unassigned[k] = false;
                    }
                  }
                }
              }
              return ret;
            },
            28: function (node, scope, state, assignTo, unassigned) {
              var gSource;
              gSource = generatorTranslateExpression(
                node.source,
                scope,
                state,
                false,
                unassigned
              );
              return handleAssign(
                assignTo,
                scope,
                state,
                function () {
                  var source;
                  source = gSource.tNode();
                  if (source.isConst()) {
                    return ast.Regex(getPos(node), String(source.constValue()), node.flags);
                  } else {
                    return ast.Call(
                      getPos(node),
                      ast.Ident(getPos(node), "RegExp"),
                      [
                        source,
                        ast.Const(getPos(node), flags)
                      ]
                    );
                  }
                },
                gSource.cleanup
              );
            },
            41: function (node, scope, state, assignTo, unassigned) {
              var gNode;
              gNode = generatorTranslateExpression(
                node.node,
                scope,
                state,
                false,
                unassigned
              );
              return handleAssign(
                assignTo,
                scope,
                gNode.state,
                gNode.tNode,
                function () {
                  var _arr, _i, tmp;
                  gNode.cleanup();
                  for (_arr = __toArray(node.tmps), _i = _arr.length; _i--; ) {
                    tmp = _arr[_i];
                    scope.releaseTmp(tmp);
                  }
                }
              );
            },
            48: function (node, scope, state, assignTo, unassigned) {
              var gNode;
              gNode = generatorTranslateExpression(
                node.node,
                scope,
                state,
                false,
                unassigned
              );
              return handleAssign(assignTo, scope, gNode.state, function () {
                return ast.Unary(getPos(node), node.op, __first(gNode.tNode(), gNode.cleanup()));
              });
            },
            50: function (node, scope, state, assignTo, unassigned) {
              var gNode;
              gNode = generatorTranslateExpression(
                node.node,
                scope,
                state,
                false,
                unassigned
              );
              state = gNode.state["yield"](getPos(node), gNode.tNode);
              return handleAssign(
                assignTo,
                scope,
                state,
                function () {
                  return state.builder.receivedIdent;
                },
                gNode.cleanup
              );
            }
          };
          function generatorTranslateExpression(node, scope, state, assignTo, unassigned) {
            var key;
            if (assignTo == null) {
              assignTo = false;
            }
            key = node.typeId;
            if (state.hasGeneratorNode(node)) {
              if (__owns.call(expressions, key)) {
                return expressions[key](
                  node,
                  scope,
                  state,
                  assignTo,
                  unassigned
                );
              } else {
                throw Error("Unknown expression type: " + __typeof(node));
              }
            } else {
              return handleAssign(assignTo, scope, state, translate(node, scope, "expression", unassigned));
            }
          }
          statements = {
            7: function (node, scope, state, breakState, continueState, unassigned) {
              var _arr, acc, i, len, subnode;
              if (node.label != null) {
                throw Error("Not implemented: block with label in generator");
              }
              acc = state;
              for (_arr = __toArray(node.nodes), i = 0, len = _arr.length; i < len; ++i) {
                subnode = _arr[i];
                acc = generatorTranslate(
                  subnode,
                  scope,
                  acc,
                  breakState,
                  continueState,
                  unassigned
                );
              }
              return acc;
            },
            8: function (node, scope, state, breakState) {
              if (node.label != null) {
                throw Error("Not implemented: break with label in a generator");
              }
              if (breakState == null) {
                throw Error("break found outside of a loop or switch");
              }
              state.goto(getPos(node), breakState);
              return state;
            },
            13: function (node, scope, state, breakState, continueState) {
              if (node.label != null) {
                throw Error("Not implemented: break with label in a generator");
              }
              if (continueState == null) {
                throw Error("continue found outside of a loop");
              }
              state.goto(getPos(node), continueState);
              return state;
            },
            18: function (node, scope, state, _p, _p2, unassigned) {
              var bodyBranch, bodyUnassigned, gTest, k, postBranch, stepBranch,
                  testBranch, v;
              if (node.label != null) {
                throw Error("Not implemented: for with label in generator");
              }
              if (node.init != null && !(node.init instanceof ParserNode.Nothing)) {
                state = generatorTranslate(
                  node.init,
                  scope,
                  state,
                  null,
                  null,
                  unassigned
                );
              }
              state.goto(getPos(node), function () {
                return testBranch;
              });
              bodyUnassigned = unassigned && __import({ "\u0000": true }, unassigned);
              testBranch = state.branch();
              gTest = generatorTranslateExpression(
                node.test,
                scope,
                testBranch,
                state.hasGeneratorNode(node.test),
                bodyUnassigned
              );
              testBranch.gotoIf(
                getPos(node.test),
                function () {
                  var _ref;
                  _ref = gTest.tNode();
                  gTest.cleanup();
                  return _ref;
                },
                function () {
                  return bodyBranch;
                },
                function () {
                  return postBranch;
                }
              );
              bodyBranch = state.branch();
              generatorTranslate(
                node.body,
                scope,
                bodyBranch,
                function () {
                  return postBranch;
                },
                function () {
                  return stepBranch;
                },
                bodyUnassigned
              ).goto(getPos(node.body), function () {
                return stepBranch || testBranch;
              });
              stepBranch = null;
              if (node.step != null && !(node.step instanceof ParserNode.Nothing)) {
                stepBranch = state.branch();
                generatorTranslate(
                  node.step,
                  scope,
                  stepBranch,
                  null,
                  null,
                  bodyUnassigned
                ).goto(getPos(node.step), function () {
                  return testBranch;
                });
              }
              if (unassigned) {
                for (k in bodyUnassigned) {
                  if (__owns.call(bodyUnassigned, k)) {
                    v = bodyUnassigned[k];
                    if (!v) {
                      unassigned[k] = false;
                    }
                  }
                }
              }
              postBranch = state.branch();
              return postBranch;
            },
            19: function (node, scope, state, _p, _p2, unassigned) {
              var bodyBranch, bodyUnassigned, getKey, gObject, index, k, keys, length,
                  postBranch, stepBranch, testBranch, tKey, v;
              if (node.label != null) {
                throw Error("Not implemented: for-in with label in generator");
              }
              tKey = translate(node.key, scope, "leftExpression");
              if (unassigned && node.key instanceof ParserNode.Ident) {
                unassigned[node.key.name] = false;
              }
              gObject = generatorTranslateExpression(node.object, scope, state, false);
              state = gObject.state;
              keys = scope.reserveIdent(getPos(node), "keys", Type.string.array());
              getKey = memoize(function () {
                var key;
                key = tKey();
                if (!(key instanceof ast.Ident)) {
                  throw Error("Expected an Ident for a for-in key");
                }
                scope.addVariable(key, Type.string);
                return key;
              });
              index = scope.reserveIdent(getPos(node), "i", Type.number);
              length = scope.reserveIdent(getPos(node), "len", Type.number);
              scope.addHelper("__allkeys");
              state = state.add(function () {
                return ast.Block(getPos(node), [
                  ast.Assign(getPos(node), keys, ast.Call(
                    getPos(node),
                    ast.Ident(getPos(node), "__allkeys"),
                    [__first(gObject.tNode(), gObject.cleanup())]
                  )),
                  ast.Assign(getPos(node), index, 0),
                  ast.Assign(getPos(node), length, ast.Access(getPos(node), keys, "length"))
                ]);
              });
              state.goto(getPos(node), function () {
                return testBranch;
              });
              testBranch = state.branch();
              testBranch.gotoIf(
                getPos(node),
                function () {
                  return ast.Binary(getPos(node), index, "<", length);
                },
                function () {
                  return bodyBranch;
                },
                function () {
                  return postBranch;
                }
              );
              bodyBranch = testBranch.branch();
              state = bodyBranch.add(function () {
                return ast.Assign(getPos(node), getKey(), ast.Access(getPos(node), keys, index));
              });
              bodyUnassigned = __import({ "\u0000": true }, unassigned);
              generatorTranslate(
                node.body,
                scope,
                state,
                function () {
                  return postBranch;
                },
                function () {
                  return stepBranch;
                },
                bodyUnassigned
              ).goto(getPos(node.body), function () {
                return stepBranch;
              });
              stepBranch = bodyBranch.branch();
              stepBranch.add(function () {
                return ast.Unary(getPos(node), "++", index);
              }).goto(getPos(node), function () {
                return testBranch;
              });
              if (unassigned) {
                for (k in bodyUnassigned) {
                  if (__owns.call(bodyUnassigned, k)) {
                    v = bodyUnassigned[k];
                    if (!v) {
                      unassigned[k] = false;
                    }
                  }
                }
              }
              postBranch = stepBranch.branch();
              return postBranch;
            },
            22: function (node, scope, state, breakState, continueState, unassigned) {
              var k, postBranch, ret, test, tWhenFalse, tWhenTrue, v, whenFalseBranch,
                  whenFalseUnassigned, whenTrueBranch;
              test = generatorTranslateExpression(node.test, scope, state, state.hasGeneratorNode(node.test));
              state = test.state;
              whenFalseUnassigned = unassigned && __import({}, unassigned);
              if (state.hasGeneratorNode(node.whenTrue) || state.hasGeneratorNode(node.whenFalse)) {
                state.gotoIf(
                  getPos(node),
                  function () {
                    var _ref;
                    _ref = test.tNode();
                    test.cleanup();
                    return _ref;
                  },
                  function () {
                    return whenTrueBranch || postBranch;
                  },
                  function () {
                    return whenFalseBranch || postBranch;
                  }
                );
                if (node.whenTrue && !(node.whenTrue instanceof ParserNode.Nothing)) {
                  whenTrueBranch = state.branch();
                }
                if (whenTrueBranch) {
                  generatorTranslate(
                    node.whenTrue,
                    scope,
                    whenTrueBranch,
                    breakState,
                    continueState,
                    unassigned
                  ).goto(getPos(node.whenTrue), function () {
                    return postBranch;
                  });
                }
                if (node.whenFalse && !(node.whenFalse instanceof ParserNode.Nothing)) {
                  whenFalseBranch = state.branch();
                }
                if (whenFalseBranch) {
                  generatorTranslate(
                    node.whenFalse,
                    scope,
                    whenFalseBranch,
                    breakState,
                    continueState,
                    whenFalseUnassigned
                  ).goto(getPos(node.whenFalse), function () {
                    return postBranch;
                  });
                }
                postBranch = state.branch();
                ret = postBranch;
              } else {
                tWhenTrue = translate(node.whenTrue, scope, "statement", unassigned);
                tWhenFalse = translate(node.whenFalse, scope, "statement", whenFalseUnassigned);
                ret = state.add(function () {
                  return ast.If(
                    getPos(node),
                    test.tNode(),
                    (test.cleanup(), tWhenTrue()),
                    tWhenFalse()
                  );
                });
              }
              if (unassigned) {
                for (k in whenFalseUnassigned) {
                  if (__owns.call(whenFalseUnassigned, k)) {
                    v = whenFalseUnassigned[k];
                    if (!v) {
                      unassigned[k] = false;
                    }
                  }
                }
              }
              return ret;
            },
            29: function (node, scope, state, _p, _p2, unassigned) {
              var gNode, mutatedNode;
              mutatedNode = node.node.mutateLast(null, function (n) {
                return ParserNode.Return(n.index, n.scope, n);
              });
              if (mutatedNode.node === node.node) {
                if (node.node.isConst() && node.node.constValue() === void 0) {
                  state["return"](getPos(node));
                  return state;
                } else if (!node.node.isStatement()) {
                  gNode = generatorTranslateExpression(node.node, scope, state, false);
                  state = gNode.state;
                  state["return"](getPos(node), function () {
                    var _ref;
                    _ref = gNode.tNode();
                    gNode.cleanup();
                    return _ref;
                  });
                  return state;
                } else {
                  return generatorTranslate(
                    mutatedNode.node,
                    scope,
                    state,
                    null,
                    null,
                    unassigned
                  );
                }
              } else {
                return generatorTranslate(
                  mutatedNode,
                  scope,
                  state,
                  null,
                  null,
                  unassigned
                );
              }
            },
            33: function (node, scope, state, _p, continueState, unassigned) {
              var _arr, _f, _len, baseUnassigned, bodyStates, currentUnassigned,
                  defaultBranch, defaultCase, gDefaultBody, gNode, i, k, postBranch,
                  resultCases, v;
              if (node.label != null) {
                throw Error("Not implemented: switch with label in generator");
              }
              gNode = generatorTranslateExpression(node.node, scope, state, false);
              bodyStates = [];
              resultCases = [];
              gNode.state.add(function () {
                return ast.Switch(
                  getPos(node),
                  gNode.tNode(),
                  (function () {
                    var _arr, _i, _len, case_;
                    for (_arr = [], _i = 0, _len = resultCases.length; _i < _len; ++_i) {
                      case_ = resultCases[_i];
                      _arr.push(case_());
                    }
                    return _arr;
                  }()),
                  defaultCase()
                );
              });
              gNode.state.add(function () {
                return ast.Break(getPos(node));
              });
              baseUnassigned = unassigned && __import({}, unassigned);
              currentUnassigned = unassigned && __import({}, unassigned);
              for (_arr = __toArray(node.cases), i = 0, _len = _arr.length, _f = function (case_, i) {
                var caseBranch, gCaseBody, k, tCaseNode, tGoto, v;
                if (state.hasGeneratorNode(case_.node)) {
                  throw Error("Cannot use yield in the check of a switch's case");
                }
                tCaseNode = translate(case_.node, scope, "expression", currentUnassigned);
                caseBranch = gNode.state.branch();
                bodyStates[i] = caseBranch;
                gCaseBody = generatorTranslate(
                  case_.body,
                  scope,
                  caseBranch,
                  function () {
                    return postBranch;
                  },
                  continueState,
                  currentUnassigned
                );
                gCaseBody.goto(getPos(case_.node), case_.fallthrough
                  ? function () {
                    return bodyStates[i + 1] || postBranch;
                  }
                  : function () {
                    return postBranch;
                  });
                tGoto = caseBranch.makeGoto(getPos(case_.node), function () {
                  return caseBranch;
                });
                resultCases.push(function () {
                  return ast.Switch.Case(getPos(case_.node), tCaseNode(), ast.Block(getPos(case_.node), [tGoto(), ast.Break(getPos(case_.node))]));
                });
                if (!case_.fallthrough && unassigned) {
                  for (k in currentUnassigned) {
                    if (__owns.call(currentUnassigned, k)) {
                      v = currentUnassigned[k];
                      if (!v) {
                        unassigned[k] = false;
                      }
                    }
                  }
                  return currentUnassigned = __import({}, baseUnassigned);
                }
              }; i < _len; ++i) {
                _f.call(this, _arr[i], i);
              }
              if (node.defaultCase != null) {
                defaultBranch = gNode.state.branch();
                gDefaultBody = generatorTranslate(
                  node.defaultCase,
                  scope,
                  defaultBranch,
                  function () {
                    return postBranch;
                  },
                  continueState,
                  currentUnassigned
                );
                gDefaultBody.goto(getPos(node.defaultCase), function () {
                  return postBranch;
                });
                defaultCase = defaultBranch.makeGoto(getPos(node.defaultCase), function () {
                  return defaultBranch;
                });
              } else {
                defaultCase = gNode.state.makeGoto(getPos(node), function () {
                  return postBranch;
                });
              }
              for (k in currentUnassigned) {
                if (__owns.call(currentUnassigned, k)) {
                  v = currentUnassigned[k];
                  if (!v) {
                    unassigned[k] = false;
                  }
                }
              }
              postBranch = state.branch();
              return postBranch;
            },
            39: function (node, scope, state, breakState, continueState) {
              var gNode;
              gNode = generatorTranslateExpression(node.node, scope, state, false);
              return gNode.state.add(function () {
                return ast.Throw(getPos(node), __first(gNode.tNode(), gNode.cleanup()));
              });
            },
            41: function (node, scope, state, breakState, continueState, unassigned) {
              var _arr, _i, result, tmp;
              result = generatorTranslate(
                node.node,
                scope,
                state,
                breakState,
                continueState,
                unassigned
              );
              for (_arr = __toArray(node.tmps), _i = _arr.length; _i--; ) {
                tmp = _arr[_i];
                scope.releaseTmp(tmp);
              }
              return result;
            },
            42: function (node, scope, state, breakState, continueState, unassigned) {
              var postBranch;
              if (node.label != null) {
                throw Error("Not implemented: try-catch with label in generator");
              }
              state = state.enterTryCatch(getPos(node));
              state = generatorTranslate(
                node.tryBody,
                scope,
                state,
                breakState,
                continueState,
                unassigned
              );
              state = state.exitTryCatch(
                getPos(node.tryBody),
                translate(node.catchIdent, scope, "leftExpression"),
                function () {
                  return postBranch;
                }
              );
              state = generatorTranslate(
                node.catchBody,
                scope,
                state,
                breakState,
                continueState,
                unassigned
              );
              state.goto(getPos(node), function () {
                return postBranch;
              });
              postBranch = state.branch();
              return postBranch;
            },
            43: function (node, scope, state, breakState, continueState, unassigned) {
              var tFinally;
              if (node.label != null) {
                throw Error("Not implemented: try-finally with label in generator");
              }
              if (state.hasGeneratorNode(node.finallyBody)) {
                throw Error("Cannot use yield in a finally");
              }
              state = state.pendingFinally(getPos(node), function () {
                return tFinally();
              });
              state = generatorTranslate(
                node.tryBody,
                scope,
                state,
                breakState,
                continueState,
                unassigned
              );
              tFinally = translate(node.finallyBody, scope, "statement", unassigned);
              return state.runPendingFinally(getPos(node));
            },
            50: function (node, scope, state) {
              var gNode, newState;
              gNode = generatorTranslateExpression(node.node, scope, state, false);
              newState = gNode.state["yield"](getPos(node), function () {
                var _ref;
                _ref = gNode.tNode();
                gNode.cleanup();
                return _ref;
              });
              return newState;
            }
          };
          return function (node, scope, state, breakState, continueState, unassigned) {
            var key, ret;
            if (state.hasGeneratorNode(node)) {
              key = node.typeId;
              if (__owns.call(statements, key)) {
                ret = statements[key](
                  node,
                  scope,
                  state,
                  breakState,
                  continueState,
                  unassigned
                );
                if (!(ret instanceof GeneratorState)) {
                  throw Error("Translated non-GeneratorState from " + __typeof(node) + ": " + __typeof(ret));
                }
                return ret;
              } else {
                ret = generatorTranslateExpression(node, scope, state);
                return ret.state.add(function () {
                  var _ref;
                  _ref = ret.tNode();
                  ret.cleanup();
                  return _ref;
                });
              }
            } else {
              return state.add(translate(node, scope, "statement", unassigned));
            }
          };
        }());
        function arrayTranslate(pos, elements, scope, replaceWithSlice, allowArrayLike, unassigned) {
          var _arr, _f, _i, _len, current, element, i, translatedItems;
          translatedItems = [];
          current = [];
          translatedItems.push(current);
          for (_arr = __toArray(flattenSpreadArray(elements)), _i = 0, _len = _arr.length; _i < _len; ++_i) {
            element = _arr[_i];
            if (element instanceof ParserNode.Spread) {
              translatedItems.push({
                tNode: translate(element.node, scope, "expression", unassigned),
                type: element.node.type()
              });
              current = [];
              translatedItems.push(current);
            } else {
              current.push(translate(element, scope, "expression", unassigned));
            }
          }
          if (translatedItems.length === 1) {
            return function () {
              return ast.Arr(pos, (function () {
                var _arr, _arr2, _i, _len, tItem;
                for (_arr = [], _arr2 = __toArray(translatedItems[0]), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                  tItem = _arr2[_i];
                  _arr.push(tItem());
                }
                return _arr;
              }()));
            };
          } else {
            for (i = translatedItems.length, _f = function (translatedItem, i) {
              if (i % 2 === 0) {
                if (translatedItem.length > 0) {
                  return translatedItems[i] = function () {
                    var _arr, _arr2, _i, _len, items, tItem;
                    for (_arr = [], _arr2 = __toArray(translatedItem), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                      tItem = _arr2[_i];
                      _arr.push(tItem());
                    }
                    items = _arr;
                    return ast.Arr(items[0].pos, items);
                  };
                } else {
                  return translatedItems.splice(i, 1);
                }
              } else {
                return translatedItems[i] = function () {
                  var node;
                  node = translatedItem.tNode();
                  if (translatedItem.type.isSubsetOf(Type.array)) {
                    return node;
                  } else {
                    scope.addHelper("__toArray");
                    return ast.Call(
                      node.pos,
                      ast.Ident(node.pos, "__toArray"),
                      [node]
                    );
                  }
                };
              }
            }; i--; ) {
              _f.call(this, translatedItems[i], i);
            }
            if (translatedItems.length === 1) {
              return function () {
                var array;
                array = translatedItems[0]();
                if (replaceWithSlice && array instanceof ast.Call && array.func instanceof ast.Ident && array.func.name === "__toArray") {
                  return ast.Call(
                    pos,
                    ast.Access(
                      pos,
                      ast.Ident(pos, "__slice"),
                      "call"
                    ),
                    array.args
                  );
                } else if (allowArrayLike && array instanceof ast.Call && array.func instanceof ast.Ident && array.func.name === "__toArray" && array.args[0] instanceof ast.Arguments) {
                  return array.args[0];
                } else {
                  return array;
                }
              };
            } else {
              return function () {
                var _arr, _i, _len, head, item, rest;
                head = translatedItems[0]();
                for (_arr = [], _i = 1, _len = translatedItems.length; _i < _len; ++_i) {
                  item = translatedItems[_i];
                  _arr.push(item());
                }
                rest = _arr;
                return ast.Call(
                  pos,
                  ast.Access(pos, head, "concat"),
                  rest
                );
              };
            }
          }
        }
        translators = {
          1: function (node, scope, location, unassigned) {
            var tChild, tParent;
            tParent = translate(node.parent, scope, "expression", unassigned);
            tChild = translate(node.child, scope, "expression", unassigned);
            return function () {
              return ast.Access(getPos(node), tParent(), tChild());
            };
          },
          3: function (node, scope, location) {
            return function () {
              return ast.Arguments(getPos(node));
            };
          },
          4: function (node, scope, location, unassigned) {
            var tArr;
            tArr = arrayTranslate(
              getPos(node),
              node.elements,
              scope,
              true,
              unassigned
            );
            return function () {
              return tArr();
            };
          },
          5: function (node, scope, location, unassigned) {
            var op, tLeft, tRight;
            op = node.op;
            tLeft = translate(node.left, scope, "leftExpression");
            tRight = translate(node.right, scope, "expression", unassigned);
            if (unassigned && node.left instanceof ParserNode.Ident) {
              if (op === "=" && unassigned[node.left.name] && !unassigned["\u0000"] && node.right.isConst() && node.right.constValue() === void 0) {
                return function () {
                  return ast.Noop(getPos(node));
                };
              }
              unassigned[node.left.name] = false;
            }
            return function () {
              var left, right;
              left = tLeft();
              right = tRight();
              if (op === "=" && location === "topStatement" && left instanceof ast.Ident && right instanceof ast.Func && right.name == null && scope.hasOwnVariable(left) && !scope.isVariableMutable(left)) {
                scope.markAsFunction(left);
                return ast.Func(
                  getPos(node),
                  left,
                  right.params,
                  right.variables,
                  right.body,
                  right.declarations
                );
              } else {
                return ast.Binary(getPos(node), left, op, right);
              }
            };
          },
          6: function (node, scope, location, unassigned) {
            var tLeft, tRight;
            tLeft = translate(node.left, scope, "expression", unassigned);
            tRight = translate(node.right, scope, "expression", unassigned);
            return function () {
              return ast.Binary(getPos(node), tLeft(), node.op, tRight());
            };
          },
          7: function (node, scope, location, unassigned) {
            var _arr, _arr2, i, len, subnode, tLabel, tNodes;
            tLabel = node.label && translate(node.label, scope, "label");
            for (_arr = [], _arr2 = __toArray(node.nodes), i = 0, len = _arr2.length; i < len; ++i) {
              subnode = _arr2[i];
              _arr.push(translate(subnode, scope, location, unassigned));
            }
            tNodes = _arr;
            return function () {
              return ast.Block(
                getPos(node),
                (function () {
                  var _arr, _i, _len, tNode;
                  for (_arr = [], _i = 0, _len = tNodes.length; _i < _len; ++_i) {
                    tNode = tNodes[_i];
                    _arr.push(tNode());
                  }
                  return _arr;
                }()),
                typeof tLabel === "function" ? tLabel() : void 0
              );
            };
          },
          8: function (node, scope) {
            var tLabel;
            tLabel = node.label && translate(node.label, scope, "label");
            return function () {
              return ast.Break(getPos(node), typeof tLabel === "function" ? tLabel() : void 0);
            };
          },
          9: function (node, scope, location, unassigned) {
            var args, isApply, isNew, tArgArray, tFunc, tStart;
            tFunc = translate(node.func, scope, "expression", unassigned);
            isApply = node.isApply;
            isNew = node.isNew;
            args = node.args;
            if (isApply && (args.length === 0 || !(args[0] instanceof ParserNode.Spread))) {
              if (args.length === 0) {
                tStart = function () {
                  return ast.Const(getPos(node), void 0);
                };
              } else {
                tStart = translate(args[0], scope, "expression", unassigned);
              }
              tArgArray = arrayTranslate(
                getPos(node),
                __slice.call(args, 1),
                scope,
                false,
                true,
                unassigned
              );
              return function () {
                var argArray, func, start;
                func = tFunc();
                start = tStart();
                argArray = tArgArray();
                if (argArray instanceof ast.Arr) {
                  return ast.Call(
                    getPos(node),
                    ast.Access(getPos(node), func, "call"),
                    [start].concat(__toArray(argArray.elements))
                  );
                } else {
                  return ast.Call(
                    getPos(node),
                    ast.Access(getPos(node), func, "apply"),
                    [start, argArray]
                  );
                }
              };
            } else {
              tArgArray = arrayTranslate(
                getPos(node),
                args,
                scope,
                false,
                true,
                unassigned
              );
              return function () {
                var _once, _once2, argArray, func;
                func = tFunc();
                argArray = tArgArray();
                if (isApply) {
                  return scope.maybeCache(argArray, Type.array, (_once = false, function (setArray, array) {
                    if (_once) {
                      throw Error("Attempted to call function more than once");
                    } else {
                      _once = true;
                    }
                    scope.addHelper("__slice");
                    return ast.Call(
                      getPos(node),
                      ast.Access(getPos(node), func, "apply"),
                      [
                        ast.Access(getPos(node), setArray, 0),
                        ast.Call(
                          getPos(node),
                          ast.Access(
                            getPos(node),
                            ast.Ident(getPos(node), "__slice"),
                            "call"
                          ),
                          [
                            array,
                            ast.Const(getPos(node), 1)
                          ]
                        )
                      ]
                    );
                  }));
                } else if (argArray instanceof ast.Arr) {
                  return ast.Call(getPos(node), func, argArray.elements, isNew);
                } else if (isNew) {
                  scope.addHelper("__new");
                  return ast.Call(
                    getPos(node),
                    ast.Access(
                      getPos(node),
                      ast.Ident(getPos(node), "__new"),
                      ast.Const(getPos(node), "apply")
                    ),
                    [func, argArray]
                  );
                } else if (func instanceof ast.Binary && func.op === ".") {
                  return scope.maybeCache(func.left, Type["function"], (_once2 = false, function (setParent, parent) {
                    if (_once2) {
                      throw Error("Attempted to call function more than once");
                    } else {
                      _once2 = true;
                    }
                    return ast.Call(
                      getPos(node),
                      ast.Access(getPos(node), setParent, func.right, "apply"),
                      [parent, argArray]
                    );
                  }));
                } else {
                  return ast.Call(
                    getPos(node),
                    ast.Access(getPos(node), func, "apply"),
                    [
                      ast.Const(getPos(node), void 0),
                      argArray
                    ]
                  );
                }
              };
            }
          },
          11: function (node, scope, location) {
            return function () {
              return ast.Comment(getPos(node), node.text);
            };
          },
          12: function (node, scope, location) {
            return function () {
              return ast.Const(getPos(node), node.value);
            };
          },
          13: function (node, scope) {
            var tLabel;
            tLabel = node.label && translate(node.label, scope, "label");
            return function () {
              return ast.Continue(getPos(node), typeof tLabel === "function" ? tLabel() : void 0);
            };
          },
          14: function (node) {
            return function () {
              return ast.Debugger(getPos(node));
            };
          },
          15: function (node, scope, location) {
            throw Error("Cannot have a stray def");
          },
          16: function (node, scope, location, unassigned) {
            var tText;
            tText = translate(node.text, scope, "expression", unassigned);
            return function () {
              return ast.Call(
                getPos(node),
                ast.Ident(getPos(node), "write"),
                [tText()].concat(node.escape
                  ? [ast.Const(getPos(node), true)]
                  : [])
              );
            };
          },
          17: function (node, scope, location, unassigned) {
            var tCode;
            tCode = translate(node.code, scope, "expression", unassigned);
            return function () {
              return ast.Eval(getPos(node), tCode());
            };
          },
          18: function (node, scope, location, unassigned) {
            var bodyUnassigned, tBody, tInit, tLabel, tStep, tTest;
            tLabel = node.label && translate(node.label, scope, "label");
            if (node.init != null) {
              tInit = translate(node.init, scope, "expression", unassigned);
            }
            bodyUnassigned = unassigned && { "\u0000": true };
            if (node.test != null) {
              tTest = translate(node.test, scope, "expression", bodyUnassigned);
            }
            tBody = translate(node.body, scope, "statement", bodyUnassigned);
            if (node.step != null) {
              tStep = translate(node.step, scope, "expression", bodyUnassigned);
            }
            if (unassigned) {
              __import(unassigned, bodyUnassigned);
            }
            return function () {
              return ast.For(
                getPos(node),
                typeof tInit === "function" ? tInit() : void 0,
                typeof tTest === "function" ? tTest() : void 0,
                typeof tStep === "function" ? tStep() : void 0,
                tBody(),
                typeof tLabel === "function" ? tLabel() : void 0
              );
            };
          },
          19: function (node, scope, location, unassigned) {
            var bodyUnassigned, tBody, tKey, tLabel, tObject;
            tLabel = node.label && translate(node.label, scope, "label");
            tKey = translate(node.key, scope, "leftExpression");
            if (unassigned && node.key instanceof ParserNode.Ident) {
              unassigned[node.key.name] = false;
            }
            tObject = translate(node.object, scope, "expression", unassigned);
            bodyUnassigned = unassigned && { "\u0000": true };
            tBody = translate(node.body, scope, "statement", bodyUnassigned);
            if (unassigned) {
              __import(unassigned, bodyUnassigned);
            }
            return function () {
              var key;
              key = tKey();
              if (!(key instanceof ast.Ident)) {
                throw Error("Expected an Ident for a for-in key");
              }
              scope.addVariable(key, Type.string);
              return ast.ForIn(
                getPos(node),
                key,
                tObject(),
                tBody(),
                typeof tLabel === "function" ? tLabel() : void 0
              );
            };
          },
          20: (function () {
            var primitiveTypes, translateParamTypes, translateType,
                translateTypeChecks;
            primitiveTypes = { Boolean: "boolean", String: "string", Number: "number", Function: "function" };
            translateTypeChecks = {
              21: function (node) {
                if (__owns.call(primitiveTypes, node.name)) {
                  return Type[primitiveTypes[node.name]];
                } else {
                  return Type.any;
                }
              },
              1: function (node) {
                return Type.any;
              },
              47: function (node) {
                var _arr, _i, _len, result, type;
                result = Type.none;
                for (_arr = __toArray(node.types), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                  type = _arr[_i];
                  if (type instanceof ParserNode.Const) {
                    if (type.value === null) {
                      result = result.union(Type["null"]);
                    } else if (type.value === void 0) {
                      result = result.union(Type["undefined"]);
                    } else {
                      throw Error("Unknown const value for typechecking: " + String(type.value));
                    }
                  } else if (type instanceof ParserNode.Ident) {
                    result = result.union(__owns.call(primitiveTypes, type.name) ? Type[primitiveTypes[type.name]] : Type.any);
                  } else {
                    throw Error("Not implemented: typechecking for non-idents/consts within a type-union");
                  }
                }
                return result;
              },
              44: function (node) {
                return Type["function"];
              },
              45: function (node) {
                if (node.basetype.name === "Array") {
                  return translateTypeCheck(node.args[0]).array();
                } else if (node.basetype.name === "Function") {
                  return Type["function"];
                } else {
                  return Type.any;
                }
              },
              46: function (node) {
                var _arr, _i, _len, _ref, key, typeData, value;
                typeData = {};
                for (_arr = __toArray(node.pairs), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                  _ref = _arr[_i];
                  key = _ref.key;
                  value = _ref.value;
                  if (key instanceof ParserNode.Const) {
                    typeData[key.value] = translateTypeCheck(value);
                  }
                }
                return Type.makeObject(typeData);
              }
            };
            function translateTypeCheck(node) {
              if (!__owns.call(translateTypeChecks, node.typeId)) {
                throw Error("Unknown type: " + String(__typeof(node)));
              }
              return translateTypeChecks[node.typeId](node);
            }
            translateParamTypes = {
              27: function (param, scope, inner) {
                var ident, laterInit, tmp, type;
                ident = translate(param.ident, scope, "param")();
                laterInit = [];
                if (ident instanceof ast.Binary && ident.op === "." && ident.right instanceof ast.Const && typeof ident.right.value === "string") {
                  tmp = ast.Ident(ident.pos, ident.right.value);
                  laterInit.push(ast.Binary(ident.pos, ident, "=", tmp));
                  ident = tmp;
                }
                if (!(ident instanceof ast.Ident)) {
                  throw Error("Expecting param to be an Ident, got " + __typeof(ident));
                }
                if (param.asType) {
                  type = translateTypeCheck(param.asType);
                }
                scope.addVariable(ident, type, param.isMutable);
                scope.markAsParam(ident);
                return { init: laterInit, ident: ident, spread: !!param.spread };
              }
            };
            function translateParam(param, scope, inner) {
              var type;
              type = param.typeId;
              if (!__owns.call(translateParamTypes, type)) {
                throw Error("Unknown parameter type: " + __typeof(param));
              }
              return translateParamTypes[type](param, scope, inner);
            }
            translateType = (function () {
              var translateTypes;
              translateTypes = {
                21: (function () {
                  var primordialTypes;
                  primordialTypes = {
                    String: Type.string,
                    Number: Type.number,
                    Boolean: Type.boolean,
                    Function: Type["function"],
                    Array: Type.array
                  };
                  return function (node, scope) {
                    if (!__owns.call(primordialTypes, node.name)) {
                      throw Error("Not implemented: custom type " + node.name);
                    }
                    return primordialTypes[node.name];
                  };
                }()),
                12: function (node, scope) {
                  switch (node.value) {
                  case null: return Type["null"];
                  case void 0: return Type["undefined"];
                  default: throw Error("Unexpected const type: " + String(node.value));
                  }
                },
                45: function (node, scope) {
                  var _arr, _arr2, _i, _len, arg, args, base;
                  base = translateType(node.basetype, scope);
                  for (_arr = [], _arr2 = __toArray(node.args), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                    arg = _arr2[_i];
                    _arr.push(translateType(arg, scope));
                  }
                  args = _arr;
                  return Type.generic.apply(Type, [base].concat(__toArray(args)));
                },
                47: function (node, scope) {
                  var _arr, _i, _len, current, type;
                  current = Type.none;
                  for (_arr = __toArray(node.types), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                    type = _arr[_i];
                    current = current.union(translateType(type));
                  }
                  return current;
                }
              };
              return function (node, scope) {
                if (!__owns.call(translateTypes, node.typeId)) {
                  throw Error("Unknown type to translate: " + __typeof(node));
                }
                return translateTypes[node.typeId](node, scope);
              };
            }());
            return function (node, scope, location) {
              return function () {
                var _arr, _ref, body, fakeThis, i, initializers, innerScope, len, p,
                    param, paramIdents, realInnerScope, unassigned, wrap;
                innerScope = scope.clone(!!node.bound);
                realInnerScope = innerScope;
                if (node.generator && !innerScope.bound) {
                  innerScope = innerScope.clone(true);
                }
                paramIdents = [];
                initializers = [];
                for (_arr = __toArray(node.params), i = 0, len = _arr.length; i < len; ++i) {
                  p = _arr[i];
                  param = translateParam(p, innerScope, false);
                  if (param.spread) {
                    throw Error("Encountered a spread parameter");
                  }
                  paramIdents.push(param.ident);
                  initializers.push.apply(initializers, __toArray(param.init));
                }
                unassigned = {};
                _ref = translateFunctionBody(
                  getPos(node),
                  node.generator,
                  innerScope,
                  node.autoReturn ? ParserNode.Return(node.body.index, node.body.scope, node.body) : node.body,
                  unassigned
                );
                body = _ref.body;
                wrap = _ref.wrap;
                innerScope.releaseTmps();
                body = ast.Block(getPos(node.body), __toArray(initializers).concat([body]));
                if (innerScope.usedThis || node.bound instanceof ParserNode) {
                  if (node.bound instanceof ParserNode) {
                    fakeThis = ast.Ident(getPos(node.body), "_this");
                    innerScope.addVariable(fakeThis);
                    body = ast.Block(getPos(node.body), [
                      ast.Assign(getPos(node.body), fakeThis, translate(node.bound, scope, "expression", unassigned)()),
                      body,
                      ast.Return(getPos(node.body), fakeThis)
                    ]);
                  } else {
                    if (innerScope.bound) {
                      scope.usedThis = true;
                    }
                    if ((innerScope.hasBound || node.generator) && !realInnerScope.bound) {
                      fakeThis = ast.Ident(getPos(node.body), "_this");
                      innerScope.addVariable(fakeThis);
                      body = ast.Block(getPos(node.body), [
                        ast.Assign(getPos(node.body), fakeThis, ast.This(getPos(node.body))),
                        body
                      ]);
                    }
                  }
                }
                if (node.curry) {
                  throw Error("Expected node to already be curried");
                }
                return wrap(ast.Func(
                  getPos(node),
                  null,
                  paramIdents,
                  innerScope.getVariables(),
                  body,
                  []
                ));
              };
            };
          }()),
          21: function (node, scope, location) {
            var name;
            name = node.name;
            scope.addHelper(name);
            return function () {
              var ident;
              ident = ast.Ident(getPos(node), name);
              if (!scope.options.embedded || isPrimordial(name) || location !== "expression" || scope.hasVariable(ident) || scope.macros.hasHelper(name)) {
                return ident;
              } else {
                return ast.Access(
                  getPos(node),
                  ast.Ident(getPos(node), "context"),
                  ast.Const(getPos(node), name)
                );
              }
            };
          },
          22: function (node, scope, location, unassigned) {
            var innerLocation, k, tLabel, tTest, tWhenFalse, tWhenTrue, v,
                whenFalseUnassigned;
            if (location === "statement" || location === "topStatement") {
              innerLocation = "statement";
            } else {
              innerLocation = location;
            }
            tLabel = node.label && translate(node.label, scope, "label");
            tTest = translate(node.test, scope, "expression", unassigned);
            whenFalseUnassigned = unassigned && __import({}, unassigned);
            tWhenTrue = translate(node.whenTrue, scope, innerLocation, unassigned);
            if (node.whenFalse != null) {
              tWhenFalse = translate(node.whenFalse, scope, innerLocation, whenFalseUnassigned);
            }
            if (unassigned) {
              for (k in whenFalseUnassigned) {
                if (__owns.call(whenFalseUnassigned, k)) {
                  v = whenFalseUnassigned[k];
                  if (!v) {
                    unassigned[k] = false;
                  }
                }
              }
            }
            return function () {
              return ast.If(
                getPos(node),
                tTest(),
                tWhenTrue(),
                typeof tWhenFalse === "function" ? tWhenFalse() : void 0,
                typeof tLabel === "function" ? tLabel() : void 0
              );
            };
          },
          25: function (node) {
            return function () {
              return ast.Noop(getPos(node));
            };
          },
          26: function (node, scope, location, unassigned) {
            var _arr, _i, _len, pair, properties, tKeys, tPrototype, tValues;
            tKeys = [];
            tValues = [];
            properties = [];
            for (_arr = __toArray(node.pairs), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              pair = _arr[_i];
              tKeys.push(translate(pair.key, scope, "expression", unassigned));
              tValues.push(translate(pair.value, scope, "expression", unassigned));
              properties.push(pair.property);
            }
            if (node.prototype != null) {
              tPrototype = translate(node.prototype, scope, "expression", unassigned);
            } else {
              tPrototype = void 0;
            }
            return function () {
              var _len, constPairs, currentPair, currentPairs, i, ident, key,
                  lastProperty, obj, postConstPairs, property, prototype, result,
                  tKey, tValue, value;
              constPairs = [];
              postConstPairs = [];
              if (typeof tPrototype === "function") {
                prototype = tPrototype();
              }
              if (prototype != null) {
                currentPairs = postConstPairs;
              } else {
                currentPairs = constPairs;
              }
              lastProperty = null;
              for (i = 0, _len = tKeys.length; i < _len; ++i) {
                tKey = tKeys[i];
                tValue = tValues[i];
                key = tKey();
                value = tValue();
                property = properties[i];
                if (!(key instanceof ast.Const) || property) {
                  currentPairs = postConstPairs;
                }
                currentPair = currentPairs[currentPairs.length - 1];
                if ((property === "get" || property === "set") && lastProperty && property !== lastProperty && key instanceof ast.Const && currentPair.key instanceof ast.Const && key.value === currentPair.key.value) {
                  currentPair[lastProperty] = currentPair.value;
                  currentPair.property = "" + lastProperty + property;
                  delete currentPair.value;
                  currentPair[property] = value;
                  lastProperty = null;
                } else {
                  currentPairs.push({ key: key, value: value, property: property });
                  if (property === "get" || property === "set") {
                    lastProperty = property;
                  }
                }
              }
              if (prototype != null) {
                scope.addHelper("__create");
                obj = ast.Call(
                  getPos(node),
                  ast.Ident(getPos(node), "__create"),
                  [prototype]
                );
              } else {
                obj = ast.Obj(getPos(node), (function () {
                  var _arr, _i, _len, _ref, key, value;
                  for (_arr = [], _i = 0, _len = constPairs.length; _i < _len; ++_i) {
                    _ref = constPairs[_i];
                    key = _ref.key;
                    value = _ref.value;
                    _arr.push(ast.Obj.Pair(key.pos, String(key.value), value));
                  }
                  return _arr;
                }()));
              }
              if (postConstPairs.length === 0) {
                return obj;
              } else {
                ident = scope.reserveIdent(getPos(node), "o", Type.object);
                result = ast.BlockExpression(getPos(node), [ast.Assign(getPos(node), ident, obj)].concat(
                  (function () {
                    var _arr, _i, _len, key, pair, property;
                    for (_arr = [], _i = 0, _len = postConstPairs.length; _i < _len; ++_i) {
                      pair = postConstPairs[_i];
                      key = pair.key;
                      property = pair.property;
                      if (property) {
                        scope.addHelper("__defProp");
                        _arr.push(ast.Call(
                          key.pos,
                          ast.Ident(key.pos, "__defProp"),
                          [
                            ident,
                            key,
                            property === "property" ? pair.value
                              : property === "getset"
                              ? ast.Obj(pair.get.pos, [
                                ast.Obj.Pair(pair.get.pos, "get", pair.get),
                                ast.Obj.Pair(pair.set.pos, "set", pair.set),
                                ast.Obj.Pair(pair.set.pos, "configurable", ast.Const(pair.set.pos, true)),
                                ast.Obj.Pair(pair.set.pos, "enumerable", ast.Const(pair.set.pos, true))
                              ])
                              : property === "setget"
                              ? ast.Obj(pair.set.pos, [
                                ast.Obj.Pair(pair.set.pos, "set", pair.set),
                                ast.Obj.Pair(pair.get.pos, "get", pair.get),
                                ast.Obj.Pair(pair.get.pos, "configurable", ast.Const(pair.get.pos, true)),
                                ast.Obj.Pair(pair.get.pos, "enumerable", ast.Const(pair.get.pos, true))
                              ])
                              : property === "get"
                              ? ast.Obj(pair.value.pos, [
                                ast.Obj.Pair(pair.value.pos, "get", pair.value),
                                ast.Obj.Pair(pair.value.pos, "configurable", ast.Const(pair.value.pos, true)),
                                ast.Obj.Pair(pair.value.pos, "enumerable", ast.Const(pair.value.pos, true))
                              ])
                              : property === "set"
                              ? ast.Obj(pair.value.pos, [
                                ast.Obj.Pair(pair.value.pos, "set", pair.value),
                                ast.Obj.Pair(pair.value.pos, "configurable", ast.Const(pair.value.pos, true)),
                                ast.Obj.Pair(pair.value.pos, "enumerable", ast.Const(pair.value.pos, true))
                              ])
                              : __throw(Error("Unknown property type: " + String(property)))
                          ]
                        ));
                      } else {
                        _arr.push(ast.Assign(
                          key.pos,
                          ast.Access(key.pos, ident, key),
                          pair.value
                        ));
                      }
                    }
                    return _arr;
                  }()),
                  [ident]
                ));
                scope.releaseIdent(ident);
                return result;
              }
            };
          },
          28: function (node, scope, location, unassigned) {
            var tSource;
            tSource = translate(node.source, scope, "expression", unassigned);
            return function () {
              var flags, source;
              source = tSource();
              flags = node.flags;
              if (source.isConst()) {
                return ast.Regex(getPos(node), String(source.constValue()), flags);
              } else {
                return ast.Call(
                  getPos(node),
                  ast.Ident(getPos(node), "RegExp"),
                  [
                    source,
                    ast.Const(getPos(node), flags)
                  ]
                );
              }
            };
          },
          29: function (node, scope, location, unassigned) {
            var mutatedNode, tValue;
            if (location !== "statement" && location !== "topStatement") {
              throw Error("Expected Return in statement position");
            }
            mutatedNode = node.node.mutateLast(null, function (n) {
              return ParserNode.Return(n.index, n.scope, n);
            });
            if (mutatedNode.node === node.node) {
              tValue = translate(node.node, scope, "expression", unassigned);
              if (node.node.isStatement()) {
                return tValue;
              } else {
                return function () {
                  return ast.Return(getPos(node), tValue());
                };
              }
            } else {
              return translate(mutatedNode, scope, location, unassigned);
            }
          },
          33: function (node, scope, location, unassigned) {
            var _arr, _arr2, _i, _len, baseUnassigned, case_, currentUnassigned, k,
                newCase, tCases, tDefaultCase, tLabel, tNode, v;
            tLabel = node.label && translate(node.label, scope, "label");
            tNode = translate(node.node, scope, "expression", unassigned);
            baseUnassigned = unassigned && __import({}, unassigned);
            currentUnassigned = unassigned && __import({}, baseUnassigned);
            for (_arr = [], _arr2 = __toArray(node.cases), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
              case_ = _arr2[_i];
              newCase = {
                pos: getPos(case_.node),
                tNode: translate(case_.node, scope, "expression", currentUnassigned),
                tBody: translate(case_.body, scope, "statement", currentUnassigned),
                fallthrough: case_.fallthrough
              };
              if (!case_.fallthrough && unassigned) {
                for (k in currentUnassigned) {
                  if (__owns.call(currentUnassigned, k)) {
                    v = currentUnassigned[k];
                    if (!v) {
                      unassigned[k] = false;
                    }
                  }
                }
                currentUnassigned = __import({}, baseUnassigned);
              }
              _arr.push(newCase);
            }
            tCases = _arr;
            if (node.defaultCase != null) {
              tDefaultCase = translate(node.defaultCase, scope, "statement", currentUnassigned);
            } else {
              tDefaultCase = void 0;
            }
            for (k in currentUnassigned) {
              if (__owns.call(currentUnassigned, k)) {
                v = currentUnassigned[k];
                if (!v) {
                  unassigned[k] = false;
                }
              }
            }
            return function () {
              return ast.Switch(
                getPos(node),
                tNode(),
                (function () {
                  var _arr, case_, caseBody, caseNode, i, len;
                  for (_arr = [], i = 0, len = tCases.length; i < len; ++i) {
                    case_ = tCases[i];
                    caseNode = case_.tNode();
                    caseBody = case_.tBody();
                    if (!case_.fallthrough || i === len - 1 && defaultCase.isNoop()) {
                      caseBody = ast.Block(case_.pos, [caseBody, ast.Break(caseBody.pos)]);
                    }
                    _arr.push(ast.Switch.Case(case_.pos, caseNode, caseBody));
                  }
                  return _arr;
                }()),
                tDefaultCase != null ? tDefaultCase() : ast.Noop(getPos(node)),
                typeof tLabel === "function" ? tLabel() : void 0
              );
            };
          },
          32: function (node, scope, location) {
            throw Error("Cannot have a stray super call");
          },
          40: function (node, scope, location) {
            var ident;
            ident = scope.getTmp(getPos(node), node.id, node.name, node.type());
            return function () {
              return ident;
            };
          },
          41: function (node, scope, location, unassigned) {
            var _arr, _i, tmp, tResult;
            tResult = translate(node.node, scope, location, unassigned);
            for (_arr = __toArray(node.tmps), _i = _arr.length; _i--; ) {
              tmp = _arr[_i];
              scope.releaseTmp(tmp);
            }
            return tResult;
          },
          38: function (node, scope, location) {
            return function () {
              scope.usedThis = true;
              if (scope.bound) {
                return ast.Ident(getPos(node), "_this");
              } else {
                return ast.This(getPos(node));
              }
            };
          },
          39: function (node, scope, location, unassigned) {
            var tNode;
            tNode = translate(node.node, scope, "expression", unassigned);
            return function () {
              return ast.Throw(getPos(node), tNode());
            };
          },
          42: function (node, scope, location, unassigned) {
            var innerScope, tCatchBody, tCatchIdent, tLabel, tTryBody;
            tLabel = node.label && translate(node.label, scope, "label");
            tTryBody = translate(node.tryBody, scope, "statement", unassigned);
            innerScope = scope.clone(false);
            tCatchIdent = translate(node.catchIdent, innerScope, "leftExpression");
            tCatchBody = translate(node.catchBody, innerScope, "statement", unassigned);
            return function () {
              var catchIdent, result;
              catchIdent = tCatchIdent();
              if (catchIdent instanceof ast.Ident) {
                innerScope.addVariable(catchIdent);
                innerScope.markAsParam(catchIdent);
              }
              result = ast.TryCatch(
                getPos(node),
                tTryBody(),
                catchIdent,
                tCatchBody(),
                typeof tLabel === "function" ? tLabel() : void 0
              );
              __import(scope.variables, innerScope.variables);
              return result;
            };
          },
          43: function (node, scope, location, unassigned) {
            var tFinallyBody, tLabel, tTryBody;
            tLabel = node.label && translate(node.label, scope, "label");
            tTryBody = translate(node.tryBody, scope, "statement", unassigned);
            tFinallyBody = translate(node.finallyBody, scope, "statement", unassigned);
            return function () {
              return ast.TryFinally(getPos(node), tTryBody(), tFinallyBody(), typeof tLabel === "function" ? tLabel() : void 0);
            };
          },
          48: function (node, scope, location, unassigned) {
            var _ref, tSubnode;
            if (unassigned && ((_ref = node.op) === "++" || _ref === "--" || _ref === "++post" || _ref === "--post") && node.node instanceof ParserNode.Ident) {
              unassigned[node.node.name] = false;
            }
            tSubnode = translate(node.node, scope, "expression", unassigned);
            return function () {
              return ast.Unary(getPos(node), node.op, tSubnode());
            };
          },
          49: function (node, scope, location, unassigned) {
            var tIdent;
            if (unassigned && !unassigned["\u0000"] && node.ident instanceof ParserNode.Ident && !__owns.call(unassigned, node.ident.name)) {
              unassigned[node.ident.name] = true;
            }
            tIdent = translate(node.ident, scope, "leftExpression");
            return function () {
              var ident;
              ident = tIdent();
              scope.addVariable(ident, Type.any, node.isMutable);
              return ast.Noop(getPos(node));
            };
          }
        };
        function translate(node, scope, location, unassigned) {
          var ret;
          if (!__owns.call(translators, node.typeId)) {
            throw Error("Unable to translate unknown node type: " + __typeof(node));
          }
          ret = translators[node.typeId](node, scope, location, unassigned);
          if (typeof ret !== "function") {
            throw Error("Translated non-function: " + __typeof(ret));
          }
          return ret;
        }
        function translateFunctionBody(pos, isGenerator, scope, body, unassigned) {
          var _ref, builder, hasGeneratorNode, isSimpleGenerator, translatedBody;
          if (unassigned == null) {
            unassigned = {};
          }
          isSimpleGenerator = false;
          if (isGenerator) {
            hasGeneratorNode = makeHasGeneratorNode();
            isSimpleGenerator = !hasGeneratorNode(body, true);
            if (!isSimpleGenerator) {
              builder = GeneratorBuilder(pos, scope, hasGeneratorNode);
              generatorTranslate(
                body,
                scope,
                builder.start,
                null,
                null,
                unassigned
              ).goto(pos, function () {
                return builder.stop;
              });
              translatedBody = builder.create();
              if (pos.file) {
                if (!(_ref = translatedBody.pos).file) {
                  _ref.file = pos.file;
                }
              }
              return {
                wrap: function (x) {
                  return x;
                },
                body: translatedBody
              };
            }
          }
          translatedBody = translate(body, scope, "topStatement", unassigned)();
          if (pos.file) {
            if (!(_ref = translatedBody.pos).file) {
              _ref.file = pos.file;
            }
          }
          return {
            wrap: isSimpleGenerator
              ? (scope.addHelper("__generator"), function (x) {
                return ast.Call(
                  pos,
                  ast.Ident(pos, "__generator"),
                  [x]
                );
              })
              : function (x) {
                return x;
              },
            body: translatedBody
          };
        }
        function makeGetPos(getPosition) {
          return function (node) {
            var pos;
            pos = getPosition(node.index);
            return makePos(pos.line, pos.column, node.file);
          };
        }
        function propagateFilenames(node) {
          var file;
          file = node.pos.file;
          if (file) {
            return node.walk(function (subnode) {
              var _ref;
              if (!(_ref = subnode.pos).file) {
                _ref.file = file;
              }
              return propagateFilenames(subnode);
            });
          } else {
            return node.walk(propagateFilenames);
          }
        }
        function translateRoot(roots, scope, getPosition) {
          var _arr, _i, _len, _ref, bareInit, body, callFunc, comments, fakeThis,
              helper, ident, init, name, noPos, uncommentedBody, walker, wrap;
          if (!__isArray(roots)) {
            roots = [roots];
          }
          if (!__isArray(getPosition)) {
            getPosition = [getPosition];
          }
          if (roots.length === 0) {
            roots.push({
              type: "Root",
              line: 0,
              column: 0,
              body: { type: "Nothing", line: 0, column: 0 }
            });
          }
          function splitComments(body) {
            var comments;
            comments = [];
            while (true) {
              if (body instanceof ast.Comment) {
                comments.push(body);
                body = ast.Noop(body.pos);
              } else if (body instanceof ast.Block && body.body[0] instanceof ast.Comment) {
                comments.push(body.body[0]);
                body = ast.Block(body.pos, __slice.call(body.body, 1));
              } else {
                break;
              }
            }
            return { comments: comments, body: body };
          }
          noPos = makePos(0, 0);
          if (scope.options.embedded) {
            for (_arr = ["write", "context"], _i = 0, _len = _arr.length; _i < _len; ++_i) {
              name = _arr[_i];
              ident = ast.Ident(
                { line: 0, column: 0 },
                name
              );
              scope.addVariable(ident);
              scope.markAsParam(ident);
            }
          }
          _ref = roots.length === 1
            ? (function () {
              var _ref, ret, rootPos;
              getPos = makeGetPos(getPosition[0]);
              if (!(roots[0] instanceof ParserNode.Root)) {
                throw Error("Cannot translate non-Root object");
              }
              if (roots[0].isGenerator) {
                scope = scope.clone(true);
              }
              rootPos = getPos(roots[0]);
              ret = translateFunctionBody(rootPos, roots[0].isGenerator, scope, scope.options["return"] || scope.options["eval"] ? ParserNode.Return(roots[0].body.index, roots[0].body.scope, roots[0].body) : roots[0].body);
              if (!(_ref = ret.body.pos).file) {
                _ref.file = rootPos.file;
              }
              getPos = null;
              return ret;
            }())
            : {
              wrap: function (x) {
                return x;
              },
              body: ast.Block(noPos, (function () {
                var _arr, _arr2, _i, _len, _ref, comments, innerScope, root, rootBody,
                    rootPos;
                for (_arr = [], _arr2 = __toArray(roots), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                  root = _arr2[_i];
                  getPos = makeGetPos(getPosition[0]);
                  if (!(root instanceof ParserNode.Root)) {
                    throw Error("Cannot translate non-Root object");
                  }
                  innerScope = scope.clone(true);
                  _ref = splitComments(translate(
                    root.body,
                    innerScope,
                    "topStatement",
                    scope.options["return"] || scope.options["eval"],
                    []
                  )());
                  comments = _ref.comments;
                  rootBody = _ref.body;
                  rootPos = getPos(root);
                  getPos = null;
                  _arr.push(ast.Block(rootPos, __toArray(comments).concat([
                    ast.Call(rootPos, ast.Func(
                      rootPos,
                      null,
                      [],
                      innerScope.getVariables(),
                      rootBody
                    ))
                  ])));
                }
                return _arr;
              }()))
            };
          wrap = _ref.wrap;
          body = _ref.body;
          init = [];
          if (scope.hasBound && scope.usedThis) {
            fakeThis = ast.Ident(body.pos, "_this");
            scope.addVariable(fakeThis);
            init.push(ast.Assign(body.pos, fakeThis, ast.This(body.pos)));
          }
          scope.fillHelperDependencies();
          for (_arr = __toArray(scope.getHelpers()), _i = 0, _len = _arr.length; _i < _len; ++_i) {
            helper = _arr[_i];
            if (helper !== "GLOBAL" && scope.macros.hasHelper(helper)) {
              ident = ast.Ident(body.pos, helper);
              scope.addVariable(ident);
              init.push(ast.Assign(body.pos, ident, scope.macros.getHelper(helper)));
            }
          }
          bareInit = [];
          if (scope.options["eval"]) {
            walker = function (node) {
              if (node instanceof ast.Func) {
                scope.addHelper("GLOBAL");
                if (node.name != null) {
                  return ast.Block(node.pos, [
                    node,
                    ast.Assign(
                      node.pos,
                      ast.Access(
                        node.pos,
                        ast.Ident(node.pos, "GLOBAL"),
                        node.name.name
                      ),
                      node.name
                    )
                  ]);
                } else {
                  return node;
                }
              } else if (node instanceof ast.Binary && node.op === "=" && node.left instanceof ast.Ident) {
                scope.addHelper("GLOBAL");
                return ast.Assign(
                  node.pos,
                  ast.Access(
                    node.pos,
                    ast.Ident(node.pos, "GLOBAL"),
                    node.left.name
                  ),
                  node.walk(walker)
                );
              }
            };
            body = body.walk(walker);
            body = body.mutateLast(
              function (node) {
                scope.addHelper("GLOBAL");
                return ast.Assign(
                  node.pos,
                  ast.Access(
                    node.pos,
                    ast.Ident(node.pos, "GLOBAL"),
                    ast.Const(node.pos, "_")
                  ),
                  node
                );
              },
              { "return": true }
            );
          }
          body = propagateFilenames(body);
          _ref = splitComments(body);
          comments = _ref.comments;
          uncommentedBody = _ref.body;
          if (scope.options.embedded) {
            uncommentedBody = ast.Block(body.pos, [
              ast.Return(body.pos, wrap(ast.Func(
                body.pos,
                null,
                [
                  ast.Ident(body.pos, "write"),
                  ast.Ident(body.pos, "context")
                ],
                [],
                ast.Block(body.pos, [
                  ast.If(
                    body.pos,
                    ast.Binary(
                      body.pos,
                      ast.Ident(body.pos, "context"),
                      "==",
                      ast.Const(body.pos, null)
                    ),
                    ast.Assign(
                      body.pos,
                      ast.Ident(body.pos, "context"),
                      ast.Obj(body.pos)
                    )
                  ),
                  uncommentedBody
                ])
              )))
            ]);
          }
          if (scope.options.bare) {
            if (scope.hasHelper("GLOBAL")) {
              scope.addVariable(ast.Ident(body.pos, "GLOBAL"));
              bareInit.unshift(ast.Assign(
                body.pos,
                ast.Ident(body.pos, "GLOBAL"),
                scope.macros.getHelper("GLOBAL")
              ));
            }
            if (scope.options.undefinedName != null) {
              scope.addVariable(scope.options.undefinedName);
            }
            return propagateFilenames(ast.Root(
              body.pos,
              ast.Block(body.pos, __toArray(comments).concat(__toArray(bareInit), __toArray(init), [uncommentedBody])),
              scope.getVariables(),
              ["use strict"]
            ));
          } else {
            callFunc = ast.Call(
              body.pos,
              ast.Access(
                body.pos,
                ast.Func(
                  body.pos,
                  null,
                  (scope.hasHelper("GLOBAL")
                    ? [ast.Ident(body.pos, "GLOBAL")]
                    : []).concat(scope.options.undefinedName != null
                    ? [ast.Ident(body.pos, scope.options.undefinedName, true)]
                    : []),
                  scope.getVariables(),
                  ast.Block(body.pos, __toArray(init).concat([uncommentedBody])),
                  ["use strict"]
                ),
                "call"
              ),
              [ast.This(body.pos)].concat(scope.hasHelper("GLOBAL") ? [scope.macros.getHelper("GLOBAL")] : [])
            );
            if (scope.options["return"]) {
              callFunc = ast.Return(body.pos, callFunc);
            }
            return ast.Root(
              body.pos,
              ast.Block(body.pos, __toArray(comments).concat(__toArray(bareInit), [callFunc])),
              [],
              []
            );
          }
        }
        module.exports = function (node, macros, getPosition, options) {
          var endTime, result, scope, startTime;
          if (options == null) {
            options = {};
          }
          startTime = new Date().getTime();
          try {
            scope = Scope(options, macros, false);
            result = translateRoot(node, scope, getPosition);
            scope.releaseTmps();
          } catch (e) {
            if (typeof callback !== "undefined" && callback !== null) {
              return callback(e);
            } else {
              throw e;
            }
          }
          endTime = new Date().getTime();
          if (typeof options.progress === "function") {
            options.progress("translate", endTime - startTime);
          }
          return { node: result, time: endTime - startTime };
        };
        module.exports.defineHelper = function (macros, getPosition, name, value, type, dependencies) {
          var helper, ident, scope;
          scope = Scope({}, macros, false);
          getPos = makeGetPos(getPosition);
          if (typeof name === "string") {
            ident = ast.Ident(
              makePos(0, 0),
              name
            );
          } else if (name instanceof ParserNode.Ident) {
            ident = translate(name, scope, "leftExpression")();
          } else {
            throw TypeError("Expecting name to be a String or Ident, got " + __typeof(name));
          }
          if (!(ident instanceof ast.Ident)) {
            throw Error("Expected name to be an Ident, got " + __typeof(ident));
          }
          if (value instanceof AstNode) {
            helper = value;
          } else if (value instanceof ParserNode) {
            helper = translate(value, scope, "expression")();
          } else {
            throw TypeError("Expected value to be a parser or ast Node, got " + __typeof(value));
          }
          if (dependencies == null) {
            dependencies = scope.getHelpers();
          }
          macros.addHelper(ident.name, helper, type, dependencies);
          getPos = null;
          return { helper: helper, dependencies: dependencies };
        };
      }.call(this, typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : this));
      
      return module.exports;
    };
    require['./gorilla'] = function () {
      var module = { exports: this };
      var exports = this;
      (function (GLOBAL) {
        "use strict";
        var __defer, __everyPromise, __generatorToPromise, __import, __isArray, __lte,
            __num, __owns, __promise, __promiseLoop, __slice, __strnum, __toArray,
            __toPromise, __typeof, _ref, fetchAndParsePrelude, fs, init, os, parser,
            path, real__filename, setImmediate, SourceMap, writeFileWithMkdirp,
            writeFileWithMkdirpSync;
        __defer = (function () {
          function __defer() {
            var deferred, isError, value;
            isError = false;
            value = null;
            deferred = [];
            function complete(newIsError, newValue) {
              var funcs;
              if (deferred) {
                funcs = deferred;
                deferred = null;
                isError = newIsError;
                value = newValue;
                if (funcs.length) {
                  setImmediate(function () {
                    var _end, i;
                    for (i = 0, _end = funcs.length; i < _end; ++i) {
                      funcs[i]();
                    }
                  });
                }
              }
            }
            return {
              promise: {
                then: function (onFulfilled, onRejected, allowSync) {
                  var _ref, fulfill, promise, reject;
                  if (allowSync !== true) {
                    allowSync = void 0;
                  }
                  _ref = __defer();
                  promise = _ref.promise;
                  fulfill = _ref.fulfill;
                  reject = _ref.reject;
                  function step() {
                    var f, result;
                    try {
                      if (isError) {
                        f = onRejected;
                      } else {
                        f = onFulfilled;
                      }
                      if (typeof f === "function") {
                        result = f(value);
                        if (result && typeof result.then === "function") {
                          result.then(fulfill, reject, allowSync);
                        } else {
                          fulfill(result);
                        }
                      } else {
                        (isError ? reject : fulfill)(value);
                      }
                    } catch (e) {
                      reject(e);
                    }
                  }
                  if (deferred) {
                    deferred.push(step);
                  } else if (allowSync) {
                    step();
                  } else {
                    setImmediate(step);
                  }
                  return promise;
                },
                sync: function () {
                  var result, state;
                  state = 0;
                  result = 0;
                  this.then(
                    function (ret) {
                      state = 1;
                      return result = ret;
                    },
                    function (err) {
                      state = 2;
                      return result = err;
                    },
                    true
                  );
                  switch (state) {
                  case 0: throw Error("Promise did not execute synchronously");
                  case 1: return result;
                  case 2: throw result;
                  default: throw Error("Unknown state");
                  }
                }
              },
              fulfill: function (value) {
                complete(false, value);
              },
              reject: function (reason) {
                complete(true, reason);
              }
            };
          }
          __defer.fulfilled = function (value) {
            var d;
            d = __defer();
            d.fulfill(value);
            return d.promise;
          };
          __defer.rejected = function (reason) {
            var d;
            d = __defer();
            d.reject(reason);
            return d.promise;
          };
          return __defer;
        }());
        __everyPromise = function (promises) {
          var defer, i, isArray, k, remaining, result, v;
          if (typeof promises !== "object" || promises === null) {
            throw TypeError("Expected promises to be an Object, got " + __typeof(promises));
          }
          isArray = __isArray(promises);
          defer = __defer();
          if (isArray) {
            result = [];
          } else {
            result = {};
          }
          remaining = 0;
          function handle(key, promise) {
            return promise.then(
              function (value) {
                result[key] = value;
                if (--remaining === 0) {
                  defer.fulfill(result);
                }
              },
              defer.reject
            );
          }
          if (isArray) {
            i = promises.length;
            remaining = i;
            while (i--) {
              handle(i, promises[i]);
            }
          } else {
            for (k in promises) {
              if (__owns.call(promises, k)) {
                v = promises[k];
                ++remaining;
                handle(k, v);
              }
            }
          }
          return defer.promise;
        };
        __generatorToPromise = function (generator, allowSync) {
          if (typeof generator !== "object" || generator === null) {
            throw TypeError("Expected generator to be an Object, got " + __typeof(generator));
          } else {
            if (typeof generator.send !== "function") {
              throw TypeError("Expected generator.send to be a Function, got " + __typeof(generator.send));
            }
            if (typeof generator["throw"] !== "function") {
              throw TypeError("Expected generator.throw to be a Function, got " + __typeof(generator["throw"]));
            }
          }
          if (allowSync == null) {
            allowSync = false;
          } else if (typeof allowSync !== "boolean") {
            throw TypeError("Expected allowSync to be a Boolean, got " + __typeof(allowSync));
          }
          function continuer(verb, arg) {
            var item;
            try {
              item = generator[verb](arg);
            } catch (e) {
              return __defer.rejected(e);
            }
            if (item.done) {
              return __defer.fulfilled(item.value);
            } else {
              return item.value.then(callback, errback, allowSync);
            }
          }
          function callback(value) {
            return continuer("send", value);
          }
          function errback(value) {
            return continuer("throw", value);
          }
          return callback(void 0);
        };
        __import = function (dest, source) {
          var k;
          for (k in source) {
            if (__owns.call(source, k)) {
              dest[k] = source[k];
            }
          }
          return dest;
        };
        __isArray = typeof Array.isArray === "function" ? Array.isArray
          : (function () {
            var _toString;
            _toString = Object.prototype.toString;
            return function (x) {
              return _toString.call(x) === "[object Array]";
            };
          }());
        __lte = function (x, y) {
          var type;
          type = typeof x;
          if (type !== "number" && type !== "string") {
            throw TypeError("Cannot compare a non-number/string: " + type);
          } else if (type !== typeof y) {
            throw TypeError("Cannot compare elements of different types: " + type + " vs " + typeof y);
          } else {
            return x <= y;
          }
        };
        __num = function (num) {
          if (typeof num !== "number") {
            throw TypeError("Expected a number, got " + __typeof(num));
          } else {
            return num;
          }
        };
        __owns = Object.prototype.hasOwnProperty;
        __promise = function (value, allowSync) {
          var factory;
          if (allowSync == null) {
            allowSync = false;
          } else if (typeof allowSync !== "boolean") {
            throw TypeError("Expected allowSync to be a Boolean, got " + __typeof(allowSync));
          }
          if (typeof value === "function") {
            factory = function () {
              return __generatorToPromise(value.apply(this, arguments));
            };
            factory.sync = function () {
              return __generatorToPromise(
                value.apply(this, arguments),
                true
              ).sync();
            };
            return factory;
          } else {
            return __generatorToPromise(value, allowSync);
          }
        };
        __promiseLoop = function (limit, length, body) {
          var defer, done, index, result, slotsUsed;
          if (typeof limit !== "number") {
            throw TypeError("Expected limit to be a Number, got " + __typeof(limit));
          }
          if (typeof length !== "number") {
            throw TypeError("Expected length to be a Number, got " + __typeof(length));
          }
          if (typeof body !== "function") {
            throw TypeError("Expected body to be a Function, got " + __typeof(body));
          }
          if (limit < 1 || limit !== limit) {
            limit = 1/0;
          }
          result = [];
          done = false;
          slotsUsed = 0;
          defer = __defer();
          index = 0;
          function handle(index) {
            ++slotsUsed;
            return body(index).then(
              function (value) {
                result[index] = value;
                --slotsUsed;
                return flush();
              },
              function (reason) {
                done = true;
                return defer.reject(reason);
              }
            );
          }
          function flush() {
            for (; !done && slotsUsed < limit && index < length; ++index) {
              handle(index);
            }
            if (!done && index >= length && slotsUsed === 0) {
              done = true;
              return defer.fulfill(result);
            }
          }
          setImmediate(flush);
          return defer.promise;
        };
        __slice = Array.prototype.slice;
        __strnum = function (strnum) {
          var type;
          type = typeof strnum;
          if (type === "string") {
            return strnum;
          } else if (type === "number") {
            return String(strnum);
          } else {
            throw TypeError("Expected a string or number, got " + __typeof(strnum));
          }
        };
        __toArray = function (x) {
          if (x == null) {
            throw TypeError("Expected an object, got " + __typeof(x));
          } else if (__isArray(x)) {
            return x;
          } else if (typeof x === "string") {
            return x.split("");
          } else if (typeof x.length === "number") {
            return __slice.call(x);
          } else {
            throw TypeError("Expected an object with a length property, got " + __typeof(x));
          }
        };
        __toPromise = function (func, context, args) {
          var d;
          if (typeof func !== "function") {
            throw TypeError("Expected func to be a Function, got " + __typeof(func));
          }
          d = __defer();
          func.apply(context, __toArray(args).concat([
            function (err, value) {
              if (err != null) {
                d.reject(err);
              } else {
                d.fulfill(value);
              }
            }
          ]));
          return d.promise;
        };
        __typeof = (function () {
          var _toString;
          _toString = Object.prototype.toString;
          return function (o) {
            if (o === void 0) {
              return "Undefined";
            } else if (o === null) {
              return "Null";
            } else {
              return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
            }
          };
        }());
        setImmediate = typeof GLOBAL.setImmediate === "function" ? GLOBAL.setImmediate
          : typeof process !== "undefined" && typeof process.nextTick === "function"
          ? (function () {
            var nextTick;
            nextTick = process.nextTick;
            return function (func) {
              var args;
              if (typeof func !== "function") {
                throw TypeError("Expected func to be a Function, got " + __typeof(func));
              }
              args = __slice.call(arguments, 1);
              if (args.length) {
                return nextTick(function () {
                  func.apply(void 0, __toArray(args));
                });
              } else {
                return nextTick(func);
              }
            };
          }())
          : function (func) {
            var args;
            if (typeof func !== "function") {
              throw TypeError("Expected func to be a Function, got " + __typeof(func));
            }
            args = __slice.call(arguments, 1);
            if (args.length) {
              return setTimeout(
                function () {
                  func.apply(void 0, __toArray(args));
                },
                0
              );
            } else {
              return setTimeout(func, 0);
            }
          };
        parser = require("./parser");
        os = require("os");
        fs = require("fs");
        path = require("path");
        SourceMap = require("./source-map");
        _ref = require("./utils");
        writeFileWithMkdirp = _ref.writeFileWithMkdirp;
        writeFileWithMkdirpSync = _ref.writeFileWithMkdirpSync;
        exports.version = "0.8.12";
        exports.ParserError = parser.ParserError;
        exports.MacroError = parser.MacroError;
        if (require.extensions) {
          require.extensions[".gs"] = function (module, filename) {
            var compiled;
            compiled = exports.compileSync(
              fs.readFileSync(filename, "utf8"),
              { filename: filename }
            );
            return module._compile(compiled.code, filename);
          };
        } else if (require.registerExtension) {
          require.registerExtension(".gs", function (content) {
            return exports.compileSync(content, { filename: filename });
          });
        }
        if (typeof __filename !== "undefined" && __filename !== null) {
          real__filename = fs.realpathSync(__filename);
        }
        fetchAndParsePrelude = (function () {
          var getPreludeCachePath, getPreludeSrcPath, parsedPreludeByLang,
              preludePromisesByLang, work;
          parsedPreludeByLang = {};
          if (real__filename != null) {
            getPreludeSrcPath = function (lang) {
              return path.join(path.dirname(real__filename), "../src/" + __strnum(lang) + "prelude.gs");
            };
          }
          if (os != null) {
            getPreludeCachePath = function (lang) {
              return path.join(os.tmpDir(), "gs-" + __strnum(lang) + "prelude-" + __strnum(exports.version) + ".cache");
            };
          }
          preludePromisesByLang = {};
          work = __promise(function (lang, sync) {
            var _e, _send, _state, _step, _throw, cachePrelude, e, errored,
                parsedPrelude, prelude, preludeCachePath, preludeCacheStat,
                preludeSrcPath, preludeSrcStat;
            _state = 0;
            function _close() {
              _state = 30;
            }
            function _step(_received) {
              while (true) {
                switch (_state) {
                case 0:
                  if (typeof lang !== "string") {
                    throw TypeError("Expected lang to be a String, got " + __typeof(lang));
                  }
                  preludeSrcPath = getPreludeSrcPath(lang);
                  _state = sync ? 1 : 2;
                  break;
                case 1:
                  preludeSrcStat = fs.statSync(preludeSrcPath);
                  _state = 4;
                  break;
                case 2:
                  ++_state;
                  return {
                    done: false,
                    value: __toPromise(fs.stat, fs, [preludeSrcPath])
                  };
                case 3:
                  preludeSrcStat = _received;
                  ++_state;
                case 4:
                  preludeCachePath = getPreludeCachePath(lang);
                  ++_state;
                case 5:
                  _state = sync ? 6 : 7;
                  break;
                case 6:
                  preludeCacheStat = fs.statSync(preludeCachePath);
                  _state = 10;
                  break;
                case 7:
                  ++_state;
                  return {
                    done: false,
                    value: __toPromise(fs.stat, fs, [preludeCachePath])
                  };
                case 8:
                  preludeCacheStat = _received;
                  _state = 10;
                  break;
                case 9:
                  if (e.code !== "ENOENT") {
                    throw e;
                  }
                  ++_state;
                case 10:
                  _state = preludeCacheStat && __lte(preludeSrcStat.mtime.getTime(), preludeCacheStat.mtime.getTime()) ? 11 : 19;
                  break;
                case 11:
                  _state = sync ? 12 : 13;
                  break;
                case 12:
                  cachePrelude = fs.readFileSync(preludeCachePath, "utf8");
                  _state = 15;
                  break;
                case 13:
                  ++_state;
                  return {
                    done: false,
                    value: __toPromise(fs.readFile, fs, [preludeCachePath, "utf8"])
                  };
                case 14:
                  cachePrelude = _received;
                  ++_state;
                case 15:
                  errored = false;
                  try {
                    parsedPrelude = parsedPreludeByLang[lang] = parser.deserializePrelude(cachePrelude);
                  } catch (e) {
                    if (e instanceof ReferenceError) {
                      throw e;
                    } else {
                      console.error("Error deserializing prelude, reloading. " + String(e));
                      errored = true;
                    }
                  }
                  _state = errored ? 16 : 19;
                  break;
                case 16:
                  _state = sync ? 17 : 18;
                  break;
                case 17:
                  fs.unlinkSync(preludeCachePath);
                  _state = 19;
                  break;
                case 18:
                  ++_state;
                  return {
                    done: false,
                    value: __toPromise(fs.unlink, fs, [preludeCachePath])
                  };
                case 19:
                  _state = parsedPrelude == null ? 20 : 29;
                  break;
                case 20:
                  _state = sync ? 21 : 22;
                  break;
                case 21:
                  prelude = fs.readFileSync(preludeSrcPath, "utf8");
                  _state = 24;
                  break;
                case 22:
                  ++_state;
                  return {
                    done: false,
                    value: __toPromise(fs.readFile, fs, [preludeSrcPath, "utf8"])
                  };
                case 23:
                  prelude = _received;
                  ++_state;
                case 24:
                  _state = sync ? 25 : 26;
                  break;
                case 25:
                  parsedPrelude = parsedPreludeByLang[lang] = parser.sync(prelude, null, { serializeMacros: true, sync: true, filename: preludeSrcPath });
                  _state = 28;
                  break;
                case 26:
                  ++_state;
                  return {
                    done: false,
                    value: parser(prelude, null, { serializeMacros: true, filename: preludeSrcPath })
                  };
                case 27:
                  parsedPreludeByLang[lang] = _received;
                  parsedPrelude = parsedPreludeByLang[lang];
                  ++_state;
                case 28:
                  writeFileWithMkdirp(preludeCachePath, parsedPrelude.macros.serialize(), "utf8");
                  ++_state;
                case 29:
                  delete preludePromisesByLang[lang];
                  ++_state;
                  return { done: true, value: parsedPrelude };
                case 30:
                  return { done: true, value: void 0 };
                default: throw Error("Unknown state: " + _state);
                }
              }
            }
            function _throw(_e) {
              if (_state >= 5 && _state <= 8) {
                e = _e;
                _state = 9;
              } else {
                _close();
                throw _e;
              }
            }
            function _send(_received) {
              while (true) {
                try {
                  return _step(_received);
                } catch (_e) {
                  _throw(_e);
                }
              }
            }
            return {
              close: _close,
              iterator: function () {
                return this;
              },
              next: function () {
                return _send(void 0);
              },
              send: _send,
              "throw": function (_e) {
                _throw(_e);
                return _send(void 0);
              }
            };
          });
          function f(lang, sync) {
            var _ref, parsedPrelude;
            if (typeof lang !== "string") {
              throw TypeError("Expected lang to be a String, got " + __typeof(lang));
            }
            if (sync == null) {
              sync = false;
            } else if (typeof sync !== "boolean") {
              throw TypeError("Expected sync to be a Boolean, got " + __typeof(sync));
            }
            if (__owns.call(parsedPreludeByLang, lang)) {
              parsedPrelude = parsedPreludeByLang[lang];
            }
            if (parsedPrelude != null) {
              if (sync) {
                return parsedPrelude;
              } else {
                return __defer.fulfilled(parsedPrelude);
              }
            } else if (sync) {
              return work.sync(lang, true);
            } else if ((_ref = preludePromisesByLang[lang]) == null) {
              return preludePromisesByLang[lang] = work(lang);
            } else {
              return _ref;
            }
          }
          f.serialized = __promise(function (lang) {
            var _e, _send, _state, _step, _throw;
            _state = 0;
            function _close() {
              _state = 3;
            }
            function _step(_received) {
              while (true) {
                switch (_state) {
                case 0:
                  if (typeof lang !== "string") {
                    throw TypeError("Expected lang to be a String, got " + __typeof(lang));
                  }
                  ++_state;
                  return { done: false, value: f(lang) };
                case 1:
                  ++_state;
                  return {
                    done: false,
                    value: __toPromise(fs.readFile, fs, [getPreludeCachePath(lang), "utf8"])
                  };
                case 2:
                  ++_state;
                  return { done: true, value: _received };
                case 3:
                  return { done: true, value: void 0 };
                default: throw Error("Unknown state: " + _state);
                }
              }
            }
            function _throw(_e) {
              _close();
              throw _e;
            }
            function _send(_received) {
              try {
                return _step(_received);
              } catch (_e) {
                _throw(_e);
              }
            }
            return {
              close: _close,
              iterator: function () {
                return this;
              },
              next: function () {
                return _send(void 0);
              },
              send: _send,
              "throw": function (_e) {
                _throw(_e);
                return _send(void 0);
              }
            };
          });
          exports.withPrelude = function (lang, serializedPrelude) {
            if (typeof lang !== "string") {
              throw TypeError("Expected lang to be a String, got " + __typeof(lang));
            }
            if (typeof serializedPrelude !== "object" || serializedPrelude === null) {
              throw TypeError("Expected serializedPrelude to be an Object, got " + __typeof(serializedPrelude));
            }
            parsedPreludeByLang[lang] = parser.deserializePrelude(serializedPrelude);
            return this;
          };
          return f;
        }());
        exports.getSerializedPrelude = fetchAndParsePrelude.serialized;
        exports.parse = __promise(function (source, options) {
          var _e, _send, _state, _step, _throw, _tmp, macros, parseOptions, sync;
          _state = 0;
          function _close() {
            _state = 12;
          }
          function _step(_received) {
            while (true) {
              switch (_state) {
              case 0:
                if (options == null) {
                  options = {};
                }
                sync = options.sync;
                _state = options.macros ? 1 : 2;
                break;
              case 1:
                macros = options.macros;
                _state = 8;
                break;
              case 2:
                _state = options.noPrelude ? 3 : 4;
                break;
              case 3:
                macros = null;
                _state = 8;
                break;
              case 4:
                _state = sync ? 5 : 6;
                break;
              case 5:
                macros = fetchAndParsePrelude(options.lang || "js", true).macros;
                _state = 8;
                break;
              case 6:
                ++_state;
                return { done: false, value: fetchAndParsePrelude(options.lang || "js") };
              case 7:
                _tmp = _received;
                macros = _tmp.macros;
                ++_state;
              case 8:
                parseOptions = { filename: options.filename, noindent: !!options.noindent, sync: !!options.sync, progress: options.progress };
                if (options.embedded) {
                  parseOptions.embedded = !!options.embedded;
                  parseOptions.embeddedUnpretty = !!options.embeddedUnpretty;
                  parseOptions.embeddedGenerator = !!options.embeddedGenerator;
                  parseOptions.embeddedOpen = options.embeddedOpen;
                  parseOptions.embeddedClose = options.embeddedClose;
                  parseOptions.embeddedOpenWrite = options.embeddedOpenWrite;
                  parseOptions.embeddedCloseWrite = options.embeddedCloseWrite;
                  parseOptions.embeddedOpenComment = options.embeddedOpenComment;
                  parseOptions.embeddedCloseComment = options.embeddedCloseComment;
                }
                _state = sync ? 9 : 10;
                break;
              case 9:
                _state = 12;
                return {
                  done: true,
                  value: parser.sync(source, macros, parseOptions)
                };
              case 10:
                ++_state;
                return {
                  done: false,
                  value: parser(source, macros, parseOptions)
                };
              case 11:
                ++_state;
                return { done: true, value: _received };
              case 12:
                return { done: true, value: void 0 };
              default: throw Error("Unknown state: " + _state);
              }
            }
          }
          function _throw(_e) {
            _close();
            throw _e;
          }
          function _send(_received) {
            try {
              return _step(_received);
            } catch (_e) {
              _throw(_e);
            }
          }
          return {
            close: _close,
            iterator: function () {
              return this;
            },
            next: function () {
              return _send(void 0);
            },
            send: _send,
            "throw": function (_e) {
              _throw(_e);
              return _send(void 0);
            }
          };
        });
        exports.parseSync = function (source, options) {
          var _ref;
          if (options == null) {
            options = {};
          }
          return exports.parse.sync(source, ((_ref = __import({}, options)).sync = true, _ref));
        };
        exports.getReservedWords = function (options) {
          if (options == null) {
            options = {};
          }
          if (options.noPrelude) {
            return parser.getReservedWords(null, options);
          } else {
            return parser.getReservedWords(
              fetchAndParsePrelude(options.lang || "js", true).macros,
              options
            );
          }
        };
        function joinParsedResults(results) {
          var _arr, _i, _len, joinedParsed, parsed;
          joinedParsed = {
            parseTime: 0,
            macroExpandTime: 0,
            reduceTime: 0,
            macros: results[0].macros,
            result: []
          };
          for (_arr = __toArray(results), _i = 0, _len = _arr.length; _i < _len; ++_i) {
            parsed = _arr[_i];
            joinedParsed.parseTime += __num(parsed.parseTime);
            joinedParsed.macroExpandTime += __num(parsed.macroExpandTime);
            joinedParsed.reduceTime += __num(parsed.reduceTime);
            joinedParsed.result.push(parsed.result);
          }
          return joinedParsed;
        }
        exports.ast = __promise(function (source, options) {
          var _arr, _arr2, _e, _i, _len, _send, _state, _step, _throw, _tmp, array,
              item, name, originalProgress, parsed, progressCounts, startTime, sync,
              translated, translator;
          _state = 0;
          function _close() {
            _state = 15;
          }
          function _step(_received) {
            while (true) {
              switch (_state) {
              case 0:
                if (options == null) {
                  options = {};
                }
                startTime = new Date().getTime();
                sync = options.sync;
                if (typeof options.translator === "function") {
                  translator = options.translator;
                } else {
                  translator = require(typeof options.translator === "string" ? options.translator : "./jstranslator");
                }
                _state = __isArray(source) ? 1 : 10;
                break;
              case 1:
                array = [];
                originalProgress = options.progress;
                progressCounts = { parse: 0, macroExpand: 0, reduce: 0 };
                if (typeof originalProgress === "function") {
                  options.progress = function (name, time) {
                    return progressCounts[name] = __num(progressCounts[name]) + __num(time);
                  };
                }
                _arr = __toArray(source);
                _i = 0;
                _len = _arr.length;
                ++_state;
              case 2:
                _state = _i < _len ? 3 : 9;
                break;
              case 3:
                item = _arr[_i];
                if (__isArray(options.filenames)) {
                  options.filename = options.filenames[i];
                }
                _arr2 = [];
                _state = sync ? 4 : 5;
                break;
              case 4:
                _tmp = exports.parseSync(item, options);
                _state = 7;
                break;
              case 5:
                ++_state;
                return {
                  done: false,
                  value: exports.parse(item, options)
                };
              case 6:
                _tmp = _received;
                ++_state;
              case 7:
                _arr2.push(_tmp);
                array.push.apply(array, _arr2);
                ++_state;
              case 8:
                ++_i;
                _state = 2;
                break;
              case 9:
                options.progress = originalProgress;
                if (typeof originalProgress === "function") {
                  for (_arr = ["parse", "macroExpand", "reduce"], _i = 0, _len = _arr.length; _i < _len; ++_i) {
                    name = _arr[_i];
                    options.progress(name, progressCounts[name]);
                  }
                }
                parsed = joinParsedResults(array);
                _state = 14;
                break;
              case 10:
                _state = sync ? 11 : 12;
                break;
              case 11:
                parsed = exports.parseSync(source, options);
                _state = 14;
                break;
              case 12:
                ++_state;
                return {
                  done: false,
                  value: exports.parse(source, options)
                };
              case 13:
                parsed = _received;
                ++_state;
              case 14:
                translated = translator(parsed.result, parsed.macros, parsed.getPosition, options);
                ++_state;
                return {
                  done: true,
                  value: {
                    node: translated.node,
                    parseTime: parsed.parseTime,
                    macroExpandTime: parsed.macroExpandTime,
                    reduceTime: parsed.reduceTime,
                    translateTime: translated.time,
                    time: __num(new Date().getTime()) - __num(startTime)
                  }
                };
              case 15:
                return { done: true, value: void 0 };
              default: throw Error("Unknown state: " + _state);
              }
            }
          }
          function _throw(_e) {
            _close();
            throw _e;
          }
          function _send(_received) {
            try {
              return _step(_received);
            } catch (_e) {
              _throw(_e);
            }
          }
          return {
            close: _close,
            iterator: function () {
              return this;
            },
            next: function () {
              return _send(void 0);
            },
            send: _send,
            "throw": function (_e) {
              _throw(_e);
              return _send(void 0);
            }
          };
        });
        exports.astSync = function (source, options) {
          var _ref;
          if (options == null) {
            options = {};
          }
          return exports.ast.sync(source, ((_ref = __import({}, options)).sync = true, _ref));
        };
        function handleAstPipe(node, options, fileSources) {
          var ast, coverage;
          if (typeof options.astPipe === "function") {
            ast = require("./jsast");
            node = options.astPipe(node, fileSources);
            if (!(node instanceof ast.Root)) {
              throw Error("Expected astPipe to return a Root, got " + __typeof(node));
            }
          }
          if (options.coverage) {
            coverage = require("./coverage");
            node = coverage(node, fileSources);
          }
          return node;
        }
        exports.compile = __promise(function (source, options) {
          var _e, _send, _state, _step, _throw, compiled, fileSources, node,
              startTime, sync, translated;
          _state = 0;
          function _close() {
            _state = 5;
          }
          function _step(_received) {
            while (true) {
              switch (_state) {
              case 0:
                if (options == null) {
                  options = {};
                }
                sync = options.sync;
                startTime = new Date().getTime();
                _state = sync ? 1 : 2;
                break;
              case 1:
                translated = exports.astSync(source, options);
                _state = 4;
                break;
              case 2:
                ++_state;
                return {
                  done: false,
                  value: exports.ast(source, options)
                };
              case 3:
                translated = _received;
                ++_state;
              case 4:
                node = translated.node;
                fileSources = {};
                if (options.filename) {
                  fileSources[options.filename] = source;
                }
                node = handleAstPipe(node, options, fileSources);
                compiled = node.compile(options);
                ++_state;
                return {
                  done: true,
                  value: {
                    parseTime: translated.parseTime,
                    macroExpandTime: translated.macroExpandTime,
                    reduceTime: translated.reduceTime,
                    translateTime: translated.translateTime,
                    compileTime: compiled.compileTime,
                    uglifyTime: compiled.uglifyTime,
                    time: __num(new Date().getTime()) - __num(startTime),
                    code: compiled.code
                  }
                };
              case 5:
                return { done: true, value: void 0 };
              default: throw Error("Unknown state: " + _state);
              }
            }
          }
          function _throw(_e) {
            _close();
            throw _e;
          }
          function _send(_received) {
            try {
              return _step(_received);
            } catch (_e) {
              _throw(_e);
            }
          }
          return {
            close: _close,
            iterator: function () {
              return this;
            },
            next: function () {
              return _send(void 0);
            },
            send: _send,
            "throw": function (_e) {
              _throw(_e);
              return _send(void 0);
            }
          };
        });
        exports.compileSync = function (source, options) {
          var _ref;
          if (options == null) {
            options = {};
          }
          return exports.compile.sync(source, ((_ref = __import({}, options)).sync = true, _ref));
        };
        exports.compileFile = __promise(function (options) {
          var _arr, _arr2, _e, _i, _len, _send, _state, _step, _throw, code, compiled,
              fileSources, footer, i, input, inputs, linefeed, name, node,
              originalProgress, output, parsed, progressCounts, source, sourceMapFile,
              sources, startParseTime, sync, translated, translator;
          _state = 0;
          function _close() {
            _state = 20;
          }
          function _step(_received) {
            while (true) {
              switch (_state) {
              case 0:
                if (options == null) {
                  options = {};
                }
                options = __import({}, options);
                sync = options.sync;
                inputs = options.input;
                if (typeof inputs === "string") {
                  inputs = [inputs];
                } else if (!__isArray(inputs)) {
                  throw Error("Expected options.input to be a string or array of strings");
                } else if (inputs.length === 0) {
                  throw Error("Expected options.input to not be empty");
                }
                output = options.output;
                if (typeof output !== "string") {
                  throw Error("Expected options.output to be a string, got " + __typeof(output));
                }
                if (!options.sourceMap) {
                  options.sourceMap = null;
                } else if (typeof options.sourceMap === "string") {
                  sourceMapFile = options.sourceMap;
                  options.sourceMap = SourceMap(sourceMapFile, options.output, "");
                } else {
                  if (typeof options.sourceMap.file !== "string") {
                    throw Error("Expected options.sourceMap.file to be a string, got " + __typeof(options.sourceMap.file));
                  }
                  if (typeof options.sourceMap.sourceRoot !== "string") {
                    throw Error("Expected options.sourceMap.sourceRoot to be a string, got " + __typeof(options.sourceMap.sourceRoot));
                  }
                  sourceMapFile = options.sourceMap.file;
                  options.sourceMap = SourceMap(sourceMapFile, options.output, options.sourceMap.sourceRoot);
                }
                sources = [];
                _state = sync ? 1 : 2;
                break;
              case 1:
                for (_arr = __toArray(inputs), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                  input = _arr[_i];
                  sources.push(fs.readFileSync(input, "utf8"));
                }
                _state = 4;
                break;
              case 2:
                ++_state;
                return {
                  done: false,
                  value: __promiseLoop(5, __num(inputs.length), __promise(function (_i) {
                    var _e2, _send2, _state2, _step2, _throw2, input;
                    _state2 = 0;
                    function _close2() {
                      _state2 = 2;
                    }
                    function _step2(_received) {
                      while (true) {
                        switch (_state2) {
                        case 0:
                          input = inputs[_i];
                          ++_state2;
                          return {
                            done: false,
                            value: __toPromise(fs.readFile, fs, [input, "utf8"])
                          };
                        case 1:
                          ++_state2;
                          return { done: true, value: _received };
                        case 2:
                          return { done: true, value: void 0 };
                        default: throw Error("Unknown state: " + _state2);
                        }
                      }
                    }
                    function _throw2(_e2) {
                      _close2();
                      throw _e2;
                    }
                    function _send2(_received) {
                      try {
                        return _step2(_received);
                      } catch (_e2) {
                        _throw2(_e2);
                      }
                    }
                    return {
                      close: _close2,
                      iterator: function () {
                        return this;
                      },
                      next: function () {
                        return _send2(void 0);
                      },
                      send: _send2,
                      "throw": function (_e2) {
                        _throw2(_e2);
                        return _send2(void 0);
                      }
                    };
                  }))
                };
              case 3:
                sources = _received;
                ++_state;
              case 4:
                originalProgress = sources.length > 0 && options.progress;
                progressCounts = { parse: 0, macroExpand: 0, reduce: 0 };
                if (typeof originalProgress === "function") {
                  options.progress = function (name, time) {
                    return progressCounts[name] = __num(progressCounts[name]) + __num(time);
                  };
                }
                _arr = [];
                i = 0;
                _len = sources.length;
                ++_state;
              case 5:
                _state = i < _len ? 6 : 11;
                break;
              case 6:
                source = sources[i];
                startParseTime = Date.now();
                options.filename = inputs[i];
                _state = sync ? 7 : 8;
                break;
              case 7:
                _arr.push(exports.parseSync(source, options));
                _state = 10;
                break;
              case 8:
                _arr2 = [];
                ++_state;
                return {
                  done: false,
                  value: exports.parse(source, options)
                };
              case 9:
                _arr2.push(_received);
                _arr.push.apply(_arr, _arr2);
                ++_state;
              case 10:
                ++i;
                _state = 5;
                break;
              case 11:
                parsed = _arr;
                if (typeof originalProgress === "function") {
                  options.progress = originalProgress;
                  for (_arr = ["parse", "macroExpand", "reduce"], _i = 0, _len = _arr.length; _i < _len; ++_i) {
                    name = _arr[_i];
                    options.progress(name, progressCounts[name]);
                  }
                }
                options.filenames = inputs;
                translator = require("./jstranslator");
                translated = translator(
                  (function () {
                    var _arr, _i, _len, x;
                    for (_arr = [], _i = 0, _len = parsed.length; _i < _len; ++_i) {
                      x = parsed[_i];
                      _arr.push(x.result);
                    }
                    return _arr;
                  }()),
                  parsed[0].macros,
                  (function () {
                    var _arr, _i, _len, x;
                    for (_arr = [], _i = 0, _len = parsed.length; _i < _len; ++_i) {
                      x = parsed[_i];
                      _arr.push(x.getPosition);
                    }
                    return _arr;
                  }()),
                  options
                );
                node = translated.node;
                fileSources = {};
                for (_arr = __toArray(inputs), i = 0, _len = _arr.length; i < _len; ++i) {
                  input = _arr[i];
                  fileSources[input] = sources[i];
                }
                node = handleAstPipe(node, options, fileSources);
                compiled = node.compile(options);
                _state = !sync ? 12 : 13;
                break;
              case 12:
                ++_state;
                return { done: false, value: __defer.fulfilled() };
              case 13:
                code = compiled.code;
                if (sourceMapFile) {
                  linefeed = options.linefeed || "\n";
                  footer = __strnum(linefeed) + "/*" + __strnum(linefeed) + "//@ sourceMappingURL=" + __strnum(path.relative(path.dirname(options.output), sourceMapFile)) + __strnum(linefeed) + "*/" + __strnum(linefeed);
                  code = __strnum(code) + footer;
                }
                _state = sync ? 14 : 15;
                break;
              case 14:
                writeFileWithMkdirpSync(options.output, code, options.encoding || "utf8");
                _state = 16;
                break;
              case 15:
                ++_state;
                return {
                  done: false,
                  value: writeFileWithMkdirp(options.output, code, options.encoding || "utf8")
                };
              case 16:
                _state = sourceMapFile ? 17 : 20;
                break;
              case 17:
                _state = sync ? 18 : 19;
                break;
              case 18:
                writeFileWithMkdirpSync(sourceMapFile, options.sourceMap.toString(), "utf8");
                _state = 20;
                break;
              case 19:
                ++_state;
                return {
                  done: false,
                  value: writeFileWithMkdirp(sourceMapFile, options.sourceMap.toString(), "utf8")
                };
              case 20:
                return { done: true, value: void 0 };
              default: throw Error("Unknown state: " + _state);
              }
            }
          }
          function _throw(_e) {
            _close();
            throw _e;
          }
          function _send(_received) {
            try {
              return _step(_received);
            } catch (_e) {
              _throw(_e);
            }
          }
          return {
            close: _close,
            iterator: function () {
              return this;
            },
            next: function () {
              return _send(void 0);
            },
            send: _send,
            "throw": function (_e) {
              _throw(_e);
              return _send(void 0);
            }
          };
        });
        exports.compileFileSync = function (options) {
          var _ref;
          if (options == null) {
            options = {};
          }
          return exports.compileFile.sync(((_ref = __import({}, options)).sync = true, _ref));
        };
        function evaluate(code, options) {
          var _arr, _i, _module, _obj, _ref, _require, fun, k, Module, r, sandbox,
              Script, v;
          if (typeof require === "function" && (_ref = require("vm")) != null) {
            Script = _ref.Script;
          }
          if (Script) {
            sandbox = Script.createContext();
            sandbox.global = sandbox.root = sandbox.GLOBAL = sandbox;
            if (options.sandbox != null) {
              if (options.sandbox instanceof sandbox.constructor) {
                sandbox = options.sandbox;
              } else {
                _obj = options.sandbox;
                for (k in _obj) {
                  if (__owns.call(_obj, k)) {
                    v = _obj[k];
                    sandbox[k] = v;
                  }
                }
              }
            } else {
              for (k in GLOBAL) {
                if (__owns.call(GLOBAL, k)) {
                  v = GLOBAL[k];
                  sandbox[k] = v;
                }
              }
            }
            sandbox.__filename = options.filename || "eval";
            sandbox.__dirname = path.dirname(sandbox.__filename);
            if (!sandbox.module && !sandbox.require) {
              Module = require("module");
              _module = sandbox.module = new Module(options.modulename || "eval");
              _require = sandbox.require = function (path) {
                return Module._load(path, _module);
              };
              _module.filename = sandbox.__filename;
              for (_arr = Object.getOwnPropertyNames(require), _i = _arr.length; _i--; ) {
                r = _arr[_i];
                try {
                  _require[r] = require[r];
                } catch (e) {}
              }
            }
            if (options.includeGlobals) {
              for (k in GLOBAL) {
                if (__owns.call(GLOBAL, k) && !(k in sandbox)) {
                  sandbox[k] = GLOBAL[k];
                }
              }
            }
            return Script.runInContext(code, sandbox);
          } else {
            fun = Function("return " + __strnum(code));
            return fun();
          }
        }
        exports["eval"] = __promise(function (source, options) {
          var _e, _send, _state, _step, _throw, compiled, result, startTime, sync;
          _state = 0;
          function _close() {
            _state = 5;
          }
          function _step(_received) {
            while (true) {
              switch (_state) {
              case 0:
                if (options == null) {
                  options = {};
                }
                sync = options.sync;
                options["eval"] = true;
                options["return"] = false;
                _state = sync ? 1 : 2;
                break;
              case 1:
                compiled = exports.compileSync(source, options);
                _state = 4;
                break;
              case 2:
                ++_state;
                return {
                  done: false,
                  value: exports.compile(source, options)
                };
              case 3:
                compiled = _received;
                ++_state;
              case 4:
                startTime = new Date().getTime();
                result = evaluate(compiled.code, options);
                if (typeof options.progress === "function") {
                  options.progress("eval", __num(new Date().getTime()) - __num(startTime));
                }
                ++_state;
                return { done: true, value: result };
              case 5:
                return { done: true, value: void 0 };
              default: throw Error("Unknown state: " + _state);
              }
            }
          }
          function _throw(_e) {
            _close();
            throw _e;
          }
          function _send(_received) {
            try {
              return _step(_received);
            } catch (_e) {
              _throw(_e);
            }
          }
          return {
            close: _close,
            iterator: function () {
              return this;
            },
            next: function () {
              return _send(void 0);
            },
            send: _send,
            "throw": function (_e) {
              _throw(_e);
              return _send(void 0);
            }
          };
        });
        exports.evalSync = function (source, options) {
          var _ref;
          if (options == null) {
            options = {};
          }
          return exports["eval"].sync(source, ((_ref = __import({}, options)).sync = true, _ref));
        };
        exports.run = __promise(function (source, options) {
          var _e, _send, _state, _step, _throw, compiled, mainModule, Module, sync;
          _state = 0;
          function _close() {
            _state = 12;
          }
          function _step(_received) {
            while (true) {
              switch (_state) {
              case 0:
                if (options == null) {
                  options = {};
                }
                sync = options.sync;
                _state = typeof process === "undefined" ? 1 : 5;
                break;
              case 1:
                _state = sync ? 2 : 3;
                break;
              case 2:
                _state = 12;
                return {
                  done: true,
                  value: exports.evalSync(source, options)
                };
              case 3:
                ++_state;
                return {
                  done: false,
                  value: exports["eval"](source, options)
                };
              case 4:
                _state = 12;
                return { done: true, value: _received };
              case 5:
                mainModule = require.main;
                mainModule.filename = process.argv[1] = options.filename ? fs.realpathSync(options.filename) : ".";
                if (mainModule.moduleCache) {
                  mainModule.moduleCache = {};
                }
                if (process.binding("natives").module) {
                  Module = require("module").Module;
                  mainModule.paths = Module._nodeModulePaths(path.dirname(options.filename));
                }
                _state = path.extname(mainModule.filename) !== ".gs" || require.extensions ? 6 : 11;
                break;
              case 6:
                _state = sync ? 7 : 8;
                break;
              case 7:
                compiled = exports.compileSync(source, options);
                _state = 10;
                break;
              case 8:
                ++_state;
                return {
                  done: false,
                  value: exports.compile(source, options)
                };
              case 9:
                compiled = _received;
                ++_state;
              case 10:
                _state = 12;
                return {
                  done: true,
                  value: mainModule._compile(compiled.code, mainModule.filename)
                };
              case 11:
                ++_state;
                return {
                  done: true,
                  value: mainModule._compile(source, mainModule.filename)
                };
              case 12:
                return { done: true, value: void 0 };
              default: throw Error("Unknown state: " + _state);
              }
            }
          }
          function _throw(_e) {
            _close();
            throw _e;
          }
          function _send(_received) {
            try {
              return _step(_received);
            } catch (_e) {
              _throw(_e);
            }
          }
          return {
            close: _close,
            iterator: function () {
              return this;
            },
            next: function () {
              return _send(void 0);
            },
            send: _send,
            "throw": function (_e) {
              _throw(_e);
              return _send(void 0);
            }
          };
        });
        exports.runSync = function (source, options) {
          var _ref;
          if (options == null) {
            options = {};
          }
          return exports.run.sync(source, ((_ref = __import({}, options)).sync = true, _ref));
        };
        init = exports.init = __promise(function (options) {
          var _e, _send, _state, _step, _throw;
          _state = 0;
          function _close() {
            _state = 4;
          }
          function _step(_received) {
            while (true) {
              switch (_state) {
              case 0:
                if (options == null) {
                  options = {};
                }
                _state = options.sync ? 1 : 2;
                break;
              case 1:
                _state = 4;
                return {
                  done: true,
                  value: fetchAndParsePrelude(options.lang || "js", true)
                };
              case 2:
                ++_state;
                return { done: false, value: fetchAndParsePrelude(options.lang || "js") };
              case 3:
                ++_state;
                return { done: true, value: _received };
              case 4:
                return { done: true, value: void 0 };
              default: throw Error("Unknown state: " + _state);
              }
            }
          }
          function _throw(_e) {
            _close();
            throw _e;
          }
          function _send(_received) {
            try {
              return _step(_received);
            } catch (_e) {
              _throw(_e);
            }
          }
          return {
            close: _close,
            iterator: function () {
              return this;
            },
            next: function () {
              return _send(void 0);
            },
            send: _send,
            "throw": function (_e) {
              _throw(_e);
              return _send(void 0);
            }
          };
        });
        exports.initSync = function (options) {
          var _ref;
          if (options == null) {
            options = {};
          }
          init.sync(((_ref = __import({}, options)).sync = true, _ref));
        };
        exports.getMtime = __promise(function (source) {
          var _arr, _e, _err, _i, _len, _ref, _send, _state, _step, _throw, acc,
              files, fileStats, fileStatsP, libDir, libFile, libFiles, stat, time;
          _state = 0;
          function _close() {
            _state = 6;
          }
          function _step(_received) {
            while (true) {
              switch (_state) {
              case 0:
                files = [];
                files.push(path.join(path.dirname(real__filename), "../src/jsprelude.gs"));
                libDir = path.join(path.dirname(real__filename), "../lib");
                ++_state;
                return {
                  done: false,
                  value: __toPromise(fs.readdir, fs, [libDir])
                };
              case 1:
                libFiles = _received;
                for (_arr = __toArray(libFiles), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                  libFile = _arr[_i];
                  if (path.extname(libFile) === ".js") {
                    files.push(path.join(libDir, libFile));
                  }
                }
                fileStatsP = __everyPromise((function () {
                  var _arr, _i, _len, file;
                  for (_arr = [], _i = 0, _len = files.length; _i < _len; ++_i) {
                    file = files[_i];
                    _arr.push(__toPromise(fs.stat, fs, [file]));
                  }
                  return _arr;
                }()));
                ++_state;
              case 2:
                ++_state;
                return { done: false, value: fileStatsP };
              case 3:
                fileStats = _received;
                _state = 5;
                break;
              case 4:
                _state = 6;
                return { done: true, value: new Date() };
              case 5:
                acc = -4503599627370496;
                for (_arr = __toArray(fileStats), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                  stat = _arr[_i];
                  if (acc > __num(_ref = stat.mtime.getTime())) {
                    acc = acc;
                  } else {
                    acc = _ref;
                  }
                }
                time = acc;
                ++_state;
                return { done: true, value: new Date(time) };
              case 6:
                return { done: true, value: void 0 };
              default: throw Error("Unknown state: " + _state);
              }
            }
          }
          function _throw(_e) {
            if (_state === 2 || _state === 3) {
              _err = _e;
              _state = 4;
            } else {
              _close();
              throw _e;
            }
          }
          function _send(_received) {
            while (true) {
              try {
                return _step(_received);
              } catch (_e) {
                _throw(_e);
              }
            }
          }
          return {
            close: _close,
            iterator: function () {
              return this;
            },
            next: function () {
              return _send(void 0);
            },
            send: _send,
            "throw": function (_e) {
              _throw(_e);
              return _send(void 0);
            }
          };
        });
      }.call(this, typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : this));
      
      return module.exports;
    };
    require['./browser'] = function () {
      var module = { exports: this };
      var exports = this;
      (function (GLOBAL) {
        "use strict";
        var __async, __fromPromise, __isArray, __num, __once, __slice, __toArray,
            __typeof, GorillaScript, runScripts, setImmediate;
        __async = function (limit, length, hasResult, onValue, onComplete) {
          var broken, completed, index, result, slotsUsed, sync;
          if (typeof limit !== "number") {
            throw TypeError("Expected limit to be a Number, got " + __typeof(limit));
          }
          if (typeof length !== "number") {
            throw TypeError("Expected length to be a Number, got " + __typeof(length));
          }
          if (hasResult == null) {
            hasResult = false;
          } else if (typeof hasResult !== "boolean") {
            throw TypeError("Expected hasResult to be a Boolean, got " + __typeof(hasResult));
          }
          if (typeof onValue !== "function") {
            throw TypeError("Expected onValue to be a Function, got " + __typeof(onValue));
          }
          if (typeof onComplete !== "function") {
            throw TypeError("Expected onComplete to be a Function, got " + __typeof(onComplete));
          }
          if (hasResult) {
            result = [];
          } else {
            result = null;
          }
          if (length <= 0) {
            return onComplete(null, result);
          }
          if (limit < 1 || limit !== limit) {
            limit = 1/0;
          }
          broken = null;
          slotsUsed = 0;
          sync = false;
          completed = false;
          function onValueCallback(err, value) {
            if (completed) {
              return;
            }
            --slotsUsed;
            if (err != null && broken == null) {
              broken = err;
            }
            if (hasResult && broken == null && arguments.length > 1) {
              result.push(value);
            }
            if (!sync) {
              next();
            }
          }
          index = -1;
          function next() {
            while (!completed && broken == null && slotsUsed < limit && ++index < length) {
              ++slotsUsed;
              sync = true;
              onValue(index, __once(onValueCallback));
              sync = false;
            }
            if (!completed && (broken != null || slotsUsed === 0)) {
              completed = true;
              if (broken != null) {
                onComplete(broken);
              } else {
                onComplete(null, result);
              }
            }
          }
          next();
        };
        __fromPromise = function (promise) {
          if (typeof promise !== "object" || promise === null) {
            throw TypeError("Expected promise to be an Object, got " + __typeof(promise));
          } else if (typeof promise.then !== "function") {
            throw TypeError("Expected promise.then to be a Function, got " + __typeof(promise.then));
          }
          return function (callback) {
            promise.then(
              function (value) {
                return setImmediate(callback, null, value);
              },
              function (reason) {
                return setImmediate(callback, reason);
              }
            );
          };
        };
        __isArray = typeof Array.isArray === "function" ? Array.isArray
          : (function () {
            var _toString;
            _toString = Object.prototype.toString;
            return function (x) {
              return _toString.call(x) === "[object Array]";
            };
          }());
        __num = function (num) {
          if (typeof num !== "number") {
            throw TypeError("Expected a number, got " + __typeof(num));
          } else {
            return num;
          }
        };
        __once = (function () {
          function replacement() {
            throw Error("Attempted to call function more than once");
          }
          function doNothing() {}
          return function (func, silentFail) {
            if (typeof func !== "function") {
              throw TypeError("Expected func to be a Function, got " + __typeof(func));
            }
            if (silentFail == null) {
              silentFail = false;
            } else if (typeof silentFail !== "boolean") {
              throw TypeError("Expected silentFail to be a Boolean, got " + __typeof(silentFail));
            }
            return function () {
              var f;
              f = func;
              if (silentFail) {
                func = doNothing;
              } else {
                func = replacement;
              }
              return f.apply(this, arguments);
            };
          };
        }());
        __slice = Array.prototype.slice;
        __toArray = function (x) {
          if (x == null) {
            throw TypeError("Expected an object, got " + __typeof(x));
          } else if (__isArray(x)) {
            return x;
          } else if (typeof x === "string") {
            return x.split("");
          } else if (typeof x.length === "number") {
            return __slice.call(x);
          } else {
            throw TypeError("Expected an object with a length property, got " + __typeof(x));
          }
        };
        __typeof = (function () {
          var _toString;
          _toString = Object.prototype.toString;
          return function (o) {
            if (o === void 0) {
              return "Undefined";
            } else if (o === null) {
              return "Null";
            } else {
              return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
            }
          };
        }());
        setImmediate = typeof GLOBAL.setImmediate === "function" ? GLOBAL.setImmediate
          : typeof process !== "undefined" && typeof process.nextTick === "function"
          ? (function () {
            var nextTick;
            nextTick = process.nextTick;
            return function (func) {
              var args;
              if (typeof func !== "function") {
                throw TypeError("Expected func to be a Function, got " + __typeof(func));
              }
              args = __slice.call(arguments, 1);
              if (args.length) {
                return nextTick(function () {
                  func.apply(void 0, __toArray(args));
                });
              } else {
                return nextTick(func);
              }
            };
          }())
          : function (func) {
            var args;
            if (typeof func !== "function") {
              throw TypeError("Expected func to be a Function, got " + __typeof(func));
            }
            args = __slice.call(arguments, 1);
            if (args.length) {
              return setTimeout(
                function () {
                  func.apply(void 0, __toArray(args));
                },
                0
              );
            } else {
              return setTimeout(func, 0);
            }
          };
        GorillaScript = require("./gorilla");
        GorillaScript.require = require;
        if (typeof window !== "undefined" && window !== null) {
          GorillaScript.load = function (url, callback) {
            var xhr;
            if (typeof url !== "string") {
              throw TypeError("Expected url to be a String, got " + __typeof(url));
            }
            if (typeof callback !== "function") {
              throw TypeError("Expected callback to be a Function, got " + __typeof(callback));
            }
            if (window.ActiveXObject) {
              xhr = new (window.ActiveXObject)("Microsoft.XMLHTTP");
            } else if (XMLHttpRequest) {
              xhr = new XMLHttpRequest();
            } else {
              throw Error("Unable to create XMLHttpRequest");
            }
            xhr.open("GET", url, true);
            if (typeof xhr.overrideMimeType === "function") {
              xhr.overrideMimeType("text/plain");
            }
            xhr.onreadystatechange = function () {
              var _ref;
              if (xhr.readyState === 4) {
                if ((_ref = xhr.status) === 0 || _ref === 200) {
                  return __fromPromise(GorillaScript.run(xhr.responseText))(callback);
                } else {
                  return callback(Error("Could not load " + url));
                }
              }
            };
            return xhr.send(null);
          };
          runScripts = function () {
            var scripts;
            scripts = document.getElementsByTagName("script");
            return __async(
              1,
              __num(scripts.length),
              false,
              function (_i, next) {
                var script;
                script = scripts[_i];
                if (script.type === "text/gorillascript") {
                  if (script.src) {
                    return GorillaScript.load(script.src, next);
                  } else {
                    GorillaScript.runSync(script.innerHTML);
                    return next();
                  }
                } else {
                  return next();
                }
              },
              function (_err) {}
            );
          };
          if (window.addEventListener) {
            addEventListener("DOMContentLoaded", runScripts, false);
          } else {
            attachEvent("onload", runScripts);
          }
        }
      }.call(this, typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : this));
      
      return module.exports;
    };

    require("./browser");
    return require("./gorilla").withPrelude("js", function (TYPE$, AST$) {
      return {
        consts: {
          "true": true,
          "false": false,
          "null": null,
          "void": void 0,
          "undefined": void 0,
          Infinity: 1/0,
          "NaN": 0/0
        },
        helpers: {
          __throw: {
            helper: AST$(
              16,
              62,
              26,
              0,
              0,
              [
                AST$(
                  17,
                  62,
                  27,
                  0,
                  "err"
                )
              ],
              0,
              AST$(
                26,
                62,
                34,
                0,
                AST$(
                  17,
                  62,
                  40,
                  0,
                  "err"
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.none),
            dependencies: []
          },
          GLOBAL: {
            helper: AST$(
              19,
              146,
              23,
              0,
              AST$(
                3,
                146,
                26,
                0,
                AST$(
                  30,
                  146,
                  30,
                  0,
                  "typeof",
                  AST$(
                    17,
                    146,
                    39,
                    0,
                    "window"
                  )
                ),
                "!==",
                AST$(
                  9,
                  146,
                  30,
                  0,
                  "undefined"
                )
              ),
              AST$(
                17,
                146,
                51,
                0,
                "window"
              ),
              AST$(
                19,
                146,
                23,
                0,
                AST$(
                  3,
                  146,
                  66,
                  0,
                  AST$(
                    30,
                    146,
                    70,
                    0,
                    "typeof",
                    AST$(
                      17,
                      146,
                      79,
                      0,
                      "global"
                    )
                  ),
                  "!==",
                  AST$(
                    9,
                    146,
                    70,
                    0,
                    "undefined"
                  )
                ),
                AST$(
                  17,
                  146,
                  91,
                  0,
                  "global"
                ),
                AST$(25, 146, 103, 0)
              )
            ),
            type: TYPE$.any,
            dependencies: []
          },
          __xor: {
            helper: AST$(
              16,
              148,
              24,
              0,
              0,
              [
                AST$(
                  17,
                  148,
                  25,
                  0,
                  "x"
                ),
                AST$(
                  17,
                  148,
                  27,
                  0,
                  "y"
                )
              ],
              0,
              AST$(
                18,
                149,
                1,
                0,
                AST$(
                  17,
                  149,
                  5,
                  0,
                  "x"
                ),
                AST$(
                  23,
                  150,
                  1,
                  0,
                  AST$(
                    3,
                    150,
                    1,
                    0,
                    AST$(
                      30,
                      150,
                      1,
                      0,
                      "!",
                      AST$(
                        17,
                        150,
                        8,
                        0,
                        "y"
                      )
                    ),
                    "&&",
                    AST$(
                      17,
                      150,
                      14,
                      0,
                      "x"
                    )
                  )
                ),
                AST$(
                  23,
                  152,
                  1,
                  0,
                  AST$(
                    3,
                    152,
                    1,
                    0,
                    AST$(
                      17,
                      152,
                      1,
                      0,
                      "y"
                    ),
                    "||",
                    AST$(
                      17,
                      152,
                      9,
                      0,
                      "x"
                    )
                  )
                )
              )
            ),
            type: TYPE$["function"],
            dependencies: []
          },
          __typeof: {
            helper: AST$(
              7,
              480,
              25,
              0,
              AST$(
                16,
                480,
                25,
                0,
                0,
                0,
                ["_toString"],
                AST$(
                  4,
                  481,
                  1,
                  0,
                  0,
                  AST$(
                    3,
                    481,
                    1,
                    0,
                    AST$(
                      17,
                      481,
                      6,
                      0,
                      "_toString"
                    ),
                    "=",
                    AST$(
                      3,
                      481,
                      19,
                      0,
                      AST$(
                        3,
                        481,
                        19,
                        0,
                        AST$(
                          17,
                          481,
                          19,
                          0,
                          "Object"
                        ),
                        ".",
                        AST$(
                          9,
                          481,
                          27,
                          0,
                          "prototype"
                        )
                      ),
                      ".",
                      AST$(
                        9,
                        481,
                        37,
                        0,
                        "toString"
                      )
                    )
                  ),
                  AST$(
                    23,
                    482,
                    4,
                    0,
                    AST$(
                      16,
                      482,
                      4,
                      0,
                      0,
                      [
                        AST$(
                          17,
                          482,
                          5,
                          0,
                          "o"
                        )
                      ],
                      0,
                      AST$(
                        18,
                        483,
                        1,
                        0,
                        AST$(
                          3,
                          483,
                          7,
                          0,
                          AST$(
                            17,
                            483,
                            16,
                            0,
                            "o"
                          ),
                          "===",
                          AST$(9, 1, 1, 0)
                        ),
                        AST$(
                          23,
                          484,
                          7,
                          0,
                          AST$(
                            9,
                            484,
                            7,
                            0,
                            "Undefined"
                          )
                        ),
                        AST$(
                          18,
                          483,
                          1,
                          0,
                          AST$(
                            3,
                            485,
                            12,
                            0,
                            AST$(
                              17,
                              485,
                              21,
                              0,
                              "o"
                            ),
                            "===",
                            AST$(
                              9,
                              1,
                              1,
                              0,
                              null
                            )
                          ),
                          AST$(
                            23,
                            486,
                            7,
                            0,
                            AST$(
                              9,
                              486,
                              7,
                              0,
                              "Null"
                            )
                          ),
                          AST$(
                            23,
                            488,
                            1,
                            0,
                            AST$(
                              3,
                              488,
                              1,
                              0,
                              AST$(
                                3,
                                488,
                                8,
                                0,
                                AST$(
                                  3,
                                  488,
                                  8,
                                  0,
                                  AST$(
                                    17,
                                    488,
                                    8,
                                    0,
                                    "o"
                                  ),
                                  ".",
                                  AST$(
                                    9,
                                    488,
                                    10,
                                    0,
                                    "constructor"
                                  )
                                ),
                                "&&",
                                AST$(
                                  3,
                                  488,
                                  25,
                                  0,
                                  AST$(
                                    3,
                                    488,
                                    25,
                                    0,
                                    AST$(
                                      17,
                                      488,
                                      25,
                                      0,
                                      "o"
                                    ),
                                    ".",
                                    AST$(
                                      9,
                                      488,
                                      28,
                                      0,
                                      "constructor"
                                    )
                                  ),
                                  ".",
                                  AST$(
                                    9,
                                    488,
                                    40,
                                    0,
                                    "name"
                                  )
                                )
                              ),
                              "||",
                              AST$(
                                7,
                                488,
                                48,
                                0,
                                AST$(
                                  3,
                                  488,
                                  48,
                                  0,
                                  AST$(
                                    7,
                                    488,
                                    48,
                                    0,
                                    AST$(
                                      3,
                                      488,
                                      48,
                                      0,
                                      AST$(
                                        17,
                                        488,
                                        48,
                                        0,
                                        "_toString"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        488,
                                        48,
                                        0,
                                        "call"
                                      )
                                    ),
                                    0,
                                    AST$(
                                      17,
                                      488,
                                      61,
                                      0,
                                      "o"
                                    )
                                  ),
                                  ".",
                                  AST$(
                                    9,
                                    488,
                                    64,
                                    0,
                                    "slice"
                                  )
                                ),
                                0,
                                AST$(
                                  9,
                                  488,
                                  70,
                                  0,
                                  8
                                ),
                                AST$(
                                  9,
                                  488,
                                  72,
                                  0,
                                  -1
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              ),
              0
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.string),
            dependencies: []
          },
          __first: {
            helper: AST$(
              16,
              496,
              26,
              0,
              0,
              [
                AST$(
                  17,
                  496,
                  27,
                  0,
                  "x"
                )
              ],
              0,
              AST$(
                23,
                496,
                32,
                0,
                AST$(
                  17,
                  496,
                  32,
                  0,
                  "x"
                )
              )
            ),
            type: TYPE$["function"],
            dependencies: []
          },
          __num: {
            helper: AST$(
              16,
              523,
              24,
              0,
              0,
              [
                AST$(
                  17,
                  523,
                  25,
                  0,
                  "num"
                )
              ],
              0,
              AST$(
                18,
                524,
                1,
                0,
                AST$(
                  3,
                  524,
                  5,
                  0,
                  AST$(
                    30,
                    524,
                    9,
                    0,
                    "typeof",
                    AST$(
                      17,
                      524,
                      20,
                      0,
                      "num"
                    )
                  ),
                  "!==",
                  AST$(
                    9,
                    524,
                    9,
                    0,
                    "number"
                  )
                ),
                AST$(
                  26,
                  525,
                  1,
                  0,
                  AST$(
                    7,
                    525,
                    10,
                    0,
                    AST$(
                      17,
                      525,
                      10,
                      0,
                      "TypeError"
                    ),
                    0,
                    AST$(
                      3,
                      525,
                      21,
                      0,
                      AST$(
                        9,
                        525,
                        21,
                        0,
                        "Expected a number, got "
                      ),
                      "+",
                      AST$(
                        7,
                        525,
                        49,
                        0,
                        AST$(
                          17,
                          525,
                          49,
                          0,
                          "__typeof"
                        ),
                        0,
                        AST$(
                          17,
                          525,
                          57,
                          0,
                          "num"
                        )
                      )
                    )
                  )
                ),
                AST$(
                  23,
                  527,
                  1,
                  0,
                  AST$(
                    17,
                    527,
                    1,
                    0,
                    "num"
                  )
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.number),
            dependencies: ["__typeof"]
          },
          __str: {
            helper: AST$(
              16,
              529,
              24,
              0,
              0,
              [
                AST$(
                  17,
                  529,
                  25,
                  0,
                  "str"
                )
              ],
              0,
              AST$(
                18,
                530,
                1,
                0,
                AST$(
                  3,
                  530,
                  5,
                  0,
                  AST$(
                    30,
                    530,
                    9,
                    0,
                    "typeof",
                    AST$(
                      17,
                      530,
                      20,
                      0,
                      "str"
                    )
                  ),
                  "!==",
                  AST$(
                    9,
                    530,
                    9,
                    0,
                    "string"
                  )
                ),
                AST$(
                  26,
                  531,
                  1,
                  0,
                  AST$(
                    7,
                    531,
                    10,
                    0,
                    AST$(
                      17,
                      531,
                      10,
                      0,
                      "TypeError"
                    ),
                    0,
                    AST$(
                      3,
                      531,
                      21,
                      0,
                      AST$(
                        9,
                        531,
                        21,
                        0,
                        "Expected a string, got "
                      ),
                      "+",
                      AST$(
                        7,
                        531,
                        49,
                        0,
                        AST$(
                          17,
                          531,
                          49,
                          0,
                          "__typeof"
                        ),
                        0,
                        AST$(
                          17,
                          531,
                          57,
                          0,
                          "str"
                        )
                      )
                    )
                  )
                ),
                AST$(
                  23,
                  533,
                  1,
                  0,
                  AST$(
                    17,
                    533,
                    1,
                    0,
                    "str"
                  )
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.string),
            dependencies: ["__typeof"]
          },
          __strnum: {
            helper: AST$(
              16,
              535,
              27,
              0,
              0,
              [
                AST$(
                  17,
                  535,
                  28,
                  0,
                  "strnum"
                )
              ],
              ["type"],
              AST$(
                4,
                536,
                1,
                0,
                0,
                AST$(
                  3,
                  536,
                  1,
                  0,
                  AST$(
                    17,
                    536,
                    6,
                    0,
                    "type"
                  ),
                  "=",
                  AST$(
                    30,
                    536,
                    13,
                    0,
                    "typeof",
                    AST$(
                      17,
                      536,
                      20,
                      0,
                      "strnum"
                    )
                  )
                ),
                AST$(
                  18,
                  537,
                  1,
                  0,
                  AST$(
                    3,
                    537,
                    5,
                    0,
                    AST$(
                      17,
                      537,
                      5,
                      0,
                      "type"
                    ),
                    "===",
                    AST$(
                      9,
                      537,
                      15,
                      0,
                      "string"
                    )
                  ),
                  AST$(
                    23,
                    538,
                    1,
                    0,
                    AST$(
                      17,
                      538,
                      1,
                      0,
                      "strnum"
                    )
                  ),
                  AST$(
                    18,
                    537,
                    1,
                    0,
                    AST$(
                      3,
                      539,
                      10,
                      0,
                      AST$(
                        17,
                        539,
                        10,
                        0,
                        "type"
                      ),
                      "===",
                      AST$(
                        9,
                        539,
                        20,
                        0,
                        "number"
                      )
                    ),
                    AST$(
                      23,
                      540,
                      1,
                      0,
                      AST$(
                        7,
                        540,
                        1,
                        0,
                        AST$(
                          17,
                          540,
                          1,
                          0,
                          "String"
                        ),
                        0,
                        AST$(
                          17,
                          540,
                          12,
                          0,
                          "strnum"
                        )
                      )
                    ),
                    AST$(
                      26,
                      542,
                      1,
                      0,
                      AST$(
                        7,
                        542,
                        10,
                        0,
                        AST$(
                          17,
                          542,
                          10,
                          0,
                          "TypeError"
                        ),
                        0,
                        AST$(
                          3,
                          542,
                          21,
                          0,
                          AST$(
                            9,
                            542,
                            21,
                            0,
                            "Expected a string or number, got "
                          ),
                          "+",
                          AST$(
                            7,
                            542,
                            59,
                            0,
                            AST$(
                              17,
                              542,
                              59,
                              0,
                              "__typeof"
                            ),
                            0,
                            AST$(
                              17,
                              542,
                              67,
                              0,
                              "strnum"
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.string),
            dependencies: ["__typeof"]
          },
          __owns: {
            helper: AST$(
              3,
              653,
              23,
              0,
              AST$(
                3,
                653,
                23,
                0,
                AST$(
                  17,
                  653,
                  23,
                  0,
                  "Object"
                ),
                ".",
                AST$(
                  9,
                  653,
                  31,
                  0,
                  "prototype"
                )
              ),
              ".",
              AST$(
                9,
                653,
                41,
                0,
                "hasOwnProperty"
              )
            ),
            type: TYPE$.any,
            dependencies: []
          },
          __cmp: {
            helper: AST$(
              16,
              674,
              24,
              0,
              0,
              [
                AST$(
                  17,
                  674,
                  25,
                  0,
                  "left"
                ),
                AST$(
                  17,
                  674,
                  30,
                  0,
                  "right"
                )
              ],
              ["type"],
              AST$(
                18,
                675,
                1,
                0,
                AST$(
                  3,
                  675,
                  5,
                  0,
                  AST$(
                    17,
                    675,
                    5,
                    0,
                    "left"
                  ),
                  "===",
                  AST$(
                    17,
                    675,
                    13,
                    0,
                    "right"
                  )
                ),
                AST$(
                  23,
                  676,
                  5,
                  0,
                  AST$(
                    9,
                    676,
                    5,
                    0,
                    0
                  )
                ),
                AST$(
                  4,
                  678,
                  1,
                  0,
                  0,
                  AST$(
                    3,
                    678,
                    1,
                    0,
                    AST$(
                      17,
                      678,
                      8,
                      0,
                      "type"
                    ),
                    "=",
                    AST$(
                      30,
                      678,
                      15,
                      0,
                      "typeof",
                      AST$(
                        17,
                        678,
                        22,
                        0,
                        "left"
                      )
                    )
                  ),
                  AST$(
                    18,
                    679,
                    1,
                    0,
                    AST$(
                      3,
                      679,
                      7,
                      0,
                      AST$(
                        3,
                        679,
                        7,
                        0,
                        AST$(
                          17,
                          679,
                          7,
                          0,
                          "type"
                        ),
                        "!==",
                        AST$(
                          9,
                          679,
                          17,
                          0,
                          "number"
                        )
                      ),
                      "&&",
                      AST$(
                        3,
                        679,
                        27,
                        0,
                        AST$(
                          17,
                          679,
                          27,
                          0,
                          "type"
                        ),
                        "!==",
                        AST$(
                          9,
                          679,
                          37,
                          0,
                          "string"
                        )
                      )
                    ),
                    AST$(
                      26,
                      680,
                      1,
                      0,
                      AST$(
                        7,
                        680,
                        12,
                        0,
                        AST$(
                          17,
                          680,
                          12,
                          0,
                          "TypeError"
                        ),
                        0,
                        AST$(
                          3,
                          680,
                          23,
                          0,
                          AST$(
                            9,
                            680,
                            23,
                            0,
                            "Cannot compare a non-number/string: "
                          ),
                          "+",
                          AST$(
                            17,
                            680,
                            64,
                            0,
                            "type"
                          )
                        )
                      )
                    ),
                    AST$(
                      18,
                      679,
                      1,
                      0,
                      AST$(
                        3,
                        681,
                        12,
                        0,
                        AST$(
                          17,
                          681,
                          12,
                          0,
                          "type"
                        ),
                        "!==",
                        AST$(
                          30,
                          681,
                          20,
                          0,
                          "typeof",
                          AST$(
                            17,
                            681,
                            27,
                            0,
                            "right"
                          )
                        )
                      ),
                      AST$(
                        26,
                        682,
                        1,
                        0,
                        AST$(
                          7,
                          682,
                          12,
                          0,
                          AST$(
                            17,
                            682,
                            12,
                            0,
                            "TypeError"
                          ),
                          0,
                          AST$(
                            3,
                            682,
                            23,
                            0,
                            AST$(
                              3,
                              682,
                              23,
                              0,
                              AST$(
                                3,
                                682,
                                23,
                                0,
                                AST$(
                                  9,
                                  682,
                                  23,
                                  0,
                                  "Cannot compare elements of different types: "
                                ),
                                "+",
                                AST$(
                                  17,
                                  682,
                                  72,
                                  0,
                                  "type"
                                )
                              ),
                              "+",
                              AST$(
                                9,
                                682,
                                81,
                                0,
                                " vs "
                              )
                            ),
                            "+",
                            AST$(
                              30,
                              682,
                              90,
                              0,
                              "typeof",
                              AST$(
                                17,
                                682,
                                97,
                                0,
                                "right"
                              )
                            )
                          )
                        )
                      ),
                      AST$(
                        18,
                        679,
                        1,
                        0,
                        AST$(
                          3,
                          683,
                          12,
                          0,
                          AST$(
                            17,
                            683,
                            12,
                            0,
                            "left"
                          ),
                          "<",
                          AST$(
                            17,
                            683,
                            20,
                            0,
                            "right"
                          )
                        ),
                        AST$(
                          23,
                          684,
                          1,
                          0,
                          AST$(
                            9,
                            684,
                            1,
                            0,
                            -1
                          )
                        ),
                        AST$(
                          23,
                          686,
                          7,
                          0,
                          AST$(
                            9,
                            686,
                            7,
                            0,
                            1
                          )
                        )
                      )
                    )
                  )
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.number),
            dependencies: []
          },
          __int: {
            helper: AST$(
              16,
              697,
              24,
              0,
              0,
              [
                AST$(
                  17,
                  697,
                  25,
                  0,
                  "num"
                )
              ],
              0,
              AST$(
                18,
                698,
                1,
                0,
                AST$(
                  3,
                  698,
                  5,
                  0,
                  AST$(
                    30,
                    698,
                    9,
                    0,
                    "typeof",
                    AST$(
                      17,
                      698,
                      20,
                      0,
                      "num"
                    )
                  ),
                  "!==",
                  AST$(
                    9,
                    698,
                    9,
                    0,
                    "number"
                  )
                ),
                AST$(
                  26,
                  699,
                  1,
                  0,
                  AST$(
                    7,
                    699,
                    10,
                    0,
                    AST$(
                      17,
                      699,
                      10,
                      0,
                      "TypeError"
                    ),
                    0,
                    AST$(
                      3,
                      699,
                      21,
                      0,
                      AST$(
                        9,
                        699,
                        21,
                        0,
                        "Expected a number, got "
                      ),
                      "+",
                      AST$(
                        7,
                        699,
                        49,
                        0,
                        AST$(
                          17,
                          699,
                          49,
                          0,
                          "__typeof"
                        ),
                        0,
                        AST$(
                          17,
                          699,
                          57,
                          0,
                          "num"
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  698,
                  1,
                  0,
                  AST$(
                    3,
                    700,
                    10,
                    0,
                    AST$(
                      3,
                      700,
                      10,
                      0,
                      AST$(
                        17,
                        700,
                        10,
                        0,
                        "num"
                      ),
                      "%",
                      AST$(
                        9,
                        700,
                        23,
                        0,
                        1
                      )
                    ),
                    "!==",
                    AST$(
                      9,
                      700,
                      10,
                      0,
                      0
                    )
                  ),
                  AST$(
                    26,
                    701,
                    1,
                    0,
                    AST$(
                      7,
                      701,
                      10,
                      0,
                      AST$(
                        17,
                        701,
                        10,
                        0,
                        "TypeError"
                      ),
                      0,
                      AST$(
                        3,
                        701,
                        21,
                        0,
                        AST$(
                          9,
                          701,
                          21,
                          0,
                          "Expected an integer, got "
                        ),
                        "+",
                        AST$(
                          17,
                          701,
                          51,
                          0,
                          "num"
                        )
                      )
                    )
                  ),
                  AST$(
                    23,
                    703,
                    1,
                    0,
                    AST$(
                      17,
                      703,
                      1,
                      0,
                      "num"
                    )
                  )
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.number),
            dependencies: ["__typeof"]
          },
          __nonzero: {
            helper: AST$(
              16,
              705,
              28,
              0,
              0,
              [
                AST$(
                  17,
                  705,
                  29,
                  0,
                  "num"
                )
              ],
              0,
              AST$(
                18,
                706,
                1,
                0,
                AST$(
                  3,
                  706,
                  5,
                  0,
                  AST$(
                    17,
                    706,
                    5,
                    0,
                    "num"
                  ),
                  "===",
                  AST$(
                    9,
                    706,
                    13,
                    0,
                    0
                  )
                ),
                AST$(
                  26,
                  707,
                  1,
                  0,
                  AST$(
                    7,
                    707,
                    10,
                    0,
                    AST$(
                      17,
                      707,
                      10,
                      0,
                      "RangeError"
                    ),
                    0,
                    AST$(
                      3,
                      707,
                      22,
                      0,
                      AST$(
                        9,
                        707,
                        22,
                        0,
                        "Expected non-zero, got "
                      ),
                      "+",
                      AST$(
                        17,
                        707,
                        50,
                        0,
                        "num"
                      )
                    )
                  )
                ),
                AST$(
                  23,
                  709,
                  1,
                  0,
                  AST$(
                    17,
                    709,
                    1,
                    0,
                    "num"
                  )
                )
              )
            ),
            type: TYPE$["function"],
            dependencies: []
          },
          __lt: {
            helper: AST$(
              16,
              711,
              23,
              0,
              0,
              [
                AST$(
                  17,
                  711,
                  24,
                  0,
                  "x"
                ),
                AST$(
                  17,
                  711,
                  26,
                  0,
                  "y"
                )
              ],
              ["type"],
              AST$(
                4,
                712,
                1,
                0,
                0,
                AST$(
                  3,
                  712,
                  1,
                  0,
                  AST$(
                    17,
                    712,
                    6,
                    0,
                    "type"
                  ),
                  "=",
                  AST$(
                    30,
                    712,
                    13,
                    0,
                    "typeof",
                    AST$(
                      17,
                      712,
                      20,
                      0,
                      "x"
                    )
                  )
                ),
                AST$(
                  18,
                  713,
                  1,
                  0,
                  AST$(
                    3,
                    713,
                    5,
                    0,
                    AST$(
                      3,
                      713,
                      5,
                      0,
                      AST$(
                        17,
                        713,
                        5,
                        0,
                        "type"
                      ),
                      "!==",
                      AST$(
                        9,
                        713,
                        20,
                        0,
                        "number"
                      )
                    ),
                    "&&",
                    AST$(
                      3,
                      713,
                      5,
                      0,
                      AST$(
                        17,
                        713,
                        5,
                        0,
                        "type"
                      ),
                      "!==",
                      AST$(
                        9,
                        713,
                        29,
                        0,
                        "string"
                      )
                    )
                  ),
                  AST$(
                    26,
                    714,
                    1,
                    0,
                    AST$(
                      7,
                      714,
                      10,
                      0,
                      AST$(
                        17,
                        714,
                        10,
                        0,
                        "TypeError"
                      ),
                      0,
                      AST$(
                        3,
                        714,
                        21,
                        0,
                        AST$(
                          9,
                          714,
                          21,
                          0,
                          "Cannot compare a non-number/string: "
                        ),
                        "+",
                        AST$(
                          17,
                          714,
                          62,
                          0,
                          "type"
                        )
                      )
                    )
                  ),
                  AST$(
                    18,
                    713,
                    1,
                    0,
                    AST$(
                      3,
                      715,
                      10,
                      0,
                      AST$(
                        17,
                        715,
                        10,
                        0,
                        "type"
                      ),
                      "!==",
                      AST$(
                        30,
                        715,
                        18,
                        0,
                        "typeof",
                        AST$(
                          17,
                          715,
                          25,
                          0,
                          "y"
                        )
                      )
                    ),
                    AST$(
                      26,
                      716,
                      1,
                      0,
                      AST$(
                        7,
                        716,
                        10,
                        0,
                        AST$(
                          17,
                          716,
                          10,
                          0,
                          "TypeError"
                        ),
                        0,
                        AST$(
                          3,
                          716,
                          21,
                          0,
                          AST$(
                            3,
                            716,
                            21,
                            0,
                            AST$(
                              3,
                              716,
                              21,
                              0,
                              AST$(
                                9,
                                716,
                                21,
                                0,
                                "Cannot compare elements of different types: "
                              ),
                              "+",
                              AST$(
                                17,
                                716,
                                70,
                                0,
                                "type"
                              )
                            ),
                            "+",
                            AST$(
                              9,
                              716,
                              79,
                              0,
                              " vs "
                            )
                          ),
                          "+",
                          AST$(
                            30,
                            716,
                            88,
                            0,
                            "typeof",
                            AST$(
                              17,
                              716,
                              95,
                              0,
                              "y"
                            )
                          )
                        )
                      )
                    ),
                    AST$(
                      23,
                      718,
                      1,
                      0,
                      AST$(
                        3,
                        718,
                        1,
                        0,
                        AST$(
                          17,
                          718,
                          1,
                          0,
                          "x"
                        ),
                        "<",
                        AST$(
                          17,
                          718,
                          9,
                          0,
                          "y"
                        )
                      )
                    )
                  )
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.boolean),
            dependencies: []
          },
          __lte: {
            helper: AST$(
              16,
              720,
              24,
              0,
              0,
              [
                AST$(
                  17,
                  720,
                  25,
                  0,
                  "x"
                ),
                AST$(
                  17,
                  720,
                  27,
                  0,
                  "y"
                )
              ],
              ["type"],
              AST$(
                4,
                721,
                1,
                0,
                0,
                AST$(
                  3,
                  721,
                  1,
                  0,
                  AST$(
                    17,
                    721,
                    6,
                    0,
                    "type"
                  ),
                  "=",
                  AST$(
                    30,
                    721,
                    13,
                    0,
                    "typeof",
                    AST$(
                      17,
                      721,
                      20,
                      0,
                      "x"
                    )
                  )
                ),
                AST$(
                  18,
                  722,
                  1,
                  0,
                  AST$(
                    3,
                    722,
                    5,
                    0,
                    AST$(
                      3,
                      722,
                      5,
                      0,
                      AST$(
                        17,
                        722,
                        5,
                        0,
                        "type"
                      ),
                      "!==",
                      AST$(
                        9,
                        722,
                        20,
                        0,
                        "number"
                      )
                    ),
                    "&&",
                    AST$(
                      3,
                      722,
                      5,
                      0,
                      AST$(
                        17,
                        722,
                        5,
                        0,
                        "type"
                      ),
                      "!==",
                      AST$(
                        9,
                        722,
                        29,
                        0,
                        "string"
                      )
                    )
                  ),
                  AST$(
                    26,
                    723,
                    1,
                    0,
                    AST$(
                      7,
                      723,
                      10,
                      0,
                      AST$(
                        17,
                        723,
                        10,
                        0,
                        "TypeError"
                      ),
                      0,
                      AST$(
                        3,
                        723,
                        21,
                        0,
                        AST$(
                          9,
                          723,
                          21,
                          0,
                          "Cannot compare a non-number/string: "
                        ),
                        "+",
                        AST$(
                          17,
                          723,
                          62,
                          0,
                          "type"
                        )
                      )
                    )
                  ),
                  AST$(
                    18,
                    722,
                    1,
                    0,
                    AST$(
                      3,
                      724,
                      10,
                      0,
                      AST$(
                        17,
                        724,
                        10,
                        0,
                        "type"
                      ),
                      "!==",
                      AST$(
                        30,
                        724,
                        18,
                        0,
                        "typeof",
                        AST$(
                          17,
                          724,
                          25,
                          0,
                          "y"
                        )
                      )
                    ),
                    AST$(
                      26,
                      725,
                      1,
                      0,
                      AST$(
                        7,
                        725,
                        10,
                        0,
                        AST$(
                          17,
                          725,
                          10,
                          0,
                          "TypeError"
                        ),
                        0,
                        AST$(
                          3,
                          725,
                          21,
                          0,
                          AST$(
                            3,
                            725,
                            21,
                            0,
                            AST$(
                              3,
                              725,
                              21,
                              0,
                              AST$(
                                9,
                                725,
                                21,
                                0,
                                "Cannot compare elements of different types: "
                              ),
                              "+",
                              AST$(
                                17,
                                725,
                                70,
                                0,
                                "type"
                              )
                            ),
                            "+",
                            AST$(
                              9,
                              725,
                              79,
                              0,
                              " vs "
                            )
                          ),
                          "+",
                          AST$(
                            30,
                            725,
                            88,
                            0,
                            "typeof",
                            AST$(
                              17,
                              725,
                              95,
                              0,
                              "y"
                            )
                          )
                        )
                      )
                    ),
                    AST$(
                      23,
                      727,
                      1,
                      0,
                      AST$(
                        3,
                        727,
                        1,
                        0,
                        AST$(
                          17,
                          727,
                          1,
                          0,
                          "x"
                        ),
                        "<=",
                        AST$(
                          17,
                          727,
                          10,
                          0,
                          "y"
                        )
                      )
                    )
                  )
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.boolean),
            dependencies: []
          },
          __slice: {
            helper: AST$(
              3,
              979,
              24,
              0,
              AST$(
                3,
                979,
                24,
                0,
                AST$(
                  17,
                  979,
                  24,
                  0,
                  "Array"
                ),
                ".",
                AST$(
                  9,
                  979,
                  31,
                  0,
                  "prototype"
                )
              ),
              ".",
              AST$(
                9,
                979,
                41,
                0,
                "slice"
              )
            ),
            type: TYPE$.any,
            dependencies: []
          },
          __freeze: {
            helper: AST$(
              19,
              981,
              25,
              0,
              AST$(
                3,
                981,
                28,
                0,
                AST$(
                  30,
                  981,
                  28,
                  0,
                  "typeof",
                  AST$(
                    3,
                    981,
                    41,
                    0,
                    AST$(
                      17,
                      981,
                      41,
                      0,
                      "Object"
                    ),
                    ".",
                    AST$(
                      9,
                      981,
                      49,
                      0,
                      "freeze"
                    )
                  )
                ),
                "===",
                AST$(
                  9,
                  981,
                  28,
                  0,
                  "function"
                )
              ),
              AST$(
                3,
                982,
                1,
                0,
                AST$(
                  17,
                  982,
                  1,
                  0,
                  "Object"
                ),
                ".",
                AST$(
                  9,
                  982,
                  10,
                  0,
                  "freeze"
                )
              ),
              AST$(
                16,
                984,
                4,
                0,
                0,
                [
                  AST$(
                    17,
                    984,
                    5,
                    0,
                    "x"
                  )
                ],
                0,
                AST$(
                  23,
                  984,
                  10,
                  0,
                  AST$(
                    17,
                    984,
                    10,
                    0,
                    "x"
                  )
                )
              )
            ),
            type: TYPE$.any,
            dependencies: []
          },
          __freezeFunc: {
            helper: AST$(
              16,
              986,
              32,
              0,
              0,
              [
                AST$(
                  17,
                  986,
                  33,
                  0,
                  "x"
                )
              ],
              0,
              AST$(
                4,
                987,
                1,
                0,
                0,
                AST$(
                  18,
                  987,
                  1,
                  0,
                  AST$(
                    3,
                    987,
                    5,
                    0,
                    AST$(
                      3,
                      987,
                      5,
                      0,
                      AST$(
                        17,
                        987,
                        5,
                        0,
                        "x"
                      ),
                      ".",
                      AST$(
                        9,
                        987,
                        8,
                        0,
                        "prototype"
                      )
                    ),
                    "!=",
                    AST$(
                      9,
                      1,
                      1,
                      0,
                      null
                    )
                  ),
                  AST$(
                    7,
                    988,
                    1,
                    0,
                    AST$(
                      17,
                      988,
                      1,
                      0,
                      "__freeze"
                    ),
                    0,
                    AST$(
                      3,
                      988,
                      14,
                      0,
                      AST$(
                        17,
                        988,
                        14,
                        0,
                        "x"
                      ),
                      ".",
                      AST$(
                        9,
                        988,
                        16,
                        0,
                        "prototype"
                      )
                    )
                  )
                ),
                AST$(
                  23,
                  989,
                  1,
                  0,
                  AST$(
                    7,
                    989,
                    1,
                    0,
                    AST$(
                      17,
                      989,
                      1,
                      0,
                      "__freeze"
                    ),
                    0,
                    AST$(
                      17,
                      989,
                      12,
                      0,
                      "x"
                    )
                  )
                )
              )
            ),
            type: TYPE$["function"],
            dependencies: ["__freeze"]
          },
          __isArray: {
            helper: AST$(
              19,
              991,
              27,
              0,
              AST$(
                3,
                991,
                30,
                0,
                AST$(
                  30,
                  991,
                  30,
                  0,
                  "typeof",
                  AST$(
                    3,
                    991,
                    43,
                    0,
                    AST$(
                      17,
                      991,
                      43,
                      0,
                      "Array"
                    ),
                    ".",
                    AST$(
                      9,
                      991,
                      50,
                      0,
                      "isArray"
                    )
                  )
                ),
                "===",
                AST$(
                  9,
                  991,
                  30,
                  0,
                  "function"
                )
              ),
              AST$(
                3,
                992,
                1,
                0,
                AST$(
                  17,
                  992,
                  1,
                  0,
                  "Array"
                ),
                ".",
                AST$(
                  9,
                  992,
                  9,
                  0,
                  "isArray"
                )
              ),
              AST$(
                7,
                994,
                1,
                0,
                AST$(
                  16,
                  994,
                  1,
                  0,
                  0,
                  0,
                  ["_toString"],
                  AST$(
                    4,
                    995,
                    1,
                    0,
                    0,
                    AST$(
                      3,
                      995,
                      1,
                      0,
                      AST$(
                        17,
                        995,
                        8,
                        0,
                        "_toString"
                      ),
                      "=",
                      AST$(
                        3,
                        995,
                        21,
                        0,
                        AST$(
                          3,
                          995,
                          21,
                          0,
                          AST$(
                            17,
                            995,
                            21,
                            0,
                            "Object"
                          ),
                          ".",
                          AST$(
                            9,
                            995,
                            29,
                            0,
                            "prototype"
                          )
                        ),
                        ".",
                        AST$(
                          9,
                          995,
                          39,
                          0,
                          "toString"
                        )
                      )
                    ),
                    AST$(
                      23,
                      996,
                      6,
                      0,
                      AST$(
                        16,
                        996,
                        6,
                        0,
                        0,
                        [
                          AST$(
                            17,
                            996,
                            7,
                            0,
                            "x"
                          )
                        ],
                        0,
                        AST$(
                          23,
                          996,
                          23,
                          0,
                          AST$(
                            3,
                            996,
                            23,
                            0,
                            AST$(
                              7,
                              996,
                              23,
                              0,
                              AST$(
                                3,
                                996,
                                23,
                                0,
                                AST$(
                                  17,
                                  996,
                                  23,
                                  0,
                                  "_toString"
                                ),
                                ".",
                                AST$(
                                  9,
                                  996,
                                  23,
                                  0,
                                  "call"
                                )
                              ),
                              0,
                              AST$(
                                17,
                                996,
                                36,
                                0,
                                "x"
                              )
                            ),
                            "===",
                            AST$(
                              9,
                              996,
                              42,
                              0,
                              "[object Array]"
                            )
                          )
                        )
                      )
                    )
                  )
                ),
                0
              )
            ),
            type: TYPE$.any,
            dependencies: []
          },
          __isObject: {
            helper: AST$(
              16,
              998,
              30,
              0,
              0,
              [
                AST$(
                  17,
                  998,
                  31,
                  0,
                  "x"
                )
              ],
              0,
              AST$(
                23,
                998,
                47,
                0,
                AST$(
                  3,
                  998,
                  47,
                  0,
                  AST$(
                    3,
                    998,
                    47,
                    0,
                    AST$(
                      30,
                      998,
                      47,
                      0,
                      "typeof",
                      AST$(
                        17,
                        998,
                        54,
                        0,
                        "x"
                      )
                    ),
                    "===",
                    AST$(
                      9,
                      998,
                      61,
                      0,
                      "object"
                    )
                  ),
                  "&&",
                  AST$(
                    3,
                    998,
                    71,
                    0,
                    AST$(
                      17,
                      998,
                      71,
                      0,
                      "x"
                    ),
                    "!==",
                    AST$(
                      9,
                      998,
                      76,
                      0,
                      null
                    )
                  )
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.boolean),
            dependencies: []
          },
          __toArray: {
            helper: AST$(
              16,
              1000,
              29,
              0,
              0,
              [
                AST$(
                  17,
                  1000,
                  30,
                  0,
                  "x"
                )
              ],
              0,
              AST$(
                18,
                1001,
                1,
                0,
                AST$(
                  3,
                  1001,
                  5,
                  0,
                  AST$(
                    17,
                    1001,
                    9,
                    0,
                    "x"
                  ),
                  "==",
                  AST$(
                    9,
                    1,
                    1,
                    0,
                    null
                  )
                ),
                AST$(
                  26,
                  1002,
                  1,
                  0,
                  AST$(
                    7,
                    1002,
                    10,
                    0,
                    AST$(
                      17,
                      1002,
                      10,
                      0,
                      "TypeError"
                    ),
                    0,
                    AST$(
                      3,
                      1002,
                      21,
                      0,
                      AST$(
                        9,
                        1002,
                        21,
                        0,
                        "Expected an object, got "
                      ),
                      "+",
                      AST$(
                        7,
                        1002,
                        50,
                        0,
                        AST$(
                          17,
                          1002,
                          50,
                          0,
                          "__typeof"
                        ),
                        0,
                        AST$(
                          17,
                          1002,
                          58,
                          0,
                          "x"
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  1001,
                  1,
                  0,
                  AST$(
                    7,
                    1003,
                    10,
                    0,
                    AST$(
                      17,
                      1003,
                      10,
                      0,
                      "__isArray"
                    ),
                    0,
                    AST$(
                      17,
                      1003,
                      20,
                      0,
                      "x"
                    )
                  ),
                  AST$(
                    23,
                    1004,
                    1,
                    0,
                    AST$(
                      17,
                      1004,
                      1,
                      0,
                      "x"
                    )
                  ),
                  AST$(
                    18,
                    1001,
                    1,
                    0,
                    AST$(
                      3,
                      1005,
                      10,
                      0,
                      AST$(
                        30,
                        1005,
                        10,
                        0,
                        "typeof",
                        AST$(
                          17,
                          1005,
                          21,
                          0,
                          "x"
                        )
                      ),
                      "===",
                      AST$(
                        9,
                        1005,
                        10,
                        0,
                        "string"
                      )
                    ),
                    AST$(
                      23,
                      1006,
                      1,
                      0,
                      AST$(
                        7,
                        1006,
                        1,
                        0,
                        AST$(
                          3,
                          1006,
                          1,
                          0,
                          AST$(
                            17,
                            1006,
                            1,
                            0,
                            "x"
                          ),
                          ".",
                          AST$(
                            9,
                            1006,
                            7,
                            0,
                            "split"
                          )
                        ),
                        0,
                        AST$(
                          9,
                          1006,
                          13,
                          0,
                          ""
                        )
                      )
                    ),
                    AST$(
                      18,
                      1001,
                      1,
                      0,
                      AST$(
                        3,
                        1007,
                        10,
                        0,
                        AST$(
                          30,
                          1007,
                          10,
                          0,
                          "typeof",
                          AST$(
                            3,
                            1007,
                            21,
                            0,
                            AST$(
                              17,
                              1007,
                              21,
                              0,
                              "x"
                            ),
                            ".",
                            AST$(
                              9,
                              1007,
                              24,
                              0,
                              "length"
                            )
                          )
                        ),
                        "===",
                        AST$(
                          9,
                          1007,
                          10,
                          0,
                          "number"
                        )
                      ),
                      AST$(
                        23,
                        1008,
                        1,
                        0,
                        AST$(
                          7,
                          1008,
                          1,
                          0,
                          AST$(
                            3,
                            1008,
                            1,
                            0,
                            AST$(
                              17,
                              1008,
                              1,
                              0,
                              "__slice"
                            ),
                            ".",
                            AST$(
                              9,
                              1008,
                              1,
                              0,
                              "call"
                            )
                          ),
                          0,
                          AST$(
                            17,
                            1008,
                            14,
                            0,
                            "x"
                          )
                        )
                      ),
                      AST$(
                        26,
                        1010,
                        1,
                        0,
                        AST$(
                          7,
                          1010,
                          10,
                          0,
                          AST$(
                            17,
                            1010,
                            10,
                            0,
                            "TypeError"
                          ),
                          0,
                          AST$(
                            3,
                            1010,
                            21,
                            0,
                            AST$(
                              9,
                              1010,
                              21,
                              0,
                              "Expected an object with a length property, got "
                            ),
                            "+",
                            AST$(
                              7,
                              1010,
                              73,
                              0,
                              AST$(
                                17,
                                1010,
                                73,
                                0,
                                "__typeof"
                              ),
                              0,
                              AST$(
                                17,
                                1010,
                                81,
                                0,
                                "x"
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.array),
            dependencies: ["__isArray", "__slice", "__typeof"]
          },
          __create: {
            helper: AST$(
              19,
              1012,
              25,
              0,
              AST$(
                3,
                1012,
                28,
                0,
                AST$(
                  30,
                  1012,
                  28,
                  0,
                  "typeof",
                  AST$(
                    3,
                    1012,
                    41,
                    0,
                    AST$(
                      17,
                      1012,
                      41,
                      0,
                      "Object"
                    ),
                    ".",
                    AST$(
                      9,
                      1012,
                      49,
                      0,
                      "create"
                    )
                  )
                ),
                "===",
                AST$(
                  9,
                  1012,
                  28,
                  0,
                  "function"
                )
              ),
              AST$(
                3,
                1013,
                1,
                0,
                AST$(
                  17,
                  1013,
                  1,
                  0,
                  "Object"
                ),
                ".",
                AST$(
                  9,
                  1013,
                  10,
                  0,
                  "create"
                )
              ),
              AST$(
                16,
                1015,
                4,
                0,
                0,
                [
                  AST$(
                    17,
                    1015,
                    5,
                    0,
                    "x"
                  )
                ],
                0,
                AST$(
                  4,
                  1016,
                  1,
                  0,
                  0,
                  AST$(
                    16,
                    1016,
                    1,
                    0,
                    AST$(
                      17,
                      1016,
                      8,
                      0,
                      "F"
                    ),
                    0,
                    0,
                    AST$(20, 1016, 15, 0)
                  ),
                  AST$(
                    3,
                    1017,
                    1,
                    0,
                    AST$(
                      3,
                      1017,
                      1,
                      0,
                      AST$(
                        17,
                        1017,
                        1,
                        0,
                        "F"
                      ),
                      ".",
                      AST$(
                        9,
                        1017,
                        7,
                        0,
                        "prototype"
                      )
                    ),
                    "=",
                    AST$(
                      17,
                      1017,
                      19,
                      0,
                      "x"
                    )
                  ),
                  AST$(
                    23,
                    1018,
                    1,
                    0,
                    AST$(
                      7,
                      1018,
                      1,
                      0,
                      AST$(
                        17,
                        1018,
                        8,
                        0,
                        "F"
                      ),
                      1
                    )
                  )
                )
              )
            ),
            type: TYPE$.any,
            dependencies: []
          },
          __pow: {
            helper: AST$(
              3,
              1020,
              22,
              0,
              AST$(
                17,
                1020,
                22,
                0,
                "Math"
              ),
              ".",
              AST$(
                9,
                1020,
                28,
                0,
                "pow"
              )
            ),
            type: TYPE$.any,
            dependencies: []
          },
          __floor: {
            helper: AST$(
              3,
              1021,
              24,
              0,
              AST$(
                17,
                1021,
                24,
                0,
                "Math"
              ),
              ".",
              AST$(
                9,
                1021,
                30,
                0,
                "floor"
              )
            ),
            type: TYPE$.any,
            dependencies: []
          },
          __sqrt: {
            helper: AST$(
              3,
              1022,
              23,
              0,
              AST$(
                17,
                1022,
                23,
                0,
                "Math"
              ),
              ".",
              AST$(
                9,
                1022,
                29,
                0,
                "sqrt"
              )
            ),
            type: TYPE$.any,
            dependencies: []
          },
          __log: {
            helper: AST$(
              3,
              1023,
              22,
              0,
              AST$(
                17,
                1023,
                22,
                0,
                "Math"
              ),
              ".",
              AST$(
                9,
                1023,
                28,
                0,
                "log"
              )
            ),
            type: TYPE$.any,
            dependencies: []
          },
          __in: {
            helper: AST$(
              19,
              1167,
              21,
              0,
              AST$(
                3,
                1167,
                24,
                0,
                AST$(
                  30,
                  1167,
                  24,
                  0,
                  "typeof",
                  AST$(
                    3,
                    1167,
                    37,
                    0,
                    AST$(
                      3,
                      1167,
                      37,
                      0,
                      AST$(
                        17,
                        1167,
                        37,
                        0,
                        "Array"
                      ),
                      ".",
                      AST$(
                        9,
                        1167,
                        44,
                        0,
                        "prototype"
                      )
                    ),
                    ".",
                    AST$(
                      9,
                      1167,
                      54,
                      0,
                      "indexOf"
                    )
                  )
                ),
                "===",
                AST$(
                  9,
                  1167,
                  24,
                  0,
                  "function"
                )
              ),
              AST$(
                7,
                1168,
                1,
                0,
                AST$(
                  16,
                  1168,
                  1,
                  0,
                  0,
                  0,
                  ["indexOf"],
                  AST$(
                    4,
                    1169,
                    1,
                    0,
                    0,
                    AST$(
                      3,
                      1169,
                      1,
                      0,
                      AST$(
                        17,
                        1169,
                        8,
                        0,
                        "indexOf"
                      ),
                      "=",
                      AST$(
                        3,
                        1169,
                        19,
                        0,
                        AST$(
                          3,
                          1169,
                          19,
                          0,
                          AST$(
                            17,
                            1169,
                            19,
                            0,
                            "Array"
                          ),
                          ".",
                          AST$(
                            9,
                            1169,
                            26,
                            0,
                            "prototype"
                          )
                        ),
                        ".",
                        AST$(
                          9,
                          1169,
                          36,
                          0,
                          "indexOf"
                        )
                      )
                    ),
                    AST$(
                      23,
                      1170,
                      6,
                      0,
                      AST$(
                        16,
                        1170,
                        6,
                        0,
                        0,
                        [
                          AST$(
                            17,
                            1170,
                            7,
                            0,
                            "child"
                          ),
                          AST$(
                            17,
                            1170,
                            13,
                            0,
                            "parent"
                          )
                        ],
                        0,
                        AST$(
                          23,
                          1170,
                          35,
                          0,
                          AST$(
                            3,
                            1170,
                            35,
                            0,
                            AST$(
                              7,
                              1170,
                              35,
                              0,
                              AST$(
                                3,
                                1170,
                                35,
                                0,
                                AST$(
                                  17,
                                  1170,
                                  35,
                                  0,
                                  "indexOf"
                                ),
                                ".",
                                AST$(
                                  9,
                                  1170,
                                  35,
                                  0,
                                  "call"
                                )
                              ),
                              0,
                              AST$(
                                17,
                                1170,
                                46,
                                0,
                                "parent"
                              ),
                              AST$(
                                17,
                                1170,
                                53,
                                0,
                                "child"
                              )
                            ),
                            "!==",
                            AST$(
                              9,
                              1170,
                              63,
                              0,
                              -1
                            )
                          )
                        )
                      )
                    )
                  )
                ),
                0
              ),
              AST$(
                16,
                1172,
                4,
                0,
                0,
                [
                  AST$(
                    17,
                    1172,
                    5,
                    0,
                    "child"
                  ),
                  AST$(
                    17,
                    1172,
                    11,
                    0,
                    "parent"
                  )
                ],
                ["i", "len"],
                AST$(
                  4,
                  1173,
                  1,
                  0,
                  0,
                  AST$(
                    3,
                    1173,
                    1,
                    0,
                    AST$(
                      17,
                      1173,
                      8,
                      0,
                      "len"
                    ),
                    "=",
                    AST$(
                      30,
                      1173,
                      14,
                      0,
                      "+",
                      AST$(
                        3,
                        1173,
                        17,
                        0,
                        AST$(
                          17,
                          1173,
                          17,
                          0,
                          "parent"
                        ),
                        ".",
                        AST$(
                          9,
                          1173,
                          24,
                          0,
                          "length"
                        )
                      )
                    )
                  ),
                  AST$(
                    3,
                    1174,
                    1,
                    0,
                    AST$(
                      17,
                      1174,
                      16,
                      0,
                      "i"
                    ),
                    "=",
                    AST$(
                      9,
                      1174,
                      20,
                      0,
                      -1
                    )
                  ),
                  AST$(
                    14,
                    1175,
                    1,
                    0,
                    AST$(20, 1175, 1, 0),
                    AST$(
                      3,
                      1175,
                      10,
                      0,
                      AST$(
                        30,
                        1175,
                        12,
                        0,
                        "++",
                        AST$(
                          17,
                          1175,
                          12,
                          0,
                          "i"
                        )
                      ),
                      "<",
                      AST$(
                        17,
                        1175,
                        22,
                        0,
                        "len"
                      )
                    ),
                    AST$(20, 1175, 1, 0),
                    AST$(
                      18,
                      1176,
                      1,
                      0,
                      AST$(
                        3,
                        1176,
                        9,
                        0,
                        AST$(
                          3,
                          1176,
                          9,
                          0,
                          AST$(
                            17,
                            1176,
                            9,
                            0,
                            "child"
                          ),
                          "===",
                          AST$(
                            3,
                            1176,
                            18,
                            0,
                            AST$(
                              17,
                              1176,
                              18,
                              0,
                              "parent"
                            ),
                            ".",
                            AST$(
                              17,
                              1176,
                              26,
                              0,
                              "i"
                            )
                          )
                        ),
                        "&&",
                        AST$(
                          3,
                          1176,
                          32,
                          0,
                          AST$(
                            17,
                            1176,
                            46,
                            0,
                            "i"
                          ),
                          "in",
                          AST$(
                            17,
                            1176,
                            32,
                            0,
                            "parent"
                          )
                        )
                      ),
                      AST$(
                        23,
                        1177,
                        1,
                        0,
                        AST$(
                          9,
                          1177,
                          15,
                          0,
                          true
                        )
                      )
                    )
                  ),
                  AST$(
                    23,
                    1178,
                    1,
                    0,
                    AST$(
                      9,
                      1178,
                      1,
                      0,
                      false
                    )
                  )
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.boolean),
            dependencies: []
          },
          __genericFunc: {
            helper: AST$(
              16,
              1663,
              33,
              0,
              0,
              [
                AST$(
                  17,
                  1663,
                  34,
                  0,
                  "numArgs"
                ),
                AST$(
                  17,
                  1663,
                  53,
                  0,
                  "make"
                )
              ],
              ["any", "cache", "result"],
              AST$(
                4,
                1664,
                1,
                0,
                0,
                AST$(
                  3,
                  1664,
                  1,
                  0,
                  AST$(
                    17,
                    1664,
                    6,
                    0,
                    "cache"
                  ),
                  "=",
                  AST$(
                    7,
                    1664,
                    14,
                    0,
                    AST$(
                      17,
                      1664,
                      14,
                      0,
                      "WeakMap"
                    ),
                    0
                  )
                ),
                AST$(
                  3,
                  1665,
                  1,
                  0,
                  AST$(
                    17,
                    1665,
                    6,
                    0,
                    "any"
                  ),
                  "=",
                  AST$(21, 1665, 12, 0)
                ),
                AST$(
                  16,
                  1666,
                  1,
                  0,
                  AST$(
                    17,
                    1666,
                    6,
                    0,
                    "generic"
                  ),
                  0,
                  [
                    "_ref",
                    "current",
                    "i",
                    "item",
                    "type"
                  ],
                  AST$(
                    4,
                    1667,
                    1,
                    0,
                    0,
                    AST$(
                      3,
                      1667,
                      1,
                      0,
                      AST$(
                        17,
                        1667,
                        45,
                        0,
                        "current"
                      ),
                      "=",
                      AST$(
                        17,
                        1667,
                        55,
                        0,
                        "cache"
                      )
                    ),
                    AST$(
                      14,
                      1667,
                      1,
                      0,
                      AST$(
                        3,
                        1667,
                        1,
                        0,
                        AST$(
                          17,
                          1667,
                          15,
                          0,
                          "i"
                        ),
                        "=",
                        AST$(
                          3,
                          1667,
                          20,
                          0,
                          AST$(
                            17,
                            1667,
                            20,
                            0,
                            "numArgs"
                          ),
                          "-",
                          AST$(
                            9,
                            1667,
                            32,
                            0,
                            1
                          )
                        )
                      ),
                      AST$(
                        3,
                        1667,
                        1,
                        0,
                        AST$(
                          17,
                          1667,
                          15,
                          0,
                          "i"
                        ),
                        ">=",
                        AST$(
                          9,
                          1667,
                          37,
                          0,
                          0
                        )
                      ),
                      AST$(
                        30,
                        1667,
                        1,
                        0,
                        "--",
                        AST$(
                          17,
                          1667,
                          15,
                          0,
                          "i"
                        )
                      ),
                      AST$(
                        4,
                        1668,
                        1,
                        0,
                        0,
                        AST$(
                          18,
                          1668,
                          17,
                          0,
                          AST$(
                            3,
                            1668,
                            17,
                            0,
                            AST$(
                              3,
                              1668,
                              17,
                              0,
                              AST$(
                                17,
                                1668,
                                17,
                                0,
                                "_ref"
                              ),
                              "=",
                              AST$(
                                3,
                                1668,
                                17,
                                0,
                                AST$(1, 1668, 17, 0),
                                ".",
                                AST$(
                                  17,
                                  1668,
                                  28,
                                  0,
                                  "i"
                                )
                              )
                            ),
                            "!=",
                            AST$(
                              9,
                              1,
                              1,
                              0,
                              null
                            )
                          ),
                          AST$(
                            3,
                            1668,
                            1,
                            0,
                            AST$(
                              17,
                              1668,
                              10,
                              0,
                              "type"
                            ),
                            "=",
                            AST$(
                              17,
                              1668,
                              17,
                              0,
                              "_ref"
                            )
                          ),
                          AST$(
                            3,
                            1668,
                            1,
                            0,
                            AST$(
                              17,
                              1668,
                              10,
                              0,
                              "type"
                            ),
                            "=",
                            AST$(
                              17,
                              1668,
                              32,
                              0,
                              "any"
                            )
                          )
                        ),
                        AST$(
                          3,
                          1669,
                          1,
                          0,
                          AST$(
                            17,
                            1669,
                            18,
                            0,
                            "item"
                          ),
                          "=",
                          AST$(
                            7,
                            1669,
                            25,
                            0,
                            AST$(
                              3,
                              1669,
                              25,
                              0,
                              AST$(
                                17,
                                1669,
                                25,
                                0,
                                "current"
                              ),
                              ".",
                              AST$(
                                9,
                                1669,
                                34,
                                0,
                                "get"
                              )
                            ),
                            0,
                            AST$(
                              17,
                              1669,
                              38,
                              0,
                              "type"
                            )
                          )
                        ),
                        AST$(
                          18,
                          1670,
                          1,
                          0,
                          AST$(
                            3,
                            1670,
                            9,
                            0,
                            AST$(
                              17,
                              1670,
                              13,
                              0,
                              "item"
                            ),
                            "==",
                            AST$(
                              9,
                              1,
                              1,
                              0,
                              null
                            )
                          ),
                          AST$(
                            4,
                            1671,
                            1,
                            0,
                            0,
                            AST$(
                              18,
                              1671,
                              16,
                              0,
                              AST$(
                                3,
                                1671,
                                19,
                                0,
                                AST$(
                                  17,
                                  1671,
                                  19,
                                  0,
                                  "i"
                                ),
                                "===",
                                AST$(
                                  9,
                                  1671,
                                  25,
                                  0,
                                  0
                                )
                              ),
                              AST$(
                                3,
                                1671,
                                1,
                                0,
                                AST$(
                                  17,
                                  1671,
                                  1,
                                  0,
                                  "item"
                                ),
                                "=",
                                AST$(
                                  7,
                                  1672,
                                  1,
                                  0,
                                  AST$(
                                    3,
                                    1672,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      1672,
                                      1,
                                      0,
                                      "make"
                                    ),
                                    ".",
                                    AST$(
                                      9,
                                      1672,
                                      1,
                                      0,
                                      "apply"
                                    )
                                  ),
                                  0,
                                  AST$(25, 1672, 17, 0),
                                  AST$(1, 1672, 26, 0)
                                )
                              ),
                              AST$(
                                3,
                                1671,
                                1,
                                0,
                                AST$(
                                  17,
                                  1671,
                                  1,
                                  0,
                                  "item"
                                ),
                                "=",
                                AST$(
                                  7,
                                  1674,
                                  1,
                                  0,
                                  AST$(
                                    17,
                                    1674,
                                    1,
                                    0,
                                    "WeakMap"
                                  ),
                                  0
                                )
                              )
                            ),
                            AST$(
                              7,
                              1675,
                              1,
                              0,
                              AST$(
                                3,
                                1675,
                                1,
                                0,
                                AST$(
                                  17,
                                  1675,
                                  1,
                                  0,
                                  "current"
                                ),
                                ".",
                                AST$(
                                  9,
                                  1675,
                                  17,
                                  0,
                                  "set"
                                )
                              ),
                              0,
                              AST$(
                                17,
                                1675,
                                21,
                                0,
                                "type"
                              ),
                              AST$(
                                17,
                                1675,
                                26,
                                0,
                                "item"
                              )
                            )
                          )
                        ),
                        AST$(
                          3,
                          1667,
                          1,
                          0,
                          AST$(
                            17,
                            1667,
                            45,
                            0,
                            "current"
                          ),
                          "=",
                          AST$(
                            17,
                            1676,
                            1,
                            0,
                            "item"
                          )
                        )
                      )
                    ),
                    AST$(
                      23,
                      1667,
                      45,
                      0,
                      AST$(
                        17,
                        1667,
                        45,
                        0,
                        "current"
                      )
                    )
                  )
                ),
                AST$(
                  3,
                  1677,
                  1,
                  0,
                  AST$(
                    17,
                    1677,
                    6,
                    0,
                    "result"
                  ),
                  "=",
                  AST$(
                    7,
                    1677,
                    15,
                    0,
                    AST$(
                      17,
                      1677,
                      15,
                      0,
                      "generic"
                    ),
                    0
                  )
                ),
                AST$(
                  3,
                  1678,
                  1,
                  0,
                  AST$(
                    3,
                    1678,
                    1,
                    0,
                    AST$(
                      17,
                      1678,
                      1,
                      0,
                      "result"
                    ),
                    ".",
                    AST$(
                      9,
                      1678,
                      10,
                      0,
                      "generic"
                    )
                  ),
                  "=",
                  AST$(
                    17,
                    1678,
                    20,
                    0,
                    "generic"
                  )
                ),
                AST$(
                  23,
                  1679,
                  1,
                  0,
                  AST$(
                    17,
                    1679,
                    1,
                    0,
                    "result"
                  )
                )
              )
            ),
            type: TYPE$["function"],
            dependencies: ["__toArray", "WeakMap"]
          },
          __range: {
            helper: AST$(
              16,
              1989,
              26,
              0,
              0,
              [
                AST$(
                  17,
                  1989,
                  27,
                  0,
                  "start"
                ),
                AST$(
                  17,
                  1989,
                  43,
                  0,
                  "end"
                ),
                AST$(
                  17,
                  1989,
                  58,
                  0,
                  "step"
                ),
                AST$(
                  17,
                  1989,
                  74,
                  0,
                  "inclusive"
                )
              ],
              ["i", "result"],
              AST$(
                4,
                1989,
                26,
                0,
                0,
                AST$(
                  18,
                  1989,
                  26,
                  0,
                  AST$(
                    3,
                    1989,
                    26,
                    0,
                    AST$(
                      30,
                      1989,
                      26,
                      0,
                      "typeof",
                      AST$(
                        17,
                        1989,
                        27,
                        0,
                        "start"
                      )
                    ),
                    "!==",
                    AST$(
                      9,
                      1989,
                      26,
                      0,
                      "number"
                    )
                  ),
                  AST$(
                    26,
                    1989,
                    26,
                    0,
                    AST$(
                      7,
                      1989,
                      26,
                      0,
                      AST$(
                        17,
                        1989,
                        26,
                        0,
                        "TypeError"
                      ),
                      0,
                      AST$(
                        3,
                        1989,
                        26,
                        0,
                        AST$(
                          9,
                          1989,
                          26,
                          0,
                          "Expected start to be a Number, got "
                        ),
                        "+",
                        AST$(
                          7,
                          1989,
                          26,
                          0,
                          AST$(
                            17,
                            1989,
                            26,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            1989,
                            27,
                            0,
                            "start"
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  1989,
                  26,
                  0,
                  AST$(
                    3,
                    1989,
                    26,
                    0,
                    AST$(
                      30,
                      1989,
                      26,
                      0,
                      "typeof",
                      AST$(
                        17,
                        1989,
                        43,
                        0,
                        "end"
                      )
                    ),
                    "!==",
                    AST$(
                      9,
                      1989,
                      26,
                      0,
                      "number"
                    )
                  ),
                  AST$(
                    26,
                    1989,
                    26,
                    0,
                    AST$(
                      7,
                      1989,
                      26,
                      0,
                      AST$(
                        17,
                        1989,
                        26,
                        0,
                        "TypeError"
                      ),
                      0,
                      AST$(
                        3,
                        1989,
                        26,
                        0,
                        AST$(
                          9,
                          1989,
                          26,
                          0,
                          "Expected end to be a Number, got "
                        ),
                        "+",
                        AST$(
                          7,
                          1989,
                          26,
                          0,
                          AST$(
                            17,
                            1989,
                            26,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            1989,
                            43,
                            0,
                            "end"
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  1989,
                  26,
                  0,
                  AST$(
                    3,
                    1989,
                    26,
                    0,
                    AST$(
                      30,
                      1989,
                      26,
                      0,
                      "typeof",
                      AST$(
                        17,
                        1989,
                        58,
                        0,
                        "step"
                      )
                    ),
                    "!==",
                    AST$(
                      9,
                      1989,
                      26,
                      0,
                      "number"
                    )
                  ),
                  AST$(
                    26,
                    1989,
                    26,
                    0,
                    AST$(
                      7,
                      1989,
                      26,
                      0,
                      AST$(
                        17,
                        1989,
                        26,
                        0,
                        "TypeError"
                      ),
                      0,
                      AST$(
                        3,
                        1989,
                        26,
                        0,
                        AST$(
                          9,
                          1989,
                          26,
                          0,
                          "Expected step to be a Number, got "
                        ),
                        "+",
                        AST$(
                          7,
                          1989,
                          26,
                          0,
                          AST$(
                            17,
                            1989,
                            26,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            1989,
                            58,
                            0,
                            "step"
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  1989,
                  26,
                  0,
                  AST$(
                    3,
                    1989,
                    26,
                    0,
                    AST$(
                      17,
                      1989,
                      74,
                      0,
                      "inclusive"
                    ),
                    "==",
                    AST$(
                      9,
                      1,
                      1,
                      0,
                      null
                    )
                  ),
                  AST$(
                    3,
                    1989,
                    26,
                    0,
                    AST$(
                      17,
                      1989,
                      74,
                      0,
                      "inclusive"
                    ),
                    "=",
                    AST$(
                      9,
                      1,
                      1,
                      0,
                      false
                    )
                  ),
                  AST$(
                    18,
                    1989,
                    26,
                    0,
                    AST$(
                      3,
                      1989,
                      26,
                      0,
                      AST$(
                        30,
                        1989,
                        26,
                        0,
                        "typeof",
                        AST$(
                          17,
                          1989,
                          74,
                          0,
                          "inclusive"
                        )
                      ),
                      "!==",
                      AST$(
                        9,
                        1989,
                        26,
                        0,
                        "boolean"
                      )
                    ),
                    AST$(
                      26,
                      1989,
                      26,
                      0,
                      AST$(
                        7,
                        1989,
                        26,
                        0,
                        AST$(
                          17,
                          1989,
                          26,
                          0,
                          "TypeError"
                        ),
                        0,
                        AST$(
                          3,
                          1989,
                          26,
                          0,
                          AST$(
                            9,
                            1989,
                            26,
                            0,
                            "Expected inclusive to be a Boolean, got "
                          ),
                          "+",
                          AST$(
                            7,
                            1989,
                            26,
                            0,
                            AST$(
                              17,
                              1989,
                              26,
                              0,
                              "__typeof"
                            ),
                            0,
                            AST$(
                              17,
                              1989,
                              74,
                              0,
                              "inclusive"
                            )
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  1990,
                  1,
                  0,
                  AST$(
                    3,
                    1990,
                    5,
                    0,
                    AST$(
                      17,
                      1990,
                      5,
                      0,
                      "step"
                    ),
                    "===",
                    AST$(
                      9,
                      1990,
                      14,
                      0,
                      0
                    )
                  ),
                  AST$(
                    26,
                    1991,
                    1,
                    0,
                    AST$(
                      7,
                      1991,
                      10,
                      0,
                      AST$(
                        17,
                        1991,
                        10,
                        0,
                        "RangeError"
                      ),
                      0,
                      AST$(
                        9,
                        1991,
                        22,
                        0,
                        "step cannot be zero"
                      )
                    )
                  ),
                  AST$(
                    18,
                    1990,
                    1,
                    0,
                    AST$(
                      30,
                      1992,
                      10,
                      0,
                      "!",
                      AST$(
                        7,
                        1992,
                        14,
                        0,
                        AST$(
                          17,
                          1992,
                          14,
                          0,
                          "isFinite"
                        ),
                        0,
                        AST$(
                          17,
                          1992,
                          25,
                          0,
                          "start"
                        )
                      )
                    ),
                    AST$(
                      26,
                      1993,
                      1,
                      0,
                      AST$(
                        7,
                        1993,
                        10,
                        0,
                        AST$(
                          17,
                          1993,
                          10,
                          0,
                          "RangeError"
                        ),
                        0,
                        AST$(
                          9,
                          1993,
                          22,
                          0,
                          "start must be finite"
                        )
                      )
                    ),
                    AST$(
                      18,
                      1990,
                      1,
                      0,
                      AST$(
                        30,
                        1994,
                        10,
                        0,
                        "!",
                        AST$(
                          7,
                          1994,
                          14,
                          0,
                          AST$(
                            17,
                            1994,
                            14,
                            0,
                            "isFinite"
                          ),
                          0,
                          AST$(
                            17,
                            1994,
                            25,
                            0,
                            "end"
                          )
                        )
                      ),
                      AST$(
                        26,
                        1995,
                        1,
                        0,
                        AST$(
                          7,
                          1995,
                          10,
                          0,
                          AST$(
                            17,
                            1995,
                            10,
                            0,
                            "RangeError"
                          ),
                          0,
                          AST$(
                            9,
                            1995,
                            22,
                            0,
                            "end must be finite"
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  3,
                  1996,
                  1,
                  0,
                  AST$(
                    17,
                    1996,
                    6,
                    0,
                    "result"
                  ),
                  "=",
                  AST$(2, 1996, 15, 0)
                ),
                AST$(
                  3,
                  1997,
                  1,
                  0,
                  AST$(
                    17,
                    1997,
                    14,
                    0,
                    "i"
                  ),
                  "=",
                  AST$(
                    17,
                    1997,
                    18,
                    0,
                    "start"
                  )
                ),
                AST$(
                  18,
                  1998,
                  1,
                  0,
                  AST$(
                    3,
                    1998,
                    5,
                    0,
                    AST$(
                      17,
                      1998,
                      5,
                      0,
                      "step"
                    ),
                    ">",
                    AST$(
                      9,
                      1998,
                      14,
                      0,
                      0
                    )
                  ),
                  AST$(
                    4,
                    1999,
                    1,
                    0,
                    0,
                    AST$(
                      14,
                      1999,
                      1,
                      0,
                      AST$(20, 1999, 1, 0),
                      AST$(
                        3,
                        1999,
                        10,
                        0,
                        AST$(
                          17,
                          1999,
                          10,
                          0,
                          "i"
                        ),
                        "<",
                        AST$(
                          17,
                          1999,
                          15,
                          0,
                          "end"
                        )
                      ),
                      AST$(
                        3,
                        1999,
                        20,
                        0,
                        AST$(
                          17,
                          1999,
                          20,
                          0,
                          "i"
                        ),
                        "+=",
                        AST$(
                          17,
                          1999,
                          26,
                          0,
                          "step"
                        )
                      ),
                      AST$(
                        7,
                        2000,
                        1,
                        0,
                        AST$(
                          3,
                          2000,
                          1,
                          0,
                          AST$(
                            17,
                            2000,
                            1,
                            0,
                            "result"
                          ),
                          ".",
                          AST$(
                            9,
                            2000,
                            14,
                            0,
                            "push"
                          )
                        ),
                        0,
                        AST$(
                          17,
                          2000,
                          19,
                          0,
                          "i"
                        )
                      )
                    ),
                    AST$(
                      18,
                      2001,
                      1,
                      0,
                      AST$(
                        3,
                        2001,
                        7,
                        0,
                        AST$(
                          17,
                          2001,
                          7,
                          0,
                          "inclusive"
                        ),
                        "&&",
                        AST$(
                          3,
                          2001,
                          21,
                          0,
                          AST$(
                            17,
                            2001,
                            21,
                            0,
                            "i"
                          ),
                          "<=",
                          AST$(
                            17,
                            2001,
                            27,
                            0,
                            "end"
                          )
                        )
                      ),
                      AST$(
                        7,
                        2002,
                        1,
                        0,
                        AST$(
                          3,
                          2002,
                          1,
                          0,
                          AST$(
                            17,
                            2002,
                            1,
                            0,
                            "result"
                          ),
                          ".",
                          AST$(
                            9,
                            2002,
                            14,
                            0,
                            "push"
                          )
                        ),
                        0,
                        AST$(
                          17,
                          2002,
                          19,
                          0,
                          "i"
                        )
                      )
                    )
                  ),
                  AST$(
                    4,
                    2004,
                    1,
                    0,
                    0,
                    AST$(
                      14,
                      2004,
                      1,
                      0,
                      AST$(20, 2004, 1, 0),
                      AST$(
                        3,
                        2004,
                        10,
                        0,
                        AST$(
                          17,
                          2004,
                          10,
                          0,
                          "i"
                        ),
                        ">",
                        AST$(
                          17,
                          2004,
                          15,
                          0,
                          "end"
                        )
                      ),
                      AST$(
                        3,
                        2004,
                        20,
                        0,
                        AST$(
                          17,
                          2004,
                          20,
                          0,
                          "i"
                        ),
                        "+=",
                        AST$(
                          17,
                          2004,
                          26,
                          0,
                          "step"
                        )
                      ),
                      AST$(
                        7,
                        2005,
                        1,
                        0,
                        AST$(
                          3,
                          2005,
                          1,
                          0,
                          AST$(
                            17,
                            2005,
                            1,
                            0,
                            "result"
                          ),
                          ".",
                          AST$(
                            9,
                            2005,
                            14,
                            0,
                            "push"
                          )
                        ),
                        0,
                        AST$(
                          17,
                          2005,
                          19,
                          0,
                          "i"
                        )
                      )
                    ),
                    AST$(
                      18,
                      2006,
                      1,
                      0,
                      AST$(
                        3,
                        2006,
                        7,
                        0,
                        AST$(
                          17,
                          2006,
                          7,
                          0,
                          "inclusive"
                        ),
                        "&&",
                        AST$(
                          3,
                          2006,
                          21,
                          0,
                          AST$(
                            17,
                            2006,
                            21,
                            0,
                            "i"
                          ),
                          ">=",
                          AST$(
                            17,
                            2006,
                            27,
                            0,
                            "end"
                          )
                        )
                      ),
                      AST$(
                        7,
                        2007,
                        1,
                        0,
                        AST$(
                          3,
                          2007,
                          1,
                          0,
                          AST$(
                            17,
                            2007,
                            1,
                            0,
                            "result"
                          ),
                          ".",
                          AST$(
                            9,
                            2007,
                            14,
                            0,
                            "push"
                          )
                        ),
                        0,
                        AST$(
                          17,
                          2007,
                          19,
                          0,
                          "i"
                        )
                      )
                    )
                  )
                ),
                AST$(
                  23,
                  2008,
                  1,
                  0,
                  AST$(
                    17,
                    2008,
                    1,
                    0,
                    "result"
                  )
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.numberArray),
            dependencies: ["__typeof"]
          },
          __step: {
            helper: AST$(
              16,
              2010,
              25,
              0,
              0,
              [
                AST$(
                  17,
                  2010,
                  26,
                  0,
                  "array"
                ),
                AST$(
                  17,
                  2010,
                  32,
                  0,
                  "step"
                )
              ],
              ["i", "len", "result"],
              AST$(
                4,
                2010,
                25,
                0,
                0,
                AST$(
                  18,
                  2010,
                  25,
                  0,
                  AST$(
                    3,
                    2010,
                    25,
                    0,
                    AST$(
                      30,
                      2010,
                      25,
                      0,
                      "typeof",
                      AST$(
                        17,
                        2010,
                        32,
                        0,
                        "step"
                      )
                    ),
                    "!==",
                    AST$(
                      9,
                      2010,
                      25,
                      0,
                      "number"
                    )
                  ),
                  AST$(
                    26,
                    2010,
                    25,
                    0,
                    AST$(
                      7,
                      2010,
                      25,
                      0,
                      AST$(
                        17,
                        2010,
                        25,
                        0,
                        "TypeError"
                      ),
                      0,
                      AST$(
                        3,
                        2010,
                        25,
                        0,
                        AST$(
                          9,
                          2010,
                          25,
                          0,
                          "Expected step to be a Number, got "
                        ),
                        "+",
                        AST$(
                          7,
                          2010,
                          25,
                          0,
                          AST$(
                            17,
                            2010,
                            25,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            2010,
                            32,
                            0,
                            "step"
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  2011,
                  1,
                  0,
                  AST$(
                    3,
                    2011,
                    5,
                    0,
                    AST$(
                      17,
                      2011,
                      5,
                      0,
                      "step"
                    ),
                    "===",
                    AST$(
                      9,
                      2011,
                      14,
                      0,
                      0
                    )
                  ),
                  AST$(
                    26,
                    2012,
                    1,
                    0,
                    AST$(
                      7,
                      2012,
                      10,
                      0,
                      AST$(
                        17,
                        2012,
                        10,
                        0,
                        "RangeError"
                      ),
                      0,
                      AST$(
                        9,
                        2012,
                        22,
                        0,
                        "step cannot be zero"
                      )
                    )
                  ),
                  AST$(
                    18,
                    2011,
                    1,
                    0,
                    AST$(
                      3,
                      2013,
                      10,
                      0,
                      AST$(
                        17,
                        2013,
                        10,
                        0,
                        "step"
                      ),
                      "===",
                      AST$(
                        9,
                        2013,
                        19,
                        0,
                        1
                      )
                    ),
                    AST$(
                      23,
                      2014,
                      1,
                      0,
                      AST$(
                        7,
                        2014,
                        1,
                        0,
                        AST$(
                          17,
                          2014,
                          1,
                          0,
                          "__toArray"
                        ),
                        0,
                        AST$(
                          17,
                          2014,
                          16,
                          0,
                          "array"
                        )
                      )
                    ),
                    AST$(
                      18,
                      2011,
                      1,
                      0,
                      AST$(
                        3,
                        2015,
                        10,
                        0,
                        AST$(
                          17,
                          2015,
                          10,
                          0,
                          "step"
                        ),
                        "===",
                        AST$(
                          9,
                          2015,
                          18,
                          0,
                          -1
                        )
                      ),
                      AST$(
                        23,
                        2016,
                        1,
                        0,
                        AST$(
                          7,
                          2016,
                          1,
                          0,
                          AST$(
                            3,
                            2016,
                            1,
                            0,
                            AST$(
                              7,
                              2016,
                              1,
                              0,
                              AST$(
                                3,
                                2016,
                                1,
                                0,
                                AST$(
                                  17,
                                  2016,
                                  1,
                                  0,
                                  "__slice"
                                ),
                                ".",
                                AST$(
                                  9,
                                  2016,
                                  1,
                                  0,
                                  "call"
                                )
                              ),
                              0,
                              AST$(
                                17,
                                2016,
                                14,
                                0,
                                "array"
                              )
                            ),
                            ".",
                            AST$(
                              9,
                              2016,
                              21,
                              0,
                              "reverse"
                            )
                          ),
                          0
                        )
                      ),
                      AST$(
                        18,
                        2011,
                        1,
                        0,
                        AST$(
                          3,
                          2017,
                          10,
                          0,
                          AST$(
                            3,
                            2017,
                            10,
                            0,
                            AST$(
                              17,
                              2017,
                              10,
                              0,
                              "step"
                            ),
                            "%",
                            AST$(
                              9,
                              2017,
                              23,
                              0,
                              1
                            )
                          ),
                          "!==",
                          AST$(
                            9,
                            2017,
                            10,
                            0,
                            0
                          )
                        ),
                        AST$(
                          26,
                          2018,
                          1,
                          0,
                          AST$(
                            7,
                            2018,
                            10,
                            0,
                            AST$(
                              17,
                              2018,
                              10,
                              0,
                              "RangeError"
                            ),
                            0,
                            AST$(
                              3,
                              2018,
                              22,
                              0,
                              AST$(
                                9,
                                2018,
                                22,
                                0,
                                "step must be an integer, got "
                              ),
                              "+",
                              AST$(
                                7,
                                2018,
                                54,
                                0,
                                AST$(
                                  17,
                                  2018,
                                  54,
                                  0,
                                  "String"
                                ),
                                0,
                                AST$(
                                  17,
                                  2018,
                                  61,
                                  0,
                                  "step"
                                )
                              )
                            )
                          )
                        ),
                        AST$(
                          4,
                          2020,
                          1,
                          0,
                          0,
                          AST$(
                            3,
                            2020,
                            1,
                            0,
                            AST$(
                              17,
                              2020,
                              8,
                              0,
                              "result"
                            ),
                            "=",
                            AST$(2, 2020, 17, 0)
                          ),
                          AST$(
                            18,
                            2021,
                            1,
                            0,
                            AST$(
                              3,
                              2021,
                              7,
                              0,
                              AST$(
                                17,
                                2021,
                                7,
                                0,
                                "step"
                              ),
                              ">",
                              AST$(
                                9,
                                2021,
                                15,
                                0,
                                0
                              )
                            ),
                            AST$(
                              4,
                              2022,
                              1,
                              0,
                              0,
                              AST$(
                                3,
                                2022,
                                1,
                                0,
                                AST$(
                                  17,
                                  2022,
                                  18,
                                  0,
                                  "i"
                                ),
                                "=",
                                AST$(
                                  9,
                                  2022,
                                  23,
                                  0,
                                  0
                                )
                              ),
                              AST$(
                                3,
                                2023,
                                1,
                                0,
                                AST$(
                                  17,
                                  2023,
                                  10,
                                  0,
                                  "len"
                                ),
                                "=",
                                AST$(
                                  7,
                                  2023,
                                  16,
                                  0,
                                  AST$(
                                    17,
                                    2023,
                                    16,
                                    0,
                                    "__num"
                                  ),
                                  0,
                                  AST$(
                                    3,
                                    2023,
                                    18,
                                    0,
                                    AST$(
                                      17,
                                      2023,
                                      18,
                                      0,
                                      "array"
                                    ),
                                    ".",
                                    AST$(
                                      9,
                                      2023,
                                      24,
                                      0,
                                      "length"
                                    )
                                  )
                                )
                              ),
                              AST$(
                                14,
                                2024,
                                1,
                                0,
                                AST$(20, 2024, 1, 0),
                                AST$(
                                  3,
                                  2024,
                                  12,
                                  0,
                                  AST$(
                                    17,
                                    2024,
                                    12,
                                    0,
                                    "i"
                                  ),
                                  "<",
                                  AST$(
                                    17,
                                    2024,
                                    16,
                                    0,
                                    "len"
                                  )
                                ),
                                AST$(
                                  3,
                                  2024,
                                  21,
                                  0,
                                  AST$(
                                    17,
                                    2024,
                                    21,
                                    0,
                                    "i"
                                  ),
                                  "+=",
                                  AST$(
                                    17,
                                    2024,
                                    26,
                                    0,
                                    "step"
                                  )
                                ),
                                AST$(
                                  7,
                                  2025,
                                  1,
                                  0,
                                  AST$(
                                    3,
                                    2025,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      2025,
                                      1,
                                      0,
                                      "result"
                                    ),
                                    ".",
                                    AST$(
                                      9,
                                      2025,
                                      16,
                                      0,
                                      "push"
                                    )
                                  ),
                                  0,
                                  AST$(
                                    3,
                                    2025,
                                    21,
                                    0,
                                    AST$(
                                      17,
                                      2025,
                                      21,
                                      0,
                                      "array"
                                    ),
                                    ".",
                                    AST$(
                                      17,
                                      2025,
                                      27,
                                      0,
                                      "i"
                                    )
                                  )
                                )
                              )
                            ),
                            AST$(
                              4,
                              2027,
                              1,
                              0,
                              0,
                              AST$(
                                3,
                                2027,
                                1,
                                0,
                                AST$(
                                  17,
                                  2027,
                                  18,
                                  0,
                                  "i"
                                ),
                                "=",
                                AST$(
                                  3,
                                  2027,
                                  22,
                                  0,
                                  AST$(
                                    7,
                                    2027,
                                    22,
                                    0,
                                    AST$(
                                      17,
                                      2027,
                                      22,
                                      0,
                                      "__num"
                                    ),
                                    0,
                                    AST$(
                                      3,
                                      2027,
                                      22,
                                      0,
                                      AST$(
                                        17,
                                        2027,
                                        22,
                                        0,
                                        "array"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        2027,
                                        29,
                                        0,
                                        "length"
                                      )
                                    )
                                  ),
                                  "-",
                                  AST$(
                                    9,
                                    2027,
                                    38,
                                    0,
                                    1
                                  )
                                )
                              ),
                              AST$(
                                14,
                                2028,
                                1,
                                0,
                                AST$(20, 2028, 1, 0),
                                AST$(
                                  3,
                                  2028,
                                  12,
                                  0,
                                  AST$(
                                    17,
                                    2028,
                                    12,
                                    0,
                                    "i"
                                  ),
                                  ">=",
                                  AST$(
                                    9,
                                    2028,
                                    18,
                                    0,
                                    0
                                  )
                                ),
                                AST$(
                                  3,
                                  2028,
                                  20,
                                  0,
                                  AST$(
                                    17,
                                    2028,
                                    20,
                                    0,
                                    "i"
                                  ),
                                  "+=",
                                  AST$(
                                    17,
                                    2028,
                                    25,
                                    0,
                                    "step"
                                  )
                                ),
                                AST$(
                                  7,
                                  2029,
                                  1,
                                  0,
                                  AST$(
                                    3,
                                    2029,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      2029,
                                      1,
                                      0,
                                      "result"
                                    ),
                                    ".",
                                    AST$(
                                      9,
                                      2029,
                                      16,
                                      0,
                                      "push"
                                    )
                                  ),
                                  0,
                                  AST$(
                                    3,
                                    2029,
                                    21,
                                    0,
                                    AST$(
                                      17,
                                      2029,
                                      21,
                                      0,
                                      "array"
                                    ),
                                    ".",
                                    AST$(
                                      17,
                                      2029,
                                      27,
                                      0,
                                      "i"
                                    )
                                  )
                                )
                              )
                            )
                          ),
                          AST$(
                            23,
                            2030,
                            1,
                            0,
                            AST$(
                              17,
                              2030,
                              1,
                              0,
                              "result"
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.array),
            dependencies: ["__num", "__slice", "__toArray", "__typeof"]
          },
          __sliceStep: {
            helper: AST$(
              16,
              2032,
              31,
              0,
              0,
              [
                AST$(
                  17,
                  2032,
                  32,
                  0,
                  "array"
                ),
                AST$(
                  17,
                  2032,
                  38,
                  0,
                  "start"
                ),
                AST$(
                  17,
                  2032,
                  45,
                  0,
                  "end"
                ),
                AST$(
                  17,
                  2032,
                  58,
                  0,
                  "step"
                ),
                AST$(
                  17,
                  2032,
                  64,
                  0,
                  "inclusive"
                )
              ],
              ["arr"],
              AST$(
                4,
                2033,
                1,
                0,
                0,
                AST$(
                  18,
                  2033,
                  12,
                  0,
                  AST$(
                    3,
                    2033,
                    15,
                    0,
                    AST$(
                      17,
                      2033,
                      15,
                      0,
                      "step"
                    ),
                    "<",
                    AST$(
                      9,
                      2033,
                      24,
                      0,
                      0
                    )
                  ),
                  AST$(
                    3,
                    2033,
                    1,
                    0,
                    AST$(
                      17,
                      2033,
                      6,
                      0,
                      "arr"
                    ),
                    "=",
                    AST$(
                      7,
                      2034,
                      1,
                      0,
                      AST$(
                        3,
                        2034,
                        1,
                        0,
                        AST$(
                          17,
                          2034,
                          1,
                          0,
                          "__slice"
                        ),
                        ".",
                        AST$(
                          9,
                          2034,
                          1,
                          0,
                          "call"
                        )
                      ),
                      0,
                      AST$(
                        17,
                        2034,
                        14,
                        0,
                        "array"
                      ),
                      AST$(
                        19,
                        2034,
                        20,
                        0,
                        AST$(
                          17,
                          2034,
                          23,
                          0,
                          "inclusive"
                        ),
                        AST$(
                          17,
                          2034,
                          38,
                          0,
                          "end"
                        ),
                        AST$(
                          3,
                          2034,
                          47,
                          0,
                          AST$(
                            30,
                            2034,
                            47,
                            0,
                            "+",
                            AST$(
                              17,
                              2034,
                              47,
                              0,
                              "end"
                            )
                          ),
                          "+",
                          AST$(
                            9,
                            2034,
                            55,
                            0,
                            1
                          )
                        )
                      ),
                      AST$(
                        3,
                        2034,
                        57,
                        0,
                        AST$(
                          3,
                          2034,
                          57,
                          0,
                          AST$(
                            30,
                            2034,
                            57,
                            0,
                            "+",
                            AST$(
                              17,
                              2034,
                              57,
                              0,
                              "start"
                            )
                          ),
                          "+",
                          AST$(
                            9,
                            2034,
                            67,
                            0,
                            1
                          )
                        ),
                        "||",
                        AST$(
                          9,
                          2034,
                          71,
                          0,
                          1/0
                        )
                      )
                    )
                  ),
                  AST$(
                    3,
                    2033,
                    1,
                    0,
                    AST$(
                      17,
                      2033,
                      6,
                      0,
                      "arr"
                    ),
                    "=",
                    AST$(
                      7,
                      2036,
                      1,
                      0,
                      AST$(
                        3,
                        2036,
                        1,
                        0,
                        AST$(
                          17,
                          2036,
                          1,
                          0,
                          "__slice"
                        ),
                        ".",
                        AST$(
                          9,
                          2036,
                          1,
                          0,
                          "call"
                        )
                      ),
                      0,
                      AST$(
                        17,
                        2036,
                        14,
                        0,
                        "array"
                      ),
                      AST$(
                        17,
                        2036,
                        20,
                        0,
                        "start"
                      ),
                      AST$(
                        19,
                        2036,
                        27,
                        0,
                        AST$(
                          17,
                          2036,
                          30,
                          0,
                          "inclusive"
                        ),
                        AST$(
                          3,
                          2036,
                          45,
                          0,
                          AST$(
                            3,
                            2036,
                            45,
                            0,
                            AST$(
                              30,
                              2036,
                              45,
                              0,
                              "+",
                              AST$(
                                17,
                                2036,
                                45,
                                0,
                                "end"
                              )
                            ),
                            "+",
                            AST$(
                              9,
                              2036,
                              53,
                              0,
                              1
                            )
                          ),
                          "||",
                          AST$(
                            9,
                            2036,
                            57,
                            0,
                            1/0
                          )
                        ),
                        AST$(
                          17,
                          2036,
                          71,
                          0,
                          "end"
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  2037,
                  1,
                  0,
                  AST$(
                    3,
                    2037,
                    5,
                    0,
                    AST$(
                      17,
                      2037,
                      5,
                      0,
                      "step"
                    ),
                    "===",
                    AST$(
                      9,
                      2037,
                      14,
                      0,
                      1
                    )
                  ),
                  AST$(
                    23,
                    2038,
                    1,
                    0,
                    AST$(
                      17,
                      2038,
                      1,
                      0,
                      "arr"
                    )
                  ),
                  AST$(
                    18,
                    2037,
                    1,
                    0,
                    AST$(
                      3,
                      2039,
                      10,
                      0,
                      AST$(
                        17,
                        2039,
                        10,
                        0,
                        "step"
                      ),
                      "===",
                      AST$(
                        9,
                        2039,
                        18,
                        0,
                        -1
                      )
                    ),
                    AST$(
                      23,
                      2040,
                      1,
                      0,
                      AST$(
                        7,
                        2040,
                        1,
                        0,
                        AST$(
                          3,
                          2040,
                          1,
                          0,
                          AST$(
                            17,
                            2040,
                            1,
                            0,
                            "arr"
                          ),
                          ".",
                          AST$(
                            9,
                            2040,
                            9,
                            0,
                            "reverse"
                          )
                        ),
                        0
                      )
                    ),
                    AST$(
                      23,
                      2042,
                      1,
                      0,
                      AST$(
                        7,
                        2042,
                        1,
                        0,
                        AST$(
                          17,
                          2042,
                          1,
                          0,
                          "__step"
                        ),
                        0,
                        AST$(
                          17,
                          2042,
                          12,
                          0,
                          "arr"
                        ),
                        AST$(
                          17,
                          2042,
                          16,
                          0,
                          "step"
                        )
                      )
                    )
                  )
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.array),
            dependencies: ["__slice", "__step"]
          },
          __arrayToIter: {
            helper: AST$(
              7,
              2141,
              32,
              0,
              AST$(
                16,
                2141,
                32,
                0,
                0,
                0,
                ["proto"],
                AST$(
                  4,
                  2142,
                  1,
                  0,
                  0,
                  AST$(
                    3,
                    2142,
                    1,
                    0,
                    AST$(
                      17,
                      2142,
                      6,
                      0,
                      "proto"
                    ),
                    "=",
                    AST$(
                      21,
                      2142,
                      14,
                      0,
                      2143,
                      5,
                      void 0,
                      "iterator",
                      AST$(
                        16,
                        2143,
                        16,
                        0,
                        0,
                        0,
                        0,
                        AST$(
                          23,
                          2143,
                          18,
                          0,
                          AST$(25, 2143, 18, 0)
                        )
                      ),
                      2144,
                      5,
                      void 0,
                      "next",
                      AST$(
                        16,
                        2144,
                        12,
                        0,
                        0,
                        0,
                        ["array", "i"],
                        AST$(
                          4,
                          2145,
                          1,
                          0,
                          0,
                          AST$(
                            3,
                            2145,
                            1,
                            0,
                            AST$(
                              17,
                              2145,
                              10,
                              0,
                              "i"
                            ),
                            "=",
                            AST$(
                              3,
                              2145,
                              14,
                              0,
                              AST$(
                                7,
                                2145,
                                14,
                                0,
                                AST$(
                                  17,
                                  2145,
                                  14,
                                  0,
                                  "__num"
                                ),
                                0,
                                AST$(
                                  3,
                                  2145,
                                  14,
                                  0,
                                  AST$(25, 2145, 14, 0),
                                  ".",
                                  AST$(
                                    9,
                                    2145,
                                    16,
                                    0,
                                    "index"
                                  )
                                )
                              ),
                              "+",
                              AST$(
                                9,
                                2145,
                                24,
                                0,
                                1
                              )
                            )
                          ),
                          AST$(
                            3,
                            2146,
                            1,
                            0,
                            AST$(
                              17,
                              2146,
                              10,
                              0,
                              "array"
                            ),
                            "=",
                            AST$(
                              3,
                              2146,
                              18,
                              0,
                              AST$(25, 2146, 18, 0),
                              ".",
                              AST$(
                                9,
                                2146,
                                20,
                                0,
                                "array"
                              )
                            )
                          ),
                          AST$(
                            18,
                            2147,
                            1,
                            0,
                            AST$(
                              3,
                              2147,
                              9,
                              0,
                              AST$(
                                17,
                                2147,
                                9,
                                0,
                                "i"
                              ),
                              ">=",
                              AST$(
                                7,
                                2147,
                                9,
                                0,
                                AST$(
                                  17,
                                  2147,
                                  9,
                                  0,
                                  "__num"
                                ),
                                0,
                                AST$(
                                  3,
                                  2147,
                                  14,
                                  0,
                                  AST$(
                                    17,
                                    2147,
                                    14,
                                    0,
                                    "array"
                                  ),
                                  ".",
                                  AST$(
                                    9,
                                    2147,
                                    21,
                                    0,
                                    "length"
                                  )
                                )
                              )
                            ),
                            AST$(
                              23,
                              2148,
                              1,
                              0,
                              AST$(
                                21,
                                2148,
                                1,
                                0,
                                2148,
                                11,
                                void 0,
                                "done",
                                AST$(
                                  9,
                                  2148,
                                  16,
                                  0,
                                  true
                                ),
                                2148,
                                22,
                                void 0,
                                "value",
                                AST$(9, 2148, 29, 0)
                              )
                            ),
                            AST$(
                              4,
                              2150,
                              1,
                              0,
                              0,
                              AST$(
                                3,
                                2150,
                                1,
                                0,
                                AST$(
                                  3,
                                  2150,
                                  1,
                                  0,
                                  AST$(25, 2150, 1, 0),
                                  ".",
                                  AST$(
                                    9,
                                    2150,
                                    10,
                                    0,
                                    "index"
                                  )
                                ),
                                "=",
                                AST$(
                                  17,
                                  2150,
                                  18,
                                  0,
                                  "i"
                                )
                              ),
                              AST$(
                                23,
                                2151,
                                1,
                                0,
                                AST$(
                                  21,
                                  2151,
                                  1,
                                  0,
                                  2151,
                                  11,
                                  void 0,
                                  "done",
                                  AST$(
                                    9,
                                    2151,
                                    16,
                                    0,
                                    false
                                  ),
                                  2151,
                                  23,
                                  void 0,
                                  "value",
                                  AST$(
                                    3,
                                    2151,
                                    30,
                                    0,
                                    AST$(
                                      17,
                                      2151,
                                      30,
                                      0,
                                      "array"
                                    ),
                                    ".",
                                    AST$(
                                      17,
                                      2151,
                                      37,
                                      0,
                                      "i"
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  ),
                  AST$(
                    23,
                    2153,
                    4,
                    0,
                    AST$(
                      16,
                      2153,
                      4,
                      0,
                      0,
                      [
                        AST$(
                          17,
                          2153,
                          5,
                          0,
                          "array"
                        )
                      ],
                      ["_o"],
                      AST$(
                        4,
                        2153,
                        4,
                        0,
                        0,
                        AST$(
                          18,
                          2153,
                          4,
                          0,
                          AST$(
                            30,
                            2153,
                            4,
                            0,
                            "!",
                            AST$(
                              7,
                              2153,
                              4,
                              0,
                              AST$(
                                17,
                                2153,
                                4,
                                0,
                                "__isArray"
                              ),
                              0,
                              AST$(
                                17,
                                2153,
                                5,
                                0,
                                "array"
                              )
                            )
                          ),
                          AST$(
                            26,
                            2153,
                            4,
                            0,
                            AST$(
                              7,
                              2153,
                              4,
                              0,
                              AST$(
                                17,
                                2153,
                                4,
                                0,
                                "TypeError"
                              ),
                              0,
                              AST$(
                                3,
                                2153,
                                4,
                                0,
                                AST$(
                                  9,
                                  2153,
                                  4,
                                  0,
                                  "Expected array to be an Array, got "
                                ),
                                "+",
                                AST$(
                                  7,
                                  2153,
                                  4,
                                  0,
                                  AST$(
                                    17,
                                    2153,
                                    4,
                                    0,
                                    "__typeof"
                                  ),
                                  0,
                                  AST$(
                                    17,
                                    2153,
                                    5,
                                    0,
                                    "array"
                                  )
                                )
                              )
                            )
                          )
                        ),
                        AST$(
                          3,
                          2154,
                          1,
                          0,
                          AST$(
                            17,
                            2154,
                            1,
                            0,
                            "_o"
                          ),
                          "=",
                          AST$(
                            7,
                            2154,
                            1,
                            0,
                            AST$(
                              17,
                              2154,
                              1,
                              0,
                              "__create"
                            ),
                            0,
                            AST$(
                              17,
                              2154,
                              14,
                              0,
                              "proto"
                            )
                          )
                        ),
                        AST$(
                          3,
                          2155,
                          7,
                          0,
                          AST$(
                            3,
                            2155,
                            7,
                            0,
                            AST$(
                              17,
                              2154,
                              1,
                              0,
                              "_o"
                            ),
                            ".",
                            AST$(
                              9,
                              2155,
                              7,
                              0,
                              "array"
                            )
                          ),
                          "=",
                          AST$(
                            17,
                            2155,
                            7,
                            0,
                            "array"
                          )
                        ),
                        AST$(
                          3,
                          2156,
                          7,
                          0,
                          AST$(
                            3,
                            2156,
                            7,
                            0,
                            AST$(
                              17,
                              2154,
                              1,
                              0,
                              "_o"
                            ),
                            ".",
                            AST$(
                              9,
                              2156,
                              7,
                              0,
                              "index"
                            )
                          ),
                          "=",
                          AST$(
                            9,
                            2156,
                            13,
                            0,
                            -1
                          )
                        ),
                        AST$(
                          23,
                          2154,
                          1,
                          0,
                          AST$(
                            17,
                            2154,
                            1,
                            0,
                            "_o"
                          )
                        )
                      )
                    )
                  )
                )
              ),
              0
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.makeObject({ array: TYPE$.array, index: TYPE$.number })),
            dependencies: ["__create", "__isArray", "__num", "__typeof"]
          },
          __iter: {
            helper: AST$(
              16,
              2159,
              25,
              0,
              0,
              [
                AST$(
                  17,
                  2159,
                  26,
                  0,
                  "iterable"
                )
              ],
              0,
              AST$(
                18,
                2160,
                1,
                0,
                AST$(
                  3,
                  2160,
                  5,
                  0,
                  AST$(
                    17,
                    2160,
                    9,
                    0,
                    "iterable"
                  ),
                  "==",
                  AST$(
                    9,
                    1,
                    1,
                    0,
                    null
                  )
                ),
                AST$(
                  26,
                  2161,
                  1,
                  0,
                  AST$(
                    7,
                    2161,
                    10,
                    0,
                    AST$(
                      17,
                      2161,
                      10,
                      0,
                      "TypeError"
                    ),
                    0,
                    AST$(
                      3,
                      2161,
                      21,
                      0,
                      AST$(
                        9,
                        2161,
                        21,
                        0,
                        "Expected iterable to be an Object, got "
                      ),
                      "+",
                      AST$(
                        7,
                        2161,
                        63,
                        0,
                        AST$(
                          17,
                          2161,
                          63,
                          0,
                          "__typeof"
                        ),
                        0,
                        AST$(
                          17,
                          2161,
                          70,
                          0,
                          "iterable"
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  2160,
                  1,
                  0,
                  AST$(
                    7,
                    2162,
                    10,
                    0,
                    AST$(
                      17,
                      2162,
                      10,
                      0,
                      "__isArray"
                    ),
                    0,
                    AST$(
                      17,
                      2162,
                      20,
                      0,
                      "iterable"
                    )
                  ),
                  AST$(
                    23,
                    2163,
                    1,
                    0,
                    AST$(
                      7,
                      2163,
                      1,
                      0,
                      AST$(
                        17,
                        2163,
                        1,
                        0,
                        "__arrayToIter"
                      ),
                      0,
                      AST$(
                        17,
                        2163,
                        21,
                        0,
                        "iterable"
                      )
                    )
                  ),
                  AST$(
                    18,
                    2160,
                    1,
                    0,
                    AST$(
                      3,
                      2164,
                      10,
                      0,
                      AST$(
                        30,
                        2164,
                        10,
                        0,
                        "typeof",
                        AST$(
                          3,
                          2164,
                          23,
                          0,
                          AST$(
                            17,
                            2164,
                            23,
                            0,
                            "iterable"
                          ),
                          ".",
                          AST$(
                            9,
                            2164,
                            33,
                            0,
                            "iterator"
                          )
                        )
                      ),
                      "===",
                      AST$(
                        9,
                        2164,
                        10,
                        0,
                        "function"
                      )
                    ),
                    AST$(
                      23,
                      2165,
                      1,
                      0,
                      AST$(
                        7,
                        2165,
                        1,
                        0,
                        AST$(
                          3,
                          2165,
                          1,
                          0,
                          AST$(
                            17,
                            2165,
                            1,
                            0,
                            "iterable"
                          ),
                          ".",
                          AST$(
                            9,
                            2165,
                            14,
                            0,
                            "iterator"
                          )
                        ),
                        0
                      )
                    ),
                    AST$(
                      18,
                      2160,
                      1,
                      0,
                      AST$(
                        3,
                        2166,
                        10,
                        0,
                        AST$(
                          30,
                          2166,
                          10,
                          0,
                          "typeof",
                          AST$(
                            3,
                            2166,
                            23,
                            0,
                            AST$(
                              17,
                              2166,
                              23,
                              0,
                              "iterable"
                            ),
                            ".",
                            AST$(
                              9,
                              2166,
                              33,
                              0,
                              "next"
                            )
                          )
                        ),
                        "===",
                        AST$(
                          9,
                          2166,
                          10,
                          0,
                          "function"
                        )
                      ),
                      AST$(
                        23,
                        2167,
                        1,
                        0,
                        AST$(
                          17,
                          2167,
                          1,
                          0,
                          "iterable"
                        )
                      ),
                      AST$(
                        26,
                        2169,
                        1,
                        0,
                        AST$(
                          7,
                          2169,
                          10,
                          0,
                          AST$(
                            17,
                            2169,
                            10,
                            0,
                            "Error"
                          ),
                          0,
                          AST$(
                            3,
                            2169,
                            17,
                            0,
                            AST$(
                              9,
                              2169,
                              17,
                              0,
                              "Expected iterable to be an Array or an Object with an 'iterator' function or an Object with a 'next' function, got "
                            ),
                            "+",
                            AST$(
                              7,
                              2169,
                              135,
                              0,
                              AST$(
                                17,
                                2169,
                                135,
                                0,
                                "__typeof"
                              ),
                              0,
                              AST$(
                                17,
                                2169,
                                142,
                                0,
                                "iterable"
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            ),
            type: TYPE$["function"],
            dependencies: ["__arrayToIter", "__isArray", "__typeof"]
          },
          __keys: {
            helper: AST$(
              19,
              2338,
              23,
              0,
              AST$(
                3,
                2338,
                26,
                0,
                AST$(
                  30,
                  2338,
                  26,
                  0,
                  "typeof",
                  AST$(
                    3,
                    2338,
                    39,
                    0,
                    AST$(
                      17,
                      2338,
                      39,
                      0,
                      "Object"
                    ),
                    ".",
                    AST$(
                      9,
                      2338,
                      47,
                      0,
                      "keys"
                    )
                  )
                ),
                "===",
                AST$(
                  9,
                  2338,
                  26,
                  0,
                  "function"
                )
              ),
              AST$(
                3,
                2339,
                1,
                0,
                AST$(
                  17,
                  2339,
                  1,
                  0,
                  "Object"
                ),
                ".",
                AST$(
                  9,
                  2339,
                  10,
                  0,
                  "keys"
                )
              ),
              AST$(
                16,
                2341,
                4,
                0,
                0,
                [
                  AST$(
                    17,
                    2341,
                    5,
                    0,
                    "x"
                  )
                ],
                ["key", "keys"],
                AST$(
                  4,
                  2342,
                  1,
                  0,
                  0,
                  AST$(
                    3,
                    2342,
                    1,
                    0,
                    AST$(
                      17,
                      2342,
                      8,
                      0,
                      "keys"
                    ),
                    "=",
                    AST$(2, 2342, 15, 0)
                  ),
                  AST$(
                    15,
                    2343,
                    1,
                    0,
                    AST$(
                      17,
                      2343,
                      8,
                      0,
                      "key"
                    ),
                    AST$(
                      17,
                      2343,
                      15,
                      0,
                      "x"
                    ),
                    AST$(
                      18,
                      2343,
                      1,
                      0,
                      AST$(
                        7,
                        2343,
                        1,
                        0,
                        AST$(
                          3,
                          2343,
                          1,
                          0,
                          AST$(
                            17,
                            2343,
                            1,
                            0,
                            "__owns"
                          ),
                          ".",
                          AST$(
                            9,
                            2343,
                            1,
                            0,
                            "call"
                          )
                        ),
                        0,
                        AST$(
                          17,
                          2343,
                          15,
                          0,
                          "x"
                        ),
                        AST$(
                          17,
                          2343,
                          8,
                          0,
                          "key"
                        )
                      ),
                      AST$(
                        7,
                        2344,
                        1,
                        0,
                        AST$(
                          3,
                          2344,
                          1,
                          0,
                          AST$(
                            17,
                            2344,
                            1,
                            0,
                            "keys"
                          ),
                          ".",
                          AST$(
                            9,
                            2344,
                            12,
                            0,
                            "push"
                          )
                        ),
                        0,
                        AST$(
                          17,
                          2344,
                          17,
                          0,
                          "key"
                        )
                      )
                    )
                  ),
                  AST$(
                    23,
                    2345,
                    1,
                    0,
                    AST$(
                      17,
                      2345,
                      1,
                      0,
                      "keys"
                    )
                  )
                )
              )
            ),
            type: TYPE$.any,
            dependencies: ["__owns"]
          },
          __allkeys: {
            helper: AST$(
              16,
              2350,
              28,
              0,
              0,
              [
                AST$(
                  17,
                  2350,
                  29,
                  0,
                  "x"
                )
              ],
              ["key", "keys"],
              AST$(
                4,
                2351,
                1,
                0,
                0,
                AST$(
                  3,
                  2351,
                  1,
                  0,
                  AST$(
                    17,
                    2351,
                    6,
                    0,
                    "keys"
                  ),
                  "=",
                  AST$(2, 2351, 13, 0)
                ),
                AST$(
                  15,
                  2352,
                  1,
                  0,
                  AST$(
                    17,
                    2352,
                    6,
                    0,
                    "key"
                  ),
                  AST$(
                    17,
                    2352,
                    16,
                    0,
                    "x"
                  ),
                  AST$(
                    7,
                    2353,
                    1,
                    0,
                    AST$(
                      3,
                      2353,
                      1,
                      0,
                      AST$(
                        17,
                        2353,
                        1,
                        0,
                        "keys"
                      ),
                      ".",
                      AST$(
                        9,
                        2353,
                        10,
                        0,
                        "push"
                      )
                    ),
                    0,
                    AST$(
                      17,
                      2353,
                      15,
                      0,
                      "key"
                    )
                  )
                ),
                AST$(
                  23,
                  2354,
                  1,
                  0,
                  AST$(
                    17,
                    2354,
                    1,
                    0,
                    "keys"
                  )
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.stringArray),
            dependencies: []
          },
          __new: {
            helper: AST$(
              7,
              2359,
              22,
              0,
              AST$(
                16,
                2359,
                22,
                0,
                0,
                0,
                ["newCreators"],
                AST$(
                  4,
                  2360,
                  1,
                  0,
                  0,
                  AST$(
                    3,
                    2360,
                    1,
                    0,
                    AST$(
                      17,
                      2360,
                      6,
                      0,
                      "newCreators"
                    ),
                    "=",
                    AST$(2, 2360, 21, 0)
                  ),
                  AST$(
                    23,
                    2361,
                    4,
                    0,
                    AST$(
                      16,
                      2361,
                      4,
                      0,
                      0,
                      0,
                      ["creator", "func", "i", "length"],
                      AST$(
                        4,
                        2362,
                        1,
                        0,
                        0,
                        AST$(
                          18,
                          2362,
                          1,
                          0,
                          AST$(
                            3,
                            2362,
                            7,
                            0,
                            AST$(
                              30,
                              2362,
                              11,
                              0,
                              "typeof",
                              AST$(25, 2362, 24, 0)
                            ),
                            "!==",
                            AST$(
                              9,
                              2362,
                              11,
                              0,
                              "function"
                            )
                          ),
                          AST$(
                            26,
                            2363,
                            1,
                            0,
                            AST$(
                              7,
                              2363,
                              12,
                              0,
                              AST$(
                                17,
                                2363,
                                12,
                                0,
                                "Error"
                              ),
                              0,
                              AST$(
                                3,
                                2363,
                                19,
                                0,
                                AST$(
                                  9,
                                  2363,
                                  19,
                                  0,
                                  "Expected this to be a Function, got "
                                ),
                                "+",
                                AST$(
                                  7,
                                  2363,
                                  58,
                                  0,
                                  AST$(
                                    17,
                                    2363,
                                    58,
                                    0,
                                    "__typeof"
                                  ),
                                  0,
                                  AST$(25, 2363, 65, 0)
                                )
                              )
                            )
                          )
                        ),
                        AST$(
                          3,
                          2364,
                          1,
                          0,
                          AST$(
                            17,
                            2364,
                            8,
                            0,
                            "length"
                          ),
                          "=",
                          AST$(
                            3,
                            2364,
                            17,
                            0,
                            AST$(1, 2364, 17, 0),
                            ".",
                            AST$(
                              9,
                              2364,
                              28,
                              0,
                              "length"
                            )
                          )
                        ),
                        AST$(
                          3,
                          2365,
                          1,
                          0,
                          AST$(
                            17,
                            2365,
                            16,
                            0,
                            "creator"
                          ),
                          "=",
                          AST$(
                            3,
                            2365,
                            26,
                            0,
                            AST$(
                              17,
                              2365,
                              26,
                              0,
                              "newCreators"
                            ),
                            ".",
                            AST$(
                              17,
                              2365,
                              40,
                              0,
                              "length"
                            )
                          )
                        ),
                        AST$(
                          18,
                          2366,
                          1,
                          0,
                          AST$(
                            30,
                            2366,
                            7,
                            0,
                            "!",
                            AST$(
                              17,
                              2366,
                              11,
                              0,
                              "creator"
                            )
                          ),
                          AST$(
                            4,
                            2367,
                            1,
                            0,
                            0,
                            AST$(
                              3,
                              2367,
                              1,
                              0,
                              AST$(
                                17,
                                2367,
                                10,
                                0,
                                "func"
                              ),
                              "=",
                              AST$(
                                2,
                                2367,
                                17,
                                0,
                                AST$(
                                  9,
                                  2367,
                                  19,
                                  0,
                                  "return new C("
                                )
                              )
                            ),
                            AST$(
                              14,
                              2368,
                              1,
                              0,
                              AST$(
                                5,
                                1,
                                1,
                                0,
                                AST$(
                                  3,
                                  2368,
                                  1,
                                  0,
                                  AST$(
                                    17,
                                    2368,
                                    10,
                                    0,
                                    "i"
                                  ),
                                  "=",
                                  AST$(
                                    9,
                                    2368,
                                    16,
                                    0,
                                    0
                                  )
                                ),
                                AST$(
                                  17,
                                  2368,
                                  21,
                                  0,
                                  "length"
                                )
                              ),
                              AST$(
                                3,
                                2368,
                                1,
                                0,
                                AST$(
                                  17,
                                  2368,
                                  10,
                                  0,
                                  "i"
                                ),
                                "<",
                                AST$(
                                  17,
                                  2368,
                                  21,
                                  0,
                                  "length"
                                )
                              ),
                              AST$(
                                30,
                                2368,
                                1,
                                0,
                                "++",
                                AST$(
                                  17,
                                  2368,
                                  10,
                                  0,
                                  "i"
                                )
                              ),
                              AST$(
                                4,
                                2369,
                                1,
                                0,
                                0,
                                AST$(
                                  18,
                                  2369,
                                  1,
                                  0,
                                  AST$(
                                    3,
                                    2369,
                                    11,
                                    0,
                                    AST$(
                                      17,
                                      2369,
                                      11,
                                      0,
                                      "i"
                                    ),
                                    ">",
                                    AST$(
                                      9,
                                      2369,
                                      16,
                                      0,
                                      0
                                    )
                                  ),
                                  AST$(
                                    7,
                                    2370,
                                    1,
                                    0,
                                    AST$(
                                      3,
                                      2370,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        2370,
                                        1,
                                        0,
                                        "func"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        2370,
                                        16,
                                        0,
                                        "push"
                                      )
                                    ),
                                    0,
                                    AST$(
                                      9,
                                      2370,
                                      21,
                                      0,
                                      ", "
                                    )
                                  )
                                ),
                                AST$(
                                  7,
                                  2371,
                                  1,
                                  0,
                                  AST$(
                                    3,
                                    2371,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      2371,
                                      1,
                                      0,
                                      "func"
                                    ),
                                    ".",
                                    AST$(
                                      9,
                                      2371,
                                      14,
                                      0,
                                      "push"
                                    )
                                  ),
                                  0,
                                  AST$(
                                    9,
                                    2371,
                                    19,
                                    0,
                                    "a["
                                  ),
                                  AST$(
                                    17,
                                    2371,
                                    24,
                                    0,
                                    "i"
                                  ),
                                  AST$(
                                    9,
                                    2371,
                                    28,
                                    0,
                                    "]"
                                  )
                                )
                              )
                            ),
                            AST$(
                              7,
                              2372,
                              1,
                              0,
                              AST$(
                                3,
                                2372,
                                1,
                                0,
                                AST$(
                                  17,
                                  2372,
                                  1,
                                  0,
                                  "func"
                                ),
                                ".",
                                AST$(
                                  9,
                                  2372,
                                  12,
                                  0,
                                  "push"
                                )
                              ),
                              0,
                              AST$(
                                9,
                                2372,
                                17,
                                0,
                                ");"
                              )
                            ),
                            AST$(
                              3,
                              2373,
                              1,
                              0,
                              AST$(
                                17,
                                2373,
                                1,
                                0,
                                "creator"
                              ),
                              "=",
                              AST$(
                                7,
                                2373,
                                17,
                                0,
                                AST$(
                                  17,
                                  2373,
                                  17,
                                  0,
                                  "Function"
                                ),
                                0,
                                AST$(
                                  9,
                                  2373,
                                  27,
                                  0,
                                  "C"
                                ),
                                AST$(
                                  9,
                                  2373,
                                  32,
                                  0,
                                  "a"
                                ),
                                AST$(
                                  7,
                                  2373,
                                  36,
                                  0,
                                  AST$(
                                    3,
                                    2373,
                                    36,
                                    0,
                                    AST$(
                                      17,
                                      2373,
                                      36,
                                      0,
                                      "func"
                                    ),
                                    ".",
                                    AST$(
                                      9,
                                      2373,
                                      42,
                                      0,
                                      "join"
                                    )
                                  ),
                                  0,
                                  AST$(
                                    9,
                                    2373,
                                    47,
                                    0,
                                    ""
                                  )
                                )
                              )
                            ),
                            AST$(
                              3,
                              2374,
                              1,
                              0,
                              AST$(
                                3,
                                2374,
                                1,
                                0,
                                AST$(
                                  17,
                                  2374,
                                  1,
                                  0,
                                  "newCreators"
                                ),
                                ".",
                                AST$(
                                  17,
                                  2374,
                                  20,
                                  0,
                                  "length"
                                )
                              ),
                              "=",
                              AST$(
                                17,
                                2374,
                                30,
                                0,
                                "creator"
                              )
                            )
                          )
                        ),
                        AST$(
                          23,
                          2375,
                          1,
                          0,
                          AST$(
                            7,
                            2375,
                            1,
                            0,
                            AST$(
                              17,
                              2375,
                              1,
                              0,
                              "creator"
                            ),
                            0,
                            AST$(25, 2375, 13, 0),
                            AST$(1, 2375, 18, 0)
                          )
                        )
                      )
                    )
                  )
                )
              ),
              0
            ),
            type: TYPE$["function"],
            dependencies: ["__typeof"]
          },
          __instanceofsome: {
            helper: AST$(
              16,
              2377,
              35,
              0,
              0,
              [
                AST$(
                  17,
                  2377,
                  36,
                  0,
                  "value"
                ),
                AST$(
                  17,
                  2377,
                  42,
                  0,
                  "array"
                )
              ],
              ["_arr", "_i", "_some", "item"],
              AST$(
                4,
                2378,
                1,
                0,
                0,
                AST$(
                  3,
                  2378,
                  1,
                  0,
                  AST$(
                    17,
                    2378,
                    1,
                    0,
                    "_some"
                  ),
                  "=",
                  AST$(
                    9,
                    1,
                    1,
                    0,
                    false
                  )
                ),
                AST$(
                  14,
                  2378,
                  1,
                  0,
                  AST$(
                    5,
                    1,
                    1,
                    0,
                    AST$(
                      3,
                      2378,
                      1,
                      0,
                      AST$(
                        17,
                        2378,
                        1,
                        0,
                        "_arr"
                      ),
                      "=",
                      AST$(
                        7,
                        2378,
                        1,
                        0,
                        AST$(
                          17,
                          2378,
                          1,
                          0,
                          "__toArray"
                        ),
                        0,
                        AST$(
                          17,
                          2378,
                          19,
                          0,
                          "array"
                        )
                      )
                    ),
                    AST$(
                      3,
                      2378,
                      1,
                      0,
                      AST$(
                        17,
                        2378,
                        1,
                        0,
                        "_i"
                      ),
                      "=",
                      AST$(
                        3,
                        2378,
                        1,
                        0,
                        AST$(
                          17,
                          2378,
                          1,
                          0,
                          "_arr"
                        ),
                        ".",
                        AST$(
                          9,
                          2378,
                          1,
                          0,
                          "length"
                        )
                      )
                    )
                  ),
                  AST$(
                    30,
                    2378,
                    1,
                    0,
                    "--post",
                    AST$(
                      17,
                      2378,
                      1,
                      0,
                      "_i"
                    )
                  ),
                  AST$(20, 2378, 1, 0),
                  AST$(
                    4,
                    2378,
                    1,
                    0,
                    0,
                    AST$(
                      3,
                      2378,
                      1,
                      0,
                      AST$(
                        17,
                        2378,
                        11,
                        0,
                        "item"
                      ),
                      "=",
                      AST$(
                        3,
                        2378,
                        1,
                        0,
                        AST$(
                          17,
                          2378,
                          1,
                          0,
                          "_arr"
                        ),
                        ".",
                        AST$(
                          17,
                          2378,
                          1,
                          0,
                          "_i"
                        )
                      )
                    ),
                    AST$(
                      18,
                      2378,
                      1,
                      0,
                      AST$(
                        3,
                        2379,
                        1,
                        0,
                        AST$(
                          17,
                          2379,
                          1,
                          0,
                          "value"
                        ),
                        "instanceof",
                        AST$(
                          17,
                          2379,
                          21,
                          0,
                          "item"
                        )
                      ),
                      AST$(
                        4,
                        2378,
                        1,
                        0,
                        0,
                        AST$(
                          3,
                          2378,
                          1,
                          0,
                          AST$(
                            17,
                            2378,
                            1,
                            0,
                            "_some"
                          ),
                          "=",
                          AST$(
                            9,
                            1,
                            1,
                            0,
                            true
                          )
                        ),
                        AST$(6, 2378, 1, 0)
                      )
                    )
                  )
                ),
                AST$(
                  23,
                  2378,
                  1,
                  0,
                  AST$(
                    17,
                    2378,
                    1,
                    0,
                    "_some"
                  )
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.boolean),
            dependencies: ["__toArray"]
          },
          __getInstanceof: {
            helper: AST$(
              7,
              2381,
              33,
              0,
              AST$(
                16,
                2381,
                33,
                0,
                0,
                0,
                0,
                AST$(
                  4,
                  2382,
                  1,
                  0,
                  0,
                  AST$(
                    16,
                    2382,
                    1,
                    0,
                    AST$(
                      17,
                      2382,
                      6,
                      0,
                      "isAny"
                    ),
                    0,
                    0,
                    AST$(
                      23,
                      2382,
                      19,
                      0,
                      AST$(
                        9,
                        2382,
                        19,
                        0,
                        true
                      )
                    )
                  ),
                  AST$(
                    16,
                    2383,
                    1,
                    0,
                    AST$(
                      17,
                      2383,
                      6,
                      0,
                      "isStr"
                    ),
                    [
                      AST$(
                        17,
                        2383,
                        17,
                        0,
                        "x"
                      )
                    ],
                    0,
                    AST$(
                      23,
                      2383,
                      17,
                      0,
                      AST$(
                        3,
                        2383,
                        17,
                        0,
                        AST$(
                          30,
                          2383,
                          17,
                          0,
                          "typeof",
                          AST$(
                            17,
                            2383,
                            17,
                            0,
                            "x"
                          )
                        ),
                        "===",
                        AST$(
                          9,
                          2383,
                          17,
                          0,
                          "string"
                        )
                      )
                    )
                  ),
                  AST$(
                    16,
                    2384,
                    1,
                    0,
                    AST$(
                      17,
                      2384,
                      6,
                      0,
                      "isNum"
                    ),
                    [
                      AST$(
                        17,
                        2384,
                        17,
                        0,
                        "x"
                      )
                    ],
                    0,
                    AST$(
                      23,
                      2384,
                      17,
                      0,
                      AST$(
                        3,
                        2384,
                        17,
                        0,
                        AST$(
                          30,
                          2384,
                          17,
                          0,
                          "typeof",
                          AST$(
                            17,
                            2384,
                            17,
                            0,
                            "x"
                          )
                        ),
                        "===",
                        AST$(
                          9,
                          2384,
                          17,
                          0,
                          "number"
                        )
                      )
                    )
                  ),
                  AST$(
                    16,
                    2385,
                    1,
                    0,
                    AST$(
                      17,
                      2385,
                      6,
                      0,
                      "isFunc"
                    ),
                    [
                      AST$(
                        17,
                        2385,
                        18,
                        0,
                        "x"
                      )
                    ],
                    0,
                    AST$(
                      23,
                      2385,
                      18,
                      0,
                      AST$(
                        3,
                        2385,
                        18,
                        0,
                        AST$(
                          30,
                          2385,
                          18,
                          0,
                          "typeof",
                          AST$(
                            17,
                            2385,
                            18,
                            0,
                            "x"
                          )
                        ),
                        "===",
                        AST$(
                          9,
                          2385,
                          18,
                          0,
                          "function"
                        )
                      )
                    )
                  ),
                  AST$(
                    16,
                    2386,
                    1,
                    0,
                    AST$(
                      17,
                      2386,
                      6,
                      0,
                      "isBool"
                    ),
                    [
                      AST$(
                        17,
                        2386,
                        18,
                        0,
                        "x"
                      )
                    ],
                    0,
                    AST$(
                      23,
                      2386,
                      18,
                      0,
                      AST$(
                        3,
                        2386,
                        18,
                        0,
                        AST$(
                          30,
                          2386,
                          18,
                          0,
                          "typeof",
                          AST$(
                            17,
                            2386,
                            18,
                            0,
                            "x"
                          )
                        ),
                        "===",
                        AST$(
                          9,
                          2386,
                          18,
                          0,
                          "boolean"
                        )
                      )
                    )
                  ),
                  AST$(
                    23,
                    2387,
                    4,
                    0,
                    AST$(
                      16,
                      2387,
                      4,
                      0,
                      0,
                      [
                        AST$(
                          17,
                          2387,
                          5,
                          0,
                          "ctor"
                        )
                      ],
                      0,
                      AST$(
                        18,
                        2388,
                        1,
                        0,
                        AST$(
                          3,
                          2388,
                          7,
                          0,
                          AST$(
                            17,
                            2388,
                            11,
                            0,
                            "ctor"
                          ),
                          "==",
                          AST$(
                            9,
                            1,
                            1,
                            0,
                            null
                          )
                        ),
                        AST$(
                          23,
                          2389,
                          1,
                          0,
                          AST$(
                            17,
                            2389,
                            1,
                            0,
                            "isAny"
                          )
                        ),
                        AST$(
                          27,
                          2391,
                          1,
                          0,
                          0,
                          AST$(
                            17,
                            2391,
                            13,
                            0,
                            "ctor"
                          ),
                          2392,
                          11,
                          0,
                          AST$(
                            17,
                            2392,
                            11,
                            0,
                            "String"
                          ),
                          AST$(
                            23,
                            2392,
                            19,
                            0,
                            AST$(
                              17,
                              2392,
                              19,
                              0,
                              "isStr"
                            )
                          ),
                          2393,
                          11,
                          0,
                          AST$(
                            17,
                            2393,
                            11,
                            0,
                            "Number"
                          ),
                          AST$(
                            23,
                            2393,
                            19,
                            0,
                            AST$(
                              17,
                              2393,
                              19,
                              0,
                              "isNum"
                            )
                          ),
                          2394,
                          11,
                          0,
                          AST$(
                            17,
                            2394,
                            11,
                            0,
                            "Function"
                          ),
                          AST$(
                            23,
                            2394,
                            21,
                            0,
                            AST$(
                              17,
                              2394,
                              21,
                              0,
                              "isFunc"
                            )
                          ),
                          2395,
                          11,
                          0,
                          AST$(
                            17,
                            2395,
                            11,
                            0,
                            "Boolean"
                          ),
                          AST$(
                            23,
                            2395,
                            20,
                            0,
                            AST$(
                              17,
                              2395,
                              20,
                              0,
                              "isBool"
                            )
                          ),
                          2396,
                          11,
                          0,
                          AST$(
                            17,
                            2396,
                            11,
                            0,
                            "Array"
                          ),
                          AST$(
                            23,
                            2396,
                            18,
                            0,
                            AST$(
                              17,
                              2396,
                              18,
                              0,
                              "__isArray"
                            )
                          ),
                          2397,
                          11,
                          0,
                          AST$(
                            17,
                            2397,
                            11,
                            0,
                            "Object"
                          ),
                          AST$(
                            23,
                            2397,
                            19,
                            0,
                            AST$(
                              17,
                              2397,
                              19,
                              0,
                              "__isObject"
                            )
                          ),
                          AST$(
                            23,
                            2398,
                            17,
                            0,
                            AST$(
                              16,
                              2398,
                              17,
                              0,
                              0,
                              [
                                AST$(
                                  17,
                                  2398,
                                  17,
                                  0,
                                  "_x"
                                )
                              ],
                              0,
                              AST$(
                                23,
                                2398,
                                17,
                                0,
                                AST$(
                                  3,
                                  2398,
                                  17,
                                  0,
                                  AST$(
                                    17,
                                    2398,
                                    17,
                                    0,
                                    "_x"
                                  ),
                                  "instanceof",
                                  AST$(
                                    17,
                                    2398,
                                    27,
                                    0,
                                    "ctor"
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              ),
              0
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.generic(TYPE$.functionBase, TYPE$.boolean)),
            dependencies: ["__isArray", "__isObject"]
          },
          __name: {
            helper: AST$(
              16,
              2400,
              25,
              0,
              0,
              [
                AST$(
                  17,
                  2400,
                  26,
                  0,
                  "func"
                )
              ],
              0,
              AST$(
                4,
                2400,
                25,
                0,
                0,
                AST$(
                  18,
                  2400,
                  25,
                  0,
                  AST$(
                    3,
                    2400,
                    25,
                    0,
                    AST$(
                      30,
                      2400,
                      25,
                      0,
                      "typeof",
                      AST$(
                        17,
                        2400,
                        26,
                        0,
                        "func"
                      )
                    ),
                    "!==",
                    AST$(
                      9,
                      2400,
                      25,
                      0,
                      "function"
                    )
                  ),
                  AST$(
                    26,
                    2400,
                    25,
                    0,
                    AST$(
                      7,
                      2400,
                      25,
                      0,
                      AST$(
                        17,
                        2400,
                        25,
                        0,
                        "TypeError"
                      ),
                      0,
                      AST$(
                        3,
                        2400,
                        25,
                        0,
                        AST$(
                          9,
                          2400,
                          25,
                          0,
                          "Expected func to be a Function, got "
                        ),
                        "+",
                        AST$(
                          7,
                          2400,
                          25,
                          0,
                          AST$(
                            17,
                            2400,
                            25,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            2400,
                            26,
                            0,
                            "func"
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  23,
                  2400,
                  50,
                  0,
                  AST$(
                    3,
                    2400,
                    50,
                    0,
                    AST$(
                      3,
                      2400,
                      50,
                      0,
                      AST$(
                        3,
                        2400,
                        50,
                        0,
                        AST$(
                          17,
                          2400,
                          50,
                          0,
                          "func"
                        ),
                        ".",
                        AST$(
                          9,
                          2400,
                          56,
                          0,
                          "displayName"
                        )
                      ),
                      "||",
                      AST$(
                        3,
                        2400,
                        71,
                        0,
                        AST$(
                          17,
                          2400,
                          71,
                          0,
                          "func"
                        ),
                        ".",
                        AST$(
                          9,
                          2400,
                          77,
                          0,
                          "name"
                        )
                      )
                    ),
                    "||",
                    AST$(
                      9,
                      2400,
                      85,
                      0,
                      ""
                    )
                  )
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.string),
            dependencies: ["__typeof"]
          },
          __once: {
            helper: AST$(
              7,
              2402,
              23,
              0,
              AST$(
                16,
                2402,
                23,
                0,
                0,
                0,
                0,
                AST$(
                  4,
                  2403,
                  1,
                  0,
                  0,
                  AST$(
                    16,
                    2403,
                    1,
                    0,
                    AST$(
                      17,
                      2403,
                      6,
                      0,
                      "replacement"
                    ),
                    0,
                    0,
                    AST$(
                      26,
                      2403,
                      23,
                      0,
                      AST$(
                        7,
                        2403,
                        29,
                        0,
                        AST$(
                          17,
                          2403,
                          29,
                          0,
                          "Error"
                        ),
                        0,
                        AST$(
                          9,
                          2403,
                          36,
                          0,
                          "Attempted to call function more than once"
                        )
                      )
                    )
                  ),
                  AST$(
                    16,
                    2404,
                    1,
                    0,
                    AST$(
                      17,
                      2404,
                      6,
                      0,
                      "doNothing"
                    ),
                    0,
                    0,
                    AST$(20, 2404, 22, 0)
                  ),
                  AST$(
                    23,
                    2405,
                    4,
                    0,
                    AST$(
                      16,
                      2405,
                      4,
                      0,
                      0,
                      [
                        AST$(
                          17,
                          2405,
                          12,
                          0,
                          "func"
                        ),
                        AST$(
                          17,
                          2405,
                          24,
                          0,
                          "silentFail"
                        )
                      ],
                      0,
                      AST$(
                        4,
                        2405,
                        4,
                        0,
                        0,
                        AST$(
                          18,
                          2405,
                          4,
                          0,
                          AST$(
                            3,
                            2405,
                            4,
                            0,
                            AST$(
                              30,
                              2405,
                              4,
                              0,
                              "typeof",
                              AST$(
                                17,
                                2405,
                                12,
                                0,
                                "func"
                              )
                            ),
                            "!==",
                            AST$(
                              9,
                              2405,
                              4,
                              0,
                              "function"
                            )
                          ),
                          AST$(
                            26,
                            2405,
                            4,
                            0,
                            AST$(
                              7,
                              2405,
                              4,
                              0,
                              AST$(
                                17,
                                2405,
                                4,
                                0,
                                "TypeError"
                              ),
                              0,
                              AST$(
                                3,
                                2405,
                                4,
                                0,
                                AST$(
                                  9,
                                  2405,
                                  4,
                                  0,
                                  "Expected func to be a Function, got "
                                ),
                                "+",
                                AST$(
                                  7,
                                  2405,
                                  4,
                                  0,
                                  AST$(
                                    17,
                                    2405,
                                    4,
                                    0,
                                    "__typeof"
                                  ),
                                  0,
                                  AST$(
                                    17,
                                    2405,
                                    12,
                                    0,
                                    "func"
                                  )
                                )
                              )
                            )
                          )
                        ),
                        AST$(
                          18,
                          2405,
                          4,
                          0,
                          AST$(
                            3,
                            2405,
                            4,
                            0,
                            AST$(
                              17,
                              2405,
                              24,
                              0,
                              "silentFail"
                            ),
                            "==",
                            AST$(
                              9,
                              1,
                              1,
                              0,
                              null
                            )
                          ),
                          AST$(
                            3,
                            2405,
                            4,
                            0,
                            AST$(
                              17,
                              2405,
                              24,
                              0,
                              "silentFail"
                            ),
                            "=",
                            AST$(
                              9,
                              1,
                              1,
                              0,
                              false
                            )
                          ),
                          AST$(
                            18,
                            2405,
                            4,
                            0,
                            AST$(
                              3,
                              2405,
                              4,
                              0,
                              AST$(
                                30,
                                2405,
                                4,
                                0,
                                "typeof",
                                AST$(
                                  17,
                                  2405,
                                  24,
                                  0,
                                  "silentFail"
                                )
                              ),
                              "!==",
                              AST$(
                                9,
                                2405,
                                4,
                                0,
                                "boolean"
                              )
                            ),
                            AST$(
                              26,
                              2405,
                              4,
                              0,
                              AST$(
                                7,
                                2405,
                                4,
                                0,
                                AST$(
                                  17,
                                  2405,
                                  4,
                                  0,
                                  "TypeError"
                                ),
                                0,
                                AST$(
                                  3,
                                  2405,
                                  4,
                                  0,
                                  AST$(
                                    9,
                                    2405,
                                    4,
                                    0,
                                    "Expected silentFail to be a Boolean, got "
                                  ),
                                  "+",
                                  AST$(
                                    7,
                                    2405,
                                    4,
                                    0,
                                    AST$(
                                      17,
                                      2405,
                                      4,
                                      0,
                                      "__typeof"
                                    ),
                                    0,
                                    AST$(
                                      17,
                                      2405,
                                      24,
                                      0,
                                      "silentFail"
                                    )
                                  )
                                )
                              )
                            )
                          )
                        ),
                        AST$(
                          23,
                          2405,
                          53,
                          0,
                          AST$(
                            16,
                            2405,
                            53,
                            0,
                            0,
                            0,
                            ["f"],
                            AST$(
                              4,
                              2406,
                              1,
                              0,
                              0,
                              AST$(
                                3,
                                2406,
                                1,
                                0,
                                AST$(
                                  17,
                                  2406,
                                  8,
                                  0,
                                  "f"
                                ),
                                "=",
                                AST$(
                                  17,
                                  2406,
                                  12,
                                  0,
                                  "func"
                                )
                              ),
                              AST$(
                                18,
                                2407,
                                12,
                                0,
                                AST$(
                                  17,
                                  2407,
                                  15,
                                  0,
                                  "silentFail"
                                ),
                                AST$(
                                  3,
                                  2407,
                                  1,
                                  0,
                                  AST$(
                                    17,
                                    2407,
                                    1,
                                    0,
                                    "func"
                                  ),
                                  "=",
                                  AST$(
                                    17,
                                    2407,
                                    32,
                                    0,
                                    "doNothing"
                                  )
                                ),
                                AST$(
                                  3,
                                  2407,
                                  1,
                                  0,
                                  AST$(
                                    17,
                                    2407,
                                    1,
                                    0,
                                    "func"
                                  ),
                                  "=",
                                  AST$(
                                    17,
                                    2407,
                                    48,
                                    0,
                                    "replacement"
                                  )
                                )
                              ),
                              AST$(
                                23,
                                2408,
                                1,
                                0,
                                AST$(
                                  7,
                                  2408,
                                  1,
                                  0,
                                  AST$(
                                    3,
                                    2408,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      2408,
                                      1,
                                      0,
                                      "f"
                                    ),
                                    ".",
                                    AST$(
                                      9,
                                      2408,
                                      1,
                                      0,
                                      "apply"
                                    )
                                  ),
                                  0,
                                  AST$(25, 2408, 8, 0),
                                  AST$(1, 2408, 17, 0)
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              ),
              0
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$["function"]),
            dependencies: ["__toArray", "__typeof"]
          },
          __async: {
            helper: AST$(
              16,
              2510,
              26,
              0,
              0,
              [
                AST$(
                  17,
                  2510,
                  34,
                  0,
                  "limit"
                ),
                AST$(
                  17,
                  2510,
                  51,
                  0,
                  "length"
                ),
                AST$(
                  17,
                  2510,
                  69,
                  0,
                  "hasResult"
                ),
                AST$(
                  17,
                  2510,
                  92,
                  0,
                  "onValue"
                ),
                AST$(
                  17,
                  2510,
                  108,
                  0,
                  "onComplete"
                )
              ],
              [
                "broken",
                "completed",
                "index",
                "result",
                "slotsUsed",
                "sync"
              ],
              AST$(
                4,
                2510,
                26,
                0,
                0,
                AST$(
                  18,
                  2510,
                  26,
                  0,
                  AST$(
                    3,
                    2510,
                    26,
                    0,
                    AST$(
                      30,
                      2510,
                      26,
                      0,
                      "typeof",
                      AST$(
                        17,
                        2510,
                        34,
                        0,
                        "limit"
                      )
                    ),
                    "!==",
                    AST$(
                      9,
                      2510,
                      26,
                      0,
                      "number"
                    )
                  ),
                  AST$(
                    26,
                    2510,
                    26,
                    0,
                    AST$(
                      7,
                      2510,
                      26,
                      0,
                      AST$(
                        17,
                        2510,
                        26,
                        0,
                        "TypeError"
                      ),
                      0,
                      AST$(
                        3,
                        2510,
                        26,
                        0,
                        AST$(
                          9,
                          2510,
                          26,
                          0,
                          "Expected limit to be a Number, got "
                        ),
                        "+",
                        AST$(
                          7,
                          2510,
                          26,
                          0,
                          AST$(
                            17,
                            2510,
                            26,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            2510,
                            34,
                            0,
                            "limit"
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  2510,
                  26,
                  0,
                  AST$(
                    3,
                    2510,
                    26,
                    0,
                    AST$(
                      30,
                      2510,
                      26,
                      0,
                      "typeof",
                      AST$(
                        17,
                        2510,
                        51,
                        0,
                        "length"
                      )
                    ),
                    "!==",
                    AST$(
                      9,
                      2510,
                      26,
                      0,
                      "number"
                    )
                  ),
                  AST$(
                    26,
                    2510,
                    26,
                    0,
                    AST$(
                      7,
                      2510,
                      26,
                      0,
                      AST$(
                        17,
                        2510,
                        26,
                        0,
                        "TypeError"
                      ),
                      0,
                      AST$(
                        3,
                        2510,
                        26,
                        0,
                        AST$(
                          9,
                          2510,
                          26,
                          0,
                          "Expected length to be a Number, got "
                        ),
                        "+",
                        AST$(
                          7,
                          2510,
                          26,
                          0,
                          AST$(
                            17,
                            2510,
                            26,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            2510,
                            51,
                            0,
                            "length"
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  2510,
                  26,
                  0,
                  AST$(
                    3,
                    2510,
                    26,
                    0,
                    AST$(
                      17,
                      2510,
                      69,
                      0,
                      "hasResult"
                    ),
                    "==",
                    AST$(
                      9,
                      1,
                      1,
                      0,
                      null
                    )
                  ),
                  AST$(
                    3,
                    2510,
                    26,
                    0,
                    AST$(
                      17,
                      2510,
                      69,
                      0,
                      "hasResult"
                    ),
                    "=",
                    AST$(
                      9,
                      1,
                      1,
                      0,
                      false
                    )
                  ),
                  AST$(
                    18,
                    2510,
                    26,
                    0,
                    AST$(
                      3,
                      2510,
                      26,
                      0,
                      AST$(
                        30,
                        2510,
                        26,
                        0,
                        "typeof",
                        AST$(
                          17,
                          2510,
                          69,
                          0,
                          "hasResult"
                        )
                      ),
                      "!==",
                      AST$(
                        9,
                        2510,
                        26,
                        0,
                        "boolean"
                      )
                    ),
                    AST$(
                      26,
                      2510,
                      26,
                      0,
                      AST$(
                        7,
                        2510,
                        26,
                        0,
                        AST$(
                          17,
                          2510,
                          26,
                          0,
                          "TypeError"
                        ),
                        0,
                        AST$(
                          3,
                          2510,
                          26,
                          0,
                          AST$(
                            9,
                            2510,
                            26,
                            0,
                            "Expected hasResult to be a Boolean, got "
                          ),
                          "+",
                          AST$(
                            7,
                            2510,
                            26,
                            0,
                            AST$(
                              17,
                              2510,
                              26,
                              0,
                              "__typeof"
                            ),
                            0,
                            AST$(
                              17,
                              2510,
                              69,
                              0,
                              "hasResult"
                            )
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  2510,
                  26,
                  0,
                  AST$(
                    3,
                    2510,
                    26,
                    0,
                    AST$(
                      30,
                      2510,
                      26,
                      0,
                      "typeof",
                      AST$(
                        17,
                        2510,
                        92,
                        0,
                        "onValue"
                      )
                    ),
                    "!==",
                    AST$(
                      9,
                      2510,
                      26,
                      0,
                      "function"
                    )
                  ),
                  AST$(
                    26,
                    2510,
                    26,
                    0,
                    AST$(
                      7,
                      2510,
                      26,
                      0,
                      AST$(
                        17,
                        2510,
                        26,
                        0,
                        "TypeError"
                      ),
                      0,
                      AST$(
                        3,
                        2510,
                        26,
                        0,
                        AST$(
                          9,
                          2510,
                          26,
                          0,
                          "Expected onValue to be a Function, got "
                        ),
                        "+",
                        AST$(
                          7,
                          2510,
                          26,
                          0,
                          AST$(
                            17,
                            2510,
                            26,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            2510,
                            92,
                            0,
                            "onValue"
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  2510,
                  26,
                  0,
                  AST$(
                    3,
                    2510,
                    26,
                    0,
                    AST$(
                      30,
                      2510,
                      26,
                      0,
                      "typeof",
                      AST$(
                        17,
                        2510,
                        108,
                        0,
                        "onComplete"
                      )
                    ),
                    "!==",
                    AST$(
                      9,
                      2510,
                      26,
                      0,
                      "function"
                    )
                  ),
                  AST$(
                    26,
                    2510,
                    26,
                    0,
                    AST$(
                      7,
                      2510,
                      26,
                      0,
                      AST$(
                        17,
                        2510,
                        26,
                        0,
                        "TypeError"
                      ),
                      0,
                      AST$(
                        3,
                        2510,
                        26,
                        0,
                        AST$(
                          9,
                          2510,
                          26,
                          0,
                          "Expected onComplete to be a Function, got "
                        ),
                        "+",
                        AST$(
                          7,
                          2510,
                          26,
                          0,
                          AST$(
                            17,
                            2510,
                            26,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            2510,
                            108,
                            0,
                            "onComplete"
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  2511,
                  15,
                  0,
                  AST$(
                    17,
                    2511,
                    18,
                    0,
                    "hasResult"
                  ),
                  AST$(
                    3,
                    2511,
                    1,
                    0,
                    AST$(
                      17,
                      2511,
                      6,
                      0,
                      "result"
                    ),
                    "=",
                    AST$(2, 2511, 34, 0)
                  ),
                  AST$(
                    3,
                    2511,
                    1,
                    0,
                    AST$(
                      17,
                      2511,
                      6,
                      0,
                      "result"
                    ),
                    "=",
                    AST$(
                      9,
                      2511,
                      42,
                      0,
                      null
                    )
                  )
                ),
                AST$(
                  18,
                  2512,
                  1,
                  0,
                  AST$(
                    3,
                    2512,
                    5,
                    0,
                    AST$(
                      17,
                      2512,
                      5,
                      0,
                      "length"
                    ),
                    "<=",
                    AST$(
                      9,
                      2512,
                      17,
                      0,
                      0
                    )
                  ),
                  AST$(
                    23,
                    2513,
                    1,
                    0,
                    AST$(
                      7,
                      2513,
                      11,
                      0,
                      AST$(
                        17,
                        2513,
                        11,
                        0,
                        "onComplete"
                      ),
                      0,
                      AST$(
                        9,
                        2513,
                        24,
                        0,
                        null
                      ),
                      AST$(
                        17,
                        2513,
                        29,
                        0,
                        "result"
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  2514,
                  1,
                  0,
                  AST$(
                    3,
                    2514,
                    5,
                    0,
                    AST$(
                      3,
                      2514,
                      5,
                      0,
                      AST$(
                        17,
                        2514,
                        5,
                        0,
                        "limit"
                      ),
                      "<",
                      AST$(
                        9,
                        2514,
                        15,
                        0,
                        1
                      )
                    ),
                    "||",
                    AST$(
                      3,
                      2514,
                      19,
                      0,
                      AST$(
                        17,
                        2514,
                        19,
                        0,
                        "limit"
                      ),
                      "!==",
                      AST$(
                        17,
                        2514,
                        28,
                        0,
                        "limit"
                      )
                    )
                  ),
                  AST$(
                    3,
                    2515,
                    1,
                    0,
                    AST$(
                      17,
                      2515,
                      1,
                      0,
                      "limit"
                    ),
                    "=",
                    AST$(
                      9,
                      2515,
                      13,
                      0,
                      1/0
                    )
                  )
                ),
                AST$(
                  3,
                  2517,
                  1,
                  0,
                  AST$(
                    17,
                    2517,
                    14,
                    0,
                    "broken"
                  ),
                  "=",
                  AST$(
                    9,
                    2517,
                    23,
                    0,
                    null
                  )
                ),
                AST$(
                  3,
                  2518,
                  1,
                  0,
                  AST$(
                    17,
                    2518,
                    14,
                    0,
                    "slotsUsed"
                  ),
                  "=",
                  AST$(
                    9,
                    2518,
                    28,
                    0,
                    0
                  )
                ),
                AST$(
                  3,
                  2519,
                  1,
                  0,
                  AST$(
                    17,
                    2519,
                    14,
                    0,
                    "sync"
                  ),
                  "=",
                  AST$(
                    9,
                    2519,
                    21,
                    0,
                    false
                  )
                ),
                AST$(
                  3,
                  2520,
                  1,
                  0,
                  AST$(
                    17,
                    2520,
                    14,
                    0,
                    "completed"
                  ),
                  "=",
                  AST$(
                    9,
                    2520,
                    26,
                    0,
                    false
                  )
                ),
                AST$(
                  16,
                  2521,
                  1,
                  0,
                  AST$(
                    17,
                    2521,
                    6,
                    0,
                    "onValueCallback"
                  ),
                  [
                    AST$(
                      17,
                      2521,
                      25,
                      0,
                      "err"
                    ),
                    AST$(
                      17,
                      2521,
                      29,
                      0,
                      "value"
                    )
                  ],
                  0,
                  AST$(
                    4,
                    2522,
                    1,
                    0,
                    0,
                    AST$(
                      18,
                      2522,
                      1,
                      0,
                      AST$(
                        17,
                        2522,
                        7,
                        0,
                        "completed"
                      ),
                      AST$(23, 2523, 1, 0)
                    ),
                    AST$(
                      30,
                      2524,
                      1,
                      0,
                      "--",
                      AST$(
                        17,
                        2524,
                        1,
                        0,
                        "slotsUsed"
                      )
                    ),
                    AST$(
                      18,
                      2525,
                      1,
                      0,
                      AST$(
                        3,
                        2525,
                        7,
                        0,
                        AST$(
                          3,
                          2525,
                          7,
                          0,
                          AST$(
                            17,
                            2525,
                            7,
                            0,
                            "err"
                          ),
                          "!=",
                          AST$(
                            9,
                            1,
                            1,
                            0,
                            null
                          )
                        ),
                        "&&",
                        AST$(
                          3,
                          2525,
                          16,
                          0,
                          AST$(
                            17,
                            2525,
                            20,
                            0,
                            "broken"
                          ),
                          "==",
                          AST$(
                            9,
                            1,
                            1,
                            0,
                            null
                          )
                        )
                      ),
                      AST$(
                        3,
                        2526,
                        1,
                        0,
                        AST$(
                          17,
                          2526,
                          1,
                          0,
                          "broken"
                        ),
                        "=",
                        AST$(
                          17,
                          2526,
                          16,
                          0,
                          "err"
                        )
                      )
                    ),
                    AST$(
                      18,
                      2527,
                      1,
                      0,
                      AST$(
                        3,
                        2527,
                        7,
                        0,
                        AST$(
                          3,
                          2527,
                          7,
                          0,
                          AST$(
                            17,
                            2527,
                            7,
                            0,
                            "hasResult"
                          ),
                          "&&",
                          AST$(
                            3,
                            2527,
                            22,
                            0,
                            AST$(
                              17,
                              2527,
                              26,
                              0,
                              "broken"
                            ),
                            "==",
                            AST$(
                              9,
                              1,
                              1,
                              0,
                              null
                            )
                          )
                        ),
                        "&&",
                        AST$(
                          3,
                          2527,
                          38,
                          0,
                          AST$(
                            3,
                            2527,
                            38,
                            0,
                            AST$(1, 2527, 38, 0),
                            ".",
                            AST$(
                              9,
                              2527,
                              49,
                              0,
                              "length"
                            )
                          ),
                          ">",
                          AST$(
                            9,
                            2527,
                            59,
                            0,
                            1
                          )
                        )
                      ),
                      AST$(
                        7,
                        2528,
                        1,
                        0,
                        AST$(
                          3,
                          2528,
                          1,
                          0,
                          AST$(
                            17,
                            2528,
                            1,
                            0,
                            "result"
                          ),
                          ".",
                          AST$(
                            9,
                            2528,
                            14,
                            0,
                            "push"
                          )
                        ),
                        0,
                        AST$(
                          17,
                          2528,
                          19,
                          0,
                          "value"
                        )
                      )
                    ),
                    AST$(
                      18,
                      2529,
                      1,
                      0,
                      AST$(
                        30,
                        2529,
                        7,
                        0,
                        "!",
                        AST$(
                          17,
                          2529,
                          11,
                          0,
                          "sync"
                        )
                      ),
                      AST$(
                        7,
                        2530,
                        1,
                        0,
                        AST$(
                          17,
                          2530,
                          1,
                          0,
                          "next"
                        ),
                        0
                      )
                    )
                  )
                ),
                AST$(
                  3,
                  2531,
                  1,
                  0,
                  AST$(
                    17,
                    2531,
                    14,
                    0,
                    "index"
                  ),
                  "=",
                  AST$(
                    9,
                    2531,
                    22,
                    0,
                    -1
                  )
                ),
                AST$(
                  16,
                  2532,
                  1,
                  0,
                  AST$(
                    17,
                    2532,
                    6,
                    0,
                    "next"
                  ),
                  0,
                  0,
                  AST$(
                    4,
                    2533,
                    1,
                    0,
                    0,
                    AST$(
                      14,
                      2533,
                      1,
                      0,
                      AST$(20, 2533, 1, 0),
                      AST$(
                        3,
                        2533,
                        10,
                        0,
                        AST$(
                          3,
                          2533,
                          10,
                          0,
                          AST$(
                            3,
                            2533,
                            10,
                            0,
                            AST$(
                              30,
                              2533,
                              10,
                              0,
                              "!",
                              AST$(
                                17,
                                2533,
                                14,
                                0,
                                "completed"
                              )
                            ),
                            "&&",
                            AST$(
                              3,
                              2533,
                              28,
                              0,
                              AST$(
                                17,
                                2533,
                                32,
                                0,
                                "broken"
                              ),
                              "==",
                              AST$(
                                9,
                                1,
                                1,
                                0,
                                null
                              )
                            )
                          ),
                          "&&",
                          AST$(
                            3,
                            2533,
                            44,
                            0,
                            AST$(
                              17,
                              2533,
                              44,
                              0,
                              "slotsUsed"
                            ),
                            "<",
                            AST$(
                              17,
                              2533,
                              58,
                              0,
                              "limit"
                            )
                          )
                        ),
                        "&&",
                        AST$(
                          3,
                          2533,
                          68,
                          0,
                          AST$(
                            30,
                            2533,
                            70,
                            0,
                            "++",
                            AST$(
                              17,
                              2533,
                              70,
                              0,
                              "index"
                            )
                          ),
                          "<",
                          AST$(
                            17,
                            2533,
                            84,
                            0,
                            "length"
                          )
                        )
                      ),
                      AST$(20, 2533, 1, 0),
                      AST$(
                        4,
                        2534,
                        1,
                        0,
                        0,
                        AST$(
                          30,
                          2534,
                          1,
                          0,
                          "++",
                          AST$(
                            17,
                            2534,
                            1,
                            0,
                            "slotsUsed"
                          )
                        ),
                        AST$(
                          3,
                          2535,
                          1,
                          0,
                          AST$(
                            17,
                            2535,
                            1,
                            0,
                            "sync"
                          ),
                          "=",
                          AST$(
                            9,
                            2535,
                            14,
                            0,
                            true
                          )
                        ),
                        AST$(
                          7,
                          2536,
                          1,
                          0,
                          AST$(
                            17,
                            2536,
                            1,
                            0,
                            "onValue"
                          ),
                          0,
                          AST$(
                            17,
                            2536,
                            16,
                            0,
                            "index"
                          ),
                          AST$(
                            7,
                            2536,
                            22,
                            0,
                            AST$(
                              17,
                              2536,
                              22,
                              0,
                              "__once"
                            ),
                            0,
                            AST$(
                              17,
                              2536,
                              29,
                              0,
                              "onValueCallback"
                            )
                          )
                        ),
                        AST$(
                          3,
                          2537,
                          1,
                          0,
                          AST$(
                            17,
                            2537,
                            1,
                            0,
                            "sync"
                          ),
                          "=",
                          AST$(
                            9,
                            2537,
                            14,
                            0,
                            false
                          )
                        )
                      )
                    ),
                    AST$(
                      18,
                      2538,
                      1,
                      0,
                      AST$(
                        3,
                        2538,
                        7,
                        0,
                        AST$(
                          30,
                          2538,
                          7,
                          0,
                          "!",
                          AST$(
                            17,
                            2538,
                            11,
                            0,
                            "completed"
                          )
                        ),
                        "&&",
                        AST$(
                          3,
                          2538,
                          27,
                          0,
                          AST$(
                            3,
                            2538,
                            27,
                            0,
                            AST$(
                              17,
                              2538,
                              27,
                              0,
                              "broken"
                            ),
                            "!=",
                            AST$(
                              9,
                              1,
                              1,
                              0,
                              null
                            )
                          ),
                          "||",
                          AST$(
                            3,
                            2538,
                            37,
                            0,
                            AST$(
                              17,
                              2538,
                              37,
                              0,
                              "slotsUsed"
                            ),
                            "===",
                            AST$(
                              9,
                              2538,
                              52,
                              0,
                              0
                            )
                          )
                        )
                      ),
                      AST$(
                        4,
                        2539,
                        1,
                        0,
                        0,
                        AST$(
                          3,
                          2539,
                          1,
                          0,
                          AST$(
                            17,
                            2539,
                            1,
                            0,
                            "completed"
                          ),
                          "=",
                          AST$(
                            9,
                            2539,
                            19,
                            0,
                            true
                          )
                        ),
                        AST$(
                          18,
                          2540,
                          1,
                          0,
                          AST$(
                            3,
                            2540,
                            9,
                            0,
                            AST$(
                              17,
                              2540,
                              9,
                              0,
                              "broken"
                            ),
                            "!=",
                            AST$(
                              9,
                              1,
                              1,
                              0,
                              null
                            )
                          ),
                          AST$(
                            7,
                            2541,
                            1,
                            0,
                            AST$(
                              17,
                              2541,
                              1,
                              0,
                              "onComplete"
                            ),
                            0,
                            AST$(
                              17,
                              2541,
                              21,
                              0,
                              "broken"
                            )
                          ),
                          AST$(
                            7,
                            2543,
                            1,
                            0,
                            AST$(
                              17,
                              2543,
                              1,
                              0,
                              "onComplete"
                            ),
                            0,
                            AST$(
                              9,
                              2543,
                              21,
                              0,
                              null
                            ),
                            AST$(
                              17,
                              2543,
                              26,
                              0,
                              "result"
                            )
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  7,
                  2544,
                  1,
                  0,
                  AST$(
                    17,
                    2544,
                    1,
                    0,
                    "next"
                  ),
                  0
                )
              )
            ),
            type: TYPE$["function"],
            dependencies: ["__once", "__typeof"]
          },
          __asyncIter: {
            helper: AST$(
              16,
              2546,
              31,
              0,
              0,
              [
                AST$(
                  17,
                  2546,
                  39,
                  0,
                  "limit"
                ),
                AST$(
                  17,
                  2546,
                  56,
                  0,
                  "iterator"
                ),
                AST$(
                  17,
                  2546,
                  86,
                  0,
                  "hasResult"
                ),
                AST$(
                  17,
                  2546,
                  109,
                  0,
                  "onValue"
                ),
                AST$(
                  17,
                  2546,
                  125,
                  0,
                  "onComplete"
                )
              ],
              [
                "broken",
                "close",
                "completed",
                "index",
                "iterStopped",
                "result",
                "slotsUsed",
                "sync"
              ],
              AST$(
                4,
                2546,
                31,
                0,
                0,
                AST$(
                  18,
                  2546,
                  31,
                  0,
                  AST$(
                    3,
                    2546,
                    31,
                    0,
                    AST$(
                      30,
                      2546,
                      31,
                      0,
                      "typeof",
                      AST$(
                        17,
                        2546,
                        39,
                        0,
                        "limit"
                      )
                    ),
                    "!==",
                    AST$(
                      9,
                      2546,
                      31,
                      0,
                      "number"
                    )
                  ),
                  AST$(
                    26,
                    2546,
                    31,
                    0,
                    AST$(
                      7,
                      2546,
                      31,
                      0,
                      AST$(
                        17,
                        2546,
                        31,
                        0,
                        "TypeError"
                      ),
                      0,
                      AST$(
                        3,
                        2546,
                        31,
                        0,
                        AST$(
                          9,
                          2546,
                          31,
                          0,
                          "Expected limit to be a Number, got "
                        ),
                        "+",
                        AST$(
                          7,
                          2546,
                          31,
                          0,
                          AST$(
                            17,
                            2546,
                            31,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            2546,
                            39,
                            0,
                            "limit"
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  2546,
                  31,
                  0,
                  AST$(
                    3,
                    2546,
                    31,
                    0,
                    AST$(
                      3,
                      2546,
                      31,
                      0,
                      AST$(
                        30,
                        2546,
                        31,
                        0,
                        "typeof",
                        AST$(
                          17,
                          2546,
                          56,
                          0,
                          "iterator"
                        )
                      ),
                      "!==",
                      AST$(
                        9,
                        2546,
                        31,
                        0,
                        "object"
                      )
                    ),
                    "||",
                    AST$(
                      3,
                      2546,
                      31,
                      0,
                      AST$(
                        17,
                        2546,
                        56,
                        0,
                        "iterator"
                      ),
                      "===",
                      AST$(
                        9,
                        1,
                        1,
                        0,
                        null
                      )
                    )
                  ),
                  AST$(
                    26,
                    2546,
                    31,
                    0,
                    AST$(
                      7,
                      2546,
                      31,
                      0,
                      AST$(
                        17,
                        2546,
                        31,
                        0,
                        "TypeError"
                      ),
                      0,
                      AST$(
                        3,
                        2546,
                        31,
                        0,
                        AST$(
                          9,
                          2546,
                          31,
                          0,
                          "Expected iterator to be an Object, got "
                        ),
                        "+",
                        AST$(
                          7,
                          2546,
                          31,
                          0,
                          AST$(
                            17,
                            2546,
                            31,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            2546,
                            56,
                            0,
                            "iterator"
                          )
                        )
                      )
                    )
                  ),
                  AST$(
                    18,
                    2546,
                    31,
                    0,
                    AST$(
                      3,
                      2546,
                      31,
                      0,
                      AST$(
                        30,
                        2546,
                        31,
                        0,
                        "typeof",
                        AST$(
                          3,
                          2546,
                          31,
                          0,
                          AST$(
                            17,
                            2546,
                            56,
                            0,
                            "iterator"
                          ),
                          ".",
                          AST$(
                            9,
                            2546,
                            70,
                            0,
                            "next"
                          )
                        )
                      ),
                      "!==",
                      AST$(
                        9,
                        2546,
                        31,
                        0,
                        "function"
                      )
                    ),
                    AST$(
                      26,
                      2546,
                      31,
                      0,
                      AST$(
                        7,
                        2546,
                        31,
                        0,
                        AST$(
                          17,
                          2546,
                          31,
                          0,
                          "TypeError"
                        ),
                        0,
                        AST$(
                          3,
                          2546,
                          31,
                          0,
                          AST$(
                            9,
                            2546,
                            31,
                            0,
                            "Expected iterator.next to be a Function, got "
                          ),
                          "+",
                          AST$(
                            7,
                            2546,
                            31,
                            0,
                            AST$(
                              17,
                              2546,
                              31,
                              0,
                              "__typeof"
                            ),
                            0,
                            AST$(
                              3,
                              2546,
                              31,
                              0,
                              AST$(
                                17,
                                2546,
                                56,
                                0,
                                "iterator"
                              ),
                              ".",
                              AST$(
                                9,
                                2546,
                                70,
                                0,
                                "next"
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  2546,
                  31,
                  0,
                  AST$(
                    3,
                    2546,
                    31,
                    0,
                    AST$(
                      17,
                      2546,
                      86,
                      0,
                      "hasResult"
                    ),
                    "==",
                    AST$(
                      9,
                      1,
                      1,
                      0,
                      null
                    )
                  ),
                  AST$(
                    3,
                    2546,
                    31,
                    0,
                    AST$(
                      17,
                      2546,
                      86,
                      0,
                      "hasResult"
                    ),
                    "=",
                    AST$(
                      9,
                      1,
                      1,
                      0,
                      false
                    )
                  ),
                  AST$(
                    18,
                    2546,
                    31,
                    0,
                    AST$(
                      3,
                      2546,
                      31,
                      0,
                      AST$(
                        30,
                        2546,
                        31,
                        0,
                        "typeof",
                        AST$(
                          17,
                          2546,
                          86,
                          0,
                          "hasResult"
                        )
                      ),
                      "!==",
                      AST$(
                        9,
                        2546,
                        31,
                        0,
                        "boolean"
                      )
                    ),
                    AST$(
                      26,
                      2546,
                      31,
                      0,
                      AST$(
                        7,
                        2546,
                        31,
                        0,
                        AST$(
                          17,
                          2546,
                          31,
                          0,
                          "TypeError"
                        ),
                        0,
                        AST$(
                          3,
                          2546,
                          31,
                          0,
                          AST$(
                            9,
                            2546,
                            31,
                            0,
                            "Expected hasResult to be a Boolean, got "
                          ),
                          "+",
                          AST$(
                            7,
                            2546,
                            31,
                            0,
                            AST$(
                              17,
                              2546,
                              31,
                              0,
                              "__typeof"
                            ),
                            0,
                            AST$(
                              17,
                              2546,
                              86,
                              0,
                              "hasResult"
                            )
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  2546,
                  31,
                  0,
                  AST$(
                    3,
                    2546,
                    31,
                    0,
                    AST$(
                      30,
                      2546,
                      31,
                      0,
                      "typeof",
                      AST$(
                        17,
                        2546,
                        109,
                        0,
                        "onValue"
                      )
                    ),
                    "!==",
                    AST$(
                      9,
                      2546,
                      31,
                      0,
                      "function"
                    )
                  ),
                  AST$(
                    26,
                    2546,
                    31,
                    0,
                    AST$(
                      7,
                      2546,
                      31,
                      0,
                      AST$(
                        17,
                        2546,
                        31,
                        0,
                        "TypeError"
                      ),
                      0,
                      AST$(
                        3,
                        2546,
                        31,
                        0,
                        AST$(
                          9,
                          2546,
                          31,
                          0,
                          "Expected onValue to be a Function, got "
                        ),
                        "+",
                        AST$(
                          7,
                          2546,
                          31,
                          0,
                          AST$(
                            17,
                            2546,
                            31,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            2546,
                            109,
                            0,
                            "onValue"
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  2546,
                  31,
                  0,
                  AST$(
                    3,
                    2546,
                    31,
                    0,
                    AST$(
                      30,
                      2546,
                      31,
                      0,
                      "typeof",
                      AST$(
                        17,
                        2546,
                        125,
                        0,
                        "onComplete"
                      )
                    ),
                    "!==",
                    AST$(
                      9,
                      2546,
                      31,
                      0,
                      "function"
                    )
                  ),
                  AST$(
                    26,
                    2546,
                    31,
                    0,
                    AST$(
                      7,
                      2546,
                      31,
                      0,
                      AST$(
                        17,
                        2546,
                        31,
                        0,
                        "TypeError"
                      ),
                      0,
                      AST$(
                        3,
                        2546,
                        31,
                        0,
                        AST$(
                          9,
                          2546,
                          31,
                          0,
                          "Expected onComplete to be a Function, got "
                        ),
                        "+",
                        AST$(
                          7,
                          2546,
                          31,
                          0,
                          AST$(
                            17,
                            2546,
                            31,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            2546,
                            125,
                            0,
                            "onComplete"
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  2547,
                  1,
                  0,
                  AST$(
                    3,
                    2547,
                    5,
                    0,
                    AST$(
                      3,
                      2547,
                      5,
                      0,
                      AST$(
                        17,
                        2547,
                        5,
                        0,
                        "limit"
                      ),
                      "<",
                      AST$(
                        9,
                        2547,
                        15,
                        0,
                        1
                      )
                    ),
                    "||",
                    AST$(
                      3,
                      2547,
                      19,
                      0,
                      AST$(
                        17,
                        2547,
                        19,
                        0,
                        "limit"
                      ),
                      "!==",
                      AST$(
                        17,
                        2547,
                        28,
                        0,
                        "limit"
                      )
                    )
                  ),
                  AST$(
                    3,
                    2548,
                    1,
                    0,
                    AST$(
                      17,
                      2548,
                      1,
                      0,
                      "limit"
                    ),
                    "=",
                    AST$(
                      9,
                      2548,
                      13,
                      0,
                      1/0
                    )
                  )
                ),
                AST$(
                  3,
                  2549,
                  1,
                  0,
                  AST$(
                    17,
                    2549,
                    14,
                    0,
                    "broken"
                  ),
                  "=",
                  AST$(
                    9,
                    2549,
                    23,
                    0,
                    null
                  )
                ),
                AST$(
                  3,
                  2550,
                  1,
                  0,
                  AST$(
                    17,
                    2550,
                    14,
                    0,
                    "slotsUsed"
                  ),
                  "=",
                  AST$(
                    9,
                    2550,
                    28,
                    0,
                    0
                  )
                ),
                AST$(
                  3,
                  2551,
                  1,
                  0,
                  AST$(
                    17,
                    2551,
                    14,
                    0,
                    "sync"
                  ),
                  "=",
                  AST$(
                    9,
                    2551,
                    21,
                    0,
                    false
                  )
                ),
                AST$(
                  18,
                  2552,
                  15,
                  0,
                  AST$(
                    17,
                    2552,
                    18,
                    0,
                    "hasResult"
                  ),
                  AST$(
                    3,
                    2552,
                    1,
                    0,
                    AST$(
                      17,
                      2552,
                      6,
                      0,
                      "result"
                    ),
                    "=",
                    AST$(2, 2552, 34, 0)
                  ),
                  AST$(
                    3,
                    2552,
                    1,
                    0,
                    AST$(
                      17,
                      2552,
                      6,
                      0,
                      "result"
                    ),
                    "=",
                    AST$(
                      9,
                      2552,
                      42,
                      0,
                      null
                    )
                  )
                ),
                AST$(
                  3,
                  2553,
                  1,
                  0,
                  AST$(
                    17,
                    2553,
                    14,
                    0,
                    "completed"
                  ),
                  "=",
                  AST$(
                    9,
                    2553,
                    26,
                    0,
                    false
                  )
                ),
                AST$(
                  16,
                  2554,
                  1,
                  0,
                  AST$(
                    17,
                    2554,
                    6,
                    0,
                    "onValueCallback"
                  ),
                  [
                    AST$(
                      17,
                      2554,
                      25,
                      0,
                      "err"
                    ),
                    AST$(
                      17,
                      2554,
                      29,
                      0,
                      "value"
                    )
                  ],
                  0,
                  AST$(
                    4,
                    2555,
                    1,
                    0,
                    0,
                    AST$(
                      18,
                      2555,
                      1,
                      0,
                      AST$(
                        17,
                        2555,
                        7,
                        0,
                        "completed"
                      ),
                      AST$(23, 2556, 1, 0)
                    ),
                    AST$(
                      30,
                      2557,
                      1,
                      0,
                      "--",
                      AST$(
                        17,
                        2557,
                        1,
                        0,
                        "slotsUsed"
                      )
                    ),
                    AST$(
                      18,
                      2558,
                      1,
                      0,
                      AST$(
                        3,
                        2558,
                        7,
                        0,
                        AST$(
                          3,
                          2558,
                          7,
                          0,
                          AST$(
                            17,
                            2558,
                            7,
                            0,
                            "err"
                          ),
                          "!=",
                          AST$(
                            9,
                            1,
                            1,
                            0,
                            null
                          )
                        ),
                        "&&",
                        AST$(
                          3,
                          2558,
                          16,
                          0,
                          AST$(
                            17,
                            2558,
                            20,
                            0,
                            "broken"
                          ),
                          "==",
                          AST$(
                            9,
                            1,
                            1,
                            0,
                            null
                          )
                        )
                      ),
                      AST$(
                        3,
                        2559,
                        1,
                        0,
                        AST$(
                          17,
                          2559,
                          1,
                          0,
                          "broken"
                        ),
                        "=",
                        AST$(
                          17,
                          2559,
                          16,
                          0,
                          "err"
                        )
                      )
                    ),
                    AST$(
                      18,
                      2560,
                      1,
                      0,
                      AST$(
                        3,
                        2560,
                        7,
                        0,
                        AST$(
                          3,
                          2560,
                          7,
                          0,
                          AST$(
                            17,
                            2560,
                            7,
                            0,
                            "hasResult"
                          ),
                          "&&",
                          AST$(
                            3,
                            2560,
                            22,
                            0,
                            AST$(
                              17,
                              2560,
                              26,
                              0,
                              "broken"
                            ),
                            "==",
                            AST$(
                              9,
                              1,
                              1,
                              0,
                              null
                            )
                          )
                        ),
                        "&&",
                        AST$(
                          3,
                          2560,
                          38,
                          0,
                          AST$(
                            3,
                            2560,
                            38,
                            0,
                            AST$(1, 2560, 38, 0),
                            ".",
                            AST$(
                              9,
                              2560,
                              49,
                              0,
                              "length"
                            )
                          ),
                          ">",
                          AST$(
                            9,
                            2560,
                            59,
                            0,
                            1
                          )
                        )
                      ),
                      AST$(
                        7,
                        2561,
                        1,
                        0,
                        AST$(
                          3,
                          2561,
                          1,
                          0,
                          AST$(
                            17,
                            2561,
                            1,
                            0,
                            "result"
                          ),
                          ".",
                          AST$(
                            9,
                            2561,
                            14,
                            0,
                            "push"
                          )
                        ),
                        0,
                        AST$(
                          17,
                          2561,
                          19,
                          0,
                          "value"
                        )
                      )
                    ),
                    AST$(
                      18,
                      2562,
                      1,
                      0,
                      AST$(
                        30,
                        2562,
                        7,
                        0,
                        "!",
                        AST$(
                          17,
                          2562,
                          11,
                          0,
                          "sync"
                        )
                      ),
                      AST$(
                        7,
                        2563,
                        1,
                        0,
                        AST$(
                          17,
                          2563,
                          1,
                          0,
                          "next"
                        ),
                        0
                      )
                    )
                  )
                ),
                AST$(
                  3,
                  2564,
                  1,
                  0,
                  AST$(
                    17,
                    2564,
                    14,
                    0,
                    "index"
                  ),
                  "=",
                  AST$(
                    9,
                    2564,
                    22,
                    0,
                    -1
                  )
                ),
                AST$(
                  3,
                  2565,
                  1,
                  0,
                  AST$(
                    17,
                    2565,
                    14,
                    0,
                    "iterStopped"
                  ),
                  "=",
                  AST$(
                    9,
                    2565,
                    29,
                    0,
                    false
                  )
                ),
                AST$(
                  3,
                  2566,
                  1,
                  0,
                  AST$(
                    17,
                    2566,
                    14,
                    0,
                    "close"
                  ),
                  "=",
                  AST$(
                    16,
                    2566,
                    24,
                    0,
                    0,
                    0,
                    0,
                    AST$(
                      4,
                      2567,
                      1,
                      0,
                      0,
                      AST$(
                        3,
                        2567,
                        1,
                        0,
                        AST$(
                          17,
                          2567,
                          1,
                          0,
                          "close"
                        ),
                        "=",
                        AST$(
                          16,
                          2567,
                          15,
                          0,
                          0,
                          0,
                          0,
                          AST$(20, 2567, 17, 0)
                        )
                      ),
                      AST$(
                        28,
                        2568,
                        1,
                        0,
                        AST$(
                          23,
                          2569,
                          1,
                          0,
                          AST$(
                            7,
                            2569,
                            1,
                            0,
                            AST$(
                              3,
                              2569,
                              1,
                              0,
                              AST$(
                                17,
                                2569,
                                1,
                                0,
                                "iterator"
                              ),
                              ".",
                              AST$(
                                9,
                                2569,
                                16,
                                0,
                                "close"
                              )
                            ),
                            0
                          )
                        ),
                        AST$(
                          17,
                          2570,
                          10,
                          0,
                          "e"
                        ),
                        AST$(23, 2571, 1, 0)
                      )
                    )
                  )
                ),
                AST$(
                  16,
                  2572,
                  1,
                  0,
                  AST$(
                    17,
                    2572,
                    6,
                    0,
                    "next"
                  ),
                  0,
                  ["item"],
                  AST$(
                    4,
                    2573,
                    1,
                    0,
                    0,
                    AST$(
                      14,
                      2573,
                      1,
                      0,
                      AST$(20, 2573, 1, 0),
                      AST$(
                        3,
                        2573,
                        10,
                        0,
                        AST$(
                          3,
                          2573,
                          10,
                          0,
                          AST$(
                            3,
                            2573,
                            10,
                            0,
                            AST$(
                              30,
                              2573,
                              10,
                              0,
                              "!",
                              AST$(
                                17,
                                2573,
                                14,
                                0,
                                "completed"
                              )
                            ),
                            "&&",
                            AST$(
                              3,
                              2573,
                              28,
                              0,
                              AST$(
                                17,
                                2573,
                                32,
                                0,
                                "broken"
                              ),
                              "==",
                              AST$(
                                9,
                                1,
                                1,
                                0,
                                null
                              )
                            )
                          ),
                          "&&",
                          AST$(
                            3,
                            2573,
                            44,
                            0,
                            AST$(
                              17,
                              2573,
                              44,
                              0,
                              "slotsUsed"
                            ),
                            "<",
                            AST$(
                              17,
                              2573,
                              58,
                              0,
                              "limit"
                            )
                          )
                        ),
                        "&&",
                        AST$(
                          30,
                          2573,
                          68,
                          0,
                          "!",
                          AST$(
                            17,
                            2573,
                            72,
                            0,
                            "iterStopped"
                          )
                        )
                      ),
                      AST$(20, 2573, 1, 0),
                      AST$(
                        4,
                        2574,
                        1,
                        0,
                        0,
                        AST$(
                          28,
                          2574,
                          1,
                          0,
                          AST$(
                            3,
                            2575,
                            1,
                            0,
                            AST$(
                              17,
                              2575,
                              12,
                              0,
                              "item"
                            ),
                            "=",
                            AST$(
                              7,
                              2575,
                              19,
                              0,
                              AST$(
                                3,
                                2575,
                                19,
                                0,
                                AST$(
                                  17,
                                  2575,
                                  19,
                                  0,
                                  "iterator"
                                ),
                                ".",
                                AST$(
                                  9,
                                  2575,
                                  29,
                                  0,
                                  "next"
                                )
                              ),
                              0
                            )
                          ),
                          AST$(
                            17,
                            2576,
                            12,
                            0,
                            "e"
                          ),
                          AST$(
                            4,
                            2577,
                            1,
                            0,
                            0,
                            AST$(
                              3,
                              2577,
                              1,
                              0,
                              AST$(
                                17,
                                2577,
                                1,
                                0,
                                "broken"
                              ),
                              "=",
                              AST$(
                                17,
                                2577,
                                18,
                                0,
                                "e"
                              )
                            ),
                            AST$(6, 2578, 1, 0)
                          )
                        ),
                        AST$(
                          18,
                          2580,
                          1,
                          0,
                          AST$(
                            3,
                            2580,
                            9,
                            0,
                            AST$(
                              17,
                              2580,
                              9,
                              0,
                              "item"
                            ),
                            ".",
                            AST$(
                              9,
                              2580,
                              15,
                              0,
                              "done"
                            )
                          ),
                          AST$(
                            4,
                            2581,
                            1,
                            0,
                            0,
                            AST$(
                              3,
                              2581,
                              1,
                              0,
                              AST$(
                                17,
                                2581,
                                1,
                                0,
                                "iterStopped"
                              ),
                              "=",
                              AST$(
                                9,
                                2581,
                                24,
                                0,
                                true
                              )
                            ),
                            AST$(6, 2582, 1, 0)
                          )
                        ),
                        AST$(
                          30,
                          2584,
                          1,
                          0,
                          "++",
                          AST$(
                            17,
                            2584,
                            1,
                            0,
                            "slotsUsed"
                          )
                        ),
                        AST$(
                          3,
                          2585,
                          1,
                          0,
                          AST$(
                            17,
                            2585,
                            1,
                            0,
                            "sync"
                          ),
                          "=",
                          AST$(
                            9,
                            2585,
                            14,
                            0,
                            true
                          )
                        ),
                        AST$(
                          28,
                          2586,
                          1,
                          0,
                          AST$(
                            7,
                            2587,
                            1,
                            0,
                            AST$(
                              17,
                              2587,
                              1,
                              0,
                              "onValue"
                            ),
                            0,
                            AST$(
                              3,
                              2587,
                              18,
                              0,
                              AST$(
                                17,
                                2587,
                                18,
                                0,
                                "item"
                              ),
                              ".",
                              AST$(
                                9,
                                2587,
                                23,
                                0,
                                "value"
                              )
                            ),
                            AST$(
                              30,
                              2587,
                              31,
                              0,
                              "++",
                              AST$(
                                17,
                                2587,
                                31,
                                0,
                                "index"
                              )
                            ),
                            AST$(
                              7,
                              2587,
                              43,
                              0,
                              AST$(
                                17,
                                2587,
                                43,
                                0,
                                "__once"
                              ),
                              0,
                              AST$(
                                17,
                                2587,
                                50,
                                0,
                                "onValueCallback"
                              )
                            )
                          ),
                          AST$(
                            17,
                            2588,
                            12,
                            0,
                            "e"
                          ),
                          AST$(
                            4,
                            2589,
                            1,
                            0,
                            0,
                            AST$(
                              7,
                              2589,
                              1,
                              0,
                              AST$(
                                17,
                                2589,
                                1,
                                0,
                                "close"
                              ),
                              0
                            ),
                            AST$(
                              26,
                              2590,
                              1,
                              0,
                              AST$(
                                17,
                                2590,
                                14,
                                0,
                                "e"
                              )
                            )
                          )
                        ),
                        AST$(
                          3,
                          2591,
                          1,
                          0,
                          AST$(
                            17,
                            2591,
                            1,
                            0,
                            "sync"
                          ),
                          "=",
                          AST$(
                            9,
                            2591,
                            14,
                            0,
                            false
                          )
                        )
                      )
                    ),
                    AST$(
                      18,
                      2592,
                      1,
                      0,
                      AST$(
                        3,
                        2592,
                        7,
                        0,
                        AST$(
                          30,
                          2592,
                          7,
                          0,
                          "!",
                          AST$(
                            17,
                            2592,
                            11,
                            0,
                            "completed"
                          )
                        ),
                        "&&",
                        AST$(
                          3,
                          2592,
                          27,
                          0,
                          AST$(
                            3,
                            2592,
                            27,
                            0,
                            AST$(
                              17,
                              2592,
                              27,
                              0,
                              "broken"
                            ),
                            "!=",
                            AST$(
                              9,
                              1,
                              1,
                              0,
                              null
                            )
                          ),
                          "||",
                          AST$(
                            3,
                            2592,
                            37,
                            0,
                            AST$(
                              17,
                              2592,
                              37,
                              0,
                              "slotsUsed"
                            ),
                            "===",
                            AST$(
                              9,
                              2592,
                              52,
                              0,
                              0
                            )
                          )
                        )
                      ),
                      AST$(
                        4,
                        2593,
                        1,
                        0,
                        0,
                        AST$(
                          3,
                          2593,
                          1,
                          0,
                          AST$(
                            17,
                            2593,
                            1,
                            0,
                            "completed"
                          ),
                          "=",
                          AST$(
                            9,
                            2593,
                            19,
                            0,
                            true
                          )
                        ),
                        AST$(
                          7,
                          2594,
                          1,
                          0,
                          AST$(
                            17,
                            2594,
                            1,
                            0,
                            "close"
                          ),
                          0
                        ),
                        AST$(
                          18,
                          2595,
                          1,
                          0,
                          AST$(
                            3,
                            2595,
                            9,
                            0,
                            AST$(
                              17,
                              2595,
                              9,
                              0,
                              "broken"
                            ),
                            "!=",
                            AST$(
                              9,
                              1,
                              1,
                              0,
                              null
                            )
                          ),
                          AST$(
                            7,
                            2596,
                            1,
                            0,
                            AST$(
                              17,
                              2596,
                              1,
                              0,
                              "onComplete"
                            ),
                            0,
                            AST$(
                              17,
                              2596,
                              21,
                              0,
                              "broken"
                            )
                          ),
                          AST$(
                            7,
                            2598,
                            1,
                            0,
                            AST$(
                              17,
                              2598,
                              1,
                              0,
                              "onComplete"
                            ),
                            0,
                            AST$(
                              9,
                              2598,
                              21,
                              0,
                              null
                            ),
                            AST$(
                              17,
                              2598,
                              26,
                              0,
                              "result"
                            )
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  7,
                  2599,
                  1,
                  0,
                  AST$(
                    17,
                    2599,
                    1,
                    0,
                    "next"
                  ),
                  0
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$["undefined"]),
            dependencies: ["__once", "__typeof"]
          },
          __is: {
            helper: AST$(
              19,
              3141,
              21,
              0,
              AST$(
                3,
                3141,
                24,
                0,
                AST$(
                  30,
                  3141,
                  24,
                  0,
                  "typeof",
                  AST$(
                    3,
                    3141,
                    37,
                    0,
                    AST$(
                      17,
                      3141,
                      37,
                      0,
                      "Object"
                    ),
                    ".",
                    AST$(
                      9,
                      3141,
                      45,
                      0,
                      "is"
                    )
                  )
                ),
                "===",
                AST$(
                  9,
                  3141,
                  24,
                  0,
                  "function"
                )
              ),
              AST$(
                3,
                3142,
                1,
                0,
                AST$(
                  17,
                  3142,
                  1,
                  0,
                  "Object"
                ),
                ".",
                AST$(
                  9,
                  3142,
                  10,
                  0,
                  "is"
                )
              ),
              AST$(
                16,
                3144,
                4,
                0,
                0,
                [
                  AST$(
                    17,
                    3144,
                    5,
                    0,
                    "x"
                  ),
                  AST$(
                    17,
                    3144,
                    7,
                    0,
                    "y"
                  )
                ],
                0,
                AST$(
                  18,
                  3145,
                  1,
                  0,
                  AST$(
                    3,
                    3145,
                    7,
                    0,
                    AST$(
                      17,
                      3145,
                      7,
                      0,
                      "x"
                    ),
                    "===",
                    AST$(
                      17,
                      3145,
                      12,
                      0,
                      "y"
                    )
                  ),
                  AST$(
                    23,
                    3146,
                    1,
                    0,
                    AST$(
                      3,
                      3146,
                      1,
                      0,
                      AST$(
                        3,
                        3146,
                        1,
                        0,
                        AST$(
                          17,
                          3146,
                          1,
                          0,
                          "x"
                        ),
                        "!==",
                        AST$(
                          9,
                          3146,
                          12,
                          0,
                          0
                        )
                      ),
                      "||",
                      AST$(
                        3,
                        3146,
                        18,
                        0,
                        AST$(
                          3,
                          3146,
                          18,
                          0,
                          AST$(
                            9,
                            3146,
                            18,
                            0,
                            1
                          ),
                          "/",
                          AST$(
                            17,
                            3146,
                            22,
                            0,
                            "x"
                          )
                        ),
                        "===",
                        AST$(
                          3,
                          3146,
                          27,
                          0,
                          AST$(
                            9,
                            3146,
                            28,
                            0,
                            1
                          ),
                          "/",
                          AST$(
                            17,
                            3146,
                            32,
                            0,
                            "y"
                          )
                        )
                      )
                    )
                  ),
                  AST$(
                    23,
                    3148,
                    1,
                    0,
                    AST$(
                      3,
                      3148,
                      1,
                      0,
                      AST$(
                        3,
                        3148,
                        1,
                        0,
                        AST$(
                          17,
                          3148,
                          1,
                          0,
                          "x"
                        ),
                        "!==",
                        AST$(
                          17,
                          3148,
                          11,
                          0,
                          "x"
                        )
                      ),
                      "&&",
                      AST$(
                        3,
                        3148,
                        17,
                        0,
                        AST$(
                          17,
                          3148,
                          17,
                          0,
                          "y"
                        ),
                        "!==",
                        AST$(
                          17,
                          3148,
                          22,
                          0,
                          "y"
                        )
                      )
                    )
                  )
                )
              )
            ),
            type: TYPE$.any,
            dependencies: []
          },
          __bind: {
            helper: AST$(
              16,
              3188,
              25,
              0,
              0,
              [
                AST$(
                  17,
                  3188,
                  26,
                  0,
                  "parent"
                ),
                AST$(
                  17,
                  3188,
                  33,
                  0,
                  "child"
                )
              ],
              ["func"],
              AST$(
                4,
                3189,
                1,
                0,
                0,
                AST$(
                  18,
                  3189,
                  1,
                  0,
                  AST$(
                    3,
                    3189,
                    5,
                    0,
                    AST$(
                      17,
                      3189,
                      9,
                      0,
                      "parent"
                    ),
                    "==",
                    AST$(
                      9,
                      1,
                      1,
                      0,
                      null
                    )
                  ),
                  AST$(
                    26,
                    3190,
                    1,
                    0,
                    AST$(
                      7,
                      3190,
                      10,
                      0,
                      AST$(
                        17,
                        3190,
                        10,
                        0,
                        "TypeError"
                      ),
                      0,
                      AST$(
                        3,
                        3190,
                        21,
                        0,
                        AST$(
                          9,
                          3190,
                          21,
                          0,
                          "Expected parent to be an object, got "
                        ),
                        "+",
                        AST$(
                          7,
                          3190,
                          61,
                          0,
                          AST$(
                            17,
                            3190,
                            61,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            3190,
                            68,
                            0,
                            "parent"
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  3,
                  3191,
                  1,
                  0,
                  AST$(
                    17,
                    3191,
                    6,
                    0,
                    "func"
                  ),
                  "=",
                  AST$(
                    3,
                    3191,
                    13,
                    0,
                    AST$(
                      17,
                      3191,
                      13,
                      0,
                      "parent"
                    ),
                    ".",
                    AST$(
                      17,
                      3191,
                      21,
                      0,
                      "child"
                    )
                  )
                ),
                AST$(
                  18,
                  3192,
                  1,
                  0,
                  AST$(
                    3,
                    3192,
                    5,
                    0,
                    AST$(
                      30,
                      3192,
                      9,
                      0,
                      "typeof",
                      AST$(
                        17,
                        3192,
                        22,
                        0,
                        "func"
                      )
                    ),
                    "!==",
                    AST$(
                      9,
                      3192,
                      9,
                      0,
                      "function"
                    )
                  ),
                  AST$(
                    26,
                    3193,
                    1,
                    0,
                    AST$(
                      7,
                      3193,
                      10,
                      0,
                      AST$(
                        17,
                        3193,
                        10,
                        0,
                        "Error"
                      ),
                      0,
                      AST$(
                        3,
                        3193,
                        17,
                        0,
                        AST$(
                          3,
                          3193,
                          17,
                          0,
                          AST$(
                            9,
                            3193,
                            17,
                            0,
                            "Trying to bind child '"
                          ),
                          "+",
                          AST$(
                            7,
                            3193,
                            42,
                            0,
                            AST$(
                              17,
                              3193,
                              42,
                              0,
                              "String"
                            ),
                            0,
                            AST$(
                              17,
                              3193,
                              49,
                              0,
                              "child"
                            )
                          )
                        ),
                        "+",
                        AST$(
                          9,
                          3193,
                          17,
                          0,
                          "' which is not a function"
                        )
                      )
                    )
                  )
                ),
                AST$(
                  23,
                  3194,
                  4,
                  0,
                  AST$(
                    16,
                    3194,
                    4,
                    0,
                    0,
                    0,
                    0,
                    AST$(
                      23,
                      3194,
                      7,
                      0,
                      AST$(
                        7,
                        3194,
                        7,
                        0,
                        AST$(
                          3,
                          3194,
                          7,
                          0,
                          AST$(
                            17,
                            3194,
                            7,
                            0,
                            "func"
                          ),
                          ".",
                          AST$(
                            9,
                            3194,
                            7,
                            0,
                            "apply"
                          )
                        ),
                        0,
                        AST$(
                          17,
                          3194,
                          14,
                          0,
                          "parent"
                        ),
                        AST$(1, 3194, 25, 0)
                      )
                    )
                  )
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$["function"]),
            dependencies: ["__toArray", "__typeof"]
          },
          __defProp: {
            helper: AST$(
              7,
              3196,
              27,
              0,
              AST$(
                16,
                3196,
                27,
                0,
                0,
                0,
                [
                  "defineGetter",
                  "defineSetter",
                  "fallback",
                  "lookupGetter",
                  "lookupSetter",
                  "supportsAccessors"
                ],
                AST$(
                  4,
                  3197,
                  1,
                  0,
                  0,
                  AST$(
                    3,
                    3197,
                    1,
                    0,
                    AST$(
                      17,
                      3197,
                      6,
                      0,
                      "fallback"
                    ),
                    "=",
                    AST$(
                      3,
                      3197,
                      17,
                      0,
                      AST$(
                        17,
                        3197,
                        17,
                        0,
                        "Object"
                      ),
                      ".",
                      AST$(
                        9,
                        3197,
                        25,
                        0,
                        "defineProperty"
                      )
                    )
                  ),
                  AST$(
                    18,
                    3198,
                    1,
                    0,
                    AST$(
                      3,
                      3198,
                      5,
                      0,
                      AST$(
                        3,
                        3198,
                        5,
                        0,
                        AST$(
                          30,
                          3198,
                          5,
                          0,
                          "typeof",
                          AST$(
                            17,
                            3198,
                            18,
                            0,
                            "fallback"
                          )
                        ),
                        "===",
                        AST$(
                          9,
                          3198,
                          5,
                          0,
                          "function"
                        )
                      ),
                      "&&",
                      AST$(
                        7,
                        3198,
                        33,
                        0,
                        AST$(
                          16,
                          3198,
                          33,
                          0,
                          0,
                          0,
                          ["o"],
                          AST$(
                            28,
                            3199,
                            1,
                            0,
                            AST$(
                              4,
                              3200,
                              1,
                              0,
                              0,
                              AST$(
                                3,
                                3200,
                                1,
                                0,
                                AST$(
                                  17,
                                  3200,
                                  12,
                                  0,
                                  "o"
                                ),
                                "=",
                                AST$(21, 3200, 16, 0)
                              ),
                              AST$(
                                7,
                                3201,
                                1,
                                0,
                                AST$(
                                  17,
                                  3201,
                                  1,
                                  0,
                                  "fallback"
                                ),
                                0,
                                AST$(
                                  17,
                                  3201,
                                  18,
                                  0,
                                  "o"
                                ),
                                AST$(
                                  9,
                                  3201,
                                  22,
                                  0,
                                  "sentinel"
                                ),
                                AST$(21, 3201, 31, 0)
                              ),
                              AST$(
                                23,
                                3202,
                                1,
                                0,
                                AST$(
                                  3,
                                  3202,
                                  1,
                                  0,
                                  AST$(
                                    9,
                                    3202,
                                    19,
                                    0,
                                    "sentinel"
                                  ),
                                  "in",
                                  AST$(
                                    17,
                                    3202,
                                    1,
                                    0,
                                    "o"
                                  )
                                )
                              )
                            ),
                            AST$(
                              17,
                              3203,
                              12,
                              0,
                              "e"
                            ),
                            AST$(
                              23,
                              3204,
                              1,
                              0,
                              AST$(
                                9,
                                3204,
                                1,
                                0,
                                false
                              )
                            )
                          )
                        ),
                        0
                      )
                    ),
                    AST$(
                      23,
                      3205,
                      1,
                      0,
                      AST$(
                        17,
                        3205,
                        1,
                        0,
                        "fallback"
                      )
                    ),
                    AST$(
                      4,
                      3207,
                      1,
                      0,
                      0,
                      AST$(
                        3,
                        3207,
                        1,
                        0,
                        AST$(
                          17,
                          3207,
                          8,
                          0,
                          "supportsAccessors"
                        ),
                        "=",
                        AST$(
                          7,
                          3207,
                          29,
                          0,
                          AST$(
                            3,
                            3207,
                            29,
                            0,
                            AST$(
                              17,
                              3207,
                              29,
                              0,
                              "__owns"
                            ),
                            ".",
                            AST$(
                              9,
                              3207,
                              29,
                              0,
                              "call"
                            )
                          ),
                          0,
                          AST$(
                            3,
                            3207,
                            29,
                            0,
                            AST$(
                              17,
                              3207,
                              29,
                              0,
                              "Object"
                            ),
                            ".",
                            AST$(
                              9,
                              3207,
                              37,
                              0,
                              "prototype"
                            )
                          ),
                          AST$(
                            9,
                            3207,
                            56,
                            0,
                            "__defineGetter__"
                          )
                        )
                      ),
                      AST$(
                        3,
                        3208,
                        1,
                        0,
                        AST$(
                          17,
                          3208,
                          8,
                          0,
                          "lookupGetter"
                        ),
                        "=",
                        AST$(
                          3,
                          3208,
                          24,
                          0,
                          AST$(
                            17,
                            3208,
                            24,
                            0,
                            "supportsAccessors"
                          ),
                          "&&",
                          AST$(
                            3,
                            3208,
                            47,
                            0,
                            AST$(
                              3,
                              3208,
                              47,
                              0,
                              AST$(
                                17,
                                3208,
                                47,
                                0,
                                "Object"
                              ),
                              ".",
                              AST$(
                                9,
                                3208,
                                47,
                                0,
                                "prototype"
                              )
                            ),
                            ".",
                            AST$(
                              9,
                              3208,
                              56,
                              0,
                              "__lookupGetter__"
                            )
                          )
                        )
                      ),
                      AST$(
                        3,
                        3209,
                        1,
                        0,
                        AST$(
                          17,
                          3209,
                          8,
                          0,
                          "lookupSetter"
                        ),
                        "=",
                        AST$(
                          3,
                          3209,
                          24,
                          0,
                          AST$(
                            17,
                            3209,
                            24,
                            0,
                            "supportsAccessors"
                          ),
                          "&&",
                          AST$(
                            3,
                            3209,
                            47,
                            0,
                            AST$(
                              3,
                              3209,
                              47,
                              0,
                              AST$(
                                17,
                                3209,
                                47,
                                0,
                                "Object"
                              ),
                              ".",
                              AST$(
                                9,
                                3209,
                                47,
                                0,
                                "prototype"
                              )
                            ),
                            ".",
                            AST$(
                              9,
                              3209,
                              56,
                              0,
                              "__lookupSetter__"
                            )
                          )
                        )
                      ),
                      AST$(
                        3,
                        3210,
                        1,
                        0,
                        AST$(
                          17,
                          3210,
                          8,
                          0,
                          "defineGetter"
                        ),
                        "=",
                        AST$(
                          3,
                          3210,
                          24,
                          0,
                          AST$(
                            17,
                            3210,
                            24,
                            0,
                            "supportsAccessors"
                          ),
                          "&&",
                          AST$(
                            3,
                            3210,
                            47,
                            0,
                            AST$(
                              3,
                              3210,
                              47,
                              0,
                              AST$(
                                17,
                                3210,
                                47,
                                0,
                                "Object"
                              ),
                              ".",
                              AST$(
                                9,
                                3210,
                                47,
                                0,
                                "prototype"
                              )
                            ),
                            ".",
                            AST$(
                              9,
                              3210,
                              56,
                              0,
                              "__defineGetter__"
                            )
                          )
                        )
                      ),
                      AST$(
                        3,
                        3211,
                        1,
                        0,
                        AST$(
                          17,
                          3211,
                          8,
                          0,
                          "defineSetter"
                        ),
                        "=",
                        AST$(
                          3,
                          3211,
                          24,
                          0,
                          AST$(
                            17,
                            3211,
                            24,
                            0,
                            "supportsAccessors"
                          ),
                          "&&",
                          AST$(
                            3,
                            3211,
                            47,
                            0,
                            AST$(
                              3,
                              3211,
                              47,
                              0,
                              AST$(
                                17,
                                3211,
                                47,
                                0,
                                "Object"
                              ),
                              ".",
                              AST$(
                                9,
                                3211,
                                47,
                                0,
                                "prototype"
                              )
                            ),
                            ".",
                            AST$(
                              9,
                              3211,
                              56,
                              0,
                              "__defineSetter__"
                            )
                          )
                        )
                      ),
                      AST$(
                        23,
                        3212,
                        6,
                        0,
                        AST$(
                          16,
                          3212,
                          6,
                          0,
                          0,
                          [
                            AST$(
                              17,
                              3212,
                              7,
                              0,
                              "object"
                            ),
                            AST$(
                              17,
                              3212,
                              23,
                              0,
                              "property"
                            ),
                            AST$(
                              17,
                              3212,
                              43,
                              0,
                              "descriptor"
                            )
                          ],
                          ["proto"],
                          AST$(
                            4,
                            3212,
                            6,
                            0,
                            0,
                            AST$(
                              18,
                              3212,
                              6,
                              0,
                              AST$(
                                3,
                                3212,
                                6,
                                0,
                                AST$(
                                  3,
                                  3212,
                                  6,
                                  0,
                                  AST$(
                                    3,
                                    3212,
                                    6,
                                    0,
                                    AST$(
                                      30,
                                      3212,
                                      6,
                                      0,
                                      "typeof",
                                      AST$(
                                        17,
                                        3212,
                                        7,
                                        0,
                                        "object"
                                      )
                                    ),
                                    "!==",
                                    AST$(
                                      9,
                                      3212,
                                      6,
                                      0,
                                      "object"
                                    )
                                  ),
                                  "||",
                                  AST$(
                                    3,
                                    3212,
                                    6,
                                    0,
                                    AST$(
                                      17,
                                      3212,
                                      7,
                                      0,
                                      "object"
                                    ),
                                    "===",
                                    AST$(
                                      9,
                                      1,
                                      1,
                                      0,
                                      null
                                    )
                                  )
                                ),
                                "&&",
                                AST$(
                                  3,
                                  3212,
                                  6,
                                  0,
                                  AST$(
                                    30,
                                    3212,
                                    6,
                                    0,
                                    "typeof",
                                    AST$(
                                      17,
                                      3212,
                                      7,
                                      0,
                                      "object"
                                    )
                                  ),
                                  "!==",
                                  AST$(
                                    9,
                                    3212,
                                    6,
                                    0,
                                    "function"
                                  )
                                )
                              ),
                              AST$(
                                26,
                                3212,
                                6,
                                0,
                                AST$(
                                  7,
                                  3212,
                                  6,
                                  0,
                                  AST$(
                                    17,
                                    3212,
                                    6,
                                    0,
                                    "TypeError"
                                  ),
                                  0,
                                  AST$(
                                    3,
                                    3212,
                                    6,
                                    0,
                                    AST$(
                                      9,
                                      3212,
                                      6,
                                      0,
                                      "Expected object to be one of Object or Function, got "
                                    ),
                                    "+",
                                    AST$(
                                      7,
                                      3212,
                                      6,
                                      0,
                                      AST$(
                                        17,
                                        3212,
                                        6,
                                        0,
                                        "__typeof"
                                      ),
                                      0,
                                      AST$(
                                        17,
                                        3212,
                                        7,
                                        0,
                                        "object"
                                      )
                                    )
                                  )
                                )
                              )
                            ),
                            AST$(
                              18,
                              3212,
                              6,
                              0,
                              AST$(
                                3,
                                3212,
                                6,
                                0,
                                AST$(
                                  30,
                                  3212,
                                  6,
                                  0,
                                  "typeof",
                                  AST$(
                                    17,
                                    3212,
                                    23,
                                    0,
                                    "property"
                                  )
                                ),
                                "!==",
                                AST$(
                                  9,
                                  3212,
                                  6,
                                  0,
                                  "string"
                                )
                              ),
                              AST$(
                                26,
                                3212,
                                6,
                                0,
                                AST$(
                                  7,
                                  3212,
                                  6,
                                  0,
                                  AST$(
                                    17,
                                    3212,
                                    6,
                                    0,
                                    "TypeError"
                                  ),
                                  0,
                                  AST$(
                                    3,
                                    3212,
                                    6,
                                    0,
                                    AST$(
                                      9,
                                      3212,
                                      6,
                                      0,
                                      "Expected property to be a String, got "
                                    ),
                                    "+",
                                    AST$(
                                      7,
                                      3212,
                                      6,
                                      0,
                                      AST$(
                                        17,
                                        3212,
                                        6,
                                        0,
                                        "__typeof"
                                      ),
                                      0,
                                      AST$(
                                        17,
                                        3212,
                                        23,
                                        0,
                                        "property"
                                      )
                                    )
                                  )
                                )
                              )
                            ),
                            AST$(
                              18,
                              3212,
                              6,
                              0,
                              AST$(
                                3,
                                3212,
                                6,
                                0,
                                AST$(
                                  3,
                                  3212,
                                  6,
                                  0,
                                  AST$(
                                    30,
                                    3212,
                                    6,
                                    0,
                                    "typeof",
                                    AST$(
                                      17,
                                      3212,
                                      43,
                                      0,
                                      "descriptor"
                                    )
                                  ),
                                  "!==",
                                  AST$(
                                    9,
                                    3212,
                                    6,
                                    0,
                                    "object"
                                  )
                                ),
                                "||",
                                AST$(
                                  3,
                                  3212,
                                  6,
                                  0,
                                  AST$(
                                    17,
                                    3212,
                                    43,
                                    0,
                                    "descriptor"
                                  ),
                                  "===",
                                  AST$(
                                    9,
                                    1,
                                    1,
                                    0,
                                    null
                                  )
                                )
                              ),
                              AST$(
                                26,
                                3212,
                                6,
                                0,
                                AST$(
                                  7,
                                  3212,
                                  6,
                                  0,
                                  AST$(
                                    17,
                                    3212,
                                    6,
                                    0,
                                    "TypeError"
                                  ),
                                  0,
                                  AST$(
                                    3,
                                    3212,
                                    6,
                                    0,
                                    AST$(
                                      9,
                                      3212,
                                      6,
                                      0,
                                      "Expected descriptor to be an Object, got "
                                    ),
                                    "+",
                                    AST$(
                                      7,
                                      3212,
                                      6,
                                      0,
                                      AST$(
                                        17,
                                        3212,
                                        6,
                                        0,
                                        "__typeof"
                                      ),
                                      0,
                                      AST$(
                                        17,
                                        3212,
                                        43,
                                        0,
                                        "descriptor"
                                      )
                                    )
                                  )
                                )
                              )
                            ),
                            AST$(
                              18,
                              3213,
                              1,
                              0,
                              AST$(
                                3,
                                3213,
                                9,
                                0,
                                AST$(
                                  30,
                                  3213,
                                  9,
                                  0,
                                  "typeof",
                                  AST$(
                                    17,
                                    3213,
                                    22,
                                    0,
                                    "fallback"
                                  )
                                ),
                                "===",
                                AST$(
                                  9,
                                  3213,
                                  9,
                                  0,
                                  "function"
                                )
                              ),
                              AST$(
                                28,
                                3214,
                                1,
                                0,
                                AST$(
                                  23,
                                  3215,
                                  1,
                                  0,
                                  AST$(
                                    7,
                                    3215,
                                    17,
                                    0,
                                    AST$(
                                      17,
                                      3215,
                                      17,
                                      0,
                                      "fallback"
                                    ),
                                    0,
                                    AST$(
                                      17,
                                      3215,
                                      27,
                                      0,
                                      "object"
                                    ),
                                    AST$(
                                      17,
                                      3215,
                                      34,
                                      0,
                                      "property"
                                    ),
                                    AST$(
                                      17,
                                      3215,
                                      44,
                                      0,
                                      "descriptor"
                                    )
                                  )
                                ),
                                AST$(
                                  17,
                                  3216,
                                  14,
                                  0,
                                  "e"
                                ),
                                AST$(9, 3217, 1, 0)
                              )
                            ),
                            AST$(
                              18,
                              3219,
                              1,
                              0,
                              AST$(
                                7,
                                3219,
                                9,
                                0,
                                AST$(
                                  3,
                                  3219,
                                  9,
                                  0,
                                  AST$(
                                    17,
                                    3219,
                                    9,
                                    0,
                                    "__owns"
                                  ),
                                  ".",
                                  AST$(
                                    9,
                                    3219,
                                    9,
                                    0,
                                    "call"
                                  )
                                ),
                                0,
                                AST$(
                                  17,
                                  3219,
                                  9,
                                  0,
                                  "descriptor"
                                ),
                                AST$(
                                  9,
                                  3219,
                                  30,
                                  0,
                                  "value"
                                )
                              ),
                              AST$(
                                18,
                                3220,
                                1,
                                0,
                                AST$(
                                  3,
                                  3220,
                                  11,
                                  0,
                                  AST$(
                                    17,
                                    3220,
                                    11,
                                    0,
                                    "supportsAccessors"
                                  ),
                                  "&&",
                                  AST$(
                                    7,
                                    3220,
                                    36,
                                    0,
                                    AST$(
                                      3,
                                      3220,
                                      36,
                                      0,
                                      AST$(
                                        17,
                                        3220,
                                        36,
                                        0,
                                        "lookupGetter"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3220,
                                        36,
                                        0,
                                        "call"
                                      )
                                    ),
                                    0,
                                    AST$(
                                      17,
                                      3220,
                                      51,
                                      0,
                                      "object"
                                    ),
                                    AST$(
                                      3,
                                      3220,
                                      58,
                                      0,
                                      AST$(
                                        17,
                                        3220,
                                        58,
                                        0,
                                        "property"
                                      ),
                                      "||",
                                      AST$(
                                        7,
                                        3220,
                                        70,
                                        0,
                                        AST$(
                                          3,
                                          3220,
                                          70,
                                          0,
                                          AST$(
                                            17,
                                            3220,
                                            70,
                                            0,
                                            "lookupSetter"
                                          ),
                                          ".",
                                          AST$(
                                            9,
                                            3220,
                                            70,
                                            0,
                                            "call"
                                          )
                                        ),
                                        0,
                                        AST$(
                                          17,
                                          3220,
                                          86,
                                          0,
                                          "object"
                                        ),
                                        AST$(
                                          17,
                                          3220,
                                          93,
                                          0,
                                          "property"
                                        )
                                      )
                                    )
                                  )
                                ),
                                AST$(
                                  4,
                                  3221,
                                  1,
                                  0,
                                  0,
                                  AST$(
                                    3,
                                    3221,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      3221,
                                      14,
                                      0,
                                      "proto"
                                    ),
                                    "=",
                                    AST$(
                                      3,
                                      3221,
                                      22,
                                      0,
                                      AST$(
                                        17,
                                        3221,
                                        22,
                                        0,
                                        "object"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3221,
                                        30,
                                        0,
                                        "__proto__"
                                      )
                                    )
                                  ),
                                  AST$(
                                    3,
                                    3222,
                                    1,
                                    0,
                                    AST$(
                                      3,
                                      3222,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3222,
                                        1,
                                        0,
                                        "object"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3222,
                                        18,
                                        0,
                                        "__proto__"
                                      )
                                    ),
                                    "=",
                                    AST$(
                                      3,
                                      3222,
                                      30,
                                      0,
                                      AST$(
                                        17,
                                        3222,
                                        30,
                                        0,
                                        "Object"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3222,
                                        38,
                                        0,
                                        "prototype"
                                      )
                                    )
                                  ),
                                  AST$(
                                    30,
                                    3223,
                                    1,
                                    0,
                                    "delete",
                                    AST$(
                                      3,
                                      3223,
                                      17,
                                      0,
                                      AST$(
                                        17,
                                        3223,
                                        17,
                                        0,
                                        "object"
                                      ),
                                      ".",
                                      AST$(
                                        17,
                                        3223,
                                        25,
                                        0,
                                        "property"
                                      )
                                    )
                                  ),
                                  AST$(
                                    3,
                                    3224,
                                    1,
                                    0,
                                    AST$(
                                      3,
                                      3224,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3224,
                                        1,
                                        0,
                                        "object"
                                      ),
                                      ".",
                                      AST$(
                                        17,
                                        3224,
                                        18,
                                        0,
                                        "property"
                                      )
                                    ),
                                    "=",
                                    AST$(
                                      3,
                                      3224,
                                      30,
                                      0,
                                      AST$(
                                        17,
                                        3224,
                                        30,
                                        0,
                                        "descriptor"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3224,
                                        42,
                                        0,
                                        "value"
                                      )
                                    )
                                  ),
                                  AST$(
                                    3,
                                    3225,
                                    1,
                                    0,
                                    AST$(
                                      3,
                                      3225,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3225,
                                        1,
                                        0,
                                        "object"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3225,
                                        18,
                                        0,
                                        "__proto__"
                                      )
                                    ),
                                    "=",
                                    AST$(
                                      17,
                                      3225,
                                      30,
                                      0,
                                      "proto"
                                    )
                                  )
                                ),
                                AST$(
                                  3,
                                  3227,
                                  1,
                                  0,
                                  AST$(
                                    3,
                                    3227,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      3227,
                                      1,
                                      0,
                                      "object"
                                    ),
                                    ".",
                                    AST$(
                                      17,
                                      3227,
                                      18,
                                      0,
                                      "property"
                                    )
                                  ),
                                  "=",
                                  AST$(
                                    3,
                                    3227,
                                    30,
                                    0,
                                    AST$(
                                      17,
                                      3227,
                                      30,
                                      0,
                                      "descriptor"
                                    ),
                                    ".",
                                    AST$(
                                      9,
                                      3227,
                                      42,
                                      0,
                                      "value"
                                    )
                                  )
                                )
                              ),
                              AST$(
                                4,
                                3229,
                                1,
                                0,
                                0,
                                AST$(
                                  18,
                                  3229,
                                  1,
                                  0,
                                  AST$(
                                    30,
                                    3229,
                                    11,
                                    0,
                                    "!",
                                    AST$(
                                      17,
                                      3229,
                                      15,
                                      0,
                                      "supportsAccessors"
                                    )
                                  ),
                                  AST$(
                                    26,
                                    3230,
                                    1,
                                    0,
                                    AST$(
                                      7,
                                      3230,
                                      16,
                                      0,
                                      AST$(
                                        17,
                                        3230,
                                        16,
                                        0,
                                        "Error"
                                      ),
                                      0,
                                      AST$(
                                        9,
                                        3230,
                                        23,
                                        0,
                                        "Getters and setters cannot be defined on this Javascript engine"
                                      )
                                    )
                                  )
                                ),
                                AST$(
                                  18,
                                  3231,
                                  1,
                                  0,
                                  AST$(
                                    7,
                                    3231,
                                    11,
                                    0,
                                    AST$(
                                      3,
                                      3231,
                                      11,
                                      0,
                                      AST$(
                                        17,
                                        3231,
                                        11,
                                        0,
                                        "__owns"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3231,
                                        11,
                                        0,
                                        "call"
                                      )
                                    ),
                                    0,
                                    AST$(
                                      17,
                                      3231,
                                      11,
                                      0,
                                      "descriptor"
                                    ),
                                    AST$(
                                      9,
                                      3231,
                                      32,
                                      0,
                                      "get"
                                    )
                                  ),
                                  AST$(
                                    7,
                                    3232,
                                    1,
                                    0,
                                    AST$(
                                      3,
                                      3232,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3232,
                                        1,
                                        0,
                                        "defineGetter"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3232,
                                        1,
                                        0,
                                        "call"
                                      )
                                    ),
                                    0,
                                    AST$(
                                      17,
                                      3232,
                                      26,
                                      0,
                                      "object"
                                    ),
                                    AST$(
                                      17,
                                      3232,
                                      33,
                                      0,
                                      "property"
                                    ),
                                    AST$(
                                      3,
                                      3232,
                                      43,
                                      0,
                                      AST$(
                                        17,
                                        3232,
                                        43,
                                        0,
                                        "descriptor"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3232,
                                        55,
                                        0,
                                        "get"
                                      )
                                    )
                                  )
                                ),
                                AST$(
                                  18,
                                  3233,
                                  1,
                                  0,
                                  AST$(
                                    7,
                                    3233,
                                    11,
                                    0,
                                    AST$(
                                      3,
                                      3233,
                                      11,
                                      0,
                                      AST$(
                                        17,
                                        3233,
                                        11,
                                        0,
                                        "__owns"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3233,
                                        11,
                                        0,
                                        "call"
                                      )
                                    ),
                                    0,
                                    AST$(
                                      17,
                                      3233,
                                      11,
                                      0,
                                      "descriptor"
                                    ),
                                    AST$(
                                      9,
                                      3233,
                                      32,
                                      0,
                                      "set"
                                    )
                                  ),
                                  AST$(
                                    7,
                                    3234,
                                    1,
                                    0,
                                    AST$(
                                      3,
                                      3234,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3234,
                                        1,
                                        0,
                                        "defineSetter"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3234,
                                        1,
                                        0,
                                        "call"
                                      )
                                    ),
                                    0,
                                    AST$(
                                      17,
                                      3234,
                                      26,
                                      0,
                                      "object"
                                    ),
                                    AST$(
                                      17,
                                      3234,
                                      33,
                                      0,
                                      "property"
                                    ),
                                    AST$(
                                      3,
                                      3234,
                                      43,
                                      0,
                                      AST$(
                                        17,
                                        3234,
                                        43,
                                        0,
                                        "descriptor"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3234,
                                        55,
                                        0,
                                        "set"
                                      )
                                    )
                                  )
                                )
                              )
                            ),
                            AST$(
                              23,
                              3235,
                              1,
                              0,
                              AST$(
                                17,
                                3235,
                                1,
                                0,
                                "object"
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              ),
              0
            ),
            type: TYPE$.any,
            dependencies: ["__owns", "__typeof"]
          },
          __compose: {
            helper: AST$(
              16,
              3241,
              28,
              0,
              0,
              [
                AST$(
                  17,
                  3241,
                  29,
                  0,
                  "left"
                ),
                AST$(
                  17,
                  3241,
                  40,
                  0,
                  "right"
                )
              ],
              0,
              AST$(
                4,
                3241,
                28,
                0,
                0,
                AST$(
                  18,
                  3241,
                  28,
                  0,
                  AST$(
                    3,
                    3241,
                    28,
                    0,
                    AST$(
                      30,
                      3241,
                      28,
                      0,
                      "typeof",
                      AST$(
                        17,
                        3241,
                        29,
                        0,
                        "left"
                      )
                    ),
                    "!==",
                    AST$(
                      9,
                      3241,
                      28,
                      0,
                      "function"
                    )
                  ),
                  AST$(
                    26,
                    3241,
                    28,
                    0,
                    AST$(
                      7,
                      3241,
                      28,
                      0,
                      AST$(
                        17,
                        3241,
                        28,
                        0,
                        "TypeError"
                      ),
                      0,
                      AST$(
                        3,
                        3241,
                        28,
                        0,
                        AST$(
                          9,
                          3241,
                          28,
                          0,
                          "Expected left to be a Function, got "
                        ),
                        "+",
                        AST$(
                          7,
                          3241,
                          28,
                          0,
                          AST$(
                            17,
                            3241,
                            28,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            3241,
                            29,
                            0,
                            "left"
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  3241,
                  28,
                  0,
                  AST$(
                    3,
                    3241,
                    28,
                    0,
                    AST$(
                      30,
                      3241,
                      28,
                      0,
                      "typeof",
                      AST$(
                        17,
                        3241,
                        40,
                        0,
                        "right"
                      )
                    ),
                    "!==",
                    AST$(
                      9,
                      3241,
                      28,
                      0,
                      "function"
                    )
                  ),
                  AST$(
                    26,
                    3241,
                    28,
                    0,
                    AST$(
                      7,
                      3241,
                      28,
                      0,
                      AST$(
                        17,
                        3241,
                        28,
                        0,
                        "TypeError"
                      ),
                      0,
                      AST$(
                        3,
                        3241,
                        28,
                        0,
                        AST$(
                          9,
                          3241,
                          28,
                          0,
                          "Expected right to be a Function, got "
                        ),
                        "+",
                        AST$(
                          7,
                          3241,
                          28,
                          0,
                          AST$(
                            17,
                            3241,
                            28,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            3241,
                            40,
                            0,
                            "right"
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  23,
                  3242,
                  4,
                  0,
                  AST$(
                    16,
                    3242,
                    4,
                    0,
                    0,
                    0,
                    0,
                    AST$(
                      23,
                      3242,
                      6,
                      0,
                      AST$(
                        7,
                        3242,
                        6,
                        0,
                        AST$(
                          3,
                          3242,
                          6,
                          0,
                          AST$(
                            17,
                            3242,
                            6,
                            0,
                            "left"
                          ),
                          ".",
                          AST$(
                            9,
                            3242,
                            6,
                            0,
                            "call"
                          )
                        ),
                        0,
                        AST$(25, 3242, 13, 0),
                        AST$(
                          7,
                          3242,
                          18,
                          0,
                          AST$(
                            3,
                            3242,
                            18,
                            0,
                            AST$(
                              17,
                              3242,
                              18,
                              0,
                              "right"
                            ),
                            ".",
                            AST$(
                              9,
                              3242,
                              18,
                              0,
                              "apply"
                            )
                          ),
                          0,
                          AST$(25, 3242, 26, 0),
                          AST$(1, 3242, 35, 0)
                        )
                      )
                    )
                  )
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$["function"]),
            dependencies: ["__toArray", "__typeof"]
          },
          __curry: {
            helper: AST$(
              16,
              3256,
              26,
              0,
              0,
              [
                AST$(
                  17,
                  3256,
                  27,
                  0,
                  "numArgs"
                ),
                AST$(
                  17,
                  3256,
                  46,
                  0,
                  "f"
                )
              ],
              ["currier"],
              AST$(
                4,
                3256,
                26,
                0,
                0,
                AST$(
                  18,
                  3256,
                  26,
                  0,
                  AST$(
                    3,
                    3256,
                    26,
                    0,
                    AST$(
                      30,
                      3256,
                      26,
                      0,
                      "typeof",
                      AST$(
                        17,
                        3256,
                        27,
                        0,
                        "numArgs"
                      )
                    ),
                    "!==",
                    AST$(
                      9,
                      3256,
                      26,
                      0,
                      "number"
                    )
                  ),
                  AST$(
                    26,
                    3256,
                    26,
                    0,
                    AST$(
                      7,
                      3256,
                      26,
                      0,
                      AST$(
                        17,
                        3256,
                        26,
                        0,
                        "TypeError"
                      ),
                      0,
                      AST$(
                        3,
                        3256,
                        26,
                        0,
                        AST$(
                          9,
                          3256,
                          26,
                          0,
                          "Expected numArgs to be a Number, got "
                        ),
                        "+",
                        AST$(
                          7,
                          3256,
                          26,
                          0,
                          AST$(
                            17,
                            3256,
                            26,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            3256,
                            27,
                            0,
                            "numArgs"
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  3256,
                  26,
                  0,
                  AST$(
                    3,
                    3256,
                    26,
                    0,
                    AST$(
                      30,
                      3256,
                      26,
                      0,
                      "typeof",
                      AST$(
                        17,
                        3256,
                        46,
                        0,
                        "f"
                      )
                    ),
                    "!==",
                    AST$(
                      9,
                      3256,
                      26,
                      0,
                      "function"
                    )
                  ),
                  AST$(
                    26,
                    3256,
                    26,
                    0,
                    AST$(
                      7,
                      3256,
                      26,
                      0,
                      AST$(
                        17,
                        3256,
                        26,
                        0,
                        "TypeError"
                      ),
                      0,
                      AST$(
                        3,
                        3256,
                        26,
                        0,
                        AST$(
                          9,
                          3256,
                          26,
                          0,
                          "Expected f to be a Function, got "
                        ),
                        "+",
                        AST$(
                          7,
                          3256,
                          26,
                          0,
                          AST$(
                            17,
                            3256,
                            26,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            3256,
                            46,
                            0,
                            "f"
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  3257,
                  1,
                  0,
                  AST$(
                    3,
                    3257,
                    5,
                    0,
                    AST$(
                      17,
                      3257,
                      5,
                      0,
                      "numArgs"
                    ),
                    ">",
                    AST$(
                      9,
                      3257,
                      17,
                      0,
                      1
                    )
                  ),
                  AST$(
                    4,
                    3258,
                    1,
                    0,
                    0,
                    AST$(
                      3,
                      3258,
                      1,
                      0,
                      AST$(
                        17,
                        3258,
                        8,
                        0,
                        "currier"
                      ),
                      "=",
                      AST$(
                        16,
                        3258,
                        16,
                        0,
                        0,
                        [
                          AST$(
                            17,
                            3258,
                            17,
                            0,
                            "args"
                          )
                        ],
                        ["ret"],
                        AST$(
                          18,
                          3259,
                          1,
                          0,
                          AST$(
                            3,
                            3259,
                            9,
                            0,
                            AST$(
                              3,
                              3259,
                              9,
                              0,
                              AST$(
                                17,
                                3259,
                                9,
                                0,
                                "args"
                              ),
                              ".",
                              AST$(
                                9,
                                3259,
                                15,
                                0,
                                "length"
                              )
                            ),
                            ">=",
                            AST$(
                              17,
                              3259,
                              25,
                              0,
                              "numArgs"
                            )
                          ),
                          AST$(
                            23,
                            3260,
                            1,
                            0,
                            AST$(
                              7,
                              3260,
                              1,
                              0,
                              AST$(
                                3,
                                3260,
                                1,
                                0,
                                AST$(
                                  17,
                                  3260,
                                  1,
                                  0,
                                  "f"
                                ),
                                ".",
                                AST$(
                                  9,
                                  3260,
                                  11,
                                  0,
                                  "apply"
                                )
                              ),
                              0,
                              AST$(25, 3260, 17, 0),
                              AST$(
                                17,
                                3260,
                                22,
                                0,
                                "args"
                              )
                            )
                          ),
                          AST$(
                            4,
                            3262,
                            1,
                            0,
                            0,
                            AST$(
                              3,
                              3262,
                              1,
                              0,
                              AST$(
                                17,
                                3262,
                                12,
                                0,
                                "ret"
                              ),
                              "=",
                              AST$(
                                16,
                                3262,
                                16,
                                0,
                                0,
                                0,
                                0,
                                AST$(
                                  18,
                                  3263,
                                  1,
                                  0,
                                  AST$(
                                    3,
                                    3263,
                                    13,
                                    0,
                                    AST$(
                                      3,
                                      3263,
                                      13,
                                      0,
                                      AST$(1, 3263, 13, 0),
                                      ".",
                                      AST$(
                                        9,
                                        3263,
                                        24,
                                        0,
                                        "length"
                                      )
                                    ),
                                    "===",
                                    AST$(
                                      9,
                                      3263,
                                      34,
                                      0,
                                      0
                                    )
                                  ),
                                  AST$(
                                    23,
                                    3264,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      3264,
                                      1,
                                      0,
                                      "ret"
                                    )
                                  ),
                                  AST$(
                                    23,
                                    3266,
                                    1,
                                    0,
                                    AST$(
                                      7,
                                      3266,
                                      1,
                                      0,
                                      AST$(
                                        3,
                                        3266,
                                        1,
                                        0,
                                        AST$(
                                          17,
                                          3266,
                                          1,
                                          0,
                                          "currier"
                                        ),
                                        ".",
                                        AST$(
                                          9,
                                          3266,
                                          1,
                                          0,
                                          "call"
                                        )
                                      ),
                                      0,
                                      AST$(25, 3266, 22, 0),
                                      AST$(
                                        7,
                                        3266,
                                        27,
                                        0,
                                        AST$(
                                          3,
                                          3266,
                                          27,
                                          0,
                                          AST$(
                                            17,
                                            3266,
                                            27,
                                            0,
                                            "args"
                                          ),
                                          ".",
                                          AST$(
                                            9,
                                            3266,
                                            33,
                                            0,
                                            "concat"
                                          )
                                        ),
                                        0,
                                        AST$(
                                          7,
                                          3266,
                                          40,
                                          0,
                                          AST$(
                                            3,
                                            3266,
                                            40,
                                            0,
                                            AST$(
                                              17,
                                              3266,
                                              40,
                                              0,
                                              "__slice"
                                            ),
                                            ".",
                                            AST$(
                                              9,
                                              3266,
                                              40,
                                              0,
                                              "call"
                                            )
                                          ),
                                          0,
                                          AST$(1, 3266, 49, 0)
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            ),
                            AST$(
                              23,
                              3267,
                              1,
                              0,
                              AST$(
                                17,
                                3267,
                                1,
                                0,
                                "ret"
                              )
                            )
                          )
                        )
                      )
                    ),
                    AST$(
                      23,
                      3268,
                      1,
                      0,
                      AST$(
                        7,
                        3268,
                        1,
                        0,
                        AST$(
                          17,
                          3268,
                          1,
                          0,
                          "currier"
                        ),
                        0,
                        AST$(2, 3268, 13, 0)
                      )
                    )
                  ),
                  AST$(
                    23,
                    3270,
                    1,
                    0,
                    AST$(
                      17,
                      3270,
                      1,
                      0,
                      "f"
                    )
                  )
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$["function"]),
            dependencies: ["__slice", "__typeof"]
          },
          __import: {
            helper: AST$(
              16,
              3284,
              27,
              0,
              0,
              [
                AST$(
                  17,
                  3284,
                  28,
                  0,
                  "dest"
                ),
                AST$(
                  17,
                  3284,
                  33,
                  0,
                  "source"
                )
              ],
              ["k"],
              AST$(
                4,
                3285,
                1,
                0,
                0,
                AST$(
                  15,
                  3285,
                  1,
                  0,
                  AST$(
                    17,
                    3285,
                    6,
                    0,
                    "k"
                  ),
                  AST$(
                    17,
                    3285,
                    11,
                    0,
                    "source"
                  ),
                  AST$(
                    18,
                    3285,
                    1,
                    0,
                    AST$(
                      7,
                      3285,
                      1,
                      0,
                      AST$(
                        3,
                        3285,
                        1,
                        0,
                        AST$(
                          17,
                          3285,
                          1,
                          0,
                          "__owns"
                        ),
                        ".",
                        AST$(
                          9,
                          3285,
                          1,
                          0,
                          "call"
                        )
                      ),
                      0,
                      AST$(
                        17,
                        3285,
                        11,
                        0,
                        "source"
                      ),
                      AST$(
                        17,
                        3285,
                        6,
                        0,
                        "k"
                      )
                    ),
                    AST$(
                      3,
                      3286,
                      1,
                      0,
                      AST$(
                        3,
                        3286,
                        1,
                        0,
                        AST$(
                          17,
                          3286,
                          1,
                          0,
                          "dest"
                        ),
                        ".",
                        AST$(
                          17,
                          3286,
                          10,
                          0,
                          "k"
                        )
                      ),
                      "=",
                      AST$(
                        3,
                        3286,
                        15,
                        0,
                        AST$(
                          17,
                          3286,
                          15,
                          0,
                          "source"
                        ),
                        ".",
                        AST$(
                          17,
                          3286,
                          23,
                          0,
                          "k"
                        )
                      )
                    )
                  )
                ),
                AST$(
                  23,
                  3287,
                  1,
                  0,
                  AST$(
                    17,
                    3287,
                    1,
                    0,
                    "dest"
                  )
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.object),
            dependencies: ["__owns"]
          },
          WeakMap: {
            helper: AST$(
              19,
              3336,
              24,
              0,
              AST$(
                3,
                3336,
                27,
                0,
                AST$(
                  30,
                  3336,
                  27,
                  0,
                  "typeof",
                  AST$(
                    3,
                    3336,
                    40,
                    0,
                    AST$(
                      17,
                      3336,
                      40,
                      0,
                      "GLOBAL"
                    ),
                    ".",
                    AST$(
                      9,
                      3336,
                      48,
                      0,
                      "WeakMap"
                    )
                  )
                ),
                "===",
                AST$(
                  9,
                  3336,
                  27,
                  0,
                  "function"
                )
              ),
              AST$(
                3,
                3336,
                60,
                0,
                AST$(
                  17,
                  3336,
                  60,
                  0,
                  "GLOBAL"
                ),
                ".",
                AST$(
                  9,
                  3336,
                  68,
                  0,
                  "WeakMap"
                )
              ),
              AST$(
                3,
                3336,
                80,
                0,
                AST$(
                  17,
                  3336,
                  86,
                  0,
                  "WeakMap"
                ),
                "=",
                AST$(
                  7,
                  3336,
                  80,
                  0,
                  AST$(
                    16,
                    3336,
                    80,
                    0,
                    0,
                    0,
                    ["_WeakMap_prototype", "defProp", "isExtensible"],
                    AST$(
                      4,
                      3336,
                      80,
                      0,
                      0,
                      AST$(
                        16,
                        3336,
                        80,
                        0,
                        AST$(
                          17,
                          3336,
                          86,
                          0,
                          "WeakMap"
                        ),
                        0,
                        ["_this"],
                        AST$(
                          4,
                          3344,
                          1,
                          0,
                          0,
                          AST$(
                            3,
                            3344,
                            1,
                            0,
                            AST$(
                              17,
                              3344,
                              1,
                              0,
                              "_this"
                            ),
                            "=",
                            AST$(
                              19,
                              3336,
                              80,
                              0,
                              AST$(
                                3,
                                3336,
                                80,
                                0,
                                AST$(
                                  13,
                                  3336,
                                  80,
                                  0,
                                  AST$(
                                    9,
                                    3336,
                                    80,
                                    0,
                                    "this"
                                  )
                                ),
                                "instanceof",
                                AST$(
                                  17,
                                  3336,
                                  86,
                                  0,
                                  "WeakMap"
                                )
                              ),
                              AST$(
                                13,
                                3336,
                                80,
                                0,
                                AST$(
                                  9,
                                  3336,
                                  80,
                                  0,
                                  "this"
                                )
                              ),
                              AST$(
                                7,
                                3336,
                                80,
                                0,
                                AST$(
                                  17,
                                  3336,
                                  80,
                                  0,
                                  "__create"
                                ),
                                0,
                                AST$(
                                  17,
                                  3336,
                                  80,
                                  0,
                                  "_WeakMap_prototype"
                                )
                              )
                            )
                          ),
                          AST$(
                            3,
                            3344,
                            1,
                            0,
                            AST$(
                              3,
                              3344,
                              1,
                              0,
                              AST$(
                                17,
                                3344,
                                1,
                                0,
                                "_this"
                              ),
                              ".",
                              AST$(
                                9,
                                3344,
                                6,
                                0,
                                "_keys"
                              )
                            ),
                            "=",
                            AST$(2, 3344, 14, 0)
                          ),
                          AST$(
                            3,
                            3345,
                            1,
                            0,
                            AST$(
                              3,
                              3345,
                              1,
                              0,
                              AST$(
                                17,
                                3345,
                                1,
                                0,
                                "_this"
                              ),
                              ".",
                              AST$(
                                9,
                                3345,
                                6,
                                0,
                                "_values"
                              )
                            ),
                            "=",
                            AST$(2, 3345, 16, 0)
                          ),
                          AST$(
                            3,
                            3347,
                            1,
                            0,
                            AST$(
                              3,
                              3347,
                              1,
                              0,
                              AST$(
                                17,
                                3347,
                                1,
                                0,
                                "_this"
                              ),
                              ".",
                              AST$(
                                9,
                                3347,
                                6,
                                0,
                                "_chilly"
                              )
                            ),
                            "=",
                            AST$(2, 3347, 16, 0)
                          ),
                          AST$(
                            3,
                            3348,
                            1,
                            0,
                            AST$(
                              3,
                              3348,
                              1,
                              0,
                              AST$(
                                17,
                                3348,
                                1,
                                0,
                                "_this"
                              ),
                              ".",
                              AST$(
                                9,
                                3348,
                                6,
                                0,
                                "_uid"
                              )
                            ),
                            "=",
                            AST$(
                              7,
                              3348,
                              13,
                              0,
                              AST$(
                                17,
                                3348,
                                13,
                                0,
                                "createUid"
                              ),
                              0
                            )
                          ),
                          AST$(
                            23,
                            3344,
                            1,
                            0,
                            AST$(
                              17,
                              3344,
                              1,
                              0,
                              "_this"
                            )
                          )
                        )
                      ),
                      AST$(
                        3,
                        3336,
                        80,
                        0,
                        AST$(
                          17,
                          3336,
                          80,
                          0,
                          "_WeakMap_prototype"
                        ),
                        "=",
                        AST$(
                          3,
                          3336,
                          80,
                          0,
                          AST$(
                            17,
                            3336,
                            86,
                            0,
                            "WeakMap"
                          ),
                          ".",
                          AST$(
                            9,
                            3336,
                            80,
                            0,
                            "prototype"
                          )
                        )
                      ),
                      AST$(
                        3,
                        3336,
                        80,
                        0,
                        AST$(
                          3,
                          3336,
                          80,
                          0,
                          AST$(
                            17,
                            3336,
                            86,
                            0,
                            "WeakMap"
                          ),
                          ".",
                          AST$(
                            9,
                            3336,
                            80,
                            0,
                            "displayName"
                          )
                        ),
                        "=",
                        AST$(
                          9,
                          3336,
                          80,
                          0,
                          "WeakMap"
                        )
                      ),
                      AST$(
                        16,
                        3337,
                        1,
                        0,
                        AST$(
                          17,
                          3337,
                          6,
                          0,
                          "uidRand"
                        ),
                        0,
                        0,
                        AST$(
                          23,
                          3338,
                          1,
                          0,
                          AST$(
                            7,
                            3338,
                            1,
                            0,
                            AST$(
                              3,
                              3338,
                              1,
                              0,
                              AST$(
                                7,
                                3338,
                                1,
                                0,
                                AST$(
                                  3,
                                  3338,
                                  1,
                                  0,
                                  AST$(
                                    7,
                                    3338,
                                    1,
                                    0,
                                    AST$(
                                      3,
                                      3338,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3338,
                                        1,
                                        0,
                                        "Math"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3338,
                                        10,
                                        0,
                                        "random"
                                      )
                                    ),
                                    0
                                  ),
                                  ".",
                                  AST$(
                                    9,
                                    3338,
                                    19,
                                    0,
                                    "toString"
                                  )
                                ),
                                0,
                                AST$(
                                  9,
                                  3338,
                                  29,
                                  0,
                                  36
                                )
                              ),
                              ".",
                              AST$(
                                9,
                                3338,
                                33,
                                0,
                                "slice"
                              )
                            ),
                            0,
                            AST$(
                              9,
                              3338,
                              39,
                              0,
                              2
                            )
                          )
                        )
                      ),
                      AST$(
                        16,
                        3339,
                        1,
                        0,
                        AST$(
                          17,
                          3339,
                          6,
                          0,
                          "createUid"
                        ),
                        0,
                        0,
                        AST$(
                          23,
                          3340,
                          5,
                          0,
                          AST$(
                            3,
                            3340,
                            5,
                            0,
                            AST$(
                              3,
                              3340,
                              5,
                              0,
                              AST$(
                                3,
                                3340,
                                5,
                                0,
                                AST$(
                                  3,
                                  3340,
                                  5,
                                  0,
                                  AST$(
                                    3,
                                    3340,
                                    5,
                                    0,
                                    AST$(
                                      3,
                                      3340,
                                      5,
                                      0,
                                      AST$(
                                        7,
                                        3340,
                                        5,
                                        0,
                                        AST$(
                                          17,
                                          3340,
                                          5,
                                          0,
                                          "__strnum"
                                        ),
                                        0,
                                        AST$(
                                          7,
                                          3340,
                                          8,
                                          0,
                                          AST$(
                                            17,
                                            3340,
                                            8,
                                            0,
                                            "uidRand"
                                          ),
                                          0
                                        )
                                      ),
                                      "+",
                                      AST$(
                                        9,
                                        3340,
                                        5,
                                        0,
                                        "-"
                                      )
                                    ),
                                    "+",
                                    AST$(
                                      7,
                                      3340,
                                      5,
                                      0,
                                      AST$(
                                        17,
                                        3340,
                                        5,
                                        0,
                                        "__strnum"
                                      ),
                                      0,
                                      AST$(
                                        7,
                                        3340,
                                        22,
                                        0,
                                        AST$(
                                          3,
                                          3340,
                                          22,
                                          0,
                                          AST$(
                                            7,
                                            3340,
                                            22,
                                            0,
                                            AST$(
                                              17,
                                              3340,
                                              25,
                                              0,
                                              "Date"
                                            ),
                                            1
                                          ),
                                          ".",
                                          AST$(
                                            9,
                                            3340,
                                            33,
                                            0,
                                            "getTime"
                                          )
                                        ),
                                        0
                                      )
                                    )
                                  ),
                                  "+",
                                  AST$(
                                    9,
                                    3340,
                                    5,
                                    0,
                                    "-"
                                  )
                                ),
                                "+",
                                AST$(
                                  7,
                                  3340,
                                  5,
                                  0,
                                  AST$(
                                    17,
                                    3340,
                                    5,
                                    0,
                                    "__strnum"
                                  ),
                                  0,
                                  AST$(
                                    7,
                                    3340,
                                    47,
                                    0,
                                    AST$(
                                      17,
                                      3340,
                                      47,
                                      0,
                                      "uidRand"
                                    ),
                                    0
                                  )
                                )
                              ),
                              "+",
                              AST$(
                                9,
                                3340,
                                5,
                                0,
                                "-"
                              )
                            ),
                            "+",
                            AST$(
                              7,
                              3340,
                              5,
                              0,
                              AST$(
                                17,
                                3340,
                                5,
                                0,
                                "__strnum"
                              ),
                              0,
                              AST$(
                                7,
                                3340,
                                61,
                                0,
                                AST$(
                                  17,
                                  3340,
                                  61,
                                  0,
                                  "uidRand"
                                ),
                                0
                              )
                            )
                          )
                        )
                      ),
                      AST$(
                        3,
                        3341,
                        1,
                        0,
                        AST$(
                          17,
                          3341,
                          6,
                          0,
                          "isExtensible"
                        ),
                        "=",
                        AST$(
                          3,
                          3341,
                          22,
                          0,
                          AST$(
                            3,
                            3341,
                            22,
                            0,
                            AST$(
                              17,
                              3341,
                              22,
                              0,
                              "Object"
                            ),
                            ".",
                            AST$(
                              9,
                              3341,
                              30,
                              0,
                              "isExtensible"
                            )
                          ),
                          "||",
                          AST$(
                            16,
                            3341,
                            48,
                            0,
                            0,
                            0,
                            0,
                            AST$(
                              23,
                              3341,
                              50,
                              0,
                              AST$(
                                9,
                                3341,
                                50,
                                0,
                                true
                              )
                            )
                          )
                        )
                      ),
                      AST$(
                        16,
                        3350,
                        1,
                        0,
                        AST$(
                          17,
                          3350,
                          6,
                          0,
                          "check"
                        ),
                        [
                          AST$(
                            17,
                            3350,
                            13,
                            0,
                            "key"
                          )
                        ],
                        ["chilly", "uid"],
                        AST$(
                          5,
                          3351,
                          1,
                          0,
                          AST$(
                            3,
                            3351,
                            1,
                            0,
                            AST$(
                              17,
                              3351,
                              8,
                              0,
                              "uid"
                            ),
                            "=",
                            AST$(
                              3,
                              3351,
                              14,
                              0,
                              AST$(25, 3351, 14, 0),
                              ".",
                              AST$(
                                9,
                                3351,
                                16,
                                0,
                                "_uid"
                              )
                            )
                          ),
                          AST$(
                            19,
                            3352,
                            1,
                            0,
                            AST$(
                              7,
                              3352,
                              7,
                              0,
                              AST$(
                                3,
                                3352,
                                7,
                                0,
                                AST$(
                                  17,
                                  3352,
                                  7,
                                  0,
                                  "__owns"
                                ),
                                ".",
                                AST$(
                                  9,
                                  3352,
                                  7,
                                  0,
                                  "call"
                                )
                              ),
                              0,
                              AST$(
                                17,
                                3352,
                                7,
                                0,
                                "key"
                              ),
                              AST$(
                                17,
                                3352,
                                19,
                                0,
                                "uid"
                              )
                            ),
                            AST$(
                              5,
                              3353,
                              1,
                              0,
                              AST$(
                                3,
                                3353,
                                1,
                                0,
                                AST$(
                                  17,
                                  3353,
                                  10,
                                  0,
                                  "chilly"
                                ),
                                "=",
                                AST$(
                                  3,
                                  3353,
                                  19,
                                  0,
                                  AST$(25, 3353, 19, 0),
                                  ".",
                                  AST$(
                                    9,
                                    3353,
                                    21,
                                    0,
                                    "_chilly"
                                  )
                                )
                              ),
                              AST$(
                                19,
                                3354,
                                1,
                                0,
                                AST$(
                                  3,
                                  3354,
                                  9,
                                  0,
                                  AST$(
                                    7,
                                    3354,
                                    9,
                                    0,
                                    AST$(
                                      3,
                                      3354,
                                      9,
                                      0,
                                      AST$(
                                        17,
                                        3354,
                                        9,
                                        0,
                                        "chilly"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3354,
                                        17,
                                        0,
                                        "indexOf"
                                      )
                                    ),
                                    0,
                                    AST$(
                                      17,
                                      3354,
                                      26,
                                      0,
                                      "key"
                                    )
                                  ),
                                  "===",
                                  AST$(
                                    9,
                                    3354,
                                    33,
                                    0,
                                    -1
                                  )
                                ),
                                AST$(
                                  5,
                                  3355,
                                  1,
                                  0,
                                  AST$(
                                    7,
                                    3355,
                                    1,
                                    0,
                                    AST$(
                                      3,
                                      3355,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3355,
                                        1,
                                        0,
                                        "chilly"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3355,
                                        16,
                                        0,
                                        "push"
                                      )
                                    ),
                                    0,
                                    AST$(
                                      17,
                                      3355,
                                      21,
                                      0,
                                      "key"
                                    )
                                  ),
                                  AST$(
                                    7,
                                    3356,
                                    1,
                                    0,
                                    AST$(
                                      3,
                                      3356,
                                      1,
                                      0,
                                      AST$(
                                        3,
                                        3356,
                                        1,
                                        0,
                                        AST$(25, 3356, 1, 0),
                                        ".",
                                        AST$(
                                          9,
                                          3356,
                                          10,
                                          0,
                                          "_keys"
                                        )
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3356,
                                        16,
                                        0,
                                        "push"
                                      )
                                    ),
                                    0,
                                    AST$(
                                      17,
                                      3356,
                                      21,
                                      0,
                                      "key"
                                    )
                                  ),
                                  AST$(
                                    7,
                                    3357,
                                    1,
                                    0,
                                    AST$(
                                      3,
                                      3357,
                                      1,
                                      0,
                                      AST$(
                                        3,
                                        3357,
                                        1,
                                        0,
                                        AST$(25, 3357, 1, 0),
                                        ".",
                                        AST$(
                                          9,
                                          3357,
                                          10,
                                          0,
                                          "_values"
                                        )
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3357,
                                        18,
                                        0,
                                        "push"
                                      )
                                    ),
                                    0,
                                    AST$(
                                      3,
                                      3357,
                                      23,
                                      0,
                                      AST$(
                                        17,
                                        3357,
                                        23,
                                        0,
                                        "key"
                                      ),
                                      ".",
                                      AST$(
                                        17,
                                        3357,
                                        27,
                                        0,
                                        "uid"
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      ),
                      AST$(
                        3,
                        3336,
                        80,
                        0,
                        AST$(
                          3,
                          3336,
                          80,
                          0,
                          AST$(
                            17,
                            3336,
                            80,
                            0,
                            "_WeakMap_prototype"
                          ),
                          ".",
                          AST$(
                            9,
                            3359,
                            6,
                            0,
                            "get"
                          )
                        ),
                        "=",
                        AST$(
                          16,
                          3359,
                          10,
                          0,
                          0,
                          [
                            AST$(
                              17,
                              3359,
                              11,
                              0,
                              "key"
                            )
                          ],
                          ["_ref", "index"],
                          AST$(
                            4,
                            3360,
                            1,
                            0,
                            0,
                            AST$(
                              18,
                              3360,
                              1,
                              0,
                              AST$(
                                3,
                                3360,
                                7,
                                0,
                                AST$(
                                  7,
                                  3360,
                                  7,
                                  0,
                                  AST$(
                                    17,
                                    3360,
                                    7,
                                    0,
                                    "Object"
                                  ),
                                  0,
                                  AST$(
                                    17,
                                    3360,
                                    15,
                                    0,
                                    "key"
                                  )
                                ),
                                "!==",
                                AST$(
                                  17,
                                  3360,
                                  22,
                                  0,
                                  "key"
                                )
                              ),
                              AST$(
                                26,
                                3361,
                                1,
                                0,
                                AST$(
                                  7,
                                  3361,
                                  12,
                                  0,
                                  AST$(
                                    17,
                                    3361,
                                    12,
                                    0,
                                    "TypeError"
                                  ),
                                  0,
                                  AST$(
                                    9,
                                    3361,
                                    23,
                                    0,
                                    "Invalid value used as weak map key"
                                  )
                                )
                              )
                            ),
                            AST$(
                              18,
                              3363,
                              1,
                              0,
                              AST$(
                                7,
                                3363,
                                7,
                                0,
                                AST$(
                                  17,
                                  3363,
                                  7,
                                  0,
                                  "isExtensible"
                                ),
                                0,
                                AST$(
                                  17,
                                  3363,
                                  22,
                                  0,
                                  "key"
                                )
                              ),
                              AST$(
                                18,
                                3364,
                                1,
                                0,
                                AST$(
                                  7,
                                  3364,
                                  1,
                                  0,
                                  AST$(
                                    3,
                                    3364,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      3364,
                                      1,
                                      0,
                                      "__owns"
                                    ),
                                    ".",
                                    AST$(
                                      9,
                                      3364,
                                      1,
                                      0,
                                      "call"
                                    )
                                  ),
                                  0,
                                  AST$(
                                    17,
                                    3364,
                                    1,
                                    0,
                                    "key"
                                  ),
                                  AST$(
                                    3,
                                    3364,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      3364,
                                      1,
                                      0,
                                      "_ref"
                                    ),
                                    "=",
                                    AST$(
                                      3,
                                      3364,
                                      12,
                                      0,
                                      AST$(25, 3364, 12, 0),
                                      ".",
                                      AST$(
                                        9,
                                        3364,
                                        13,
                                        0,
                                        "_uid"
                                      )
                                    )
                                  )
                                ),
                                AST$(
                                  23,
                                  3364,
                                  1,
                                  0,
                                  AST$(
                                    3,
                                    3364,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      3364,
                                      1,
                                      0,
                                      "key"
                                    ),
                                    ".",
                                    AST$(
                                      17,
                                      3364,
                                      1,
                                      0,
                                      "_ref"
                                    )
                                  )
                                )
                              ),
                              AST$(
                                4,
                                3366,
                                1,
                                0,
                                0,
                                AST$(
                                  7,
                                  3366,
                                  1,
                                  0,
                                  AST$(
                                    3,
                                    3366,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      3366,
                                      1,
                                      0,
                                      "check"
                                    ),
                                    ".",
                                    AST$(
                                      9,
                                      3366,
                                      1,
                                      0,
                                      "call"
                                    )
                                  ),
                                  0,
                                  AST$(25, 3366, 14, 0),
                                  AST$(
                                    17,
                                    3366,
                                    19,
                                    0,
                                    "key"
                                  )
                                ),
                                AST$(
                                  3,
                                  3367,
                                  1,
                                  0,
                                  AST$(
                                    17,
                                    3367,
                                    10,
                                    0,
                                    "index"
                                  ),
                                  "=",
                                  AST$(
                                    7,
                                    3367,
                                    18,
                                    0,
                                    AST$(
                                      3,
                                      3367,
                                      18,
                                      0,
                                      AST$(
                                        3,
                                        3367,
                                        18,
                                        0,
                                        AST$(25, 3367, 18, 0),
                                        ".",
                                        AST$(
                                          9,
                                          3367,
                                          20,
                                          0,
                                          "_keys"
                                        )
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3367,
                                        26,
                                        0,
                                        "indexOf"
                                      )
                                    ),
                                    0,
                                    AST$(
                                      17,
                                      3367,
                                      35,
                                      0,
                                      "key"
                                    )
                                  )
                                ),
                                AST$(
                                  18,
                                  3368,
                                  1,
                                  0,
                                  AST$(
                                    3,
                                    3368,
                                    9,
                                    0,
                                    AST$(
                                      17,
                                      3368,
                                      9,
                                      0,
                                      "index"
                                    ),
                                    "===",
                                    AST$(
                                      9,
                                      3368,
                                      18,
                                      0,
                                      -1
                                    )
                                  ),
                                  AST$(23, 3369, 1, 0),
                                  AST$(
                                    23,
                                    3371,
                                    1,
                                    0,
                                    AST$(
                                      3,
                                      3371,
                                      1,
                                      0,
                                      AST$(
                                        3,
                                        3371,
                                        1,
                                        0,
                                        AST$(25, 3371, 1, 0),
                                        ".",
                                        AST$(
                                          9,
                                          3371,
                                          10,
                                          0,
                                          "_values"
                                        )
                                      ),
                                      ".",
                                      AST$(
                                        17,
                                        3371,
                                        18,
                                        0,
                                        "index"
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      ),
                      AST$(
                        3,
                        3336,
                        80,
                        0,
                        AST$(
                          3,
                          3336,
                          80,
                          0,
                          AST$(
                            17,
                            3336,
                            80,
                            0,
                            "_WeakMap_prototype"
                          ),
                          ".",
                          AST$(
                            9,
                            3373,
                            6,
                            0,
                            "has"
                          )
                        ),
                        "=",
                        AST$(
                          16,
                          3373,
                          10,
                          0,
                          0,
                          [
                            AST$(
                              17,
                              3373,
                              11,
                              0,
                              "key"
                            )
                          ],
                          0,
                          AST$(
                            4,
                            3374,
                            1,
                            0,
                            0,
                            AST$(
                              18,
                              3374,
                              1,
                              0,
                              AST$(
                                3,
                                3374,
                                7,
                                0,
                                AST$(
                                  7,
                                  3374,
                                  7,
                                  0,
                                  AST$(
                                    17,
                                    3374,
                                    7,
                                    0,
                                    "Object"
                                  ),
                                  0,
                                  AST$(
                                    17,
                                    3374,
                                    15,
                                    0,
                                    "key"
                                  )
                                ),
                                "!==",
                                AST$(
                                  17,
                                  3374,
                                  22,
                                  0,
                                  "key"
                                )
                              ),
                              AST$(
                                26,
                                3375,
                                1,
                                0,
                                AST$(
                                  7,
                                  3375,
                                  12,
                                  0,
                                  AST$(
                                    17,
                                    3375,
                                    12,
                                    0,
                                    "TypeError"
                                  ),
                                  0,
                                  AST$(
                                    9,
                                    3375,
                                    23,
                                    0,
                                    "Invalid value used as weak map key"
                                  )
                                )
                              )
                            ),
                            AST$(
                              18,
                              3377,
                              1,
                              0,
                              AST$(
                                7,
                                3377,
                                7,
                                0,
                                AST$(
                                  17,
                                  3377,
                                  7,
                                  0,
                                  "isExtensible"
                                ),
                                0,
                                AST$(
                                  17,
                                  3377,
                                  22,
                                  0,
                                  "key"
                                )
                              ),
                              AST$(
                                23,
                                3378,
                                1,
                                0,
                                AST$(
                                  7,
                                  3378,
                                  1,
                                  0,
                                  AST$(
                                    3,
                                    3378,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      3378,
                                      1,
                                      0,
                                      "__owns"
                                    ),
                                    ".",
                                    AST$(
                                      9,
                                      3378,
                                      1,
                                      0,
                                      "call"
                                    )
                                  ),
                                  0,
                                  AST$(
                                    17,
                                    3378,
                                    1,
                                    0,
                                    "key"
                                  ),
                                  AST$(
                                    3,
                                    3378,
                                    18,
                                    0,
                                    AST$(25, 3378, 18, 0),
                                    ".",
                                    AST$(
                                      9,
                                      3378,
                                      20,
                                      0,
                                      "_uid"
                                    )
                                  )
                                )
                              ),
                              AST$(
                                4,
                                3380,
                                1,
                                0,
                                0,
                                AST$(
                                  7,
                                  3380,
                                  1,
                                  0,
                                  AST$(
                                    3,
                                    3380,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      3380,
                                      1,
                                      0,
                                      "check"
                                    ),
                                    ".",
                                    AST$(
                                      9,
                                      3380,
                                      1,
                                      0,
                                      "call"
                                    )
                                  ),
                                  0,
                                  AST$(25, 3380, 14, 0),
                                  AST$(
                                    17,
                                    3380,
                                    19,
                                    0,
                                    "key"
                                  )
                                ),
                                AST$(
                                  23,
                                  3381,
                                  1,
                                  0,
                                  AST$(
                                    3,
                                    3381,
                                    1,
                                    0,
                                    AST$(
                                      7,
                                      3381,
                                      1,
                                      0,
                                      AST$(
                                        3,
                                        3381,
                                        1,
                                        0,
                                        AST$(
                                          3,
                                          3381,
                                          1,
                                          0,
                                          AST$(25, 3381, 1, 0),
                                          ".",
                                          AST$(
                                            9,
                                            3381,
                                            8,
                                            0,
                                            "_keys"
                                          )
                                        ),
                                        ".",
                                        AST$(
                                          9,
                                          3381,
                                          14,
                                          0,
                                          "indexOf"
                                        )
                                      ),
                                      0,
                                      AST$(
                                        17,
                                        3381,
                                        23,
                                        0,
                                        "key"
                                      )
                                    ),
                                    "!==",
                                    AST$(
                                      9,
                                      3381,
                                      30,
                                      0,
                                      -1
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      ),
                      AST$(
                        18,
                        3383,
                        17,
                        0,
                        AST$(
                          3,
                          3383,
                          20,
                          0,
                          AST$(
                            30,
                            3383,
                            20,
                            0,
                            "typeof",
                            AST$(
                              3,
                              3383,
                              33,
                              0,
                              AST$(
                                17,
                                3383,
                                33,
                                0,
                                "Object"
                              ),
                              ".",
                              AST$(
                                9,
                                3383,
                                41,
                                0,
                                "defineProperty"
                              )
                            )
                          ),
                          "===",
                          AST$(
                            9,
                            3383,
                            20,
                            0,
                            "function"
                          )
                        ),
                        AST$(
                          3,
                          3383,
                          1,
                          0,
                          AST$(
                            17,
                            3383,
                            6,
                            0,
                            "defProp"
                          ),
                          "=",
                          AST$(
                            3,
                            3383,
                            61,
                            0,
                            AST$(
                              17,
                              3383,
                              61,
                              0,
                              "Object"
                            ),
                            ".",
                            AST$(
                              9,
                              3383,
                              69,
                              0,
                              "defineProperty"
                            )
                          )
                        ),
                        AST$(
                          3,
                          3383,
                          1,
                          0,
                          AST$(
                            17,
                            3383,
                            6,
                            0,
                            "defProp"
                          ),
                          "=",
                          AST$(
                            16,
                            3383,
                            91,
                            0,
                            0,
                            [
                              AST$(
                                17,
                                3383,
                                92,
                                0,
                                "o"
                              ),
                              AST$(
                                17,
                                3383,
                                94,
                                0,
                                "k"
                              ),
                              AST$(
                                17,
                                3383,
                                97,
                                0,
                                "d"
                              )
                            ],
                            0,
                            AST$(
                              3,
                              3383,
                              104,
                              0,
                              AST$(
                                3,
                                3383,
                                104,
                                0,
                                AST$(
                                  17,
                                  3383,
                                  104,
                                  0,
                                  "o"
                                ),
                                ".",
                                AST$(
                                  17,
                                  3383,
                                  107,
                                  0,
                                  "k"
                                )
                              ),
                              "=",
                              AST$(
                                3,
                                3383,
                                112,
                                0,
                                AST$(
                                  17,
                                  3383,
                                  112,
                                  0,
                                  "d"
                                ),
                                ".",
                                AST$(
                                  9,
                                  3383,
                                  115,
                                  0,
                                  "value"
                                )
                              )
                            )
                          )
                        )
                      ),
                      AST$(
                        3,
                        3336,
                        80,
                        0,
                        AST$(
                          3,
                          3336,
                          80,
                          0,
                          AST$(
                            17,
                            3336,
                            80,
                            0,
                            "_WeakMap_prototype"
                          ),
                          ".",
                          AST$(
                            9,
                            3384,
                            6,
                            0,
                            "set"
                          )
                        ),
                        "=",
                        AST$(
                          16,
                          3384,
                          10,
                          0,
                          0,
                          [
                            AST$(
                              17,
                              3384,
                              11,
                              0,
                              "key"
                            ),
                            AST$(
                              17,
                              3384,
                              15,
                              0,
                              "value"
                            )
                          ],
                          ["index", "keys"],
                          AST$(
                            4,
                            3385,
                            1,
                            0,
                            0,
                            AST$(
                              18,
                              3385,
                              1,
                              0,
                              AST$(
                                3,
                                3385,
                                7,
                                0,
                                AST$(
                                  7,
                                  3385,
                                  7,
                                  0,
                                  AST$(
                                    17,
                                    3385,
                                    7,
                                    0,
                                    "Object"
                                  ),
                                  0,
                                  AST$(
                                    17,
                                    3385,
                                    15,
                                    0,
                                    "key"
                                  )
                                ),
                                "!==",
                                AST$(
                                  17,
                                  3385,
                                  22,
                                  0,
                                  "key"
                                )
                              ),
                              AST$(
                                26,
                                3386,
                                1,
                                0,
                                AST$(
                                  7,
                                  3386,
                                  12,
                                  0,
                                  AST$(
                                    17,
                                    3386,
                                    12,
                                    0,
                                    "TypeError"
                                  ),
                                  0,
                                  AST$(
                                    9,
                                    3386,
                                    23,
                                    0,
                                    "Invalid value used as weak map key"
                                  )
                                )
                              )
                            ),
                            AST$(
                              18,
                              3388,
                              1,
                              0,
                              AST$(
                                7,
                                3388,
                                7,
                                0,
                                AST$(
                                  17,
                                  3388,
                                  7,
                                  0,
                                  "isExtensible"
                                ),
                                0,
                                AST$(
                                  17,
                                  3388,
                                  22,
                                  0,
                                  "key"
                                )
                              ),
                              AST$(
                                7,
                                3389,
                                1,
                                0,
                                AST$(
                                  17,
                                  3389,
                                  1,
                                  0,
                                  "defProp"
                                ),
                                0,
                                AST$(
                                  17,
                                  3389,
                                  16,
                                  0,
                                  "key"
                                ),
                                AST$(
                                  3,
                                  3389,
                                  20,
                                  0,
                                  AST$(25, 3389, 20, 0),
                                  ".",
                                  AST$(
                                    9,
                                    3389,
                                    22,
                                    0,
                                    "_uid"
                                  )
                                ),
                                AST$(
                                  21,
                                  3389,
                                  27,
                                  0,
                                  3390,
                                  10,
                                  void 0,
                                  "configurable",
                                  AST$(
                                    9,
                                    3390,
                                    9,
                                    0,
                                    true
                                  ),
                                  3391,
                                  10,
                                  void 0,
                                  "writable",
                                  AST$(
                                    9,
                                    3391,
                                    9,
                                    0,
                                    true
                                  ),
                                  3392,
                                  10,
                                  void 0,
                                  "enumerable",
                                  AST$(
                                    9,
                                    3392,
                                    9,
                                    0,
                                    false
                                  ),
                                  3393,
                                  9,
                                  void 0,
                                  "value",
                                  AST$(
                                    17,
                                    3393,
                                    9,
                                    0,
                                    "value"
                                  )
                                )
                              ),
                              AST$(
                                4,
                                3396,
                                1,
                                0,
                                0,
                                AST$(
                                  7,
                                  3396,
                                  1,
                                  0,
                                  AST$(
                                    3,
                                    3396,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      3396,
                                      1,
                                      0,
                                      "check"
                                    ),
                                    ".",
                                    AST$(
                                      9,
                                      3396,
                                      1,
                                      0,
                                      "call"
                                    )
                                  ),
                                  0,
                                  AST$(25, 3396, 14, 0),
                                  AST$(
                                    17,
                                    3396,
                                    19,
                                    0,
                                    "key"
                                  )
                                ),
                                AST$(
                                  3,
                                  3397,
                                  1,
                                  0,
                                  AST$(
                                    17,
                                    3397,
                                    10,
                                    0,
                                    "keys"
                                  ),
                                  "=",
                                  AST$(
                                    3,
                                    3397,
                                    17,
                                    0,
                                    AST$(25, 3397, 17, 0),
                                    ".",
                                    AST$(
                                      9,
                                      3397,
                                      19,
                                      0,
                                      "_keys"
                                    )
                                  )
                                ),
                                AST$(
                                  3,
                                  3398,
                                  1,
                                  0,
                                  AST$(
                                    17,
                                    3398,
                                    18,
                                    0,
                                    "index"
                                  ),
                                  "=",
                                  AST$(
                                    7,
                                    3398,
                                    26,
                                    0,
                                    AST$(
                                      3,
                                      3398,
                                      26,
                                      0,
                                      AST$(
                                        17,
                                        3398,
                                        26,
                                        0,
                                        "keys"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3398,
                                        32,
                                        0,
                                        "indexOf"
                                      )
                                    ),
                                    0,
                                    AST$(
                                      17,
                                      3398,
                                      41,
                                      0,
                                      "key"
                                    )
                                  )
                                ),
                                AST$(
                                  18,
                                  3399,
                                  1,
                                  0,
                                  AST$(
                                    3,
                                    3399,
                                    9,
                                    0,
                                    AST$(
                                      17,
                                      3399,
                                      9,
                                      0,
                                      "index"
                                    ),
                                    "===",
                                    AST$(
                                      9,
                                      3399,
                                      18,
                                      0,
                                      -1
                                    )
                                  ),
                                  AST$(
                                    4,
                                    3400,
                                    1,
                                    0,
                                    0,
                                    AST$(
                                      3,
                                      3400,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3400,
                                        1,
                                        0,
                                        "index"
                                      ),
                                      "=",
                                      AST$(
                                        3,
                                        3400,
                                        17,
                                        0,
                                        AST$(
                                          17,
                                          3400,
                                          17,
                                          0,
                                          "keys"
                                        ),
                                        ".",
                                        AST$(
                                          9,
                                          3400,
                                          23,
                                          0,
                                          "length"
                                        )
                                      )
                                    ),
                                    AST$(
                                      3,
                                      3401,
                                      1,
                                      0,
                                      AST$(
                                        3,
                                        3401,
                                        1,
                                        0,
                                        AST$(
                                          17,
                                          3401,
                                          1,
                                          0,
                                          "keys"
                                        ),
                                        ".",
                                        AST$(
                                          17,
                                          3401,
                                          14,
                                          0,
                                          "index"
                                        )
                                      ),
                                      "=",
                                      AST$(
                                        17,
                                        3401,
                                        23,
                                        0,
                                        "key"
                                      )
                                    )
                                  )
                                ),
                                AST$(
                                  3,
                                  3402,
                                  1,
                                  0,
                                  AST$(
                                    3,
                                    3402,
                                    1,
                                    0,
                                    AST$(
                                      3,
                                      3402,
                                      1,
                                      0,
                                      AST$(25, 3402, 1, 0),
                                      ".",
                                      AST$(
                                        9,
                                        3402,
                                        8,
                                        0,
                                        "_values"
                                      )
                                    ),
                                    ".",
                                    AST$(
                                      17,
                                      3402,
                                      16,
                                      0,
                                      "index"
                                    )
                                  ),
                                  "=",
                                  AST$(
                                    17,
                                    3402,
                                    25,
                                    0,
                                    "value"
                                  )
                                )
                              )
                            )
                          )
                        )
                      ),
                      AST$(
                        3,
                        3336,
                        80,
                        0,
                        AST$(
                          3,
                          3336,
                          80,
                          0,
                          AST$(
                            17,
                            3336,
                            80,
                            0,
                            "_WeakMap_prototype"
                          ),
                          ".",
                          AST$(
                            9,
                            3404,
                            6,
                            0,
                            "delete"
                          )
                        ),
                        "=",
                        AST$(
                          16,
                          3404,
                          13,
                          0,
                          0,
                          [
                            AST$(
                              17,
                              3404,
                              14,
                              0,
                              "key"
                            )
                          ],
                          ["index", "keys"],
                          AST$(
                            4,
                            3405,
                            1,
                            0,
                            0,
                            AST$(
                              18,
                              3405,
                              1,
                              0,
                              AST$(
                                3,
                                3405,
                                7,
                                0,
                                AST$(
                                  7,
                                  3405,
                                  7,
                                  0,
                                  AST$(
                                    17,
                                    3405,
                                    7,
                                    0,
                                    "Object"
                                  ),
                                  0,
                                  AST$(
                                    17,
                                    3405,
                                    15,
                                    0,
                                    "key"
                                  )
                                ),
                                "!==",
                                AST$(
                                  17,
                                  3405,
                                  22,
                                  0,
                                  "key"
                                )
                              ),
                              AST$(
                                26,
                                3406,
                                1,
                                0,
                                AST$(
                                  7,
                                  3406,
                                  12,
                                  0,
                                  AST$(
                                    17,
                                    3406,
                                    12,
                                    0,
                                    "TypeError"
                                  ),
                                  0,
                                  AST$(
                                    9,
                                    3406,
                                    23,
                                    0,
                                    "Invalid value used as weak map key"
                                  )
                                )
                              )
                            ),
                            AST$(
                              18,
                              3408,
                              1,
                              0,
                              AST$(
                                7,
                                3408,
                                7,
                                0,
                                AST$(
                                  17,
                                  3408,
                                  7,
                                  0,
                                  "isExtensible"
                                ),
                                0,
                                AST$(
                                  17,
                                  3408,
                                  22,
                                  0,
                                  "key"
                                )
                              ),
                              AST$(
                                30,
                                3409,
                                1,
                                0,
                                "delete",
                                AST$(
                                  3,
                                  3409,
                                  13,
                                  0,
                                  AST$(
                                    17,
                                    3409,
                                    13,
                                    0,
                                    "key"
                                  ),
                                  ".",
                                  AST$(
                                    3,
                                    3409,
                                    18,
                                    0,
                                    AST$(25, 3409, 18, 0),
                                    ".",
                                    AST$(
                                      9,
                                      3409,
                                      19,
                                      0,
                                      "_uid"
                                    )
                                  )
                                )
                              ),
                              AST$(
                                4,
                                3411,
                                1,
                                0,
                                0,
                                AST$(
                                  7,
                                  3411,
                                  1,
                                  0,
                                  AST$(
                                    3,
                                    3411,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      3411,
                                      1,
                                      0,
                                      "check"
                                    ),
                                    ".",
                                    AST$(
                                      9,
                                      3411,
                                      1,
                                      0,
                                      "call"
                                    )
                                  ),
                                  0,
                                  AST$(25, 3411, 14, 0),
                                  AST$(
                                    17,
                                    3411,
                                    19,
                                    0,
                                    "key"
                                  )
                                ),
                                AST$(
                                  3,
                                  3412,
                                  1,
                                  0,
                                  AST$(
                                    17,
                                    3412,
                                    10,
                                    0,
                                    "keys"
                                  ),
                                  "=",
                                  AST$(
                                    3,
                                    3412,
                                    17,
                                    0,
                                    AST$(25, 3412, 17, 0),
                                    ".",
                                    AST$(
                                      9,
                                      3412,
                                      19,
                                      0,
                                      "_keys"
                                    )
                                  )
                                ),
                                AST$(
                                  3,
                                  3413,
                                  1,
                                  0,
                                  AST$(
                                    17,
                                    3413,
                                    18,
                                    0,
                                    "index"
                                  ),
                                  "=",
                                  AST$(
                                    7,
                                    3413,
                                    26,
                                    0,
                                    AST$(
                                      3,
                                      3413,
                                      26,
                                      0,
                                      AST$(
                                        17,
                                        3413,
                                        26,
                                        0,
                                        "keys"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3413,
                                        32,
                                        0,
                                        "indexOf"
                                      )
                                    ),
                                    0,
                                    AST$(
                                      17,
                                      3413,
                                      41,
                                      0,
                                      "key"
                                    )
                                  )
                                ),
                                AST$(
                                  18,
                                  3414,
                                  1,
                                  0,
                                  AST$(
                                    3,
                                    3414,
                                    9,
                                    0,
                                    AST$(
                                      17,
                                      3414,
                                      9,
                                      0,
                                      "index"
                                    ),
                                    "!==",
                                    AST$(
                                      9,
                                      3414,
                                      18,
                                      0,
                                      -1
                                    )
                                  ),
                                  AST$(
                                    4,
                                    3415,
                                    1,
                                    0,
                                    0,
                                    AST$(
                                      7,
                                      3415,
                                      1,
                                      0,
                                      AST$(
                                        3,
                                        3415,
                                        1,
                                        0,
                                        AST$(
                                          17,
                                          3415,
                                          1,
                                          0,
                                          "keys"
                                        ),
                                        ".",
                                        AST$(
                                          9,
                                          3415,
                                          14,
                                          0,
                                          "splice"
                                        )
                                      ),
                                      0,
                                      AST$(
                                        17,
                                        3415,
                                        21,
                                        0,
                                        "index"
                                      ),
                                      AST$(
                                        9,
                                        3415,
                                        28,
                                        0,
                                        1
                                      )
                                    ),
                                    AST$(
                                      7,
                                      3416,
                                      1,
                                      0,
                                      AST$(
                                        3,
                                        3416,
                                        1,
                                        0,
                                        AST$(
                                          3,
                                          3416,
                                          1,
                                          0,
                                          AST$(25, 3416, 1, 0),
                                          ".",
                                          AST$(
                                            9,
                                            3416,
                                            10,
                                            0,
                                            "_values"
                                          )
                                        ),
                                        ".",
                                        AST$(
                                          9,
                                          3416,
                                          18,
                                          0,
                                          "splice"
                                        )
                                      ),
                                      0,
                                      AST$(
                                        17,
                                        3416,
                                        25,
                                        0,
                                        "index"
                                      ),
                                      AST$(
                                        9,
                                        3416,
                                        32,
                                        0,
                                        1
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      ),
                      AST$(
                        23,
                        3336,
                        80,
                        0,
                        AST$(
                          17,
                          3336,
                          86,
                          0,
                          "WeakMap"
                        )
                      )
                    )
                  ),
                  0
                )
              )
            ),
            type: TYPE$.any,
            dependencies: ["__create", "__owns", "__strnum", "GLOBAL"]
          },
          __indexOfIdentical: {
            helper: AST$(
              16,
              3418,
              39,
              0,
              0,
              [
                AST$(
                  17,
                  3418,
                  40,
                  0,
                  "array"
                ),
                AST$(
                  17,
                  3418,
                  46,
                  0,
                  "item"
                )
              ],
              ["_arr", "check", "i", "inf"],
              AST$(
                4,
                3419,
                1,
                0,
                0,
                AST$(
                  18,
                  3419,
                  1,
                  0,
                  AST$(
                    3,
                    3419,
                    5,
                    0,
                    AST$(
                      30,
                      3419,
                      5,
                      0,
                      "typeof",
                      AST$(
                        17,
                        3419,
                        12,
                        0,
                        "item"
                      )
                    ),
                    "===",
                    AST$(
                      9,
                      3419,
                      22,
                      0,
                      "number"
                    )
                  ),
                  AST$(
                    18,
                    3420,
                    1,
                    0,
                    AST$(
                      3,
                      3420,
                      7,
                      0,
                      AST$(
                        17,
                        3420,
                        7,
                        0,
                        "item"
                      ),
                      "!==",
                      AST$(
                        17,
                        3420,
                        7,
                        0,
                        "item"
                      )
                    ),
                    AST$(
                      4,
                      3421,
                      1,
                      0,
                      0,
                      AST$(
                        14,
                        3421,
                        1,
                        0,
                        AST$(
                          5,
                          1,
                          1,
                          0,
                          AST$(
                            3,
                            3421,
                            1,
                            0,
                            AST$(
                              17,
                              3421,
                              1,
                              0,
                              "_arr"
                            ),
                            "=",
                            AST$(
                              7,
                              3421,
                              1,
                              0,
                              AST$(
                                17,
                                3421,
                                1,
                                0,
                                "__toArray"
                              ),
                              0,
                              AST$(
                                17,
                                3421,
                                22,
                                0,
                                "array"
                              )
                            )
                          ),
                          AST$(
                            3,
                            3421,
                            1,
                            0,
                            AST$(
                              17,
                              3421,
                              17,
                              0,
                              "i"
                            ),
                            "=",
                            AST$(
                              3,
                              3421,
                              1,
                              0,
                              AST$(
                                17,
                                3421,
                                1,
                                0,
                                "_arr"
                              ),
                              ".",
                              AST$(
                                9,
                                3421,
                                1,
                                0,
                                "length"
                              )
                            )
                          )
                        ),
                        AST$(
                          30,
                          3421,
                          1,
                          0,
                          "--post",
                          AST$(
                            17,
                            3421,
                            17,
                            0,
                            "i"
                          )
                        ),
                        AST$(20, 3421, 1, 0),
                        AST$(
                          4,
                          3421,
                          1,
                          0,
                          0,
                          AST$(
                            3,
                            3421,
                            1,
                            0,
                            AST$(
                              17,
                              3421,
                              10,
                              0,
                              "check"
                            ),
                            "=",
                            AST$(
                              3,
                              3421,
                              1,
                              0,
                              AST$(
                                17,
                                3421,
                                1,
                                0,
                                "_arr"
                              ),
                              ".",
                              AST$(
                                17,
                                3421,
                                17,
                                0,
                                "i"
                              )
                            )
                          ),
                          AST$(
                            18,
                            3422,
                            1,
                            0,
                            AST$(
                              3,
                              3422,
                              11,
                              0,
                              AST$(
                                17,
                                3422,
                                11,
                                0,
                                "check"
                              ),
                              "!==",
                              AST$(
                                17,
                                3422,
                                11,
                                0,
                                "check"
                              )
                            ),
                            AST$(
                              23,
                              3423,
                              1,
                              0,
                              AST$(
                                17,
                                3423,
                                17,
                                0,
                                "i"
                              )
                            )
                          )
                        )
                      ),
                      AST$(
                        23,
                        3424,
                        1,
                        0,
                        AST$(
                          9,
                          3424,
                          13,
                          0,
                          -1
                        )
                      )
                    ),
                    AST$(
                      18,
                      3420,
                      1,
                      0,
                      AST$(
                        3,
                        3425,
                        12,
                        0,
                        AST$(
                          17,
                          3425,
                          12,
                          0,
                          "item"
                        ),
                        "===",
                        AST$(
                          9,
                          3425,
                          21,
                          0,
                          0
                        )
                      ),
                      AST$(
                        4,
                        3426,
                        1,
                        0,
                        0,
                        AST$(
                          3,
                          3426,
                          1,
                          0,
                          AST$(
                            17,
                            3426,
                            10,
                            0,
                            "inf"
                          ),
                          "=",
                          AST$(
                            3,
                            3426,
                            16,
                            0,
                            AST$(
                              9,
                              3426,
                              17,
                              0,
                              1
                            ),
                            "/",
                            AST$(
                              17,
                              3426,
                              21,
                              0,
                              "item"
                            )
                          )
                        ),
                        AST$(
                          14,
                          3427,
                          1,
                          0,
                          AST$(
                            5,
                            1,
                            1,
                            0,
                            AST$(
                              3,
                              3427,
                              1,
                              0,
                              AST$(
                                17,
                                3427,
                                1,
                                0,
                                "_arr"
                              ),
                              "=",
                              AST$(
                                7,
                                3427,
                                1,
                                0,
                                AST$(
                                  17,
                                  3427,
                                  1,
                                  0,
                                  "__toArray"
                                ),
                                0,
                                AST$(
                                  17,
                                  3427,
                                  22,
                                  0,
                                  "array"
                                )
                              )
                            ),
                            AST$(
                              3,
                              3427,
                              1,
                              0,
                              AST$(
                                17,
                                3427,
                                17,
                                0,
                                "i"
                              ),
                              "=",
                              AST$(
                                3,
                                3427,
                                1,
                                0,
                                AST$(
                                  17,
                                  3427,
                                  1,
                                  0,
                                  "_arr"
                                ),
                                ".",
                                AST$(
                                  9,
                                  3427,
                                  1,
                                  0,
                                  "length"
                                )
                              )
                            )
                          ),
                          AST$(
                            30,
                            3427,
                            1,
                            0,
                            "--post",
                            AST$(
                              17,
                              3427,
                              17,
                              0,
                              "i"
                            )
                          ),
                          AST$(20, 3427, 1, 0),
                          AST$(
                            4,
                            3427,
                            1,
                            0,
                            0,
                            AST$(
                              3,
                              3427,
                              1,
                              0,
                              AST$(
                                17,
                                3427,
                                10,
                                0,
                                "check"
                              ),
                              "=",
                              AST$(
                                3,
                                3427,
                                1,
                                0,
                                AST$(
                                  17,
                                  3427,
                                  1,
                                  0,
                                  "_arr"
                                ),
                                ".",
                                AST$(
                                  17,
                                  3427,
                                  17,
                                  0,
                                  "i"
                                )
                              )
                            ),
                            AST$(
                              18,
                              3428,
                              1,
                              0,
                              AST$(
                                3,
                                3428,
                                11,
                                0,
                                AST$(
                                  3,
                                  3428,
                                  11,
                                  0,
                                  AST$(
                                    17,
                                    3428,
                                    11,
                                    0,
                                    "check"
                                  ),
                                  "===",
                                  AST$(
                                    9,
                                    3428,
                                    21,
                                    0,
                                    0
                                  )
                                ),
                                "&&",
                                AST$(
                                  3,
                                  3428,
                                  26,
                                  0,
                                  AST$(
                                    3,
                                    3428,
                                    26,
                                    0,
                                    AST$(
                                      9,
                                      3428,
                                      27,
                                      0,
                                      1
                                    ),
                                    "/",
                                    AST$(
                                      17,
                                      3428,
                                      31,
                                      0,
                                      "check"
                                    )
                                  ),
                                  "===",
                                  AST$(
                                    17,
                                    3428,
                                    40,
                                    0,
                                    "inf"
                                  )
                                )
                              ),
                              AST$(
                                23,
                                3429,
                                1,
                                0,
                                AST$(
                                  17,
                                  3429,
                                  17,
                                  0,
                                  "i"
                                )
                              )
                            )
                          )
                        ),
                        AST$(
                          23,
                          3430,
                          1,
                          0,
                          AST$(
                            9,
                            3430,
                            13,
                            0,
                            -1
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  23,
                  3431,
                  1,
                  0,
                  AST$(
                    7,
                    3431,
                    1,
                    0,
                    AST$(
                      3,
                      3431,
                      1,
                      0,
                      AST$(
                        17,
                        3431,
                        1,
                        0,
                        "array"
                      ),
                      ".",
                      AST$(
                        9,
                        3431,
                        9,
                        0,
                        "indexOf"
                      )
                    ),
                    0,
                    AST$(
                      17,
                      3431,
                      18,
                      0,
                      "item"
                    )
                  )
                )
              )
            ),
            type: TYPE$["function"],
            dependencies: ["__toArray"]
          },
          Map: {
            helper: AST$(
              19,
              3433,
              20,
              0,
              AST$(
                3,
                3433,
                23,
                0,
                AST$(
                  30,
                  3433,
                  23,
                  0,
                  "typeof",
                  AST$(
                    3,
                    3433,
                    36,
                    0,
                    AST$(
                      17,
                      3433,
                      36,
                      0,
                      "GLOBAL"
                    ),
                    ".",
                    AST$(
                      9,
                      3433,
                      44,
                      0,
                      "Map"
                    )
                  )
                ),
                "===",
                AST$(
                  9,
                  3433,
                  23,
                  0,
                  "function"
                )
              ),
              AST$(
                3,
                3433,
                52,
                0,
                AST$(
                  17,
                  3433,
                  52,
                  0,
                  "GLOBAL"
                ),
                ".",
                AST$(
                  9,
                  3433,
                  60,
                  0,
                  "Map"
                )
              ),
              AST$(
                3,
                3433,
                68,
                0,
                AST$(
                  17,
                  3433,
                  74,
                  0,
                  "Map"
                ),
                "=",
                AST$(
                  7,
                  3433,
                  68,
                  0,
                  AST$(
                    16,
                    3433,
                    68,
                    0,
                    0,
                    0,
                    ["_Map_prototype"],
                    AST$(
                      4,
                      3433,
                      68,
                      0,
                      0,
                      AST$(
                        16,
                        3433,
                        68,
                        0,
                        AST$(
                          17,
                          3433,
                          74,
                          0,
                          "Map"
                        ),
                        [
                          AST$(
                            17,
                            3434,
                            19,
                            0,
                            "iterable"
                          )
                        ],
                        ["_item", "_iter", "_this", "x"],
                        AST$(
                          4,
                          3435,
                          1,
                          0,
                          0,
                          AST$(
                            3,
                            3435,
                            1,
                            0,
                            AST$(
                              17,
                              3435,
                              1,
                              0,
                              "_this"
                            ),
                            "=",
                            AST$(
                              19,
                              3433,
                              68,
                              0,
                              AST$(
                                3,
                                3433,
                                68,
                                0,
                                AST$(
                                  13,
                                  3433,
                                  68,
                                  0,
                                  AST$(
                                    9,
                                    3433,
                                    68,
                                    0,
                                    "this"
                                  )
                                ),
                                "instanceof",
                                AST$(
                                  17,
                                  3433,
                                  74,
                                  0,
                                  "Map"
                                )
                              ),
                              AST$(
                                13,
                                3433,
                                68,
                                0,
                                AST$(
                                  9,
                                  3433,
                                  68,
                                  0,
                                  "this"
                                )
                              ),
                              AST$(
                                7,
                                3433,
                                68,
                                0,
                                AST$(
                                  17,
                                  3433,
                                  68,
                                  0,
                                  "__create"
                                ),
                                0,
                                AST$(
                                  17,
                                  3433,
                                  68,
                                  0,
                                  "_Map_prototype"
                                )
                              )
                            )
                          ),
                          AST$(
                            3,
                            3435,
                            1,
                            0,
                            AST$(
                              3,
                              3435,
                              1,
                              0,
                              AST$(
                                17,
                                3435,
                                1,
                                0,
                                "_this"
                              ),
                              ".",
                              AST$(
                                9,
                                3435,
                                6,
                                0,
                                "_keys"
                              )
                            ),
                            "=",
                            AST$(2, 3435, 14, 0)
                          ),
                          AST$(
                            3,
                            3436,
                            1,
                            0,
                            AST$(
                              3,
                              3436,
                              1,
                              0,
                              AST$(
                                17,
                                3436,
                                1,
                                0,
                                "_this"
                              ),
                              ".",
                              AST$(
                                9,
                                3436,
                                6,
                                0,
                                "_values"
                              )
                            ),
                            "=",
                            AST$(2, 3436, 16, 0)
                          ),
                          AST$(
                            18,
                            3437,
                            1,
                            0,
                            AST$(
                              3,
                              3437,
                              7,
                              0,
                              AST$(
                                17,
                                3437,
                                7,
                                0,
                                "iterable"
                              ),
                              "!=",
                              AST$(
                                9,
                                1,
                                1,
                                0,
                                null
                              )
                            ),
                            AST$(
                              29,
                              3438,
                              1,
                              0,
                              AST$(
                                14,
                                3438,
                                1,
                                0,
                                AST$(
                                  3,
                                  3438,
                                  1,
                                  0,
                                  AST$(
                                    17,
                                    3438,
                                    1,
                                    0,
                                    "_iter"
                                  ),
                                  "=",
                                  AST$(
                                    7,
                                    3438,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      3438,
                                      1,
                                      0,
                                      "__iter"
                                    ),
                                    0,
                                    AST$(
                                      17,
                                      3438,
                                      17,
                                      0,
                                      "iterable"
                                    )
                                  )
                                ),
                                AST$(
                                  9,
                                  1,
                                  1,
                                  0,
                                  true
                                ),
                                AST$(20, 3438, 1, 0),
                                AST$(
                                  4,
                                  3438,
                                  1,
                                  0,
                                  0,
                                  AST$(
                                    3,
                                    3438,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      3438,
                                      1,
                                      0,
                                      "_item"
                                    ),
                                    "=",
                                    AST$(
                                      7,
                                      3438,
                                      1,
                                      0,
                                      AST$(
                                        3,
                                        3438,
                                        1,
                                        0,
                                        AST$(
                                          17,
                                          3438,
                                          1,
                                          0,
                                          "_iter"
                                        ),
                                        ".",
                                        AST$(
                                          9,
                                          3438,
                                          1,
                                          0,
                                          "next"
                                        )
                                      ),
                                      0
                                    )
                                  ),
                                  AST$(
                                    18,
                                    3438,
                                    1,
                                    0,
                                    AST$(
                                      3,
                                      3438,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3438,
                                        1,
                                        0,
                                        "_item"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3438,
                                        1,
                                        0,
                                        "done"
                                      )
                                    ),
                                    AST$(6, 3438, 1, 0)
                                  ),
                                  AST$(
                                    3,
                                    3438,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      3438,
                                      10,
                                      0,
                                      "x"
                                    ),
                                    "=",
                                    AST$(
                                      3,
                                      3438,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3438,
                                        1,
                                        0,
                                        "_item"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3438,
                                        1,
                                        0,
                                        "value"
                                      )
                                    )
                                  ),
                                  AST$(
                                    7,
                                    3439,
                                    1,
                                    0,
                                    AST$(
                                      3,
                                      3439,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3439,
                                        1,
                                        0,
                                        "_this"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3439,
                                        10,
                                        0,
                                        "set"
                                      )
                                    ),
                                    0,
                                    AST$(
                                      3,
                                      3439,
                                      14,
                                      0,
                                      AST$(
                                        17,
                                        3439,
                                        14,
                                        0,
                                        "x"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3439,
                                        16,
                                        0,
                                        0
                                      )
                                    ),
                                    AST$(
                                      3,
                                      3439,
                                      19,
                                      0,
                                      AST$(
                                        17,
                                        3439,
                                        19,
                                        0,
                                        "x"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3439,
                                        22,
                                        0,
                                        1
                                      )
                                    )
                                  )
                                )
                              ),
                              AST$(
                                28,
                                3438,
                                1,
                                0,
                                AST$(
                                  7,
                                  3438,
                                  1,
                                  0,
                                  AST$(
                                    3,
                                    3438,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      3438,
                                      1,
                                      0,
                                      "_iter"
                                    ),
                                    ".",
                                    AST$(
                                      9,
                                      3438,
                                      1,
                                      0,
                                      "close"
                                    )
                                  ),
                                  0
                                ),
                                AST$(
                                  17,
                                  3438,
                                  1,
                                  0,
                                  "_e"
                                ),
                                AST$(9, 1, 1, 0)
                              )
                            )
                          ),
                          AST$(
                            23,
                            3435,
                            1,
                            0,
                            AST$(
                              17,
                              3435,
                              1,
                              0,
                              "_this"
                            )
                          )
                        )
                      ),
                      AST$(
                        3,
                        3433,
                        68,
                        0,
                        AST$(
                          17,
                          3433,
                          68,
                          0,
                          "_Map_prototype"
                        ),
                        "=",
                        AST$(
                          3,
                          3433,
                          68,
                          0,
                          AST$(
                            17,
                            3433,
                            74,
                            0,
                            "Map"
                          ),
                          ".",
                          AST$(
                            9,
                            3433,
                            68,
                            0,
                            "prototype"
                          )
                        )
                      ),
                      AST$(
                        3,
                        3433,
                        68,
                        0,
                        AST$(
                          3,
                          3433,
                          68,
                          0,
                          AST$(
                            17,
                            3433,
                            74,
                            0,
                            "Map"
                          ),
                          ".",
                          AST$(
                            9,
                            3433,
                            68,
                            0,
                            "displayName"
                          )
                        ),
                        "=",
                        AST$(
                          9,
                          3433,
                          68,
                          0,
                          "Map"
                        )
                      ),
                      AST$(
                        3,
                        3433,
                        68,
                        0,
                        AST$(
                          3,
                          3433,
                          68,
                          0,
                          AST$(
                            17,
                            3433,
                            68,
                            0,
                            "_Map_prototype"
                          ),
                          ".",
                          AST$(
                            9,
                            3441,
                            6,
                            0,
                            "get"
                          )
                        ),
                        "=",
                        AST$(
                          16,
                          3441,
                          10,
                          0,
                          0,
                          [
                            AST$(
                              17,
                              3441,
                              11,
                              0,
                              "key"
                            )
                          ],
                          ["index"],
                          AST$(
                            4,
                            3442,
                            1,
                            0,
                            0,
                            AST$(
                              3,
                              3442,
                              1,
                              0,
                              AST$(
                                17,
                                3442,
                                8,
                                0,
                                "index"
                              ),
                              "=",
                              AST$(
                                7,
                                3442,
                                16,
                                0,
                                AST$(
                                  17,
                                  3442,
                                  16,
                                  0,
                                  "__indexOfIdentical"
                                ),
                                0,
                                AST$(
                                  3,
                                  3442,
                                  38,
                                  0,
                                  AST$(25, 3442, 38, 0),
                                  ".",
                                  AST$(
                                    9,
                                    3442,
                                    39,
                                    0,
                                    "_keys"
                                  )
                                ),
                                AST$(
                                  17,
                                  3442,
                                  45,
                                  0,
                                  "key"
                                )
                              )
                            ),
                            AST$(
                              18,
                              3443,
                              1,
                              0,
                              AST$(
                                3,
                                3443,
                                7,
                                0,
                                AST$(
                                  17,
                                  3443,
                                  7,
                                  0,
                                  "index"
                                ),
                                "===",
                                AST$(
                                  9,
                                  3443,
                                  16,
                                  0,
                                  -1
                                )
                              ),
                              AST$(23, 3444, 1, 0),
                              AST$(
                                23,
                                3446,
                                1,
                                0,
                                AST$(
                                  3,
                                  3446,
                                  1,
                                  0,
                                  AST$(
                                    3,
                                    3446,
                                    1,
                                    0,
                                    AST$(25, 3446, 1, 0),
                                    ".",
                                    AST$(
                                      9,
                                      3446,
                                      8,
                                      0,
                                      "_values"
                                    )
                                  ),
                                  ".",
                                  AST$(
                                    17,
                                    3446,
                                    16,
                                    0,
                                    "index"
                                  )
                                )
                              )
                            )
                          )
                        )
                      ),
                      AST$(
                        3,
                        3433,
                        68,
                        0,
                        AST$(
                          3,
                          3433,
                          68,
                          0,
                          AST$(
                            17,
                            3433,
                            68,
                            0,
                            "_Map_prototype"
                          ),
                          ".",
                          AST$(
                            9,
                            3448,
                            6,
                            0,
                            "has"
                          )
                        ),
                        "=",
                        AST$(
                          16,
                          3448,
                          10,
                          0,
                          0,
                          [
                            AST$(
                              17,
                              3448,
                              11,
                              0,
                              "key"
                            )
                          ],
                          0,
                          AST$(
                            23,
                            3449,
                            1,
                            0,
                            AST$(
                              3,
                              3449,
                              1,
                              0,
                              AST$(
                                7,
                                3449,
                                1,
                                0,
                                AST$(
                                  17,
                                  3449,
                                  1,
                                  0,
                                  "__indexOfIdentical"
                                ),
                                0,
                                AST$(
                                  3,
                                  3449,
                                  26,
                                  0,
                                  AST$(25, 3449, 26, 0),
                                  ".",
                                  AST$(
                                    9,
                                    3449,
                                    27,
                                    0,
                                    "_keys"
                                  )
                                ),
                                AST$(
                                  17,
                                  3449,
                                  33,
                                  0,
                                  "key"
                                )
                              ),
                              "!==",
                              AST$(
                                9,
                                3449,
                                41,
                                0,
                                -1
                              )
                            )
                          )
                        )
                      ),
                      AST$(
                        3,
                        3433,
                        68,
                        0,
                        AST$(
                          3,
                          3433,
                          68,
                          0,
                          AST$(
                            17,
                            3433,
                            68,
                            0,
                            "_Map_prototype"
                          ),
                          ".",
                          AST$(
                            9,
                            3451,
                            6,
                            0,
                            "set"
                          )
                        ),
                        "=",
                        AST$(
                          16,
                          3451,
                          10,
                          0,
                          0,
                          [
                            AST$(
                              17,
                              3451,
                              11,
                              0,
                              "key"
                            ),
                            AST$(
                              17,
                              3451,
                              15,
                              0,
                              "value"
                            )
                          ],
                          ["index", "keys"],
                          AST$(
                            5,
                            3452,
                            1,
                            0,
                            AST$(
                              3,
                              3452,
                              1,
                              0,
                              AST$(
                                17,
                                3452,
                                8,
                                0,
                                "keys"
                              ),
                              "=",
                              AST$(
                                3,
                                3452,
                                15,
                                0,
                                AST$(25, 3452, 15, 0),
                                ".",
                                AST$(
                                  9,
                                  3452,
                                  17,
                                  0,
                                  "_keys"
                                )
                              )
                            ),
                            AST$(
                              3,
                              3453,
                              1,
                              0,
                              AST$(
                                17,
                                3453,
                                16,
                                0,
                                "index"
                              ),
                              "=",
                              AST$(
                                7,
                                3453,
                                24,
                                0,
                                AST$(
                                  17,
                                  3453,
                                  24,
                                  0,
                                  "__indexOfIdentical"
                                ),
                                0,
                                AST$(
                                  17,
                                  3453,
                                  46,
                                  0,
                                  "keys"
                                ),
                                AST$(
                                  17,
                                  3453,
                                  51,
                                  0,
                                  "key"
                                )
                              )
                            ),
                            AST$(
                              19,
                              3454,
                              1,
                              0,
                              AST$(
                                3,
                                3454,
                                7,
                                0,
                                AST$(
                                  17,
                                  3454,
                                  7,
                                  0,
                                  "index"
                                ),
                                "===",
                                AST$(
                                  9,
                                  3454,
                                  16,
                                  0,
                                  -1
                                )
                              ),
                              AST$(
                                5,
                                3455,
                                1,
                                0,
                                AST$(
                                  3,
                                  3455,
                                  1,
                                  0,
                                  AST$(
                                    17,
                                    3455,
                                    1,
                                    0,
                                    "index"
                                  ),
                                  "=",
                                  AST$(
                                    3,
                                    3455,
                                    15,
                                    0,
                                    AST$(
                                      17,
                                      3455,
                                      15,
                                      0,
                                      "keys"
                                    ),
                                    ".",
                                    AST$(
                                      9,
                                      3455,
                                      21,
                                      0,
                                      "length"
                                    )
                                  )
                                ),
                                AST$(
                                  3,
                                  3456,
                                  1,
                                  0,
                                  AST$(
                                    3,
                                    3456,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      3456,
                                      1,
                                      0,
                                      "keys"
                                    ),
                                    ".",
                                    AST$(
                                      17,
                                      3456,
                                      12,
                                      0,
                                      "index"
                                    )
                                  ),
                                  "=",
                                  AST$(
                                    17,
                                    3456,
                                    21,
                                    0,
                                    "key"
                                  )
                                )
                              )
                            ),
                            AST$(
                              3,
                              3457,
                              1,
                              0,
                              AST$(
                                3,
                                3457,
                                1,
                                0,
                                AST$(
                                  3,
                                  3457,
                                  1,
                                  0,
                                  AST$(25, 3457, 1, 0),
                                  ".",
                                  AST$(
                                    9,
                                    3457,
                                    6,
                                    0,
                                    "_values"
                                  )
                                ),
                                ".",
                                AST$(
                                  17,
                                  3457,
                                  14,
                                  0,
                                  "index"
                                )
                              ),
                              "=",
                              AST$(
                                17,
                                3457,
                                23,
                                0,
                                "value"
                              )
                            )
                          )
                        )
                      ),
                      AST$(
                        3,
                        3433,
                        68,
                        0,
                        AST$(
                          3,
                          3433,
                          68,
                          0,
                          AST$(
                            17,
                            3433,
                            68,
                            0,
                            "_Map_prototype"
                          ),
                          ".",
                          AST$(
                            9,
                            3459,
                            6,
                            0,
                            "delete"
                          )
                        ),
                        "=",
                        AST$(
                          16,
                          3459,
                          13,
                          0,
                          0,
                          [
                            AST$(
                              17,
                              3459,
                              14,
                              0,
                              "key"
                            )
                          ],
                          ["index", "keys"],
                          AST$(
                            4,
                            3460,
                            1,
                            0,
                            0,
                            AST$(
                              3,
                              3460,
                              1,
                              0,
                              AST$(
                                17,
                                3460,
                                8,
                                0,
                                "keys"
                              ),
                              "=",
                              AST$(
                                3,
                                3460,
                                15,
                                0,
                                AST$(25, 3460, 15, 0),
                                ".",
                                AST$(
                                  9,
                                  3460,
                                  17,
                                  0,
                                  "_keys"
                                )
                              )
                            ),
                            AST$(
                              3,
                              3461,
                              1,
                              0,
                              AST$(
                                17,
                                3461,
                                8,
                                0,
                                "index"
                              ),
                              "=",
                              AST$(
                                7,
                                3461,
                                16,
                                0,
                                AST$(
                                  17,
                                  3461,
                                  16,
                                  0,
                                  "__indexOfIdentical"
                                ),
                                0,
                                AST$(
                                  17,
                                  3461,
                                  38,
                                  0,
                                  "keys"
                                ),
                                AST$(
                                  17,
                                  3461,
                                  43,
                                  0,
                                  "key"
                                )
                              )
                            ),
                            AST$(
                              18,
                              3462,
                              1,
                              0,
                              AST$(
                                3,
                                3462,
                                7,
                                0,
                                AST$(
                                  17,
                                  3462,
                                  7,
                                  0,
                                  "index"
                                ),
                                "===",
                                AST$(
                                  9,
                                  3462,
                                  16,
                                  0,
                                  -1
                                )
                              ),
                              AST$(
                                23,
                                3463,
                                1,
                                0,
                                AST$(
                                  9,
                                  3463,
                                  1,
                                  0,
                                  false
                                )
                              ),
                              AST$(
                                4,
                                3465,
                                1,
                                0,
                                0,
                                AST$(
                                  7,
                                  3465,
                                  1,
                                  0,
                                  AST$(
                                    3,
                                    3465,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      3465,
                                      1,
                                      0,
                                      "keys"
                                    ),
                                    ".",
                                    AST$(
                                      9,
                                      3465,
                                      12,
                                      0,
                                      "splice"
                                    )
                                  ),
                                  0,
                                  AST$(
                                    17,
                                    3465,
                                    19,
                                    0,
                                    "index"
                                  ),
                                  AST$(
                                    9,
                                    3465,
                                    26,
                                    0,
                                    1
                                  )
                                ),
                                AST$(
                                  23,
                                  3466,
                                  1,
                                  0,
                                  AST$(
                                    7,
                                    3466,
                                    1,
                                    0,
                                    AST$(
                                      3,
                                      3466,
                                      1,
                                      0,
                                      AST$(
                                        3,
                                        3466,
                                        1,
                                        0,
                                        AST$(25, 3466, 1, 0),
                                        ".",
                                        AST$(
                                          9,
                                          3466,
                                          8,
                                          0,
                                          "_values"
                                        )
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3466,
                                        16,
                                        0,
                                        "splice"
                                      )
                                    ),
                                    0,
                                    AST$(
                                      17,
                                      3466,
                                      23,
                                      0,
                                      "index"
                                    ),
                                    AST$(
                                      9,
                                      3466,
                                      30,
                                      0,
                                      1
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      ),
                      AST$(
                        3,
                        3433,
                        68,
                        0,
                        AST$(
                          3,
                          3433,
                          68,
                          0,
                          AST$(
                            17,
                            3433,
                            68,
                            0,
                            "_Map_prototype"
                          ),
                          ".",
                          AST$(
                            9,
                            3468,
                            6,
                            0,
                            "keys"
                          )
                        ),
                        "=",
                        AST$(
                          16,
                          3468,
                          11,
                          0,
                          0,
                          0,
                          [
                            "_arr",
                            "_e",
                            "_i",
                            "_send",
                            "_state",
                            "_step",
                            "_this",
                            "_throw",
                            "key"
                          ],
                          AST$(
                            4,
                            3469,
                            1,
                            0,
                            0,
                            AST$(
                              3,
                              3469,
                              1,
                              0,
                              AST$(
                                17,
                                3469,
                                1,
                                0,
                                "_this"
                              ),
                              "=",
                              AST$(25, 3469, 1, 0)
                            ),
                            AST$(
                              3,
                              3468,
                              11,
                              0,
                              AST$(
                                17,
                                3468,
                                11,
                                0,
                                "_state"
                              ),
                              "=",
                              AST$(
                                9,
                                3468,
                                11,
                                0,
                                0
                              )
                            ),
                            AST$(
                              16,
                              3468,
                              11,
                              0,
                              AST$(
                                17,
                                3468,
                                11,
                                0,
                                "_close"
                              ),
                              0,
                              0,
                              AST$(
                                3,
                                3468,
                                11,
                                0,
                                AST$(
                                  17,
                                  3468,
                                  11,
                                  0,
                                  "_state"
                                ),
                                "=",
                                AST$(
                                  9,
                                  3468,
                                  11,
                                  0,
                                  3
                                )
                              )
                            ),
                            AST$(
                              16,
                              3468,
                              11,
                              0,
                              AST$(
                                17,
                                3468,
                                11,
                                0,
                                "_step"
                              ),
                              [
                                AST$(
                                  17,
                                  3468,
                                  11,
                                  0,
                                  "_received"
                                )
                              ],
                              0,
                              AST$(
                                14,
                                3468,
                                11,
                                0,
                                AST$(20, 3468, 11, 0),
                                AST$(
                                  9,
                                  3468,
                                  11,
                                  0,
                                  true
                                ),
                                AST$(20, 3468, 11, 0),
                                AST$(
                                  27,
                                  3468,
                                  11,
                                  0,
                                  0,
                                  AST$(
                                    17,
                                    3468,
                                    11,
                                    0,
                                    "_state"
                                  ),
                                  1,
                                  1,
                                  0,
                                  AST$(
                                    9,
                                    1,
                                    1,
                                    0,
                                    0
                                  ),
                                  AST$(
                                    4,
                                    1,
                                    1,
                                    0,
                                    0,
                                    AST$(
                                      3,
                                      3469,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3469,
                                        1,
                                        0,
                                        "_arr"
                                      ),
                                      "=",
                                      AST$(
                                        7,
                                        3469,
                                        1,
                                        0,
                                        AST$(
                                          17,
                                          3469,
                                          1,
                                          0,
                                          "__toArray"
                                        ),
                                        0,
                                        AST$(
                                          3,
                                          3469,
                                          15,
                                          0,
                                          AST$(
                                            17,
                                            3469,
                                            15,
                                            0,
                                            "_this"
                                          ),
                                          ".",
                                          AST$(
                                            9,
                                            3469,
                                            17,
                                            0,
                                            "_keys"
                                          )
                                        )
                                      )
                                    ),
                                    AST$(
                                      3,
                                      3469,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3469,
                                        1,
                                        0,
                                        "_i"
                                      ),
                                      "=",
                                      AST$(
                                        3,
                                        3469,
                                        1,
                                        0,
                                        AST$(
                                          17,
                                          3469,
                                          1,
                                          0,
                                          "_arr"
                                        ),
                                        ".",
                                        AST$(
                                          9,
                                          3469,
                                          1,
                                          0,
                                          "length"
                                        )
                                      )
                                    ),
                                    AST$(
                                      30,
                                      3469,
                                      1,
                                      0,
                                      "++",
                                      AST$(
                                        17,
                                        3468,
                                        11,
                                        0,
                                        "_state"
                                      )
                                    )
                                  ),
                                  3469,
                                  1,
                                  0,
                                  AST$(
                                    9,
                                    3469,
                                    1,
                                    0,
                                    1
                                  ),
                                  AST$(
                                    4,
                                    3469,
                                    1,
                                    0,
                                    0,
                                    AST$(
                                      3,
                                      3469,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3468,
                                        11,
                                        0,
                                        "_state"
                                      ),
                                      "=",
                                      AST$(
                                        19,
                                        3469,
                                        1,
                                        0,
                                        AST$(
                                          30,
                                          3469,
                                          1,
                                          0,
                                          "--post",
                                          AST$(
                                            17,
                                            3469,
                                            1,
                                            0,
                                            "_i"
                                          )
                                        ),
                                        AST$(
                                          9,
                                          3469,
                                          1,
                                          0,
                                          2
                                        ),
                                        AST$(
                                          9,
                                          3469,
                                          1,
                                          0,
                                          3
                                        )
                                      )
                                    ),
                                    AST$(6, 3469, 1, 0)
                                  ),
                                  3469,
                                  1,
                                  0,
                                  AST$(
                                    9,
                                    3469,
                                    1,
                                    0,
                                    2
                                  ),
                                  AST$(
                                    4,
                                    3469,
                                    1,
                                    0,
                                    0,
                                    AST$(
                                      3,
                                      3469,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3469,
                                        8,
                                        0,
                                        "key"
                                      ),
                                      "=",
                                      AST$(
                                        3,
                                        3469,
                                        1,
                                        0,
                                        AST$(
                                          17,
                                          3469,
                                          1,
                                          0,
                                          "_arr"
                                        ),
                                        ".",
                                        AST$(
                                          17,
                                          3469,
                                          1,
                                          0,
                                          "_i"
                                        )
                                      )
                                    ),
                                    AST$(
                                      3,
                                      3470,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3468,
                                        11,
                                        0,
                                        "_state"
                                      ),
                                      "=",
                                      AST$(
                                        9,
                                        3470,
                                        1,
                                        0,
                                        1
                                      )
                                    ),
                                    AST$(
                                      23,
                                      3470,
                                      1,
                                      0,
                                      AST$(
                                        21,
                                        3470,
                                        1,
                                        0,
                                        3470,
                                        1,
                                        void 0,
                                        "done",
                                        AST$(
                                          9,
                                          3470,
                                          1,
                                          0,
                                          false
                                        ),
                                        3470,
                                        1,
                                        void 0,
                                        "value",
                                        AST$(
                                          17,
                                          3470,
                                          12,
                                          0,
                                          "key"
                                        )
                                      )
                                    )
                                  ),
                                  3468,
                                  11,
                                  0,
                                  AST$(
                                    9,
                                    3468,
                                    11,
                                    0,
                                    3
                                  ),
                                  AST$(
                                    23,
                                    3468,
                                    11,
                                    0,
                                    AST$(
                                      21,
                                      3468,
                                      11,
                                      0,
                                      3468,
                                      11,
                                      void 0,
                                      "done",
                                      AST$(
                                        9,
                                        3468,
                                        11,
                                        0,
                                        true
                                      ),
                                      3468,
                                      11,
                                      void 0,
                                      "value",
                                      AST$(9, 3468, 11, 0)
                                    )
                                  ),
                                  AST$(
                                    26,
                                    3468,
                                    11,
                                    0,
                                    AST$(
                                      7,
                                      3468,
                                      11,
                                      0,
                                      AST$(
                                        17,
                                        3468,
                                        11,
                                        0,
                                        "Error"
                                      ),
                                      0,
                                      AST$(
                                        3,
                                        3468,
                                        11,
                                        0,
                                        AST$(
                                          9,
                                          3468,
                                          11,
                                          0,
                                          "Unknown state: "
                                        ),
                                        "+",
                                        AST$(
                                          17,
                                          3468,
                                          11,
                                          0,
                                          "_state"
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            ),
                            AST$(
                              16,
                              3468,
                              11,
                              0,
                              AST$(
                                17,
                                3468,
                                11,
                                0,
                                "_throw"
                              ),
                              [
                                AST$(
                                  17,
                                  3468,
                                  11,
                                  0,
                                  "_e"
                                )
                              ],
                              0,
                              AST$(
                                4,
                                3468,
                                11,
                                0,
                                0,
                                AST$(
                                  7,
                                  3468,
                                  11,
                                  0,
                                  AST$(
                                    17,
                                    3468,
                                    11,
                                    0,
                                    "_close"
                                  ),
                                  0
                                ),
                                AST$(
                                  26,
                                  3468,
                                  11,
                                  0,
                                  AST$(
                                    17,
                                    3468,
                                    11,
                                    0,
                                    "_e"
                                  )
                                )
                              )
                            ),
                            AST$(
                              16,
                              3468,
                              11,
                              0,
                              AST$(
                                17,
                                3468,
                                11,
                                0,
                                "_send"
                              ),
                              [
                                AST$(
                                  17,
                                  3468,
                                  11,
                                  0,
                                  "_received"
                                )
                              ],
                              0,
                              AST$(
                                28,
                                3468,
                                11,
                                0,
                                AST$(
                                  23,
                                  3468,
                                  11,
                                  0,
                                  AST$(
                                    7,
                                    3468,
                                    11,
                                    0,
                                    AST$(
                                      17,
                                      3468,
                                      11,
                                      0,
                                      "_step"
                                    ),
                                    0,
                                    AST$(
                                      17,
                                      3468,
                                      11,
                                      0,
                                      "_received"
                                    )
                                  )
                                ),
                                AST$(
                                  17,
                                  3468,
                                  11,
                                  0,
                                  "_e"
                                ),
                                AST$(
                                  7,
                                  3468,
                                  11,
                                  0,
                                  AST$(
                                    17,
                                    3468,
                                    11,
                                    0,
                                    "_throw"
                                  ),
                                  0,
                                  AST$(
                                    17,
                                    3468,
                                    11,
                                    0,
                                    "_e"
                                  )
                                )
                              )
                            ),
                            AST$(
                              23,
                              3468,
                              11,
                              0,
                              AST$(
                                21,
                                3468,
                                11,
                                0,
                                3468,
                                11,
                                void 0,
                                "close",
                                AST$(
                                  17,
                                  3468,
                                  11,
                                  0,
                                  "_close"
                                ),
                                3468,
                                11,
                                void 0,
                                "iterator",
                                AST$(
                                  16,
                                  3468,
                                  11,
                                  0,
                                  0,
                                  0,
                                  0,
                                  AST$(
                                    23,
                                    3468,
                                    11,
                                    0,
                                    AST$(25, 3468, 11, 0)
                                  )
                                ),
                                3468,
                                11,
                                void 0,
                                "next",
                                AST$(
                                  16,
                                  3468,
                                  11,
                                  0,
                                  0,
                                  0,
                                  0,
                                  AST$(
                                    23,
                                    3468,
                                    11,
                                    0,
                                    AST$(
                                      7,
                                      3468,
                                      11,
                                      0,
                                      AST$(
                                        17,
                                        3468,
                                        11,
                                        0,
                                        "_send"
                                      ),
                                      0,
                                      AST$(9, 3468, 11, 0)
                                    )
                                  )
                                ),
                                3468,
                                11,
                                void 0,
                                "send",
                                AST$(
                                  17,
                                  3468,
                                  11,
                                  0,
                                  "_send"
                                ),
                                3468,
                                11,
                                void 0,
                                "throw",
                                AST$(
                                  16,
                                  3468,
                                  11,
                                  0,
                                  0,
                                  [
                                    AST$(
                                      17,
                                      3468,
                                      11,
                                      0,
                                      "_e"
                                    )
                                  ],
                                  0,
                                  AST$(
                                    4,
                                    3468,
                                    11,
                                    0,
                                    0,
                                    AST$(
                                      7,
                                      3468,
                                      11,
                                      0,
                                      AST$(
                                        17,
                                        3468,
                                        11,
                                        0,
                                        "_throw"
                                      ),
                                      0,
                                      AST$(
                                        17,
                                        3468,
                                        11,
                                        0,
                                        "_e"
                                      )
                                    ),
                                    AST$(
                                      23,
                                      3468,
                                      11,
                                      0,
                                      AST$(
                                        7,
                                        3468,
                                        11,
                                        0,
                                        AST$(
                                          17,
                                          3468,
                                          11,
                                          0,
                                          "_send"
                                        ),
                                        0,
                                        AST$(9, 3468, 11, 0)
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      ),
                      AST$(
                        3,
                        3433,
                        68,
                        0,
                        AST$(
                          3,
                          3433,
                          68,
                          0,
                          AST$(
                            17,
                            3433,
                            68,
                            0,
                            "_Map_prototype"
                          ),
                          ".",
                          AST$(
                            9,
                            3472,
                            6,
                            0,
                            "values"
                          )
                        ),
                        "=",
                        AST$(
                          16,
                          3472,
                          13,
                          0,
                          0,
                          0,
                          [
                            "_arr",
                            "_e",
                            "_i",
                            "_send",
                            "_state",
                            "_step",
                            "_this",
                            "_throw",
                            "value"
                          ],
                          AST$(
                            4,
                            3473,
                            1,
                            0,
                            0,
                            AST$(
                              3,
                              3473,
                              1,
                              0,
                              AST$(
                                17,
                                3473,
                                1,
                                0,
                                "_this"
                              ),
                              "=",
                              AST$(25, 3473, 1, 0)
                            ),
                            AST$(
                              3,
                              3472,
                              13,
                              0,
                              AST$(
                                17,
                                3472,
                                13,
                                0,
                                "_state"
                              ),
                              "=",
                              AST$(
                                9,
                                3472,
                                13,
                                0,
                                0
                              )
                            ),
                            AST$(
                              16,
                              3472,
                              13,
                              0,
                              AST$(
                                17,
                                3472,
                                13,
                                0,
                                "_close"
                              ),
                              0,
                              0,
                              AST$(
                                3,
                                3472,
                                13,
                                0,
                                AST$(
                                  17,
                                  3472,
                                  13,
                                  0,
                                  "_state"
                                ),
                                "=",
                                AST$(
                                  9,
                                  3472,
                                  13,
                                  0,
                                  3
                                )
                              )
                            ),
                            AST$(
                              16,
                              3472,
                              13,
                              0,
                              AST$(
                                17,
                                3472,
                                13,
                                0,
                                "_step"
                              ),
                              [
                                AST$(
                                  17,
                                  3472,
                                  13,
                                  0,
                                  "_received"
                                )
                              ],
                              0,
                              AST$(
                                14,
                                3472,
                                13,
                                0,
                                AST$(20, 3472, 13, 0),
                                AST$(
                                  9,
                                  3472,
                                  13,
                                  0,
                                  true
                                ),
                                AST$(20, 3472, 13, 0),
                                AST$(
                                  27,
                                  3472,
                                  13,
                                  0,
                                  0,
                                  AST$(
                                    17,
                                    3472,
                                    13,
                                    0,
                                    "_state"
                                  ),
                                  1,
                                  1,
                                  0,
                                  AST$(
                                    9,
                                    1,
                                    1,
                                    0,
                                    0
                                  ),
                                  AST$(
                                    4,
                                    1,
                                    1,
                                    0,
                                    0,
                                    AST$(
                                      3,
                                      3473,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3473,
                                        1,
                                        0,
                                        "_arr"
                                      ),
                                      "=",
                                      AST$(
                                        7,
                                        3473,
                                        1,
                                        0,
                                        AST$(
                                          17,
                                          3473,
                                          1,
                                          0,
                                          "__toArray"
                                        ),
                                        0,
                                        AST$(
                                          3,
                                          3473,
                                          17,
                                          0,
                                          AST$(
                                            17,
                                            3473,
                                            17,
                                            0,
                                            "_this"
                                          ),
                                          ".",
                                          AST$(
                                            9,
                                            3473,
                                            19,
                                            0,
                                            "_values"
                                          )
                                        )
                                      )
                                    ),
                                    AST$(
                                      3,
                                      3473,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3473,
                                        1,
                                        0,
                                        "_i"
                                      ),
                                      "=",
                                      AST$(
                                        3,
                                        3473,
                                        1,
                                        0,
                                        AST$(
                                          17,
                                          3473,
                                          1,
                                          0,
                                          "_arr"
                                        ),
                                        ".",
                                        AST$(
                                          9,
                                          3473,
                                          1,
                                          0,
                                          "length"
                                        )
                                      )
                                    ),
                                    AST$(
                                      30,
                                      3473,
                                      1,
                                      0,
                                      "++",
                                      AST$(
                                        17,
                                        3472,
                                        13,
                                        0,
                                        "_state"
                                      )
                                    )
                                  ),
                                  3473,
                                  1,
                                  0,
                                  AST$(
                                    9,
                                    3473,
                                    1,
                                    0,
                                    1
                                  ),
                                  AST$(
                                    4,
                                    3473,
                                    1,
                                    0,
                                    0,
                                    AST$(
                                      3,
                                      3473,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3472,
                                        13,
                                        0,
                                        "_state"
                                      ),
                                      "=",
                                      AST$(
                                        19,
                                        3473,
                                        1,
                                        0,
                                        AST$(
                                          30,
                                          3473,
                                          1,
                                          0,
                                          "--post",
                                          AST$(
                                            17,
                                            3473,
                                            1,
                                            0,
                                            "_i"
                                          )
                                        ),
                                        AST$(
                                          9,
                                          3473,
                                          1,
                                          0,
                                          2
                                        ),
                                        AST$(
                                          9,
                                          3473,
                                          1,
                                          0,
                                          3
                                        )
                                      )
                                    ),
                                    AST$(6, 3473, 1, 0)
                                  ),
                                  3473,
                                  1,
                                  0,
                                  AST$(
                                    9,
                                    3473,
                                    1,
                                    0,
                                    2
                                  ),
                                  AST$(
                                    4,
                                    3473,
                                    1,
                                    0,
                                    0,
                                    AST$(
                                      3,
                                      3473,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3473,
                                        8,
                                        0,
                                        "value"
                                      ),
                                      "=",
                                      AST$(
                                        3,
                                        3473,
                                        1,
                                        0,
                                        AST$(
                                          17,
                                          3473,
                                          1,
                                          0,
                                          "_arr"
                                        ),
                                        ".",
                                        AST$(
                                          17,
                                          3473,
                                          1,
                                          0,
                                          "_i"
                                        )
                                      )
                                    ),
                                    AST$(
                                      3,
                                      3474,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3472,
                                        13,
                                        0,
                                        "_state"
                                      ),
                                      "=",
                                      AST$(
                                        9,
                                        3474,
                                        1,
                                        0,
                                        1
                                      )
                                    ),
                                    AST$(
                                      23,
                                      3474,
                                      1,
                                      0,
                                      AST$(
                                        21,
                                        3474,
                                        1,
                                        0,
                                        3474,
                                        1,
                                        void 0,
                                        "done",
                                        AST$(
                                          9,
                                          3474,
                                          1,
                                          0,
                                          false
                                        ),
                                        3474,
                                        1,
                                        void 0,
                                        "value",
                                        AST$(
                                          17,
                                          3474,
                                          12,
                                          0,
                                          "value"
                                        )
                                      )
                                    )
                                  ),
                                  3472,
                                  13,
                                  0,
                                  AST$(
                                    9,
                                    3472,
                                    13,
                                    0,
                                    3
                                  ),
                                  AST$(
                                    23,
                                    3472,
                                    13,
                                    0,
                                    AST$(
                                      21,
                                      3472,
                                      13,
                                      0,
                                      3472,
                                      13,
                                      void 0,
                                      "done",
                                      AST$(
                                        9,
                                        3472,
                                        13,
                                        0,
                                        true
                                      ),
                                      3472,
                                      13,
                                      void 0,
                                      "value",
                                      AST$(9, 3472, 13, 0)
                                    )
                                  ),
                                  AST$(
                                    26,
                                    3472,
                                    13,
                                    0,
                                    AST$(
                                      7,
                                      3472,
                                      13,
                                      0,
                                      AST$(
                                        17,
                                        3472,
                                        13,
                                        0,
                                        "Error"
                                      ),
                                      0,
                                      AST$(
                                        3,
                                        3472,
                                        13,
                                        0,
                                        AST$(
                                          9,
                                          3472,
                                          13,
                                          0,
                                          "Unknown state: "
                                        ),
                                        "+",
                                        AST$(
                                          17,
                                          3472,
                                          13,
                                          0,
                                          "_state"
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            ),
                            AST$(
                              16,
                              3472,
                              13,
                              0,
                              AST$(
                                17,
                                3472,
                                13,
                                0,
                                "_throw"
                              ),
                              [
                                AST$(
                                  17,
                                  3472,
                                  13,
                                  0,
                                  "_e"
                                )
                              ],
                              0,
                              AST$(
                                4,
                                3472,
                                13,
                                0,
                                0,
                                AST$(
                                  7,
                                  3472,
                                  13,
                                  0,
                                  AST$(
                                    17,
                                    3472,
                                    13,
                                    0,
                                    "_close"
                                  ),
                                  0
                                ),
                                AST$(
                                  26,
                                  3472,
                                  13,
                                  0,
                                  AST$(
                                    17,
                                    3472,
                                    13,
                                    0,
                                    "_e"
                                  )
                                )
                              )
                            ),
                            AST$(
                              16,
                              3472,
                              13,
                              0,
                              AST$(
                                17,
                                3472,
                                13,
                                0,
                                "_send"
                              ),
                              [
                                AST$(
                                  17,
                                  3472,
                                  13,
                                  0,
                                  "_received"
                                )
                              ],
                              0,
                              AST$(
                                28,
                                3472,
                                13,
                                0,
                                AST$(
                                  23,
                                  3472,
                                  13,
                                  0,
                                  AST$(
                                    7,
                                    3472,
                                    13,
                                    0,
                                    AST$(
                                      17,
                                      3472,
                                      13,
                                      0,
                                      "_step"
                                    ),
                                    0,
                                    AST$(
                                      17,
                                      3472,
                                      13,
                                      0,
                                      "_received"
                                    )
                                  )
                                ),
                                AST$(
                                  17,
                                  3472,
                                  13,
                                  0,
                                  "_e"
                                ),
                                AST$(
                                  7,
                                  3472,
                                  13,
                                  0,
                                  AST$(
                                    17,
                                    3472,
                                    13,
                                    0,
                                    "_throw"
                                  ),
                                  0,
                                  AST$(
                                    17,
                                    3472,
                                    13,
                                    0,
                                    "_e"
                                  )
                                )
                              )
                            ),
                            AST$(
                              23,
                              3472,
                              13,
                              0,
                              AST$(
                                21,
                                3472,
                                13,
                                0,
                                3472,
                                13,
                                void 0,
                                "close",
                                AST$(
                                  17,
                                  3472,
                                  13,
                                  0,
                                  "_close"
                                ),
                                3472,
                                13,
                                void 0,
                                "iterator",
                                AST$(
                                  16,
                                  3472,
                                  13,
                                  0,
                                  0,
                                  0,
                                  0,
                                  AST$(
                                    23,
                                    3472,
                                    13,
                                    0,
                                    AST$(25, 3472, 13, 0)
                                  )
                                ),
                                3472,
                                13,
                                void 0,
                                "next",
                                AST$(
                                  16,
                                  3472,
                                  13,
                                  0,
                                  0,
                                  0,
                                  0,
                                  AST$(
                                    23,
                                    3472,
                                    13,
                                    0,
                                    AST$(
                                      7,
                                      3472,
                                      13,
                                      0,
                                      AST$(
                                        17,
                                        3472,
                                        13,
                                        0,
                                        "_send"
                                      ),
                                      0,
                                      AST$(9, 3472, 13, 0)
                                    )
                                  )
                                ),
                                3472,
                                13,
                                void 0,
                                "send",
                                AST$(
                                  17,
                                  3472,
                                  13,
                                  0,
                                  "_send"
                                ),
                                3472,
                                13,
                                void 0,
                                "throw",
                                AST$(
                                  16,
                                  3472,
                                  13,
                                  0,
                                  0,
                                  [
                                    AST$(
                                      17,
                                      3472,
                                      13,
                                      0,
                                      "_e"
                                    )
                                  ],
                                  0,
                                  AST$(
                                    4,
                                    3472,
                                    13,
                                    0,
                                    0,
                                    AST$(
                                      7,
                                      3472,
                                      13,
                                      0,
                                      AST$(
                                        17,
                                        3472,
                                        13,
                                        0,
                                        "_throw"
                                      ),
                                      0,
                                      AST$(
                                        17,
                                        3472,
                                        13,
                                        0,
                                        "_e"
                                      )
                                    ),
                                    AST$(
                                      23,
                                      3472,
                                      13,
                                      0,
                                      AST$(
                                        7,
                                        3472,
                                        13,
                                        0,
                                        AST$(
                                          17,
                                          3472,
                                          13,
                                          0,
                                          "_send"
                                        ),
                                        0,
                                        AST$(9, 3472, 13, 0)
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      ),
                      AST$(
                        3,
                        3433,
                        68,
                        0,
                        AST$(
                          3,
                          3433,
                          68,
                          0,
                          AST$(
                            17,
                            3433,
                            68,
                            0,
                            "_Map_prototype"
                          ),
                          ".",
                          AST$(
                            9,
                            3476,
                            6,
                            0,
                            "items"
                          )
                        ),
                        "=",
                        AST$(
                          16,
                          3476,
                          12,
                          0,
                          0,
                          0,
                          [
                            "_arr",
                            "_e",
                            "_send",
                            "_state",
                            "_step",
                            "_this",
                            "_throw",
                            "i",
                            "key",
                            "values"
                          ],
                          AST$(
                            4,
                            3477,
                            1,
                            0,
                            0,
                            AST$(
                              3,
                              3477,
                              1,
                              0,
                              AST$(
                                17,
                                3477,
                                1,
                                0,
                                "_this"
                              ),
                              "=",
                              AST$(25, 3477, 1, 0)
                            ),
                            AST$(
                              3,
                              3476,
                              12,
                              0,
                              AST$(
                                17,
                                3476,
                                12,
                                0,
                                "_state"
                              ),
                              "=",
                              AST$(
                                9,
                                3476,
                                12,
                                0,
                                0
                              )
                            ),
                            AST$(
                              16,
                              3476,
                              12,
                              0,
                              AST$(
                                17,
                                3476,
                                12,
                                0,
                                "_close"
                              ),
                              0,
                              0,
                              AST$(
                                3,
                                3476,
                                12,
                                0,
                                AST$(
                                  17,
                                  3476,
                                  12,
                                  0,
                                  "_state"
                                ),
                                "=",
                                AST$(
                                  9,
                                  3476,
                                  12,
                                  0,
                                  3
                                )
                              )
                            ),
                            AST$(
                              16,
                              3476,
                              12,
                              0,
                              AST$(
                                17,
                                3476,
                                12,
                                0,
                                "_step"
                              ),
                              [
                                AST$(
                                  17,
                                  3476,
                                  12,
                                  0,
                                  "_received"
                                )
                              ],
                              0,
                              AST$(
                                14,
                                3476,
                                12,
                                0,
                                AST$(20, 3476, 12, 0),
                                AST$(
                                  9,
                                  3476,
                                  12,
                                  0,
                                  true
                                ),
                                AST$(20, 3476, 12, 0),
                                AST$(
                                  27,
                                  3476,
                                  12,
                                  0,
                                  0,
                                  AST$(
                                    17,
                                    3476,
                                    12,
                                    0,
                                    "_state"
                                  ),
                                  3477,
                                  1,
                                  0,
                                  AST$(
                                    9,
                                    3477,
                                    1,
                                    0,
                                    0
                                  ),
                                  AST$(
                                    4,
                                    3477,
                                    1,
                                    0,
                                    0,
                                    AST$(
                                      3,
                                      3477,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3477,
                                        8,
                                        0,
                                        "values"
                                      ),
                                      "=",
                                      AST$(
                                        3,
                                        3477,
                                        17,
                                        0,
                                        AST$(
                                          17,
                                          3477,
                                          17,
                                          0,
                                          "_this"
                                        ),
                                        ".",
                                        AST$(
                                          9,
                                          3477,
                                          19,
                                          0,
                                          "_values"
                                        )
                                      )
                                    ),
                                    AST$(
                                      3,
                                      3478,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3478,
                                        1,
                                        0,
                                        "_arr"
                                      ),
                                      "=",
                                      AST$(
                                        7,
                                        3478,
                                        1,
                                        0,
                                        AST$(
                                          17,
                                          3478,
                                          1,
                                          0,
                                          "__toArray"
                                        ),
                                        0,
                                        AST$(
                                          3,
                                          3478,
                                          18,
                                          0,
                                          AST$(
                                            17,
                                            3478,
                                            18,
                                            0,
                                            "_this"
                                          ),
                                          ".",
                                          AST$(
                                            9,
                                            3478,
                                            20,
                                            0,
                                            "_keys"
                                          )
                                        )
                                      )
                                    ),
                                    AST$(
                                      3,
                                      3478,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3478,
                                        13,
                                        0,
                                        "i"
                                      ),
                                      "=",
                                      AST$(
                                        3,
                                        3478,
                                        1,
                                        0,
                                        AST$(
                                          17,
                                          3478,
                                          1,
                                          0,
                                          "_arr"
                                        ),
                                        ".",
                                        AST$(
                                          9,
                                          3478,
                                          1,
                                          0,
                                          "length"
                                        )
                                      )
                                    ),
                                    AST$(
                                      30,
                                      3478,
                                      1,
                                      0,
                                      "++",
                                      AST$(
                                        17,
                                        3476,
                                        12,
                                        0,
                                        "_state"
                                      )
                                    )
                                  ),
                                  3478,
                                  1,
                                  0,
                                  AST$(
                                    9,
                                    3478,
                                    1,
                                    0,
                                    1
                                  ),
                                  AST$(
                                    4,
                                    3478,
                                    1,
                                    0,
                                    0,
                                    AST$(
                                      3,
                                      3478,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3476,
                                        12,
                                        0,
                                        "_state"
                                      ),
                                      "=",
                                      AST$(
                                        19,
                                        3478,
                                        1,
                                        0,
                                        AST$(
                                          30,
                                          3478,
                                          1,
                                          0,
                                          "--post",
                                          AST$(
                                            17,
                                            3478,
                                            13,
                                            0,
                                            "i"
                                          )
                                        ),
                                        AST$(
                                          9,
                                          3478,
                                          1,
                                          0,
                                          2
                                        ),
                                        AST$(
                                          9,
                                          3478,
                                          1,
                                          0,
                                          3
                                        )
                                      )
                                    ),
                                    AST$(6, 3478, 1, 0)
                                  ),
                                  3478,
                                  1,
                                  0,
                                  AST$(
                                    9,
                                    3478,
                                    1,
                                    0,
                                    2
                                  ),
                                  AST$(
                                    4,
                                    3478,
                                    1,
                                    0,
                                    0,
                                    AST$(
                                      3,
                                      3478,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3478,
                                        8,
                                        0,
                                        "key"
                                      ),
                                      "=",
                                      AST$(
                                        3,
                                        3478,
                                        1,
                                        0,
                                        AST$(
                                          17,
                                          3478,
                                          1,
                                          0,
                                          "_arr"
                                        ),
                                        ".",
                                        AST$(
                                          17,
                                          3478,
                                          13,
                                          0,
                                          "i"
                                        )
                                      )
                                    ),
                                    AST$(
                                      3,
                                      3479,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3476,
                                        12,
                                        0,
                                        "_state"
                                      ),
                                      "=",
                                      AST$(
                                        9,
                                        3479,
                                        1,
                                        0,
                                        1
                                      )
                                    ),
                                    AST$(
                                      23,
                                      3479,
                                      1,
                                      0,
                                      AST$(
                                        21,
                                        3479,
                                        1,
                                        0,
                                        3479,
                                        1,
                                        void 0,
                                        "done",
                                        AST$(
                                          9,
                                          3479,
                                          1,
                                          0,
                                          false
                                        ),
                                        3479,
                                        1,
                                        void 0,
                                        "value",
                                        AST$(
                                          2,
                                          3479,
                                          12,
                                          0,
                                          AST$(
                                            17,
                                            3479,
                                            14,
                                            0,
                                            "key"
                                          ),
                                          AST$(
                                            3,
                                            3479,
                                            18,
                                            0,
                                            AST$(
                                              17,
                                              3479,
                                              18,
                                              0,
                                              "values"
                                            ),
                                            ".",
                                            AST$(
                                              17,
                                              3479,
                                              26,
                                              0,
                                              "i"
                                            )
                                          )
                                        )
                                      )
                                    )
                                  ),
                                  3476,
                                  12,
                                  0,
                                  AST$(
                                    9,
                                    3476,
                                    12,
                                    0,
                                    3
                                  ),
                                  AST$(
                                    23,
                                    3476,
                                    12,
                                    0,
                                    AST$(
                                      21,
                                      3476,
                                      12,
                                      0,
                                      3476,
                                      12,
                                      void 0,
                                      "done",
                                      AST$(
                                        9,
                                        3476,
                                        12,
                                        0,
                                        true
                                      ),
                                      3476,
                                      12,
                                      void 0,
                                      "value",
                                      AST$(9, 3476, 12, 0)
                                    )
                                  ),
                                  AST$(
                                    26,
                                    3476,
                                    12,
                                    0,
                                    AST$(
                                      7,
                                      3476,
                                      12,
                                      0,
                                      AST$(
                                        17,
                                        3476,
                                        12,
                                        0,
                                        "Error"
                                      ),
                                      0,
                                      AST$(
                                        3,
                                        3476,
                                        12,
                                        0,
                                        AST$(
                                          9,
                                          3476,
                                          12,
                                          0,
                                          "Unknown state: "
                                        ),
                                        "+",
                                        AST$(
                                          17,
                                          3476,
                                          12,
                                          0,
                                          "_state"
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            ),
                            AST$(
                              16,
                              3476,
                              12,
                              0,
                              AST$(
                                17,
                                3476,
                                12,
                                0,
                                "_throw"
                              ),
                              [
                                AST$(
                                  17,
                                  3476,
                                  12,
                                  0,
                                  "_e"
                                )
                              ],
                              0,
                              AST$(
                                4,
                                3476,
                                12,
                                0,
                                0,
                                AST$(
                                  7,
                                  3476,
                                  12,
                                  0,
                                  AST$(
                                    17,
                                    3476,
                                    12,
                                    0,
                                    "_close"
                                  ),
                                  0
                                ),
                                AST$(
                                  26,
                                  3476,
                                  12,
                                  0,
                                  AST$(
                                    17,
                                    3476,
                                    12,
                                    0,
                                    "_e"
                                  )
                                )
                              )
                            ),
                            AST$(
                              16,
                              3476,
                              12,
                              0,
                              AST$(
                                17,
                                3476,
                                12,
                                0,
                                "_send"
                              ),
                              [
                                AST$(
                                  17,
                                  3476,
                                  12,
                                  0,
                                  "_received"
                                )
                              ],
                              0,
                              AST$(
                                28,
                                3476,
                                12,
                                0,
                                AST$(
                                  23,
                                  3476,
                                  12,
                                  0,
                                  AST$(
                                    7,
                                    3476,
                                    12,
                                    0,
                                    AST$(
                                      17,
                                      3476,
                                      12,
                                      0,
                                      "_step"
                                    ),
                                    0,
                                    AST$(
                                      17,
                                      3476,
                                      12,
                                      0,
                                      "_received"
                                    )
                                  )
                                ),
                                AST$(
                                  17,
                                  3476,
                                  12,
                                  0,
                                  "_e"
                                ),
                                AST$(
                                  7,
                                  3476,
                                  12,
                                  0,
                                  AST$(
                                    17,
                                    3476,
                                    12,
                                    0,
                                    "_throw"
                                  ),
                                  0,
                                  AST$(
                                    17,
                                    3476,
                                    12,
                                    0,
                                    "_e"
                                  )
                                )
                              )
                            ),
                            AST$(
                              23,
                              3476,
                              12,
                              0,
                              AST$(
                                21,
                                3476,
                                12,
                                0,
                                3476,
                                12,
                                void 0,
                                "close",
                                AST$(
                                  17,
                                  3476,
                                  12,
                                  0,
                                  "_close"
                                ),
                                3476,
                                12,
                                void 0,
                                "iterator",
                                AST$(
                                  16,
                                  3476,
                                  12,
                                  0,
                                  0,
                                  0,
                                  0,
                                  AST$(
                                    23,
                                    3476,
                                    12,
                                    0,
                                    AST$(25, 3476, 12, 0)
                                  )
                                ),
                                3476,
                                12,
                                void 0,
                                "next",
                                AST$(
                                  16,
                                  3476,
                                  12,
                                  0,
                                  0,
                                  0,
                                  0,
                                  AST$(
                                    23,
                                    3476,
                                    12,
                                    0,
                                    AST$(
                                      7,
                                      3476,
                                      12,
                                      0,
                                      AST$(
                                        17,
                                        3476,
                                        12,
                                        0,
                                        "_send"
                                      ),
                                      0,
                                      AST$(9, 3476, 12, 0)
                                    )
                                  )
                                ),
                                3476,
                                12,
                                void 0,
                                "send",
                                AST$(
                                  17,
                                  3476,
                                  12,
                                  0,
                                  "_send"
                                ),
                                3476,
                                12,
                                void 0,
                                "throw",
                                AST$(
                                  16,
                                  3476,
                                  12,
                                  0,
                                  0,
                                  [
                                    AST$(
                                      17,
                                      3476,
                                      12,
                                      0,
                                      "_e"
                                    )
                                  ],
                                  0,
                                  AST$(
                                    4,
                                    3476,
                                    12,
                                    0,
                                    0,
                                    AST$(
                                      7,
                                      3476,
                                      12,
                                      0,
                                      AST$(
                                        17,
                                        3476,
                                        12,
                                        0,
                                        "_throw"
                                      ),
                                      0,
                                      AST$(
                                        17,
                                        3476,
                                        12,
                                        0,
                                        "_e"
                                      )
                                    ),
                                    AST$(
                                      23,
                                      3476,
                                      12,
                                      0,
                                      AST$(
                                        7,
                                        3476,
                                        12,
                                        0,
                                        AST$(
                                          17,
                                          3476,
                                          12,
                                          0,
                                          "_send"
                                        ),
                                        0,
                                        AST$(9, 3476, 12, 0)
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      ),
                      AST$(
                        3,
                        3433,
                        68,
                        0,
                        AST$(
                          3,
                          3433,
                          68,
                          0,
                          AST$(
                            17,
                            3433,
                            68,
                            0,
                            "_Map_prototype"
                          ),
                          ".",
                          AST$(
                            9,
                            3480,
                            6,
                            0,
                            "iterator"
                          )
                        ),
                        "=",
                        AST$(
                          3,
                          3480,
                          17,
                          0,
                          AST$(
                            3,
                            3480,
                            17,
                            0,
                            AST$(
                              17,
                              3480,
                              17,
                              0,
                              "Map"
                            ),
                            ".",
                            AST$(
                              9,
                              3480,
                              17,
                              0,
                              "prototype"
                            )
                          ),
                          ".",
                          AST$(
                            9,
                            3480,
                            23,
                            0,
                            "items"
                          )
                        )
                      ),
                      AST$(
                        23,
                        3433,
                        68,
                        0,
                        AST$(
                          17,
                          3433,
                          74,
                          0,
                          "Map"
                        )
                      )
                    )
                  ),
                  0
                )
              )
            ),
            type: TYPE$.any,
            dependencies: [
              "__create",
              "__indexOfIdentical",
              "__iter",
              "__toArray",
              "GLOBAL"
            ]
          },
          Set: {
            helper: AST$(
              19,
              3482,
              20,
              0,
              AST$(
                3,
                3482,
                23,
                0,
                AST$(
                  30,
                  3482,
                  23,
                  0,
                  "typeof",
                  AST$(
                    3,
                    3482,
                    36,
                    0,
                    AST$(
                      17,
                      3482,
                      36,
                      0,
                      "GLOBAL"
                    ),
                    ".",
                    AST$(
                      9,
                      3482,
                      44,
                      0,
                      "Set"
                    )
                  )
                ),
                "===",
                AST$(
                  9,
                  3482,
                  23,
                  0,
                  "function"
                )
              ),
              AST$(
                3,
                3482,
                52,
                0,
                AST$(
                  17,
                  3482,
                  52,
                  0,
                  "GLOBAL"
                ),
                ".",
                AST$(
                  9,
                  3482,
                  60,
                  0,
                  "Set"
                )
              ),
              AST$(
                3,
                3482,
                68,
                0,
                AST$(
                  17,
                  3482,
                  74,
                  0,
                  "Set"
                ),
                "=",
                AST$(
                  7,
                  3482,
                  68,
                  0,
                  AST$(
                    16,
                    3482,
                    68,
                    0,
                    0,
                    0,
                    ["_Set_prototype"],
                    AST$(
                      4,
                      3482,
                      68,
                      0,
                      0,
                      AST$(
                        16,
                        3482,
                        68,
                        0,
                        AST$(
                          17,
                          3482,
                          74,
                          0,
                          "Set"
                        ),
                        [
                          AST$(
                            17,
                            3483,
                            19,
                            0,
                            "iterable"
                          )
                        ],
                        ["_item", "_iter", "_this", "item"],
                        AST$(
                          4,
                          3484,
                          1,
                          0,
                          0,
                          AST$(
                            3,
                            3484,
                            1,
                            0,
                            AST$(
                              17,
                              3484,
                              1,
                              0,
                              "_this"
                            ),
                            "=",
                            AST$(
                              19,
                              3482,
                              68,
                              0,
                              AST$(
                                3,
                                3482,
                                68,
                                0,
                                AST$(
                                  13,
                                  3482,
                                  68,
                                  0,
                                  AST$(
                                    9,
                                    3482,
                                    68,
                                    0,
                                    "this"
                                  )
                                ),
                                "instanceof",
                                AST$(
                                  17,
                                  3482,
                                  74,
                                  0,
                                  "Set"
                                )
                              ),
                              AST$(
                                13,
                                3482,
                                68,
                                0,
                                AST$(
                                  9,
                                  3482,
                                  68,
                                  0,
                                  "this"
                                )
                              ),
                              AST$(
                                7,
                                3482,
                                68,
                                0,
                                AST$(
                                  17,
                                  3482,
                                  68,
                                  0,
                                  "__create"
                                ),
                                0,
                                AST$(
                                  17,
                                  3482,
                                  68,
                                  0,
                                  "_Set_prototype"
                                )
                              )
                            )
                          ),
                          AST$(
                            3,
                            3484,
                            1,
                            0,
                            AST$(
                              3,
                              3484,
                              1,
                              0,
                              AST$(
                                17,
                                3484,
                                1,
                                0,
                                "_this"
                              ),
                              ".",
                              AST$(
                                9,
                                3484,
                                6,
                                0,
                                "_items"
                              )
                            ),
                            "=",
                            AST$(2, 3484, 15, 0)
                          ),
                          AST$(
                            18,
                            3485,
                            1,
                            0,
                            AST$(
                              3,
                              3485,
                              7,
                              0,
                              AST$(
                                17,
                                3485,
                                7,
                                0,
                                "iterable"
                              ),
                              "!=",
                              AST$(
                                9,
                                1,
                                1,
                                0,
                                null
                              )
                            ),
                            AST$(
                              29,
                              3486,
                              1,
                              0,
                              AST$(
                                14,
                                3486,
                                1,
                                0,
                                AST$(
                                  3,
                                  3486,
                                  1,
                                  0,
                                  AST$(
                                    17,
                                    3486,
                                    1,
                                    0,
                                    "_iter"
                                  ),
                                  "=",
                                  AST$(
                                    7,
                                    3486,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      3486,
                                      1,
                                      0,
                                      "__iter"
                                    ),
                                    0,
                                    AST$(
                                      17,
                                      3486,
                                      20,
                                      0,
                                      "iterable"
                                    )
                                  )
                                ),
                                AST$(
                                  9,
                                  1,
                                  1,
                                  0,
                                  true
                                ),
                                AST$(20, 3486, 1, 0),
                                AST$(
                                  4,
                                  3486,
                                  1,
                                  0,
                                  0,
                                  AST$(
                                    3,
                                    3486,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      3486,
                                      1,
                                      0,
                                      "_item"
                                    ),
                                    "=",
                                    AST$(
                                      7,
                                      3486,
                                      1,
                                      0,
                                      AST$(
                                        3,
                                        3486,
                                        1,
                                        0,
                                        AST$(
                                          17,
                                          3486,
                                          1,
                                          0,
                                          "_iter"
                                        ),
                                        ".",
                                        AST$(
                                          9,
                                          3486,
                                          1,
                                          0,
                                          "next"
                                        )
                                      ),
                                      0
                                    )
                                  ),
                                  AST$(
                                    18,
                                    3486,
                                    1,
                                    0,
                                    AST$(
                                      3,
                                      3486,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3486,
                                        1,
                                        0,
                                        "_item"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3486,
                                        1,
                                        0,
                                        "done"
                                      )
                                    ),
                                    AST$(6, 3486, 1, 0)
                                  ),
                                  AST$(
                                    3,
                                    3486,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      3486,
                                      10,
                                      0,
                                      "item"
                                    ),
                                    "=",
                                    AST$(
                                      3,
                                      3486,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3486,
                                        1,
                                        0,
                                        "_item"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3486,
                                        1,
                                        0,
                                        "value"
                                      )
                                    )
                                  ),
                                  AST$(
                                    7,
                                    3487,
                                    1,
                                    0,
                                    AST$(
                                      3,
                                      3487,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3487,
                                        1,
                                        0,
                                        "_this"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3487,
                                        10,
                                        0,
                                        "add"
                                      )
                                    ),
                                    0,
                                    AST$(
                                      17,
                                      3487,
                                      14,
                                      0,
                                      "item"
                                    )
                                  )
                                )
                              ),
                              AST$(
                                28,
                                3486,
                                1,
                                0,
                                AST$(
                                  7,
                                  3486,
                                  1,
                                  0,
                                  AST$(
                                    3,
                                    3486,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      3486,
                                      1,
                                      0,
                                      "_iter"
                                    ),
                                    ".",
                                    AST$(
                                      9,
                                      3486,
                                      1,
                                      0,
                                      "close"
                                    )
                                  ),
                                  0
                                ),
                                AST$(
                                  17,
                                  3486,
                                  1,
                                  0,
                                  "_e"
                                ),
                                AST$(9, 1, 1, 0)
                              )
                            )
                          ),
                          AST$(
                            23,
                            3484,
                            1,
                            0,
                            AST$(
                              17,
                              3484,
                              1,
                              0,
                              "_this"
                            )
                          )
                        )
                      ),
                      AST$(
                        3,
                        3482,
                        68,
                        0,
                        AST$(
                          17,
                          3482,
                          68,
                          0,
                          "_Set_prototype"
                        ),
                        "=",
                        AST$(
                          3,
                          3482,
                          68,
                          0,
                          AST$(
                            17,
                            3482,
                            74,
                            0,
                            "Set"
                          ),
                          ".",
                          AST$(
                            9,
                            3482,
                            68,
                            0,
                            "prototype"
                          )
                        )
                      ),
                      AST$(
                        3,
                        3482,
                        68,
                        0,
                        AST$(
                          3,
                          3482,
                          68,
                          0,
                          AST$(
                            17,
                            3482,
                            74,
                            0,
                            "Set"
                          ),
                          ".",
                          AST$(
                            9,
                            3482,
                            68,
                            0,
                            "displayName"
                          )
                        ),
                        "=",
                        AST$(
                          9,
                          3482,
                          68,
                          0,
                          "Set"
                        )
                      ),
                      AST$(
                        3,
                        3482,
                        68,
                        0,
                        AST$(
                          3,
                          3482,
                          68,
                          0,
                          AST$(
                            17,
                            3482,
                            68,
                            0,
                            "_Set_prototype"
                          ),
                          ".",
                          AST$(
                            9,
                            3489,
                            6,
                            0,
                            "has"
                          )
                        ),
                        "=",
                        AST$(
                          16,
                          3489,
                          10,
                          0,
                          0,
                          [
                            AST$(
                              17,
                              3489,
                              11,
                              0,
                              "item"
                            )
                          ],
                          0,
                          AST$(
                            23,
                            3490,
                            1,
                            0,
                            AST$(
                              3,
                              3490,
                              1,
                              0,
                              AST$(
                                7,
                                3490,
                                1,
                                0,
                                AST$(
                                  17,
                                  3490,
                                  1,
                                  0,
                                  "__indexOfIdentical"
                                ),
                                0,
                                AST$(
                                  3,
                                  3490,
                                  26,
                                  0,
                                  AST$(25, 3490, 26, 0),
                                  ".",
                                  AST$(
                                    9,
                                    3490,
                                    27,
                                    0,
                                    "_items"
                                  )
                                ),
                                AST$(
                                  17,
                                  3490,
                                  34,
                                  0,
                                  "item"
                                )
                              ),
                              "!==",
                              AST$(
                                9,
                                3490,
                                43,
                                0,
                                -1
                              )
                            )
                          )
                        )
                      ),
                      AST$(
                        3,
                        3482,
                        68,
                        0,
                        AST$(
                          3,
                          3482,
                          68,
                          0,
                          AST$(
                            17,
                            3482,
                            68,
                            0,
                            "_Set_prototype"
                          ),
                          ".",
                          AST$(
                            9,
                            3491,
                            6,
                            0,
                            "add"
                          )
                        ),
                        "=",
                        AST$(
                          16,
                          3491,
                          10,
                          0,
                          0,
                          [
                            AST$(
                              17,
                              3491,
                              11,
                              0,
                              "item"
                            )
                          ],
                          ["items"],
                          AST$(
                            5,
                            3492,
                            1,
                            0,
                            AST$(
                              3,
                              3492,
                              1,
                              0,
                              AST$(
                                17,
                                3492,
                                8,
                                0,
                                "items"
                              ),
                              "=",
                              AST$(
                                3,
                                3492,
                                16,
                                0,
                                AST$(25, 3492, 16, 0),
                                ".",
                                AST$(
                                  9,
                                  3492,
                                  18,
                                  0,
                                  "_items"
                                )
                              )
                            ),
                            AST$(
                              19,
                              3493,
                              1,
                              0,
                              AST$(
                                3,
                                3493,
                                7,
                                0,
                                AST$(
                                  7,
                                  3493,
                                  7,
                                  0,
                                  AST$(
                                    17,
                                    3493,
                                    7,
                                    0,
                                    "__indexOfIdentical"
                                  ),
                                  0,
                                  AST$(
                                    17,
                                    3493,
                                    29,
                                    0,
                                    "items"
                                  ),
                                  AST$(
                                    17,
                                    3493,
                                    35,
                                    0,
                                    "item"
                                  )
                                ),
                                "===",
                                AST$(
                                  9,
                                  3493,
                                  44,
                                  0,
                                  -1
                                )
                              ),
                              AST$(
                                7,
                                3494,
                                1,
                                0,
                                AST$(
                                  3,
                                  3494,
                                  1,
                                  0,
                                  AST$(
                                    17,
                                    3494,
                                    1,
                                    0,
                                    "items"
                                  ),
                                  ".",
                                  AST$(
                                    9,
                                    3494,
                                    13,
                                    0,
                                    "push"
                                  )
                                ),
                                0,
                                AST$(
                                  17,
                                  3494,
                                  18,
                                  0,
                                  "item"
                                )
                              )
                            )
                          )
                        )
                      ),
                      AST$(
                        3,
                        3482,
                        68,
                        0,
                        AST$(
                          3,
                          3482,
                          68,
                          0,
                          AST$(
                            17,
                            3482,
                            68,
                            0,
                            "_Set_prototype"
                          ),
                          ".",
                          AST$(
                            9,
                            3495,
                            6,
                            0,
                            "delete"
                          )
                        ),
                        "=",
                        AST$(
                          16,
                          3495,
                          13,
                          0,
                          0,
                          [
                            AST$(
                              17,
                              3495,
                              14,
                              0,
                              "item"
                            )
                          ],
                          ["index", "items"],
                          AST$(
                            5,
                            3496,
                            1,
                            0,
                            AST$(
                              3,
                              3496,
                              1,
                              0,
                              AST$(
                                17,
                                3496,
                                8,
                                0,
                                "items"
                              ),
                              "=",
                              AST$(
                                3,
                                3496,
                                16,
                                0,
                                AST$(25, 3496, 16, 0),
                                ".",
                                AST$(
                                  9,
                                  3496,
                                  18,
                                  0,
                                  "_items"
                                )
                              )
                            ),
                            AST$(
                              3,
                              3497,
                              1,
                              0,
                              AST$(
                                17,
                                3497,
                                8,
                                0,
                                "index"
                              ),
                              "=",
                              AST$(
                                7,
                                3497,
                                16,
                                0,
                                AST$(
                                  17,
                                  3497,
                                  16,
                                  0,
                                  "__indexOfIdentical"
                                ),
                                0,
                                AST$(
                                  17,
                                  3497,
                                  38,
                                  0,
                                  "items"
                                ),
                                AST$(
                                  17,
                                  3497,
                                  44,
                                  0,
                                  "item"
                                )
                              )
                            ),
                            AST$(
                              19,
                              3498,
                              1,
                              0,
                              AST$(
                                3,
                                3498,
                                7,
                                0,
                                AST$(
                                  17,
                                  3498,
                                  7,
                                  0,
                                  "index"
                                ),
                                "!==",
                                AST$(
                                  9,
                                  3498,
                                  16,
                                  0,
                                  -1
                                )
                              ),
                              AST$(
                                5,
                                3499,
                                1,
                                0,
                                AST$(
                                  7,
                                  3499,
                                  1,
                                  0,
                                  AST$(
                                    3,
                                    3499,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      3499,
                                      1,
                                      0,
                                      "items"
                                    ),
                                    ".",
                                    AST$(
                                      9,
                                      3499,
                                      13,
                                      0,
                                      "splice"
                                    )
                                  ),
                                  0,
                                  AST$(
                                    17,
                                    3499,
                                    20,
                                    0,
                                    "index"
                                  ),
                                  AST$(
                                    9,
                                    3499,
                                    27,
                                    0,
                                    1
                                  )
                                ),
                                AST$(
                                  9,
                                  3500,
                                  1,
                                  0,
                                  true
                                )
                              ),
                              AST$(
                                9,
                                3502,
                                1,
                                0,
                                false
                              )
                            )
                          )
                        )
                      ),
                      AST$(
                        3,
                        3482,
                        68,
                        0,
                        AST$(
                          3,
                          3482,
                          68,
                          0,
                          AST$(
                            17,
                            3482,
                            68,
                            0,
                            "_Set_prototype"
                          ),
                          ".",
                          AST$(
                            9,
                            3503,
                            6,
                            0,
                            "values"
                          )
                        ),
                        "=",
                        AST$(
                          16,
                          3503,
                          13,
                          0,
                          0,
                          0,
                          [
                            "_arr",
                            "_e",
                            "_i",
                            "_send",
                            "_state",
                            "_step",
                            "_this",
                            "_throw",
                            "item"
                          ],
                          AST$(
                            4,
                            3504,
                            1,
                            0,
                            0,
                            AST$(
                              3,
                              3504,
                              1,
                              0,
                              AST$(
                                17,
                                3504,
                                1,
                                0,
                                "_this"
                              ),
                              "=",
                              AST$(25, 3504, 1, 0)
                            ),
                            AST$(
                              3,
                              3503,
                              13,
                              0,
                              AST$(
                                17,
                                3503,
                                13,
                                0,
                                "_state"
                              ),
                              "=",
                              AST$(
                                9,
                                3503,
                                13,
                                0,
                                0
                              )
                            ),
                            AST$(
                              16,
                              3503,
                              13,
                              0,
                              AST$(
                                17,
                                3503,
                                13,
                                0,
                                "_close"
                              ),
                              0,
                              0,
                              AST$(
                                3,
                                3503,
                                13,
                                0,
                                AST$(
                                  17,
                                  3503,
                                  13,
                                  0,
                                  "_state"
                                ),
                                "=",
                                AST$(
                                  9,
                                  3503,
                                  13,
                                  0,
                                  3
                                )
                              )
                            ),
                            AST$(
                              16,
                              3503,
                              13,
                              0,
                              AST$(
                                17,
                                3503,
                                13,
                                0,
                                "_step"
                              ),
                              [
                                AST$(
                                  17,
                                  3503,
                                  13,
                                  0,
                                  "_received"
                                )
                              ],
                              0,
                              AST$(
                                14,
                                3503,
                                13,
                                0,
                                AST$(20, 3503, 13, 0),
                                AST$(
                                  9,
                                  3503,
                                  13,
                                  0,
                                  true
                                ),
                                AST$(20, 3503, 13, 0),
                                AST$(
                                  27,
                                  3503,
                                  13,
                                  0,
                                  0,
                                  AST$(
                                    17,
                                    3503,
                                    13,
                                    0,
                                    "_state"
                                  ),
                                  1,
                                  1,
                                  0,
                                  AST$(
                                    9,
                                    1,
                                    1,
                                    0,
                                    0
                                  ),
                                  AST$(
                                    4,
                                    1,
                                    1,
                                    0,
                                    0,
                                    AST$(
                                      3,
                                      3504,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3504,
                                        1,
                                        0,
                                        "_arr"
                                      ),
                                      "=",
                                      AST$(
                                        7,
                                        3504,
                                        1,
                                        0,
                                        AST$(
                                          17,
                                          3504,
                                          1,
                                          0,
                                          "__toArray"
                                        ),
                                        0,
                                        AST$(
                                          3,
                                          3504,
                                          16,
                                          0,
                                          AST$(
                                            17,
                                            3504,
                                            16,
                                            0,
                                            "_this"
                                          ),
                                          ".",
                                          AST$(
                                            9,
                                            3504,
                                            18,
                                            0,
                                            "_items"
                                          )
                                        )
                                      )
                                    ),
                                    AST$(
                                      3,
                                      3504,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3504,
                                        1,
                                        0,
                                        "_i"
                                      ),
                                      "=",
                                      AST$(
                                        3,
                                        3504,
                                        1,
                                        0,
                                        AST$(
                                          17,
                                          3504,
                                          1,
                                          0,
                                          "_arr"
                                        ),
                                        ".",
                                        AST$(
                                          9,
                                          3504,
                                          1,
                                          0,
                                          "length"
                                        )
                                      )
                                    ),
                                    AST$(
                                      30,
                                      3504,
                                      1,
                                      0,
                                      "++",
                                      AST$(
                                        17,
                                        3503,
                                        13,
                                        0,
                                        "_state"
                                      )
                                    )
                                  ),
                                  3504,
                                  1,
                                  0,
                                  AST$(
                                    9,
                                    3504,
                                    1,
                                    0,
                                    1
                                  ),
                                  AST$(
                                    4,
                                    3504,
                                    1,
                                    0,
                                    0,
                                    AST$(
                                      3,
                                      3504,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3503,
                                        13,
                                        0,
                                        "_state"
                                      ),
                                      "=",
                                      AST$(
                                        19,
                                        3504,
                                        1,
                                        0,
                                        AST$(
                                          30,
                                          3504,
                                          1,
                                          0,
                                          "--post",
                                          AST$(
                                            17,
                                            3504,
                                            1,
                                            0,
                                            "_i"
                                          )
                                        ),
                                        AST$(
                                          9,
                                          3504,
                                          1,
                                          0,
                                          2
                                        ),
                                        AST$(
                                          9,
                                          3504,
                                          1,
                                          0,
                                          3
                                        )
                                      )
                                    ),
                                    AST$(6, 3504, 1, 0)
                                  ),
                                  3504,
                                  1,
                                  0,
                                  AST$(
                                    9,
                                    3504,
                                    1,
                                    0,
                                    2
                                  ),
                                  AST$(
                                    4,
                                    3504,
                                    1,
                                    0,
                                    0,
                                    AST$(
                                      3,
                                      3504,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3504,
                                        8,
                                        0,
                                        "item"
                                      ),
                                      "=",
                                      AST$(
                                        3,
                                        3504,
                                        1,
                                        0,
                                        AST$(
                                          17,
                                          3504,
                                          1,
                                          0,
                                          "_arr"
                                        ),
                                        ".",
                                        AST$(
                                          17,
                                          3504,
                                          1,
                                          0,
                                          "_i"
                                        )
                                      )
                                    ),
                                    AST$(
                                      3,
                                      3505,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3503,
                                        13,
                                        0,
                                        "_state"
                                      ),
                                      "=",
                                      AST$(
                                        9,
                                        3505,
                                        1,
                                        0,
                                        1
                                      )
                                    ),
                                    AST$(
                                      23,
                                      3505,
                                      1,
                                      0,
                                      AST$(
                                        21,
                                        3505,
                                        1,
                                        0,
                                        3505,
                                        1,
                                        void 0,
                                        "done",
                                        AST$(
                                          9,
                                          3505,
                                          1,
                                          0,
                                          false
                                        ),
                                        3505,
                                        1,
                                        void 0,
                                        "value",
                                        AST$(
                                          17,
                                          3505,
                                          12,
                                          0,
                                          "item"
                                        )
                                      )
                                    )
                                  ),
                                  3503,
                                  13,
                                  0,
                                  AST$(
                                    9,
                                    3503,
                                    13,
                                    0,
                                    3
                                  ),
                                  AST$(
                                    23,
                                    3503,
                                    13,
                                    0,
                                    AST$(
                                      21,
                                      3503,
                                      13,
                                      0,
                                      3503,
                                      13,
                                      void 0,
                                      "done",
                                      AST$(
                                        9,
                                        3503,
                                        13,
                                        0,
                                        true
                                      ),
                                      3503,
                                      13,
                                      void 0,
                                      "value",
                                      AST$(9, 3503, 13, 0)
                                    )
                                  ),
                                  AST$(
                                    26,
                                    3503,
                                    13,
                                    0,
                                    AST$(
                                      7,
                                      3503,
                                      13,
                                      0,
                                      AST$(
                                        17,
                                        3503,
                                        13,
                                        0,
                                        "Error"
                                      ),
                                      0,
                                      AST$(
                                        3,
                                        3503,
                                        13,
                                        0,
                                        AST$(
                                          9,
                                          3503,
                                          13,
                                          0,
                                          "Unknown state: "
                                        ),
                                        "+",
                                        AST$(
                                          17,
                                          3503,
                                          13,
                                          0,
                                          "_state"
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            ),
                            AST$(
                              16,
                              3503,
                              13,
                              0,
                              AST$(
                                17,
                                3503,
                                13,
                                0,
                                "_throw"
                              ),
                              [
                                AST$(
                                  17,
                                  3503,
                                  13,
                                  0,
                                  "_e"
                                )
                              ],
                              0,
                              AST$(
                                4,
                                3503,
                                13,
                                0,
                                0,
                                AST$(
                                  7,
                                  3503,
                                  13,
                                  0,
                                  AST$(
                                    17,
                                    3503,
                                    13,
                                    0,
                                    "_close"
                                  ),
                                  0
                                ),
                                AST$(
                                  26,
                                  3503,
                                  13,
                                  0,
                                  AST$(
                                    17,
                                    3503,
                                    13,
                                    0,
                                    "_e"
                                  )
                                )
                              )
                            ),
                            AST$(
                              16,
                              3503,
                              13,
                              0,
                              AST$(
                                17,
                                3503,
                                13,
                                0,
                                "_send"
                              ),
                              [
                                AST$(
                                  17,
                                  3503,
                                  13,
                                  0,
                                  "_received"
                                )
                              ],
                              0,
                              AST$(
                                28,
                                3503,
                                13,
                                0,
                                AST$(
                                  23,
                                  3503,
                                  13,
                                  0,
                                  AST$(
                                    7,
                                    3503,
                                    13,
                                    0,
                                    AST$(
                                      17,
                                      3503,
                                      13,
                                      0,
                                      "_step"
                                    ),
                                    0,
                                    AST$(
                                      17,
                                      3503,
                                      13,
                                      0,
                                      "_received"
                                    )
                                  )
                                ),
                                AST$(
                                  17,
                                  3503,
                                  13,
                                  0,
                                  "_e"
                                ),
                                AST$(
                                  7,
                                  3503,
                                  13,
                                  0,
                                  AST$(
                                    17,
                                    3503,
                                    13,
                                    0,
                                    "_throw"
                                  ),
                                  0,
                                  AST$(
                                    17,
                                    3503,
                                    13,
                                    0,
                                    "_e"
                                  )
                                )
                              )
                            ),
                            AST$(
                              23,
                              3503,
                              13,
                              0,
                              AST$(
                                21,
                                3503,
                                13,
                                0,
                                3503,
                                13,
                                void 0,
                                "close",
                                AST$(
                                  17,
                                  3503,
                                  13,
                                  0,
                                  "_close"
                                ),
                                3503,
                                13,
                                void 0,
                                "iterator",
                                AST$(
                                  16,
                                  3503,
                                  13,
                                  0,
                                  0,
                                  0,
                                  0,
                                  AST$(
                                    23,
                                    3503,
                                    13,
                                    0,
                                    AST$(25, 3503, 13, 0)
                                  )
                                ),
                                3503,
                                13,
                                void 0,
                                "next",
                                AST$(
                                  16,
                                  3503,
                                  13,
                                  0,
                                  0,
                                  0,
                                  0,
                                  AST$(
                                    23,
                                    3503,
                                    13,
                                    0,
                                    AST$(
                                      7,
                                      3503,
                                      13,
                                      0,
                                      AST$(
                                        17,
                                        3503,
                                        13,
                                        0,
                                        "_send"
                                      ),
                                      0,
                                      AST$(9, 3503, 13, 0)
                                    )
                                  )
                                ),
                                3503,
                                13,
                                void 0,
                                "send",
                                AST$(
                                  17,
                                  3503,
                                  13,
                                  0,
                                  "_send"
                                ),
                                3503,
                                13,
                                void 0,
                                "throw",
                                AST$(
                                  16,
                                  3503,
                                  13,
                                  0,
                                  0,
                                  [
                                    AST$(
                                      17,
                                      3503,
                                      13,
                                      0,
                                      "_e"
                                    )
                                  ],
                                  0,
                                  AST$(
                                    4,
                                    3503,
                                    13,
                                    0,
                                    0,
                                    AST$(
                                      7,
                                      3503,
                                      13,
                                      0,
                                      AST$(
                                        17,
                                        3503,
                                        13,
                                        0,
                                        "_throw"
                                      ),
                                      0,
                                      AST$(
                                        17,
                                        3503,
                                        13,
                                        0,
                                        "_e"
                                      )
                                    ),
                                    AST$(
                                      23,
                                      3503,
                                      13,
                                      0,
                                      AST$(
                                        7,
                                        3503,
                                        13,
                                        0,
                                        AST$(
                                          17,
                                          3503,
                                          13,
                                          0,
                                          "_send"
                                        ),
                                        0,
                                        AST$(9, 3503, 13, 0)
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      ),
                      AST$(
                        3,
                        3482,
                        68,
                        0,
                        AST$(
                          3,
                          3482,
                          68,
                          0,
                          AST$(
                            17,
                            3482,
                            68,
                            0,
                            "_Set_prototype"
                          ),
                          ".",
                          AST$(
                            9,
                            3506,
                            6,
                            0,
                            "iterator"
                          )
                        ),
                        "=",
                        AST$(
                          3,
                          3506,
                          17,
                          0,
                          AST$(
                            3,
                            3506,
                            17,
                            0,
                            AST$(
                              17,
                              3506,
                              17,
                              0,
                              "Set"
                            ),
                            ".",
                            AST$(
                              9,
                              3506,
                              17,
                              0,
                              "prototype"
                            )
                          ),
                          ".",
                          AST$(
                            9,
                            3506,
                            23,
                            0,
                            "values"
                          )
                        )
                      ),
                      AST$(
                        23,
                        3482,
                        68,
                        0,
                        AST$(
                          17,
                          3482,
                          74,
                          0,
                          "Set"
                        )
                      )
                    )
                  ),
                  0
                )
              )
            ),
            type: TYPE$.any,
            dependencies: [
              "__create",
              "__indexOfIdentical",
              "__iter",
              "__toArray",
              "GLOBAL"
            ]
          },
          setImmediate: {
            helper: AST$(
              19,
              3548,
              30,
              0,
              AST$(
                3,
                3548,
                33,
                0,
                AST$(
                  30,
                  3548,
                  33,
                  0,
                  "typeof",
                  AST$(
                    3,
                    3548,
                    46,
                    0,
                    AST$(
                      17,
                      3548,
                      46,
                      0,
                      "GLOBAL"
                    ),
                    ".",
                    AST$(
                      9,
                      3548,
                      54,
                      0,
                      "setImmediate"
                    )
                  )
                ),
                "===",
                AST$(
                  9,
                  3548,
                  33,
                  0,
                  "function"
                )
              ),
              AST$(
                3,
                3549,
                1,
                0,
                AST$(
                  17,
                  3549,
                  1,
                  0,
                  "GLOBAL"
                ),
                ".",
                AST$(
                  9,
                  3549,
                  10,
                  0,
                  "setImmediate"
                )
              ),
              AST$(
                19,
                3548,
                30,
                0,
                AST$(
                  3,
                  3550,
                  8,
                  0,
                  AST$(
                    3,
                    3550,
                    8,
                    0,
                    AST$(
                      30,
                      3550,
                      12,
                      0,
                      "typeof",
                      AST$(
                        17,
                        3550,
                        21,
                        0,
                        "process"
                      )
                    ),
                    "!==",
                    AST$(
                      9,
                      3550,
                      12,
                      0,
                      "undefined"
                    )
                  ),
                  "&&",
                  AST$(
                    3,
                    3550,
                    33,
                    0,
                    AST$(
                      30,
                      3550,
                      33,
                      0,
                      "typeof",
                      AST$(
                        3,
                        3550,
                        46,
                        0,
                        AST$(
                          17,
                          3550,
                          46,
                          0,
                          "process"
                        ),
                        ".",
                        AST$(
                          9,
                          3550,
                          55,
                          0,
                          "nextTick"
                        )
                      )
                    ),
                    "===",
                    AST$(
                      9,
                      3550,
                      33,
                      0,
                      "function"
                    )
                  )
                ),
                AST$(
                  7,
                  3551,
                  1,
                  0,
                  AST$(
                    16,
                    3551,
                    1,
                    0,
                    0,
                    0,
                    ["nextTick"],
                    AST$(
                      4,
                      3552,
                      1,
                      0,
                      0,
                      AST$(
                        3,
                        3552,
                        1,
                        0,
                        AST$(
                          17,
                          3552,
                          8,
                          0,
                          "nextTick"
                        ),
                        "=",
                        AST$(
                          3,
                          3552,
                          20,
                          0,
                          AST$(
                            17,
                            3552,
                            20,
                            0,
                            "process"
                          ),
                          ".",
                          AST$(
                            9,
                            3552,
                            29,
                            0,
                            "nextTick"
                          )
                        )
                      ),
                      AST$(
                        23,
                        3553,
                        6,
                        0,
                        AST$(
                          16,
                          3553,
                          6,
                          0,
                          0,
                          [
                            AST$(
                              17,
                              3553,
                              7,
                              0,
                              "func"
                            )
                          ],
                          ["args"],
                          AST$(
                            4,
                            3553,
                            6,
                            0,
                            0,
                            AST$(
                              18,
                              3553,
                              6,
                              0,
                              AST$(
                                3,
                                3553,
                                6,
                                0,
                                AST$(
                                  30,
                                  3553,
                                  6,
                                  0,
                                  "typeof",
                                  AST$(
                                    17,
                                    3553,
                                    7,
                                    0,
                                    "func"
                                  )
                                ),
                                "!==",
                                AST$(
                                  9,
                                  3553,
                                  6,
                                  0,
                                  "function"
                                )
                              ),
                              AST$(
                                26,
                                3553,
                                6,
                                0,
                                AST$(
                                  7,
                                  3553,
                                  6,
                                  0,
                                  AST$(
                                    17,
                                    3553,
                                    6,
                                    0,
                                    "TypeError"
                                  ),
                                  0,
                                  AST$(
                                    3,
                                    3553,
                                    6,
                                    0,
                                    AST$(
                                      9,
                                      3553,
                                      6,
                                      0,
                                      "Expected func to be a Function, got "
                                    ),
                                    "+",
                                    AST$(
                                      7,
                                      3553,
                                      6,
                                      0,
                                      AST$(
                                        17,
                                        3553,
                                        6,
                                        0,
                                        "__typeof"
                                      ),
                                      0,
                                      AST$(
                                        17,
                                        3553,
                                        7,
                                        0,
                                        "func"
                                      )
                                    )
                                  )
                                )
                              )
                            ),
                            AST$(
                              3,
                              3553,
                              6,
                              0,
                              AST$(
                                17,
                                3553,
                                22,
                                0,
                                "args"
                              ),
                              "=",
                              AST$(
                                7,
                                3553,
                                6,
                                0,
                                AST$(
                                  3,
                                  3553,
                                  6,
                                  0,
                                  AST$(
                                    17,
                                    3553,
                                    6,
                                    0,
                                    "__slice"
                                  ),
                                  ".",
                                  AST$(
                                    9,
                                    3553,
                                    6,
                                    0,
                                    "call"
                                  )
                                ),
                                0,
                                AST$(1, 3553, 6, 0),
                                AST$(
                                  9,
                                  1,
                                  1,
                                  0,
                                  1
                                )
                              )
                            ),
                            AST$(
                              18,
                              3554,
                              1,
                              0,
                              AST$(
                                3,
                                3554,
                                9,
                                0,
                                AST$(
                                  17,
                                  3554,
                                  9,
                                  0,
                                  "args"
                                ),
                                ".",
                                AST$(
                                  9,
                                  3554,
                                  15,
                                  0,
                                  "length"
                                )
                              ),
                              AST$(
                                23,
                                3555,
                                1,
                                0,
                                AST$(
                                  7,
                                  3555,
                                  1,
                                  0,
                                  AST$(
                                    17,
                                    3555,
                                    1,
                                    0,
                                    "nextTick"
                                  ),
                                  0,
                                  AST$(
                                    16,
                                    3555,
                                    20,
                                    0,
                                    0,
                                    0,
                                    0,
                                    AST$(
                                      7,
                                      3555,
                                      23,
                                      0,
                                      AST$(
                                        3,
                                        3555,
                                        23,
                                        0,
                                        AST$(
                                          17,
                                          3555,
                                          23,
                                          0,
                                          "func"
                                        ),
                                        ".",
                                        AST$(
                                          9,
                                          3555,
                                          23,
                                          0,
                                          "apply"
                                        )
                                      ),
                                      0,
                                      AST$(9, 3555, 23, 0),
                                      AST$(
                                        7,
                                        3555,
                                        32,
                                        0,
                                        AST$(
                                          17,
                                          3555,
                                          32,
                                          0,
                                          "__toArray"
                                        ),
                                        0,
                                        AST$(
                                          17,
                                          3555,
                                          32,
                                          0,
                                          "args"
                                        )
                                      )
                                    )
                                  )
                                )
                              ),
                              AST$(
                                23,
                                3557,
                                1,
                                0,
                                AST$(
                                  7,
                                  3557,
                                  1,
                                  0,
                                  AST$(
                                    17,
                                    3557,
                                    1,
                                    0,
                                    "nextTick"
                                  ),
                                  0,
                                  AST$(
                                    17,
                                    3557,
                                    19,
                                    0,
                                    "func"
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  ),
                  0
                ),
                AST$(
                  16,
                  3559,
                  4,
                  0,
                  0,
                  [
                    AST$(
                      17,
                      3559,
                      5,
                      0,
                      "func"
                    )
                  ],
                  ["args"],
                  AST$(
                    4,
                    3559,
                    4,
                    0,
                    0,
                    AST$(
                      18,
                      3559,
                      4,
                      0,
                      AST$(
                        3,
                        3559,
                        4,
                        0,
                        AST$(
                          30,
                          3559,
                          4,
                          0,
                          "typeof",
                          AST$(
                            17,
                            3559,
                            5,
                            0,
                            "func"
                          )
                        ),
                        "!==",
                        AST$(
                          9,
                          3559,
                          4,
                          0,
                          "function"
                        )
                      ),
                      AST$(
                        26,
                        3559,
                        4,
                        0,
                        AST$(
                          7,
                          3559,
                          4,
                          0,
                          AST$(
                            17,
                            3559,
                            4,
                            0,
                            "TypeError"
                          ),
                          0,
                          AST$(
                            3,
                            3559,
                            4,
                            0,
                            AST$(
                              9,
                              3559,
                              4,
                              0,
                              "Expected func to be a Function, got "
                            ),
                            "+",
                            AST$(
                              7,
                              3559,
                              4,
                              0,
                              AST$(
                                17,
                                3559,
                                4,
                                0,
                                "__typeof"
                              ),
                              0,
                              AST$(
                                17,
                                3559,
                                5,
                                0,
                                "func"
                              )
                            )
                          )
                        )
                      )
                    ),
                    AST$(
                      3,
                      3559,
                      4,
                      0,
                      AST$(
                        17,
                        3559,
                        20,
                        0,
                        "args"
                      ),
                      "=",
                      AST$(
                        7,
                        3559,
                        4,
                        0,
                        AST$(
                          3,
                          3559,
                          4,
                          0,
                          AST$(
                            17,
                            3559,
                            4,
                            0,
                            "__slice"
                          ),
                          ".",
                          AST$(
                            9,
                            3559,
                            4,
                            0,
                            "call"
                          )
                        ),
                        0,
                        AST$(1, 3559, 4, 0),
                        AST$(
                          9,
                          1,
                          1,
                          0,
                          1
                        )
                      )
                    ),
                    AST$(
                      18,
                      3560,
                      1,
                      0,
                      AST$(
                        3,
                        3560,
                        7,
                        0,
                        AST$(
                          17,
                          3560,
                          7,
                          0,
                          "args"
                        ),
                        ".",
                        AST$(
                          9,
                          3560,
                          13,
                          0,
                          "length"
                        )
                      ),
                      AST$(
                        23,
                        3561,
                        1,
                        0,
                        AST$(
                          7,
                          3561,
                          1,
                          0,
                          AST$(
                            17,
                            3561,
                            1,
                            0,
                            "setTimeout"
                          ),
                          0,
                          AST$(
                            16,
                            3561,
                            20,
                            0,
                            0,
                            0,
                            0,
                            AST$(
                              7,
                              3561,
                              23,
                              0,
                              AST$(
                                3,
                                3561,
                                23,
                                0,
                                AST$(
                                  17,
                                  3561,
                                  23,
                                  0,
                                  "func"
                                ),
                                ".",
                                AST$(
                                  9,
                                  3561,
                                  23,
                                  0,
                                  "apply"
                                )
                              ),
                              0,
                              AST$(9, 3561, 23, 0),
                              AST$(
                                7,
                                3561,
                                32,
                                0,
                                AST$(
                                  17,
                                  3561,
                                  32,
                                  0,
                                  "__toArray"
                                ),
                                0,
                                AST$(
                                  17,
                                  3561,
                                  32,
                                  0,
                                  "args"
                                )
                              )
                            )
                          ),
                          AST$(
                            9,
                            3561,
                            39,
                            0,
                            0
                          )
                        )
                      ),
                      AST$(
                        23,
                        3563,
                        1,
                        0,
                        AST$(
                          7,
                          3563,
                          1,
                          0,
                          AST$(
                            17,
                            3563,
                            1,
                            0,
                            "setTimeout"
                          ),
                          0,
                          AST$(
                            17,
                            3563,
                            19,
                            0,
                            "func"
                          ),
                          AST$(
                            9,
                            3563,
                            25,
                            0,
                            0
                          )
                        )
                      )
                    )
                  )
                )
              )
            ),
            type: TYPE$.any,
            dependencies: ["__slice", "__toArray", "__typeof", "GLOBAL"]
          },
          __defer: {
            helper: AST$(
              7,
              3565,
              24,
              0,
              AST$(
                16,
                3565,
                24,
                0,
                0,
                0,
                0,
                AST$(
                  4,
                  3566,
                  1,
                  0,
                  0,
                  AST$(
                    16,
                    3566,
                    1,
                    0,
                    AST$(
                      17,
                      3566,
                      6,
                      0,
                      "__defer"
                    ),
                    0,
                    ["deferred", "isError", "value"],
                    AST$(
                      4,
                      3567,
                      1,
                      0,
                      0,
                      AST$(
                        3,
                        3567,
                        1,
                        0,
                        AST$(
                          17,
                          3567,
                          16,
                          0,
                          "isError"
                        ),
                        "=",
                        AST$(
                          9,
                          3567,
                          27,
                          0,
                          false
                        )
                      ),
                      AST$(
                        3,
                        3568,
                        1,
                        0,
                        AST$(
                          17,
                          3568,
                          16,
                          0,
                          "value"
                        ),
                        "=",
                        AST$(
                          9,
                          3568,
                          24,
                          0,
                          null
                        )
                      ),
                      AST$(
                        3,
                        3570,
                        1,
                        0,
                        AST$(
                          17,
                          3570,
                          16,
                          0,
                          "deferred"
                        ),
                        "=",
                        AST$(2, 3570, 41, 0)
                      ),
                      AST$(
                        16,
                        3571,
                        1,
                        0,
                        AST$(
                          17,
                          3571,
                          8,
                          0,
                          "complete"
                        ),
                        [
                          AST$(
                            17,
                            3571,
                            18,
                            0,
                            "newIsError"
                          ),
                          AST$(
                            17,
                            3571,
                            31,
                            0,
                            "newValue"
                          )
                        ],
                        ["funcs"],
                        AST$(
                          19,
                          3572,
                          1,
                          0,
                          AST$(
                            17,
                            3572,
                            9,
                            0,
                            "deferred"
                          ),
                          AST$(
                            5,
                            3573,
                            1,
                            0,
                            AST$(
                              3,
                              3573,
                              1,
                              0,
                              AST$(
                                17,
                                3573,
                                12,
                                0,
                                "funcs"
                              ),
                              "=",
                              AST$(
                                17,
                                3573,
                                29,
                                0,
                                "deferred"
                              )
                            ),
                            AST$(
                              3,
                              3574,
                              1,
                              0,
                              AST$(
                                17,
                                3574,
                                1,
                                0,
                                "deferred"
                              ),
                              "=",
                              AST$(
                                9,
                                3574,
                                20,
                                0,
                                null
                              )
                            ),
                            AST$(
                              3,
                              3575,
                              1,
                              0,
                              AST$(
                                17,
                                3575,
                                1,
                                0,
                                "isError"
                              ),
                              "=",
                              AST$(
                                17,
                                3575,
                                20,
                                0,
                                "newIsError"
                              )
                            ),
                            AST$(
                              3,
                              3576,
                              1,
                              0,
                              AST$(
                                17,
                                3576,
                                1,
                                0,
                                "value"
                              ),
                              "=",
                              AST$(
                                17,
                                3576,
                                17,
                                0,
                                "newValue"
                              )
                            ),
                            AST$(
                              19,
                              3577,
                              1,
                              0,
                              AST$(
                                3,
                                3577,
                                11,
                                0,
                                AST$(
                                  17,
                                  3577,
                                  11,
                                  0,
                                  "funcs"
                                ),
                                ".",
                                AST$(
                                  9,
                                  3577,
                                  18,
                                  0,
                                  "length"
                                )
                              ),
                              AST$(
                                7,
                                3578,
                                1,
                                0,
                                AST$(
                                  17,
                                  3578,
                                  1,
                                  0,
                                  "setImmediate"
                                ),
                                0,
                                AST$(
                                  16,
                                  3578,
                                  26,
                                  0,
                                  0,
                                  0,
                                  ["_end", "i"],
                                  AST$(
                                    14,
                                    3579,
                                    1,
                                    0,
                                    AST$(
                                      5,
                                      1,
                                      1,
                                      0,
                                      AST$(
                                        3,
                                        3579,
                                        1,
                                        0,
                                        AST$(
                                          17,
                                          3579,
                                          16,
                                          0,
                                          "i"
                                        ),
                                        "=",
                                        AST$(
                                          9,
                                          3579,
                                          22,
                                          0,
                                          0
                                        )
                                      ),
                                      AST$(
                                        3,
                                        3579,
                                        1,
                                        0,
                                        AST$(
                                          17,
                                          3579,
                                          1,
                                          0,
                                          "_end"
                                        ),
                                        "=",
                                        AST$(
                                          3,
                                          3579,
                                          27,
                                          0,
                                          AST$(
                                            17,
                                            3579,
                                            27,
                                            0,
                                            "funcs"
                                          ),
                                          ".",
                                          AST$(
                                            9,
                                            3579,
                                            34,
                                            0,
                                            "length"
                                          )
                                        )
                                      )
                                    ),
                                    AST$(
                                      3,
                                      3579,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3579,
                                        16,
                                        0,
                                        "i"
                                      ),
                                      "<",
                                      AST$(
                                        17,
                                        3579,
                                        1,
                                        0,
                                        "_end"
                                      )
                                    ),
                                    AST$(
                                      30,
                                      3579,
                                      1,
                                      0,
                                      "++",
                                      AST$(
                                        17,
                                        3579,
                                        16,
                                        0,
                                        "i"
                                      )
                                    ),
                                    AST$(
                                      7,
                                      3580,
                                      1,
                                      0,
                                      AST$(
                                        3,
                                        3580,
                                        1,
                                        0,
                                        AST$(
                                          17,
                                          3580,
                                          1,
                                          0,
                                          "funcs"
                                        ),
                                        ".",
                                        AST$(
                                          17,
                                          3580,
                                          21,
                                          0,
                                          "i"
                                        )
                                      ),
                                      0
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      ),
                      AST$(
                        23,
                        3582,
                        1,
                        0,
                        AST$(
                          21,
                          3582,
                          1,
                          0,
                          3583,
                          7,
                          void 0,
                          "promise",
                          AST$(
                            21,
                            3583,
                            15,
                            0,
                            3584,
                            9,
                            void 0,
                            "then",
                            AST$(
                              16,
                              3584,
                              16,
                              0,
                              0,
                              [
                                AST$(
                                  17,
                                  3584,
                                  17,
                                  0,
                                  "onFulfilled"
                                ),
                                AST$(
                                  17,
                                  3584,
                                  30,
                                  0,
                                  "onRejected"
                                ),
                                AST$(
                                  17,
                                  3584,
                                  51,
                                  0,
                                  "allowSync"
                                )
                              ],
                              ["_ref", "fulfill", "promise", "reject"],
                              AST$(
                                4,
                                3585,
                                1,
                                0,
                                0,
                                AST$(
                                  18,
                                  3585,
                                  1,
                                  0,
                                  AST$(
                                    3,
                                    3585,
                                    13,
                                    0,
                                    AST$(
                                      17,
                                      3585,
                                      13,
                                      0,
                                      "allowSync"
                                    ),
                                    "!==",
                                    AST$(
                                      9,
                                      3585,
                                      27,
                                      0,
                                      true
                                    )
                                  ),
                                  AST$(
                                    3,
                                    3586,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      3586,
                                      1,
                                      0,
                                      "allowSync"
                                    ),
                                    "=",
                                    AST$(9, 3586, 26, 0)
                                  )
                                ),
                                AST$(
                                  3,
                                  3587,
                                  1,
                                  0,
                                  AST$(
                                    17,
                                    3587,
                                    1,
                                    0,
                                    "_ref"
                                  ),
                                  "=",
                                  AST$(
                                    7,
                                    3587,
                                    43,
                                    0,
                                    AST$(
                                      17,
                                      3587,
                                      43,
                                      0,
                                      "__defer"
                                    ),
                                    0
                                  )
                                ),
                                AST$(
                                  3,
                                  3587,
                                  1,
                                  0,
                                  AST$(
                                    17,
                                    3587,
                                    16,
                                    0,
                                    "promise"
                                  ),
                                  "=",
                                  AST$(
                                    3,
                                    3587,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      3587,
                                      1,
                                      0,
                                      "_ref"
                                    ),
                                    ".",
                                    AST$(
                                      9,
                                      1,
                                      1,
                                      0,
                                      "promise"
                                    )
                                  )
                                ),
                                AST$(
                                  3,
                                  3587,
                                  1,
                                  0,
                                  AST$(
                                    17,
                                    3587,
                                    24,
                                    0,
                                    "fulfill"
                                  ),
                                  "=",
                                  AST$(
                                    3,
                                    3587,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      3587,
                                      1,
                                      0,
                                      "_ref"
                                    ),
                                    ".",
                                    AST$(
                                      9,
                                      1,
                                      1,
                                      0,
                                      "fulfill"
                                    )
                                  )
                                ),
                                AST$(
                                  3,
                                  3587,
                                  1,
                                  0,
                                  AST$(
                                    17,
                                    3587,
                                    33,
                                    0,
                                    "reject"
                                  ),
                                  "=",
                                  AST$(
                                    3,
                                    3587,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      3587,
                                      1,
                                      0,
                                      "_ref"
                                    ),
                                    ".",
                                    AST$(
                                      9,
                                      1,
                                      1,
                                      0,
                                      "reject"
                                    )
                                  )
                                ),
                                AST$(
                                  17,
                                  3587,
                                  1,
                                  0,
                                  "_ref"
                                ),
                                AST$(
                                  16,
                                  3588,
                                  1,
                                  0,
                                  AST$(
                                    17,
                                    3588,
                                    14,
                                    0,
                                    "step"
                                  ),
                                  0,
                                  ["f", "result"],
                                  AST$(
                                    28,
                                    3588,
                                    27,
                                    0,
                                    AST$(
                                      4,
                                      3589,
                                      1,
                                      0,
                                      0,
                                      AST$(
                                        18,
                                        3589,
                                        20,
                                        0,
                                        AST$(
                                          17,
                                          3589,
                                          23,
                                          0,
                                          "isError"
                                        ),
                                        AST$(
                                          3,
                                          3589,
                                          1,
                                          0,
                                          AST$(
                                            17,
                                            3589,
                                            16,
                                            0,
                                            "f"
                                          ),
                                          "=",
                                          AST$(
                                            17,
                                            3589,
                                            37,
                                            0,
                                            "onRejected"
                                          )
                                        ),
                                        AST$(
                                          3,
                                          3589,
                                          1,
                                          0,
                                          AST$(
                                            17,
                                            3589,
                                            16,
                                            0,
                                            "f"
                                          ),
                                          "=",
                                          AST$(
                                            17,
                                            3589,
                                            54,
                                            0,
                                            "onFulfilled"
                                          )
                                        )
                                      ),
                                      AST$(
                                        18,
                                        3590,
                                        1,
                                        0,
                                        AST$(
                                          3,
                                          3590,
                                          15,
                                          0,
                                          AST$(
                                            30,
                                            3590,
                                            15,
                                            0,
                                            "typeof",
                                            AST$(
                                              17,
                                              3590,
                                              28,
                                              0,
                                              "f"
                                            )
                                          ),
                                          "===",
                                          AST$(
                                            9,
                                            3590,
                                            15,
                                            0,
                                            "function"
                                          )
                                        ),
                                        AST$(
                                          4,
                                          3591,
                                          1,
                                          0,
                                          0,
                                          AST$(
                                            3,
                                            3591,
                                            1,
                                            0,
                                            AST$(
                                              17,
                                              3591,
                                              18,
                                              0,
                                              "result"
                                            ),
                                            "=",
                                            AST$(
                                              7,
                                              3591,
                                              27,
                                              0,
                                              AST$(
                                                17,
                                                3591,
                                                27,
                                                0,
                                                "f"
                                              ),
                                              0,
                                              AST$(
                                                17,
                                                3591,
                                                30,
                                                0,
                                                "value"
                                              )
                                            )
                                          ),
                                          AST$(
                                            18,
                                            3592,
                                            1,
                                            0,
                                            AST$(
                                              3,
                                              3592,
                                              17,
                                              0,
                                              AST$(
                                                17,
                                                3592,
                                                17,
                                                0,
                                                "result"
                                              ),
                                              "&&",
                                              AST$(
                                                3,
                                                3592,
                                                28,
                                                0,
                                                AST$(
                                                  30,
                                                  3592,
                                                  28,
                                                  0,
                                                  "typeof",
                                                  AST$(
                                                    3,
                                                    3592,
                                                    41,
                                                    0,
                                                    AST$(
                                                      17,
                                                      3592,
                                                      41,
                                                      0,
                                                      "result"
                                                    ),
                                                    ".",
                                                    AST$(
                                                      9,
                                                      3592,
                                                      49,
                                                      0,
                                                      "then"
                                                    )
                                                  )
                                                ),
                                                "===",
                                                AST$(
                                                  9,
                                                  3592,
                                                  28,
                                                  0,
                                                  "function"
                                                )
                                              )
                                            ),
                                            AST$(
                                              7,
                                              3593,
                                              1,
                                              0,
                                              AST$(
                                                3,
                                                3593,
                                                1,
                                                0,
                                                AST$(
                                                  17,
                                                  3593,
                                                  1,
                                                  0,
                                                  "result"
                                                ),
                                                ".",
                                                AST$(
                                                  9,
                                                  3593,
                                                  24,
                                                  0,
                                                  "then"
                                                )
                                              ),
                                              0,
                                              AST$(
                                                17,
                                                3593,
                                                29,
                                                0,
                                                "fulfill"
                                              ),
                                              AST$(
                                                17,
                                                3593,
                                                37,
                                                0,
                                                "reject"
                                              ),
                                              AST$(
                                                17,
                                                3593,
                                                45,
                                                0,
                                                "allowSync"
                                              )
                                            ),
                                            AST$(
                                              7,
                                              3595,
                                              1,
                                              0,
                                              AST$(
                                                17,
                                                3595,
                                                1,
                                                0,
                                                "fulfill"
                                              ),
                                              0,
                                              AST$(
                                                17,
                                                3595,
                                                25,
                                                0,
                                                "result"
                                              )
                                            )
                                          )
                                        ),
                                        AST$(
                                          7,
                                          3597,
                                          1,
                                          0,
                                          AST$(
                                            19,
                                            3597,
                                            16,
                                            0,
                                            AST$(
                                              17,
                                              3597,
                                              18,
                                              0,
                                              "isError"
                                            ),
                                            AST$(
                                              17,
                                              3597,
                                              32,
                                              0,
                                              "reject"
                                            ),
                                            AST$(
                                              17,
                                              3597,
                                              44,
                                              0,
                                              "fulfill"
                                            )
                                          ),
                                          0,
                                          AST$(
                                            17,
                                            3597,
                                            54,
                                            0,
                                            "value"
                                          )
                                        )
                                      )
                                    ),
                                    AST$(
                                      17,
                                      3598,
                                      16,
                                      0,
                                      "e"
                                    ),
                                    AST$(
                                      7,
                                      3599,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3599,
                                        1,
                                        0,
                                        "reject"
                                      ),
                                      0,
                                      AST$(
                                        17,
                                        3599,
                                        20,
                                        0,
                                        "e"
                                      )
                                    )
                                  )
                                ),
                                AST$(
                                  18,
                                  3601,
                                  1,
                                  0,
                                  AST$(
                                    17,
                                    3601,
                                    13,
                                    0,
                                    "deferred"
                                  ),
                                  AST$(
                                    7,
                                    3602,
                                    1,
                                    0,
                                    AST$(
                                      3,
                                      3602,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3602,
                                        1,
                                        0,
                                        "deferred"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3602,
                                        22,
                                        0,
                                        "push"
                                      )
                                    ),
                                    0,
                                    AST$(
                                      17,
                                      3602,
                                      27,
                                      0,
                                      "step"
                                    )
                                  ),
                                  AST$(
                                    18,
                                    3601,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      3603,
                                      18,
                                      0,
                                      "allowSync"
                                    ),
                                    AST$(
                                      7,
                                      3604,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3604,
                                        1,
                                        0,
                                        "step"
                                      ),
                                      0
                                    ),
                                    AST$(
                                      7,
                                      3606,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3606,
                                        1,
                                        0,
                                        "setImmediate"
                                      ),
                                      0,
                                      AST$(
                                        17,
                                        3606,
                                        27,
                                        0,
                                        "step"
                                      )
                                    )
                                  )
                                ),
                                AST$(
                                  23,
                                  3607,
                                  1,
                                  0,
                                  AST$(
                                    17,
                                    3607,
                                    1,
                                    0,
                                    "promise"
                                  )
                                )
                              )
                            ),
                            3608,
                            9,
                            void 0,
                            "sync",
                            AST$(
                              16,
                              3608,
                              16,
                              0,
                              0,
                              0,
                              ["result", "state"],
                              AST$(
                                4,
                                3609,
                                1,
                                0,
                                0,
                                AST$(
                                  3,
                                  3609,
                                  1,
                                  0,
                                  AST$(
                                    17,
                                    3609,
                                    22,
                                    0,
                                    "state"
                                  ),
                                  "=",
                                  AST$(
                                    9,
                                    3609,
                                    31,
                                    0,
                                    0
                                  )
                                ),
                                AST$(
                                  3,
                                  3610,
                                  1,
                                  0,
                                  AST$(
                                    17,
                                    3610,
                                    22,
                                    0,
                                    "result"
                                  ),
                                  "=",
                                  AST$(
                                    9,
                                    3610,
                                    32,
                                    0,
                                    0
                                  )
                                ),
                                AST$(
                                  7,
                                  3611,
                                  1,
                                  0,
                                  AST$(
                                    3,
                                    3611,
                                    1,
                                    0,
                                    AST$(25, 3611, 1, 0),
                                    ".",
                                    AST$(
                                      9,
                                      3611,
                                      12,
                                      0,
                                      "then"
                                    )
                                  ),
                                  0,
                                  AST$(
                                    16,
                                    3612,
                                    14,
                                    0,
                                    0,
                                    [
                                      AST$(
                                        17,
                                        3612,
                                        15,
                                        0,
                                        "ret"
                                      )
                                    ],
                                    0,
                                    AST$(
                                      4,
                                      3613,
                                      1,
                                      0,
                                      0,
                                      AST$(
                                        3,
                                        3613,
                                        1,
                                        0,
                                        AST$(
                                          17,
                                          3613,
                                          1,
                                          0,
                                          "state"
                                        ),
                                        "=",
                                        AST$(
                                          9,
                                          3613,
                                          24,
                                          0,
                                          1
                                        )
                                      ),
                                      AST$(
                                        23,
                                        3614,
                                        1,
                                        0,
                                        AST$(
                                          3,
                                          3614,
                                          1,
                                          0,
                                          AST$(
                                            17,
                                            3614,
                                            1,
                                            0,
                                            "result"
                                          ),
                                          "=",
                                          AST$(
                                            17,
                                            3614,
                                            24,
                                            0,
                                            "ret"
                                          )
                                        )
                                      )
                                    )
                                  ),
                                  AST$(
                                    16,
                                    3615,
                                    14,
                                    0,
                                    0,
                                    [
                                      AST$(
                                        17,
                                        3615,
                                        15,
                                        0,
                                        "err"
                                      )
                                    ],
                                    0,
                                    AST$(
                                      4,
                                      3616,
                                      1,
                                      0,
                                      0,
                                      AST$(
                                        3,
                                        3616,
                                        1,
                                        0,
                                        AST$(
                                          17,
                                          3616,
                                          1,
                                          0,
                                          "state"
                                        ),
                                        "=",
                                        AST$(
                                          9,
                                          3616,
                                          24,
                                          0,
                                          2
                                        )
                                      ),
                                      AST$(
                                        23,
                                        3617,
                                        1,
                                        0,
                                        AST$(
                                          3,
                                          3617,
                                          1,
                                          0,
                                          AST$(
                                            17,
                                            3617,
                                            1,
                                            0,
                                            "result"
                                          ),
                                          "=",
                                          AST$(
                                            17,
                                            3617,
                                            24,
                                            0,
                                            "err"
                                          )
                                        )
                                      )
                                    )
                                  ),
                                  AST$(
                                    9,
                                    3618,
                                    13,
                                    0,
                                    true
                                  )
                                ),
                                AST$(
                                  27,
                                  3619,
                                  1,
                                  0,
                                  0,
                                  AST$(
                                    17,
                                    3619,
                                    17,
                                    0,
                                    "state"
                                  ),
                                  3620,
                                  16,
                                  0,
                                  AST$(
                                    9,
                                    3620,
                                    16,
                                    0,
                                    0
                                  ),
                                  AST$(
                                    26,
                                    3621,
                                    1,
                                    0,
                                    AST$(
                                      7,
                                      3621,
                                      18,
                                      0,
                                      AST$(
                                        17,
                                        3621,
                                        18,
                                        0,
                                        "Error"
                                      ),
                                      0,
                                      AST$(
                                        9,
                                        3621,
                                        25,
                                        0,
                                        "Promise did not execute synchronously"
                                      )
                                    )
                                  ),
                                  3622,
                                  16,
                                  0,
                                  AST$(
                                    9,
                                    3622,
                                    16,
                                    0,
                                    1
                                  ),
                                  AST$(
                                    23,
                                    3623,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      3623,
                                      19,
                                      0,
                                      "result"
                                    )
                                  ),
                                  3624,
                                  16,
                                  0,
                                  AST$(
                                    9,
                                    3624,
                                    16,
                                    0,
                                    2
                                  ),
                                  AST$(
                                    26,
                                    3625,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      3625,
                                      18,
                                      0,
                                      "result"
                                    )
                                  ),
                                  AST$(
                                    26,
                                    3627,
                                    1,
                                    0,
                                    AST$(
                                      7,
                                      3627,
                                      18,
                                      0,
                                      AST$(
                                        17,
                                        3627,
                                        18,
                                        0,
                                        "Error"
                                      ),
                                      0,
                                      AST$(
                                        9,
                                        3627,
                                        25,
                                        0,
                                        "Unknown state"
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          ),
                          3629,
                          7,
                          void 0,
                          "fulfill",
                          AST$(
                            16,
                            3629,
                            14,
                            0,
                            0,
                            [
                              AST$(
                                17,
                                3629,
                                15,
                                0,
                                "value"
                              )
                            ],
                            0,
                            AST$(
                              7,
                              3629,
                              25,
                              0,
                              AST$(
                                17,
                                3629,
                                25,
                                0,
                                "complete"
                              ),
                              0,
                              AST$(
                                9,
                                3629,
                                35,
                                0,
                                false
                              ),
                              AST$(
                                17,
                                3629,
                                41,
                                0,
                                "value"
                              )
                            )
                          ),
                          3630,
                          7,
                          void 0,
                          "reject",
                          AST$(
                            16,
                            3630,
                            13,
                            0,
                            0,
                            [
                              AST$(
                                17,
                                3630,
                                14,
                                0,
                                "reason"
                              )
                            ],
                            0,
                            AST$(
                              7,
                              3630,
                              25,
                              0,
                              AST$(
                                17,
                                3630,
                                25,
                                0,
                                "complete"
                              ),
                              0,
                              AST$(
                                9,
                                3630,
                                35,
                                0,
                                true
                              ),
                              AST$(
                                17,
                                3630,
                                40,
                                0,
                                "reason"
                              )
                            )
                          )
                        )
                      )
                    )
                  ),
                  AST$(
                    3,
                    3632,
                    1,
                    0,
                    AST$(
                      3,
                      3632,
                      1,
                      0,
                      AST$(
                        17,
                        3632,
                        1,
                        0,
                        "__defer"
                      ),
                      ".",
                      AST$(
                        9,
                        3632,
                        11,
                        0,
                        "fulfilled"
                      )
                    ),
                    "=",
                    AST$(
                      16,
                      3632,
                      25,
                      0,
                      0,
                      [
                        AST$(
                          17,
                          3632,
                          26,
                          0,
                          "value"
                        )
                      ],
                      ["d"],
                      AST$(
                        4,
                        3633,
                        1,
                        0,
                        0,
                        AST$(
                          3,
                          3633,
                          1,
                          0,
                          AST$(
                            17,
                            3633,
                            8,
                            0,
                            "d"
                          ),
                          "=",
                          AST$(
                            7,
                            3633,
                            12,
                            0,
                            AST$(
                              17,
                              3633,
                              12,
                              0,
                              "__defer"
                            ),
                            0
                          )
                        ),
                        AST$(
                          7,
                          3634,
                          1,
                          0,
                          AST$(
                            3,
                            3634,
                            1,
                            0,
                            AST$(
                              17,
                              3634,
                              1,
                              0,
                              "d"
                            ),
                            ".",
                            AST$(
                              9,
                              3634,
                              7,
                              0,
                              "fulfill"
                            )
                          ),
                          0,
                          AST$(
                            17,
                            3634,
                            15,
                            0,
                            "value"
                          )
                        ),
                        AST$(
                          23,
                          3635,
                          1,
                          0,
                          AST$(
                            3,
                            3635,
                            1,
                            0,
                            AST$(
                              17,
                              3635,
                              1,
                              0,
                              "d"
                            ),
                            ".",
                            AST$(
                              9,
                              3635,
                              7,
                              0,
                              "promise"
                            )
                          )
                        )
                      )
                    )
                  ),
                  AST$(
                    3,
                    3636,
                    1,
                    0,
                    AST$(
                      3,
                      3636,
                      1,
                      0,
                      AST$(
                        17,
                        3636,
                        1,
                        0,
                        "__defer"
                      ),
                      ".",
                      AST$(
                        9,
                        3636,
                        11,
                        0,
                        "rejected"
                      )
                    ),
                    "=",
                    AST$(
                      16,
                      3636,
                      24,
                      0,
                      0,
                      [
                        AST$(
                          17,
                          3636,
                          25,
                          0,
                          "reason"
                        )
                      ],
                      ["d"],
                      AST$(
                        4,
                        3637,
                        1,
                        0,
                        0,
                        AST$(
                          3,
                          3637,
                          1,
                          0,
                          AST$(
                            17,
                            3637,
                            8,
                            0,
                            "d"
                          ),
                          "=",
                          AST$(
                            7,
                            3637,
                            12,
                            0,
                            AST$(
                              17,
                              3637,
                              12,
                              0,
                              "__defer"
                            ),
                            0
                          )
                        ),
                        AST$(
                          7,
                          3638,
                          1,
                          0,
                          AST$(
                            3,
                            3638,
                            1,
                            0,
                            AST$(
                              17,
                              3638,
                              1,
                              0,
                              "d"
                            ),
                            ".",
                            AST$(
                              9,
                              3638,
                              7,
                              0,
                              "reject"
                            )
                          ),
                          0,
                          AST$(
                            17,
                            3638,
                            14,
                            0,
                            "reason"
                          )
                        ),
                        AST$(
                          23,
                          3639,
                          1,
                          0,
                          AST$(
                            3,
                            3639,
                            1,
                            0,
                            AST$(
                              17,
                              3639,
                              1,
                              0,
                              "d"
                            ),
                            ".",
                            AST$(
                              9,
                              3639,
                              7,
                              0,
                              "promise"
                            )
                          )
                        )
                      )
                    )
                  ),
                  AST$(
                    23,
                    3640,
                    1,
                    0,
                    AST$(
                      17,
                      3640,
                      1,
                      0,
                      "__defer"
                    )
                  )
                )
              ),
              0
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.makeObject({
              fulfill: TYPE$.generic(TYPE$.functionBase, TYPE$["undefined"]),
              promise: TYPE$.makeObject({
                sync: TYPE$.generic(TYPE$.functionBase, TYPE$.number),
                then: TYPE$["function"]
              }),
              reject: TYPE$.generic(TYPE$.functionBase, TYPE$["undefined"])
            })),
            dependencies: ["setImmediate"]
          },
          __generatorToPromise: {
            helper: AST$(
              16,
              3642,
              41,
              0,
              0,
              [
                AST$(
                  17,
                  3642,
                  42,
                  0,
                  "generator"
                ),
                AST$(
                  17,
                  3642,
                  83,
                  0,
                  "allowSync"
                )
              ],
              0,
              AST$(
                4,
                3642,
                41,
                0,
                0,
                AST$(
                  18,
                  3642,
                  41,
                  0,
                  AST$(
                    3,
                    3642,
                    41,
                    0,
                    AST$(
                      3,
                      3642,
                      41,
                      0,
                      AST$(
                        30,
                        3642,
                        41,
                        0,
                        "typeof",
                        AST$(
                          17,
                          3642,
                          42,
                          0,
                          "generator"
                        )
                      ),
                      "!==",
                      AST$(
                        9,
                        3642,
                        41,
                        0,
                        "object"
                      )
                    ),
                    "||",
                    AST$(
                      3,
                      3642,
                      41,
                      0,
                      AST$(
                        17,
                        3642,
                        42,
                        0,
                        "generator"
                      ),
                      "===",
                      AST$(
                        9,
                        1,
                        1,
                        0,
                        null
                      )
                    )
                  ),
                  AST$(
                    26,
                    3642,
                    41,
                    0,
                    AST$(
                      7,
                      3642,
                      41,
                      0,
                      AST$(
                        17,
                        3642,
                        41,
                        0,
                        "TypeError"
                      ),
                      0,
                      AST$(
                        3,
                        3642,
                        41,
                        0,
                        AST$(
                          9,
                          3642,
                          41,
                          0,
                          "Expected generator to be an Object, got "
                        ),
                        "+",
                        AST$(
                          7,
                          3642,
                          41,
                          0,
                          AST$(
                            17,
                            3642,
                            41,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            3642,
                            42,
                            0,
                            "generator"
                          )
                        )
                      )
                    )
                  ),
                  AST$(
                    4,
                    1,
                    1,
                    0,
                    0,
                    AST$(
                      18,
                      3642,
                      41,
                      0,
                      AST$(
                        3,
                        3642,
                        41,
                        0,
                        AST$(
                          30,
                          3642,
                          41,
                          0,
                          "typeof",
                          AST$(
                            3,
                            3642,
                            41,
                            0,
                            AST$(
                              17,
                              3642,
                              42,
                              0,
                              "generator"
                            ),
                            ".",
                            AST$(
                              9,
                              3642,
                              56,
                              0,
                              "send"
                            )
                          )
                        ),
                        "!==",
                        AST$(
                          9,
                          3642,
                          41,
                          0,
                          "function"
                        )
                      ),
                      AST$(
                        26,
                        3642,
                        41,
                        0,
                        AST$(
                          7,
                          3642,
                          41,
                          0,
                          AST$(
                            17,
                            3642,
                            41,
                            0,
                            "TypeError"
                          ),
                          0,
                          AST$(
                            3,
                            3642,
                            41,
                            0,
                            AST$(
                              9,
                              3642,
                              41,
                              0,
                              "Expected generator.send to be a Function, got "
                            ),
                            "+",
                            AST$(
                              7,
                              3642,
                              41,
                              0,
                              AST$(
                                17,
                                3642,
                                41,
                                0,
                                "__typeof"
                              ),
                              0,
                              AST$(
                                3,
                                3642,
                                41,
                                0,
                                AST$(
                                  17,
                                  3642,
                                  42,
                                  0,
                                  "generator"
                                ),
                                ".",
                                AST$(
                                  9,
                                  3642,
                                  56,
                                  0,
                                  "send"
                                )
                              )
                            )
                          )
                        )
                      )
                    ),
                    AST$(
                      18,
                      3642,
                      41,
                      0,
                      AST$(
                        3,
                        3642,
                        41,
                        0,
                        AST$(
                          30,
                          3642,
                          41,
                          0,
                          "typeof",
                          AST$(
                            3,
                            3642,
                            41,
                            0,
                            AST$(
                              17,
                              3642,
                              42,
                              0,
                              "generator"
                            ),
                            ".",
                            AST$(
                              9,
                              3642,
                              68,
                              0,
                              "throw"
                            )
                          )
                        ),
                        "!==",
                        AST$(
                          9,
                          3642,
                          41,
                          0,
                          "function"
                        )
                      ),
                      AST$(
                        26,
                        3642,
                        41,
                        0,
                        AST$(
                          7,
                          3642,
                          41,
                          0,
                          AST$(
                            17,
                            3642,
                            41,
                            0,
                            "TypeError"
                          ),
                          0,
                          AST$(
                            3,
                            3642,
                            41,
                            0,
                            AST$(
                              9,
                              3642,
                              41,
                              0,
                              "Expected generator.throw to be a Function, got "
                            ),
                            "+",
                            AST$(
                              7,
                              3642,
                              41,
                              0,
                              AST$(
                                17,
                                3642,
                                41,
                                0,
                                "__typeof"
                              ),
                              0,
                              AST$(
                                3,
                                3642,
                                41,
                                0,
                                AST$(
                                  17,
                                  3642,
                                  42,
                                  0,
                                  "generator"
                                ),
                                ".",
                                AST$(
                                  9,
                                  3642,
                                  68,
                                  0,
                                  "throw"
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  3642,
                  41,
                  0,
                  AST$(
                    3,
                    3642,
                    41,
                    0,
                    AST$(
                      17,
                      3642,
                      83,
                      0,
                      "allowSync"
                    ),
                    "==",
                    AST$(
                      9,
                      1,
                      1,
                      0,
                      null
                    )
                  ),
                  AST$(
                    3,
                    3642,
                    41,
                    0,
                    AST$(
                      17,
                      3642,
                      83,
                      0,
                      "allowSync"
                    ),
                    "=",
                    AST$(
                      9,
                      1,
                      1,
                      0,
                      false
                    )
                  ),
                  AST$(
                    18,
                    3642,
                    41,
                    0,
                    AST$(
                      3,
                      3642,
                      41,
                      0,
                      AST$(
                        30,
                        3642,
                        41,
                        0,
                        "typeof",
                        AST$(
                          17,
                          3642,
                          83,
                          0,
                          "allowSync"
                        )
                      ),
                      "!==",
                      AST$(
                        9,
                        3642,
                        41,
                        0,
                        "boolean"
                      )
                    ),
                    AST$(
                      26,
                      3642,
                      41,
                      0,
                      AST$(
                        7,
                        3642,
                        41,
                        0,
                        AST$(
                          17,
                          3642,
                          41,
                          0,
                          "TypeError"
                        ),
                        0,
                        AST$(
                          3,
                          3642,
                          41,
                          0,
                          AST$(
                            9,
                            3642,
                            41,
                            0,
                            "Expected allowSync to be a Boolean, got "
                          ),
                          "+",
                          AST$(
                            7,
                            3642,
                            41,
                            0,
                            AST$(
                              17,
                              3642,
                              41,
                              0,
                              "__typeof"
                            ),
                            0,
                            AST$(
                              17,
                              3642,
                              83,
                              0,
                              "allowSync"
                            )
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  16,
                  3643,
                  1,
                  0,
                  AST$(
                    17,
                    3643,
                    6,
                    0,
                    "continuer"
                  ),
                  [
                    AST$(
                      17,
                      3643,
                      17,
                      0,
                      "verb"
                    ),
                    AST$(
                      17,
                      3643,
                      22,
                      0,
                      "arg"
                    )
                  ],
                  ["item"],
                  AST$(
                    4,
                    3644,
                    1,
                    0,
                    0,
                    AST$(
                      28,
                      3645,
                      1,
                      0,
                      AST$(
                        3,
                        3646,
                        1,
                        0,
                        AST$(
                          17,
                          3646,
                          1,
                          0,
                          "item"
                        ),
                        "=",
                        AST$(
                          7,
                          3646,
                          14,
                          0,
                          AST$(
                            3,
                            3646,
                            14,
                            0,
                            AST$(
                              17,
                              3646,
                              14,
                              0,
                              "generator"
                            ),
                            ".",
                            AST$(
                              17,
                              3646,
                              25,
                              0,
                              "verb"
                            )
                          ),
                          0,
                          AST$(
                            17,
                            3646,
                            31,
                            0,
                            "arg"
                          )
                        )
                      ),
                      AST$(
                        17,
                        3647,
                        10,
                        0,
                        "e"
                      ),
                      AST$(
                        23,
                        3648,
                        1,
                        0,
                        AST$(
                          7,
                          3648,
                          13,
                          0,
                          AST$(
                            3,
                            3648,
                            13,
                            0,
                            AST$(
                              17,
                              3648,
                              13,
                              0,
                              "__defer"
                            ),
                            ".",
                            AST$(
                              9,
                              3648,
                              22,
                              0,
                              "rejected"
                            )
                          ),
                          0,
                          AST$(
                            17,
                            3648,
                            31,
                            0,
                            "e"
                          )
                        )
                      )
                    ),
                    AST$(
                      18,
                      3649,
                      1,
                      0,
                      AST$(
                        3,
                        3649,
                        7,
                        0,
                        AST$(
                          17,
                          3649,
                          7,
                          0,
                          "item"
                        ),
                        ".",
                        AST$(
                          9,
                          3649,
                          13,
                          0,
                          "done"
                        )
                      ),
                      AST$(
                        23,
                        3650,
                        1,
                        0,
                        AST$(
                          7,
                          3650,
                          1,
                          0,
                          AST$(
                            3,
                            3650,
                            1,
                            0,
                            AST$(
                              17,
                              3650,
                              1,
                              0,
                              "__defer"
                            ),
                            ".",
                            AST$(
                              9,
                              3650,
                              15,
                              0,
                              "fulfilled"
                            )
                          ),
                          0,
                          AST$(
                            3,
                            3650,
                            25,
                            0,
                            AST$(
                              17,
                              3650,
                              25,
                              0,
                              "item"
                            ),
                            ".",
                            AST$(
                              9,
                              3650,
                              30,
                              0,
                              "value"
                            )
                          )
                        )
                      ),
                      AST$(
                        23,
                        3652,
                        1,
                        0,
                        AST$(
                          7,
                          3652,
                          1,
                          0,
                          AST$(
                            3,
                            3652,
                            1,
                            0,
                            AST$(
                              3,
                              3652,
                              1,
                              0,
                              AST$(
                                17,
                                3652,
                                1,
                                0,
                                "item"
                              ),
                              ".",
                              AST$(
                                9,
                                3652,
                                12,
                                0,
                                "value"
                              )
                            ),
                            ".",
                            AST$(
                              9,
                              3652,
                              18,
                              0,
                              "then"
                            )
                          ),
                          0,
                          AST$(
                            17,
                            3652,
                            23,
                            0,
                            "callback"
                          ),
                          AST$(
                            17,
                            3652,
                            32,
                            0,
                            "errback"
                          ),
                          AST$(
                            17,
                            3652,
                            41,
                            0,
                            "allowSync"
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  16,
                  3653,
                  1,
                  0,
                  AST$(
                    17,
                    3653,
                    6,
                    0,
                    "callback"
                  ),
                  [
                    AST$(
                      17,
                      3653,
                      16,
                      0,
                      "value"
                    )
                  ],
                  0,
                  AST$(
                    23,
                    3653,
                    25,
                    0,
                    AST$(
                      7,
                      3653,
                      25,
                      0,
                      AST$(
                        17,
                        3653,
                        25,
                        0,
                        "continuer"
                      ),
                      0,
                      AST$(
                        9,
                        3653,
                        37,
                        0,
                        "send"
                      ),
                      AST$(
                        17,
                        3653,
                        42,
                        0,
                        "value"
                      )
                    )
                  )
                ),
                AST$(
                  16,
                  3654,
                  1,
                  0,
                  AST$(
                    17,
                    3654,
                    6,
                    0,
                    "errback"
                  ),
                  [
                    AST$(
                      17,
                      3654,
                      15,
                      0,
                      "value"
                    )
                  ],
                  0,
                  AST$(
                    23,
                    3654,
                    24,
                    0,
                    AST$(
                      7,
                      3654,
                      24,
                      0,
                      AST$(
                        17,
                        3654,
                        24,
                        0,
                        "continuer"
                      ),
                      0,
                      AST$(
                        9,
                        3654,
                        36,
                        0,
                        "throw"
                      ),
                      AST$(
                        17,
                        3654,
                        42,
                        0,
                        "value"
                      )
                    )
                  )
                ),
                AST$(
                  23,
                  3655,
                  1,
                  0,
                  AST$(
                    7,
                    3655,
                    1,
                    0,
                    AST$(
                      17,
                      3655,
                      1,
                      0,
                      "callback"
                    ),
                    0,
                    AST$(9, 3655, 12, 0)
                  )
                )
              )
            ),
            type: TYPE$["function"],
            dependencies: ["__defer", "__typeof"]
          },
          __promise: {
            helper: AST$(
              16,
              3656,
              28,
              0,
              0,
              [
                AST$(
                  17,
                  3656,
                  36,
                  0,
                  "value"
                ),
                AST$(
                  17,
                  3656,
                  43,
                  0,
                  "allowSync"
                )
              ],
              ["factory"],
              AST$(
                4,
                3656,
                28,
                0,
                0,
                AST$(
                  18,
                  3656,
                  28,
                  0,
                  AST$(
                    3,
                    3656,
                    28,
                    0,
                    AST$(
                      17,
                      3656,
                      43,
                      0,
                      "allowSync"
                    ),
                    "==",
                    AST$(
                      9,
                      1,
                      1,
                      0,
                      null
                    )
                  ),
                  AST$(
                    3,
                    3656,
                    28,
                    0,
                    AST$(
                      17,
                      3656,
                      43,
                      0,
                      "allowSync"
                    ),
                    "=",
                    AST$(
                      9,
                      1,
                      1,
                      0,
                      false
                    )
                  ),
                  AST$(
                    18,
                    3656,
                    28,
                    0,
                    AST$(
                      3,
                      3656,
                      28,
                      0,
                      AST$(
                        30,
                        3656,
                        28,
                        0,
                        "typeof",
                        AST$(
                          17,
                          3656,
                          43,
                          0,
                          "allowSync"
                        )
                      ),
                      "!==",
                      AST$(
                        9,
                        3656,
                        28,
                        0,
                        "boolean"
                      )
                    ),
                    AST$(
                      26,
                      3656,
                      28,
                      0,
                      AST$(
                        7,
                        3656,
                        28,
                        0,
                        AST$(
                          17,
                          3656,
                          28,
                          0,
                          "TypeError"
                        ),
                        0,
                        AST$(
                          3,
                          3656,
                          28,
                          0,
                          AST$(
                            9,
                            3656,
                            28,
                            0,
                            "Expected allowSync to be a Boolean, got "
                          ),
                          "+",
                          AST$(
                            7,
                            3656,
                            28,
                            0,
                            AST$(
                              17,
                              3656,
                              28,
                              0,
                              "__typeof"
                            ),
                            0,
                            AST$(
                              17,
                              3656,
                              43,
                              0,
                              "allowSync"
                            )
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  3657,
                  1,
                  0,
                  AST$(
                    3,
                    3657,
                    5,
                    0,
                    AST$(
                      30,
                      3657,
                      5,
                      0,
                      "typeof",
                      AST$(
                        17,
                        3657,
                        18,
                        0,
                        "value"
                      )
                    ),
                    "===",
                    AST$(
                      9,
                      3657,
                      5,
                      0,
                      "function"
                    )
                  ),
                  AST$(
                    4,
                    3658,
                    1,
                    0,
                    0,
                    AST$(
                      3,
                      3658,
                      1,
                      0,
                      AST$(
                        17,
                        3658,
                        8,
                        0,
                        "factory"
                      ),
                      "=",
                      AST$(
                        16,
                        3658,
                        16,
                        0,
                        0,
                        0,
                        0,
                        AST$(
                          23,
                          3658,
                          21,
                          0,
                          AST$(
                            7,
                            3658,
                            21,
                            0,
                            AST$(
                              17,
                              3658,
                              21,
                              0,
                              "__generatorToPromise"
                            ),
                            0,
                            AST$(
                              7,
                              3658,
                              45,
                              0,
                              AST$(
                                3,
                                3658,
                                45,
                                0,
                                AST$(
                                  17,
                                  3658,
                                  45,
                                  0,
                                  "value"
                                ),
                                ".",
                                AST$(
                                  9,
                                  3658,
                                  45,
                                  0,
                                  "apply"
                                )
                              ),
                              0,
                              AST$(25, 3658, 52, 0),
                              AST$(1, 3658, 61, 0)
                            )
                          )
                        )
                      )
                    ),
                    AST$(
                      3,
                      3659,
                      1,
                      0,
                      AST$(
                        3,
                        3659,
                        1,
                        0,
                        AST$(
                          17,
                          3659,
                          1,
                          0,
                          "factory"
                        ),
                        ".",
                        AST$(
                          9,
                          3659,
                          13,
                          0,
                          "sync"
                        )
                      ),
                      "=",
                      AST$(
                        16,
                        3659,
                        22,
                        0,
                        0,
                        0,
                        0,
                        AST$(
                          23,
                          3659,
                          24,
                          0,
                          AST$(
                            7,
                            3659,
                            24,
                            0,
                            AST$(
                              3,
                              3659,
                              24,
                              0,
                              AST$(
                                7,
                                3659,
                                24,
                                0,
                                AST$(
                                  17,
                                  3659,
                                  24,
                                  0,
                                  "__generatorToPromise"
                                ),
                                0,
                                AST$(
                                  7,
                                  3659,
                                  48,
                                  0,
                                  AST$(
                                    3,
                                    3659,
                                    48,
                                    0,
                                    AST$(
                                      17,
                                      3659,
                                      48,
                                      0,
                                      "value"
                                    ),
                                    ".",
                                    AST$(
                                      9,
                                      3659,
                                      48,
                                      0,
                                      "apply"
                                    )
                                  ),
                                  0,
                                  AST$(25, 3659, 55, 0),
                                  AST$(1, 3659, 64, 0)
                                ),
                                AST$(
                                  9,
                                  3659,
                                  75,
                                  0,
                                  true
                                )
                              ),
                              ".",
                              AST$(
                                9,
                                3659,
                                82,
                                0,
                                "sync"
                              )
                            ),
                            0
                          )
                        )
                      )
                    ),
                    AST$(
                      23,
                      3660,
                      1,
                      0,
                      AST$(
                        17,
                        3660,
                        1,
                        0,
                        "factory"
                      )
                    )
                  ),
                  AST$(
                    23,
                    3662,
                    1,
                    0,
                    AST$(
                      7,
                      3662,
                      1,
                      0,
                      AST$(
                        17,
                        3662,
                        1,
                        0,
                        "__generatorToPromise"
                      ),
                      0,
                      AST$(
                        17,
                        3662,
                        28,
                        0,
                        "value"
                      ),
                      AST$(
                        17,
                        3662,
                        34,
                        0,
                        "allowSync"
                      )
                    )
                  )
                )
              )
            ),
            type: TYPE$["function"],
            dependencies: ["__generatorToPromise", "__toArray", "__typeof"]
          },
          __fromPromise: {
            helper: AST$(
              16,
              3700,
              33,
              0,
              0,
              [
                AST$(
                  17,
                  3700,
                  34,
                  0,
                  "promise"
                )
              ],
              0,
              AST$(
                4,
                3700,
                33,
                0,
                0,
                AST$(
                  18,
                  3700,
                  33,
                  0,
                  AST$(
                    3,
                    3700,
                    33,
                    0,
                    AST$(
                      3,
                      3700,
                      33,
                      0,
                      AST$(
                        30,
                        3700,
                        33,
                        0,
                        "typeof",
                        AST$(
                          17,
                          3700,
                          34,
                          0,
                          "promise"
                        )
                      ),
                      "!==",
                      AST$(
                        9,
                        3700,
                        33,
                        0,
                        "object"
                      )
                    ),
                    "||",
                    AST$(
                      3,
                      3700,
                      33,
                      0,
                      AST$(
                        17,
                        3700,
                        34,
                        0,
                        "promise"
                      ),
                      "===",
                      AST$(
                        9,
                        1,
                        1,
                        0,
                        null
                      )
                    )
                  ),
                  AST$(
                    26,
                    3700,
                    33,
                    0,
                    AST$(
                      7,
                      3700,
                      33,
                      0,
                      AST$(
                        17,
                        3700,
                        33,
                        0,
                        "TypeError"
                      ),
                      0,
                      AST$(
                        3,
                        3700,
                        33,
                        0,
                        AST$(
                          9,
                          3700,
                          33,
                          0,
                          "Expected promise to be an Object, got "
                        ),
                        "+",
                        AST$(
                          7,
                          3700,
                          33,
                          0,
                          AST$(
                            17,
                            3700,
                            33,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            3700,
                            34,
                            0,
                            "promise"
                          )
                        )
                      )
                    )
                  ),
                  AST$(
                    18,
                    3700,
                    33,
                    0,
                    AST$(
                      3,
                      3700,
                      33,
                      0,
                      AST$(
                        30,
                        3700,
                        33,
                        0,
                        "typeof",
                        AST$(
                          3,
                          3700,
                          33,
                          0,
                          AST$(
                            17,
                            3700,
                            34,
                            0,
                            "promise"
                          ),
                          ".",
                          AST$(
                            9,
                            3700,
                            46,
                            0,
                            "then"
                          )
                        )
                      ),
                      "!==",
                      AST$(
                        9,
                        3700,
                        33,
                        0,
                        "function"
                      )
                    ),
                    AST$(
                      26,
                      3700,
                      33,
                      0,
                      AST$(
                        7,
                        3700,
                        33,
                        0,
                        AST$(
                          17,
                          3700,
                          33,
                          0,
                          "TypeError"
                        ),
                        0,
                        AST$(
                          3,
                          3700,
                          33,
                          0,
                          AST$(
                            9,
                            3700,
                            33,
                            0,
                            "Expected promise.then to be a Function, got "
                          ),
                          "+",
                          AST$(
                            7,
                            3700,
                            33,
                            0,
                            AST$(
                              17,
                              3700,
                              33,
                              0,
                              "__typeof"
                            ),
                            0,
                            AST$(
                              3,
                              3700,
                              33,
                              0,
                              AST$(
                                17,
                                3700,
                                34,
                                0,
                                "promise"
                              ),
                              ".",
                              AST$(
                                9,
                                3700,
                                46,
                                0,
                                "then"
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  23,
                  3700,
                  65,
                  0,
                  AST$(
                    16,
                    3700,
                    65,
                    0,
                    0,
                    [
                      AST$(
                        17,
                        3700,
                        66,
                        0,
                        "callback"
                      )
                    ],
                    0,
                    AST$(
                      7,
                      3701,
                      1,
                      0,
                      AST$(
                        3,
                        3701,
                        1,
                        0,
                        AST$(
                          17,
                          3701,
                          1,
                          0,
                          "promise"
                        ),
                        ".",
                        AST$(
                          9,
                          3701,
                          11,
                          0,
                          "then"
                        )
                      ),
                      0,
                      AST$(
                        16,
                        3702,
                        6,
                        0,
                        0,
                        [
                          AST$(
                            17,
                            3702,
                            7,
                            0,
                            "value"
                          )
                        ],
                        0,
                        AST$(
                          23,
                          3702,
                          16,
                          0,
                          AST$(
                            7,
                            3702,
                            16,
                            0,
                            AST$(
                              17,
                              3702,
                              16,
                              0,
                              "setImmediate"
                            ),
                            0,
                            AST$(
                              17,
                              3702,
                              31,
                              0,
                              "callback"
                            ),
                            AST$(
                              9,
                              3702,
                              40,
                              0,
                              null
                            ),
                            AST$(
                              17,
                              3702,
                              46,
                              0,
                              "value"
                            )
                          )
                        )
                      ),
                      AST$(
                        16,
                        3703,
                        6,
                        0,
                        0,
                        [
                          AST$(
                            17,
                            3703,
                            7,
                            0,
                            "reason"
                          )
                        ],
                        0,
                        AST$(
                          23,
                          3703,
                          17,
                          0,
                          AST$(
                            7,
                            3703,
                            17,
                            0,
                            AST$(
                              17,
                              3703,
                              17,
                              0,
                              "setImmediate"
                            ),
                            0,
                            AST$(
                              17,
                              3703,
                              32,
                              0,
                              "callback"
                            ),
                            AST$(
                              17,
                              3703,
                              41,
                              0,
                              "reason"
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.generic(TYPE$.functionBase, TYPE$["undefined"])),
            dependencies: ["__typeof", "setImmediate"]
          },
          __toPromise: {
            helper: AST$(
              16,
              3710,
              31,
              0,
              0,
              [
                AST$(
                  17,
                  3710,
                  32,
                  0,
                  "func"
                ),
                AST$(
                  17,
                  3710,
                  43,
                  0,
                  "context"
                ),
                AST$(
                  17,
                  3710,
                  52,
                  0,
                  "args"
                )
              ],
              ["d"],
              AST$(
                4,
                3710,
                31,
                0,
                0,
                AST$(
                  18,
                  3710,
                  31,
                  0,
                  AST$(
                    3,
                    3710,
                    31,
                    0,
                    AST$(
                      30,
                      3710,
                      31,
                      0,
                      "typeof",
                      AST$(
                        17,
                        3710,
                        32,
                        0,
                        "func"
                      )
                    ),
                    "!==",
                    AST$(
                      9,
                      3710,
                      31,
                      0,
                      "function"
                    )
                  ),
                  AST$(
                    26,
                    3710,
                    31,
                    0,
                    AST$(
                      7,
                      3710,
                      31,
                      0,
                      AST$(
                        17,
                        3710,
                        31,
                        0,
                        "TypeError"
                      ),
                      0,
                      AST$(
                        3,
                        3710,
                        31,
                        0,
                        AST$(
                          9,
                          3710,
                          31,
                          0,
                          "Expected func to be a Function, got "
                        ),
                        "+",
                        AST$(
                          7,
                          3710,
                          31,
                          0,
                          AST$(
                            17,
                            3710,
                            31,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            3710,
                            32,
                            0,
                            "func"
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  3,
                  3711,
                  1,
                  0,
                  AST$(
                    17,
                    3711,
                    6,
                    0,
                    "d"
                  ),
                  "=",
                  AST$(
                    7,
                    3711,
                    10,
                    0,
                    AST$(
                      17,
                      3711,
                      10,
                      0,
                      "__defer"
                    ),
                    0
                  )
                ),
                AST$(
                  7,
                  3712,
                  1,
                  0,
                  AST$(
                    3,
                    3712,
                    1,
                    0,
                    AST$(
                      17,
                      3712,
                      1,
                      0,
                      "func"
                    ),
                    ".",
                    AST$(
                      9,
                      3712,
                      1,
                      0,
                      "apply"
                    )
                  ),
                  0,
                  AST$(
                    17,
                    3712,
                    9,
                    0,
                    "context"
                  ),
                  AST$(
                    7,
                    3712,
                    1,
                    0,
                    AST$(
                      3,
                      3712,
                      1,
                      0,
                      AST$(
                        7,
                        3712,
                        21,
                        0,
                        AST$(
                          17,
                          3712,
                          21,
                          0,
                          "__toArray"
                        ),
                        0,
                        AST$(
                          17,
                          3712,
                          21,
                          0,
                          "args"
                        )
                      ),
                      ".",
                      AST$(
                        9,
                        3712,
                        1,
                        0,
                        "concat"
                      )
                    ),
                    0,
                    AST$(
                      2,
                      3712,
                      28,
                      0,
                      AST$(
                        16,
                        3712,
                        28,
                        0,
                        0,
                        [
                          AST$(
                            17,
                            3712,
                            29,
                            0,
                            "err"
                          ),
                          AST$(
                            17,
                            3712,
                            33,
                            0,
                            "value"
                          )
                        ],
                        0,
                        AST$(
                          19,
                          3713,
                          1,
                          0,
                          AST$(
                            3,
                            3713,
                            7,
                            0,
                            AST$(
                              17,
                              3713,
                              7,
                              0,
                              "err"
                            ),
                            "!=",
                            AST$(
                              9,
                              1,
                              1,
                              0,
                              null
                            )
                          ),
                          AST$(
                            7,
                            3714,
                            1,
                            0,
                            AST$(
                              3,
                              3714,
                              1,
                              0,
                              AST$(
                                17,
                                3714,
                                1,
                                0,
                                "d"
                              ),
                              ".",
                              AST$(
                                9,
                                3714,
                                9,
                                0,
                                "reject"
                              )
                            ),
                            0,
                            AST$(
                              17,
                              3714,
                              16,
                              0,
                              "err"
                            )
                          ),
                          AST$(
                            7,
                            3716,
                            1,
                            0,
                            AST$(
                              3,
                              3716,
                              1,
                              0,
                              AST$(
                                17,
                                3716,
                                1,
                                0,
                                "d"
                              ),
                              ".",
                              AST$(
                                9,
                                3716,
                                9,
                                0,
                                "fulfill"
                              )
                            ),
                            0,
                            AST$(
                              17,
                              3716,
                              17,
                              0,
                              "value"
                            )
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  23,
                  3717,
                  1,
                  0,
                  AST$(
                    3,
                    3717,
                    1,
                    0,
                    AST$(
                      17,
                      3717,
                      1,
                      0,
                      "d"
                    ),
                    ".",
                    AST$(
                      9,
                      3717,
                      5,
                      0,
                      "promise"
                    )
                  )
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.makeObject({
              sync: TYPE$.generic(TYPE$.functionBase, TYPE$.number),
              then: TYPE$["function"]
            })),
            dependencies: ["__defer", "__toArray", "__typeof"]
          },
          __generator: {
            helper: AST$(
              16,
              3747,
              30,
              0,
              0,
              [
                AST$(
                  17,
                  3747,
                  31,
                  0,
                  "func"
                )
              ],
              0,
              AST$(
                23,
                3747,
                41,
                0,
                AST$(
                  16,
                  3747,
                  41,
                  0,
                  0,
                  0,
                  ["_this", "data"],
                  AST$(
                    4,
                    3748,
                    1,
                    0,
                    0,
                    AST$(
                      3,
                      3748,
                      1,
                      0,
                      AST$(
                        17,
                        3748,
                        1,
                        0,
                        "_this"
                      ),
                      "=",
                      AST$(25, 3748, 1, 0)
                    ),
                    AST$(
                      3,
                      3748,
                      1,
                      0,
                      AST$(
                        17,
                        3748,
                        14,
                        0,
                        "data"
                      ),
                      "=",
                      AST$(
                        2,
                        3748,
                        32,
                        0,
                        AST$(25, 3748, 34, 0),
                        AST$(
                          7,
                          3748,
                          39,
                          0,
                          AST$(
                            3,
                            3748,
                            39,
                            0,
                            AST$(
                              17,
                              3748,
                              39,
                              0,
                              "__slice"
                            ),
                            ".",
                            AST$(
                              9,
                              3748,
                              48,
                              0,
                              "call"
                            )
                          ),
                          0,
                          AST$(1, 3748, 53, 0)
                        )
                      )
                    ),
                    AST$(
                      23,
                      3749,
                      1,
                      0,
                      AST$(
                        21,
                        3749,
                        1,
                        0,
                        3750,
                        5,
                        void 0,
                        "iterator",
                        AST$(
                          16,
                          3750,
                          13,
                          0,
                          0,
                          0,
                          0,
                          AST$(
                            23,
                            3750,
                            18,
                            0,
                            AST$(25, 3750, 18, 0)
                          )
                        ),
                        3751,
                        5,
                        void 0,
                        "send",
                        AST$(
                          16,
                          3751,
                          9,
                          0,
                          0,
                          0,
                          ["tmp"],
                          AST$(
                            23,
                            3752,
                            1,
                            0,
                            AST$(
                              21,
                              3752,
                              1,
                              0,
                              3753,
                              10,
                              void 0,
                              "done",
                              AST$(
                                9,
                                3753,
                                9,
                                0,
                                true
                              ),
                              3754,
                              9,
                              void 0,
                              "value",
                              AST$(
                                19,
                                3754,
                                15,
                                0,
                                AST$(
                                  17,
                                  3754,
                                  18,
                                  0,
                                  "data"
                                ),
                                AST$(
                                  5,
                                  3755,
                                  1,
                                  0,
                                  AST$(
                                    3,
                                    3755,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      3755,
                                      14,
                                      0,
                                      "tmp"
                                    ),
                                    "=",
                                    AST$(
                                      17,
                                      3755,
                                      20,
                                      0,
                                      "data"
                                    )
                                  ),
                                  AST$(
                                    3,
                                    3756,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      3756,
                                      1,
                                      0,
                                      "data"
                                    ),
                                    "=",
                                    AST$(
                                      9,
                                      3756,
                                      18,
                                      0,
                                      null
                                    )
                                  ),
                                  AST$(
                                    7,
                                    3757,
                                    1,
                                    0,
                                    AST$(
                                      3,
                                      3757,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3757,
                                        1,
                                        0,
                                        "func"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3757,
                                        16,
                                        0,
                                        "apply"
                                      )
                                    ),
                                    0,
                                    AST$(
                                      3,
                                      3757,
                                      22,
                                      0,
                                      AST$(
                                        17,
                                        3757,
                                        22,
                                        0,
                                        "tmp"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3757,
                                        26,
                                        0,
                                        0
                                      )
                                    ),
                                    AST$(
                                      3,
                                      3757,
                                      29,
                                      0,
                                      AST$(
                                        17,
                                        3757,
                                        29,
                                        0,
                                        "tmp"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3757,
                                        34,
                                        0,
                                        1
                                      )
                                    )
                                  )
                                ),
                                AST$(9, 3759, 1, 0)
                              )
                            )
                          )
                        ),
                        3761,
                        5,
                        void 0,
                        "next",
                        AST$(
                          16,
                          3761,
                          9,
                          0,
                          0,
                          0,
                          0,
                          AST$(
                            23,
                            3761,
                            14,
                            0,
                            AST$(
                              7,
                              3761,
                              14,
                              0,
                              AST$(
                                3,
                                3761,
                                14,
                                0,
                                AST$(25, 3761, 14, 0),
                                ".",
                                AST$(
                                  9,
                                  3761,
                                  16,
                                  0,
                                  "send"
                                )
                              ),
                              0
                            )
                          )
                        ),
                        3762,
                        5,
                        void 0,
                        "throw",
                        AST$(
                          16,
                          3762,
                          10,
                          0,
                          0,
                          [
                            AST$(
                              17,
                              3762,
                              11,
                              0,
                              "err"
                            )
                          ],
                          0,
                          AST$(
                            4,
                            3763,
                            1,
                            0,
                            0,
                            AST$(
                              3,
                              3763,
                              1,
                              0,
                              AST$(
                                17,
                                3763,
                                1,
                                0,
                                "data"
                              ),
                              "=",
                              AST$(
                                9,
                                3763,
                                14,
                                0,
                                null
                              )
                            ),
                            AST$(
                              26,
                              3764,
                              1,
                              0,
                              AST$(
                                17,
                                3764,
                                12,
                                0,
                                "err"
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.generic(TYPE$.functionBase, TYPE$.makeObject({
              iterator: TYPE$["function"],
              next: TYPE$["function"],
              send: TYPE$.generic(TYPE$.functionBase, TYPE$.makeObject({ done: TYPE$.boolean })),
              "throw": TYPE$.generic(TYPE$.functionBase, TYPE$.none)
            }))),
            dependencies: ["__slice"]
          },
          __somePromise: {
            helper: AST$(
              16,
              3767,
              33,
              0,
              0,
              [
                AST$(
                  17,
                  3767,
                  34,
                  0,
                  "promises"
                )
              ],
              ["defer", "i"],
              AST$(
                4,
                3767,
                33,
                0,
                0,
                AST$(
                  18,
                  3767,
                  33,
                  0,
                  AST$(
                    30,
                    3767,
                    33,
                    0,
                    "!",
                    AST$(
                      7,
                      3767,
                      33,
                      0,
                      AST$(
                        17,
                        3767,
                        33,
                        0,
                        "__isArray"
                      ),
                      0,
                      AST$(
                        17,
                        3767,
                        34,
                        0,
                        "promises"
                      )
                    )
                  ),
                  AST$(
                    26,
                    3767,
                    33,
                    0,
                    AST$(
                      7,
                      3767,
                      33,
                      0,
                      AST$(
                        17,
                        3767,
                        33,
                        0,
                        "TypeError"
                      ),
                      0,
                      AST$(
                        3,
                        3767,
                        33,
                        0,
                        AST$(
                          9,
                          3767,
                          33,
                          0,
                          "Expected promises to be an Array, got "
                        ),
                        "+",
                        AST$(
                          7,
                          3767,
                          33,
                          0,
                          AST$(
                            17,
                            3767,
                            33,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            3767,
                            34,
                            0,
                            "promises"
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  3,
                  3768,
                  1,
                  0,
                  AST$(
                    17,
                    3768,
                    6,
                    0,
                    "defer"
                  ),
                  "=",
                  AST$(
                    7,
                    3768,
                    14,
                    0,
                    AST$(
                      17,
                      3768,
                      14,
                      0,
                      "__defer"
                    ),
                    0
                  )
                ),
                AST$(
                  3,
                  3769,
                  1,
                  0,
                  AST$(
                    17,
                    3769,
                    14,
                    0,
                    "i"
                  ),
                  "=",
                  AST$(
                    3,
                    3769,
                    18,
                    0,
                    AST$(
                      17,
                      3769,
                      18,
                      0,
                      "promises"
                    ),
                    ".",
                    AST$(
                      9,
                      3769,
                      28,
                      0,
                      "length"
                    )
                  )
                ),
                AST$(
                  14,
                  3770,
                  1,
                  0,
                  AST$(20, 3770, 1, 0),
                  AST$(
                    30,
                    3770,
                    8,
                    0,
                    "--post",
                    AST$(
                      17,
                      3770,
                      18,
                      0,
                      "i"
                    )
                  ),
                  AST$(20, 3770, 1, 0),
                  AST$(
                    7,
                    3771,
                    1,
                    0,
                    AST$(
                      3,
                      3771,
                      1,
                      0,
                      AST$(
                        3,
                        3771,
                        1,
                        0,
                        AST$(
                          17,
                          3771,
                          1,
                          0,
                          "promises"
                        ),
                        ".",
                        AST$(
                          17,
                          3771,
                          14,
                          0,
                          "i"
                        )
                      ),
                      ".",
                      AST$(
                        9,
                        3771,
                        17,
                        0,
                        "then"
                      )
                    ),
                    0,
                    AST$(
                      3,
                      3771,
                      22,
                      0,
                      AST$(
                        17,
                        3771,
                        22,
                        0,
                        "defer"
                      ),
                      ".",
                      AST$(
                        9,
                        3771,
                        28,
                        0,
                        "fulfill"
                      )
                    ),
                    AST$(
                      3,
                      3771,
                      36,
                      0,
                      AST$(
                        17,
                        3771,
                        36,
                        0,
                        "defer"
                      ),
                      ".",
                      AST$(
                        9,
                        3771,
                        43,
                        0,
                        "reject"
                      )
                    )
                  )
                ),
                AST$(
                  23,
                  3772,
                  1,
                  0,
                  AST$(
                    3,
                    3772,
                    1,
                    0,
                    AST$(
                      17,
                      3772,
                      1,
                      0,
                      "defer"
                    ),
                    ".",
                    AST$(
                      9,
                      3772,
                      9,
                      0,
                      "promise"
                    )
                  )
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.makeObject({
              sync: TYPE$.generic(TYPE$.functionBase, TYPE$.number),
              then: TYPE$["function"]
            })),
            dependencies: ["__defer", "__isArray", "__typeof"]
          },
          __everyPromise: {
            helper: AST$(
              16,
              3782,
              34,
              0,
              0,
              [
                AST$(
                  17,
                  3782,
                  35,
                  0,
                  "promises"
                )
              ],
              [
                "defer",
                "i",
                "isArray",
                "k",
                "remaining",
                "result",
                "v"
              ],
              AST$(
                4,
                3782,
                34,
                0,
                0,
                AST$(
                  18,
                  3782,
                  34,
                  0,
                  AST$(
                    3,
                    3782,
                    34,
                    0,
                    AST$(
                      3,
                      3782,
                      34,
                      0,
                      AST$(
                        30,
                        3782,
                        34,
                        0,
                        "typeof",
                        AST$(
                          17,
                          3782,
                          35,
                          0,
                          "promises"
                        )
                      ),
                      "!==",
                      AST$(
                        9,
                        3782,
                        34,
                        0,
                        "object"
                      )
                    ),
                    "||",
                    AST$(
                      3,
                      3782,
                      34,
                      0,
                      AST$(
                        17,
                        3782,
                        35,
                        0,
                        "promises"
                      ),
                      "===",
                      AST$(
                        9,
                        1,
                        1,
                        0,
                        null
                      )
                    )
                  ),
                  AST$(
                    26,
                    3782,
                    34,
                    0,
                    AST$(
                      7,
                      3782,
                      34,
                      0,
                      AST$(
                        17,
                        3782,
                        34,
                        0,
                        "TypeError"
                      ),
                      0,
                      AST$(
                        3,
                        3782,
                        34,
                        0,
                        AST$(
                          9,
                          3782,
                          34,
                          0,
                          "Expected promises to be an Object, got "
                        ),
                        "+",
                        AST$(
                          7,
                          3782,
                          34,
                          0,
                          AST$(
                            17,
                            3782,
                            34,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            3782,
                            35,
                            0,
                            "promises"
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  3,
                  3783,
                  1,
                  0,
                  AST$(
                    17,
                    3783,
                    6,
                    0,
                    "isArray"
                  ),
                  "=",
                  AST$(
                    7,
                    3783,
                    17,
                    0,
                    AST$(
                      17,
                      3783,
                      17,
                      0,
                      "__isArray"
                    ),
                    0,
                    AST$(
                      17,
                      3783,
                      27,
                      0,
                      "promises"
                    )
                  )
                ),
                AST$(
                  3,
                  3784,
                  1,
                  0,
                  AST$(
                    17,
                    3784,
                    6,
                    0,
                    "defer"
                  ),
                  "=",
                  AST$(
                    7,
                    3784,
                    14,
                    0,
                    AST$(
                      17,
                      3784,
                      14,
                      0,
                      "__defer"
                    ),
                    0
                  )
                ),
                AST$(
                  18,
                  3785,
                  15,
                  0,
                  AST$(
                    17,
                    3785,
                    18,
                    0,
                    "isArray"
                  ),
                  AST$(
                    3,
                    3785,
                    1,
                    0,
                    AST$(
                      17,
                      3785,
                      6,
                      0,
                      "result"
                    ),
                    "=",
                    AST$(2, 3785, 32, 0)
                  ),
                  AST$(
                    3,
                    3785,
                    1,
                    0,
                    AST$(
                      17,
                      3785,
                      6,
                      0,
                      "result"
                    ),
                    "=",
                    AST$(21, 3785, 40, 0)
                  )
                ),
                AST$(
                  3,
                  3786,
                  1,
                  0,
                  AST$(
                    17,
                    3786,
                    14,
                    0,
                    "remaining"
                  ),
                  "=",
                  AST$(
                    9,
                    3786,
                    27,
                    0,
                    0
                  )
                ),
                AST$(
                  16,
                  3787,
                  1,
                  0,
                  AST$(
                    17,
                    3787,
                    6,
                    0,
                    "handle"
                  ),
                  [
                    AST$(
                      17,
                      3787,
                      14,
                      0,
                      "key"
                    ),
                    AST$(
                      17,
                      3787,
                      18,
                      0,
                      "promise"
                    )
                  ],
                  0,
                  AST$(
                    23,
                    3788,
                    1,
                    0,
                    AST$(
                      7,
                      3788,
                      1,
                      0,
                      AST$(
                        3,
                        3788,
                        1,
                        0,
                        AST$(
                          17,
                          3788,
                          1,
                          0,
                          "promise"
                        ),
                        ".",
                        AST$(
                          9,
                          3788,
                          13,
                          0,
                          "then"
                        )
                      ),
                      0,
                      AST$(
                        16,
                        3789,
                        8,
                        0,
                        0,
                        [
                          AST$(
                            17,
                            3789,
                            9,
                            0,
                            "value"
                          )
                        ],
                        0,
                        AST$(
                          5,
                          3790,
                          1,
                          0,
                          AST$(
                            3,
                            3790,
                            1,
                            0,
                            AST$(
                              3,
                              3790,
                              1,
                              0,
                              AST$(
                                17,
                                3790,
                                1,
                                0,
                                "result"
                              ),
                              ".",
                              AST$(
                                17,
                                3790,
                                16,
                                0,
                                "key"
                              )
                            ),
                            "=",
                            AST$(
                              17,
                              3790,
                              23,
                              0,
                              "value"
                            )
                          ),
                          AST$(
                            19,
                            3791,
                            1,
                            0,
                            AST$(
                              3,
                              3791,
                              11,
                              0,
                              AST$(
                                30,
                                3791,
                                13,
                                0,
                                "--",
                                AST$(
                                  17,
                                  3791,
                                  13,
                                  0,
                                  "remaining"
                                )
                              ),
                              "===",
                              AST$(
                                9,
                                3791,
                                32,
                                0,
                                0
                              )
                            ),
                            AST$(
                              7,
                              3792,
                              1,
                              0,
                              AST$(
                                3,
                                3792,
                                1,
                                0,
                                AST$(
                                  17,
                                  3792,
                                  1,
                                  0,
                                  "defer"
                                ),
                                ".",
                                AST$(
                                  9,
                                  3792,
                                  17,
                                  0,
                                  "fulfill"
                                )
                              ),
                              0,
                              AST$(
                                17,
                                3792,
                                25,
                                0,
                                "result"
                              )
                            )
                          )
                        )
                      ),
                      AST$(
                        3,
                        3793,
                        7,
                        0,
                        AST$(
                          17,
                          3793,
                          7,
                          0,
                          "defer"
                        ),
                        ".",
                        AST$(
                          9,
                          3793,
                          13,
                          0,
                          "reject"
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  3794,
                  1,
                  0,
                  AST$(
                    17,
                    3794,
                    5,
                    0,
                    "isArray"
                  ),
                  AST$(
                    4,
                    3795,
                    1,
                    0,
                    0,
                    AST$(
                      3,
                      3795,
                      1,
                      0,
                      AST$(
                        17,
                        3795,
                        16,
                        0,
                        "i"
                      ),
                      "=",
                      AST$(
                        3,
                        3795,
                        20,
                        0,
                        AST$(
                          17,
                          3795,
                          20,
                          0,
                          "promises"
                        ),
                        ".",
                        AST$(
                          9,
                          3795,
                          30,
                          0,
                          "length"
                        )
                      )
                    ),
                    AST$(
                      3,
                      3796,
                      1,
                      0,
                      AST$(
                        17,
                        3796,
                        1,
                        0,
                        "remaining"
                      ),
                      "=",
                      AST$(
                        17,
                        3796,
                        17,
                        0,
                        "i"
                      )
                    ),
                    AST$(
                      14,
                      3797,
                      1,
                      0,
                      AST$(20, 3797, 1, 0),
                      AST$(
                        30,
                        3797,
                        10,
                        0,
                        "--post",
                        AST$(
                          17,
                          3797,
                          20,
                          0,
                          "i"
                        )
                      ),
                      AST$(20, 3797, 1, 0),
                      AST$(
                        7,
                        3798,
                        1,
                        0,
                        AST$(
                          17,
                          3798,
                          1,
                          0,
                          "handle"
                        ),
                        0,
                        AST$(
                          17,
                          3798,
                          14,
                          0,
                          "i"
                        ),
                        AST$(
                          3,
                          3798,
                          16,
                          0,
                          AST$(
                            17,
                            3798,
                            16,
                            0,
                            "promises"
                          ),
                          ".",
                          AST$(
                            17,
                            3798,
                            26,
                            0,
                            "i"
                          )
                        )
                      )
                    )
                  ),
                  AST$(
                    15,
                    3800,
                    1,
                    0,
                    AST$(
                      17,
                      3800,
                      8,
                      0,
                      "k"
                    ),
                    AST$(
                      17,
                      3800,
                      16,
                      0,
                      "promises"
                    ),
                    AST$(
                      18,
                      3800,
                      1,
                      0,
                      AST$(
                        7,
                        3800,
                        1,
                        0,
                        AST$(
                          3,
                          3800,
                          1,
                          0,
                          AST$(
                            17,
                            3800,
                            1,
                            0,
                            "__owns"
                          ),
                          ".",
                          AST$(
                            9,
                            3800,
                            1,
                            0,
                            "call"
                          )
                        ),
                        0,
                        AST$(
                          17,
                          3800,
                          16,
                          0,
                          "promises"
                        ),
                        AST$(
                          17,
                          3800,
                          8,
                          0,
                          "k"
                        )
                      ),
                      AST$(
                        4,
                        3800,
                        1,
                        0,
                        0,
                        AST$(
                          3,
                          3800,
                          1,
                          0,
                          AST$(
                            17,
                            3800,
                            11,
                            0,
                            "v"
                          ),
                          "=",
                          AST$(
                            3,
                            3800,
                            1,
                            0,
                            AST$(
                              17,
                              3800,
                              16,
                              0,
                              "promises"
                            ),
                            ".",
                            AST$(
                              17,
                              3800,
                              8,
                              0,
                              "k"
                            )
                          )
                        ),
                        AST$(
                          30,
                          3801,
                          1,
                          0,
                          "++",
                          AST$(
                            17,
                            3801,
                            1,
                            0,
                            "remaining"
                          )
                        ),
                        AST$(
                          7,
                          3802,
                          1,
                          0,
                          AST$(
                            17,
                            3802,
                            1,
                            0,
                            "handle"
                          ),
                          0,
                          AST$(
                            17,
                            3802,
                            14,
                            0,
                            "k"
                          ),
                          AST$(
                            17,
                            3802,
                            16,
                            0,
                            "v"
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  23,
                  3803,
                  1,
                  0,
                  AST$(
                    3,
                    3803,
                    1,
                    0,
                    AST$(
                      17,
                      3803,
                      1,
                      0,
                      "defer"
                    ),
                    ".",
                    AST$(
                      9,
                      3803,
                      9,
                      0,
                      "promise"
                    )
                  )
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.makeObject({
              sync: TYPE$.generic(TYPE$.functionBase, TYPE$.number),
              then: TYPE$["function"]
            })),
            dependencies: ["__defer", "__isArray", "__owns", "__typeof"]
          },
          __delay: {
            helper: AST$(
              16,
              3813,
              26,
              0,
              0,
              [
                AST$(
                  17,
                  3813,
                  27,
                  0,
                  "milliseconds"
                ),
                AST$(
                  17,
                  3813,
                  50,
                  0,
                  "value"
                )
              ],
              ["defer"],
              AST$(
                4,
                3813,
                26,
                0,
                0,
                AST$(
                  18,
                  3813,
                  26,
                  0,
                  AST$(
                    3,
                    3813,
                    26,
                    0,
                    AST$(
                      30,
                      3813,
                      26,
                      0,
                      "typeof",
                      AST$(
                        17,
                        3813,
                        27,
                        0,
                        "milliseconds"
                      )
                    ),
                    "!==",
                    AST$(
                      9,
                      3813,
                      26,
                      0,
                      "number"
                    )
                  ),
                  AST$(
                    26,
                    3813,
                    26,
                    0,
                    AST$(
                      7,
                      3813,
                      26,
                      0,
                      AST$(
                        17,
                        3813,
                        26,
                        0,
                        "TypeError"
                      ),
                      0,
                      AST$(
                        3,
                        3813,
                        26,
                        0,
                        AST$(
                          9,
                          3813,
                          26,
                          0,
                          "Expected milliseconds to be a Number, got "
                        ),
                        "+",
                        AST$(
                          7,
                          3813,
                          26,
                          0,
                          AST$(
                            17,
                            3813,
                            26,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            3813,
                            27,
                            0,
                            "milliseconds"
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  3814,
                  1,
                  0,
                  AST$(
                    3,
                    3814,
                    5,
                    0,
                    AST$(
                      17,
                      3814,
                      5,
                      0,
                      "milliseconds"
                    ),
                    "<=",
                    AST$(
                      9,
                      3814,
                      22,
                      0,
                      0
                    )
                  ),
                  AST$(
                    23,
                    3815,
                    1,
                    0,
                    AST$(
                      7,
                      3815,
                      1,
                      0,
                      AST$(
                        3,
                        3815,
                        1,
                        0,
                        AST$(
                          17,
                          3815,
                          1,
                          0,
                          "__defer"
                        ),
                        ".",
                        AST$(
                          9,
                          3815,
                          13,
                          0,
                          "fulfilled"
                        )
                      ),
                      0,
                      AST$(
                        17,
                        3815,
                        23,
                        0,
                        "value"
                      )
                    )
                  ),
                  AST$(
                    4,
                    3817,
                    1,
                    0,
                    0,
                    AST$(
                      3,
                      3817,
                      1,
                      0,
                      AST$(
                        17,
                        3817,
                        8,
                        0,
                        "defer"
                      ),
                      "=",
                      AST$(
                        7,
                        3817,
                        16,
                        0,
                        AST$(
                          17,
                          3817,
                          16,
                          0,
                          "__defer"
                        ),
                        0
                      )
                    ),
                    AST$(
                      7,
                      3818,
                      1,
                      0,
                      AST$(
                        17,
                        3818,
                        1,
                        0,
                        "setTimeout"
                      ),
                      0,
                      AST$(
                        16,
                        3818,
                        19,
                        0,
                        0,
                        0,
                        0,
                        AST$(
                          7,
                          3818,
                          22,
                          0,
                          AST$(
                            3,
                            3818,
                            22,
                            0,
                            AST$(
                              17,
                              3818,
                              22,
                              0,
                              "defer"
                            ),
                            ".",
                            AST$(
                              9,
                              3818,
                              29,
                              0,
                              "fulfill"
                            )
                          ),
                          0,
                          AST$(
                            17,
                            3818,
                            37,
                            0,
                            "value"
                          )
                        )
                      ),
                      AST$(
                        17,
                        3818,
                        45,
                        0,
                        "milliseconds"
                      )
                    ),
                    AST$(
                      23,
                      3819,
                      1,
                      0,
                      AST$(
                        3,
                        3819,
                        1,
                        0,
                        AST$(
                          17,
                          3819,
                          1,
                          0,
                          "defer"
                        ),
                        ".",
                        AST$(
                          9,
                          3819,
                          11,
                          0,
                          "promise"
                        )
                      )
                    )
                  )
                )
              )
            ),
            type: TYPE$["function"],
            dependencies: ["__defer", "__typeof"]
          },
          __promiseLoop: {
            helper: AST$(
              16,
              3837,
              33,
              0,
              0,
              [
                AST$(
                  17,
                  3837,
                  41,
                  0,
                  "limit"
                ),
                AST$(
                  17,
                  3837,
                  58,
                  0,
                  "length"
                ),
                AST$(
                  17,
                  3837,
                  76,
                  0,
                  "body"
                )
              ],
              [
                "defer",
                "done",
                "index",
                "result",
                "slotsUsed"
              ],
              AST$(
                4,
                3837,
                33,
                0,
                0,
                AST$(
                  18,
                  3837,
                  33,
                  0,
                  AST$(
                    3,
                    3837,
                    33,
                    0,
                    AST$(
                      30,
                      3837,
                      33,
                      0,
                      "typeof",
                      AST$(
                        17,
                        3837,
                        41,
                        0,
                        "limit"
                      )
                    ),
                    "!==",
                    AST$(
                      9,
                      3837,
                      33,
                      0,
                      "number"
                    )
                  ),
                  AST$(
                    26,
                    3837,
                    33,
                    0,
                    AST$(
                      7,
                      3837,
                      33,
                      0,
                      AST$(
                        17,
                        3837,
                        33,
                        0,
                        "TypeError"
                      ),
                      0,
                      AST$(
                        3,
                        3837,
                        33,
                        0,
                        AST$(
                          9,
                          3837,
                          33,
                          0,
                          "Expected limit to be a Number, got "
                        ),
                        "+",
                        AST$(
                          7,
                          3837,
                          33,
                          0,
                          AST$(
                            17,
                            3837,
                            33,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            3837,
                            41,
                            0,
                            "limit"
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  3837,
                  33,
                  0,
                  AST$(
                    3,
                    3837,
                    33,
                    0,
                    AST$(
                      30,
                      3837,
                      33,
                      0,
                      "typeof",
                      AST$(
                        17,
                        3837,
                        58,
                        0,
                        "length"
                      )
                    ),
                    "!==",
                    AST$(
                      9,
                      3837,
                      33,
                      0,
                      "number"
                    )
                  ),
                  AST$(
                    26,
                    3837,
                    33,
                    0,
                    AST$(
                      7,
                      3837,
                      33,
                      0,
                      AST$(
                        17,
                        3837,
                        33,
                        0,
                        "TypeError"
                      ),
                      0,
                      AST$(
                        3,
                        3837,
                        33,
                        0,
                        AST$(
                          9,
                          3837,
                          33,
                          0,
                          "Expected length to be a Number, got "
                        ),
                        "+",
                        AST$(
                          7,
                          3837,
                          33,
                          0,
                          AST$(
                            17,
                            3837,
                            33,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            3837,
                            58,
                            0,
                            "length"
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  3837,
                  33,
                  0,
                  AST$(
                    3,
                    3837,
                    33,
                    0,
                    AST$(
                      30,
                      3837,
                      33,
                      0,
                      "typeof",
                      AST$(
                        17,
                        3837,
                        76,
                        0,
                        "body"
                      )
                    ),
                    "!==",
                    AST$(
                      9,
                      3837,
                      33,
                      0,
                      "function"
                    )
                  ),
                  AST$(
                    26,
                    3837,
                    33,
                    0,
                    AST$(
                      7,
                      3837,
                      33,
                      0,
                      AST$(
                        17,
                        3837,
                        33,
                        0,
                        "TypeError"
                      ),
                      0,
                      AST$(
                        3,
                        3837,
                        33,
                        0,
                        AST$(
                          9,
                          3837,
                          33,
                          0,
                          "Expected body to be a Function, got "
                        ),
                        "+",
                        AST$(
                          7,
                          3837,
                          33,
                          0,
                          AST$(
                            17,
                            3837,
                            33,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            3837,
                            76,
                            0,
                            "body"
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  3838,
                  1,
                  0,
                  AST$(
                    3,
                    3838,
                    5,
                    0,
                    AST$(
                      3,
                      3838,
                      5,
                      0,
                      AST$(
                        17,
                        3838,
                        5,
                        0,
                        "limit"
                      ),
                      "<",
                      AST$(
                        9,
                        3838,
                        15,
                        0,
                        1
                      )
                    ),
                    "||",
                    AST$(
                      3,
                      3838,
                      19,
                      0,
                      AST$(
                        17,
                        3838,
                        19,
                        0,
                        "limit"
                      ),
                      "!==",
                      AST$(
                        17,
                        3838,
                        28,
                        0,
                        "limit"
                      )
                    )
                  ),
                  AST$(
                    3,
                    3839,
                    1,
                    0,
                    AST$(
                      17,
                      3839,
                      1,
                      0,
                      "limit"
                    ),
                    "=",
                    AST$(
                      9,
                      3839,
                      13,
                      0,
                      1/0
                    )
                  )
                ),
                AST$(
                  3,
                  3841,
                  1,
                  0,
                  AST$(
                    17,
                    3841,
                    6,
                    0,
                    "result"
                  ),
                  "=",
                  AST$(2, 3841, 15, 0)
                ),
                AST$(
                  3,
                  3842,
                  1,
                  0,
                  AST$(
                    17,
                    3842,
                    14,
                    0,
                    "done"
                  ),
                  "=",
                  AST$(
                    9,
                    3842,
                    21,
                    0,
                    false
                  )
                ),
                AST$(
                  3,
                  3843,
                  1,
                  0,
                  AST$(
                    17,
                    3843,
                    14,
                    0,
                    "slotsUsed"
                  ),
                  "=",
                  AST$(
                    9,
                    3843,
                    28,
                    0,
                    0
                  )
                ),
                AST$(
                  3,
                  3844,
                  1,
                  0,
                  AST$(
                    17,
                    3844,
                    6,
                    0,
                    "defer"
                  ),
                  "=",
                  AST$(
                    7,
                    3844,
                    14,
                    0,
                    AST$(
                      17,
                      3844,
                      14,
                      0,
                      "__defer"
                    ),
                    0
                  )
                ),
                AST$(
                  3,
                  3845,
                  1,
                  0,
                  AST$(
                    17,
                    3845,
                    14,
                    0,
                    "index"
                  ),
                  "=",
                  AST$(
                    9,
                    3845,
                    23,
                    0,
                    0
                  )
                ),
                AST$(
                  16,
                  3846,
                  1,
                  0,
                  AST$(
                    17,
                    3846,
                    6,
                    0,
                    "handle"
                  ),
                  [
                    AST$(
                      17,
                      3846,
                      14,
                      0,
                      "index"
                    )
                  ],
                  0,
                  AST$(
                    4,
                    3847,
                    1,
                    0,
                    0,
                    AST$(
                      30,
                      3847,
                      1,
                      0,
                      "++",
                      AST$(
                        17,
                        3847,
                        1,
                        0,
                        "slotsUsed"
                      )
                    ),
                    AST$(
                      23,
                      3848,
                      1,
                      0,
                      AST$(
                        7,
                        3848,
                        1,
                        0,
                        AST$(
                          3,
                          3848,
                          1,
                          0,
                          AST$(
                            7,
                            3848,
                            1,
                            0,
                            AST$(
                              17,
                              3848,
                              1,
                              0,
                              "body"
                            ),
                            0,
                            AST$(
                              17,
                              3848,
                              10,
                              0,
                              "index"
                            )
                          ),
                          ".",
                          AST$(
                            9,
                            3848,
                            17,
                            0,
                            "then"
                          )
                        ),
                        0,
                        AST$(
                          16,
                          3849,
                          8,
                          0,
                          0,
                          [
                            AST$(
                              17,
                              3849,
                              9,
                              0,
                              "value"
                            )
                          ],
                          0,
                          AST$(
                            4,
                            3850,
                            1,
                            0,
                            0,
                            AST$(
                              3,
                              3850,
                              1,
                              0,
                              AST$(
                                3,
                                3850,
                                1,
                                0,
                                AST$(
                                  17,
                                  3850,
                                  1,
                                  0,
                                  "result"
                                ),
                                ".",
                                AST$(
                                  17,
                                  3850,
                                  16,
                                  0,
                                  "index"
                                )
                              ),
                              "=",
                              AST$(
                                17,
                                3850,
                                25,
                                0,
                                "value"
                              )
                            ),
                            AST$(
                              30,
                              3851,
                              1,
                              0,
                              "--",
                              AST$(
                                17,
                                3851,
                                1,
                                0,
                                "slotsUsed"
                              )
                            ),
                            AST$(
                              23,
                              3852,
                              1,
                              0,
                              AST$(
                                7,
                                3852,
                                1,
                                0,
                                AST$(
                                  17,
                                  3852,
                                  1,
                                  0,
                                  "flush"
                                ),
                                0
                              )
                            )
                          )
                        ),
                        AST$(
                          16,
                          3853,
                          8,
                          0,
                          0,
                          [
                            AST$(
                              17,
                              3853,
                              9,
                              0,
                              "reason"
                            )
                          ],
                          0,
                          AST$(
                            4,
                            3854,
                            1,
                            0,
                            0,
                            AST$(
                              3,
                              3854,
                              1,
                              0,
                              AST$(
                                17,
                                3854,
                                1,
                                0,
                                "done"
                              ),
                              "=",
                              AST$(
                                9,
                                3854,
                                16,
                                0,
                                true
                              )
                            ),
                            AST$(
                              23,
                              3855,
                              1,
                              0,
                              AST$(
                                7,
                                3855,
                                1,
                                0,
                                AST$(
                                  3,
                                  3855,
                                  1,
                                  0,
                                  AST$(
                                    17,
                                    3855,
                                    1,
                                    0,
                                    "defer"
                                  ),
                                  ".",
                                  AST$(
                                    9,
                                    3855,
                                    15,
                                    0,
                                    "reject"
                                  )
                                ),
                                0,
                                AST$(
                                  17,
                                  3855,
                                  22,
                                  0,
                                  "reason"
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  16,
                  3856,
                  1,
                  0,
                  AST$(
                    17,
                    3856,
                    6,
                    0,
                    "flush"
                  ),
                  0,
                  0,
                  AST$(
                    4,
                    3857,
                    1,
                    0,
                    0,
                    AST$(
                      14,
                      3857,
                      1,
                      0,
                      AST$(20, 3857, 1, 0),
                      AST$(
                        3,
                        3857,
                        10,
                        0,
                        AST$(
                          3,
                          3857,
                          10,
                          0,
                          AST$(
                            30,
                            3857,
                            10,
                            0,
                            "!",
                            AST$(
                              17,
                              3857,
                              14,
                              0,
                              "done"
                            )
                          ),
                          "&&",
                          AST$(
                            3,
                            3857,
                            23,
                            0,
                            AST$(
                              17,
                              3857,
                              23,
                              0,
                              "slotsUsed"
                            ),
                            "<",
                            AST$(
                              17,
                              3857,
                              36,
                              0,
                              "limit"
                            )
                          )
                        ),
                        "&&",
                        AST$(
                          3,
                          3857,
                          46,
                          0,
                          AST$(
                            17,
                            3857,
                            46,
                            0,
                            "index"
                          ),
                          "<",
                          AST$(
                            17,
                            3857,
                            54,
                            0,
                            "length"
                          )
                        )
                      ),
                      AST$(
                        30,
                        3857,
                        62,
                        0,
                        "++",
                        AST$(
                          17,
                          3857,
                          62,
                          0,
                          "index"
                        )
                      ),
                      AST$(
                        7,
                        3858,
                        1,
                        0,
                        AST$(
                          17,
                          3858,
                          1,
                          0,
                          "handle"
                        ),
                        0,
                        AST$(
                          17,
                          3858,
                          14,
                          0,
                          "index"
                        )
                      )
                    ),
                    AST$(
                      18,
                      3859,
                      1,
                      0,
                      AST$(
                        3,
                        3859,
                        7,
                        0,
                        AST$(
                          3,
                          3859,
                          7,
                          0,
                          AST$(
                            30,
                            3859,
                            7,
                            0,
                            "!",
                            AST$(
                              17,
                              3859,
                              11,
                              0,
                              "done"
                            )
                          ),
                          "&&",
                          AST$(
                            3,
                            3859,
                            20,
                            0,
                            AST$(
                              17,
                              3859,
                              20,
                              0,
                              "index"
                            ),
                            ">=",
                            AST$(
                              17,
                              3859,
                              29,
                              0,
                              "length"
                            )
                          )
                        ),
                        "&&",
                        AST$(
                          3,
                          3859,
                          40,
                          0,
                          AST$(
                            17,
                            3859,
                            40,
                            0,
                            "slotsUsed"
                          ),
                          "===",
                          AST$(
                            9,
                            3859,
                            55,
                            0,
                            0
                          )
                        )
                      ),
                      AST$(
                        4,
                        3860,
                        1,
                        0,
                        0,
                        AST$(
                          3,
                          3860,
                          1,
                          0,
                          AST$(
                            17,
                            3860,
                            1,
                            0,
                            "done"
                          ),
                          "=",
                          AST$(
                            9,
                            3860,
                            14,
                            0,
                            true
                          )
                        ),
                        AST$(
                          23,
                          3861,
                          1,
                          0,
                          AST$(
                            7,
                            3861,
                            1,
                            0,
                            AST$(
                              3,
                              3861,
                              1,
                              0,
                              AST$(
                                17,
                                3861,
                                1,
                                0,
                                "defer"
                              ),
                              ".",
                              AST$(
                                9,
                                3861,
                                13,
                                0,
                                "fulfill"
                              )
                            ),
                            0,
                            AST$(
                              17,
                              3861,
                              21,
                              0,
                              "result"
                            )
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  7,
                  3862,
                  1,
                  0,
                  AST$(
                    17,
                    3862,
                    1,
                    0,
                    "setImmediate"
                  ),
                  0,
                  AST$(
                    17,
                    3862,
                    17,
                    0,
                    "flush"
                  )
                ),
                AST$(
                  23,
                  3863,
                  1,
                  0,
                  AST$(
                    3,
                    3863,
                    1,
                    0,
                    AST$(
                      17,
                      3863,
                      1,
                      0,
                      "defer"
                    ),
                    ".",
                    AST$(
                      9,
                      3863,
                      9,
                      0,
                      "promise"
                    )
                  )
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.makeObject({
              sync: TYPE$.generic(TYPE$.functionBase, TYPE$.number),
              then: TYPE$["function"]
            })),
            dependencies: ["__defer", "__typeof", "setImmediate"]
          },
          __promiseIter: {
            helper: AST$(
              16,
              3865,
              33,
              0,
              0,
              [
                AST$(
                  17,
                  3865,
                  41,
                  0,
                  "limit"
                ),
                AST$(
                  17,
                  3865,
                  58,
                  0,
                  "iterator"
                ),
                AST$(
                  17,
                  3865,
                  88,
                  0,
                  "body"
                )
              ],
              [
                "defer",
                "done",
                "index",
                "iterStopped",
                "result",
                "slotsUsed"
              ],
              AST$(
                4,
                3865,
                33,
                0,
                0,
                AST$(
                  18,
                  3865,
                  33,
                  0,
                  AST$(
                    3,
                    3865,
                    33,
                    0,
                    AST$(
                      30,
                      3865,
                      33,
                      0,
                      "typeof",
                      AST$(
                        17,
                        3865,
                        41,
                        0,
                        "limit"
                      )
                    ),
                    "!==",
                    AST$(
                      9,
                      3865,
                      33,
                      0,
                      "number"
                    )
                  ),
                  AST$(
                    26,
                    3865,
                    33,
                    0,
                    AST$(
                      7,
                      3865,
                      33,
                      0,
                      AST$(
                        17,
                        3865,
                        33,
                        0,
                        "TypeError"
                      ),
                      0,
                      AST$(
                        3,
                        3865,
                        33,
                        0,
                        AST$(
                          9,
                          3865,
                          33,
                          0,
                          "Expected limit to be a Number, got "
                        ),
                        "+",
                        AST$(
                          7,
                          3865,
                          33,
                          0,
                          AST$(
                            17,
                            3865,
                            33,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            3865,
                            41,
                            0,
                            "limit"
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  3865,
                  33,
                  0,
                  AST$(
                    3,
                    3865,
                    33,
                    0,
                    AST$(
                      3,
                      3865,
                      33,
                      0,
                      AST$(
                        30,
                        3865,
                        33,
                        0,
                        "typeof",
                        AST$(
                          17,
                          3865,
                          58,
                          0,
                          "iterator"
                        )
                      ),
                      "!==",
                      AST$(
                        9,
                        3865,
                        33,
                        0,
                        "object"
                      )
                    ),
                    "||",
                    AST$(
                      3,
                      3865,
                      33,
                      0,
                      AST$(
                        17,
                        3865,
                        58,
                        0,
                        "iterator"
                      ),
                      "===",
                      AST$(
                        9,
                        1,
                        1,
                        0,
                        null
                      )
                    )
                  ),
                  AST$(
                    26,
                    3865,
                    33,
                    0,
                    AST$(
                      7,
                      3865,
                      33,
                      0,
                      AST$(
                        17,
                        3865,
                        33,
                        0,
                        "TypeError"
                      ),
                      0,
                      AST$(
                        3,
                        3865,
                        33,
                        0,
                        AST$(
                          9,
                          3865,
                          33,
                          0,
                          "Expected iterator to be an Object, got "
                        ),
                        "+",
                        AST$(
                          7,
                          3865,
                          33,
                          0,
                          AST$(
                            17,
                            3865,
                            33,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            3865,
                            58,
                            0,
                            "iterator"
                          )
                        )
                      )
                    )
                  ),
                  AST$(
                    18,
                    3865,
                    33,
                    0,
                    AST$(
                      3,
                      3865,
                      33,
                      0,
                      AST$(
                        30,
                        3865,
                        33,
                        0,
                        "typeof",
                        AST$(
                          3,
                          3865,
                          33,
                          0,
                          AST$(
                            17,
                            3865,
                            58,
                            0,
                            "iterator"
                          ),
                          ".",
                          AST$(
                            9,
                            3865,
                            72,
                            0,
                            "next"
                          )
                        )
                      ),
                      "!==",
                      AST$(
                        9,
                        3865,
                        33,
                        0,
                        "function"
                      )
                    ),
                    AST$(
                      26,
                      3865,
                      33,
                      0,
                      AST$(
                        7,
                        3865,
                        33,
                        0,
                        AST$(
                          17,
                          3865,
                          33,
                          0,
                          "TypeError"
                        ),
                        0,
                        AST$(
                          3,
                          3865,
                          33,
                          0,
                          AST$(
                            9,
                            3865,
                            33,
                            0,
                            "Expected iterator.next to be a Function, got "
                          ),
                          "+",
                          AST$(
                            7,
                            3865,
                            33,
                            0,
                            AST$(
                              17,
                              3865,
                              33,
                              0,
                              "__typeof"
                            ),
                            0,
                            AST$(
                              3,
                              3865,
                              33,
                              0,
                              AST$(
                                17,
                                3865,
                                58,
                                0,
                                "iterator"
                              ),
                              ".",
                              AST$(
                                9,
                                3865,
                                72,
                                0,
                                "next"
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  3865,
                  33,
                  0,
                  AST$(
                    3,
                    3865,
                    33,
                    0,
                    AST$(
                      30,
                      3865,
                      33,
                      0,
                      "typeof",
                      AST$(
                        17,
                        3865,
                        88,
                        0,
                        "body"
                      )
                    ),
                    "!==",
                    AST$(
                      9,
                      3865,
                      33,
                      0,
                      "function"
                    )
                  ),
                  AST$(
                    26,
                    3865,
                    33,
                    0,
                    AST$(
                      7,
                      3865,
                      33,
                      0,
                      AST$(
                        17,
                        3865,
                        33,
                        0,
                        "TypeError"
                      ),
                      0,
                      AST$(
                        3,
                        3865,
                        33,
                        0,
                        AST$(
                          9,
                          3865,
                          33,
                          0,
                          "Expected body to be a Function, got "
                        ),
                        "+",
                        AST$(
                          7,
                          3865,
                          33,
                          0,
                          AST$(
                            17,
                            3865,
                            33,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            3865,
                            88,
                            0,
                            "body"
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  3866,
                  1,
                  0,
                  AST$(
                    3,
                    3866,
                    5,
                    0,
                    AST$(
                      3,
                      3866,
                      5,
                      0,
                      AST$(
                        17,
                        3866,
                        5,
                        0,
                        "limit"
                      ),
                      "<",
                      AST$(
                        9,
                        3866,
                        15,
                        0,
                        1
                      )
                    ),
                    "||",
                    AST$(
                      3,
                      3866,
                      19,
                      0,
                      AST$(
                        17,
                        3866,
                        19,
                        0,
                        "limit"
                      ),
                      "!==",
                      AST$(
                        17,
                        3866,
                        28,
                        0,
                        "limit"
                      )
                    )
                  ),
                  AST$(
                    3,
                    3867,
                    1,
                    0,
                    AST$(
                      17,
                      3867,
                      1,
                      0,
                      "limit"
                    ),
                    "=",
                    AST$(
                      9,
                      3867,
                      13,
                      0,
                      1/0
                    )
                  )
                ),
                AST$(
                  3,
                  3869,
                  1,
                  0,
                  AST$(
                    17,
                    3869,
                    6,
                    0,
                    "result"
                  ),
                  "=",
                  AST$(2, 3869, 15, 0)
                ),
                AST$(
                  3,
                  3870,
                  1,
                  0,
                  AST$(
                    17,
                    3870,
                    14,
                    0,
                    "done"
                  ),
                  "=",
                  AST$(
                    9,
                    3870,
                    21,
                    0,
                    false
                  )
                ),
                AST$(
                  3,
                  3871,
                  1,
                  0,
                  AST$(
                    17,
                    3871,
                    14,
                    0,
                    "slotsUsed"
                  ),
                  "=",
                  AST$(
                    9,
                    3871,
                    28,
                    0,
                    0
                  )
                ),
                AST$(
                  3,
                  3872,
                  1,
                  0,
                  AST$(
                    17,
                    3872,
                    6,
                    0,
                    "defer"
                  ),
                  "=",
                  AST$(
                    7,
                    3872,
                    14,
                    0,
                    AST$(
                      17,
                      3872,
                      14,
                      0,
                      "__defer"
                    ),
                    0
                  )
                ),
                AST$(
                  3,
                  3873,
                  1,
                  0,
                  AST$(
                    17,
                    3873,
                    14,
                    0,
                    "index"
                  ),
                  "=",
                  AST$(
                    9,
                    3873,
                    23,
                    0,
                    0
                  )
                ),
                AST$(
                  3,
                  3874,
                  1,
                  0,
                  AST$(
                    17,
                    3874,
                    14,
                    0,
                    "iterStopped"
                  ),
                  "=",
                  AST$(
                    9,
                    3874,
                    29,
                    0,
                    false
                  )
                ),
                AST$(
                  16,
                  3875,
                  1,
                  0,
                  AST$(
                    17,
                    3875,
                    6,
                    0,
                    "handle"
                  ),
                  [
                    AST$(
                      17,
                      3875,
                      14,
                      0,
                      "item"
                    ),
                    AST$(
                      17,
                      3875,
                      19,
                      0,
                      "index"
                    )
                  ],
                  0,
                  AST$(
                    4,
                    3876,
                    1,
                    0,
                    0,
                    AST$(
                      30,
                      3876,
                      1,
                      0,
                      "++",
                      AST$(
                        17,
                        3876,
                        1,
                        0,
                        "slotsUsed"
                      )
                    ),
                    AST$(
                      23,
                      3877,
                      1,
                      0,
                      AST$(
                        7,
                        3877,
                        1,
                        0,
                        AST$(
                          3,
                          3877,
                          1,
                          0,
                          AST$(
                            7,
                            3877,
                            1,
                            0,
                            AST$(
                              17,
                              3877,
                              1,
                              0,
                              "body"
                            ),
                            0,
                            AST$(
                              17,
                              3877,
                              10,
                              0,
                              "item"
                            ),
                            AST$(
                              17,
                              3877,
                              15,
                              0,
                              "index"
                            )
                          ),
                          ".",
                          AST$(
                            9,
                            3877,
                            23,
                            0,
                            "then"
                          )
                        ),
                        0,
                        AST$(
                          16,
                          3878,
                          8,
                          0,
                          0,
                          [
                            AST$(
                              17,
                              3878,
                              9,
                              0,
                              "value"
                            )
                          ],
                          0,
                          AST$(
                            4,
                            3879,
                            1,
                            0,
                            0,
                            AST$(
                              3,
                              3879,
                              1,
                              0,
                              AST$(
                                3,
                                3879,
                                1,
                                0,
                                AST$(
                                  17,
                                  3879,
                                  1,
                                  0,
                                  "result"
                                ),
                                ".",
                                AST$(
                                  17,
                                  3879,
                                  16,
                                  0,
                                  "index"
                                )
                              ),
                              "=",
                              AST$(
                                17,
                                3879,
                                25,
                                0,
                                "value"
                              )
                            ),
                            AST$(
                              30,
                              3880,
                              1,
                              0,
                              "--",
                              AST$(
                                17,
                                3880,
                                1,
                                0,
                                "slotsUsed"
                              )
                            ),
                            AST$(
                              23,
                              3881,
                              1,
                              0,
                              AST$(
                                7,
                                3881,
                                1,
                                0,
                                AST$(
                                  17,
                                  3881,
                                  1,
                                  0,
                                  "flush"
                                ),
                                0
                              )
                            )
                          )
                        ),
                        AST$(
                          16,
                          3882,
                          8,
                          0,
                          0,
                          [
                            AST$(
                              17,
                              3882,
                              9,
                              0,
                              "reason"
                            )
                          ],
                          0,
                          AST$(
                            4,
                            3883,
                            1,
                            0,
                            0,
                            AST$(
                              3,
                              3883,
                              1,
                              0,
                              AST$(
                                17,
                                3883,
                                1,
                                0,
                                "done"
                              ),
                              "=",
                              AST$(
                                9,
                                3883,
                                16,
                                0,
                                true
                              )
                            ),
                            AST$(
                              23,
                              3884,
                              1,
                              0,
                              AST$(
                                7,
                                3884,
                                1,
                                0,
                                AST$(
                                  3,
                                  3884,
                                  1,
                                  0,
                                  AST$(
                                    17,
                                    3884,
                                    1,
                                    0,
                                    "defer"
                                  ),
                                  ".",
                                  AST$(
                                    9,
                                    3884,
                                    15,
                                    0,
                                    "reject"
                                  )
                                ),
                                0,
                                AST$(
                                  17,
                                  3884,
                                  22,
                                  0,
                                  "reason"
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  16,
                  3885,
                  1,
                  0,
                  AST$(
                    17,
                    3885,
                    6,
                    0,
                    "flush"
                  ),
                  0,
                  ["item"],
                  AST$(
                    4,
                    3886,
                    1,
                    0,
                    0,
                    AST$(
                      14,
                      3886,
                      1,
                      0,
                      AST$(20, 3886, 1, 0),
                      AST$(
                        3,
                        3886,
                        10,
                        0,
                        AST$(
                          3,
                          3886,
                          10,
                          0,
                          AST$(
                            30,
                            3886,
                            10,
                            0,
                            "!",
                            AST$(
                              17,
                              3886,
                              14,
                              0,
                              "done"
                            )
                          ),
                          "&&",
                          AST$(
                            30,
                            3886,
                            23,
                            0,
                            "!",
                            AST$(
                              17,
                              3886,
                              27,
                              0,
                              "iterStopped"
                            )
                          )
                        ),
                        "&&",
                        AST$(
                          3,
                          3886,
                          44,
                          0,
                          AST$(
                            17,
                            3886,
                            44,
                            0,
                            "slotsUsed"
                          ),
                          "<",
                          AST$(
                            17,
                            3886,
                            57,
                            0,
                            "limit"
                          )
                        )
                      ),
                      AST$(20, 3886, 1, 0),
                      AST$(
                        4,
                        3887,
                        1,
                        0,
                        0,
                        AST$(
                          3,
                          3887,
                          1,
                          0,
                          AST$(
                            17,
                            3887,
                            18,
                            0,
                            "item"
                          ),
                          "=",
                          AST$(9, 3887, 25, 0)
                        ),
                        AST$(
                          28,
                          3888,
                          1,
                          0,
                          AST$(
                            3,
                            3889,
                            1,
                            0,
                            AST$(
                              17,
                              3889,
                              1,
                              0,
                              "item"
                            ),
                            "=",
                            AST$(
                              7,
                              3889,
                              16,
                              0,
                              AST$(
                                3,
                                3889,
                                16,
                                0,
                                AST$(
                                  17,
                                  3889,
                                  16,
                                  0,
                                  "iterator"
                                ),
                                ".",
                                AST$(
                                  9,
                                  3889,
                                  26,
                                  0,
                                  "next"
                                )
                              ),
                              0
                            )
                          ),
                          AST$(
                            17,
                            3890,
                            12,
                            0,
                            "e"
                          ),
                          AST$(
                            4,
                            3891,
                            1,
                            0,
                            0,
                            AST$(
                              3,
                              3891,
                              1,
                              0,
                              AST$(
                                17,
                                3891,
                                1,
                                0,
                                "done"
                              ),
                              "=",
                              AST$(
                                9,
                                3891,
                                16,
                                0,
                                true
                              )
                            ),
                            AST$(
                              7,
                              3892,
                              1,
                              0,
                              AST$(
                                3,
                                3892,
                                1,
                                0,
                                AST$(
                                  17,
                                  3892,
                                  1,
                                  0,
                                  "defer"
                                ),
                                ".",
                                AST$(
                                  9,
                                  3892,
                                  15,
                                  0,
                                  "reject"
                                )
                              ),
                              0,
                              AST$(
                                17,
                                3892,
                                22,
                                0,
                                "e"
                              )
                            ),
                            AST$(23, 3893, 1, 0)
                          )
                        ),
                        AST$(
                          18,
                          3895,
                          1,
                          0,
                          AST$(
                            3,
                            3895,
                            9,
                            0,
                            AST$(
                              17,
                              3895,
                              9,
                              0,
                              "item"
                            ),
                            ".",
                            AST$(
                              9,
                              3895,
                              15,
                              0,
                              "done"
                            )
                          ),
                          AST$(
                            4,
                            3896,
                            1,
                            0,
                            0,
                            AST$(
                              3,
                              3896,
                              1,
                              0,
                              AST$(
                                17,
                                3896,
                                1,
                                0,
                                "iterStopped"
                              ),
                              "=",
                              AST$(
                                9,
                                3896,
                                24,
                                0,
                                true
                              )
                            ),
                            AST$(6, 3897, 1, 0)
                          )
                        ),
                        AST$(
                          7,
                          3899,
                          1,
                          0,
                          AST$(
                            17,
                            3899,
                            1,
                            0,
                            "handle"
                          ),
                          0,
                          AST$(
                            3,
                            3899,
                            14,
                            0,
                            AST$(
                              17,
                              3899,
                              14,
                              0,
                              "item"
                            ),
                            ".",
                            AST$(
                              9,
                              3899,
                              19,
                              0,
                              "value"
                            )
                          ),
                          AST$(
                            30,
                            3899,
                            25,
                            0,
                            "++post",
                            AST$(
                              17,
                              3899,
                              35,
                              0,
                              "index"
                            )
                          )
                        )
                      )
                    ),
                    AST$(
                      18,
                      3901,
                      1,
                      0,
                      AST$(
                        3,
                        3901,
                        7,
                        0,
                        AST$(
                          3,
                          3901,
                          7,
                          0,
                          AST$(
                            30,
                            3901,
                            7,
                            0,
                            "!",
                            AST$(
                              17,
                              3901,
                              11,
                              0,
                              "done"
                            )
                          ),
                          "&&",
                          AST$(
                            3,
                            3901,
                            20,
                            0,
                            AST$(
                              17,
                              3901,
                              20,
                              0,
                              "slotsUsed"
                            ),
                            "===",
                            AST$(
                              9,
                              3901,
                              35,
                              0,
                              0
                            )
                          )
                        ),
                        "&&",
                        AST$(
                          17,
                          3901,
                          40,
                          0,
                          "iterStopped"
                        )
                      ),
                      AST$(
                        4,
                        3902,
                        1,
                        0,
                        0,
                        AST$(
                          3,
                          3902,
                          1,
                          0,
                          AST$(
                            17,
                            3902,
                            1,
                            0,
                            "done"
                          ),
                          "=",
                          AST$(
                            9,
                            3902,
                            14,
                            0,
                            true
                          )
                        ),
                        AST$(
                          23,
                          3903,
                          1,
                          0,
                          AST$(
                            7,
                            3903,
                            1,
                            0,
                            AST$(
                              3,
                              3903,
                              1,
                              0,
                              AST$(
                                17,
                                3903,
                                1,
                                0,
                                "defer"
                              ),
                              ".",
                              AST$(
                                9,
                                3903,
                                13,
                                0,
                                "fulfill"
                              )
                            ),
                            0,
                            AST$(
                              17,
                              3903,
                              21,
                              0,
                              "result"
                            )
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  7,
                  3904,
                  1,
                  0,
                  AST$(
                    17,
                    3904,
                    1,
                    0,
                    "setImmediate"
                  ),
                  0,
                  AST$(
                    17,
                    3904,
                    17,
                    0,
                    "flush"
                  )
                ),
                AST$(
                  23,
                  3905,
                  1,
                  0,
                  AST$(
                    3,
                    3905,
                    1,
                    0,
                    AST$(
                      17,
                      3905,
                      1,
                      0,
                      "defer"
                    ),
                    ".",
                    AST$(
                      9,
                      3905,
                      9,
                      0,
                      "promise"
                    )
                  )
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.makeObject({
              sync: TYPE$.generic(TYPE$.functionBase, TYPE$.number),
              then: TYPE$["function"]
            })),
            dependencies: ["__defer", "__typeof", "setImmediate"]
          }
        },
        binaryOperator: [
          {
            code: function (macroData, __wrap, __node, __const) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return this.binary(left, "&&", right);
            },
            operators: "and",
            options: { precedence: 1 },
            id: 1
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return this.binary(left, "||", right);
            },
            operators: "or",
            options: { precedence: 1 },
            id: 2
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return this.binary(left, "===", right);
            },
            operators: "==",
            options: { precedence: 2, maximum: 1, type: "boolean" },
            id: 5
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return __node(23, 3, 43, {
                op: "not",
                node: __node(23, 5, 43, { left: __wrap(left), inverted: false, op: "==", right: __wrap(right) })
              });
            },
            operators: "!=",
            options: { precedence: 2, maximum: 1, type: "boolean" },
            id: 6
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return this.binary(left, "==", right);
            },
            operators: "~=",
            options: { precedence: 2, maximum: 1, type: "boolean" },
            id: 7
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return __node(23, 3, 49, {
                op: "not",
                node: __node(23, 7, 49, { left: __wrap(left), inverted: false, op: "~=", right: __wrap(right) })
              });
            },
            operators: "!~=",
            options: { precedence: 2, maximum: 1, type: "boolean" },
            id: 8
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return this.binary(left, op === "~<" && "<" || "<=", right);
            },
            operators: ["~<", "~<="],
            options: { precedence: 2, maximum: 1, type: "boolean" },
            id: 9
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return op === "~>" && __node(23, 3, 57, {
                op: "not",
                node: __node(23, 9, 57, { left: __wrap(left), inverted: false, op: "~<=", right: __wrap(right) })
              }) || __node(23, 3, 57, {
                op: "not",
                node: __node(23, 9, 57, { left: __wrap(left), inverted: false, op: "~<", right: __wrap(right) })
              });
            },
            operators: ["~>", "~>="],
            options: { precedence: 2, maximum: 1, type: "boolean" },
            id: 10
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              if (this.hasType(left, "numeric") && this.hasType(right, "numeric")) {
                return this.binary(
                  this.binary(this["const"](""), "+", left),
                  "+",
                  right
                );
              } else if (this.isConst(left) && this.value(left) === "" && this.isType(right, "string")) {
                return right;
              } else if (this.isConst(right) && this.value(right) === "" && this.isType(left, "string")) {
                return left;
              } else {
                return this.binary(left, "+", right);
              }
            },
            operators: "~&",
            options: { precedence: 7, type: "string" },
            id: 29
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              if (op === "~\\") {
                return __node(
                  9,
                  __node(
                    1,
                    __node(21, "Math"),
                    __node(12, "floor")
                  ),
                  [
                    __wrap(this.binary(left, "/", right))
                  ]
                );
              } else if (op === "~*") {
                return this.binary(left, "*", right);
              } else if (op === "~/") {
                return this.binary(left, "/", right);
              } else {
                return this.binary(left, "%", right);
              }
            },
            operators: ["~*", "~/", "~%", "~\\"],
            options: { precedence: 11, type: "number" },
            id: 45
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              if (op === "~+") {
                if (!this.isType(right, "numeric")) {
                  return this.binary(left, "-", __node(23, 48, 365, { op: "~-", node: __wrap(right) }));
                } else {
                  if (!this.isType(left, "numeric")) {
                    left = __node(23, 48, 368, { op: "~+", node: __wrap(left) });
                  }
                  return this.binary(left, "+", right);
                }
              } else {
                return this.binary(left, "-", right);
              }
            },
            operators: ["~+", "~-"],
            options: { precedence: 10, type: "number" },
            id: 49
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var left, op, right, value;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              if (this.isConst(right)) {
                value = Number(this.value(right));
                if (value === 0) {
                  return __node(7, [
                    __wrap(left),
                    __node(12, 1)
                  ]);
                } else if (value === 0.5) {
                  return __node(
                    9,
                    __node(
                      1,
                      __node(21, "Math"),
                      __node(12, "sqrt")
                    ),
                    [__wrap(left)]
                  );
                } else if (value === 1) {
                  return __node(23, 48, 383, { op: "~+", node: __wrap(left) });
                } else if (value === 2) {
                  return this.maybeCache(left, function (setLeft, left) {
                    return __node(23, 45, 386, { left: __wrap(setLeft), inverted: false, op: "~*", right: __wrap(left) });
                  });
                } else if (value === 3) {
                  return this.maybeCache(left, function (setLeft, left) {
                    return __node(23, 45, 389, {
                      left: __node(23, 45, 389, { left: __wrap(setLeft), inverted: false, op: "~*", right: __wrap(left) }),
                      inverted: false,
                      op: "~*",
                      right: __wrap(left)
                    });
                  });
                } else if (value === -0.5) {
                  return __node(23, 45, 391, {
                    left: __node(12, 1),
                    inverted: false,
                    op: "~/",
                    right: __node(
                      9,
                      __node(
                        1,
                        __node(21, "Math"),
                        __node(12, "sqrt")
                      ),
                      [__wrap(left)]
                    )
                  });
                } else if (value === -1) {
                  return __node(23, 45, 393, {
                    left: __node(12, 1),
                    inverted: false,
                    op: "~/",
                    right: __wrap(left)
                  });
                } else if (value === -2) {
                  return this.maybeCache(left, function (setLeft, left) {
                    return __node(23, 45, 396, {
                      left: __node(12, 1),
                      inverted: false,
                      op: "~/",
                      right: __node(23, 45, 396, { left: __wrap(setLeft), inverted: false, op: "~*", right: __wrap(left) })
                    });
                  });
                } else if (value === -3) {
                  return this.maybeCache(left, function (setLeft, left) {
                    return __node(23, 45, 399, {
                      left: __node(12, 1),
                      inverted: false,
                      op: "~/",
                      right: __node(23, 45, 399, {
                        left: __node(23, 45, 399, { left: __wrap(setLeft), inverted: false, op: "~*", right: __wrap(left) }),
                        inverted: false,
                        op: "~*",
                        right: __wrap(left)
                      })
                    });
                  });
                }
              }
              return __node(
                9,
                __node(
                  1,
                  __node(21, "Math"),
                  __node(12, "pow")
                ),
                [__wrap(left), __wrap(right)]
              );
            },
            operators: "~^",
            options: { precedence: 12, rightToLeft: true, type: "number" },
            id: 50
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              if (op === "~bitlshift") {
                return this.binary(left, "<<", right);
              } else if (op === "~bitrshift") {
                return this.binary(left, ">>", right);
              } else {
                return this.binary(left, ">>>", right);
              }
            },
            operators: ["~bitlshift", "~bitrshift", "~biturshift"],
            options: { precedence: 9, maximum: 1, type: "number" },
            id: 54
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              if (this.getConstValue("DISABLE_TYPE_CHECKING", false)) {
                return __node(23, 50, 565, { left: __wrap(left), inverted: false, op: "~^", right: __wrap(right) });
              } else {
                return __node(23, 50, 567, {
                  left: __node(23, 60, 567, { op: "+", node: __wrap(left) }),
                  inverted: false,
                  op: "~^",
                  right: __node(23, 60, 567, { op: "+", node: __wrap(right) })
                });
              }
            },
            operators: "^",
            options: { precedence: 12, rightToLeft: true, type: "number" },
            id: 62
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              if (op === "*") {
                return __node(23, 45, 575, {
                  left: __node(23, 60, 575, { op: "+", node: __wrap(left) }),
                  inverted: false,
                  op: "~*",
                  right: __node(23, 60, 575, { op: "+", node: __wrap(right) })
                });
              } else if (op === "/") {
                return __node(23, 45, 577, {
                  left: __node(23, 60, 577, { op: "+", node: __wrap(left) }),
                  inverted: false,
                  op: "~/",
                  right: __node(23, 60, 577, { op: "+", node: __wrap(right) })
                });
              } else if (op === "%") {
                return __node(23, 45, 579, {
                  left: __node(23, 60, 579, { op: "+", node: __wrap(left) }),
                  inverted: false,
                  op: "~%",
                  right: __node(23, 60, 579, { op: "+", node: __wrap(right) })
                });
              } else {
                return __node(23, 45, 581, {
                  left: __node(23, 60, 581, { op: "+", node: __wrap(left) }),
                  inverted: false,
                  op: "~\\",
                  right: __node(23, 60, 581, { op: "+", node: __wrap(right) })
                });
              }
            },
            operators: ["*", "/", "%", "\\"],
            options: { precedence: 11, type: "number" },
            id: 64
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              if (op === "+") {
                return __node(23, 49, 588, {
                  left: __node(23, 60, 588, { op: "+", node: __wrap(left) }),
                  inverted: false,
                  op: "~+",
                  right: __node(23, 60, 588, { op: "+", node: __wrap(right) })
                });
              } else {
                return __node(23, 49, 590, {
                  left: __node(23, 60, 590, { op: "+", node: __wrap(left) }),
                  inverted: false,
                  op: "~-",
                  right: __node(23, 60, 590, { op: "+", node: __wrap(right) })
                });
              }
            },
            operators: ["+", "-"],
            options: { precedence: 10, type: "number" },
            id: 66
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              if (op === "bitlshift") {
                return __node(23, 54, 594, {
                  left: __node(23, 60, 594, { op: "+", node: __wrap(left) }),
                  inverted: false,
                  op: "~bitlshift",
                  right: __node(23, 60, 594, { op: "+", node: __wrap(right) })
                });
              } else if (op === "bitrshift") {
                return __node(23, 54, 596, {
                  left: __node(23, 60, 596, { op: "+", node: __wrap(left) }),
                  inverted: false,
                  op: "~bitrshift",
                  right: __node(23, 60, 596, { op: "+", node: __wrap(right) })
                });
              } else {
                return __node(23, 54, 598, {
                  left: __node(23, 60, 598, { op: "+", node: __wrap(left) }),
                  inverted: false,
                  op: "~biturshift",
                  right: __node(23, 60, 598, { op: "+", node: __wrap(right) })
                });
              }
            },
            operators: ["bitlshift", "bitrshift", "biturshift"],
            options: { precedence: 9, maximum: 1, type: "number" },
            id: 67
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              if (!this.getConstValue("DISABLE_TYPE_CHECKING", false)) {
                if (!this.isType(left, "stringOrNumber")) {
                  if (!this.hasType(left, "number")) {
                    left = __node(
                      9,
                      __node(21, "__str"),
                      [__wrap(left)]
                    );
                  } else {
                    left = __node(
                      9,
                      __node(21, "__strnum"),
                      [__wrap(left)]
                    );
                  }
                }
                if (!this.isType(right, "stringOrNumber")) {
                  if (!this.hasType(right, "number")) {
                    right = __node(
                      9,
                      __node(21, "__str"),
                      [__wrap(right)]
                    );
                  } else {
                    right = __node(
                      9,
                      __node(21, "__strnum"),
                      [__wrap(right)]
                    );
                  }
                }
              }
              return __node(23, 29, 616, { left: __wrap(left), inverted: false, op: "~&", right: __wrap(right) });
            },
            operators: "&",
            options: { precedence: 7, type: "string", label: "stringConcat" },
            id: 69
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var elements, f, left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              if (this.isArray(right)) {
                elements = this.elements(right);
                if (elements.length === 0) {
                  if (this.isComplex(left)) {
                    return __node(7, [__wrap(left), __const("false")]);
                  } else {
                    return __const("false");
                  }
                } else if (elements.length === 1) {
                  return __node(23, 5, 638, { left: __wrap(left), inverted: false, op: "==", right: __wrap(elements[0]) });
                } else {
                  f = function (i, current, left) {
                    if (i < elements.length) {
                      return f(
                        +i + 1,
                        __node(23, 2, 642, {
                          left: __wrap(current),
                          inverted: false,
                          op: "or",
                          right: __node(23, 5, 642, { left: __wrap(left), inverted: false, op: "==", right: __wrap(elements[i]) })
                        }),
                        left
                      );
                    } else {
                      return current;
                    }
                  };
                  return this.maybeCache(left, function (setLeft, left) {
                    return f(
                      1,
                      __node(23, 5, 646, { left: __wrap(setLeft), inverted: false, op: "==", right: __wrap(elements[0]) }),
                      left
                    );
                  });
                }
              } else {
                return __node(
                  9,
                  __node(21, "__in"),
                  [__wrap(left), __wrap(right)]
                );
              }
            },
            operators: "in",
            options: { precedence: 6, maximum: 1, invertible: true, type: "boolean" },
            id: 71
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return this.binary(right, "in", left);
            },
            operators: "haskey",
            options: { precedence: 6, maximum: 1, invertible: true, type: "boolean" },
            id: 72
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return __node(
                9,
                __node(21, "__owns"),
                [__wrap(left), __wrap(right)],
                false,
                true
              );
            },
            operators: "ownskey",
            options: {
              precedence: 6,
              maximum: 1,
              invertible: true,
              type: "boolean",
              label: "ownership"
            },
            id: 73
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              if (this.isIdent(right)) {
                if (this.name(right) === "String") {
                  return __node(23, 23, 661, { op: "isString!", node: __wrap(left) });
                } else if (this.name(right) === "Number") {
                  return __node(23, 24, 663, { op: "isNumber!", node: __wrap(left) });
                } else if (this.name(right) === "Boolean") {
                  return __node(23, 25, 665, { op: "isBoolean!", node: __wrap(left) });
                } else if (this.name(right) === "Function") {
                  return __node(23, 26, 667, { op: "isFunction!", node: __wrap(left) });
                } else if (this.name(right) === "Array") {
                  return __node(23, 27, 669, { op: "isArray!", node: __wrap(left) });
                } else if (this.name(right) === "Object") {
                  return __node(23, 28, 671, { op: "isObject!", node: __wrap(left) });
                }
              }
              return this.binary(left, "instanceof", right);
            },
            operators: "instanceof",
            options: { precedence: 6, maximum: 1, invertible: true, type: "boolean" },
            id: 74
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return __node(
                9,
                __node(21, "__cmp"),
                [__wrap(left), __wrap(right)]
              );
            },
            operators: "<=>",
            options: { precedence: 5, maximum: 1, type: "number" },
            id: 75
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return __node(23, 5, 692, {
                left: __node(23, 64, 692, { left: __wrap(left), inverted: false, op: "%", right: __wrap(right) }),
                inverted: false,
                op: "==",
                right: __node(12, 0)
              });
            },
            operators: "%%",
            options: { precedence: 2, maximum: 1, invertible: true, type: "boolean" },
            id: 76
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return __node(23, 5, 695, {
                left: __node(23, 45, 695, { left: __wrap(left), inverted: false, op: "~%", right: __wrap(right) }),
                inverted: false,
                op: "==",
                right: __node(12, 0)
              });
            },
            operators: "~%%",
            options: { precedence: 2, maximum: 1, invertible: true, type: "boolean" },
            id: 77
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              if (this.getConstValue("DISABLE_TYPE_CHECKING", false)) {
                if (op === "<") {
                  return __node(23, 9, 732, { left: __wrap(left), inverted: false, op: "~<", right: __wrap(right) });
                } else {
                  return __node(23, 9, 734, { left: __wrap(left), inverted: false, op: "~<=", right: __wrap(right) });
                }
              } else if (this.isType(left, "number")) {
                if (this.isType(right, "number")) {
                  if (op === "<") {
                    return __node(23, 9, 738, { left: __wrap(left), inverted: false, op: "~<", right: __wrap(right) });
                  } else {
                    return __node(23, 9, 740, { left: __wrap(left), inverted: false, op: "~<=", right: __wrap(right) });
                  }
                } else if (op === "<") {
                  return __node(23, 9, 743, {
                    left: __wrap(left),
                    inverted: false,
                    op: "~<",
                    right: __node(
                      9,
                      __node(21, "__num"),
                      [__wrap(right)]
                    )
                  });
                } else {
                  return __node(23, 9, 745, {
                    left: __wrap(left),
                    inverted: false,
                    op: "~<=",
                    right: __node(
                      9,
                      __node(21, "__num"),
                      [__wrap(right)]
                    )
                  });
                }
              } else if (this.isType(left, "string")) {
                if (this.isType(right, "string")) {
                  if (op === "<") {
                    return __node(23, 9, 749, { left: __wrap(left), inverted: false, op: "~<", right: __wrap(right) });
                  } else {
                    return __node(23, 9, 751, { left: __wrap(left), inverted: false, op: "~<=", right: __wrap(right) });
                  }
                } else if (op === "<") {
                  return __node(23, 9, 754, {
                    left: __wrap(left),
                    inverted: false,
                    op: "~<",
                    right: __node(
                      9,
                      __node(21, "__str"),
                      [__wrap(right)]
                    )
                  });
                } else {
                  return __node(23, 9, 756, {
                    left: __wrap(left),
                    inverted: false,
                    op: "~<=",
                    right: __node(
                      9,
                      __node(21, "__str"),
                      [__wrap(right)]
                    )
                  });
                }
              } else if (this.isType(right, "number")) {
                if (op === "<") {
                  return __node(23, 9, 759, {
                    left: __node(
                      9,
                      __node(21, "__num"),
                      [__wrap(left)]
                    ),
                    inverted: false,
                    op: "~<",
                    right: __wrap(right)
                  });
                } else {
                  return __node(23, 9, 761, {
                    left: __node(
                      9,
                      __node(21, "__num"),
                      [__wrap(left)]
                    ),
                    inverted: false,
                    op: "~<=",
                    right: __wrap(right)
                  });
                }
              } else if (this.isType(right, "string")) {
                if (op === "<") {
                  return __node(23, 9, 764, {
                    left: __node(
                      9,
                      __node(21, "__str"),
                      [__wrap(left)]
                    ),
                    inverted: false,
                    op: "~<",
                    right: __wrap(right)
                  });
                } else {
                  return __node(23, 9, 766, {
                    left: __node(
                      9,
                      __node(21, "__str"),
                      [__wrap(left)]
                    ),
                    inverted: false,
                    op: "~<=",
                    right: __wrap(right)
                  });
                }
              } else if (op === "<") {
                return __node(
                  9,
                  __node(21, "__lt"),
                  [__wrap(left), __wrap(right)]
                );
              } else {
                return __node(
                  9,
                  __node(21, "__lte"),
                  [__wrap(left), __wrap(right)]
                );
              }
            },
            operators: ["<", "<="],
            options: { precedence: 2, maximum: 1, type: "boolean" },
            id: 78
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              if (op === ">") {
                return __node(23, 3, 774, {
                  op: "not",
                  node: __node(23, 78, 774, { left: __wrap(left), inverted: false, op: "<=", right: __wrap(right) })
                });
              } else {
                return __node(23, 3, 776, {
                  op: "not",
                  node: __node(23, 78, 776, { left: __wrap(left), inverted: false, op: "<", right: __wrap(right) })
                });
              }
            },
            operators: [">", ">="],
            options: { precedence: 2, maximum: 1, type: "boolean" },
            id: 79
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var _this, left, op, right;
              _this = this;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return this.maybeCache(left, function (setLeft, left) {
                return _this.maybeCache(right, function (setRight, right) {
                  return __node(23, 16, 781, {
                    macroName: "if",
                    macroData: {
                      test: __node(23, 9, 781, { left: __wrap(setLeft), inverted: false, op: "~<", right: __wrap(setRight) }),
                      body: __wrap(left),
                      elseIfs: [],
                      elseBody: __wrap(right)
                    }
                  });
                });
              });
            },
            operators: "~min",
            options: { precedence: 8 },
            id: 80
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var _this, left, op, right;
              _this = this;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return this.maybeCache(left, function (setLeft, left) {
                return _this.maybeCache(right, function (setRight, right) {
                  return __node(23, 16, 786, {
                    macroName: "if",
                    macroData: {
                      test: __node(23, 10, 786, { left: __wrap(setLeft), inverted: false, op: "~>", right: __wrap(setRight) }),
                      body: __wrap(left),
                      elseIfs: [],
                      elseBody: __wrap(right)
                    }
                  });
                });
              });
            },
            operators: "~max",
            options: { precedence: 8 },
            id: 81
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var _this, left, op, right;
              _this = this;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return this.maybeCache(left, function (setLeft, left) {
                return _this.maybeCache(right, function (setRight, right) {
                  return __node(23, 16, 791, {
                    macroName: "if",
                    macroData: {
                      test: __node(23, 78, 791, { left: __wrap(setLeft), inverted: false, op: "<", right: __wrap(setRight) }),
                      body: __wrap(left),
                      elseIfs: [],
                      elseBody: __wrap(right)
                    }
                  });
                });
              });
            },
            operators: "min",
            options: { precedence: 8 },
            id: 82
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var _this, left, op, right;
              _this = this;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return this.maybeCache(left, function (setLeft, left) {
                return _this.maybeCache(right, function (setRight, right) {
                  return __node(23, 16, 796, {
                    macroName: "if",
                    macroData: {
                      test: __node(23, 79, 796, { left: __wrap(setLeft), inverted: false, op: ">", right: __wrap(setRight) }),
                      body: __wrap(left),
                      elseIfs: [],
                      elseBody: __wrap(right)
                    }
                  });
                });
              });
            },
            operators: "max",
            options: { precedence: 8 },
            id: 83
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return __node(
                9,
                __node(21, "__xor"),
                [__wrap(left), __wrap(right)]
              );
            },
            operators: "xor",
            options: { precedence: 1 },
            id: 84
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var _this, left, op, right;
              _this = this;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return this.maybeCache(left, function (setLeft, left) {
                return __node(23, 16, 803, {
                  macroName: "if",
                  macroData: {
                    test: __node(23, 20, 803, { op: "?", node: __wrap(setLeft) }),
                    body: __wrap(left),
                    elseIfs: [],
                    elseBody: __wrap(right)
                  }
                });
              });
            },
            operators: "?",
            options: { precedence: 1 },
            id: 85
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return this.binary(left, "&", right);
            },
            operators: "~bitand",
            options: { precedence: 1, type: "number" },
            id: 92
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return this.binary(left, "|", right);
            },
            operators: "~bitor",
            options: { precedence: 1, type: "number" },
            id: 93
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return this.binary(left, "^", right);
            },
            operators: "~bitxor",
            options: { precedence: 1, type: "number" },
            id: 94
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return __node(23, 92, 871, {
                left: __node(23, 60, 871, { op: "+", node: __wrap(left) }),
                inverted: false,
                op: "~bitand",
                right: __node(23, 60, 871, { op: "+", node: __wrap(right) })
              });
            },
            operators: "bitand",
            options: { precedence: 1, type: "number" },
            id: 96
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return __node(23, 93, 874, {
                left: __node(23, 60, 874, { op: "+", node: __wrap(left) }),
                inverted: false,
                op: "~bitor",
                right: __node(23, 60, 874, { op: "+", node: __wrap(right) })
              });
            },
            operators: "bitor",
            options: { precedence: 1, type: "number" },
            id: 97
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return __node(23, 94, 877, {
                left: __node(23, 60, 877, { op: "+", node: __wrap(left) }),
                inverted: false,
                op: "~bitxor",
                right: __node(23, 60, 877, { op: "+", node: __wrap(right) })
              });
            },
            operators: "bitxor",
            options: { precedence: 1, type: "number" },
            id: 98
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return __node(
                9,
                __node(21, "__range"),
                [
                  __wrap(left),
                  __wrap(right),
                  __node(12, 1),
                  __const("true")
                ]
              );
            },
            operators: "to",
            options: { maximum: 1, precedence: 4, type: "array" },
            id: 110
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return __node(
                9,
                __node(21, "__range"),
                [
                  __wrap(left),
                  __wrap(right),
                  __node(12, 1),
                  __const("false")
                ]
              );
            },
            operators: "til",
            options: { maximum: 1, precedence: 4, type: "array" },
            id: 111
          },
          {
            code: function() {
            var __num, __typeof;
            __num = function (num) {
              if (typeof num !== "number") {
                throw TypeError("Expected a number, got " + __typeof(num));
              } else {
                return num;
              }
            };
            __typeof = (function () {
              var _toString;
              _toString = Object.prototype.toString;
              return function (o) {
                if (o === void 0) {
                  return "Undefined";
                } else if (o === null) {
                  return "Null";
                } else {
                  return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
                }
              };
            }());
            return function (macroData, __wrap, __node, __const) {
              var callArgs, left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              if (!this.hasType(right, "number")) {
                this.error("Must provide a number to the 'by' operator", right);
              }
              if (this.isConst(right) && this.value(right) === 0) {
                this.error("'by' step must be non-zero", right);
              }
              if (this.isCall(left) && this.isIdent(this.callFunc(left)) && this.name(this.callFunc(left)) === "__range" && !this.callIsApply(left)) {
                callArgs = this.callArgs(left);
                return __node(
                  9,
                  __node(21, "__range"),
                  [__wrap(callArgs[0]), __wrap(callArgs[1]), __wrap(right), __wrap(callArgs[3])]
                );
              } else {
                if (this.isConst(right) && __num(this.value(right)) % 1 !== 0) {
                  this.error("'by' step must be an integer", right);
                }
                return __node(
                  9,
                  __node(21, "__step"),
                  [__wrap(left), __wrap(right)]
                );
              }
            
            }
          }.call(this),
            operators: "by",
            options: { maximum: 1, precedence: 3, type: "array" },
            id: 112
          },
          {
            code: function() {
            var __lt, __num, __typeof;
            __lt = function (x, y) {
              var type;
              type = typeof x;
              if (type !== "number" && type !== "string") {
                throw TypeError("Cannot compare a non-number/string: " + type);
              } else if (type !== typeof y) {
                throw TypeError("Cannot compare elements of different types: " + type + " vs " + typeof y);
              } else {
                return x < y;
              }
            };
            __num = function (num) {
              if (typeof num !== "number") {
                throw TypeError("Expected a number, got " + __typeof(num));
              } else {
                return num;
              }
            };
            __typeof = (function () {
              var _toString;
              _toString = Object.prototype.toString;
              return function (o) {
                if (o === void 0) {
                  return "Undefined";
                } else if (o === null) {
                  return "Null";
                } else {
                  return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
                }
              };
            }());
            return function (macroData, __wrap, __node, __const) {
              var element, elements, f, left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              if (this.isArray(right)) {
                elements = this.elements(right);
                if (elements.length === 0) {
                  if (this.isComplex(left)) {
                    return __node(7, [__wrap(left), __const("false")]);
                  } else {
                    return __const("false");
                  }
                } else if (elements.length === 1) {
                  element = elements[0];
                  return __node(23, 74, 2056, { left: __wrap(left), inverted: false, op: "instanceof", right: __wrap(element) });
                } else {
                  f = function (i, current, left) {
                    var element;
                    if (__lt(i, elements.length)) {
                      element = elements[i];
                      return f(
                        __num(i) + 1,
                        __node(23, 2, 2061, {
                          left: __wrap(current),
                          inverted: false,
                          op: "or",
                          right: __node(23, 74, 2061, { left: __wrap(left), inverted: false, op: "instanceof", right: __wrap(element) })
                        }),
                        left
                      );
                    } else {
                      return current;
                    }
                  };
                  return this.maybeCache(left, function (setLeft, left) {
                    var element;
                    element = elements[0];
                    return f(
                      1,
                      __node(23, 74, 2066, { left: __wrap(setLeft), inverted: false, op: "instanceof", right: __wrap(element) }),
                      left
                    );
                  });
                }
              } else {
                return __node(
                  9,
                  __node(21, "__instanceofsome"),
                  [__wrap(left), __wrap(right)]
                );
              }
            
            }
          }.call(this),
            operators: "instanceofsome",
            options: { precedence: 6, maximum: 1, invertible: true, type: "boolean" },
            id: 118
          },
          {
            code: function() {
            var __is, __num, __typeof;
            __is = typeof Object.is === "function" ? Object.is
              : function (x, y) {
                if (x === y) {
                  return x !== 0 || 1 / x === 1 / y;
                } else {
                  return x !== x && y !== y;
                }
              };
            __num = function (num) {
              if (typeof num !== "number") {
                throw TypeError("Expected a number, got " + __typeof(num));
              } else {
                return num;
              }
            };
            __typeof = (function () {
              var _toString;
              _toString = Object.prototype.toString;
              return function (o) {
                if (o === void 0) {
                  return "Undefined";
                } else if (o === null) {
                  return "Null";
                } else {
                  return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
                }
              };
            }());
            return function (macroData, __wrap, __node, __const) {
              var _this, left, op, result, right;
              _this = this;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              if (this.hasType(left, "number") && this.hasType(right, "number")) {
                if (this.isConst(left)) {
                  if (this.isConst(right)) {
                    result = __is(this.value(left), this.value(right));
                    return __wrap(result);
                  } else if (typeof this.value(left) === "number" && isNaN(this.value(left))) {
                    return this.maybeCache(right, function (setRight, right) {
                      return __node(23, 6, 3159, { left: __wrap(setRight), inverted: false, op: "!=", right: __wrap(right) });
                    });
                  } else if (this.value(left) === 0) {
                    return this.maybeCache(right, function (setRight, right) {
                      if (1 / __num(_this.value(left)) < 0) {
                        return __node(23, 1, 3163, {
                          left: __node(23, 5, 3163, {
                            left: __wrap(setRight),
                            inverted: false,
                            op: "==",
                            right: __node(12, 0)
                          }),
                          inverted: false,
                          op: "and",
                          right: __node(23, 78, 3163, {
                            left: __node(23, 45, 3163, {
                              left: __node(12, 1),
                              inverted: false,
                              op: "~/",
                              right: __wrap(right)
                            }),
                            inverted: false,
                            op: "<",
                            right: __node(12, 0)
                          })
                        });
                      } else {
                        return __node(23, 1, 3165, {
                          left: __node(23, 5, 3165, {
                            left: __wrap(setRight),
                            inverted: false,
                            op: "==",
                            right: __node(12, 0)
                          }),
                          inverted: false,
                          op: "and",
                          right: __node(23, 79, 3165, {
                            left: __node(23, 45, 3165, {
                              left: __node(12, 1),
                              inverted: false,
                              op: "~/",
                              right: __wrap(right)
                            }),
                            inverted: false,
                            op: ">",
                            right: __node(12, 0)
                          })
                        });
                      }
                    });
                  } else {
                    return __node(23, 5, 3167, { left: __wrap(left), inverted: false, op: "==", right: __wrap(right) });
                  }
                } else if (this.isConst(right)) {
                  if (typeof this.value(right) === "number" && isNaN(this.value(right))) {
                    return this.maybeCache(left, function (setLeft, left) {
                      return __node(23, 6, 3171, { left: __wrap(setLeft), inverted: false, op: "!=", right: __wrap(left) });
                    });
                  } else if (this.value(right) === 0) {
                    return this.maybeCache(left, function (setLeft, left) {
                      if (1 / __num(_this.value(right)) < 0) {
                        return __node(23, 1, 3175, {
                          left: __node(23, 5, 3175, {
                            left: __wrap(setLeft),
                            inverted: false,
                            op: "==",
                            right: __node(12, 0)
                          }),
                          inverted: false,
                          op: "and",
                          right: __node(23, 78, 3175, {
                            left: __node(23, 45, 3175, {
                              left: __node(12, 1),
                              inverted: false,
                              op: "~/",
                              right: __wrap(left)
                            }),
                            inverted: false,
                            op: "<",
                            right: __node(12, 0)
                          })
                        });
                      } else {
                        return __node(23, 1, 3177, {
                          left: __node(23, 5, 3177, {
                            left: __wrap(setLeft),
                            inverted: false,
                            op: "==",
                            right: __node(12, 0)
                          }),
                          inverted: false,
                          op: "and",
                          right: __node(23, 79, 3177, {
                            left: __node(23, 45, 3177, {
                              left: __node(12, 1),
                              inverted: false,
                              op: "~/",
                              right: __wrap(left)
                            }),
                            inverted: false,
                            op: ">",
                            right: __node(12, 0)
                          })
                        });
                      }
                    });
                  } else {
                    return __node(23, 5, 3179, { left: __wrap(left), inverted: false, op: "==", right: __wrap(right) });
                  }
                } else {
                  return __node(
                    9,
                    __node(21, "__is"),
                    [__wrap(left), __wrap(right)]
                  );
                }
              } else {
                return __node(23, 5, 3183, { left: __wrap(left), inverted: false, op: "==", right: __wrap(right) });
              }
            
            }
          }.call(this),
            operators: "is",
            options: { precedence: 2, maximum: 1, type: "boolean" },
            id: 143
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return __node(23, 3, 3186, {
                op: "not",
                node: __node(23, 143, 3186, { left: __wrap(left), inverted: false, op: "is", right: __wrap(right) })
              });
            },
            operators: "isnt",
            options: { precedence: 2, maximum: 1, type: "boolean" },
            id: 144
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return __node(
                9,
                __node(21, "__compose"),
                [__wrap(left), __wrap(right)]
              );
            },
            operators: "<<",
            options: { precedence: 13, type: "function" },
            id: 146
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var left, op, right, tmp;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              if (!this.isNoop(left) && !this.isNoop(right)) {
                tmp = this.tmp("ref");
                return __node(7, [
                  __node(
                    23,
                    38,
                    3251,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __node(
                          23,
                          37,
                          3251,
                          __node(
                            23,
                            31,
                            3251,
                            { ident: __wrap(tmp) },
                            true
                          ),
                          true
                        ),
                        value: __wrap(left)
                      }
                    },
                    true
                  ),
                  __node(
                    9,
                    __node(21, "__compose"),
                    [__wrap(right), __wrap(tmp)]
                  )
                ]);
              } else {
                return __node(
                  9,
                  __node(21, "__compose"),
                  [__wrap(right), __wrap(left)]
                );
              }
            },
            operators: ">>",
            options: { precedence: 13, type: "function", rightToLeft: true },
            id: 147
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return __node(9, __wrap(left), [__wrap(right)]);
            },
            operators: "<|",
            options: { precedence: 0, rightToLeft: true },
            id: 148
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var left, op, right, tmp;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              if (!this.isNoop(left) && !this.isNoop(right)) {
                tmp = this.tmp("ref");
                return __node(7, [
                  __node(
                    23,
                    38,
                    3279,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __node(
                          23,
                          37,
                          3279,
                          __node(
                            23,
                            31,
                            3279,
                            { ident: __wrap(tmp) },
                            true
                          ),
                          true
                        ),
                        value: __wrap(left)
                      }
                    },
                    true
                  ),
                  __node(9, __wrap(right), [__wrap(tmp)])
                ]);
              } else {
                return __node(9, __wrap(right), [__wrap(left)]);
              }
            },
            operators: "|>",
            options: { precedence: 0 },
            id: 149
          },
          {
            code: function() {
            var __isArray, __slice, __strnum, __toArray, __typeof;
            __isArray = typeof Array.isArray === "function" ? Array.isArray
              : (function () {
                var _toString;
                _toString = Object.prototype.toString;
                return function (x) {
                  return _toString.call(x) === "[object Array]";
                };
              }());
            __slice = Array.prototype.slice;
            __strnum = function (strnum) {
              var type;
              type = typeof strnum;
              if (type === "string") {
                return strnum;
              } else if (type === "number") {
                return String(strnum);
              } else {
                throw TypeError("Expected a string or number, got " + __typeof(strnum));
              }
            };
            __toArray = function (x) {
              if (x == null) {
                throw TypeError("Expected an object, got " + __typeof(x));
              } else if (__isArray(x)) {
                return x;
              } else if (typeof x === "string") {
                return x.split("");
              } else if (typeof x.length === "number") {
                return __slice.call(x);
              } else {
                throw TypeError("Expected an object with a length property, got " + __typeof(x));
              }
            };
            __typeof = (function () {
              var _toString;
              _toString = Object.prototype.toString;
              return function (o) {
                if (o === void 0) {
                  return "Undefined";
                } else if (o === null) {
                  return "Null";
                } else {
                  return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
                }
              };
            }());
            return function (macroData, __wrap, __node, __const) {
              var _this, left, op, right;
              _this = this;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              if (this.isObject(right)) {
                return this.maybeCache(left, function (setLeft, nextLeft) {
                  var _arr, _ref, block, currentLeft, descriptor, i, key, len, pairs,
                      property, value;
                  currentLeft = setLeft;
                  block = [];
                  pairs = _this.pairs(right);
                  for (_arr = __toArray(pairs), i = 0, len = _arr.length; i < len; ++i) {
                    _ref = _arr[i];
                    key = _ref.key;
                    value = _ref.value;
                    property = _ref.property;
                    if (property != null) {
                      if ((property === "get" || property === "set") && i < len - 1 && pairs[i + 1].property != null && _this.eq(key, pairs[i + 1].key) && pairs[i + 1].property !== property && ((_ref = pairs[i + 1].property) === "get" || _ref === "set")) {
                        continue;
                      }
                      if (property === "property") {
                        block.push(__node(
                          9,
                          __node(21, "__defProp"),
                          [__wrap(currentLeft), __wrap(key), __wrap(value)]
                        ));
                      } else if (property === "get" || property === "set") {
                        if (i > 0 && pairs[i - 1].property != null && _this.eq(key, pairs[i - 1].key) && pairs[i - 1].property !== property && ((_ref = pairs[i - 1].property) === "get" || _ref === "set")) {
                          descriptor = __node(26, [
                            { key: __wrap(pairs[i - 1].property), value: __wrap(pairs[i - 1].value) },
                            { key: __wrap(property), value: __wrap(value) },
                            {
                              key: __node(12, "enumerable"),
                              value: __const("true")
                            },
                            {
                              key: __node(12, "configurable"),
                              value: __const("true")
                            }
                          ]);
                        } else {
                          descriptor = __node(26, [
                            { key: __wrap(property), value: __wrap(value) },
                            {
                              key: __node(12, "enumerable"),
                              value: __const("true")
                            },
                            {
                              key: __node(12, "configurable"),
                              value: __const("true")
                            }
                          ]);
                        }
                        block.push(__node(
                          9,
                          __node(21, "__defProp"),
                          [__wrap(currentLeft), __wrap(key), __wrap(descriptor)]
                        ));
                      } else {
                        _this.error("Unknown property: " + __strnum(property), key);
                      }
                    } else {
                      block.push(__node(
                        23,
                        30,
                        3320,
                        {
                          left: __node(1, __wrap(currentLeft), __wrap(key)),
                          op: ":=",
                          right: __wrap(value)
                        },
                        true
                      ));
                    }
                    currentLeft = nextLeft;
                  }
                  block.push(__wrap(currentLeft));
                  return __wrap(block);
                });
              } else {
                return __node(
                  9,
                  __node(21, "__import"),
                  [__wrap(left), __wrap(right)]
                );
              }
            
            }
          }.call(this),
            operators: "<<<",
            options: { precedence: 6 },
            id: 150
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var left, op, right, tmp;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              if (!this.isNoop(left) && !this.isNoop(right)) {
                tmp = this.tmp("ref");
                return __node(7, [
                  __node(
                    23,
                    38,
                    3331,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __node(
                          23,
                          37,
                          3331,
                          __node(
                            23,
                            31,
                            3331,
                            { ident: __wrap(tmp) },
                            true
                          ),
                          true
                        ),
                        value: __wrap(left)
                      }
                    },
                    true
                  ),
                  __node(
                    23,
                    150,
                    3332,
                    { left: __wrap(right), inverted: false, op: "<<<", right: __wrap(tmp) },
                    true
                  )
                ]);
              } else {
                return __node(23, 150, 3334, { left: __wrap(right), inverted: false, op: "<<<", right: __wrap(left) });
              }
            },
            operators: ">>>",
            options: { precedence: 6, rightToLeft: true },
            id: 151
          }
        ],
        assignOperator: [
          {
            code: function (macroData, __wrap, __node, __const) {
              var _this, left, op, right;
              _this = this;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              if (!this.isComplex(left) || this.isAccess(left) && !this.isComplex(this.parent(left)) && !this.isComplex(this.child(left))) {
                return this.mutateLast(
                  right || this.noop(),
                  function (n) {
                    return _this.assign(left, "=", n);
                  },
                  true
                );
              } else {
                return this.assign(left, "=", right);
              }
            },
            operators: ":=",
            options: { type: "right" },
            id: 30
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var _this, left, op, right;
              _this = this;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return this.maybeCacheAccess(left, function (setLeft, left) {
                return __node(23, 1, 311, {
                  left: __wrap(setLeft),
                  inverted: false,
                  op: "and",
                  right: __node(23, 30, 311, { left: __wrap(left), op: ":=", right: __wrap(right) })
                });
              });
            },
            operators: "and=",
            options: void 0,
            id: 43
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var _this, left, op, right;
              _this = this;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return this.maybeCacheAccess(left, function (setLeft, left) {
                return __node(23, 2, 315, {
                  left: __wrap(setLeft),
                  inverted: false,
                  op: "or",
                  right: __node(23, 30, 315, { left: __wrap(left), op: ":=", right: __wrap(right) })
                });
              });
            },
            operators: "or=",
            options: void 0,
            id: 44
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var _this, left, op, right;
              _this = this;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              if (this.isIdentOrTmp(left)) {
                return this.mutateLast(
                  right || this.noop(),
                  function (n) {
                    if (op === "~*=") {
                      return _this.assign(left, "*=", n);
                    } else if (op === "~/=") {
                      return _this.assign(left, "/=", n);
                    } else {
                      return _this.assign(left, "%=", n);
                    }
                  },
                  true
                );
              } else if (op === "~*=") {
                return this.assign(left, "*=", right);
              } else if (op === "~/=") {
                return this.assign(left, "/=", right);
              } else {
                return this.assign(left, "%=", right);
              }
            },
            operators: ["~*=", "~/=", "~%="],
            options: { type: "number" },
            id: 46
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return this.maybeCacheAccess(left, function (setLeft, left) {
                return __node(23, 30, 350, {
                  left: __wrap(setLeft),
                  op: ":=",
                  right: __node(23, 45, 350, { left: __wrap(left), inverted: false, op: "~\\", right: __wrap(right) })
                });
              });
            },
            operators: "~\\=",
            options: { type: "number" },
            id: 47
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return this.maybeCacheAccess(left, function (setLeft, left) {
                return __node(23, 30, 404, {
                  left: __wrap(setLeft),
                  op: ":=",
                  right: __node(23, 50, 404, { left: __wrap(left), inverted: false, op: "~^", right: __wrap(right) })
                });
              });
            },
            operators: "~^=",
            options: { type: "number" },
            id: 51
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var _this, left, op, right, value;
              _this = this;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              if (this.isConst(right)) {
                value = this.value(right);
                if (value === 1) {
                  return this.unary("++", left);
                } else if (value === -1) {
                  return this.unary("--", left);
                } else if (typeof value === "number" && !this.isType(left, "numeric")) {
                  return this.assign(left, "-=", this["const"](-value));
                }
              }
              if (this.isType(left, "numeric")) {
                if (this.isIdentOrTmp(left)) {
                  return this.mutateLast(
                    right || this.noop(),
                    function (n) {
                      if (!_this.isType(n, "numeric")) {
                        n = __node(23, 48, 420, { op: "~+", node: __wrap(n) });
                      }
                      return _this.assign(left, "+=", n);
                    },
                    true
                  );
                } else {
                  if (!this.isType(right, "numeric")) {
                    right = __node(23, 48, 424, { op: "~+", node: __wrap(right) });
                  }
                  return this.assign(left, "+=", right);
                }
              } else if (this.isIdentOrTmp(left)) {
                return this.mutateLast(
                  right || this.noop(),
                  function (n) {
                    return _this.assign(left, "-=", __node(23, 48, 428, { op: "~-", node: __wrap(n) }));
                  },
                  true
                );
              } else {
                return this.assign(left, "-=", __node(23, 48, 430, { op: "~-", node: __wrap(right) }));
              }
            },
            operators: "~+=",
            options: { type: "number" },
            id: 52
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var _this, left, op, right, value;
              _this = this;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              if (this.isConst(right)) {
                value = this.value(right);
                if (value === 1) {
                  return this.unary("--", left);
                } else if (value === -1) {
                  return this.unary("++", left);
                }
              }
              if (this.isIdentOrTmp(left)) {
                return this.mutateLast(
                  right || this.noop(),
                  function (n) {
                    return _this.assign(left, "-=", n);
                  },
                  true
                );
              } else {
                return this.assign(left, "-=", right);
              }
            },
            operators: "~-=",
            options: { type: "number" },
            id: 53
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var _this, left, op, right;
              _this = this;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              if (this.isIdentOrTmp(left)) {
                return this.mutateLast(
                  right || this.noop(),
                  function (n) {
                    if (op === "~bitlshift=") {
                      return _this.assign(left, "<<=", n);
                    } else if (op === "~bitrshift=") {
                      return _this.assign(left, ">>=", n);
                    } else {
                      return _this.assign(left, ">>>=", n);
                    }
                  },
                  true
                );
              } else if (op === "~bitlshift=") {
                return this.assign(left, "<<=", right);
              } else if (op === "~bitrshift=") {
                return this.assign(left, ">>=", right);
              } else {
                return this.assign(left, ">>>=", right);
              }
            },
            operators: ["~bitlshift=", "~bitrshift=", "~biturshift="],
            options: { type: "number" },
            id: 55
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var _this, left, op, right;
              _this = this;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              if (this.isIdentOrTmp(left)) {
                return this.mutateLast(
                  right || this.noop(),
                  function (n) {
                    if (_this.hasType(left, "numeric") && _this.hasType(n, "numeric")) {
                      n = __node(23, 29, 473, {
                        left: __node(12, ""),
                        inverted: false,
                        op: "~&",
                        right: __node(21, "n")
                      });
                    }
                    return _this.assign(left, "+=", n);
                  },
                  true
                );
              } else {
                if (this.hasType(left, "numeric") && this.hasType(right, "numeric")) {
                  right = __node(23, 29, 477, {
                    left: __node(12, ""),
                    inverted: false,
                    op: "~&",
                    right: __node(21, "right")
                  });
                }
                return this.assign(left, "+=", right);
              }
            },
            operators: "~&=",
            options: { type: "string" },
            id: 56
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var _this, left, op, right;
              _this = this;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return this.maybeCacheAccess(left, function (setLeft, left) {
                return __node(23, 30, 571, {
                  left: __wrap(setLeft),
                  op: ":=",
                  right: __node(23, 62, 571, { left: __wrap(left), inverted: false, op: "^", right: __wrap(right) })
                });
              });
            },
            operators: "^=",
            options: { type: "number" },
            id: 63
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var _this, left, op, right;
              _this = this;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return this.maybeCacheAccess(left, function (setLeft, left) {
                return __node(23, 30, 602, {
                  left: __wrap(setLeft),
                  op: ":=",
                  right: __node(23, 64, 602, { left: __wrap(left), inverted: false, op: "\\", right: __wrap(right) })
                });
              });
            },
            operators: "\\=",
            options: { type: "number" },
            id: 68
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var _this, left, op, right;
              _this = this;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              if (this.getConstValue("DISABLE_TYPE_CHECKING", false)) {
                return __node(23, 56, 620, { left: __wrap(left), op: "~&=", right: __wrap(right) });
              } else if (this.isType(left, "string")) {
                return __node(23, 56, 622, {
                  left: __wrap(left),
                  op: "~&=",
                  right: __node(23, 69, 622, {
                    left: __node(12, ""),
                    inverted: false,
                    op: "&",
                    right: __wrap(right)
                  })
                });
              } else {
                return this.maybeCacheAccess(left, function (setLeft, left) {
                  return __node(23, 30, 625, {
                    left: __wrap(setLeft),
                    op: ":=",
                    right: __node(23, 69, 625, { left: __wrap(left), inverted: false, op: "&", right: __wrap(right) })
                  });
                });
              }
            },
            operators: "&=",
            options: { type: "string" },
            id: 70
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var _this, left, op, right;
              _this = this;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return this.maybeCacheAccess(left, function (setLeft, left) {
                return _this.maybeCache(setLeft, function (setLeft, leftValue) {
                  return _this.maybeCache(right, function (setRight, right) {
                    return __node(23, 16, 809, {
                      macroName: "if",
                      macroData: {
                        test: __node(23, 10, 809, { left: __wrap(setLeft), inverted: false, op: "~>", right: __wrap(setRight) }),
                        body: __node(23, 30, 809, { left: __wrap(left), op: ":=", right: __wrap(right) }),
                        elseIfs: [],
                        elseBody: __wrap(leftValue)
                      }
                    });
                  });
                });
              });
            },
            operators: "~min=",
            options: void 0,
            id: 86
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var _this, left, op, right;
              _this = this;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return this.maybeCacheAccess(left, function (setLeft, left) {
                return _this.maybeCache(setLeft, function (setLeft, leftValue) {
                  return _this.maybeCache(right, function (setRight, right) {
                    return __node(23, 16, 815, {
                      macroName: "if",
                      macroData: {
                        test: __node(23, 9, 815, { left: __wrap(setLeft), inverted: false, op: "~<", right: __wrap(setRight) }),
                        body: __node(23, 30, 815, { left: __wrap(left), op: ":=", right: __wrap(right) }),
                        elseIfs: [],
                        elseBody: __wrap(leftValue)
                      }
                    });
                  });
                });
              });
            },
            operators: "~max=",
            options: void 0,
            id: 87
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var _this, left, op, right;
              _this = this;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return this.maybeCacheAccess(left, function (setLeft, left) {
                return _this.maybeCache(setLeft, function (setLeft, leftValue) {
                  return _this.maybeCache(right, function (setRight, right) {
                    return __node(23, 16, 821, {
                      macroName: "if",
                      macroData: {
                        test: __node(23, 79, 821, { left: __wrap(setLeft), inverted: false, op: ">", right: __wrap(setRight) }),
                        body: __node(23, 30, 821, { left: __wrap(left), op: ":=", right: __wrap(right) }),
                        elseIfs: [],
                        elseBody: __wrap(leftValue)
                      }
                    });
                  });
                });
              });
            },
            operators: "min=",
            options: void 0,
            id: 88
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var _this, left, op, right;
              _this = this;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return this.maybeCacheAccess(left, function (setLeft, left) {
                return _this.maybeCache(setLeft, function (setLeft, leftValue) {
                  return _this.maybeCache(right, function (setRight, right) {
                    return __node(23, 16, 827, {
                      macroName: "if",
                      macroData: {
                        test: __node(23, 78, 827, { left: __wrap(setLeft), inverted: false, op: "<", right: __wrap(setRight) }),
                        body: __node(23, 30, 827, { left: __wrap(left), op: ":=", right: __wrap(right) }),
                        elseIfs: [],
                        elseBody: __wrap(leftValue)
                      }
                    });
                  });
                });
              });
            },
            operators: "max=",
            options: void 0,
            id: 89
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var _this, left, op, right;
              _this = this;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return this.maybeCacheAccess(left, function (setLeft, left) {
                return __node(23, 30, 831, {
                  left: __wrap(setLeft),
                  op: ":=",
                  right: __node(23, 84, 831, { left: __wrap(left), inverted: false, op: "xor", right: __wrap(right) })
                });
              });
            },
            operators: "xor=",
            options: void 0,
            id: 90
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var _this, left, op, right;
              _this = this;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return this.maybeCacheAccess(left, function (setLeft, left) {
                return _this.maybeCache(setLeft, function (setLeft, leftValue) {
                  if (_this.position === "expression") {
                    return __node(23, 16, 837, {
                      macroName: "if",
                      macroData: {
                        test: __node(23, 20, 837, { op: "?", node: __wrap(setLeft) }),
                        body: __wrap(leftValue),
                        elseIfs: [],
                        elseBody: __node(23, 30, 837, { left: __wrap(left), op: ":=", right: __wrap(right) })
                      }
                    });
                  } else {
                    return __node(
                      23,
                      17,
                      839,
                      {
                        macroName: "if",
                        macroData: {
                          test: __node(
                            23,
                            3,
                            839,
                            {
                              op: "not",
                              node: __node(
                                23,
                                20,
                                839,
                                { op: "?", node: __wrap(setLeft) },
                                true
                              )
                            },
                            true
                          ),
                          body: __node(
                            23,
                            30,
                            840,
                            { left: __wrap(left), op: ":=", right: __wrap(right) },
                            true
                          ),
                          elseIfs: [],
                          elseBody: __wrap(leftValue)
                        }
                      },
                      true
                    );
                  }
                });
              });
            },
            operators: "?=",
            options: void 0,
            id: 91
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var _this, left, op, right;
              _this = this;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              if (this.isIdentOrTmp(left)) {
                return this.mutateLast(
                  right || this.noop(),
                  function (n) {
                    if (op === "~bitand=") {
                      return _this.assign(left, "&=", n);
                    } else if (op === "~bitor=") {
                      return _this.assign(left, "|=", n);
                    } else {
                      return _this.assign(left, "^=", n);
                    }
                  },
                  true
                );
              } else if (op === "~bitand=") {
                return this.assign(left, "&=", right);
              } else if (op === "~bitor=") {
                return this.assign(left, "|=", right);
              } else {
                return this.assign(left, "^=", right);
              }
            },
            operators: ["~bitand=", "~bitor=", "~bitxor="],
            options: { type: "number" },
            id: 95
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var _this, left, op, right;
              _this = this;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              if (this.getConstValue("DISABLE_TYPE_CHECKING", false) || this.isType(left, "number")) {
                if (op === "*=") {
                  return __node(23, 46, 906, {
                    left: __wrap(left),
                    op: "~*=",
                    right: __node(23, 60, 906, { op: "+", node: __wrap(right) })
                  });
                } else if (op === "/=") {
                  return __node(23, 46, 908, {
                    left: __wrap(left),
                    op: "~/=",
                    right: __node(23, 60, 908, { op: "+", node: __wrap(right) })
                  });
                } else if (op === "%=") {
                  return __node(23, 46, 910, {
                    left: __wrap(left),
                    op: "~%=",
                    right: __node(23, 60, 910, { op: "+", node: __wrap(right) })
                  });
                } else if (op === "+=") {
                  return __node(23, 52, 912, {
                    left: __wrap(left),
                    op: "~+=",
                    right: __node(23, 60, 912, { op: "+", node: __wrap(right) })
                  });
                } else if (op === "-=") {
                  return __node(23, 53, 914, {
                    left: __wrap(left),
                    op: "~-=",
                    right: __node(23, 60, 914, { op: "+", node: __wrap(right) })
                  });
                } else if (op === "bitlshift=") {
                  return __node(23, 55, 916, {
                    left: __wrap(left),
                    op: "~bitlshift=",
                    right: __node(23, 60, 916, { op: "+", node: __wrap(right) })
                  });
                } else if (op === "bitrshift=") {
                  return __node(23, 55, 918, {
                    left: __wrap(left),
                    op: "~bitrshift=",
                    right: __node(23, 60, 918, { op: "+", node: __wrap(right) })
                  });
                } else if (op === "biturshift=") {
                  return __node(23, 55, 920, {
                    left: __wrap(left),
                    op: "~biturshift=",
                    right: __node(23, 60, 920, { op: "+", node: __wrap(right) })
                  });
                } else if (op === "bitand=") {
                  return __node(23, 95, 922, {
                    left: __wrap(left),
                    op: "~bitand=",
                    right: __node(23, 60, 922, { op: "+", node: __wrap(right) })
                  });
                } else if (op === "bitor=") {
                  return __node(23, 95, 924, {
                    left: __wrap(left),
                    op: "~bitor=",
                    right: __node(23, 60, 924, { op: "+", node: __wrap(right) })
                  });
                } else if (op === "bitxor=") {
                  return __node(23, 95, 926, {
                    left: __wrap(left),
                    op: "~bitxor=",
                    right: __node(23, 60, 926, { op: "+", node: __wrap(right) })
                  });
                } else {
                  return this.error("Unknown operator " + op);
                }
              } else {
                return this.maybeCacheAccess(left, function (setLeft, left) {
                  var action;
                  if (op === "*=") {
                    action = __node(23, 64, 932, { left: __wrap(left), inverted: false, op: "*", right: __wrap(right) });
                  } else if (op === "/=") {
                    action = __node(23, 64, 934, { left: __wrap(left), inverted: false, op: "/", right: __wrap(right) });
                  } else if (op === "%=") {
                    action = __node(23, 64, 936, { left: __wrap(left), inverted: false, op: "%", right: __wrap(right) });
                  } else if (op === "+=") {
                    action = __node(23, 66, 938, { left: __wrap(left), inverted: false, op: "+", right: __wrap(right) });
                  } else if (op === "-=") {
                    action = __node(23, 66, 940, { left: __wrap(left), inverted: false, op: "-", right: __wrap(right) });
                  } else if (op === "bitlshift=") {
                    action = __node(23, 67, 942, { left: __wrap(left), inverted: false, op: "bitlshift", right: __wrap(right) });
                  } else if (op === "bitrshift=") {
                    action = __node(23, 67, 944, { left: __wrap(left), inverted: false, op: "bitrshift", right: __wrap(right) });
                  } else if (op === "biturshift=") {
                    action = __node(23, 67, 946, { left: __wrap(left), inverted: false, op: "biturshift", right: __wrap(right) });
                  } else if (op === "bitand=") {
                    action = __node(23, 96, 948, { left: __wrap(left), inverted: false, op: "bitand", right: __wrap(right) });
                  } else if (op === "bitor=") {
                    action = __node(23, 97, 950, { left: __wrap(left), inverted: false, op: "bitor", right: __wrap(right) });
                  } else if (op === "bitxor=") {
                    action = __node(23, 98, 952, { left: __wrap(left), inverted: false, op: "bitxor", right: __wrap(right) });
                  } else {
                    action = _this.error("Unknown operator " + op);
                  }
                  return __node(23, 30, 955, { left: __wrap(setLeft), op: ":=", right: __wrap(action) });
                });
              }
            },
            operators: [
              "*=",
              "/=",
              "%=",
              "+=",
              "-=",
              "bitlshift=",
              "bitrshift=",
              "biturshift=",
              "bitand=",
              "bitor=",
              "bitxor="
            ],
            options: { type: "number" },
            id: 103
          }
        ],
        unaryOperator: [
          {
            code: function (macroData, __wrap, __node, __const) {
              var _this, node, op;
              _this = this;
              op = macroData.op;
              node = macroData.node;
              return this.mutateLast(
                node || this.noop(),
                function (n) {
                  return _this.unary("!", n);
                },
                true
              );
            },
            operators: "not",
            options: { type: "boolean" },
            id: 3
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var _this, node, op;
              _this = this;
              op = macroData.op;
              node = macroData.node;
              return this.mutateLast(
                node || this.noop(),
                function (n) {
                  return _this.unary("typeof", n);
                },
                true
              );
            },
            operators: "typeof",
            options: { type: "string" },
            id: 4
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var _this, node, op;
              _this = this;
              op = macroData.op;
              node = macroData.node;
              return this.mutateLast(
                node || this.noop(),
                function (n) {
                  return _this["throw"](n);
                },
                true
              );
            },
            operators: "throw",
            options: { type: "none" },
            id: 11
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var node, op;
              op = macroData.op;
              node = macroData.node;
              return this.unary("++post", node);
            },
            operators: "postInc!",
            options: { type: "number" },
            id: 12
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var node, op;
              op = macroData.op;
              node = macroData.node;
              return this.unary("--post", node);
            },
            operators: "postDec!",
            options: { type: "number" },
            id: 13
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var node, op;
              op = macroData.op;
              node = macroData.node;
              if (this.isIdentOrTmp(node) && !this.hasVariable(node)) {
                return __node(23, 1, 112, {
                  left: __node(23, 6, 112, {
                    left: __node(23, 4, 112, { op: "typeof", node: __wrap(node) }),
                    inverted: false,
                    op: "!=",
                    right: __node(12, "undefined")
                  }),
                  inverted: false,
                  op: "and",
                  right: __node(23, 6, 112, { left: __wrap(node), inverted: false, op: "!=", right: __const("null") })
                });
              } else {
                return __node(23, 8, 114, { left: __wrap(node), inverted: false, op: "!~=", right: __const("null") });
              }
            },
            operators: "?",
            options: { postfix: true, type: "boolean", label: "existential" },
            id: 20
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var node, op;
              op = macroData.op;
              node = macroData.node;
              if (this.isIdentOrTmp(node) && !this.hasVariable(node)) {
                return __node(23, 5, 118, {
                  left: __node(23, 4, 118, { op: "typeof", node: __wrap(node) }),
                  inverted: false,
                  op: "==",
                  right: __node(12, "undefined")
                });
              } else {
                return __node(23, 5, 120, { left: __wrap(node), inverted: false, op: "==", right: __const("void") });
              }
            },
            operators: ["isVoid!", "isUndefined!"],
            options: { type: "boolean" },
            id: 21
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var node, op;
              op = macroData.op;
              node = macroData.node;
              if (this.isIdentOrTmp(node) && !this.hasVariable(node)) {
                return __node(23, 1, 124, {
                  left: __node(23, 6, 124, {
                    left: __node(23, 4, 124, { op: "typeof", node: __wrap(node) }),
                    inverted: false,
                    op: "!=",
                    right: __node(12, "undefined")
                  }),
                  inverted: false,
                  op: "and",
                  right: __node(23, 5, 124, { left: __wrap(node), inverted: false, op: "==", right: __const("null") })
                });
              } else {
                return __node(23, 5, 126, { left: __wrap(node), inverted: false, op: "==", right: __const("null") });
              }
            },
            operators: "isNull!",
            options: { type: "boolean" },
            id: 22
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var node, op;
              op = macroData.op;
              node = macroData.node;
              return __node(23, 5, 129, {
                left: __node(23, 4, 129, { op: "typeof", node: __wrap(node) }),
                inverted: false,
                op: "==",
                right: __node(12, "string")
              });
            },
            operators: "isString!",
            options: { type: "boolean" },
            id: 23
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var node, op;
              op = macroData.op;
              node = macroData.node;
              return __node(23, 5, 132, {
                left: __node(23, 4, 132, { op: "typeof", node: __wrap(node) }),
                inverted: false,
                op: "==",
                right: __node(12, "number")
              });
            },
            operators: "isNumber!",
            options: { type: "boolean" },
            id: 24
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var node, op;
              op = macroData.op;
              node = macroData.node;
              return __node(23, 5, 135, {
                left: __node(23, 4, 135, { op: "typeof", node: __wrap(node) }),
                inverted: false,
                op: "==",
                right: __node(12, "boolean")
              });
            },
            operators: "isBoolean!",
            options: { type: "boolean" },
            id: 25
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var node, op;
              op = macroData.op;
              node = macroData.node;
              return __node(23, 5, 138, {
                left: __node(23, 4, 138, { op: "typeof", node: __wrap(node) }),
                inverted: false,
                op: "==",
                right: __node(12, "function")
              });
            },
            operators: "isFunction!",
            options: { type: "boolean" },
            id: 26
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var _this, node, op;
              _this = this;
              op = macroData.op;
              node = macroData.node;
              return this.mutateLast(
                node || this.noop(),
                function (n) {
                  return _this.isIdentOrTmp(n) && !_this.hasVariable(n) && __node(23, 1, 141, {
                    left: __node(23, 5, 141, {
                      left: __node(23, 4, 141, { op: "typeof", node: __wrap(n) }),
                      inverted: false,
                      op: "==",
                      right: __node(12, "object")
                    }),
                    inverted: false,
                    op: "and",
                    right: __node(
                      9,
                      __node(21, "__isArray"),
                      [__wrap(n)]
                    )
                  }) || __node(
                    9,
                    __node(21, "__isArray"),
                    [__wrap(n)]
                  );
                },
                true
              );
            },
            operators: "isArray!",
            options: { type: "boolean" },
            id: 27
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var _this, node, op;
              _this = this;
              op = macroData.op;
              node = macroData.node;
              return this.mutateLast(
                node || this.noop(),
                function (n) {
                  return __node(23, 1, 144, {
                    left: __node(23, 5, 144, {
                      left: __node(23, 4, 144, { op: "typeof", node: __wrap(n) }),
                      inverted: false,
                      op: "==",
                      right: __node(12, "object")
                    }),
                    inverted: false,
                    op: "and",
                    right: __node(23, 6, 144, { left: __wrap(n), inverted: false, op: "!=", right: __const("null") })
                  });
                },
                true
              );
            },
            operators: "isObject!",
            options: { type: "boolean" },
            id: 28
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var _this, negate, node, op, value;
              _this = this;
              op = macroData.op;
              node = macroData.node;
              if (this.isConst(node)) {
                value = Number(this.value(node));
                if (op === "~-") {
                  negate = function (x) {
                    return -x;
                  };
                  value = negate(value);
                }
                return this["const"](value);
              } else {
                return this.mutateLast(
                  node || this.noop(),
                  function (n) {
                    return _this.unary(
                      op === "~+" ? "+" : "-",
                      n
                    );
                  },
                  true
                );
              }
            },
            operators: ["~+", "~-"],
            options: { type: "number" },
            id: 48
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var _this, node, op;
              _this = this;
              op = macroData.op;
              node = macroData.node;
              if (this.isIdentOrTmp(node) && !this.hasVariable(node)) {
                return __node(23, 16, 492, {
                  macroName: "if",
                  macroData: {
                    test: __node(23, 5, 492, {
                      left: __node(23, 4, 492, { op: "typeof", node: __wrap(node) }),
                      inverted: false,
                      op: "==",
                      right: __node(12, "undefined")
                    }),
                    body: __node(12, "Undefined"),
                    elseIfs: [],
                    elseBody: __node(
                      9,
                      __node(21, "__typeof"),
                      [__wrap(node)]
                    )
                  }
                });
              } else {
                return this.mutateLast(
                  node || this.noop(),
                  function (n) {
                    return __node(
                      9,
                      __node(21, "__typeof"),
                      [__wrap(n)]
                    );
                  },
                  true
                );
              }
            },
            operators: "typeof!",
            options: { type: "string" },
            id: 57
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var _this, node, op;
              _this = this;
              op = macroData.op;
              node = macroData.node;
              return this.mutateLast(
                node || this.noop(),
                function (n) {
                  if (_this.isType(n, "number")) {
                    return n;
                  } else if (_this.getConstValue("DISABLE_TYPE_CHECKING", false)) {
                    return __node(23, 48, 551, { op: "~+", node: __wrap(n) });
                  } else {
                    return __node(
                      9,
                      __node(21, "__num"),
                      [__wrap(n)]
                    );
                  }
                },
                true
              );
            },
            operators: "+",
            options: { type: "number" },
            id: 60
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var node, op;
              op = macroData.op;
              node = macroData.node;
              if (this.isConst(node) && typeof this.value(node) === "number") {
                return this["const"](-this.value(node));
              } else if (this.getConstValue("DISABLE_TYPE_CHECKING", false)) {
                return __node(23, 48, 559, { op: "~-", node: __wrap(node) });
              } else {
                return __node(23, 48, 561, {
                  op: "~-",
                  node: __node(23, 60, 561, { op: "+", node: __wrap(node) })
                });
              }
            },
            operators: "-",
            options: { type: "number" },
            id: 61
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var node, op;
              op = macroData.op;
              node = macroData.node;
              return __node(23, 64, 584, {
                left: __wrap(node),
                inverted: false,
                op: "/",
                right: __node(12, 100)
              });
            },
            operators: "%",
            options: { postfix: true, type: "number" },
            id: 65
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var _this, node, op;
              _this = this;
              op = macroData.op;
              node = macroData.node;
              return this.mutateLast(
                node || this.noop(),
                function (n) {
                  return _this.unary("~", n);
                },
                true
              );
            },
            operators: "~bitnot",
            options: { type: "number" },
            id: 99
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var node, op;
              op = macroData.op;
              node = macroData.node;
              return __node(23, 99, 883, {
                op: "~bitnot",
                node: __node(23, 60, 883, { op: "+", node: __wrap(node) })
              });
            },
            operators: "bitnot",
            options: { type: "number" },
            id: 100
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var _this, node, op;
              _this = this;
              op = macroData.op;
              node = macroData.node;
              if (!this.isAccess(node)) {
                this.error("Can only use delete on an access");
              }
              if (this.position === "expression") {
                return this.maybeCacheAccess(node, function (setNode, node) {
                  var del, tmp;
                  tmp = _this.tmp("ref");
                  del = _this.unary("delete", node);
                  return __node(7, [
                    __node(
                      23,
                      38,
                      893,
                      {
                        macroName: "let",
                        macroData: {
                          declarable: __node(
                            23,
                            37,
                            893,
                            __node(
                              23,
                              31,
                              893,
                              { ident: __wrap(tmp) },
                              true
                            ),
                            true
                          ),
                          value: __wrap(setNode)
                        }
                      },
                      true
                    ),
                    __wrap(del),
                    __wrap(tmp)
                  ]);
                });
              } else {
                return this.unary("delete", node);
              }
            },
            operators: "delete",
            options: { standalone: false },
            id: 101
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var node, op;
              op = macroData.op;
              node = macroData.node;
              return this.maybeCache(node, function (setNode, node) {
                return __node(23, 16, 901, {
                  macroName: "if",
                  macroData: {
                    test: __node(23, 20, 901, { op: "?", node: __wrap(setNode) }),
                    body: __node(23, 11, 901, { op: "throw", node: __wrap(node) }),
                    elseIfs: []
                  }
                });
              });
            },
            operators: "throw?",
            options: { type: "undefined" },
            id: 102
          },
          {
            code: function() {
            var __isArray, __num, __owns, __slice, __strnum, __toArray, __typeof, __xor;
            __isArray = typeof Array.isArray === "function" ? Array.isArray
              : (function () {
                var _toString;
                _toString = Object.prototype.toString;
                return function (x) {
                  return _toString.call(x) === "[object Array]";
                };
              }());
            __num = function (num) {
              if (typeof num !== "number") {
                throw TypeError("Expected a number, got " + __typeof(num));
              } else {
                return num;
              }
            };
            __owns = Object.prototype.hasOwnProperty;
            __slice = Array.prototype.slice;
            __strnum = function (strnum) {
              var type;
              type = typeof strnum;
              if (type === "string") {
                return strnum;
              } else if (type === "number") {
                return String(strnum);
              } else {
                throw TypeError("Expected a string or number, got " + __typeof(strnum));
              }
            };
            __toArray = function (x) {
              if (x == null) {
                throw TypeError("Expected an object, got " + __typeof(x));
              } else if (__isArray(x)) {
                return x;
              } else if (typeof x === "string") {
                return x.split("");
              } else if (typeof x.length === "number") {
                return __slice.call(x);
              } else {
                throw TypeError("Expected an object with a length property, got " + __typeof(x));
              }
            };
            __typeof = (function () {
              var _toString;
              _toString = Object.prototype.toString;
              return function (o) {
                if (o === void 0) {
                  return "Undefined";
                } else if (o === null) {
                  return "Null";
                } else {
                  return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
                }
              };
            }());
            __xor = function (x, y) {
              if (x) {
                return !y && x;
              } else {
                return y || x;
              }
            };
            return function (macroData, __wrap, __node, __const) {
              var _arr, _arr2, _i, _len, _this, body, changed, disableTypeChecking,
                  foundSpread, genericArg, genericArgs, genericCache, genericParams, i,
                  ident, init, initIndex, instanceofLets, instanceofs, item, key, len,
                  makeFunctionFunc, makeFunctionIdent, name, node, op, p, param, params,
                  PRIMORDIAL_TYPES, result, spreadCounter;
              _this = this;
              op = macroData.op;
              node = macroData.node;
              disableTypeChecking = this.getConstValue("DISABLE_TYPE_CHECKING", false);
              function article(text) {
                if (/^[aeiou]/i.test(text)) {
                  return "an";
                } else {
                  return "a";
                }
              }
              function withArticle(text) {
                return article(text) + " " + __strnum(text);
              }
              PRIMORDIAL_TYPES = {
                Number: true,
                String: true,
                Boolean: true,
                Function: true,
                Array: true,
                Object: true
              };
              function translateGenericType(type) {
                var _ref, basetype, typeArguments;
                if (!_this.isTypeGeneric(type)) {
                  return type;
                } else {
                  basetype = _this.basetype(type);
                  if ((_ref = _this.name(basetype)) === "Array" || _ref === "Function" || _this.getConstValue("DISABLE_GENERICS", false)) {
                    return basetype;
                  } else {
                    typeArguments = _this.array((function () {
                      var _arr, _arr2, _i, _len, subtype;
                      for (_arr = [], _arr2 = __toArray(_this.typeArguments(type)), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                        subtype = _arr2[_i];
                        _arr.push(translateGenericType(subtype));
                      }
                      return _arr;
                    }()));
                    return __node(
                      9,
                      __node(1, __wrap(basetype), __node(12, "generic")),
                      [__node(31, __wrap(typeArguments))]
                    );
                  }
                }
              }
              function translateTypeCheck(value, valueName, type, hasDefaultValue) {
                var _arr, _arr2, _i, _len, _ref, check, checks, current, genericType,
                    hasBoolean, hasNull, hasVoid, index, key, name, names, pairValue,
                    result, subCheck, t, test, tests, typeNames;
                if (_this.isIdent(type)) {
                  if (disableTypeChecking) {
                    result = _this.noop();
                  } else if (__owns.call(PRIMORDIAL_TYPES, _this.name(type))) {
                    result = __node(
                      23,
                      17,
                      1713,
                      {
                        macroName: "if",
                        macroData: {
                          test: __node(
                            23,
                            74,
                            1713,
                            { left: __wrap(value), inverted: true, op: "instanceof", right: __wrap(type) },
                            true
                          ),
                          body: __node(
                            23,
                            11,
                            1714,
                            {
                              op: "throw",
                              node: __node(
                                9,
                                __node(21, "TypeError"),
                                [
                                  __node(23, 69, 1714, {
                                    left: __node(23, 69, 1714, {
                                      left: __node(23, 69, 1714, {
                                        left: __node(23, 69, 1714, {
                                          left: __node(23, 69, 1714, {
                                            left: __node(12, "Expected "),
                                            op: "",
                                            right: __wrap(valueName)
                                          }),
                                          op: "",
                                          right: __node(12, " to be ")
                                        }),
                                        op: "",
                                        right: __wrap(withArticle(_this.name(type)))
                                      }),
                                      op: "",
                                      right: __node(12, ", got ")
                                    }),
                                    op: "",
                                    right: __node(23, 57, 1714, { op: "typeof!", node: __wrap(value) })
                                  })
                                ]
                              )
                            },
                            true
                          ),
                          elseIfs: []
                        }
                      },
                      true
                    );
                  } else {
                    result = __node(
                      23,
                      17,
                      1717,
                      {
                        macroName: "if",
                        macroData: {
                          test: __node(
                            23,
                            74,
                            1717,
                            { left: __wrap(value), inverted: true, op: "instanceof", right: __wrap(type) },
                            true
                          ),
                          body: __node(
                            23,
                            11,
                            1718,
                            {
                              op: "throw",
                              node: __node(
                                9,
                                __node(21, "TypeError"),
                                [
                                  __node(23, 69, 1718, {
                                    left: __node(23, 69, 1718, {
                                      left: __node(23, 69, 1718, {
                                        left: __node(23, 69, 1718, {
                                          left: __node(23, 69, 1718, {
                                            left: __node(12, "Expected "),
                                            op: "",
                                            right: __wrap(valueName)
                                          }),
                                          op: "",
                                          right: __node(12, " to be a ")
                                        }),
                                        op: "",
                                        right: __node(
                                          9,
                                          __node(21, "__name"),
                                          [__wrap(type)]
                                        )
                                      }),
                                      op: "",
                                      right: __node(12, ", got ")
                                    }),
                                    op: "",
                                    right: __node(23, 57, 1718, { op: "typeof!", node: __wrap(value) })
                                  })
                                ]
                              )
                            },
                            true
                          ),
                          elseIfs: []
                        }
                      },
                      true
                    );
                  }
                  if (!hasDefaultValue && _this.name(type) === "Boolean") {
                    return __node(
                      23,
                      17,
                      1720,
                      {
                        macroName: "if",
                        macroData: {
                          test: __node(
                            23,
                            3,
                            1720,
                            {
                              op: "not",
                              node: __node(
                                23,
                                20,
                                1720,
                                { op: "?", node: __wrap(value) },
                                true,
                                false,
                                true
                              )
                            },
                            true,
                            false,
                            true
                          ),
                          body: __node(
                            23,
                            30,
                            1721,
                            { left: __wrap(value), op: ":=", right: __const("false") },
                            true,
                            false,
                            true
                          ),
                          elseIfs: [],
                          elseBody: __wrap(result)
                        }
                      },
                      true,
                      false,
                      true
                    );
                  } else {
                    return result;
                  }
                } else if (_this.isAccess(type)) {
                  if (disableTypeChecking) {
                    return _this.noop();
                  } else {
                    return __node(
                      23,
                      17,
                      1731,
                      {
                        macroName: "if",
                        macroData: {
                          test: __node(
                            23,
                            74,
                            1731,
                            { left: __wrap(value), inverted: true, op: "instanceof", right: __wrap(type) },
                            true
                          ),
                          body: __node(
                            23,
                            11,
                            1732,
                            {
                              op: "throw",
                              node: __node(
                                9,
                                __node(21, "TypeError"),
                                [
                                  __node(23, 69, 1732, {
                                    left: __node(23, 69, 1732, {
                                      left: __node(23, 69, 1732, {
                                        left: __node(23, 69, 1732, {
                                          left: __node(23, 69, 1732, {
                                            left: __node(12, "Expected "),
                                            op: "",
                                            right: __wrap(valueName)
                                          }),
                                          op: "",
                                          right: __node(12, " to be ")
                                        }),
                                        op: "",
                                        right: __wrap(withArticle(_this.value(_this.child(type))))
                                      }),
                                      op: "",
                                      right: __node(12, ", got ")
                                    }),
                                    op: "",
                                    right: __node(23, 57, 1732, { op: "typeof!", node: __wrap(value) })
                                  })
                                ]
                              )
                            },
                            true
                          ),
                          elseIfs: []
                        }
                      },
                      true
                    );
                  }
                } else if (_this.isTypeUnion(type)) {
                  hasBoolean = false;
                  hasVoid = false;
                  hasNull = false;
                  names = [];
                  tests = [];
                  for (_arr = __toArray(_this.types(type)), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                    t = _arr[_i];
                    if (_this.isConst(t)) {
                      if (_this.value(t) === null) {
                        hasNull = true;
                        names.push(_this["const"]("null"));
                      } else if (_this.value(t) === void 0) {
                        hasVoid = true;
                        names.push(_this["const"]("undefined"));
                      } else {
                        _this.error("Unknown const for type-checking: " + String(_this.value(t)), t);
                      }
                    } else if (_this.isIdent(t)) {
                      if (_this.name(t) === "Boolean") {
                        hasBoolean = true;
                      }
                      if (__owns.call(PRIMORDIAL_TYPES, _this.name(t))) {
                        names.push(_this["const"](_this.name(t)));
                      } else {
                        names.push(__node(
                          9,
                          __node(21, "__name"),
                          [__wrap(t)]
                        ));
                      }
                      tests.push(__node(23, 74, 1757, { left: __wrap(value), inverted: true, op: "instanceof", right: __wrap(t) }));
                    } else {
                      _this.error(
                        "Not implemented: typechecking for non-idents/consts within a type-union",
                        t
                      );
                    }
                  }
                  if (tests.length) {
                    test = _this.binaryChain("&&", tests);
                  } else {
                    test = __const("true");
                  }
                  current = names[0];
                  for (_i = 1, _len = names.length; _i < _len; ++_i) {
                    name = names[_i];
                    current = __node(23, 69, 1766, {
                      left: __node(23, 69, 1766, {
                        left: __wrap(current),
                        op: "",
                        right: __node(12, " or ")
                      }),
                      op: "",
                      right: __wrap(name)
                    });
                  }
                  typeNames = current;
                  if (disableTypeChecking) {
                    result = _this.noop();
                  } else {
                    result = __node(
                      23,
                      17,
                      1770,
                      {
                        macroName: "if",
                        macroData: {
                          test: __wrap(test),
                          body: __node(
                            23,
                            11,
                            1771,
                            {
                              op: "throw",
                              node: __node(
                                9,
                                __node(21, "TypeError"),
                                [
                                  __node(23, 69, 1771, {
                                    left: __node(23, 69, 1771, {
                                      left: __node(23, 69, 1771, {
                                        left: __node(23, 69, 1771, {
                                          left: __node(23, 69, 1771, {
                                            left: __node(12, "Expected "),
                                            op: "",
                                            right: __wrap(valueName)
                                          }),
                                          op: "",
                                          right: __node(12, " to be one of ")
                                        }),
                                        op: "",
                                        right: __wrap(typeNames)
                                      }),
                                      op: "",
                                      right: __node(12, ", got ")
                                    }),
                                    op: "",
                                    right: __node(23, 57, 1771, { op: "typeof!", node: __wrap(value) })
                                  })
                                ]
                              )
                            },
                            true
                          ),
                          elseIfs: []
                        }
                      },
                      true
                    );
                  }
                  if (!hasDefaultValue) {
                    if (hasNull || hasVoid) {
                      if (__xor(hasNull, hasVoid)) {
                        result = __node(
                          23,
                          17,
                          1776,
                          {
                            macroName: "if",
                            macroData: {
                              test: __node(
                                23,
                                3,
                                1776,
                                {
                                  op: "not",
                                  node: __node(
                                    23,
                                    20,
                                    1776,
                                    { op: "?", node: __wrap(value) },
                                    true,
                                    false,
                                    true
                                  )
                                },
                                true,
                                false,
                                true
                              ),
                              body: __node(
                                23,
                                30,
                                1777,
                                {
                                  left: __wrap(value),
                                  op: ":=",
                                  right: __node(
                                    23,
                                    16,
                                    1777,
                                    {
                                      macroName: "if",
                                      macroData: { test: __wrap(hasNull), body: __const("null"), elseIfs: [], elseBody: __const("void") }
                                    },
                                    false,
                                    false,
                                    true
                                  )
                                },
                                true,
                                false,
                                true
                              ),
                              elseIfs: [],
                              elseBody: __wrap(result)
                            }
                          },
                          true,
                          false,
                          true
                        );
                      } else {
                        result = __node(
                          23,
                          17,
                          1781,
                          {
                            macroName: "if",
                            macroData: {
                              test: __node(
                                23,
                                20,
                                1781,
                                { op: "?", node: __wrap(value) },
                                true
                              ),
                              body: __wrap(result),
                              elseIfs: []
                            }
                          },
                          true
                        );
                      }
                    } else if (hasBoolean) {
                      result = __node(
                        23,
                        17,
                        1784,
                        {
                          macroName: "if",
                          macroData: {
                            test: __node(
                              23,
                              3,
                              1784,
                              {
                                op: "not",
                                node: __node(
                                  23,
                                  20,
                                  1784,
                                  { op: "?", node: __wrap(value) },
                                  true,
                                  false,
                                  true
                                )
                              },
                              true,
                              false,
                              true
                            ),
                            body: __node(
                              23,
                              30,
                              1785,
                              { left: __wrap(value), op: ":=", right: __const("false") },
                              true,
                              false,
                              true
                            ),
                            elseIfs: [],
                            elseBody: __wrap(result)
                          }
                        },
                        true,
                        false,
                        true
                      );
                    }
                  }
                  return result;
                } else if (_this.isTypeGeneric(type)) {
                  if (disableTypeChecking) {
                    return _this.noop();
                  } else if (_this.name(_this.basetype(type)) === "Array") {
                    index = _this.tmp("i", false, "number");
                    subCheck = translateTypeCheck(
                      __node(1, __wrap(value), __wrap(index)),
                      __node(23, 69, 1794, {
                        left: __node(23, 69, 1794, {
                          left: __node(23, 69, 1794, {
                            left: __wrap(valueName),
                            inverted: false,
                            op: "&",
                            right: __node(12, "[")
                          }),
                          inverted: false,
                          op: "&",
                          right: __wrap(index)
                        }),
                        inverted: false,
                        op: "&",
                        right: __node(12, "]")
                      }),
                      _this.typeArguments(type)[0],
                      false
                    );
                    return __node(
                      23,
                      17,
                      1795,
                      {
                        macroName: "if",
                        macroData: {
                          test: __node(
                            23,
                            3,
                            1795,
                            {
                              op: "not",
                              node: __node(
                                23,
                                27,
                                1795,
                                { op: "isArray!", node: __wrap(value) },
                                true
                              )
                            },
                            true
                          ),
                          body: __node(
                            23,
                            11,
                            1796,
                            {
                              op: "throw",
                              node: __node(
                                9,
                                __node(21, "TypeError"),
                                [
                                  __node(23, 69, 1796, {
                                    left: __node(23, 69, 1796, {
                                      left: __node(23, 69, 1796, {
                                        left: __node(12, "Expected "),
                                        op: "",
                                        right: __wrap(valueName)
                                      }),
                                      op: "",
                                      right: __node(12, " to be an Array, got ")
                                    }),
                                    op: "",
                                    right: __node(23, 57, 1796, { op: "typeof!", node: __wrap(value) })
                                  })
                                ]
                              )
                            },
                            true
                          ),
                          elseIfs: [],
                          elseBody: __node(
                            23,
                            106,
                            1798,
                            {
                              macroName: "for",
                              macroData: {
                                init: __node(23, 38, 1798, {
                                  macroName: "let",
                                  macroData: {
                                    declarable: __node(23, 37, 1798, __node(23, 31, 1798, { isMutable: "mutable", ident: __wrap(index) })),
                                    value: __node(1, __wrap(value), __node(12, "length"))
                                  }
                                }),
                                test: __node(
                                  23,
                                  13,
                                  1798,
                                  { op: "postDec!", node: __wrap(index) },
                                  true
                                ),
                                body: __wrap(subCheck)
                              }
                            },
                            true
                          )
                        }
                      },
                      true
                    );
                  } else if (_this.name(_this.basetype(type)) === "Function") {
                    return translateTypeCheck(value, valueName, _this.basetype(type), hasDefaultValue);
                  } else {
                    genericType = translateGenericType(type);
                    return __node(
                      23,
                      17,
                      1805,
                      {
                        macroName: "if",
                        macroData: {
                          test: __node(
                            23,
                            74,
                            1805,
                            { left: __wrap(value), inverted: true, op: "instanceof", right: __wrap(genericType) },
                            true
                          ),
                          body: __node(
                            23,
                            11,
                            1806,
                            {
                              op: "throw",
                              node: __node(
                                9,
                                __node(21, "TypeError"),
                                [
                                  __node(23, 69, 1806, {
                                    left: __node(23, 69, 1806, {
                                      left: __node(23, 69, 1806, {
                                        left: __node(23, 69, 1806, {
                                          left: __node(23, 69, 1806, {
                                            left: __node(12, "Expected "),
                                            op: "",
                                            right: __wrap(valueName)
                                          }),
                                          op: "",
                                          right: __node(12, " to be a ")
                                        }),
                                        op: "",
                                        right: __node(
                                          9,
                                          __node(21, "__name"),
                                          [__wrap(genericType)]
                                        )
                                      }),
                                      op: "",
                                      right: __node(12, ", got ")
                                    }),
                                    op: "",
                                    right: __node(23, 57, 1806, { op: "typeof!", node: __wrap(value) })
                                  })
                                ]
                              )
                            },
                            true
                          ),
                          elseIfs: []
                        }
                      },
                      true
                    );
                  }
                } else if (_this.isTypeObject(type)) {
                  if (disableTypeChecking) {
                    return _this.noop();
                  } else {
                    for (_arr = [], _arr2 = __toArray(_this.pairs(type)), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                      _ref = _arr2[_i];
                      key = _ref.key;
                      pairValue = _ref.value;
                      _arr.push(translateTypeCheck(
                        __node(1, __wrap(value), __wrap(key)),
                        __node(23, 69, 1812, {
                          left: __node(23, 69, 1812, {
                            left: __wrap(valueName),
                            inverted: false,
                            op: "&",
                            right: __node(12, ".")
                          }),
                          inverted: false,
                          op: "&",
                          right: __wrap(key)
                        }),
                        pairValue,
                        false
                      ));
                    }
                    checks = _arr;
                    return __node(
                      23,
                      17,
                      1813,
                      {
                        macroName: "if",
                        macroData: {
                          test: __node(
                            23,
                            3,
                            1813,
                            {
                              op: "not",
                              node: __node(
                                23,
                                28,
                                1813,
                                { op: "isObject!", node: __wrap(value) },
                                true
                              )
                            },
                            true
                          ),
                          body: __node(
                            23,
                            11,
                            1814,
                            {
                              op: "throw",
                              node: __node(
                                9,
                                __node(21, "TypeError"),
                                [
                                  __node(23, 69, 1814, {
                                    left: __node(23, 69, 1814, {
                                      left: __node(23, 69, 1814, {
                                        left: __node(12, "Expected "),
                                        op: "",
                                        right: __wrap(valueName)
                                      }),
                                      op: "",
                                      right: __node(12, " to be an Object, got ")
                                    }),
                                    op: "",
                                    right: __node(23, 57, 1814, { op: "typeof!", node: __wrap(value) })
                                  })
                                ]
                              )
                            },
                            true
                          ),
                          elseIfs: [],
                          elseBody: __wrap(checks)
                        }
                      },
                      true
                    );
                  }
                } else {
                  return _this.error("Unknown type to translate: " + __typeof(type), type);
                }
              }
              init = [];
              changed = false;
              function translateParam(param, inDestructure) {
                var _arr, _i, _len, arrayIdent, asType, blankIdent, defaultValue, element,
                    elementIdent, elementParam, foundSpread, i, ident, initIndex, key,
                    len, objectIdent, pair, paramIdent, spreadCounter, typeCheck, value,
                    valueIdent;
                if (_this.isArray(param)) {
                  changed = true;
                  arrayIdent = _this.tmp("p", false, "array");
                  foundSpread = -1;
                  for (_arr = __toArray(_this.elements(param)), i = 0, len = _arr.length; i < len; ++i) {
                    element = _arr[i];
                    initIndex = init.length;
                    elementParam = translateParam(element, true);
                    if (elementParam != null) {
                      elementIdent = _this.paramIdent(elementParam);
                      if (!_this.paramIsSpread(elementParam)) {
                        if (foundSpread === -1) {
                          init.splice(initIndex, 0, __node(
                            23,
                            38,
                            1834,
                            {
                              macroName: "let",
                              macroData: {
                                declarable: __node(
                                  23,
                                  37,
                                  1834,
                                  __node(
                                    23,
                                    31,
                                    1834,
                                    { ident: __wrap(elementIdent) },
                                    true
                                  ),
                                  true
                                ),
                                value: __node(1, __wrap(arrayIdent), __wrap(i))
                              }
                            },
                            true
                          ));
                        } else {
                          init.splice(initIndex, 0, __node(
                            23,
                            38,
                            1836,
                            {
                              macroName: "let",
                              macroData: {
                                declarable: __node(
                                  23,
                                  37,
                                  1836,
                                  __node(
                                    23,
                                    31,
                                    1836,
                                    { ident: __wrap(elementIdent) },
                                    true
                                  ),
                                  true
                                ),
                                value: __node(1, __wrap(arrayIdent), __node(23, 66, 1836, {
                                  left: __wrap(spreadCounter),
                                  inverted: false,
                                  op: "+",
                                  right: __node(23, 66, 1836, {
                                    left: __node(23, 66, 1836, { left: __wrap(i), inverted: false, op: "-", right: __wrap(foundSpread) }),
                                    inverted: false,
                                    op: "-",
                                    right: __node(12, 1)
                                  })
                                }))
                              }
                            },
                            true
                          ));
                        }
                      } else {
                        if (foundSpread !== -1) {
                          _this.error(
                            "Cannot have multiple spread parameters in an array destructure",
                            element
                          );
                        }
                        foundSpread = i;
                        if (i === len - 1) {
                          init.splice(initIndex, 0, __node(
                            23,
                            38,
                            1842,
                            {
                              macroName: "let",
                              macroData: {
                                declarable: __node(
                                  23,
                                  37,
                                  1842,
                                  __node(
                                    23,
                                    31,
                                    1842,
                                    { ident: __wrap(elementIdent) },
                                    true
                                  ),
                                  true
                                ),
                                value: __node(
                                  9,
                                  __node(21, "__slice"),
                                  [
                                    __wrap(arrayIdent),
                                    __node(31, __node(23, 16, 1842, {
                                      macroName: "if",
                                      macroData: {
                                        test: __node(23, 5, 1842, {
                                          left: __wrap(i),
                                          inverted: false,
                                          op: "==",
                                          right: __node(12, 0)
                                        }),
                                        body: __node(4),
                                        elseIfs: [],
                                        elseBody: __node(4, [__wrap(i)])
                                      }
                                    }))
                                  ],
                                  false,
                                  true
                                )
                              }
                            },
                            true
                          ));
                        } else {
                          spreadCounter = _this.tmp("i", false, "number");
                          init.splice(initIndex, 0, __node(7, [
                            __node(
                              23,
                              38,
                              1846,
                              {
                                macroName: "let",
                                macroData: {
                                  declarable: __node(
                                    23,
                                    37,
                                    1846,
                                    __node(
                                      23,
                                      31,
                                      1846,
                                      { isMutable: "mutable", ident: __wrap(spreadCounter) },
                                      true
                                    ),
                                    true
                                  ),
                                  value: __node(23, 66, 1846, {
                                    left: __node(1, __wrap(arrayIdent), __node(12, "length")),
                                    inverted: false,
                                    op: "-",
                                    right: __node(23, 66, 1846, {
                                      left: __node(23, 66, 1846, { left: __wrap(len), inverted: false, op: "-", right: __wrap(i) }),
                                      inverted: false,
                                      op: "-",
                                      right: __node(12, 1)
                                    })
                                  })
                                }
                              },
                              true
                            ),
                            __node(
                              23,
                              38,
                              1847,
                              {
                                macroName: "let",
                                macroData: {
                                  declarable: __node(
                                    23,
                                    37,
                                    1847,
                                    __node(
                                      23,
                                      31,
                                      1847,
                                      { ident: __wrap(elementIdent) },
                                      true
                                    ),
                                    true
                                  ),
                                  value: __node(23, 17, 1847, {
                                    macroName: "if",
                                    macroData: {
                                      test: __node(23, 79, 1847, { left: __wrap(spreadCounter), inverted: false, op: ">", right: __wrap(i) }),
                                      body: __node(
                                        9,
                                        __node(21, "__slice"),
                                        [__wrap(arrayIdent), __wrap(i), __wrap(spreadCounter)],
                                        false,
                                        true
                                      ),
                                      elseIfs: [],
                                      elseBody: __node(7, [
                                        __node(
                                          23,
                                          30,
                                          1850,
                                          { left: __wrap(spreadCounter), op: ":=", right: __wrap(i) },
                                          true
                                        ),
                                        __node(4)
                                      ])
                                    }
                                  })
                                }
                              },
                              true
                            )
                          ]));
                        }
                      }
                    }
                  }
                  return _this.rewrap(
                    _this.param(
                      arrayIdent,
                      null,
                      false,
                      false,
                      null
                    ),
                    param
                  );
                } else if (_this.isObject(param)) {
                  changed = true;
                  objectIdent = _this.tmp("p", false, "object");
                  for (_arr = __toArray(_this.pairs(param)), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                    pair = _arr[_i];
                    initIndex = init.length;
                    value = translateParam(pair.value, true);
                    if (value != null) {
                      valueIdent = _this.paramIdent(value);
                      key = pair.key;
                      init.splice(initIndex, 0, __node(
                        23,
                        38,
                        1863,
                        {
                          macroName: "let",
                          macroData: {
                            declarable: __node(
                              23,
                              37,
                              1863,
                              __node(
                                23,
                                31,
                                1863,
                                { ident: __wrap(valueIdent) },
                                true
                              ),
                              true
                            ),
                            value: __node(1, __wrap(objectIdent), __wrap(key))
                          }
                        },
                        true
                      ));
                    }
                  }
                  return _this.rewrap(
                    _this.param(
                      objectIdent,
                      null,
                      false,
                      false,
                      null
                    ),
                    param
                  );
                } else if (_this.isParam(param)) {
                  defaultValue = _this.paramDefaultValue(param);
                  asType = _this.paramType(param);
                  paramIdent = _this.paramIdent(param);
                  if (defaultValue != null || asType != null || !_this.isIdentOrTmp(paramIdent)) {
                    changed = true;
                    if (_this.isIdentOrTmp(paramIdent)) {
                      ident = paramIdent;
                    } else if (_this.isAccess(paramIdent)) {
                      ident = _this.ident(_this.value(_this.child(paramIdent)));
                    } else {
                      ident = _this.error("Not an ident or this-access: " + __typeof(paramIdent) + " " + __strnum(paramIdent.inspect()), paramIdent);
                    }
                    if (asType != null) {
                      typeCheck = translateTypeCheck(ident, _this.name(ident), asType, defaultValue != null);
                    } else {
                      typeCheck = _this.noop();
                    }
                    init.push(defaultValue != null
                      ? __node(
                        23,
                        17,
                        1884,
                        {
                          macroName: "if",
                          macroData: {
                            test: __node(
                              23,
                              3,
                              1884,
                              {
                                op: "not",
                                node: __node(
                                  23,
                                  20,
                                  1884,
                                  { op: "?", node: __wrap(ident) },
                                  true,
                                  false,
                                  true
                                )
                              },
                              true,
                              false,
                              true
                            ),
                            body: __node(
                              23,
                              30,
                              1885,
                              { left: __wrap(ident), op: ":=", right: __wrap(defaultValue) },
                              true,
                              false,
                              true
                            ),
                            elseIfs: [],
                            elseBody: __wrap(typeCheck)
                          }
                        },
                        true,
                        false,
                        true
                      )
                      : typeCheck);
                    if (paramIdent !== ident) {
                      init.push(__node(
                        23,
                        30,
                        1891,
                        { left: __wrap(paramIdent), op: ":=", right: __wrap(ident) },
                        true
                      ));
                    }
                    return _this.rewrap(
                      _this.param(
                        ident,
                        null,
                        _this.paramIsSpread(param),
                        _this.paramIsMutable(param),
                        null
                      ),
                      param
                    );
                  } else {
                    return param;
                  }
                } else if (_this.isNothing(param)) {
                  changed = true;
                  if (inDestructure) {
                    return null;
                  } else {
                    blankIdent = _this.tmp("p", false, "object");
                    return _this.rewrap(
                      _this.param(
                        blankIdent,
                        null,
                        false,
                        false,
                        null
                      ),
                      param
                    );
                  }
                } else {
                  return _this.error("Unknown param type: " + __typeof(param), param);
                }
              }
              foundSpread = -1;
              params = [];
              for (_arr = __toArray(this.funcParams(node)), i = 0, len = _arr.length; i < len; ++i) {
                param = _arr[i];
                initIndex = init.length;
                p = translateParam(param, false);
                ident = this.paramIdent(p);
                if (this.paramIsSpread(p)) {
                  if (foundSpread !== -1) {
                    this.error("Cannot have two spread parameters", p);
                  }
                  changed = true;
                  foundSpread = i;
                  if (i === len - 1) {
                    init.splice(initIndex, 0, __node(
                      23,
                      38,
                      1919,
                      {
                        macroName: "let",
                        macroData: {
                          declarable: __node(
                            23,
                            37,
                            1919,
                            __node(
                              23,
                              31,
                              1919,
                              { ident: __wrap(ident) },
                              true
                            ),
                            true
                          ),
                          value: __node(
                            9,
                            __node(21, "__slice"),
                            [
                              __node(3),
                              __node(31, __node(23, 16, 1919, {
                                macroName: "if",
                                macroData: {
                                  test: __node(23, 5, 1919, {
                                    left: __wrap(i),
                                    inverted: false,
                                    op: "==",
                                    right: __node(12, 0)
                                  }),
                                  body: __node(4),
                                  elseIfs: [],
                                  elseBody: __node(4, [__wrap(i)])
                                }
                              }))
                            ],
                            false,
                            true
                          )
                        }
                      },
                      true
                    ));
                  } else {
                    spreadCounter = this.tmp("i", false, "number");
                    init.splice(initIndex, 0, __node(7, [
                      __node(
                        23,
                        38,
                        1923,
                        {
                          macroName: "let",
                          macroData: {
                            declarable: __node(
                              23,
                              37,
                              1923,
                              __node(
                                23,
                                31,
                                1923,
                                { isMutable: "mutable", ident: __wrap(spreadCounter) },
                                true
                              ),
                              true
                            ),
                            value: __node(23, 66, 1923, {
                              left: __node(1, __node(3), __node(12, "length")),
                              inverted: false,
                              op: "-",
                              right: __node(23, 66, 1923, {
                                left: __node(23, 66, 1923, { left: __wrap(len), inverted: false, op: "-", right: __wrap(i) }),
                                inverted: false,
                                op: "-",
                                right: __node(12, 1)
                              })
                            })
                          }
                        },
                        true
                      ),
                      __node(
                        23,
                        38,
                        1924,
                        {
                          macroName: "let",
                          macroData: {
                            declarable: __node(
                              23,
                              37,
                              1924,
                              __node(
                                23,
                                31,
                                1924,
                                { ident: __wrap(ident) },
                                true
                              ),
                              true
                            ),
                            value: __node(23, 17, 1924, {
                              macroName: "if",
                              macroData: {
                                test: __node(23, 79, 1924, { left: __wrap(spreadCounter), inverted: false, op: ">", right: __wrap(i) }),
                                body: __node(
                                  9,
                                  __node(21, "__slice"),
                                  [__node(3), __wrap(i), __wrap(spreadCounter)],
                                  false,
                                  true
                                ),
                                elseIfs: [],
                                elseBody: __node(7, [
                                  __node(
                                    23,
                                    30,
                                    1927,
                                    { left: __wrap(spreadCounter), op: ":=", right: __wrap(i) },
                                    true
                                  ),
                                  __node(4)
                                ])
                              }
                            })
                          }
                        },
                        true
                      )
                    ]));
                  }
                } else if (foundSpread === -1) {
                  params.push(p);
                } else {
                  init.splice(initIndex, 0, __node(
                    23,
                    38,
                    1934,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __node(
                          23,
                          37,
                          1934,
                          __node(
                            23,
                            31,
                            1934,
                            { ident: __wrap(ident) },
                            true
                          ),
                          true
                        ),
                        value: __node(1, __node(3), __node(23, 66, 1934, {
                          left: __wrap(spreadCounter),
                          inverted: false,
                          op: "+",
                          right: __node(23, 66, 1934, {
                            left: __node(23, 66, 1934, { left: __wrap(i), inverted: false, op: "-", right: __wrap(foundSpread) }),
                            inverted: false,
                            op: "-",
                            right: __node(12, 1)
                          })
                        }))
                      }
                    },
                    true
                  ));
                }
              }
              if (init.length || changed || this.funcIsCurried(node)) {
                body = this.funcBody(node);
                result = this.rewrap(
                  this.func(
                    params,
                    __node(7, [__wrap(init), __wrap(body)]),
                    this.funcIsAutoReturn(node) && !this.isNothing(body),
                    this.funcIsBound(node),
                    false,
                    this.funcAsType(node),
                    this.funcIsGenerator(node),
                    this.funcGeneric(node)
                  ),
                  node
                );
              } else {
                result = node;
              }
              if (this.funcIsCurried(node)) {
                result = __node(
                  9,
                  __node(21, "__curry"),
                  [__wrap(params.length), __wrap(result)]
                );
              }
              genericArgs = this.funcGeneric(node);
              if (__num(genericArgs.length) > 0 && !this.getConstValue("DISABLE_GENERICS", false)) {
                genericCache = this.tmp("cache", false, "object");
                for (_arr = [], _arr2 = __toArray(genericArgs), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                  genericArg = _arr2[_i];
                  _arr.push(this.param(genericArg));
                }
                genericParams = _arr;
                makeFunctionIdent = this.tmp("make", false, "function");
                instanceofs = {};
                for (_arr = __toArray(genericArgs), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                  genericArg = _arr[_i];
                  name = this.name(genericArg);
                  key = this.tmp("instanceof_" + __strnum(name), false, "function");
                  instanceofs[name] = {
                    key: key,
                    "let": __node(
                      23,
                      38,
                      1965,
                      {
                        macroName: "let",
                        macroData: {
                          declarable: __node(
                            23,
                            37,
                            1965,
                            __node(
                              23,
                              31,
                              1965,
                              { ident: __wrap(key) },
                              true
                            ),
                            true
                          ),
                          value: __node(
                            9,
                            __node(21, "__getInstanceof"),
                            [__wrap(genericArg)]
                          )
                        }
                      },
                      true
                    ),
                    used: false
                  };
                }
                result = this.walk(this.macroExpandAll(result), function (node) {
                  var func, left, name, right;
                  if (_this.isBinary(node) && _this.op(node) === "instanceof") {
                    right = _this.right(node);
                    if (_this.isIdent(right)) {
                      name = _this.name(right);
                      if (__owns.call(instanceofs, name)) {
                        func = instanceofs[name].key;
                        instanceofs[name].used = true;
                        left = _this.left(node);
                        return __node(9, __wrap(func), [__wrap(left)]);
                      }
                    }
                  }
                });
                _arr = [];
                for (name in instanceofs) {
                  if (__owns.call(instanceofs, name)) {
                    item = instanceofs[name];
                    if (item.used) {
                      _arr.push(item["let"]);
                    }
                  }
                }
                instanceofLets = _arr;
                if (instanceofLets.length) {
                  result = __node(7, [__wrap(instanceofLets), __wrap(result)]);
                }
                makeFunctionFunc = this.func(genericParams, result, true, false);
                result = __node(
                  9,
                  __node(21, "__genericFunc"),
                  [__wrap(genericArgs.length), __wrap(makeFunctionFunc)]
                );
              }
              return result;
            
            }
          }.call(this),
            operators: "mutateFunction!",
            options: { type: "node", label: "mutateFunction" },
            id: 117
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var node, op;
              op = macroData.op;
              node = macroData.node;
              return __node(
                9,
                __node(21, "__keys"),
                [__wrap(node)]
              );
            },
            operators: "keys!",
            options: void 0,
            id: 124
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var node, op;
              op = macroData.op;
              node = macroData.node;
              return __node(
                9,
                __node(21, "__allkeys"),
                [__wrap(node)]
              );
            },
            operators: "allkeys!",
            options: void 0,
            id: 125
          },
          {
            code: function() {
            var __isArray, __slice, __toArray, __typeof;
            __isArray = typeof Array.isArray === "function" ? Array.isArray
              : (function () {
                var _toString;
                _toString = Object.prototype.toString;
                return function (x) {
                  return _toString.call(x) === "[object Array]";
                };
              }());
            __slice = Array.prototype.slice;
            __toArray = function (x) {
              if (x == null) {
                throw TypeError("Expected an object, got " + __typeof(x));
              } else if (__isArray(x)) {
                return x;
              } else if (typeof x === "string") {
                return x.split("");
              } else if (typeof x.length === "number") {
                return __slice.call(x);
              } else {
                throw TypeError("Expected an object with a length property, got " + __typeof(x));
              }
            };
            __typeof = (function () {
              var _toString;
              _toString = Object.prototype.toString;
              return function (o) {
                if (o === void 0) {
                  return "Undefined";
                } else if (o === null) {
                  return "Null";
                } else {
                  return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
                }
              };
            }());
            return function (macroData, __wrap, __node, __const) {
              var _arr, _i, _len, element, item, node, op, parts, set;
              op = macroData.op;
              node = macroData.node;
              set = this.tmp("s", false, "object");
              if (this.isArray(node) && !this.arrayHasSpread(node)) {
                if (this.elements(node).length === 0) {
                  return __node(9, __node(21, "Set"));
                } else {
                  parts = [];
                  for (_arr = __toArray(this.elements(node)), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                    element = _arr[_i];
                    parts.push(__node(
                      9,
                      __node(1, __wrap(set), __node(12, "add")),
                      [__wrap(element)]
                    ));
                  }
                  return __node(7, [
                    __node(
                      23,
                      38,
                      3518,
                      {
                        macroName: "let",
                        macroData: {
                          declarable: __node(
                            23,
                            37,
                            3518,
                            __node(
                              23,
                              31,
                              3518,
                              { ident: __wrap(set) },
                              true
                            ),
                            true
                          ),
                          value: __node(9, __node(21, "Set"))
                        }
                      },
                      true
                    ),
                    __wrap(parts),
                    __wrap(set)
                  ]);
                }
              } else {
                item = this.tmp("x", false, "any");
                return __node(7, [
                  __node(
                    23,
                    38,
                    3524,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __node(
                          23,
                          37,
                          3524,
                          __node(
                            23,
                            31,
                            3524,
                            { ident: __wrap(set) },
                            true
                          ),
                          true
                        ),
                        value: __node(9, __node(21, "Set"))
                      }
                    },
                    true
                  ),
                  __node(
                    23,
                    113,
                    3525,
                    {
                      macroName: "for",
                      macroData: {
                        value: __node(
                          23,
                          37,
                          3525,
                          __node(
                            23,
                            31,
                            3525,
                            { ident: __wrap(item) },
                            true
                          ),
                          true
                        ),
                        array: __wrap(node),
                        body: __node(
                          9,
                          __node(1, __wrap(set), __node(12, "add")),
                          [__wrap(item)]
                        )
                      }
                    },
                    true
                  ),
                  __wrap(set)
                ]);
              }
            
            }
          }.call(this),
            operators: "set!",
            options: { type: "object", label: "constructSet" },
            id: 152
          },
          {
            code: function() {
            var __isArray, __slice, __toArray, __typeof;
            __isArray = typeof Array.isArray === "function" ? Array.isArray
              : (function () {
                var _toString;
                _toString = Object.prototype.toString;
                return function (x) {
                  return _toString.call(x) === "[object Array]";
                };
              }());
            __slice = Array.prototype.slice;
            __toArray = function (x) {
              if (x == null) {
                throw TypeError("Expected an object, got " + __typeof(x));
              } else if (__isArray(x)) {
                return x;
              } else if (typeof x === "string") {
                return x.split("");
              } else if (typeof x.length === "number") {
                return __slice.call(x);
              } else {
                throw TypeError("Expected an object with a length property, got " + __typeof(x));
              }
            };
            __typeof = (function () {
              var _toString;
              _toString = Object.prototype.toString;
              return function (o) {
                if (o === void 0) {
                  return "Undefined";
                } else if (o === null) {
                  return "Null";
                } else {
                  return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
                }
              };
            }());
            return function (macroData, __wrap, __node, __const) {
              var _arr, _i, _len, _ref, key, map, node, op, pairs, parts, property, value;
              op = macroData.op;
              node = macroData.node;
              if (!this.isObject(node)) {
                this.error("map! can only be used on literal objects", node);
              }
              pairs = this.pairs(node);
              if (pairs.length === 0) {
                return __node(9, __node(21, "Map"));
              } else {
                map = this.tmp("m", false, "object");
                parts = [];
                for (_arr = __toArray(pairs), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                  _ref = _arr[_i];
                  key = _ref.key;
                  value = _ref.value;
                  property = _ref.property;
                  if (property != null) {
                    this.error(
                      "Cannot use map! on an object with custom properties",
                      key
                    );
                  }
                  parts.push(__node(
                    9,
                    __node(1, __wrap(map), __node(12, "set")),
                    [__wrap(key), __wrap(value)]
                  ));
                }
                return __node(7, [
                  __node(
                    23,
                    38,
                    3544,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __node(
                          23,
                          37,
                          3544,
                          __node(
                            23,
                            31,
                            3544,
                            { ident: __wrap(map) },
                            true
                          ),
                          true
                        ),
                        value: __node(9, __node(21, "Map"))
                      }
                    },
                    true
                  ),
                  __wrap(parts),
                  __wrap(map)
                ]);
              }
            
            }
          }.call(this),
            operators: "map!",
            options: { type: "object", label: "constructMap" },
            id: 153
          },
          {
            code: function() {
            var __isArray, __slice, __toArray, __typeof;
            __isArray = typeof Array.isArray === "function" ? Array.isArray
              : (function () {
                var _toString;
                _toString = Object.prototype.toString;
                return function (x) {
                  return _toString.call(x) === "[object Array]";
                };
              }());
            __slice = Array.prototype.slice;
            __toArray = function (x) {
              if (x == null) {
                throw TypeError("Expected an object, got " + __typeof(x));
              } else if (__isArray(x)) {
                return x;
              } else if (typeof x === "string") {
                return x.split("");
              } else if (typeof x.length === "number") {
                return __slice.call(x);
              } else {
                throw TypeError("Expected an object with a length property, got " + __typeof(x));
              }
            };
            __typeof = (function () {
              var _toString;
              _toString = Object.prototype.toString;
              return function (o) {
                if (o === void 0) {
                  return "Undefined";
                } else if (o === null) {
                  return "Null";
                } else {
                  return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
                }
              };
            }());
            return function (macroData, __wrap, __node, __const) {
              var node, op, top;
              op = macroData.op;
              node = macroData.node;
              if (!node.cascades || !node.cascades.length) {
                this.error("cascade! can only be used on a CascadeNode, got " + __typeof(node), node);
              }
              top = node.node;
              return this.maybeCache(top, function (setTop, top) {
                var _arr, _arr2, _len, cascade, i, parts;
                for (_arr = [], _arr2 = __toArray(node.cascades), i = 0, _len = _arr2.length; i < _len; ++i) {
                  cascade = _arr2[i];
                  _arr.push(cascade(top));
                }
                parts = _arr;
                return __node(7, [__wrap(setTop), __wrap(parts), __wrap(top)]);
              });
            
            }
          }.call(this),
            operators: "cascade!",
            options: { label: "cascade" },
            id: 171
          }
        ],
        defineSyntax: [
          {
            code: function (macroData, __wrap, __node, __const) {
              var asType, ident, isMutable;
              isMutable = macroData.isMutable;
              ident = macroData.ident;
              asType = macroData.asType;
              if (this.isIdentOrTmp(ident)) {
                return { type: "ident", isMutable: isMutable === "mutable", ident: ident, asType: asType };
              } else {
                return ident;
              }
            },
            options: { name: "DeclarableIdent" },
            params: [
              [
                "ident",
                "isMutable",
                "many",
                "?",
                "const",
                "mutable"
              ],
              ["ident", "ident", "ident", "Identifier"],
              [
                "ident",
                "asType",
                "many",
                "?",
                "sequence",
                ["const", "as"],
                ["this", "ident", "Type"]
              ]
            ],
            id: 31
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var head, tail;
              head = macroData.head;
              tail = macroData.tail;
              return { type: "array", elements: [head].concat(tail) };
            },
            options: { name: "DeclarableArray" },
            params: [
              ["const", "["],
              [
                "ident",
                "head",
                "choice",
                ["ident", "Declarable"],
                ["const", ""]
              ],
              [
                "ident",
                "tail",
                "many",
                "*",
                "sequence",
                ["const", ","],
                [
                  "this",
                  "choice",
                  ["ident", "Declarable"],
                  ["const", ""]
                ]
              ],
              ["const", "]"]
            ],
            id: 32
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var value;
              value = macroData.value;
              value = this.macroExpand1(value);
              return { key: this.name(value.ident), value: value };
            },
            options: { name: "DeclarableObjectSingularPair" },
            params: [["ident", "value", "ident", "DeclarableIdent"]],
            id: 33
          },
          {
            code: void 0,
            options: { name: "DeclarableObjectDualPair" },
            params: [
              [
                "this",
                "sequence",
                ["ident", "key", "ident", "ObjectKey"],
                ["const", ":"],
                ["ident", "value", "ident", "Declarable"]
              ]
            ],
            id: 34
          },
          {
            code: void 0,
            options: { name: "DeclarableObjectPair" },
            params: [
              [
                "this",
                "choice",
                ["ident", "DeclarableObjectDualPair"],
                ["ident", "DeclarableObjectSingularPair"]
              ]
            ],
            id: 35
          },
          {
            code: function (macroData, __wrap, __node, __const) {
              var head, tail;
              head = macroData.head;
              tail = macroData.tail;
              return { type: "object", pairs: [head].concat(tail) };
            },
            options: { name: "DeclarableObject" },
            params: [
              ["const", "{"],
              ["ident", "head", "ident", "DeclarableObjectPair"],
              [
                "ident",
                "tail",
                "many",
                "*",
                "sequence",
                ["const", ","],
                ["this", "ident", "DeclarableObjectPair"]
              ],
              ["const", "}"]
            ],
            id: 36
          },
          {
            code: void 0,
            options: { name: "Declarable" },
            params: [
              [
                "this",
                "choice",
                ["ident", "DeclarableArray"],
                ["ident", "DeclarableObject"],
                ["ident", "DeclarableIdent"]
              ]
            ],
            id: 37
          }
        ],
        syntax: [
          {
            code: function (macroFullData, __wrap, __node, __const) {
              var body, macroData, macroName;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              body = macroData.body;
              return __node(9, __node(
                20,
                [],
                __wrap(body),
                true,
                true
              ));
            },
            options: void 0,
            params: [
              [
                "ident",
                "body",
                "choice",
                ["ident", "Body"],
                [
                  "sequence",
                  ["const", ";"],
                  ["this", "ident", "Statement"]
                ]
              ]
            ],
            names: "do",
            id: 0
          },
          {
            code: function (macroFullData, __wrap, __node, __const) {
              var macroData, macroName;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              return this["debugger"]();
            },
            options: void 0,
            params: [["const", ""]],
            names: "debugger",
            id: 14
          },
          {
            code: function (macroFullData, __wrap, __node, __const) {
              var func, ident, macroData, macroName;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              ident = macroData.ident;
              func = macroData.func;
              if (this.isPrimordial(ident)) {
                this.error(
                  ["Cannot declare primordial '", this.name(ident), "'"].join(""),
                  ident
                );
              }
              this["let"](ident, false, this.type(func));
              return this.block([
                this["var"](ident, false),
                this.assign(ident, "=", func)
              ]);
            },
            options: void 0,
            params: [
              ["ident", "ident", "ident", "Identifier"],
              ["ident", "func", "ident", "FunctionDeclaration"]
            ],
            names: "let",
            id: 15
          },
          {
            code: function (macroFullData, __wrap, __node, __const) {
              var _this, body, elseBody, elseIfs, macroData, macroName, test;
              _this = this;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              test = macroData.test;
              body = macroData.body;
              elseIfs = macroData.elseIfs;
              elseBody = macroData.elseBody;
              function dec(x) {
                return x - 1;
              }
              function f(i, current) {
                return i >= 0 && f(dec(i), _this["if"](elseIfs[i].test, elseIfs[i].body, current)) || current;
              }
              return this["if"](
                macroName === "unless" && __node(23, 3, 90, { op: "not", node: __wrap(test) }) || test,
                body,
                f(dec(elseIfs.length), elseBody)
              );
            },
            options: void 0,
            params: [
              ["ident", "test", "ident", "Logic"],
              ["const", "then"],
              ["ident", "body"],
              [
                "ident",
                "elseIfs",
                "many",
                "*",
                "sequence",
                ["const", "else"],
                ["const", "if"],
                ["ident", "test", "ident", "Logic"],
                ["const", "then"],
                ["ident", "body"]
              ],
              [
                "ident",
                "elseBody",
                "many",
                "?",
                "sequence",
                ["const", "else"],
                ["this"]
              ]
            ],
            names: ["if", "unless"],
            id: 16
          },
          {
            code: function (macroFullData, __wrap, __node, __const) {
              var _this, body, elseBody, elseIfs, macroData, macroName, test;
              _this = this;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              test = macroData.test;
              body = macroData.body;
              elseIfs = macroData.elseIfs;
              elseBody = macroData.elseBody;
              function dec(x) {
                return x - 1;
              }
              function f(i, current) {
                if (i >= 0) {
                  return f(dec(i), _this["if"](
                    elseIfs[i].type === "unless"
                      ? __node(23, 3, 95, { op: "not", node: __wrap(elseIfs[i].test) })
                      : elseIfs[i].test,
                    elseIfs[i].body,
                    current
                  ));
                } else {
                  return current;
                }
              }
              return this["if"](
                macroName === "unless"
                  ? __node(23, 3, 96, { op: "not", node: __wrap(test) })
                  : test,
                body,
                f(dec(elseIfs.length), elseBody)
              );
            },
            options: void 0,
            params: [
              ["ident", "test", "ident", "Logic"],
              [
                "ident",
                "body",
                "choice",
                ["ident", "BodyNoEnd"],
                [
                  "sequence",
                  ["const", ";"],
                  ["this", "ident", "Statement"]
                ]
              ],
              [
                "ident",
                "elseIfs",
                "many",
                "*",
                "sequence",
                [
                  "const",
                  "\n"
                ],
                ["const", "else"],
                [
                  "ident",
                  "type",
                  "choice",
                  ["const", "if"],
                  ["const", "unless"]
                ],
                ["ident", "test", "ident", "Logic"],
                [
                  "ident",
                  "body",
                  "choice",
                  ["ident", "BodyNoEnd"],
                  [
                    "sequence",
                    ["const", ";"],
                    ["this", "ident", "Statement"]
                  ]
                ]
              ],
              [
                "ident",
                "elseBody",
                "many",
                "?",
                "sequence",
                [
                  "const",
                  "\n"
                ],
                ["const", "else"],
                [
                  "this",
                  "choice",
                  ["ident", "BodyNoEnd"],
                  [
                    "sequence",
                    ["const", ";"],
                    ["this", "ident", "Statement"]
                  ]
                ]
              ],
              ["const", "end"]
            ],
            names: ["if", "unless"],
            id: 17
          },
          {
            code: function (macroFullData, __wrap, __node, __const) {
              var label, macroData, macroName;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              label = macroData.label;
              if (this.position === "expression") {
                this.error("continue can only be used in a statement position");
              }
              return this["continue"](label);
            },
            options: void 0,
            params: [
              [
                "ident",
                "label",
                "choice",
                ["ident", "Identifier"],
                ["const", ""]
              ]
            ],
            names: "continue",
            id: 18
          },
          {
            code: function (macroFullData, __wrap, __node, __const) {
              var label, macroData, macroName;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              label = macroData.label;
              if (this.position === "expression") {
                this.error("break can only be used in a statement position");
              }
              return this["break"](label);
            },
            options: void 0,
            params: [
              [
                "ident",
                "label",
                "choice",
                ["ident", "Identifier"],
                ["const", ""]
              ]
            ],
            names: "break",
            id: 19
          },
          {
            code: function (macroFullData, __wrap, __node, __const) {
              var _ref, _this, declarable, handle, handleItem, macroData, macroName,
                  numRealElements, value;
              _this = this;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              declarable = macroData.declarable;
              value = macroData.value;
              function inc(x) {
                return x + 1;
              }
              declarable = this.macroExpand1(declarable);
              if (!declarable) {
                this.error("Unknown declarable: " + String(declarable));
              }
              if (declarable.type === "ident") {
                if (this.isPrimordial(declarable.ident)) {
                  this.error("Cannot declare primordial '" + this.name(declarable.ident) + "'", declarable.ident);
                }
                this["let"](declarable.ident, declarable.isMutable, declarable.asType ? this.toType(declarable.asType) : this.type(value));
                return this.block([
                  this["var"](declarable.ident, declarable.isMutable),
                  this.mutateLast(
                    value || this.noop(),
                    function (n) {
                      return _this.assign(declarable.ident, "=", n);
                    },
                    true
                  )
                ]);
              } else if (declarable.type === "array") {
                numRealElements = function (i, acc) {
                  if (i < declarable.elements.length) {
                    return numRealElements(inc(i), declarable.elements[i] ? inc(acc) : acc);
                  } else {
                    return acc;
                  }
                };
                if (numRealElements(0, 0) <= 1) {
                  handleItem = function (element, index) {
                    return _this.macroExpand1(__node(
                      23,
                      38,
                      219,
                      {
                        macroName: "let",
                        macroData: {
                          declarable: __node(
                            23,
                            37,
                            219,
                            __node(
                              23,
                              31,
                              219,
                              { ident: __wrap(element) },
                              true
                            ),
                            true
                          ),
                          value: __node(1, __wrap(value), __wrap(index))
                        }
                      },
                      true
                    ));
                  };
                  handle = function (i) {
                    if (i < declarable.elements.length) {
                      if (declarable.elements[i]) {
                        return handleItem(declarable.elements[i], _this["const"](i));
                      } else {
                        return handle(inc(i));
                      }
                    } else {
                      return value;
                    }
                  };
                  return handle(0);
                } else {
                  return this.maybeCache(value, function (setValue, value) {
                    function handleItem(i, element, index, block) {
                      block.push(_this.macroExpand1(__node(
                        23,
                        38,
                        232,
                        {
                          macroName: "let",
                          macroData: {
                            declarable: __node(
                              23,
                              37,
                              232,
                              __node(
                                23,
                                31,
                                232,
                                { ident: __wrap(element) },
                                true
                              ),
                              true
                            ),
                            value: __node(1, __wrap(value), __wrap(index))
                          }
                        },
                        true
                      )));
                      return handle(inc(i), block);
                    }
                    function handle(i, block) {
                      if (i < declarable.elements.length) {
                        if (declarable.elements[i]) {
                          return handleItem(i, declarable.elements[i], _this["const"](i), block);
                        } else {
                          return handle(inc(i), block);
                        }
                      } else {
                        block.push(value);
                        return _this.block(block);
                      }
                    }
                    return handle(0, [setValue]);
                  });
                }
              } else if (declarable.type === "object") {
                if (declarable.pairs.length === 1) {
                  handleItem = function (left, key) {
                    return _this.macroExpand1(__node(
                      23,
                      38,
                      247,
                      {
                        macroName: "let",
                        macroData: {
                          declarable: __node(
                            23,
                            37,
                            247,
                            __node(
                              23,
                              31,
                              247,
                              { ident: __wrap(left) },
                              true
                            ),
                            true
                          ),
                          value: __node(1, __wrap(value), __wrap(key))
                        }
                      },
                      true
                    ));
                  };
                  handle = function (pair) {
                    return handleItem(pair.value, pair.key);
                  };
                  return handle(this.macroExpand1(declarable.pairs[0]));
                } else {
                  return this.maybeCache(value, function (setValue, value) {
                    function handleItem(i, left, key, block) {
                      block.push(_this.macroExpand1(__node(
                        23,
                        38,
                        254,
                        {
                          macroName: "let",
                          macroData: {
                            declarable: __node(
                              23,
                              37,
                              254,
                              __node(
                                23,
                                31,
                                254,
                                { ident: __wrap(left) },
                                true
                              ),
                              true
                            ),
                            value: __node(1, __wrap(value), __wrap(key))
                          }
                        },
                        true
                      )));
                      return handle(inc(i), block);
                    }
                    function handlePair(i, pair, block) {
                      return handleItem(i, pair.value, pair.key, block);
                    }
                    function handle(i, block) {
                      if (i < declarable.pairs.length) {
                        return handlePair(i, _this.macroExpand1(declarable.pairs[i]), block);
                      } else {
                        block.push(value);
                        return _this.block(block);
                      }
                    }
                    return handle(0, [setValue]);
                  });
                }
              } else {
                return this.error("Unknown declarable: " + String(declarable + " " + String(declarable != null && (_ref = declarable.constructor) != null ? _ref.name : void 0)));
              }
            },
            options: void 0,
            params: [
              ["ident", "declarable", "ident", "Declarable"],
              ["const", "="],
              ["ident", "value", "ident", "ExpressionOrAssignmentOrBody"]
            ],
            names: "let",
            id: 38
          },
          {
            code: function (macroFullData, __wrap, __node, __const) {
              var _this, macroData, macroName, node;
              _this = this;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              node = macroData.node;
              if (node) {
                return this.mutateLast(
                  node || this.noop(),
                  function (n) {
                    return _this["return"](n);
                  },
                  true
                );
              } else {
                return this["return"]();
              }
            },
            options: void 0,
            params: [
              [
                "ident",
                "node",
                "many",
                "?",
                "ident",
                "Expression"
              ]
            ],
            names: "return",
            id: 39
          },
          {
            code: function (macroFullData, __wrap, __node, __const) {
              var _this, macroData, macroName, node;
              _this = this;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              node = macroData.node;
              return this.mutateLast(
                node || this.noop(),
                function (n) {
                  return _this.maybeCache(n, function (setN, n) {
                    return __node(
                      23,
                      17,
                      280,
                      {
                        macroName: "if",
                        macroData: {
                          test: __node(
                            23,
                            20,
                            280,
                            { op: "?", node: __wrap(setN) },
                            true
                          ),
                          body: __node(
                            23,
                            39,
                            281,
                            { macroName: "return", macroData: { node: __wrap(n) } },
                            true
                          ),
                          elseIfs: []
                        }
                      },
                      true
                    );
                  });
                },
                true
              );
            },
            options: void 0,
            params: [["ident", "node", "ident", "Expression"]],
            names: "return?",
            id: 40
          },
          {
            code: function (macroFullData, __wrap, __node, __const) {
              var _this, macroData, macroName, node;
              _this = this;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              node = macroData.node;
              return this.mutateLast(
                node || this.noop(),
                function (n) {
                  if (_this.isType(n, "boolean")) {
                    return __node(
                      23,
                      17,
                      288,
                      {
                        macroName: "if",
                        macroData: {
                          test: __wrap(n),
                          body: __node(
                            23,
                            39,
                            289,
                            { macroName: "return", macroData: { node: __const("true") } },
                            true
                          ),
                          elseIfs: []
                        }
                      },
                      true
                    );
                  } else {
                    return _this.maybeCache(n, function (setN, n) {
                      return __node(
                        23,
                        17,
                        293,
                        {
                          macroName: "if",
                          macroData: {
                            test: __wrap(setN),
                            body: __node(
                              23,
                              39,
                              294,
                              { macroName: "return", macroData: { node: __wrap(n) } },
                              true
                            ),
                            elseIfs: []
                          }
                        },
                        true
                      );
                    });
                  }
                },
                true
              );
            },
            options: void 0,
            params: [["ident", "node", "ident", "Expression"]],
            names: "returnif",
            id: 41
          },
          {
            code: function (macroFullData, __wrap, __node, __const) {
              var _this, macroData, macroName, node;
              _this = this;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              node = macroData.node;
              return this.mutateLast(
                node || this.noop(),
                function (n) {
                  if (_this.isType(n, "boolean")) {
                    return __node(
                      23,
                      17,
                      301,
                      {
                        macroName: "unless",
                        macroData: {
                          test: __wrap(n),
                          body: __node(
                            23,
                            39,
                            302,
                            { macroName: "return", macroData: { node: __const("false") } },
                            true
                          ),
                          elseIfs: []
                        }
                      },
                      true
                    );
                  } else {
                    return _this.maybeCache(n, function (setN, n) {
                      return __node(
                        23,
                        17,
                        306,
                        {
                          macroName: "unless",
                          macroData: {
                            test: __wrap(setN),
                            body: __node(
                              23,
                              39,
                              307,
                              { macroName: "return", macroData: { node: __wrap(n) } },
                              true
                            ),
                            elseIfs: []
                          }
                        },
                        true
                      );
                    });
                  }
                },
                true
              );
            },
            options: void 0,
            params: [["ident", "node", "ident", "Expression"]],
            names: "returnunless",
            id: 42
          },
          {
            code: function() {
            var __lt, __num, __typeof;
            __lt = function (x, y) {
              var type;
              type = typeof x;
              if (type !== "number" && type !== "string") {
                throw TypeError("Cannot compare a non-number/string: " + type);
              } else if (type !== typeof y) {
                throw TypeError("Cannot compare elements of different types: " + type + " vs " + typeof y);
              } else {
                return x < y;
              }
            };
            __num = function (num) {
              if (typeof num !== "number") {
                throw TypeError("Expected a number, got " + __typeof(num));
              } else {
                return num;
              }
            };
            __typeof = (function () {
              var _toString;
              _toString = Object.prototype.toString;
              return function (o) {
                if (o === void 0) {
                  return "Undefined";
                } else if (o === null) {
                  return "Null";
                } else {
                  return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
                }
              };
            }());
            return function (macroFullData, __wrap, __node, __const) {
              var _this, body, f, locals, macroData, macroName, params, values;
              _this = this;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              locals = macroData.locals;
              body = macroData.body;
              params = [];
              values = [];
              if (locals) {
                if (locals.ident) {
                  params.push(this.param(locals.ident));
                  values.push(locals.value);
                }
                f = function (i) {
                  if (__lt(i, locals.rest.length)) {
                    if (locals.rest[i].ident) {
                      params.push(_this.param(locals.rest[i].ident));
                      values.push(locals.rest[i].value);
                    }
                    return f(__num(i) + 1);
                  }
                };
                f(0);
              }
              return this.call(
                this.func(params, body, true, true),
                values
              );
            
            }
          }.call(this),
            options: void 0,
            params: [
              [
                "ident",
                "locals",
                "many",
                "?",
                "sequence",
                ["ident", "ident", "ident", "Identifier"],
                ["const", "="],
                ["ident", "value"],
                [
                  "ident",
                  "rest",
                  "many",
                  "*",
                  "sequence",
                  ["const", ","],
                  ["ident", "ident", "ident", "Identifier"],
                  ["const", "="],
                  ["ident", "value"]
                ]
              ],
              [
                "ident",
                "body",
                "choice",
                ["ident", "Body"],
                [
                  "sequence",
                  ["const", ";"],
                  ["this", "ident", "Statement"]
                ]
              ]
            ],
            names: "do",
            id: 104
          },
          {
            code: function (macroFullData, __wrap, __node, __const) {
              var body, func, macroData, macroName, node;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              node = macroData.node;
              body = macroData.body;
              func = __node(20, [], __wrap(body), true);
              return __node(
                9,
                __wrap(func),
                [__wrap(node)],
                false,
                true
              );
            },
            options: void 0,
            params: [
              ["ident", "node", "ident", "Expression"],
              [
                "ident",
                "body",
                "choice",
                ["ident", "Body"],
                [
                  "sequence",
                  ["const", ";"],
                  ["this", "ident", "Statement"]
                ]
              ]
            ],
            names: "with",
            id: 105
          },
          {
            code: function() {
            var __strnum, __typeof;
            __strnum = function (strnum) {
              var type;
              type = typeof strnum;
              if (type === "string") {
                return strnum;
              } else if (type === "number") {
                return String(strnum);
              } else {
                throw TypeError("Expected a string or number, got " + __typeof(strnum));
              }
            };
            __typeof = (function () {
              var _toString;
              _toString = Object.prototype.toString;
              return function (o) {
                if (o === void 0) {
                  return "Undefined";
                } else if (o === null) {
                  return "Null";
                } else {
                  return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
                }
              };
            }());
            return function (macroFullData, __wrap, __node, __const) {
              var arr, body, elseBody, every, init, loop, macroData, macroName, reducer,
                  result, runElse, some, step, test;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              reducer = macroData.reducer;
              init = macroData.init;
              test = macroData.test;
              step = macroData.step;
              body = macroData.body;
              elseBody = macroData.elseBody;
              if (init == null) {
                init = this.noop();
              }
              if (test == null) {
                test = __const("true");
              }
              if (step == null) {
                step = this.noop();
              }
              if (reducer) {
                if (reducer === "first") {
                  body = this.mutateLast(body || this.noop(), function (node) {
                    return __node(
                      23,
                      39,
                      1032,
                      { macroName: "return", macroData: { node: __wrap(node) } },
                      true
                    );
                  });
                  loop = this["for"](init, test, step, body);
                  return __node(23, 0, 1034, {
                    macroName: "do",
                    macroData: {
                      body: __node(7, [__wrap(loop), __wrap(elseBody)])
                    }
                  });
                } else {
                  if (elseBody) {
                    this.error("Cannot use a for loop with an else with " + __strnum(reducer), elseBody);
                  }
                  if (reducer === "some") {
                    some = this.tmp("some", false, "boolean");
                    result = [];
                    result.push(__node(
                      23,
                      38,
                      1043,
                      {
                        macroName: "let",
                        macroData: {
                          declarable: __node(
                            23,
                            37,
                            1043,
                            __node(
                              23,
                              31,
                              1043,
                              { ident: __wrap(some) },
                              true
                            ),
                            true
                          ),
                          value: __const("false")
                        }
                      },
                      true
                    ));
                    result.push(this["for"](init, test, step, this.mutateLast(body || this.noop(), function (node) {
                      return __node(
                        23,
                        17,
                        1045,
                        {
                          macroName: "if",
                          macroData: {
                            test: __wrap(node),
                            body: __node(7, [
                              __node(
                                23,
                                30,
                                1046,
                                { left: __wrap(some), op: ":=", right: __const("true") },
                                true
                              ),
                              __node(
                                23,
                                19,
                                1047,
                                { macroName: "break", macroData: {} },
                                true
                              )
                            ]),
                            elseIfs: []
                          }
                        },
                        true
                      );
                    })));
                    result.push(some);
                    if (this.position === "expression") {
                      return __wrap(result);
                    } else {
                      return __wrap(result);
                    }
                  } else if (reducer === "every") {
                    every = this.tmp("every", false, "boolean");
                    result = [];
                    result.push(__node(
                      23,
                      38,
                      1056,
                      {
                        macroName: "let",
                        macroData: {
                          declarable: __node(
                            23,
                            37,
                            1056,
                            __node(
                              23,
                              31,
                              1056,
                              { ident: __wrap(every) },
                              true
                            ),
                            true
                          ),
                          value: __const("true")
                        }
                      },
                      true
                    ));
                    result.push(this["for"](init, test, step, this.mutateLast(body || this.noop(), function (node) {
                      return __node(
                        23,
                        17,
                        1058,
                        {
                          macroName: "if",
                          macroData: {
                            test: __node(
                              23,
                              3,
                              1058,
                              { op: "not", node: __wrap(node) },
                              true
                            ),
                            body: __node(7, [
                              __node(
                                23,
                                30,
                                1059,
                                { left: __wrap(every), op: ":=", right: __const("false") },
                                true
                              ),
                              __node(
                                23,
                                19,
                                1060,
                                { macroName: "break", macroData: {} },
                                true
                              )
                            ]),
                            elseIfs: []
                          }
                        },
                        true
                      );
                    })));
                    result.push(every);
                    if (this.position === "expression") {
                      return __wrap(result);
                    } else {
                      return __wrap(result);
                    }
                  } else {
                    return this.error("Unknown reducer: " + __strnum(reducer));
                  }
                }
              } else if (elseBody) {
                if (this.position === "expression") {
                  this.error(
                    "Cannot use a for loop with an else with as an expression",
                    elseBody
                  );
                }
                runElse = this.tmp("else", false, "boolean");
                body = __node(7, [
                  __node(
                    23,
                    30,
                    1073,
                    { left: __wrap(runElse), op: ":=", right: __const("false") },
                    true
                  ),
                  __wrap(body)
                ]);
                init = __node(7, [
                  __node(
                    23,
                    30,
                    1076,
                    { left: __wrap(runElse), op: ":=", right: __const("true") },
                    true
                  ),
                  __wrap(init)
                ]);
                loop = this["for"](init, test, step, body);
                return __node(7, [
                  __wrap(loop),
                  __node(
                    23,
                    17,
                    1081,
                    {
                      macroName: "if",
                      macroData: { test: __wrap(runElse), body: __wrap(elseBody), elseIfs: [] }
                    },
                    true
                  )
                ]);
              } else if (this.position === "expression") {
                arr = this.tmp("arr", false, this.type(body).array());
                body = this.mutateLast(body || this.noop(), function (node) {
                  return __node(
                    9,
                    __node(1, __wrap(arr), __node(12, "push")),
                    [__wrap(node)]
                  );
                });
                init = __node(7, [
                  __node(
                    23,
                    30,
                    1087,
                    { left: __wrap(arr), op: ":=", right: __node(4) },
                    true
                  ),
                  __wrap(init)
                ]);
                loop = this["for"](init, test, step, body);
                return __node(7, [__wrap(loop), __wrap(arr)]);
              } else {
                return this["for"](init, test, step, body);
              }
            
            }
          }.call(this),
            options: void 0,
            params: [
              [
                "ident",
                "reducer",
                "many",
                "?",
                "choice",
                ["const", "every"],
                ["const", "some"],
                ["const", "first"]
              ],
              [
                "ident",
                "init",
                "choice",
                ["ident", "ExpressionOrAssignment"],
                ["const", ""]
              ],
              ["const", ";"],
              [
                "ident",
                "test",
                "choice",
                ["ident", "Logic"],
                ["const", ""]
              ],
              ["const", ";"],
              [
                "ident",
                "step",
                "choice",
                ["ident", "ExpressionOrAssignment"],
                ["const", ""]
              ],
              [
                "ident",
                "body",
                "choice",
                ["ident", "BodyNoEnd"],
                [
                  "sequence",
                  ["const", ";"],
                  ["this", "ident", "Statement"]
                ]
              ],
              [
                "ident",
                "elseBody",
                "many",
                "?",
                "sequence",
                [
                  "const",
                  "\n"
                ],
                ["const", "else"],
                [
                  "this",
                  "choice",
                  ["ident", "BodyNoEnd"],
                  [
                    "sequence",
                    ["const", ";"],
                    ["this", "ident", "Statement"]
                  ]
                ]
              ],
              ["const", "end"]
            ],
            names: "for",
            id: 106
          },
          {
            code: function (macroFullData, __wrap, __node, __const) {
              var body, current, currentStart, init, macroData, macroName, step, test;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              init = macroData.init;
              test = macroData.test;
              step = macroData.step;
              current = macroData.current;
              currentStart = macroData.currentStart;
              body = macroData.body;
              if (init == null) {
                init = this.noop();
              }
              if (test == null) {
                test = __const("true");
              }
              if (step == null) {
                step = this.noop();
              }
              body = this.mutateLast(body || this.noop(), function (node) {
                return __node(23, 30, 1101, { left: __wrap(current), op: ":=", right: __wrap(node) });
              });
              return __node(7, [
                __node(
                  23,
                  38,
                  1103,
                  {
                    macroName: "let",
                    macroData: {
                      declarable: __node(
                        23,
                        37,
                        1103,
                        __node(
                          23,
                          31,
                          1103,
                          { isMutable: "mutable", ident: __wrap(current) },
                          true
                        ),
                        true
                      ),
                      value: __wrap(currentStart)
                    }
                  },
                  true
                ),
                __node(
                  23,
                  106,
                  1104,
                  {
                    macroName: "for",
                    macroData: { init: __wrap(init), test: __wrap(test), step: __wrap(step), body: __wrap(body) }
                  },
                  true
                ),
                __wrap(current)
              ]);
            },
            options: void 0,
            params: [
              ["const", "reduce"],
              [
                "ident",
                "init",
                "choice",
                ["ident", "Expression"],
                ["const", ""]
              ],
              ["const", ";"],
              [
                "ident",
                "test",
                "choice",
                ["ident", "Logic"],
                ["const", ""]
              ],
              ["const", ";"],
              [
                "ident",
                "step",
                "choice",
                ["ident", "Statement"],
                ["const", ""]
              ],
              ["const", ","],
              ["ident", "current", "ident", "Identifier"],
              ["const", "="],
              ["ident", "currentStart"],
              [
                "ident",
                "body",
                "choice",
                ["ident", "Body"],
                [
                  "sequence",
                  ["const", ";"],
                  ["this", "ident", "Statement"]
                ]
              ]
            ],
            names: "for",
            id: 107
          },
          {
            code: function (macroFullData, __wrap, __node, __const) {
              var body, elseBody, macroData, macroName, reducer, step, test;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              reducer = macroData.reducer;
              test = macroData.test;
              step = macroData.step;
              body = macroData.body;
              elseBody = macroData.elseBody;
              if (macroName === "until") {
                test = __node(23, 3, 1111, { op: "not", node: __wrap(test) });
              }
              if (reducer === "every") {
                return __node(23, 106, 1114, {
                  macroName: "for",
                  macroData: {
                    reducer: "every",
                    test: __wrap(test),
                    step: __wrap(step),
                    body: __wrap(body),
                    elseBody: __wrap(elseBody)
                  }
                });
              } else if (reducer === "some") {
                return __node(23, 106, 1119, {
                  macroName: "for",
                  macroData: {
                    reducer: "some",
                    test: __wrap(test),
                    step: __wrap(step),
                    body: __wrap(body),
                    elseBody: __wrap(elseBody)
                  }
                });
              } else if (reducer === "first") {
                return __node(23, 106, 1124, {
                  macroName: "for",
                  macroData: {
                    reducer: "first",
                    test: __wrap(test),
                    step: __wrap(step),
                    body: __wrap(body),
                    elseBody: __wrap(elseBody)
                  }
                });
              } else if (this.position === "expression") {
                return __node(23, 106, 1129, {
                  macroName: "for",
                  macroData: { test: __wrap(test), step: __wrap(step), body: __wrap(body), elseBody: __wrap(elseBody) }
                });
              } else {
                return __node(
                  23,
                  106,
                  1135,
                  {
                    macroName: "for",
                    macroData: { test: __wrap(test), step: __wrap(step), body: __wrap(body), elseBody: __wrap(elseBody) }
                  },
                  true
                );
              }
            },
            options: void 0,
            params: [
              [
                "ident",
                "reducer",
                "many",
                "?",
                "choice",
                ["const", "every"],
                ["const", "some"],
                ["const", "first"]
              ],
              ["ident", "test", "ident", "Logic"],
              [
                "ident",
                "step",
                "many",
                "?",
                "sequence",
                ["const", ","],
                ["this", "ident", "ExpressionOrAssignment"]
              ],
              [
                "ident",
                "body",
                "choice",
                ["ident", "BodyNoEnd"],
                [
                  "sequence",
                  ["const", ";"],
                  ["this", "ident", "Statement"]
                ]
              ],
              [
                "ident",
                "elseBody",
                "many",
                "?",
                "sequence",
                [
                  "const",
                  "\n"
                ],
                ["const", "else"],
                [
                  "this",
                  "choice",
                  ["ident", "BodyNoEnd"],
                  [
                    "sequence",
                    ["const", ";"],
                    ["this", "ident", "Statement"]
                  ]
                ]
              ],
              ["const", "end"]
            ],
            names: ["while", "until"],
            id: 108
          },
          {
            code: function (macroFullData, __wrap, __node, __const) {
              var body, current, currentStart, macroData, macroName, step, test;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              test = macroData.test;
              step = macroData.step;
              current = macroData.current;
              currentStart = macroData.currentStart;
              body = macroData.body;
              if (macroName === "until") {
                test = __node(23, 3, 1142, { op: "not", node: __wrap(test) });
              }
              return __node(
                23,
                107,
                1145,
                {
                  macroName: "for",
                  macroData: {
                    test: __wrap(test),
                    step: __wrap(step),
                    current: __wrap(current),
                    currentStart: __wrap(currentStart),
                    body: __wrap(body)
                  }
                },
                true
              );
            },
            options: void 0,
            params: [
              ["const", "reduce"],
              ["ident", "test", "ident", "Logic"],
              [
                "ident",
                "step",
                "many",
                "?",
                "sequence",
                ["const", ","],
                ["this", "ident", "ExpressionOrAssignment"]
              ],
              ["const", ","],
              ["ident", "current", "ident", "Identifier"],
              ["const", "="],
              ["ident", "currentStart"],
              [
                "ident",
                "body",
                "choice",
                ["ident", "Body"],
                [
                  "sequence",
                  ["const", ";"],
                  ["this", "ident", "Statement"]
                ]
              ]
            ],
            names: ["while", "until"],
            id: 109
          },
          {
            code: function() {
            var __num, __strnum, __typeof;
            __num = function (num) {
              if (typeof num !== "number") {
                throw TypeError("Expected a number, got " + __typeof(num));
              } else {
                return num;
              }
            };
            __strnum = function (strnum) {
              var type;
              type = typeof strnum;
              if (type === "string") {
                return strnum;
              } else if (type === "number") {
                return String(strnum);
              } else {
                throw TypeError("Expected a string or number, got " + __typeof(strnum));
              }
            };
            __typeof = (function () {
              var _toString;
              _toString = Object.prototype.toString;
              return function (o) {
                if (o === void 0) {
                  return "Undefined";
                } else if (o === null) {
                  return "Null";
                } else {
                  return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
                }
              };
            }());
            return function (macroFullData, __wrap, __node, __const) {
              var _ref, _ref2, args, array, body, elseBody, end, func, hasIndex,
                  hasLength, inclusive, increment, index, init, isString, length,
                  letIndex, letLength, letValue, macroData, macroName, reducer, start,
                  step, test, tmp, value, valueExpr, valueIdent;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              reducer = macroData.reducer;
              value = macroData.value;
              index = macroData.index;
              array = macroData.array;
              body = macroData.body;
              elseBody = macroData.elseBody;
              value = this.macroExpand1(value);
              length = null;
              if (index) {
                length = index.length;
                index = index.value;
              }
              if (this.isCall(array) && this.isIdent(this.callFunc(array)) && this.name(this.callFunc(array)) === "__toArray" && !this.callIsApply(array)) {
                array = this.callArgs(array)[0];
              }
              if (this.isCall(array) && this.isIdent(this.callFunc(array)) && this.name(this.callFunc(array)) === "__range" && !this.callIsApply(array)) {
                if (this.isArray(value) || this.isObject(value)) {
                  this.error("Cannot assign a number to a complex declarable", value);
                }
                value = value.ident;
                _ref = this.callArgs(array);
                start = _ref[0];
                end = _ref[1];
                step = _ref[2];
                inclusive = _ref[3];
                init = [];
                if (this.isConst(start)) {
                  if (typeof this.value(start) !== "number") {
                    this.error("Cannot start with a non-number: " + __strnum(this.value(start)), start);
                  }
                } else {
                  start = __node(23, 60, 1204, { op: "+", node: __wrap(start) });
                }
                init.push(this.macroExpandAll(__node(
                  23,
                  38,
                  1205,
                  {
                    macroName: "let",
                    macroData: {
                      declarable: __node(
                        23,
                        37,
                        1205,
                        __node(
                          23,
                          31,
                          1205,
                          { isMutable: "mutable", ident: __wrap(value) },
                          true
                        ),
                        true
                      ),
                      value: __wrap(start)
                    }
                  },
                  true
                )));
                if (this.isConst(end)) {
                  if (typeof this.value(end) !== "number") {
                    this.error("Cannot end with a non-number: " + __strnum(this.value(end)), end);
                  }
                } else if (this.isComplex(end)) {
                  end = this.cache(
                    __node(23, 60, 1211, { op: "+", node: __wrap(end) }),
                    init,
                    "end",
                    false
                  );
                } else {
                  init.push(__node(23, 60, 1213, { op: "+", node: __wrap(end) }));
                }
                if (this.isConst(step)) {
                  if (typeof this.value(step) !== "number") {
                    this.error("Cannot step with a non-number: " + __strnum(this.value(step)), step);
                  }
                } else if (this.isComplex(step)) {
                  step = this.cache(
                    __node(23, 60, 1219, { op: "+", node: __wrap(step) }),
                    init,
                    "step",
                    false
                  );
                } else {
                  init.push(__node(23, 60, 1221, { op: "+", node: __wrap(step) }));
                }
                if (this.isComplex(inclusive)) {
                  inclusive = this.cache(__wrap(inclusive), init, "incl", false);
                }
                if (this.isConst(step)) {
                  if (__num(this.value(step)) > 0) {
                    if (this.isConst(end) && this.value(end) === 1/0) {
                      test = __const("true");
                    } else {
                      test = __node(23, 16, 1231, {
                        macroName: "if",
                        macroData: {
                          test: __wrap(inclusive),
                          body: __node(23, 9, 1231, { left: __wrap(value), inverted: false, op: "~<=", right: __wrap(end) }),
                          elseIfs: [],
                          elseBody: __node(23, 9, 1231, { left: __wrap(value), inverted: false, op: "~<", right: __wrap(end) })
                        }
                      });
                    }
                  } else if (this.isConst(end) && this.value(end) === -1/0) {
                    test = __const("true");
                  } else {
                    test = __node(23, 16, 1236, {
                      macroName: "if",
                      macroData: {
                        test: __wrap(inclusive),
                        body: __node(23, 10, 1236, { left: __wrap(value), inverted: false, op: "~>=", right: __wrap(end) }),
                        elseIfs: [],
                        elseBody: __node(23, 10, 1236, { left: __wrap(value), inverted: false, op: "~>", right: __wrap(end) })
                      }
                    });
                  }
                } else {
                  test = __node(23, 17, 1238, {
                    macroName: "if",
                    macroData: {
                      test: __node(23, 10, 1238, {
                        left: __wrap(step),
                        inverted: false,
                        op: "~>",
                        right: __node(12, 0)
                      }),
                      body: __node(
                        23,
                        16,
                        1239,
                        {
                          macroName: "if",
                          macroData: {
                            test: __wrap(inclusive),
                            body: __node(23, 9, 1239, { left: __wrap(value), inverted: false, op: "~<=", right: __wrap(end) }),
                            elseIfs: [],
                            elseBody: __node(23, 9, 1239, { left: __wrap(value), inverted: false, op: "~<", right: __wrap(end) })
                          }
                        },
                        true
                      ),
                      elseIfs: [],
                      elseBody: __node(
                        23,
                        16,
                        1241,
                        {
                          macroName: "if",
                          macroData: {
                            test: __wrap(inclusive),
                            body: __node(23, 10, 1241, { left: __wrap(value), inverted: false, op: "~>=", right: __wrap(end) }),
                            elseIfs: [],
                            elseBody: __node(23, 10, 1241, { left: __wrap(value), inverted: false, op: "~>", right: __wrap(end) })
                          }
                        },
                        true
                      )
                    }
                  });
                }
                increment = __node(23, 52, 1243, { left: __wrap(value), op: "~+=", right: __wrap(step) });
                if (length) {
                  init.push(this.macroExpandAll(__node(
                    23,
                    38,
                    1246,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __node(
                          23,
                          37,
                          1246,
                          __node(
                            23,
                            31,
                            1246,
                            { ident: __wrap(length) },
                            true
                          ),
                          true
                        ),
                        value: __node(23, 17, 1246, {
                          macroName: "if",
                          macroData: {
                            test: __wrap(inclusive),
                            body: __node(
                              23,
                              45,
                              1247,
                              {
                                left: __node(23, 49, 1247, {
                                  left: __node(23, 49, 1247, { left: __wrap(end), inverted: false, op: "~-", right: __wrap(start) }),
                                  inverted: false,
                                  op: "~+",
                                  right: __wrap(step)
                                }),
                                inverted: false,
                                op: "~\\",
                                right: __wrap(step)
                              },
                              true
                            ),
                            elseIfs: [],
                            elseBody: __node(
                              23,
                              45,
                              1249,
                              {
                                left: __node(23, 49, 1249, { left: __wrap(end), inverted: false, op: "~-", right: __wrap(start) }),
                                inverted: false,
                                op: "~\\",
                                right: __wrap(step)
                              },
                              true
                            )
                          }
                        })
                      }
                    },
                    true
                  )));
                }
                if (index) {
                  init.push(this.macroExpandAll(__node(
                    23,
                    38,
                    1252,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __node(
                          23,
                          37,
                          1252,
                          __node(
                            23,
                            31,
                            1252,
                            { isMutable: "mutable", ident: __wrap(index) },
                            true
                          ),
                          true
                        ),
                        value: __node(12, 0)
                      }
                    },
                    true
                  )));
                  increment = __node(7, [
                    __wrap(increment),
                    __node(
                      23,
                      103,
                      1255,
                      {
                        left: __wrap(index),
                        op: "+=",
                        right: __node(12, 1)
                      },
                      true
                    )
                  ]);
                  if (this.hasFunc(body)) {
                    func = this.tmp("f", false, "function");
                    init.push(__node(
                      23,
                      38,
                      1258,
                      {
                        macroName: "let",
                        macroData: {
                          declarable: __node(
                            23,
                            37,
                            1258,
                            __node(
                              23,
                              31,
                              1258,
                              { ident: __wrap(func) },
                              true
                            ),
                            true
                          ),
                          value: __node(
                            20,
                            [
                              __node(27, __wrap(value)),
                              __node(27, __wrap(index))
                            ],
                            __wrap(body),
                            true
                          )
                        }
                      },
                      true
                    ));
                    body = __node(
                      9,
                      __wrap(func),
                      [__node(38), __wrap(value), __wrap(index)],
                      false,
                      true
                    );
                  }
                } else if (this.hasFunc(body)) {
                  func = this.tmp("f", false, "function");
                  init.push(__node(
                    23,
                    38,
                    1262,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __node(
                          23,
                          37,
                          1262,
                          __node(
                            23,
                            31,
                            1262,
                            { ident: __wrap(func) },
                            true
                          ),
                          true
                        ),
                        value: __node(
                          20,
                          [__node(27, __wrap(value))],
                          __wrap(body),
                          true
                        )
                      }
                    },
                    true
                  ));
                  body = __node(
                    9,
                    __wrap(func),
                    [__node(38), __wrap(value)],
                    false,
                    true
                  );
                }
                if (reducer === "every") {
                  return __node(23, 106, 1266, {
                    macroName: "for",
                    macroData: {
                      reducer: "every",
                      init: __wrap(init),
                      test: __wrap(test),
                      step: __wrap(increment),
                      body: __wrap(body),
                      elseBody: __wrap(elseBody)
                    }
                  });
                } else if (reducer === "some") {
                  return __node(23, 106, 1271, {
                    macroName: "for",
                    macroData: {
                      reducer: "some",
                      init: __wrap(init),
                      test: __wrap(test),
                      step: __wrap(increment),
                      body: __wrap(body),
                      elseBody: __wrap(elseBody)
                    }
                  });
                } else if (reducer === "first") {
                  return __node(23, 106, 1276, {
                    macroName: "for",
                    macroData: {
                      reducer: "first",
                      init: __wrap(init),
                      test: __wrap(test),
                      step: __wrap(increment),
                      body: __wrap(body),
                      elseBody: __wrap(elseBody)
                    }
                  });
                } else if (reducer === "filter") {
                  body = this.mutateLast(body, function (node) {
                    return __node(
                      23,
                      17,
                      1282,
                      {
                        macroName: "if",
                        macroData: { test: __wrap(node), body: __wrap(value), elseIfs: [] }
                      },
                      true
                    );
                  });
                  return __node(23, 106, 1284, {
                    macroName: "for",
                    macroData: {
                      init: __wrap(init),
                      test: __wrap(test),
                      step: __wrap(increment),
                      body: __wrap(body),
                      elseBody: __wrap(elseBody)
                    }
                  });
                } else if (this.position === "expression") {
                  return __node(23, 106, 1289, {
                    macroName: "for",
                    macroData: {
                      init: __wrap(init),
                      test: __wrap(test),
                      step: __wrap(increment),
                      body: __wrap(body),
                      elseBody: __wrap(elseBody)
                    }
                  });
                } else {
                  return __node(
                    23,
                    106,
                    1295,
                    {
                      macroName: "for",
                      macroData: {
                        init: __wrap(init),
                        test: __wrap(test),
                        step: __wrap(increment),
                        body: __wrap(body),
                        elseBody: __wrap(elseBody)
                      }
                    },
                    true
                  );
                }
              } else {
                init = [];
                isString = this.isType(array, "string");
                hasIndex = index != null;
                if (index == null) {
                  index = this.tmp("i", false, "number");
                }
                hasLength = length != null;
                if (length == null) {
                  length = this.tmp("len", false, "number");
                }
                this.macroExpandAll(__node(
                  23,
                  38,
                  1308,
                  {
                    macroName: "let",
                    macroData: {
                      declarable: __node(
                        23,
                        37,
                        1308,
                        __node(
                          23,
                          31,
                          1308,
                          { ident: __wrap(length) },
                          true
                        ),
                        true
                      ),
                      value: __node(12, 0)
                    }
                  },
                  true
                ));
                array = this.macroExpandAll(array);
                step = __node(12, 1);
                start = __node(12, 0);
                end = __const("Infinity");
                inclusive = __const("false");
                if (this.isCall(array) && this.isIdent(this.callFunc(array))) {
                  if (this.name(this.callFunc(array)) === "__step" && !this.callIsApply(array)) {
                    args = this.callArgs(array);
                    array = args[0];
                    step = args[1];
                    if (this.isConst(step)) {
                      if (__num(this.value(step)) >= 0) {
                        start = __node(12, 0);
                        end = __const("Infinity");
                      } else {
                        start = __const("Infinity");
                        end = __node(12, 0);
                      }
                    } else {
                      start = void 0;
                      end = void 0;
                    }
                    inclusive = __const("true");
                  } else if (this.name(this.callFunc(array)) === "__slice" && this.callIsApply(array)) {
                    args = this.callArgs(array);
                    array = args[0];
                    start = args[1];
                    end = args[2];
                    if (this.isConst(end) && this.value(end) === void 0) {
                      end = __const("Infinity");
                    }
                  } else if (this.name(this.callFunc(array)) === "__sliceStep" && !this.callIsApply(array)) {
                    args = this.callArgs(array);
                    array = args[0];
                    start = args[1];
                    end = args[2];
                    step = args[3];
                    inclusive = args[4];
                  }
                }
                if (this.isConst(step)) {
                  if (typeof this.value(step) !== "number") {
                    this.error("Expected step to be a number, got " + __typeof(this.value(step)), step);
                  } else if (__num(this.value(step)) % 1 !== 0) {
                    this.error("Expected step to be an integer, got " + __strnum(this.value(step)), step);
                  } else if (this.value(step) === 0) {
                    this.error("Expected step to non-zero", step);
                  }
                }
                if (start && this.isConst(start) && this.value(start) !== 1/0 && (typeof this.value(start) !== "number" || __num(this.value(start)) % 1 !== 0)) {
                  this.error("Expected start to be an integer, got " + __typeof(this.value(start)) + " (" + String(this.value(start)) + ")", start);
                }
                if (end && this.isConst(end) && this.value(end) !== 1/0 && (typeof this.value(end) !== "number" || __num(this.value(end)) % 1 !== 0)) {
                  this.error("Expected end to be an integer, got " + __typeof(this.value(end)) + " (" + String(this.value(end)) + ")", end);
                }
                if (!isString && !this.isType(array, "arrayLike")) {
                  array = __node(
                    9,
                    __node(21, "__toArray"),
                    [__wrap(array)]
                  );
                }
                array = this.cache(
                  array,
                  init,
                  isString ? "str" : "arr",
                  false
                );
                valueExpr = __node(23, 16, 1362, {
                  macroName: "if",
                  macroData: {
                    test: __wrap(isString),
                    body: __node(
                      9,
                      __node(1, __wrap(array), __node(12, "charAt")),
                      [__wrap(index)]
                    ),
                    elseIfs: [],
                    elseBody: __node(1, __wrap(array), __wrap(index))
                  }
                });
                letIndex = this.macroExpandAll(__node(
                  23,
                  38,
                  1363,
                  {
                    macroName: "let",
                    macroData: {
                      declarable: __node(
                        23,
                        37,
                        1363,
                        __node(
                          23,
                          31,
                          1363,
                          { isMutable: "mutable", ident: __wrap(index) },
                          true
                        ),
                        true
                      ),
                      value: __node(12, 0)
                    }
                  },
                  true
                ));
                if (value && value.type === "ident" && !value.isMutable) {
                  valueIdent = value.ident;
                } else {
                  valueIdent = this.tmp("v", false);
                }
                letValue = this.macroExpandAll(__node(
                  23,
                  38,
                  1365,
                  {
                    macroName: "let",
                    macroData: {
                      declarable: __node(
                        23,
                        37,
                        1365,
                        __node(
                          23,
                          31,
                          1365,
                          { ident: __wrap(value) },
                          true
                        ),
                        true
                      ),
                      value: __wrap(valueExpr)
                    }
                  },
                  true
                ));
                letLength = this.macroExpandAll(__node(
                  23,
                  38,
                  1366,
                  {
                    macroName: "let",
                    macroData: {
                      declarable: __node(
                        23,
                        37,
                        1366,
                        __node(
                          23,
                          31,
                          1366,
                          { ident: __wrap(length) },
                          true
                        ),
                        true
                      ),
                      value: __node(23, 60, 1366, {
                        op: "+",
                        node: __node(1, __wrap(array), __node(12, "length"))
                      })
                    }
                  },
                  true
                ));
                _ref = this.isConst(step)
                  ? (__num(this.value(step)) > 0
                    ? (this.isConst(start)
                      ? (__num(this.value(start)) >= 0
                        ? (init.push(__node(
                          23,
                          38,
                          1372,
                          {
                            macroName: "let",
                            macroData: {
                              declarable: __node(
                                23,
                                37,
                                1372,
                                __node(
                                  23,
                                  31,
                                  1372,
                                  { isMutable: "mutable", ident: __wrap(index) },
                                  true
                                ),
                                true
                              ),
                              value: __wrap(start)
                            }
                          },
                          true
                        )), init.push(letLength))
                        : (init.push(letLength), init.push(__node(
                          23,
                          38,
                          1376,
                          {
                            macroName: "let",
                            macroData: {
                              declarable: __node(
                                23,
                                37,
                                1376,
                                __node(
                                  23,
                                  31,
                                  1376,
                                  { isMutable: "mutable", ident: __wrap(index) },
                                  true
                                ),
                                true
                              ),
                              value: __node(23, 66, 1376, { left: __wrap(length), inverted: false, op: "+", right: __wrap(start) })
                            }
                          },
                          true
                        ))))
                      : (init.push(letLength), init.push(this.getConstValue("DISABLE_TYPE_CHECKING", false)
                        ? __node(
                          23,
                          38,
                          1380,
                          {
                            macroName: "let",
                            macroData: {
                              declarable: __node(
                                23,
                                37,
                                1380,
                                __node(
                                  23,
                                  31,
                                  1380,
                                  { isMutable: "mutable", ident: __wrap(index) },
                                  true
                                ),
                                true
                              ),
                              value: __node(23, 60, 1380, { op: "+", node: __wrap(start) })
                            }
                          },
                          true
                        )
                        : __node(
                          23,
                          38,
                          1382,
                          {
                            macroName: "let",
                            macroData: {
                              declarable: __node(
                                23,
                                37,
                                1382,
                                __node(
                                  23,
                                  31,
                                  1382,
                                  { isMutable: "mutable", ident: __wrap(index) },
                                  true
                                ),
                                true
                              ),
                              value: __node(
                                9,
                                __node(21, "__int"),
                                [__wrap(start)]
                              )
                            }
                          },
                          true
                        )), init.push(__node(23, 16, 1383, {
                        macroName: "if",
                        macroData: {
                          test: __node(23, 9, 1383, {
                            left: __wrap(index),
                            inverted: false,
                            op: "~<",
                            right: __node(12, 0)
                          }),
                          body: __node(23, 103, 1383, { left: __wrap(index), op: "+=", right: __wrap(length) }),
                          elseIfs: []
                        }
                      }))), this.isConst(end) && (this.value(end) === 1/0 || this.isConst(inclusive) && this.value(inclusive) && this.value(end) === -1)
                      ? [
                        __node(23, 9, 1385, { left: __wrap(index), inverted: false, op: "~<", right: __wrap(length) }),
                        __node(23, 52, 1385, { left: __wrap(index), op: "~+=", right: __wrap(step) })
                      ]
                      : (tmp = this.tmp("end", false, "number"), init.push(__node(
                        23,
                        38,
                        1388,
                        {
                          macroName: "let",
                          macroData: {
                            declarable: __node(
                              23,
                              37,
                              1388,
                              __node(
                                23,
                                31,
                                1388,
                                { isMutable: "mutable", ident: __wrap(tmp) },
                                true
                              ),
                              true
                            ),
                            value: __node(23, 60, 1388, { op: "+", node: __wrap(end) })
                          }
                        },
                        true
                      )), !this.isConst(end)
                        ? init.push(__node(23, 16, 1390, {
                          macroName: "if",
                          macroData: {
                            test: __node(23, 9, 1390, {
                              left: __wrap(tmp),
                              inverted: false,
                              op: "~<",
                              right: __node(12, 0)
                            }),
                            body: __node(23, 52, 1390, { left: __wrap(tmp), op: "~+=", right: __wrap(length) }),
                            elseIfs: []
                          }
                        }))
                        : __num(this.value(end)) < 0
                        ? init.push(__node(23, 52, 1392, { left: __wrap(tmp), op: "~+=", right: __wrap(length) }))
                        : void 0, init.push(__node(23, 16, 1393, {
                        macroName: "if",
                        macroData: {
                          test: __wrap(inclusive),
                          body: __node(23, 30, 1393, {
                            left: __wrap(tmp),
                            op: ":=",
                            right: __node(23, 2, 1393, {
                              left: __node(23, 66, 1393, {
                                left: __wrap(tmp),
                                inverted: false,
                                op: "+",
                                right: __node(12, 1)
                              }),
                              inverted: false,
                              op: "or",
                              right: __const("Infinity")
                            })
                          }),
                          elseIfs: []
                        }
                      })), init.push(__node(23, 86, 1394, { left: __wrap(tmp), op: "~min=", right: __wrap(length) })), [
                        __node(23, 9, 1395, { left: __wrap(index), inverted: false, op: "~<", right: __wrap(tmp) }),
                        __node(23, 52, 1395, { left: __wrap(index), op: "~+=", right: __wrap(step) })
                      ]))
                    : this.value(step) === -1 && (!start || this.isConst(start) && ((_ref2 = this.value(start)) === -1 || _ref2 === 1/0) && this.isConst(end) && this.value(end) === 0 && this.isConst(inclusive) && this.value(inclusive))
                    ? (hasLength
                      ? (init.push(letLength), init.push(__node(
                        23,
                        38,
                        1399,
                        {
                          macroName: "let",
                          macroData: {
                            declarable: __node(
                              23,
                              37,
                              1399,
                              __node(
                                23,
                                31,
                                1399,
                                { isMutable: "mutable", ident: __wrap(index) },
                                true
                              ),
                              true
                            ),
                            value: __wrap(length)
                          }
                        },
                        true
                      )))
                      : init.push(__node(
                        23,
                        38,
                        1401,
                        {
                          macroName: "let",
                          macroData: {
                            declarable: __node(
                              23,
                              37,
                              1401,
                              __node(
                                23,
                                31,
                                1401,
                                { isMutable: "mutable", ident: __wrap(index) },
                                true
                              ),
                              true
                            ),
                            value: __node(23, 60, 1401, {
                              op: "+",
                              node: __node(1, __wrap(array), __node(12, "length"))
                            })
                          }
                        },
                        true
                      )), [
                      __node(23, 13, 1402, { op: "postDec!", node: __wrap(index) }),
                      this.noop()
                    ])
                    : (!this.isConst(end) || __num(this.value(end)) < 0 ? (hasLength = true) : void 0, this.isConst(start)
                      ? ((_ref2 = this.value(start)) === -1 || _ref2 === 1/0
                        ? (hasLength
                          ? (init.push(letLength), init.push(__node(
                            23,
                            38,
                            1410,
                            {
                              macroName: "let",
                              macroData: {
                                declarable: __node(
                                  23,
                                  37,
                                  1410,
                                  __node(
                                    23,
                                    31,
                                    1410,
                                    { isMutable: "mutable", ident: __wrap(index) },
                                    true
                                  ),
                                  true
                                ),
                                value: __node(23, 49, 1410, {
                                  left: __wrap(length),
                                  inverted: false,
                                  op: "~-",
                                  right: __node(12, 1)
                                })
                              }
                            },
                            true
                          )))
                          : init.push(__node(
                            23,
                            38,
                            1412,
                            {
                              macroName: "let",
                              macroData: {
                                declarable: __node(
                                  23,
                                  37,
                                  1412,
                                  __node(
                                    23,
                                    31,
                                    1412,
                                    { isMutable: "mutable", ident: __wrap(index) },
                                    true
                                  ),
                                  true
                                ),
                                value: __node(23, 49, 1412, {
                                  left: __node(23, 60, 1412, {
                                    op: "+",
                                    node: __node(1, __wrap(array), __node(12, "length"))
                                  }),
                                  inverted: false,
                                  op: "~-",
                                  right: __node(12, 1)
                                })
                              }
                            },
                            true
                          )))
                        : (init.push(letLength), __num(this.value(start)) >= 0
                          ? init.push(__node(
                            23,
                            38,
                            1416,
                            {
                              macroName: "let",
                              macroData: {
                                declarable: __node(
                                  23,
                                  37,
                                  1416,
                                  __node(
                                    23,
                                    31,
                                    1416,
                                    { isMutable: "mutable", ident: __wrap(index) },
                                    true
                                  ),
                                  true
                                ),
                                value: __node(23, 16, 1416, {
                                  macroName: "if",
                                  macroData: {
                                    test: __node(23, 9, 1416, { left: __wrap(start), inverted: false, op: "~<", right: __wrap(length) }),
                                    body: __wrap(start),
                                    elseIfs: [],
                                    elseBody: __node(23, 49, 1416, {
                                      left: __wrap(length),
                                      inverted: false,
                                      op: "~-",
                                      right: __node(12, 1)
                                    })
                                  }
                                })
                              }
                            },
                            true
                          ))
                          : init.push(__node(
                            23,
                            38,
                            1418,
                            {
                              macroName: "let",
                              macroData: {
                                declarable: __node(
                                  23,
                                  37,
                                  1418,
                                  __node(
                                    23,
                                    31,
                                    1418,
                                    { isMutable: "mutable", ident: __wrap(index) },
                                    true
                                  ),
                                  true
                                ),
                                value: __node(23, 49, 1418, {
                                  left: __wrap(length),
                                  inverted: false,
                                  op: "~+",
                                  right: __node(23, 60, 1418, { op: "+", node: __wrap(start) })
                                })
                              }
                            },
                            true
                          ))))
                      : (init.push(letLength), init.push(__node(
                        23,
                        38,
                        1421,
                        {
                          macroName: "let",
                          macroData: {
                            declarable: __node(
                              23,
                              37,
                              1421,
                              __node(
                                23,
                                31,
                                1421,
                                { isMutable: "mutable", ident: __wrap(index) },
                                true
                              ),
                              true
                            ),
                            value: __node(23, 60, 1421, { op: "+", node: __wrap(start) })
                          }
                        },
                        true
                      )), init.push(__node(
                        23,
                        16,
                        1422,
                        {
                          macroName: "if",
                          macroData: {
                            test: __node(
                              23,
                              9,
                              1422,
                              {
                                left: __wrap(index),
                                inverted: false,
                                op: "~<",
                                right: __node(12, 0)
                              },
                              true
                            ),
                            body: __node(23, 52, 1422, { left: __wrap(index), op: "~+=", right: __wrap(length) }),
                            elseIfs: [],
                            elseBody: __node(23, 86, 1422, { left: __wrap(index), op: "~min=", right: __wrap(length) })
                          }
                        },
                        true
                      )), init.push(__node(
                        23,
                        53,
                        1423,
                        {
                          left: __wrap(index),
                          op: "~-=",
                          right: __node(12, 1)
                        },
                        true
                      ))), this.isConst(end)
                      ? (__num(this.value(end)) >= 0
                        ? [
                          __node(23, 16, 1426, {
                            macroName: "if",
                            macroData: {
                              test: __wrap(inclusive),
                              body: __node(23, 10, 1426, { left: __wrap(index), inverted: false, op: "~>=", right: __wrap(end) }),
                              elseIfs: [],
                              elseBody: __node(23, 10, 1426, { left: __wrap(index), inverted: false, op: "~>", right: __wrap(end) })
                            }
                          }),
                          __node(23, 52, 1426, { left: __wrap(index), op: "~+=", right: __wrap(step) })
                        ]
                        : [
                          __node(23, 16, 1428, {
                            macroName: "if",
                            macroData: {
                              test: __wrap(inclusive),
                              body: __node(23, 10, 1428, {
                                left: __wrap(index),
                                inverted: false,
                                op: "~>=",
                                right: __node(23, 66, 1428, { left: __wrap(end), inverted: false, op: "+", right: __wrap(length) })
                              }),
                              elseIfs: [],
                              elseBody: __node(23, 10, 1428, {
                                left: __wrap(index),
                                inverted: false,
                                op: "~>",
                                right: __node(23, 66, 1428, { left: __wrap(end), inverted: false, op: "+", right: __wrap(length) })
                              })
                            }
                          }),
                          __node(23, 52, 1428, { left: __wrap(index), op: "~+=", right: __wrap(step) })
                        ])
                      : (tmp = this.tmp("end", false, "number"), init.push(__node(
                        23,
                        38,
                        1431,
                        {
                          macroName: "let",
                          macroData: {
                            declarable: __node(
                              23,
                              37,
                              1431,
                              __node(
                                23,
                                31,
                                1431,
                                { isMutable: "mutable", ident: __wrap(tmp) },
                                true
                              ),
                              true
                            ),
                            value: __node(23, 60, 1431, { op: "+", node: __wrap(end) })
                          }
                        },
                        true
                      )), init.push(__node(
                        23,
                        16,
                        1432,
                        {
                          macroName: "if",
                          macroData: {
                            test: __node(
                              23,
                              9,
                              1432,
                              {
                                left: __wrap(tmp),
                                inverted: false,
                                op: "~<",
                                right: __node(12, 0)
                              },
                              true
                            ),
                            body: __node(23, 52, 1432, { left: __wrap(tmp), op: "~+=", right: __wrap(length) }),
                            elseIfs: []
                          }
                        },
                        true
                      )), [
                        __node(23, 16, 1433, {
                          macroName: "if",
                          macroData: {
                            test: __wrap(inclusive),
                            body: __node(23, 10, 1433, { left: __wrap(index), inverted: false, op: "~>=", right: __wrap(tmp) }),
                            elseIfs: [],
                            elseBody: __node(23, 10, 1433, { left: __wrap(index), inverted: false, op: "~>", right: __wrap(tmp) })
                          }
                        }),
                        __node(23, 52, 1433, { left: __wrap(index), op: "~+=", right: __wrap(step) })
                      ])))
                  : (this.isComplex(step)
                    ? (this.getConstValue("DISABLE_TYPE_CHECKING", false)
                      ? (step = this.cache(
                        __node(23, 60, 1437, { op: "+", node: __wrap(step) }),
                        init,
                        "step",
                        false
                      ))
                      : (step = this.cache(
                        __node(
                          9,
                          __node(21, "__int"),
                          [
                            __node(
                              9,
                              __node(21, "__nonzero"),
                              [__wrap(step)]
                            )
                          ]
                        ),
                        init,
                        "step",
                        false
                      )))
                    : !this.getConstValue("DISABLE_TYPE_CHECKING", false)
                    ? init.unshift(__node(
                      9,
                      __node(21, "__int"),
                      [
                        __node(
                          9,
                          __node(21, "__nonzero"),
                          [__wrap(step)]
                        )
                      ]
                    ))
                    : void 0, init.push(letLength), !start
                    ? (init.push(__node(
                      23,
                      38,
                      1445,
                      {
                        macroName: "let",
                        macroData: {
                          declarable: __node(
                            23,
                            37,
                            1445,
                            __node(
                              23,
                              31,
                              1445,
                              { isMutable: "mutable", ident: __wrap(index) },
                              true
                            ),
                            true
                          ),
                          value: __node(23, 16, 1445, {
                            macroName: "if",
                            macroData: {
                              test: __node(23, 10, 1445, {
                                left: __wrap(step),
                                inverted: false,
                                op: "~>",
                                right: __node(12, 0)
                              }),
                              body: __node(12, 0),
                              elseIfs: [],
                              elseBody: __node(23, 49, 1445, {
                                left: __wrap(length),
                                inverted: false,
                                op: "~-",
                                right: __node(12, 1)
                              })
                            }
                          })
                        }
                      },
                      true
                    )), [
                      __node(23, 16, 1447, {
                        macroName: "if",
                        macroData: {
                          test: __node(23, 10, 1447, {
                            left: __wrap(step),
                            inverted: false,
                            op: "~>",
                            right: __node(12, 0)
                          }),
                          body: __node(23, 9, 1447, { left: __wrap(index), inverted: false, op: "~<", right: __wrap(length) }),
                          elseIfs: [],
                          elseBody: __node(23, 10, 1447, {
                            left: __wrap(index),
                            inverted: false,
                            op: "~>=",
                            right: __node(12, 0)
                          })
                        }
                      }),
                      __node(23, 52, 1448, { left: __wrap(index), op: "~+=", right: __wrap(step) })
                    ])
                    : (this.isConst(start)
                      ? (this.value(start) === 1/0
                        ? init.push(__node(
                          23,
                          38,
                          1453,
                          {
                            macroName: "let",
                            macroData: {
                              declarable: __node(
                                23,
                                37,
                                1453,
                                __node(
                                  23,
                                  31,
                                  1453,
                                  { isMutable: "mutable", ident: __wrap(index) },
                                  true
                                ),
                                true
                              ),
                              value: __node(23, 49, 1453, {
                                left: __wrap(length),
                                inverted: false,
                                op: "~-",
                                right: __node(12, 1)
                              })
                            }
                          },
                          true
                        ))
                        : init.push(__node(
                          23,
                          38,
                          1455,
                          {
                            macroName: "let",
                            macroData: {
                              declarable: __node(
                                23,
                                37,
                                1455,
                                __node(
                                  23,
                                  31,
                                  1455,
                                  { isMutable: "mutable", ident: __wrap(index) },
                                  true
                                ),
                                true
                              ),
                              value: __node(23, 16, 1455, {
                                macroName: "if",
                                macroData: {
                                  test: __node(23, 10, 1455, {
                                    left: __wrap(start),
                                    inverted: false,
                                    op: "~>=",
                                    right: __node(12, 0)
                                  }),
                                  body: __wrap(start),
                                  elseIfs: [],
                                  elseBody: __node(23, 66, 1455, { left: __wrap(start), inverted: false, op: "+", right: __wrap(length) })
                                }
                              })
                            }
                          },
                          true
                        )))
                      : (init.push(__node(
                        23,
                        38,
                        1457,
                        {
                          macroName: "let",
                          macroData: {
                            declarable: __node(
                              23,
                              37,
                              1457,
                              __node(
                                23,
                                31,
                                1457,
                                { isMutable: "mutable", ident: __wrap(index) },
                                true
                              ),
                              true
                            ),
                            value: __wrap(start)
                          }
                        },
                        true
                      )), init.push(__node(
                        23,
                        16,
                        1458,
                        {
                          macroName: "if",
                          macroData: {
                            test: __node(
                              23,
                              9,
                              1458,
                              {
                                left: __wrap(index),
                                inverted: false,
                                op: "~<",
                                right: __node(12, 0)
                              },
                              true
                            ),
                            body: __node(23, 103, 1458, { left: __wrap(index), op: "+=", right: __wrap(length) }),
                            elseIfs: [
                              {
                                test: __node(
                                  23,
                                  9,
                                  1458,
                                  {
                                    left: __wrap(step),
                                    inverted: false,
                                    op: "~<",
                                    right: __node(12, 0)
                                  },
                                  true
                                ),
                                body: __node(23, 86, 1458, { left: __wrap(index), op: "~min=", right: __wrap(length) })
                              }
                            ]
                          }
                        },
                        true
                      ))), tmp = this.tmp("end", false, "number"), this.isConst(end)
                      ? init.push(__node(
                        23,
                        38,
                        1461,
                        {
                          macroName: "let",
                          macroData: {
                            declarable: __node(
                              23,
                              37,
                              1461,
                              __node(
                                23,
                                31,
                                1461,
                                { isMutable: "mutable", ident: __wrap(tmp) },
                                true
                              ),
                              true
                            ),
                            value: __node(23, 16, 1461, {
                              macroName: "if",
                              macroData: {
                                test: __node(23, 9, 1461, {
                                  left: __wrap(end),
                                  inverted: false,
                                  op: "~<",
                                  right: __node(12, 0)
                                }),
                                body: __node(23, 49, 1461, { left: __wrap(end), inverted: false, op: "~+", right: __wrap(length) }),
                                elseIfs: [],
                                elseBody: __node(23, 83, 1461, {
                                  left: __wrap(end),
                                  inverted: false,
                                  op: "max",
                                  right: __node(23, 16, 1461, {
                                    macroName: "if",
                                    macroData: {
                                      test: __wrap(inclusive),
                                      body: __node(23, 49, 1461, {
                                        left: __wrap(length),
                                        inverted: false,
                                        op: "~-",
                                        right: __node(12, 1)
                                      }),
                                      elseIfs: [],
                                      elseBody: __wrap(length)
                                    }
                                  })
                                })
                              }
                            })
                          }
                        },
                        true
                      ))
                      : (init.push(__node(
                        23,
                        38,
                        1463,
                        {
                          macroName: "let",
                          macroData: {
                            declarable: __node(
                              23,
                              37,
                              1463,
                              __node(
                                23,
                                31,
                                1463,
                                { isMutable: "mutable", ident: __wrap(tmp) },
                                true
                              ),
                              true
                            ),
                            value: __node(23, 60, 1463, { op: "+", node: __wrap(end) })
                          }
                        },
                        true
                      )), init.push(__node(
                        23,
                        16,
                        1464,
                        {
                          macroName: "if",
                          macroData: {
                            test: __node(
                              23,
                              9,
                              1464,
                              {
                                left: __wrap(tmp),
                                inverted: false,
                                op: "~<",
                                right: __node(12, 0)
                              },
                              true
                            ),
                            body: __node(23, 103, 1464, { left: __wrap(tmp), op: "+=", right: __wrap(length) }),
                            elseIfs: [
                              {
                                test: __node(
                                  23,
                                  10,
                                  1464,
                                  {
                                    left: __wrap(step),
                                    inverted: false,
                                    op: "~>",
                                    right: __node(12, 0)
                                  },
                                  true
                                ),
                                body: __node(23, 86, 1464, {
                                  left: __wrap(tmp),
                                  op: "~min=",
                                  right: __node(23, 16, 1464, {
                                    macroName: "if",
                                    macroData: {
                                      test: __wrap(inclusive),
                                      body: __node(23, 49, 1464, {
                                        left: __wrap(length),
                                        inverted: false,
                                        op: "~-",
                                        right: __node(12, 1)
                                      }),
                                      elseIfs: [],
                                      elseBody: __wrap(length)
                                    }
                                  })
                                })
                              }
                            ],
                            elseBody: __node(23, 87, 1464, {
                              left: __wrap(tmp),
                              op: "~max=",
                              right: __node(23, 16, 1464, {
                                macroName: "if",
                                macroData: {
                                  test: __wrap(inclusive),
                                  body: __node(12, 0),
                                  elseIfs: [],
                                  elseBody: __node(23, 61, 1464, {
                                    op: "-",
                                    node: __node(12, 1)
                                  })
                                }
                              })
                            })
                          }
                        },
                        true
                      ))), end = tmp, [
                      __node(23, 17, 1467, {
                        macroName: "if",
                        macroData: {
                          test: __node(23, 10, 1467, {
                            left: __wrap(step),
                            inverted: false,
                            op: "~>",
                            right: __node(12, 0)
                          }),
                          body: __node(
                            23,
                            16,
                            1468,
                            {
                              macroName: "if",
                              macroData: {
                                test: __wrap(inclusive),
                                body: __node(23, 9, 1468, { left: __wrap(index), inverted: false, op: "~<=", right: __wrap(end) }),
                                elseIfs: [],
                                elseBody: __node(23, 9, 1468, { left: __wrap(index), inverted: false, op: "~<", right: __wrap(end) })
                              }
                            },
                            true
                          ),
                          elseIfs: [],
                          elseBody: __node(
                            23,
                            16,
                            1470,
                            {
                              macroName: "if",
                              macroData: {
                                test: __wrap(inclusive),
                                body: __node(23, 10, 1470, { left: __wrap(index), inverted: false, op: "~>=", right: __wrap(end) }),
                                elseIfs: [],
                                elseBody: __node(23, 9, 1470, { left: __wrap(index), inverted: false, op: "~<", right: __wrap(end) })
                              }
                            },
                            true
                          )
                        }
                      }),
                      __node(23, 52, 1471, { left: __wrap(index), op: "~+=", right: __wrap(step) })
                    ]));
                test = _ref[0];
                increment = _ref[1];
                if (this.hasFunc(body)) {
                  func = this.tmp("f", false, "function");
                  if (value && valueIdent !== value.ident) {
                    body = __node(7, [
                      __node(
                        23,
                        38,
                        1478,
                        {
                          macroName: "let",
                          macroData: {
                            declarable: __node(
                              23,
                              37,
                              1478,
                              __node(
                                23,
                                31,
                                1478,
                                { ident: __wrap(value) },
                                true
                              ),
                              true
                            ),
                            value: __wrap(valueIdent)
                          }
                        },
                        true
                      ),
                      __wrap(body)
                    ]);
                  }
                  if (hasIndex) {
                    init.push(__node(
                      23,
                      38,
                      1481,
                      {
                        macroName: "let",
                        macroData: {
                          declarable: __node(
                            23,
                            37,
                            1481,
                            __node(
                              23,
                              31,
                              1481,
                              { ident: __wrap(func) },
                              true
                            ),
                            true
                          ),
                          value: __node(
                            20,
                            [
                              __node(27, __wrap(valueIdent)),
                              __node(27, __wrap(index))
                            ],
                            __wrap(body),
                            true
                          )
                        }
                      },
                      true
                    ));
                    body = __node(
                      9,
                      __wrap(func),
                      [__node(38), __wrap(valueExpr), __wrap(index)],
                      false,
                      true
                    );
                  } else {
                    init.push(__node(
                      23,
                      38,
                      1484,
                      {
                        macroName: "let",
                        macroData: {
                          declarable: __node(
                            23,
                            37,
                            1484,
                            __node(
                              23,
                              31,
                              1484,
                              { ident: __wrap(func) },
                              true
                            ),
                            true
                          ),
                          value: __node(
                            20,
                            [__node(27, __wrap(valueIdent))],
                            __wrap(body),
                            true
                          )
                        }
                      },
                      true
                    ));
                    body = __node(
                      9,
                      __wrap(func),
                      [__node(38), __wrap(valueExpr)],
                      false,
                      true
                    );
                  }
                } else if (valueIdent === value.ident || reducer !== "filter") {
                  body = __node(7, [
                    __node(
                      23,
                      38,
                      1488,
                      {
                        macroName: "let",
                        macroData: {
                          declarable: __node(
                            23,
                            37,
                            1488,
                            __node(
                              23,
                              31,
                              1488,
                              { ident: __wrap(value) },
                              true
                            ),
                            true
                          ),
                          value: __wrap(valueExpr)
                        }
                      },
                      true
                    ),
                    __wrap(body)
                  ]);
                } else {
                  body = __node(7, [
                    __node(
                      23,
                      38,
                      1492,
                      {
                        macroName: "let",
                        macroData: {
                          declarable: __node(
                            23,
                            37,
                            1492,
                            __node(
                              23,
                              31,
                              1492,
                              { ident: __wrap(valueIdent) },
                              true
                            ),
                            true
                          ),
                          value: __wrap(valueExpr)
                        }
                      },
                      true
                    ),
                    __node(
                      23,
                      38,
                      1493,
                      {
                        macroName: "let",
                        macroData: {
                          declarable: __node(
                            23,
                            37,
                            1493,
                            __node(
                              23,
                              31,
                              1493,
                              { ident: __wrap(value) },
                              true
                            ),
                            true
                          ),
                          value: __wrap(valueIdent)
                        }
                      },
                      true
                    ),
                    __wrap(body)
                  ]);
                }
                if (reducer === "every") {
                  return __node(23, 106, 1497, {
                    macroName: "for",
                    macroData: {
                      reducer: "every",
                      init: __wrap(init),
                      test: __wrap(test),
                      step: __wrap(increment),
                      body: __wrap(body),
                      elseBody: __wrap(elseBody)
                    }
                  });
                } else if (reducer === "some") {
                  return __node(23, 106, 1502, {
                    macroName: "for",
                    macroData: {
                      reducer: "some",
                      init: __wrap(init),
                      test: __wrap(test),
                      step: __wrap(increment),
                      body: __wrap(body),
                      elseBody: __wrap(elseBody)
                    }
                  });
                } else if (reducer === "first") {
                  return __node(23, 106, 1507, {
                    macroName: "for",
                    macroData: {
                      reducer: "first",
                      init: __wrap(init),
                      test: __wrap(test),
                      step: __wrap(increment),
                      body: __wrap(body),
                      elseBody: __wrap(elseBody)
                    }
                  });
                } else if (reducer === "filter") {
                  body = this.mutateLast(body, function (node) {
                    return __node(
                      23,
                      17,
                      1513,
                      {
                        macroName: "if",
                        macroData: { test: __wrap(node), body: __wrap(valueIdent), elseIfs: [] }
                      },
                      true
                    );
                  });
                  return __node(23, 106, 1515, {
                    macroName: "for",
                    macroData: {
                      init: __wrap(init),
                      test: __wrap(test),
                      step: __wrap(increment),
                      body: __wrap(body),
                      elseBody: __wrap(elseBody)
                    }
                  });
                } else if (this.position === "expression") {
                  return __node(23, 106, 1520, {
                    macroName: "for",
                    macroData: {
                      init: __wrap(init),
                      test: __wrap(test),
                      step: __wrap(increment),
                      body: __wrap(body),
                      elseBody: __wrap(elseBody)
                    }
                  });
                } else {
                  return __node(
                    23,
                    106,
                    1526,
                    {
                      macroName: "for",
                      macroData: {
                        init: __wrap(init),
                        test: __wrap(test),
                        step: __wrap(increment),
                        body: __wrap(body),
                        elseBody: __wrap(elseBody)
                      }
                    },
                    true
                  );
                }
              }
            
            }
          }.call(this),
            options: void 0,
            params: [
              [
                "ident",
                "reducer",
                "many",
                "?",
                "choice",
                ["const", "every"],
                ["const", "some"],
                ["const", "first"],
                ["const", "filter"]
              ],
              ["ident", "value", "ident", "Declarable"],
              [
                "ident",
                "index",
                "many",
                "?",
                "sequence",
                ["const", ","],
                ["ident", "value", "ident", "Identifier"],
                [
                  "ident",
                  "length",
                  "many",
                  "?",
                  "sequence",
                  ["const", ","],
                  ["this", "ident", "Identifier"]
                ]
              ],
              ["const", "in"],
              ["ident", "array", "ident", "Logic"],
              [
                "ident",
                "body",
                "choice",
                ["ident", "BodyNoEnd"],
                [
                  "sequence",
                  ["const", ";"],
                  ["this", "ident", "Statement"]
                ]
              ],
              [
                "ident",
                "elseBody",
                "many",
                "?",
                "sequence",
                [
                  "const",
                  "\n"
                ],
                ["const", "else"],
                [
                  "this",
                  "choice",
                  ["ident", "BodyNoEnd"],
                  [
                    "sequence",
                    ["const", ";"],
                    ["this", "ident", "Statement"]
                  ]
                ]
              ],
              ["const", "end"]
            ],
            names: "for",
            id: 113
          },
          {
            code: function (macroFullData, __wrap, __node, __const) {
              var array, body, current, currentStart, index, length, macroData, macroName,
                  value;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              value = macroData.value;
              index = macroData.index;
              array = macroData.array;
              current = macroData.current;
              currentStart = macroData.currentStart;
              body = macroData.body;
              value = this.macroExpand1(value);
              body = this.mutateLast(body || this.noop(), function (node) {
                return __node(23, 30, 1533, { left: __wrap(current), op: ":=", right: __wrap(node) });
              });
              if (index != null) {
                length = index.length;
              }
              if (index != null) {
                index = index.value;
              } else {
                index = void 0;
              }
              return __node(7, [
                __node(
                  23,
                  38,
                  1537,
                  {
                    macroName: "let",
                    macroData: {
                      declarable: __node(
                        23,
                        37,
                        1537,
                        __node(
                          23,
                          31,
                          1537,
                          { isMutable: "mutable", ident: __wrap(current) },
                          true
                        ),
                        true
                      ),
                      value: __wrap(currentStart)
                    }
                  },
                  true
                ),
                __node(
                  23,
                  113,
                  1538,
                  {
                    macroName: "for",
                    macroData: {
                      value: __node(
                        23,
                        37,
                        1538,
                        __node(
                          23,
                          31,
                          1538,
                          { ident: __wrap(value) },
                          true
                        ),
                        true
                      ),
                      index: { value: __wrap(index), length: __wrap(length) },
                      array: __wrap(array),
                      body: __wrap(body)
                    }
                  },
                  true
                ),
                __wrap(current)
              ]);
            },
            options: void 0,
            params: [
              ["const", "reduce"],
              ["ident", "value", "ident", "Declarable"],
              [
                "ident",
                "index",
                "many",
                "?",
                "sequence",
                ["const", ","],
                ["ident", "value", "ident", "Identifier"],
                [
                  "ident",
                  "length",
                  "many",
                  "?",
                  "sequence",
                  ["const", ","],
                  ["this", "ident", "Identifier"]
                ]
              ],
              ["const", "in"],
              ["ident", "array", "ident", "Logic"],
              ["const", ","],
              ["ident", "current", "ident", "Identifier"],
              ["const", "="],
              ["ident", "currentStart"],
              [
                "ident",
                "body",
                "choice",
                ["ident", "Body"],
                [
                  "sequence",
                  ["const", ";"],
                  ["this", "ident", "Statement"]
                ]
              ]
            ],
            names: "for",
            id: 114
          },
          {
            code: function() {
            var __strnum, __typeof;
            __strnum = function (strnum) {
              var type;
              type = typeof strnum;
              if (type === "string") {
                return strnum;
              } else if (type === "number") {
                return String(strnum);
              } else {
                throw TypeError("Expected a string or number, got " + __typeof(strnum));
              }
            };
            __typeof = (function () {
              var _toString;
              _toString = Object.prototype.toString;
              return function (o) {
                if (o === void 0) {
                  return "Undefined";
                } else if (o === null) {
                  return "Null";
                } else {
                  return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
                }
              };
            }());
            return function (macroFullData, __wrap, __node, __const) {
              var arr, body, elseBody, func, index, init, key, letIndex, letValue, loop,
                  macroData, macroName, object, own, post, reducer, runElse, type, value,
                  valueIdent;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              reducer = macroData.reducer;
              key = macroData.key;
              value = macroData.value;
              type = macroData.type;
              object = macroData.object;
              body = macroData.body;
              elseBody = macroData.elseBody;
              index = null;
              if (value) {
                index = value.index;
                value = this.macroExpand1(value.value);
              }
              own = type === "of";
              init = [];
              if (own || value) {
                object = this.cache(object, init, "obj", false);
              }
              this["let"](key, false, this.type("string"));
              letValue = value && this.macroExpandAll(__node(
                23,
                38,
                1554,
                {
                  macroName: "let",
                  macroData: {
                    declarable: __node(
                      23,
                      37,
                      1554,
                      __node(
                        23,
                        31,
                        1554,
                        { ident: __wrap(value) },
                        true
                      ),
                      true
                    ),
                    value: __node(1, __wrap(object), __wrap(key))
                  }
                },
                true
              ));
              letIndex = index && this.macroExpandAll(__node(
                23,
                38,
                1555,
                {
                  macroName: "let",
                  macroData: {
                    declarable: __node(
                      23,
                      37,
                      1555,
                      __node(
                        23,
                        31,
                        1555,
                        { isMutable: "mutable", ident: __wrap(index) },
                        true
                      ),
                      true
                    ),
                    value: __node(23, 61, 1555, {
                      op: "-",
                      node: __node(12, 1)
                    })
                  }
                },
                true
              ));
              if (this.hasFunc(body)) {
                func = this.tmp("f", false, "function");
                if (value) {
                  if (value.type === "ident") {
                    valueIdent = value.ident;
                  } else {
                    valueIdent = this.tmp("v", false);
                  }
                }
                if (value && valueIdent !== value.ident) {
                  body = __node(7, [
                    __node(
                      23,
                      38,
                      1561,
                      {
                        macroName: "let",
                        macroData: {
                          declarable: __node(
                            23,
                            37,
                            1561,
                            __node(
                              23,
                              31,
                              1561,
                              { ident: __wrap(value) },
                              true
                            ),
                            true
                          ),
                          value: __wrap(valueIdent)
                        }
                      },
                      true
                    ),
                    __wrap(body)
                  ]);
                }
                if (index) {
                  init.push(__node(
                    23,
                    38,
                    1564,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __node(
                          23,
                          37,
                          1564,
                          __node(
                            23,
                            31,
                            1564,
                            { ident: __wrap(func) },
                            true
                          ),
                          true
                        ),
                        value: __node(
                          20,
                          [
                            __node(27, __wrap(key)),
                            __node(27, __wrap(valueIdent)),
                            __node(27, __wrap(index))
                          ],
                          __wrap(body),
                          true
                        )
                      }
                    },
                    true
                  ));
                  body = __node(
                    9,
                    __wrap(func),
                    [
                      __node(38),
                      __wrap(key),
                      __node(1, __wrap(object), __wrap(key)),
                      __wrap(index)
                    ],
                    false,
                    true
                  );
                } else if (value) {
                  init.push(__node(
                    23,
                    38,
                    1567,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __node(
                          23,
                          37,
                          1567,
                          __node(
                            23,
                            31,
                            1567,
                            { ident: __wrap(func) },
                            true
                          ),
                          true
                        ),
                        value: __node(
                          20,
                          [
                            __node(27, __wrap(key)),
                            __node(27, __wrap(valueIdent))
                          ],
                          __wrap(body),
                          true
                        )
                      }
                    },
                    true
                  ));
                  body = __node(
                    9,
                    __wrap(func),
                    [
                      __node(38),
                      __wrap(key),
                      __node(1, __wrap(object), __wrap(key))
                    ],
                    false,
                    true
                  );
                } else {
                  init.push(__node(
                    23,
                    38,
                    1570,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __node(
                          23,
                          37,
                          1570,
                          __node(
                            23,
                            31,
                            1570,
                            { ident: __wrap(func) },
                            true
                          ),
                          true
                        ),
                        value: __node(
                          20,
                          [__node(27, __wrap(key))],
                          __wrap(body),
                          true
                        )
                      }
                    },
                    true
                  ));
                  body = __node(
                    9,
                    __wrap(func),
                    [__node(38), __wrap(key)],
                    false,
                    true
                  );
                }
              } else if (value) {
                body = __node(7, [__wrap(letValue), __wrap(body)]);
              }
              post = [];
              if (elseBody) {
                runElse = this.tmp("else", false, "boolean");
                init.push(__node(
                  23,
                  38,
                  1580,
                  {
                    macroName: "let",
                    macroData: {
                      declarable: __node(
                        23,
                        37,
                        1580,
                        __node(
                          23,
                          31,
                          1580,
                          { ident: __wrap(runElse) },
                          true
                        ),
                        true
                      ),
                      value: __const("true")
                    }
                  },
                  true
                ));
                body = __node(7, [
                  __node(
                    23,
                    30,
                    1582,
                    { left: __wrap(runElse), op: ":=", right: __const("false") },
                    true
                  ),
                  __wrap(body)
                ]);
                post.push(__node(
                  23,
                  17,
                  1585,
                  {
                    macroName: "if",
                    macroData: { test: __wrap(runElse), body: __wrap(elseBody), elseIfs: [] }
                  },
                  true
                ));
              }
              if (index) {
                init.push(letIndex);
                body = __node(7, [
                  __node(
                    23,
                    52,
                    1591,
                    {
                      left: __wrap(index),
                      op: "~+=",
                      right: __node(12, 1)
                    },
                    true
                  ),
                  __wrap(body)
                ]);
              }
              if (own) {
                body = __node(
                  23,
                  17,
                  1596,
                  {
                    macroName: "if",
                    macroData: {
                      test: __node(
                        23,
                        73,
                        1596,
                        { left: __wrap(object), inverted: false, op: "ownskey", right: __wrap(key) },
                        true
                      ),
                      body: __wrap(body),
                      elseIfs: []
                    }
                  },
                  true
                );
              }
              if (reducer) {
                if (reducer === "first") {
                  body = this.mutateLast(body || this.noop(), function (node) {
                    return __node(
                      23,
                      39,
                      1601,
                      { macroName: "return", macroData: { node: __wrap(node) } },
                      true
                    );
                  });
                  loop = this.forIn(key, object, body);
                  return __node(
                    23,
                    0,
                    1603,
                    {
                      macroName: "do",
                      macroData: {
                        body: __node(7, [__wrap(init), __wrap(loop), __wrap(elseBody)])
                      }
                    },
                    true
                  );
                } else {
                  if (elseBody) {
                    this.error("Cannot use a for loop with an else with " + __strnum(reducer), elseBody);
                  }
                  if (reducer === "some") {
                    body = this.mutateLast(body || this.noop(), function (node) {
                      return __node(
                        23,
                        17,
                        1612,
                        {
                          macroName: "if",
                          macroData: {
                            test: __wrap(node),
                            body: __node(
                              23,
                              39,
                              1613,
                              { macroName: "return", macroData: { node: __const("true") } },
                              true
                            ),
                            elseIfs: []
                          }
                        },
                        true
                      );
                    });
                    loop = this.forIn(key, object, body);
                    return __node(
                      23,
                      0,
                      1615,
                      {
                        macroName: "do",
                        macroData: {
                          body: __node(7, [__wrap(init), __wrap(loop), __const("false")])
                        }
                      },
                      true
                    );
                  } else if (reducer === "every") {
                    body = this.mutateLast(body || this.noop(), function (node) {
                      return __node(
                        23,
                        17,
                        1621,
                        {
                          macroName: "if",
                          macroData: {
                            test: __node(
                              23,
                              3,
                              1621,
                              { op: "not", node: __wrap(node) },
                              true
                            ),
                            body: __node(
                              23,
                              39,
                              1622,
                              { macroName: "return", macroData: { node: __const("false") } },
                              true
                            ),
                            elseIfs: []
                          }
                        },
                        true
                      );
                    });
                    loop = this.forIn(key, object, body);
                    return __node(
                      23,
                      0,
                      1624,
                      {
                        macroName: "do",
                        macroData: {
                          body: __node(7, [__wrap(init), __wrap(loop), __const("true")])
                        }
                      },
                      true
                    );
                  } else {
                    return this.error("Unknown reducer: " + __strnum(reducer));
                  }
                }
              } else if (this.position === "expression") {
                if (elseBody) {
                  this.error(
                    "Cannot use a for loop with an else as an expression",
                    elseBody
                  );
                }
                arr = this.tmp("arr", false, this.type(body).array());
                body = this.mutateLast(body || this.noop(), function (node) {
                  return __node(
                    9,
                    __node(1, __wrap(arr), __node(12, "push")),
                    [__wrap(node)]
                  );
                });
                init.unshift(__node(
                  23,
                  38,
                  1635,
                  {
                    macroName: "let",
                    macroData: {
                      declarable: __node(
                        23,
                        37,
                        1635,
                        __node(
                          23,
                          31,
                          1635,
                          { ident: __wrap(arr) },
                          true
                        ),
                        true
                      ),
                      value: __node(4)
                    }
                  },
                  true
                ));
                loop = this.forIn(key, object, body);
                return __node(7, [__wrap(init), __wrap(loop), __wrap(arr)]);
              } else {
                loop = this.forIn(key, object, body);
                return __node(7, [__wrap(init), __wrap(loop), __wrap(post)]);
              }
            
            }
          }.call(this),
            options: void 0,
            params: [
              [
                "ident",
                "reducer",
                "many",
                "?",
                "choice",
                ["const", "every"],
                ["const", "some"],
                ["const", "first"]
              ],
              ["ident", "key", "ident", "Identifier"],
              [
                "ident",
                "value",
                "many",
                "?",
                "sequence",
                ["const", ","],
                ["ident", "value", "ident", "Declarable"],
                [
                  "ident",
                  "index",
                  "many",
                  "?",
                  "sequence",
                  ["const", ","],
                  ["this", "ident", "Identifier"]
                ]
              ],
              [
                "ident",
                "type",
                "choice",
                ["const", "of"],
                ["const", "ofall"]
              ],
              ["ident", "object", "ident", "Logic"],
              [
                "ident",
                "body",
                "choice",
                ["ident", "BodyNoEnd"],
                [
                  "sequence",
                  ["const", ";"],
                  ["this", "ident", "Statement"]
                ]
              ],
              [
                "ident",
                "elseBody",
                "many",
                "?",
                "sequence",
                [
                  "const",
                  "\n"
                ],
                ["const", "else"],
                [
                  "this",
                  "choice",
                  ["ident", "BodyNoEnd"],
                  [
                    "sequence",
                    ["const", ";"],
                    ["this", "ident", "Statement"]
                  ]
                ]
              ],
              ["const", "end"]
            ],
            names: "for",
            id: 115
          },
          {
            code: function (macroFullData, __wrap, __node, __const) {
              var body, current, currentStart, index, key, loop, macroData, macroName,
                  object, type, value;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              key = macroData.key;
              value = macroData.value;
              type = macroData.type;
              object = macroData.object;
              current = macroData.current;
              currentStart = macroData.currentStart;
              body = macroData.body;
              body = this.mutateLast(body || this.noop(), function (node) {
                return __node(23, 30, 1649, { left: __wrap(current), op: ":=", right: __wrap(node) });
              });
              if (value != null) {
                index = value.index;
              }
              if (value != null) {
                value = value.value;
              } else {
                value = void 0;
              }
              if (type === "of") {
                loop = __node(
                  23,
                  115,
                  1653,
                  {
                    macroName: "for",
                    macroData: {
                      key: __wrap(key),
                      value: {
                        value: __node(
                          23,
                          37,
                          1653,
                          __node(
                            23,
                            31,
                            1653,
                            { ident: __wrap(value) },
                            true
                          ),
                          true
                        ),
                        index: __wrap(index)
                      },
                      type: "of",
                      object: __wrap(object),
                      body: __wrap(body)
                    }
                  },
                  true
                );
              } else {
                loop = __node(
                  23,
                  115,
                  1656,
                  {
                    macroName: "for",
                    macroData: {
                      key: __wrap(key),
                      value: {
                        value: __node(
                          23,
                          37,
                          1656,
                          __node(
                            23,
                            31,
                            1656,
                            { ident: __wrap(value) },
                            true
                          ),
                          true
                        ),
                        index: __wrap(index)
                      },
                      type: "ofall",
                      object: __wrap(object),
                      body: __wrap(body)
                    }
                  },
                  true
                );
              }
              return __node(7, [
                __node(
                  23,
                  38,
                  1659,
                  {
                    macroName: "let",
                    macroData: {
                      declarable: __node(
                        23,
                        37,
                        1659,
                        __node(
                          23,
                          31,
                          1659,
                          { isMutable: "mutable", ident: __wrap(current) },
                          true
                        ),
                        true
                      ),
                      value: __wrap(currentStart)
                    }
                  },
                  true
                ),
                __wrap(loop),
                __wrap(current)
              ]);
            },
            options: void 0,
            params: [
              ["const", "reduce"],
              ["ident", "key", "ident", "Identifier"],
              [
                "ident",
                "value",
                "many",
                "?",
                "sequence",
                ["const", ","],
                ["ident", "value", "ident", "Declarable"],
                [
                  "ident",
                  "index",
                  "many",
                  "?",
                  "sequence",
                  ["const", ","],
                  ["this", "ident", "Identifier"]
                ]
              ],
              [
                "ident",
                "type",
                "choice",
                ["const", "of"],
                ["const", "ofall"]
              ],
              ["ident", "object", "ident", "Logic"],
              ["const", ","],
              ["ident", "current", "ident", "Identifier"],
              ["const", "="],
              ["ident", "currentStart"],
              [
                "ident",
                "body",
                "choice",
                ["ident", "Body"],
                [
                  "sequence",
                  ["const", ";"],
                  ["this", "ident", "Statement"]
                ]
              ]
            ],
            names: "for",
            id: 116
          },
          {
            code: function() {
            var __isArray, __slice, __toArray, __typeof;
            __isArray = typeof Array.isArray === "function" ? Array.isArray
              : (function () {
                var _toString;
                _toString = Object.prototype.toString;
                return function (x) {
                  return _toString.call(x) === "[object Array]";
                };
              }());
            __slice = Array.prototype.slice;
            __toArray = function (x) {
              if (x == null) {
                throw TypeError("Expected an object, got " + __typeof(x));
              } else if (__isArray(x)) {
                return x;
              } else if (typeof x === "string") {
                return x.split("");
              } else if (typeof x.length === "number") {
                return __slice.call(x);
              } else {
                throw TypeError("Expected an object with a length property, got " + __typeof(x));
              }
            };
            __typeof = (function () {
              var _toString;
              _toString = Object.prototype.toString;
              return function (o) {
                if (o === void 0) {
                  return "Undefined";
                } else if (o === null) {
                  return "Null";
                } else {
                  return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
                }
              };
            }());
            return function (macroFullData, __wrap, __node, __const) {
              var _arr, _f, _i, catchBody, catchIdent, catchPart, current, elseBody,
                  finallyBody, hasElse, init, macroData, macroName, runElse, tryBody,
                  typedCatches;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              tryBody = macroData.tryBody;
              typedCatches = macroData.typedCatches;
              catchPart = macroData.catchPart;
              elseBody = macroData.elseBody;
              finallyBody = macroData.finallyBody;
              hasElse = !!elseBody;
              if (typedCatches.length === 0 && !catchPart && !hasElse && !finallyBody) {
                this.error("Must provide at least a catch, else, or finally to a try block");
              }
              if (catchPart != null) {
                catchIdent = catchPart.ident;
              }
              if (catchPart != null) {
                catchBody = catchPart.body;
              }
              if (typedCatches.length !== 0) {
                if (!catchIdent) {
                  catchIdent = typedCatches[0].ident;
                }
                current = catchBody || __node(
                  23,
                  11,
                  2081,
                  { op: "throw", node: __wrap(catchIdent) },
                  true
                );
                for (_arr = __toArray(typedCatches), _i = _arr.length, _f = function (typeCatch) {
                  var _this, letErr, typeIdent, types, value;
                  _this = this;
                  typeIdent = typeCatch.ident;
                  if (this.name(typeIdent) !== this.name(catchIdent)) {
                    letErr = __node(
                      23,
                      38,
                      2084,
                      {
                        macroName: "let",
                        macroData: {
                          declarable: __node(
                            23,
                            37,
                            2084,
                            __node(
                              23,
                              31,
                              2084,
                              { ident: __wrap(typeIdent) },
                              true
                            ),
                            true
                          ),
                          value: __wrap(catchIdent)
                        }
                      },
                      true
                    );
                  } else {
                    letErr = this.noop();
                  }
                  if (typeCatch.check.type === "as") {
                    types = this.array((function () {
                      var _arr, _arr2, _i, _len, type;
                      for (_arr = [], _arr2 = __toArray(_this.isTypeUnion(typeCatch.check.value) ? _this.types(typeCatch.check.value) : [typeCatch.check.value]), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                        type = _arr2[_i];
                        if (_this.isTypeArray(type)) {
                          _this.error("Expected a normal type, cannot use an array type", type);
                        } else if (_this.isTypeGeneric(type)) {
                          _this.error("Expected a normal type, cannot use a generic type", type);
                        } else if (_this.isTypeFunction(type)) {
                          _this.error("Expected a normal type, cannot use a function type", type);
                        } else if (_this.isTypeObject(type)) {
                          _this.error("Expected a normal type, cannot use an object type", type);
                        }
                        _arr.push(type);
                      }
                      return _arr;
                    }()));
                    return current = __node(
                      23,
                      17,
                      2099,
                      {
                        macroName: "if",
                        macroData: {
                          test: __node(
                            23,
                            118,
                            2099,
                            { left: __wrap(catchIdent), inverted: false, op: "instanceofsome", right: __wrap(types) },
                            true
                          ),
                          body: __node(7, [__wrap(letErr), __wrap(typeCatch.body)]),
                          elseIfs: [],
                          elseBody: __wrap(current)
                        }
                      },
                      true
                    );
                  } else {
                    value = typeCatch.check.value;
                    return current = __node(
                      23,
                      17,
                      2107,
                      {
                        macroName: "if",
                        macroData: {
                          test: __node(
                            23,
                            5,
                            2107,
                            { left: __wrap(catchIdent), inverted: false, op: "==", right: __wrap(value) },
                            true
                          ),
                          body: __node(7, [__wrap(letErr), __wrap(typeCatch.body)]),
                          elseIfs: [],
                          elseBody: __wrap(current)
                        }
                      },
                      true
                    );
                  }
                }; _i--; ) {
                  _f.call(this, _arr[_i]);
                }
                catchBody = current;
              }
              init = [];
              runElse = void 0;
              if (hasElse) {
                runElse = this.tmp("else", false, "boolean");
                init.push(__node(
                  23,
                  38,
                  2116,
                  {
                    macroName: "let",
                    macroData: {
                      declarable: __node(
                        23,
                        37,
                        2116,
                        __node(
                          23,
                          31,
                          2116,
                          { ident: __wrap(runElse) },
                          true
                        ),
                        true
                      ),
                      value: __const("true")
                    }
                  },
                  true
                ));
                if (catchBody) {
                  catchBody = __node(7, [
                    __node(
                      23,
                      30,
                      2119,
                      { left: __wrap(runElse), op: ":=", right: __const("false") },
                      true
                    ),
                    __wrap(catchBody)
                  ]);
                } else {
                  catchIdent = this.tmp("err");
                  catchBody = __node(7, [
                    __node(
                      23,
                      30,
                      2124,
                      { left: __wrap(runElse), op: ":=", right: __const("false") },
                      true
                    ),
                    __node(
                      23,
                      11,
                      2125,
                      { op: "throw", node: __wrap(catchIdent) },
                      true
                    )
                  ]);
                }
              }
              current = tryBody;
              if (catchBody) {
                current = this.tryCatch(current, catchIdent || this.tmp("err"), catchBody);
              }
              if (hasElse) {
                current = this.tryFinally(current, __node(
                  23,
                  17,
                  2132,
                  {
                    macroName: "if",
                    macroData: { test: __wrap(runElse), body: __wrap(elseBody), elseIfs: [] }
                  },
                  true
                ));
              }
              if (finallyBody) {
                current = this.tryFinally(current, finallyBody);
              }
              return __node(7, [__wrap(init), __wrap(current)]);
            
            }
          }.call(this),
            options: void 0,
            params: [
              [
                "ident",
                "tryBody",
                "choice",
                ["ident", "BodyNoEnd"],
                [
                  "sequence",
                  ["const", ";"],
                  ["this", "ident", "Statement"]
                ]
              ],
              [
                "ident",
                "typedCatches",
                "many",
                "*",
                "sequence",
                [
                  "const",
                  "\n"
                ],
                ["const", "catch"],
                ["ident", "ident", "ident", "Identifier"],
                [
                  "ident",
                  "check",
                  "choice",
                  [
                    "sequence",
                    ["ident", "type", "const", "as"],
                    ["ident", "value", "ident", "Type"]
                  ],
                  [
                    "sequence",
                    ["ident", "type", "const", "=="],
                    ["ident", "value", "ident", "Expression"]
                  ]
                ],
                [
                  "ident",
                  "body",
                  "choice",
                  ["ident", "BodyNoEnd"],
                  [
                    "sequence",
                    ["const", ";"],
                    ["this", "ident", "Statement"]
                  ]
                ]
              ],
              [
                "ident",
                "catchPart",
                "many",
                "?",
                "sequence",
                [
                  "const",
                  "\n"
                ],
                ["const", "catch"],
                [
                  "ident",
                  "ident",
                  "many",
                  "?",
                  "ident",
                  "Identifier"
                ],
                [
                  "ident",
                  "body",
                  "choice",
                  ["ident", "BodyNoEnd"],
                  [
                    "sequence",
                    ["const", ";"],
                    ["this", "ident", "Statement"]
                  ]
                ]
              ],
              [
                "ident",
                "elseBody",
                "many",
                "?",
                "sequence",
                [
                  "const",
                  "\n"
                ],
                ["const", "else"],
                [
                  "this",
                  "choice",
                  ["ident", "BodyNoEnd"],
                  [
                    "sequence",
                    ["const", ";"],
                    ["this", "ident", "Statement"]
                  ]
                ]
              ],
              [
                "ident",
                "finallyBody",
                "many",
                "?",
                "sequence",
                [
                  "const",
                  "\n"
                ],
                ["const", "finally"],
                [
                  "this",
                  "choice",
                  ["ident", "BodyNoEnd"],
                  [
                    "sequence",
                    ["const", ";"],
                    ["this", "ident", "Statement"]
                  ]
                ]
              ],
              ["const", "end"]
            ],
            names: "try",
            id: 119
          },
          {
            code: function (macroFullData, __wrap, __node, __const) {
              var body, captureValue, elseBody, err, func, index, init, item, iterable,
                  iterator, macroData, macroName, main, post, reducer, runElse, step,
                  value;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              reducer = macroData.reducer;
              value = macroData.value;
              index = macroData.index;
              iterable = macroData.iterable;
              body = macroData.body;
              elseBody = macroData.elseBody;
              init = [];
              iterator = this.cache(
                __node(
                  9,
                  __node(21, "__iter"),
                  [__wrap(iterable)]
                ),
                init,
                "iter",
                false
              );
              item = this.tmp("item", false);
              err = this.tmp("e", true);
              step = [];
              if (index) {
                init.push(__node(
                  23,
                  38,
                  2180,
                  {
                    macroName: "let",
                    macroData: {
                      declarable: __node(
                        23,
                        37,
                        2180,
                        __node(
                          23,
                          31,
                          2180,
                          { isMutable: "mutable", ident: __wrap(index) },
                          true
                        ),
                        true
                      ),
                      value: __node(12, 0)
                    }
                  },
                  true
                ));
                step.push(__node(23, 52, 2181, {
                  left: __wrap(index),
                  op: "~+=",
                  right: __node(12, 1)
                }));
              }
              captureValue = __node(7, [
                __node(
                  23,
                  38,
                  2184,
                  {
                    macroName: "let",
                    macroData: {
                      declarable: __node(
                        23,
                        37,
                        2184,
                        __node(
                          23,
                          31,
                          2184,
                          { ident: __wrap(item) },
                          true
                        ),
                        true
                      ),
                      value: __node(9, __node(1, __wrap(iterator), __node(12, "next")))
                    }
                  },
                  true
                ),
                __node(
                  23,
                  17,
                  2185,
                  {
                    macroName: "if",
                    macroData: {
                      test: __node(1, __wrap(item), __node(12, "done")),
                      body: __node(
                        23,
                        19,
                        2186,
                        { macroName: "break", macroData: {} },
                        true
                      ),
                      elseIfs: []
                    }
                  },
                  true
                ),
                __node(
                  23,
                  38,
                  2187,
                  {
                    macroName: "let",
                    macroData: {
                      declarable: __node(
                        23,
                        37,
                        2187,
                        __node(
                          23,
                          31,
                          2187,
                          { ident: __wrap(value) },
                          true
                        ),
                        true
                      ),
                      value: __node(1, __wrap(item), __node(12, "value"))
                    }
                  },
                  true
                )
              ]);
              post = [];
              if (elseBody && !reducer && this.position !== "expression") {
                runElse = this.tmp("else", false, "boolean");
                init.push(__node(
                  23,
                  38,
                  2192,
                  {
                    macroName: "let",
                    macroData: {
                      declarable: __node(
                        23,
                        37,
                        2192,
                        __node(
                          23,
                          31,
                          2192,
                          { ident: __wrap(runElse) },
                          true
                        ),
                        true
                      ),
                      value: __const("true")
                    }
                  },
                  true
                ));
                body = __node(7, [
                  __node(
                    23,
                    30,
                    2194,
                    { left: __wrap(runElse), op: ":=", right: __const("false") },
                    true
                  ),
                  __wrap(body)
                ]);
                post.push(__node(
                  23,
                  17,
                  2197,
                  {
                    macroName: "if",
                    macroData: { test: __wrap(runElse), body: __wrap(elseBody), elseIfs: [] }
                  },
                  true
                ));
              }
              if (this.hasFunc(body)) {
                func = this.tmp("f", false, "function");
                if (!index) {
                  init.push(__node(
                    23,
                    38,
                    2203,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __node(
                          23,
                          37,
                          2203,
                          __node(
                            23,
                            31,
                            2203,
                            { ident: __wrap(func) },
                            true
                          ),
                          true
                        ),
                        value: __node(23, 117, 2203, {
                          op: "",
                          node: __node(
                            20,
                            [__node(27, __wrap(value))],
                            __wrap(body),
                            true
                          )
                        })
                      }
                    },
                    true
                  ));
                  body = __node(7, [
                    __wrap(captureValue),
                    __node(
                      9,
                      __wrap(func),
                      [__node(38), __wrap(value)],
                      false,
                      true
                    )
                  ]);
                } else {
                  init.push(__node(
                    23,
                    38,
                    2208,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __node(
                          23,
                          37,
                          2208,
                          __node(
                            23,
                            31,
                            2208,
                            { ident: __wrap(func) },
                            true
                          ),
                          true
                        ),
                        value: __node(23, 117, 2208, {
                          op: "",
                          node: __node(
                            20,
                            [
                              __node(27, __wrap(value)),
                              __node(27, __wrap(index))
                            ],
                            __wrap(body),
                            true
                          )
                        })
                      }
                    },
                    true
                  ));
                  body = __node(7, [
                    __wrap(captureValue),
                    __node(
                      9,
                      __wrap(func),
                      [__node(38), __wrap(value), __wrap(index)],
                      false,
                      true
                    )
                  ]);
                }
              } else {
                body = __node(7, [__wrap(captureValue), __wrap(body)]);
              }
              if (reducer === "every") {
                main = __node(23, 106, 2218, {
                  macroName: "for",
                  macroData: {
                    reducer: "every",
                    init: __wrap(init),
                    test: __const("true"),
                    step: __wrap(step),
                    body: __wrap(body),
                    elseBody: __wrap(elseBody)
                  }
                });
              } else if (reducer === "some") {
                main = __node(23, 106, 2223, {
                  macroName: "for",
                  macroData: {
                    reducer: "some",
                    init: __wrap(init),
                    test: __const("true"),
                    step: __wrap(step),
                    body: __wrap(body),
                    elseBody: __wrap(elseBody)
                  }
                });
              } else if (reducer === "first") {
                main = __node(23, 106, 2228, {
                  macroName: "for",
                  macroData: {
                    reducer: "first",
                    init: __wrap(init),
                    test: __const("true"),
                    step: __wrap(step),
                    body: __wrap(body),
                    elseBody: __wrap(elseBody)
                  }
                });
              } else if (reducer === "filter") {
                body = this.mutateLast(body, function (node) {
                  return __node(
                    23,
                    17,
                    2234,
                    {
                      macroName: "if",
                      macroData: { test: __wrap(node), body: __wrap(value), elseIfs: [] }
                    },
                    true
                  );
                });
                main = __node(23, 106, 2236, {
                  macroName: "for",
                  macroData: {
                    init: __wrap(init),
                    test: __const("true"),
                    step: __wrap(step),
                    body: __wrap(body),
                    elseBody: __wrap(elseBody)
                  }
                });
              } else if (this.position === "expression") {
                main = __node(23, 106, 2241, {
                  macroName: "for",
                  macroData: {
                    init: __wrap(init),
                    test: __const("true"),
                    step: __wrap(step),
                    body: __wrap(body),
                    elseBody: __wrap(elseBody)
                  }
                });
              } else {
                main = __node(7, [
                  __node(
                    23,
                    106,
                    2247,
                    {
                      macroName: "for",
                      macroData: { init: __wrap(init), test: __const("true"), step: __wrap(step), body: __wrap(body) }
                    },
                    true
                  ),
                  __wrap(post)
                ]);
              }
              return __node(
                23,
                119,
                2251,
                {
                  macroName: "try",
                  macroData: {
                    tryBody: __wrap(main),
                    typedCatches: [],
                    finallyBody: __node(
                      23,
                      119,
                      2254,
                      {
                        macroName: "try",
                        macroData: {
                          tryBody: __node(9, __node(1, __wrap(iterator), __node(12, "close"))),
                          typedCatches: [],
                          catchPart: { ident: __wrap(err), body: __const("void") }
                        }
                      },
                      true
                    )
                  }
                },
                true
              );
            },
            options: void 0,
            params: [
              [
                "ident",
                "reducer",
                "many",
                "?",
                "choice",
                ["const", "every"],
                ["const", "some"],
                ["const", "first"],
                ["const", "filter"]
              ],
              ["ident", "value", "ident", "Identifier"],
              [
                "ident",
                "index",
                "many",
                "?",
                "sequence",
                ["const", ","],
                ["this", "ident", "Identifier"]
              ],
              ["const", "from"],
              ["ident", "iterable", "ident", "Logic"],
              [
                "ident",
                "body",
                "choice",
                ["ident", "BodyNoEnd"],
                [
                  "sequence",
                  ["const", ";"],
                  ["this", "ident", "Statement"]
                ]
              ],
              [
                "ident",
                "elseBody",
                "many",
                "?",
                "sequence",
                [
                  "const",
                  "\n"
                ],
                ["const", "else"],
                [
                  "this",
                  "choice",
                  ["ident", "BodyNoEnd"],
                  [
                    "sequence",
                    ["const", ";"],
                    ["this", "ident", "Statement"]
                  ]
                ]
              ],
              ["const", "end"]
            ],
            names: "for",
            id: 120
          },
          {
            code: function (macroFullData, __wrap, __node, __const) {
              var body, current, currentStart, index, iterator, macroData, macroName,
                  value;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              value = macroData.value;
              index = macroData.index;
              iterator = macroData.iterator;
              current = macroData.current;
              currentStart = macroData.currentStart;
              body = macroData.body;
              body = this.mutateLast(body || this.noop(), function (node) {
                return __node(23, 30, 2260, { left: __wrap(current), op: ":=", right: __wrap(node) });
              });
              return __node(7, [
                __node(
                  23,
                  38,
                  2262,
                  {
                    macroName: "let",
                    macroData: {
                      declarable: __node(
                        23,
                        37,
                        2262,
                        __node(
                          23,
                          31,
                          2262,
                          { isMutable: "mutable", ident: __wrap(current) },
                          true
                        ),
                        true
                      ),
                      value: __wrap(currentStart)
                    }
                  },
                  true
                ),
                __node(
                  23,
                  120,
                  2263,
                  {
                    macroName: "for",
                    macroData: { value: __wrap(value), index: __wrap(index), iterable: __wrap(iterator), body: __wrap(body) }
                  },
                  true
                ),
                __wrap(current)
              ]);
            },
            options: void 0,
            params: [
              ["const", "reduce"],
              ["ident", "value", "ident", "Identifier"],
              [
                "ident",
                "index",
                "many",
                "?",
                "sequence",
                ["const", ","],
                ["this", "ident", "Identifier"]
              ],
              ["const", "from"],
              ["ident", "iterator", "ident", "Logic"],
              ["const", ","],
              ["ident", "current", "ident", "Identifier"],
              ["const", "="],
              ["ident", "currentStart"],
              [
                "ident",
                "body",
                "choice",
                ["ident", "Body"],
                [
                  "sequence",
                  ["const", ";"],
                  ["this", "ident", "Statement"]
                ]
              ]
            ],
            names: "for",
            id: 121
          },
          {
            code: function() {
            var __isArray, __num, __slice, __toArray, __typeof;
            __isArray = typeof Array.isArray === "function" ? Array.isArray
              : (function () {
                var _toString;
                _toString = Object.prototype.toString;
                return function (x) {
                  return _toString.call(x) === "[object Array]";
                };
              }());
            __num = function (num) {
              if (typeof num !== "number") {
                throw TypeError("Expected a number, got " + __typeof(num));
              } else {
                return num;
              }
            };
            __slice = Array.prototype.slice;
            __toArray = function (x) {
              if (x == null) {
                throw TypeError("Expected an object, got " + __typeof(x));
              } else if (__isArray(x)) {
                return x;
              } else if (typeof x === "string") {
                return x.split("");
              } else if (typeof x.length === "number") {
                return __slice.call(x);
              } else {
                throw TypeError("Expected an object with a length property, got " + __typeof(x));
              }
            };
            __typeof = (function () {
              var _toString;
              _toString = Object.prototype.toString;
              return function (o) {
                if (o === void 0) {
                  return "Undefined";
                } else if (o === null) {
                  return "Null";
                } else {
                  return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
                }
              };
            }());
            return function (macroFullData, __wrap, __node, __const) {
              var _arr, _arr2, _i, _i2, _len, _len2, body, case_, caseNode, caseNodes,
                  cases, defaultCase, isFallthrough, lastNode, macroData, macroName, node,
                  nodes, resultCases;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              node = macroData.node;
              cases = macroData.cases;
              defaultCase = macroData.defaultCase;
              resultCases = [];
              for (_arr = __toArray(cases), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                case_ = _arr[_i];
                caseNodes = [case_.nodeHead].concat(case_.nodeTail);
                body = case_.body;
                isFallthrough = false;
                if (this.isBlock(body)) {
                  nodes = this.nodes(body);
                  lastNode = nodes[__num(nodes.length) - 1];
                  if (this.isIdent(lastNode) && this.name(lastNode) === "fallthrough") {
                    body = this.block(nodes.slice(0, -1));
                    isFallthrough = true;
                  }
                } else if (this.isIdent(body) && this.name(body) === "fallthrough") {
                  body = this.noop();
                  isFallthrough = true;
                }
                for (_arr2 = __toArray(caseNodes.slice(0, -1)), _i2 = 0, _len2 = _arr2.length; _i2 < _len2; ++_i2) {
                  caseNode = _arr2[_i2];
                  resultCases.push({ node: caseNode, body: this.noop(), fallthrough: true });
                }
                resultCases.push({ node: caseNodes[__num(caseNodes.length) - 1], body: body, fallthrough: isFallthrough });
              }
              return this["switch"](node, resultCases, defaultCase || __node(
                23,
                11,
                2293,
                {
                  op: "throw",
                  node: __node(
                    9,
                    __node(21, "Error"),
                    [__node(12, "Unhandled value in switch")]
                  )
                },
                true
              ));
            
            }
          }.call(this),
            options: void 0,
            params: [
              ["ident", "node", "ident", "Logic"],
              [
                "ident",
                "cases",
                "many",
                "*",
                "sequence",
                [
                  "const",
                  "\n"
                ],
                ["const", "case"],
                ["ident", "nodeHead", "ident", "Logic"],
                [
                  "ident",
                  "nodeTail",
                  "many",
                  "*",
                  "sequence",
                  ["const", ","],
                  ["this", "ident", "Logic"]
                ],
                [
                  "ident",
                  "body",
                  "many",
                  "?",
                  "choice",
                  ["ident", "BodyNoEnd"],
                  [
                    "sequence",
                    ["const", ";"],
                    ["this", "ident", "Statement"]
                  ]
                ]
              ],
              [
                "ident",
                "defaultCase",
                "many",
                "?",
                "sequence",
                [
                  "const",
                  "\n"
                ],
                ["const", "default"],
                [
                  "this",
                  "many",
                  "?",
                  "choice",
                  ["ident", "BodyNoEnd"],
                  [
                    "sequence",
                    ["const", ";"],
                    ["this", "ident", "Statement"]
                  ]
                ]
              ],
              ["const", "end"]
            ],
            names: "switch",
            id: 122
          },
          {
            code: function() {
            var __isArray, __num, __slice, __toArray, __typeof;
            __isArray = typeof Array.isArray === "function" ? Array.isArray
              : (function () {
                var _toString;
                _toString = Object.prototype.toString;
                return function (x) {
                  return _toString.call(x) === "[object Array]";
                };
              }());
            __num = function (num) {
              if (typeof num !== "number") {
                throw TypeError("Expected a number, got " + __typeof(num));
              } else {
                return num;
              }
            };
            __slice = Array.prototype.slice;
            __toArray = function (x) {
              if (x == null) {
                throw TypeError("Expected an object, got " + __typeof(x));
              } else if (__isArray(x)) {
                return x;
              } else if (typeof x === "string") {
                return x.split("");
              } else if (typeof x.length === "number") {
                return __slice.call(x);
              } else {
                throw TypeError("Expected an object with a length property, got " + __typeof(x));
              }
            };
            __typeof = (function () {
              var _toString;
              _toString = Object.prototype.toString;
              return function (o) {
                if (o === void 0) {
                  return "Undefined";
                } else if (o === null) {
                  return "Null";
                } else {
                  return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
                }
              };
            }());
            return function (macroFullData, __wrap, __node, __const) {
              var _arr, _i, body, case_, cases, current, defaultCase, fall, isFallthrough,
                  lastNode, macroData, macroName, nodes, result, test;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              cases = macroData.cases;
              defaultCase = macroData.defaultCase;
              current = defaultCase || __node(
                23,
                11,
                2296,
                {
                  op: "throw",
                  node: __node(
                    9,
                    __node(21, "Error"),
                    [__node(12, "Unhandled value in switch")]
                  )
                },
                true
              );
              for (_arr = __toArray(cases), _i = _arr.length; _i--; ) {
                case_ = _arr[_i];
                test = case_.test;
                body = case_.body;
                isFallthrough = false;
                result = void 0;
                if (this.isBlock(body)) {
                  nodes = this.nodes(body);
                  lastNode = nodes[__num(nodes.length) - 1];
                  if (this.isIdent(lastNode) && this.name(lastNode) === "fallthrough") {
                    body = this.block(nodes.slice(0, -1));
                    if (this.isIf(current)) {
                      fall = this.tmp("fall", false, "boolean");
                      result = __node(7, [
                        __node(
                          23,
                          38,
                          2309,
                          {
                            macroName: "let",
                            macroData: {
                              declarable: __node(
                                23,
                                37,
                                2309,
                                __node(
                                  23,
                                  31,
                                  2309,
                                  { isMutable: "mutable", ident: __wrap(fall) },
                                  true
                                ),
                                true
                              ),
                              value: __const("false")
                            }
                          },
                          true
                        ),
                        __node(
                          23,
                          17,
                          2310,
                          {
                            macroName: "if",
                            macroData: {
                              test: __wrap(test),
                              body: __node(7, [
                                __node(
                                  23,
                                  30,
                                  2311,
                                  { left: __wrap(fall), op: ":=", right: __const("true") },
                                  true
                                ),
                                __wrap(body)
                              ]),
                              elseIfs: []
                            }
                          },
                          true
                        ),
                        __node(
                          23,
                          17,
                          2313,
                          {
                            macroName: "if",
                            macroData: {
                              test: __node(
                                23,
                                2,
                                2313,
                                { left: __wrap(fall), inverted: false, op: "or", right: __wrap(this.test(current)) },
                                true
                              ),
                              body: __wrap(this.whenTrue(current)),
                              elseIfs: [],
                              elseBody: __wrap(this.whenFalse(current))
                            }
                          },
                          true
                        )
                      ]);
                    } else {
                      result = __node(7, [
                        __node(
                          23,
                          17,
                          2319,
                          {
                            macroName: "if",
                            macroData: { test: __wrap(test), body: __wrap(body), elseIfs: [] }
                          },
                          true
                        ),
                        __wrap(current)
                      ]);
                    }
                  }
                } else if (this.isIdent(body) && this.name(body) === "fallthrough") {
                  if (this.isIf(current)) {
                    result = __node(
                      23,
                      17,
                      2324,
                      {
                        macroName: "if",
                        macroData: {
                          test: __node(
                            23,
                            2,
                            2324,
                            { left: __wrap(test), inverted: false, op: "or", right: __wrap(this.test(current)) },
                            true
                          ),
                          body: __wrap(this.whenTrue(current)),
                          elseIfs: [],
                          elseBody: __wrap(this.whenFalse(current))
                        }
                      },
                      true
                    );
                  } else {
                    result = __node(7, [__wrap(test), __wrap(current)]);
                  }
                }
                current = result || __node(
                  23,
                  17,
                  2333,
                  {
                    macroName: "if",
                    macroData: { test: __wrap(case_.test), body: __wrap(body), elseIfs: [], elseBody: __wrap(current) }
                  },
                  true
                );
              }
              return current;
            
            }
          }.call(this),
            options: void 0,
            params: [
              [
                "ident",
                "cases",
                "many",
                "*",
                "sequence",
                [
                  "const",
                  "\n"
                ],
                ["const", "case"],
                ["ident", "test", "ident", "Logic"],
                [
                  "ident",
                  "body",
                  "many",
                  "?",
                  "choice",
                  ["ident", "BodyNoEnd"],
                  [
                    "sequence",
                    ["const", ";"],
                    ["this", "ident", "Statement"]
                  ]
                ]
              ],
              [
                "ident",
                "defaultCase",
                "many",
                "?",
                "sequence",
                [
                  "const",
                  "\n"
                ],
                ["const", "default"],
                [
                  "this",
                  "many",
                  "?",
                  "choice",
                  ["ident", "BodyNoEnd"],
                  [
                    "sequence",
                    ["const", ";"],
                    ["this", "ident", "Statement"]
                  ]
                ]
              ],
              ["const", "end"]
            ],
            names: "switch",
            id: 123
          },
          {
            code: function (macroFullData, __wrap, __node, __const) {
              var body, call, func, macroData, macroName, params;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              params = macroData.params;
              call = macroData.call;
              body = macroData.body;
              if (!this.isCall(call)) {
                this.error("async call expression must be a call", call);
              }
              if (body == null) {
                body = this.noop();
              }
              if (params) {
                params = [params.head].concat(params.tail);
              } else {
                params = [];
              }
              func = this.func(params, body, true, true);
              return this.call(
                this.callFunc(call),
                this.callArgs(call).concat([
                  __node(23, 126, 2449, {
                    macroName: "once!",
                    macroData: [
                      __node(23, 117, 2449, { op: "mutateFunction!", node: __wrap(func) })
                    ]
                  })
                ]),
                this.callIsNew(call),
                this.callIsApply(call)
              );
            },
            options: void 0,
            params: [
              [
                "ident",
                "params",
                "many",
                "?",
                "sequence",
                ["ident", "head", "ident", "Parameter"],
                [
                  "ident",
                  "tail",
                  "many",
                  "*",
                  "sequence",
                  ["const", ","],
                  ["this", "ident", "Parameter"]
                ]
              ],
              ["const", "<-"],
              ["ident", "call", "ident", "Expression"],
              ["ident", "body", "ident", "DedentedBody"]
            ],
            names: "async",
            id: 127
          },
          {
            code: function (macroFullData, __wrap, __node, __const) {
              var body, call, callback, error, func, macroData, macroName, params;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              callback = macroData.callback;
              params = macroData.params;
              call = macroData.call;
              body = macroData.body;
              if (!this.isCall(call)) {
                this.error("async! call expression must be a call", call);
              }
              if (body == null) {
                body = this.noop();
              }
              error = this.tmp("e", false);
              params = [this.param(error)].concat(params);
              func = this.func(
                params,
                callback === "throw"
                  ? __node(7, [
                    __node(
                      23,
                      102,
                      2463,
                      { op: "throw?", node: __wrap(error) },
                      true
                    ),
                    __wrap(body)
                  ])
                  : __node(7, [
                    __node(
                      23,
                      17,
                      2467,
                      {
                        macroName: "if",
                        macroData: {
                          test: __node(
                            23,
                            20,
                            2467,
                            { op: "?", node: __wrap(error) },
                            true
                          ),
                          body: __node(
                            23,
                            39,
                            2468,
                            {
                              macroName: "return",
                              macroData: { node: __node(9, __wrap(callback), [__wrap(error)]) }
                            },
                            true
                          ),
                          elseIfs: []
                        }
                      },
                      true
                    ),
                    __wrap(body)
                  ]),
                true,
                true
              );
              return this.call(
                this.callFunc(call),
                this.callArgs(call).concat([
                  __node(23, 126, 2472, {
                    macroName: "once!",
                    macroData: [
                      __node(23, 117, 2472, { op: "mutateFunction!", node: __wrap(func) })
                    ]
                  })
                ]),
                this.callIsNew(call),
                this.callIsApply(call)
              );
            },
            options: void 0,
            params: [
              [
                "ident",
                "callback",
                "choice",
                ["const", "throw"],
                ["ident", "Expression"]
              ],
              [
                "ident",
                "params",
                "many",
                "*",
                "sequence",
                ["const", ","],
                ["this", "ident", "Parameter"]
              ],
              ["const", "<-"],
              ["ident", "call", "ident", "Expression"],
              ["ident", "body", "ident", "DedentedBody"]
            ],
            names: "async!",
            id: 128
          },
          {
            code: function() {
            var __isArray, __num, __slice, __toArray, __typeof;
            __isArray = typeof Array.isArray === "function" ? Array.isArray
              : (function () {
                var _toString;
                _toString = Object.prototype.toString;
                return function (x) {
                  return _toString.call(x) === "[object Array]";
                };
              }());
            __num = function (num) {
              if (typeof num !== "number") {
                throw TypeError("Expected a number, got " + __typeof(num));
              } else {
                return num;
              }
            };
            __slice = Array.prototype.slice;
            __toArray = function (x) {
              if (x == null) {
                throw TypeError("Expected an object, got " + __typeof(x));
              } else if (__isArray(x)) {
                return x;
              } else if (typeof x === "string") {
                return x.split("");
              } else if (typeof x.length === "number") {
                return __slice.call(x);
              } else {
                throw TypeError("Expected an object with a length property, got " + __typeof(x));
              }
            };
            __typeof = (function () {
              var _toString;
              _toString = Object.prototype.toString;
              return function (o) {
                if (o === void 0) {
                  return "Undefined";
                } else if (o === null) {
                  return "Null";
                } else {
                  return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
                }
              };
            }());
            return function (macroFullData, __wrap, __node, __const) {
              var _arr, _i, _len, ident, identName, key, macroData, macroName, name, obj,
                  path, requires, value;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              name = macroData.name;
              if (this.isConst(name) && typeof this.value(name) !== "string") {
                this.error("Expected a constant string, got " + __typeof(this.value(name)), name);
              }
              if (this.isConst(name)) {
                identName = this.value(name);
                if (identName.indexOf("/") !== -1) {
                  identName = identName.substring(__num(identName.lastIndexOf("/")) + 1);
                }
                ident = this.ident(identName);
                return __node(
                  23,
                  38,
                  2485,
                  {
                    macroName: "let",
                    macroData: {
                      declarable: __node(
                        23,
                        37,
                        2485,
                        __node(
                          23,
                          31,
                          2485,
                          { ident: __wrap(ident) },
                          true
                        ),
                        true
                      ),
                      value: __node(
                        9,
                        __node(21, "require"),
                        [__wrap(name)]
                      )
                    }
                  },
                  true
                );
              } else if (this.isIdent(name)) {
                path = this.name(name);
                return __node(
                  23,
                  38,
                  2488,
                  {
                    macroName: "let",
                    macroData: {
                      declarable: __node(
                        23,
                        37,
                        2488,
                        __node(
                          23,
                          31,
                          2488,
                          { ident: __wrap(name) },
                          true
                        ),
                        true
                      ),
                      value: __node(
                        9,
                        __node(21, "require"),
                        [__wrap(path)]
                      )
                    }
                  },
                  true
                );
              } else if (this.isObject(name)) {
                requires = [];
                for (_arr = __toArray(this.pairs(name)), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                  obj = _arr[_i];
                  key = obj.key;
                  value = obj.value;
                  if (!this.isConst(key)) {
                    this.error(
                      "If providing an object to require!, all keys must be constant strings",
                      key
                    );
                  }
                  identName = this.value(key);
                  if (identName.indexOf("/") !== -1) {
                    identName = identName.substring(__num(identName.lastIndexOf("/")) + 1);
                  }
                  ident = this.ident(identName);
                  if (this.isConst(value)) {
                    requires.push(__node(
                      23,
                      38,
                      2500,
                      {
                        macroName: "let",
                        macroData: {
                          declarable: __node(
                            23,
                            37,
                            2500,
                            __node(
                              23,
                              31,
                              2500,
                              { ident: __wrap(ident) },
                              true
                            ),
                            true
                          ),
                          value: __node(
                            9,
                            __node(21, "require"),
                            [__wrap(value)]
                          )
                        }
                      },
                      true
                    ));
                  } else if (this.isIdent(value)) {
                    path = this.name(value);
                    requires.push(__node(
                      23,
                      38,
                      2503,
                      {
                        macroName: "let",
                        macroData: {
                          declarable: __node(
                            23,
                            37,
                            2503,
                            __node(
                              23,
                              31,
                              2503,
                              { ident: __wrap(ident) },
                              true
                            ),
                            true
                          ),
                          value: __node(
                            9,
                            __node(21, "require"),
                            [__wrap(path)]
                          )
                        }
                      },
                      true
                    ));
                  } else {
                    this.error(
                      "If providing an object to require!, all values must be constant strings or idents",
                      value
                    );
                  }
                }
                return this.block(requires);
              } else {
                return this.error(
                  "Expected either a constant string or ident or object",
                  name
                );
              }
            
            }
          }.call(this),
            options: void 0,
            params: [["ident", "name", "ident", "Expression"]],
            names: "require!",
            id: 129
          },
          {
            code: function (macroFullData, __wrap, __node, __const) {
              var _ref, arr, body, done, err, first, init, macroData, macroName, next,
                  rest, result, results, step, test, value;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              results = macroData.results;
              next = macroData.next;
              init = macroData.init;
              test = macroData.test;
              step = macroData.step;
              body = macroData.body;
              rest = macroData.rest;
              _ref = results != null ? results : {};
              err = _ref.err;
              result = _ref.result;
              if (err == null) {
                err = this.tmp("err", true);
              }
              if (init == null) {
                init = this.noop();
              }
              if (test == null) {
                test = __const("true");
              }
              if (step == null) {
                step = this.noop();
              }
              if (rest == null) {
                rest = this.noop();
              }
              done = this.tmp("done", true, "function");
              if (!result) {
                if (!step) {
                  return __node(7, [
                    __wrap(init),
                    __node(
                      23,
                      15,
                      2614,
                      {
                        macroName: "let",
                        macroData: {
                          ident: __wrap(next),
                          func: __node(
                            23,
                            117,
                            2614,
                            {
                              op: "",
                              node: __node(
                                20,
                                [__node(27, __wrap(err))],
                                __node(7, [
                                  __node(
                                    23,
                                    17,
                                    2615,
                                    {
                                      macroName: "if",
                                      macroData: {
                                        test: __node(
                                          23,
                                          20,
                                          2615,
                                          { op: "?", node: __wrap(err) },
                                          true
                                        ),
                                        body: __node(
                                          23,
                                          39,
                                          2616,
                                          {
                                            macroName: "return",
                                            macroData: { node: __node(9, __wrap(done), [__wrap(err)]) }
                                          },
                                          true
                                        ),
                                        elseIfs: []
                                      }
                                    },
                                    true
                                  ),
                                  __node(
                                    23,
                                    17,
                                    2617,
                                    {
                                      macroName: "unless",
                                      macroData: {
                                        test: __wrap(test),
                                        body: __node(
                                          23,
                                          39,
                                          2618,
                                          {
                                            macroName: "return",
                                            macroData: { node: __node(9, __wrap(done), [__const("null")]) }
                                          },
                                          true
                                        ),
                                        elseIfs: []
                                      }
                                    },
                                    true
                                  ),
                                  __wrap(body)
                                ]),
                                true,
                                true
                              )
                            },
                            true
                          )
                        }
                      },
                      true
                    ),
                    __node(
                      23,
                      15,
                      2620,
                      {
                        macroName: "let",
                        macroData: {
                          ident: __wrap(done),
                          func: __node(
                            23,
                            117,
                            2620,
                            {
                              op: "",
                              node: __node(
                                20,
                                [__node(27, __wrap(err))],
                                __wrap(rest),
                                true,
                                true
                              )
                            },
                            true
                          )
                        }
                      },
                      true
                    ),
                    __node(9, __wrap(next))
                  ]);
                } else {
                  first = this.tmp("first", true, "boolean");
                  return __node(7, [
                    __wrap(init),
                    __node(
                      23,
                      38,
                      2627,
                      {
                        macroName: "let",
                        macroData: {
                          declarable: __node(
                            23,
                            37,
                            2627,
                            __node(
                              23,
                              31,
                              2627,
                              { ident: __wrap(first) },
                              true
                            ),
                            true
                          ),
                          value: __const("true")
                        }
                      },
                      true
                    ),
                    __node(
                      23,
                      15,
                      2628,
                      {
                        macroName: "let",
                        macroData: {
                          ident: __wrap(next),
                          func: __node(
                            23,
                            117,
                            2628,
                            {
                              op: "",
                              node: __node(
                                20,
                                [__node(27, __wrap(err))],
                                __node(7, [
                                  __node(
                                    23,
                                    17,
                                    2629,
                                    {
                                      macroName: "if",
                                      macroData: {
                                        test: __node(
                                          23,
                                          20,
                                          2629,
                                          { op: "?", node: __wrap(err) },
                                          true
                                        ),
                                        body: __node(
                                          23,
                                          39,
                                          2630,
                                          {
                                            macroName: "return",
                                            macroData: { node: __node(9, __wrap(done), [__wrap(err)]) }
                                          },
                                          true
                                        ),
                                        elseIfs: []
                                      }
                                    },
                                    true
                                  ),
                                  __node(
                                    23,
                                    17,
                                    2631,
                                    {
                                      macroName: "if",
                                      macroData: {
                                        test: __wrap(first),
                                        body: __node(
                                          23,
                                          30,
                                          2632,
                                          { left: __wrap(first), op: ":=", right: __const("false") },
                                          true
                                        ),
                                        elseIfs: [],
                                        elseBody: __wrap(step)
                                      }
                                    },
                                    true
                                  ),
                                  __node(
                                    23,
                                    17,
                                    2635,
                                    {
                                      macroName: "unless",
                                      macroData: {
                                        test: __wrap(test),
                                        body: __node(
                                          23,
                                          39,
                                          2636,
                                          {
                                            macroName: "return",
                                            macroData: { node: __node(9, __wrap(done), [__const("null")]) }
                                          },
                                          true
                                        ),
                                        elseIfs: []
                                      }
                                    },
                                    true
                                  ),
                                  __wrap(body)
                                ]),
                                true,
                                true
                              )
                            },
                            true
                          )
                        }
                      },
                      true
                    ),
                    __node(
                      23,
                      15,
                      2638,
                      {
                        macroName: "let",
                        macroData: {
                          ident: __wrap(done),
                          func: __node(
                            23,
                            117,
                            2638,
                            {
                              op: "",
                              node: __node(
                                20,
                                [__node(27, __wrap(err))],
                                __wrap(rest),
                                true,
                                true
                              )
                            },
                            true
                          )
                        }
                      },
                      true
                    ),
                    __node(9, __wrap(next))
                  ]);
                }
              } else {
                first = this.tmp("first", true, "boolean");
                value = this.tmp("value", true);
                arr = this.tmp("arr", true);
                return __node(7, [
                  __wrap(init),
                  __node(
                    23,
                    38,
                    2647,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __node(
                          23,
                          37,
                          2647,
                          __node(
                            23,
                            31,
                            2647,
                            { ident: __wrap(first) },
                            true
                          ),
                          true
                        ),
                        value: __const("true")
                      }
                    },
                    true
                  ),
                  __node(
                    23,
                    38,
                    2648,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __node(
                          23,
                          37,
                          2648,
                          __node(
                            23,
                            31,
                            2648,
                            { ident: __wrap(arr) },
                            true
                          ),
                          true
                        ),
                        value: __node(4)
                      }
                    },
                    true
                  ),
                  __node(
                    23,
                    15,
                    2649,
                    {
                      macroName: "let",
                      macroData: {
                        ident: __wrap(next),
                        func: __node(
                          23,
                          117,
                          2649,
                          {
                            op: "",
                            node: __node(
                              20,
                              [
                                __node(27, __wrap(err)),
                                __node(27, __wrap(value))
                              ],
                              __node(7, [
                                __node(
                                  23,
                                  17,
                                  2650,
                                  {
                                    macroName: "if",
                                    macroData: {
                                      test: __node(
                                        23,
                                        20,
                                        2650,
                                        { op: "?", node: __wrap(err) },
                                        true
                                      ),
                                      body: __node(
                                        23,
                                        39,
                                        2651,
                                        {
                                          macroName: "return",
                                          macroData: { node: __node(9, __wrap(done), [__wrap(err)]) }
                                        },
                                        true
                                      ),
                                      elseIfs: []
                                    }
                                  },
                                  true
                                ),
                                __node(
                                  23,
                                  17,
                                  2652,
                                  {
                                    macroName: "if",
                                    macroData: {
                                      test: __wrap(first),
                                      body: __node(
                                        23,
                                        30,
                                        2653,
                                        { left: __wrap(first), op: ":=", right: __const("false") },
                                        true
                                      ),
                                      elseIfs: [],
                                      elseBody: __node(7, [
                                        __wrap(step),
                                        __node(
                                          23,
                                          17,
                                          2656,
                                          {
                                            macroName: "if",
                                            macroData: {
                                              test: __node(
                                                23,
                                                10,
                                                2656,
                                                {
                                                  left: __node(1, __node(3), __node(12, "length")),
                                                  inverted: false,
                                                  op: "~>",
                                                  right: __node(12, 1)
                                                },
                                                true
                                              ),
                                              body: __node(
                                                9,
                                                __node(1, __wrap(arr), __node(12, "push")),
                                                [__wrap(value)]
                                              ),
                                              elseIfs: []
                                            }
                                          },
                                          true
                                        )
                                      ])
                                    }
                                  },
                                  true
                                ),
                                __node(
                                  23,
                                  17,
                                  2658,
                                  {
                                    macroName: "unless",
                                    macroData: {
                                      test: __wrap(test),
                                      body: __node(
                                        23,
                                        39,
                                        2659,
                                        {
                                          macroName: "return",
                                          macroData: {
                                            node: __node(9, __wrap(done), [__const("null"), __wrap(arr)])
                                          }
                                        },
                                        true
                                      ),
                                      elseIfs: []
                                    }
                                  },
                                  true
                                ),
                                __wrap(body)
                              ]),
                              true,
                              true
                            )
                          },
                          true
                        )
                      }
                    },
                    true
                  ),
                  __node(
                    23,
                    15,
                    2661,
                    {
                      macroName: "let",
                      macroData: {
                        ident: __wrap(done),
                        func: __node(
                          23,
                          117,
                          2661,
                          {
                            op: "",
                            node: __node(
                              20,
                              [
                                __node(27, __wrap(err)),
                                __node(27, __wrap(result))
                              ],
                              __wrap(rest),
                              true,
                              true
                            )
                          },
                          true
                        )
                      }
                    },
                    true
                  ),
                  __node(9, __wrap(next))
                ]);
              }
            },
            options: void 0,
            params: [
              [
                "ident",
                "results",
                "many",
                "?",
                "sequence",
                ["ident", "err", "ident", "Identifier"],
                [
                  "ident",
                  "result",
                  "many",
                  "?",
                  "sequence",
                  ["const", ","],
                  ["this", "ident", "Identifier"]
                ],
                ["const", "<-"]
              ],
              ["ident", "next", "ident", "Identifier"],
              ["const", ","],
              [
                "ident",
                "init",
                "choice",
                ["ident", "Statement"],
                ["const", ""]
              ],
              ["const", ";"],
              [
                "ident",
                "test",
                "choice",
                ["ident", "Logic"],
                ["const", ""]
              ],
              ["const", ";"],
              [
                "ident",
                "step",
                "choice",
                ["ident", "Statement"],
                ["const", ""]
              ],
              [
                "ident",
                "body",
                "choice",
                ["ident", "BodyNoEnd"],
                [
                  "sequence",
                  ["const", ";"],
                  ["this", "ident", "Statement"]
                ]
              ],
              ["const", "end"],
              ["ident", "rest", "ident", "DedentedBody"]
            ],
            names: "asyncfor",
            id: 130
          },
          {
            code: function() {
            var __strnum, __typeof;
            __strnum = function (strnum) {
              var type;
              type = typeof strnum;
              if (type === "string") {
                return strnum;
              } else if (type === "number") {
                return String(strnum);
              } else {
                throw TypeError("Expected a string or number, got " + __typeof(strnum));
              }
            };
            __typeof = (function () {
              var _toString;
              _toString = Object.prototype.toString;
              return function (o) {
                if (o === void 0) {
                  return "Undefined";
                } else if (o === null) {
                  return "Null";
                } else {
                  return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
                }
              };
            }());
            return function (macroFullData, __wrap, __node, __const) {
              var _ref, array, body, end, err, hasResult, inclusive, index, init, length,
                  lengthCalc, macroData, macroName, next, parallelism, rest, result,
                  results, start, step, value;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              parallelism = macroData.parallelism;
              results = macroData.results;
              next = macroData.next;
              value = macroData.value;
              index = macroData.index;
              array = macroData.array;
              body = macroData.body;
              rest = macroData.rest;
              _ref = results != null ? results : {};
              err = _ref.err;
              result = _ref.result;
              hasResult = !!result;
              if (err == null) {
                err = this.tmp("err", true);
              }
              init = [];
              if (rest == null) {
                rest = this.noop();
              }
              value = this.macroExpand1(value);
              length = null;
              if (index) {
                length = index.length;
                index = index.value;
              }
              if (parallelism == null) {
                parallelism = __node(12, 1);
              }
              if (index == null) {
                index = this.tmp("i", true, "number");
              }
              if (this.isCall(array) && this.isIdent(this.callFunc(array)) && this.name(this.callFunc(array)) === "__range" && !this.callIsApply(array)) {
                if (this.isArray(value) || this.isObject(value)) {
                  this.error("Cannot assign a number to a complex declarable", value);
                }
                value = value.ident;
                _ref = this.callArgs(array);
                start = _ref[0];
                end = _ref[1];
                step = _ref[2];
                inclusive = _ref[3];
                if (this.isConst(start)) {
                  if (typeof this.value(start) !== "number") {
                    this.error("Cannot start with a non-number: " + __strnum(this.value(start)), start);
                  }
                } else {
                  start = __node(23, 60, 2692, { op: "+", node: __wrap(start) });
                }
                if (this.isConst(end)) {
                  if (typeof this.value(end) !== "number") {
                    this.error("Cannot end with a non-number: " + __strnum(this.value(end)), end);
                  }
                } else if (this.isComplex(end)) {
                  end = this.cache(
                    __node(23, 60, 2698, { op: "+", node: __wrap(end) }),
                    init,
                    "end",
                    false
                  );
                } else {
                  init.push(__node(23, 60, 2700, { op: "+", node: __wrap(end) }));
                }
                if (this.isConst(step)) {
                  if (typeof this.value(step) !== "number") {
                    this.error("Cannot step with a non-number: " + __strnum(this.value(step)), step);
                  }
                } else if (this.isComplex(step)) {
                  step = this.cache(
                    __node(23, 60, 2706, { op: "+", node: __wrap(step) }),
                    init,
                    "step",
                    false
                  );
                } else {
                  init.push(__node(23, 60, 2708, { op: "+", node: __wrap(step) }));
                }
                body = __node(7, [
                  __node(
                    23,
                    38,
                    2711,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __node(
                          23,
                          37,
                          2711,
                          __node(
                            23,
                            31,
                            2711,
                            { ident: __wrap(value) },
                            true
                          ),
                          true
                        ),
                        value: __node(23, 49, 2711, {
                          left: __node(23, 45, 2711, { left: __wrap(index), inverted: false, op: "~*", right: __wrap(step) }),
                          inverted: false,
                          op: "~+",
                          right: __wrap(start)
                        })
                      }
                    },
                    true
                  ),
                  __wrap(body)
                ]);
                lengthCalc = __node(23, 17, 2714, {
                  macroName: "if",
                  macroData: {
                    test: __wrap(inclusive),
                    body: __node(
                      23,
                      45,
                      2715,
                      {
                        left: __node(23, 49, 2715, {
                          left: __node(23, 49, 2715, { left: __wrap(end), inverted: false, op: "~-", right: __wrap(start) }),
                          inverted: false,
                          op: "~+",
                          right: __wrap(step)
                        }),
                        inverted: false,
                        op: "~\\",
                        right: __wrap(step)
                      },
                      true
                    ),
                    elseIfs: [],
                    elseBody: __node(
                      23,
                      45,
                      2717,
                      {
                        left: __node(23, 49, 2717, { left: __wrap(end), inverted: false, op: "~-", right: __wrap(start) }),
                        inverted: false,
                        op: "~\\",
                        right: __wrap(step)
                      },
                      true
                    )
                  }
                });
                if (!length) {
                  length = lengthCalc;
                } else {
                  init.push(__node(
                    23,
                    38,
                    2721,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __node(
                          23,
                          37,
                          2721,
                          __node(
                            23,
                            31,
                            2721,
                            { ident: __wrap(length) },
                            true
                          ),
                          true
                        ),
                        value: __wrap(lengthCalc)
                      }
                    },
                    true
                  ));
                }
              } else {
                array = this.cache(array, init, "arr", true);
                body = __node(7, [
                  __node(
                    23,
                    38,
                    2726,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __node(
                          23,
                          37,
                          2726,
                          __node(
                            23,
                            31,
                            2726,
                            { ident: __wrap(value) },
                            true
                          ),
                          true
                        ),
                        value: __node(1, __wrap(array), __wrap(index))
                      }
                    },
                    true
                  ),
                  __wrap(body)
                ]);
                if (!length) {
                  length = __node(23, 60, 2730, {
                    op: "+",
                    node: __node(1, __wrap(array), __node(12, "length"))
                  });
                } else {
                  init.push(__node(
                    23,
                    38,
                    2732,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __node(
                          23,
                          37,
                          2732,
                          __node(
                            23,
                            31,
                            2732,
                            { ident: __wrap(length) },
                            true
                          ),
                          true
                        ),
                        value: __node(23, 60, 2732, {
                          op: "+",
                          node: __node(1, __wrap(array), __node(12, "length"))
                        })
                      }
                    },
                    true
                  ));
                }
              }
              return __node(7, [
                __wrap(init),
                __node(
                  9,
                  __node(21, "__async"),
                  [
                    __node(23, 60, 2736, { op: "+", node: __wrap(parallelism) }),
                    __wrap(length),
                    __wrap(hasResult),
                    __node(23, 117, 2737, {
                      op: "",
                      node: __node(
                        20,
                        [
                          __node(27, __wrap(index)),
                          __node(27, __wrap(next))
                        ],
                        __wrap(body),
                        true,
                        true
                      )
                    }),
                    __node(23, 17, 2738, {
                      macroName: "if",
                      macroData: {
                        test: __wrap(hasResult),
                        body: __node(
                          23,
                          117,
                          2739,
                          {
                            op: "",
                            node: __node(
                              20,
                              [
                                __node(27, __wrap(err)),
                                __node(27, __wrap(result))
                              ],
                              __wrap(rest),
                              true,
                              true
                            )
                          },
                          true
                        ),
                        elseIfs: [],
                        elseBody: __node(
                          23,
                          117,
                          2741,
                          {
                            op: "",
                            node: __node(
                              20,
                              [__node(27, __wrap(err))],
                              __wrap(rest),
                              true,
                              true
                            )
                          },
                          true
                        )
                      }
                    })
                  ]
                )
              ]);
            
            }
          }.call(this),
            options: void 0,
            params: [
              [
                "ident",
                "parallelism",
                "many",
                "?",
                "sequence",
                ["const", "("],
                ["this", "ident", "Expression"],
                ["const", ")"]
              ],
              [
                "ident",
                "results",
                "many",
                "?",
                "sequence",
                ["ident", "err", "ident", "Identifier"],
                [
                  "ident",
                  "result",
                  "many",
                  "?",
                  "sequence",
                  ["const", ","],
                  ["this", "ident", "Identifier"]
                ],
                ["const", "<-"]
              ],
              ["ident", "next", "ident", "Identifier"],
              ["const", ","],
              ["ident", "value", "ident", "Declarable"],
              [
                "ident",
                "index",
                "many",
                "?",
                "sequence",
                ["const", ","],
                ["ident", "value", "ident", "Identifier"],
                [
                  "ident",
                  "length",
                  "many",
                  "?",
                  "sequence",
                  ["const", ","],
                  ["this", "ident", "Identifier"]
                ]
              ],
              ["const", "in"],
              ["ident", "array"],
              [
                "ident",
                "body",
                "choice",
                ["ident", "BodyNoEnd"],
                [
                  "sequence",
                  ["const", ";"],
                  ["this", "ident", "Statement"]
                ]
              ],
              ["const", "end"],
              ["ident", "rest", "ident", "DedentedBody"]
            ],
            names: "asyncfor",
            id: 131
          },
          {
            code: function (macroFullData, __wrap, __node, __const) {
              var _ref, body, err, index, init, key, keys, macroData, macroName, next,
                  object, own, parallelism, rest, result, results, type, value;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              parallelism = macroData.parallelism;
              results = macroData.results;
              next = macroData.next;
              key = macroData.key;
              value = macroData.value;
              type = macroData.type;
              object = macroData.object;
              body = macroData.body;
              rest = macroData.rest;
              _ref = results != null ? results : {};
              err = _ref.err;
              result = _ref.result;
              own = type === "of";
              init = [];
              object = this.cache(object, init, "obj", true);
              if (rest == null) {
                rest = this.noop();
              }
              index = null;
              if (value) {
                index = value.index;
                value = this.macroExpand1(value.value);
              }
              if (value) {
                body = __node(7, [
                  __node(
                    23,
                    38,
                    2757,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __node(
                          23,
                          37,
                          2757,
                          __node(
                            23,
                            31,
                            2757,
                            { ident: __wrap(value) },
                            true
                          ),
                          true
                        ),
                        value: __node(1, __wrap(object), __wrap(key))
                      }
                    },
                    true
                  ),
                  __wrap(body)
                ]);
              }
              keys = this.tmp("keys", true, "stringArray");
              return __node(7, [
                __wrap(init),
                __node(
                  23,
                  38,
                  2763,
                  {
                    macroName: "let",
                    macroData: {
                      declarable: __node(
                        23,
                        37,
                        2763,
                        __node(
                          23,
                          31,
                          2763,
                          { ident: __wrap(keys) },
                          true
                        ),
                        true
                      ),
                      value: __node(23, 17, 2763, {
                        macroName: "if",
                        macroData: {
                          test: __wrap(own),
                          body: __node(
                            9,
                            __node(21, "__keys"),
                            [__wrap(object)]
                          ),
                          elseIfs: [],
                          elseBody: __node(
                            9,
                            __node(21, "__allkeys"),
                            [__wrap(object)]
                          )
                        }
                      })
                    }
                  },
                  true
                ),
                __node(
                  23,
                  131,
                  2767,
                  {
                    macroName: "asyncfor",
                    macroData: {
                      parallelism: __wrap(parallelism),
                      results: { err: __wrap(err), result: __wrap(result) },
                      next: __wrap(next),
                      value: __node(
                        23,
                        37,
                        2767,
                        __node(
                          23,
                          31,
                          2767,
                          { ident: __wrap(key) },
                          true
                        ),
                        true
                      ),
                      index: { value: __wrap(index) },
                      array: __wrap(keys),
                      body: __wrap(body),
                      rest: __wrap(rest)
                    }
                  },
                  true
                )
              ]);
            },
            options: void 0,
            params: [
              [
                "ident",
                "parallelism",
                "many",
                "?",
                "sequence",
                ["const", "("],
                ["this", "ident", "Expression"],
                ["const", ")"]
              ],
              [
                "ident",
                "results",
                "many",
                "?",
                "sequence",
                ["ident", "err", "ident", "Identifier"],
                [
                  "ident",
                  "result",
                  "many",
                  "?",
                  "sequence",
                  ["const", ","],
                  ["this", "ident", "Identifier"]
                ],
                ["const", "<-"]
              ],
              ["ident", "next", "ident", "Identifier"],
              ["const", ","],
              ["ident", "key", "ident", "Identifier"],
              [
                "ident",
                "value",
                "many",
                "?",
                "sequence",
                ["const", ","],
                ["ident", "value", "ident", "Declarable"],
                [
                  "ident",
                  "index",
                  "many",
                  "?",
                  "sequence",
                  ["const", ","],
                  ["this", "ident", "Identifier"]
                ]
              ],
              [
                "ident",
                "type",
                "choice",
                ["const", "of"],
                ["const", "ofall"]
              ],
              ["ident", "object"],
              [
                "ident",
                "body",
                "choice",
                ["ident", "BodyNoEnd"],
                [
                  "sequence",
                  ["const", ";"],
                  ["this", "ident", "Statement"]
                ]
              ],
              ["const", "end"],
              ["ident", "rest", "ident", "DedentedBody"]
            ],
            names: "asyncfor",
            id: 132
          },
          {
            code: function (macroFullData, __wrap, __node, __const) {
              var _ref, body, err, hasResult, index, iterator, macroData, macroName, next,
                  parallelism, rest, result, results, value;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              parallelism = macroData.parallelism;
              results = macroData.results;
              next = macroData.next;
              value = macroData.value;
              index = macroData.index;
              iterator = macroData.iterator;
              body = macroData.body;
              rest = macroData.rest;
              _ref = results != null ? results : {};
              err = _ref.err;
              result = _ref.result;
              hasResult = !!result;
              if (rest == null) {
                rest = this.noop();
              }
              if (index == null) {
                index = this.tmp("i", true);
              }
              if (err == null) {
                err = this.tmp("err", true);
              }
              if (parallelism == null) {
                parallelism = __node(12, 1);
              }
              return __node(
                9,
                __node(21, "__asyncIter"),
                [
                  __node(23, 60, 2781, { op: "+", node: __wrap(parallelism) }),
                  __node(
                    9,
                    __node(21, "__iter"),
                    [__wrap(iterator)]
                  ),
                  __wrap(hasResult),
                  __node(23, 117, 2782, {
                    op: "",
                    node: __node(
                      20,
                      [
                        __node(27, __wrap(value)),
                        __node(27, __wrap(index)),
                        __node(27, __wrap(next))
                      ],
                      __wrap(body),
                      true,
                      true
                    )
                  }),
                  __node(23, 17, 2783, {
                    macroName: "if",
                    macroData: {
                      test: __wrap(hasResult),
                      body: __node(
                        23,
                        117,
                        2784,
                        {
                          op: "",
                          node: __node(
                            20,
                            [
                              __node(27, __wrap(err)),
                              __node(27, __wrap(result))
                            ],
                            __wrap(rest),
                            true,
                            true
                          )
                        },
                        true
                      ),
                      elseIfs: [],
                      elseBody: __node(
                        23,
                        117,
                        2786,
                        {
                          op: "",
                          node: __node(
                            20,
                            [__node(27, __wrap(err))],
                            __wrap(rest),
                            true,
                            true
                          )
                        },
                        true
                      )
                    }
                  })
                ]
              );
            },
            options: void 0,
            params: [
              [
                "ident",
                "parallelism",
                "many",
                "?",
                "sequence",
                ["const", "("],
                ["this", "ident", "Expression"],
                ["const", ")"]
              ],
              [
                "ident",
                "results",
                "many",
                "?",
                "sequence",
                ["ident", "err", "ident", "Identifier"],
                [
                  "ident",
                  "result",
                  "many",
                  "?",
                  "sequence",
                  ["const", ","],
                  ["this", "ident", "Identifier"]
                ],
                ["const", "<-"]
              ],
              ["ident", "next", "ident", "Identifier"],
              ["const", ","],
              ["ident", "value", "ident", "Identifier"],
              [
                "ident",
                "index",
                "many",
                "?",
                "sequence",
                ["const", ","],
                ["this", "ident", "Identifier"]
              ],
              ["const", "from"],
              ["ident", "iterator"],
              [
                "ident",
                "body",
                "choice",
                ["ident", "BodyNoEnd"],
                [
                  "sequence",
                  ["const", ";"],
                  ["this", "ident", "Statement"]
                ]
              ],
              ["const", "end"],
              ["ident", "rest", "ident", "DedentedBody"]
            ],
            names: "asyncfor",
            id: 133
          },
          {
            code: function (macroFullData, __wrap, __node, __const) {
              var _ref, body, err, macroData, macroName, next, rest, result, results,
                  step, test;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              results = macroData.results;
              next = macroData.next;
              test = macroData.test;
              step = macroData.step;
              body = macroData.body;
              rest = macroData.rest;
              if (macroName === "asyncuntil") {
                test = __node(23, 3, 2791, { op: "not", node: __wrap(test) });
              }
              if (rest == null) {
                rest = this.noop();
              }
              _ref = results != null ? results : {};
              err = _ref.err;
              result = _ref.result;
              return __node(
                23,
                130,
                2797,
                {
                  macroName: "asyncfor",
                  macroData: {
                    results: { err: __wrap(err), result: __wrap(result) },
                    next: __wrap(next),
                    test: __wrap(test),
                    step: __wrap(step),
                    body: __wrap(body),
                    rest: __wrap(rest)
                  }
                },
                true
              );
            },
            options: void 0,
            params: [
              [
                "ident",
                "results",
                "many",
                "?",
                "sequence",
                ["ident", "err", "ident", "Identifier"],
                [
                  "ident",
                  "result",
                  "many",
                  "?",
                  "sequence",
                  ["const", ","],
                  ["this", "ident", "Identifier"]
                ],
                ["const", "<-"]
              ],
              ["ident", "next", "ident", "Identifier"],
              ["const", ","],
              ["ident", "test", "ident", "Logic"],
              [
                "ident",
                "step",
                "many",
                "?",
                "sequence",
                ["const", ","],
                ["this", "ident", "Statement"]
              ],
              [
                "ident",
                "body",
                "choice",
                ["ident", "BodyNoEnd"],
                [
                  "sequence",
                  ["const", ";"],
                  ["this", "ident", "Statement"]
                ]
              ],
              ["const", "end"],
              ["ident", "rest", "ident", "DedentedBody"]
            ],
            names: ["asyncwhile", "asyncuntil"],
            id: 134
          },
          {
            code: function() {
            var __num, __typeof;
            __num = function (num) {
              if (typeof num !== "number") {
                throw TypeError("Expected a number, got " + __typeof(num));
              } else {
                return num;
              }
            };
            __typeof = (function () {
              var _toString;
              _toString = Object.prototype.toString;
              return function (o) {
                if (o === void 0) {
                  return "Undefined";
                } else if (o === null) {
                  return "Null";
                } else {
                  return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
                }
              };
            }());
            return function (macroFullData, __wrap, __node, __const) {
              var _ref, body, current, done, elseBody, elseIf, elseIfs, err, i, innerTest,
                  macroData, macroName, rest, result, results, test;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              results = macroData.results;
              done = macroData.done;
              test = macroData.test;
              body = macroData.body;
              elseIfs = macroData.elseIfs;
              elseBody = macroData.elseBody;
              rest = macroData.rest;
              if (macroName === "asyncunless") {
                test = __node(23, 3, 2804, { op: "not", node: __wrap(test) });
              }
              _ref = results != null ? results : {};
              err = _ref.err;
              result = _ref.result;
              if (rest == null) {
                rest = this.noop();
              }
              if (elseBody) {
                current = __node(23, 117, 2810, {
                  op: "",
                  node: __node(
                    20,
                    [__node(27, __wrap(done))],
                    __wrap(elseBody),
                    true,
                    true
                  )
                });
              } else {
                current = __node(23, 117, 2812, {
                  op: "",
                  node: __node(
                    20,
                    [__node(27, __wrap(done))],
                    __node(9, __wrap(done)),
                    true,
                    true
                  )
                });
              }
              i = __num(elseIfs.length) - 1;
              for (; i >= 0; --i) {
                elseIf = elseIfs[i];
                innerTest = elseIf.test;
                if (elseIf.type === "unless") {
                  innerTest = __node(23, 3, 2819, { op: "not", node: __wrap(innerTest) });
                }
                current = __node(
                  23,
                  17,
                  2820,
                  {
                    macroName: "if",
                    macroData: {
                      test: __wrap(innerTest),
                      body: __node(
                        23,
                        117,
                        2821,
                        {
                          op: "",
                          node: __node(
                            20,
                            [__node(27, __wrap(done))],
                            __wrap(elseIf.body),
                            true,
                            true
                          )
                        },
                        true
                      ),
                      elseIfs: [],
                      elseBody: __wrap(current)
                    }
                  },
                  true
                );
              }
              current = __node(
                23,
                17,
                2825,
                {
                  macroName: "if",
                  macroData: {
                    test: __wrap(test),
                    body: __node(
                      23,
                      117,
                      2826,
                      {
                        op: "",
                        node: __node(
                          20,
                          [__node(27, __wrap(done))],
                          __wrap(body),
                          true,
                          true
                        )
                      },
                      true
                    ),
                    elseIfs: [],
                    elseBody: __wrap(current)
                  }
                },
                true
              );
              if (!err && !result) {
                return __node(9, __wrap(current), [
                  __node(23, 117, 2832, {
                    op: "",
                    node: __node(
                      20,
                      [],
                      __wrap(rest),
                      true,
                      true
                    )
                  })
                ]);
              } else if (!result) {
                return __node(9, __wrap(current), [
                  __node(23, 117, 2835, {
                    op: "",
                    node: __node(
                      20,
                      [__node(27, __wrap(err))],
                      __wrap(rest),
                      true,
                      true
                    )
                  })
                ]);
              } else {
                if (err == null) {
                  err = this.tmp("err", true);
                }
                return __node(9, __wrap(current), [
                  __node(23, 117, 2839, {
                    op: "",
                    node: __node(
                      20,
                      [
                        __node(27, __wrap(err)),
                        __node(27, __wrap(result))
                      ],
                      __wrap(rest),
                      true,
                      true
                    )
                  })
                ]);
              }
            
            }
          }.call(this),
            options: void 0,
            params: [
              [
                "ident",
                "results",
                "many",
                "?",
                "sequence",
                ["ident", "err", "ident", "Identifier"],
                [
                  "ident",
                  "result",
                  "many",
                  "?",
                  "sequence",
                  ["const", ","],
                  ["this", "ident", "Identifier"]
                ],
                ["const", "<-"]
              ],
              ["ident", "done", "ident", "Identifier"],
              ["const", ","],
              ["ident", "test", "ident", "Logic"],
              [
                "ident",
                "body",
                "choice",
                ["ident", "BodyNoEnd"],
                [
                  "sequence",
                  ["const", ";"],
                  ["this", "ident", "Statement"]
                ]
              ],
              [
                "ident",
                "elseIfs",
                "many",
                "*",
                "sequence",
                [
                  "const",
                  "\n"
                ],
                ["const", "else"],
                [
                  "ident",
                  "type",
                  "choice",
                  ["const", "if"],
                  ["const", "unless"]
                ],
                ["ident", "test", "ident", "Logic"],
                [
                  "ident",
                  "body",
                  "choice",
                  ["ident", "BodyNoEnd"],
                  [
                    "sequence",
                    ["const", ";"],
                    ["this", "ident", "Statement"]
                  ]
                ]
              ],
              [
                "ident",
                "elseBody",
                "many",
                "?",
                "sequence",
                [
                  "const",
                  "\n"
                ],
                ["const", "else"],
                [
                  "this",
                  "choice",
                  ["ident", "BodyNoEnd"],
                  [
                    "sequence",
                    ["const", ";"],
                    ["this", "ident", "Statement"]
                  ]
                ]
              ],
              ["const", "end"],
              ["ident", "rest", "ident", "DedentedBody"]
            ],
            names: ["asyncif", "asyncunless"],
            id: 135
          },
          {
            code: function (macroFullData, __wrap, __node, __const) {
              var func, key, macroData, macroName;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              key = macroData.key;
              func = macroData.func;
              return this.def(key, func);
            },
            options: void 0,
            params: [
              ["ident", "key", "ident", "ObjectKey"],
              ["ident", "func", "ident", "FunctionDeclaration"]
            ],
            names: "def",
            id: 136
          },
          {
            code: function (macroFullData, __wrap, __node, __const) {
              var key, macroData, macroName, value;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              key = macroData.key;
              value = macroData.value;
              return this.def(key, value);
            },
            options: void 0,
            params: [
              ["ident", "key", "ident", "ObjectKey"],
              ["const", "="],
              ["ident", "value", "ident", "ExpressionOrAssignment"]
            ],
            names: "def",
            id: 137
          },
          {
            code: function (macroFullData, __wrap, __node, __const) {
              var key, macroData, macroName;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              key = macroData.key;
              return this.def(key, void 0);
            },
            options: void 0,
            params: [["ident", "key", "ident", "ObjectKey"]],
            names: "def",
            id: 138
          },
          {
            code: function() {
            var __isArray, __owns, __slice, __strnum, __toArray, __typeof;
            __isArray = typeof Array.isArray === "function" ? Array.isArray
              : (function () {
                var _toString;
                _toString = Object.prototype.toString;
                return function (x) {
                  return _toString.call(x) === "[object Array]";
                };
              }());
            __owns = Object.prototype.hasOwnProperty;
            __slice = Array.prototype.slice;
            __strnum = function (strnum) {
              var type;
              type = typeof strnum;
              if (type === "string") {
                return strnum;
              } else if (type === "number") {
                return String(strnum);
              } else {
                throw TypeError("Expected a string or number, got " + __typeof(strnum));
              }
            };
            __toArray = function (x) {
              if (x == null) {
                throw TypeError("Expected an object, got " + __typeof(x));
              } else if (__isArray(x)) {
                return x;
              } else if (typeof x === "string") {
                return x.split("");
              } else if (typeof x.length === "number") {
                return __slice.call(x);
              } else {
                throw TypeError("Expected an object with a length property, got " + __typeof(x));
              }
            };
            __typeof = (function () {
              var _toString;
              _toString = Object.prototype.toString;
              return function (o) {
                if (o === void 0) {
                  return "Undefined";
                } else if (o === null) {
                  return "Null";
                } else {
                  return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
                }
              };
            }());
            return function (macroFullData, __wrap, __node, __const) {
              var _arr, _i, _len, _ref, _this, assignment, body, constructorCount, ctor,
                  declaration, displayName, generic, genericArg, genericArgs,
                  genericCache, genericParams, hasSuperclass, hasTopLevelConstructor, i,
                  init, instanceofLets, instanceofs, item, key, macroData, macroName,
                  makeClassFunc, makeClassIdent, name, names, parts, prototype, result,
                  self, sup, superclass, superproto;
              _this = this;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              name = macroData.name;
              generic = macroData.generic;
              superclass = macroData.superclass;
              body = macroData.body;
              if (generic != null) {
                genericArgs = [generic.head].concat(__toArray(generic.tail));
              } else {
                genericArgs = [];
              }
              if (this.isIdent(name)) {
                declaration = name;
              } else if (this.isAccess(name)) {
                assignment = name;
                if (this.isConst(this.child(name)) && typeof this.value(this.child(name)) === "string") {
                  if ((_ref = this.ident(this.value(this.child(name)))) != null) {
                    name = _ref;
                  } else {
                    name = this.tmp("class", false, "function");
                  }
                } else {
                  name = this.tmp("class", false, "function");
                }
              } else {
                name = this.tmp("class", false, "function");
              }
              if (this.isIdent(superclass) && this.name(superclass) === "Object") {
                superclass = null;
              }
              hasSuperclass = !!superclass;
              sup = superclass && (this.isIdent(superclass) ? superclass : this.tmp("super", false, "function"));
              init = [];
              if (!superclass) {
                superproto = __node(
                  1,
                  __node(21, "Object"),
                  __node(12, "prototype")
                );
              } else {
                superproto = this.tmp(
                  this.isIdent(sup) ? __strnum(this.name(sup)) + "_prototype" : "super_prototype",
                  false,
                  "object"
                );
              }
              prototype = this.tmp(
                this.isIdent(name) ? __strnum(this.name(name)) + "_prototype" : "prototype",
                false,
                "object"
              );
              if (superclass) {
                init.push(__node(
                  23,
                  38,
                  2879,
                  {
                    macroName: "let",
                    macroData: {
                      declarable: __node(
                        23,
                        37,
                        2879,
                        __node(
                          23,
                          31,
                          2879,
                          { ident: __wrap(superproto) },
                          true
                        ),
                        true
                      ),
                      value: __node(1, __wrap(sup), __node(12, "prototype"))
                    }
                  },
                  true
                ));
                init.push(__node(
                  23,
                  38,
                  2880,
                  {
                    macroName: "let",
                    macroData: {
                      declarable: __node(
                        23,
                        37,
                        2880,
                        __node(
                          23,
                          31,
                          2880,
                          { ident: __wrap(prototype) },
                          true
                        ),
                        true
                      ),
                      value: __node(23, 30, 2880, {
                        left: __node(1, __wrap(name), __node(12, "prototype")),
                        op: ":=",
                        right: __node(26, [], __wrap(superproto))
                      })
                    }
                  },
                  true
                ));
                init.push(__node(23, 30, 2881, {
                  left: __node(1, __wrap(prototype), __node(12, "constructor")),
                  op: ":=",
                  right: __wrap(name)
                }));
              } else {
                init.push(__node(
                  23,
                  38,
                  2883,
                  {
                    macroName: "let",
                    macroData: {
                      declarable: __node(
                        23,
                        37,
                        2883,
                        __node(
                          23,
                          31,
                          2883,
                          { ident: __wrap(prototype) },
                          true
                        ),
                        true
                      ),
                      value: __node(1, __wrap(name), __node(12, "prototype"))
                    }
                  },
                  true
                ));
              }
              if (this.isIdent(name)) {
                displayName = this["const"](this.name(name));
              }
              if (displayName != null) {
                if (genericArgs.length > 0 && !this.getConstValue("DISABLE_GENERICS", false)) {
                  parts = [displayName, this["const"]("<")];
                  for (i = 0, _len = genericArgs.length; i < _len; ++i) {
                    genericArg = genericArgs[i];
                    if (i > 0) {
                      parts.push(this["const"](", "));
                    }
                    parts.push(__node(23, 16, 2892, {
                      macroName: "if",
                      macroData: {
                        test: __node(23, 8, 2892, { left: __wrap(genericArg), inverted: false, op: "!~=", right: __const("null") }),
                        body: __node(
                          9,
                          __node(21, "__name"),
                          [__wrap(genericArg)]
                        ),
                        elseIfs: [],
                        elseBody: __node(12, "")
                      }
                    }));
                  }
                  parts.push(this["const"](">"));
                  displayName = this.binaryChain("+", parts);
                }
                init.push(__node(23, 30, 2895, {
                  left: __node(1, __wrap(name), __node(12, "displayName")),
                  op: ":=",
                  right: __wrap(displayName)
                }));
              }
              if (superclass) {
                init.push(__node(
                  22,
                  __node(
                    6,
                    __node(48, "typeof", __node(1, __wrap(sup), __node(12, "extended"))),
                    "===",
                    __node(12, "function")
                  ),
                  __node(
                    9,
                    __node(1, __wrap(sup), __node(12, "extended")),
                    [__wrap(name)]
                  )
                ));
              }
              function fixSupers(node) {
                return _this.walk(node, function (node) {
                  var _arr, _arr2, _i, _len, args, child, superArg;
                  if (_this.isSuper(node)) {
                    child = _this.superChild(node);
                    if (child != null) {
                      child = fixSupers(child);
                    }
                    for (_arr = [], _arr2 = __toArray(_this.superArgs(node)), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                      superArg = _arr2[_i];
                      _arr.push(fixSupers(superArg));
                    }
                    args = _arr;
                    return _this.call(
                      child != null ? __node(1, __wrap(superproto), __wrap(child))
                        : !superclass ? __node(21, "Object")
                        : __wrap(sup),
                      [__node(38)].concat(args),
                      false,
                      true
                    );
                  }
                });
              }
              body = fixSupers(this.macroExpandAll(body));
              constructorCount = 0;
              this.walk(body, function (node) {
                var key;
                if (_this.isDef(node)) {
                  key = _this.left(node);
                  if (_this.isConst(key) && _this.value(key) === "constructor") {
                    ++constructorCount;
                  }
                }
                return;
              });
              hasTopLevelConstructor = false;
              if (constructorCount === 1) {
                this.walk(body, function (node) {
                  var key;
                  if (_this.isDef(node)) {
                    key = _this.left(node);
                    if (_this.isConst(key) && _this.value(key) === "constructor" && _this.isFunc(_this.right(node)) && !_this.funcIsCurried(_this.right(node))) {
                      hasTopLevelConstructor = true;
                    }
                    return node;
                  } else {
                    return node;
                  }
                });
              }
              self = this.tmp("this");
              if (hasTopLevelConstructor) {
                body = this.walk(body, function (node) {
                  var constructor, key, value;
                  if (_this.isDef(node)) {
                    key = _this.left(node);
                    if (_this.isConst(key) && _this.value(key) === "constructor") {
                      value = _this.right(node);
                      constructor = _this.rewrap(
                        _this.func(_this.funcParams(value), _this.funcBody(value), false, __node(
                          23,
                          16,
                          2952,
                          {
                            macroName: "if",
                            macroData: {
                              test: __node(
                                23,
                                74,
                                2952,
                                {
                                  left: __node(17, __node(12, "this")),
                                  inverted: false,
                                  op: "instanceof",
                                  right: __wrap(name)
                                },
                                true
                              ),
                              body: __node(17, __node(12, "this")),
                              elseIfs: [],
                              elseBody: __node(26, [], __wrap(prototype))
                            }
                          },
                          true
                        )),
                        value
                      );
                      init.unshift(__node(
                        23,
                        38,
                        2953,
                        {
                          macroName: "let",
                          macroData: {
                            declarable: __node(
                              23,
                              37,
                              2953,
                              __node(
                                23,
                                31,
                                2953,
                                { ident: __wrap(name) },
                                true
                              ),
                              true
                            ),
                            value: __wrap(constructor)
                          }
                        },
                        true
                      ));
                      return _this.noop();
                    }
                  } else {
                    return node;
                  }
                });
              } else if (constructorCount !== 0) {
                ctor = this.tmp("ctor", false, "function");
                result = this.tmp("ref");
                init.push(__node(7, [
                  __node(
                    23,
                    38,
                    2961,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __node(
                          23,
                          37,
                          2961,
                          __node(
                            23,
                            31,
                            2961,
                            { isMutable: "mutable", ident: __wrap(ctor) },
                            true
                          ),
                          true
                        ),
                        value: __const("void")
                      }
                    },
                    true
                  ),
                  __node(
                    23,
                    15,
                    2962,
                    {
                      macroName: "let",
                      macroData: {
                        ident: __wrap(name),
                        func: __node(
                          23,
                          117,
                          2962,
                          {
                            op: "",
                            node: __node(
                              20,
                              [],
                              __node(7, [
                                __node(
                                  23,
                                  38,
                                  2963,
                                  {
                                    macroName: "let",
                                    macroData: {
                                      declarable: __node(
                                        23,
                                        37,
                                        2963,
                                        __node(
                                          23,
                                          31,
                                          2963,
                                          { ident: __wrap(self) },
                                          true
                                        ),
                                        true
                                      ),
                                      value: __node(23, 16, 2963, {
                                        macroName: "if",
                                        macroData: {
                                          test: __node(23, 74, 2963, { left: __node(38), inverted: false, op: "instanceof", right: __wrap(name) }),
                                          body: __node(38),
                                          elseIfs: [],
                                          elseBody: __node(26, [], __wrap(prototype))
                                        }
                                      })
                                    }
                                  },
                                  true
                                ),
                                __node(
                                  23,
                                  17,
                                  2965,
                                  {
                                    macroName: "if",
                                    macroData: {
                                      test: __node(
                                        23,
                                        26,
                                        2965,
                                        { op: "isFunction!", node: __wrap(ctor) },
                                        true
                                      ),
                                      body: __node(7, [
                                        __node(
                                          23,
                                          38,
                                          2966,
                                          {
                                            macroName: "let",
                                            macroData: {
                                              declarable: __node(
                                                23,
                                                37,
                                                2966,
                                                __node(
                                                  23,
                                                  31,
                                                  2966,
                                                  { ident: __wrap(result) },
                                                  true
                                                ),
                                                true
                                              ),
                                              value: __node(
                                                9,
                                                __wrap(ctor),
                                                [
                                                  __wrap(self),
                                                  __node(31, __node(3))
                                                ],
                                                false,
                                                true
                                              )
                                            }
                                          },
                                          true
                                        ),
                                        __node(
                                          23,
                                          17,
                                          2967,
                                          {
                                            macroName: "if",
                                            macroData: {
                                              test: __node(
                                                23,
                                                5,
                                                2967,
                                                {
                                                  left: __node(
                                                    9,
                                                    __node(21, "Object"),
                                                    [__wrap(result)]
                                                  ),
                                                  inverted: false,
                                                  op: "==",
                                                  right: __wrap(result)
                                                },
                                                true
                                              ),
                                              body: __node(
                                                23,
                                                39,
                                                2968,
                                                { macroName: "return", macroData: { node: __wrap(result) } },
                                                true
                                              ),
                                              elseIfs: []
                                            }
                                          },
                                          true
                                        )
                                      ]),
                                      elseIfs: [
                                        {
                                          type: "if",
                                          test: __wrap(hasSuperclass),
                                          body: __node(7, [
                                            __node(
                                              23,
                                              38,
                                              2970,
                                              {
                                                macroName: "let",
                                                macroData: {
                                                  declarable: __node(
                                                    23,
                                                    37,
                                                    2970,
                                                    __node(
                                                      23,
                                                      31,
                                                      2970,
                                                      { ident: __wrap(result) },
                                                      true
                                                    ),
                                                    true
                                                  ),
                                                  value: __node(
                                                    9,
                                                    __wrap(sup),
                                                    [
                                                      __wrap(self),
                                                      __node(31, __node(3))
                                                    ],
                                                    false,
                                                    true
                                                  )
                                                }
                                              },
                                              true
                                            ),
                                            __node(
                                              23,
                                              17,
                                              2971,
                                              {
                                                macroName: "if",
                                                macroData: {
                                                  test: __node(
                                                    23,
                                                    5,
                                                    2971,
                                                    {
                                                      left: __node(
                                                        9,
                                                        __node(21, "Object"),
                                                        [__wrap(result)]
                                                      ),
                                                      inverted: false,
                                                      op: "==",
                                                      right: __wrap(result)
                                                    },
                                                    true
                                                  ),
                                                  body: __node(
                                                    23,
                                                    39,
                                                    2972,
                                                    { macroName: "return", macroData: { node: __wrap(result) } },
                                                    true
                                                  ),
                                                  elseIfs: []
                                                }
                                              },
                                              true
                                            )
                                          ])
                                        }
                                      ]
                                    }
                                  },
                                  true
                                ),
                                __wrap(self)
                              ]),
                              true
                            )
                          },
                          true
                        )
                      }
                    },
                    true
                  )
                ]));
                body = this.walk(body, function (node) {
                  var constructor, firstArg, key, value;
                  if (_this.isDef(node)) {
                    key = _this.left(node);
                    if (_this.isConst(key) && _this.value(key) === "constructor") {
                      value = _this.right(node);
                      if (_this.isCall(value) && _this.isIdent(_this.callFunc(value)) && _this.name(_this.callFunc(value)) === "__curry" && _this.callArgs(value).length === 2 && _this.isFunc(_this.callArgs(value)[1])) {
                        firstArg = _this.callArgs(value)[0];
                        constructor = _this.callArgs(value)[1];
                        constructor = _this.rewrap(
                          _this.func(
                            _this.funcParams(constructor),
                            _this.funcBody(constructor),
                            false,
                            __node(
                              23,
                              16,
                              2986,
                              {
                                macroName: "if",
                                macroData: {
                                  test: __node(
                                    23,
                                    74,
                                    2986,
                                    {
                                      left: __node(17, __node(12, "this")),
                                      inverted: false,
                                      op: "instanceof",
                                      right: __wrap(name)
                                    },
                                    true
                                  ),
                                  body: __node(17, __node(12, "this")),
                                  elseIfs: [],
                                  elseBody: __node(26, [], __wrap(prototype))
                                }
                              },
                              true
                            ),
                            false
                          ),
                          value
                        );
                        return __node(23, 30, 2988, {
                          left: __wrap(ctor),
                          op: ":=",
                          right: __node(
                            9,
                            __node(21, "__curry"),
                            [__wrap(firstArg), __wrap(constructor)]
                          )
                        });
                      } else if (_this.isFunc(value)) {
                        constructor = _this.rewrap(
                          _this.func(
                            _this.funcParams(value),
                            _this.funcBody(value),
                            false,
                            __node(
                              23,
                              16,
                              2994,
                              {
                                macroName: "if",
                                macroData: {
                                  test: __node(
                                    23,
                                    74,
                                    2994,
                                    {
                                      left: __node(17, __node(12, "this")),
                                      inverted: false,
                                      op: "instanceof",
                                      right: __wrap(name)
                                    },
                                    true
                                  ),
                                  body: __node(17, __node(12, "this")),
                                  elseIfs: [],
                                  elseBody: __node(26, [], __wrap(prototype))
                                }
                              },
                              true
                            ),
                            _this.funcIsCurried(value)
                          ),
                          value
                        );
                        return __node(23, 30, 2996, { left: __wrap(ctor), op: ":=", right: __wrap(constructor) });
                      } else {
                        return __node(23, 30, 2998, { left: __wrap(ctor), op: ":=", right: __wrap(value) });
                      }
                    }
                  }
                });
              } else if (!superclass) {
                init.push(__node(
                  23,
                  15,
                  3002,
                  {
                    macroName: "let",
                    macroData: {
                      ident: __wrap(name),
                      func: __node(
                        23,
                        117,
                        3002,
                        {
                          op: "",
                          node: __node(
                            20,
                            [],
                            __node(
                              23,
                              16,
                              3002,
                              {
                                macroName: "if",
                                macroData: {
                                  test: __node(
                                    23,
                                    74,
                                    3002,
                                    { left: __node(38), inverted: false, op: "instanceof", right: __wrap(name) },
                                    true
                                  ),
                                  body: __node(38),
                                  elseIfs: [],
                                  elseBody: __node(26, [], __wrap(prototype))
                                }
                              },
                              true
                            ),
                            true
                          )
                        },
                        true
                      )
                    }
                  },
                  true
                ));
              } else {
                result = this.tmp("ref");
                init.push(__node(
                  23,
                  15,
                  3006,
                  {
                    macroName: "let",
                    macroData: {
                      ident: __wrap(name),
                      func: __node(
                        23,
                        117,
                        3006,
                        {
                          op: "",
                          node: __node(
                            20,
                            [],
                            __node(7, [
                              __node(
                                23,
                                38,
                                3007,
                                {
                                  macroName: "let",
                                  macroData: {
                                    declarable: __node(
                                      23,
                                      37,
                                      3007,
                                      __node(
                                        23,
                                        31,
                                        3007,
                                        { ident: __wrap(self) },
                                        true
                                      ),
                                      true
                                    ),
                                    value: __node(23, 16, 3007, {
                                      macroName: "if",
                                      macroData: {
                                        test: __node(23, 74, 3007, { left: __node(38), inverted: false, op: "instanceof", right: __wrap(name) }),
                                        body: __node(38),
                                        elseIfs: [],
                                        elseBody: __node(26, [], __wrap(prototype))
                                      }
                                    })
                                  }
                                },
                                true
                              ),
                              __node(
                                23,
                                38,
                                3008,
                                {
                                  macroName: "let",
                                  macroData: {
                                    declarable: __node(
                                      23,
                                      37,
                                      3008,
                                      __node(
                                        23,
                                        31,
                                        3008,
                                        { ident: __wrap(result) },
                                        true
                                      ),
                                      true
                                    ),
                                    value: __node(
                                      9,
                                      __wrap(sup),
                                      [
                                        __wrap(self),
                                        __node(31, __node(3))
                                      ],
                                      false,
                                      true
                                    )
                                  }
                                },
                                true
                              ),
                              __node(
                                23,
                                17,
                                3009,
                                {
                                  macroName: "if",
                                  macroData: {
                                    test: __node(
                                      23,
                                      5,
                                      3009,
                                      {
                                        left: __node(
                                          9,
                                          __node(21, "Object"),
                                          [__wrap(result)]
                                        ),
                                        inverted: false,
                                        op: "==",
                                        right: __wrap(result)
                                      },
                                      true
                                    ),
                                    body: __wrap(result),
                                    elseIfs: [],
                                    elseBody: __wrap(self)
                                  }
                                },
                                true
                              )
                            ]),
                            true
                          )
                        },
                        true
                      )
                    }
                  },
                  true
                ));
              }
              function changeDefs(node) {
                return _this.walk(node, function (node) {
                  var _ref, key, value;
                  if (_this.isDef(node)) {
                    key = _this.left(node);
                    if ((_ref = _this.right(node)) != null) {
                      value = _ref;
                    } else {
                      value = __node(23, 117, 3017, {
                        op: "",
                        node: __node(
                          20,
                          [],
                          __node(
                            23,
                            11,
                            3017,
                            {
                              op: "throw",
                              node: __node(
                                9,
                                __node(21, "Error"),
                                [
                                  __node(23, 69, 3017, {
                                    left: __node(23, 69, 3017, {
                                      left: __node(23, 69, 3017, {
                                        left: __node(23, 69, 3017, {
                                          left: __node(12, "Not implemented: "),
                                          op: "",
                                          right: __node(
                                            9,
                                            __node(21, "__name"),
                                            [
                                              __node(1, __node(38), __node(12, "constructor"))
                                            ]
                                          )
                                        }),
                                        op: "",
                                        right: __node(12, ".")
                                      }),
                                      op: "",
                                      right: __wrap(key)
                                    }),
                                    op: "",
                                    right: __node(12, "()")
                                  })
                                ]
                              )
                            },
                            true
                          ),
                          true
                        )
                      });
                    }
                    return changeDefs(__node(23, 30, 3018, {
                      left: __node(1, __wrap(prototype), __wrap(key)),
                      op: ":=",
                      right: __wrap(value)
                    }));
                  }
                });
              }
              body = changeDefs(body);
              body = this.walk(body, function (node) {
                if (_this.isFunc(node)) {
                  if (!_this.funcIsBound(node)) {
                    return node;
                  }
                } else if (_this.isThis(node)) {
                  return name;
                }
              });
              result = __node(
                23,
                104,
                3028,
                {
                  macroName: "do",
                  macroData: {
                    locals: { ident: __wrap(sup), value: __wrap(superclass), rest: [] },
                    body: __node(7, [
                      __wrap(init),
                      __wrap(body),
                      __node(
                        23,
                        39,
                        3031,
                        { macroName: "return", macroData: { node: __wrap(name) } },
                        true
                      )
                    ])
                  }
                },
                true
              );
              if (genericArgs.length > 0) {
                if (this.getConstValue("DISABLE_GENERICS", false)) {
                  names = {};
                  for (_i = 0, _len = genericArgs.length; _i < _len; ++_i) {
                    genericArg = genericArgs[_i];
                    name = this.name(genericArg);
                    names[name] = true;
                  }
                  result = this.walk(this.macroExpandAll(result), function (node) {
                    var name, right;
                    if (_this.isBinary(node) && _this.op(node) === "instanceof") {
                      right = _this.right(node);
                      if (_this.isIdent(right)) {
                        name = _this.name(right);
                        if (__owns.call(names, name)) {
                          return __const("true");
                        }
                      }
                    }
                  });
                } else {
                  genericCache = this.tmp("cache", false, "object");
                  for (_arr = [], _i = 0, _len = genericArgs.length; _i < _len; ++_i) {
                    genericArg = genericArgs[_i];
                    _arr.push(this.param(genericArg));
                  }
                  genericParams = _arr;
                  makeClassIdent = this.tmp("make", false, "function");
                  instanceofs = {};
                  for (_i = 0, _len = genericArgs.length; _i < _len; ++_i) {
                    genericArg = genericArgs[_i];
                    name = this.name(genericArg);
                    key = this.tmp("instanceof_" + __strnum(name), false, "function");
                    instanceofs[name] = {
                      key: key,
                      "let": __node(
                        23,
                        38,
                        3056,
                        {
                          macroName: "let",
                          macroData: {
                            declarable: __node(
                              23,
                              37,
                              3056,
                              __node(
                                23,
                                31,
                                3056,
                                { ident: __wrap(key) },
                                true
                              ),
                              true
                            ),
                            value: __node(
                              9,
                              __node(21, "__getInstanceof"),
                              [__wrap(genericArg)]
                            )
                          }
                        },
                        true
                      ),
                      used: false
                    };
                  }
                  result = this.walk(this.macroExpandAll(result), function (node) {
                    var func, left, name, right;
                    if (_this.isBinary(node) && _this.op(node) === "instanceof") {
                      right = _this.right(node);
                      if (_this.isIdent(right)) {
                        name = _this.name(right);
                        if (__owns.call(instanceofs, name)) {
                          func = instanceofs[name].key;
                          instanceofs[name].used = true;
                          left = _this.left(node);
                          return __node(9, __wrap(func), [__wrap(left)]);
                        }
                      }
                    }
                  });
                  _arr = [];
                  for (name in instanceofs) {
                    if (__owns.call(instanceofs, name)) {
                      item = instanceofs[name];
                      if (item.used) {
                        _arr.push(item["let"]);
                      }
                    }
                  }
                  instanceofLets = _arr;
                  if (instanceofLets.length) {
                    result = __node(7, [__wrap(instanceofLets), __wrap(result)]);
                  }
                  makeClassFunc = this.func(genericParams, result, true, false);
                  result = __node(
                    9,
                    __node(21, "__genericFunc"),
                    [__wrap(genericArgs.length), __wrap(makeClassFunc)]
                  );
                }
              }
              if (declaration != null) {
                return __node(
                  23,
                  38,
                  3080,
                  {
                    macroName: "let",
                    macroData: {
                      declarable: __node(
                        23,
                        37,
                        3080,
                        __node(
                          23,
                          31,
                          3080,
                          { ident: __wrap(declaration) },
                          true
                        ),
                        true
                      ),
                      value: __wrap(result)
                    }
                  },
                  true
                );
              } else if (assignment != null) {
                return __node(23, 30, 3082, { left: __wrap(assignment), op: ":=", right: __wrap(result) });
              } else {
                return result;
              }
            
            }
          }.call(this),
            options: void 0,
            params: [
              [
                "ident",
                "name",
                "many",
                "?",
                "ident",
                "SimpleAssignable"
              ],
              [
                "ident",
                "generic",
                "many",
                "?",
                "sequence",
                ["const", "<"],
                ["ident", "head", "ident", "Identifier"],
                [
                  "ident",
                  "tail",
                  "many",
                  "*",
                  "sequence",
                  ["const", ","],
                  ["this", "ident", "Identifier"]
                ],
                ["const", ">"]
              ],
              [
                "ident",
                "superclass",
                "many",
                "?",
                "sequence",
                ["const", "extends"],
                ["this"]
              ],
              [
                "ident",
                "body",
                "many",
                "?",
                "ident",
                "Body"
              ]
            ],
            names: "class",
            id: 139
          },
          {
            code: function (macroFullData, __wrap, __node, __const) {
              var _this, macroData, macroName, node;
              _this = this;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              node = macroData.node;
              if (!this.inGenerator) {
                this.error("Can only use yield in a generator function");
              }
              return this.mutateLast(
                node || this.noop(),
                function (n) {
                  return _this["yield"](n);
                },
                true
              );
            },
            options: void 0,
            params: [
              [
                "ident",
                "node",
                "many",
                "?",
                "ident",
                "Expression"
              ]
            ],
            names: "yield",
            id: 140
          },
          {
            code: function (macroFullData, __wrap, __node, __const) {
              var err, index, init, item, iterator, length, macroData, macroName, node,
                  received, send;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              node = macroData.node;
              if (!this.inGenerator) {
                this.error("Can only use yield* in a generator function");
              }
              init = [];
              if (this.isType(node, "arrayLike")) {
                index = this.tmp("i", false, "number");
                init.push(__node(
                  23,
                  38,
                  3099,
                  {
                    macroName: "let",
                    macroData: {
                      declarable: __node(
                        23,
                        37,
                        3099,
                        __node(
                          23,
                          31,
                          3099,
                          { ident: __wrap(index) },
                          true
                        ),
                        true
                      ),
                      value: __node(12, 0)
                    }
                  },
                  true
                ));
                length = this.tmp("len", false, "number");
                node = this.cache(node, init, "arr", false);
                init.push(__node(
                  23,
                  38,
                  3102,
                  {
                    macroName: "let",
                    macroData: {
                      declarable: __node(
                        23,
                        37,
                        3102,
                        __node(
                          23,
                          31,
                          3102,
                          { ident: __wrap(length) },
                          true
                        ),
                        true
                      ),
                      value: __node(1, __wrap(node), __node(12, "length"))
                    }
                  },
                  true
                ));
                return __node(7, [
                  __node(
                    23,
                    106,
                    3104,
                    {
                      macroName: "for",
                      macroData: {
                        init: __wrap(init),
                        test: __node(
                          23,
                          9,
                          3104,
                          { left: __wrap(index), inverted: false, op: "~<", right: __wrap(length) },
                          true
                        ),
                        step: __node(23, 103, 3104, {
                          left: __wrap(index),
                          op: "+=",
                          right: __node(12, 1)
                        }),
                        body: __node(
                          23,
                          140,
                          3105,
                          {
                            macroName: "yield",
                            macroData: { node: __node(1, __wrap(node), __wrap(index)) }
                          },
                          true
                        )
                      }
                    },
                    true
                  ),
                  __const("void")
                ]);
              } else {
                iterator = this.cache(
                  __node(
                    9,
                    __node(21, "__iter"),
                    [__wrap(node)]
                  ),
                  init,
                  "iter",
                  false
                );
                err = this.tmp("e", true);
                send = this.tmp("send");
                item = this.tmp("item");
                received = this.tmp("tmp");
                return __node(7, [
                  __wrap(init),
                  __node(
                    23,
                    38,
                    3115,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __node(
                          23,
                          37,
                          3115,
                          __node(
                            23,
                            31,
                            3115,
                            { isMutable: "mutable", ident: __wrap(received) },
                            true
                          ),
                          true
                        ),
                        value: __const("void")
                      }
                    },
                    true
                  ),
                  __node(
                    23,
                    38,
                    3116,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __node(
                          23,
                          37,
                          3116,
                          __node(
                            23,
                            31,
                            3116,
                            { isMutable: "mutable", ident: __wrap(send) },
                            true
                          ),
                          true
                        ),
                        value: __const("true")
                      }
                    },
                    true
                  ),
                  __node(
                    23,
                    108,
                    3118,
                    {
                      macroName: "while",
                      macroData: {
                        test: __const("true"),
                        body: __node(7, [
                          __node(
                            23,
                            38,
                            3119,
                            {
                              macroName: "let",
                              macroData: {
                                declarable: __node(
                                  23,
                                  37,
                                  3119,
                                  __node(
                                    23,
                                    31,
                                    3119,
                                    { ident: __wrap(item) },
                                    true
                                  ),
                                  true
                                ),
                                value: __node(23, 16, 3119, {
                                  macroName: "if",
                                  macroData: {
                                    test: __wrap(send),
                                    body: __node(
                                      9,
                                      __node(1, __wrap(iterator), __node(12, "send")),
                                      [__wrap(received)]
                                    ),
                                    elseIfs: [],
                                    elseBody: __node(
                                      9,
                                      __node(1, __wrap(iterator), __node(12, "throw")),
                                      [__wrap(received)]
                                    )
                                  }
                                })
                              }
                            },
                            true
                          ),
                          __node(
                            23,
                            17,
                            3120,
                            {
                              macroName: "if",
                              macroData: {
                                test: __node(1, __wrap(item), __node(12, "done")),
                                body: __node(
                                  23,
                                  19,
                                  3121,
                                  { macroName: "break", macroData: {} },
                                  true
                                ),
                                elseIfs: []
                              }
                            },
                            true
                          ),
                          __node(
                            23,
                            119,
                            3122,
                            {
                              macroName: "try",
                              macroData: {
                                tryBody: __node(7, [
                                  __node(
                                    23,
                                    30,
                                    3123,
                                    {
                                      left: __wrap(received),
                                      op: ":=",
                                      right: __node(23, 140, 3123, {
                                        macroName: "yield",
                                        macroData: {
                                          node: __node(1, __wrap(item), __node(12, "value"))
                                        }
                                      })
                                    },
                                    true
                                  ),
                                  __node(
                                    23,
                                    30,
                                    3124,
                                    { left: __wrap(send), op: ":=", right: __const("true") },
                                    true
                                  )
                                ]),
                                typedCatches: [],
                                catchPart: {
                                  ident: __wrap(err),
                                  body: __node(7, [
                                    __node(
                                      23,
                                      30,
                                      3126,
                                      { left: __wrap(received), op: ":=", right: __wrap(err) },
                                      true
                                    ),
                                    __node(
                                      23,
                                      30,
                                      3127,
                                      { left: __wrap(send), op: ":=", right: __const("false") },
                                      true
                                    )
                                  ])
                                }
                              }
                            },
                            true
                          )
                        ])
                      }
                    },
                    true
                  ),
                  __node(
                    23,
                    119,
                    3128,
                    {
                      macroName: "try",
                      macroData: {
                        tryBody: __node(9, __node(1, __wrap(iterator), __node(12, "close"))),
                        typedCatches: [],
                        catchPart: { ident: __wrap(err), body: __const("void") }
                      }
                    },
                    true
                  ),
                  __node(1, __wrap(item), __node(12, "value"))
                ]);
              }
            },
            options: void 0,
            params: [["ident", "node", "ident", "Expression"]],
            names: "yield*",
            id: 141
          },
          {
            code: function (macroFullData, __wrap, __node, __const) {
              var macroData, macroName, node, rest;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              node = macroData.node;
              rest = macroData.rest;
              if (rest == null) {
                rest = this.noop();
              }
              return __node(7, [
                __wrap(rest),
                __node(
                  23,
                  39,
                  3139,
                  { macroName: "return", macroData: { node: __wrap(node) } },
                  true
                )
              ]);
            },
            options: void 0,
            params: [
              ["ident", "node", "ident", "Expression"],
              ["ident", "rest", "ident", "DedentedBody"]
            ],
            names: "returning",
            id: 142
          },
          {
            code: function (macroFullData, __wrap, __node, __const) {
              var label, macroData, macroName, node;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              label = macroData.label;
              node = macroData.node;
              return this.withLabel(node, label);
            },
            options: void 0,
            params: [
              ["ident", "label", "ident", "Identifier"],
              [
                "ident",
                "node",
                "choice",
                ["ident", "Statement"],
                ["ident", "Body"]
              ]
            ],
            names: "label!",
            id: 145
          },
          {
            code: function (macroFullData, __wrap, __node, __const) {
              var macroData, macroName, node, sync;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              sync = macroData.sync;
              node = macroData.node;
              if (this.isFunc(node) && !this.funcIsGenerator(node)) {
                this.error("promise! must be used with a generator function", node);
              }
              if (sync && this.isFunc(node)) {
                this.error("Use .sync() to retrieve asynchronously", sync);
              }
              if (!sync || this.isConst(sync) && !this.value(sync)) {
                return __node(
                  9,
                  __node(21, "__promise"),
                  [__wrap(node)]
                );
              } else {
                return __node(
                  9,
                  __node(21, "__promise"),
                  [__wrap(node), __wrap(sync)]
                );
              }
            },
            options: void 0,
            params: [
              [
                "ident",
                "sync",
                "many",
                "?",
                "sequence",
                ["const", "("],
                ["this", "ident", "Expression"],
                ["const", ")"]
              ],
              ["ident", "node", "ident", "Expression"]
            ],
            names: "promise!",
            id: 154
          },
          {
            code: function (macroFullData, __wrap, __node, __const) {
              var body, func, macroData, macroName, sync;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              sync = macroData.sync;
              body = macroData.body;
              func = this.rewrap(
                this.func(
                  [],
                  body,
                  true,
                  true,
                  false,
                  null,
                  true
                ),
                body
              );
              if (!sync || this.isConst(sync) && !this.value(sync)) {
                return __node(
                  9,
                  __node(21, "__generatorToPromise"),
                  [__node(9, __wrap(func))]
                );
              } else {
                return __node(
                  9,
                  __node(21, "__generatorToPromise"),
                  [
                    __node(9, __wrap(func)),
                    __wrap(sync)
                  ]
                );
              }
            },
            options: void 0,
            params: [
              [
                "ident",
                "sync",
                "many",
                "?",
                "sequence",
                ["const", "("],
                ["this", "ident", "Expression"],
                ["const", ")"]
              ],
              ["ident", "body", "ident", "GeneratorBody"]
            ],
            names: "promise!",
            id: 155
          },
          {
            code: function() {
            var __strnum, __typeof;
            __strnum = function (strnum) {
              var type;
              type = typeof strnum;
              if (type === "string") {
                return strnum;
              } else if (type === "number") {
                return String(strnum);
              } else {
                throw TypeError("Expected a string or number, got " + __typeof(strnum));
              }
            };
            __typeof = (function () {
              var _toString;
              _toString = Object.prototype.toString;
              return function (o) {
                if (o === void 0) {
                  return "Undefined";
                } else if (o === null) {
                  return "Null";
                } else {
                  return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
                }
              };
            }());
            return function (macroFullData, __wrap, __node, __const) {
              var _ref, array, body, end, inclusive, index, init, length, lengthCalc,
                  macroData, macroName, parallelism, start, step, value;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              parallelism = macroData.parallelism;
              value = macroData.value;
              index = macroData.index;
              array = macroData.array;
              body = macroData.body;
              init = [];
              value = this.macroExpand1(value);
              length = null;
              if (index) {
                length = index.length;
                index = index.value;
              }
              if (parallelism == null) {
                parallelism = __node(12, 1);
              }
              if (index == null) {
                index = this.tmp("i", true, "number");
              }
              if (this.isCall(array) && this.isIdent(this.callFunc(array)) && this.name(this.callFunc(array)) === "__range" && !this.callIsApply(array)) {
                if (this.isArray(value) || this.isObject(value)) {
                  this.error("Cannot assign a number to a complex declarable", value);
                }
                value = value.ident;
                _ref = this.callArgs(array);
                start = _ref[0];
                end = _ref[1];
                step = _ref[2];
                inclusive = _ref[3];
                if (this.isConst(start)) {
                  if (typeof this.value(start) !== "number") {
                    this.error("Cannot start with a non-number: " + __strnum(this.value(start)), start);
                  }
                } else {
                  start = __node(23, 60, 3930, { op: "+", node: __wrap(start) });
                }
                if (this.isConst(end)) {
                  if (typeof this.value(end) !== "number") {
                    this.error("Cannot end with a non-number: " + __strnum(this.value(end)), end);
                  }
                } else if (this.isComplex(end)) {
                  end = this.cache(
                    __node(23, 60, 3936, { op: "+", node: __wrap(end) }),
                    init,
                    "end",
                    false
                  );
                } else {
                  init.push(__node(23, 60, 3938, { op: "+", node: __wrap(end) }));
                }
                if (this.isConst(step)) {
                  if (typeof this.value(step) !== "number") {
                    this.error("Cannot step with a non-number: " + __strnum(this.value(step)), step);
                  }
                } else if (this.isComplex(step)) {
                  step = this.cache(
                    __node(23, 60, 3944, { op: "+", node: __wrap(step) }),
                    init,
                    "step",
                    false
                  );
                } else {
                  init.push(__node(23, 60, 3946, { op: "+", node: __wrap(step) }));
                }
                body = __node(7, [
                  __node(
                    23,
                    38,
                    3949,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __node(
                          23,
                          37,
                          3949,
                          __node(
                            23,
                            31,
                            3949,
                            { ident: __wrap(value) },
                            true
                          ),
                          true
                        ),
                        value: __node(23, 49, 3949, {
                          left: __node(23, 45, 3949, { left: __wrap(index), inverted: false, op: "~*", right: __wrap(step) }),
                          inverted: false,
                          op: "~+",
                          right: __wrap(start)
                        })
                      }
                    },
                    true
                  ),
                  __wrap(body)
                ]);
                lengthCalc = __node(23, 17, 3952, {
                  macroName: "if",
                  macroData: {
                    test: __wrap(inclusive),
                    body: __node(
                      23,
                      45,
                      3953,
                      {
                        left: __node(23, 49, 3953, {
                          left: __node(23, 49, 3953, { left: __wrap(end), inverted: false, op: "~-", right: __wrap(start) }),
                          inverted: false,
                          op: "~+",
                          right: __wrap(step)
                        }),
                        inverted: false,
                        op: "~\\",
                        right: __wrap(step)
                      },
                      true
                    ),
                    elseIfs: [],
                    elseBody: __node(
                      23,
                      45,
                      3955,
                      {
                        left: __node(23, 49, 3955, { left: __wrap(end), inverted: false, op: "~-", right: __wrap(start) }),
                        inverted: false,
                        op: "~\\",
                        right: __wrap(step)
                      },
                      true
                    )
                  }
                });
                if (!length) {
                  length = lengthCalc;
                } else {
                  init.push(__node(
                    23,
                    38,
                    3959,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __node(
                          23,
                          37,
                          3959,
                          __node(
                            23,
                            31,
                            3959,
                            { ident: __wrap(length) },
                            true
                          ),
                          true
                        ),
                        value: __wrap(lengthCalc)
                      }
                    },
                    true
                  ));
                }
              } else {
                array = this.cache(array, init, "arr", true);
                body = __node(7, [
                  __node(
                    23,
                    38,
                    3964,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __node(
                          23,
                          37,
                          3964,
                          __node(
                            23,
                            31,
                            3964,
                            { ident: __wrap(value) },
                            true
                          ),
                          true
                        ),
                        value: __node(1, __wrap(array), __wrap(index))
                      }
                    },
                    true
                  ),
                  __wrap(body)
                ]);
                if (!length) {
                  length = __node(23, 60, 3968, {
                    op: "+",
                    node: __node(1, __wrap(array), __node(12, "length"))
                  });
                } else {
                  init.push(__node(
                    23,
                    38,
                    3970,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __node(
                          23,
                          37,
                          3970,
                          __node(
                            23,
                            31,
                            3970,
                            { ident: __wrap(length) },
                            true
                          ),
                          true
                        ),
                        value: __node(23, 60, 3970, {
                          op: "+",
                          node: __node(1, __wrap(array), __node(12, "length"))
                        })
                      }
                    },
                    true
                  ));
                }
              }
              return __node(7, [
                __wrap(init),
                __node(
                  9,
                  __node(21, "__promiseLoop"),
                  [
                    __node(23, 60, 3974, { op: "+", node: __wrap(parallelism) }),
                    __wrap(length),
                    __node(
                      9,
                      __node(21, "__promise"),
                      [
                        __node(23, 117, 3974, {
                          op: "",
                          node: __node(
                            20,
                            [__node(27, __wrap(index))],
                            __wrap(body),
                            true,
                            false,
                            false,
                            void 0,
                            true
                          )
                        })
                      ]
                    )
                  ]
                )
              ]);
            
            }
          }.call(this),
            options: void 0,
            params: [
              ["const", "("],
              ["ident", "parallelism", "ident", "Expression"],
              ["const", ")"],
              ["ident", "value", "ident", "Declarable"],
              [
                "ident",
                "index",
                "many",
                "?",
                "sequence",
                ["const", ","],
                ["ident", "value", "ident", "Identifier"],
                [
                  "ident",
                  "length",
                  "many",
                  "?",
                  "sequence",
                  ["const", ","],
                  ["this", "ident", "Identifier"]
                ]
              ],
              ["const", "in"],
              ["ident", "array"],
              ["ident", "body", "ident", "GeneratorBody"]
            ],
            names: "promisefor",
            id: 163
          },
          {
            code: function (macroFullData, __wrap, __node, __const) {
              var body, index, init, key, keys, macroData, macroName, object, own,
                  parallelism, type, value;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              parallelism = macroData.parallelism;
              key = macroData.key;
              value = macroData.value;
              type = macroData.type;
              object = macroData.object;
              body = macroData.body;
              own = type === "of";
              init = [];
              object = this.cache(object, init, "obj", true);
              index = null;
              if (value) {
                index = value.index;
                value = this.macroExpand1(value.value);
              }
              if (value) {
                body = __node(7, [
                  __node(
                    23,
                    38,
                    3987,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __node(
                          23,
                          37,
                          3987,
                          __node(
                            23,
                            31,
                            3987,
                            { ident: __wrap(value) },
                            true
                          ),
                          true
                        ),
                        value: __node(1, __wrap(object), __wrap(key))
                      }
                    },
                    true
                  ),
                  __wrap(body)
                ]);
              }
              keys = this.tmp("keys", true, "stringArray");
              return __node(7, [
                __wrap(init),
                __node(
                  23,
                  38,
                  3993,
                  {
                    macroName: "let",
                    macroData: {
                      declarable: __node(
                        23,
                        37,
                        3993,
                        __node(
                          23,
                          31,
                          3993,
                          { ident: __wrap(keys) },
                          true
                        ),
                        true
                      ),
                      value: __node(23, 17, 3993, {
                        macroName: "if",
                        macroData: {
                          test: __wrap(own),
                          body: __node(
                            9,
                            __node(21, "__keys"),
                            [__wrap(object)]
                          ),
                          elseIfs: [],
                          elseBody: __node(
                            9,
                            __node(21, "__allkeys"),
                            [__wrap(object)]
                          )
                        }
                      })
                    }
                  },
                  true
                ),
                __node(
                  23,
                  163,
                  3997,
                  {
                    macroName: "promisefor",
                    macroData: {
                      parallelism: __wrap(parallelism),
                      value: __node(
                        23,
                        37,
                        3997,
                        __node(
                          23,
                          31,
                          3997,
                          { ident: __wrap(key) },
                          true
                        ),
                        true
                      ),
                      index: { value: __wrap(index) },
                      array: __wrap(keys),
                      body: __wrap(body)
                    }
                  },
                  true
                )
              ]);
            },
            options: void 0,
            params: [
              ["const", "("],
              ["ident", "parallelism", "ident", "Expression"],
              ["const", ")"],
              ["ident", "key", "ident", "Identifier"],
              [
                "ident",
                "value",
                "many",
                "?",
                "sequence",
                ["const", ","],
                ["ident", "value", "ident", "Declarable"],
                [
                  "ident",
                  "index",
                  "many",
                  "?",
                  "sequence",
                  ["const", ","],
                  ["this", "ident", "Identifier"]
                ]
              ],
              [
                "ident",
                "type",
                "choice",
                ["const", "of"],
                ["const", "ofall"]
              ],
              ["ident", "object"],
              ["ident", "body", "ident", "GeneratorBody"]
            ],
            names: "promisefor",
            id: 164
          },
          {
            code: function (macroFullData, __wrap, __node, __const) {
              var body, index, iterator, macroData, macroName, parallelism, value;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              parallelism = macroData.parallelism;
              value = macroData.value;
              index = macroData.index;
              iterator = macroData.iterator;
              body = macroData.body;
              if (index == null) {
                index = this.tmp("i", true);
              }
              return __node(
                9,
                __node(21, "__promiseIter"),
                [
                  __node(23, 60, 4004, { op: "+", node: __wrap(parallelism) }),
                  __node(
                    9,
                    __node(21, "__iter"),
                    [__wrap(iterator)]
                  ),
                  __node(
                    9,
                    __node(21, "__promise"),
                    [
                      __node(23, 117, 4004, {
                        op: "",
                        node: __node(
                          20,
                          [
                            __node(27, __wrap(value)),
                            __node(27, __wrap(index))
                          ],
                          __wrap(body),
                          true,
                          false,
                          false,
                          void 0,
                          true
                        )
                      })
                    ]
                  )
                ]
              );
            },
            options: void 0,
            params: [
              ["const", "("],
              ["ident", "parallelism", "ident", "Expression"],
              ["const", ")"],
              ["ident", "value", "ident", "Identifier"],
              [
                "ident",
                "index",
                "many",
                "?",
                "sequence",
                ["const", ","],
                ["this", "ident", "Identifier"]
              ],
              ["const", "from"],
              ["ident", "iterator"],
              ["ident", "body", "ident", "GeneratorBody"]
            ],
            names: "promisefor",
            id: 165
          },
          {
            code: function (macroFullData, __wrap, __node, __const) {
              var macroData, macroName;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              return this["const"](this.line());
            },
            options: { type: "number" },
            params: [["const", ""]],
            names: "__LINE__",
            id: 166
          },
          {
            code: function (macroFullData, __wrap, __node, __const) {
              var macroData, macroName;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              return this["const"](this.column());
            },
            options: { type: "number" },
            params: [["const", ""]],
            names: "__COLUMN__",
            id: 167
          },
          {
            code: function (macroFullData, __wrap, __node, __const) {
              var macroData, macroName;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              return this["const"](this.file());
            },
            options: { type: "string" },
            params: [["const", ""]],
            names: "__FILE__",
            id: 168
          },
          {
            code: function (macroFullData, __wrap, __node, __const) {
              var macroData, macroName;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              return this["const"](new Date().getTime());
            },
            options: { type: "number" },
            params: [["const", ""]],
            names: "__DATEMSEC__",
            id: 169
          },
          {
            code: function (macroFullData, __wrap, __node, __const) {
              var macroData, macroName;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              return this["const"](this.version());
            },
            options: { type: "string" },
            params: [["const", ""]],
            names: "__VERSION__",
            id: 170
          }
        ],
        call: [
          {
            code: function (macroFullData, __wrap, __node, __const) {
              var head, macroData, macroName, tail, tmp;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              head = macroData[0];
              tail = arguments[0].macroData.slice(1);
              if (tail.length === 0) {
                return __wrap(head);
              } else if (this.position === "statement") {
                tmp = this.tmp("ref");
                return __node(7, [
                  __node(
                    23,
                    38,
                    506,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __node(
                          23,
                          37,
                          506,
                          __node(
                            23,
                            31,
                            506,
                            { ident: __wrap(tmp) },
                            true
                          ),
                          true
                        ),
                        value: __wrap(head)
                      }
                    },
                    true
                  ),
                  __wrap(tail),
                  __wrap(tmp)
                ]);
              } else {
                return __node(
                  9,
                  __node(21, "__first"),
                  [__wrap(head), __wrap(tail)]
                );
              }
            },
            options: void 0,
            names: "first!",
            id: 58
          },
          {
            code: function (macroFullData, __wrap, __node, __const) {
              var _ref, finish, macroData, macroName, start;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              start = arguments[0].macroData.slice(0, -1);
              finish = (_ref = arguments[0].macroData)[_ref.length - 1];
              if (start.length === 0) {
                return __wrap(finish);
              } else {
                return __node(7, [__wrap(start), __wrap(finish)]);
              }
            },
            options: void 0,
            names: "last!",
            id: 59
          },
          {
            code: function (macroFullData, __wrap, __node, __const) {
              var body, func, macroData, macroName, ran, silentFail;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              func = macroData[0];
              silentFail = macroData[1];
              if (this.isFunc(func)) {
                body = this.funcBody(func);
                ran = this.tmp("once", true, "boolean");
                func = this.rewrap(this.func(
                  this.funcParams(func),
                  __node(7, [
                    __node(
                      23,
                      17,
                      2417,
                      {
                        macroName: "if",
                        macroData: {
                          test: __wrap(ran),
                          body: __node(
                            23,
                            17,
                            2418,
                            {
                              macroName: "if",
                              macroData: {
                                test: __wrap(silentFail),
                                body: __node(
                                  23,
                                  39,
                                  2419,
                                  { macroName: "return", macroData: {} },
                                  true
                                ),
                                elseIfs: [],
                                elseBody: __node(
                                  23,
                                  11,
                                  2421,
                                  {
                                    op: "throw",
                                    node: __node(
                                      9,
                                      __node(21, "Error"),
                                      [__node(12, "Attempted to call function more than once")]
                                    )
                                  },
                                  true
                                )
                              }
                            },
                            true
                          ),
                          elseIfs: [],
                          elseBody: __node(
                            23,
                            30,
                            2423,
                            { left: __wrap(ran), op: ":=", right: __const("true") },
                            true
                          )
                        }
                      },
                      true
                    ),
                    __wrap(body)
                  ]),
                  this.funcIsAutoReturn(func),
                  this.funcIsBound(func),
                  this.funcIsCurried(func),
                  this.funcAsType(func),
                  this.funcIsGenerator(func),
                  this.funcGeneric(func)
                ));
                return __node(7, [
                  __node(
                    23,
                    38,
                    2432,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __node(
                          23,
                          37,
                          2432,
                          __node(
                            23,
                            31,
                            2432,
                            { isMutable: "mutable", ident: __wrap(ran) },
                            true
                          ),
                          true
                        ),
                        value: __const("false")
                      }
                    },
                    true
                  ),
                  __wrap(func)
                ]);
              } else if (this.isConst(silentFail) && !this.value(silentFail)) {
                return __node(
                  9,
                  __node(21, "__once"),
                  [__wrap(func)]
                );
              } else {
                return __node(
                  9,
                  __node(21, "__once"),
                  [__wrap(func), __wrap(silentFail)]
                );
              }
            },
            options: void 0,
            names: "once!",
            id: 126
          },
          {
            code: function() {
            var __num, __typeof;
            __num = function (num) {
              if (typeof num !== "number") {
                throw TypeError("Expected a number, got " + __typeof(num));
              } else {
                return num;
              }
            };
            __typeof = (function () {
              var _toString;
              _toString = Object.prototype.toString;
              return function (o) {
                if (o === void 0) {
                  return "Undefined";
                } else if (o === null) {
                  return "Null";
                } else {
                  return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
                }
              };
            }());
            return function (macroFullData, __wrap, __node, __const) {
              var _this, macroData, macroName, node;
              _this = this;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              node = macroData[0];
              if (__num(macroData.length) > 1) {
                this.error("fulfilled! only expects one argument");
              }
              return this.mutateLast(
                node || this.noop(),
                function (n) {
                  return __node(
                    9,
                    __node(
                      1,
                      __node(21, "__defer"),
                      __node(12, "fulfilled")
                    ),
                    [__wrap(n)]
                  );
                },
                true
              );
            
            }
          }.call(this),
            options: void 0,
            names: "fulfilled!",
            id: 156
          },
          {
            code: function() {
            var __num, __typeof;
            __num = function (num) {
              if (typeof num !== "number") {
                throw TypeError("Expected a number, got " + __typeof(num));
              } else {
                return num;
              }
            };
            __typeof = (function () {
              var _toString;
              _toString = Object.prototype.toString;
              return function (o) {
                if (o === void 0) {
                  return "Undefined";
                } else if (o === null) {
                  return "Null";
                } else {
                  return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
                }
              };
            }());
            return function (macroFullData, __wrap, __node, __const) {
              var _this, macroData, macroName, node;
              _this = this;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              node = macroData[0];
              if (__num(macroData.length) > 1) {
                this.error("rejected! only expects one argument");
              }
              return this.mutateLast(
                node || this.noop(),
                function (n) {
                  return __node(
                    9,
                    __node(
                      1,
                      __node(21, "__defer"),
                      __node(12, "rejected")
                    ),
                    [__wrap(n)]
                  );
                },
                true
              );
            
            }
          }.call(this),
            options: void 0,
            names: "rejected!",
            id: 157
          },
          {
            code: function() {
            var __num, __typeof;
            __num = function (num) {
              if (typeof num !== "number") {
                throw TypeError("Expected a number, got " + __typeof(num));
              } else {
                return num;
              }
            };
            __typeof = (function () {
              var _toString;
              _toString = Object.prototype.toString;
              return function (o) {
                if (o === void 0) {
                  return "Undefined";
                } else if (o === null) {
                  return "Null";
                } else {
                  return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
                }
              };
            }());
            return function (macroFullData, __wrap, __node, __const) {
              var macroData, macroName, node;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              node = macroData[0];
              if (__num(macroData.length) > 1) {
                this.error("from-promise! only expects one argument");
              }
              return __node(
                9,
                __node(21, "__fromPromise"),
                [__wrap(node)]
              );
            
            }
          }.call(this),
            options: void 0,
            names: "fromPromise!",
            id: 158
          },
          {
            code: function() {
            var __num, __slice, __typeof;
            __num = function (num) {
              if (typeof num !== "number") {
                throw TypeError("Expected a number, got " + __typeof(num));
              } else {
                return num;
              }
            };
            __slice = Array.prototype.slice;
            __typeof = (function () {
              var _toString;
              _toString = Object.prototype.toString;
              return function (o) {
                if (o === void 0) {
                  return "Undefined";
                } else if (o === null) {
                  return "Null";
                } else {
                  return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
                }
              };
            }());
            return function (macroFullData, __wrap, __node, __const) {
              var _this, args, func, head, macroData, macroName, node, tail;
              _this = this;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              node = macroData[0];
              if (__num(macroData.length) > 1) {
                this.error("to-promise! only expects one argument");
              }
              if (!this.isCall(node)) {
                this.error("to-promise! call expression must be a call", node);
              }
              func = this.callFunc(node);
              args = this.callArgs(node);
              if (this.callIsNew(node)) {
                args = this.array(args);
                return __node(
                  9,
                  __node(21, "__toPromise"),
                  [
                    __node(21, "__new"),
                    __wrap(func),
                    __wrap(args)
                  ]
                );
              } else if (this.callIsApply(node)) {
                if (args.length === 0 || !this.isSpread(args[0])) {
                  head = args[0];
                  tail = this.array(__slice.call(args, 1));
                  return __node(
                    9,
                    __node(21, "__toPromise"),
                    [__wrap(func), __wrap(head), __wrap(tail)]
                  );
                } else {
                  return this.maybeCache(this.array(args), function (setArgs, args) {
                    return __node(
                      9,
                      __node(21, "__toPromise"),
                      [
                        __wrap(func),
                        __node(1, __wrap(setArgs), __node(12, 0)),
                        __node(
                          9,
                          __node(1, __wrap(args), __node(12, "slice")),
                          [__node(12, 1)]
                        )
                      ]
                    );
                  });
                }
              } else {
                args = this.array(args);
                if (this.isAccess(func)) {
                  return this.maybeCache(this.parent(func), function (setParent, parent) {
                    var child;
                    child = _this.child(func);
                    return __node(
                      9,
                      __node(21, "__toPromise"),
                      [
                        __node(1, __wrap(setParent), __wrap(child)),
                        __wrap(parent),
                        __wrap(args)
                      ]
                    );
                  });
                } else {
                  return __node(
                    9,
                    __node(21, "__toPromise"),
                    [__wrap(func), __const("void"), __wrap(args)]
                  );
                }
              }
            
            }
          }.call(this),
            options: { type: "promise" },
            names: "toPromise!",
            id: 159
          },
          {
            code: function() {
            var __num, __typeof;
            __num = function (num) {
              if (typeof num !== "number") {
                throw TypeError("Expected a number, got " + __typeof(num));
              } else {
                return num;
              }
            };
            __typeof = (function () {
              var _toString;
              _toString = Object.prototype.toString;
              return function (o) {
                if (o === void 0) {
                  return "Undefined";
                } else if (o === null) {
                  return "Null";
                } else {
                  return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
                }
              };
            }());
            return function (macroFullData, __wrap, __node, __const) {
              var macroData, macroName, node;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              node = macroData[0];
              if (__num(macroData.length) > 1) {
                this.error("some-promise! only expects one argument");
              }
              if (!this.hasType(node, "array")) {
                this.error("some-promise! should be used on an Array", node);
              }
              return __node(
                9,
                __node(21, "__somePromise"),
                [__wrap(node)]
              );
            
            }
          }.call(this),
            options: void 0,
            names: "somePromise!",
            id: 160
          },
          {
            code: function() {
            var __num, __typeof;
            __num = function (num) {
              if (typeof num !== "number") {
                throw TypeError("Expected a number, got " + __typeof(num));
              } else {
                return num;
              }
            };
            __typeof = (function () {
              var _toString;
              _toString = Object.prototype.toString;
              return function (o) {
                if (o === void 0) {
                  return "Undefined";
                } else if (o === null) {
                  return "Null";
                } else {
                  return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
                }
              };
            }());
            return function (macroFullData, __wrap, __node, __const) {
              var macroData, macroName, node;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              node = macroData[0];
              if (__num(macroData.length) > 1) {
                this.error("some-promise! only expects one argument");
              }
              if (!this.hasType(node, "array") && !this.hasType(node, "object")) {
                this.error(
                  "every-promise! should be used on an Array or Object",
                  node
                );
              }
              return __node(
                9,
                __node(21, "__everyPromise"),
                [__wrap(node)]
              );
            
            }
          }.call(this),
            options: void 0,
            names: "everyPromise!",
            id: 161
          },
          {
            code: function() {
            var __num, __typeof;
            __num = function (num) {
              if (typeof num !== "number") {
                throw TypeError("Expected a number, got " + __typeof(num));
              } else {
                return num;
              }
            };
            __typeof = (function () {
              var _toString;
              _toString = Object.prototype.toString;
              return function (o) {
                if (o === void 0) {
                  return "Undefined";
                } else if (o === null) {
                  return "Null";
                } else {
                  return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
                }
              };
            }());
            return function (macroFullData, __wrap, __node, __const) {
              var hasValue, macroData, macroName, milliseconds, value;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              milliseconds = macroData[0];
              value = macroData[1];
              if (!this.hasType(milliseconds, "number")) {
                this.error("delay! should take a number in milliseconds");
              }
              hasValue = !this.isConst(value) || this.value(value) !== void 0;
              if (this.isConst(milliseconds) && typeof this.value(milliseconds) === "number" && __num(this.value(milliseconds)) <= 0) {
                if (hasValue) {
                  return __node(
                    9,
                    __node(
                      1,
                      __node(21, "__defer"),
                      __node(12, "fulfilled")
                    ),
                    [__wrap(value)]
                  );
                } else {
                  return __node(9, __node(
                    1,
                    __node(21, "__defer"),
                    __node(12, "fulfilled")
                  ));
                }
              } else if (hasValue) {
                return __node(
                  9,
                  __node(21, "__delay"),
                  [__wrap(milliseconds), __wrap(value)]
                );
              } else {
                return __node(
                  9,
                  __node(21, "__delay"),
                  [__wrap(milliseconds)]
                );
              }
            
            }
          }.call(this),
            options: void 0,
            names: "delay!",
            id: 162
          }
        ]
      };
    });
  }(typeof module !== "undefined" && typeof require === "function" ? require : void 0));

  if (typeof define === "function" && define.amd) {
    define(function () { return GorillaScript; });
  } else {
    root.GorillaScript = GorillaScript;
  }
}(this));