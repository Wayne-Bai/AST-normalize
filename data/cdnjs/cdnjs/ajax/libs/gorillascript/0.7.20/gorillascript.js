;(function (root) {
  var GorillaScript = (function (realRequire) {
    function require(path) {
      var has = Object.prototype.hasOwnProperty;
      if (has.call(require._cache, path)) {
        return require._cache[path];
      } else if (has.call(require, path)) {
        var func = require[path];
        delete require[path];
        return require._cache[path] = func.call({});
      } else if (realRequire) {
        return realRequire(path);
      }
    }
    require._cache = {};
    require['./utils'] = function () {
    var module = { exports: this };
    var exports = this;
    (function (GLOBAL) {
      "use strict";
      var __create, __defer, __generator, __generatorToPromise, __genericFunc,
          __getInstanceof, __in, __isArray, __isObject, __name, __num, __owns,
          __promise, __slice, __strnum, __toArray, __toPromise, __typeof, _ref,
          Cache, fs, inspect, isPrimordial, mkdirp, mkdirpSync, path, setImmediate,
          WeakMap, writeFileWithMkdirp;
      __create = typeof Object.create === "function" ? Object.create
        : function (x) {
          function F() {}
          F.prototype = x;
          return new F();
        };
      __defer = (function () {
        function __defer() {
          var deferred, isError, value;
          isError = false;
          value = null;
          deferred = [];
          function complete(newIsError, newValue) {
            var funcs;
            if (deferred) {
              funcs = deferred;
              deferred = null;
              isError = newIsError;
              value = newValue;
              if (funcs.length) {
                setImmediate(function () {
                  var _end, i;
                  for (i = 0, _end = funcs.length; i < _end; ++i) {
                    funcs[i]();
                  }
                });
              }
            }
          }
          return {
            promise: {
              then: function (onFulfilled, onRejected, allowSync) {
                var _ref, fulfill, promise, reject;
                if (allowSync !== true) {
                  allowSync = void 0;
                }
                _ref = __defer();
                promise = _ref.promise;
                fulfill = _ref.fulfill;
                reject = _ref.reject;
                function step() {
                  var f, result;
                  try {
                    if (isError) {
                      f = onRejected;
                    } else {
                      f = onFulfilled;
                    }
                    if (typeof f === "function") {
                      result = f(value);
                      if (result && typeof result.then === "function") {
                        result.then(fulfill, reject, allowSync);
                      } else {
                        fulfill(result);
                      }
                    } else {
                      (isError ? reject : fulfill)(value);
                    }
                  } catch (e) {
                    reject(e);
                  }
                }
                if (deferred) {
                  deferred.push(step);
                } else if (allowSync) {
                  step();
                } else {
                  setImmediate(step);
                }
                return promise;
              },
              sync: function () {
                var result, state;
                state = 0;
                result = 0;
                this.then(
                  function (ret) {
                    state = 1;
                    return result = ret;
                  },
                  function (err) {
                    state = 2;
                    return result = err;
                  },
                  true
                );
                switch (state) {
                case 0: throw Error("Promise did not execute synchronously");
                case 1: return result;
                case 2: throw result;
                default: throw Error("Unknown state");
                }
              }
            },
            fulfill: function (value) {
              complete(false, value);
            },
            reject: function (reason) {
              complete(true, reason);
            }
          };
        }
        __defer.fulfilled = function (value) {
          var d;
          d = __defer();
          d.fulfill(value);
          return d.promise;
        };
        __defer.rejected = function (reason) {
          var d;
          d = __defer();
          d.reject(reason);
          return d.promise;
        };
        return __defer;
      }());
      __generator = function (func) {
        return function () {
          var _this, data;
          _this = this;
          data = [this, __slice.call(arguments)];
          return {
            iterator: function () {
              return this;
            },
            send: function () {
              var tmp;
              return {
                done: true,
                value: data ? (tmp = data, data = null, func.apply(tmp[0], tmp[1])) : void 0
              };
            },
            next: function () {
              return this.send();
            },
            "throw": function (err) {
              data = null;
              throw err;
            }
          };
        };
      };
      __generatorToPromise = function (generator, allowSync) {
        if (typeof generator !== "object" || generator === null) {
          throw TypeError("Expected generator to be an Object, got " + __typeof(generator));
        } else {
          if (typeof generator.send !== "function") {
            throw TypeError("Expected generator.send to be a Function, got " + __typeof(generator.send));
          }
          if (typeof generator["throw"] !== "function") {
            throw TypeError("Expected generator.throw to be a Function, got " + __typeof(generator["throw"]));
          }
        }
        if (allowSync == null) {
          allowSync = false;
        } else if (typeof allowSync !== "boolean") {
          throw TypeError("Expected allowSync to be a Boolean, got " + __typeof(allowSync));
        }
        function continuer(verb, arg) {
          var item;
          try {
            item = generator[verb](arg);
          } catch (e) {
            return __defer.rejected(e);
          }
          if (item.done) {
            return __defer.fulfilled(item.value);
          } else {
            return item.value.then(callback, errback, allowSync);
          }
        }
        function callback(value) {
          return continuer("send", value);
        }
        function errback(value) {
          return continuer("throw", value);
        }
        return callback(void 0);
      };
      __genericFunc = function (numArgs, make) {
        var any, cache, result;
        cache = WeakMap();
        any = {};
        function generic() {
          var _ref, current, i, item, type;
          current = cache;
          for (i = numArgs - 1; i >= 0; --i) {
            if ((_ref = arguments[i]) != null) {
              type = _ref;
            } else {
              type = any;
            }
            item = current.get(type);
            if (item == null) {
              if (i === 0) {
                item = make.apply(this, arguments);
              } else {
                item = WeakMap();
              }
              current.set(type, item);
            }
            current = item;
          }
          return current;
        }
        result = generic();
        result.generic = generic;
        return result;
      };
      __getInstanceof = (function () {
        function isAny() {
          return true;
        }
        function isStr(x) {
          return typeof x === "string";
        }
        function isNum(x) {
          return typeof x === "number";
        }
        function isFunc(x) {
          return typeof x === "function";
        }
        function isBool(x) {
          return typeof x === "boolean";
        }
        return function (ctor) {
          if (ctor == null) {
            return isAny;
          } else {
            switch (ctor) {
            case String: return isStr;
            case Number: return isNum;
            case Function: return isFunc;
            case Boolean: return isBool;
            case Array: return __isArray;
            case Object: return __isObject;
            default:
              return function (_x) {
                return _x instanceof ctor;
              };
            }
          }
        };
      }());
      __in = typeof Array.prototype.indexOf === "function"
        ? (function () {
          var indexOf;
          indexOf = Array.prototype.indexOf;
          return function (child, parent) {
            return indexOf.call(parent, child) !== -1;
          };
        }())
        : function (child, parent) {
          var i, len;
          len = +parent.length;
          i = -1;
          while (++i < len) {
            if (child === parent[i] && i in parent) {
              return true;
            }
          }
          return false;
        };
      __isArray = typeof Array.isArray === "function" ? Array.isArray
        : (function () {
          var _toString;
          _toString = Object.prototype.toString;
          return function (x) {
            return _toString.call(x) === "[object Array]";
          };
        }());
      __isObject = function (x) {
        return typeof x === "object" && x !== null;
      };
      __name = function (func) {
        if (typeof func !== "function") {
          throw TypeError("Expected func to be a Function, got " + __typeof(func));
        }
        return func.displayName || func.name || "";
      };
      __num = function (num) {
        if (typeof num !== "number") {
          throw TypeError("Expected a number, got " + __typeof(num));
        } else {
          return num;
        }
      };
      __owns = Object.prototype.hasOwnProperty;
      __promise = function (value, allowSync) {
        var factory;
        if (allowSync == null) {
          allowSync = false;
        } else if (typeof allowSync !== "boolean") {
          throw TypeError("Expected allowSync to be a Boolean, got " + __typeof(allowSync));
        }
        if (typeof value === "function") {
          factory = function () {
            return __generatorToPromise(value.apply(this, arguments));
          };
          factory.sync = function () {
            return __generatorToPromise(
              value.apply(this, arguments),
              true
            ).sync();
          };
          return factory;
        } else {
          return __generatorToPromise(value, allowSync);
        }
      };
      __slice = Array.prototype.slice;
      __strnum = function (strnum) {
        var type;
        type = typeof strnum;
        if (type === "string") {
          return strnum;
        } else if (type === "number") {
          return String(strnum);
        } else {
          throw TypeError("Expected a string or number, got " + __typeof(strnum));
        }
      };
      __toArray = function (x) {
        if (x == null) {
          throw TypeError("Expected an object, got " + __typeof(x));
        } else if (__isArray(x)) {
          return x;
        } else if (typeof x === "string") {
          return x.split("");
        } else {
          return __slice.call(x);
        }
      };
      __toPromise = function (func, context, args) {
        var d;
        if (typeof func !== "function") {
          throw TypeError("Expected func to be a Function, got " + __typeof(func));
        }
        d = __defer();
        func.apply(context, __toArray(args).concat([
          function (err, value) {
            if (err != null) {
              d.reject(err);
            } else {
              d.fulfill(value);
            }
          }
        ]));
        return d.promise;
      };
      __typeof = (function () {
        var _toString;
        _toString = Object.prototype.toString;
        return function (o) {
          if (o === void 0) {
            return "Undefined";
          } else if (o === null) {
            return "Null";
          } else {
            return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
          }
        };
      }());
      setImmediate = typeof GLOBAL.setImmediate === "function" ? GLOBAL.setImmediate
        : typeof process !== "undefined" && typeof process.nextTick === "function"
        ? (function () {
          var nextTick;
          nextTick = process.nextTick;
          return function (func) {
            var args;
            if (typeof func !== "function") {
              throw TypeError("Expected func to be a Function, got " + __typeof(func));
            }
            args = __slice.call(arguments, 1);
            if (args.length) {
              return nextTick(function () {
                func.apply(void 0, __toArray(args));
              });
            } else {
              return nextTick(func);
            }
          };
        }())
        : function (func) {
          var args;
          if (typeof func !== "function") {
            throw TypeError("Expected func to be a Function, got " + __typeof(func));
          }
          args = __slice.call(arguments, 1);
          if (args.length) {
            return setTimeout(
              function () {
                func.apply(void 0, __toArray(args));
              },
              0
            );
          } else {
            return setTimeout(func, 0);
          }
        };
      WeakMap = typeof GLOBAL.WeakMap === "function" ? GLOBAL.WeakMap
        : (WeakMap = (function () {
          var _WeakMap_prototype, defProp, isExtensible;
          function WeakMap() {
            var _this;
            _this = this instanceof WeakMap ? this : __create(_WeakMap_prototype);
            _this._keys = [];
            _this._values = [];
            _this._chilly = [];
            _this._uid = createUid();
            return _this;
          }
          _WeakMap_prototype = WeakMap.prototype;
          WeakMap.displayName = "WeakMap";
          function uidRand() {
            return Math.random().toString(36).slice(2);
          }
          function createUid() {
            return __strnum(uidRand()) + "-" + __strnum(new Date().getTime()) + "-" + __strnum(uidRand()) + "-" + __strnum(uidRand());
          }
          isExtensible = Object.isExtensible || function () {
            return true;
          };
          function check(key) {
            var chilly, uid;
            uid = this._uid;
            if (__owns.call(key, uid)) {
              chilly = this._chilly;
              if (chilly.indexOf(key) === -1) {
                chilly.push(key);
                this._keys.push(key);
                this._values.push(key[uid]);
              }
            }
          }
          _WeakMap_prototype.get = function (key) {
            var _ref, index;
            if (Object(key) !== key) {
              throw TypeError("Invalid value used as weak map key");
            }
            if (isExtensible(key)) {
              if (__owns.call(key, _ref = this._uid)) {
                return key[_ref];
              }
            } else {
              check.call(this, key);
              index = this._keys.indexOf(key);
              if (index === -1) {
                return;
              } else {
                return this._values[index];
              }
            }
          };
          _WeakMap_prototype.has = function (key) {
            if (Object(key) !== key) {
              throw TypeError("Invalid value used as weak map key");
            }
            if (isExtensible(key)) {
              return __owns.call(key, this._uid);
            } else {
              check.call(this, key);
              return this._keys.indexOf(key) !== -1;
            }
          };
          if (typeof Object.defineProperty === "function") {
            defProp = Object.defineProperty;
          } else {
            defProp = function (o, k, d) {
              o[k] = d.value;
            };
          }
          _WeakMap_prototype.set = function (key, value) {
            var index, keys;
            if (Object(key) !== key) {
              throw TypeError("Invalid value used as weak map key");
            }
            if (isExtensible(key)) {
              defProp(key, this._uid, { configurable: true, writable: true, enumerable: false, value: value });
            } else {
              check.call(this, key);
              keys = this._keys;
              index = keys.indexOf(key);
              if (index === -1) {
                index = keys.length;
                keys[index] = key;
              }
              this._values[index] = value;
            }
          };
          _WeakMap_prototype["delete"] = function (key) {
            var index, keys;
            if (Object(key) !== key) {
              throw TypeError("Invalid value used as weak map key");
            }
            if (isExtensible(key)) {
              delete key[this._uid];
            } else {
              check.call(this, key);
              keys = this._keys;
              index = keys.indexOf(key);
              if (index !== -1) {
                keys.splice(index, 1);
                this._values.splice(index, 1);
              }
            }
          };
          return WeakMap;
        }()));
      if ((_ref = require("util")) != null) {
        inspect = _ref.inspect;
      }
      path = require("path");
      fs = require("fs");
      function stringRepeat(text, count) {
        if (__num(count) < 1) {
          return "";
        } else if (count === 1) {
          return text;
        } else if (__num(count) & 1) {
          return __strnum(text) + __strnum(stringRepeat(text, __num(count) - 1));
        } else {
          return stringRepeat(__strnum(text) + __strnum(text), __num(count) / 2);
        }
      }
      function padLeft(text, len, padding) {
        return __strnum(stringRepeat(padding, __num(len) - __num(text.length))) + __strnum(text);
      }
      function padRight(text, len, padding) {
        return __strnum(text) + __strnum(stringRepeat(padding, __num(len) - __num(text.length)));
      }
      Cache = __genericFunc(2, function (TKey, TValue) {
        var _instanceof_TKey, _instanceof_TValue;
        _instanceof_TKey = __getInstanceof(TKey);
        _instanceof_TValue = __getInstanceof(TValue);
        return (function () {
          var _Cache_prototype;
          function Cache() {
            var _this;
            _this = this instanceof Cache ? this : __create(_Cache_prototype);
            _this.weakmap = WeakMap();
            return _this;
          }
          _Cache_prototype = Cache.prototype;
          Cache.displayName = "Cache<" + (TKey != null ? __name(TKey) : "") + ", " + (TValue != null ? __name(TValue) : "") + ">";
          _Cache_prototype.get = function (key) {
            if (!_instanceof_TKey(key)) {
              throw TypeError("Expected key to be a " + __name(TKey) + ", got " + __typeof(key));
            }
            return this.weakmap.get(key);
          };
          _Cache_prototype.getOrAdd = function (key, factory) {
            var value, weakmap;
            if (!_instanceof_TKey(key)) {
              throw TypeError("Expected key to be a " + __name(TKey) + ", got " + __typeof(key));
            }
            if (typeof factory !== "function") {
              throw TypeError("Expected factory to be a Function, got " + __typeof(factory));
            }
            weakmap = this.weakmap;
            value = weakmap.get(key);
            if (value === void 0) {
              value = factory(key);
              if (!_instanceof_TValue(value)) {
                throw Error("Expected factory result to be a " + __name(TValue) + ", got " + __typeof(value));
              }
              weakmap.set(key, value);
            }
            return value;
          };
          return Cache;
        }());
      });
      function quote(value) {
        if (typeof value !== "string") {
          throw TypeError("Expected value to be a String, got " + __typeof(value));
        }
        if (inspect) {
          return inspect(value);
        } else if (value.indexOf("'") === -1) {
          return "'" + __strnum(JSON.stringify(value).slice(1, -1)) + "'";
        } else {
          return JSON.stringify(value);
        }
      }
      function unique(items) {
        var _arr, _i, _len, item, result;
        result = [];
        for (_arr = __toArray(items), _i = 0, _len = _arr.length; _i < _len; ++_i) {
          item = _arr[_i];
          if (!__in(item, result)) {
            result.push(item);
          }
        }
        return result;
      }
      function findPackageJson(dir) {
        var filepath, parent;
        filepath = path.join(dir, "package.json");
        if (fs.existsSync(filepath)) {
          return filepath;
        } else {
          parent = path.normalize(path.join(dir, ".."));
          if (parent !== dir) {
            return findPackageJson(parent);
          }
        }
      }
      function getPackageVersion(filename) {
        var packageJsonFilename, version;
        if (typeof filename !== "string" || !fs || !path) {
          return "";
        }
        try {
          packageJsonFilename = findPackageJson(path.dirname(filename));
        } catch (e) {}
        if (!packageJsonFilename) {
          return "";
        }
        try {
          version = JSON.parse(fs.readFileSync(packageJsonFilename)).version;
        } catch (e) {}
        if (typeof version === "string") {
          return version;
        } else {
          return "";
        }
      }
      isPrimordial = (function () {
        var PRIMORDIAL_GLOBALS;
        PRIMORDIAL_GLOBALS = {
          Object: true,
          String: true,
          Number: true,
          Boolean: true,
          Function: true,
          Array: true,
          Math: true,
          JSON: true,
          Date: true,
          RegExp: true,
          Error: true,
          RangeError: true,
          ReferenceError: true,
          SyntaxError: true,
          TypeError: true,
          URIError: true,
          escape: true,
          unescape: true,
          parseInt: true,
          parseFloat: true,
          isNaN: true,
          isFinite: true,
          decodeURI: true,
          decodeURIComponent: true,
          encodeURI: true,
          encodeURIComponent: true
        };
        return function (name) {
          if (typeof name !== "string") {
            throw TypeError("Expected name to be a String, got " + __typeof(name));
          }
          return __owns.call(PRIMORDIAL_GLOBALS, name);
        };
      }());
      function fsExistsPromise(path) {
        var defer;
        defer = __defer();
        fs.exists(path, defer.fulfill);
        return defer.promise;
      }
      mkdirp = __promise(function (dirpath, mode, sync) {
        var _arr, _e, _i, _len, _send, _state, _step, _throw, acc, current, e,
            exists, part;
        _state = 0;
        function _close() {
          _state = 14;
        }
        function _step(_received) {
          while (true) {
            switch (_state) {
            case 0:
              if (mode == null) {
                mode = 511 & ~__num(process.umask());
              }
              acc = "";
              _arr = __toArray(dirpath.split(/[\/\\]/g));
              _i = 0;
              _len = _arr.length;
              ++_state;
            case 1:
              _state = _i < _len ? 2 : 13;
              break;
            case 2:
              part = _arr[_i];
              current = path.resolve(path.join(acc, part));
              _state = sync ? 3 : 4;
              break;
            case 3:
              exists = fs.existsSync(current);
              _state = 6;
              break;
            case 4:
              ++_state;
              return { done: false, value: fsExistsPromise(current) };
            case 5:
              exists = _received;
              ++_state;
            case 6:
              _state = !exists ? 7 : 11;
              break;
            case 7:
              _state = sync ? 8 : 9;
              break;
            case 8:
              fs.mkdirSync(current, mode);
              _state = 11;
              break;
            case 9:
              _state = 11;
              return {
                done: false,
                value: __toPromise(fs.mkdir, fs, [current, mode])
              };
            case 10: throw Error("Unable to create directory '" + __strnum(current) + "' (Error code: " + __strnum(e.code) + ")");
            case 11:
              acc = current;
              ++_state;
            case 12:
              ++_i;
              _state = 1;
              break;
            case 13:
              ++_state;
            case 14:
              return { done: true, value: void 0 };
            default: throw Error("Unknown state: " + _state);
            }
          }
        }
        function _throw(_e) {
          if (_state >= 7 && _state <= 9) {
            e = _e;
            _state = 10;
          } else {
            _close();
            throw _e;
          }
        }
        function _send(_received) {
          while (true) {
            try {
              return _step(_received);
            } catch (_e) {
              _throw(_e);
            }
          }
        }
        return {
          close: _close,
          iterator: function () {
            return this;
          },
          next: function () {
            return _send(void 0);
          },
          send: _send,
          "throw": function (_e) {
            _throw(_e);
            return _send(void 0);
          }
        };
      });
      mkdirpSync = __generator(function (dirpath, mode) {
        return mkdirp.sync(dirpath, mode, true);
      });
      writeFileWithMkdirp = __promise(function (filepath, text, sync) {
        var _e, _send, _state, _step, _throw;
        _state = 0;
        function _close() {
          _state = 4;
        }
        function _step(_received) {
          while (true) {
            switch (_state) {
            case 0:
              _state = sync ? 1 : 2;
              break;
            case 1:
              mkdirpSync(path.dirname(filepath));
              fs.writeFileSync(filepath, text, "utf8");
              _state = 4;
              break;
            case 2:
              ++_state;
              return { done: false, value: mkdirp(path.dirname(filepath)) };
            case 3:
              ++_state;
              return {
                done: false,
                value: __toPromise(fs.writeFile, fs, [filepath, text, "utf8"])
              };
            case 4:
              return { done: true, value: void 0 };
            default: throw Error("Unknown state: " + _state);
            }
          }
        }
        function _throw(_e) {
          _close();
          throw _e;
        }
        function _send(_received) {
          try {
            return _step(_received);
          } catch (_e) {
            _throw(_e);
          }
        }
        return {
          close: _close,
          iterator: function () {
            return this;
          },
          next: function () {
            return _send(void 0);
          },
          send: _send,
          "throw": function (_e) {
            _throw(_e);
            return _send(void 0);
          }
        };
      });
      function writeFileWithMkdirpSync(filepath, text) {
        return writeFile.sync(filepath, text, true);
      }
      exports.stringRepeat = stringRepeat;
      exports.padLeft = padLeft;
      exports.padRight = padRight;
      exports.Cache = Cache;
      exports.quote = quote;
      exports.unique = unique;
      exports.getPackageVersion = getPackageVersion;
      exports.isPrimordial = isPrimordial;
      exports.mkdirp = mkdirp;
      exports.mkdirpSync = mkdirpSync;
      exports.writeFileWithMkdirp = writeFileWithMkdirp;
      exports.writeFileWithMkdirpSync = writeFileWithMkdirpSync;
    }.call(this, typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : this));
    
    return module.exports;
  };
  require['./jsutils'] = function () {
    var module = { exports: this };
    var exports = this;
    (function () {
      "use strict";
      var __bind, __create, __in, __isArray, __lte, __num, __owns, __slice,
          __strnum, __toArray, __typeof, isAcceptableIdent, padLeft, toJSSource;
      __bind = function (parent, child) {
        var func;
        if (parent == null) {
          throw TypeError("Expected parent to be an object, got " + __typeof(parent));
        }
        func = parent[child];
        if (typeof func !== "function") {
          throw Error("Trying to bind child '" + String(child) + "' which is not a function");
        }
        return function () {
          return func.apply(parent, arguments);
        };
      };
      __create = typeof Object.create === "function" ? Object.create
        : function (x) {
          function F() {}
          F.prototype = x;
          return new F();
        };
      __in = typeof Array.prototype.indexOf === "function"
        ? (function () {
          var indexOf;
          indexOf = Array.prototype.indexOf;
          return function (child, parent) {
            return indexOf.call(parent, child) !== -1;
          };
        }())
        : function (child, parent) {
          var i, len;
          len = +parent.length;
          i = -1;
          while (++i < len) {
            if (child === parent[i] && i in parent) {
              return true;
            }
          }
          return false;
        };
      __isArray = typeof Array.isArray === "function" ? Array.isArray
        : (function () {
          var _toString;
          _toString = Object.prototype.toString;
          return function (x) {
            return _toString.call(x) === "[object Array]";
          };
        }());
      __lte = function (x, y) {
        var type;
        type = typeof x;
        if (type !== "number" && type !== "string") {
          throw TypeError("Cannot compare a non-number/string: " + type);
        } else if (type !== typeof y) {
          throw TypeError("Cannot compare elements of different types: " + type + " vs " + typeof y);
        } else {
          return x <= y;
        }
      };
      __num = function (num) {
        if (typeof num !== "number") {
          throw TypeError("Expected a number, got " + __typeof(num));
        } else {
          return num;
        }
      };
      __owns = Object.prototype.hasOwnProperty;
      __slice = Array.prototype.slice;
      __strnum = function (strnum) {
        var type;
        type = typeof strnum;
        if (type === "string") {
          return strnum;
        } else if (type === "number") {
          return String(strnum);
        } else {
          throw TypeError("Expected a string or number, got " + __typeof(strnum));
        }
      };
      __toArray = function (x) {
        if (x == null) {
          throw TypeError("Expected an object, got " + __typeof(x));
        } else if (__isArray(x)) {
          return x;
        } else if (typeof x === "string") {
          return x.split("");
        } else {
          return __slice.call(x);
        }
      };
      __typeof = (function () {
        var _toString;
        _toString = Object.prototype.toString;
        return function (o) {
          if (o === void 0) {
            return "Undefined";
          } else if (o === null) {
            return "Null";
          } else {
            return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
          }
        };
      }());
      padLeft = require("./utils").padLeft;
      isAcceptableIdent = (function () {
        var IDENTIFIER_REGEX, IDENTIFIER_UNICODE_REGEX, RESERVED;
        IDENTIFIER_REGEX = /^[a-zA-Z_\$][a-zA-Z_\$0-9]*$/;
        IDENTIFIER_UNICODE_REGEX = /^[a-zA-Z_\$\u00a0-\uffff][a-zA-Z_\$0-9\u00a0-\uffff]*$/;
        RESERVED = [
          "arguments",
          "break",
          "case",
          "catch",
          "class",
          "const",
          "continue",
          "debugger",
          "default",
          "delete",
          "do",
          "else",
          "enum",
          "export",
          "extends",
          "eval",
          "false",
          "finally",
          "for",
          "function",
          "if",
          "implements",
          "import",
          "in",
          "Infinity",
          "instanceof",
          "interface",
          "let",
          "NaN",
          "new",
          "null",
          "package",
          "private",
          "protected",
          "public",
          "return",
          "static",
          "super",
          "switch",
          "this",
          "throw",
          "true",
          "try",
          "typeof",
          "undefined",
          "var",
          "void",
          "while",
          "with",
          "yield"
        ];
        return function (name, allowUnicode) {
          var regex;
          if (typeof name !== "string") {
            throw TypeError("Expected name to be a String, got " + __typeof(name));
          }
          if (allowUnicode == null) {
            allowUnicode = false;
          } else if (typeof allowUnicode !== "boolean") {
            throw TypeError("Expected allowUnicode to be a Boolean, got " + __typeof(allowUnicode));
          }
          if (allowUnicode) {
            regex = IDENTIFIER_UNICODE_REGEX;
          } else {
            regex = IDENTIFIER_REGEX;
          }
          return regex.test(name) && !__in(name, RESERVED);
        };
      }());
      toJSSource = (function () {
        var LARGE_CHARACTER_SIZE, LARGE_CONTAINER_SIZE, types;
        function indent(sb, amount, space) {
          var i;
          if (space == null) {
            space = "  ";
          }
          for (i = 0, __num(amount); i < amount; ++i) {
            sb(space);
          }
        }
        function moreIndent(options) {
          var _o;
          _o = __create(options);
          _o.indent = __num(options.indent) + 1;
          return _o;
        }
        LARGE_CHARACTER_SIZE = 50;
        LARGE_CONTAINER_SIZE = 7;
        function isLarge(value) {
          var i, k, v;
          if (value == null) {
            return false;
          } else if (value instanceof RegExp) {
            return isLarge(value.source);
          } else if (value instanceof Date) {
            return false;
          } else if (__isArray(value)) {
            switch (value.length) {
            case 0: return false;
            case 1: return isLarge(value[0]);
            default: return true;
            }
          } else {
            switch (typeof value) {
            case "string": return __num(value.length) >= LARGE_CHARACTER_SIZE;
            case "number":
            case "boolean": return false;
            case "object":
              i = -1;
              for (k in value) {
                if (__owns.call(value, k)) {
                  ++i;
                  v = value[k];
                  if (i >= 1 || isLarge(k) || isLarge(v)) {
                    return true;
                  }
                }
              }
              return false;
            default: return true;
            }
          }
        }
        types = {
          "null": function (_p, sb) {
            sb("null");
          },
          "undefined": function (_p, sb) {
            sb("void 0");
          },
          number: function (value, sb) {
            sb(value === 0 ? (1 / __num(value) < 0 ? "-0" : "0")
              : isFinite(value) ? String(value)
              : value !== value ? "0/0"
              : __num(value) > 0 ? "1/0"
              : "-1/0");
          },
          regexp: function (regex, sb) {
            sb("/");
            sb(regex.source.replace(/(\\\\)*\\?\//g, "$1\\/") || "(?:)");
            sb("/");
            if (regex.global) {
              sb("g");
            }
            if (regex.ignoreCase) {
              sb("i");
            }
            if (regex.multiline) {
              sb("m");
            }
          },
          string: (function () {
            var DOUBLE_QUOTE_REGEX, SINGLE_QUOTE_REGEX;
            function escapeHelper(m) {
              switch (m) {
              case "\b": return "\\b";
              case "\t": return "\\t";
              case "\n": return "\\n";
              case "\f": return "\\f";
              case "\r": return "\\r";
              case "\n": return "\\n";
              case '"': return '\\"';
              case "'": return "\\'";
              case "\\": return "\\\\";
              default:
                return "\\u" + __strnum(padLeft(m.charCodeAt(0).toString(16), 4, "0"));
              }
            }
            DOUBLE_QUOTE_REGEX = /[\u0000-\u001f"\\\u0080-\uffff]/g;
            SINGLE_QUOTE_REGEX = /[\u0000-\u001f'\\\u0080-\uffff]/g;
            function doubleQuote(value) {
              return '"' + __strnum(value.replace(DOUBLE_QUOTE_REGEX, escapeHelper)) + '"';
            }
            function singleQuote(value) {
              return "'" + __strnum(value.replace(SINGLE_QUOTE_REGEX, escapeHelper)) + "'";
            }
            function shorter(x, y) {
              if (__lte(x.length, y.length)) {
                return x;
              } else {
                return y;
              }
            }
            return function (string, sb) {
              return sb(string.indexOf('"') === -1 ? doubleQuote(string)
                : string.indexOf("'") === -1 ? singleQuote(string)
                : shorter(doubleQuote(string), singleQuote(string)));
            };
          }()),
          boolean: function (bool, sb) {
            return sb(bool ? "true" : "false");
          },
          date: function (date, sb) {
            sb("new Date(");
            sb(String(date.getTime()));
            return sb(")");
          },
          array: function (array, sb, options) {
            var _arr, _len, childOptions, hasIndent, i, item, len;
            hasIndent = "indent" in options;
            if (array.length === 0) {
              return sb("[]");
            } else if (hasIndent && __num(array.length) > 1 && (__num(array.length) >= LARGE_CONTAINER_SIZE || (function () {
              var _arr, _i, _len, _some, item;
              _some = false;
              for (_arr = __toArray(array), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                item = _arr[_i];
                if (isLarge(item)) {
                  _some = true;
                  break;
                }
              }
              return _some;
            }()))) {
              sb("[\n");
              childOptions = moreIndent(options);
              for (_arr = __toArray(array), i = 0, len = _arr.length; i < len; ++i) {
                item = _arr[i];
                indent(sb, childOptions.indent);
                toJSSource(item, sb, childOptions);
                if (i < len - 1) {
                  sb(",");
                }
                sb("\n");
              }
              indent(sb, options.indent);
              return sb("]");
            } else {
              sb("[");
              for (_arr = __toArray(array), i = 0, _len = _arr.length; i < _len; ++i) {
                item = _arr[i];
                if (i > 0) {
                  sb(",");
                  if (hasIndent) {
                    sb(" ");
                  }
                }
                toJSSource(item, sb, options);
              }
              return sb("]");
            }
          },
          object: (function () {
            function writeSafeKey(key, sb, options) {
              var num;
              if (isAcceptableIdent(key)) {
                sb(key);
              } else {
                num = Number(key);
                if (num === num && String(num) === key) {
                  sb(key);
                } else {
                  toJSSource(key, sb, options);
                }
              }
            }
            return function (obj, sb, options) {
              var _arr, _len, _ref, childOptions, hasIndent, i, key, len, pairs,
                  value;
              _arr = [];
              for (key in obj) {
                if (__owns.call(obj, key)) {
                  value = obj[key];
                  _arr.push({ key: key, value: value });
                }
              }
              pairs = _arr;
              hasIndent = "indent" in options;
              if (pairs.length === 0) {
                return sb("{}");
              } else if (hasIndent && pairs.length > 1 && (pairs.length >= LARGE_CONTAINER_SIZE || (function () {
                var _arr, _i, _len, _ref, _some, key, value;
                _some = false;
                for (_arr = __toArray(pairs), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                  _ref = _arr[_i];
                  key = _ref.key;
                  value = _ref.value;
                  if (isLarge(key) || isLarge(value)) {
                    _some = true;
                    break;
                  }
                }
                return _some;
              }()))) {
                sb("{\n");
                childOptions = moreIndent(options);
                for (i = 0, len = pairs.length; i < len; ++i) {
                  _ref = pairs[i];
                  key = _ref.key;
                  value = _ref.value;
                  indent(sb, childOptions.indent);
                  writeSafeKey(key, sb, childOptions);
                  sb(": ");
                  toJSSource(value, sb, childOptions);
                  if (i < len - 1) {
                    sb(",");
                  }
                  sb("\n");
                }
                indent(sb, options.indent);
                return sb("}");
              } else {
                sb("{");
                for (i = 0, _len = pairs.length; i < _len; ++i) {
                  _ref = pairs[i];
                  key = _ref.key;
                  value = _ref.value;
                  if (i > 0) {
                    sb(",");
                    if (hasIndent) {
                      sb(" ");
                    }
                  }
                  writeSafeKey(key, sb, options);
                  sb(":");
                  if (hasIndent) {
                    sb(" ");
                  }
                  toJSSource(value, sb, options);
                }
                return sb("}");
              }
            };
          }())
        };
        return function (value, sb, options) {
          var _ref, arr, handler;
          if (sb == null) {
            sb = null;
          } else if (typeof sb !== "function") {
            throw TypeError("Expected sb to be one of Function or null, got " + __typeof(sb));
          }
          if (options == null) {
            options = {};
          }
          if (sb == null) {
            arr = [];
            toJSSource(
              value,
              __bind(arr, "push"),
              options
            );
            return arr.join("");
          } else {
            if (value === null) {
              types["null"](value, sb, options);
            } else if (__isArray(value)) {
              types.array(value, sb, options);
            } else if (value instanceof RegExp) {
              types.regexp(value, sb, options);
            } else if (value instanceof Date) {
              types.date(value, sb, options);
            } else {
              if (__owns.call(types, _ref = typeof value)) {
                handler = types[_ref];
              }
              if (typeof handler !== "function") {
                throw Error("Cannot convert " + __typeof(value) + " to JS source");
              }
              handler(value, sb, options);
            }
            return;
          }
        };
      }());
      exports.toJSSource = toJSSource;
      exports.isAcceptableIdent = isAcceptableIdent;
    }.call(this));
    
    return module.exports;
  };
  require['./types'] = function () {
    var module = { exports: this };
    var exports = this;
    (function () {
      "use strict";
      var __cmp, __create, __isArray, __lte, __name, __num, __owns, __slice, __str,
          __strnum, __throw, __toArray, __typeof, inspect, Type, util;
      __cmp = function (left, right) {
        var type;
        if (left === right) {
          return 0;
        } else {
          type = typeof left;
          if (type !== "number" && type !== "string") {
            throw TypeError("Cannot compare a non-number/string: " + type);
          } else if (type !== typeof right) {
            throw TypeError("Cannot compare elements of different types: " + type + " vs " + typeof right);
          } else if (left < right) {
            return -1;
          } else {
            return 1;
          }
        }
      };
      __create = typeof Object.create === "function" ? Object.create
        : function (x) {
          function F() {}
          F.prototype = x;
          return new F();
        };
      __isArray = typeof Array.isArray === "function" ? Array.isArray
        : (function () {
          var _toString;
          _toString = Object.prototype.toString;
          return function (x) {
            return _toString.call(x) === "[object Array]";
          };
        }());
      __lte = function (x, y) {
        var type;
        type = typeof x;
        if (type !== "number" && type !== "string") {
          throw TypeError("Cannot compare a non-number/string: " + type);
        } else if (type !== typeof y) {
          throw TypeError("Cannot compare elements of different types: " + type + " vs " + typeof y);
        } else {
          return x <= y;
        }
      };
      __name = function (func) {
        if (typeof func !== "function") {
          throw TypeError("Expected func to be a Function, got " + __typeof(func));
        }
        return func.displayName || func.name || "";
      };
      __num = function (num) {
        if (typeof num !== "number") {
          throw TypeError("Expected a number, got " + __typeof(num));
        } else {
          return num;
        }
      };
      __owns = Object.prototype.hasOwnProperty;
      __slice = Array.prototype.slice;
      __str = function (str) {
        if (typeof str !== "string") {
          throw TypeError("Expected a string, got " + __typeof(str));
        } else {
          return str;
        }
      };
      __strnum = function (strnum) {
        var type;
        type = typeof strnum;
        if (type === "string") {
          return strnum;
        } else if (type === "number") {
          return String(strnum);
        } else {
          throw TypeError("Expected a string or number, got " + __typeof(strnum));
        }
      };
      __throw = function (err) {
        throw err;
      };
      __toArray = function (x) {
        if (x == null) {
          throw TypeError("Expected an object, got " + __typeof(x));
        } else if (__isArray(x)) {
          return x;
        } else if (typeof x === "string") {
          return x.split("");
        } else {
          return __slice.call(x);
        }
      };
      __typeof = (function () {
        var _toString;
        _toString = Object.prototype.toString;
        return function (o) {
          if (o === void 0) {
            return "Undefined";
          } else if (o === null) {
            return "Null";
          } else {
            return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
          }
        };
      }());
      util = require("util");
      if (util != null) {
        inspect = util.inspect;
      }
      module.exports = Type = (function () {
        var _Type_prototype, any, AnyType, arrayBase, ComplementType, fromJSONTypes,
            functionBase, GenericType, getId, none, NoneType, ObjectType,
            SimpleType, UnionType;
        function Type() {
          var _this;
          _this = this instanceof Type ? this : __create(_Type_prototype);
          throw TypeError("Type should not be instantiated");
        }
        _Type_prototype = Type.prototype;
        Type.displayName = "Type";
        _Type_prototype.isSubsetOf = function () {
          throw Error("Not implemented: " + __name(this.constructor) + ".isSubsetOf()");
        };
        _Type_prototype.isSupersetOf = function (other) {
          return other.isSubsetOf(this);
        };
        _Type_prototype.overlaps = function () {
          throw Error("Not implemented: " + __name(this.constructor) + ".overlaps()");
        };
        _Type_prototype.compare = function () {
          throw Error("Not implemented: " + __name(this.constructor) + ".compare()");
        };
        _Type_prototype.equals = function () {
          throw Error("Not implemented: " + __name(this.constructor) + ".equals()");
        };
        _Type_prototype.union = function () {
          throw Error("Not implemented: " + __name(this.constructor) + ".union()");
        };
        _Type_prototype.intersect = function () {
          throw Error("Not implemented: " + __name(this.constructor) + ".intersect()");
        };
        _Type_prototype.complement = function () {
          var _ref;
          if ((_ref = this._complement) == null) {
            return this._complement = ComplementType(this);
          } else {
            return _ref;
          }
        };
        _Type_prototype.array = function () {
          var _ref;
          if ((_ref = this._array) == null) {
            return this._array = Type.generic(arrayBase, this);
          } else {
            return _ref;
          }
        };
        _Type_prototype["function"] = function () {
          var _ref, args;
          args = __slice.call(arguments);
          if ((_ref = this._function) == null) {
            return this._function = Type.generic.apply(Type, [functionBase, this].concat(__toArray(args)));
          } else {
            return _ref;
          }
        };
        function contains(alpha, bravo) {
          var _arr, _i, item;
          for (_arr = __toArray(alpha), _i = _arr.length; _i--; ) {
            item = _arr[_i];
            if (item.equals(bravo)) {
              return true;
            }
          }
          return false;
        }
        function union(alpha, bravo) {
          var a, alphaLen, b, bravoLen, cmp, i, j, result;
          if (alpha === bravo) {
            return alpha;
          }
          result = [];
          alphaLen = alpha.length;
          bravoLen = bravo.length;
          i = 0;
          j = 0;
          while (i < __num(alphaLen) && j < __num(bravoLen)) {
            a = alpha[i];
            b = bravo[j];
            cmp = a.compare(b);
            if (cmp === 0) {
              result.push(a);
              ++i;
              ++j;
            } else if (__num(cmp) < 0) {
              result.push(a);
              ++i;
            } else {
              result.push(b);
              ++j;
            }
          }
          for (; i < __num(alphaLen); ++i) {
            result.push(alpha[i]);
          }
          for (; j < __num(bravoLen); ++j) {
            result.push(bravo[j]);
          }
          switch (result.length) {
          case alphaLen: return alpha;
          case bravoLen: return bravo;
          default: return result;
          }
        }
        function intersect(alpha, bravo) {
          var a, alphaLen, b, bravoLen, cmp, i, j, result;
          if (alpha === bravo) {
            return alpha;
          }
          alphaLen = alpha.length;
          bravoLen = bravo.length;
          result = [];
          i = 0;
          j = 0;
          while (i < __num(alphaLen) && j < __num(bravoLen)) {
            a = alpha[i];
            b = bravo[j];
            cmp = a.compare(b);
            if (cmp === 0) {
              result.push(a);
              ++i;
              ++j;
            } else if (__num(cmp) < 0) {
              ++i;
            } else {
              ++j;
            }
          }
          switch (result.length) {
          case alphaLen: return alpha;
          case bravoLen: return bravo;
          default: return result;
          }
        }
        function relativeComplement(alpha, bravo) {
          var a, alphaLen, bravoLen, cmp, i, j, result;
          if (alpha === bravo) {
            return [];
          }
          result = [];
          alphaLen = alpha.length;
          if (alphaLen === 0) {
            return result;
          }
          bravoLen = bravo.length;
          if (bravoLen === 0) {
            return alpha;
          }
          i = 0;
          j = 0;
          while (i < __num(alphaLen) && j < __num(bravoLen)) {
            a = alpha[i];
            cmp = a.compare(bravo[j]);
            if (cmp === 0) {
              ++i;
              ++j;
            } else if (__num(cmp) < 0) {
              result.push(a);
              ++i;
            } else {
              ++j;
            }
          }
          for (; i < __num(alphaLen); ++i) {
            result.push(alpha[i]);
          }
          if (result.length === alphaLen) {
            return alpha;
          } else {
            return result;
          }
        }
        function isSubsetOf(alpha, bravo) {
          var alphaLen, bravoLen, i, j;
          if (alpha === bravo) {
            return true;
          }
          alphaLen = alpha.length;
          if (alphaLen === 0) {
            return true;
          }
          bravoLen = bravo.length;
          if (!__lte(alphaLen, bravoLen)) {
            return false;
          } else {
            i = 0;
            j = 0;
            while (j < __num(bravoLen)) {
              if (alpha[i].equals(bravo[j])) {
                ++i;
                if (i >= __num(alphaLen)) {
                  return true;
                }
                ++j;
              } else {
                ++j;
              }
            }
            return false;
          }
        }
        function overlaps(alpha, bravo) {
          var alphaLen, bravoLen, cmp, i, j;
          alphaLen = alpha.length;
          if (alpha === bravo && __num(alphaLen) > 0) {
            return true;
          }
          bravoLen = bravo.length;
          i = 0;
          j = 0;
          while (i < __num(alphaLen) && j < __num(bravoLen)) {
            cmp = alpha[i].compare(bravo[j]);
            if (cmp === 0) {
              return true;
            } else if (__num(cmp) < 0) {
              ++i;
            } else {
              ++j;
            }
          }
          return false;
        }
        function compare(alpha, bravo) {
          var _ref, i, len;
          if (alpha !== bravo) {
            len = alpha.length;
            if (_ref = __cmp(len, bravo.length)) {
              return _ref;
            }
            for (i = 0, __num(len); i < len; ++i) {
              if (_ref = alpha[i].compare(bravo[i])) {
                return _ref;
              }
            }
          }
          return 0;
        }
        function equals(alpha, bravo) {
          var i, len;
          if (alpha !== bravo) {
            len = alpha.length;
            if (len !== bravo.length) {
              return false;
            }
            for (i = 0, __num(len); i < len; ++i) {
              if (!alpha[i].equals(bravo[i])) {
                return false;
              }
            }
          }
          return true;
        }
        function typeComparer(a, b) {
          return a.compare(b);
        }
        function makeUnionType(types, needsSort) {
          switch (types.length) {
          case 0: return none;
          case 1: return types[0];
          default:
            if (needsSort) {
              types.sort(typeComparer);
            }
            return UnionType(types);
          }
        }
        fromJSONTypes = {};
        function fromJSON(x) {
          var type;
          if (typeof x === "string") {
            return fromJSON({ type: "simple", name: x });
          } else {
            type = x.type;
            if (typeof type !== "string") {
              throw TypeError("Unspecified type");
            } else if (!__owns.call(fromJSONTypes, type)) {
              throw TypeError("Unknown serialization type: " + __strnum(type));
            } else {
              return fromJSONTypes[type](x);
            }
          }
        }
        Type.fromJSON = fromJSON;
        getId = (function () {
          var id;
          id = -1;
          return function () {
            ++id;
            return id;
          };
        }());
        SimpleType = (function (Type) {
          var _SimpleType_prototype, _Type_prototype2;
          function SimpleType(name) {
            var _this;
            _this = this instanceof SimpleType ? this : __create(_SimpleType_prototype);
            if (typeof name !== "string") {
              throw TypeError("Expected name to be a String, got " + __typeof(name));
            }
            _this.name = name;
            _this.id = getId();
            return _this;
          }
          _Type_prototype2 = Type.prototype;
          _SimpleType_prototype = SimpleType.prototype = __create(_Type_prototype2);
          _SimpleType_prototype.constructor = SimpleType;
          SimpleType.displayName = "SimpleType";
          if (typeof Type.extended === "function") {
            Type.extended(SimpleType);
          }
          _SimpleType_prototype.toString = function () {
            return this.name;
          };
          _SimpleType_prototype.equals = function (other) {
            return this === other;
          };
          _SimpleType_prototype.compare = function (other) {
            if (this === other) {
              return 0;
            } else if (other instanceof SimpleType) {
              return __cmp(this.name, other.name) || __cmp(this.id, other.id);
            } else {
              return __cmp("SimpleType", other.constructor.displayName);
            }
          };
          _SimpleType_prototype.union = function (other) {
            if (!(other instanceof Type)) {
              throw TypeError("Expected other to be a " + __name(Type) + ", got " + __typeof(other));
            }
            if (other instanceof SimpleType) {
              if (this === other) {
                return this;
              } else {
                return makeUnionType(
                  [this, other],
                  true
                );
              }
            } else {
              return other.union(this);
            }
          };
          _SimpleType_prototype.intersect = function (other) {
            if (!(other instanceof Type)) {
              throw TypeError("Expected other to be a " + __name(Type) + ", got " + __typeof(other));
            }
            if (other instanceof SimpleType) {
              if (this === other) {
                return this;
              } else {
                return none;
              }
            } else {
              return other.intersect(this);
            }
          };
          _SimpleType_prototype.isSubsetOf = function (other) {
            var _arr, _i, _some, type;
            if (!(other instanceof Type)) {
              throw TypeError("Expected other to be a " + __name(Type) + ", got " + __typeof(other));
            }
            if (other instanceof SimpleType) {
              return this === other;
            } else if (other instanceof UnionType) {
              _some = false;
              for (_arr = __toArray(other.types), _i = _arr.length; _i--; ) {
                type = _arr[_i];
                if (this === type) {
                  _some = true;
                  break;
                }
              }
              return _some;
            } else if (other instanceof ComplementType) {
              return !this.isSubsetOf(other.untype);
            } else {
              return other === any;
            }
          };
          _SimpleType_prototype.overlaps = function (other) {
            if (!(other instanceof Type)) {
              throw TypeError("Expected other to be a " + __name(Type) + ", got " + __typeof(other));
            }
            if (other instanceof SimpleType) {
              return this === other;
            } else {
              return other.overlaps(this);
            }
          };
          _SimpleType_prototype.inspect = function () {
            var _this;
            _this = this;
            return (function () {
              var _else, k, v;
              _else = true;
              for (k in Type) {
                if (__owns.call(Type, k)) {
                  _else = false;
                  v = Type[k];
                  if (v === _this) {
                    return "Type." + k;
                  }
                }
              }
              return "Type.make(" + __strnum(inspect(_this.name)) + ")";
            }());
          };
          _SimpleType_prototype.toJSON = function () {
            var _this;
            _this = this;
            return (function () {
              var _else, k, v;
              _else = true;
              for (k in Type) {
                if (__owns.call(Type, k)) {
                  _else = false;
                  v = Type[k];
                  if (v === _this) {
                    return k;
                  }
                }
              }
              throw Error("Cannot serialize custom type: " + String(_this));
            }());
          };
          fromJSONTypes.simple = function (_p) {
            var name;
            name = _p.name;
            return __owns.call(Type, name) && Type[name] || __throw(Error("Unknown type: " + String(name)));
          };
          return SimpleType;
        }(Type));
        Type.make = function (name) {
          return SimpleType(name);
        };
        GenericType = (function (Type) {
          var _GenericType_prototype, _Type_prototype2;
          function GenericType(base, args) {
            var _i, _ref, _this;
            _this = this instanceof GenericType ? this : __create(_GenericType_prototype);
            if (!(base instanceof SimpleType)) {
              throw TypeError("Expected base to be a " + __name(SimpleType) + ", got " + __typeof(base));
            }
            _this.base = base;
            if (!__isArray(args)) {
              throw TypeError("Expected args to be an Array, got " + __typeof(args));
            } else {
              for (_i = args.length; _i--; ) {
                if (!(args[_i] instanceof Type)) {
                  throw TypeError("Expected " + ("args[" + _i + "]") + " to be a " + __name(Type) + ", got " + __typeof(args[_i]));
                }
              }
            }
            if (args.length === 0) {
              throw Error("Must provide at least one generic type argument");
            }
            _this.id = getId();
            _this.args = args.slice();
            if (_this.base === arrayBase && args.length === 1) {
              if ((_ref = args[0]._array) != null) {
                return _ref;
              }
              args[0]._array = _this;
            } else if (_this.base === functionBase && args.length === 1) {
              if ((_ref = args[0]._function) != null) {
                return _ref;
              }
              args[0]._function = _this;
            }
            return _this;
          }
          _Type_prototype2 = Type.prototype;
          _GenericType_prototype = GenericType.prototype = __create(_Type_prototype2);
          _GenericType_prototype.constructor = GenericType;
          GenericType.displayName = "GenericType";
          if (typeof Type.extended === "function") {
            Type.extended(GenericType);
          }
          function become(alpha, bravo) {
            if (!__lte(alpha.id, bravo.id)) {
              return become(bravo, alpha);
            }
            bravo.base = alpha.base;
            bravo.args = alpha.args;
            bravo.id = alpha.id;
          }
          _GenericType_prototype.toString = function () {
            var _arr, _len, _ref, arg, i, sb;
            if ((_ref = this._name) == null) {
              if (this.base === arrayBase && this.args.length === 1) {
                if (this.args[0] === any) {
                  return this._name = "[]";
                } else {
                  return this._name = "[" + String(this.args[0]) + "]";
                }
              } else if (this.base === functionBase && this.args.length === 1) {
                if (this.args[0] === any) {
                  return this._name = "->";
                } else {
                  return this._name = "-> " + String(this.args[0]);
                }
              } else {
                sb = [];
                sb.push(String(this.base));
                sb.push("<");
                for (_arr = __toArray(this.args), i = 0, _len = _arr.length; i < _len; ++i) {
                  arg = _arr[i];
                  if (i > 0) {
                    sb.push(",");
                    if (arg !== any && this.args[i - 1] !== any) {
                      sb.push(" ");
                    }
                  }
                  if (arg !== any) {
                    sb.push(String(arg));
                  }
                }
                sb.push(">");
                return this._name = sb.join("");
              }
            } else {
              return _ref;
            }
          };
          _GenericType_prototype.equals = function (other) {
            if (other === this) {
              return true;
            } else if (other instanceof GenericType) {
              if (this.id === other.id) {
                return true;
              } else if (this.base === other.base && equals(this.args, other.args)) {
                become(this, other);
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          };
          _GenericType_prototype.compare = function (other) {
            var _ref, cmp;
            if (other === this) {
              return 0;
            } else if (other instanceof GenericType) {
              if (this.id === other.id) {
                return 0;
              } else {
                if (_ref = this.base.compare(other.base)) {
                  return _ref;
                }
                cmp = compare(this.args, other.args);
                if (!cmp) {
                  become(this, other);
                }
                return cmp;
              }
            } else {
              return __cmp("GenericType", other.constructor.displayName);
            }
          };
          _GenericType_prototype.union = function (other) {
            if (!(other instanceof Type)) {
              throw TypeError("Expected other to be a " + __name(Type) + ", got " + __typeof(other));
            }
            if (other instanceof GenericType) {
              if (this.equals(other)) {
                return this;
              } else if (this.isSubsetOf(other)) {
                return other;
              } else if (other.isSubsetOf(this)) {
                return this;
              } else {
                return makeUnionType(
                  [this, other],
                  true
                );
              }
            } else if (other instanceof SimpleType) {
              return makeUnionType(
                [this, other],
                true
              );
            } else {
              return other.union(this);
            }
          };
          _GenericType_prototype.intersect = function (other) {
            var arg, args, i, isOther, isThis, len, newArg, newArgs, otherArg,
                otherArgs;
            if (!(other instanceof Type)) {
              throw TypeError("Expected other to be a " + __name(Type) + ", got " + __typeof(other));
            }
            if (other instanceof GenericType) {
              if (this.base !== other.base) {
                return none;
              } else if (this.equals(other)) {
                return this;
              } else {
                args = this.args;
                otherArgs = other.args;
                len = args.length;
                if (len !== otherArgs.length) {
                  return none;
                } else {
                  isThis = true;
                  isOther = true;
                  newArgs = [];
                  for (i = 0, __num(len); i < len; ++i) {
                    arg = args[i];
                    otherArg = otherArgs[i];
                    newArg = args[i].intersect(otherArgs[i]);
                    if (isThis && arg !== newArg) {
                      isThis = false;
                    }
                    if (isOther && otherArg !== newArg) {
                      isOther = false;
                    }
                    newArgs.push(newArg);
                  }
                  if (isThis) {
                    return this;
                  } else if (isOther) {
                    return other;
                  } else {
                    return GenericType(this.base, newArgs);
                  }
                }
              }
            } else if (other instanceof SimpleType) {
              return none;
            } else {
              return other.intersect(this);
            }
          };
          _GenericType_prototype.isSubsetOf = function (other) {
            var _arr, _i, _some, args, i, len, otherArgs, type;
            if (!(other instanceof Type)) {
              throw TypeError("Expected other to be a " + __name(Type) + ", got " + __typeof(other));
            }
            if (other instanceof GenericType) {
              if (this.base !== other.base) {
                return false;
              } else if (this.equals(other)) {
                return true;
              } else {
                args = this.args;
                otherArgs = other.args;
                len = args.length;
                if (len !== otherArgs.length) {
                  return false;
                } else {
                  for (i = 0, __num(len); i < len; ++i) {
                    if (!args[i].isSubsetOf(otherArgs[i])) {
                      return false;
                    }
                  }
                  return true;
                }
              }
            } else if (other instanceof UnionType) {
              _some = false;
              for (_arr = __toArray(other.types), _i = _arr.length; _i--; ) {
                type = _arr[_i];
                if (this.isSubsetOf(type)) {
                  _some = true;
                  break;
                }
              }
              return _some;
            } else if (other instanceof ComplementType) {
              return !this.isSubsetOf(other.untype);
            } else {
              return other === any;
            }
          };
          _GenericType_prototype.overlaps = function (other) {
            if (!(other instanceof Type)) {
              throw TypeError("Expected other to be a " + __name(Type) + ", got " + __typeof(other));
            }
            if (other instanceof GenericType) {
              if (this.base !== other.base) {
                return false;
              } else {
                return this.args.length === other.args.length;
              }
            } else if (other instanceof SimpleType) {
              return false;
            } else {
              return other.overlaps(this);
            }
          };
          _GenericType_prototype.inspect = function (depth) {
            var _arr, _i, _len, arg, sb;
            if (depth != null) {
              depth = __num(depth) - 1;
            }
            sb = ["Type.generic("];
            sb.push(inspect(this.base, null, depth));
            for (_arr = __toArray(this.args), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              arg = _arr[_i];
              sb.push(", ");
              sb.push(inspect(arg, null, depth));
            }
            sb.push(")");
            return sb.join("");
          };
          _GenericType_prototype.toJSON = function () {
            var _this;
            _this = this;
            return (function () {
              var _else, k, v;
              _else = true;
              for (k in Type) {
                if (__owns.call(Type, k)) {
                  _else = false;
                  v = Type[k];
                  if (v === _this) {
                    return k;
                  }
                }
              }
              return { type: "generic", base: _this.base, args: _this.args };
            }());
          };
          fromJSONTypes.generic = function (_p) {
            var args, base, baseType;
            base = _p.base;
            args = _p.args;
            baseType = Type.fromJSON(base);
            if (baseType === arrayBase && args.length === 1) {
              return Type.fromJSON(args[0]).array();
            } else if (baseType === functionBase && args.length === 1) {
              return Type.fromJSON(args[0])["function"]();
            } else {
              return GenericType(baseType, (function () {
                var _arr, _arr2, _i, _len, arg;
                for (_arr = [], _arr2 = __toArray(args), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                  arg = _arr2[_i];
                  _arr.push(Type.fromJSON(arg));
                }
                return _arr;
              }()));
            }
          };
          return GenericType;
        }(Type));
        Type.generic = function (base) {
          var args;
          args = __slice.call(arguments, 1);
          return GenericType(
            typeof base === "string" ? Type.make(base) : base,
            args
          );
        };
        ObjectType = (function (Type) {
          var _ObjectType_prototype, _Type_prototype2;
          function ObjectType(data) {
            var _this, k, pairs, v;
            _this = this instanceof ObjectType ? this : __create(_ObjectType_prototype);
            if (typeof data !== "object" || data === null) {
              throw TypeError("Expected data to be an Object, got " + __typeof(data));
            }
            pairs = [];
            for (k in data) {
              if (__owns.call(data, k)) {
                v = data[k];
                if (!(v instanceof Type)) {
                  throw TypeError("Expected data[" + __str(JSON.stringify(k)) + "] to be a Type, got " + __typeof(v));
                }
                if (v !== any) {
                  pairs.push([k, v]);
                }
              }
            }
            pairs.sort(function (a, b) {
              return __cmp(a[0], b[0]);
            });
            if (pairs.length === 0 && Type.object != null) {
              return Type.object;
            }
            _this.pairs = pairs;
            _this.id = getId();
            return _this;
          }
          _Type_prototype2 = Type.prototype;
          _ObjectType_prototype = ObjectType.prototype = __create(_Type_prototype2);
          _ObjectType_prototype.constructor = ObjectType;
          ObjectType.displayName = "ObjectType";
          if (typeof Type.extended === "function") {
            Type.extended(ObjectType);
          }
          _ObjectType_prototype.toString = function () {
            var _ref, _this;
            _this = this;
            if ((_ref = this._name) == null) {
              return this._name = "{" + __strnum((function () {
                var _arr, _arr2, _i, _len, _ref, k, v;
                for (_arr = [], _arr2 = __toArray(_this.pairs), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                  _ref = _arr2[_i];
                  k = _ref[0];
                  v = _ref[1];
                  _arr.push(__strnum(k) + ": " + String(v));
                }
                return _arr;
              }()).join(", ")) + "}";
            } else {
              return _ref;
            }
          };
          function become(alpha, bravo) {
            if (!__lte(alpha.id, bravo.id)) {
              return become(bravo, alpha);
            }
            bravo.pairs = alpha.pairs;
            bravo.id = alpha.id;
          }
          _ObjectType_prototype.equals = function (other) {
            var _arr, _len, i, otherPair, otherPairs, pair, pairs;
            if (other === this) {
              return true;
            } else if (other instanceof ObjectType) {
              pairs = this.pairs;
              otherPairs = other.pairs;
              if (pairs === otherPairs) {
                return true;
              } else if (pairs.length !== otherPairs.length) {
                return false;
              } else {
                for (_arr = __toArray(pairs), i = 0, _len = _arr.length; i < _len; ++i) {
                  pair = _arr[i];
                  otherPair = otherPairs[i];
                  if (pair[0] !== otherPair[0] || !pair[1].equals(otherPair[1])) {
                    return false;
                  }
                }
                become(this, other);
                return true;
              }
            } else {
              return false;
            }
          };
          _ObjectType_prototype.compare = function (other) {
            var _arr, _len, cmp, i, otherPair, otherPairs, pair, pairs;
            if (this === other) {
              return 0;
            } else if (other instanceof ObjectType) {
              pairs = this.pairs;
              otherPairs = other.pairs;
              if (pairs === otherPairs) {
                return 0;
              } else {
                cmp = __cmp(pairs.length, otherPairs.length);
                if (cmp) {
                  return cmp;
                } else {
                  for (_arr = __toArray(pairs), i = 0, _len = _arr.length; i < _len; ++i) {
                    pair = _arr[i];
                    otherPair = otherPairs[i];
                    cmp = __cmp(pair[0], otherPair[0]) || pair[1].compare(otherPair[1]);
                    if (cmp) {
                      return cmp;
                    }
                  }
                  become(this, other);
                  return 0;
                }
              }
            } else {
              return __cmp("ObjectType", other.constructor.displayName);
            }
          };
          _ObjectType_prototype.union = function (other) {
            if (!(other instanceof Type)) {
              throw TypeError("Expected other to be a " + __name(Type) + ", got " + __typeof(other));
            }
            if (other instanceof ObjectType) {
              if (this.equals(other)) {
                return this;
              } else if (this.isSubsetOf(other)) {
                return other;
              } else if (other.isSubsetOf(this)) {
                return this;
              } else {
                return makeUnionType(
                  [this, other],
                  true
                );
              }
            } else if (other instanceof SimpleType || other instanceof GenericType) {
              return makeUnionType(
                [this, other],
                true
              );
            } else {
              return other.union(this);
            }
          };
          _ObjectType_prototype.intersect = function (other) {
            var _arr, _i, _len, _ref, k, merged, v;
            if (!(other instanceof Type)) {
              throw TypeError("Expected other to be a " + __name(Type) + ", got " + __typeof(other));
            }
            if (other instanceof ObjectType) {
              if (this.equals(other)) {
                return this;
              } else if (this.isSubsetOf(other)) {
                return this;
              } else if (other.isSubsetOf(this)) {
                return other;
              } else {
                merged = {};
                for (_arr = __toArray(this.pairs), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                  _ref = _arr[_i];
                  k = _ref[0];
                  v = _ref[1];
                  merged[k] = v;
                }
                for (_arr = __toArray(other.pairs), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                  _ref = _arr[_i];
                  k = _ref[0];
                  v = _ref[1];
                  if (__owns.call(merged, k)) {
                    merged[k] = merged[k].intersect(v);
                  } else {
                    merged[k] = v;
                  }
                }
                return ObjectType(merged);
              }
            } else if (other instanceof SimpleType || other instanceof GenericType) {
              return none;
            } else {
              return other.intersect(this);
            }
          };
          _ObjectType_prototype.isSubsetOf = function (other) {
            var _arr, _i, _len, _ref, _some, i, len, otherK, otherPairs, otherV,
                pair, pairs, type;
            if (!(other instanceof Type)) {
              throw TypeError("Expected other to be a " + __name(Type) + ", got " + __typeof(other));
            }
            if (other instanceof ObjectType) {
              if (this === other || other === Type.object) {
                return true;
              } else if (this === Type.object) {
                return false;
              } else {
                pairs = this.pairs;
                otherPairs = other.pairs;
                if (pairs === other.pairs) {
                  return true;
                } else {
                  i = 0;
                  len = pairs.length;
                  for (_arr = __toArray(otherPairs), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                    _ref = _arr[_i];
                    otherK = _ref[0];
                    otherV = _ref[1];
                    for (; i <= __num(len); ++i) {
                      if (i === len) {
                        return false;
                      }
                      pair = pairs[i];
                      if (pair[0] === otherK) {
                        if (pair[1].isSubsetOf(otherV)) {
                          ++i;
                          break;
                        } else {
                          return false;
                        }
                      } else if (!__lte(pair[0], otherK)) {
                        return false;
                      }
                    }
                  }
                  if (i === len) {
                    become(this, other);
                  }
                  return true;
                }
              }
            } else if (other instanceof UnionType) {
              _some = false;
              for (_arr = __toArray(other.types), _i = _arr.length; _i--; ) {
                type = _arr[_i];
                if (this.isSubsetOf(type)) {
                  _some = true;
                  break;
                }
              }
              return _some;
            } else if (other instanceof ComplementType) {
              return !this.isSubsetOf(other.untype);
            } else {
              return other === any;
            }
          };
          _ObjectType_prototype.overlaps = function (other) {
            if (!(other instanceof Type)) {
              throw TypeError("Expected other to be a " + __name(Type) + ", got " + __typeof(other));
            }
            if (other instanceof ObjectType) {
              return true;
            } else if (other instanceof SimpleType || other instanceof GenericType) {
              return false;
            } else {
              return other.overlaps(this);
            }
          };
          _ObjectType_prototype.value = function (key) {
            var _arr, _i, pair, pairKey;
            if (typeof key !== "string") {
              throw TypeError("Expected key to be a String, got " + __typeof(key));
            }
            for (_arr = __toArray(this.pairs), _i = _arr.length; _i--; ) {
              pair = _arr[_i];
              pairKey = pair[0];
              if (pairKey === key) {
                return pair[1];
              } else if (pairKey < key) {
                return Type.any;
              }
            }
            return Type.any;
          };
          _ObjectType_prototype.inspect = function (depth) {
            var _arr, _i, _len, _ref, k, obj, v;
            if (this === Type.object) {
              return "Type.object";
            } else {
              obj = {};
              for (_arr = __toArray(this.pairs), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                _ref = _arr[_i];
                k = _ref[0];
                v = _ref[1];
                obj[k] = v;
              }
              return "Type.makeObject(" + __strnum(inspect(obj, null, depth != null ? __num(depth) - 1 : null)) + ")";
            }
          };
          _ObjectType_prototype.toJSON = function () {
            var _arr, _i, _len, _ref, k, pairs, v;
            if (this.pairs.length === 0) {
              return "object";
            } else {
              pairs = {};
              for (_arr = __toArray(this.pairs), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                _ref = _arr[_i];
                k = _ref[0];
                v = _ref[1];
                pairs[k] = v;
              }
              return { type: "object", pairs: pairs };
            }
          };
          fromJSONTypes.object = function (_p) {
            var deserializedPairs, k, pairs, v;
            pairs = _p.pairs;
            deserializedPairs = {};
            for (k in pairs) {
              if (__owns.call(pairs, k)) {
                v = pairs[k];
                deserializedPairs[k] = Type.fromJSON(v);
              }
            }
            return ObjectType(deserializedPairs);
          };
          return ObjectType;
        }(Type));
        Type.makeObject = function (data) {
          return ObjectType(data);
        };
        UnionType = (function (Type) {
          var _Type_prototype2, _UnionType_prototype;
          function UnionType(types) {
            var _i, _this;
            _this = this instanceof UnionType ? this : __create(_UnionType_prototype);
            if (!__isArray(types)) {
              throw TypeError("Expected types to be an Array, got " + __typeof(types));
            } else {
              for (_i = types.length; _i--; ) {
                if (!(types[_i] instanceof Type)) {
                  throw TypeError("Expected " + ("types[" + _i + "]") + " to be a " + __name(Type) + ", got " + __typeof(types[_i]));
                }
              }
            }
            _this.types = types;
            if (types.length <= 1) {
              throw Error("Must provide at least 2 types to UnionType");
            }
            _this.id = getId();
            return _this;
          }
          _Type_prototype2 = Type.prototype;
          _UnionType_prototype = UnionType.prototype = __create(_Type_prototype2);
          _UnionType_prototype.constructor = UnionType;
          UnionType.displayName = "UnionType";
          if (typeof Type.extended === "function") {
            Type.extended(UnionType);
          }
          _UnionType_prototype.toString = function () {
            var _ref;
            if ((_ref = this._name) == null) {
              return this._name = "(" + __strnum(this.types.join("|")) + ")";
            } else {
              return _ref;
            }
          };
          function become(alpha, bravo) {
            if (!__lte(alpha.id, bravo.id)) {
              return become(bravo, alpha);
            }
            bravo.types = alpha.types;
            return bravo.id = alpha.id;
          }
          _UnionType_prototype.equals = function (other) {
            if (other === this) {
              return true;
            } else if (other instanceof UnionType) {
              if (this.id === other.id) {
                return true;
              } else if (this.types === other.types || equals(this.types, other.types)) {
                become(this, other);
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          };
          _UnionType_prototype.compare = function (other) {
            var cmp;
            if (other === this) {
              return 0;
            } else if (other instanceof UnionType) {
              if (this.id === other.id) {
                return 0;
              } else if (this.types === other.types) {
                become(this, other);
                return 0;
              } else {
                cmp = compare(this.types, other.types);
                if (cmp === 0) {
                  become(this, other);
                }
                return cmp;
              }
            } else {
              return __cmp("UnionType", other.constructor.displayName);
            }
          };
          _UnionType_prototype.union = function (other) {
            var _arr, _i, _len, newTypes, type, types;
            if (!(other instanceof Type)) {
              throw TypeError("Expected other to be a " + __name(Type) + ", got " + __typeof(other));
            }
            if (other instanceof SimpleType || other instanceof GenericType) {
              types = union(this.types, [other]);
              if (types === this.types) {
                return this;
              } else {
                return makeUnionType(types);
              }
            } else if (other instanceof ObjectType) {
              if (other === Type.object) {
                newTypes = [other];
                for (_arr = __toArray(this.types), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                  type = _arr[_i];
                  if (type instanceof ObjectType) {
                    if (type === Type.object) {
                      return this;
                    }
                  } else {
                    newTypes.push(type);
                  }
                }
                return makeUnionType(newTypes);
              } else {
                newTypes = [other];
                for (_arr = __toArray(this.types), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                  type = _arr[_i];
                  if (type instanceof ObjectType) {
                    if (other.isSubsetOf(type)) {
                      return this;
                    } else if (!type.isSubsetOf(other)) {
                      newTypes.push(type);
                    }
                  } else {
                    newTypes.push(type);
                  }
                }
                return makeUnionType(newTypes);
              }
            } else if (other instanceof UnionType) {
              types = union(this.types, other.types);
              if (types === this.types) {
                return this;
              } else if (types === other.types) {
                return other;
              } else {
                return makeUnionType(types);
              }
            } else {
              return other.union(this);
            }
          };
          _UnionType_prototype.intersect = function (other) {
            var types;
            if (!(other instanceof Type)) {
              throw TypeError("Expected other to be a " + __name(Type) + ", got " + __typeof(other));
            }
            if (other instanceof SimpleType || other instanceof GenericType || other instanceof ObjectType) {
              return makeUnionType(intersect(this.types, [other]));
            } else if (other instanceof UnionType) {
              types = intersect(this.types, other.types);
              if (types === this.types) {
                return this;
              } else if (types === other.types) {
                return other;
              } else {
                return makeUnionType(types);
              }
            } else {
              return other.intersect(this);
            }
          };
          _UnionType_prototype.isSubsetOf = function (other) {
            if (!(other instanceof Type)) {
              throw TypeError("Expected other to be a " + __name(Type) + ", got " + __typeof(other));
            }
            if (other instanceof UnionType) {
              return isSubsetOf(this.types, other.types);
            } else if (other instanceof ComplementType) {
              return !this.overlaps(other.untype);
            } else {
              return other === any;
            }
          };
          _UnionType_prototype.overlaps = function (other) {
            var _arr, _i, _some, type;
            if (!(other instanceof Type)) {
              throw TypeError("Expected other to be a " + __name(Type) + ", got " + __typeof(other));
            }
            if (other instanceof SimpleType) {
              return contains(this.types, other);
            } else if (other instanceof GenericType || other instanceof ObjectType) {
              _some = false;
              for (_arr = __toArray(this.types), _i = _arr.length; _i--; ) {
                type = _arr[_i];
                if (type.overlaps(other)) {
                  _some = true;
                  break;
                }
              }
              return _some;
            } else if (other instanceof UnionType) {
              return overlaps(this.types, other.types);
            } else {
              return other.overlaps(this);
            }
          };
          _UnionType_prototype.inspect = function (depth) {
            var _this;
            _this = this;
            return "(" + __strnum((function () {
              var _arr, _arr2, _i, _len, type;
              for (_arr = [], _arr2 = __toArray(_this.types), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                type = _arr2[_i];
                _arr.push(inspect(type, null, depth != null ? __num(depth) - 1 : null));
              }
              return _arr;
            }()).join(").union(")) + ")";
          };
          _UnionType_prototype.toJSON = function () {
            var _this;
            _this = this;
            return (function () {
              var _else, k, v;
              _else = true;
              for (k in Type) {
                if (__owns.call(Type, k)) {
                  _else = false;
                  v = Type[k];
                  if (v === _this) {
                    return k;
                  }
                }
              }
              return { type: "union", types: _this.types };
            }());
          };
          fromJSONTypes.union = function (_p) {
            var _arr, _i, current, type, types;
            types = _p.types;
            current = Type.none;
            for (_arr = __toArray(types), _i = _arr.length; _i--; ) {
              type = _arr[_i];
              current = current.union(Type.fromJSON(type));
            }
            return current;
          };
          return UnionType;
        }(Type));
        ComplementType = (function (Type) {
          var _ComplementType_prototype, _Type_prototype2;
          function ComplementType(untype) {
            var _this;
            _this = this instanceof ComplementType ? this : __create(_ComplementType_prototype);
            if (!(untype instanceof Type)) {
              throw TypeError("Expected untype to be a " + __name(Type) + ", got " + __typeof(untype));
            }
            _this.untype = untype;
            _this.id = getId();
            return _this;
          }
          _Type_prototype2 = Type.prototype;
          _ComplementType_prototype = ComplementType.prototype = __create(_Type_prototype2);
          _ComplementType_prototype.constructor = ComplementType;
          ComplementType.displayName = "ComplementType";
          if (typeof Type.extended === "function") {
            Type.extended(ComplementType);
          }
          _ComplementType_prototype.toString = function () {
            var _ref;
            if ((_ref = this._name) == null) {
              return this._name = "any \\ " + String(this.untype);
            } else {
              return _ref;
            }
          };
          function become(alpha, bravo) {
            if (!__lte(alpha.id, bravo.id)) {
              return become(bravo, alpha);
            }
            bravo.id = alpha.id;
            return bravo.untype = alpha.untype;
          }
          _ComplementType_prototype.equals = function (other) {
            if (this === other) {
              return true;
            } else if (other instanceof ComplementType) {
              if (this.id === other.id) {
                return true;
              } else if (this.untype.equals(other.untype)) {
                become(this, other);
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          };
          _ComplementType_prototype.compare = function (other) {
            var cmp;
            if (this === other) {
              return 0;
            } else if (other instanceof ComplementType) {
              if (this.id === other.id) {
                return 0;
              } else {
                cmp = this.untype.compare(other.untype);
                if (cmp === 0) {
                  become(this, other);
                }
                return cmp;
              }
            } else {
              return __cmp("ComplementType", other.constructor.displayName);
            }
          };
          function getUntypes(untype) {
            if (untype instanceof UnionType) {
              return untype.types;
            } else {
              return [untype];
            }
          }
          _ComplementType_prototype.union = function (other) {
            var myUntypes, untypes;
            if (!(other instanceof Type)) {
              throw TypeError("Expected other to be a " + __name(Type) + ", got " + __typeof(other));
            }
            if (other instanceof SimpleType || other instanceof GenericType || other instanceof ObjectType) {
              myUntypes = getUntypes(this.untype);
              untypes = relativeComplement(myUntypes, [other]);
              if (untypes === myUntypes) {
                return this;
              } else {
                return makeUnionType(untypes).complement();
              }
            } else if (other instanceof UnionType) {
              myUntypes = getUntypes(this.untype);
              untypes = relativeComplement(myUntypes, other.types);
              if (untypes === myUntypes) {
                return this;
              } else {
                return makeUnionType(untypes).complement();
              }
            } else if (other instanceof ComplementType) {
              return this.untype.intersect(other.untype).complement();
            } else {
              return other.union(this);
            }
          };
          _ComplementType_prototype.intersect = function (other) {
            var types;
            if (!(other instanceof Type)) {
              throw TypeError("Expected other to be a " + __name(Type) + ", got " + __typeof(other));
            }
            if (other instanceof SimpleType || other instanceof GenericType || other instanceof ObjectType) {
              if (contains(getUntypes(this.untype), other)) {
                return none;
              } else {
                return other;
              }
            } else if (other instanceof UnionType) {
              types = relativeComplement(other.types, getUntypes(this.untype));
              if (types === other.types) {
                return other;
              } else {
                return makeUnionType(types);
              }
            } else if (other instanceof ComplementType) {
              return this.untype.union(other.untype).complement();
            } else {
              return other.intersect(this);
            }
          };
          _ComplementType_prototype.isSubsetOf = function (other) {
            if (!(other instanceof Type)) {
              throw TypeError("Expected other to be a " + __name(Type) + ", got " + __typeof(other));
            }
            if (other instanceof ComplementType) {
              return other.untype.isSubsetOf(this.untype);
            } else {
              return other === any;
            }
          };
          _ComplementType_prototype.overlaps = function (other) {
            var _arr, _every, _i, untype;
            if (!(other instanceof Type)) {
              throw TypeError("Expected other to be a " + __name(Type) + ", got " + __typeof(other));
            }
            if (other instanceof SimpleType || other instanceof GenericType) {
              return !this.untype.overlaps(other);
            } else if (other instanceof ObjectType) {
              _every = true;
              for (_arr = getUntypes(this.untype), _i = _arr.length; _i--; ) {
                untype = _arr[_i];
                if (untype instanceof ObjectType && other.isSubsetOf(untype)) {
                  _every = false;
                  break;
                }
              }
              return _every;
            } else if (other instanceof UnionType) {
              return relativeComplement(other.types, getUntypes(this.untype)).length > 0;
            } else if (other instanceof ComplementType) {
              return true;
            } else {
              return other.overlaps(this);
            }
          };
          _ComplementType_prototype.complement = function () {
            return this.untype;
          };
          _ComplementType_prototype.inspect = function (depth) {
            return __strnum(this.untype.inspect(depth)) + ".complement()";
          };
          _ComplementType_prototype.toJSON = function () {
            var _this;
            _this = this;
            return (function () {
              var _else, k, v;
              _else = true;
              for (k in Type) {
                if (__owns.call(Type, k)) {
                  _else = false;
                  v = Type[k];
                  if (v === _this) {
                    return k;
                  }
                }
              }
              return { type: "complement", untype: _this.complement() };
            }());
          };
          fromJSONTypes.complement = function (_p) {
            var untype;
            untype = _p.untype;
            return Type.fromJSON(untype).complement();
          };
          return ComplementType;
        }(Type));
        any = Type.any = new (AnyType = (function (Type) {
          var _AnyType_prototype, _Type_prototype2;
          function AnyType() {
            var _this;
            _this = this instanceof AnyType ? this : __create(_AnyType_prototype);
            if (any) {
              throw Error("Cannot instantiate more than once");
            }
            return _this;
          }
          _Type_prototype2 = Type.prototype;
          _AnyType_prototype = AnyType.prototype = __create(_Type_prototype2);
          _AnyType_prototype.constructor = AnyType;
          AnyType.displayName = "AnyType";
          if (typeof Type.extended === "function") {
            Type.extended(AnyType);
          }
          _AnyType_prototype.toString = function () {
            return "any";
          };
          _AnyType_prototype.equals = function (other) {
            return this === other;
          };
          _AnyType_prototype.compare = function (other) {
            if (this === other) {
              return 0;
            } else {
              return __cmp("AnyType", other.constructor.displayName);
            }
          };
          _AnyType_prototype.union = function (other) {
            return this;
          };
          _AnyType_prototype.intersect = function (other) {
            return other;
          };
          _AnyType_prototype.isSubsetOf = function (other) {
            return this === other;
          };
          _AnyType_prototype.overlaps = function (other) {
            return true;
          };
          _AnyType_prototype.complement = function () {
            return none;
          };
          _AnyType_prototype.inspect = function () {
            return "Type.any";
          };
          _AnyType_prototype.toJSON = function () {
            return "any";
          };
          fromJSONTypes.any = function () {
            return any;
          };
          return AnyType;
        }(Type)))();
        none = Type.none = new (NoneType = (function (Type) {
          var _NoneType_prototype, _Type_prototype2;
          function NoneType() {
            var _this;
            _this = this instanceof NoneType ? this : __create(_NoneType_prototype);
            if (none) {
              throw Error("Cannot instantiate more than once");
            }
            return _this;
          }
          _Type_prototype2 = Type.prototype;
          _NoneType_prototype = NoneType.prototype = __create(_Type_prototype2);
          _NoneType_prototype.constructor = NoneType;
          NoneType.displayName = "NoneType";
          if (typeof Type.extended === "function") {
            Type.extended(NoneType);
          }
          _NoneType_prototype.toString = function () {
            return "none";
          };
          _NoneType_prototype.equals = function (other) {
            return this === other;
          };
          _NoneType_prototype.compare = function (other) {
            if (this === other) {
              return 0;
            } else {
              return __cmp("NoneType", other.constructor.displayName);
            }
          };
          _NoneType_prototype.union = function (other) {
            return other;
          };
          _NoneType_prototype.intersect = function (other) {
            return this;
          };
          _NoneType_prototype.isSubsetOf = function (other) {
            return true;
          };
          _NoneType_prototype.overlaps = function (other) {
            return false;
          };
          _NoneType_prototype.complement = function () {
            return any;
          };
          _NoneType_prototype.inspect = function () {
            return "Type.none";
          };
          _NoneType_prototype.toJSON = function () {
            return "none";
          };
          fromJSONTypes.none = function () {
            return none;
          };
          return NoneType;
        }(Type)))();
        arrayBase = Type.arrayBase = Type.make("Array");
        functionBase = Type.functionBase = Type.make("Function");
        Type["undefined"] = Type.make("undefined");
        Type["null"] = Type.make("null");
        Type.boolean = Type.make("Boolean");
        Type.string = Type.make("String");
        Type.stringArray = Type.string.array();
        Type.number = Type.make("Number");
        Type.numberArray = Type.number.array();
        Type.array = any.array();
        Type.args = Type.make("Arguments");
        Type.object = Type.makeObject({});
        Type["function"] = any["function"]();
        Type.regexp = Type.make("RegExp");
        Type.date = Type.make("Date");
        Type.error = Type.make("Error");
        Type.promise = Type.makeObject({ then: Type.any["function"](Type["function"], Type["function"]) });
        Type.numeric = Type.number.union(Type["undefined"]).union(Type["null"]).union(Type.boolean);
        Type.stringOrNumber = Type.string.union(Type.number);
        Type.arrayLike = Type.array.union(Type.args);
        Type.undefinedOrNull = Type["undefined"].union(Type["null"]);
        Type.notUndefinedOrNull = Type.undefinedOrNull.complement();
        Type.primitive = Type.undefinedOrNull.union(Type.boolean).union(Type.string).union(Type.number);
        Type.nonPrimitive = Type.primitive.complement();
        Type.alwaysFalsy = Type.undefinedOrNull;
        Type.potentiallyTruthy = Type.alwaysFalsy.complement();
        Type.potentiallyFalsy = Type.alwaysFalsy.union(Type.number).union(Type.string).union(Type.boolean);
        Type.alwaysTruthy = Type.potentiallyFalsy.complement();
        return Type;
      }());
    }.call(this));
    
    return module.exports;
  };
  require['./jsast'] = function () {
    var module = { exports: this };
    var exports = this;
    (function () {
      "use strict";
      var __cmp, __create, __import, __in, __isArray, __lt, __lte, __name, __num,
          __owns, __slice, __strnum, __toArray, __typeof, _ref, Arguments, Arr,
          Binary, Block, BlockExpression, BlockStatement, Break, Call, Comment,
          Const, Continue, Debugger, DoWhile, Eval, Expression, For, ForIn,
          fromJSON, Func, getIndent, Ident, If, IfExpression, IfStatement, inspect,
          isAcceptableIdent, Node, Noop, Obj, padLeft, Regex, Return, Root,
          Statement, Switch, This, Throw, toJSIdent, toJSSource, TryCatch,
          TryFinally, Unary, util, While;
      __cmp = function (left, right) {
        var type;
        if (left === right) {
          return 0;
        } else {
          type = typeof left;
          if (type !== "number" && type !== "string") {
            throw TypeError("Cannot compare a non-number/string: " + type);
          } else if (type !== typeof right) {
            throw TypeError("Cannot compare elements of different types: " + type + " vs " + typeof right);
          } else if (left < right) {
            return -1;
          } else {
            return 1;
          }
        }
      };
      __create = typeof Object.create === "function" ? Object.create
        : function (x) {
          function F() {}
          F.prototype = x;
          return new F();
        };
      __import = function (dest, source) {
        var k;
        for (k in source) {
          if (__owns.call(source, k)) {
            dest[k] = source[k];
          }
        }
        return dest;
      };
      __in = typeof Array.prototype.indexOf === "function"
        ? (function () {
          var indexOf;
          indexOf = Array.prototype.indexOf;
          return function (child, parent) {
            return indexOf.call(parent, child) !== -1;
          };
        }())
        : function (child, parent) {
          var i, len;
          len = +parent.length;
          i = -1;
          while (++i < len) {
            if (child === parent[i] && i in parent) {
              return true;
            }
          }
          return false;
        };
      __isArray = typeof Array.isArray === "function" ? Array.isArray
        : (function () {
          var _toString;
          _toString = Object.prototype.toString;
          return function (x) {
            return _toString.call(x) === "[object Array]";
          };
        }());
      __lt = function (x, y) {
        var type;
        type = typeof x;
        if (type !== "number" && type !== "string") {
          throw TypeError("Cannot compare a non-number/string: " + type);
        } else if (type !== typeof y) {
          throw TypeError("Cannot compare elements of different types: " + type + " vs " + typeof y);
        } else {
          return x < y;
        }
      };
      __lte = function (x, y) {
        var type;
        type = typeof x;
        if (type !== "number" && type !== "string") {
          throw TypeError("Cannot compare a non-number/string: " + type);
        } else if (type !== typeof y) {
          throw TypeError("Cannot compare elements of different types: " + type + " vs " + typeof y);
        } else {
          return x <= y;
        }
      };
      __name = function (func) {
        if (typeof func !== "function") {
          throw TypeError("Expected func to be a Function, got " + __typeof(func));
        }
        return func.displayName || func.name || "";
      };
      __num = function (num) {
        if (typeof num !== "number") {
          throw TypeError("Expected a number, got " + __typeof(num));
        } else {
          return num;
        }
      };
      __owns = Object.prototype.hasOwnProperty;
      __slice = Array.prototype.slice;
      __strnum = function (strnum) {
        var type;
        type = typeof strnum;
        if (type === "string") {
          return strnum;
        } else if (type === "number") {
          return String(strnum);
        } else {
          throw TypeError("Expected a string or number, got " + __typeof(strnum));
        }
      };
      __toArray = function (x) {
        if (x == null) {
          throw TypeError("Expected an object, got " + __typeof(x));
        } else if (__isArray(x)) {
          return x;
        } else if (typeof x === "string") {
          return x.split("");
        } else {
          return __slice.call(x);
        }
      };
      __typeof = (function () {
        var _toString;
        _toString = Object.prototype.toString;
        return function (o) {
          if (o === void 0) {
            return "Undefined";
          } else if (o === null) {
            return "Null";
          } else {
            return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
          }
        };
      }());
      util = require("util");
      if (util != null) {
        inspect = util.inspect;
      }
      padLeft = require("./utils").padLeft;
      _ref = require("./jsutils");
      isAcceptableIdent = _ref.isAcceptableIdent;
      toJSSource = _ref.toJSSource;
      function incIndent(options) {
        var clone;
        clone = __create(options);
        clone.indent = __num(clone.indent) + 1;
        return clone;
      }
      getIndent = (function () {
        var cache;
        cache = [""];
        return function (indent) {
          var i, result;
          if (__num(indent) >= cache.length) {
            result = cache[cache.length - 1];
            for (i = cache.length, __num(indent); i <= indent; ++i) {
              result = __strnum(result) + "  ";
              cache.push(result);
            }
          }
          return cache[indent];
        };
      }());
      function wrapStringHandler(callback) {
        function cb(item) {
          var len, parts, s;
          s = String(item);
          parts = s.split(/(?:\r\n?|[\n\u2028\u2029])/g);
          if (parts.length === 1) {
            cb.column = __num(cb.column) + __num(parts[0].length);
          } else {
            len = parts.length;
            cb.line = __num(cb.line) + (__num(len) - 1);
            cb.column = __num(parts[__num(len) - 1].length) + 1;
          }
          callback(s);
        }
        cb.line = 1;
        cb.column = 1;
        cb.indent = function (count) {
          callback(getIndent(count));
          cb.column = __num(cb.column) + __num(count);
        };
        return cb;
      }
      function StringWriter(callback) {
        var sb;
        return sb = wrapStringHandler(callback);
      }
      function StringBuilder() {
        var data, sb;
        data = [];
        sb = wrapStringHandler(function (item) {
          data.push(item);
        });
        sb.toString = function () {
          var text;
          switch (data.length) {
          case 0: return "";
          case 1: return data[0];
          default:
            text = data.join("");
            data.splice(0, data.length, text);
            return text;
          }
        };
        return sb;
      }
      exports.Node = Node = (function () {
        var _Node_prototype;
        function Node() {
          var _this;
          _this = this instanceof Node ? this : __create(_Node_prototype);
          throw Error("Node cannot be instantiated directly");
        }
        _Node_prototype = Node.prototype;
        Node.displayName = "Node";
        _Node_prototype.toString = function (options) {
          var sb;
          if (options == null) {
            options = {};
          }
          sb = StringBuilder();
          this.compileAsStatement(
            __import(
              { indent: 0, bare: true },
              options
            ),
            true,
            sb
          );
          return sb.toString();
        };
        _Node_prototype.compile = function () {
          throw Error("Not implemented: " + __name(this.constructor) + ".compile()");
        };
        _Node_prototype.maybeToStatement = function () {
          if (typeof this.toStatement === "function") {
            return this.toStatement();
          } else {
            return this;
          }
        };
        _Node_prototype.isConst = function () {
          return false;
        };
        _Node_prototype.isNoop = function () {
          return false;
        };
        _Node_prototype.constValue = function () {
          throw Error(__strnum(this.constructor.name) + " has no const value");
        };
        _Node_prototype.isLarge = function () {
          return true;
        };
        _Node_prototype.isSmall = function () {
          return !this.isLarge();
        };
        _Node_prototype.mutateLast = function () {
          return this;
        };
        _Node_prototype.exitType = function () {
          return null;
        };
        _Node_prototype.last = function () {
          return this;
        };
        _Node_prototype.toJSON = function () {
          return [this.constructor.name, this.pos.line, this.pos.column, this.pos.file || 0].concat(__toArray(this._toJSON()));
        };
        _Node_prototype._toJSON = function () {
          return [];
        };
        return Node;
      }());
      exports.Expression = Expression = (function (Node) {
        var _Expression_prototype, _Node_prototype;
        function Expression() {
          var _this;
          _this = this instanceof Expression ? this : __create(_Expression_prototype);
          throw Error("Expression cannot be instantiated directly");
        }
        _Node_prototype = Node.prototype;
        _Expression_prototype = Expression.prototype = __create(_Node_prototype);
        _Expression_prototype.constructor = Expression;
        Expression.displayName = "Expression";
        if (typeof Node.extended === "function") {
          Node.extended(Expression);
        }
        _Expression_prototype.compileAsBlock = function (options, level, lineStart, sb) {
          this.compile(options, level, lineStart, sb);
        };
        _Expression_prototype.compileAsStatement = function (options, lineStart, sb) {
          if (typeof this.toStatement === "function") {
            this.toStatement().compileAsStatement(options, lineStart, sb);
          } else {
            this.compile(options, 1, lineStart, sb);
            sb(";");
          }
        };
        _Expression_prototype.isLarge = function () {
          return false;
        };
        _Expression_prototype.mutateLast = function (func) {
          return func(this);
        };
        return Expression;
      }(Node));
      exports.Statement = Statement = (function (Node) {
        var _Node_prototype, _Statement_prototype;
        function Statement() {
          var _this;
          _this = this instanceof Statement ? this : __create(_Statement_prototype);
          throw Error("Expression cannot be instantiated directly");
        }
        _Node_prototype = Node.prototype;
        _Statement_prototype = Statement.prototype = __create(_Node_prototype);
        _Statement_prototype.constructor = Statement;
        Statement.displayName = "Statement";
        if (typeof Node.extended === "function") {
          Node.extended(Statement);
        }
        _Statement_prototype.compileAsStatement = function (options, lineStart, sb) {
          return this.compile(options, 1, lineStart, sb);
        };
        return Statement;
      }(Node));
      exports.Access = function (pos, parent) {
        var _i, _len, child, children, current;
        children = __slice.call(arguments, 2);
        current = parent;
        for (_i = 0, _len = children.length; _i < _len; ++_i) {
          child = children[_i];
          current = Binary(pos, current, ".", child);
        }
        return current;
      };
      function makePos(line, column, file) {
        var pos;
        if (typeof line !== "number") {
          throw TypeError("Expected line to be a Number, got " + __typeof(line));
        }
        if (typeof column !== "number") {
          throw TypeError("Expected column to be a Number, got " + __typeof(column));
        }
        if (file == null) {
          file = void 0;
        } else if (typeof file !== "string" && typeof file !== "number") {
          throw TypeError("Expected file to be one of String or Number or undefined, got " + __typeof(file));
        }
        pos = { line: line, column: column };
        if (file) {
          if (typeof file !== "string") {
            throw TypeError("Must provide a valid string for file");
          }
          pos.file = file;
        }
        return pos;
      }
      exports.Arguments = Arguments = (function (Expression) {
        var _Arguments_prototype, _Expression_prototype;
        function Arguments(pos) {
          var _this;
          _this = this instanceof Arguments ? this : __create(_Arguments_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          return _this;
        }
        _Expression_prototype = Expression.prototype;
        _Arguments_prototype = Arguments.prototype = __create(_Expression_prototype);
        _Arguments_prototype.constructor = Arguments;
        Arguments.displayName = "Arguments";
        if (typeof Expression.extended === "function") {
          Expression.extended(Arguments);
        }
        _Arguments_prototype.compile = function (options, level, lineStart, sb) {
          var _ref;
          if ((_ref = options.sourceMap) != null) {
            _ref.add(
              sb.line,
              sb.column,
              this.pos.line,
              this.pos.column,
              this.pos.file
            );
          }
          sb("arguments");
        };
        _Arguments_prototype.compileAsBlock = function (options, level, lineStart, sb) {
          Noop(this.pos).compileAsBlock(options, level, lineStart, sb);
        };
        _Arguments_prototype.walk = function () {
          return this;
        };
        _Arguments_prototype.isNoop = function () {
          return true;
        };
        _Arguments_prototype.inspect = function (depth) {
          return inspectHelper(depth, "Arguments", this.pos);
        };
        Arguments.fromJSON = function (line, column, file) {
          return Arguments(makePos(line, column, file));
        };
        return Arguments;
      }(Expression));
      function walkArray(array, walker) {
        var _arr, _i, _len, changed, item, newItem, result;
        if (!__isArray(array)) {
          throw TypeError("Expected array to be an Array, got " + __typeof(array));
        }
        if (typeof walker !== "function") {
          throw TypeError("Expected walker to be a Function, got " + __typeof(walker));
        }
        changed = false;
        for (_arr = [], _i = 0, _len = array.length; _i < _len; ++_i) {
          item = array[_i];
          newItem = walker(item);
          if (newItem == null) {
            newItem = item.walk(walker);
          }
          if (item !== newItem) {
            changed = true;
          }
          _arr.push(newItem);
        }
        result = _arr;
        if (changed) {
          return result;
        } else {
          return array;
        }
      }
      function decDepth(depth) {
        if (depth != null) {
          return __num(depth) - 1;
        } else {
          return null;
        }
      }
      function inspectHelper(depth, name, pos) {
        var _arr, _i, _len, _some, arg, args, d, found, hasLarge, part, parts;
        args = __slice.call(arguments, 3);
        d = decDepth(depth);
        found = false;
        for (_i = args.length; _i--; ) {
          arg = args[_i];
          if (!arg || arg instanceof Noop || __isArray(arg) && arg.length === 0) {
            args.pop();
          } else {
            break;
          }
        }
        for (_arr = [], _i = 0, _len = args.length; _i < _len; ++_i) {
          arg = args[_i];
          _arr.push(inspect(arg, null, d));
        }
        parts = _arr;
        _some = false;
        for (_i = 0, _len = parts.length; _i < _len; ++_i) {
          part = parts[_i];
          if (parts.length > 50 || part.indexOf("\n") !== -1) {
            _some = true;
            break;
          }
        }
        hasLarge = _some;
        if (hasLarge) {
          for (_arr = [], _i = 0, _len = parts.length; _i < _len; ++_i) {
            part = parts[_i];
            _arr.push("  " + __strnum(part.split("\n").join("\n  ")));
          }
          parts = _arr;
          return __strnum(name) + "(\n" + __strnum(parts.join(",\n")) + ")";
        } else {
          return __strnum(name) + "(" + __strnum(parts.join(", ")) + ")";
        }
      }
      function simplifyArray(array, childDefaultValue, keepTrailing) {
        var _len, i, item, lastNoop, result;
        if (!__isArray(array)) {
          throw TypeError("Expected array to be an Array, got " + __typeof(array));
        }
        if (keepTrailing == null) {
          keepTrailing = false;
        } else if (typeof keepTrailing !== "boolean") {
          throw TypeError("Expected keepTrailing to be a Boolean, got " + __typeof(keepTrailing));
        }
        if (array.length === 0) {
          return array;
        } else {
          result = [];
          lastNoop = -1;
          for (i = 0, _len = array.length; i < _len; ++i) {
            item = array[i];
            if (item instanceof Noop) {
              lastNoop = i;
            } else {
              lastNoop = -1;
            }
            result.push(simplify(item, childDefaultValue));
          }
          if (!keepTrailing && lastNoop !== -1) {
            result.splice(lastNoop, 1/0);
          }
          return result;
        }
      }
      function simplify(obj, defaultValue) {
        if (__isArray(obj)) {
          return simplifyArray(obj);
        } else if (obj instanceof Noop) {
          return defaultValue;
        } else {
          return obj;
        }
      }
      exports.Arr = Arr = (function (Expression) {
        var _Arr_prototype, _Expression_prototype;
        function Arr(pos, elements) {
          var _i, _this;
          _this = this instanceof Arr ? this : __create(_Arr_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          if (elements == null) {
            elements = [];
          } else if (!__isArray(elements)) {
            throw TypeError("Expected elements to be an Array, got " + __typeof(elements));
          } else {
            for (_i = elements.length; _i--; ) {
              if (!(elements[_i] instanceof Expression)) {
                throw TypeError("Expected " + ("elements[" + _i + "]") + " to be a " + __name(Expression) + ", got " + __typeof(elements[_i]));
              }
            }
          }
          _this.elements = elements;
          return _this;
        }
        _Expression_prototype = Expression.prototype;
        _Arr_prototype = Arr.prototype = __create(_Expression_prototype);
        _Arr_prototype.constructor = Arr;
        Arr.displayName = "Arr";
        if (typeof Expression.extended === "function") {
          Expression.extended(Arr);
        }
        function compileLarge(elements, options, level, lineStart, sb) {
          var _arr, childOptions, i, item, len;
          childOptions = incIndent(options);
          for (_arr = __toArray(elements), i = 0, len = _arr.length; i < len; ++i) {
            item = _arr[i];
            sb(options.linefeed || "\n");
            sb.indent(childOptions.indent);
            item.compile(childOptions, 3, false, sb);
            if (i < len - 1) {
              sb(",");
            }
          }
          sb(options.linefeed || "\n");
          sb.indent(options.indent);
        }
        function compileSmall(elements, options, level, lineStart, sb) {
          var _arr, _len, i, item;
          for (_arr = __toArray(elements), i = 0, _len = _arr.length; i < _len; ++i) {
            item = _arr[i];
            if (i > 0) {
              sb(",");
              if (!options.minify) {
                sb(" ");
              }
            }
            item.compile(options, 3, false, sb);
          }
        }
        _Arr_prototype.compile = function (options, level, lineStart, sb) {
          var _ref, f;
          if (options.sourceMap != null && this.pos.file) {
            options.sourceMap.pushFile(this.pos.file);
          }
          if ((_ref = options.sourceMap) != null) {
            _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
          }
          sb("[");
          if (!options.minify && this.shouldCompileLarge()) {
            f = compileLarge;
          } else {
            f = compileSmall;
          }
          f(
            this.elements,
            options,
            level,
            lineStart,
            sb
          );
          sb("]");
          if (options.sourceMap != null && this.pos.file) {
            options.sourceMap.popFile();
          }
        };
        _Arr_prototype.compileAsBlock = function (options, level, lineStart, sb) {
          return BlockExpression(this.pos, this.elements).compileAsBlock(options, level, lineStart, sb);
        };
        _Arr_prototype.compileAsStatement = function (options, lineStart, sb) {
          BlockStatement(this.pos, this.elements).compile(options, 1, lineStart, sb);
        };
        _Arr_prototype.shouldCompileLarge = function () {
          switch (this.elements.length) {
          case 0: return false;
          case 1: return this.elements[0].isLarge();
          default: return this.isLarge();
          }
        };
        _Arr_prototype.isSmall = function () {
          switch (this.elements.length) {
          case 0: return true;
          case 1: return this.elements[0].isSmall();
          default: return false;
          }
        };
        _Arr_prototype.isLarge = function () {
          var _ref, _this;
          _this = this;
          if ((_ref = this._isLarge) == null) {
            return this._isLarge = __num(this.elements.length) > 4 || (function () {
              var _arr, _i, _some, element;
              _some = false;
              for (_arr = __toArray(_this.elements), _i = _arr.length; _i--; ) {
                element = _arr[_i];
                if (!element.isSmall()) {
                  _some = true;
                  break;
                }
              }
              return _some;
            }());
          } else {
            return _ref;
          }
        };
        _Arr_prototype.isNoop = function () {
          var _arr, _every, _i, _ref, element;
          if ((_ref = this._isNoop) == null) {
            _every = true;
            for (_arr = __toArray(this.elements), _i = _arr.length; _i--; ) {
              element = _arr[_i];
              if (!element.isNoop()) {
                _every = false;
                break;
              }
            }
            return this._isNoop = _every;
          } else {
            return _ref;
          }
        };
        _Arr_prototype.walk = function (walker) {
          var elements;
          elements = walkArray(this.elements, walker);
          if (this.elements !== elements) {
            return Arr(this.pos, elements);
          } else {
            return this;
          }
        };
        _Arr_prototype.inspect = function (depth) {
          return inspectHelper(depth, "Arr", this.pos, this.elements);
        };
        _Arr_prototype._toJSON = function () {
          return simplifyArray(this.elements, 0);
        };
        Arr.fromJSON = function (line, column, file) {
          var elements;
          elements = __slice.call(arguments, 3);
          return Arr(
            makePos(line, column, file),
            arrayFromJSON(elements)
          );
        };
        return Arr;
      }(Expression));
      exports.Assign = function (pos, left, right) {
        return Binary(pos, left, "=", right);
      };
      exports.BinaryChain = function (pos, op) {
        var _i, _len, arg, args, current, i, left, right;
        args = __slice.call(arguments, 2);
        if (op === "+") {
          for (i = args.length - 2; i >= 0; --i) {
            left = args[i];
            right = args[i + 1];
            if ((typeof left === "string" || left instanceof Const && typeof left.value === "string") && (typeof right === "string" || right instanceof Const && typeof right.value === "string")) {
              args.splice(i, 2, __strnum(typeof left === "string" ? left : left.value) + __strnum(typeof right === "string" ? right : right.value));
            }
          }
        }
        current = args[0];
        for (_i = 1, _len = args.length; _i < _len; ++_i) {
          arg = args[_i];
          current = Binary(pos, current, op, arg);
        }
        return current;
      };
      exports.And = function (pos) {
        var _end, args, current, i;
        args = __slice.call(arguments, 1);
        if (args.length === 0) {
          return Const(pos, true);
        } else {
          current = args[0];
          for (i = 1, _end = args.length; i < _end; ++i) {
            current = Binary(pos, current, "&&", args[i]);
          }
          return current;
        }
      };
      exports.Or = function (pos) {
        var _end, args, current, i;
        args = __slice.call(arguments, 1);
        if (args.length === 0) {
          return Const(pos, false);
        } else {
          current = args[0];
          for (i = 1, _end = args.length; i < _end; ++i) {
            current = Binary(pos, current, "||", args[i]);
          }
          return current;
        }
      };
      function toConst(pos, value) {
        if (value instanceof Node) {
          throw Error("Cannot convert " + __typeof(value) + " to a Const");
        } else if (value instanceof RegExp) {
          return Regex(pos, value.source, value.flags);
        } else {
          return Const(pos, value);
        }
      }
      function isNegative(value) {
        if (typeof value !== "number") {
          throw TypeError("Expected value to be a Number, got " + __typeof(value));
        }
        return value < 0 || value === 0 && 1 / value < 0;
      }
      exports.Binary = Binary = (function (Expression) {
        var _Binary_prototype, _Expression_prototype, ASSIGNMENT_OPS,
            LEVEL_TO_ASSOCIATIVITY, OPERATOR_PRECEDENCE;
        function Binary(pos, left, op, right) {
          var _this;
          _this = this instanceof Binary ? this : __create(_Binary_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          if (left == null) {
            left = Noop(pos);
          }
          if (typeof op !== "string") {
            throw TypeError("Expected op to be a String, got " + __typeof(op));
          }
          _this.op = op;
          if (right == null) {
            right = Noop(pos);
          }
          if (!__owns.call(OPERATOR_PRECEDENCE, op)) {
            throw Error("Unknown binary operator: " + __strnum(toJSSource(op)));
          }
          if (!(left instanceof Expression)) {
            left = toConst(pos, left);
          }
          if (!(right instanceof Expression)) {
            right = toConst(pos, right);
          }
          _this.left = left;
          _this.right = right;
          return _this;
        }
        _Expression_prototype = Expression.prototype;
        _Binary_prototype = Binary.prototype = __create(_Expression_prototype);
        _Binary_prototype.constructor = Binary;
        Binary.displayName = "Binary";
        if (typeof Expression.extended === "function") {
          Expression.extended(Binary);
        }
        function compileAccess(op, left, right, options, level, lineStart, sb) {
          var dotAccess, stringLeft, wrap;
          dotAccess = right instanceof Const && typeof right.value === "string" && isAcceptableIdent(right.value);
          wrap = __num(level) > 18;
          if (wrap) {
            sb("(");
          }
          if (left instanceof Const && typeof left.value === "number") {
            stringLeft = toJSSource(left.value);
            if (isNegative(left.value) || !isFinite(left.value)) {
              sb("(");
              sb(stringLeft);
              sb(")");
            } else {
              sb(stringLeft);
              if (dotAccess && stringLeft.indexOf("e") === -1 && stringLeft.indexOf(".") === -1) {
                sb(".");
              }
            }
          } else if (left.isConst() && left.constValue() === void 0) {
            sb("(");
            (left instanceof Const ? left : Const(left.pos, void 0)).compile(options, 2, false, sb);
            sb(")");
          } else {
            left.compile(options, 18, lineStart, sb);
          }
          if (dotAccess) {
            sb(".");
            sb(right.value);
          } else {
            sb("[");
            right.compile(options, 2, false, sb);
            sb("]");
          }
          if (wrap) {
            sb(")");
          }
        }
        function compileOther(op, left, right, options, level, lineStart, sb) {
          var associativity, opLevel, spaced, wrap;
          opLevel = OPERATOR_PRECEDENCE[op];
          associativity = LEVEL_TO_ASSOCIATIVITY[opLevel];
          if (associativity === "paren") {
            wrap = !__lt(level, opLevel);
          } else {
            wrap = !__lte(level, opLevel);
          }
          if (wrap) {
            sb("(");
          }
          left.compile(
            options,
            associativity === "right" && left instanceof Binary && OPERATOR_PRECEDENCE[left.op] === opLevel ? __num(opLevel) + 1 : opLevel,
            lineStart && !wrap,
            sb
          );
          spaced = !options.minify || /^\w/.test(op);
          if (spaced) {
            sb(" ");
          }
          sb(op);
          if (spaced) {
            sb(" ");
          }
          right.compile(
            options,
            associativity === "left" && right instanceof Binary && OPERATOR_PRECEDENCE[right.op] === opLevel ? __num(opLevel) + 1 : opLevel,
            false,
            sb
          );
          if (wrap) {
            sb(")");
          }
        }
        _Binary_prototype.compile = function (options, level, lineStart, sb) {
          var _ref, f;
          if (options.sourceMap != null && this.pos.file) {
            options.sourceMap.pushFile(this.pos.file);
          }
          if ((_ref = options.sourceMap) != null) {
            _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
          }
          if (this.op === ".") {
            f = compileAccess;
          } else {
            f = compileOther;
          }
          f(
            this.op,
            this.left,
            this.right,
            options,
            level,
            lineStart,
            sb
          );
          if (options.sourceMap != null && this.pos.file) {
            options.sourceMap.popFile();
          }
        };
        _Binary_prototype.compileAsBlock = function (options, level, lineStart, sb) {
          var _ref;
          if (__owns.call(ASSIGNMENT_OPS, this.op) || (_ref = this.op) === "." || _ref === "&&" || _ref === "||") {
            _Expression_prototype.compileAsBlock.call(
              this,
              options,
              level,
              lineStart,
              sb
            );
          } else {
            BlockExpression(this.pos, [this.left, this.right]).compileAsBlock(options, level, lineStart, sb);
          }
        };
        _Binary_prototype.compileAsStatement = function (options, lineStart, sb) {
          var _this, left, op;
          _this = this;
          left = this.left;
          op = this.op;
          if (__owns.call(ASSIGNMENT_OPS, op)) {
            if (left instanceof Ident && typeof this.right.toStatement === "function" && false) {
              this.right.toStatement().mutateLast(
                function (node) {
                  return Binary(_this.pos, left, op, node);
                },
                { noop: true }
              ).compileAsStatement(options, lineStart, sb);
            } else {
              _Expression_prototype.compileAsStatement.call(this, options, lineStart, sb);
            }
          } else if (this.op === "&&") {
            IfStatement(this.pos, this.left, this.right).compileAsStatement(options, lineStart, sb);
          } else if (this.op === "||") {
            IfStatement(
              this.pos,
              Unary(this.pos, "!", this.left),
              this.right
            ).compileAsStatement(options, lineStart, sb);
          } else if (op === ".") {
            _Expression_prototype.compileAsStatement.call(this, options, lineStart, sb);
          } else {
            BlockStatement(this.pos, [this.left, this.right]).compileAsStatement(options, lineStart, sb);
          }
        };
        ASSIGNMENT_OPS = {
          "=": true,
          "+=": true,
          "-=": true,
          "*=": true,
          "/=": true,
          "%=": true,
          "<<=": true,
          ">>=": true,
          ">>>=": true,
          "&=": true,
          "^=": true,
          "|=": true
        };
        OPERATOR_PRECEDENCE = {
          ".": 18,
          "*": 15,
          "/": 15,
          "%": 15,
          "+": 14,
          "-": 14,
          "<<": 13,
          ">>": 13,
          ">>>": 13,
          "<": 12,
          "<=": 12,
          ">": 12,
          ">=": 12,
          "in": 12,
          "instanceof": 12,
          "==": 11,
          "!=": 11,
          "===": 11,
          "!==": 11,
          "&": 9,
          "^": 10,
          "|": 8,
          "&&": 7,
          "||": 6,
          "=": 4,
          "+=": 4,
          "-=": 4,
          "*=": 4,
          "/=": 4,
          "%=": 4,
          "<<=": 4,
          ">>=": 4,
          ">>>=": 4,
          "&=": 4,
          "^=": 4,
          "|=": 4
        };
        LEVEL_TO_ASSOCIATIVITY = {
          11: "paren",
          12: "paren",
          14: "left",
          15: "left",
          9: "none",
          8: "none",
          10: "none",
          13: "left",
          4: "right"
        };
        _Binary_prototype.isLarge = function () {
          var _ref;
          if ((_ref = this._isLarge) == null) {
            return this._isLarge = !this.left.isSmall() || !this.right.isSmall();
          } else {
            return _ref;
          }
        };
        _Binary_prototype.isSmall = function () {
          var _ref;
          if ((_ref = this._isSmall) == null) {
            return this._isSmall = this.left.isSmall() && this.right.isSmall();
          } else {
            return _ref;
          }
        };
        _Binary_prototype.isNoop = function () {
          var _ref;
          if ((_ref = this._isNoop) == null) {
            return this._isNoop = !__owns.call(ASSIGNMENT_OPS, this.op) && this.op !== "." && this.left.isNoop() && this.right.isNoop();
          } else {
            return _ref;
          }
        };
        _Binary_prototype.walk = function (walker) {
          var _ref, changed, left, right;
          changed = false;
          if ((_ref = walker(this.left)) != null) {
            left = _ref;
          } else {
            left = this.left.walk(walker);
          }
          if ((_ref = walker(this.right)) != null) {
            right = _ref;
          } else {
            right = this.right.walk(walker);
          }
          if (this.left !== left || this.right !== right) {
            return Binary(this.pos, left, this.op, right);
          } else {
            return this;
          }
        };
        _Binary_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "Binary",
            this.pos,
            this.left,
            this.op,
            this.right
          );
        };
        _Binary_prototype._toJSON = function () {
          var result;
          result = [
            simplify(this.left, 0),
            this.op
          ];
          if (simplify(this.right)) {
            result.push.apply(result, __toArray(this.right.toJSON()));
          }
          return result;
        };
        Binary.fromJSON = function (line, column, file, left, op) {
          var right;
          right = __slice.call(arguments, 5);
          return Binary(
            makePos(line, column, file),
            fromJSON(left),
            op,
            fromJSON(right)
          );
        };
        return Binary;
      }(Expression));
      exports.BlockStatement = BlockStatement = (function (Statement) {
        var _BlockStatement_prototype, _Statement_prototype;
        function BlockStatement(pos, body, label) {
          var _i, _i2, _len, _this, item, result, statement;
          _this = this instanceof BlockStatement ? this : __create(_BlockStatement_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          if (body == null) {
            body = [];
          } else if (!__isArray(body)) {
            throw TypeError("Expected body to be an Array, got " + __typeof(body));
          } else {
            for (_i = body.length; _i--; ) {
              if (!(body[_i] instanceof Node)) {
                throw TypeError("Expected " + ("body[" + _i + "]") + " to be a " + __name(Node) + ", got " + __typeof(body[_i]));
              }
            }
          }
          if (label == null) {
            label = null;
          } else if (!(label instanceof Ident)) {
            throw TypeError("Expected label to be one of " + (__name(Ident) + " or null") + ", got " + __typeof(label));
          }
          _this.label = label;
          result = [];
          for (_i2 = 0, _len = body.length; _i2 < _len; ++_i2) {
            item = body[_i2];
            statement = item.maybeToStatement();
            if (statement instanceof BlockStatement && !statement.label && (statement.pos.file === pos.file || !statement.pos.file)) {
              result.push.apply(result, __toArray(statement.body));
            } else if (!(statement instanceof Noop)) {
              result.push(statement);
            }
            if (statement.exitType() != null) {
              break;
            }
          }
          switch (result.length) {
          case 0: return Noop(pos);
          case 1:
            if (pos.file && !result[0].pos.file) {
              result[0].pos.file = pos.file;
            }
            return result[0];
          }
          _this.body = result;
          return _this;
        }
        _Statement_prototype = Statement.prototype;
        _BlockStatement_prototype = BlockStatement.prototype = __create(_Statement_prototype);
        _BlockStatement_prototype.constructor = BlockStatement;
        BlockStatement.displayName = "BlockStatement";
        if (typeof Statement.extended === "function") {
          Statement.extended(BlockStatement);
        }
        _BlockStatement_prototype.compile = function (options, level, lineStart, sb) {
          var _arr, _arr2, _i, _len, _ref, childOptions, i, item, minify, node,
              nodes;
          if (level !== 1) {
            throw Error("Cannot compile a statement except on the Block level");
          }
          for (_arr = [], _arr2 = __toArray(this.body), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
            node = _arr2[_i];
            if (!node.isNoop()) {
              _arr.push(node);
            }
          }
          nodes = _arr;
          if (options.sourceMap != null && this.pos.file) {
            options.sourceMap.pushFile(this.pos.file);
          }
          if ((_ref = options.sourceMap) != null) {
            _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
          }
          if (this.label != null) {
            childOptions = incIndent(options);
          } else {
            childOptions = options;
          }
          minify = options.minify;
          if (this.label != null) {
            this.label.compile(options, level, lineStart, sb);
            lineStart = false;
            sb(":");
            if (!minify) {
              sb(" ");
            }
            sb("{");
            if (!minify) {
              sb(options.linefeed || "\n");
              sb.indent(childOptions.indent);
              lineStart = true;
            }
          }
          for (i = 0, _len = nodes.length; i < _len; ++i) {
            item = nodes[i];
            if (i > 0 && !minify) {
              sb(options.linefeed || "\n");
              sb.indent(childOptions.indent);
              lineStart = true;
            }
            item.compileAsStatement(childOptions, lineStart, sb);
            lineStart = false;
          }
          if (this.label != null) {
            if (!minify) {
              sb(options.linefeed || "\n");
              sb.indent(options.indent);
            }
            sb("}");
          }
          if (options.sourceMap != null && this.pos.file) {
            options.sourceMap.popFile();
          }
        };
        _BlockStatement_prototype.walk = function (walker) {
          var _ref, body, label;
          body = walkArray(this.body, walker);
          if (this.label != null) {
            if ((_ref = walker(this.label)) != null) {
              label = _ref;
            } else {
              label = this.label.walk(walker);
            }
          } else {
            label = this.label;
          }
          if (this.body !== body || this.label !== label) {
            return Block(this.pos, body, label);
          } else {
            return this;
          }
        };
        _BlockStatement_prototype.mutateLast = function (func, options) {
          var body, last, newLast;
          last = this.last();
          newLast = last.mutateLast(func, options);
          if (last !== newLast) {
            body = __slice.call(this.body, 0, -1);
            body.push(newLast);
            return Block(this.pos, body);
          } else {
            return this;
          }
        };
        _BlockStatement_prototype.exitType = function () {
          return this.last().exitType();
        };
        _BlockStatement_prototype.last = function () {
          var _ref;
          return (_ref = this.body)[__num(_ref.length) - 1];
        };
        _BlockStatement_prototype.isNoop = function () {
          var _arr, _every, _i, _ref, node;
          if ((_ref = this._isNoop) == null) {
            _every = true;
            for (_arr = __toArray(this.body), _i = _arr.length; _i--; ) {
              node = _arr[_i];
              if (!node.isNoop()) {
                _every = false;
                break;
              }
            }
            return this._isNoop = _every;
          } else {
            return _ref;
          }
        };
        _BlockStatement_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "BlockStatement",
            this.pos,
            this.body,
            this.label
          );
        };
        _BlockStatement_prototype._toJSON = function () {
          return [this.label || 0].concat(__toArray(this.body));
        };
        BlockStatement.fromJSON = function (line, column, file, label) {
          var body;
          body = __slice.call(arguments, 4);
          return BlockStatement(
            makePos(line, column, file),
            arrayFromJSON(body),
            label ? fromJSON(label) : null
          );
        };
        return BlockStatement;
      }(Statement));
      exports.BlockExpression = BlockExpression = (function (Expression) {
        var _BlockExpression_prototype, _Expression_prototype;
        function BlockExpression(pos, body) {
          var _i, _this, i, item, len, result;
          _this = this instanceof BlockExpression ? this : __create(_BlockExpression_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          if (body == null) {
            body = [];
          } else if (!__isArray(body)) {
            throw TypeError("Expected body to be an Array, got " + __typeof(body));
          } else {
            for (_i = body.length; _i--; ) {
              if (!(body[_i] instanceof Expression)) {
                throw TypeError("Expected " + ("body[" + _i + "]") + " to be a " + __name(Expression) + ", got " + __typeof(body[_i]));
              }
            }
          }
          result = [];
          for (i = 0, len = body.length; i < len; ++i) {
            item = body[i];
            if (i === len - 1 || !(!item instanceof Noop)) {
              if (item instanceof BlockExpression && (item.pos.file === pos.file || !item.pos.file)) {
                result.push.apply(result, __toArray(item.body));
                if (i < len - 1 && result[result.length - 1] instanceof Noop) {
                  result.pop();
                }
              } else if (!(item instanceof Noop)) {
                result.push(item);
              }
            }
          }
          switch (result.length) {
          case 0: return Noop(pos);
          case 1:
            if (pos.file && !result[0].pos.file) {
              result[0].pos.file = pos.file;
            }
            return result[0];
          }
          _this.body = result;
          return _this;
        }
        _Expression_prototype = Expression.prototype;
        _BlockExpression_prototype = BlockExpression.prototype = __create(_Expression_prototype);
        _BlockExpression_prototype.constructor = BlockExpression;
        BlockExpression.displayName = "BlockExpression";
        if (typeof Expression.extended === "function") {
          Expression.extended(BlockExpression);
        }
        _BlockExpression_prototype.toStatement = function () {
          return BlockStatement(this.pos, this.body);
        };
        _BlockExpression_prototype.compile = function (options, level, lineStart, sb) {
          var _arr, _arr2, _len, _ref, i, item, len, node, nodes, wrap;
          if (level === 1) {
            this.toStatement().compile(options, level, lineStart, sb);
          } else {
            for (_arr = [], _arr2 = __toArray(this.body), i = 0, len = _arr2.length; i < len; ++i) {
              node = _arr2[i];
              if (!node.isNoop() || i === len - 1) {
                _arr.push(node);
              }
            }
            nodes = _arr;
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.pushFile(this.pos.file);
            }
            if ((_ref = options.sourceMap) != null) {
              _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
            }
            wrap = __num(level) > 2 && nodes.length > 1;
            if (wrap) {
              sb("(");
            }
            for (i = 0, _len = nodes.length; i < _len; ++i) {
              item = nodes[i];
              if (i > 0) {
                sb(",");
                if (!options.minify) {
                  sb(" ");
                }
              }
              item.compile(
                options,
                wrap ? 3 : level,
                false,
                sb
              );
            }
            if (wrap) {
              sb(")");
            }
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.popFile();
            }
          }
        };
        _BlockExpression_prototype.compileAsBlock = function (options, level, lineStart, sb) {
          var _arr, _arr2, _len, _ref, i, item, len, node, nodes, wrap;
          if (level === 1) {
            this.compile(options, level, lineStart, sb);
          } else {
            for (_arr = [], _arr2 = __toArray(this.body), i = 0, len = _arr2.length; i < len; ++i) {
              node = _arr2[i];
              if (!node.isNoop()) {
                _arr.push(node);
              }
            }
            nodes = _arr;
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.pushFile(this.pos.file);
            }
            if ((_ref = options.sourceMap) != null) {
              _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
            }
            wrap = __num(level) > 2 && nodes.length > 1;
            if (wrap) {
              sb("(");
            }
            for (i = 0, _len = nodes.length; i < _len; ++i) {
              item = nodes[i];
              if (i > 0) {
                sb(", ");
              }
              item.compileAsBlock(
                options,
                wrap ? 3 : level,
                false,
                sb
              );
            }
            if (wrap) {
              sb(")");
            }
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.popFile();
            }
          }
        };
        _BlockExpression_prototype.isLarge = function () {
          var _ref, _this;
          _this = this;
          if ((_ref = this._isLarge) == null) {
            return this._isLarge = __num(this.body.length) > 4 || (function () {
              var _arr, _i, _some, part;
              _some = false;
              for (_arr = __toArray(_this.body), _i = _arr.length; _i--; ) {
                part = _arr[_i];
                if (part.isLarge()) {
                  _some = true;
                  break;
                }
              }
              return _some;
            }());
          } else {
            return _ref;
          }
        };
        _BlockExpression_prototype.isSmall = function () {
          return false;
        };
        _BlockExpression_prototype.isNoop = function () {
          var _arr, _every, _i, _ref, node;
          if ((_ref = this._isNoop) == null) {
            _every = true;
            for (_arr = __toArray(this.body), _i = _arr.length; _i--; ) {
              node = _arr[_i];
              if (!node.isNoop()) {
                _every = false;
                break;
              }
            }
            return this._isNoop = _every;
          } else {
            return _ref;
          }
        };
        _BlockExpression_prototype.walk = BlockStatement.prototype.walk;
        _BlockExpression_prototype.last = function () {
          var _ref;
          return (_ref = this.body)[__num(_ref.length) - 1];
        };
        _BlockExpression_prototype.inspect = function (depth) {
          return inspectHelper(depth, "BlockExpression", this.pos, this.body);
        };
        _BlockExpression_prototype._toJSON = function () {
          return this.body;
        };
        BlockExpression.fromJSON = function (line, column, file) {
          var body;
          body = __slice.call(arguments, 3);
          return BlockExpression(
            makePos(line, column, file),
            arrayFromJSON(body)
          );
        };
        return BlockExpression;
      }(Expression));
      Block = exports.Block = function (pos, body, label) {
        var _i;
        if (body == null) {
          body = [];
        } else if (!__isArray(body)) {
          throw TypeError("Expected body to be an Array, got " + __typeof(body));
        } else {
          for (_i = body.length; _i--; ) {
            if (!(body[_i] instanceof Node)) {
              throw TypeError("Expected " + ("body[" + _i + "]") + " to be a " + __name(Node) + ", got " + __typeof(body[_i]));
            }
          }
        }
        if (label == null) {
          label = null;
        } else if (!(label instanceof Ident)) {
          throw TypeError("Expected label to be one of " + (__name(Ident) + " or null") + ", got " + __typeof(label));
        }
        if (body.length === 0) {
          return Noop(pos);
        } else if (label == null && (function () {
          var _every, _i2, item;
          _every = true;
          for (_i2 = body.length; _i2--; ) {
            item = body[_i2];
            if (!(item instanceof Expression)) {
              _every = false;
              break;
            }
          }
          return _every;
        }())) {
          return BlockExpression(pos, body);
        } else {
          return BlockStatement(pos, body, label);
        }
      };
      exports.Break = Break = (function (Statement) {
        var _Break_prototype, _Statement_prototype;
        function Break(pos, label) {
          var _this;
          _this = this instanceof Break ? this : __create(_Break_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          if (label == null) {
            label = null;
          } else if (!(label instanceof Ident)) {
            throw TypeError("Expected label to be one of " + (__name(Ident) + " or null") + ", got " + __typeof(label));
          }
          _this.label = label;
          return _this;
        }
        _Statement_prototype = Statement.prototype;
        _Break_prototype = Break.prototype = __create(_Statement_prototype);
        _Break_prototype.constructor = Break;
        Break.displayName = "Break";
        if (typeof Statement.extended === "function") {
          Statement.extended(Break);
        }
        _Break_prototype.compile = function (options, level, lineStart, sb) {
          var _ref;
          if (level !== 1) {
            throw Error("Cannot compile a statement except on the Block level");
          }
          if (options.sourceMap != null && this.pos.file) {
            options.sourceMap.pushFile(this.pos.file);
          }
          if ((_ref = options.sourceMap) != null) {
            _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
          }
          sb("break");
          if (this.label != null) {
            sb(" ");
            this.label.compile(options, 2, false, sb);
          }
          sb(";");
          if (options.sourceMap != null && this.pos.file) {
            options.sourceMap.popFile(this.pos.file);
          }
        };
        _Break_prototype.walk = function () {
          return this;
        };
        _Break_prototype.exitType = function () {
          return "break";
        };
        _Break_prototype.walk = function (walker) {
          var _ref, label;
          if (this.label != null) {
            if ((_ref = walker(this.label)) != null) {
              label = _ref;
            } else {
              label = this.label.walk(walker);
            }
          } else {
            label = this.label;
          }
          if (label !== this.label) {
            return Break(this.pos, label);
          } else {
            return this;
          }
        };
        _Break_prototype.inspect = function (depth) {
          return inspectHelper(depth, "Break", this.pos, this.label);
        };
        _Break_prototype.isLarge = function () {
          return false;
        };
        _Break_prototype._toJSON = function () {
          if (this.label != null) {
            return [this.label];
          } else {
            return [];
          }
        };
        Break.fromJSON = function (line, column, file, label) {
          return Break(
            makePos(line, column, file),
            label ? fromJSON(label) : null
          );
        };
        return Break;
      }(Statement));
      exports.Call = Call = (function (Expression) {
        var _Call_prototype, _Expression_prototype;
        function Call(pos, func, args, isNew) {
          var _i, _this;
          _this = this instanceof Call ? this : __create(_Call_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          if (func == null) {
            func = Noop(pos);
          } else if (!(func instanceof Expression)) {
            throw TypeError("Expected func to be a " + __name(Expression) + ", got " + __typeof(func));
          }
          _this.func = func;
          if (args == null) {
            args = [];
          } else if (!__isArray(args)) {
            throw TypeError("Expected args to be an Array, got " + __typeof(args));
          } else {
            for (_i = args.length; _i--; ) {
              if (!(args[_i] instanceof Expression)) {
                throw TypeError("Expected " + ("args[" + _i + "]") + " to be a " + __name(Expression) + ", got " + __typeof(args[_i]));
              }
            }
          }
          _this.args = args;
          if (isNew == null) {
            isNew = false;
          } else if (typeof isNew !== "boolean") {
            throw TypeError("Expected isNew to be a Boolean, got " + __typeof(isNew));
          }
          _this.isNew = isNew;
          return _this;
        }
        _Expression_prototype = Expression.prototype;
        _Call_prototype = Call.prototype = __create(_Expression_prototype);
        _Call_prototype.constructor = Call;
        Call.displayName = "Call";
        if (typeof Expression.extended === "function") {
          Expression.extended(Call);
        }
        function compileLarge(args, options, level, lineStart, sb) {
          var _arr, childOptions, i, item, len;
          sb("(");
          childOptions = incIndent(options);
          for (_arr = __toArray(args), i = 0, len = _arr.length; i < len; ++i) {
            item = _arr[i];
            sb(options.linefeed || "\n");
            sb.indent(childOptions.indent);
            item.compile(childOptions, 3, false, sb);
            if (i < len - 1) {
              sb(",");
            }
          }
          sb(options.linefeed || "\n");
          sb.indent(options.indent);
          sb(")");
        }
        function compileSmall(args, options, level, lineStart, sb) {
          var _arr, _len, arg, i;
          sb("(");
          for (_arr = __toArray(args), i = 0, _len = _arr.length; i < _len; ++i) {
            arg = _arr[i];
            if (i > 0) {
              sb(",");
              if (!options.minify) {
                sb(" ");
              }
            }
            arg.compile(options, 3, false, sb);
          }
          sb(")");
        }
        _Call_prototype.compile = function (options, level, lineStart, sb) {
          var _ref, f, wrap;
          if (options.sourceMap != null && this.pos.file) {
            options.sourceMap.pushFile(this.pos.file);
          }
          if ((_ref = options.sourceMap) != null) {
            _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
          }
          wrap = __num(level) > 18 || !this.isNew && (this.func instanceof Func || this.func instanceof Binary && this.func.op === "." && this.func.left instanceof Func);
          if (wrap) {
            sb("(");
          }
          if (this.isNew) {
            sb("new ");
          }
          this.func.compile(
            options,
            this.isNew ? 19 : 18,
            lineStart && !wrap && !this.isNew,
            sb
          );
          if (!options.minify && this.shouldCompileLarge()) {
            f = compileLarge;
          } else {
            f = compileSmall;
          }
          f(
            this.args,
            options,
            level,
            lineStart,
            sb
          );
          if (wrap) {
            sb(")");
          }
          if (options.sourceMap != null && this.pos.file) {
            options.sourceMap.popFile();
          }
        };
        _Call_prototype.shouldCompileLarge = function () {
          var _arr, _i, _len, _some, arg;
          if (__num(this.args.length) > 4) {
            return true;
          } else {
            _some = false;
            for (_arr = __toArray(this.args), _len = _arr.length, _i = _len - 2; _i >= 0; --_i) {
              arg = _arr[_i];
              if (!arg.isSmall()) {
                _some = true;
                break;
              }
            }
            return _some;
          }
        };
        _Call_prototype.hasLargeArgs = function () {
          var _arr, _i, _ref, _some, arg;
          if ((_ref = this._hasLargeArgs) == null) {
            if (__num(this.args.length) > 4) {
              return this._hasLargeArgs = true;
            } else {
              _some = false;
              for (_arr = __toArray(this.args), _i = _arr.length; _i--; ) {
                arg = _arr[_i];
                if (!arg.isSmall()) {
                  _some = true;
                  break;
                }
              }
              return this._hasLargeArgs = _some;
            }
          } else {
            return _ref;
          }
        };
        _Call_prototype.isLarge = function () {
          return this.func.isLarge() || this.hasLargeArgs();
        };
        _Call_prototype.isSmall = function () {
          var _ref;
          if ((_ref = this._isSmall) == null) {
            if (!this.func.isSmall()) {
              return this._isSmall = false;
            } else {
              switch (this.args.length) {
              case 0: return this._isSmall = true;
              case 1: return this._isSmall = this.args[0].isSmall();
              default: return this._isSmall = false;
              }
            }
          } else {
            return _ref;
          }
        };
        _Call_prototype.walk = function (walker) {
          var _ref, args, func;
          if ((_ref = walker(this.func)) != null) {
            func = _ref;
          } else {
            func = this.func.walk(walker);
          }
          args = walkArray(this.args, walker);
          if (this.func !== func || this.args !== args) {
            return Call(this.pos, func, args, this.isNew);
          } else {
            return this;
          }
        };
        _Call_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "Call",
            this.pos,
            this.func,
            this.args,
            this.isNew
          );
        };
        _Call_prototype._toJSON = function () {
          return [
            simplify(this.func, 0),
            this.isNew ? 1 : 0
          ].concat(__toArray(simplifyArray(this.args, 0)));
        };
        Call.fromJSON = function (line, column, file, func, isNew) {
          var args;
          args = __slice.call(arguments, 5);
          return Call(
            makePos(line, column, file),
            fromJSON(func),
            arrayFromJSON(args),
            !!isNew
          );
        };
        return Call;
      }(Expression));
      exports.Comment = Comment = (function (Statement) {
        var _Comment_prototype, _Statement_prototype;
        function Comment(pos, text) {
          var _this;
          _this = this instanceof Comment ? this : __create(_Comment_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          if (typeof text !== "string") {
            throw TypeError("Expected text to be a String, got " + __typeof(text));
          }
          _this.text = text;
          if (text.substring(0, 2) !== "/*") {
            throw Error("Expected text to start with '/*'");
          }
          if (text.slice(-2) !== "*/") {
            throw Error("Expected text to end with '*/'");
          }
          return _this;
        }
        _Statement_prototype = Statement.prototype;
        _Comment_prototype = Comment.prototype = __create(_Statement_prototype);
        _Comment_prototype.constructor = Comment;
        Comment.displayName = "Comment";
        if (typeof Statement.extended === "function") {
          Statement.extended(Comment);
        }
        _Comment_prototype.compile = function (options, level, lineStart, sb) {
          var _arr, _len, i, line, lines;
          lines = this.text.split("\n");
          for (_arr = __toArray(lines), i = 0, _len = _arr.length; i < _len; ++i) {
            line = _arr[i];
            if (i > 0) {
              sb(options.linefeed || "\n");
              if (!options.minify) {
                sb.indent(options.indent);
              }
            }
            sb(line);
          }
        };
        _Comment_prototype.isConst = function () {
          return true;
        };
        _Comment_prototype.constValue = function () {
          return;
        };
        _Comment_prototype.isNoop = function () {
          return false;
        };
        _Comment_prototype.walk = function () {
          return this;
        };
        _Comment_prototype.inspect = function (depth) {
          return inspectHelper("Comment", this.pos, this.text);
        };
        _Comment_prototype._toJSON = function () {
          return [this.text];
        };
        Comment.fromJSON = function (line, column, file, text) {
          return Comment(
            makePos(line, column, file),
            text
          );
        };
        return Comment;
      }(Statement));
      exports.Const = Const = (function (Expression) {
        var _Const_prototype, _Expression_prototype;
        function Const(pos, value) {
          var _this;
          _this = this instanceof Const ? this : __create(_Const_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          if (value != null && typeof value !== "boolean" && typeof value !== "number" && typeof value !== "string") {
            throw TypeError("Expected value to be one of undefined or null or Boolean or Number or String, got " + __typeof(value));
          }
          _this.value = value;
          return _this;
        }
        _Expression_prototype = Expression.prototype;
        _Const_prototype = Const.prototype = __create(_Expression_prototype);
        _Const_prototype.constructor = Const;
        Const.displayName = "Const";
        if (typeof Expression.extended === "function") {
          Expression.extended(Const);
        }
        _Const_prototype.compile = function (options, level, lineStart, sb) {
          var _ref, value, wrap;
          if (options.sourceMap != null && this.pos.file) {
            options.sourceMap.pushFile(this.pos.file);
          }
          if ((_ref = options.sourceMap) != null) {
            _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
          }
          value = this.value;
          if (value === void 0 && options.undefinedName != null) {
            sb(options.undefinedName);
          } else {
            wrap = __num(level) >= 17 && (value === void 0 || typeof value === "number" && !isFinite(value));
            if (wrap) {
              sb("(");
            }
            sb(toJSSource(value));
            if (wrap) {
              sb(")");
            }
          }
          if (options.sourceMap != null && this.pos.file) {
            options.sourceMap.popFile();
          }
        };
        _Const_prototype.compileAsBlock = function (options, level, lineStart, sb) {
          Noop(this.pos).compileAsBlock(options, level, lineStart, sb);
        };
        _Const_prototype.isConst = function () {
          return true;
        };
        _Const_prototype.isNoop = Const.prototype.isConst;
        _Const_prototype.constValue = function () {
          return this.value;
        };
        _Const_prototype.walk = function () {
          return this;
        };
        _Const_prototype.inspect = function (depth) {
          return "Const(" + __strnum(inspect(this.value, null, decDepth(depth))) + ")";
        };
        _Const_prototype._toJSON = function () {
          if (typeof this.value === "number" && !isFinite(this.value)) {
            return [
              __num(this.value) > 0 ? 1 : __num(this.value) < 0 ? -1 : 0,
              1
            ];
          } else if (this.value === 0 && isNegative(this.value)) {
            return [0, 2];
          } else if (this.value === void 0) {
            return [];
          } else {
            return [this.value];
          }
        };
        Const.fromJSON = function (line, column, file, value, state) {
          return Const(
            makePos(line, column, file),
            state === 1 ? __num(value) / 0 : value === 0 && state === 2 ? -0 : value
          );
        };
        return Const;
      }(Expression));
      exports.Continue = Continue = (function (Statement) {
        var _Continue_prototype, _Statement_prototype;
        function Continue(pos, label) {
          var _this;
          _this = this instanceof Continue ? this : __create(_Continue_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          if (label == null) {
            label = null;
          } else if (!(label instanceof Ident)) {
            throw TypeError("Expected label to be one of " + (__name(Ident) + " or null") + ", got " + __typeof(label));
          }
          _this.label = label;
          return _this;
        }
        _Statement_prototype = Statement.prototype;
        _Continue_prototype = Continue.prototype = __create(_Statement_prototype);
        _Continue_prototype.constructor = Continue;
        Continue.displayName = "Continue";
        if (typeof Statement.extended === "function") {
          Statement.extended(Continue);
        }
        _Continue_prototype.compile = function (options, level, lineStart, sb) {
          var _ref;
          if (level !== 1) {
            throw Error("Cannot compile a statement except on the Block level");
          }
          if (options.sourceMap != null && this.pos.file) {
            options.sourceMap.pushFile(this.pos.file);
          }
          if ((_ref = options.sourceMap) != null) {
            _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
          }
          sb("continue");
          if (this.label != null) {
            sb(" ");
            this.label.compile(options, 2, false, sb);
          }
          sb(";");
          if (options.sourceMap != null && this.pos.file) {
            return options.sourceMap.popFile();
          }
        };
        _Continue_prototype.walk = function () {
          return this;
        };
        _Continue_prototype.exitType = function () {
          return "continue";
        };
        _Continue_prototype.isLarge = function () {
          return false;
        };
        _Continue_prototype.walk = function (walker) {
          var _ref, label;
          if (this.label != null) {
            if ((_ref = walker(this.label)) != null) {
              label = _ref;
            } else {
              label = this.label.walk(walker);
            }
          } else {
            label = this.label;
          }
          if (label !== this.label) {
            return Continue(this.pop, label);
          } else {
            return this;
          }
        };
        _Continue_prototype.inspect = function (depth) {
          return inspectHelper(depth, "Continue", this.pos, this.label);
        };
        _Continue_prototype._toJSON = function () {
          if (this.label != null) {
            return [this.label];
          } else {
            return [];
          }
        };
        Continue.fromJSON = function (line, column, file, label) {
          return Continue(
            makePos(line, column, file),
            label ? fromJSON(label) : null
          );
        };
        return Continue;
      }(Statement));
      exports.Debugger = Debugger = (function (Statement) {
        var _Debugger_prototype, _Statement_prototype;
        function Debugger(pos) {
          var _this;
          _this = this instanceof Debugger ? this : __create(_Debugger_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          return _this;
        }
        _Statement_prototype = Statement.prototype;
        _Debugger_prototype = Debugger.prototype = __create(_Statement_prototype);
        _Debugger_prototype.constructor = Debugger;
        Debugger.displayName = "Debugger";
        if (typeof Statement.extended === "function") {
          Statement.extended(Debugger);
        }
        _Debugger_prototype.compile = function (options, level, lineStart, sb) {
          var _ref;
          if (level !== 1) {
            throw Error("Cannot compile a statement except on the Block level");
          }
          if ((_ref = options.sourceMap) != null) {
            _ref.add(
              sb.line,
              sb.column,
              this.pos.line,
              this.pos.column,
              this.pos.file
            );
          }
          return sb("debugger;");
        };
        _Debugger_prototype.walk = function () {
          return this;
        };
        _Debugger_prototype.isLarge = function () {
          return false;
        };
        _Debugger_prototype.inspect = function (depth) {
          return inspectHelper(depth, "Debugger", this.pos);
        };
        Debugger.fromJSON = function (line, column, file) {
          return Debugger(makePos(line, column, file));
        };
        return Debugger;
      }(Statement));
      exports.DoWhile = DoWhile = (function (Statement) {
        var _DoWhile_prototype, _Statement_prototype;
        function DoWhile(pos, body, test, label) {
          var _this;
          _this = this instanceof DoWhile ? this : __create(_DoWhile_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          if (body == null) {
            body = Noop(pos);
          } else if (!(body instanceof Node)) {
            throw TypeError("Expected body to be a " + __name(Node) + ", got " + __typeof(body));
          }
          if (test == null) {
            test = Noop(pos);
          } else if (!(test instanceof Expression)) {
            throw TypeError("Expected test to be a " + __name(Expression) + ", got " + __typeof(test));
          }
          _this.test = test;
          if (label == null) {
            label = null;
          } else if (!(label instanceof Ident)) {
            throw TypeError("Expected label to be one of " + (__name(Ident) + " or null") + ", got " + __typeof(label));
          }
          _this.label = label;
          _this.body = body.maybeToStatement();
          if (test.isConst() && !test.constValue()) {
            return Block(pos, [_this.body], label);
          }
          return _this;
        }
        _Statement_prototype = Statement.prototype;
        _DoWhile_prototype = DoWhile.prototype = __create(_Statement_prototype);
        _DoWhile_prototype.constructor = DoWhile;
        DoWhile.displayName = "DoWhile";
        if (typeof Statement.extended === "function") {
          Statement.extended(DoWhile);
        }
        _DoWhile_prototype.compile = function (options, level, lineStart, sb) {
          var _ref, minify;
          if (level !== 1) {
            throw Error("Cannot compile a statement except on the Block level");
          }
          if (options.sourceMap != null && this.pos.file) {
            options.sourceMap.pushFile(this.pos.file);
          }
          if ((_ref = options.sourceMap) != null) {
            _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
          }
          minify = options.minify;
          if (this.label != null) {
            this.label.compile(options, level, lineStart, sb);
            lineStart = false;
            sb(":");
            if (!minify) {
              sb(" ");
            }
          }
          sb("do");
          if (this.body.isNoop()) {
            sb(";");
          } else {
            if (!minify) {
              sb(" ");
            }
            sb("{");
            if (!minify) {
              sb(options.linefeed || "\n");
              sb.indent(__num(options.indent) + 1);
              lineStart = true;
            }
            this.body.compileAsStatement(incIndent(options), lineStart, sb);
            lineStart = false;
            if (!minify) {
              sb(options.linefeed || "\n");
              sb.indent(options.indent);
            }
            sb("}");
          }
          if (!minify) {
            sb(" ");
          }
          sb("while");
          if (!minify) {
            sb(" ");
          }
          sb("(");
          this.test.compile(options, 2, false, sb);
          sb(");");
          if (options.sourceMap != null && this.pos.file) {
            options.sourceMap.popFile();
          }
        };
        _DoWhile_prototype.walk = function (walker) {
          var _ref, body, label, test;
          if ((_ref = walker(this.body)) != null) {
            body = _ref;
          } else {
            body = this.body.walk(walker);
          }
          if ((_ref = walker(this.test)) != null) {
            test = _ref;
          } else {
            test = this.test.walk(walker);
          }
          if (this.label != null) {
            if ((_ref = walker(this.label)) != null) {
              label = _ref;
            } else {
              label = this.label.walk(walker);
            }
          } else {
            label = this.label;
          }
          if (body !== this.body || test !== this.test || label !== this.label) {
            return DoWhile(this.pos, body, test, label);
          } else {
            return this;
          }
        };
        _DoWhile_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "DoWhile",
            this.pos,
            this.body,
            this.test,
            this.label
          );
        };
        _DoWhile_prototype._toJSON = function () {
          return [
            this.label || 0,
            simplify(this.test, 0),
            simplify(this.body, 0)
          ];
        };
        DoWhile.fromJSON = function (line, column, file, label, test, body) {
          return DoWhile(
            makePos(line, column, file),
            fromJSON(body),
            fromJSON(test),
            label ? fromJSON(label) : null
          );
        };
        return DoWhile;
      }(Statement));
      exports.Eval = Eval = (function (Expression) {
        var _Eval_prototype, _Expression_prototype;
        function Eval(pos, code) {
          var _this;
          _this = this instanceof Eval ? this : __create(_Eval_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          if (code == null) {
            code = Noop(pos);
          }
          if (!(code instanceof Expression)) {
            code = toConst(pos, code);
          }
          _this.code = code;
          return _this;
        }
        _Expression_prototype = Expression.prototype;
        _Eval_prototype = Eval.prototype = __create(_Expression_prototype);
        _Eval_prototype.constructor = Eval;
        Eval.displayName = "Eval";
        if (typeof Expression.extended === "function") {
          Expression.extended(Eval);
        }
        _Eval_prototype.compile = function (options, level, lineStart, sb) {
          var _ref;
          if (options.sourceMap != null && this.pos.file) {
            options.sourceMap.pushFile(this.pos.file);
          }
          if ((_ref = options.sourceMap) != null) {
            _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
          }
          if (this.code instanceof Const) {
            sb(String(this.code.value));
          } else {
            sb("eval(");
            this.code.compile(options, 3, false, sb);
            sb(")");
          }
          if (options.sourceMap != null && this.pos.file) {
            options.sourceMap.popFile();
          }
        };
        _Eval_prototype.walk = function (walker) {
          var _ref, code;
          if ((_ref = walker(this.code)) != null) {
            code = _ref;
          } else {
            code = this.code.walk(walker);
          }
          if (code !== this.code) {
            return Eval(this.pops, code);
          } else {
            return this;
          }
        };
        _Eval_prototype.inspect = function (depth) {
          return inspectHelper(depth, "Eval", this.pos, this.code);
        };
        _Eval_prototype._toJSON = function () {
          return [simplify(this.code, 0)];
        };
        Eval.fromJSON = function (line, column, file, code) {
          return Eval(
            makePos(line, column, file),
            fromJSON(code)
          );
        };
        return Eval;
      }(Expression));
      exports.For = For = (function (Statement) {
        var _For_prototype, _Statement_prototype;
        function For(pos, init, test, step, body, label) {
          var _this;
          _this = this instanceof For ? this : __create(_For_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          if (init == null) {
            init = Noop(pos);
          } else if (!(init instanceof Expression)) {
            throw TypeError("Expected init to be a " + __name(Expression) + ", got " + __typeof(init));
          }
          _this.init = init;
          if (test == null) {
            test = Const(pos, true);
          }
          if (step == null) {
            step = Noop(pos);
          } else if (!(step instanceof Expression)) {
            throw TypeError("Expected step to be a " + __name(Expression) + ", got " + __typeof(step));
          }
          _this.step = step;
          if (!(body instanceof Node)) {
            throw TypeError("Expected body to be a " + __name(Node) + ", got " + __typeof(body));
          }
          if (label == null) {
            label = null;
          } else if (!(label instanceof Ident)) {
            throw TypeError("Expected label to be one of " + (__name(Ident) + " or null") + ", got " + __typeof(label));
          }
          _this.label = label;
          if (!(test instanceof Expression)) {
            test = toConst(pos, test);
          }
          if (test.isConst() && !test.constValue()) {
            return init;
          }
          _this.test = test;
          _this.body = body.maybeToStatement();
          return _this;
        }
        _Statement_prototype = Statement.prototype;
        _For_prototype = For.prototype = __create(_Statement_prototype);
        _For_prototype.constructor = For;
        For.displayName = "For";
        if (typeof Statement.extended === "function") {
          Statement.extended(For);
        }
        _For_prototype.compile = function (options, level, lineStart, sb) {
          var _ref, minify, test;
          if (level !== 1) {
            throw Error("Cannot compile a statement except on the Block level");
          }
          if (this.test.isConst() && typeof this.test.constValue() !== "boolean") {
            test = Const(this.pos, !!this.test.constValue());
          } else {
            test = this.test;
          }
          if (options.sourceMap != null && this.pos.file) {
            options.sourceMap.pushFile(this.pos.file);
          }
          if ((_ref = options.sourceMap) != null) {
            _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
          }
          minify = options.minify;
          if (this.label != null) {
            this.label.compile(options, level, lineStart, sb);
            sb(":");
            if (!minify) {
              sb(" ");
            }
          }
          if (this.init.isNoop() && this.step.isNoop()) {
            sb("while");
            if (!minify) {
              sb(" ");
            }
            sb("(");
            test.compile(options, 2, false, sb);
          } else {
            sb("for");
            if (!minify) {
              sb(" ");
            }
            sb("(");
            if (!this.init.isNoop()) {
              this.init.compileAsBlock(options, 2, false, sb);
            }
            sb(";");
            if (!minify) {
              sb(" ");
            }
            if (!test.isConst() || !test.constValue()) {
              test.compile(options, 2, false, sb);
            }
            sb(";");
            if (!minify) {
              sb(" ");
            }
            if (!this.step.isNoop()) {
              this.step.compileAsBlock(options, 2, false, sb);
            }
          }
          sb(")");
          if (this.body.isNoop()) {
            sb(";");
          } else {
            if (!minify) {
              sb(" ");
            }
            sb("{");
            if (!minify) {
              sb(options.linefeed || "\n");
              sb.indent(__num(options.indent) + 1);
            }
            this.body.compileAsStatement(incIndent(options), !minify, sb);
            if (!minify) {
              sb(options.linefeed || "\n");
              sb.indent(options.indent);
            }
            sb("}");
          }
          if (options.sourceMap != null && this.pos.file) {
            options.sourceMap.popFile();
          }
        };
        _For_prototype.walk = function (walker) {
          var _ref, body, init, label, step, test;
          if ((_ref = walker(this.init)) != null) {
            init = _ref;
          } else {
            init = this.init.walk(walker);
          }
          if ((_ref = walker(this.test)) != null) {
            test = _ref;
          } else {
            test = this.test.walk(walker);
          }
          if ((_ref = walker(this.step)) != null) {
            step = _ref;
          } else {
            step = this.step.walk(walker);
          }
          if ((_ref = walker(this.body)) != null) {
            body = _ref;
          } else {
            body = this.body.walk(walker);
          }
          if (this.label != null) {
            if ((_ref = walker(this.label)) != null) {
              label = _ref;
            } else {
              label = this.label.walk(walker);
            }
          } else {
            label = this.label;
          }
          if (init !== this.init || test !== this.test || step !== this.step || body !== this.body || label !== this.label) {
            return For(
              this.pos,
              init,
              test,
              step,
              body,
              label
            );
          } else {
            return this;
          }
        };
        _For_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "For",
            this.pos,
            this.init,
            this.test,
            this.step,
            this.body,
            this.label
          );
        };
        _For_prototype._toJSON = function () {
          var result;
          result = [
            this.label || 0,
            simplify(this.init, 0),
            simplify(this.test, 0),
            simplify(this.step, 0)
          ];
          if (simplify(this.body)) {
            result.push.apply(result, __toArray(this.body.toJSON()));
          }
          return result;
        };
        For.fromJSON = function (line, column, file, label, init, test, step) {
          var body;
          body = __slice.call(arguments, 7);
          return For(
            makePos(line, column, file),
            fromJSON(init),
            fromJSON(test),
            fromJSON(step),
            fromJSON(body),
            label ? fromJSON(label) : null
          );
        };
        return For;
      }(Statement));
      exports.ForIn = ForIn = (function (Statement) {
        var _ForIn_prototype, _Statement_prototype;
        function ForIn(pos, key, object, body, label) {
          var _this;
          _this = this instanceof ForIn ? this : __create(_ForIn_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          if (!(key instanceof Ident)) {
            throw TypeError("Expected key to be a " + __name(Ident) + ", got " + __typeof(key));
          }
          _this.key = key;
          if (object == null) {
            object = Noop(line, column);
          } else if (!(object instanceof Expression)) {
            throw TypeError("Expected object to be a " + __name(Expression) + ", got " + __typeof(object));
          }
          _this.object = object;
          if (body == null) {
            body = Noop(line, column);
          } else if (!(body instanceof Node)) {
            throw TypeError("Expected body to be a " + __name(Node) + ", got " + __typeof(body));
          }
          if (label == null) {
            label = null;
          } else if (!(label instanceof Ident)) {
            throw TypeError("Expected label to be one of " + (__name(Ident) + " or null") + ", got " + __typeof(label));
          }
          _this.label = label;
          _this.body = body.maybeToStatement();
          return _this;
        }
        _Statement_prototype = Statement.prototype;
        _ForIn_prototype = ForIn.prototype = __create(_Statement_prototype);
        _ForIn_prototype.constructor = ForIn;
        ForIn.displayName = "ForIn";
        if (typeof Statement.extended === "function") {
          Statement.extended(ForIn);
        }
        _ForIn_prototype.compile = function (options, level, lineStart, sb) {
          var _ref, minify;
          if (level !== 1) {
            throw Error("Cannot compile a statement except on the Block level");
          }
          if (options.sourceMap != null && this.pos.file) {
            options.sourceMap.pushFile(this.pos.file);
          }
          if ((_ref = options.sourceMap) != null) {
            _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
          }
          minify = options.minify;
          if (this.label != null) {
            this.label.compile(options, level, lineStart, sb);
            sb(":");
            if (!minify) {
              sb(" ");
            }
          }
          sb("for");
          if (!minify) {
            sb(" ");
          }
          sb("(");
          this.key.compile(options, 2, false, sb);
          sb(" in ");
          this.object.compile(options, 2, false, sb);
          sb(")");
          if (this.body.isNoop()) {
            sb(";");
          } else {
            if (!minify) {
              sb(" ");
            }
            sb("{");
            if (!minify) {
              sb(options.linefeed || "\n");
              sb.indent(__num(options.indent) + 1);
            }
            this.body.compileAsStatement(incIndent(options), !minify, sb);
            if (!minify) {
              sb(options.linefeed || "\n");
              sb.indent(options.indent);
            }
            sb("}");
          }
          if (options.sourceMap != null && this.pos.file) {
            options.sourceMap.popFile();
          }
        };
        _ForIn_prototype.walk = function (walker) {
          var _ref, body, key, label, object;
          if ((_ref = walker(this.key)) != null) {
            key = _ref;
          } else {
            key = this.key.walk(walker);
          }
          if ((_ref = walker(this.object)) != null) {
            object = _ref;
          } else {
            object = this.object.walk(walker);
          }
          if ((_ref = walker(this.body)) != null) {
            body = _ref;
          } else {
            body = this.body.walk(walker);
          }
          if (this.label != null) {
            if ((_ref = walker(this.label)) != null) {
              label = _ref;
            } else {
              label = this.label.walk(walker);
            }
          } else {
            label = this.label;
          }
          if (key !== this.key || object !== this.object || body !== this.body || label !== this.label) {
            return ForIn(this.pos, key, object, body);
          } else {
            return this;
          }
        };
        _ForIn_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "ForIn",
            this.pos,
            this.key,
            this.object,
            this.body,
            this.label
          );
        };
        _ForIn_prototype._toJSON = function () {
          var result;
          result = [
            this.label || 0,
            this.key,
            simplify(this.object, 0)
          ];
          if (simplify(this.body)) {
            result.push.apply(result, __toArray(this.body.toJSON()));
          }
          return result;
        };
        ForIn.fromJSON = function (line, column, file, label, key, object) {
          var body;
          body = __slice.call(arguments, 6);
          return ForIn(
            makePos(line, column, file),
            fromJSON(key),
            fromJSON(object),
            fromJSON(body),
            label ? fromJSON(label) : null
          );
        };
        return ForIn;
      }(Statement));
      function validateFuncParamsAndVariables(params, variables) {
        var _arr, _i, names, param, variable;
        names = [];
        for (_arr = __toArray(params), _i = _arr.length; _i--; ) {
          param = _arr[_i];
          if (__in(param.name, names)) {
            throw Error("Duplicate parameter: " + __strnum(param.name));
          }
          names.push(param.name);
        }
        for (_arr = __toArray(variables), _i = _arr.length; _i--; ) {
          variable = _arr[_i];
          if (__in(variable, names)) {
            throw Error("Duplicate variable: " + __strnum(variable));
          }
          names.push(variable);
        }
      }
      toJSIdent = (function () {
        function unicodeReplacer(m) {
          return "\\u" + __strnum(padLeft(m.charCodeAt(0).toString(16), 4, "0"));
        }
        return function (name) {
          if (typeof name !== "string") {
            throw TypeError("Expected name to be a String, got " + __typeof(name));
          }
          return name.replace(/[\u0000-\u001f\u0080-\uffff]/g, unicodeReplacer);
        };
      }());
      function compileFuncBody(options, sb, declarations, variables, body, lineStart) {
        var _arr, _i, _len, column, declaration, i, minify, name, variable;
        minify = options.minify;
        for (_arr = __toArray(declarations), _i = 0, _len = _arr.length; _i < _len; ++_i) {
          declaration = _arr[_i];
          if (!minify) {
            sb.indent(options.indent);
          }
          sb(toJSSource(declaration));
          sb(";");
          lineStart = false;
          if (!minify) {
            sb(options.linefeed || "\n");
            lineStart = true;
          }
        }
        if (__num(variables.length) > 0) {
          column = 0;
          if (!minify) {
            sb.indent(options.indent);
            column = 4 + 2 * __num(options.indent);
          }
          sb("var ");
          for (_arr = __toArray(variables.sort(function (a, b) {
            return __cmp(a.toLowerCase(), b.toLowerCase()) || __cmp(a, b);
          })), i = 0, _len = _arr.length; i < _len; ++i) {
            variable = _arr[i];
            name = toJSIdent(variables[i]);
            if (i > 0) {
              if (minify) {
                sb(",");
              } else if (column + 2 + name.length < 80) {
                sb(", ");
                column += 2;
              } else {
                sb(",");
                sb(options.linefeed || "\n");
                sb.indent(options.indent);
                sb("    ");
                column = 4 + 2 * __num(options.indent);
              }
            }
            sb(name);
            column += name.length;
          }
          sb(";");
          lineStart = false;
          if (!minify) {
            sb(options.linefeed || "\n");
            lineStart = true;
          }
        }
        if (!body.isNoop()) {
          if (!minify) {
            sb.indent(options.indent);
          }
          body.compileAsStatement(options, lineStart, sb);
          if (!minify) {
            sb(options.linefeed || "\n");
          }
        }
      }
      function compileFunc(options, sb, name, params, declarations, variables, body) {
        var _arr, _len, i, minify, param;
        sb("function");
        minify = options.minify;
        if (!minify || name != null) {
          sb(" ");
        }
        if (name != null) {
          name.compile(options, 2, false, sb);
        }
        sb("(");
        for (_arr = __toArray(params), i = 0, _len = _arr.length; i < _len; ++i) {
          param = _arr[i];
          if (i > 0) {
            sb(",");
            if (!minify) {
              sb(" ");
            }
          }
          param.compile(options, 2, false, sb);
        }
        sb(")");
        if (!minify) {
          sb(" ");
        }
        sb("{");
        if (variables.length || declarations.length || !body.isNoop()) {
          if (!minify) {
            sb(options.linefeed || "\n");
          }
          compileFuncBody(
            incIndent(options),
            sb,
            declarations,
            variables,
            body,
            !minify
          );
          if (!minify) {
            sb.indent(options.indent);
          }
        }
        return sb("}");
      }
      exports.Func = Func = (function (Expression) {
        var _Expression_prototype, _Func_prototype;
        function Func(pos, name, params, variables, body, declarations) {
          var _i, _i2, _i3, _this;
          _this = this instanceof Func ? this : __create(_Func_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          if (name == null) {
            name = null;
          } else if (!(name instanceof Ident)) {
            throw TypeError("Expected name to be one of null or " + __name(Ident) + ", got " + __typeof(name));
          }
          _this.name = name;
          if (params == null) {
            params = [];
          } else if (!__isArray(params)) {
            throw TypeError("Expected params to be an Array, got " + __typeof(params));
          } else {
            for (_i = params.length; _i--; ) {
              if (!(params[_i] instanceof Ident)) {
                throw TypeError("Expected " + ("params[" + _i + "]") + " to be a " + __name(Ident) + ", got " + __typeof(params[_i]));
              }
            }
          }
          _this.params = params;
          if (variables == null) {
            variables = [];
          } else if (!__isArray(variables)) {
            throw TypeError("Expected variables to be an Array, got " + __typeof(variables));
          } else {
            for (_i2 = variables.length; _i2--; ) {
              if (typeof variables[_i2] !== "string") {
                throw TypeError("Expected " + ("variables[" + _i2 + "]") + " to be a String, got " + __typeof(variables[_i2]));
              }
            }
          }
          _this.variables = variables;
          if (body == null) {
            body = Noop(line, column);
          } else if (!(body instanceof Node)) {
            throw TypeError("Expected body to be a " + __name(Node) + ", got " + __typeof(body));
          }
          _this.body = body;
          if (declarations == null) {
            declarations = [];
          } else if (!__isArray(declarations)) {
            throw TypeError("Expected declarations to be an Array, got " + __typeof(declarations));
          } else {
            for (_i3 = declarations.length; _i3--; ) {
              if (typeof declarations[_i3] !== "string") {
                throw TypeError("Expected " + ("declarations[" + _i3 + "]") + " to be a String, got " + __typeof(declarations[_i3]));
              }
            }
          }
          _this.declarations = declarations;
          validateFuncParamsAndVariables(params, variables);
          return _this;
        }
        _Expression_prototype = Expression.prototype;
        _Func_prototype = Func.prototype = __create(_Expression_prototype);
        _Func_prototype.constructor = Func;
        Func.displayName = "Func";
        if (typeof Expression.extended === "function") {
          Expression.extended(Func);
        }
        _Func_prototype.compile = function (options, level, lineStart, sb) {
          var _ref, wrap;
          if (options.sourceMap != null && this.pos.file) {
            options.sourceMap.pushFile(this.pos.file);
          }
          if ((_ref = options.sourceMap) != null) {
            _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
          }
          wrap = lineStart && !this.name;
          if (wrap) {
            sb("(");
          }
          compileFunc(
            options,
            sb,
            this.name,
            this.params,
            this.declarations,
            this.variables,
            this.body
          );
          if (wrap) {
            sb(")");
          }
          if (options.sourceMap != null && this.pos.file) {
            options.sourceMap.popFile();
          }
        };
        _Func_prototype.compileAsStatement = function (options, lineStart, sb) {
          this.compile(options, 1, lineStart, sb);
          if (!lineStart || !this.name) {
            sb(";");
          }
        };
        _Func_prototype.isLarge = function () {
          return true;
        };
        _Func_prototype.isNoop = function () {
          return this.name == null;
        };
        _Func_prototype.walk = function (walker) {
          var _ref, body, name, params;
          if (this.name) {
            if ((_ref = walker(this.name)) != null) {
              name = _ref;
            } else {
              name = this.name.walk(walker);
            }
          } else {
            name = this.name;
          }
          params = walkArray(this.params, walker);
          body = this.body.walk(walker);
          if (name !== this.name || params !== this.params || body !== this.body) {
            return Func(
              this.pos,
              name,
              params,
              this.variables,
              body,
              this.declarations,
              this.meta
            );
          } else {
            return this;
          }
        };
        _Func_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "Func",
            this.pos,
            this.name,
            this.params,
            this.variables,
            this.body,
            this.declarations,
            this.meta
          );
        };
        _Func_prototype._toJSON = function () {
          var result;
          result = [
            this.name || 0,
            simplifyArray(this.params, 0),
            simplifyArray(this.variables, 0),
            simplifyArray(this.declarations, 0)
          ];
          if (simplify(this.body)) {
            result.push.apply(result, __toArray(this.body.toJSON()));
          }
          return result;
        };
        Func.fromJSON = function (line, column, file, name, params, variables, declarations) {
          var body;
          body = __slice.call(arguments, 7);
          return Func(
            makePos(line, column, file),
            name ? fromJSON(name) : void 0,
            arrayFromJSON(params),
            variables,
            fromJSON(body),
            declarations
          );
        };
        return Func;
      }(Expression));
      exports.Ident = Ident = (function (Expression) {
        var _Expression_prototype, _Ident_prototype;
        function Ident(pos, name, allowUnacceptable) {
          var _this;
          _this = this instanceof Ident ? this : __create(_Ident_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          if (typeof name !== "string") {
            throw TypeError("Expected name to be a String, got " + __typeof(name));
          }
          _this.name = name;
          if (allowUnacceptable == null) {
            allowUnacceptable = false;
          } else if (typeof allowUnacceptable !== "boolean") {
            throw TypeError("Expected allowUnacceptable to be a Boolean, got " + __typeof(allowUnacceptable));
          }
          if (!allowUnacceptable && !isAcceptableIdent(name, true)) {
            throw Error("Not an acceptable identifier name: " + name);
          }
          return _this;
        }
        _Expression_prototype = Expression.prototype;
        _Ident_prototype = Ident.prototype = __create(_Expression_prototype);
        _Ident_prototype.constructor = Ident;
        Ident.displayName = "Ident";
        if (typeof Expression.extended === "function") {
          Expression.extended(Ident);
        }
        _Ident_prototype.compile = function (options, level, lineStart, sb) {
          var _ref;
          if ((_ref = options.sourceMap) != null) {
            _ref.add(
              sb.line,
              sb.column,
              this.pos.line,
              this.pos.column,
              this.pos.file
            );
          }
          sb(toJSIdent(this.name));
        };
        _Ident_prototype.compileAsBlock = function (options, level, lineStart, sb) {
          Noop(this.pos).compileAsBlock(options, level, lineStart, sb);
        };
        _Ident_prototype.walk = function () {
          return this;
        };
        _Ident_prototype.inspect = function (depth) {
          return inspectHelper(depth, "Ident", this.pos, this.name);
        };
        _Ident_prototype.isNoop = function () {
          return true;
        };
        _Ident_prototype._toJSON = function () {
          return [this.name];
        };
        Ident.fromJSON = function (line, column, file, name) {
          return Ident(
            makePos(line, column, file),
            name
          );
        };
        return Ident;
      }(Expression));
      exports.IfStatement = IfStatement = (function (Statement) {
        var _IfStatement_prototype, _Statement_prototype;
        function IfStatement(pos, test, whenTrue, whenFalse, label) {
          var _this;
          _this = this instanceof IfStatement ? this : __create(_IfStatement_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          if (test == null) {
            test = Noop(pos);
          } else if (!(test instanceof Expression)) {
            throw TypeError("Expected test to be a " + __name(Expression) + ", got " + __typeof(test));
          }
          if (whenTrue == null) {
            whenTrue = Noop(pos);
          } else if (!(whenTrue instanceof Node)) {
            throw TypeError("Expected whenTrue to be a " + __name(Node) + ", got " + __typeof(whenTrue));
          }
          if (whenFalse == null) {
            whenFalse = Noop(pos);
          } else if (!(whenFalse instanceof Node)) {
            throw TypeError("Expected whenFalse to be a " + __name(Node) + ", got " + __typeof(whenFalse));
          }
          if (label == null) {
            label = null;
          } else if (!(label instanceof Ident)) {
            throw TypeError("Expected label to be one of " + (__name(Ident) + " or null") + ", got " + __typeof(label));
          }
          _this.label = label;
          if (test instanceof Unary && test.op === "!" && test.node instanceof Unary && test.node.op === "!") {
            test = test.node.node;
          }
          if (test.isConst()) {
            if (test.constValue()) {
              return Block(pos, [whenTrue], label);
            } else {
              return Block(pos, [whenFalse], label);
            }
          } else {
            whenTrue = whenTrue.maybeToStatement();
            whenFalse = whenFalse.maybeToStatement();
            if (whenTrue instanceof Noop) {
              if (whenFalse instanceof Noop) {
                return test.maybeToStatement();
              } else {
                return IfStatement.call(
                  _this,
                  pos,
                  Unary(test.pos, "!", test),
                  whenFalse,
                  whenTrue,
                  label
                );
              }
            } else if (whenFalse instanceof Noop && whenTrue instanceof IfStatement && whenTrue.whenFalse instanceof Noop && whenTrue.label == null) {
              _this.test = Binary(pos, test, "&&", whenTrue.test);
              _this.whenTrue = whenTrue.whenTrue;
              _this.whenFalse = whenFalse;
            } else {
              _this.test = test;
              _this.whenTrue = whenTrue;
              _this.whenFalse = whenFalse;
            }
          }
          return _this;
        }
        _Statement_prototype = Statement.prototype;
        _IfStatement_prototype = IfStatement.prototype = __create(_Statement_prototype);
        _IfStatement_prototype.constructor = IfStatement;
        IfStatement.displayName = "IfStatement";
        if (typeof Statement.extended === "function") {
          Statement.extended(IfStatement);
        }
        _IfStatement_prototype.compile = function (options, level, lineStart, sb) {
          var _ref, childOptions, minify, whenFalse;
          if (level !== 1) {
            throw Error("Cannot compile a statement except on the Block level");
          }
          if (this.whenTrue.isNoop()) {
            if (this.whenFalse.isNoop()) {
              this.test.compileAsStatement(options, true, sb);
            } else {
              IfStatement(
                this.pos,
                Unary(this.test.pos, "!", this.test),
                this.whenFalse,
                this.whenTrue,
                this.label
              ).compile(options, level, lineStart, sb);
            }
          } else {
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.pushFile(this.pos.file);
            }
            if ((_ref = options.sourceMap) != null) {
              _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
            }
            minify = options.minify;
            if (this.label != null) {
              this.label.compile(options, level, lineStart, sb);
              sb(":");
              if (!minify) {
                sb(" ");
              }
            }
            sb("if");
            if (!minify) {
              sb(" ");
            }
            sb("(");
            this.test.compile(options, 2, false, sb);
            sb(")");
            if (!minify) {
              sb(" ");
            }
            sb("{");
            childOptions = incIndent(options);
            if (!minify) {
              sb(options.linefeed || "\n");
              sb.indent(childOptions.indent);
            }
            this.whenTrue.compileAsStatement(childOptions, !minify, sb);
            if (!minify) {
              sb(options.linefeed || "\n");
              sb.indent(options.indent);
            }
            sb("}");
            whenFalse = this.whenFalse;
            if (!whenFalse.isNoop()) {
              if (!minify) {
                sb(" ");
              }
              sb("else");
              if (whenFalse instanceof IfStatement && whenFalse.label == null) {
                sb(" ");
                whenFalse.compile(options, level, false, sb);
              } else {
                if (!minify) {
                  sb(" ");
                }
                sb("{");
                if (!minify) {
                  sb(options.linefeed || "\n");
                  sb.indent(childOptions.indent);
                }
                whenFalse.compileAsStatement(childOptions, !minify, sb);
                if (!minify) {
                  sb(options.linefeed || "\n");
                  sb.indent(options.indent);
                }
                sb("}");
              }
            }
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.popFile();
            }
          }
        };
        _IfStatement_prototype.walk = function (walker) {
          var _ref, label, test, whenFalse, whenTrue;
          if ((_ref = walker(this.test)) != null) {
            test = _ref;
          } else {
            test = this.test.walk(walker);
          }
          if ((_ref = walker(this.whenTrue)) != null) {
            whenTrue = _ref;
          } else {
            whenTrue = this.whenTrue.walk(walker);
          }
          if ((_ref = walker(this.whenFalse)) != null) {
            whenFalse = _ref;
          } else {
            whenFalse = this.whenFalse.walk(walker);
          }
          if (this.label != null) {
            if ((_ref = walker(this.label)) != null) {
              label = _ref;
            } else {
              label = this.label.walk(walker);
            }
          } else {
            label = this.label;
          }
          if (test !== this.test || whenTrue !== this.whenTrue || whenFalse !== this.whenFalse || label !== this.label) {
            return If(
              this.pos,
              test,
              whenTrue,
              whenFalse,
              label
            );
          } else {
            return this;
          }
        };
        _IfStatement_prototype.mutateLast = function (func, options) {
          var whenFalse, whenTrue;
          whenTrue = this.whenTrue.mutateLast(func, options);
          whenFalse = this.whenFalse.mutateLast(func, options);
          if (whenTrue !== this.whenTrue || whenFalse !== this.whenFalse) {
            return If(
              this.pos,
              this.test,
              whenTrue,
              whenFalse,
              this.label
            );
          } else {
            return this;
          }
        };
        _IfStatement_prototype.exitType = function () {
          var falseExit, trueExit;
          if (this._exitType === void 0) {
            trueExit = this.whenTrue.exitType();
            falseExit = this.whenFalse.exitType();
            if (trueExit === falseExit) {
              return this._exitType = trueExit;
            } else {
              return this._exitType = null;
            }
          } else {
            return this._exitType;
          }
        };
        _IfStatement_prototype.isNoop = function () {
          var _ref;
          if ((_ref = this._isNoop) == null) {
            return this._isNoop = this.test.isNoop() && this.whenTrue.isNoop() && this.whenFalse.isNoop();
          } else {
            return _ref;
          }
        };
        _IfStatement_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "IfStatement",
            this.pos,
            this.test,
            this.whenTrue,
            this.whenFalse
          );
        };
        _IfStatement_prototype._toJSON = function () {
          var result;
          result = [
            this.label || 0,
            simplify(this.test, 0),
            simplify(this.whenTrue, 0)
          ];
          if (simplify(this.whenFalse)) {
            result.push.apply(result, __toArray(this.whenFalse.toJSON()));
          }
          return result;
        };
        IfStatement.fromJSON = function (line, column, file, label, test, whenTrue) {
          var whenFalse;
          whenFalse = __slice.call(arguments, 6);
          return IfStatement(
            makePos(line, column, file),
            fromJSON(test),
            fromJSON(whenTrue),
            fromJSON(whenFalse),
            label ? fromJSON(label) : null
          );
        };
        return IfStatement;
      }(Statement));
      exports.IfExpression = IfExpression = (function (Expression) {
        var _Expression_prototype, _IfExpression_prototype;
        function IfExpression(pos, test, whenTrue, whenFalse) {
          var _this;
          _this = this instanceof IfExpression ? this : __create(_IfExpression_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          if (test == null) {
            test = Noop(pos);
          } else if (!(test instanceof Expression)) {
            throw TypeError("Expected test to be a " + __name(Expression) + ", got " + __typeof(test));
          }
          if (whenTrue == null) {
            whenTrue = Noop(pos);
          }
          if (whenFalse == null) {
            whenFalse = Noop(pos);
          }
          if (!(whenTrue instanceof Expression)) {
            whenTrue = toConst(pos, whenTrue);
          }
          if (!(whenFalse instanceof Expression)) {
            whenFalse = toConst(pos, whenFalse);
          }
          if (test instanceof Unary && test.op === "!" && test.node instanceof Unary && test.node.op === "!") {
            test = test.node.node;
          }
          if (test.isConst()) {
            if (test.constValue()) {
              return whenTrue;
            } else {
              return whenFalse;
            }
          } else if (whenFalse instanceof Noop && whenTrue instanceof IfExpression && whenTrue.whenFalse instanceof Noop) {
            _this.test = Binary(pos, test, "&&", whenTrue.test);
            _this.whenTrue = whenTrue.whenTrue;
            _this.whenFalse = whenFalse;
          } else {
            _this.test = test;
            _this.whenTrue = whenTrue;
            _this.whenFalse = whenFalse;
          }
          return _this;
        }
        _Expression_prototype = Expression.prototype;
        _IfExpression_prototype = IfExpression.prototype = __create(_Expression_prototype);
        _IfExpression_prototype.constructor = IfExpression;
        IfExpression.displayName = "IfExpression";
        if (typeof Expression.extended === "function") {
          Expression.extended(IfExpression);
        }
        _IfExpression_prototype.toStatement = function () {
          return IfStatement(this.pos, this.test, this.whenTrue, this.whenFalse);
        };
        function compileSmall(test, whenTrue, whenFalse, options, lineStart, sb) {
          var minify;
          minify = options.minify;
          test.compile(options, 5, lineStart, sb);
          sb(minify ? "?" : " ? ");
          whenTrue.compile(options, 5, false, sb);
          sb(minify ? ":" : " : ");
          whenFalse.compile(options, 5, false, sb);
        }
        function compileLarge(test, whenTrue, whenFalse, options, lineStart, sb) {
          var childOptions, largeWhenTrue, wrapTest, wrapWhenTrue;
          childOptions = incIndent(options);
          wrapTest = test instanceof IfExpression;
          if (wrapTest) {
            sb("(");
          }
          test.compile(
            childOptions,
            wrapTest ? 2 : 5,
            lineStart && !wrapTest,
            sb
          );
          if (wrapTest) {
            sb(")");
          }
          largeWhenTrue = whenTrue.isLarge();
          if (largeWhenTrue) {
            sb(options.linefeed || "\n");
            sb.indent(childOptions.indent);
            sb("? ");
          } else {
            sb(" ? ");
          }
          wrapWhenTrue = whenTrue instanceof IfExpression;
          if (wrapWhenTrue) {
            sb("(");
          }
          whenTrue.compile(
            childOptions,
            wrapWhenTrue ? 2 : 5,
            false,
            sb
          );
          if (wrapWhenTrue) {
            sb(")");
          }
          sb(options.linefeed || "\n");
          sb.indent(childOptions.indent);
          sb(": ");
          if (whenFalse instanceof IfExpression) {
            compileLarge(
              whenFalse.test,
              whenFalse.whenTrue,
              whenFalse.whenFalse,
              options,
              false,
              sb
            );
          } else {
            whenFalse.compile(childOptions, 5, false, sb);
          }
        }
        _IfExpression_prototype.compile = function (options, level, lineStart, sb) {
          var _ref, f, wrap;
          if (level === 1) {
            this.toStatement().compile(options, level, lineStart, sb);
          } else {
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.pushFile(this.pos.file);
            }
            if ((_ref = options.sourceMap) != null) {
              _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
            }
            wrap = __num(level) > 5;
            if (wrap) {
              sb("(");
            }
            if (!options.minify && (this.whenTrue.isLarge() || this.whenFalse.isLarge())) {
              f = compileLarge;
            } else {
              f = compileSmall;
            }
            f(
              this.test,
              this.whenTrue,
              this.whenFalse,
              options,
              !wrap && lineStart,
              sb
            );
            if (wrap) {
              sb(")");
            }
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.popFile();
            }
          }
        };
        _IfExpression_prototype.compileAsBlock = function (options, level, lineStart, sb) {
          if (this.whenTrue.isNoop()) {
            if (this.whenFalse.isNoop()) {
              this.test.compileAsBlock(options, level, lineStart, sb);
            } else {
              Binary(this.pos, this.test, "||", this.whenFalse).compileAsBlock(options, level, lineStart, sb);
            }
          } else if (this.whenFalse.isNoop()) {
            Binary(this.pos, this.test, "&&", this.whenTrue).compileAsBlock(options, level, lineStart, sb);
          } else {
            this.compile(options, level, lineStart, sb);
          }
        };
        _IfExpression_prototype.isLarge = function () {
          var _ref;
          if ((_ref = this._isLarge) == null) {
            return this._isLarge = !this.test.isSmall() || !this.whenTrue.isSmall() || !this.whenFalse.isSmall();
          } else {
            return _ref;
          }
        };
        _IfExpression_prototype.isSmall = function () {
          return false;
        };
        _IfExpression_prototype.isNoop = function () {
          var _ref;
          if ((_ref = this._isNoop) == null) {
            return this._isNoop = this.test.isNoop() && this.whenTrue.isNoop() && this.whenFalse.isNoop();
          } else {
            return _ref;
          }
        };
        _IfExpression_prototype.walk = IfStatement.prototype.walk;
        _IfExpression_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "IfExpression",
            this.pos,
            this.test,
            this.whenTrue,
            this.whenFalse
          );
        };
        _IfExpression_prototype._toJSON = function () {
          var result;
          result = [
            simplify(this.test, 0),
            simplify(this.whenTrue, 0)
          ];
          if (simplify(this.whenFalse)) {
            result.push.apply(result, __toArray(this.whenFalse.toJSON()));
          }
          return result;
        };
        IfExpression.fromJSON = function (line, column, file, test, whenTrue) {
          var whenFalse;
          whenFalse = __slice.call(arguments, 5);
          return IfExpression(
            makePos(line, column, file),
            fromJSON(test),
            fromJSON(whenTrue),
            fromJSON(whenFalse)
          );
        };
        return IfExpression;
      }(Expression));
      If = exports.If = function (pos, test, whenTrue, whenFalse, label) {
        if (typeof pos !== "object" || pos === null) {
          throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
        }
        if (whenTrue instanceof Statement || whenFalse instanceof Statement || label != null) {
          return IfStatement(
            pos,
            test,
            whenTrue,
            whenFalse,
            label
          );
        } else {
          return IfExpression(pos, test, whenTrue, whenFalse);
        }
      };
      exports.Noop = Noop = (function (Expression) {
        var _Expression_prototype, _Noop_prototype;
        function Noop(pos) {
          var _this;
          _this = this instanceof Noop ? this : __create(_Noop_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          return _this;
        }
        _Expression_prototype = Expression.prototype;
        _Noop_prototype = Noop.prototype = __create(_Expression_prototype);
        _Noop_prototype.constructor = Noop;
        Noop.displayName = "Noop";
        if (typeof Expression.extended === "function") {
          Expression.extended(Noop);
        }
        _Noop_prototype.compileAsStatement = function () {};
        _Noop_prototype.compile = function (options, level, lineStart, sb) {
          if (__num(level) > 1) {
            Const(this.pos, void 0).compile(options, level, lineStart, sb);
          }
        };
        _Noop_prototype.isConst = function () {
          return true;
        };
        _Noop_prototype.isNoop = Noop.prototype.isConst;
        _Noop_prototype.constValue = function () {
          return;
        };
        _Noop_prototype.walk = function () {
          return this;
        };
        _Noop_prototype.mutateLast = function (func, options) {
          if (options != null ? options.noop : void 0) {
            return func(this);
          } else {
            return this;
          }
        };
        _Noop_prototype.inspect = function (depth) {
          return inspectHelper(depth, "Noop", this.pos);
        };
        Noop.fromJSON = function (line, column, file) {
          return Noop(makePos(line, column, file));
        };
        return Noop;
      }(Expression));
      exports.Obj = Obj = (function (Expression) {
        var _Expression_prototype, _Obj_prototype, ObjPair;
        function Obj(pos, elements) {
          var _i, _this;
          _this = this instanceof Obj ? this : __create(_Obj_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          if (elements == null) {
            elements = [];
          } else if (!__isArray(elements)) {
            throw TypeError("Expected elements to be an Array, got " + __typeof(elements));
          } else {
            for (_i = elements.length; _i--; ) {
              if (!(elements[_i] instanceof ObjPair)) {
                throw TypeError("Expected " + ("elements[" + _i + "]") + " to be a " + __name(ObjPair) + ", got " + __typeof(elements[_i]));
              }
            }
          }
          _this.elements = elements;
          validateUniqueKeys(elements);
          return _this;
        }
        _Expression_prototype = Expression.prototype;
        _Obj_prototype = Obj.prototype = __create(_Expression_prototype);
        _Obj_prototype.constructor = Obj;
        Obj.displayName = "Obj";
        if (typeof Expression.extended === "function") {
          Expression.extended(Obj);
        }
        function validateUniqueKeys(elements) {
          var _arr, _i, key, keys, pair;
          keys = [];
          for (_arr = __toArray(elements), _i = _arr.length; _i--; ) {
            pair = _arr[_i];
            key = pair.key;
            if (__in(key, keys)) {
              throw Error("Found duplicate key: " + __strnum(toJSSource(key)));
            }
            keys.push(key);
          }
        }
        function toSafeKey(key) {
          var num;
          if (isAcceptableIdent(key)) {
            return key;
          } else {
            num = Number(key);
            if (num === num && String(num) === key) {
              return key;
            } else {
              return toJSSource(key);
            }
          }
        }
        function compileLarge(elements, options, sb) {
          var _arr, childOptions, element, i, key, len;
          childOptions = incIndent(options);
          for (_arr = __toArray(elements), i = 0, len = _arr.length; i < len; ++i) {
            element = _arr[i];
            sb(options.linefeed || "\n");
            sb.indent(childOptions.indent);
            key = element.key;
            sb(toSafeKey(key));
            sb(": ");
            element.value.compile(childOptions, 3, false, sb);
            if (i < len - 1) {
              sb(",");
            }
          }
          sb(options.linefeed || "\n");
          sb.indent(options.indent);
        }
        function compileSmall(elements, options, sb) {
          var _arr, _len, element, i, key, minify;
          if (elements.length) {
            minify = options.minify;
            if (!minify) {
              sb(" ");
            }
            for (_arr = __toArray(elements), i = 0, _len = _arr.length; i < _len; ++i) {
              element = _arr[i];
              if (i > 0) {
                sb(",");
                if (!minify) {
                  sb(" ");
                }
              }
              key = element.key;
              sb(toSafeKey(key));
              sb(":");
              if (!minify) {
                sb(" ");
              }
              element.value.compile(options, 3, false, sb);
            }
            if (!minify) {
              sb(" ");
            }
          }
        }
        _Obj_prototype.compile = function (options, level, lineStart, sb) {
          var _ref, f, wrap;
          if (options.sourceMap != null && this.pos.file) {
            options.sourceMap.pushFile(this.pos.file);
          }
          if ((_ref = options.sourceMap) != null) {
            _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
          }
          wrap = lineStart;
          if (wrap) {
            sb("(");
          }
          sb("{");
          if (!options.minify && this.shouldCompileLarge()) {
            f = compileLarge;
          } else {
            f = compileSmall;
          }
          f(this.elements, options, sb);
          sb("}");
          if (wrap) {
            sb(")");
          }
          if (options.sourceMap != null && this.pos.file) {
            options.sourceMap.popFile();
          }
        };
        _Obj_prototype.compileAsBlock = function (options, level, lineStart, sb) {
          var _this;
          _this = this;
          BlockExpression(this.pos, (function () {
            var _arr, _arr2, _i, _len, element;
            for (_arr = [], _arr2 = __toArray(_this.elements), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
              element = _arr2[_i];
              _arr.push(element.value);
            }
            return _arr;
          }())).compileAsBlock(options, level, lineStart, sb);
        };
        _Obj_prototype.compileAsStatement = function (options, lineStart, sb) {
          var _this;
          _this = this;
          BlockStatement(this.pos, (function () {
            var _arr, _arr2, _i, _len, element;
            for (_arr = [], _arr2 = __toArray(_this.elements), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
              element = _arr2[_i];
              _arr.push(element.value);
            }
            return _arr;
          }())).compileAsStatement(options, lineStart, sb);
        };
        _Obj_prototype.shouldCompileLarge = function () {
          switch (this.elements.length) {
          case 0: return false;
          case 1: return this.elements[0].isLarge();
          default: return this.isLarge();
          }
        };
        _Obj_prototype.isSmall = function () {
          switch (this.elements.length) {
          case 0: return true;
          case 1: return this.elements[0].isSmall();
          default: return false;
          }
        };
        _Obj_prototype.isLarge = function () {
          var _ref, _this;
          _this = this;
          if ((_ref = this._isLarge) == null) {
            return this._isLarge = __num(this.elements.length) > 4 || (function () {
              var _arr, _i, _some, element;
              _some = false;
              for (_arr = __toArray(_this.elements), _i = _arr.length; _i--; ) {
                element = _arr[_i];
                if (!element.isSmall()) {
                  _some = true;
                  break;
                }
              }
              return _some;
            }());
          } else {
            return _ref;
          }
        };
        _Obj_prototype.isNoop = function () {
          var _arr, _every, _i, _ref, element;
          if ((_ref = this._isNoop) == null) {
            _every = true;
            for (_arr = __toArray(this.elements), _i = _arr.length; _i--; ) {
              element = _arr[_i];
              if (!element.isNoop()) {
                _every = false;
                break;
              }
            }
            return this._isNoop = _every;
          } else {
            return _ref;
          }
        };
        _Obj_prototype.walk = function (walker) {
          var elements;
          elements = walkArray(this.elements, walker);
          if (elements !== this.elements) {
            return Obj(this.pos, elements);
          } else {
            return this;
          }
        };
        _Obj_prototype.inspect = function (depth) {
          return inspectHelper(depth, "Obj", this.pos, this.elements);
        };
        _Obj_prototype._toJSON = function () {
          var _arr, _i, _len, pair, pos, result;
          result = [];
          for (_arr = __toArray(this.elements), _i = 0, _len = _arr.length; _i < _len; ++_i) {
            pair = _arr[_i];
            pos = pair.pos;
            result.push(
              pos.line,
              pos.column,
              pos.file,
              pair.key,
              simplify(pair.value)
            );
          }
          return result;
        };
        Obj.fromJSON = function (line, column, file) {
          var _end, elementData, i, key, pColumn, pFile, pLine, resultPairs, value;
          elementData = __slice.call(arguments, 3);
          resultPairs = [];
          for (i = 0, _end = elementData.length; i < _end; i += 5) {
            pLine = elementData[i];
            pColumn = elementData[i + 1];
            pFile = elementData[i + 2];
            key = elementData[i + 3];
            value = elementData[i + 4];
            resultPairs.push(ObjPair(
              makePos(pLine, pColumn, pFile),
              key,
              fromJSON(value)
            ));
          }
          return Obj(
            makePos(line, column, file),
            resultPairs
          );
        };
        Obj.Pair = ObjPair = (function () {
          var _ObjPair_prototype;
          function ObjPair(pos, key, value) {
            var _this;
            _this = this instanceof ObjPair ? this : __create(_ObjPair_prototype);
            if (typeof pos !== "object" || pos === null) {
              throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
            }
            _this.pos = pos;
            if (typeof key !== "string") {
              throw TypeError("Expected key to be a String, got " + __typeof(key));
            }
            _this.key = key;
            if (value == null) {
              value = Noop(line, column);
            }
            if (!(value instanceof Expression)) {
              value = toConst(pos, value);
            }
            _this.value = value;
            return _this;
          }
          _ObjPair_prototype = ObjPair.prototype;
          ObjPair.displayName = "ObjPair";
          _ObjPair_prototype.isSmall = function () {
            return this.value.isSmall();
          };
          _ObjPair_prototype.isLarge = function () {
            return this.value.isLarge();
          };
          _ObjPair_prototype.isNoop = function () {
            return this.value.isNoop();
          };
          _ObjPair_prototype.walk = function (walker) {
            var _ref, value;
            if ((_ref = walker(this.value)) != null) {
              value = _ref;
            } else {
              value = this.value.walk(walker);
            }
            if (value !== this.value) {
              return ObjPair(this.pos, this.key, value);
            } else {
              return this;
            }
          };
          _ObjPair_prototype.inspect = function (depth) {
            return inspectHelper(
              depth,
              "Pair",
              this.pos,
              this.key,
              this.value
            );
          };
          return ObjPair;
        }());
        return Obj;
      }(Expression));
      exports.Regex = Regex = (function (Expression) {
        var _Expression_prototype, _Regex_prototype;
        function Regex(pos, source, flags) {
          var _this;
          _this = this instanceof Regex ? this : __create(_Regex_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          if (typeof source !== "string") {
            throw TypeError("Expected source to be a String, got " + __typeof(source));
          }
          _this.source = source;
          if (flags == null) {
            flags = "";
          } else if (typeof flags !== "string") {
            throw TypeError("Expected flags to be a String, got " + __typeof(flags));
          }
          _this.flags = flags;
          return _this;
        }
        _Expression_prototype = Expression.prototype;
        _Regex_prototype = Regex.prototype = __create(_Expression_prototype);
        _Regex_prototype.constructor = Regex;
        Regex.displayName = "Regex";
        if (typeof Expression.extended === "function") {
          Expression.extended(Regex);
        }
        _Regex_prototype.compile = function (options, level, lineStart, sb) {
          var _ref;
          if ((_ref = options.sourceMap) != null) {
            _ref.add(
              sb.line,
              sb.column,
              this.pos.line,
              this.pos.column,
              this.pos.file
            );
          }
          sb("/");
          sb(this.source.replace(/(\\\\)*\\?\//g, "$1\\/") || "(?:)");
          sb("/");
          sb(this.flags);
        };
        _Regex_prototype.compileAsBlock = function (options, level, lineStart, sb) {
          Noop(this.pos).compileAsBlock(options, level, lineStart, sb);
        };
        _Regex_prototype.isNoop = function () {
          return true;
        };
        _Regex_prototype.walk = function () {
          return this;
        };
        _Regex_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "Regex",
            this.pos,
            this.source,
            this.flags
          );
        };
        _Regex_prototype._toJSON = function () {
          return [this.source, this.flags];
        };
        Regex.fromJSON = function (line, column, file, source, flags) {
          return Regex(
            makePos(line, column, file),
            source,
            flags
          );
        };
        return Regex;
      }(Expression));
      exports.Return = Return = (function (Statement) {
        var _Return_prototype, _Statement_prototype;
        function Return(pos, node) {
          var _this;
          _this = this instanceof Return ? this : __create(_Return_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          if (node == null) {
            node = Noop(pos);
          } else if (!(node instanceof Expression)) {
            throw TypeError("Expected node to be a " + __name(Expression) + ", got " + __typeof(node));
          }
          _this.node = node;
          if (typeof node.toStatement === "function") {
            return node.toStatement().mutateLast(
              function (n) {
                return Return(pos, n);
              },
              { noop: true }
            );
          }
          return _this;
        }
        _Statement_prototype = Statement.prototype;
        _Return_prototype = Return.prototype = __create(_Statement_prototype);
        _Return_prototype.constructor = Return;
        Return.displayName = "Return";
        if (typeof Statement.extended === "function") {
          Statement.extended(Return);
        }
        _Return_prototype.compile = function (options, level, lineStart, sb) {
          var _ref;
          if (options.sourceMap != null && this.pos.file) {
            options.sourceMap.pushFile(this.pos.file);
          }
          if ((_ref = options.sourceMap) != null) {
            _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
          }
          sb("return");
          if (!this.node.isConst() || this.node.constValue() !== void 0) {
            sb(" ");
            this.node.compile(options, 2, false, sb);
          }
          sb(";");
          if (options.sourceMap != null && this.pos.file) {
            options.sourceMap.popFile();
          }
        };
        _Return_prototype.walk = function (walker) {
          var _ref, node;
          if ((_ref = walker(this.node)) != null) {
            node = _ref;
          } else {
            node = this.node.walk(walker);
          }
          if (node !== this.node) {
            return Return(this.pos, node);
          } else {
            return this;
          }
        };
        _Return_prototype.exitType = function () {
          return "return";
        };
        _Return_prototype.isSmall = function () {
          return this.node.isSmall();
        };
        _Return_prototype.isLarge = function () {
          return this.node.isLarge();
        };
        _Return_prototype.inspect = function (depth) {
          return inspectHelper(depth, "Return", this.pos, this.node);
        };
        _Return_prototype.mutateLast = function (func, options) {
          var node;
          if (options != null ? options["return"] : void 0) {
            node = this.node.mutateLast(func, options);
            if (node !== this.node) {
              return Return(this.pos, node);
            } else {
              return this;
            }
          } else {
            return this;
          }
        };
        _Return_prototype._toJSON = function () {
          if (simplify(this.node)) {
            return this.node.toJSON();
          } else {
            return [];
          }
        };
        Return.fromJSON = function (line, column, file) {
          var node;
          node = __slice.call(arguments, 3);
          return Return(
            makePos(line, column, file),
            fromJSON(node)
          );
        };
        return Return;
      }(Statement));
      exports.Root = Root = (function () {
        var _Root_prototype;
        function Root(pos, body, variables, declarations) {
          var _i, _i2, _this;
          _this = this instanceof Root ? this : __create(_Root_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          if (body == null) {
            body = Noop(pos);
          } else if (!(body instanceof Node)) {
            throw TypeError("Expected body to be a " + __name(Node) + ", got " + __typeof(body));
          }
          _this.body = body;
          if (variables == null) {
            variables = [];
          } else if (!__isArray(variables)) {
            throw TypeError("Expected variables to be an Array, got " + __typeof(variables));
          } else {
            for (_i = variables.length; _i--; ) {
              if (typeof variables[_i] !== "string") {
                throw TypeError("Expected " + ("variables[" + _i + "]") + " to be a String, got " + __typeof(variables[_i]));
              }
            }
          }
          _this.variables = variables;
          if (declarations == null) {
            declarations = [];
          } else if (!__isArray(declarations)) {
            throw TypeError("Expected declarations to be an Array, got " + __typeof(declarations));
          } else {
            for (_i2 = declarations.length; _i2--; ) {
              if (typeof declarations[_i2] !== "string") {
                throw TypeError("Expected " + ("declarations[" + _i2 + "]") + " to be a String, got " + __typeof(declarations[_i2]));
              }
            }
          }
          _this.declarations = declarations;
          validateFuncParamsAndVariables([], variables);
          return _this;
        }
        _Root_prototype = Root.prototype;
        Root.displayName = "Root";
        _Root_prototype.compile = function (options) {
          var _ref, code, endCompileTime, endUglifyTime, fs, minified,
              oldWarn_function, os, path, sb, startTime, tmpMap, UglifyJS, writer;
          if (options == null) {
            options = {};
          }
          if (!options.indent) {
            options.indent = 0;
          }
          if (!options.uglify && typeof options.writer === "function") {
            writer = options.writer;
          }
          if (writer) {
            sb = StringWriter(writer);
          } else {
            sb = StringBuilder();
          }
          startTime = new Date().getTime();
          if (options.sourceMap != null && this.pos.file) {
            options.sourceMap.pushFile(this.pos.file);
          }
          if ((_ref = options.sourceMap) != null) {
            _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
          }
          compileFuncBody(
            options,
            sb,
            this.declarations,
            this.variables,
            this.body,
            true
          );
          if (options.sourceMap != null && this.pos.file) {
            options.sourceMap.popFile();
          }
          endCompileTime = new Date().getTime();
          if (typeof options.progress === "function") {
            options.progress("compile", __num(endCompileTime) - __num(startTime));
          }
          endUglifyTime = 0;
          if (writer == null) {
            code = sb.toString();
            if (options.uglify) {
              fs = require("fs");
              if (options.sourceMap != null) {
                path = require("path");
                os = require("os");
                tmpMap = path.join(os.tmpDir(), "gs-" + Math.random() * 4294967296 + ".map");
                fs.writeFileSync(tmpMap, options.sourceMap.toString(), "utf8");
              }
              UglifyJS = require("uglify-js");
              if ((_ref = UglifyJS.AST_Node) != null) {
                oldWarn_function = _ref.warn_function;
              }
              if (typeof oldWarn_function === "function") {
                UglifyJS.AST_Node.warn_function = function () {};
              }
              minified = UglifyJS.minify(code, {
                fromString: true,
                inSourceMap: tmpMap,
                outSourceMap: (_ref = options.sourceMap) != null ? _ref.generatedFile : void 0
              });
              if (oldWarn_function != null) {
                UglifyJS.AST_Node.warn_function = oldWarn_function;
              }
              if (tmpMap != null) {
                fs.unlinkSync(tmpMap);
              }
              code = minified.code;
              endUglifyTime = new Date().getTime();
              if (typeof options.progress === "function") {
                options.progress("uglify", endUglifyTime - __num(endCompileTime));
              }
              if (options.sourceMap != null) {
                options.sourceMap = minified.map;
              }
            }
            if (typeof options.writer === "function") {
              options.writer(code);
              code = "";
            }
          }
          return {
            compileTime: __num(endCompileTime) - __num(startTime),
            uglifyTime: options.uglify ? endUglifyTime - __num(endCompileTime) : void 0,
            code: code || ""
          };
        };
        _Root_prototype.toString = function (options) {
          if (options == null) {
            options = {};
          }
          return this.compile(options).code;
        };
        _Root_prototype.isLarge = function () {
          return true;
        };
        _Root_prototype.walk = function (walker) {
          var body;
          body = this.body.walk(walker);
          if (body !== this.body) {
            return Root(this.pos, body, this.variables, this.declarations);
          } else {
            return this;
          }
        };
        _Root_prototype.mutateLast = function (func, options) {
          var body;
          body = this.body.mutateLast(func, options);
          if (body !== this.body) {
            return Root(this.pos, body, this.variables, this.declarations);
          } else {
            return this;
          }
        };
        _Root_prototype.exitType = function () {
          return this.last().exitType();
        };
        _Root_prototype.last = function () {
          var _ref;
          return (_ref = this.body)[__num(_ref.length) - 1];
        };
        _Root_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "Root",
            this.pos,
            this.body,
            this.variables,
            this.declarations
          );
        };
        _Root_prototype._toJSON = function () {
          var result;
          result = [
            simplifyArray(this.variables, 0),
            simplifyArray(this.declarations, 0)
          ];
          if (simplify(this.body)) {
            result.push.apply(result, __toArray(this.body.toJSON()));
          }
          return result;
        };
        Root.fromJSON = function (line, column, file, variables, declarations) {
          var body;
          body = __slice.call(arguments, 5);
          return Root(
            makePos(line, column, file),
            fromJSON(body),
            variables,
            declarations
          );
        };
        return Root;
      }());
      exports.This = This = (function (Expression) {
        var _Expression_prototype, _This_prototype;
        function This(pos) {
          var _this;
          _this = this instanceof This ? this : __create(_This_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          return _this;
        }
        _Expression_prototype = Expression.prototype;
        _This_prototype = This.prototype = __create(_Expression_prototype);
        _This_prototype.constructor = This;
        This.displayName = "This";
        if (typeof Expression.extended === "function") {
          Expression.extended(This);
        }
        _This_prototype.compile = function (options, level, lineStart, sb) {
          var _ref;
          if ((_ref = options.sourceMap) != null) {
            _ref.add(
              sb.line,
              sb.column,
              this.pos.line,
              this.pos.column,
              this.pos.file
            );
          }
          sb("this");
        };
        _This_prototype.compileAsBlock = function (options, level, lineStart, sb) {
          Noop(this.pos).compileAsBlock(options, level, lineStart, sb);
        };
        _This_prototype.isNoop = function () {
          return true;
        };
        _This_prototype.walk = function () {
          return this;
        };
        _This_prototype.inspect = function (depth) {
          return inspectHelper(depth, "This", this.pos);
        };
        This.fromJSON = function (line, column, file) {
          return This(makePos(line, column, file));
        };
        return This;
      }(Expression));
      exports.Throw = Throw = (function (Statement) {
        var _Statement_prototype, _Throw_prototype;
        function Throw(pos, node) {
          var _this;
          _this = this instanceof Throw ? this : __create(_Throw_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          if (node == null) {
            node = Noop(line, column);
          } else if (!(node instanceof Expression)) {
            throw TypeError("Expected node to be a " + __name(Expression) + ", got " + __typeof(node));
          }
          _this.node = node;
          if (typeof node.toStatement === "function") {
            return node.toStatement().mutateLast(
              function (n) {
                return Throw(_this.pos, n);
              },
              { noop: true }
            );
          }
          return _this;
        }
        _Statement_prototype = Statement.prototype;
        _Throw_prototype = Throw.prototype = __create(_Statement_prototype);
        _Throw_prototype.constructor = Throw;
        Throw.displayName = "Throw";
        if (typeof Statement.extended === "function") {
          Statement.extended(Throw);
        }
        _Throw_prototype.compile = function (options, level, lineStart, sb) {
          var _ref;
          if (options.sourceMap != null && this.pos.file) {
            options.sourceMap.pushFile(this.pos.file);
          }
          if ((_ref = options.sourceMap) != null) {
            _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
          }
          sb("throw ");
          this.node.compile(options, 2, false, sb);
          sb(";");
          if (options.sourceMap != null && this.pos.file) {
            return options.sourceMap.popFile();
          }
        };
        _Throw_prototype.walk = function (walker) {
          var _ref, node;
          if ((_ref = walker(this.node)) != null) {
            node = _ref;
          } else {
            node = this.node.walk(walker);
          }
          if (node !== this.node) {
            return Throw(this.pos, node);
          } else {
            return this;
          }
        };
        _Throw_prototype.exitType = function () {
          return "throw";
        };
        _Throw_prototype.isSmall = function () {
          return this.node.isSmall();
        };
        _Throw_prototype.isLarge = function () {
          return this.node.isLarge();
        };
        _Throw_prototype.inspect = function (depth) {
          return inspectHelper(depth, "Throw", this.pos, this.node);
        };
        _Throw_prototype._toJSON = function () {
          if (simplify(this.node)) {
            return this.node.toJSON();
          } else {
            return [];
          }
        };
        Throw.fromJSON = function (line, column, file) {
          var node;
          node = __slice.call(arguments, 3);
          return Throw(
            makePos(line, column, file),
            fromJSON(node)
          );
        };
        return Throw;
      }(Statement));
      exports.Switch = Switch = (function (Statement) {
        var _Statement_prototype, _Switch_prototype, SwitchCase;
        function Switch(pos, node, cases, defaultCase, label) {
          var _i, _this;
          _this = this instanceof Switch ? this : __create(_Switch_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          if (node == null) {
            node = Noop(pos);
          }
          if (cases == null) {
            cases = [];
          } else if (!__isArray(cases)) {
            throw TypeError("Expected cases to be an Array, got " + __typeof(cases));
          } else {
            for (_i = cases.length; _i--; ) {
              if (!(cases[_i] instanceof SwitchCase)) {
                throw TypeError("Expected " + ("cases[" + _i + "]") + " to be a " + __name(SwitchCase) + ", got " + __typeof(cases[_i]));
              }
            }
          }
          _this.cases = cases;
          if (defaultCase == null) {
            defaultCase = Noop(pos);
          } else if (!(defaultCase instanceof Node)) {
            throw TypeError("Expected defaultCase to be a " + __name(Node) + ", got " + __typeof(defaultCase));
          }
          if (label == null) {
            label = null;
          } else if (!(label instanceof Ident)) {
            throw TypeError("Expected label to be one of " + (__name(Ident) + " or null") + ", got " + __typeof(label));
          }
          _this.label = label;
          if (!(node instanceof Expression)) {
            node = toConst(pos, node);
          }
          _this.node = node;
          _this.defaultCase = defaultCase.maybeToStatement();
          return _this;
        }
        _Statement_prototype = Statement.prototype;
        _Switch_prototype = Switch.prototype = __create(_Statement_prototype);
        _Switch_prototype.constructor = Switch;
        Switch.displayName = "Switch";
        if (typeof Statement.extended === "function") {
          Statement.extended(Switch);
        }
        _Switch_prototype.compile = function (options, level, lineStart, sb) {
          var _arr, _i, _len, _ref, case_, childOptions, minify;
          if (level !== 1) {
            throw Error("Cannot compile a statement except on the Block level");
          }
          if (options.sourceMap != null && this.pos.file) {
            options.sourceMap.pushFile(this.pos.file);
          }
          if ((_ref = options.sourceMap) != null) {
            _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
          }
          minify = options.minify;
          if (this.label != null) {
            this.label.compile(options, level, lineStart, sb);
            sb(":");
            if (!minify) {
              sb(" ");
            }
          }
          sb("switch");
          if (!minify) {
            sb(" ");
          }
          sb("(");
          this.node.compile(options, 2, false, sb);
          sb(")");
          if (!minify) {
            sb(" ");
          }
          sb("{");
          childOptions = incIndent(options);
          for (_arr = __toArray(this.cases), _i = 0, _len = _arr.length; _i < _len; ++_i) {
            case_ = _arr[_i];
            if (!minify) {
              sb(options.linefeed || "\n");
              sb.indent(options.indent);
            }
            sb("case ");
            case_.node.compile(options, 2, false, sb);
            sb(":");
            if (!case_.body.isNoop()) {
              if (case_.node.isSmall() && case_.body.isSmall()) {
                if (!minify) {
                  sb(" ");
                }
                case_.body.compileAsStatement(options, true, sb);
              } else {
                if (!minify) {
                  sb(options.linefeed || "\n");
                  sb.indent(childOptions.indent);
                }
                case_.body.compileAsStatement(childOptions, true, sb);
              }
            }
          }
          if (!this.defaultCase.isNoop()) {
            if (!minify) {
              sb(options.linefeed || "\n");
              sb.indent(options.indent);
            }
            sb("default:");
            if (this.defaultCase.isSmall()) {
              if (!minify) {
                sb(" ");
              }
              this.defaultCase.compileAsStatement(options, true, sb);
            } else {
              if (!minify) {
                sb(options.linefeed || "\n");
                sb.indent(childOptions.indent);
              }
              this.defaultCase.compileAsStatement(childOptions, true, sb);
            }
          }
          if (!minify) {
            sb(options.linefeed || "\n");
            sb.indent(options.indent);
          }
          sb("}");
          if (options.sourceMap != null && this.pos.file) {
            options.sourceMap.popFile();
          }
        };
        _Switch_prototype.walk = function (walker) {
          var _ref, cases, defaultCase, label, node;
          if ((_ref = walker(this.node)) != null) {
            node = _ref;
          } else {
            node = this.node.walk(walker);
          }
          cases = walkArray(this.cases, walker);
          if ((_ref = walker(this.defaultCase)) != null) {
            defaultCase = _ref;
          } else {
            defaultCase = this.defaultCase.walk(walker);
          }
          if (this.label != null) {
            if ((_ref = walker(this.label)) != null) {
              label = _ref;
            } else {
              label = this.label.walk(walker);
            }
          } else {
            label = this.label;
          }
          if (node !== this.node || cases !== this.cases || defaultCase !== this.defaultCase || label !== this.label) {
            return Switch(
              this.pos,
              node,
              cases,
              defaultCase,
              label
            );
          } else {
            return this;
          }
        };
        _Switch_prototype.inspect = function (depth) {
          return this.inspectHelper(
            depth,
            "Switch",
            this.pos,
            this.node,
            this.cases,
            this.defaultCase,
            this.label
          );
        };
        _Switch_prototype._toJSON = function () {
          var _arr, _i, _len, case_, result;
          result = [
            this.label || 0,
            simplify(this.node, 0)
          ];
          for (_arr = __toArray(this.cases), _i = 0, _len = _arr.length; _i < _len; ++_i) {
            case_ = _arr[_i];
            result.push(
              case_.pos.line,
              case_.pos.column,
              case_.pos.file,
              simplify(case_.node, 0),
              simplify(case_.body, 0)
            );
          }
          if (!(this.defaultCase instanceof Noop)) {
            result.push(simplify(this.defaultCase, 0));
          }
          return result;
        };
        Switch.fromJSON = function (line, column, file, label, node) {
          var caseData, cBody, cColumn, cFile, cLine, cNode, defaultCase, i, len,
              resultCases;
          caseData = __slice.call(arguments, 5);
          len = caseData.length;
          switch (len % 5) {
          case 0:
            break;
          case 1:
            --len;
            defaultCase = caseData[len];
            break;
          default: throw Error("Unknown number of arguments passed to fromJSON");
          }
          resultCases = [];
          for (i = 0; i < len; i += 5) {
            cLine = caseData[i];
            cColumn = caseData[i + 1];
            cFile = caseData[i + 2];
            cNode = caseData[i + 3];
            cBody = caseData[i + 4];
            resultCases.push(SwitchCase(
              makePos(cLine, cColumn, cFile),
              fromJSON(cNode),
              fromJSON(cBody)
            ));
          }
          return Switch(
            makePos(line, column, file),
            fromJSON(node),
            resultCases,
            fromJSON(defaultCase),
            label ? fromJSON(label) : null
          );
        };
        Switch.Case = SwitchCase = (function () {
          var _SwitchCase_prototype;
          function SwitchCase(pos, node, body) {
            var _this;
            _this = this instanceof SwitchCase ? this : __create(_SwitchCase_prototype);
            if (typeof pos !== "object" || pos === null) {
              throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
            }
            _this.pos = pos;
            if (node == null) {
              node = Noop(pos);
            }
            if (body == null) {
              body = Noop(pos);
            } else if (!(body instanceof Node)) {
              throw TypeError("Expected body to be a " + __name(Node) + ", got " + __typeof(body));
            }
            if (!(node instanceof Expression)) {
              node = toConst(pos, node);
            }
            _this.node = node;
            _this.body = body.maybeToStatement();
            return _this;
          }
          _SwitchCase_prototype = SwitchCase.prototype;
          SwitchCase.displayName = "SwitchCase";
          _SwitchCase_prototype.isLarge = function () {
            return true;
          };
          _SwitchCase_prototype.isSmall = function () {
            return false;
          };
          _SwitchCase_prototype.walk = function (walker) {
            var _ref, body, node;
            if ((_ref = walker(this.node)) != null) {
              node = _ref;
            } else {
              node = this.node.walk(walker);
            }
            if ((_ref = walker(this.body)) != null) {
              body = _ref;
            } else {
              body = this.body.walk(walker);
            }
            if (node !== this.node || body !== this.body) {
              return SwitchCase(this.pos, node, body);
            } else {
              return this;
            }
          };
          _SwitchCase_prototype.inspect = function (depth) {
            return inspectHelper(
              depth,
              "Case",
              this.pos,
              this.node,
              this.body
            );
          };
          return SwitchCase;
        }());
        return Switch;
      }(Statement));
      exports.TryCatch = TryCatch = (function (Statement) {
        var _Statement_prototype, _TryCatch_prototype;
        function TryCatch(pos, tryBody, catchIdent, catchBody, label) {
          var _this;
          _this = this instanceof TryCatch ? this : __create(_TryCatch_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          if (tryBody == null) {
            tryBody = Noop(pos);
          } else if (!(tryBody instanceof Node)) {
            throw TypeError("Expected tryBody to be a " + __name(Node) + ", got " + __typeof(tryBody));
          }
          if (!(catchIdent instanceof Ident)) {
            throw TypeError("Expected catchIdent to be a " + __name(Ident) + ", got " + __typeof(catchIdent));
          }
          _this.catchIdent = catchIdent;
          if (catchBody == null) {
            catchBody = Noop(pos);
          } else if (!(catchBody instanceof Node)) {
            throw TypeError("Expected catchBody to be a " + __name(Node) + ", got " + __typeof(catchBody));
          }
          if (label == null) {
            label = null;
          } else if (!(label instanceof Ident)) {
            throw TypeError("Expected label to be one of " + (__name(Ident) + " or null") + ", got " + __typeof(label));
          }
          _this.label = label;
          _this.tryBody = tryBody.maybeToStatement();
          if (_this.tryBody.isNoop()) {
            return _this.tryBody;
          }
          _this.catchBody = catchBody.maybeToStatement();
          return _this;
        }
        _Statement_prototype = Statement.prototype;
        _TryCatch_prototype = TryCatch.prototype = __create(_Statement_prototype);
        _TryCatch_prototype.constructor = TryCatch;
        TryCatch.displayName = "TryCatch";
        if (typeof Statement.extended === "function") {
          Statement.extended(TryCatch);
        }
        _TryCatch_prototype.compile = function (options, level, lineStart, sb) {
          var _ref, childOptions, minify;
          if (level !== 1) {
            throw Error("Cannot compile a statement except on the Block level");
          }
          if (options.sourceMap != null && this.pos.file) {
            options.sourceMap.pushFile(this.pos.file);
          }
          if ((_ref = options.sourceMap) != null) {
            _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
          }
          minify = options.minify;
          if (this.label != null) {
            this.label.compile(options, level, lineStart, sb);
            sb(":");
            if (!minify) {
              sb(" ");
            }
          }
          if (minify) {
            sb("try{");
          } else {
            sb("try {");
            sb(options.linefeed || "\n");
          }
          childOptions = incIndent(options);
          if (!minify) {
            sb.indent(childOptions.indent);
          }
          this.tryBody.compileAsStatement(childOptions, true, sb);
          if (!minify) {
            sb(options.linefeed || "\n");
            sb.indent(options.indent);
          }
          sb(minify ? "}catch(" : "} catch (");
          this.catchIdent.compile(options, 2, false, sb);
          sb(minify ? "){" : ") {");
          if (!this.catchBody.isNoop()) {
            if (!minify) {
              sb(options.linefeed || "\n");
              sb.indent(childOptions.indent);
            }
            this.catchBody.compileAsStatement(childOptions, true, sb);
            if (!minify) {
              sb(options.linefeed || "\n");
              sb.indent(options.indent);
            }
          }
          sb("}");
          if (options.sourceMap != null && this.pos.file) {
            options.sourceMap.popFile();
          }
        };
        _TryCatch_prototype.walk = function (walker) {
          var _ref, catchBody, catchIdent, label, tryBody;
          if ((_ref = walker(this.tryBody)) != null) {
            tryBody = _ref;
          } else {
            tryBody = this.tryBody.walk(walker);
          }
          if ((_ref = walker(this.catchIdent)) != null) {
            catchIdent = _ref;
          } else {
            catchIdent = this.catchIdent.walk(walker);
          }
          if ((_ref = walker(this.catchBody)) != null) {
            catchBody = _ref;
          } else {
            catchBody = this.catchBody.walk(walker);
          }
          if (this.label != null) {
            if ((_ref = walker(this.label)) != null) {
              label = _ref;
            } else {
              label = this.label.walk(walker);
            }
          } else {
            label = this.label;
          }
          if (tryBody !== this.tryBody || catchIdent !== this.catchIdent || catchBody !== this.catchBody || label !== this.label) {
            return TryCatch(
              this.pos,
              tryBody,
              catchIdent,
              catchBody,
              label
            );
          } else {
            return this;
          }
        };
        _TryCatch_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "TryCatch",
            this.pos,
            this.tryBody,
            this.catchIdent,
            this.catchBody,
            this.label
          );
        };
        _TryCatch_prototype._toJSON = function () {
          var result;
          result = [
            this.label || 0,
            simplify(this.tryBody, 0),
            this.catchIdent
          ];
          if (simplify(this.catchBody)) {
            result.push.apply(result, __toArray(this.catchBody.toJSON()));
          }
          return result;
        };
        TryCatch.fromJSON = function (line, column, file, label, tryBody, catchIdent) {
          var catchBody;
          catchBody = __slice.call(arguments, 6);
          return TryCatch(
            makePos(line, column, file),
            fromJSON(tryBody),
            fromJSON(catchIdent),
            fromJSON(catchBody),
            label ? fromJSON(label) : null
          );
        };
        return TryCatch;
      }(Statement));
      exports.TryFinally = TryFinally = (function (Statement) {
        var _Statement_prototype, _TryFinally_prototype;
        function TryFinally(pos, tryBody, finallyBody, label) {
          var _this;
          _this = this instanceof TryFinally ? this : __create(_TryFinally_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          if (tryBody == null) {
            tryBody = Noop(pos);
          } else if (!(tryBody instanceof Node)) {
            throw TypeError("Expected tryBody to be a " + __name(Node) + ", got " + __typeof(tryBody));
          }
          if (finallyBody == null) {
            finallyBody = Noop(pos);
          } else if (!(finallyBody instanceof Node)) {
            throw TypeError("Expected finallyBody to be a " + __name(Node) + ", got " + __typeof(finallyBody));
          }
          if (label == null) {
            label = null;
          } else if (!(label instanceof Ident)) {
            throw TypeError("Expected label to be one of " + (__name(Ident) + " or null") + ", got " + __typeof(label));
          }
          _this.label = label;
          _this.tryBody = tryBody.maybeToStatement();
          _this.finallyBody = finallyBody.maybeToStatement();
          if (label == null) {
            if (_this.tryBody.isNoop()) {
              return _this.finallyBody;
            } else if (_this.finallyBody.isNoop()) {
              return _this.tryBody;
            }
          }
          return _this;
        }
        _Statement_prototype = Statement.prototype;
        _TryFinally_prototype = TryFinally.prototype = __create(_Statement_prototype);
        _TryFinally_prototype.constructor = TryFinally;
        TryFinally.displayName = "TryFinally";
        if (typeof Statement.extended === "function") {
          Statement.extended(TryFinally);
        }
        _TryFinally_prototype.compile = function (options, level, lineStart, sb) {
          var _ref, childOptions, minify;
          if (level !== 1) {
            throw Error("Cannot compile a statement except on the Block level");
          }
          if (options.sourceMap != null && this.pos.file) {
            options.sourceMap.pushFile(this.pos.file);
          }
          if ((_ref = options.sourceMap) != null) {
            _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
          }
          minify = options.minify;
          if (this.label != null) {
            this.label.compile(options, level, lineStart, sb);
            sb(":");
            if (!minify) {
              sb(" ");
            }
          }
          if (minify) {
            sb("try{");
          } else {
            sb("try {");
            sb(options.linefeed || "\n");
          }
          childOptions = incIndent(options);
          if (!minify) {
            sb.indent(childOptions.indent);
          }
          if (this.tryBody instanceof TryCatch && this.tryBody.label == null) {
            this.tryBody.tryBody.compileAsStatement(childOptions, true, sb);
            if (!minify) {
              sb(options.linefeed || "\n");
              sb.indent(options.indent);
            }
            sb(minify ? "}catch(" : "} catch (");
            this.tryBody.catchIdent.compile(options, 2, false, sb);
            sb(minify ? "){" : ") {");
            if (!this.tryBody.catchBody.isNoop()) {
              if (!minify) {
                sb(options.linefeed || "\n");
                sb.indent(childOptions.indent);
              }
              this.tryBody.catchBody.compileAsStatement(childOptions, true, sb);
              if (!minify) {
                sb(options.linefeed || "\n");
                sb.indent(options.indent);
              }
            }
          } else {
            this.tryBody.compileAsStatement(childOptions, true, sb);
            if (!minify) {
              sb(options.linefeed || "\n");
              sb.indent(options.indent);
            }
          }
          if (minify) {
            sb("}finally{");
          } else {
            sb("} finally {");
            sb(options.linefeed || "\n");
          }
          if (!minify) {
            sb.indent(childOptions.indent);
          }
          this.finallyBody.compileAsStatement(childOptions, true, sb);
          if (!minify) {
            sb(options.linefeed || "\n");
            sb.indent(options.indent);
          }
          sb("}");
          if (options.sourceMap != null && this.pos.file) {
            options.sourceMap.popFile();
          }
        };
        _TryFinally_prototype.walk = function (walker) {
          var _ref, finallyBody, label, tryBody;
          if ((_ref = walker(this.tryBody)) != null) {
            tryBody = _ref;
          } else {
            tryBody = this.tryBody.walk(walker);
          }
          if ((_ref = walker(this.finallyBody)) != null) {
            finallyBody = _ref;
          } else {
            finallyBody = this.finallyBody.walk(walker);
          }
          if (this.label != null) {
            if ((_ref = walker(this.label)) != null) {
              label = _ref;
            } else {
              label = this.label.walk(walker);
            }
          } else {
            label = this.label;
          }
          if (tryBody !== this.tryBody || finallyBody !== this.finallyBody || label !== this.label) {
            return TryFinally(this.pos, tryBody, finallyBody, label);
          } else {
            return this;
          }
        };
        _TryFinally_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "TryFinally",
            this.pos,
            this.tryBody,
            this.finallyBody,
            this.label
          );
        };
        _TryFinally_prototype._toJSON = function () {
          var result;
          result = [
            this.label || 0,
            simplify(this.tryBody, 0)
          ];
          if (simplify(this.finallyBody)) {
            result.push.apply(result, __toArray(this.finallyBody.toJSON()));
          }
          return result;
        };
        TryFinally.fromJSON = function (line, column, file, label, tryBody) {
          var finallyBody;
          finallyBody = __slice.call(arguments, 5);
          return TryFinally(
            makePos(line, column, file),
            fromJSON(tryBody),
            fromJSON(finallyBody),
            label ? fromJSON(label) : null
          );
        };
        return TryFinally;
      }(Statement));
      exports.Unary = Unary = (function (Expression) {
        var _Expression_prototype, _Unary_prototype, ASSIGNMENT_OPERATORS,
            KNOWN_OPERATORS;
        function Unary(pos, op, node) {
          var _this;
          _this = this instanceof Unary ? this : __create(_Unary_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          if (typeof op !== "string") {
            throw TypeError("Expected op to be a String, got " + __typeof(op));
          }
          _this.op = op;
          if (node == null) {
            node = Noop(pos);
          }
          if (!__in(op, KNOWN_OPERATORS)) {
            throw Error("Unknown unary operator: " + op);
          }
          if (!(node instanceof Expression)) {
            node = toConst(line, column, node);
          }
          if (op === "delete" && (!(node instanceof Binary) || node.op !== ".")) {
            throw Error("Cannot use delete operator on a non-access");
          }
          _this.node = node;
          return _this;
        }
        _Expression_prototype = Expression.prototype;
        _Unary_prototype = Unary.prototype = __create(_Expression_prototype);
        _Unary_prototype.constructor = Unary;
        Unary.displayName = "Unary";
        if (typeof Expression.extended === "function") {
          Expression.extended(Unary);
        }
        _Unary_prototype.compile = function (options, level, lineStart, sb) {
          var _ref, op;
          op = this.op;
          if (options.sourceMap != null && this.pos.file) {
            options.sourceMap.pushFile(this.pos.file);
          }
          if ((_ref = options.sourceMap) != null) {
            _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
          }
          if (op === "++post" || op === "--post") {
            this.node.compile(options, 16, false, sb);
            sb(op.substring(0, 2));
          } else {
            sb(op);
            if (op === "typeof" || op === "void" || op === "delete" || (op === "+" || op === "-" || op === "++" || op === "--") && (this.node instanceof Unary && (op === "+" || op === "-" || op === "++" || op === "--") || this.node instanceof Const && typeof this.node.value === "number" && isNegative(this.node.value))) {
              sb(" ");
            }
            this.node.compile(options, 16, false, sb);
          }
          if (options.sourceMap != null && this.pos.file) {
            options.sourceMap.popFile();
          }
        };
        _Unary_prototype.compileAsBlock = function (options, level, lineStart, sb) {
          var op;
          op = this.op;
          if (__owns.call(ASSIGNMENT_OPERATORS, op)) {
            this.compile(options, level, lineStart, sb);
          } else {
            this.node.compileAsBlock(options, level, lineStart, sb);
          }
        };
        _Unary_prototype.compileAsStatement = function (options, lineStart, sb) {
          var op;
          op = this.op;
          if (__owns.call(ASSIGNMENT_OPERATORS, op)) {
            _Expression_prototype.compileAsStatement.call(this, options, lineStart, sb);
          } else {
            this.node.compileAsStatement(options, lineStart, sb);
          }
        };
        KNOWN_OPERATORS = [
          "++",
          "--",
          "++post",
          "--post",
          "!",
          "~",
          "+",
          "-",
          "typeof",
          "void",
          "delete"
        ];
        ASSIGNMENT_OPERATORS = {
          "++": true,
          "--": true,
          "++post": true,
          "--post": true,
          "delete": true
        };
        _Unary_prototype.isLarge = function () {
          return this.node.isLarge();
        };
        _Unary_prototype.isSmall = function () {
          return this.node.isSmall();
        };
        _Unary_prototype.isNoop = function () {
          var _ref;
          if ((_ref = this._isNoop) == null) {
            return this._isNoop = !__owns.call(ASSIGNMENT_OPERATORS, this.op) && this.node.isNoop();
          } else {
            return _ref;
          }
        };
        _Unary_prototype.walk = function (walker) {
          var _ref, node;
          if ((_ref = walker(this.node)) != null) {
            node = _ref;
          } else {
            node = this.node.walk(walker);
          }
          if (node !== this.node) {
            return Unary(this.pos, this.op, node);
          } else {
            return this;
          }
        };
        _Unary_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "Unary",
            this.pos,
            this.op,
            this.node
          );
        };
        _Unary_prototype._toJSON = function () {
          var result;
          result = [this.op];
          if (simplify(this.node)) {
            result.push.apply(result, __toArray(this.node.toJSON()));
          }
          return result;
        };
        Unary.fromJSON = function (line, column, file, op) {
          var node;
          node = __slice.call(arguments, 4);
          return Unary(
            makePos(line, column, file),
            op,
            fromJSON(node)
          );
        };
        return Unary;
      }(Expression));
      While = exports.While = function (pos, test, body, label) {
        return For(
          pos,
          null,
          test,
          null,
          body,
          label
        );
      };
      fromJSON = exports.fromJSON = function (obj) {
        var _ref, type;
        if (!obj) {
          return Noop(makePos(0, 0));
        }
        if (__isArray(obj)) {
          if (obj.length === 0) {
            return Noop(makePos(0, 0));
          }
          type = obj[0];
          if (__num(obj.length) < 1 || typeof type !== "string") {
            throw Error("Expected an array with a string as its first item");
          }
          if (!__owns.call(exports, type)) {
            throw Error("Unknown node type: " + __strnum(obj.type));
          }
          return (_ref = exports[type]).fromJSON.apply(_ref, __toArray(__slice.call(obj, 1)));
        } else if (typeof obj === "object" && obj !== null) {
          if (typeof obj.type !== "string") {
            throw Error("Expected an object with a string 'type' key");
          }
          if (!__owns.call(exports, obj.type)) {
            throw Error("Unknown node type: " + __strnum(obj.type));
          }
          return exports[obj.type].fromJSON(obj);
        } else {
          throw TypeError("Must provide an object or array to deserialize");
        }
      };
      function arrayFromJSON(array) {
        var _arr, _arr2, _i, _len, item;
        if (array == null) {
          return [];
        } else if (__isArray(array)) {
          for (_arr = [], _arr2 = __toArray(array), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
            item = _arr2[_i];
            _arr.push(fromJSON(item));
          }
          return _arr;
        } else {
          throw Error("Expected an array, got " + __typeof(array));
        }
      }
    }.call(this));
    
    return module.exports;
  };
  require['./parser'] = function () {
    var module = { exports: this };
    var exports = this;
    (function (GLOBAL) {
      "use strict";
      var __arrayToIter, __bind, __cmp, __create, __curry, __defer,
          __generatorToPromise, __genericFunc, __getInstanceof, __import, __in,
          __indexOfIdentical, __int, __isArray, __isObject, __iter, __lt, __lte,
          __name, __num, __owns, __promise, __slice, __str, __strnum, __toArray,
          __typeof, _arr, _Block, _DefineMacro, _FunctionBody, _FunctionDeclaration,
          _i, _len, _Name, _o, _ref, _ref2, _SomeEmptyLinesWithCheckIndent, _Symbol,
          AccessMultiNode, AccessNode, addParamToScope, allowSpaceBeforeAccess,
          AnyArrayLiteral, AnyObjectLiteral, ArgsNode, ArgumentsLiteral,
          ArrayLiteral, ArrayNode, ArrayParameter, ArrayType,
          AssignmentAsExpression, AssignNode, Ast, AsterixChar, AstExpression,
          AstStatement, AtSignChar, BackslashChar, BackslashEscapeSequence,
          BackslashStringLiteral, BasicInvocationOrAccess, BinaryDigit, BinaryNode,
          BinaryNumber, BinaryOperationByPrecedence, Block, BlockNode, Body,
          BodyNoEnd, BodyNoIndent, BodyNoIndentNoEnd, BodyWithIndent, BOM, Box,
          BracketedObjectKey, BreakNode, cache, CallNode, CaretChar, Cascade,
          CascadePart, CascadePartWithCascade, CheckStop, CloseCurlyBrace,
          CloseCurlyBraceChar, ClosedArguments, CloseParenthesis,
          CloseSquareBracket, Colon, ColonChar, ColonEmbeddedClose,
          ColonEmbeddedCloseWrite, ColonEqual, ColonNewline, Comma, CommaChar,
          CommaOrNewline, CommaOrSomeEmptyLinesWithCheckIndent, CommentNode, concat,
          cons, ConstantLiteral, ConstantLiteralAccessPart, ConstNode,
          ConstObjectKey, ContinueNode, convertInvocationOrAccess, CountIndent,
          CurrentArrayLength, CustomOperatorCloseParenthesis, DebuggerNode,
          DecimalDigit, DecimalNumber, DedentedBody, DefineConstLiteral,
          DefineHelper, DefineMacro, DefineOperator, DefineSyntax, DefNode,
          disallowEmbeddedText, disallowSpaceBeforeAccess, DollarSign,
          DollarSignChar, dontRequireParameterSequence, DoubleColonChar,
          DoubleQuote, DoubleStringArrayLiteral, DoubleStringLiteral,
          DoubleStringLiteralInner, DualObjectKey, EmbeddedBlock, EmbeddedClose,
          EmbeddedCloseComment, EmbeddedCloseWrite, EmbeddedLiteralText,
          EmbeddedLiteralTextInnerPart, EmbeddedLiteralTextInnerPartWithBlock,
          EmbeddedOpen, EmbeddedOpenComment, EmbeddedOpenWrite,
          EmbeddedRootGeneratorP, EmbeddedRootInnerP, EmbeddedRootP,
          EmbeddedWriteExpression, EmbedWriteNode, EmptyLine, EmptyLines,
          EmptyLinesSpace, EndNoIndent, EqualChar, EqualSign, EqualSignChar, Eval,
          EvalNode, ExclamationPointChar, Expression, ExpressionAsStatement,
          ExpressionOrAssignment, ExpressionOrAssignmentOrBody, ForInNode, ForNode,
          fromCharCode, FunctionBody, FunctionDeclaration, FunctionGlyph,
          FunctionLiteral, FunctionNode, FunctionType, GeneratorBody,
          GeneratorBodyNoEnd, GeneratorFunctionBody, getPackageVersion,
          getReservedIdents, GetSetToken, GreaterThan, GreaterThanChar,
          HashSignChar, HexDigit, HexEscapeSequence, HexNumber, Identifier,
          IdentifierNameConst, IdentifierNameConstOrNumberLiteral,
          IdentifierOrAccess, IdentifierOrSimpleAccess,
          IdentifierOrSimpleAccessPart, IdentifierOrSimpleAccessStart,
          IdentifierOrThisAccess, IdentifierParameter, IdentNode, IfNode, inAst,
          inCascade, IndentedUnclosedArrayLiteral,
          IndentedUnclosedArrayLiteralInner, IndentedUnclosedObjectLiteral,
          IndentedUnclosedObjectLiteralInner, INDENTS, inEvilAst, inExpression,
          inFunctionTypeParams, inMacro, inStatement, InvocationArguments,
          InvocationOrAccess, InvocationOrAccessPart, KeyValuePair, KvpParameter,
          LessThan, LessThanChar, Letter, LicenseComment, Line, Literal, Logic,
          MacroAccessNode, MacroBody, MacroConstNode, MacroContext, MacroError,
          MacroHolder, MacroName, macroName, MacroNames, MacroOptions, MacroSyntax,
          MacroSyntaxChoiceParameters, MacroSyntaxParameter, MacroSyntaxParameters,
          MacroSyntaxParameterType, makeAlterStack, makeEmbeddedRule, Map,
          MapLiteral, MaybeAsType, MaybeAtSignChar, MaybeComma, MaybeCommaOrNewline,
          MaybeComment, MaybeExclamationPointChar, MaybeNotToken,
          MaybeQuestionMarkChar, MaybeSpreadToken, MaybeUnderscores,
          MethodDeclaration, MinusChar, multiple, mutate, Name, NameChar,
          NameOrSymbol, NamePart, NameStart, Node, nodeType, NoNewlineIfNoIndent,
          NonUnionType, NoSpace, NoSpaceNewline, NotColon,
          NotColonUnlessNoIndentAndNewline, NotEmbeddedOpenComment,
          NotEmbeddedOpenWrite, Nothing, NothingNode, notInFunctionTypeParams,
          NumberChar, NumberLiteral, ObjectKey, ObjectKeyColon, ObjectLiteral,
          ObjectNode, ObjectParameter, ObjectType, ObjectTypePair, OctalDigit,
          OctalNumber, oneOf, oneOrMore, oneOrMoreOf, OpenCurlyBrace,
          OpenCurlyBraceChar, OpenParenthesis, OpenSquareBracket,
          OpenSquareBracketChar, ParamDualObjectKey, Parameter, ParameterOrNothing,
          Parameters, ParameterSequence, ParamNode, ParamSingularObjectKey,
          Parenthetical, parse, Parser, ParserError, PercentSign, PercentSignChar,
          Period, PeriodOrDoubleColonChar, Pipe, PipeChar, PlusChar,
          PlusOrMinusChar, PostfixUnaryOperation, PrefixUnaryOperation,
          preventUnclosedObjectLiteral, PrimaryExpression, PropertyDualObjectKey,
          PropertyOrDualObjectKey, PropertyOrDualObjectKeyOrMethodDeclaration,
          quote, RadixNumber, RegexLiteral, RegexpNode, requireParameterSequence,
          ReturnNode, RootInnerP, RootNode, RootP, Scope, Semicolon, SemicolonChar,
          Semicolons, separatedList, sequential, setImmediate, SetLiteral, Shebang,
          SHORT_CIRCUIT, SingleEscapeCharacter, SingleQuote, SingleStringLiteral,
          SingularObjectKey, SomeEmptyLines, SomeEmptyLinesWithCheckIndent, Space,
          SpaceChar, SpaceChars, SpreadNode, SpreadOrExpression, SpreadToken, Stack,
          Statement, StringInterpolation, StringLiteral, stringRepeat,
          SuperInvocation, SuperNode, SwitchNode, Symbol, symbol, SymbolChar,
          SyntaxChoiceNode, SyntaxManyNode, SyntaxParamNode, SyntaxSequenceNode,
          ThisLiteral, ThisNode, ThisOrShorthandLiteral,
          ThisOrShorthandLiteralPeriod, ThisShorthandLiteral, ThrowNode, TmpNode,
          TmpWrapperNode, trimRight, TripleDoubleQuote,
          TripleDoubleStringArrayLiteral, TripleDoubleStringLine,
          TripleDoubleStringLiteral, TripleSingleQuote, TripleSingleStringLine,
          TripleSingleStringLiteral, TryCatchNode, TryFinallyNode, Type,
          TypeFunctionNode, TypeGenericNode, TypeObjectNode, TypeReference,
          TypeUnionNode, UnaryNode, UnclosedArguments, UnclosedArrayLiteralElement,
          UnclosedObjectLiteral, UnclosedObjectLiteralsAllowed, Underscore,
          UnicodeEscapeSequence, unique, unusedCaches, UseMacro, VarNode, WeakMap,
          word, wordOrSymbol, wrapIndent, YieldNode, Zero, zeroOrMore, zeroOrMoreOf;
      __arrayToIter = (function () {
        var proto;
        proto = {
          iterator: function () {
            return this;
          },
          next: function () {
            var array, i;
            i = __num(this.index) + 1;
            array = this.array;
            if (i >= __num(array.length)) {
              return { done: true, value: void 0 };
            } else {
              this.index = i;
              return { done: false, value: array[i] };
            }
          }
        };
        return function (array) {
          var _o;
          if (!__isArray(array)) {
            throw TypeError("Expected array to be an Array, got " + __typeof(array));
          }
          _o = __create(proto);
          _o.array = array;
          _o.index = -1;
          return _o;
        };
      }());
      __bind = function (parent, child) {
        var func;
        if (parent == null) {
          throw TypeError("Expected parent to be an object, got " + __typeof(parent));
        }
        func = parent[child];
        if (typeof func !== "function") {
          throw Error("Trying to bind child '" + String(child) + "' which is not a function");
        }
        return function () {
          return func.apply(parent, arguments);
        };
      };
      __cmp = function (left, right) {
        var type;
        if (left === right) {
          return 0;
        } else {
          type = typeof left;
          if (type !== "number" && type !== "string") {
            throw TypeError("Cannot compare a non-number/string: " + type);
          } else if (type !== typeof right) {
            throw TypeError("Cannot compare elements of different types: " + type + " vs " + typeof right);
          } else if (left < right) {
            return -1;
          } else {
            return 1;
          }
        }
      };
      __create = typeof Object.create === "function" ? Object.create
        : function (x) {
          function F() {}
          F.prototype = x;
          return new F();
        };
      __curry = function (numArgs, f) {
        var currier;
        if (typeof numArgs !== "number") {
          throw TypeError("Expected numArgs to be a Number, got " + __typeof(numArgs));
        }
        if (typeof f !== "function") {
          throw TypeError("Expected f to be a Function, got " + __typeof(f));
        }
        if (numArgs > 1) {
          currier = function (args) {
            var ret;
            if (__num(args.length) >= numArgs) {
              return f.apply(this, args);
            } else {
              ret = function () {
                if (arguments.length === 0) {
                  return ret;
                } else {
                  return currier.call(this, args.concat(__slice.call(arguments)));
                }
              };
              return ret;
            }
          };
          return currier([]);
        } else {
          return f;
        }
      };
      __defer = (function () {
        function __defer() {
          var deferred, isError, value;
          isError = false;
          value = null;
          deferred = [];
          function complete(newIsError, newValue) {
            var funcs;
            if (deferred) {
              funcs = deferred;
              deferred = null;
              isError = newIsError;
              value = newValue;
              if (funcs.length) {
                setImmediate(function () {
                  var _end, i;
                  for (i = 0, _end = funcs.length; i < _end; ++i) {
                    funcs[i]();
                  }
                });
              }
            }
          }
          return {
            promise: {
              then: function (onFulfilled, onRejected, allowSync) {
                var _ref, fulfill, promise, reject;
                if (allowSync !== true) {
                  allowSync = void 0;
                }
                _ref = __defer();
                promise = _ref.promise;
                fulfill = _ref.fulfill;
                reject = _ref.reject;
                function step() {
                  var f, result;
                  try {
                    if (isError) {
                      f = onRejected;
                    } else {
                      f = onFulfilled;
                    }
                    if (typeof f === "function") {
                      result = f(value);
                      if (result && typeof result.then === "function") {
                        result.then(fulfill, reject, allowSync);
                      } else {
                        fulfill(result);
                      }
                    } else {
                      (isError ? reject : fulfill)(value);
                    }
                  } catch (e) {
                    reject(e);
                  }
                }
                if (deferred) {
                  deferred.push(step);
                } else if (allowSync) {
                  step();
                } else {
                  setImmediate(step);
                }
                return promise;
              },
              sync: function () {
                var result, state;
                state = 0;
                result = 0;
                this.then(
                  function (ret) {
                    state = 1;
                    return result = ret;
                  },
                  function (err) {
                    state = 2;
                    return result = err;
                  },
                  true
                );
                switch (state) {
                case 0: throw Error("Promise did not execute synchronously");
                case 1: return result;
                case 2: throw result;
                default: throw Error("Unknown state");
                }
              }
            },
            fulfill: function (value) {
              complete(false, value);
            },
            reject: function (reason) {
              complete(true, reason);
            }
          };
        }
        __defer.fulfilled = function (value) {
          var d;
          d = __defer();
          d.fulfill(value);
          return d.promise;
        };
        __defer.rejected = function (reason) {
          var d;
          d = __defer();
          d.reject(reason);
          return d.promise;
        };
        return __defer;
      }());
      __generatorToPromise = function (generator, allowSync) {
        if (typeof generator !== "object" || generator === null) {
          throw TypeError("Expected generator to be an Object, got " + __typeof(generator));
        } else {
          if (typeof generator.send !== "function") {
            throw TypeError("Expected generator.send to be a Function, got " + __typeof(generator.send));
          }
          if (typeof generator["throw"] !== "function") {
            throw TypeError("Expected generator.throw to be a Function, got " + __typeof(generator["throw"]));
          }
        }
        if (allowSync == null) {
          allowSync = false;
        } else if (typeof allowSync !== "boolean") {
          throw TypeError("Expected allowSync to be a Boolean, got " + __typeof(allowSync));
        }
        function continuer(verb, arg) {
          var item;
          try {
            item = generator[verb](arg);
          } catch (e) {
            return __defer.rejected(e);
          }
          if (item.done) {
            return __defer.fulfilled(item.value);
          } else {
            return item.value.then(callback, errback, allowSync);
          }
        }
        function callback(value) {
          return continuer("send", value);
        }
        function errback(value) {
          return continuer("throw", value);
        }
        return callback(void 0);
      };
      __genericFunc = function (numArgs, make) {
        var any, cache, result;
        cache = WeakMap();
        any = {};
        function generic() {
          var _ref, current, i, item, type;
          current = cache;
          for (i = numArgs - 1; i >= 0; --i) {
            if ((_ref = arguments[i]) != null) {
              type = _ref;
            } else {
              type = any;
            }
            item = current.get(type);
            if (item == null) {
              if (i === 0) {
                item = make.apply(this, arguments);
              } else {
                item = WeakMap();
              }
              current.set(type, item);
            }
            current = item;
          }
          return current;
        }
        result = generic();
        result.generic = generic;
        return result;
      };
      __getInstanceof = (function () {
        function isAny() {
          return true;
        }
        function isStr(x) {
          return typeof x === "string";
        }
        function isNum(x) {
          return typeof x === "number";
        }
        function isFunc(x) {
          return typeof x === "function";
        }
        function isBool(x) {
          return typeof x === "boolean";
        }
        return function (ctor) {
          if (ctor == null) {
            return isAny;
          } else {
            switch (ctor) {
            case String: return isStr;
            case Number: return isNum;
            case Function: return isFunc;
            case Boolean: return isBool;
            case Array: return __isArray;
            case Object: return __isObject;
            default:
              return function (_x) {
                return _x instanceof ctor;
              };
            }
          }
        };
      }());
      __import = function (dest, source) {
        var k;
        for (k in source) {
          if (__owns.call(source, k)) {
            dest[k] = source[k];
          }
        }
        return dest;
      };
      __in = typeof Array.prototype.indexOf === "function"
        ? (function () {
          var indexOf;
          indexOf = Array.prototype.indexOf;
          return function (child, parent) {
            return indexOf.call(parent, child) !== -1;
          };
        }())
        : function (child, parent) {
          var i, len;
          len = +parent.length;
          i = -1;
          while (++i < len) {
            if (child === parent[i] && i in parent) {
              return true;
            }
          }
          return false;
        };
      __indexOfIdentical = function (array, item) {
        var _arr, check, i, inf;
        if (typeof item === "number") {
          if (item !== item) {
            for (_arr = __toArray(array), i = _arr.length; i--; ) {
              check = _arr[i];
              if (check !== check) {
                return i;
              }
            }
            return -1;
          } else if (item === 0) {
            inf = 1 / item;
            for (_arr = __toArray(array), i = _arr.length; i--; ) {
              check = _arr[i];
              if (check === 0 && 1 / check === inf) {
                return i;
              }
            }
            return -1;
          }
        }
        return array.indexOf(item);
      };
      __int = function (num) {
        if (typeof num !== "number") {
          throw TypeError("Expected a number, got " + __typeof(num));
        } else if (num % 1 !== 0) {
          throw TypeError("Expected an integer, got " + num);
        } else {
          return num;
        }
      };
      __isArray = typeof Array.isArray === "function" ? Array.isArray
        : (function () {
          var _toString;
          _toString = Object.prototype.toString;
          return function (x) {
            return _toString.call(x) === "[object Array]";
          };
        }());
      __isObject = function (x) {
        return typeof x === "object" && x !== null;
      };
      __iter = function (iterable) {
        if (iterable == null) {
          throw TypeError("Expected iterable to be an Object, got " + __typeof(iterable));
        } else if (__isArray(iterable)) {
          return __arrayToIter(iterable);
        } else if (typeof iterable.iterator === "function") {
          return iterable.iterator();
        } else if (typeof iterable.next === "function") {
          return iterable;
        } else {
          throw Error("Expected iterable to be an Array or an Object with an 'iterator' function or an Object with a 'next' function, got " + __typeof(iterable));
        }
      };
      __lt = function (x, y) {
        var type;
        type = typeof x;
        if (type !== "number" && type !== "string") {
          throw TypeError("Cannot compare a non-number/string: " + type);
        } else if (type !== typeof y) {
          throw TypeError("Cannot compare elements of different types: " + type + " vs " + typeof y);
        } else {
          return x < y;
        }
      };
      __lte = function (x, y) {
        var type;
        type = typeof x;
        if (type !== "number" && type !== "string") {
          throw TypeError("Cannot compare a non-number/string: " + type);
        } else if (type !== typeof y) {
          throw TypeError("Cannot compare elements of different types: " + type + " vs " + typeof y);
        } else {
          return x <= y;
        }
      };
      __name = function (func) {
        if (typeof func !== "function") {
          throw TypeError("Expected func to be a Function, got " + __typeof(func));
        }
        return func.displayName || func.name || "";
      };
      __num = function (num) {
        if (typeof num !== "number") {
          throw TypeError("Expected a number, got " + __typeof(num));
        } else {
          return num;
        }
      };
      __owns = Object.prototype.hasOwnProperty;
      __promise = function (value, allowSync) {
        var factory;
        if (allowSync == null) {
          allowSync = false;
        } else if (typeof allowSync !== "boolean") {
          throw TypeError("Expected allowSync to be a Boolean, got " + __typeof(allowSync));
        }
        if (typeof value === "function") {
          factory = function () {
            return __generatorToPromise(value.apply(this, arguments));
          };
          factory.sync = function () {
            return __generatorToPromise(
              value.apply(this, arguments),
              true
            ).sync();
          };
          return factory;
        } else {
          return __generatorToPromise(value, allowSync);
        }
      };
      __slice = Array.prototype.slice;
      __str = function (str) {
        if (typeof str !== "string") {
          throw TypeError("Expected a string, got " + __typeof(str));
        } else {
          return str;
        }
      };
      __strnum = function (strnum) {
        var type;
        type = typeof strnum;
        if (type === "string") {
          return strnum;
        } else if (type === "number") {
          return String(strnum);
        } else {
          throw TypeError("Expected a string or number, got " + __typeof(strnum));
        }
      };
      __toArray = function (x) {
        if (x == null) {
          throw TypeError("Expected an object, got " + __typeof(x));
        } else if (__isArray(x)) {
          return x;
        } else if (typeof x === "string") {
          return x.split("");
        } else {
          return __slice.call(x);
        }
      };
      __typeof = (function () {
        var _toString;
        _toString = Object.prototype.toString;
        return function (o) {
          if (o === void 0) {
            return "Undefined";
          } else if (o === null) {
            return "Null";
          } else {
            return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
          }
        };
      }());
      Map = typeof GLOBAL.Map === "function" ? GLOBAL.Map
        : (Map = (function () {
          var _Map_prototype;
          function Map(iterable) {
            var _item, _iter, _this, x;
            _this = this instanceof Map ? this : __create(_Map_prototype);
            _this._keys = [];
            _this._values = [];
            if (iterable != null) {
              try {
                for (_iter = __iter(iterable); ; ) {
                  _item = _iter.next();
                  if (_item.done) {
                    break;
                  }
                  x = _item.value;
                  _this.set(x[0], x[1]);
                }
              } finally {
                try {
                  _iter.close();
                } catch (_e) {}
              }
            }
            return _this;
          }
          _Map_prototype = Map.prototype;
          Map.displayName = "Map";
          _Map_prototype.get = function (key) {
            var index;
            index = __indexOfIdentical(this._keys, key);
            if (index === -1) {
              return;
            } else {
              return this._values[index];
            }
          };
          _Map_prototype.has = function (key) {
            return __indexOfIdentical(this._keys, key) !== -1;
          };
          _Map_prototype.set = function (key, value) {
            var index, keys;
            keys = this._keys;
            index = __indexOfIdentical(keys, key);
            if (index === -1) {
              index = keys.length;
              keys[index] = key;
            }
            this._values[index] = value;
          };
          _Map_prototype["delete"] = function (key) {
            var index, keys;
            keys = this._keys;
            index = __indexOfIdentical(keys, key);
            if (index === -1) {
              return false;
            } else {
              keys.splice(index, 1);
              return this._values.splice(index, 1);
            }
          };
          _Map_prototype.keys = function () {
            var _arr, _e, _i, _send, _state, _step, _this, _throw, key;
            _this = this;
            _state = 0;
            function _close() {
              _state = 3;
            }
            function _step(_received) {
              while (true) {
                switch (_state) {
                case 0:
                  _arr = __toArray(_this._keys);
                  _i = _arr.length;
                  ++_state;
                case 1:
                  _state = _i-- ? 2 : 3;
                  break;
                case 2:
                  key = _arr[_i];
                  _state = 1;
                  return { done: false, value: key };
                case 3:
                  return { done: true, value: void 0 };
                default: throw Error("Unknown state: " + _state);
                }
              }
            }
            function _throw(_e) {
              _close();
              throw _e;
            }
            function _send(_received) {
              try {
                return _step(_received);
              } catch (_e) {
                _throw(_e);
              }
            }
            return {
              close: _close,
              iterator: function () {
                return this;
              },
              next: function () {
                return _send(void 0);
              },
              send: _send,
              "throw": function (_e) {
                _throw(_e);
                return _send(void 0);
              }
            };
          };
          _Map_prototype.values = function () {
            var _arr, _e, _i, _send, _state, _step, _this, _throw, value;
            _this = this;
            _state = 0;
            function _close() {
              _state = 3;
            }
            function _step(_received) {
              while (true) {
                switch (_state) {
                case 0:
                  _arr = __toArray(_this._values);
                  _i = _arr.length;
                  ++_state;
                case 1:
                  _state = _i-- ? 2 : 3;
                  break;
                case 2:
                  value = _arr[_i];
                  _state = 1;
                  return { done: false, value: value };
                case 3:
                  return { done: true, value: void 0 };
                default: throw Error("Unknown state: " + _state);
                }
              }
            }
            function _throw(_e) {
              _close();
              throw _e;
            }
            function _send(_received) {
              try {
                return _step(_received);
              } catch (_e) {
                _throw(_e);
              }
            }
            return {
              close: _close,
              iterator: function () {
                return this;
              },
              next: function () {
                return _send(void 0);
              },
              send: _send,
              "throw": function (_e) {
                _throw(_e);
                return _send(void 0);
              }
            };
          };
          _Map_prototype.items = function () {
            var _arr, _e, _send, _state, _step, _this, _throw, i, key, values;
            _this = this;
            _state = 0;
            function _close() {
              _state = 3;
            }
            function _step(_received) {
              while (true) {
                switch (_state) {
                case 0:
                  values = _this._values;
                  _arr = __toArray(_this._keys);
                  i = _arr.length;
                  ++_state;
                case 1:
                  _state = i-- ? 2 : 3;
                  break;
                case 2:
                  key = _arr[i];
                  _state = 1;
                  return {
                    done: false,
                    value: [key, values[i]]
                  };
                case 3:
                  return { done: true, value: void 0 };
                default: throw Error("Unknown state: " + _state);
                }
              }
            }
            function _throw(_e) {
              _close();
              throw _e;
            }
            function _send(_received) {
              try {
                return _step(_received);
              } catch (_e) {
                _throw(_e);
              }
            }
            return {
              close: _close,
              iterator: function () {
                return this;
              },
              next: function () {
                return _send(void 0);
              },
              send: _send,
              "throw": function (_e) {
                _throw(_e);
                return _send(void 0);
              }
            };
          };
          _Map_prototype.iterator = Map.prototype.items;
          return Map;
        }()));
      setImmediate = typeof GLOBAL.setImmediate === "function" ? GLOBAL.setImmediate
        : typeof process !== "undefined" && typeof process.nextTick === "function"
        ? (function () {
          var nextTick;
          nextTick = process.nextTick;
          return function (func) {
            var args;
            if (typeof func !== "function") {
              throw TypeError("Expected func to be a Function, got " + __typeof(func));
            }
            args = __slice.call(arguments, 1);
            if (args.length) {
              return nextTick(function () {
                func.apply(void 0, __toArray(args));
              });
            } else {
              return nextTick(func);
            }
          };
        }())
        : function (func) {
          var args;
          if (typeof func !== "function") {
            throw TypeError("Expected func to be a Function, got " + __typeof(func));
          }
          args = __slice.call(arguments, 1);
          if (args.length) {
            return setTimeout(
              function () {
                func.apply(void 0, __toArray(args));
              },
              0
            );
          } else {
            return setTimeout(func, 0);
          }
        };
      WeakMap = typeof GLOBAL.WeakMap === "function" ? GLOBAL.WeakMap
        : (WeakMap = (function () {
          var _WeakMap_prototype, defProp, isExtensible;
          function WeakMap() {
            var _this;
            _this = this instanceof WeakMap ? this : __create(_WeakMap_prototype);
            _this._keys = [];
            _this._values = [];
            _this._chilly = [];
            _this._uid = createUid();
            return _this;
          }
          _WeakMap_prototype = WeakMap.prototype;
          WeakMap.displayName = "WeakMap";
          function uidRand() {
            return Math.random().toString(36).slice(2);
          }
          function createUid() {
            return __strnum(uidRand()) + "-" + __strnum(new Date().getTime()) + "-" + __strnum(uidRand()) + "-" + __strnum(uidRand());
          }
          isExtensible = Object.isExtensible || function () {
            return true;
          };
          function check(key) {
            var chilly, uid;
            uid = this._uid;
            if (__owns.call(key, uid)) {
              chilly = this._chilly;
              if (chilly.indexOf(key) === -1) {
                chilly.push(key);
                this._keys.push(key);
                this._values.push(key[uid]);
              }
            }
          }
          _WeakMap_prototype.get = function (key) {
            var _ref, index;
            if (Object(key) !== key) {
              throw TypeError("Invalid value used as weak map key");
            }
            if (isExtensible(key)) {
              if (__owns.call(key, _ref = this._uid)) {
                return key[_ref];
              }
            } else {
              check.call(this, key);
              index = this._keys.indexOf(key);
              if (index === -1) {
                return;
              } else {
                return this._values[index];
              }
            }
          };
          _WeakMap_prototype.has = function (key) {
            if (Object(key) !== key) {
              throw TypeError("Invalid value used as weak map key");
            }
            if (isExtensible(key)) {
              return __owns.call(key, this._uid);
            } else {
              check.call(this, key);
              return this._keys.indexOf(key) !== -1;
            }
          };
          if (typeof Object.defineProperty === "function") {
            defProp = Object.defineProperty;
          } else {
            defProp = function (o, k, d) {
              o[k] = d.value;
            };
          }
          _WeakMap_prototype.set = function (key, value) {
            var index, keys;
            if (Object(key) !== key) {
              throw TypeError("Invalid value used as weak map key");
            }
            if (isExtensible(key)) {
              defProp(key, this._uid, { configurable: true, writable: true, enumerable: false, value: value });
            } else {
              check.call(this, key);
              keys = this._keys;
              index = keys.indexOf(key);
              if (index === -1) {
                index = keys.length;
                keys[index] = key;
              }
              this._values[index] = value;
            }
          };
          _WeakMap_prototype["delete"] = function (key) {
            var index, keys;
            if (Object(key) !== key) {
              throw TypeError("Invalid value used as weak map key");
            }
            if (isExtensible(key)) {
              delete key[this._uid];
            } else {
              check.call(this, key);
              keys = this._keys;
              index = keys.indexOf(key);
              if (index !== -1) {
                keys.splice(index, 1);
                this._values.splice(index, 1);
              }
            }
          };
          return WeakMap;
        }()));
      Node = require("./parser-nodes");
      Scope = require("./parser-scope");
      MacroContext = require("./parser-macrocontext");
      MacroHolder = require("./parser-macroholder");
      Type = require("./types");
      stringRepeat = require("./utils").stringRepeat;
      addParamToScope = require("./parser-utils").addParamToScope;
      _ref = require("./utils");
      quote = _ref.quote;
      unique = _ref.unique;
      getPackageVersion = _ref.getPackageVersion;
      AccessNode = Node.Access;
      AccessMultiNode = Node.AccessMulti;
      ArgsNode = Node.Args;
      ArrayNode = Node.Array;
      AssignNode = Node.Assign;
      BinaryNode = Node.Binary;
      BlockNode = Node.Block;
      BreakNode = Node.Break;
      CallNode = Node.Call;
      CommentNode = Node.Comment;
      ConstNode = Node.Const;
      ContinueNode = Node.Continue;
      DebuggerNode = Node.Debugger;
      DefNode = Node.Def;
      EmbedWriteNode = Node.EmbedWrite;
      EvalNode = Node.Eval;
      ForNode = Node.For;
      ForInNode = Node.ForIn;
      FunctionNode = Node.Function;
      IdentNode = Node.Ident;
      IfNode = Node.If;
      MacroAccessNode = Node.MacroAccess;
      MacroConstNode = Node.MacroConst;
      NothingNode = Node.Nothing;
      ObjectNode = Node.Object;
      ParamNode = Node.Param;
      RegexpNode = Node.Regexp;
      ReturnNode = Node.Return;
      RootNode = Node.Root;
      SpreadNode = Node.Spread;
      SuperNode = Node.Super;
      SwitchNode = Node.Switch;
      SyntaxChoiceNode = Node.SyntaxChoice;
      SyntaxManyNode = Node.SyntaxMany;
      SyntaxParamNode = Node.SyntaxParam;
      SyntaxSequenceNode = Node.SyntaxSequence;
      ThisNode = Node.This;
      ThrowNode = Node.Throw;
      TmpNode = Node.Tmp;
      TmpWrapperNode = Node.TmpWrapper;
      TryCatchNode = Node.TryCatch;
      TryFinallyNode = Node.TryFinally;
      TypeFunctionNode = Node.TypeFunction;
      TypeGenericNode = Node.TypeGeneric;
      TypeObjectNode = Node.TypeObject;
      TypeUnionNode = Node.TypeUnion;
      UnaryNode = Node.Unary;
      VarNode = Node.Var;
      YieldNode = Node.Yield;
      ParserError = (function (Error) {
        var _Error_prototype, _ParserError_prototype;
        function ParserError(message, parser, index) {
          var _this, err, pos;
          _this = this instanceof ParserError ? this : __create(_ParserError_prototype);
          if (message == null) {
            message = "";
          } else if (typeof message !== "string") {
            throw TypeError("Expected message to be a String, got " + __typeof(message));
          }
          _this.message = message;
          if (parser == null) {
            parser = null;
          } else if (!(parser instanceof Parser)) {
            throw TypeError("Expected parser to be one of " + (__name(Parser) + " or null") + ", got " + __typeof(parser));
          }
          if (index == null) {
            index = 0;
          } else if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          _this.index = index;
          if (message && !parser) {
            throw TypeError("Expected parser to be a Parser, got " + __typeof(parser));
          }
          if (parser) {
            _this.source = parser.source;
            _this.filename = parser.options.filename;
            pos = parser.getPosition(index);
            _this.line = pos.line;
            _this.column = pos.column;
            _this.message = message + (" at " + (_this.filename ? __strnum(_this.filename) + ":" : "") + __strnum(_this.line) + ":" + __strnum(_this.column));
          } else {
            _this.line = 0;
            _this.column = 0;
          }
          err = Error.call(_this, _this.message);
          if (typeof Error.captureStackTrace === "function") {
            Error.captureStackTrace(_this, ParserError);
          } else if ("stack" in err) {
            _this.stack = err.stack;
          }
          return _this;
        }
        _Error_prototype = Error.prototype;
        _ParserError_prototype = ParserError.prototype = __create(_Error_prototype);
        _ParserError_prototype.constructor = ParserError;
        ParserError.displayName = "ParserError";
        if (typeof Error.extended === "function") {
          Error.extended(ParserError);
        }
        _ParserError_prototype.name = "ParserError";
        return ParserError;
      }(Error));
      MacroError = (function (Error) {
        var _Error_prototype, _MacroError_prototype;
        function MacroError(inner, parser, index) {
          var _this, err, msg, pos;
          _this = this instanceof MacroError ? this : __create(_MacroError_prototype);
          if (inner == null) {
            inner = "";
          } else if (!(inner instanceof Error) && typeof inner !== "string") {
            throw TypeError("Expected inner to be one of " + (__name(Error) + " or String") + ", got " + __typeof(inner));
          }
          if (parser == null) {
            parser = null;
          } else if (!(parser instanceof Parser)) {
            throw TypeError("Expected parser to be one of " + (__name(Parser) + " or null") + ", got " + __typeof(parser));
          }
          if (index == null) {
            index = 0;
          } else if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          _this.index = index;
          if (inner && !parser) {
            throw TypeError("Expected parser to be a Parser, got " + __typeof(parser));
          }
          if (parser) {
            _this.source = parser.source;
            _this.filename = parser.options.filename;
            pos = parser.getPosition(index);
            _this.line = pos.line;
            _this.column = pos.column;
            msg = [];
            if (inner instanceof Error) {
              if (__typeof(inner) !== "Error") {
                msg.push(__typeof(inner));
                msg.push(": ");
              }
              msg.push(String(inner.message));
            } else {
              msg.push(String(inner));
            }
            msg.push(" at ");
            if (_this.filename) {
              msg.push(String(_this.filename));
              msg.push(":");
            }
            _this._message = msg.join("");
            msg.push(_this.line);
            msg.push(":");
            msg.push(_this.column);
            _this.message = msg.join("");
          } else {
            _this.line = 0;
            _this.column = 0;
            _this._message = "";
            _this.message = "";
          }
          err = Error.call(_this, _this.message);
          if (typeof Error.captureStackTrace === "function") {
            Error.captureStackTrace(_this, MacroError);
          } else if ("stack" in err) {
            _this.stack = err.stack;
          }
          if (inner instanceof Error) {
            _this.inner = inner;
          }
          return _this;
        }
        _Error_prototype = Error.prototype;
        _MacroError_prototype = MacroError.prototype = __create(_Error_prototype);
        _MacroError_prototype.constructor = MacroError;
        MacroError.displayName = "MacroError";
        if (typeof Error.extended === "function") {
          Error.extended(MacroError);
        }
        _MacroError_prototype.name = "MacroError";
        _MacroError_prototype.setPosition = function (line, column) {
          if (typeof line !== "number") {
            throw TypeError("Expected line to be a Number, got " + __typeof(line));
          }
          if (typeof column !== "number") {
            throw TypeError("Expected column to be a Number, got " + __typeof(column));
          }
          return;
        };
        return MacroError;
      }(Error));
      Box = (function () {
        var _Box_prototype;
        function Box(index, value) {
          var _this;
          _this = this instanceof Box ? this : __create(_Box_prototype);
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          _this.index = index;
          _this.value = value;
          if (index % 1 !== 0 || index < 0) {
            throw RangeError("Expected index to be a non-negative integer, got " + index);
          }
          return _this;
        }
        _Box_prototype = Box.prototype;
        Box.displayName = "Box";
        return Box;
      }());
      unusedCaches = Map();
      cache = (function () {
        var id;
        id = -1;
        return function (rule) {
          var cacheKey;
          if (typeof rule !== "function") {
            throw TypeError("Expected rule to be a Function, got " + __typeof(rule));
          }
          if (arguments.length > 1) {
            throw Error("Expected only one argument");
          }
          cacheKey = ++id;
          function f(parser, index) {
            var _ref, _ref2, cache, indent, indentCache, inner, item, result;
            cache = parser.cache;
            indent = parser.indent.peek();
            if ((_ref = cache[indent]) != null) {
              indentCache = _ref;
            } else {
              indentCache = cache[indent] = [];
            }
            if ((_ref = indentCache[_ref2 = index % 16]) != null) {
              inner = _ref;
            } else {
              inner = indentCache[_ref2] = [];
            }
            item = inner[cacheKey];
            if (item && item.start === index) {
              unusedCaches["delete"](f);
              return item.result;
            } else {
              result = rule(parser, index);
              if (parser.indent.peek() !== indent) {
                throw Error("Changed indent during cache process: from " + __strnum(indent) + " to " + __strnum(_indent.peek(o)));
              } else if (result && !(result instanceof Box)) {
                throw Error("Expected result to be a Box, got " + __typeof(result));
              }
              inner[cacheKey] = { start: index, result: result };
              return result;
            }
          }
          unusedCaches.set(f, Error().stack);
          return f;
        };
      }());
      function identity(x) {
        return x;
      }
      function makeReturn(x) {
        return function () {
          return x;
        };
      }
      wrapIndent = -1;
      function wrap(name, func) {
        var inspect;
        if (typeof name !== "string") {
          throw TypeError("Expected name to be a String, got " + __typeof(name));
        }
        if (typeof func !== "function") {
          throw TypeError("Expected func to be a Function, got " + __typeof(func));
        }
        inspect = require("util").inspect;
        return function (parser, index) {
          var indentText, newPos, pos, result;
          ++wrapIndent;
          indentText = stringRepeat(" ", wrapIndent);
          try {
            pos = parser.getPosition(index);
            console.log(__strnum(indentText) + name + ": begin at " + __strnum(pos.line) + ":" + __strnum(pos.column) + ": " + __strnum(inspect(parser.source.substring(index, +index + 20))));
            try {
              result = func(parser, index);
              if (result) {
                newPos = parser.getPosition(result.index);
                console.log(__strnum(indentText) + name + ": done  at " + __strnum(pos.line) + ":" + __strnum(pos.column) + " -> " + __strnum(newPos.line) + ":" + __strnum(newPos.column) + ", " + __strnum(inspect(result.value)));
              } else {
                console.log(__strnum(indentText) + name + ": fail  at " + __strnum(pos.line) + ":" + __strnum(pos.column));
              }
              return result;
            } catch (e) {
              console.log(__strnum(indentText) + name + ": ERROR " + __strnum(pos.line) + ":" + __strnum(pos.column) + " !!! " + String(e));
              throw e;
            }
          } finally {
            --wrapIndent;
          }
        };
      }
      fromCharCode = (function () {
        var f;
        f = String.fromCharCode;
        return function (charCode) {
          if (charCode > 65535) {
            return "" + f((charCode - 65536 >> 10) + 55296) + f((charCode - 65536) % 1024 + 56320);
          } else {
            return f(charCode);
          }
        };
      }());
      function processCharCodes(codes, array, start) {
        var _i, _len, code;
        if (!__isArray(codes)) {
          throw TypeError("Expected codes to be an Array, got " + __typeof(codes));
        }
        if (array == null) {
          array = [];
        }
        if (start == null) {
          start = 0;
        }
        for (_len = codes.length, _i = __int(start), _i < 0 && (_i += _len); _i < _len; ++_i) {
          code = codes[_i];
          array.push(fromCharCode(code));
        }
        return array;
      }
      function codesToString(codes) {
        if (!__isArray(codes)) {
          throw TypeError("Expected codes to be an Array, got " + __typeof(codes));
        }
        return processCharCodes(codes).join("");
      }
      makeAlterStack = __genericFunc(1, function (T) {
        var _instanceof_T;
        _instanceof_T = __getInstanceof(T);
        return function (name, value) {
          if (typeof name !== "string") {
            throw TypeError("Expected name to be a String, got " + __typeof(name));
          }
          if (!_instanceof_T(value)) {
            throw TypeError("Expected value to be a " + __name(T) + ", got " + __typeof(value));
          }
          return function (rule) {
            if (typeof rule !== "function") {
              throw TypeError("Expected rule to be a Function, got " + __typeof(rule));
            }
            return function (parser, index) {
              var stack;
              stack = parser[name];
              stack.push(value);
              try {
                return rule(parser, index);
              } finally {
                stack.pop();
              }
            };
          };
        };
      });
      function charsToFakeSet(array) {
        var _arr, _end, _i, _len, c, item, obj;
        obj = __create(null);
        for (_arr = __toArray(array), _i = 0, _len = _arr.length; _i < _len; ++_i) {
          item = _arr[_i];
          if (typeof item === "number") {
            obj[item] = true;
          } else {
            for (c = __num(item[0]), _end = __num(item[1]); c <= _end; ++c) {
              obj[c] = true;
            }
          }
        }
        return obj;
      }
      function stackWrap(func) {
        if (typeof func !== "function") {
          throw TypeError("Expected func to be a Function, got " + __typeof(func));
        }
        func.stack = Error().stack;
        return func;
      }
      function character(name, expected) {
        if (typeof name !== "string") {
          throw TypeError("Expected name to be a String, got " + __typeof(name));
        }
        if (typeof expected !== "number") {
          throw TypeError("Expected expected to be a Number, got " + __typeof(expected));
        }
        return stackWrap(function (parser, index) {
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          if (parser.source.charCodeAt(index) === expected) {
            return Box(index + 1, expected);
          } else {
            return parser.fail(name, index);
          }
        });
      }
      function characters(name, expected) {
        if (typeof name !== "string") {
          throw TypeError("Expected name to be a String, got " + __typeof(name));
        }
        if (typeof expected !== "object" || expected === null) {
          throw TypeError("Expected expected to be an Object, got " + __typeof(expected));
        }
        return stackWrap(function (parser, index) {
          var c;
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          c = parser.source.charCodeAt(index);
          if (expected[c]) {
            return Box(index + 1, c);
          } else {
            return parser.fail(name, index);
          }
        });
      }
      mutate = __curry(2, function (mutator, rule) {
        if (typeof rule !== "function") {
          throw TypeError("Expected rule to be a Function, got " + __typeof(rule));
        }
        if (arguments.length > 2) {
          throw Error("Expected only two arguments");
        }
        if (mutator === identity) {
          return rule;
        }
        if (typeof mutator !== "function") {
          mutator = makeReturn(mutator);
        }
        function f(parser, index) {
          var result;
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          result = rule(parser, index);
          if (result) {
            if (!(result instanceof Box)) {
              throw TypeError("Expected result to be a Box, got " + __typeof(result));
            }
            return Box(result.index, mutator(result.value, parser, index, result.index));
          }
        }
        f.rule = rule;
        f.mutator = mutator;
        return stackWrap(f);
      });
      function bool(rule) {
        if (typeof rule !== "function") {
          throw TypeError("Expected rule to be a Function, got " + __typeof(rule));
        }
        if (arguments.length > 1) {
          throw Error("Expected only two arguments");
        }
        if (typeof rule.mutator === "function" && typeof rule.rule === "function") {
          return bool(rule.rule);
        } else {
          return mutate(
            function (x) {
              return !!x;
            },
            rule
          );
        }
      }
      multiple = __genericFunc(1, function (T) {
        var _instanceof_T;
        _instanceof_T = __getInstanceof(T);
        return function (rule, minimum, maximum, ignoreValue) {
          var mutator;
          if (typeof rule !== "function") {
            throw TypeError("Expected rule to be a Function, got " + __typeof(rule));
          }
          if (minimum == null) {
            minimum = 0;
          } else if (typeof minimum !== "number") {
            throw TypeError("Expected minimum to be a Number, got " + __typeof(minimum));
          }
          if (maximum == null) {
            maximum = 1/0;
          } else if (typeof maximum !== "number") {
            throw TypeError("Expected maximum to be a Number, got " + __typeof(maximum));
          }
          if (ignoreValue == null) {
            ignoreValue = false;
          } else if (typeof ignoreValue !== "boolean") {
            throw TypeError("Expected ignoreValue to be a Boolean, got " + __typeof(ignoreValue));
          }
          if (arguments.length > 5) {
            throw Error("Expected only five arguments");
          }
          if (minimum % 1 !== 0 || minimum < 0) {
            throw RangeError("Expected minimum to be a non-negative integer, got " + minimum);
          }
          if (maximum !== 1/0 && maximum % 1 !== 0 || maximum < minimum) {
            throw RangeError("Expected maximum to be Infinity or an integer of at least " + minimum + ", got " + maximum);
          }
          mutator = identity;
          if (typeof rule.mutator === "function" && typeof rule.rule === "function" && false) {
            mutator = rule.mutator;
            rule = rule.rule;
          }
          if (ignoreValue) {
            return stackWrap(function (parser, index) {
              var count, item, newIndex;
              if (typeof index !== "number") {
                throw TypeError("Expected index to be a Number, got " + __typeof(index));
              }
              count = 0;
              while (count < maximum) {
                item = rule(parser, index);
                if (!item) {
                  if (count < minimum) {
                    return;
                  } else {
                    break;
                  }
                }
                if (!(item instanceof Box)) {
                  throw TypeError("Expected item to be a Box, got " + __typeof(item));
                }
                if (!_instanceof_T(item.value)) {
                  throw TypeError("Expected item.value to be a " + __name(T) + ", got " + __typeof(item.value));
                }
                ++count;
                newIndex = item.index;
                if (newIndex === index) {
                  throw Error("Infinite loop detected");
                } else {
                  index = newIndex;
                }
              }
              return Box(index, count);
            });
          } else if (mutator === identity) {
            return stackWrap(function (parser, index) {
              var count, item, newIndex, result;
              if (typeof index !== "number") {
                throw TypeError("Expected index to be a Number, got " + __typeof(index));
              }
              result = [];
              count = 0;
              while (count < maximum) {
                item = rule(parser, index);
                if (!item) {
                  if (count < minimum) {
                    return;
                  } else {
                    break;
                  }
                }
                if (!(item instanceof Box)) {
                  throw TypeError("Expected item to be a Box, got " + __typeof(item));
                }
                if (!_instanceof_T(item.value)) {
                  throw TypeError("Expected item.value to be a " + __name(T) + ", got " + __typeof(item.value));
                }
                result[count] = item.value;
                ++count;
                newIndex = item.index;
                if (newIndex === index) {
                  throw Error("Infinite loop detected");
                } else {
                  index = newIndex;
                }
              }
              return Box(index, result);
            });
          } else {
            return stackWrap(mutate(
              function (items, parser, index) {
                var _arr, _arr2, _i, _len, item;
                for (_arr = [], _arr2 = __toArray(items), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                  item = _arr2[_i];
                  _arr.push(mutator(item.value, parser, item.startIndex, item.endIndex));
                }
                return _arr;
              },
              function (parser, index) {
                var count, item, newIndex, result;
                if (typeof index !== "number") {
                  throw TypeError("Expected index to be a Number, got " + __typeof(index));
                }
                result = [];
                count = 0;
                while (count < maximum) {
                  item = rule(parser, index);
                  if (!item) {
                    if (count < minimum) {
                      return;
                    } else {
                      break;
                    }
                  }
                  if (!(item instanceof Box)) {
                    throw TypeError("Expected item to be a Box, got " + __typeof(item));
                  }
                  if (!_instanceof_T(item.value)) {
                    throw TypeError("Expected item.value to be a " + __name(T) + ", got " + __typeof(item.value));
                  }
                  newIndex = item.index;
                  result[count] = { startIndex: index, endIndex: newIndex, value: item.value };
                  if (newIndex === index) {
                    throw Error("Infinite loop detected");
                  } else {
                    index = newIndex;
                  }
                  ++count;
                }
                return Box(index, result);
              }
            ));
          }
        };
      });
      zeroOrMore = __genericFunc(1, function (T) {
        return function (rule, ignoreValue) {
          return multiple.generic(T)(rule, 0, 1/0, ignoreValue);
        };
      });
      oneOrMore = __genericFunc(1, function (T) {
        return function (rule, ignoreValue) {
          return multiple.generic(T)(rule, 1, 1/0, ignoreValue);
        };
      });
      function maybe(rule, defaultValue) {
        var MISSING, mutator, subrule;
        if (typeof rule !== "function") {
          throw TypeError("Expected rule to be a Function, got " + __typeof(rule));
        }
        if (arguments.length > 2) {
          throw Error("Expected only two arguments");
        }
        MISSING = {};
        if (typeof rule.mutator === "function" && typeof rule.rule === "function" && false) {
          subrule = rule.rule;
          mutator = rule.mutator;
          return mutate(
            typeof defaultValue === "function"
              ? function (value, parser, startIndex, endIndex) {
                if (value === MISSING) {
                  return defaultValue(parser, startIndex);
                } else {
                  return mutator(value, parser, startIndex, endIndex);
                }
              }
              : function (value, parser, startIndex, endIndex) {
                if (value === MISSING) {
                  return defaultValue;
                } else {
                  return mutator(value, parser, startIndex, endIndex);
                }
              },
            stackWrap(function (parser, index) {
              if (typeof index !== "number") {
                throw TypeError("Expected index to be a Number, got " + __typeof(index));
              }
              return subrule(parser, index) || Box(index, MISSING);
            })
          );
        } else if (typeof defaultValue === "function") {
          return mutate(
            function (value, parser, startIndex, endIndex) {
              if (value === MISSING) {
                return defaultValue(parser, startIndex);
              } else {
                return value;
              }
            },
            stackWrap(function (parser, index) {
              if (typeof index !== "number") {
                throw TypeError("Expected index to be a Number, got " + __typeof(index));
              }
              return rule(parser, index) || Box(index, MISSING);
            })
          );
        } else {
          return stackWrap(function (parser, index) {
            if (typeof index !== "number") {
              throw TypeError("Expected index to be a Number, got " + __typeof(index));
            }
            return rule(parser, index) || Box(index, defaultValue);
          });
        }
      }
      oneOf = __genericFunc(1, function (T) {
        var _instanceof_T;
        _instanceof_T = __getInstanceof(T);
        return function () {
          var _arr, _i, _i2, _i3, _len, _len2, expandedRules, func, rule, rules,
              subrule;
          rules = __slice.call(arguments);
          if (!__isArray(rules)) {
            throw TypeError("Expected rules to be an Array, got " + __typeof(rules));
          } else {
            for (_i = rules.length; _i--; ) {
              if (typeof rules[_i] !== "function") {
                throw TypeError("Expected " + ("rules[" + _i + "]") + " to be a Function, got " + __typeof(rules[_i]));
              }
            }
          }
          switch (rules.length) {
          case 0: throw Error("Expected rules to be non-empty");
          case 1: return rules[0];
          default:
            expandedRules = [];
            for (_i2 = 0, _len = rules.length; _i2 < _len; ++_i2) {
              rule = rules[_i2];
              if (rule.oneOf) {
                for (_arr = __toArray(rule.oneOf), _i3 = 0, _len2 = _arr.length; _i3 < _len2; ++_i3) {
                  subrule = _arr[_i3];
                  expandedRules.push(subrule);
                }
              } else {
                expandedRules.push(rule);
              }
            }
            func = function (parser, index) {
              var _len, i, result, rule;
              if (typeof index !== "number") {
                throw TypeError("Expected index to be a Number, got " + __typeof(index));
              }
              for (i = 0, _len = expandedRules.length; i < _len; ++i) {
                rule = expandedRules[i];
                result = rule(parser, index);
                if (result) {
                  if (!(result instanceof Box)) {
                    throw TypeError("Expected rules[" + i + "] to return a Box, got " + __typeof(result));
                  }
                  if (!_instanceof_T(result.value)) {
                    throw TypeError("Expected rules[" + i + "]'s return value to be a " + __name(T) + ", got " + __typeof(result.value));
                  }
                  return result;
                }
              }
            };
            func.oneOf = expandedRules;
            return stackWrap(func);
          }
        };
      });
      zeroOrMoreOf = __genericFunc(1, function (T) {
        return function () {
          var rules;
          rules = __slice.call(arguments);
          return zeroOrMore.generic(T)(oneOf.generic(T).apply(void 0, __toArray(rules)));
        };
      });
      oneOrMoreOf = __genericFunc(1, function (T) {
        return function () {
          var rules;
          rules = __slice.call(arguments);
          return oneOrMore.generic(T)(oneOf.generic(T).apply(void 0, __toArray(rules)));
        };
      });
      function check(rule) {
        if (typeof rule !== "function") {
          throw TypeError("Expected rule to be a Function, got " + __typeof(rule));
        }
        if (typeof rule.mutator === "function" && typeof rule.rule === "function" && false) {
          rule = rule.rule;
        }
        return function (parser, index) {
          var result;
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          result = rule(parser, index);
          if (result) {
            if (!(result instanceof Box)) {
              throw TypeError("Expected result to be a Box, got " + __typeof(result));
            }
            return Box(index);
          }
        };
      }
      SHORT_CIRCUIT = {};
      sequential = __genericFunc(1, function (T) {
        var _instanceof_T;
        _instanceof_T = __getInstanceof(T);
        return function () {
          var _len, hasMutations, hasOther, i, item, items, key, keys, mapping,
              mutations, mutator, rule, rules, shortCircuitIndex, thisIndex;
          items = __slice.call(arguments);
          if (items.length === 0) {
            throw Error("Expected items to be non-empty");
          }
          if (items.length === 1) {
            if (__isArray(items[0])) {
              if (items[0][0] === "this") {
                return items[0][1];
              }
            } else if (typeof items[0] === "function") {
              rule = items[0];
              return function (parser, index) {
                var item;
                if (typeof index !== "number") {
                  throw TypeError("Expected index to be a Number, got " + __typeof(index));
                }
                item = rule(parser, index);
                if (!item) {
                  return;
                }
                if (!(item instanceof Box)) {
                  throw TypeError("Expected item to be a Box, got " + __typeof(item));
                }
                return Box(item.index);
              };
            }
          }
          rules = [];
          mapping = [];
          keys = [];
          mutations = [];
          thisIndex = -1;
          hasOther = false;
          shortCircuitIndex = 1/0;
          hasMutations = false;
          for (i = 0, _len = items.length; i < _len; ++i) {
            item = items[i];
            key = void 0;
            rule = void 0;
            if (__isArray(item)) {
              if (item.length !== 2) {
                throw Error("Found an array with " + __strnum(item.length) + " length at index #" + i);
              }
              if (typeof item[0] !== "string") {
                throw TypeError("Array in index #" + i + " has an improper key: " + __typeof(item[0]));
              }
              if (typeof item[1] !== "function") {
                throw TypeError("Array in index #" + i + " has an improper rule: " + __typeof(item[1]));
              }
              key = item[0];
              if (__in(key, keys)) {
                throw Error("Can only have one " + __str(JSON.stringify(key)) + " key in sequential");
              }
              keys.push(key);
              rule = item[1];
              if (key === "this") {
                thisIndex = rules.length;
              } else {
                hasOther = true;
              }
            } else if (typeof item === "function") {
              rule = item;
            } else if (item === SHORT_CIRCUIT) {
              if (shortCircuitIndex !== 1/0) {
                throw Error("Can only have one SHORT_CIRCUIT per sequential");
              }
              shortCircuitIndex = i;
              continue;
            } else {
              throw TypeError("Found a non-array, non-function in index #" + i + ": " + __typeof(item));
            }
            if (key && typeof rule.mutator === "function" && typeof rule.rule === "function" && false) {
              hasMutations = true;
              mutations.push(rule.mutator);
              rules.push(rule.rule);
            } else {
              mutations.push(null);
              rules.push(rule);
            }
            mapping.push(key);
          }
          if (thisIndex !== -1) {
            if (hasOther) {
              throw Error("Cannot specify both the 'this' key and another key");
            }
            if (!hasMutations) {
              return stackWrap(function (parser, index) {
                var _len, i, item, result, rule;
                if (typeof index !== "number") {
                  throw TypeError("Expected index to be a Number, got " + __typeof(index));
                }
                for (i = 0, _len = rules.length; i < _len; ++i) {
                  rule = rules[i];
                  item = rule(parser, index);
                  if (!item) {
                    if (i < shortCircuitIndex) {
                      return;
                    } else {
                      throw SHORT_CIRCUIT;
                    }
                  }
                  if (!(item instanceof Box)) {
                    throw TypeError("Expected item to be a Box, got " + __typeof(item));
                  }
                  index = item.index;
                  if (i === thisIndex) {
                    result = item.value;
                  }
                }
                if (!_instanceof_T(result)) {
                  throw TypeError("Expected result to be a " + __name(T) + ", got " + __typeof(result));
                }
                return Box(index, result);
              });
            } else {
              mutator = mutations[thisIndex];
              return stackWrap(mutate(
                function (item, parser, index) {
                  return mutator(item.value, parser, item.startIndex, item.endIndex);
                },
                function (parser, index) {
                  var _len, i, item, result, rule, valueIndex;
                  if (typeof index !== "number") {
                    throw TypeError("Expected index to be a Number, got " + __typeof(index));
                  }
                  valueIndex = 0;
                  for (i = 0, _len = rules.length; i < _len; ++i) {
                    rule = rules[i];
                    item = rule(parser, index);
                    if (!item) {
                      if (i < shortCircuitIndex) {
                        return;
                      } else {
                        throw SHORT_CIRCUIT;
                      }
                    }
                    if (!(item instanceof Box)) {
                      throw TypeError("Expected item to be a Box, got " + __typeof(item));
                    }
                    if (i === thisIndex) {
                      result = { value: item.value, startIndex: index, endIndex: item.index };
                    }
                    index = item.index;
                  }
                  if (!_instanceof_T(result)) {
                    throw TypeError("Expected result to be a " + __name(T) + ", got " + __typeof(result));
                  }
                  return Box(index, result);
                }
              ));
            }
          } else if (hasOther) {
            if (hasMutations) {
              return stackWrap(mutate(
                function (value, parser, index) {
                  var _len, i, item, key, mutator, result;
                  result = {};
                  for (i = 0, _len = keys.length; i < _len; ++i) {
                    key = keys[i];
                    if (key) {
                      item = value[key];
                      mutator = mutations[i];
                      if (mutator) {
                        result[key] = mutator(item.value, parser, item.startIndex, item.endIndex);
                      } else {
                        result[key] = item.value;
                      }
                    }
                  }
                  return result;
                },
                function (parser, index) {
                  var _len, i, indexes, item, key, result, rule;
                  if (typeof index !== "number") {
                    throw TypeError("Expected index to be a Number, got " + __typeof(index));
                  }
                  result = {};
                  indexes = {};
                  for (i = 0, _len = rules.length; i < _len; ++i) {
                    rule = rules[i];
                    item = rule(parser, index);
                    if (!item) {
                      if (i < shortCircuitIndex) {
                        return;
                      } else {
                        throw SHORT_CIRCUIT;
                      }
                    }
                    if (!(item instanceof Box)) {
                      throw TypeError("Expected item to be a Box, got " + __typeof(item));
                    }
                    key = mapping[i];
                    if (key) {
                      result[key] = { value: item.value, startIndex: index, endIndex: item.index };
                    }
                    index = item.index;
                  }
                  return Box(index, result);
                }
              ));
            } else {
              return stackWrap(function (parser, index) {
                var i, item, key, length, rule, value;
                if (typeof index !== "number") {
                  throw TypeError("Expected index to be a Number, got " + __typeof(index));
                }
                value = {};
                i = 0;
                length = rules.length;
                for (; i < length; ++i) {
                  rule = rules[i];
                  item = rule(parser, index);
                  if (!item) {
                    if (i < shortCircuitIndex) {
                      return;
                    } else {
                      throw SHORT_CIRCUIT;
                    }
                  }
                  if (!(item instanceof Box)) {
                    throw TypeError("Expected item to be a Box, got " + __typeof(item));
                  }
                  index = item.index;
                  key = mapping[i];
                  if (key) {
                    value[key] = item.value;
                  }
                }
                return Box(index, value);
              });
            }
          } else {
            if (hasMutations) {
              throw Error("Cannot use a mutator on a sequential without keys");
            }
            return stackWrap(function (parser, index) {
              var _len, i, item, rule;
              if (typeof index !== "number") {
                throw TypeError("Expected index to be a Number, got " + __typeof(index));
              }
              for (i = 0, _len = rules.length; i < _len; ++i) {
                rule = rules[i];
                item = rule(parser, index);
                if (!item) {
                  if (i < shortCircuitIndex) {
                    return;
                  } else {
                    throw SHORT_CIRCUIT;
                  }
                }
                if (!(item instanceof Box)) {
                  throw TypeError("Expected item to be a Box, got " + __typeof(item));
                }
                index = item.index;
              }
              return Box(index);
            });
          }
        };
      });
      cons = __genericFunc(1, function (T) {
        var _instanceof_T;
        _instanceof_T = __getInstanceof(T);
        return function (headRule, tailRule) {
          if (typeof headRule !== "function") {
            throw TypeError("Expected headRule to be a Function, got " + __typeof(headRule));
          }
          if (typeof tailRule !== "function") {
            throw TypeError("Expected tailRule to be a Function, got " + __typeof(tailRule));
          }
          if (arguments.length > 2) {
            throw Error("Expected only two arguments");
          }
          return stackWrap(function (parser, index) {
            var _arr, head, i, item, tail;
            if (typeof index !== "number") {
              throw TypeError("Expected index to be a Number, got " + __typeof(index));
            }
            head = headRule(parser, index);
            if (!head) {
              return;
            }
            if (!(head instanceof Box)) {
              throw TypeError("Expected head to be a Box, got " + __typeof(head));
            } else if (!_instanceof_T(head.value)) {
              throw TypeError("Expected head.value to be a " + __name(T) + ", got " + __typeof(head.value));
            }
            tail = tailRule(parser, head.index);
            if (!tail) {
              return;
            }
            if (!(tail instanceof Box)) {
              throw TypeError("Expected tail to be a Box, got " + __typeof(tail));
            }
            if (!__isArray(tail.value)) {
              throw TypeError("Expected tail.value to be a Box, got " + __typeof(tail.value));
            }
            for (_arr = __toArray(tail.value), i = _arr.length; i--; ) {
              item = _arr[i];
              if (!_instanceof_T(item)) {
                throw TypeError("Expected tail.value[" + i + "] to be a " + __name(T) + ", got " + __typeof(item));
              }
            }
            return Box(tail.index, [head.value].concat(tail.value));
          });
        };
      });
      concat = __genericFunc(1, function (T) {
        var _instanceof_T;
        _instanceof_T = __getInstanceof(T);
        return function (leftRule, rightRule) {
          if (typeof leftRule !== "function") {
            throw TypeError("Expected leftRule to be a Function, got " + __typeof(leftRule));
          }
          if (typeof rightRule !== "function") {
            throw TypeError("Expected rightRule to be a Function, got " + __typeof(rightRule));
          }
          if (arguments.length > 2) {
            throw Error("Expected only two arguments");
          }
          return stackWrap(function (parser, index) {
            var _arr, i, item, left, right;
            if (typeof index !== "number") {
              throw TypeError("Expected index to be a Number, got " + __typeof(index));
            }
            left = leftRule(parser, index);
            if (!left) {
              return;
            }
            if (!(left instanceof Box)) {
              throw TypeError("Expected left to be a Box, got " + __typeof(left));
            }
            if (!__isArray(left.value)) {
              throw TypeError("Expected left.value to be a Box, got " + __typeof(left.value));
            }
            for (_arr = __toArray(left.value), i = _arr.length; i--; ) {
              item = _arr[i];
              if (!_instanceof_T(item)) {
                throw TypeError("Expected left.value[" + i + "] to be a " + __name(T) + ", got " + __typeof(item));
              }
            }
            right = rightRule(parser, left.index);
            if (!right) {
              return;
            }
            if (!(right instanceof Box)) {
              throw TypeError("Expected right to be a Box, got " + __typeof(right));
            }
            if (!__isArray(right.value)) {
              throw TypeError("Expected right.value to be a Box, got " + __typeof(right.value));
            }
            for (_arr = __toArray(right.value), i = _arr.length; i--; ) {
              item = _arr[i];
              if (!_instanceof_T(item)) {
                throw TypeError("Expected right.value[" + i + "] to be a " + __name(T) + ", got " + __typeof(item));
              }
            }
            return Box(right.index, left.value.concat(right.value));
          });
        };
      });
      function nothingRule(parser, index) {
        return Box(index);
      }
      separatedList = __genericFunc(1, function (T) {
        var _instanceof_T;
        _instanceof_T = __getInstanceof(T);
        return function (itemRule, separatorRule, tailRule) {
          if (typeof itemRule !== "function") {
            throw TypeError("Expected itemRule to be a Function, got " + __typeof(itemRule));
          }
          if (separatorRule == null) {
            separatorRule = nothingRule;
          } else if (typeof separatorRule !== "function") {
            throw TypeError("Expected separatorRule to be a Function, got " + __typeof(separatorRule));
          }
          if (tailRule == null) {
            tailRule = itemRule;
          } else if (typeof tailRule !== "function") {
            throw TypeError("Expected tailRule to be a Function, got " + __typeof(tailRule));
          }
          if (arguments.length > 3) {
            throw Error("Expected only three arguments");
          }
          return stackWrap(function (parser, index) {
            var currentIndex, head, i, item, newIndex, result, separator;
            if (typeof index !== "number") {
              throw TypeError("Expected index to be a Number, got " + __typeof(index));
            }
            head = itemRule(parser, index);
            if (!head) {
              return;
            }
            if (!(head instanceof Box)) {
              throw TypeError("Expected head to be a Box, got " + __typeof(head));
            } else if (!_instanceof_T(head.value)) {
              throw TypeError("Expected head.value to be a " + __name(T) + ", got " + __typeof(head.value));
            }
            currentIndex = head.index;
            result = [head.value];
            i = 0;
            for (; ; ++i) {
              separator = separatorRule(parser, currentIndex);
              if (!separator) {
                break;
              }
              if (!(separator instanceof Box)) {
                throw TypeError("Expected separator to be a Box, got " + __typeof(separator));
              }
              item = tailRule(parser, separator.index);
              if (!item) {
                break;
              }
              if (!(item instanceof Box)) {
                throw TypeError("Expected item to be a Box, got " + __typeof(item));
              } else if (!_instanceof_T(item.value)) {
                throw TypeError("Expected head.value to be a " + __name(T) + ", got " + __typeof(item.value));
              }
              newIndex = item.index;
              if (newIndex === currentIndex) {
                throw Error("Infinite loop detected");
              } else {
                currentIndex = newIndex;
              }
              result.push(item.value);
            }
            return Box(currentIndex, result);
          });
        };
      });
      function except(rule) {
        if (typeof rule !== "function") {
          throw TypeError("Expected rule to be a Function, got " + __typeof(rule));
        }
        if (arguments.length > 1) {
          throw Error("Expected only one argument");
        }
        if (typeof rule.mutator === "function" && typeof rule.rule === "function" && false) {
          rule = rule.rule;
        }
        return stackWrap(function (parser, index) {
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          if (!rule(parser, index)) {
            return Box(index);
          }
        });
      }
      function anyExcept(rule) {
        if (typeof rule !== "function") {
          throw TypeError("Expected rule to be a Function, got " + __typeof(rule));
        }
        if (arguments.length > 1) {
          throw Error("Expected only one argument");
        }
        if (typeof rule.mutator === "function" && typeof rule.rule === "function" && false) {
          rule = rule.rule;
        }
        return stackWrap(function (parser, index) {
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          if (!rule(parser, index)) {
            return AnyChar(parser, index);
          }
        });
      }
      SpaceChar = characters("space", charsToFakeSet([
        9,
        11,
        12,
        32,
        160,
        5760,
        6158,
        [8192, 8202],
        8239,
        8287,
        12288,
        65263
      ]));
      SpaceChars = cache(zeroOrMore(SpaceChar, true));
      Zero = character('"0"', 48);
      DecimalDigit = characters("[0-9]", charsToFakeSet([[48, 57]]));
      Period = character('"."', 46);
      ColonChar = character('":"', 58);
      DoubleColonChar = cache((_ref = sequential(ColonChar, ColonChar), mutate("::")(_ref)));
      PipeChar = character('"|"', 124);
      EqualChar = character('"="', 61);
      MinusChar = character('"-"', 45);
      PlusChar = character('"+"', 43);
      PlusOrMinusChar = characters("[+\\-]", charsToFakeSet([43, 45]));
      Letter = characters("letter", charsToFakeSet([
        [65, 90],
        [97, 122],
        170,
        181,
        186,
        [192, 214],
        [216, 246],
        [248, 705],
        [710, 721],
        [736, 740],
        748,
        750,
        [880, 884],
        886,
        887,
        [890, 893],
        902,
        [904, 906],
        908,
        [910, 929],
        [931, 1013],
        [1015, 1153],
        [1162, 1317],
        [1329, 1366],
        1369,
        [1377, 1415],
        [1488, 1514],
        [1520, 1522],
        [1569, 1610],
        1646,
        1647,
        [1649, 1747],
        1749,
        1765,
        1766,
        1774,
        1775,
        [1786, 1788],
        1791,
        1808,
        [1810, 1839],
        [1869, 1957],
        1969,
        [1994, 2026],
        2036,
        2037,
        2042,
        [2048, 2069],
        2074,
        2084,
        2088,
        [2308, 2361],
        2365,
        2384,
        [2392, 2401],
        2417,
        2418,
        [2425, 2431],
        [2437, 2444],
        2447,
        2448,
        [2451, 2472],
        [2474, 2480],
        2482,
        [2486, 2489],
        2493,
        2510,
        2524,
        2525,
        [2527, 2529],
        2544,
        2545,
        [2565, 2570],
        2575,
        2576,
        [2579, 2600],
        [2602, 2608],
        2610,
        2611,
        2613,
        2614,
        2616,
        2617,
        [2649, 2652],
        2654,
        [2674, 2676],
        [2693, 2701],
        [2703, 2705],
        [2707, 2728],
        [2730, 2736],
        2738,
        2739,
        [2741, 2745],
        2749,
        2768,
        2784,
        2785,
        [2821, 2828],
        2831,
        2832,
        [2835, 2856],
        [2858, 2864],
        2866,
        2867,
        [2869, 2873],
        2877,
        2908,
        2909,
        [2911, 2913],
        2929,
        2947,
        [2949, 2954],
        [2958, 2960],
        [2962, 2965],
        2969,
        2970,
        2972,
        2974,
        2975,
        2979,
        2980,
        [2984, 2986],
        [2990, 3001],
        3024,
        [3077, 3084],
        [3086, 3088],
        [3090, 3112],
        [3114, 3123],
        [3125, 3129],
        3133,
        3160,
        3161,
        3168,
        3169,
        [3205, 3212],
        [3214, 3216],
        [3218, 3240],
        [3242, 3251],
        [3253, 3257],
        3261,
        3294,
        3296,
        3297,
        [3333, 3340],
        [3342, 3344],
        [3346, 3368],
        [3370, 3385],
        3389,
        3424,
        3425,
        [3450, 3455],
        [3461, 3478],
        [3482, 3505],
        [3507, 3515],
        3517,
        [3520, 3526],
        [3585, 3632],
        3634,
        3635,
        [3648, 3654],
        3713,
        3714,
        3716,
        3719,
        3720,
        3722,
        3725,
        [3732, 3735],
        [3737, 3743],
        [3745, 3747],
        3749,
        3751,
        3754,
        3755,
        [3757, 3760],
        3762,
        3763,
        3773,
        [3776, 3780],
        3782,
        3804,
        3805,
        3840,
        [3904, 3911],
        [3913, 3948],
        [3976, 3979],
        [4096, 4138],
        4159,
        [4176, 4181],
        [4186, 4189],
        4193,
        4197,
        4198,
        [4206, 4208],
        [4213, 4225],
        4238,
        [4256, 4293],
        [4304, 4346],
        4348,
        [4352, 4680],
        [4682, 4685],
        [4688, 4694],
        4696,
        [4698, 4701],
        [4704, 4744],
        [4746, 4749],
        [4752, 4784],
        [4786, 4789],
        [4792, 4798],
        4800,
        [4802, 4805],
        [4808, 4822],
        [4824, 4880],
        [4882, 4885],
        [4888, 4954],
        [4992, 5007],
        [5024, 5108],
        [5121, 5740],
        [5743, 5759],
        [5761, 5786],
        [5792, 5866],
        [5888, 5900],
        [5902, 5905],
        [5920, 5937],
        [5952, 5969],
        [5984, 5996],
        [5998, 6000],
        [6016, 6067],
        6103,
        6108,
        [6176, 6263],
        [6272, 6312],
        6314,
        [6320, 6389],
        [6400, 6428],
        [6480, 6509],
        [6512, 6516],
        [6528, 6571],
        [6593, 6599],
        [6656, 6678],
        [6688, 6740],
        6823,
        [6917, 6963],
        [6981, 6987],
        [7043, 7072],
        7086,
        7087,
        [7168, 7203],
        [7245, 7247],
        [7258, 7293],
        [7401, 7404],
        [7406, 7409],
        [7424, 7615],
        [7680, 7957],
        [7960, 7965],
        [7968, 8005],
        [8008, 8013],
        [8016, 8023],
        8025,
        8027,
        8029,
        [8031, 8061],
        [8064, 8116],
        [8118, 8124],
        8126,
        [8130, 8132],
        [8134, 8140],
        [8144, 8147],
        [8150, 8155],
        [8160, 8172],
        [8178, 8180],
        [8182, 8188],
        8305,
        8319,
        [8336, 8340],
        8450,
        8455,
        [8458, 8467],
        8469,
        [8473, 8477],
        8484,
        8486,
        8488,
        [8490, 8493],
        [8495, 8505],
        [8508, 8511],
        [8517, 8521],
        8526,
        8579,
        8580,
        [11264, 11310],
        [11312, 11358],
        [11360, 11492],
        [11499, 11502],
        [11520, 11557],
        [11568, 11621],
        11631,
        [11648, 11670],
        [11680, 11686],
        [11688, 11694],
        [11696, 11702],
        [11704, 11710],
        [11712, 11718],
        [11720, 11726],
        [11728, 11734],
        [11736, 11742],
        11823,
        12293,
        12294,
        [12337, 12341],
        12347,
        12348,
        [12353, 12438],
        [12445, 12447],
        [12449, 12538],
        [12540, 12543],
        [12549, 12589],
        [12593, 12686],
        [12704, 12727],
        [12784, 12799],
        [13312, 19893],
        [19968, 40907],
        [40960, 42124],
        [42192, 42237],
        [42240, 42508],
        [42512, 42527],
        42538,
        42539,
        [42560, 42591],
        [42594, 42606],
        [42623, 42647],
        [42656, 42725],
        [42775, 42783],
        [42786, 42888],
        42891,
        42892,
        [43003, 43009],
        [43011, 43013],
        [43015, 43018],
        [43020, 43042],
        [43072, 43123],
        [43138, 43187],
        [43250, 43255],
        43259,
        [43274, 43301],
        [43312, 43334],
        [43360, 43388],
        [43396, 43442],
        43471,
        [43520, 43560],
        [43584, 43586],
        [43588, 43595],
        [43616, 43638],
        43642,
        [43648, 43695],
        43697,
        43701,
        43702,
        [43705, 43709],
        43712,
        43714,
        [43739, 43741],
        [43968, 44002],
        [44032, 55203],
        [55216, 55238],
        [55243, 55291],
        [63744, 64045],
        [64048, 64109],
        [64112, 64217],
        [64256, 64262],
        [64275, 64279],
        64285,
        [64287, 64296],
        [64298, 64310],
        [64312, 64316],
        64318,
        64320,
        64321,
        64323,
        64324,
        [64326, 64433],
        [64467, 64829],
        [64848, 64911],
        [64914, 64967],
        [65008, 65019],
        [65136, 65140],
        [65142, 65262],
        [65264, 65276],
        [65313, 65338],
        [65345, 65370],
        [65382, 65470],
        [65474, 65479],
        [65482, 65487],
        [65490, 65495],
        [65498, 65500]
      ]));
      NumberChar = characters("number", charsToFakeSet([
        [48, 57],
        178,
        179,
        185,
        [188, 190],
        [1632, 1641],
        [1776, 1785],
        [1984, 1993],
        [2406, 2415],
        [2534, 2543],
        [2548, 2553],
        [2662, 2671],
        [2790, 2799],
        [2918, 2927],
        [3046, 3058],
        [3174, 3183],
        [3192, 3198],
        [3302, 3311],
        [3430, 3445],
        [3664, 3673],
        [3792, 3801],
        [3872, 3891],
        [4160, 4169],
        [4240, 4249],
        [4969, 4988],
        [5870, 5872],
        [6112, 6121],
        [6128, 6137],
        [6160, 6169],
        [6470, 6479],
        [6608, 6618],
        [6784, 6793],
        [6800, 6809],
        [6992, 7001],
        [7088, 7097],
        [7232, 7241],
        [7248, 7257],
        8304,
        [8308, 8313],
        [8320, 8329],
        [8528, 8578],
        [8581, 8585],
        [9312, 9371],
        [9450, 9471],
        [10102, 10131],
        11517,
        12295,
        [12321, 12329],
        [12344, 12346],
        [12690, 12693],
        [12832, 12841],
        [12881, 12895],
        [12928, 12937],
        [12977, 12991],
        [42528, 42537],
        [42726, 42735],
        [43056, 43061],
        [43216, 43225],
        [43264, 43273],
        [43472, 43481],
        [43600, 43609],
        [44016, 44025],
        [65296, 65305]
      ]));
      Underscore = character('"_"', 95);
      DollarSignChar = character('"$"', 36);
      AtSignChar = character('"@"', 64);
      HashSignChar = character('"#"', 35);
      PercentSignChar = character('"%"', 37);
      EqualSignChar = character('"="', 61);
      SymbolChar = characters("symbolic", charsToFakeSet([
        33,
        35,
        37,
        38,
        42,
        43,
        45,
        47,
        [60, 63],
        92,
        94,
        96,
        124,
        126,
        127,
        [128, 159],
        [161, 169],
        [171, 177],
        180,
        [182, 184],
        187,
        191,
        215,
        247,
        [706, 709],
        [722, 735],
        [741, 747],
        749,
        [751, 879],
        885,
        888,
        889,
        [894, 901],
        903,
        907,
        909,
        930,
        1014,
        [1154, 1161],
        [1318, 1328],
        1367,
        1368,
        [1370, 1376],
        [1416, 1487],
        [1515, 1519],
        [1523, 1568],
        [1611, 1631],
        [1642, 1645],
        1648,
        1748,
        [1750, 1764],
        [1767, 1773],
        1789,
        1790,
        [1792, 1807],
        1809,
        [1840, 1868],
        [1958, 1968],
        [1970, 1983],
        [2027, 2035],
        [2038, 2041],
        [2043, 2047],
        [2070, 2073],
        [2075, 2083],
        [2085, 2087],
        [2089, 2307],
        [2362, 2364],
        [2366, 2383],
        [2385, 2391],
        [2402, 2405],
        2416,
        [2419, 2424],
        [2432, 2436],
        2445,
        2446,
        2449,
        2450,
        2473,
        2481,
        [2483, 2485],
        [2490, 2492],
        [2494, 2509],
        [2511, 2523],
        2526,
        [2530, 2533],
        2546,
        2547,
        [2554, 2564],
        [2571, 2574],
        2577,
        2578,
        2601,
        2609,
        2612,
        2615,
        [2618, 2648],
        2653,
        [2655, 2661],
        2672,
        2673,
        [2677, 2692],
        2702,
        2706,
        2729,
        2737,
        2740,
        [2746, 2748],
        [2750, 2767],
        [2769, 2783],
        [2786, 2789],
        [2800, 2820],
        2829,
        2830,
        2833,
        2834,
        2857,
        2865,
        2868,
        [2874, 2876],
        [2878, 2907],
        2910,
        [2914, 2917],
        2928,
        [2930, 2946],
        2948,
        [2955, 2957],
        2961,
        [2966, 2968],
        2971,
        2973,
        [2976, 2978],
        [2981, 2983],
        [2987, 2989],
        [3002, 3023],
        [3025, 3045],
        [3059, 3076],
        3085,
        3089,
        3113,
        3124,
        [3130, 3132],
        [3134, 3159],
        [3162, 3167],
        [3170, 3173],
        [3184, 3191],
        [3199, 3204],
        3213,
        3217,
        3241,
        3252,
        [3258, 3260],
        [3262, 3293],
        3295,
        [3298, 3301],
        [3312, 3332],
        3341,
        3345,
        3369,
        [3386, 3388],
        [3390, 3423],
        [3426, 3429],
        [3446, 3449],
        [3456, 3460],
        [3479, 3481],
        3506,
        3516,
        3518,
        3519,
        [3527, 3584],
        3633,
        [3636, 3647],
        [3655, 3663],
        [3674, 3712],
        3715,
        3717,
        3718,
        3721,
        3723,
        3724,
        [3726, 3731],
        3736,
        3744,
        3748,
        3750,
        3752,
        3753,
        3756,
        3761,
        [3764, 3772],
        3774,
        3775,
        3781,
        [3783, 3791],
        3802,
        3803,
        [3806, 3839],
        [3841, 3871],
        [3892, 3903],
        3912,
        [3949, 3975],
        [3980, 4095],
        [4139, 4158],
        [4170, 4175],
        [4182, 4185],
        [4190, 4192],
        [4194, 4196],
        [4199, 4205],
        [4209, 4212],
        [4226, 4237],
        4239,
        [4250, 4255],
        [4294, 4303],
        4347,
        [4349, 4351],
        4681,
        4686,
        4687,
        4695,
        4697,
        4702,
        4703,
        4745,
        4750,
        4751,
        4785,
        4790,
        4791,
        4799,
        4801,
        4806,
        4807,
        4823,
        4881,
        4886,
        4887,
        [4955, 4968],
        [4989, 4991],
        [5008, 5023],
        [5109, 5120],
        5741,
        5742,
        [5787, 5791],
        [5867, 5869],
        [5873, 5887],
        5901,
        [5906, 5919],
        [5938, 5951],
        [5970, 5983],
        5997,
        [6001, 6015],
        [6068, 6102],
        [6104, 6107],
        [6109, 6111],
        [6122, 6127],
        [6138, 6157],
        6159,
        [6170, 6175],
        [6264, 6271],
        6313,
        [6315, 6319],
        [6390, 6399],
        [6429, 6469],
        6510,
        6511,
        [6517, 6527],
        [6572, 6592],
        [6600, 6607],
        [6619, 6655],
        [6679, 6687],
        [6741, 6783],
        [6794, 6799],
        [6810, 6822],
        [6824, 6916],
        [6964, 6980],
        [6988, 6991],
        [7002, 7042],
        [7073, 7085],
        [7098, 7167],
        [7204, 7231],
        [7242, 7244],
        [7294, 7400],
        7405,
        [7410, 7423],
        [7616, 7679],
        7958,
        7959,
        7966,
        7967,
        8006,
        8007,
        8014,
        8015,
        8024,
        8026,
        8028,
        8030,
        8062,
        8063,
        8117,
        8125,
        [8127, 8129],
        8133,
        [8141, 8143],
        8148,
        8149,
        [8156, 8159],
        [8173, 8177],
        8181,
        [8189, 8191],
        [8203, 8231],
        [8234, 8238],
        [8240, 8286],
        [8288, 8303],
        8306,
        8307,
        [8314, 8318],
        [8330, 8335],
        [8341, 8449],
        [8451, 8454],
        8456,
        8457,
        8468,
        [8470, 8472],
        [8478, 8483],
        8485,
        8487,
        8489,
        8494,
        8506,
        8507,
        [8512, 8516],
        [8522, 8525],
        8527,
        [8586, 9311],
        [9372, 9449],
        [9472, 10101],
        [10132, 11263],
        11311,
        11359,
        [11493, 11498],
        [11503, 11516],
        11518,
        11519,
        [11558, 11567],
        [11622, 11630],
        [11632, 11647],
        [11671, 11679],
        11687,
        11695,
        11703,
        11711,
        11719,
        11727,
        11735,
        [11743, 11822],
        [11824, 12287],
        [12289, 12292],
        [12296, 12320],
        [12330, 12336],
        12342,
        12343,
        [12349, 12352],
        [12439, 12444],
        12448,
        12539,
        [12544, 12548],
        [12590, 12592],
        [12687, 12689],
        [12694, 12703],
        [12728, 12783],
        [12800, 12831],
        [12842, 12880],
        [12896, 12927],
        [12938, 12976],
        [12992, 13311],
        [19894, 19967],
        [40908, 40959],
        [42125, 42191],
        42238,
        42239,
        [42509, 42511],
        [42540, 42559],
        42592,
        42593,
        [42607, 42622],
        [42648, 42655],
        [42736, 42774],
        42784,
        42785,
        42889,
        42890,
        [42893, 43002],
        43010,
        43014,
        43019,
        [43043, 43055],
        [43062, 43071],
        [43124, 43137],
        [43188, 43215],
        [43226, 43249],
        [43256, 43258],
        [43260, 43263],
        [43302, 43311],
        [43335, 43359],
        [43389, 43395],
        [43443, 43470],
        [43482, 43519],
        [43561, 43583],
        43587,
        [43596, 43599],
        [43610, 43615],
        [43639, 43641],
        [43643, 43647],
        43696,
        [43698, 43700],
        43703,
        43704,
        43710,
        43711,
        43713,
        [43715, 43738],
        [43742, 43967],
        [44003, 44015],
        [44026, 44031],
        [55204, 55215],
        [55239, 55242],
        [55292, 63743],
        64046,
        64047,
        64110,
        64111,
        [64218, 64255],
        [64263, 64274],
        [64280, 64284],
        64286,
        64297,
        64311,
        64317,
        64319,
        64322,
        64325,
        [64434, 64466],
        [64830, 64847],
        64912,
        64913,
        [64968, 65007],
        [65020, 65135],
        65141,
        [65277, 65295],
        [65306, 65312],
        [65339, 65344],
        [65371, 65381],
        [65471, 65473],
        65480,
        65481,
        65488,
        65489,
        65496,
        65497,
        [65501, 65535]
      ]));
      DoubleQuote = character("'\"'", 34);
      SingleQuote = character('"\'"', 39);
      TripleDoubleQuote = cache(multiple(DoubleQuote, 3, 3, true));
      TripleSingleQuote = cache(multiple(SingleQuote, 3, 3, true));
      SemicolonChar = character('";"', 59);
      AsterixChar = character('"*"', 42);
      CaretChar = character('"^"', 94);
      OpenSquareBracketChar = character('"["', 91);
      OpenCurlyBraceChar = character('"{"', 123);
      CloseCurlyBraceChar = character('"}"', 125);
      BackslashChar = character('"\\\\"', 92);
      CommaChar = character('","', 44);
      function AnyChar(parser, index) {
        var c, source;
        source = parser.source;
        if (index >= source.length) {
          return parser.fail("any", index);
        } else {
          c = source.charCodeAt(index);
          if (c === 13 && source.charCodeAt(+index + 1) === 10) {
            ++index;
            c = 10;
          }
          return Box(+index + 1, c);
        }
      }
      function Newline(parser, index) {
        var c, source;
        source = parser.source;
        c = source.charCodeAt(index);
        if (c === 13) {
          if (source.charCodeAt(+index + 1) === 10) {
            ++index;
            c = 10;
          }
        } else if (c !== 10 && c !== 8232 && c !== 8233) {
          return;
        }
        return Box(+index + 1, c);
      }
      function Eof(parser, index) {
        if (index >= parser.source.length) {
          return Box(index);
        }
      }
      CheckStop = oneOf(Newline, Eof, function (parser, index) {
        return EmbeddedClose(parser, index) || EmbeddedCloseWrite(parser, index);
      });
      MaybeComment = cache((function () {
        function SingleLineComment(parser, index) {
          var _ref, len, source;
          source = parser.source;
          if (source.charCodeAt(index) === 47 && source.charCodeAt(+index + 1) === 47) {
            len = source.length;
            index -= -2;
            for (; ; ++index) {
              if (index >= len || (_ref = source.charCodeAt(index)) === 13 || _ref === 10 || _ref === 8232 || _ref === 8233) {
                return Box(index);
              }
            }
          }
        }
        function MultiLineComment(parser, index) {
          var len, source, startIndex;
          source = parser.source;
          startIndex = index;
          if (source.charCodeAt(index) === 47 && source.charCodeAt(+index + 1) === 42 && source.charCodeAt(+index + 2) !== 33) {
            len = source.length;
            index -= -2;
            for (; ; ++index) {
              if (index >= len) {
                throw ParserError("Multi-line comment never ends", parser, startIndex);
              }
              if (source.charCodeAt(index) === 42 && source.charCodeAt(+index + 1) === 47) {
                return Space(parser, +index + 2);
              }
            }
          }
        }
        return maybe(oneOf(SingleLineComment, MultiLineComment));
      }()));
      Space = cache(sequential(SpaceChars, MaybeComment));
      function withSpace(rule) {
        if (typeof rule !== "function") {
          throw TypeError("Expected rule to be a Function, got " + __typeof(rule));
        }
        return sequential(Space, ["this", rule]);
      }
      NoSpace = cache(except(SpaceChar));
      EmptyLine = cache(withSpace(Newline));
      EmptyLines = cache(zeroOrMore(EmptyLine, true));
      SomeEmptyLines = cache(oneOrMore(EmptyLine, true));
      EmptyLinesSpace = sequential(EmptyLines, Space);
      NoSpaceNewline = except(EmptyLine);
      OpenParenthesis = cache(withSpace(character('"("', 40)));
      CloseParenthesis = cache(withSpace(character('")"', 41)));
      OpenSquareBracket = cache(withSpace(OpenSquareBracketChar));
      CloseSquareBracket = cache(withSpace(character('"]"', 93)));
      OpenCurlyBrace = cache(withSpace(OpenCurlyBraceChar));
      CloseCurlyBrace = cache(withSpace(CloseCurlyBraceChar));
      EqualSign = withSpace(EqualSignChar);
      PercentSign = cache(withSpace(PercentSignChar));
      DollarSign = cache(withSpace(DollarSignChar));
      Comma = cache(withSpace(CommaChar));
      MaybeComma = cache(maybe(Comma));
      CommaOrNewline = oneOf(
        sequential(
          ["this", Comma],
          EmptyLines
        ),
        SomeEmptyLines
      );
      MaybeCommaOrNewline = cache(maybe(CommaOrNewline));
      _SomeEmptyLinesWithCheckIndent = sequential(SomeEmptyLines, CheckIndent);
      SomeEmptyLinesWithCheckIndent = cache(function (parser, index) {
        if (parser.options.noindent) {
          return EmptyLines(parser, index);
        } else {
          return _SomeEmptyLinesWithCheckIndent(parser, index);
        }
      });
      CommaOrSomeEmptyLinesWithCheckIndent = cache(oneOf(
        sequential(Comma, maybe(SomeEmptyLinesWithCheckIndent)),
        SomeEmptyLinesWithCheckIndent
      ));
      ExclamationPointChar = cache(character('"!"', 33));
      MaybeExclamationPointChar = cache(maybe(ExclamationPointChar));
      MaybeAtSignChar = cache(maybe(AtSignChar));
      Colon = cache(sequential(
        Space,
        ["this", ColonChar],
        except(ColonChar)
      ));
      ColonNewline = cache(sequential(Colon, Space, ["this", Newline]));
      NotColon = cache(except(Colon));
      NotColonUnlessNoIndentAndNewline = cache(function (parser, index) {
        var options;
        options = parser.options;
        if (options.noindent) {
          if (ColonNewline(parser, index)) {
            return Box(index);
          } else if (options.embedded && (ColonEmbeddedClose(parser, index) || ColonEmbeddedCloseWrite(parser, index))) {
            return Box(index);
          }
        }
        return NotColon(parser, index);
      });
      NameStart = cache(oneOf(Letter, Underscore, DollarSignChar));
      NameChar = cache(oneOf(NameStart, NumberChar));
      NamePart = cache(oneOrMore(NameChar));
      Nothing = cache(function (parser, index) {
        return Box(index, parser.Nothing(index));
      });
      Expression = function (parser, index) {
        return Expression(parser, index);
      };
      Statement = function (parser, index) {
        return Statement(parser, index);
      };
      Body = function (parser, index) {
        return Body(parser, index);
      };
      BodyNoEnd = function (parser, index) {
        return BodyNoEnd(parser, index);
      };
      Logic = function (parser, index) {
        return Logic(parser, index);
      };
      function End(parser, index) {
        if (parser.options.noindent) {
          return EndNoIndent(parser, index);
        } else {
          return Box(index);
        }
      }
      _Name = cache((_ref = separatedList(
        cons(NameStart, zeroOrMore(NameChar)),
        MinusChar,
        NamePart
      ), mutate(function (items) {
        var _arr, _i, _len, item, parts;
        parts = processCharCodes(items[0]);
        for (_arr = __toArray(items), _i = 1, _len = _arr.length; _i < _len; ++_i) {
          item = _arr[_i];
          parts.push(fromCharCode(item[0]).toUpperCase());
          processCharCodes(item, parts, 1);
        }
        return parts.join("");
      })(_ref)));
      Name = cache(withSpace(_Name));
      _Symbol = cache((_ref = oneOrMore(SymbolChar), mutate(codesToString)(_ref)));
      Symbol = cache(withSpace(_Symbol));
      ColonEqual = cache(withSpace((_ref = sequential(ColonChar, EqualSignChar), mutate(":=")(_ref))));
      NameOrSymbol = cache(withSpace(oneOf(
        (_ref = withSpace(oneOrMoreOf(_Name, _Symbol)), mutate(function (parts) {
          return parts.join("");
        })(_ref)),
        ColonEqual
      )));
      MacroName = cache(withSpace(sequential(
        ["this", NameOrSymbol],
        NotColonUnlessNoIndentAndNewline
      )));
      MacroNames = separatedList.generic(String)(MacroName, Comma);
      UseMacro = cache(function (parser, index) {
        var m, name, result;
        name = MacroName(parser, index);
        if (!name) {
          return;
        }
        m = parser.getMacroByName(name.value);
        if (!m) {
          return;
        }
        result = m(parser, index);
        if (!result) {
          throw SHORT_CIRCUIT;
        }
        return result;
      });
      function ruleEqual(rule, text) {
        var failureMessage;
        if (typeof rule !== "function") {
          throw TypeError("Expected rule to be a Function, got " + __typeof(rule));
        }
        if (typeof text !== "string") {
          throw TypeError("Expected text to be a String, got " + __typeof(text));
        }
        failureMessage = JSON.stringify(text);
        return function (parser, index) {
          var result;
          result = rule(parser, index);
          if (result && result.value === text) {
            return result;
          } else {
            return parser.fail(failureMessage, index);
          }
        };
      }
      function memoize(func) {
        var cache;
        if (typeof func !== "function") {
          throw TypeError("Expected func to be a Function, got " + __typeof(func));
        }
        cache = __create(null);
        return function (key) {
          if (typeof key !== "string") {
            throw TypeError("Expected key to be a String, got " + __typeof(key));
          }
          if (__owns.call(cache, key)) {
            return cache[key];
          } else {
            return cache[key] = func(key);
          }
        };
      }
      word = memoize(function (text) {
        if (typeof text !== "string") {
          throw TypeError("Expected text to be a String, got " + __typeof(text));
        }
        return ruleEqual(Name, text);
      });
      symbol = memoize(function (text) {
        if (typeof text !== "string") {
          throw TypeError("Expected text to be a String, got " + __typeof(text));
        }
        return ruleEqual(Symbol, text);
      });
      macroName = memoize(function (text) {
        if (typeof text !== "string") {
          throw TypeError("Expected text to be a String, got " + __typeof(text));
        }
        return ruleEqual(MacroName, text);
      });
      wordOrSymbol = memoize(function (text) {
        var _arr, _len, _ref, i, part, parts;
        if (typeof text !== "string") {
          throw TypeError("Expected text to be a String, got " + __typeof(text));
        }
        parts = [Space];
        for (_arr = __toArray(text.split(/([a-z]+)/ig)), i = 0, _len = _arr.length; i < _len; ++i) {
          part = _arr[i];
          if (part) {
            parts.push(ruleEqual(
              i % 2 === 0 ? _Symbol : _Name,
              part
            ));
          }
        }
        _ref = sequential.apply(void 0, __toArray(parts));
        return mutate(text)(_ref);
      });
      INDENTS = (_o = __create(null), _o[9] = 4, _o[32] = 1, _o);
      _ref = zeroOrMore(SpaceChar);
      CountIndent = mutate(function (spaces) {
        var _arr, _i, c, count, indent;
        count = 0;
        for (_arr = __toArray(spaces), _i = _arr.length; _i--; ) {
          c = _arr[_i];
          indent = INDENTS[c];
          if (!indent) {
            throw Error("Unexpected indent char: " + __str(JSON.stringify(c)));
          }
          count += __num(indent);
        }
        return count;
      })(_ref);
      function IndentationRequired(parser, index) {
        if (!parser.options.noindent) {
          return Box(index);
        }
      }
      function CheckIndent(parser, index) {
        var count;
        count = CountIndent(parser, index);
        if (parser.options.noindent || count.value === parser.indent.peek()) {
          return count;
        }
      }
      function Advance(parser, index) {
        var count, countValue, indent;
        if (parser.options.noindent) {
          throw Error("Can't use Advance if in noindent mode");
        }
        count = CountIndent(parser, index);
        countValue = count.value;
        indent = parser.indent;
        if (!__lte(countValue, indent.peek())) {
          indent.push(countValue);
          return Box(index, countValue);
        }
      }
      function MaybeAdvance(parser, index) {
        var count;
        count = CountIndent(parser, index);
        parser.indent.push(count.value);
        return Box(index, count.value);
      }
      function PushFakeIndent(n) {
        if (typeof n !== "number") {
          throw TypeError("Expected n to be a Number, got " + __typeof(n));
        }
        return function (parser, index) {
          var indent;
          indent = parser.indent;
          indent.push(+indent.peek() + n);
          return Box(index, 0);
        };
      }
      function PopIndent(parser, index) {
        var indent;
        indent = parser.indent;
        if (indent.canPop()) {
          indent.pop();
          return Box(index);
        } else {
          throw ParserError("Unexpected dedent", parser, index);
        }
      }
      function retainIndent(rule) {
        if (typeof rule !== "function") {
          throw TypeError("Expected rule to be a Function, got " + __typeof(rule));
        }
        return function (parser, index) {
          var _end, count, i, indent;
          indent = parser.indent;
          count = indent.count();
          try {
            return rule(parser, index);
          } finally {
            for (i = __num(count), _end = __num(indent.count()); i < _end; ++i) {
              indent.pop();
            }
          }
        };
      }
      ThisLiteral = cache((_ref = word("this"), mutate(function (_p, parser, index) {
        return parser.This(index);
      })(_ref)));
      ThisShorthandLiteral = cache((_ref = withSpace(AtSignChar), mutate(function (_p, parser, index) {
        return parser.This(index);
      })(_ref)));
      ArgumentsLiteral = cache((_ref = word("arguments"), mutate(function (_p, parser, index) {
        return parser.Args(index);
      })(_ref)));
      ThisOrShorthandLiteral = cache(oneOf.generic(ThisNode)(ThisLiteral, ThisShorthandLiteral));
      ThisOrShorthandLiteralPeriod = oneOf.generic(ThisNode)(
        sequential(
          ["this", ThisLiteral],
          Period
        ),
        sequential(
          ["this", ThisShorthandLiteral],
          maybe(Period)
        )
      );
      getReservedIdents = (function () {
        var RESERVED_IDENTS, RESERVED_IDENTS_NOINDENT;
        RESERVED_IDENTS = [
          "as",
          "AST",
          "arguments",
          "break",
          "case",
          "catch",
          "class",
          "const",
          "continue",
          "debugger",
          "default",
          "delete",
          "do",
          "else",
          "enum",
          "eval",
          "export",
          "extends",
          "false",
          "finally",
          "for",
          "function",
          "if",
          "import",
          "Infinity",
          "instanceof",
          "in",
          "let",
          "macro",
          "mutable",
          "NaN",
          "new",
          "not",
          "null",
          "package",
          "private",
          "protected",
          "public",
          "return",
          "static",
          "super",
          "switch",
          "then",
          "this",
          "throw",
          "true",
          "try",
          "typeof",
          "undefined",
          "var",
          "void",
          "while",
          "with",
          "yield"
        ];
        RESERVED_IDENTS_NOINDENT = __toArray(RESERVED_IDENTS).concat(["end"]).sort();
        return function (options) {
          if (options && options.noindent) {
            return RESERVED_IDENTS_NOINDENT;
          } else {
            return RESERVED_IDENTS;
          }
        };
      }());
      SpreadToken = cache(withSpace((_ref = sequential(Period, Period, Period), mutate("...")(_ref))));
      MaybeSpreadToken = cache(maybe(SpreadToken));
      SpreadOrExpression = cache((_ref = sequential(
        ["spread", MaybeSpreadToken],
        ["node", Expression]
      ), mutate(function (_p, parser, index) {
        var node, spread;
        spread = _p.spread;
        node = _p.node;
        if (spread === "...") {
          return parser.Spread(index, node);
        } else {
          return node;
        }
      })(_ref)));
      allowSpaceBeforeAccess = makeAlterStack.generic(Boolean)("disallowSpaceBeforeAccess", false);
      ClosedArguments = cache(sequential(
        NoSpace,
        OpenParenthesis,
        Space,
        [
          "this",
          allowSpaceBeforeAccess(concat.generic(Node)(
            maybe(
              sequential(
                [
                  "this",
                  separatedList.generic(Node)(SpreadOrExpression, Comma)
                ],
                MaybeComma
              ),
              function () {
                return [];
              }
            ),
            maybe(
              retainIndent(sequential.generic(Array)(
                SomeEmptyLines,
                MaybeAdvance,
                [
                  "this",
                  maybe(
                    sequential(CheckIndent, [
                      "this",
                      separatedList.generic(Node)(SpreadOrExpression, CommaOrSomeEmptyLinesWithCheckIndent)
                    ]),
                    function () {
                      return [];
                    }
                  )
                ],
                EmptyLines,
                MaybeCommaOrNewline,
                PopIndent
              )),
              function () {
                return [];
              }
            )
          ))
        ],
        CloseParenthesis
      ));
      disallowSpaceBeforeAccess = makeAlterStack.generic(Boolean)("disallowSpaceBeforeAccess", true);
      UnclosedArguments = cache(disallowSpaceBeforeAccess(sequential(
        oneOf(
          sequential(SpaceChar, Space),
          check(Newline)
        ),
        [
          "this",
          concat.generic(Node)(
            separatedList.generic(Node)(SpreadOrExpression, Comma),
            oneOf.generic(Array)(
              sequential(IndentationRequired, Comma, SomeEmptyLines, [
                "this",
                retainIndent(sequential(
                  Advance,
                  CheckIndent,
                  [
                    "this",
                    separatedList.generic(Node)(SpreadOrExpression, CommaOrSomeEmptyLinesWithCheckIndent)
                  ],
                  MaybeComma,
                  PopIndent
                ))
              ]),
              mutate(function () {
                return [];
              })(MaybeComma)
            )
          )
        ]
      )));
      InvocationArguments = cache(oneOf(ClosedArguments, UnclosedArguments));
      Identifier = cache(oneOf(
        (_ref = sequential(
          function (parser, index) {
            if (parser.inAst.peek()) {
              return Box(index);
            }
          },
          DollarSign,
          NoSpace,
          ["this", InvocationArguments]
        ), mutate(function (args, parser, index) {
          return parser.Call(
            index,
            parser.Ident(index, "$"),
            args
          );
        })(_ref)),
        function (parser, index) {
          var name;
          name = Name(parser, index);
          if (!name || __in(name.value, getReservedIdents(parser.options)) || parser.hasMacroOrOperator(name.value || parser.scope.peek().hasConst(name.value))) {
            return parser.fail("identifier", index);
          } else {
            return Box(name.index, parser.Ident(index, name.value));
          }
        }
      ));
      function makeDigitsRule(digit) {
        var _ref;
        if (typeof digit !== "function") {
          throw TypeError("Expected digit to be a Function, got " + __typeof(digit));
        }
        _ref = separatedList(oneOrMore(digit), oneOrMore(Underscore, true));
        return mutate(function (parts) {
          var _arr, _i, _len, part, result;
          result = [];
          for (_arr = __toArray(parts), _i = 0, _len = _arr.length; _i < _len; ++_i) {
            part = _arr[_i];
            processCharCodes(part, result);
          }
          return result.join("");
        })(_ref);
      }
      MaybeUnderscores = cache(zeroOrMore(Underscore, true));
      function parseRadixNumber(integer, fraction, radix, exponent) {
        var _i, _len, c, currentValue, i;
        if (typeof integer !== "string") {
          throw TypeError("Expected integer to be a String, got " + __typeof(integer));
        }
        if (typeof fraction !== "string") {
          throw TypeError("Expected fraction to be a String, got " + __typeof(fraction));
        }
        if (typeof radix !== "number") {
          throw TypeError("Expected radix to be a Number, got " + __typeof(radix));
        }
        if (exponent == null) {
          exponent = 0;
        } else if (typeof exponent !== "number") {
          throw TypeError("Expected exponent to be a Number, got " + __typeof(exponent));
        }
        if (exponent % 1 !== 0) {
          throw RangeError("Expected exponent to be an integer, got " + exponent);
        }
        while (exponent > 0) {
          integer += __strnum(fraction.charAt(0) || "0");
          fraction = fraction.substring(1);
          --exponent;
        }
        while (exponent < 0) {
          fraction = __strnum(integer.slice(-1)) + fraction;
          integer = integer.slice(0, -1);
          ++exponent;
        }
        currentValue = 0;
        for (_i = 0, _len = integer.length; _i < _len; ++_i) {
          c = integer.charAt(_i);
          currentValue = currentValue * radix + parseInt(c, radix);
        }
        if (fraction) {
          for (i = 0, _len = fraction.length; i < _len; ++i) {
            c = fraction.charAt(i);
            currentValue += parseInt(c, radix) / Math.pow(radix, i + 1);
          }
        }
        return currentValue;
      }
      DecimalNumber = cache((function () {
        var _ref, _ref2, DecimalDigits;
        DecimalDigits = makeDigitsRule(DecimalDigit);
        _ref = sequential(
          ["integer", DecimalDigits],
          [
            "fraction",
            maybe(
              sequential(MaybeUnderscores, Period, MaybeUnderscores, ["this", DecimalDigits]),
              ""
            )
          ],
          [
            "exponent",
            maybe(
              (_ref2 = sequential(
                characters("[Ee]", charsToFakeSet([69, 101])),
                ["sign", maybe(PlusOrMinusChar)],
                ["digits", DecimalDigits]
              ), mutate(function (_p) {
                var digits, e, sign;
                e = _p.e;
                sign = _p.sign;
                digits = _p.digits;
                return (sign ? fromCharCode(sign) : "") + __strnum(digits);
              })(_ref2)),
              ""
            )
          ],
          maybe(sequential(Underscore, maybe(NamePart)))
        );
        return mutate(function (_p, parser, index, endIndex) {
          var exponent, fraction, integer, value;
          integer = _p.integer;
          fraction = _p.fraction;
          exponent = _p.exponent;
          value = parseRadixNumber(integer, fraction, 10, exponent ? parseInt(exponent, 10) : 0);
          if (!isFinite(value)) {
            throw ParserError(
              "Unable to parse number " + __strnum(quote(parser.source.substring(index, endIndex))),
              parser,
              index
            );
          }
          return parser.Const(index, value);
        })(_ref);
      }()));
      function makeRadixNumber(radix, separator, digit) {
        var _ref, digits;
        if (typeof radix !== "number") {
          throw TypeError("Expected radix to be a Number, got " + __typeof(radix));
        }
        if (typeof separator !== "function") {
          throw TypeError("Expected separator to be a Function, got " + __typeof(separator));
        }
        if (typeof digit !== "function") {
          throw TypeError("Expected digit to be a Function, got " + __typeof(digit));
        }
        digits = makeDigitsRule(digit);
        _ref = sequential(
          Zero,
          ["separator", separator],
          SHORT_CIRCUIT,
          ["integer", digits],
          [
            "fraction",
            maybe(
              sequential(MaybeUnderscores, Period, MaybeUnderscores, ["this", digits]),
              ""
            )
          ],
          MaybeUnderscores
        );
        return mutate(function (_p, parser, index, endIndex) {
          var fraction, integer, separator, value;
          separator = _p.separator;
          integer = _p.integer;
          fraction = _p.fraction;
          value = parseRadixNumber(integer, fraction, radix);
          if (!isFinite(value)) {
            throw ParserError(
              "Unable to parse number " + __strnum(quote(parser.source.substring(index, endIndex))),
              parser,
              index
            );
          }
          return parser.Const(index, value);
        })(_ref);
      }
      HexDigit = characters("[0-9A-Fa-f]", charsToFakeSet([
        [48, 57],
        [65, 70],
        [97, 102]
      ]));
      HexNumber = cache(makeRadixNumber(
        16,
        characters("[Xx]", charsToFakeSet([88, 120])),
        HexDigit
      ));
      OctalDigit = characters("[0-7]", charsToFakeSet([[48, 55]]));
      OctalNumber = cache(makeRadixNumber(
        8,
        characters("[Oo]", charsToFakeSet([79, 111])),
        HexDigit
      ));
      BinaryDigit = characters("[01]", charsToFakeSet([48, 49]));
      BinaryNumber = cache(makeRadixNumber(
        2,
        characters("[Bb]", charsToFakeSet([66, 98])),
        HexDigit
      ));
      RadixNumber = cache((function () {
        var digitsCache, R, Radix;
        digitsCache = [];
        function getDigitsRule(radix) {
          var _end, _ref, digit, i, letterEnd, name, set;
          if ((_ref = digitsCache[radix]) == null) {
            switch (radix) {
            case 2:
              digit = BinaryDigit;
              break;
            case 8:
              digit = OctalDigit;
              break;
            case 10:
              digit = DecimalDigit;
              break;
            case 16:
              digit = HexDigit;
              break;
            default:
              set = __create(null);
              for (i = 0, _end = __num(radix) > 10 ? __num(radix) : 10; i < _end; ++i) {
                set[i + 48] = true;
              }
              for (i = 0, _end = (__num(radix) > 36 ? __num(radix) : 36) - 10; i < _end; ++i) {
                set[i + 65] = true;
                set[i + 97] = true;
              }
              name = ["[0-"];
              name.push(String.fromCharCode((__num(radix) > 9 ? __num(radix) : 9) + 48));
              if (__num(radix) >= 10) {
                letterEnd = (__num(radix) > 36 ? __num(radix) : 36) - 10;
                name.push("A-");
                name.push(String.fromCharCode(letterEnd + 65));
                name.push("a-");
                name.push(String.fromCharCode(letterEnd + 97));
              }
              name.push("]");
              digit = characters(name.join(""), set);
            }
            return digitsCache[radix] = makeDigitsRule(digit);
          } else {
            return _ref;
          }
        }
        Radix = multiple(DecimalDigit, 1, 2);
        R = characters("[Rr]", charsToFakeSet([82, 114]));
        return function (parser, index) {
          var currentIndex, digitsRule, fraction, integer, period, radix, radixNum,
              radixValue, separator, trailing, value;
          radix = Radix(parser, index);
          if (!radix) {
            return;
          }
          radixValue = codesToString(radix.value);
          separator = R(parser, radix.index);
          if (!separator) {
            return;
          }
          radixNum = parseInt(radixValue, 10);
          if (!isFinite(radixNum)) {
            throw ParserError("Unable to parse radix " + __strnum(quote(radixValue)), parser, index);
          } else if (radixNum < 2) {
            throw ParserError("Radix must be at least 2, got " + radixNum, parser, index);
          } else if (radixNum > 36) {
            throw ParserError("Radix must be at most 36, got " + radixNum, parser, index);
          }
          digitsRule = getDigitsRule(radixNum);
          integer = digitsRule(parser, separator.index);
          if (!integer) {
            parser.fail("integer after radix", separator.index);
            throw SHORT_CIRCUIT;
          }
          currentIndex = MaybeUnderscores(parser, integer.index).index;
          period = Period(parser, currentIndex);
          if (period) {
            fraction = digitsRule(parser, MaybeUnderscores(parser, period.index).index);
            if (fraction) {
              value = parseRadixNumber(integer.value, fraction.value, radixNum);
              currentIndex = fraction.index;
            }
          }
          if (value == null) {
            value = parseRadixNumber(integer.value, "", radixNum);
          }
          if (!isFinite(value)) {
            throw ParserError(
              "Unable to parse number " + __strnum(quote(parser.source.substring(index, currentIndex))),
              parser,
              index
            );
          }
          trailing = MaybeUnderscores(parser, currentIndex);
          return Box(trailing.index, parser.Const(index, value));
        };
      }()));
      NumberLiteral = cache(withSpace(oneOf(
        HexNumber,
        OctalNumber,
        BinaryNumber,
        RadixNumber,
        DecimalNumber
      )));
      IdentifierNameConst = cache(function (parser, index) {
        var name;
        name = Name(parser, index);
        if (name) {
          return Box(name.index, parser.Const(index, name.value));
        }
      });
      IdentifierNameConstOrNumberLiteral = cache(oneOf(IdentifierNameConst, NumberLiteral));
      function makeConstLiteral(name, value) {
        var _ref;
        if (typeof name !== "string") {
          throw TypeError("Expected name to be a String, got " + __typeof(name));
        }
        _ref = word(name);
        return mutate(function (_p, parser, index) {
          return parser.Const(index, value);
        })(_ref);
      }
      _ref = sequential(
        character('"x"', 120),
        SHORT_CIRCUIT,
        [
          "this",
          multiple(HexDigit, 2, 2)
        ]
      );
      HexEscapeSequence = mutate(function (digits) {
        return parseInt(codesToString(digits), 16);
      })(_ref);
      UnicodeEscapeSequence = sequential(
        character('"u"', 117),
        SHORT_CIRCUIT,
        [
          "this",
          oneOf(
            (_ref = multiple(HexDigit, 4, 4), mutate(function (digits) {
              return parseInt(codesToString(digits), 16);
            })(_ref)),
            (_ref = sequential(
              OpenCurlyBraceChar,
              [
                "this",
                multiple(HexDigit, 1, 6)
              ],
              CloseCurlyBraceChar
            ), mutate(function (digits, parser, index) {
              var inner, value;
              inner = codesToString(digits);
              value = parseInt(inner, 16);
              if (value > 1114111) {
                throw ParserError("Unicode escape sequence too large: '\\u{" + inner + "}'", parser, index);
              }
              return value;
            })(_ref))
          )
        ]
      );
      SingleEscapeCharacter = (function () {
        var _o, ESCAPED_CHARACTERS;
        ESCAPED_CHARACTERS = (_o = __create(null), _o[98] = 8, _o[102] = 12, _o[114] = 13, _o[110] = 10, _o[116] = 9, _o[118] = 11, _o);
        return oneOf(mutate(0)(Zero), mutate(function (c) {
          return ESCAPED_CHARACTERS[c] || c;
        })(AnyChar));
      }());
      BackslashEscapeSequence = sequential(BackslashChar, SHORT_CIRCUIT, [
        "this",
        oneOf(HexEscapeSequence, UnicodeEscapeSequence, SingleEscapeCharacter)
      ]);
      inExpression = makeAlterStack.generic(String)("position", "expression");
      inStatement = makeAlterStack.generic(String)("position", "statement");
      AssignmentAsExpression = inExpression(function (parser, index) {
        return Assignment(parser, index);
      });
      ExpressionOrAssignment = cache(oneOf(AssignmentAsExpression, Expression));
      ExpressionOrAssignmentOrBody = cache(oneOf(ExpressionOrAssignment, Body));
      StringInterpolation = sequential(DollarSignChar, NoSpace, SHORT_CIRCUIT, [
        "this",
        oneOf(Identifier, sequential(
          OpenParenthesis,
          [
            "this",
            allowSpaceBeforeAccess(oneOf(Expression, Nothing))
          ],
          CloseParenthesis
        ))
      ]);
      SingleStringLiteral = cache((_ref = sequential(
        SingleQuote,
        SHORT_CIRCUIT,
        [
          "this",
          zeroOrMoreOf(BackslashEscapeSequence, anyExcept(oneOf(SingleQuote, Newline)))
        ],
        SingleQuote
      ), mutate(function (codes, parser, index) {
        return parser.Const(index, codesToString(codes));
      })(_ref)));
      DoubleStringLiteralInner = zeroOrMoreOf(BackslashEscapeSequence, StringInterpolation, anyExcept(oneOf(DoubleQuote, Newline)));
      function doubleStringLiteralHandler(parts, parser, index) {
        var _arr, _i, _len, currentLiteral, part, stringParts;
        stringParts = [];
        currentLiteral = [];
        for (_arr = __toArray(parts), _i = 0, _len = _arr.length; _i < _len; ++_i) {
          part = _arr[_i];
          if (typeof part === "number") {
            currentLiteral.push(part);
          } else if (!(part instanceof NothingNode)) {
            stringParts.push(parser.Const(index, codesToString(currentLiteral)));
            currentLiteral = [];
            stringParts.push(part);
          }
        }
        if (currentLiteral.length > 0) {
          stringParts.push(parser.Const(index, codesToString(currentLiteral)));
        }
        return stringParts;
      }
      DoubleStringLiteral = cache((_ref = sequential(
        DoubleQuote,
        SHORT_CIRCUIT,
        ["this", DoubleStringLiteralInner],
        DoubleQuote
      ), mutate(function (parts, parser, index) {
        var _arr, _arr2, _i, _len, part, stringParts;
        for (_arr = [], _arr2 = __toArray(doubleStringLiteralHandler(parts, parser, index)), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
          part = _arr2[_i];
          if (!part.isConstValue("")) {
            _arr.push(part);
          }
        }
        stringParts = _arr;
        if (stringParts.length === 0) {
          return parser.Const(index, "");
        } else if (stringParts.length === 1 && stringParts[0].isConstType("string")) {
          return stringParts[0];
        } else {
          return parser.string(index, stringParts);
        }
      })(_ref)));
      DoubleStringArrayLiteral = cache((_ref = sequential(
        PercentSignChar,
        DoubleQuote,
        SHORT_CIRCUIT,
        ["this", DoubleStringLiteralInner],
        DoubleQuote
      ), mutate(function (parts, parser, index) {
        var stringParts;
        stringParts = doubleStringLiteralHandler(parts, parser, index);
        return parser.Array(index, stringParts);
      })(_ref)));
      function StringIndent(parser, index) {
        var c, count, currentIndent, currentIndex, indentValue;
        count = 0;
        currentIndent = parser.indent.peek();
        currentIndex = index;
        while (count < __num(currentIndent)) {
          c = SpaceChar(parser, currentIndex);
          if (!c) {
            break;
          }
          currentIndex = c.index;
          indentValue = INDENTS[c.value];
          if (!indentValue) {
            throw Error("Unexpected indent char: " + __str(JSON.stringify(c.value)));
          }
          count += +indentValue;
        }
        if (count > __num(currentIndent)) {
          throw ParserError("Mixed tabs and spaces in string literal", parser, currentIndex);
        } else if (count === currentIndent || Newline(parser, currentIndex)) {
          return Box(currentIndex, count);
        }
      }
      if (typeof String.prototype.trimRight === "function") {
        trimRight = function (x) {
          return x.trimRight();
        };
      } else {
        trimRight = function (x) {
          return x.replace(/\s+$/, "");
        };
      }
      _ref = zeroOrMoreOf(BackslashEscapeSequence, anyExcept(oneOf(TripleSingleQuote, Newline)));
      TripleSingleStringLine = mutate(function (codes) {
        return [trimRight(codesToString(codes))];
      })(_ref);
      _ref = zeroOrMoreOf(BackslashEscapeSequence, StringInterpolation, anyExcept(oneOf(TripleDoubleQuote, Newline)));
      TripleDoubleStringLine = mutate(function (parts) {
        var _arr, _i, _len, currentLiteral, part, stringParts;
        stringParts = [];
        currentLiteral = [];
        for (_arr = __toArray(parts), _i = 0, _len = _arr.length; _i < _len; ++_i) {
          part = _arr[_i];
          if (typeof part === "number") {
            currentLiteral.push(part);
          } else if (!(part instanceof NothingNode)) {
            if (currentLiteral.length > 0) {
              stringParts.push(codesToString(currentLiteral));
              currentLiteral = [];
            }
            stringParts.push(part);
          }
        }
        if (currentLiteral.length > 0) {
          stringParts.push(trimRight(codesToString(currentLiteral)));
        }
        return stringParts;
      })(_ref);
      function tripleStringHandler(x, parser, index) {
        var _end, _len, i, j, len, line, lines, part, stringParts;
        lines = [x.first];
        if (lines[0].length === 0 || lines[0].length === 1 && lines[0][0] === "") {
          lines.shift();
        }
        for (j = 1, _end = __num(x.numEmptyLines); j < _end; ++j) {
          lines.push([""]);
        }
        lines.push.apply(lines, __toArray(x.rest));
        len = lines.length;
        if (len > 0 && (lines[len - 1].length === 0 || lines[len - 1].length === 1 && lines[len - 1][0] === "")) {
          lines.pop();
          --len;
        }
        stringParts = [];
        for (j = 0, _len = lines.length; j < _len; ++j) {
          line = lines[j];
          if (j > 0) {
            stringParts.push("\n");
          }
          stringParts.push.apply(stringParts, __toArray(line));
        }
        for (i = stringParts.length - 2; i >= 0; --i) {
          if (typeof stringParts[i] === "string" && typeof stringParts[i + 1] === "string") {
            stringParts.splice(i, 2, "" + stringParts[i] + stringParts[i + 1]);
          }
        }
        for (i = 0, _len = stringParts.length; i < _len; ++i) {
          part = stringParts[i];
          if (typeof part === "string") {
            stringParts[i] = parser.Const(index, part);
          }
        }
        return stringParts;
      }
      function makeTripleString(quote, line) {
        var _ref;
        if (typeof quote !== "function") {
          throw TypeError("Expected quote to be a Function, got " + __typeof(quote));
        }
        if (typeof line !== "function") {
          throw TypeError("Expected line to be a Function, got " + __typeof(line));
        }
        _ref = sequential(
          quote,
          SHORT_CIRCUIT,
          ["first", line],
          [
            "numEmptyLines",
            zeroOrMore(
              sequential(Space, ["this", Newline]),
              true
            )
          ],
          [
            "rest",
            maybe(
              retainIndent(sequential(
                MaybeAdvance,
                [
                  "this",
                  maybe(
                    separatedList(
                      sequential(StringIndent, ["this", line]),
                      Newline
                    ),
                    function () {
                      return [];
                    }
                  )
                ],
                maybe(Newline),
                PopIndent
              )),
              function () {
                return [];
              }
            )
          ],
          quote
        );
        return mutate(function (parts, parser, index) {
          var _arr, _arr2, _i, _len, part, stringParts;
          for (_arr = [], _arr2 = __toArray(tripleStringHandler(parts, parser, index)), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
            part = _arr2[_i];
            if (!part.isConstValue("")) {
              _arr.push(part);
            }
          }
          stringParts = _arr;
          if (stringParts.length === 0) {
            return parser.Const(index, "");
          } else if (stringParts.length === 1 && stringParts[0].isConstType("string")) {
            return stringParts[0];
          } else {
            return parser.string(index, stringParts);
          }
        })(_ref);
      }
      TripleSingleStringLiteral = cache(makeTripleString(TripleSingleQuote, TripleSingleStringLine));
      TripleDoubleStringLiteral = cache(makeTripleString(TripleDoubleQuote, TripleDoubleStringLine));
      TripleDoubleStringArrayLiteral = cache((_ref = sequential(
        PercentSignChar,
        TripleDoubleQuote,
        SHORT_CIRCUIT,
        ["first", TripleDoubleStringLine],
        [
          "numEmptyLines",
          zeroOrMore(
            sequential(Space, ["this", Newline]),
            true
          )
        ],
        [
          "rest",
          maybe(
            retainIndent(sequential(
              MaybeAdvance,
              [
                "this",
                maybe(
                  sequential(StringIndent, [
                    "this",
                    separatedList(TripleDoubleStringLine, sequential(Newline, StringIndent))
                  ]),
                  function () {
                    return [];
                  }
                )
              ],
              maybe(Newline),
              PopIndent
            )),
            function () {
              return [];
            }
          )
        ],
        TripleDoubleQuote
      ), mutate(function (parts, parser, index) {
        var stringParts;
        stringParts = tripleStringHandler(parts, parser, index);
        return parser.Array(index, stringParts);
      })(_ref)));
      BackslashStringLiteral = cache(sequential(BackslashChar, NoSpace, ["this", IdentifierNameConst]));
      StringLiteral = cache(withSpace(oneOf(
        BackslashStringLiteral,
        TripleSingleStringLiteral,
        TripleDoubleStringLiteral,
        TripleDoubleStringArrayLiteral,
        SingleStringLiteral,
        DoubleStringLiteral,
        DoubleStringArrayLiteral
      )));
      RegexLiteral = (function () {
        var _ref, _ref2, LowerR, NOTHING, RegexComment, RegexFlags, RegexSpace;
        LowerR = character('"r"', 114);
        _ref = zeroOrMore(NameChar);
        RegexFlags = mutate(codesToString)(_ref);
        NOTHING = {};
        _ref = sequential(HashSignChar, zeroOrMore(anyExcept(Newline), true));
        RegexComment = mutate(NOTHING)(_ref);
        _ref = oneOf(SpaceChar, Newline);
        RegexSpace = mutate(NOTHING)(_ref);
        return withSpace((_ref = sequential(
          LowerR,
          [
            "text",
            oneOf(
              sequential(
                TripleDoubleQuote,
                SHORT_CIRCUIT,
                [
                  "this",
                  zeroOrMoreOf(
                    (_ref2 = sequential(BackslashChar, DollarSignChar), mutate(36)(_ref2)),
                    RegexSpace,
                    RegexComment,
                    StringInterpolation,
                    anyExcept(TripleDoubleQuote)
                  )
                ],
                TripleDoubleQuote
              ),
              sequential(
                TripleSingleQuote,
                SHORT_CIRCUIT,
                [
                  "this",
                  zeroOrMoreOf(RegexSpace, RegexComment, anyExcept(TripleSingleQuote))
                ],
                TripleSingleQuote
              ),
              sequential(
                DoubleQuote,
                SHORT_CIRCUIT,
                [
                  "this",
                  zeroOrMoreOf(
                    (_ref2 = sequential(DoubleQuote, DoubleQuote), mutate(34)(_ref2)),
                    (_ref2 = sequential(BackslashChar, DollarSignChar), mutate(36)(_ref2)),
                    StringInterpolation,
                    anyExcept(oneOf(DoubleQuote, Newline, DollarSignChar))
                  )
                ],
                DoubleQuote
              ),
              sequential(
                SingleQuote,
                SHORT_CIRCUIT,
                [
                  "this",
                  zeroOrMoreOf(
                    (_ref2 = sequential(SingleQuote, SingleQuote), mutate(39)(_ref2)),
                    anyExcept(oneOf(SingleQuote, Newline))
                  )
                ],
                SingleQuote
              )
            )
          ],
          ["flags", RegexFlags]
        ), mutate(function (_p, parser, index) {
          var _arr, _i, _len, currentLiteral, flag, flags, part, seenFlags,
              stringParts, text;
          text = _p.text;
          flags = _p.flags;
          stringParts = [];
          currentLiteral = [];
          for (_arr = __toArray(text), _i = 0, _len = _arr.length; _i < _len; ++_i) {
            part = _arr[_i];
            if (typeof part === "number") {
              currentLiteral.push(part);
            } else if (part !== NOTHING && !(part instanceof NothingNode)) {
              if (currentLiteral.length > 0) {
                stringParts.push(parser.Const(index, codesToString(currentLiteral)));
                currentLiteral = [];
              }
              stringParts.push(part);
            }
          }
          if (currentLiteral.length > 0) {
            stringParts.push(parser.Const(index, codesToString(currentLiteral)));
          }
          if (stringParts.length === 0) {
            text = parser.Const(index, "");
          } else if (stringParts.length === 1 && stringParts[0].isConstType("string")) {
            text = stringParts[0];
          } else {
            text = parser.string(index, stringParts);
          }
          if (text.isConst()) {
            try {
              RegExp(String(text.constValue()));
            } catch (e) {
              throw ParserError(e.message, parser, index);
            }
          }
          seenFlags = [];
          for (_arr = __toArray(flags), _i = 0, _len = _arr.length; _i < _len; ++_i) {
            flag = _arr[_i];
            if (__in(flag, seenFlags)) {
              throw ParserError("Invalid regular expression: flag " + __strnum(quote(flag)) + " occurred more than once", parser, index);
            } else if (flag !== "g" && flag !== "i" && flag !== "m" && flag !== "y") {
              throw ParserError("Invalid regular expression: unknown flag " + __strnum(quote(flag)), parser, index);
            }
            seenFlags.push(flag);
          }
          return parser.Regexp(index, text, flags);
        })(_ref)));
      }());
      ConstantLiteralAccessPart = oneOf(
        sequential(Period, ["this", IdentifierNameConstOrNumberLiteral]),
        sequential(
          OpenSquareBracketChar,
          ["this", allowSpaceBeforeAccess(Expression)],
          CloseSquareBracket
        )
      );
      function CustomConstantLiteral(parser, index) {
        var current, currentIndex, key, name, part, value;
        name = Name(parser, index);
        if (!name) {
          return;
        }
        value = parser.getConst(name.value);
        if (!value) {
          return;
        }
        if (parser.inAst.peek()) {
          return Box(name.index, parser.MacroConst(index, name.value));
        } else {
          current = value.value;
          currentIndex = name.index;
          while (typeof current === "object" && current !== null) {
            part = ConstantLiteralAccessPart(parser, currentIndex);
            if (!part) {
              throw ParserError("Constant '" + __strnum(name.value) + "' cannot appear without being accessed upon.", parser, index);
            }
            if (!part.value.isConst()) {
              throw ParserError("Constant '" + __strnum(name.value) + "' must only be accessed with constant keys.", parser, currentIndex);
            }
            key = part.value.constValue();
            if (!__owns.call(current, key)) {
              throw ParserError("Unknown key " + __str(JSON.stringify(String(key))) + " in constant.", parser, currentIndex);
            }
            current = current[key];
            currentIndex = part.index;
          }
          return Box(currentIndex, parser.Const(index, current));
        }
      }
      function NullOrVoidLiteral(parser, index) {
        var constant;
        constant = CustomConstantLiteral(parser, index);
        if (!constant) {
          return;
        }
        if (constant.value.value != null) {
          return;
        }
        return constant;
      }
      ConstantLiteral = cache(oneOf(CustomConstantLiteral, NumberLiteral, StringLiteral, RegexLiteral));
      Literal = cache(oneOf(ThisOrShorthandLiteral, ArgumentsLiteral, ConstantLiteral));
      MaybeNotToken = cache(maybe(word("not")));
      MaybeQuestionMarkChar = cache(maybe(character('"?"', 63)));
      GeneratorBody = makeAlterStack.generic(Boolean)("inGenerator", true)(Body);
      GeneratorBodyNoEnd = makeAlterStack.generic(Boolean)("inGenerator", true)(BodyNoEnd);
      LessThanChar = character('"<"', 60);
      LessThan = withSpace(LessThanChar);
      GreaterThanChar = character('">"', 62);
      GreaterThan = withSpace(GreaterThanChar);
      FunctionGlyph = cache(sequential(Space, MinusChar, GreaterThanChar));
      _FunctionBody = oneOf.generic(Node)(
        sequential(FunctionGlyph, [
          "this",
          oneOf(Statement, Nothing)
        ]),
        Body,
        Statement
      );
      FunctionBody = makeAlterStack.generic(Boolean)("inGenerator", false)(_FunctionBody);
      GeneratorFunctionBody = makeAlterStack.generic(Boolean)("inGenerator", true)(_FunctionBody);
      IdentifierOrSimpleAccessStart = oneOf(
        Identifier,
        (_ref = sequential(
          ["parent", ThisOrShorthandLiteralPeriod],
          ["child", IdentifierNameConstOrNumberLiteral]
        ), mutate(function (_p, parser, index) {
          var child, parent;
          parent = _p.parent;
          child = _p.child;
          return parser.Access(index, parent, child);
        })(_ref)),
        (_ref = sequential(
          ["parent", ThisOrShorthandLiteral],
          DoubleColonChar,
          ["child", IdentifierNameConstOrNumberLiteral]
        ), mutate(function (_p, parser, index) {
          var child, parent;
          parent = _p.parent;
          child = _p.child;
          return parser.Access(
            index,
            parser.Access(index, parent, parser.Const(index, "prototype")),
            child
          );
        })(_ref)),
        (_ref = sequential(
          ["parent", ThisOrShorthandLiteral],
          ["isProto", maybe(DoubleColonChar)],
          OpenSquareBracketChar,
          ["child", allowSpaceBeforeAccess(Expression)],
          CloseSquareBracket
        ), mutate(function (_p, parser, index) {
          var child, isProto, parent;
          parent = _p.parent;
          isProto = _p.isProto;
          child = _p.child;
          return parser.Access(
            index,
            isProto
              ? parser.Access(index, parent, parser.Const(index, "prototype"))
              : parent,
            child
          );
        })(_ref))
      );
      PeriodOrDoubleColonChar = cache(oneOf(Period, DoubleColonChar));
      _ref = oneOf(
        sequential(
          ["type", PeriodOrDoubleColonChar],
          ["child", IdentifierNameConstOrNumberLiteral]
        ),
        sequential(
          ["type", maybe(DoubleColonChar)],
          OpenSquareBracketChar,
          ["child", allowSpaceBeforeAccess(Expression)],
          CloseSquareBracket
        )
      );
      IdentifierOrSimpleAccessPart = mutate(function (_p, parser, childIndex) {
        var child, isProto, type;
        type = _p.type;
        child = _p.child;
        isProto = type === "::";
        return function (parent, parser, index) {
          return parser.Access(
            index,
            isProto
              ? parser.Access(index, parent, parser.Const(childIndex, "prototype"))
              : parent,
            child
          );
        };
      })(_ref);
      IdentifierOrSimpleAccess = cache((_ref = sequential(
        ["head", IdentifierOrSimpleAccessStart],
        ["tail", zeroOrMore(IdentifierOrSimpleAccessPart)]
      ), mutate(function (parts, parser, index) {
        var _arr, _i, _len, acc, creator;
        acc = parts.head;
        for (_arr = __toArray(parts.tail), _i = 0, _len = _arr.length; _i < _len; ++_i) {
          creator = _arr[_i];
          acc = creator(acc, parser, index);
        }
        return acc;
      })(_ref)));
      IdentifierOrAccess = cache(function (parser, index) {
        var node, value;
        node = InvocationOrAccess(parser, index);
        if (!node) {
          return;
        }
        value = node.value;
        if (value instanceof IdentNode || value instanceof AccessNode) {
          return node;
        }
      });
      inFunctionTypeParams = makeAlterStack.generic(Boolean)("inFunctionTypeParams", true);
      notInFunctionTypeParams = makeAlterStack.generic(Boolean)("inFunctionTypeParams", false);
      TypeReference = function (parser, index) {
        return TypeReference(parser, index);
      };
      ArrayType = cache((_ref = sequential(
        OpenSquareBracket,
        ["this", maybe(allowSpaceBeforeAccess(TypeReference))],
        CloseSquareBracket
      ), mutate(function (subtype, parser, index) {
        var arrayIdent;
        arrayIdent = parser.Ident(index, "Array");
        if (subtype) {
          return parser.TypeGeneric(index, arrayIdent, [subtype]);
        } else {
          return arrayIdent;
        }
      })(_ref)));
      ObjectTypePair = sequential(
        [
          "key",
          function (parser, index) {
            return ConstObjectKey(parser, index);
          }
        ],
        Colon,
        ["value", TypeReference]
      );
      ObjectType = cache((_ref = sequential(
        OpenCurlyBrace,
        [
          "this",
          allowSpaceBeforeAccess(maybe(
            separatedList(ObjectTypePair, CommaOrNewline),
            function () {
              return [];
            }
          ))
        ],
        MaybeComma,
        CloseCurlyBrace
      ), mutate(function (pairs, parser, index) {
        var _arr, _i, _len, key, keys, keyValue;
        if (pairs.length === 0) {
          return parser.Ident(index, "Object");
        } else {
          keys = [];
          for (_arr = __toArray(pairs), _i = 0, _len = _arr.length; _i < _len; ++_i) {
            key = _arr[_i].key;
            if (!key.isConst()) {
              throw ParserError("Expected a constant key, got " + __typeof(key), parser, key.index);
            } else {
              keyValue = String(key.constValue());
              if (__in(keyValue, keys)) {
                throw ParserError("Duplicate object key: " + __strnum(quote(keyValue)), parser, key.index);
              }
              keys.push(keyValue);
            }
          }
          return parser.TypeObject(index, pairs);
        }
      })(_ref)));
      _ref = sequential(
        oneOf(
          sequential(
            OpenParenthesis,
            allowSpaceBeforeAccess(separatedList(TypeReference, CommaOrNewline)),
            CloseParenthesis
          ),
          inFunctionTypeParams(TypeReference),
          Nothing
        ),
        FunctionGlyph,
        ["this", maybe(TypeReference)]
      );
      FunctionType = mutate(function (returnType, parser, index) {
        var functionIdent;
        functionIdent = parser.Ident(index, "Function");
        if (returnType) {
          return parser.TypeGeneric(index, functionIdent, [returnType]);
        } else {
          return functionIdent;
        }
      })(_ref);
      NonUnionType = oneOf(
        function (parser, index) {
          if (!parser.inFunctionTypeParams.peek()) {
            return FunctionType(parser, index);
          }
        },
        sequential(
          OpenParenthesis,
          [
            "this",
            allowSpaceBeforeAccess(notInFunctionTypeParams(function (parser, index) {
              return TypeReference(parser, index);
            }))
          ],
          CloseParenthesis
        ),
        ArrayType,
        ObjectType,
        NullOrVoidLiteral,
        (_ref = sequential(
          ["base", IdentifierOrSimpleAccess],
          [
            "args",
            maybe(
              sequential(
                character('"<"', 60),
                SHORT_CIRCUIT,
                [
                  "this",
                  separatedList(
                    function (parser, index) {
                      return TypeReference(parser, index);
                    },
                    Comma
                  )
                ],
                Space,
                character('">"', 62)
              ),
              function () {
                return [];
              }
            )
          ]
        ), mutate(function (_p, parser, index) {
          var args, base;
          base = _p.base;
          args = _p.args;
          if (!args.length) {
            return base;
          } else {
            return parser.TypeGeneric(index, base, args);
          }
        })(_ref))
      );
      Pipe = cache(withSpace(PipeChar));
      TypeReference = cache((_ref = separatedList(NonUnionType, Pipe), mutate(function (types, parser, index) {
        var _arr, i, type;
        types = types.slice();
        for (_arr = __toArray(types), i = _arr.length; i--; ) {
          type = _arr[i];
          if (type instanceof TypeUnionNode) {
            types.splice.apply(types, [i, 1].concat(__toArray(type.types)));
          }
        }
        if (types.length === 1) {
          return types[0];
        } else {
          return parser.TypeUnion(index, types);
        }
      })(_ref)));
      MaybeAsType = maybe(sequential(word("as"), SHORT_CIRCUIT, ["this", TypeReference]));
      BracketedObjectKey = cache(sequential(
        OpenSquareBracket,
        ["this", allowSpaceBeforeAccess(ExpressionOrAssignment)],
        CloseSquareBracket
      ));
      ConstObjectKey = oneOf(
        StringLiteral,
        mutate(function (node, parser, index) {
          return parser.Const(index, String(node.constValue()));
        })(NumberLiteral),
        IdentifierNameConst
      );
      ObjectKey = cache(oneOf(BracketedObjectKey, ConstObjectKey));
      ObjectKeyColon = cache(sequential(
        ["this", ObjectKey],
        Colon,
        except(EqualChar),
        function (parser, index) {
          if (parser.options.noindent) {
            if (EmptyLine(parser, index)) {
              return;
            } else if (parser.options.embedded && (EmbeddedClose(parser, index) || EmbeddedCloseWrite(parser, index))) {
              return;
            }
          }
          return Box(index);
        }
      ));
      function mutateFunction(node, parser, index) {
        var mutateFunctionMacro;
        if (!(node instanceof Node)) {
          throw TypeError("Expected node to be a " + __name(Node) + ", got " + __typeof(node));
        }
        mutateFunctionMacro = parser.getMacroByLabel("mutateFunction");
        if (!mutateFunctionMacro) {
          return node;
        } else {
          return mutateFunctionMacro.func(
            { op: "", node: node },
            parser,
            index
          );
        }
      }
      function validateSpreadParameters(params, parser) {
        var _arr, _i, _len, param, spreadCount;
        spreadCount = 0;
        for (_arr = __toArray(params), _i = 0, _len = _arr.length; _i < _len; ++_i) {
          param = _arr[_i];
          if (param instanceof ParamNode && param.spread) {
            ++spreadCount;
            if (spreadCount > 1) {
              throw ParserError("Cannot have more than one spread parameter", parser, param.index);
            }
          }
        }
        return params;
      }
      function removeTrailingNothings(array) {
        var last;
        if (!__isArray(array)) {
          throw TypeError("Expected array to be an Array, got " + __typeof(array));
        }
        while (array.length) {
          last = array[array.length - 1];
          if (!(last instanceof NothingNode)) {
            break;
          }
          array.pop();
        }
        return array;
      }
      IdentifierOrThisAccess = oneOf(Identifier, (_ref = sequential(
        ["parent", ThisOrShorthandLiteralPeriod],
        ["child", IdentifierNameConst]
      ), mutate(function (_p, parser, index) {
        var child, parent;
        parent = _p.parent;
        child = _p.child;
        return parser.Access(index, parent, child);
      })(_ref)));
      _ref = sequential(
        ["isMutable", bool(maybe(word("mutable")))],
        ["spread", bool(MaybeSpreadToken)],
        ["ident", IdentifierOrThisAccess],
        ["asType", MaybeAsType],
        [
          "defaultValue",
          maybe(sequential(EqualSign, ["this", Expression]))
        ]
      );
      IdentifierParameter = mutate(function (_p, parser, index) {
        var asType, defaultValue, ident, isMutable, spread;
        isMutable = _p.isMutable;
        spread = _p.spread;
        ident = _p.ident;
        asType = _p.asType;
        defaultValue = _p.defaultValue;
        if (spread && defaultValue) {
          throw ParserError("Cannot specify a default value for a spread parameter", parser, index);
        }
        return parser.Param(
          index,
          ident,
          defaultValue,
          spread,
          isMutable,
          asType
        );
      })(_ref);
      Parameter = function (parser, index) {
        return Parameter(parser, index);
      };
      _ref = sequential(
        OpenSquareBracket,
        EmptyLines,
        [
          "this",
          allowSpaceBeforeAccess(function (parser, index) {
            return Parameters(parser, index);
          })
        ],
        EmptyLines,
        CloseSquareBracket
      );
      ArrayParameter = mutate(function (params, parser, index) {
        return parser.Array(index, params);
      })(_ref);
      ParamDualObjectKey = sequential(
        ["key", ObjectKeyColon],
        ["value", Parameter]
      );
      _ref = sequential(
        ["this", IdentifierParameter],
        NotColon
      );
      ParamSingularObjectKey = mutate(function (param, parser, index) {
        var ident, key;
        ident = param.ident;
        if (ident instanceof IdentNode) {
          key = parser.Const(index, ident.name);
        } else if (ident instanceof AccessNode) {
          key = ident.child;
        } else {
          throw Error("Unknown object key type: " + __strnum(param.type));
        }
        return { key: key, value: param };
      })(_ref);
      KvpParameter = maybe(oneOf(ParamDualObjectKey, ParamSingularObjectKey));
      _ref = sequential(
        OpenCurlyBrace,
        EmptyLines,
        [
          "this",
          allowSpaceBeforeAccess(separatedList(KvpParameter, CommaOrNewline))
        ],
        EmptyLines,
        CloseCurlyBrace
      );
      ObjectParameter = mutate(function (params, parser, index) {
        return parser.object(index, (function () {
          var _arr, _arr2, _i, _len, param;
          for (_arr = [], _arr2 = __toArray(params), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
            param = _arr2[_i];
            if (param) {
              _arr.push(param);
            }
          }
          return _arr;
        }()));
      })(_ref);
      Parameter = oneOf(IdentifierParameter, ArrayParameter, ObjectParameter);
      ParameterOrNothing = oneOf(Parameter, Nothing);
      Parameters = allowSpaceBeforeAccess((_ref = separatedList(ParameterOrNothing, CommaOrNewline), mutate(function (params, parser, index) {
        return validateSpreadParameters(removeTrailingNothings(params), parser);
      })(_ref)));
      _ref = sequential(
        OpenParenthesis,
        SHORT_CIRCUIT,
        EmptyLines,
        ["this", Parameters],
        EmptyLines,
        CloseParenthesis
      );
      ParameterSequence = mutate((function () {
        function checkParam(param, parser, names) {
          var _arr, _i, _len, child, element, ident, name, pair;
          if (!(param instanceof Node)) {
            throw TypeError("Expected param to be a " + __name(Node) + ", got " + __typeof(param));
          }
          if (!__isArray(names)) {
            throw TypeError("Expected names to be an Array, got " + __typeof(names));
          }
          if (param instanceof ParamNode) {
            ident = param.ident;
            if (ident instanceof IdentNode) {
              name = ident.name;
            } else if (ident instanceof AccessNode) {
              child = ident.child;
              if (!child.isConstType("string")) {
                throw Error("Expected constant access");
              }
              name = child.constValue();
            } else {
              throw Error("Unknown param ident type: " + __typeof(param));
            }
            if (__in(name, names)) {
              throw ParserError("Duplicate parameter name: " + __strnum(quote(name)), parser, ident.index);
            } else {
              names.push(name);
            }
          } else if (param instanceof ArrayNode) {
            for (_arr = __toArray(param.elements), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              element = _arr[_i];
              checkParam(element, parser, names);
            }
          } else if (param instanceof ObjectNode) {
            for (_arr = __toArray(param.pairs), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              pair = _arr[_i];
              checkParam(pair.value, parser, names);
            }
          } else if (!param instanceof NothingNode) {
            throw Error("Unknown param type: " + __typeof(param));
          }
        }
        return function (params, parser, index) {
          var _arr, _i, _len, names, param;
          names = [];
          for (_arr = __toArray(params), _i = 0, _len = _arr.length; _i < _len; ++_i) {
            param = _arr[_i];
            checkParam(param, parser, names);
          }
          return params;
        };
      }()))(_ref);
      requireParameterSequence = makeAlterStack.generic(Boolean)("requireParameterSequence", true);
      dontRequireParameterSequence = makeAlterStack.generic(Boolean)("requireParameterSequence", false);
      _FunctionDeclaration = (function () {
        var _ref, asTypeRule, FunctionFlag, FunctionFlags, GenericDefinitionPart,
            maybeParamsRule;
        FunctionFlag = oneOf(ExclamationPointChar, AtSignChar, AsterixChar, CaretChar);
        _ref = zeroOrMore(FunctionFlag);
        FunctionFlags = mutate(function (codes, parser, index) {
          var _arr, _i, _len, c, flags, uniqueChars;
          flags = { autoReturn: true, bound: false, generator: false, curry: false };
          uniqueChars = [];
          for (_arr = __toArray(codes), _i = 0, _len = _arr.length; _i < _len; ++_i) {
            c = _arr[_i];
            if (__in(c, uniqueChars)) {
              throw ParserError("Function flag " + __strnum(quote(fromCharCode(c))) + " specified more than once", parser, index);
            } else {
              uniqueChars.push(c);
              switch (c) {
              case 33:
                flags.autoReturn = false;
                break;
              case 64:
                flags.bound = true;
                break;
              case 42:
                flags.generator = true;
                break;
              case 94:
                flags.curry = true;
                break;
              default: throw Error("Unknown function flag: " + __strnum(quote(fromCharCode(c))));
              }
            }
          }
          return flags;
        })(_ref);
        GenericDefinitionPart = maybe(
          sequential(
            LessThanChar,
            [
              "this",
              separatedList(Identifier, Comma)
            ],
            GreaterThan
          ),
          function () {
            return [];
          }
        );
        maybeParamsRule = maybe(ParameterSequence, function () {
          return [];
        });
        asTypeRule = inFunctionTypeParams(MaybeAsType);
        function getBodyRule(generator) {
          if (generator) {
            return GeneratorFunctionBody;
          } else {
            return FunctionBody;
          }
        }
        return allowSpaceBeforeAccess(function (parser, index) {
          var _arr, _i, asType, body, flags, flagsValue, func, generic, param,
              params, paramsRule, result, scope;
          generic = GenericDefinitionPart(parser, index);
          scope = parser.pushScope(true);
          if (parser.requireParameterSequence.peek()) {
            paramsRule = ParameterSequence;
          } else {
            paramsRule = maybeParamsRule;
          }
          params = paramsRule(parser, generic.index);
          if (!params) {
            parser.popScope();
            return;
          }
          for (_arr = __toArray(params.value), _i = _arr.length; _i--; ) {
            param = _arr[_i];
            addParamToScope(scope, param);
          }
          flags = FunctionFlags(parser, params.index);
          flagsValue = flags.value;
          asType = asTypeRule(parser, flags.index);
          body = getBodyRule(flags.value.generator)(parser, asType.index);
          if (!body) {
            parser.popScope();
            return;
          }
          func = parser.Function(
            index,
            params.value,
            body.value,
            flagsValue.autoReturn,
            flagsValue.bound,
            flagsValue.curry,
            asType.value,
            flagsValue.generator,
            generic.value
          );
          result = mutateFunction(func, parser, index);
          parser.popScope();
          return Box(body.index, result);
        });
      }());
      FunctionDeclaration = requireParameterSequence(_FunctionDeclaration);
      FunctionLiteral = cache(sequential(Space, HashSignChar, ["this", dontRequireParameterSequence(_FunctionDeclaration)]));
      preventUnclosedObjectLiteral = makeAlterStack.generic(Boolean)("preventUnclosedObjectLiteral", true);
      ArrayLiteral = cache(preventUnclosedObjectLiteral((_ref = sequential(
        OpenSquareBracket,
        Space,
        [
          "this",
          allowSpaceBeforeAccess(concat(
            maybe(
              sequential(
                [
                  "this",
                  separatedList(SpreadOrExpression, Comma)
                ],
                MaybeComma
              ),
              function () {
                return [];
              }
            ),
            maybe(
              retainIndent(sequential(
                SomeEmptyLines,
                MaybeAdvance,
                [
                  "this",
                  maybe(
                    sequential(CheckIndent, [
                      "this",
                      separatedList(SpreadOrExpression, CommaOrSomeEmptyLinesWithCheckIndent)
                    ]),
                    function () {
                      return [];
                    }
                  )
                ],
                EmptyLines,
                MaybeCommaOrNewline
              )),
              function () {
                return [];
              }
            )
          ))
        ],
        CloseSquareBracket
      ), mutate(function (items, parser, index) {
        return parser.Array(index, items);
      })(_ref))));
      SetLiteral = cache((_ref = sequential(PercentSign, check(OpenSquareBracketChar), SHORT_CIRCUIT, ["this", ArrayLiteral]), mutate(function (value, parser, index) {
        var constructSet;
        constructSet = parser.getMacroByLabel("constructSet");
        if (!constructSet) {
          throw Error("Cannot use literal set until the construct-set macro has been defined");
        }
        return constructSet.func(
          { op: "", node: value },
          parser,
          index
        );
      })(_ref)));
      NoNewlineIfNoIndent = cache(function (parser, index) {
        if (parser.options.noindent) {
          return NoSpaceNewline(parser, index);
        } else {
          return Box(index);
        }
      });
      DualObjectKey = sequential(
        ["key", ObjectKeyColon],
        NoNewlineIfNoIndent,
        ["value", Expression]
      );
      GetSetToken = cache(oneOf(word("get"), word("set")));
      PropertyDualObjectKey = cache(sequential(
        [
          "property",
          oneOf(word("property"), GetSetToken)
        ],
        Space,
        ["key", ObjectKeyColon],
        NoNewlineIfNoIndent,
        SHORT_CIRCUIT,
        ["value", Expression]
      ));
      PropertyOrDualObjectKey = cache(oneOf(PropertyDualObjectKey, DualObjectKey));
      MethodDeclaration = sequential(
        ["property", maybe(GetSetToken)],
        ["key", ObjectKey],
        NotColon,
        ["value", FunctionDeclaration]
      );
      PropertyOrDualObjectKeyOrMethodDeclaration = oneOf(PropertyOrDualObjectKey, MethodDeclaration);
      UnclosedObjectLiteral = cache((_ref = separatedList(PropertyOrDualObjectKey, Comma), mutate(function (pairs, parser, index) {
        return parser.object(index, pairs);
      })(_ref)));
      SingularObjectKey = oneOf(
        (_ref = sequential(
          ["this", IdentifierOrAccess],
          NotColon
        ), mutate(function (ident, parser, index) {
          var key;
          if (ident instanceof AccessNode) {
            key = ident.child;
          } else if (ident instanceof IdentNode) {
            key = parser.Const(index, ident.name);
          } else {
            throw ParserError("Unknown ident type: " + __typeof(ident), parser, index);
          }
          return { key: key, value: ident };
        })(_ref)),
        (_ref = sequential(
          ["this", ConstantLiteral],
          NotColon
        ), mutate(function (node, parser, index) {
          var key;
          if (node.isConst() && !node.isConstType("string")) {
            key = parser.Const(index, String(node.value));
          } else {
            key = node;
          }
          return { key: key, value: node };
        })(_ref)),
        (_ref = sequential(
          ["this", ThisLiteral],
          NotColon
        ), mutate(function (node, parser, index) {
          return {
            key: parser.Const(index, "this"),
            value: node
          };
        })(_ref)),
        (_ref = sequential(
          ["this", ArgumentsLiteral],
          NotColon
        ), mutate(function (node, parser, index) {
          return {
            key: parser.Const(index, "arguments"),
            value: node
          };
        })(_ref)),
        (_ref = sequential(
          ["this", BracketedObjectKey],
          NotColon
        ), mutate(function (node, parser, index) {
          return { key: node, value: node };
        })(_ref))
      );
      KeyValuePair = cache(oneOf(
        PropertyOrDualObjectKeyOrMethodDeclaration,
        (_ref = sequential(
          Space,
          ["flag", maybe(PlusOrMinusChar)],
          ["key", SingularObjectKey]
        ), mutate(function (_p, parser, index) {
          var flag, key;
          flag = _p.flag;
          key = _p.key;
          if (flag) {
            return {
              key: key.key,
              value: parser.Const(index, flag === 43)
            };
          } else {
            return key;
          }
        })(_ref)),
        (_ref = sequential(
          Space,
          ["bool", PlusOrMinusChar],
          ["key", IdentifierNameConst]
        ), mutate(function (_p, parser, index) {
          var bool, key;
          bool = _p.bool;
          key = _p.key;
          return {
            key: key,
            value: parser.Const(index, bool === 43)
          };
        })(_ref))
      ));
      ObjectLiteral = cache(allowSpaceBeforeAccess((_ref = sequential(
        OpenCurlyBrace,
        Space,
        [
          "prototype",
          maybe(sequential(
            word("extends"),
            ["this", preventUnclosedObjectLiteral(Logic)],
            Space,
            oneOf(Comma, check(Newline), check(CloseCurlyBrace))
          ))
        ],
        [
          "pairs",
          concat(
            maybe(
              sequential(
                [
                  "this",
                  separatedList(KeyValuePair, Comma)
                ],
                MaybeComma
              ),
              function () {
                return [];
              }
            ),
            maybe(
              retainIndent(sequential(
                SomeEmptyLines,
                MaybeAdvance,
                [
                  "this",
                  maybe(
                    sequential(CheckIndent, [
                      "this",
                      separatedList(KeyValuePair, CommaOrSomeEmptyLinesWithCheckIndent)
                    ]),
                    function () {
                      return [];
                    }
                  )
                ],
                PopIndent
              )),
              function () {
                return [];
              }
            )
          )
        ],
        EmptyLines,
        MaybeCommaOrNewline,
        EmptyLines,
        CloseCurlyBrace
      ), mutate(function (x, parser, index) {
        return parser.object(index, x.pairs, x.prototype);
      })(_ref))));
      MapLiteral = cache((_ref = sequential(
        PercentSign,
        OpenCurlyBraceChar,
        SHORT_CIRCUIT,
        Space,
        [
          "this",
          allowSpaceBeforeAccess(concat(
            maybe(
              sequential(
                [
                  "this",
                  separatedList(DualObjectKey, Comma)
                ],
                MaybeComma
              ),
              function () {
                return [];
              }
            ),
            maybe(
              retainIndent(sequential(
                SomeEmptyLines,
                MaybeAdvance,
                [
                  "this",
                  maybe(
                    sequential(CheckIndent, [
                      "this",
                      separatedList(DualObjectKey, CommaOrSomeEmptyLinesWithCheckIndent)
                    ]),
                    function () {
                      return [];
                    }
                  )
                ],
                PopIndent
              )),
              function () {
                return [];
              }
            )
          ))
        ],
        EmptyLines,
        MaybeCommaOrNewline,
        EmptyLines,
        CloseCurlyBrace
      ), mutate(function (pairs, parser, index) {
        var constructMap;
        constructMap = parser.macros.getByLabel("constructMap");
        if (!constructMap) {
          throw Error("Cannot use literal map until the construct-map macro has been defined");
        }
        return constructMap.func(
          {
            op: "",
            node: parser.object(index, pairs)
          },
          parser,
          index
        );
      })(_ref)));
      function RighthandAssignment(parser, index) {
        var _arr, _i, op, operator, right, rule;
        function makeFunc(op, right) {
          return function (left, startIndex) {
            return operator.func(
              { left: left, op: op, right: right },
              parser,
              startIndex
            );
          };
        }
        for (_arr = __toArray(parser.assignOperators()), _i = _arr.length; _i--; ) {
          operator = _arr[_i];
          rule = operator.rule;
          op = rule(parser, index);
          if (!op) {
            continue;
          }
          right = ExpressionOrAssignmentOrBody(parser, op.index);
          if (!right) {
            continue;
          }
          return Box(right.index, makeFunc(op.value, right.value));
        }
      }
      function Assignment(parser, index) {
        var left, right;
        left = IdentifierOrAccess(parser, index);
        if (!left) {
          return;
        }
        right = RighthandAssignment(parser, left.index);
        if (!right) {
          return;
        }
        return Box(right.index, right.value(left.value, index));
      }
      CustomOperatorCloseParenthesis = (function () {
        function handleUnaryOperator(operator, parser, index) {
          var close, node, op, result, scope;
          op = operator.rule(parser, index);
          if (!op) {
            return;
          }
          close = CloseParenthesis(parser, op.index);
          if (!close) {
            return;
          }
          node = parser.Ident(index, "x");
          scope = parser.pushScope(true);
          scope.add(node, false, Type.any);
          result = mutateFunction(
            parser.Function(
              index,
              [parser.Param(index, node)],
              operator.func(
                { op: op.value, node: node },
                parser,
                index
              ),
              true
            ),
            parser,
            index
          );
          parser.popScope();
          return Box(close.index, result);
        }
        function handleBinaryOperator(operator, parser, index) {
          var close, invert, inverted, left, op, result, right, scope;
          inverted = false;
          if (operator.invertible) {
            invert = MaybeNotToken(parser, index);
            if (invert.value) {
              inverted = true;
            }
            index = invert.index;
          }
          op = operator.rule(parser, index);
          if (!op) {
            return;
          }
          close = CloseParenthesis(parser, op.index);
          if (!close) {
            return;
          }
          left = parser.Ident(index, "x");
          right = parser.Ident(index, "y");
          scope = parser.pushScope(true);
          scope.add(left, false, Type.any);
          scope.add(right, false, Type.any);
          result = mutateFunction(
            parser.Function(
              index,
              [
                parser.Param(index, left),
                parser.Param(index, right)
              ],
              operator.func(
                { left: left, inverted: inverted, op: op.value, right: right },
                parser,
                index
              ),
              true,
              false,
              true
            ),
            parser,
            index
          );
          parser.popScope();
          return Box(close.index, result);
        }
        return function (parser, index) {
          var _arr, _i, _ref, operator;
          for (_arr = __toArray(parser.allBinaryOperators()), _i = _arr.length; _i--; ) {
            operator = _arr[_i];
            if ((_ref = handleBinaryOperator(operator, parser, index)) != null) {
              return _ref;
            }
          }
          for (_arr = __toArray(parser.prefixUnaryOperators()), _i = _arr.length; _i--; ) {
            operator = _arr[_i];
            if ((_ref = handleUnaryOperator(operator, parser, index)) != null) {
              return _ref;
            }
          }
          for (_arr = __toArray(parser.postfixUnaryOperators()), _i = _arr.length; _i--; ) {
            operator = _arr[_i];
            if ((_ref = handleUnaryOperator(operator, parser, index)) != null) {
              return _ref;
            }
          }
        };
      }());
      function CustomBinaryOperator(parser, index) {
        var _arr, _i, currentIndex, invert, inverted, op, operator;
        for (_arr = __toArray(parser.allBinaryOperators()), _i = _arr.length; _i--; ) {
          operator = _arr[_i];
          inverted = false;
          currentIndex = index;
          if (operator.invertible) {
            invert = MaybeNotToken(parser, index);
            if (invert.value) {
              inverted = true;
            }
            currentIndex = invert.index;
          }
          op = operator.rule(parser, currentIndex);
          if (!op) {
            continue;
          }
          return Box(op.index, { op: op.value, operator: operator, inverted: inverted });
        }
      }
      Parenthetical = cache(allowSpaceBeforeAccess(sequential(OpenParenthesis, [
        "this",
        oneOf.generic(Node)(
          sequential(
            ["this", AssignmentAsExpression],
            CloseParenthesis
          ),
          (_ref = sequential(
            ["left", Expression],
            ["operator", maybe(CustomBinaryOperator)],
            CloseParenthesis
          ), mutate(function (_p, parser, index) {
            var left, operator, result, right, scope;
            left = _p.left;
            operator = _p.operator;
            if (!operator) {
              return left;
            }
            scope = parser.pushScope(true);
            right = parser.makeTmp(index, "x");
            result = mutateFunction(
              parser.Function(
                index,
                [parser.Param(index, right)],
                operator.operator.func(
                  { left: left.rescope(scope), inverted: operator.inverted, op: operator.op, right: right },
                  parser,
                  index
                ),
                true
              ),
              parser,
              index
            );
            parser.popScope();
            return result;
          })(_ref)),
          CustomOperatorCloseParenthesis,
          (_ref = sequential(
            ["operator", CustomBinaryOperator],
            ["right", Expression],
            CloseParenthesis
          ), mutate(function (_p, parser, index) {
            var _p2, inverted, left, op, operator, result, right, scope;
            right = _p.right;
            _p2 = _p.operator;
            op = _p2.op;
            operator = _p2.operator;
            inverted = _p2.inverted;
            scope = parser.pushScope(true);
            left = parser.makeTmp(index, "x");
            result = mutateFunction(
              parser.Function(
                index,
                [parser.Param(index, left)],
                operator.func(
                  { left: left, inverted: inverted, op: op, right: right.rescope(scope) },
                  parser,
                  index
                ),
                true
              ),
              parser,
              index
            );
            parser.popScope();
            return result;
          })(_ref)),
          (_ref = sequential(
            [
              "this",
              oneOrMore(function (parser, index) {
                return InvocationOrAccessPart(parser, index);
              })
            ],
            CloseParenthesis
          ), mutate(function (tail, parser, index) {
            var left, result, scope;
            scope = parser.pushScope(true);
            left = parser.makeTmp(index, "o");
            result = mutateFunction(
              parser.Function(
                index,
                [parser.Param(index, left)],
                convertInvocationOrAccess(
                  false,
                  { type: "normal", existential: false, node: left },
                  tail,
                  parser,
                  index
                ).rescope(scope),
                true,
                false
              ),
              parser,
              index
            );
            parser.popScope();
            return result;
          })(_ref))
        )
      ])));
      CurrentArrayLength = cache(function (parser, index) {
        var asterix;
        if (parser.asterixAsArrayLength.peek()) {
          asterix = AsterixChar(parser, index);
          if (asterix) {
            return Box(asterix.index, parser.Ident(index, "__currentArrayLength"));
          }
        }
      });
      IndentedUnclosedObjectLiteralInner = cache((_ref = separatedList(PropertyOrDualObjectKey, CommaOrSomeEmptyLinesWithCheckIndent), mutate(function (pairs, parser, index) {
        return parser.object(index, pairs);
      })(_ref)));
      UnclosedObjectLiteralsAllowed = cache(function (parser, index) {
        if (!parser.preventUnclosedObjectLiteral.peek()) {
          return Box(index);
        }
      });
      IndentedUnclosedObjectLiteral = cache(sequential(
        UnclosedObjectLiteralsAllowed,
        IndentationRequired,
        Space,
        Newline,
        EmptyLines,
        [
          "this",
          retainIndent(sequential(
            Advance,
            CheckIndent,
            ["this", IndentedUnclosedObjectLiteralInner],
            PopIndent
          ))
        ]
      ));
      UnclosedArrayLiteralElement = sequential(AsterixChar, Space, [
        "this",
        oneOf(
          retainIndent(sequential(PushFakeIndent(2), [
            "this",
            oneOf(
              IndentedUnclosedObjectLiteralInner,
              function (parser, index) {
                return IndentedUnclosedArrayLiteralInner(parser, index);
              },
              SpreadOrExpression
            )
          ])),
          SpreadOrExpression
        )
      ]);
      IndentedUnclosedArrayLiteralInner = cache((_ref = separatedList(UnclosedArrayLiteralElement, sequential(MaybeComma, SomeEmptyLinesWithCheckIndent)), mutate(function (items, parser, index) {
        return parser.Array(index, items);
      })(_ref)));
      IndentedUnclosedArrayLiteral = cache(sequential(
        UnclosedObjectLiteralsAllowed,
        IndentationRequired,
        Space,
        Newline,
        EmptyLines,
        [
          "this",
          retainIndent(sequential(
            Advance,
            CheckIndent,
            ["this", IndentedUnclosedArrayLiteralInner],
            PopIndent
          ))
        ]
      ));
      inAst = makeAlterStack.generic(Boolean)("inAst", true);
      inEvilAst = makeAlterStack.generic(Boolean)("inEvilAst", true);
      AstExpression = sequential(
        word("ASTE"),
        SHORT_CIRCUIT,
        function (parser, index) {
          if (!parser.inMacro.peek()) {
            throw ParserError("Can only use ASTE inside of a macro", parser, index);
          } else if (parser.inAst.peek()) {
            throw ParserError("Can only use ASTE inside of another AST", parser, index);
          } else {
            return Box(index);
          }
        },
        [
          "this",
          (function () {
            var evilRule, rule;
            rule = inAst(ExpressionOrAssignment);
            evilRule = inEvilAst(rule);
            return function (parser, index) {
              var isEvil;
              isEvil = ExclamationPointChar(parser, index);
              if (isEvil) {
                return evilRule(parser, isEvil.index);
              } else {
                return rule(parser, index);
              }
            };
          }())
        ]
      );
      AstStatement = sequential(
        word("AST"),
        SHORT_CIRCUIT,
        function (parser, index) {
          if (!parser.inMacro.peek()) {
            throw ParserError("Can only use AST inside of a macro", parser, index);
          } else if (parser.inAst.peek()) {
            throw ParserError("Can only use AST inside of another AST", parser, index);
          } else {
            return Box(index);
          }
        },
        [
          "this",
          (function () {
            var evilRule, rule;
            rule = inAst(oneOf(Body, Statement));
            evilRule = inEvilAst(rule);
            return function (parser, index) {
              var isEvil;
              isEvil = ExclamationPointChar(parser, index);
              if (isEvil) {
                return evilRule(parser, isEvil.index);
              } else {
                return rule(parser, index);
              }
            };
          }())
        ]
      );
      Ast = cache((_ref = oneOf(AstExpression, AstStatement), mutate(function (node, parser, index) {
        return MacroContext.constifyObject(node, index, parser.scope.peek());
      })(_ref)));
      PrimaryExpression = cache(oneOf.generic(Node)(
        UnclosedObjectLiteral,
        Literal,
        ArrayLiteral,
        ObjectLiteral,
        SetLiteral,
        MapLiteral,
        Ast,
        Parenthetical,
        FunctionLiteral,
        UseMacro,
        Identifier,
        CurrentArrayLength,
        IndentedUnclosedObjectLiteral,
        IndentedUnclosedArrayLiteral
      ));
      convertInvocationOrAccess = (function () {
        var linkTypes;
        linkTypes = {
          access: (function () {
            var indexTypes;
            indexTypes = {
              multi: function (parser, index, child) {
                return function (parent) {
                  var result, setParent, tmp, tmpIds;
                  setParent = parent;
                  tmpIds = [];
                  if (parent.cacheable) {
                    tmp = parser.makeTmp(index, "ref", parent.type(parser));
                    tmpIds.push(tmp.id);
                    setParent = parser.Assign(index, tmp, "=", parent.doWrap(parser));
                    parent = tmp;
                  }
                  result = parser.Array(index, (function () {
                    var _arr, _arr2, _len, element, i;
                    for (_arr = [], _arr2 = __toArray(child.elements), i = 0, _len = _arr2.length; i < _len; ++i) {
                      element = _arr2[i];
                      _arr.push(parser.Access(
                        index,
                        i === 0 ? setParent : parent,
                        element
                      ));
                    }
                    return _arr;
                  }()));
                  if (tmpIds.length) {
                    return parser.TmpWrapper(index, result, tmpIds);
                  } else {
                    return result;
                  }
                };
              }
            };
            return function (parser, index, head, link, linkIndex, links) {
              var bindAccess, child, existentialOp, makeAccess, result, setChild,
                  setHead, tmp, tmpIds;
              if (link.bind) {
                bindAccess = function (parent, child) {
                  return parser.Call(
                    index,
                    parser.Ident(index, "__bind"),
                    [parent, child]
                  );
                };
              } else {
                bindAccess = function (parent, child) {
                  return parser.Access(index, parent, child);
                };
              }
              if (link.owns) {
                tmpIds = [];
                setHead = head;
                if (head.cacheable) {
                  tmp = parser.makeTmp(index, "ref", head.type(parser));
                  tmpIds.push(tmp.id);
                  setHead = parser.Assign(index, tmp, "=", head.doWrap(parser));
                  head = tmp;
                }
                child = link.child;
                setChild = child;
                if (child.cacheable) {
                  tmp = parser.makeTmp(index, "ref", child.type(parser));
                  tmpIds.push(tmp.id);
                  setChild = parser.Assign(index, tmp, "=", child.doWrap(parser));
                  child = tmp;
                }
                result = parser.If(
                  index,
                  (function () {
                    var existentialOp, ownershipOp;
                    ownershipOp = parser.getMacroByLabel("ownership");
                    if (!ownershipOp) {
                      throw Error("Cannot use ownership access until the ownership operator has been defined");
                    }
                    if (link.existential) {
                      existentialOp = parser.getMacroByLabel("existential");
                      if (!existentialOp) {
                        throw Error("Cannot use existential access until the existential operator has been defined");
                      }
                      return parser.Binary(
                        index,
                        existentialOp.func(
                          { op: "", node: setHead },
                          parser,
                          index
                        ),
                        "&&",
                        ownershipOp.func(
                          { left: head, op: "", right: setChild },
                          parser,
                          index
                        )
                      );
                    } else {
                      return ownershipOp.func(
                        { left: setHead, op: "", right: setChild },
                        parser,
                        index
                      );
                    }
                  }()),
                  convertCallChain(
                    parser,
                    index,
                    bindAccess(head, child),
                    __num(linkIndex) + 1,
                    links
                  )
                );
                if (tmpIds.length) {
                  return parser.TmpWrapper(index, result, tmpIds);
                } else {
                  return result;
                }
              } else {
                switch (link.type) {
                case "access":
                  makeAccess = function (parent) {
                    return bindAccess(parent, link.child);
                  };
                  break;
                case "accessIndex":
                  if (!__owns.call(indexTypes, link.child.type)) {
                    throw Error("Unknown index type: " + __strnum(link.child.type));
                  }
                  makeAccess = indexTypes[link.child.type](parser, index, link.child);
                  break;
                default: throw Error("Unknown link type: " + __strnum(link.type));
                }
                if (link.existential) {
                  tmpIds = [];
                  setHead = head;
                  if (head.cacheable) {
                    tmp = parser.makeTmp(index, "ref", head.type(parser));
                    tmpIds.push(tmp.id);
                    setHead = parser.Assign(index, tmp, "=", head.doWrap(parser));
                    head = tmp;
                  }
                  existentialOp = parser.getMacroByLabel("existential");
                  if (!existentialOp) {
                    throw Error("Cannot use existential access until the existential operator has been defined");
                  }
                  result = parser.If(
                    index,
                    existentialOp.func(
                      { op: "", node: setHead },
                      parser,
                      index
                    ),
                    convertCallChain(
                      parser,
                      index,
                      makeAccess(head),
                      __num(linkIndex) + 1,
                      links
                    )
                  );
                  if (tmpIds.length) {
                    return parser.TmpWrapper(index, result, tmpIds);
                  } else {
                    return result;
                  }
                } else {
                  return convertCallChain(
                    parser,
                    index,
                    makeAccess(head),
                    __num(linkIndex) + 1,
                    links
                  );
                }
              }
            };
          }()),
          call: function (parser, index, head, link, linkIndex, links) {
            var child, parent, result, setChild, setHead, setParent, tmp, tmpIds;
            if (!link.existential) {
              return convertCallChain(
                parser,
                index,
                parser.Call(
                  index,
                  head,
                  link.args,
                  link.isNew,
                  link.isApply
                ),
                __num(linkIndex) + 1,
                links
              );
            } else {
              tmpIds = [];
              setHead = head;
              if (head instanceof AccessNode && !link.isApply && !link.isNew) {
                parent = head.parent;
                child = head.child;
                setParent = parent;
                setChild = child;
                if (parent.cacheable) {
                  tmp = parser.makeTmp(index, "ref", parent.type(parser));
                  tmpIds.push(tmp.id);
                  setParent = parser.Assign(index, tmp, "=", parent.doWrap(parser));
                  parent = tmp;
                }
                if (child.cacheable) {
                  tmp = parser.makeTmp(index, "ref", child.type(parser));
                  tmpIds.push(tmp.id);
                  setChild = parser.Assign(index, tmp, "=", child.doWrap(parser));
                  child = tmp;
                }
                if (parent !== setParent || child !== setChild) {
                  setHead = parser.Access(index, setParent, setChild);
                  head = parser.Access(index, parent, child);
                }
              } else if (head.cacheable) {
                tmp = parser.makeTmp(index, "ref", head.type(parser));
                tmpIds.push(tmp.id);
                setHead = parser.Assign(index, tmp, "=", head.doWrap(parser));
                head = tmp;
              }
              result = parser.If(
                index,
                parser.Binary(
                  index,
                  parser.Unary(index, "typeof", setHead),
                  "===",
                  parser.Const(index, "function")
                ),
                convertCallChain(
                  parser,
                  index,
                  parser.Call(
                    index,
                    head,
                    link.args,
                    link.isNew,
                    link.isApply
                  ),
                  __num(linkIndex) + 1,
                  links
                )
              );
              if (tmpIds.length) {
                return parser.TmpWrapper(index, result, tmpIds);
              } else {
                return result;
              }
            }
          }
        };
        linkTypes.accessIndex = linkTypes.access;
        function convertCallChain(parser, index, head, linkIndex, links) {
          var link;
          if (!__lt(linkIndex, links.length)) {
            return head;
          } else {
            link = links[linkIndex];
            if (!__owns.call(linkTypes, link.type)) {
              throw Error("Unknown call-chain link: " + __strnum(link.type));
            }
            return linkTypes[link.type](
              parser,
              index,
              head,
              link,
              linkIndex,
              links
            );
          }
        }
        return function (isNew, head, tail, parser, index) {
          var _arr, _i, _len, _ref, links, part;
          if (tail.length === 0 && !isNew && head.type === "normal") {
            return head.node;
          }
          links = [];
          if (head.type === "thisAccess") {
            links.push({ type: "access", child: head.child, existential: head.existential });
          }
          for (_arr = __toArray(tail), _i = 0, _len = _arr.length; _i < _len; ++_i) {
            part = _arr[_i];
            switch (part.type) {
            case "protoAccess":
            case "protoAccessIndex":
              links.push({
                type: "access",
                child: parser.Const(index, "prototype"),
                existential: part.existential
              });
              links.push(((_ref = __import({}, part)).type = part.type === "protoAccess" ? "access" : "accessIndex", _ref));
              break;
            case "access":
            case "accessIndex":
              links.push(part);
              break;
            case "call":
              if (isNew && part.isApply) {
                throw ParserError("Cannot call with both new and @ at the same time", parser, index);
              }
              links.push(((_ref = __import({}, part)).isNew = isNew, _ref));
              isNew = false;
              break;
            case "generic":
              links.push({
                type: "access",
                child: parser.Const(index, "generic"),
                existential: false
              });
              links.push({ type: "call", args: part.args, existential: false });
              break;
            default: throw Error("Unknown link type: " + __strnum(part.type));
            }
          }
          if (isNew) {
            links.push({
              type: "call",
              args: [],
              existential: false,
              isNew: true,
              isApply: false
            });
          }
          return convertCallChain(
            parser,
            index,
            head.node,
            0,
            links
          );
        };
      }());
      function EmptyLinesSpaceBeforeAccess(parser, index) {
        if (parser.disallowSpaceBeforeAccess.peek()) {
          return Box(index);
        } else {
          return EmptyLinesSpace(parser, index);
        }
      }
      function SpaceBeforeAccess(parser, index) {
        if (parser.disallowSpaceBeforeAccess.peek()) {
          return Box(index);
        } else {
          return Space(parser, index);
        }
      }
      InvocationOrAccessPart = oneOf(
        (_ref = sequential(
          LessThanChar,
          [
            "this",
            separatedList(
              function (parser, index) {
                return BasicInvocationOrAccess(parser, index);
              },
              Comma
            )
          ],
          GreaterThan
        ), mutate(function (args) {
          return { type: "generic", args: args };
        })(_ref)),
        (_ref = sequential(
          ["existential", MaybeQuestionMarkChar],
          ["owns", MaybeExclamationPointChar],
          ["bind", MaybeAtSignChar],
          EmptyLinesSpaceBeforeAccess,
          ["type", PeriodOrDoubleColonChar],
          ["child", IdentifierNameConstOrNumberLiteral]
        ), mutate(function (x) {
          return {
            type: x.type === "::" ? "protoAccess" : "access",
            child: x.child,
            existential: x.existential,
            owns: x.owns,
            bind: x.bind
          };
        })(_ref)),
        (_ref = sequential(
          ["existential", MaybeQuestionMarkChar],
          ["owns", MaybeExclamationPointChar],
          ["bind", MaybeAtSignChar],
          ["type", maybe(DoubleColonChar)],
          OpenSquareBracketChar,
          [
            "child",
            allowSpaceBeforeAccess((_ref2 = separatedList(
              makeAlterStack.generic(Boolean)("asterixAsArrayLength", true)(Expression),
              CommaOrNewline
            ), mutate(function (nodes) {
              if (__num(nodes.length) > 1) {
                return { type: "multi", elements: nodes };
              } else {
                return { type: "single", node: nodes[0] };
              }
            })(_ref2)))
          ],
          CloseSquareBracket
        ), mutate(function (x, parser, index) {
          if (x.child.type === "single") {
            return {
              type: x.type === "::" ? "protoAccess" : "access",
              child: x.child.node,
              existential: x.existential,
              owns: x.owns,
              bind: x.bind
            };
          } else {
            if (x.owns) {
              throw ParserError("Cannot use ! when using a multiple or slicing index", parser, index);
            } else if (x.bind) {
              throw ParserError("Cannot use @ when using a multiple or slicing index", parser, index);
            }
            return {
              type: x.type === "::" ? "protoAccessIndex" : "accessIndex",
              child: x.child,
              existential: x.existential
            };
          }
        })(_ref)),
        (_ref = sequential(
          ["existential", bool(MaybeQuestionMarkChar)],
          ["isApply", bool(MaybeAtSignChar)],
          ["args", InvocationArguments]
        ), mutate(function (x) {
          return {
            type: "call",
            args: x.args,
            existential: x.existential,
            isNew: false,
            isApply: x.isApply
          };
        })(_ref))
      );
      _ref = sequential(
        ["isNew", bool(maybe(word("new")))],
        [
          "head",
          oneOf(
            (_ref2 = sequential(
              ["node", ThisShorthandLiteral],
              ["existential", MaybeQuestionMarkChar],
              ["owns", MaybeExclamationPointChar],
              ["bind", MaybeAtSignChar],
              ["child", IdentifierNameConstOrNumberLiteral]
            ), mutate(function (x, parser, index) {
              return __import({ type: "thisAccess" }, x);
            })(_ref2)),
            mutate(function (node) {
              if (!(node instanceof Node)) {
                throw TypeError("Expected node to be a " + __name(Node) + ", got " + __typeof(node));
              }
              return { type: "normal", node: node };
            })(PrimaryExpression)
          )
        ],
        ["tail", zeroOrMore(InvocationOrAccessPart)]
      );
      BasicInvocationOrAccess = mutate(function (_p, parser, index) {
        var head, isNew, tail;
        isNew = _p.isNew;
        head = _p.head;
        tail = _p.tail;
        return convertInvocationOrAccess(
          isNew,
          __import({}, head),
          tail,
          parser,
          index
        );
      })(_ref);
      SuperInvocation = cache((_ref = sequential(
        word("super"),
        SHORT_CIRCUIT,
        [
          "child",
          maybe(oneOf(
            sequential(EmptyLines, Space, Period, ["this", IdentifierNameConstOrNumberLiteral]),
            sequential(
              OpenSquareBracketChar,
              ["this", allowSpaceBeforeAccess(Expression)],
              CloseSquareBracket
            )
          ))
        ],
        ["args", InvocationArguments]
      ), mutate(function (_p, parser, index) {
        var args, child;
        child = _p.child;
        args = _p.args;
        return parser.Super(index, child, args);
      })(_ref)));
      Eval = cache((_ref = sequential(word("eval"), SHORT_CIRCUIT, ["this", InvocationArguments]), mutate(function (args, parser, index) {
        if (args.length !== 1) {
          throw ParserError("Expected only one argument to eval, got " + __strnum(args.length), parser, index);
        }
        return parser.Eval(index, args[0]);
      })(_ref)));
      InvocationOrAccess = cache(oneOf(
        function (parser, index) {
          var args, dollar, inAst;
          inAst = parser.inAst;
          if (!inAst.peek()) {
            return;
          }
          dollar = DollarSign(parser, Space(parser, index).index);
          if (!dollar) {
            return;
          }
          inAst.push(false);
          try {
            args = InvocationArguments(parser, dollar.index);
            if (!args) {
              return;
            }
            return Box(args.index, parser.Call(
              index,
              parser.Ident(index, "$"),
              args.value
            ));
          } finally {
            inAst.pop();
          }
        },
        BasicInvocationOrAccess,
        SuperInvocation,
        Eval
      ));
      inCascade = makeAlterStack.generic(Boolean)("inCascade", true);
      CascadePart = cache(sequential(
        except(SpreadToken),
        Period,
        check(Period),
        ["accesses", zeroOrMore(InvocationOrAccessPart)],
        ["assignment", maybe(inCascade(RighthandAssignment))]
      ));
      CascadePartWithCascade = function (parser, index) {
        return CascadePartWithCascade(parser, index);
      };
      CascadePartWithCascade = cache(sequential(
        ["main", CascadePart],
        [
          "subcascades",
          maybe(
            retainIndent(sequential(
              SomeEmptyLines,
              Advance,
              CheckIndent,
              [
                "this",
                separatedList(CascadePartWithCascade, SomeEmptyLinesWithCheckIndent)
              ],
              PopIndent
            )),
            function () {
              return [];
            }
          )
        ]
      ));
      Cascade = cache((_ref = sequential(
        ["head", InvocationOrAccess],
        [
          "tail",
          oneOf(
            function (parser, index) {
              if (parser.inCascade.peek()) {
                return Box(index, []);
              }
            },
            concat(
              zeroOrMore(sequential(SpaceBeforeAccess, [
                "this",
                mutate(function (main) {
                  return { main: main, subcascades: [] };
                })(CascadePart)
              ])),
              maybe(
                sequential(
                  IndentationRequired,
                  function (parser, index) {
                    if (!parser.disallowSpaceBeforeAccess.peek()) {
                      return Box(index);
                    }
                  },
                  SomeEmptyLines,
                  [
                    "this",
                    retainIndent(sequential(
                      Advance,
                      CheckIndent,
                      [
                        "this",
                        separatedList(CascadePartWithCascade, SomeEmptyLinesWithCheckIndent)
                      ],
                      PopIndent
                    ))
                  ]
                ),
                function () {
                  return [];
                }
              )
            )
          )
        ]
      ), mutate(function (_p, parser, index) {
        var handle, head, mutateFunctionMacro, tail;
        head = _p.head;
        tail = _p.tail;
        if (tail.length) {
          mutateFunctionMacro = parser.getMacroByLabel("cascade");
          if (!mutateFunctionMacro) {
            throw ParserError("Cannot use cascades until the cascade macro has been defined", parser, index);
          }
          handle = function (head, tail, index) {
            var _this;
            _this = this;
            if (tail.length) {
              return mutateFunctionMacro.func(
                {
                  op: "",
                  node: parser.Cascade(index, head, (function () {
                    var _arr, _arr2, _f, _i, _len;
                    for (_arr = [], _arr2 = __toArray(tail), _i = 0, _len = _arr2.length, _f = function (_v) {
                      var _ref, accesses, assignment, subcascades;
                      _ref = _v.main;
                      accesses = _ref.accesses;
                      assignment = _ref.assignment;
                      subcascades = _v.subcascades;
                      return function (node) {
                        var access, ret;
                        access = convertInvocationOrAccess(
                          false,
                          { type: "normal", node: node },
                          accesses,
                          parser,
                          index
                        );
                        if (assignment != null) {
                          ret = assignment(access, index);
                        } else {
                          ret = access;
                        }
                        if (subcascades) {
                          return handle(ret, subcascades, index);
                        } else {
                          return ret;
                        }
                      };
                    }; _i < _len; ++_i) {
                      _arr.push(_f.call(_this, _arr2[_i]));
                    }
                    return _arr;
                  }()))
                },
                parser,
                index
              );
            } else {
              return head;
            }
          };
          return handle(head, tail, index);
        } else {
          return head;
        }
      })(_ref)));
      PostfixUnaryOperation = cache(function (parser, index) {
        var _arr, _i, found, node, op, operator, rule;
        node = Cascade(parser, index);
        if (!node) {
          return;
        }
        found = true;
        while (found) {
          found = false;
          for (_arr = __toArray(parser.postfixUnaryOperators()), _i = _arr.length; _i--; ) {
            operator = _arr[_i];
            rule = operator.rule;
            op = rule(parser, node.index);
            if (!op) {
              continue;
            }
            node = Box(op.index, operator.func(
              { op: op.value, node: node.value },
              parser,
              index
            ));
            found = true;
            break;
          }
        }
        return node;
      });
      PrefixUnaryOperation = cache(function (parser, index) {
        var _arr, _i, node, op, operator, rule;
        for (_arr = __toArray(parser.prefixUnaryOperators()), _i = _arr.length; _i--; ) {
          operator = _arr[_i];
          rule = operator.rule;
          op = rule(parser, index);
          if (!op) {
            continue;
          }
          node = PrefixUnaryOperation(parser, op.index);
          if (!node) {
            continue;
          }
          return Box(node.index, operator.func(
            { op: op.value, node: node.value },
            parser,
            index
          ));
        }
        return PostfixUnaryOperation(parser, index);
      });
      BinaryOperationByPrecedence = (function () {
        var precedenceCache;
        precedenceCache = [];
        return function (precedence) {
          return precedenceCache[precedence] || (precedenceCache[precedence] = cache(function (parser, index) {
            var _arr, _i, _i2, _len, currentIndex, head, invert, inverted, j, left,
                nextRule, node, op, operator, operators, part, result, right, rule,
                tail;
            operators = parser.binaryOperators(precedence);
            if (!operators) {
              return PrefixUnaryOperation(parser, index);
            }
            nextRule = BinaryOperationByPrecedence(+precedence + 1);
            head = nextRule(parser, index);
            if (!head) {
              return;
            }
            for (_arr = __toArray(operators), _i = _arr.length; _i--; ) {
              operator = _arr[_i];
              rule = operator.rule;
              tail = [];
              currentIndex = head.index;
              while (true) {
                inverted = false;
                if (operator.invertible) {
                  invert = MaybeNotToken(parser, currentIndex);
                  if (invert.value) {
                    inverted = true;
                  }
                  currentIndex = invert.index;
                }
                op = rule(parser, currentIndex);
                if (!op) {
                  break;
                }
                node = nextRule(parser, op.index);
                if (!node) {
                  break;
                }
                currentIndex = node.index;
                tail.push({ inverted: inverted, op: op.value, node: node.value });
                if (operator.maximum && tail.length >= __num(operator.maximum)) {
                  break;
                }
              }
              if (tail.length) {
                if (!operator.rightToLeft) {
                  left = head.value;
                  for (_i2 = 0, _len = tail.length; _i2 < _len; ++_i2) {
                    part = tail[_i2];
                    left = operator.func(
                      { left: left, inverted: part.inverted, op: part.op, right: part.node },
                      parser,
                      index
                    );
                  }
                  result = left;
                } else {
                  right = tail[tail.length - 1].node;
                  for (j = tail.length; j--; ) {
                    part = tail[j];
                    right = operator.func(
                      {
                        left: j === 0 ? head.value : tail[j - 1].node,
                        inverted: part.inverted,
                        op: part.op,
                        right: right
                      },
                      parser,
                      index
                    );
                  }
                  result = right;
                }
                return Box(currentIndex, result);
              }
            }
            return head;
          }));
        };
      }());
      Logic = cache(BinaryOperationByPrecedence(0));
      ExpressionAsStatement = cache(oneOf(UseMacro, Logic));
      Expression = cache(inExpression(ExpressionAsStatement));
      LicenseComment = cache(sequential(
        SpaceChars,
        [
          "this",
          function (parser, index) {
            var _len, ch, currentIndex, i, indent, l, len, line, lines, result,
                source;
            source = parser.source;
            if (source.charCodeAt(index) !== 47 || source.charCodeAt(+index + 1) !== 42 || source.charCodeAt(+index + 2) !== 33) {
              return;
            }
            line = [47, 42, 33];
            lines = [line];
            len = source.length;
            currentIndex = +index + 3;
            for (; ; ++currentIndex) {
              if (currentIndex >= len) {
                throw ParserError("Multi-line license comment never ends", parser, index);
              }
              ch = source.charCodeAt(currentIndex);
              if (ch === 42 && source.charCodeAt(currentIndex + 1) === 47) {
                line.push(42, 47);
                result = [];
                for (i = 0, _len = lines.length; i < _len; ++i) {
                  l = lines[i];
                  if (i > 0) {
                    result.push("\n");
                  }
                  processCharCodes(l, result);
                }
                return Box(currentIndex + 2, parser.Comment(index, result.join("")));
              } else if (ch === 13 || ch === 10 || ch === 8232 || ch === 8233) {
                if (ch === 13 && data.charCodeAt(currentIndex + 1) === 10) {
                  ++currentIndex;
                }
                lines.push(line = []);
                indent = StringIndent(parser, currentIndex + 1);
                if (!indent) {
                  throw ParserError("Improper indent in multi-line license comment", parser, currentIndex + 1);
                }
                currentIndex = indent.index - 1;
              } else {
                line.push(ch);
              }
            }
          }
        ],
        Space
      ));
      MacroSyntaxParameterType = allowSpaceBeforeAccess((_ref = sequential(
        [
          "type",
          oneOf(
            Identifier,
            StringLiteral,
            (_ref2 = sequential(
              OpenParenthesis,
              EmptyLines,
              [
                "this",
                function (parser, index) {
                  return MacroSyntaxParameters(parser, index);
                }
              ],
              EmptyLines,
              MaybeCommaOrNewline,
              CloseParenthesis
            ), mutate(function (value, parser, index) {
              return parser.SyntaxSequence(index, value);
            })(_ref2)),
            (_ref2 = sequential(
              OpenParenthesis,
              EmptyLines,
              [
                "this",
                function (parser, index) {
                  return MacroSyntaxChoiceParameters(parser, index);
                }
              ],
              EmptyLines,
              CloseParenthesis
            ), mutate(function (value, parser, index) {
              return parser.SyntaxChoice(index, value);
            })(_ref2))
          )
        ],
        [
          "multiplier",
          maybe(oneOf(symbol("?"), symbol("*"), symbol("+")))
        ]
      ), mutate(function (_p, parser, index) {
        var multiplier, type;
        type = _p.type;
        multiplier = _p.multiplier;
        if (multiplier) {
          return parser.SyntaxMany(index, type, multiplier);
        } else {
          return type;
        }
      })(_ref)));
      MacroSyntaxParameter = oneOf(StringLiteral, (_ref = sequential(
        [
          "ident",
          oneOf(ThisOrShorthandLiteral, Identifier)
        ],
        [
          "type",
          maybe(sequential(word("as"), ["this", MacroSyntaxParameterType]))
        ]
      ), mutate(function (_p, parser, index) {
        var ident, type;
        ident = _p.ident;
        type = _p.type;
        return parser.SyntaxParam(index, ident, type);
      })(_ref)));
      MacroSyntaxParameters = separatedList(MacroSyntaxParameter, Comma);
      MacroSyntaxChoiceParameters = separatedList(MacroSyntaxParameterType, Pipe);
      MacroOptions = maybe(
        (_ref = sequential(word("with"), ["this", UnclosedObjectLiteral]), mutate(function (object, parser, index) {
          object = object.reduce(parser);
          if (!object.isLiteral()) {
            throw ParserError("Macro options must be a literal object without any logic, invocation, or anything else", parser, index);
          }
          return object.literalValue();
        })(_ref)),
        function () {
          return {};
        }
      );
      function addMacroSyntaxParametersToScope(params, scope) {
        var _arr, _i, _len, ident, param;
        for (_arr = __toArray(params), _i = 0, _len = _arr.length; _i < _len; ++_i) {
          param = _arr[_i];
          if (param instanceof SyntaxParamNode) {
            ident = param.ident;
            if (ident instanceof IdentNode) {
              scope.add(ident, true, Type.any);
            }
          }
        }
      }
      MacroSyntax = sequential(
        CheckIndent,
        word("syntax"),
        SHORT_CIRCUIT,
        function (parser, index) {
          var body, options, params, scope;
          scope = parser.pushScope(true);
          params = MacroSyntaxParameters(parser, index);
          if (!params) {
            throw SHORT_CIRCUIT;
          }
          options = MacroOptions(parser, params.index);
          parser.startMacroSyntax(index, params.value, options.value);
          addMacroSyntaxParametersToScope(params, scope);
          scope.add(
            parser.Ident(index, "macroName"),
            true,
            Type.string
          );
          body = FunctionBody(parser, options.index);
          if (!body) {
            throw SHORT_CIRCUIT;
          }
          parser.macroSyntax(
            index,
            "syntax",
            params.value,
            options.value,
            body.value
          );
          parser.popScope();
          return Box(body.index);
        },
        Space,
        CheckStop
      );
      MacroBody = oneOf(
        sequential(
          function (parser, index) {
            if (parser.options.noindent) {
              return Colon(parser, index);
            } else {
              return Box(index);
            }
          },
          Space,
          Newline,
          EmptyLines,
          retainIndent(sequential(
            function (parser, index) {
              if (parser.options.noindent) {
                return MaybeAdvance(parser, index);
              } else {
                return Advance(parser, index);
              }
            },
            separatedList(MacroSyntax, SomeEmptyLines),
            PopIndent
          )),
          End
        ),
        function (parser, index) {
          var _arr, _i, body, options, param, params, scope;
          scope = parser.pushScope(true);
          params = ParameterSequence(parser, index);
          if (!params) {
            throw SHORT_CIRCUIT;
          }
          for (_arr = __toArray(params.value), _i = _arr.length; _i--; ) {
            param = _arr[_i];
            addParamToScope(scope, param, true);
          }
          options = MacroOptions(parser, params.index);
          body = FunctionBody(parser, options.index);
          if (!body) {
            throw SHORT_CIRCUIT;
          }
          parser.macroSyntax(
            index,
            "call",
            params.value,
            options.value,
            body.value
          );
          parser.popScope();
          return Box(body.index, parser.Nothing(index));
        }
      );
      inMacro = makeAlterStack.generic(Boolean)("inMacro", true);
      _DefineMacro = sequential(word("macro"), [
        "this",
        inMacro(function (parser, index) {
          var body, names;
          names = MacroNames(parser, index);
          if (!names) {
            return;
          }
          parser.enterMacro(index, names.value);
          body = MacroBody(parser, names.index);
          parser.exitMacro();
          return Box(body.index, parser.Nothing(index));
        })
      ]);
      DefineSyntax = (function () {
        var topRule;
        topRule = sequential(
          word("define"),
          word("syntax"),
          SHORT_CIRCUIT,
          ["name", Identifier],
          EqualSign,
          ["value", MacroSyntaxParameters]
        );
        return inMacro(function (parser, index) {
          var body, top;
          top = topRule(parser, index);
          if (!top) {
            return;
          }
          body = FunctionBody(parser, top.index);
          parser.defineSyntax(index, top.value.name.name, top.value.value, body != null ? body.value : void 0);
          return Box(
            body ? body.index : top.index,
            parser.Nothing(index)
          );
        });
      }());
      _ref = sequential(
        word("define"),
        word("helper"),
        SHORT_CIRCUIT,
        ["name", Identifier],
        [
          "value",
          oneOf(
            sequential(EqualSign, ["this", Expression]),
            FunctionDeclaration
          )
        ]
      );
      DefineHelper = mutate(function (_p, parser, index) {
        var name, value;
        name = _p.name;
        value = _p.value;
        parser.defineHelper(index, name, value);
        return parser.Nothing(index);
      })(_ref);
      DefineOperator = (function () {
        var mainRule;
        mainRule = sequential(
          word("define"),
          word("operator"),
          SHORT_CIRCUIT,
          [
            "type",
            oneOf(word("binary"), word("assign"), word("unary"))
          ],
          [
            "ops",
            separatedList(NameOrSymbol, Comma)
          ],
          ["options", MacroOptions]
        );
        return inMacro(function (parser, index) {
          var _ref, body, ops, options, ret, scope, type, x;
          x = mainRule(parser, index);
          if (!x) {
            return;
          }
          _ref = x.value;
          type = _ref.type;
          ops = _ref.ops;
          options = _ref.options;
          scope = parser.pushScope(true);
          switch (type) {
          case "binary":
          case "assign":
            scope.add(
              parser.Ident(index, "left"),
              true,
              Type.any
            );
            scope.add(
              parser.Ident(index, "op"),
              true,
              Type.string
            );
            scope.add(
              parser.Ident(index, "right"),
              true,
              Type.any
            );
            break;
          case "unary":
            scope.add(
              parser.Ident(index, "op"),
              true,
              Type.string
            );
            scope.add(
              parser.Ident(index, "node"),
              true,
              Type.any
            );
            break;
          }
          body = FunctionBody(parser, x.index);
          if (!body) {
            throw SHORT_CIRCUIT;
          }
          switch (type) {
          case "binary":
            ret = parser.defineBinaryOperator(index, ops, options, body.value);
            break;
          case "assign":
            ret = parser.defineAssignOperator(index, ops, options, body.value);
            break;
          case "unary":
            ret = parser.defineUnaryOperator(index, ops, options, body.value);
            break;
          default: throw Error();
          }
          parser.popScope();
          return Box(body.index, parser.Nothing(index));
        });
      }());
      DefineMacro = cache(oneOf.generic(NothingNode)(_DefineMacro, DefineSyntax, DefineHelper, DefineOperator));
      _ref = sequential(
        word("const"),
        SHORT_CIRCUIT,
        ["name", Name],
        EqualSign,
        ["value", Expression]
      );
      DefineConstLiteral = mutate(function (_p, parser, index) {
        var name, value;
        name = _p.name;
        value = _p.value;
        value = parser.macroExpandAll(value.reduce(parser));
        if (!value.isLiteral()) {
          throw ParserError("const value must be a literal.", this, index);
        }
        parser.defineConst(index, name, value.literalValue());
        return parser.Nothing(index);
      })(_ref);
      Statement = cache(sequential(
        [
          "this",
          inStatement(oneOf.generic(Node)(
            LicenseComment,
            DefineMacro,
            DefineConstLiteral,
            Assignment,
            ExpressionAsStatement
          ))
        ],
        Space
      ));
      function unprettyText(text) {
        if (typeof text !== "string") {
          throw TypeError("Expected text to be a String, got " + __typeof(text));
        }
        return text.replace(/\s+/g, " ");
      }
      function EmbeddedReadLiteralText(parser, index) {
        var c, codes, currentIndex, len, source, text;
        source = parser.source;
        len = source.length;
        currentIndex = index;
        codes = [];
        for (; currentIndex < len; ++currentIndex) {
          if (EmbeddedOpen(parser, currentIndex) || EmbeddedOpenWrite(parser, currentIndex) || EmbeddedOpenComment(parser, currentIndex)) {
            break;
          }
          c = source.charCodeAt(currentIndex);
          if (c === 13 && source.charCodeAt(currentIndex + 1) === 10) {
            c = 10;
            ++currentIndex;
          }
          codes.push(c);
        }
        if (currentIndex === index) {
          return;
        }
        text = codesToString(codes);
        if (parser.options.embeddedUnpretty) {
          text = unprettyText(text);
        }
        return Box(currentIndex, parser.EmbedWrite(
          index,
          parser.Const(index, text),
          false
        ));
      }
      makeEmbeddedRule = (function () {
        var rules;
        function make(text) {
          var _arr, codes, i, len;
          if (typeof text !== "string") {
            throw TypeError("Expected text to be a String, got " + __typeof(text));
          }
          len = text.length;
          for (_arr = [], i = 0; i < len; ++i) {
            _arr.push(text.charCodeAt(i));
          }
          codes = _arr;
          return function (parser, index) {
            var i, source;
            source = parser.source;
            for (i = 0; i < len; ++i) {
              if (source.charCodeAt(__num(index) + i) !== codes[i]) {
                return;
              }
            }
            return Box(+index + len, text);
          };
        }
        rules = __create(null);
        function getEmbeddedRule(text) {
          return rules[text] || (rules[text] = make(text));
        }
        return function (key, defaultValue) {
          if (typeof key !== "string") {
            throw TypeError("Expected key to be a String, got " + __typeof(key));
          }
          return function (parser, index) {
            var text;
            text = parser.options[key];
            if (typeof text !== "string") {
              text = defaultValue;
            }
            return getEmbeddedRule(text)(parser, index);
          };
        };
      }());
      EmbeddedOpenComment = cache(makeEmbeddedRule("embeddedOpenComment", "<%--"));
      EmbeddedCloseComment = makeEmbeddedRule("embeddedCloseComment", "--%>");
      function EmbeddedComment(parser, index) {
        var any, close, currentIndex, len, open;
        open = EmbeddedOpenComment(parser, index);
        if (!open) {
          return;
        }
        currentIndex = open.index;
        len = parser.source.length;
        while (currentIndex < len) {
          close = EmbeddedCloseComment(parser, currentIndex);
          if (close) {
            currentIndex = close.index;
            break;
          }
          any = AnyChar(parser, currentIndex);
          if (!any) {
            break;
          }
          if (currentIndex === any.index) {
            throw Error("Infinite loop detected");
          }
          currentIndex = any.index;
        }
        return Box(currentIndex, parser.Nothing(index));
      }
      EmbeddedOpen = cache(makeEmbeddedRule("embeddedOpen", "<%"));
      EmbeddedClose = cache(sequential(EmptyLines, Space, oneOf(Eof, makeEmbeddedRule("embeddedClose", "%>"))));
      EmbeddedOpenWrite = cache(makeEmbeddedRule("embeddedOpenWrite", "<%="));
      EmbeddedCloseWrite = cache(sequential(EmptyLines, Space, oneOf(Eof, makeEmbeddedRule("embeddedCloseWrite", "%>"))));
      ColonEmbeddedClose = cache(sequential(Colon, EmbeddedClose));
      ColonEmbeddedCloseWrite = cache(sequential(Colon, EmbeddedCloseWrite));
      NotEmbeddedOpenComment = cache(except(EmbeddedOpenComment));
      NotEmbeddedOpenWrite = cache(except(EmbeddedOpenWrite));
      disallowEmbeddedText = makeAlterStack.generic(Boolean)("allowEmbeddedText", false);
      EmbeddedWriteExpression = disallowEmbeddedText((_ref = sequential(
        NotEmbeddedOpenComment,
        EmbeddedOpenWrite,
        ["this", Expression],
        EmbeddedCloseWrite
      ), mutate(function (node, parser, index) {
        return parser.EmbedWrite(index, node, true);
      })(_ref)));
      EmbeddedLiteralTextInnerPart = oneOf(EmbeddedComment, EmbeddedWriteExpression, EmbeddedReadLiteralText);
      EmbeddedLiteralText = cache((_ref = sequential(
        function (parser, index) {
          if (parser.options.embedded && parser.allowEmbeddedText.peek() && index < parser.source.length) {
            return Box(index);
          }
        },
        EmbeddedClose,
        ["this", zeroOrMore(EmbeddedLiteralTextInnerPart)],
        oneOf(Eof, sequential(NotEmbeddedOpenComment, NotEmbeddedOpenWrite, EmbeddedOpen))
      ), mutate(function (nodes, parser, index) {
        return parser.Block(index, nodes);
      })(_ref)));
      Semicolon = cache(withSpace(SemicolonChar));
      Semicolons = cache(zeroOrMore(Semicolon, true));
      Line = cache((function () {
        var SemicolonsStatement;
        SemicolonsStatement = sequential(Semicolons, ["this", Statement]);
        return function (parser, index) {
          var currentIndex, endSemis, indent, needSemicolon, parts, ret;
          indent = CheckIndent(parser, index);
          if (!indent) {
            return;
          }
          currentIndex = index;
          parts = [];
          needSemicolon = false;
          while (true) {
            ret = EmbeddedLiteralText(parser, currentIndex);
            if (ret) {
              if (!(ret.value instanceof Node)) {
                throw TypeError("Expected EmbeddedLiteralText to return a Node, got " + __typeof(ret.value));
              }
              needSemicolon = false;
              parts.push(ret.value);
              currentIndex = ret.index;
            } else {
              if (needSemicolon) {
                ret = SemicolonsStatement(parser, currentIndex);
              } else {
                ret = Statement(parser, currentIndex);
              }
              if (ret) {
                if (!(ret.value instanceof Node)) {
                  throw TypeError("Expected " + (needSemicolon ? "Semicolons" : "") + "Statement to return a Node, got " + __typeof(ret.value));
                }
                needSemicolon = true;
                parts.push(ret.value);
                currentIndex = ret.index;
              } else {
                break;
              }
            }
          }
          if (parts.length === 0) {
            return;
          }
          endSemis = Semicolons(parser, currentIndex);
          if (endSemis) {
            currentIndex = endSemis.index;
          }
          return Box(currentIndex, parts);
        };
      }()));
      function _BlockMutator(lines, parser, index) {
        var _arr, _arr2, _len, _len2, i, item, j, nodes, part;
        nodes = [];
        for (_arr = __toArray(lines), i = 0, _len = _arr.length; i < _len; ++i) {
          item = _arr[i];
          for (_arr2 = __toArray(item), j = 0, _len2 = _arr2.length; j < _len2; ++j) {
            part = _arr2[j];
            if (!(part instanceof Node)) {
              throw TypeError("Expected lines[" + i + "][" + j + "] to be a Node, got " + __typeof(part));
            } else if (part instanceof BlockNode && item.label == null) {
              nodes.push.apply(nodes, __toArray(part.nodes));
            } else if (!(part instanceof NothingNode)) {
              nodes.push(part);
            }
          }
        }
        switch (nodes.length) {
        case 0: return parser.Nothing(index);
        case 1: return nodes[0];
        default:
          return parser.Block(index, nodes);
        }
      }
      RootInnerP = __promise(function (parser, index) {
        var _e, _send, _state, _step, _throw, currentIndex, head, item, result,
            separator;
        _state = 0;
        function _close() {
          _state = 9;
        }
        function _step(_received) {
          while (true) {
            switch (_state) {
            case 0:
              parser.clearCache();
              head = Line(parser, index);
              _state = !head ? 9 : 1;
              break;
            case 1:
              result = [head.value];
              currentIndex = head.index;
              ++_state;
            case 2: ++_state;
            case 3:
              parser.clearCache();
              _state = !parser.options.sync ? 4 : 5;
              break;
            case 4:
              ++_state;
              return { done: false, value: __defer.fulfilled(void 0) };
            case 5:
              separator = SomeEmptyLines(parser, currentIndex);
              _state = !separator ? 8 : 6;
              break;
            case 6:
              item = Line(parser, separator.index);
              _state = !item ? 8 : 7;
              break;
            case 7:
              currentIndex = item.index;
              result.push(item.value);
              _state = 2;
              break;
            case 8:
              parser.clearCache();
              ++_state;
              return {
                done: true,
                value: Box(currentIndex, _BlockMutator(result, parser, index))
              };
            case 9:
              return { done: true, value: void 0 };
            default: throw Error("Unknown state: " + _state);
            }
          }
        }
        function _throw(_e) {
          _close();
          throw _e;
        }
        function _send(_received) {
          try {
            return _step(_received);
          } catch (_e) {
            _throw(_e);
          }
        }
        return {
          close: _close,
          iterator: function () {
            return this;
          },
          next: function () {
            return _send(void 0);
          },
          send: _send,
          "throw": function (_e) {
            _throw(_e);
            return _send(void 0);
          }
        };
      });
      _Block = mutate(_BlockMutator, separatedList(Line, SomeEmptyLines));
      Block = oneOf(
        sequential(CheckIndent, [
          "this",
          oneOf.generic(Node)(IndentedUnclosedObjectLiteralInner, IndentedUnclosedArrayLiteralInner)
        ]),
        _Block
      );
      EmbeddedBlock = sequential(
        NotEmbeddedOpenWrite,
        NotEmbeddedOpenComment,
        EmbeddedOpen,
        ["this", _Block],
        EmbeddedClose
      );
      EmbeddedLiteralTextInnerPartWithBlock = oneOf(EmbeddedLiteralTextInnerPart, EmbeddedBlock);
      EmbeddedRootInnerP = __promise(function (parser, index) {
        var _e, _send, _state, _step, _throw, currentIndex, item, nodes;
        _state = 0;
        function _close() {
          _state = 7;
        }
        function _step(_received) {
          while (true) {
            switch (_state) {
            case 0:
              nodes = [];
              currentIndex = index;
              ++_state;
            case 1: ++_state;
            case 2:
              parser.clearCache();
              _state = !parser.options.sync ? 3 : 4;
              break;
            case 3:
              ++_state;
              return { done: false, value: __defer.fulfilled(void 0) };
            case 4:
              item = EmbeddedLiteralTextInnerPartWithBlock(parser, currentIndex);
              _state = !item ? 6 : 5;
              break;
            case 5:
              nodes.push(item.value);
              if (currentIndex === item.index) {
                throw Error("Infinite loop detected");
              }
              currentIndex = item.index;
              _state = 1;
              break;
            case 6:
              parser.clearCache();
              ++_state;
              return {
                done: true,
                value: Box(currentIndex, parser.Block(index, nodes))
              };
            case 7:
              return { done: true, value: void 0 };
            default: throw Error("Unknown state: " + _state);
            }
          }
        }
        function _throw(_e) {
          _close();
          throw _e;
        }
        function _send(_received) {
          try {
            return _step(_received);
          } catch (_e) {
            _throw(_e);
          }
        }
        return {
          close: _close,
          iterator: function () {
            return this;
          },
          next: function () {
            return _send(void 0);
          },
          send: _send,
          "throw": function (_e) {
            _throw(_e);
            return _send(void 0);
          }
        };
      });
      EndNoIndent = sequential(EmptyLines, Space, maybe(Semicolons), word("end"));
      BodyWithIndent = retainIndent(sequential(
        Space,
        Newline,
        EmptyLines,
        Advance,
        ["this", Block],
        PopIndent
      ));
      BodyNoIndentNoEnd = sequential(
        function (parser, index) {
          if (ColonNewline(parser, index) || parser.options.embedded && (ColonEmbeddedClose(parser, index) || ColonEmbeddedCloseWrite(parser, index))) {
            return Box(index);
          }
        },
        Colon,
        EmptyLines,
        [
          "this",
          function (parser, index) {
            var indent;
            indent = parser.indent;
            indent.push(+indent.peek() + 1);
            try {
              return Block(parser, index);
            } finally {
              indent.pop();
            }
          }
        ]
      );
      BodyNoIndent = sequential(
        ["this", BodyNoIndentNoEnd],
        EndNoIndent
      );
      Body = cache(function (parser, index) {
        var ret, scope;
        scope = parser.pushScope(true);
        if (parser.options.noindent) {
          ret = BodyNoIndent(parser, index);
        } else {
          ret = BodyWithIndent(parser, index);
        }
        parser.popScope();
        return ret;
      });
      BodyNoEnd = cache(function (parser, index) {
        var ret, scope;
        scope = parser.pushScope(true);
        if (parser.options.noindent) {
          ret = BodyNoIndentNoEnd(parser, index);
        } else {
          ret = BodyWithIndent(parser, index);
        }
        parser.popScope();
        return ret;
      });
      BOM = maybe(character('"\ufeff"', 65279));
      Shebang = maybe(sequential(HashSignChar, ExclamationPointChar, zeroOrMore(anyExcept(Newline))));
      RootP = __promise(function (parser) {
        var _e, _send, _state, _step, _throw, bom, empty, emptyAgain, endSpace,
            root, shebang;
        _state = 0;
        function _close() {
          _state = 8;
        }
        function _step(_received) {
          while (true) {
            switch (_state) {
            case 0:
              if (!(parser instanceof Parser)) {
                throw TypeError("Expected parser to be a " + __name(Parser) + ", got " + __typeof(parser));
              }
              bom = BOM(parser, 0);
              shebang = Shebang(parser, bom.index);
              empty = EmptyLines(parser, shebang.index);
              _state = Eof(parser, empty.index) ? 1 : 2;
              break;
            case 1:
              _state = 8;
              return {
                done: true,
                value: Box(empty.index, parser.Root(empty.index, parser.options.filename, parser.Nothing(empty.index)))
              };
            case 2:
              parser.clearCache();
              _state = parser.options.sync ? 3 : 4;
              break;
            case 3:
              root = RootInnerP.sync(parser, empty.index);
              _state = 6;
              break;
            case 4:
              ++_state;
              return {
                done: false,
                value: RootInnerP(parser, empty.index)
              };
            case 5:
              root = _received;
              ++_state;
            case 6:
              parser.clearCache();
              _state = !root ? 8 : 7;
              break;
            case 7:
              emptyAgain = EmptyLines(parser, root.index);
              endSpace = Space(parser, emptyAgain.index);
              parser.clearCache();
              ++_state;
              return {
                done: true,
                value: Box(endSpace.index, parser.Root(empty.index, parser.options.filename, root.value))
              };
            case 8:
              return { done: true, value: void 0 };
            default: throw Error("Unknown state: " + _state);
            }
          }
        }
        function _throw(_e) {
          _close();
          throw _e;
        }
        function _send(_received) {
          try {
            return _step(_received);
          } catch (_e) {
            _throw(_e);
          }
        }
        return {
          close: _close,
          iterator: function () {
            return this;
          },
          next: function () {
            return _send(void 0);
          },
          send: _send,
          "throw": function (_e) {
            _throw(_e);
            return _send(void 0);
          }
        };
      });
      EmbeddedRootP = __promise(function (parser) {
        var _e, _send, _state, _step, _throw, bom, root, shebang;
        _state = 0;
        function _close() {
          _state = 6;
        }
        function _step(_received) {
          while (true) {
            switch (_state) {
            case 0:
              if (!(parser instanceof Parser)) {
                throw TypeError("Expected parser to be a " + __name(Parser) + ", got " + __typeof(parser));
              }
              bom = BOM(parser, 0);
              shebang = Shebang(parser, bom.index);
              parser.clearCache();
              _state = parser.options.sync ? 1 : 2;
              break;
            case 1:
              root = EmbeddedRootInnerP.sync(parser, shebang.index);
              _state = 4;
              break;
            case 2:
              ++_state;
              return {
                done: false,
                value: EmbeddedRootInnerP(parser, shebang.index)
              };
            case 3:
              root = _received;
              ++_state;
            case 4:
              parser.clearCache();
              _state = !root ? 6 : 5;
              break;
            case 5:
              ++_state;
              return {
                done: true,
                value: Box(root.index, parser.Root(
                  0,
                  parser.options.filename,
                  root.value,
                  true,
                  parser.inGenerator.peek()
                ))
              };
            case 6:
              return { done: true, value: void 0 };
            default: throw Error("Unknown state: " + _state);
            }
          }
        }
        function _throw(_e) {
          _close();
          throw _e;
        }
        function _send(_received) {
          try {
            return _step(_received);
          } catch (_e) {
            _throw(_e);
          }
        }
        return {
          close: _close,
          iterator: function () {
            return this;
          },
          next: function () {
            return _send(void 0);
          },
          send: _send,
          "throw": function (_e) {
            _throw(_e);
            return _send(void 0);
          }
        };
      });
      EmbeddedRootGeneratorP = __promise(function (parser) {
        var _e, _send, _state, _step, _throw, result;
        _state = 0;
        function _close() {
          _state = 5;
        }
        function _step(_received) {
          while (true) {
            switch (_state) {
            case 0:
              if (!(parser instanceof Parser)) {
                throw TypeError("Expected parser to be a " + __name(Parser) + ", got " + __typeof(parser));
              }
              parser.inGenerator.push(true);
              _state = parser.options.sync ? 1 : 2;
              break;
            case 1:
              result = EmbeddedRootP.sync(parser);
              _state = 4;
              break;
            case 2:
              ++_state;
              return { done: false, value: EmbeddedRootP(parser) };
            case 3:
              result = _received;
              ++_state;
            case 4:
              parser.inGenerator.pop();
              ++_state;
              return { done: true, value: result };
            case 5:
              return { done: true, value: void 0 };
            default: throw Error("Unknown state: " + _state);
            }
          }
        }
        function _throw(_e) {
          _close();
          throw _e;
        }
        function _send(_received) {
          try {
            return _step(_received);
          } catch (_e) {
            _throw(_e);
          }
        }
        return {
          close: _close,
          iterator: function () {
            return this;
          },
          next: function () {
            return _send(void 0);
          },
          send: _send,
          "throw": function (_e) {
            _throw(_e);
            return _send(void 0);
          }
        };
      });
      AnyObjectLiteral = cache(oneOf(UnclosedObjectLiteral, ObjectLiteral, IndentedUnclosedObjectLiteral));
      AnyArrayLiteral = cache(oneOf(ArrayLiteral, IndentedUnclosedArrayLiteral));
      DedentedBody = cache(withSpace(oneOf(
        sequential(Newline, EmptyLines, ["this", Block]),
        sequential(
          function (parser, index) {
            if (parser.options.embedded) {
              return Box(index);
            }
          },
          check(EmbeddedClose),
          EmptyLines,
          ["this", Block]
        ),
        Nothing
      )));
      Stack = __genericFunc(1, function (T) {
        var _instanceof_T;
        _instanceof_T = __getInstanceof(T);
        return (function () {
          var _Stack_prototype;
          function Stack(initial) {
            var _this;
            _this = this instanceof Stack ? this : __create(_Stack_prototype);
            if (!_instanceof_T(initial)) {
              throw TypeError("Expected initial to be a " + __name(T) + ", got " + __typeof(initial));
            }
            _this.initial = initial;
            _this.data = [];
            return _this;
          }
          _Stack_prototype = Stack.prototype;
          Stack.displayName = "Stack<" + (T != null ? __name(T) : "") + ">";
          _Stack_prototype.count = function () {
            return this.data.length;
          };
          _Stack_prototype.push = function (value) {
            if (!_instanceof_T(value)) {
              throw TypeError("Expected value to be a " + __name(T) + ", got " + __typeof(value));
            }
            this.data.push(value);
          };
          _Stack_prototype.pop = function () {
            var data;
            data = this.data;
            if (data.length === 0) {
              throw Error("Cannot pop");
            }
            return data.pop();
          };
          _Stack_prototype.canPop = function () {
            return __num(this.data.length) > 0;
          };
          _Stack_prototype.peek = function () {
            var data, len;
            data = this.data;
            len = data.length;
            if (len === 0) {
              return this.initial;
            } else {
              return data[__num(len) - 1];
            }
          };
          return Stack;
        }());
      });
      function makeMacroHolder() {
        return MacroHolder(
          {
            Logic: preventUnclosedObjectLiteral(Logic),
            Expression: Expression,
            Assignment: Assignment,
            ExpressionOrAssignment: ExpressionOrAssignment,
            ExpressionOrAssignmentOrBody: ExpressionOrAssignmentOrBody,
            FunctionDeclaration: FunctionDeclaration,
            Statement: Statement,
            Body: Body,
            BodyNoEnd: BodyNoEnd,
            GeneratorBody: GeneratorBody,
            GeneratorBodyNoEnd: GeneratorBodyNoEnd,
            End: End,
            Identifier: Identifier,
            SimpleAssignable: IdentifierOrSimpleAccess,
            Parameter: Parameter,
            InvocationArguments: InvocationArguments,
            ObjectLiteral: AnyObjectLiteral,
            ArrayLiteral: AnyArrayLiteral,
            DedentedBody: DedentedBody,
            ObjectKey: ObjectKey,
            Type: TypeReference,
            NoSpace: NoSpace,
            ColonEqual: ColonEqual
          },
          macroName,
          wordOrSymbol,
          oneOf,
          sequential
        );
      }
      Parser = (function () {
        var _Parser_prototype, ASSIGN_OPERATOR, BINARY_OPERATOR, DEFINE_SYNTAX,
            deserializeParams, deserializeParamType, macroDeserializers,
            macroSyntaxConstLiterals, macroSyntaxTypes, UNARY_OPERATOR;
        function Parser(source, macros, options) {
          var _this;
          _this = this instanceof Parser ? this : __create(_Parser_prototype);
          if (source == null) {
            source = "";
          } else if (typeof source !== "string") {
            throw TypeError("Expected source to be a String, got " + __typeof(source));
          }
          _this.source = source;
          if (macros == null) {
            macros = makeMacroHolder();
          } else if (!(macros instanceof MacroHolder)) {
            throw TypeError("Expected macros to be a " + __name(MacroHolder) + ", got " + __typeof(macros));
          }
          _this.macros = macros;
          if (options == null) {
            options = {};
          } else if (typeof options !== "object" || options === null) {
            throw TypeError("Expected options to be an Object, got " + __typeof(options));
          }
          _this.options = options;
          _this.indent = Stack.generic(Number)(0);
          _this.position = Stack.generic(String)("statement");
          _this.inAst = Stack.generic(Boolean)(false);
          _this.inGenerator = Stack.generic(Boolean)(false);
          _this.inFunctionTypeParams = Stack.generic(Boolean)(false);
          _this.preventUnclosedObjectLiteral = Stack.generic(Boolean)(false);
          _this.allowEmbeddedText = Stack.generic(Boolean)(true);
          _this.inMacro = Stack.generic(Boolean)(false);
          _this.inAst = Stack.generic(Boolean)(false);
          _this.inEvilAst = Stack.generic(Boolean)(false);
          _this.asterixAsArrayLength = Stack.generic(Boolean)(false);
          _this.disallowSpaceBeforeAccess = Stack.generic(Boolean)(false);
          _this.inCascade = Stack.generic(Boolean)(false);
          _this.requireParameterSequence = Stack.generic(Boolean)(false);
          _this.scope = Stack.generic(Scope)(Scope(null, true));
          _this.failureMessages = [];
          _this.failureIndex = -1;
          _this.calculateLineInfo();
          _this.cache = [];
          _this.currentTmpId = -1;
          return _this;
        }
        _Parser_prototype = Parser.prototype;
        Parser.displayName = "Parser";
        _Parser_prototype.buildError = function (message, node) {
          var index;
          if (typeof message !== "string") {
            throw TypeError("Expected message to be a String, got " + __typeof(message));
          }
          if (typeof node !== "number" && !(node instanceof Node)) {
            throw TypeError("Expected node to be one of Number or " + __name(Node) + ", got " + __typeof(node));
          }
          if (typeof node === "number") {
            index = node;
          } else {
            index = node.index;
          }
          return MacroError(message, this, index);
        };
        _Parser_prototype.makeTmp = function (index, name, type) {
          if (typeof name !== "string") {
            throw TypeError("Expected name to be a String, got " + __typeof(name));
          }
          if (type == null) {
            type = Type.any;
          } else if (!(type instanceof Type)) {
            throw TypeError("Expected type to be a " + __name(Type) + ", got " + __typeof(type));
          }
          return this.Tmp(index, this.currentTmpId = __num(this.currentTmpId) + 1, name, type);
        };
        function makeGetPosition(lineInfo) {
          return function (index) {
            var current, i, left, right;
            if (typeof index !== "number") {
              throw TypeError("Expected index to be a Number, got " + __typeof(index));
            }
            left = 0;
            right = lineInfo.length;
            while (left !== right) {
              i = Math.floor((left + right) / 2);
              current = lineInfo[i];
              if (current > index) {
                right = i;
              } else if (current < index) {
                if (left === i) {
                  break;
                }
                left = i;
              } else {
                left = i;
                break;
              }
            }
            return { line: left + 1, column: index - __num(lineInfo[left]) + 1 };
          };
        }
        _Parser_prototype.calculateLineInfo = function () {
          var index, lineInfo, match, newlineRegex, source;
          newlineRegex = /(?:\r\n?|[\n\u2028\u2029])/g;
          source = this.source;
          lineInfo = this.lineInfo = [];
          index = 0;
          lineInfo.push(0);
          while (true) {
            match = newlineRegex.exec(source);
            if (!match) {
              break;
            }
            index = __num(match.index) + __num(match[0].length);
            lineInfo.push(index);
          }
          this.getPosition = makeGetPosition(lineInfo);
        };
        _Parser_prototype.indexFromPosition = function (line, column) {
          var lineInfo;
          if (typeof line !== "number") {
            throw TypeError("Expected line to be a Number, got " + __typeof(line));
          }
          if (typeof column !== "number") {
            throw TypeError("Expected column to be a Number, got " + __typeof(column));
          }
          lineInfo = this.lineInfo[line - 1];
          if (lineInfo != null) {
            return __num(lineInfo) + column - 1;
          } else {
            return 0;
          }
        };
        _Parser_prototype.getPosition = function (index) {
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          throw Error("line-info not initialized");
        };
        _Parser_prototype.getLine = function (index) {
          if (index == null) {
            index = this.index;
          } else if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          return this.getPosition(index).line;
        };
        _Parser_prototype.getColumn = function (index) {
          if (index == null) {
            index = this.index;
          } else if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          return this.getPosition(index).column;
        };
        _Parser_prototype.fail = function (message, index) {
          if (typeof message !== "string") {
            throw TypeError("Expected message to be a String, got " + __typeof(message));
          }
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          if (index > __num(this.failureIndex)) {
            this.failureMessages = [];
            this.failureIndex = index;
          }
          if (index >= __num(this.failureIndex)) {
            this.failureMessages.push(message);
          }
        };
        function buildExpected(messages) {
          var errors;
          errors = unique(messages).sort(function (a, b) {
            return __cmp(a.toLowerCase(), b.toLowerCase());
          });
          switch (errors.length) {
          case 0: return "End of input";
          case 1: return errors[0];
          case 2: return __strnum(errors[0]) + " or " + __strnum(errors[1]);
          default:
            return __strnum(__slice.call(errors, 0, -1).join(", ")) + ", or " + __strnum(errors[__num(errors.length) - 1]);
          }
        }
        _Parser_prototype.getFailure = function (index) {
          var lastToken, source;
          if (index == null) {
            index = this.failureIndex;
          } else if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          source = this.source;
          if (index < __num(source.length)) {
            lastToken = JSON.stringify(source.substring(index, index + 20));
          } else {
            lastToken = "end-of-input";
          }
          return ParserError("Expected " + __strnum(buildExpected(this.failureMessages)) + ", but " + __str(lastToken) + " found", this, index);
        };
        _Parser_prototype.pushScope = function (isTop, parent) {
          var scope;
          if (isTop == null) {
            isTop = false;
          } else if (typeof isTop !== "boolean") {
            throw TypeError("Expected isTop to be a Boolean, got " + __typeof(isTop));
          }
          if (parent == null) {
            parent = null;
          } else if (!(parent instanceof Scope)) {
            throw TypeError("Expected parent to be one of " + (__name(Scope) + " or null") + ", got " + __typeof(parent));
          }
          scope = (parent || this.scope.peek()).clone(isTop);
          this.scope.push(scope);
          return scope;
        };
        _Parser_prototype.popScope = function () {
          this.scope.pop();
        };
        _Parser_prototype.getPackageVersion = function () {
          var _ref;
          if ((_ref = this._packageVersion) == null) {
            return this._packageVersion = getPackageVersion(this.options.filename);
          } else {
            return _ref;
          }
        };
        _Parser_prototype.hasMacroOrOperator = function (name) {
          if (typeof name !== "string") {
            throw TypeError("Expected name to be a String, got " + __typeof(name));
          }
          return this.macros.hasMacroOrOperator(name);
        };
        _Parser_prototype.assignOperators = function () {
          return this.macros.assignOperators;
        };
        _Parser_prototype.allBinaryOperators = function () {
          return this.macros.allBinaryOperators();
        };
        _Parser_prototype.binaryOperators = function (precedence) {
          return this.macros.binaryOperators[precedence];
        };
        _Parser_prototype.prefixUnaryOperators = function () {
          return this.macros.prefixUnaryOperators;
        };
        _Parser_prototype.postfixUnaryOperators = function () {
          return this.macros.postfixUnaryOperators;
        };
        _Parser_prototype.getMacroByName = function (name) {
          if (typeof name !== "string") {
            throw TypeError("Expected name to be a String, got " + __typeof(name));
          }
          return this.macros.getByName(name);
        };
        _Parser_prototype.getMacroByLabel = function (label) {
          if (typeof label !== "string") {
            throw TypeError("Expected label to be a String, got " + __typeof(label));
          }
          return this.macros.getByLabel(label);
        };
        _Parser_prototype.enterMacro = function (index, names) {
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          if (!names) {
            throw Error("Must provide a macro name");
          }
          if (this.currentMacro) {
            throw ParserError("Attempting to define a macro " + __strnum(quote(String(names))) + " inside a macro " + __strnum(quote(String(this.currentMacro))), this, index);
          }
          this.currentMacro = names;
        };
        _Parser_prototype.exitMacro = function () {
          if (!this.currentMacro) {
            throw Error("Attempting to exit a macro when not in one");
          }
          this.currentMacro = null;
        };
        _Parser_prototype.defineHelper = function (i, name, value) {
          var _ref, dependencies, helper, node, translator, type;
          if (!(name instanceof IdentNode)) {
            throw TypeError("Expected name to be a " + __name(IdentNode) + ", got " + __typeof(name));
          }
          if (!(value instanceof Node)) {
            throw TypeError("Expected value to be a " + __name(Node) + ", got " + __typeof(value));
          }
          translator = require("./jstranslator");
          node = this.macroExpandAll(value).reduce(this);
          type = node.type(this);
          _ref = translator.defineHelper(
            this.macros,
            this.getPosition,
            name,
            node,
            type
          );
          helper = _ref.helper;
          dependencies = _ref.dependencies;
          if (this.options.serializeMacros) {
            this.macros.addSerializedHelper(name.name, helper, type, dependencies);
          }
        };
        macroSyntaxConstLiterals = {
          ",": Comma,
          ";": Semicolon,
          ":": Colon,
          ":=": ColonEqual,
          "": Nothing,
          "\n": SomeEmptyLinesWithCheckIndent,
          "<": LessThan,
          ">": GreaterThan,
          "(": OpenParenthesis,
          ")": CloseParenthesis,
          "[": OpenSquareBracket,
          "]": CloseSquareBracket,
          "{": OpenCurlyBrace,
          "}": CloseCurlyBrace,
          end: End
        };
        function reduceObject(o, obj) {
          var _arr, _arr2, _i, _len, item, k, result, v;
          if (__isArray(obj)) {
            for (_arr = [], _arr2 = __toArray(obj), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
              item = _arr2[_i];
              _arr.push(reduceObject(o, item));
            }
            return _arr;
          } else if (obj instanceof Node) {
            return obj.reduce(o);
          } else if (typeof obj === "object" && obj !== null) {
            result = {};
            for (k in obj) {
              if (__owns.call(obj, k)) {
                v = obj[k];
                result[k] = reduceObject(o, v);
              }
            }
            return result;
          } else {
            return obj;
          }
        }
        function makeMacroRoot(index, params, body) {
          return this.Root(index, void 0, this.Return(
            index,
            this.Function(
              index,
              [
                params,
                this.Param(
                  index,
                  this.Ident(index, "__wrap"),
                  void 0,
                  false,
                  true,
                  void 0
                ),
                this.Param(
                  index,
                  this.Ident(index, "__node"),
                  void 0,
                  false,
                  true,
                  void 0
                ),
                this.Param(
                  index,
                  this.Ident(index, "__const"),
                  void 0,
                  false,
                  true,
                  void 0
                )
              ],
              body,
              true,
              false
            ),
            false
          ));
        }
        function serializeParamType(asType) {
          if (asType instanceof IdentNode) {
            return ["ident", asType.name];
          } else if (asType instanceof SyntaxSequenceNode) {
            return ["sequence"].concat(__toArray(fixArray(serializeParams(asType.params))));
          } else if (asType instanceof SyntaxChoiceNode) {
            return ["choice"].concat((function () {
              var _arr, _arr2, _i, _len, choice;
              for (_arr = [], _arr2 = __toArray(asType.choices), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                choice = _arr2[_i];
                _arr.push(serializeParamType(choice));
              }
              return _arr;
            }()));
          } else if (asType.isConst()) {
            return ["const", asType.constValue()];
          } else if (asType instanceof SyntaxManyNode) {
            return ["many", asType.multiplier].concat(__toArray(serializeParamType(asType.inner)));
          } else {
            throw Error("Unknown param type: " + __typeof(asType));
          }
        }
        function serializeParams(params) {
          return simplifyArray((function () {
            var _arr, _arr2, _i, _len, ident, param, value;
            for (_arr = [], _arr2 = __toArray(params), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
              param = _arr2[_i];
              if (param.isConst()) {
                _arr.push(["const", param.constValue()]);
              } else if (param instanceof SyntaxParamNode) {
                ident = param.ident;
                if (ident instanceof IdentNode) {
                  value = ["ident", ident.name];
                } else if (ident instanceof ThisNode) {
                  value = ["this"];
                } else {
                  throw Error();
                }
                if (param.asType) {
                  value.push.apply(value, __toArray(serializeParamType(param.asType)));
                }
                _arr.push(value);
              } else {
                throw Error();
              }
            }
            return _arr;
          }()));
        }
        deserializeParamType = (function () {
          var deserializeParamTypeByType;
          deserializeParamTypeByType = {
            ident: function (scope, name) {
              return IdentNode(0, scope, name);
            },
            sequence: function (scope) {
              var items;
              items = __slice.call(arguments, 1);
              return SyntaxSequenceNode(0, scope, deserializeParams(items, scope));
            },
            choice: function (scope) {
              var choices;
              choices = __slice.call(arguments, 1);
              return SyntaxChoiceNode(0, scope, (function () {
                var _arr, _i, _len, choice;
                for (_arr = [], _i = 0, _len = choices.length; _i < _len; ++_i) {
                  choice = choices[_i];
                  _arr.push(deserializeParamType(choice, scope));
                }
                return _arr;
              }()));
            },
            "const": function (scope, value) {
              return ConstNode(0, scope, value);
            },
            many: function (scope, multiplier) {
              var inner;
              inner = __slice.call(arguments, 2);
              return SyntaxManyNode(
                0,
                scope,
                deserializeParamType(inner, scope),
                multiplier
              );
            }
          };
          return function (asType, scope) {
            var type;
            if (asType == null) {
              asType = [];
            } else if (!__isArray(asType)) {
              throw TypeError("Expected asType to be an Array, got " + __typeof(asType));
            }
            if (asType.length === 0) {
              return;
            } else {
              type = asType[0];
              if (__owns.call(deserializeParamTypeByType, type)) {
                return deserializeParamTypeByType[type].apply(deserializeParamTypeByType, [scope].concat(__toArray(__slice.call(asType, 1))));
              } else {
                throw Error("Unknown as-type: " + String(type));
              }
            }
          };
        }());
        deserializeParams = (function () {
          var deserializeParamByType;
          deserializeParamByType = {
            "const": function (scope, value) {
              return ConstNode(0, scope, value);
            },
            ident: function (scope, name) {
              var asType;
              asType = __slice.call(arguments, 2);
              return SyntaxParamNode(
                0,
                scope,
                IdentNode(0, scope, name),
                deserializeParamType(asType, scope)
              );
            },
            "this": function (scope) {
              var asType;
              asType = __slice.call(arguments, 1);
              return SyntaxParamNode(
                0,
                scope,
                ThisNode(0, scope),
                deserializeParamType(asType, scope)
              );
            }
          };
          return function (params, scope) {
            var _arr, _arr2, _i, _len, param, type;
            if (!(scope instanceof Scope)) {
              throw TypeError("Expected scope to be a " + __name(Scope) + ", got " + __typeof(scope));
            }
            for (_arr = [], _arr2 = __toArray(fixArray(params)), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
              param = _arr2[_i];
              type = param[0];
              if (__owns.call(deserializeParamByType, type)) {
                _arr.push(deserializeParamByType[type].apply(deserializeParamByType, [scope].concat(__toArray(__slice.call(param, 1)))));
              } else {
                throw Error("Unknown param type: " + String(type));
              }
            }
            return _arr;
          };
        }());
        function calcParam(param) {
          var _this, calced, macros, multiplier, name, string;
          _this = this;
          if (param instanceof IdentNode) {
            name = param.name;
            macros = this.macros;
            if (macros.hasSyntax(name)) {
              return macros.getSyntax(name);
            } else {
              return function (parser, index) {
                return macros.getSyntax(name).call(this, parser, index);
              };
            }
          } else if (param instanceof SyntaxSequenceNode) {
            return handleParams.call(this, param.params);
          } else if (param instanceof SyntaxChoiceNode) {
            return oneOf.apply(void 0, (function () {
              var _arr, _arr2, _i, _len, choice;
              for (_arr = [], _arr2 = __toArray(param.choices), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                choice = _arr2[_i];
                _arr.push(calcParam.call(_this, choice));
              }
              return _arr;
            }()));
          } else if (param.isConst()) {
            string = param.constValue();
            if (typeof string !== "string") {
              this.error("Expected a constant string parameter, got " + __typeof(string));
            }
            return __owns.call(macroSyntaxConstLiterals, string) && macroSyntaxConstLiterals[string] || wordOrSymbol(string);
          } else if (param instanceof SyntaxManyNode) {
            multiplier = param.multiplier;
            calced = calcParam.call(this, param.inner);
            switch (multiplier) {
            case "*": return zeroOrMore(calced);
            case "+": return oneOrMore(calced);
            case "?":
              return oneOf(calced, Nothing);
            default: throw Error("Unknown syntax multiplier: " + __strnum(multiplier));
            }
          } else {
            return this.error("Unexpected type: " + __typeof(param));
          }
        }
        function handleParams(params) {
          var _arr, _i, _len, _ref, ident, key, param, sequence, string, type;
          sequence = [];
          for (_arr = __toArray(params), _i = 0, _len = _arr.length; _i < _len; ++_i) {
            param = _arr[_i];
            if (param.isConst()) {
              string = param.constValue();
              if (typeof string !== "string") {
                this.error("Expected a constant string parameter, got " + __typeof(string));
              }
              sequence.push(__owns.call(macroSyntaxConstLiterals, string) && macroSyntaxConstLiterals[string] || wordOrSymbol(string));
            } else if (param instanceof SyntaxParamNode) {
              ident = param.ident;
              if (ident instanceof IdentNode) {
                key = ident.name;
              } else if (ident instanceof ThisNode) {
                key = "this";
              } else {
                throw Error("Don't know how to handle ident type: " + __typeof(ident));
              }
              if ((_ref = param.asType) != null) {
                type = _ref;
              } else {
                type = IdentNode(0, param.scope, "Expression");
              }
              sequence.push([
                key,
                calcParam.call(this, type)
              ]);
            } else {
              this.error("Unexpected parameter type: " + __typeof(param));
            }
          }
          return sequential.apply(void 0, __toArray(sequence));
        }
        function simplifyArray(operators) {
          if (!__isArray(operators)) {
            throw TypeError("Expected operators to be an Array, got " + __typeof(operators));
          }
          if (operators.length === 0) {
            return;
          } else if (operators.length === 1 && !__isArray(operators[0])) {
            return operators[0];
          } else {
            return operators;
          }
        }
        function simplifyObject(options) {
          var k, v;
          if (typeof options !== "object" || options === null) {
            throw TypeError("Expected options to be an Object, got " + __typeof(options));
          }
          for (k in options) {
            if (__owns.call(options, k)) {
              v = options[k];
              return options;
            }
          }
          return;
        }
        function getCompilationOptions(stateOptions) {
          if (typeof stateOptions !== "object" || stateOptions === null) {
            throw TypeError("Expected stateOptions to be an Object, got " + __typeof(stateOptions));
          }
          if (stateOptions.serializeMacros) {
            return { minify: true };
          } else {
            return {};
          }
        }
        macroSyntaxTypes = {
          syntax: function (index, params, body, options, stateOptions, translator) {
            var _this, compilation, funcParam, handler, macroDataIdent,
                macroFullDataIdent, macroNameIdent, rawFunc, scope, serialization,
                state, translated;
            _this = this;
            macroFullDataIdent = this.Ident(index, "macroFullData");
            funcParam = this.Param(
              index,
              macroFullDataIdent,
              void 0,
              false,
              false,
              void 0
            );
            macroNameIdent = this.Ident(index, "macroName");
            scope = this.scope.peek();
            scope.add(macroNameIdent, false, Type.string);
            macroDataIdent = this.Ident(index, "macroData");
            scope.add(macroDataIdent, false, Type.object);
            body = this.Block(index, [
              this.Var(index, macroNameIdent, false),
              this.Assign(index, macroNameIdent, "=", this.Access(index, macroFullDataIdent, this.Const(index, "macroName"))),
              this.Var(index, macroDataIdent, false),
              this.Assign(index, macroDataIdent, "=", this.Access(index, macroFullDataIdent, this.Const(index, "macroData")))
            ].concat(
              (function () {
                var _arr, _arr2, _i, _len, param;
                for (_arr = [], _arr2 = __toArray(params), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                  param = _arr2[_i];
                  if (param instanceof SyntaxParamNode) {
                    scope.add(param.ident, true, Type.any);
                    _arr.push(_this.Block(index, [
                      _this.Var(index, param.ident, true),
                      _this.Assign(index, param.ident, "=", _this.Access(index, macroDataIdent, _this.Const(index, param.ident.name)))
                    ]));
                  }
                }
                return _arr;
              }()),
              [body]
            ));
            rawFunc = makeMacroRoot.call(this, index, funcParam, body);
            translated = translator(this.macroExpandAll(rawFunc).reduce(this), this.macros, this.getPosition, { "return": true });
            compilation = translated.node.toString(getCompilationOptions(stateOptions));
            if (stateOptions.serializeMacros) {
              serialization = compilation;
            }
            handler = Function(compilation)();
            if (typeof handler !== "function") {
              throw Error("Error creating function for macro: " + String(this.currentMacro));
            }
            state = this;
            return {
              handler: function (args) {
                var rest;
                rest = __slice.call(arguments, 1);
                return handler.apply(this, [reduceObject(state, args)].concat(__toArray(rest))).reduce(state);
              },
              rule: handleParams.call(this, params),
              serialization: serialization != null
                ? {
                  type: "syntax",
                  code: serialization,
                  options: simplifyObject(options),
                  params: serializeParams(params),
                  names: simplifyArray(this.currentMacro)
                }
                : void 0
            };
          },
          defineSyntax: function (index, params, body, options, stateOptions, translator) {
            var _this, handler, serialization, state;
            _this = this;
            state = this;
            if (body != null) {
              handler = (function () {
                var compilation, funcParam, handler, macroDataIdent, rawFunc, scope,
                    translated;
                macroDataIdent = _this.Ident(index, "macroData");
                funcParam = _this.Param(
                  index,
                  macroDataIdent,
                  void 0,
                  false,
                  false,
                  void 0
                );
                scope = _this.scope.peek();
                body = _this.Block(index, (function () {
                  var _arr, _arr2, _i, _len, param;
                  for (_arr = [], _arr2 = __toArray(params), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                    param = _arr2[_i];
                    if (param instanceof SyntaxParamNode) {
                      scope.add(param.ident, true, Type.any);
                      _arr.push(_this.Block(index, [
                        _this.Var(index, param.ident, true),
                        _this.Assign(index, param.ident, "=", _this.Access(index, macroDataIdent, _this.Const(index, param.ident.name)))
                      ]));
                    }
                  }
                  return _arr;
                }()).concat([body]));
                rawFunc = makeMacroRoot.call(_this, index, funcParam, body);
                translated = translator(_this.macroExpandAll(rawFunc).reduce(state), _this.macros, _this.getPosition, { "return": true });
                compilation = translated.node.toString(getCompilationOptions(stateOptions));
                if (stateOptions.serializeMacros) {
                  serialization = compilation;
                }
                handler = Function(compilation)();
                if (typeof handler !== "function") {
                  throw Error("Error creating function for syntax: " + __strnum(options.name));
                }
                return function (args) {
                  var rest;
                  rest = __slice.call(arguments, 1);
                  return reduceObject(state, handler.apply(this, [reduceObject(state, args)].concat(__toArray(rest))));
                };
              }());
            } else {
              handler = function (args) {
                var rest;
                rest = __slice.call(arguments, 1);
                return reduceObject(state, args);
              };
            }
            return {
              handler: handler,
              rule: handleParams.call(this, params),
              serialization: stateOptions.serializeMacros ? { type: "defineSyntax", code: serialization, options: simplifyObject(options), params: serializeParams(params) } : void 0
            };
          },
          call: function (index, params, body, options, stateOptions, translator) {
            var _this, compilation, funcParam, handler, macroDataIdent,
                macroFullDataIdent, macroNameIdent, rawFunc, scope, serialization,
                state, translated;
            _this = this;
            macroFullDataIdent = this.Ident(index, "macroFullData");
            funcParam = this.Param(
              index,
              macroFullDataIdent,
              void 0,
              false,
              false,
              void 0
            );
            scope = this.scope.peek();
            macroNameIdent = this.Ident(index, "macroName");
            scope.add(macroNameIdent, false, Type.string);
            macroDataIdent = this.Ident(index, "macroData");
            scope.add(macroDataIdent, false, Type.object);
            body = this.Block(index, [
              this.Var(index, macroNameIdent, false),
              this.Assign(index, macroNameIdent, "=", this.Access(index, macroFullDataIdent, this.Const(index, "macroName"))),
              this.Var(index, macroDataIdent, false),
              this.Assign(index, macroDataIdent, "=", this.Access(index, macroFullDataIdent, this.Const(index, "macroData")))
            ].concat(
              (function () {
                var _arr, _arr2, _len, i, param;
                for (_arr = [], _arr2 = __toArray(params), i = 0, _len = _arr2.length; i < _len; ++i) {
                  param = _arr2[i];
                  if (param instanceof ParamNode) {
                    scope.add(param.ident, true, Type.any);
                    _arr.push(_this.Block(index, [
                      _this.Var(index, param.ident, true),
                      _this.Assign(index, param.ident, "=", _this.Access(index, macroDataIdent, _this.Const(index, i)))
                    ]));
                  }
                }
                return _arr;
              }()),
              [body]
            ));
            rawFunc = makeMacroRoot.call(this, index, funcParam, body);
            translated = translator(this.macroExpandAll(rawFunc).reduce(this), this.macros, this.getPosition, { "return": true });
            compilation = translated.node.toString(getCompilationOptions(stateOptions));
            if (stateOptions.serializeMacros) {
              serialization = compilation;
            }
            handler = Function(compilation)();
            if (typeof handler !== "function") {
              throw Error("Error creating function for macro: " + __strnum(this.currentMacro));
            }
            state = this;
            handler = (function (inner) {
              return function (args) {
                var rest;
                rest = __slice.call(arguments, 1);
                return inner.apply(this, [reduceObject(state, args)].concat(__toArray(rest))).reduce(state);
              };
            }(handler));
            return {
              handler: handler,
              rule: InvocationArguments,
              serialization: serialization != null ? { type: "call", code: serialization, options: simplifyObject(options), names: simplifyArray(this.currentMacro) } : void 0
            };
          },
          binaryOperator: function (index, operators, body, options, stateOptions, translator) {
            var _this, compilation, funcParam, handler, macroDataIdent, rawFunc,
                scope, serialization, state, translated;
            _this = this;
            macroDataIdent = this.Ident(index, "macroData");
            funcParam = this.Param(
              index,
              macroDataIdent,
              void 0,
              false,
              false,
              void 0
            );
            scope = this.scope.peek();
            body = this.Block(index, (function () {
              var _arr, _arr2, _i, _len, ident, name;
              for (_arr = [], _arr2 = ["left", "op", "right"], _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                name = _arr2[_i];
                ident = _this.Ident(index, name);
                scope.add(ident, true, Type.any);
                _arr.push(_this.Block(index, [
                  _this.Var(index, ident, true),
                  _this.Assign(index, ident, "=", _this.Access(index, macroDataIdent, _this.Const(index, name)))
                ]));
              }
              return _arr;
            }()).concat([body]));
            rawFunc = makeMacroRoot.call(this, index, funcParam, body);
            translated = translator(this.macroExpandAll(rawFunc).reduce(this), this.macros, this.getPosition, { "return": true });
            compilation = translated.node.toString(getCompilationOptions(stateOptions));
            if (stateOptions.serializeMacros) {
              serialization = compilation;
            }
            handler = Function(compilation)();
            if (typeof handler !== "function") {
              throw Error("Error creating function for binary operator " + __strnum(operators.join(", ")));
            }
            state = this;
            if (options.invertible) {
              handler = (function (inner) {
                return function (args) {
                  var rest, result;
                  rest = __slice.call(arguments, 1);
                  result = inner.apply(this, [reduceObject(state, args)].concat(__toArray(rest)));
                  if (args.inverted) {
                    return UnaryNode(result.index, result.scope, "!", result).reduce(state);
                  } else {
                    return result.reduce(state);
                  }
                };
              }(handler));
            } else {
              handler = (function (inner) {
                return function (args) {
                  var rest;
                  rest = __slice.call(arguments, 1);
                  return inner.apply(this, [reduceObject(state, args)].concat(__toArray(rest))).reduce(state);
                };
              }(handler));
            }
            return {
              handler: handler,
              rule: void 0,
              serialization: serialization != null ? { type: "binaryOperator", code: serialization, operators: simplifyArray(operators), options: simplifyObject(options) } : void 0
            };
          },
          assignOperator: function (index, operators, body, options, stateOptions, translator) {
            var _this, compilation, funcParam, handler, macroDataIdent, rawFunc,
                scope, serialization, state, translated;
            _this = this;
            macroDataIdent = this.Ident(index, "macroData");
            funcParam = this.Param(
              index,
              macroDataIdent,
              void 0,
              false,
              false,
              void 0
            );
            scope = this.scope.peek();
            body = this.Block(index, (function () {
              var _arr, _arr2, _i, _len, ident, name;
              for (_arr = [], _arr2 = ["left", "op", "right"], _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                name = _arr2[_i];
                ident = _this.Ident(index, name);
                scope.add(ident, true, Type.any);
                _arr.push(_this.Block(index, [
                  _this.Var(index, ident, true),
                  _this.Assign(index, ident, "=", _this.Access(index, macroDataIdent, _this.Const(index, name)))
                ]));
              }
              return _arr;
            }()).concat([body]));
            rawFunc = makeMacroRoot.call(this, index, funcParam, body);
            translated = translator(this.macroExpandAll(rawFunc).reduce(this), this.macros, this.getPosition, { "return": true });
            compilation = translated.node.toString(getCompilationOptions(stateOptions));
            if (stateOptions.serializeMacros) {
              serialization = compilation;
            }
            handler = Function(compilation)();
            if (typeof handler !== "function") {
              throw Error("Error creating function for assign operator " + __strnum(operators.join(", ")));
            }
            state = this;
            handler = (function (inner) {
              return function (args) {
                var rest;
                rest = __slice.call(arguments, 1);
                return inner.apply(this, [reduceObject(state, args)].concat(__toArray(rest))).reduce(state);
              };
            }(handler));
            return {
              handler: handler,
              rule: void 0,
              serialization: serialization != null ? { type: "assignOperator", code: serialization, operators: simplifyArray(operators), options: simplifyObject(options) } : void 0
            };
          },
          unaryOperator: function (index, operators, body, options, stateOptions, translator) {
            var _this, compilation, funcParam, handler, macroDataIdent, rawFunc,
                scope, serialization, state, translated;
            _this = this;
            macroDataIdent = this.Ident(index, "macroData");
            funcParam = this.Param(
              index,
              macroDataIdent,
              void 0,
              false,
              false,
              void 0
            );
            scope = this.scope.peek();
            body = this.Block(index, (function () {
              var _arr, _arr2, _i, _len, ident, name;
              for (_arr = [], _arr2 = ["op", "node"], _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                name = _arr2[_i];
                ident = _this.Ident(index, name);
                scope.add(ident, true, Type.any);
                _arr.push(_this.Block(index, [
                  _this.Var(index, ident, true),
                  _this.Assign(index, ident, "=", _this.Access(index, macroDataIdent, _this.Const(index, name)))
                ]));
              }
              return _arr;
            }()).concat([body]));
            rawFunc = makeMacroRoot.call(this, index, funcParam, body);
            translated = translator(this.macroExpandAll(rawFunc).reduce(this), this.macros, this.getPosition, { "return": true });
            compilation = translated.node.toString(getCompilationOptions(stateOptions));
            if (stateOptions.serializeMacros) {
              serialization = compilation;
            }
            handler = Function(compilation)();
            if (typeof handler !== "function") {
              throw Error("Error creating function for unary operator " + __strnum(operators.join(", ")));
            }
            state = this;
            handler = (function (inner) {
              return function (args) {
                var rest;
                rest = __slice.call(arguments, 1);
                return inner.apply(this, [reduceObject(state, args)].concat(__toArray(rest))).reduce(state);
              };
            }(handler));
            return {
              handler: handler,
              rule: void 0,
              serialization: serialization != null ? { type: "unaryOperator", code: serialization, operators: simplifyArray(operators), options: simplifyObject(options) } : void 0
            };
          }
        };
        function fixArray(operators) {
          if (operators == null) {
            return [];
          } else if (__isArray(operators)) {
            return operators;
          } else {
            return [operators];
          }
        }
        macroDeserializers = {
          syntax: function (_p) {
            var _this, code, handler, id, names, options, params, state;
            _this = this;
            code = _p.code;
            params = _p.params;
            names = _p.names;
            options = _p.options;
            if (options == null) {
              options = {};
            }
            id = _p.id;
            names = fixArray(names);
            handler = Function(code)();
            if (typeof handler !== "function") {
              throw Error("Error deserializing function for macro " + __strnum(name));
            }
            state = this;
            handler = (function (inner) {
              return function (args) {
                var rest;
                rest = __slice.call(arguments, 1);
                return inner.apply(this, [reduceObject(state, args)].concat(__toArray(rest))).reduce(state);
              };
            }(handler));
            this.enterMacro(0, names);
            handleMacroSyntax.call(
              this,
              0,
              "syntax",
              handler,
              handleParams.call(this, deserializeParams(params, this.scope.peek())),
              null,
              options,
              id
            );
            return this.exitMacro();
          },
          call: function (_p) {
            var _this, code, handler, id, names, options, state;
            _this = this;
            code = _p.code;
            names = _p.names;
            options = _p.options;
            if (options == null) {
              options = {};
            }
            id = _p.id;
            names = fixArray(names);
            handler = Function(code)();
            if (typeof handler !== "function") {
              throw Error("Error deserializing function for macro " + __strnum(name));
            }
            state = this;
            handler = (function (inner) {
              return function (args) {
                var rest;
                rest = __slice.call(arguments, 1);
                return inner.apply(this, [reduceObject(state, args)].concat(__toArray(rest))).reduce(state);
              };
            }(handler));
            this.enterMacro(0, names);
            handleMacroSyntax.call(
              this,
              0,
              "call",
              handler,
              InvocationArguments,
              null,
              options,
              id
            );
            return this.exitMacro();
          },
          defineSyntax: function (_p) {
            var _this, code, handler, id, options, params, state;
            _this = this;
            code = _p.code;
            params = _p.params;
            options = _p.options;
            if (options == null) {
              options = {};
            }
            id = _p.id;
            if (this.macros.hasSyntax(options.name)) {
              throw Error("Cannot override already-defined syntax: " + __strnum(options.name));
            }
            state = this;
            if (code != null) {
              handler = Function(code)();
              if (typeof handler !== "function") {
                throw Error("Error deserializing function for macro syntax " + __strnum(options.name));
              }
              handler = (function (inner) {
                return function (args) {
                  var rest;
                  rest = __slice.call(arguments, 1);
                  return reduceObject(state, inner.apply(this, [reduceObject(state, args)].concat(__toArray(rest))));
                };
              }(handler));
            } else {
              handler = function (args) {
                return reduceObject(state, args);
              };
            }
            this.enterMacro(0, DEFINE_SYNTAX);
            handleMacroSyntax.call(
              this,
              0,
              "defineSyntax",
              handler,
              handleParams.call(this, deserializeParams(params, this.scope.peek())),
              null,
              options,
              id
            );
            return this.exitMacro();
          },
          binaryOperator: function (_p) {
            var _this, code, handler, id, operators, options, state;
            _this = this;
            code = _p.code;
            operators = _p.operators;
            options = _p.options;
            if (options == null) {
              options = {};
            }
            id = _p.id;
            operators = fixArray(operators);
            handler = Function(code)();
            if (typeof handler !== "function") {
              throw Error("Error deserializing function for binary operator " + __strnum(operators.join(", ")));
            }
            state = this;
            if (options.invertible) {
              handler = (function (inner) {
                return function (args) {
                  var rest, result;
                  rest = __slice.call(arguments, 1);
                  result = inner.apply(this, [reduceObject(state, args)].concat(__toArray(rest)));
                  if (args.inverted) {
                    return UnaryNode(result.index, result.scope, "!", result).reduce(state);
                  } else {
                    return result.reduce(state);
                  }
                };
              }(handler));
            } else {
              handler = (function (inner) {
                return function (args) {
                  var rest;
                  rest = __slice.call(arguments, 1);
                  return inner.apply(this, [reduceObject(state, args)].concat(__toArray(rest))).reduce(state);
                };
              }(handler));
            }
            this.enterMacro(0, BINARY_OPERATOR);
            handleMacroSyntax.call(
              this,
              0,
              "binaryOperator",
              handler,
              void 0,
              operators,
              options,
              id
            );
            return this.exitMacro();
          },
          assignOperator: function (_p) {
            var _this, code, handler, id, operators, options, state;
            _this = this;
            code = _p.code;
            operators = _p.operators;
            options = _p.options;
            if (options == null) {
              options = {};
            }
            id = _p.id;
            operators = fixArray(operators);
            handler = Function(code)();
            if (typeof handler !== "function") {
              throw Error("Error deserializing function for assign operator " + __strnum(operators.join(", ")));
            }
            state = this;
            handler = (function (inner) {
              return function (args) {
                var rest;
                rest = __slice.call(arguments, 1);
                return inner.apply(this, [reduceObject(state, args)].concat(__toArray(rest))).reduce(state);
              };
            }(handler));
            this.enterMacro(0, ASSIGN_OPERATOR);
            handleMacroSyntax.call(
              this,
              0,
              "assignOperator",
              handler,
              void 0,
              operators,
              options,
              id
            );
            return this.exitMacro();
          },
          unaryOperator: function (_p) {
            var _this, code, handler, id, operators, options, state;
            _this = this;
            code = _p.code;
            operators = _p.operators;
            options = _p.options;
            if (options == null) {
              options = {};
            }
            id = _p.id;
            operators = fixArray(operators);
            handler = Function(code)();
            if (typeof handler !== "function") {
              throw Error("Error deserializing function for unary operator " + __strnum(operators.join(", ")));
            }
            state = this;
            handler = (function (inner) {
              return function (args) {
                var rest;
                rest = __slice.call(arguments, 1);
                return inner.apply(this, [reduceObject(state, args)].concat(__toArray(rest))).reduce(state);
              };
            }(handler));
            this.enterMacro(0, UNARY_OPERATOR);
            handleMacroSyntax.call(
              this,
              0,
              "unaryOperator",
              handler,
              void 0,
              operators,
              options,
              id
            );
            this.exitMacro();
          }
        };
        function removeNoops(obj) {
          var _arr, _arr2, _i, _len, item, k, result, v;
          if (__isArray(obj)) {
            for (_arr = [], _arr2 = __toArray(obj), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
              item = _arr2[_i];
              if (item instanceof NothingNode) {
                _arr.push(void 0);
              } else {
                _arr.push(removeNoops(item));
              }
            }
            return _arr;
          } else if (obj instanceof Node) {
            return obj;
          } else if (typeof obj === "object" && obj !== null && !(obj instanceof RegExp)) {
            result = {};
            for (k in obj) {
              if (__owns.call(obj, k)) {
                v = obj[k];
                if (!(v instanceof NothingNode)) {
                  result[k] = removeNoops(v);
                }
              }
            }
            return result;
          } else {
            return obj;
          }
        }
        _Parser_prototype.startMacroSyntax = function (index, params, options) {
          var _arr, _i, _len, _ref, m, macroId, macros, rule;
          if (!__isArray(params)) {
            throw TypeError("Expected params to be an Array, got " + __typeof(params));
          }
          if (options == null) {
            options = {};
          }
          if (!this.currentMacro) {
            throw Error("Attempting to specify a macro syntax when not in a macro");
          }
          rule = handleParams.call(this, params);
          macros = this.macros;
          function mutator(data, parser, index) {
            if (parser.inAst.peek() || !parser.expandingMacros) {
              return parser.MacroAccess(
                index,
                macroId,
                parser.getLine(index),
                removeNoops(data),
                parser.position.peek(),
                parser.inGenerator.peek(),
                parser.inEvilAst.peek()
              );
            } else {
              throw Error("Cannot use macro until fully defined");
            }
          }
          for (_arr = __toArray(macros.getOrAddByNames(this.currentMacro)), _i = 0, _len = _arr.length; _i < _len; ++_i) {
            m = _arr[_i];
            m.data.push((_ref = sequential(
              ["macroName", m.token],
              ["macroData", rule]
            ), mutate(mutator)(_ref)));
          }
          macroId = macros.addMacro(mutator, void 0, options.type != null && __owns.call(Type, _ref = options.type) ? Type[_ref] : void 0);
          this.pendingMacroId = macroId;
          return params;
        };
        function handleMacroSyntax(index, type, handler, rule, params, options, macroId) {
          var _arr, _i, _len, _ref, _this, id, m, macros;
          _this = this;
          if (typeof handler !== "function") {
            throw TypeError("Expected handler to be a Function, got " + __typeof(handler));
          }
          macros = this.macros;
          function mutator(data, parser, index) {
            var line, macroContext, pos, result, scope, tmps, walker;
            if (parser.inAst.peek() || !parser.expandingMacros) {
              return parser.MacroAccess(
                index,
                macroId,
                parser.getLine(index),
                removeNoops(data),
                parser.position.peek(),
                parser.inGenerator.peek(),
                parser.inEvilAst.peek()
              );
            } else {
              scope = parser.pushScope(false);
              macroContext = MacroContext(
                parser,
                index,
                parser.position.peek(),
                parser.inGenerator.peek(),
                parser.inEvilAst.peek()
              );
              if (type === "assignOperator" && macroContext.isIdent(data.left)) {
                if (!macroContext.hasVariable(data.left)) {
                  throw parser.buildError("Trying to assign with " + __strnum(data.op) + " to unknown variable '" + __strnum(macroContext.name(data.left)) + "'", data.left);
                } else if (!macroContext.isVariableMutable(data.left) && !parser.inEvilAst.peek()) {
                  throw parser.buildError("Trying to assign with " + __strnum(data.op) + " to immutable variable '" + __strnum(macroContext.name(data.left)) + "'", data.left);
                }
              }
              try {
                result = handler.call(
                  macroContext,
                  removeNoops(data),
                  __bind(macroContext, "wrap"),
                  __bind(macroContext, "node"),
                  __bind(macroContext, "getConst")
                );
              } catch (e) {
                if (e instanceof ReferenceError) {
                  throw e;
                } else if (e instanceof MacroError) {
                  pos = parser.getPosition(index);
                  e.setPosition(pos.line, pos.column);
                  throw e;
                } else {
                  throw MacroError(e, parser, index);
                }
              }
              parser.popScope();
              if (result instanceof Node) {
                line = parser.getLine(index);
                walker = function (node) {
                  if (node instanceof MacroAccessNode) {
                    node.callLine = line;
                  }
                  return node.walk(walker);
                };
                result = walker(result.reduce(_this));
                tmps = macroContext.getTmps();
                if (tmps.unsaved.length) {
                  return parser.TmpWrapper(index, result, tmps.unsaved);
                } else {
                  return result;
                }
              } else {
                return result;
              }
            }
          }
          switch (this.currentMacro) {
          case BINARY_OPERATOR:
            return macroId = macros.addBinaryOperator(params, mutator, options, macroId);
          case ASSIGN_OPERATOR:
            return macroId = macros.addAssignOperator(params, mutator, options, macroId);
          case UNARY_OPERATOR:
            return macroId = macros.addUnaryOperator(params, mutator, options, macroId);
          case DEFINE_SYNTAX:
            if (!rule) {
              throw Error("Expected rule to exist");
            }
            macros.addSyntax(options.name, mutate(mutator)(rule));
            return macroId = macros.addMacro(mutator, macroId, options.type != null && __owns.call(Type, _ref = options.type) ? Type[_ref] : void 0);
          default:
            if (!rule) {
              throw Error("Expected rule to exist");
            }
            for (_arr = __toArray(macros.getOrAddByNames(this.currentMacro)), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              m = _arr[_i];
              if (this.pendingMacroId != null) {
                m.data.pop();
              }
              m.data.push(cache((_ref = sequential(
                ["macroName", m.token],
                ["macroData", rule]
              ), mutate(mutator)(_ref))));
            }
            if (this.pendingMacroId != null) {
              if (macroId != null) {
                throw Error("Cannot provide the macro id if there is a pending macro id");
              }
              id = this.pendingMacroId;
              this.pendingMacroId = null;
              macros.replaceMacro(id, mutator, options.type != null && __owns.call(Type, _ref = options.type) ? Type[_ref] : void 0);
              return macroId = id;
            } else {
              return macroId = macros.addMacro(mutator, macroId, options.type != null && __owns.call(Type, _ref = options.type) ? Type[_ref] : void 0);
            }
          }
        }
        _Parser_prototype.macroSyntax = function (index, type, params, options, body) {
          var _ref, handler, macroId, rule, serialization;
          if (!__isArray(params)) {
            throw TypeError("Expected params to be an Array, got " + __typeof(params));
          }
          if (!__owns.call(macroSyntaxTypes, type)) {
            throw Error("Unknown macro-syntax type: " + __strnum(type));
          }
          if (!this.currentMacro) {
            this.error("Attempting to specify a macro syntax when not in a macro");
          }
          _ref = macroSyntaxTypes[type].call(
            this,
            index,
            params,
            body,
            options,
            this.options,
            require("./jstranslator")
          );
          handler = _ref.handler;
          rule = _ref.rule;
          serialization = _ref.serialization;
          macroId = handleMacroSyntax.call(
            this,
            index,
            type,
            handler,
            rule,
            params,
            options
          );
          if (serialization != null) {
            serialization.id = macroId;
            this.macros.addMacroSerialization(serialization);
          }
        };
        BINARY_OPERATOR = {};
        _Parser_prototype.defineBinaryOperator = function (index, operators, options, body) {
          var _i;
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          if (!__isArray(operators)) {
            throw TypeError("Expected operators to be an Array, got " + __typeof(operators));
          } else {
            for (_i = operators.length; _i--; ) {
              if (typeof operators[_i] !== "string") {
                throw TypeError("Expected " + ("operators[" + _i + "]") + " to be a String, got " + __typeof(operators[_i]));
              }
            }
          }
          if (typeof options !== "object" || options === null) {
            throw TypeError("Expected options to be an Object, got " + __typeof(options));
          }
          if (!(body instanceof Node)) {
            throw TypeError("Expected body to be a " + __name(Node) + ", got " + __typeof(body));
          }
          this.enterMacro(index, BINARY_OPERATOR);
          this.macroSyntax(
            index,
            "binaryOperator",
            operators,
            options,
            body
          );
          return this.exitMacro();
        };
        ASSIGN_OPERATOR = {};
        _Parser_prototype.defineAssignOperator = function (index, operators, options, body) {
          var _i;
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          if (!__isArray(operators)) {
            throw TypeError("Expected operators to be an Array, got " + __typeof(operators));
          } else {
            for (_i = operators.length; _i--; ) {
              if (typeof operators[_i] !== "string") {
                throw TypeError("Expected " + ("operators[" + _i + "]") + " to be a String, got " + __typeof(operators[_i]));
              }
            }
          }
          if (typeof options !== "object" || options === null) {
            throw TypeError("Expected options to be an Object, got " + __typeof(options));
          }
          if (!(body instanceof Node)) {
            throw TypeError("Expected body to be a " + __name(Node) + ", got " + __typeof(body));
          }
          this.enterMacro(index, ASSIGN_OPERATOR);
          this.macroSyntax(
            index,
            "assignOperator",
            operators,
            options,
            body
          );
          return this.exitMacro();
        };
        UNARY_OPERATOR = {};
        _Parser_prototype.defineUnaryOperator = function (index, operators, options, body) {
          var _i;
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          if (!__isArray(operators)) {
            throw TypeError("Expected operators to be an Array, got " + __typeof(operators));
          } else {
            for (_i = operators.length; _i--; ) {
              if (typeof operators[_i] !== "string") {
                throw TypeError("Expected " + ("operators[" + _i + "]") + " to be a String, got " + __typeof(operators[_i]));
              }
            }
          }
          if (typeof options !== "object" || options === null) {
            throw TypeError("Expected options to be an Object, got " + __typeof(options));
          }
          if (!(body instanceof Node)) {
            throw TypeError("Expected body to be a " + __name(Node) + ", got " + __typeof(body));
          }
          this.enterMacro(index, UNARY_OPERATOR);
          this.macroSyntax(
            index,
            "unaryOperator",
            operators,
            options,
            body
          );
          return this.exitMacro();
        };
        DEFINE_SYNTAX = {};
        _Parser_prototype.defineSyntax = function (index, name, params, body) {
          this.enterMacro(index, DEFINE_SYNTAX);
          this.macroSyntax(
            index,
            "defineSyntax",
            params,
            { name: name },
            body
          );
          return this.exitMacro();
        };
        _Parser_prototype.defineConst = function (index, name, value) {
          var scope;
          if (typeof name !== "string") {
            throw TypeError("Expected name to be a String, got " + __typeof(name));
          }
          scope = this.scope.peek();
          if (scope === this.scope.initial) {
            this.macros.addConst(name, value);
            if (this.options.serializeMacros) {
              this.macros.addSerializedConst(name);
            }
          }
          scope.addConst(name, value);
        };
        _Parser_prototype.getConst = function (name, scope) {
          var _ref, consts;
          if (typeof name !== "string") {
            throw TypeError("Expected name to be a String, got " + __typeof(name));
          }
          if (scope == null) {
            scope = this.scope.peek();
          } else if (!(scope instanceof Scope)) {
            throw TypeError("Expected scope to be a " + __name(Scope) + ", got " + __typeof(scope));
          }
          if ((_ref = scope.constValue(name)) != null) {
            return _ref;
          }
          consts = this.macros.consts;
          if (__owns.call(consts, name)) {
            return { value: consts[name] };
          }
        };
        _Parser_prototype.deserializeMacros = function (data) {
          var _arr, _i, _len, _ref, deserializer, item, type;
          for (type in macroDeserializers) {
            if (__owns.call(macroDeserializers, type)) {
              deserializer = macroDeserializers[type];
              for (_arr = __toArray((_ref = __owns.call(data, type) ? data[type] : void 0) != null ? _ref : []), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                item = _arr[_i];
                deserializer.call(this, item);
              }
            }
          }
        };
        _Parser_prototype.macroExpand1 = function (node) {
          var _i, _len, n, nodes, oldExpandingMacros, result;
          if (node._macroExpanded != null) {
            return node._macroExpanded;
          } else if (node instanceof MacroAccessNode) {
            nodes = [];
            while (node instanceof MacroAccessNode) {
              nodes.push(node);
              this.position.push(node.position);
              this.inGenerator.push(node.inGenerator);
              this.inEvilAst.push(node.inEvilAst);
              this.scope.push(node.scope);
              oldExpandingMacros = this.expandingMacros;
              this.expandingMacros = true;
              result = void 0;
              try {
                result = this.macros.getById(node.id)(node.data, this, node.index);
              } catch (e) {
                if (e instanceof MacroError) {
                  e.setPosition(node.callLine, 0);
                }
                throw e;
              } finally {
                this.scope.pop();
                this.position.pop();
                this.inGenerator.pop();
                this.inEvilAst.pop();
                this.expandingMacros = oldExpandingMacros;
              }
              if (node.doWrapped) {
                node = result.doWrap(this);
              } else {
                node = result;
              }
            }
            for (_i = 0, _len = nodes.length; _i < _len; ++_i) {
              n = nodes[_i];
              n._macroExpanded = node;
            }
            return node;
          } else {
            return node._macroExpanded = node;
          }
        };
        _Parser_prototype.macroExpandAllAsync = function (node, callback) {
          var _this, startTime;
          _this = this;
          startTime = new Date().getTime();
          function walker(node, callback) {
            var _once, _once2, expanded;
            if (__num(new Date().getTime()) - __num(startTime) > 5) {
              return setImmediate(function () {
                startTime = new Date().getTime();
                return walker(node, callback);
              });
            }
            if (node._macroExpandAlled != null) {
              return callback(null, node._macroExpandAlled);
            } else if (!(node instanceof MacroAccessNode)) {
              return node.walkAsync(walker, (_once = false, function (_e, walked) {
                if (_once) {
                  throw Error("Attempted to call function more than once");
                } else {
                  _once = true;
                }
                if (_e != null) {
                  return callback(_e);
                }
                return callback(null, walked._macroExpandAlled = walked._macroExpanded = node._macroExpandAlled = node._macroExpanded = walked);
              }));
            } else {
              try {
                expanded = _this.macroExpand1(node);
              } catch (e) {
                return callback(e);
              }
              if (!(expanded instanceof Node)) {
                return callback(null, node._macroExpandAlled = node._macroExpanded = expanded);
              }
              return walker(expanded, (_once2 = false, function (_e, walked) {
                if (_once2) {
                  throw Error("Attempted to call function more than once");
                } else {
                  _once2 = true;
                }
                if (_e != null) {
                  return callback(_e);
                }
                return callback(null, expanded._macroExpandAlled = expanded._macroExpanded = walked._macroExpandAlled = walked._macroExpanded = node._macroExpandAlled = node._macroExpanded = walked);
              }));
            }
          }
          return walker(node, callback);
        };
        _Parser_prototype.macroExpandAll = function (node) {
          var _this;
          _this = this;
          function walker(node) {
            var expanded, walked;
            if (node._macroExpandAlled != null) {
              return node._macroExpandAlled;
            } else if (!(node instanceof MacroAccessNode)) {
              walked = node.walk(walker);
              return walked._macroExpandAlled = walked._macroExpanded = node._macroExpandAlled = node._macroExpanded = walked;
            } else {
              expanded = _this.macroExpand1(node);
              if (!(expanded instanceof Node)) {
                return node._macroExpandAlled = node._macroExpanded = expanded;
              }
              walked = walker(expanded);
              return expanded._macroExpandAlled = expanded._macroExpanded = walked._macroExpandAlled = walked._macroExpanded = node._macroExpandAlled = node._macroExpanded = walked;
            }
          }
          return walker(node);
        };
        _Parser_prototype.macroExpandAllPromise = function (node) {
          var defer;
          if (this.options.sync) {
            return __defer.fulfilled(this.macroExpandAll(node));
          } else {
            defer = __defer();
            this.macroExpandAllAsync(node, function (err, result) {
              if (err) {
                return defer.reject(err);
              } else {
                return defer.fulfill(result);
              }
            });
            return defer.promise;
          }
        };
        _Parser_prototype.clearCache = function () {
          this.cache = [];
        };
        Parser.addNodeFactory = function (name, type) {
          Parser.prototype[name] = function (index) {
            var args;
            args = __slice.call(arguments, 1);
            return type.apply(void 0, [index, this.scope.peek()].concat(__toArray(args)));
          };
        };
        return Parser;
      }());
      parse = __promise(function (source, macros, options) {
        var _e, _send, _state, _step, _throw, e, endExpandTime, endParseTime,
            endReduceTime, expanded, parser, reduced, result, rootRule, startTime;
        _state = 0;
        function _close() {
          _state = 8;
        }
        function _step(_received) {
          while (true) {
            switch (_state) {
            case 0:
              if (typeof source !== "string") {
                throw TypeError("Expected source to be a String, got " + __typeof(source));
              }
              if (macros == null) {
                macros = null;
              } else if (!(macros instanceof MacroHolder)) {
                throw TypeError("Expected macros to be one of " + (__name(MacroHolder) + " or null") + ", got " + __typeof(macros));
              }
              if (options == null) {
                options = {};
              } else if (typeof options !== "object" || options === null) {
                throw TypeError("Expected options to be an Object, got " + __typeof(options));
              }
              parser = Parser(
                source,
                macros != null ? macros.clone() : void 0,
                options
              );
              if (options.embeddedGenerator) {
                rootRule = EmbeddedRootGeneratorP;
              } else if (options.embedded) {
                rootRule = EmbeddedRootP;
              } else {
                rootRule = RootP;
              }
              startTime = new Date().getTime();
              result = void 0;
              ++_state;
            case 1:
              _state = options.sync ? 2 : 3;
              break;
            case 2:
              result = rootRule.sync(parser);
              _state = 6;
              break;
            case 3:
              ++_state;
              return { done: false, value: rootRule(parser) };
            case 4:
              result = _received;
              _state = 6;
              break;
            case 5:
              if (!(e === SHORT_CIRCUIT)) {
                throw e;
              }
              ++_state;
            case 6:
              parser.clearCache();
              endParseTime = new Date().getTime();
              if (typeof options.progress === "function") {
                options.progress("parse", __num(endParseTime) - __num(startTime));
              }
              if (!result || __num(result.index) < source.length) {
                throw parser.getFailure(result != null ? result.index : void 0);
              }
              ++_state;
              return { done: false, value: parser.macroExpandAllPromise(result.value) };
            case 7:
              expanded = _received;
              endExpandTime = new Date().getTime();
              if (typeof options.progress === "function") {
                options.progress("macroExpand", __num(endExpandTime) - __num(endParseTime));
              }
              reduced = expanded.reduce(parser);
              endReduceTime = new Date().getTime();
              if (typeof options.progress === "function") {
                options.progress("reduce", __num(endReduceTime) - __num(endExpandTime));
              }
              ++_state;
              return {
                done: true,
                value: {
                  result: reduced,
                  macros: parser.macros,
                  getPosition: parser.getPosition,
                  parseTime: __num(endParseTime) - __num(startTime),
                  macroExpandTime: __num(endExpandTime) - __num(endParseTime),
                  reduceTime: __num(endReduceTime) - __num(endExpandTime),
                  time: __num(endReduceTime) - __num(startTime)
                }
              };
            case 8:
              return { done: true, value: void 0 };
            default: throw Error("Unknown state: " + _state);
            }
          }
        }
        function _throw(_e) {
          if (_state >= 1 && _state <= 4) {
            e = _e;
            _state = 5;
          } else {
            _close();
            throw _e;
          }
        }
        function _send(_received) {
          while (true) {
            try {
              return _step(_received);
            } catch (_e) {
              _throw(_e);
            }
          }
        }
        return {
          close: _close,
          iterator: function () {
            return this;
          },
          next: function () {
            return _send(void 0);
          },
          send: _send,
          "throw": function (_e) {
            _throw(_e);
            return _send(void 0);
          }
        };
      });
      parse.ParserError = ParserError;
      parse.MacroError = MacroError;
      parse.Node = Node;
      parse.MacroHolder = MacroHolder;
      parse.unusedCaches = unusedCaches;
      parse.deserializePrelude = function (data) {
        var parsed, parser;
        if (typeof data === "string") {
          parsed = JSON.parse(data);
        } else {
          parsed = data;
        }
        parser = Parser();
        parser.macros.deserialize(parsed, parser, {});
        return {
          result: NothingNode(0, parser.scope.peek()),
          macros: parser.macros
        };
      };
      parse.getReservedWords = function (macros, options) {
        if (options == null) {
          options = {};
        }
        return unique(__toArray(getReservedIdents(options)).concat(__toArray(macros != null && typeof macros.getMacroAndOperatorNames === "function" && macros.getMacroAndOperatorNames() || [])));
      };
      module.exports = parse;
      for (_arr = [
        "Access",
        "AccessMulti",
        "Args",
        "Array",
        "Assign",
        "Binary",
        "Block",
        "Break",
        "Call",
        "Cascade",
        "Comment",
        "Const",
        "Continue",
        "Debugger",
        "Def",
        "EmbedWrite",
        "Eval",
        "For",
        "ForIn",
        "Function",
        "Ident",
        "If",
        "MacroAccess",
        "MacroConst",
        "Nothing",
        "Object",
        "Param",
        "Regexp",
        "Return",
        "Root",
        "Spread",
        "Super",
        "Switch",
        "SyntaxChoice",
        "SyntaxMany",
        "SyntaxParam",
        "SyntaxSequence",
        "This",
        "Throw",
        "Tmp",
        "TmpWrapper",
        "TryCatch",
        "TryFinally",
        "TypeFunction",
        "TypeGeneric",
        "TypeObject",
        "TypeUnion",
        "Unary",
        "Var",
        "Yield"
      ], _i = 0, _len = _arr.length; _i < _len; ++_i) {
        nodeType = _arr[_i];
        Parser.addNodeFactory(nodeType, Node[nodeType]);
      }
      Parser.prototype.string = Node.string;
      Parser.prototype.arrayParam = Parser.prototype.array;
      Parser.prototype.object = Node.object;
      Parser.prototype.objectParam = Node.objectParam;
    }.call(this, typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : this));
    
    return module.exports;
  };
  require['./parser-utils'] = function () {
    var module = { exports: this };
    var exports = this;
    (function () {
      "use strict";
      var __async, __isArray, __num, __once, __owns, __slice, __toArray, __typeof,
          nodeToType, Type;
      __async = function (limit, length, hasResult, onValue, onComplete) {
        var broken, completed, index, result, slotsUsed, sync;
        if (typeof limit !== "number") {
          throw TypeError("Expected limit to be a Number, got " + __typeof(limit));
        }
        if (typeof length !== "number") {
          throw TypeError("Expected length to be a Number, got " + __typeof(length));
        }
        if (hasResult == null) {
          hasResult = false;
        } else if (typeof hasResult !== "boolean") {
          throw TypeError("Expected hasResult to be a Boolean, got " + __typeof(hasResult));
        }
        if (typeof onValue !== "function") {
          throw TypeError("Expected onValue to be a Function, got " + __typeof(onValue));
        }
        if (typeof onComplete !== "function") {
          throw TypeError("Expected onComplete to be a Function, got " + __typeof(onComplete));
        }
        if (hasResult) {
          result = [];
        } else {
          result = null;
        }
        if (length <= 0) {
          return onComplete(null, result);
        }
        if (limit < 1 || limit !== limit) {
          limit = 1/0;
        }
        broken = null;
        slotsUsed = 0;
        sync = false;
        completed = false;
        function onValueCallback(err, value) {
          if (completed) {
            return;
          }
          --slotsUsed;
          if (err != null && broken == null) {
            broken = err;
          }
          if (hasResult && broken == null && arguments.length > 1) {
            result.push(value);
          }
          if (!sync) {
            next();
          }
        }
        index = -1;
        function next() {
          while (!completed && broken == null && slotsUsed < limit && ++index < length) {
            ++slotsUsed;
            sync = true;
            onValue(index, __once(onValueCallback));
            sync = false;
          }
          if (!completed && (broken != null || slotsUsed === 0)) {
            completed = true;
            if (broken != null) {
              onComplete(broken);
            } else {
              onComplete(null, result);
            }
          }
        }
        next();
      };
      __isArray = typeof Array.isArray === "function" ? Array.isArray
        : (function () {
          var _toString;
          _toString = Object.prototype.toString;
          return function (x) {
            return _toString.call(x) === "[object Array]";
          };
        }());
      __num = function (num) {
        if (typeof num !== "number") {
          throw TypeError("Expected a number, got " + __typeof(num));
        } else {
          return num;
        }
      };
      __once = (function () {
        function replacement() {
          throw Error("Attempted to call function more than once");
        }
        function doNothing() {}
        return function (func, silentFail) {
          if (typeof func !== "function") {
            throw TypeError("Expected func to be a Function, got " + __typeof(func));
          }
          if (silentFail == null) {
            silentFail = false;
          } else if (typeof silentFail !== "boolean") {
            throw TypeError("Expected silentFail to be a Boolean, got " + __typeof(silentFail));
          }
          return function () {
            var f;
            f = func;
            if (silentFail) {
              func = doNothing;
            } else {
              func = replacement;
            }
            return f.apply(this, arguments);
          };
        };
      }());
      __owns = Object.prototype.hasOwnProperty;
      __slice = Array.prototype.slice;
      __toArray = function (x) {
        if (x == null) {
          throw TypeError("Expected an object, got " + __typeof(x));
        } else if (__isArray(x)) {
          return x;
        } else if (typeof x === "string") {
          return x.split("");
        } else {
          return __slice.call(x);
        }
      };
      __typeof = (function () {
        var _toString;
        _toString = Object.prototype.toString;
        return function (o) {
          if (o === void 0) {
            return "Undefined";
          } else if (o === null) {
            return "Null";
          } else {
            return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
          }
        };
      }());
      Type = require("./types");
      nodeToType = (function () {
        var identToType;
        identToType = {
          Boolean: Type.boolean,
          String: Type.string,
          Number: Type.number,
          Array: Type.array,
          Object: Type.object,
          Function: Type["function"],
          RegExp: Type.regexp,
          Date: Type.date,
          Error: Type.error,
          RangeError: Type.error,
          ReferenceError: Type.error,
          SyntaxError: Type.error,
          TypeError: Type.error,
          URIError: Type.error
        };
        return function (node) {
          var _arr, _arr2, _i, _len, _ref, arg, args, basetype, current, data, key,
              Node, type, value;
          Node = require("./parser-nodes");
          if (!(node instanceof Node)) {
            throw TypeError("Expected a Node, got " + __typeof(node));
          }
          if (node instanceof Node.Ident) {
            return (__owns.call(identToType, _ref = node.name) ? identToType[_ref] : void 0) || Type.any;
          } else if (node instanceof Node.Const) {
            if (node.value === null) {
              return Type["null"];
            } else if (node.value === void 0) {
              return Type["undefined"];
            } else {
              return Type.any;
            }
          } else if (node instanceof Node.TypeGeneric) {
            basetype = nodeToType(node.basetype);
            for (_arr = [], _arr2 = __toArray(node.args), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
              arg = _arr2[_i];
              _arr.push(nodeToType(arg));
            }
            args = _arr;
            if (basetype === Type.array || basetype === Type["function"]) {
              return Type.generic.apply(Type, [basetype.base].concat(__toArray(args)));
            } else if (basetype !== Type.any) {
              return Type.generic.apply(Type, [basetype].concat(__toArray(args)));
            } else {
              return Type.any;
            }
          } else if (node instanceof Node.TypeUnion) {
            current = Type.none;
            for (_arr = __toArray(node.types), _i = _arr.length; _i--; ) {
              type = _arr[_i];
              current = current.union(nodeToType(type));
            }
            return current;
          } else if (node instanceof Node.TypeObject) {
            data = {};
            for (_arr = __toArray(node.pairs), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              _ref = _arr[_i];
              key = _ref.key;
              value = _ref.value;
              if (key instanceof Node.Const) {
                data[key.value] = nodeToType(value);
              }
            }
            return Type.makeObject(data);
          } else {
            return Type.any;
          }
        };
      }());
      function map(array, func, arg) {
        var _arr, _i, _len, changed, item, newItem, result;
        result = [];
        changed = false;
        for (_arr = __toArray(array), _i = 0, _len = _arr.length; _i < _len; ++_i) {
          item = _arr[_i];
          newItem = func(item, arg);
          result.push(newItem);
          if (item !== newItem) {
            changed = true;
          }
        }
        if (changed) {
          return result;
        } else {
          return array;
        }
      }
      function mapAsync(array, func) {
        var _i, args, callback, changed;
        _i = arguments.length - 1;
        if (_i > 2) {
          args = __slice.call(arguments, 2, _i);
        } else {
          _i = 2;
          args = [];
        }
        callback = arguments[_i];
        changed = false;
        return __async(
          1,
          __num(array.length),
          true,
          function (_i2, next) {
            var _once, item;
            item = array[_i2];
            return func.apply(void 0, [item].concat(__toArray(args), [
              (_once = false, function (_e, newItem) {
                if (_once) {
                  throw Error("Attempted to call function more than once");
                } else {
                  _once = true;
                }
                if (_e != null) {
                  return next(_e);
                }
                if (item !== newItem) {
                  changed = true;
                }
                return next(null, newItem);
              })
            ]));
          },
          function (err, result) {
            if (typeof err !== "undefined" && err !== null) {
              return callback(err);
            } else {
              return callback(null, changed ? result : array);
            }
          }
        );
      }
      function addParamToScope(scope, param, forceMutable) {
        var _arr, _i, _ref, element, Node, pair;
        Node = require("./parser-nodes");
        if (param instanceof Node.Param) {
          if ((_ref = param.ident) instanceof Node.Ident || _ref instanceof Node.Tmp) {
            scope.add(param.ident, forceMutable || param.isMutable, param.asType ? nodeToType(param.asType) : param.spread ? Type.array : Type.any);
          } else if (param.ident instanceof Node.Access) {
            if (!(param.ident.child instanceof Node.Const) || typeof param.ident.child.value !== "string") {
              throw Error("Expected constant access: " + __typeof(param.ident.child));
            }
            scope.add(
              Node.Ident(param.index, param.scope, param.ident.child.value),
              forceMutable || param.isMutable,
              param.asType ? nodeToType(param.asType) : param.spread ? Type.array : Type.any
            );
          } else {
            throw Error("Unknown param ident: " + __typeof(param.ident));
          }
        } else if (param instanceof Node.Array) {
          for (_arr = __toArray(param.elements), _i = _arr.length; _i--; ) {
            element = _arr[_i];
            addParamToScope(scope, element, forceMutable);
          }
        } else if (param instanceof Node.Object) {
          for (_arr = __toArray(param.pairs), _i = _arr.length; _i--; ) {
            pair = _arr[_i];
            addParamToScope(scope, pair.value, forceMutable);
          }
        } else if (!(param instanceof Node.Nothing)) {
          throw Error("Unknown param node type: " + __typeof(param));
        }
      }
      exports.nodeToType = nodeToType;
      exports.map = map;
      exports.mapAsync = mapAsync;
      exports.addParamToScope = addParamToScope;
    }.call(this));
    
    return module.exports;
  };
  require['./parser-scope'] = function () {
    var module = { exports: this };
    var exports = this;
    (function () {
      "use strict";
      var __create, __import, __isArray, __name, __owns, __slice, __toArray,
          __typeof, _ref, IdentNode, Node, Scope, ScopeDestroyedError, TmpNode,
          Type;
      __create = typeof Object.create === "function" ? Object.create
        : function (x) {
          function F() {}
          F.prototype = x;
          return new F();
        };
      __import = function (dest, source) {
        var k;
        for (k in source) {
          if (__owns.call(source, k)) {
            dest[k] = source[k];
          }
        }
        return dest;
      };
      __isArray = typeof Array.isArray === "function" ? Array.isArray
        : (function () {
          var _toString;
          _toString = Object.prototype.toString;
          return function (x) {
            return _toString.call(x) === "[object Array]";
          };
        }());
      __name = function (func) {
        if (typeof func !== "function") {
          throw TypeError("Expected func to be a Function, got " + __typeof(func));
        }
        return func.displayName || func.name || "";
      };
      __owns = Object.prototype.hasOwnProperty;
      __slice = Array.prototype.slice;
      __toArray = function (x) {
        if (x == null) {
          throw TypeError("Expected an object, got " + __typeof(x));
        } else if (__isArray(x)) {
          return x;
        } else if (typeof x === "string") {
          return x.split("");
        } else {
          return __slice.call(x);
        }
      };
      __typeof = (function () {
        var _toString;
        _toString = Object.prototype.toString;
        return function (o) {
          if (o === void 0) {
            return "Undefined";
          } else if (o === null) {
            return "Null";
          } else {
            return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
          }
        };
      }());
      Type = require("./types");
      Node = require("./parser-nodes");
      IdentNode = Node.Ident;
      TmpNode = Node.Tmp;
      ScopeDestroyedError = (function (Error) {
        var _Error_prototype, _ScopeDestroyedError_prototype;
        function ScopeDestroyedError(message) {
          var _this, err;
          _this = this instanceof ScopeDestroyedError ? this : __create(_ScopeDestroyedError_prototype);
          if (message == null) {
            message = "Scope already destroyed";
          } else if (typeof message !== "string") {
            throw TypeError("Expected message to be a String, got " + __typeof(message));
          }
          _this.message = message;
          err = Error.call(_this, _this.message);
          if (typeof Error.captureStackTrace === "function") {
            Error.captureStackTrace(_this, ScopeDestroyedError);
          } else if ("stack" in err) {
            _this.stack = err.stack;
          }
          return _this;
        }
        _Error_prototype = Error.prototype;
        _ScopeDestroyedError_prototype = ScopeDestroyedError.prototype = __create(_Error_prototype);
        _ScopeDestroyedError_prototype.constructor = ScopeDestroyedError;
        ScopeDestroyedError.displayName = "ScopeDestroyedError";
        if (typeof Error.extended === "function") {
          Error.extended(ScopeDestroyedError);
        }
        _ScopeDestroyedError_prototype.name = "ScopeDestroyedError";
        return ScopeDestroyedError;
      }(Error));
      Scope = (function () {
        var _Scope_prototype;
        function Scope(parent, isTop) {
          var _this;
          _this = this instanceof Scope ? this : __create(_Scope_prototype);
          if (parent == null) {
            parent = null;
          } else if (!(parent instanceof Scope)) {
            throw TypeError("Expected parent to be one of " + (__name(Scope) + " or null") + ", got " + __typeof(parent));
          }
          _this.parent = parent;
          if (isTop == null) {
            isTop = false;
          } else if (typeof isTop !== "boolean") {
            throw TypeError("Expected isTop to be a Boolean, got " + __typeof(isTop));
          }
          _this.isTop = isTop;
          if (!parent && !isTop) {
            throw Error("Must either provide a parent or is-top = true");
          }
          _this.destroyed = false;
          _this.children = [];
          _this.variables = {};
          _this.consts = {};
          _this.tmps = {};
          if (!isTop) {
            parent.children.push(_this);
          }
          return _this;
        }
        _Scope_prototype = Scope.prototype;
        Scope.displayName = "Scope";
        _Scope_prototype._allVariables = function () {
          var _arr, _i, _len, child, obj;
          obj = __import({}, this.variables);
          for (_arr = __toArray(this.children), _i = 0, _len = _arr.length; _i < _len; ++_i) {
            child = _arr[_i];
            __import(obj, child._allVariables());
          }
          return obj;
        };
        _Scope_prototype._allTmps = function () {
          var _arr, _i, _len, child, obj;
          obj = __import({}, this.tmps);
          for (_arr = __toArray(this.children), _i = 0, _len = _arr.length; _i < _len; ++_i) {
            child = _arr[_i];
            __import(obj, child._allTmps());
          }
          return obj;
        };
        _Scope_prototype._allConsts = function () {
          var _arr, _i, _len, child, obj;
          obj = __import({}, this.consts);
          for (_arr = __toArray(this.children), _i = 0, _len = _arr.length; _i < _len; ++_i) {
            child = _arr[_i];
            __import(obj, child._allConsts());
          }
          return obj;
        };
        function isEmpty(obj) {
          var k;
          for (k in obj) {
            if (__owns.call(obj, k)) {
              return false;
            }
          }
          return true;
        }
        _Scope_prototype.inspect = function () {
          var consts, inspect, text, tmps, variables;
          if (!this.isTop) {
            return this.top().inspect();
          }
          inspect = require("util").inspect;
          variables = this._allVariables();
          tmps = this._allTmps();
          consts = this._allConsts();
          text = [];
          text.push("Scope(");
          if (!isEmpty(variables) || !isEmpty(tmps) || !isEmpty(consts)) {
            text.push(inspect(variables));
          }
          if (!isEmpty(tmps) || !isEmpty(consts)) {
            text.push(", ");
            text.push(inspect(tmps));
          }
          if (!isEmpty(consts)) {
            text.push(", ");
            text.push(inspect(consts));
          }
          text.push(")");
          if (this.parent) {
            text.push(" -> ");
            text.push(this.parent.inspect());
          }
          return text.join("");
        };
        _Scope_prototype.destroy = function () {
          var _arr, _i, child, index, parentChildren;
          if (this.destroyed) {
            throw ScopeDestroyedError();
          }
          for (_arr = __toArray(this.children), _i = _arr.length; _i--; ) {
            child = _arr[_i];
            child.destroy();
          }
          if (!this.isTop) {
            parentChildren = this.parent.children;
            index = parentChildren.lastIndexOf(this);
            if (index === -1) {
              throw Error("Not found in parents' children");
            }
            parentChildren.splice(index, 1);
          }
        };
        _Scope_prototype.clone = function (isTop) {
          if (isTop == null) {
            isTop = false;
          } else if (typeof isTop !== "boolean") {
            throw TypeError("Expected isTop to be a Boolean, got " + __typeof(isTop));
          }
          if (this.destroyed) {
            throw ScopeDestroyedError();
          }
          return Scope(this, isTop);
        };
        _Scope_prototype.reparent = function (parent) {
          var index, oldParent, oldParentChildren;
          if (parent == null) {
            parent = null;
          } else if (!(parent instanceof Scope)) {
            throw TypeError("Expected parent to be one of " + (__name(Scope) + " or null") + ", got " + __typeof(parent));
          }
          if (this.destroyed) {
            throw ScopeDestroyedError();
          }
          if (!parent && !this.isTop) {
            throw Error("Must either provide a parent or is-top = true");
          }
          oldParent = this.parent;
          if (parent === oldParent) {
            return;
          }
          if (parent === this) {
            throw Error("Cannot parent to self");
          }
          if (parent && parent.parent === this) {
            throw Error("Trying to become your own grandpa");
          }
          this.parent = parent;
          if (!this.isTop) {
            oldParentChildren = oldParent.children;
            index = oldParentChildren.lastIndexOf(this);
            if (index === -1) {
              throw Error("Not found in old parents' children");
            }
            oldParentChildren.splice(index, 1);
            parent.children.push(this);
          }
        };
        _Scope_prototype.top = function () {
          if (this.destroyed) {
            throw ScopeDestroyedError();
          }
          if (this.isTop) {
            return this;
          } else {
            return this.parent.top();
          }
        };
        _Scope_prototype.add = function (ident, isMutable, type) {
          if (!(ident instanceof IdentNode) && !(ident instanceof TmpNode)) {
            throw TypeError("Expected ident to be one of " + (__name(IdentNode) + " or " + __name(TmpNode)) + ", got " + __typeof(ident));
          }
          if (isMutable == null) {
            isMutable = false;
          } else if (typeof isMutable !== "boolean") {
            throw TypeError("Expected isMutable to be a Boolean, got " + __typeof(isMutable));
          }
          if (!(type instanceof Type)) {
            throw TypeError("Expected type to be a " + __name(Type) + ", got " + __typeof(type));
          }
          if (this.destroyed) {
            throw ScopeDestroyedError();
          }
          if (ident instanceof TmpNode) {
            this.tmps[ident.id] = { isMutable: isMutable, type: type };
          } else {
            this.variables[ident.name] = { isMutable: isMutable, type: type };
          }
        };
        _Scope_prototype.addConst = function (name, value) {
          if (typeof name !== "string") {
            throw TypeError("Expected name to be a String, got " + __typeof(name));
          }
          this.consts[name] = value;
        };
        function getIdent(scope, name) {
          var _arr, _i, _len, _ref, child, variables;
          variables = scope.variables;
          if (__owns.call(variables, name)) {
            return variables[name];
          } else {
            for (_arr = __toArray(scope.children), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              child = _arr[_i];
              if ((_ref = getIdent(child, name)) != null) {
                return _ref;
              }
            }
          }
        }
        function getTmp(scope, id) {
          var _arr, _i, _len, _ref, child, tmps;
          tmps = scope.tmps;
          if (__owns.call(tmps, id)) {
            return tmps[id];
          } else {
            for (_arr = __toArray(scope.children), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              child = _arr[_i];
              if ((_ref = getTmp(child, id)) != null) {
                return _ref;
              }
            }
          }
        }
        function get(scope, ident) {
          var _ref, _ref2, current, isTmp, layers;
          current = scope;
          isTmp = ident instanceof TmpNode;
          layers = 0;
          while (current) {
            ++layers;
            if (layers > 1000) {
              throw Error("Infinite loop detected");
            }
            current = current.top();
            if (isTmp) {
              if ((_ref = getTmp(current, ident.id)) != null) {
                return _ref;
              }
            } else if ((_ref2 = getIdent(current, ident.name)) != null) {
              return _ref2;
            }
            current = current.parent;
          }
        }
        _Scope_prototype.has = function (ident) {
          if (!(ident instanceof IdentNode) && !(ident instanceof TmpNode)) {
            throw TypeError("Expected ident to be one of " + (__name(IdentNode) + " or " + __name(TmpNode)) + ", got " + __typeof(ident));
          }
          if (this.destroyed) {
            throw ScopeDestroyedError();
          }
          return get(this, ident) != null;
        };
        _Scope_prototype.isMutable = function (ident) {
          var _ref;
          if (!(ident instanceof IdentNode) && !(ident instanceof TmpNode)) {
            throw TypeError("Expected ident to be one of " + (__name(IdentNode) + " or " + __name(TmpNode)) + ", got " + __typeof(ident));
          }
          if (this.destroyed) {
            throw ScopeDestroyedError();
          }
          return ((_ref = get(this, ident)) != null ? _ref.isMutable : void 0) || false;
        };
        _Scope_prototype.type = function (ident) {
          var _ref;
          if (!(ident instanceof IdentNode) && !(ident instanceof TmpNode)) {
            throw TypeError("Expected ident to be one of " + (__name(IdentNode) + " or " + __name(TmpNode)) + ", got " + __typeof(ident));
          }
          if (this.destroyed) {
            throw ScopeDestroyedError();
          }
          return ((_ref = get(this, ident)) != null ? _ref.type : void 0) || Type.any;
        };
        function getConst(scope, name) {
          var _arr, _i, _len, _ref, child, consts;
          consts = scope.consts;
          if (__owns.call(consts, name)) {
            return { value: consts[name] };
          } else {
            for (_arr = __toArray(scope.children), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              child = _arr[_i];
              if ((_ref = getConst(child, name)) != null) {
                return _ref;
              }
            }
          }
        }
        _Scope_prototype.constValue = function (name) {
          var _ref, current, layers;
          if (typeof name !== "string") {
            throw TypeError("Expected name to be a String, got " + __typeof(name));
          }
          if (this.destroyed) {
            throw ScopeDestroyedError();
          }
          current = this;
          layers = 0;
          while (current) {
            ++layers;
            if (layers > 1000) {
              throw Error("Infinite loop detected");
            }
            current = current.top();
            if ((_ref = getConst(current, name)) != null) {
              return _ref;
            }
            current = current.parent;
          }
        };
        return Scope;
      }());
      module.exports = Scope;
      (_ref = module.exports).ScopeDestroyedError = ScopeDestroyedError;
    }.call(this));
    
    return module.exports;
  };
  require['./parser-nodes'] = function () {
    var module = { exports: this };
    var exports = this;
    (function (GLOBAL) {
      "use strict";
      var __async, __create, __curry, __in, __isArray, __keys, __name, __num,
          __once, __owns, __slice, __strnum, __toArray, __typeof, _ref,
          AccessMultiNode, AccessNode, ArgsNode, ArrayNode, AssignNode, BinaryNode,
          BlockNode, BreakNode, CallNode, CascadeNode, CommentNode, ConstNode,
          ContinueNode, DebuggerNode, DefNode, EmbedWriteNode, EvalNode, ForInNode,
          ForNode, FunctionNode, IdentNode, IfNode, inspect, isPrimordial,
          MacroAccessNode, MacroConstNode, mapAsync, Node, nodeToType, NothingNode,
          ObjectNode, ParamNode, quote, RegexpNode, ReturnNode, RootNode,
          SpreadNode, SuperNode, SwitchNode, SyntaxChoiceNode, SyntaxManyNode,
          SyntaxParamNode, SyntaxSequenceNode, ThisNode, ThrowNode, TmpNode,
          TmpWrapperNode, TryCatchNode, TryFinallyNode, Type, TypeFunctionNode,
          TypeGenericNode, TypeObjectNode, TypeUnionNode, UnaryNode, VarNode,
          YieldNode;
      __async = function (limit, length, hasResult, onValue, onComplete) {
        var broken, completed, index, result, slotsUsed, sync;
        if (typeof limit !== "number") {
          throw TypeError("Expected limit to be a Number, got " + __typeof(limit));
        }
        if (typeof length !== "number") {
          throw TypeError("Expected length to be a Number, got " + __typeof(length));
        }
        if (hasResult == null) {
          hasResult = false;
        } else if (typeof hasResult !== "boolean") {
          throw TypeError("Expected hasResult to be a Boolean, got " + __typeof(hasResult));
        }
        if (typeof onValue !== "function") {
          throw TypeError("Expected onValue to be a Function, got " + __typeof(onValue));
        }
        if (typeof onComplete !== "function") {
          throw TypeError("Expected onComplete to be a Function, got " + __typeof(onComplete));
        }
        if (hasResult) {
          result = [];
        } else {
          result = null;
        }
        if (length <= 0) {
          return onComplete(null, result);
        }
        if (limit < 1 || limit !== limit) {
          limit = 1/0;
        }
        broken = null;
        slotsUsed = 0;
        sync = false;
        completed = false;
        function onValueCallback(err, value) {
          if (completed) {
            return;
          }
          --slotsUsed;
          if (err != null && broken == null) {
            broken = err;
          }
          if (hasResult && broken == null && arguments.length > 1) {
            result.push(value);
          }
          if (!sync) {
            next();
          }
        }
        index = -1;
        function next() {
          while (!completed && broken == null && slotsUsed < limit && ++index < length) {
            ++slotsUsed;
            sync = true;
            onValue(index, __once(onValueCallback));
            sync = false;
          }
          if (!completed && (broken != null || slotsUsed === 0)) {
            completed = true;
            if (broken != null) {
              onComplete(broken);
            } else {
              onComplete(null, result);
            }
          }
        }
        next();
      };
      __create = typeof Object.create === "function" ? Object.create
        : function (x) {
          function F() {}
          F.prototype = x;
          return new F();
        };
      __curry = function (numArgs, f) {
        var currier;
        if (typeof numArgs !== "number") {
          throw TypeError("Expected numArgs to be a Number, got " + __typeof(numArgs));
        }
        if (typeof f !== "function") {
          throw TypeError("Expected f to be a Function, got " + __typeof(f));
        }
        if (numArgs > 1) {
          currier = function (args) {
            var ret;
            if (__num(args.length) >= numArgs) {
              return f.apply(this, args);
            } else {
              ret = function () {
                if (arguments.length === 0) {
                  return ret;
                } else {
                  return currier.call(this, args.concat(__slice.call(arguments)));
                }
              };
              return ret;
            }
          };
          return currier([]);
        } else {
          return f;
        }
      };
      __in = typeof Array.prototype.indexOf === "function"
        ? (function () {
          var indexOf;
          indexOf = Array.prototype.indexOf;
          return function (child, parent) {
            return indexOf.call(parent, child) !== -1;
          };
        }())
        : function (child, parent) {
          var i, len;
          len = +parent.length;
          i = -1;
          while (++i < len) {
            if (child === parent[i] && i in parent) {
              return true;
            }
          }
          return false;
        };
      __isArray = typeof Array.isArray === "function" ? Array.isArray
        : (function () {
          var _toString;
          _toString = Object.prototype.toString;
          return function (x) {
            return _toString.call(x) === "[object Array]";
          };
        }());
      __keys = typeof Object.keys === "function" ? Object.keys
        : function (x) {
          var key, keys;
          keys = [];
          for (key in x) {
            if (__owns.call(x, key)) {
              keys.push(key);
            }
          }
          return keys;
        };
      __name = function (func) {
        if (typeof func !== "function") {
          throw TypeError("Expected func to be a Function, got " + __typeof(func));
        }
        return func.displayName || func.name || "";
      };
      __num = function (num) {
        if (typeof num !== "number") {
          throw TypeError("Expected a number, got " + __typeof(num));
        } else {
          return num;
        }
      };
      __once = (function () {
        function replacement() {
          throw Error("Attempted to call function more than once");
        }
        function doNothing() {}
        return function (func, silentFail) {
          if (typeof func !== "function") {
            throw TypeError("Expected func to be a Function, got " + __typeof(func));
          }
          if (silentFail == null) {
            silentFail = false;
          } else if (typeof silentFail !== "boolean") {
            throw TypeError("Expected silentFail to be a Boolean, got " + __typeof(silentFail));
          }
          return function () {
            var f;
            f = func;
            if (silentFail) {
              func = doNothing;
            } else {
              func = replacement;
            }
            return f.apply(this, arguments);
          };
        };
      }());
      __owns = Object.prototype.hasOwnProperty;
      __slice = Array.prototype.slice;
      __strnum = function (strnum) {
        var type;
        type = typeof strnum;
        if (type === "string") {
          return strnum;
        } else if (type === "number") {
          return String(strnum);
        } else {
          throw TypeError("Expected a string or number, got " + __typeof(strnum));
        }
      };
      __toArray = function (x) {
        if (x == null) {
          throw TypeError("Expected an object, got " + __typeof(x));
        } else if (__isArray(x)) {
          return x;
        } else if (typeof x === "string") {
          return x.split("");
        } else {
          return __slice.call(x);
        }
      };
      __typeof = (function () {
        var _toString;
        _toString = Object.prototype.toString;
        return function (o) {
          if (o === void 0) {
            return "Undefined";
          } else if (o === null) {
            return "Null";
          } else {
            return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
          }
        };
      }());
      Type = require("./types");
      _ref = require("./parser-utils");
      nodeToType = _ref.nodeToType;
      map = _ref.map;
      mapAsync = _ref.mapAsync;
      _ref = require("./utils");
      quote = _ref.quote;
      isPrimordial = _ref.isPrimordial;
      if ((_ref = require("util")) != null) {
        inspect = _ref.inspect;
      }
      function map(array, func, arg) {
        var _arr, _i, _len, changed, item, newItem, result;
        result = [];
        changed = false;
        for (_arr = __toArray(array), _i = 0, _len = _arr.length; _i < _len; ++_i) {
          item = _arr[_i];
          newItem = func(item, arg);
          result.push(newItem);
          if (item !== newItem) {
            changed = true;
          }
        }
        if (changed) {
          return result;
        } else {
          return array;
        }
      }
      Node = (function () {
        var _Node_prototype;
        function Node() {
          var _this;
          _this = this instanceof Node ? this : __create(_Node_prototype);
          throw Error("Node should not be instantiated directly");
        }
        _Node_prototype = Node.prototype;
        Node.displayName = "Node";
        _Node_prototype.type = function () {
          return Type.any;
        };
        _Node_prototype.walk = function (f) {
          return this;
        };
        _Node_prototype.walkAsync = function (f, callback) {
          return callback(null, this);
        };
        _Node_prototype.cacheable = true;
        _Node_prototype.withLabel = function (label) {
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          return BlockNode(this.index, this.scope, [this], label);
        };
        _Node_prototype._reduce = function (parser) {
          return this.walk(function (node) {
            return node.reduce(parser);
          });
        };
        _Node_prototype.reduce = function (parser) {
          var reduced;
          if (this._reduced != null) {
            return this._reduced;
          } else {
            reduced = this._reduce(parser);
            if (reduced === this) {
              return this._reduced = this;
            } else {
              return this._reduced = reduced.reduce(parser);
            }
          }
        };
        _Node_prototype.isConst = function () {
          return false;
        };
        _Node_prototype.constValue = function () {
          throw Error("Not a const: " + __typeof(this));
        };
        _Node_prototype.isConstType = function () {
          return false;
        };
        _Node_prototype.isConstValue = function () {
          return false;
        };
        _Node_prototype.isLiteral = function () {
          return this.isConst();
        };
        _Node_prototype.literalValue = function () {
          return this.constValue();
        };
        _Node_prototype.isNoop = function (o) {
          return this.reduce(o)._isNoop(o);
        };
        _Node_prototype._isNoop = function (o) {
          return false;
        };
        _Node_prototype.isStatement = function () {
          return false;
        };
        _Node_prototype.rescope = function (newScope) {
          var oldScope;
          if (this.scope === newScope) {
            return this;
          }
          oldScope = this.scope;
          this.scope = newScope;
          function walker(node) {
            var nodeScope, parent;
            nodeScope = node.scope;
            if (nodeScope === newScope) {
              return node;
            } else if (nodeScope === oldScope) {
              return node.rescope(newScope);
            } else {
              parent = nodeScope.parent;
              if (parent === oldScope) {
                nodeScope.reparent(newScope);
              }
              return node.walk(walker);
            }
          }
          return this.walk(walker);
        };
        _Node_prototype.doWrap = function (parser) {
          var innerScope, result;
          if (this.isStatement()) {
            innerScope = parser.pushScope(true, this.scope);
            result = CallNode(
              this.index,
              this.scope,
              FunctionNode(
                this.index,
                this.scope,
                [],
                this.rescope(innerScope),
                true,
                true
              ),
              []
            );
            parser.popScope();
            return result;
          } else {
            return this;
          }
        };
        return Node;
      }());
      function inspectHelper(depth, name, index) {
        var _arr, _i, _len, _some, arg, args, d, found, hasLarge, part, parts;
        args = __slice.call(arguments, 3);
        if (depth != null) {
          d = __num(depth) - 1;
        } else {
          d = null;
        }
        found = false;
        for (_i = args.length; _i--; ) {
          arg = args[_i];
          if (!arg || arg instanceof NothingNode || __isArray(arg) && arg.length === 0) {
            args.pop();
          } else {
            break;
          }
        }
        for (_arr = [], _i = 0, _len = args.length; _i < _len; ++_i) {
          arg = args[_i];
          _arr.push(inspect(arg, null, d));
        }
        parts = _arr;
        _some = false;
        for (_i = 0, _len = parts.length; _i < _len; ++_i) {
          part = parts[_i];
          if (parts.length > 50 || part.indexOf("\n") !== -1) {
            _some = true;
            break;
          }
        }
        hasLarge = _some;
        if (hasLarge) {
          for (_arr = [], _i = 0, _len = parts.length; _i < _len; ++_i) {
            part = parts[_i];
            _arr.push("  " + __strnum(part.split("\n").join("\n  ")));
          }
          parts = _arr;
          return __strnum(name) + "(\n" + __strnum(parts.join(",\n")) + ")";
        } else {
          return __strnum(name) + "(" + __strnum(parts.join(", ")) + ")";
        }
      }
      Node.Access = AccessNode = (function (Node) {
        var _AccessNode_prototype, _Node_prototype;
        function AccessNode(index, scope, parent, child) {
          var _this;
          _this = this instanceof AccessNode ? this : __create(_AccessNode_prototype);
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          if (!(parent instanceof Node)) {
            throw TypeError("Expected parent to be a " + __name(Node) + ", got " + __typeof(parent));
          }
          if (!(child instanceof Node)) {
            throw TypeError("Expected child to be a " + __name(Node) + ", got " + __typeof(child));
          }
          _this.index = index;
          _this.scope = scope;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.parent = parent;
          _this.child = child;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _AccessNode_prototype = AccessNode.prototype = __create(_Node_prototype);
        _AccessNode_prototype.constructor = AccessNode;
        AccessNode.displayName = "AccessNode";
        if (typeof Node.extended === "function") {
          Node.extended(AccessNode);
        }
        AccessNode.cappedName = "Access";
        AccessNode.argNames = ["parent", "child"];
        _AccessNode_prototype.type = function (o) {
          var _ref, _this;
          _this = this;
          if ((_ref = this._type) == null) {
            return this._type = (function () {
              var child, childType, childValue, isString, parentType;
              parentType = _this.parent.type(o);
              isString = parentType.isSubsetOf(Type.string);
              if (isString || parentType.isSubsetOf(Type.arrayLike)) {
                child = o.macroExpand1(_this.child).reduce(o);
                if (child.isConst()) {
                  childValue = child.constValue();
                  if (childValue === "length") {
                    return Type.number;
                  } else if (typeof childValue === "number") {
                    if (__num(childValue) >= 0 && __num(childValue) % 1 === 0) {
                      if (isString) {
                        return Type.string.union(Type["undefined"]);
                      } else if (parentType.subtype) {
                        return parentType.subtype.union(Type["undefined"]);
                      } else {
                        return Type.any;
                      }
                    } else {
                      return Type["undefined"];
                    }
                  }
                } else {
                  childType = child.type(o);
                  if (childType.isSubsetOf(Type.number)) {
                    if (isString) {
                      return Type.string.union(Type["undefined"]);
                    } else if (parentType.subtype) {
                      return parentType.subtype.union(Type["undefined"]);
                    } else {
                      return Type.any;
                    }
                  }
                }
              } else if (parentType.isSubsetOf(Type.object) && typeof parentType.value === "function") {
                child = o.macroExpand1(_this.child).reduce(o);
                if (child.isConst()) {
                  return parentType.value(String(child.constValue()));
                }
              }
              return Type.any;
            }());
          } else {
            return _ref;
          }
        };
        _AccessNode_prototype._reduce = function (o) {
          var _ref, args, cachedParent, child, cValue, end, hasEnd, hasStep,
              inclusive, parent, pValue, start, step, value;
          parent = this.parent.reduce(o).doWrap(o);
          cachedParent = null;
          function replaceLengthIdent(node) {
            var nodeParent;
            if (node instanceof IdentNode && node.name === "__currentArrayLength") {
              if (parent.cacheable && cachedParent == null) {
                cachedParent = o.makeTmp(node.index, "ref", parent.type(o));
                cachedParent.scope = node.scope;
              }
              return AccessNode(
                node.index,
                node.scope,
                cachedParent != null ? cachedParent : parent,
                ConstNode(node.index, node.scope, "length")
              );
            } else if (node instanceof AccessNode) {
              nodeParent = replaceLengthIdent(node.parent);
              if (nodeParent !== node.parent) {
                return AccessNode(node.index, node.scope, nodeParent, node.child).walk(replaceLengthIdent);
              } else {
                return node.walk(replaceLengthIdent);
              }
            } else {
              return node.walk(replaceLengthIdent);
            }
          }
          child = replaceLengthIdent(this.child.reduce(o).doWrap(o));
          if (cachedParent != null) {
            return TmpWrapperNode(
              this.index,
              this.scope,
              AccessNode(
                this.index,
                this.scope,
                AssignNode(
                  this.index,
                  this.scope,
                  cachedParent,
                  "=",
                  parent
                ),
                child
              ),
              [cachedParent.id]
            );
          }
          if (parent.isConst() && child.isConst()) {
            pValue = parent.constValue();
            cValue = child.constValue();
            if (cValue in Object(pValue)) {
              value = pValue[cValue];
              if (value === null || value instanceof RegExp || (_ref = typeof value) === "string" || _ref === "number" || _ref === "boolean" || _ref === "undefined") {
                return ConstNode(this.index, this.scope, value);
              }
            }
          }
          if (child instanceof CallNode && child.func instanceof IdentNode && child.func.name === "__range") {
            _ref = child.args;
            start = _ref[0];
            end = _ref[1];
            step = _ref[2];
            inclusive = _ref[3];
            hasStep = !step.isConst() || step.constValue() !== 1;
            if (!hasStep) {
              if (inclusive.isConst()) {
                if (inclusive.constValue()) {
                  if (end.isConst() && typeof end.constValue() === "number") {
                    end = ConstNode(end.index, end.scope, __num(end.constValue()) + 1 || 1/0);
                  } else {
                    end = BinaryNode(
                      end.index,
                      end.scope,
                      BinaryNode(
                        end.index,
                        end.scope,
                        end,
                        "+",
                        ConstNode(inclusive.index, inclusive.scope, 1)
                      ),
                      "||",
                      ConstNode(end.index, end.scope, 1/0)
                    );
                  }
                }
              } else {
                end = IfNode(
                  end.index,
                  end.scope,
                  inclusive,
                  BinaryNode(
                    end.index,
                    end.scope,
                    BinaryNode(
                      end.index,
                      end.scope,
                      end,
                      "+",
                      ConstNode(inclusive.index, inclusive.scope, 1)
                    ),
                    "||",
                    ConstNode(end.index, end.scope, 1/0)
                  ),
                  end
                );
              }
            }
            args = [parent];
            hasEnd = !end.isConst() || (_ref = end.constValue()) !== void 0 && _ref !== 1/0;
            if (!start.isConst() || start.constValue() !== 0 || hasEnd || hasStep) {
              args.push(start);
            }
            if (hasEnd || hasStep) {
              args.push(end);
            }
            if (hasStep) {
              args.push(step);
              if (!inclusive.isConst() || inclusive.constValue()) {
                args.push(inclusive);
              }
            }
            return CallNode(
              this.index,
              this.scope,
              IdentNode(this.index, this.scope, hasStep ? "__sliceStep" : "__slice"),
              args,
              false,
              !hasStep
            ).reduce(o);
          } else if (parent !== this.parent || child !== this.child) {
            return AccessNode(this.index, this.scope, parent, child);
          } else {
            return this;
          }
        };
        _AccessNode_prototype._isNoop = function (o) {
          var _ref;
          if ((_ref = this.__isNoop) == null) {
            return this.__isNoop = this.parent.isNoop(o) && this.child.isNoop(o);
          } else {
            return _ref;
          }
        };
        _AccessNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "AccessNode",
            this.index,
            this.parent,
            this.child
          );
        };
        _AccessNode_prototype.walk = function (f) {
          var child, parent;
          parent = f(this.parent);
          child = f(this.child);
          if (parent !== this.parent || child !== this.child) {
            return AccessNode(this.index, this.scope, parent, child);
          } else {
            return this;
          }
        };
        _AccessNode_prototype.walkAsync = function (f, callback) {
          var _once, _this;
          _this = this;
          return f(this.parent, (_once = false, function (_e, parent) {
            var _once2;
            if (_once) {
              throw Error("Attempted to call function more than once");
            } else {
              _once = true;
            }
            if (_e != null) {
              return callback(_e);
            }
            return f(_this.child, (_once2 = false, function (_e2, child) {
              if (_once2) {
                throw Error("Attempted to call function more than once");
              } else {
                _once2 = true;
              }
              if (_e2 != null) {
                return callback(_e2);
              }
              return callback(null, parent !== _this.parent || child !== _this.child ? AccessNode(_this.index, _this.scope, parent, child) : _this);
            }));
          }));
        };
        return AccessNode;
      }(Node));
      Node.AccessMulti = AccessMultiNode = (function (Node) {
        var _AccessMultiNode_prototype, _Node_prototype;
        function AccessMultiNode(index, scope, parent, elements) {
          var _i, _this;
          _this = this instanceof AccessMultiNode ? this : __create(_AccessMultiNode_prototype);
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          if (!(parent instanceof Node)) {
            throw TypeError("Expected parent to be a " + __name(Node) + ", got " + __typeof(parent));
          }
          if (!__isArray(elements)) {
            throw TypeError("Expected elements to be an Array, got " + __typeof(elements));
          } else {
            for (_i = elements.length; _i--; ) {
              if (!(elements[_i] instanceof Node)) {
                throw TypeError("Expected " + ("elements[" + _i + "]") + " to be a " + __name(Node) + ", got " + __typeof(elements[_i]));
              }
            }
          }
          _this.index = index;
          _this.scope = scope;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.parent = parent;
          _this.elements = elements;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _AccessMultiNode_prototype = AccessMultiNode.prototype = __create(_Node_prototype);
        _AccessMultiNode_prototype.constructor = AccessMultiNode;
        AccessMultiNode.displayName = "AccessMultiNode";
        if (typeof Node.extended === "function") {
          Node.extended(AccessMultiNode);
        }
        AccessMultiNode.cappedName = "AccessMulti";
        AccessMultiNode.argNames = ["parent", "elements"];
        _AccessMultiNode_prototype.type = function () {
          return Type.array;
        };
        _AccessMultiNode_prototype._reduce = function (o) {
          var _this, parent, result, setParent, tmp, tmpIds;
          _this = this;
          parent = this.parent.reduce(o);
          setParent = parent;
          tmpIds = [];
          if (parent.cacheable) {
            tmp = o.makeTmp(o.indexFromPosition(this.index), "ref", parent.type(o));
            tmp.scope = this.scope;
            tmpIds.push(tmp.id);
            setParent = AssignNode(
              this.index,
              this.scope,
              tmp,
              "=",
              parent.doWrap(o)
            );
            parent = tmp;
          }
          result = ArrayNode(this.index, this.scope, (function () {
            var _arr, _arr2, _len, element, j;
            for (_arr = [], _arr2 = __toArray(_this.elements), j = 0, _len = _arr2.length; j < _len; ++j) {
              element = _arr2[j];
              _arr.push(AccessNode(
                _this.index,
                _this.scope,
                j === 0 ? setParent : parent,
                element.reduce(o)
              ));
            }
            return _arr;
          }()));
          if (tmpIds.length) {
            return TmpWrapperNode(this.index, this.scope, result, tmpIds);
          } else {
            return result;
          }
        };
        _AccessMultiNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "AccessMultiNode",
            this.index,
            this.parent,
            this.elements
          );
        };
        _AccessMultiNode_prototype.walk = function (f) {
          var elements, parent;
          parent = f(this.parent);
          elements = map(this.elements, f);
          if (parent !== this.parent || elements !== this.elements) {
            return AccessMultiNode(this.index, this.scope, parent, elements);
          } else {
            return this;
          }
        };
        _AccessMultiNode_prototype.walkAsync = function (f, callback) {
          var _once, _this;
          _this = this;
          return f(this.parent, (_once = false, function (_e, parent) {
            var _once2;
            if (_once) {
              throw Error("Attempted to call function more than once");
            } else {
              _once = true;
            }
            if (_e != null) {
              return callback(_e);
            }
            return mapAsync(_this.elements, f, (_once2 = false, function (_e2, elements) {
              if (_once2) {
                throw Error("Attempted to call function more than once");
              } else {
                _once2 = true;
              }
              if (_e2 != null) {
                return callback(_e2);
              }
              return callback(null, parent !== _this.parent || elements !== _this.elements ? AccessMultiNode(_this.index, _this.scope, parent, elements) : _this);
            }));
          }));
        };
        return AccessMultiNode;
      }(Node));
      Node.Args = ArgsNode = (function (Node) {
        var _ArgsNode_prototype, _Node_prototype;
        function ArgsNode(index, scope) {
          var _this;
          _this = this instanceof ArgsNode ? this : __create(_ArgsNode_prototype);
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          _this.index = index;
          _this.scope = scope;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _ArgsNode_prototype = ArgsNode.prototype = __create(_Node_prototype);
        _ArgsNode_prototype.constructor = ArgsNode;
        ArgsNode.displayName = "ArgsNode";
        if (typeof Node.extended === "function") {
          Node.extended(ArgsNode);
        }
        ArgsNode.cappedName = "Args";
        ArgsNode.argNames = [];
        _ArgsNode_prototype.type = function () {
          return Type.args;
        };
        _ArgsNode_prototype.cacheable = false;
        _ArgsNode_prototype._isNoop = function () {
          return true;
        };
        _ArgsNode_prototype.inspect = function (depth) {
          return inspectHelper(depth, "ArgsNode", this.index);
        };
        return ArgsNode;
      }(Node));
      Node.Array = ArrayNode = (function (Node) {
        var _ArrayNode_prototype, _Node_prototype;
        function ArrayNode(index, scope, elements) {
          var _i, _this;
          _this = this instanceof ArrayNode ? this : __create(_ArrayNode_prototype);
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          if (!__isArray(elements)) {
            throw TypeError("Expected elements to be an Array, got " + __typeof(elements));
          } else {
            for (_i = elements.length; _i--; ) {
              if (!(elements[_i] instanceof Node)) {
                throw TypeError("Expected " + ("elements[" + _i + "]") + " to be a " + __name(Node) + ", got " + __typeof(elements[_i]));
              }
            }
          }
          _this.index = index;
          _this.scope = scope;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.elements = elements;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _ArrayNode_prototype = ArrayNode.prototype = __create(_Node_prototype);
        _ArrayNode_prototype.constructor = ArrayNode;
        ArrayNode.displayName = "ArrayNode";
        if (typeof Node.extended === "function") {
          Node.extended(ArrayNode);
        }
        ArrayNode.cappedName = "Array";
        ArrayNode.argNames = ["elements"];
        _ArrayNode_prototype.type = function () {
          return Type.array;
        };
        _ArrayNode_prototype._reduce = function (o) {
          var elements;
          elements = map(this.elements, function (x) {
            return x.reduce(o).doWrap(o);
          });
          if (elements !== this.elements) {
            return ArrayNode(this.index, this.scope, elements);
          } else {
            return this;
          }
        };
        _ArrayNode_prototype._isNoop = function (o) {
          var _arr, _every, _i, _len, _ref, element;
          if ((_ref = this.__isNoop) == null) {
            _every = true;
            for (_arr = __toArray(this.elements), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              element = _arr[_i];
              if (!element.isNoop(o)) {
                _every = false;
                break;
              }
            }
            return this.__isNoop = _every;
          } else {
            return _ref;
          }
        };
        _ArrayNode_prototype.isLiteral = function () {
          var _arr, _every, _i, _len, _ref, element;
          if ((_ref = this._isLiteral) == null) {
            _every = true;
            for (_arr = __toArray(this.elements), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              element = _arr[_i];
              if (!element.isLiteral()) {
                _every = false;
                break;
              }
            }
            return this._isLiteral = _every;
          } else {
            return _ref;
          }
        };
        _ArrayNode_prototype.literalValue = function () {
          var _arr, _arr2, _i, _len, element;
          for (_arr = [], _arr2 = __toArray(this.elements), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
            element = _arr2[_i];
            _arr.push(element.literalValue());
          }
          return _arr;
        };
        _ArrayNode_prototype.inspect = function (depth) {
          return inspectHelper(depth, "ArrayNode", this.index, this.elements);
        };
        _ArrayNode_prototype.walk = function (f) {
          var elements;
          elements = map(this.elements, f);
          if (elements !== this.elements) {
            return ArrayNode(this.index, this.scope, elements);
          } else {
            return this;
          }
        };
        _ArrayNode_prototype.walkAsync = function (f, callback) {
          var _once, _this;
          _this = this;
          return mapAsync(this.elements, f, (_once = false, function (_e, elements) {
            if (_once) {
              throw Error("Attempted to call function more than once");
            } else {
              _once = true;
            }
            if (_e != null) {
              return callback(_e);
            }
            return callback(null, elements !== _this.elements ? ArrayNode(_this.index, _this.scope, elements) : _this);
          }));
        };
        return ArrayNode;
      }(Node));
      Node.Assign = AssignNode = (function (Node) {
        var _AssignNode_prototype, _Node_prototype;
        function AssignNode(index, scope, left, op, right) {
          var _this;
          _this = this instanceof AssignNode ? this : __create(_AssignNode_prototype);
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          if (!(left instanceof Node)) {
            throw TypeError("Expected left to be a " + __name(Node) + ", got " + __typeof(left));
          }
          if (typeof op !== "string") {
            throw TypeError("Expected op to be a String, got " + __typeof(op));
          }
          if (!(right instanceof Node)) {
            throw TypeError("Expected right to be a " + __name(Node) + ", got " + __typeof(right));
          }
          _this.index = index;
          _this.scope = scope;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.left = left;
          _this.op = op;
          _this.right = right;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _AssignNode_prototype = AssignNode.prototype = __create(_Node_prototype);
        _AssignNode_prototype.constructor = AssignNode;
        AssignNode.displayName = "AssignNode";
        if (typeof Node.extended === "function") {
          Node.extended(AssignNode);
        }
        AssignNode.cappedName = "Assign";
        AssignNode.argNames = ["left", "op", "right"];
        _AssignNode_prototype.type = (function () {
          var ops;
          ops = {
            "=": function (left, right) {
              return right;
            },
            "+=": function (left, right) {
              if (left.isSubsetOf(Type.numeric) && right.isSubsetOf(Type.numeric)) {
                return Type.number;
              } else if (left.overlaps(Type.numeric) && right.overlaps(Type.numeric)) {
                return Type.stringOrNumber;
              } else {
                return Type.string;
              }
            },
            "-=": Type.number,
            "*=": Type.number,
            "/=": Type.number,
            "%=": Type.number,
            "<<=": Type.number,
            ">>=": Type.number,
            ">>>=": Type.number,
            "&=": Type.number,
            "^=": Type.number,
            "|=": Type.number
          };
          return function (o) {
            var _ref, _ref2, type;
            if ((_ref = this._type) == null) {
              if (__owns.call(ops, _ref2 = this.op)) {
                type = ops[_ref2];
              }
              if (!type) {
                return this._type = Type.any;
              } else if (typeof type === "function") {
                return this._type = type(this.left.type(o), this.right.type(o));
              } else {
                return this._type = type;
              }
            } else {
              return _ref;
            }
          };
        }());
        _AssignNode_prototype._reduce = function (o) {
          var left, right;
          left = this.left.reduce(o);
          right = this.right.reduce(o).doWrap(o);
          if (left !== this.left || right !== this.right) {
            return AssignNode(
              this.index,
              this.scope,
              left,
              this.op,
              right
            );
          } else {
            return this;
          }
        };
        _AssignNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "AssignNode",
            this.index,
            this.left,
            this.op,
            this.right
          );
        };
        _AssignNode_prototype.walk = function (f) {
          var left, right;
          left = f(this.left);
          right = f(this.right);
          if (left !== this.left || right !== this.right) {
            return AssignNode(
              this.index,
              this.scope,
              left,
              this.op,
              right
            );
          } else {
            return this;
          }
        };
        _AssignNode_prototype.walkAsync = function (f, callback) {
          var _once, _this;
          _this = this;
          return f(this.left, (_once = false, function (_e, left) {
            var _once2;
            if (_once) {
              throw Error("Attempted to call function more than once");
            } else {
              _once = true;
            }
            if (_e != null) {
              return callback(_e);
            }
            return f(_this.right, (_once2 = false, function (_e2, right) {
              if (_once2) {
                throw Error("Attempted to call function more than once");
              } else {
                _once2 = true;
              }
              if (_e2 != null) {
                return callback(_e2);
              }
              return callback(null, left !== _this.left || right !== _this.right
                ? AssignNode(
                  _this.index,
                  _this.scope,
                  left,
                  _this.op,
                  right
                )
                : _this);
            }));
          }));
        };
        return AssignNode;
      }(Node));
      Node.Binary = BinaryNode = (function (Node) {
        var _BinaryNode_prototype, _Node_prototype;
        function BinaryNode(index, scope, left, op, right) {
          var _this;
          _this = this instanceof BinaryNode ? this : __create(_BinaryNode_prototype);
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          if (!(left instanceof Node)) {
            throw TypeError("Expected left to be a " + __name(Node) + ", got " + __typeof(left));
          }
          if (typeof op !== "string") {
            throw TypeError("Expected op to be a String, got " + __typeof(op));
          }
          if (!(right instanceof Node)) {
            throw TypeError("Expected right to be a " + __name(Node) + ", got " + __typeof(right));
          }
          _this.index = index;
          _this.scope = scope;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.left = left;
          _this.op = op;
          _this.right = right;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _BinaryNode_prototype = BinaryNode.prototype = __create(_Node_prototype);
        _BinaryNode_prototype.constructor = BinaryNode;
        BinaryNode.displayName = "BinaryNode";
        if (typeof Node.extended === "function") {
          Node.extended(BinaryNode);
        }
        BinaryNode.cappedName = "Binary";
        BinaryNode.argNames = ["left", "op", "right"];
        _BinaryNode_prototype.type = (function () {
          var ops;
          ops = {
            "*": Type.number,
            "/": Type.number,
            "%": Type.number,
            "+": function (left, right) {
              if (left.isSubsetOf(Type.numeric) && right.isSubsetOf(Type.numeric)) {
                return Type.number;
              } else if (left.overlaps(Type.numeric) && right.overlaps(Type.numeric)) {
                return Type.stringOrNumber;
              } else {
                return Type.string;
              }
            },
            "-": Type.number,
            "<<": Type.number,
            ">>": Type.number,
            ">>>": Type.number,
            "<": Type.boolean,
            "<=": Type.boolean,
            ">": Type.boolean,
            ">=": Type.boolean,
            "in": Type.boolean,
            "instanceof": Type.boolean,
            "==": Type.boolean,
            "!=": Type.boolean,
            "===": Type.boolean,
            "!==": Type.boolean,
            "&": Type.number,
            "^": Type.number,
            "|": Type.number,
            "&&": function (left, right) {
              return left.intersect(Type.potentiallyFalsy).union(right);
            },
            "||": function (left, right) {
              return left.intersect(Type.potentiallyTruthy).union(right);
            }
          };
          return function (o) {
            var _ref, _ref2, type;
            if ((_ref = this._type) == null) {
              if (__owns.call(ops, _ref2 = this.op)) {
                type = ops[_ref2];
              }
              if (!type) {
                return this._type = Type.any;
              } else if (typeof type === "function") {
                return this._type = type(this.left.type(o), this.right.type(o));
              } else {
                return this._type = type;
              }
            } else {
              return _ref;
            }
          };
        }());
        _BinaryNode_prototype._reduce = (function () {
          var constOps, leftConstOps, nonConstOps, rightConstOps;
          constOps = {
            "*": __curry(2, function (x, y) {
              return x * y;
            }),
            "/": __curry(2, function (x, y) {
              return x / y;
            }),
            "%": __curry(2, function (x, y) {
              return x % y;
            }),
            "+": (function () {
              function isJSNumeric(x) {
                var _ref;
                return x === null || (_ref = typeof x) === "number" || _ref === "boolean" || _ref === "undefined";
              }
              return function (left, right) {
                if (isJSNumeric(left) && isJSNumeric(right)) {
                  return left - -right;
                } else {
                  return "" + left + right;
                }
              };
            }()),
            "-": __curry(2, function (x, y) {
              return x - y;
            }),
            "<<": __curry(2, function (x, y) {
              return x << y;
            }),
            ">>": __curry(2, function (x, y) {
              return x >> y;
            }),
            ">>>": __curry(2, function (x, y) {
              return x >>> y;
            }),
            "<": __curry(2, function (x, y) {
              return x < y;
            }),
            "<=": __curry(2, function (x, y) {
              return x <= y;
            }),
            ">": __curry(2, function (x, y) {
              return x > y;
            }),
            ">=": __curry(2, function (x, y) {
              return x >= y;
            }),
            "==": __curry(2, function (x, y) {
              return x == y;
            }),
            "!=": __curry(2, function (x, y) {
              return x != y;
            }),
            "===": __curry(2, function (x, y) {
              return x === y;
            }),
            "!==": __curry(2, function (x, y) {
              return x !== y;
            }),
            "&": __curry(2, function (x, y) {
              return x & y;
            }),
            "^": __curry(2, function (x, y) {
              return x ^ y;
            }),
            "|": __curry(2, function (x, y) {
              return x | y;
            }),
            "&&": __curry(2, function (x, y) {
              return x && y;
            }),
            "||": __curry(2, function (x, y) {
              return x || y;
            })
          };
          function leftConstNan(x, y) {
            var _ref;
            if ((_ref = x.constValue()) !== _ref) {
              return BlockNode(this.index, this.scope, [y, x]);
            }
          }
          leftConstOps = {
            "*": function (x, y) {
              var _ref;
              if (x.constValue() === 1) {
                return UnaryNode(this.index, this.scope, "+", y);
              } else if (x.constValue() === -1) {
                return UnaryNode(this.index, this.scope, "-", y);
              } else if ((_ref = x.constValue()) !== _ref) {
                return BlockNode(this.index, this.scope, [y, x]);
              }
            },
            "/": leftConstNan,
            "%": leftConstNan,
            "+": function (x, y, o) {
              var _ref;
              if (x.constValue() === 0 && y.type(o).isSubsetOf(Type.number)) {
                return UnaryNode(this.index, this.scope, "+", y);
              } else if (x.constValue() === "" && y.type(o).isSubsetOf(Type.string)) {
                return y;
              } else if (typeof x.constValue() === "string" && y instanceof BinaryNode && y.op === "+" && y.left.isConst() && typeof y.left.constValue() === "string") {
                return BinaryNode(
                  this.index,
                  this.scope,
                  ConstNode(x.index, this.scope, __strnum(x.constValue()) + __strnum(y.left.constValue())),
                  "+",
                  y.right
                );
              } else if ((_ref = x.constValue()) !== _ref) {
                return BlockNode(this.index, this.scope, [y, x]);
              }
            },
            "-": function (x, y) {
              var _ref;
              if (x.constValue() === 0) {
                return UnaryNode(this.index, this.scope, "-", y);
              } else if ((_ref = x.constValue()) !== _ref) {
                return BlockNode(this.index, this.scope, [y, x]);
              }
            },
            "<<": leftConstNan,
            ">>": leftConstNan,
            ">>>": leftConstNan,
            "&": leftConstNan,
            "|": leftConstNan,
            "^": leftConstNan,
            "&&": function (x, y) {
              if (x.constValue()) {
                return y;
              } else {
                return x;
              }
            },
            "||": function (x, y) {
              if (x.constValue()) {
                return x;
              } else {
                return y;
              }
            }
          };
          function rightConstNan(x, y) {
            var _ref;
            if ((_ref = y.constValue()) !== _ref) {
              return BlockNode(this.index, this.scope, [x, y]);
            }
          }
          rightConstOps = {
            "*": function (x, y) {
              var _ref;
              if (y.constValue() === 1) {
                return UnaryNode(this.index, this.scope, "+", x);
              } else if (y.constValue() === -1) {
                return UnaryNode(this.index, this.scope, "-", x);
              } else if ((_ref = y.constValue()) !== _ref) {
                return BlockNode(this.index, this.scope, [x, y]);
              }
            },
            "/": function (x, y) {
              var _ref;
              if (y.constValue() === 1) {
                return UnaryNode(this.index, this.scope, "+", x);
              } else if (y.constValue() === -1) {
                return UnaryNode(this.index, this.scope, "-", x);
              } else if ((_ref = y.constValue()) !== _ref) {
                return BlockNode(this.index, this.scope, [x, y]);
              }
            },
            "%": rightConstNan,
            "+": function (x, y, o) {
              var _ref;
              if (y.constValue() === 0 && x.type(o).isSubsetOf(Type.number)) {
                return UnaryNode(this.index, this.scope, "+", x);
              } else if (typeof y.constValue() === "number" && __num(y.constValue()) < 0 && x.type(o).isSubsetOf(Type.number)) {
                return BinaryNode(
                  this.index,
                  this.scope,
                  x,
                  "-",
                  ConstNode(y.index, this.scope, -__num(y.constValue()))
                );
              } else if (y.constValue() === "" && x.type(o).isSubsetOf(Type.string)) {
                return x;
              } else if (typeof y.constValue() === "string" && x instanceof BinaryNode && x.op === "+" && x.right.isConst() && typeof x.right.constValue() === "string") {
                return BinaryNode(
                  this.index,
                  this.scope,
                  x.left,
                  "+",
                  ConstNode(x.right.index, this.scope, __strnum(x.right.constValue()) + __strnum(y.constValue()))
                );
              } else if ((_ref = y.constValue()) !== _ref) {
                return BlockNode(this.index, this.scope, [x, y]);
              }
            },
            "-": function (x, y, o) {
              var _ref;
              if (y.constValue() === 0) {
                return UnaryNode(this.index, this.scope, "+", x);
              } else if (typeof y.constValue() === "number" && __num(y.constValue()) < 0 && x.type(o).isSubsetOf(Type.number)) {
                return BinaryNode(
                  this.index,
                  this.scope,
                  x,
                  "+",
                  ConstNode(y.index, this.scope, -__num(y.constValue()))
                );
              } else if ((_ref = y.constValue()) !== _ref) {
                return BlockNode(this.index, this.scope, [x, y]);
              }
            },
            "<<": rightConstNan,
            ">>": rightConstNan,
            ">>>": rightConstNan,
            "&": rightConstNan,
            "|": rightConstNan,
            "^": rightConstNan
          };
          nonConstOps = {
            "&&": function (x, y, o) {
              var truthy, xRightType, xType;
              xType = x.type(o);
              if (xType.isSubsetOf(Type.alwaysTruthy)) {
                return BlockNode(this.index, this.scope, [x, y]);
              } else if (xType.isSubsetOf(Type.alwaysFalsy)) {
                return x;
              } else if (x instanceof BinaryNode && x.op === "&&") {
                if (x.right.isConst()) {
                  truthy = !!x.right.constValue();
                } else {
                  xRightType = x.right.type(o);
                  if (xRightType.isSubsetOf(Type.alwaysTruthy)) {
                    truthy = true;
                  } else if (xRightType.isSubsetOf(Type.alwaysFalsy)) {
                    truthy = false;
                  } else {
                    truthy = null;
                  }
                }
                if (truthy === true) {
                  return BinaryNode(
                    this.index,
                    this.scope,
                    x.left,
                    "&&",
                    BlockNode(x.right.index, this.scope, [x.right, y])
                  );
                } else if (truthy === false) {
                  return x;
                }
              }
            },
            "||": function (x, y, o) {
              var test, truthy, whenTrue, xRightType, xType;
              xType = x.type(o);
              if (xType.isSubsetOf(Type.alwaysTruthy)) {
                return x;
              } else if (xType.isSubsetOf(Type.alwaysFalsy)) {
                return BlockNode(this.index, this.scope, [x, y]);
              } else if (x instanceof BinaryNode && x.op === "||") {
                if (x.right.isConst()) {
                  truthy = !!x.right.constValue();
                } else {
                  xRightType = x.right.type(o);
                  if (xRightType.isSubsetOf(Type.alwaysTruthy)) {
                    truthy = true;
                  } else if (xRightType.isSubsetOf(Type.alwaysFalsy)) {
                    truthy = false;
                  } else {
                    truthy = null;
                  }
                }
                if (truthy === true) {
                  return x;
                } else if (truthy === false) {
                  return BinaryNode(
                    this.index,
                    this.scope,
                    x.left,
                    "||",
                    BlockNode(x.right.index, this.scope, [x.right, y])
                  );
                }
              } else if (x instanceof IfNode && x.whenFalse.isConst() && !x.whenFalse.constValue()) {
                test = x.test;
                whenTrue = x.whenTrue;
                while (whenTrue instanceof IfNode && whenTrue.whenFalse.isConst() && !whenTrue.whenFalse.constValue()) {
                  test = BinaryNode(
                    x.index,
                    x.scope,
                    test,
                    "&&",
                    whenTrue.test
                  );
                  whenTrue = whenTrue.whenTrue;
                }
                return BinaryNode(
                  this.index,
                  this.scope,
                  BinaryNode(
                    x.index,
                    x.scope,
                    test,
                    "&&",
                    whenTrue
                  ),
                  "||",
                  y
                );
              }
            }
          };
          return function (o) {
            var _ref, left, op, right;
            left = this.left.reduce(o).doWrap(o);
            right = this.right.reduce(o).doWrap(o);
            op = this.op;
            if (left.isConst()) {
              if (right.isConst() && __owns.call(constOps, op)) {
                return ConstNode(this.index, this.scope, constOps[op](left.constValue(), right.constValue()));
              }
              if (__owns.call(leftConstOps, op) && (_ref = leftConstOps[op].call(this, left, right, o)) != null) {
                return _ref;
              }
            }
            if (right.isConst() && __owns.call(rightConstOps, op) && (_ref = rightConstOps[op].call(this, left, right, o)) != null) {
              return _ref;
            }
            if (__owns.call(nonConstOps, op) && (_ref = nonConstOps[op].call(this, left, right, o)) != null) {
              return _ref;
            }
            if (left !== this.left || right !== this.right) {
              return BinaryNode(
                this.index,
                this.scope,
                left,
                op,
                right
              );
            } else {
              return this;
            }
          };
        }());
        _BinaryNode_prototype._isNoop = function (o) {
          var _ref;
          if ((_ref = this.__isNoop) == null) {
            return this.__isNoop = this.left.isNoop(o) && this.right.isNoop(o);
          } else {
            return _ref;
          }
        };
        _BinaryNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "BinaryNode",
            this.index,
            this.left,
            this.op,
            this.right
          );
        };
        _BinaryNode_prototype.walk = function (f) {
          var left, right;
          left = f(this.left);
          right = f(this.right);
          if (left !== this.left || right !== this.right) {
            return BinaryNode(
              this.index,
              this.scope,
              left,
              this.op,
              right
            );
          } else {
            return this;
          }
        };
        _BinaryNode_prototype.walkAsync = function (f, callback) {
          var _once, _this;
          _this = this;
          return f(this.left, (_once = false, function (_e, left) {
            var _once2;
            if (_once) {
              throw Error("Attempted to call function more than once");
            } else {
              _once = true;
            }
            if (_e != null) {
              return callback(_e);
            }
            return f(_this.right, (_once2 = false, function (_e2, right) {
              if (_once2) {
                throw Error("Attempted to call function more than once");
              } else {
                _once2 = true;
              }
              if (_e2 != null) {
                return callback(_e2);
              }
              return callback(null, left !== _this.left || right !== _this.right
                ? BinaryNode(
                  _this.index,
                  _this.scope,
                  left,
                  _this.op,
                  right
                )
                : _this);
            }));
          }));
        };
        return BinaryNode;
      }(Node));
      Node.Block = BlockNode = (function (Node) {
        var _BlockNode_prototype, _Node_prototype;
        function BlockNode(index, scope, nodes, label) {
          var _i, _this;
          _this = this instanceof BlockNode ? this : __create(_BlockNode_prototype);
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          if (!__isArray(nodes)) {
            throw TypeError("Expected nodes to be an Array, got " + __typeof(nodes));
          } else {
            for (_i = nodes.length; _i--; ) {
              if (!(nodes[_i] instanceof Node)) {
                throw TypeError("Expected " + ("nodes[" + _i + "]") + " to be a " + __name(Node) + ", got " + __typeof(nodes[_i]));
              }
            }
          }
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          _this.index = index;
          _this.scope = scope;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.nodes = nodes;
          _this.label = label;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _BlockNode_prototype = BlockNode.prototype = __create(_Node_prototype);
        _BlockNode_prototype.constructor = BlockNode;
        BlockNode.displayName = "BlockNode";
        if (typeof Node.extended === "function") {
          Node.extended(BlockNode);
        }
        BlockNode.cappedName = "Block";
        BlockNode.argNames = ["nodes", "label"];
        _BlockNode_prototype.type = function (o) {
          var nodes;
          nodes = this.nodes;
          if (nodes.length === 0) {
            return Type["undefined"];
          } else {
            return nodes[__num(nodes.length) - 1].type(o);
          }
        };
        _BlockNode_prototype.withLabel = function (label, o) {
          var _ref, _this;
          _this = this;
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          if (this.label == null) {
            if (this.nodes.length === 1) {
              return this.nodes[0].withLabel(label, o);
            } else if (__num(this.nodes.length) > 1 && (_ref = this.nodes)[__num(_ref.length) - 1] instanceof ForInNode && (function () {
              var _arr, _end, _every, _i, _len, node;
              _every = true;
              for (_arr = __toArray(_this.nodes), _i = 0, _len = _arr.length, _end = -1, _end += _len, _end > _len && (_end = _len); _i < _end; ++_i) {
                node = _arr[_i];
                if (!(node instanceof AssignNode) && !(node instanceof VarNode)) {
                  _every = false;
                  break;
                }
              }
              return _every;
            }())) {
              return BlockNode(this.index, this.scope, __slice.call(this.nodes, 0, -1).concat([(_ref = this.nodes)[__num(_ref.length) - 1].withLabel(label, o)]));
            }
          }
          return BlockNode(this.index, this.scope, this.nodes, label);
        };
        _BlockNode_prototype._reduce = function (o) {
          var _arr, body, changed, i, label, len, node, reduced;
          changed = false;
          body = [];
          for (_arr = __toArray(this.nodes), i = 0, len = _arr.length; i < len; ++i) {
            node = _arr[i];
            reduced = node.reduce(o);
            if (reduced instanceof BlockNode && reduced.label == null) {
              body.push.apply(body, __toArray(reduced.nodes));
              changed = true;
            } else if (reduced instanceof NothingNode) {
              changed = true;
            } else if (reduced instanceof BreakNode || reduced instanceof ContinueNode || reduced instanceof ThrowNode || reduced instanceof ReturnNode) {
              body.push(reduced);
              if (reduced !== node || i < len - 1) {
                changed = true;
              }
              break;
            } else {
              body.push(reduced);
              if (reduced !== node) {
                changed = true;
              }
            }
          }
          if (this.label != null) {
            label = this.label.reduce(o);
          } else {
            label = this.label;
          }
          if (body.length === 0) {
            return NothingNode(this.index, this.scope);
          } else if (label == null && body.length === 1) {
            return body[0];
          } else if (changed || label !== this.label) {
            return BlockNode(this.index, this.scope, body, label);
          } else {
            return this;
          }
        };
        _BlockNode_prototype.isStatement = function () {
          var _arr, _i, _some, node;
          _some = false;
          for (_arr = __toArray(this.nodes), _i = _arr.length; _i--; ) {
            node = _arr[_i];
            if (node.isStatement()) {
              _some = true;
              break;
            }
          }
          return _some;
        };
        _BlockNode_prototype._isNoop = function (o) {
          var _arr, _every, _i, _ref, node;
          if ((_ref = this.__isNoop) == null) {
            _every = true;
            for (_arr = __toArray(this.nodes), _i = _arr.length; _i--; ) {
              node = _arr[_i];
              if (!node.isNoop(o)) {
                _every = false;
                break;
              }
            }
            return this.__isNoop = _every;
          } else {
            return _ref;
          }
        };
        _BlockNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "BlockNode",
            this.index,
            this.nodes,
            this.label
          );
        };
        _BlockNode_prototype.walk = function (f) {
          var label, nodes;
          nodes = map(this.nodes, f);
          if (this.label instanceof Node) {
            label = f(this.label);
          } else {
            label = this.label;
          }
          if (nodes !== this.nodes || label !== this.label) {
            return BlockNode(this.index, this.scope, nodes, label);
          } else {
            return this;
          }
        };
        _BlockNode_prototype.walkAsync = function (f, callback) {
          var _once, _this;
          _this = this;
          return mapAsync(this.nodes, f, (_once = false, function (_e, nodes) {
            if (_once) {
              throw Error("Attempted to call function more than once");
            } else {
              _once = true;
            }
            if (_e != null) {
              return callback(_e);
            }
            return (_this.label instanceof Node
              ? function (next) {
                var _once2;
                return f(_this.label, (_once2 = false, function (_e2, label) {
                  if (_once2) {
                    throw Error("Attempted to call function more than once");
                  } else {
                    _once2 = true;
                  }
                  if (_e2 != null) {
                    return callback(_e2);
                  }
                  return next(label);
                }));
              }
              : function (next) {
                return next(_this.label);
              })(function (label) {
              return callback(null, nodes !== _this.nodes || label !== _this.label ? BlockNode(_this.index, _this.scope, nodes, label) : _this);
            });
          }));
        };
        return BlockNode;
      }(Node));
      Node.Break = BreakNode = (function (Node) {
        var _BreakNode_prototype, _Node_prototype;
        function BreakNode(index, scope, label) {
          var _this;
          _this = this instanceof BreakNode ? this : __create(_BreakNode_prototype);
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          _this.index = index;
          _this.scope = scope;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.label = label;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _BreakNode_prototype = BreakNode.prototype = __create(_Node_prototype);
        _BreakNode_prototype.constructor = BreakNode;
        BreakNode.displayName = "BreakNode";
        if (typeof Node.extended === "function") {
          Node.extended(BreakNode);
        }
        BreakNode.cappedName = "Break";
        BreakNode.argNames = ["label"];
        _BreakNode_prototype.type = function () {
          return Type["undefined"];
        };
        _BreakNode_prototype.isStatement = function () {
          return true;
        };
        _BreakNode_prototype.withLabel = function (label) {
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          return BreakNode(this.index, this.scope, label);
        };
        _BreakNode_prototype.inspect = function (depth) {
          return inspectHelper(depth, "BreakNode", this.index, this.label);
        };
        _BreakNode_prototype.walk = function (f) {
          var label;
          if (this.label instanceof Node) {
            label = f(this.label);
          } else {
            label = this.label;
          }
          if (label !== this.label) {
            return BreakNode(this.index, this.scope, label);
          } else {
            return this;
          }
        };
        _BreakNode_prototype.walkAsync = function (f, callback) {
          var _this;
          _this = this;
          return (this.label instanceof Node
            ? function (next) {
              var _once;
              return f(_this.label, (_once = false, function (_e, label) {
                if (_once) {
                  throw Error("Attempted to call function more than once");
                } else {
                  _once = true;
                }
                if (_e != null) {
                  return callback(_e);
                }
                return next(label);
              }));
            }
            : function (next) {
              return next(_this.label);
            })(function (label) {
            return callback(null, label !== _this.label ? BreakNode(_this.index, _this.scope, label) : _this);
          });
        };
        return BreakNode;
      }(Node));
      Node.Call = CallNode = (function (Node) {
        var _CallNode_prototype, _Node_prototype;
        function CallNode(index, scope, func, args, isNew, isApply) {
          var _i, _this;
          _this = this instanceof CallNode ? this : __create(_CallNode_prototype);
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          if (!(func instanceof Node)) {
            throw TypeError("Expected func to be a " + __name(Node) + ", got " + __typeof(func));
          }
          if (!__isArray(args)) {
            throw TypeError("Expected args to be an Array, got " + __typeof(args));
          } else {
            for (_i = args.length; _i--; ) {
              if (!(args[_i] instanceof Node)) {
                throw TypeError("Expected " + ("args[" + _i + "]") + " to be a " + __name(Node) + ", got " + __typeof(args[_i]));
              }
            }
          }
          if (isNew == null) {
            isNew = false;
          } else if (typeof isNew !== "boolean") {
            throw TypeError("Expected isNew to be a Boolean, got " + __typeof(isNew));
          }
          if (isApply == null) {
            isApply = false;
          } else if (typeof isApply !== "boolean") {
            throw TypeError("Expected isApply to be a Boolean, got " + __typeof(isApply));
          }
          _this.index = index;
          _this.scope = scope;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.func = func;
          _this.args = args;
          _this.isNew = isNew;
          _this.isApply = isApply;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _CallNode_prototype = CallNode.prototype = __create(_Node_prototype);
        _CallNode_prototype.constructor = CallNode;
        CallNode.displayName = "CallNode";
        if (typeof Node.extended === "function") {
          Node.extended(CallNode);
        }
        CallNode.cappedName = "Call";
        CallNode.argNames = ["func", "args", "isNew", "isApply"];
        _CallNode_prototype.type = (function () {
          var PRIMORDIAL_FUNCTIONS, PRIMORDIAL_METHODS, PRIMORDIAL_SUBFUNCTIONS;
          PRIMORDIAL_FUNCTIONS = {
            Object: Type.object,
            String: Type.string,
            Number: Type.number,
            Boolean: Type.boolean,
            Function: Type["function"],
            Array: Type.array,
            Date: Type.string,
            RegExp: Type.regexp,
            Error: Type.error,
            RangeError: Type.error,
            ReferenceError: Type.error,
            SyntaxError: Type.error,
            TypeError: Type.error,
            URIError: Type.error,
            escape: Type.string,
            unescape: Type.string,
            parseInt: Type.number,
            parseFloat: Type.number,
            isNaN: Type.boolean,
            isFinite: Type.boolean,
            decodeURI: Type.string,
            decodeURIComponent: Type.string,
            encodeURI: Type.string,
            encodeURIComponent: Type.string
          };
          PRIMORDIAL_SUBFUNCTIONS = {
            Object: {
              getPrototypeOf: Type.object,
              getOwnPropertyDescriptor: Type.object,
              getOwnPropertyNames: Type.string.array(),
              create: Type.object,
              defineProperty: Type.object,
              defineProperties: Type.object,
              seal: Type.object,
              freeze: Type.object,
              preventExtensions: Type.object,
              isSealed: Type.boolean,
              isFrozen: Type.boolean,
              isExtensible: Type.boolean,
              keys: Type.string.array()
            },
            String: { fromCharCode: Type.string },
            Number: { isFinite: Type.boolean, isNaN: Type.boolean },
            Array: { isArray: Type.boolean },
            Math: {
              abs: Type.number,
              acos: Type.number,
              asin: Type.number,
              atan: Type.number,
              atan2: Type.number,
              ceil: Type.number,
              cos: Type.number,
              exp: Type.number,
              floor: Type.number,
              log: Type.number,
              max: Type.number,
              min: Type.number,
              pow: Type.number,
              random: Type.number,
              round: Type.number,
              sin: Type.number,
              sqrt: Type.number,
              tan: Type.number
            },
            JSON: { stringify: Type.string.union(Type["undefined"]), parse: Type.string.union(Type.number).union(Type.boolean).union(Type["null"]).union(Type.array).union(Type.object) },
            Date: { UTC: Type.number, now: Type.number }
          };
          PRIMORDIAL_METHODS = {
            String: {
              toString: Type.string,
              valueOf: Type.string,
              charAt: Type.string,
              charCodeAt: Type.number,
              concat: Type.string,
              indexOf: Type.number,
              lastIndexOf: Type.number,
              localeCompare: Type.number,
              match: Type.array.union(Type["null"]),
              replace: Type.string,
              search: Type.number,
              slice: Type.string,
              split: Type.string.array(),
              substring: Type.string,
              toLowerCase: Type.string,
              toLocaleLowerCase: Type.string,
              toUpperCase: Type.string,
              toLocaleUpperCase: Type.string,
              trim: Type.string
            },
            Boolean: { toString: Type.string, valueOf: Type.boolean },
            Number: {
              toString: Type.string,
              valueOf: Type.number,
              toLocaleString: Type.string,
              toFixed: Type.string,
              toExponential: Type.string,
              toPrecision: Type.string
            },
            Date: {
              toString: Type.string,
              toDateString: Type.string,
              toTimeString: Type.string,
              toLocaleString: Type.string,
              toLocaleDateString: Type.string,
              toLocaleTimeString: Type.string,
              valueOf: Type.number,
              getTime: Type.number,
              getFullYear: Type.number,
              getUTCFullYear: Type.number,
              getMonth: Type.number,
              getUTCMonth: Type.number,
              getDate: Type.number,
              getUTCDate: Type.number,
              getDay: Type.number,
              getUTCDay: Type.number,
              getHours: Type.number,
              getUTCHours: Type.number,
              getMinutes: Type.number,
              getUTCMinutes: Type.number,
              getSeconds: Type.number,
              getUTCSeconds: Type.number,
              getMilliseconds: Type.number,
              getUTCMilliseconds: Type.number,
              getTimezoneOffset: Type.number,
              setTime: Type.number,
              setMilliseconds: Type.number,
              setUTCMilliseconds: Type.number,
              setSeconds: Type.number,
              setUTCSeconds: Type.number,
              setMinutes: Type.number,
              setUTCMinutes: Type.number,
              setHours: Type.number,
              setUTCHours: Type.number,
              setDate: Type.number,
              setUTCDate: Type.number,
              setMonth: Type.number,
              setUTCMonth: Type.number,
              setFullYear: Type.number,
              setUTCFullYear: Type.number,
              toUTCString: Type.string,
              toISOString: Type.string,
              toJSON: Type.string
            },
            RegExp: { exec: Type.array.union(Type["null"]), test: Type.boolean, toString: Type.string },
            Error: { toString: Type.string }
          };
          return function (o) {
            var _ref, _this;
            _this = this;
            if ((_ref = this._type) == null) {
              return this._type = (function () {
                var _ref, _ref2, _ref3, _ref4, child, func, funcType, name, parent,
                    parentType;
                func = _this.func;
                funcType = func.type(o);
                if (funcType.isSubsetOf(Type["function"])) {
                  return funcType.args[0];
                } else if (func instanceof IdentNode) {
                  name = func.name;
                  if (__owns.call(PRIMORDIAL_FUNCTIONS, name)) {
                    return PRIMORDIAL_FUNCTIONS[name];
                  } else if (o != null ? o.macros.hasHelper(name) : void 0) {
                    funcType = o.macros.helperType(name);
                    if (funcType.isSubsetOf(Type["function"])) {
                      return funcType.args[0];
                    }
                  }
                } else if (func instanceof AccessNode) {
                  parent = func.parent;
                  child = func.child;
                  if (child instanceof ConstNode) {
                    if ((_ref = child.value) === "call" || _ref === "apply") {
                      parentType = parent.type(o);
                      if (parentType.isSubsetOf(Type["function"])) {
                        return parentType.args[0];
                      }
                    } else if (parent instanceof IdentNode && __owns.call(PRIMORDIAL_SUBFUNCTIONS, _ref = parent.name) && __owns.call(_ref2 = PRIMORDIAL_SUBFUNCTIONS[_ref], _ref3 = child.value) && (_ref4 = _ref2[_ref3]) != null) {
                      return _ref4;
                    }
                  }
                }
                return Type.any;
              }());
            } else {
              return _ref;
            }
          };
        }());
        _CallNode_prototype._reduce = (function () {
          var PURE_PRIMORDIAL_FUNCTIONS, PURE_PRIMORDIAL_SUBFUNCTIONS;
          PURE_PRIMORDIAL_FUNCTIONS = {
            escape: true,
            unescape: true,
            parseInt: true,
            parseFloat: true,
            isNaN: true,
            isFinite: true,
            decodeURI: true,
            decodeURIComponent: true,
            encodeURI: true,
            encodeURIComponent: true,
            String: true,
            Boolean: true,
            Number: true,
            RegExp: true
          };
          PURE_PRIMORDIAL_SUBFUNCTIONS = {
            String: { fromCharCode: true },
            Number: { isFinite: true, isNaN: true },
            Math: {
              abs: true,
              acos: true,
              asin: true,
              atan: true,
              atan2: true,
              ceil: true,
              cos: true,
              exp: true,
              floor: true,
              log: true,
              max: true,
              min: true,
              pow: true,
              round: true,
              sin: true,
              sqrt: true,
              tan: true
            },
            JSON: { parse: true, stringify: true }
          };
          return function (o) {
            var _arr, _i, _len, _ref, _ref2, _ref3, allConst, arg, args, child,
                constArgs, cValue, func, parent, pValue, value;
            func = this.func.reduce(o).doWrap(o);
            args = map(this.args, function (node) {
              return node.reduce(o).doWrap(o);
            });
            if (!this.isNew && !this.isApply) {
              constArgs = [];
              allConst = true;
              for (_arr = __toArray(args), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                arg = _arr[_i];
                if (arg.isConst()) {
                  constArgs.push(arg.constValue());
                } else {
                  allConst = false;
                  break;
                }
              }
              if (allConst) {
                if (func instanceof IdentNode) {
                  if (__owns.call(PURE_PRIMORDIAL_FUNCTIONS, func.name)) {
                    try {
                      value = GLOBAL[func.name].apply(void 0, __toArray(constArgs));
                      return ConstNode(this.index, this.scope, value);
                    } catch (e) {}
                  }
                } else if (func instanceof AccessNode && func.child.isConst()) {
                  parent = func.parent;
                  child = func.child;
                  cValue = child.constValue();
                  if (parent.isConst()) {
                    pValue = parent.constValue();
                    if (typeof pValue[cValue] === "function") {
                      try {
                        value = pValue[cValue].apply(pValue, __toArray(constArgs));
                        return ConstNode(this.index, this.scope, value);
                      } catch (e) {}
                    }
                  } else if (parent instanceof IdentNode && (__owns.call(PURE_PRIMORDIAL_SUBFUNCTIONS, _ref = parent.name) && __owns.call(_ref2 = PURE_PRIMORDIAL_SUBFUNCTIONS[_ref], _ref3 = child.value) ? _ref2[_ref3] : void 0)) {
                    try {
                      value = (_ref = GLOBAL[parent.name])[cValue].apply(_ref, __toArray(constArgs));
                      return ConstNode(this.index, this.scope, value);
                    } catch (e) {}
                  }
                }
              }
            }
            if (func !== this.func || args !== this.args) {
              return CallNode(
                this.index,
                this.scope,
                func,
                args,
                this.isNew,
                this.isApply
              );
            } else {
              return this;
            }
          };
        }());
        _CallNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "CallNode",
            this.index,
            this.func,
            this.args,
            this.isNew,
            this.isApply
          );
        };
        _CallNode_prototype.walk = function (f) {
          var args, func;
          func = f(this.func);
          args = map(this.args, f);
          if (func !== this.func || args !== this.args) {
            return CallNode(
              this.index,
              this.scope,
              func,
              args,
              this.isNew,
              this.isApply
            );
          } else {
            return this;
          }
        };
        _CallNode_prototype.walkAsync = function (f, callback) {
          var _once, _this;
          _this = this;
          return f(this.func, (_once = false, function (_e, func) {
            var _once2;
            if (_once) {
              throw Error("Attempted to call function more than once");
            } else {
              _once = true;
            }
            if (_e != null) {
              return callback(_e);
            }
            return mapAsync(_this.args, f, (_once2 = false, function (_e2, args) {
              if (_once2) {
                throw Error("Attempted to call function more than once");
              } else {
                _once2 = true;
              }
              if (_e2 != null) {
                return callback(_e2);
              }
              return callback(null, func !== _this.func || args !== _this.args
                ? CallNode(
                  _this.index,
                  _this.scope,
                  func,
                  args,
                  _this.isNew,
                  _this.isApply
                )
                : _this);
            }));
          }));
        };
        return CallNode;
      }(Node));
      Node.Cascade = CascadeNode = (function (Node) {
        var _CascadeNode_prototype, _Node_prototype;
        function CascadeNode(index, scope, node, cascades) {
          var _this;
          _this = this instanceof CascadeNode ? this : __create(_CascadeNode_prototype);
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          if (!(node instanceof Node)) {
            throw TypeError("Expected node to be a " + __name(Node) + ", got " + __typeof(node));
          }
          if (!__isArray(cascades)) {
            throw TypeError("Expected cascades to be an Array, got " + __typeof(cascades));
          }
          _this.index = index;
          _this.scope = scope;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.node = node;
          _this.cascades = cascades;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _CascadeNode_prototype = CascadeNode.prototype = __create(_Node_prototype);
        _CascadeNode_prototype.constructor = CascadeNode;
        CascadeNode.displayName = "CascadeNode";
        if (typeof Node.extended === "function") {
          Node.extended(CascadeNode);
        }
        CascadeNode.cappedName = "Cascade";
        CascadeNode.argNames = ["node", "cascades"];
        _CascadeNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "CascadeNode",
            this.index,
            this.node,
            this.cascades
          );
        };
        _CascadeNode_prototype.walk = function (f) {
          var node;
          node = f(this.node);
          if (node !== this.node) {
            return CascadeNode(this.index, this.scope, node, this.cascades);
          } else {
            return this;
          }
        };
        _CascadeNode_prototype.walkAsync = function (f, callback) {
          var _once, _this;
          _this = this;
          return f(this.node, (_once = false, function (_e, node) {
            if (_once) {
              throw Error("Attempted to call function more than once");
            } else {
              _once = true;
            }
            if (_e != null) {
              return callback(_e);
            }
            return callback(null, node !== _this.node ? CascadeNode(_this.index, _this.scope, node, _this.cascades) : _this);
          }));
        };
        return CascadeNode;
      }(Node));
      Node.Comment = CommentNode = (function (Node) {
        var _CommentNode_prototype, _Node_prototype;
        function CommentNode(index, scope, text) {
          var _this;
          _this = this instanceof CommentNode ? this : __create(_CommentNode_prototype);
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          if (typeof text !== "string") {
            throw TypeError("Expected text to be a String, got " + __typeof(text));
          }
          _this.index = index;
          _this.scope = scope;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.text = text;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _CommentNode_prototype = CommentNode.prototype = __create(_Node_prototype);
        _CommentNode_prototype.constructor = CommentNode;
        CommentNode.displayName = "CommentNode";
        if (typeof Node.extended === "function") {
          Node.extended(CommentNode);
        }
        CommentNode.cappedName = "Comment";
        CommentNode.argNames = ["text"];
        _CommentNode_prototype.type = function () {
          return Type["undefined"];
        };
        _CommentNode_prototype.cacheable = false;
        _CommentNode_prototype.isConst = function () {
          return true;
        };
        _CommentNode_prototype.constValue = function () {
          return;
        };
        _CommentNode_prototype._isNoop = function () {
          return true;
        };
        _CommentNode_prototype.inspect = function (depth) {
          return inspectHelper(depth, "CommentNode", this.index, this.text);
        };
        _CommentNode_prototype.walk = function (f) {
          return this;
        };
        _CommentNode_prototype.walkAsync = function (f, callback) {
          return callback(null, this);
        };
        return CommentNode;
      }(Node));
      Node.Const = ConstNode = (function (Node) {
        var _ConstNode_prototype, _Node_prototype;
        function ConstNode(index, scope, value) {
          var _this;
          _this = this instanceof ConstNode ? this : __create(_ConstNode_prototype);
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          if (value != null && typeof value !== "number" && typeof value !== "string" && typeof value !== "boolean") {
            throw TypeError("Expected value to be one of Number or String or Boolean or undefined or null, got " + __typeof(value));
          }
          _this.index = index;
          _this.scope = scope;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.value = value;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _ConstNode_prototype = ConstNode.prototype = __create(_Node_prototype);
        _ConstNode_prototype.constructor = ConstNode;
        ConstNode.displayName = "ConstNode";
        if (typeof Node.extended === "function") {
          Node.extended(ConstNode);
        }
        ConstNode.cappedName = "Const";
        ConstNode.argNames = ["value"];
        _ConstNode_prototype.type = function () {
          var value;
          value = this.value;
          if (value === null) {
            return Type["null"];
          } else {
            switch (typeof value) {
            case "number": return Type.number;
            case "string": return Type.string;
            case "boolean": return Type.boolean;
            case "undefined": return Type["undefined"];
            default: throw Error("Unknown type for " + String(value));
            }
          }
        };
        _ConstNode_prototype.cacheable = false;
        _ConstNode_prototype.isConst = function () {
          return true;
        };
        _ConstNode_prototype.constValue = function () {
          return this.value;
        };
        _ConstNode_prototype.isConstType = function (type) {
          return type === typeof this.value;
        };
        _ConstNode_prototype.isConstValue = function (value) {
          return value === this.value;
        };
        _ConstNode_prototype._isNoop = function () {
          return true;
        };
        _ConstNode_prototype.inspect = function (depth) {
          return "ConstNode(" + __strnum(inspect(this.value, null, depth != null ? __num(depth) - 1 : null)) + ")";
        };
        _ConstNode_prototype.walk = function (f) {
          return this;
        };
        _ConstNode_prototype.walkAsync = function (f, callback) {
          return callback(null, this);
        };
        return ConstNode;
      }(Node));
      Node.Continue = ContinueNode = (function (Node) {
        var _ContinueNode_prototype, _Node_prototype;
        function ContinueNode(index, scope, label) {
          var _this;
          _this = this instanceof ContinueNode ? this : __create(_ContinueNode_prototype);
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          _this.index = index;
          _this.scope = scope;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.label = label;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _ContinueNode_prototype = ContinueNode.prototype = __create(_Node_prototype);
        _ContinueNode_prototype.constructor = ContinueNode;
        ContinueNode.displayName = "ContinueNode";
        if (typeof Node.extended === "function") {
          Node.extended(ContinueNode);
        }
        ContinueNode.cappedName = "Continue";
        ContinueNode.argNames = ["label"];
        _ContinueNode_prototype.type = function () {
          return Type["undefined"];
        };
        _ContinueNode_prototype.isStatement = function () {
          return true;
        };
        _ContinueNode_prototype.withLabel = function (label) {
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          return ContinueNode(this.index, this.scope, label);
        };
        _ContinueNode_prototype.inspect = function (depth) {
          return inspectHelper(depth, "ContinueNode", this.index, this.label);
        };
        _ContinueNode_prototype.walk = function (f) {
          var label;
          if (this.label instanceof Node) {
            label = f(this.label);
          } else {
            label = this.label;
          }
          if (label !== this.label) {
            return ContinueNode(this.index, this.scope, label);
          } else {
            return this;
          }
        };
        _ContinueNode_prototype.walkAsync = function (f, callback) {
          var _this;
          _this = this;
          return (this.label instanceof Node
            ? function (next) {
              var _once;
              return f(_this.label, (_once = false, function (_e, label) {
                if (_once) {
                  throw Error("Attempted to call function more than once");
                } else {
                  _once = true;
                }
                if (_e != null) {
                  return callback(_e);
                }
                return next(label);
              }));
            }
            : function (next) {
              return next(_this.label);
            })(function (label) {
            return callback(null, label !== _this.label ? ContinueNode(_this.index, _this.scope, label) : _this);
          });
        };
        return ContinueNode;
      }(Node));
      Node.Debugger = DebuggerNode = (function (Node) {
        var _DebuggerNode_prototype, _Node_prototype;
        function DebuggerNode(index, scope) {
          var _this;
          _this = this instanceof DebuggerNode ? this : __create(_DebuggerNode_prototype);
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          _this.index = index;
          _this.scope = scope;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _DebuggerNode_prototype = DebuggerNode.prototype = __create(_Node_prototype);
        _DebuggerNode_prototype.constructor = DebuggerNode;
        DebuggerNode.displayName = "DebuggerNode";
        if (typeof Node.extended === "function") {
          Node.extended(DebuggerNode);
        }
        DebuggerNode.cappedName = "Debugger";
        DebuggerNode.argNames = [];
        _DebuggerNode_prototype.type = function () {
          return Type["undefined"];
        };
        _DebuggerNode_prototype.isStatement = function () {
          return true;
        };
        _DebuggerNode_prototype.inspect = function (depth) {
          return inspectHelper(depth, "DebuggerNode", this.index);
        };
        return DebuggerNode;
      }(Node));
      Node.Def = DefNode = (function (Node) {
        var _DefNode_prototype, _Node_prototype;
        function DefNode(index, scope, left, right) {
          var _this;
          _this = this instanceof DefNode ? this : __create(_DefNode_prototype);
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          if (!(left instanceof Node)) {
            throw TypeError("Expected left to be a " + __name(Node) + ", got " + __typeof(left));
          }
          if (right == null) {
            right = void 0;
          } else if (!(right instanceof Node)) {
            throw TypeError("Expected right to be one of " + (__name(Node) + " or undefined") + ", got " + __typeof(right));
          }
          _this.index = index;
          _this.scope = scope;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.left = left;
          _this.right = right;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _DefNode_prototype = DefNode.prototype = __create(_Node_prototype);
        _DefNode_prototype.constructor = DefNode;
        DefNode.displayName = "DefNode";
        if (typeof Node.extended === "function") {
          Node.extended(DefNode);
        }
        DefNode.cappedName = "Def";
        DefNode.argNames = ["left", "right"];
        _DefNode_prototype.type = function (o) {
          if (this.right != null) {
            return this.right.type(o);
          } else {
            return Type.any;
          }
        };
        _DefNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "DefNode",
            this.index,
            this.left,
            this.right
          );
        };
        _DefNode_prototype.walk = function (f) {
          var left, right;
          left = f(this.left);
          if (this.right instanceof Node) {
            right = f(this.right);
          } else {
            right = this.right;
          }
          if (left !== this.left || right !== this.right) {
            return DefNode(this.index, this.scope, left, right);
          } else {
            return this;
          }
        };
        _DefNode_prototype.walkAsync = function (f, callback) {
          var _once, _this;
          _this = this;
          return f(this.left, (_once = false, function (_e, left) {
            if (_once) {
              throw Error("Attempted to call function more than once");
            } else {
              _once = true;
            }
            if (_e != null) {
              return callback(_e);
            }
            return (_this.right instanceof Node
              ? function (next) {
                var _once2;
                return f(_this.right, (_once2 = false, function (_e2, right) {
                  if (_once2) {
                    throw Error("Attempted to call function more than once");
                  } else {
                    _once2 = true;
                  }
                  if (_e2 != null) {
                    return callback(_e2);
                  }
                  return next(right);
                }));
              }
              : function (next) {
                return next(_this.right);
              })(function (right) {
              return callback(null, left !== _this.left || right !== _this.right ? DefNode(_this.index, _this.scope, left, right) : _this);
            });
          }));
        };
        return DefNode;
      }(Node));
      Node.EmbedWrite = EmbedWriteNode = (function (Node) {
        var _EmbedWriteNode_prototype, _Node_prototype;
        function EmbedWriteNode(index, scope, text, escape) {
          var _this;
          _this = this instanceof EmbedWriteNode ? this : __create(_EmbedWriteNode_prototype);
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          if (!(text instanceof Node)) {
            throw TypeError("Expected text to be a " + __name(Node) + ", got " + __typeof(text));
          }
          if (escape == null) {
            escape = false;
          } else if (typeof escape !== "boolean") {
            throw TypeError("Expected escape to be a Boolean, got " + __typeof(escape));
          }
          _this.index = index;
          _this.scope = scope;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.text = text;
          _this.escape = escape;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _EmbedWriteNode_prototype = EmbedWriteNode.prototype = __create(_Node_prototype);
        _EmbedWriteNode_prototype.constructor = EmbedWriteNode;
        EmbedWriteNode.displayName = "EmbedWriteNode";
        if (typeof Node.extended === "function") {
          Node.extended(EmbedWriteNode);
        }
        EmbedWriteNode.cappedName = "EmbedWrite";
        EmbedWriteNode.argNames = ["text", "escape"];
        _EmbedWriteNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "EmbedWriteNode",
            this.index,
            this.text,
            this.escape
          );
        };
        _EmbedWriteNode_prototype.walk = function (f) {
          var text;
          text = f(this.text);
          if (text !== this.text) {
            return EmbedWriteNode(this.index, this.scope, text, this.escape);
          } else {
            return this;
          }
        };
        _EmbedWriteNode_prototype.walkAsync = function (f, callback) {
          var _once, _this;
          _this = this;
          return f(this.text, (_once = false, function (_e, text) {
            if (_once) {
              throw Error("Attempted to call function more than once");
            } else {
              _once = true;
            }
            if (_e != null) {
              return callback(_e);
            }
            return callback(null, text !== _this.text ? EmbedWriteNode(_this.index, _this.scope, text, _this.escape) : _this);
          }));
        };
        return EmbedWriteNode;
      }(Node));
      Node.Eval = EvalNode = (function (Node) {
        var _EvalNode_prototype, _Node_prototype, simplifiers;
        function EvalNode(index, scope, code) {
          var _this;
          _this = this instanceof EvalNode ? this : __create(_EvalNode_prototype);
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          if (!(code instanceof Node)) {
            throw TypeError("Expected code to be a " + __name(Node) + ", got " + __typeof(code));
          }
          _this.index = index;
          _this.scope = scope;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.code = code;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _EvalNode_prototype = EvalNode.prototype = __create(_Node_prototype);
        _EvalNode_prototype.constructor = EvalNode;
        EvalNode.displayName = "EvalNode";
        if (typeof Node.extended === "function") {
          Node.extended(EvalNode);
        }
        EvalNode.cappedName = "Eval";
        EvalNode.argNames = ["code"];
        simplifiers = {
          "true": function () {
            return ConstNode(this.index, this.scope, true);
          },
          "false": function () {
            return ConstNode(this.index, this.scope, false);
          },
          "void 0": function () {
            return ConstNode(this.index, this.scope, void 0);
          },
          "null": function () {
            return ConstNode(this.index, this.scope, null);
          }
        };
        _EvalNode_prototype._reduce = function (o) {
          var _ref, code, simplifier;
          code = this.code.reduce(o).doWrap();
          if (code.isConst() && code.isConstType("string")) {
            if (__owns.call(simplifiers, _ref = code.constValue())) {
              simplifier = simplifiers[_ref];
            }
            if (simplifier) {
              return simplifier.call(this);
            }
          }
          if (code !== this.code) {
            return EvalNode(this.index, this.scope, code);
          } else {
            return this;
          }
        };
        _EvalNode_prototype.inspect = function (depth) {
          return inspectHelper(depth, "EvalNode", this.index, this.code);
        };
        _EvalNode_prototype.walk = function (f) {
          var code;
          code = f(this.code);
          if (code !== this.code) {
            return EvalNode(this.index, this.scope, code);
          } else {
            return this;
          }
        };
        _EvalNode_prototype.walkAsync = function (f, callback) {
          var _once, _this;
          _this = this;
          return f(this.code, (_once = false, function (_e, code) {
            if (_once) {
              throw Error("Attempted to call function more than once");
            } else {
              _once = true;
            }
            if (_e != null) {
              return callback(_e);
            }
            return callback(null, code !== _this.code ? EvalNode(_this.index, _this.scope, code) : _this);
          }));
        };
        return EvalNode;
      }(Node));
      Node.For = ForNode = (function (Node) {
        var _ForNode_prototype, _Node_prototype;
        function ForNode(index, scope, init, test, step, body, label) {
          var _this;
          _this = this instanceof ForNode ? this : __create(_ForNode_prototype);
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          if (init == null) {
            init = NothingNode(0, scope);
          } else if (!(init instanceof Node)) {
            throw TypeError("Expected init to be a " + __name(Node) + ", got " + __typeof(init));
          }
          if (test == null) {
            test = ConstNode(0, scope, true);
          } else if (!(test instanceof Node)) {
            throw TypeError("Expected test to be a " + __name(Node) + ", got " + __typeof(test));
          }
          if (step == null) {
            step = NothingNode(0, scope);
          } else if (!(step instanceof Node)) {
            throw TypeError("Expected step to be a " + __name(Node) + ", got " + __typeof(step));
          }
          if (!(body instanceof Node)) {
            throw TypeError("Expected body to be a " + __name(Node) + ", got " + __typeof(body));
          }
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          _this.index = index;
          _this.scope = scope;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.init = init;
          _this.test = test;
          _this.step = step;
          _this.body = body;
          _this.label = label;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _ForNode_prototype = ForNode.prototype = __create(_Node_prototype);
        _ForNode_prototype.constructor = ForNode;
        ForNode.displayName = "ForNode";
        if (typeof Node.extended === "function") {
          Node.extended(ForNode);
        }
        ForNode.cappedName = "For";
        ForNode.argNames = [
          "init",
          "test",
          "step",
          "body",
          "label"
        ];
        _ForNode_prototype.type = function () {
          return Type["undefined"];
        };
        _ForNode_prototype.isStatement = function () {
          return true;
        };
        _ForNode_prototype.withLabel = function (label) {
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          return ForNode(
            this.index,
            this.scope,
            this.init,
            this.test,
            this.step,
            this.body,
            label
          );
        };
        _ForNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "ForNode",
            this.index,
            this.init,
            this.test,
            this.step,
            this.body,
            this.label
          );
        };
        _ForNode_prototype.walk = function (f) {
          var body, init, label, step, test;
          init = f(this.init);
          test = f(this.test);
          step = f(this.step);
          body = f(this.body);
          if (this.label instanceof Node) {
            label = f(this.label);
          } else {
            label = this.label;
          }
          if (init !== this.init || test !== this.test || step !== this.step || body !== this.body || label !== this.label) {
            return ForNode(
              this.index,
              this.scope,
              init,
              test,
              step,
              body,
              label
            );
          } else {
            return this;
          }
        };
        _ForNode_prototype.walkAsync = function (f, callback) {
          var _once, _this;
          _this = this;
          return f(this.init, (_once = false, function (_e, init) {
            var _once2;
            if (_once) {
              throw Error("Attempted to call function more than once");
            } else {
              _once = true;
            }
            if (_e != null) {
              return callback(_e);
            }
            return f(_this.test, (_once2 = false, function (_e2, test) {
              var _once3;
              if (_once2) {
                throw Error("Attempted to call function more than once");
              } else {
                _once2 = true;
              }
              if (_e2 != null) {
                return callback(_e2);
              }
              return f(_this.step, (_once3 = false, function (_e3, step) {
                var _once4;
                if (_once3) {
                  throw Error("Attempted to call function more than once");
                } else {
                  _once3 = true;
                }
                if (_e3 != null) {
                  return callback(_e3);
                }
                return f(_this.body, (_once4 = false, function (_e4, body) {
                  if (_once4) {
                    throw Error("Attempted to call function more than once");
                  } else {
                    _once4 = true;
                  }
                  if (_e4 != null) {
                    return callback(_e4);
                  }
                  return (_this.label instanceof Node
                    ? function (next) {
                      var _once5;
                      return f(_this.label, (_once5 = false, function (_e5, label) {
                        if (_once5) {
                          throw Error("Attempted to call function more than once");
                        } else {
                          _once5 = true;
                        }
                        if (_e5 != null) {
                          return callback(_e5);
                        }
                        return next(label);
                      }));
                    }
                    : function (next) {
                      return next(_this.label);
                    })(function (label) {
                    return callback(null, init !== _this.init || test !== _this.test || step !== _this.step || body !== _this.body || label !== _this.label
                      ? ForNode(
                        _this.index,
                        _this.scope,
                        init,
                        test,
                        step,
                        body,
                        label
                      )
                      : _this);
                  });
                }));
              }));
            }));
          }));
        };
        return ForNode;
      }(Node));
      Node.ForIn = ForInNode = (function (Node) {
        var _ForInNode_prototype, _Node_prototype;
        function ForInNode(index, scope, key, object, body, label) {
          var _this;
          _this = this instanceof ForInNode ? this : __create(_ForInNode_prototype);
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          if (!(key instanceof Node)) {
            throw TypeError("Expected key to be a " + __name(Node) + ", got " + __typeof(key));
          }
          if (!(object instanceof Node)) {
            throw TypeError("Expected object to be a " + __name(Node) + ", got " + __typeof(object));
          }
          if (!(body instanceof Node)) {
            throw TypeError("Expected body to be a " + __name(Node) + ", got " + __typeof(body));
          }
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          _this.index = index;
          _this.scope = scope;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.key = key;
          _this.object = object;
          _this.body = body;
          _this.label = label;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _ForInNode_prototype = ForInNode.prototype = __create(_Node_prototype);
        _ForInNode_prototype.constructor = ForInNode;
        ForInNode.displayName = "ForInNode";
        if (typeof Node.extended === "function") {
          Node.extended(ForInNode);
        }
        ForInNode.cappedName = "ForIn";
        ForInNode.argNames = ["key", "object", "body", "label"];
        _ForInNode_prototype.type = function () {
          return Type["undefined"];
        };
        _ForInNode_prototype.isStatement = function () {
          return true;
        };
        _ForInNode_prototype.withLabel = function (label) {
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          return ForInNode(
            this.index,
            this.scope,
            this.key,
            this.object,
            this.body,
            label
          );
        };
        _ForInNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "ForInNode",
            this.index,
            this.key,
            this.object,
            this.body,
            this.label
          );
        };
        _ForInNode_prototype.walk = function (f) {
          var body, key, label, object;
          key = f(this.key);
          object = f(this.object);
          body = f(this.body);
          if (this.label instanceof Node) {
            label = f(this.label);
          } else {
            label = this.label;
          }
          if (key !== this.key || object !== this.object || body !== this.body || label !== this.label) {
            return ForInNode(
              this.index,
              this.scope,
              key,
              object,
              body,
              label
            );
          } else {
            return this;
          }
        };
        _ForInNode_prototype.walkAsync = function (f, callback) {
          var _once, _this;
          _this = this;
          return f(this.key, (_once = false, function (_e, key) {
            var _once2;
            if (_once) {
              throw Error("Attempted to call function more than once");
            } else {
              _once = true;
            }
            if (_e != null) {
              return callback(_e);
            }
            return f(_this.object, (_once2 = false, function (_e2, object) {
              var _once3;
              if (_once2) {
                throw Error("Attempted to call function more than once");
              } else {
                _once2 = true;
              }
              if (_e2 != null) {
                return callback(_e2);
              }
              return f(_this.body, (_once3 = false, function (_e3, body) {
                if (_once3) {
                  throw Error("Attempted to call function more than once");
                } else {
                  _once3 = true;
                }
                if (_e3 != null) {
                  return callback(_e3);
                }
                return (_this.label instanceof Node
                  ? function (next) {
                    var _once4;
                    return f(_this.label, (_once4 = false, function (_e4, label) {
                      if (_once4) {
                        throw Error("Attempted to call function more than once");
                      } else {
                        _once4 = true;
                      }
                      if (_e4 != null) {
                        return callback(_e4);
                      }
                      return next(label);
                    }));
                  }
                  : function (next) {
                    return next(_this.label);
                  })(function (label) {
                  return callback(null, key !== _this.key || object !== _this.object || body !== _this.body || label !== _this.label
                    ? ForInNode(
                      _this.index,
                      _this.scope,
                      key,
                      object,
                      body,
                      label
                    )
                    : _this);
                });
              }));
            }));
          }));
        };
        return ForInNode;
      }(Node));
      Node.Function = FunctionNode = (function (Node) {
        var _FunctionNode_prototype, _Node_prototype;
        function FunctionNode(index, scope, params, body, autoReturn, bound, curry, asType, generator, generic) {
          var _i, _i2, _this;
          _this = this instanceof FunctionNode ? this : __create(_FunctionNode_prototype);
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          if (!__isArray(params)) {
            throw TypeError("Expected params to be an Array, got " + __typeof(params));
          } else {
            for (_i = params.length; _i--; ) {
              if (!(params[_i] instanceof Node)) {
                throw TypeError("Expected " + ("params[" + _i + "]") + " to be a " + __name(Node) + ", got " + __typeof(params[_i]));
              }
            }
          }
          if (!(body instanceof Node)) {
            throw TypeError("Expected body to be a " + __name(Node) + ", got " + __typeof(body));
          }
          if (autoReturn == null) {
            autoReturn = true;
          } else if (typeof autoReturn !== "boolean") {
            throw TypeError("Expected autoReturn to be a Boolean, got " + __typeof(autoReturn));
          }
          if (bound == null) {
            bound = false;
          } else if (!(bound instanceof Node) && typeof bound !== "boolean") {
            throw TypeError("Expected bound to be one of " + (__name(Node) + " or Boolean") + ", got " + __typeof(bound));
          }
          if (curry == null) {
            curry = false;
          } else if (typeof curry !== "boolean") {
            throw TypeError("Expected curry to be a Boolean, got " + __typeof(curry));
          }
          if (asType == null) {
            asType = void 0;
          } else if (!(asType instanceof Node)) {
            throw TypeError("Expected asType to be one of " + (__name(Node) + " or undefined") + ", got " + __typeof(asType));
          }
          if (generator == null) {
            generator = false;
          } else if (typeof generator !== "boolean") {
            throw TypeError("Expected generator to be a Boolean, got " + __typeof(generator));
          }
          if (generic == null) {
            generic = [];
          } else if (!__isArray(generic)) {
            throw TypeError("Expected generic to be an Array, got " + __typeof(generic));
          } else {
            for (_i2 = generic.length; _i2--; ) {
              if (!(generic[_i2] instanceof IdentNode)) {
                throw TypeError("Expected " + ("generic[" + _i2 + "]") + " to be a " + __name(IdentNode) + ", got " + __typeof(generic[_i2]));
              }
            }
          }
          _this.index = index;
          _this.scope = scope;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.params = params;
          _this.body = body;
          _this.autoReturn = autoReturn;
          _this.bound = bound;
          _this.curry = curry;
          _this.asType = asType;
          _this.generator = generator;
          _this.generic = generic;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _FunctionNode_prototype = FunctionNode.prototype = __create(_Node_prototype);
        _FunctionNode_prototype.constructor = FunctionNode;
        FunctionNode.displayName = "FunctionNode";
        if (typeof Node.extended === "function") {
          Node.extended(FunctionNode);
        }
        FunctionNode.cappedName = "Function";
        FunctionNode.argNames = [
          "params",
          "body",
          "autoReturn",
          "bound",
          "curry",
          "asType",
          "generator",
          "generic"
        ];
        _FunctionNode_prototype.type = function (o) {
          var _ref, returnType, walker;
          if ((_ref = this._type) == null) {
            if (this.asType != null) {
              return this._type = nodeToType(this.asType)["function"]();
            } else {
              if (this.autoReturn) {
                returnType = this.body.type(o);
              } else {
                returnType = Type["undefined"];
              }
              walker = function (node) {
                var _ref;
                if (node instanceof ReturnNode) {
                  returnType = returnType.union(node.type(o));
                  return node;
                } else if (node instanceof FunctionNode) {
                  return node;
                } else if (node instanceof MacroAccessNode) {
                  if ((_ref = node.data.macroName) === "return" || _ref === "return?") {
                    if (node.data.macroData.node) {
                      returnType = returnType.union(node.data.macroData.node.type(o));
                    } else {
                      returnType = returnType.union(Type["undefined"]);
                    }
                  }
                  return node.walk(walker);
                } else {
                  return node.walk(walker);
                }
              };
              walker(this.body);
              return this._type = returnType["function"]();
            }
          } else {
            return _ref;
          }
        };
        _FunctionNode_prototype._isNoop = function (o) {
          return true;
        };
        _FunctionNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "FunctionNode",
            this.index,
            this.params,
            this.body,
            this.autoReturn,
            this.bound,
            this.curry,
            this.asType,
            this.generator,
            this.generic
          );
        };
        _FunctionNode_prototype.walk = function (f) {
          var asType, body, bound, params;
          params = map(this.params, f);
          body = f(this.body);
          if (this.bound instanceof Node) {
            bound = f(this.bound);
          } else {
            bound = this.bound;
          }
          if (this.asType instanceof Node) {
            asType = f(this.asType);
          } else {
            asType = this.asType;
          }
          if (params !== this.params || body !== this.body || bound !== this.bound || asType !== this.asType) {
            return FunctionNode(
              this.index,
              this.scope,
              params,
              body,
              this.autoReturn,
              bound,
              this.curry,
              asType,
              this.generator,
              this.generic
            );
          } else {
            return this;
          }
        };
        _FunctionNode_prototype.walkAsync = function (f, callback) {
          var _once, _this;
          _this = this;
          return mapAsync(this.params, f, (_once = false, function (_e, params) {
            var _once2;
            if (_once) {
              throw Error("Attempted to call function more than once");
            } else {
              _once = true;
            }
            if (_e != null) {
              return callback(_e);
            }
            return f(_this.body, (_once2 = false, function (_e2, body) {
              if (_once2) {
                throw Error("Attempted to call function more than once");
              } else {
                _once2 = true;
              }
              if (_e2 != null) {
                return callback(_e2);
              }
              return (_this.bound instanceof Node
                ? function (next) {
                  var _once3;
                  return f(_this.bound, (_once3 = false, function (_e3, bound) {
                    if (_once3) {
                      throw Error("Attempted to call function more than once");
                    } else {
                      _once3 = true;
                    }
                    if (_e3 != null) {
                      return callback(_e3);
                    }
                    return next(bound);
                  }));
                }
                : function (next) {
                  return next(_this.bound);
                })(function (bound) {
                return (_this.asType instanceof Node
                  ? function (next) {
                    var _once3;
                    return f(_this.asType, (_once3 = false, function (_e3, asType) {
                      if (_once3) {
                        throw Error("Attempted to call function more than once");
                      } else {
                        _once3 = true;
                      }
                      if (_e3 != null) {
                        return callback(_e3);
                      }
                      return next(asType);
                    }));
                  }
                  : function (next) {
                    return next(_this.asType);
                  })(function (asType) {
                  return callback(null, params !== _this.params || body !== _this.body || bound !== _this.bound || asType !== _this.asType
                    ? FunctionNode(
                      _this.index,
                      _this.scope,
                      params,
                      body,
                      _this.autoReturn,
                      bound,
                      _this.curry,
                      asType,
                      _this.generator,
                      _this.generic
                    )
                    : _this);
                });
              });
            }));
          }));
        };
        return FunctionNode;
      }(Node));
      Node.Ident = IdentNode = (function (Node) {
        var _IdentNode_prototype, _Node_prototype;
        function IdentNode(index, scope, name) {
          var _this;
          _this = this instanceof IdentNode ? this : __create(_IdentNode_prototype);
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          if (typeof name !== "string") {
            throw TypeError("Expected name to be a String, got " + __typeof(name));
          }
          _this.index = index;
          _this.scope = scope;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.name = name;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _IdentNode_prototype = IdentNode.prototype = __create(_Node_prototype);
        _IdentNode_prototype.constructor = IdentNode;
        IdentNode.displayName = "IdentNode";
        if (typeof Node.extended === "function") {
          Node.extended(IdentNode);
        }
        IdentNode.cappedName = "Ident";
        IdentNode.argNames = ["name"];
        _IdentNode_prototype.cacheable = false;
        _IdentNode_prototype.type = function (o) {
          if (this.name === "__currentArrayLength") {
            return Type.number;
          } else if (o) {
            return this.scope.type(this);
          } else {
            return Type.any;
          }
        };
        _IdentNode_prototype._isNoop = function (o) {
          return true;
        };
        _IdentNode_prototype.isPrimordial = function () {
          return isPrimordial(this.name);
        };
        _IdentNode_prototype.inspect = function (depth) {
          return inspectHelper(depth, "IdentNode", this.index, this.name);
        };
        _IdentNode_prototype.walk = function (f) {
          return this;
        };
        _IdentNode_prototype.walkAsync = function (f, callback) {
          return callback(null, this);
        };
        return IdentNode;
      }(Node));
      Node.If = IfNode = (function (Node) {
        var _IfNode_prototype, _Node_prototype;
        function IfNode(index, scope, test, whenTrue, whenFalse, label) {
          var _this;
          _this = this instanceof IfNode ? this : __create(_IfNode_prototype);
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          if (!(test instanceof Node)) {
            throw TypeError("Expected test to be a " + __name(Node) + ", got " + __typeof(test));
          }
          if (!(whenTrue instanceof Node)) {
            throw TypeError("Expected whenTrue to be a " + __name(Node) + ", got " + __typeof(whenTrue));
          }
          if (whenFalse == null) {
            whenFalse = NothingNode(0, scope);
          } else if (!(whenFalse instanceof Node)) {
            throw TypeError("Expected whenFalse to be a " + __name(Node) + ", got " + __typeof(whenFalse));
          }
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          _this.index = index;
          _this.scope = scope;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.test = test;
          _this.whenTrue = whenTrue;
          _this.whenFalse = whenFalse;
          _this.label = label;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _IfNode_prototype = IfNode.prototype = __create(_Node_prototype);
        _IfNode_prototype.constructor = IfNode;
        IfNode.displayName = "IfNode";
        if (typeof Node.extended === "function") {
          Node.extended(IfNode);
        }
        IfNode.cappedName = "If";
        IfNode.argNames = ["test", "whenTrue", "whenFalse", "label"];
        _IfNode_prototype.type = function (o) {
          var _ref;
          if ((_ref = this._type) == null) {
            return this._type = this.whenTrue.type(o).union(this.whenFalse.type(o));
          } else {
            return _ref;
          }
        };
        _IfNode_prototype.withLabel = function (label) {
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          return IfNode(
            this.index,
            this.scope,
            this.test,
            this.whenTrue,
            this.whenFalse,
            label
          );
        };
        _IfNode_prototype._reduce = function (o) {
          var label, test, testType, whenFalse, whenTrue;
          test = this.test.reduce(o);
          whenTrue = this.whenTrue.reduce(o);
          whenFalse = this.whenFalse.reduce(o);
          if (this.label != null) {
            label = this.label.reduce(o);
          } else {
            label = this.label;
          }
          if (test.isConst()) {
            return BlockNode(
              this.index,
              this.scope,
              [test.constValue() ? whenTrue : whenFalse],
              label
            ).reduce(o);
          } else {
            testType = test.type(o);
            if (testType.isSubsetOf(Type.alwaysTruthy)) {
              return BlockNode(
                this.index,
                this.scope,
                [test, whenTrue],
                label
              ).reduce(o);
            } else if (testType.isSubsetOf(Type.alwaysFalsy)) {
              return BlockNode(
                this.index,
                this.scope,
                [test, whenFalse],
                label
              ).reduce(o);
            } else if (test !== this.test || whenTrue !== this.whenTrue || whenFalse !== this.whenFalse || label !== this.label) {
              return IfNode(
                this.index,
                this.scope,
                test,
                whenTrue,
                whenFalse,
                label
              );
            } else {
              return this;
            }
          }
        };
        _IfNode_prototype.isStatement = function () {
          var _ref;
          if ((_ref = this._isStatement) == null) {
            return this._isStatement = this.whenTrue.isStatement() || this.whenFalse.isStatement();
          } else {
            return _ref;
          }
        };
        _IfNode_prototype.doWrap = function (o) {
          var whenFalse, whenTrue;
          whenTrue = this.whenTrue.doWrap(o);
          whenFalse = this.whenFalse.doWrap(o);
          if (whenTrue !== this.whenTrue || whenFalse !== this.whenFalse) {
            return IfNode(
              this.index,
              this.scope,
              this.test,
              whenTrue,
              whenFalse,
              this.label
            );
          } else {
            return this;
          }
        };
        _IfNode_prototype._isNoop = function (o) {
          var _ref;
          if ((_ref = this.__isNoop) == null) {
            return this.__isNoop = this.test.isNoop(o) && this.whenTrue.isNoop(o) && this.whenFalse.isNoop(o);
          } else {
            return _ref;
          }
        };
        _IfNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "IfNode",
            this.index,
            this.test,
            this.whenTrue,
            this.whenFalse,
            this.label
          );
        };
        _IfNode_prototype.walk = function (f) {
          var label, test, whenFalse, whenTrue;
          test = f(this.test);
          whenTrue = f(this.whenTrue);
          whenFalse = f(this.whenFalse);
          if (this.label instanceof Node) {
            label = f(this.label);
          } else {
            label = this.label;
          }
          if (test !== this.test || whenTrue !== this.whenTrue || whenFalse !== this.whenFalse || label !== this.label) {
            return IfNode(
              this.index,
              this.scope,
              test,
              whenTrue,
              whenFalse,
              label
            );
          } else {
            return this;
          }
        };
        _IfNode_prototype.walkAsync = function (f, callback) {
          var _once, _this;
          _this = this;
          return f(this.test, (_once = false, function (_e, test) {
            var _once2;
            if (_once) {
              throw Error("Attempted to call function more than once");
            } else {
              _once = true;
            }
            if (_e != null) {
              return callback(_e);
            }
            return f(_this.whenTrue, (_once2 = false, function (_e2, whenTrue) {
              var _once3;
              if (_once2) {
                throw Error("Attempted to call function more than once");
              } else {
                _once2 = true;
              }
              if (_e2 != null) {
                return callback(_e2);
              }
              return f(_this.whenFalse, (_once3 = false, function (_e3, whenFalse) {
                if (_once3) {
                  throw Error("Attempted to call function more than once");
                } else {
                  _once3 = true;
                }
                if (_e3 != null) {
                  return callback(_e3);
                }
                return (_this.label instanceof Node
                  ? function (next) {
                    var _once4;
                    return f(_this.label, (_once4 = false, function (_e4, label) {
                      if (_once4) {
                        throw Error("Attempted to call function more than once");
                      } else {
                        _once4 = true;
                      }
                      if (_e4 != null) {
                        return callback(_e4);
                      }
                      return next(label);
                    }));
                  }
                  : function (next) {
                    return next(_this.label);
                  })(function (label) {
                  return callback(null, test !== _this.test || whenTrue !== _this.whenTrue || whenFalse !== _this.whenFalse || label !== _this.label
                    ? IfNode(
                      _this.index,
                      _this.scope,
                      test,
                      whenTrue,
                      whenFalse,
                      label
                    )
                    : _this);
                });
              }));
            }));
          }));
        };
        return IfNode;
      }(Node));
      Node.MacroAccess = MacroAccessNode = (function (Node) {
        var _MacroAccessNode_prototype, _Node_prototype;
        function MacroAccessNode(index, scope, id, callLine, data, position, inGenerator, inEvilAst, doWrapped) {
          var _this;
          _this = this instanceof MacroAccessNode ? this : __create(_MacroAccessNode_prototype);
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          if (typeof id !== "number") {
            throw TypeError("Expected id to be a Number, got " + __typeof(id));
          }
          if (typeof callLine !== "number") {
            throw TypeError("Expected callLine to be a Number, got " + __typeof(callLine));
          }
          if (typeof data !== "object" || data === null) {
            throw TypeError("Expected data to be an Object, got " + __typeof(data));
          }
          if (typeof position !== "string") {
            throw TypeError("Expected position to be a String, got " + __typeof(position));
          }
          if (inGenerator == null) {
            inGenerator = false;
          } else if (typeof inGenerator !== "boolean") {
            throw TypeError("Expected inGenerator to be a Boolean, got " + __typeof(inGenerator));
          }
          if (inEvilAst == null) {
            inEvilAst = false;
          } else if (typeof inEvilAst !== "boolean") {
            throw TypeError("Expected inEvilAst to be a Boolean, got " + __typeof(inEvilAst));
          }
          if (doWrapped == null) {
            doWrapped = false;
          } else if (typeof doWrapped !== "boolean") {
            throw TypeError("Expected doWrapped to be a Boolean, got " + __typeof(doWrapped));
          }
          _this.index = index;
          _this.scope = scope;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.id = id;
          _this.callLine = callLine;
          _this.data = data;
          _this.position = position;
          _this.inGenerator = inGenerator;
          _this.inEvilAst = inEvilAst;
          _this.doWrapped = doWrapped;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _MacroAccessNode_prototype = MacroAccessNode.prototype = __create(_Node_prototype);
        _MacroAccessNode_prototype.constructor = MacroAccessNode;
        MacroAccessNode.displayName = "MacroAccessNode";
        if (typeof Node.extended === "function") {
          Node.extended(MacroAccessNode);
        }
        MacroAccessNode.cappedName = "MacroAccess";
        MacroAccessNode.argNames = [
          "id",
          "callLine",
          "data",
          "position",
          "inGenerator",
          "inEvilAst",
          "doWrapped"
        ];
        _MacroAccessNode_prototype.type = function (o) {
          var _ref, type;
          if ((_ref = this._type) == null) {
            type = o.macros.getTypeById(this.id);
            if (type != null) {
              if (typeof type === "string") {
                return this._type = this.data[type].type(o);
              } else {
                return this._type = type;
              }
            } else {
              return this._type = o.macroExpand1(this).type(o);
            }
          } else {
            return _ref;
          }
        };
        _MacroAccessNode_prototype.withLabel = function (label, o) {
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          return o.macroExpand1(this).withLabel(label, o);
        };
        _MacroAccessNode_prototype.walk = (function () {
          function walkObject(obj, func) {
            var changed, k, newV, result, v;
            result = {};
            changed = false;
            for (k in obj) {
              if (__owns.call(obj, k)) {
                v = obj[k];
                newV = walkItem(v, func);
                if (newV !== v) {
                  changed = true;
                }
                result[k] = newV;
              }
            }
            if (changed) {
              return result;
            } else {
              return obj;
            }
          }
          function walkItem(item, func) {
            if (item instanceof Node) {
              return func(item);
            } else if (__isArray(item)) {
              return map(item, function (x) {
                return walkItem(x, func);
              });
            } else if (typeof item === "object" && item !== null) {
              return walkObject(item, func);
            } else {
              return item;
            }
          }
          return function (func) {
            var data;
            data = walkItem(this.data, func);
            if (data !== this.data) {
              return MacroAccessNode(
                this.index,
                this.scope,
                this.id,
                this.callLine,
                data,
                this.position,
                this.inGenerator,
                this.inEvilAst,
                this.doWrapped
              );
            } else {
              return this;
            }
          };
        }());
        _MacroAccessNode_prototype.walkAsync = (function () {
          function walkObject(obj, func, callback) {
            var _keys, changed, result;
            changed = false;
            result = {};
            _keys = __keys(obj);
            return __async(
              1,
              _keys.length,
              false,
              function (_i, next) {
                var _once, k, v;
                k = _keys[_i];
                v = obj[k];
                return walkItem(item, func, (_once = false, function (_e, newItem) {
                  if (_once) {
                    throw Error("Attempted to call function more than once");
                  } else {
                    _once = true;
                  }
                  if (_e != null) {
                    return next(_e);
                  }
                  if (item !== newItem) {
                    changed = true;
                  }
                  result[k] = newItem;
                  return next(null);
                }));
              },
              function (err) {
                if (typeof err !== "undefined" && err !== null) {
                  return callback(err);
                } else {
                  return callback(null, changed ? result : obj);
                }
              }
            );
          }
          function walkItem(item, func, callback) {
            if (item instanceof Node) {
              return func(item, callback);
            } else if (__isArray(item)) {
              return mapAsync(
                item,
                function (x, cb) {
                  return walkItem(x, func, cb);
                },
                callback
              );
            } else if (typeof item === "object" && item !== null) {
              return walkObject(item, func, callback);
            } else {
              return callback(null, item);
            }
          }
          return function (func, callback) {
            var _once, _this;
            _this = this;
            return walkItem(this.data, func, (_once = false, function (_e, data) {
              if (_once) {
                throw Error("Attempted to call function more than once");
              } else {
                _once = true;
              }
              if (_e != null) {
                return callback(_e);
              }
              return callback(null, data !== _this.data
                ? MacroAccessNode(
                  _this.index,
                  _this.scope,
                  _this.id,
                  _this.callLine,
                  data,
                  _this.position,
                  _this.inGenerator,
                  _this.inEvilAst,
                  _this.doWrapped
                )
                : _this);
            }));
          };
        }());
        _MacroAccessNode_prototype._isNoop = function (o) {
          return o.macroExpand1(this).isNoop(o);
        };
        _MacroAccessNode_prototype.doWrap = function () {
          if (this.doWrapped) {
            return this;
          } else {
            return MacroAccessNode(
              this.index,
              this.scope,
              this.id,
              this.callLine,
              this.data,
              this.position,
              this.inGenerator,
              this.inEvilAst,
              true
            );
          }
        };
        _MacroAccessNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "MacroAccessNode",
            this.index,
            this.id,
            this.callLine,
            this.data,
            this.position,
            this.inGenerator,
            this.inEvilAst,
            this.doWrapped
          );
        };
        return MacroAccessNode;
      }(Node));
      Node.MacroConst = MacroConstNode = (function (Node) {
        var _MacroConstNode_prototype, _Node_prototype;
        function MacroConstNode(index, scope, name) {
          var _this;
          _this = this instanceof MacroConstNode ? this : __create(_MacroConstNode_prototype);
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          if (typeof name !== "string") {
            throw TypeError("Expected name to be a String, got " + __typeof(name));
          }
          _this.index = index;
          _this.scope = scope;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.name = name;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _MacroConstNode_prototype = MacroConstNode.prototype = __create(_Node_prototype);
        _MacroConstNode_prototype.constructor = MacroConstNode;
        MacroConstNode.displayName = "MacroConstNode";
        if (typeof Node.extended === "function") {
          Node.extended(MacroConstNode);
        }
        MacroConstNode.cappedName = "MacroConst";
        MacroConstNode.argNames = ["name"];
        _MacroConstNode_prototype.type = function (o) {
          var _ref, c, value;
          if ((_ref = this._type) == null) {
            c = o.getConst(this.name);
            if (!c) {
              return this._type = Type.any;
            } else {
              value = c.value;
              if (value === null) {
                return this._type = Type["null"];
              } else {
                switch (typeof value) {
                case "number": return this._type = Type.number;
                case "string": return this._type = Type.string;
                case "boolean": return this._type = Type.boolean;
                case "undefined": return this._type = Type["undefined"];
                default: throw Error("Unknown type for " + String(c.value));
                }
              }
            }
          } else {
            return _ref;
          }
        };
        _MacroConstNode_prototype._isNoop = function (o) {
          return true;
        };
        _MacroConstNode_prototype.toConst = function (o) {
          var _ref;
          return ConstNode(this.index, this.scope, (_ref = o.getConst(this.name)) != null ? _ref.value : void 0);
        };
        _MacroConstNode_prototype.inspect = function (depth) {
          return inspectHelper(depth, "MacroConstNode", this.index, this.name);
        };
        _MacroConstNode_prototype.walk = function (f) {
          return this;
        };
        _MacroConstNode_prototype.walkAsync = function (f, callback) {
          return callback(null, this);
        };
        return MacroConstNode;
      }(Node));
      Node.Nothing = NothingNode = (function (Node) {
        var _Node_prototype, _NothingNode_prototype;
        function NothingNode(index, scope) {
          var _this;
          _this = this instanceof NothingNode ? this : __create(_NothingNode_prototype);
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          _this.index = index;
          _this.scope = scope;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _NothingNode_prototype = NothingNode.prototype = __create(_Node_prototype);
        _NothingNode_prototype.constructor = NothingNode;
        NothingNode.displayName = "NothingNode";
        if (typeof Node.extended === "function") {
          Node.extended(NothingNode);
        }
        NothingNode.cappedName = "Nothing";
        NothingNode.argNames = [];
        _NothingNode_prototype.type = function () {
          return Type["undefined"];
        };
        _NothingNode_prototype.cacheable = false;
        _NothingNode_prototype.isConst = function () {
          return true;
        };
        _NothingNode_prototype.constValue = function () {
          return;
        };
        _NothingNode_prototype.isConstType = function (type) {
          return type === "undefined";
        };
        _NothingNode_prototype.isConstValue = function (value) {
          return value === void 0;
        };
        _NothingNode_prototype._isNoop = function () {
          return true;
        };
        _NothingNode_prototype.inspect = function (depth) {
          return inspectHelper(depth, "NothingNode", this.index);
        };
        return NothingNode;
      }(Node));
      Node.Object = ObjectNode = (function (Node) {
        var _Node_prototype, _ObjectNode_prototype;
        function ObjectNode(index, scope, pairs, prototype) {
          var _i, _this;
          _this = this instanceof ObjectNode ? this : __create(_ObjectNode_prototype);
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          if (!__isArray(pairs)) {
            throw TypeError("Expected pairs to be an Array, got " + __typeof(pairs));
          } else {
            for (_i = pairs.length; _i--; ) {
              if (typeof pairs[_i] !== "object" || pairs[_i] === null) {
                throw TypeError("Expected " + ("pairs[" + _i + "]") + " to be an Object, got " + __typeof(pairs[_i]));
              } else {
                if (!(pairs[_i].key instanceof Node)) {
                  throw TypeError("Expected " + ("pairs[" + _i + "].key") + " to be a " + __name(Node) + ", got " + __typeof(pairs[_i].key));
                }
                if (!(pairs[_i].value instanceof Node)) {
                  throw TypeError("Expected " + ("pairs[" + _i + "].value") + " to be a " + __name(Node) + ", got " + __typeof(pairs[_i].value));
                }
                if (pairs[_i].property == null) {
                  pairs[_i].property = void 0;
                } else if (typeof pairs[_i].property !== "string") {
                  throw TypeError("Expected " + ("pairs[" + _i + "].property") + " to be one of String or undefined, got " + __typeof(pairs[_i].property));
                }
              }
            }
          }
          if (prototype == null) {
            prototype = void 0;
          } else if (!(prototype instanceof Node)) {
            throw TypeError("Expected prototype to be one of " + (__name(Node) + " or undefined") + ", got " + __typeof(prototype));
          }
          _this.index = index;
          _this.scope = scope;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.pairs = pairs;
          _this.prototype = prototype;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _ObjectNode_prototype = ObjectNode.prototype = __create(_Node_prototype);
        _ObjectNode_prototype.constructor = ObjectNode;
        ObjectNode.displayName = "ObjectNode";
        if (typeof Node.extended === "function") {
          Node.extended(ObjectNode);
        }
        ObjectNode.cappedName = "Object";
        ObjectNode.argNames = ["pairs", "prototype"];
        _ObjectNode_prototype.type = function (o) {
          var _arr, _i, _len, _ref, _ref2, data, key, value;
          if ((_ref = this._type) == null) {
            data = {};
            for (_arr = __toArray(this.pairs), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              _ref2 = _arr[_i];
              key = _ref2.key;
              value = _ref2.value;
              if (key.isConst()) {
                data[key.constValue()] = value.type(o);
              }
            }
            return this._type = Type.makeObject(data);
          } else {
            return _ref;
          }
        };
        _ObjectNode_prototype.walk = (function () {
          function walkPair(pair, func) {
            var key, value;
            key = func(pair.key);
            value = func(pair.value);
            if (key !== pair.key || value !== pair.value) {
              return { key: key, value: value, property: pair.property };
            } else {
              return pair;
            }
          }
          return function (func) {
            var pairs, prototype;
            pairs = map(this.pairs, walkPair, func);
            if (this.prototype != null) {
              prototype = func(this.prototype);
            } else {
              prototype = this.prototype;
            }
            if (pairs !== this.pairs || prototype !== this.prototype) {
              return ObjectNode(this.index, this.scope, pairs, prototype);
            } else {
              return this;
            }
          };
        }());
        _ObjectNode_prototype.walkAsync = (function () {
          function walkPair(pair, func, callback) {
            var _once;
            return func(pair.key, (_once = false, function (_e, key) {
              var _once2;
              if (_once) {
                throw Error("Attempted to call function more than once");
              } else {
                _once = true;
              }
              if (_e != null) {
                return callback(_e);
              }
              return func(pair.value, (_once2 = false, function (_e2, value) {
                if (_once2) {
                  throw Error("Attempted to call function more than once");
                } else {
                  _once2 = true;
                }
                if (_e2 != null) {
                  return callback(_e2);
                }
                return callback(null, key !== pair.key || value !== pair.value ? { key: key, value: value, property: pair.property } : pair);
              }));
            }));
          }
          return function (func, callback) {
            var _once, _this;
            _this = this;
            return mapAsync(this.pairs, walkPair, func, (_once = false, function (_e, pairs) {
              if (_once) {
                throw Error("Attempted to call function more than once");
              } else {
                _once = true;
              }
              if (_e != null) {
                return callback(_e);
              }
              return (_this.prototype != null
                ? function (next) {
                  var _once2;
                  return func(_this.prototype, (_once2 = false, function (_e2, p) {
                    if (_once2) {
                      throw Error("Attempted to call function more than once");
                    } else {
                      _once2 = true;
                    }
                    if (_e2 != null) {
                      return callback(_e2);
                    }
                    return next(p);
                  }));
                }
                : function (next) {
                  return next(_this.prototype);
                })(function (prototype) {
                return callback(null, pairs !== _this.pairs || prototype !== _this.prototype ? ObjectNode(_this.index, _this.scope, pairs, prototype) : _this);
              });
            }));
          };
        }());
        _ObjectNode_prototype._reduce = (function () {
          function reducePair(pair, o) {
            var key, value;
            key = pair.key.reduce(o);
            value = pair.value.reduce(o).doWrap(o);
            if (key !== pair.key || value !== pair.value) {
              return { key: key, value: value, property: pair.property };
            } else {
              return pair;
            }
          }
          return function (o) {
            var pairs, prototype;
            pairs = map(this.pairs, reducePair, o);
            if (this.prototype != null) {
              prototype = this.prototype.reduce(o);
            } else {
              prototype = this.prototype;
            }
            if (pairs !== this.pairs || prototype !== this.prototype) {
              return ObjectNode(this.index, this.scope, pairs, prototype);
            } else {
              return this;
            }
          };
        }());
        _ObjectNode_prototype._isNoop = function (o) {
          var _arr, _every, _i, _len, _ref, _ref2, key, value;
          if ((_ref = this.__isNoop) == null) {
            _every = true;
            for (_arr = __toArray(this.pairs), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              _ref2 = _arr[_i];
              key = _ref2.key;
              value = _ref2.value;
              if (!key.isNoop(o) || !value.isNoop(o)) {
                _every = false;
                break;
              }
            }
            return this.__isNoop = _every;
          } else {
            return _ref;
          }
        };
        _ObjectNode_prototype.isLiteral = function () {
          var _ref, _this;
          _this = this;
          if ((_ref = this._isLiteral) == null) {
            return this._isLiteral = this.prototype == null && (function () {
              var _arr, _every, _i, _len, _ref, key, value;
              _every = true;
              for (_arr = __toArray(_this.pairs), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                _ref = _arr[_i];
                key = _ref.key;
                value = _ref.value;
                if (!key.isLiteral() || !value.isLiteral()) {
                  _every = false;
                  break;
                }
              }
              return _every;
            }());
          } else {
            return _ref;
          }
        };
        _ObjectNode_prototype.literalValue = function () {
          var _arr, _i, _len, _ref, key, result, value;
          if (this.prototype != null) {
            throw Error("Cannot convert object with prototype to a literal");
          }
          result = {};
          for (_arr = __toArray(this.pairs), _i = 0, _len = _arr.length; _i < _len; ++_i) {
            _ref = _arr[_i];
            key = _ref.key;
            value = _ref.value;
            result[key.literalValue()] = value.literalValue();
          }
          return result;
        };
        _ObjectNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "ObjectNode",
            this.index,
            this.pairs,
            this.prototype
          );
        };
        return ObjectNode;
      }(Node));
      Node.object = function (index, pairs, prototype) {
        var _arr, _i, _len, _ref, key, keyValue, knownKeys, lastPropertyPair,
            ParserError, property;
        knownKeys = [];
        lastPropertyPair = null;
        for (_arr = __toArray(pairs), _i = 0, _len = _arr.length; _i < _len; ++_i) {
          _ref = _arr[_i];
          key = _ref.key;
          property = _ref.property;
          if (key instanceof ConstNode) {
            keyValue = String(key.value);
            if ((property === "get" || property === "set") && lastPropertyPair && lastPropertyPair.property !== property && lastPropertyPair.key === keyValue) {
              lastPropertyPair = null;
              continue;
            } else if (__in(keyValue, knownKeys)) {
              ParserError = require("./parser").ParserError;
              throw ParserError("Duplicate key " + __strnum(quote(keyValue)) + " in object", this, key.index);
            }
            knownKeys.push(keyValue);
            if (property === "get" || property === "set") {
              lastPropertyPair = { key: keyValue, property: property };
            } else {
              lastPropertyPair = null;
            }
          } else {
            lastPropertyPair = null;
          }
        }
        return this.Object(index, pairs, prototype);
      };
      Node.objectParam = Node.object;
      Node.Param = ParamNode = (function (Node) {
        var _Node_prototype, _ParamNode_prototype;
        function ParamNode(index, scope, ident, defaultValue, spread, isMutable, asType) {
          var _this;
          _this = this instanceof ParamNode ? this : __create(_ParamNode_prototype);
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          if (!(ident instanceof Node)) {
            throw TypeError("Expected ident to be a " + __name(Node) + ", got " + __typeof(ident));
          }
          if (defaultValue == null) {
            defaultValue = void 0;
          } else if (!(defaultValue instanceof Node)) {
            throw TypeError("Expected defaultValue to be one of " + (__name(Node) + " or undefined") + ", got " + __typeof(defaultValue));
          }
          if (spread == null) {
            spread = false;
          } else if (typeof spread !== "boolean") {
            throw TypeError("Expected spread to be a Boolean, got " + __typeof(spread));
          }
          if (isMutable == null) {
            isMutable = false;
          } else if (typeof isMutable !== "boolean") {
            throw TypeError("Expected isMutable to be a Boolean, got " + __typeof(isMutable));
          }
          if (asType == null) {
            asType = void 0;
          } else if (!(asType instanceof Node)) {
            throw TypeError("Expected asType to be one of " + (__name(Node) + " or undefined") + ", got " + __typeof(asType));
          }
          _this.index = index;
          _this.scope = scope;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.ident = ident;
          _this.defaultValue = defaultValue;
          _this.spread = spread;
          _this.isMutable = isMutable;
          _this.asType = asType;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _ParamNode_prototype = ParamNode.prototype = __create(_Node_prototype);
        _ParamNode_prototype.constructor = ParamNode;
        ParamNode.displayName = "ParamNode";
        if (typeof Node.extended === "function") {
          Node.extended(ParamNode);
        }
        ParamNode.cappedName = "Param";
        ParamNode.argNames = [
          "ident",
          "defaultValue",
          "spread",
          "isMutable",
          "asType"
        ];
        _ParamNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "ParamNode",
            this.index,
            this.ident,
            this.defaultValue,
            this.spread,
            this.isMutable,
            this.asType
          );
        };
        _ParamNode_prototype.walk = function (f) {
          var asType, defaultValue, ident;
          ident = f(this.ident);
          if (this.defaultValue instanceof Node) {
            defaultValue = f(this.defaultValue);
          } else {
            defaultValue = this.defaultValue;
          }
          if (this.asType instanceof Node) {
            asType = f(this.asType);
          } else {
            asType = this.asType;
          }
          if (ident !== this.ident || defaultValue !== this.defaultValue || asType !== this.asType) {
            return ParamNode(
              this.index,
              this.scope,
              ident,
              defaultValue,
              this.spread,
              this.isMutable,
              asType
            );
          } else {
            return this;
          }
        };
        _ParamNode_prototype.walkAsync = function (f, callback) {
          var _once, _this;
          _this = this;
          return f(this.ident, (_once = false, function (_e, ident) {
            if (_once) {
              throw Error("Attempted to call function more than once");
            } else {
              _once = true;
            }
            if (_e != null) {
              return callback(_e);
            }
            return (_this.defaultValue instanceof Node
              ? function (next) {
                var _once2;
                return f(_this.defaultValue, (_once2 = false, function (_e2, defaultValue) {
                  if (_once2) {
                    throw Error("Attempted to call function more than once");
                  } else {
                    _once2 = true;
                  }
                  if (_e2 != null) {
                    return callback(_e2);
                  }
                  return next(defaultValue);
                }));
              }
              : function (next) {
                return next(_this.defaultValue);
              })(function (defaultValue) {
              return (_this.asType instanceof Node
                ? function (next) {
                  var _once2;
                  return f(_this.asType, (_once2 = false, function (_e2, asType) {
                    if (_once2) {
                      throw Error("Attempted to call function more than once");
                    } else {
                      _once2 = true;
                    }
                    if (_e2 != null) {
                      return callback(_e2);
                    }
                    return next(asType);
                  }));
                }
                : function (next) {
                  return next(_this.asType);
                })(function (asType) {
                return callback(null, ident !== _this.ident || defaultValue !== _this.defaultValue || asType !== _this.asType
                  ? ParamNode(
                    _this.index,
                    _this.scope,
                    ident,
                    defaultValue,
                    _this.spread,
                    _this.isMutable,
                    asType
                  )
                  : _this);
              });
            });
          }));
        };
        return ParamNode;
      }(Node));
      Node.Regexp = RegexpNode = (function (Node) {
        var _Node_prototype, _RegexpNode_prototype;
        function RegexpNode(index, scope, source, flags) {
          var _this;
          _this = this instanceof RegexpNode ? this : __create(_RegexpNode_prototype);
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          if (!(source instanceof Node)) {
            throw TypeError("Expected source to be a " + __name(Node) + ", got " + __typeof(source));
          }
          if (typeof flags !== "string") {
            throw TypeError("Expected flags to be a String, got " + __typeof(flags));
          }
          _this.index = index;
          _this.scope = scope;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.source = source;
          _this.flags = flags;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _RegexpNode_prototype = RegexpNode.prototype = __create(_Node_prototype);
        _RegexpNode_prototype.constructor = RegexpNode;
        RegexpNode.displayName = "RegexpNode";
        if (typeof Node.extended === "function") {
          Node.extended(RegexpNode);
        }
        RegexpNode.cappedName = "Regexp";
        RegexpNode.argNames = ["source", "flags"];
        _RegexpNode_prototype.type = function () {
          return Type.regexp;
        };
        _RegexpNode_prototype._isNoop = function (o) {
          return this.text.isNoop(o);
        };
        _RegexpNode_prototype._reduce = function (o) {
          var source;
          source = this.source.reduce(o).doWrap(o);
          if (!source.isConst()) {
            return CallNode(
              this.index,
              this.scope,
              IdentNode(this.index, this.scope, "RegExp"),
              [
                source,
                ConstNode(this.index, this.scope, this.flags)
              ]
            );
          } else if (source !== this.source) {
            return RegexpNode(this.index, this.scope, source, this.flags);
          } else {
            return this;
          }
        };
        _RegexpNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "RegexpNode",
            this.index,
            this.source,
            this.flags
          );
        };
        _RegexpNode_prototype.walk = function (f) {
          var source;
          source = f(this.source);
          if (source !== this.source) {
            return RegexpNode(this.index, this.scope, source, this.flags);
          } else {
            return this;
          }
        };
        _RegexpNode_prototype.walkAsync = function (f, callback) {
          var _once, _this;
          _this = this;
          return f(this.source, (_once = false, function (_e, source) {
            if (_once) {
              throw Error("Attempted to call function more than once");
            } else {
              _once = true;
            }
            if (_e != null) {
              return callback(_e);
            }
            return callback(null, source !== _this.source ? RegexpNode(_this.index, _this.scope, source, _this.flags) : _this);
          }));
        };
        return RegexpNode;
      }(Node));
      Node.Return = ReturnNode = (function (Node) {
        var _Node_prototype, _ReturnNode_prototype;
        function ReturnNode(index, scope, node) {
          var _this;
          _this = this instanceof ReturnNode ? this : __create(_ReturnNode_prototype);
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          if (node == null) {
            node = ConstNode(index, scope, void 0);
          } else if (!(node instanceof Node)) {
            throw TypeError("Expected node to be a " + __name(Node) + ", got " + __typeof(node));
          }
          _this.index = index;
          _this.scope = scope;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.node = node;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _ReturnNode_prototype = ReturnNode.prototype = __create(_Node_prototype);
        _ReturnNode_prototype.constructor = ReturnNode;
        ReturnNode.displayName = "ReturnNode";
        if (typeof Node.extended === "function") {
          Node.extended(ReturnNode);
        }
        ReturnNode.cappedName = "Return";
        ReturnNode.argNames = ["node"];
        _ReturnNode_prototype.type = function (o) {
          return this.node.type(o);
        };
        _ReturnNode_prototype.isStatement = function () {
          return true;
        };
        _ReturnNode_prototype._reduce = function (o) {
          var node;
          node = this.node.reduce(o).doWrap(o);
          if (node !== this.node) {
            return ReturnNode(this.index, this.scope, node);
          } else {
            return this;
          }
        };
        _ReturnNode_prototype.inspect = function (depth) {
          return inspectHelper(depth, "ReturnNode", this.index, this.node);
        };
        _ReturnNode_prototype.walk = function (f) {
          var node;
          node = f(this.node);
          if (node !== this.node) {
            return ReturnNode(this.index, this.scope, node);
          } else {
            return this;
          }
        };
        _ReturnNode_prototype.walkAsync = function (f, callback) {
          var _once, _this;
          _this = this;
          return f(this.node, (_once = false, function (_e, node) {
            if (_once) {
              throw Error("Attempted to call function more than once");
            } else {
              _once = true;
            }
            if (_e != null) {
              return callback(_e);
            }
            return callback(null, node !== _this.node ? ReturnNode(_this.index, _this.scope, node) : _this);
          }));
        };
        return ReturnNode;
      }(Node));
      Node.Root = RootNode = (function (Node) {
        var _Node_prototype, _RootNode_prototype;
        function RootNode(index, scope, file, body, isEmbedded, isGenerator) {
          var _this;
          _this = this instanceof RootNode ? this : __create(_RootNode_prototype);
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          if (file == null) {
            file = void 0;
          } else if (typeof file !== "string") {
            throw TypeError("Expected file to be one of String or undefined, got " + __typeof(file));
          }
          if (!(body instanceof Node)) {
            throw TypeError("Expected body to be a " + __name(Node) + ", got " + __typeof(body));
          }
          if (isEmbedded == null) {
            isEmbedded = false;
          } else if (typeof isEmbedded !== "boolean") {
            throw TypeError("Expected isEmbedded to be a Boolean, got " + __typeof(isEmbedded));
          }
          if (isGenerator == null) {
            isGenerator = false;
          } else if (typeof isGenerator !== "boolean") {
            throw TypeError("Expected isGenerator to be a Boolean, got " + __typeof(isGenerator));
          }
          _this.index = index;
          _this.scope = scope;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.file = file;
          _this.body = body;
          _this.isEmbedded = isEmbedded;
          _this.isGenerator = isGenerator;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _RootNode_prototype = RootNode.prototype = __create(_Node_prototype);
        _RootNode_prototype.constructor = RootNode;
        RootNode.displayName = "RootNode";
        if (typeof Node.extended === "function") {
          Node.extended(RootNode);
        }
        RootNode.cappedName = "Root";
        RootNode.argNames = ["file", "body", "isEmbedded", "isGenerator"];
        _RootNode_prototype.isStatement = function () {
          return true;
        };
        _RootNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "RootNode",
            this.index,
            this.file,
            this.body,
            this.isEmbedded,
            this.isGenerator
          );
        };
        _RootNode_prototype.walk = function (f) {
          var body;
          body = f(this.body);
          if (body !== this.body) {
            return RootNode(
              this.index,
              this.scope,
              this.file,
              body,
              this.isEmbedded,
              this.isGenerator
            );
          } else {
            return this;
          }
        };
        _RootNode_prototype.walkAsync = function (f, callback) {
          var _once, _this;
          _this = this;
          return f(this.body, (_once = false, function (_e, body) {
            if (_once) {
              throw Error("Attempted to call function more than once");
            } else {
              _once = true;
            }
            if (_e != null) {
              return callback(_e);
            }
            return callback(null, body !== _this.body
              ? RootNode(
                _this.index,
                _this.scope,
                _this.file,
                body,
                _this.isEmbedded,
                _this.isGenerator
              )
              : _this);
          }));
        };
        return RootNode;
      }(Node));
      Node.Spread = SpreadNode = (function (Node) {
        var _Node_prototype, _SpreadNode_prototype;
        function SpreadNode(index, scope, node) {
          var _this;
          _this = this instanceof SpreadNode ? this : __create(_SpreadNode_prototype);
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          if (!(node instanceof Node)) {
            throw TypeError("Expected node to be a " + __name(Node) + ", got " + __typeof(node));
          }
          _this.index = index;
          _this.scope = scope;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.node = node;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _SpreadNode_prototype = SpreadNode.prototype = __create(_Node_prototype);
        _SpreadNode_prototype.constructor = SpreadNode;
        SpreadNode.displayName = "SpreadNode";
        if (typeof Node.extended === "function") {
          Node.extended(SpreadNode);
        }
        SpreadNode.cappedName = "Spread";
        SpreadNode.argNames = ["node"];
        _SpreadNode_prototype._reduce = function (o) {
          var node;
          node = this.node.reduce(o).doWrap(o);
          if (node !== this.node) {
            return SpreadNode(this.index, this.scope, node);
          } else {
            return this;
          }
        };
        _SpreadNode_prototype.inspect = function (depth) {
          return inspectHelper(depth, "SpreadNode", this.index, this.node);
        };
        _SpreadNode_prototype.walk = function (f) {
          var node;
          node = f(this.node);
          if (node !== this.node) {
            return SpreadNode(this.index, this.scope, node);
          } else {
            return this;
          }
        };
        _SpreadNode_prototype.walkAsync = function (f, callback) {
          var _once, _this;
          _this = this;
          return f(this.node, (_once = false, function (_e, node) {
            if (_once) {
              throw Error("Attempted to call function more than once");
            } else {
              _once = true;
            }
            if (_e != null) {
              return callback(_e);
            }
            return callback(null, node !== _this.node ? SpreadNode(_this.index, _this.scope, node) : _this);
          }));
        };
        return SpreadNode;
      }(Node));
      Node.string = function (index, parts) {
        var _i, _i2, _len, concatOp, current, part;
        if (!__isArray(parts)) {
          throw TypeError("Expected parts to be an Array, got " + __typeof(parts));
        } else {
          for (_i = parts.length; _i--; ) {
            if (!(parts[_i] instanceof Node)) {
              throw TypeError("Expected " + ("parts[" + _i + "]") + " to be a " + __name(Node) + ", got " + __typeof(parts[_i]));
            }
          }
        }
        concatOp = this.getMacroByLabel("stringConcat");
        if (!concatOp) {
          throw Error("Cannot use string interpolation until the string-concat operator has been defined");
        }
        if (parts.length === 0) {
          return this.Const(index, "");
        } else if (parts.length === 1) {
          return concatOp.func(
            {
              left: this.Const(index, ""),
              op: "",
              right: parts[0]
            },
            this,
            index
          );
        } else {
          current = parts[0];
          for (_i2 = 1, _len = parts.length; _i2 < _len; ++_i2) {
            part = parts[_i2];
            current = concatOp.func(
              { left: current, op: "", right: part },
              this,
              index
            );
          }
          return current;
        }
      };
      Node.Super = SuperNode = (function (Node) {
        var _Node_prototype, _SuperNode_prototype;
        function SuperNode(index, scope, child, args) {
          var _i, _this;
          _this = this instanceof SuperNode ? this : __create(_SuperNode_prototype);
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          if (child == null) {
            child = void 0;
          } else if (!(child instanceof Node)) {
            throw TypeError("Expected child to be one of " + (__name(Node) + " or undefined") + ", got " + __typeof(child));
          }
          if (!__isArray(args)) {
            throw TypeError("Expected args to be an Array, got " + __typeof(args));
          } else {
            for (_i = args.length; _i--; ) {
              if (!(args[_i] instanceof Node)) {
                throw TypeError("Expected " + ("args[" + _i + "]") + " to be a " + __name(Node) + ", got " + __typeof(args[_i]));
              }
            }
          }
          _this.index = index;
          _this.scope = scope;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.child = child;
          _this.args = args;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _SuperNode_prototype = SuperNode.prototype = __create(_Node_prototype);
        _SuperNode_prototype.constructor = SuperNode;
        SuperNode.displayName = "SuperNode";
        if (typeof Node.extended === "function") {
          Node.extended(SuperNode);
        }
        SuperNode.cappedName = "Super";
        SuperNode.argNames = ["child", "args"];
        _SuperNode_prototype._reduce = function (o) {
          var args, child;
          if (this.child != null) {
            child = this.child.reduce(o).doWrap(o);
          } else {
            child = this.child;
          }
          args = map(
            this.args,
            function (node, o) {
              return node.reduce(o).doWrap(o);
            },
            o
          );
          if (child !== this.child || args !== this.args) {
            return SuperNode(this.index, this.scope, child, args);
          } else {
            return this;
          }
        };
        _SuperNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "SuperNode",
            this.index,
            this.child,
            this.args
          );
        };
        _SuperNode_prototype.walk = function (f) {
          var args, child;
          if (this.child instanceof Node) {
            child = f(this.child);
          } else {
            child = this.child;
          }
          args = map(this.args, f);
          if (child !== this.child || args !== this.args) {
            return SuperNode(this.index, this.scope, child, args);
          } else {
            return this;
          }
        };
        _SuperNode_prototype.walkAsync = function (f, callback) {
          var _this;
          _this = this;
          return (this.child instanceof Node
            ? function (next) {
              var _once;
              return f(_this.child, (_once = false, function (_e, child) {
                if (_once) {
                  throw Error("Attempted to call function more than once");
                } else {
                  _once = true;
                }
                if (_e != null) {
                  return callback(_e);
                }
                return next(child);
              }));
            }
            : function (next) {
              return next(_this.child);
            })(function (child) {
            var _once;
            return mapAsync(_this.args, f, (_once = false, function (_e, args) {
              if (_once) {
                throw Error("Attempted to call function more than once");
              } else {
                _once = true;
              }
              if (_e != null) {
                return callback(_e);
              }
              return callback(null, child !== _this.child || args !== _this.args ? SuperNode(_this.index, _this.scope, child, args) : _this);
            }));
          });
        };
        return SuperNode;
      }(Node));
      Node.Switch = SwitchNode = (function (Node) {
        var _Node_prototype, _SwitchNode_prototype;
        function SwitchNode(index, scope, node, cases, defaultCase, label) {
          var _this;
          _this = this instanceof SwitchNode ? this : __create(_SwitchNode_prototype);
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          if (!(node instanceof Node)) {
            throw TypeError("Expected node to be a " + __name(Node) + ", got " + __typeof(node));
          }
          if (!__isArray(cases)) {
            throw TypeError("Expected cases to be an Array, got " + __typeof(cases));
          }
          if (defaultCase == null) {
            defaultCase = void 0;
          } else if (!(defaultCase instanceof Node)) {
            throw TypeError("Expected defaultCase to be one of " + (__name(Node) + " or undefined") + ", got " + __typeof(defaultCase));
          }
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          _this.index = index;
          _this.scope = scope;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.node = node;
          _this.cases = cases;
          _this.defaultCase = defaultCase;
          _this.label = label;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _SwitchNode_prototype = SwitchNode.prototype = __create(_Node_prototype);
        _SwitchNode_prototype.constructor = SwitchNode;
        SwitchNode.displayName = "SwitchNode";
        if (typeof Node.extended === "function") {
          Node.extended(SwitchNode);
        }
        SwitchNode.cappedName = "Switch";
        SwitchNode.argNames = ["node", "cases", "defaultCase", "label"];
        _SwitchNode_prototype.type = function (o) {
          var _arr, _i, _len, _ref, case_, type;
          if ((_ref = this._type) == null) {
            if (this.defaultCase != null) {
              type = this.defaultCase.type(o);
            } else {
              type = Type["undefined"];
            }
            for (_arr = __toArray(this.cases), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              case_ = _arr[_i];
              if (case_.fallthrough) {
                type = type;
              } else {
                type = type.union(case_.body.type(o));
              }
            }
            return this._type = type;
          } else {
            return _ref;
          }
        };
        _SwitchNode_prototype.withLabel = function (label) {
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          return SwitchNode(
            this.index,
            this.scope,
            this.node,
            this.cases,
            this.defaultCase,
            label
          );
        };
        _SwitchNode_prototype.walk = function (f) {
          var cases, defaultCase, label, node;
          node = f(this.node);
          cases = map(this.cases, function (case_) {
            var caseBody, caseNode;
            caseNode = f(case_.node);
            caseBody = f(case_.body);
            if (caseNode !== case_.node || caseBody !== case_.body) {
              return { node: caseNode, body: caseBody, fallthrough: case_.fallthrough };
            } else {
              return case_;
            }
          });
          if (this.defaultCase) {
            defaultCase = f(this.defaultCase);
          } else {
            defaultCase = this.defaultCase;
          }
          if (this.label != null) {
            label = f(this.label);
          } else {
            label = this.label;
          }
          if (node !== this.node || cases !== this.cases || defaultCase !== this.defaultCase || label !== this.label) {
            return SwitchNode(
              this.index,
              this.scope,
              node,
              cases,
              defaultCase,
              label
            );
          } else {
            return this;
          }
        };
        _SwitchNode_prototype.walkAsync = function (f, callback) {
          var _once, _this;
          _this = this;
          return f(this.node, (_once = false, function (_e, node) {
            var _once2;
            if (_once) {
              throw Error("Attempted to call function more than once");
            } else {
              _once = true;
            }
            if (_e != null) {
              return callback(_e);
            }
            return mapAsync(
              _this.cases,
              function (case_, cb) {
                var _once3;
                return f(case_.node, (_once3 = false, function (_e2, caseNode) {
                  var _once4;
                  if (_once3) {
                    throw Error("Attempted to call function more than once");
                  } else {
                    _once3 = true;
                  }
                  if (_e2 != null) {
                    return cb(_e2);
                  }
                  return f(case_.body, (_once4 = false, function (_e3, caseBody) {
                    if (_once4) {
                      throw Error("Attempted to call function more than once");
                    } else {
                      _once4 = true;
                    }
                    if (_e3 != null) {
                      return cb(_e3);
                    }
                    return cb(null, caseNode !== case_.node || caseBody !== case_.body ? { node: caseNode, body: caseBody, fallthrough: case_.fallthrough } : case_);
                  }));
                }));
              },
              (_once2 = false, function (_e2, cases) {
                if (_once2) {
                  throw Error("Attempted to call function more than once");
                } else {
                  _once2 = true;
                }
                if (_e2 != null) {
                  return callback(_e2);
                }
                return (_this.defaultCase != null
                  ? function (next) {
                    var _once3;
                    return f(_this.defaultCase, (_once3 = false, function (_e3, x) {
                      if (_once3) {
                        throw Error("Attempted to call function more than once");
                      } else {
                        _once3 = true;
                      }
                      if (_e3 != null) {
                        return callback(_e3);
                      }
                      return next(x);
                    }));
                  }
                  : function (next) {
                    return next(_this.defaultCase);
                  })(function (defaultCase) {
                  return (_this.label != null
                    ? function (next) {
                      var _once3;
                      return f(_this.label, (_once3 = false, function (_e3, x) {
                        if (_once3) {
                          throw Error("Attempted to call function more than once");
                        } else {
                          _once3 = true;
                        }
                        if (_e3 != null) {
                          return callback(_e3);
                        }
                        return next(x);
                      }));
                    }
                    : function (next) {
                      return next(_this.label);
                    })(function (label) {
                    return callback(null, node !== _this.node || cases !== _this.cases || defaultCase !== _this.defaultCase || label !== _this.label
                      ? SwitchNode(
                        _this.index,
                        _this.scope,
                        node,
                        cases,
                        defaultCase,
                        label
                      )
                      : _this);
                  });
                });
              })
            );
          }));
        };
        _SwitchNode_prototype.isStatement = function () {
          return true;
        };
        _SwitchNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "SwitchNode",
            this.index,
            this.node,
            this.cases,
            this.defaultCase,
            this.label
          );
        };
        return SwitchNode;
      }(Node));
      Node.SyntaxChoice = SyntaxChoiceNode = (function (Node) {
        var _Node_prototype, _SyntaxChoiceNode_prototype;
        function SyntaxChoiceNode(index, scope, choices) {
          var _i, _this;
          _this = this instanceof SyntaxChoiceNode ? this : __create(_SyntaxChoiceNode_prototype);
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          if (!__isArray(choices)) {
            throw TypeError("Expected choices to be an Array, got " + __typeof(choices));
          } else {
            for (_i = choices.length; _i--; ) {
              if (!(choices[_i] instanceof Node)) {
                throw TypeError("Expected " + ("choices[" + _i + "]") + " to be a " + __name(Node) + ", got " + __typeof(choices[_i]));
              }
            }
          }
          _this.index = index;
          _this.scope = scope;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.choices = choices;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _SyntaxChoiceNode_prototype = SyntaxChoiceNode.prototype = __create(_Node_prototype);
        _SyntaxChoiceNode_prototype.constructor = SyntaxChoiceNode;
        SyntaxChoiceNode.displayName = "SyntaxChoiceNode";
        if (typeof Node.extended === "function") {
          Node.extended(SyntaxChoiceNode);
        }
        SyntaxChoiceNode.cappedName = "SyntaxChoice";
        SyntaxChoiceNode.argNames = ["choices"];
        _SyntaxChoiceNode_prototype.inspect = function (depth) {
          return inspectHelper(depth, "SyntaxChoiceNode", this.index, this.choices);
        };
        _SyntaxChoiceNode_prototype.walk = function (f) {
          var choices;
          choices = map(this.choices, f);
          if (choices !== this.choices) {
            return SyntaxChoiceNode(this.index, this.scope, choices);
          } else {
            return this;
          }
        };
        _SyntaxChoiceNode_prototype.walkAsync = function (f, callback) {
          var _once, _this;
          _this = this;
          return mapAsync(this.choices, f, (_once = false, function (_e, choices) {
            if (_once) {
              throw Error("Attempted to call function more than once");
            } else {
              _once = true;
            }
            if (_e != null) {
              return callback(_e);
            }
            return callback(null, choices !== _this.choices ? SyntaxChoiceNode(_this.index, _this.scope, choices) : _this);
          }));
        };
        return SyntaxChoiceNode;
      }(Node));
      Node.SyntaxMany = SyntaxManyNode = (function (Node) {
        var _Node_prototype, _SyntaxManyNode_prototype;
        function SyntaxManyNode(index, scope, inner, multiplier) {
          var _this;
          _this = this instanceof SyntaxManyNode ? this : __create(_SyntaxManyNode_prototype);
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          if (!(inner instanceof Node)) {
            throw TypeError("Expected inner to be a " + __name(Node) + ", got " + __typeof(inner));
          }
          if (typeof multiplier !== "string") {
            throw TypeError("Expected multiplier to be a String, got " + __typeof(multiplier));
          }
          _this.index = index;
          _this.scope = scope;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.inner = inner;
          _this.multiplier = multiplier;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _SyntaxManyNode_prototype = SyntaxManyNode.prototype = __create(_Node_prototype);
        _SyntaxManyNode_prototype.constructor = SyntaxManyNode;
        SyntaxManyNode.displayName = "SyntaxManyNode";
        if (typeof Node.extended === "function") {
          Node.extended(SyntaxManyNode);
        }
        SyntaxManyNode.cappedName = "SyntaxMany";
        SyntaxManyNode.argNames = ["inner", "multiplier"];
        _SyntaxManyNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "SyntaxManyNode",
            this.index,
            this.inner,
            this.multiplier
          );
        };
        _SyntaxManyNode_prototype.walk = function (f) {
          var inner;
          inner = f(this.inner);
          if (inner !== this.inner) {
            return SyntaxManyNode(this.index, this.scope, inner, this.multiplier);
          } else {
            return this;
          }
        };
        _SyntaxManyNode_prototype.walkAsync = function (f, callback) {
          var _once, _this;
          _this = this;
          return f(this.inner, (_once = false, function (_e, inner) {
            if (_once) {
              throw Error("Attempted to call function more than once");
            } else {
              _once = true;
            }
            if (_e != null) {
              return callback(_e);
            }
            return callback(null, inner !== _this.inner ? SyntaxManyNode(_this.index, _this.scope, inner, _this.multiplier) : _this);
          }));
        };
        return SyntaxManyNode;
      }(Node));
      Node.SyntaxParam = SyntaxParamNode = (function (Node) {
        var _Node_prototype, _SyntaxParamNode_prototype;
        function SyntaxParamNode(index, scope, ident, asType) {
          var _this;
          _this = this instanceof SyntaxParamNode ? this : __create(_SyntaxParamNode_prototype);
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          if (!(ident instanceof Node)) {
            throw TypeError("Expected ident to be a " + __name(Node) + ", got " + __typeof(ident));
          }
          if (asType == null) {
            asType = void 0;
          } else if (!(asType instanceof Node)) {
            throw TypeError("Expected asType to be one of " + (__name(Node) + " or undefined") + ", got " + __typeof(asType));
          }
          _this.index = index;
          _this.scope = scope;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.ident = ident;
          _this.asType = asType;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _SyntaxParamNode_prototype = SyntaxParamNode.prototype = __create(_Node_prototype);
        _SyntaxParamNode_prototype.constructor = SyntaxParamNode;
        SyntaxParamNode.displayName = "SyntaxParamNode";
        if (typeof Node.extended === "function") {
          Node.extended(SyntaxParamNode);
        }
        SyntaxParamNode.cappedName = "SyntaxParam";
        SyntaxParamNode.argNames = ["ident", "asType"];
        _SyntaxParamNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "SyntaxParamNode",
            this.index,
            this.ident,
            this.asType
          );
        };
        _SyntaxParamNode_prototype.walk = function (f) {
          var asType, ident;
          ident = f(this.ident);
          if (this.asType instanceof Node) {
            asType = f(this.asType);
          } else {
            asType = this.asType;
          }
          if (ident !== this.ident || asType !== this.asType) {
            return SyntaxParamNode(this.index, this.scope, ident, asType);
          } else {
            return this;
          }
        };
        _SyntaxParamNode_prototype.walkAsync = function (f, callback) {
          var _once, _this;
          _this = this;
          return f(this.ident, (_once = false, function (_e, ident) {
            if (_once) {
              throw Error("Attempted to call function more than once");
            } else {
              _once = true;
            }
            if (_e != null) {
              return callback(_e);
            }
            return (_this.asType instanceof Node
              ? function (next) {
                var _once2;
                return f(_this.asType, (_once2 = false, function (_e2, asType) {
                  if (_once2) {
                    throw Error("Attempted to call function more than once");
                  } else {
                    _once2 = true;
                  }
                  if (_e2 != null) {
                    return callback(_e2);
                  }
                  return next(asType);
                }));
              }
              : function (next) {
                return next(_this.asType);
              })(function (asType) {
              return callback(null, ident !== _this.ident || asType !== _this.asType ? SyntaxParamNode(_this.index, _this.scope, ident, asType) : _this);
            });
          }));
        };
        return SyntaxParamNode;
      }(Node));
      Node.SyntaxSequence = SyntaxSequenceNode = (function (Node) {
        var _Node_prototype, _SyntaxSequenceNode_prototype;
        function SyntaxSequenceNode(index, scope, params) {
          var _i, _this;
          _this = this instanceof SyntaxSequenceNode ? this : __create(_SyntaxSequenceNode_prototype);
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          if (!__isArray(params)) {
            throw TypeError("Expected params to be an Array, got " + __typeof(params));
          } else {
            for (_i = params.length; _i--; ) {
              if (!(params[_i] instanceof Node)) {
                throw TypeError("Expected " + ("params[" + _i + "]") + " to be a " + __name(Node) + ", got " + __typeof(params[_i]));
              }
            }
          }
          _this.index = index;
          _this.scope = scope;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.params = params;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _SyntaxSequenceNode_prototype = SyntaxSequenceNode.prototype = __create(_Node_prototype);
        _SyntaxSequenceNode_prototype.constructor = SyntaxSequenceNode;
        SyntaxSequenceNode.displayName = "SyntaxSequenceNode";
        if (typeof Node.extended === "function") {
          Node.extended(SyntaxSequenceNode);
        }
        SyntaxSequenceNode.cappedName = "SyntaxSequence";
        SyntaxSequenceNode.argNames = ["params"];
        _SyntaxSequenceNode_prototype.inspect = function (depth) {
          return inspectHelper(depth, "SyntaxSequenceNode", this.index, this.params);
        };
        _SyntaxSequenceNode_prototype.walk = function (f) {
          var params;
          params = map(this.params, f);
          if (params !== this.params) {
            return SyntaxSequenceNode(this.index, this.scope, params);
          } else {
            return this;
          }
        };
        _SyntaxSequenceNode_prototype.walkAsync = function (f, callback) {
          var _once, _this;
          _this = this;
          return mapAsync(this.params, f, (_once = false, function (_e, params) {
            if (_once) {
              throw Error("Attempted to call function more than once");
            } else {
              _once = true;
            }
            if (_e != null) {
              return callback(_e);
            }
            return callback(null, params !== _this.params ? SyntaxSequenceNode(_this.index, _this.scope, params) : _this);
          }));
        };
        return SyntaxSequenceNode;
      }(Node));
      Node.This = ThisNode = (function (Node) {
        var _Node_prototype, _ThisNode_prototype;
        function ThisNode(index, scope) {
          var _this;
          _this = this instanceof ThisNode ? this : __create(_ThisNode_prototype);
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          _this.index = index;
          _this.scope = scope;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _ThisNode_prototype = ThisNode.prototype = __create(_Node_prototype);
        _ThisNode_prototype.constructor = ThisNode;
        ThisNode.displayName = "ThisNode";
        if (typeof Node.extended === "function") {
          Node.extended(ThisNode);
        }
        ThisNode.cappedName = "This";
        ThisNode.argNames = [];
        _ThisNode_prototype.cacheable = false;
        _ThisNode_prototype._isNoop = function () {
          return true;
        };
        _ThisNode_prototype.inspect = function (depth) {
          return inspectHelper(depth, "ThisNode", this.index);
        };
        return ThisNode;
      }(Node));
      Node.Throw = ThrowNode = (function (Node) {
        var _Node_prototype, _ThrowNode_prototype;
        function ThrowNode(index, scope, node) {
          var _this;
          _this = this instanceof ThrowNode ? this : __create(_ThrowNode_prototype);
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          if (!(node instanceof Node)) {
            throw TypeError("Expected node to be a " + __name(Node) + ", got " + __typeof(node));
          }
          _this.index = index;
          _this.scope = scope;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.node = node;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _ThrowNode_prototype = ThrowNode.prototype = __create(_Node_prototype);
        _ThrowNode_prototype.constructor = ThrowNode;
        ThrowNode.displayName = "ThrowNode";
        if (typeof Node.extended === "function") {
          Node.extended(ThrowNode);
        }
        ThrowNode.cappedName = "Throw";
        ThrowNode.argNames = ["node"];
        _ThrowNode_prototype.type = function () {
          return Type.none;
        };
        _ThrowNode_prototype.isStatement = function () {
          return true;
        };
        _ThrowNode_prototype._reduce = function (o) {
          var node;
          node = this.node.reduce(o).doWrap(o);
          if (node !== this.node) {
            return ThrowNode(this.index, this.scope, node);
          } else {
            return this;
          }
        };
        _ThrowNode_prototype.doWrap = function (o) {
          return CallNode(
            this.index,
            this.scope,
            IdentNode(this.index, this.scope, "__throw"),
            [this.node]
          );
        };
        _ThrowNode_prototype.inspect = function (depth) {
          return inspectHelper(depth, "ThrowNode", this.index, this.node);
        };
        _ThrowNode_prototype.walk = function (f) {
          var node;
          node = f(this.node);
          if (node !== this.node) {
            return ThrowNode(this.index, this.scope, node);
          } else {
            return this;
          }
        };
        _ThrowNode_prototype.walkAsync = function (f, callback) {
          var _once, _this;
          _this = this;
          return f(this.node, (_once = false, function (_e, node) {
            if (_once) {
              throw Error("Attempted to call function more than once");
            } else {
              _once = true;
            }
            if (_e != null) {
              return callback(_e);
            }
            return callback(null, node !== _this.node ? ThrowNode(_this.index, _this.scope, node) : _this);
          }));
        };
        return ThrowNode;
      }(Node));
      Node.Tmp = TmpNode = (function (Node) {
        var _Node_prototype, _TmpNode_prototype;
        function TmpNode(index, scope, id, name, _type) {
          var _this;
          _this = this instanceof TmpNode ? this : __create(_TmpNode_prototype);
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          if (typeof id !== "number") {
            throw TypeError("Expected id to be a Number, got " + __typeof(id));
          }
          if (typeof name !== "string") {
            throw TypeError("Expected name to be a String, got " + __typeof(name));
          }
          if (_type == null) {
            _type = Type.any;
          } else if (!(_type instanceof Type)) {
            throw TypeError("Expected _type to be a " + __name(Type) + ", got " + __typeof(_type));
          }
          _this.index = index;
          _this.scope = scope;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.id = id;
          _this.name = name;
          _this._type = _type;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _TmpNode_prototype = TmpNode.prototype = __create(_Node_prototype);
        _TmpNode_prototype.constructor = TmpNode;
        TmpNode.displayName = "TmpNode";
        if (typeof Node.extended === "function") {
          Node.extended(TmpNode);
        }
        TmpNode.cappedName = "Tmp";
        TmpNode.argNames = ["id", "name", "_type"];
        _TmpNode_prototype.cacheable = false;
        _TmpNode_prototype.type = function () {
          return this._type;
        };
        _TmpNode_prototype._isNoop = function () {
          return true;
        };
        _TmpNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "TmpNode",
            this.index,
            this.id,
            this.name,
            this._type
          );
        };
        _TmpNode_prototype.walk = function (f) {
          return this;
        };
        _TmpNode_prototype.walkAsync = function (f, callback) {
          return callback(null, this);
        };
        return TmpNode;
      }(Node));
      Node.TmpWrapper = TmpWrapperNode = (function (Node) {
        var _Node_prototype, _TmpWrapperNode_prototype;
        function TmpWrapperNode(index, scope, node, tmps) {
          var _this;
          _this = this instanceof TmpWrapperNode ? this : __create(_TmpWrapperNode_prototype);
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          if (!(node instanceof Node)) {
            throw TypeError("Expected node to be a " + __name(Node) + ", got " + __typeof(node));
          }
          if (!__isArray(tmps)) {
            throw TypeError("Expected tmps to be an Array, got " + __typeof(tmps));
          }
          _this.index = index;
          _this.scope = scope;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.node = node;
          _this.tmps = tmps;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _TmpWrapperNode_prototype = TmpWrapperNode.prototype = __create(_Node_prototype);
        _TmpWrapperNode_prototype.constructor = TmpWrapperNode;
        TmpWrapperNode.displayName = "TmpWrapperNode";
        if (typeof Node.extended === "function") {
          Node.extended(TmpWrapperNode);
        }
        TmpWrapperNode.cappedName = "TmpWrapper";
        TmpWrapperNode.argNames = ["node", "tmps"];
        _TmpWrapperNode_prototype.type = function (o) {
          return this.node.type(o);
        };
        _TmpWrapperNode_prototype.withLabel = function (label, o) {
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          return TmpWrapperNode(
            this.index,
            this.scope,
            this.node.withLabel(label, o),
            this.tmps
          );
        };
        _TmpWrapperNode_prototype._reduce = function (o) {
          var node;
          node = this.node.reduce(o);
          if (this.tmps.length === 0) {
            return node;
          } else if (this.node !== node) {
            return TmpWrapperNode(this.index, this.scope, node, this.tmps);
          } else {
            return this;
          }
        };
        _TmpWrapperNode_prototype.isStatement = function () {
          return this.node.isStatement();
        };
        _TmpWrapperNode_prototype._isNoop = function (o) {
          return this.node.isNoop(o);
        };
        _TmpWrapperNode_prototype.doWrap = function (o) {
          var node;
          node = this.node.doWrap(o);
          if (node !== this.node) {
            return TmpWrapperNode(this.index, this.scope, node, this.tmps);
          } else {
            return this;
          }
        };
        _TmpWrapperNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "TmpWrapperNode",
            this.index,
            this.node,
            this.tmps
          );
        };
        _TmpWrapperNode_prototype.walk = function (f) {
          var node;
          node = f(this.node);
          if (node !== this.node) {
            return TmpWrapperNode(this.index, this.scope, node, this.tmps);
          } else {
            return this;
          }
        };
        _TmpWrapperNode_prototype.walkAsync = function (f, callback) {
          var _once, _this;
          _this = this;
          return f(this.node, (_once = false, function (_e, node) {
            if (_once) {
              throw Error("Attempted to call function more than once");
            } else {
              _once = true;
            }
            if (_e != null) {
              return callback(_e);
            }
            return callback(null, node !== _this.node ? TmpWrapperNode(_this.index, _this.scope, node, _this.tmps) : _this);
          }));
        };
        return TmpWrapperNode;
      }(Node));
      Node.TryCatch = TryCatchNode = (function (Node) {
        var _Node_prototype, _TryCatchNode_prototype;
        function TryCatchNode(index, scope, tryBody, catchIdent, catchBody, label) {
          var _this;
          _this = this instanceof TryCatchNode ? this : __create(_TryCatchNode_prototype);
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          if (!(tryBody instanceof Node)) {
            throw TypeError("Expected tryBody to be a " + __name(Node) + ", got " + __typeof(tryBody));
          }
          if (!(catchIdent instanceof Node)) {
            throw TypeError("Expected catchIdent to be a " + __name(Node) + ", got " + __typeof(catchIdent));
          }
          if (!(catchBody instanceof Node)) {
            throw TypeError("Expected catchBody to be a " + __name(Node) + ", got " + __typeof(catchBody));
          }
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          _this.index = index;
          _this.scope = scope;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.tryBody = tryBody;
          _this.catchIdent = catchIdent;
          _this.catchBody = catchBody;
          _this.label = label;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _TryCatchNode_prototype = TryCatchNode.prototype = __create(_Node_prototype);
        _TryCatchNode_prototype.constructor = TryCatchNode;
        TryCatchNode.displayName = "TryCatchNode";
        if (typeof Node.extended === "function") {
          Node.extended(TryCatchNode);
        }
        TryCatchNode.cappedName = "TryCatch";
        TryCatchNode.argNames = ["tryBody", "catchIdent", "catchBody", "label"];
        _TryCatchNode_prototype.type = function (o) {
          var _ref;
          if ((_ref = this._type) == null) {
            return this._type = this.tryBody.type(o).union(this.catchBody.type(o));
          } else {
            return _ref;
          }
        };
        _TryCatchNode_prototype.isStatement = function () {
          return true;
        };
        _TryCatchNode_prototype._isNoop = function (o) {
          return this.tryBody.isNoop(o);
        };
        _TryCatchNode_prototype.withLabel = function (label) {
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          return TryCatchNode(
            this.index,
            this.scope,
            this.tryBody,
            this.catchIdent,
            this.catchBody,
            label
          );
        };
        _TryCatchNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "TryCatchNode",
            this.index,
            this.tryBody,
            this.catchIdent,
            this.catchBody,
            this.label
          );
        };
        _TryCatchNode_prototype.walk = function (f) {
          var catchBody, catchIdent, label, tryBody;
          tryBody = f(this.tryBody);
          catchIdent = f(this.catchIdent);
          catchBody = f(this.catchBody);
          if (this.label instanceof Node) {
            label = f(this.label);
          } else {
            label = this.label;
          }
          if (tryBody !== this.tryBody || catchIdent !== this.catchIdent || catchBody !== this.catchBody || label !== this.label) {
            return TryCatchNode(
              this.index,
              this.scope,
              tryBody,
              catchIdent,
              catchBody,
              label
            );
          } else {
            return this;
          }
        };
        _TryCatchNode_prototype.walkAsync = function (f, callback) {
          var _once, _this;
          _this = this;
          return f(this.tryBody, (_once = false, function (_e, tryBody) {
            var _once2;
            if (_once) {
              throw Error("Attempted to call function more than once");
            } else {
              _once = true;
            }
            if (_e != null) {
              return callback(_e);
            }
            return f(_this.catchIdent, (_once2 = false, function (_e2, catchIdent) {
              var _once3;
              if (_once2) {
                throw Error("Attempted to call function more than once");
              } else {
                _once2 = true;
              }
              if (_e2 != null) {
                return callback(_e2);
              }
              return f(_this.catchBody, (_once3 = false, function (_e3, catchBody) {
                if (_once3) {
                  throw Error("Attempted to call function more than once");
                } else {
                  _once3 = true;
                }
                if (_e3 != null) {
                  return callback(_e3);
                }
                return (_this.label instanceof Node
                  ? function (next) {
                    var _once4;
                    return f(_this.label, (_once4 = false, function (_e4, label) {
                      if (_once4) {
                        throw Error("Attempted to call function more than once");
                      } else {
                        _once4 = true;
                      }
                      if (_e4 != null) {
                        return callback(_e4);
                      }
                      return next(label);
                    }));
                  }
                  : function (next) {
                    return next(_this.label);
                  })(function (label) {
                  return callback(null, tryBody !== _this.tryBody || catchIdent !== _this.catchIdent || catchBody !== _this.catchBody || label !== _this.label
                    ? TryCatchNode(
                      _this.index,
                      _this.scope,
                      tryBody,
                      catchIdent,
                      catchBody,
                      label
                    )
                    : _this);
                });
              }));
            }));
          }));
        };
        return TryCatchNode;
      }(Node));
      Node.TryFinally = TryFinallyNode = (function (Node) {
        var _Node_prototype, _TryFinallyNode_prototype;
        function TryFinallyNode(index, scope, tryBody, finallyBody, label) {
          var _this;
          _this = this instanceof TryFinallyNode ? this : __create(_TryFinallyNode_prototype);
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          if (!(tryBody instanceof Node)) {
            throw TypeError("Expected tryBody to be a " + __name(Node) + ", got " + __typeof(tryBody));
          }
          if (!(finallyBody instanceof Node)) {
            throw TypeError("Expected finallyBody to be a " + __name(Node) + ", got " + __typeof(finallyBody));
          }
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          _this.index = index;
          _this.scope = scope;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.tryBody = tryBody;
          _this.finallyBody = finallyBody;
          _this.label = label;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _TryFinallyNode_prototype = TryFinallyNode.prototype = __create(_Node_prototype);
        _TryFinallyNode_prototype.constructor = TryFinallyNode;
        TryFinallyNode.displayName = "TryFinallyNode";
        if (typeof Node.extended === "function") {
          Node.extended(TryFinallyNode);
        }
        TryFinallyNode.cappedName = "TryFinally";
        TryFinallyNode.argNames = ["tryBody", "finallyBody", "label"];
        _TryFinallyNode_prototype.type = function (o) {
          return this.tryBody.type(o);
        };
        _TryFinallyNode_prototype._reduce = function (o) {
          var finallyBody, label, tryBody;
          tryBody = this.tryBody.reduce(o);
          finallyBody = this.finallyBody.reduce(o);
          if (this.label != null) {
            label = this.label.reduce(o);
          } else {
            label = this.label;
          }
          if (finallyBody instanceof NothingNode) {
            return BlockNode(this.index, this.scopeIf([tryBody], label)).reduce(o);
          } else if (tryBody instanceof NothingNode) {
            return BlockNode(this.index, this.scopeIf([finallyBody], label)).reduce(o);
          } else if (tryBody !== this.tryBody || finallyBody !== this.finallyBody || label !== this.label) {
            return TryFinallyNode(
              this.index,
              this.scope,
              tryBody,
              finallyBody,
              label
            );
          } else {
            return this;
          }
        };
        _TryFinallyNode_prototype.isStatement = function () {
          return true;
        };
        _TryFinallyNode_prototype._isNoop = function (o) {
          var _ref;
          if ((_ref = this.__isNoop) == null) {
            return this.__isNoop = this.tryBody.isNoop(o) && this.finallyBody.isNoop();
          } else {
            return _ref;
          }
        };
        _TryFinallyNode_prototype.withLabel = function (label) {
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          return TryFinallyNode(
            this.index,
            this.scope,
            this.tryBody,
            this.finallyBody,
            label
          );
        };
        _TryFinallyNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "TryFinallyNode",
            this.index,
            this.tryBody,
            this.finallyBody,
            this.label
          );
        };
        _TryFinallyNode_prototype.walk = function (f) {
          var finallyBody, label, tryBody;
          tryBody = f(this.tryBody);
          finallyBody = f(this.finallyBody);
          if (this.label instanceof Node) {
            label = f(this.label);
          } else {
            label = this.label;
          }
          if (tryBody !== this.tryBody || finallyBody !== this.finallyBody || label !== this.label) {
            return TryFinallyNode(
              this.index,
              this.scope,
              tryBody,
              finallyBody,
              label
            );
          } else {
            return this;
          }
        };
        _TryFinallyNode_prototype.walkAsync = function (f, callback) {
          var _once, _this;
          _this = this;
          return f(this.tryBody, (_once = false, function (_e, tryBody) {
            var _once2;
            if (_once) {
              throw Error("Attempted to call function more than once");
            } else {
              _once = true;
            }
            if (_e != null) {
              return callback(_e);
            }
            return f(_this.finallyBody, (_once2 = false, function (_e2, finallyBody) {
              if (_once2) {
                throw Error("Attempted to call function more than once");
              } else {
                _once2 = true;
              }
              if (_e2 != null) {
                return callback(_e2);
              }
              return (_this.label instanceof Node
                ? function (next) {
                  var _once3;
                  return f(_this.label, (_once3 = false, function (_e3, label) {
                    if (_once3) {
                      throw Error("Attempted to call function more than once");
                    } else {
                      _once3 = true;
                    }
                    if (_e3 != null) {
                      return callback(_e3);
                    }
                    return next(label);
                  }));
                }
                : function (next) {
                  return next(_this.label);
                })(function (label) {
                return callback(null, tryBody !== _this.tryBody || finallyBody !== _this.finallyBody || label !== _this.label
                  ? TryFinallyNode(
                    _this.index,
                    _this.scope,
                    tryBody,
                    finallyBody,
                    label
                  )
                  : _this);
              });
            }));
          }));
        };
        return TryFinallyNode;
      }(Node));
      Node.TypeFunction = TypeFunctionNode = (function (Node) {
        var _Node_prototype, _TypeFunctionNode_prototype;
        function TypeFunctionNode(index, scope, returnType) {
          var _this;
          _this = this instanceof TypeFunctionNode ? this : __create(_TypeFunctionNode_prototype);
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          if (!(returnType instanceof Node)) {
            throw TypeError("Expected returnType to be a " + __name(Node) + ", got " + __typeof(returnType));
          }
          _this.index = index;
          _this.scope = scope;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.returnType = returnType;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _TypeFunctionNode_prototype = TypeFunctionNode.prototype = __create(_Node_prototype);
        _TypeFunctionNode_prototype.constructor = TypeFunctionNode;
        TypeFunctionNode.displayName = "TypeFunctionNode";
        if (typeof Node.extended === "function") {
          Node.extended(TypeFunctionNode);
        }
        TypeFunctionNode.cappedName = "TypeFunction";
        TypeFunctionNode.argNames = ["returnType"];
        _TypeFunctionNode_prototype.inspect = function (depth) {
          return inspectHelper(depth, "TypeFunctionNode", this.index, this.returnType);
        };
        _TypeFunctionNode_prototype.walk = function (f) {
          var returnType;
          returnType = f(this.returnType);
          if (returnType !== this.returnType) {
            return TypeFunctionNode(this.index, this.scope, returnType);
          } else {
            return this;
          }
        };
        _TypeFunctionNode_prototype.walkAsync = function (f, callback) {
          var _once, _this;
          _this = this;
          return f(this.returnType, (_once = false, function (_e, returnType) {
            if (_once) {
              throw Error("Attempted to call function more than once");
            } else {
              _once = true;
            }
            if (_e != null) {
              return callback(_e);
            }
            return callback(null, returnType !== _this.returnType ? TypeFunctionNode(_this.index, _this.scope, returnType) : _this);
          }));
        };
        return TypeFunctionNode;
      }(Node));
      Node.TypeGeneric = TypeGenericNode = (function (Node) {
        var _Node_prototype, _TypeGenericNode_prototype;
        function TypeGenericNode(index, scope, basetype, args) {
          var _i, _this;
          _this = this instanceof TypeGenericNode ? this : __create(_TypeGenericNode_prototype);
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          if (!(basetype instanceof Node)) {
            throw TypeError("Expected basetype to be a " + __name(Node) + ", got " + __typeof(basetype));
          }
          if (!__isArray(args)) {
            throw TypeError("Expected args to be an Array, got " + __typeof(args));
          } else {
            for (_i = args.length; _i--; ) {
              if (!(args[_i] instanceof Node)) {
                throw TypeError("Expected " + ("args[" + _i + "]") + " to be a " + __name(Node) + ", got " + __typeof(args[_i]));
              }
            }
          }
          _this.index = index;
          _this.scope = scope;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.basetype = basetype;
          _this.args = args;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _TypeGenericNode_prototype = TypeGenericNode.prototype = __create(_Node_prototype);
        _TypeGenericNode_prototype.constructor = TypeGenericNode;
        TypeGenericNode.displayName = "TypeGenericNode";
        if (typeof Node.extended === "function") {
          Node.extended(TypeGenericNode);
        }
        TypeGenericNode.cappedName = "TypeGeneric";
        TypeGenericNode.argNames = ["basetype", "args"];
        _TypeGenericNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "TypeGenericNode",
            this.index,
            this.basetype,
            this.args
          );
        };
        _TypeGenericNode_prototype.walk = function (f) {
          var args, basetype;
          basetype = f(this.basetype);
          args = map(this.args, f);
          if (basetype !== this.basetype || args !== this.args) {
            return TypeGenericNode(this.index, this.scope, basetype, args);
          } else {
            return this;
          }
        };
        _TypeGenericNode_prototype.walkAsync = function (f, callback) {
          var _once, _this;
          _this = this;
          return f(this.basetype, (_once = false, function (_e, basetype) {
            var _once2;
            if (_once) {
              throw Error("Attempted to call function more than once");
            } else {
              _once = true;
            }
            if (_e != null) {
              return callback(_e);
            }
            return mapAsync(_this.args, f, (_once2 = false, function (_e2, args) {
              if (_once2) {
                throw Error("Attempted to call function more than once");
              } else {
                _once2 = true;
              }
              if (_e2 != null) {
                return callback(_e2);
              }
              return callback(null, basetype !== _this.basetype || args !== _this.args ? TypeGenericNode(_this.index, _this.scope, basetype, args) : _this);
            }));
          }));
        };
        return TypeGenericNode;
      }(Node));
      Node.TypeObject = TypeObjectNode = (function (Node) {
        var _Node_prototype, _TypeObjectNode_prototype;
        function TypeObjectNode(index, scope, pairs) {
          var _this;
          _this = this instanceof TypeObjectNode ? this : __create(_TypeObjectNode_prototype);
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          if (!__isArray(pairs)) {
            throw TypeError("Expected pairs to be an Array, got " + __typeof(pairs));
          }
          _this.index = index;
          _this.scope = scope;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.pairs = pairs;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _TypeObjectNode_prototype = TypeObjectNode.prototype = __create(_Node_prototype);
        _TypeObjectNode_prototype.constructor = TypeObjectNode;
        TypeObjectNode.displayName = "TypeObjectNode";
        if (typeof Node.extended === "function") {
          Node.extended(TypeObjectNode);
        }
        TypeObjectNode.cappedName = "TypeObject";
        TypeObjectNode.argNames = ["pairs"];
        function reducePair(pair, o) {
          var key, value;
          key = pair.key.reduce(o);
          value = pair.value.reduce(o);
          if (key !== pair.key || value !== pair.value) {
            return { key: key, value: value };
          } else {
            return pair;
          }
        }
        _TypeObjectNode_prototype._reduce = function (o) {
          var pairs;
          pairs = map(this.pairs, reducePair, o);
          if (pairs !== this.pairs) {
            return TypeObjectNode(this.index, this.scope, pairs);
          } else {
            return this;
          }
        };
        _TypeObjectNode_prototype.inspect = function (depth) {
          return inspectHelper(depth, "TypeObjectNode", this.index, this.pairs);
        };
        _TypeObjectNode_prototype.walk = function (f) {
          return this;
        };
        _TypeObjectNode_prototype.walkAsync = function (f, callback) {
          return callback(null, this);
        };
        return TypeObjectNode;
      }(Node));
      Node.TypeUnion = TypeUnionNode = (function (Node) {
        var _Node_prototype, _TypeUnionNode_prototype;
        function TypeUnionNode(index, scope, types) {
          var _i, _this;
          _this = this instanceof TypeUnionNode ? this : __create(_TypeUnionNode_prototype);
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          if (!__isArray(types)) {
            throw TypeError("Expected types to be an Array, got " + __typeof(types));
          } else {
            for (_i = types.length; _i--; ) {
              if (!(types[_i] instanceof Node)) {
                throw TypeError("Expected " + ("types[" + _i + "]") + " to be a " + __name(Node) + ", got " + __typeof(types[_i]));
              }
            }
          }
          _this.index = index;
          _this.scope = scope;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.types = types;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _TypeUnionNode_prototype = TypeUnionNode.prototype = __create(_Node_prototype);
        _TypeUnionNode_prototype.constructor = TypeUnionNode;
        TypeUnionNode.displayName = "TypeUnionNode";
        if (typeof Node.extended === "function") {
          Node.extended(TypeUnionNode);
        }
        TypeUnionNode.cappedName = "TypeUnion";
        TypeUnionNode.argNames = ["types"];
        _TypeUnionNode_prototype.inspect = function (depth) {
          return inspectHelper(depth, "TypeUnionNode", this.index, this.types);
        };
        _TypeUnionNode_prototype.walk = function (f) {
          var types;
          types = map(this.types, f);
          if (types !== this.types) {
            return TypeUnionNode(this.index, this.scope, types);
          } else {
            return this;
          }
        };
        _TypeUnionNode_prototype.walkAsync = function (f, callback) {
          var _once, _this;
          _this = this;
          return mapAsync(this.types, f, (_once = false, function (_e, types) {
            if (_once) {
              throw Error("Attempted to call function more than once");
            } else {
              _once = true;
            }
            if (_e != null) {
              return callback(_e);
            }
            return callback(null, types !== _this.types ? TypeUnionNode(_this.index, _this.scope, types) : _this);
          }));
        };
        return TypeUnionNode;
      }(Node));
      Node.Unary = UnaryNode = (function (Node) {
        var _Node_prototype, _UnaryNode_prototype;
        function UnaryNode(index, scope, op, node) {
          var _this;
          _this = this instanceof UnaryNode ? this : __create(_UnaryNode_prototype);
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          if (typeof op !== "string") {
            throw TypeError("Expected op to be a String, got " + __typeof(op));
          }
          if (!(node instanceof Node)) {
            throw TypeError("Expected node to be a " + __name(Node) + ", got " + __typeof(node));
          }
          _this.index = index;
          _this.scope = scope;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.op = op;
          _this.node = node;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _UnaryNode_prototype = UnaryNode.prototype = __create(_Node_prototype);
        _UnaryNode_prototype.constructor = UnaryNode;
        UnaryNode.displayName = "UnaryNode";
        if (typeof Node.extended === "function") {
          Node.extended(UnaryNode);
        }
        UnaryNode.cappedName = "Unary";
        UnaryNode.argNames = ["op", "node"];
        _UnaryNode_prototype.type = (function () {
          var ops;
          ops = {
            "-": Type.number,
            "+": Type.number,
            "--": Type.number,
            "++": Type.number,
            "--post": Type.number,
            "++post": Type.number,
            "!": Type.boolean,
            "~": Type.number,
            "typeof": Type.string,
            "delete": Type.boolean
          };
          return function () {
            var _ref;
            return (__owns.call(ops, _ref = this.op) ? ops[_ref] : void 0) || Type.any;
          };
        }());
        _UnaryNode_prototype._reduce = (function () {
          var constOps, nonconstOps;
          constOps = {
            "-": function (x) {
              return -x;
            },
            "+": function (x) {
              return +x;
            },
            "!": function (x) {
              return !x;
            },
            "~": function (x) {
              return ~x;
            },
            "typeof": function (x) {
              return typeof x;
            }
          };
          nonconstOps = {
            "+": function (node, o) {
              if (node.type(o).isSubsetOf(Type.number)) {
                return node;
              }
            },
            "-": function (node) {
              var _ref;
              if (node instanceof UnaryNode) {
                if ((_ref = node.op) === "-" || _ref === "+") {
                  return UnaryNode(
                    this.index,
                    this.scope,
                    node.op === "-" ? "+" : "-",
                    node.node
                  );
                }
              } else if (node instanceof BinaryNode) {
                if ((_ref = node.op) === "-" || _ref === "+") {
                  return BinaryNode(
                    this.index,
                    this.scope,
                    node.left,
                    node.op === "-" ? "+" : "-",
                    node.right
                  );
                } else if ((_ref = node.op) === "*" || _ref === "/") {
                  return BinaryNode(
                    this.index,
                    this.scope,
                    UnaryNode(node.left.index, node.left.scope, "-", node.left),
                    node.op,
                    node.right
                  );
                }
              }
            },
            "!": (function () {
              var invertibleBinaryOps;
              invertibleBinaryOps = {
                "<": ">=",
                "<=": ">",
                ">": "<=",
                ">=": "<",
                "==": "!=",
                "!=": "==",
                "===": "!==",
                "!==": "===",
                "&&": function (x, y) {
                  return BinaryNode(
                    this.index,
                    this.scope,
                    UnaryNode(x.index, x.scope, "!", x),
                    "||",
                    UnaryNode(y.index, y.scope, "!", y)
                  );
                },
                "||": function (x, y) {
                  return BinaryNode(
                    this.index,
                    this.scope,
                    UnaryNode(x.index, x.scope, "!", x),
                    "&&",
                    UnaryNode(y.index, y.scope, "!", y)
                  );
                }
              };
              return function (node, o) {
                var invert;
                if (node instanceof UnaryNode) {
                  if (node.op === "!" && node.node.type(o).isSubsetOf(Type.boolean)) {
                    return node.node;
                  }
                } else if (node instanceof BinaryNode && __owns.call(invertibleBinaryOps, node.op)) {
                  invert = invertibleBinaryOps[node.op];
                  if (typeof invert === "function") {
                    return invert.call(this, node.left, node.right);
                  } else {
                    return BinaryNode(
                      this.index,
                      this.scope,
                      node.left,
                      invert,
                      node.right
                    );
                  }
                }
              };
            }()),
            "typeof": (function () {
              var objectType;
              objectType = Type["null"].union(Type.object).union(Type.arrayLike).union(Type.regexp).union(Type.date).union(Type.error);
              return function (node, o) {
                var type;
                if (node.isNoop(o)) {
                  type = node.type(o);
                  if (type.isSubsetOf(Type.number)) {
                    return ConstNode(this.index, this.scope, "number");
                  } else if (type.isSubsetOf(Type.string)) {
                    return ConstNode(this.index, this.scope, "string");
                  } else if (type.isSubsetOf(Type.boolean)) {
                    return ConstNode(this.index, this.scope, "boolean");
                  } else if (type.isSubsetOf(Type["undefined"])) {
                    return ConstNode(this.index, this.scope, "undefined");
                  } else if (type.isSubsetOf(Type["function"])) {
                    return ConstNode(this.index, this.scope, "function");
                  } else if (type.isSubsetOf(objectType)) {
                    return ConstNode(this.index, this.scope, "object");
                  }
                }
              };
            }())
          };
          return function (o) {
            var node, op, result;
            node = this.node.reduce(o).doWrap(o);
            op = this.op;
            if (node.isConst() && __owns.call(constOps, op)) {
              return ConstNode(this.index, this.scope, constOps[op](node.constValue()));
            }
            if (__owns.call(nonconstOps, op)) {
              result = nonconstOps[op].call(this, node, o);
            }
            if (result != null) {
              return result.reduce(o);
            }
            if (node !== this.node) {
              return UnaryNode(this.index, this.scope, op, node);
            } else {
              return this;
            }
          };
        }());
        _UnaryNode_prototype._isNoop = function (o) {
          var _ref, _ref2;
          if ((_ref = this.__isNoop) == null) {
            return this.__isNoop = (_ref2 = this.op) !== "++" && _ref2 !== "--" && _ref2 !== "++post" && _ref2 !== "--post" && _ref2 !== "delete" && this.node.isNoop(o);
          } else {
            return _ref;
          }
        };
        _UnaryNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "UnaryNode",
            this.index,
            this.op,
            this.node
          );
        };
        _UnaryNode_prototype.walk = function (f) {
          var node;
          node = f(this.node);
          if (node !== this.node) {
            return UnaryNode(this.index, this.scope, this.op, node);
          } else {
            return this;
          }
        };
        _UnaryNode_prototype.walkAsync = function (f, callback) {
          var _once, _this;
          _this = this;
          return f(this.node, (_once = false, function (_e, node) {
            if (_once) {
              throw Error("Attempted to call function more than once");
            } else {
              _once = true;
            }
            if (_e != null) {
              return callback(_e);
            }
            return callback(null, node !== _this.node ? UnaryNode(_this.index, _this.scope, _this.op, node) : _this);
          }));
        };
        return UnaryNode;
      }(Node));
      Node.Var = VarNode = (function (Node) {
        var _Node_prototype, _VarNode_prototype;
        function VarNode(index, scope, ident, isMutable) {
          var _this;
          _this = this instanceof VarNode ? this : __create(_VarNode_prototype);
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          if (!(ident instanceof IdentNode) && !(ident instanceof TmpNode)) {
            throw TypeError("Expected ident to be one of " + (__name(IdentNode) + " or " + __name(TmpNode)) + ", got " + __typeof(ident));
          }
          if (isMutable == null) {
            isMutable = false;
          } else if (typeof isMutable !== "boolean") {
            throw TypeError("Expected isMutable to be a Boolean, got " + __typeof(isMutable));
          }
          _this.index = index;
          _this.scope = scope;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.ident = ident;
          _this.isMutable = isMutable;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _VarNode_prototype = VarNode.prototype = __create(_Node_prototype);
        _VarNode_prototype.constructor = VarNode;
        VarNode.displayName = "VarNode";
        if (typeof Node.extended === "function") {
          Node.extended(VarNode);
        }
        VarNode.cappedName = "Var";
        VarNode.argNames = ["ident", "isMutable"];
        _VarNode_prototype.type = function () {
          return Type["undefined"];
        };
        _VarNode_prototype._reduce = function (o) {
          var ident;
          ident = this.ident.reduce(o);
          if (ident !== this.ident) {
            return VarNode(this.index, this.scope, ident, this.isMutable);
          } else {
            return this;
          }
        };
        _VarNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "VarNode",
            this.index,
            this.ident,
            this.isMutable
          );
        };
        _VarNode_prototype.walk = function (f) {
          var ident;
          ident = f(this.ident);
          if (ident !== this.ident) {
            return VarNode(this.index, this.scope, ident, this.isMutable);
          } else {
            return this;
          }
        };
        _VarNode_prototype.walkAsync = function (f, callback) {
          var _once, _this;
          _this = this;
          return f(this.ident, (_once = false, function (_e, ident) {
            if (_once) {
              throw Error("Attempted to call function more than once");
            } else {
              _once = true;
            }
            if (_e != null) {
              return callback(_e);
            }
            return callback(null, ident !== _this.ident ? VarNode(_this.index, _this.scope, ident, _this.isMutable) : _this);
          }));
        };
        return VarNode;
      }(Node));
      Node.Yield = YieldNode = (function (Node) {
        var _Node_prototype, _YieldNode_prototype;
        function YieldNode(index, scope, node) {
          var _this;
          _this = this instanceof YieldNode ? this : __create(_YieldNode_prototype);
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          if (!(node instanceof Node)) {
            throw TypeError("Expected node to be a " + __name(Node) + ", got " + __typeof(node));
          }
          _this.index = index;
          _this.scope = scope;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.node = node;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _YieldNode_prototype = YieldNode.prototype = __create(_Node_prototype);
        _YieldNode_prototype.constructor = YieldNode;
        YieldNode.displayName = "YieldNode";
        if (typeof Node.extended === "function") {
          Node.extended(YieldNode);
        }
        YieldNode.cappedName = "Yield";
        YieldNode.argNames = ["node"];
        _YieldNode_prototype.type = function () {
          return Type.any;
        };
        _YieldNode_prototype._reduce = function (o) {
          var node;
          node = this.node.reduce(o).doWrap(o);
          if (node !== this.node) {
            return YieldNode(this.index, this.scope, node);
          } else {
            return this;
          }
        };
        _YieldNode_prototype.inspect = function (depth) {
          return inspectHelper(depth, "YieldNode", this.index, this.node);
        };
        _YieldNode_prototype.walk = function (f) {
          var node;
          node = f(this.node);
          if (node !== this.node) {
            return YieldNode(this.index, this.scope, node);
          } else {
            return this;
          }
        };
        _YieldNode_prototype.walkAsync = function (f, callback) {
          var _once, _this;
          _this = this;
          return f(this.node, (_once = false, function (_e, node) {
            if (_once) {
              throw Error("Attempted to call function more than once");
            } else {
              _once = true;
            }
            if (_e != null) {
              return callback(_e);
            }
            return callback(null, node !== _this.node ? YieldNode(_this.index, _this.scope, node) : _this);
          }));
        };
        return YieldNode;
      }(Node));
      module.exports = Node;
    }.call(this, typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : this));
    
    return module.exports;
  };
  require['./parser-macroholder'] = function () {
    var module = { exports: this };
    var exports = this;
    (function () {
      "use strict";
      var __create, __import, __isArray, __lt, __name, __num, __owns, __slice,
          __strnum, __toArray, __typeof, MacroHolder, Type;
      __create = typeof Object.create === "function" ? Object.create
        : function (x) {
          function F() {}
          F.prototype = x;
          return new F();
        };
      __import = function (dest, source) {
        var k;
        for (k in source) {
          if (__owns.call(source, k)) {
            dest[k] = source[k];
          }
        }
        return dest;
      };
      __isArray = typeof Array.isArray === "function" ? Array.isArray
        : (function () {
          var _toString;
          _toString = Object.prototype.toString;
          return function (x) {
            return _toString.call(x) === "[object Array]";
          };
        }());
      __lt = function (x, y) {
        var type;
        type = typeof x;
        if (type !== "number" && type !== "string") {
          throw TypeError("Cannot compare a non-number/string: " + type);
        } else if (type !== typeof y) {
          throw TypeError("Cannot compare elements of different types: " + type + " vs " + typeof y);
        } else {
          return x < y;
        }
      };
      __name = function (func) {
        if (typeof func !== "function") {
          throw TypeError("Expected func to be a Function, got " + __typeof(func));
        }
        return func.displayName || func.name || "";
      };
      __num = function (num) {
        if (typeof num !== "number") {
          throw TypeError("Expected a number, got " + __typeof(num));
        } else {
          return num;
        }
      };
      __owns = Object.prototype.hasOwnProperty;
      __slice = Array.prototype.slice;
      __strnum = function (strnum) {
        var type;
        type = typeof strnum;
        if (type === "string") {
          return strnum;
        } else if (type === "number") {
          return String(strnum);
        } else {
          throw TypeError("Expected a string or number, got " + __typeof(strnum));
        }
      };
      __toArray = function (x) {
        if (x == null) {
          throw TypeError("Expected an object, got " + __typeof(x));
        } else if (__isArray(x)) {
          return x;
        } else if (typeof x === "string") {
          return x.split("");
        } else {
          return __slice.call(x);
        }
      };
      __typeof = (function () {
        var _toString;
        _toString = Object.prototype.toString;
        return function (o) {
          if (o === void 0) {
            return "Undefined";
          } else if (o === null) {
            return "Null";
          } else {
            return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
          }
        };
      }());
      Type = require("./types");
      MacroHolder = (function () {
        var _MacroHolder_prototype;
        function MacroHolder(syntaxes, macroName, wordOrSymbol, oneOf, sequential) {
          var _this;
          _this = this instanceof MacroHolder ? this : __create(_MacroHolder_prototype);
          if (typeof syntaxes !== "object" || syntaxes === null) {
            throw TypeError("Expected syntaxes to be an Object, got " + __typeof(syntaxes));
          }
          _this.syntaxes = syntaxes;
          if (typeof macroName !== "function") {
            throw TypeError("Expected macroName to be a Function, got " + __typeof(macroName));
          }
          _this.macroName = macroName;
          if (typeof wordOrSymbol !== "function") {
            throw TypeError("Expected wordOrSymbol to be a Function, got " + __typeof(wordOrSymbol));
          }
          _this.wordOrSymbol = wordOrSymbol;
          if (typeof oneOf !== "function") {
            throw TypeError("Expected oneOf to be a Function, got " + __typeof(oneOf));
          }
          _this.oneOf = oneOf;
          if (typeof sequential !== "function") {
            throw TypeError("Expected sequential to be a Function, got " + __typeof(sequential));
          }
          _this.sequential = sequential;
          _this.byName = {};
          _this.byId = [];
          _this.byLabel = {};
          _this.typeById = [];
          _this.operatorNames = {};
          _this.binaryOperators = [];
          _this.assignOperators = [];
          _this.prefixUnaryOperators = [];
          _this.postfixUnaryOperators = [];
          _this.consts = {};
          _this.serialization = {};
          _this.helpers = {};
          return _this;
        }
        _MacroHolder_prototype = MacroHolder.prototype;
        MacroHolder.displayName = "MacroHolder";
        _MacroHolder_prototype.clone = function () {
          var clone;
          clone = MacroHolder(
            this.syntaxes,
            this.macroName,
            this.wordOrSymbol,
            this.oneOf,
            this.sequential
          );
          clone.byName = __import({}, this.byName);
          clone.byId = this.byId.slice();
          clone.byLabel = __import({}, this.byLabel);
          clone.typeById = this.typeById.slice();
          clone.operatorNames = __import({}, this.operatorNames);
          clone.binaryOperators = this.binaryOperators.slice();
          clone.assignOperators = this.assignOperators.slice();
          clone.prefixUnaryOperators = this.prefixUnaryOperators.slice();
          clone.postfixUnaryOperators = this.postfixUnaryOperators.slice();
          clone.consts = __import({}, this.consts);
          clone.serialization = __import({}, this.serialization);
          clone.helpers = __import({}, this.helpers);
          clone.syntaxes = __import({}, this.syntaxes);
          return clone;
        };
        _MacroHolder_prototype.getByName = function (name) {
          var _ref;
          if (__owns.call(_ref = this.byName, name)) {
            return _ref[name];
          }
        };
        _MacroHolder_prototype.getOrAddByName = function (name) {
          var byName, m, token;
          byName = this.byName;
          if (__owns.call(byName, name)) {
            return byName[name];
          } else {
            token = this.macroName(name);
            m = function (parser, index) {
              var _arr, _i, _len, _ref, item;
              for (_arr = __toArray(m.data), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                item = _arr[_i];
                if (_ref = item(parser, index)) {
                  return _ref;
                }
              }
            };
            m.token = token;
            m.data = [];
            return byName[name] = m;
          }
        };
        _MacroHolder_prototype.getOrAddByNames = function (names) {
          var _arr, _i, _i2, _len, name;
          if (!__isArray(names)) {
            throw TypeError("Expected names to be an Array, got " + __typeof(names));
          } else {
            for (_i = names.length; _i--; ) {
              if (typeof names[_i] !== "string") {
                throw TypeError("Expected " + ("names[" + _i + "]") + " to be a String, got " + __typeof(names[_i]));
              }
            }
          }
          for (_arr = [], _i2 = 0, _len = names.length; _i2 < _len; ++_i2) {
            name = names[_i2];
            _arr.push(this.getOrAddByName(name));
          }
          return _arr;
        };
        _MacroHolder_prototype.setTypeById = function (id, type) {
          if (typeof id !== "number") {
            throw TypeError("Expected id to be a Number, got " + __typeof(id));
          }
          if (!(type instanceof Type)) {
            throw TypeError("Expected type to be a " + __name(Type) + ", got " + __typeof(type));
          }
          this.typeById[id] = type;
        };
        _MacroHolder_prototype.getTypeById = function (id) {
          return this.typeById[id];
        };
        _MacroHolder_prototype.getById = function (id) {
          var byId;
          byId = this.byId;
          if (__num(id) >= 0 && __lt(id, byId.length)) {
            return byId[id];
          }
        };
        _MacroHolder_prototype.addMacro = function (m, macroId, type) {
          var byId;
          if (macroId == null) {
            macroId = void 0;
          } else if (typeof macroId !== "number") {
            throw TypeError("Expected macroId to be one of Number or undefined, got " + __typeof(macroId));
          }
          if (type == null) {
            type = void 0;
          } else if (!(type instanceof Type) && typeof type !== "string") {
            throw TypeError("Expected type to be one of " + (__name(Type) + " or String or undefined") + ", got " + __typeof(type));
          }
          byId = this.byId;
          if (macroId != null) {
            if (__owns.call(byId, macroId)) {
              throw Error("Cannot add macro #" + __strnum(macroId) + ", as it already exists");
            }
            byId[macroId] = m;
          } else {
            byId.push(m);
            macroId = __num(byId.length) - 1;
          }
          if (type != null) {
            this.typeById[macroId] = type;
          }
          return macroId;
        };
        _MacroHolder_prototype.replaceMacro = function (id, m, type) {
          var byId;
          if (type == null) {
            type = void 0;
          } else if (!(type instanceof Type)) {
            throw TypeError("Expected type to be one of " + (__name(Type) + " or undefined") + ", got " + __typeof(type));
          }
          byId = this.byId;
          byId[id] = m;
          if (type != null) {
            this.typeById[id] = type;
          }
        };
        _MacroHolder_prototype.hasMacroOrOperator = function (name) {
          return __owns.call(this.byName, name) || __owns.call(this.operatorNames, name);
        };
        _MacroHolder_prototype.getMacroAndOperatorNames = function () {
          var _obj, name, names;
          names = [];
          _obj = this.byName;
          for (name in _obj) {
            if (__owns.call(_obj, name)) {
              names.push(name);
            }
          }
          _obj = this.operatorNames;
          for (name in _obj) {
            if (__owns.call(_obj, name)) {
              names.push(name);
            }
          }
          return names;
        };
        _MacroHolder_prototype.allBinaryOperators = function () {
          var _arr, _i, _len, _ref, array, result;
          if ((_ref = this._allBinaryOperators) == null) {
            result = [];
            for (_arr = __toArray(this.binaryOperators), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              array = _arr[_i];
              result.push.apply(result, __toArray(array));
            }
            return this._allBinaryOperators = result;
          } else {
            return _ref;
          }
        };
        _MacroHolder_prototype.addBinaryOperator = function (operators, m, options, macroId) {
          var _arr, _i, _ref, _this, binaryOperators, data, i, op, precedence;
          _this = this;
          for (_arr = __toArray(operators), _i = _arr.length; _i--; ) {
            op = _arr[_i];
            this.operatorNames[op] = true;
          }
          precedence = Number(options.precedence) || 0;
          for (i = __num(this.binaryOperators.length); i <= precedence; ++i) {
            this.binaryOperators[i] = [];
          }
          binaryOperators = this.binaryOperators[precedence];
          data = {
            rule: this.oneOf.apply(this, (function () {
              var _arr, _arr2, _i, _len, op;
              for (_arr = [], _arr2 = __toArray(operators), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                op = _arr2[_i];
                _arr.push(_this.wordOrSymbol(op));
              }
              return _arr;
            }())),
            func: m,
            rightToLeft: !!options.rightToLeft,
            maximum: options.maximum || 0,
            minimum: options.minimum || 0,
            invertible: !!options.invertible
          };
          binaryOperators.push(data);
          this._allBinaryOperators = null;
          if (options.label) {
            this.addByLabel(options.label, data);
          }
          return this.addMacro(m, macroId, (_ref = options.type) === "left" || _ref === "right" ? options.type
            : options.type != null && __owns.call(Type, _ref = options.type) ? Type[_ref]
            : void 0);
        };
        _MacroHolder_prototype.getByLabel = function (label) {
          var _ref;
          if (__owns.call(_ref = this.byLabel, label)) {
            return _ref[label];
          }
        };
        _MacroHolder_prototype.addByLabel = function (label, data) {
          if (typeof label !== "string") {
            throw TypeError("Expected label to be a String, got " + __typeof(label));
          }
          return this.byLabel[label] = data;
        };
        _MacroHolder_prototype.addAssignOperator = function (operators, m, options, macroId) {
          var _arr, _i, _ref, _this, data, op;
          _this = this;
          for (_arr = __toArray(operators), _i = _arr.length; _i--; ) {
            op = _arr[_i];
            this.operatorNames[op] = true;
          }
          data = {
            rule: this.oneOf.apply(this, (function () {
              var _arr, _arr2, _i, _len, op;
              for (_arr = [], _arr2 = __toArray(operators), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                op = _arr2[_i];
                if (op === ":=") {
                  _arr.push(_this.syntaxes.ColonEqual);
                } else {
                  _arr.push(_this.wordOrSymbol(op));
                }
              }
              return _arr;
            }())),
            func: m
          };
          this.assignOperators.push(data);
          if (options.label) {
            this.addByLabel(options.label, data);
          }
          return this.addMacro(m, macroId, (_ref = options.type) === "left" || _ref === "right" ? options.type
            : options.type != null && __owns.call(Type, _ref = options.type) ? Type[_ref]
            : void 0);
        };
        _MacroHolder_prototype.addUnaryOperator = function (operators, m, options, macroId) {
          var _arr, _i, _ref, _this, data, op, store;
          _this = this;
          for (_arr = __toArray(operators), _i = _arr.length; _i--; ) {
            op = _arr[_i];
            this.operatorNames[op] = true;
          }
          if (options.postfix) {
            store = this.postfixUnaryOperators;
          } else {
            store = this.prefixUnaryOperators;
          }
          data = {
            rule: this.oneOf.apply(this, (function () {
              var _arr, _arr2, _i, _len, op, rule;
              for (_arr = [], _arr2 = __toArray(operators), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                op = _arr2[_i];
                rule = _this.wordOrSymbol(op);
                if (!/[a-zA-Z]/.test(op)) {
                  if (options.postfix) {
                    _arr.push(_this.sequential(_this.syntaxes.NoSpace, ["this", rule]));
                  } else {
                    _arr.push(_this.sequential(
                      ["this", rule],
                      _this.syntaxes.NoSpace
                    ));
                  }
                } else {
                  _arr.push(rule);
                }
              }
              return _arr;
            }())),
            func: m,
            standalone: __owns.call(!options, "standalone") || !!options.standalone
          };
          store.push(data);
          if (options.label) {
            this.addByLabel(options.label, data);
          }
          return this.addMacro(m, macroId, options.type === "node" ? options.type
            : options.type != null && __owns.call(Type, _ref = options.type) ? Type[_ref]
            : void 0);
        };
        _MacroHolder_prototype.addSerializedHelper = function (name, helper, type, dependencies) {
          var _ref, _ref2, helpers;
          if (typeof name !== "string") {
            throw TypeError("Expected name to be a String, got " + __typeof(name));
          }
          if ((_ref = (_ref2 = this.serialization).helpers) != null) {
            helpers = _ref;
          } else {
            helpers = _ref2.helpers = {};
          }
          helpers[name] = { helper: helper, type: type, dependencies: dependencies };
        };
        _MacroHolder_prototype.addConst = function (name, value) {
          if (typeof name !== "string") {
            throw TypeError("Expected name to be a String, got " + __typeof(name));
          }
          this.consts[name] = value;
        };
        function serializeConstValue(value) {
          switch (value) {
          case 0:
            return { type: value === 0 && 1 / value > 0 ? "+0" : "-0" };
          case 1/0: return { type: "Infinity" };
          case -1/0: return { type: "-Infinity" };
          default:
            if (value !== value) {
              return { type: "NaN" };
            } else if (value === void 0) {
              return { type: "void" };
            } else {
              return value;
            }
          }
        }
        function deserializeConstValue(value) {
          if (typeof value === "object" && value !== null && typeof value.type === "string") {
            switch (value.type) {
            case "+0": return 0;
            case "-0": return -0;
            case "Infinity": return 1/0;
            case "-Infinity": return -1/0;
            case "NaN": return 0/0;
            case "void": return;
            default: throw Error("Unknown value");
            }
          } else {
            return value;
          }
        }
        _MacroHolder_prototype.addSerializedConst = function (name) {
          var _ref, _ref2, consts;
          if (typeof name !== "string") {
            throw TypeError("Expected name to be a String, got " + __typeof(name));
          }
          if (!__owns.call(this.consts, name)) {
            throw Error("Unknown const " + name);
          }
          if ((_ref = (_ref2 = this.serialization).consts) != null) {
            consts = _ref;
          } else {
            consts = _ref2.consts = {};
          }
          consts[name] = serializeConstValue(this.consts[name]);
        };
        _MacroHolder_prototype.addMacroSerialization = function (serialization) {
          var _ref, _ref2, _ref3, byType, obj;
          if (typeof serialization !== "object" || serialization === null) {
            throw TypeError("Expected serialization to be an Object, got " + __typeof(serialization));
          } else if (typeof serialization.type !== "string") {
            throw TypeError("Expected serialization.type to be a String, got " + __typeof(serialization.type));
          }
          obj = __import({}, serialization);
          delete obj.type;
          if ((_ref = (_ref2 = this.serialization)[_ref3 = serialization.type]) != null) {
            byType = _ref;
          } else {
            byType = _ref2[_ref3] = [];
          }
          byType.push(obj);
        };
        _MacroHolder_prototype.addSyntax = function (name, value) {
          if (typeof name !== "string") {
            throw TypeError("Expected name to be a String, got " + __typeof(name));
          }
          if (typeof value !== "function") {
            throw TypeError("Expected value to be a Function, got " + __typeof(value));
          }
          if (__owns.call(this.syntaxes, name)) {
            throw Error("Cannot override already-defined syntax: " + name);
          }
          this.syntaxes[name] = value;
        };
        _MacroHolder_prototype.hasSyntax = function (name) {
          if (typeof name !== "string") {
            throw TypeError("Expected name to be a String, got " + __typeof(name));
          }
          return __owns.call(this.syntaxes, name);
        };
        _MacroHolder_prototype.getSyntax = function (name) {
          if (typeof name !== "string") {
            throw TypeError("Expected name to be a String, got " + __typeof(name));
          }
          if (__owns.call(this.syntaxes, name)) {
            return this.syntaxes[name];
          } else {
            throw Error("Unknown syntax: " + name);
          }
        };
        _MacroHolder_prototype.serialize = function (allowJS) {
          var _arr, dep, helper, helpers, i, name, serialization;
          if (allowJS == null) {
            allowJS = false;
          } else if (typeof allowJS !== "boolean") {
            throw TypeError("Expected allowJS to be a Boolean, got " + __typeof(allowJS));
          }
          serialization = __import({}, this.serialization);
          if (__owns.call(serialization, "helpers")) {
            helpers = serialization.helpers;
          }
          if (helpers) {
            for (name in helpers) {
              if (__owns.call(helpers, name)) {
                helper = helpers[name];
                for (_arr = __toArray(helper.dependencies), i = _arr.length; i--; ) {
                  dep = _arr[i];
                  if (!__owns.call(helpers, dep)) {
                    helper.dependencies.splice(i, 1);
                  }
                }
              }
            }
          }
          if (allowJS) {
            return require("./jsutils").toJSSource(serialization);
          } else {
            return JSON.stringify(serialization);
          }
        };
        _MacroHolder_prototype.deserialize = function (data, state) {
          var _obj, _ref, ast, dependencies, helper, name, type, value;
          ast = require("./jsast");
          _obj = (_ref = __owns.call(data, "helpers") ? data.helpers : void 0) != null ? _ref : {};
          for (name in _obj) {
            if (__owns.call(_obj, name)) {
              _ref = _obj[name];
              helper = _ref.helper;
              type = _ref.type;
              dependencies = _ref.dependencies;
              this.addHelper(name, ast.fromJSON(helper), Type.fromJSON(type), dependencies);
            }
          }
          _obj = (_ref = __owns.call(data, "consts") ? data.consts : void 0) != null ? _ref : {};
          for (name in _obj) {
            if (__owns.call(_obj, name)) {
              value = _obj[name];
              this.addConst(name, deserializeConstValue(value));
            }
          }
          state.deserializeMacros(data);
        };
        _MacroHolder_prototype.addHelper = function (name, value, type, dependencies) {
          var _i;
          if (typeof name !== "string") {
            throw TypeError("Expected name to be a String, got " + __typeof(name));
          }
          if (!(type instanceof Type)) {
            throw TypeError("Expected type to be a " + __name(Type) + ", got " + __typeof(type));
          }
          if (!__isArray(dependencies)) {
            throw TypeError("Expected dependencies to be an Array, got " + __typeof(dependencies));
          } else {
            for (_i = dependencies.length; _i--; ) {
              if (typeof dependencies[_i] !== "string") {
                throw TypeError("Expected " + ("dependencies[" + _i + "]") + " to be a String, got " + __typeof(dependencies[_i]));
              }
            }
          }
          if (__owns.call(this.helpers, name)) {
            throw Error("Trying to overwrite helper " + name);
          }
          return this.helpers[name] = { value: value, type: type, dependencies: dependencies };
        };
        _MacroHolder_prototype.hasHelper = function (name) {
          if (typeof name !== "string") {
            throw TypeError("Expected name to be a String, got " + __typeof(name));
          }
          return __owns.call(this.helpers, name);
        };
        _MacroHolder_prototype.getHelper = function (name) {
          if (typeof name !== "string") {
            throw TypeError("Expected name to be a String, got " + __typeof(name));
          }
          if (__owns.call(this.helpers, name)) {
            return this.helpers[name].value;
          } else {
            throw Error("No such helper: " + name);
          }
        };
        _MacroHolder_prototype.helperType = function (name) {
          if (typeof name !== "string") {
            throw TypeError("Expected name to be a String, got " + __typeof(name));
          }
          if (__owns.call(this.helpers, name)) {
            return this.helpers[name].type;
          } else {
            throw Error("No such helper: " + name);
          }
        };
        _MacroHolder_prototype.helperDependencies = function (name) {
          if (typeof name !== "string") {
            throw TypeError("Expected name to be a String, got " + __typeof(name));
          }
          if (__owns.call(this.helpers, name)) {
            return this.helpers[name].dependencies;
          } else {
            throw Error("No such helper: " + name);
          }
        };
        return MacroHolder;
      }());
      module.exports = MacroHolder;
    }.call(this));
    
    return module.exports;
  };
  require['./parser-macrocontext'] = function () {
    var module = { exports: this };
    var exports = this;
    (function () {
      "use strict";
      var __create, __isArray, __name, __num, __owns, __slice, __strnum, __throw,
          __toArray, __typeof, _ref, AccessMultiNode, AccessNode, addParamToScope,
          ArgsNode, ArrayNode, AssignNode, BinaryNode, BlockNode, BreakNode,
          CallNode, CommentNode, ConstNode, ContinueNode, DebuggerNode, DefNode,
          EmbedWriteNode, EvalNode, ForInNode, ForNode, FunctionNode, IdentNode,
          IfNode, MacroAccessNode, MacroConstNode, MacroContext, map, Node,
          nodeToType, NothingNode, ObjectNode, ParamNode, RegexpNode, ReturnNode,
          RootNode, Scope, SpreadNode, SuperNode, SwitchNode, SyntaxChoiceNode,
          SyntaxManyNode, SyntaxParamNode, SyntaxSequenceNode, ThisNode, ThrowNode,
          TmpNode, TmpWrapperNode, TryCatchNode, TryFinallyNode, Type,
          TypeFunctionNode, TypeGenericNode, TypeObjectNode, TypeUnionNode,
          UnaryNode, VarNode, YieldNode;
      __create = typeof Object.create === "function" ? Object.create
        : function (x) {
          function F() {}
          F.prototype = x;
          return new F();
        };
      __isArray = typeof Array.isArray === "function" ? Array.isArray
        : (function () {
          var _toString;
          _toString = Object.prototype.toString;
          return function (x) {
            return _toString.call(x) === "[object Array]";
          };
        }());
      __name = function (func) {
        if (typeof func !== "function") {
          throw TypeError("Expected func to be a Function, got " + __typeof(func));
        }
        return func.displayName || func.name || "";
      };
      __num = function (num) {
        if (typeof num !== "number") {
          throw TypeError("Expected a number, got " + __typeof(num));
        } else {
          return num;
        }
      };
      __owns = Object.prototype.hasOwnProperty;
      __slice = Array.prototype.slice;
      __strnum = function (strnum) {
        var type;
        type = typeof strnum;
        if (type === "string") {
          return strnum;
        } else if (type === "number") {
          return String(strnum);
        } else {
          throw TypeError("Expected a string or number, got " + __typeof(strnum));
        }
      };
      __throw = function (err) {
        throw err;
      };
      __toArray = function (x) {
        if (x == null) {
          throw TypeError("Expected an object, got " + __typeof(x));
        } else if (__isArray(x)) {
          return x;
        } else if (typeof x === "string") {
          return x.split("");
        } else {
          return __slice.call(x);
        }
      };
      __typeof = (function () {
        var _toString;
        _toString = Object.prototype.toString;
        return function (o) {
          if (o === void 0) {
            return "Undefined";
          } else if (o === null) {
            return "Null";
          } else {
            return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
          }
        };
      }());
      Node = require("./parser-nodes");
      Type = require("./types");
      Scope = require("./parser-scope");
      _ref = require("./parser-utils");
      nodeToType = _ref.nodeToType;
      addParamToScope = _ref.addParamToScope;
      map = _ref.map;
      AccessNode = Node.Access;
      AccessMultiNode = Node.AccessMulti;
      ArgsNode = Node.Args;
      ArrayNode = Node.Array;
      AssignNode = Node.Assign;
      BinaryNode = Node.Binary;
      BlockNode = Node.Block;
      BreakNode = Node.Break;
      CallNode = Node.Call;
      CommentNode = Node.Comment;
      ConstNode = Node.Const;
      ContinueNode = Node.Continue;
      DebuggerNode = Node.Debugger;
      DefNode = Node.Def;
      EmbedWriteNode = Node.EmbedWrite;
      EvalNode = Node.Eval;
      ForNode = Node.For;
      ForInNode = Node.ForIn;
      FunctionNode = Node.Function;
      IdentNode = Node.Ident;
      IfNode = Node.If;
      MacroAccessNode = Node.MacroAccess;
      MacroConstNode = Node.MacroConst;
      NothingNode = Node.Nothing;
      ObjectNode = Node.Object;
      ParamNode = Node.Param;
      RegexpNode = Node.Regexp;
      ReturnNode = Node.Return;
      RootNode = Node.Root;
      SpreadNode = Node.Spread;
      SuperNode = Node.Super;
      SwitchNode = Node.Switch;
      SyntaxChoiceNode = Node.SyntaxChoice;
      SyntaxManyNode = Node.SyntaxMany;
      SyntaxParamNode = Node.SyntaxParam;
      SyntaxSequenceNode = Node.SyntaxSequence;
      ThisNode = Node.This;
      ThrowNode = Node.Throw;
      TmpNode = Node.Tmp;
      TmpWrapperNode = Node.TmpWrapper;
      TryCatchNode = Node.TryCatch;
      TryFinallyNode = Node.TryFinally;
      TypeFunctionNode = Node.TypeFunction;
      TypeGenericNode = Node.TypeGeneric;
      TypeObjectNode = Node.TypeObject;
      TypeUnionNode = Node.TypeUnion;
      UnaryNode = Node.Unary;
      VarNode = Node.Var;
      YieldNode = Node.Yield;
      function identity(x) {
        return x;
      }
      function retThis() {
        return this;
      }
      MacroContext = (function () {
        var _MacroContext_prototype, mutators;
        function MacroContext(parser, index, position, inGenerator, inEvilAst) {
          var _this;
          _this = this instanceof MacroContext ? this : __create(_MacroContext_prototype);
          _this.parser = parser;
          _this.index = index;
          _this.position = position;
          _this.inGenerator = inGenerator;
          _this.inEvilAst = inEvilAst;
          _this.unsavedTmps = [];
          _this.savedTmps = [];
          return _this;
        }
        _MacroContext_prototype = MacroContext.prototype;
        MacroContext.displayName = "MacroContext";
        _MacroContext_prototype.doWrap = function (node) {
          if (node instanceof Node) {
            return node.doWrap(this.parser);
          } else {
            return node;
          }
        };
        _MacroContext_prototype.error = function (message, node) {
          if (typeof message !== "string") {
            throw TypeError("Expected message to be a String, got " + __typeof(message));
          }
          if (node == null) {
            node = null;
          } else if (!(node instanceof Node)) {
            throw TypeError("Expected node to be one of " + (__name(Node) + " or null") + ", got " + __typeof(node));
          }
          throw this.parser.buildError(message, node || this.index);
        };
        _MacroContext_prototype.scope = function () {
          return this.parser.scope.peek();
        };
        _MacroContext_prototype.line = function (node) {
          var index;
          if (node instanceof Node) {
            index = node.index;
          } else {
            index = this.index;
          }
          return this.parser.getPosition(index).line;
        };
        _MacroContext_prototype.column = function (node) {
          var index;
          if (node instanceof Node) {
            index = node.index;
          } else {
            index = this.index;
          }
          return this.parser.getPosition(index).column;
        };
        _MacroContext_prototype.file = function () {
          return this.parser.options.filename || "";
        };
        _MacroContext_prototype.version = function () {
          return this.parser.getPackageVersion();
        };
        _MacroContext_prototype["let"] = function (ident, isMutable, type) {
          if (!(ident instanceof TmpNode) && !(ident instanceof IdentNode)) {
            throw TypeError("Expected ident to be one of " + (__name(TmpNode) + " or " + __name(IdentNode)) + ", got " + __typeof(ident));
          }
          if (isMutable == null) {
            isMutable = false;
          } else if (typeof isMutable !== "boolean") {
            throw TypeError("Expected isMutable to be a Boolean, got " + __typeof(isMutable));
          }
          if (type == null) {
            type = Type.any;
          } else if (!(type instanceof Type)) {
            throw TypeError("Expected type to be a " + __name(Type) + ", got " + __typeof(type));
          }
          if (ident instanceof IdentNode && isMutable && type.isSubsetOf(Type.undefinedOrNull)) {
            type = Type.any;
          }
          return this.scope().add(ident, isMutable, type);
        };
        _MacroContext_prototype.hasVariable = function (ident) {
          if (!(ident instanceof TmpNode) && !(ident instanceof IdentNode)) {
            throw TypeError("Expected ident to be one of " + (__name(TmpNode) + " or " + __name(IdentNode)) + ", got " + __typeof(ident));
          }
          return this.scope().has(ident);
        };
        _MacroContext_prototype.isVariableMutable = function (ident) {
          if (!(ident instanceof TmpNode) && !(ident instanceof IdentNode)) {
            throw TypeError("Expected ident to be one of " + (__name(TmpNode) + " or " + __name(IdentNode)) + ", got " + __typeof(ident));
          }
          return this.scope().isMutable(ident);
        };
        _MacroContext_prototype["var"] = function (ident, isMutable) {
          if (!(ident instanceof IdentNode) && !(ident instanceof TmpNode)) {
            throw TypeError("Expected ident to be one of " + (__name(IdentNode) + " or " + __name(TmpNode)) + ", got " + __typeof(ident));
          }
          if (isMutable == null) {
            isMutable = false;
          } else if (typeof isMutable !== "boolean") {
            throw TypeError("Expected isMutable to be a Boolean, got " + __typeof(isMutable));
          }
          return this.parser.Var(this.index, ident, isMutable);
        };
        _MacroContext_prototype.def = function (key, value) {
          if (key == null) {
            key = NothingNode(0, this.scope());
          } else if (!(key instanceof Node)) {
            throw TypeError("Expected key to be a " + __name(Node) + ", got " + __typeof(key));
          }
          if (value == null) {
            value = void 0;
          } else if (!(value instanceof Node)) {
            throw TypeError("Expected value to be one of " + (__name(Node) + " or undefined") + ", got " + __typeof(value));
          }
          return this.parser.Def(this.index, key, this.doWrap(value));
        };
        _MacroContext_prototype.noop = function () {
          return this.parser.Nothing(this.index);
        };
        _MacroContext_prototype.block = function (nodes, label) {
          var _i;
          if (!__isArray(nodes)) {
            throw TypeError("Expected nodes to be an Array, got " + __typeof(nodes));
          } else {
            for (_i = nodes.length; _i--; ) {
              if (!(nodes[_i] instanceof Node)) {
                throw TypeError("Expected " + ("nodes[" + _i + "]") + " to be a " + __name(Node) + ", got " + __typeof(nodes[_i]));
              }
            }
          }
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          return this.parser.Block(this.index, nodes, label).reduce(this.parser);
        };
        _MacroContext_prototype["if"] = function (test, whenTrue, whenFalse, label) {
          if (test == null) {
            test = NothingNode(0, this.scope());
          } else if (!(test instanceof Node)) {
            throw TypeError("Expected test to be a " + __name(Node) + ", got " + __typeof(test));
          }
          if (whenTrue == null) {
            whenTrue = NothingNode(0, this.scope());
          } else if (!(whenTrue instanceof Node)) {
            throw TypeError("Expected whenTrue to be a " + __name(Node) + ", got " + __typeof(whenTrue));
          }
          if (whenFalse == null) {
            whenFalse = null;
          } else if (!(whenFalse instanceof Node)) {
            throw TypeError("Expected whenFalse to be one of " + (__name(Node) + " or null") + ", got " + __typeof(whenFalse));
          }
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          return this.parser.If(
            this.index,
            this.doWrap(test),
            whenTrue,
            whenFalse,
            label
          ).reduce(this.parser);
        };
        _MacroContext_prototype["switch"] = function (node, cases, defaultCase, label) {
          var _this;
          _this = this;
          if (node == null) {
            node = NothingNode(0, this.scope());
          } else if (!(node instanceof Node)) {
            throw TypeError("Expected node to be a " + __name(Node) + ", got " + __typeof(node));
          }
          if (!__isArray(cases)) {
            throw TypeError("Expected cases to be an Array, got " + __typeof(cases));
          }
          if (defaultCase == null) {
            defaultCase = null;
          } else if (!(defaultCase instanceof Node)) {
            throw TypeError("Expected defaultCase to be one of " + (__name(Node) + " or null") + ", got " + __typeof(defaultCase));
          }
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          return this.parser.Switch(
            this.index,
            this.doWrap(node),
            (function () {
              var _arr, _i, _len, case_;
              for (_arr = [], _i = 0, _len = cases.length; _i < _len; ++_i) {
                case_ = cases[_i];
                _arr.push({ node: _this.doWrap(case_.node), body: case_.body, fallthrough: case_.fallthrough });
              }
              return _arr;
            }()),
            defaultCase,
            label
          ).reduce(this.parser);
        };
        _MacroContext_prototype["for"] = function (init, test, step, body, label) {
          if (init == null) {
            init = null;
          } else if (!(init instanceof Node)) {
            throw TypeError("Expected init to be one of " + (__name(Node) + " or null") + ", got " + __typeof(init));
          }
          if (test == null) {
            test = null;
          } else if (!(test instanceof Node)) {
            throw TypeError("Expected test to be one of " + (__name(Node) + " or null") + ", got " + __typeof(test));
          }
          if (step == null) {
            step = null;
          } else if (!(step instanceof Node)) {
            throw TypeError("Expected step to be one of " + (__name(Node) + " or null") + ", got " + __typeof(step));
          }
          if (body == null) {
            body = NothingNode(0, this.scope());
          } else if (!(body instanceof Node)) {
            throw TypeError("Expected body to be a " + __name(Node) + ", got " + __typeof(body));
          }
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          return this.parser.For(
            this.index,
            this.doWrap(init),
            this.doWrap(test),
            this.doWrap(step),
            body,
            label
          ).reduce(this.parser);
        };
        _MacroContext_prototype.forIn = function (key, object, body, label) {
          if (!(key instanceof IdentNode)) {
            throw TypeError("Expected key to be a " + __name(IdentNode) + ", got " + __typeof(key));
          }
          if (object == null) {
            object = NothingNode(0);
          } else if (!(object instanceof Node)) {
            throw TypeError("Expected object to be a " + __name(Node) + ", got " + __typeof(object));
          }
          if (body == null) {
            body = NothingNode(0, this.scope());
          } else if (!(body instanceof Node)) {
            throw TypeError("Expected body to be a " + __name(Node) + ", got " + __typeof(body));
          }
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          return this.parser.ForIn(
            this.index,
            key,
            this.doWrap(object),
            body,
            label
          ).reduce(this.parser);
        };
        _MacroContext_prototype.tryCatch = function (tryBody, catchIdent, catchBody, label) {
          if (tryBody == null) {
            tryBody = NothingNode(0, this.scope());
          } else if (!(tryBody instanceof Node)) {
            throw TypeError("Expected tryBody to be a " + __name(Node) + ", got " + __typeof(tryBody));
          }
          if (catchIdent == null) {
            catchIdent = NothingNode(0, this.scope());
          } else if (!(catchIdent instanceof Node)) {
            throw TypeError("Expected catchIdent to be a " + __name(Node) + ", got " + __typeof(catchIdent));
          }
          if (catchBody == null) {
            catchBody = NothingNode(0, this.scope());
          } else if (!(catchBody instanceof Node)) {
            throw TypeError("Expected catchBody to be a " + __name(Node) + ", got " + __typeof(catchBody));
          }
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          return this.parser.TryCatch(
            this.index,
            tryBody,
            catchIdent,
            catchBody,
            label
          ).reduce(this.parser);
        };
        _MacroContext_prototype.tryFinally = function (tryBody, finallyBody, label) {
          if (tryBody == null) {
            tryBody = NothingNode(0, this.scope());
          } else if (!(tryBody instanceof Node)) {
            throw TypeError("Expected tryBody to be a " + __name(Node) + ", got " + __typeof(tryBody));
          }
          if (finallyBody == null) {
            finallyBody = NothingNode(0, this.scope());
          } else if (!(finallyBody instanceof Node)) {
            throw TypeError("Expected finallyBody to be a " + __name(Node) + ", got " + __typeof(finallyBody));
          }
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          return this.parser.TryFinally(this.index, tryBody, finallyBody, label).reduce(this.parser);
        };
        _MacroContext_prototype.assign = function (left, op, right) {
          if (left == null) {
            left = NothingNode(0, this.scope());
          } else if (!(left instanceof Node)) {
            throw TypeError("Expected left to be a " + __name(Node) + ", got " + __typeof(left));
          }
          if (typeof op !== "string") {
            throw TypeError("Expected op to be a String, got " + __typeof(op));
          }
          if (right == null) {
            right = NothingNode(0, this.scope());
          } else if (!(right instanceof Node)) {
            throw TypeError("Expected right to be a " + __name(Node) + ", got " + __typeof(right));
          }
          return this.parser.Assign(this.index, left, op, this.doWrap(right)).reduce(this.parser);
        };
        _MacroContext_prototype.binary = function (left, op, right) {
          if (left == null) {
            left = NothingNode(0, this.scope());
          } else if (!(left instanceof Node)) {
            throw TypeError("Expected left to be a " + __name(Node) + ", got " + __typeof(left));
          }
          if (typeof op !== "string") {
            throw TypeError("Expected op to be a String, got " + __typeof(op));
          }
          if (right == null) {
            right = NothingNode(0, this.scope());
          } else if (!(right instanceof Node)) {
            throw TypeError("Expected right to be a " + __name(Node) + ", got " + __typeof(right));
          }
          return this.parser.Binary(this.index, this.doWrap(left), op, this.doWrap(right)).reduce(this.parser);
        };
        _MacroContext_prototype.binaryChain = function (op, nodes) {
          var _i, _i2, _len, left, result, right;
          if (typeof op !== "string") {
            throw TypeError("Expected op to be a String, got " + __typeof(op));
          }
          if (!__isArray(nodes)) {
            throw TypeError("Expected nodes to be an Array, got " + __typeof(nodes));
          } else {
            for (_i = nodes.length; _i--; ) {
              if (!(nodes[_i] instanceof Node)) {
                throw TypeError("Expected " + ("nodes[" + _i + "]") + " to be a " + __name(Node) + ", got " + __typeof(nodes[_i]));
              }
            }
          }
          if (nodes.length === 0) {
            throw Error("Expected nodes to at least have a length of 1");
          }
          left = this.doWrap(nodes[0]);
          for (_i2 = 1, _len = nodes.length; _i2 < _len; ++_i2) {
            right = nodes[_i2];
            left = this.parser.Binary(this.index, left, op, this.doWrap(right));
          }
          result = left;
          return result.reduce(this.parser);
        };
        _MacroContext_prototype.unary = function (op, node) {
          if (typeof op !== "string") {
            throw TypeError("Expected op to be a String, got " + __typeof(op));
          }
          if (node == null) {
            node = NothingNode(0, this.scope());
          } else if (!(node instanceof Node)) {
            throw TypeError("Expected node to be a " + __name(Node) + ", got " + __typeof(node));
          }
          return this.parser.Unary(this.index, op, this.doWrap(node)).reduce(this.parser);
        };
        _MacroContext_prototype["throw"] = function (node) {
          if (node == null) {
            node = NothingNode(0, this.scope());
          } else if (!(node instanceof Node)) {
            throw TypeError("Expected node to be a " + __name(Node) + ", got " + __typeof(node));
          }
          return this.parser.Throw(this.index, this.doWrap(node)).reduce(this.parser);
        };
        _MacroContext_prototype["return"] = function (node) {
          if (node == null) {
            node = void 0;
          } else if (!(node instanceof Node)) {
            throw TypeError("Expected node to be one of " + (__name(Node) + " or undefined") + ", got " + __typeof(node));
          }
          return this.parser.Return(this.index, this.doWrap(node)).reduce(this.parser);
        };
        _MacroContext_prototype["yield"] = function (node) {
          if (node == null) {
            node = NothingNode(0, this.scope());
          } else if (!(node instanceof Node)) {
            throw TypeError("Expected node to be a " + __name(Node) + ", got " + __typeof(node));
          }
          return this.parser.Yield(this.index, this.doWrap(node)).reduce(this.parser);
        };
        _MacroContext_prototype["debugger"] = function () {
          return this.parser.Debugger(this.index);
        };
        _MacroContext_prototype["break"] = function (label) {
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          return this.parser.Break(this.index, label);
        };
        _MacroContext_prototype["continue"] = function (label) {
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          return this.parser.Continue(this.index, label);
        };
        _MacroContext_prototype.spread = function (node) {
          if (!(node instanceof Node)) {
            throw TypeError("Expected node to be a " + __name(Node) + ", got " + __typeof(node));
          }
          return this.parser.Spread(this.index, node);
        };
        _MacroContext_prototype.real = function (node) {
          node = this.macroExpand1(node);
          if (node instanceof TmpWrapperNode) {
            return node.node;
          } else {
            return node;
          }
        };
        _MacroContext_prototype.rewrap = function (newNode, oldNode) {
          oldNode = this.macroExpand1(oldNode);
          if (oldNode instanceof TmpWrapperNode) {
            if (newNode instanceof TmpWrapperNode) {
              return TmpWrapperNode(newNode.index, newNode.scope, newNode, oldNode.tmps.concat(newNode.tmps));
            } else {
              return TmpWrapperNode(newNode.index, newNode.scope, newNode, oldNode.tmps.slice());
            }
          } else {
            return newNode;
          }
        };
        _MacroContext_prototype.eq = function (alpha, bravo) {
          alpha = this.real(alpha);
          bravo = this.real(bravo);
          if (alpha instanceof ConstNode) {
            return bravo instanceof ConstNode && alpha.value === bravo.value;
          } else if (alpha instanceof IdentNode) {
            return bravo instanceof IdentNode && alpha.name === bravo.name;
          } else {
            return false;
          }
        };
        _MacroContext_prototype.isLabeledBlock = function (node) {
          node = this.real(node);
          if (node instanceof BlockNode || node instanceof IfNode || node instanceof SwitchNode || node instanceof ForNode || node instanceof ForInNode || node instanceof TryCatchNode || node instanceof TryFinallyNode) {
            return node.label != null;
          } else {
            return false;
          }
        };
        _MacroContext_prototype.isBreak = function (node) {
          return this.real(node) instanceof BreakNode;
        };
        _MacroContext_prototype.isContinue = function (node) {
          return this.real(node) instanceof ContinueNode;
        };
        _MacroContext_prototype.label = function (node) {
          node = this.real(node);
          if (node instanceof BreakNode || node instanceof ContinueNode || node instanceof BlockNode || node instanceof IfNode || node instanceof SwitchNode || node instanceof ForNode || node instanceof ForInNode || node instanceof TryCatchNode || node instanceof TryFinallyNode) {
            return node.label;
          } else {
            return null;
          }
        };
        _MacroContext_prototype.withLabel = function (node, label) {
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          return node.withLabel(label, this.parser);
        };
        _MacroContext_prototype.macroExpand1 = function (node) {
          var expanded;
          if (node instanceof Node) {
            expanded = this.parser.macroExpand1(node);
            if (expanded instanceof Node) {
              return expanded.reduce(this.parser);
            } else {
              return expanded;
            }
          } else {
            return node;
          }
        };
        _MacroContext_prototype.macroExpandAll = function (node) {
          var expanded;
          if (node instanceof Node) {
            expanded = this.parser.macroExpandAll(node);
            if (expanded instanceof Node) {
              return expanded.reduce(this.parser);
            } else {
              return expanded;
            }
          } else {
            return node;
          }
        };
        _MacroContext_prototype.tmp = function (name, save, type) {
          var tmp;
          if (name == null) {
            name = "ref";
          } else if (typeof name !== "string") {
            throw TypeError("Expected name to be a String, got " + __typeof(name));
          }
          if (save == null) {
            save = false;
          } else if (typeof save !== "boolean") {
            throw TypeError("Expected save to be a Boolean, got " + __typeof(save));
          }
          if (type == null) {
            type = Type.any;
          } else if (typeof type === "string") {
            if (!((__owns.call(Type, type) ? Type[type] : void 0) instanceof Type)) {
              throw Error(__strnum(type) + " is not a known type name");
            }
            if (__owns.call(Type, type)) {
              type = Type[type];
            }
          } else if (!(type instanceof Type)) {
            throw Error("Must provide a Type or a string for type, got " + __typeof(type));
          }
          tmp = this.parser.makeTmp(this.index, name, type);
          (save ? this.savedTmps : this.unsavedTmps).push(tmp.id);
          return tmp;
        };
        _MacroContext_prototype.getTmps = function () {
          return { unsaved: this.unsavedTmps.slice(), saved: this.savedTmps.slice() };
        };
        _MacroContext_prototype.isConst = function (node) {
          return node === void 0 || node instanceof Node && this.real(node).isConst();
        };
        _MacroContext_prototype.value = function (node) {
          var expanded;
          if (node === void 0) {
            return;
          } else if (node instanceof Node) {
            expanded = this.real(node);
            if (expanded.isConst()) {
              return expanded.constValue();
            }
          }
        };
        _MacroContext_prototype["const"] = function (value) {
          return this.parser.Const(this.index, value);
        };
        _MacroContext_prototype.isSpread = function (node) {
          return this.real(node) instanceof SpreadNode;
        };
        _MacroContext_prototype.spreadSubnode = function (node) {
          node = this.real(node);
          if (node instanceof SpreadNode) {
            return node.node;
          }
        };
        _MacroContext_prototype.isNode = function (node) {
          return node instanceof Node;
        };
        _MacroContext_prototype.isIdent = function (node) {
          return this.real(node) instanceof IdentNode;
        };
        _MacroContext_prototype.isPrimordial = function (node) {
          node = this.real(node);
          return node instanceof IdentNode && node.isPrimordial();
        };
        _MacroContext_prototype.isTmp = function (node) {
          return this.real(node) instanceof TmpNode;
        };
        _MacroContext_prototype.isIdentOrTmp = function (node) {
          var _ref;
          return (_ref = this.real(node)) instanceof IdentNode || _ref instanceof TmpNode;
        };
        _MacroContext_prototype.name = function (node) {
          node = this.real(node);
          if (this.isIdent(node)) {
            return node.name;
          }
        };
        _MacroContext_prototype.ident = function (name) {
          if (typeof name !== "string") {
            throw TypeError("Expected name to be a String, got " + __typeof(name));
          }
          if (require("./jsutils").isAcceptableIdent(name, true)) {
            return this.parser.Ident(this.index, name);
          }
        };
        _MacroContext_prototype.isCall = function (node) {
          return this.real(node) instanceof CallNode;
        };
        _MacroContext_prototype.callFunc = function (node) {
          node = this.real(node);
          if (node instanceof CallNode) {
            return node.func;
          }
        };
        _MacroContext_prototype.callArgs = function (node) {
          node = this.real(node);
          if (node instanceof CallNode) {
            return node.args;
          }
        };
        _MacroContext_prototype.isSuper = function (node) {
          return this.real(node) instanceof SuperNode;
        };
        _MacroContext_prototype.superChild = function (node) {
          node = this.real(node);
          if (this.isSuper(node)) {
            return node.child;
          }
        };
        _MacroContext_prototype.superArgs = function (node) {
          node = this.real(node);
          if (this.isSuper(node)) {
            return node.args;
          }
        };
        _MacroContext_prototype.callIsNew = function (node) {
          node = this.real(node);
          if (node instanceof CallNode) {
            return !!node.isNew;
          } else {
            return false;
          }
        };
        _MacroContext_prototype.callIsApply = function (node) {
          node = this.real(node);
          if (node instanceof CallNode) {
            return !!node.isApply;
          } else {
            return false;
          }
        };
        _MacroContext_prototype.call = function (func, args, isNew, isApply) {
          var _i, _this;
          _this = this;
          if (!(func instanceof Node)) {
            throw TypeError("Expected func to be a " + __name(Node) + ", got " + __typeof(func));
          }
          if (args == null) {
            args = [];
          } else if (!__isArray(args)) {
            throw TypeError("Expected args to be an Array, got " + __typeof(args));
          } else {
            for (_i = args.length; _i--; ) {
              if (!(args[_i] instanceof Node)) {
                throw TypeError("Expected " + ("args[" + _i + "]") + " to be a " + __name(Node) + ", got " + __typeof(args[_i]));
              }
            }
          }
          if (isNew == null) {
            isNew = false;
          } else if (typeof isNew !== "boolean") {
            throw TypeError("Expected isNew to be a Boolean, got " + __typeof(isNew));
          }
          if (isApply == null) {
            isApply = false;
          } else if (typeof isApply !== "boolean") {
            throw TypeError("Expected isApply to be a Boolean, got " + __typeof(isApply));
          }
          if (isNew && isApply) {
            throw Error("Cannot specify both is-new and is-apply");
          }
          return CallNode(
            func.index,
            this.scope(),
            this.doWrap(func),
            (function () {
              var _arr, _i2, _len, arg;
              for (_arr = [], _i2 = 0, _len = args.length; _i2 < _len; ++_i2) {
                arg = args[_i2];
                _arr.push(_this.doWrap(arg));
              }
              return _arr;
            }()),
            isNew,
            isApply
          ).reduce(this.parser);
        };
        _MacroContext_prototype.func = function (params, body, autoReturn, bound, curry, asType, generator, generic) {
          var _arr, _arr2, _i, _i2, _len, func, p, param, scope;
          if (!(body instanceof Node)) {
            throw TypeError("Expected body to be a " + __name(Node) + ", got " + __typeof(body));
          }
          if (autoReturn == null) {
            autoReturn = true;
          } else if (typeof autoReturn !== "boolean") {
            throw TypeError("Expected autoReturn to be a Boolean, got " + __typeof(autoReturn));
          }
          if (bound == null) {
            bound = false;
          } else if (!(bound instanceof Node) && typeof bound !== "boolean") {
            throw TypeError("Expected bound to be one of " + (__name(Node) + " or Boolean") + ", got " + __typeof(bound));
          }
          if (curry == null) {
            curry = false;
          } else if (typeof curry !== "boolean") {
            throw TypeError("Expected curry to be a Boolean, got " + __typeof(curry));
          }
          if (asType == null) {
            asType = void 0;
          } else if (!(asType instanceof Node)) {
            throw TypeError("Expected asType to be one of " + (__name(Node) + " or undefined") + ", got " + __typeof(asType));
          }
          if (generator == null) {
            generator = false;
          } else if (typeof generator !== "boolean") {
            throw TypeError("Expected generator to be a Boolean, got " + __typeof(generator));
          }
          if (generic == null) {
            generic = [];
          } else if (!__isArray(generic)) {
            throw TypeError("Expected generic to be an Array, got " + __typeof(generic));
          } else {
            for (_i = generic.length; _i--; ) {
              if (!(generic[_i] instanceof IdentNode)) {
                throw TypeError("Expected " + ("generic[" + _i + "]") + " to be a " + __name(IdentNode) + ", got " + __typeof(generic[_i]));
              }
            }
          }
          scope = this.parser.pushScope(true);
          for (_arr = [], _arr2 = __toArray(params), _i2 = 0, _len = _arr2.length; _i2 < _len; ++_i2) {
            param = _arr2[_i2];
            p = param.rescope(scope);
            addParamToScope(scope, p);
            _arr.push(p);
          }
          params = _arr;
          func = FunctionNode(
            body.index,
            scope.parent,
            params,
            body.rescope(scope),
            autoReturn,
            bound,
            curry,
            asType,
            generator,
            generic
          ).reduce(this.parser);
          this.parser.popScope();
          return func;
        };
        _MacroContext_prototype.isFunc = function (node) {
          return this.real(node) instanceof FunctionNode;
        };
        _MacroContext_prototype.funcBody = function (node) {
          node = this.real(node);
          if (this.isFunc(node)) {
            return node.body;
          }
        };
        _MacroContext_prototype.funcParams = function (node) {
          node = this.real(node);
          if (this.isFunc(node)) {
            return node.params;
          }
        };
        _MacroContext_prototype.funcIsAutoReturn = function (node) {
          node = this.real(node);
          if (this.isFunc(node)) {
            return !!node.autoReturn;
          }
        };
        _MacroContext_prototype.funcIsBound = function (node) {
          node = this.real(node);
          if (this.isFunc(node)) {
            return !!node.bound && !(node.bound instanceof Node);
          }
        };
        _MacroContext_prototype.funcIsCurried = function (node) {
          node = this.real(node);
          if (this.isFunc(node)) {
            return !!node.curry;
          }
        };
        _MacroContext_prototype.funcAsType = function (node) {
          node = this.real(node);
          if (this.isFunc(node)) {
            return node.asType;
          }
        };
        _MacroContext_prototype.funcIsGenerator = function (node) {
          node = this.real(node);
          if (this.isFunc(node)) {
            return !!node.generator;
          }
        };
        _MacroContext_prototype.funcGeneric = function (node) {
          node = this.real(node);
          if (this.isFunc(node)) {
            return node.generic.slice();
          } else {
            return [];
          }
        };
        _MacroContext_prototype.param = function (ident, defaultValue, spread, isMutable, asType) {
          if (!(ident instanceof Node)) {
            throw TypeError("Expected ident to be a " + __name(Node) + ", got " + __typeof(ident));
          }
          return ParamNode(
            ident.index,
            ident.scope,
            ident,
            defaultValue,
            spread,
            isMutable,
            asType
          ).reduce(this.parser);
        };
        _MacroContext_prototype.isParam = function (node) {
          return this.real(node) instanceof ParamNode;
        };
        _MacroContext_prototype.paramIdent = function (node) {
          node = this.real(node);
          if (this.isParam(node)) {
            return node.ident;
          }
        };
        _MacroContext_prototype.paramDefaultValue = function (node) {
          node = this.real(node);
          if (this.isParam(node)) {
            return node.defaultValue;
          }
        };
        _MacroContext_prototype.paramIsSpread = function (node) {
          node = this.real(node);
          if (this.isParam(node)) {
            return !!node.spread;
          }
        };
        _MacroContext_prototype.paramIsMutable = function (node) {
          node = this.real(node);
          if (this.isParam(node)) {
            return !!node.isMutable;
          }
        };
        _MacroContext_prototype.paramType = function (node) {
          node = this.real(node);
          if (this.isParam(node)) {
            return node.asType;
          }
        };
        _MacroContext_prototype.isArray = function (node) {
          return this.real(node) instanceof ArrayNode;
        };
        _MacroContext_prototype.elements = function (node) {
          node = this.real(node);
          if (this.isArray(node)) {
            return node.elements;
          }
        };
        _MacroContext_prototype.arrayHasSpread = function (node) {
          var _arr, _i, _len, _some, element;
          node = this.real(node);
          if (node instanceof ArrayNode) {
            _some = false;
            for (_arr = __toArray(node.elements), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              element = _arr[_i];
              if (this.real(element) instanceof SpreadNode) {
                _some = true;
                break;
              }
            }
            return _some;
          } else {
            return false;
          }
        };
        _MacroContext_prototype.isObject = function (node) {
          return this.real(node) instanceof ObjectNode;
        };
        _MacroContext_prototype.pairs = function (node) {
          node = this.real(node);
          if (this.isObject(node) || this.isTypeObject(node)) {
            return node.pairs;
          }
        };
        _MacroContext_prototype.isBlock = function (node) {
          return this.real(node) instanceof BlockNode;
        };
        _MacroContext_prototype.nodes = function (node) {
          node = this.real(node);
          if (this.isBlock(node)) {
            return node.nodes;
          }
        };
        _MacroContext_prototype.array = function (elements) {
          var _i, _this;
          _this = this;
          if (!__isArray(elements)) {
            throw TypeError("Expected elements to be an Array, got " + __typeof(elements));
          } else {
            for (_i = elements.length; _i--; ) {
              if (!(elements[_i] instanceof Node)) {
                throw TypeError("Expected " + ("elements[" + _i + "]") + " to be a " + __name(Node) + ", got " + __typeof(elements[_i]));
              }
            }
          }
          return this.parser.Array(0, (function () {
            var _arr, _i2, _len, element;
            for (_arr = [], _i2 = 0, _len = elements.length; _i2 < _len; ++_i2) {
              element = elements[_i2];
              _arr.push(_this.doWrap(element));
            }
            return _arr;
          }())).reduce(this.parser);
        };
        _MacroContext_prototype.object = function (pairs) {
          var _i, _this;
          _this = this;
          if (!__isArray(pairs)) {
            throw TypeError("Expected pairs to be an Array, got " + __typeof(pairs));
          } else {
            for (_i = pairs.length; _i--; ) {
              if (typeof pairs[_i] !== "object" || pairs[_i] === null) {
                throw TypeError("Expected " + ("pairs[" + _i + "]") + " to be an Object, got " + __typeof(pairs[_i]));
              } else {
                if (!(pairs[_i].key instanceof Node)) {
                  throw TypeError("Expected " + ("pairs[" + _i + "].key") + " to be a " + __name(Node) + ", got " + __typeof(pairs[_i].key));
                }
                if (!(pairs[_i].value instanceof Node)) {
                  throw TypeError("Expected " + ("pairs[" + _i + "].value") + " to be a " + __name(Node) + ", got " + __typeof(pairs[_i].value));
                }
              }
            }
          }
          return this.parser.Object(0, (function () {
            var _arr, _i2, _len, _ref, key, property, value;
            for (_arr = [], _i2 = 0, _len = pairs.length; _i2 < _len; ++_i2) {
              _ref = pairs[_i2];
              key = _ref.key;
              value = _ref.value;
              property = _ref.property;
              _arr.push({ key: _this.doWrap(key), value: _this.doWrap(value)(property) });
            }
            return _arr;
          }())).reduce(this.parser);
        };
        _MacroContext_prototype.type = function (node) {
          if (typeof node === "string") {
            return __owns.call(Type, node) && Type[node] || __throw(Error("Unknown type " + __strnum(node)));
          } else if (node instanceof Node) {
            return node.type(this.parser);
          } else {
            throw Error("Can only retrieve type from a String or Node, got " + __typeof(node));
          }
        };
        _MacroContext_prototype.toType = nodeToType;
        _MacroContext_prototype.isComplex = function (node) {
          node = this.real(node);
          return node != null && !(node instanceof ConstNode) && !(node instanceof IdentNode) && !(node instanceof TmpNode) && !(node instanceof ThisNode) && !(node instanceof ArgsNode) && (!(node instanceof BlockNode) || node.nodes.length !== 0);
        };
        _MacroContext_prototype.isNoop = function (node) {
          node = this.real(node);
          return node.isNoop(this.parser);
        };
        _MacroContext_prototype.isNothing = function (node) {
          return this.real(node) instanceof NothingNode;
        };
        _MacroContext_prototype.isTypeArray = function (node) {
          node = this.real(node);
          return node instanceof TypeGenericNode && node.basetype instanceof IdentNode && node.basetype.name === "Array";
        };
        _MacroContext_prototype.subtype = function (node) {
          node = this.real(node);
          if (node instanceof TypeGenericNode && node.basetype instanceof IdentNode && node.basetype.name === "Array") {
            return node.args[0];
          }
        };
        _MacroContext_prototype.isTypeGeneric = function (node) {
          return this.real(node) instanceof TypeGenericNode;
        };
        _MacroContext_prototype.basetype = function (node) {
          node = this.real(node);
          return node instanceof TypeGenericNode && node.basetype;
        };
        _MacroContext_prototype.typeArguments = function (node) {
          node = this.real(node);
          return node instanceof TypeGenericNode && node.args;
        };
        _MacroContext_prototype.isTypeObject = function (node) {
          return this.real(node) instanceof TypeObjectNode;
        };
        _MacroContext_prototype.isTypeFunction = function (node) {
          node = this.real(node);
          return node instanceof TypeGenericNode && node.basetype instanceof IdentNode && node.basetype.name === "Function";
        };
        _MacroContext_prototype.returnType = function (node) {
          node = this.real(node);
          if (node instanceof TypeGenericNode && node.basetype instanceof IdentNode && node.basetype.name === "Function") {
            return node.args[0];
          }
        };
        _MacroContext_prototype.isTypeUnion = function (node) {
          return this.real(node) instanceof TypeUnionNode;
        };
        _MacroContext_prototype.types = function (node) {
          node = this.real(node);
          return this.isTypeUnion(node) && node.types;
        };
        _MacroContext_prototype.isThis = function (node) {
          return this.real(node) instanceof ThisNode;
        };
        _MacroContext_prototype.isArguments = function (node) {
          node = this.real(node);
          return node instanceof ArgsNode;
        };
        _MacroContext_prototype.isDef = function (node) {
          return this.real(node) instanceof DefNode;
        };
        _MacroContext_prototype.isAssign = function (node) {
          return this.real(node) instanceof AssignNode;
        };
        _MacroContext_prototype.isBinary = function (node) {
          return this.real(node) instanceof BinaryNode;
        };
        _MacroContext_prototype.isUnary = function (node) {
          return this.real(node) instanceof UnaryNode;
        };
        _MacroContext_prototype.op = function (node) {
          node = this.real(node);
          if (this.isAssign(node) || this.isBinary(node) || this.isUnary(node)) {
            return node.op;
          }
        };
        _MacroContext_prototype.left = function (node) {
          node = this.real(node);
          if (this.isDef(node) || this.isBinary(node)) {
            return node.left;
          }
        };
        _MacroContext_prototype.right = function (node) {
          node = this.real(node);
          if (this.isDef(node) || this.isBinary(node)) {
            return node.right;
          }
        };
        _MacroContext_prototype.unaryNode = function (node) {
          node = this.real(node);
          if (this.isUnary(node)) {
            return node.node;
          }
        };
        _MacroContext_prototype.isAccess = function (node) {
          return this.real(node) instanceof AccessNode;
        };
        _MacroContext_prototype.parent = function (node) {
          node = this.real(node);
          if (node instanceof AccessNode) {
            return node.parent;
          }
        };
        _MacroContext_prototype.child = function (node) {
          node = this.real(node);
          if (node instanceof AccessNode) {
            return node.child;
          }
        };
        _MacroContext_prototype.isIf = function (node) {
          return this.real(node) instanceof IfNode;
        };
        _MacroContext_prototype.test = function (node) {
          node = this.real(node);
          if (node instanceof IfNode) {
            return node.test;
          }
        };
        _MacroContext_prototype.whenTrue = function (node) {
          node = this.real(node);
          if (node instanceof IfNode) {
            return node.whenTrue;
          }
        };
        _MacroContext_prototype.whenFalse = function (node) {
          node = this.real(node);
          if (node instanceof IfNode) {
            return node.whenFalse;
          }
        };
        _MacroContext_prototype.cache = function (node, init, name, save) {
          if (!(node instanceof Node)) {
            throw TypeError("Expected node to be a " + __name(Node) + ", got " + __typeof(node));
          }
          if (name == null) {
            name = "ref";
          } else if (typeof name !== "string") {
            throw TypeError("Expected name to be a String, got " + __typeof(name));
          }
          if (save == null) {
            save = false;
          } else if (typeof save !== "boolean") {
            throw TypeError("Expected save to be a Boolean, got " + __typeof(save));
          }
          return this.maybeCache(
            node,
            function (setNode, node, cached) {
              if (cached) {
                init.push(setNode);
              }
              return node;
            },
            name,
            save
          );
        };
        _MacroContext_prototype.maybeCache = function (node, func, name, save) {
          var tmp, type;
          if (!(node instanceof Node)) {
            throw TypeError("Expected node to be a " + __name(Node) + ", got " + __typeof(node));
          }
          if (name == null) {
            name = "ref";
          } else if (typeof name !== "string") {
            throw TypeError("Expected name to be a String, got " + __typeof(name));
          }
          if (save == null) {
            save = false;
          } else if (typeof save !== "boolean") {
            throw TypeError("Expected save to be a Boolean, got " + __typeof(save));
          }
          node = this.macroExpand1(node);
          if (this.isComplex(node)) {
            type = node.type(this.parser);
            tmp = this.tmp(name, save, type);
            this.scope().add(tmp, false, type);
            return func(
              this.parser.Block(this.index, [
                this.parser.Var(this.index, tmp, false),
                this.parser.Assign(this.index, tmp, "=", this.doWrap(node))
              ]),
              tmp,
              true
            );
          } else {
            return func(node, node, false);
          }
        };
        _MacroContext_prototype.maybeCacheAccess = function (node, func, parentName, childName, save) {
          var _this;
          _this = this;
          if (!(node instanceof Node)) {
            throw TypeError("Expected node to be a " + __name(Node) + ", got " + __typeof(node));
          }
          if (parentName == null) {
            parentName = "ref";
          } else if (typeof parentName !== "string") {
            throw TypeError("Expected parentName to be a String, got " + __typeof(parentName));
          }
          if (childName == null) {
            childName = "ref";
          } else if (typeof childName !== "string") {
            throw TypeError("Expected childName to be a String, got " + __typeof(childName));
          }
          if (save == null) {
            save = false;
          } else if (typeof save !== "boolean") {
            throw TypeError("Expected save to be a Boolean, got " + __typeof(save));
          }
          node = this.macroExpand1(node);
          if (this.isAccess(node)) {
            return this.maybeCache(
              this.parent(node),
              function (setParent, parent, parentCached) {
                return _this.maybeCache(
                  _this.child(node),
                  function (setChild, child, childCached) {
                    if (parentCached || childCached) {
                      return func(
                        _this.parser.Access(_this.index, setParent, setChild),
                        _this.parser.Access(_this.index, parent, child),
                        true
                      );
                    } else {
                      return func(node, node, false);
                    }
                  },
                  childName,
                  save
                );
              },
              parentName,
              save
            );
          } else {
            return func(node, node, false);
          }
        };
        _MacroContext_prototype.empty = function (node) {
          var _arr, _every, _i, item;
          if (node == null) {
            return true;
          } else if (!(node instanceof Node)) {
            return false;
          } else if (node instanceof BlockNode) {
            _every = true;
            for (_arr = __toArray(node.nodes), _i = _arr.length; _i--; ) {
              item = _arr[_i];
              if (!this.empty(item)) {
                _every = false;
                break;
              }
            }
            return _every;
          } else {
            return node instanceof NothingNode;
          }
        };
        function constifyObject(obj, index, scope) {
          if (!(scope instanceof Scope)) {
            throw TypeError("Expected scope to be a " + __name(Scope) + ", got " + __typeof(scope));
          }
          if (typeof obj !== "object" || obj === null || obj instanceof RegExp) {
            return ConstNode(index, scope, obj);
          } else if (__isArray(obj)) {
            return ArrayNode(index, scope, (function () {
              var _arr, _arr2, _i, _len, item;
              for (_arr = [], _arr2 = __toArray(obj), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                item = _arr2[_i];
                _arr.push(constifyObject(item, index, scope));
              }
              return _arr;
            }()));
          } else if (obj instanceof IdentNode && __num(obj.name.length) > 1 && obj.name.charCodeAt(0) === 36) {
            return CallNode(
              obj.index,
              scope,
              IdentNode(obj.index, scope, "__wrap"),
              [IdentNode(obj.index, scope, obj.name.substring(1))]
            );
          } else if (obj instanceof CallNode && !obj.isNew && !obj.isApply && obj.func instanceof IdentNode && obj.func.name === "$") {
            if (obj.args.length !== 1 || obj.args[0] instanceof SpreadNode) {
              throw Error("Can only use $() in an AST if it has one argument.");
            }
            return CallNode(
              obj.index,
              scope,
              IdentNode(obj.index, scope, "__wrap"),
              [obj.args[0]]
            );
          } else if (obj instanceof MacroConstNode) {
            return CallNode(
              obj.index,
              scope,
              IdentNode(obj.index, scope, "__const"),
              [ConstNode(obj.index, scope, obj.name)]
            );
          } else if (obj instanceof Node) {
            if (obj.constructor === Node) {
              throw Error("Cannot constify a raw node");
            }
            return CallNode(
              obj.index,
              scope,
              IdentNode(obj.index, scope, "__node"),
              [
                ConstNode(obj.index, scope, obj.constructor.cappedName),
                ConstNode(obj.index, scope, obj.index)
              ].concat((function () {
                var _arr, _arr2, _i, _len, k;
                for (_arr = [], _arr2 = __toArray(obj.constructor.argNames), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                  k = _arr2[_i];
                  _arr.push(constifyObject(obj[k], obj.index, scope));
                }
                return _arr;
              }()))
            );
          } else {
            return ObjectNode(index, scope, (function () {
              var _arr, k, v;
              _arr = [];
              for (k in obj) {
                if (__owns.call(obj, k)) {
                  v = obj[k];
                  _arr.push({
                    key: ConstNode(index, scope, k),
                    value: constifyObject(v, index, scope)
                  });
                }
              }
              return _arr;
            }()));
          }
        }
        MacroContext.constifyObject = constifyObject;
        function walk(node, func) {
          var _ref;
          if (typeof node !== "object" || node === null || node instanceof RegExp) {
            return node;
          }
          if (!(node instanceof Node)) {
            throw Error("Unexpected type to walk through: " + __typeof(node));
          }
          if (!(node instanceof BlockNode) && (_ref = func(node)) != null) {
            return _ref;
          }
          return node.walk(function (x) {
            return walk(x, func);
          });
        }
        _MacroContext_prototype.wrap = function (value) {
          var _ref;
          if (__isArray(value)) {
            return BlockNode(0, this.scope(), value).reduce(this.parser);
          } else if (value instanceof Node) {
            return value;
          } else if (value == null) {
            return NothingNode(0, this.scope());
          } else if (value instanceof RegExp || (_ref = typeof value) === "string" || _ref === "boolean" || _ref === "number") {
            return ConstNode(0, this.scope(), value);
          } else {
            return value;
          }
        };
        _MacroContext_prototype.node = function (type, index) {
          var args;
          args = __slice.call(arguments, 2);
          if (type === "MacroAccess") {
            return this.macro.apply(this, [index].concat(__toArray(args)));
          } else {
            return Node[type].apply(Node, [index, this.scope()].concat(__toArray(args))).reduce(this.parser);
          }
        };
        _MacroContext_prototype.getConst = function (name) {
          var c;
          if (typeof name !== "string") {
            throw TypeError("Expected name to be a String, got " + __typeof(name));
          }
          c = this.parser.getConst(name);
          if (!c) {
            throw Error("Unknown const '" + name + "'");
          }
          return ConstNode(0, this.scope(), c.value);
        };
        _MacroContext_prototype.macro = function (index, id, callLine, data, position, inGenerator, inEvilAst) {
          return Node.MacroAccess(
            index,
            this.scope(),
            id,
            callLine,
            data,
            position,
            inGenerator || this.parser.inGenerator.peek(),
            inEvilAst
          ).reduce(this.parser);
        };
        _MacroContext_prototype.walk = function (node, func) {
          if (node != null && !(node instanceof Node)) {
            throw TypeError("Expected node to be one of " + (__name(Node) + " or undefined or null") + ", got " + __typeof(node));
          }
          if (typeof func !== "function") {
            throw TypeError("Expected func to be a Function, got " + __typeof(func));
          }
          if (node != null) {
            return walk(node, func);
          } else {
            return node;
          }
        };
        _MacroContext_prototype.hasFunc = function (node) {
          var FOUND, walker;
          if (this._hasFunc != null) {
            return this._hasFunc;
          } else {
            FOUND = {};
            walker = function (x) {
              if (x instanceof FunctionNode) {
                throw FOUND;
              } else {
                return x.walk(walker);
              }
            };
            try {
              walk(this.macroExpandAll(node), walker);
            } catch (e) {
              if (e !== FOUND) {
                throw e;
              }
              return this._hasFunc = true;
            }
            return this._hasFunc = false;
          }
        };
        _MacroContext_prototype.isStatement = function (node) {
          node = this.macroExpand1(node);
          return node instanceof Node && node.isStatement();
        };
        _MacroContext_prototype.isType = function (node, name) {
          var type;
          if (typeof name !== "string") {
            throw TypeError("Expected name to be a String, got " + __typeof(name));
          }
          if (__owns.call(Type, name)) {
            type = Type[name];
          }
          if (type == null || !(type instanceof Type)) {
            throw Error(name + " is not a known type name");
          }
          return node.type(this.parser).isSubsetOf(type);
        };
        _MacroContext_prototype.hasType = function (node, name) {
          var type;
          if (typeof name !== "string") {
            throw TypeError("Expected name to be a String, got " + __typeof(name));
          }
          if (__owns.call(Type, name)) {
            type = Type[name];
          }
          if (type == null || !(type instanceof Type)) {
            throw Error(name + " is not a known type name");
          }
          return node.type(this.parser).overlaps(type);
        };
        mutators = {
          Block: function (x, func) {
            var lastNode, len, nodes;
            nodes = x.nodes;
            len = nodes.length;
            if (len !== 0) {
              lastNode = this.mutateLast(nodes[__num(len) - 1], func);
              if (lastNode !== nodes[__num(len) - 1]) {
                return BlockNode(
                  x.index,
                  x.scope,
                  __toArray(__slice.call(nodes, 0, -1)).concat([lastNode]),
                  x.label
                );
              }
            }
            return x;
          },
          If: function (x, func) {
            var whenFalse, whenTrue;
            whenTrue = this.mutateLast(x.whenTrue, func);
            whenFalse = this.mutateLast(x.whenFalse, func);
            if (whenTrue !== x.whenTrue || whenFalse !== x.whenFalse) {
              return IfNode(
                x.index,
                x.scope,
                x.test,
                whenTrue,
                whenFalse,
                x.label
              );
            } else {
              return x;
            }
          },
          Switch: function (x, func) {
            var _this, cases, defaultCase;
            _this = this;
            cases = map(x.cases, function (case_) {
              var body;
              if (case_.fallthrough) {
                return case_;
              } else {
                body = _this.mutateLast(case_.body, func);
                if (body !== case_.body) {
                  return { node: case_.node, body: body, fallthrough: case_.fallthrough };
                } else {
                  return case_;
                }
              }
            });
            defaultCase = this.mutateLast(x.defaultCase || this.noop(), func);
            if (cases !== x.cases || defaultCase !== x.defaultCase) {
              return SwitchNode(
                x.index,
                x.scope,
                x.node,
                cases,
                defaultCase,
                x.label
              );
            } else {
              return x;
            }
          },
          TmpWrapper: function (x, func) {
            var node;
            node = this.mutateLast(x.node, func);
            if (node !== x.node) {
              return TmpWrapperNode(x.index, x.scope, node, x.tmps);
            } else {
              return x;
            }
          },
          MacroAccess: function (x, func) {
            return this.mutateLast(this.macroExpand1(x), func);
          },
          TryCatch: function (x, func) {
            var catchBody, tryBody;
            tryBody = this.mutateLast(x.tryBody, func);
            catchBody = this.mutateLast(x.catchBody, func);
            if (tryBody !== x.tryBody || catchBody !== x.catchBody) {
              return TryCatchNode(
                x.index,
                x.scope,
                tryBody,
                x.catchIdent,
                catchBody,
                x.label
              );
            } else {
              return x;
            }
          },
          Break: identity,
          Continue: identity,
          Nothing: identity,
          Return: identity,
          Debugger: identity,
          Throw: identity
        };
        _MacroContext_prototype.mutateLast = function (node, func, includeNoop) {
          var _ref;
          if (typeof func !== "function") {
            throw TypeError("Expected func to be a Function, got " + __typeof(func));
          }
          if (typeof node !== "object" || node === null || node instanceof RegExp) {
            return node;
          }
          if (!(node instanceof Node)) {
            throw Error("Unexpected type to mutate-last through: " + __typeof(node));
          }
          if (!__owns.call(mutators, node.constructor.cappedName) || includeNoop && node instanceof NothingNode) {
            if ((_ref = func.call(this, node)) != null) {
              return _ref;
            } else {
              return node;
            }
          } else {
            return mutators[node.constructor.cappedName].call(this, node, func);
          }
        };
        _MacroContext_prototype.canMutateLast = function (node) {
          return node instanceof Node && __owns.call(mutators, node.constructor.cappedName);
        };
        return MacroContext;
      }());
      module.exports = MacroContext;
    }.call(this));
    
    return module.exports;
  };
  require['./jstranslator'] = function () {
    var module = { exports: this };
    var exports = this;
    (function (GLOBAL) {
      "use strict";
      var __arrayToIter, __cmp, __create, __curry, __first, __import,
          __indexOfIdentical, __isArray, __iter, __name, __num, __owns, __slice,
          __strnum, __throw, __toArray, __typeof, _ref, ast, AstNode, Cache,
          GeneratorBuilder, GeneratorState, generatorTranslate, getPos,
          isPrimordial, MacroHolder, Map, ParserNode, Scope, translators, Type;
      __arrayToIter = (function () {
        var proto;
        proto = {
          iterator: function () {
            return this;
          },
          next: function () {
            var array, i;
            i = __num(this.index) + 1;
            array = this.array;
            if (i >= __num(array.length)) {
              return { done: true, value: void 0 };
            } else {
              this.index = i;
              return { done: false, value: array[i] };
            }
          }
        };
        return function (array) {
          var _o;
          if (!__isArray(array)) {
            throw TypeError("Expected array to be an Array, got " + __typeof(array));
          }
          _o = __create(proto);
          _o.array = array;
          _o.index = -1;
          return _o;
        };
      }());
      __cmp = function (left, right) {
        var type;
        if (left === right) {
          return 0;
        } else {
          type = typeof left;
          if (type !== "number" && type !== "string") {
            throw TypeError("Cannot compare a non-number/string: " + type);
          } else if (type !== typeof right) {
            throw TypeError("Cannot compare elements of different types: " + type + " vs " + typeof right);
          } else if (left < right) {
            return -1;
          } else {
            return 1;
          }
        }
      };
      __create = typeof Object.create === "function" ? Object.create
        : function (x) {
          function F() {}
          F.prototype = x;
          return new F();
        };
      __curry = function (numArgs, f) {
        var currier;
        if (typeof numArgs !== "number") {
          throw TypeError("Expected numArgs to be a Number, got " + __typeof(numArgs));
        }
        if (typeof f !== "function") {
          throw TypeError("Expected f to be a Function, got " + __typeof(f));
        }
        if (numArgs > 1) {
          currier = function (args) {
            var ret;
            if (__num(args.length) >= numArgs) {
              return f.apply(this, args);
            } else {
              ret = function () {
                if (arguments.length === 0) {
                  return ret;
                } else {
                  return currier.call(this, args.concat(__slice.call(arguments)));
                }
              };
              return ret;
            }
          };
          return currier([]);
        } else {
          return f;
        }
      };
      __first = function (x) {
        return x;
      };
      __import = function (dest, source) {
        var k;
        for (k in source) {
          if (__owns.call(source, k)) {
            dest[k] = source[k];
          }
        }
        return dest;
      };
      __indexOfIdentical = function (array, item) {
        var _arr, check, i, inf;
        if (typeof item === "number") {
          if (item !== item) {
            for (_arr = __toArray(array), i = _arr.length; i--; ) {
              check = _arr[i];
              if (check !== check) {
                return i;
              }
            }
            return -1;
          } else if (item === 0) {
            inf = 1 / item;
            for (_arr = __toArray(array), i = _arr.length; i--; ) {
              check = _arr[i];
              if (check === 0 && 1 / check === inf) {
                return i;
              }
            }
            return -1;
          }
        }
        return array.indexOf(item);
      };
      __isArray = typeof Array.isArray === "function" ? Array.isArray
        : (function () {
          var _toString;
          _toString = Object.prototype.toString;
          return function (x) {
            return _toString.call(x) === "[object Array]";
          };
        }());
      __iter = function (iterable) {
        if (iterable == null) {
          throw TypeError("Expected iterable to be an Object, got " + __typeof(iterable));
        } else if (__isArray(iterable)) {
          return __arrayToIter(iterable);
        } else if (typeof iterable.iterator === "function") {
          return iterable.iterator();
        } else if (typeof iterable.next === "function") {
          return iterable;
        } else {
          throw Error("Expected iterable to be an Array or an Object with an 'iterator' function or an Object with a 'next' function, got " + __typeof(iterable));
        }
      };
      __name = function (func) {
        if (typeof func !== "function") {
          throw TypeError("Expected func to be a Function, got " + __typeof(func));
        }
        return func.displayName || func.name || "";
      };
      __num = function (num) {
        if (typeof num !== "number") {
          throw TypeError("Expected a number, got " + __typeof(num));
        } else {
          return num;
        }
      };
      __owns = Object.prototype.hasOwnProperty;
      __slice = Array.prototype.slice;
      __strnum = function (strnum) {
        var type;
        type = typeof strnum;
        if (type === "string") {
          return strnum;
        } else if (type === "number") {
          return String(strnum);
        } else {
          throw TypeError("Expected a string or number, got " + __typeof(strnum));
        }
      };
      __throw = function (err) {
        throw err;
      };
      __toArray = function (x) {
        if (x == null) {
          throw TypeError("Expected an object, got " + __typeof(x));
        } else if (__isArray(x)) {
          return x;
        } else if (typeof x === "string") {
          return x.split("");
        } else {
          return __slice.call(x);
        }
      };
      __typeof = (function () {
        var _toString;
        _toString = Object.prototype.toString;
        return function (o) {
          if (o === void 0) {
            return "Undefined";
          } else if (o === null) {
            return "Null";
          } else {
            return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
          }
        };
      }());
      Map = typeof GLOBAL.Map === "function" ? GLOBAL.Map
        : (Map = (function () {
          var _Map_prototype;
          function Map(iterable) {
            var _item, _iter, _this, x;
            _this = this instanceof Map ? this : __create(_Map_prototype);
            _this._keys = [];
            _this._values = [];
            if (iterable != null) {
              try {
                for (_iter = __iter(iterable); ; ) {
                  _item = _iter.next();
                  if (_item.done) {
                    break;
                  }
                  x = _item.value;
                  _this.set(x[0], x[1]);
                }
              } finally {
                try {
                  _iter.close();
                } catch (_e) {}
              }
            }
            return _this;
          }
          _Map_prototype = Map.prototype;
          Map.displayName = "Map";
          _Map_prototype.get = function (key) {
            var index;
            index = __indexOfIdentical(this._keys, key);
            if (index === -1) {
              return;
            } else {
              return this._values[index];
            }
          };
          _Map_prototype.has = function (key) {
            return __indexOfIdentical(this._keys, key) !== -1;
          };
          _Map_prototype.set = function (key, value) {
            var index, keys;
            keys = this._keys;
            index = __indexOfIdentical(keys, key);
            if (index === -1) {
              index = keys.length;
              keys[index] = key;
            }
            this._values[index] = value;
          };
          _Map_prototype["delete"] = function (key) {
            var index, keys;
            keys = this._keys;
            index = __indexOfIdentical(keys, key);
            if (index === -1) {
              return false;
            } else {
              keys.splice(index, 1);
              return this._values.splice(index, 1);
            }
          };
          _Map_prototype.keys = function () {
            var _arr, _e, _i, _send, _state, _step, _this, _throw, key;
            _this = this;
            _state = 0;
            function _close() {
              _state = 3;
            }
            function _step(_received) {
              while (true) {
                switch (_state) {
                case 0:
                  _arr = __toArray(_this._keys);
                  _i = _arr.length;
                  ++_state;
                case 1:
                  _state = _i-- ? 2 : 3;
                  break;
                case 2:
                  key = _arr[_i];
                  _state = 1;
                  return { done: false, value: key };
                case 3:
                  return { done: true, value: void 0 };
                default: throw Error("Unknown state: " + _state);
                }
              }
            }
            function _throw(_e) {
              _close();
              throw _e;
            }
            function _send(_received) {
              try {
                return _step(_received);
              } catch (_e) {
                _throw(_e);
              }
            }
            return {
              close: _close,
              iterator: function () {
                return this;
              },
              next: function () {
                return _send(void 0);
              },
              send: _send,
              "throw": function (_e) {
                _throw(_e);
                return _send(void 0);
              }
            };
          };
          _Map_prototype.values = function () {
            var _arr, _e, _i, _send, _state, _step, _this, _throw, value;
            _this = this;
            _state = 0;
            function _close() {
              _state = 3;
            }
            function _step(_received) {
              while (true) {
                switch (_state) {
                case 0:
                  _arr = __toArray(_this._values);
                  _i = _arr.length;
                  ++_state;
                case 1:
                  _state = _i-- ? 2 : 3;
                  break;
                case 2:
                  value = _arr[_i];
                  _state = 1;
                  return { done: false, value: value };
                case 3:
                  return { done: true, value: void 0 };
                default: throw Error("Unknown state: " + _state);
                }
              }
            }
            function _throw(_e) {
              _close();
              throw _e;
            }
            function _send(_received) {
              try {
                return _step(_received);
              } catch (_e) {
                _throw(_e);
              }
            }
            return {
              close: _close,
              iterator: function () {
                return this;
              },
              next: function () {
                return _send(void 0);
              },
              send: _send,
              "throw": function (_e) {
                _throw(_e);
                return _send(void 0);
              }
            };
          };
          _Map_prototype.items = function () {
            var _arr, _e, _send, _state, _step, _this, _throw, i, key, values;
            _this = this;
            _state = 0;
            function _close() {
              _state = 3;
            }
            function _step(_received) {
              while (true) {
                switch (_state) {
                case 0:
                  values = _this._values;
                  _arr = __toArray(_this._keys);
                  i = _arr.length;
                  ++_state;
                case 1:
                  _state = i-- ? 2 : 3;
                  break;
                case 2:
                  key = _arr[i];
                  _state = 1;
                  return {
                    done: false,
                    value: [key, values[i]]
                  };
                case 3:
                  return { done: true, value: void 0 };
                default: throw Error("Unknown state: " + _state);
                }
              }
            }
            function _throw(_e) {
              _close();
              throw _e;
            }
            function _send(_received) {
              try {
                return _step(_received);
              } catch (_e) {
                _throw(_e);
              }
            }
            return {
              close: _close,
              iterator: function () {
                return this;
              },
              next: function () {
                return _send(void 0);
              },
              send: _send,
              "throw": function (_e) {
                _throw(_e);
                return _send(void 0);
              }
            };
          };
          _Map_prototype.iterator = Map.prototype.items;
          return Map;
        }()));
      ast = require("./jsast");
      AstNode = ast.Node;
      Type = require("./types");
      _ref = require("./parser");
      ParserNode = _ref.Node;
      MacroHolder = _ref.MacroHolder;
      _ref = require("./utils");
      Cache = _ref.Cache;
      isPrimordial = _ref.isPrimordial;
      function needsCaching(item) {
        return !(item instanceof ast.Ident) && !(item instanceof ast.Const) && !(item instanceof ast.This) && !(item instanceof ast.Arguments);
      }
      Scope = (function () {
        var _Scope_prototype, getId;
        function Scope(options, macros, bound, usedTmps, helperNames, variables, tmps) {
          var _this;
          _this = this instanceof Scope ? this : __create(_Scope_prototype);
          if (options == null) {
            options = {};
          }
          _this.options = options;
          if (!(macros instanceof MacroHolder)) {
            throw TypeError("Expected macros to be a " + __name(MacroHolder) + ", got " + __typeof(macros));
          }
          _this.macros = macros;
          if (bound == null) {
            bound = false;
          }
          _this.bound = bound;
          if (usedTmps == null) {
            usedTmps = {};
          }
          _this.usedTmps = usedTmps;
          if (helperNames == null) {
            helperNames = {};
          }
          _this.helperNames = helperNames;
          if (tmps == null) {
            tmps = {};
          }
          _this.tmps = tmps;
          if (variables) {
            _this.variables = __create(variables);
          } else {
            _this.variables = {};
          }
          _this.hasBound = false;
          _this.usedThis = false;
          _this.id = getId();
          return _this;
        }
        _Scope_prototype = Scope.prototype;
        Scope.displayName = "Scope";
        getId = (function () {
          var id;
          id = -1;
          return function () {
            return ++id;
          };
        }());
        _Scope_prototype.maybeCache = function (item, type, func) {
          var ident, result;
          if (!(item instanceof ast.Expression)) {
            throw TypeError("Expected item to be an Expression, got " + __typeof(item));
          }
          if (type == null) {
            type = Type.any;
          } else if (!(type instanceof Type)) {
            throw TypeError("Expected type to be a " + __name(Type) + ", got " + __typeof(type));
          }
          if (typeof func !== "function") {
            throw TypeError("Expected func to be a Function, got " + __typeof(func));
          }
          if (!needsCaching(item)) {
            return func(item, item, false);
          } else {
            ident = this.reserveIdent(item.pos, "ref", type);
            result = func(
              ast.Assign(item.pos, ident, item),
              ident,
              true
            );
            this.releaseIdent(ident);
            return result;
          }
        };
        _Scope_prototype.maybeCacheAccess = function (item, func, parentName, childName, save) {
          var _this;
          _this = this;
          if (!(item instanceof ast.Expression)) {
            throw TypeError("Expected item to be an Expression, got " + __typeof(item));
          }
          if (parentName == null) {
            parentName = "ref";
          } else if (typeof parentName !== "string") {
            throw TypeError("Expected parentName to be a String, got " + __typeof(parentName));
          }
          if (childName == null) {
            childName = "ref";
          } else if (typeof childName !== "string") {
            throw TypeError("Expected childName to be a String, got " + __typeof(childName));
          }
          if (save == null) {
            save = false;
          } else if (typeof save !== "boolean") {
            throw TypeError("Expected save to be a Boolean, got " + __typeof(save));
          }
          if (item instanceof ast.Binary && item.op === ".") {
            return this.maybeCache(item.left, Type.any, function (setParent, parent, parentCached) {
              return _this.maybeCache(item.right, Type.any, function (setChild, child, childCached) {
                if (parentCached || childCached) {
                  return func(
                    ast.Access(item.pos, setParent, setChild),
                    ast.Access(item.pos, parent, child),
                    true
                  );
                } else {
                  return func(item, item, false);
                }
              });
            });
          } else {
            return func(item, item, false);
          }
        };
        _Scope_prototype.reserveIdent = function (pos, namePart, type) {
          var _this;
          _this = this;
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          if (namePart == null) {
            namePart = "ref";
          }
          if (type == null) {
            type = Type.any;
          } else if (!(type instanceof Type)) {
            throw TypeError("Expected type to be a " + __name(Type) + ", got " + __typeof(type));
          }
          return (function () {
            var i, ident, name;
            for (i = 1; ; ++i) {
              if (i === 1) {
                name = "_" + __strnum(namePart);
              } else {
                name = "_" + __strnum(namePart) + i;
              }
              if (!(name in _this.usedTmps)) {
                _this.usedTmps[name] = true;
                ident = ast.Ident(pos, name);
                _this.addVariable(ident, type);
                return ident;
              }
            }
          }());
        };
        _Scope_prototype.reserveParam = function (pos) {
          var _this;
          _this = this;
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          return (function () {
            var i, name;
            for (i = 1; ; ++i) {
              if (i === 1) {
                name = "_p";
              } else {
                name = "_p" + i;
              }
              if (!(name in _this.usedTmps)) {
                _this.usedTmps[name] = true;
                return ast.Ident(pos, name);
              }
            }
          }());
        };
        _Scope_prototype.getTmp = function (pos, id, name, type) {
          var tmp, tmps;
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          if (type == null) {
            type = Type.any;
          } else if (!(type instanceof Type)) {
            throw TypeError("Expected type to be a " + __name(Type) + ", got " + __typeof(type));
          }
          tmps = this.tmps;
          if (id in tmps) {
            tmp = tmps[id];
            if (tmp instanceof ast.Ident) {
              return tmp;
            }
          }
          return tmps[id] = this.reserveIdent(pos, name || "tmp", type);
        };
        _Scope_prototype.releaseTmp = function (id) {
          var _ref, _ref2;
          if (__owns.call(this.tmps, id)) {
            this.releaseIdent((_ref = (_ref2 = this.tmps)[id], delete _ref2[id], _ref));
          }
        };
        _Scope_prototype.releaseTmps = function () {
          var _obj, id;
          _obj = this.tmps;
          for (id in _obj) {
            if (__owns.call(_obj, id)) {
              this.releaseTmp(id);
            }
          }
          this.tmps = {};
        };
        _Scope_prototype.releaseIdent = function (ident) {
          if (!(ident instanceof ast.Ident)) {
            throw TypeError("Expected ident to be an Ident, got " + __typeof(ident));
          }
          if (!__owns.call(this.usedTmps, ident.name)) {
            throw Error("Trying to release a non-reserved ident: " + __strnum(ident.name));
          }
          delete this.usedTmps[ident.name];
        };
        _Scope_prototype.markAsParam = function (ident) {
          if (!(ident instanceof ast.Ident)) {
            throw TypeError("Expected ident to be an Ident, got " + __typeof(ident));
          }
          this.variables[ident.name].isParam = true;
        };
        _Scope_prototype.markAsFunction = function (ident) {
          if (!(ident instanceof ast.Ident)) {
            throw TypeError("Expected ident to be an Ident, got " + __typeof(ident));
          }
          this.variables[ident.name].isFunction = true;
        };
        _Scope_prototype.addHelper = function (name) {
          if (typeof name !== "string") {
            throw TypeError("Expected name to be a String, got " + __typeof(name));
          }
          this.helperNames[name] = true;
        };
        _Scope_prototype.fillHelperDependencies = function () {
          var _arr, _else, _i, dep, helperNames, name, toAdd;
          helperNames = this.helperNames;
          toAdd = {};
          while (true) {
            for (name in helperNames) {
              if (__owns.call(helperNames, name) && this.macros.hasHelper(name)) {
                for (_arr = __toArray(this.macros.helperDependencies(name)), _i = _arr.length; _i--; ) {
                  dep = _arr[_i];
                  if (!__owns.call(helperNames, dep)) {
                    toAdd[dep] = true;
                  }
                }
              }
            }
            _else = true;
            for (name in toAdd) {
              if (__owns.call(toAdd, name)) {
                _else = false;
                this.addHelper(name);
              }
            }
            if (_else) {
              break;
            }
            helperNames = toAdd;
            toAdd = {};
          }
        };
        function lowerSorter(a, b) {
          return __cmp(a.toLowerCase(), b.toLowerCase());
        }
        _Scope_prototype.getHelpers = function () {
          var _arr, _obj, k, names;
          _arr = [];
          _obj = this.helperNames;
          for (k in _obj) {
            if (__owns.call(_obj, k)) {
              _arr.push(k);
            }
          }
          names = _arr;
          return names.sort(lowerSorter);
        };
        _Scope_prototype.hasHelper = function (name) {
          if (typeof name !== "string") {
            throw TypeError("Expected name to be a String, got " + __typeof(name));
          }
          return __owns.call(this.helperNames, name);
        };
        _Scope_prototype.addVariable = function (ident, type, isMutable) {
          if (!(ident instanceof ast.Ident)) {
            throw TypeError("Expected ident to be an Ident, got " + __typeof(ident));
          }
          if (type == null) {
            type = Type.any;
          } else if (!(type instanceof Type)) {
            throw TypeError("Expected type to be a " + __name(Type) + ", got " + __typeof(type));
          }
          if (isMutable == null) {
            isMutable = false;
          } else if (typeof isMutable !== "boolean") {
            throw TypeError("Expected isMutable to be a Boolean, got " + __typeof(isMutable));
          }
          this.variables[ident.name] = { type: type, isMutable: isMutable };
        };
        _Scope_prototype.hasVariable = function (ident) {
          if (!(ident instanceof ast.Ident)) {
            throw TypeError("Expected ident to be an Ident, got " + __typeof(ident));
          }
          return ident.name in this.variables && typeof this.variables[ident.name] === "object" && this.variables[ident.name] !== null;
        };
        _Scope_prototype.hasOwnVariable = function (ident) {
          if (!(ident instanceof ast.Ident)) {
            throw TypeError("Expected ident to be an Ident, got " + __typeof(ident));
          }
          return __owns.call(this.variables, ident.name);
        };
        _Scope_prototype.isVariableMutable = function (ident) {
          var _ref;
          if (!(ident instanceof ast.Ident)) {
            throw TypeError("Expected ident to be an Ident, got " + __typeof(ident));
          }
          if ((_ref = this.variables[ident.name]) != null) {
            return _ref.isMutable;
          }
        };
        _Scope_prototype.removeVariable = function (ident) {
          if (!(ident instanceof ast.Ident)) {
            throw TypeError("Expected ident to be an Ident, got " + __typeof(ident));
          }
          delete this.variables[ident.name];
        };
        _Scope_prototype.getVariables = function () {
          var _arr, _obj, k, v, variables;
          _arr = [];
          _obj = this.variables;
          for (k in _obj) {
            if (__owns.call(_obj, k)) {
              v = _obj[k];
              if (!v.isParam && !v.isFunction) {
                _arr.push(k);
              }
            }
          }
          variables = _arr;
          return variables.sort(lowerSorter);
        };
        _Scope_prototype.clone = function (bound) {
          if (bound) {
            this.hasBound = true;
          }
          return Scope(
            this.options,
            this.macros,
            bound,
            __create(this.usedTmps),
            this.helperNames,
            this.variables,
            __create(this.tmps)
          );
        };
        return Scope;
      }());
      function wrapReturn(x) {
        return x.mutateLast(function (n) {
          return ast.Return(n.pos, n);
        });
      }
      function identity(x) {
        return x;
      }
      function makeAutoReturn(x) {
        if (x) {
          return wrapReturn;
        } else {
          return identity;
        }
      }
      function makeHasGeneratorNode() {
        var inLoopCache, inSwitchCache, normalCache, returnFreeCache;
        inLoopCache = Cache.generic(ParserNode, Boolean)();
        function hasInLoop(node) {
          var _once;
          return inLoopCache.getOrAdd(node, (_once = false, function (node) {
            var FOUND, result;
            if (_once) {
              throw Error("Attempted to call function more than once");
            } else {
              _once = true;
            }
            result = false;
            if (node instanceof ParserNode.Yield || node instanceof ParserNode.Return) {
              return true;
            } else if (!(node instanceof ParserNode.Function)) {
              FOUND = {};
              try {
                node.walk(function (n) {
                  if (hasInLoop(n)) {
                    throw FOUND;
                  }
                  return n;
                });
              } catch (e) {
                if (e === FOUND) {
                  return true;
                } else {
                  throw e;
                }
              }
            }
            return false;
          }));
        }
        inSwitchCache = Cache.generic(ParserNode, Boolean)();
        function hasInSwitch(node) {
          var _once;
          return inSwitchCache.getOrAdd(node, (_once = false, function (node) {
            var _ref, FOUND;
            if (_once) {
              throw Error("Attempted to call function more than once");
            } else {
              _once = true;
            }
            if (_ref = inLoopCache.get(node)) {
              return _ref;
            }
            if (node instanceof ParserNode.Yield || node instanceof ParserNode.Return || node instanceof ParserNode.Continue) {
              return true;
            } else if (!(node instanceof ParserNode.Function)) {
              FOUND = {};
              try {
                node.walk(function (n) {
                  if (n instanceof ParserNode.For || n instanceof ParserNode.ForIn) {
                    if (hasInLoop(n)) {
                      throw FOUND;
                    }
                  } else if (hasInSwitch(n)) {
                    throw FOUND;
                  }
                  return n;
                });
              } catch (e) {
                if (e === FOUND) {
                  return true;
                } else {
                  throw e;
                }
              }
            }
            return false;
          }));
        }
        returnFreeCache = Cache.generic(ParserNode, Boolean)();
        normalCache = Cache.generic(ParserNode, Boolean)();
        function hasGeneratorNode(node, allowReturn) {
          var _once;
          if (!(node instanceof ParserNode)) {
            throw TypeError("Expected node to be a " + __name(ParserNode) + ", got " + __typeof(node));
          }
          if (allowReturn == null) {
            allowReturn = false;
          } else if (typeof allowReturn !== "boolean") {
            throw TypeError("Expected allowReturn to be a Boolean, got " + __typeof(allowReturn));
          }
          return (allowReturn ? returnFreeCache : normalCache).getOrAdd(node, (_once = false, function (node) {
            var _ref, FOUND;
            if (_once) {
              throw Error("Attempted to call function more than once");
            } else {
              _once = true;
            }
            if (!allowReturn && (_ref = returnFreeCache.get(node))) {
              return _ref;
            }
            if (_ref = inLoopCache.get(node)) {
              return _ref;
            }
            if (_ref = inSwitchCache.get(node)) {
              return _ref;
            }
            if (node instanceof ParserNode.Yield || node instanceof ParserNode.Continue || node instanceof ParserNode.Break || !allowReturn && node instanceof ParserNode.Return) {
              return true;
            } else if (!(node instanceof ParserNode.Function)) {
              FOUND = {};
              try {
                node.walk(function (n) {
                  if (n instanceof ParserNode.For || n instanceof ParserNode.ForIn) {
                    if (hasInLoop(n)) {
                      throw FOUND;
                    }
                  } else if (n instanceof ParserNode.Switch) {
                    if (hasInSwitch(n)) {
                      throw FOUND;
                    }
                  } else if (hasGeneratorNode(n, allowReturn)) {
                    throw FOUND;
                  }
                  return n;
                });
              } catch (e) {
                if (e === FOUND) {
                  return true;
                } else {
                  throw e;
                }
              }
            }
            return false;
          }));
        }
        return hasGeneratorNode;
      }
      function uid() {
        return __strnum(Math.random().toString(36).slice(2)) + "-" + __strnum(new Date().getTime());
      }
      GeneratorState = (function () {
        var _GeneratorState_prototype;
        function GeneratorState(builder) {
          var _this;
          _this = this instanceof GeneratorState ? this : __create(_GeneratorState_prototype);
          if (!(builder instanceof GeneratorBuilder)) {
            throw TypeError("Expected builder to be a " + __name(GeneratorBuilder) + ", got " + __typeof(builder));
          }
          _this.builder = builder;
          _this.nodes = [];
          return _this;
        }
        _GeneratorState_prototype = GeneratorState.prototype;
        GeneratorState.displayName = "GeneratorState";
        _GeneratorState_prototype.hasGeneratorNode = function (node) {
          return this.builder.hasGeneratorNode(node);
        };
        _GeneratorState_prototype.add = function (tNode) {
          if (typeof tNode !== "function") {
            throw TypeError("Expected tNode to be a Function, got " + __typeof(tNode));
          }
          this.nodes.push(tNode);
          return this;
        };
        _GeneratorState_prototype.branch = function () {
          var _ref, state;
          state = GeneratorState(this.builder);
          if (this.builder.currentCatch.length) {
            (_ref = this.builder.currentCatch)[__num(_ref.length) - 1].push(state);
          }
          this.builder.statesOrder.push(state);
          return state;
        };
        _GeneratorState_prototype.caseId = function () {
          return this.builder.caseId(this.getRedirect());
        };
        _GeneratorState_prototype.makeGoto = function (pos, tState, includeBreak) {
          var _this;
          _this = this;
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          if (typeof tState !== "function") {
            throw TypeError("Expected tState to be a Function, got " + __typeof(tState));
          }
          if (includeBreak == null) {
            includeBreak = false;
          } else if (typeof includeBreak !== "boolean") {
            throw TypeError("Expected includeBreak to be a Boolean, got " + __typeof(includeBreak));
          }
          return function () {
            var assign, caseId, state;
            state = tState();
            if (state instanceof GeneratorState) {
              caseId = ast.Const(pos, state.caseId());
            } else if (state instanceof ast.Node) {
              caseId = state;
            } else {
              throw Error("Expected a GeneratorState or Node, got " + __typeof(state));
            }
            if (caseId instanceof ast.Const && typeof caseId.value === "number" && caseId.value === __num(_this.caseId()) + 1) {
              return ast.Unary(pos, "++", _this.builder.stateIdent);
            } else {
              assign = ast.Assign(pos, _this.builder.stateIdent, caseId);
              if (includeBreak) {
                return ast.Block(pos, [assign, ast.Break(pos)]);
              } else {
                return assign;
              }
            }
          };
        };
        _GeneratorState_prototype["yield"] = function (pos, tNode) {
          var branch;
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          if (typeof tNode !== "function") {
            throw TypeError("Expected tNode to be a Function, got " + __typeof(tNode));
          }
          branch = this.branch();
          this.nodes.push(
            this.makeGoto(
              pos,
              function () {
                return branch;
              },
              false
            ),
            function () {
              return ast.Return(pos, ast.Obj(pos, [
                ast.Obj.Pair(pos, "done", ast.Const(pos, false)),
                ast.Obj.Pair(pos, "value", tNode())
              ]));
            }
          );
          return branch;
        };
        _GeneratorState_prototype["return"] = function (pos, tNode) {
          var _this;
          _this = this;
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          if (tNode == null) {
            tNode = null;
          } else if (typeof tNode !== "function") {
            throw TypeError("Expected tNode to be one of Function or null, got " + __typeof(tNode));
          }
          if (tNode == null) {
            this.goto(pos, function () {
              return _this.builder.stop;
            });
          } else {
            this.add(this.makeGoto(
              pos,
              function () {
                return _this.builder.stop;
              },
              false
            ));
            this.add(function () {
              var node;
              node = tNode();
              if (!(node instanceof ast.Statement)) {
                return ast.Return(pos, ast.Obj(pos, [
                  ast.Obj.Pair(pos, "done", ast.Const(pos, true)),
                  ast.Obj.Pair(pos, "value", tNode())
                ]));
              } else {
                return node;
              }
            });
          }
        };
        _GeneratorState_prototype.returnOrAdd = function (isReturn, pos, tNode) {
          if (isReturn) {
            this["return"](pos, tNode);
            return this;
          } else {
            return this.add(tNode);
          }
        };
        _GeneratorState_prototype.getRedirect = function () {
          return this.builder.getRedirect(this);
        };
        function getCaseId(pos, value) {
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          if (value instanceof GeneratorState) {
            return ast.Const(pos, value.caseId());
          } else if (value instanceof ast.Node) {
            return value;
          } else {
            throw TypeError("Expected a GeneratorState or Node, got " + __typeof(value));
          }
        }
        _GeneratorState_prototype.goto = function (pos, tState, preventRedirect) {
          var nodes;
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          if (typeof tState !== "function") {
            throw TypeError("Expected tState to be a Function, got " + __typeof(tState));
          }
          if (preventRedirect == null) {
            preventRedirect = false;
          } else if (typeof preventRedirect !== "boolean") {
            throw TypeError("Expected preventRedirect to be a Boolean, got " + __typeof(preventRedirect));
          }
          nodes = this.nodes;
          if (nodes.length === 0 && !preventRedirect) {
            this.builder.addRedirect(this, tState);
          }
          nodes.push(this.makeGoto(
            pos,
            function () {
              return getCaseId(pos, tState());
            },
            true
          ));
        };
        _GeneratorState_prototype.noop = function (pos) {
          var branch;
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          if (this.nodes.length === 0) {
            return this;
          } else {
            branch = this.branch();
            this.goto(pos, function () {
              return branch;
            });
            return branch;
          }
        };
        _GeneratorState_prototype.gotoIf = function (pos, tTest, tWhenTrue, tWhenFalse) {
          var _this;
          _this = this;
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          if (typeof tTest !== "function") {
            throw TypeError("Expected tTest to be a Function, got " + __typeof(tTest));
          }
          if (typeof tWhenTrue !== "function") {
            throw TypeError("Expected tWhenTrue to be a Function, got " + __typeof(tWhenTrue));
          }
          if (typeof tWhenFalse !== "function") {
            throw TypeError("Expected tWhenFalse to be a Function, got " + __typeof(tWhenFalse));
          }
          this.goto(
            pos,
            function () {
              return ast.IfExpression(
                pos,
                tTest(),
                getCaseId(pos, tWhenTrue()),
                getCaseId(pos, tWhenFalse())
              );
            },
            true
          );
        };
        _GeneratorState_prototype.pendingFinally = function (pos, tFinallyBody) {
          var _this, ident, scope;
          _this = this;
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          if (typeof tFinallyBody !== "function") {
            throw TypeError("Expected tFinallyBody to be a Function, got " + __typeof(tFinallyBody));
          }
          scope = this.builder.scope;
          ident = scope.reserveIdent(pos, "finally", Type["undefined"]["function"]());
          scope.markAsFunction(ident);
          this.builder.finallies.push(function () {
            return ast.Func(
              pos,
              ident,
              [],
              [],
              tFinallyBody()
            );
          });
          this.nodes.push(function () {
            return ast.Call(
              pos,
              ast.Access(pos, _this.builder.pendingFinalliesIdent, "push"),
              [ident]
            );
          });
          return this;
        };
        _GeneratorState_prototype.runPendingFinally = function (pos) {
          var _this;
          _this = this;
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          this.nodes.push(function () {
            return ast.Call(pos, ast.Call(pos, ast.Access(pos, _this.builder.pendingFinalliesIdent, "pop")));
          });
          return this;
        };
        _GeneratorState_prototype.enterTryCatch = function (pos) {
          var fresh;
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          fresh = this.noop(pos);
          this.builder.enterTryCatch(fresh);
          return fresh;
        };
        _GeneratorState_prototype.exitTryCatch = function (pos, tIdent, tPostState) {
          var fresh;
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          if (typeof tIdent !== "function") {
            throw TypeError("Expected tIdent to be a Function, got " + __typeof(tIdent));
          }
          if (typeof tPostState !== "function") {
            throw TypeError("Expected tPostState to be a Function, got " + __typeof(tPostState));
          }
          this.goto(pos, tPostState);
          fresh = this.noop(pos);
          this.builder.exitTryCatch(fresh, tIdent);
          return fresh;
        };
        return GeneratorState;
      }());
      GeneratorBuilder = (function () {
        var _GeneratorBuilder_prototype;
        function GeneratorBuilder(pos, scope, hasGeneratorNode) {
          var _this, sendScope;
          _this = this instanceof GeneratorBuilder ? this : __create(_GeneratorBuilder_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          if (!(scope instanceof Scope)) {
            throw TypeError("Expected scope to be a " + __name(Scope) + ", got " + __typeof(scope));
          }
          _this.scope = scope;
          if (typeof hasGeneratorNode !== "function") {
            throw TypeError("Expected hasGeneratorNode to be a Function, got " + __typeof(hasGeneratorNode));
          }
          _this.hasGeneratorNode = hasGeneratorNode;
          _this.currentCatch = [];
          _this.redirects = Map();
          _this.start = GeneratorState(_this);
          _this.stop = GeneratorState(_this).add(function () {
            return ast.Return(pos, ast.Obj(pos, [
              ast.Obj.Pair(pos, "done", ast.Const(pos, true)),
              ast.Obj.Pair(pos, "value", ast.Const(pos, void 0))
            ]));
          });
          _this.statesOrder = [_this.start];
          if (typeof stateIdent !== "undefined" && stateIdent !== null) {
            _this.stateIdent = stateIdent;
          } else {
            _this.stateIdent = scope.reserveIdent(pos, "state", Type.number);
          }
          _this.pendingFinalliesIdent = scope.reserveIdent(pos, "finallies", Type["undefined"]["function"]().array());
          sendScope = scope.clone(false);
          _this.receivedIdent = sendScope.reserveIdent(pos, "received", Type.any);
          sendScope.markAsParam(_this.receivedIdent);
          _this.finallies = [];
          _this.catches = [];
          return _this;
        }
        _GeneratorBuilder_prototype = GeneratorBuilder.prototype;
        GeneratorBuilder.displayName = "GeneratorBuilder";
        _GeneratorBuilder_prototype.addRedirect = function (fromState, toState) {
          if (!(fromState instanceof GeneratorState)) {
            throw TypeError("Expected fromState to be a " + __name(GeneratorState) + ", got " + __typeof(fromState));
          }
          if (typeof toState !== "function") {
            throw TypeError("Expected toState to be a Function, got " + __typeof(toState));
          }
          this.redirects.set(fromState, toState);
        };
        _GeneratorBuilder_prototype.getRedirect = function (fromState) {
          var redirect, redirectFunc;
          if (!(fromState instanceof GeneratorState)) {
            throw TypeError("Expected fromState to be a " + __name(GeneratorState) + ", got " + __typeof(fromState));
          }
          redirectFunc = this.redirects.get(fromState);
          if (redirectFunc == null) {
            return fromState;
          } else if (redirectFunc instanceof GeneratorState) {
            return redirectFunc;
          } else if (typeof redirectFunc === "function") {
            redirect = redirectFunc();
            if (redirect instanceof GeneratorState) {
              redirect = this.getRedirect(redirect);
            } else {
              throw Error("Expected a GeneratorState, got " + __typeof(redirectFunc));
            }
            this.redirects.set(fromState, redirect);
            return redirect;
          } else {
            throw Error("Unknown value in redirects: " + __typeof(redirectFunc));
          }
        };
        _GeneratorBuilder_prototype._calculateCaseIds = function () {
          var _arr, _i, _len, caseIds, id, state;
          id = -1;
          caseIds = this.caseIds = Map();
          for (_arr = __toArray(this.statesOrder), _i = 0, _len = _arr.length; _i < _len; ++_i) {
            state = _arr[_i];
            if (!this.redirects.has(state)) {
              caseIds.set(state, ++id);
            }
          }
        };
        _GeneratorBuilder_prototype.caseId = function (state) {
          var caseIds;
          if (!(state instanceof GeneratorState)) {
            throw TypeError("Expected state to be a " + __name(GeneratorState) + ", got " + __typeof(state));
          }
          caseIds = this.caseIds;
          if (caseIds == null) {
            throw Error("_calculate-case-ids must be called first");
          }
          if (!caseIds.has(state)) {
            throw Error("case-ids does not contain state");
          }
          return caseIds.get(state);
        };
        _GeneratorBuilder_prototype.enterTryCatch = function (state) {
          if (!(state instanceof GeneratorState)) {
            throw TypeError("Expected state to be a " + __name(GeneratorState) + ", got " + __typeof(state));
          }
          this.currentCatch.push([state]);
        };
        _GeneratorBuilder_prototype.exitTryCatch = function (state, tIdent) {
          var catchStates, index;
          if (!(state instanceof GeneratorState)) {
            throw TypeError("Expected state to be a " + __name(GeneratorState) + ", got " + __typeof(state));
          }
          if (typeof tIdent !== "function") {
            throw TypeError("Expected tIdent to be a Function, got " + __typeof(tIdent));
          }
          if (this.currentCatch.length === 0) {
            throw Error("Unable to exit-try-catch without first using enter-try-catch");
          }
          catchStates = this.currentCatch.pop();
          index = catchStates.indexOf(state);
          if (index !== -1) {
            catchStates.splice(index, 1);
          }
          this.catches.push({ tryStates: catchStates, tIdent: tIdent, catchState: state });
        };
        function calculateRanges(stateIds) {
          var _arr, i, id, lastRangeId, len, ranges, rangeStart;
          ranges = [];
          rangeStart = -1/0;
          lastRangeId = -1;
          for (_arr = __toArray(stateIds), i = 0, len = _arr.length; i < len; ++i) {
            id = _arr[i];
            if (id !== lastRangeId + 1) {
              if (lastRangeId !== -1) {
                ranges.push({ start: rangeStart, finish: lastRangeId });
              }
              rangeStart = id;
            }
            lastRangeId = id;
          }
          if (lastRangeId !== -1) {
            ranges.push({ start: rangeStart, finish: lastRangeId });
          }
          return ranges;
        }
        _GeneratorBuilder_prototype.create = function () {
          var _this, body, catches, close, err, f, innerScope, send, sendTryCatch,
              sendTryFinally, stateIdent, step, throwIdent;
          _this = this;
          if (this.currentCatch.length) {
            throw Error("Cannot create a generator if there are stray catches");
          }
          this.statesOrder.push(this.stop);
          this._calculateCaseIds();
          body = [
            ast.Assign(this.pos, this.stateIdent, ast.Const(this.pos, this.start.caseId()))
          ];
          close = this.scope.reserveIdent(this.pos, "close", Type["undefined"]["function"]());
          this.scope.markAsFunction(close);
          if (this.finallies.length === 0) {
            this.scope.removeVariable(this.pendingFinalliesIdent);
            body.push(ast.Func(
              this.pos,
              close,
              [],
              [],
              ast.Block(this.pos, [ast.Assign(this.pos, this.stateIdent, this.stop.caseId())])
            ));
          } else {
            body.push(ast.Assign(this.pos, this.pendingFinalliesIdent, ast.Arr(this.pos)));
            body.push.apply(body, (function () {
              var _arr, _arr2, _i, _len, f;
              for (_arr = [], _arr2 = __toArray(_this.finallies), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                f = _arr2[_i];
                _arr.push(f());
              }
              return _arr;
            }()));
            innerScope = this.scope.clone(false);
            f = innerScope.reserveIdent(this.pos, "f", Type["undefined"]["function"]().union(Type["undefined"]));
            body.push(ast.Func(
              this.pos,
              close,
              [],
              innerScope.getVariables(),
              ast.Block(this.pos, [
                ast.Assign(this.pos, this.stateIdent, this.stop.caseId()),
                ast.Assign(this.pos, f, ast.Call(this.pos, ast.Access(this.pos, this.pendingFinalliesIdent, "pop"))),
                ast.If(this.pos, f, ast.TryFinally(
                  this.pos,
                  ast.Call(this.pos, f),
                  ast.Call(this.pos, close)
                ))
              ])
            ));
          }
          err = this.scope.reserveIdent(this.pos, "e", Type.any);
          catches = this.catches;
          stateIdent = this.stateIdent;
          step = this.scope.reserveIdent(this.pos, "step", Type["function"]);
          send = this.scope.reserveIdent(this.pos, "send", Type["function"]);
          throwIdent = this.scope.reserveIdent(this.pos, "throw", Type["function"]);
          body.push(ast.Func(
            this.pos,
            step,
            [this.receivedIdent],
            [],
            ast.While(this.pos, true, ast.Switch(
              this.pos,
              stateIdent,
              (function () {
                var _arr, _arr2, _arr3, _arr4, _i, _i2, _len, _len2, nodes, state,
                    tNode;
                for (_arr = [], _arr2 = __toArray(_this.statesOrder), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                  state = _arr2[_i];
                  if (!_this.redirects.has(state)) {
                    for (_arr3 = [], _arr4 = __toArray(state.nodes), _i2 = 0, _len2 = _arr4.length; _i2 < _len2; ++_i2) {
                      tNode = _arr4[_i2];
                      _arr3.push(tNode());
                    }
                    nodes = _arr3;
                    if (nodes.length === 0) {
                      throw Error("Found state with no nodes in it");
                    }
                    _arr.push(ast.Switch.Case(
                      nodes[0].pos,
                      ast.Const(nodes[0].pos, state.caseId()),
                      ast.Block(nodes[0].pos, nodes)
                    ));
                  }
                }
                return _arr;
              }()),
              ast.Throw(this.pos, ast.Call(
                this.pos,
                ast.Ident(this.pos, "Error"),
                [ast.Binary(this.pos, "Unknown state: ", "+", stateIdent)]
              ))
            ))
          ));
          body.push(ast.Func(
            this.pos,
            throwIdent,
            [err],
            [],
            (function () {
              var _arr, _f, _i, current;
              current = ast.Block(_this.pos, [
                ast.Call(_this.pos, close, []),
                ast.Throw(_this.pos, err)
              ]);
              for (_arr = __toArray(catches), _i = _arr.length, _f = function (catchInfo) {
                var _arr, _arr2, _i, _len, _this, errIdent, state, tryStateIds,
                    tryStateRanges;
                _this = this;
                errIdent = catchInfo.tIdent();
                this.scope.addVariable(errIdent);
                for (_arr = [], _arr2 = __toArray(catchInfo.tryStates), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                  state = _arr2[_i];
                  if (!this.redirects.has(state)) {
                    _arr.push(state.caseId());
                  }
                }
                tryStateIds = _arr;
                tryStateIds.sort(__curry(2, function (x, y) {
                  return __cmp(x, y);
                }));
                tryStateRanges = calculateRanges(tryStateIds);
                return current = ast.If(
                  this.pos,
                  ast.Or.apply(ast, [this.pos].concat((function () {
                    var _arr, _arr2, _i, _len, _ref, finish, start;
                    for (_arr = [], _arr2 = __toArray(tryStateRanges), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                      _ref = _arr2[_i];
                      start = _ref.start;
                      finish = _ref.finish;
                      if (start === -1/0) {
                        if (finish === 0) {
                          _arr.push(ast.Binary(_this.pos, stateIdent, "===", ast.Const(_this.pos, 0)));
                        } else {
                          _arr.push(ast.Binary(_this.pos, stateIdent, "<=", ast.Const(_this.pos, finish)));
                        }
                      } else if (finish === start) {
                        _arr.push(ast.Binary(_this.pos, stateIdent, "===", ast.Const(_this.pos, start)));
                      } else if (finish === __num(start) + 1) {
                        _arr.push(ast.Or(
                          _this.pos,
                          ast.Binary(_this.pos, stateIdent, "===", ast.Const(_this.pos, start)),
                          ast.Binary(_this.pos, stateIdent, "===", ast.Const(_this.pos, finish))
                        ));
                      } else {
                        _arr.push(ast.And(
                          _this.pos,
                          ast.Binary(_this.pos, stateIdent, ">=", ast.Const(_this.pos, start)),
                          ast.Binary(_this.pos, stateIdent, "<=", ast.Const(_this.pos, finish))
                        ));
                      }
                    }
                    return _arr;
                  }()))),
                  ast.Block(this.pos, [
                    ast.Assign(this.pos, errIdent, err),
                    ast.Assign(this.pos, stateIdent, ast.Const(this.pos, catchInfo.catchState.caseId()))
                  ]),
                  current
                );
              }; _i--; ) {
                _f.call(_this, _arr[_i]);
              }
              return current;
            }())
          ));
          sendTryCatch = ast.TryCatch(
            this.pos,
            ast.Return(this.pos, ast.Call(this.pos, step, [this.receivedIdent])),
            err,
            ast.Call(this.pos, throwIdent, [err])
          );
          if (this.finallies.length === 0) {
            sendTryFinally = sendTryCatch;
          } else {
            sendTryFinally = ast.TryFinally(this.pos, sendTryCatch, ast.If(
              this.pos,
              ast.Binary(this.pos, stateIdent, "===", this.stop.caseId()),
              ast.Call(this.pos, close, [])
            ));
          }
          body.push(ast.Func(
            this.pos,
            send,
            [this.receivedIdent],
            [],
            catches.length ? ast.While(this.pos, true, sendTryFinally) : sendTryFinally
          ));
          body.push(ast.Return(this.pos, ast.Obj(this.pos, [
            ast.Obj.Pair(this.pos, "close", close),
            ast.Obj.Pair(this.pos, "iterator", ast.Func(
              this.pos,
              null,
              [],
              [],
              ast.Return(this.pos, ast.This(this.pos))
            )),
            ast.Obj.Pair(this.pos, "next", ast.Func(
              this.pos,
              null,
              [],
              [],
              ast.Return(this.pos, ast.Call(this.pos, send, [ast.Const(this.pos, void 0)]))
            )),
            ast.Obj.Pair(this.pos, "send", send),
            ast.Obj.Pair(this.pos, "throw", ast.Func(
              this.pos,
              null,
              [err],
              [],
              ast.Block(this.pos, [
                ast.Call(this.pos, throwIdent, [err]),
                ast.Return(this.pos, ast.Call(this.pos, send, [ast.Const(this.pos, void 0)]))
              ])
            ))
          ])));
          return ast.Block(this.pos, body);
        };
        return GeneratorBuilder;
      }());
      function flattenSpreadArray(elements) {
        var _arr, _i, _len, changed, element, result;
        result = [];
        changed = false;
        for (_arr = __toArray(elements), _i = 0, _len = _arr.length; _i < _len; ++_i) {
          element = _arr[_i];
          if (element instanceof ParserNode.Spread && element.node instanceof ParserNode.Array) {
            result.push.apply(result, __toArray(element.node.elements));
            changed = true;
          } else {
            result.push(element);
          }
        }
        if (changed) {
          return flattenSpreadArray(result);
        } else {
          return elements;
        }
      }
      function makePos(line, column, file) {
        var pos;
        if (typeof line !== "number") {
          throw TypeError("Expected line to be a Number, got " + __typeof(line));
        }
        if (typeof column !== "number") {
          throw TypeError("Expected column to be a Number, got " + __typeof(column));
        }
        if (file == null) {
          file = void 0;
        } else if (typeof file !== "string") {
          throw TypeError("Expected file to be one of String or undefined, got " + __typeof(file));
        }
        pos = { line: line, column: column };
        if (file != null) {
          pos.file = file;
        }
        return pos;
      }
      getPos = function (node) {
        if (!(node instanceof ParserNode)) {
          throw TypeError("Expected node to be a " + __name(ParserNode) + ", got " + __typeof(node));
        }
        throw Error("get-pos must be overridden");
      };
      function doNothing() {}
      generatorTranslate = (function () {
        var expressions, statements;
        function memoize(func) {
          var _ref, result;
          if (typeof func !== "function") {
            throw TypeError("Expected func to be a Function, got " + __typeof(func));
          }
          if (func.memoized) {
            return func;
          } else {
            (_ref = function () {
              if (func) {
                result = func();
                func = null;
              }
              return result;
            }).memoized = true;
            return _ref;
          }
        }
        function same(value) {
          var _ref;
          (_ref = function () {
            return value;
          }).memoized = true;
          return _ref;
        }
        function maybeMemoize(value) {
          if (typeof value === "function") {
            return memoize(value);
          } else {
            return same(value);
          }
        }
        function handleAssign(assignTo, scope, state, tNode, cleanup) {
          var nodeNeedsCaching, tAssignTo, tTmp;
          if (!(state instanceof GeneratorState)) {
            throw TypeError("Expected state to be a " + __name(GeneratorState) + ", got " + __typeof(state));
          }
          if (typeof tNode !== "function") {
            throw TypeError("Expected tNode to be a Function, got " + __typeof(tNode));
          }
          if (cleanup == null) {
            cleanup = doNothing;
          } else if (typeof cleanup !== "function") {
            throw TypeError("Expected cleanup to be a Function, got " + __typeof(cleanup));
          }
          if (typeof assignTo === "function") {
            tAssignTo = memoize(assignTo);
            return {
              state: state.add(function () {
                var node;
                node = tNode();
                return ast.Assign(node.pos, tAssignTo(), node);
              }),
              tNode: tAssignTo,
              cleanup: cleanup
            };
          } else if (assignTo) {
            tNode = memoize(tNode);
            tTmp = memoize(function () {
              return scope.reserveIdent(tNode().pos, "tmp", Type.any);
            });
            nodeNeedsCaching = memoize(function () {
              return tNode() === state.builder.receivedIdent || needsCaching(tNode());
            });
            return {
              state: state.add(function () {
                var node;
                node = tNode();
                if (nodeNeedsCaching()) {
                  return ast.Assign(node.pos, tTmp(), node);
                } else {
                  return node;
                }
              }),
              tNode: function () {
                if (nodeNeedsCaching()) {
                  return tTmp();
                } else {
                  return tNode();
                }
              },
              cleanup: function () {
                cleanup();
                if (nodeNeedsCaching()) {
                  return scope.releaseIdent(tTmp());
                }
              }
            };
          } else {
            return { state: state, tNode: tNode, cleanup: cleanup };
          }
        }
        function makeTTmp(assignTo, scope, pos, name, type) {
          if (name == null) {
            name = "tmp";
          }
          if (type == null) {
            type = Type.any;
          }
          if (typeof assignTo === "function") {
            return memoize(assignTo);
          } else {
            return same(scope.reserveIdent(pos, name, type));
          }
        }
        function makeCleanup(assignTo, scope, tTmp) {
          if (typeof tTmp !== "function") {
            throw TypeError("Expected tTmp to be a Function, got " + __typeof(tTmp));
          }
          if (typeof assignTo === "function") {
            return function () {
              var tmp, value;
              value = assignTo();
              tmp = tTmp();
              if (value === tmp) {
                return scope.releaseIdent(tmp);
              }
            };
          } else {
            return function () {
              return scope.releaseIdent(tTmp());
            };
          }
        }
        function generatorArrayTranslate(pos, elements, scope, state, assignTo) {
          var _arr, _f, _len, i, tArrayStart, tTmp;
          if (!(state instanceof GeneratorState)) {
            throw TypeError("Expected state to be a " + __name(GeneratorState) + ", got " + __typeof(state));
          }
          tTmp = makeTTmp(
            assignTo,
            scope,
            pos,
            "arr",
            Type.array
          );
          tArrayStart = null;
          for (_arr = __toArray(elements), i = 0, _len = _arr.length, _f = function (element, i) {
            var expr;
            if (tArrayStart || state.hasGeneratorNode(element)) {
              if (tArrayStart == null) {
                tArrayStart = arrayTranslate(
                  pos,
                  __slice.call(elements, 0, i),
                  scope,
                  true,
                  false
                );
                state = state.add(function () {
                  return ast.Assign(pos, tTmp(), tArrayStart());
                });
              }
              if (element instanceof ParserNode.Spread) {
                expr = generatorTranslateExpression(element.node, scope, state, false);
                return state = expr.state.add(function () {
                  var tmp;
                  tmp = tTmp();
                  scope.addHelper("__toArray");
                  return ast.Call(
                    getPos(element),
                    ast.Access(
                      getPos(element),
                      tmp,
                      ast.Const(getPos(element), "push"),
                      ast.Const(getPos(element), "apply")
                    ),
                    [
                      tmp,
                      ast.Call(
                        getPos(element),
                        ast.Ident(getPos(element), "__toArray"),
                        [__first(expr.tNode(), expr.cleanup())]
                      )
                    ]
                  );
                });
              } else {
                expr = generatorTranslateExpression(element, scope, state, false);
                return state = expr.state.add(function () {
                  return ast.Call(
                    getPos(element),
                    ast.Access(getPos(element), tTmp(), ast.Const(getPos(element), "push")),
                    [__first(expr.tNode(), expr.cleanup())]
                  );
                });
              }
            }
          }; i < _len; ++i) {
            _f.call(this, _arr[i], i);
          }
          if (tArrayStart == null) {
            return {
              state: state,
              tNode: arrayTranslate(
                pos,
                elements,
                scope,
                true,
                false
              ),
              cleanup: doNothing
            };
          } else {
            return {
              state: state,
              tNode: tTmp,
              cleanup: makeCleanup(assignTo, scope, tTmp)
            };
          }
        }
        expressions = {
          Access: function (node, scope, state, assignTo) {
            var gChild, gParent;
            gParent = generatorTranslateExpression(node.parent, scope, state, true);
            gChild = generatorTranslateExpression(node.child, scope, gParent.state, false);
            return handleAssign(assignTo, scope, gChild.state, function () {
              var _ref;
              _ref = ast.Access(getPos(node), gParent.tNode(), gChild.tNode());
              gParent.cleanup();
              gChild.cleanup();
              return _ref;
            });
          },
          Array: function (node, scope, state, assignTo) {
            return generatorArrayTranslate(
              getPos(node),
              node.elements,
              scope,
              state,
              assignTo
            );
          },
          Assign: function (node, scope, state, assignTo) {
            var gChild, gLeft, gParent, gRight, left;
            left = node.left;
            if (left instanceof ParserNode.Access) {
              gParent = generatorTranslateExpression(left.parent, scope, state, true);
              gChild = generatorTranslateExpression(left.child, scope, gParent.state, true);
              gLeft = {
                state: gChild.state,
                tNode: function () {
                  return ast.Access(getPos(left), gParent.tNode(), gChild.tNode());
                },
                cleanup: function () {
                  gParent.cleanup();
                  return gChild.cleanup();
                }
              };
            } else {
              gLeft = {
                state: state,
                tNode: translate(node.left, scope, "leftExpression"),
                cleanup: doNothing
              };
            }
            gRight = generatorTranslateExpression(node.right, scope, gLeft.state, gLeft.tNode);
            return handleAssign(
              assignTo,
              scope,
              gRight.state,
              gRight.tNode,
              function () {
                gLeft.cleanup();
                return gRight.cleanup();
              }
            );
          },
          Binary: (function () {
            var lazyOps;
            lazyOps = {
              "&&": function (node, scope, state, assignTo) {
                var gLeft, gRight, postBranch, tNode, whenTrueBranch;
                gLeft = generatorTranslateExpression(node.left, scope, state, assignTo || true);
                tNode = memoize(gLeft.tNode);
                gLeft.state.gotoIf(
                  getPos(node),
                  tNode,
                  function () {
                    return whenTrueBranch;
                  },
                  function () {
                    return postBranch;
                  }
                );
                whenTrueBranch = gLeft.state.branch();
                gRight = generatorTranslateExpression(node.right, scope, whenTrueBranch, tNode);
                gRight.state.goto(getPos(node), function () {
                  return postBranch;
                });
                postBranch = gLeft.state.branch();
                return {
                  tNode: tNode,
                  state: postBranch,
                  cleanup: function () {
                    gLeft.cleanup();
                    return gRight.cleanup();
                  }
                };
              },
              "||": function (node, scope, state, assignTo) {
                var gLeft, gRight, postBranch, tNode, whenFalseBranch;
                gLeft = generatorTranslateExpression(node.left, scope, state, assignTo || true);
                tNode = memoize(gLeft.tNode);
                gLeft.state.gotoIf(
                  getPos(node),
                  tNode,
                  function () {
                    return postBranch;
                  },
                  function () {
                    return whenFalseBranch;
                  }
                );
                whenFalseBranch = gLeft.state.branch();
                gRight = generatorTranslateExpression(node.right, scope, whenFalseBranch, tNode);
                gRight.state.goto(getPos(node), function () {
                  return postBranch;
                });
                postBranch = gLeft.state.branch();
                return {
                  tNode: tNode,
                  state: postBranch,
                  cleanup: function () {
                    gLeft.cleanup();
                    return gRight.cleanup();
                  }
                };
              }
            };
            return function (node, scope, state, assignTo) {
              var gLeft, gRight;
              if (__owns.call(lazyOps, node.op)) {
                return lazyOps[node.op](node, scope, state, assignTo);
              } else {
                gLeft = generatorTranslateExpression(node.left, scope, state, true);
                gRight = generatorTranslateExpression(node.right, scope, gLeft.state, false);
                return handleAssign(assignTo, scope, gRight.state, function () {
                  return ast.Binary(
                    getPos(node),
                    gLeft.tNode(),
                    (gLeft.cleanup(), node.op),
                    __first(gRight.tNode(), gRight.cleanup())
                  );
                });
              }
            };
          }()),
          Block: function (node, scope, state, assignTo) {
            var _arr, i, len, result, subnode;
            for (_arr = __toArray(node.nodes), i = 0, len = _arr.length; i < len; ++i) {
              subnode = _arr[i];
              result = generatorTranslateExpression(subnode, scope, state, i === len - 1 && assignTo);
              state = result.state;
              if (i === len - 1) {
                return result;
              }
            }
            throw Error("Unreachable state");
          },
          Call: function (node, scope, state, assignTo) {
            var args, gArgs, gChild, gFunc, gParent, gStart, isApply, isNew;
            if (node.func instanceof ParserNode.Access) {
              gParent = generatorTranslateExpression(node.func.parent, scope, state, true);
              gChild = generatorTranslateExpression(node.func.child, scope, gParent.state, true);
              gFunc = {
                tNode: function () {
                  return ast.Access(getPos(node), gParent.tNode(), gChild.tNode());
                },
                cleanup: function () {
                  gParent.cleanup();
                  return gChild.cleanup();
                },
                state: gChild.state
              };
            } else {
              gFunc = generatorTranslateExpression(node.func, scope, state, true);
            }
            isApply = node.isApply;
            isNew = node.isNew;
            args = node.args;
            if (isApply && (args.length === 0 || !(args[0] instanceof ParserNode.Spread))) {
              if (args.length === 0) {
                gStart = {
                  state: gFunc.state,
                  tNode: function () {
                    return ast.Const(getPos(node), void 0);
                  },
                  cleanup: doNothing
                };
              } else {
                gStart = generatorTranslateExpression(args[0], scope, gFunc.state, true);
              }
              gArgs = generatorArrayTranslate(
                getPos(node),
                __slice.call(args, 1),
                scope,
                gStart.state
              );
              return handleAssign(assignTo, scope, gArgs.state, function () {
                var args, func, start;
                func = gFunc.tNode();
                start = gStart.tNode();
                args = gArgs.tNode();
                gFunc.cleanup();
                gStart.cleanup();
                gArgs.cleanup();
                if (args instanceof ast.Arr) {
                  return ast.Call(
                    getPos(node),
                    ast.Access(getPos(node), func, "call"),
                    [start].concat(__toArray(args.elements))
                  );
                } else {
                  return ast.Call(
                    getPos(node),
                    ast.Access(getPos(node), func, "apply"),
                    [start, args]
                  );
                }
              });
            } else {
              gArgs = generatorArrayTranslate(getPos(node), args, scope, gFunc.state);
              return handleAssign(assignTo, scope, gArgs.state, function () {
                var args, func;
                func = gFunc.tNode();
                args = gArgs.tNode();
                gFunc.cleanup();
                gArgs.cleanup();
                if (isApply) {
                  return ast.Call(
                    getPos(node),
                    ast.Access(getPos(node), func, "apply"),
                    [
                      ast.Access(getPos(node), args, ast.Const(getPos(node), 0)),
                      ast.Call(
                        getPos(node),
                        ast.Access(getPos(node), args, ast.Const(getPos(node), "slice")),
                        [ast.Const(getPos(node), 1)]
                      )
                    ]
                  );
                } else if (isNew) {
                  scope.addHelper("__new");
                  return ast.Call(
                    getPos(node),
                    ast.Access(
                      getPos(node),
                      ast.Ident(getPos(node), "__new"),
                      ast.Const(getPos(node), "apply")
                    ),
                    [func, args]
                  );
                } else if (args instanceof ast.Arr) {
                  return ast.Call(
                    getPos(node),
                    ast.Access(getPos(node), func, "call"),
                    [
                      func instanceof ast.Binary && func.op === "." ? func.left : ast.Const(getPos(node), void 0)
                    ].concat(__toArray(args.elements))
                  );
                } else {
                  return ast.Call(
                    getPos(node),
                    ast.Access(getPos(node), func, "apply"),
                    [
                      func instanceof ast.Binary && func.op === "." ? func.left : ast.Const(getPos(node), void 0),
                      args
                    ]
                  );
                }
              });
            }
          },
          EmbedWrite: function (node, scope, state, assignTo) {
            var gText;
            gText = generatorTranslateExpression(node.text, scope, state, false);
            return handleAssign(
              assignTo,
              scope,
              gText.state,
              function () {
                return ast.Call(
                  getPos(node),
                  ast.Ident(getPos(node), "write"),
                  [gText.tNode()].concat(node.escape
                    ? [ast.Const(getPos(node), true)]
                    : [])
                );
              },
              gText.cleanup
            );
          },
          Eval: function (node, scope, state, assignTo) {
            var gCode;
            gCode = generatorTranslateExpression(node.code, scope, state, false);
            return handleAssign(assignTo, scope, gCode.state, function () {
              return ast.Eval(getPos(node), gCode.tNode(), gCode.cleanup);
            });
          },
          If: function (node, scope, state, assignTo) {
            var cleanup, gWhenFalse, gWhenTrue, postBranch, test, tTmp, tWhenFalse,
                tWhenTrue, whenFalseBranch, whenTrueBranch;
            test = generatorTranslateExpression(node.test, scope, state, state.hasGeneratorNode(node.test));
            state = test.state;
            if (state.hasGeneratorNode(node.whenTrue) || state.hasGeneratorNode(node.whenFalse)) {
              state.gotoIf(
                getPos(node),
                function () {
                  var _ref;
                  _ref = test.tNode();
                  test.cleanup();
                  return _ref;
                },
                function () {
                  return whenTrueBranch;
                },
                function () {
                  return whenFalseBranch;
                }
              );
              tTmp = makeTTmp(assignTo, scope, getPos(node));
              whenTrueBranch = state.branch();
              gWhenTrue = generatorTranslateExpression(node.whenTrue, scope, whenTrueBranch, tTmp);
              gWhenTrue.state.goto(getPos(node.whenTrue), function () {
                return postBranch;
              });
              whenFalseBranch = state.branch();
              gWhenFalse = generatorTranslateExpression(node.whenFalse, scope, whenFalseBranch, tTmp);
              gWhenFalse.state.goto(getPos(node.whenFalse), function () {
                return postBranch;
              });
              postBranch = state.branch();
              cleanup = makeCleanup(assignTo, scope, tTmp);
              return {
                state: postBranch,
                tNode: tTmp,
                cleanup: function () {
                  gWhenTrue.cleanup();
                  gWhenFalse.cleanup();
                  return cleanup();
                }
              };
            } else {
              tWhenTrue = translate(node.whenTrue, scope, "expression");
              tWhenFalse = translate(node.whenFalse, scope, "expression");
              return handleAssign(assignTo, scope, state, function () {
                return ast.If(
                  getPos(node),
                  test.tNode(),
                  (test.cleanup(), tWhenTrue()),
                  tWhenFalse()
                );
              });
            }
          },
          Regexp: function (node, scope, state, assignTo) {
            var gSource;
            gSource = generatorTranslateExpression(node.source, scope, state, false);
            return handleAssign(
              assignTo,
              scope,
              state,
              function () {
                var source;
                source = gSource.tNode();
                if (source.isConst()) {
                  return ast.Regex(getPos(node), String(source.constValue()), node.flags);
                } else {
                  return ast.Call(
                    getPos(node),
                    ast.Ident(getPos(node), "RegExp"),
                    [
                      source,
                      ast.Const(getPos(node), flags)
                    ]
                  );
                }
              },
              gSource.cleanup
            );
          },
          TmpWrapper: function (node, scope, state, assignTo) {
            var gNode;
            gNode = generatorTranslateExpression(node.node, scope, state, false);
            return handleAssign(
              assignTo,
              scope,
              gNode.state,
              gNode.tNode,
              function () {
                var _arr, _i, tmp;
                gNode.cleanup();
                for (_arr = __toArray(node.tmps), _i = _arr.length; _i--; ) {
                  tmp = _arr[_i];
                  scope.releaseTmp(tmp);
                }
              }
            );
          },
          Unary: function (node, scope, state, assignTo) {
            var gNode;
            gNode = generatorTranslateExpression(node.node, scope, state, false);
            return handleAssign(assignTo, scope, gNode.state, function () {
              return ast.Unary(getPos(node), node.op, __first(gNode.tNode(), gNode.cleanup()));
            });
          },
          Yield: function (node, scope, state, assignTo) {
            var gNode;
            gNode = generatorTranslateExpression(node.node, scope, state, false);
            state = gNode.state["yield"](getPos(node), gNode.tNode);
            return handleAssign(
              assignTo,
              scope,
              state,
              function () {
                return state.builder.receivedIdent;
              },
              gNode.cleanup
            );
          }
        };
        function generatorTranslateExpression(node, scope, state, assignTo) {
          var key;
          if (!(node instanceof ParserNode)) {
            throw TypeError("Expected node to be a " + __name(ParserNode) + ", got " + __typeof(node));
          }
          if (!(scope instanceof Scope)) {
            throw TypeError("Expected scope to be a " + __name(Scope) + ", got " + __typeof(scope));
          }
          if (!(state instanceof GeneratorState)) {
            throw TypeError("Expected state to be a " + __name(GeneratorState) + ", got " + __typeof(state));
          }
          if (assignTo == null) {
            assignTo = false;
          } else if (typeof assignTo !== "boolean" && typeof assignTo !== "function") {
            throw TypeError("Expected assignTo to be one of Boolean or Function, got " + __typeof(assignTo));
          }
          key = node.constructor.cappedName;
          if (state.hasGeneratorNode(node)) {
            if (__owns.call(expressions, key)) {
              return expressions[key](node, scope, state, assignTo);
            } else {
              throw Error("Unknown expression type: " + __typeof(node));
            }
          } else {
            return handleAssign(assignTo, scope, state, translate(node, scope, "expression"));
          }
        }
        statements = {
          Block: function (node, scope, state, breakState, continueState, autoReturn) {
            var _arr, acc, i, len, subnode;
            if (node.label != null) {
              throw Error("Not implemented: block with label in generator");
            }
            acc = state;
            for (_arr = __toArray(node.nodes), i = 0, len = _arr.length; i < len; ++i) {
              subnode = _arr[i];
              acc = generatorTranslate(
                subnode,
                scope,
                acc,
                breakState,
                continueState,
                autoReturn && i === len - 1
              );
            }
            return acc;
          },
          Break: function (node, scope, state, breakState) {
            if (node.label != null) {
              throw Error("Not implemented: break with label in a generator");
            }
            if (breakState == null) {
              throw Error("break found outside of a loop or switch");
            }
            state.goto(getPos(node), breakState);
            return state;
          },
          Continue: function (node, scope, state, breakState, continueState) {
            if (node.label != null) {
              throw Error("Not implemented: break with label in a generator");
            }
            if (continueState == null) {
              throw Error("continue found outside of a loop");
            }
            state.goto(getPos(node), continueState);
            return state;
          },
          For: function (node, scope, state) {
            var bodyBranch, gTest, postBranch, stepBranch, testBranch;
            if (node.label != null) {
              throw Error("Not implemented: for with label in generator");
            }
            if (node.init != null && !(node.init instanceof ParserNode.Nothing)) {
              state = generatorTranslate(node.init, scope, state);
            }
            state.goto(getPos(node), function () {
              return testBranch;
            });
            testBranch = state.branch();
            gTest = generatorTranslateExpression(node.test, scope, testBranch, state.hasGeneratorNode(node.test));
            testBranch.gotoIf(
              getPos(node.test),
              function () {
                var _ref;
                _ref = gTest.tNode();
                gTest.cleanup();
                return _ref;
              },
              function () {
                return bodyBranch;
              },
              function () {
                return postBranch;
              }
            );
            bodyBranch = state.branch();
            generatorTranslate(
              node.body,
              scope,
              bodyBranch,
              function () {
                return postBranch;
              },
              function () {
                return stepBranch;
              }
            ).goto(getPos(node.body), function () {
              return stepBranch || testBranch;
            });
            stepBranch = null;
            if (node.step != null && !(node.step instanceof ParserNode.Nothing)) {
              stepBranch = state.branch();
              generatorTranslate(node.step, scope, stepBranch).goto(getPos(node.step), function () {
                return testBranch;
              });
            }
            postBranch = state.branch();
            return postBranch;
          },
          ForIn: function (node, scope, state) {
            var bodyBranch, getKey, gObject, index, keys, length, postBranch,
                stepBranch, testBranch, tKey;
            if (node.label != null) {
              throw Error("Not implemented: for-in with label in generator");
            }
            tKey = translate(node.key, scope, "leftExpression");
            gObject = generatorTranslateExpression(node.object, scope, state, false);
            state = gObject.state;
            keys = scope.reserveIdent(getPos(node), "keys", Type.string.array());
            getKey = memoize(function () {
              var key;
              key = tKey();
              if (!(key instanceof ast.Ident)) {
                throw Error("Expected an Ident for a for-in key");
              }
              scope.addVariable(key, Type.string);
              return key;
            });
            index = scope.reserveIdent(getPos(node), "i", Type.number);
            length = scope.reserveIdent(getPos(node), "len", Type.number);
            scope.addHelper("__allkeys");
            state = state.add(function () {
              return ast.Block(getPos(node), [
                ast.Assign(getPos(node), keys, ast.Call(
                  getPos(node),
                  ast.Ident(getPos(node), "__allkeys"),
                  [__first(gObject.tNode(), gObject.cleanup())]
                )),
                ast.Assign(getPos(node), index, 0),
                ast.Assign(getPos(node), length, ast.Access(getPos(node), keys, "length"))
              ]);
            });
            state.goto(getPos(node), function () {
              return testBranch;
            });
            testBranch = state.branch();
            testBranch.gotoIf(
              getPos(node),
              function () {
                return ast.Binary(getPos(node), index, "<", length);
              },
              function () {
                return bodyBranch;
              },
              function () {
                return postBranch;
              }
            );
            bodyBranch = testBranch.branch();
            state = bodyBranch.add(function () {
              return ast.Assign(getPos(node), getKey(), ast.Access(getPos(node), keys, index));
            });
            generatorTranslate(
              node.body,
              scope,
              state,
              function () {
                return postBranch;
              },
              function () {
                return stepBranch;
              }
            ).goto(getPos(node.body), function () {
              return stepBranch;
            });
            stepBranch = bodyBranch.branch();
            stepBranch.add(function () {
              return ast.Unary(getPos(node), "++", index);
            }).goto(getPos(node), function () {
              return testBranch;
            });
            postBranch = stepBranch.branch();
            return postBranch;
          },
          If: function (node, scope, state, breakState, continueState, autoReturn) {
            var postBranch, test, tWhenFalse, tWhenTrue, whenFalseBranch,
                whenTrueBranch;
            test = generatorTranslateExpression(node.test, scope, state, state.hasGeneratorNode(node.test));
            state = test.state;
            if (state.hasGeneratorNode(node.whenTrue) || state.hasGeneratorNode(node.whenFalse)) {
              state.gotoIf(
                getPos(node),
                function () {
                  var _ref;
                  _ref = test.tNode();
                  test.cleanup();
                  return _ref;
                },
                function () {
                  return whenTrueBranch || postBranch;
                },
                function () {
                  return whenFalseBranch || postBranch;
                }
              );
              if (node.whenTrue && !(node.whenTrue instanceof ParserNode.Nothing)) {
                whenTrueBranch = state.branch();
              }
              if (whenTrueBranch) {
                generatorTranslate(
                  node.whenTrue,
                  scope,
                  whenTrueBranch,
                  breakState,
                  continueState,
                  autoReturn
                ).goto(getPos(node.whenTrue), function () {
                  return postBranch;
                });
              }
              if (node.whenFalse && !(node.whenFalse instanceof ParserNode.Nothing)) {
                whenFalseBranch = state.branch();
              }
              if (whenFalseBranch) {
                generatorTranslate(
                  node.whenFalse,
                  scope,
                  whenFalseBranch,
                  breakState,
                  continueState,
                  autoReturn
                ).goto(getPos(node.whenFalse), function () {
                  return postBranch;
                });
              }
              postBranch = state.branch();
              return postBranch;
            } else {
              tWhenTrue = translate(node.whenTrue, scope, "statement");
              tWhenFalse = translate(node.whenFalse, scope, "statement");
              return state.returnOrAdd(autoReturn, getPos(node), function () {
                return ast.If(
                  getPos(node),
                  test.tNode(),
                  (test.cleanup(), tWhenTrue()),
                  tWhenFalse()
                );
              });
            }
          },
          Return: function (node, scope, state) {
            var gNode, pos;
            pos = getPos(node);
            if (node.node.isConst() && node.node.constValue() === void 0) {
              state["return"](getPos(node));
              return state;
            } else {
              gNode = generatorTranslateExpression(node.node, scope, state, false);
              state = gNode.state;
              state["return"](getPos(node), function () {
                var _ref;
                _ref = gNode.tNode();
                gNode.cleanup();
                return _ref;
              });
              return state;
            }
          },
          Switch: function (node, scope, state, _p, continueState, autoReturn) {
            var _arr, _f, _len, bodyStates, defaultBranch, defaultCase,
                gDefaultBody, gNode, i, postBranch, resultCases;
            if (node.label != null) {
              throw Error("Not implemented: switch with label in generator");
            }
            gNode = generatorTranslateExpression(node.node, scope, state, false);
            bodyStates = [];
            resultCases = [];
            gNode.state.add(function () {
              return ast.Switch(
                getPos(node),
                gNode.tNode(),
                (function () {
                  var _arr, _i, _len, case_;
                  for (_arr = [], _i = 0, _len = resultCases.length; _i < _len; ++_i) {
                    case_ = resultCases[_i];
                    _arr.push(case_());
                  }
                  return _arr;
                }()),
                defaultCase()
              );
            });
            gNode.state.add(function () {
              return ast.Break(getPos(node));
            });
            for (_arr = __toArray(node.cases), i = 0, _len = _arr.length, _f = function (case_, i) {
              var caseBranch, gCaseBody, tCaseNode, tGoto;
              if (state.hasGeneratorNode(case_.node)) {
                throw Error("Cannot use yield in the check of a switch's case");
              }
              tCaseNode = translate(case_.node, scope, "expression");
              caseBranch = gNode.state.branch();
              bodyStates[i] = caseBranch;
              gCaseBody = generatorTranslate(
                case_.body,
                scope,
                caseBranch,
                function () {
                  return postBranch;
                },
                continueState,
                autoReturn && !case_.fallthrough
              );
              gCaseBody.goto(getPos(case_.node), case_.fallthrough
                ? function () {
                  return bodyStates[i + 1] || postBranch;
                }
                : function () {
                  return postBranch;
                });
              tGoto = caseBranch.makeGoto(getPos(case_.node), function () {
                return caseBranch;
              });
              return resultCases.push(function () {
                return ast.Switch.Case(getPos(case_.node), tCaseNode(), ast.Block(getPos(case_.node), [tGoto(), ast.Break(getPos(case_.node))]));
              });
            }; i < _len; ++i) {
              _f.call(this, _arr[i], i);
            }
            if (node.defaultCase != null) {
              defaultBranch = gNode.state.branch();
              gDefaultBody = generatorTranslate(
                node.defaultCase,
                scope,
                defaultBranch,
                function () {
                  return postBranch;
                },
                continueState,
                autoReturn
              );
              gDefaultBody.goto(getPos(node.defaultCase), function () {
                return postBranch;
              });
              defaultCase = defaultBranch.makeGoto(getPos(node.defaultCase), function () {
                return defaultBranch;
              });
            } else {
              defaultCase = gNode.state.makeGoto(getPos(node), function () {
                return postBranch;
              });
            }
            postBranch = state.branch();
            return postBranch;
          },
          Throw: function (node, scope, state, breakState, continueState) {
            var gNode;
            gNode = generatorTranslateExpression(node.node, scope, state, false);
            return gNode.state.add(function () {
              return ast.Throw(getPos(node), __first(gNode.tNode(), gNode.cleanup()));
            });
          },
          TmpWrapper: function (node, scope, state, breakState, continueState, autoReturn) {
            var _arr, _i, result, tmp;
            result = generatorTranslate(
              node.node,
              scope,
              state,
              breakState,
              continueState,
              autoReturn
            );
            for (_arr = __toArray(node.tmps), _i = _arr.length; _i--; ) {
              tmp = _arr[_i];
              scope.releaseTmp(tmp);
            }
            return result;
          },
          TryCatch: function (node, scope, state, breakState, continueState, autoReturn) {
            var postBranch;
            if (node.label != null) {
              throw Error("Not implemented: try-catch with label in generator");
            }
            state = state.enterTryCatch(getPos(node));
            state = generatorTranslate(
              node.tryBody,
              scope,
              state,
              breakState,
              continueState,
              autoReturn
            );
            state = state.exitTryCatch(
              getPos(node.tryBody),
              translate(node.catchIdent, scope, "leftExpression", false),
              function () {
                return postBranch;
              }
            );
            state = generatorTranslate(
              node.catchBody,
              scope,
              state,
              breakState,
              continueState,
              autoReturn
            );
            state.goto(getPos(node), function () {
              return postBranch;
            });
            postBranch = state.branch();
            return postBranch;
          },
          TryFinally: function (node, scope, state, breakState, continueState, autoReturn) {
            if (node.label != null) {
              throw Error("Not implemented: try-finally with label in generator");
            }
            if (state.hasGeneratorNode(node.finallyBody)) {
              throw Error("Cannot use yield in a finally");
            }
            state = state.pendingFinally(getPos(node), translate(node.finallyBody, scope, "statement"));
            state = generatorTranslate(
              node.tryBody,
              scope,
              state,
              breakState,
              continueState,
              autoReturn
            );
            return state.runPendingFinally(getPos(node));
          },
          Yield: function (node, scope, state, _p, _p2, autoReturn) {
            var gNode, newState;
            gNode = generatorTranslateExpression(node.node, scope, state, false);
            newState = gNode.state["yield"](getPos(node), function () {
              var _ref;
              _ref = gNode.tNode();
              gNode.cleanup();
              return _ref;
            });
            if (autoReturn) {
              newState["return"](getPos(node), function () {
                return state.builder.receivedIdent;
              });
            }
            return newState;
          }
        };
        return function (node, scope, state, breakState, continueState, autoReturn) {
          var key, ret;
          if (!(node instanceof ParserNode)) {
            throw TypeError("Expected node to be a " + __name(ParserNode) + ", got " + __typeof(node));
          }
          if (!(scope instanceof Scope)) {
            throw TypeError("Expected scope to be a " + __name(Scope) + ", got " + __typeof(scope));
          }
          if (!(state instanceof GeneratorState)) {
            throw TypeError("Expected state to be a " + __name(GeneratorState) + ", got " + __typeof(state));
          }
          if (state.hasGeneratorNode(node)) {
            key = node.constructor.cappedName;
            if (__owns.call(statements, key)) {
              ret = statements[key](
                node,
                scope,
                state,
                breakState,
                continueState,
                autoReturn,
                autoReturn
              );
              if (!(ret instanceof GeneratorState)) {
                throw Error("Translated non-GeneratorState from " + __typeof(node) + ": " + __typeof(ret));
              }
              return ret;
            } else {
              ret = generatorTranslateExpression(node, scope, state);
              return ret.state.returnOrAdd(autoReturn, getPos(node), function () {
                var _ref;
                _ref = ret.tNode();
                ret.cleanup();
                return _ref;
              });
            }
          } else {
            return state.returnOrAdd(autoReturn, getPos(node), translate(node, scope, "statement", false));
          }
        };
      }());
      function arrayTranslate(pos, elements, scope, replaceWithSlice, allowArrayLike, unassigned) {
        var _arr, _f, _i, _len, current, element, i, translatedItems;
        if (typeof pos !== "object" || pos === null) {
          throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
        }
        translatedItems = [];
        current = [];
        translatedItems.push(current);
        for (_arr = __toArray(flattenSpreadArray(elements)), _i = 0, _len = _arr.length; _i < _len; ++_i) {
          element = _arr[_i];
          if (element instanceof ParserNode.Spread) {
            translatedItems.push({
              tNode: translate(
                element.node,
                scope,
                "expression",
                null,
                unassigned
              ),
              type: element.node.type()
            });
            current = [];
            translatedItems.push(current);
          } else {
            current.push(translate(
              element,
              scope,
              "expression",
              null,
              unassigned
            ));
          }
        }
        if (translatedItems.length === 1) {
          return function () {
            return ast.Arr(pos, (function () {
              var _arr, _arr2, _i, _len, tItem;
              for (_arr = [], _arr2 = __toArray(translatedItems[0]), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                tItem = _arr2[_i];
                _arr.push(tItem());
              }
              return _arr;
            }()));
          };
        } else {
          for (i = translatedItems.length, _f = function (translatedItem, i) {
            if (i % 2 === 0) {
              if (__num(translatedItem.length) > 0) {
                return translatedItems[i] = function () {
                  var _arr, _arr2, _i, _len, items, tItem;
                  for (_arr = [], _arr2 = __toArray(translatedItem), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                    tItem = _arr2[_i];
                    _arr.push(tItem());
                  }
                  items = _arr;
                  return ast.Arr(items[0].pos, items);
                };
              } else {
                return translatedItems.splice(i, 1);
              }
            } else {
              return translatedItems[i] = function () {
                var node;
                node = translatedItem.tNode();
                if (translatedItem.type.isSubsetOf(Type.array)) {
                  return node;
                } else {
                  scope.addHelper("__toArray");
                  return ast.Call(
                    node.pos,
                    ast.Ident(node.pos, "__toArray"),
                    [node]
                  );
                }
              };
            }
          }; i--; ) {
            _f.call(this, translatedItems[i], i);
          }
          if (translatedItems.length === 1) {
            return function () {
              var array;
              array = translatedItems[0]();
              if (replaceWithSlice && array instanceof ast.Call && array.func instanceof ast.Ident && array.func.name === "__toArray") {
                return ast.Call(
                  pos,
                  ast.Access(
                    pos,
                    ast.Ident(pos, "__slice"),
                    "call"
                  ),
                  array.args
                );
              } else if (allowArrayLike && array instanceof ast.Call && array.func instanceof ast.Ident && array.func.name === "__toArray" && array.args[0] instanceof ast.Arguments) {
                return array.args[0];
              } else {
                return array;
              }
            };
          } else {
            return function () {
              var _arr, _i, _len, head, item, rest;
              head = translatedItems[0]();
              for (_arr = [], _i = 1, _len = translatedItems.length; _i < _len; ++_i) {
                item = translatedItems[_i];
                _arr.push(item());
              }
              rest = _arr;
              return ast.Call(
                pos,
                ast.Access(pos, head, "concat"),
                rest
              );
            };
          }
        }
      }
      translators = {
        Access: function (node, scope, location, autoReturn, unassigned) {
          var tChild, tParent;
          tParent = translate(
            node.parent,
            scope,
            "expression",
            null,
            unassigned
          );
          tChild = translate(
            node.child,
            scope,
            "expression",
            null,
            unassigned
          );
          return function () {
            return autoReturn(ast.Access(getPos(node), tParent(), tChild()));
          };
        },
        Args: function (node, scope, location, autoReturn) {
          return function () {
            return autoReturn(ast.Arguments(getPos(node)));
          };
        },
        Array: function (node, scope, location, autoReturn, unassigned) {
          var tArr;
          tArr = arrayTranslate(
            getPos(node),
            node.elements,
            scope,
            true,
            false,
            unassigned
          );
          return function () {
            return autoReturn(tArr());
          };
        },
        Assign: function (node, scope, location, autoReturn, unassigned) {
          var op, tLeft, tRight;
          op = node.op;
          tLeft = translate(node.left, scope, "leftExpression");
          tRight = translate(
            node.right,
            scope,
            "expression",
            null,
            unassigned
          );
          if (unassigned && node.left instanceof ParserNode.Ident) {
            if (op === "=" && unassigned[node.left.name] && node.right.isConst() && node.right.constValue() === void 0) {
              return function () {
                return ast.Noop(getPos(node));
              };
            }
            unassigned[node.left.name] = false;
          }
          return function () {
            var func, left, right;
            left = tLeft();
            right = tRight();
            if (op === "=" && location === "topStatement" && left instanceof ast.Ident && right instanceof ast.Func && right.name == null && scope.hasOwnVariable(left) && !scope.isVariableMutable(left)) {
              scope.markAsFunction(left);
              func = ast.Func(
                getPos(node),
                left,
                right.params,
                right.variables,
                right.body,
                right.declarations
              );
              if (autoReturn !== identity) {
                return ast.Block(getPos(node), [func, autoReturn(left)]);
              } else {
                return func;
              }
            } else {
              return autoReturn(ast.Binary(getPos(node), left, op, right));
            }
          };
        },
        Binary: function (node, scope, location, autoReturn, unassigned) {
          var tLeft, tRight;
          tLeft = translate(
            node.left,
            scope,
            "expression",
            null,
            unassigned
          );
          tRight = translate(
            node.right,
            scope,
            "expression",
            null,
            unassigned
          );
          return function () {
            return autoReturn(ast.Binary(getPos(node), tLeft(), node.op, tRight()));
          };
        },
        Block: function (node, scope, location, autoReturn, unassigned) {
          var tLabel, tNodes;
          tLabel = node.label && translate(node.label, scope, "label");
          tNodes = translateArray(
            node.nodes,
            scope,
            location,
            autoReturn,
            unassigned
          );
          return function () {
            return ast.Block(
              getPos(node),
              (function () {
                var _arr, _arr2, _i, _len, tNode;
                for (_arr = [], _arr2 = __toArray(tNodes), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                  tNode = _arr2[_i];
                  _arr.push(tNode());
                }
                return _arr;
              }()),
              typeof tLabel === "function" ? tLabel() : void 0
            );
          };
        },
        Break: function (node, scope) {
          var tLabel;
          tLabel = node.label && translate(node.label, scope, "label");
          return function () {
            return ast.Break(getPos(node), typeof tLabel === "function" ? tLabel() : void 0);
          };
        },
        Call: function (node, scope, location, autoReturn, unassigned) {
          var args, isApply, isNew, tArgArray, tFunc, tStart;
          tFunc = translate(
            node.func,
            scope,
            "expression",
            null,
            unassigned
          );
          isApply = node.isApply;
          isNew = node.isNew;
          args = node.args;
          if (isApply && (args.length === 0 || !(args[0] instanceof ParserNode.Spread))) {
            if (args.length === 0) {
              tStart = function () {
                return ast.Const(getPos(node), void 0);
              };
            } else {
              tStart = translate(
                args[0],
                scope,
                "expression",
                null,
                unassigned
              );
            }
            tArgArray = arrayTranslate(
              getPos(node),
              __slice.call(args, 1),
              scope,
              false,
              true,
              unassigned
            );
            return function () {
              var argArray, func, start;
              func = tFunc();
              start = tStart();
              argArray = tArgArray();
              if (argArray instanceof ast.Arr) {
                return autoReturn(ast.Call(
                  getPos(node),
                  ast.Access(getPos(node), func, "call"),
                  [start].concat(__toArray(argArray.elements))
                ));
              } else {
                return autoReturn(ast.Call(
                  getPos(node),
                  ast.Access(getPos(node), func, "apply"),
                  [start, argArray]
                ));
              }
            };
          } else {
            tArgArray = arrayTranslate(
              getPos(node),
              args,
              scope,
              false,
              true,
              unassigned
            );
            return function () {
              var _once, _once2, argArray, func;
              func = tFunc();
              argArray = tArgArray();
              if (isApply) {
                return scope.maybeCache(argArray, Type.array, (_once = false, function (setArray, array) {
                  if (_once) {
                    throw Error("Attempted to call function more than once");
                  } else {
                    _once = true;
                  }
                  scope.addHelper("__slice");
                  return autoReturn(ast.Call(
                    getPos(node),
                    ast.Access(getPos(node), func, "apply"),
                    [
                      ast.Access(getPos(node), setArray, 0),
                      ast.Call(
                        getPos(node),
                        ast.Access(
                          getPos(node),
                          ast.Ident(getPos(node), "__slice"),
                          "call"
                        ),
                        [
                          array,
                          ast.Const(getPos(node), 1)
                        ]
                      )
                    ]
                  ));
                }));
              } else if (argArray instanceof ast.Arr) {
                return autoReturn(ast.Call(getPos(node), func, argArray.elements, isNew));
              } else if (isNew) {
                scope.addHelper("__new");
                return autoReturn(ast.Call(
                  getPos(node),
                  ast.Access(
                    getPos(node),
                    ast.Ident(getPos(node), "__new"),
                    ast.Const(getPos(node), "apply")
                  ),
                  [func, argArray]
                ));
              } else if (func instanceof ast.Binary && func.op === ".") {
                return scope.maybeCache(func.left, Type["function"], (_once2 = false, function (setParent, parent) {
                  if (_once2) {
                    throw Error("Attempted to call function more than once");
                  } else {
                    _once2 = true;
                  }
                  return autoReturn(ast.Call(
                    getPos(node),
                    ast.Access(getPos(node), setParent, func.right, "apply"),
                    [parent, argArray]
                  ));
                }));
              } else {
                return autoReturn(ast.Call(
                  getPos(node),
                  ast.Access(getPos(node), func, "apply"),
                  [
                    ast.Const(getPos(node), void 0),
                    argArray
                  ]
                ));
              }
            };
          }
        },
        Comment: function (node, scope, location, autoReturn) {
          return function () {
            return ast.Comment(getPos(node), node.text);
          };
        },
        Const: function (node, scope, location, autoReturn) {
          return function () {
            return autoReturn(ast.Const(getPos(node), node.value));
          };
        },
        Continue: function (node, scope) {
          var tLabel;
          tLabel = node.label && translate(node.label, scope, "label");
          return function () {
            return ast.Continue(getPos(node), typeof tLabel === "function" ? tLabel() : void 0);
          };
        },
        Debugger: function (node) {
          return function () {
            return ast.Debugger(getPos(node));
          };
        },
        Def: function (node, scope, location, autoReturn) {
          throw Error("Cannot have a stray def");
        },
        EmbedWrite: function (node, scope, location, autoReturn, unassigned) {
          var tText;
          tText = translate(
            node.text,
            scope,
            "expression",
            null,
            unassigned
          );
          return function () {
            return ast.Call(
              getPos(node),
              ast.Ident(getPos(node), "write"),
              [tText()].concat(node.escape
                ? [ast.Const(getPos(node), true)]
                : [])
            );
          };
        },
        Eval: function (node, scope, location, autoReturn, unassigned) {
          var tCode;
          tCode = translate(
            node.code,
            scope,
            "expression",
            null,
            unassigned
          );
          return function () {
            return autoReturn(ast.Eval(getPos(node), tCode()));
          };
        },
        For: function (node, scope, location, autoReturn, unassigned) {
          var tBody, tInit, tLabel, tStep, tTest;
          tLabel = node.label && translate(node.label, scope, "label");
          if (node.init != null) {
            tInit = translate(
              node.init,
              scope,
              "expression",
              null,
              unassigned
            );
          }
          if (node.test != null) {
            tTest = translate(node.test, scope, "expression");
          }
          if (node.step != null) {
            tStep = translate(node.step, scope, "expression");
          }
          tBody = translate(node.body, scope, "statement");
          return function () {
            return ast.For(
              getPos(node),
              typeof tInit === "function" ? tInit() : void 0,
              typeof tTest === "function" ? tTest() : void 0,
              typeof tStep === "function" ? tStep() : void 0,
              tBody(),
              typeof tLabel === "function" ? tLabel() : void 0
            );
          };
        },
        ForIn: function (node, scope, location, autoReturn, unassigned) {
          var tBody, tKey, tLabel, tObject;
          tLabel = node.label && translate(node.label, scope, "label");
          tKey = translate(node.key, scope, "leftExpression");
          tObject = translate(
            node.object,
            scope,
            "expression",
            null,
            unassigned
          );
          tBody = translate(node.body, scope, "statement");
          return function () {
            var key;
            key = tKey();
            if (!(key instanceof ast.Ident)) {
              throw Error("Expected an Ident for a for-in key");
            }
            scope.addVariable(key, Type.string);
            return ast.ForIn(
              getPos(node),
              key,
              tObject(),
              tBody(),
              typeof tLabel === "function" ? tLabel() : void 0
            );
          };
        },
        Function: (function () {
          var primitiveTypes, translateParamTypes, translateType,
              translateTypeChecks;
          primitiveTypes = { Boolean: "boolean", String: "string", Number: "number", Function: "function" };
          translateTypeChecks = {
            Ident: function (node) {
              if (__owns.call(primitiveTypes, node.name)) {
                return Type[primitiveTypes[node.name]];
              } else {
                return Type.any;
              }
            },
            Access: function (node) {
              return Type.any;
            },
            TypeUnion: function (node) {
              var _arr, _i, _len, result, type;
              result = Type.none;
              for (_arr = __toArray(node.types), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                type = _arr[_i];
                if (type instanceof ParserNode.Const) {
                  if (type.value === null) {
                    result = result.union(Type["null"]);
                  } else if (type.value === void 0) {
                    result = result.union(Type["undefined"]);
                  } else {
                    throw Error("Unknown const value for typechecking: " + String(type.value));
                  }
                } else if (type instanceof ParserNode.Ident) {
                  result = result.union(__owns.call(primitiveTypes, type.name) ? Type[primitiveTypes[type.name]] : Type.any);
                } else {
                  throw Error("Not implemented: typechecking for non-idents/consts within a type-union");
                }
              }
              return result;
            },
            TypeFunction: function (node) {
              return Type["function"];
            },
            TypeGeneric: function (node) {
              if (node.basetype.name === "Array") {
                return translateTypeCheck(node.args[0]).array();
              } else if (node.basetype.name === "Function") {
                return Type["function"];
              } else {
                return Type.any;
              }
            },
            TypeObject: function (node) {
              var _arr, _i, _len, _ref, key, typeData, value;
              typeData = {};
              for (_arr = __toArray(node.pairs), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                _ref = _arr[_i];
                key = _ref.key;
                value = _ref.value;
                if (key instanceof ParserNode.Const) {
                  typeData[key.value] = translateTypeCheck(value);
                }
              }
              return Type.makeObject(typeData);
            }
          };
          function translateTypeCheck(node) {
            if (!__owns.call(translateTypeChecks, node.constructor.cappedName)) {
              throw Error("Unknown type: " + String(node.constructor.cappedName));
            }
            return translateTypeChecks[node.constructor.cappedName](node);
          }
          translateParamTypes = {
            Param: function (param, scope, inner) {
              var ident, laterInit, tmp, type;
              ident = translate(param.ident, scope, "param")();
              laterInit = [];
              if (ident instanceof ast.Binary && ident.op === "." && ident.right instanceof ast.Const && typeof ident.right.value === "string") {
                tmp = ast.Ident(ident.pos, ident.right.value);
                laterInit.push(ast.Binary(ident.pos, ident, "=", tmp));
                ident = tmp;
              }
              if (!(ident instanceof ast.Ident)) {
                throw Error("Expecting param to be an Ident, got " + __typeof(ident));
              }
              if (param.asType) {
                type = translateTypeCheck(param.asType);
              }
              scope.addVariable(ident, type, param.isMutable);
              scope.markAsParam(ident);
              return { init: laterInit, ident: ident, spread: !!param.spread };
            }
          };
          function translateParam(param, scope, inner) {
            var type;
            type = param.constructor.cappedName;
            if (!__owns.call(translateParamTypes, type)) {
              throw Error("Unknown parameter type: " + __strnum(type));
            }
            return translateParamTypes[type](param, scope, inner);
          }
          translateType = (function () {
            var translateTypes;
            translateTypes = {
              Ident: (function () {
                var primordialTypes;
                primordialTypes = {
                  String: Type.string,
                  Number: Type.number,
                  Boolean: Type.boolean,
                  Function: Type["function"],
                  Array: Type.array
                };
                return function (node, scope) {
                  if (!__owns.call(primordialTypes, node.name)) {
                    throw Error("Not implemented: custom type " + __strnum(node.name));
                  }
                  return primordialTypes[node.name];
                };
              }()),
              Const: function (node, scope) {
                switch (node.value) {
                case null: return Type["null"];
                case void 0: return Type["undefined"];
                default: throw Error("Unexpected const type: " + String(node.value));
                }
              },
              TypeGeneric: function (node, scope) {
                var _arr, _arr2, _i, _len, arg, args, base;
                base = translateType(node.basetype, scope);
                for (_arr = [], _arr2 = __toArray(node.args), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                  arg = _arr2[_i];
                  _arr.push(translateType(arg, scope));
                }
                args = _arr;
                return Type.generic.apply(Type, [base].concat(__toArray(args)));
              },
              TypeUnion: function (node, scope) {
                var _arr, _i, _len, current, type;
                current = Type.none;
                for (_arr = __toArray(node.types), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                  type = _arr[_i];
                  current = current.union(translateType(type));
                }
                return current;
              }
            };
            return function (node, scope) {
              if (!__owns.call(translateTypes, node.constructor.cappedName)) {
                throw Error("Unknown type to translate: " + String(node.constructor.cappedName));
              }
              return translateTypes[node.constructor.cappedName](node, scope);
            };
          }());
          return function (node, scope, location, autoReturn) {
            return function () {
              var _arr, _ref, body, fakeThis, i, initializers, innerScope, len, p,
                  param, paramIdents, realInnerScope, unassigned, wrap;
              innerScope = scope.clone(!!node.bound);
              realInnerScope = innerScope;
              if (node.generator && !innerScope.bound) {
                innerScope = innerScope.clone(true);
              }
              paramIdents = [];
              initializers = [];
              for (_arr = __toArray(node.params), i = 0, len = _arr.length; i < len; ++i) {
                p = _arr[i];
                param = translateParam(p, innerScope, false);
                if (param.spread) {
                  throw Error("Encountered a spread parameter");
                }
                paramIdents.push(param.ident);
                initializers.push.apply(initializers, __toArray(param.init));
              }
              unassigned = {};
              _ref = translateFunctionBody(
                getPos(node),
                node.generator,
                node.autoReturn,
                innerScope,
                node.body,
                unassigned
              );
              body = _ref.body;
              wrap = _ref.wrap;
              innerScope.releaseTmps();
              body = ast.Block(getPos(node.body), __toArray(initializers).concat([body]));
              if (innerScope.usedThis || node.bound instanceof ParserNode) {
                if (node.bound instanceof ParserNode) {
                  fakeThis = ast.Ident(getPos(node.body), "_this");
                  innerScope.addVariable(fakeThis);
                  body = ast.Block(getPos(node.body), [
                    ast.Assign(getPos(node.body), fakeThis, translate(
                      node.bound,
                      scope,
                      "expression",
                      null,
                      unassigned
                    )()),
                    body,
                    ast.Return(getPos(node.body), fakeThis)
                  ]);
                } else {
                  if (innerScope.bound) {
                    scope.usedThis = true;
                  }
                  if ((innerScope.hasBound || node.generator) && !realInnerScope.bound) {
                    fakeThis = ast.Ident(getPos(node.body), "_this");
                    innerScope.addVariable(fakeThis);
                    body = ast.Block(getPos(node.body), [
                      ast.Assign(getPos(node.body), fakeThis, ast.This(getPos(node.body))),
                      body
                    ]);
                  }
                }
              }
              if (node.curry) {
                throw Error("Expected node to already be curried");
              }
              return autoReturn(wrap(ast.Func(
                getPos(node),
                null,
                paramIdents,
                innerScope.getVariables(),
                body,
                []
              )));
            };
          };
        }()),
        Ident: function (node, scope, location, autoReturn) {
          var name;
          name = node.name;
          scope.addHelper(name);
          return function () {
            var ident;
            ident = ast.Ident(getPos(node), name);
            if (!scope.options.embedded || isPrimordial(name) || location !== "expression" || scope.hasVariable(ident) || scope.macros.hasHelper(name)) {
              return autoReturn(ident);
            } else {
              return ast.Access(
                getPos(node),
                ast.Ident(getPos(node), "context"),
                ast.Const(getPos(node), name)
              );
            }
          };
        },
        If: function (node, scope, location, autoReturn, unassigned) {
          var innerLocation, tLabel, tTest, tWhenFalse, tWhenTrue;
          if (location === "statement" || location === "topStatement") {
            innerLocation = "statement";
          } else {
            innerLocation = location;
          }
          tLabel = node.label && translate(node.label, scope, "label");
          tTest = translate(
            node.test,
            scope,
            "expression",
            null,
            unassigned
          );
          tWhenTrue = translate(
            node.whenTrue,
            scope,
            innerLocation,
            autoReturn,
            unassigned
          );
          if (node.whenFalse != null) {
            tWhenFalse = translate(
              node.whenFalse,
              scope,
              innerLocation,
              autoReturn,
              unassigned
            );
          }
          return function () {
            return ast.If(
              getPos(node),
              tTest(),
              tWhenTrue(),
              typeof tWhenFalse === "function" ? tWhenFalse() : void 0,
              typeof tLabel === "function" ? tLabel() : void 0
            );
          };
        },
        Nothing: function (node) {
          return function () {
            return ast.Noop(getPos(node));
          };
        },
        Object: function (node, scope, location, autoReturn, unassigned) {
          var _arr, _i, _len, pair, properties, tKeys, tPrototype, tValues;
          tKeys = [];
          tValues = [];
          properties = [];
          for (_arr = __toArray(node.pairs), _i = 0, _len = _arr.length; _i < _len; ++_i) {
            pair = _arr[_i];
            tKeys.push(translate(
              pair.key,
              scope,
              "expression",
              null,
              unassigned
            ));
            tValues.push(translate(
              pair.value,
              scope,
              "expression",
              null,
              unassigned
            ));
            properties.push(pair.property);
          }
          if (node.prototype != null) {
            tPrototype = translate(
              node.prototype,
              scope,
              "expression",
              null,
              unassigned
            );
          }
          return function () {
            var _len, constPairs, currentPair, currentPairs, i, ident, key,
                lastProperty, obj, postConstPairs, property, prototype, result,
                tKey, tValue, value;
            constPairs = [];
            postConstPairs = [];
            if (typeof tPrototype === "function") {
              prototype = tPrototype();
            }
            if (prototype != null) {
              currentPairs = postConstPairs;
            } else {
              currentPairs = constPairs;
            }
            lastProperty = null;
            for (i = 0, _len = tKeys.length; i < _len; ++i) {
              tKey = tKeys[i];
              tValue = tValues[i];
              key = tKey();
              value = tValue();
              property = properties[i];
              if (!(key instanceof ast.Const) || property) {
                currentPairs = postConstPairs;
              }
              currentPair = currentPairs[currentPairs.length - 1];
              if ((property === "get" || property === "set") && lastProperty && property !== lastProperty && key instanceof ast.Const && currentPair.key instanceof ast.Const && key.value === currentPair.key.value) {
                currentPair[lastProperty] = currentPair.value;
                currentPair.property = __strnum(lastProperty) + __strnum(property);
                delete currentPair.value;
                currentPair[property] = value;
                lastProperty = null;
              } else {
                currentPairs.push({ key: key, value: value, property: property });
                if (property === "get" || property === "set") {
                  lastProperty = property;
                }
              }
            }
            if (prototype != null) {
              scope.addHelper("__create");
              obj = ast.Call(
                getPos(node),
                ast.Ident(getPos(node), "__create"),
                [prototype]
              );
            } else {
              obj = ast.Obj(getPos(node), (function () {
                var _arr, _i, _len, _ref, key, value;
                for (_arr = [], _i = 0, _len = constPairs.length; _i < _len; ++_i) {
                  _ref = constPairs[_i];
                  key = _ref.key;
                  value = _ref.value;
                  _arr.push(ast.Obj.Pair(key.pos, String(key.value), value));
                }
                return _arr;
              }()));
            }
            if (postConstPairs.length === 0) {
              return autoReturn(obj);
            } else {
              ident = scope.reserveIdent(getPos(node), "o", Type.object);
              result = ast.BlockExpression(getPos(node), [ast.Assign(getPos(node), ident, obj)].concat(
                (function () {
                  var _arr, _i, _len, key, pair, property;
                  for (_arr = [], _i = 0, _len = postConstPairs.length; _i < _len; ++_i) {
                    pair = postConstPairs[_i];
                    key = pair.key;
                    property = pair.property;
                    if (property) {
                      scope.addHelper("__defProp");
                      _arr.push(ast.Call(
                        key.pos,
                        ast.Ident(key.pos, "__defProp"),
                        [
                          ident,
                          key,
                          property === "property" ? pair.value
                            : property === "getset"
                            ? ast.Obj(pair.get.pos, [
                              ast.Obj.Pair(pair.get.pos, "get", pair.get),
                              ast.Obj.Pair(pair.set.pos, "set", pair.set),
                              ast.Obj.Pair(pair.set.pos, "configurable", ast.Const(pair.set.pos, true)),
                              ast.Obj.Pair(pair.set.pos, "enumerable", ast.Const(pair.set.pos, true))
                            ])
                            : property === "setget"
                            ? ast.Obj(pair.set.pos, [
                              ast.Obj.Pair(pair.set.pos, "set", pair.set),
                              ast.Obj.Pair(pair.get.pos, "get", pair.get),
                              ast.Obj.Pair(pair.get.pos, "configurable", ast.Const(pair.get.pos, true)),
                              ast.Obj.Pair(pair.get.pos, "enumerable", ast.Const(pair.get.pos, true))
                            ])
                            : property === "get"
                            ? ast.Obj(pair.value.pos, [
                              ast.Obj.Pair(pair.value.pos, "get", pair.value),
                              ast.Obj.Pair(pair.value.pos, "configurable", ast.Const(pair.value.pos, true)),
                              ast.Obj.Pair(pair.value.pos, "enumerable", ast.Const(pair.value.pos, true))
                            ])
                            : property === "set"
                            ? ast.Obj(pair.value.pos, [
                              ast.Obj.Pair(pair.value.pos, "set", pair.value),
                              ast.Obj.Pair(pair.value.pos, "configurable", ast.Const(pair.value.pos, true)),
                              ast.Obj.Pair(pair.value.pos, "enumerable", ast.Const(pair.value.pos, true))
                            ])
                            : __throw(Error("Unknown property type: " + String(property)))
                        ]
                      ));
                    } else {
                      _arr.push(ast.Assign(
                        key.pos,
                        ast.Access(key.pos, ident, key),
                        pair.value
                      ));
                    }
                  }
                  return _arr;
                }()),
                [ident]
              ));
              scope.releaseIdent(ident);
              return autoReturn(result);
            }
          };
        },
        Regexp: function (node, scope, location, autoReturn, unassigned) {
          var tSource;
          tSource = translate(
            node.source,
            scope,
            "expression",
            null,
            unassigned
          );
          return function () {
            var flags, source;
            source = tSource();
            flags = node.flags;
            if (source.isConst()) {
              return autoReturn(ast.Regex(getPos(node), String(source.constValue()), flags));
            } else {
              return autoReturn(ast.Call(
                getPos(node),
                ast.Ident(getPos(node), "RegExp"),
                [
                  source,
                  ast.Const(getPos(node), flags)
                ]
              ));
            }
          };
        },
        Return: function (node, scope, location, autoReturn, unassigned) {
          var tValue;
          if (location !== "statement" && location !== "topStatement") {
            throw Error("Expected Return in statement position");
          }
          tValue = translate(
            node.node,
            scope,
            "expression",
            null,
            unassigned
          );
          return function () {
            return ast.Return(getPos(node), tValue());
          };
        },
        Switch: function (node, scope, location, autoReturn, unassigned) {
          var _arr, _arr2, _i, _len, case_, tCases, tDefaultCase, tLabel, tNode;
          tLabel = node.label && translate(node.label, scope, "label");
          tNode = translate(
            node.node,
            scope,
            "expression",
            null,
            unassigned
          );
          for (_arr = [], _arr2 = __toArray(node.cases), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
            case_ = _arr2[_i];
            _arr.push({
              pos: getPos(case_.node),
              tNode: translate(
                case_.node,
                scope,
                "expression",
                null,
                unassigned
              ),
              tBody: translate(
                case_.body,
                scope,
                "statement",
                null,
                unassigned
              ),
              fallthrough: case_.fallthrough
            });
          }
          tCases = _arr;
          if (node.defaultCase != null) {
            tDefaultCase = translate(
              node.defaultCase,
              scope,
              "statement",
              null,
              unassigned
            );
          }
          return function () {
            return ast.Switch(
              getPos(node),
              tNode(),
              (function () {
                var _arr, case_, caseBody, caseNode, i, len;
                for (_arr = [], i = 0, len = tCases.length; i < len; ++i) {
                  case_ = tCases[i];
                  caseNode = case_.tNode();
                  caseBody = case_.tBody();
                  if (!case_.fallthrough || i === len - 1 && defaultCase.isNoop()) {
                    caseBody = ast.Block(case_.pos, [autoReturn(caseBody), ast.Break(caseBody.pos)]);
                  }
                  _arr.push(ast.Switch.Case(case_.pos, caseNode, caseBody));
                }
                return _arr;
              }()),
              tDefaultCase != null ? autoReturn(tDefaultCase()) : ast.Noop(getPos(node)),
              typeof tLabel === "function" ? tLabel() : void 0
            );
          };
        },
        Super: function (node, scope, location, autoReturn) {
          throw Error("Cannot have a stray super call");
        },
        Tmp: function (node, scope, location, autoReturn) {
          var ident;
          ident = scope.getTmp(getPos(node), node.id, node.name, node.type());
          return function () {
            return autoReturn(ident);
          };
        },
        TmpWrapper: function (node, scope, location, autoReturn, unassigned) {
          var _arr, _i, tmp, tResult;
          tResult = translate(
            node.node,
            scope,
            location,
            autoReturn,
            unassigned
          );
          for (_arr = __toArray(node.tmps), _i = _arr.length; _i--; ) {
            tmp = _arr[_i];
            scope.releaseTmp(tmp);
          }
          return tResult;
        },
        This: function (node, scope, location, autoReturn) {
          return function () {
            scope.usedThis = true;
            return autoReturn(scope.bound ? ast.Ident(getPos(node), "_this") : ast.This(getPos(node)));
          };
        },
        Throw: function (node, scope, location, autoReturn, unassigned) {
          var tNode;
          tNode = translate(
            node.node,
            scope,
            "expression",
            null,
            unassigned
          );
          return function () {
            return ast.Throw(getPos(node), tNode());
          };
        },
        TryCatch: function (node, scope, location, autoReturn, unassigned) {
          var innerScope, tCatchBody, tCatchIdent, tLabel, tTryBody;
          tLabel = node.label && translate(node.label, scope, "label");
          tTryBody = translate(
            node.tryBody,
            scope,
            "statement",
            autoReturn,
            unassigned
          );
          innerScope = scope.clone(false);
          tCatchIdent = translate(node.catchIdent, innerScope, "leftExpression");
          tCatchBody = translate(
            node.catchBody,
            innerScope,
            "statement",
            autoReturn,
            unassigned
          );
          return function () {
            var catchIdent, result;
            catchIdent = tCatchIdent();
            if (catchIdent instanceof ast.Ident) {
              innerScope.addVariable(catchIdent);
              innerScope.markAsParam(catchIdent);
            }
            result = ast.TryCatch(
              getPos(node),
              tTryBody(),
              catchIdent,
              tCatchBody(),
              typeof tLabel === "function" ? tLabel() : void 0
            );
            __import(scope.variables, innerScope.variables);
            return result;
          };
        },
        TryFinally: function (node, scope, location, autoReturn, unassigned) {
          var tFinallyBody, tLabel, tTryBody;
          tLabel = node.label && translate(node.label, scope, "label");
          tTryBody = translate(
            node.tryBody,
            scope,
            "statement",
            autoReturn,
            unassigned
          );
          tFinallyBody = translate(
            node.finallyBody,
            scope,
            "statement",
            null,
            unassigned
          );
          return function () {
            return ast.TryFinally(getPos(node), tTryBody(), tFinallyBody(), typeof tLabel === "function" ? tLabel() : void 0);
          };
        },
        Unary: function (node, scope, location, autoReturn, unassigned) {
          var _ref, tSubnode;
          if (unassigned && ((_ref = node.op) === "++" || _ref === "--" || _ref === "++post" || _ref === "--post") && node.node instanceof ParserNode.Ident) {
            unassigned[node.node.name] = false;
          }
          tSubnode = translate(
            node.node,
            scope,
            "expression",
            null,
            unassigned
          );
          return function () {
            return autoReturn(ast.Unary(getPos(node), node.op, tSubnode()));
          };
        },
        Var: function (node, scope, location, autoReturn, unassigned) {
          var tIdent;
          if (unassigned && node.ident instanceof ParserNode.Ident && !__owns.call(unassigned, node.ident.name)) {
            unassigned[node.ident.name] = true;
          }
          tIdent = translate(node.ident, scope, "leftExpression", autoReturn);
          return function () {
            var ident;
            ident = tIdent();
            scope.addVariable(ident, Type.any, node.isMutable);
            return ast.Noop(getPos(node));
          };
        }
      };
      function translate(node, scope, location, autoReturn, unassigned) {
        var ret;
        if (typeof node !== "object" || node === null) {
          throw TypeError("Expected node to be an Object, got " + __typeof(node));
        }
        if (!(scope instanceof Scope)) {
          throw TypeError("Expected scope to be a " + __name(Scope) + ", got " + __typeof(scope));
        }
        if (typeof location !== "string") {
          throw TypeError("Expected location to be a String, got " + __typeof(location));
        }
        if (typeof autoReturn !== "function") {
          autoReturn = makeAutoReturn(autoReturn);
        }
        if (!__owns.call(translators, node.constructor.cappedName)) {
          throw Error("Unable to translate unknown node type: " + String(node.constructor.cappedName));
        }
        ret = translators[node.constructor.cappedName](
          node,
          scope,
          location,
          autoReturn,
          unassigned
        );
        if (typeof ret !== "function") {
          throw Error("Translated non-function: " + __typeof(ret));
        }
        return ret;
      }
      function translateArray(nodes, scope, location, autoReturn, unassigned) {
        var _arr, i, len, node;
        if (!__isArray(nodes)) {
          throw TypeError("Expected nodes to be an Array, got " + __typeof(nodes));
        }
        if (!(scope instanceof Scope)) {
          throw TypeError("Expected scope to be a " + __name(Scope) + ", got " + __typeof(scope));
        }
        if (typeof location !== "string") {
          throw TypeError("Expected location to be a String, got " + __typeof(location));
        }
        for (_arr = [], i = 0, len = nodes.length; i < len; ++i) {
          node = nodes[i];
          _arr.push(translate(
            nodes[i],
            scope,
            location,
            i === len - 1 && autoReturn,
            unassigned
          ));
        }
        return _arr;
      }
      function translateFunctionBody(pos, isGenerator, autoReturn, scope, body, unassigned) {
        var _ref, builder, hasGeneratorNode, isSimpleGenerator, translatedBody;
        if (unassigned == null) {
          unassigned = {};
        }
        isSimpleGenerator = false;
        if (isGenerator) {
          hasGeneratorNode = makeHasGeneratorNode();
          isSimpleGenerator = !hasGeneratorNode(body, true);
          if (!isSimpleGenerator) {
            builder = GeneratorBuilder(pos, scope, hasGeneratorNode);
            generatorTranslate(
              body,
              scope,
              builder.start,
              null,
              null,
              autoReturn
            ).goto(pos, function () {
              return builder.stop;
            });
            translatedBody = builder.create();
            if (pos.file) {
              if (!(_ref = translatedBody.pos).file) {
                _ref.file = pos.file;
              }
            }
            return {
              wrap: function (x) {
                return x;
              },
              body: translatedBody
            };
          }
        }
        translatedBody = translate(
          body,
          scope,
          "topStatement",
          autoReturn,
          unassigned
        )();
        if (pos.file) {
          if (!(_ref = translatedBody.pos).file) {
            _ref.file = pos.file;
          }
        }
        return {
          wrap: isSimpleGenerator
            ? (scope.addHelper("__generator"), function (x) {
              return ast.Call(
                pos,
                ast.Ident(pos, "__generator"),
                [x]
              );
            })
            : function (x) {
              return x;
            },
          body: translatedBody
        };
      }
      function makeGetPos(getPosition) {
        if (typeof getPosition !== "function") {
          throw TypeError("Expected getPosition to be a Function, got " + __typeof(getPosition));
        }
        return function (node) {
          var pos;
          if (!(node instanceof ParserNode)) {
            throw TypeError("Expected node to be a " + __name(ParserNode) + ", got " + __typeof(node));
          }
          pos = getPosition(node.index);
          return makePos(pos.line, pos.column, node.file);
        };
      }
      function translateRoot(roots, scope, getPosition) {
        var _arr, _i, _len, _ref, bareInit, body, callFunc, comments, fakeThis,
            helper, ident, init, name, noPos, uncommentedBody, walker, wrap;
        if (typeof roots !== "object" || roots === null) {
          throw TypeError("Expected roots to be an Object, got " + __typeof(roots));
        }
        if (!(scope instanceof Scope)) {
          throw TypeError("Expected scope to be a " + __name(Scope) + ", got " + __typeof(scope));
        }
        if (!__isArray(roots)) {
          roots = [roots];
        }
        if (!__isArray(getPosition)) {
          getPosition = [getPosition];
        }
        if (roots.length === 0) {
          roots.push({
            type: "Root",
            line: 0,
            column: 0,
            body: { type: "Nothing", line: 0, column: 0 }
          });
        }
        function splitComments(body) {
          var comments;
          comments = [];
          while (true) {
            if (body instanceof ast.Comment) {
              comments.push(body);
              body = ast.Noop(body.pos);
            } else if (body instanceof ast.Block && body.body[0] instanceof ast.Comment) {
              comments.push(body.body[0]);
              body = ast.Block(body.pos, __slice.call(body.body, 1));
            } else {
              break;
            }
          }
          return { comments: comments, body: body };
        }
        noPos = makePos(0, 0);
        if (scope.options.embedded) {
          for (_arr = ["write", "context"], _i = 0, _len = _arr.length; _i < _len; ++_i) {
            name = _arr[_i];
            ident = ast.Ident(
              { line: 0, column: 0 },
              name
            );
            scope.addVariable(ident);
            scope.markAsParam(ident);
          }
        }
        _ref = roots.length === 1
          ? (function () {
            var _ref, ret, rootPos;
            getPos = makeGetPos(getPosition[0]);
            if (!(roots[0] instanceof ParserNode.Root)) {
              throw Error("Cannot translate non-Root object");
            }
            if (roots[0].isGenerator) {
              scope = scope.clone(true);
            }
            rootPos = getPos(roots[0]);
            ret = translateFunctionBody(
              rootPos,
              roots[0].isGenerator,
              scope.options["return"] || scope.options["eval"],
              scope,
              roots[0].body
            );
            if (!(_ref = ret.body.pos).file) {
              _ref.file = rootPos.file;
            }
            getPos = null;
            return ret;
          }())
          : {
            wrap: function (x) {
              return x;
            },
            body: ast.Block(noPos, (function () {
              var _arr, _arr2, _i, _len, _ref, comments, innerScope, root, rootBody,
                  rootPos;
              for (_arr = [], _arr2 = __toArray(roots), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                root = _arr2[_i];
                getPos = makeGetPos(getPosition[0]);
                if (!(root instanceof ParserNode.Root)) {
                  throw Error("Cannot translate non-Root object");
                }
                innerScope = scope.clone(true);
                _ref = splitComments(translate(
                  root.body,
                  innerScope,
                  "topStatement",
                  scope.options["return"] || scope.options["eval"],
                  []
                )());
                comments = _ref.comments;
                rootBody = _ref.body;
                rootPos = getPos(root);
                getPos = null;
                _arr.push(ast.Block(rootPos, __toArray(comments).concat([
                  ast.Call(rootPos, ast.Func(
                    rootPos,
                    null,
                    [],
                    innerScope.getVariables(),
                    rootBody
                  ))
                ])));
              }
              return _arr;
            }()))
          };
        wrap = _ref.wrap;
        body = _ref.body;
        init = [];
        if (scope.hasBound && scope.usedThis) {
          fakeThis = ast.Ident(body.pos, "_this");
          scope.addVariable(fakeThis);
          init.push(ast.Assign(body.pos, fakeThis, ast.This(body.pos)));
        }
        scope.fillHelperDependencies();
        for (_arr = __toArray(scope.getHelpers()), _i = 0, _len = _arr.length; _i < _len; ++_i) {
          helper = _arr[_i];
          if (helper !== "GLOBAL" && scope.macros.hasHelper(helper)) {
            ident = ast.Ident(body.pos, helper);
            scope.addVariable(ident);
            init.push(ast.Assign(body.pos, ident, scope.macros.getHelper(helper)));
          }
        }
        bareInit = [];
        if (scope.options["eval"]) {
          walker = function (node) {
            if (node instanceof ast.Func) {
              scope.addHelper("GLOBAL");
              if (node.name != null) {
                return ast.Block(node.pos, [
                  node,
                  ast.Assign(
                    node.pos,
                    ast.Access(
                      node.pos,
                      ast.Ident(node.pos, "GLOBAL"),
                      node.name.name
                    ),
                    node.name
                  )
                ]);
              } else {
                return node;
              }
            } else if (node instanceof ast.Binary && node.op === "=" && node.left instanceof ast.Ident) {
              scope.addHelper("GLOBAL");
              return ast.Assign(
                node.pos,
                ast.Access(
                  node.pos,
                  ast.Ident(node.pos, "GLOBAL"),
                  node.left.name
                ),
                node.walk(walker)
              );
            }
          };
          body = body.walk(walker);
          body = body.mutateLast(
            function (node) {
              scope.addHelper("GLOBAL");
              return ast.Assign(
                node.pos,
                ast.Access(
                  node.pos,
                  ast.Ident(node.pos, "GLOBAL"),
                  ast.Const(node.pos, "_")
                ),
                node
              );
            },
            { "return": true }
          );
        }
        _ref = splitComments(body);
        comments = _ref.comments;
        uncommentedBody = _ref.body;
        if (scope.options.embedded) {
          uncommentedBody = ast.Block(body.pos, [
            ast.Return(body.pos, wrap(ast.Func(
              body.pos,
              null,
              [
                ast.Ident(body.pos, "write"),
                ast.Ident(body.pos, "context")
              ],
              [],
              ast.Block(body.pos, [
                ast.If(
                  body.pos,
                  ast.Binary(
                    body.pos,
                    ast.Ident(body.pos, "context"),
                    "==",
                    ast.Const(body.pos, null)
                  ),
                  ast.Assign(
                    body.pos,
                    ast.Ident(body.pos, "context"),
                    ast.Obj(body.pos)
                  )
                ),
                uncommentedBody
              ])
            )))
          ]);
        }
        if (scope.options.bare) {
          if (scope.hasHelper("GLOBAL")) {
            scope.addVariable(ast.Ident(body.pos, "GLOBAL"));
            bareInit.unshift(ast.Assign(
              body.pos,
              ast.Ident(body.pos, "GLOBAL"),
              scope.macros.getHelper("GLOBAL")
            ));
          }
          if (scope.options.undefinedName != null) {
            scope.addVariable(scope.options.undefinedName);
          }
          return ast.Root(
            body.pos,
            ast.Block(body.pos, __toArray(comments).concat(__toArray(bareInit), __toArray(init), [uncommentedBody])),
            scope.getVariables(),
            ["use strict"]
          );
        } else {
          callFunc = ast.Call(
            body.pos,
            ast.Access(
              body.pos,
              ast.Func(
                body.pos,
                null,
                (scope.hasHelper("GLOBAL")
                  ? [ast.Ident(body.pos, "GLOBAL")]
                  : []).concat(scope.options.undefinedName != null
                  ? [ast.Ident(body.pos, scope.options.undefinedName, true)]
                  : []),
                scope.getVariables(),
                ast.Block(body.pos, __toArray(init).concat([uncommentedBody])),
                ["use strict"]
              ),
              "call"
            ),
            [ast.This(body.pos)].concat(scope.hasHelper("GLOBAL") ? [scope.macros.getHelper("GLOBAL")] : [])
          );
          if (scope.options["return"]) {
            callFunc = ast.Return(body.pos, callFunc);
          }
          return ast.Root(
            body.pos,
            ast.Block(body.pos, __toArray(comments).concat(__toArray(bareInit), [callFunc])),
            [],
            []
          );
        }
      }
      module.exports = function (node, macros, getPosition, options) {
        var endTime, result, scope, startTime;
        if (!(macros instanceof MacroHolder)) {
          throw TypeError("Expected macros to be a " + __name(MacroHolder) + ", got " + __typeof(macros));
        }
        if (typeof getPosition !== "function" && !__isArray(getPosition)) {
          throw TypeError("Expected getPosition to be one of Function or Array, got " + __typeof(getPosition));
        }
        if (options == null) {
          options = {};
        }
        startTime = new Date().getTime();
        try {
          scope = Scope(options, macros, false);
          result = translateRoot(node, scope, getPosition);
          scope.releaseTmps();
        } catch (e) {
          if (typeof callback !== "undefined" && callback !== null) {
            return callback(e);
          } else {
            throw e;
          }
        }
        endTime = new Date().getTime();
        if (typeof options.progress === "function") {
          options.progress("translate", __num(endTime) - __num(startTime));
        }
        return { node: result, time: __num(endTime) - __num(startTime) };
      };
      module.exports.defineHelper = function (macros, getPosition, name, value, type, dependencies) {
        var helper, ident, scope;
        if (!(macros instanceof MacroHolder)) {
          throw TypeError("Expected macros to be a " + __name(MacroHolder) + ", got " + __typeof(macros));
        }
        if (typeof getPosition !== "function") {
          throw TypeError("Expected getPosition to be a Function, got " + __typeof(getPosition));
        }
        if (!(type instanceof Type)) {
          throw TypeError("Expected type to be a " + __name(Type) + ", got " + __typeof(type));
        }
        scope = Scope({}, macros, false);
        getPos = makeGetPos(getPosition);
        if (typeof name === "string") {
          ident = ast.Ident(
            makePos(0, 0),
            name
          );
        } else if (name instanceof ParserNode.Ident) {
          ident = translate(name, scope, "leftExpression")();
        } else {
          throw TypeError("Expecting name to be a String or Ident, got " + __typeof(name));
        }
        if (!(ident instanceof ast.Ident)) {
          throw Error("Expected name to be an Ident, got " + __typeof(ident));
        }
        if (value instanceof AstNode) {
          helper = value;
        } else if (value instanceof ParserNode) {
          helper = translate(value, scope, "expression")();
        } else {
          throw TypeError("Expected value to be a parser or ast Node, got " + __typeof(value));
        }
        if (dependencies == null) {
          dependencies = scope.getHelpers();
        }
        macros.addHelper(ident.name, helper, type, dependencies);
        getPos = null;
        return { helper: helper, dependencies: dependencies };
      };
    }.call(this, typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : this));
    
    return module.exports;
  };
  require['./gorilla'] = function () {
    var module = { exports: this };
    var exports = this;
    (function (GLOBAL) {
      "use strict";
      var __defer, __generatorToPromise, __import, __isArray, __lte, __num, __owns,
          __promise, __promiseLoop, __slice, __strnum, __toArray, __toPromise,
          __typeof, _ref, fetchAndParsePrelude, fs, init, os, parser, path,
          setImmediate, SourceMap, writeFileWithMkdirp, writeFileWithMkdirpSync;
      __defer = (function () {
        function __defer() {
          var deferred, isError, value;
          isError = false;
          value = null;
          deferred = [];
          function complete(newIsError, newValue) {
            var funcs;
            if (deferred) {
              funcs = deferred;
              deferred = null;
              isError = newIsError;
              value = newValue;
              if (funcs.length) {
                setImmediate(function () {
                  var _end, i;
                  for (i = 0, _end = funcs.length; i < _end; ++i) {
                    funcs[i]();
                  }
                });
              }
            }
          }
          return {
            promise: {
              then: function (onFulfilled, onRejected, allowSync) {
                var _ref, fulfill, promise, reject;
                if (allowSync !== true) {
                  allowSync = void 0;
                }
                _ref = __defer();
                promise = _ref.promise;
                fulfill = _ref.fulfill;
                reject = _ref.reject;
                function step() {
                  var f, result;
                  try {
                    if (isError) {
                      f = onRejected;
                    } else {
                      f = onFulfilled;
                    }
                    if (typeof f === "function") {
                      result = f(value);
                      if (result && typeof result.then === "function") {
                        result.then(fulfill, reject, allowSync);
                      } else {
                        fulfill(result);
                      }
                    } else {
                      (isError ? reject : fulfill)(value);
                    }
                  } catch (e) {
                    reject(e);
                  }
                }
                if (deferred) {
                  deferred.push(step);
                } else if (allowSync) {
                  step();
                } else {
                  setImmediate(step);
                }
                return promise;
              },
              sync: function () {
                var result, state;
                state = 0;
                result = 0;
                this.then(
                  function (ret) {
                    state = 1;
                    return result = ret;
                  },
                  function (err) {
                    state = 2;
                    return result = err;
                  },
                  true
                );
                switch (state) {
                case 0: throw Error("Promise did not execute synchronously");
                case 1: return result;
                case 2: throw result;
                default: throw Error("Unknown state");
                }
              }
            },
            fulfill: function (value) {
              complete(false, value);
            },
            reject: function (reason) {
              complete(true, reason);
            }
          };
        }
        __defer.fulfilled = function (value) {
          var d;
          d = __defer();
          d.fulfill(value);
          return d.promise;
        };
        __defer.rejected = function (reason) {
          var d;
          d = __defer();
          d.reject(reason);
          return d.promise;
        };
        return __defer;
      }());
      __generatorToPromise = function (generator, allowSync) {
        if (typeof generator !== "object" || generator === null) {
          throw TypeError("Expected generator to be an Object, got " + __typeof(generator));
        } else {
          if (typeof generator.send !== "function") {
            throw TypeError("Expected generator.send to be a Function, got " + __typeof(generator.send));
          }
          if (typeof generator["throw"] !== "function") {
            throw TypeError("Expected generator.throw to be a Function, got " + __typeof(generator["throw"]));
          }
        }
        if (allowSync == null) {
          allowSync = false;
        } else if (typeof allowSync !== "boolean") {
          throw TypeError("Expected allowSync to be a Boolean, got " + __typeof(allowSync));
        }
        function continuer(verb, arg) {
          var item;
          try {
            item = generator[verb](arg);
          } catch (e) {
            return __defer.rejected(e);
          }
          if (item.done) {
            return __defer.fulfilled(item.value);
          } else {
            return item.value.then(callback, errback, allowSync);
          }
        }
        function callback(value) {
          return continuer("send", value);
        }
        function errback(value) {
          return continuer("throw", value);
        }
        return callback(void 0);
      };
      __import = function (dest, source) {
        var k;
        for (k in source) {
          if (__owns.call(source, k)) {
            dest[k] = source[k];
          }
        }
        return dest;
      };
      __isArray = typeof Array.isArray === "function" ? Array.isArray
        : (function () {
          var _toString;
          _toString = Object.prototype.toString;
          return function (x) {
            return _toString.call(x) === "[object Array]";
          };
        }());
      __lte = function (x, y) {
        var type;
        type = typeof x;
        if (type !== "number" && type !== "string") {
          throw TypeError("Cannot compare a non-number/string: " + type);
        } else if (type !== typeof y) {
          throw TypeError("Cannot compare elements of different types: " + type + " vs " + typeof y);
        } else {
          return x <= y;
        }
      };
      __num = function (num) {
        if (typeof num !== "number") {
          throw TypeError("Expected a number, got " + __typeof(num));
        } else {
          return num;
        }
      };
      __owns = Object.prototype.hasOwnProperty;
      __promise = function (value, allowSync) {
        var factory;
        if (allowSync == null) {
          allowSync = false;
        } else if (typeof allowSync !== "boolean") {
          throw TypeError("Expected allowSync to be a Boolean, got " + __typeof(allowSync));
        }
        if (typeof value === "function") {
          factory = function () {
            return __generatorToPromise(value.apply(this, arguments));
          };
          factory.sync = function () {
            return __generatorToPromise(
              value.apply(this, arguments),
              true
            ).sync();
          };
          return factory;
        } else {
          return __generatorToPromise(value, allowSync);
        }
      };
      __promiseLoop = function (limit, length, body) {
        var defer, done, index, result, slotsUsed;
        if (typeof limit !== "number") {
          throw TypeError("Expected limit to be a Number, got " + __typeof(limit));
        }
        if (typeof length !== "number") {
          throw TypeError("Expected length to be a Number, got " + __typeof(length));
        }
        if (typeof body !== "function") {
          throw TypeError("Expected body to be a Function, got " + __typeof(body));
        }
        if (limit < 1 || limit !== limit) {
          limit = 1/0;
        }
        result = [];
        done = false;
        slotsUsed = 0;
        defer = __defer();
        index = 0;
        function handle(index) {
          ++slotsUsed;
          return body(index).then(
            function (value) {
              result[index] = value;
              --slotsUsed;
              return flush();
            },
            function (reason) {
              done = true;
              return defer.reject(reason);
            }
          );
        }
        function flush() {
          for (; !done && slotsUsed < limit && index < length; ++index) {
            handle(index);
          }
          if (!done && index >= length && slotsUsed === 0) {
            done = true;
            return defer.fulfill(result);
          }
        }
        setImmediate(flush);
        return defer.promise;
      };
      __slice = Array.prototype.slice;
      __strnum = function (strnum) {
        var type;
        type = typeof strnum;
        if (type === "string") {
          return strnum;
        } else if (type === "number") {
          return String(strnum);
        } else {
          throw TypeError("Expected a string or number, got " + __typeof(strnum));
        }
      };
      __toArray = function (x) {
        if (x == null) {
          throw TypeError("Expected an object, got " + __typeof(x));
        } else if (__isArray(x)) {
          return x;
        } else if (typeof x === "string") {
          return x.split("");
        } else {
          return __slice.call(x);
        }
      };
      __toPromise = function (func, context, args) {
        var d;
        if (typeof func !== "function") {
          throw TypeError("Expected func to be a Function, got " + __typeof(func));
        }
        d = __defer();
        func.apply(context, __toArray(args).concat([
          function (err, value) {
            if (err != null) {
              d.reject(err);
            } else {
              d.fulfill(value);
            }
          }
        ]));
        return d.promise;
      };
      __typeof = (function () {
        var _toString;
        _toString = Object.prototype.toString;
        return function (o) {
          if (o === void 0) {
            return "Undefined";
          } else if (o === null) {
            return "Null";
          } else {
            return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
          }
        };
      }());
      setImmediate = typeof GLOBAL.setImmediate === "function" ? GLOBAL.setImmediate
        : typeof process !== "undefined" && typeof process.nextTick === "function"
        ? (function () {
          var nextTick;
          nextTick = process.nextTick;
          return function (func) {
            var args;
            if (typeof func !== "function") {
              throw TypeError("Expected func to be a Function, got " + __typeof(func));
            }
            args = __slice.call(arguments, 1);
            if (args.length) {
              return nextTick(function () {
                func.apply(void 0, __toArray(args));
              });
            } else {
              return nextTick(func);
            }
          };
        }())
        : function (func) {
          var args;
          if (typeof func !== "function") {
            throw TypeError("Expected func to be a Function, got " + __typeof(func));
          }
          args = __slice.call(arguments, 1);
          if (args.length) {
            return setTimeout(
              function () {
                func.apply(void 0, __toArray(args));
              },
              0
            );
          } else {
            return setTimeout(func, 0);
          }
        };
      parser = require("./parser");
      os = require("os");
      fs = require("fs");
      path = require("path");
      SourceMap = require("./source-map");
      _ref = require("./utils");
      writeFileWithMkdirp = _ref.writeFileWithMkdirp;
      writeFileWithMkdirpSync = _ref.writeFileWithMkdirpSync;
      exports.version = "0.7.20";
      exports.ParserError = parser.ParserError;
      exports.MacroError = parser.MacroError;
      if (require.extensions) {
        require.extensions[".gs"] = function (module, filename) {
          var compiled;
          compiled = exports.compileSync(
            fs.readFileSync(filename, "utf8"),
            { filename: filename }
          );
          return module._compile(compiled.code, filename);
        };
      } else if (require.registerExtension) {
        require.registerExtension(".gs", function (content) {
          return exports.compileSync(content, { filename: filename });
        });
      }
      fetchAndParsePrelude = (function () {
        var getPreludeCachePath, getPreludeSrcPath, parsedPreludeByLang,
            preludePromisesByLang, real__filename, work;
        parsedPreludeByLang = {};
        if (typeof __filename !== "undefined" && __filename !== null) {
          real__filename = fs.realpathSync(__filename);
        }
        if (real__filename != null) {
          getPreludeSrcPath = function (lang) {
            return path.join(path.dirname(real__filename), "../src/" + __strnum(lang) + "prelude.gs");
          };
        }
        if (os != null) {
          getPreludeCachePath = function (lang) {
            return path.join(os.tmpDir(), "gs-" + __strnum(lang) + "prelude-" + __strnum(exports.version) + ".cache");
          };
        }
        preludePromisesByLang = {};
        work = __promise(function (lang, sync) {
          var _e, _send, _state, _step, _throw, cachePrelude, e, errored,
              parsedPrelude, prelude, preludeCachePath, preludeCacheStat,
              preludeSrcPath, preludeSrcStat;
          _state = 0;
          function _close() {
            _state = 30;
          }
          function _step(_received) {
            while (true) {
              switch (_state) {
              case 0:
                if (typeof lang !== "string") {
                  throw TypeError("Expected lang to be a String, got " + __typeof(lang));
                }
                preludeSrcPath = getPreludeSrcPath(lang);
                _state = sync ? 1 : 2;
                break;
              case 1:
                preludeSrcStat = fs.statSync(preludeSrcPath);
                _state = 4;
                break;
              case 2:
                ++_state;
                return {
                  done: false,
                  value: __toPromise(fs.stat, fs, [preludeSrcPath])
                };
              case 3:
                preludeSrcStat = _received;
                ++_state;
              case 4:
                preludeCachePath = getPreludeCachePath(lang);
                preludeCacheStat = void 0;
                ++_state;
              case 5:
                _state = sync ? 6 : 7;
                break;
              case 6:
                preludeCacheStat = fs.statSync(preludeCachePath);
                _state = 10;
                break;
              case 7:
                ++_state;
                return {
                  done: false,
                  value: __toPromise(fs.stat, fs, [preludeCachePath])
                };
              case 8:
                preludeCacheStat = _received;
                _state = 10;
                break;
              case 9:
                if (e.code !== "ENOENT") {
                  throw e;
                }
                ++_state;
              case 10:
                parsedPrelude = void 0;
                _state = preludeCacheStat && __lte(preludeSrcStat.mtime.getTime(), preludeCacheStat.mtime.getTime()) ? 11 : 19;
                break;
              case 11:
                _state = sync ? 12 : 13;
                break;
              case 12:
                cachePrelude = fs.readFileSync(preludeCachePath, "utf8");
                _state = 15;
                break;
              case 13:
                ++_state;
                return {
                  done: false,
                  value: __toPromise(fs.readFile, fs, [preludeCachePath, "utf8"])
                };
              case 14:
                cachePrelude = _received;
                ++_state;
              case 15:
                errored = false;
                try {
                  parsedPrelude = parsedPreludeByLang[lang] = parser.deserializePrelude(cachePrelude);
                } catch (e) {
                  if (e instanceof ReferenceError) {
                    throw e;
                  } else {
                    console.error("Error deserializing prelude, reloading. " + String(e));
                    errored = true;
                  }
                }
                _state = errored ? 16 : 19;
                break;
              case 16:
                _state = sync ? 17 : 18;
                break;
              case 17:
                fs.unlinkSync(preludeCachePath);
                _state = 19;
                break;
              case 18:
                ++_state;
                return {
                  done: false,
                  value: __toPromise(fs.unlink, fs, [preludeCachePath])
                };
              case 19:
                _state = parsedPrelude == null ? 20 : 29;
                break;
              case 20:
                _state = sync ? 21 : 22;
                break;
              case 21:
                prelude = fs.readFileSync(preludeSrcPath, "utf8");
                _state = 24;
                break;
              case 22:
                ++_state;
                return {
                  done: false,
                  value: __toPromise(fs.readFile, fs, [preludeSrcPath, "utf8"])
                };
              case 23:
                prelude = _received;
                ++_state;
              case 24:
                _state = sync ? 25 : 26;
                break;
              case 25:
                parsedPrelude = parsedPreludeByLang[lang] = parser.sync(prelude, null, { serializeMacros: true, sync: true });
                _state = 28;
                break;
              case 26:
                ++_state;
                return {
                  done: false,
                  value: parser(prelude, null, { serializeMacros: true })
                };
              case 27:
                parsedPreludeByLang[lang] = _received;
                parsedPrelude = parsedPreludeByLang[lang];
                ++_state;
              case 28:
                fs.writeFile(preludeCachePath, parsedPrelude.macros.serialize(), "utf8", function () {});
                ++_state;
              case 29:
                delete preludePromisesByLang[lang];
                ++_state;
                return { done: true, value: parsedPrelude };
              case 30:
                return { done: true, value: void 0 };
              default: throw Error("Unknown state: " + _state);
              }
            }
          }
          function _throw(_e) {
            if (_state >= 5 && _state <= 8) {
              e = _e;
              _state = 9;
            } else {
              _close();
              throw _e;
            }
          }
          function _send(_received) {
            while (true) {
              try {
                return _step(_received);
              } catch (_e) {
                _throw(_e);
              }
            }
          }
          return {
            close: _close,
            iterator: function () {
              return this;
            },
            next: function () {
              return _send(void 0);
            },
            send: _send,
            "throw": function (_e) {
              _throw(_e);
              return _send(void 0);
            }
          };
        });
        function f(lang, sync) {
          var _ref, parsedPrelude;
          if (typeof lang !== "string") {
            throw TypeError("Expected lang to be a String, got " + __typeof(lang));
          }
          if (sync == null) {
            sync = false;
          } else if (typeof sync !== "boolean") {
            throw TypeError("Expected sync to be a Boolean, got " + __typeof(sync));
          }
          if (__owns.call(parsedPreludeByLang, lang)) {
            parsedPrelude = parsedPreludeByLang[lang];
          }
          if (parsedPrelude != null) {
            if (sync) {
              return parsedPrelude;
            } else {
              return __defer.fulfilled(parsedPrelude);
            }
          } else if (sync) {
            return work.sync(lang, true);
          } else if ((_ref = preludePromisesByLang[lang]) == null) {
            return preludePromisesByLang[lang] = work(lang);
          } else {
            return _ref;
          }
        }
        f.serialized = __promise(function (lang) {
          var _e, _send, _state, _step, _throw;
          _state = 0;
          function _close() {
            _state = 3;
          }
          function _step(_received) {
            while (true) {
              switch (_state) {
              case 0:
                if (typeof lang !== "string") {
                  throw TypeError("Expected lang to be a String, got " + __typeof(lang));
                }
                ++_state;
                return { done: false, value: f(lang) };
              case 1:
                ++_state;
                return {
                  done: false,
                  value: __toPromise(fs.readFile, fs, [getPreludeCachePath(lang), "utf8"])
                };
              case 2:
                ++_state;
                return { done: true, value: _received };
              case 3:
                return { done: true, value: void 0 };
              default: throw Error("Unknown state: " + _state);
              }
            }
          }
          function _throw(_e) {
            _close();
            throw _e;
          }
          function _send(_received) {
            try {
              return _step(_received);
            } catch (_e) {
              _throw(_e);
            }
          }
          return {
            close: _close,
            iterator: function () {
              return this;
            },
            next: function () {
              return _send(void 0);
            },
            send: _send,
            "throw": function (_e) {
              _throw(_e);
              return _send(void 0);
            }
          };
        });
        exports.withPrelude = function (lang, serializedPrelude) {
          if (typeof lang !== "string") {
            throw TypeError("Expected lang to be a String, got " + __typeof(lang));
          }
          if (typeof serializedPrelude !== "object" || serializedPrelude === null) {
            throw TypeError("Expected serializedPrelude to be an Object, got " + __typeof(serializedPrelude));
          }
          parsedPreludeByLang[lang] = parser.deserializePrelude(serializedPrelude);
          return this;
        };
        return f;
      }());
      exports.getSerializedPrelude = fetchAndParsePrelude.serialized;
      exports.parse = __promise(function (source, options) {
        var _e, _send, _state, _step, _throw, _tmp, macros, sync;
        _state = 0;
        function _close() {
          _state = 12;
        }
        function _step(_received) {
          while (true) {
            switch (_state) {
            case 0:
              if (options == null) {
                options = {};
              }
              sync = options.sync;
              _state = options.macros ? 1 : 2;
              break;
            case 1:
              macros = options.macros;
              _state = 8;
              break;
            case 2:
              _state = options.noPrelude ? 3 : 4;
              break;
            case 3:
              macros = null;
              _state = 8;
              break;
            case 4:
              _state = sync ? 5 : 6;
              break;
            case 5:
              macros = fetchAndParsePrelude(options.lang || "js", true).macros;
              _state = 8;
              break;
            case 6:
              ++_state;
              return { done: false, value: fetchAndParsePrelude(options.lang || "js") };
            case 7:
              _tmp = _received;
              macros = _tmp.macros;
              ++_state;
            case 8:
              _state = sync ? 9 : 10;
              break;
            case 9:
              _state = 12;
              return {
                done: true,
                value: parser.sync(source, macros, options)
              };
            case 10:
              ++_state;
              return {
                done: false,
                value: parser(source, macros, options)
              };
            case 11:
              ++_state;
              return { done: true, value: _received };
            case 12:
              return { done: true, value: void 0 };
            default: throw Error("Unknown state: " + _state);
            }
          }
        }
        function _throw(_e) {
          _close();
          throw _e;
        }
        function _send(_received) {
          try {
            return _step(_received);
          } catch (_e) {
            _throw(_e);
          }
        }
        return {
          close: _close,
          iterator: function () {
            return this;
          },
          next: function () {
            return _send(void 0);
          },
          send: _send,
          "throw": function (_e) {
            _throw(_e);
            return _send(void 0);
          }
        };
      });
      exports.parseSync = function (source, options) {
        if (options == null) {
          options = {};
        }
        options.sync = true;
        return exports.parse.sync(source, options);
      };
      exports.getReservedWords = function (options) {
        if (options == null) {
          options = {};
        }
        if (options.noPrelude) {
          return parser.getReservedWords(null, options);
        } else {
          return parser.getReservedWords(
            fetchAndParsePrelude(options.lang || "js", true).macros,
            options
          );
        }
      };
      function joinParsedResults(results) {
        var _arr, _i, _len, joinedParsed, parsed;
        joinedParsed = {
          parseTime: 0,
          macroExpandTime: 0,
          reduceTime: 0,
          macros: results[0].macros,
          result: []
        };
        for (_arr = __toArray(results), _i = 0, _len = _arr.length; _i < _len; ++_i) {
          parsed = _arr[_i];
          joinedParsed.parseTime += __num(parsed.parseTime);
          joinedParsed.macroExpandTime += __num(parsed.macroExpandTime);
          joinedParsed.reduceTime += __num(parsed.reduceTime);
          joinedParsed.result.push(parsed.result);
        }
        return joinedParsed;
      }
      exports.ast = __promise(function (source, options) {
        var _arr, _arr2, _e, _i, _len, _send, _state, _step, _throw, _tmp, array,
            item, parsed, startTime, sync, translated, translator;
        _state = 0;
        function _close() {
          _state = 15;
        }
        function _step(_received) {
          while (true) {
            switch (_state) {
            case 0:
              if (options == null) {
                options = {};
              }
              startTime = new Date().getTime();
              sync = options.sync;
              if (typeof options.translator === "function") {
                translator = options.translator;
              } else {
                translator = require(typeof options.translator === "string" ? options.translator : "./jstranslator");
              }
              _state = __isArray(source) ? 1 : 10;
              break;
            case 1:
              array = [];
              _arr = __toArray(source);
              _i = 0;
              _len = _arr.length;
              ++_state;
            case 2:
              _state = _i < _len ? 3 : 9;
              break;
            case 3:
              item = _arr[_i];
              if (__isArray(options.filenames)) {
                options.filename = options.filenames[i];
              }
              _arr2 = [];
              _state = sync ? 4 : 5;
              break;
            case 4:
              _tmp = exports.parseSync(item, options);
              _state = 7;
              break;
            case 5:
              ++_state;
              return {
                done: false,
                value: exports.parse(item, options)
              };
            case 6:
              _tmp = _received;
              ++_state;
            case 7:
              _arr2.push(_tmp);
              array.push.apply(array, _arr2);
              ++_state;
            case 8:
              ++_i;
              _state = 2;
              break;
            case 9:
              parsed = joinParsedResults(array);
              _state = 14;
              break;
            case 10:
              _state = sync ? 11 : 12;
              break;
            case 11:
              parsed = exports.parseSync(source, options);
              _state = 14;
              break;
            case 12:
              ++_state;
              return {
                done: false,
                value: exports.parse(source, options)
              };
            case 13:
              parsed = _received;
              ++_state;
            case 14:
              translated = translator(parsed.result, parsed.macros, parsed.getPosition, options);
              ++_state;
              return {
                done: true,
                value: {
                  node: translated.node,
                  parseTime: parsed.parseTime,
                  macroExpandTime: parsed.macroExpandTime,
                  reduceTime: parsed.reduceTime,
                  translateTime: translated.time,
                  time: __num(new Date().getTime()) - __num(startTime)
                }
              };
            case 15:
              return { done: true, value: void 0 };
            default: throw Error("Unknown state: " + _state);
            }
          }
        }
        function _throw(_e) {
          _close();
          throw _e;
        }
        function _send(_received) {
          try {
            return _step(_received);
          } catch (_e) {
            _throw(_e);
          }
        }
        return {
          close: _close,
          iterator: function () {
            return this;
          },
          next: function () {
            return _send(void 0);
          },
          send: _send,
          "throw": function (_e) {
            _throw(_e);
            return _send(void 0);
          }
        };
      });
      exports.astSync = function (source, options) {
        if (options == null) {
          options = {};
        }
        options.sync = true;
        return exports.ast.sync(source, options);
      };
      exports.compile = __promise(function (source, options) {
        var _e, _send, _state, _step, _throw, compiled, startTime, sync, translated;
        _state = 0;
        function _close() {
          _state = 5;
        }
        function _step(_received) {
          while (true) {
            switch (_state) {
            case 0:
              if (options == null) {
                options = {};
              }
              sync = options.sync;
              startTime = new Date().getTime();
              _state = sync ? 1 : 2;
              break;
            case 1:
              translated = exports.astSync(source, options);
              _state = 4;
              break;
            case 2:
              ++_state;
              return {
                done: false,
                value: exports.ast(source, options)
              };
            case 3:
              translated = _received;
              ++_state;
            case 4:
              compiled = translated.node.compile(options);
              ++_state;
              return {
                done: true,
                value: {
                  parseTime: translated.parseTime,
                  macroExpandTime: translated.macroExpandTime,
                  reduceTime: translated.reduceTime,
                  translateTime: translated.translateTime,
                  compileTime: compiled.compileTime,
                  uglifyTime: compiled.uglifyTime,
                  time: __num(new Date().getTime()) - __num(startTime),
                  code: compiled.code
                }
              };
            case 5:
              return { done: true, value: void 0 };
            default: throw Error("Unknown state: " + _state);
            }
          }
        }
        function _throw(_e) {
          _close();
          throw _e;
        }
        function _send(_received) {
          try {
            return _step(_received);
          } catch (_e) {
            _throw(_e);
          }
        }
        return {
          close: _close,
          iterator: function () {
            return this;
          },
          next: function () {
            return _send(void 0);
          },
          send: _send,
          "throw": function (_e) {
            _throw(_e);
            return _send(void 0);
          }
        };
      });
      exports.compileSync = function (source, options) {
        if (options == null) {
          options = {};
        }
        options.sync = true;
        return exports.compile.sync(source, options);
      };
      exports.compileFile = __promise(function (options) {
        var _arr, _arr2, _e, _i, _len, _send, _state, _step, _throw, code, compiled,
            footer, i, input, inputs, linefeed, output, parsed, source,
            sourceMapFile, sources, sync, translated, translator;
        _state = 0;
        function _close() {
          _state = 20;
        }
        function _step(_received) {
          while (true) {
            switch (_state) {
            case 0:
              if (options == null) {
                options = {};
              }
              options = __import({}, options);
              sync = options.sync;
              inputs = options.input;
              if (typeof inputs === "string") {
                inputs = [inputs];
              } else if (!__isArray(inputs)) {
                throw Error("Expected options.input to be a string or array of strings");
              } else if (inputs.length === 0) {
                throw Error("Expected options.input to not be empty");
              }
              output = options.output;
              if (typeof output !== "string") {
                throw Error("Expected options.output to be a string");
              }
              sourceMapFile = void 0;
              if (!options.sourceMap) {
                options.sourceMap = null;
              } else if (typeof options.sourceMap === "string") {
                sourceMapFile = options.sourceMap;
                options.sourceMap = SourceMap(options.output, "");
              } else {
                if (typeof options.sourceMap.file !== "string") {
                  throw Error("Expected options.sourceMap.file to be a string");
                }
                if (typeof options.sourceMap.sourceRoot !== "string") {
                  throw Error("Expected options.sourceMap.sourceRoot to be a string");
                }
                sourceMapFile = options.sourceMap.file;
                options.sourceMap = SourceMap(options.output, options.sourceMap.sourceRoot);
              }
              sources = [];
              _state = sync ? 1 : 2;
              break;
            case 1:
              for (_arr = __toArray(inputs), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                input = _arr[_i];
                sources.push(fs.readFileSync(input, "utf8"));
              }
              _state = 4;
              break;
            case 2:
              ++_state;
              return {
                done: false,
                value: __promiseLoop(5, __num(inputs.length), __promise(function (_i) {
                  var _e2, _send2, _state2, _step2, _throw2, input;
                  _state2 = 0;
                  function _close2() {
                    _state2 = 2;
                  }
                  function _step2(_received) {
                    while (true) {
                      switch (_state2) {
                      case 0:
                        input = inputs[_i];
                        ++_state2;
                        return {
                          done: false,
                          value: __toPromise(fs.readFile, fs, [input, "utf8"])
                        };
                      case 1:
                        ++_state2;
                        return { done: true, value: _received };
                      case 2:
                        return { done: true, value: void 0 };
                      default: throw Error("Unknown state: " + _state2);
                      }
                    }
                  }
                  function _throw2(_e2) {
                    _close2();
                    throw _e2;
                  }
                  function _send2(_received) {
                    try {
                      return _step2(_received);
                    } catch (_e2) {
                      _throw2(_e2);
                    }
                  }
                  return {
                    close: _close2,
                    iterator: function () {
                      return this;
                    },
                    next: function () {
                      return _send2(void 0);
                    },
                    send: _send2,
                    "throw": function (_e2) {
                      _throw2(_e2);
                      return _send2(void 0);
                    }
                  };
                }))
              };
            case 3:
              sources = _received;
              ++_state;
            case 4:
              _arr = [];
              i = 0;
              _len = sources.length;
              ++_state;
            case 5:
              _state = i < _len ? 6 : 11;
              break;
            case 6:
              source = sources[i];
              options.filename = inputs[i];
              _state = sync ? 7 : 8;
              break;
            case 7:
              _arr.push(exports.parseSync(source, options));
              _state = 10;
              break;
            case 8:
              _arr2 = [];
              ++_state;
              return {
                done: false,
                value: exports.parse(source, options)
              };
            case 9:
              _arr2.push(_received);
              _arr.push.apply(_arr, _arr2);
              ++_state;
            case 10:
              ++i;
              _state = 5;
              break;
            case 11:
              parsed = _arr;
              options.filenames = inputs;
              translator = require("./jstranslator");
              translated = translator(
                (function () {
                  var _arr, _i, _len, x;
                  for (_arr = [], _i = 0, _len = parsed.length; _i < _len; ++_i) {
                    x = parsed[_i];
                    _arr.push(x.result);
                  }
                  return _arr;
                }()),
                parsed[0].macros,
                (function () {
                  var _arr, _i, _len, x;
                  for (_arr = [], _i = 0, _len = parsed.length; _i < _len; ++_i) {
                    x = parsed[_i];
                    _arr.push(x.getPosition);
                  }
                  return _arr;
                }()),
                options
              );
              compiled = translated.node.compile(options);
              _state = !sync ? 12 : 13;
              break;
            case 12:
              ++_state;
              return { done: false, value: __defer.fulfilled() };
            case 13:
              code = compiled.code;
              if (sourceMapFile) {
                linefeed = options.linefeed || "\n";
                footer = __strnum(linefeed) + "/*" + __strnum(linefeed) + "//@ sourceMappingURL=" + __strnum(sourceMapFile) + __strnum(linefeed) + "*/" + __strnum(linefeed);
                code = __strnum(code) + footer;
              }
              _state = sync ? 14 : 15;
              break;
            case 14:
              writeFileWithMkdirpSync(options.output, code);
              _state = 16;
              break;
            case 15:
              ++_state;
              return {
                done: false,
                value: writeFileWithMkdirp(options.output, code)
              };
            case 16:
              _state = sourceMapFile ? 17 : 20;
              break;
            case 17:
              _state = sync ? 18 : 19;
              break;
            case 18:
              writeFileWithMkdirpSync(sourceMapFile, options.sourceMap.toString(), true);
              _state = 20;
              break;
            case 19:
              ++_state;
              return {
                done: false,
                value: writeFileWithMkdirp(sourceMapFile, options.sourceMap.toString())
              };
            case 20:
              return { done: true, value: void 0 };
            default: throw Error("Unknown state: " + _state);
            }
          }
        }
        function _throw(_e) {
          _close();
          throw _e;
        }
        function _send(_received) {
          try {
            return _step(_received);
          } catch (_e) {
            _throw(_e);
          }
        }
        return {
          close: _close,
          iterator: function () {
            return this;
          },
          next: function () {
            return _send(void 0);
          },
          send: _send,
          "throw": function (_e) {
            _throw(_e);
            return _send(void 0);
          }
        };
      });
      exports.compileFileSync = function (options) {
        if (options == null) {
          options = {};
        }
        options.sync = true;
        return exports.compileFile.sync(options);
      };
      function evaluate(code, options) {
        var _arr, _i, _module, _obj, _ref, _require, fun, k, Module, r, sandbox,
            Script, v;
        if (typeof require === "function" && (_ref = require("vm")) != null) {
          Script = _ref.Script;
        }
        if (Script) {
          sandbox = Script.createContext();
          sandbox.global = sandbox.root = sandbox.GLOBAL = sandbox;
          if (options.sandbox != null) {
            if (options.sandbox instanceof sandbox.constructor) {
              sandbox = options.sandbox;
            } else {
              _obj = options.sandbox;
              for (k in _obj) {
                if (__owns.call(_obj, k)) {
                  v = _obj[k];
                  sandbox[k] = v;
                }
              }
            }
          } else {
            for (k in GLOBAL) {
              if (__owns.call(GLOBAL, k)) {
                v = GLOBAL[k];
                sandbox[k] = v;
              }
            }
          }
          sandbox.__filename = options.filename || "eval";
          sandbox.__dirname = path.dirname(sandbox.__filename);
          if (!sandbox.module && !sandbox.require) {
            Module = require("module");
            _module = sandbox.module = new Module(options.modulename || "eval");
            _require = sandbox.require = function (path) {
              return Module._load(path, _module);
            };
            _module.filename = sandbox.__filename;
            for (_arr = Object.getOwnPropertyNames(require), _i = _arr.length; _i--; ) {
              r = _arr[_i];
              try {
                _require[r] = require[r];
              } catch (e) {}
            }
          }
          if (options.includeGlobals) {
            for (k in GLOBAL) {
              if (__owns.call(GLOBAL, k) && !(k in sandbox)) {
                sandbox[k] = GLOBAL[k];
              }
            }
          }
          return Script.runInContext(code, sandbox);
        } else {
          fun = Function("return " + __strnum(code));
          return fun();
        }
      }
      exports["eval"] = __promise(function (source, options) {
        var _e, _send, _state, _step, _throw, compiled, result, startTime, sync;
        _state = 0;
        function _close() {
          _state = 5;
        }
        function _step(_received) {
          while (true) {
            switch (_state) {
            case 0:
              if (options == null) {
                options = {};
              }
              sync = options.sync;
              options["eval"] = true;
              options["return"] = false;
              _state = sync ? 1 : 2;
              break;
            case 1:
              compiled = exports.compileSync(source, options);
              _state = 4;
              break;
            case 2:
              ++_state;
              return {
                done: false,
                value: exports.compile(source, options)
              };
            case 3:
              compiled = _received;
              ++_state;
            case 4:
              startTime = new Date().getTime();
              result = evaluate(compiled.code, options);
              if (typeof options.progress === "function") {
                options.progress("eval", __num(new Date().getTime()) - __num(startTime));
              }
              ++_state;
              return { done: true, value: result };
            case 5:
              return { done: true, value: void 0 };
            default: throw Error("Unknown state: " + _state);
            }
          }
        }
        function _throw(_e) {
          _close();
          throw _e;
        }
        function _send(_received) {
          try {
            return _step(_received);
          } catch (_e) {
            _throw(_e);
          }
        }
        return {
          close: _close,
          iterator: function () {
            return this;
          },
          next: function () {
            return _send(void 0);
          },
          send: _send,
          "throw": function (_e) {
            _throw(_e);
            return _send(void 0);
          }
        };
      });
      exports.evalSync = function (source, options) {
        if (options == null) {
          options = {};
        }
        options.sync = true;
        return exports["eval"].sync(source, options);
      };
      exports.run = __promise(function (source, options) {
        var _e, _send, _state, _step, _throw, compiled, mainModule, Module, sync;
        _state = 0;
        function _close() {
          _state = 12;
        }
        function _step(_received) {
          while (true) {
            switch (_state) {
            case 0:
              if (options == null) {
                options = {};
              }
              sync = options.sync;
              _state = typeof process === "undefined" ? 1 : 5;
              break;
            case 1:
              _state = sync ? 2 : 3;
              break;
            case 2:
              _state = 12;
              return {
                done: true,
                value: exports.evalSync(source, options)
              };
            case 3:
              ++_state;
              return {
                done: false,
                value: exports["eval"](source, options)
              };
            case 4:
              _state = 12;
              return { done: true, value: _received };
            case 5:
              mainModule = require.main;
              mainModule.filename = process.argv[1] = options.filename ? fs.realpathSync(options.filename) : ".";
              if (mainModule.moduleCache) {
                mainModule.moduleCache = {};
              }
              if (process.binding("natives").module) {
                Module = require("module").Module;
                mainModule.paths = Module._nodeModulePaths(path.dirname(options.filename));
              }
              _state = path.extname(mainModule.filename) !== ".gs" || require.extensions ? 6 : 11;
              break;
            case 6:
              _state = sync ? 7 : 8;
              break;
            case 7:
              compiled = exports.compileSync(source, options);
              _state = 10;
              break;
            case 8:
              ++_state;
              return {
                done: false,
                value: exports.compile(source, options)
              };
            case 9:
              compiled = _received;
              ++_state;
            case 10:
              _state = 12;
              return {
                done: true,
                value: mainModule._compile(compiled.code, mainModule.filename)
              };
            case 11:
              ++_state;
              return {
                done: true,
                value: mainModule._compile(source, mainModule.filename)
              };
            case 12:
              return { done: true, value: void 0 };
            default: throw Error("Unknown state: " + _state);
            }
          }
        }
        function _throw(_e) {
          _close();
          throw _e;
        }
        function _send(_received) {
          try {
            return _step(_received);
          } catch (_e) {
            _throw(_e);
          }
        }
        return {
          close: _close,
          iterator: function () {
            return this;
          },
          next: function () {
            return _send(void 0);
          },
          send: _send,
          "throw": function (_e) {
            _throw(_e);
            return _send(void 0);
          }
        };
      });
      exports.runSync = function (source, options) {
        if (options == null) {
          options = {};
        }
        options.sync = true;
        return exports.run.sync(source, options);
      };
      init = exports.init = __promise(function (options) {
        var _e, _send, _state, _step, _throw;
        _state = 0;
        function _close() {
          _state = 4;
        }
        function _step(_received) {
          while (true) {
            switch (_state) {
            case 0:
              if (options == null) {
                options = {};
              }
              _state = options.sync ? 1 : 2;
              break;
            case 1:
              _state = 4;
              return {
                done: true,
                value: fetchAndParsePrelude(options.lang || "js", true)
              };
            case 2:
              ++_state;
              return { done: false, value: fetchAndParsePrelude(options.lang || "js") };
            case 3:
              ++_state;
              return { done: true, value: _received };
            case 4:
              return { done: true, value: void 0 };
            default: throw Error("Unknown state: " + _state);
            }
          }
        }
        function _throw(_e) {
          _close();
          throw _e;
        }
        function _send(_received) {
          try {
            return _step(_received);
          } catch (_e) {
            _throw(_e);
          }
        }
        return {
          close: _close,
          iterator: function () {
            return this;
          },
          next: function () {
            return _send(void 0);
          },
          send: _send,
          "throw": function (_e) {
            _throw(_e);
            return _send(void 0);
          }
        };
      });
      exports.initSync = function (options) {
        if (options == null) {
          options = {};
        }
        options.sync = true;
        init.sync(options);
      };
    }.call(this, typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : this));
    
    return module.exports;
  };
  require['./browser'] = function () {
    var module = { exports: this };
    var exports = this;
    (function (GLOBAL) {
      "use strict";
      var __async, __fromPromise, __isArray, __num, __once, __slice, __toArray,
          __typeof, GorillaScript, runScripts, setImmediate;
      __async = function (limit, length, hasResult, onValue, onComplete) {
        var broken, completed, index, result, slotsUsed, sync;
        if (typeof limit !== "number") {
          throw TypeError("Expected limit to be a Number, got " + __typeof(limit));
        }
        if (typeof length !== "number") {
          throw TypeError("Expected length to be a Number, got " + __typeof(length));
        }
        if (hasResult == null) {
          hasResult = false;
        } else if (typeof hasResult !== "boolean") {
          throw TypeError("Expected hasResult to be a Boolean, got " + __typeof(hasResult));
        }
        if (typeof onValue !== "function") {
          throw TypeError("Expected onValue to be a Function, got " + __typeof(onValue));
        }
        if (typeof onComplete !== "function") {
          throw TypeError("Expected onComplete to be a Function, got " + __typeof(onComplete));
        }
        if (hasResult) {
          result = [];
        } else {
          result = null;
        }
        if (length <= 0) {
          return onComplete(null, result);
        }
        if (limit < 1 || limit !== limit) {
          limit = 1/0;
        }
        broken = null;
        slotsUsed = 0;
        sync = false;
        completed = false;
        function onValueCallback(err, value) {
          if (completed) {
            return;
          }
          --slotsUsed;
          if (err != null && broken == null) {
            broken = err;
          }
          if (hasResult && broken == null && arguments.length > 1) {
            result.push(value);
          }
          if (!sync) {
            next();
          }
        }
        index = -1;
        function next() {
          while (!completed && broken == null && slotsUsed < limit && ++index < length) {
            ++slotsUsed;
            sync = true;
            onValue(index, __once(onValueCallback));
            sync = false;
          }
          if (!completed && (broken != null || slotsUsed === 0)) {
            completed = true;
            if (broken != null) {
              onComplete(broken);
            } else {
              onComplete(null, result);
            }
          }
        }
        next();
      };
      __fromPromise = function (promise) {
        if (typeof promise !== "object" || promise === null) {
          throw TypeError("Expected promise to be an Object, got " + __typeof(promise));
        } else if (typeof promise.then !== "function") {
          throw TypeError("Expected promise.then to be a Function, got " + __typeof(promise.then));
        }
        return function (callback) {
          promise.then(
            function (value) {
              return setImmediate(callback, null, value);
            },
            function (reason) {
              return setImmediate(callback, reason);
            }
          );
        };
      };
      __isArray = typeof Array.isArray === "function" ? Array.isArray
        : (function () {
          var _toString;
          _toString = Object.prototype.toString;
          return function (x) {
            return _toString.call(x) === "[object Array]";
          };
        }());
      __num = function (num) {
        if (typeof num !== "number") {
          throw TypeError("Expected a number, got " + __typeof(num));
        } else {
          return num;
        }
      };
      __once = (function () {
        function replacement() {
          throw Error("Attempted to call function more than once");
        }
        function doNothing() {}
        return function (func, silentFail) {
          if (typeof func !== "function") {
            throw TypeError("Expected func to be a Function, got " + __typeof(func));
          }
          if (silentFail == null) {
            silentFail = false;
          } else if (typeof silentFail !== "boolean") {
            throw TypeError("Expected silentFail to be a Boolean, got " + __typeof(silentFail));
          }
          return function () {
            var f;
            f = func;
            if (silentFail) {
              func = doNothing;
            } else {
              func = replacement;
            }
            return f.apply(this, arguments);
          };
        };
      }());
      __slice = Array.prototype.slice;
      __toArray = function (x) {
        if (x == null) {
          throw TypeError("Expected an object, got " + __typeof(x));
        } else if (__isArray(x)) {
          return x;
        } else if (typeof x === "string") {
          return x.split("");
        } else {
          return __slice.call(x);
        }
      };
      __typeof = (function () {
        var _toString;
        _toString = Object.prototype.toString;
        return function (o) {
          if (o === void 0) {
            return "Undefined";
          } else if (o === null) {
            return "Null";
          } else {
            return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
          }
        };
      }());
      setImmediate = typeof GLOBAL.setImmediate === "function" ? GLOBAL.setImmediate
        : typeof process !== "undefined" && typeof process.nextTick === "function"
        ? (function () {
          var nextTick;
          nextTick = process.nextTick;
          return function (func) {
            var args;
            if (typeof func !== "function") {
              throw TypeError("Expected func to be a Function, got " + __typeof(func));
            }
            args = __slice.call(arguments, 1);
            if (args.length) {
              return nextTick(function () {
                func.apply(void 0, __toArray(args));
              });
            } else {
              return nextTick(func);
            }
          };
        }())
        : function (func) {
          var args;
          if (typeof func !== "function") {
            throw TypeError("Expected func to be a Function, got " + __typeof(func));
          }
          args = __slice.call(arguments, 1);
          if (args.length) {
            return setTimeout(
              function () {
                func.apply(void 0, __toArray(args));
              },
              0
            );
          } else {
            return setTimeout(func, 0);
          }
        };
      GorillaScript = require("./gorilla");
      GorillaScript.require = require;
      if (typeof window !== "undefined" && window !== null) {
        GorillaScript.load = function (url, callback) {
          var xhr;
          if (typeof url !== "string") {
            throw TypeError("Expected url to be a String, got " + __typeof(url));
          }
          if (typeof callback !== "function") {
            throw TypeError("Expected callback to be a Function, got " + __typeof(callback));
          }
          if (window.ActiveXObject) {
            xhr = new (window.ActiveXObject)("Microsoft.XMLHTTP");
          } else if (XMLHttpRequest) {
            xhr = new XMLHttpRequest();
          } else {
            throw Error("Unable to create XMLHttpRequest");
          }
          xhr.open("GET", url, true);
          if (typeof xhr.overrideMimeType === "function") {
            xhr.overrideMimeType("text/plain");
          }
          xhr.onreadystatechange = function () {
            var _ref;
            if (xhr.readyState === 4) {
              if ((_ref = xhr.status) === 0 || _ref === 200) {
                return __fromPromise(GorillaScript.run(xhr.responseText))(callback);
              } else {
                return callback(Error("Could not load " + url));
              }
            }
          };
          return xhr.send(null);
        };
        runScripts = function () {
          var scripts;
          scripts = document.getElementsByTagName("script");
          return __async(
            1,
            __num(scripts.length),
            false,
            function (_i, next) {
              var script;
              script = scripts[_i];
              if (script.type === "text/gorillascript") {
                if (script.src) {
                  return GorillaScript.load(script.src, next);
                } else {
                  GorillaScript.runSync(script.innerHTML);
                  return next();
                }
              } else {
                return next();
              }
            },
            function (_err) {}
          );
        };
        if (window.addEventListener) {
          addEventListener("DOMContentLoaded", runScripts, false);
        } else {
          attachEvent("onload", runScripts);
        }
      }
    }.call(this, typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : this));
    
    return module.exports;
  };

    require("./browser");
    return require("./gorilla").withPrelude("js", {
      consts: {
        "true": true,
        "false": false,
        "null": null,
        "void": {type: "void"},
        "undefined": {type: "void"},
        Infinity: {type: "Infinity"},
        "NaN": {type: "NaN"}
      },
      syntax: [
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node,__const){var body,macroData,macroName;macroName=macroFullData.macroName;macroData=macroFullData.macroData;body=macroData.body;return __node("Call",200,__node("Function",203,[],__wrap(body),true,true,false,void 0,false,[]),[],false,false);};}.call(this));',
          params: [[
            "ident",
            "body",
            "choice",
            ["ident", "Body"],
            [
              "sequence",
              ["const", ";"],
              ["this", "ident", "Statement"]
            ]
          ]],
          names: "do",
          id: 0
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node,__const){var macroData,macroName;macroName=macroFullData.macroName;macroData=macroFullData.macroData;return this["debugger"]();};}.call(this));',
          params: [["const", ""]],
          names: "debugger",
          id: 14
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node,__const){var func,ident,macroData,macroName;macroName=macroFullData.macroName;macroData=macroFullData.macroData;ident=macroData.ident;func=macroData.func;if(this.isPrimordial(ident)){this.error(["Cannot declare primordial \'",this.name(ident),"\'"].join(""),ident);}this["let"](ident,false,this.type(func));return this.block([this["var"](ident,false),this.assign(ident,"=",func)]);};}.call(this));',
          params: [
            ["ident", "ident", "ident", "Identifier"],
            ["ident", "func", "ident", "FunctionDeclaration"]
          ],
          names: "let",
          id: 15
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node,__const){var _this,body,elseBody,elseIfs,macroData,macroName,test;_this=this;macroName=macroFullData.macroName;macroData=macroFullData.macroData;test=macroData.test;body=macroData.body;elseIfs=macroData.elseIfs;elseBody=macroData.elseBody;function dec(x){return x - 1;};function f(i,current){return i>=0&&f(dec(i),_this["if"](elseIfs[i].test,elseIfs[i].body,current))||current;};return this["if"](macroName==="unless"&&__node("MacroAccess",2855,3,90,{op:"not",node:__wrap(test)},"expression",false,false,false)||test,body,f(dec(elseIfs.length),elseBody));};}.call(this));',
          params: [
            ["ident", "test", "ident", "Logic"],
            ["const", "then"],
            ["ident", "body"],
            [
              "ident",
              "elseIfs",
              "many",
              "*",
              "sequence",
              ["const", "else"],
              ["const", "if"],
              ["ident", "test", "ident", "Logic"],
              ["const", "then"],
              ["ident", "body"]
            ],
            [
              "ident",
              "elseBody",
              "many",
              "?",
              "sequence",
              ["const", "else"],
              ["this"]
            ]
          ],
          names: ["if", "unless"],
          id: 16
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node,__const){var _this,body,elseBody,elseIfs,macroData,macroName,test;_this=this;macroName=macroFullData.macroName;macroData=macroFullData.macroData;test=macroData.test;body=macroData.body;elseIfs=macroData.elseIfs;elseBody=macroData.elseBody;function dec(x){return x - 1;};function f(i,current){if(i>=0){return f(dec(i),_this["if"](elseIfs[i].type==="unless"?__node("MacroAccess",3327,3,95,{op:"not",node:__wrap(elseIfs[i].test)},"expression",false,false,false):elseIfs[i].test,elseIfs[i].body,current));}else{return current;}};return this["if"](macroName==="unless"?__node("MacroAccess",3460,3,96,{op:"not",node:__wrap(test)},"expression",false,false,false):test,body,f(dec(elseIfs.length),elseBody));};}.call(this));',
          params: [
            ["ident", "test", "ident", "Logic"],
            [
              "ident",
              "body",
              "choice",
              ["ident", "BodyNoEnd"],
              [
                "sequence",
                ["const", ";"],
                ["this", "ident", "Statement"]
              ]
            ],
            [
              "ident",
              "elseIfs",
              "many",
              "*",
              "sequence",
              ["const", "\n"],
              ["const", "else"],
              [
                "ident",
                "type",
                "choice",
                ["const", "if"],
                ["const", "unless"]
              ],
              ["ident", "test", "ident", "Logic"],
              [
                "ident",
                "body",
                "choice",
                ["ident", "BodyNoEnd"],
                [
                  "sequence",
                  ["const", ";"],
                  ["this", "ident", "Statement"]
                ]
              ]
            ],
            [
              "ident",
              "elseBody",
              "many",
              "?",
              "sequence",
              ["const", "\n"],
              ["const", "else"],
              [
                "this",
                "choice",
                ["ident", "BodyNoEnd"],
                [
                  "sequence",
                  ["const", ";"],
                  ["this", "ident", "Statement"]
                ]
              ]
            ],
            ["const", "end"]
          ],
          names: ["if", "unless"],
          id: 17
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node,__const){var label,macroData,macroName;macroName=macroFullData.macroName;macroData=macroFullData.macroData;label=macroData.label;if(this.position==="expression"){this.error("continue can only be used in a statement position");}return this["continue"](label);};}.call(this));',
          params: [[
            "ident",
            "label",
            "choice",
            ["ident", "Identifier"],
            ["const", ""]
          ]],
          names: "continue",
          id: 18
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node,__const){var label,macroData,macroName;macroName=macroFullData.macroName;macroData=macroFullData.macroData;label=macroData.label;if(this.position==="expression"){this.error("break can only be used in a statement position");}return this["break"](label);};}.call(this));',
          params: [[
            "ident",
            "label",
            "choice",
            ["ident", "Identifier"],
            ["const", ""]
          ]],
          names: "break",
          id: 19
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node,__const){var _ref,_this,declarable,handle,handleItem,macroData,macroName,numRealElements,value;_this=this;macroName=macroFullData.macroName;macroData=macroFullData.macroData;declarable=macroData.declarable;value=macroData.value;function inc(x){return x + 1;};declarable=this.macroExpand1(declarable);if(!declarable){this.error("Unknown declarable: "+String(declarable));}if(declarable.type==="ident"){if(this.isPrimordial(declarable.ident)){this.error("Cannot declare primordial \'"+this.name(declarable.ident)+"\'",declarable.ident);}this["let"](declarable.ident,declarable.isMutable,declarable.asType?this.toType(declarable.asType):this.type(value));return this.block([this["var"](declarable.ident,declarable.isMutable),this.mutateLast(value||this.noop(),function(n){return _this.assign(declarable.ident,"=",n);},true)]);}else if(declarable.type==="array"){numRealElements=function(i,acc){if(i<declarable.elements.length){return numRealElements(inc(i),declarable.elements[i]?inc(acc):acc);}else{return acc;}};if(numRealElements(0,0)<=1){handleItem=function(element,index){return _this.macroExpand1(__node("MacroAccess",8064,38,219,{macroName:"let",macroData:{declarable:__node("MacroAccess",8068,37,219,__node("MacroAccess",8068,31,219,{ident:__wrap(element)},"statement",false,false,false),"statement",false,false,false),value:__node("Access",8079,__wrap(value),__wrap(index))}},"statement",false,false,false));};handle=function(i){if(i<declarable.elements.length){if(declarable.elements[i]){return handleItem(declarable.elements[i],_this["const"](i));}else{return handle(inc(i));}}else{return value;}};return handle(0);}else{return this.maybeCache(value,function(setValue,value){function handleItem(i,element,index,block){block.push(_this.macroExpand1(__node("MacroAccess",8512,38,232,{macroName:"let",macroData:{declarable:__node("MacroAccess",8516,37,232,__node("MacroAccess",8516,31,232,{ident:__wrap(element)},"statement",false,false,false),"statement",false,false,false),value:__node("Access",8527,__wrap(value),__wrap(index))}},"statement",false,false,false)));return handle(inc(i),block);};function handle(i,block){if(i<declarable.elements.length){if(declarable.elements[i]){return handleItem(i,declarable.elements[i],_this["const"](i),block);}else{return handle(inc(i),block);}}else{block.push(value);return _this.block(block);}};return handle(0,[setValue]);});}}else if(declarable.type==="object"){if(declarable.pairs.length===1){handleItem=function(left,key){return _this.macroExpand1(__node("MacroAccess",9072,38,247,{macroName:"let",macroData:{declarable:__node("MacroAccess",9076,37,247,__node("MacroAccess",9076,31,247,{ident:__wrap(left)},"statement",false,false,false),"statement",false,false,false),value:__node("Access",9084,__wrap(value),__wrap(key))}},"statement",false,false,false));};handle=function(pair){return handleItem(pair.value,pair.key);};return handle(this.macroExpand1(declarable.pairs[0]));}else{return this.maybeCache(value,function(setValue,value){function handleItem(i,left,key,block){block.push(_this.macroExpand1(__node("MacroAccess",9371,38,254,{macroName:"let",macroData:{declarable:__node("MacroAccess",9375,37,254,__node("MacroAccess",9375,31,254,{ident:__wrap(left)},"statement",false,false,false),"statement",false,false,false),value:__node("Access",9383,__wrap(value),__wrap(key))}},"statement",false,false,false)));return handle(inc(i),block);};function handlePair(i,pair,block){return handleItem(i,pair.value,pair.key,block);};function handle(i,block){if(i<declarable.pairs.length){return handlePair(i,_this.macroExpand1(declarable.pairs[i]),block);}else{block.push(value);return _this.block(block);}};return handle(0,[setValue]);});}}else{return this.error("Unknown declarable: "+String(declarable+" "+String(declarable!=null&&(_ref=declarable.constructor)!=null?_ref.name:void 0)));}};}.call(this));',
          params: [
            ["ident", "declarable", "ident", "Declarable"],
            ["const", "="],
            ["ident", "value", "ident", "ExpressionOrAssignmentOrBody"]
          ],
          names: "let",
          id: 38
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node,__const){var _this,macroData,macroName,node;_this=this;macroName=macroFullData.macroName;macroData=macroFullData.macroData;node=macroData.node;if(node){return this.mutateLast(node||this.noop(),function(n){return _this["return"](n);},true);}else{return this["return"]();}};}.call(this));',
          params: [["ident", "node", "many", "?", "ident", "Expression"]],
          names: "return",
          id: 39
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node,__const){var _this,macroData,macroName,node;_this=this;macroName=macroFullData.macroName;macroData=macroFullData.macroData;node=macroData.node;return this.mutateLast(node||this.noop(),function(n){return _this.maybeCache(n,function(setN,n){return __node("MacroAccess",10173,17,280,{macroName:"if",macroData:{test:__node("MacroAccess",10185,20,280,{op:"?",node:__wrap(setN)},"statement",false,false,false),body:__node("MacroAccess",10194,39,281,{macroName:"return",macroData:{node:__wrap(n)}},"statement",false,false,false),elseIfs:[]}},"statement",false,false,false);});},true);};}.call(this));',
          params: [["ident", "node", "ident", "Expression"]],
          names: "return?",
          id: 40
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node,__const){var _this,macroData,macroName,node;_this=this;macroName=macroFullData.macroName;macroData=macroFullData.macroData;node=macroData.node;return this.mutateLast(node||this.noop(),function(n){if(_this.isType(n,"boolean")){return __node("MacroAccess",10350,17,288,{macroName:"if",macroData:{test:__wrap(n),body:__node("MacroAccess",10366,39,289,{macroName:"return",macroData:{node:__const("true")}},"statement",false,false,false),elseIfs:[]}},"statement",false,false,false);}else{return _this.maybeCache(n,function(setN,n){return __node("MacroAccess",10452,17,293,{macroName:"if",macroData:{test:__wrap(setN),body:__node("MacroAccess",10474,39,294,{macroName:"return",macroData:{node:__wrap(n)}},"statement",false,false,false),elseIfs:[]}},"statement",false,false,false);});}},true);};}.call(this));',
          params: [["ident", "node", "ident", "Expression"]],
          names: "returnif",
          id: 41
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node,__const){var _this,macroData,macroName,node;_this=this;macroName=macroFullData.macroName;macroData=macroFullData.macroData;node=macroData.node;return this.mutateLast(node||this.noop(),function(n){if(_this.isType(n,"boolean")){return __node("MacroAccess",10636,17,301,{macroName:"unless",macroData:{test:__wrap(n),body:__node("MacroAccess",10656,39,302,{macroName:"return",macroData:{node:__const("false")}},"statement",false,false,false),elseIfs:[]}},"statement",false,false,false);}else{return _this.maybeCache(n,function(setN,n){return __node("MacroAccess",10743,17,306,{macroName:"unless",macroData:{test:__wrap(setN),body:__node("MacroAccess",10769,39,307,{macroName:"return",macroData:{node:__wrap(n)}},"statement",false,false,false),elseIfs:[]}},"statement",false,false,false);});}},true);};}.call(this));',
          params: [["ident", "node", "ident", "Expression"]],
          names: "returnunless",
          id: 42
        },
        {
          code: 'return (function(){"use strict";var __lt,__num,__typeof;__lt=function(x,y){var type;type=typeof x;if(type!=="number"&&type!=="string"){throw TypeError("Cannot compare a non-number/string: "+type);}else if(type!==typeof y){throw TypeError("Cannot compare elements of different types: "+type+" vs "+typeof y);}else{return x<y;}};__num=function(num){if(typeof num!=="number"){throw TypeError("Expected a number, got "+__typeof(num));}else{return num;}};__typeof=(function(){var _toString;_toString=Object.prototype.toString;return function(o){if(o===void 0){return "Undefined";}else if(o===null){return "Null";}else{return o.constructor&&o.constructor.name||_toString.call(o).slice(8,-1);}};}());return function(macroFullData,__wrap,__node,__const){var _this,body,f,locals,macroData,macroName,params,values;_this=this;macroName=macroFullData.macroName;macroData=macroFullData.macroData;locals=macroData.locals;body=macroData.body;params=[];values=[];if(locals){if(locals.ident){params.push(this.param(locals.ident));values.push(locals.value);}f=function(i){if(__lt(i,locals.rest.length)){if(locals.rest[i].ident){params.push(_this.param(locals.rest[i].ident));values.push(locals.rest[i].value);}return f(__num(i)+1);}};f(0);}return this.call(this.func(params,body,true,true),values);};}.call(this));',
          params: [
            [
              "ident",
              "locals",
              "many",
              "?",
              "sequence",
              ["ident", "ident", "ident", "Identifier"],
              ["const", "="],
              ["ident", "value"],
              [
                "ident",
                "rest",
                "many",
                "*",
                "sequence",
                ["const", ","],
                ["ident", "ident", "ident", "Identifier"],
                ["const", "="],
                ["ident", "value"]
              ]
            ],
            [
              "ident",
              "body",
              "choice",
              ["ident", "Body"],
              [
                "sequence",
                ["const", ";"],
                ["this", "ident", "Statement"]
              ]
            ]
          ],
          names: "do",
          id: 104
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node,__const){var body,func,macroData,macroName,node;macroName=macroFullData.macroName;macroData=macroFullData.macroData;node=macroData.node;body=macroData.body;func=__node("Function",30670,[],__wrap(body),true,false,false,void 0,false,[]);return __node("Call",30687,__wrap(func),[__wrap(node)],false,true);};}.call(this));',
          params: [
            ["ident", "node", "ident", "Expression"],
            [
              "ident",
              "body",
              "choice",
              ["ident", "Body"],
              [
                "sequence",
                ["const", ";"],
                ["this", "ident", "Statement"]
              ]
            ]
          ],
          names: "with",
          id: 105
        },
        {
          code: 'return (function(){"use strict";var __strnum,__typeof;__strnum=function(strnum){var type;type=typeof strnum;if(type==="string"){return strnum;}else if(type==="number"){return String(strnum);}else{throw TypeError("Expected a string or number, got "+__typeof(strnum));}};__typeof=(function(){var _toString;_toString=Object.prototype.toString;return function(o){if(o===void 0){return "Undefined";}else if(o===null){return "Null";}else{return o.constructor&&o.constructor.name||_toString.call(o).slice(8,-1);}};}());return function(macroFullData,__wrap,__node,__const){var arr,body,elseBody,every,init,loop,macroData,macroName,reducer,result,runElse,some,step,test;macroName=macroFullData.macroName;macroData=macroFullData.macroData;reducer=macroData.reducer;init=macroData.init;test=macroData.test;step=macroData.step;body=macroData.body;elseBody=macroData.elseBody;if(init==null){init=this.noop();}if(test==null){test=__const("true");}if(step==null){step=this.noop();}if(reducer){if(reducer==="first"){body=this.mutateLast(body||this.noop(),function(node){return __node("MacroAccess",32135,39,1015,{macroName:"return",macroData:{node:__wrap(node)}},"statement",false,false,false);});loop=this["for"](init,test,step,body);return __node("MacroAccess",32210,0,1017,{macroName:"do",macroData:{body:__node("Block",32214,[__wrap(loop),__wrap(elseBody)],null)}},"expression",false,false,false);}else{if(elseBody){this.error("Cannot use a for loop with an else with "+__strnum(reducer),elseBody);}if(reducer==="some"){some=this.tmp("some",false,"boolean");result=[];result.push(__node("MacroAccess",32492,38,1026,{macroName:"let",macroData:{declarable:__node("MacroAccess",32496,37,1026,__node("MacroAccess",32496,31,1026,{ident:__wrap(some)},"statement",false,false,false),"statement",false,false,false),value:__const("false")}},"statement",false,false,false));result.push(this["for"](init,test,step,this.mutateLast(body||this.noop(),function(node){return __node("MacroAccess",32601,17,1028,{macroName:"if",macroData:{test:__wrap(node),body:__node("Block",32622,[__node("MacroAccess",32622,30,1029,{left:__wrap(some),op:":=",right:__const("true")},"statement",false,false,false),__node("MacroAccess",32650,19,1030,{macroName:"break",macroData:{}},"statement",false,false,false)],null),elseIfs:[]}},"statement",false,false,false);})));result.push(some);if(this.position==="expression"){return __wrap(result);}else{return __wrap(result);}}else if(reducer==="every"){every=this.tmp("every",false,"boolean");result=[];result.push(__node("MacroAccess",32935,38,1039,{macroName:"let",macroData:{declarable:__node("MacroAccess",32939,37,1039,__node("MacroAccess",32939,31,1039,{ident:__wrap(every)},"statement",false,false,false),"statement",false,false,false),value:__const("true")}},"statement",false,false,false));result.push(this["for"](init,test,step,this.mutateLast(body||this.noop(),function(node){return __node("MacroAccess",33044,17,1041,{macroName:"if",macroData:{test:__node("MacroAccess",33058,3,1041,{op:"not",node:__wrap(node)},"statement",false,false,false),body:__node("Block",33069,[__node("MacroAccess",33069,30,1042,{left:__wrap(every),op:":=",right:__const("false")},"statement",false,false,false),__node("MacroAccess",33099,19,1043,{macroName:"break",macroData:{}},"statement",false,false,false)],null),elseIfs:[]}},"statement",false,false,false);})));result.push(every);if(this.position==="expression"){return __wrap(result);}else{return __wrap(result);}}else{return this.error("Unknown reducer: "+__strnum(reducer));}}}else if(elseBody){if(this.position==="expression"){this.error("Cannot use a for loop with an else with as an expression",elseBody);}runElse=this.tmp("else",false,"boolean");body=__node("Block",33515,[__node("MacroAccess",33515,30,1056,{left:__wrap(runElse),op:":=",right:__const("false")},"statement",false,false,false),__wrap(body)],null);init=__node("Block",33574,[__node("MacroAccess",33574,30,1059,{left:__wrap(runElse),op:":=",right:__const("true")},"statement",false,false,false),__wrap(init)],null);loop=this["for"](init,test,step,body);return __node("Block",33670,[__wrap(loop),__node("MacroAccess",33684,17,1064,{macroName:"if",macroData:{test:__wrap(runElse),body:__wrap(elseBody),elseIfs:[]}},"statement",false,false,false)],null);}else if(this.position==="expression"){arr=this.tmp("arr",false,this.type(body).array());body=this.mutateLast(body||this.noop(),function(node){return __node("Call",33877,__node("Access",33877,__wrap(arr),__node("Const",33883,"push")),[__wrap(node)],false,false);});init=__node("Block",33913,[__node("MacroAccess",33913,30,1070,{left:__wrap(arr),op:":=",right:__node("Array",33928,[])},"statement",false,false,false),__wrap(init)],null);loop=this["for"](init,test,step,body);return __node("Block",34002,[__wrap(loop),__wrap(arr)],null);}else{return this["for"](init,test,step,body);}};}.call(this));',
          params: [
            [
              "ident",
              "reducer",
              "many",
              "?",
              "choice",
              ["const", "every"],
              ["const", "some"],
              ["const", "first"]
            ],
            [
              "ident",
              "init",
              "choice",
              ["ident", "ExpressionOrAssignment"],
              ["const", ""]
            ],
            ["const", ";"],
            [
              "ident",
              "test",
              "choice",
              ["ident", "Logic"],
              ["const", ""]
            ],
            ["const", ";"],
            [
              "ident",
              "step",
              "choice",
              ["ident", "ExpressionOrAssignment"],
              ["const", ""]
            ],
            [
              "ident",
              "body",
              "choice",
              ["ident", "BodyNoEnd"],
              [
                "sequence",
                ["const", ";"],
                ["this", "ident", "Statement"]
              ]
            ],
            [
              "ident",
              "elseBody",
              "many",
              "?",
              "sequence",
              ["const", "\n"],
              ["const", "else"],
              [
                "this",
                "choice",
                ["ident", "BodyNoEnd"],
                [
                  "sequence",
                  ["const", ";"],
                  ["this", "ident", "Statement"]
                ]
              ]
            ],
            ["const", "end"]
          ],
          names: "for",
          id: 106
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node,__const){var body,current,currentStart,init,macroData,macroName,step,test;macroName=macroFullData.macroName;macroData=macroFullData.macroData;init=macroData.init;test=macroData.test;step=macroData.step;current=macroData.current;currentStart=macroData.currentStart;body=macroData.body;if(init==null){init=this.noop();}if(test==null){test=__const("true");}if(step==null){step=this.noop();}body=this.mutateLast(body||this.noop(),function(node){return __node("MacroAccess",34389,30,1084,{left:__wrap(current),op:":=",right:__wrap(node)},"expression",false,false,false);});return __node("Block",34417,[__node("MacroAccess",34417,38,1086,{macroName:"let",macroData:{declarable:__node("MacroAccess",34426,37,1086,__node("MacroAccess",34426,31,1086,{isMutable:"mutable",ident:__wrap(current)},"statement",false,false,false),"statement",false,false,false),value:__wrap(currentStart)}},"statement",false,false,false),__node("MacroAccess",34461,106,1087,{macroName:"for",macroData:{init:__wrap(init),test:__wrap(test),step:__wrap(step),body:__wrap(body)}},"statement",false,false,false),__wrap(current)],null);};}.call(this));',
          params: [
            ["const", "reduce"],
            [
              "ident",
              "init",
              "choice",
              ["ident", "Expression"],
              ["const", ""]
            ],
            ["const", ";"],
            [
              "ident",
              "test",
              "choice",
              ["ident", "Logic"],
              ["const", ""]
            ],
            ["const", ";"],
            [
              "ident",
              "step",
              "choice",
              ["ident", "Statement"],
              ["const", ""]
            ],
            ["const", ","],
            ["ident", "current", "ident", "Identifier"],
            ["const", "="],
            ["ident", "currentStart"],
            [
              "ident",
              "body",
              "choice",
              ["ident", "Body"],
              [
                "sequence",
                ["const", ";"],
                ["this", "ident", "Statement"]
              ]
            ]
          ],
          names: "for",
          id: 107
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node,__const){var body,elseBody,macroData,macroName,reducer,step,test;macroName=macroFullData.macroName;macroData=macroFullData.macroData;reducer=macroData.reducer;test=macroData.test;step=macroData.step;body=macroData.body;elseBody=macroData.elseBody;if(macroName==="until"){test=__node("MacroAccess",34829,3,1094,{op:"not",node:__wrap(test)},"expression",false,false,false);}if(reducer==="every"){return __node("MacroAccess",34880,106,1097,{macroName:"for",macroData:{reducer:"every",test:__wrap(test),step:__wrap(step),body:__wrap(body),elseBody:__wrap(elseBody)}},"expression",false,false,false);}else if(reducer==="some"){return __node("MacroAccess",34989,106,1102,{macroName:"for",macroData:{reducer:"some",test:__wrap(test),step:__wrap(step),body:__wrap(body),elseBody:__wrap(elseBody)}},"expression",false,false,false);}else if(reducer==="first"){return __node("MacroAccess",35098,106,1107,{macroName:"for",macroData:{reducer:"first",test:__wrap(test),step:__wrap(step),body:__wrap(body),elseBody:__wrap(elseBody)}},"expression",false,false,false);}else if(this.position==="expression"){return __node("MacroAccess",35215,106,1112,{macroName:"for",macroData:{test:__wrap(test),step:__wrap(step),body:__wrap(body),elseBody:__wrap(elseBody)}},"expression",false,false,false);}else{return __node("MacroAccess",35298,106,1118,{macroName:"for",macroData:{test:__wrap(test),step:__wrap(step),body:__wrap(body),elseBody:__wrap(elseBody)}},"statement",false,false,false);}};}.call(this));',
          params: [
            [
              "ident",
              "reducer",
              "many",
              "?",
              "choice",
              ["const", "every"],
              ["const", "some"],
              ["const", "first"]
            ],
            ["ident", "test", "ident", "Logic"],
            [
              "ident",
              "step",
              "many",
              "?",
              "sequence",
              ["const", ","],
              ["this", "ident", "ExpressionOrAssignment"]
            ],
            [
              "ident",
              "body",
              "choice",
              ["ident", "BodyNoEnd"],
              [
                "sequence",
                ["const", ";"],
                ["this", "ident", "Statement"]
              ]
            ],
            [
              "ident",
              "elseBody",
              "many",
              "?",
              "sequence",
              ["const", "\n"],
              ["const", "else"],
              [
                "this",
                "choice",
                ["ident", "BodyNoEnd"],
                [
                  "sequence",
                  ["const", ";"],
                  ["this", "ident", "Statement"]
                ]
              ]
            ],
            ["const", "end"]
          ],
          names: ["while", "until"],
          id: 108
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node,__const){var body,current,currentStart,macroData,macroName,step,test;macroName=macroFullData.macroName;macroData=macroFullData.macroData;test=macroData.test;step=macroData.step;current=macroData.current;currentStart=macroData.currentStart;body=macroData.body;if(macroName==="until"){test=__node("MacroAccess",35596,3,1125,{op:"not",node:__wrap(test)},"expression",false,false,false);}return __node("MacroAccess",35620,107,1128,{macroName:"for",macroData:{test:__wrap(test),step:__wrap(step),current:__wrap(current),currentStart:__wrap(currentStart),body:__wrap(body)}},"statement",false,false,false);};}.call(this));',
          params: [
            ["const", "reduce"],
            ["ident", "test", "ident", "Logic"],
            [
              "ident",
              "step",
              "many",
              "?",
              "sequence",
              ["const", ","],
              ["this", "ident", "ExpressionOrAssignment"]
            ],
            ["const", ","],
            ["ident", "current", "ident", "Identifier"],
            ["const", "="],
            ["ident", "currentStart"],
            [
              "ident",
              "body",
              "choice",
              ["ident", "Body"],
              [
                "sequence",
                ["const", ";"],
                ["this", "ident", "Statement"]
              ]
            ]
          ],
          names: ["while", "until"],
          id: 109
        },
        {
          code: 'return (function(){"use strict";var __num,__strnum,__typeof;__num=function(num){if(typeof num!=="number"){throw TypeError("Expected a number, got "+__typeof(num));}else{return num;}};__strnum=function(strnum){var type;type=typeof strnum;if(type==="string"){return strnum;}else if(type==="number"){return String(strnum);}else{throw TypeError("Expected a string or number, got "+__typeof(strnum));}};__typeof=(function(){var _toString;_toString=Object.prototype.toString;return function(o){if(o===void 0){return "Undefined";}else if(o===null){return "Null";}else{return o.constructor&&o.constructor.name||_toString.call(o).slice(8,-1);}};}());return function(macroFullData,__wrap,__node,__const){var _ref,_ref2,args,array,body,elseBody,end,func,hasIndex,hasLength,inclusive,increment,index,init,isString,length,letIndex,letLength,letValue,macroData,macroName,reducer,start,step,test,tmp,value,valueExpr,valueIdent;macroName=macroFullData.macroName;macroData=macroFullData.macroData;reducer=macroData.reducer;value=macroData.value;index=macroData.index;array=macroData.array;body=macroData.body;elseBody=macroData.elseBody;value=this.macroExpand1(value);length=null;if(index){length=index.length;index=index.value;}if(this.isCall(array)&&this.isIdent(this.callFunc(array))&&this.name(this.callFunc(array))==="__toArray"&&!this.callIsApply(array)){array=this.callArgs(array)[0];}if(this.isCall(array)&&this.isIdent(this.callFunc(array))&&this.name(this.callFunc(array))==="__range"&&!this.callIsApply(array)){if(this.isArray(value)||this.isObject(value)){this.error("Cannot assign a number to a complex declarable",value);}value=value.ident;_ref=this.callArgs(array);start=_ref[0];end=_ref[1];step=_ref[2];inclusive=_ref[3];init=[];if(this.isConst(start)){if(typeof this.value(start)!=="number"){this.error("Cannot start with a non-number: "+__strnum(this.value(start)),start);}}else{start=__node("MacroAccess",38123,60,1187,{op:"+",node:__wrap(start)},"expression",false,false,false);}init.push(this.macroExpandAll(__node("MacroAccess",38169,38,1188,{macroName:"let",macroData:{declarable:__node("MacroAccess",38173,37,1188,__node("MacroAccess",38173,31,1188,{isMutable:"mutable",ident:__wrap(value)},"statement",false,false,false),"statement",false,false,false),value:__wrap(start)}},"statement",false,false,false)));if(this.isConst(end)){if(typeof this.value(end)!=="number"){this.error("Cannot end with a non-number: "+__strnum(this.value(end)),end);}}else if(this.isComplex(end)){end=this.cache(__node("MacroAccess",38387,60,1194,{op:"+",node:__wrap(end)},"expression",false,false,false),init,"end",false);}else{init.push(__node("MacroAccess",38447,60,1196,{op:"+",node:__wrap(end)},"expression",false,false,false));}if(this.isConst(step)){if(typeof this.value(step)!=="number"){this.error("Cannot step with a non-number: "+__strnum(this.value(step)),step);}}else if(this.isComplex(step)){step=this.cache(__node("MacroAccess",38650,60,1202,{op:"+",node:__wrap(step)},"expression",false,false,false),init,"step",false);}else{init.push(__node("MacroAccess",38712,60,1204,{op:"+",node:__wrap(step)},"expression",false,false,false));}if(this.isComplex(inclusive)){inclusive=this.cache(__wrap(inclusive),init,"incl",false);}if(this.isConst(step)){if(__num(this.value(step))>0){if(this.isConst(end)&&this.value(end)===1/0){test=__const("true");}else{test=__node("MacroAccess",39001,16,1214,{macroName:"if",macroData:{test:__wrap(inclusive),body:__node("MacroAccess",39020,9,1214,{left:__wrap(value),inverted:false,op:"~<=",right:__wrap(end)},"expression",false,false,false),elseIfs:[],elseBody:__node("MacroAccess",39041,9,1214,{left:__wrap(value),inverted:false,op:"~<",right:__wrap(end)},"expression",false,false,false)}},"expression",false,false,false);}}else if(this.isConst(end)&&this.value(end)===-1/0){test=__const("true");}else{test=__node("MacroAccess",39180,16,1219,{macroName:"if",macroData:{test:__wrap(inclusive),body:__node("MacroAccess",39199,10,1219,{left:__wrap(value),inverted:false,op:"~>=",right:__wrap(end)},"expression",false,false,false),elseIfs:[],elseBody:__node("MacroAccess",39220,10,1219,{left:__wrap(value),inverted:false,op:"~>",right:__wrap(end)},"expression",false,false,false)}},"expression",false,false,false);}}else{test=__node("MacroAccess",39259,17,1221,{macroName:"if",macroData:{test:__node("MacroAccess",39262,10,1221,{left:__wrap(step),inverted:false,op:"~>",right:__node("Const",39272,0)},"expression",false,false,false),body:__node("MacroAccess",39274,16,1222,{macroName:"if",macroData:{test:__wrap(inclusive),body:__node("MacroAccess",39302,9,1222,{left:__wrap(value),inverted:false,op:"~<=",right:__wrap(end)},"expression",false,false,false),elseIfs:[],elseBody:__node("MacroAccess",39323,9,1222,{left:__wrap(value),inverted:false,op:"~<",right:__wrap(end)},"expression",false,false,false)}},"statement",false,false,false),elseIfs:[],elseBody:__node("MacroAccess",39352,16,1224,{macroName:"if",macroData:{test:__wrap(inclusive),body:__node("MacroAccess",39380,10,1224,{left:__wrap(value),inverted:false,op:"~>=",right:__wrap(end)},"expression",false,false,false),elseIfs:[],elseBody:__node("MacroAccess",39401,10,1224,{left:__wrap(value),inverted:false,op:"~>",right:__wrap(end)},"expression",false,false,false)}},"statement",false,false,false)}},"expression",false,false,false);}increment=__node("MacroAccess",39456,52,1226,{left:__wrap(value),op:"~+=",right:__wrap(step)},"expression",false,false,false);if(length){init.push(this.macroExpandAll(__node("MacroAccess",39534,38,1229,{macroName:"let",macroData:{declarable:__node("MacroAccess",39538,37,1229,__node("MacroAccess",39538,31,1229,{ident:__wrap(length)},"statement",false,false,false),"statement",false,false,false),value:__node("MacroAccess",39548,17,1229,{macroName:"if",macroData:{test:__wrap(inclusive),body:__node("MacroAccess",39563,45,1230,{left:__node("MacroAccess",39574,49,1230,{left:__node("MacroAccess",39574,49,1230,{left:__wrap(end),inverted:false,op:"~-",right:__wrap(start)},"expression",false,false,false),inverted:false,op:"~+",right:__wrap(step)},"expression",false,false,false),inverted:false,op:"~\\\\",right:__wrap(step)},"statement",false,false,false),elseIfs:[],elseBody:__node("MacroAccess",39621,45,1232,{left:__node("MacroAccess",39632,49,1232,{left:__wrap(end),inverted:false,op:"~-",right:__wrap(start)},"expression",false,false,false),inverted:false,op:"~\\\\",right:__wrap(step)},"statement",false,false,false)}},"expression",false,false,false)}},"statement",false,false,false)));}if(index){init.push(this.macroExpandAll(__node("MacroAccess",39716,38,1235,{macroName:"let",macroData:{declarable:__node("MacroAccess",39720,37,1235,__node("MacroAccess",39720,31,1235,{isMutable:"mutable",ident:__wrap(index)},"statement",false,false,false),"statement",false,false,false),value:__node("Const",39738,0)}},"statement",false,false,false)));increment=__node("Block",39765,[__wrap(increment),__node("MacroAccess",39786,103,1238,{left:__wrap(index),op:"+=",right:__node("Const",39806,1)},"statement",false,false,false)],null);if(this.hasFunc(body)){func=this.tmp("f",false,"function");init.push(__node("MacroAccess",39906,38,1241,{macroName:"let",macroData:{declarable:__node("MacroAccess",39910,37,1241,__node("MacroAccess",39910,31,1241,{ident:__wrap(func)},"statement",false,false,false),"statement",false,false,false),value:__node("Function",39920,[__node("Param",39921,__wrap(value),void 0,false,false,void 0),__node("Param",39928,__wrap(index),void 0,false,false,void 0)],__wrap(body),true,false,false,void 0,false,[])}},"statement",false,false,false));body=__node("Call",39970,__wrap(func),[__node("This",39978),__wrap(value),__wrap(index)],false,true);}}else if(this.hasFunc(body)){func=this.tmp("f",false,"function");init.push(__node("MacroAccess",40098,38,1245,{macroName:"let",macroData:{declarable:__node("MacroAccess",40102,37,1245,__node("MacroAccess",40102,31,1245,{ident:__wrap(func)},"statement",false,false,false),"statement",false,false,false),value:__node("Function",40112,[__node("Param",40113,__wrap(value),void 0,false,false,void 0)],__wrap(body),true,false,false,void 0,false,[])}},"statement",false,false,false));body=__node("Call",40152,__wrap(func),[__node("This",40160),__wrap(value)],false,true);}if(reducer==="every"){return __node("MacroAccess",40219,106,1249,{macroName:"for",macroData:{reducer:"every",init:__wrap(init),test:__wrap(test),step:__wrap(increment),body:__wrap(body),elseBody:__wrap(elseBody)}},"expression",false,false,false);}else if(reducer==="some"){return __node("MacroAccess",40348,106,1254,{macroName:"for",macroData:{reducer:"some",init:__wrap(init),test:__wrap(test),step:__wrap(increment),body:__wrap(body),elseBody:__wrap(elseBody)}},"expression",false,false,false);}else if(reducer==="first"){return __node("MacroAccess",40477,106,1259,{macroName:"for",macroData:{reducer:"first",init:__wrap(init),test:__wrap(test),step:__wrap(increment),body:__wrap(body),elseBody:__wrap(elseBody)}},"expression",false,false,false);}else if(reducer==="filter"){body=this.mutateLast(body,function(node){return __node("MacroAccess",40652,17,1265,{macroName:"if",macroData:{test:__wrap(node),body:__wrap(value),elseIfs:[]}},"statement",false,false,false);});return __node("MacroAccess",40693,106,1267,{macroName:"for",macroData:{init:__wrap(init),test:__wrap(test),step:__wrap(increment),body:__wrap(body),elseBody:__wrap(elseBody)}},"expression",false,false,false);}else if(this.position==="expression"){return __node("MacroAccess",40825,106,1272,{macroName:"for",macroData:{init:__wrap(init),test:__wrap(test),step:__wrap(increment),body:__wrap(body),elseBody:__wrap(elseBody)}},"expression",false,false,false);}else{return __node("MacroAccess",40928,106,1278,{macroName:"for",macroData:{init:__wrap(init),test:__wrap(test),step:__wrap(increment),body:__wrap(body),elseBody:__wrap(elseBody)}},"statement",false,false,false);}}else{init=[];isString=this.isType(array,"string");hasIndex=index!=null;if(index==null){index=this.tmp("i",false,"number");}hasLength=length!=null;if(length==null){length=this.tmp("len",false,"number");}this.macroExpandAll(__node("MacroAccess",41282,38,1291,{macroName:"let",macroData:{declarable:__node("MacroAccess",41286,37,1291,__node("MacroAccess",41286,31,1291,{ident:__wrap(length)},"statement",false,false,false),"statement",false,false,false),value:__node("Const",41297,0)}},"statement",false,false,false));array=this.macroExpandAll(array);step=__node("Const",41383,1);start=__node("Const",41416,0);end=__const("Infinity");inclusive=__const("false");if(this.isCall(array)&&this.isIdent(this.callFunc(array))){if(this.name(this.callFunc(array))==="__step"&&!this.callIsApply(array)){args=this.callArgs(array);array=args[0];step=args[1];if(this.isConst(step)){if(__num(this.value(step))>=0){start=__node("Const",41814,0);end=__const("Infinity");}else{start=__const("Infinity");end=__node("Const",41931,0);}}else{start=void 0;end=void 0;}inclusive=__const("true");}else if(this.name(this.callFunc(array))==="__slice"&&this.callIsApply(array)){args=this.callArgs(array);array=args[0];start=args[1];end=args[2];if(this.isConst(end)&&this.value(end)===void 0){end=__const("Infinity");}}else if(this.name(this.callFunc(array))==="__sliceStep"&&!this.callIsApply(array)){args=this.callArgs(array);array=args[0];start=args[1];end=args[2];step=args[3];inclusive=args[4];}}if(this.isConst(step)){if(typeof this.value(step)!=="number"){this.error("Expected step to be a number, got "+__typeof(this.value(step)),step);}else if(__num(this.value(step))%1!==0){this.error("Expected step to be an integer, got "+__strnum(this.value(step)),step);}else if(this.value(step)===0){this.error("Expected step to non-zero",step);}}if(start&&this.isConst(start)&&this.value(start)!==1/0&&(typeof this.value(start)!=="number"||__num(this.value(start))%1!==0)){this.error("Expected start to be an integer, got "+__typeof(this.value(start))+" ("+String(this.value(start))+")",start);}if(end&&this.isConst(end)&&this.value(end)!==1/0&&(typeof this.value(end)!=="number"||__num(this.value(end))%1!==0)){this.error("Expected end to be an integer, got "+__typeof(this.value(end))+" ("+String(this.value(end))+")",end);}if(!isString&&!this.isType(array,"arrayLike")){array=__node("Call",43469,__node("Ident",43469,"__toArray"),[__wrap(array)],false,false);}array=this.cache(array,init,isString?"str":"arr",false);valueExpr=__node("MacroAccess",43597,16,1345,{macroName:"if",macroData:{test:__wrap(isString),body:__node("Call",43616,__node("Access",43616,__wrap(array),__node("Const",43624,"charAt")),[__wrap(index)],false,false),elseIfs:[],elseBody:__node("Access",43644,__wrap(array),__wrap(index))}},"expression",false,false,false);letIndex=this.macroExpandAll(__node("MacroAccess",43703,38,1346,{macroName:"let",macroData:{declarable:__node("MacroAccess",43707,37,1346,__node("MacroAccess",43707,31,1346,{isMutable:"mutable",ident:__wrap(index)},"statement",false,false,false),"statement",false,false,false),value:__node("Const",43725,0)}},"statement",false,false,false));if(value&&value.type==="ident"&&!value.isMutable){valueIdent=value.ident;}else{valueIdent=this.tmp("v",false);}letValue=this.macroExpandAll(__node("MacroAccess",43890,38,1348,{macroName:"let",macroData:{declarable:__node("MacroAccess",43894,37,1348,__node("MacroAccess",43894,31,1348,{ident:__wrap(value)},"statement",false,false,false),"statement",false,false,false),value:__wrap(valueExpr)}},"statement",false,false,false));letLength=this.macroExpandAll(__node("MacroAccess",43960,38,1349,{macroName:"let",macroData:{declarable:__node("MacroAccess",43964,37,1349,__node("MacroAccess",43964,31,1349,{ident:__wrap(length)},"statement",false,false,false),"statement",false,false,false),value:__node("MacroAccess",43974,60,1349,{op:"+",node:__node("Access",43976,__wrap(array),__node("Const",43983,"length"))},"expression",false,false,false)}},"statement",false,false,false));_ref=this.isConst(step)?__num(this.value(step))>0?(this.isConst(start)?__num(this.value(start))>=0?(init.push(__node("MacroAccess",44165,38,1355,{macroName:"let",macroData:{declarable:__node("MacroAccess",44169,37,1355,__node("MacroAccess",44169,31,1355,{isMutable:"mutable",ident:__wrap(index)},"statement",false,false,false),"statement",false,false,false),value:__wrap(start)}},"statement",false,false,false)),init.push(letLength)):(init.push(letLength),init.push(__node("MacroAccess",44308,38,1359,{macroName:"let",macroData:{declarable:__node("MacroAccess",44312,37,1359,__node("MacroAccess",44312,31,1359,{isMutable:"mutable",ident:__wrap(index)},"statement",false,false,false),"statement",false,false,false),value:__node("MacroAccess",44329,66,1359,{left:__wrap(length),inverted:false,op:"+",right:__wrap(start)},"expression",false,false,false)}},"statement",false,false,false))):(init.push(letLength),init.push(__node("MacroAccess",44420,38,1362,{macroName:"let",macroData:{declarable:__node("MacroAccess",44424,37,1362,__node("MacroAccess",44424,31,1362,{isMutable:"mutable",ident:__wrap(index)},"statement",false,false,false),"statement",false,false,false),value:__node("Call",44441,__node("Ident",44441,"__int"),[__wrap(start)],false,false)}},"statement",false,false,false)),init.push(__node("MacroAccess",44482,16,1363,{macroName:"if",macroData:{test:__node("MacroAccess",44485,9,1363,{left:__wrap(index),inverted:false,op:"~<",right:__node("Const",44496,0)},"expression",false,false,false),body:__node("MacroAccess",44504,103,1363,{left:__wrap(index),op:"+=",right:__wrap(length)},"expression",false,false,false),elseIfs:[]}},"expression",false,false,false))),this.isConst(end)&&(this.value(end)===1/0||this.isConst(inclusive)&&this.value(inclusive)&&this.value(end)===-1)?[__node("MacroAccess",44668,9,1365,{left:__wrap(index),inverted:false,op:"~<",right:__wrap(length)},"expression",false,false,false),__node("MacroAccess",44694,52,1365,{left:__wrap(index),op:"~+=",right:__wrap(step)},"expression",false,false,false)]:(tmp=this.tmp("end",false,"number"),init.push(__node("MacroAccess",44801,38,1368,{macroName:"let",macroData:{declarable:__node("MacroAccess",44805,37,1368,__node("MacroAccess",44805,31,1368,{isMutable:"mutable",ident:__wrap(tmp)},"statement",false,false,false),"statement",false,false,false),value:__node("MacroAccess",44820,60,1368,{op:"+",node:__wrap(end)},"expression",false,false,false)}},"statement",false,false,false)),!this.isConst(end)?init.push(__node("MacroAccess",44889,16,1370,{macroName:"if",macroData:{test:__node("MacroAccess",44892,9,1370,{left:__wrap(tmp),inverted:false,op:"~<",right:__node("Const",44901,0)},"expression",false,false,false),body:__node("MacroAccess",44909,52,1370,{left:__wrap(tmp),op:"~+=",right:__wrap(length)},"expression",false,false,false),elseIfs:[]}},"expression",false,false,false)):__num(this.value(end))<0?init.push(__node("MacroAccess",44991,52,1372,{left:__wrap(tmp),op:"~+=",right:__wrap(length)},"expression",false,false,false)):void 0,init.push(__node("MacroAccess",45035,16,1373,{macroName:"if",macroData:{test:__wrap(inclusive),body:__node("MacroAccess",45056,30,1373,{left:__wrap(tmp),op:":=",right:__node("MacroAccess",45063,2,1373,{left:__node("MacroAccess",45063,66,1373,{left:__wrap(tmp),inverted:false,op:"+",right:__node("Const",45071,1)},"expression",false,false,false),inverted:false,op:"or",right:__const("Infinity")},"expression",false,false,false)},"expression",false,false,false),elseIfs:[]}},"expression",false,false,false)),init.push(__node("MacroAccess",45112,86,1374,{left:__wrap(tmp),op:"~min=",right:__wrap(length)},"expression",false,false,false)),[__node("MacroAccess",45149,9,1375,{left:__wrap(index),inverted:false,op:"~<",right:__wrap(tmp)},"expression",false,false,false),__node("MacroAccess",45170,52,1375,{left:__wrap(index),op:"~+=",right:__wrap(step)},"expression",false,false,false)])):this.value(step)===-1&&(!start||this.isConst(start)&&((_ref2=this.value(start))===-1||_ref2===1/0)&&this.isConst(end)&&this.value(end)===0&&this.isConst(inclusive)&&this.value(inclusive))?(hasLength?(init.push(letLength),init.push(__node("MacroAccess",45467,38,1379,{macroName:"let",macroData:{declarable:__node("MacroAccess",45471,37,1379,__node("MacroAccess",45471,31,1379,{isMutable:"mutable",ident:__wrap(index)},"statement",false,false,false),"statement",false,false,false),value:__wrap(length)}},"statement",false,false,false))):init.push(__node("MacroAccess",45537,38,1381,{macroName:"let",macroData:{declarable:__node("MacroAccess",45541,37,1381,__node("MacroAccess",45541,31,1381,{isMutable:"mutable",ident:__wrap(index)},"statement",false,false,false),"statement",false,false,false),value:__node("MacroAccess",45558,60,1381,{op:"+",node:__node("Access",45560,__wrap(array),__node("Const",45567,"length"))},"expression",false,false,false)}},"statement",false,false,false)),[__node("MacroAccess",45589,13,1382,{op:"postDec!",node:__wrap(index)},"expression",false,false,false),this.noop()]):(!this.isConst(end)||__num(this.value(end))<0?(hasLength=true):void 0,this.isConst(start)?(_ref2=this.value(start))===-1||_ref2===1/0?hasLength?(init.push(letLength),init.push(__node("MacroAccess",45883,38,1390,{macroName:"let",macroData:{declarable:__node("MacroAccess",45887,37,1390,__node("MacroAccess",45887,31,1390,{isMutable:"mutable",ident:__wrap(index)},"statement",false,false,false),"statement",false,false,false),value:__node("MacroAccess",45904,49,1390,{left:__wrap(length),inverted:false,op:"~-",right:__node("Const",45916,1)},"expression",false,false,false)}},"statement",false,false,false))):init.push(__node("MacroAccess",45966,38,1392,{macroName:"let",macroData:{declarable:__node("MacroAccess",45970,37,1392,__node("MacroAccess",45970,31,1392,{isMutable:"mutable",ident:__wrap(index)},"statement",false,false,false),"statement",false,false,false),value:__node("MacroAccess",45987,49,1392,{left:__node("MacroAccess",45987,60,1392,{op:"+",node:__node("Access",45989,__wrap(array),__node("Const",45996,"length"))},"expression",false,false,false),inverted:false,op:"~-",right:__node("Const",46006,1)},"expression",false,false,false)}},"statement",false,false,false)):(init.push(letLength),__num(this.value(start))>=0?init.push(__node("MacroAccess",46125,38,1396,{macroName:"let",macroData:{declarable:__node("MacroAccess",46129,37,1396,__node("MacroAccess",46129,31,1396,{isMutable:"mutable",ident:__wrap(index)},"statement",false,false,false),"statement",false,false,false),value:__node("MacroAccess",46146,16,1396,{macroName:"if",macroData:{test:__node("MacroAccess",46149,9,1396,{left:__wrap(start),inverted:false,op:"~<",right:__wrap(length)},"expression",false,false,false),body:__wrap(start),elseIfs:[],elseBody:__node("MacroAccess",46184,49,1396,{left:__wrap(length),inverted:false,op:"~-",right:__node("Const",46196,1)},"expression",false,false,false)}},"expression",false,false,false)}},"statement",false,false,false)):init.push(__node("MacroAccess",46246,38,1398,{macroName:"let",macroData:{declarable:__node("MacroAccess",46250,37,1398,__node("MacroAccess",46250,31,1398,{isMutable:"mutable",ident:__wrap(index)},"statement",false,false,false),"statement",false,false,false),value:__node("MacroAccess",46267,49,1398,{left:__wrap(length),inverted:false,op:"~+",right:__node("MacroAccess",46278,60,1398,{op:"+",node:__wrap(start)},"expression",false,false,false)},"expression",false,false,false)}},"statement",false,false,false))):(init.push(letLength),init.push(__node("MacroAccess",46360,38,1401,{macroName:"let",macroData:{declarable:__node("MacroAccess",46364,37,1401,__node("MacroAccess",46364,31,1401,{isMutable:"mutable",ident:__wrap(index)},"statement",false,false,false),"statement",false,false,false),value:__node("MacroAccess",46381,60,1401,{op:"+",node:__wrap(start)},"expression",false,false,false)}},"statement",false,false,false)),init.push(__node("MacroAccess",46415,16,1402,{macroName:"if",macroData:{test:__node("MacroAccess",46418,9,1402,{left:__wrap(index),inverted:false,op:"~<",right:__node("Const",46429,0)},"statement",false,false,false),body:__node("MacroAccess",46437,52,1402,{left:__wrap(index),op:"~+=",right:__wrap(length)},"expression",false,false,false),elseIfs:[],elseBody:__node("MacroAccess",46463,86,1402,{left:__wrap(index),op:"~min=",right:__wrap(length)},"expression",false,false,false)}},"statement",false,false,false)),init.push(__node("MacroAccess",46510,53,1403,{left:__wrap(index),op:"~-=",right:__node("Const",46522,1)},"statement",false,false,false))),this.isConst(end)?__num(this.value(end))>=0?[__node("MacroAccess",46603,16,1406,{macroName:"if",macroData:{test:__wrap(inclusive),body:__node("MacroAccess",46622,10,1406,{left:__wrap(index),inverted:false,op:"~>=",right:__wrap(end)},"expression",false,false,false),elseIfs:[],elseBody:__node("MacroAccess",46643,10,1406,{left:__wrap(index),inverted:false,op:"~>",right:__wrap(end)},"expression",false,false,false)}},"expression",false,false,false),__node("MacroAccess",46664,52,1406,{left:__wrap(index),op:"~+=",right:__wrap(step)},"expression",false,false,false)]:[__node("MacroAccess",46719,16,1408,{macroName:"if",macroData:{test:__wrap(inclusive),body:__node("MacroAccess",46738,10,1408,{left:__wrap(index),inverted:false,op:"~>=",right:__node("MacroAccess",46749,66,1408,{left:__wrap(end),inverted:false,op:"+",right:__wrap(length)},"expression",false,false,false)},"expression",false,false,false),elseIfs:[],elseBody:__node("MacroAccess",46769,10,1408,{left:__wrap(index),inverted:false,op:"~>",right:__node("MacroAccess",46779,66,1408,{left:__wrap(end),inverted:false,op:"+",right:__wrap(length)},"expression",false,false,false)},"expression",false,false,false)}},"expression",false,false,false),__node("MacroAccess",46800,52,1408,{left:__wrap(index),op:"~+=",right:__wrap(step)},"expression",false,false,false)]:(tmp=this.tmp("end",false,"number"),init.push(__node("MacroAccess",46907,38,1411,{macroName:"let",macroData:{declarable:__node("MacroAccess",46911,37,1411,__node("MacroAccess",46911,31,1411,{isMutable:"mutable",ident:__wrap(tmp)},"statement",false,false,false),"statement",false,false,false),value:__node("MacroAccess",46926,60,1411,{op:"+",node:__wrap(end)},"expression",false,false,false)}},"statement",false,false,false)),init.push(__node("MacroAccess",46958,16,1412,{macroName:"if",macroData:{test:__node("MacroAccess",46961,9,1412,{left:__wrap(tmp),inverted:false,op:"~<",right:__node("Const",46970,0)},"statement",false,false,false),body:__node("MacroAccess",46978,52,1412,{left:__wrap(tmp),op:"~+=",right:__wrap(length)},"expression",false,false,false),elseIfs:[]}},"statement",false,false,false)),[__node("MacroAccess",47013,16,1413,{macroName:"if",macroData:{test:__wrap(inclusive),body:__node("MacroAccess",47032,10,1413,{left:__wrap(index),inverted:false,op:"~>=",right:__wrap(tmp)},"expression",false,false,false),elseIfs:[],elseBody:__node("MacroAccess",47053,10,1413,{left:__wrap(index),inverted:false,op:"~>",right:__wrap(tmp)},"expression",false,false,false)}},"expression",false,false,false),__node("MacroAccess",47074,52,1413,{left:__wrap(index),op:"~+=",right:__wrap(step)},"expression",false,false,false)])):(this.isComplex(step)?(step=this.cache(__node("Call",47163,__node("Ident",47163,"__int"),[__node("Call",47170,__node("Ident",47170,"__nonzero"),[__wrap(step)],false,false)],false,false),init,"step",false)):init.unshift(__node("Call",47249,__node("Ident",47249,"__int"),[__node("Call",47256,__node("Ident",47256,"__nonzero"),[__wrap(step)],false,false)],false,false)),init.push(letLength),!start?(init.push(__node("MacroAccess",47347,38,1421,{macroName:"let",macroData:{declarable:__node("MacroAccess",47351,37,1421,__node("MacroAccess",47351,31,1421,{isMutable:"mutable",ident:__wrap(index)},"statement",false,false,false),"statement",false,false,false),value:__node("MacroAccess",47368,16,1421,{macroName:"if",macroData:{test:__node("MacroAccess",47371,10,1421,{left:__wrap(step),inverted:false,op:"~>",right:__node("Const",47381,0)},"expression",false,false,false),body:__node("Const",47388,0),elseIfs:[],elseBody:__node("MacroAccess",47394,49,1421,{left:__wrap(length),inverted:false,op:"~-",right:__node("Const",47406,1)},"expression",false,false,false)}},"expression",false,false,false)}},"statement",false,false,false)),[__node("MacroAccess",47436,16,1423,{macroName:"if",macroData:{test:__node("MacroAccess",47439,10,1423,{left:__wrap(step),inverted:false,op:"~>",right:__node("Const",47449,0)},"expression",false,false,false),body:__node("MacroAccess",47455,9,1423,{left:__wrap(index),inverted:false,op:"~<",right:__wrap(length)},"expression",false,false,false),elseIfs:[],elseBody:__node("MacroAccess",47478,10,1423,{left:__wrap(index),inverted:false,op:"~>=",right:__node("Const",47490,0)},"expression",false,false,false)}},"expression",false,false,false),__node("MacroAccess",47508,52,1424,{left:__wrap(index),op:"~+=",right:__wrap(step)},"expression",false,false,false)]):(this.isConst(start)?this.value(start)===1/0?init.push(__node("MacroAccess",47649,38,1429,{macroName:"let",macroData:{declarable:__node("MacroAccess",47653,37,1429,__node("MacroAccess",47653,31,1429,{isMutable:"mutable",ident:__wrap(index)},"statement",false,false,false),"statement",false,false,false),value:__node("MacroAccess",47670,49,1429,{left:__wrap(length),inverted:false,op:"~-",right:__node("Const",47682,1)},"expression",false,false,false)}},"statement",false,false,false)):init.push(__node("MacroAccess",47728,38,1431,{macroName:"let",macroData:{declarable:__node("MacroAccess",47732,37,1431,__node("MacroAccess",47732,31,1431,{isMutable:"mutable",ident:__wrap(index)},"statement",false,false,false),"statement",false,false,false),value:__node("MacroAccess",47749,16,1431,{macroName:"if",macroData:{test:__node("MacroAccess",47752,10,1431,{left:__wrap(start),inverted:false,op:"~>=",right:__node("Const",47764,0)},"expression",false,false,false),body:__wrap(start),elseIfs:[],elseBody:__node("MacroAccess",47782,66,1431,{left:__wrap(start),inverted:false,op:"+",right:__wrap(length)},"expression",false,false,false)}},"expression",false,false,false)}},"statement",false,false,false)):(init.push(__node("MacroAccess",47840,38,1433,{macroName:"let",macroData:{declarable:__node("MacroAccess",47844,37,1433,__node("MacroAccess",47844,31,1433,{isMutable:"mutable",ident:__wrap(index)},"statement",false,false,false),"statement",false,false,false),value:__wrap(start)}},"statement",false,false,false)),init.push(__node("MacroAccess",47894,16,1434,{macroName:"if",macroData:{test:__node("MacroAccess",47897,9,1434,{left:__wrap(index),inverted:false,op:"~<",right:__node("Const",47908,0)},"statement",false,false,false),body:__node("MacroAccess",47916,103,1434,{left:__wrap(index),op:"+=",right:__wrap(length)},"expression",false,false,false),elseIfs:[{test:__node("MacroAccess",47942,9,1434,{left:__wrap(step),inverted:false,op:"~<",right:__node("Const",47952,0)},"statement",false,false,false),body:__node("MacroAccess",47960,86,1434,{left:__wrap(index),op:"~min=",right:__wrap(length)},"expression",false,false,false)}]}},"statement",false,false,false))),tmp=this.tmp("end",false,"number"),this.isConst(end)?init.push(__node("MacroAccess",48081,38,1437,{macroName:"let",macroData:{declarable:__node("MacroAccess",48085,37,1437,__node("MacroAccess",48085,31,1437,{isMutable:"mutable",ident:__wrap(tmp)},"statement",false,false,false),"statement",false,false,false),value:__node("MacroAccess",48100,16,1437,{macroName:"if",macroData:{test:__node("MacroAccess",48103,9,1437,{left:__wrap(end),inverted:false,op:"~<",right:__node("Const",48112,0)},"expression",false,false,false),body:__node("MacroAccess",48118,49,1437,{left:__wrap(end),inverted:false,op:"~+",right:__wrap(length)},"expression",false,false,false),elseIfs:[],elseBody:__node("MacroAccess",48139,83,1437,{left:__wrap(end),inverted:false,op:"max",right:__node("MacroAccess",48150,16,1437,{macroName:"if",macroData:{test:__wrap(inclusive),body:__node("MacroAccess",48168,49,1437,{left:__wrap(length),inverted:false,op:"~-",right:__node("Const",48180,1)},"expression",false,false,false),elseIfs:[],elseBody:__wrap(length)}},"expression",false,false,false)},"expression",false,false,false)}},"expression",false,false,false)}},"statement",false,false,false)):(init.push(__node("MacroAccess",48236,38,1439,{macroName:"let",macroData:{declarable:__node("MacroAccess",48240,37,1439,__node("MacroAccess",48240,31,1439,{isMutable:"mutable",ident:__wrap(tmp)},"statement",false,false,false),"statement",false,false,false),value:__node("MacroAccess",48255,60,1439,{op:"+",node:__wrap(end)},"expression",false,false,false)}},"statement",false,false,false)),init.push(__node("MacroAccess",48287,16,1440,{macroName:"if",macroData:{test:__node("MacroAccess",48290,9,1440,{left:__wrap(tmp),inverted:false,op:"~<",right:__node("Const",48299,0)},"statement",false,false,false),body:__node("MacroAccess",48307,103,1440,{left:__wrap(tmp),op:"+=",right:__wrap(length)},"expression",false,false,false),elseIfs:[{test:__node("MacroAccess",48331,10,1440,{left:__wrap(step),inverted:false,op:"~>",right:__node("Const",48341,0)},"statement",false,false,false),body:__node("MacroAccess",48349,86,1440,{left:__wrap(tmp),op:"~min=",right:__node("MacroAccess",48359,16,1440,{macroName:"if",macroData:{test:__wrap(inclusive),body:__node("MacroAccess",48378,49,1440,{left:__wrap(length),inverted:false,op:"~-",right:__node("Const",48390,1)},"expression",false,false,false),elseIfs:[],elseBody:__wrap(length)}},"expression",false,false,false)},"expression",false,false,false)}],elseBody:__node("MacroAccess",48412,87,1440,{left:__wrap(tmp),op:"~max=",right:__node("MacroAccess",48424,16,1440,{macroName:"if",macroData:{test:__wrap(inclusive),body:__node("Const",48443,0),elseIfs:[],elseBody:__node("MacroAccess",48449,61,1440,{op:"-",node:__node("Const",48451,1)},"expression",false,false,false)}},"expression",false,false,false)},"expression",false,false,false)}},"statement",false,false,false))),end=tmp,[__node("MacroAccess",48504,17,1443,{macroName:"if",macroData:{test:__node("MacroAccess",48507,10,1443,{left:__wrap(step),inverted:false,op:"~>",right:__node("Const",48517,0)},"expression",false,false,false),body:__node("MacroAccess",48519,16,1444,{macroName:"if",macroData:{test:__wrap(inclusive),body:__node("MacroAccess",48551,9,1444,{left:__wrap(index),inverted:false,op:"~<=",right:__wrap(end)},"expression",false,false,false),elseIfs:[],elseBody:__node("MacroAccess",48572,9,1444,{left:__wrap(index),inverted:false,op:"~<",right:__wrap(end)},"expression",false,false,false)}},"statement",false,false,false),elseIfs:[],elseBody:__node("MacroAccess",48605,16,1446,{macroName:"if",macroData:{test:__wrap(inclusive),body:__node("MacroAccess",48637,10,1446,{left:__wrap(index),inverted:false,op:"~>=",right:__wrap(end)},"expression",false,false,false),elseIfs:[],elseBody:__node("MacroAccess",48658,9,1446,{left:__wrap(index),inverted:false,op:"~<",right:__wrap(end)},"expression",false,false,false)}},"statement",false,false,false)}},"expression",false,false,false),__node("MacroAccess",48690,52,1447,{left:__wrap(index),op:"~+=",right:__wrap(step)},"expression",false,false,false)]));test=_ref[0];increment=_ref[1];if(this.hasFunc(body)){func=this.tmp("f",false,"function");if(value&&valueIdent!==value.ident){body=__node("Block",48865,[__node("MacroAccess",48865,38,1454,{macroName:"let",macroData:{declarable:__node("MacroAccess",48880,37,1454,__node("MacroAccess",48880,31,1454,{ident:__wrap(value)},"statement",false,false,false),"statement",false,false,false),value:__wrap(valueIdent)}},"statement",false,false,false),__wrap(body)],null);}if(hasIndex){init.push(__node("MacroAccess",48965,38,1457,{macroName:"let",macroData:{declarable:__node("MacroAccess",48969,37,1457,__node("MacroAccess",48969,31,1457,{ident:__wrap(func)},"statement",false,false,false),"statement",false,false,false),value:__node("Function",48979,[__node("Param",48980,__wrap(valueIdent),void 0,false,false,void 0),__node("Param",48993,__wrap(index),void 0,false,false,void 0)],__wrap(body),true,false,false,void 0,false,[])}},"statement",false,false,false));body=__node("Call",49033,__wrap(func),[__node("This",49041),__wrap(valueExpr),__wrap(index)],false,true);}else{init.push(__node("MacroAccess",49104,38,1460,{macroName:"let",macroData:{declarable:__node("MacroAccess",49108,37,1460,__node("MacroAccess",49108,31,1460,{ident:__wrap(func)},"statement",false,false,false),"statement",false,false,false),value:__node("Function",49118,[__node("Param",49119,__wrap(valueIdent),void 0,false,false,void 0)],__wrap(body),true,false,false,void 0,false,[])}},"statement",false,false,false));body=__node("Call",49164,__wrap(func),[__node("This",49172),__wrap(valueExpr)],false,true);}}else if(valueIdent===value.ident||reducer!=="filter"){body=__node("Block",49274,[__node("MacroAccess",49274,38,1464,{macroName:"let",macroData:{declarable:__node("MacroAccess",49287,37,1464,__node("MacroAccess",49287,31,1464,{ident:__wrap(value)},"statement",false,false,false),"statement",false,false,false),value:__wrap(valueExpr)}},"statement",false,false,false),__wrap(body)],null);}else{body=__node("Block",49356,[__node("MacroAccess",49356,38,1468,{macroName:"let",macroData:{declarable:__node("MacroAccess",49369,37,1468,__node("MacroAccess",49369,31,1468,{ident:__wrap(valueIdent)},"statement",false,false,false),"statement",false,false,false),value:__wrap(valueExpr)}},"statement",false,false,false),__node("MacroAccess",49397,38,1469,{macroName:"let",macroData:{declarable:__node("MacroAccess",49410,37,1469,__node("MacroAccess",49410,31,1469,{ident:__wrap(value)},"statement",false,false,false),"statement",false,false,false),value:__wrap(valueIdent)}},"statement",false,false,false),__wrap(body)],null);}if(reducer==="every"){return __node("MacroAccess",49491,106,1473,{macroName:"for",macroData:{reducer:"every",init:__wrap(init),test:__wrap(test),step:__wrap(increment),body:__wrap(body),elseBody:__wrap(elseBody)}},"expression",false,false,false);}else if(reducer==="some"){return __node("MacroAccess",49620,106,1478,{macroName:"for",macroData:{reducer:"some",init:__wrap(init),test:__wrap(test),step:__wrap(increment),body:__wrap(body),elseBody:__wrap(elseBody)}},"expression",false,false,false);}else if(reducer==="first"){return __node("MacroAccess",49749,106,1483,{macroName:"for",macroData:{reducer:"first",init:__wrap(init),test:__wrap(test),step:__wrap(increment),body:__wrap(body),elseBody:__wrap(elseBody)}},"expression",false,false,false);}else if(reducer==="filter"){body=this.mutateLast(body,function(node){return __node("MacroAccess",49924,17,1489,{macroName:"if",macroData:{test:__wrap(node),body:__wrap(valueIdent),elseIfs:[]}},"statement",false,false,false);});return __node("MacroAccess",49971,106,1491,{macroName:"for",macroData:{init:__wrap(init),test:__wrap(test),step:__wrap(increment),body:__wrap(body),elseBody:__wrap(elseBody)}},"expression",false,false,false);}else if(this.position==="expression"){return __node("MacroAccess",50102,106,1496,{macroName:"for",macroData:{init:__wrap(init),test:__wrap(test),step:__wrap(increment),body:__wrap(body),elseBody:__wrap(elseBody)}},"expression",false,false,false);}else{return __node("MacroAccess",50205,106,1502,{macroName:"for",macroData:{init:__wrap(init),test:__wrap(test),step:__wrap(increment),body:__wrap(body),elseBody:__wrap(elseBody)}},"statement",false,false,false);}}};}.call(this));',
          params: [
            [
              "ident",
              "reducer",
              "many",
              "?",
              "choice",
              ["const", "every"],
              ["const", "some"],
              ["const", "first"],
              ["const", "filter"]
            ],
            ["ident", "value", "ident", "Declarable"],
            [
              "ident",
              "index",
              "many",
              "?",
              "sequence",
              ["const", ","],
              ["ident", "value", "ident", "Identifier"],
              [
                "ident",
                "length",
                "many",
                "?",
                "sequence",
                ["const", ","],
                ["this", "ident", "Identifier"]
              ]
            ],
            ["const", "in"],
            ["ident", "array", "ident", "Logic"],
            [
              "ident",
              "body",
              "choice",
              ["ident", "BodyNoEnd"],
              [
                "sequence",
                ["const", ";"],
                ["this", "ident", "Statement"]
              ]
            ],
            [
              "ident",
              "elseBody",
              "many",
              "?",
              "sequence",
              ["const", "\n"],
              ["const", "else"],
              [
                "this",
                "choice",
                ["ident", "BodyNoEnd"],
                [
                  "sequence",
                  ["const", ";"],
                  ["this", "ident", "Statement"]
                ]
              ]
            ],
            ["const", "end"]
          ],
          names: "for",
          id: 113
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node,__const){var array,body,current,currentStart,index,length,macroData,macroName,value;macroName=macroFullData.macroName;macroData=macroFullData.macroData;value=macroData.value;index=macroData.index;array=macroData.array;current=macroData.current;currentStart=macroData.currentStart;body=macroData.body;value=this.macroExpand1(value);body=this.mutateLast(body||this.noop(),function(node){return __node("MacroAccess",50623,30,1509,{left:__wrap(current),op:":=",right:__wrap(node)},"expression",false,false,false);});if(index!=null){length=index.length;}if(index!=null){index=index.value;}return __node("Block",50708,[__node("MacroAccess",50708,38,1513,{macroName:"let",macroData:{declarable:__node("MacroAccess",50717,37,1513,__node("MacroAccess",50717,31,1513,{isMutable:"mutable",ident:__wrap(current)},"statement",false,false,false),"statement",false,false,false),value:__wrap(currentStart)}},"statement",false,false,false),__node("MacroAccess",50752,113,1514,{macroName:"for",macroData:{value:__node("MacroAccess",50761,37,1514,__node("MacroAccess",50761,31,1514,{ident:__wrap(value)},"statement",false,false,false),"statement",false,false,false),index:{value:__wrap(index),length:__wrap(length)},array:__wrap(array),body:__wrap(body)}},"statement",false,false,false),__wrap(current)],null);};}.call(this));',
          params: [
            ["const", "reduce"],
            ["ident", "value", "ident", "Declarable"],
            [
              "ident",
              "index",
              "many",
              "?",
              "sequence",
              ["const", ","],
              ["ident", "value", "ident", "Identifier"],
              [
                "ident",
                "length",
                "many",
                "?",
                "sequence",
                ["const", ","],
                ["this", "ident", "Identifier"]
              ]
            ],
            ["const", "in"],
            ["ident", "array", "ident", "Logic"],
            ["const", ","],
            ["ident", "current", "ident", "Identifier"],
            ["const", "="],
            ["ident", "currentStart"],
            [
              "ident",
              "body",
              "choice",
              ["ident", "Body"],
              [
                "sequence",
                ["const", ";"],
                ["this", "ident", "Statement"]
              ]
            ]
          ],
          names: "for",
          id: 114
        },
        {
          code: 'return (function(){"use strict";var __strnum,__typeof;__strnum=function(strnum){var type;type=typeof strnum;if(type==="string"){return strnum;}else if(type==="number"){return String(strnum);}else{throw TypeError("Expected a string or number, got "+__typeof(strnum));}};__typeof=(function(){var _toString;_toString=Object.prototype.toString;return function(o){if(o===void 0){return "Undefined";}else if(o===null){return "Null";}else{return o.constructor&&o.constructor.name||_toString.call(o).slice(8,-1);}};}());return function(macroFullData,__wrap,__node,__const){var arr,body,elseBody,func,index,init,key,letIndex,letValue,loop,macroData,macroName,object,own,post,reducer,runElse,type,value,valueIdent;macroName=macroFullData.macroName;macroData=macroFullData.macroData;reducer=macroData.reducer;key=macroData.key;value=macroData.value;type=macroData.type;object=macroData.object;body=macroData.body;elseBody=macroData.elseBody;index=null;if(value){index=value.index;value=this.macroExpand1(value.value);}own=type==="of";init=[];if(own||value){object=this.cache(object,init,"obj",false);}this["let"](key,false,this.type("string"));letValue=value&&this.macroExpandAll(__node("MacroAccess",51465,38,1530,{macroName:"let",macroData:{declarable:__node("MacroAccess",51469,37,1530,__node("MacroAccess",51469,31,1530,{ident:__wrap(value)},"statement",false,false,false),"statement",false,false,false),value:__node("Access",51478,__wrap(object),__wrap(key))}},"statement",false,false,false));letIndex=index&&this.macroExpandAll(__node("MacroAccess",51544,38,1531,{macroName:"let",macroData:{declarable:__node("MacroAccess",51548,37,1531,__node("MacroAccess",51548,31,1531,{isMutable:"mutable",ident:__wrap(index)},"statement",false,false,false),"statement",false,false,false),value:__node("MacroAccess",51565,61,1531,{op:"-",node:__node("Const",51567,1)},"expression",false,false,false)}},"statement",false,false,false));if(this.hasFunc(body)){func=this.tmp("f",false,"function");if(value){if(value.type==="ident"){valueIdent=value.ident;}else{valueIdent=this.tmp("v",false);}}if(value&&valueIdent!==value.ident){body=__node("Block",51802,[__node("MacroAccess",51802,38,1537,{macroName:"let",macroData:{declarable:__node("MacroAccess",51815,37,1537,__node("MacroAccess",51815,31,1537,{ident:__wrap(value)},"statement",false,false,false),"statement",false,false,false),value:__wrap(valueIdent)}},"statement",false,false,false),__wrap(body)],null);}if(index){init.push(__node("MacroAccess",51891,38,1540,{macroName:"let",macroData:{declarable:__node("MacroAccess",51895,37,1540,__node("MacroAccess",51895,31,1540,{ident:__wrap(func)},"statement",false,false,false),"statement",false,false,false),value:__node("Function",51905,[__node("Param",51906,__wrap(key),void 0,false,false,void 0),__node("Param",51911,__wrap(valueIdent),void 0,false,false,void 0),__node("Param",51925,__wrap(index),void 0,false,false,void 0)],__wrap(body),true,false,false,void 0,false,[])}},"statement",false,false,false));body=__node("Call",51965,__wrap(func),[__node("This",51973),__wrap(key),__node("Access",51984,__wrap(object),__wrap(key)),__wrap(index)],false,true);}else if(value){init.push(__node("MacroAccess",52051,38,1543,{macroName:"let",macroData:{declarable:__node("MacroAccess",52055,37,1543,__node("MacroAccess",52055,31,1543,{ident:__wrap(func)},"statement",false,false,false),"statement",false,false,false),value:__node("Function",52065,[__node("Param",52066,__wrap(key),void 0,false,false,void 0),__node("Param",52071,__wrap(valueIdent),void 0,false,false,void 0)],__wrap(body),true,false,false,void 0,false,[])}},"statement",false,false,false));body=__node("Call",52117,__wrap(func),[__node("This",52125),__wrap(key),__node("Access",52136,__wrap(object),__wrap(key))],false,true);}else{init.push(__node("MacroAccess",52186,38,1546,{macroName:"let",macroData:{declarable:__node("MacroAccess",52190,37,1546,__node("MacroAccess",52190,31,1546,{ident:__wrap(func)},"statement",false,false,false),"statement",false,false,false),value:__node("Function",52200,[__node("Param",52201,__wrap(key),void 0,false,false,void 0)],__wrap(body),true,false,false,void 0,false,[])}},"statement",false,false,false));body=__node("Call",52238,__wrap(func),[__node("This",52246),__wrap(key)],false,true);}}else if(value){body=__node("Block",52295,[__wrap(letValue),__wrap(body)],null);}post=[];if(elseBody){runElse=this.tmp("else",false,"boolean");init.push(__node("MacroAccess",52433,38,1556,{macroName:"let",macroData:{declarable:__node("MacroAccess",52437,37,1556,__node("MacroAccess",52437,31,1556,{ident:__wrap(runElse)},"statement",false,false,false),"statement",false,false,false),value:__const("true")}},"statement",false,false,false));body=__node("Block",52474,[__node("MacroAccess",52474,30,1558,{left:__wrap(runElse),op:":=",right:__const("false")},"statement",false,false,false),__wrap(body)],null);post.push(__node("MacroAccess",52535,17,1561,{macroName:"if",macroData:{test:__wrap(runElse),body:__wrap(elseBody),elseIfs:[]}},"statement",false,false,false));}if(index){init.push(letIndex);body=__node("Block",52637,[__node("MacroAccess",52637,52,1567,{left:__wrap(index),op:"~+=",right:__node("Const",52656,1)},"statement",false,false,false),__wrap(body)],null);}if(own){body=__node("MacroAccess",52704,17,1572,{macroName:"if",macroData:{test:__node("MacroAccess",52714,73,1572,{left:__wrap(object),inverted:false,op:"ownskey",right:__wrap(key)},"statement",false,false,false),body:__wrap(body),elseIfs:[]}},"statement",false,false,false);}if(reducer){if(reducer==="first"){body=this.mutateLast(body||this.noop(),function(node){return __node("MacroAccess",52858,39,1577,{macroName:"return",macroData:{node:__wrap(node)}},"statement",false,false,false);});loop=this.forIn(key,object,body);return __node("MacroAccess",52930,0,1579,{macroName:"do",macroData:{body:__node("Block",52934,[__wrap(init),__wrap(loop),__wrap(elseBody)],null)}},"statement",false,false,false);}else{if(elseBody){this.error("Cannot use a for loop with an else with "+__strnum(reducer),elseBody);}if(reducer==="some"){body=this.mutateLast(body||this.noop(),function(node){return __node("MacroAccess",53191,17,1588,{macroName:"if",macroData:{test:__wrap(node),body:__node("MacroAccess",53212,39,1589,{macroName:"return",macroData:{node:__const("true")}},"statement",false,false,false),elseIfs:[]}},"statement",false,false,false);});loop=this.forIn(key,object,body);return __node("MacroAccess",53299,0,1591,{macroName:"do",macroData:{body:__node("Block",53303,[__wrap(init),__wrap(loop),__const("false")],null)}},"statement",false,false,false);}else if(reducer==="every"){body=this.mutateLast(body||this.noop(),function(node){return __node("MacroAccess",53454,17,1597,{macroName:"if",macroData:{test:__node("MacroAccess",53468,3,1597,{op:"not",node:__wrap(node)},"statement",false,false,false),body:__node("MacroAccess",53479,39,1598,{macroName:"return",macroData:{node:__const("false")}},"statement",false,false,false),elseIfs:[]}},"statement",false,false,false);});loop=this.forIn(key,object,body);return __node("MacroAccess",53567,0,1600,{macroName:"do",macroData:{body:__node("Block",53571,[__wrap(init),__wrap(loop),__const("true")],null)}},"statement",false,false,false);}else{return this.error("Unknown reducer: "+__strnum(reducer));}}}else if(this.position==="expression"){if(elseBody){this.error("Cannot use a for loop with an else as an expression",elseBody);}arr=this.tmp("arr",false,this.type(body).array());body=this.mutateLast(body||this.noop(),function(node){return __node("Call",53932,__node("Access",53932,__wrap(arr),__node("Const",53938,"push")),[__wrap(node)],false,false);});init.unshift(__node("MacroAccess",53972,38,1611,{macroName:"let",macroData:{declarable:__node("MacroAccess",53976,37,1611,__node("MacroAccess",53976,31,1611,{ident:__wrap(arr)},"statement",false,false,false),"statement",false,false,false),value:__node("Array",53983,[])}},"statement",false,false,false));loop=this.forIn(key,object,body);return __node("Block",54041,[__wrap(init),__wrap(loop),__wrap(arr)],null);}else{loop=this.forIn(key,object,body);return __node("Block",54145,[__wrap(init),__wrap(loop),__wrap(post)],null);}};}.call(this));',
          params: [
            [
              "ident",
              "reducer",
              "many",
              "?",
              "choice",
              ["const", "every"],
              ["const", "some"],
              ["const", "first"]
            ],
            ["ident", "key", "ident", "Identifier"],
            [
              "ident",
              "value",
              "many",
              "?",
              "sequence",
              ["const", ","],
              ["ident", "value", "ident", "Declarable"],
              [
                "ident",
                "index",
                "many",
                "?",
                "sequence",
                ["const", ","],
                ["this", "ident", "Identifier"]
              ]
            ],
            [
              "ident",
              "type",
              "choice",
              ["const", "of"],
              ["const", "ofall"]
            ],
            ["ident", "object", "ident", "Logic"],
            [
              "ident",
              "body",
              "choice",
              ["ident", "BodyNoEnd"],
              [
                "sequence",
                ["const", ";"],
                ["this", "ident", "Statement"]
              ]
            ],
            [
              "ident",
              "elseBody",
              "many",
              "?",
              "sequence",
              ["const", "\n"],
              ["const", "else"],
              [
                "this",
                "choice",
                ["ident", "BodyNoEnd"],
                [
                  "sequence",
                  ["const", ";"],
                  ["this", "ident", "Statement"]
                ]
              ]
            ],
            ["const", "end"]
          ],
          names: "for",
          id: 115
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node,__const){var body,current,currentStart,index,key,loop,macroData,macroName,object,type,value;macroName=macroFullData.macroName;macroData=macroFullData.macroData;key=macroData.key;value=macroData.value;type=macroData.type;object=macroData.object;current=macroData.current;currentStart=macroData.currentStart;body=macroData.body;body=this.mutateLast(body||this.noop(),function(node){return __node("MacroAccess",54494,30,1625,{left:__wrap(current),op:":=",right:__wrap(node)},"expression",false,false,false);});if(value!=null){index=value.index;}if(value!=null){value=value.value;}if(type==="of"){loop=__node("MacroAccess",54609,115,1629,{macroName:"for",macroData:{key:__wrap(key),value:{value:__node("MacroAccess",54619,37,1629,__node("MacroAccess",54619,31,1629,{ident:__wrap(value)},"statement",false,false,false),"statement",false,false,false),index:__wrap(index)},type:"of",object:__wrap(object),body:__wrap(body)}},"statement",false,false,false);}else{loop=__node("MacroAccess",54678,115,1632,{macroName:"for",macroData:{key:__wrap(key),value:{value:__node("MacroAccess",54688,37,1632,__node("MacroAccess",54688,31,1632,{ident:__wrap(value)},"statement",false,false,false),"statement",false,false,false),index:__wrap(index)},type:"ofall",object:__wrap(object),body:__wrap(body)}},"statement",false,false,false);}return __node("Block",54740,[__node("MacroAccess",54740,38,1635,{macroName:"let",macroData:{declarable:__node("MacroAccess",54749,37,1635,__node("MacroAccess",54749,31,1635,{isMutable:"mutable",ident:__wrap(current)},"statement",false,false,false),"statement",false,false,false),value:__wrap(currentStart)}},"statement",false,false,false),__wrap(loop),__wrap(current)],null);};}.call(this));',
          params: [
            ["const", "reduce"],
            ["ident", "key", "ident", "Identifier"],
            [
              "ident",
              "value",
              "many",
              "?",
              "sequence",
              ["const", ","],
              ["ident", "value", "ident", "Declarable"],
              [
                "ident",
                "index",
                "many",
                "?",
                "sequence",
                ["const", ","],
                ["this", "ident", "Identifier"]
              ]
            ],
            [
              "ident",
              "type",
              "choice",
              ["const", "of"],
              ["const", "ofall"]
            ],
            ["ident", "object", "ident", "Logic"],
            ["const", ","],
            ["ident", "current", "ident", "Identifier"],
            ["const", "="],
            ["ident", "currentStart"],
            [
              "ident",
              "body",
              "choice",
              ["ident", "Body"],
              [
                "sequence",
                ["const", ";"],
                ["this", "ident", "Statement"]
              ]
            ]
          ],
          names: "for",
          id: 116
        },
        {
          code: 'return (function(){"use strict";var __isArray,__slice,__toArray,__typeof;__isArray=typeof Array.isArray==="function"?Array.isArray:(function(){var _toString;_toString=Object.prototype.toString;return function(x){return _toString.call(x)==="[object Array]";};}());__slice=Array.prototype.slice;__toArray=function(x){if(x==null){throw TypeError("Expected an object, got "+__typeof(x));}else if(__isArray(x)){return x;}else if(typeof x==="string"){return x.split("");}else{return __slice.call(x);}};__typeof=(function(){var _toString;_toString=Object.prototype.toString;return function(o){if(o===void 0){return "Undefined";}else if(o===null){return "Null";}else{return o.constructor&&o.constructor.name||_toString.call(o).slice(8,-1);}};}());return function(macroFullData,__wrap,__node,__const){var _arr,_f,_i,catchBody,catchIdent,catchPart,current,elseBody,finallyBody,hasElse,init,macroData,macroName,runElse,tryBody,typedCatches;macroName=macroFullData.macroName;macroData=macroFullData.macroData;tryBody=macroData.tryBody;typedCatches=macroData.typedCatches;catchPart=macroData.catchPart;elseBody=macroData.elseBody;finallyBody=macroData.finallyBody;hasElse=!!elseBody;if(typedCatches.length===0&&!catchPart&&!hasElse&&!finallyBody){this.error("Must provide at least a catch, else, or finally to a try block");}if(catchPart!=null){catchIdent=catchPart.ident;}if(catchPart!=null){catchBody=catchPart.body;}if(typedCatches.length!==0){if(!catchIdent){catchIdent=typedCatches[0].ident;}current=catchBody||__node("MacroAccess",69465,11,2043,{op:"throw",node:__wrap(catchIdent)},"statement",false,false,false);for(_arr=__toArray(typedCatches), _i=_arr.length, _f=function(typeCatch){var _this,letErr,typeIdent,types,value;_this=this;typeIdent=typeCatch.ident;if(this.name(typeIdent)!==this.name(catchIdent)){letErr=__node("MacroAccess",69605,38,2046,{macroName:"let",macroData:{declarable:__node("MacroAccess",69609,37,2046,__node("MacroAccess",69609,31,2046,{ident:__wrap(typeIdent)},"statement",false,false,false),"statement",false,false,false),value:__wrap(catchIdent)}},"statement",false,false,false);}else{letErr=this.noop();}if(typeCatch.check.type==="as"){types=this.array((function(){var _arr,_arr2,_i,_len,type;for(_arr=[], _arr2=__toArray(_this.isTypeUnion(typeCatch.check.value)?_this.types(typeCatch.check.value):[typeCatch.check.value]), _i=0, _len=_arr2.length;_i<_len;++_i){type=_arr2[_i];if(_this.isTypeArray(type)){_this.error("Expected a normal type, cannot use an array type",type);}else if(_this.isTypeGeneric(type)){_this.error("Expected a normal type, cannot use a generic type",type);}else if(_this.isTypeFunction(type)){_this.error("Expected a normal type, cannot use a function type",type);}else if(_this.isTypeObject(type)){_this.error("Expected a normal type, cannot use an object type",type);}_arr.push(type);}return _arr;}()));return current=__node("MacroAccess",70372,17,2061,{macroName:"if",macroData:{test:__node("MacroAccess",70386,118,2061,{left:__wrap(catchIdent),inverted:false,op:"instanceofsome",right:__wrap(types)},"statement",false,false,false),body:__node("Block",70422,[__wrap(letErr),__wrap(typeCatch.body)],null),elseIfs:[],elseBody:__wrap(current)}},"statement",false,false,false);}else{value=typeCatch.check.value;return current=__node("MacroAccess",70590,17,2069,{macroName:"if",macroData:{test:__node("MacroAccess",70604,5,2069,{left:__wrap(catchIdent),inverted:false,op:"==",right:__wrap(value)},"statement",false,false,false),body:__node("Block",70628,[__wrap(letErr),__wrap(typeCatch.body)],null),elseIfs:[],elseBody:__wrap(current)}},"statement",false,false,false);}};_i--;){_f.call(this,_arr[_i]);}catchBody=current;}init=[];if(hasElse){runElse=this.tmp("else",false,"boolean");init.push(__node("MacroAccess",70855,38,2078,{macroName:"let",macroData:{declarable:__node("MacroAccess",70859,37,2078,__node("MacroAccess",70859,31,2078,{ident:__wrap(runElse)},"statement",false,false,false),"statement",false,false,false),value:__const("true")}},"statement",false,false,false));if(catchBody){catchBody=__node("Block",70923,[__node("MacroAccess",70923,30,2081,{left:__wrap(runElse),op:":=",right:__const("false")},"statement",false,false,false),__wrap(catchBody)],null);}else{catchIdent=this.tmp("err");catchBody=__node("Block",71044,[__node("MacroAccess",71044,30,2086,{left:__wrap(runElse),op:":=",right:__const("false")},"statement",false,false,false),__node("MacroAccess",71073,11,2087,{op:"throw",node:__wrap(catchIdent)},"statement",false,false,false)],null);}}current=tryBody;if(catchBody){current=this.tryCatch(current,catchIdent||this.tmp("err"),catchBody);}if(hasElse){current=this.tryFinally(current,__node("MacroAccess",71291,17,2094,{macroName:"if",macroData:{test:__wrap(runElse),body:__wrap(elseBody),elseIfs:[]}},"statement",false,false,false));}if(finallyBody){current=this.tryFinally(current,finallyBody);}return __node("Block",71415,[__wrap(init),__wrap(current)],null);};}.call(this));',
          params: [
            [
              "ident",
              "tryBody",
              "choice",
              ["ident", "BodyNoEnd"],
              [
                "sequence",
                ["const", ";"],
                ["this", "ident", "Statement"]
              ]
            ],
            [
              "ident",
              "typedCatches",
              "many",
              "*",
              "sequence",
              ["const", "\n"],
              ["const", "catch"],
              ["ident", "ident", "ident", "Identifier"],
              [
                "ident",
                "check",
                "choice",
                [
                  "sequence",
                  ["ident", "type", "const", "as"],
                  ["ident", "value", "ident", "Type"]
                ],
                [
                  "sequence",
                  ["ident", "type", "const", "=="],
                  ["ident", "value", "ident", "Expression"]
                ]
              ],
              [
                "ident",
                "body",
                "choice",
                ["ident", "BodyNoEnd"],
                [
                  "sequence",
                  ["const", ";"],
                  ["this", "ident", "Statement"]
                ]
              ]
            ],
            [
              "ident",
              "catchPart",
              "many",
              "?",
              "sequence",
              ["const", "\n"],
              ["const", "catch"],
              ["ident", "ident", "many", "?", "ident", "Identifier"],
              [
                "ident",
                "body",
                "choice",
                ["ident", "BodyNoEnd"],
                [
                  "sequence",
                  ["const", ";"],
                  ["this", "ident", "Statement"]
                ]
              ]
            ],
            [
              "ident",
              "elseBody",
              "many",
              "?",
              "sequence",
              ["const", "\n"],
              ["const", "else"],
              [
                "this",
                "choice",
                ["ident", "BodyNoEnd"],
                [
                  "sequence",
                  ["const", ";"],
                  ["this", "ident", "Statement"]
                ]
              ]
            ],
            [
              "ident",
              "finallyBody",
              "many",
              "?",
              "sequence",
              ["const", "\n"],
              ["const", "finally"],
              [
                "this",
                "choice",
                ["ident", "BodyNoEnd"],
                [
                  "sequence",
                  ["const", ";"],
                  ["this", "ident", "Statement"]
                ]
              ]
            ],
            ["const", "end"]
          ],
          names: "try",
          id: 119
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node,__const){var body,captureValue,elseBody,err,func,index,init,item,iterable,iterator,macroData,macroName,main,post,reducer,runElse,step,value;macroName=macroFullData.macroName;macroData=macroFullData.macroData;reducer=macroData.reducer;value=macroData.value;index=macroData.index;iterable=macroData.iterable;body=macroData.body;elseBody=macroData.elseBody;init=[];iterator=this.cache(__node("Call",72592,__node("Ident",72592,"__iter"),[__wrap(iterable)],false,false),init,"iter",false);item=this.tmp("item",false);err=this.tmp("e",true);step=[];if(index){init.push(__node("MacroAccess",72747,38,2142,{macroName:"let",macroData:{declarable:__node("MacroAccess",72751,37,2142,__node("MacroAccess",72751,31,2142,{isMutable:"mutable",ident:__wrap(index)},"statement",false,false,false),"statement",false,false,false),value:__node("Const",72769,0)}},"statement",false,false,false));step.push(__node("MacroAccess",72791,52,2143,{left:__wrap(index),op:"~+=",right:__node("Const",72803,1)},"expression",false,false,false));}captureValue=__node("Block",72836,[__node("MacroAccess",72836,38,2146,{macroName:"let",macroData:{declarable:__node("MacroAccess",72845,37,2146,__node("MacroAccess",72845,31,2146,{ident:__wrap(item)},"statement",false,false,false),"statement",false,false,false),value:__node("Call",72853,__node("Access",72853,__wrap(iterator),__node("Const",72864,"next")),[],false,false)}},"statement",false,false,false),__node("MacroAccess",72871,17,2147,{macroName:"if",macroData:{test:__node("Access",72879,__wrap(item),__node("Const",72886,"done")),body:__node("MacroAccess",72891,19,2148,{macroName:"break",macroData:{}},"statement",false,false,false),elseIfs:[]}},"statement",false,false,false),__node("MacroAccess",72905,38,2149,{macroName:"let",macroData:{declarable:__node("MacroAccess",72914,37,2149,__node("MacroAccess",72914,31,2149,{ident:__wrap(value)},"statement",false,false,false),"statement",false,false,false),value:__node("Access",72923,__wrap(item),__node("Const",72930,"value"))}},"statement",false,false,false)],null);post=[];if(elseBody&&!reducer&&this.position!=="expression"){runElse=this.tmp("else",false,"boolean");init.push(__node("MacroAccess",73088,38,2154,{macroName:"let",macroData:{declarable:__node("MacroAccess",73092,37,2154,__node("MacroAccess",73092,31,2154,{ident:__wrap(runElse)},"statement",false,false,false),"statement",false,false,false),value:__const("true")}},"statement",false,false,false));body=__node("Block",73129,[__node("MacroAccess",73129,30,2156,{left:__wrap(runElse),op:":=",right:__const("false")},"statement",false,false,false),__wrap(body)],null);post.push(__node("MacroAccess",73190,17,2159,{macroName:"if",macroData:{test:__wrap(runElse),body:__wrap(elseBody),elseIfs:[]}},"statement",false,false,false));}if(this.hasFunc(body)){func=this.tmp("f",false,"function");if(!index){init.push(__node("MacroAccess",73339,38,2165,{macroName:"let",macroData:{declarable:__node("MacroAccess",73343,37,2165,__node("MacroAccess",73343,31,2165,{ident:__wrap(func)},"statement",false,false,false),"statement",false,false,false),value:__node("MacroAccess",73353,117,2165,{op:"",node:__node("Function",73353,[__node("Param",73354,__wrap(value),void 0,false,false,void 0)],__wrap(body),true,false,false,void 0,false,[])},"expression",false,false,false)}},"statement",false,false,false));body=__node("Block",73391,[__wrap(captureValue),__node("Call",73416,__wrap(func),[__node("This",73433),__wrap(value)],false,true)],null);}else{init.push(__node("MacroAccess",73479,38,2170,{macroName:"let",macroData:{declarable:__node("MacroAccess",73483,37,2170,__node("MacroAccess",73483,31,2170,{ident:__wrap(func)},"statement",false,false,false),"statement",false,false,false),value:__node("MacroAccess",73493,117,2170,{op:"",node:__node("Function",73493,[__node("Param",73494,__wrap(value),void 0,false,false,void 0),__node("Param",73501,__wrap(index),void 0,false,false,void 0)],__wrap(body),true,false,false,void 0,false,[])},"expression",false,false,false)}},"statement",false,false,false));body=__node("Block",73539,[__wrap(captureValue),__node("Call",73564,__wrap(func),[__node("This",73581),__wrap(value),__wrap(index)],false,true)],null);}}else{body=__node("Block",73630,[__wrap(captureValue),__wrap(body)],null);}if(reducer==="every"){main=__node("MacroAccess",73714,106,2180,{macroName:"for",macroData:{reducer:"every",init:__wrap(init),test:__const("true"),step:__wrap(step),body:__wrap(body),elseBody:__wrap(elseBody)}},"expression",false,false,false);}else if(reducer==="some"){main=__node("MacroAccess",73827,106,2185,{macroName:"for",macroData:{reducer:"some",init:__wrap(init),test:__const("true"),step:__wrap(step),body:__wrap(body),elseBody:__wrap(elseBody)}},"expression",false,false,false);}else if(reducer==="first"){main=__node("MacroAccess",73940,106,2190,{macroName:"for",macroData:{reducer:"first",init:__wrap(init),test:__const("true"),step:__wrap(step),body:__wrap(body),elseBody:__wrap(elseBody)}},"expression",false,false,false);}else if(reducer==="filter"){body=this.mutateLast(body,function(node){return __node("MacroAccess",74097,17,2196,{macroName:"if",macroData:{test:__wrap(node),body:__wrap(value),elseIfs:[]}},"statement",false,false,false);});main=__node("MacroAccess",74134,106,2198,{macroName:"for",macroData:{init:__wrap(init),test:__const("true"),step:__wrap(step),body:__wrap(body),elseBody:__wrap(elseBody)}},"expression",false,false,false);}else if(this.position==="expression"){main=__node("MacroAccess",74249,106,2203,{macroName:"for",macroData:{init:__wrap(init),test:__const("true"),step:__wrap(step),body:__wrap(body),elseBody:__wrap(elseBody)}},"expression",false,false,false);}else{main=__node("Block",74336,[__node("MacroAccess",74336,106,2209,{macroName:"for",macroData:{init:__wrap(init),test:__const("true"),step:__wrap(step),body:__wrap(body)}},"statement",false,false,false),__wrap(post)],null);}return __node("MacroAccess",74409,119,2213,{macroName:"try",macroData:{tryBody:__wrap(main),typedCatches:[],finallyBody:__node("MacroAccess",74438,119,2216,{macroName:"try",macroData:{tryBody:__node("Call",74448,__node("Access",74448,__wrap(iterator),__node("Const",74466,"close")),[],false,false),typedCatches:[],catchPart:{ident:__wrap(err),body:__const("void")}}},"statement",false,false,false)}},"statement",false,false,false);};}.call(this));',
          params: [
            [
              "ident",
              "reducer",
              "many",
              "?",
              "choice",
              ["const", "every"],
              ["const", "some"],
              ["const", "first"],
              ["const", "filter"]
            ],
            ["ident", "value", "ident", "Identifier"],
            [
              "ident",
              "index",
              "many",
              "?",
              "sequence",
              ["const", ","],
              ["this", "ident", "Identifier"]
            ],
            ["const", "from"],
            ["ident", "iterable", "ident", "Logic"],
            [
              "ident",
              "body",
              "choice",
              ["ident", "BodyNoEnd"],
              [
                "sequence",
                ["const", ";"],
                ["this", "ident", "Statement"]
              ]
            ],
            [
              "ident",
              "elseBody",
              "many",
              "?",
              "sequence",
              ["const", "\n"],
              ["const", "else"],
              [
                "this",
                "choice",
                ["ident", "BodyNoEnd"],
                [
                  "sequence",
                  ["const", ";"],
                  ["this", "ident", "Statement"]
                ]
              ]
            ],
            ["const", "end"]
          ],
          names: "for",
          id: 120
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node,__const){var body,current,currentStart,index,iterator,macroData,macroName,value;macroName=macroFullData.macroName;macroData=macroFullData.macroData;value=macroData.value;index=macroData.index;iterator=macroData.iterator;current=macroData.current;currentStart=macroData.currentStart;body=macroData.body;body=this.mutateLast(body||this.noop(),function(node){return __node("MacroAccess",74757,30,2222,{left:__wrap(current),op:":=",right:__wrap(node)},"expression",false,false,false);});return __node("Block",74785,[__node("MacroAccess",74785,38,2224,{macroName:"let",macroData:{declarable:__node("MacroAccess",74794,37,2224,__node("MacroAccess",74794,31,2224,{isMutable:"mutable",ident:__wrap(current)},"statement",false,false,false),"statement",false,false,false),value:__wrap(currentStart)}},"statement",false,false,false),__node("MacroAccess",74829,120,2225,{macroName:"for",macroData:{value:__wrap(value),index:__wrap(index),iterable:__wrap(iterator),body:__wrap(body)}},"statement",false,false,false),__wrap(current)],null);};}.call(this));',
          params: [
            ["const", "reduce"],
            ["ident", "value", "ident", "Identifier"],
            [
              "ident",
              "index",
              "many",
              "?",
              "sequence",
              ["const", ","],
              ["this", "ident", "Identifier"]
            ],
            ["const", "from"],
            ["ident", "iterator", "ident", "Logic"],
            ["const", ","],
            ["ident", "current", "ident", "Identifier"],
            ["const", "="],
            ["ident", "currentStart"],
            [
              "ident",
              "body",
              "choice",
              ["ident", "Body"],
              [
                "sequence",
                ["const", ";"],
                ["this", "ident", "Statement"]
              ]
            ]
          ],
          names: "for",
          id: 121
        },
        {
          code: 'return (function(){"use strict";var __isArray,__num,__slice,__toArray,__typeof;__isArray=typeof Array.isArray==="function"?Array.isArray:(function(){var _toString;_toString=Object.prototype.toString;return function(x){return _toString.call(x)==="[object Array]";};}());__num=function(num){if(typeof num!=="number"){throw TypeError("Expected a number, got "+__typeof(num));}else{return num;}};__slice=Array.prototype.slice;__toArray=function(x){if(x==null){throw TypeError("Expected an object, got "+__typeof(x));}else if(__isArray(x)){return x;}else if(typeof x==="string"){return x.split("");}else{return __slice.call(x);}};__typeof=(function(){var _toString;_toString=Object.prototype.toString;return function(o){if(o===void 0){return "Undefined";}else if(o===null){return "Null";}else{return o.constructor&&o.constructor.name||_toString.call(o).slice(8,-1);}};}());return function(macroFullData,__wrap,__node,__const){var _arr,_arr2,_i,_i2,_len,_len2,body,case_,caseNode,caseNodes,cases,defaultCase,isFallthrough,lastNode,macroData,macroName,node,nodes,resultCases;macroName=macroFullData.macroName;macroData=macroFullData.macroData;node=macroData.node;cases=macroData.cases;defaultCase=macroData.defaultCase;resultCases=[];for(_arr=__toArray(cases), _i=0, _len=_arr.length;_i<_len;++_i){case_=_arr[_i];caseNodes=[case_.nodeHead].concat(case_.nodeTail);body=case_.body;isFallthrough=false;if(this.isBlock(body)){nodes=this.nodes(body);lastNode=nodes[__num(nodes.length)-1];if(this.isIdent(lastNode)&&this.name(lastNode)==="fallthrough"){body=this.block(nodes.slice(0,-1));isFallthrough=true;}}else if(this.isIdent(body)&&this.name(body)==="fallthrough"){body=this.noop();isFallthrough=true;}for(_arr2=__toArray(caseNodes.slice(0,-1)), _i2=0, _len2=_arr2.length;_i2<_len2;++_i2){caseNode=_arr2[_i2];resultCases.push({node:caseNode,body:this.noop(),fallthrough:true});}resultCases.push({node:caseNodes[__num(caseNodes.length)-1],body:body,fallthrough:isFallthrough});}return this["switch"](node,resultCases,defaultCase);};}.call(this));',
          params: [
            ["ident", "node", "ident", "Logic"],
            [
              "ident",
              "cases",
              "many",
              "*",
              "sequence",
              ["const", "\n"],
              ["const", "case"],
              ["ident", "nodeHead", "ident", "Logic"],
              [
                "ident",
                "nodeTail",
                "many",
                "*",
                "sequence",
                ["const", ","],
                ["this", "ident", "Logic"]
              ],
              [
                "ident",
                "body",
                "many",
                "?",
                "choice",
                ["ident", "BodyNoEnd"],
                [
                  "sequence",
                  ["const", ";"],
                  ["this", "ident", "Statement"]
                ]
              ]
            ],
            [
              "ident",
              "defaultCase",
              "many",
              "?",
              "sequence",
              ["const", "\n"],
              ["const", "default"],
              [
                "this",
                "many",
                "?",
                "choice",
                ["ident", "BodyNoEnd"],
                [
                  "sequence",
                  ["const", ";"],
                  ["this", "ident", "Statement"]
                ]
              ]
            ],
            ["const", "end"]
          ],
          names: "switch",
          id: 122
        },
        {
          code: 'return (function(){"use strict";var __isArray,__num,__slice,__toArray,__typeof;__isArray=typeof Array.isArray==="function"?Array.isArray:(function(){var _toString;_toString=Object.prototype.toString;return function(x){return _toString.call(x)==="[object Array]";};}());__num=function(num){if(typeof num!=="number"){throw TypeError("Expected a number, got "+__typeof(num));}else{return num;}};__slice=Array.prototype.slice;__toArray=function(x){if(x==null){throw TypeError("Expected an object, got "+__typeof(x));}else if(__isArray(x)){return x;}else if(typeof x==="string"){return x.split("");}else{return __slice.call(x);}};__typeof=(function(){var _toString;_toString=Object.prototype.toString;return function(o){if(o===void 0){return "Undefined";}else if(o===null){return "Null";}else{return o.constructor&&o.constructor.name||_toString.call(o).slice(8,-1);}};}());return function(macroFullData,__wrap,__node,__const){var _arr,_i,body,case_,cases,current,defaultCase,fall,isFallthrough,lastNode,macroData,macroName,nodes,result,test;macroName=macroFullData.macroName;macroData=macroFullData.macroData;cases=macroData.cases;defaultCase=macroData.defaultCase;current=defaultCase;for(_arr=__toArray(cases), _i=_arr.length;_i--;){case_=_arr[_i];test=case_.test;body=case_.body;isFallthrough=false;result=void 0;if(this.isBlock(body)){nodes=this.nodes(body);lastNode=nodes[__num(nodes.length)-1];if(this.isIdent(lastNode)&&this.name(lastNode)==="fallthrough"){body=this.block(nodes.slice(0,-1));if(this.isIf(current)){fall=this.tmp("fall",false,"boolean");result=__node("Block",76722,[__node("MacroAccess",76722,38,2271,{macroName:"let",macroData:{declarable:__node("MacroAccess",76739,37,2271,__node("MacroAccess",76739,31,2271,{isMutable:"mutable",ident:__wrap(fall)},"statement",false,false,false),"statement",false,false,false),value:__const("false")}},"statement",false,false,false),__node("MacroAccess",76762,17,2272,{macroName:"if",macroData:{test:__wrap(test),body:__node("Block",76785,[__node("MacroAccess",76785,30,2273,{left:__wrap(fall),op:":=",right:__const("true")},"statement",false,false,false),__wrap(body)],null),elseIfs:[]}},"statement",false,false,false),__node("MacroAccess",76837,17,2275,{macroName:"if",macroData:{test:__node("MacroAccess",76853,2,2275,{left:__wrap(fall),inverted:false,op:"or",right:__wrap(this.test(current))},"statement",false,false,false),body:__wrap(this.whenTrue(current)),elseIfs:[],elseBody:__wrap(this.whenFalse(current))}},"statement",false,false,false)],null);}else{result=__node("Block",77010,[__node("MacroAccess",77010,17,2281,{macroName:"if",macroData:{test:__wrap(test),body:__wrap(body),elseIfs:[]}},"statement",false,false,false),__wrap(current)],null);}}}else if(this.isIdent(body)&&this.name(body)==="fallthrough"){if(this.isIf(current)){result=__node("MacroAccess",77190,17,2286,{macroName:"if",macroData:{test:__node("MacroAccess",77193,2,2286,{left:__wrap(test),inverted:false,op:"or",right:__wrap(this.test(current))},"statement",false,false,false),body:__wrap(this.whenTrue(current)),elseIfs:[],elseBody:__wrap(this.whenFalse(current))}},"statement",false,false,false);}else{result=__node("Block",77344,[__wrap(test),__wrap(current)],null);}}current=result||__node("MacroAccess",77415,17,2295,{macroName:"if",macroData:{test:__wrap(case_.test),body:__wrap(body),elseIfs:[],elseBody:__wrap(current)}},"statement",false,false,false);}return current;};}.call(this));',
          params: [
            [
              "ident",
              "cases",
              "many",
              "*",
              "sequence",
              ["const", "\n"],
              ["const", "case"],
              ["ident", "test", "ident", "Logic"],
              [
                "ident",
                "body",
                "many",
                "?",
                "choice",
                ["ident", "BodyNoEnd"],
                [
                  "sequence",
                  ["const", ";"],
                  ["this", "ident", "Statement"]
                ]
              ]
            ],
            [
              "ident",
              "defaultCase",
              "many",
              "?",
              "sequence",
              ["const", "\n"],
              ["const", "default"],
              [
                "this",
                "many",
                "?",
                "choice",
                ["ident", "BodyNoEnd"],
                [
                  "sequence",
                  ["const", ";"],
                  ["this", "ident", "Statement"]
                ]
              ]
            ],
            ["const", "end"]
          ],
          names: "switch",
          id: 123
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node,__const){var body,call,func,macroData,macroName,params;macroName=macroFullData.macroName;macroData=macroFullData.macroData;params=macroData.params;call=macroData.call;body=macroData.body;if(!this.isCall(call)){this.error("async call expression must be a call",call);}if(body==null){body=this.noop();}if(params){params=[params.head].concat(params.tail);}else{params=[];}func=this.func(params,body,true,true);return this.call(this.callFunc(call),this.callArgs(call).concat([__node("MacroAccess",80480,126,2411,{macroName:"once!",macroData:[__node("MacroAccess",80488,117,2411,{op:"mutateFunction!",node:__wrap(func)},"expression",false,false,false)]},"expression",false,false,false)]),this.callIsNew(call),this.callIsApply(call));};}.call(this));',
          params: [
            [
              "ident",
              "params",
              "many",
              "?",
              "sequence",
              ["ident", "head", "ident", "Parameter"],
              [
                "ident",
                "tail",
                "many",
                "*",
                "sequence",
                ["const", ","],
                ["this", "ident", "Parameter"]
              ]
            ],
            ["const", "<-"],
            ["ident", "call", "ident", "Expression"],
            ["ident", "body", "ident", "DedentedBody"]
          ],
          names: "async",
          id: 127
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node,__const){var body,call,callback,error,func,macroData,macroName,params;macroName=macroFullData.macroName;macroData=macroFullData.macroData;callback=macroData.callback;params=macroData.params;call=macroData.call;body=macroData.body;if(!this.isCall(call)){this.error("async! call expression must be a call",call);}if(body==null){body=this.noop();}error=this.tmp("e",false);params=[this.param(error)].concat(params);func=this.func(params,callback==="throw"?__node("Block",80960,[__node("MacroAccess",80960,102,2425,{op:"throw?",node:__wrap(error)},"statement",false,false,false),__wrap(body)],null):__node("Block",81023,[__node("MacroAccess",81023,17,2429,{macroName:"if",macroData:{test:__node("MacroAccess",81035,20,2429,{op:"?",node:__wrap(error)},"statement",false,false,false),body:__node("MacroAccess",81044,39,2430,{macroName:"return",macroData:{node:__node("Call",81062,__wrap(callback),[__wrap(error)],false,false)}},"statement",false,false,false),elseIfs:[]}},"statement",false,false,false),__wrap(body)],null),true,true);return this.call(this.callFunc(call),this.callArgs(call).concat([__node("MacroAccess",81175,126,2434,{macroName:"once!",macroData:[__node("MacroAccess",81183,117,2434,{op:"mutateFunction!",node:__wrap(func)},"expression",false,false,false)]},"expression",false,false,false)]),this.callIsNew(call),this.callIsApply(call));};}.call(this));',
          params: [
            [
              "ident",
              "callback",
              "choice",
              ["const", "throw"],
              ["ident", "Expression"]
            ],
            [
              "ident",
              "params",
              "many",
              "*",
              "sequence",
              ["const", ","],
              ["this", "ident", "Parameter"]
            ],
            ["const", "<-"],
            ["ident", "call", "ident", "Expression"],
            ["ident", "body", "ident", "DedentedBody"]
          ],
          names: "async!",
          id: 128
        },
        {
          code: 'return (function(){"use strict";var __isArray,__num,__slice,__toArray,__typeof;__isArray=typeof Array.isArray==="function"?Array.isArray:(function(){var _toString;_toString=Object.prototype.toString;return function(x){return _toString.call(x)==="[object Array]";};}());__num=function(num){if(typeof num!=="number"){throw TypeError("Expected a number, got "+__typeof(num));}else{return num;}};__slice=Array.prototype.slice;__toArray=function(x){if(x==null){throw TypeError("Expected an object, got "+__typeof(x));}else if(__isArray(x)){return x;}else if(typeof x==="string"){return x.split("");}else{return __slice.call(x);}};__typeof=(function(){var _toString;_toString=Object.prototype.toString;return function(o){if(o===void 0){return "Undefined";}else if(o===null){return "Null";}else{return o.constructor&&o.constructor.name||_toString.call(o).slice(8,-1);}};}());return function(macroFullData,__wrap,__node,__const){var _arr,_i,_len,ident,identName,key,macroData,macroName,name,obj,path,requires,value;macroName=macroFullData.macroName;macroData=macroFullData.macroData;name=macroData.name;if(this.isConst(name)&&typeof this.value(name)!=="string"){this.error("Expected a constant string, got "+__typeof(this.value(name)),name);}if(this.isConst(name)){identName=this.value(name);if(identName.indexOf("/")!==-1){identName=identName.substring(__num(identName.lastIndexOf("/"))+1);}ident=this.ident(identName);return __node("MacroAccess",81666,38,2447,{macroName:"let",macroData:{declarable:__node("MacroAccess",81670,37,2447,__node("MacroAccess",81670,31,2447,{ident:__wrap(ident)},"statement",false,false,false),"statement",false,false,false),value:__node("Call",81679,__node("Ident",81679,"require"),[__wrap(name)],false,false)}},"statement",false,false,false);}else if(this.isIdent(name)){path=this.name(name);return __node("MacroAccess",81758,38,2450,{macroName:"let",macroData:{declarable:__node("MacroAccess",81762,37,2450,__node("MacroAccess",81762,31,2450,{ident:__wrap(name)},"statement",false,false,false),"statement",false,false,false),value:__node("Call",81770,__node("Ident",81770,"require"),[__wrap(path)],false,false)}},"statement",false,false,false);}else if(this.isObject(name)){requires=[];for(_arr=__toArray(this.pairs(name)), _i=0, _len=_arr.length;_i<_len;++_i){obj=_arr[_i];key=obj.key;value=obj.value;if(!this.isConst(key)){this.error("If providing an object to require!, all keys must be constant strings",key);}identName=this.value(key);if(identName.indexOf("/")!==-1){identName=identName.substring(__num(identName.lastIndexOf("/"))+1);}ident=this.ident(identName);if(this.isConst(value)){requires.push(__node("MacroAccess",82279,38,2462,{macroName:"let",macroData:{declarable:__node("MacroAccess",82283,37,2462,__node("MacroAccess",82283,31,2462,{ident:__wrap(ident)},"statement",false,false,false),"statement",false,false,false),value:__node("Call",82292,__node("Ident",82292,"require"),[__wrap(value)],false,false)}},"statement",false,false,false));}else if(this.isIdent(value)){path=this.name(value);requires.push(__node("MacroAccess",82400,38,2465,{macroName:"let",macroData:{declarable:__node("MacroAccess",82404,37,2465,__node("MacroAccess",82404,31,2465,{ident:__wrap(ident)},"statement",false,false,false),"statement",false,false,false),value:__node("Call",82413,__node("Ident",82413,"require"),[__wrap(path)],false,false)}},"statement",false,false,false));}else{this.error("If providing an object to require!, all values must be constant strings or idents",value);}}return this.block(requires);}else{return this.error("Expected either a constant string or ident or object",name);}};}.call(this));',
          params: [["ident", "name", "ident", "Expression"]],
          names: "require!",
          id: 129
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node,__const){var _ref,arr,body,done,err,first,init,macroData,macroName,next,rest,result,results,step,test,value;macroName=macroFullData.macroName;macroData=macroFullData.macroData;results=macroData.results;next=macroData.next;init=macroData.init;test=macroData.test;step=macroData.step;body=macroData.body;rest=macroData.rest;_ref=results!=null?results:{};err=_ref.err;result=_ref.result;if(err==null){err=this.tmp("err",true);}if(init==null){init=this.noop();}if(test==null){test=__const("true");}if(step==null){step=this.noop();}if(rest==null){rest=this.noop();}done=this.tmp("done",true,"function");if(!result){if(!step){return __node("Block",85663,[__wrap(init),__node("MacroAccess",85679,15,2576,{macroName:"let",macroData:{ident:__wrap(next),func:__node("MacroAccess",85698,117,2576,{op:"",node:__node("Function",85698,[__node("Param",85699,__wrap(err),void 0,false,false,void 0)],__node("Block",85706,[__node("MacroAccess",85706,17,2577,{macroName:"if",macroData:{test:__node("MacroAccess",85720,20,2577,{op:"?",node:__wrap(err)},"statement",false,false,false),body:__node("MacroAccess",85727,39,2578,{macroName:"return",macroData:{node:__node("Call",85747,__wrap(done),[__wrap(err)],false,false)}},"statement",false,false,false),elseIfs:[]}},"statement",false,false,false),__node("MacroAccess",85760,17,2579,{macroName:"unless",macroData:{test:__wrap(test),body:__node("MacroAccess",85785,39,2580,{macroName:"return",macroData:{node:__node("Call",85805,__wrap(done),[__const("null")],false,false)}},"statement",false,false,false),elseIfs:[]}},"statement",false,false,false),__wrap(body)],null),true,true,false,void 0,false,[])},"statement",false,false,false)}},"statement",false,false,false),__node("MacroAccess",85836,15,2582,{macroName:"let",macroData:{ident:__wrap(done),func:__node("MacroAccess",85855,117,2582,{op:"",node:__node("Function",85855,[__node("Param",85856,__wrap(err),void 0,false,false,void 0)],__wrap(rest),true,true,false,void 0,false,[])},"statement",false,false,false)}},"statement",false,false,false),__node("Call",85881,__wrap(next),[],false,false)],null);}else{first=this.tmp("first",true,"boolean");return __node("Block",85970,[__wrap(init),__node("MacroAccess",85986,38,2589,{macroName:"let",macroData:{declarable:__node("MacroAccess",85999,37,2589,__node("MacroAccess",85999,31,2589,{ident:__wrap(first)},"statement",false,false,false),"statement",false,false,false),value:__const("true")}},"statement",false,false,false),__node("MacroAccess",86014,15,2590,{macroName:"let",macroData:{ident:__wrap(next),func:__node("MacroAccess",86033,117,2590,{op:"",node:__node("Function",86033,[__node("Param",86034,__wrap(err),void 0,false,false,void 0)],__node("Block",86041,[__node("MacroAccess",86041,17,2591,{macroName:"if",macroData:{test:__node("MacroAccess",86055,20,2591,{op:"?",node:__wrap(err)},"statement",false,false,false),body:__node("MacroAccess",86062,39,2592,{macroName:"return",macroData:{node:__node("Call",86082,__wrap(done),[__wrap(err)],false,false)}},"statement",false,false,false),elseIfs:[]}},"statement",false,false,false),__node("MacroAccess",86095,17,2593,{macroName:"if",macroData:{test:__wrap(first),body:__node("MacroAccess",86117,30,2594,{left:__wrap(first),op:":=",right:__const("false")},"statement",false,false,false),elseIfs:[],elseBody:__wrap(step)}},"statement",false,false,false),__node("MacroAccess",86184,17,2597,{macroName:"unless",macroData:{test:__wrap(test),body:__node("MacroAccess",86209,39,2598,{macroName:"return",macroData:{node:__node("Call",86229,__wrap(done),[__const("null")],false,false)}},"statement",false,false,false),elseIfs:[]}},"statement",false,false,false),__wrap(body)],null),true,true,false,void 0,false,[])},"statement",false,false,false)}},"statement",false,false,false),__node("MacroAccess",86260,15,2600,{macroName:"let",macroData:{ident:__wrap(done),func:__node("MacroAccess",86279,117,2600,{op:"",node:__node("Function",86279,[__node("Param",86280,__wrap(err),void 0,false,false,void 0)],__wrap(rest),true,true,false,void 0,false,[])},"statement",false,false,false)}},"statement",false,false,false),__node("Call",86305,__wrap(next),[],false,false)],null);}}else{first=this.tmp("first",true,"boolean");value=this.tmp("value",true);arr=this.tmp("arr",true);return __node("Block",86456,[__wrap(init),__node("MacroAccess",86470,38,2609,{macroName:"let",macroData:{declarable:__node("MacroAccess",86481,37,2609,__node("MacroAccess",86481,31,2609,{ident:__wrap(first)},"statement",false,false,false),"statement",false,false,false),value:__const("true")}},"statement",false,false,false),__node("MacroAccess",86496,38,2610,{macroName:"let",macroData:{declarable:__node("MacroAccess",86507,37,2610,__node("MacroAccess",86507,31,2610,{ident:__wrap(arr)},"statement",false,false,false),"statement",false,false,false),value:__node("Array",86514,[])}},"statement",false,false,false),__node("MacroAccess",86518,15,2611,{macroName:"let",macroData:{ident:__wrap(next),func:__node("MacroAccess",86535,117,2611,{op:"",node:__node("Function",86535,[__node("Param",86536,__wrap(err),void 0,false,false,void 0),__node("Param",86541,__wrap(value),void 0,false,false,void 0)],__node("Block",86551,[__node("MacroAccess",86551,17,2612,{macroName:"if",macroData:{test:__node("MacroAccess",86563,20,2612,{op:"?",node:__wrap(err)},"statement",false,false,false),body:__node("MacroAccess",86570,39,2613,{macroName:"return",macroData:{node:__node("Call",86588,__wrap(done),[__wrap(err)],false,false)}},"statement",false,false,false),elseIfs:[]}},"statement",false,false,false),__node("MacroAccess",86601,17,2614,{macroName:"if",macroData:{test:__wrap(first),body:__node("MacroAccess",86621,30,2615,{left:__wrap(first),op:":=",right:__const("false")},"statement",false,false,false),elseIfs:[],elseBody:__node("Block",86664,[__wrap(step),__node("MacroAccess",86682,17,2618,{macroName:"if",macroData:{test:__node("MacroAccess",86696,10,2618,{left:__node("Access",86696,__node("Args",86696),__node("Const",86707,"length")),inverted:false,op:"~>",right:__node("Const",86717,1)},"statement",false,false,false),body:__node("Call",86719,__node("Access",86719,__wrap(arr),__node("Const",86738,"push")),[__wrap(value)],false,false),elseIfs:[]}},"statement",false,false,false)],null)}},"statement",false,false,false),__node("MacroAccess",86750,17,2620,{macroName:"unless",macroData:{test:__wrap(test),body:__node("MacroAccess",86773,39,2621,{macroName:"return",macroData:{node:__node("Call",86791,__wrap(done),[__const("null"),__wrap(arr)],false,false)}},"statement",false,false,false),elseIfs:[]}},"statement",false,false,false),__wrap(body)],null),true,true,false,void 0,false,[])},"statement",false,false,false)}},"statement",false,false,false),__node("MacroAccess",86826,15,2623,{macroName:"let",macroData:{ident:__wrap(done),func:__node("MacroAccess",86843,117,2623,{op:"",node:__node("Function",86843,[__node("Param",86844,__wrap(err),void 0,false,false,void 0),__node("Param",86849,__wrap(result),void 0,false,false,void 0)],__wrap(rest),true,true,false,void 0,false,[])},"statement",false,false,false)}},"statement",false,false,false),__node("Call",86876,__wrap(next),[],false,false)],null);}};}.call(this));',
          params: [
            [
              "ident",
              "results",
              "many",
              "?",
              "sequence",
              ["ident", "err", "ident", "Identifier"],
              [
                "ident",
                "result",
                "many",
                "?",
                "sequence",
                ["const", ","],
                ["this", "ident", "Identifier"]
              ],
              ["const", "<-"]
            ],
            ["ident", "next", "ident", "Identifier"],
            ["const", ","],
            [
              "ident",
              "init",
              "choice",
              ["ident", "Statement"],
              ["const", ""]
            ],
            ["const", ";"],
            [
              "ident",
              "test",
              "choice",
              ["ident", "Logic"],
              ["const", ""]
            ],
            ["const", ";"],
            [
              "ident",
              "step",
              "choice",
              ["ident", "Statement"],
              ["const", ""]
            ],
            [
              "ident",
              "body",
              "choice",
              ["ident", "BodyNoEnd"],
              [
                "sequence",
                ["const", ";"],
                ["this", "ident", "Statement"]
              ]
            ],
            ["const", "end"],
            ["ident", "rest", "ident", "DedentedBody"]
          ],
          names: "asyncfor",
          id: 130
        },
        {
          code: 'return (function(){"use strict";var __strnum,__typeof;__strnum=function(strnum){var type;type=typeof strnum;if(type==="string"){return strnum;}else if(type==="number"){return String(strnum);}else{throw TypeError("Expected a string or number, got "+__typeof(strnum));}};__typeof=(function(){var _toString;_toString=Object.prototype.toString;return function(o){if(o===void 0){return "Undefined";}else if(o===null){return "Null";}else{return o.constructor&&o.constructor.name||_toString.call(o).slice(8,-1);}};}());return function(macroFullData,__wrap,__node,__const){var _ref,array,body,end,err,hasResult,inclusive,index,init,length,lengthCalc,macroData,macroName,next,parallelism,rest,result,results,start,step,value;macroName=macroFullData.macroName;macroData=macroFullData.macroData;parallelism=macroData.parallelism;results=macroData.results;next=macroData.next;value=macroData.value;index=macroData.index;array=macroData.array;body=macroData.body;rest=macroData.rest;_ref=results!=null?results:{};err=_ref.err;result=_ref.result;hasResult=!!result;if(err==null){err=this.tmp("err",true);}init=[];if(rest==null){rest=this.noop();}value=this.macroExpand1(value);length=null;if(index){length=index.length;index=index.value;}if(parallelism==null){parallelism=__node("Const",87560,1);}if(index==null){index=this.tmp("i",true,"number");}if(this.isCall(array)&&this.isIdent(this.callFunc(array))&&this.name(this.callFunc(array))==="__range"&&!this.callIsApply(array)){if(this.isArray(value)||this.isObject(value)){this.error("Cannot assign a number to a complex declarable",value);}value=value.ident;_ref=this.callArgs(array);start=_ref[0];end=_ref[1];step=_ref[2];inclusive=_ref[3];if(this.isConst(start)){if(typeof this.value(start)!=="number"){this.error("Cannot start with a non-number: "+__strnum(this.value(start)),start);}}else{start=__node("MacroAccess",88146,60,2654,{op:"+",node:__wrap(start)},"expression",false,false,false);}if(this.isConst(end)){if(typeof this.value(end)!=="number"){this.error("Cannot end with a non-number: "+__strnum(this.value(end)),end);}}else if(this.isComplex(end)){end=this.cache(__node("MacroAccess",88344,60,2660,{op:"+",node:__wrap(end)},"expression",false,false,false),init,"end",false);}else{init.push(__node("MacroAccess",88404,60,2662,{op:"+",node:__wrap(end)},"expression",false,false,false));}if(this.isConst(step)){if(typeof this.value(step)!=="number"){this.error("Cannot step with a non-number: "+__strnum(this.value(step)),step);}}else if(this.isComplex(step)){step=this.cache(__node("MacroAccess",88607,60,2668,{op:"+",node:__wrap(step)},"expression",false,false,false),init,"step",false);}else{init.push(__node("MacroAccess",88669,60,2670,{op:"+",node:__wrap(step)},"expression",false,false,false));}body=__node("Block",88702,[__node("MacroAccess",88702,38,2673,{macroName:"let",macroData:{declarable:__node("MacroAccess",88713,37,2673,__node("MacroAccess",88713,31,2673,{ident:__wrap(value)},"statement",false,false,false),"statement",false,false,false),value:__node("MacroAccess",88722,49,2673,{left:__node("MacroAccess",88722,45,2673,{left:__wrap(index),inverted:false,op:"~*",right:__wrap(step)},"expression",false,false,false),inverted:false,op:"~+",right:__wrap(start)},"expression",false,false,false)}},"statement",false,false,false),__wrap(body)],null);lengthCalc=__node("MacroAccess",88792,17,2676,{macroName:"if",macroData:{test:__wrap(inclusive),body:__node("MacroAccess",88807,45,2677,{left:__node("MacroAccess",88816,49,2677,{left:__node("MacroAccess",88816,49,2677,{left:__wrap(end),inverted:false,op:"~-",right:__wrap(start)},"expression",false,false,false),inverted:false,op:"~+",right:__wrap(step)},"expression",false,false,false),inverted:false,op:"~\\\\",right:__wrap(step)},"statement",false,false,false),elseIfs:[],elseBody:__node("MacroAccess",88861,45,2679,{left:__node("MacroAccess",88870,49,2679,{left:__wrap(end),inverted:false,op:"~-",right:__wrap(start)},"expression",false,false,false),inverted:false,op:"~\\\\",right:__wrap(step)},"statement",false,false,false)}},"expression",false,false,false);if(!length){length=lengthCalc;}else{init.push(__node("MacroAccess",88977,38,2683,{macroName:"let",macroData:{declarable:__node("MacroAccess",88981,37,2683,__node("MacroAccess",88981,31,2683,{ident:__wrap(length)},"statement",false,false,false),"statement",false,false,false),value:__wrap(lengthCalc)}},"statement",false,false,false));}}else{array=this.cache(array,init,"arr",true);body=__node("Block",89079,[__node("MacroAccess",89079,38,2688,{macroName:"let",macroData:{declarable:__node("MacroAccess",89090,37,2688,__node("MacroAccess",89090,31,2688,{ident:__wrap(value)},"statement",false,false,false),"statement",false,false,false),value:__node("Access",89099,__wrap(array),__wrap(index))}},"statement",false,false,false),__wrap(body)],null);if(!length){length=__node("MacroAccess",89178,60,2692,{op:"+",node:__node("Access",89180,__wrap(array),__node("Const",89187,"length"))},"expression",false,false,false);}else{init.push(__node("MacroAccess",89226,38,2694,{macroName:"let",macroData:{declarable:__node("MacroAccess",89230,37,2694,__node("MacroAccess",89230,31,2694,{ident:__wrap(length)},"statement",false,false,false),"statement",false,false,false),value:__node("MacroAccess",89240,60,2694,{op:"+",node:__node("Access",89242,__wrap(array),__node("Const",89249,"length"))},"expression",false,false,false)}},"statement",false,false,false));}}return __node("Block",89269,[__wrap(init),__node("Call",89281,__node("Ident",89281,"__async"),[__node("MacroAccess",89295,60,2698,{op:"+",node:__wrap(parallelism)},"expression",false,false,false),__wrap(length),__wrap(hasResult),__node("MacroAccess",89341,117,2699,{op:"",node:__node("Function",89341,[__node("Param",89342,__wrap(index),void 0,false,false,void 0),__node("Param",89349,__wrap(next),void 0,false,false,void 0)],__wrap(body),true,true,false,void 0,false,[])},"expression",false,false,false),__node("MacroAccess",89375,17,2700,{macroName:"if",macroData:{test:__wrap(hasResult),body:__node("MacroAccess",89401,117,2701,{op:"",node:__node("Function",89401,[__node("Param",89402,__wrap(err),void 0,false,false,void 0),__node("Param",89407,__wrap(result),void 0,false,false,void 0)],__wrap(rest),true,true,false,void 0,false,[])},"statement",false,false,false),elseIfs:[],elseBody:__node("MacroAccess",89452,117,2703,{op:"",node:__node("Function",89452,[__node("Param",89453,__wrap(err),void 0,false,false,void 0)],__wrap(rest),true,true,false,void 0,false,[])},"statement",false,false,false)}},"expression",false,false,false)],false,false)],null);};}.call(this));',
          params: [
            [
              "ident",
              "parallelism",
              "many",
              "?",
              "sequence",
              ["const", "("],
              ["this", "ident", "Expression"],
              ["const", ")"]
            ],
            [
              "ident",
              "results",
              "many",
              "?",
              "sequence",
              ["ident", "err", "ident", "Identifier"],
              [
                "ident",
                "result",
                "many",
                "?",
                "sequence",
                ["const", ","],
                ["this", "ident", "Identifier"]
              ],
              ["const", "<-"]
            ],
            ["ident", "next", "ident", "Identifier"],
            ["const", ","],
            ["ident", "value", "ident", "Declarable"],
            [
              "ident",
              "index",
              "many",
              "?",
              "sequence",
              ["const", ","],
              ["ident", "value", "ident", "Identifier"],
              [
                "ident",
                "length",
                "many",
                "?",
                "sequence",
                ["const", ","],
                ["this", "ident", "Identifier"]
              ]
            ],
            ["const", "in"],
            ["ident", "array"],
            [
              "ident",
              "body",
              "choice",
              ["ident", "BodyNoEnd"],
              [
                "sequence",
                ["const", ";"],
                ["this", "ident", "Statement"]
              ]
            ],
            ["const", "end"],
            ["ident", "rest", "ident", "DedentedBody"]
          ],
          names: "asyncfor",
          id: 131
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node,__const){var _ref,body,err,index,init,key,keys,macroData,macroName,next,object,own,parallelism,rest,result,results,type,value;macroName=macroFullData.macroName;macroData=macroFullData.macroData;parallelism=macroData.parallelism;results=macroData.results;next=macroData.next;key=macroData.key;value=macroData.value;type=macroData.type;object=macroData.object;body=macroData.body;rest=macroData.rest;_ref=results!=null?results:{};err=_ref.err;result=_ref.result;own=type==="of";init=[];object=this.cache(object,init,"obj",true);if(rest==null){rest=this.noop();}index=null;if(value){index=value.index;value=this.macroExpand1(value.value);}if(value){body=__node("Block",90137,[__node("MacroAccess",90137,38,2719,{macroName:"let",macroData:{declarable:__node("MacroAccess",90148,37,2719,__node("MacroAccess",90148,31,2719,{ident:__wrap(value)},"statement",false,false,false),"statement",false,false,false),value:__node("Access",90157,__wrap(object),__wrap(key))}},"statement",false,false,false),__wrap(body)],null);}keys=this.tmp("keys",true,"stringArray");return __node("Block",90246,[__wrap(init),__node("MacroAccess",90258,38,2725,{macroName:"let",macroData:{declarable:__node("MacroAccess",90267,37,2725,__node("MacroAccess",90267,31,2725,{ident:__wrap(keys)},"statement",false,false,false),"statement",false,false,false),value:__node("MacroAccess",90275,17,2725,{macroName:"if",macroData:{test:__wrap(own),body:__node("Call",90284,__node("Ident",90284,"__keys"),[__wrap(object)],false,false),elseIfs:[],elseBody:__node("Call",90318,__node("Ident",90318,"__allkeys"),[__wrap(object)],false,false)}},"expression",false,false,false)}},"statement",false,false,false),__node("MacroAccess",90344,131,2729,{macroName:"asyncfor",macroData:{parallelism:__wrap(parallelism),results:{err:__wrap(err),result:__wrap(result)},next:__wrap(next),value:__node("MacroAccess",90396,37,2729,__node("MacroAccess",90396,31,2729,{ident:__wrap(key)},"statement",false,false,false),"statement",false,false,false),index:{value:__wrap(index)},array:__wrap(keys),body:__wrap(body),rest:__wrap(rest)}},"statement",false,false,false)],null);};}.call(this));',
          params: [
            [
              "ident",
              "parallelism",
              "many",
              "?",
              "sequence",
              ["const", "("],
              ["this", "ident", "Expression"],
              ["const", ")"]
            ],
            [
              "ident",
              "results",
              "many",
              "?",
              "sequence",
              ["ident", "err", "ident", "Identifier"],
              [
                "ident",
                "result",
                "many",
                "?",
                "sequence",
                ["const", ","],
                ["this", "ident", "Identifier"]
              ],
              ["const", "<-"]
            ],
            ["ident", "next", "ident", "Identifier"],
            ["const", ","],
            ["ident", "key", "ident", "Identifier"],
            [
              "ident",
              "value",
              "many",
              "?",
              "sequence",
              ["const", ","],
              ["ident", "value", "ident", "Declarable"],
              [
                "ident",
                "index",
                "many",
                "?",
                "sequence",
                ["const", ","],
                ["this", "ident", "Identifier"]
              ]
            ],
            [
              "ident",
              "type",
              "choice",
              ["const", "of"],
              ["const", "ofall"]
            ],
            ["ident", "object"],
            [
              "ident",
              "body",
              "choice",
              ["ident", "BodyNoEnd"],
              [
                "sequence",
                ["const", ";"],
                ["this", "ident", "Statement"]
              ]
            ],
            ["const", "end"],
            ["ident", "rest", "ident", "DedentedBody"]
          ],
          names: "asyncfor",
          id: 132
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node,__const){var _ref,body,err,hasResult,index,iterator,macroData,macroName,next,parallelism,rest,result,results,value;macroName=macroFullData.macroName;macroData=macroFullData.macroData;parallelism=macroData.parallelism;results=macroData.results;next=macroData.next;value=macroData.value;index=macroData.index;iterator=macroData.iterator;body=macroData.body;rest=macroData.rest;_ref=results!=null?results:{};err=_ref.err;result=_ref.result;hasResult=!!result;if(rest==null){rest=this.noop();}if(index==null){index=this.tmp("i",true);}if(err==null){err=this.tmp("err",true);}if(parallelism==null){parallelism=__node("Const",90948,1);}return __node("Call",90963,__node("Ident",90963,"__asyncIter"),[__node("MacroAccess",90977,60,2743,{op:"+",node:__wrap(parallelism)},"expression",false,false,false),__node("Call",90991,__node("Ident",90991,"__iter"),[__wrap(iterator)],false,false),__wrap(hasResult),__node("MacroAccess",91031,117,2744,{op:"",node:__node("Function",91031,[__node("Param",91032,__wrap(value),void 0,false,false,void 0),__node("Param",91039,__wrap(index),void 0,false,false,void 0),__node("Param",91047,__wrap(next),void 0,false,false,void 0)],__wrap(body),true,true,false,void 0,false,[])},"expression",false,false,false),__node("MacroAccess",91071,17,2745,{macroName:"if",macroData:{test:__wrap(hasResult),body:__node("MacroAccess",91095,117,2746,{op:"",node:__node("Function",91095,[__node("Param",91096,__wrap(err),void 0,false,false,void 0),__node("Param",91101,__wrap(result),void 0,false,false,void 0)],__wrap(rest),true,true,false,void 0,false,[])},"statement",false,false,false),elseIfs:[],elseBody:__node("MacroAccess",91141,117,2748,{op:"",node:__node("Function",91141,[__node("Param",91142,__wrap(err),void 0,false,false,void 0)],__wrap(rest),true,true,false,void 0,false,[])},"statement",false,false,false)}},"expression",false,false,false)],false,false);};}.call(this));',
          params: [
            [
              "ident",
              "parallelism",
              "many",
              "?",
              "sequence",
              ["const", "("],
              ["this", "ident", "Expression"],
              ["const", ")"]
            ],
            [
              "ident",
              "results",
              "many",
              "?",
              "sequence",
              ["ident", "err", "ident", "Identifier"],
              [
                "ident",
                "result",
                "many",
                "?",
                "sequence",
                ["const", ","],
                ["this", "ident", "Identifier"]
              ],
              ["const", "<-"]
            ],
            ["ident", "next", "ident", "Identifier"],
            ["const", ","],
            ["ident", "value", "ident", "Identifier"],
            [
              "ident",
              "index",
              "many",
              "?",
              "sequence",
              ["const", ","],
              ["this", "ident", "Identifier"]
            ],
            ["const", "from"],
            ["ident", "iterator"],
            [
              "ident",
              "body",
              "choice",
              ["ident", "BodyNoEnd"],
              [
                "sequence",
                ["const", ";"],
                ["this", "ident", "Statement"]
              ]
            ],
            ["const", "end"],
            ["ident", "rest", "ident", "DedentedBody"]
          ],
          names: "asyncfor",
          id: 133
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node,__const){var _ref,body,err,macroData,macroName,next,rest,result,results,step,test;macroName=macroFullData.macroName;macroData=macroFullData.macroData;results=macroData.results;next=macroData.next;test=macroData.test;step=macroData.step;body=macroData.body;rest=macroData.rest;if(macroName==="asyncuntil"){test=__node("MacroAccess",91476,3,2753,{op:"not",node:__wrap(test)},"expression",false,false,false);}if(rest==null){rest=this.noop();}_ref=results!=null?results:{};err=_ref.err;result=_ref.result;return __node("MacroAccess",91562,130,2759,{macroName:"asyncfor",macroData:{results:{err:__wrap(err),result:__wrap(result)},next:__wrap(next),test:__wrap(test),step:__wrap(step),body:__wrap(body),rest:__wrap(rest)}},"statement",false,false,false);};}.call(this));',
          params: [
            [
              "ident",
              "results",
              "many",
              "?",
              "sequence",
              ["ident", "err", "ident", "Identifier"],
              [
                "ident",
                "result",
                "many",
                "?",
                "sequence",
                ["const", ","],
                ["this", "ident", "Identifier"]
              ],
              ["const", "<-"]
            ],
            ["ident", "next", "ident", "Identifier"],
            ["const", ","],
            ["ident", "test", "ident", "Logic"],
            [
              "ident",
              "step",
              "many",
              "?",
              "sequence",
              ["const", ","],
              ["this", "ident", "Statement"]
            ],
            [
              "ident",
              "body",
              "choice",
              ["ident", "BodyNoEnd"],
              [
                "sequence",
                ["const", ";"],
                ["this", "ident", "Statement"]
              ]
            ],
            ["const", "end"],
            ["ident", "rest", "ident", "DedentedBody"]
          ],
          names: ["asyncwhile", "asyncuntil"],
          id: 134
        },
        {
          code: 'return (function(){"use strict";var __num,__typeof;__num=function(num){if(typeof num!=="number"){throw TypeError("Expected a number, got "+__typeof(num));}else{return num;}};__typeof=(function(){var _toString;_toString=Object.prototype.toString;return function(o){if(o===void 0){return "Undefined";}else if(o===null){return "Null";}else{return o.constructor&&o.constructor.name||_toString.call(o).slice(8,-1);}};}());return function(macroFullData,__wrap,__node,__const){var _ref,body,current,done,elseBody,elseIf,elseIfs,err,i,innerTest,macroData,macroName,rest,result,results,test;macroName=macroFullData.macroName;macroData=macroFullData.macroData;results=macroData.results;done=macroData.done;test=macroData.test;body=macroData.body;elseIfs=macroData.elseIfs;elseBody=macroData.elseBody;rest=macroData.rest;if(macroName==="asyncunless"){test=__node("MacroAccess",92121,3,2766,{op:"not",node:__wrap(test)},"expression",false,false,false);}_ref=results!=null?results:{};err=_ref.err;result=_ref.result;if(rest==null){rest=this.noop();}if(elseBody){current=__node("MacroAccess",92258,117,2772,{op:"",node:__node("Function",92258,[__node("Param",92259,__wrap(done),void 0,false,false,void 0)],__wrap(elseBody),true,true,false,void 0,false,[])},"expression",false,false,false);}else{current=__node("MacroAccess",92302,117,2774,{op:"",node:__node("Function",92302,[__node("Param",92303,__wrap(done),void 0,false,false,void 0)],__node("Call",92313,__wrap(done),[],false,false),true,true,false,void 0,false,[])},"expression",false,false,false);}i=__num(elseIfs.length)-1;for(;i>=0;--i){elseIf=elseIfs[i];innerTest=elseIf.test;if(elseIf.type==="unless"){innerTest=__node("MacroAccess",92528,3,2781,{op:"not",node:__wrap(innerTest)},"expression",false,false,false);}current=__node("MacroAccess",92565,17,2782,{macroName:"if",macroData:{test:__wrap(innerTest),body:__node("MacroAccess",92590,117,2783,{op:"",node:__node("Function",92590,[__node("Param",92591,__wrap(done),void 0,false,false,void 0)],__wrap(elseIf.body),true,true,false,void 0,false,[])},"statement",false,false,false),elseIfs:[],elseBody:__wrap(current)}},"statement",false,false,false);}current=__node("MacroAccess",92669,17,2787,{macroName:"if",macroData:{test:__wrap(test),body:__node("MacroAccess",92686,117,2788,{op:"",node:__node("Function",92686,[__node("Param",92687,__wrap(done),void 0,false,false,void 0)],__wrap(body),true,true,false,void 0,false,[])},"statement",false,false,false),elseIfs:[],elseBody:__wrap(current)}},"statement",false,false,false);if(!err&&!result){return __node("Call",92773,__wrap(current),[__node("MacroAccess",92791,117,2794,{op:"",node:__node("Function",92791,[],__wrap(rest),true,true,false,void 0,false,[])},"expression",false,false,false)],false,false);}else if(!result){return __node("Call",92835,__wrap(current),[__node("MacroAccess",92853,117,2797,{op:"",node:__node("Function",92853,[__node("Param",92854,__wrap(err),void 0,false,false,void 0)],__wrap(rest),true,true,false,void 0,false,[])},"expression",false,false,false)],false,false);}else{if(err==null){err=this.tmp("err",true);}return __node("Call",92919,__wrap(current),[__node("MacroAccess",92937,117,2801,{op:"",node:__node("Function",92937,[__node("Param",92938,__wrap(err),void 0,false,false,void 0),__node("Param",92943,__wrap(result),void 0,false,false,void 0)],__wrap(rest),true,true,false,void 0,false,[])},"expression",false,false,false)],false,false);}};}.call(this));',
          params: [
            [
              "ident",
              "results",
              "many",
              "?",
              "sequence",
              ["ident", "err", "ident", "Identifier"],
              [
                "ident",
                "result",
                "many",
                "?",
                "sequence",
                ["const", ","],
                ["this", "ident", "Identifier"]
              ],
              ["const", "<-"]
            ],
            ["ident", "done", "ident", "Identifier"],
            ["const", ","],
            ["ident", "test", "ident", "Logic"],
            [
              "ident",
              "body",
              "choice",
              ["ident", "BodyNoEnd"],
              [
                "sequence",
                ["const", ";"],
                ["this", "ident", "Statement"]
              ]
            ],
            [
              "ident",
              "elseIfs",
              "many",
              "*",
              "sequence",
              ["const", "\n"],
              ["const", "else"],
              [
                "ident",
                "type",
                "choice",
                ["const", "if"],
                ["const", "unless"]
              ],
              ["ident", "test", "ident", "Logic"],
              [
                "ident",
                "body",
                "choice",
                ["ident", "BodyNoEnd"],
                [
                  "sequence",
                  ["const", ";"],
                  ["this", "ident", "Statement"]
                ]
              ]
            ],
            [
              "ident",
              "elseBody",
              "many",
              "?",
              "sequence",
              ["const", "\n"],
              ["const", "else"],
              [
                "this",
                "choice",
                ["ident", "BodyNoEnd"],
                [
                  "sequence",
                  ["const", ";"],
                  ["this", "ident", "Statement"]
                ]
              ]
            ],
            ["const", "end"],
            ["ident", "rest", "ident", "DedentedBody"]
          ],
          names: ["asyncif", "asyncunless"],
          id: 135
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node,__const){var func,key,macroData,macroName;macroName=macroFullData.macroName;macroData=macroFullData.macroData;key=macroData.key;func=macroData.func;return this.def(key,func);};}.call(this));',
          params: [
            ["ident", "key", "ident", "ObjectKey"],
            ["ident", "func", "ident", "FunctionDeclaration"]
          ],
          names: "def",
          id: 136
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node,__const){var key,macroData,macroName,value;macroName=macroFullData.macroName;macroData=macroFullData.macroData;key=macroData.key;value=macroData.value;return this.def(key,value);};}.call(this));',
          params: [
            ["ident", "key", "ident", "ObjectKey"],
            ["const", "="],
            ["ident", "value", "ident", "ExpressionOrAssignment"]
          ],
          names: "def",
          id: 137
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node,__const){var key,macroData,macroName;macroName=macroFullData.macroName;macroData=macroFullData.macroData;key=macroData.key;return this.def(key,void 0);};}.call(this));',
          params: [["ident", "key", "ident", "ObjectKey"]],
          names: "def",
          id: 138
        },
        {
          code: 'return (function(){"use strict";var __isArray,__owns,__slice,__strnum,__toArray,__typeof;__isArray=typeof Array.isArray==="function"?Array.isArray:(function(){var _toString;_toString=Object.prototype.toString;return function(x){return _toString.call(x)==="[object Array]";};}());__owns=Object.prototype.hasOwnProperty;__slice=Array.prototype.slice;__strnum=function(strnum){var type;type=typeof strnum;if(type==="string"){return strnum;}else if(type==="number"){return String(strnum);}else{throw TypeError("Expected a string or number, got "+__typeof(strnum));}};__toArray=function(x){if(x==null){throw TypeError("Expected an object, got "+__typeof(x));}else if(__isArray(x)){return x;}else if(typeof x==="string"){return x.split("");}else{return __slice.call(x);}};__typeof=(function(){var _toString;_toString=Object.prototype.toString;return function(o){if(o===void 0){return "Undefined";}else if(o===null){return "Null";}else{return o.constructor&&o.constructor.name||_toString.call(o).slice(8,-1);}};}());return function(macroFullData,__wrap,__node,__const){var _arr,_i,_len,_ref,_this,assignment,body,constructorCount,ctor,declaration,displayName,generic,genericArg,genericArgs,genericCache,genericParams,hasSuperclass,hasTopLevelConstructor,i,init,instanceofLets,instanceofs,item,key,macroData,macroName,makeClassFunc,makeClassIdent,name,parts,prototype,result,self,sup,superclass,superproto;_this=this;macroName=macroFullData.macroName;macroData=macroFullData.macroData;name=macroData.name;generic=macroData.generic;superclass=macroData.superclass;body=macroData.body;if(generic!=null){genericArgs=[generic.head].concat(__toArray(generic.tail));}else{genericArgs=[];}if(this.isIdent(name)){declaration=name;}else if(this.isAccess(name)){assignment=name;if(this.isConst(this.child(name))&&typeof this.value(this.child(name))==="string"){if((_ref=this.ident(this.value(this.child(name))))!=null){name=_ref;}else{name=this.tmp("class",false,"function");}}else{name=this.tmp("class",false,"function");}}else{name=this.tmp("class",false,"function");}if(this.isIdent(superclass)&&this.name(superclass)==="Object"){superclass=null;}hasSuperclass=!!superclass;sup=superclass&&(this.isIdent(superclass)?superclass:this.tmp("super",false,"function"));init=[];if(!superclass){superproto=__node("Access",94182,__node("Ident",94182,"Object"),__node("Const",94190,"prototype"));}else{superproto=this.tmp(this.isIdent(sup)?__strnum(this.name(sup))+"_prototype":"super_prototype",false,"object");}prototype=this.tmp(this.isIdent(name)?__strnum(this.name(name))+"_prototype":"prototype",false,"object");if(superclass){init.push(__node("MacroAccess",94454,38,2841,{macroName:"let",macroData:{declarable:__node("MacroAccess",94458,37,2841,__node("MacroAccess",94458,31,2841,{ident:__wrap(superproto)},"statement",false,false,false),"statement",false,false,false),value:__node("Access",94472,__wrap(sup),__node("Const",94478,"prototype"))}},"statement",false,false,false));init.push(__node("MacroAccess",94507,38,2842,{macroName:"let",macroData:{declarable:__node("MacroAccess",94511,37,2842,__node("MacroAccess",94511,31,2842,{ident:__wrap(prototype)},"statement",false,false,false),"statement",false,false,false),value:__node("MacroAccess",94524,30,2842,{left:__node("Access",94524,__wrap(name),__node("Const",94531,"prototype")),op:":=",right:__node("Object",94543,[],__wrap(superproto))},"expression",false,false,false)}},"statement",false,false,false));init.push(__node("MacroAccess",94588,30,2843,{left:__node("Access",94588,__wrap(prototype),__node("Const",94600,"constructor")),op:":=",right:__wrap(name)},"expression",false,false,false));}else{init.push(__node("MacroAccess",94649,38,2845,{macroName:"let",macroData:{declarable:__node("MacroAccess",94653,37,2845,__node("MacroAccess",94653,31,2845,{ident:__wrap(prototype)},"statement",false,false,false),"statement",false,false,false),value:__node("Access",94666,__wrap(name),__node("Const",94673,"prototype"))}},"statement",false,false,false));}if(this.isIdent(name)){displayName=this["const"](this.name(name));}if(displayName!=null){if(genericArgs.length>0){parts=[displayName,this["const"]("<")];for(i=0, _len=genericArgs.length;i<_len;++i){genericArg=genericArgs[i];if(i>0){parts.push(this["const"](", "));}parts.push(__node("MacroAccess",94988,16,2854,{macroName:"if",macroData:{test:__node("MacroAccess",94991,8,2854,{left:__wrap(genericArg),inverted:false,op:"!~=",right:__const("null")},"expression",false,false,false),body:__node("Call",95018,__node("Ident",95018,"__name"),[__wrap(genericArg)],false,false),elseIfs:[],elseBody:__node("Const",95044,"")}},"expression",false,false,false));}parts.push(this["const"](">"));displayName=this.binaryChain("+",parts);}init.push(__node("MacroAccess",95147,30,2857,{left:__node("Access",95147,__wrap(name),__node("Const",95154,"displayName")),op:":=",right:__wrap(displayName)},"expression",false,false,false));}if(superclass){init.push(__node("If",95226,__node("Binary",95226,__node("Unary",95226,"typeof",__node("Access",95226,__wrap(sup),__node("Const",95232,"extended"))),"===",__node("Const",95226,"function")),__node("Call",95226,__node("Access",95226,__wrap(sup),__node("Const",95232,"extended")),[__wrap(name)],false,false),__node("Nothing",0),null));}function fixSupers(node){return _this.walk(node,function(node){var _arr,_arr2,_i,_len,args,child,superArg;if(_this.isSuper(node)){child=_this.superChild(node);if(child!=null){child=fixSupers(child);}for(_arr=[], _arr2=__toArray(_this.superArgs(node)), _i=0, _len=_arr2.length;_i<_len;++_i){superArg=_arr2[_i];_arr.push(fixSupers(superArg));}args=_arr;return _this.call(child!=null?__node("Access",95574,__wrap(superproto),__wrap(child)):!superclass?__node("Ident",95644,"Object"):__wrap(sup),[__node("This",95704)].concat(args),false,true);}});};body=fixSupers(this.macroExpandAll(body));constructorCount=0;this.walk(body,function(node){var key;if(_this.isDef(node)){key=_this.left(node);if(_this.isConst(key)&&_this.value(key)==="constructor"){++constructorCount;}}return;});hasTopLevelConstructor=false;if(constructorCount===1){this.walk(body,function(node){var key;if(_this.isDef(node)){key=_this.left(node);if(_this.isConst(key)&&_this.value(key)==="constructor"&&_this.isFunc(_this.right(node))&&!_this.funcIsCurried(_this.right(node))){hasTopLevelConstructor=true;}return node;}else{return node;}});}self=this.tmp("this");if(hasTopLevelConstructor){body=this.walk(body,function(node){var constructor,key,value;if(_this.isDef(node)){key=_this.left(node);if(_this.isConst(key)&&_this.value(key)==="constructor"){value=_this.right(node);constructor=_this.rewrap(_this.func(_this.funcParams(value),_this.funcBody(value),false,__node("MacroAccess",96951,16,2914,{macroName:"if",macroData:{test:__node("MacroAccess",96954,74,2914,{left:__node("Eval",96954,__node("Const",96960,"this")),inverted:false,op:"instanceof",right:__wrap(name)},"statement",false,false,false),body:__node("Eval",96989,__node("Const",96995,"this")),elseIfs:[],elseBody:__node("Object",97007,[],__wrap(prototype))}},"statement",false,false,false)),value);init.unshift(__node("MacroAccess",97068,38,2915,{macroName:"let",macroData:{declarable:__node("MacroAccess",97072,37,2915,__node("MacroAccess",97072,31,2915,{ident:__wrap(name)},"statement",false,false,false),"statement",false,false,false),value:__wrap(constructor)}},"statement",false,false,false));return _this.noop();}}else{return node;}});}else if(constructorCount!==0){ctor=this.tmp("ctor",false,"function");result=this.tmp("ref");init.push(__node("Block",97272,[__node("MacroAccess",97272,38,2923,{macroName:"let",macroData:{declarable:__node("MacroAccess",97283,37,2923,__node("MacroAccess",97283,31,2923,{isMutable:"mutable",ident:__wrap(ctor)},"statement",false,false,false),"statement",false,false,false),value:__const("void")}},"statement",false,false,false),__node("MacroAccess",97305,15,2924,{macroName:"let",macroData:{ident:__wrap(name),func:__node("MacroAccess",97322,117,2924,{op:"",node:__node("Function",97322,[],__node("Block",97325,[__node("MacroAccess",97325,38,2925,{macroName:"let",macroData:{declarable:__node("MacroAccess",97338,37,2925,__node("MacroAccess",97338,31,2925,{ident:__wrap(self)},"statement",false,false,false),"statement",false,false,false),value:__node("MacroAccess",97346,16,2925,{macroName:"if",macroData:{test:__node("MacroAccess",97349,74,2925,{left:__node("This",97349),inverted:false,op:"instanceof",right:__wrap(name)},"expression",false,false,false),body:__node("This",97376),elseIfs:[],elseBody:__node("Object",97386,[],__wrap(prototype))}},"expression",false,false,false)}},"statement",false,false,false),__node("MacroAccess",97421,17,2927,{macroName:"if",macroData:{test:__node("MacroAccess",97433,26,2927,{op:"isFunction!",node:__wrap(ctor)},"statement",false,false,false),body:__node("Block",97453,[__node("MacroAccess",97453,38,2928,{macroName:"let",macroData:{declarable:__node("MacroAccess",97468,37,2928,__node("MacroAccess",97468,31,2928,{ident:__wrap(result)},"statement",false,false,false),"statement",false,false,false),value:__node("Call",97478,__wrap(ctor),[__wrap(self),__node("Spread",97492,__node("Args",97496))],false,true)}},"statement",false,false,false),__node("MacroAccess",97506,17,2929,{macroName:"if",macroData:{test:__node("MacroAccess",97520,5,2929,{left:__node("Call",97520,__node("Ident",97520,"Object"),[__wrap(result)],false,false),inverted:false,op:"==",right:__wrap(result)},"statement",false,false,false),body:__node("MacroAccess",97548,39,2930,{macroName:"return",macroData:{node:__wrap(result)}},"statement",false,false,false),elseIfs:[]}},"statement",false,false,false)],null),elseIfs:[{type:"if",test:__wrap(hasSuperclass),body:__node("Block",97611,[__node("MacroAccess",97611,38,2932,{macroName:"let",macroData:{declarable:__node("MacroAccess",97626,37,2932,__node("MacroAccess",97626,31,2932,{ident:__wrap(result)},"statement",false,false,false),"statement",false,false,false),value:__node("Call",97636,__wrap(sup),[__wrap(self),__node("Spread",97649,__node("Args",97653))],false,true)}},"statement",false,false,false),__node("MacroAccess",97663,17,2933,{macroName:"if",macroData:{test:__node("MacroAccess",97677,5,2933,{left:__node("Call",97677,__node("Ident",97677,"Object"),[__wrap(result)],false,false),inverted:false,op:"==",right:__wrap(result)},"statement",false,false,false),body:__node("MacroAccess",97705,39,2934,{macroName:"return",macroData:{node:__wrap(result)}},"statement",false,false,false),elseIfs:[]}},"statement",false,false,false)],null)}]}},"statement",false,false,false),__wrap(self)],null),true,false,false,void 0,false,[])},"statement",false,false,false)}},"statement",false,false,false)],null));body=this.walk(body,function(node){var constructor,firstArg,key,value;if(_this.isDef(node)){key=_this.left(node);if(_this.isConst(key)&&_this.value(key)==="constructor"){value=_this.right(node);if(_this.isCall(value)&&_this.isIdent(_this.callFunc(value))&&_this.name(_this.callFunc(value))==="__curry"&&_this.callArgs(value).length===2&&_this.isFunc(_this.callArgs(value)[1])){firstArg=_this.callArgs(value)[0];constructor=_this.callArgs(value)[1];constructor=_this.rewrap(_this.func(_this.funcParams(constructor),_this.funcBody(constructor),false,__node("MacroAccess",98390,16,2948,{macroName:"if",macroData:{test:__node("MacroAccess",98393,74,2948,{left:__node("Eval",98393,__node("Const",98399,"this")),inverted:false,op:"instanceof",right:__wrap(name)},"statement",false,false,false),body:__node("Eval",98428,__node("Const",98434,"this")),elseIfs:[],elseBody:__node("Object",98446,[],__wrap(prototype))}},"statement",false,false,false),false),value);return __node("MacroAccess",98519,30,2950,{left:__wrap(ctor),op:":=",right:__node("Call",98528,__node("Ident",98528,"__curry"),[__wrap(firstArg),__wrap(constructor)],false,false)},"expression",false,false,false);}else if(_this.isFunc(value)){constructor=_this.rewrap(_this.func(_this.funcParams(value),_this.funcBody(value),false,__node("MacroAccess",98753,16,2956,{macroName:"if",macroData:{test:__node("MacroAccess",98756,74,2956,{left:__node("Eval",98756,__node("Const",98762,"this")),inverted:false,op:"instanceof",right:__wrap(name)},"statement",false,false,false),body:__node("Eval",98791,__node("Const",98797,"this")),elseIfs:[],elseBody:__node("Object",98809,[],__wrap(prototype))}},"statement",false,false,false),_this.funcIsCurried(value)),value);return __node("MacroAccess",98899,30,2958,{left:__wrap(ctor),op:":=",right:__wrap(constructor)},"expression",false,false,false);}else{return __node("MacroAccess",98957,30,2960,{left:__wrap(ctor),op:":=",right:__wrap(value)},"expression",false,false,false);}}}});}else if(!superclass){init.push(__node("MacroAccess",99029,15,2964,{macroName:"let",macroData:{ident:__wrap(name),func:__node("MacroAccess",99048,117,2964,{op:"",node:__node("Function",99048,[],__node("MacroAccess",99053,16,2964,{macroName:"if",macroData:{test:__node("MacroAccess",99056,74,2964,{left:__node("This",99056),inverted:false,op:"instanceof",right:__wrap(name)},"statement",false,false,false),body:__node("This",99083),elseIfs:[],elseBody:__node("Object",99093,[],__wrap(prototype))}},"statement",false,false,false),true,false,false,void 0,false,[])},"statement",false,false,false)}},"statement",false,false,false));}else{result=this.tmp("ref");init.push(__node("MacroAccess",99181,15,2968,{macroName:"let",macroData:{ident:__wrap(name),func:__node("MacroAccess",99200,117,2968,{op:"",node:__node("Function",99200,[],__node("Block",99203,[__node("MacroAccess",99203,38,2969,{macroName:"let",macroData:{declarable:__node("MacroAccess",99218,37,2969,__node("MacroAccess",99218,31,2969,{ident:__wrap(self)},"statement",false,false,false),"statement",false,false,false),value:__node("MacroAccess",99226,16,2969,{macroName:"if",macroData:{test:__node("MacroAccess",99229,74,2969,{left:__node("This",99229),inverted:false,op:"instanceof",right:__wrap(name)},"expression",false,false,false),body:__node("This",99256),elseIfs:[],elseBody:__node("Object",99266,[],__wrap(prototype))}},"expression",false,false,false)}},"statement",false,false,false),__node("MacroAccess",99290,38,2970,{macroName:"let",macroData:{declarable:__node("MacroAccess",99305,37,2970,__node("MacroAccess",99305,31,2970,{ident:__wrap(result)},"statement",false,false,false),"statement",false,false,false),value:__node("Call",99315,__wrap(sup),[__wrap(self),__node("Spread",99328,__node("Args",99332))],false,true)}},"statement",false,false,false),__node("MacroAccess",99342,17,2971,{macroName:"if",macroData:{test:__node("MacroAccess",99356,5,2971,{left:__node("Call",99356,__node("Ident",99356,"Object"),[__wrap(result)],false,false),inverted:false,op:"==",right:__wrap(result)},"statement",false,false,false),body:__wrap(result),elseIfs:[],elseBody:__wrap(self)}},"statement",false,false,false)],null),true,false,false,void 0,false,[])},"statement",false,false,false)}},"statement",false,false,false));}function changeDefs(node){return _this.walk(node,function(node){var _ref,key,value;if(_this.isDef(node)){key=_this.left(node);if((_ref=_this.right(node))!=null){value=_ref;}else{value=__node("MacroAccess",99593,117,2979,{op:"",node:__node("Function",99593,[],__node("MacroAccess",99595,11,2979,{op:"throw",node:__node("Call",99601,__node("Ident",99601,"Error"),[__node("MacroAccess",99608,69,2979,{left:__node("MacroAccess",99608,69,2979,{left:__node("MacroAccess",99608,69,2979,{left:__node("MacroAccess",99608,69,2979,{left:__node("Const",99608,"Not implemented: "),op:"",right:__node("Call",99628,__node("Ident",99628,"__name"),[__node("Access",99635,__node("This",99635),__node("Const",99636,"constructor"))],false,false)},"expression",false,false,false),op:"",right:__node("Const",99608,".")},"expression",false,false,false),op:"",right:__wrap(key)},"expression",false,false,false),op:"",right:__node("Const",99608,"()")},"expression",false,false,false)],false,false)},"statement",false,false,false),true,false,false,void 0,false,[])},"expression",false,false,false);}return changeDefs(__node("MacroAccess",99684,30,2980,{left:__node("Access",99684,__wrap(prototype),__wrap(key)),op:":=",right:__wrap(value)},"expression",false,false,false));}});};body=changeDefs(body);body=this.walk(body,function(node){if(_this.isFunc(node)){if(!_this.funcIsBound(node)){return node;}}else if(_this.isThis(node)){return name;}});result=__node("MacroAccess",99929,104,2990,{macroName:"do",macroData:{locals:{ident:__wrap(sup),value:__wrap(superclass),rest:[]},body:__node("Block",99952,[__wrap(init),__wrap(body),__node("MacroAccess",99976,39,2993,{macroName:"return",macroData:{node:__wrap(name)}},"statement",false,false,false)],null)}},"statement",false,false,false);if(genericArgs.length>0){genericCache=this.tmp("cache",false,"object");for(_arr=[], _i=0, _len=genericArgs.length;_i<_len;++_i){genericArg=genericArgs[_i];_arr.push(this.param(genericArg));}genericParams=_arr;makeClassIdent=this.tmp("make",false,"function");instanceofs={};for(_i=0, _len=genericArgs.length;_i<_len;++_i){genericArg=genericArgs[_i];name=this.name(genericArg);key=this.tmp("instanceof_"+__strnum(name),false,"function");instanceofs[name]={key:key,"let":__node("MacroAccess",100451,38,3005,{macroName:"let",macroData:{declarable:__node("MacroAccess",100455,37,3005,__node("MacroAccess",100455,31,3005,{ident:__wrap(key)},"statement",false,false,false),"statement",false,false,false),value:__node("Call",100462,__node("Ident",100462,"__getInstanceof"),[__wrap(genericArg)],false,false)}},"statement",false,false,false),used:false};}result=this.walk(this.macroExpandAll(result),function(node){var func,left,name,right;if(_this.isBinary(node)&&_this.op(node)==="instanceof"){right=_this.right(node);if(_this.isIdent(right)){name=_this.name(right);if(__owns.call(instanceofs,name)){func=instanceofs[name].key;instanceofs[name].used=true;left=_this.left(node);return __node("Call",100936,__wrap(func),[__wrap(left)],false,false);}}}});_arr=[];for(name in instanceofs){if(__owns.call(instanceofs,name)){item=instanceofs[name];if(item.used){_arr.push(item["let"]);}}}instanceofLets=_arr;if(instanceofLets.length){result=__node("Block",101102,[__wrap(instanceofLets),__wrap(result)],null);}makeClassFunc=this.func(genericParams,result,true,false);result=__node("Call",101237,__node("Ident",101237,"__genericFunc"),[__wrap(genericArgs.length),__wrap(makeClassFunc)],false,false);}if(declaration!=null){return __node("MacroAccess",101328,38,3029,{macroName:"let",macroData:{declarable:__node("MacroAccess",101332,37,3029,__node("MacroAccess",101332,31,3029,{ident:__wrap(declaration)},"statement",false,false,false),"statement",false,false,false),value:__wrap(result)}},"statement",false,false,false);}else if(assignment!=null){return __node("MacroAccess",101390,30,3031,{left:__wrap(assignment),op:":=",right:__wrap(result)},"expression",false,false,false);}else{return result;}};}.call(this));',
          params: [
            ["ident", "name", "many", "?", "ident", "SimpleAssignable"],
            [
              "ident",
              "generic",
              "many",
              "?",
              "sequence",
              ["const", "<"],
              ["ident", "head", "ident", "Identifier"],
              [
                "ident",
                "tail",
                "many",
                "*",
                "sequence",
                ["const", ","],
                ["this", "ident", "Identifier"]
              ],
              ["const", ">"]
            ],
            [
              "ident",
              "superclass",
              "many",
              "?",
              "sequence",
              ["const", "extends"],
              ["this"]
            ],
            ["ident", "body", "many", "?", "ident", "Body"]
          ],
          names: "class",
          id: 139
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node,__const){var _this,macroData,macroName,node;_this=this;macroName=macroFullData.macroName;macroData=macroFullData.macroData;node=macroData.node;if(!this.inGenerator){this.error("Can only use yield in a generator function");}return this.mutateLast(node||this.noop(),function(n){return _this["yield"](n);},true);};}.call(this));',
          params: [["ident", "node", "many", "?", "ident", "Expression"]],
          names: "yield",
          id: 140
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node,__const){var err,index,init,item,iterator,length,macroData,macroName,node,received,send;macroName=macroFullData.macroName;macroData=macroFullData.macroData;node=macroData.node;if(!this.inGenerator){this.error("Can only use yield* in a generator function");}init=[];if(this.isType(node,"arrayLike")){index=this.tmp("i",false,"number");init.push(__node("MacroAccess",101860,38,3048,{macroName:"let",macroData:{declarable:__node("MacroAccess",101864,37,3048,__node("MacroAccess",101864,31,3048,{ident:__wrap(index)},"statement",false,false,false),"statement",false,false,false),value:__node("Const",101874,0)}},"statement",false,false,false));length=this.tmp("len",false,"number");node=this.cache(node,init,"arr",false);init.push(__node("MacroAccess",101985,38,3051,{macroName:"let",macroData:{declarable:__node("MacroAccess",101989,37,3051,__node("MacroAccess",101989,31,3051,{ident:__wrap(length)},"statement",false,false,false),"statement",false,false,false),value:__node("Access",101999,__wrap(node),__node("Const",102006,"length"))}},"statement",false,false,false));return __node("Block",102023,[__node("MacroAccess",102023,106,3053,{macroName:"for",macroData:{init:__wrap(init),test:__node("MacroAccess",102041,9,3053,{left:__wrap(index),inverted:false,op:"~<",right:__wrap(length)},"statement",false,false,false),step:__node("MacroAccess",102060,103,3053,{left:__wrap(index),op:"+=",right:__node("Const",102071,1)},"expression",false,false,false),body:__node("MacroAccess",102073,140,3054,{macroName:"yield",macroData:{node:__node("Access",102088,__wrap(node),__wrap(index))}},"statement",false,false,false)}},"statement",false,false,false),__const("void")],null);}else{iterator=this.cache(__node("Call",102157,__node("Ident",102157,"__iter"),[__wrap(node)],false,false),init,"iter",false);err=this.tmp("e",true);send=this.tmp("send");item=this.tmp("item");received=this.tmp("tmp");return __node("Block",102319,[__wrap(init),__node("MacroAccess",102333,38,3064,{macroName:"let",macroData:{declarable:__node("MacroAccess",102344,37,3064,__node("MacroAccess",102344,31,3064,{isMutable:"mutable",ident:__wrap(received)},"statement",false,false,false),"statement",false,false,false),value:__const("void")}},"statement",false,false,false),__node("MacroAccess",102370,38,3065,{macroName:"let",macroData:{declarable:__node("MacroAccess",102381,37,3065,__node("MacroAccess",102381,31,3065,{isMutable:"mutable",ident:__wrap(send)},"statement",false,false,false),"statement",false,false,false),value:__const("true")}},"statement",false,false,false),__node("MacroAccess",102412,108,3067,{macroName:"while",macroData:{test:__const("true"),body:__node("Block",102431,[__node("MacroAccess",102431,38,3068,{macroName:"let",macroData:{declarable:__node("MacroAccess",102444,37,3068,__node("MacroAccess",102444,31,3068,{ident:__wrap(item)},"statement",false,false,false),"statement",false,false,false),value:__node("MacroAccess",102452,16,3068,{macroName:"if",macroData:{test:__wrap(send),body:__node("Call",102466,__node("Access",102466,__wrap(iterator),__node("Const",102477,"send")),[__wrap(received)],false,false),elseIfs:[],elseBody:__node("Call",102497,__node("Access",102497,__wrap(iterator),__node("Const",102508,"throw")),[__wrap(received)],false,false)}},"expression",false,false,false)}},"statement",false,false,false),__node("MacroAccess",102525,17,3069,{macroName:"if",macroData:{test:__node("Access",102537,__wrap(item),__node("Const",102544,"done")),body:__node("MacroAccess",102549,19,3070,{macroName:"break",macroData:{}},"statement",false,false,false),elseIfs:[]}},"statement",false,false,false),__node("MacroAccess",102567,119,3071,{macroName:"try",macroData:{tryBody:__node("Block",102581,[__node("MacroAccess",102581,30,3072,{left:__wrap(received),op:":=",right:__node("MacroAccess",102605,140,3072,{macroName:"yield",macroData:{node:__node("Access",102611,__wrap(item),__node("Const",102618,"value"))}},"expression",false,false,false)},"statement",false,false,false),__node("MacroAccess",102624,30,3073,{left:__wrap(send),op:":=",right:__const("true")},"statement",false,false,false)],null),typedCatches:[],catchPart:{ident:__wrap(err),body:__node("Block",102671,[__node("MacroAccess",102671,30,3075,{left:__wrap(received),op:":=",right:__wrap(err)},"statement",false,false,false),__node("MacroAccess",102701,30,3076,{left:__wrap(send),op:":=",right:__const("false")},"statement",false,false,false)],null)}}},"statement",false,false,false)],null)}},"statement",false,false,false),__node("MacroAccess",102728,119,3077,{macroName:"try",macroData:{tryBody:__node("Call",102740,__node("Access",102740,__wrap(iterator),__node("Const",102760,"close")),[],false,false),typedCatches:[],catchPart:{ident:__wrap(err),body:__const("void")}}},"statement",false,false,false),__node("Access",102802,__wrap(item),__node("Const",102816,"value"))],null);}};}.call(this));',
          params: [["ident", "node", "ident", "Expression"]],
          names: "yield*",
          id: 141
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node,__const){var macroData,macroName,node,rest;macroName=macroFullData.macroName;macroData=macroFullData.macroData;node=macroData.node;rest=macroData.rest;if(rest==null){rest=this.noop();}return __node("Block",102917,[__wrap(rest),__node("MacroAccess",102929,39,3088,{macroName:"return",macroData:{node:__wrap(node)}},"statement",false,false,false)],null);};}.call(this));',
          params: [
            ["ident", "node", "ident", "Expression"],
            ["ident", "rest", "ident", "DedentedBody"]
          ],
          names: "returning",
          id: 142
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node,__const){var label,macroData,macroName,node;macroName=macroFullData.macroName;macroData=macroFullData.macroData;label=macroData.label;node=macroData.node;return this.withLabel(node,label);};}.call(this));',
          params: [
            ["ident", "label", "ident", "Identifier"],
            [
              "ident",
              "node",
              "choice",
              ["ident", "Statement"],
              ["ident", "Body"]
            ]
          ],
          names: "label!",
          id: 145
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node,__const){var macroData,macroName,node,sync;macroName=macroFullData.macroName;macroData=macroFullData.macroData;sync=macroData.sync;node=macroData.node;if(this.isFunc(node)&&!this.funcIsGenerator(node)){this.error("promise! must be used with a generator function",node);}if(sync&&this.isFunc(node)){this.error("Use .sync() to retrieve asynchronously",sync);}if(!sync||this.isConst(sync)&&!this.value(sync)){return __node("Call",118220,__node("Ident",118220,"__promise"),[__wrap(node)],false,false);}else{return __node("Call",118257,__node("Ident",118257,"__promise"),[__wrap(node),__wrap(sync)],false,false);}};}.call(this));',
          params: [
            [
              "ident",
              "sync",
              "many",
              "?",
              "sequence",
              ["const", "("],
              ["this", "ident", "Expression"],
              ["const", ")"]
            ],
            ["ident", "node", "ident", "Expression"]
          ],
          names: "promise!",
          id: 154
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node,__const){var body,func,macroData,macroName,sync;macroName=macroFullData.macroName;macroData=macroFullData.macroData;sync=macroData.sync;body=macroData.body;func=this.rewrap(this.func([],body,true,true,false,null,true),body);if(!sync||this.isConst(sync)&&!this.value(sync)){return __node("Call",118537,__node("Ident",118537,"__generatorToPromise"),[__node("Call",118561,__wrap(func),[],false,false)],false,false);}else{return __node("Call",118589,__node("Ident",118589,"__generatorToPromise"),[__node("Call",118613,__wrap(func),[],false,false),__wrap(sync)],false,false);}};}.call(this));',
          params: [
            [
              "ident",
              "sync",
              "many",
              "?",
              "sequence",
              ["const", "("],
              ["this", "ident", "Expression"],
              ["const", ")"]
            ],
            ["ident", "body", "ident", "GeneratorBody"]
          ],
          names: "promise!",
          id: 155
        },
        {
          code: 'return (function(){"use strict";var __strnum,__typeof;__strnum=function(strnum){var type;type=typeof strnum;if(type==="string"){return strnum;}else if(type==="number"){return String(strnum);}else{throw TypeError("Expected a string or number, got "+__typeof(strnum));}};__typeof=(function(){var _toString;_toString=Object.prototype.toString;return function(o){if(o===void 0){return "Undefined";}else if(o===null){return "Null";}else{return o.constructor&&o.constructor.name||_toString.call(o).slice(8,-1);}};}());return function(macroFullData,__wrap,__node,__const){var _ref,array,body,end,inclusive,index,init,length,lengthCalc,macroData,macroName,parallelism,start,step,value;macroName=macroFullData.macroName;macroData=macroFullData.macroData;parallelism=macroData.parallelism;value=macroData.value;index=macroData.index;array=macroData.array;body=macroData.body;init=[];value=this.macroExpand1(value);length=null;if(index){length=index.length;index=index.value;}if(parallelism==null){parallelism=__node("Const",124946,1);}if(index==null){index=this.tmp("i",true,"number");}if(this.isCall(array)&&this.isIdent(this.callFunc(array))&&this.name(this.callFunc(array))==="__range"&&!this.callIsApply(array)){if(this.isArray(value)||this.isObject(value)){this.error("Cannot assign a number to a complex declarable",value);}value=value.ident;_ref=this.callArgs(array);start=_ref[0];end=_ref[1];step=_ref[2];inclusive=_ref[3];if(this.isConst(start)){if(typeof this.value(start)!=="number"){this.error("Cannot start with a non-number: "+__strnum(this.value(start)),start);}}else{start=__node("MacroAccess",125532,60,3879,{op:"+",node:__wrap(start)},"expression",false,false,false);}if(this.isConst(end)){if(typeof this.value(end)!=="number"){this.error("Cannot end with a non-number: "+__strnum(this.value(end)),end);}}else if(this.isComplex(end)){end=this.cache(__node("MacroAccess",125730,60,3885,{op:"+",node:__wrap(end)},"expression",false,false,false),init,"end",false);}else{init.push(__node("MacroAccess",125790,60,3887,{op:"+",node:__wrap(end)},"expression",false,false,false));}if(this.isConst(step)){if(typeof this.value(step)!=="number"){this.error("Cannot step with a non-number: "+__strnum(this.value(step)),step);}}else if(this.isComplex(step)){step=this.cache(__node("MacroAccess",125993,60,3893,{op:"+",node:__wrap(step)},"expression",false,false,false),init,"step",false);}else{init.push(__node("MacroAccess",126055,60,3895,{op:"+",node:__wrap(step)},"expression",false,false,false));}body=__node("Block",126088,[__node("MacroAccess",126088,38,3898,{macroName:"let",macroData:{declarable:__node("MacroAccess",126099,37,3898,__node("MacroAccess",126099,31,3898,{ident:__wrap(value)},"statement",false,false,false),"statement",false,false,false),value:__node("MacroAccess",126108,49,3898,{left:__node("MacroAccess",126108,45,3898,{left:__wrap(index),inverted:false,op:"~*",right:__wrap(step)},"expression",false,false,false),inverted:false,op:"~+",right:__wrap(start)},"expression",false,false,false)}},"statement",false,false,false),__wrap(body)],null);lengthCalc=__node("MacroAccess",126178,17,3901,{macroName:"if",macroData:{test:__wrap(inclusive),body:__node("MacroAccess",126193,45,3902,{left:__node("MacroAccess",126202,49,3902,{left:__node("MacroAccess",126202,49,3902,{left:__wrap(end),inverted:false,op:"~-",right:__wrap(start)},"expression",false,false,false),inverted:false,op:"~+",right:__wrap(step)},"expression",false,false,false),inverted:false,op:"~\\\\",right:__wrap(step)},"statement",false,false,false),elseIfs:[],elseBody:__node("MacroAccess",126247,45,3904,{left:__node("MacroAccess",126256,49,3904,{left:__wrap(end),inverted:false,op:"~-",right:__wrap(start)},"expression",false,false,false),inverted:false,op:"~\\\\",right:__wrap(step)},"statement",false,false,false)}},"expression",false,false,false);if(!length){length=lengthCalc;}else{init.push(__node("MacroAccess",126363,38,3908,{macroName:"let",macroData:{declarable:__node("MacroAccess",126367,37,3908,__node("MacroAccess",126367,31,3908,{ident:__wrap(length)},"statement",false,false,false),"statement",false,false,false),value:__wrap(lengthCalc)}},"statement",false,false,false));}}else{array=this.cache(array,init,"arr",true);body=__node("Block",126465,[__node("MacroAccess",126465,38,3913,{macroName:"let",macroData:{declarable:__node("MacroAccess",126476,37,3913,__node("MacroAccess",126476,31,3913,{ident:__wrap(value)},"statement",false,false,false),"statement",false,false,false),value:__node("Access",126485,__wrap(array),__wrap(index))}},"statement",false,false,false),__wrap(body)],null);if(!length){length=__node("MacroAccess",126564,60,3917,{op:"+",node:__node("Access",126566,__wrap(array),__node("Const",126573,"length"))},"expression",false,false,false);}else{init.push(__node("MacroAccess",126612,38,3919,{macroName:"let",macroData:{declarable:__node("MacroAccess",126616,37,3919,__node("MacroAccess",126616,31,3919,{ident:__wrap(length)},"statement",false,false,false),"statement",false,false,false),value:__node("MacroAccess",126626,60,3919,{op:"+",node:__node("Access",126628,__wrap(array),__node("Const",126635,"length"))},"expression",false,false,false)}},"statement",false,false,false));}}return __node("Block",126655,[__wrap(init),__node("Call",126667,__node("Ident",126667,"__promiseLoop"),[__node("MacroAccess",126688,60,3923,{op:"+",node:__wrap(parallelism)},"expression",false,false,false),__wrap(length),__node("Call",126711,__node("Ident",126711,"__promise"),[__node("MacroAccess",126723,117,3923,{op:"",node:__node("Function",126723,[__node("Param",126724,__wrap(index),void 0,false,false,void 0)],__wrap(body),true,false,false,void 0,true,[])},"expression",false,false,false)],false,false)],false,false)],null);};}.call(this));',
          params: [
            ["const", "("],
            ["ident", "parallelism", "ident", "Expression"],
            ["const", ")"],
            ["ident", "value", "ident", "Declarable"],
            [
              "ident",
              "index",
              "many",
              "?",
              "sequence",
              ["const", ","],
              ["ident", "value", "ident", "Identifier"],
              [
                "ident",
                "length",
                "many",
                "?",
                "sequence",
                ["const", ","],
                ["this", "ident", "Identifier"]
              ]
            ],
            ["const", "in"],
            ["ident", "array"],
            ["ident", "body", "ident", "GeneratorBody"]
          ],
          names: "promisefor",
          id: 163
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node,__const){var body,index,init,key,keys,macroData,macroName,object,own,parallelism,type,value;macroName=macroFullData.macroName;macroData=macroFullData.macroData;parallelism=macroData.parallelism;key=macroData.key;value=macroData.value;type=macroData.type;object=macroData.object;body=macroData.body;own=type==="of";init=[];object=this.cache(object,init,"obj",true);index=null;if(value){index=value.index;value=this.macroExpand1(value.value);}if(value){body=__node("Block",127202,[__node("MacroAccess",127202,38,3936,{macroName:"let",macroData:{declarable:__node("MacroAccess",127215,37,3936,__node("MacroAccess",127215,31,3936,{ident:__wrap(value)},"statement",false,false,false),"statement",false,false,false),value:__node("Access",127224,__wrap(object),__wrap(key))}},"statement",false,false,false),__wrap(body)],null);}keys=this.tmp("keys",true,"stringArray");return __node("Block",127319,[__wrap(init),__node("MacroAccess",127333,38,3942,{macroName:"let",macroData:{declarable:__node("MacroAccess",127344,37,3942,__node("MacroAccess",127344,31,3942,{ident:__wrap(keys)},"statement",false,false,false),"statement",false,false,false),value:__node("MacroAccess",127352,17,3942,{macroName:"if",macroData:{test:__wrap(own),body:__node("Call",127361,__node("Ident",127361,"__keys"),[__wrap(object)],false,false),elseIfs:[],elseBody:__node("Call",127399,__node("Ident",127399,"__allkeys"),[__wrap(object)],false,false)}},"expression",false,false,false)}},"statement",false,false,false),__node("MacroAccess",127427,163,3946,{macroName:"promisefor",macroData:{parallelism:__wrap(parallelism),value:__node("MacroAccess",127459,37,3946,__node("MacroAccess",127459,31,3946,{ident:__wrap(key)},"statement",false,false,false),"statement",false,false,false),index:{value:__wrap(index)},array:__wrap(keys),body:__wrap(body)}},"statement",false,false,false)],null);};}.call(this));',
          params: [
            ["const", "("],
            ["ident", "parallelism", "ident", "Expression"],
            ["const", ")"],
            ["ident", "key", "ident", "Identifier"],
            [
              "ident",
              "value",
              "many",
              "?",
              "sequence",
              ["const", ","],
              ["ident", "value", "ident", "Declarable"],
              [
                "ident",
                "index",
                "many",
                "?",
                "sequence",
                ["const", ","],
                ["this", "ident", "Identifier"]
              ]
            ],
            [
              "ident",
              "type",
              "choice",
              ["const", "of"],
              ["const", "ofall"]
            ],
            ["ident", "object"],
            ["ident", "body", "ident", "GeneratorBody"]
          ],
          names: "promisefor",
          id: 164
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node,__const){var body,index,iterator,macroData,macroName,parallelism,value;macroName=macroFullData.macroName;macroData=macroFullData.macroData;parallelism=macroData.parallelism;value=macroData.value;index=macroData.index;iterator=macroData.iterator;body=macroData.body;if(index==null){index=this.tmp("i",true);}return __node("Call",127685,__node("Ident",127685,"__promiseIter"),[__node("MacroAccess",127706,60,3953,{op:"+",node:__wrap(parallelism)},"expression",false,false,false),__node("Call",127720,__node("Ident",127720,"__iter"),[__wrap(iterator)],false,false),__node("Call",127739,__node("Ident",127739,"__promise"),[__node("MacroAccess",127751,117,3953,{op:"",node:__node("Function",127751,[__node("Param",127752,__wrap(value),void 0,false,false,void 0),__node("Param",127759,__wrap(index),void 0,false,false,void 0)],__wrap(body),true,false,false,void 0,true,[])},"expression",false,false,false)],false,false)],false,false);};}.call(this));',
          params: [
            ["const", "("],
            ["ident", "parallelism", "ident", "Expression"],
            ["const", ")"],
            ["ident", "value", "ident", "Identifier"],
            [
              "ident",
              "index",
              "many",
              "?",
              "sequence",
              ["const", ","],
              ["this", "ident", "Identifier"]
            ],
            ["const", "from"],
            ["ident", "iterator"],
            ["ident", "body", "ident", "GeneratorBody"]
          ],
          names: "promisefor",
          id: 165
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node,__const){var macroData,macroName;macroName=macroFullData.macroName;macroData=macroFullData.macroData;return this["const"](this.line());};}.call(this));',
          options: {type: "number"},
          params: [["const", ""]],
          names: "__LINE__",
          id: 166
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node,__const){var macroData,macroName;macroName=macroFullData.macroName;macroData=macroFullData.macroData;return this["const"](this.column());};}.call(this));',
          options: {type: "number"},
          params: [["const", ""]],
          names: "__COLUMN__",
          id: 167
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node,__const){var macroData,macroName;macroName=macroFullData.macroName;macroData=macroFullData.macroData;return this["const"](this.file());};}.call(this));',
          options: {type: "string"},
          params: [["const", ""]],
          names: "__FILE__",
          id: 168
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node,__const){var macroData,macroName;macroName=macroFullData.macroName;macroData=macroFullData.macroData;return this["const"](new Date().getTime());};}.call(this));',
          options: {type: "number"},
          params: [["const", ""]],
          names: "__DATEMSEC__",
          id: 169
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node,__const){var macroData,macroName;macroName=macroFullData.macroName;macroData=macroFullData.macroData;return this["const"](this.version());};}.call(this));',
          options: {type: "string"},
          params: [["const", ""]],
          names: "__VERSION__",
          id: 170
        }
      ],
      binaryOperator: [
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;return this.binary(left,"&&",right);};}.call(this));',
          operators: "and",
          options: {precedence: 1},
          id: 1
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;return this.binary(left,"||",right);};}.call(this));',
          operators: "or",
          options: {precedence: 1},
          id: 2
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;return this.binary(left,"===",right);};}.call(this));',
          operators: "==",
          options: {precedence: 2, maximum: 1, type: "boolean"},
          id: 5
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;return __node("MacroAccess",1163,3,43,{op:"not",node:__node("MacroAccess",1169,5,43,{left:__wrap(left),inverted:false,op:"==",right:__wrap(right)},"expression",false,false,false)},"expression",false,false,false);};}.call(this));',
          operators: "!=",
          options: {precedence: 2, maximum: 1, type: "boolean"},
          id: 6
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;return this.binary(left,"==",right);};}.call(this));',
          operators: "~=",
          options: {precedence: 2, maximum: 1, type: "boolean"},
          id: 7
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;return __node("MacroAccess",1369,3,49,{op:"not",node:__node("MacroAccess",1375,7,49,{left:__wrap(left),inverted:false,op:"~=",right:__wrap(right)},"expression",false,false,false)},"expression",false,false,false);};}.call(this));',
          operators: "!~=",
          options: {precedence: 2, maximum: 1, type: "boolean"},
          id: 8
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;return this.binary(left,op==="~<"&&"<"||"<=",right);};}.call(this));',
          operators: ["~<", "~<="],
          options: {precedence: 2, maximum: 1, type: "boolean"},
          id: 9
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;return op==="~>"&&__node("MacroAccess",1694,3,57,{op:"not",node:__node("MacroAccess",1700,9,57,{left:__wrap(left),inverted:false,op:"~<=",right:__wrap(right)},"expression",false,false,false)},"expression",false,false,false)||__node("MacroAccess",1726,3,57,{op:"not",node:__node("MacroAccess",1732,9,57,{left:__wrap(left),inverted:false,op:"~<",right:__wrap(right)},"expression",false,false,false)},"expression",false,false,false);};}.call(this));',
          operators: ["~>", "~>="],
          options: {precedence: 2, maximum: 1, type: "boolean"},
          id: 10
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;if(this.hasType(left,"numeric")&&this.hasType(right,"numeric")){return this.binary(this.binary(this["const"](""),"+",left),"+",right);}else if(this.isConst(left)&&this.value(left)===""&&this.isType(right,"string")){return right;}else if(this.isConst(right)&&this.value(right)===""&&this.isType(left,"string")){return left;}else{return this.binary(left,"+",right);}};}.call(this));',
          operators: "~&",
          options: {precedence: 7, type: "string"},
          id: 29
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;if(op==="~\\\\"){return __node("Call",11176,__node("Access",11176,__node("Ident",11176,"Math"),__node("Const",11182,"floor")),[__wrap(this.binary(left,"/",right))],false,false);}else if(op==="~*"){return this.binary(left,"*",right);}else if(op==="~/"){return this.binary(left,"/",right);}else{return this.binary(left,"%",right);}};}.call(this));',
          operators: ["~*", "~/", "~%", "~\\"],
          options: {precedence: 11, type: "number"},
          id: 45
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;if(op==="~+"){if(!this.isType(right,"numeric")){return this.binary(left,"-",__node("MacroAccess",12451,48,365,{op:"~-",node:__wrap(right)},"expression",false,false,false));}else{if(!this.isType(left,"numeric")){left=__node("MacroAccess",12529,48,368,{op:"~+",node:__wrap(left)},"expression",false,false,false);}return this.binary(left,"+",right);}}else{return this.binary(left,"-",right);}};}.call(this));',
          operators: ["~+", "~-"],
          options: {precedence: 10, type: "number"},
          id: 49
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var left,op,right,value;left=macroData.left;op=macroData.op;right=macroData.right;if(this.isConst(right)){value=this.value(right);if(value===0){return __node("Block",12777,[__wrap(left),__node("Const",12799,1)],null);}else if(value===0.5){return __node("Call",12843,__node("Access",12843,__node("Ident",12843,"Math"),__node("Const",12849,"sqrt")),[__wrap(left)],false,false);}else if(value===1){return __node("MacroAccess",12900,48,383,{op:"~+",node:__wrap(left)},"expression",false,false,false);}else if(value===2){return this.maybeCache(left,function(setLeft,left){return __node("MacroAccess",12994,45,386,{left:__wrap(setLeft),inverted:false,op:"~*",right:__wrap(left)},"expression",false,false,false);});}else if(value===3){return this.maybeCache(left,function(setLeft,left){return __node("MacroAccess",13099,45,389,{left:__node("MacroAccess",13099,45,389,{left:__wrap(setLeft),inverted:false,op:"~*",right:__wrap(left)},"expression",false,false,false),inverted:false,op:"~*",right:__wrap(left)},"expression",false,false,false);});}else if(value===-0.5){return __node("MacroAccess",13172,45,391,{left:__node("Const",13173,1),inverted:false,op:"~/",right:__node("Call",13177,__node("Access",13177,__node("Ident",13177,"Math"),__node("Const",13183,"sqrt")),[__wrap(left)],false,false)},"expression",false,false,false);}else if(value===-1){return __node("MacroAccess",13237,45,393,{left:__node("Const",13238,1),inverted:false,op:"~/",right:__wrap(left)},"expression",false,false,false);}else if(value===-2){return this.maybeCache(left,function(setLeft,left){return __node("MacroAccess",13336,45,396,{left:__node("Const",13337,1),inverted:false,op:"~/",right:__node("MacroAccess",13343,45,396,{left:__wrap(setLeft),inverted:false,op:"~*",right:__wrap(left)},"expression",false,false,false)},"expression",false,false,false);});}else if(value===-3){return this.maybeCache(left,function(setLeft,left){return __node("MacroAccess",13450,45,399,{left:__node("Const",13451,1),inverted:false,op:"~/",right:__node("MacroAccess",13457,45,399,{left:__node("MacroAccess",13457,45,399,{left:__wrap(setLeft),inverted:false,op:"~*",right:__wrap(left)},"expression",false,false,false),inverted:false,op:"~*",right:__wrap(left)},"expression",false,false,false)},"expression",false,false,false);});}}return __node("Call",13492,__node("Access",13492,__node("Ident",13492,"Math"),__node("Const",13498,"pow")),[__wrap(left),__wrap(right)],false,false);};}.call(this));',
          operators: "~^",
          options: {precedence: 12, rightToLeft: true, type: "number"},
          id: 50
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;if(op==="~bitlshift"){return this.binary(left,"<<",right);}else if(op==="~bitrshift"){return this.binary(left,">>",right);}else{return this.binary(left,">>>",right);}};}.call(this));',
          operators: ["~bitlshift", "~bitrshift", "~biturshift"],
          options: {precedence: 9, maximum: 1, type: "number"},
          id: 54
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;return __node("MacroAccess",18190,50,560,{left:__node("MacroAccess",18190,60,560,{op:"+",node:__wrap(left)},"expression",false,false,false),inverted:false,op:"~^",right:__node("MacroAccess",18200,60,560,{op:"+",node:__wrap(right)},"expression",false,false,false)},"expression",false,false,false);};}.call(this));',
          operators: "^",
          options: {precedence: 12, rightToLeft: true, type: "number"},
          id: 62
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;if(op==="*"){return __node("MacroAccess",18432,45,568,{left:__node("MacroAccess",18432,60,568,{op:"+",node:__wrap(left)},"expression",false,false,false),inverted:false,op:"~*",right:__node("MacroAccess",18442,60,568,{op:"+",node:__wrap(right)},"expression",false,false,false)},"expression",false,false,false);}else if(op==="/"){return __node("MacroAccess",18479,45,570,{left:__node("MacroAccess",18479,60,570,{op:"+",node:__wrap(left)},"expression",false,false,false),inverted:false,op:"~/",right:__node("MacroAccess",18489,60,570,{op:"+",node:__wrap(right)},"expression",false,false,false)},"expression",false,false,false);}else if(op==="%"){return __node("MacroAccess",18526,45,572,{left:__node("MacroAccess",18526,60,572,{op:"+",node:__wrap(left)},"expression",false,false,false),inverted:false,op:"~%",right:__node("MacroAccess",18536,60,572,{op:"+",node:__wrap(right)},"expression",false,false,false)},"expression",false,false,false);}else{return __node("MacroAccess",18560,45,574,{left:__node("MacroAccess",18560,60,574,{op:"+",node:__wrap(left)},"expression",false,false,false),inverted:false,op:"~\\\\",right:__node("MacroAccess",18570,60,574,{op:"+",node:__wrap(right)},"expression",false,false,false)},"expression",false,false,false);}};}.call(this));',
          operators: ["*", "/", "%", "\\"],
          options: {precedence: 11, type: "number"},
          id: 64
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;if(op==="+"){return __node("MacroAccess",18744,49,581,{left:__node("MacroAccess",18744,60,581,{op:"+",node:__wrap(left)},"expression",false,false,false),inverted:false,op:"~+",right:__node("MacroAccess",18754,60,581,{op:"+",node:__wrap(right)},"expression",false,false,false)},"expression",false,false,false);}else{return __node("MacroAccess",18778,49,583,{left:__node("MacroAccess",18778,60,583,{op:"+",node:__wrap(left)},"expression",false,false,false),inverted:false,op:"~-",right:__node("MacroAccess",18788,60,583,{op:"+",node:__wrap(right)},"expression",false,false,false)},"expression",false,false,false);}};}.call(this));',
          operators: ["+", "-"],
          options: {precedence: 10, type: "number"},
          id: 66
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;if(op==="bitlshift"){return __node("MacroAccess",18931,54,587,{left:__node("MacroAccess",18931,60,587,{op:"+",node:__wrap(left)},"expression",false,false,false),inverted:false,op:"~bitlshift",right:__node("MacroAccess",18949,60,587,{op:"+",node:__wrap(right)},"expression",false,false,false)},"expression",false,false,false);}else if(op==="bitrshift"){return __node("MacroAccess",18994,54,589,{left:__node("MacroAccess",18994,60,589,{op:"+",node:__wrap(left)},"expression",false,false,false),inverted:false,op:"~bitrshift",right:__node("MacroAccess",19012,60,589,{op:"+",node:__wrap(right)},"expression",false,false,false)},"expression",false,false,false);}else{return __node("MacroAccess",19036,54,591,{left:__node("MacroAccess",19036,60,591,{op:"+",node:__wrap(left)},"expression",false,false,false),inverted:false,op:"~biturshift",right:__node("MacroAccess",19055,60,591,{op:"+",node:__wrap(right)},"expression",false,false,false)},"expression",false,false,false);}};}.call(this));',
          operators: ["bitlshift", "bitrshift", "biturshift"],
          options: {precedence: 9, maximum: 1, type: "number"},
          id: 67
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;if(!this.isType(left,"stringOrNumber")){if(!this.hasType(left,"number")){left=__node("Call",19372,__node("Ident",19372,"__str"),[__wrap(left)],false,false);}else{left=__node("Call",19404,__node("Ident",19404,"__strnum"),[__wrap(left)],false,false);}}if(!this.isType(right,"stringOrNumber")){if(!this.hasType(right,"number")){right=__node("Call",19518,__node("Ident",19518,"__str"),[__wrap(right)],false,false);}else{right=__node("Call",19551,__node("Ident",19551,"__strnum"),[__wrap(right)],false,false);}}return __node("MacroAccess",19574,29,608,{left:__wrap(left),inverted:false,op:"~&",right:__wrap(right)},"expression",false,false,false);};}.call(this));',
          operators: "&",
          options: {precedence: 7, type: "string", label: "stringConcat"},
          id: 69
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var elements,f,left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;if(this.isArray(right)){elements=this.elements(right);if(elements.length===0){if(this.isComplex(left)){return __node("Block",20008,[__wrap(left),__const("false")],null);}else{return __const("false");}}else if(elements.length===1){return __node("MacroAccess",20113,5,628,{left:__wrap(left),inverted:false,op:"==",right:__wrap(elements[0])},"expression",false,false,false);}else{f=function(i,current,left){if(i<elements.length){return f(+i+1,__node("MacroAccess",20233,2,632,{left:__wrap(current),inverted:false,op:"or",right:__node("MacroAccess",20245,5,632,{left:__wrap(left),inverted:false,op:"==",right:__wrap(elements[i])},"expression",false,false,false)},"expression",false,false,false),left);}else{return current;}};return this.maybeCache(left,function(setLeft,left){return f(1,__node("MacroAccess",20368,5,636,{left:__wrap(setLeft),inverted:false,op:"==",right:__wrap(elements[0])},"expression",false,false,false),left);});}}else{return __node("Call",20419,__node("Ident",20419,"__in"),[__wrap(left),__wrap(right)],false,false);}};}.call(this));',
          operators: "in",
          options: {precedence: 6, maximum: 1, invertible: true, type: "boolean"},
          id: 71
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;return this.binary(right,"in",left);};}.call(this));',
          operators: "haskey",
          options: {precedence: 6, maximum: 1, invertible: true, type: "boolean"},
          id: 72
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;return __node("Call",20743,__node("Ident",20743,"__owns"),[__wrap(left),__wrap(right)],false,true);};}.call(this));',
          operators: "ownskey",
          options: {precedence: 6, maximum: 1, invertible: true, type: "boolean", label: "ownership"},
          id: 73
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;if(this.isIdent(right)){if(this.name(right)==="String"){return __node("MacroAccess",20937,23,651,{op:"isString!",node:__wrap(left)},"expression",false,false,false);}else if(this.name(right)==="Number"){return __node("MacroAccess",21008,24,653,{op:"isNumber!",node:__wrap(left)},"expression",false,false,false);}else if(this.name(right)==="Boolean"){return __node("MacroAccess",21080,25,655,{op:"isBoolean!",node:__wrap(left)},"expression",false,false,false);}else if(this.name(right)==="Function"){return __node("MacroAccess",21154,26,657,{op:"isFunction!",node:__wrap(left)},"expression",false,false,false);}else if(this.name(right)==="Array"){return __node("MacroAccess",21226,27,659,{op:"isArray!",node:__wrap(left)},"expression",false,false,false);}else if(this.name(right)==="Object"){return __node("MacroAccess",21296,28,661,{op:"isObject!",node:__wrap(left)},"expression",false,false,false);}}return this.binary(left,"instanceof",right);};}.call(this));',
          operators: "instanceof",
          options: {precedence: 6, maximum: 1, invertible: true, type: "boolean"},
          id: 74
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;return __node("Call",21836,__node("Ident",21836,"__cmp"),[__wrap(left),__wrap(right)],false,false);};}.call(this));',
          operators: "<=>",
          options: {precedence: 5, maximum: 1, type: "number"},
          id: 75
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;return __node("MacroAccess",21956,5,682,{left:__node("MacroAccess",21956,64,682,{left:__wrap(left),inverted:false,op:"%",right:__wrap(right)},"expression",false,false,false),inverted:false,op:"==",right:__node("Const",21975,0)},"expression",false,false,false);};}.call(this));',
          operators: "%%",
          options: {precedence: 2, maximum: 1, invertible: true, type: "boolean"},
          id: 76
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;return __node("MacroAccess",22076,5,685,{left:__node("MacroAccess",22076,45,685,{left:__wrap(left),inverted:false,op:"~%",right:__wrap(right)},"expression",false,false,false),inverted:false,op:"==",right:__node("Const",22096,0)},"expression",false,false,false);};}.call(this));',
          operators: "~%%",
          options: {precedence: 2, maximum: 1, invertible: true, type: "boolean"},
          id: 77
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;if(this.isType(left,"number")){if(this.isType(right,"number")){if(op==="<"){return __node("MacroAccess",23226,9,723,{left:__wrap(left),inverted:false,op:"~<",right:__wrap(right)},"expression",false,false,false);}else{return __node("MacroAccess",23266,9,725,{left:__wrap(left),inverted:false,op:"~<=",right:__wrap(right)},"expression",false,false,false);}}else if(op==="<"){return __node("MacroAccess",23324,9,728,{left:__wrap(left),inverted:false,op:"~<",right:__node("Call",23333,__node("Ident",23333,"__num"),[__wrap(right)],false,false)},"expression",false,false,false);}else{return __node("MacroAccess",23371,9,730,{left:__wrap(left),inverted:false,op:"~<=",right:__node("Call",23381,__node("Ident",23381,"__num"),[__wrap(right)],false,false)},"expression",false,false,false);}}else if(this.isType(left,"string")){if(this.isType(right,"string")){if(op==="<"){return __node("MacroAccess",23491,9,734,{left:__wrap(left),inverted:false,op:"~<",right:__wrap(right)},"expression",false,false,false);}else{return __node("MacroAccess",23531,9,736,{left:__wrap(left),inverted:false,op:"~<=",right:__wrap(right)},"expression",false,false,false);}}else if(op==="<"){return __node("MacroAccess",23589,9,739,{left:__wrap(left),inverted:false,op:"~<",right:__node("Call",23598,__node("Ident",23598,"__str"),[__wrap(right)],false,false)},"expression",false,false,false);}else{return __node("MacroAccess",23636,9,741,{left:__wrap(left),inverted:false,op:"~<=",right:__node("Call",23646,__node("Ident",23646,"__str"),[__wrap(right)],false,false)},"expression",false,false,false);}}else if(this.isType(right,"number")){if(op==="<"){return __node("MacroAccess",23722,9,744,{left:__node("Call",23722,__node("Ident",23722,"__num"),[__wrap(left)],false,false),inverted:false,op:"~<",right:__wrap(right)},"expression",false,false,false);}else{return __node("MacroAccess",23765,9,746,{left:__node("Call",23765,__node("Ident",23765,"__num"),[__wrap(left)],false,false),inverted:false,op:"~<=",right:__wrap(right)},"expression",false,false,false);}}else if(this.isType(right,"string")){if(op==="<"){return __node("MacroAccess",23851,9,749,{left:__node("Call",23851,__node("Ident",23851,"__str"),[__wrap(left)],false,false),inverted:false,op:"~<",right:__wrap(right)},"expression",false,false,false);}else{return __node("MacroAccess",23894,9,751,{left:__node("Call",23894,__node("Ident",23894,"__str"),[__wrap(left)],false,false),inverted:false,op:"~<=",right:__wrap(right)},"expression",false,false,false);}}else if(op==="<"){return __node("Call",23947,__node("Ident",23947,"__lt"),[__wrap(left),__wrap(right)],false,false);}else{return __node("Call",23983,__node("Ident",23983,"__lte"),[__wrap(left),__wrap(right)],false,false);}};}.call(this));',
          operators: ["<", "<="],
          options: {precedence: 2, maximum: 1, type: "boolean"},
          id: 78
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;if(op===">"){return __node("MacroAccess",24105,3,759,{op:"not",node:__node("MacroAccess",24111,78,759,{left:__wrap(left),inverted:false,op:"<=",right:__wrap(right)},"expression",false,false,false)},"expression",false,false,false);}else{return __node("MacroAccess",24143,3,761,{op:"not",node:__node("MacroAccess",24149,78,761,{left:__wrap(left),inverted:false,op:"<",right:__wrap(right)},"expression",false,false,false)},"expression",false,false,false);}};}.call(this));',
          operators: [">", ">="],
          options: {precedence: 2, maximum: 1, type: "boolean"},
          id: 79
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var _this,left,op,right;_this=this;left=macroData.left;op=macroData.op;right=macroData.right;return this.maybeCache(left,function(setLeft,left){return _this.maybeCache(right,function(setRight,right){return __node("MacroAccess",24308,16,766,{macroName:"if",macroData:{test:__node("MacroAccess",24311,9,766,{left:__wrap(setLeft),inverted:false,op:"~<",right:__wrap(setRight)},"expression",false,false,false),body:__wrap(left),elseIfs:[],elseBody:__wrap(right)}},"expression",false,false,false);});});};}.call(this));',
          operators: "~min",
          options: {precedence: 8},
          id: 80
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var _this,left,op,right;_this=this;left=macroData.left;op=macroData.op;right=macroData.right;return this.maybeCache(left,function(setLeft,left){return _this.maybeCache(right,function(setRight,right){return __node("MacroAccess",24502,16,771,{macroName:"if",macroData:{test:__node("MacroAccess",24505,10,771,{left:__wrap(setLeft),inverted:false,op:"~>",right:__wrap(setRight)},"expression",false,false,false),body:__wrap(left),elseIfs:[],elseBody:__wrap(right)}},"expression",false,false,false);});});};}.call(this));',
          operators: "~max",
          options: {precedence: 8},
          id: 81
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var _this,left,op,right;_this=this;left=macroData.left;op=macroData.op;right=macroData.right;return this.maybeCache(left,function(setLeft,left){return _this.maybeCache(right,function(setRight,right){return __node("MacroAccess",24695,16,776,{macroName:"if",macroData:{test:__node("MacroAccess",24698,78,776,{left:__wrap(setLeft),inverted:false,op:"<",right:__wrap(setRight)},"expression",false,false,false),body:__wrap(left),elseIfs:[],elseBody:__wrap(right)}},"expression",false,false,false);});});};}.call(this));',
          operators: "min",
          options: {precedence: 8},
          id: 82
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var _this,left,op,right;_this=this;left=macroData.left;op=macroData.op;right=macroData.right;return this.maybeCache(left,function(setLeft,left){return _this.maybeCache(right,function(setRight,right){return __node("MacroAccess",24887,16,781,{macroName:"if",macroData:{test:__node("MacroAccess",24890,79,781,{left:__wrap(setLeft),inverted:false,op:">",right:__wrap(setRight)},"expression",false,false,false),body:__wrap(left),elseIfs:[],elseBody:__wrap(right)}},"expression",false,false,false);});});};}.call(this));',
          operators: "max",
          options: {precedence: 8},
          id: 83
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;return __node("Call",24990,__node("Ident",24990,"__xor"),[__wrap(left),__wrap(right)],false,false);};}.call(this));',
          operators: "xor",
          options: {precedence: 1},
          id: 84
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var _this,left,op,right;_this=this;left=macroData.left;op=macroData.op;right=macroData.right;return this.maybeCache(left,function(setLeft,left){return __node("MacroAccess",25105,16,788,{macroName:"if",macroData:{test:__node("MacroAccess",25108,20,788,{op:"?",node:__wrap(setLeft)},"expression",false,false,false),body:__wrap(left),elseIfs:[],elseBody:__wrap(right)}},"expression",false,false,false);});};}.call(this));',
          operators: "?",
          options: {precedence: 1},
          id: 85
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;return this.binary(left,"&",right);};}.call(this));',
          operators: "~bitand",
          options: {precedence: 1, type: "number"},
          id: 92
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;return this.binary(left,"|",right);};}.call(this));',
          operators: "~bitor",
          options: {precedence: 1, type: "number"},
          id: 93
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;return this.binary(left,"^",right);};}.call(this));',
          operators: "~bitxor",
          options: {precedence: 1, type: "number"},
          id: 94
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;return __node("MacroAccess",27453,92,856,{left:__node("MacroAccess",27453,60,856,{op:"+",node:__wrap(left)},"expression",false,false,false),inverted:false,op:"~bitand",right:__node("MacroAccess",27468,60,856,{op:"+",node:__wrap(right)},"expression",false,false,false)},"expression",false,false,false);};}.call(this));',
          operators: "bitand",
          options: {precedence: 1, type: "number"},
          id: 96
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;return __node("MacroAccess",27547,93,859,{left:__node("MacroAccess",27547,60,859,{op:"+",node:__wrap(left)},"expression",false,false,false),inverted:false,op:"~bitor",right:__node("MacroAccess",27561,60,859,{op:"+",node:__wrap(right)},"expression",false,false,false)},"expression",false,false,false);};}.call(this));',
          operators: "bitor",
          options: {precedence: 1, type: "number"},
          id: 97
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;return __node("MacroAccess",27641,94,862,{left:__node("MacroAccess",27641,60,862,{op:"+",node:__wrap(left)},"expression",false,false,false),inverted:false,op:"~bitxor",right:__node("MacroAccess",27656,60,862,{op:"+",node:__wrap(right)},"expression",false,false,false)},"expression",false,false,false);};}.call(this));',
          operators: "bitxor",
          options: {precedence: 1, type: "number"},
          id: 98
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;return __node("Call",35771,__node("Ident",35771,"__range"),[__wrap(left),__wrap(right),__node("Const",35795,1),__const("true")],false,false);};}.call(this));',
          operators: "to",
          options: {maximum: 1, precedence: 4, type: "array"},
          id: 110
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;return __node("Call",35883,__node("Ident",35883,"__range"),[__wrap(left),__wrap(right),__node("Const",35907,1),__const("false")],false,false);};}.call(this));',
          operators: "til",
          options: {maximum: 1, precedence: 4, type: "array"},
          id: 111
        },
        {
          code: 'return (function(){"use strict";var __num,__typeof;__num=function(num){if(typeof num!=="number"){throw TypeError("Expected a number, got "+__typeof(num));}else{return num;}};__typeof=(function(){var _toString;_toString=Object.prototype.toString;return function(o){if(o===void 0){return "Undefined";}else if(o===null){return "Null";}else{return o.constructor&&o.constructor.name||_toString.call(o).slice(8,-1);}};}());return function(macroData,__wrap,__node,__const){var callArgs,left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;if(!this.hasType(right,"number")){this.error("Must provide a number to the \'by\' operator",right);}if(this.isConst(right)&&this.value(right)===0){this.error("\'by\' step must be non-zero",right);}if(this.isCall(left)&&this.isIdent(this.callFunc(left))&&this.name(this.callFunc(left))==="__range"&&!this.callIsApply(left)){callArgs=this.callArgs(left);return __node("Call",36345,__node("Ident",36345,"__range"),[__wrap(callArgs[0]),__wrap(callArgs[1]),__wrap(right),__wrap(callArgs[3])],false,false);}else{if(this.isConst(right)&&__num(this.value(right))%1!==0){this.error("\'by\' step must be an integer",right);}return __node("Call",36530,__node("Ident",36530,"__step"),[__wrap(left),__wrap(right)],false,false);}};}.call(this));',
          operators: "by",
          options: {maximum: 1, precedence: 3, type: "array"},
          id: 112
        },
        {
          code: 'return (function(){"use strict";var __lt,__num,__typeof;__lt=function(x,y){var type;type=typeof x;if(type!=="number"&&type!=="string"){throw TypeError("Cannot compare a non-number/string: "+type);}else if(type!==typeof y){throw TypeError("Cannot compare elements of different types: "+type+" vs "+typeof y);}else{return x<y;}};__num=function(num){if(typeof num!=="number"){throw TypeError("Expected a number, got "+__typeof(num));}else{return num;}};__typeof=(function(){var _toString;_toString=Object.prototype.toString;return function(o){if(o===void 0){return "Undefined";}else if(o===null){return "Null";}else{return o.constructor&&o.constructor.name||_toString.call(o).slice(8,-1);}};}());return function(macroData,__wrap,__node,__const){var element,elements,f,left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;if(this.isArray(right)){elements=this.elements(right);if(elements.length===0){if(this.isComplex(left)){return __node("Block",67894,[__wrap(left),__const("false")],null);}else{return __const("false");}}else if(elements.length===1){element=elements[0];return __node("MacroAccess",68031,74,2018,{left:__wrap(left),inverted:false,op:"instanceof",right:__wrap(element)},"expression",false,false,false);}else{f=function(i,current,left){var element;if(__lt(i,elements.length)){element=elements[i];return f(__num(i)+1,__node("MacroAccess",68187,2,2023,{left:__wrap(current),inverted:false,op:"or",right:__node("MacroAccess",68199,74,2023,{left:__wrap(left),inverted:false,op:"instanceof",right:__wrap(element)},"expression",false,false,false)},"expression",false,false,false),left);}else{return current;}};return this.maybeCache(left,function(setLeft,left){var element;element=elements[0];return f(1,__node("MacroAccess",68358,74,2028,{left:__wrap(setLeft),inverted:false,op:"instanceof",right:__wrap(element)},"expression",false,false,false),left);});}}else{return __node("Call",68411,__node("Ident",68411,"__instanceofsome"),[__wrap(left),__wrap(right)],false,false);}};}.call(this));',
          operators: "instanceofsome",
          options: {precedence: 6, maximum: 1, invertible: true, type: "boolean"},
          id: 118
        },
        {
          code: 'return (function(){"use strict";var __is,__num,__typeof;__is=typeof Object.is==="function"?Object.is:function(x,y){if(x===y){return x!==0||1/x===1/y;}else{return x!==x&&y!==y;}};__num=function(num){if(typeof num!=="number"){throw TypeError("Expected a number, got "+__typeof(num));}else{return num;}};__typeof=(function(){var _toString;_toString=Object.prototype.toString;return function(o){if(o===void 0){return "Undefined";}else if(o===null){return "Null";}else{return o.constructor&&o.constructor.name||_toString.call(o).slice(8,-1);}};}());return function(macroData,__wrap,__node,__const){var _this,left,op,result,right;_this=this;left=macroData.left;op=macroData.op;right=macroData.right;if(this.hasType(left,"number")&&this.hasType(right,"number")){if(this.isConst(left)){if(this.isConst(right)){result=__is(this.value(left),this.value(right));return __wrap(result);}else if(typeof this.value(left)==="number"&&isNaN(this.value(left))){return this.maybeCache(right,function(setRight,right){return __node("MacroAccess",103511,6,3108,{left:__wrap(setRight),inverted:false,op:"!=",right:__wrap(right)},"expression",false,false,false);});}else if(this.value(left)===0){return this.maybeCache(right,function(setRight,right){if(1/__num(_this.value(left))<0){return __node("MacroAccess",103672,1,3112,{left:__node("MacroAccess",103672,5,3112,{left:__wrap(setRight),inverted:false,op:"==",right:__node("Const",103687,0)},"expression",false,false,false),inverted:false,op:"and",right:__node("MacroAccess",103692,78,3112,{left:__node("MacroAccess",103692,45,3112,{left:__node("Const",103693,1),inverted:false,op:"~/",right:__wrap(right)},"expression",false,false,false),inverted:false,op:"<",right:__node("Const",103707,0)},"expression",false,false,false)},"expression",false,false,false);}else{return __node("MacroAccess",103744,1,3114,{left:__node("MacroAccess",103744,5,3114,{left:__wrap(setRight),inverted:false,op:"==",right:__node("Const",103759,0)},"expression",false,false,false),inverted:false,op:"and",right:__node("MacroAccess",103764,79,3114,{left:__node("MacroAccess",103764,45,3114,{left:__node("Const",103765,1),inverted:false,op:"~/",right:__wrap(right)},"expression",false,false,false),inverted:false,op:">",right:__node("Const",103779,0)},"expression",false,false,false)},"expression",false,false,false);}});}else{return __node("MacroAccess",103808,5,3116,{left:__wrap(left),inverted:false,op:"==",right:__wrap(right)},"expression",false,false,false);}}else if(this.isConst(right)){if(typeof this.value(right)==="number"&&isNaN(this.value(right))){return this.maybeCache(left,function(setLeft,left){return __node("MacroAccess",103972,6,3120,{left:__wrap(setLeft),inverted:false,op:"!=",right:__wrap(left)},"expression",false,false,false);});}else if(this.value(right)===0){return this.maybeCache(left,function(setLeft,left){if(1/__num(_this.value(right))<0){return __node("MacroAccess",104122,1,3124,{left:__node("MacroAccess",104122,5,3124,{left:__wrap(setLeft),inverted:false,op:"==",right:__node("Const",104136,0)},"expression",false,false,false),inverted:false,op:"and",right:__node("MacroAccess",104141,78,3124,{left:__node("MacroAccess",104141,45,3124,{left:__node("Const",104142,1),inverted:false,op:"~/",right:__wrap(left)},"expression",false,false,false),inverted:false,op:"<",right:__node("Const",104155,0)},"expression",false,false,false)},"expression",false,false,false);}else{return __node("MacroAccess",104188,1,3126,{left:__node("MacroAccess",104188,5,3126,{left:__wrap(setLeft),inverted:false,op:"==",right:__node("Const",104202,0)},"expression",false,false,false),inverted:false,op:"and",right:__node("MacroAccess",104207,79,3126,{left:__node("MacroAccess",104207,45,3126,{left:__node("Const",104208,1),inverted:false,op:"~/",right:__wrap(left)},"expression",false,false,false),inverted:false,op:">",right:__node("Const",104221,0)},"expression",false,false,false)},"expression",false,false,false);}});}else{return __node("MacroAccess",104246,5,3128,{left:__wrap(left),inverted:false,op:"==",right:__wrap(right)},"expression",false,false,false);}}else{return __node("Call",104282,__node("Ident",104282,"__is"),[__wrap(left),__wrap(right)],false,false);}}else{return __node("MacroAccess",104317,5,3132,{left:__wrap(left),inverted:false,op:"==",right:__wrap(right)},"expression",false,false,false);}};}.call(this));',
          operators: "is",
          options: {precedence: 2, maximum: 1, type: "boolean"},
          id: 143
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;return __node("MacroAccess",104416,3,3135,{op:"not",node:__node("MacroAccess",104422,143,3135,{left:__wrap(left),inverted:false,op:"is",right:__wrap(right)},"expression",false,false,false)},"expression",false,false,false);};}.call(this));',
          operators: "isnt",
          options: {precedence: 2, maximum: 1, type: "boolean"},
          id: 144
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;return __node("Call",106571,__node("Ident",106571,"__compose"),[__wrap(left),__wrap(right)],false,false);};}.call(this));',
          operators: "<<",
          options: {precedence: 13, type: "function"},
          id: 146
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var left,op,right,tmp;left=macroData.left;op=macroData.op;right=macroData.right;if(!this.isNoop(left)&&!this.isNoop(right)){tmp=this.tmp("ref");return __node("Block",106761,[__node("MacroAccess",106761,38,3200,{macroName:"let",macroData:{declarable:__node("MacroAccess",106770,37,3200,__node("MacroAccess",106770,31,3200,{ident:__wrap(tmp)},"statement",false,false,false),"statement",false,false,false),value:__wrap(left)}},"statement",false,false,false),__node("Call",106784,__node("Ident",106784,"__compose"),[__wrap(right),__wrap(tmp)],false,false)],null);}else{return __node("Call",106828,__node("Ident",106828,"__compose"),[__wrap(right),__wrap(left)],false,false);}};}.call(this));',
          operators: ">>",
          options: {precedence: 13, type: "function", rightToLeft: true},
          id: 147
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;return __node("Call",107285,__wrap(left),[__wrap(right)],false,false);};}.call(this));',
          operators: "<|",
          options: {precedence: 0, rightToLeft: true},
          id: 148
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var left,op,right,tmp;left=macroData.left;op=macroData.op;right=macroData.right;if(!this.isNoop(left)&&!this.isNoop(right)){tmp=this.tmp("ref");return __node("Block",107426,[__node("MacroAccess",107426,38,3228,{macroName:"let",macroData:{declarable:__node("MacroAccess",107435,37,3228,__node("MacroAccess",107435,31,3228,{ident:__wrap(tmp)},"statement",false,false,false),"statement",false,false,false),value:__wrap(left)}},"statement",false,false,false),__node("Call",107449,__wrap(right),[__wrap(tmp)],false,false)],null);}else{return __node("Call",107483,__wrap(right),[__wrap(left)],false,false);}};}.call(this));',
          operators: "|>",
          options: {precedence: 0},
          id: 149
        },
        {
          code: 'return (function(){"use strict";var __isArray,__slice,__strnum,__toArray,__typeof;__isArray=typeof Array.isArray==="function"?Array.isArray:(function(){var _toString;_toString=Object.prototype.toString;return function(x){return _toString.call(x)==="[object Array]";};}());__slice=Array.prototype.slice;__strnum=function(strnum){var type;type=typeof strnum;if(type==="string"){return strnum;}else if(type==="number"){return String(strnum);}else{throw TypeError("Expected a string or number, got "+__typeof(strnum));}};__toArray=function(x){if(x==null){throw TypeError("Expected an object, got "+__typeof(x));}else if(__isArray(x)){return x;}else if(typeof x==="string"){return x.split("");}else{return __slice.call(x);}};__typeof=(function(){var _toString;_toString=Object.prototype.toString;return function(o){if(o===void 0){return "Undefined";}else if(o===null){return "Null";}else{return o.constructor&&o.constructor.name||_toString.call(o).slice(8,-1);}};}());return function(macroData,__wrap,__node,__const){var _this,left,op,right;_this=this;left=macroData.left;op=macroData.op;right=macroData.right;if(this.isObject(right)){return this.maybeCache(left,function(setLeft,nextLeft){var _arr,_ref,block,currentLeft,descriptor,i,key,len,pairs,property,value;currentLeft=setLeft;block=[];pairs=_this.pairs(right);for(_arr=__toArray(pairs), i=0, len=_arr.length;i<len;++i){_ref=_arr[i];key=_ref.key;value=_ref.value;property=_ref.property;if(property!=null){if((property==="get"||property==="set")&&i<len-1&&pairs[i+1].property!=null&&_this.eq(key,pairs[i+1].key)&&pairs[i+1].property!==property&&((_ref=pairs[i+1].property)==="get"||_ref==="set")){continue;}if(property==="property"){block.push(__node("Call",108164,__node("Ident",108164,"__defProp"),[__wrap(currentLeft),__wrap(key),__wrap(value)],false,false));}else if(property==="get"||property==="set"){if(i>0&&pairs[i-1].property!=null&&_this.eq(key,pairs[i-1].key)&&pairs[i-1].property!==property&&((_ref=pairs[i-1].property)==="get"||_ref==="set")){descriptor=__node("Object",108441,[{key:__wrap(pairs[i-1].property),value:__wrap(pairs[i-1].value),property:void 0},{key:__wrap(property),value:__wrap(value),property:void 0},{key:__node("Const",108562,"enumerable"),value:__const("true"),property:void 0},{key:__node("Const",108595,"configurable"),value:__const("true"),property:void 0}],void 0);}else{descriptor=__node("Object",108665,[{key:__wrap(property),value:__wrap(value),property:void 0},{key:__node("Const",108720,"enumerable"),value:__const("true"),property:void 0},{key:__node("Const",108753,"configurable"),value:__const("true"),property:void 0}],void 0);}block.push(__node("Call",108814,__node("Ident",108814,"__defProp"),[__wrap(currentLeft),__wrap(key),__wrap(descriptor)],false,false));}else{_this.error("Unknown property: "+__strnum(property),key);}}else{block.push(__node("MacroAccess",108965,30,3269,{left:__node("Access",108965,__wrap(currentLeft),__wrap(key)),op:":=",right:__wrap(value)},"statement",false,false,false));}currentLeft=nextLeft;}block.push(__wrap(currentLeft));return __wrap(block);});}else{return __node("Call",109098,__node("Ident",109098,"__import"),[__wrap(left),__wrap(right)],false,false);}};}.call(this));',
          operators: "<<<",
          options: {precedence: 6},
          id: 150
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var left,op,right,tmp;left=macroData.left;op=macroData.op;right=macroData.right;if(!this.isNoop(left)&&!this.isNoop(right)){tmp=this.tmp("ref");return __node("Block",109270,[__node("MacroAccess",109270,38,3280,{macroName:"let",macroData:{declarable:__node("MacroAccess",109279,37,3280,__node("MacroAccess",109279,31,3280,{ident:__wrap(tmp)},"statement",false,false,false),"statement",false,false,false),value:__wrap(left)}},"statement",false,false,false),__node("MacroAccess",109293,150,3281,{left:__wrap(right),inverted:false,op:"<<<",right:__wrap(tmp)},"statement",false,false,false)],null);}else{return __node("MacroAccess",109330,150,3283,{left:__wrap(right),inverted:false,op:"<<<",right:__wrap(left)},"expression",false,false,false);}};}.call(this));',
          operators: ">>>",
          options: {precedence: 6, rightToLeft: true},
          id: 151
        }
      ],
      unaryOperator: [
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var _this,node,op;_this=this;op=macroData.op;node=macroData.node;return this.mutateLast(node||this.noop(),function(n){return _this.unary("!",n);},true);};}.call(this));',
          operators: "not",
          options: {type: "boolean"},
          id: 3
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var _this,node,op;_this=this;op=macroData.op;node=macroData.node;return this.mutateLast(node||this.noop(),function(n){return _this.unary("typeof",n);},true);};}.call(this));',
          operators: "typeof",
          options: {type: "string"},
          id: 4
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var _this,node,op;_this=this;op=macroData.op;node=macroData.node;return this.mutateLast(node||this.noop(),function(n){return _this["throw"](n);},true);};}.call(this));',
          operators: "throw",
          options: {type: "none"},
          id: 11
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var node,op;op=macroData.op;node=macroData.node;return this.unary("++post",node);};}.call(this));',
          operators: "postInc!",
          options: {type: "number"},
          id: 12
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var node,op;op=macroData.op;node=macroData.node;return this.unary("--post",node);};}.call(this));',
          operators: "postDec!",
          options: {type: "number"},
          id: 13
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var node,op;op=macroData.op;node=macroData.node;if(this.isIdentOrTmp(node)&&!this.hasVariable(node)){return __node("MacroAccess",3994,1,112,{left:__node("MacroAccess",3994,6,112,{left:__node("MacroAccess",3994,4,112,{op:"typeof",node:__wrap(node)},"expression",false,false,false),inverted:false,op:"!=",right:__node("Const",4012,"undefined")},"expression",false,false,false),inverted:false,op:"and",right:__node("MacroAccess",4025,6,112,{left:__wrap(node),inverted:false,op:"!=",right:__const("null")},"expression",false,false,false)},"expression",false,false,false);}else{return __node("MacroAccess",4055,8,114,{left:__wrap(node),inverted:false,op:"!~=",right:__const("null")},"expression",false,false,false);}};}.call(this));',
          operators: "?",
          options: {postfix: true, type: "boolean", label: "existential"},
          id: 20
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var node,op;op=macroData.op;node=macroData.node;if(this.isIdentOrTmp(node)&&!this.hasVariable(node)){return __node("MacroAccess",4202,5,118,{left:__node("MacroAccess",4202,4,118,{op:"typeof",node:__wrap(node)},"expression",false,false,false),inverted:false,op:"==",right:__node("Const",4220,"undefined")},"expression",false,false,false);}else{return __node("MacroAccess",4245,5,120,{left:__wrap(node),inverted:false,op:"==",right:__const("void")},"expression",false,false,false);}};}.call(this));',
          operators: ["isVoid!", "isUndefined!"],
          options: {type: "boolean"},
          id: 21
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var node,op;op=macroData.op;node=macroData.node;if(this.isIdentOrTmp(node)&&!this.hasVariable(node)){return __node("MacroAccess",4376,1,124,{left:__node("MacroAccess",4376,6,124,{left:__node("MacroAccess",4376,4,124,{op:"typeof",node:__wrap(node)},"expression",false,false,false),inverted:false,op:"!=",right:__node("Const",4394,"undefined")},"expression",false,false,false),inverted:false,op:"and",right:__node("MacroAccess",4407,5,124,{left:__wrap(node),inverted:false,op:"==",right:__const("null")},"expression",false,false,false)},"expression",false,false,false);}else{return __node("MacroAccess",4437,5,126,{left:__wrap(node),inverted:false,op:"==",right:__const("null")},"expression",false,false,false);}};}.call(this));',
          operators: "isNull!",
          options: {type: "boolean"},
          id: 22
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var node,op;op=macroData.op;node=macroData.node;return __node("MacroAccess",4512,5,129,{left:__node("MacroAccess",4512,4,129,{op:"typeof",node:__wrap(node)},"expression",false,false,false),inverted:false,op:"==",right:__node("Const",4530,"string")},"expression",false,false,false);};}.call(this));',
          operators: "isString!",
          options: {type: "boolean"},
          id: 23
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var node,op;op=macroData.op;node=macroData.node;return __node("MacroAccess",4597,5,132,{left:__node("MacroAccess",4597,4,132,{op:"typeof",node:__wrap(node)},"expression",false,false,false),inverted:false,op:"==",right:__node("Const",4615,"number")},"expression",false,false,false);};}.call(this));',
          operators: "isNumber!",
          options: {type: "boolean"},
          id: 24
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var node,op;op=macroData.op;node=macroData.node;return __node("MacroAccess",4683,5,135,{left:__node("MacroAccess",4683,4,135,{op:"typeof",node:__wrap(node)},"expression",false,false,false),inverted:false,op:"==",right:__node("Const",4701,"boolean")},"expression",false,false,false);};}.call(this));',
          operators: "isBoolean!",
          options: {type: "boolean"},
          id: 25
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var node,op;op=macroData.op;node=macroData.node;return __node("MacroAccess",4771,5,138,{left:__node("MacroAccess",4771,4,138,{op:"typeof",node:__wrap(node)},"expression",false,false,false),inverted:false,op:"==",right:__node("Const",4789,"function")},"expression",false,false,false);};}.call(this));',
          operators: "isFunction!",
          options: {type: "boolean"},
          id: 26
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var _this,node,op;_this=this;op=macroData.op;node=macroData.node;return this.mutateLast(node||this.noop(),function(n){return _this.isIdentOrTmp(n)&&!_this.hasVariable(n)&&__node("MacroAccess",4947,1,141,{left:__node("MacroAccess",4947,5,141,{left:__node("MacroAccess",4947,4,141,{op:"typeof",node:__wrap(n)},"expression",false,false,false),inverted:false,op:"==",right:__node("Const",4962,"object")},"expression",false,false,false),inverted:false,op:"and",right:__node("Call",4972,__node("Ident",4972,"__isArray"),[__wrap(n)],false,false)},"expression",false,false,false)||__node("Call",4996,__node("Ident",4996,"__isArray"),[__wrap(n)],false,false);},true);};}.call(this));',
          operators: "isArray!",
          options: {type: "boolean"},
          id: 27
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var _this,node,op;_this=this;op=macroData.op;node=macroData.node;return this.mutateLast(node||this.noop(),function(n){return __node("MacroAccess",5119,1,144,{left:__node("MacroAccess",5119,5,144,{left:__node("MacroAccess",5119,4,144,{op:"typeof",node:__wrap(n)},"expression",false,false,false),inverted:false,op:"==",right:__node("Const",5134,"object")},"expression",false,false,false),inverted:false,op:"and",right:__node("MacroAccess",5144,6,144,{left:__wrap(n),inverted:false,op:"!=",right:__const("null")},"expression",false,false,false)},"expression",false,false,false);},true);};}.call(this));',
          operators: "isObject!",
          options: {type: "boolean"},
          id: 28
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var _this,negate,node,op,value;_this=this;op=macroData.op;node=macroData.node;if(this.isConst(node)){value=Number(this.value(node));if(op==="~-"){negate=function(x){return -x;};value=negate(value);}return this["const"](value);}else{return this.mutateLast(node||this.noop(),function(n){return _this.unary(op==="~+"?"+":"-",n);},true);}};}.call(this));',
          operators: ["~+", "~-"],
          options: {type: "number"},
          id: 48
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var _this,node,op;_this=this;op=macroData.op;node=macroData.node;if(this.isIdentOrTmp(node)&&!this.hasVariable(node)){return __node("MacroAccess",16440,16,492,{macroName:"if",macroData:{test:__node("MacroAccess",16443,5,492,{left:__node("MacroAccess",16443,4,492,{op:"typeof",node:__wrap(node)},"expression",false,false,false),inverted:false,op:"==",right:__node("Const",16461,"undefined")},"expression",false,false,false),body:__node("Const",16476,"Undefined"),elseIfs:[],elseBody:__node("Call",16492,__node("Ident",16492,"__typeof"),[__wrap(node)],false,false)}},"expression",false,false,false);}else{return this.mutateLast(node||this.noop(),function(n){return __node("Call",16564,__node("Ident",16564,"__typeof"),[__wrap(n)],false,false);},true);}};}.call(this));',
          operators: "typeof!",
          options: {type: "string"},
          id: 57
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var _this,node,op;_this=this;op=macroData.op;node=macroData.node;return this.mutateLast(node||this.noop(),function(n){if(_this.isType(n,"number")){return n;}else{return __node("Call",17937,__node("Ident",17937,"__num"),[__wrap(n)],false,false);}},true);};}.call(this));',
          operators: "+",
          options: {type: "number"},
          id: 60
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var node,op;op=macroData.op;node=macroData.node;if(this.isConst(node)&&typeof this.value(node)==="number"){return this["const"](-this.value(node));}else{return __node("MacroAccess",18090,48,557,{op:"~-",node:__node("MacroAccess",18094,60,557,{op:"+",node:__wrap(node)},"expression",false,false,false)},"expression",false,false,false);}};}.call(this));',
          operators: "-",
          options: {type: "number"},
          id: 61
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var node,op;op=macroData.op;node=macroData.node;return __node("MacroAccess",18644,64,577,{left:__wrap(node),inverted:false,op:"/",right:__node("Const",18653,100)},"expression",false,false,false);};}.call(this));',
          operators: "%",
          options: {postfix: true, type: "number"},
          id: 65
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var _this,node,op;_this=this;op=macroData.op;node=macroData.node;return this.mutateLast(node||this.noop(),function(n){return _this.unary("~",n);},true);};}.call(this));',
          operators: "~bitnot",
          options: {type: "number"},
          id: 99
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var node,op;op=macroData.op;node=macroData.node;return __node("MacroAccess",27833,99,868,{op:"~bitnot",node:__node("MacroAccess",27841,60,868,{op:"+",node:__wrap(node)},"expression",false,false,false)},"expression",false,false,false);};}.call(this));',
          operators: "bitnot",
          options: {type: "number"},
          id: 100
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var _this,node,op;_this=this;op=macroData.op;node=macroData.node;if(!this.isAccess(node)){this.error("Can only use delete on an access");}if(this.position==="expression"){return this.maybeCacheAccess(node,function(setNode,node){var del,tmp;tmp=_this.tmp("ref");del=_this.unary("delete",node);return __node("Block",28127,[__node("MacroAccess",28127,38,878,{macroName:"let",macroData:{declarable:__node("MacroAccess",28138,37,878,__node("MacroAccess",28138,31,878,{ident:__wrap(tmp)},"statement",false,false,false),"statement",false,false,false),value:__wrap(setNode)}},"statement",false,false,false),__wrap(del),__wrap(tmp)],null);});}else{return this.unary("delete",node);}};}.call(this));',
          operators: "delete",
          options: {standalone: false},
          id: 101
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var node,op;op=macroData.op;node=macroData.node;return this.maybeCache(node,function(setNode,node){return __node("MacroAccess",28314,16,886,{macroName:"if",macroData:{test:__node("MacroAccess",28317,20,886,{op:"?",node:__wrap(setNode)},"expression",false,false,false),body:__node("MacroAccess",28333,11,886,{op:"throw",node:__wrap(node)},"expression",false,false,false),elseIfs:[]}},"expression",false,false,false);});};}.call(this));',
          operators: "throw?",
          options: {type: "undefined"},
          id: 102
        },
        {
          code: 'return (function(){"use strict";var __isArray,__num,__owns,__slice,__strnum,__toArray,__typeof,__xor;__isArray=typeof Array.isArray==="function"?Array.isArray:(function(){var _toString;_toString=Object.prototype.toString;return function(x){return _toString.call(x)==="[object Array]";};}());__num=function(num){if(typeof num!=="number"){throw TypeError("Expected a number, got "+__typeof(num));}else{return num;}};__owns=Object.prototype.hasOwnProperty;__slice=Array.prototype.slice;__strnum=function(strnum){var type;type=typeof strnum;if(type==="string"){return strnum;}else if(type==="number"){return String(strnum);}else{throw TypeError("Expected a string or number, got "+__typeof(strnum));}};__toArray=function(x){if(x==null){throw TypeError("Expected an object, got "+__typeof(x));}else if(__isArray(x)){return x;}else if(typeof x==="string"){return x.split("");}else{return __slice.call(x);}};__typeof=(function(){var _toString;_toString=Object.prototype.toString;return function(o){if(o===void 0){return "Undefined";}else if(o===null){return "Null";}else{return o.constructor&&o.constructor.name||_toString.call(o).slice(8,-1);}};}());__xor=function(x,y){if(x){return !y&&x;}else{return y||x;}};return function(macroData,__wrap,__node,__const){var _arr,_arr2,_i,_len,_this,body,changed,foundSpread,genericArg,genericArgs,genericCache,genericParams,i,ident,init,initIndex,instanceofLets,instanceofs,item,key,len,makeFunctionFunc,makeFunctionIdent,name,node,op,p,param,params,PRIMORDIAL_TYPES,result,spreadCounter;_this=this;op=macroData.op;node=macroData.node;function article(text){if(/^[aeiou]/i.test(text)){return "an";}else{return "a";}};function withArticle(text){return article(text)+" "+__strnum(text);};PRIMORDIAL_TYPES={Number:true,String:true,Boolean:true,Function:true,Array:true,Object:true};function translateGenericType(type){var _ref,basetype,typeArguments;if(!_this.isTypeGeneric(type)){return type;}else{basetype=_this.basetype(type);if((_ref=_this.name(basetype))==="Array"||_ref==="Function"){return basetype;}else{typeArguments=_this.array((function(){var _arr,_arr2,_i,_len,subtype;for(_arr=[], _arr2=__toArray(_this.typeArguments(type)), _i=0, _len=_arr2.length;_i<_len;++_i){subtype=_arr2[_i];_arr.push(translateGenericType(subtype));}return _arr;}()));return __node("Call",55933,__node("Access",55933,__wrap(basetype),__node("Const",55944,"generic")),[__node("Spread",55952,__wrap(typeArguments))],false,false);}}};function translateTypeCheck(value,valueName,type,hasDefaultValue){var _arr,_arr2,_i,_len,_ref,check,checks,current,genericType,hasBoolean,hasNull,hasVoid,index,key,name,names,pairValue,result,subCheck,t,test,tests,typeNames;if(_this.isIdent(type)){if(__owns.call(PRIMORDIAL_TYPES,_this.name(type))){result=__node("MacroAccess",56138,17,1686,{macroName:"if",macroData:{test:__node("MacroAccess",56150,74,1686,{left:__wrap(value),inverted:true,op:"instanceof",right:__wrap(type)},"statement",false,false,false),body:__node("MacroAccess",56179,11,1687,{op:"throw",node:__node("Call",56196,__node("Ident",56196,"TypeError"),[__node("MacroAccess",56207,69,1687,{left:__node("MacroAccess",56207,69,1687,{left:__node("MacroAccess",56207,69,1687,{left:__node("MacroAccess",56207,69,1687,{left:__node("MacroAccess",56207,69,1687,{left:__node("Const",56207,"Expected "),op:"",right:__wrap(valueName)},"expression",false,false,false),op:"",right:__node("Const",56207," to be ")},"expression",false,false,false),op:"",right:__wrap(withArticle(_this.name(type)))},"expression",false,false,false),op:"",right:__node("Const",56207,", got ")},"expression",false,false,false),op:"",right:__node("MacroAccess",56276,57,1687,{op:"typeof!",node:__wrap(value)},"expression",false,false,false)},"expression",false,false,false)],false,false)},"statement",false,false,false),elseIfs:[]}},"statement",false,false,false);}else{result=__node("MacroAccess",56316,17,1690,{macroName:"if",macroData:{test:__node("MacroAccess",56328,74,1690,{left:__wrap(value),inverted:true,op:"instanceof",right:__wrap(type)},"statement",false,false,false),body:__node("MacroAccess",56357,11,1691,{op:"throw",node:__node("Call",56374,__node("Ident",56374,"TypeError"),[__node("MacroAccess",56385,69,1691,{left:__node("MacroAccess",56385,69,1691,{left:__node("MacroAccess",56385,69,1691,{left:__node("MacroAccess",56385,69,1691,{left:__node("MacroAccess",56385,69,1691,{left:__node("Const",56385,"Expected "),op:"",right:__wrap(valueName)},"expression",false,false,false),op:"",right:__node("Const",56385," to be a ")},"expression",false,false,false),op:"",right:__node("Call",56420,__node("Ident",56420,"__name"),[__wrap(type)],false,false)},"expression",false,false,false),op:"",right:__node("Const",56385,", got ")},"expression",false,false,false),op:"",right:__node("MacroAccess",56441,57,1691,{op:"typeof!",node:__wrap(value)},"expression",false,false,false)},"expression",false,false,false)],false,false)},"statement",false,false,false),elseIfs:[]}},"statement",false,false,false);}if(!hasDefaultValue&&_this.name(type)==="Boolean"){return __node("MacroAccess",56529,17,1693,{macroName:"if",macroData:{test:__node("MacroAccess",56532,3,1693,{op:"not",node:__node("MacroAccess",56536,20,1693,{op:"?",node:__wrap(value)},"statement",false,true,false)},"statement",false,true,false),body:__node("MacroAccess",56545,30,1694,{left:__wrap(value),op:":=",right:__const("false")},"statement",false,true,false),elseIfs:[],elseBody:__wrap(result)}},"statement",false,true,false);}else{return result;}}else if(_this.isAccess(type)){return __node("MacroAccess",56667,17,1701,{macroName:"if",macroData:{test:__node("MacroAccess",56677,74,1701,{left:__wrap(value),inverted:true,op:"instanceof",right:__wrap(type)},"statement",false,false,false),body:__node("MacroAccess",56706,11,1702,{op:"throw",node:__node("Call",56721,__node("Ident",56721,"TypeError"),[__node("MacroAccess",56732,69,1702,{left:__node("MacroAccess",56732,69,1702,{left:__node("MacroAccess",56732,69,1702,{left:__node("MacroAccess",56732,69,1702,{left:__node("MacroAccess",56732,69,1702,{left:__node("Const",56732,"Expected "),op:"",right:__wrap(valueName)},"expression",false,false,false),op:"",right:__node("Const",56732," to be ")},"expression",false,false,false),op:"",right:__wrap(withArticle(_this.value(_this.child(type))))},"expression",false,false,false),op:"",right:__node("Const",56732,", got ")},"expression",false,false,false),op:"",right:__node("MacroAccess",56810,57,1702,{op:"typeof!",node:__wrap(value)},"expression",false,false,false)},"expression",false,false,false)],false,false)},"statement",false,false,false),elseIfs:[]}},"statement",false,false,false);}else if(_this.isTypeUnion(type)){hasBoolean=false;hasVoid=false;hasNull=false;names=[];tests=[];for(_arr=__toArray(_this.types(type)), _i=0, _len=_arr.length;_i<_len;++_i){t=_arr[_i];if(_this.isConst(t)){if(_this.value(t)===null){hasNull=true;names.push(_this["const"]("null"));}else if(_this.value(t)===void 0){hasVoid=true;names.push(_this["const"]("undefined"));}else{_this.error("Unknown const for type-checking: "+String(_this.value(t)),t);}}else if(_this.isIdent(t)){if(_this.name(t)==="Boolean"){hasBoolean=true;}if(__owns.call(PRIMORDIAL_TYPES,_this.name(t))){names.push(_this["const"](_this.name(t)));}else{names.push(__node("Call",57613,__node("Ident",57613,"__name"),[__wrap(t)],false,false));}tests.push(__node("MacroAccess",57649,74,1727,{left:__wrap(value),inverted:true,op:"instanceof",right:__wrap(t)},"expression",false,false,false));}else{_this.error("Not implemented: typechecking for non-idents/consts within a type-union",t);}}if(tests.length){test=_this.binaryChain("&&",tests);}else{test=__const("true");}current=names[0];for(_i=1, _len=names.length;_i<_len;++_i){name=names[_i];current=__node("MacroAccess",57976,69,1736,{left:__node("MacroAccess",57976,69,1736,{left:__wrap(current),op:"",right:__node("Const",57976," or ")},"expression",false,false,false),op:"",right:__wrap(name)},"expression",false,false,false);}typeNames=current;result=__node("MacroAccess",58032,17,1737,{macroName:"if",macroData:{test:__wrap(test),body:__node("MacroAccess",58042,11,1738,{op:"throw",node:__node("Call",58055,__node("Ident",58055,"TypeError"),[__node("MacroAccess",58066,69,1738,{left:__node("MacroAccess",58066,69,1738,{left:__node("MacroAccess",58066,69,1738,{left:__node("MacroAccess",58066,69,1738,{left:__node("MacroAccess",58066,69,1738,{left:__node("Const",58066,"Expected "),op:"",right:__wrap(valueName)},"expression",false,false,false),op:"",right:__node("Const",58066," to be one of ")},"expression",false,false,false),op:"",right:__wrap(typeNames)},"expression",false,false,false),op:"",right:__node("Const",58066,", got ")},"expression",false,false,false),op:"",right:__node("MacroAccess",58126,57,1738,{op:"typeof!",node:__wrap(value)},"expression",false,false,false)},"expression",false,false,false)],false,false)},"statement",false,false,false),elseIfs:[]}},"statement",false,false,false);if(!hasDefaultValue){if(hasNull||hasVoid){if(__xor(hasNull,hasVoid)){result=__node("MacroAccess",58268,17,1743,{macroName:"if",macroData:{test:__node("MacroAccess",58271,3,1743,{op:"not",node:__node("MacroAccess",58275,20,1743,{op:"?",node:__wrap(value)},"statement",false,true,false)},"statement",false,true,false),body:__node("MacroAccess",58284,30,1744,{left:__wrap(value),op:":=",right:__node("MacroAccess",58307,16,1744,{macroName:"if",macroData:{test:__wrap(hasNull),body:__const("null"),elseIfs:[],elseBody:__const("void")}},"expression",false,true,false)},"statement",false,true,false),elseIfs:[],elseBody:__wrap(result)}},"statement",false,true,false);}else{result=__node("MacroAccess",58420,17,1748,{macroName:"if",macroData:{test:__node("MacroAccess",58423,20,1748,{op:"?",node:__wrap(value)},"statement",false,false,false),body:__wrap(result),elseIfs:[]}},"statement",false,false,false);}}else if(hasBoolean){result=__node("MacroAccess",58506,17,1751,{macroName:"if",macroData:{test:__node("MacroAccess",58509,3,1751,{op:"not",node:__node("MacroAccess",58513,20,1751,{op:"?",node:__wrap(value)},"statement",false,true,false)},"statement",false,true,false),body:__node("MacroAccess",58522,30,1752,{left:__wrap(value),op:":=",right:__const("false")},"statement",false,true,false),elseIfs:[],elseBody:__wrap(result)}},"statement",false,true,false);}}return result;}else if(_this.isTypeGeneric(type)){if(_this.name(_this.basetype(type))==="Array"){index=_this.tmp("i",false,"number");subCheck=translateTypeCheck(__node("Access",58769,__wrap(value),__wrap(index)),__node("MacroAccess",58792,69,1759,{left:__node("MacroAccess",58792,69,1759,{left:__node("MacroAccess",58792,69,1759,{left:__wrap(valueName),inverted:false,op:"&",right:__node("Const",58807,"[")},"expression",false,false,false),inverted:false,op:"&",right:__wrap(index)},"expression",false,false,false),inverted:false,op:"&",right:__node("Const",58822,"]")},"expression",false,false,false),_this.typeArguments(type)[0],false);return __node("MacroAccess",58871,17,1760,{macroName:"if",macroData:{test:__node("MacroAccess",58874,3,1760,{op:"not",node:__node("MacroAccess",58878,27,1760,{op:"isArray!",node:__wrap(value)},"statement",false,false,false)},"statement",false,false,false),body:__node("MacroAccess",58896,11,1761,{op:"throw",node:__node("Call",58911,__node("Ident",58911,"TypeError"),[__node("MacroAccess",58922,69,1761,{left:__node("MacroAccess",58922,69,1761,{left:__node("MacroAccess",58922,69,1761,{left:__node("Const",58922,"Expected "),op:"",right:__wrap(valueName)},"expression",false,false,false),op:"",right:__node("Const",58922," to be an Array, got ")},"expression",false,false,false),op:"",right:__node("MacroAccess",58969,57,1761,{op:"typeof!",node:__wrap(value)},"expression",false,false,false)},"expression",false,false,false)],false,false)},"statement",false,false,false),elseIfs:[],elseBody:__node("MacroAccess",58999,106,1763,{macroName:"for",macroData:{init:__node("MacroAccess",59014,38,1763,{macroName:"let",macroData:{declarable:__node("MacroAccess",59017,37,1763,__node("MacroAccess",59017,31,1763,{isMutable:"mutable",ident:__wrap(index)},"expression",false,false,false),"expression",false,false,false),value:__node("Access",59034,__wrap(value),__node("Const",59042,"length"))}},"expression",false,false,false),test:__node("MacroAccess",59050,13,1763,{op:"postDec!",node:__wrap(index)},"statement",false,false,false),body:__wrap(subCheck)}},"statement",false,false,false)}},"statement",false,false,false);}else if(_this.name(_this.basetype(type))==="Function"){return translateTypeCheck(value,valueName,_this.basetype(type),hasDefaultValue);}else{genericType=translateGenericType(type);return __node("MacroAccess",59305,17,1770,{macroName:"if",macroData:{test:__node("MacroAccess",59317,74,1770,{left:__wrap(value),inverted:true,op:"instanceof",right:__wrap(genericType)},"statement",false,false,false),body:__node("MacroAccess",59354,11,1771,{op:"throw",node:__node("Call",59371,__node("Ident",59371,"TypeError"),[__node("MacroAccess",59382,69,1771,{left:__node("MacroAccess",59382,69,1771,{left:__node("MacroAccess",59382,69,1771,{left:__node("MacroAccess",59382,69,1771,{left:__node("MacroAccess",59382,69,1771,{left:__node("Const",59382,"Expected "),op:"",right:__wrap(valueName)},"expression",false,false,false),op:"",right:__node("Const",59382," to be a ")},"expression",false,false,false),op:"",right:__node("Call",59417,__node("Ident",59417,"__name"),[__wrap(genericType)],false,false)},"expression",false,false,false),op:"",right:__node("Const",59382,", got ")},"expression",false,false,false),op:"",right:__node("MacroAccess",59446,57,1771,{op:"typeof!",node:__wrap(value)},"expression",false,false,false)},"expression",false,false,false)],false,false)},"statement",false,false,false),elseIfs:[]}},"statement",false,false,false);}}else if(_this.isTypeObject(type)){for(_arr=[], _arr2=__toArray(_this.pairs(type)), _i=0, _len=_arr2.length;_i<_len;++_i){_ref=_arr2[_i];key=_ref.key;pairValue=_ref.value;_arr.push(translateTypeCheck(__node("Access",59595,__wrap(value),__wrap(key)),__node("MacroAccess",59616,69,1774,{left:__node("MacroAccess",59616,69,1774,{left:__wrap(valueName),inverted:false,op:"&",right:__node("Const",59631,".")},"expression",false,false,false),inverted:false,op:"&",right:__wrap(key)},"expression",false,false,false),pairValue,false));}checks=_arr;return __node("MacroAccess",59671,17,1775,{macroName:"if",macroData:{test:__node("MacroAccess",59674,3,1775,{op:"not",node:__node("MacroAccess",59678,28,1775,{op:"isObject!",node:__wrap(value)},"statement",false,false,false)},"statement",false,false,false),body:__node("MacroAccess",59697,11,1776,{op:"throw",node:__node("Call",59710,__node("Ident",59710,"TypeError"),[__node("MacroAccess",59721,69,1776,{left:__node("MacroAccess",59721,69,1776,{left:__node("MacroAccess",59721,69,1776,{left:__node("Const",59721,"Expected "),op:"",right:__wrap(valueName)},"expression",false,false,false),op:"",right:__node("Const",59721," to be an Object, got ")},"expression",false,false,false),op:"",right:__node("MacroAccess",59769,57,1776,{op:"typeof!",node:__wrap(value)},"expression",false,false,false)},"expression",false,false,false)],false,false)},"statement",false,false,false),elseIfs:[],elseBody:__wrap(checks)}},"statement",false,false,false);}else{return _this.error("Unknown type to translate: "+__typeof(type),type);}};init=[];changed=false;function translateParam(param,inDestructure){var _arr,_i,_len,arrayIdent,asType,blankIdent,defaultValue,element,elementIdent,elementParam,foundSpread,i,ident,initIndex,key,len,objectIdent,pair,paramIdent,spreadCounter,typeCheck,value,valueIdent;if(_this.isArray(param)){changed=true;arrayIdent=_this.tmp("p",false,"array");foundSpread=-1;for(_arr=__toArray(_this.elements(param)), i=0, len=_arr.length;i<len;++i){element=_arr[i];initIndex=init.length;elementParam=translateParam(element,true);if(elementParam!=null){elementIdent=_this.paramIdent(elementParam);if(!_this.paramIsSpread(elementParam)){if(foundSpread===-1){init.splice(initIndex,0,__node("MacroAccess",60499,38,1796,{macroName:"let",macroData:{declarable:__node("MacroAccess",60503,37,1796,__node("MacroAccess",60503,31,1796,{ident:__wrap(elementIdent)},"statement",false,false,false),"statement",false,false,false),value:__node("Access",60520,__wrap(arrayIdent),__wrap(i))}},"statement",false,false,false));}else{init.splice(initIndex,0,__node("MacroAccess",60599,38,1798,{macroName:"let",macroData:{declarable:__node("MacroAccess",60603,37,1798,__node("MacroAccess",60603,31,1798,{ident:__wrap(elementIdent)},"statement",false,false,false),"statement",false,false,false),value:__node("Access",60620,__wrap(arrayIdent),__node("MacroAccess",60634,66,1798,{left:__wrap(spreadCounter),inverted:false,op:"+",right:__node("MacroAccess",60653,66,1798,{left:__node("MacroAccess",60653,66,1798,{left:__wrap(i),inverted:false,op:"-",right:__wrap(foundSpread)},"expression",false,false,false),inverted:false,op:"-",right:__node("Const",60674,1)},"expression",false,false,false)},"expression",false,false,false))}},"statement",false,false,false));}}else{if(foundSpread!==-1){_this.error("Cannot have multiple spread parameters in an array destructure",element);}foundSpread=i;if(i===len-1){init.splice(initIndex,0,__node("MacroAccess",60924,38,1804,{macroName:"let",macroData:{declarable:__node("MacroAccess",60928,37,1804,__node("MacroAccess",60928,31,1804,{ident:__wrap(elementIdent)},"statement",false,false,false),"statement",false,false,false),value:__node("Call",60945,__node("Ident",60945,"__slice"),[__wrap(arrayIdent),__node("Spread",60968,__node("MacroAccess",60973,16,1804,{macroName:"if",macroData:{test:__node("MacroAccess",60975,5,1804,{left:__wrap(i),inverted:false,op:"==",right:__node("Const",60982,0)},"expression",false,false,false),body:__node("Array",60988,[]),elseIfs:[],elseBody:__node("Array",60996,[__wrap(i)])}},"expression",false,false,false))],false,true)}},"statement",false,false,false));}else{spreadCounter=_this.tmp("i",false,"number");init.splice(initIndex,0,__node("Block",61121,[__node("MacroAccess",61121,38,1808,{macroName:"let",macroData:{declarable:__node("MacroAccess",61140,37,1808,__node("MacroAccess",61140,31,1808,{isMutable:"mutable",ident:__wrap(spreadCounter)},"statement",false,false,false),"statement",false,false,false),value:__node("MacroAccess",61166,66,1808,{left:__node("Access",61166,__wrap(arrayIdent),__node("Const",61180,"length")),inverted:false,op:"-",right:__node("MacroAccess",61190,66,1808,{left:__node("MacroAccess",61190,66,1808,{left:__wrap(len),inverted:false,op:"-",right:__wrap(i)},"expression",false,false,false),inverted:false,op:"-",right:__node("Const",61202,1)},"expression",false,false,false)},"expression",false,false,false)}},"statement",false,false,false),__node("MacroAccess",61205,38,1809,{macroName:"let",macroData:{declarable:__node("MacroAccess",61224,37,1809,__node("MacroAccess",61224,31,1809,{ident:__wrap(elementIdent)},"statement",false,false,false),"statement",false,false,false),value:__node("MacroAccess",61241,17,1809,{macroName:"if",macroData:{test:__node("MacroAccess",61244,79,1809,{left:__wrap(spreadCounter),inverted:false,op:">",right:__wrap(i)},"expression",false,false,false),body:__node("Call",61266,__node("Ident",61266,"__slice"),[__wrap(arrayIdent),__wrap(i),__wrap(spreadCounter)],false,true),elseIfs:[],elseBody:__node("Block",61348,[__node("MacroAccess",61348,30,1812,{left:__wrap(spreadCounter),op:":=",right:__wrap(i)},"statement",false,false,false),__node("Array",61388,[])],null)}},"expression",false,false,false)}},"statement",false,false,false)],null));}}}}return _this.rewrap(_this.param(arrayIdent,null,false,false,null),param);}else if(_this.isObject(param)){changed=true;objectIdent=_this.tmp("p",false,"object");for(_arr=__toArray(_this.pairs(param)), _i=0, _len=_arr.length;_i<_len;++_i){pair=_arr[_i];initIndex=init.length;value=translateParam(pair.value,true);if(value!=null){valueIdent=_this.paramIdent(value);key=pair.key;init.splice(initIndex,0,__node("MacroAccess",61842,38,1825,{macroName:"let",macroData:{declarable:__node("MacroAccess",61846,37,1825,__node("MacroAccess",61846,31,1825,{ident:__wrap(valueIdent)},"statement",false,false,false),"statement",false,false,false),value:__node("Access",61861,__wrap(objectIdent),__wrap(key))}},"statement",false,false,false));}}return _this.rewrap(_this.param(objectIdent,null,false,false,null),param);}else if(_this.isParam(param)){defaultValue=_this.paramDefaultValue(param);asType=_this.paramType(param);paramIdent=_this.paramIdent(param);if(defaultValue!=null||asType!=null||!_this.isIdentOrTmp(paramIdent)){changed=true;if(_this.isIdentOrTmp(paramIdent)){ident=paramIdent;}else if(_this.isAccess(paramIdent)){ident=_this.ident(_this.value(_this.child(paramIdent)));}else{ident=_this.error("Not an ident or this-access: "+__typeof(paramIdent)+" "+__strnum(paramIdent.inspect()),paramIdent);}if(asType!=null){typeCheck=translateTypeCheck(ident,_this.name(ident),asType,defaultValue!=null);}else{typeCheck=_this.noop();}init.push(defaultValue!=null?__node("MacroAccess",62699,17,1846,{macroName:"if",macroData:{test:__node("MacroAccess",62713,3,1846,{op:"not",node:__node("MacroAccess",62717,20,1846,{op:"?",node:__wrap(ident)},"statement",false,true,false)},"statement",false,true,false),body:__node("MacroAccess",62726,30,1847,{left:__wrap(ident),op:":=",right:__wrap(defaultValue)},"statement",false,true,false),elseIfs:[],elseBody:__wrap(typeCheck)}},"statement",false,true,false):typeCheck);if(paramIdent!==ident){init.push(__node("MacroAccess",62897,30,1853,{left:__wrap(paramIdent),op:":=",right:__wrap(ident)},"statement",false,false,false));}return _this.rewrap(_this.param(ident,null,_this.paramIsSpread(param),_this.paramIsMutable(param),null),param);}else{return param;}}else if(_this.isNothing(param)){changed=true;if(inDestructure){return null;}else{blankIdent=_this.tmp("p",false,"object");return _this.rewrap(_this.param(blankIdent,null,false,false,null),param);}}else{return _this.error("Unknown param type: "+__typeof(param),param);}};foundSpread=-1;params=[];for(_arr=__toArray(this.funcParams(node)), i=0, len=_arr.length;i<len;++i){param=_arr[i];initIndex=init.length;p=translateParam(param,false);ident=this.paramIdent(p);if(this.paramIsSpread(p)){if(foundSpread!==-1){this.error("Cannot have two spread parameters",p);}changed=true;foundSpread=i;if(i===len-1){init.splice(initIndex,0,__node("MacroAccess",63788,38,1881,{macroName:"let",macroData:{declarable:__node("MacroAccess",63801,37,1881,__node("MacroAccess",63801,31,1881,{ident:__wrap(ident)},"statement",false,false,false),"statement",false,false,false),value:__node("Call",63810,__node("Ident",63810,"__slice"),[__node("Args",63820),__node("Spread",63830,__node("MacroAccess",63835,16,1881,{macroName:"if",macroData:{test:__node("MacroAccess",63837,5,1881,{left:__wrap(i),inverted:false,op:"==",right:__node("Const",63844,0)},"expression",false,false,false),body:__node("Array",63850,[]),elseIfs:[],elseBody:__node("Array",63858,[__wrap(i)])}},"expression",false,false,false))],false,true)}},"statement",false,false,false));}else{spreadCounter=this.tmp("i",false,"number");init.splice(initIndex,0,__node("Block",63965,[__node("MacroAccess",63965,38,1885,{macroName:"let",macroData:{declarable:__node("MacroAccess",63978,37,1885,__node("MacroAccess",63978,31,1885,{isMutable:"mutable",ident:__wrap(spreadCounter)},"statement",false,false,false),"statement",false,false,false),value:__node("MacroAccess",64004,66,1885,{left:__node("Access",64004,__node("Args",64004),__node("Const",64015,"length")),inverted:false,op:"-",right:__node("MacroAccess",64025,66,1885,{left:__node("MacroAccess",64025,66,1885,{left:__wrap(len),inverted:false,op:"-",right:__wrap(i)},"expression",false,false,false),inverted:false,op:"-",right:__node("Const",64037,1)},"expression",false,false,false)},"expression",false,false,false)}},"statement",false,false,false),__node("MacroAccess",64040,38,1886,{macroName:"let",macroData:{declarable:__node("MacroAccess",64053,37,1886,__node("MacroAccess",64053,31,1886,{ident:__wrap(ident)},"statement",false,false,false),"statement",false,false,false),value:__node("MacroAccess",64062,17,1886,{macroName:"if",macroData:{test:__node("MacroAccess",64065,79,1886,{left:__wrap(spreadCounter),inverted:false,op:">",right:__wrap(i)},"expression",false,false,false),body:__node("Call",64087,__node("Ident",64087,"__slice"),[__node("Args",64108),__wrap(i),__wrap(spreadCounter)],false,true),elseIfs:[],elseBody:__node("Block",64154,[__node("MacroAccess",64154,30,1889,{left:__wrap(spreadCounter),op:":=",right:__wrap(i)},"statement",false,false,false),__node("Array",64188,[])],null)}},"expression",false,false,false)}},"statement",false,false,false)],null));}}else if(foundSpread===-1){params.push(p);}else{init.splice(initIndex,0,__node("MacroAccess",64312,38,1896,{macroName:"let",macroData:{declarable:__node("MacroAccess",64325,37,1896,__node("MacroAccess",64325,31,1896,{ident:__wrap(ident)},"statement",false,false,false),"statement",false,false,false),value:__node("Access",64334,__node("Args",64334),__node("MacroAccess",64345,66,1896,{left:__wrap(spreadCounter),inverted:false,op:"+",right:__node("MacroAccess",64364,66,1896,{left:__node("MacroAccess",64364,66,1896,{left:__wrap(i),inverted:false,op:"-",right:__wrap(foundSpread)},"expression",false,false,false),inverted:false,op:"-",right:__node("Const",64385,1)},"expression",false,false,false)},"expression",false,false,false))}},"statement",false,false,false));}}if(init.length||changed||this.funcIsCurried(node)){body=this.funcBody(node);result=this.rewrap(this.func(params,__node("Block",64534,[__wrap(init),__wrap(body)],null),this.funcIsAutoReturn(node)&&!this.isNothing(body),this.funcIsBound(node),false,this.funcAsType(node),this.funcIsGenerator(node),this.funcGeneric(node)),node);}else{result=node;}if(this.funcIsCurried(node)){result=__node("Call",64816,__node("Ident",64816,"__curry"),[__wrap(params.length),__wrap(result)],false,false);}genericArgs=this.funcGeneric(node);if(__num(genericArgs.length)>0){genericCache=this.tmp("cache",false,"object");for(_arr=[], _arr2=__toArray(genericArgs), _i=0, _len=_arr2.length;_i<_len;++_i){genericArg=_arr2[_i];_arr.push(this.param(genericArg));}genericParams=_arr;makeFunctionIdent=this.tmp("make",false,"function");instanceofs={};for(_arr=__toArray(genericArgs), _i=0, _len=_arr.length;_i<_len;++_i){genericArg=_arr[_i];name=this.name(genericArg);key=this.tmp("instanceof_"+__strnum(name),false,"function");instanceofs[name]={key:key,"let":__node("MacroAccess",65327,38,1927,{macroName:"let",macroData:{declarable:__node("MacroAccess",65331,37,1927,__node("MacroAccess",65331,31,1927,{ident:__wrap(key)},"statement",false,false,false),"statement",false,false,false),value:__node("Call",65338,__node("Ident",65338,"__getInstanceof"),[__wrap(genericArg)],false,false)}},"statement",false,false,false),used:false};}result=this.walk(this.macroExpandAll(result),function(node){var func,left,name,right;if(_this.isBinary(node)&&_this.op(node)==="instanceof"){right=_this.right(node);if(_this.isIdent(right)){name=_this.name(right);if(__owns.call(instanceofs,name)){func=instanceofs[name].key;instanceofs[name].used=true;left=_this.left(node);return __node("Call",65788,__wrap(func),[__wrap(left)],false,false);}}}});_arr=[];for(name in instanceofs){if(__owns.call(instanceofs,name)){item=instanceofs[name];if(item.used){_arr.push(item["let"]);}}}instanceofLets=_arr;if(instanceofLets.length){result=__node("Block",65944,[__wrap(instanceofLets),__wrap(result)],null);}makeFunctionFunc=this.func(genericParams,result,true,false);result=__node("Call",66074,__node("Ident",66074,"__genericFunc"),[__wrap(genericArgs.length),__wrap(makeFunctionFunc)],false,false);}return result;};}.call(this));',
          operators: "mutateFunction!",
          options: {type: "node", label: "mutateFunction"},
          id: 117
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var node,op;op=macroData.op;node=macroData.node;return __node("Call",77664,__node("Ident",77664,"__keys"),[__wrap(node)],false,false);};}.call(this));',
          operators: "keys!",
          id: 124
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var node,op;op=macroData.op;node=macroData.node;return __node("Call",77820,__node("Ident",77820,"__allkeys"),[__wrap(node)],false,false);};}.call(this));',
          operators: "allkeys!",
          id: 125
        },
        {
          code: 'return (function(){"use strict";var __isArray,__slice,__toArray,__typeof;__isArray=typeof Array.isArray==="function"?Array.isArray:(function(){var _toString;_toString=Object.prototype.toString;return function(x){return _toString.call(x)==="[object Array]";};}());__slice=Array.prototype.slice;__toArray=function(x){if(x==null){throw TypeError("Expected an object, got "+__typeof(x));}else if(__isArray(x)){return x;}else if(typeof x==="string"){return x.split("");}else{return __slice.call(x);}};__typeof=(function(){var _toString;_toString=Object.prototype.toString;return function(o){if(o===void 0){return "Undefined";}else if(o===null){return "Null";}else{return o.constructor&&o.constructor.name||_toString.call(o).slice(8,-1);}};}());return function(macroData,__wrap,__node,__const){var _arr,_i,_len,element,item,node,op,parts,set;op=macroData.op;node=macroData.node;set=this.tmp("s",false,"object");if(this.isArray(node)&&!this.arrayHasSpread(node)){if(this.elements(node).length===0){return __node("Call",113722,__node("Ident",113722,"Set"),[],false,false);}else{parts=[];for(_arr=__toArray(this.elements(node)), _i=0, _len=_arr.length;_i<_len;++_i){element=_arr[_i];parts.push(__node("Call",113818,__node("Access",113818,__wrap(set),__node("Const",113824,"add")),[__wrap(element)],false,false));}return __node("Block",113847,[__node("MacroAccess",113847,38,3467,{macroName:"let",macroData:{declarable:__node("MacroAccess",113858,37,3467,__node("MacroAccess",113858,31,3467,{ident:__wrap(set)},"statement",false,false,false),"statement",false,false,false),value:__node("Call",113865,__node("Ident",113865,"Set"),[],false,false)}},"statement",false,false,false),__wrap(parts),__wrap(set)],null);}}else{item=this.tmp("x",false,"any");return __node("Block",113951,[__node("MacroAccess",113951,38,3473,{macroName:"let",macroData:{declarable:__node("MacroAccess",113960,37,3473,__node("MacroAccess",113960,31,3473,{ident:__wrap(set)},"statement",false,false,false),"statement",false,false,false),value:__node("Call",113967,__node("Ident",113967,"Set"),[],false,false)}},"statement",false,false,false),__node("MacroAccess",113974,113,3474,{macroName:"for",macroData:{value:__node("MacroAccess",113983,37,3474,__node("MacroAccess",113983,31,3474,{ident:__wrap(item)},"statement",false,false,false),"statement",false,false,false),array:__wrap(node),body:__node("Call",113999,__node("Access",113999,__wrap(set),__node("Const",114012,"add")),[__wrap(item)],false,false)}},"statement",false,false,false),__wrap(set)],null);}};}.call(this));',
          operators: "set!",
          options: {type: "object", label: "constructSet"},
          id: 152
        },
        {
          code: 'return (function(){"use strict";var __isArray,__slice,__toArray,__typeof;__isArray=typeof Array.isArray==="function"?Array.isArray:(function(){var _toString;_toString=Object.prototype.toString;return function(x){return _toString.call(x)==="[object Array]";};}());__slice=Array.prototype.slice;__toArray=function(x){if(x==null){throw TypeError("Expected an object, got "+__typeof(x));}else if(__isArray(x)){return x;}else if(typeof x==="string"){return x.split("");}else{return __slice.call(x);}};__typeof=(function(){var _toString;_toString=Object.prototype.toString;return function(o){if(o===void 0){return "Undefined";}else if(o===null){return "Null";}else{return o.constructor&&o.constructor.name||_toString.call(o).slice(8,-1);}};}());return function(macroData,__wrap,__node,__const){var _arr,_i,_len,_ref,key,map,node,op,pairs,parts,property,value;op=macroData.op;node=macroData.node;if(!this.isObject(node)){this.error("map! can only be used on literal objects",node);}pairs=this.pairs(node);if(pairs.length===0){return __node("Call",114250,__node("Ident",114250,"Map"),[],false,false);}else{map=this.tmp("m",false,"object");parts=[];for(_arr=__toArray(pairs), _i=0, _len=_arr.length;_i<_len;++_i){_ref=_arr[_i];key=_ref.key;value=_ref.value;property=_ref.property;if(property!=null){this.error("Cannot use map! on an object with custom properties",key);}parts.push(__node("Call",114474,__node("Access",114474,__wrap(map),__node("Const",114480,"set")),[__wrap(key),__wrap(value)],false,false));}return __node("Block",114505,[__node("MacroAccess",114505,38,3493,{macroName:"let",macroData:{declarable:__node("MacroAccess",114514,37,3493,__node("MacroAccess",114514,31,3493,{ident:__wrap(map)},"statement",false,false,false),"statement",false,false,false),value:__node("Call",114521,__node("Ident",114521,"Map"),[],false,false)}},"statement",false,false,false),__wrap(parts),__wrap(map)],null);}};}.call(this));',
          operators: "map!",
          options: {type: "object", label: "constructMap"},
          id: 153
        },
        {
          code: 'return (function(){"use strict";var __isArray,__slice,__toArray,__typeof;__isArray=typeof Array.isArray==="function"?Array.isArray:(function(){var _toString;_toString=Object.prototype.toString;return function(x){return _toString.call(x)==="[object Array]";};}());__slice=Array.prototype.slice;__toArray=function(x){if(x==null){throw TypeError("Expected an object, got "+__typeof(x));}else if(__isArray(x)){return x;}else if(typeof x==="string"){return x.split("");}else{return __slice.call(x);}};__typeof=(function(){var _toString;_toString=Object.prototype.toString;return function(o){if(o===void 0){return "Undefined";}else if(o===null){return "Null";}else{return o.constructor&&o.constructor.name||_toString.call(o).slice(8,-1);}};}());return function(macroData,__wrap,__node,__const){var node,op,top;op=macroData.op;node=macroData.node;if(!node.cascades||!node.cascades.length){this.error("cascade! can only be used on a CascadeNode, got "+__typeof(node),node);}top=node.node;return this.maybeCache(top,function(setTop,top){var _arr,_arr2,_len,cascade,i,parts;for(_arr=[], _arr2=__toArray(node.cascades), i=0, _len=_arr2.length;i<_len;++i){cascade=_arr2[i];_arr.push(cascade(top));}parts=_arr;return __node("Block",128457,[__wrap(setTop),__wrap(parts),__wrap(top)],null);});};}.call(this));',
          operators: "cascade!",
          options: {label: "cascade"},
          id: 171
        }
      ],
      helpers: {
        __throw: {
          helper: [
            "Func",
            62,
            26,
            0,
            0,
            [["Ident", 62, 27, 0, "err"]],
            [],
            [],
            "Throw",
            62,
            34,
            0,
            "Ident",
            62,
            40,
            0,
            "err"
          ],
          type: {type: "generic", base: "functionBase", args: ["none"]},
          dependencies: ["__throw"]
        },
        GLOBAL: {
          helper: [
            "IfExpression",
            146,
            23,
            0,
            [
              "Binary",
              146,
              26,
              0,
              [
                "Unary",
                118,
                9,
                0,
                "typeof",
                "Ident",
                146,
                39,
                0,
                "window"
              ],
              "!==",
              "Const",
              118,
              27,
              0,
              "undefined"
            ],
            ["Ident", 146, 51, 0, "window"],
            "IfExpression",
            146,
            23,
            0,
            [
              "Binary",
              146,
              66,
              0,
              [
                "Unary",
                118,
                9,
                0,
                "typeof",
                "Ident",
                146,
                79,
                0,
                "global"
              ],
              "!==",
              "Const",
              118,
              27,
              0,
              "undefined"
            ],
            ["Ident", 146, 91, 0, "global"],
            "This",
            146,
            103,
            0
          ],
          type: "any",
          dependencies: ["GLOBAL"]
        },
        __xor: {
          helper: [
            "Func",
            148,
            24,
            0,
            0,
            [
              ["Ident", 148, 25, 0, "x"],
              ["Ident", 148, 27, 0, "y"]
            ],
            [],
            [],
            "IfStatement",
            149,
            1,
            0,
            0,
            ["Ident", 149, 5, 0, "x"],
            [
              "Return",
              150,
              1,
              0,
              "Binary",
              150,
              1,
              0,
              [
                "Unary",
                150,
                1,
                0,
                "!",
                "Ident",
                150,
                8,
                0,
                "y"
              ],
              "&&",
              "Ident",
              150,
              14,
              0,
              "x"
            ],
            "Return",
            152,
            1,
            0,
            "Binary",
            152,
            1,
            0,
            ["Ident", 152, 1, 0, "y"],
            "||",
            "Ident",
            152,
            9,
            0,
            "x"
          ],
          type: "function",
          dependencies: ["__xor"]
        },
        __typeof: {
          helper: [
            "Call",
            9,
            9,
            0,
            [
              "Func",
              9,
              12,
              0,
              0,
              [],
              ["_toString"],
              [],
              "BlockStatement",
              481,
              1,
              0,
              0,
              [
                "Binary",
                481,
                1,
                0,
                ["Ident", 481, 6, 0, "_toString"],
                "=",
                "Binary",
                481,
                19,
                0,
                [
                  "Binary",
                  481,
                  19,
                  0,
                  ["Ident", 481, 19, 0, "Object"],
                  ".",
                  "Const",
                  481,
                  27,
                  0,
                  "prototype"
                ],
                ".",
                "Const",
                481,
                37,
                0,
                "toString"
              ],
              [
                "Return",
                482,
                4,
                0,
                "Func",
                482,
                4,
                0,
                0,
                [["Ident", 482, 5, 0, "o"]],
                [],
                [],
                "IfStatement",
                483,
                1,
                0,
                0,
                [
                  "Binary",
                  120,
                  9,
                  0,
                  ["Ident", 483, 16, 0, "o"],
                  "===",
                  "Const",
                  1,
                  1,
                  0
                ],
                [
                  "Return",
                  484,
                  7,
                  0,
                  "Const",
                  484,
                  7,
                  0,
                  "Undefined"
                ],
                "IfStatement",
                483,
                1,
                0,
                0,
                [
                  "Binary",
                  126,
                  9,
                  0,
                  ["Ident", 485, 21, 0, "o"],
                  "===",
                  "Const",
                  1,
                  1,
                  0,
                  null
                ],
                [
                  "Return",
                  486,
                  7,
                  0,
                  "Const",
                  486,
                  7,
                  0,
                  "Null"
                ],
                "Return",
                488,
                1,
                0,
                "Binary",
                488,
                1,
                0,
                [
                  "Binary",
                  488,
                  8,
                  0,
                  [
                    "Binary",
                    488,
                    8,
                    0,
                    ["Ident", 488, 8, 0, "o"],
                    ".",
                    "Const",
                    488,
                    10,
                    0,
                    "constructor"
                  ],
                  "&&",
                  "Binary",
                  488,
                  25,
                  0,
                  [
                    "Binary",
                    488,
                    25,
                    0,
                    ["Ident", 488, 25, 0, "o"],
                    ".",
                    "Const",
                    488,
                    28,
                    0,
                    "constructor"
                  ],
                  ".",
                  "Const",
                  488,
                  40,
                  0,
                  "name"
                ],
                "||",
                "Call",
                488,
                48,
                0,
                [
                  "Binary",
                  488,
                  48,
                  0,
                  [
                    "Call",
                    488,
                    48,
                    0,
                    [
                      "Binary",
                      488,
                      48,
                      0,
                      ["Ident", 488, 48, 0, "_toString"],
                      ".",
                      "Const",
                      488,
                      48,
                      0,
                      "call"
                    ],
                    0,
                    ["Ident", 488, 61, 0, "o"]
                  ],
                  ".",
                  "Const",
                  488,
                  64,
                  0,
                  "slice"
                ],
                0,
                ["Const", 488, 70, 0, 8],
                ["Const", 488, 72, 0, -1]
              ]
            ],
            0
          ],
          type: {type: "generic", base: "functionBase", args: ["string"]},
          dependencies: ["__typeof"]
        },
        __first: {
          helper: [
            "Func",
            496,
            26,
            0,
            0,
            [["Ident", 496, 27, 0, "x"]],
            [],
            [],
            "Return",
            496,
            32,
            0,
            "Ident",
            496,
            32,
            0,
            "x"
          ],
          type: "function",
          dependencies: ["__first"]
        },
        __num: {
          helper: [
            "Func",
            523,
            24,
            0,
            0,
            [["Ident", 523, 25, 0, "num"]],
            [],
            [],
            "IfStatement",
            524,
            1,
            0,
            0,
            [
              "Binary",
              524,
              5,
              0,
              [
                "Unary",
                132,
                7,
                0,
                "typeof",
                "Ident",
                524,
                20,
                0,
                "num"
              ],
              "!==",
              "Const",
              132,
              25,
              0,
              "number"
            ],
            [
              "Throw",
              525,
              1,
              0,
              "Call",
              525,
              10,
              0,
              ["Ident", 525, 10, 0, "TypeError"],
              0,
              [
                "Binary",
                525,
                21,
                0,
                ["Const", 525, 21, 0, "Expected a number, got "],
                "+",
                "Call",
                494,
                49,
                0,
                ["Ident", 494, 49, 0, "__typeof"],
                0,
                ["Ident", 525, 57, 0, "num"]
              ]
            ],
            "Return",
            527,
            1,
            0,
            "Ident",
            527,
            1,
            0,
            "num"
          ],
          type: {type: "generic", base: "functionBase", args: ["number"]},
          dependencies: ["__num", "__typeof"]
        },
        __str: {
          helper: [
            "Func",
            529,
            24,
            0,
            0,
            [["Ident", 529, 25, 0, "str"]],
            [],
            [],
            "IfStatement",
            530,
            1,
            0,
            0,
            [
              "Binary",
              530,
              5,
              0,
              [
                "Unary",
                129,
                7,
                0,
                "typeof",
                "Ident",
                530,
                20,
                0,
                "str"
              ],
              "!==",
              "Const",
              129,
              25,
              0,
              "string"
            ],
            [
              "Throw",
              531,
              1,
              0,
              "Call",
              531,
              10,
              0,
              ["Ident", 531, 10, 0, "TypeError"],
              0,
              [
                "Binary",
                531,
                21,
                0,
                ["Const", 531, 21, 0, "Expected a string, got "],
                "+",
                "Call",
                494,
                49,
                0,
                ["Ident", 494, 49, 0, "__typeof"],
                0,
                ["Ident", 531, 57, 0, "str"]
              ]
            ],
            "Return",
            533,
            1,
            0,
            "Ident",
            533,
            1,
            0,
            "str"
          ],
          type: {type: "generic", base: "functionBase", args: ["string"]},
          dependencies: ["__str", "__typeof"]
        },
        __strnum: {
          helper: [
            "Func",
            535,
            27,
            0,
            0,
            [["Ident", 535, 28, 0, "strnum"]],
            ["type"],
            [],
            "BlockStatement",
            536,
            1,
            0,
            0,
            [
              "Binary",
              536,
              1,
              0,
              ["Ident", 536, 6, 0, "type"],
              "=",
              "Unary",
              536,
              13,
              0,
              "typeof",
              "Ident",
              536,
              20,
              0,
              "strnum"
            ],
            [
              "IfStatement",
              537,
              1,
              0,
              0,
              [
                "Binary",
                537,
                5,
                0,
                ["Ident", 537, 5, 0, "type"],
                "===",
                "Const",
                537,
                15,
                0,
                "string"
              ],
              [
                "Return",
                538,
                1,
                0,
                "Ident",
                538,
                1,
                0,
                "strnum"
              ],
              "IfStatement",
              537,
              1,
              0,
              0,
              [
                "Binary",
                539,
                10,
                0,
                ["Ident", 539, 10, 0, "type"],
                "===",
                "Const",
                539,
                20,
                0,
                "number"
              ],
              [
                "Return",
                540,
                1,
                0,
                "Call",
                540,
                1,
                0,
                ["Ident", 540, 1, 0, "String"],
                0,
                ["Ident", 540, 12, 0, "strnum"]
              ],
              "Throw",
              542,
              1,
              0,
              "Call",
              542,
              10,
              0,
              ["Ident", 542, 10, 0, "TypeError"],
              0,
              [
                "Binary",
                542,
                21,
                0,
                ["Const", 542, 21, 0, "Expected a string or number, got "],
                "+",
                "Call",
                494,
                49,
                0,
                ["Ident", 494, 49, 0, "__typeof"],
                0,
                ["Ident", 542, 67, 0, "strnum"]
              ]
            ]
          ],
          type: {type: "generic", base: "functionBase", args: ["string"]},
          dependencies: ["__strnum", "__typeof"]
        },
        __owns: {
          helper: [
            "Binary",
            643,
            23,
            0,
            [
              "Binary",
              643,
              23,
              0,
              ["Ident", 643, 23, 0, "Object"],
              ".",
              "Const",
              643,
              31,
              0,
              "prototype"
            ],
            ".",
            "Const",
            643,
            41,
            0,
            "hasOwnProperty"
          ],
          type: "any",
          dependencies: ["__owns"]
        },
        __cmp: {
          helper: [
            "Func",
            664,
            24,
            0,
            0,
            [
              ["Ident", 664, 25, 0, "left"],
              ["Ident", 664, 30, 0, "right"]
            ],
            ["type"],
            [],
            "IfStatement",
            665,
            1,
            0,
            0,
            [
              "Binary",
              665,
              5,
              0,
              ["Ident", 665, 5, 0, "left"],
              "===",
              "Ident",
              665,
              13,
              0,
              "right"
            ],
            [
              "Return",
              666,
              5,
              0,
              "Const",
              666,
              5,
              0,
              0
            ],
            "BlockStatement",
            668,
            1,
            0,
            0,
            [
              "Binary",
              668,
              1,
              0,
              ["Ident", 668, 8, 0, "type"],
              "=",
              "Unary",
              668,
              15,
              0,
              "typeof",
              "Ident",
              668,
              22,
              0,
              "left"
            ],
            [
              "IfStatement",
              669,
              1,
              0,
              0,
              [
                "Binary",
                669,
                7,
                0,
                [
                  "Binary",
                  43,
                  7,
                  0,
                  ["Ident", 669, 7, 0, "type"],
                  "!==",
                  "Const",
                  669,
                  17,
                  0,
                  "number"
                ],
                "&&",
                "Binary",
                43,
                7,
                0,
                ["Ident", 669, 27, 0, "type"],
                "!==",
                "Const",
                669,
                37,
                0,
                "string"
              ],
              [
                "Throw",
                670,
                1,
                0,
                "Call",
                670,
                12,
                0,
                ["Ident", 670, 12, 0, "TypeError"],
                0,
                [
                  "Binary",
                  670,
                  23,
                  0,
                  ["Const", 670, 23, 0, "Cannot compare a non-number/string: "],
                  "+",
                  "Ident",
                  670,
                  64,
                  0,
                  "type"
                ]
              ],
              "IfStatement",
              669,
              1,
              0,
              0,
              [
                "Binary",
                43,
                7,
                0,
                ["Ident", 671, 12, 0, "type"],
                "!==",
                "Unary",
                671,
                20,
                0,
                "typeof",
                "Ident",
                671,
                27,
                0,
                "right"
              ],
              [
                "Throw",
                672,
                1,
                0,
                "Call",
                672,
                12,
                0,
                ["Ident", 672, 12, 0, "TypeError"],
                0,
                [
                  "Binary",
                  672,
                  23,
                  0,
                  [
                    "Binary",
                    672,
                    23,
                    0,
                    [
                      "Binary",
                      672,
                      23,
                      0,
                      ["Const", 672, 23, 0, "Cannot compare elements of different types: "],
                      "+",
                      "Ident",
                      672,
                      72,
                      0,
                      "type"
                    ],
                    "+",
                    "Const",
                    672,
                    81,
                    0,
                    " vs "
                  ],
                  "+",
                  "Unary",
                  672,
                  90,
                  0,
                  "typeof",
                  "Ident",
                  672,
                  97,
                  0,
                  "right"
                ]
              ],
              "IfStatement",
              669,
              1,
              0,
              0,
              [
                "Binary",
                673,
                12,
                0,
                ["Ident", 673, 12, 0, "left"],
                "<",
                "Ident",
                673,
                20,
                0,
                "right"
              ],
              [
                "Return",
                674,
                1,
                0,
                "Const",
                674,
                1,
                0,
                -1
              ],
              "Return",
              676,
              7,
              0,
              "Const",
              676,
              7,
              0,
              1
            ]
          ],
          type: {type: "generic", base: "functionBase", args: ["number"]},
          dependencies: ["__cmp"]
        },
        __int: {
          helper: [
            "Func",
            687,
            24,
            0,
            0,
            [["Ident", 687, 25, 0, "num"]],
            [],
            [],
            "IfStatement",
            688,
            1,
            0,
            0,
            [
              "Binary",
              688,
              5,
              0,
              [
                "Unary",
                132,
                7,
                0,
                "typeof",
                "Ident",
                688,
                20,
                0,
                "num"
              ],
              "!==",
              "Const",
              132,
              25,
              0,
              "number"
            ],
            [
              "Throw",
              689,
              1,
              0,
              "Call",
              689,
              10,
              0,
              ["Ident", 689, 10, 0, "TypeError"],
              0,
              [
                "Binary",
                689,
                21,
                0,
                ["Const", 689, 21, 0, "Expected a number, got "],
                "+",
                "Call",
                494,
                49,
                0,
                ["Ident", 494, 49, 0, "__typeof"],
                0,
                ["Ident", 689, 57, 0, "num"]
              ]
            ],
            "IfStatement",
            688,
            1,
            0,
            0,
            [
              "Binary",
              685,
              7,
              0,
              [
                "Binary",
                685,
                7,
                0,
                ["Ident", 690, 10, 0, "num"],
                "%",
                "Const",
                690,
                23,
                0,
                1
              ],
              "!==",
              "Const",
              685,
              27,
              0,
              0
            ],
            [
              "Throw",
              691,
              1,
              0,
              "Call",
              691,
              10,
              0,
              ["Ident", 691, 10, 0, "TypeError"],
              0,
              [
                "Binary",
                691,
                21,
                0,
                ["Const", 691, 21, 0, "Expected an integer, got "],
                "+",
                "Ident",
                691,
                51,
                0,
                "num"
              ]
            ],
            "Return",
            693,
            1,
            0,
            "Ident",
            693,
            1,
            0,
            "num"
          ],
          type: {type: "generic", base: "functionBase", args: ["number"]},
          dependencies: ["__int", "__typeof"]
        },
        __nonzero: {
          helper: [
            "Func",
            695,
            28,
            0,
            0,
            [["Ident", 695, 29, 0, "num"]],
            [],
            [],
            "IfStatement",
            696,
            1,
            0,
            0,
            [
              "Binary",
              696,
              5,
              0,
              ["Ident", 696, 5, 0, "num"],
              "===",
              "Const",
              696,
              13,
              0,
              0
            ],
            [
              "Throw",
              697,
              1,
              0,
              "Call",
              697,
              10,
              0,
              ["Ident", 697, 10, 0, "RangeError"],
              0,
              [
                "Binary",
                697,
                22,
                0,
                ["Const", 697, 22, 0, "Expected non-zero, got "],
                "+",
                "Ident",
                697,
                50,
                0,
                "num"
              ]
            ],
            "Return",
            699,
            1,
            0,
            "Ident",
            699,
            1,
            0,
            "num"
          ],
          type: "function",
          dependencies: ["__nonzero"]
        },
        __lt: {
          helper: [
            "Func",
            701,
            23,
            0,
            0,
            [
              ["Ident", 701, 24, 0, "x"],
              ["Ident", 701, 26, 0, "y"]
            ],
            ["type"],
            [],
            "BlockStatement",
            702,
            1,
            0,
            0,
            [
              "Binary",
              702,
              1,
              0,
              ["Ident", 702, 6, 0, "type"],
              "=",
              "Unary",
              702,
              13,
              0,
              "typeof",
              "Ident",
              702,
              20,
              0,
              "x"
            ],
            [
              "IfStatement",
              703,
              1,
              0,
              0,
              [
                "Binary",
                632,
                25,
                0,
                [
                  "Binary",
                  636,
                  18,
                  0,
                  ["Ident", 703, 5, 0, "type"],
                  "!==",
                  "Const",
                  703,
                  20,
                  0,
                  "number"
                ],
                "&&",
                "Binary",
                632,
                37,
                0,
                ["Ident", 703, 5, 0, "type"],
                "!==",
                "Const",
                703,
                29,
                0,
                "string"
              ],
              [
                "Throw",
                704,
                1,
                0,
                "Call",
                704,
                10,
                0,
                ["Ident", 704, 10, 0, "TypeError"],
                0,
                [
                  "Binary",
                  704,
                  21,
                  0,
                  ["Const", 704, 21, 0, "Cannot compare a non-number/string: "],
                  "+",
                  "Ident",
                  704,
                  62,
                  0,
                  "type"
                ]
              ],
              "IfStatement",
              703,
              1,
              0,
              0,
              [
                "Binary",
                43,
                7,
                0,
                ["Ident", 705, 10, 0, "type"],
                "!==",
                "Unary",
                705,
                18,
                0,
                "typeof",
                "Ident",
                705,
                25,
                0,
                "y"
              ],
              [
                "Throw",
                706,
                1,
                0,
                "Call",
                706,
                10,
                0,
                ["Ident", 706, 10, 0, "TypeError"],
                0,
                [
                  "Binary",
                  706,
                  21,
                  0,
                  [
                    "Binary",
                    706,
                    21,
                    0,
                    [
                      "Binary",
                      706,
                      21,
                      0,
                      ["Const", 706, 21, 0, "Cannot compare elements of different types: "],
                      "+",
                      "Ident",
                      706,
                      70,
                      0,
                      "type"
                    ],
                    "+",
                    "Const",
                    706,
                    79,
                    0,
                    " vs "
                  ],
                  "+",
                  "Unary",
                  706,
                  88,
                  0,
                  "typeof",
                  "Ident",
                  706,
                  95,
                  0,
                  "y"
                ]
              ],
              "Return",
              708,
              1,
              0,
              "Binary",
              708,
              1,
              0,
              ["Ident", 708, 1, 0, "x"],
              "<",
              "Ident",
              708,
              9,
              0,
              "y"
            ]
          ],
          type: {type: "generic", base: "functionBase", args: ["boolean"]},
          dependencies: ["__lt"]
        },
        __lte: {
          helper: [
            "Func",
            710,
            24,
            0,
            0,
            [
              ["Ident", 710, 25, 0, "x"],
              ["Ident", 710, 27, 0, "y"]
            ],
            ["type"],
            [],
            "BlockStatement",
            711,
            1,
            0,
            0,
            [
              "Binary",
              711,
              1,
              0,
              ["Ident", 711, 6, 0, "type"],
              "=",
              "Unary",
              711,
              13,
              0,
              "typeof",
              "Ident",
              711,
              20,
              0,
              "x"
            ],
            [
              "IfStatement",
              712,
              1,
              0,
              0,
              [
                "Binary",
                632,
                25,
                0,
                [
                  "Binary",
                  636,
                  18,
                  0,
                  ["Ident", 712, 5, 0, "type"],
                  "!==",
                  "Const",
                  712,
                  20,
                  0,
                  "number"
                ],
                "&&",
                "Binary",
                632,
                37,
                0,
                ["Ident", 712, 5, 0, "type"],
                "!==",
                "Const",
                712,
                29,
                0,
                "string"
              ],
              [
                "Throw",
                713,
                1,
                0,
                "Call",
                713,
                10,
                0,
                ["Ident", 713, 10, 0, "TypeError"],
                0,
                [
                  "Binary",
                  713,
                  21,
                  0,
                  ["Const", 713, 21, 0, "Cannot compare a non-number/string: "],
                  "+",
                  "Ident",
                  713,
                  62,
                  0,
                  "type"
                ]
              ],
              "IfStatement",
              712,
              1,
              0,
              0,
              [
                "Binary",
                43,
                7,
                0,
                ["Ident", 714, 10, 0, "type"],
                "!==",
                "Unary",
                714,
                18,
                0,
                "typeof",
                "Ident",
                714,
                25,
                0,
                "y"
              ],
              [
                "Throw",
                715,
                1,
                0,
                "Call",
                715,
                10,
                0,
                ["Ident", 715, 10, 0, "TypeError"],
                0,
                [
                  "Binary",
                  715,
                  21,
                  0,
                  [
                    "Binary",
                    715,
                    21,
                    0,
                    [
                      "Binary",
                      715,
                      21,
                      0,
                      ["Const", 715, 21, 0, "Cannot compare elements of different types: "],
                      "+",
                      "Ident",
                      715,
                      70,
                      0,
                      "type"
                    ],
                    "+",
                    "Const",
                    715,
                    79,
                    0,
                    " vs "
                  ],
                  "+",
                  "Unary",
                  715,
                  88,
                  0,
                  "typeof",
                  "Ident",
                  715,
                  95,
                  0,
                  "y"
                ]
              ],
              "Return",
              717,
              1,
              0,
              "Binary",
              717,
              1,
              0,
              ["Ident", 717, 1, 0, "x"],
              "<=",
              "Ident",
              717,
              10,
              0,
              "y"
            ]
          ],
          type: {type: "generic", base: "functionBase", args: ["boolean"]},
          dependencies: ["__lte"]
        },
        __slice: {
          helper: [
            "Binary",
            964,
            24,
            0,
            [
              "Binary",
              964,
              24,
              0,
              ["Ident", 964, 24, 0, "Array"],
              ".",
              "Const",
              964,
              31,
              0,
              "prototype"
            ],
            ".",
            "Const",
            964,
            41,
            0,
            "slice"
          ],
          type: "any",
          dependencies: ["__slice"]
        },
        __freeze: {
          helper: [
            "IfExpression",
            966,
            25,
            0,
            [
              "Binary",
              138,
              7,
              0,
              [
                "Unary",
                138,
                7,
                0,
                "typeof",
                "Binary",
                966,
                41,
                0,
                ["Ident", 966, 41, 0, "Object"],
                ".",
                "Const",
                966,
                49,
                0,
                "freeze"
              ],
              "===",
              "Const",
              138,
              25,
              0,
              "function"
            ],
            [
              "Binary",
              967,
              1,
              0,
              ["Ident", 967, 1, 0, "Object"],
              ".",
              "Const",
              967,
              10,
              0,
              "freeze"
            ],
            "Func",
            969,
            4,
            0,
            0,
            [["Ident", 969, 5, 0, "x"]],
            [],
            [],
            "Return",
            969,
            10,
            0,
            "Ident",
            969,
            10,
            0,
            "x"
          ],
          type: "any",
          dependencies: ["__freeze"]
        },
        __freezeFunc: {
          helper: [
            "Func",
            971,
            32,
            0,
            0,
            [["Ident", 971, 33, 0, "x"]],
            [],
            [],
            "BlockStatement",
            972,
            1,
            0,
            0,
            [
              "IfStatement",
              972,
              1,
              0,
              0,
              [
                "Binary",
                49,
                7,
                0,
                [
                  "Binary",
                  972,
                  5,
                  0,
                  ["Ident", 972, 5, 0, "x"],
                  ".",
                  "Const",
                  972,
                  8,
                  0,
                  "prototype"
                ],
                "!=",
                "Const",
                1,
                1,
                0,
                null
              ],
              [
                "Call",
                973,
                1,
                0,
                ["Ident", 973, 1, 0, "__freeze"],
                0,
                [
                  "Binary",
                  973,
                  14,
                  0,
                  ["Ident", 973, 14, 0, "x"],
                  ".",
                  "Const",
                  973,
                  16,
                  0,
                  "prototype"
                ]
              ]
            ],
            [
              "Return",
              974,
              1,
              0,
              "Call",
              974,
              1,
              0,
              ["Ident", 974, 1, 0, "__freeze"],
              0,
              ["Ident", 974, 12, 0, "x"]
            ]
          ],
          type: "function",
          dependencies: ["__freeze", "__freezeFunc"]
        },
        __isArray: {
          helper: [
            "IfExpression",
            976,
            27,
            0,
            [
              "Binary",
              138,
              7,
              0,
              [
                "Unary",
                138,
                7,
                0,
                "typeof",
                "Binary",
                976,
                43,
                0,
                ["Ident", 976, 43, 0, "Array"],
                ".",
                "Const",
                976,
                50,
                0,
                "isArray"
              ],
              "===",
              "Const",
              138,
              25,
              0,
              "function"
            ],
            [
              "Binary",
              977,
              1,
              0,
              ["Ident", 977, 1, 0, "Array"],
              ".",
              "Const",
              977,
              9,
              0,
              "isArray"
            ],
            "Call",
            9,
            9,
            0,
            [
              "Func",
              9,
              12,
              0,
              0,
              [],
              ["_toString"],
              [],
              "BlockStatement",
              980,
              1,
              0,
              0,
              [
                "Binary",
                980,
                1,
                0,
                ["Ident", 980, 8, 0, "_toString"],
                "=",
                "Binary",
                980,
                21,
                0,
                [
                  "Binary",
                  980,
                  21,
                  0,
                  ["Ident", 980, 21, 0, "Object"],
                  ".",
                  "Const",
                  980,
                  29,
                  0,
                  "prototype"
                ],
                ".",
                "Const",
                980,
                39,
                0,
                "toString"
              ],
              [
                "Return",
                981,
                6,
                0,
                "Func",
                981,
                6,
                0,
                0,
                [["Ident", 981, 7, 0, "x"]],
                [],
                [],
                "Return",
                981,
                23,
                0,
                "Binary",
                981,
                23,
                0,
                [
                  "Call",
                  981,
                  23,
                  0,
                  [
                    "Binary",
                    981,
                    23,
                    0,
                    ["Ident", 981, 23, 0, "_toString"],
                    ".",
                    "Const",
                    981,
                    23,
                    0,
                    "call"
                  ],
                  0,
                  ["Ident", 981, 36, 0, "x"]
                ],
                "===",
                "Const",
                981,
                42,
                0,
                "[object Array]"
              ]
            ],
            0
          ],
          type: "any",
          dependencies: ["__isArray"]
        },
        __isObject: {
          helper: [
            "Func",
            983,
            30,
            0,
            0,
            [["Ident", 983, 31, 0, "x"]],
            [],
            [],
            "Return",
            983,
            47,
            0,
            "Binary",
            983,
            47,
            0,
            [
              "Binary",
              983,
              47,
              0,
              [
                "Unary",
                983,
                47,
                0,
                "typeof",
                "Ident",
                983,
                54,
                0,
                "x"
              ],
              "===",
              "Const",
              983,
              61,
              0,
              "object"
            ],
            "&&",
            "Binary",
            43,
            7,
            0,
            ["Ident", 983, 71, 0, "x"],
            "!==",
            "Const",
            983,
            76,
            0,
            null
          ],
          type: {type: "generic", base: "functionBase", args: ["boolean"]},
          dependencies: ["__isObject"]
        },
        __toArray: {
          helper: [
            "Func",
            985,
            29,
            0,
            0,
            [["Ident", 985, 30, 0, "x"]],
            [],
            [],
            "IfStatement",
            986,
            1,
            0,
            0,
            [
              "Binary",
              986,
              5,
              0,
              ["Ident", 986, 9, 0, "x"],
              "==",
              "Const",
              1,
              1,
              0,
              null
            ],
            [
              "Throw",
              987,
              1,
              0,
              "Call",
              987,
              10,
              0,
              ["Ident", 987, 10, 0, "TypeError"],
              0,
              [
                "Binary",
                987,
                21,
                0,
                ["Const", 987, 21, 0, "Expected an object, got "],
                "+",
                "Call",
                494,
                49,
                0,
                ["Ident", 494, 49, 0, "__typeof"],
                0,
                ["Ident", 987, 58, 0, "x"]
              ]
            ],
            "IfStatement",
            986,
            1,
            0,
            0,
            [
              "Call",
              141,
              146,
              0,
              ["Ident", 141, 146, 0, "__isArray"],
              0,
              ["Ident", 988, 20, 0, "x"]
            ],
            [
              "Return",
              989,
              1,
              0,
              "Ident",
              989,
              1,
              0,
              "x"
            ],
            "IfStatement",
            986,
            1,
            0,
            0,
            [
              "Binary",
              990,
              10,
              0,
              [
                "Unary",
                990,
                10,
                0,
                "typeof",
                "Ident",
                990,
                17,
                0,
                "x"
              ],
              "===",
              "Const",
              990,
              24,
              0,
              "string"
            ],
            [
              "Return",
              991,
              1,
              0,
              "Call",
              991,
              1,
              0,
              [
                "Binary",
                991,
                1,
                0,
                ["Ident", 991, 1, 0, "x"],
                ".",
                "Const",
                991,
                7,
                0,
                "split"
              ],
              0,
              ["Const", 991, 13, 0, ""]
            ],
            "Return",
            993,
            1,
            0,
            "Call",
            993,
            1,
            0,
            [
              "Binary",
              993,
              1,
              0,
              ["Ident", 993, 1, 0, "__slice"],
              ".",
              "Const",
              993,
              1,
              0,
              "call"
            ],
            0,
            ["Ident", 993, 14, 0, "x"]
          ],
          type: {type: "generic", base: "functionBase", args: ["array"]},
          dependencies: ["__isArray", "__slice", "__toArray", "__typeof"]
        },
        __create: {
          helper: [
            "IfExpression",
            995,
            25,
            0,
            [
              "Binary",
              138,
              7,
              0,
              [
                "Unary",
                138,
                7,
                0,
                "typeof",
                "Binary",
                995,
                41,
                0,
                ["Ident", 995, 41, 0, "Object"],
                ".",
                "Const",
                995,
                49,
                0,
                "create"
              ],
              "===",
              "Const",
              138,
              25,
              0,
              "function"
            ],
            [
              "Binary",
              996,
              1,
              0,
              ["Ident", 996, 1, 0, "Object"],
              ".",
              "Const",
              996,
              10,
              0,
              "create"
            ],
            "Func",
            998,
            4,
            0,
            0,
            [["Ident", 998, 5, 0, "x"]],
            [],
            [],
            "BlockStatement",
            999,
            1,
            0,
            0,
            [
              "Func",
              999,
              1,
              0,
              ["Ident", 999, 8, 0, "F"],
              [],
              [],
              []
            ],
            [
              "Binary",
              1000,
              1,
              0,
              [
                "Binary",
                1000,
                1,
                0,
                ["Ident", 1000, 1, 0, "F"],
                ".",
                "Const",
                1000,
                7,
                0,
                "prototype"
              ],
              "=",
              "Ident",
              1000,
              19,
              0,
              "x"
            ],
            [
              "Return",
              1001,
              1,
              0,
              "Call",
              1001,
              1,
              0,
              ["Ident", 1001, 8, 0, "F"],
              1
            ]
          ],
          type: "any",
          dependencies: ["__create"]
        },
        __pow: {
          helper: [
            "Binary",
            1003,
            22,
            0,
            ["Ident", 1003, 22, 0, "Math"],
            ".",
            "Const",
            1003,
            28,
            0,
            "pow"
          ],
          type: "any",
          dependencies: ["__pow"]
        },
        __floor: {
          helper: [
            "Binary",
            1004,
            24,
            0,
            ["Ident", 1004, 24, 0, "Math"],
            ".",
            "Const",
            1004,
            30,
            0,
            "floor"
          ],
          type: "any",
          dependencies: ["__floor"]
        },
        __sqrt: {
          helper: [
            "Binary",
            1005,
            23,
            0,
            ["Ident", 1005, 23, 0, "Math"],
            ".",
            "Const",
            1005,
            29,
            0,
            "sqrt"
          ],
          type: "any",
          dependencies: ["__sqrt"]
        },
        __log: {
          helper: [
            "Binary",
            1006,
            22,
            0,
            ["Ident", 1006, 22, 0, "Math"],
            ".",
            "Const",
            1006,
            28,
            0,
            "log"
          ],
          type: "any",
          dependencies: ["__log"]
        },
        __in: {
          helper: [
            "IfExpression",
            1150,
            21,
            0,
            [
              "Binary",
              138,
              7,
              0,
              [
                "Unary",
                138,
                7,
                0,
                "typeof",
                "Binary",
                1150,
                37,
                0,
                [
                  "Binary",
                  1150,
                  37,
                  0,
                  ["Ident", 1150, 37, 0, "Array"],
                  ".",
                  "Const",
                  1150,
                  44,
                  0,
                  "prototype"
                ],
                ".",
                "Const",
                1150,
                54,
                0,
                "indexOf"
              ],
              "===",
              "Const",
              138,
              25,
              0,
              "function"
            ],
            [
              "Call",
              9,
              9,
              0,
              [
                "Func",
                9,
                12,
                0,
                0,
                [],
                ["indexOf"],
                [],
                "BlockStatement",
                1152,
                1,
                0,
                0,
                [
                  "Binary",
                  1152,
                  1,
                  0,
                  ["Ident", 1152, 8, 0, "indexOf"],
                  "=",
                  "Binary",
                  1152,
                  19,
                  0,
                  [
                    "Binary",
                    1152,
                    19,
                    0,
                    ["Ident", 1152, 19, 0, "Array"],
                    ".",
                    "Const",
                    1152,
                    26,
                    0,
                    "prototype"
                  ],
                  ".",
                  "Const",
                  1152,
                  36,
                  0,
                  "indexOf"
                ],
                [
                  "Return",
                  1153,
                  6,
                  0,
                  "Func",
                  1153,
                  6,
                  0,
                  0,
                  [
                    ["Ident", 1153, 7, 0, "child"],
                    ["Ident", 1153, 13, 0, "parent"]
                  ],
                  [],
                  [],
                  "Return",
                  43,
                  7,
                  0,
                  "Binary",
                  43,
                  7,
                  0,
                  [
                    "Call",
                    1153,
                    35,
                    0,
                    [
                      "Binary",
                      1153,
                      35,
                      0,
                      ["Ident", 1153, 35, 0, "indexOf"],
                      ".",
                      "Const",
                      1153,
                      35,
                      0,
                      "call"
                    ],
                    0,
                    ["Ident", 1153, 46, 0, "parent"],
                    ["Ident", 1153, 53, 0, "child"]
                  ],
                  "!==",
                  "Const",
                  1153,
                  63,
                  0,
                  -1
                ]
              ],
              0
            ],
            "Func",
            1155,
            4,
            0,
            0,
            [
              ["Ident", 1155, 5, 0, "child"],
              ["Ident", 1155, 11, 0, "parent"]
            ],
            ["i", "len"],
            [],
            "BlockStatement",
            1156,
            1,
            0,
            0,
            [
              "Binary",
              1156,
              1,
              0,
              ["Ident", 1156, 8, 0, "len"],
              "=",
              "Unary",
              1156,
              14,
              0,
              "+",
              "Binary",
              1156,
              17,
              0,
              ["Ident", 1156, 17, 0, "parent"],
              ".",
              "Const",
              1156,
              24,
              0,
              "length"
            ],
            [
              "Binary",
              1157,
              1,
              0,
              ["Ident", 1157, 16, 0, "i"],
              "=",
              "Const",
              1157,
              20,
              0,
              -1
            ],
            [
              "For",
              1118,
              1,
              0,
              0,
              0,
              [
                "Binary",
                723,
                13,
                0,
                [
                  "Unary",
                  1158,
                  12,
                  0,
                  "++",
                  "Ident",
                  1158,
                  12,
                  0,
                  "i"
                ],
                "<",
                "Ident",
                1158,
                22,
                0,
                "len"
              ],
              0,
              "IfStatement",
              1159,
              1,
              0,
              0,
              [
                "Binary",
                1159,
                9,
                0,
                [
                  "Binary",
                  1159,
                  9,
                  0,
                  ["Ident", 1159, 9, 0, "child"],
                  "===",
                  "Binary",
                  1159,
                  18,
                  0,
                  ["Ident", 1159, 18, 0, "parent"],
                  ".",
                  "Ident",
                  1159,
                  26,
                  0,
                  "i"
                ],
                "&&",
                "Binary",
                1159,
                32,
                0,
                ["Ident", 1159, 46, 0, "i"],
                "in",
                "Ident",
                1159,
                32,
                0,
                "parent"
              ],
              [
                "Return",
                1160,
                1,
                0,
                "Const",
                1160,
                15,
                0,
                true
              ]
            ],
            [
              "Return",
              1161,
              1,
              0,
              "Const",
              1161,
              1,
              0,
              false
            ]
          ],
          type: {type: "generic", base: "functionBase", args: ["boolean"]},
          dependencies: ["__in"]
        },
        __genericFunc: {
          helper: [
            "Func",
            1639,
            33,
            0,
            0,
            [
              ["Ident", 1639, 34, 0, "numArgs"],
              ["Ident", 1639, 53, 0, "make"]
            ],
            ["any", "cache", "result"],
            [],
            "BlockStatement",
            1640,
            1,
            0,
            0,
            [
              "Binary",
              1640,
              1,
              0,
              ["Ident", 1640, 6, 0, "cache"],
              "=",
              "Call",
              1640,
              14,
              0,
              ["Ident", 1640, 14, 0, "WeakMap"],
              0
            ],
            [
              "Binary",
              1641,
              1,
              0,
              ["Ident", 1641, 6, 0, "any"],
              "=",
              "Obj",
              1641,
              12,
              0
            ],
            [
              "Func",
              1642,
              1,
              0,
              ["Ident", 1642, 6, 0, "generic"],
              [],
              ["_ref", "current", "i", "item", "type"],
              [],
              "BlockStatement",
              1513,
              1,
              0,
              0,
              [
                "Binary",
                1513,
                1,
                0,
                ["Ident", 1643, 45, 0, "current"],
                "=",
                "Ident",
                1643,
                55,
                0,
                "cache"
              ],
              [
                "For",
                1278,
                1,
                0,
                0,
                [
                  "Binary",
                  1188,
                  38,
                  0,
                  ["Ident", 1643, 15, 0, "i"],
                  "=",
                  "Binary",
                  583,
                  9,
                  0,
                  ["Ident", 1643, 20, 0, "numArgs"],
                  "-",
                  "Const",
                  1643,
                  32,
                  0,
                  1
                ],
                [
                  "Binary",
                  57,
                  55,
                  0,
                  ["Ident", 1643, 15, 0, "i"],
                  ">=",
                  "Const",
                  1643,
                  37,
                  0,
                  0
                ],
                [
                  "Unary",
                  1226,
                  35,
                  0,
                  "--",
                  "Ident",
                  1643,
                  15,
                  0,
                  "i"
                ],
                "BlockStatement",
                1644,
                1,
                0,
                0,
                [
                  "IfStatement",
                  788,
                  9,
                  0,
                  0,
                  [
                    "Binary",
                    49,
                    7,
                    0,
                    [
                      "Binary",
                      1644,
                      17,
                      0,
                      ["Ident", 1644, 17, 0, "_ref"],
                      "=",
                      "Binary",
                      1644,
                      17,
                      0,
                      ["Arguments", 1644, 17, 0],
                      ".",
                      "Ident",
                      1644,
                      28,
                      0,
                      "i"
                    ],
                    "!=",
                    "Const",
                    1,
                    1,
                    0,
                    null
                  ],
                  [
                    "Binary",
                    1644,
                    1,
                    0,
                    ["Ident", 1644, 10, 0, "type"],
                    "=",
                    "Ident",
                    1644,
                    17,
                    0,
                    "_ref"
                  ],
                  "Binary",
                  1644,
                  1,
                  0,
                  ["Ident", 1644, 10, 0, "type"],
                  "=",
                  "Ident",
                  1644,
                  32,
                  0,
                  "any"
                ],
                [
                  "Binary",
                  1645,
                  1,
                  0,
                  ["Ident", 1645, 18, 0, "item"],
                  "=",
                  "Call",
                  1645,
                  25,
                  0,
                  [
                    "Binary",
                    1645,
                    25,
                    0,
                    ["Ident", 1645, 25, 0, "current"],
                    ".",
                    "Const",
                    1645,
                    34,
                    0,
                    "get"
                  ],
                  0,
                  ["Ident", 1645, 38, 0, "type"]
                ],
                [
                  "IfStatement",
                  1646,
                  1,
                  0,
                  0,
                  [
                    "Binary",
                    1646,
                    9,
                    0,
                    ["Ident", 1646, 13, 0, "item"],
                    "==",
                    "Const",
                    1,
                    1,
                    0,
                    null
                  ],
                  [
                    "BlockStatement",
                    1647,
                    1,
                    0,
                    0,
                    [
                      "IfStatement",
                      1647,
                      16,
                      0,
                      0,
                      [
                        "Binary",
                        1647,
                        19,
                        0,
                        ["Ident", 1647, 19, 0, "i"],
                        "===",
                        "Const",
                        1647,
                        25,
                        0,
                        0
                      ],
                      [
                        "Binary",
                        1647,
                        1,
                        0,
                        ["Ident", 1647, 1, 0, "item"],
                        "=",
                        "Call",
                        1648,
                        1,
                        0,
                        [
                          "Binary",
                          1648,
                          1,
                          0,
                          ["Ident", 1648, 1, 0, "make"],
                          ".",
                          "Const",
                          1648,
                          1,
                          0,
                          "apply"
                        ],
                        0,
                        ["This", 1648, 17, 0],
                        ["Arguments", 1648, 26, 0]
                      ],
                      "Binary",
                      1647,
                      1,
                      0,
                      ["Ident", 1647, 1, 0, "item"],
                      "=",
                      "Call",
                      1650,
                      1,
                      0,
                      ["Ident", 1650, 1, 0, "WeakMap"],
                      0
                    ],
                    [
                      "Call",
                      1651,
                      1,
                      0,
                      [
                        "Binary",
                        1651,
                        1,
                        0,
                        ["Ident", 1651, 1, 0, "current"],
                        ".",
                        "Const",
                        1651,
                        17,
                        0,
                        "set"
                      ],
                      0,
                      ["Ident", 1651, 21, 0, "type"],
                      ["Ident", 1651, 26, 0, "item"]
                    ]
                  ]
                ],
                [
                  "Binary",
                  1509,
                  59,
                  0,
                  ["Ident", 1643, 45, 0, "current"],
                  "=",
                  "Ident",
                  1652,
                  1,
                  0,
                  "item"
                ]
              ],
              [
                "Return",
                1643,
                45,
                0,
                "Ident",
                1643,
                45,
                0,
                "current"
              ]
            ],
            [
              "Binary",
              1653,
              1,
              0,
              ["Ident", 1653, 6, 0, "result"],
              "=",
              "Call",
              1653,
              15,
              0,
              ["Ident", 1653, 15, 0, "generic"],
              0
            ],
            [
              "Binary",
              1654,
              1,
              0,
              [
                "Binary",
                1654,
                1,
                0,
                ["Ident", 1654, 1, 0, "result"],
                ".",
                "Const",
                1654,
                10,
                0,
                "generic"
              ],
              "=",
              "Ident",
              1654,
              20,
              0,
              "generic"
            ],
            [
              "Return",
              1655,
              1,
              0,
              "Ident",
              1655,
              1,
              0,
              "result"
            ]
          ],
          type: "function",
          dependencies: ["__genericFunc", "__toArray", "WeakMap"]
        },
        __range: {
          helper: [
            "Func",
            1902,
            1,
            0,
            0,
            [
              ["Ident", 1951, 27, 0, "start"],
              ["Ident", 1951, 43, 0, "end"],
              ["Ident", 1951, 58, 0, "step"],
              ["Ident", 1951, 74, 0, "inclusive"]
            ],
            ["i", "result"],
            [],
            "BlockStatement",
            1902,
            1,
            0,
            0,
            [
              "IfStatement",
              1686,
              1,
              0,
              0,
              [
                "Binary",
                653,
                18,
                0,
                [
                  "Unary",
                  132,
                  7,
                  0,
                  "typeof",
                  "Ident",
                  1951,
                  27,
                  0,
                  "start"
                ],
                "!==",
                "Const",
                132,
                25,
                0,
                "number"
              ],
              [
                "Throw",
                1687,
                1,
                0,
                "Call",
                1687,
                18,
                0,
                ["Ident", 1687, 18, 0, "TypeError"],
                0,
                [
                  "Binary",
                  608,
                  7,
                  0,
                  ["Const", 608, 7, 0, "Expected start to be a Number, got "],
                  "+",
                  "Call",
                  494,
                  49,
                  0,
                  ["Ident", 494, 49, 0, "__typeof"],
                  0,
                  ["Ident", 1951, 27, 0, "start"]
                ]
              ]
            ],
            [
              "IfStatement",
              1686,
              1,
              0,
              0,
              [
                "Binary",
                653,
                18,
                0,
                [
                  "Unary",
                  132,
                  7,
                  0,
                  "typeof",
                  "Ident",
                  1951,
                  43,
                  0,
                  "end"
                ],
                "!==",
                "Const",
                132,
                25,
                0,
                "number"
              ],
              [
                "Throw",
                1687,
                1,
                0,
                "Call",
                1687,
                18,
                0,
                ["Ident", 1687, 18, 0, "TypeError"],
                0,
                [
                  "Binary",
                  608,
                  7,
                  0,
                  ["Const", 608, 7, 0, "Expected end to be a Number, got "],
                  "+",
                  "Call",
                  494,
                  49,
                  0,
                  ["Ident", 494, 49, 0, "__typeof"],
                  0,
                  ["Ident", 1951, 43, 0, "end"]
                ]
              ]
            ],
            [
              "IfStatement",
              1686,
              1,
              0,
              0,
              [
                "Binary",
                653,
                18,
                0,
                [
                  "Unary",
                  132,
                  7,
                  0,
                  "typeof",
                  "Ident",
                  1951,
                  58,
                  0,
                  "step"
                ],
                "!==",
                "Const",
                132,
                25,
                0,
                "number"
              ],
              [
                "Throw",
                1687,
                1,
                0,
                "Call",
                1687,
                18,
                0,
                ["Ident", 1687, 18, 0, "TypeError"],
                0,
                [
                  "Binary",
                  608,
                  7,
                  0,
                  ["Const", 608, 7, 0, "Expected step to be a Number, got "],
                  "+",
                  "Call",
                  494,
                  49,
                  0,
                  ["Ident", 494, 49, 0, "__typeof"],
                  0,
                  ["Ident", 1951, 58, 0, "step"]
                ]
              ]
            ],
            [
              "IfStatement",
              1693,
              13,
              0,
              0,
              [
                "Binary",
                1693,
                16,
                0,
                ["Ident", 1951, 74, 0, "inclusive"],
                "==",
                "Const",
                1,
                1,
                0,
                null
              ],
              [
                "Binary",
                1694,
                1,
                0,
                ["Ident", 1951, 74, 0, "inclusive"],
                "=",
                "Const",
                1,
                1,
                0,
                false
              ],
              "IfStatement",
              1686,
              1,
              0,
              0,
              [
                "Binary",
                655,
                18,
                0,
                [
                  "Unary",
                  135,
                  7,
                  0,
                  "typeof",
                  "Ident",
                  1951,
                  74,
                  0,
                  "inclusive"
                ],
                "!==",
                "Const",
                135,
                25,
                0,
                "boolean"
              ],
              [
                "Throw",
                1687,
                1,
                0,
                "Call",
                1687,
                18,
                0,
                ["Ident", 1687, 18, 0, "TypeError"],
                0,
                [
                  "Binary",
                  608,
                  7,
                  0,
                  ["Const", 608, 7, 0, "Expected inclusive to be a Boolean, got "],
                  "+",
                  "Call",
                  494,
                  49,
                  0,
                  ["Ident", 494, 49, 0, "__typeof"],
                  0,
                  ["Ident", 1951, 74, 0, "inclusive"]
                ]
              ]
            ],
            [
              "IfStatement",
              1952,
              1,
              0,
              0,
              [
                "Binary",
                1952,
                5,
                0,
                ["Ident", 1952, 5, 0, "step"],
                "===",
                "Const",
                1952,
                14,
                0,
                0
              ],
              [
                "Throw",
                1953,
                1,
                0,
                "Call",
                1953,
                10,
                0,
                ["Ident", 1953, 10, 0, "RangeError"],
                0,
                ["Const", 1953, 22, 0, "step cannot be zero"]
              ],
              "IfStatement",
              1952,
              1,
              0,
              0,
              [
                "Unary",
                1954,
                10,
                0,
                "!",
                "Call",
                1954,
                14,
                0,
                ["Ident", 1954, 14, 0, "isFinite"],
                0,
                ["Ident", 1954, 25, 0, "start"]
              ],
              [
                "Throw",
                1955,
                1,
                0,
                "Call",
                1955,
                10,
                0,
                ["Ident", 1955, 10, 0, "RangeError"],
                0,
                ["Const", 1955, 22, 0, "start must be finite"]
              ],
              "IfStatement",
              1952,
              1,
              0,
              0,
              [
                "Unary",
                1956,
                10,
                0,
                "!",
                "Call",
                1956,
                14,
                0,
                ["Ident", 1956, 14, 0, "isFinite"],
                0,
                ["Ident", 1956, 25, 0, "end"]
              ],
              [
                "Throw",
                1957,
                1,
                0,
                "Call",
                1957,
                10,
                0,
                ["Ident", 1957, 10, 0, "RangeError"],
                0,
                ["Const", 1957, 22, 0, "end must be finite"]
              ]
            ],
            [
              "Binary",
              1958,
              1,
              0,
              ["Ident", 1958, 6, 0, "result"],
              "=",
              "Arr",
              1958,
              15,
              0
            ],
            [
              "Binary",
              1959,
              1,
              0,
              ["Ident", 1959, 14, 0, "i"],
              "=",
              "Ident",
              1959,
              18,
              0,
              "start"
            ],
            [
              "IfStatement",
              1960,
              1,
              0,
              0,
              [
                "Binary",
                57,
                23,
                0,
                ["Ident", 1960, 5, 0, "step"],
                ">",
                "Const",
                1960,
                14,
                0,
                0
              ],
              [
                "BlockStatement",
                1961,
                1,
                0,
                0,
                [
                  "For",
                  1118,
                  1,
                  0,
                  0,
                  0,
                  [
                    "Binary",
                    1961,
                    10,
                    0,
                    ["Ident", 1961, 10, 0, "i"],
                    "<",
                    "Ident",
                    1961,
                    15,
                    0,
                    "end"
                  ],
                  [
                    "Binary",
                    1961,
                    20,
                    0,
                    ["Ident", 1961, 20, 0, "i"],
                    "+=",
                    "Ident",
                    1961,
                    26,
                    0,
                    "step"
                  ],
                  "Call",
                  1962,
                  1,
                  0,
                  [
                    "Binary",
                    1962,
                    1,
                    0,
                    ["Ident", 1962, 1, 0, "result"],
                    ".",
                    "Const",
                    1962,
                    14,
                    0,
                    "push"
                  ],
                  0,
                  ["Ident", 1962, 19, 0, "i"]
                ],
                [
                  "IfStatement",
                  1963,
                  1,
                  0,
                  0,
                  [
                    "Binary",
                    1963,
                    7,
                    0,
                    ["Ident", 1963, 7, 0, "inclusive"],
                    "&&",
                    "Binary",
                    1963,
                    21,
                    0,
                    ["Ident", 1963, 21, 0, "i"],
                    "<=",
                    "Ident",
                    1963,
                    27,
                    0,
                    "end"
                  ],
                  [
                    "Call",
                    1964,
                    1,
                    0,
                    [
                      "Binary",
                      1964,
                      1,
                      0,
                      ["Ident", 1964, 1, 0, "result"],
                      ".",
                      "Const",
                      1964,
                      14,
                      0,
                      "push"
                    ],
                    0,
                    ["Ident", 1964, 19, 0, "i"]
                  ]
                ]
              ],
              "BlockStatement",
              1966,
              1,
              0,
              0,
              [
                "For",
                1118,
                1,
                0,
                0,
                0,
                [
                  "Binary",
                  57,
                  23,
                  0,
                  ["Ident", 1966, 10, 0, "i"],
                  ">",
                  "Ident",
                  1966,
                  15,
                  0,
                  "end"
                ],
                [
                  "Binary",
                  1966,
                  20,
                  0,
                  ["Ident", 1966, 20, 0, "i"],
                  "+=",
                  "Ident",
                  1966,
                  26,
                  0,
                  "step"
                ],
                "Call",
                1967,
                1,
                0,
                [
                  "Binary",
                  1967,
                  1,
                  0,
                  ["Ident", 1967, 1, 0, "result"],
                  ".",
                  "Const",
                  1967,
                  14,
                  0,
                  "push"
                ],
                0,
                ["Ident", 1967, 19, 0, "i"]
              ],
              [
                "IfStatement",
                1968,
                1,
                0,
                0,
                [
                  "Binary",
                  1968,
                  7,
                  0,
                  ["Ident", 1968, 7, 0, "inclusive"],
                  "&&",
                  "Binary",
                  57,
                  55,
                  0,
                  ["Ident", 1968, 21, 0, "i"],
                  ">=",
                  "Ident",
                  1968,
                  27,
                  0,
                  "end"
                ],
                [
                  "Call",
                  1969,
                  1,
                  0,
                  [
                    "Binary",
                    1969,
                    1,
                    0,
                    ["Ident", 1969, 1, 0, "result"],
                    ".",
                    "Const",
                    1969,
                    14,
                    0,
                    "push"
                  ],
                  0,
                  ["Ident", 1969, 19, 0, "i"]
                ]
              ]
            ],
            [
              "Return",
              1970,
              1,
              0,
              "Ident",
              1970,
              1,
              0,
              "result"
            ]
          ],
          type: {type: "generic", base: "functionBase", args: ["numberArray"]},
          dependencies: ["__range", "__typeof"]
        },
        __step: {
          helper: [
            "Func",
            1902,
            1,
            0,
            0,
            [
              ["Ident", 1972, 26, 0, "array"],
              ["Ident", 1972, 32, 0, "step"]
            ],
            ["i", "len", "result"],
            [],
            "BlockStatement",
            1902,
            1,
            0,
            0,
            [
              "IfStatement",
              1686,
              1,
              0,
              0,
              [
                "Binary",
                653,
                18,
                0,
                [
                  "Unary",
                  132,
                  7,
                  0,
                  "typeof",
                  "Ident",
                  1972,
                  32,
                  0,
                  "step"
                ],
                "!==",
                "Const",
                132,
                25,
                0,
                "number"
              ],
              [
                "Throw",
                1687,
                1,
                0,
                "Call",
                1687,
                18,
                0,
                ["Ident", 1687, 18, 0, "TypeError"],
                0,
                [
                  "Binary",
                  608,
                  7,
                  0,
                  ["Const", 608, 7, 0, "Expected step to be a Number, got "],
                  "+",
                  "Call",
                  494,
                  49,
                  0,
                  ["Ident", 494, 49, 0, "__typeof"],
                  0,
                  ["Ident", 1972, 32, 0, "step"]
                ]
              ]
            ],
            [
              "IfStatement",
              1973,
              1,
              0,
              0,
              [
                "Binary",
                1973,
                5,
                0,
                ["Ident", 1973, 5, 0, "step"],
                "===",
                "Const",
                1973,
                14,
                0,
                0
              ],
              [
                "Throw",
                1974,
                1,
                0,
                "Call",
                1974,
                10,
                0,
                ["Ident", 1974, 10, 0, "RangeError"],
                0,
                ["Const", 1974, 22, 0, "step cannot be zero"]
              ],
              "IfStatement",
              1973,
              1,
              0,
              0,
              [
                "Binary",
                1975,
                10,
                0,
                ["Ident", 1975, 10, 0, "step"],
                "===",
                "Const",
                1975,
                19,
                0,
                1
              ],
              [
                "Return",
                1976,
                1,
                0,
                "Call",
                1976,
                1,
                0,
                ["Ident", 1976, 1, 0, "__toArray"],
                0,
                ["Ident", 1976, 16, 0, "array"]
              ],
              "IfStatement",
              1973,
              1,
              0,
              0,
              [
                "Binary",
                1977,
                10,
                0,
                ["Ident", 1977, 10, 0, "step"],
                "===",
                "Const",
                1977,
                18,
                0,
                -1
              ],
              [
                "Return",
                1978,
                1,
                0,
                "Call",
                1978,
                1,
                0,
                [
                  "Binary",
                  1978,
                  1,
                  0,
                  [
                    "Call",
                    1978,
                    1,
                    0,
                    [
                      "Binary",
                      1978,
                      1,
                      0,
                      ["Ident", 1978, 1, 0, "__slice"],
                      ".",
                      "Const",
                      1978,
                      1,
                      0,
                      "call"
                    ],
                    0,
                    ["Ident", 1978, 14, 0, "array"]
                  ],
                  ".",
                  "Const",
                  1978,
                  21,
                  0,
                  "reverse"
                ],
                0
              ],
              "IfStatement",
              1973,
              1,
              0,
              0,
              [
                "Binary",
                682,
                7,
                0,
                [
                  "Binary",
                  572,
                  9,
                  0,
                  ["Ident", 1979, 10, 0, "step"],
                  "%",
                  "Const",
                  1979,
                  23,
                  0,
                  1
                ],
                "!==",
                "Const",
                682,
                26,
                0,
                0
              ],
              [
                "Throw",
                1980,
                1,
                0,
                "Call",
                1980,
                10,
                0,
                ["Ident", 1980, 10, 0, "RangeError"],
                0,
                [
                  "Binary",
                  608,
                  7,
                  0,
                  ["Const", 1980, 22, 0, "step must be an integer, got "],
                  "+",
                  "Call",
                  1980,
                  54,
                  0,
                  ["Ident", 1980, 54, 0, "String"],
                  0,
                  ["Ident", 1980, 61, 0, "step"]
                ]
              ],
              "BlockStatement",
              1982,
              1,
              0,
              0,
              [
                "Binary",
                1982,
                1,
                0,
                ["Ident", 1982, 8, 0, "result"],
                "=",
                "Arr",
                1982,
                17,
                0
              ],
              [
                "IfStatement",
                1983,
                1,
                0,
                0,
                [
                  "Binary",
                  759,
                  9,
                  0,
                  ["Ident", 1983, 7, 0, "step"],
                  ">",
                  "Const",
                  1983,
                  15,
                  0,
                  0
                ],
                [
                  "BlockStatement",
                  1984,
                  1,
                  0,
                  0,
                  [
                    "Binary",
                    1984,
                    1,
                    0,
                    ["Ident", 1984, 18, 0, "i"],
                    "=",
                    "Const",
                    1984,
                    23,
                    0,
                    0
                  ],
                  [
                    "Binary",
                    1985,
                    1,
                    0,
                    ["Ident", 1985, 10, 0, "len"],
                    "=",
                    "Call",
                    551,
                    11,
                    0,
                    ["Ident", 551, 11, 0, "__num"],
                    0,
                    [
                      "Binary",
                      1985,
                      18,
                      0,
                      ["Ident", 1985, 18, 0, "array"],
                      ".",
                      "Const",
                      1985,
                      24,
                      0,
                      "length"
                    ]
                  ],
                  [
                    "For",
                    1118,
                    1,
                    0,
                    0,
                    0,
                    [
                      "Binary",
                      723,
                      13,
                      0,
                      ["Ident", 1986, 12, 0, "i"],
                      "<",
                      "Ident",
                      1986,
                      16,
                      0,
                      "len"
                    ],
                    [
                      "Binary",
                      897,
                      11,
                      0,
                      ["Ident", 1986, 21, 0, "i"],
                      "+=",
                      "Ident",
                      1986,
                      26,
                      0,
                      "step"
                    ],
                    "Call",
                    1987,
                    1,
                    0,
                    [
                      "Binary",
                      1987,
                      1,
                      0,
                      ["Ident", 1987, 1, 0, "result"],
                      ".",
                      "Const",
                      1987,
                      16,
                      0,
                      "push"
                    ],
                    0,
                    [
                      "Binary",
                      1987,
                      21,
                      0,
                      ["Ident", 1987, 21, 0, "array"],
                      ".",
                      "Ident",
                      1987,
                      27,
                      0,
                      "i"
                    ]
                  ]
                ],
                "BlockStatement",
                1989,
                1,
                0,
                0,
                [
                  "Binary",
                  1989,
                  1,
                  0,
                  ["Ident", 1989, 18, 0, "i"],
                  "=",
                  "Binary",
                  583,
                  9,
                  0,
                  [
                    "Call",
                    551,
                    11,
                    0,
                    ["Ident", 551, 11, 0, "__num"],
                    0,
                    [
                      "Binary",
                      1989,
                      22,
                      0,
                      ["Ident", 1989, 22, 0, "array"],
                      ".",
                      "Const",
                      1989,
                      29,
                      0,
                      "length"
                    ]
                  ],
                  "-",
                  "Const",
                  1989,
                  38,
                  0,
                  1
                ],
                [
                  "For",
                  1118,
                  1,
                  0,
                  0,
                  0,
                  [
                    "Binary",
                    761,
                    9,
                    0,
                    ["Ident", 1990, 12, 0, "i"],
                    ">=",
                    "Const",
                    1990,
                    18,
                    0,
                    0
                  ],
                  [
                    "Binary",
                    897,
                    11,
                    0,
                    ["Ident", 1990, 20, 0, "i"],
                    "+=",
                    "Ident",
                    1990,
                    25,
                    0,
                    "step"
                  ],
                  "Call",
                  1991,
                  1,
                  0,
                  [
                    "Binary",
                    1991,
                    1,
                    0,
                    ["Ident", 1991, 1, 0, "result"],
                    ".",
                    "Const",
                    1991,
                    16,
                    0,
                    "push"
                  ],
                  0,
                  [
                    "Binary",
                    1991,
                    21,
                    0,
                    ["Ident", 1991, 21, 0, "array"],
                    ".",
                    "Ident",
                    1991,
                    27,
                    0,
                    "i"
                  ]
                ]
              ],
              [
                "Return",
                1992,
                1,
                0,
                "Ident",
                1992,
                1,
                0,
                "result"
              ]
            ]
          ],
          type: {type: "generic", base: "functionBase", args: ["array"]},
          dependencies: ["__num", "__slice", "__step", "__toArray", "__typeof"]
        },
        __sliceStep: {
          helper: [
            "Func",
            1994,
            31,
            0,
            0,
            [
              ["Ident", 1994, 32, 0, "array"],
              ["Ident", 1994, 38, 0, "start"],
              ["Ident", 1994, 45, 0, "end"],
              ["Ident", 1994, 58, 0, "step"],
              ["Ident", 1994, 64, 0, "inclusive"]
            ],
            ["arr"],
            [],
            "BlockStatement",
            1995,
            1,
            0,
            0,
            [
              "IfStatement",
              1995,
              12,
              0,
              0,
              [
                "Binary",
                1995,
                15,
                0,
                ["Ident", 1995, 15, 0, "step"],
                "<",
                "Const",
                1995,
                24,
                0,
                0
              ],
              [
                "Binary",
                1995,
                1,
                0,
                ["Ident", 1995, 6, 0, "arr"],
                "=",
                "Call",
                1996,
                1,
                0,
                [
                  "Binary",
                  1996,
                  1,
                  0,
                  ["Ident", 1996, 1, 0, "__slice"],
                  ".",
                  "Const",
                  1996,
                  1,
                  0,
                  "call"
                ],
                0,
                ["Ident", 1996, 14, 0, "array"],
                [
                  "IfExpression",
                  1996,
                  20,
                  0,
                  ["Ident", 1996, 23, 0, "inclusive"],
                  ["Ident", 1996, 38, 0, "end"],
                  "Binary",
                  1996,
                  47,
                  0,
                  [
                    "Unary",
                    368,
                    21,
                    0,
                    "+",
                    "Ident",
                    1996,
                    47,
                    0,
                    "end"
                  ],
                  "+",
                  "Const",
                  1996,
                  55,
                  0,
                  1
                ],
                [
                  "Binary",
                  1996,
                  57,
                  0,
                  [
                    "Binary",
                    1996,
                    57,
                    0,
                    [
                      "Unary",
                      368,
                      21,
                      0,
                      "+",
                      "Ident",
                      1996,
                      57,
                      0,
                      "start"
                    ],
                    "+",
                    "Const",
                    1996,
                    67,
                    0,
                    1
                  ],
                  "||",
                  "Const",
                  1996,
                  71,
                  0,
                  1,
                  1
                ]
              ],
              "Binary",
              1995,
              1,
              0,
              ["Ident", 1995, 6, 0, "arr"],
              "=",
              "Call",
              1998,
              1,
              0,
              [
                "Binary",
                1998,
                1,
                0,
                ["Ident", 1998, 1, 0, "__slice"],
                ".",
                "Const",
                1998,
                1,
                0,
                "call"
              ],
              0,
              ["Ident", 1998, 14, 0, "array"],
              ["Ident", 1998, 20, 0, "start"],
              [
                "IfExpression",
                1998,
                27,
                0,
                ["Ident", 1998, 30, 0, "inclusive"],
                [
                  "Binary",
                  1998,
                  45,
                  0,
                  [
                    "Binary",
                    1998,
                    45,
                    0,
                    [
                      "Unary",
                      368,
                      21,
                      0,
                      "+",
                      "Ident",
                      1998,
                      45,
                      0,
                      "end"
                    ],
                    "+",
                    "Const",
                    1998,
                    53,
                    0,
                    1
                  ],
                  "||",
                  "Const",
                  1998,
                  57,
                  0,
                  1,
                  1
                ],
                "Ident",
                1998,
                71,
                0,
                "end"
              ]
            ],
            [
              "IfStatement",
              1999,
              1,
              0,
              0,
              [
                "Binary",
                1999,
                5,
                0,
                ["Ident", 1999, 5, 0, "step"],
                "===",
                "Const",
                1999,
                14,
                0,
                1
              ],
              [
                "Return",
                2000,
                1,
                0,
                "Ident",
                2000,
                1,
                0,
                "arr"
              ],
              "IfStatement",
              1999,
              1,
              0,
              0,
              [
                "Binary",
                2001,
                10,
                0,
                ["Ident", 2001, 10, 0, "step"],
                "===",
                "Const",
                2001,
                18,
                0,
                -1
              ],
              [
                "Return",
                2002,
                1,
                0,
                "Call",
                2002,
                1,
                0,
                [
                  "Binary",
                  2002,
                  1,
                  0,
                  ["Ident", 2002, 1, 0, "arr"],
                  ".",
                  "Const",
                  2002,
                  9,
                  0,
                  "reverse"
                ],
                0
              ],
              "Return",
              2004,
              1,
              0,
              "Call",
              2004,
              1,
              0,
              ["Ident", 2004, 1, 0, "__step"],
              0,
              ["Ident", 2004, 12, 0, "arr"],
              ["Ident", 2004, 16, 0, "step"]
            ]
          ],
          type: {type: "generic", base: "functionBase", args: ["array"]},
          dependencies: ["__slice", "__sliceStep", "__step"]
        },
        __arrayToIter: {
          helper: [
            "Call",
            9,
            9,
            0,
            [
              "Func",
              9,
              12,
              0,
              0,
              [],
              ["proto"],
              [],
              "BlockStatement",
              2104,
              1,
              0,
              0,
              [
                "Binary",
                2104,
                1,
                0,
                ["Ident", 2104, 6, 0, "proto"],
                "=",
                "Obj",
                2104,
                14,
                0,
                2105,
                5,
                null,
                "iterator",
                [
                  "Func",
                  2105,
                  16,
                  0,
                  0,
                  [],
                  [],
                  [],
                  "Return",
                  2105,
                  18,
                  0,
                  "This",
                  2105,
                  18,
                  0
                ],
                2106,
                5,
                null,
                "next",
                [
                  "Func",
                  2106,
                  12,
                  0,
                  0,
                  [],
                  ["array", "i"],
                  [],
                  "BlockStatement",
                  2107,
                  1,
                  0,
                  0,
                  [
                    "Binary",
                    2107,
                    1,
                    0,
                    ["Ident", 2107, 10, 0, "i"],
                    "=",
                    "Binary",
                    581,
                    9,
                    0,
                    [
                      "Call",
                      551,
                      11,
                      0,
                      ["Ident", 551, 11, 0, "__num"],
                      0,
                      [
                        "Binary",
                        2107,
                        14,
                        0,
                        ["This", 2107, 14, 0],
                        ".",
                        "Const",
                        2107,
                        16,
                        0,
                        "index"
                      ]
                    ],
                    "+",
                    "Const",
                    2107,
                    24,
                    0,
                    1
                  ],
                  [
                    "Binary",
                    2108,
                    1,
                    0,
                    ["Ident", 2108, 10, 0, "array"],
                    "=",
                    "Binary",
                    2108,
                    18,
                    0,
                    ["This", 2108, 18, 0],
                    ".",
                    "Const",
                    2108,
                    20,
                    0,
                    "array"
                  ],
                  [
                    "IfStatement",
                    2109,
                    1,
                    0,
                    0,
                    [
                      "Binary",
                      761,
                      9,
                      0,
                      ["Ident", 2109, 9, 0, "i"],
                      ">=",
                      "Call",
                      728,
                      22,
                      0,
                      ["Ident", 728, 22, 0, "__num"],
                      0,
                      [
                        "Binary",
                        2109,
                        14,
                        0,
                        ["Ident", 2109, 14, 0, "array"],
                        ".",
                        "Const",
                        2109,
                        21,
                        0,
                        "length"
                      ]
                    ],
                    [
                      "Return",
                      2110,
                      1,
                      0,
                      "Obj",
                      2110,
                      1,
                      0,
                      2110,
                      11,
                      null,
                      "done",
                      ["Const", 2110, 16, 0, true],
                      2110,
                      22,
                      null,
                      "value",
                      ["Const", 2110, 29, 0]
                    ],
                    "BlockStatement",
                    2112,
                    1,
                    0,
                    0,
                    [
                      "Binary",
                      2112,
                      1,
                      0,
                      [
                        "Binary",
                        2112,
                        1,
                        0,
                        ["This", 2112, 1, 0],
                        ".",
                        "Const",
                        2112,
                        10,
                        0,
                        "index"
                      ],
                      "=",
                      "Ident",
                      2112,
                      18,
                      0,
                      "i"
                    ],
                    [
                      "Return",
                      2113,
                      1,
                      0,
                      "Obj",
                      2113,
                      1,
                      0,
                      2113,
                      11,
                      null,
                      "done",
                      ["Const", 2113, 16, 0, false],
                      2113,
                      23,
                      null,
                      "value",
                      [
                        "Binary",
                        2113,
                        30,
                        0,
                        ["Ident", 2113, 30, 0, "array"],
                        ".",
                        "Ident",
                        2113,
                        37,
                        0,
                        "i"
                      ]
                    ]
                  ]
                ]
              ],
              [
                "Return",
                1902,
                1,
                0,
                "Func",
                1902,
                1,
                0,
                0,
                [["Ident", 2115, 5, 0, "array"]],
                ["_o"],
                [],
                "BlockStatement",
                1902,
                1,
                0,
                0,
                [
                  "IfStatement",
                  1686,
                  1,
                  0,
                  0,
                  [
                    "Unary",
                    659,
                    18,
                    0,
                    "!",
                    "Call",
                    141,
                    146,
                    0,
                    ["Ident", 141, 146, 0, "__isArray"],
                    0,
                    ["Ident", 2115, 5, 0, "array"]
                  ],
                  [
                    "Throw",
                    1687,
                    1,
                    0,
                    "Call",
                    1687,
                    18,
                    0,
                    ["Ident", 1687, 18, 0, "TypeError"],
                    0,
                    [
                      "Binary",
                      608,
                      7,
                      0,
                      ["Const", 608, 7, 0, "Expected array to be an Array, got "],
                      "+",
                      "Call",
                      494,
                      49,
                      0,
                      ["Ident", 494, 49, 0, "__typeof"],
                      0,
                      ["Ident", 2115, 5, 0, "array"]
                    ]
                  ]
                ],
                [
                  "Binary",
                  2116,
                  1,
                  0,
                  ["Ident", 2116, 1, 0, "_o"],
                  "=",
                  "Call",
                  2116,
                  1,
                  0,
                  ["Ident", 2116, 1, 0, "__create"],
                  0,
                  ["Ident", 2116, 14, 0, "proto"]
                ],
                [
                  "Binary",
                  2117,
                  7,
                  0,
                  [
                    "Binary",
                    2117,
                    7,
                    0,
                    ["Ident", 2116, 1, 0, "_o"],
                    ".",
                    "Const",
                    2117,
                    7,
                    0,
                    "array"
                  ],
                  "=",
                  "Ident",
                  2117,
                  7,
                  0,
                  "array"
                ],
                [
                  "Binary",
                  2118,
                  7,
                  0,
                  [
                    "Binary",
                    2118,
                    7,
                    0,
                    ["Ident", 2116, 1, 0, "_o"],
                    ".",
                    "Const",
                    2118,
                    7,
                    0,
                    "index"
                  ],
                  "=",
                  "Const",
                  2118,
                  13,
                  0,
                  -1
                ],
                [
                  "Return",
                  2116,
                  1,
                  0,
                  "Ident",
                  2116,
                  1,
                  0,
                  "_o"
                ]
              ]
            ],
            0
          ],
          type: {
            type: "generic",
            base: "functionBase",
            args: [{
              type: "object",
              pairs: {array: "array", index: "number"}
            }]
          },
          dependencies: ["__arrayToIter", "__create", "__isArray", "__num", "__typeof"]
        },
        __iter: {
          helper: [
            "Func",
            2121,
            25,
            0,
            0,
            [["Ident", 2121, 26, 0, "iterable"]],
            [],
            [],
            "IfStatement",
            2122,
            1,
            0,
            0,
            [
              "Binary",
              2122,
              5,
              0,
              ["Ident", 2122, 9, 0, "iterable"],
              "==",
              "Const",
              1,
              1,
              0,
              null
            ],
            [
              "Throw",
              2123,
              1,
              0,
              "Call",
              2123,
              10,
              0,
              ["Ident", 2123, 10, 0, "TypeError"],
              0,
              [
                "Binary",
                608,
                7,
                0,
                ["Const", 2123, 21, 0, "Expected iterable to be an Object, got "],
                "+",
                "Call",
                494,
                49,
                0,
                ["Ident", 494, 49, 0, "__typeof"],
                0,
                ["Ident", 2123, 70, 0, "iterable"]
              ]
            ],
            "IfStatement",
            2122,
            1,
            0,
            0,
            [
              "Call",
              141,
              146,
              0,
              ["Ident", 141, 146, 0, "__isArray"],
              0,
              ["Ident", 2124, 20, 0, "iterable"]
            ],
            [
              "Return",
              2125,
              1,
              0,
              "Call",
              2125,
              1,
              0,
              ["Ident", 2125, 1, 0, "__arrayToIter"],
              0,
              ["Ident", 2125, 21, 0, "iterable"]
            ],
            "IfStatement",
            2122,
            1,
            0,
            0,
            [
              "Binary",
              138,
              7,
              0,
              [
                "Unary",
                138,
                7,
                0,
                "typeof",
                "Binary",
                2126,
                23,
                0,
                ["Ident", 2126, 23, 0, "iterable"],
                ".",
                "Const",
                2126,
                33,
                0,
                "iterator"
              ],
              "===",
              "Const",
              138,
              25,
              0,
              "function"
            ],
            [
              "Return",
              2127,
              1,
              0,
              "Call",
              2127,
              1,
              0,
              [
                "Binary",
                2127,
                1,
                0,
                ["Ident", 2127, 1, 0, "iterable"],
                ".",
                "Const",
                2127,
                14,
                0,
                "iterator"
              ],
              0
            ],
            "IfStatement",
            2122,
            1,
            0,
            0,
            [
              "Binary",
              138,
              7,
              0,
              [
                "Unary",
                138,
                7,
                0,
                "typeof",
                "Binary",
                2128,
                23,
                0,
                ["Ident", 2128, 23, 0, "iterable"],
                ".",
                "Const",
                2128,
                33,
                0,
                "next"
              ],
              "===",
              "Const",
              138,
              25,
              0,
              "function"
            ],
            [
              "Return",
              2129,
              1,
              0,
              "Ident",
              2129,
              1,
              0,
              "iterable"
            ],
            "Throw",
            2131,
            1,
            0,
            "Call",
            2131,
            10,
            0,
            ["Ident", 2131, 10, 0, "Error"],
            0,
            [
              "Binary",
              608,
              7,
              0,
              [
                "Const",
                2131,
                17,
                0,
                "Expected iterable to be an Array or an Object with an 'iterator' function or an Object with a 'next' function, got "
              ],
              "+",
              "Call",
              494,
              49,
              0,
              ["Ident", 494, 49, 0, "__typeof"],
              0,
              ["Ident", 2131, 142, 0, "iterable"]
            ]
          ],
          type: "function",
          dependencies: ["__arrayToIter", "__isArray", "__iter", "__typeof"]
        },
        __keys: {
          helper: [
            "IfExpression",
            2300,
            23,
            0,
            [
              "Binary",
              138,
              7,
              0,
              [
                "Unary",
                138,
                7,
                0,
                "typeof",
                "Binary",
                2300,
                39,
                0,
                ["Ident", 2300, 39, 0, "Object"],
                ".",
                "Const",
                2300,
                47,
                0,
                "keys"
              ],
              "===",
              "Const",
              138,
              25,
              0,
              "function"
            ],
            [
              "Binary",
              2301,
              1,
              0,
              ["Ident", 2301, 1, 0, "Object"],
              ".",
              "Const",
              2301,
              10,
              0,
              "keys"
            ],
            "Func",
            2303,
            4,
            0,
            0,
            [["Ident", 2303, 5, 0, "x"]],
            ["key", "keys"],
            [],
            "BlockStatement",
            2304,
            1,
            0,
            0,
            [
              "Binary",
              2304,
              1,
              0,
              ["Ident", 2304, 8, 0, "keys"],
              "=",
              "Arr",
              2304,
              15,
              0
            ],
            [
              "ForIn",
              2305,
              1,
              0,
              0,
              ["Ident", 2305, 8, 0, "key"],
              ["Ident", 2305, 15, 0, "x"],
              "IfStatement",
              1572,
              1,
              0,
              0,
              [
                "Call",
                646,
                7,
                0,
                [
                  "Binary",
                  646,
                  7,
                  0,
                  ["Ident", 646, 7, 0, "__owns"],
                  ".",
                  "Const",
                  646,
                  7,
                  0,
                  "call"
                ],
                0,
                ["Ident", 2305, 15, 0, "x"],
                ["Ident", 2305, 8, 0, "key"]
              ],
              [
                "Call",
                2306,
                1,
                0,
                [
                  "Binary",
                  2306,
                  1,
                  0,
                  ["Ident", 2306, 1, 0, "keys"],
                  ".",
                  "Const",
                  2306,
                  12,
                  0,
                  "push"
                ],
                0,
                ["Ident", 2306, 17, 0, "key"]
              ]
            ],
            [
              "Return",
              2307,
              1,
              0,
              "Ident",
              2307,
              1,
              0,
              "keys"
            ]
          ],
          type: "any",
          dependencies: ["__keys", "__owns"]
        },
        __allkeys: {
          helper: [
            "Func",
            2312,
            28,
            0,
            0,
            [["Ident", 2312, 29, 0, "x"]],
            ["key", "keys"],
            [],
            "BlockStatement",
            2313,
            1,
            0,
            0,
            [
              "Binary",
              2313,
              1,
              0,
              ["Ident", 2313, 6, 0, "keys"],
              "=",
              "Arr",
              2313,
              13,
              0
            ],
            [
              "ForIn",
              2314,
              1,
              0,
              0,
              ["Ident", 2314, 6, 0, "key"],
              ["Ident", 2314, 16, 0, "x"],
              "Call",
              2315,
              1,
              0,
              [
                "Binary",
                2315,
                1,
                0,
                ["Ident", 2315, 1, 0, "keys"],
                ".",
                "Const",
                2315,
                10,
                0,
                "push"
              ],
              0,
              ["Ident", 2315, 15, 0, "key"]
            ],
            [
              "Return",
              2316,
              1,
              0,
              "Ident",
              2316,
              1,
              0,
              "keys"
            ]
          ],
          type: {type: "generic", base: "functionBase", args: ["stringArray"]},
          dependencies: ["__allkeys"]
        },
        __new: {
          helper: [
            "Call",
            9,
            9,
            0,
            [
              "Func",
              9,
              12,
              0,
              0,
              [],
              ["newCreators"],
              [],
              "BlockStatement",
              2322,
              1,
              0,
              0,
              [
                "Binary",
                2322,
                1,
                0,
                ["Ident", 2322, 6, 0, "newCreators"],
                "=",
                "Arr",
                2322,
                21,
                0
              ],
              [
                "Return",
                2323,
                4,
                0,
                "Func",
                2323,
                4,
                0,
                0,
                [],
                ["creator", "func", "i", "length"],
                [],
                "BlockStatement",
                2324,
                1,
                0,
                0,
                [
                  "IfStatement",
                  2324,
                  1,
                  0,
                  0,
                  [
                    "Binary",
                    2324,
                    7,
                    0,
                    [
                      "Unary",
                      138,
                      7,
                      0,
                      "typeof",
                      "This",
                      2324,
                      24,
                      0
                    ],
                    "!==",
                    "Const",
                    138,
                    25,
                    0,
                    "function"
                  ],
                  [
                    "Throw",
                    2325,
                    1,
                    0,
                    "Call",
                    2325,
                    12,
                    0,
                    ["Ident", 2325, 12, 0, "Error"],
                    0,
                    [
                      "Binary",
                      608,
                      7,
                      0,
                      ["Const", 2325, 19, 0, "Expected this to be a Function, got "],
                      "+",
                      "Call",
                      494,
                      49,
                      0,
                      ["Ident", 494, 49, 0, "__typeof"],
                      0,
                      ["This", 2325, 65, 0]
                    ]
                  ]
                ],
                [
                  "Binary",
                  2326,
                  1,
                  0,
                  ["Ident", 2326, 8, 0, "length"],
                  "=",
                  "Binary",
                  2326,
                  17,
                  0,
                  ["Arguments", 2326, 17, 0],
                  ".",
                  "Const",
                  2326,
                  28,
                  0,
                  "length"
                ],
                [
                  "Binary",
                  2327,
                  1,
                  0,
                  ["Ident", 2327, 16, 0, "creator"],
                  "=",
                  "Binary",
                  2327,
                  26,
                  0,
                  ["Ident", 2327, 26, 0, "newCreators"],
                  ".",
                  "Ident",
                  2327,
                  40,
                  0,
                  "length"
                ],
                [
                  "IfStatement",
                  2328,
                  1,
                  0,
                  0,
                  [
                    "Unary",
                    2328,
                    7,
                    0,
                    "!",
                    "Ident",
                    2328,
                    11,
                    0,
                    "creator"
                  ],
                  [
                    "BlockStatement",
                    2329,
                    1,
                    0,
                    0,
                    [
                      "Binary",
                      2329,
                      1,
                      0,
                      ["Ident", 2329, 10, 0, "func"],
                      "=",
                      "Arr",
                      2329,
                      17,
                      0,
                      ["Const", 2329, 19, 0, "return new C("]
                    ],
                    [
                      "For",
                      1278,
                      1,
                      0,
                      0,
                      [
                        "BlockExpression",
                        1,
                        1,
                        0,
                        [
                          "Binary",
                          1188,
                          38,
                          0,
                          ["Ident", 2330, 10, 0, "i"],
                          "=",
                          "Const",
                          2330,
                          16,
                          0,
                          0
                        ],
                        ["Ident", 2330, 21, 0, "length"]
                      ],
                      [
                        "Binary",
                        1214,
                        57,
                        0,
                        ["Ident", 2330, 10, 0, "i"],
                        "<",
                        "Ident",
                        2330,
                        21,
                        0,
                        "length"
                      ],
                      [
                        "Unary",
                        1226,
                        35,
                        0,
                        "++",
                        "Ident",
                        2330,
                        10,
                        0,
                        "i"
                      ],
                      "BlockStatement",
                      2331,
                      1,
                      0,
                      0,
                      [
                        "IfStatement",
                        2331,
                        1,
                        0,
                        0,
                        [
                          "Binary",
                          759,
                          9,
                          0,
                          ["Ident", 2331, 11, 0, "i"],
                          ">",
                          "Const",
                          2331,
                          16,
                          0,
                          0
                        ],
                        [
                          "Call",
                          2332,
                          1,
                          0,
                          [
                            "Binary",
                            2332,
                            1,
                            0,
                            ["Ident", 2332, 1, 0, "func"],
                            ".",
                            "Const",
                            2332,
                            16,
                            0,
                            "push"
                          ],
                          0,
                          ["Const", 2332, 21, 0, ", "]
                        ]
                      ],
                      [
                        "Call",
                        2333,
                        1,
                        0,
                        [
                          "Binary",
                          2333,
                          1,
                          0,
                          ["Ident", 2333, 1, 0, "func"],
                          ".",
                          "Const",
                          2333,
                          14,
                          0,
                          "push"
                        ],
                        0,
                        ["Const", 2333, 19, 0, "a["],
                        ["Ident", 2333, 24, 0, "i"],
                        ["Const", 2333, 28, 0, "]"]
                      ]
                    ],
                    [
                      "Call",
                      2334,
                      1,
                      0,
                      [
                        "Binary",
                        2334,
                        1,
                        0,
                        ["Ident", 2334, 1, 0, "func"],
                        ".",
                        "Const",
                        2334,
                        12,
                        0,
                        "push"
                      ],
                      0,
                      ["Const", 2334, 17, 0, ");"]
                    ],
                    [
                      "Binary",
                      2335,
                      1,
                      0,
                      ["Ident", 2335, 1, 0, "creator"],
                      "=",
                      "Call",
                      2335,
                      17,
                      0,
                      ["Ident", 2335, 17, 0, "Function"],
                      0,
                      ["Const", 2335, 27, 0, "C"],
                      ["Const", 2335, 32, 0, "a"],
                      [
                        "Call",
                        2335,
                        36,
                        0,
                        [
                          "Binary",
                          2335,
                          36,
                          0,
                          ["Ident", 2335, 36, 0, "func"],
                          ".",
                          "Const",
                          2335,
                          42,
                          0,
                          "join"
                        ],
                        0,
                        ["Const", 2335, 47, 0, ""]
                      ]
                    ],
                    [
                      "Binary",
                      2336,
                      1,
                      0,
                      [
                        "Binary",
                        2336,
                        1,
                        0,
                        ["Ident", 2336, 1, 0, "newCreators"],
                        ".",
                        "Ident",
                        2336,
                        20,
                        0,
                        "length"
                      ],
                      "=",
                      "Ident",
                      2336,
                      30,
                      0,
                      "creator"
                    ]
                  ]
                ],
                [
                  "Return",
                  2337,
                  1,
                  0,
                  "Call",
                  2337,
                  1,
                  0,
                  ["Ident", 2337, 1, 0, "creator"],
                  0,
                  ["This", 2337, 13, 0],
                  ["Arguments", 2337, 18, 0]
                ]
              ]
            ],
            0
          ],
          type: "function",
          dependencies: ["__new", "__typeof"]
        },
        __instanceofsome: {
          helper: [
            "Func",
            2339,
            35,
            0,
            0,
            [
              ["Ident", 2339, 36, 0, "value"],
              ["Ident", 2339, 42, 0, "array"]
            ],
            ["_arr", "_i", "_some", "item"],
            [],
            "BlockStatement",
            2340,
            1,
            0,
            0,
            [
              "Binary",
              1026,
              26,
              0,
              ["Ident", 1478, 13, 0, "_some"],
              "=",
              "Const",
              1,
              1,
              0,
              false
            ],
            [
              "For",
              1478,
              13,
              0,
              0,
              [
                "BlockExpression",
                1,
                1,
                0,
                [
                  "Binary",
                  2340,
                  1,
                  0,
                  ["Ident", 2340, 1, 0, "_arr"],
                  "=",
                  "Call",
                  1342,
                  22,
                  0,
                  ["Ident", 1342, 22, 0, "__toArray"],
                  0,
                  ["Ident", 2340, 19, 0, "array"]
                ],
                [
                  "Binary",
                  1381,
                  26,
                  0,
                  ["Ident", 2340, 1, 0, "_i"],
                  "=",
                  "Binary",
                  1381,
                  49,
                  0,
                  ["Ident", 2340, 1, 0, "_arr"],
                  ".",
                  "Const",
                  1381,
                  56,
                  0,
                  "length"
                ]
              ],
              [
                "Unary",
                1382,
                16,
                0,
                "--post",
                "Ident",
                2340,
                1,
                0,
                "_i"
              ],
              0,
              "BlockStatement",
              1464,
              1,
              0,
              0,
              [
                "Binary",
                1464,
                1,
                0,
                ["Ident", 2340, 11, 0, "item"],
                "=",
                "Binary",
                1345,
                75,
                0,
                ["Ident", 2340, 1, 0, "_arr"],
                ".",
                "Ident",
                2340,
                1,
                0,
                "_i"
              ],
              [
                "IfStatement",
                1028,
                1,
                0,
                0,
                [
                  "Binary",
                  2341,
                  1,
                  0,
                  ["Ident", 2341, 1, 0, "value"],
                  "instanceof",
                  "Ident",
                  2341,
                  21,
                  0,
                  "item"
                ],
                [
                  "BlockStatement",
                  1029,
                  1,
                  0,
                  0,
                  [
                    "Binary",
                    1029,
                    1,
                    0,
                    ["Ident", 1478, 13, 0, "_some"],
                    "=",
                    "Const",
                    1,
                    1,
                    0,
                    true
                  ],
                  ["Break", 1030, 1, 0]
                ]
              ]
            ],
            [
              "Return",
              1478,
              13,
              0,
              "Ident",
              1478,
              13,
              0,
              "_some"
            ]
          ],
          type: {type: "generic", base: "functionBase", args: ["boolean"]},
          dependencies: ["__instanceofsome", "__toArray"]
        },
        __getInstanceof: {
          helper: [
            "Call",
            9,
            9,
            0,
            [
              "Func",
              9,
              12,
              0,
              0,
              [],
              [],
              [],
              "BlockStatement",
              2344,
              1,
              0,
              0,
              [
                "Func",
                2344,
                1,
                0,
                ["Ident", 2344, 6, 0, "isAny"],
                [],
                [],
                [],
                "Return",
                2344,
                19,
                0,
                "Const",
                2344,
                19,
                0,
                true
              ],
              [
                "Func",
                2345,
                1,
                0,
                ["Ident", 2345, 6, 0, "isStr"],
                [["Ident", 2345, 17, 0, "x"]],
                [],
                [],
                "Return",
                129,
                7,
                0,
                "Binary",
                129,
                7,
                0,
                [
                  "Unary",
                  129,
                  7,
                  0,
                  "typeof",
                  "Ident",
                  2345,
                  17,
                  0,
                  "x"
                ],
                "===",
                "Const",
                129,
                25,
                0,
                "string"
              ],
              [
                "Func",
                2346,
                1,
                0,
                ["Ident", 2346, 6, 0, "isNum"],
                [["Ident", 2346, 17, 0, "x"]],
                [],
                [],
                "Return",
                132,
                7,
                0,
                "Binary",
                132,
                7,
                0,
                [
                  "Unary",
                  132,
                  7,
                  0,
                  "typeof",
                  "Ident",
                  2346,
                  17,
                  0,
                  "x"
                ],
                "===",
                "Const",
                132,
                25,
                0,
                "number"
              ],
              [
                "Func",
                2347,
                1,
                0,
                ["Ident", 2347, 6, 0, "isFunc"],
                [["Ident", 2347, 18, 0, "x"]],
                [],
                [],
                "Return",
                138,
                7,
                0,
                "Binary",
                138,
                7,
                0,
                [
                  "Unary",
                  138,
                  7,
                  0,
                  "typeof",
                  "Ident",
                  2347,
                  18,
                  0,
                  "x"
                ],
                "===",
                "Const",
                138,
                25,
                0,
                "function"
              ],
              [
                "Func",
                2348,
                1,
                0,
                ["Ident", 2348, 6, 0, "isBool"],
                [["Ident", 2348, 18, 0, "x"]],
                [],
                [],
                "Return",
                135,
                7,
                0,
                "Binary",
                135,
                7,
                0,
                [
                  "Unary",
                  135,
                  7,
                  0,
                  "typeof",
                  "Ident",
                  2348,
                  18,
                  0,
                  "x"
                ],
                "===",
                "Const",
                135,
                25,
                0,
                "boolean"
              ],
              [
                "Return",
                2349,
                4,
                0,
                "Func",
                2349,
                4,
                0,
                0,
                [["Ident", 2349, 5, 0, "ctor"]],
                [],
                [],
                "IfStatement",
                2350,
                1,
                0,
                0,
                [
                  "Binary",
                  2350,
                  7,
                  0,
                  ["Ident", 2350, 11, 0, "ctor"],
                  "==",
                  "Const",
                  1,
                  1,
                  0,
                  null
                ],
                [
                  "Return",
                  2351,
                  1,
                  0,
                  "Ident",
                  2351,
                  1,
                  0,
                  "isAny"
                ],
                "Switch",
                2353,
                1,
                0,
                0,
                ["Ident", 2353, 13, 0, "ctor"],
                2354,
                11,
                null,
                ["Ident", 2354, 11, 0, "String"],
                [
                  "Return",
                  2354,
                  19,
                  0,
                  "Ident",
                  2354,
                  19,
                  0,
                  "isStr"
                ],
                2355,
                11,
                null,
                ["Ident", 2355, 11, 0, "Number"],
                [
                  "Return",
                  2355,
                  19,
                  0,
                  "Ident",
                  2355,
                  19,
                  0,
                  "isNum"
                ],
                2356,
                11,
                null,
                ["Ident", 2356, 11, 0, "Function"],
                [
                  "Return",
                  2356,
                  21,
                  0,
                  "Ident",
                  2356,
                  21,
                  0,
                  "isFunc"
                ],
                2357,
                11,
                null,
                ["Ident", 2357, 11, 0, "Boolean"],
                [
                  "Return",
                  2357,
                  20,
                  0,
                  "Ident",
                  2357,
                  20,
                  0,
                  "isBool"
                ],
                2358,
                11,
                null,
                ["Ident", 2358, 11, 0, "Array"],
                [
                  "Return",
                  2358,
                  18,
                  0,
                  "Ident",
                  2358,
                  18,
                  0,
                  "__isArray"
                ],
                2359,
                11,
                null,
                ["Ident", 2359, 11, 0, "Object"],
                [
                  "Return",
                  2359,
                  19,
                  0,
                  "Ident",
                  2359,
                  19,
                  0,
                  "__isObject"
                ],
                [
                  "Return",
                  2360,
                  17,
                  0,
                  "Func",
                  2360,
                  17,
                  0,
                  0,
                  [["Ident", 2360, 17, 0, "_x"]],
                  [],
                  [],
                  "Return",
                  2360,
                  17,
                  0,
                  "Binary",
                  2360,
                  17,
                  0,
                  ["Ident", 2360, 17, 0, "_x"],
                  "instanceof",
                  "Ident",
                  2360,
                  27,
                  0,
                  "ctor"
                ]
              ]
            ],
            0
          ],
          type: {
            type: "generic",
            base: "functionBase",
            args: [{type: "generic", base: "functionBase", args: ["boolean"]}]
          },
          dependencies: ["__getInstanceof", "__isArray", "__isObject"]
        },
        __name: {
          helper: [
            "Func",
            1902,
            1,
            0,
            0,
            [["Ident", 2362, 26, 0, "func"]],
            [],
            [],
            "BlockStatement",
            1902,
            1,
            0,
            0,
            [
              "IfStatement",
              1686,
              1,
              0,
              0,
              [
                "Binary",
                657,
                18,
                0,
                [
                  "Unary",
                  138,
                  7,
                  0,
                  "typeof",
                  "Ident",
                  2362,
                  26,
                  0,
                  "func"
                ],
                "!==",
                "Const",
                138,
                25,
                0,
                "function"
              ],
              [
                "Throw",
                1687,
                1,
                0,
                "Call",
                1687,
                18,
                0,
                ["Ident", 1687, 18, 0, "TypeError"],
                0,
                [
                  "Binary",
                  608,
                  7,
                  0,
                  ["Const", 608, 7, 0, "Expected func to be a Function, got "],
                  "+",
                  "Call",
                  494,
                  49,
                  0,
                  ["Ident", 494, 49, 0, "__typeof"],
                  0,
                  ["Ident", 2362, 26, 0, "func"]
                ]
              ]
            ],
            [
              "Return",
              2362,
              50,
              0,
              "Binary",
              2362,
              50,
              0,
              [
                "Binary",
                2362,
                50,
                0,
                [
                  "Binary",
                  2362,
                  50,
                  0,
                  ["Ident", 2362, 50, 0, "func"],
                  ".",
                  "Const",
                  2362,
                  56,
                  0,
                  "displayName"
                ],
                "||",
                "Binary",
                2362,
                71,
                0,
                ["Ident", 2362, 71, 0, "func"],
                ".",
                "Const",
                2362,
                77,
                0,
                "name"
              ],
              "||",
              "Const",
              2362,
              85,
              0,
              ""
            ]
          ],
          type: {type: "generic", base: "functionBase", args: ["string"]},
          dependencies: ["__name", "__typeof"]
        },
        __once: {
          helper: [
            "Call",
            9,
            9,
            0,
            [
              "Func",
              9,
              12,
              0,
              0,
              [],
              [],
              [],
              "BlockStatement",
              2365,
              1,
              0,
              0,
              [
                "Func",
                2365,
                1,
                0,
                ["Ident", 2365, 6, 0, "replacement"],
                [],
                [],
                [],
                "Throw",
                2365,
                23,
                0,
                "Call",
                2365,
                29,
                0,
                ["Ident", 2365, 29, 0, "Error"],
                0,
                ["Const", 2365, 36, 0, "Attempted to call function more than once"]
              ],
              [
                "Func",
                2366,
                1,
                0,
                ["Ident", 2366, 6, 0, "doNothing"],
                [],
                [],
                []
              ],
              [
                "Return",
                1902,
                1,
                0,
                "Func",
                1902,
                1,
                0,
                0,
                [
                  ["Ident", 2367, 12, 0, "func"],
                  ["Ident", 2367, 24, 0, "silentFail"]
                ],
                [],
                [],
                "BlockStatement",
                1902,
                1,
                0,
                0,
                [
                  "IfStatement",
                  1686,
                  1,
                  0,
                  0,
                  [
                    "Binary",
                    657,
                    18,
                    0,
                    [
                      "Unary",
                      138,
                      7,
                      0,
                      "typeof",
                      "Ident",
                      2367,
                      12,
                      0,
                      "func"
                    ],
                    "!==",
                    "Const",
                    138,
                    25,
                    0,
                    "function"
                  ],
                  [
                    "Throw",
                    1687,
                    1,
                    0,
                    "Call",
                    1687,
                    18,
                    0,
                    ["Ident", 1687, 18, 0, "TypeError"],
                    0,
                    [
                      "Binary",
                      608,
                      7,
                      0,
                      ["Const", 608, 7, 0, "Expected func to be a Function, got "],
                      "+",
                      "Call",
                      494,
                      49,
                      0,
                      ["Ident", 494, 49, 0, "__typeof"],
                      0,
                      ["Ident", 2367, 12, 0, "func"]
                    ]
                  ]
                ],
                [
                  "IfStatement",
                  1693,
                  13,
                  0,
                  0,
                  [
                    "Binary",
                    1693,
                    16,
                    0,
                    ["Ident", 2367, 24, 0, "silentFail"],
                    "==",
                    "Const",
                    1,
                    1,
                    0,
                    null
                  ],
                  [
                    "Binary",
                    1694,
                    1,
                    0,
                    ["Ident", 2367, 24, 0, "silentFail"],
                    "=",
                    "Const",
                    1,
                    1,
                    0,
                    false
                  ],
                  "IfStatement",
                  1686,
                  1,
                  0,
                  0,
                  [
                    "Binary",
                    655,
                    18,
                    0,
                    [
                      "Unary",
                      135,
                      7,
                      0,
                      "typeof",
                      "Ident",
                      2367,
                      24,
                      0,
                      "silentFail"
                    ],
                    "!==",
                    "Const",
                    135,
                    25,
                    0,
                    "boolean"
                  ],
                  [
                    "Throw",
                    1687,
                    1,
                    0,
                    "Call",
                    1687,
                    18,
                    0,
                    ["Ident", 1687, 18, 0, "TypeError"],
                    0,
                    [
                      "Binary",
                      608,
                      7,
                      0,
                      ["Const", 608, 7, 0, "Expected silentFail to be a Boolean, got "],
                      "+",
                      "Call",
                      494,
                      49,
                      0,
                      ["Ident", 494, 49, 0, "__typeof"],
                      0,
                      ["Ident", 2367, 24, 0, "silentFail"]
                    ]
                  ]
                ],
                [
                  "Return",
                  2367,
                  53,
                  0,
                  "Func",
                  2367,
                  53,
                  0,
                  0,
                  [],
                  ["f"],
                  [],
                  "BlockStatement",
                  2368,
                  1,
                  0,
                  0,
                  [
                    "Binary",
                    2368,
                    1,
                    0,
                    ["Ident", 2368, 8, 0, "f"],
                    "=",
                    "Ident",
                    2368,
                    12,
                    0,
                    "func"
                  ],
                  [
                    "IfStatement",
                    2369,
                    12,
                    0,
                    0,
                    ["Ident", 2369, 15, 0, "silentFail"],
                    [
                      "Binary",
                      2369,
                      1,
                      0,
                      ["Ident", 2369, 1, 0, "func"],
                      "=",
                      "Ident",
                      2369,
                      32,
                      0,
                      "doNothing"
                    ],
                    "Binary",
                    2369,
                    1,
                    0,
                    ["Ident", 2369, 1, 0, "func"],
                    "=",
                    "Ident",
                    2369,
                    48,
                    0,
                    "replacement"
                  ],
                  [
                    "Return",
                    2370,
                    1,
                    0,
                    "Call",
                    2370,
                    1,
                    0,
                    [
                      "Binary",
                      2370,
                      1,
                      0,
                      ["Ident", 2370, 1, 0, "f"],
                      ".",
                      "Const",
                      2370,
                      1,
                      0,
                      "apply"
                    ],
                    0,
                    ["This", 2370, 8, 0],
                    ["Arguments", 2370, 17, 0]
                  ]
                ]
              ]
            ],
            0
          ],
          type: {type: "generic", base: "functionBase", args: ["function"]},
          dependencies: ["__once", "__toArray", "__typeof"]
        },
        __async: {
          helper: [
            "Func",
            1902,
            1,
            0,
            0,
            [
              ["Ident", 2472, 34, 0, "limit"],
              ["Ident", 2472, 51, 0, "length"],
              ["Ident", 2472, 69, 0, "hasResult"],
              ["Ident", 2472, 92, 0, "onValue"],
              ["Ident", 2472, 108, 0, "onComplete"]
            ],
            ["broken", "completed", "index", "result", "slotsUsed", "sync"],
            [],
            "BlockStatement",
            1902,
            1,
            0,
            0,
            [
              "IfStatement",
              1686,
              1,
              0,
              0,
              [
                "Binary",
                653,
                18,
                0,
                [
                  "Unary",
                  132,
                  7,
                  0,
                  "typeof",
                  "Ident",
                  2472,
                  34,
                  0,
                  "limit"
                ],
                "!==",
                "Const",
                132,
                25,
                0,
                "number"
              ],
              [
                "Throw",
                1687,
                1,
                0,
                "Call",
                1687,
                18,
                0,
                ["Ident", 1687, 18, 0, "TypeError"],
                0,
                [
                  "Binary",
                  608,
                  7,
                  0,
                  ["Const", 608, 7, 0, "Expected limit to be a Number, got "],
                  "+",
                  "Call",
                  494,
                  49,
                  0,
                  ["Ident", 494, 49, 0, "__typeof"],
                  0,
                  ["Ident", 2472, 34, 0, "limit"]
                ]
              ]
            ],
            [
              "IfStatement",
              1686,
              1,
              0,
              0,
              [
                "Binary",
                653,
                18,
                0,
                [
                  "Unary",
                  132,
                  7,
                  0,
                  "typeof",
                  "Ident",
                  2472,
                  51,
                  0,
                  "length"
                ],
                "!==",
                "Const",
                132,
                25,
                0,
                "number"
              ],
              [
                "Throw",
                1687,
                1,
                0,
                "Call",
                1687,
                18,
                0,
                ["Ident", 1687, 18, 0, "TypeError"],
                0,
                [
                  "Binary",
                  608,
                  7,
                  0,
                  ["Const", 608, 7, 0, "Expected length to be a Number, got "],
                  "+",
                  "Call",
                  494,
                  49,
                  0,
                  ["Ident", 494, 49, 0, "__typeof"],
                  0,
                  ["Ident", 2472, 51, 0, "length"]
                ]
              ]
            ],
            [
              "IfStatement",
              1693,
              13,
              0,
              0,
              [
                "Binary",
                1693,
                16,
                0,
                ["Ident", 2472, 69, 0, "hasResult"],
                "==",
                "Const",
                1,
                1,
                0,
                null
              ],
              [
                "Binary",
                1694,
                1,
                0,
                ["Ident", 2472, 69, 0, "hasResult"],
                "=",
                "Const",
                1,
                1,
                0,
                false
              ],
              "IfStatement",
              1686,
              1,
              0,
              0,
              [
                "Binary",
                655,
                18,
                0,
                [
                  "Unary",
                  135,
                  7,
                  0,
                  "typeof",
                  "Ident",
                  2472,
                  69,
                  0,
                  "hasResult"
                ],
                "!==",
                "Const",
                135,
                25,
                0,
                "boolean"
              ],
              [
                "Throw",
                1687,
                1,
                0,
                "Call",
                1687,
                18,
                0,
                ["Ident", 1687, 18, 0, "TypeError"],
                0,
                [
                  "Binary",
                  608,
                  7,
                  0,
                  ["Const", 608, 7, 0, "Expected hasResult to be a Boolean, got "],
                  "+",
                  "Call",
                  494,
                  49,
                  0,
                  ["Ident", 494, 49, 0, "__typeof"],
                  0,
                  ["Ident", 2472, 69, 0, "hasResult"]
                ]
              ]
            ],
            [
              "IfStatement",
              1686,
              1,
              0,
              0,
              [
                "Binary",
                657,
                18,
                0,
                [
                  "Unary",
                  138,
                  7,
                  0,
                  "typeof",
                  "Ident",
                  2472,
                  92,
                  0,
                  "onValue"
                ],
                "!==",
                "Const",
                138,
                25,
                0,
                "function"
              ],
              [
                "Throw",
                1687,
                1,
                0,
                "Call",
                1687,
                18,
                0,
                ["Ident", 1687, 18, 0, "TypeError"],
                0,
                [
                  "Binary",
                  608,
                  7,
                  0,
                  ["Const", 608, 7, 0, "Expected onValue to be a Function, got "],
                  "+",
                  "Call",
                  494,
                  49,
                  0,
                  ["Ident", 494, 49, 0, "__typeof"],
                  0,
                  ["Ident", 2472, 92, 0, "onValue"]
                ]
              ]
            ],
            [
              "IfStatement",
              1686,
              1,
              0,
              0,
              [
                "Binary",
                657,
                18,
                0,
                [
                  "Unary",
                  138,
                  7,
                  0,
                  "typeof",
                  "Ident",
                  2472,
                  108,
                  0,
                  "onComplete"
                ],
                "!==",
                "Const",
                138,
                25,
                0,
                "function"
              ],
              [
                "Throw",
                1687,
                1,
                0,
                "Call",
                1687,
                18,
                0,
                ["Ident", 1687, 18, 0, "TypeError"],
                0,
                [
                  "Binary",
                  608,
                  7,
                  0,
                  ["Const", 608, 7, 0, "Expected onComplete to be a Function, got "],
                  "+",
                  "Call",
                  494,
                  49,
                  0,
                  ["Ident", 494, 49, 0, "__typeof"],
                  0,
                  ["Ident", 2472, 108, 0, "onComplete"]
                ]
              ]
            ],
            [
              "IfStatement",
              2473,
              15,
              0,
              0,
              ["Ident", 2473, 18, 0, "hasResult"],
              [
                "Binary",
                2473,
                1,
                0,
                ["Ident", 2473, 6, 0, "result"],
                "=",
                "Arr",
                2473,
                34,
                0
              ],
              "Binary",
              2473,
              1,
              0,
              ["Ident", 2473, 6, 0, "result"],
              "=",
              "Const",
              2473,
              42,
              0,
              null
            ],
            [
              "IfStatement",
              2474,
              1,
              0,
              0,
              [
                "Binary",
                2474,
                5,
                0,
                ["Ident", 2474, 5, 0, "length"],
                "<=",
                "Const",
                2474,
                17,
                0,
                0
              ],
              [
                "Return",
                2475,
                1,
                0,
                "Call",
                2475,
                11,
                0,
                ["Ident", 2475, 11, 0, "onComplete"],
                0,
                ["Const", 2475, 24, 0, null],
                ["Ident", 2475, 29, 0, "result"]
              ]
            ],
            [
              "IfStatement",
              2476,
              1,
              0,
              0,
              [
                "Binary",
                2476,
                5,
                0,
                [
                  "Binary",
                  2476,
                  5,
                  0,
                  ["Ident", 2476, 5, 0, "limit"],
                  "<",
                  "Const",
                  2476,
                  15,
                  0,
                  1
                ],
                "||",
                "Binary",
                43,
                7,
                0,
                ["Ident", 2476, 19, 0, "limit"],
                "!==",
                "Ident",
                2476,
                28,
                0,
                "limit"
              ],
              [
                "Binary",
                2477,
                1,
                0,
                ["Ident", 2477, 1, 0, "limit"],
                "=",
                "Const",
                2477,
                13,
                0,
                1,
                1
              ]
            ],
            [
              "Binary",
              2479,
              1,
              0,
              ["Ident", 2479, 14, 0, "broken"],
              "=",
              "Const",
              2479,
              23,
              0,
              null
            ],
            [
              "Binary",
              2480,
              1,
              0,
              ["Ident", 2480, 14, 0, "slotsUsed"],
              "=",
              "Const",
              2480,
              28,
              0,
              0
            ],
            [
              "Binary",
              2481,
              1,
              0,
              ["Ident", 2481, 14, 0, "sync"],
              "=",
              "Const",
              2481,
              21,
              0,
              false
            ],
            [
              "Binary",
              2482,
              1,
              0,
              ["Ident", 2482, 14, 0, "completed"],
              "=",
              "Const",
              2482,
              26,
              0,
              false
            ],
            [
              "Func",
              2483,
              1,
              0,
              ["Ident", 2483, 6, 0, "onValueCallback"],
              [
                ["Ident", 2483, 25, 0, "err"],
                ["Ident", 2483, 29, 0, "value"]
              ],
              [],
              [],
              "BlockStatement",
              2484,
              1,
              0,
              0,
              [
                "IfStatement",
                2484,
                1,
                0,
                0,
                ["Ident", 2484, 7, 0, "completed"],
                [
                  "Return",
                  2485,
                  1,
                  0,
                  "Const",
                  2485,
                  1,
                  0
                ]
              ],
              [
                "Unary",
                2486,
                1,
                0,
                "--",
                "Ident",
                2486,
                1,
                0,
                "slotsUsed"
              ],
              [
                "IfStatement",
                2487,
                1,
                0,
                0,
                [
                  "Binary",
                  2487,
                  7,
                  0,
                  [
                    "Binary",
                    49,
                    7,
                    0,
                    ["Ident", 2487, 7, 0, "err"],
                    "!=",
                    "Const",
                    1,
                    1,
                    0,
                    null
                  ],
                  "&&",
                  "Binary",
                  2487,
                  16,
                  0,
                  ["Ident", 2487, 20, 0, "broken"],
                  "==",
                  "Const",
                  1,
                  1,
                  0,
                  null
                ],
                [
                  "Binary",
                  2488,
                  1,
                  0,
                  ["Ident", 2488, 1, 0, "broken"],
                  "=",
                  "Ident",
                  2488,
                  16,
                  0,
                  "err"
                ]
              ],
              [
                "IfStatement",
                2489,
                1,
                0,
                0,
                [
                  "Binary",
                  2489,
                  7,
                  0,
                  [
                    "Binary",
                    2489,
                    7,
                    0,
                    ["Ident", 2489, 7, 0, "hasResult"],
                    "&&",
                    "Binary",
                    2489,
                    22,
                    0,
                    ["Ident", 2489, 26, 0, "broken"],
                    "==",
                    "Const",
                    1,
                    1,
                    0,
                    null
                  ],
                  "&&",
                  "Binary",
                  57,
                  23,
                  0,
                  [
                    "Binary",
                    2489,
                    38,
                    0,
                    ["Arguments", 2489, 38, 0],
                    ".",
                    "Const",
                    2489,
                    49,
                    0,
                    "length"
                  ],
                  ">",
                  "Const",
                  2489,
                  59,
                  0,
                  1
                ],
                [
                  "Call",
                  2490,
                  1,
                  0,
                  [
                    "Binary",
                    2490,
                    1,
                    0,
                    ["Ident", 2490, 1, 0, "result"],
                    ".",
                    "Const",
                    2490,
                    14,
                    0,
                    "push"
                  ],
                  0,
                  ["Ident", 2490, 19, 0, "value"]
                ]
              ],
              [
                "IfStatement",
                2491,
                1,
                0,
                0,
                [
                  "Unary",
                  2491,
                  7,
                  0,
                  "!",
                  "Ident",
                  2491,
                  11,
                  0,
                  "sync"
                ],
                [
                  "Call",
                  2492,
                  1,
                  0,
                  ["Ident", 2492, 1, 0, "next"],
                  0
                ]
              ]
            ],
            [
              "Binary",
              2493,
              1,
              0,
              ["Ident", 2493, 14, 0, "index"],
              "=",
              "Const",
              2493,
              22,
              0,
              -1
            ],
            [
              "Func",
              2494,
              1,
              0,
              ["Ident", 2494, 6, 0, "next"],
              [],
              [],
              [],
              "BlockStatement",
              2495,
              1,
              0,
              0,
              [
                "For",
                1118,
                1,
                0,
                0,
                0,
                [
                  "Binary",
                  2495,
                  10,
                  0,
                  [
                    "Binary",
                    2495,
                    10,
                    0,
                    [
                      "Binary",
                      2495,
                      10,
                      0,
                      [
                        "Unary",
                        2495,
                        10,
                        0,
                        "!",
                        "Ident",
                        2495,
                        14,
                        0,
                        "completed"
                      ],
                      "&&",
                      "Binary",
                      2495,
                      28,
                      0,
                      ["Ident", 2495, 32, 0, "broken"],
                      "==",
                      "Const",
                      1,
                      1,
                      0,
                      null
                    ],
                    "&&",
                    "Binary",
                    2495,
                    44,
                    0,
                    ["Ident", 2495, 44, 0, "slotsUsed"],
                    "<",
                    "Ident",
                    2495,
                    58,
                    0,
                    "limit"
                  ],
                  "&&",
                  "Binary",
                  2495,
                  68,
                  0,
                  [
                    "Unary",
                    897,
                    11,
                    0,
                    "++",
                    "Ident",
                    2495,
                    70,
                    0,
                    "index"
                  ],
                  "<",
                  "Ident",
                  2495,
                  84,
                  0,
                  "length"
                ],
                0,
                "BlockStatement",
                2496,
                1,
                0,
                0,
                [
                  "Unary",
                  2496,
                  1,
                  0,
                  "++",
                  "Ident",
                  2496,
                  1,
                  0,
                  "slotsUsed"
                ],
                [
                  "Binary",
                  2497,
                  1,
                  0,
                  ["Ident", 2497, 1, 0, "sync"],
                  "=",
                  "Const",
                  2497,
                  14,
                  0,
                  true
                ],
                [
                  "Call",
                  2498,
                  1,
                  0,
                  ["Ident", 2498, 1, 0, "onValue"],
                  0,
                  ["Ident", 2498, 16, 0, "index"],
                  [
                    "Call",
                    2398,
                    11,
                    0,
                    ["Ident", 2398, 11, 0, "__once"],
                    0,
                    ["Ident", 2498, 29, 0, "onValueCallback"]
                  ]
                ],
                [
                  "Binary",
                  2499,
                  1,
                  0,
                  ["Ident", 2499, 1, 0, "sync"],
                  "=",
                  "Const",
                  2499,
                  14,
                  0,
                  false
                ]
              ],
              [
                "IfStatement",
                2500,
                1,
                0,
                0,
                [
                  "Binary",
                  2500,
                  7,
                  0,
                  [
                    "Unary",
                    2500,
                    7,
                    0,
                    "!",
                    "Ident",
                    2500,
                    11,
                    0,
                    "completed"
                  ],
                  "&&",
                  "Binary",
                  2500,
                  27,
                  0,
                  [
                    "Binary",
                    49,
                    7,
                    0,
                    ["Ident", 2500, 27, 0, "broken"],
                    "!=",
                    "Const",
                    1,
                    1,
                    0,
                    null
                  ],
                  "||",
                  "Binary",
                  2500,
                  37,
                  0,
                  ["Ident", 2500, 37, 0, "slotsUsed"],
                  "===",
                  "Const",
                  2500,
                  52,
                  0,
                  0
                ],
                [
                  "BlockStatement",
                  2501,
                  1,
                  0,
                  0,
                  [
                    "Binary",
                    2501,
                    1,
                    0,
                    ["Ident", 2501, 1, 0, "completed"],
                    "=",
                    "Const",
                    2501,
                    19,
                    0,
                    true
                  ],
                  [
                    "IfStatement",
                    2502,
                    1,
                    0,
                    0,
                    [
                      "Binary",
                      49,
                      7,
                      0,
                      ["Ident", 2502, 9, 0, "broken"],
                      "!=",
                      "Const",
                      1,
                      1,
                      0,
                      null
                    ],
                    [
                      "Call",
                      2503,
                      1,
                      0,
                      ["Ident", 2503, 1, 0, "onComplete"],
                      0,
                      ["Ident", 2503, 21, 0, "broken"]
                    ],
                    "Call",
                    2505,
                    1,
                    0,
                    ["Ident", 2505, 1, 0, "onComplete"],
                    0,
                    ["Const", 2505, 21, 0, null],
                    ["Ident", 2505, 26, 0, "result"]
                  ]
                ]
              ]
            ],
            [
              "Call",
              2506,
              1,
              0,
              ["Ident", 2506, 1, 0, "next"],
              0
            ]
          ],
          type: "function",
          dependencies: ["__async", "__once", "__typeof"]
        },
        __asyncIter: {
          helper: [
            "Func",
            1902,
            1,
            0,
            0,
            [
              ["Ident", 2508, 39, 0, "limit"],
              ["Ident", 2508, 56, 0, "iterator"],
              ["Ident", 2508, 86, 0, "hasResult"],
              ["Ident", 2508, 109, 0, "onValue"],
              ["Ident", 2508, 125, 0, "onComplete"]
            ],
            [
              "broken",
              "close",
              "completed",
              "index",
              "iterStopped",
              "result",
              "slotsUsed",
              "sync"
            ],
            [],
            "BlockStatement",
            1902,
            1,
            0,
            0,
            [
              "IfStatement",
              1686,
              1,
              0,
              0,
              [
                "Binary",
                653,
                18,
                0,
                [
                  "Unary",
                  132,
                  7,
                  0,
                  "typeof",
                  "Ident",
                  2508,
                  39,
                  0,
                  "limit"
                ],
                "!==",
                "Const",
                132,
                25,
                0,
                "number"
              ],
              [
                "Throw",
                1687,
                1,
                0,
                "Call",
                1687,
                18,
                0,
                ["Ident", 1687, 18, 0, "TypeError"],
                0,
                [
                  "Binary",
                  608,
                  7,
                  0,
                  ["Const", 608, 7, 0, "Expected limit to be a Number, got "],
                  "+",
                  "Call",
                  494,
                  49,
                  0,
                  ["Ident", 494, 49, 0, "__typeof"],
                  0,
                  ["Ident", 2508, 39, 0, "limit"]
                ]
              ]
            ],
            [
              "IfStatement",
              1775,
              10,
              0,
              0,
              [
                "Binary",
                1775,
                13,
                0,
                [
                  "Binary",
                  144,
                  47,
                  0,
                  [
                    "Unary",
                    144,
                    47,
                    0,
                    "typeof",
                    "Ident",
                    2508,
                    56,
                    0,
                    "iterator"
                  ],
                  "!==",
                  "Const",
                  144,
                  62,
                  0,
                  "object"
                ],
                "||",
                "Binary",
                144,
                72,
                0,
                ["Ident", 2508, 56, 0, "iterator"],
                "===",
                "Const",
                1,
                1,
                0,
                null
              ],
              [
                "Throw",
                1776,
                1,
                0,
                "Call",
                1776,
                14,
                0,
                ["Ident", 1776, 14, 0, "TypeError"],
                0,
                [
                  "Binary",
                  608,
                  7,
                  0,
                  ["Const", 608, 7, 0, "Expected iterator to be an Object, got "],
                  "+",
                  "Call",
                  494,
                  49,
                  0,
                  ["Ident", 494, 49, 0, "__typeof"],
                  0,
                  ["Ident", 2508, 56, 0, "iterator"]
                ]
              ],
              "IfStatement",
              1686,
              1,
              0,
              0,
              [
                "Binary",
                657,
                18,
                0,
                [
                  "Unary",
                  138,
                  7,
                  0,
                  "typeof",
                  "Binary",
                  1774,
                  35,
                  0,
                  ["Ident", 2508, 56, 0, "iterator"],
                  ".",
                  "Const",
                  2508,
                  70,
                  0,
                  "next"
                ],
                "!==",
                "Const",
                138,
                25,
                0,
                "function"
              ],
              [
                "Throw",
                1687,
                1,
                0,
                "Call",
                1687,
                18,
                0,
                ["Ident", 1687, 18, 0, "TypeError"],
                0,
                [
                  "Binary",
                  608,
                  7,
                  0,
                  ["Const", 608, 7, 0, "Expected iterator.next to be a Function, got "],
                  "+",
                  "Call",
                  494,
                  49,
                  0,
                  ["Ident", 494, 49, 0, "__typeof"],
                  0,
                  [
                    "Binary",
                    1774,
                    35,
                    0,
                    ["Ident", 2508, 56, 0, "iterator"],
                    ".",
                    "Const",
                    2508,
                    70,
                    0,
                    "next"
                  ]
                ]
              ]
            ],
            [
              "IfStatement",
              1693,
              13,
              0,
              0,
              [
                "Binary",
                1693,
                16,
                0,
                ["Ident", 2508, 86, 0, "hasResult"],
                "==",
                "Const",
                1,
                1,
                0,
                null
              ],
              [
                "Binary",
                1694,
                1,
                0,
                ["Ident", 2508, 86, 0, "hasResult"],
                "=",
                "Const",
                1,
                1,
                0,
                false
              ],
              "IfStatement",
              1686,
              1,
              0,
              0,
              [
                "Binary",
                655,
                18,
                0,
                [
                  "Unary",
                  135,
                  7,
                  0,
                  "typeof",
                  "Ident",
                  2508,
                  86,
                  0,
                  "hasResult"
                ],
                "!==",
                "Const",
                135,
                25,
                0,
                "boolean"
              ],
              [
                "Throw",
                1687,
                1,
                0,
                "Call",
                1687,
                18,
                0,
                ["Ident", 1687, 18, 0, "TypeError"],
                0,
                [
                  "Binary",
                  608,
                  7,
                  0,
                  ["Const", 608, 7, 0, "Expected hasResult to be a Boolean, got "],
                  "+",
                  "Call",
                  494,
                  49,
                  0,
                  ["Ident", 494, 49, 0, "__typeof"],
                  0,
                  ["Ident", 2508, 86, 0, "hasResult"]
                ]
              ]
            ],
            [
              "IfStatement",
              1686,
              1,
              0,
              0,
              [
                "Binary",
                657,
                18,
                0,
                [
                  "Unary",
                  138,
                  7,
                  0,
                  "typeof",
                  "Ident",
                  2508,
                  109,
                  0,
                  "onValue"
                ],
                "!==",
                "Const",
                138,
                25,
                0,
                "function"
              ],
              [
                "Throw",
                1687,
                1,
                0,
                "Call",
                1687,
                18,
                0,
                ["Ident", 1687, 18, 0, "TypeError"],
                0,
                [
                  "Binary",
                  608,
                  7,
                  0,
                  ["Const", 608, 7, 0, "Expected onValue to be a Function, got "],
                  "+",
                  "Call",
                  494,
                  49,
                  0,
                  ["Ident", 494, 49, 0, "__typeof"],
                  0,
                  ["Ident", 2508, 109, 0, "onValue"]
                ]
              ]
            ],
            [
              "IfStatement",
              1686,
              1,
              0,
              0,
              [
                "Binary",
                657,
                18,
                0,
                [
                  "Unary",
                  138,
                  7,
                  0,
                  "typeof",
                  "Ident",
                  2508,
                  125,
                  0,
                  "onComplete"
                ],
                "!==",
                "Const",
                138,
                25,
                0,
                "function"
              ],
              [
                "Throw",
                1687,
                1,
                0,
                "Call",
                1687,
                18,
                0,
                ["Ident", 1687, 18, 0, "TypeError"],
                0,
                [
                  "Binary",
                  608,
                  7,
                  0,
                  ["Const", 608, 7, 0, "Expected onComplete to be a Function, got "],
                  "+",
                  "Call",
                  494,
                  49,
                  0,
                  ["Ident", 494, 49, 0, "__typeof"],
                  0,
                  ["Ident", 2508, 125, 0, "onComplete"]
                ]
              ]
            ],
            [
              "IfStatement",
              2509,
              1,
              0,
              0,
              [
                "Binary",
                2509,
                5,
                0,
                [
                  "Binary",
                  2509,
                  5,
                  0,
                  ["Ident", 2509, 5, 0, "limit"],
                  "<",
                  "Const",
                  2509,
                  15,
                  0,
                  1
                ],
                "||",
                "Binary",
                43,
                7,
                0,
                ["Ident", 2509, 19, 0, "limit"],
                "!==",
                "Ident",
                2509,
                28,
                0,
                "limit"
              ],
              [
                "Binary",
                2510,
                1,
                0,
                ["Ident", 2510, 1, 0, "limit"],
                "=",
                "Const",
                2510,
                13,
                0,
                1,
                1
              ]
            ],
            [
              "Binary",
              2511,
              1,
              0,
              ["Ident", 2511, 14, 0, "broken"],
              "=",
              "Const",
              2511,
              23,
              0,
              null
            ],
            [
              "Binary",
              2512,
              1,
              0,
              ["Ident", 2512, 14, 0, "slotsUsed"],
              "=",
              "Const",
              2512,
              28,
              0,
              0
            ],
            [
              "Binary",
              2513,
              1,
              0,
              ["Ident", 2513, 14, 0, "sync"],
              "=",
              "Const",
              2513,
              21,
              0,
              false
            ],
            [
              "IfStatement",
              2514,
              15,
              0,
              0,
              ["Ident", 2514, 18, 0, "hasResult"],
              [
                "Binary",
                2514,
                1,
                0,
                ["Ident", 2514, 6, 0, "result"],
                "=",
                "Arr",
                2514,
                34,
                0
              ],
              "Binary",
              2514,
              1,
              0,
              ["Ident", 2514, 6, 0, "result"],
              "=",
              "Const",
              2514,
              42,
              0,
              null
            ],
            [
              "Binary",
              2515,
              1,
              0,
              ["Ident", 2515, 14, 0, "completed"],
              "=",
              "Const",
              2515,
              26,
              0,
              false
            ],
            [
              "Func",
              2516,
              1,
              0,
              ["Ident", 2516, 6, 0, "onValueCallback"],
              [
                ["Ident", 2516, 25, 0, "err"],
                ["Ident", 2516, 29, 0, "value"]
              ],
              [],
              [],
              "BlockStatement",
              2517,
              1,
              0,
              0,
              [
                "IfStatement",
                2517,
                1,
                0,
                0,
                ["Ident", 2517, 7, 0, "completed"],
                [
                  "Return",
                  2518,
                  1,
                  0,
                  "Const",
                  2518,
                  1,
                  0
                ]
              ],
              [
                "Unary",
                2519,
                1,
                0,
                "--",
                "Ident",
                2519,
                1,
                0,
                "slotsUsed"
              ],
              [
                "IfStatement",
                2520,
                1,
                0,
                0,
                [
                  "Binary",
                  2520,
                  7,
                  0,
                  [
                    "Binary",
                    49,
                    7,
                    0,
                    ["Ident", 2520, 7, 0, "err"],
                    "!=",
                    "Const",
                    1,
                    1,
                    0,
                    null
                  ],
                  "&&",
                  "Binary",
                  2520,
                  16,
                  0,
                  ["Ident", 2520, 20, 0, "broken"],
                  "==",
                  "Const",
                  1,
                  1,
                  0,
                  null
                ],
                [
                  "Binary",
                  2521,
                  1,
                  0,
                  ["Ident", 2521, 1, 0, "broken"],
                  "=",
                  "Ident",
                  2521,
                  16,
                  0,
                  "err"
                ]
              ],
              [
                "IfStatement",
                2522,
                1,
                0,
                0,
                [
                  "Binary",
                  2522,
                  7,
                  0,
                  [
                    "Binary",
                    2522,
                    7,
                    0,
                    ["Ident", 2522, 7, 0, "hasResult"],
                    "&&",
                    "Binary",
                    2522,
                    22,
                    0,
                    ["Ident", 2522, 26, 0, "broken"],
                    "==",
                    "Const",
                    1,
                    1,
                    0,
                    null
                  ],
                  "&&",
                  "Binary",
                  57,
                  23,
                  0,
                  [
                    "Binary",
                    2522,
                    38,
                    0,
                    ["Arguments", 2522, 38, 0],
                    ".",
                    "Const",
                    2522,
                    49,
                    0,
                    "length"
                  ],
                  ">",
                  "Const",
                  2522,
                  59,
                  0,
                  1
                ],
                [
                  "Call",
                  2523,
                  1,
                  0,
                  [
                    "Binary",
                    2523,
                    1,
                    0,
                    ["Ident", 2523, 1, 0, "result"],
                    ".",
                    "Const",
                    2523,
                    14,
                    0,
                    "push"
                  ],
                  0,
                  ["Ident", 2523, 19, 0, "value"]
                ]
              ],
              [
                "IfStatement",
                2524,
                1,
                0,
                0,
                [
                  "Unary",
                  2524,
                  7,
                  0,
                  "!",
                  "Ident",
                  2524,
                  11,
                  0,
                  "sync"
                ],
                [
                  "Call",
                  2525,
                  1,
                  0,
                  ["Ident", 2525, 1, 0, "next"],
                  0
                ]
              ]
            ],
            [
              "Binary",
              2526,
              1,
              0,
              ["Ident", 2526, 14, 0, "index"],
              "=",
              "Const",
              2526,
              22,
              0,
              -1
            ],
            [
              "Binary",
              2527,
              1,
              0,
              ["Ident", 2527, 14, 0, "iterStopped"],
              "=",
              "Const",
              2527,
              29,
              0,
              false
            ],
            [
              "Binary",
              2528,
              1,
              0,
              ["Ident", 2528, 14, 0, "close"],
              "=",
              "Func",
              2528,
              24,
              0,
              0,
              [],
              [],
              [],
              "BlockStatement",
              2529,
              1,
              0,
              0,
              [
                "Binary",
                2529,
                1,
                0,
                ["Ident", 2529, 1, 0, "close"],
                "=",
                "Func",
                2529,
                15,
                0,
                0,
                [],
                [],
                []
              ],
              [
                "TryCatch",
                2530,
                1,
                0,
                0,
                [
                  "Return",
                  2531,
                  1,
                  0,
                  "Call",
                  2531,
                  1,
                  0,
                  [
                    "Binary",
                    2531,
                    1,
                    0,
                    ["Ident", 2531, 1, 0, "iterator"],
                    ".",
                    "Const",
                    2531,
                    16,
                    0,
                    "close"
                  ],
                  0
                ],
                ["Ident", 2532, 10, 0, "e"],
                "Return",
                2533,
                1,
                0,
                "Const",
                2533,
                1,
                0
              ]
            ],
            [
              "Func",
              2534,
              1,
              0,
              ["Ident", 2534, 6, 0, "next"],
              [],
              ["item"],
              [],
              "BlockStatement",
              2535,
              1,
              0,
              0,
              [
                "For",
                1118,
                1,
                0,
                0,
                0,
                [
                  "Binary",
                  2535,
                  10,
                  0,
                  [
                    "Binary",
                    2535,
                    10,
                    0,
                    [
                      "Binary",
                      2535,
                      10,
                      0,
                      [
                        "Unary",
                        2535,
                        10,
                        0,
                        "!",
                        "Ident",
                        2535,
                        14,
                        0,
                        "completed"
                      ],
                      "&&",
                      "Binary",
                      2535,
                      28,
                      0,
                      ["Ident", 2535, 32, 0, "broken"],
                      "==",
                      "Const",
                      1,
                      1,
                      0,
                      null
                    ],
                    "&&",
                    "Binary",
                    2535,
                    44,
                    0,
                    ["Ident", 2535, 44, 0, "slotsUsed"],
                    "<",
                    "Ident",
                    2535,
                    58,
                    0,
                    "limit"
                  ],
                  "&&",
                  "Unary",
                  2535,
                  68,
                  0,
                  "!",
                  "Ident",
                  2535,
                  72,
                  0,
                  "iterStopped"
                ],
                0,
                "BlockStatement",
                2536,
                1,
                0,
                0,
                [
                  "TryCatch",
                  2536,
                  1,
                  0,
                  0,
                  [
                    "Binary",
                    2537,
                    1,
                    0,
                    ["Ident", 2537, 12, 0, "item"],
                    "=",
                    "Call",
                    2537,
                    19,
                    0,
                    [
                      "Binary",
                      2537,
                      19,
                      0,
                      ["Ident", 2537, 19, 0, "iterator"],
                      ".",
                      "Const",
                      2537,
                      29,
                      0,
                      "next"
                    ],
                    0
                  ],
                  ["Ident", 2538, 12, 0, "e"],
                  "BlockStatement",
                  2539,
                  1,
                  0,
                  0,
                  [
                    "Binary",
                    2539,
                    1,
                    0,
                    ["Ident", 2539, 1, 0, "broken"],
                    "=",
                    "Ident",
                    2539,
                    18,
                    0,
                    "e"
                  ],
                  ["Break", 2540, 1, 0]
                ],
                [
                  "IfStatement",
                  2542,
                  1,
                  0,
                  0,
                  [
                    "Binary",
                    2542,
                    9,
                    0,
                    ["Ident", 2542, 9, 0, "item"],
                    ".",
                    "Const",
                    2542,
                    15,
                    0,
                    "done"
                  ],
                  [
                    "BlockStatement",
                    2543,
                    1,
                    0,
                    0,
                    [
                      "Binary",
                      2543,
                      1,
                      0,
                      ["Ident", 2543, 1, 0, "iterStopped"],
                      "=",
                      "Const",
                      2543,
                      24,
                      0,
                      true
                    ],
                    ["Break", 2544, 1, 0]
                  ]
                ],
                [
                  "Unary",
                  2546,
                  1,
                  0,
                  "++",
                  "Ident",
                  2546,
                  1,
                  0,
                  "slotsUsed"
                ],
                [
                  "Binary",
                  2547,
                  1,
                  0,
                  ["Ident", 2547, 1, 0, "sync"],
                  "=",
                  "Const",
                  2547,
                  14,
                  0,
                  true
                ],
                [
                  "TryCatch",
                  2548,
                  1,
                  0,
                  0,
                  [
                    "Call",
                    2549,
                    1,
                    0,
                    ["Ident", 2549, 1, 0, "onValue"],
                    0,
                    [
                      "Binary",
                      2549,
                      18,
                      0,
                      ["Ident", 2549, 18, 0, "item"],
                      ".",
                      "Const",
                      2549,
                      23,
                      0,
                      "value"
                    ],
                    [
                      "Unary",
                      897,
                      11,
                      0,
                      "++",
                      "Ident",
                      2549,
                      31,
                      0,
                      "index"
                    ],
                    [
                      "Call",
                      2398,
                      11,
                      0,
                      ["Ident", 2398, 11, 0, "__once"],
                      0,
                      ["Ident", 2549, 50, 0, "onValueCallback"]
                    ]
                  ],
                  ["Ident", 2550, 12, 0, "e"],
                  "BlockStatement",
                  2551,
                  1,
                  0,
                  0,
                  [
                    "Call",
                    2551,
                    1,
                    0,
                    ["Ident", 2551, 1, 0, "close"],
                    0
                  ],
                  [
                    "Throw",
                    2552,
                    1,
                    0,
                    "Ident",
                    2552,
                    14,
                    0,
                    "e"
                  ]
                ],
                [
                  "Binary",
                  2553,
                  1,
                  0,
                  ["Ident", 2553, 1, 0, "sync"],
                  "=",
                  "Const",
                  2553,
                  14,
                  0,
                  false
                ]
              ],
              [
                "IfStatement",
                2554,
                1,
                0,
                0,
                [
                  "Binary",
                  2554,
                  7,
                  0,
                  [
                    "Unary",
                    2554,
                    7,
                    0,
                    "!",
                    "Ident",
                    2554,
                    11,
                    0,
                    "completed"
                  ],
                  "&&",
                  "Binary",
                  2554,
                  27,
                  0,
                  [
                    "Binary",
                    49,
                    7,
                    0,
                    ["Ident", 2554, 27, 0, "broken"],
                    "!=",
                    "Const",
                    1,
                    1,
                    0,
                    null
                  ],
                  "||",
                  "Binary",
                  2554,
                  37,
                  0,
                  ["Ident", 2554, 37, 0, "slotsUsed"],
                  "===",
                  "Const",
                  2554,
                  52,
                  0,
                  0
                ],
                [
                  "BlockStatement",
                  2555,
                  1,
                  0,
                  0,
                  [
                    "Binary",
                    2555,
                    1,
                    0,
                    ["Ident", 2555, 1, 0, "completed"],
                    "=",
                    "Const",
                    2555,
                    19,
                    0,
                    true
                  ],
                  [
                    "Call",
                    2556,
                    1,
                    0,
                    ["Ident", 2556, 1, 0, "close"],
                    0
                  ],
                  [
                    "IfStatement",
                    2557,
                    1,
                    0,
                    0,
                    [
                      "Binary",
                      49,
                      7,
                      0,
                      ["Ident", 2557, 9, 0, "broken"],
                      "!=",
                      "Const",
                      1,
                      1,
                      0,
                      null
                    ],
                    [
                      "Call",
                      2558,
                      1,
                      0,
                      ["Ident", 2558, 1, 0, "onComplete"],
                      0,
                      ["Ident", 2558, 21, 0, "broken"]
                    ],
                    "Call",
                    2560,
                    1,
                    0,
                    ["Ident", 2560, 1, 0, "onComplete"],
                    0,
                    ["Const", 2560, 21, 0, null],
                    ["Ident", 2560, 26, 0, "result"]
                  ]
                ]
              ]
            ],
            [
              "Call",
              2561,
              1,
              0,
              ["Ident", 2561, 1, 0, "next"],
              0
            ]
          ],
          type: {type: "generic", base: "functionBase", args: ["undefined"]},
          dependencies: ["__asyncIter", "__once", "__typeof"]
        },
        __is: {
          helper: [
            "IfExpression",
            3090,
            21,
            0,
            [
              "Binary",
              138,
              7,
              0,
              [
                "Unary",
                138,
                7,
                0,
                "typeof",
                "Binary",
                3090,
                37,
                0,
                ["Ident", 3090, 37, 0, "Object"],
                ".",
                "Const",
                3090,
                45,
                0,
                "is"
              ],
              "===",
              "Const",
              138,
              25,
              0,
              "function"
            ],
            [
              "Binary",
              3091,
              1,
              0,
              ["Ident", 3091, 1, 0, "Object"],
              ".",
              "Const",
              3091,
              10,
              0,
              "is"
            ],
            "Func",
            3093,
            4,
            0,
            0,
            [
              ["Ident", 3093, 5, 0, "x"],
              ["Ident", 3093, 7, 0, "y"]
            ],
            [],
            [],
            "IfStatement",
            3094,
            1,
            0,
            0,
            [
              "Binary",
              3094,
              7,
              0,
              ["Ident", 3094, 7, 0, "x"],
              "===",
              "Ident",
              3094,
              12,
              0,
              "y"
            ],
            [
              "Return",
              3095,
              1,
              0,
              "Binary",
              3095,
              1,
              0,
              [
                "Binary",
                43,
                7,
                0,
                ["Ident", 3095, 1, 0, "x"],
                "!==",
                "Const",
                3095,
                12,
                0,
                0
              ],
              "||",
              "Binary",
              3095,
              18,
              0,
              [
                "Binary",
                3095,
                18,
                0,
                ["Const", 3095, 18, 0, 1],
                "/",
                "Ident",
                3095,
                22,
                0,
                "x"
              ],
              "===",
              "Binary",
              3095,
              27,
              0,
              ["Const", 3095, 28, 0, 1],
              "/",
              "Ident",
              3095,
              32,
              0,
              "y"
            ],
            "Return",
            3097,
            1,
            0,
            "Binary",
            3097,
            1,
            0,
            [
              "Binary",
              43,
              7,
              0,
              ["Ident", 3097, 1, 0, "x"],
              "!==",
              "Ident",
              3097,
              11,
              0,
              "x"
            ],
            "&&",
            "Binary",
            43,
            7,
            0,
            ["Ident", 3097, 17, 0, "y"],
            "!==",
            "Ident",
            3097,
            22,
            0,
            "y"
          ],
          type: "any",
          dependencies: ["__is"]
        },
        __bind: {
          helper: [
            "Func",
            3137,
            25,
            0,
            0,
            [
              ["Ident", 3137, 26, 0, "parent"],
              ["Ident", 3137, 33, 0, "child"]
            ],
            ["func"],
            [],
            "BlockStatement",
            3138,
            1,
            0,
            0,
            [
              "IfStatement",
              3138,
              1,
              0,
              0,
              [
                "Binary",
                3138,
                5,
                0,
                ["Ident", 3138, 9, 0, "parent"],
                "==",
                "Const",
                1,
                1,
                0,
                null
              ],
              [
                "Throw",
                3139,
                1,
                0,
                "Call",
                3139,
                10,
                0,
                ["Ident", 3139, 10, 0, "TypeError"],
                0,
                [
                  "Binary",
                  608,
                  7,
                  0,
                  ["Const", 3139, 21, 0, "Expected parent to be an object, got "],
                  "+",
                  "Call",
                  494,
                  49,
                  0,
                  ["Ident", 494, 49, 0, "__typeof"],
                  0,
                  ["Ident", 3139, 68, 0, "parent"]
                ]
              ]
            ],
            [
              "Binary",
              3140,
              1,
              0,
              ["Ident", 3140, 6, 0, "func"],
              "=",
              "Binary",
              3140,
              13,
              0,
              ["Ident", 3140, 13, 0, "parent"],
              ".",
              "Ident",
              3140,
              21,
              0,
              "child"
            ],
            [
              "IfStatement",
              3141,
              1,
              0,
              0,
              [
                "Binary",
                3141,
                5,
                0,
                [
                  "Unary",
                  138,
                  7,
                  0,
                  "typeof",
                  "Ident",
                  3141,
                  22,
                  0,
                  "func"
                ],
                "!==",
                "Const",
                138,
                25,
                0,
                "function"
              ],
              [
                "Throw",
                3142,
                1,
                0,
                "Call",
                3142,
                10,
                0,
                ["Ident", 3142, 10, 0, "Error"],
                0,
                [
                  "Binary",
                  608,
                  7,
                  0,
                  [
                    "Binary",
                    608,
                    7,
                    0,
                    ["Const", 3142, 17, 0, "Trying to bind child '"],
                    "+",
                    "Call",
                    3142,
                    42,
                    0,
                    ["Ident", 3142, 42, 0, "String"],
                    0,
                    ["Ident", 3142, 49, 0, "child"]
                  ],
                  "+",
                  "Const",
                  3142,
                  17,
                  0,
                  "' which is not a function"
                ]
              ]
            ],
            [
              "Return",
              3143,
              4,
              0,
              "Func",
              3143,
              4,
              0,
              0,
              [],
              [],
              [],
              "Return",
              3143,
              7,
              0,
              "Call",
              3143,
              7,
              0,
              [
                "Binary",
                3143,
                7,
                0,
                ["Ident", 3143, 7, 0, "func"],
                ".",
                "Const",
                3143,
                7,
                0,
                "apply"
              ],
              0,
              ["Ident", 3143, 14, 0, "parent"],
              ["Arguments", 3143, 25, 0]
            ]
          ],
          type: {type: "generic", base: "functionBase", args: ["function"]},
          dependencies: ["__bind", "__toArray", "__typeof"]
        },
        __defProp: {
          helper: [
            "Call",
            9,
            9,
            0,
            [
              "Func",
              9,
              12,
              0,
              0,
              [],
              ["defineGetter", "defineSetter", "fallback", "lookupGetter", "lookupSetter", "supportsAccessors"],
              [],
              "BlockStatement",
              3146,
              1,
              0,
              0,
              [
                "Binary",
                3146,
                1,
                0,
                ["Ident", 3146, 6, 0, "fallback"],
                "=",
                "Binary",
                3146,
                17,
                0,
                ["Ident", 3146, 17, 0, "Object"],
                ".",
                "Const",
                3146,
                25,
                0,
                "defineProperty"
              ],
              [
                "IfStatement",
                3147,
                1,
                0,
                0,
                [
                  "Binary",
                  3147,
                  5,
                  0,
                  [
                    "Binary",
                    138,
                    7,
                    0,
                    [
                      "Unary",
                      138,
                      7,
                      0,
                      "typeof",
                      "Ident",
                      3147,
                      18,
                      0,
                      "fallback"
                    ],
                    "===",
                    "Const",
                    138,
                    25,
                    0,
                    "function"
                  ],
                  "&&",
                  "Call",
                  9,
                  9,
                  0,
                  [
                    "Func",
                    9,
                    12,
                    0,
                    0,
                    [],
                    ["o"],
                    [],
                    "TryCatch",
                    3148,
                    1,
                    0,
                    0,
                    [
                      "BlockStatement",
                      3149,
                      1,
                      0,
                      0,
                      [
                        "Binary",
                        3149,
                        1,
                        0,
                        ["Ident", 3149, 12, 0, "o"],
                        "=",
                        "Obj",
                        3149,
                        16,
                        0
                      ],
                      [
                        "Call",
                        3150,
                        1,
                        0,
                        ["Ident", 3150, 1, 0, "fallback"],
                        0,
                        ["Ident", 3150, 18, 0, "o"],
                        ["Const", 3150, 22, 0, "sentinel"],
                        ["Obj", 3150, 31, 0]
                      ],
                      [
                        "Return",
                        3151,
                        1,
                        0,
                        "Binary",
                        3151,
                        1,
                        0,
                        ["Const", 3151, 19, 0, "sentinel"],
                        "in",
                        "Ident",
                        3151,
                        1,
                        0,
                        "o"
                      ]
                    ],
                    ["Ident", 3152, 12, 0, "e"],
                    "Return",
                    3153,
                    1,
                    0,
                    "Const",
                    3153,
                    1,
                    0,
                    false
                  ],
                  0
                ],
                [
                  "Return",
                  3154,
                  1,
                  0,
                  "Ident",
                  3154,
                  1,
                  0,
                  "fallback"
                ],
                "BlockStatement",
                3156,
                1,
                0,
                0,
                [
                  "Binary",
                  3156,
                  1,
                  0,
                  ["Ident", 3156, 8, 0, "supportsAccessors"],
                  "=",
                  "Call",
                  646,
                  7,
                  0,
                  [
                    "Binary",
                    646,
                    7,
                    0,
                    ["Ident", 646, 7, 0, "__owns"],
                    ".",
                    "Const",
                    646,
                    7,
                    0,
                    "call"
                  ],
                  0,
                  [
                    "Binary",
                    3156,
                    29,
                    0,
                    ["Ident", 3156, 29, 0, "Object"],
                    ".",
                    "Const",
                    3156,
                    37,
                    0,
                    "prototype"
                  ],
                  ["Const", 3156, 56, 0, "__defineGetter__"]
                ],
                [
                  "Binary",
                  3157,
                  1,
                  0,
                  ["Ident", 3157, 8, 0, "lookupGetter"],
                  "=",
                  "Binary",
                  3157,
                  24,
                  0,
                  ["Ident", 3157, 24, 0, "supportsAccessors"],
                  "&&",
                  "Binary",
                  3157,
                  47,
                  0,
                  [
                    "Binary",
                    3157,
                    47,
                    0,
                    ["Ident", 3157, 47, 0, "Object"],
                    ".",
                    "Const",
                    3157,
                    47,
                    0,
                    "prototype"
                  ],
                  ".",
                  "Const",
                  3157,
                  56,
                  0,
                  "__lookupGetter__"
                ],
                [
                  "Binary",
                  3158,
                  1,
                  0,
                  ["Ident", 3158, 8, 0, "lookupSetter"],
                  "=",
                  "Binary",
                  3158,
                  24,
                  0,
                  ["Ident", 3158, 24, 0, "supportsAccessors"],
                  "&&",
                  "Binary",
                  3158,
                  47,
                  0,
                  [
                    "Binary",
                    3158,
                    47,
                    0,
                    ["Ident", 3158, 47, 0, "Object"],
                    ".",
                    "Const",
                    3158,
                    47,
                    0,
                    "prototype"
                  ],
                  ".",
                  "Const",
                  3158,
                  56,
                  0,
                  "__lookupSetter__"
                ],
                [
                  "Binary",
                  3159,
                  1,
                  0,
                  ["Ident", 3159, 8, 0, "defineGetter"],
                  "=",
                  "Binary",
                  3159,
                  24,
                  0,
                  ["Ident", 3159, 24, 0, "supportsAccessors"],
                  "&&",
                  "Binary",
                  3159,
                  47,
                  0,
                  [
                    "Binary",
                    3159,
                    47,
                    0,
                    ["Ident", 3159, 47, 0, "Object"],
                    ".",
                    "Const",
                    3159,
                    47,
                    0,
                    "prototype"
                  ],
                  ".",
                  "Const",
                  3159,
                  56,
                  0,
                  "__defineGetter__"
                ],
                [
                  "Binary",
                  3160,
                  1,
                  0,
                  ["Ident", 3160, 8, 0, "defineSetter"],
                  "=",
                  "Binary",
                  3160,
                  24,
                  0,
                  ["Ident", 3160, 24, 0, "supportsAccessors"],
                  "&&",
                  "Binary",
                  3160,
                  47,
                  0,
                  [
                    "Binary",
                    3160,
                    47,
                    0,
                    ["Ident", 3160, 47, 0, "Object"],
                    ".",
                    "Const",
                    3160,
                    47,
                    0,
                    "prototype"
                  ],
                  ".",
                  "Const",
                  3160,
                  56,
                  0,
                  "__defineSetter__"
                ],
                [
                  "Return",
                  1902,
                  1,
                  0,
                  "Func",
                  1902,
                  1,
                  0,
                  0,
                  [
                    ["Ident", 3161, 7, 0, "object"],
                    ["Ident", 3161, 23, 0, "property"],
                    ["Ident", 3161, 43, 0, "descriptor"]
                  ],
                  ["proto"],
                  [],
                  "BlockStatement",
                  1902,
                  1,
                  0,
                  0,
                  [
                    "IfStatement",
                    1737,
                    31,
                    0,
                    0,
                    [
                      "Binary",
                      3161,
                      6,
                      0,
                      [
                        "Binary",
                        661,
                        18,
                        0,
                        [
                          "Binary",
                          144,
                          47,
                          0,
                          [
                            "Unary",
                            144,
                            47,
                            0,
                            "typeof",
                            "Ident",
                            3161,
                            7,
                            0,
                            "object"
                          ],
                          "!==",
                          "Const",
                          144,
                          62,
                          0,
                          "object"
                        ],
                        "||",
                        "Binary",
                        43,
                        7,
                        0,
                        ["Ident", 3161, 7, 0, "object"],
                        "===",
                        "Const",
                        1,
                        1,
                        0,
                        null
                      ],
                      "&&",
                      "Binary",
                      657,
                      18,
                      0,
                      [
                        "Unary",
                        138,
                        7,
                        0,
                        "typeof",
                        "Ident",
                        3161,
                        7,
                        0,
                        "object"
                      ],
                      "!==",
                      "Const",
                      138,
                      25,
                      0,
                      "function"
                    ],
                    [
                      "Throw",
                      1738,
                      1,
                      0,
                      "Call",
                      1738,
                      14,
                      0,
                      ["Ident", 1738, 14, 0, "TypeError"],
                      0,
                      [
                        "Binary",
                        608,
                        7,
                        0,
                        [
                          "Const",
                          608,
                          7,
                          0,
                          "Expected object to be one of Object or Function, got "
                        ],
                        "+",
                        "Call",
                        494,
                        49,
                        0,
                        ["Ident", 494, 49, 0, "__typeof"],
                        0,
                        ["Ident", 3161, 7, 0, "object"]
                      ]
                    ]
                  ],
                  [
                    "IfStatement",
                    1686,
                    1,
                    0,
                    0,
                    [
                      "Binary",
                      651,
                      18,
                      0,
                      [
                        "Unary",
                        129,
                        7,
                        0,
                        "typeof",
                        "Ident",
                        3161,
                        23,
                        0,
                        "property"
                      ],
                      "!==",
                      "Const",
                      129,
                      25,
                      0,
                      "string"
                    ],
                    [
                      "Throw",
                      1687,
                      1,
                      0,
                      "Call",
                      1687,
                      18,
                      0,
                      ["Ident", 1687, 18, 0, "TypeError"],
                      0,
                      [
                        "Binary",
                        608,
                        7,
                        0,
                        ["Const", 608, 7, 0, "Expected property to be a String, got "],
                        "+",
                        "Call",
                        494,
                        49,
                        0,
                        ["Ident", 494, 49, 0, "__typeof"],
                        0,
                        ["Ident", 3161, 23, 0, "property"]
                      ]
                    ]
                  ],
                  [
                    "IfStatement",
                    1686,
                    1,
                    0,
                    0,
                    [
                      "Binary",
                      661,
                      18,
                      0,
                      [
                        "Binary",
                        144,
                        47,
                        0,
                        [
                          "Unary",
                          144,
                          47,
                          0,
                          "typeof",
                          "Ident",
                          3161,
                          43,
                          0,
                          "descriptor"
                        ],
                        "!==",
                        "Const",
                        144,
                        62,
                        0,
                        "object"
                      ],
                      "||",
                      "Binary",
                      43,
                      7,
                      0,
                      ["Ident", 3161, 43, 0, "descriptor"],
                      "===",
                      "Const",
                      1,
                      1,
                      0,
                      null
                    ],
                    [
                      "Throw",
                      1687,
                      1,
                      0,
                      "Call",
                      1687,
                      18,
                      0,
                      ["Ident", 1687, 18, 0, "TypeError"],
                      0,
                      [
                        "Binary",
                        608,
                        7,
                        0,
                        ["Const", 608, 7, 0, "Expected descriptor to be an Object, got "],
                        "+",
                        "Call",
                        494,
                        49,
                        0,
                        ["Ident", 494, 49, 0, "__typeof"],
                        0,
                        ["Ident", 3161, 43, 0, "descriptor"]
                      ]
                    ]
                  ],
                  [
                    "IfStatement",
                    3162,
                    1,
                    0,
                    0,
                    [
                      "Binary",
                      138,
                      7,
                      0,
                      [
                        "Unary",
                        138,
                        7,
                        0,
                        "typeof",
                        "Ident",
                        3162,
                        22,
                        0,
                        "fallback"
                      ],
                      "===",
                      "Const",
                      138,
                      25,
                      0,
                      "function"
                    ],
                    [
                      "TryCatch",
                      3163,
                      1,
                      0,
                      0,
                      [
                        "Return",
                        3164,
                        1,
                        0,
                        "Call",
                        3164,
                        17,
                        0,
                        ["Ident", 3164, 17, 0, "fallback"],
                        0,
                        ["Ident", 3164, 27, 0, "object"],
                        ["Ident", 3164, 34, 0, "property"],
                        ["Ident", 3164, 44, 0, "descriptor"]
                      ],
                      ["Ident", 3165, 14, 0, "e"],
                      "Const",
                      3166,
                      1,
                      0
                    ]
                  ],
                  [
                    "IfStatement",
                    3168,
                    1,
                    0,
                    0,
                    [
                      "Call",
                      646,
                      7,
                      0,
                      [
                        "Binary",
                        646,
                        7,
                        0,
                        ["Ident", 646, 7, 0, "__owns"],
                        ".",
                        "Const",
                        646,
                        7,
                        0,
                        "call"
                      ],
                      0,
                      ["Ident", 3168, 9, 0, "descriptor"],
                      ["Const", 3168, 30, 0, "value"]
                    ],
                    [
                      "IfStatement",
                      3169,
                      1,
                      0,
                      0,
                      [
                        "Binary",
                        3169,
                        11,
                        0,
                        ["Ident", 3169, 11, 0, "supportsAccessors"],
                        "&&",
                        "Call",
                        3169,
                        36,
                        0,
                        [
                          "Binary",
                          3169,
                          36,
                          0,
                          ["Ident", 3169, 36, 0, "lookupGetter"],
                          ".",
                          "Const",
                          3169,
                          36,
                          0,
                          "call"
                        ],
                        0,
                        ["Ident", 3169, 51, 0, "object"],
                        [
                          "Binary",
                          3169,
                          58,
                          0,
                          ["Ident", 3169, 58, 0, "property"],
                          "||",
                          "Call",
                          3169,
                          70,
                          0,
                          [
                            "Binary",
                            3169,
                            70,
                            0,
                            ["Ident", 3169, 70, 0, "lookupSetter"],
                            ".",
                            "Const",
                            3169,
                            70,
                            0,
                            "call"
                          ],
                          0,
                          ["Ident", 3169, 86, 0, "object"],
                          ["Ident", 3169, 93, 0, "property"]
                        ]
                      ],
                      [
                        "BlockStatement",
                        3170,
                        1,
                        0,
                        0,
                        [
                          "Binary",
                          3170,
                          1,
                          0,
                          ["Ident", 3170, 14, 0, "proto"],
                          "=",
                          "Binary",
                          3170,
                          22,
                          0,
                          ["Ident", 3170, 22, 0, "object"],
                          ".",
                          "Const",
                          3170,
                          30,
                          0,
                          "__proto__"
                        ],
                        [
                          "Binary",
                          3171,
                          1,
                          0,
                          [
                            "Binary",
                            3171,
                            1,
                            0,
                            ["Ident", 3171, 1, 0, "object"],
                            ".",
                            "Const",
                            3171,
                            18,
                            0,
                            "__proto__"
                          ],
                          "=",
                          "Binary",
                          3171,
                          30,
                          0,
                          ["Ident", 3171, 30, 0, "Object"],
                          ".",
                          "Const",
                          3171,
                          38,
                          0,
                          "prototype"
                        ],
                        [
                          "Unary",
                          3172,
                          1,
                          0,
                          "delete",
                          "Binary",
                          3172,
                          17,
                          0,
                          ["Ident", 3172, 17, 0, "object"],
                          ".",
                          "Ident",
                          3172,
                          25,
                          0,
                          "property"
                        ],
                        [
                          "Binary",
                          3173,
                          1,
                          0,
                          [
                            "Binary",
                            3173,
                            1,
                            0,
                            ["Ident", 3173, 1, 0, "object"],
                            ".",
                            "Ident",
                            3173,
                            18,
                            0,
                            "property"
                          ],
                          "=",
                          "Binary",
                          3173,
                          30,
                          0,
                          ["Ident", 3173, 30, 0, "descriptor"],
                          ".",
                          "Const",
                          3173,
                          42,
                          0,
                          "value"
                        ],
                        [
                          "Binary",
                          3174,
                          1,
                          0,
                          [
                            "Binary",
                            3174,
                            1,
                            0,
                            ["Ident", 3174, 1, 0, "object"],
                            ".",
                            "Const",
                            3174,
                            18,
                            0,
                            "__proto__"
                          ],
                          "=",
                          "Ident",
                          3174,
                          30,
                          0,
                          "proto"
                        ]
                      ],
                      "Binary",
                      3176,
                      1,
                      0,
                      [
                        "Binary",
                        3176,
                        1,
                        0,
                        ["Ident", 3176, 1, 0, "object"],
                        ".",
                        "Ident",
                        3176,
                        18,
                        0,
                        "property"
                      ],
                      "=",
                      "Binary",
                      3176,
                      30,
                      0,
                      ["Ident", 3176, 30, 0, "descriptor"],
                      ".",
                      "Const",
                      3176,
                      42,
                      0,
                      "value"
                    ],
                    "BlockStatement",
                    3178,
                    1,
                    0,
                    0,
                    [
                      "IfStatement",
                      3178,
                      1,
                      0,
                      0,
                      [
                        "Unary",
                        3178,
                        11,
                        0,
                        "!",
                        "Ident",
                        3178,
                        15,
                        0,
                        "supportsAccessors"
                      ],
                      [
                        "Throw",
                        3179,
                        1,
                        0,
                        "Call",
                        3179,
                        16,
                        0,
                        ["Ident", 3179, 16, 0, "Error"],
                        0,
                        [
                          "Const",
                          3179,
                          23,
                          0,
                          "Getters and setters cannot be defined on this Javascript engine"
                        ]
                      ]
                    ],
                    [
                      "IfStatement",
                      3180,
                      1,
                      0,
                      0,
                      [
                        "Call",
                        646,
                        7,
                        0,
                        [
                          "Binary",
                          646,
                          7,
                          0,
                          ["Ident", 646, 7, 0, "__owns"],
                          ".",
                          "Const",
                          646,
                          7,
                          0,
                          "call"
                        ],
                        0,
                        ["Ident", 3180, 11, 0, "descriptor"],
                        ["Const", 3180, 32, 0, "get"]
                      ],
                      [
                        "Call",
                        3181,
                        1,
                        0,
                        [
                          "Binary",
                          3181,
                          1,
                          0,
                          ["Ident", 3181, 1, 0, "defineGetter"],
                          ".",
                          "Const",
                          3181,
                          1,
                          0,
                          "call"
                        ],
                        0,
                        ["Ident", 3181, 26, 0, "object"],
                        ["Ident", 3181, 33, 0, "property"],
                        [
                          "Binary",
                          3181,
                          43,
                          0,
                          ["Ident", 3181, 43, 0, "descriptor"],
                          ".",
                          "Const",
                          3181,
                          55,
                          0,
                          "get"
                        ]
                      ]
                    ],
                    [
                      "IfStatement",
                      3182,
                      1,
                      0,
                      0,
                      [
                        "Call",
                        646,
                        7,
                        0,
                        [
                          "Binary",
                          646,
                          7,
                          0,
                          ["Ident", 646, 7, 0, "__owns"],
                          ".",
                          "Const",
                          646,
                          7,
                          0,
                          "call"
                        ],
                        0,
                        ["Ident", 3182, 11, 0, "descriptor"],
                        ["Const", 3182, 32, 0, "set"]
                      ],
                      [
                        "Call",
                        3183,
                        1,
                        0,
                        [
                          "Binary",
                          3183,
                          1,
                          0,
                          ["Ident", 3183, 1, 0, "defineSetter"],
                          ".",
                          "Const",
                          3183,
                          1,
                          0,
                          "call"
                        ],
                        0,
                        ["Ident", 3183, 26, 0, "object"],
                        ["Ident", 3183, 33, 0, "property"],
                        [
                          "Binary",
                          3183,
                          43,
                          0,
                          ["Ident", 3183, 43, 0, "descriptor"],
                          ".",
                          "Const",
                          3183,
                          55,
                          0,
                          "set"
                        ]
                      ]
                    ]
                  ],
                  [
                    "Return",
                    3184,
                    1,
                    0,
                    "Ident",
                    3184,
                    1,
                    0,
                    "object"
                  ]
                ]
              ]
            ],
            0
          ],
          type: "any",
          dependencies: ["__defProp", "__owns", "__typeof"]
        },
        __compose: {
          helper: [
            "Func",
            1902,
            1,
            0,
            0,
            [
              ["Ident", 3190, 29, 0, "left"],
              ["Ident", 3190, 40, 0, "right"]
            ],
            [],
            [],
            "BlockStatement",
            1902,
            1,
            0,
            0,
            [
              "IfStatement",
              1686,
              1,
              0,
              0,
              [
                "Binary",
                657,
                18,
                0,
                [
                  "Unary",
                  138,
                  7,
                  0,
                  "typeof",
                  "Ident",
                  3190,
                  29,
                  0,
                  "left"
                ],
                "!==",
                "Const",
                138,
                25,
                0,
                "function"
              ],
              [
                "Throw",
                1687,
                1,
                0,
                "Call",
                1687,
                18,
                0,
                ["Ident", 1687, 18, 0, "TypeError"],
                0,
                [
                  "Binary",
                  608,
                  7,
                  0,
                  ["Const", 608, 7, 0, "Expected left to be a Function, got "],
                  "+",
                  "Call",
                  494,
                  49,
                  0,
                  ["Ident", 494, 49, 0, "__typeof"],
                  0,
                  ["Ident", 3190, 29, 0, "left"]
                ]
              ]
            ],
            [
              "IfStatement",
              1686,
              1,
              0,
              0,
              [
                "Binary",
                657,
                18,
                0,
                [
                  "Unary",
                  138,
                  7,
                  0,
                  "typeof",
                  "Ident",
                  3190,
                  40,
                  0,
                  "right"
                ],
                "!==",
                "Const",
                138,
                25,
                0,
                "function"
              ],
              [
                "Throw",
                1687,
                1,
                0,
                "Call",
                1687,
                18,
                0,
                ["Ident", 1687, 18, 0, "TypeError"],
                0,
                [
                  "Binary",
                  608,
                  7,
                  0,
                  ["Const", 608, 7, 0, "Expected right to be a Function, got "],
                  "+",
                  "Call",
                  494,
                  49,
                  0,
                  ["Ident", 494, 49, 0, "__typeof"],
                  0,
                  ["Ident", 3190, 40, 0, "right"]
                ]
              ]
            ],
            [
              "Return",
              3191,
              4,
              0,
              "Func",
              3191,
              4,
              0,
              0,
              [],
              [],
              [],
              "Return",
              3191,
              6,
              0,
              "Call",
              3191,
              6,
              0,
              [
                "Binary",
                3191,
                6,
                0,
                ["Ident", 3191, 6, 0, "left"],
                ".",
                "Const",
                3191,
                6,
                0,
                "call"
              ],
              0,
              ["This", 3191, 13, 0],
              [
                "Call",
                3191,
                18,
                0,
                [
                  "Binary",
                  3191,
                  18,
                  0,
                  ["Ident", 3191, 18, 0, "right"],
                  ".",
                  "Const",
                  3191,
                  18,
                  0,
                  "apply"
                ],
                0,
                ["This", 3191, 26, 0],
                ["Arguments", 3191, 35, 0]
              ]
            ]
          ],
          type: {type: "generic", base: "functionBase", args: ["function"]},
          dependencies: ["__compose", "__toArray", "__typeof"]
        },
        __curry: {
          helper: [
            "Func",
            1902,
            1,
            0,
            0,
            [
              ["Ident", 3205, 27, 0, "numArgs"],
              ["Ident", 3205, 46, 0, "f"]
            ],
            ["currier"],
            [],
            "BlockStatement",
            1902,
            1,
            0,
            0,
            [
              "IfStatement",
              1686,
              1,
              0,
              0,
              [
                "Binary",
                653,
                18,
                0,
                [
                  "Unary",
                  132,
                  7,
                  0,
                  "typeof",
                  "Ident",
                  3205,
                  27,
                  0,
                  "numArgs"
                ],
                "!==",
                "Const",
                132,
                25,
                0,
                "number"
              ],
              [
                "Throw",
                1687,
                1,
                0,
                "Call",
                1687,
                18,
                0,
                ["Ident", 1687, 18, 0, "TypeError"],
                0,
                [
                  "Binary",
                  608,
                  7,
                  0,
                  ["Const", 608, 7, 0, "Expected numArgs to be a Number, got "],
                  "+",
                  "Call",
                  494,
                  49,
                  0,
                  ["Ident", 494, 49, 0, "__typeof"],
                  0,
                  ["Ident", 3205, 27, 0, "numArgs"]
                ]
              ]
            ],
            [
              "IfStatement",
              1686,
              1,
              0,
              0,
              [
                "Binary",
                657,
                18,
                0,
                [
                  "Unary",
                  138,
                  7,
                  0,
                  "typeof",
                  "Ident",
                  3205,
                  46,
                  0,
                  "f"
                ],
                "!==",
                "Const",
                138,
                25,
                0,
                "function"
              ],
              [
                "Throw",
                1687,
                1,
                0,
                "Call",
                1687,
                18,
                0,
                ["Ident", 1687, 18, 0, "TypeError"],
                0,
                [
                  "Binary",
                  608,
                  7,
                  0,
                  ["Const", 608, 7, 0, "Expected f to be a Function, got "],
                  "+",
                  "Call",
                  494,
                  49,
                  0,
                  ["Ident", 494, 49, 0, "__typeof"],
                  0,
                  ["Ident", 3205, 46, 0, "f"]
                ]
              ]
            ],
            [
              "IfStatement",
              3206,
              1,
              0,
              0,
              [
                "Binary",
                759,
                9,
                0,
                ["Ident", 3206, 5, 0, "numArgs"],
                ">",
                "Const",
                3206,
                17,
                0,
                1
              ],
              [
                "BlockStatement",
                3207,
                1,
                0,
                0,
                [
                  "Binary",
                  3207,
                  1,
                  0,
                  ["Ident", 3207, 8, 0, "currier"],
                  "=",
                  "Func",
                  3207,
                  16,
                  0,
                  0,
                  [["Ident", 3207, 17, 0, "args"]],
                  ["ret"],
                  [],
                  "IfStatement",
                  3208,
                  1,
                  0,
                  0,
                  [
                    "Binary",
                    761,
                    9,
                    0,
                    [
                      "Call",
                      744,
                      11,
                      0,
                      ["Ident", 744, 11, 0, "__num"],
                      0,
                      [
                        "Binary",
                        3208,
                        9,
                        0,
                        ["Ident", 3208, 9, 0, "args"],
                        ".",
                        "Const",
                        3208,
                        15,
                        0,
                        "length"
                      ]
                    ],
                    ">=",
                    "Ident",
                    3208,
                    24,
                    0,
                    "numArgs"
                  ],
                  [
                    "Return",
                    3209,
                    1,
                    0,
                    "Call",
                    3209,
                    1,
                    0,
                    [
                      "Binary",
                      3209,
                      1,
                      0,
                      ["Ident", 3209, 1, 0, "f"],
                      ".",
                      "Const",
                      3209,
                      11,
                      0,
                      "apply"
                    ],
                    0,
                    ["This", 3209, 17, 0],
                    ["Ident", 3209, 22, 0, "args"]
                  ],
                  "BlockStatement",
                  3211,
                  1,
                  0,
                  0,
                  [
                    "Binary",
                    3211,
                    1,
                    0,
                    ["Ident", 3211, 12, 0, "ret"],
                    "=",
                    "Func",
                    3211,
                    16,
                    0,
                    0,
                    [],
                    [],
                    [],
                    "IfStatement",
                    3212,
                    1,
                    0,
                    0,
                    [
                      "Binary",
                      3212,
                      13,
                      0,
                      [
                        "Binary",
                        3212,
                        13,
                        0,
                        ["Arguments", 3212, 13, 0],
                        ".",
                        "Const",
                        3212,
                        24,
                        0,
                        "length"
                      ],
                      "===",
                      "Const",
                      3212,
                      34,
                      0,
                      0
                    ],
                    [
                      "Return",
                      3213,
                      1,
                      0,
                      "Ident",
                      3213,
                      1,
                      0,
                      "ret"
                    ],
                    "Return",
                    3215,
                    1,
                    0,
                    "Call",
                    3215,
                    1,
                    0,
                    [
                      "Binary",
                      3215,
                      1,
                      0,
                      ["Ident", 3215, 1, 0, "currier"],
                      ".",
                      "Const",
                      3215,
                      1,
                      0,
                      "call"
                    ],
                    0,
                    ["This", 3215, 22, 0],
                    [
                      "Call",
                      3215,
                      27,
                      0,
                      [
                        "Binary",
                        3215,
                        27,
                        0,
                        ["Ident", 3215, 27, 0, "args"],
                        ".",
                        "Const",
                        3215,
                        33,
                        0,
                        "concat"
                      ],
                      0,
                      [
                        "Call",
                        3215,
                        40,
                        0,
                        [
                          "Binary",
                          3215,
                          40,
                          0,
                          ["Ident", 3215, 40, 0, "__slice"],
                          ".",
                          "Const",
                          3215,
                          40,
                          0,
                          "call"
                        ],
                        0,
                        ["Arguments", 3215, 49, 0]
                      ]
                    ]
                  ],
                  [
                    "Return",
                    3216,
                    1,
                    0,
                    "Ident",
                    3216,
                    1,
                    0,
                    "ret"
                  ]
                ],
                [
                  "Return",
                  3217,
                  1,
                  0,
                  "Call",
                  3217,
                  1,
                  0,
                  ["Ident", 3217, 1, 0, "currier"],
                  0,
                  ["Arr", 3217, 13, 0]
                ]
              ],
              "Return",
              3219,
              1,
              0,
              "Ident",
              3219,
              1,
              0,
              "f"
            ]
          ],
          type: {type: "generic", base: "functionBase", args: ["function"]},
          dependencies: ["__curry", "__num", "__slice", "__typeof"]
        },
        __import: {
          helper: [
            "Func",
            3233,
            27,
            0,
            0,
            [
              ["Ident", 3233, 28, 0, "dest"],
              ["Ident", 3233, 33, 0, "source"]
            ],
            ["k"],
            [],
            "BlockStatement",
            3234,
            1,
            0,
            0,
            [
              "ForIn",
              3234,
              1,
              0,
              0,
              ["Ident", 3234, 6, 0, "k"],
              ["Ident", 3234, 11, 0, "source"],
              "IfStatement",
              1572,
              1,
              0,
              0,
              [
                "Call",
                646,
                7,
                0,
                [
                  "Binary",
                  646,
                  7,
                  0,
                  ["Ident", 646, 7, 0, "__owns"],
                  ".",
                  "Const",
                  646,
                  7,
                  0,
                  "call"
                ],
                0,
                ["Ident", 3234, 11, 0, "source"],
                ["Ident", 3234, 6, 0, "k"]
              ],
              [
                "Binary",
                3235,
                1,
                0,
                [
                  "Binary",
                  3235,
                  1,
                  0,
                  ["Ident", 3235, 1, 0, "dest"],
                  ".",
                  "Ident",
                  3235,
                  10,
                  0,
                  "k"
                ],
                "=",
                "Binary",
                3235,
                15,
                0,
                ["Ident", 3235, 15, 0, "source"],
                ".",
                "Ident",
                3235,
                23,
                0,
                "k"
              ]
            ],
            [
              "Return",
              3236,
              1,
              0,
              "Ident",
              3236,
              1,
              0,
              "dest"
            ]
          ],
          type: {type: "generic", base: "functionBase", args: ["object"]},
          dependencies: ["__import", "__owns"]
        },
        WeakMap: {
          helper: [
            "IfExpression",
            3285,
            24,
            0,
            [
              "Binary",
              138,
              7,
              0,
              [
                "Unary",
                138,
                7,
                0,
                "typeof",
                "Binary",
                3285,
                40,
                0,
                ["Ident", 3285, 40, 0, "GLOBAL"],
                ".",
                "Const",
                3285,
                48,
                0,
                "WeakMap"
              ],
              "===",
              "Const",
              138,
              25,
              0,
              "function"
            ],
            [
              "Binary",
              3285,
              60,
              0,
              ["Ident", 3285, 60, 0, "GLOBAL"],
              ".",
              "Const",
              3285,
              68,
              0,
              "WeakMap"
            ],
            "Binary",
            3029,
            10,
            0,
            ["Ident", 3285, 86, 0, "WeakMap"],
            "=",
            "Call",
            2991,
            1,
            0,
            [
              "Func",
              2991,
              1,
              0,
              0,
              [],
              ["_WeakMap_prototype", "defProp", "isExtensible"],
              [],
              "BlockStatement",
              2991,
              1,
              0,
              0,
              [
                "Func",
                2915,
                29,
                0,
                ["Ident", 3285, 86, 0, "WeakMap"],
                [],
                ["_this"],
                [],
                "BlockStatement",
                3293,
                1,
                0,
                0,
                [
                  "Binary",
                  3293,
                  1,
                  0,
                  ["Ident", 3293, 1, 0, "_this"],
                  "=",
                  "IfExpression",
                  2914,
                  18,
                  0,
                  [
                    "Binary",
                    2914,
                    21,
                    0,
                    [
                      "Eval",
                      2914,
                      21,
                      0,
                      ["Const", 2914, 27, 0, "this"]
                    ],
                    "instanceof",
                    "Ident",
                    3285,
                    86,
                    0,
                    "WeakMap"
                  ],
                  [
                    "Eval",
                    2914,
                    56,
                    0,
                    ["Const", 2914, 62, 0, "this"]
                  ],
                  "Call",
                  2914,
                  74,
                  0,
                  ["Ident", 2914, 74, 0, "__create"],
                  0,
                  ["Ident", 3285, 80, 0, "_WeakMap_prototype"]
                ],
                [
                  "Binary",
                  3293,
                  1,
                  0,
                  [
                    "Binary",
                    3293,
                    1,
                    0,
                    ["Ident", 3293, 1, 0, "_this"],
                    ".",
                    "Const",
                    3293,
                    6,
                    0,
                    "_keys"
                  ],
                  "=",
                  "Arr",
                  3293,
                  14,
                  0
                ],
                [
                  "Binary",
                  3294,
                  1,
                  0,
                  [
                    "Binary",
                    3294,
                    1,
                    0,
                    ["Ident", 3294, 1, 0, "_this"],
                    ".",
                    "Const",
                    3294,
                    6,
                    0,
                    "_values"
                  ],
                  "=",
                  "Arr",
                  3294,
                  16,
                  0
                ],
                [
                  "Binary",
                  3296,
                  1,
                  0,
                  [
                    "Binary",
                    3296,
                    1,
                    0,
                    ["Ident", 3296, 1, 0, "_this"],
                    ".",
                    "Const",
                    3296,
                    6,
                    0,
                    "_chilly"
                  ],
                  "=",
                  "Arr",
                  3296,
                  16,
                  0
                ],
                [
                  "Binary",
                  3297,
                  1,
                  0,
                  [
                    "Binary",
                    3297,
                    1,
                    0,
                    ["Ident", 3297, 1, 0, "_this"],
                    ".",
                    "Const",
                    3297,
                    6,
                    0,
                    "_uid"
                  ],
                  "=",
                  "Call",
                  3297,
                  13,
                  0,
                  ["Ident", 3297, 13, 0, "createUid"],
                  0
                ],
                [
                  "Return",
                  3293,
                  1,
                  0,
                  "Ident",
                  3293,
                  1,
                  0,
                  "_this"
                ]
              ],
              [
                "Binary",
                2845,
                20,
                0,
                ["Ident", 3285, 80, 0, "_WeakMap_prototype"],
                "=",
                "Binary",
                2845,
                37,
                0,
                ["Ident", 3285, 86, 0, "WeakMap"],
                ".",
                "Const",
                2845,
                44,
                0,
                "prototype"
              ],
              [
                "Binary",
                2857,
                21,
                0,
                [
                  "Binary",
                  2857,
                  21,
                  0,
                  ["Ident", 3285, 86, 0, "WeakMap"],
                  ".",
                  "Const",
                  2857,
                  28,
                  0,
                  "displayName"
                ],
                "=",
                "Const",
                3285,
                80,
                0,
                "WeakMap"
              ],
              [
                "Func",
                3286,
                1,
                0,
                ["Ident", 3286, 6, 0, "uidRand"],
                [],
                [],
                [],
                "Return",
                3287,
                1,
                0,
                "Call",
                3287,
                1,
                0,
                [
                  "Binary",
                  3287,
                  1,
                  0,
                  [
                    "Call",
                    3287,
                    1,
                    0,
                    [
                      "Binary",
                      3287,
                      1,
                      0,
                      [
                        "Call",
                        3287,
                        1,
                        0,
                        [
                          "Binary",
                          3287,
                          1,
                          0,
                          ["Ident", 3287, 1, 0, "Math"],
                          ".",
                          "Const",
                          3287,
                          10,
                          0,
                          "random"
                        ],
                        0
                      ],
                      ".",
                      "Const",
                      3287,
                      19,
                      0,
                      "toString"
                    ],
                    0,
                    ["Const", 3287, 29, 0, 36]
                  ],
                  ".",
                  "Const",
                  3287,
                  33,
                  0,
                  "slice"
                ],
                0,
                ["Const", 3287, 39, 0, 2]
              ],
              [
                "Func",
                3288,
                1,
                0,
                ["Ident", 3288, 6, 0, "createUid"],
                [],
                [],
                [],
                "Return",
                608,
                7,
                0,
                "Binary",
                608,
                7,
                0,
                [
                  "Binary",
                  608,
                  7,
                  0,
                  [
                    "Binary",
                    608,
                    7,
                    0,
                    [
                      "Binary",
                      608,
                      7,
                      0,
                      [
                        "Binary",
                        608,
                        7,
                        0,
                        [
                          "Binary",
                          608,
                          7,
                          0,
                          [
                            "Call",
                            602,
                            11,
                            0,
                            ["Ident", 602, 11, 0, "__strnum"],
                            0,
                            [
                              "Call",
                              3289,
                              8,
                              0,
                              ["Ident", 3289, 8, 0, "uidRand"],
                              0
                            ]
                          ],
                          "+",
                          "Const",
                          3289,
                          5,
                          0,
                          "-"
                        ],
                        "+",
                        "Call",
                        607,
                        11,
                        0,
                        ["Ident", 607, 11, 0, "__strnum"],
                        0,
                        [
                          "Call",
                          3289,
                          22,
                          0,
                          [
                            "Binary",
                            3289,
                            22,
                            0,
                            [
                              "Call",
                              3289,
                              22,
                              0,
                              ["Ident", 3289, 25, 0, "Date"],
                              1
                            ],
                            ".",
                            "Const",
                            3289,
                            33,
                            0,
                            "getTime"
                          ],
                          0
                        ]
                      ],
                      "+",
                      "Const",
                      3289,
                      5,
                      0,
                      "-"
                    ],
                    "+",
                    "Call",
                    607,
                    11,
                    0,
                    ["Ident", 607, 11, 0, "__strnum"],
                    0,
                    [
                      "Call",
                      3289,
                      47,
                      0,
                      ["Ident", 3289, 47, 0, "uidRand"],
                      0
                    ]
                  ],
                  "+",
                  "Const",
                  3289,
                  5,
                  0,
                  "-"
                ],
                "+",
                "Call",
                607,
                11,
                0,
                ["Ident", 607, 11, 0, "__strnum"],
                0,
                [
                  "Call",
                  3289,
                  61,
                  0,
                  ["Ident", 3289, 61, 0, "uidRand"],
                  0
                ]
              ],
              [
                "Binary",
                3290,
                1,
                0,
                ["Ident", 3290, 6, 0, "isExtensible"],
                "=",
                "Binary",
                3290,
                22,
                0,
                [
                  "Binary",
                  3290,
                  22,
                  0,
                  ["Ident", 3290, 22, 0, "Object"],
                  ".",
                  "Const",
                  3290,
                  30,
                  0,
                  "isExtensible"
                ],
                "||",
                "Func",
                3290,
                48,
                0,
                0,
                [],
                [],
                [],
                "Return",
                3290,
                50,
                0,
                "Const",
                3290,
                50,
                0,
                true
              ],
              [
                "Func",
                3299,
                1,
                0,
                ["Ident", 3299, 6, 0, "check"],
                [["Ident", 3299, 13, 0, "key"]],
                ["chilly", "uid"],
                [],
                "BlockExpression",
                3300,
                1,
                0,
                [
                  "Binary",
                  3300,
                  1,
                  0,
                  ["Ident", 3300, 8, 0, "uid"],
                  "=",
                  "Binary",
                  3300,
                  14,
                  0,
                  ["This", 3300, 14, 0],
                  ".",
                  "Const",
                  3300,
                  16,
                  0,
                  "_uid"
                ],
                [
                  "IfExpression",
                  3301,
                  1,
                  0,
                  [
                    "Call",
                    646,
                    7,
                    0,
                    [
                      "Binary",
                      646,
                      7,
                      0,
                      ["Ident", 646, 7, 0, "__owns"],
                      ".",
                      "Const",
                      646,
                      7,
                      0,
                      "call"
                    ],
                    0,
                    ["Ident", 3301, 7, 0, "key"],
                    ["Ident", 3301, 19, 0, "uid"]
                  ],
                  [
                    "BlockExpression",
                    3302,
                    1,
                    0,
                    [
                      "Binary",
                      3302,
                      1,
                      0,
                      ["Ident", 3302, 10, 0, "chilly"],
                      "=",
                      "Binary",
                      3302,
                      19,
                      0,
                      ["This", 3302, 19, 0],
                      ".",
                      "Const",
                      3302,
                      21,
                      0,
                      "_chilly"
                    ],
                    [
                      "IfExpression",
                      3303,
                      1,
                      0,
                      [
                        "Binary",
                        3303,
                        9,
                        0,
                        [
                          "Call",
                          3303,
                          9,
                          0,
                          [
                            "Binary",
                            3303,
                            9,
                            0,
                            ["Ident", 3303, 9, 0, "chilly"],
                            ".",
                            "Const",
                            3303,
                            17,
                            0,
                            "indexOf"
                          ],
                          0,
                          ["Ident", 3303, 26, 0, "key"]
                        ],
                        "===",
                        "Const",
                        3303,
                        33,
                        0,
                        -1
                      ],
                      [
                        "BlockExpression",
                        3304,
                        1,
                        0,
                        [
                          "Call",
                          3304,
                          1,
                          0,
                          [
                            "Binary",
                            3304,
                            1,
                            0,
                            ["Ident", 3304, 1, 0, "chilly"],
                            ".",
                            "Const",
                            3304,
                            16,
                            0,
                            "push"
                          ],
                          0,
                          ["Ident", 3304, 21, 0, "key"]
                        ],
                        [
                          "Call",
                          3305,
                          1,
                          0,
                          [
                            "Binary",
                            3305,
                            1,
                            0,
                            [
                              "Binary",
                              3305,
                              1,
                              0,
                              ["This", 3305, 1, 0],
                              ".",
                              "Const",
                              3305,
                              10,
                              0,
                              "_keys"
                            ],
                            ".",
                            "Const",
                            3305,
                            16,
                            0,
                            "push"
                          ],
                          0,
                          ["Ident", 3305, 21, 0, "key"]
                        ],
                        [
                          "Call",
                          3306,
                          1,
                          0,
                          [
                            "Binary",
                            3306,
                            1,
                            0,
                            [
                              "Binary",
                              3306,
                              1,
                              0,
                              ["This", 3306, 1, 0],
                              ".",
                              "Const",
                              3306,
                              10,
                              0,
                              "_values"
                            ],
                            ".",
                            "Const",
                            3306,
                            18,
                            0,
                            "push"
                          ],
                          0,
                          [
                            "Binary",
                            3306,
                            23,
                            0,
                            ["Ident", 3306, 23, 0, "key"],
                            ".",
                            "Ident",
                            3306,
                            27,
                            0,
                            "uid"
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "Binary",
                2980,
                25,
                0,
                [
                  "Binary",
                  2980,
                  25,
                  0,
                  ["Ident", 3285, 80, 0, "_WeakMap_prototype"],
                  ".",
                  "Const",
                  3308,
                  6,
                  0,
                  "get"
                ],
                "=",
                "Func",
                3308,
                10,
                0,
                0,
                [["Ident", 3308, 11, 0, "key"]],
                ["_ref", "index"],
                [],
                "BlockStatement",
                3309,
                1,
                0,
                0,
                [
                  "IfStatement",
                  3309,
                  1,
                  0,
                  0,
                  [
                    "Binary",
                    43,
                    7,
                    0,
                    [
                      "Call",
                      3309,
                      7,
                      0,
                      ["Ident", 3309, 7, 0, "Object"],
                      0,
                      ["Ident", 3309, 15, 0, "key"]
                    ],
                    "!==",
                    "Ident",
                    3309,
                    22,
                    0,
                    "key"
                  ],
                  [
                    "Throw",
                    3310,
                    1,
                    0,
                    "Call",
                    3310,
                    12,
                    0,
                    ["Ident", 3310, 12, 0, "TypeError"],
                    0,
                    ["Const", 3310, 23, 0, "Invalid value used as weak map key"]
                  ]
                ],
                [
                  "IfStatement",
                  3312,
                  1,
                  0,
                  0,
                  [
                    "Call",
                    3312,
                    7,
                    0,
                    ["Ident", 3312, 7, 0, "isExtensible"],
                    0,
                    ["Ident", 3312, 22, 0, "key"]
                  ],
                  [
                    "IfStatement",
                    3313,
                    1,
                    0,
                    0,
                    [
                      "Call",
                      646,
                      7,
                      0,
                      [
                        "Binary",
                        646,
                        7,
                        0,
                        ["Ident", 646, 7, 0, "__owns"],
                        ".",
                        "Const",
                        646,
                        7,
                        0,
                        "call"
                      ],
                      0,
                      ["Ident", 3313, 1, 0, "key"],
                      [
                        "Binary",
                        3313,
                        1,
                        0,
                        ["Ident", 3313, 1, 0, "_ref"],
                        "=",
                        "Binary",
                        3313,
                        12,
                        0,
                        ["This", 3313, 12, 0],
                        ".",
                        "Const",
                        3313,
                        13,
                        0,
                        "_uid"
                      ]
                    ],
                    [
                      "Return",
                      3313,
                      1,
                      0,
                      "Binary",
                      3313,
                      1,
                      0,
                      ["Ident", 3313, 1, 0, "key"],
                      ".",
                      "Ident",
                      3313,
                      1,
                      0,
                      "_ref"
                    ]
                  ],
                  "BlockStatement",
                  3315,
                  1,
                  0,
                  0,
                  [
                    "Call",
                    3315,
                    1,
                    0,
                    [
                      "Binary",
                      3315,
                      1,
                      0,
                      ["Ident", 3315, 1, 0, "check"],
                      ".",
                      "Const",
                      3315,
                      1,
                      0,
                      "call"
                    ],
                    0,
                    ["This", 3315, 14, 0],
                    ["Ident", 3315, 19, 0, "key"]
                  ],
                  [
                    "Binary",
                    3316,
                    1,
                    0,
                    ["Ident", 3316, 10, 0, "index"],
                    "=",
                    "Call",
                    3316,
                    18,
                    0,
                    [
                      "Binary",
                      3316,
                      18,
                      0,
                      [
                        "Binary",
                        3316,
                        18,
                        0,
                        ["This", 3316, 18, 0],
                        ".",
                        "Const",
                        3316,
                        20,
                        0,
                        "_keys"
                      ],
                      ".",
                      "Const",
                      3316,
                      26,
                      0,
                      "indexOf"
                    ],
                    0,
                    ["Ident", 3316, 35, 0, "key"]
                  ],
                  [
                    "IfStatement",
                    3317,
                    1,
                    0,
                    0,
                    [
                      "Binary",
                      3317,
                      9,
                      0,
                      ["Ident", 3317, 9, 0, "index"],
                      "===",
                      "Const",
                      3317,
                      18,
                      0,
                      -1
                    ],
                    [
                      "Return",
                      3318,
                      1,
                      0,
                      "Const",
                      3318,
                      1,
                      0
                    ],
                    "Return",
                    3320,
                    1,
                    0,
                    "Binary",
                    3320,
                    1,
                    0,
                    [
                      "Binary",
                      3320,
                      1,
                      0,
                      ["This", 3320, 1, 0],
                      ".",
                      "Const",
                      3320,
                      10,
                      0,
                      "_values"
                    ],
                    ".",
                    "Ident",
                    3320,
                    18,
                    0,
                    "index"
                  ]
                ]
              ],
              [
                "Binary",
                2980,
                25,
                0,
                [
                  "Binary",
                  2980,
                  25,
                  0,
                  ["Ident", 3285, 80, 0, "_WeakMap_prototype"],
                  ".",
                  "Const",
                  3322,
                  6,
                  0,
                  "has"
                ],
                "=",
                "Func",
                3322,
                10,
                0,
                0,
                [["Ident", 3322, 11, 0, "key"]],
                [],
                [],
                "BlockStatement",
                3323,
                1,
                0,
                0,
                [
                  "IfStatement",
                  3323,
                  1,
                  0,
                  0,
                  [
                    "Binary",
                    43,
                    7,
                    0,
                    [
                      "Call",
                      3323,
                      7,
                      0,
                      ["Ident", 3323, 7, 0, "Object"],
                      0,
                      ["Ident", 3323, 15, 0, "key"]
                    ],
                    "!==",
                    "Ident",
                    3323,
                    22,
                    0,
                    "key"
                  ],
                  [
                    "Throw",
                    3324,
                    1,
                    0,
                    "Call",
                    3324,
                    12,
                    0,
                    ["Ident", 3324, 12, 0, "TypeError"],
                    0,
                    ["Const", 3324, 23, 0, "Invalid value used as weak map key"]
                  ]
                ],
                [
                  "IfStatement",
                  3326,
                  1,
                  0,
                  0,
                  [
                    "Call",
                    3326,
                    7,
                    0,
                    ["Ident", 3326, 7, 0, "isExtensible"],
                    0,
                    ["Ident", 3326, 22, 0, "key"]
                  ],
                  [
                    "Return",
                    646,
                    7,
                    0,
                    "Call",
                    646,
                    7,
                    0,
                    [
                      "Binary",
                      646,
                      7,
                      0,
                      ["Ident", 646, 7, 0, "__owns"],
                      ".",
                      "Const",
                      646,
                      7,
                      0,
                      "call"
                    ],
                    0,
                    ["Ident", 3327, 1, 0, "key"],
                    [
                      "Binary",
                      3327,
                      18,
                      0,
                      ["This", 3327, 18, 0],
                      ".",
                      "Const",
                      3327,
                      20,
                      0,
                      "_uid"
                    ]
                  ],
                  "BlockStatement",
                  3329,
                  1,
                  0,
                  0,
                  [
                    "Call",
                    3329,
                    1,
                    0,
                    [
                      "Binary",
                      3329,
                      1,
                      0,
                      ["Ident", 3329, 1, 0, "check"],
                      ".",
                      "Const",
                      3329,
                      1,
                      0,
                      "call"
                    ],
                    0,
                    ["This", 3329, 14, 0],
                    ["Ident", 3329, 19, 0, "key"]
                  ],
                  [
                    "Return",
                    43,
                    7,
                    0,
                    "Binary",
                    43,
                    7,
                    0,
                    [
                      "Call",
                      3330,
                      1,
                      0,
                      [
                        "Binary",
                        3330,
                        1,
                        0,
                        [
                          "Binary",
                          3330,
                          1,
                          0,
                          ["This", 3330, 1, 0],
                          ".",
                          "Const",
                          3330,
                          8,
                          0,
                          "_keys"
                        ],
                        ".",
                        "Const",
                        3330,
                        14,
                        0,
                        "indexOf"
                      ],
                      0,
                      ["Ident", 3330, 23, 0, "key"]
                    ],
                    "!==",
                    "Const",
                    3330,
                    30,
                    0,
                    -1
                  ]
                ]
              ],
              [
                "IfStatement",
                3332,
                17,
                0,
                0,
                [
                  "Binary",
                  138,
                  7,
                  0,
                  [
                    "Unary",
                    138,
                    7,
                    0,
                    "typeof",
                    "Binary",
                    3332,
                    33,
                    0,
                    ["Ident", 3332, 33, 0, "Object"],
                    ".",
                    "Const",
                    3332,
                    41,
                    0,
                    "defineProperty"
                  ],
                  "===",
                  "Const",
                  138,
                  25,
                  0,
                  "function"
                ],
                [
                  "Binary",
                  3332,
                  1,
                  0,
                  ["Ident", 3332, 6, 0, "defProp"],
                  "=",
                  "Binary",
                  3332,
                  61,
                  0,
                  ["Ident", 3332, 61, 0, "Object"],
                  ".",
                  "Const",
                  3332,
                  69,
                  0,
                  "defineProperty"
                ],
                "Binary",
                3332,
                1,
                0,
                ["Ident", 3332, 6, 0, "defProp"],
                "=",
                "Func",
                3332,
                91,
                0,
                0,
                [
                  ["Ident", 3332, 92, 0, "o"],
                  ["Ident", 3332, 94, 0, "k"],
                  ["Ident", 3332, 97, 0, "d"]
                ],
                [],
                [],
                "Binary",
                3332,
                104,
                0,
                [
                  "Binary",
                  3332,
                  104,
                  0,
                  ["Ident", 3332, 104, 0, "o"],
                  ".",
                  "Ident",
                  3332,
                  107,
                  0,
                  "k"
                ],
                "=",
                "Binary",
                3332,
                112,
                0,
                ["Ident", 3332, 112, 0, "d"],
                ".",
                "Const",
                3332,
                115,
                0,
                "value"
              ],
              [
                "Binary",
                2980,
                25,
                0,
                [
                  "Binary",
                  2980,
                  25,
                  0,
                  ["Ident", 3285, 80, 0, "_WeakMap_prototype"],
                  ".",
                  "Const",
                  3333,
                  6,
                  0,
                  "set"
                ],
                "=",
                "Func",
                3333,
                10,
                0,
                0,
                [
                  ["Ident", 3333, 11, 0, "key"],
                  ["Ident", 3333, 15, 0, "value"]
                ],
                ["index", "keys"],
                [],
                "BlockStatement",
                3334,
                1,
                0,
                0,
                [
                  "IfStatement",
                  3334,
                  1,
                  0,
                  0,
                  [
                    "Binary",
                    43,
                    7,
                    0,
                    [
                      "Call",
                      3334,
                      7,
                      0,
                      ["Ident", 3334, 7, 0, "Object"],
                      0,
                      ["Ident", 3334, 15, 0, "key"]
                    ],
                    "!==",
                    "Ident",
                    3334,
                    22,
                    0,
                    "key"
                  ],
                  [
                    "Throw",
                    3335,
                    1,
                    0,
                    "Call",
                    3335,
                    12,
                    0,
                    ["Ident", 3335, 12, 0, "TypeError"],
                    0,
                    ["Const", 3335, 23, 0, "Invalid value used as weak map key"]
                  ]
                ],
                [
                  "IfStatement",
                  3337,
                  1,
                  0,
                  0,
                  [
                    "Call",
                    3337,
                    7,
                    0,
                    ["Ident", 3337, 7, 0, "isExtensible"],
                    0,
                    ["Ident", 3337, 22, 0, "key"]
                  ],
                  [
                    "Call",
                    3338,
                    1,
                    0,
                    ["Ident", 3338, 1, 0, "defProp"],
                    0,
                    ["Ident", 3338, 16, 0, "key"],
                    [
                      "Binary",
                      3338,
                      20,
                      0,
                      ["This", 3338, 20, 0],
                      ".",
                      "Const",
                      3338,
                      22,
                      0,
                      "_uid"
                    ],
                    [
                      "Obj",
                      3338,
                      27,
                      0,
                      3339,
                      10,
                      null,
                      "configurable",
                      ["Const", 3339, 9, 0, true],
                      3340,
                      10,
                      null,
                      "writable",
                      ["Const", 3340, 9, 0, true],
                      3341,
                      10,
                      null,
                      "enumerable",
                      ["Const", 3341, 9, 0, false],
                      3342,
                      9,
                      null,
                      "value",
                      ["Ident", 3342, 9, 0, "value"]
                    ]
                  ],
                  "BlockStatement",
                  3345,
                  1,
                  0,
                  0,
                  [
                    "Call",
                    3345,
                    1,
                    0,
                    [
                      "Binary",
                      3345,
                      1,
                      0,
                      ["Ident", 3345, 1, 0, "check"],
                      ".",
                      "Const",
                      3345,
                      1,
                      0,
                      "call"
                    ],
                    0,
                    ["This", 3345, 14, 0],
                    ["Ident", 3345, 19, 0, "key"]
                  ],
                  [
                    "Binary",
                    3346,
                    1,
                    0,
                    ["Ident", 3346, 10, 0, "keys"],
                    "=",
                    "Binary",
                    3346,
                    17,
                    0,
                    ["This", 3346, 17, 0],
                    ".",
                    "Const",
                    3346,
                    19,
                    0,
                    "_keys"
                  ],
                  [
                    "Binary",
                    3347,
                    1,
                    0,
                    ["Ident", 3347, 18, 0, "index"],
                    "=",
                    "Call",
                    3347,
                    26,
                    0,
                    [
                      "Binary",
                      3347,
                      26,
                      0,
                      ["Ident", 3347, 26, 0, "keys"],
                      ".",
                      "Const",
                      3347,
                      32,
                      0,
                      "indexOf"
                    ],
                    0,
                    ["Ident", 3347, 41, 0, "key"]
                  ],
                  [
                    "IfStatement",
                    3348,
                    1,
                    0,
                    0,
                    [
                      "Binary",
                      3348,
                      9,
                      0,
                      ["Ident", 3348, 9, 0, "index"],
                      "===",
                      "Const",
                      3348,
                      18,
                      0,
                      -1
                    ],
                    [
                      "BlockStatement",
                      3349,
                      1,
                      0,
                      0,
                      [
                        "Binary",
                        3349,
                        1,
                        0,
                        ["Ident", 3349, 1, 0, "index"],
                        "=",
                        "Binary",
                        3349,
                        17,
                        0,
                        ["Ident", 3349, 17, 0, "keys"],
                        ".",
                        "Const",
                        3349,
                        23,
                        0,
                        "length"
                      ],
                      [
                        "Binary",
                        3350,
                        1,
                        0,
                        [
                          "Binary",
                          3350,
                          1,
                          0,
                          ["Ident", 3350, 1, 0, "keys"],
                          ".",
                          "Ident",
                          3350,
                          14,
                          0,
                          "index"
                        ],
                        "=",
                        "Ident",
                        3350,
                        23,
                        0,
                        "key"
                      ]
                    ]
                  ],
                  [
                    "Binary",
                    3351,
                    1,
                    0,
                    [
                      "Binary",
                      3351,
                      1,
                      0,
                      [
                        "Binary",
                        3351,
                        1,
                        0,
                        ["This", 3351, 1, 0],
                        ".",
                        "Const",
                        3351,
                        8,
                        0,
                        "_values"
                      ],
                      ".",
                      "Ident",
                      3351,
                      16,
                      0,
                      "index"
                    ],
                    "=",
                    "Ident",
                    3351,
                    25,
                    0,
                    "value"
                  ]
                ]
              ],
              [
                "Binary",
                2980,
                25,
                0,
                [
                  "Binary",
                  2980,
                  25,
                  0,
                  ["Ident", 3285, 80, 0, "_WeakMap_prototype"],
                  ".",
                  "Const",
                  3353,
                  6,
                  0,
                  "delete"
                ],
                "=",
                "Func",
                3353,
                13,
                0,
                0,
                [["Ident", 3353, 14, 0, "key"]],
                ["index", "keys"],
                [],
                "BlockStatement",
                3354,
                1,
                0,
                0,
                [
                  "IfStatement",
                  3354,
                  1,
                  0,
                  0,
                  [
                    "Binary",
                    43,
                    7,
                    0,
                    [
                      "Call",
                      3354,
                      7,
                      0,
                      ["Ident", 3354, 7, 0, "Object"],
                      0,
                      ["Ident", 3354, 15, 0, "key"]
                    ],
                    "!==",
                    "Ident",
                    3354,
                    22,
                    0,
                    "key"
                  ],
                  [
                    "Throw",
                    3355,
                    1,
                    0,
                    "Call",
                    3355,
                    12,
                    0,
                    ["Ident", 3355, 12, 0, "TypeError"],
                    0,
                    ["Const", 3355, 23, 0, "Invalid value used as weak map key"]
                  ]
                ],
                [
                  "IfStatement",
                  3357,
                  1,
                  0,
                  0,
                  [
                    "Call",
                    3357,
                    7,
                    0,
                    ["Ident", 3357, 7, 0, "isExtensible"],
                    0,
                    ["Ident", 3357, 22, 0, "key"]
                  ],
                  [
                    "Unary",
                    3358,
                    1,
                    0,
                    "delete",
                    "Binary",
                    3358,
                    13,
                    0,
                    ["Ident", 3358, 13, 0, "key"],
                    ".",
                    "Binary",
                    3358,
                    18,
                    0,
                    ["This", 3358, 18, 0],
                    ".",
                    "Const",
                    3358,
                    19,
                    0,
                    "_uid"
                  ],
                  "BlockStatement",
                  3360,
                  1,
                  0,
                  0,
                  [
                    "Call",
                    3360,
                    1,
                    0,
                    [
                      "Binary",
                      3360,
                      1,
                      0,
                      ["Ident", 3360, 1, 0, "check"],
                      ".",
                      "Const",
                      3360,
                      1,
                      0,
                      "call"
                    ],
                    0,
                    ["This", 3360, 14, 0],
                    ["Ident", 3360, 19, 0, "key"]
                  ],
                  [
                    "Binary",
                    3361,
                    1,
                    0,
                    ["Ident", 3361, 10, 0, "keys"],
                    "=",
                    "Binary",
                    3361,
                    17,
                    0,
                    ["This", 3361, 17, 0],
                    ".",
                    "Const",
                    3361,
                    19,
                    0,
                    "_keys"
                  ],
                  [
                    "Binary",
                    3362,
                    1,
                    0,
                    ["Ident", 3362, 18, 0, "index"],
                    "=",
                    "Call",
                    3362,
                    26,
                    0,
                    [
                      "Binary",
                      3362,
                      26,
                      0,
                      ["Ident", 3362, 26, 0, "keys"],
                      ".",
                      "Const",
                      3362,
                      32,
                      0,
                      "indexOf"
                    ],
                    0,
                    ["Ident", 3362, 41, 0, "key"]
                  ],
                  [
                    "IfStatement",
                    3363,
                    1,
                    0,
                    0,
                    [
                      "Binary",
                      43,
                      7,
                      0,
                      ["Ident", 3363, 9, 0, "index"],
                      "!==",
                      "Const",
                      3363,
                      18,
                      0,
                      -1
                    ],
                    [
                      "BlockStatement",
                      3364,
                      1,
                      0,
                      0,
                      [
                        "Call",
                        3364,
                        1,
                        0,
                        [
                          "Binary",
                          3364,
                          1,
                          0,
                          ["Ident", 3364, 1, 0, "keys"],
                          ".",
                          "Const",
                          3364,
                          14,
                          0,
                          "splice"
                        ],
                        0,
                        ["Ident", 3364, 21, 0, "index"],
                        ["Const", 3364, 28, 0, 1]
                      ],
                      [
                        "Call",
                        3365,
                        1,
                        0,
                        [
                          "Binary",
                          3365,
                          1,
                          0,
                          [
                            "Binary",
                            3365,
                            1,
                            0,
                            ["This", 3365, 1, 0],
                            ".",
                            "Const",
                            3365,
                            10,
                            0,
                            "_values"
                          ],
                          ".",
                          "Const",
                          3365,
                          18,
                          0,
                          "splice"
                        ],
                        0,
                        ["Ident", 3365, 25, 0, "index"],
                        ["Const", 3365, 32, 0, 1]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "Return",
                2993,
                1,
                0,
                "Ident",
                3285,
                86,
                0,
                "WeakMap"
              ]
            ],
            0
          ],
          type: "any",
          dependencies: ["__create", "__owns", "__strnum", "GLOBAL", "WeakMap"]
        },
        __indexOfIdentical: {
          helper: [
            "Func",
            3367,
            39,
            0,
            0,
            [
              ["Ident", 3367, 40, 0, "array"],
              ["Ident", 3367, 46, 0, "item"]
            ],
            ["_arr", "check", "i", "inf"],
            [],
            "BlockStatement",
            3368,
            1,
            0,
            0,
            [
              "IfStatement",
              3368,
              1,
              0,
              0,
              [
                "Binary",
                3368,
                5,
                0,
                [
                  "Unary",
                  3368,
                  5,
                  0,
                  "typeof",
                  "Ident",
                  3368,
                  12,
                  0,
                  "item"
                ],
                "===",
                "Const",
                3368,
                22,
                0,
                "number"
              ],
              [
                "IfStatement",
                3369,
                1,
                0,
                0,
                [
                  "Binary",
                  43,
                  7,
                  0,
                  ["Ident", 3369, 7, 0, "item"],
                  "!==",
                  "Ident",
                  3369,
                  7,
                  0,
                  "item"
                ],
                [
                  "BlockStatement",
                  3370,
                  1,
                  0,
                  0,
                  [
                    "For",
                    1502,
                    1,
                    0,
                    0,
                    [
                      "BlockExpression",
                      1,
                      1,
                      0,
                      [
                        "Binary",
                        3370,
                        1,
                        0,
                        ["Ident", 3370, 1, 0, "_arr"],
                        "=",
                        "Call",
                        1342,
                        22,
                        0,
                        ["Ident", 1342, 22, 0, "__toArray"],
                        0,
                        ["Ident", 3370, 22, 0, "array"]
                      ],
                      [
                        "Binary",
                        1381,
                        26,
                        0,
                        ["Ident", 3370, 17, 0, "i"],
                        "=",
                        "Binary",
                        1381,
                        49,
                        0,
                        ["Ident", 3370, 1, 0, "_arr"],
                        ".",
                        "Const",
                        1381,
                        56,
                        0,
                        "length"
                      ]
                    ],
                    [
                      "Unary",
                      1382,
                      16,
                      0,
                      "--post",
                      "Ident",
                      3370,
                      17,
                      0,
                      "i"
                    ],
                    0,
                    "BlockStatement",
                    1464,
                    1,
                    0,
                    0,
                    [
                      "Binary",
                      1464,
                      1,
                      0,
                      ["Ident", 3370, 10, 0, "check"],
                      "=",
                      "Binary",
                      1345,
                      75,
                      0,
                      ["Ident", 3370, 1, 0, "_arr"],
                      ".",
                      "Ident",
                      3370,
                      17,
                      0,
                      "i"
                    ],
                    [
                      "IfStatement",
                      3371,
                      1,
                      0,
                      0,
                      [
                        "Binary",
                        43,
                        7,
                        0,
                        ["Ident", 3371, 11, 0, "check"],
                        "!==",
                        "Ident",
                        3371,
                        11,
                        0,
                        "check"
                      ],
                      [
                        "Return",
                        3372,
                        1,
                        0,
                        "Ident",
                        3372,
                        17,
                        0,
                        "i"
                      ]
                    ]
                  ],
                  [
                    "Return",
                    3373,
                    1,
                    0,
                    "Const",
                    3373,
                    13,
                    0,
                    -1
                  ]
                ],
                "IfStatement",
                3369,
                1,
                0,
                0,
                [
                  "Binary",
                  3374,
                  12,
                  0,
                  ["Ident", 3374, 12, 0, "item"],
                  "===",
                  "Const",
                  3374,
                  21,
                  0,
                  0
                ],
                [
                  "BlockStatement",
                  3375,
                  1,
                  0,
                  0,
                  [
                    "Binary",
                    3375,
                    1,
                    0,
                    ["Ident", 3375, 10, 0, "inf"],
                    "=",
                    "Binary",
                    3375,
                    16,
                    0,
                    ["Const", 3375, 17, 0, 1],
                    "/",
                    "Ident",
                    3375,
                    21,
                    0,
                    "item"
                  ],
                  [
                    "For",
                    1502,
                    1,
                    0,
                    0,
                    [
                      "BlockExpression",
                      1,
                      1,
                      0,
                      [
                        "Binary",
                        3376,
                        1,
                        0,
                        ["Ident", 3376, 1, 0, "_arr"],
                        "=",
                        "Call",
                        1342,
                        22,
                        0,
                        ["Ident", 1342, 22, 0, "__toArray"],
                        0,
                        ["Ident", 3376, 22, 0, "array"]
                      ],
                      [
                        "Binary",
                        1381,
                        26,
                        0,
                        ["Ident", 3376, 17, 0, "i"],
                        "=",
                        "Binary",
                        1381,
                        49,
                        0,
                        ["Ident", 3376, 1, 0, "_arr"],
                        ".",
                        "Const",
                        1381,
                        56,
                        0,
                        "length"
                      ]
                    ],
                    [
                      "Unary",
                      1382,
                      16,
                      0,
                      "--post",
                      "Ident",
                      3376,
                      17,
                      0,
                      "i"
                    ],
                    0,
                    "BlockStatement",
                    1464,
                    1,
                    0,
                    0,
                    [
                      "Binary",
                      1464,
                      1,
                      0,
                      ["Ident", 3376, 10, 0, "check"],
                      "=",
                      "Binary",
                      1345,
                      75,
                      0,
                      ["Ident", 3376, 1, 0, "_arr"],
                      ".",
                      "Ident",
                      3376,
                      17,
                      0,
                      "i"
                    ],
                    [
                      "IfStatement",
                      3377,
                      1,
                      0,
                      0,
                      [
                        "Binary",
                        3377,
                        11,
                        0,
                        [
                          "Binary",
                          3377,
                          11,
                          0,
                          ["Ident", 3377, 11, 0, "check"],
                          "===",
                          "Const",
                          3377,
                          21,
                          0,
                          0
                        ],
                        "&&",
                        "Binary",
                        3377,
                        26,
                        0,
                        [
                          "Binary",
                          3377,
                          26,
                          0,
                          ["Const", 3377, 27, 0, 1],
                          "/",
                          "Ident",
                          3377,
                          31,
                          0,
                          "check"
                        ],
                        "===",
                        "Ident",
                        3377,
                        40,
                        0,
                        "inf"
                      ],
                      [
                        "Return",
                        3378,
                        1,
                        0,
                        "Ident",
                        3378,
                        17,
                        0,
                        "i"
                      ]
                    ]
                  ],
                  [
                    "Return",
                    3379,
                    1,
                    0,
                    "Const",
                    3379,
                    13,
                    0,
                    -1
                  ]
                ]
              ]
            ],
            [
              "Return",
              3380,
              1,
              0,
              "Call",
              3380,
              1,
              0,
              [
                "Binary",
                3380,
                1,
                0,
                ["Ident", 3380, 1, 0, "array"],
                ".",
                "Const",
                3380,
                9,
                0,
                "indexOf"
              ],
              0,
              ["Ident", 3380, 18, 0, "item"]
            ]
          ],
          type: "function",
          dependencies: ["__indexOfIdentical", "__toArray"]
        },
        Map: {
          helper: [
            "IfExpression",
            3382,
            20,
            0,
            [
              "Binary",
              138,
              7,
              0,
              [
                "Unary",
                138,
                7,
                0,
                "typeof",
                "Binary",
                3382,
                36,
                0,
                ["Ident", 3382, 36, 0, "GLOBAL"],
                ".",
                "Const",
                3382,
                44,
                0,
                "Map"
              ],
              "===",
              "Const",
              138,
              25,
              0,
              "function"
            ],
            [
              "Binary",
              3382,
              52,
              0,
              ["Ident", 3382, 52, 0, "GLOBAL"],
              ".",
              "Const",
              3382,
              60,
              0,
              "Map"
            ],
            "Binary",
            3029,
            10,
            0,
            ["Ident", 3382, 74, 0, "Map"],
            "=",
            "Call",
            2991,
            1,
            0,
            [
              "Func",
              2991,
              1,
              0,
              0,
              [],
              ["_Map_prototype"],
              [],
              "BlockStatement",
              2991,
              1,
              0,
              0,
              [
                "Func",
                2915,
                29,
                0,
                ["Ident", 3382, 74, 0, "Map"],
                [["Ident", 3383, 19, 0, "iterable"]],
                ["_item", "_iter", "_this", "x"],
                [],
                "BlockStatement",
                3384,
                1,
                0,
                0,
                [
                  "Binary",
                  3384,
                  1,
                  0,
                  ["Ident", 3384, 1, 0, "_this"],
                  "=",
                  "IfExpression",
                  2914,
                  18,
                  0,
                  [
                    "Binary",
                    2914,
                    21,
                    0,
                    [
                      "Eval",
                      2914,
                      21,
                      0,
                      ["Const", 2914, 27, 0, "this"]
                    ],
                    "instanceof",
                    "Ident",
                    3382,
                    74,
                    0,
                    "Map"
                  ],
                  [
                    "Eval",
                    2914,
                    56,
                    0,
                    ["Const", 2914, 62, 0, "this"]
                  ],
                  "Call",
                  2914,
                  74,
                  0,
                  ["Ident", 2914, 74, 0, "__create"],
                  0,
                  ["Ident", 3382, 68, 0, "_Map_prototype"]
                ],
                [
                  "Binary",
                  3384,
                  1,
                  0,
                  [
                    "Binary",
                    3384,
                    1,
                    0,
                    ["Ident", 3384, 1, 0, "_this"],
                    ".",
                    "Const",
                    3384,
                    6,
                    0,
                    "_keys"
                  ],
                  "=",
                  "Arr",
                  3384,
                  14,
                  0
                ],
                [
                  "Binary",
                  3385,
                  1,
                  0,
                  [
                    "Binary",
                    3385,
                    1,
                    0,
                    ["Ident", 3385, 1, 0, "_this"],
                    ".",
                    "Const",
                    3385,
                    6,
                    0,
                    "_values"
                  ],
                  "=",
                  "Arr",
                  3385,
                  16,
                  0
                ],
                [
                  "IfStatement",
                  3386,
                  1,
                  0,
                  0,
                  [
                    "Binary",
                    49,
                    7,
                    0,
                    ["Ident", 3386, 7, 0, "iterable"],
                    "!=",
                    "Const",
                    1,
                    1,
                    0,
                    null
                  ],
                  [
                    "TryFinally",
                    2213,
                    8,
                    0,
                    0,
                    [
                      "For",
                      2209,
                      1,
                      0,
                      0,
                      [
                        "Binary",
                        3387,
                        1,
                        0,
                        ["Ident", 3387, 1, 0, "_iter"],
                        "=",
                        "Call",
                        2136,
                        30,
                        0,
                        ["Ident", 2136, 30, 0, "__iter"],
                        0,
                        ["Ident", 3387, 17, 0, "iterable"]
                      ],
                      ["Const", 1, 1, 0, true],
                      0,
                      "BlockStatement",
                      2176,
                      1,
                      0,
                      0,
                      [
                        "Binary",
                        2146,
                        1,
                        0,
                        ["Ident", 3387, 1, 0, "_item"],
                        "=",
                        "Call",
                        2146,
                        18,
                        0,
                        [
                          "Binary",
                          2146,
                          18,
                          0,
                          ["Ident", 3387, 1, 0, "_iter"],
                          ".",
                          "Const",
                          2146,
                          29,
                          0,
                          "next"
                        ],
                        0
                      ],
                      [
                        "IfStatement",
                        2147,
                        1,
                        0,
                        0,
                        [
                          "Binary",
                          2147,
                          9,
                          0,
                          ["Ident", 3387, 1, 0, "_item"],
                          ".",
                          "Const",
                          2147,
                          16,
                          0,
                          "done"
                        ],
                        ["Break", 2148, 1, 0]
                      ],
                      [
                        "Binary",
                        2149,
                        1,
                        0,
                        ["Ident", 3387, 10, 0, "x"],
                        "=",
                        "Binary",
                        2149,
                        19,
                        0,
                        ["Ident", 3387, 1, 0, "_item"],
                        ".",
                        "Const",
                        2149,
                        26,
                        0,
                        "value"
                      ],
                      [
                        "Call",
                        3388,
                        1,
                        0,
                        [
                          "Binary",
                          3388,
                          1,
                          0,
                          ["Ident", 3388, 1, 0, "_this"],
                          ".",
                          "Const",
                          3388,
                          10,
                          0,
                          "set"
                        ],
                        0,
                        [
                          "Binary",
                          3388,
                          14,
                          0,
                          ["Ident", 3388, 14, 0, "x"],
                          ".",
                          "Const",
                          3388,
                          16,
                          0,
                          0
                        ],
                        [
                          "Binary",
                          3388,
                          19,
                          0,
                          ["Ident", 3388, 19, 0, "x"],
                          ".",
                          "Const",
                          3388,
                          22,
                          0,
                          1
                        ]
                      ]
                    ],
                    "TryCatch",
                    2216,
                    1,
                    0,
                    0,
                    [
                      "Call",
                      2217,
                      1,
                      0,
                      [
                        "Binary",
                        2217,
                        1,
                        0,
                        ["Ident", 3387, 1, 0, "_iter"],
                        ".",
                        "Const",
                        2217,
                        19,
                        0,
                        "close"
                      ],
                      0
                    ],
                    ["Ident", 3387, 1, 0, "_e"],
                    "Const",
                    1,
                    1,
                    0
                  ]
                ],
                [
                  "Return",
                  3384,
                  1,
                  0,
                  "Ident",
                  3384,
                  1,
                  0,
                  "_this"
                ]
              ],
              [
                "Binary",
                2845,
                20,
                0,
                ["Ident", 3382, 68, 0, "_Map_prototype"],
                "=",
                "Binary",
                2845,
                37,
                0,
                ["Ident", 3382, 74, 0, "Map"],
                ".",
                "Const",
                2845,
                44,
                0,
                "prototype"
              ],
              [
                "Binary",
                2857,
                21,
                0,
                [
                  "Binary",
                  2857,
                  21,
                  0,
                  ["Ident", 3382, 74, 0, "Map"],
                  ".",
                  "Const",
                  2857,
                  28,
                  0,
                  "displayName"
                ],
                "=",
                "Const",
                3382,
                68,
                0,
                "Map"
              ],
              [
                "Binary",
                2980,
                25,
                0,
                [
                  "Binary",
                  2980,
                  25,
                  0,
                  ["Ident", 3382, 68, 0, "_Map_prototype"],
                  ".",
                  "Const",
                  3390,
                  6,
                  0,
                  "get"
                ],
                "=",
                "Func",
                3390,
                10,
                0,
                0,
                [["Ident", 3390, 11, 0, "key"]],
                ["index"],
                [],
                "BlockStatement",
                3391,
                1,
                0,
                0,
                [
                  "Binary",
                  3391,
                  1,
                  0,
                  ["Ident", 3391, 8, 0, "index"],
                  "=",
                  "Call",
                  3391,
                  16,
                  0,
                  ["Ident", 3391, 16, 0, "__indexOfIdentical"],
                  0,
                  [
                    "Binary",
                    3391,
                    38,
                    0,
                    ["This", 3391, 38, 0],
                    ".",
                    "Const",
                    3391,
                    39,
                    0,
                    "_keys"
                  ],
                  ["Ident", 3391, 45, 0, "key"]
                ],
                [
                  "IfStatement",
                  3392,
                  1,
                  0,
                  0,
                  [
                    "Binary",
                    3392,
                    7,
                    0,
                    ["Ident", 3392, 7, 0, "index"],
                    "===",
                    "Const",
                    3392,
                    16,
                    0,
                    -1
                  ],
                  [
                    "Return",
                    3393,
                    1,
                    0,
                    "Const",
                    3393,
                    1,
                    0
                  ],
                  "Return",
                  3395,
                  1,
                  0,
                  "Binary",
                  3395,
                  1,
                  0,
                  [
                    "Binary",
                    3395,
                    1,
                    0,
                    ["This", 3395, 1, 0],
                    ".",
                    "Const",
                    3395,
                    8,
                    0,
                    "_values"
                  ],
                  ".",
                  "Ident",
                  3395,
                  16,
                  0,
                  "index"
                ]
              ],
              [
                "Binary",
                2980,
                25,
                0,
                [
                  "Binary",
                  2980,
                  25,
                  0,
                  ["Ident", 3382, 68, 0, "_Map_prototype"],
                  ".",
                  "Const",
                  3397,
                  6,
                  0,
                  "has"
                ],
                "=",
                "Func",
                3397,
                10,
                0,
                0,
                [["Ident", 3397, 11, 0, "key"]],
                [],
                [],
                "Return",
                43,
                7,
                0,
                "Binary",
                43,
                7,
                0,
                [
                  "Call",
                  3398,
                  1,
                  0,
                  ["Ident", 3398, 1, 0, "__indexOfIdentical"],
                  0,
                  [
                    "Binary",
                    3398,
                    26,
                    0,
                    ["This", 3398, 26, 0],
                    ".",
                    "Const",
                    3398,
                    27,
                    0,
                    "_keys"
                  ],
                  ["Ident", 3398, 33, 0, "key"]
                ],
                "!==",
                "Const",
                3398,
                41,
                0,
                -1
              ],
              [
                "Binary",
                2980,
                25,
                0,
                [
                  "Binary",
                  2980,
                  25,
                  0,
                  ["Ident", 3382, 68, 0, "_Map_prototype"],
                  ".",
                  "Const",
                  3400,
                  6,
                  0,
                  "set"
                ],
                "=",
                "Func",
                3400,
                10,
                0,
                0,
                [
                  ["Ident", 3400, 11, 0, "key"],
                  ["Ident", 3400, 15, 0, "value"]
                ],
                ["index", "keys"],
                [],
                "BlockExpression",
                3401,
                1,
                0,
                [
                  "Binary",
                  3401,
                  1,
                  0,
                  ["Ident", 3401, 8, 0, "keys"],
                  "=",
                  "Binary",
                  3401,
                  15,
                  0,
                  ["This", 3401, 15, 0],
                  ".",
                  "Const",
                  3401,
                  17,
                  0,
                  "_keys"
                ],
                [
                  "Binary",
                  3402,
                  1,
                  0,
                  ["Ident", 3402, 16, 0, "index"],
                  "=",
                  "Call",
                  3402,
                  24,
                  0,
                  ["Ident", 3402, 24, 0, "__indexOfIdentical"],
                  0,
                  ["Ident", 3402, 46, 0, "keys"],
                  ["Ident", 3402, 51, 0, "key"]
                ],
                [
                  "IfExpression",
                  3403,
                  1,
                  0,
                  [
                    "Binary",
                    3403,
                    7,
                    0,
                    ["Ident", 3403, 7, 0, "index"],
                    "===",
                    "Const",
                    3403,
                    16,
                    0,
                    -1
                  ],
                  [
                    "BlockExpression",
                    3404,
                    1,
                    0,
                    [
                      "Binary",
                      3404,
                      1,
                      0,
                      ["Ident", 3404, 1, 0, "index"],
                      "=",
                      "Binary",
                      3404,
                      15,
                      0,
                      ["Ident", 3404, 15, 0, "keys"],
                      ".",
                      "Const",
                      3404,
                      21,
                      0,
                      "length"
                    ],
                    [
                      "Binary",
                      3405,
                      1,
                      0,
                      [
                        "Binary",
                        3405,
                        1,
                        0,
                        ["Ident", 3405, 1, 0, "keys"],
                        ".",
                        "Ident",
                        3405,
                        12,
                        0,
                        "index"
                      ],
                      "=",
                      "Ident",
                      3405,
                      21,
                      0,
                      "key"
                    ]
                  ]
                ],
                [
                  "Binary",
                  3406,
                  1,
                  0,
                  [
                    "Binary",
                    3406,
                    1,
                    0,
                    [
                      "Binary",
                      3406,
                      1,
                      0,
                      ["This", 3406, 1, 0],
                      ".",
                      "Const",
                      3406,
                      6,
                      0,
                      "_values"
                    ],
                    ".",
                    "Ident",
                    3406,
                    14,
                    0,
                    "index"
                  ],
                  "=",
                  "Ident",
                  3406,
                  23,
                  0,
                  "value"
                ]
              ],
              [
                "Binary",
                2980,
                25,
                0,
                [
                  "Binary",
                  2980,
                  25,
                  0,
                  ["Ident", 3382, 68, 0, "_Map_prototype"],
                  ".",
                  "Const",
                  3408,
                  6,
                  0,
                  "delete"
                ],
                "=",
                "Func",
                3408,
                13,
                0,
                0,
                [["Ident", 3408, 14, 0, "key"]],
                ["index", "keys"],
                [],
                "BlockStatement",
                3409,
                1,
                0,
                0,
                [
                  "Binary",
                  3409,
                  1,
                  0,
                  ["Ident", 3409, 8, 0, "keys"],
                  "=",
                  "Binary",
                  3409,
                  15,
                  0,
                  ["This", 3409, 15, 0],
                  ".",
                  "Const",
                  3409,
                  17,
                  0,
                  "_keys"
                ],
                [
                  "Binary",
                  3410,
                  1,
                  0,
                  ["Ident", 3410, 8, 0, "index"],
                  "=",
                  "Call",
                  3410,
                  16,
                  0,
                  ["Ident", 3410, 16, 0, "__indexOfIdentical"],
                  0,
                  ["Ident", 3410, 38, 0, "keys"],
                  ["Ident", 3410, 43, 0, "key"]
                ],
                [
                  "IfStatement",
                  3411,
                  1,
                  0,
                  0,
                  [
                    "Binary",
                    3411,
                    7,
                    0,
                    ["Ident", 3411, 7, 0, "index"],
                    "===",
                    "Const",
                    3411,
                    16,
                    0,
                    -1
                  ],
                  [
                    "Return",
                    3412,
                    1,
                    0,
                    "Const",
                    3412,
                    1,
                    0,
                    false
                  ],
                  "BlockStatement",
                  3414,
                  1,
                  0,
                  0,
                  [
                    "Call",
                    3414,
                    1,
                    0,
                    [
                      "Binary",
                      3414,
                      1,
                      0,
                      ["Ident", 3414, 1, 0, "keys"],
                      ".",
                      "Const",
                      3414,
                      12,
                      0,
                      "splice"
                    ],
                    0,
                    ["Ident", 3414, 19, 0, "index"],
                    ["Const", 3414, 26, 0, 1]
                  ],
                  [
                    "Return",
                    3415,
                    1,
                    0,
                    "Call",
                    3415,
                    1,
                    0,
                    [
                      "Binary",
                      3415,
                      1,
                      0,
                      [
                        "Binary",
                        3415,
                        1,
                        0,
                        ["This", 3415, 1, 0],
                        ".",
                        "Const",
                        3415,
                        8,
                        0,
                        "_values"
                      ],
                      ".",
                      "Const",
                      3415,
                      16,
                      0,
                      "splice"
                    ],
                    0,
                    ["Ident", 3415, 23, 0, "index"],
                    ["Const", 3415, 30, 0, 1]
                  ]
                ]
              ],
              [
                "Binary",
                2980,
                25,
                0,
                [
                  "Binary",
                  2980,
                  25,
                  0,
                  ["Ident", 3382, 68, 0, "_Map_prototype"],
                  ".",
                  "Const",
                  3417,
                  6,
                  0,
                  "keys"
                ],
                "=",
                "Func",
                3417,
                11,
                0,
                0,
                [],
                [
                  "_arr",
                  "_e",
                  "_i",
                  "_send",
                  "_state",
                  "_step",
                  "_this",
                  "_throw",
                  "key"
                ],
                [],
                "BlockStatement",
                3418,
                1,
                0,
                0,
                [
                  "Binary",
                  3418,
                  1,
                  0,
                  ["Ident", 3418, 1, 0, "_this"],
                  "=",
                  "This",
                  3418,
                  1,
                  0
                ],
                [
                  "Binary",
                  3417,
                  11,
                  0,
                  ["Ident", 3417, 11, 0, "_state"],
                  "=",
                  "Const",
                  3417,
                  11,
                  0,
                  0
                ],
                [
                  "Func",
                  3417,
                  11,
                  0,
                  ["Ident", 3417, 11, 0, "_close"],
                  [],
                  [],
                  [],
                  "Binary",
                  3417,
                  11,
                  0,
                  ["Ident", 3417, 11, 0, "_state"],
                  "=",
                  "Const",
                  3417,
                  11,
                  0,
                  3
                ],
                [
                  "Func",
                  3417,
                  11,
                  0,
                  ["Ident", 3417, 11, 0, "_step"],
                  [["Ident", 3417, 11, 0, "_received"]],
                  [],
                  [],
                  "For",
                  3417,
                  11,
                  0,
                  0,
                  0,
                  ["Const", 3417, 11, 0, true],
                  0,
                  "Switch",
                  3417,
                  11,
                  0,
                  0,
                  ["Ident", 3417, 11, 0, "_state"],
                  1,
                  1,
                  null,
                  ["Const", 1, 1, 0, 0],
                  [
                    "BlockStatement",
                    1,
                    1,
                    0,
                    0,
                    [
                      "Binary",
                      3418,
                      1,
                      0,
                      ["Ident", 3418, 1, 0, "_arr"],
                      "=",
                      "Call",
                      1342,
                      22,
                      0,
                      ["Ident", 1342, 22, 0, "__toArray"],
                      0,
                      [
                        "Binary",
                        3418,
                        15,
                        0,
                        ["Ident", 3418, 15, 0, "_this"],
                        ".",
                        "Const",
                        3418,
                        17,
                        0,
                        "_keys"
                      ]
                    ],
                    [
                      "Binary",
                      1381,
                      26,
                      0,
                      ["Ident", 3418, 1, 0, "_i"],
                      "=",
                      "Binary",
                      1381,
                      49,
                      0,
                      ["Ident", 3418, 1, 0, "_arr"],
                      ".",
                      "Const",
                      1381,
                      56,
                      0,
                      "length"
                    ],
                    [
                      "Unary",
                      1502,
                      1,
                      0,
                      "++",
                      "Ident",
                      3417,
                      11,
                      0,
                      "_state"
                    ]
                  ],
                  1382,
                  16,
                  null,
                  ["Const", 1382, 16, 0, 1],
                  [
                    "BlockStatement",
                    1382,
                    16,
                    0,
                    0,
                    [
                      "Binary",
                      1382,
                      16,
                      0,
                      ["Ident", 3417, 11, 0, "_state"],
                      "=",
                      "IfExpression",
                      1382,
                      16,
                      0,
                      [
                        "Unary",
                        1382,
                        16,
                        0,
                        "--post",
                        "Ident",
                        3418,
                        1,
                        0,
                        "_i"
                      ],
                      ["Const", 1382, 16, 0, 2],
                      "Const",
                      1382,
                      16,
                      0,
                      3
                    ],
                    ["Break", 1382, 16, 0]
                  ],
                  1464,
                  1,
                  null,
                  ["Const", 1464, 1, 0, 2],
                  [
                    "BlockStatement",
                    1464,
                    1,
                    0,
                    0,
                    [
                      "Binary",
                      1464,
                      1,
                      0,
                      ["Ident", 3418, 8, 0, "key"],
                      "=",
                      "Binary",
                      1345,
                      75,
                      0,
                      ["Ident", 3418, 1, 0, "_arr"],
                      ".",
                      "Ident",
                      3418,
                      1,
                      0,
                      "_i"
                    ],
                    [
                      "Binary",
                      3419,
                      1,
                      0,
                      ["Ident", 3417, 11, 0, "_state"],
                      "=",
                      "Const",
                      3419,
                      1,
                      0,
                      1
                    ],
                    [
                      "Return",
                      3419,
                      1,
                      0,
                      "Obj",
                      3419,
                      1,
                      0,
                      3419,
                      1,
                      null,
                      "done",
                      ["Const", 3419, 1, 0, false],
                      3419,
                      1,
                      null,
                      "value",
                      ["Ident", 3419, 12, 0, "key"]
                    ]
                  ],
                  3417,
                  11,
                  null,
                  ["Const", 3417, 11, 0, 3],
                  [
                    "Return",
                    3417,
                    11,
                    0,
                    "Obj",
                    3417,
                    11,
                    0,
                    3417,
                    11,
                    null,
                    "done",
                    ["Const", 3417, 11, 0, true],
                    3417,
                    11,
                    null,
                    "value",
                    ["Const", 3417, 11, 0]
                  ],
                  [
                    "Throw",
                    3417,
                    11,
                    0,
                    "Call",
                    3417,
                    11,
                    0,
                    ["Ident", 3417, 11, 0, "Error"],
                    0,
                    [
                      "Binary",
                      3417,
                      11,
                      0,
                      ["Const", 3417, 11, 0, "Unknown state: "],
                      "+",
                      "Ident",
                      3417,
                      11,
                      0,
                      "_state"
                    ]
                  ]
                ],
                [
                  "Func",
                  3417,
                  11,
                  0,
                  ["Ident", 3417, 11, 0, "_throw"],
                  [["Ident", 3417, 11, 0, "_e"]],
                  [],
                  [],
                  "BlockStatement",
                  3417,
                  11,
                  0,
                  0,
                  [
                    "Call",
                    3417,
                    11,
                    0,
                    ["Ident", 3417, 11, 0, "_close"],
                    0
                  ],
                  [
                    "Throw",
                    3417,
                    11,
                    0,
                    "Ident",
                    3417,
                    11,
                    0,
                    "_e"
                  ]
                ],
                [
                  "Func",
                  3417,
                  11,
                  0,
                  ["Ident", 3417, 11, 0, "_send"],
                  [["Ident", 3417, 11, 0, "_received"]],
                  [],
                  [],
                  "TryCatch",
                  3417,
                  11,
                  0,
                  0,
                  [
                    "Return",
                    3417,
                    11,
                    0,
                    "Call",
                    3417,
                    11,
                    0,
                    ["Ident", 3417, 11, 0, "_step"],
                    0,
                    ["Ident", 3417, 11, 0, "_received"]
                  ],
                  ["Ident", 3417, 11, 0, "_e"],
                  "Call",
                  3417,
                  11,
                  0,
                  ["Ident", 3417, 11, 0, "_throw"],
                  0,
                  ["Ident", 3417, 11, 0, "_e"]
                ],
                [
                  "Return",
                  3417,
                  11,
                  0,
                  "Obj",
                  3417,
                  11,
                  0,
                  3417,
                  11,
                  null,
                  "close",
                  ["Ident", 3417, 11, 0, "_close"],
                  3417,
                  11,
                  null,
                  "iterator",
                  [
                    "Func",
                    3417,
                    11,
                    0,
                    0,
                    [],
                    [],
                    [],
                    "Return",
                    3417,
                    11,
                    0,
                    "This",
                    3417,
                    11,
                    0
                  ],
                  3417,
                  11,
                  null,
                  "next",
                  [
                    "Func",
                    3417,
                    11,
                    0,
                    0,
                    [],
                    [],
                    [],
                    "Return",
                    3417,
                    11,
                    0,
                    "Call",
                    3417,
                    11,
                    0,
                    ["Ident", 3417, 11, 0, "_send"],
                    0,
                    ["Const", 3417, 11, 0]
                  ],
                  3417,
                  11,
                  null,
                  "send",
                  ["Ident", 3417, 11, 0, "_send"],
                  3417,
                  11,
                  null,
                  "throw",
                  [
                    "Func",
                    3417,
                    11,
                    0,
                    0,
                    [["Ident", 3417, 11, 0, "_e"]],
                    [],
                    [],
                    "BlockStatement",
                    3417,
                    11,
                    0,
                    0,
                    [
                      "Call",
                      3417,
                      11,
                      0,
                      ["Ident", 3417, 11, 0, "_throw"],
                      0,
                      ["Ident", 3417, 11, 0, "_e"]
                    ],
                    [
                      "Return",
                      3417,
                      11,
                      0,
                      "Call",
                      3417,
                      11,
                      0,
                      ["Ident", 3417, 11, 0, "_send"],
                      0,
                      ["Const", 3417, 11, 0]
                    ]
                  ]
                ]
              ],
              [
                "Binary",
                2980,
                25,
                0,
                [
                  "Binary",
                  2980,
                  25,
                  0,
                  ["Ident", 3382, 68, 0, "_Map_prototype"],
                  ".",
                  "Const",
                  3421,
                  6,
                  0,
                  "values"
                ],
                "=",
                "Func",
                3421,
                13,
                0,
                0,
                [],
                [
                  "_arr",
                  "_e",
                  "_i",
                  "_send",
                  "_state",
                  "_step",
                  "_this",
                  "_throw",
                  "value"
                ],
                [],
                "BlockStatement",
                3422,
                1,
                0,
                0,
                [
                  "Binary",
                  3422,
                  1,
                  0,
                  ["Ident", 3422, 1, 0, "_this"],
                  "=",
                  "This",
                  3422,
                  1,
                  0
                ],
                [
                  "Binary",
                  3421,
                  13,
                  0,
                  ["Ident", 3421, 13, 0, "_state"],
                  "=",
                  "Const",
                  3421,
                  13,
                  0,
                  0
                ],
                [
                  "Func",
                  3421,
                  13,
                  0,
                  ["Ident", 3421, 13, 0, "_close"],
                  [],
                  [],
                  [],
                  "Binary",
                  3421,
                  13,
                  0,
                  ["Ident", 3421, 13, 0, "_state"],
                  "=",
                  "Const",
                  3421,
                  13,
                  0,
                  3
                ],
                [
                  "Func",
                  3421,
                  13,
                  0,
                  ["Ident", 3421, 13, 0, "_step"],
                  [["Ident", 3421, 13, 0, "_received"]],
                  [],
                  [],
                  "For",
                  3421,
                  13,
                  0,
                  0,
                  0,
                  ["Const", 3421, 13, 0, true],
                  0,
                  "Switch",
                  3421,
                  13,
                  0,
                  0,
                  ["Ident", 3421, 13, 0, "_state"],
                  1,
                  1,
                  null,
                  ["Const", 1, 1, 0, 0],
                  [
                    "BlockStatement",
                    1,
                    1,
                    0,
                    0,
                    [
                      "Binary",
                      3422,
                      1,
                      0,
                      ["Ident", 3422, 1, 0, "_arr"],
                      "=",
                      "Call",
                      1342,
                      22,
                      0,
                      ["Ident", 1342, 22, 0, "__toArray"],
                      0,
                      [
                        "Binary",
                        3422,
                        17,
                        0,
                        ["Ident", 3422, 17, 0, "_this"],
                        ".",
                        "Const",
                        3422,
                        19,
                        0,
                        "_values"
                      ]
                    ],
                    [
                      "Binary",
                      1381,
                      26,
                      0,
                      ["Ident", 3422, 1, 0, "_i"],
                      "=",
                      "Binary",
                      1381,
                      49,
                      0,
                      ["Ident", 3422, 1, 0, "_arr"],
                      ".",
                      "Const",
                      1381,
                      56,
                      0,
                      "length"
                    ],
                    [
                      "Unary",
                      1502,
                      1,
                      0,
                      "++",
                      "Ident",
                      3421,
                      13,
                      0,
                      "_state"
                    ]
                  ],
                  1382,
                  16,
                  null,
                  ["Const", 1382, 16, 0, 1],
                  [
                    "BlockStatement",
                    1382,
                    16,
                    0,
                    0,
                    [
                      "Binary",
                      1382,
                      16,
                      0,
                      ["Ident", 3421, 13, 0, "_state"],
                      "=",
                      "IfExpression",
                      1382,
                      16,
                      0,
                      [
                        "Unary",
                        1382,
                        16,
                        0,
                        "--post",
                        "Ident",
                        3422,
                        1,
                        0,
                        "_i"
                      ],
                      ["Const", 1382, 16, 0, 2],
                      "Const",
                      1382,
                      16,
                      0,
                      3
                    ],
                    ["Break", 1382, 16, 0]
                  ],
                  1464,
                  1,
                  null,
                  ["Const", 1464, 1, 0, 2],
                  [
                    "BlockStatement",
                    1464,
                    1,
                    0,
                    0,
                    [
                      "Binary",
                      1464,
                      1,
                      0,
                      ["Ident", 3422, 8, 0, "value"],
                      "=",
                      "Binary",
                      1345,
                      75,
                      0,
                      ["Ident", 3422, 1, 0, "_arr"],
                      ".",
                      "Ident",
                      3422,
                      1,
                      0,
                      "_i"
                    ],
                    [
                      "Binary",
                      3423,
                      1,
                      0,
                      ["Ident", 3421, 13, 0, "_state"],
                      "=",
                      "Const",
                      3423,
                      1,
                      0,
                      1
                    ],
                    [
                      "Return",
                      3423,
                      1,
                      0,
                      "Obj",
                      3423,
                      1,
                      0,
                      3423,
                      1,
                      null,
                      "done",
                      ["Const", 3423, 1, 0, false],
                      3423,
                      1,
                      null,
                      "value",
                      ["Ident", 3423, 12, 0, "value"]
                    ]
                  ],
                  3421,
                  13,
                  null,
                  ["Const", 3421, 13, 0, 3],
                  [
                    "Return",
                    3421,
                    13,
                    0,
                    "Obj",
                    3421,
                    13,
                    0,
                    3421,
                    13,
                    null,
                    "done",
                    ["Const", 3421, 13, 0, true],
                    3421,
                    13,
                    null,
                    "value",
                    ["Const", 3421, 13, 0]
                  ],
                  [
                    "Throw",
                    3421,
                    13,
                    0,
                    "Call",
                    3421,
                    13,
                    0,
                    ["Ident", 3421, 13, 0, "Error"],
                    0,
                    [
                      "Binary",
                      3421,
                      13,
                      0,
                      ["Const", 3421, 13, 0, "Unknown state: "],
                      "+",
                      "Ident",
                      3421,
                      13,
                      0,
                      "_state"
                    ]
                  ]
                ],
                [
                  "Func",
                  3421,
                  13,
                  0,
                  ["Ident", 3421, 13, 0, "_throw"],
                  [["Ident", 3421, 13, 0, "_e"]],
                  [],
                  [],
                  "BlockStatement",
                  3421,
                  13,
                  0,
                  0,
                  [
                    "Call",
                    3421,
                    13,
                    0,
                    ["Ident", 3421, 13, 0, "_close"],
                    0
                  ],
                  [
                    "Throw",
                    3421,
                    13,
                    0,
                    "Ident",
                    3421,
                    13,
                    0,
                    "_e"
                  ]
                ],
                [
                  "Func",
                  3421,
                  13,
                  0,
                  ["Ident", 3421, 13, 0, "_send"],
                  [["Ident", 3421, 13, 0, "_received"]],
                  [],
                  [],
                  "TryCatch",
                  3421,
                  13,
                  0,
                  0,
                  [
                    "Return",
                    3421,
                    13,
                    0,
                    "Call",
                    3421,
                    13,
                    0,
                    ["Ident", 3421, 13, 0, "_step"],
                    0,
                    ["Ident", 3421, 13, 0, "_received"]
                  ],
                  ["Ident", 3421, 13, 0, "_e"],
                  "Call",
                  3421,
                  13,
                  0,
                  ["Ident", 3421, 13, 0, "_throw"],
                  0,
                  ["Ident", 3421, 13, 0, "_e"]
                ],
                [
                  "Return",
                  3421,
                  13,
                  0,
                  "Obj",
                  3421,
                  13,
                  0,
                  3421,
                  13,
                  null,
                  "close",
                  ["Ident", 3421, 13, 0, "_close"],
                  3421,
                  13,
                  null,
                  "iterator",
                  [
                    "Func",
                    3421,
                    13,
                    0,
                    0,
                    [],
                    [],
                    [],
                    "Return",
                    3421,
                    13,
                    0,
                    "This",
                    3421,
                    13,
                    0
                  ],
                  3421,
                  13,
                  null,
                  "next",
                  [
                    "Func",
                    3421,
                    13,
                    0,
                    0,
                    [],
                    [],
                    [],
                    "Return",
                    3421,
                    13,
                    0,
                    "Call",
                    3421,
                    13,
                    0,
                    ["Ident", 3421, 13, 0, "_send"],
                    0,
                    ["Const", 3421, 13, 0]
                  ],
                  3421,
                  13,
                  null,
                  "send",
                  ["Ident", 3421, 13, 0, "_send"],
                  3421,
                  13,
                  null,
                  "throw",
                  [
                    "Func",
                    3421,
                    13,
                    0,
                    0,
                    [["Ident", 3421, 13, 0, "_e"]],
                    [],
                    [],
                    "BlockStatement",
                    3421,
                    13,
                    0,
                    0,
                    [
                      "Call",
                      3421,
                      13,
                      0,
                      ["Ident", 3421, 13, 0, "_throw"],
                      0,
                      ["Ident", 3421, 13, 0, "_e"]
                    ],
                    [
                      "Return",
                      3421,
                      13,
                      0,
                      "Call",
                      3421,
                      13,
                      0,
                      ["Ident", 3421, 13, 0, "_send"],
                      0,
                      ["Const", 3421, 13, 0]
                    ]
                  ]
                ]
              ],
              [
                "Binary",
                2980,
                25,
                0,
                [
                  "Binary",
                  2980,
                  25,
                  0,
                  ["Ident", 3382, 68, 0, "_Map_prototype"],
                  ".",
                  "Const",
                  3425,
                  6,
                  0,
                  "items"
                ],
                "=",
                "Func",
                3425,
                12,
                0,
                0,
                [],
                [
                  "_arr",
                  "_e",
                  "_send",
                  "_state",
                  "_step",
                  "_this",
                  "_throw",
                  "i",
                  "key",
                  "values"
                ],
                [],
                "BlockStatement",
                3426,
                1,
                0,
                0,
                [
                  "Binary",
                  3426,
                  1,
                  0,
                  ["Ident", 3426, 1, 0, "_this"],
                  "=",
                  "This",
                  3426,
                  1,
                  0
                ],
                [
                  "Binary",
                  3425,
                  12,
                  0,
                  ["Ident", 3425, 12, 0, "_state"],
                  "=",
                  "Const",
                  3425,
                  12,
                  0,
                  0
                ],
                [
                  "Func",
                  3425,
                  12,
                  0,
                  ["Ident", 3425, 12, 0, "_close"],
                  [],
                  [],
                  [],
                  "Binary",
                  3425,
                  12,
                  0,
                  ["Ident", 3425, 12, 0, "_state"],
                  "=",
                  "Const",
                  3425,
                  12,
                  0,
                  3
                ],
                [
                  "Func",
                  3425,
                  12,
                  0,
                  ["Ident", 3425, 12, 0, "_step"],
                  [["Ident", 3425, 12, 0, "_received"]],
                  [],
                  [],
                  "For",
                  3425,
                  12,
                  0,
                  0,
                  0,
                  ["Const", 3425, 12, 0, true],
                  0,
                  "Switch",
                  3425,
                  12,
                  0,
                  0,
                  ["Ident", 3425, 12, 0, "_state"],
                  3426,
                  1,
                  null,
                  ["Const", 3426, 1, 0, 0],
                  [
                    "BlockStatement",
                    3426,
                    1,
                    0,
                    0,
                    [
                      "Binary",
                      3426,
                      1,
                      0,
                      ["Ident", 3426, 8, 0, "values"],
                      "=",
                      "Binary",
                      3426,
                      17,
                      0,
                      ["Ident", 3426, 17, 0, "_this"],
                      ".",
                      "Const",
                      3426,
                      19,
                      0,
                      "_values"
                    ],
                    [
                      "Binary",
                      3427,
                      1,
                      0,
                      ["Ident", 3427, 1, 0, "_arr"],
                      "=",
                      "Call",
                      1342,
                      22,
                      0,
                      ["Ident", 1342, 22, 0, "__toArray"],
                      0,
                      [
                        "Binary",
                        3427,
                        18,
                        0,
                        ["Ident", 3427, 18, 0, "_this"],
                        ".",
                        "Const",
                        3427,
                        20,
                        0,
                        "_keys"
                      ]
                    ],
                    [
                      "Binary",
                      1381,
                      26,
                      0,
                      ["Ident", 3427, 13, 0, "i"],
                      "=",
                      "Binary",
                      1381,
                      49,
                      0,
                      ["Ident", 3427, 1, 0, "_arr"],
                      ".",
                      "Const",
                      1381,
                      56,
                      0,
                      "length"
                    ],
                    [
                      "Unary",
                      1502,
                      1,
                      0,
                      "++",
                      "Ident",
                      3425,
                      12,
                      0,
                      "_state"
                    ]
                  ],
                  1382,
                  16,
                  null,
                  ["Const", 1382, 16, 0, 1],
                  [
                    "BlockStatement",
                    1382,
                    16,
                    0,
                    0,
                    [
                      "Binary",
                      1382,
                      16,
                      0,
                      ["Ident", 3425, 12, 0, "_state"],
                      "=",
                      "IfExpression",
                      1382,
                      16,
                      0,
                      [
                        "Unary",
                        1382,
                        16,
                        0,
                        "--post",
                        "Ident",
                        3427,
                        13,
                        0,
                        "i"
                      ],
                      ["Const", 1382, 16, 0, 2],
                      "Const",
                      1382,
                      16,
                      0,
                      3
                    ],
                    ["Break", 1382, 16, 0]
                  ],
                  1464,
                  1,
                  null,
                  ["Const", 1464, 1, 0, 2],
                  [
                    "BlockStatement",
                    1464,
                    1,
                    0,
                    0,
                    [
                      "Binary",
                      1464,
                      1,
                      0,
                      ["Ident", 3427, 8, 0, "key"],
                      "=",
                      "Binary",
                      1345,
                      75,
                      0,
                      ["Ident", 3427, 1, 0, "_arr"],
                      ".",
                      "Ident",
                      3427,
                      13,
                      0,
                      "i"
                    ],
                    [
                      "Binary",
                      3428,
                      1,
                      0,
                      ["Ident", 3425, 12, 0, "_state"],
                      "=",
                      "Const",
                      3428,
                      1,
                      0,
                      1
                    ],
                    [
                      "Return",
                      3428,
                      1,
                      0,
                      "Obj",
                      3428,
                      1,
                      0,
                      3428,
                      1,
                      null,
                      "done",
                      ["Const", 3428, 1, 0, false],
                      3428,
                      1,
                      null,
                      "value",
                      [
                        "Arr",
                        3428,
                        12,
                        0,
                        ["Ident", 3428, 14, 0, "key"],
                        [
                          "Binary",
                          3428,
                          18,
                          0,
                          ["Ident", 3428, 18, 0, "values"],
                          ".",
                          "Ident",
                          3428,
                          26,
                          0,
                          "i"
                        ]
                      ]
                    ]
                  ],
                  3425,
                  12,
                  null,
                  ["Const", 3425, 12, 0, 3],
                  [
                    "Return",
                    3425,
                    12,
                    0,
                    "Obj",
                    3425,
                    12,
                    0,
                    3425,
                    12,
                    null,
                    "done",
                    ["Const", 3425, 12, 0, true],
                    3425,
                    12,
                    null,
                    "value",
                    ["Const", 3425, 12, 0]
                  ],
                  [
                    "Throw",
                    3425,
                    12,
                    0,
                    "Call",
                    3425,
                    12,
                    0,
                    ["Ident", 3425, 12, 0, "Error"],
                    0,
                    [
                      "Binary",
                      3425,
                      12,
                      0,
                      ["Const", 3425, 12, 0, "Unknown state: "],
                      "+",
                      "Ident",
                      3425,
                      12,
                      0,
                      "_state"
                    ]
                  ]
                ],
                [
                  "Func",
                  3425,
                  12,
                  0,
                  ["Ident", 3425, 12, 0, "_throw"],
                  [["Ident", 3425, 12, 0, "_e"]],
                  [],
                  [],
                  "BlockStatement",
                  3425,
                  12,
                  0,
                  0,
                  [
                    "Call",
                    3425,
                    12,
                    0,
                    ["Ident", 3425, 12, 0, "_close"],
                    0
                  ],
                  [
                    "Throw",
                    3425,
                    12,
                    0,
                    "Ident",
                    3425,
                    12,
                    0,
                    "_e"
                  ]
                ],
                [
                  "Func",
                  3425,
                  12,
                  0,
                  ["Ident", 3425, 12, 0, "_send"],
                  [["Ident", 3425, 12, 0, "_received"]],
                  [],
                  [],
                  "TryCatch",
                  3425,
                  12,
                  0,
                  0,
                  [
                    "Return",
                    3425,
                    12,
                    0,
                    "Call",
                    3425,
                    12,
                    0,
                    ["Ident", 3425, 12, 0, "_step"],
                    0,
                    ["Ident", 3425, 12, 0, "_received"]
                  ],
                  ["Ident", 3425, 12, 0, "_e"],
                  "Call",
                  3425,
                  12,
                  0,
                  ["Ident", 3425, 12, 0, "_throw"],
                  0,
                  ["Ident", 3425, 12, 0, "_e"]
                ],
                [
                  "Return",
                  3425,
                  12,
                  0,
                  "Obj",
                  3425,
                  12,
                  0,
                  3425,
                  12,
                  null,
                  "close",
                  ["Ident", 3425, 12, 0, "_close"],
                  3425,
                  12,
                  null,
                  "iterator",
                  [
                    "Func",
                    3425,
                    12,
                    0,
                    0,
                    [],
                    [],
                    [],
                    "Return",
                    3425,
                    12,
                    0,
                    "This",
                    3425,
                    12,
                    0
                  ],
                  3425,
                  12,
                  null,
                  "next",
                  [
                    "Func",
                    3425,
                    12,
                    0,
                    0,
                    [],
                    [],
                    [],
                    "Return",
                    3425,
                    12,
                    0,
                    "Call",
                    3425,
                    12,
                    0,
                    ["Ident", 3425, 12, 0, "_send"],
                    0,
                    ["Const", 3425, 12, 0]
                  ],
                  3425,
                  12,
                  null,
                  "send",
                  ["Ident", 3425, 12, 0, "_send"],
                  3425,
                  12,
                  null,
                  "throw",
                  [
                    "Func",
                    3425,
                    12,
                    0,
                    0,
                    [["Ident", 3425, 12, 0, "_e"]],
                    [],
                    [],
                    "BlockStatement",
                    3425,
                    12,
                    0,
                    0,
                    [
                      "Call",
                      3425,
                      12,
                      0,
                      ["Ident", 3425, 12, 0, "_throw"],
                      0,
                      ["Ident", 3425, 12, 0, "_e"]
                    ],
                    [
                      "Return",
                      3425,
                      12,
                      0,
                      "Call",
                      3425,
                      12,
                      0,
                      ["Ident", 3425, 12, 0, "_send"],
                      0,
                      ["Const", 3425, 12, 0]
                    ]
                  ]
                ]
              ],
              [
                "Binary",
                2980,
                25,
                0,
                [
                  "Binary",
                  2980,
                  25,
                  0,
                  ["Ident", 3382, 68, 0, "_Map_prototype"],
                  ".",
                  "Const",
                  3429,
                  6,
                  0,
                  "iterator"
                ],
                "=",
                "Binary",
                3429,
                17,
                0,
                [
                  "Binary",
                  3429,
                  17,
                  0,
                  ["Ident", 3429, 17, 0, "Map"],
                  ".",
                  "Const",
                  3429,
                  17,
                  0,
                  "prototype"
                ],
                ".",
                "Const",
                3429,
                23,
                0,
                "items"
              ],
              [
                "Return",
                2993,
                1,
                0,
                "Ident",
                3382,
                74,
                0,
                "Map"
              ]
            ],
            0
          ],
          type: "any",
          dependencies: ["__create", "__indexOfIdentical", "__iter", "__toArray", "GLOBAL", "Map"]
        },
        Set: {
          helper: [
            "IfExpression",
            3431,
            20,
            0,
            [
              "Binary",
              138,
              7,
              0,
              [
                "Unary",
                138,
                7,
                0,
                "typeof",
                "Binary",
                3431,
                36,
                0,
                ["Ident", 3431, 36, 0, "GLOBAL"],
                ".",
                "Const",
                3431,
                44,
                0,
                "Set"
              ],
              "===",
              "Const",
              138,
              25,
              0,
              "function"
            ],
            [
              "Binary",
              3431,
              52,
              0,
              ["Ident", 3431, 52, 0, "GLOBAL"],
              ".",
              "Const",
              3431,
              60,
              0,
              "Set"
            ],
            "Binary",
            3029,
            10,
            0,
            ["Ident", 3431, 74, 0, "Set"],
            "=",
            "Call",
            2991,
            1,
            0,
            [
              "Func",
              2991,
              1,
              0,
              0,
              [],
              ["_Set_prototype"],
              [],
              "BlockStatement",
              2991,
              1,
              0,
              0,
              [
                "Func",
                2915,
                29,
                0,
                ["Ident", 3431, 74, 0, "Set"],
                [["Ident", 3432, 19, 0, "iterable"]],
                ["_item", "_iter", "_this", "item"],
                [],
                "BlockStatement",
                3433,
                1,
                0,
                0,
                [
                  "Binary",
                  3433,
                  1,
                  0,
                  ["Ident", 3433, 1, 0, "_this"],
                  "=",
                  "IfExpression",
                  2914,
                  18,
                  0,
                  [
                    "Binary",
                    2914,
                    21,
                    0,
                    [
                      "Eval",
                      2914,
                      21,
                      0,
                      ["Const", 2914, 27, 0, "this"]
                    ],
                    "instanceof",
                    "Ident",
                    3431,
                    74,
                    0,
                    "Set"
                  ],
                  [
                    "Eval",
                    2914,
                    56,
                    0,
                    ["Const", 2914, 62, 0, "this"]
                  ],
                  "Call",
                  2914,
                  74,
                  0,
                  ["Ident", 2914, 74, 0, "__create"],
                  0,
                  ["Ident", 3431, 68, 0, "_Set_prototype"]
                ],
                [
                  "Binary",
                  3433,
                  1,
                  0,
                  [
                    "Binary",
                    3433,
                    1,
                    0,
                    ["Ident", 3433, 1, 0, "_this"],
                    ".",
                    "Const",
                    3433,
                    6,
                    0,
                    "_items"
                  ],
                  "=",
                  "Arr",
                  3433,
                  15,
                  0
                ],
                [
                  "IfStatement",
                  3434,
                  1,
                  0,
                  0,
                  [
                    "Binary",
                    49,
                    7,
                    0,
                    ["Ident", 3434, 7, 0, "iterable"],
                    "!=",
                    "Const",
                    1,
                    1,
                    0,
                    null
                  ],
                  [
                    "TryFinally",
                    2213,
                    8,
                    0,
                    0,
                    [
                      "For",
                      2209,
                      1,
                      0,
                      0,
                      [
                        "Binary",
                        3435,
                        1,
                        0,
                        ["Ident", 3435, 1, 0, "_iter"],
                        "=",
                        "Call",
                        2136,
                        30,
                        0,
                        ["Ident", 2136, 30, 0, "__iter"],
                        0,
                        ["Ident", 3435, 20, 0, "iterable"]
                      ],
                      ["Const", 1, 1, 0, true],
                      0,
                      "BlockStatement",
                      2176,
                      1,
                      0,
                      0,
                      [
                        "Binary",
                        2146,
                        1,
                        0,
                        ["Ident", 3435, 1, 0, "_item"],
                        "=",
                        "Call",
                        2146,
                        18,
                        0,
                        [
                          "Binary",
                          2146,
                          18,
                          0,
                          ["Ident", 3435, 1, 0, "_iter"],
                          ".",
                          "Const",
                          2146,
                          29,
                          0,
                          "next"
                        ],
                        0
                      ],
                      [
                        "IfStatement",
                        2147,
                        1,
                        0,
                        0,
                        [
                          "Binary",
                          2147,
                          9,
                          0,
                          ["Ident", 3435, 1, 0, "_item"],
                          ".",
                          "Const",
                          2147,
                          16,
                          0,
                          "done"
                        ],
                        ["Break", 2148, 1, 0]
                      ],
                      [
                        "Binary",
                        2149,
                        1,
                        0,
                        ["Ident", 3435, 10, 0, "item"],
                        "=",
                        "Binary",
                        2149,
                        19,
                        0,
                        ["Ident", 3435, 1, 0, "_item"],
                        ".",
                        "Const",
                        2149,
                        26,
                        0,
                        "value"
                      ],
                      [
                        "Call",
                        3436,
                        1,
                        0,
                        [
                          "Binary",
                          3436,
                          1,
                          0,
                          ["Ident", 3436, 1, 0, "_this"],
                          ".",
                          "Const",
                          3436,
                          10,
                          0,
                          "add"
                        ],
                        0,
                        ["Ident", 3436, 14, 0, "item"]
                      ]
                    ],
                    "TryCatch",
                    2216,
                    1,
                    0,
                    0,
                    [
                      "Call",
                      2217,
                      1,
                      0,
                      [
                        "Binary",
                        2217,
                        1,
                        0,
                        ["Ident", 3435, 1, 0, "_iter"],
                        ".",
                        "Const",
                        2217,
                        19,
                        0,
                        "close"
                      ],
                      0
                    ],
                    ["Ident", 3435, 1, 0, "_e"],
                    "Const",
                    1,
                    1,
                    0
                  ]
                ],
                [
                  "Return",
                  3433,
                  1,
                  0,
                  "Ident",
                  3433,
                  1,
                  0,
                  "_this"
                ]
              ],
              [
                "Binary",
                2845,
                20,
                0,
                ["Ident", 3431, 68, 0, "_Set_prototype"],
                "=",
                "Binary",
                2845,
                37,
                0,
                ["Ident", 3431, 74, 0, "Set"],
                ".",
                "Const",
                2845,
                44,
                0,
                "prototype"
              ],
              [
                "Binary",
                2857,
                21,
                0,
                [
                  "Binary",
                  2857,
                  21,
                  0,
                  ["Ident", 3431, 74, 0, "Set"],
                  ".",
                  "Const",
                  2857,
                  28,
                  0,
                  "displayName"
                ],
                "=",
                "Const",
                3431,
                68,
                0,
                "Set"
              ],
              [
                "Binary",
                2980,
                25,
                0,
                [
                  "Binary",
                  2980,
                  25,
                  0,
                  ["Ident", 3431, 68, 0, "_Set_prototype"],
                  ".",
                  "Const",
                  3438,
                  6,
                  0,
                  "has"
                ],
                "=",
                "Func",
                3438,
                10,
                0,
                0,
                [["Ident", 3438, 11, 0, "item"]],
                [],
                [],
                "Return",
                43,
                7,
                0,
                "Binary",
                43,
                7,
                0,
                [
                  "Call",
                  3439,
                  1,
                  0,
                  ["Ident", 3439, 1, 0, "__indexOfIdentical"],
                  0,
                  [
                    "Binary",
                    3439,
                    26,
                    0,
                    ["This", 3439, 26, 0],
                    ".",
                    "Const",
                    3439,
                    27,
                    0,
                    "_items"
                  ],
                  ["Ident", 3439, 34, 0, "item"]
                ],
                "!==",
                "Const",
                3439,
                43,
                0,
                -1
              ],
              [
                "Binary",
                2980,
                25,
                0,
                [
                  "Binary",
                  2980,
                  25,
                  0,
                  ["Ident", 3431, 68, 0, "_Set_prototype"],
                  ".",
                  "Const",
                  3440,
                  6,
                  0,
                  "add"
                ],
                "=",
                "Func",
                3440,
                10,
                0,
                0,
                [["Ident", 3440, 11, 0, "item"]],
                ["items"],
                [],
                "BlockExpression",
                3441,
                1,
                0,
                [
                  "Binary",
                  3441,
                  1,
                  0,
                  ["Ident", 3441, 8, 0, "items"],
                  "=",
                  "Binary",
                  3441,
                  16,
                  0,
                  ["This", 3441, 16, 0],
                  ".",
                  "Const",
                  3441,
                  18,
                  0,
                  "_items"
                ],
                [
                  "IfExpression",
                  3442,
                  1,
                  0,
                  [
                    "Binary",
                    3442,
                    7,
                    0,
                    [
                      "Call",
                      3442,
                      7,
                      0,
                      ["Ident", 3442, 7, 0, "__indexOfIdentical"],
                      0,
                      ["Ident", 3442, 29, 0, "items"],
                      ["Ident", 3442, 35, 0, "item"]
                    ],
                    "===",
                    "Const",
                    3442,
                    44,
                    0,
                    -1
                  ],
                  [
                    "Call",
                    3443,
                    1,
                    0,
                    [
                      "Binary",
                      3443,
                      1,
                      0,
                      ["Ident", 3443, 1, 0, "items"],
                      ".",
                      "Const",
                      3443,
                      13,
                      0,
                      "push"
                    ],
                    0,
                    ["Ident", 3443, 18, 0, "item"]
                  ]
                ]
              ],
              [
                "Binary",
                2980,
                25,
                0,
                [
                  "Binary",
                  2980,
                  25,
                  0,
                  ["Ident", 3431, 68, 0, "_Set_prototype"],
                  ".",
                  "Const",
                  3444,
                  6,
                  0,
                  "delete"
                ],
                "=",
                "Func",
                3444,
                13,
                0,
                0,
                [["Ident", 3444, 14, 0, "item"]],
                ["index", "items"],
                [],
                "BlockExpression",
                3445,
                1,
                0,
                [
                  "Binary",
                  3445,
                  1,
                  0,
                  ["Ident", 3445, 8, 0, "items"],
                  "=",
                  "Binary",
                  3445,
                  16,
                  0,
                  ["This", 3445, 16, 0],
                  ".",
                  "Const",
                  3445,
                  18,
                  0,
                  "_items"
                ],
                [
                  "Binary",
                  3446,
                  1,
                  0,
                  ["Ident", 3446, 8, 0, "index"],
                  "=",
                  "Call",
                  3446,
                  16,
                  0,
                  ["Ident", 3446, 16, 0, "__indexOfIdentical"],
                  0,
                  ["Ident", 3446, 38, 0, "items"],
                  ["Ident", 3446, 44, 0, "item"]
                ],
                [
                  "IfExpression",
                  3447,
                  1,
                  0,
                  [
                    "Binary",
                    43,
                    7,
                    0,
                    ["Ident", 3447, 7, 0, "index"],
                    "!==",
                    "Const",
                    3447,
                    16,
                    0,
                    -1
                  ],
                  [
                    "BlockExpression",
                    3448,
                    1,
                    0,
                    [
                      "Call",
                      3448,
                      1,
                      0,
                      [
                        "Binary",
                        3448,
                        1,
                        0,
                        ["Ident", 3448, 1, 0, "items"],
                        ".",
                        "Const",
                        3448,
                        13,
                        0,
                        "splice"
                      ],
                      0,
                      ["Ident", 3448, 20, 0, "index"],
                      ["Const", 3448, 27, 0, 1]
                    ],
                    ["Const", 3449, 1, 0, true]
                  ],
                  "Const",
                  3451,
                  1,
                  0,
                  false
                ]
              ],
              [
                "Binary",
                2980,
                25,
                0,
                [
                  "Binary",
                  2980,
                  25,
                  0,
                  ["Ident", 3431, 68, 0, "_Set_prototype"],
                  ".",
                  "Const",
                  3452,
                  6,
                  0,
                  "values"
                ],
                "=",
                "Func",
                3452,
                13,
                0,
                0,
                [],
                [
                  "_arr",
                  "_e",
                  "_i",
                  "_send",
                  "_state",
                  "_step",
                  "_this",
                  "_throw",
                  "item"
                ],
                [],
                "BlockStatement",
                3453,
                1,
                0,
                0,
                [
                  "Binary",
                  3453,
                  1,
                  0,
                  ["Ident", 3453, 1, 0, "_this"],
                  "=",
                  "This",
                  3453,
                  1,
                  0
                ],
                [
                  "Binary",
                  3452,
                  13,
                  0,
                  ["Ident", 3452, 13, 0, "_state"],
                  "=",
                  "Const",
                  3452,
                  13,
                  0,
                  0
                ],
                [
                  "Func",
                  3452,
                  13,
                  0,
                  ["Ident", 3452, 13, 0, "_close"],
                  [],
                  [],
                  [],
                  "Binary",
                  3452,
                  13,
                  0,
                  ["Ident", 3452, 13, 0, "_state"],
                  "=",
                  "Const",
                  3452,
                  13,
                  0,
                  3
                ],
                [
                  "Func",
                  3452,
                  13,
                  0,
                  ["Ident", 3452, 13, 0, "_step"],
                  [["Ident", 3452, 13, 0, "_received"]],
                  [],
                  [],
                  "For",
                  3452,
                  13,
                  0,
                  0,
                  0,
                  ["Const", 3452, 13, 0, true],
                  0,
                  "Switch",
                  3452,
                  13,
                  0,
                  0,
                  ["Ident", 3452, 13, 0, "_state"],
                  1,
                  1,
                  null,
                  ["Const", 1, 1, 0, 0],
                  [
                    "BlockStatement",
                    1,
                    1,
                    0,
                    0,
                    [
                      "Binary",
                      3453,
                      1,
                      0,
                      ["Ident", 3453, 1, 0, "_arr"],
                      "=",
                      "Call",
                      1342,
                      22,
                      0,
                      ["Ident", 1342, 22, 0, "__toArray"],
                      0,
                      [
                        "Binary",
                        3453,
                        16,
                        0,
                        ["Ident", 3453, 16, 0, "_this"],
                        ".",
                        "Const",
                        3453,
                        18,
                        0,
                        "_items"
                      ]
                    ],
                    [
                      "Binary",
                      1381,
                      26,
                      0,
                      ["Ident", 3453, 1, 0, "_i"],
                      "=",
                      "Binary",
                      1381,
                      49,
                      0,
                      ["Ident", 3453, 1, 0, "_arr"],
                      ".",
                      "Const",
                      1381,
                      56,
                      0,
                      "length"
                    ],
                    [
                      "Unary",
                      1502,
                      1,
                      0,
                      "++",
                      "Ident",
                      3452,
                      13,
                      0,
                      "_state"
                    ]
                  ],
                  1382,
                  16,
                  null,
                  ["Const", 1382, 16, 0, 1],
                  [
                    "BlockStatement",
                    1382,
                    16,
                    0,
                    0,
                    [
                      "Binary",
                      1382,
                      16,
                      0,
                      ["Ident", 3452, 13, 0, "_state"],
                      "=",
                      "IfExpression",
                      1382,
                      16,
                      0,
                      [
                        "Unary",
                        1382,
                        16,
                        0,
                        "--post",
                        "Ident",
                        3453,
                        1,
                        0,
                        "_i"
                      ],
                      ["Const", 1382, 16, 0, 2],
                      "Const",
                      1382,
                      16,
                      0,
                      3
                    ],
                    ["Break", 1382, 16, 0]
                  ],
                  1464,
                  1,
                  null,
                  ["Const", 1464, 1, 0, 2],
                  [
                    "BlockStatement",
                    1464,
                    1,
                    0,
                    0,
                    [
                      "Binary",
                      1464,
                      1,
                      0,
                      ["Ident", 3453, 8, 0, "item"],
                      "=",
                      "Binary",
                      1345,
                      75,
                      0,
                      ["Ident", 3453, 1, 0, "_arr"],
                      ".",
                      "Ident",
                      3453,
                      1,
                      0,
                      "_i"
                    ],
                    [
                      "Binary",
                      3454,
                      1,
                      0,
                      ["Ident", 3452, 13, 0, "_state"],
                      "=",
                      "Const",
                      3454,
                      1,
                      0,
                      1
                    ],
                    [
                      "Return",
                      3454,
                      1,
                      0,
                      "Obj",
                      3454,
                      1,
                      0,
                      3454,
                      1,
                      null,
                      "done",
                      ["Const", 3454, 1, 0, false],
                      3454,
                      1,
                      null,
                      "value",
                      ["Ident", 3454, 12, 0, "item"]
                    ]
                  ],
                  3452,
                  13,
                  null,
                  ["Const", 3452, 13, 0, 3],
                  [
                    "Return",
                    3452,
                    13,
                    0,
                    "Obj",
                    3452,
                    13,
                    0,
                    3452,
                    13,
                    null,
                    "done",
                    ["Const", 3452, 13, 0, true],
                    3452,
                    13,
                    null,
                    "value",
                    ["Const", 3452, 13, 0]
                  ],
                  [
                    "Throw",
                    3452,
                    13,
                    0,
                    "Call",
                    3452,
                    13,
                    0,
                    ["Ident", 3452, 13, 0, "Error"],
                    0,
                    [
                      "Binary",
                      3452,
                      13,
                      0,
                      ["Const", 3452, 13, 0, "Unknown state: "],
                      "+",
                      "Ident",
                      3452,
                      13,
                      0,
                      "_state"
                    ]
                  ]
                ],
                [
                  "Func",
                  3452,
                  13,
                  0,
                  ["Ident", 3452, 13, 0, "_throw"],
                  [["Ident", 3452, 13, 0, "_e"]],
                  [],
                  [],
                  "BlockStatement",
                  3452,
                  13,
                  0,
                  0,
                  [
                    "Call",
                    3452,
                    13,
                    0,
                    ["Ident", 3452, 13, 0, "_close"],
                    0
                  ],
                  [
                    "Throw",
                    3452,
                    13,
                    0,
                    "Ident",
                    3452,
                    13,
                    0,
                    "_e"
                  ]
                ],
                [
                  "Func",
                  3452,
                  13,
                  0,
                  ["Ident", 3452, 13, 0, "_send"],
                  [["Ident", 3452, 13, 0, "_received"]],
                  [],
                  [],
                  "TryCatch",
                  3452,
                  13,
                  0,
                  0,
                  [
                    "Return",
                    3452,
                    13,
                    0,
                    "Call",
                    3452,
                    13,
                    0,
                    ["Ident", 3452, 13, 0, "_step"],
                    0,
                    ["Ident", 3452, 13, 0, "_received"]
                  ],
                  ["Ident", 3452, 13, 0, "_e"],
                  "Call",
                  3452,
                  13,
                  0,
                  ["Ident", 3452, 13, 0, "_throw"],
                  0,
                  ["Ident", 3452, 13, 0, "_e"]
                ],
                [
                  "Return",
                  3452,
                  13,
                  0,
                  "Obj",
                  3452,
                  13,
                  0,
                  3452,
                  13,
                  null,
                  "close",
                  ["Ident", 3452, 13, 0, "_close"],
                  3452,
                  13,
                  null,
                  "iterator",
                  [
                    "Func",
                    3452,
                    13,
                    0,
                    0,
                    [],
                    [],
                    [],
                    "Return",
                    3452,
                    13,
                    0,
                    "This",
                    3452,
                    13,
                    0
                  ],
                  3452,
                  13,
                  null,
                  "next",
                  [
                    "Func",
                    3452,
                    13,
                    0,
                    0,
                    [],
                    [],
                    [],
                    "Return",
                    3452,
                    13,
                    0,
                    "Call",
                    3452,
                    13,
                    0,
                    ["Ident", 3452, 13, 0, "_send"],
                    0,
                    ["Const", 3452, 13, 0]
                  ],
                  3452,
                  13,
                  null,
                  "send",
                  ["Ident", 3452, 13, 0, "_send"],
                  3452,
                  13,
                  null,
                  "throw",
                  [
                    "Func",
                    3452,
                    13,
                    0,
                    0,
                    [["Ident", 3452, 13, 0, "_e"]],
                    [],
                    [],
                    "BlockStatement",
                    3452,
                    13,
                    0,
                    0,
                    [
                      "Call",
                      3452,
                      13,
                      0,
                      ["Ident", 3452, 13, 0, "_throw"],
                      0,
                      ["Ident", 3452, 13, 0, "_e"]
                    ],
                    [
                      "Return",
                      3452,
                      13,
                      0,
                      "Call",
                      3452,
                      13,
                      0,
                      ["Ident", 3452, 13, 0, "_send"],
                      0,
                      ["Const", 3452, 13, 0]
                    ]
                  ]
                ]
              ],
              [
                "Binary",
                2980,
                25,
                0,
                [
                  "Binary",
                  2980,
                  25,
                  0,
                  ["Ident", 3431, 68, 0, "_Set_prototype"],
                  ".",
                  "Const",
                  3455,
                  6,
                  0,
                  "iterator"
                ],
                "=",
                "Binary",
                3455,
                17,
                0,
                [
                  "Binary",
                  3455,
                  17,
                  0,
                  ["Ident", 3455, 17, 0, "Set"],
                  ".",
                  "Const",
                  3455,
                  17,
                  0,
                  "prototype"
                ],
                ".",
                "Const",
                3455,
                23,
                0,
                "values"
              ],
              [
                "Return",
                2993,
                1,
                0,
                "Ident",
                3431,
                74,
                0,
                "Set"
              ]
            ],
            0
          ],
          type: "any",
          dependencies: ["__create", "__indexOfIdentical", "__iter", "__toArray", "GLOBAL", "Set"]
        },
        setImmediate: {
          helper: [
            "IfExpression",
            3497,
            30,
            0,
            [
              "Binary",
              138,
              7,
              0,
              [
                "Unary",
                138,
                7,
                0,
                "typeof",
                "Binary",
                3497,
                46,
                0,
                ["Ident", 3497, 46, 0, "GLOBAL"],
                ".",
                "Const",
                3497,
                54,
                0,
                "setImmediate"
              ],
              "===",
              "Const",
              138,
              25,
              0,
              "function"
            ],
            [
              "Binary",
              3498,
              1,
              0,
              ["Ident", 3498, 1, 0, "GLOBAL"],
              ".",
              "Const",
              3498,
              10,
              0,
              "setImmediate"
            ],
            "IfExpression",
            3497,
            30,
            0,
            [
              "Binary",
              3499,
              8,
              0,
              [
                "Binary",
                3499,
                8,
                0,
                [
                  "Unary",
                  118,
                  9,
                  0,
                  "typeof",
                  "Ident",
                  3499,
                  21,
                  0,
                  "process"
                ],
                "!==",
                "Const",
                118,
                27,
                0,
                "undefined"
              ],
              "&&",
              "Binary",
              138,
              7,
              0,
              [
                "Unary",
                138,
                7,
                0,
                "typeof",
                "Binary",
                3499,
                46,
                0,
                ["Ident", 3499, 46, 0, "process"],
                ".",
                "Const",
                3499,
                55,
                0,
                "nextTick"
              ],
              "===",
              "Const",
              138,
              25,
              0,
              "function"
            ],
            [
              "Call",
              9,
              9,
              0,
              [
                "Func",
                9,
                12,
                0,
                0,
                [],
                ["nextTick"],
                [],
                "BlockStatement",
                3501,
                1,
                0,
                0,
                [
                  "Binary",
                  3501,
                  1,
                  0,
                  ["Ident", 3501, 8, 0, "nextTick"],
                  "=",
                  "Binary",
                  3501,
                  20,
                  0,
                  ["Ident", 3501, 20, 0, "process"],
                  ".",
                  "Const",
                  3501,
                  29,
                  0,
                  "nextTick"
                ],
                [
                  "Return",
                  1902,
                  1,
                  0,
                  "Func",
                  1902,
                  1,
                  0,
                  0,
                  [["Ident", 3502, 7, 0, "func"]],
                  ["args"],
                  [],
                  "BlockStatement",
                  1902,
                  1,
                  0,
                  0,
                  [
                    "IfStatement",
                    1686,
                    1,
                    0,
                    0,
                    [
                      "Binary",
                      657,
                      18,
                      0,
                      [
                        "Unary",
                        138,
                        7,
                        0,
                        "typeof",
                        "Ident",
                        3502,
                        7,
                        0,
                        "func"
                      ],
                      "!==",
                      "Const",
                      138,
                      25,
                      0,
                      "function"
                    ],
                    [
                      "Throw",
                      1687,
                      1,
                      0,
                      "Call",
                      1687,
                      18,
                      0,
                      ["Ident", 1687, 18, 0, "TypeError"],
                      0,
                      [
                        "Binary",
                        608,
                        7,
                        0,
                        ["Const", 608, 7, 0, "Expected func to be a Function, got "],
                        "+",
                        "Call",
                        494,
                        49,
                        0,
                        ["Ident", 494, 49, 0, "__typeof"],
                        0,
                        ["Ident", 3502, 7, 0, "func"]
                      ]
                    ]
                  ],
                  [
                    "Binary",
                    1881,
                    1,
                    0,
                    ["Ident", 3502, 22, 0, "args"],
                    "=",
                    "Call",
                    1881,
                    23,
                    0,
                    [
                      "Binary",
                      1881,
                      23,
                      0,
                      ["Ident", 1881, 23, 0, "__slice"],
                      ".",
                      "Const",
                      1881,
                      23,
                      0,
                      "call"
                    ],
                    0,
                    ["Arguments", 1881, 33, 0],
                    ["Const", 1, 1, 0, 1]
                  ],
                  [
                    "IfStatement",
                    3503,
                    1,
                    0,
                    0,
                    [
                      "Binary",
                      3503,
                      9,
                      0,
                      ["Ident", 3503, 9, 0, "args"],
                      ".",
                      "Const",
                      3503,
                      15,
                      0,
                      "length"
                    ],
                    [
                      "Return",
                      3504,
                      1,
                      0,
                      "Call",
                      3504,
                      1,
                      0,
                      ["Ident", 3504, 1, 0, "nextTick"],
                      0,
                      [
                        "Func",
                        3504,
                        20,
                        0,
                        0,
                        [],
                        [],
                        [],
                        "Call",
                        3504,
                        23,
                        0,
                        [
                          "Binary",
                          3504,
                          23,
                          0,
                          ["Ident", 3504, 23, 0, "func"],
                          ".",
                          "Const",
                          3504,
                          23,
                          0,
                          "apply"
                        ],
                        0,
                        ["Const", 3504, 23, 0],
                        [
                          "Call",
                          3504,
                          32,
                          0,
                          ["Ident", 3504, 32, 0, "__toArray"],
                          0,
                          ["Ident", 3504, 32, 0, "args"]
                        ]
                      ]
                    ],
                    "Return",
                    3506,
                    1,
                    0,
                    "Call",
                    3506,
                    1,
                    0,
                    ["Ident", 3506, 1, 0, "nextTick"],
                    0,
                    ["Ident", 3506, 19, 0, "func"]
                  ]
                ]
              ],
              0
            ],
            "Func",
            1902,
            1,
            0,
            0,
            [["Ident", 3508, 5, 0, "func"]],
            ["args"],
            [],
            "BlockStatement",
            1902,
            1,
            0,
            0,
            [
              "IfStatement",
              1686,
              1,
              0,
              0,
              [
                "Binary",
                657,
                18,
                0,
                [
                  "Unary",
                  138,
                  7,
                  0,
                  "typeof",
                  "Ident",
                  3508,
                  5,
                  0,
                  "func"
                ],
                "!==",
                "Const",
                138,
                25,
                0,
                "function"
              ],
              [
                "Throw",
                1687,
                1,
                0,
                "Call",
                1687,
                18,
                0,
                ["Ident", 1687, 18, 0, "TypeError"],
                0,
                [
                  "Binary",
                  608,
                  7,
                  0,
                  ["Const", 608, 7, 0, "Expected func to be a Function, got "],
                  "+",
                  "Call",
                  494,
                  49,
                  0,
                  ["Ident", 494, 49, 0, "__typeof"],
                  0,
                  ["Ident", 3508, 5, 0, "func"]
                ]
              ]
            ],
            [
              "Binary",
              1881,
              1,
              0,
              ["Ident", 3508, 20, 0, "args"],
              "=",
              "Call",
              1881,
              23,
              0,
              [
                "Binary",
                1881,
                23,
                0,
                ["Ident", 1881, 23, 0, "__slice"],
                ".",
                "Const",
                1881,
                23,
                0,
                "call"
              ],
              0,
              ["Arguments", 1881, 33, 0],
              ["Const", 1, 1, 0, 1]
            ],
            [
              "IfStatement",
              3509,
              1,
              0,
              0,
              [
                "Binary",
                3509,
                7,
                0,
                ["Ident", 3509, 7, 0, "args"],
                ".",
                "Const",
                3509,
                13,
                0,
                "length"
              ],
              [
                "Return",
                3510,
                1,
                0,
                "Call",
                3510,
                1,
                0,
                ["Ident", 3510, 1, 0, "setTimeout"],
                0,
                [
                  "Func",
                  3510,
                  20,
                  0,
                  0,
                  [],
                  [],
                  [],
                  "Call",
                  3510,
                  23,
                  0,
                  [
                    "Binary",
                    3510,
                    23,
                    0,
                    ["Ident", 3510, 23, 0, "func"],
                    ".",
                    "Const",
                    3510,
                    23,
                    0,
                    "apply"
                  ],
                  0,
                  ["Const", 3510, 23, 0],
                  [
                    "Call",
                    3510,
                    32,
                    0,
                    ["Ident", 3510, 32, 0, "__toArray"],
                    0,
                    ["Ident", 3510, 32, 0, "args"]
                  ]
                ],
                ["Const", 3510, 39, 0, 0]
              ],
              "Return",
              3512,
              1,
              0,
              "Call",
              3512,
              1,
              0,
              ["Ident", 3512, 1, 0, "setTimeout"],
              0,
              ["Ident", 3512, 19, 0, "func"],
              ["Const", 3512, 25, 0, 0]
            ]
          ],
          type: "any",
          dependencies: ["__slice", "__toArray", "__typeof", "GLOBAL", "setImmediate"]
        },
        __defer: {
          helper: [
            "Call",
            9,
            9,
            0,
            [
              "Func",
              9,
              12,
              0,
              0,
              [],
              [],
              [],
              "BlockStatement",
              3515,
              1,
              0,
              0,
              [
                "Func",
                3515,
                1,
                0,
                ["Ident", 3515, 6, 0, "__defer"],
                [],
                ["deferred", "isError", "value"],
                [],
                "BlockStatement",
                3516,
                1,
                0,
                0,
                [
                  "Binary",
                  3516,
                  1,
                  0,
                  ["Ident", 3516, 16, 0, "isError"],
                  "=",
                  "Const",
                  3516,
                  27,
                  0,
                  false
                ],
                [
                  "Binary",
                  3517,
                  1,
                  0,
                  ["Ident", 3517, 16, 0, "value"],
                  "=",
                  "Const",
                  3517,
                  24,
                  0,
                  null
                ],
                [
                  "Binary",
                  3519,
                  1,
                  0,
                  ["Ident", 3519, 16, 0, "deferred"],
                  "=",
                  "Arr",
                  3519,
                  41,
                  0
                ],
                [
                  "Func",
                  3520,
                  1,
                  0,
                  ["Ident", 3520, 8, 0, "complete"],
                  [
                    ["Ident", 3520, 18, 0, "newIsError"],
                    ["Ident", 3520, 31, 0, "newValue"]
                  ],
                  ["funcs"],
                  [],
                  "IfExpression",
                  3521,
                  1,
                  0,
                  ["Ident", 3521, 9, 0, "deferred"],
                  [
                    "BlockExpression",
                    3522,
                    1,
                    0,
                    [
                      "Binary",
                      3522,
                      1,
                      0,
                      ["Ident", 3522, 12, 0, "funcs"],
                      "=",
                      "Ident",
                      3522,
                      29,
                      0,
                      "deferred"
                    ],
                    [
                      "Binary",
                      3523,
                      1,
                      0,
                      ["Ident", 3523, 1, 0, "deferred"],
                      "=",
                      "Const",
                      3523,
                      20,
                      0,
                      null
                    ],
                    [
                      "Binary",
                      3524,
                      1,
                      0,
                      ["Ident", 3524, 1, 0, "isError"],
                      "=",
                      "Ident",
                      3524,
                      20,
                      0,
                      "newIsError"
                    ],
                    [
                      "Binary",
                      3525,
                      1,
                      0,
                      ["Ident", 3525, 1, 0, "value"],
                      "=",
                      "Ident",
                      3525,
                      17,
                      0,
                      "newValue"
                    ],
                    [
                      "IfExpression",
                      3526,
                      1,
                      0,
                      [
                        "Binary",
                        3526,
                        11,
                        0,
                        ["Ident", 3526, 11, 0, "funcs"],
                        ".",
                        "Const",
                        3526,
                        18,
                        0,
                        "length"
                      ],
                      [
                        "Call",
                        3527,
                        1,
                        0,
                        ["Ident", 3527, 1, 0, "setImmediate"],
                        0,
                        [
                          "Func",
                          3527,
                          26,
                          0,
                          0,
                          [],
                          ["_end", "i"],
                          [],
                          "For",
                          1278,
                          1,
                          0,
                          0,
                          [
                            "BlockExpression",
                            1,
                            1,
                            0,
                            [
                              "Binary",
                              1188,
                              38,
                              0,
                              ["Ident", 3528, 16, 0, "i"],
                              "=",
                              "Const",
                              3528,
                              22,
                              0,
                              0
                            ],
                            [
                              "Binary",
                              3528,
                              1,
                              0,
                              ["Ident", 3528, 1, 0, "_end"],
                              "=",
                              "Binary",
                              3528,
                              27,
                              0,
                              ["Ident", 3528, 27, 0, "funcs"],
                              ".",
                              "Const",
                              3528,
                              34,
                              0,
                              "length"
                            ]
                          ],
                          [
                            "Binary",
                            1214,
                            57,
                            0,
                            ["Ident", 3528, 16, 0, "i"],
                            "<",
                            "Ident",
                            3528,
                            1,
                            0,
                            "_end"
                          ],
                          [
                            "Unary",
                            1226,
                            35,
                            0,
                            "++",
                            "Ident",
                            3528,
                            16,
                            0,
                            "i"
                          ],
                          "Call",
                          3529,
                          1,
                          0,
                          [
                            "Binary",
                            3529,
                            1,
                            0,
                            ["Ident", 3529, 1, 0, "funcs"],
                            ".",
                            "Ident",
                            3529,
                            21,
                            0,
                            "i"
                          ],
                          0
                        ]
                      ]
                    ]
                  ]
                ],
                [
                  "Return",
                  3531,
                  1,
                  0,
                  "Obj",
                  3531,
                  1,
                  0,
                  3532,
                  7,
                  null,
                  "promise",
                  [
                    "Obj",
                    3532,
                    15,
                    0,
                    3533,
                    9,
                    null,
                    "then",
                    [
                      "Func",
                      3533,
                      16,
                      0,
                      0,
                      [
                        ["Ident", 3533, 17, 0, "onFulfilled"],
                        ["Ident", 3533, 30, 0, "onRejected"],
                        ["Ident", 3533, 51, 0, "allowSync"]
                      ],
                      ["_ref", "fulfill", "promise", "reject"],
                      [],
                      "BlockStatement",
                      3534,
                      1,
                      0,
                      0,
                      [
                        "IfStatement",
                        3534,
                        1,
                        0,
                        0,
                        [
                          "Binary",
                          43,
                          7,
                          0,
                          ["Ident", 3534, 13, 0, "allowSync"],
                          "!==",
                          "Const",
                          3534,
                          27,
                          0,
                          true
                        ],
                        [
                          "Binary",
                          3535,
                          1,
                          0,
                          ["Ident", 3535, 1, 0, "allowSync"],
                          "=",
                          "Const",
                          3535,
                          26,
                          0
                        ]
                      ],
                      [
                        "Binary",
                        3536,
                        1,
                        0,
                        ["Ident", 3536, 1, 0, "_ref"],
                        "=",
                        "Call",
                        3536,
                        43,
                        0,
                        ["Ident", 3536, 43, 0, "__defer"],
                        0
                      ],
                      [
                        "Binary",
                        254,
                        43,
                        0,
                        ["Ident", 3536, 16, 0, "promise"],
                        "=",
                        "Binary",
                        254,
                        55,
                        0,
                        ["Ident", 3536, 1, 0, "_ref"],
                        ".",
                        "Const",
                        1,
                        1,
                        0,
                        "promise"
                      ],
                      [
                        "Binary",
                        254,
                        43,
                        0,
                        ["Ident", 3536, 24, 0, "fulfill"],
                        "=",
                        "Binary",
                        254,
                        55,
                        0,
                        ["Ident", 3536, 1, 0, "_ref"],
                        ".",
                        "Const",
                        1,
                        1,
                        0,
                        "fulfill"
                      ],
                      [
                        "Binary",
                        254,
                        43,
                        0,
                        ["Ident", 3536, 33, 0, "reject"],
                        "=",
                        "Binary",
                        254,
                        55,
                        0,
                        ["Ident", 3536, 1, 0, "_ref"],
                        ".",
                        "Const",
                        1,
                        1,
                        0,
                        "reject"
                      ],
                      ["Ident", 3536, 1, 0, "_ref"],
                      [
                        "Func",
                        3537,
                        1,
                        0,
                        ["Ident", 3537, 14, 0, "step"],
                        [],
                        ["f", "result"],
                        [],
                        "TryCatch",
                        3537,
                        27,
                        0,
                        0,
                        [
                          "BlockStatement",
                          3538,
                          1,
                          0,
                          0,
                          [
                            "IfStatement",
                            3538,
                            20,
                            0,
                            0,
                            ["Ident", 3538, 23, 0, "isError"],
                            [
                              "Binary",
                              3538,
                              1,
                              0,
                              ["Ident", 3538, 16, 0, "f"],
                              "=",
                              "Ident",
                              3538,
                              37,
                              0,
                              "onRejected"
                            ],
                            "Binary",
                            3538,
                            1,
                            0,
                            ["Ident", 3538, 16, 0, "f"],
                            "=",
                            "Ident",
                            3538,
                            54,
                            0,
                            "onFulfilled"
                          ],
                          [
                            "IfStatement",
                            3539,
                            1,
                            0,
                            0,
                            [
                              "Binary",
                              138,
                              7,
                              0,
                              [
                                "Unary",
                                138,
                                7,
                                0,
                                "typeof",
                                "Ident",
                                3539,
                                28,
                                0,
                                "f"
                              ],
                              "===",
                              "Const",
                              138,
                              25,
                              0,
                              "function"
                            ],
                            [
                              "BlockStatement",
                              3540,
                              1,
                              0,
                              0,
                              [
                                "Binary",
                                3540,
                                1,
                                0,
                                ["Ident", 3540, 18, 0, "result"],
                                "=",
                                "Call",
                                3540,
                                27,
                                0,
                                ["Ident", 3540, 27, 0, "f"],
                                0,
                                ["Ident", 3540, 30, 0, "value"]
                              ],
                              [
                                "IfStatement",
                                3541,
                                1,
                                0,
                                0,
                                [
                                  "Binary",
                                  3541,
                                  17,
                                  0,
                                  ["Ident", 3541, 17, 0, "result"],
                                  "&&",
                                  "Binary",
                                  138,
                                  7,
                                  0,
                                  [
                                    "Unary",
                                    138,
                                    7,
                                    0,
                                    "typeof",
                                    "Binary",
                                    3541,
                                    41,
                                    0,
                                    ["Ident", 3541, 41, 0, "result"],
                                    ".",
                                    "Const",
                                    3541,
                                    49,
                                    0,
                                    "then"
                                  ],
                                  "===",
                                  "Const",
                                  138,
                                  25,
                                  0,
                                  "function"
                                ],
                                [
                                  "Call",
                                  3542,
                                  1,
                                  0,
                                  [
                                    "Binary",
                                    3542,
                                    1,
                                    0,
                                    ["Ident", 3542, 1, 0, "result"],
                                    ".",
                                    "Const",
                                    3542,
                                    24,
                                    0,
                                    "then"
                                  ],
                                  0,
                                  ["Ident", 3542, 29, 0, "fulfill"],
                                  ["Ident", 3542, 37, 0, "reject"],
                                  ["Ident", 3542, 45, 0, "allowSync"]
                                ],
                                "Call",
                                3544,
                                1,
                                0,
                                ["Ident", 3544, 1, 0, "fulfill"],
                                0,
                                ["Ident", 3544, 25, 0, "result"]
                              ]
                            ],
                            "Call",
                            3546,
                            1,
                            0,
                            [
                              "IfExpression",
                              3546,
                              16,
                              0,
                              ["Ident", 3546, 18, 0, "isError"],
                              ["Ident", 3546, 32, 0, "reject"],
                              "Ident",
                              3546,
                              44,
                              0,
                              "fulfill"
                            ],
                            0,
                            ["Ident", 3546, 54, 0, "value"]
                          ]
                        ],
                        ["Ident", 3547, 16, 0, "e"],
                        "Call",
                        3548,
                        1,
                        0,
                        ["Ident", 3548, 1, 0, "reject"],
                        0,
                        ["Ident", 3548, 20, 0, "e"]
                      ],
                      [
                        "IfStatement",
                        3550,
                        1,
                        0,
                        0,
                        ["Ident", 3550, 13, 0, "deferred"],
                        [
                          "Call",
                          3551,
                          1,
                          0,
                          [
                            "Binary",
                            3551,
                            1,
                            0,
                            ["Ident", 3551, 1, 0, "deferred"],
                            ".",
                            "Const",
                            3551,
                            22,
                            0,
                            "push"
                          ],
                          0,
                          ["Ident", 3551, 27, 0, "step"]
                        ],
                        "IfStatement",
                        3550,
                        1,
                        0,
                        0,
                        ["Ident", 3552, 18, 0, "allowSync"],
                        [
                          "Call",
                          3553,
                          1,
                          0,
                          ["Ident", 3553, 1, 0, "step"],
                          0
                        ],
                        "Call",
                        3555,
                        1,
                        0,
                        ["Ident", 3555, 1, 0, "setImmediate"],
                        0,
                        ["Ident", 3555, 27, 0, "step"]
                      ],
                      [
                        "Return",
                        3556,
                        1,
                        0,
                        "Ident",
                        3556,
                        1,
                        0,
                        "promise"
                      ]
                    ],
                    3557,
                    9,
                    null,
                    "sync",
                    [
                      "Func",
                      3557,
                      16,
                      0,
                      0,
                      [],
                      ["result", "state"],
                      [],
                      "BlockStatement",
                      3558,
                      1,
                      0,
                      0,
                      [
                        "Binary",
                        3558,
                        1,
                        0,
                        ["Ident", 3558, 22, 0, "state"],
                        "=",
                        "Const",
                        3558,
                        31,
                        0,
                        0
                      ],
                      [
                        "Binary",
                        3559,
                        1,
                        0,
                        ["Ident", 3559, 22, 0, "result"],
                        "=",
                        "Const",
                        3559,
                        32,
                        0,
                        0
                      ],
                      [
                        "Call",
                        3560,
                        1,
                        0,
                        [
                          "Binary",
                          3560,
                          1,
                          0,
                          ["This", 3560, 1, 0],
                          ".",
                          "Const",
                          3560,
                          12,
                          0,
                          "then"
                        ],
                        0,
                        [
                          "Func",
                          3561,
                          14,
                          0,
                          0,
                          [["Ident", 3561, 15, 0, "ret"]],
                          [],
                          [],
                          "BlockStatement",
                          3562,
                          1,
                          0,
                          0,
                          [
                            "Binary",
                            3562,
                            1,
                            0,
                            ["Ident", 3562, 1, 0, "state"],
                            "=",
                            "Const",
                            3562,
                            24,
                            0,
                            1
                          ],
                          [
                            "Return",
                            3563,
                            1,
                            0,
                            "Binary",
                            3563,
                            1,
                            0,
                            ["Ident", 3563, 1, 0, "result"],
                            "=",
                            "Ident",
                            3563,
                            24,
                            0,
                            "ret"
                          ]
                        ],
                        [
                          "Func",
                          3564,
                          14,
                          0,
                          0,
                          [["Ident", 3564, 15, 0, "err"]],
                          [],
                          [],
                          "BlockStatement",
                          3565,
                          1,
                          0,
                          0,
                          [
                            "Binary",
                            3565,
                            1,
                            0,
                            ["Ident", 3565, 1, 0, "state"],
                            "=",
                            "Const",
                            3565,
                            24,
                            0,
                            2
                          ],
                          [
                            "Return",
                            3566,
                            1,
                            0,
                            "Binary",
                            3566,
                            1,
                            0,
                            ["Ident", 3566, 1, 0, "result"],
                            "=",
                            "Ident",
                            3566,
                            24,
                            0,
                            "err"
                          ]
                        ],
                        ["Const", 3567, 13, 0, true]
                      ],
                      [
                        "Switch",
                        3568,
                        1,
                        0,
                        0,
                        ["Ident", 3568, 17, 0, "state"],
                        3569,
                        16,
                        null,
                        ["Const", 3569, 16, 0, 0],
                        [
                          "Throw",
                          3570,
                          1,
                          0,
                          "Call",
                          3570,
                          18,
                          0,
                          ["Ident", 3570, 18, 0, "Error"],
                          0,
                          ["Const", 3570, 25, 0, "Promise did not execute synchronously"]
                        ],
                        3571,
                        16,
                        null,
                        ["Const", 3571, 16, 0, 1],
                        [
                          "Return",
                          3572,
                          1,
                          0,
                          "Ident",
                          3572,
                          19,
                          0,
                          "result"
                        ],
                        3573,
                        16,
                        null,
                        ["Const", 3573, 16, 0, 2],
                        [
                          "Throw",
                          3574,
                          1,
                          0,
                          "Ident",
                          3574,
                          18,
                          0,
                          "result"
                        ],
                        [
                          "Throw",
                          3576,
                          1,
                          0,
                          "Call",
                          3576,
                          18,
                          0,
                          ["Ident", 3576, 18, 0, "Error"],
                          0,
                          ["Const", 3576, 25, 0, "Unknown state"]
                        ]
                      ]
                    ]
                  ],
                  3578,
                  7,
                  null,
                  "fulfill",
                  [
                    "Func",
                    3578,
                    14,
                    0,
                    0,
                    [["Ident", 3578, 15, 0, "value"]],
                    [],
                    [],
                    "Call",
                    3578,
                    25,
                    0,
                    ["Ident", 3578, 25, 0, "complete"],
                    0,
                    ["Const", 3578, 35, 0, false],
                    ["Ident", 3578, 41, 0, "value"]
                  ],
                  3579,
                  7,
                  null,
                  "reject",
                  [
                    "Func",
                    3579,
                    13,
                    0,
                    0,
                    [["Ident", 3579, 14, 0, "reason"]],
                    [],
                    [],
                    "Call",
                    3579,
                    25,
                    0,
                    ["Ident", 3579, 25, 0, "complete"],
                    0,
                    ["Const", 3579, 35, 0, true],
                    ["Ident", 3579, 40, 0, "reason"]
                  ]
                ]
              ],
              [
                "Binary",
                3581,
                1,
                0,
                [
                  "Binary",
                  3581,
                  1,
                  0,
                  ["Ident", 3581, 1, 0, "__defer"],
                  ".",
                  "Const",
                  3581,
                  11,
                  0,
                  "fulfilled"
                ],
                "=",
                "Func",
                3581,
                25,
                0,
                0,
                [["Ident", 3581, 26, 0, "value"]],
                ["d"],
                [],
                "BlockStatement",
                3582,
                1,
                0,
                0,
                [
                  "Binary",
                  3582,
                  1,
                  0,
                  ["Ident", 3582, 8, 0, "d"],
                  "=",
                  "Call",
                  3582,
                  12,
                  0,
                  ["Ident", 3582, 12, 0, "__defer"],
                  0
                ],
                [
                  "Call",
                  3583,
                  1,
                  0,
                  [
                    "Binary",
                    3583,
                    1,
                    0,
                    ["Ident", 3583, 1, 0, "d"],
                    ".",
                    "Const",
                    3583,
                    7,
                    0,
                    "fulfill"
                  ],
                  0,
                  ["Ident", 3583, 15, 0, "value"]
                ],
                [
                  "Return",
                  3584,
                  1,
                  0,
                  "Binary",
                  3584,
                  1,
                  0,
                  ["Ident", 3584, 1, 0, "d"],
                  ".",
                  "Const",
                  3584,
                  7,
                  0,
                  "promise"
                ]
              ],
              [
                "Binary",
                3585,
                1,
                0,
                [
                  "Binary",
                  3585,
                  1,
                  0,
                  ["Ident", 3585, 1, 0, "__defer"],
                  ".",
                  "Const",
                  3585,
                  11,
                  0,
                  "rejected"
                ],
                "=",
                "Func",
                3585,
                24,
                0,
                0,
                [["Ident", 3585, 25, 0, "reason"]],
                ["d"],
                [],
                "BlockStatement",
                3586,
                1,
                0,
                0,
                [
                  "Binary",
                  3586,
                  1,
                  0,
                  ["Ident", 3586, 8, 0, "d"],
                  "=",
                  "Call",
                  3586,
                  12,
                  0,
                  ["Ident", 3586, 12, 0, "__defer"],
                  0
                ],
                [
                  "Call",
                  3587,
                  1,
                  0,
                  [
                    "Binary",
                    3587,
                    1,
                    0,
                    ["Ident", 3587, 1, 0, "d"],
                    ".",
                    "Const",
                    3587,
                    7,
                    0,
                    "reject"
                  ],
                  0,
                  ["Ident", 3587, 14, 0, "reason"]
                ],
                [
                  "Return",
                  3588,
                  1,
                  0,
                  "Binary",
                  3588,
                  1,
                  0,
                  ["Ident", 3588, 1, 0, "d"],
                  ".",
                  "Const",
                  3588,
                  7,
                  0,
                  "promise"
                ]
              ],
              [
                "Return",
                3589,
                1,
                0,
                "Ident",
                3589,
                1,
                0,
                "__defer"
              ]
            ],
            0
          ],
          type: {
            type: "generic",
            base: "functionBase",
            args: [{
              type: "object",
              pairs: {
                fulfill: {type: "generic", base: "functionBase", args: ["undefined"]},
                promise: {
                  type: "object",
                  pairs: {sync: "function", then: "function"}
                },
                reject: {type: "generic", base: "functionBase", args: ["undefined"]}
              }
            }]
          },
          dependencies: ["__defer", "setImmediate"]
        },
        __generatorToPromise: {
          helper: [
            "Func",
            1902,
            1,
            0,
            0,
            [
              ["Ident", 3591, 42, 0, "generator"],
              ["Ident", 3591, 83, 0, "allowSync"]
            ],
            [],
            [],
            "BlockStatement",
            1902,
            1,
            0,
            0,
            [
              "IfStatement",
              1775,
              10,
              0,
              0,
              [
                "Binary",
                1775,
                13,
                0,
                [
                  "Binary",
                  144,
                  47,
                  0,
                  [
                    "Unary",
                    144,
                    47,
                    0,
                    "typeof",
                    "Ident",
                    3591,
                    42,
                    0,
                    "generator"
                  ],
                  "!==",
                  "Const",
                  144,
                  62,
                  0,
                  "object"
                ],
                "||",
                "Binary",
                144,
                72,
                0,
                ["Ident", 3591, 42, 0, "generator"],
                "===",
                "Const",
                1,
                1,
                0,
                null
              ],
              [
                "Throw",
                1776,
                1,
                0,
                "Call",
                1776,
                14,
                0,
                ["Ident", 1776, 14, 0, "TypeError"],
                0,
                [
                  "Binary",
                  608,
                  7,
                  0,
                  ["Const", 608, 7, 0, "Expected generator to be an Object, got "],
                  "+",
                  "Call",
                  494,
                  49,
                  0,
                  ["Ident", 494, 49, 0, "__typeof"],
                  0,
                  ["Ident", 3591, 42, 0, "generator"]
                ]
              ],
              "BlockStatement",
              1,
              1,
              0,
              0,
              [
                "IfStatement",
                1686,
                1,
                0,
                0,
                [
                  "Binary",
                  657,
                  18,
                  0,
                  [
                    "Unary",
                    138,
                    7,
                    0,
                    "typeof",
                    "Binary",
                    1774,
                    35,
                    0,
                    ["Ident", 3591, 42, 0, "generator"],
                    ".",
                    "Const",
                    3591,
                    56,
                    0,
                    "send"
                  ],
                  "!==",
                  "Const",
                  138,
                  25,
                  0,
                  "function"
                ],
                [
                  "Throw",
                  1687,
                  1,
                  0,
                  "Call",
                  1687,
                  18,
                  0,
                  ["Ident", 1687, 18, 0, "TypeError"],
                  0,
                  [
                    "Binary",
                    608,
                    7,
                    0,
                    ["Const", 608, 7, 0, "Expected generator.send to be a Function, got "],
                    "+",
                    "Call",
                    494,
                    49,
                    0,
                    ["Ident", 494, 49, 0, "__typeof"],
                    0,
                    [
                      "Binary",
                      1774,
                      35,
                      0,
                      ["Ident", 3591, 42, 0, "generator"],
                      ".",
                      "Const",
                      3591,
                      56,
                      0,
                      "send"
                    ]
                  ]
                ]
              ],
              [
                "IfStatement",
                1686,
                1,
                0,
                0,
                [
                  "Binary",
                  657,
                  18,
                  0,
                  [
                    "Unary",
                    138,
                    7,
                    0,
                    "typeof",
                    "Binary",
                    1774,
                    35,
                    0,
                    ["Ident", 3591, 42, 0, "generator"],
                    ".",
                    "Const",
                    3591,
                    68,
                    0,
                    "throw"
                  ],
                  "!==",
                  "Const",
                  138,
                  25,
                  0,
                  "function"
                ],
                [
                  "Throw",
                  1687,
                  1,
                  0,
                  "Call",
                  1687,
                  18,
                  0,
                  ["Ident", 1687, 18, 0, "TypeError"],
                  0,
                  [
                    "Binary",
                    608,
                    7,
                    0,
                    ["Const", 608, 7, 0, "Expected generator.throw to be a Function, got "],
                    "+",
                    "Call",
                    494,
                    49,
                    0,
                    ["Ident", 494, 49, 0, "__typeof"],
                    0,
                    [
                      "Binary",
                      1774,
                      35,
                      0,
                      ["Ident", 3591, 42, 0, "generator"],
                      ".",
                      "Const",
                      3591,
                      68,
                      0,
                      "throw"
                    ]
                  ]
                ]
              ]
            ],
            [
              "IfStatement",
              1693,
              13,
              0,
              0,
              [
                "Binary",
                1693,
                16,
                0,
                ["Ident", 3591, 83, 0, "allowSync"],
                "==",
                "Const",
                1,
                1,
                0,
                null
              ],
              [
                "Binary",
                1694,
                1,
                0,
                ["Ident", 3591, 83, 0, "allowSync"],
                "=",
                "Const",
                1,
                1,
                0,
                false
              ],
              "IfStatement",
              1686,
              1,
              0,
              0,
              [
                "Binary",
                655,
                18,
                0,
                [
                  "Unary",
                  135,
                  7,
                  0,
                  "typeof",
                  "Ident",
                  3591,
                  83,
                  0,
                  "allowSync"
                ],
                "!==",
                "Const",
                135,
                25,
                0,
                "boolean"
              ],
              [
                "Throw",
                1687,
                1,
                0,
                "Call",
                1687,
                18,
                0,
                ["Ident", 1687, 18, 0, "TypeError"],
                0,
                [
                  "Binary",
                  608,
                  7,
                  0,
                  ["Const", 608, 7, 0, "Expected allowSync to be a Boolean, got "],
                  "+",
                  "Call",
                  494,
                  49,
                  0,
                  ["Ident", 494, 49, 0, "__typeof"],
                  0,
                  ["Ident", 3591, 83, 0, "allowSync"]
                ]
              ]
            ],
            [
              "Func",
              3592,
              1,
              0,
              ["Ident", 3592, 6, 0, "continuer"],
              [
                ["Ident", 3592, 17, 0, "verb"],
                ["Ident", 3592, 22, 0, "arg"]
              ],
              ["item"],
              [],
              "BlockStatement",
              3593,
              1,
              0,
              0,
              [
                "TryCatch",
                3594,
                1,
                0,
                0,
                [
                  "Binary",
                  3595,
                  1,
                  0,
                  ["Ident", 3595, 1, 0, "item"],
                  "=",
                  "Call",
                  3595,
                  14,
                  0,
                  [
                    "Binary",
                    3595,
                    14,
                    0,
                    ["Ident", 3595, 14, 0, "generator"],
                    ".",
                    "Ident",
                    3595,
                    25,
                    0,
                    "verb"
                  ],
                  0,
                  ["Ident", 3595, 31, 0, "arg"]
                ],
                ["Ident", 3596, 10, 0, "e"],
                "Return",
                3597,
                1,
                0,
                "Call",
                3597,
                13,
                0,
                [
                  "Binary",
                  3597,
                  13,
                  0,
                  ["Ident", 3597, 13, 0, "__defer"],
                  ".",
                  "Const",
                  3597,
                  22,
                  0,
                  "rejected"
                ],
                0,
                ["Ident", 3597, 31, 0, "e"]
              ],
              [
                "IfStatement",
                3598,
                1,
                0,
                0,
                [
                  "Binary",
                  3598,
                  7,
                  0,
                  ["Ident", 3598, 7, 0, "item"],
                  ".",
                  "Const",
                  3598,
                  13,
                  0,
                  "done"
                ],
                [
                  "Return",
                  3599,
                  1,
                  0,
                  "Call",
                  3599,
                  1,
                  0,
                  [
                    "Binary",
                    3599,
                    1,
                    0,
                    ["Ident", 3599, 1, 0, "__defer"],
                    ".",
                    "Const",
                    3599,
                    15,
                    0,
                    "fulfilled"
                  ],
                  0,
                  [
                    "Binary",
                    3599,
                    25,
                    0,
                    ["Ident", 3599, 25, 0, "item"],
                    ".",
                    "Const",
                    3599,
                    30,
                    0,
                    "value"
                  ]
                ],
                "Return",
                3601,
                1,
                0,
                "Call",
                3601,
                1,
                0,
                [
                  "Binary",
                  3601,
                  1,
                  0,
                  [
                    "Binary",
                    3601,
                    1,
                    0,
                    ["Ident", 3601, 1, 0, "item"],
                    ".",
                    "Const",
                    3601,
                    12,
                    0,
                    "value"
                  ],
                  ".",
                  "Const",
                  3601,
                  18,
                  0,
                  "then"
                ],
                0,
                ["Ident", 3601, 23, 0, "callback"],
                ["Ident", 3601, 32, 0, "errback"],
                ["Ident", 3601, 41, 0, "allowSync"]
              ]
            ],
            [
              "Func",
              3602,
              1,
              0,
              ["Ident", 3602, 6, 0, "callback"],
              [["Ident", 3602, 16, 0, "value"]],
              [],
              [],
              "Return",
              3602,
              25,
              0,
              "Call",
              3602,
              25,
              0,
              ["Ident", 3602, 25, 0, "continuer"],
              0,
              ["Const", 3602, 37, 0, "send"],
              ["Ident", 3602, 42, 0, "value"]
            ],
            [
              "Func",
              3603,
              1,
              0,
              ["Ident", 3603, 6, 0, "errback"],
              [["Ident", 3603, 15, 0, "value"]],
              [],
              [],
              "Return",
              3603,
              24,
              0,
              "Call",
              3603,
              24,
              0,
              ["Ident", 3603, 24, 0, "continuer"],
              0,
              ["Const", 3603, 36, 0, "throw"],
              ["Ident", 3603, 42, 0, "value"]
            ],
            [
              "Return",
              3604,
              1,
              0,
              "Call",
              3604,
              1,
              0,
              ["Ident", 3604, 1, 0, "callback"],
              0,
              ["Const", 3604, 12, 0]
            ]
          ],
          type: "function",
          dependencies: ["__defer", "__generatorToPromise", "__typeof"]
        },
        __promise: {
          helper: [
            "Func",
            1902,
            1,
            0,
            0,
            [
              ["Ident", 3605, 36, 0, "value"],
              ["Ident", 3605, 43, 0, "allowSync"]
            ],
            ["factory"],
            [],
            "BlockStatement",
            1902,
            1,
            0,
            0,
            [
              "IfStatement",
              1693,
              13,
              0,
              0,
              [
                "Binary",
                1693,
                16,
                0,
                ["Ident", 3605, 43, 0, "allowSync"],
                "==",
                "Const",
                1,
                1,
                0,
                null
              ],
              [
                "Binary",
                1694,
                1,
                0,
                ["Ident", 3605, 43, 0, "allowSync"],
                "=",
                "Const",
                1,
                1,
                0,
                false
              ],
              "IfStatement",
              1686,
              1,
              0,
              0,
              [
                "Binary",
                655,
                18,
                0,
                [
                  "Unary",
                  135,
                  7,
                  0,
                  "typeof",
                  "Ident",
                  3605,
                  43,
                  0,
                  "allowSync"
                ],
                "!==",
                "Const",
                135,
                25,
                0,
                "boolean"
              ],
              [
                "Throw",
                1687,
                1,
                0,
                "Call",
                1687,
                18,
                0,
                ["Ident", 1687, 18, 0, "TypeError"],
                0,
                [
                  "Binary",
                  608,
                  7,
                  0,
                  ["Const", 608, 7, 0, "Expected allowSync to be a Boolean, got "],
                  "+",
                  "Call",
                  494,
                  49,
                  0,
                  ["Ident", 494, 49, 0, "__typeof"],
                  0,
                  ["Ident", 3605, 43, 0, "allowSync"]
                ]
              ]
            ],
            [
              "IfStatement",
              3606,
              1,
              0,
              0,
              [
                "Binary",
                138,
                7,
                0,
                [
                  "Unary",
                  138,
                  7,
                  0,
                  "typeof",
                  "Ident",
                  3606,
                  18,
                  0,
                  "value"
                ],
                "===",
                "Const",
                138,
                25,
                0,
                "function"
              ],
              [
                "BlockStatement",
                3607,
                1,
                0,
                0,
                [
                  "Binary",
                  3607,
                  1,
                  0,
                  ["Ident", 3607, 8, 0, "factory"],
                  "=",
                  "Func",
                  3607,
                  16,
                  0,
                  0,
                  [],
                  [],
                  [],
                  "Return",
                  3607,
                  21,
                  0,
                  "Call",
                  3607,
                  21,
                  0,
                  ["Ident", 3607, 21, 0, "__generatorToPromise"],
                  0,
                  [
                    "Call",
                    3607,
                    45,
                    0,
                    [
                      "Binary",
                      3607,
                      45,
                      0,
                      ["Ident", 3607, 45, 0, "value"],
                      ".",
                      "Const",
                      3607,
                      45,
                      0,
                      "apply"
                    ],
                    0,
                    ["This", 3607, 52, 0],
                    ["Arguments", 3607, 61, 0]
                  ]
                ],
                [
                  "Binary",
                  3608,
                  1,
                  0,
                  [
                    "Binary",
                    3608,
                    1,
                    0,
                    ["Ident", 3608, 1, 0, "factory"],
                    ".",
                    "Const",
                    3608,
                    13,
                    0,
                    "sync"
                  ],
                  "=",
                  "Func",
                  3608,
                  22,
                  0,
                  0,
                  [],
                  [],
                  [],
                  "Return",
                  3608,
                  24,
                  0,
                  "Call",
                  3608,
                  24,
                  0,
                  [
                    "Binary",
                    3608,
                    24,
                    0,
                    [
                      "Call",
                      3608,
                      24,
                      0,
                      ["Ident", 3608, 24, 0, "__generatorToPromise"],
                      0,
                      [
                        "Call",
                        3608,
                        48,
                        0,
                        [
                          "Binary",
                          3608,
                          48,
                          0,
                          ["Ident", 3608, 48, 0, "value"],
                          ".",
                          "Const",
                          3608,
                          48,
                          0,
                          "apply"
                        ],
                        0,
                        ["This", 3608, 55, 0],
                        ["Arguments", 3608, 64, 0]
                      ],
                      ["Const", 3608, 75, 0, true]
                    ],
                    ".",
                    "Const",
                    3608,
                    82,
                    0,
                    "sync"
                  ],
                  0
                ],
                [
                  "Return",
                  3609,
                  1,
                  0,
                  "Ident",
                  3609,
                  1,
                  0,
                  "factory"
                ]
              ],
              "Return",
              3611,
              1,
              0,
              "Call",
              3611,
              1,
              0,
              ["Ident", 3611, 1, 0, "__generatorToPromise"],
              0,
              ["Ident", 3611, 28, 0, "value"],
              ["Ident", 3611, 34, 0, "allowSync"]
            ]
          ],
          type: "function",
          dependencies: ["__generatorToPromise", "__promise", "__toArray", "__typeof"]
        },
        __fromPromise: {
          helper: [
            "Func",
            1902,
            1,
            0,
            0,
            [["Ident", 3649, 34, 0, "promise"]],
            [],
            [],
            "BlockStatement",
            1902,
            1,
            0,
            0,
            [
              "IfStatement",
              1775,
              10,
              0,
              0,
              [
                "Binary",
                1775,
                13,
                0,
                [
                  "Binary",
                  144,
                  47,
                  0,
                  [
                    "Unary",
                    144,
                    47,
                    0,
                    "typeof",
                    "Ident",
                    3649,
                    34,
                    0,
                    "promise"
                  ],
                  "!==",
                  "Const",
                  144,
                  62,
                  0,
                  "object"
                ],
                "||",
                "Binary",
                144,
                72,
                0,
                ["Ident", 3649, 34, 0, "promise"],
                "===",
                "Const",
                1,
                1,
                0,
                null
              ],
              [
                "Throw",
                1776,
                1,
                0,
                "Call",
                1776,
                14,
                0,
                ["Ident", 1776, 14, 0, "TypeError"],
                0,
                [
                  "Binary",
                  608,
                  7,
                  0,
                  ["Const", 608, 7, 0, "Expected promise to be an Object, got "],
                  "+",
                  "Call",
                  494,
                  49,
                  0,
                  ["Ident", 494, 49, 0, "__typeof"],
                  0,
                  ["Ident", 3649, 34, 0, "promise"]
                ]
              ],
              "IfStatement",
              1686,
              1,
              0,
              0,
              [
                "Binary",
                657,
                18,
                0,
                [
                  "Unary",
                  138,
                  7,
                  0,
                  "typeof",
                  "Binary",
                  1774,
                  35,
                  0,
                  ["Ident", 3649, 34, 0, "promise"],
                  ".",
                  "Const",
                  3649,
                  46,
                  0,
                  "then"
                ],
                "!==",
                "Const",
                138,
                25,
                0,
                "function"
              ],
              [
                "Throw",
                1687,
                1,
                0,
                "Call",
                1687,
                18,
                0,
                ["Ident", 1687, 18, 0, "TypeError"],
                0,
                [
                  "Binary",
                  608,
                  7,
                  0,
                  ["Const", 608, 7, 0, "Expected promise.then to be a Function, got "],
                  "+",
                  "Call",
                  494,
                  49,
                  0,
                  ["Ident", 494, 49, 0, "__typeof"],
                  0,
                  [
                    "Binary",
                    1774,
                    35,
                    0,
                    ["Ident", 3649, 34, 0, "promise"],
                    ".",
                    "Const",
                    3649,
                    46,
                    0,
                    "then"
                  ]
                ]
              ]
            ],
            [
              "Return",
              3649,
              65,
              0,
              "Func",
              3649,
              65,
              0,
              0,
              [["Ident", 3649, 66, 0, "callback"]],
              [],
              [],
              "Call",
              3650,
              1,
              0,
              [
                "Binary",
                3650,
                1,
                0,
                ["Ident", 3650, 1, 0, "promise"],
                ".",
                "Const",
                3650,
                11,
                0,
                "then"
              ],
              0,
              [
                "Func",
                3651,
                6,
                0,
                0,
                [["Ident", 3651, 7, 0, "value"]],
                [],
                [],
                "Return",
                3651,
                16,
                0,
                "Call",
                3651,
                16,
                0,
                ["Ident", 3651, 16, 0, "setImmediate"],
                0,
                ["Ident", 3651, 31, 0, "callback"],
                ["Const", 3651, 40, 0, null],
                ["Ident", 3651, 46, 0, "value"]
              ],
              [
                "Func",
                3652,
                6,
                0,
                0,
                [["Ident", 3652, 7, 0, "reason"]],
                [],
                [],
                "Return",
                3652,
                17,
                0,
                "Call",
                3652,
                17,
                0,
                ["Ident", 3652, 17, 0, "setImmediate"],
                0,
                ["Ident", 3652, 32, 0, "callback"],
                ["Ident", 3652, 41, 0, "reason"]
              ]
            ]
          ],
          type: {
            type: "generic",
            base: "functionBase",
            args: [{type: "generic", base: "functionBase", args: ["undefined"]}]
          },
          dependencies: ["__fromPromise", "__typeof", "setImmediate"]
        },
        __toPromise: {
          helper: [
            "Func",
            1902,
            1,
            0,
            0,
            [
              ["Ident", 3659, 32, 0, "func"],
              ["Ident", 3659, 43, 0, "context"],
              ["Ident", 3659, 52, 0, "args"]
            ],
            ["d"],
            [],
            "BlockStatement",
            1902,
            1,
            0,
            0,
            [
              "IfStatement",
              1686,
              1,
              0,
              0,
              [
                "Binary",
                657,
                18,
                0,
                [
                  "Unary",
                  138,
                  7,
                  0,
                  "typeof",
                  "Ident",
                  3659,
                  32,
                  0,
                  "func"
                ],
                "!==",
                "Const",
                138,
                25,
                0,
                "function"
              ],
              [
                "Throw",
                1687,
                1,
                0,
                "Call",
                1687,
                18,
                0,
                ["Ident", 1687, 18, 0, "TypeError"],
                0,
                [
                  "Binary",
                  608,
                  7,
                  0,
                  ["Const", 608, 7, 0, "Expected func to be a Function, got "],
                  "+",
                  "Call",
                  494,
                  49,
                  0,
                  ["Ident", 494, 49, 0, "__typeof"],
                  0,
                  ["Ident", 3659, 32, 0, "func"]
                ]
              ]
            ],
            [
              "Binary",
              3660,
              1,
              0,
              ["Ident", 3660, 6, 0, "d"],
              "=",
              "Call",
              3660,
              10,
              0,
              ["Ident", 3660, 10, 0, "__defer"],
              0
            ],
            [
              "Call",
              3661,
              1,
              0,
              [
                "Binary",
                3661,
                1,
                0,
                ["Ident", 3661, 1, 0, "func"],
                ".",
                "Const",
                3661,
                1,
                0,
                "apply"
              ],
              0,
              ["Ident", 3661, 9, 0, "context"],
              [
                "Call",
                3661,
                1,
                0,
                [
                  "Binary",
                  3661,
                  1,
                  0,
                  [
                    "Call",
                    3661,
                    21,
                    0,
                    ["Ident", 3661, 21, 0, "__toArray"],
                    0,
                    ["Ident", 3661, 21, 0, "args"]
                  ],
                  ".",
                  "Const",
                  3661,
                  1,
                  0,
                  "concat"
                ],
                0,
                [
                  "Arr",
                  3661,
                  28,
                  0,
                  [
                    "Func",
                    3661,
                    28,
                    0,
                    0,
                    [
                      ["Ident", 3661, 29, 0, "err"],
                      ["Ident", 3661, 33, 0, "value"]
                    ],
                    [],
                    [],
                    "IfExpression",
                    3662,
                    1,
                    0,
                    [
                      "Binary",
                      49,
                      7,
                      0,
                      ["Ident", 3662, 7, 0, "err"],
                      "!=",
                      "Const",
                      1,
                      1,
                      0,
                      null
                    ],
                    [
                      "Call",
                      3663,
                      1,
                      0,
                      [
                        "Binary",
                        3663,
                        1,
                        0,
                        ["Ident", 3663, 1, 0, "d"],
                        ".",
                        "Const",
                        3663,
                        9,
                        0,
                        "reject"
                      ],
                      0,
                      ["Ident", 3663, 16, 0, "err"]
                    ],
                    "Call",
                    3665,
                    1,
                    0,
                    [
                      "Binary",
                      3665,
                      1,
                      0,
                      ["Ident", 3665, 1, 0, "d"],
                      ".",
                      "Const",
                      3665,
                      9,
                      0,
                      "fulfill"
                    ],
                    0,
                    ["Ident", 3665, 17, 0, "value"]
                  ]
                ]
              ]
            ],
            [
              "Return",
              3666,
              1,
              0,
              "Binary",
              3666,
              1,
              0,
              ["Ident", 3666, 1, 0, "d"],
              ".",
              "Const",
              3666,
              5,
              0,
              "promise"
            ]
          ],
          type: {
            type: "generic",
            base: "functionBase",
            args: [{
              type: "object",
              pairs: {sync: "function", then: "function"}
            }]
          },
          dependencies: ["__defer", "__toArray", "__toPromise", "__typeof"]
        },
        __generator: {
          helper: [
            "Func",
            3696,
            30,
            0,
            0,
            [["Ident", 3696, 31, 0, "func"]],
            [],
            [],
            "Return",
            3696,
            41,
            0,
            "Func",
            3696,
            41,
            0,
            0,
            [],
            ["_this", "data"],
            [],
            "BlockStatement",
            3697,
            1,
            0,
            0,
            [
              "Binary",
              3697,
              1,
              0,
              ["Ident", 3697, 1, 0, "_this"],
              "=",
              "This",
              3697,
              1,
              0
            ],
            [
              "Binary",
              3697,
              1,
              0,
              ["Ident", 3697, 14, 0, "data"],
              "=",
              "Arr",
              3697,
              32,
              0,
              ["This", 3697, 34, 0],
              [
                "Call",
                3697,
                39,
                0,
                [
                  "Binary",
                  3697,
                  39,
                  0,
                  ["Ident", 3697, 39, 0, "__slice"],
                  ".",
                  "Const",
                  3697,
                  48,
                  0,
                  "call"
                ],
                0,
                ["Arguments", 3697, 53, 0]
              ]
            ],
            [
              "Return",
              3698,
              1,
              0,
              "Obj",
              3698,
              1,
              0,
              3699,
              5,
              null,
              "iterator",
              [
                "Func",
                3699,
                13,
                0,
                0,
                [],
                [],
                [],
                "Return",
                3699,
                18,
                0,
                "This",
                3699,
                18,
                0
              ],
              3700,
              5,
              null,
              "send",
              [
                "Func",
                3700,
                9,
                0,
                0,
                [],
                ["tmp"],
                [],
                "Return",
                3701,
                1,
                0,
                "Obj",
                3701,
                1,
                0,
                3702,
                10,
                null,
                "done",
                ["Const", 3702, 9, 0, true],
                3703,
                9,
                null,
                "value",
                [
                  "IfExpression",
                  3703,
                  15,
                  0,
                  ["Ident", 3703, 18, 0, "data"],
                  [
                    "BlockExpression",
                    3704,
                    1,
                    0,
                    [
                      "Binary",
                      3704,
                      1,
                      0,
                      ["Ident", 3704, 14, 0, "tmp"],
                      "=",
                      "Ident",
                      3704,
                      20,
                      0,
                      "data"
                    ],
                    [
                      "Binary",
                      3705,
                      1,
                      0,
                      ["Ident", 3705, 1, 0, "data"],
                      "=",
                      "Const",
                      3705,
                      18,
                      0,
                      null
                    ],
                    [
                      "Call",
                      3706,
                      1,
                      0,
                      [
                        "Binary",
                        3706,
                        1,
                        0,
                        ["Ident", 3706, 1, 0, "func"],
                        ".",
                        "Const",
                        3706,
                        16,
                        0,
                        "apply"
                      ],
                      0,
                      [
                        "Binary",
                        3706,
                        22,
                        0,
                        ["Ident", 3706, 22, 0, "tmp"],
                        ".",
                        "Const",
                        3706,
                        26,
                        0,
                        0
                      ],
                      [
                        "Binary",
                        3706,
                        29,
                        0,
                        ["Ident", 3706, 29, 0, "tmp"],
                        ".",
                        "Const",
                        3706,
                        34,
                        0,
                        1
                      ]
                    ]
                  ],
                  "Const",
                  3708,
                  1,
                  0
                ]
              ],
              3710,
              5,
              null,
              "next",
              [
                "Func",
                3710,
                9,
                0,
                0,
                [],
                [],
                [],
                "Return",
                3710,
                14,
                0,
                "Call",
                3710,
                14,
                0,
                [
                  "Binary",
                  3710,
                  14,
                  0,
                  ["This", 3710, 14, 0],
                  ".",
                  "Const",
                  3710,
                  16,
                  0,
                  "send"
                ],
                0
              ],
              3711,
              5,
              null,
              "throw",
              [
                "Func",
                3711,
                10,
                0,
                0,
                [["Ident", 3711, 11, 0, "err"]],
                [],
                [],
                "BlockStatement",
                3712,
                1,
                0,
                0,
                [
                  "Binary",
                  3712,
                  1,
                  0,
                  ["Ident", 3712, 1, 0, "data"],
                  "=",
                  "Const",
                  3712,
                  14,
                  0,
                  null
                ],
                [
                  "Throw",
                  3713,
                  1,
                  0,
                  "Ident",
                  3713,
                  12,
                  0,
                  "err"
                ]
              ]
            ]
          ],
          type: {
            type: "generic",
            base: "functionBase",
            args: [{
              type: "generic",
              base: "functionBase",
              args: [{
                type: "object",
                pairs: {
                  iterator: "function",
                  next: "function",
                  send: {
                    type: "generic",
                    base: "functionBase",
                    args: [{type: "object", pairs: {done: "boolean"}}]
                  },
                  "throw": {type: "generic", base: "functionBase", args: ["none"]}
                }
              }]
            }]
          },
          dependencies: ["__generator", "__slice"]
        },
        __somePromise: {
          helper: [
            "Func",
            1902,
            1,
            0,
            0,
            [["Ident", 3716, 34, 0, "promises"]],
            ["defer", "i"],
            [],
            "BlockStatement",
            1902,
            1,
            0,
            0,
            [
              "IfStatement",
              1686,
              1,
              0,
              0,
              [
                "Unary",
                659,
                18,
                0,
                "!",
                "Call",
                141,
                146,
                0,
                ["Ident", 141, 146, 0, "__isArray"],
                0,
                ["Ident", 3716, 34, 0, "promises"]
              ],
              [
                "Throw",
                1687,
                1,
                0,
                "Call",
                1687,
                18,
                0,
                ["Ident", 1687, 18, 0, "TypeError"],
                0,
                [
                  "Binary",
                  608,
                  7,
                  0,
                  ["Const", 608, 7, 0, "Expected promises to be an Array, got "],
                  "+",
                  "Call",
                  494,
                  49,
                  0,
                  ["Ident", 494, 49, 0, "__typeof"],
                  0,
                  ["Ident", 3716, 34, 0, "promises"]
                ]
              ]
            ],
            [
              "Binary",
              3717,
              1,
              0,
              ["Ident", 3717, 6, 0, "defer"],
              "=",
              "Call",
              3717,
              14,
              0,
              ["Ident", 3717, 14, 0, "__defer"],
              0
            ],
            [
              "Binary",
              3718,
              1,
              0,
              ["Ident", 3718, 14, 0, "i"],
              "=",
              "Binary",
              3718,
              18,
              0,
              ["Ident", 3718, 18, 0, "promises"],
              ".",
              "Const",
              3718,
              28,
              0,
              "length"
            ],
            [
              "For",
              1118,
              1,
              0,
              0,
              0,
              [
                "Unary",
                3719,
                8,
                0,
                "--post",
                "Ident",
                3719,
                18,
                0,
                "i"
              ],
              0,
              "Call",
              3720,
              1,
              0,
              [
                "Binary",
                3720,
                1,
                0,
                [
                  "Binary",
                  3720,
                  1,
                  0,
                  ["Ident", 3720, 1, 0, "promises"],
                  ".",
                  "Ident",
                  3720,
                  14,
                  0,
                  "i"
                ],
                ".",
                "Const",
                3720,
                17,
                0,
                "then"
              ],
              0,
              [
                "Binary",
                3720,
                22,
                0,
                ["Ident", 3720, 22, 0, "defer"],
                ".",
                "Const",
                3720,
                28,
                0,
                "fulfill"
              ],
              [
                "Binary",
                3720,
                36,
                0,
                ["Ident", 3720, 36, 0, "defer"],
                ".",
                "Const",
                3720,
                43,
                0,
                "reject"
              ]
            ],
            [
              "Return",
              3721,
              1,
              0,
              "Binary",
              3721,
              1,
              0,
              ["Ident", 3721, 1, 0, "defer"],
              ".",
              "Const",
              3721,
              9,
              0,
              "promise"
            ]
          ],
          type: {
            type: "generic",
            base: "functionBase",
            args: [{
              type: "object",
              pairs: {sync: "function", then: "function"}
            }]
          },
          dependencies: ["__defer", "__isArray", "__somePromise", "__typeof"]
        },
        __everyPromise: {
          helper: [
            "Func",
            1902,
            1,
            0,
            0,
            [["Ident", 3731, 35, 0, "promises"]],
            [
              "defer",
              "i",
              "isArray",
              "k",
              "remaining",
              "result",
              "v"
            ],
            [],
            "BlockStatement",
            1902,
            1,
            0,
            0,
            [
              "IfStatement",
              1686,
              1,
              0,
              0,
              [
                "Binary",
                661,
                18,
                0,
                [
                  "Binary",
                  144,
                  47,
                  0,
                  [
                    "Unary",
                    144,
                    47,
                    0,
                    "typeof",
                    "Ident",
                    3731,
                    35,
                    0,
                    "promises"
                  ],
                  "!==",
                  "Const",
                  144,
                  62,
                  0,
                  "object"
                ],
                "||",
                "Binary",
                43,
                7,
                0,
                ["Ident", 3731, 35, 0, "promises"],
                "===",
                "Const",
                1,
                1,
                0,
                null
              ],
              [
                "Throw",
                1687,
                1,
                0,
                "Call",
                1687,
                18,
                0,
                ["Ident", 1687, 18, 0, "TypeError"],
                0,
                [
                  "Binary",
                  608,
                  7,
                  0,
                  ["Const", 608, 7, 0, "Expected promises to be an Object, got "],
                  "+",
                  "Call",
                  494,
                  49,
                  0,
                  ["Ident", 494, 49, 0, "__typeof"],
                  0,
                  ["Ident", 3731, 35, 0, "promises"]
                ]
              ]
            ],
            [
              "Binary",
              3732,
              1,
              0,
              ["Ident", 3732, 6, 0, "isArray"],
              "=",
              "Call",
              141,
              146,
              0,
              ["Ident", 141, 146, 0, "__isArray"],
              0,
              ["Ident", 3732, 27, 0, "promises"]
            ],
            [
              "Binary",
              3733,
              1,
              0,
              ["Ident", 3733, 6, 0, "defer"],
              "=",
              "Call",
              3733,
              14,
              0,
              ["Ident", 3733, 14, 0, "__defer"],
              0
            ],
            [
              "IfStatement",
              3734,
              15,
              0,
              0,
              ["Ident", 3734, 18, 0, "isArray"],
              [
                "Binary",
                3734,
                1,
                0,
                ["Ident", 3734, 6, 0, "result"],
                "=",
                "Arr",
                3734,
                32,
                0
              ],
              "Binary",
              3734,
              1,
              0,
              ["Ident", 3734, 6, 0, "result"],
              "=",
              "Obj",
              3734,
              40,
              0
            ],
            [
              "Binary",
              3735,
              1,
              0,
              ["Ident", 3735, 14, 0, "remaining"],
              "=",
              "Const",
              3735,
              27,
              0,
              0
            ],
            [
              "Func",
              3736,
              1,
              0,
              ["Ident", 3736, 6, 0, "handle"],
              [
                ["Ident", 3736, 14, 0, "key"],
                ["Ident", 3736, 18, 0, "promise"]
              ],
              [],
              [],
              "Return",
              3737,
              1,
              0,
              "Call",
              3737,
              1,
              0,
              [
                "Binary",
                3737,
                1,
                0,
                ["Ident", 3737, 1, 0, "promise"],
                ".",
                "Const",
                3737,
                13,
                0,
                "then"
              ],
              0,
              [
                "Func",
                3738,
                8,
                0,
                0,
                [["Ident", 3738, 9, 0, "value"]],
                [],
                [],
                "BlockExpression",
                3739,
                1,
                0,
                [
                  "Binary",
                  3739,
                  1,
                  0,
                  [
                    "Binary",
                    3739,
                    1,
                    0,
                    ["Ident", 3739, 1, 0, "result"],
                    ".",
                    "Ident",
                    3739,
                    16,
                    0,
                    "key"
                  ],
                  "=",
                  "Ident",
                  3739,
                  23,
                  0,
                  "value"
                ],
                [
                  "IfExpression",
                  3740,
                  1,
                  0,
                  [
                    "Binary",
                    3740,
                    11,
                    0,
                    [
                      "Unary",
                      899,
                      11,
                      0,
                      "--",
                      "Ident",
                      3740,
                      13,
                      0,
                      "remaining"
                    ],
                    "===",
                    "Const",
                    3740,
                    32,
                    0,
                    0
                  ],
                  [
                    "Call",
                    3741,
                    1,
                    0,
                    [
                      "Binary",
                      3741,
                      1,
                      0,
                      ["Ident", 3741, 1, 0, "defer"],
                      ".",
                      "Const",
                      3741,
                      17,
                      0,
                      "fulfill"
                    ],
                    0,
                    ["Ident", 3741, 25, 0, "result"]
                  ]
                ]
              ],
              [
                "Binary",
                3742,
                7,
                0,
                ["Ident", 3742, 7, 0, "defer"],
                ".",
                "Const",
                3742,
                13,
                0,
                "reject"
              ]
            ],
            [
              "IfStatement",
              3743,
              1,
              0,
              0,
              ["Ident", 3743, 5, 0, "isArray"],
              [
                "BlockStatement",
                3744,
                1,
                0,
                0,
                [
                  "Binary",
                  3744,
                  1,
                  0,
                  ["Ident", 3744, 16, 0, "i"],
                  "=",
                  "Binary",
                  3744,
                  20,
                  0,
                  ["Ident", 3744, 20, 0, "promises"],
                  ".",
                  "Const",
                  3744,
                  30,
                  0,
                  "length"
                ],
                [
                  "Binary",
                  3745,
                  1,
                  0,
                  ["Ident", 3745, 1, 0, "remaining"],
                  "=",
                  "Ident",
                  3745,
                  17,
                  0,
                  "i"
                ],
                [
                  "For",
                  1118,
                  1,
                  0,
                  0,
                  0,
                  [
                    "Unary",
                    3746,
                    10,
                    0,
                    "--post",
                    "Ident",
                    3746,
                    20,
                    0,
                    "i"
                  ],
                  0,
                  "Call",
                  3747,
                  1,
                  0,
                  ["Ident", 3747, 1, 0, "handle"],
                  0,
                  ["Ident", 3747, 14, 0, "i"],
                  [
                    "Binary",
                    3747,
                    16,
                    0,
                    ["Ident", 3747, 16, 0, "promises"],
                    ".",
                    "Ident",
                    3747,
                    26,
                    0,
                    "i"
                  ]
                ]
              ],
              "ForIn",
              3749,
              1,
              0,
              0,
              ["Ident", 3749, 8, 0, "k"],
              ["Ident", 3749, 16, 0, "promises"],
              "IfStatement",
              1572,
              1,
              0,
              0,
              [
                "Call",
                646,
                7,
                0,
                [
                  "Binary",
                  646,
                  7,
                  0,
                  ["Ident", 646, 7, 0, "__owns"],
                  ".",
                  "Const",
                  646,
                  7,
                  0,
                  "call"
                ],
                0,
                ["Ident", 3749, 16, 0, "promises"],
                ["Ident", 3749, 8, 0, "k"]
              ],
              [
                "BlockStatement",
                1550,
                1,
                0,
                0,
                [
                  "Binary",
                  1530,
                  52,
                  0,
                  ["Ident", 3749, 11, 0, "v"],
                  "=",
                  "Binary",
                  1530,
                  65,
                  0,
                  ["Ident", 3749, 16, 0, "promises"],
                  ".",
                  "Ident",
                  3749,
                  8,
                  0,
                  "k"
                ],
                [
                  "Unary",
                  897,
                  11,
                  0,
                  "++",
                  "Ident",
                  3750,
                  1,
                  0,
                  "remaining"
                ],
                [
                  "Call",
                  3751,
                  1,
                  0,
                  ["Ident", 3751, 1, 0, "handle"],
                  0,
                  ["Ident", 3751, 14, 0, "k"],
                  ["Ident", 3751, 16, 0, "v"]
                ]
              ]
            ],
            [
              "Return",
              3752,
              1,
              0,
              "Binary",
              3752,
              1,
              0,
              ["Ident", 3752, 1, 0, "defer"],
              ".",
              "Const",
              3752,
              9,
              0,
              "promise"
            ]
          ],
          type: {
            type: "generic",
            base: "functionBase",
            args: [{
              type: "object",
              pairs: {sync: "function", then: "function"}
            }]
          },
          dependencies: ["__defer", "__everyPromise", "__isArray", "__owns", "__typeof"]
        },
        __delay: {
          helper: [
            "Func",
            1902,
            1,
            0,
            0,
            [
              ["Ident", 3762, 27, 0, "milliseconds"],
              ["Ident", 3762, 50, 0, "value"]
            ],
            ["defer"],
            [],
            "BlockStatement",
            1902,
            1,
            0,
            0,
            [
              "IfStatement",
              1686,
              1,
              0,
              0,
              [
                "Binary",
                653,
                18,
                0,
                [
                  "Unary",
                  132,
                  7,
                  0,
                  "typeof",
                  "Ident",
                  3762,
                  27,
                  0,
                  "milliseconds"
                ],
                "!==",
                "Const",
                132,
                25,
                0,
                "number"
              ],
              [
                "Throw",
                1687,
                1,
                0,
                "Call",
                1687,
                18,
                0,
                ["Ident", 1687, 18, 0, "TypeError"],
                0,
                [
                  "Binary",
                  608,
                  7,
                  0,
                  ["Const", 608, 7, 0, "Expected milliseconds to be a Number, got "],
                  "+",
                  "Call",
                  494,
                  49,
                  0,
                  ["Ident", 494, 49, 0, "__typeof"],
                  0,
                  ["Ident", 3762, 27, 0, "milliseconds"]
                ]
              ]
            ],
            [
              "IfStatement",
              3763,
              1,
              0,
              0,
              [
                "Binary",
                725,
                13,
                0,
                ["Ident", 3763, 5, 0, "milliseconds"],
                "<=",
                "Const",
                3763,
                22,
                0,
                0
              ],
              [
                "Return",
                3764,
                1,
                0,
                "Call",
                3764,
                1,
                0,
                [
                  "Binary",
                  3764,
                  1,
                  0,
                  ["Ident", 3764, 1, 0, "__defer"],
                  ".",
                  "Const",
                  3764,
                  13,
                  0,
                  "fulfilled"
                ],
                0,
                ["Ident", 3764, 23, 0, "value"]
              ],
              "BlockStatement",
              3766,
              1,
              0,
              0,
              [
                "Binary",
                3766,
                1,
                0,
                ["Ident", 3766, 8, 0, "defer"],
                "=",
                "Call",
                3766,
                16,
                0,
                ["Ident", 3766, 16, 0, "__defer"],
                0
              ],
              [
                "Call",
                3767,
                1,
                0,
                ["Ident", 3767, 1, 0, "setTimeout"],
                0,
                [
                  "Func",
                  3767,
                  19,
                  0,
                  0,
                  [],
                  [],
                  [],
                  "Call",
                  3767,
                  22,
                  0,
                  [
                    "Binary",
                    3767,
                    22,
                    0,
                    ["Ident", 3767, 22, 0, "defer"],
                    ".",
                    "Const",
                    3767,
                    29,
                    0,
                    "fulfill"
                  ],
                  0,
                  ["Ident", 3767, 37, 0, "value"]
                ],
                ["Ident", 3767, 45, 0, "milliseconds"]
              ],
              [
                "Return",
                3768,
                1,
                0,
                "Binary",
                3768,
                1,
                0,
                ["Ident", 3768, 1, 0, "defer"],
                ".",
                "Const",
                3768,
                11,
                0,
                "promise"
              ]
            ]
          ],
          type: "function",
          dependencies: ["__defer", "__delay", "__typeof"]
        },
        __promiseLoop: {
          helper: [
            "Func",
            1902,
            1,
            0,
            0,
            [
              ["Ident", 3786, 41, 0, "limit"],
              ["Ident", 3786, 58, 0, "length"],
              ["Ident", 3786, 76, 0, "body"]
            ],
            ["defer", "done", "index", "result", "slotsUsed"],
            [],
            "BlockStatement",
            1902,
            1,
            0,
            0,
            [
              "IfStatement",
              1686,
              1,
              0,
              0,
              [
                "Binary",
                653,
                18,
                0,
                [
                  "Unary",
                  132,
                  7,
                  0,
                  "typeof",
                  "Ident",
                  3786,
                  41,
                  0,
                  "limit"
                ],
                "!==",
                "Const",
                132,
                25,
                0,
                "number"
              ],
              [
                "Throw",
                1687,
                1,
                0,
                "Call",
                1687,
                18,
                0,
                ["Ident", 1687, 18, 0, "TypeError"],
                0,
                [
                  "Binary",
                  608,
                  7,
                  0,
                  ["Const", 608, 7, 0, "Expected limit to be a Number, got "],
                  "+",
                  "Call",
                  494,
                  49,
                  0,
                  ["Ident", 494, 49, 0, "__typeof"],
                  0,
                  ["Ident", 3786, 41, 0, "limit"]
                ]
              ]
            ],
            [
              "IfStatement",
              1686,
              1,
              0,
              0,
              [
                "Binary",
                653,
                18,
                0,
                [
                  "Unary",
                  132,
                  7,
                  0,
                  "typeof",
                  "Ident",
                  3786,
                  58,
                  0,
                  "length"
                ],
                "!==",
                "Const",
                132,
                25,
                0,
                "number"
              ],
              [
                "Throw",
                1687,
                1,
                0,
                "Call",
                1687,
                18,
                0,
                ["Ident", 1687, 18, 0, "TypeError"],
                0,
                [
                  "Binary",
                  608,
                  7,
                  0,
                  ["Const", 608, 7, 0, "Expected length to be a Number, got "],
                  "+",
                  "Call",
                  494,
                  49,
                  0,
                  ["Ident", 494, 49, 0, "__typeof"],
                  0,
                  ["Ident", 3786, 58, 0, "length"]
                ]
              ]
            ],
            [
              "IfStatement",
              1686,
              1,
              0,
              0,
              [
                "Binary",
                657,
                18,
                0,
                [
                  "Unary",
                  138,
                  7,
                  0,
                  "typeof",
                  "Ident",
                  3786,
                  76,
                  0,
                  "body"
                ],
                "!==",
                "Const",
                138,
                25,
                0,
                "function"
              ],
              [
                "Throw",
                1687,
                1,
                0,
                "Call",
                1687,
                18,
                0,
                ["Ident", 1687, 18, 0, "TypeError"],
                0,
                [
                  "Binary",
                  608,
                  7,
                  0,
                  ["Const", 608, 7, 0, "Expected body to be a Function, got "],
                  "+",
                  "Call",
                  494,
                  49,
                  0,
                  ["Ident", 494, 49, 0, "__typeof"],
                  0,
                  ["Ident", 3786, 76, 0, "body"]
                ]
              ]
            ],
            [
              "IfStatement",
              3787,
              1,
              0,
              0,
              [
                "Binary",
                3787,
                5,
                0,
                [
                  "Binary",
                  3787,
                  5,
                  0,
                  ["Ident", 3787, 5, 0, "limit"],
                  "<",
                  "Const",
                  3787,
                  15,
                  0,
                  1
                ],
                "||",
                "Binary",
                43,
                7,
                0,
                ["Ident", 3787, 19, 0, "limit"],
                "!==",
                "Ident",
                3787,
                28,
                0,
                "limit"
              ],
              [
                "Binary",
                3788,
                1,
                0,
                ["Ident", 3788, 1, 0, "limit"],
                "=",
                "Const",
                3788,
                13,
                0,
                1,
                1
              ]
            ],
            [
              "Binary",
              3790,
              1,
              0,
              ["Ident", 3790, 6, 0, "result"],
              "=",
              "Arr",
              3790,
              15,
              0
            ],
            [
              "Binary",
              3791,
              1,
              0,
              ["Ident", 3791, 14, 0, "done"],
              "=",
              "Const",
              3791,
              21,
              0,
              false
            ],
            [
              "Binary",
              3792,
              1,
              0,
              ["Ident", 3792, 14, 0, "slotsUsed"],
              "=",
              "Const",
              3792,
              28,
              0,
              0
            ],
            [
              "Binary",
              3793,
              1,
              0,
              ["Ident", 3793, 6, 0, "defer"],
              "=",
              "Call",
              3793,
              14,
              0,
              ["Ident", 3793, 14, 0, "__defer"],
              0
            ],
            [
              "Binary",
              3794,
              1,
              0,
              ["Ident", 3794, 14, 0, "index"],
              "=",
              "Const",
              3794,
              23,
              0,
              0
            ],
            [
              "Func",
              3795,
              1,
              0,
              ["Ident", 3795, 6, 0, "handle"],
              [["Ident", 3795, 14, 0, "index"]],
              [],
              [],
              "BlockStatement",
              3796,
              1,
              0,
              0,
              [
                "Unary",
                897,
                11,
                0,
                "++",
                "Ident",
                3796,
                1,
                0,
                "slotsUsed"
              ],
              [
                "Return",
                3797,
                1,
                0,
                "Call",
                3797,
                1,
                0,
                [
                  "Binary",
                  3797,
                  1,
                  0,
                  [
                    "Call",
                    3797,
                    1,
                    0,
                    ["Ident", 3797, 1, 0, "body"],
                    0,
                    ["Ident", 3797, 10, 0, "index"]
                  ],
                  ".",
                  "Const",
                  3797,
                  17,
                  0,
                  "then"
                ],
                0,
                [
                  "Func",
                  3798,
                  8,
                  0,
                  0,
                  [["Ident", 3798, 9, 0, "value"]],
                  [],
                  [],
                  "BlockStatement",
                  3799,
                  1,
                  0,
                  0,
                  [
                    "Binary",
                    3799,
                    1,
                    0,
                    [
                      "Binary",
                      3799,
                      1,
                      0,
                      ["Ident", 3799, 1, 0, "result"],
                      ".",
                      "Ident",
                      3799,
                      16,
                      0,
                      "index"
                    ],
                    "=",
                    "Ident",
                    3799,
                    25,
                    0,
                    "value"
                  ],
                  [
                    "Unary",
                    899,
                    11,
                    0,
                    "--",
                    "Ident",
                    3800,
                    1,
                    0,
                    "slotsUsed"
                  ],
                  [
                    "Return",
                    3801,
                    1,
                    0,
                    "Call",
                    3801,
                    1,
                    0,
                    ["Ident", 3801, 1, 0, "flush"],
                    0
                  ]
                ],
                [
                  "Func",
                  3802,
                  8,
                  0,
                  0,
                  [["Ident", 3802, 9, 0, "reason"]],
                  [],
                  [],
                  "BlockStatement",
                  3803,
                  1,
                  0,
                  0,
                  [
                    "Binary",
                    3803,
                    1,
                    0,
                    ["Ident", 3803, 1, 0, "done"],
                    "=",
                    "Const",
                    3803,
                    16,
                    0,
                    true
                  ],
                  [
                    "Return",
                    3804,
                    1,
                    0,
                    "Call",
                    3804,
                    1,
                    0,
                    [
                      "Binary",
                      3804,
                      1,
                      0,
                      ["Ident", 3804, 1, 0, "defer"],
                      ".",
                      "Const",
                      3804,
                      15,
                      0,
                      "reject"
                    ],
                    0,
                    ["Ident", 3804, 22, 0, "reason"]
                  ]
                ]
              ]
            ],
            [
              "Func",
              3805,
              1,
              0,
              ["Ident", 3805, 6, 0, "flush"],
              [],
              [],
              [],
              "BlockStatement",
              3806,
              1,
              0,
              0,
              [
                "For",
                1118,
                1,
                0,
                0,
                0,
                [
                  "Binary",
                  3806,
                  10,
                  0,
                  [
                    "Binary",
                    3806,
                    10,
                    0,
                    [
                      "Unary",
                      3806,
                      10,
                      0,
                      "!",
                      "Ident",
                      3806,
                      14,
                      0,
                      "done"
                    ],
                    "&&",
                    "Binary",
                    723,
                    13,
                    0,
                    ["Ident", 3806, 23, 0, "slotsUsed"],
                    "<",
                    "Ident",
                    3806,
                    36,
                    0,
                    "limit"
                  ],
                  "&&",
                  "Binary",
                  723,
                  13,
                  0,
                  ["Ident", 3806, 46, 0, "index"],
                  "<",
                  "Ident",
                  3806,
                  54,
                  0,
                  "length"
                ],
                [
                  "Unary",
                  897,
                  11,
                  0,
                  "++",
                  "Ident",
                  3806,
                  62,
                  0,
                  "index"
                ],
                "Call",
                3807,
                1,
                0,
                ["Ident", 3807, 1, 0, "handle"],
                0,
                ["Ident", 3807, 14, 0, "index"]
              ],
              [
                "IfStatement",
                3808,
                1,
                0,
                0,
                [
                  "Binary",
                  3808,
                  7,
                  0,
                  [
                    "Binary",
                    3808,
                    7,
                    0,
                    [
                      "Unary",
                      3808,
                      7,
                      0,
                      "!",
                      "Ident",
                      3808,
                      11,
                      0,
                      "done"
                    ],
                    "&&",
                    "Binary",
                    761,
                    9,
                    0,
                    ["Ident", 3808, 20, 0, "index"],
                    ">=",
                    "Ident",
                    3808,
                    29,
                    0,
                    "length"
                  ],
                  "&&",
                  "Binary",
                  3808,
                  40,
                  0,
                  ["Ident", 3808, 40, 0, "slotsUsed"],
                  "===",
                  "Const",
                  3808,
                  55,
                  0,
                  0
                ],
                [
                  "BlockStatement",
                  3809,
                  1,
                  0,
                  0,
                  [
                    "Binary",
                    3809,
                    1,
                    0,
                    ["Ident", 3809, 1, 0, "done"],
                    "=",
                    "Const",
                    3809,
                    14,
                    0,
                    true
                  ],
                  [
                    "Return",
                    3810,
                    1,
                    0,
                    "Call",
                    3810,
                    1,
                    0,
                    [
                      "Binary",
                      3810,
                      1,
                      0,
                      ["Ident", 3810, 1, 0, "defer"],
                      ".",
                      "Const",
                      3810,
                      13,
                      0,
                      "fulfill"
                    ],
                    0,
                    ["Ident", 3810, 21, 0, "result"]
                  ]
                ]
              ]
            ],
            [
              "Call",
              3811,
              1,
              0,
              ["Ident", 3811, 1, 0, "setImmediate"],
              0,
              ["Ident", 3811, 17, 0, "flush"]
            ],
            [
              "Return",
              3812,
              1,
              0,
              "Binary",
              3812,
              1,
              0,
              ["Ident", 3812, 1, 0, "defer"],
              ".",
              "Const",
              3812,
              9,
              0,
              "promise"
            ]
          ],
          type: {
            type: "generic",
            base: "functionBase",
            args: [{
              type: "object",
              pairs: {sync: "function", then: "function"}
            }]
          },
          dependencies: ["__defer", "__promiseLoop", "__typeof", "setImmediate"]
        },
        __promiseIter: {
          helper: [
            "Func",
            1902,
            1,
            0,
            0,
            [
              ["Ident", 3814, 41, 0, "limit"],
              ["Ident", 3814, 58, 0, "iterator"],
              ["Ident", 3814, 88, 0, "body"]
            ],
            ["defer", "done", "index", "iterStopped", "result", "slotsUsed"],
            [],
            "BlockStatement",
            1902,
            1,
            0,
            0,
            [
              "IfStatement",
              1686,
              1,
              0,
              0,
              [
                "Binary",
                653,
                18,
                0,
                [
                  "Unary",
                  132,
                  7,
                  0,
                  "typeof",
                  "Ident",
                  3814,
                  41,
                  0,
                  "limit"
                ],
                "!==",
                "Const",
                132,
                25,
                0,
                "number"
              ],
              [
                "Throw",
                1687,
                1,
                0,
                "Call",
                1687,
                18,
                0,
                ["Ident", 1687, 18, 0, "TypeError"],
                0,
                [
                  "Binary",
                  608,
                  7,
                  0,
                  ["Const", 608, 7, 0, "Expected limit to be a Number, got "],
                  "+",
                  "Call",
                  494,
                  49,
                  0,
                  ["Ident", 494, 49, 0, "__typeof"],
                  0,
                  ["Ident", 3814, 41, 0, "limit"]
                ]
              ]
            ],
            [
              "IfStatement",
              1775,
              10,
              0,
              0,
              [
                "Binary",
                1775,
                13,
                0,
                [
                  "Binary",
                  144,
                  47,
                  0,
                  [
                    "Unary",
                    144,
                    47,
                    0,
                    "typeof",
                    "Ident",
                    3814,
                    58,
                    0,
                    "iterator"
                  ],
                  "!==",
                  "Const",
                  144,
                  62,
                  0,
                  "object"
                ],
                "||",
                "Binary",
                144,
                72,
                0,
                ["Ident", 3814, 58, 0, "iterator"],
                "===",
                "Const",
                1,
                1,
                0,
                null
              ],
              [
                "Throw",
                1776,
                1,
                0,
                "Call",
                1776,
                14,
                0,
                ["Ident", 1776, 14, 0, "TypeError"],
                0,
                [
                  "Binary",
                  608,
                  7,
                  0,
                  ["Const", 608, 7, 0, "Expected iterator to be an Object, got "],
                  "+",
                  "Call",
                  494,
                  49,
                  0,
                  ["Ident", 494, 49, 0, "__typeof"],
                  0,
                  ["Ident", 3814, 58, 0, "iterator"]
                ]
              ],
              "IfStatement",
              1686,
              1,
              0,
              0,
              [
                "Binary",
                657,
                18,
                0,
                [
                  "Unary",
                  138,
                  7,
                  0,
                  "typeof",
                  "Binary",
                  1774,
                  35,
                  0,
                  ["Ident", 3814, 58, 0, "iterator"],
                  ".",
                  "Const",
                  3814,
                  72,
                  0,
                  "next"
                ],
                "!==",
                "Const",
                138,
                25,
                0,
                "function"
              ],
              [
                "Throw",
                1687,
                1,
                0,
                "Call",
                1687,
                18,
                0,
                ["Ident", 1687, 18, 0, "TypeError"],
                0,
                [
                  "Binary",
                  608,
                  7,
                  0,
                  ["Const", 608, 7, 0, "Expected iterator.next to be a Function, got "],
                  "+",
                  "Call",
                  494,
                  49,
                  0,
                  ["Ident", 494, 49, 0, "__typeof"],
                  0,
                  [
                    "Binary",
                    1774,
                    35,
                    0,
                    ["Ident", 3814, 58, 0, "iterator"],
                    ".",
                    "Const",
                    3814,
                    72,
                    0,
                    "next"
                  ]
                ]
              ]
            ],
            [
              "IfStatement",
              1686,
              1,
              0,
              0,
              [
                "Binary",
                657,
                18,
                0,
                [
                  "Unary",
                  138,
                  7,
                  0,
                  "typeof",
                  "Ident",
                  3814,
                  88,
                  0,
                  "body"
                ],
                "!==",
                "Const",
                138,
                25,
                0,
                "function"
              ],
              [
                "Throw",
                1687,
                1,
                0,
                "Call",
                1687,
                18,
                0,
                ["Ident", 1687, 18, 0, "TypeError"],
                0,
                [
                  "Binary",
                  608,
                  7,
                  0,
                  ["Const", 608, 7, 0, "Expected body to be a Function, got "],
                  "+",
                  "Call",
                  494,
                  49,
                  0,
                  ["Ident", 494, 49, 0, "__typeof"],
                  0,
                  ["Ident", 3814, 88, 0, "body"]
                ]
              ]
            ],
            [
              "IfStatement",
              3815,
              1,
              0,
              0,
              [
                "Binary",
                3815,
                5,
                0,
                [
                  "Binary",
                  3815,
                  5,
                  0,
                  ["Ident", 3815, 5, 0, "limit"],
                  "<",
                  "Const",
                  3815,
                  15,
                  0,
                  1
                ],
                "||",
                "Binary",
                43,
                7,
                0,
                ["Ident", 3815, 19, 0, "limit"],
                "!==",
                "Ident",
                3815,
                28,
                0,
                "limit"
              ],
              [
                "Binary",
                3816,
                1,
                0,
                ["Ident", 3816, 1, 0, "limit"],
                "=",
                "Const",
                3816,
                13,
                0,
                1,
                1
              ]
            ],
            [
              "Binary",
              3818,
              1,
              0,
              ["Ident", 3818, 6, 0, "result"],
              "=",
              "Arr",
              3818,
              15,
              0
            ],
            [
              "Binary",
              3819,
              1,
              0,
              ["Ident", 3819, 14, 0, "done"],
              "=",
              "Const",
              3819,
              21,
              0,
              false
            ],
            [
              "Binary",
              3820,
              1,
              0,
              ["Ident", 3820, 14, 0, "slotsUsed"],
              "=",
              "Const",
              3820,
              28,
              0,
              0
            ],
            [
              "Binary",
              3821,
              1,
              0,
              ["Ident", 3821, 6, 0, "defer"],
              "=",
              "Call",
              3821,
              14,
              0,
              ["Ident", 3821, 14, 0, "__defer"],
              0
            ],
            [
              "Binary",
              3822,
              1,
              0,
              ["Ident", 3822, 14, 0, "index"],
              "=",
              "Const",
              3822,
              23,
              0,
              0
            ],
            [
              "Binary",
              3823,
              1,
              0,
              ["Ident", 3823, 14, 0, "iterStopped"],
              "=",
              "Const",
              3823,
              29,
              0,
              false
            ],
            [
              "Func",
              3824,
              1,
              0,
              ["Ident", 3824, 6, 0, "handle"],
              [
                ["Ident", 3824, 14, 0, "item"],
                ["Ident", 3824, 19, 0, "index"]
              ],
              [],
              [],
              "BlockStatement",
              3825,
              1,
              0,
              0,
              [
                "Unary",
                897,
                11,
                0,
                "++",
                "Ident",
                3825,
                1,
                0,
                "slotsUsed"
              ],
              [
                "Return",
                3826,
                1,
                0,
                "Call",
                3826,
                1,
                0,
                [
                  "Binary",
                  3826,
                  1,
                  0,
                  [
                    "Call",
                    3826,
                    1,
                    0,
                    ["Ident", 3826, 1, 0, "body"],
                    0,
                    ["Ident", 3826, 10, 0, "item"],
                    ["Ident", 3826, 15, 0, "index"]
                  ],
                  ".",
                  "Const",
                  3826,
                  23,
                  0,
                  "then"
                ],
                0,
                [
                  "Func",
                  3827,
                  8,
                  0,
                  0,
                  [["Ident", 3827, 9, 0, "value"]],
                  [],
                  [],
                  "BlockStatement",
                  3828,
                  1,
                  0,
                  0,
                  [
                    "Binary",
                    3828,
                    1,
                    0,
                    [
                      "Binary",
                      3828,
                      1,
                      0,
                      ["Ident", 3828, 1, 0, "result"],
                      ".",
                      "Ident",
                      3828,
                      16,
                      0,
                      "index"
                    ],
                    "=",
                    "Ident",
                    3828,
                    25,
                    0,
                    "value"
                  ],
                  [
                    "Unary",
                    899,
                    11,
                    0,
                    "--",
                    "Ident",
                    3829,
                    1,
                    0,
                    "slotsUsed"
                  ],
                  [
                    "Return",
                    3830,
                    1,
                    0,
                    "Call",
                    3830,
                    1,
                    0,
                    ["Ident", 3830, 1, 0, "flush"],
                    0
                  ]
                ],
                [
                  "Func",
                  3831,
                  8,
                  0,
                  0,
                  [["Ident", 3831, 9, 0, "reason"]],
                  [],
                  [],
                  "BlockStatement",
                  3832,
                  1,
                  0,
                  0,
                  [
                    "Binary",
                    3832,
                    1,
                    0,
                    ["Ident", 3832, 1, 0, "done"],
                    "=",
                    "Const",
                    3832,
                    16,
                    0,
                    true
                  ],
                  [
                    "Return",
                    3833,
                    1,
                    0,
                    "Call",
                    3833,
                    1,
                    0,
                    [
                      "Binary",
                      3833,
                      1,
                      0,
                      ["Ident", 3833, 1, 0, "defer"],
                      ".",
                      "Const",
                      3833,
                      15,
                      0,
                      "reject"
                    ],
                    0,
                    ["Ident", 3833, 22, 0, "reason"]
                  ]
                ]
              ]
            ],
            [
              "Func",
              3834,
              1,
              0,
              ["Ident", 3834, 6, 0, "flush"],
              [],
              ["item"],
              [],
              "BlockStatement",
              3835,
              1,
              0,
              0,
              [
                "For",
                1118,
                1,
                0,
                0,
                0,
                [
                  "Binary",
                  3835,
                  10,
                  0,
                  [
                    "Binary",
                    3835,
                    10,
                    0,
                    [
                      "Unary",
                      3835,
                      10,
                      0,
                      "!",
                      "Ident",
                      3835,
                      14,
                      0,
                      "done"
                    ],
                    "&&",
                    "Unary",
                    3835,
                    23,
                    0,
                    "!",
                    "Ident",
                    3835,
                    27,
                    0,
                    "iterStopped"
                  ],
                  "&&",
                  "Binary",
                  723,
                  13,
                  0,
                  ["Ident", 3835, 44, 0, "slotsUsed"],
                  "<",
                  "Ident",
                  3835,
                  57,
                  0,
                  "limit"
                ],
                0,
                "BlockStatement",
                3836,
                1,
                0,
                0,
                [
                  "Binary",
                  3836,
                  1,
                  0,
                  ["Ident", 3836, 18, 0, "item"],
                  "=",
                  "Const",
                  3836,
                  25,
                  0
                ],
                [
                  "TryCatch",
                  3837,
                  1,
                  0,
                  0,
                  [
                    "Binary",
                    3838,
                    1,
                    0,
                    ["Ident", 3838, 1, 0, "item"],
                    "=",
                    "Call",
                    3838,
                    16,
                    0,
                    [
                      "Binary",
                      3838,
                      16,
                      0,
                      ["Ident", 3838, 16, 0, "iterator"],
                      ".",
                      "Const",
                      3838,
                      26,
                      0,
                      "next"
                    ],
                    0
                  ],
                  ["Ident", 3839, 12, 0, "e"],
                  "BlockStatement",
                  3840,
                  1,
                  0,
                  0,
                  [
                    "Binary",
                    3840,
                    1,
                    0,
                    ["Ident", 3840, 1, 0, "done"],
                    "=",
                    "Const",
                    3840,
                    16,
                    0,
                    true
                  ],
                  [
                    "Call",
                    3841,
                    1,
                    0,
                    [
                      "Binary",
                      3841,
                      1,
                      0,
                      ["Ident", 3841, 1, 0, "defer"],
                      ".",
                      "Const",
                      3841,
                      15,
                      0,
                      "reject"
                    ],
                    0,
                    ["Ident", 3841, 22, 0, "e"]
                  ],
                  [
                    "Return",
                    3842,
                    1,
                    0,
                    "Const",
                    3842,
                    1,
                    0
                  ]
                ],
                [
                  "IfStatement",
                  3844,
                  1,
                  0,
                  0,
                  [
                    "Binary",
                    3844,
                    9,
                    0,
                    ["Ident", 3844, 9, 0, "item"],
                    ".",
                    "Const",
                    3844,
                    15,
                    0,
                    "done"
                  ],
                  [
                    "BlockStatement",
                    3845,
                    1,
                    0,
                    0,
                    [
                      "Binary",
                      3845,
                      1,
                      0,
                      ["Ident", 3845, 1, 0, "iterStopped"],
                      "=",
                      "Const",
                      3845,
                      24,
                      0,
                      true
                    ],
                    ["Break", 3846, 1, 0]
                  ]
                ],
                [
                  "Call",
                  3848,
                  1,
                  0,
                  ["Ident", 3848, 1, 0, "handle"],
                  0,
                  [
                    "Binary",
                    3848,
                    14,
                    0,
                    ["Ident", 3848, 14, 0, "item"],
                    ".",
                    "Const",
                    3848,
                    19,
                    0,
                    "value"
                  ],
                  [
                    "Unary",
                    3848,
                    25,
                    0,
                    "++post",
                    "Ident",
                    3848,
                    35,
                    0,
                    "index"
                  ]
                ]
              ],
              [
                "IfStatement",
                3850,
                1,
                0,
                0,
                [
                  "Binary",
                  3850,
                  7,
                  0,
                  [
                    "Binary",
                    3850,
                    7,
                    0,
                    [
                      "Unary",
                      3850,
                      7,
                      0,
                      "!",
                      "Ident",
                      3850,
                      11,
                      0,
                      "done"
                    ],
                    "&&",
                    "Binary",
                    3850,
                    20,
                    0,
                    ["Ident", 3850, 20, 0, "slotsUsed"],
                    "===",
                    "Const",
                    3850,
                    35,
                    0,
                    0
                  ],
                  "&&",
                  "Ident",
                  3850,
                  40,
                  0,
                  "iterStopped"
                ],
                [
                  "BlockStatement",
                  3851,
                  1,
                  0,
                  0,
                  [
                    "Binary",
                    3851,
                    1,
                    0,
                    ["Ident", 3851, 1, 0, "done"],
                    "=",
                    "Const",
                    3851,
                    14,
                    0,
                    true
                  ],
                  [
                    "Return",
                    3852,
                    1,
                    0,
                    "Call",
                    3852,
                    1,
                    0,
                    [
                      "Binary",
                      3852,
                      1,
                      0,
                      ["Ident", 3852, 1, 0, "defer"],
                      ".",
                      "Const",
                      3852,
                      13,
                      0,
                      "fulfill"
                    ],
                    0,
                    ["Ident", 3852, 21, 0, "result"]
                  ]
                ]
              ]
            ],
            [
              "Call",
              3853,
              1,
              0,
              ["Ident", 3853, 1, 0, "setImmediate"],
              0,
              ["Ident", 3853, 17, 0, "flush"]
            ],
            [
              "Return",
              3854,
              1,
              0,
              "Binary",
              3854,
              1,
              0,
              ["Ident", 3854, 1, 0, "defer"],
              ".",
              "Const",
              3854,
              9,
              0,
              "promise"
            ]
          ],
          type: {
            type: "generic",
            base: "functionBase",
            args: [{
              type: "object",
              pairs: {sync: "function", then: "function"}
            }]
          },
          dependencies: ["__defer", "__promiseIter", "__typeof", "setImmediate"]
        }
      },
      assignOperator: [
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var _this,left,op,right;_this=this;left=macroData.left;op=macroData.op;right=macroData.right;if(!this.isComplex(left)||this.isAccess(left)&&!this.isComplex(this.parent(left))&&!this.isComplex(this.child(left))){return this.mutateLast(right||this.noop(),function(n){return _this.assign(left,"=",n);},true);}else{return this.assign(left,"=",right);}};}.call(this));',
          operators: ":=",
          options: {type: "right"},
          id: 30
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var _this,left,op,right;_this=this;left=macroData.left;op=macroData.op;right=macroData.right;return this.maybeCacheAccess(left,function(setLeft,left){return __node("MacroAccess",10884,1,311,{left:__wrap(setLeft),inverted:false,op:"and",right:__node("MacroAccess",10900,30,311,{left:__wrap(left),op:":=",right:__wrap(right)},"expression",false,false,false)},"expression",false,false,false);});};}.call(this));',
          operators: "and=",
          id: 43
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var _this,left,op,right;_this=this;left=macroData.left;op=macroData.op;right=macroData.right;return this.maybeCacheAccess(left,function(setLeft,left){return __node("MacroAccess",11000,2,315,{left:__wrap(setLeft),inverted:false,op:"or",right:__node("MacroAccess",11015,30,315,{left:__wrap(left),op:":=",right:__wrap(right)},"expression",false,false,false)},"expression",false,false,false);});};}.call(this));',
          operators: "or=",
          id: 44
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var _this,left,op,right;_this=this;left=macroData.left;op=macroData.op;right=macroData.right;if(this.canMutateLast(right)&&this.isIdentOrTmp(left)){return this.mutateLast(right||this.noop(),function(n){if(op==="~*="){return _this.assign(left,"*=",n);}else if(op==="~/="){return _this.assign(left,"/=",n);}else{return _this.assign(left,"%=",n);}},true);}else if(op==="~*="){return this.assign(left,"*=",right);}else if(op==="~/="){return this.assign(left,"/=",right);}else{return this.assign(left,"%=",right);}};}.call(this));',
          operators: ["~*=", "~/=", "~%="],
          options: {type: "number"},
          id: 46
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;return this.maybeCacheAccess(left,function(setLeft,left){return __node("MacroAccess",11962,30,350,{left:__wrap(setLeft),op:":=",right:__node("MacroAccess",11975,45,350,{left:__wrap(left),inverted:false,op:"~\\\\",right:__wrap(right)},"expression",false,false,false)},"expression",false,false,false);});};}.call(this));',
          operators: "~\\=",
          options: {type: "number"},
          id: 47
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;return this.maybeCacheAccess(left,function(setLeft,left){return __node("MacroAccess",13617,30,404,{left:__wrap(setLeft),op:":=",right:__node("MacroAccess",13630,50,404,{left:__wrap(left),inverted:false,op:"~^",right:__wrap(right)},"expression",false,false,false)},"expression",false,false,false);});};}.call(this));',
          operators: "~^=",
          options: {type: "number"},
          id: 51
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var _this,left,op,right,value;_this=this;left=macroData.left;op=macroData.op;right=macroData.right;if(this.isConst(right)){value=this.value(right);if(value===1){return this.unary("++",left);}else if(value===-1){return this.unary("--",left);}else if(typeof value==="number"&&!this.isType(left,"numeric")){return this.assign(left,"-=",this["const"](-value));}}if(this.isType(left,"numeric")){if(this.canMutateLast(right)&&this.isIdentOrTmp(left)){return this.mutateLast(right||this.noop(),function(n){if(!_this.isType(n,"numeric")){n=__node("MacroAccess",14158,48,420,{op:"~+",node:__wrap(n)},"expression",false,false,false);}return _this.assign(left,"+=",n);},true);}else{if(!this.isType(right,"numeric")){right=__node("MacroAccess",14269,48,424,{op:"~+",node:__wrap(right)},"expression",false,false,false);}return this.assign(left,"+=",right);}}else if(this.canMutateLast(right)&&this.isIdentOrTmp(left)){return this.mutateLast(right||this.noop(),function(n){return _this.assign(left,"-=",__node("MacroAccess",14447,48,428,{op:"~-",node:__wrap(n)},"expression",false,false,false));},true);}else{return this.assign(left,"-=",__node("MacroAccess",14499,48,430,{op:"~-",node:__wrap(right)},"expression",false,false,false));}};}.call(this));',
          operators: "~+=",
          options: {type: "number"},
          id: 52
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var _this,left,op,right,value;_this=this;left=macroData.left;op=macroData.op;right=macroData.right;if(this.isConst(right)){value=this.value(right);if(value===1){return this.unary("--",left);}else if(value===-1){return this.unary("++",left);}}if(this.canMutateLast(right)&&this.isIdentOrTmp(left)){return this.mutateLast(right||this.noop(),function(n){return _this.assign(left,"-=",n);},true);}else{return this.assign(left,"-=",right);}};}.call(this));',
          operators: "~-=",
          options: {type: "number"},
          id: 53
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var _this,left,op,right;_this=this;left=macroData.left;op=macroData.op;right=macroData.right;if(this.canMutateLast(right)&&this.isIdentOrTmp(left)){return this.mutateLast(right||this.noop(),function(n){if(op==="~bitlshift="){return _this.assign(left,"<<=",n);}else if(op==="~bitrshift="){return _this.assign(left,">>=",n);}else{return _this.assign(left,">>>=",n);}},true);}else if(op==="~bitlshift="){return this.assign(left,"<<=",right);}else if(op==="~bitrshift="){return this.assign(left,">>=",right);}else{return this.assign(left,">>>=",right);}};}.call(this));',
          operators: ["~bitlshift=", "~bitrshift=", "~biturshift="],
          options: {type: "number"},
          id: 55
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var _this,left,op,right;_this=this;left=macroData.left;op=macroData.op;right=macroData.right;if(this.canMutateLast(right)&&this.isIdentOrTmp(left)){return this.mutateLast(right||this.noop(),function(n){if(_this.hasType(left,"numeric")&&_this.hasType(n,"numeric")){n=__node("MacroAccess",15899,29,473,{left:__node("Const",15900,""),inverted:false,op:"~&",right:__node("Ident",15905,"n")},"expression",false,false,false);}return _this.assign(left,"+=",n);},true);}else{if(this.hasType(left,"numeric")&&this.hasType(right,"numeric")){right=__node("MacroAccess",16033,29,477,{left:__node("Const",16034,""),inverted:false,op:"~&",right:__node("Ident",16039,"right")},"expression",false,false,false);}return this.assign(left,"+=",right);}};}.call(this));',
          operators: "~&=",
          options: {type: "string"},
          id: 56
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var _this,left,op,right;_this=this;left=macroData.left;op=macroData.op;right=macroData.right;return this.maybeCacheAccess(left,function(setLeft,left){return __node("MacroAccess",18310,30,564,{left:__wrap(setLeft),op:":=",right:__node("MacroAccess",18323,62,564,{left:__wrap(left),inverted:false,op:"^",right:__wrap(right)},"expression",false,false,false)},"expression",false,false,false);});};}.call(this));',
          operators: "^=",
          options: {type: "number"},
          id: 63
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var _this,left,op,right;_this=this;left=macroData.left;op=macroData.op;right=macroData.right;return this.maybeCacheAccess(left,function(setLeft,left){return __node("MacroAccess",19165,30,595,{left:__wrap(setLeft),op:":=",right:__node("MacroAccess",19178,64,595,{left:__wrap(left),inverted:false,op:"\\\\",right:__wrap(right)},"expression",false,false,false)},"expression",false,false,false);});};}.call(this));',
          operators: "\\=",
          options: {type: "number"},
          id: 68
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var _this,left,op,right;_this=this;left=macroData.left;op=macroData.op;right=macroData.right;if(this.isType(left,"string")){return __node("MacroAccess",19673,56,612,{left:__wrap(left),op:"~&=",right:__node("MacroAccess",19683,69,612,{left:__node("Const",19684,""),inverted:false,op:"&",right:__wrap(right)},"expression",false,false,false)},"expression",false,false,false);}else{return this.maybeCacheAccess(left,function(setLeft,left){return __node("MacroAccess",19762,30,615,{left:__wrap(setLeft),op:":=",right:__node("MacroAccess",19775,69,615,{left:__wrap(left),inverted:false,op:"&",right:__wrap(right)},"expression",false,false,false)},"expression",false,false,false);});}};}.call(this));',
          operators: "&=",
          options: {type: "string"},
          id: 70
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var _this,left,op,right;_this=this;left=macroData.left;op=macroData.op;right=macroData.right;return this.maybeCacheAccess(left,function(setLeft,left){return _this.maybeCache(setLeft,function(setLeft,leftValue){return _this.maybeCache(right,function(setRight,right){return __node("MacroAccess",25331,16,794,{macroName:"if",macroData:{test:__node("MacroAccess",25334,10,794,{left:__wrap(setLeft),inverted:false,op:"~>",right:__wrap(setRight)},"expression",false,false,false),body:__node("MacroAccess",25365,30,794,{left:__wrap(left),op:":=",right:__wrap(right)},"expression",false,false,false),elseIfs:[],elseBody:__wrap(leftValue)}},"expression",false,false,false);});});});};}.call(this));',
          operators: "~min=",
          id: 86
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var _this,left,op,right;_this=this;left=macroData.left;op=macroData.op;right=macroData.right;return this.maybeCacheAccess(left,function(setLeft,left){return _this.maybeCache(setLeft,function(setLeft,leftValue){return _this.maybeCache(right,function(setRight,right){return __node("MacroAccess",25587,16,800,{macroName:"if",macroData:{test:__node("MacroAccess",25590,9,800,{left:__wrap(setLeft),inverted:false,op:"~<",right:__wrap(setRight)},"expression",false,false,false),body:__node("MacroAccess",25621,30,800,{left:__wrap(left),op:":=",right:__wrap(right)},"expression",false,false,false),elseIfs:[],elseBody:__wrap(leftValue)}},"expression",false,false,false);});});});};}.call(this));',
          operators: "~max=",
          id: 87
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var _this,left,op,right;_this=this;left=macroData.left;op=macroData.op;right=macroData.right;return this.maybeCacheAccess(left,function(setLeft,left){return _this.maybeCache(setLeft,function(setLeft,leftValue){return _this.maybeCache(right,function(setRight,right){return __node("MacroAccess",25842,16,806,{macroName:"if",macroData:{test:__node("MacroAccess",25845,79,806,{left:__wrap(setLeft),inverted:false,op:">",right:__wrap(setRight)},"expression",false,false,false),body:__node("MacroAccess",25875,30,806,{left:__wrap(left),op:":=",right:__wrap(right)},"expression",false,false,false),elseIfs:[],elseBody:__wrap(leftValue)}},"expression",false,false,false);});});});};}.call(this));',
          operators: "min=",
          id: 88
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var _this,left,op,right;_this=this;left=macroData.left;op=macroData.op;right=macroData.right;return this.maybeCacheAccess(left,function(setLeft,left){return _this.maybeCache(setLeft,function(setLeft,leftValue){return _this.maybeCache(right,function(setRight,right){return __node("MacroAccess",26096,16,812,{macroName:"if",macroData:{test:__node("MacroAccess",26099,78,812,{left:__wrap(setLeft),inverted:false,op:"<",right:__wrap(setRight)},"expression",false,false,false),body:__node("MacroAccess",26129,30,812,{left:__wrap(left),op:":=",right:__wrap(right)},"expression",false,false,false),elseIfs:[],elseBody:__wrap(leftValue)}},"expression",false,false,false);});});});};}.call(this));',
          operators: "max=",
          id: 89
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var _this,left,op,right;_this=this;left=macroData.left;op=macroData.op;right=macroData.right;return this.maybeCacheAccess(left,function(setLeft,left){return __node("MacroAccess",26247,30,816,{left:__wrap(setLeft),op:":=",right:__node("MacroAccess",26260,84,816,{left:__wrap(left),inverted:false,op:"xor",right:__wrap(right)},"expression",false,false,false)},"expression",false,false,false);});};}.call(this));',
          operators: "xor=",
          id: 90
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var _this,left,op,right;_this=this;left=macroData.left;op=macroData.op;right=macroData.right;return this.maybeCacheAccess(left,function(setLeft,left){return _this.maybeCache(setLeft,function(setLeft,leftValue){if(_this.position==="expression"){return __node("MacroAccess",26450,16,822,{macroName:"if",macroData:{test:__node("MacroAccess",26453,20,822,{op:"?",node:__wrap(setLeft)},"expression",false,false,false),body:__wrap(leftValue),elseIfs:[],elseBody:__node("MacroAccess",26488,30,822,{left:__wrap(left),op:":=",right:__wrap(right)},"expression",false,false,false)}},"expression",false,false,false);}else{return __node("MacroAccess",26527,17,824,{macroName:"if",macroData:{test:__node("MacroAccess",26530,3,824,{op:"not",node:__node("MacroAccess",26534,20,824,{op:"?",node:__wrap(setLeft)},"statement",false,false,false)},"statement",false,false,false),body:__node("MacroAccess",26546,30,825,{left:__wrap(left),op:":=",right:__wrap(right)},"statement",false,false,false),elseIfs:[],elseBody:__wrap(leftValue)}},"statement",false,false,false);}});});};}.call(this));',
          operators: "?=",
          id: 91
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var _this,left,op,right;_this=this;left=macroData.left;op=macroData.op;right=macroData.right;if(this.canMutateLast(right)&&this.isIdentOrTmp(left)){return this.mutateLast(right||this.noop(),function(n){if(op==="~bitand="){return _this.assign(left,"&=",n);}else if(op==="~bitor="){return _this.assign(left,"|=",n);}else{return _this.assign(left,"^=",n);}},true);}else if(op==="~bitand="){return this.assign(left,"&=",right);}else if(op==="~bitor="){return this.assign(left,"|=",right);}else{return this.assign(left,"^=",right);}};}.call(this));',
          operators: ["~bitand=", "~bitor=", "~bitxor="],
          options: {type: "number"},
          id: 95
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var _this,left,op,right;_this=this;left=macroData.left;op=macroData.op;right=macroData.right;if(this.isType(left,"number")){if(op==="*="){return __node("MacroAccess",28527,46,891,{left:__wrap(left),op:"~*=",right:__node("MacroAccess",28537,60,891,{op:"+",node:__wrap(right)},"expression",false,false,false)},"expression",false,false,false);}else if(op==="/="){return __node("MacroAccess",28579,46,893,{left:__wrap(left),op:"~/=",right:__node("MacroAccess",28589,60,893,{op:"+",node:__wrap(right)},"expression",false,false,false)},"expression",false,false,false);}else if(op==="%="){return __node("MacroAccess",28631,46,895,{left:__wrap(left),op:"~%=",right:__node("MacroAccess",28641,60,895,{op:"+",node:__wrap(right)},"expression",false,false,false)},"expression",false,false,false);}else if(op==="+="){return __node("MacroAccess",28683,52,897,{left:__wrap(left),op:"~+=",right:__node("MacroAccess",28693,60,897,{op:"+",node:__wrap(right)},"expression",false,false,false)},"expression",false,false,false);}else if(op==="-="){return __node("MacroAccess",28735,53,899,{left:__wrap(left),op:"~-=",right:__node("MacroAccess",28745,60,899,{op:"+",node:__wrap(right)},"expression",false,false,false)},"expression",false,false,false);}else if(op==="bitlshift="){return __node("MacroAccess",28795,55,901,{left:__wrap(left),op:"~bitlshift=",right:__node("MacroAccess",28813,60,901,{op:"+",node:__wrap(right)},"expression",false,false,false)},"expression",false,false,false);}else if(op==="bitrshift="){return __node("MacroAccess",28863,55,903,{left:__wrap(left),op:"~bitrshift=",right:__node("MacroAccess",28881,60,903,{op:"+",node:__wrap(right)},"expression",false,false,false)},"expression",false,false,false);}else if(op==="biturshift="){return __node("MacroAccess",28932,55,905,{left:__wrap(left),op:"~biturshift=",right:__node("MacroAccess",28951,60,905,{op:"+",node:__wrap(right)},"expression",false,false,false)},"expression",false,false,false);}else if(op==="bitand="){return __node("MacroAccess",28998,95,907,{left:__wrap(left),op:"~bitand=",right:__node("MacroAccess",29013,60,907,{op:"+",node:__wrap(right)},"expression",false,false,false)},"expression",false,false,false);}else if(op==="bitor="){return __node("MacroAccess",29059,95,909,{left:__wrap(left),op:"~bitor=",right:__node("MacroAccess",29073,60,909,{op:"+",node:__wrap(right)},"expression",false,false,false)},"expression",false,false,false);}else if(op==="bitxor="){return __node("MacroAccess",29120,95,911,{left:__wrap(left),op:"~bitxor=",right:__node("MacroAccess",29135,60,911,{op:"+",node:__wrap(right)},"expression",false,false,false)},"expression",false,false,false);}else{return this.error("Unknown operator "+op);}}else{return this.maybeCacheAccess(left,function(setLeft,left){var action;if(op==="*="){action=__node("MacroAccess",29293,64,917,{left:__wrap(left),inverted:false,op:"*",right:__wrap(right)},"expression",false,false,false);}else if(op==="/="){action=__node("MacroAccess",29346,64,919,{left:__wrap(left),inverted:false,op:"/",right:__wrap(right)},"expression",false,false,false);}else if(op==="%="){action=__node("MacroAccess",29399,64,921,{left:__wrap(left),inverted:false,op:"%",right:__wrap(right)},"expression",false,false,false);}else if(op==="+="){action=__node("MacroAccess",29452,66,923,{left:__wrap(left),inverted:false,op:"+",right:__wrap(right)},"expression",false,false,false);}else if(op==="-="){action=__node("MacroAccess",29505,66,925,{left:__wrap(left),inverted:false,op:"-",right:__wrap(right)},"expression",false,false,false);}else if(op==="bitlshift="){action=__node("MacroAccess",29566,67,927,{left:__wrap(left),inverted:false,op:"bitlshift",right:__wrap(right)},"expression",false,false,false);}else if(op==="bitrshift="){action=__node("MacroAccess",29635,67,929,{left:__wrap(left),inverted:false,op:"bitrshift",right:__wrap(right)},"expression",false,false,false);}else if(op==="biturshift="){action=__node("MacroAccess",29705,67,931,{left:__wrap(left),inverted:false,op:"biturshift",right:__wrap(right)},"expression",false,false,false);}else if(op==="bitand="){action=__node("MacroAccess",29772,96,933,{left:__wrap(left),inverted:false,op:"bitand",right:__wrap(right)},"expression",false,false,false);}else if(op==="bitor="){action=__node("MacroAccess",29834,97,935,{left:__wrap(left),inverted:false,op:"bitor",right:__wrap(right)},"expression",false,false,false);}else if(op==="bitxor="){action=__node("MacroAccess",29896,98,937,{left:__wrap(left),inverted:false,op:"bitxor",right:__wrap(right)},"expression",false,false,false);}else{action=_this.error("Unknown operator "+op);}return __node("MacroAccess",29979,30,940,{left:__wrap(setLeft),op:":=",right:__wrap(action)},"expression",false,false,false);});}};}.call(this));',
          operators: [
            "*=",
            "/=",
            "%=",
            "+=",
            "-=",
            "bitlshift=",
            "bitrshift=",
            "biturshift=",
            "bitand=",
            "bitor=",
            "bitxor="
          ],
          options: {type: "number"},
          id: 103
        }
      ],
      defineSyntax: [
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var asType,ident,isMutable;isMutable=macroData.isMutable;ident=macroData.ident;asType=macroData.asType;if(this.isIdentOrTmp(ident)){return {type:"ident",isMutable:isMutable==="mutable",ident:ident,asType:asType};}else{return ident;}};}.call(this));',
          options: {name: "DeclarableIdent"},
          params: [
            ["ident", "isMutable", "many", "?", "const", "mutable"],
            ["ident", "ident", "ident", "Identifier"],
            [
              "ident",
              "asType",
              "many",
              "?",
              "sequence",
              ["const", "as"],
              ["this", "ident", "Type"]
            ]
          ],
          id: 31
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var head,tail;head=macroData.head;tail=macroData.tail;return {type:"array",elements:[head].concat(tail)};};}.call(this));',
          options: {name: "DeclarableArray"},
          params: [
            ["const", "["],
            [
              "ident",
              "head",
              "choice",
              ["ident", "Declarable"],
              ["const", ""]
            ],
            [
              "ident",
              "tail",
              "many",
              "*",
              "sequence",
              ["const", ","],
              [
                "this",
                "choice",
                ["ident", "Declarable"],
                ["const", ""]
              ]
            ],
            ["const", "]"]
          ],
          id: 32
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var value;value=macroData.value;value=this.macroExpand1(value);return {key:this.name(value.ident),value:value};};}.call(this));',
          options: {name: "DeclarableObjectSingularPair"},
          params: [["ident", "value", "ident", "DeclarableIdent"]],
          id: 33
        },
        {
          options: {name: "DeclarableObjectDualPair"},
          params: [[
            "this",
            "sequence",
            ["ident", "key", "ident", "ObjectKey"],
            ["const", ":"],
            ["ident", "value", "ident", "Declarable"]
          ]],
          id: 34
        },
        {
          options: {name: "DeclarableObjectPair"},
          params: [[
            "this",
            "choice",
            ["ident", "DeclarableObjectDualPair"],
            ["ident", "DeclarableObjectSingularPair"]
          ]],
          id: 35
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node,__const){var head,tail;head=macroData.head;tail=macroData.tail;return {type:"object",pairs:[head].concat(tail)};};}.call(this));',
          options: {name: "DeclarableObject"},
          params: [
            ["const", "{"],
            ["ident", "head", "ident", "DeclarableObjectPair"],
            [
              "ident",
              "tail",
              "many",
              "*",
              "sequence",
              ["const", ","],
              ["this", "ident", "DeclarableObjectPair"]
            ],
            ["const", "}"]
          ],
          id: 36
        },
        {
          options: {name: "Declarable"},
          params: [[
            "this",
            "choice",
            ["ident", "DeclarableArray"],
            ["ident", "DeclarableObject"],
            ["ident", "DeclarableIdent"]
          ]],
          id: 37
        }
      ],
      call: [
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node,__const){var head,macroData,macroName,tail,tmp;macroName=macroFullData.macroName;macroData=macroFullData.macroData;head=macroData[0];tail=arguments[0].macroData.slice(1);if(tail.length===0){return __wrap(head);}else if(this.position==="statement"){tmp=this.tmp("ref");return __node("Block",16857,[__node("MacroAccess",16857,38,506,{macroName:"let",macroData:{declarable:__node("MacroAccess",16866,37,506,__node("MacroAccess",16866,31,506,{ident:__wrap(tmp)},"statement",false,false,false),"statement",false,false,false),value:__wrap(head)}},"statement",false,false,false),__wrap(tail),__wrap(tmp)],null);}else{return __node("Call",16917,__node("Ident",16917,"__first"),[__wrap(head),__wrap(tail)],false,false);}};}.call(this));',
          names: "first!",
          id: 58
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node,__const){var _ref,finish,macroData,macroName,start;macroName=macroFullData.macroName;macroData=macroFullData.macroData;start=arguments[0].macroData.slice(0,-1);finish=(_ref=arguments[0].macroData)[_ref.length-1];if(start.length===0){return __wrap(finish);}else{return __node("Block",17171,[__wrap(start),__wrap(finish)],null);}};}.call(this));',
          names: "last!",
          id: 59
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node,__const){var body,func,macroData,macroName,ran,silentFail;macroName=macroFullData.macroName;macroData=macroFullData.macroData;func=macroData[0];silentFail=macroData[1];if(this.isFunc(func)){body=this.funcBody(func);ran=this.tmp("once",true,"boolean");func=this.rewrap(this.func(this.funcParams(func),__node("Block",79506,[__node("MacroAccess",79506,17,2379,{macroName:"if",macroData:{test:__wrap(ran),body:__node("MacroAccess",79522,17,2380,{macroName:"if",macroData:{test:__wrap(silentFail),body:__node("MacroAccess",79548,39,2381,{macroName:"return",macroData:{}},"statement",false,false,false),elseIfs:[],elseBody:__node("MacroAccess",79582,11,2383,{op:"throw",node:__node("Call",79599,__node("Ident",79599,"Error"),[__node("Const",79606,"Attempted to call function more than once")],false,false)},"statement",false,false,false)}},"statement",false,false,false),elseIfs:[],elseBody:__node("MacroAccess",79663,30,2385,{left:__wrap(ran),op:":=",right:__const("true")},"statement",false,false,false)}},"statement",false,false,false),__wrap(body)],null),this.funcIsAutoReturn(func),this.funcIsBound(func),this.funcIsCurried(func),this.funcAsType(func),this.funcIsGenerator(func),this.funcGeneric(func)));return __node("Block",79876,[__node("MacroAccess",79876,38,2394,{macroName:"let",macroData:{declarable:__node("MacroAccess",79885,37,2394,__node("MacroAccess",79885,31,2394,{isMutable:"mutable",ident:__wrap(ran)},"statement",false,false,false),"statement",false,false,false),value:__const("false")}},"statement",false,false,false),__wrap(func)],null);}else if(this.isConst(silentFail)&&!this.value(silentFail)){return __node("Call",79994,__node("Ident",79994,"__once"),[__wrap(func)],false,false);}else{return __node("Call",80027,__node("Ident",80027,"__once"),[__wrap(func),__wrap(silentFail)],false,false);}};}.call(this));',
          names: "once!",
          id: 126
        },
        {
          code: 'return (function(){"use strict";var __num,__typeof;__num=function(num){if(typeof num!=="number"){throw TypeError("Expected a number, got "+__typeof(num));}else{return num;}};__typeof=(function(){var _toString;_toString=Object.prototype.toString;return function(o){if(o===void 0){return "Undefined";}else if(o===null){return "Null";}else{return o.constructor&&o.constructor.name||_toString.call(o).slice(8,-1);}};}());return function(macroFullData,__wrap,__node,__const){var _this,macroData,macroName,node;_this=this;macroName=macroFullData.macroName;macroData=macroFullData.macroData;node=macroData[0];if(__num(macroData.length)>1){this.error("fulfilled! only expects one argument");}return this.mutateLast(node||this.noop(),function(n){return __node("Call",118776,__node("Access",118776,__node("Ident",118776,"__defer"),__node("Const",118785,"fulfilled")),[__wrap(n)],false,false);},true);};}.call(this));',
          names: "fulfilled!",
          id: 156
        },
        {
          code: 'return (function(){"use strict";var __num,__typeof;__num=function(num){if(typeof num!=="number"){throw TypeError("Expected a number, got "+__typeof(num));}else{return num;}};__typeof=(function(){var _toString;_toString=Object.prototype.toString;return function(o){if(o===void 0){return "Undefined";}else if(o===null){return "Null";}else{return o.constructor&&o.constructor.name||_toString.call(o).slice(8,-1);}};}());return function(macroFullData,__wrap,__node,__const){var _this,macroData,macroName,node;_this=this;macroName=macroFullData.macroName;macroData=macroFullData.macroData;node=macroData[0];if(__num(macroData.length)>1){this.error("rejected! only expects one argument");}return this.mutateLast(node||this.noop(),function(n){return __node("Call",118951,__node("Access",118951,__node("Ident",118951,"__defer"),__node("Const",118960,"rejected")),[__wrap(n)],false,false);},true);};}.call(this));',
          names: "rejected!",
          id: 157
        },
        {
          code: 'return (function(){"use strict";var __num,__typeof;__num=function(num){if(typeof num!=="number"){throw TypeError("Expected a number, got "+__typeof(num));}else{return num;}};__typeof=(function(){var _toString;_toString=Object.prototype.toString;return function(o){if(o===void 0){return "Undefined";}else if(o===null){return "Null";}else{return o.constructor&&o.constructor.name||_toString.call(o).slice(8,-1);}};}());return function(macroFullData,__wrap,__node,__const){var macroData,macroName,node;macroName=macroFullData.macroName;macroData=macroFullData.macroData;node=macroData[0];if(__num(macroData.length)>1){this.error("from-promise! only expects one argument");}return __node("Call",119287,__node("Ident",119287,"__fromPromise"),[__wrap(node)],false,false);};}.call(this));',
          names: "fromPromise!",
          id: 158
        },
        {
          code: 'return (function(){"use strict";var __num,__slice,__typeof;__num=function(num){if(typeof num!=="number"){throw TypeError("Expected a number, got "+__typeof(num));}else{return num;}};__slice=Array.prototype.slice;__typeof=(function(){var _toString;_toString=Object.prototype.toString;return function(o){if(o===void 0){return "Undefined";}else if(o===null){return "Null";}else{return o.constructor&&o.constructor.name||_toString.call(o).slice(8,-1);}};}());return function(macroFullData,__wrap,__node,__const){var _this,args,func,head,macroData,macroName,node,tail;_this=this;macroName=macroFullData.macroName;macroData=macroFullData.macroData;node=macroData[0];if(__num(macroData.length)>1){this.error("to-promise! only expects one argument");}if(!this.isCall(node)){this.error("to-promise! call expression must be a call",node);}func=this.callFunc(node);args=this.callArgs(node);if(this.callIsNew(node)){args=this.array(args);return __node("Call",119839,__node("Ident",119839,"__toPromise"),[__node("Ident",119853,"__new"),__wrap(func),__wrap(args)],false,false);}else if(this.callIsApply(node)){if(args.length===0||!this.isSpread(args[0])){head=args[0];tail=this.array(__slice.call(args,1));return __node("Call",120028,__node("Ident",120028,"__toPromise"),[__wrap(func),__wrap(head),__wrap(tail)],false,false);}else{return this.maybeCache(this.array(args),function(setArgs,args){return __node("Call",120134,__node("Ident",120134,"__toPromise"),[__wrap(func),__node("Access",120154,__wrap(setArgs),__node("Const",120165,0)),__node("Call",120168,__node("Access",120168,__wrap(args),__node("Const",120175,"slice")),[__node("Const",120181,1)],false,false)],false,false);});}}else{args=this.array(args);if(this.isAccess(func)){return this.maybeCache(this.parent(func),function(setParent,parent){var child;child=_this.child(func);return __node("Call",120340,__node("Ident",120340,"__toPromise"),[__node("Access",120354,__wrap(setParent),__wrap(child)),__wrap(parent),__wrap(args)],false,false);});}else{return __node("Call",120409,__node("Ident",120409,"__toPromise"),[__wrap(func),__const("void"),__wrap(args)],false,false);}}};}.call(this));',
          options: {type: "promise"},
          names: "toPromise!",
          id: 159
        },
        {
          code: 'return (function(){"use strict";var __num,__typeof;__num=function(num){if(typeof num!=="number"){throw TypeError("Expected a number, got "+__typeof(num));}else{return num;}};__typeof=(function(){var _toString;_toString=Object.prototype.toString;return function(o){if(o===void 0){return "Undefined";}else if(o===null){return "Null";}else{return o.constructor&&o.constructor.name||_toString.call(o).slice(8,-1);}};}());return function(macroFullData,__wrap,__node,__const){var macroData,macroName,node;macroName=macroFullData.macroName;macroData=macroFullData.macroData;node=macroData[0];if(__num(macroData.length)>1){this.error("some-promise! only expects one argument");}if(!this.hasType(node,"array")){this.error("some-promise! should be used on an Array",node);}return __node("Call",121231,__node("Ident",121231,"__somePromise"),[__wrap(node)],false,false);};}.call(this));',
          names: "somePromise!",
          id: 160
        },
        {
          code: 'return (function(){"use strict";var __num,__typeof;__num=function(num){if(typeof num!=="number"){throw TypeError("Expected a number, got "+__typeof(num));}else{return num;}};__typeof=(function(){var _toString;_toString=Object.prototype.toString;return function(o){if(o===void 0){return "Undefined";}else if(o===null){return "Null";}else{return o.constructor&&o.constructor.name||_toString.call(o).slice(8,-1);}};}());return function(macroFullData,__wrap,__node,__const){var macroData,macroName,node;macroName=macroFullData.macroName;macroData=macroFullData.macroData;node=macroData[0];if(__num(macroData.length)>1){this.error("some-promise! only expects one argument");}if(!this.hasType(node,"array")&&!this.hasType(node,"object")){this.error("every-promise! should be used on an Array or Object",node);}return __node("Call",122069,__node("Ident",122069,"__everyPromise"),[__wrap(node)],false,false);};}.call(this));',
          names: "everyPromise!",
          id: 161
        },
        {
          code: 'return (function(){"use strict";var __num,__typeof;__num=function(num){if(typeof num!=="number"){throw TypeError("Expected a number, got "+__typeof(num));}else{return num;}};__typeof=(function(){var _toString;_toString=Object.prototype.toString;return function(o){if(o===void 0){return "Undefined";}else if(o===null){return "Null";}else{return o.constructor&&o.constructor.name||_toString.call(o).slice(8,-1);}};}());return function(macroFullData,__wrap,__node,__const){var hasValue,macroData,macroName,milliseconds,value;macroName=macroFullData.macroName;macroData=macroFullData.macroData;milliseconds=macroData[0];value=macroData[1];if(!this.hasType(milliseconds,"number")){this.error("delay! should take a number in milliseconds");}hasValue=!this.isConst(value)||this.value(value)!==void 0;if(this.isConst(milliseconds)&&typeof this.value(milliseconds)==="number"&&__num(this.value(milliseconds))<=0){if(hasValue){return __node("Call",122634,__node("Access",122634,__node("Ident",122634,"__defer"),__node("Const",122643,"fulfilled")),[__wrap(value)],false,false);}else{return __node("Call",122679,__node("Access",122679,__node("Ident",122679,"__defer"),__node("Const",122688,"fulfilled")),[],false,false);}}else if(hasValue){return __node("Call",122734,__node("Ident",122734,"__delay"),[__wrap(milliseconds),__wrap(value)],false,false);}else{return __node("Call",122784,__node("Ident",122784,"__delay"),[__wrap(milliseconds)],false,false);}};}.call(this));',
          names: "delay!",
          id: 162
        }
      ]
    });
  }(typeof module !== "undefined" && typeof require === "function" ? require : void 0));

  if (typeof define === "function" && define.amd) {
    define(function () { return GorillaScript; });
  } else {
    root.GorillaScript = GorillaScript;
  }
}(this));